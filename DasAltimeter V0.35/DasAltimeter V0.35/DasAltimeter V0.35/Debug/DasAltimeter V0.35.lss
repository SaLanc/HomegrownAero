
DasAltimeter V0.35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  0000045c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  20000430  0000088c  00020430  2**2
                  ALLOC
  3 .stack        00002000  20000450  000008ac  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000403d  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000498  00000000  00000000  000244ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b4  00000000  00000000  00024986  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000088  00000000  00000000  00024a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00024ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010c7e  00000000  00000000  00024b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001498  00000000  00000000  00035798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006ba63  00000000  00000000  00036c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001d8  00000000  00000000  000a2694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002450 	.word	0x20002450
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000221 	.word	0x00000221
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
	...
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000430 	.word	0x20000430
  d4:	00000000 	.word	0x00000000
  d8:	0000045c 	.word	0x0000045c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000434 	.word	0x20000434
 108:	0000045c 	.word	0x0000045c
 10c:	0000045c 	.word	0x0000045c
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
 11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
 124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
 12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
 136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
 156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17c:	39fd      	subs	r1, #253	; 0xfd
 17e:	2390      	movs	r3, #144	; 0x90
 180:	005b      	lsls	r3, r3, #1
 182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
 184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
 188:	78c3      	ldrb	r3, [r0, #3]
 18a:	2403      	movs	r4, #3
 18c:	43a3      	bics	r3, r4
 18e:	2202      	movs	r2, #2
 190:	4313      	orrs	r3, r2
 192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 194:	78c3      	ldrb	r3, [r0, #3]
 196:	260c      	movs	r6, #12
 198:	43b3      	bics	r3, r6
 19a:	2108      	movs	r1, #8
 19c:	430b      	orrs	r3, r1
 19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
 1a2:	7b98      	ldrb	r0, [r3, #14]
 1a4:	2530      	movs	r5, #48	; 0x30
 1a6:	43a8      	bics	r0, r5
 1a8:	0005      	movs	r5, r0
 1aa:	2020      	movs	r0, #32
 1ac:	4328      	orrs	r0, r5
 1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1b0:	7b98      	ldrb	r0, [r3, #14]
 1b2:	43b0      	bics	r0, r6
 1b4:	4301      	orrs	r1, r0
 1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b8:	7b99      	ldrb	r1, [r3, #14]
 1ba:	43a1      	bics	r1, r4
 1bc:	430a      	orrs	r2, r1
 1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
 1c2:	6851      	ldr	r1, [r2, #4]
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	430b      	orrs	r3, r1
 1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
 1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
 1d0:	4798      	blx	r3
 1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
 1d4:	20000000 	.word	0x20000000
 1d8:	0000045c 	.word	0x0000045c
 1dc:	20000430 	.word	0x20000430
 1e0:	20000450 	.word	0x20000450
 1e4:	20000430 	.word	0x20000430
 1e8:	20000004 	.word	0x20000004
 1ec:	20000434 	.word	0x20000434
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	00000000 	.word	0x00000000
 1f8:	41007000 	.word	0x41007000
 1fc:	41005000 	.word	0x41005000
 200:	41004800 	.word	0x41004800
 204:	41004000 	.word	0x41004000
 208:	000002b9 	.word	0x000002b9
 20c:	0000028d 	.word	0x0000028d

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
 212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
 214:	601a      	str	r2, [r3, #0]
	return;
}
 216:	4770      	bx	lr
 218:	000f4240 	.word	0x000f4240
 21c:	20000000 	.word	0x20000000

00000220 <SysTick_Handler>:

volatile uint32_t g_msTicks;

/* SysTick IRQ handler */
void SysTick_Handler(void) {
    g_msTicks++;
 220:	4a02      	ldr	r2, [pc, #8]	; (22c <SysTick_Handler+0xc>)
 222:	6813      	ldr	r3, [r2, #0]
 224:	3301      	adds	r3, #1
 226:	6013      	str	r3, [r2, #0]
}
 228:	4770      	bx	lr
 22a:	46c0      	nop			; (mov r8, r8)
 22c:	2000044c 	.word	0x2000044c

00000230 <delay_ms>:

void delay_ms(unsigned ms) {
    unsigned start = g_msTicks;
 230:	4b06      	ldr	r3, [pc, #24]	; (24c <delay_ms+0x1c>)
 232:	681a      	ldr	r2, [r3, #0]
    while (g_msTicks - start <= ms) {
 234:	681b      	ldr	r3, [r3, #0]
 236:	1a9b      	subs	r3, r3, r2
 238:	4298      	cmp	r0, r3
 23a:	d305      	bcc.n	248 <delay_ms+0x18>
 23c:	4903      	ldr	r1, [pc, #12]	; (24c <delay_ms+0x1c>)
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 23e:	bf30      	wfi
 240:	680b      	ldr	r3, [r1, #0]
 242:	1a9b      	subs	r3, r3, r2
 244:	4283      	cmp	r3, r0
 246:	d9fa      	bls.n	23e <delay_ms+0xe>
        __WFI();
    }
}
 248:	4770      	bx	lr
 24a:	46c0      	nop			; (mov r8, r8)
 24c:	2000044c 	.word	0x2000044c

00000250 <init_systick>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 250:	490a      	ldr	r1, [pc, #40]	; (27c <init_systick+0x2c>)
 252:	4b0b      	ldr	r3, [pc, #44]	; (280 <init_systick+0x30>)
 254:	604b      	str	r3, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 256:	4a0b      	ldr	r2, [pc, #44]	; (284 <init_systick+0x34>)
 258:	6a13      	ldr	r3, [r2, #32]
 25a:	021b      	lsls	r3, r3, #8
 25c:	0a1b      	lsrs	r3, r3, #8
 25e:	20c0      	movs	r0, #192	; 0xc0
 260:	0600      	lsls	r0, r0, #24
 262:	4303      	orrs	r3, r0
 264:	6213      	str	r3, [r2, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 266:	2000      	movs	r0, #0
 268:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 26a:	2307      	movs	r3, #7
 26c:	600b      	str	r3, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 26e:	6a13      	ldr	r3, [r2, #32]
 270:	021b      	lsls	r3, r3, #8
 272:	0a1b      	lsrs	r3, r3, #8
 274:	6213      	str	r3, [r2, #32]
        while (1) {

        }								/* Capture error */
    }
    NVIC_SetPriority(SysTick_IRQn, 0x0);
    g_msTicks = 0;
 276:	4b04      	ldr	r3, [pc, #16]	; (288 <init_systick+0x38>)
 278:	6018      	str	r0, [r3, #0]

}
 27a:	4770      	bx	lr
 27c:	e000e010 	.word	0xe000e010
 280:	0000bb7f 	.word	0x0000bb7f
 284:	e000ed00 	.word	0xe000ed00
 288:	2000044c 	.word	0x2000044c

0000028c <main>:


int main(void) {
 28c:	b510      	push	{r4, lr}
 28e:	b082      	sub	sp, #8
    /* Initialize the SAM system */
    SystemInit();
 290:	4b06      	ldr	r3, [pc, #24]	; (2ac <main+0x20>)
 292:	4798      	blx	r3
    init_systick();
 294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <main+0x24>)
 296:	4798      	blx	r3

    volatile uint32_t x = 0;
 298:	2300      	movs	r3, #0
 29a:	9301      	str	r3, [sp, #4]

    /* Replace with your application code */
    while (1) {
        delay_ms(10);
 29c:	4c05      	ldr	r4, [pc, #20]	; (2b4 <main+0x28>)
 29e:	200a      	movs	r0, #10
 2a0:	47a0      	blx	r4
        x++;
 2a2:	9b01      	ldr	r3, [sp, #4]
 2a4:	3301      	adds	r3, #1
 2a6:	9301      	str	r3, [sp, #4]
 2a8:	e7f9      	b.n	29e <main+0x12>
 2aa:	46c0      	nop			; (mov r8, r8)
 2ac:	00000211 	.word	0x00000211
 2b0:	00000251 	.word	0x00000251
 2b4:	00000231 	.word	0x00000231

000002b8 <__libc_init_array>:
 2b8:	b570      	push	{r4, r5, r6, lr}
 2ba:	4e0d      	ldr	r6, [pc, #52]	; (2f0 <__libc_init_array+0x38>)
 2bc:	4d0d      	ldr	r5, [pc, #52]	; (2f4 <__libc_init_array+0x3c>)
 2be:	2400      	movs	r4, #0
 2c0:	1bad      	subs	r5, r5, r6
 2c2:	10ad      	asrs	r5, r5, #2
 2c4:	d005      	beq.n	2d2 <__libc_init_array+0x1a>
 2c6:	00a3      	lsls	r3, r4, #2
 2c8:	58f3      	ldr	r3, [r6, r3]
 2ca:	3401      	adds	r4, #1
 2cc:	4798      	blx	r3
 2ce:	42a5      	cmp	r5, r4
 2d0:	d1f9      	bne.n	2c6 <__libc_init_array+0xe>
 2d2:	f000 f8b1 	bl	438 <_init>
 2d6:	4e08      	ldr	r6, [pc, #32]	; (2f8 <__libc_init_array+0x40>)
 2d8:	4d08      	ldr	r5, [pc, #32]	; (2fc <__libc_init_array+0x44>)
 2da:	2400      	movs	r4, #0
 2dc:	1bad      	subs	r5, r5, r6
 2de:	10ad      	asrs	r5, r5, #2
 2e0:	d005      	beq.n	2ee <__libc_init_array+0x36>
 2e2:	00a3      	lsls	r3, r4, #2
 2e4:	58f3      	ldr	r3, [r6, r3]
 2e6:	3401      	adds	r4, #1
 2e8:	4798      	blx	r3
 2ea:	42a5      	cmp	r5, r4
 2ec:	d1f9      	bne.n	2e2 <__libc_init_array+0x2a>
 2ee:	bd70      	pop	{r4, r5, r6, pc}
 2f0:	00000444 	.word	0x00000444
 2f4:	00000444 	.word	0x00000444
 2f8:	00000444 	.word	0x00000444
 2fc:	0000044c 	.word	0x0000044c

00000300 <register_fini>:
 300:	4b03      	ldr	r3, [pc, #12]	; (310 <register_fini+0x10>)
 302:	b510      	push	{r4, lr}
 304:	2b00      	cmp	r3, #0
 306:	d002      	beq.n	30e <register_fini+0xe>
 308:	4802      	ldr	r0, [pc, #8]	; (314 <register_fini+0x14>)
 30a:	f000 f805 	bl	318 <atexit>
 30e:	bd10      	pop	{r4, pc}
 310:	00000000 	.word	0x00000000
 314:	00000329 	.word	0x00000329

00000318 <atexit>:
 318:	b510      	push	{r4, lr}
 31a:	0001      	movs	r1, r0
 31c:	2300      	movs	r3, #0
 31e:	2200      	movs	r2, #0
 320:	2000      	movs	r0, #0
 322:	f000 f81b 	bl	35c <__register_exitproc>
 326:	bd10      	pop	{r4, pc}

00000328 <__libc_fini_array>:
 328:	b570      	push	{r4, r5, r6, lr}
 32a:	4b09      	ldr	r3, [pc, #36]	; (350 <__libc_fini_array+0x28>)
 32c:	4c09      	ldr	r4, [pc, #36]	; (354 <__libc_fini_array+0x2c>)
 32e:	1ae4      	subs	r4, r4, r3
 330:	10a4      	asrs	r4, r4, #2
 332:	d009      	beq.n	348 <__libc_fini_array+0x20>
 334:	4a08      	ldr	r2, [pc, #32]	; (358 <__libc_fini_array+0x30>)
 336:	18a5      	adds	r5, r4, r2
 338:	00ad      	lsls	r5, r5, #2
 33a:	18ed      	adds	r5, r5, r3
 33c:	682b      	ldr	r3, [r5, #0]
 33e:	3c01      	subs	r4, #1
 340:	4798      	blx	r3
 342:	3d04      	subs	r5, #4
 344:	2c00      	cmp	r4, #0
 346:	d1f9      	bne.n	33c <__libc_fini_array+0x14>
 348:	f000 f880 	bl	44c <_fini>
 34c:	bd70      	pop	{r4, r5, r6, pc}
 34e:	46c0      	nop			; (mov r8, r8)
 350:	00000458 	.word	0x00000458
 354:	0000045c 	.word	0x0000045c
 358:	3fffffff 	.word	0x3fffffff

0000035c <__register_exitproc>:
 35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 35e:	4644      	mov	r4, r8
 360:	465f      	mov	r7, fp
 362:	4656      	mov	r6, sl
 364:	464d      	mov	r5, r9
 366:	469b      	mov	fp, r3
 368:	4b2f      	ldr	r3, [pc, #188]	; (428 <__register_exitproc+0xcc>)
 36a:	b4f0      	push	{r4, r5, r6, r7}
 36c:	681c      	ldr	r4, [r3, #0]
 36e:	23a4      	movs	r3, #164	; 0xa4
 370:	005b      	lsls	r3, r3, #1
 372:	0005      	movs	r5, r0
 374:	58e0      	ldr	r0, [r4, r3]
 376:	000e      	movs	r6, r1
 378:	4690      	mov	r8, r2
 37a:	2800      	cmp	r0, #0
 37c:	d04b      	beq.n	416 <__register_exitproc+0xba>
 37e:	6843      	ldr	r3, [r0, #4]
 380:	2b1f      	cmp	r3, #31
 382:	dc0d      	bgt.n	3a0 <__register_exitproc+0x44>
 384:	1c5c      	adds	r4, r3, #1
 386:	2d00      	cmp	r5, #0
 388:	d121      	bne.n	3ce <__register_exitproc+0x72>
 38a:	3302      	adds	r3, #2
 38c:	009b      	lsls	r3, r3, #2
 38e:	6044      	str	r4, [r0, #4]
 390:	501e      	str	r6, [r3, r0]
 392:	2000      	movs	r0, #0
 394:	bc3c      	pop	{r2, r3, r4, r5}
 396:	4690      	mov	r8, r2
 398:	4699      	mov	r9, r3
 39a:	46a2      	mov	sl, r4
 39c:	46ab      	mov	fp, r5
 39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 3a0:	4b22      	ldr	r3, [pc, #136]	; (42c <__register_exitproc+0xd0>)
 3a2:	2b00      	cmp	r3, #0
 3a4:	d03c      	beq.n	420 <__register_exitproc+0xc4>
 3a6:	20c8      	movs	r0, #200	; 0xc8
 3a8:	0040      	lsls	r0, r0, #1
 3aa:	e000      	b.n	3ae <__register_exitproc+0x52>
 3ac:	bf00      	nop
 3ae:	2800      	cmp	r0, #0
 3b0:	d036      	beq.n	420 <__register_exitproc+0xc4>
 3b2:	22a4      	movs	r2, #164	; 0xa4
 3b4:	2300      	movs	r3, #0
 3b6:	0052      	lsls	r2, r2, #1
 3b8:	58a1      	ldr	r1, [r4, r2]
 3ba:	6043      	str	r3, [r0, #4]
 3bc:	6001      	str	r1, [r0, #0]
 3be:	50a0      	str	r0, [r4, r2]
 3c0:	3240      	adds	r2, #64	; 0x40
 3c2:	5083      	str	r3, [r0, r2]
 3c4:	3204      	adds	r2, #4
 3c6:	5083      	str	r3, [r0, r2]
 3c8:	2401      	movs	r4, #1
 3ca:	2d00      	cmp	r5, #0
 3cc:	d0dd      	beq.n	38a <__register_exitproc+0x2e>
 3ce:	009a      	lsls	r2, r3, #2
 3d0:	4691      	mov	r9, r2
 3d2:	4481      	add	r9, r0
 3d4:	4642      	mov	r2, r8
 3d6:	2188      	movs	r1, #136	; 0x88
 3d8:	464f      	mov	r7, r9
 3da:	507a      	str	r2, [r7, r1]
 3dc:	22c4      	movs	r2, #196	; 0xc4
 3de:	0052      	lsls	r2, r2, #1
 3e0:	4690      	mov	r8, r2
 3e2:	4480      	add	r8, r0
 3e4:	4642      	mov	r2, r8
 3e6:	3987      	subs	r1, #135	; 0x87
 3e8:	4099      	lsls	r1, r3
 3ea:	6812      	ldr	r2, [r2, #0]
 3ec:	468a      	mov	sl, r1
 3ee:	430a      	orrs	r2, r1
 3f0:	4694      	mov	ip, r2
 3f2:	4642      	mov	r2, r8
 3f4:	4661      	mov	r1, ip
 3f6:	6011      	str	r1, [r2, #0]
 3f8:	2284      	movs	r2, #132	; 0x84
 3fa:	4649      	mov	r1, r9
 3fc:	465f      	mov	r7, fp
 3fe:	0052      	lsls	r2, r2, #1
 400:	508f      	str	r7, [r1, r2]
 402:	2d02      	cmp	r5, #2
 404:	d1c1      	bne.n	38a <__register_exitproc+0x2e>
 406:	0002      	movs	r2, r0
 408:	4655      	mov	r5, sl
 40a:	328d      	adds	r2, #141	; 0x8d
 40c:	32ff      	adds	r2, #255	; 0xff
 40e:	6811      	ldr	r1, [r2, #0]
 410:	430d      	orrs	r5, r1
 412:	6015      	str	r5, [r2, #0]
 414:	e7b9      	b.n	38a <__register_exitproc+0x2e>
 416:	0020      	movs	r0, r4
 418:	304d      	adds	r0, #77	; 0x4d
 41a:	30ff      	adds	r0, #255	; 0xff
 41c:	50e0      	str	r0, [r4, r3]
 41e:	e7ae      	b.n	37e <__register_exitproc+0x22>
 420:	2001      	movs	r0, #1
 422:	4240      	negs	r0, r0
 424:	e7b6      	b.n	394 <__register_exitproc+0x38>
 426:	46c0      	nop			; (mov r8, r8)
 428:	00000434 	.word	0x00000434
 42c:	00000000 	.word	0x00000000
 430:	00000043 	.word	0x00000043

00000434 <_global_impure_ptr>:
 434:	20000008                                ... 

00000438 <_init>:
 438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 43a:	46c0      	nop			; (mov r8, r8)
 43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 43e:	bc08      	pop	{r3}
 440:	469e      	mov	lr, r3
 442:	4770      	bx	lr

00000444 <__init_array_start>:
 444:	00000301 	.word	0x00000301

00000448 <__frame_dummy_init_array_entry>:
 448:	000000dd                                ....

0000044c <_fini>:
 44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 44e:	46c0      	nop			; (mov r8, r8)
 450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 452:	bc08      	pop	{r3}
 454:	469e      	mov	lr, r3
 456:	4770      	bx	lr

00000458 <__fini_array_start>:
 458:	000000b5 	.word	0x000000b5
