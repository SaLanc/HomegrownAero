
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065cc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  000065cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c0  200004a8  00006a78  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000968  00006f38  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002318e  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b70  00000000  00000000  000436b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000279d  00000000  00000000  00046223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004a8  00000000  00000000  000489c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d78  00000000  00000000  00048e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016921  00000000  00000000  00049be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7bf  00000000  00000000  00060501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072b68  00000000  00000000  0006acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001168  00000000  00000000  000dd828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002968 	.word	0x20002968
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f31 	.word	0x00000f31
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000fd1 	.word	0x00000fd1
      90:	00001039 	.word	0x00001039
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	000065cc 	.word	0x000065cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	000065cc 	.word	0x000065cc
     10c:	000065cc 	.word	0x000065cc
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000065cc 	.word	0x000065cc
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000968 	.word	0x20000968
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000632d 	.word	0x0000632d
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002b55 	.word	0x00002b55
     214:	00002b6d 	.word	0x00002b6d

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002b55 	.word	0x00002b55

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00002b55 	.word	0x00002b55

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00002b55 	.word	0x00002b55

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00002b55 	.word	0x00002b55
     358:	00002b6d 	.word	0x00002b6d

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00002b55 	.word	0x00002b55
     3b0:	00002b6d 	.word	0x00002b6d

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00002b55 	.word	0x00002b55
     3f0:	00002b6d 	.word	0x00002b6d

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	2000063e 	.word	0x2000063e
     490:	00004249 	.word	0x00004249

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006031 	.word	0x00006031
     4cc:	00004ba1 	.word	0x00004ba1
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00002e81 	.word	0x00002e81
     4e4:	000058dd 	.word	0x000058dd
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	000053e9 	.word	0x000053e9

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000640 	.word	0x20000640
     548:	00000ed1 	.word	0x00000ed1
     54c:	41004400 	.word	0x41004400
     550:	00002b55 	.word	0x00002b55
     554:	00002b6d 	.word	0x00002b6d

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00002b55 	.word	0x00002b55
     580:	00000f01 	.word	0x00000f01
     584:	000004f9 	.word	0x000004f9

00000588 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     588:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     58a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     58c:	4afd      	ldr	r2, [pc, #1012]	; (984 <init+0x3fc>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     58e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     592:	2401      	movs	r4, #1
     594:	438b      	bics	r3, r1
     596:	391c      	subs	r1, #28
     598:	430b      	orrs	r3, r1
     59a:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     59c:	4afa      	ldr	r2, [pc, #1000]	; (988 <init+0x400>)
     59e:	3106      	adds	r1, #6
     5a0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5a2:	260f      	movs	r6, #15
     5a4:	430b      	orrs	r3, r1
     5a6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5a8:	4bf8      	ldr	r3, [pc, #992]	; (98c <init+0x404>)
     5aa:	4798      	blx	r3
    GclkInit();
     5ac:	4bf8      	ldr	r3, [pc, #992]	; (990 <init+0x408>)
     5ae:	4798      	blx	r3
    RtcInit();
     5b0:	4bf8      	ldr	r3, [pc, #992]	; (994 <init+0x40c>)
     5b2:	4798      	blx	r3
    delayInit();
     5b4:	4bf8      	ldr	r3, [pc, #992]	; (998 <init+0x410>)
     5b6:	4798      	blx	r3
    adcInit();
     5b8:	4bf8      	ldr	r3, [pc, #992]	; (99c <init+0x414>)
     5ba:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5bc:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5be:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c0:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x418>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c2:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	5858      	ldr	r0, [r3, r1]
     5c8:	4af6      	ldr	r2, [pc, #984]	; (9a4 <init+0x41c>)
     5ca:	4002      	ands	r2, r0
     5cc:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf6      	ldr	r3, [pc, #984]	; (9a8 <init+0x420>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	0019      	movs	r1, r3
     63c:	31b1      	adds	r1, #177	; 0xb1
     63e:	780d      	ldrb	r5, [r1, #0]
     640:	4035      	ands	r5, r6
     642:	4305      	orrs	r5, r0
     644:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     646:	7815      	ldrb	r5, [r2, #0]
     648:	4325      	orrs	r5, r4
     64a:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64c:	001d      	movs	r5, r3
     64e:	35d7      	adds	r5, #215	; 0xd7
     650:	782a      	ldrb	r2, [r5, #0]
     652:	43a2      	bics	r2, r4
     654:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     656:	2580      	movs	r5, #128	; 0x80
     658:	4ad4      	ldr	r2, [pc, #848]	; (9ac <init+0x424>)
     65a:	042d      	lsls	r5, r5, #16
     65c:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65e:	002a      	movs	r2, r5
     660:	9703      	str	r7, [sp, #12]
     662:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     664:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     666:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     668:	32c2      	adds	r2, #194	; 0xc2
     66a:	7815      	ldrb	r5, [r2, #0]
     66c:	43a5      	bics	r5, r4
     66e:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     670:	7815      	ldrb	r5, [r2, #0]
     672:	433d      	orrs	r5, r7
     674:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     676:	4665      	mov	r5, ip
     678:	19ff      	adds	r7, r7, r7
     67a:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67c:	780d      	ldrb	r5, [r1, #0]
     67e:	43b5      	bics	r5, r6
     680:	4325      	orrs	r5, r4
     682:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     684:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     686:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     688:	4321      	orrs	r1, r4
     68a:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68c:	0019      	movs	r1, r3
     68e:	31d6      	adds	r1, #214	; 0xd6
     690:	780a      	ldrb	r2, [r1, #0]
     692:	43a2      	bics	r2, r4
     694:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     696:	2180      	movs	r1, #128	; 0x80
     698:	4ac4      	ldr	r2, [pc, #784]	; (9ac <init+0x424>)
     69a:	03c9      	lsls	r1, r1, #15
     69c:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69e:	000a      	movs	r2, r1
     6a0:	9903      	ldr	r1, [sp, #12]
     6a2:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a4:	001a      	movs	r2, r3
     6a6:	3243      	adds	r2, #67	; 0x43
     6a8:	7811      	ldrb	r1, [r2, #0]
     6aa:	43a1      	bics	r1, r4
     6ac:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ae:	7811      	ldrb	r1, [r2, #0]
     6b0:	4329      	orrs	r1, r5
     6b2:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b4:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b6:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b8:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ba:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6bc:	7829      	ldrb	r1, [r5, #0]
     6be:	4031      	ands	r1, r6
     6c0:	4308      	orrs	r0, r1
     6c2:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c4:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c6:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c8:	4321      	orrs	r1, r4
     6ca:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6cc:	0019      	movs	r1, r3
     6ce:	3159      	adds	r1, #89	; 0x59
     6d0:	780a      	ldrb	r2, [r1, #0]
     6d2:	43a2      	bics	r2, r4
     6d4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d6:	2280      	movs	r2, #128	; 0x80
     6d8:	0492      	lsls	r2, r2, #18
     6da:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6dc:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6de:	001a      	movs	r2, r3
     6e0:	3242      	adds	r2, #66	; 0x42
     6e2:	7811      	ldrb	r1, [r2, #0]
     6e4:	43a1      	bics	r1, r4
     6e6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e8:	7811      	ldrb	r1, [r2, #0]
     6ea:	4301      	orrs	r1, r0
     6ec:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ee:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f0:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f2:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f4:	43b1      	bics	r1, r6
     6f6:	4321      	orrs	r1, r4
     6f8:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fc:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	4321      	orrs	r1, r4
     700:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     702:	0019      	movs	r1, r3
     704:	3158      	adds	r1, #88	; 0x58
     706:	780a      	ldrb	r2, [r1, #0]
     708:	001f      	movs	r7, r3
     70a:	43a2      	bics	r2, r4
     70c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70e:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     710:	2100      	movs	r1, #0
     712:	0452      	lsls	r2, r2, #17
     714:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     716:	615a      	str	r2, [r3, #20]
     718:	4aa5      	ldr	r2, [pc, #660]	; (9b0 <init+0x428>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71a:	3749      	adds	r7, #73	; 0x49
     71c:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71e:	2100      	movs	r1, #0
     720:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     722:	2100      	movs	r1, #0
     724:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     726:	2100      	movs	r1, #0
     728:	7611      	strb	r1, [r2, #24]
     72a:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72c:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72e:	43a2      	bics	r2, r4
     730:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     732:	2280      	movs	r2, #128	; 0x80
     734:	0052      	lsls	r2, r2, #1
     736:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     738:	783a      	ldrb	r2, [r7, #0]
     73a:	43a2      	bics	r2, r4
     73c:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73e:	2280      	movs	r2, #128	; 0x80
     740:	0092      	lsls	r2, r2, #2
     742:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     744:	001a      	movs	r2, r3
     746:	324b      	adds	r2, #75	; 0x4b
     748:	7811      	ldrb	r1, [r2, #0]
     74a:	43a1      	bics	r1, r4
     74c:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74e:	7811      	ldrb	r1, [r2, #0]
     750:	4329      	orrs	r1, r5
     752:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     754:	2180      	movs	r1, #128	; 0x80
     756:	0109      	lsls	r1, r1, #4
     758:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75a:	2135      	movs	r1, #53	; 0x35
     75c:	468c      	mov	ip, r1
     75e:	449c      	add	ip, r3
     760:	4661      	mov	r1, ip
     762:	7809      	ldrb	r1, [r1, #0]
     764:	351e      	adds	r5, #30
     766:	4031      	ands	r1, r6
     768:	4329      	orrs	r1, r5
     76a:	4665      	mov	r5, ip
     76c:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76e:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     770:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     772:	4321      	orrs	r1, r4
     774:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     776:	0019      	movs	r1, r3
     778:	3134      	adds	r1, #52	; 0x34
     77a:	780a      	ldrb	r2, [r1, #0]
     77c:	4032      	ands	r2, r6
     77e:	432a      	orrs	r2, r5
     780:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     782:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     784:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     786:	4322      	orrs	r2, r4
     788:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78a:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78c:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78e:	43b2      	bics	r2, r6
     790:	432a      	orrs	r2, r5
     792:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     794:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     796:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     798:	4322      	orrs	r2, r4
     79a:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	780a      	ldrb	r2, [r1, #0]
     79e:	43a2      	bics	r2, r4
     7a0:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a2:	2280      	movs	r2, #128	; 0x80
     7a4:	4981      	ldr	r1, [pc, #516]	; (9ac <init+0x424>)
     7a6:	00d2      	lsls	r2, r2, #3
     7a8:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7aa:	0019      	movs	r1, r3
     7ac:	3198      	adds	r1, #152	; 0x98
     7ae:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b0:	7881      	ldrb	r1, [r0, #2]
     7b2:	43a1      	bics	r1, r4
     7b4:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b6:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b8:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ba:	7a02      	ldrb	r2, [r0, #8]
     7bc:	43a2      	bics	r2, r4
     7be:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c0:	2280      	movs	r2, #128	; 0x80
     7c2:	0252      	lsls	r2, r2, #9
     7c4:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c6:	78ba      	ldrb	r2, [r7, #2]
     7c8:	43a2      	bics	r2, r4
     7ca:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7cc:	2280      	movs	r2, #128	; 0x80
     7ce:	0292      	lsls	r2, r2, #10
     7d0:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d2:	001a      	movs	r2, r3
     7d4:	3253      	adds	r2, #83	; 0x53
     7d6:	7811      	ldrb	r1, [r2, #0]
     7d8:	43a1      	bics	r1, r4
     7da:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7dc:	7811      	ldrb	r1, [r2, #0]
     7de:	4329      	orrs	r1, r5
     7e0:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e2:	2180      	movs	r1, #128	; 0x80
     7e4:	0309      	lsls	r1, r1, #12
     7e6:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e8:	2139      	movs	r1, #57	; 0x39
     7ea:	468c      	mov	ip, r1
     7ec:	449c      	add	ip, r3
     7ee:	4661      	mov	r1, ip
     7f0:	7809      	ldrb	r1, [r1, #0]
     7f2:	351e      	adds	r5, #30
     7f4:	4031      	ands	r1, r6
     7f6:	4329      	orrs	r1, r5
     7f8:	4665      	mov	r5, ip
     7fa:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fe:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     804:	0019      	movs	r1, r3
     806:	3138      	adds	r1, #56	; 0x38
     808:	780a      	ldrb	r2, [r1, #0]
     80a:	4032      	ands	r2, r6
     80c:	432a      	orrs	r2, r5
     80e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     810:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     812:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     814:	4322      	orrs	r2, r4
     816:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     818:	780a      	ldrb	r2, [r1, #0]
     81a:	43b2      	bics	r2, r6
     81c:	432a      	orrs	r2, r5
     81e:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     820:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     822:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	4322      	orrs	r2, r4
     826:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	798a      	ldrb	r2, [r1, #6]
     82a:	43a2      	bics	r2, r4
     82c:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82e:	2280      	movs	r2, #128	; 0x80
     830:	02d2      	lsls	r2, r2, #11
     832:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     834:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     836:	9103      	str	r1, [sp, #12]
     838:	780a      	ldrb	r2, [r1, #0]
     83a:	43a2      	bics	r2, r4
     83c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83e:	2280      	movs	r2, #128	; 0x80
     840:	0152      	lsls	r2, r2, #5
     842:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     844:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     846:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     848:	43a2      	bics	r2, r4
     84a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84c:	2280      	movs	r2, #128	; 0x80
     84e:	0212      	lsls	r2, r2, #8
     850:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     852:	001a      	movs	r2, r3
     854:	324d      	adds	r2, #77	; 0x4d
     856:	7810      	ldrb	r0, [r2, #0]
     858:	43a0      	bics	r0, r4
     85a:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85c:	7810      	ldrb	r0, [r2, #0]
     85e:	4328      	orrs	r0, r5
     860:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     862:	2080      	movs	r0, #128	; 0x80
     864:	0180      	lsls	r0, r0, #6
     866:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     868:	0018      	movs	r0, r3
     86a:	3036      	adds	r0, #54	; 0x36
     86c:	7805      	ldrb	r5, [r0, #0]
     86e:	4035      	ands	r5, r6
     870:	430d      	orrs	r5, r1
     872:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     874:	7811      	ldrb	r1, [r2, #0]
     876:	000d      	movs	r5, r1
     878:	4325      	orrs	r5, r4
     87a:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87c:	2237      	movs	r2, #55	; 0x37
     87e:	4694      	mov	ip, r2
     880:	449c      	add	ip, r3
     882:	4662      	mov	r2, ip
     884:	2120      	movs	r1, #32
     886:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     888:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88a:	4032      	ands	r2, r6
     88c:	430a      	orrs	r2, r1
     88e:	4661      	mov	r1, ip
     890:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     892:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     894:	783a      	ldrb	r2, [r7, #0]
     896:	4322      	orrs	r2, r4
     898:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     89a:	7802      	ldrb	r2, [r0, #0]
     89c:	43b2      	bics	r2, r6
     89e:	430a      	orrs	r2, r1
     8a0:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a2:	9a03      	ldr	r2, [sp, #12]
     8a4:	9903      	ldr	r1, [sp, #12]
     8a6:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a8:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8aa:	4322      	orrs	r2, r4
     8ac:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ae:	0019      	movs	r1, r3
     8b0:	314e      	adds	r1, #78	; 0x4e
     8b2:	780a      	ldrb	r2, [r1, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8b4:	4f3f      	ldr	r7, [pc, #252]	; (9b4 <init+0x42c>)
     8b6:	43a2      	bics	r2, r4
     8b8:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	01d2      	lsls	r2, r2, #7
     8be:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8c0:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	001a      	movs	r2, r3
     8c4:	3255      	adds	r2, #85	; 0x55
     8c6:	7811      	ldrb	r1, [r2, #0]
     8c8:	43a1      	bics	r1, r4
     8ca:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8cc:	2180      	movs	r1, #128	; 0x80
     8ce:	0389      	lsls	r1, r1, #14
     8d0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d2:	7811      	ldrb	r1, [r2, #0]
     8d4:	43a1      	bics	r1, r4
     8d6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d8:	7811      	ldrb	r1, [r2, #0]
     8da:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e0:	3056      	adds	r0, #86	; 0x56
     8e2:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e4:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e6:	43a2      	bics	r2, r4
     8e8:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ea:	2280      	movs	r2, #128	; 0x80
     8ec:	03d2      	lsls	r2, r2, #15
     8ee:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8f0:	313b      	adds	r1, #59	; 0x3b
     8f2:	780a      	ldrb	r2, [r1, #0]
     8f4:	43b2      	bics	r2, r6
     8f6:	432a      	orrs	r2, r5
     8f8:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8fa:	7802      	ldrb	r2, [r0, #0]
     8fc:	4322      	orrs	r2, r4
     8fe:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     900:	001a      	movs	r2, r3
     902:	3257      	adds	r2, #87	; 0x57
     904:	7810      	ldrb	r0, [r2, #0]
     906:	43a0      	bics	r0, r4
     908:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90a:	7810      	ldrb	r0, [r2, #0]
     90c:	4328      	orrs	r0, r5
     90e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     910:	2080      	movs	r0, #128	; 0x80
     912:	0400      	lsls	r0, r0, #16
     914:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     916:	2020      	movs	r0, #32
     918:	780b      	ldrb	r3, [r1, #0]
     91a:	4033      	ands	r3, r6
     91c:	4303      	orrs	r3, r0
     91e:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     920:	7813      	ldrb	r3, [r2, #0]
     922:	0028      	movs	r0, r5
     924:	4323      	orrs	r3, r4
     926:	7013      	strb	r3, [r2, #0]
     928:	2103      	movs	r1, #3
     92a:	2204      	movs	r2, #4
     92c:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     92e:	2300      	movs	r3, #0
     930:	4e21      	ldr	r6, [pc, #132]	; (9b8 <init+0x430>)
     932:	9301      	str	r3, [sp, #4]
     934:	9300      	str	r3, [sp, #0]
     936:	0021      	movs	r1, r4
     938:	0028      	movs	r0, r5
     93a:	2203      	movs	r2, #3
     93c:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     93e:	2204      	movs	r2, #4
     940:	2103      	movs	r1, #3
     942:	2000      	movs	r0, #0
     944:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     946:	2300      	movs	r3, #0
     948:	2103      	movs	r1, #3
     94a:	9301      	str	r3, [sp, #4]
     94c:	9300      	str	r3, [sp, #0]
     94e:	001a      	movs	r2, r3
     950:	0018      	movs	r0, r3
     952:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     954:	0020      	movs	r0, r4
     956:	2204      	movs	r2, #4
     958:	2103      	movs	r1, #3
     95a:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     95c:	2300      	movs	r3, #0
     95e:	0020      	movs	r0, r4
     960:	9301      	str	r3, [sp, #4]
     962:	9300      	str	r3, [sp, #0]
     964:	001a      	movs	r2, r3
     966:	2103      	movs	r1, #3
     968:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96a:	2208      	movs	r2, #8
     96c:	2104      	movs	r1, #4
     96e:	2003      	movs	r0, #3
     970:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     972:	2396      	movs	r3, #150	; 0x96
     974:	0021      	movs	r1, r4
     976:	2200      	movs	r2, #0
     978:	2003      	movs	r0, #3
     97a:	01db      	lsls	r3, r3, #7
     97c:	4c0f      	ldr	r4, [pc, #60]	; (9bc <init+0x434>)
     97e:	47a0      	blx	r4
     980:	e01e      	b.n	9c0 <init+0x438>
     982:	46c0      	nop			; (mov r8, r8)
     984:	41004000 	.word	0x41004000
     988:	40000400 	.word	0x40000400
     98c:	000001d5 	.word	0x000001d5
     990:	00000d29 	.word	0x00000d29
     994:	00000db1 	.word	0x00000db1
     998:	00000eb1 	.word	0x00000eb1
     99c:	00000b8d 	.word	0x00000b8d
     9a0:	e000e100 	.word	0xe000e100
     9a4:	ff00ffff 	.word	0xff00ffff
     9a8:	41004400 	.word	0x41004400
     9ac:	41004488 	.word	0x41004488
     9b0:	20000680 	.word	0x20000680
     9b4:	00002a45 	.word	0x00002a45
     9b8:	00002aa9 	.word	0x00002aa9
     9bc:	00002b0d 	.word	0x00002b0d

    TC4Init();
     9c0:	4b02      	ldr	r3, [pc, #8]	; (9cc <init+0x444>)
     9c2:	4798      	blx	r3
    TC5Init();
     9c4:	4b02      	ldr	r3, [pc, #8]	; (9d0 <init+0x448>)
     9c6:	4798      	blx	r3
}
     9c8:	b005      	add	sp, #20
     9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9cc:	00000f81 	.word	0x00000f81
     9d0:	00000fe9 	.word	0x00000fe9

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <main+0x48>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b11      	ldr	r3, [pc, #68]	; (a20 <main+0x4c>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b11      	ldr	r3, [pc, #68]	; (a24 <main+0x50>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b11      	ldr	r3, [pc, #68]	; (a28 <main+0x54>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c11      	ldr	r4, [pc, #68]	; (a2c <main+0x58>)
     9e8:	47a0      	blx	r4

    //POST();

    isItPointingUp();
     9ea:	4b11      	ldr	r3, [pc, #68]	; (a30 <main+0x5c>)
     9ec:	4798      	blx	r3

    getSettings();
     9ee:	4b11      	ldr	r3, [pc, #68]	; (a34 <main+0x60>)
     9f0:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9f2:	20c8      	movs	r0, #200	; 0xc8
     9f4:	4b10      	ldr	r3, [pc, #64]	; (a38 <main+0x64>)
     9f6:	0080      	lsls	r0, r0, #2
     9f8:	4798      	blx	r3

    startupTick = millis();
     9fa:	4b10      	ldr	r3, [pc, #64]	; (a3c <main+0x68>)
     9fc:	4798      	blx	r3
     9fe:	4b10      	ldr	r3, [pc, #64]	; (a40 <main+0x6c>)
     a00:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a02:	4b10      	ldr	r3, [pc, #64]	; (a44 <main+0x70>)
     a04:	4798      	blx	r3
     a06:	2800      	cmp	r0, #0
     a08:	d0fb      	beq.n	a02 <main+0x2e>
            sampleTick();
     a0a:	47a0      	blx	r4
            flight();
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <main+0x74>)
     a0e:	4798      	blx	r3
            igniterTick();
     a10:	4b0e      	ldr	r3, [pc, #56]	; (a4c <main+0x78>)
     a12:	4798      	blx	r3
            computeKalmanStates();
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <main+0x7c>)
     a16:	4798      	blx	r3
     a18:	e7f3      	b.n	a02 <main+0x2e>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000589 	.word	0x00000589
     a20:	00000559 	.word	0x00000559
     a24:	00000a55 	.word	0x00000a55
     a28:	000015a5 	.word	0x000015a5
     a2c:	00002709 	.word	0x00002709
     a30:	0000133d 	.word	0x0000133d
     a34:	00002c9d 	.word	0x00002c9d
     a38:	00000c71 	.word	0x00000c71
     a3c:	00000f4d 	.word	0x00000f4d
     a40:	2000052c 	.word	0x2000052c
     a44:	000026f1 	.word	0x000026f1
     a48:	00001051 	.word	0x00001051
     a4c:	00001419 	.word	0x00001419
     a50:	00002131 	.word	0x00002131

00000a54 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a54:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a56:	4c08      	ldr	r4, [pc, #32]	; (a78 <IMUinit+0x24>)
     a58:	2580      	movs	r5, #128	; 0x80
     a5a:	0023      	movs	r3, r4
     a5c:	00ed      	lsls	r5, r5, #3
     a5e:	3394      	adds	r3, #148	; 0x94
     a60:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a62:	4e06      	ldr	r6, [pc, #24]	; (a7c <IMUinit+0x28>)
     a64:	210f      	movs	r1, #15
     a66:	2000      	movs	r0, #0
     a68:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a6a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a6c:	210c      	movs	r1, #12
     a6e:	2000      	movs	r0, #0
     a70:	47b0      	blx	r6
     a72:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a74:	bd70      	pop	{r4, r5, r6, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	41004400 	.word	0x41004400
     a7c:	00002b55 	.word	0x00002b55

00000a80 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a80:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <USARTconnectionAvaliable+0x28>)
     a84:	7e1c      	ldrb	r4, [r3, #24]
     a86:	0764      	lsls	r4, r4, #29
     a88:	0fe4      	lsrs	r4, r4, #31
     a8a:	2c01      	cmp	r4, #1
     a8c:	d001      	beq.n	a92 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a8e:	2000      	movs	r0, #0
     a90:	e009      	b.n	aa6 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a92:	2003      	movs	r0, #3
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <USARTconnectionAvaliable+0x2c>)
     a96:	4798      	blx	r3
     a98:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     a9a:	2948      	cmp	r1, #72	; 0x48
     a9c:	d1f7      	bne.n	a8e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a9e:	2003      	movs	r0, #3
     aa0:	4b03      	ldr	r3, [pc, #12]	; (ab0 <USARTconnectionAvaliable+0x30>)
     aa2:	4798      	blx	r3
            return true;
     aa4:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     aa6:	bd10      	pop	{r4, pc}
     aa8:	42001400 	.word	0x42001400
     aac:	00002ba1 	.word	0x00002ba1
     ab0:	00002b89 	.word	0x00002b89

00000ab4 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ab6:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab8:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aba:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     abc:	1a09      	subs	r1, r1, r0
     abe:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ac0:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ac2:	b28b      	uxth	r3, r1
     ac4:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ac6:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ac8:	a902      	add	r1, sp, #8
     aca:	0028      	movs	r0, r5
     acc:	4b09      	ldr	r3, [pc, #36]	; (af4 <sendTheasePagesToComputer+0x40>)
     ace:	4798      	blx	r3
     ad0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     ad2:	ab02      	add	r3, sp, #8
     ad4:	5d99      	ldrb	r1, [r3, r6]
     ad6:	2003      	movs	r0, #3
     ad8:	4b07      	ldr	r3, [pc, #28]	; (af8 <sendTheasePagesToComputer+0x44>)
     ada:	3601      	adds	r6, #1
     adc:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ade:	42be      	cmp	r6, r7
     ae0:	d1f7      	bne.n	ad2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae2:	3401      	adds	r4, #1
     ae4:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ae6:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae8:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     aea:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aec:	42a3      	cmp	r3, r4
     aee:	d2eb      	bcs.n	ac8 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     af0:	b043      	add	sp, #268	; 0x10c
     af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af4:	0000035d 	.word	0x0000035d
     af8:	00002b89 	.word	0x00002b89

00000afc <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     afe:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b00:	6998      	ldr	r0, [r3, #24]
     b02:	4b07      	ldr	r3, [pc, #28]	; (b20 <altitudeAGL+0x24>)
     b04:	4798      	blx	r3
     b06:	000b      	movs	r3, r1
     b08:	4906      	ldr	r1, [pc, #24]	; (b24 <altitudeAGL+0x28>)
     b0a:	0002      	movs	r2, r0
     b0c:	6808      	ldr	r0, [r1, #0]
     b0e:	6849      	ldr	r1, [r1, #4]
     b10:	4c05      	ldr	r4, [pc, #20]	; (b28 <altitudeAGL+0x2c>)
     b12:	47a0      	blx	r4
     b14:	4b05      	ldr	r3, [pc, #20]	; (b2c <altitudeAGL+0x30>)
     b16:	4798      	blx	r3
}
     b18:	bd10      	pop	{r4, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	200004d8 	.word	0x200004d8
     b20:	000060b5 	.word	0x000060b5
     b24:	200006b0 	.word	0x200006b0
     b28:	000058dd 	.word	0x000058dd
     b2c:	00005fc5 	.word	0x00005fc5

00000b30 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b30:	4b07      	ldr	r3, [pc, #28]	; (b50 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b32:	b570      	push	{r4, r5, r6, lr}
     b34:	68d8      	ldr	r0, [r3, #12]
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <unplugged+0x24>)
     b38:	4798      	blx	r3
     b3a:	4a07      	ldr	r2, [pc, #28]	; (b58 <unplugged+0x28>)
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <unplugged+0x2c>)
     b3e:	4d08      	ldr	r5, [pc, #32]	; (b60 <unplugged+0x30>)
     b40:	2401      	movs	r4, #1
     b42:	47a8      	blx	r5
     b44:	2800      	cmp	r0, #0
     b46:	d100      	bne.n	b4a <unplugged+0x1a>
     b48:	1c04      	adds	r4, r0, #0
     b4a:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b4c:	bd70      	pop	{r4, r5, r6, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	20000908 	.word	0x20000908
     b54:	00006125 	.word	0x00006125
     b58:	66666666 	.word	0x66666666
     b5c:	400a6666 	.word	0x400a6666
     b60:	000041f9 	.word	0x000041f9

00000b64 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b64:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b66:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <finishFlight+0x18>)
     b6a:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <finishFlight+0x1c>)
     b6e:	4798      	blx	r3
    writeFlightEndAddress( );
     b70:	4b04      	ldr	r3, [pc, #16]	; (b84 <finishFlight+0x20>)
     b72:	4798      	blx	r3
    unpluggedJingle();
     b74:	4b04      	ldr	r3, [pc, #16]	; (b88 <finishFlight+0x24>)
     b76:	4798      	blx	r3

}
     b78:	bd10      	pop	{r4, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	2000053c 	.word	0x2000053c
     b80:	000001e5 	.word	0x000001e5
     b84:	000025ad 	.word	0x000025ad
     b88:	00000ce5 	.word	0x00000ce5

00000b8c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b8c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b8e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b90:	4a10      	ldr	r2, [pc, #64]	; (bd4 <adcInit+0x48>)
     b92:	0249      	lsls	r1, r1, #9
     b94:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b96:	4810      	ldr	r0, [pc, #64]	; (bd8 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b98:	430b      	orrs	r3, r1
     b9a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b9c:	23e0      	movs	r3, #224	; 0xe0
     b9e:	490f      	ldr	r1, [pc, #60]	; (bdc <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba0:	4a0f      	ldr	r2, [pc, #60]	; (be0 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ba2:	00db      	lsls	r3, r3, #3
     ba4:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba6:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     ba8:	4a0e      	ldr	r2, [pc, #56]	; (be4 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     baa:	6812      	ldr	r2, [r2, #0]
     bac:	0150      	lsls	r0, r2, #5
     bae:	4018      	ands	r0, r3
     bb0:	4b0d      	ldr	r3, [pc, #52]	; (be8 <adcInit+0x5c>)
     bb2:	0154      	lsls	r4, r2, #5
     bb4:	681a      	ldr	r2, [r3, #0]
     bb6:	0ed3      	lsrs	r3, r2, #27
     bb8:	4323      	orrs	r3, r4
     bba:	b2da      	uxtb	r2, r3
     bbc:	0003      	movs	r3, r0
     bbe:	4313      	orrs	r3, r2
     bc0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     bc2:	2301      	movs	r3, #1
     bc4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bc6:	18db      	adds	r3, r3, r3
     bc8:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bca:	7e4b      	ldrb	r3, [r1, #25]
     bcc:	b25b      	sxtb	r3, r3
     bce:	2b00      	cmp	r3, #0
     bd0:	dbfb      	blt.n	bca <adcInit+0x3e>
}
     bd2:	bd10      	pop	{r4, pc}
     bd4:	40000400 	.word	0x40000400
     bd8:	0000401e 	.word	0x0000401e
     bdc:	42004000 	.word	0x42004000
     be0:	40000c00 	.word	0x40000c00
     be4:	00806024 	.word	0x00806024
     be8:	00806020 	.word	0x00806020

00000bec <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bec:	2202      	movs	r2, #2
     bee:	4b05      	ldr	r3, [pc, #20]	; (c04 <adcSample+0x18>)
     bf0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bf2:	3a01      	subs	r2, #1
     bf4:	7e19      	ldrb	r1, [r3, #24]
     bf6:	4211      	tst	r1, r2
     bf8:	d0fc      	beq.n	bf4 <adcSample+0x8>
    return ADC->RESULT.reg;
     bfa:	4b02      	ldr	r3, [pc, #8]	; (c04 <adcSample+0x18>)
     bfc:	8b58      	ldrh	r0, [r3, #26]
     bfe:	b280      	uxth	r0, r0
}
     c00:	4770      	bx	lr
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	42004000 	.word	0x42004000

00000c08 <adc_read>:


u16_t adc_read(Pin p) {
     c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c0a:	2501      	movs	r5, #1
     c0c:	0c02      	lsrs	r2, r0, #16
     c0e:	b2d4      	uxtb	r4, r2
     c10:	9000      	str	r0, [sp, #0]
     c12:	0e00      	lsrs	r0, r0, #24
     c14:	9101      	str	r1, [sp, #4]
     c16:	0842      	lsrs	r2, r0, #1
     c18:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c1a:	4911      	ldr	r1, [pc, #68]	; (c60 <adc_read+0x58>)
     c1c:	18d2      	adds	r2, r2, r3
     c1e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c20:	4228      	tst	r0, r5
     c22:	d005      	beq.n	c30 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c24:	210f      	movs	r1, #15
     c26:	7814      	ldrb	r4, [r2, #0]
     c28:	4021      	ands	r1, r4
     c2a:	2410      	movs	r4, #16
     c2c:	4321      	orrs	r1, r4
     c2e:	e003      	b.n	c38 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c30:	240f      	movs	r4, #15
     c32:	7811      	ldrb	r1, [r2, #0]
     c34:	43a1      	bics	r1, r4
     c36:	4329      	orrs	r1, r5
     c38:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c3a:	2101      	movs	r1, #1
     c3c:	4a09      	ldr	r2, [pc, #36]	; (c64 <adc_read+0x5c>)
     c3e:	18c3      	adds	r3, r0, r3
     c40:	189b      	adds	r3, r3, r2
     c42:	781a      	ldrb	r2, [r3, #0]
     c44:	430a      	orrs	r2, r1
     c46:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c48:	466b      	mov	r3, sp
     c4a:	791a      	ldrb	r2, [r3, #4]
     c4c:	231f      	movs	r3, #31
     c4e:	4013      	ands	r3, r2
     c50:	22c0      	movs	r2, #192	; 0xc0
     c52:	0152      	lsls	r2, r2, #5
     c54:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c56:	4a04      	ldr	r2, [pc, #16]	; (c68 <adc_read+0x60>)
     c58:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <adc_read+0x64>)
     c5c:	4798      	blx	r3
     c5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c60:	41004430 	.word	0x41004430
     c64:	41004440 	.word	0x41004440
     c68:	42004000 	.word	0x42004000
     c6c:	00000bed 	.word	0x00000bed

00000c70 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c72:	2380      	movs	r3, #128	; 0x80
     c74:	2780      	movs	r7, #128	; 0x80
     c76:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c78:	2500      	movs	r5, #0
     c7a:	4c0a      	ldr	r4, [pc, #40]	; (ca4 <beep+0x34>)
     c7c:	035b      	lsls	r3, r3, #13
     c7e:	61e3      	str	r3, [r4, #28]
     c80:	03bf      	lsls	r7, r7, #14
     c82:	42b5      	cmp	r5, r6
     c84:	d006      	beq.n	c94 <beep+0x24>
     c86:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     c88:	207a      	movs	r0, #122	; 0x7a
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c8c:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     c8e:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c90:	b2ad      	uxth	r5, r5
     c92:	e7f6      	b.n	c82 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c94:	2380      	movs	r3, #128	; 0x80
     c96:	039b      	lsls	r3, r3, #14
     c98:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c9a:	2380      	movs	r3, #128	; 0x80
     c9c:	035b      	lsls	r3, r3, #13
     c9e:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	41004400 	.word	0x41004400
     ca8:	00000ed1 	.word	0x00000ed1

00000cac <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     cac:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     cae:	2696      	movs	r6, #150	; 0x96
     cb0:	0076      	lsls	r6, r6, #1
     cb2:	4d0a      	ldr	r5, [pc, #40]	; (cdc <startupJingle+0x30>)
     cb4:	0030      	movs	r0, r6
     cb6:	47a8      	blx	r5
    delay_ms(80);
     cb8:	4c09      	ldr	r4, [pc, #36]	; (ce0 <startupJingle+0x34>)
     cba:	2050      	movs	r0, #80	; 0x50
     cbc:	47a0      	blx	r4
    beep(300);
     cbe:	0030      	movs	r0, r6
     cc0:	47a8      	blx	r5
    delay_ms(250);
     cc2:	20fa      	movs	r0, #250	; 0xfa
     cc4:	47a0      	blx	r4
    beep(300);
     cc6:	0030      	movs	r0, r6
     cc8:	47a8      	blx	r5
    delay_ms(80);
     cca:	2050      	movs	r0, #80	; 0x50
     ccc:	47a0      	blx	r4
    beep(300);
     cce:	0030      	movs	r0, r6
     cd0:	47a8      	blx	r5
    delay_ms(500);
     cd2:	20fa      	movs	r0, #250	; 0xfa
     cd4:	0040      	lsls	r0, r0, #1
     cd6:	47a0      	blx	r4
}
     cd8:	bd70      	pop	{r4, r5, r6, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00000c71 	.word	0x00000c71
     ce0:	00000f01 	.word	0x00000f01

00000ce4 <unpluggedJingle>:

void unpluggedJingle() {
     ce4:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     ce6:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     ce8:	4c0c      	ldr	r4, [pc, #48]	; (d1c <unpluggedJingle+0x38>)
    beep(300);
     cea:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     cec:	2050      	movs	r0, #80	; 0x50
     cee:	47a0      	blx	r4
    beep(300);
     cf0:	4d0b      	ldr	r5, [pc, #44]	; (d20 <unpluggedJingle+0x3c>)
     cf2:	0030      	movs	r0, r6
     cf4:	47a8      	blx	r5
    delay_ms(80);
     cf6:	2050      	movs	r0, #80	; 0x50
     cf8:	47a0      	blx	r4
    beep(300);
     cfa:	0030      	movs	r0, r6
     cfc:	47a8      	blx	r5
    delay_ms(80);
     cfe:	2050      	movs	r0, #80	; 0x50
     d00:	47a0      	blx	r4
    beep(300);
     d02:	0030      	movs	r0, r6
     d04:	47a8      	blx	r5
    delay_ms(80);
     d06:	2050      	movs	r0, #80	; 0x50
     d08:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0a:	2280      	movs	r2, #128	; 0x80
     d0c:	4b05      	ldr	r3, [pc, #20]	; (d24 <unpluggedJingle+0x40>)
     d0e:	0392      	lsls	r2, r2, #14
     d10:	615a      	str	r2, [r3, #20]
     d12:	2280      	movs	r2, #128	; 0x80
     d14:	0352      	lsls	r2, r2, #13
     d16:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     d18:	bd70      	pop	{r4, r5, r6, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	00000f01 	.word	0x00000f01
     d20:	00000c71 	.word	0x00000c71
     d24:	41004400 	.word	0x41004400

00000d28 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d28:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d2a:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d2c:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d2e:	4916      	ldr	r1, [pc, #88]	; (d88 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d30:	4a16      	ldr	r2, [pc, #88]	; (d8c <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d32:	00db      	lsls	r3, r3, #3
     d34:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d36:	6853      	ldr	r3, [r2, #4]
     d38:	4303      	orrs	r3, r0
     d3a:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d3c:	4b14      	ldr	r3, [pc, #80]	; (d90 <GclkInit+0x68>)
     d3e:	681a      	ldr	r2, [r3, #0]
     d40:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d42:	2a3f      	cmp	r2, #63	; 0x3f
     d44:	d100      	bne.n	d48 <GclkInit+0x20>
        coarse = 0x1f;
     d46:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d48:	4b12      	ldr	r3, [pc, #72]	; (d94 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d4a:	4813      	ldr	r0, [pc, #76]	; (d98 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	059b      	lsls	r3, r3, #22
     d50:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d52:	4283      	cmp	r3, r0
     d54:	d100      	bne.n	d58 <GclkInit+0x30>
        fine = 0x1ff;
     d56:	4b11      	ldr	r3, [pc, #68]	; (d9c <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d58:	4811      	ldr	r0, [pc, #68]	; (da0 <GclkInit+0x78>)
     d5a:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d5c:	2010      	movs	r0, #16
     d5e:	68cc      	ldr	r4, [r1, #12]
     d60:	4204      	tst	r4, r0
     d62:	d0fc      	beq.n	d5e <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d64:	0292      	lsls	r2, r2, #10
     d66:	4313      	orrs	r3, r2
     d68:	4a07      	ldr	r2, [pc, #28]	; (d88 <GclkInit+0x60>)
     d6a:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d6c:	2310      	movs	r3, #16
     d6e:	68ca      	ldr	r2, [r1, #12]
     d70:	421a      	tst	r2, r3
     d72:	d0fc      	beq.n	d6e <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d74:	4a0b      	ldr	r2, [pc, #44]	; (da4 <GclkInit+0x7c>)
     d76:	4b04      	ldr	r3, [pc, #16]	; (d88 <GclkInit+0x60>)
     d78:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d7a:	2280      	movs	r2, #128	; 0x80
     d7c:	4b0a      	ldr	r3, [pc, #40]	; (da8 <GclkInit+0x80>)
     d7e:	0052      	lsls	r2, r2, #1
     d80:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d82:	4a0a      	ldr	r2, [pc, #40]	; (dac <GclkInit+0x84>)
     d84:	605a      	str	r2, [r3, #4]
}
     d86:	bd10      	pop	{r4, pc}
     d88:	40000800 	.word	0x40000800
     d8c:	41004000 	.word	0x41004000
     d90:	00806024 	.word	0x00806024
     d94:	00806028 	.word	0x00806028
     d98:	000003ff 	.word	0x000003ff
     d9c:	000001ff 	.word	0x000001ff
     da0:	00000522 	.word	0x00000522
     da4:	000005a2 	.word	0x000005a2
     da8:	40000c00 	.word	0x40000c00
     dac:	00010700 	.word	0x00010700

00000db0 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     db0:	4b27      	ldr	r3, [pc, #156]	; (e50 <RtcInit+0xa0>)
     db2:	4a28      	ldr	r2, [pc, #160]	; (e54 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     db4:	4828      	ldr	r0, [pc, #160]	; (e58 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     db6:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     db8:	4a28      	ldr	r2, [pc, #160]	; (e5c <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     dba:	6999      	ldr	r1, [r3, #24]
     dbc:	6812      	ldr	r2, [r2, #0]
     dbe:	4001      	ands	r1, r0
     dc0:	04d2      	lsls	r2, r2, #19
     dc2:	0e52      	lsrs	r2, r2, #25
     dc4:	0412      	lsls	r2, r2, #16
     dc6:	4311      	orrs	r1, r2
     dc8:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     dca:	4925      	ldr	r1, [pc, #148]	; (e60 <RtcInit+0xb0>)
     dcc:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dce:	6999      	ldr	r1, [r3, #24]
     dd0:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dd2:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dd4:	4302      	orrs	r2, r0
     dd6:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dd8:	699a      	ldr	r2, [r3, #24]
     dda:	430a      	orrs	r2, r1
     ddc:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     dde:	2204      	movs	r2, #4
     de0:	68d9      	ldr	r1, [r3, #12]
     de2:	4211      	tst	r1, r2
     de4:	d0fc      	beq.n	de0 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     de6:	2281      	movs	r2, #129	; 0x81
     de8:	4b1e      	ldr	r3, [pc, #120]	; (e64 <RtcInit+0xb4>)
     dea:	0052      	lsls	r2, r2, #1
     dec:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     dee:	4a1e      	ldr	r2, [pc, #120]	; (e68 <RtcInit+0xb8>)
     df0:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     df2:	785a      	ldrb	r2, [r3, #1]
     df4:	b252      	sxtb	r2, r2
     df6:	2a00      	cmp	r2, #0
     df8:	dbfb      	blt.n	df2 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     dfa:	4a1c      	ldr	r2, [pc, #112]	; (e6c <RtcInit+0xbc>)
     dfc:	4b19      	ldr	r3, [pc, #100]	; (e64 <RtcInit+0xb4>)
     dfe:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e00:	2204      	movs	r2, #4
     e02:	4b1b      	ldr	r3, [pc, #108]	; (e70 <RtcInit+0xc0>)
     e04:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e06:	7a9a      	ldrb	r2, [r3, #10]
     e08:	4919      	ldr	r1, [pc, #100]	; (e70 <RtcInit+0xc0>)
     e0a:	09d2      	lsrs	r2, r2, #7
     e0c:	d1fb      	bne.n	e06 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e0e:	20a0      	movs	r0, #160	; 0xa0
     e10:	880a      	ldrh	r2, [r1, #0]
     e12:	00c0      	lsls	r0, r0, #3
     e14:	4302      	orrs	r2, r0
     e16:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e18:	7a9a      	ldrb	r2, [r3, #10]
     e1a:	09d2      	lsrs	r2, r2, #7
     e1c:	d1fc      	bne.n	e18 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e1e:	4915      	ldr	r1, [pc, #84]	; (e74 <RtcInit+0xc4>)
     e20:	4a13      	ldr	r2, [pc, #76]	; (e70 <RtcInit+0xc0>)
     e22:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e24:	7a99      	ldrb	r1, [r3, #10]
     e26:	4a12      	ldr	r2, [pc, #72]	; (e70 <RtcInit+0xc0>)
     e28:	09c9      	lsrs	r1, r1, #7
     e2a:	d1fb      	bne.n	e24 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e2c:	8851      	ldrh	r1, [r2, #2]
     e2e:	4812      	ldr	r0, [pc, #72]	; (e78 <RtcInit+0xc8>)
     e30:	4301      	orrs	r1, r0
     e32:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e34:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e36:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e38:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e3a:	8811      	ldrh	r1, [r2, #0]
     e3c:	4301      	orrs	r1, r0
     e3e:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e40:	7a9a      	ldrb	r2, [r3, #10]
     e42:	09d2      	lsrs	r2, r2, #7
     e44:	d1fc      	bne.n	e40 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e46:	4b0d      	ldr	r3, [pc, #52]	; (e7c <RtcInit+0xcc>)
     e48:	3208      	adds	r2, #8
     e4a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e4c:	4770      	bx	lr
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	40000800 	.word	0x40000800
     e54:	00000606 	.word	0x00000606
     e58:	ff80ffff 	.word	0xff80ffff
     e5c:	00806024 	.word	0x00806024
     e60:	00000604 	.word	0x00000604
     e64:	40000c00 	.word	0x40000c00
     e68:	00230002 	.word	0x00230002
     e6c:	00004204 	.word	0x00004204
     e70:	40001400 	.word	0x40001400
     e74:	000003e6 	.word	0x000003e6
     e78:	00004010 	.word	0x00004010
     e7c:	e000e100 	.word	0xe000e100

00000e80 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e80:	230f      	movs	r3, #15
     e82:	4018      	ands	r0, r3
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <gclkEnable+0x28>)
     e86:	0212      	lsls	r2, r2, #8
     e88:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8a:	23f8      	movs	r3, #248	; 0xf8
     e8c:	0209      	lsls	r1, r1, #8
     e8e:	015b      	lsls	r3, r3, #5
     e90:	4019      	ands	r1, r3
     e92:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e94:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e96:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e98:	4c04      	ldr	r4, [pc, #16]	; (eac <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e9a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e9c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e9e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ea0:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ea2:	6060      	str	r0, [r4, #4]
}
     ea4:	bd10      	pop	{r4, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00ffff00 	.word	0x00ffff00
     eac:	40000c00 	.word	0x40000c00

00000eb0 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     eb0:	4b04      	ldr	r3, [pc, #16]	; (ec4 <delayInit+0x14>)
     eb2:	4a05      	ldr	r2, [pc, #20]	; (ec8 <delayInit+0x18>)
     eb4:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     eb6:	2230      	movs	r2, #48	; 0x30
     eb8:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     eba:	4b04      	ldr	r3, [pc, #16]	; (ecc <delayInit+0x1c>)
     ebc:	3a2b      	subs	r2, #43	; 0x2b
     ebe:	601a      	str	r2, [r3, #0]
}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000004 	.word	0x20000004
     ec8:	0000bb80 	.word	0x0000bb80
     ecc:	e000e010 	.word	0xe000e010

00000ed0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ed0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ed4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     ed6:	4b08      	ldr	r3, [pc, #32]	; (ef8 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ed8:	4a08      	ldr	r2, [pc, #32]	; (efc <delay_us+0x2c>)
     eda:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     edc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     ede:	3801      	subs	r0, #1
     ee0:	d308      	bcc.n	ef4 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ee2:	2b00      	cmp	r3, #0
     ee4:	d0fb      	beq.n	ede <delay_us+0xe>
     ee6:	4e05      	ldr	r6, [pc, #20]	; (efc <delay_us+0x2c>)
        SysTick->LOAD = n;
     ee8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     eea:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eec:	6835      	ldr	r5, [r6, #0]
     eee:	4225      	tst	r5, r4
     ef0:	d0fc      	beq.n	eec <delay_us+0x1c>
     ef2:	e7f4      	b.n	ede <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     ef4:	bd70      	pop	{r4, r5, r6, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	20000004 	.word	0x20000004
     efc:	e000e010 	.word	0xe000e010

00000f00 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f00:	b570      	push	{r4, r5, r6, lr}
     f02:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f04:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f06:	4b08      	ldr	r3, [pc, #32]	; (f28 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f08:	4a08      	ldr	r2, [pc, #32]	; (f2c <delay_ms+0x2c>)
     f0a:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f0c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f0e:	3801      	subs	r0, #1
     f10:	d308      	bcc.n	f24 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f12:	2b00      	cmp	r3, #0
     f14:	d0fb      	beq.n	f0e <delay_ms+0xe>
     f16:	4e05      	ldr	r6, [pc, #20]	; (f2c <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f18:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f1a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f1c:	6835      	ldr	r5, [r6, #0]
     f1e:	4225      	tst	r5, r4
     f20:	d0fc      	beq.n	f1c <delay_ms+0x1c>
     f22:	e7f4      	b.n	f0e <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f24:	bd70      	pop	{r4, r5, r6, pc}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	20000004 	.word	0x20000004
     f2c:	e000e010 	.word	0xe000e010

00000f30 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f30:	21fa      	movs	r1, #250	; 0xfa
     f32:	4a04      	ldr	r2, [pc, #16]	; (f44 <RTC_Handler+0x14>)
     f34:	0089      	lsls	r1, r1, #2
     f36:	6813      	ldr	r3, [r2, #0]
     f38:	185b      	adds	r3, r3, r1
     f3a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f3c:	22ff      	movs	r2, #255	; 0xff
     f3e:	4b02      	ldr	r3, [pc, #8]	; (f48 <RTC_Handler+0x18>)
     f40:	721a      	strb	r2, [r3, #8]
}
     f42:	4770      	bx	lr
     f44:	200004c4 	.word	0x200004c4
     f48:	40001400 	.word	0x40001400

00000f4c <millis>:

uint32_t millis(void) {
     f4c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f4e:	f3ef 8110 	mrs	r1, PRIMASK
     f52:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f54:	4a08      	ldr	r2, [pc, #32]	; (f78 <millis+0x2c>)
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <millis+0x30>)
     f58:	8a10      	ldrh	r0, [r2, #16]
     f5a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f5c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f5e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f60:	09e4      	lsrs	r4, r4, #7
     f62:	d004      	beq.n	f6e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f64:	8a13      	ldrh	r3, [r2, #16]
     f66:	22fa      	movs	r2, #250	; 0xfa
     f68:	6828      	ldr	r0, [r5, #0]
     f6a:	0092      	lsls	r2, r2, #2
     f6c:	1880      	adds	r0, r0, r2
     f6e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f70:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f74:	bd30      	pop	{r4, r5, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	40001400 	.word	0x40001400
     f7c:	200004c4 	.word	0x200004c4

00000f80 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f80:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f82:	4a0d      	ldr	r2, [pc, #52]	; (fb8 <TC4Init+0x38>)
     f84:	4b0d      	ldr	r3, [pc, #52]	; (fbc <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f86:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f88:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f8a:	4a0d      	ldr	r2, [pc, #52]	; (fc0 <TC4Init+0x40>)
     f8c:	6a13      	ldr	r3, [r2, #32]
     f8e:	430b      	orrs	r3, r1
     f90:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f92:	4b0c      	ldr	r3, [pc, #48]	; (fc4 <TC4Init+0x44>)
     f94:	4a0c      	ldr	r2, [pc, #48]	; (fc8 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f96:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f98:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
     f9a:	2250      	movs	r2, #80	; 0x50
     f9c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f9e:	3a4f      	subs	r2, #79	; 0x4f
     fa0:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     fa2:	32ff      	adds	r2, #255	; 0xff
     fa4:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fa6:	881a      	ldrh	r2, [r3, #0]
     fa8:	430a      	orrs	r2, r1
     faa:	801a      	strh	r2, [r3, #0]
     fac:	2280      	movs	r2, #128	; 0x80
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <TC4Init+0x4c>)
     fb0:	0312      	lsls	r2, r2, #12
     fb2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     fb4:	4770      	bx	lr
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	0000421c 	.word	0x0000421c
     fbc:	40000c00 	.word	0x40000c00
     fc0:	40000400 	.word	0x40000400
     fc4:	42003000 	.word	0x42003000
     fc8:	00000904 	.word	0x00000904
     fcc:	e000e100 	.word	0xe000e100

00000fd0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fd0:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
     fd2:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fd4:	4b02      	ldr	r3, [pc, #8]	; (fe0 <TC4_Handler+0x10>)
     fd6:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
     fd8:	4b02      	ldr	r3, [pc, #8]	; (fe4 <TC4_Handler+0x14>)
     fda:	4798      	blx	r3
}
     fdc:	bd10      	pop	{r4, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	42003000 	.word	0x42003000
     fe4:	000026fd 	.word	0x000026fd

00000fe8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fe8:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fea:	4a0d      	ldr	r2, [pc, #52]	; (1020 <TC5Init+0x38>)
     fec:	4b0d      	ldr	r3, [pc, #52]	; (1024 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fee:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     ff0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     ff2:	4a0d      	ldr	r2, [pc, #52]	; (1028 <TC5Init+0x40>)
     ff4:	6a13      	ldr	r3, [r2, #32]
     ff6:	430b      	orrs	r3, r1
     ff8:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ffa:	4b0c      	ldr	r3, [pc, #48]	; (102c <TC5Init+0x44>)
     ffc:	4a0c      	ldr	r2, [pc, #48]	; (1030 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ffe:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1000:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    1002:	2266      	movs	r2, #102	; 0x66
    1004:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1006:	3a65      	subs	r2, #101	; 0x65
    1008:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    100a:	32ff      	adds	r2, #255	; 0xff
    100c:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    100e:	881a      	ldrh	r2, [r3, #0]
    1010:	430a      	orrs	r2, r1
    1012:	801a      	strh	r2, [r3, #0]
    1014:	2280      	movs	r2, #128	; 0x80
    1016:	4b07      	ldr	r3, [pc, #28]	; (1034 <TC5Init+0x4c>)
    1018:	0352      	lsls	r2, r2, #13
    101a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    101c:	4770      	bx	lr
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	0000421c 	.word	0x0000421c
    1024:	40000c00 	.word	0x40000c00
    1028:	40000400 	.word	0x40000400
    102c:	42003400 	.word	0x42003400
    1030:	00000c04 	.word	0x00000c04
    1034:	e000e100 	.word	0xe000e100

00001038 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1038:	22ff      	movs	r2, #255	; 0xff
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <TC5_Handler+0x10>)
    103c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    103e:	4b03      	ldr	r3, [pc, #12]	; (104c <TC5_Handler+0x14>)
    1040:	3afe      	subs	r2, #254	; 0xfe
    1042:	701a      	strb	r2, [r3, #0]
}
    1044:	4770      	bx	lr
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	42003400 	.word	0x42003400
    104c:	2000052a 	.word	0x2000052a

00001050 <flight>:
#include <util.h>
#include <boardDefines.h>

void flight() {
    1050:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    1052:	4c60      	ldr	r4, [pc, #384]	; (11d4 <flight+0x184>)
    1054:	7820      	ldrb	r0, [r4, #0]
    1056:	280a      	cmp	r0, #10
    1058:	d900      	bls.n	105c <flight+0xc>
    105a:	e0ac      	b.n	11b6 <flight+0x166>
    105c:	f003 f820 	bl	40a0 <__gnu_thumb1_case_uqi>
    1060:	67442406 	.word	0x67442406
    1064:	886dabab 	.word	0x886dabab
    1068:	ab9c      	.short	0xab9c
    106a:	67          	.byte	0x67
    106b:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    106c:	4b5a      	ldr	r3, [pc, #360]	; (11d8 <flight+0x188>)
    106e:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1070:	4e5a      	ldr	r6, [pc, #360]	; (11dc <flight+0x18c>)
    1072:	47b0      	blx	r6
    1074:	4d5a      	ldr	r5, [pc, #360]	; (11e0 <flight+0x190>)
    1076:	682b      	ldr	r3, [r5, #0]
    1078:	1ac0      	subs	r0, r0, r3
    107a:	4b5a      	ldr	r3, [pc, #360]	; (11e4 <flight+0x194>)
    107c:	4298      	cmp	r0, r3
    107e:	d908      	bls.n	1092 <flight+0x42>
            findNewFlightStart();
    1080:	4b59      	ldr	r3, [pc, #356]	; (11e8 <flight+0x198>)
    1082:	4798      	blx	r3
            startupJingle();
    1084:	4b59      	ldr	r3, [pc, #356]	; (11ec <flight+0x19c>)
    1086:	4798      	blx	r3
            startupTick = millis();
    1088:	47b0      	blx	r6
            //flightState = flightTest;
            flightState = flightPad;
    108a:	2302      	movs	r3, #2
        updateGround( );

        if ((millis() - startupTick) > 10000) {
            findNewFlightStart();
            startupJingle();
            startupTick = millis();
    108c:	6028      	str	r0, [r5, #0]
            //flightState = flightTest;
            flightState = flightPad;
    108e:	7023      	strb	r3, [r4, #0]
    1090:	e091      	b.n	11b6 <flight+0x166>
            }

            break;
        }

        attemptConnection();
    1092:	4b57      	ldr	r3, [pc, #348]	; (11f0 <flight+0x1a0>)
    1094:	4798      	blx	r3

        if (unplugged()) {
    1096:	4b57      	ldr	r3, [pc, #348]	; (11f4 <flight+0x1a4>)
    1098:	4798      	blx	r3
    109a:	2800      	cmp	r0, #0
    109c:	d100      	bne.n	10a0 <flight+0x50>
    109e:	e08a      	b.n	11b6 <flight+0x166>
            flightState = flightIdle;
    10a0:	2301      	movs	r3, #1
    10a2:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    10a4:	4b54      	ldr	r3, [pc, #336]	; (11f8 <flight+0x1a8>)
    10a6:	e075      	b.n	1194 <flight+0x144>
        break;
    case flightIdle:
        //TC4->COUNT8.CTRLA.reg = 0;
        //TC5->COUNT8.CTRLA.reg = 0;

        if (millis() - offsets.groundBeep > 2000) {
    10a8:	4e4c      	ldr	r6, [pc, #304]	; (11dc <flight+0x18c>)
    10aa:	47b0      	blx	r6
    10ac:	4d53      	ldr	r5, [pc, #332]	; (11fc <flight+0x1ac>)
    10ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    10b0:	1ac0      	subs	r0, r0, r3
    10b2:	23fa      	movs	r3, #250	; 0xfa
    10b4:	00db      	lsls	r3, r3, #3
    10b6:	4298      	cmp	r0, r3
    10b8:	d905      	bls.n	10c6 <flight+0x76>
            offsets.groundBeep = millis();
    10ba:	47b0      	blx	r6
    10bc:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    10be:	20c8      	movs	r0, #200	; 0xc8
    10c0:	4b4f      	ldr	r3, [pc, #316]	; (1200 <flight+0x1b0>)
    10c2:	0040      	lsls	r0, r0, #1
    10c4:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    10c6:	4b4f      	ldr	r3, [pc, #316]	; (1204 <flight+0x1b4>)
    10c8:	7e1b      	ldrb	r3, [r3, #24]
    10ca:	075b      	lsls	r3, r3, #29
    10cc:	d573      	bpl.n	11b6 <flight+0x166>
            u8_t possibleReset = usartDataIn(USART3);
    10ce:	2003      	movs	r0, #3
    10d0:	4b4d      	ldr	r3, [pc, #308]	; (1208 <flight+0x1b8>)
    10d2:	4798      	blx	r3
            if (possibleReset == 0x52) {
    10d4:	2852      	cmp	r0, #82	; 0x52
    10d6:	d16e      	bne.n	11b6 <flight+0x166>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    10d8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    10dc:	4a4b      	ldr	r2, [pc, #300]	; (120c <flight+0x1bc>)
    10de:	4b4c      	ldr	r3, [pc, #304]	; (1210 <flight+0x1c0>)
    10e0:	60da      	str	r2, [r3, #12]
    10e2:	f3bf 8f4f 	dsb	sy
    10e6:	e7fe      	b.n	10e6 <flight+0x96>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    10e8:	4b3b      	ldr	r3, [pc, #236]	; (11d8 <flight+0x188>)
    10ea:	4798      	blx	r3

        if (writeLog) {
    10ec:	4b49      	ldr	r3, [pc, #292]	; (1214 <flight+0x1c4>)
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d005      	beq.n	1100 <flight+0xb0>
            logSensors( );
    10f4:	4b48      	ldr	r3, [pc, #288]	; (1218 <flight+0x1c8>)
    10f6:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    10f8:	2280      	movs	r2, #128	; 0x80
    10fa:	4b48      	ldr	r3, [pc, #288]	; (121c <flight+0x1cc>)
    10fc:	0352      	lsls	r2, r2, #13
    10fe:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        //if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
        if ((accel > 2)) {
    1100:	2380      	movs	r3, #128	; 0x80
    1102:	4947      	ldr	r1, [pc, #284]	; (1220 <flight+0x1d0>)
    1104:	2200      	movs	r2, #0
    1106:	6808      	ldr	r0, [r1, #0]
    1108:	6849      	ldr	r1, [r1, #4]
    110a:	05db      	lsls	r3, r3, #23
    110c:	4d45      	ldr	r5, [pc, #276]	; (1224 <flight+0x1d4>)
    110e:	47a8      	blx	r5
    1110:	2800      	cmp	r0, #0
    1112:	d050      	beq.n	11b6 <flight+0x166>
            flightState = flightBoost;
    1114:	2303      	movs	r3, #3
    1116:	7023      	strb	r3, [r4, #0]
            writeFlightStartAddress();
    1118:	4b43      	ldr	r3, [pc, #268]	; (1228 <flight+0x1d8>)
    111a:	4798      	blx	r3
            logFlight( );
    111c:	4b43      	ldr	r3, [pc, #268]	; (122c <flight+0x1dc>)
    111e:	4798      	blx	r3
            writeGroundLog();
    1120:	4b43      	ldr	r3, [pc, #268]	; (1230 <flight+0x1e0>)
    1122:	4798      	blx	r3
            logEvent('L');
    1124:	204c      	movs	r0, #76	; 0x4c
    1126:	4b43      	ldr	r3, [pc, #268]	; (1234 <flight+0x1e4>)
    1128:	4798      	blx	r3
            beep(100);
    112a:	2064      	movs	r0, #100	; 0x64
    112c:	e041      	b.n	11b2 <flight+0x162>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    112e:	4b39      	ldr	r3, [pc, #228]	; (1214 <flight+0x1c4>)
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b00      	cmp	r3, #0
    1134:	d03f      	beq.n	11b6 <flight+0x166>
            logSensors( );
    1136:	4b38      	ldr	r3, [pc, #224]	; (1218 <flight+0x1c8>)
    1138:	e02c      	b.n	1194 <flight+0x144>


        break;
    case flightDrogue:

        if (writeLog) {
    113a:	4b36      	ldr	r3, [pc, #216]	; (1214 <flight+0x1c4>)
    113c:	781b      	ldrb	r3, [r3, #0]
    113e:	2b00      	cmp	r3, #0
    1140:	d001      	beq.n	1146 <flight+0xf6>
            logSensors( );
    1142:	4b35      	ldr	r3, [pc, #212]	; (1218 <flight+0x1c8>)
    1144:	4798      	blx	r3
        }


        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    1146:	4b3c      	ldr	r3, [pc, #240]	; (1238 <flight+0x1e8>)
    1148:	8b18      	ldrh	r0, [r3, #24]
    114a:	4b3c      	ldr	r3, [pc, #240]	; (123c <flight+0x1ec>)
    114c:	4798      	blx	r3
    114e:	000b      	movs	r3, r1
    1150:	493b      	ldr	r1, [pc, #236]	; (1240 <flight+0x1f0>)
    1152:	0002      	movs	r2, r0
    1154:	6d88      	ldr	r0, [r1, #88]	; 0x58
    1156:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    1158:	4d3a      	ldr	r5, [pc, #232]	; (1244 <flight+0x1f4>)
    115a:	47a8      	blx	r5
    115c:	2800      	cmp	r0, #0
    115e:	d02a      	beq.n	11b6 <flight+0x166>
            flightState = flightMain;
    1160:	2307      	movs	r3, #7
    1162:	7023      	strb	r3, [r4, #0]
            igniteMain();
    1164:	4b38      	ldr	r3, [pc, #224]	; (1248 <flight+0x1f8>)
    1166:	4798      	blx	r3
            logEvent('M');
    1168:	204d      	movs	r0, #77	; 0x4d
    116a:	4b32      	ldr	r3, [pc, #200]	; (1234 <flight+0x1e4>)
    116c:	4798      	blx	r3
    116e:	e022      	b.n	11b6 <flight+0x166>
        }

        break;
    case flightMain:

        if (writeLog) {
    1170:	4b28      	ldr	r3, [pc, #160]	; (1214 <flight+0x1c4>)
    1172:	781b      	ldrb	r3, [r3, #0]
    1174:	2b00      	cmp	r3, #0
    1176:	d001      	beq.n	117c <flight+0x12c>
            logSensors( );
    1178:	4b27      	ldr	r3, [pc, #156]	; (1218 <flight+0x1c8>)
    117a:	4798      	blx	r3
        }

        if (velocity < 5) {
    117c:	4933      	ldr	r1, [pc, #204]	; (124c <flight+0x1fc>)
    117e:	2200      	movs	r2, #0
    1180:	6808      	ldr	r0, [r1, #0]
    1182:	6849      	ldr	r1, [r1, #4]
    1184:	4b32      	ldr	r3, [pc, #200]	; (1250 <flight+0x200>)
    1186:	4d2f      	ldr	r5, [pc, #188]	; (1244 <flight+0x1f4>)
    1188:	47a8      	blx	r5
    118a:	2800      	cmp	r0, #0
    118c:	d013      	beq.n	11b6 <flight+0x166>
            flightState = flightLanded;
    118e:	2308      	movs	r3, #8
    1190:	7023      	strb	r3, [r4, #0]
            finishFlight();
    1192:	4b30      	ldr	r3, [pc, #192]	; (1254 <flight+0x204>)
    1194:	4798      	blx	r3
    1196:	e00e      	b.n	11b6 <flight+0x166>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    1198:	4e10      	ldr	r6, [pc, #64]	; (11dc <flight+0x18c>)
    119a:	47b0      	blx	r6
    119c:	4d17      	ldr	r5, [pc, #92]	; (11fc <flight+0x1ac>)
    119e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    11a0:	1ac0      	subs	r0, r0, r3
    11a2:	23fa      	movs	r3, #250	; 0xfa
    11a4:	00db      	lsls	r3, r3, #3
    11a6:	4298      	cmp	r0, r3
    11a8:	d905      	bls.n	11b6 <flight+0x166>
            offsets.groundBeep = millis();
    11aa:	47b0      	blx	r6
    11ac:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    11ae:	20c8      	movs	r0, #200	; 0xc8
    11b0:	0040      	lsls	r0, r0, #1
    11b2:	4b13      	ldr	r3, [pc, #76]	; (1200 <flight+0x1b0>)
    11b4:	4798      	blx	r3
        break;
    }



    if ((flightState != flightStatrup) & (flightState != flightIdle) & (flightState != flightPad) & unplugged()) {
    11b6:	2302      	movs	r3, #2
    11b8:	7824      	ldrb	r4, [r4, #0]
    11ba:	42a3      	cmp	r3, r4
    11bc:	41a4      	sbcs	r4, r4
    11be:	4b0d      	ldr	r3, [pc, #52]	; (11f4 <flight+0x1a4>)
    11c0:	4264      	negs	r4, r4
    11c2:	4798      	blx	r3
    11c4:	2800      	cmp	r0, #0
    11c6:	d003      	beq.n	11d0 <flight+0x180>
    11c8:	2c00      	cmp	r4, #0
    11ca:	d001      	beq.n	11d0 <flight+0x180>
        finishFlight();
    11cc:	4b21      	ldr	r3, [pc, #132]	; (1254 <flight+0x204>)
    11ce:	4798      	blx	r3
    }

    11d0:	bd70      	pop	{r4, r5, r6, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	2000053c 	.word	0x2000053c
    11d8:	00001259 	.word	0x00001259
    11dc:	00000f4d 	.word	0x00000f4d
    11e0:	2000052c 	.word	0x2000052c
    11e4:	00002710 	.word	0x00002710
    11e8:	00002645 	.word	0x00002645
    11ec:	00000cad 	.word	0x00000cad
    11f0:	00002e05 	.word	0x00002e05
    11f4:	00000b31 	.word	0x00000b31
    11f8:	00000ce5 	.word	0x00000ce5
    11fc:	200004d8 	.word	0x200004d8
    1200:	00000c71 	.word	0x00000c71
    1204:	42001400 	.word	0x42001400
    1208:	00002ba1 	.word	0x00002ba1
    120c:	05fa0004 	.word	0x05fa0004
    1210:	e000ed00 	.word	0xe000ed00
    1214:	2000052a 	.word	0x2000052a
    1218:	00002369 	.word	0x00002369
    121c:	41004400 	.word	0x41004400
    1220:	200006a0 	.word	0x200006a0
    1224:	00004221 	.word	0x00004221
    1228:	00002591 	.word	0x00002591
    122c:	000022b9 	.word	0x000022b9
    1230:	000025e9 	.word	0x000025e9
    1234:	00002315 	.word	0x00002315
    1238:	20000510 	.word	0x20000510
    123c:	00006031 	.word	0x00006031
    1240:	20000908 	.word	0x20000908
    1244:	000041f9 	.word	0x000041f9
    1248:	00001549 	.word	0x00001549
    124c:	200006a8 	.word	0x200006a8
    1250:	40140000 	.word	0x40140000
    1254:	00000b65 	.word	0x00000b65

00001258 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    125a:	4c2b      	ldr	r4, [pc, #172]	; (1308 <updateGround+0xb0>)
    125c:	4d2b      	ldr	r5, [pc, #172]	; (130c <updateGround+0xb4>)
    125e:	4a2c      	ldr	r2, [pc, #176]	; (1310 <updateGround+0xb8>)
    1260:	6920      	ldr	r0, [r4, #16]
    1262:	6961      	ldr	r1, [r4, #20]
    1264:	4b2b      	ldr	r3, [pc, #172]	; (1314 <updateGround+0xbc>)
    1266:	47a8      	blx	r5
    1268:	4b2b      	ldr	r3, [pc, #172]	; (1318 <updateGround+0xc0>)
    126a:	0006      	movs	r6, r0
    126c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    126e:	4b2b      	ldr	r3, [pc, #172]	; (131c <updateGround+0xc4>)
    1270:	000f      	movs	r7, r1
    1272:	4798      	blx	r3
    1274:	4a26      	ldr	r2, [pc, #152]	; (1310 <updateGround+0xb8>)
    1276:	4b2a      	ldr	r3, [pc, #168]	; (1320 <updateGround+0xc8>)
    1278:	47a8      	blx	r5
    127a:	0002      	movs	r2, r0
    127c:	000b      	movs	r3, r1
    127e:	0030      	movs	r0, r6
    1280:	0039      	movs	r1, r7
    1282:	4e28      	ldr	r6, [pc, #160]	; (1324 <updateGround+0xcc>)
    1284:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1286:	4e28      	ldr	r6, [pc, #160]	; (1328 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1288:	6120      	str	r0, [r4, #16]
    128a:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    128c:	69e0      	ldr	r0, [r4, #28]
    128e:	47b0      	blx	r6
    1290:	2200      	movs	r2, #0
    1292:	4b26      	ldr	r3, [pc, #152]	; (132c <updateGround+0xd4>)
    1294:	47a8      	blx	r5
    1296:	9000      	str	r0, [sp, #0]
    1298:	9101      	str	r1, [sp, #4]
    129a:	4925      	ldr	r1, [pc, #148]	; (1330 <updateGround+0xd8>)
    129c:	2200      	movs	r2, #0
    129e:	6808      	ldr	r0, [r1, #0]
    12a0:	6849      	ldr	r1, [r1, #4]
    12a2:	4b22      	ldr	r3, [pc, #136]	; (132c <updateGround+0xd4>)
    12a4:	47a8      	blx	r5
    12a6:	4f1f      	ldr	r7, [pc, #124]	; (1324 <updateGround+0xcc>)
    12a8:	0002      	movs	r2, r0
    12aa:	000b      	movs	r3, r1
    12ac:	9800      	ldr	r0, [sp, #0]
    12ae:	9901      	ldr	r1, [sp, #4]
    12b0:	47b8      	blx	r7
    12b2:	4f20      	ldr	r7, [pc, #128]	; (1334 <updateGround+0xdc>)
    12b4:	47b8      	blx	r7
    12b6:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    12b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    12ba:	47b0      	blx	r6
    12bc:	4a14      	ldr	r2, [pc, #80]	; (1310 <updateGround+0xb8>)
    12be:	4b15      	ldr	r3, [pc, #84]	; (1314 <updateGround+0xbc>)
    12c0:	47a8      	blx	r5
    12c2:	4b15      	ldr	r3, [pc, #84]	; (1318 <updateGround+0xc0>)
    12c4:	9000      	str	r0, [sp, #0]
    12c6:	9101      	str	r1, [sp, #4]
    12c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    12ca:	47b0      	blx	r6
    12cc:	4a10      	ldr	r2, [pc, #64]	; (1310 <updateGround+0xb8>)
    12ce:	4b14      	ldr	r3, [pc, #80]	; (1320 <updateGround+0xc8>)
    12d0:	47a8      	blx	r5
    12d2:	4d14      	ldr	r5, [pc, #80]	; (1324 <updateGround+0xcc>)
    12d4:	000b      	movs	r3, r1
    12d6:	0002      	movs	r2, r0
    12d8:	9800      	ldr	r0, [sp, #0]
    12da:	9901      	ldr	r1, [sp, #4]
    12dc:	47a8      	blx	r5
    12de:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    12e0:	4d15      	ldr	r5, [pc, #84]	; (1338 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    12e2:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    12e4:	47a8      	blx	r5
    12e6:	6823      	ldr	r3, [r4, #0]
    12e8:	1ac0      	subs	r0, r0, r3
    12ea:	23fa      	movs	r3, #250	; 0xfa
    12ec:	00db      	lsls	r3, r3, #3
    12ee:	4298      	cmp	r0, r3
    12f0:	d909      	bls.n	1306 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    12f2:	69e3      	ldr	r3, [r4, #28]
    12f4:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    12f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12f8:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    12fa:	6922      	ldr	r2, [r4, #16]
    12fc:	6963      	ldr	r3, [r4, #20]
    12fe:	60a2      	str	r2, [r4, #8]
    1300:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1302:	47a8      	blx	r5
    1304:	6020      	str	r0, [r4, #0]
    }
}
    1306:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1308:	200004d8 	.word	0x200004d8
    130c:	000053e9 	.word	0x000053e9
    1310:	9999999a 	.word	0x9999999a
    1314:	3fe99999 	.word	0x3fe99999
    1318:	20000908 	.word	0x20000908
    131c:	00006125 	.word	0x00006125
    1320:	3fc99999 	.word	0x3fc99999
    1324:	00004549 	.word	0x00004549
    1328:	000060b5 	.word	0x000060b5
    132c:	3fe00000 	.word	0x3fe00000
    1330:	200006b0 	.word	0x200006b0
    1334:	000042a1 	.word	0x000042a1
    1338:	00000f4d 	.word	0x00000f4d

0000133c <isItPointingUp>:

void isItPointingUp() {
    133c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    133e:	4f25      	ldr	r7, [pc, #148]	; (13d4 <isItPointingUp+0x98>)
    1340:	4b25      	ldr	r3, [pc, #148]	; (13d8 <isItPointingUp+0x9c>)
    1342:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1344:	4798      	blx	r3
    1346:	260a      	movs	r6, #10
    1348:	0004      	movs	r4, r0
    134a:	000d      	movs	r5, r1
    134c:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    134e:	200a      	movs	r0, #10
    1350:	4b22      	ldr	r3, [pc, #136]	; (13dc <isItPointingUp+0xa0>)
    1352:	4798      	blx	r3
        sampleTick();
    1354:	4b22      	ldr	r3, [pc, #136]	; (13e0 <isItPointingUp+0xa4>)
    1356:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    1358:	4a22      	ldr	r2, [pc, #136]	; (13e4 <isItPointingUp+0xa8>)
    135a:	4b23      	ldr	r3, [pc, #140]	; (13e8 <isItPointingUp+0xac>)
    135c:	0020      	movs	r0, r4
    135e:	0029      	movs	r1, r5
    1360:	4c22      	ldr	r4, [pc, #136]	; (13ec <isItPointingUp+0xb0>)
    1362:	47a0      	blx	r4
    1364:	0004      	movs	r4, r0
    1366:	000d      	movs	r5, r1
    1368:	9b01      	ldr	r3, [sp, #4]
    136a:	3e01      	subs	r6, #1
    136c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    136e:	4b1a      	ldr	r3, [pc, #104]	; (13d8 <isItPointingUp+0x9c>)
    1370:	4798      	blx	r3
    1372:	4a1c      	ldr	r2, [pc, #112]	; (13e4 <isItPointingUp+0xa8>)
    1374:	4b1e      	ldr	r3, [pc, #120]	; (13f0 <isItPointingUp+0xb4>)
    1376:	4f1d      	ldr	r7, [pc, #116]	; (13ec <isItPointingUp+0xb0>)
    1378:	47b8      	blx	r7
    137a:	0022      	movs	r2, r4
    137c:	002b      	movs	r3, r5
    137e:	4c1d      	ldr	r4, [pc, #116]	; (13f4 <isItPointingUp+0xb8>)
    1380:	47a0      	blx	r4
    1382:	b2f6      	uxtb	r6, r6
    1384:	0004      	movs	r4, r0
    1386:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    1388:	2e00      	cmp	r6, #0
    138a:	d1e0      	bne.n	134e <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    138c:	4e1a      	ldr	r6, [pc, #104]	; (13f8 <isItPointingUp+0xbc>)
    138e:	4a1b      	ldr	r2, [pc, #108]	; (13fc <isItPointingUp+0xc0>)
    1390:	4b1b      	ldr	r3, [pc, #108]	; (1400 <isItPointingUp+0xc4>)
    1392:	47b0      	blx	r6
    1394:	0037      	movs	r7, r6
    1396:	4e1b      	ldr	r6, [pc, #108]	; (1404 <isItPointingUp+0xc8>)
    1398:	2800      	cmp	r0, #0
    139a:	d007      	beq.n	13ac <isItPointingUp+0x70>
    139c:	4a11      	ldr	r2, [pc, #68]	; (13e4 <isItPointingUp+0xa8>)
    139e:	4b1a      	ldr	r3, [pc, #104]	; (1408 <isItPointingUp+0xcc>)
    13a0:	0020      	movs	r0, r4
    13a2:	0029      	movs	r1, r5
    13a4:	47b0      	blx	r6
        altimeter.pointingUp = true;
    13a6:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    13a8:	2800      	cmp	r0, #0
    13aa:	d10e      	bne.n	13ca <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    13ac:	4a13      	ldr	r2, [pc, #76]	; (13fc <isItPointingUp+0xc0>)
    13ae:	4b17      	ldr	r3, [pc, #92]	; (140c <isItPointingUp+0xd0>)
    13b0:	0020      	movs	r0, r4
    13b2:	0029      	movs	r1, r5
    13b4:	47b0      	blx	r6
    13b6:	2800      	cmp	r0, #0
    13b8:	d00a      	beq.n	13d0 <isItPointingUp+0x94>
    13ba:	4a0a      	ldr	r2, [pc, #40]	; (13e4 <isItPointingUp+0xa8>)
    13bc:	4b14      	ldr	r3, [pc, #80]	; (1410 <isItPointingUp+0xd4>)
    13be:	0020      	movs	r0, r4
    13c0:	0029      	movs	r1, r5
    13c2:	47b8      	blx	r7
    13c4:	2800      	cmp	r0, #0
    13c6:	d003      	beq.n	13d0 <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    13c8:	2200      	movs	r2, #0
    13ca:	4b12      	ldr	r3, [pc, #72]	; (1414 <isItPointingUp+0xd8>)
    13cc:	715a      	strb	r2, [r3, #5]

        }

    }

    13ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13d0:	e7fe      	b.n	13d0 <isItPointingUp+0x94>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	20000908 	.word	0x20000908
    13d8:	00006125 	.word	0x00006125
    13dc:	00000f01 	.word	0x00000f01
    13e0:	00002709 	.word	0x00002709
    13e4:	9999999a 	.word	0x9999999a
    13e8:	3fe99999 	.word	0x3fe99999
    13ec:	000053e9 	.word	0x000053e9
    13f0:	3fc99999 	.word	0x3fc99999
    13f4:	00004549 	.word	0x00004549
    13f8:	00004221 	.word	0x00004221
    13fc:	cccccccd 	.word	0xcccccccd
    1400:	3feccccc 	.word	0x3feccccc
    1404:	000041f9 	.word	0x000041f9
    1408:	3ff19999 	.word	0x3ff19999
    140c:	bfeccccc 	.word	0xbfeccccc
    1410:	bff19999 	.word	0xbff19999
    1414:	20000530 	.word	0x20000530

00001418 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1418:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    141a:	4c23      	ldr	r4, [pc, #140]	; (14a8 <igniterTick+0x90>)
    141c:	7823      	ldrb	r3, [r4, #0]
    141e:	2b00      	cmp	r3, #0
    1420:	d00d      	beq.n	143e <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    1422:	4b22      	ldr	r3, [pc, #136]	; (14ac <igniterTick+0x94>)
    1424:	4798      	blx	r3
    1426:	6863      	ldr	r3, [r4, #4]
    1428:	1ac0      	subs	r0, r0, r3
    142a:	23fa      	movs	r3, #250	; 0xfa
    142c:	00db      	lsls	r3, r3, #3
    142e:	4298      	cmp	r0, r3
    1430:	d905      	bls.n	143e <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1432:	2280      	movs	r2, #128	; 0x80
    1434:	4b1e      	ldr	r3, [pc, #120]	; (14b0 <igniterTick+0x98>)
    1436:	0412      	lsls	r2, r2, #16
    1438:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    143a:	2300      	movs	r3, #0
    143c:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    143e:	7a23      	ldrb	r3, [r4, #8]
    1440:	2b00      	cmp	r3, #0
    1442:	d00d      	beq.n	1460 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1444:	4b19      	ldr	r3, [pc, #100]	; (14ac <igniterTick+0x94>)
    1446:	4798      	blx	r3
    1448:	68e3      	ldr	r3, [r4, #12]
    144a:	1ac0      	subs	r0, r0, r3
    144c:	23fa      	movs	r3, #250	; 0xfa
    144e:	00db      	lsls	r3, r3, #3
    1450:	4298      	cmp	r0, r3
    1452:	d905      	bls.n	1460 <igniterTick+0x48>
    1454:	2280      	movs	r2, #128	; 0x80
    1456:	4b16      	ldr	r3, [pc, #88]	; (14b0 <igniterTick+0x98>)
    1458:	03d2      	lsls	r2, r2, #15
    145a:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    145c:	2300      	movs	r3, #0
    145e:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1460:	7c23      	ldrb	r3, [r4, #16]
    1462:	2b00      	cmp	r3, #0
    1464:	d00d      	beq.n	1482 <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    1466:	4b11      	ldr	r3, [pc, #68]	; (14ac <igniterTick+0x94>)
    1468:	4798      	blx	r3
    146a:	6963      	ldr	r3, [r4, #20]
    146c:	1ac0      	subs	r0, r0, r3
    146e:	23fa      	movs	r3, #250	; 0xfa
    1470:	00db      	lsls	r3, r3, #3
    1472:	4298      	cmp	r0, r3
    1474:	d905      	bls.n	1482 <igniterTick+0x6a>
    1476:	2280      	movs	r2, #128	; 0x80
    1478:	4b0e      	ldr	r3, [pc, #56]	; (14b4 <igniterTick+0x9c>)
    147a:	0492      	lsls	r2, r2, #18
    147c:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    147e:	2300      	movs	r3, #0
    1480:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    1482:	7e23      	ldrb	r3, [r4, #24]
    1484:	2b00      	cmp	r3, #0
    1486:	d00d      	beq.n	14a4 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1488:	4b08      	ldr	r3, [pc, #32]	; (14ac <igniterTick+0x94>)
    148a:	4798      	blx	r3
    148c:	69e3      	ldr	r3, [r4, #28]
    148e:	1ac0      	subs	r0, r0, r3
    1490:	23fa      	movs	r3, #250	; 0xfa
    1492:	00db      	lsls	r3, r3, #3
    1494:	4298      	cmp	r0, r3
    1496:	d905      	bls.n	14a4 <igniterTick+0x8c>
    1498:	2280      	movs	r2, #128	; 0x80
    149a:	4b06      	ldr	r3, [pc, #24]	; (14b4 <igniterTick+0x9c>)
    149c:	0452      	lsls	r2, r2, #17
    149e:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    14a0:	2300      	movs	r3, #0
    14a2:	7623      	strb	r3, [r4, #24]
        }
    }
}
    14a4:	bd10      	pop	{r4, pc}
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	20000680 	.word	0x20000680
    14ac:	00000f4d 	.word	0x00000f4d
    14b0:	41004494 	.word	0x41004494
    14b4:	41004400 	.word	0x41004400

000014b8 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14b8:	2280      	movs	r2, #128	; 0x80
    14ba:	4b05      	ldr	r3, [pc, #20]	; (14d0 <lightIgniterA+0x18>)
    14bc:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    14be:	b510      	push	{r4, lr}
    14c0:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    14c2:	2301      	movs	r3, #1
    14c4:	4c03      	ldr	r4, [pc, #12]	; (14d4 <lightIgniterA+0x1c>)
    14c6:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    14c8:	4b03      	ldr	r3, [pc, #12]	; (14d8 <lightIgniterA+0x20>)
    14ca:	4798      	blx	r3
    14cc:	6060      	str	r0, [r4, #4]
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	41004498 	.word	0x41004498
    14d4:	20000680 	.word	0x20000680
    14d8:	00000f4d 	.word	0x00000f4d

000014dc <lightIgniterB>:
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	4b05      	ldr	r3, [pc, #20]	; (14f4 <lightIgniterB+0x18>)
    14e0:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    14e2:	b510      	push	{r4, lr}
    14e4:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    14e6:	2301      	movs	r3, #1
    14e8:	4c03      	ldr	r4, [pc, #12]	; (14f8 <lightIgniterB+0x1c>)
    14ea:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    14ec:	4b03      	ldr	r3, [pc, #12]	; (14fc <lightIgniterB+0x20>)
    14ee:	4798      	blx	r3
    14f0:	60e0      	str	r0, [r4, #12]
}
    14f2:	bd10      	pop	{r4, pc}
    14f4:	41004498 	.word	0x41004498
    14f8:	20000680 	.word	0x20000680
    14fc:	00000f4d 	.word	0x00000f4d

00001500 <lightIgniterC>:
    1500:	2280      	movs	r2, #128	; 0x80
    1502:	4b05      	ldr	r3, [pc, #20]	; (1518 <lightIgniterC+0x18>)
    1504:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    1506:	b510      	push	{r4, lr}
    1508:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    150a:	2301      	movs	r3, #1
    150c:	4c03      	ldr	r4, [pc, #12]	; (151c <lightIgniterC+0x1c>)
    150e:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1510:	4b03      	ldr	r3, [pc, #12]	; (1520 <lightIgniterC+0x20>)
    1512:	4798      	blx	r3
    1514:	6160      	str	r0, [r4, #20]
}
    1516:	bd10      	pop	{r4, pc}
    1518:	41004400 	.word	0x41004400
    151c:	20000680 	.word	0x20000680
    1520:	00000f4d 	.word	0x00000f4d

00001524 <lightIgniterD>:
    1524:	2280      	movs	r2, #128	; 0x80
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <lightIgniterD+0x18>)
    1528:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    152a:	b510      	push	{r4, lr}
    152c:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    152e:	2301      	movs	r3, #1
    1530:	4c03      	ldr	r4, [pc, #12]	; (1540 <lightIgniterD+0x1c>)
    1532:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1534:	4b03      	ldr	r3, [pc, #12]	; (1544 <lightIgniterD+0x20>)
    1536:	4798      	blx	r3
    1538:	61e0      	str	r0, [r4, #28]
    153a:	bd10      	pop	{r4, pc}
    153c:	41004400 	.word	0x41004400
    1540:	20000680 	.word	0x20000680
    1544:	00000f4d 	.word	0x00000f4d

00001548 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1548:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    154a:	4c11      	ldr	r4, [pc, #68]	; (1590 <igniteMain+0x48>)
    154c:	7863      	ldrb	r3, [r4, #1]
    154e:	2b00      	cmp	r3, #0
    1550:	d104      	bne.n	155c <igniteMain+0x14>
    1552:	7823      	ldrb	r3, [r4, #0]
    1554:	2b00      	cmp	r3, #0
    1556:	d001      	beq.n	155c <igniteMain+0x14>
        lightIgniterA();
    1558:	4b0e      	ldr	r3, [pc, #56]	; (1594 <igniteMain+0x4c>)
    155a:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    155c:	79e3      	ldrb	r3, [r4, #7]
    155e:	2b00      	cmp	r3, #0
    1560:	d104      	bne.n	156c <igniteMain+0x24>
    1562:	79a3      	ldrb	r3, [r4, #6]
    1564:	2b00      	cmp	r3, #0
    1566:	d001      	beq.n	156c <igniteMain+0x24>
        lightIgniterB();
    1568:	4b0b      	ldr	r3, [pc, #44]	; (1598 <igniteMain+0x50>)
    156a:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    156c:	7b63      	ldrb	r3, [r4, #13]
    156e:	2b00      	cmp	r3, #0
    1570:	d104      	bne.n	157c <igniteMain+0x34>
    1572:	7b23      	ldrb	r3, [r4, #12]
    1574:	2b00      	cmp	r3, #0
    1576:	d001      	beq.n	157c <igniteMain+0x34>
        lightIgniterC();
    1578:	4b08      	ldr	r3, [pc, #32]	; (159c <igniteMain+0x54>)
    157a:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    157c:	7ce3      	ldrb	r3, [r4, #19]
    157e:	2b00      	cmp	r3, #0
    1580:	d104      	bne.n	158c <igniteMain+0x44>
    1582:	7ca3      	ldrb	r3, [r4, #18]
    1584:	2b00      	cmp	r3, #0
    1586:	d001      	beq.n	158c <igniteMain+0x44>
        lightIgniterD();
    1588:	4b05      	ldr	r3, [pc, #20]	; (15a0 <igniteMain+0x58>)
    158a:	4798      	blx	r3
    }
}
    158c:	bd10      	pop	{r4, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000510 	.word	0x20000510
    1594:	000014b9 	.word	0x000014b9
    1598:	000014dd 	.word	0x000014dd
    159c:	00001501 	.word	0x00001501
    15a0:	00001525 	.word	0x00001525

000015a4 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    15a4:	4bdc      	ldr	r3, [pc, #880]	; (1918 <computeKalmanGains+0x374>)
    15a6:	48dd      	ldr	r0, [pc, #884]	; (191c <computeKalmanGains+0x378>)
    15a8:	49dd      	ldr	r1, [pc, #884]	; (1920 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    15aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    15ac:	6098      	str	r0, [r3, #8]
    15ae:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    15b0:	6298      	str	r0, [r3, #40]	; 0x28
    15b2:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    15b4:	48db      	ldr	r0, [pc, #876]	; (1924 <computeKalmanGains+0x380>)
    15b6:	49dc      	ldr	r1, [pc, #880]	; (1928 <computeKalmanGains+0x384>)
    15b8:	2200      	movs	r2, #0
    15ba:	6118      	str	r0, [r3, #16]
    15bc:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    15be:	2000      	movs	r0, #0
    15c0:	49da      	ldr	r1, [pc, #872]	; (192c <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15c2:	4cdb      	ldr	r4, [pc, #876]	; (1930 <computeKalmanGains+0x38c>)
    15c4:	468c      	mov	ip, r1
    15c6:	4ddb      	ldr	r5, [pc, #876]	; (1934 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    15c8:	49db      	ldr	r1, [pc, #876]	; (1938 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    15ca:	b0cd      	sub	sp, #308	; 0x134
    15cc:	ae40      	add	r6, sp, #256	; 0x100
    15ce:	1997      	adds	r7, r2, r6
    15d0:	4666      	mov	r6, ip
    15d2:	1996      	adds	r6, r2, r6
    15d4:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15d6:	603c      	str	r4, [r7, #0]
    15d8:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    15da:	6030      	str	r0, [r6, #0]
    15dc:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15de:	60bc      	str	r4, [r7, #8]
    15e0:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    15e2:	60b0      	str	r0, [r6, #8]
    15e4:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    15e6:	2a30      	cmp	r2, #48	; 0x30
    15e8:	d1f0      	bne.n	15cc <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    15ea:	6819      	ldr	r1, [r3, #0]
    15ec:	685a      	ldr	r2, [r3, #4]
    15ee:	911a      	str	r1, [sp, #104]	; 0x68
    15f0:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15f2:	6999      	ldr	r1, [r3, #24]
    15f4:	69da      	ldr	r2, [r3, #28]
    15f6:	911c      	str	r1, [sp, #112]	; 0x70
    15f8:	921d      	str	r2, [sp, #116]	; 0x74
    15fa:	6a19      	ldr	r1, [r3, #32]
    15fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15fe:	911e      	str	r1, [sp, #120]	; 0x78
    1600:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1602:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1606:	9120      	str	r1, [sp, #128]	; 0x80
    1608:	9221      	str	r2, [sp, #132]	; 0x84
    160a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    160c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    160e:	9122      	str	r1, [sp, #136]	; 0x88
    1610:	9223      	str	r2, [sp, #140]	; 0x8c
    1612:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1616:	9124      	str	r1, [sp, #144]	; 0x90
    1618:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    161a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    161c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    161e:	913a      	str	r1, [sp, #232]	; 0xe8
    1620:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1622:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1626:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    162a:	933e      	str	r3, [sp, #248]	; 0xf8
    162c:	943f      	str	r4, [sp, #252]	; 0xfc
    162e:	2300      	movs	r3, #0
    1630:	4cc2      	ldr	r4, [pc, #776]	; (193c <computeKalmanGains+0x398>)
    1632:	913c      	str	r1, [sp, #240]	; 0xf0
    1634:	923d      	str	r2, [sp, #244]	; 0xf4
    1636:	9302      	str	r3, [sp, #8]
    1638:	9403      	str	r4, [sp, #12]
    163a:	2300      	movs	r3, #0
    163c:	2400      	movs	r4, #0
    163e:	9310      	str	r3, [sp, #64]	; 0x40
    1640:	9411      	str	r4, [sp, #68]	; 0x44
    1642:	9300      	str	r3, [sp, #0]
    1644:	9401      	str	r4, [sp, #4]
    1646:	9304      	str	r3, [sp, #16]
    1648:	9405      	str	r4, [sp, #20]
    164a:	2300      	movs	r3, #0
    164c:	4cbb      	ldr	r4, [pc, #748]	; (193c <computeKalmanGains+0x398>)
    164e:	930e      	str	r3, [sp, #56]	; 0x38
    1650:	940f      	str	r4, [sp, #60]	; 0x3c
    1652:	2300      	movs	r3, #0
    1654:	2400      	movs	r4, #0
    1656:	9308      	str	r3, [sp, #32]
    1658:	9409      	str	r4, [sp, #36]	; 0x24
    165a:	930c      	str	r3, [sp, #48]	; 0x30
    165c:	940d      	str	r4, [sp, #52]	; 0x34
    165e:	930a      	str	r3, [sp, #40]	; 0x28
    1660:	940b      	str	r4, [sp, #44]	; 0x2c
    1662:	2480      	movs	r4, #128	; 0x80
    1664:	2300      	movs	r3, #0
    1666:	05e4      	lsls	r4, r4, #23
    1668:	9306      	str	r3, [sp, #24]
    166a:	9407      	str	r4, [sp, #28]
    166c:	2300      	movs	r3, #0
    166e:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1670:	4db3      	ldr	r5, [pc, #716]	; (1940 <computeKalmanGains+0x39c>)
    1672:	9a06      	ldr	r2, [sp, #24]
    1674:	9b07      	ldr	r3, [sp, #28]
    1676:	981a      	ldr	r0, [sp, #104]	; 0x68
    1678:	991b      	ldr	r1, [sp, #108]	; 0x6c
    167a:	47a8      	blx	r5
    167c:	4aa7      	ldr	r2, [pc, #668]	; (191c <computeKalmanGains+0x378>)
    167e:	0006      	movs	r6, r0
    1680:	000f      	movs	r7, r1
    1682:	9808      	ldr	r0, [sp, #32]
    1684:	9909      	ldr	r1, [sp, #36]	; 0x24
    1686:	4ba6      	ldr	r3, [pc, #664]	; (1920 <computeKalmanGains+0x37c>)
    1688:	47a8      	blx	r5
    168a:	4cae      	ldr	r4, [pc, #696]	; (1944 <computeKalmanGains+0x3a0>)
    168c:	0002      	movs	r2, r0
    168e:	000b      	movs	r3, r1
    1690:	0030      	movs	r0, r6
    1692:	0039      	movs	r1, r7
    1694:	47a0      	blx	r4
    1696:	4aa3      	ldr	r2, [pc, #652]	; (1924 <computeKalmanGains+0x380>)
    1698:	0006      	movs	r6, r0
    169a:	000f      	movs	r7, r1
    169c:	9800      	ldr	r0, [sp, #0]
    169e:	9901      	ldr	r1, [sp, #4]
    16a0:	4ba1      	ldr	r3, [pc, #644]	; (1928 <computeKalmanGains+0x384>)
    16a2:	47a8      	blx	r5
    16a4:	0002      	movs	r2, r0
    16a6:	000b      	movs	r3, r1
    16a8:	0030      	movs	r0, r6
    16aa:	0039      	movs	r1, r7
    16ac:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    16b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    16b2:	9016      	str	r0, [sp, #88]	; 0x58
    16b4:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16b6:	981a      	ldr	r0, [sp, #104]	; 0x68
    16b8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    16ba:	47a8      	blx	r5
    16bc:	4a97      	ldr	r2, [pc, #604]	; (191c <computeKalmanGains+0x378>)
    16be:	0006      	movs	r6, r0
    16c0:	000f      	movs	r7, r1
    16c2:	980e      	ldr	r0, [sp, #56]	; 0x38
    16c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    16c6:	4b96      	ldr	r3, [pc, #600]	; (1920 <computeKalmanGains+0x37c>)
    16c8:	47a8      	blx	r5
    16ca:	0002      	movs	r2, r0
    16cc:	000b      	movs	r3, r1
    16ce:	0030      	movs	r0, r6
    16d0:	0039      	movs	r1, r7
    16d2:	47a0      	blx	r4
    16d4:	4a93      	ldr	r2, [pc, #588]	; (1924 <computeKalmanGains+0x380>)
    16d6:	0006      	movs	r6, r0
    16d8:	000f      	movs	r7, r1
    16da:	9810      	ldr	r0, [sp, #64]	; 0x40
    16dc:	9911      	ldr	r1, [sp, #68]	; 0x44
    16de:	4b92      	ldr	r3, [pc, #584]	; (1928 <computeKalmanGains+0x384>)
    16e0:	47a8      	blx	r5
    16e2:	0002      	movs	r2, r0
    16e4:	000b      	movs	r3, r1
    16e6:	0030      	movs	r0, r6
    16e8:	0039      	movs	r1, r7
    16ea:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16f0:	9012      	str	r0, [sp, #72]	; 0x48
    16f2:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16f4:	981a      	ldr	r0, [sp, #104]	; 0x68
    16f6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    16f8:	47a8      	blx	r5
    16fa:	4a88      	ldr	r2, [pc, #544]	; (191c <computeKalmanGains+0x378>)
    16fc:	0006      	movs	r6, r0
    16fe:	000f      	movs	r7, r1
    1700:	9804      	ldr	r0, [sp, #16]
    1702:	9905      	ldr	r1, [sp, #20]
    1704:	4b86      	ldr	r3, [pc, #536]	; (1920 <computeKalmanGains+0x37c>)
    1706:	47a8      	blx	r5
    1708:	0002      	movs	r2, r0
    170a:	000b      	movs	r3, r1
    170c:	0030      	movs	r0, r6
    170e:	0039      	movs	r1, r7
    1710:	47a0      	blx	r4
    1712:	4a84      	ldr	r2, [pc, #528]	; (1924 <computeKalmanGains+0x380>)
    1714:	0006      	movs	r6, r0
    1716:	000f      	movs	r7, r1
    1718:	9802      	ldr	r0, [sp, #8]
    171a:	9903      	ldr	r1, [sp, #12]
    171c:	4b82      	ldr	r3, [pc, #520]	; (1928 <computeKalmanGains+0x384>)
    171e:	47a8      	blx	r5
    1720:	0002      	movs	r2, r0
    1722:	000b      	movs	r3, r1
    1724:	0030      	movs	r0, r6
    1726:	0039      	movs	r1, r7
    1728:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    172a:	9a06      	ldr	r2, [sp, #24]
    172c:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    172e:	9014      	str	r0, [sp, #80]	; 0x50
    1730:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1732:	981c      	ldr	r0, [sp, #112]	; 0x70
    1734:	991d      	ldr	r1, [sp, #116]	; 0x74
    1736:	47a8      	blx	r5
    1738:	9a08      	ldr	r2, [sp, #32]
    173a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    173c:	0006      	movs	r6, r0
    173e:	000f      	movs	r7, r1
    1740:	981e      	ldr	r0, [sp, #120]	; 0x78
    1742:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1744:	47a8      	blx	r5
    1746:	0002      	movs	r2, r0
    1748:	000b      	movs	r3, r1
    174a:	0030      	movs	r0, r6
    174c:	0039      	movs	r1, r7
    174e:	47a0      	blx	r4
    1750:	4a72      	ldr	r2, [pc, #456]	; (191c <computeKalmanGains+0x378>)
    1752:	0006      	movs	r6, r0
    1754:	000f      	movs	r7, r1
    1756:	9800      	ldr	r0, [sp, #0]
    1758:	9901      	ldr	r1, [sp, #4]
    175a:	4b71      	ldr	r3, [pc, #452]	; (1920 <computeKalmanGains+0x37c>)
    175c:	47a8      	blx	r5
    175e:	0002      	movs	r2, r0
    1760:	000b      	movs	r3, r1
    1762:	0030      	movs	r0, r6
    1764:	0039      	movs	r1, r7
    1766:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    176a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    176c:	9018      	str	r0, [sp, #96]	; 0x60
    176e:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1770:	981c      	ldr	r0, [sp, #112]	; 0x70
    1772:	991d      	ldr	r1, [sp, #116]	; 0x74
    1774:	47a8      	blx	r5
    1776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    177a:	0006      	movs	r6, r0
    177c:	000f      	movs	r7, r1
    177e:	981e      	ldr	r0, [sp, #120]	; 0x78
    1780:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1782:	47a8      	blx	r5
    1784:	0002      	movs	r2, r0
    1786:	000b      	movs	r3, r1
    1788:	0030      	movs	r0, r6
    178a:	0039      	movs	r1, r7
    178c:	47a0      	blx	r4
    178e:	4a63      	ldr	r2, [pc, #396]	; (191c <computeKalmanGains+0x378>)
    1790:	0006      	movs	r6, r0
    1792:	000f      	movs	r7, r1
    1794:	9810      	ldr	r0, [sp, #64]	; 0x40
    1796:	9911      	ldr	r1, [sp, #68]	; 0x44
    1798:	4b61      	ldr	r3, [pc, #388]	; (1920 <computeKalmanGains+0x37c>)
    179a:	47a8      	blx	r5
    179c:	0002      	movs	r2, r0
    179e:	000b      	movs	r3, r1
    17a0:	0030      	movs	r0, r6
    17a2:	0039      	movs	r1, r7
    17a4:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    17a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    17a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    17aa:	9026      	str	r0, [sp, #152]	; 0x98
    17ac:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    17ae:	981c      	ldr	r0, [sp, #112]	; 0x70
    17b0:	991d      	ldr	r1, [sp, #116]	; 0x74
    17b2:	47a8      	blx	r5
    17b4:	9a04      	ldr	r2, [sp, #16]
    17b6:	9b05      	ldr	r3, [sp, #20]
    17b8:	0006      	movs	r6, r0
    17ba:	000f      	movs	r7, r1
    17bc:	981e      	ldr	r0, [sp, #120]	; 0x78
    17be:	991f      	ldr	r1, [sp, #124]	; 0x7c
    17c0:	47a8      	blx	r5
    17c2:	0002      	movs	r2, r0
    17c4:	000b      	movs	r3, r1
    17c6:	0030      	movs	r0, r6
    17c8:	0039      	movs	r1, r7
    17ca:	47a0      	blx	r4
    17cc:	4a53      	ldr	r2, [pc, #332]	; (191c <computeKalmanGains+0x378>)
    17ce:	0006      	movs	r6, r0
    17d0:	000f      	movs	r7, r1
    17d2:	9802      	ldr	r0, [sp, #8]
    17d4:	9903      	ldr	r1, [sp, #12]
    17d6:	4b52      	ldr	r3, [pc, #328]	; (1920 <computeKalmanGains+0x37c>)
    17d8:	47a8      	blx	r5
    17da:	0002      	movs	r2, r0
    17dc:	000b      	movs	r3, r1
    17de:	0030      	movs	r0, r6
    17e0:	0039      	movs	r1, r7
    17e2:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17e4:	9a06      	ldr	r2, [sp, #24]
    17e6:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    17e8:	9028      	str	r0, [sp, #160]	; 0xa0
    17ea:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17ec:	9820      	ldr	r0, [sp, #128]	; 0x80
    17ee:	9921      	ldr	r1, [sp, #132]	; 0x84
    17f0:	47a8      	blx	r5
    17f2:	9a08      	ldr	r2, [sp, #32]
    17f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17f6:	0006      	movs	r6, r0
    17f8:	000f      	movs	r7, r1
    17fa:	9822      	ldr	r0, [sp, #136]	; 0x88
    17fc:	9923      	ldr	r1, [sp, #140]	; 0x8c
    17fe:	47a8      	blx	r5
    1800:	0002      	movs	r2, r0
    1802:	000b      	movs	r3, r1
    1804:	0030      	movs	r0, r6
    1806:	0039      	movs	r1, r7
    1808:	47a0      	blx	r4
    180a:	9a00      	ldr	r2, [sp, #0]
    180c:	9b01      	ldr	r3, [sp, #4]
    180e:	0006      	movs	r6, r0
    1810:	000f      	movs	r7, r1
    1812:	9824      	ldr	r0, [sp, #144]	; 0x90
    1814:	9925      	ldr	r1, [sp, #148]	; 0x94
    1816:	47a8      	blx	r5
    1818:	0002      	movs	r2, r0
    181a:	000b      	movs	r3, r1
    181c:	0030      	movs	r0, r6
    181e:	0039      	movs	r1, r7
    1820:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1826:	902e      	str	r0, [sp, #184]	; 0xb8
    1828:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    182a:	9820      	ldr	r0, [sp, #128]	; 0x80
    182c:	9921      	ldr	r1, [sp, #132]	; 0x84
    182e:	47a8      	blx	r5
    1830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1834:	0006      	movs	r6, r0
    1836:	000f      	movs	r7, r1
    1838:	9822      	ldr	r0, [sp, #136]	; 0x88
    183a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    183c:	47a8      	blx	r5
    183e:	0002      	movs	r2, r0
    1840:	000b      	movs	r3, r1
    1842:	0030      	movs	r0, r6
    1844:	0039      	movs	r1, r7
    1846:	47a0      	blx	r4
    1848:	9a10      	ldr	r2, [sp, #64]	; 0x40
    184a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    184c:	0006      	movs	r6, r0
    184e:	000f      	movs	r7, r1
    1850:	9824      	ldr	r0, [sp, #144]	; 0x90
    1852:	9925      	ldr	r1, [sp, #148]	; 0x94
    1854:	47a8      	blx	r5
    1856:	0002      	movs	r2, r0
    1858:	000b      	movs	r3, r1
    185a:	0030      	movs	r0, r6
    185c:	0039      	movs	r1, r7
    185e:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1864:	9006      	str	r0, [sp, #24]
    1866:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1868:	9820      	ldr	r0, [sp, #128]	; 0x80
    186a:	9921      	ldr	r1, [sp, #132]	; 0x84
    186c:	47a8      	blx	r5
    186e:	9a04      	ldr	r2, [sp, #16]
    1870:	9b05      	ldr	r3, [sp, #20]
    1872:	0006      	movs	r6, r0
    1874:	000f      	movs	r7, r1
    1876:	9822      	ldr	r0, [sp, #136]	; 0x88
    1878:	9923      	ldr	r1, [sp, #140]	; 0x8c
    187a:	47a8      	blx	r5
    187c:	0002      	movs	r2, r0
    187e:	000b      	movs	r3, r1
    1880:	0030      	movs	r0, r6
    1882:	0039      	movs	r1, r7
    1884:	47a0      	blx	r4
    1886:	9a02      	ldr	r2, [sp, #8]
    1888:	9b03      	ldr	r3, [sp, #12]
    188a:	0006      	movs	r6, r0
    188c:	000f      	movs	r7, r1
    188e:	9824      	ldr	r0, [sp, #144]	; 0x90
    1890:	9925      	ldr	r1, [sp, #148]	; 0x94
    1892:	47a8      	blx	r5
    1894:	0002      	movs	r2, r0
    1896:	000b      	movs	r3, r1
    1898:	0030      	movs	r0, r6
    189a:	0039      	movs	r1, r7
    189c:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    189e:	4a1f      	ldr	r2, [pc, #124]	; (191c <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    18a0:	9002      	str	r0, [sp, #8]
    18a2:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    18a4:	9812      	ldr	r0, [sp, #72]	; 0x48
    18a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    18a8:	4b1d      	ldr	r3, [pc, #116]	; (1920 <computeKalmanGains+0x37c>)
    18aa:	47a8      	blx	r5
    18ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
    18ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    18b0:	47a0      	blx	r4
    18b2:	4a1c      	ldr	r2, [pc, #112]	; (1924 <computeKalmanGains+0x380>)
    18b4:	0006      	movs	r6, r0
    18b6:	000f      	movs	r7, r1
    18b8:	9814      	ldr	r0, [sp, #80]	; 0x50
    18ba:	9915      	ldr	r1, [sp, #84]	; 0x54
    18bc:	4b1a      	ldr	r3, [pc, #104]	; (1928 <computeKalmanGains+0x384>)
    18be:	47a8      	blx	r5
    18c0:	0002      	movs	r2, r0
    18c2:	000b      	movs	r3, r1
    18c4:	0030      	movs	r0, r6
    18c6:	0039      	movs	r1, r7
    18c8:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18ca:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    18cc:	9008      	str	r0, [sp, #32]
    18ce:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18d0:	9816      	ldr	r0, [sp, #88]	; 0x58
    18d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    18d4:	2300      	movs	r3, #0
    18d6:	47a8      	blx	r5
    18d8:	0006      	movs	r6, r0
    18da:	000f      	movs	r7, r1
    18dc:	0002      	movs	r2, r0
    18de:	000b      	movs	r3, r1
    18e0:	9812      	ldr	r0, [sp, #72]	; 0x48
    18e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    18e4:	47a0      	blx	r4
    18e6:	4a0d      	ldr	r2, [pc, #52]	; (191c <computeKalmanGains+0x378>)
    18e8:	9000      	str	r0, [sp, #0]
    18ea:	9101      	str	r1, [sp, #4]
    18ec:	9814      	ldr	r0, [sp, #80]	; 0x50
    18ee:	9915      	ldr	r1, [sp, #84]	; 0x54
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <computeKalmanGains+0x37c>)
    18f2:	47a8      	blx	r5
    18f4:	0002      	movs	r2, r0
    18f6:	000b      	movs	r3, r1
    18f8:	9800      	ldr	r0, [sp, #0]
    18fa:	9901      	ldr	r1, [sp, #4]
    18fc:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    18fe:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1900:	9030      	str	r0, [sp, #192]	; 0xc0
    1902:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1904:	9812      	ldr	r0, [sp, #72]	; 0x48
    1906:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1908:	2300      	movs	r3, #0
    190a:	47a8      	blx	r5
    190c:	0032      	movs	r2, r6
    190e:	003b      	movs	r3, r7
    1910:	47a0      	blx	r4
    1912:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1914:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1916:	e017      	b.n	1948 <computeKalmanGains+0x3a4>
    1918:	20000010 	.word	0x20000010
    191c:	47ae147b 	.word	0x47ae147b
    1920:	3f747ae1 	.word	0x3f747ae1
    1924:	eb1c432d 	.word	0xeb1c432d
    1928:	3eea36e2 	.word	0x3eea36e2
    192c:	20000650 	.word	0x20000650
    1930:	d2f1a9fc 	.word	0xd2f1a9fc
    1934:	3f50624d 	.word	0x3f50624d
    1938:	3ff00000 	.word	0x3ff00000
    193c:	40220000 	.word	0x40220000
    1940:	000053e9 	.word	0x000053e9
    1944:	00004549 	.word	0x00004549
    1948:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    194a:	4ad9      	ldr	r2, [pc, #868]	; (1cb0 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    194c:	9112      	str	r1, [sp, #72]	; 0x48
    194e:	9004      	str	r0, [sp, #16]
    1950:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1952:	4bd8      	ldr	r3, [pc, #864]	; (1cb4 <computeKalmanGains+0x710>)
    1954:	9826      	ldr	r0, [sp, #152]	; 0x98
    1956:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1958:	47a8      	blx	r5
    195a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    195c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    195e:	47a0      	blx	r4
    1960:	4ad5      	ldr	r2, [pc, #852]	; (1cb8 <computeKalmanGains+0x714>)
    1962:	0006      	movs	r6, r0
    1964:	000f      	movs	r7, r1
    1966:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1968:	9929      	ldr	r1, [sp, #164]	; 0xa4
    196a:	4bd4      	ldr	r3, [pc, #848]	; (1cbc <computeKalmanGains+0x718>)
    196c:	47a8      	blx	r5
    196e:	0002      	movs	r2, r0
    1970:	000b      	movs	r3, r1
    1972:	0030      	movs	r0, r6
    1974:	0039      	movs	r1, r7
    1976:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1978:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    197a:	902a      	str	r0, [sp, #168]	; 0xa8
    197c:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    197e:	9818      	ldr	r0, [sp, #96]	; 0x60
    1980:	9919      	ldr	r1, [sp, #100]	; 0x64
    1982:	2300      	movs	r3, #0
    1984:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1986:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1988:	9032      	str	r0, [sp, #200]	; 0xc8
    198a:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    198c:	9826      	ldr	r0, [sp, #152]	; 0x98
    198e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1990:	2300      	movs	r3, #0
    1992:	47a8      	blx	r5
    1994:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1996:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1998:	47a0      	blx	r4
    199a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    199c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    199e:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    19a0:	4ac3      	ldr	r2, [pc, #780]	; (1cb0 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    19a2:	902c      	str	r0, [sp, #176]	; 0xb0
    19a4:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    19a6:	9806      	ldr	r0, [sp, #24]
    19a8:	9907      	ldr	r1, [sp, #28]
    19aa:	4bc2      	ldr	r3, [pc, #776]	; (1cb4 <computeKalmanGains+0x710>)
    19ac:	47a8      	blx	r5
    19ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    19b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    19b2:	47a0      	blx	r4
    19b4:	4ac0      	ldr	r2, [pc, #768]	; (1cb8 <computeKalmanGains+0x714>)
    19b6:	0006      	movs	r6, r0
    19b8:	000f      	movs	r7, r1
    19ba:	9802      	ldr	r0, [sp, #8]
    19bc:	9903      	ldr	r1, [sp, #12]
    19be:	4bbf      	ldr	r3, [pc, #764]	; (1cbc <computeKalmanGains+0x718>)
    19c0:	47a8      	blx	r5
    19c2:	0002      	movs	r2, r0
    19c4:	000b      	movs	r3, r1
    19c6:	0030      	movs	r0, r6
    19c8:	0039      	movs	r1, r7
    19ca:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19cc:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    19ce:	9000      	str	r0, [sp, #0]
    19d0:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19d2:	982e      	ldr	r0, [sp, #184]	; 0xb8
    19d4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    19d6:	2300      	movs	r3, #0
    19d8:	47a8      	blx	r5
    19da:	0006      	movs	r6, r0
    19dc:	000f      	movs	r7, r1
    19de:	0002      	movs	r2, r0
    19e0:	000b      	movs	r3, r1
    19e2:	9806      	ldr	r0, [sp, #24]
    19e4:	9907      	ldr	r1, [sp, #28]
    19e6:	47a0      	blx	r4
    19e8:	4ab1      	ldr	r2, [pc, #708]	; (1cb0 <computeKalmanGains+0x70c>)
    19ea:	900a      	str	r0, [sp, #40]	; 0x28
    19ec:	910b      	str	r1, [sp, #44]	; 0x2c
    19ee:	9802      	ldr	r0, [sp, #8]
    19f0:	9903      	ldr	r1, [sp, #12]
    19f2:	4bb0      	ldr	r3, [pc, #704]	; (1cb4 <computeKalmanGains+0x710>)
    19f4:	47a8      	blx	r5
    19f6:	0002      	movs	r2, r0
    19f8:	000b      	movs	r3, r1
    19fa:	980a      	ldr	r0, [sp, #40]	; 0x28
    19fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    19fe:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1a00:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1a02:	9010      	str	r0, [sp, #64]	; 0x40
    1a04:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1a06:	9806      	ldr	r0, [sp, #24]
    1a08:	9907      	ldr	r1, [sp, #28]
    1a0a:	2300      	movs	r3, #0
    1a0c:	47a8      	blx	r5
    1a0e:	0032      	movs	r2, r6
    1a10:	003b      	movs	r3, r7
    1a12:	47a0      	blx	r4
    1a14:	9a02      	ldr	r2, [sp, #8]
    1a16:	9b03      	ldr	r3, [sp, #12]
    1a18:	47a0      	blx	r4
    1a1a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1a1c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1a1e:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a20:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1a22:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1a24:	9002      	str	r0, [sp, #8]
    1a26:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a28:	9808      	ldr	r0, [sp, #32]
    1a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a2c:	47a0      	blx	r4
    1a2e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1a30:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1a32:	900a      	str	r0, [sp, #40]	; 0x28
    1a34:	910b      	str	r1, [sp, #44]	; 0x2c
    1a36:	9802      	ldr	r0, [sp, #8]
    1a38:	9903      	ldr	r1, [sp, #12]
    1a3a:	47a0      	blx	r4
    1a3c:	9a00      	ldr	r2, [sp, #0]
    1a3e:	9b01      	ldr	r3, [sp, #4]
    1a40:	900c      	str	r0, [sp, #48]	; 0x30
    1a42:	910d      	str	r1, [sp, #52]	; 0x34
    1a44:	9804      	ldr	r0, [sp, #16]
    1a46:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a48:	47a8      	blx	r5
    1a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a4e:	900e      	str	r0, [sp, #56]	; 0x38
    1a50:	910f      	str	r1, [sp, #60]	; 0x3c
    1a52:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a56:	47a8      	blx	r5
    1a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a5c:	4e98      	ldr	r6, [pc, #608]	; (1cc0 <computeKalmanGains+0x71c>)
    1a5e:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a64:	9006      	str	r0, [sp, #24]
    1a66:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a68:	9808      	ldr	r0, [sp, #32]
    1a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a6c:	47a8      	blx	r5
    1a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a72:	47b0      	blx	r6
    1a74:	9a06      	ldr	r2, [sp, #24]
    1a76:	9b07      	ldr	r3, [sp, #28]
    1a78:	4e92      	ldr	r6, [pc, #584]	; (1cc4 <computeKalmanGains+0x720>)
    1a7a:	47b0      	blx	r6
    1a7c:	9034      	str	r0, [sp, #208]	; 0xd0
    1a7e:	9135      	str	r1, [sp, #212]	; 0xd4
    1a80:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1a82:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1a84:	4990      	ldr	r1, [pc, #576]	; (1cc8 <computeKalmanGains+0x724>)
    1a86:	600a      	str	r2, [r1, #0]
    1a88:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a8a:	9808      	ldr	r0, [sp, #32]
    1a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a8e:	2280      	movs	r2, #128	; 0x80
    1a90:	0612      	lsls	r2, r2, #24
    1a92:	4694      	mov	ip, r2
    1a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1a96:	9a04      	ldr	r2, [sp, #16]
    1a98:	4463      	add	r3, ip
    1a9a:	932e      	str	r3, [sp, #184]	; 0xb8
    1a9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a9e:	47a8      	blx	r5
    1aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1aa4:	0006      	movs	r6, r0
    1aa6:	000f      	movs	r7, r1
    1aa8:	9804      	ldr	r0, [sp, #16]
    1aaa:	9916      	ldr	r1, [sp, #88]	; 0x58
    1aac:	47a8      	blx	r5
    1aae:	0002      	movs	r2, r0
    1ab0:	000b      	movs	r3, r1
    1ab2:	0030      	movs	r0, r6
    1ab4:	0039      	movs	r1, r7
    1ab6:	47a0      	blx	r4
    1ab8:	9a06      	ldr	r2, [sp, #24]
    1aba:	9b07      	ldr	r3, [sp, #28]
    1abc:	4e81      	ldr	r6, [pc, #516]	; (1cc4 <computeKalmanGains+0x720>)
    1abe:	47b0      	blx	r6
    1ac0:	900e      	str	r0, [sp, #56]	; 0x38
    1ac2:	910f      	str	r1, [sp, #60]	; 0x3c
    1ac4:	4980      	ldr	r1, [pc, #512]	; (1cc8 <computeKalmanGains+0x724>)
    1ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1aca:	608a      	str	r2, [r1, #8]
    1acc:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ad2:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1ad4:	992b      	ldr	r1, [sp, #172]	; 0xac
    1ad6:	47a8      	blx	r5
    1ad8:	9a00      	ldr	r2, [sp, #0]
    1ada:	9b01      	ldr	r3, [sp, #4]
    1adc:	0006      	movs	r6, r0
    1ade:	000f      	movs	r7, r1
    1ae0:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1ae2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1ae4:	47a8      	blx	r5
    1ae6:	0002      	movs	r2, r0
    1ae8:	000b      	movs	r3, r1
    1aea:	0030      	movs	r0, r6
    1aec:	0039      	movs	r1, r7
    1aee:	4e74      	ldr	r6, [pc, #464]	; (1cc0 <computeKalmanGains+0x71c>)
    1af0:	47b0      	blx	r6
    1af2:	9a06      	ldr	r2, [sp, #24]
    1af4:	9b07      	ldr	r3, [sp, #28]
    1af6:	4e73      	ldr	r6, [pc, #460]	; (1cc4 <computeKalmanGains+0x720>)
    1af8:	47b0      	blx	r6
    1afa:	0002      	movs	r2, r0
    1afc:	000b      	movs	r3, r1
    1afe:	9139      	str	r1, [sp, #228]	; 0xe4
    1b00:	4971      	ldr	r1, [pc, #452]	; (1cc8 <computeKalmanGains+0x724>)
    1b02:	9018      	str	r0, [sp, #96]	; 0x60
    1b04:	610a      	str	r2, [r1, #16]
    1b06:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1b08:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1b0a:	992b      	ldr	r1, [sp, #172]	; 0xac
    1b0c:	9a04      	ldr	r2, [sp, #16]
    1b0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b10:	47a8      	blx	r5
    1b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b16:	0006      	movs	r6, r0
    1b18:	000f      	movs	r7, r1
    1b1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1b1c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1b1e:	47a8      	blx	r5
    1b20:	0002      	movs	r2, r0
    1b22:	000b      	movs	r3, r1
    1b24:	0030      	movs	r0, r6
    1b26:	0039      	movs	r1, r7
    1b28:	47a0      	blx	r4
    1b2a:	9a06      	ldr	r2, [sp, #24]
    1b2c:	9b07      	ldr	r3, [sp, #28]
    1b2e:	4e65      	ldr	r6, [pc, #404]	; (1cc4 <computeKalmanGains+0x720>)
    1b30:	47b0      	blx	r6
    1b32:	9012      	str	r0, [sp, #72]	; 0x48
    1b34:	9113      	str	r1, [sp, #76]	; 0x4c
    1b36:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b3a:	4963      	ldr	r1, [pc, #396]	; (1cc8 <computeKalmanGains+0x724>)
    1b3c:	618a      	str	r2, [r1, #24]
    1b3e:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b44:	9800      	ldr	r0, [sp, #0]
    1b46:	9901      	ldr	r1, [sp, #4]
    1b48:	47a8      	blx	r5
    1b4a:	9a02      	ldr	r2, [sp, #8]
    1b4c:	9b03      	ldr	r3, [sp, #12]
    1b4e:	0006      	movs	r6, r0
    1b50:	000f      	movs	r7, r1
    1b52:	9800      	ldr	r0, [sp, #0]
    1b54:	9901      	ldr	r1, [sp, #4]
    1b56:	47a8      	blx	r5
    1b58:	0002      	movs	r2, r0
    1b5a:	000b      	movs	r3, r1
    1b5c:	0030      	movs	r0, r6
    1b5e:	0039      	movs	r1, r7
    1b60:	4e57      	ldr	r6, [pc, #348]	; (1cc0 <computeKalmanGains+0x71c>)
    1b62:	47b0      	blx	r6
    1b64:	9a06      	ldr	r2, [sp, #24]
    1b66:	9b07      	ldr	r3, [sp, #28]
    1b68:	4e56      	ldr	r6, [pc, #344]	; (1cc4 <computeKalmanGains+0x720>)
    1b6a:	47b0      	blx	r6
    1b6c:	9014      	str	r0, [sp, #80]	; 0x50
    1b6e:	9115      	str	r1, [sp, #84]	; 0x54
    1b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b74:	4954      	ldr	r1, [pc, #336]	; (1cc8 <computeKalmanGains+0x724>)
    1b76:	620a      	str	r2, [r1, #32]
    1b78:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1b7a:	9800      	ldr	r0, [sp, #0]
    1b7c:	9901      	ldr	r1, [sp, #4]
    1b7e:	9a04      	ldr	r2, [sp, #16]
    1b80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b82:	47a8      	blx	r5
    1b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b88:	0006      	movs	r6, r0
    1b8a:	000f      	movs	r7, r1
    1b8c:	9802      	ldr	r0, [sp, #8]
    1b8e:	9903      	ldr	r1, [sp, #12]
    1b90:	47a8      	blx	r5
    1b92:	0002      	movs	r2, r0
    1b94:	000b      	movs	r3, r1
    1b96:	0030      	movs	r0, r6
    1b98:	0039      	movs	r1, r7
    1b9a:	47a0      	blx	r4
    1b9c:	9a06      	ldr	r2, [sp, #24]
    1b9e:	9b07      	ldr	r3, [sp, #28]
    1ba0:	4e48      	ldr	r6, [pc, #288]	; (1cc4 <computeKalmanGains+0x720>)
    1ba2:	47b0      	blx	r6
    1ba4:	9036      	str	r0, [sp, #216]	; 0xd8
    1ba6:	9137      	str	r1, [sp, #220]	; 0xdc
    1ba8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1baa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1bac:	4946      	ldr	r1, [pc, #280]	; (1cc8 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1bae:	4e44      	ldr	r6, [pc, #272]	; (1cc0 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1bb0:	628a      	str	r2, [r1, #40]	; 0x28
    1bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1bb4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1bb6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1bb8:	2000      	movs	r0, #0
    1bba:	4944      	ldr	r1, [pc, #272]	; (1ccc <computeKalmanGains+0x728>)
    1bbc:	47b0      	blx	r6
    1bbe:	0002      	movs	r2, r0
    1bc0:	000b      	movs	r3, r1
    1bc2:	900c      	str	r0, [sp, #48]	; 0x30
    1bc4:	910d      	str	r1, [sp, #52]	; 0x34
    1bc6:	9808      	ldr	r0, [sp, #32]
    1bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bca:	47a8      	blx	r5
    1bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bd0:	0006      	movs	r6, r0
    1bd2:	000f      	movs	r7, r1
    1bd4:	9800      	ldr	r0, [sp, #0]
    1bd6:	9901      	ldr	r1, [sp, #4]
    1bd8:	47a8      	blx	r5
    1bda:	0002      	movs	r2, r0
    1bdc:	000b      	movs	r3, r1
    1bde:	0030      	movs	r0, r6
    1be0:	0039      	movs	r1, r7
    1be2:	4e37      	ldr	r6, [pc, #220]	; (1cc0 <computeKalmanGains+0x71c>)
    1be4:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1bea:	9006      	str	r0, [sp, #24]
    1bec:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1bee:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1bf0:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1bf2:	47a8      	blx	r5
    1bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bf8:	0006      	movs	r6, r0
    1bfa:	000f      	movs	r7, r1
    1bfc:	9810      	ldr	r0, [sp, #64]	; 0x40
    1bfe:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c00:	47a8      	blx	r5
    1c02:	0002      	movs	r2, r0
    1c04:	000b      	movs	r3, r1
    1c06:	0030      	movs	r0, r6
    1c08:	0039      	movs	r1, r7
    1c0a:	4e2d      	ldr	r6, [pc, #180]	; (1cc0 <computeKalmanGains+0x71c>)
    1c0c:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1c12:	900a      	str	r0, [sp, #40]	; 0x28
    1c14:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1c16:	9804      	ldr	r0, [sp, #16]
    1c18:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c1a:	47a8      	blx	r5
    1c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c20:	0006      	movs	r6, r0
    1c22:	000f      	movs	r7, r1
    1c24:	9802      	ldr	r0, [sp, #8]
    1c26:	9903      	ldr	r1, [sp, #12]
    1c28:	47a8      	blx	r5
    1c2a:	0002      	movs	r2, r0
    1c2c:	000b      	movs	r3, r1
    1c2e:	0030      	movs	r0, r6
    1c30:	0039      	movs	r1, r7
    1c32:	4e23      	ldr	r6, [pc, #140]	; (1cc0 <computeKalmanGains+0x71c>)
    1c34:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c36:	2280      	movs	r2, #128	; 0x80
    1c38:	0612      	lsls	r2, r2, #24
    1c3a:	4694      	mov	ip, r2
    1c3c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1c3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c40:	4463      	add	r3, ip
    1c42:	932e      	str	r3, [sp, #184]	; 0xb8
    1c44:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1c46:	900c      	str	r0, [sp, #48]	; 0x30
    1c48:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c4a:	9808      	ldr	r0, [sp, #32]
    1c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c4e:	47a8      	blx	r5
    1c50:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1c52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1c54:	47a0      	blx	r4
    1c56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c5a:	0006      	movs	r6, r0
    1c5c:	000f      	movs	r7, r1
    1c5e:	9800      	ldr	r0, [sp, #0]
    1c60:	9901      	ldr	r1, [sp, #4]
    1c62:	47a8      	blx	r5
    1c64:	0002      	movs	r2, r0
    1c66:	000b      	movs	r3, r1
    1c68:	0030      	movs	r0, r6
    1c6a:	0039      	movs	r1, r7
    1c6c:	4e14      	ldr	r6, [pc, #80]	; (1cc0 <computeKalmanGains+0x71c>)
    1c6e:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c70:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1c72:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c74:	9008      	str	r0, [sp, #32]
    1c76:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c78:	9826      	ldr	r0, [sp, #152]	; 0x98
    1c7a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1c7c:	47a0      	blx	r4
    1c7e:	4a0c      	ldr	r2, [pc, #48]	; (1cb0 <computeKalmanGains+0x70c>)
    1c80:	0006      	movs	r6, r0
    1c82:	000f      	movs	r7, r1
    1c84:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1c86:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <computeKalmanGains+0x710>)
    1c8a:	47a8      	blx	r5
    1c8c:	0002      	movs	r2, r0
    1c8e:	000b      	movs	r3, r1
    1c90:	0030      	movs	r0, r6
    1c92:	0039      	movs	r1, r7
    1c94:	47a0      	blx	r4
    1c96:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c98:	0006      	movs	r6, r0
    1c9a:	000f      	movs	r7, r1
    1c9c:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1c9e:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ca0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ca2:	47a8      	blx	r5
    1ca4:	0002      	movs	r2, r0
    1ca6:	000b      	movs	r3, r1
    1ca8:	0030      	movs	r0, r6
    1caa:	0039      	movs	r1, r7
    1cac:	47a0      	blx	r4
    1cae:	e00f      	b.n	1cd0 <computeKalmanGains+0x72c>
    1cb0:	47ae147b 	.word	0x47ae147b
    1cb4:	3f747ae1 	.word	0x3f747ae1
    1cb8:	eb1c432d 	.word	0xeb1c432d
    1cbc:	3eea36e2 	.word	0x3eea36e2
    1cc0:	000058dd 	.word	0x000058dd
    1cc4:	00004ba1 	.word	0x00004ba1
    1cc8:	20000650 	.word	0x20000650
    1ccc:	3ff00000 	.word	0x3ff00000
    1cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1cd4:	0006      	movs	r6, r0
    1cd6:	000f      	movs	r7, r1
    1cd8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1cda:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cdc:	47a8      	blx	r5
    1cde:	0002      	movs	r2, r0
    1ce0:	000b      	movs	r3, r1
    1ce2:	0030      	movs	r0, r6
    1ce4:	0039      	movs	r1, r7
    1ce6:	4e50      	ldr	r6, [pc, #320]	; (1e28 <computeKalmanGains+0x884>)
    1ce8:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cea:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1cec:	900e      	str	r0, [sp, #56]	; 0x38
    1cee:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1cf2:	9804      	ldr	r0, [sp, #16]
    1cf4:	9916      	ldr	r1, [sp, #88]	; 0x58
    1cf6:	47a8      	blx	r5
    1cf8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1cfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1cfc:	47a0      	blx	r4
    1cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d02:	0006      	movs	r6, r0
    1d04:	000f      	movs	r7, r1
    1d06:	9802      	ldr	r0, [sp, #8]
    1d08:	9903      	ldr	r1, [sp, #12]
    1d0a:	47a8      	blx	r5
    1d0c:	4c46      	ldr	r4, [pc, #280]	; (1e28 <computeKalmanGains+0x884>)
    1d0e:	0002      	movs	r2, r0
    1d10:	000b      	movs	r3, r1
    1d12:	0030      	movs	r0, r6
    1d14:	0039      	movs	r1, r7
    1d16:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1d18:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1d1a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1d1c:	9004      	str	r0, [sp, #16]
    1d1e:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1d20:	2000      	movs	r0, #0
    1d22:	4942      	ldr	r1, [pc, #264]	; (1e2c <computeKalmanGains+0x888>)
    1d24:	47a0      	blx	r4
    1d26:	0002      	movs	r2, r0
    1d28:	000b      	movs	r3, r1
    1d2a:	9012      	str	r0, [sp, #72]	; 0x48
    1d2c:	9113      	str	r1, [sp, #76]	; 0x4c
    1d2e:	9800      	ldr	r0, [sp, #0]
    1d30:	9901      	ldr	r1, [sp, #4]
    1d32:	47a8      	blx	r5
    1d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d38:	0006      	movs	r6, r0
    1d3a:	000f      	movs	r7, r1
    1d3c:	9800      	ldr	r0, [sp, #0]
    1d3e:	9901      	ldr	r1, [sp, #4]
    1d40:	47a8      	blx	r5
    1d42:	0002      	movs	r2, r0
    1d44:	000b      	movs	r3, r1
    1d46:	0030      	movs	r0, r6
    1d48:	0039      	movs	r1, r7
    1d4a:	47a0      	blx	r4
    1d4c:	9000      	str	r0, [sp, #0]
    1d4e:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d50:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d54:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d56:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d58:	47a8      	blx	r5
    1d5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d5e:	0006      	movs	r6, r0
    1d60:	000f      	movs	r7, r1
    1d62:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d64:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d66:	47a8      	blx	r5
    1d68:	0002      	movs	r2, r0
    1d6a:	000b      	movs	r3, r1
    1d6c:	0030      	movs	r0, r6
    1d6e:	0039      	movs	r1, r7
    1d70:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d76:	9010      	str	r0, [sp, #64]	; 0x40
    1d78:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d7a:	9802      	ldr	r0, [sp, #8]
    1d7c:	9903      	ldr	r1, [sp, #12]
    1d7e:	47a8      	blx	r5
    1d80:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d84:	0006      	movs	r6, r0
    1d86:	000f      	movs	r7, r1
    1d88:	9802      	ldr	r0, [sp, #8]
    1d8a:	9903      	ldr	r1, [sp, #12]
    1d8c:	47a8      	blx	r5
    1d8e:	000b      	movs	r3, r1
    1d90:	0002      	movs	r2, r0
    1d92:	0039      	movs	r1, r7
    1d94:	0030      	movs	r0, r6
    1d96:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1d98:	2400      	movs	r4, #0
    1d9a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d9c:	9002      	str	r0, [sp, #8]
    1d9e:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1da0:	3301      	adds	r3, #1
    1da2:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1da4:	4b22      	ldr	r3, [pc, #136]	; (1e30 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1da6:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1da8:	9326      	str	r3, [sp, #152]	; 0x98
    1daa:	4b1f      	ldr	r3, [pc, #124]	; (1e28 <computeKalmanGains+0x884>)
    1dac:	9328      	str	r3, [sp, #160]	; 0xa0
    1dae:	ab40      	add	r3, sp, #256	; 0x100
    1db0:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1db2:	2300      	movs	r3, #0
    1db4:	9516      	str	r5, [sp, #88]	; 0x58
    1db6:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1dba:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1dbc:	18e3      	adds	r3, r4, r3
    1dbe:	189b      	adds	r3, r3, r2
    1dc0:	681a      	ldr	r2, [r3, #0]
    1dc2:	685b      	ldr	r3, [r3, #4]
    1dc4:	9218      	str	r2, [sp, #96]	; 0x60
    1dc6:	9319      	str	r3, [sp, #100]	; 0x64
    1dc8:	9818      	ldr	r0, [sp, #96]	; 0x60
    1dca:	9919      	ldr	r1, [sp, #100]	; 0x64
    1dcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1dce:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1dd0:	681e      	ldr	r6, [r3, #0]
    1dd2:	685f      	ldr	r7, [r3, #4]
    1dd4:	0032      	movs	r2, r6
    1dd6:	003b      	movs	r3, r7
    1dd8:	47a8      	blx	r5
    1dda:	0032      	movs	r2, r6
    1ddc:	003b      	movs	r3, r7
    1dde:	4d15      	ldr	r5, [pc, #84]	; (1e34 <computeKalmanGains+0x890>)
    1de0:	47a8      	blx	r5
    1de2:	4b15      	ldr	r3, [pc, #84]	; (1e38 <computeKalmanGains+0x894>)
    1de4:	4a15      	ldr	r2, [pc, #84]	; (1e3c <computeKalmanGains+0x898>)
    1de6:	4e16      	ldr	r6, [pc, #88]	; (1e40 <computeKalmanGains+0x89c>)
    1de8:	47b0      	blx	r6
                    notdone++;
    1dea:	1e43      	subs	r3, r0, #1
    1dec:	4198      	sbcs	r0, r3
    1dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1df0:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1df2:	181b      	adds	r3, r3, r0
    1df4:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1df6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1dfa:	c10c      	stmia	r1!, {r2, r3}
    1dfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1dfe:	9116      	str	r1, [sp, #88]	; 0x58
    1e00:	3308      	adds	r3, #8
    1e02:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1e04:	2b10      	cmp	r3, #16
    1e06:	d1d7      	bne.n	1db8 <computeKalmanGains+0x814>
    1e08:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1e0a:	2c30      	cmp	r4, #48	; 0x30
    1e0c:	d1cf      	bne.n	1dae <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1e10:	2b00      	cmp	r3, #0
    1e12:	d001      	beq.n	1e18 <computeKalmanGains+0x874>
    1e14:	f7ff fc2c 	bl	1670 <computeKalmanGains+0xcc>
    1e18:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1e1a:	2b63      	cmp	r3, #99	; 0x63
    1e1c:	dc01      	bgt.n	1e22 <computeKalmanGains+0x87e>
    1e1e:	f7ff fc27 	bl	1670 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1e22:	b04d      	add	sp, #308	; 0x134
    1e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	000058dd 	.word	0x000058dd
    1e2c:	3ff00000 	.word	0x3ff00000
    1e30:	20000650 	.word	0x20000650
    1e34:	00004ba1 	.word	0x00004ba1
    1e38:	3ee4f8b5 	.word	0x3ee4f8b5
    1e3c:	88e368f1 	.word	0x88e368f1
    1e40:	00004221 	.word	0x00004221

00001e44 <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    1e44:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1e46:	4b3f      	ldr	r3, [pc, #252]	; (1f44 <KalmanBaroUpdate+0x100>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    1e48:	b08b      	sub	sp, #44	; 0x2c

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1e4a:	685c      	ldr	r4, [r3, #4]
    1e4c:	681b      	ldr	r3, [r3, #0]
    1e4e:	9300      	str	r3, [sp, #0]
    1e50:	9401      	str	r4, [sp, #4]
    1e52:	4b3d      	ldr	r3, [pc, #244]	; (1f48 <KalmanBaroUpdate+0x104>)
    1e54:	4d3d      	ldr	r5, [pc, #244]	; (1f4c <KalmanBaroUpdate+0x108>)
    1e56:	685c      	ldr	r4, [r3, #4]
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	9302      	str	r3, [sp, #8]
    1e5c:	9403      	str	r4, [sp, #12]
    1e5e:	4c3c      	ldr	r4, [pc, #240]	; (1f50 <KalmanBaroUpdate+0x10c>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    1e60:	9004      	str	r0, [sp, #16]
    1e62:	9105      	str	r1, [sp, #20]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1e64:	6822      	ldr	r2, [r4, #0]
    1e66:	6863      	ldr	r3, [r4, #4]
    1e68:	9800      	ldr	r0, [sp, #0]
    1e6a:	9901      	ldr	r1, [sp, #4]
    1e6c:	47a8      	blx	r5
    1e6e:	68a2      	ldr	r2, [r4, #8]
    1e70:	68e3      	ldr	r3, [r4, #12]
    1e72:	0006      	movs	r6, r0
    1e74:	000f      	movs	r7, r1
    1e76:	9802      	ldr	r0, [sp, #8]
    1e78:	9903      	ldr	r1, [sp, #12]
    1e7a:	47a8      	blx	r5
    1e7c:	0002      	movs	r2, r0
    1e7e:	000b      	movs	r3, r1
    1e80:	0030      	movs	r0, r6
    1e82:	0039      	movs	r1, r7
    1e84:	4e33      	ldr	r6, [pc, #204]	; (1f54 <KalmanBaroUpdate+0x110>)
    1e86:	47b0      	blx	r6
    1e88:	9006      	str	r0, [sp, #24]
    1e8a:	9107      	str	r1, [sp, #28]
    1e8c:	9a06      	ldr	r2, [sp, #24]
    1e8e:	9b07      	ldr	r3, [sp, #28]
    1e90:	4931      	ldr	r1, [pc, #196]	; (1f58 <KalmanBaroUpdate+0x114>)
    1e92:	600a      	str	r2, [r1, #0]
    1e94:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity;
    1e96:	69a2      	ldr	r2, [r4, #24]
    1e98:	69e3      	ldr	r3, [r4, #28]
    1e9a:	9800      	ldr	r0, [sp, #0]
    1e9c:	9901      	ldr	r1, [sp, #4]
    1e9e:	47a8      	blx	r5
    1ea0:	6a22      	ldr	r2, [r4, #32]
    1ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ea4:	0006      	movs	r6, r0
    1ea6:	000f      	movs	r7, r1
    1ea8:	9802      	ldr	r0, [sp, #8]
    1eaa:	9903      	ldr	r1, [sp, #12]
    1eac:	47a8      	blx	r5
    1eae:	0002      	movs	r2, r0
    1eb0:	000b      	movs	r3, r1
    1eb2:	0030      	movs	r0, r6
    1eb4:	0039      	movs	r1, r7
    1eb6:	4e27      	ldr	r6, [pc, #156]	; (1f54 <KalmanBaroUpdate+0x110>)
    1eb8:	47b0      	blx	r6
    1eba:	9008      	str	r0, [sp, #32]
    1ebc:	9109      	str	r1, [sp, #36]	; 0x24
    1ebe:	9a08      	ldr	r2, [sp, #32]
    1ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ec2:	4925      	ldr	r1, [pc, #148]	; (1f58 <KalmanBaroUpdate+0x114>)
    1ec4:	608a      	str	r2, [r1, #8]
    1ec6:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    1ec8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1ecc:	9800      	ldr	r0, [sp, #0]
    1ece:	9901      	ldr	r1, [sp, #4]
    1ed0:	47a8      	blx	r5
    1ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1ed6:	0006      	movs	r6, r0
    1ed8:	000f      	movs	r7, r1
    1eda:	9802      	ldr	r0, [sp, #8]
    1edc:	9903      	ldr	r1, [sp, #12]
    1ede:	47a8      	blx	r5
    1ee0:	4c1c      	ldr	r4, [pc, #112]	; (1f54 <KalmanBaroUpdate+0x110>)
    1ee2:	0002      	movs	r2, r0
    1ee4:	000b      	movs	r3, r1
    1ee6:	0030      	movs	r0, r6
    1ee8:	0039      	movs	r1, r7
    1eea:	47a0      	blx	r4
    1eec:	0006      	movs	r6, r0
    1eee:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    1ef0:	9804      	ldr	r0, [sp, #16]
    1ef2:	9905      	ldr	r1, [sp, #20]
void KalmanBaroUpdate(double alt_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    1ef4:	4b18      	ldr	r3, [pc, #96]	; (1f58 <KalmanBaroUpdate+0x114>)
    1ef6:	611e      	str	r6, [r3, #16]
    1ef8:	615f      	str	r7, [r3, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    1efa:	4b18      	ldr	r3, [pc, #96]	; (1f5c <KalmanBaroUpdate+0x118>)
    1efc:	681a      	ldr	r2, [r3, #0]
    1efe:	685b      	ldr	r3, [r3, #4]
    1f00:	47a8      	blx	r5
    1f02:	9a06      	ldr	r2, [sp, #24]
    1f04:	9b07      	ldr	r3, [sp, #28]
    1f06:	47a0      	blx	r4
    1f08:	4b0e      	ldr	r3, [pc, #56]	; (1f44 <KalmanBaroUpdate+0x100>)
    1f0a:	6018      	str	r0, [r3, #0]
    1f0c:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    1f0e:	9804      	ldr	r0, [sp, #16]
    1f10:	9905      	ldr	r1, [sp, #20]
    1f12:	4b12      	ldr	r3, [pc, #72]	; (1f5c <KalmanBaroUpdate+0x118>)
    1f14:	691a      	ldr	r2, [r3, #16]
    1f16:	695b      	ldr	r3, [r3, #20]
    1f18:	47a8      	blx	r5
    1f1a:	9a08      	ldr	r2, [sp, #32]
    1f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f1e:	47a0      	blx	r4
    1f20:	4b09      	ldr	r3, [pc, #36]	; (1f48 <KalmanBaroUpdate+0x104>)
    1f22:	6018      	str	r0, [r3, #0]
    1f24:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation;
    1f26:	9804      	ldr	r0, [sp, #16]
    1f28:	9905      	ldr	r1, [sp, #20]
    1f2a:	4b0c      	ldr	r3, [pc, #48]	; (1f5c <KalmanBaroUpdate+0x118>)
    1f2c:	6a1a      	ldr	r2, [r3, #32]
    1f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f30:	47a8      	blx	r5
    1f32:	003b      	movs	r3, r7
    1f34:	0032      	movs	r2, r6
    1f36:	47a0      	blx	r4
    1f38:	4b09      	ldr	r3, [pc, #36]	; (1f60 <KalmanBaroUpdate+0x11c>)
    1f3a:	6018      	str	r0, [r3, #0]
    1f3c:	6059      	str	r1, [r3, #4]

}
    1f3e:	b00b      	add	sp, #44	; 0x2c
    1f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	200006b0 	.word	0x200006b0
    1f48:	200006a8 	.word	0x200006a8
    1f4c:	000053e9 	.word	0x000053e9
    1f50:	20000010 	.word	0x20000010
    1f54:	00004549 	.word	0x00004549
    1f58:	200006b8 	.word	0x200006b8
    1f5c:	20000650 	.word	0x20000650
    1f60:	200006a0 	.word	0x200006a0

00001f64 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f66:	b08f      	sub	sp, #60	; 0x3c
    1f68:	9208      	str	r2, [sp, #32]
    1f6a:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    1f6c:	4b68      	ldr	r3, [pc, #416]	; (2110 <STACK_SIZE+0x110>)
    1f6e:	4d69      	ldr	r5, [pc, #420]	; (2114 <STACK_SIZE+0x114>)
    1f70:	685c      	ldr	r4, [r3, #4]
    1f72:	681b      	ldr	r3, [r3, #0]
    1f74:	9300      	str	r3, [sp, #0]
    1f76:	9401      	str	r4, [sp, #4]
    1f78:	4b67      	ldr	r3, [pc, #412]	; (2118 <STACK_SIZE+0x118>)
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    1f7a:	9006      	str	r0, [sp, #24]
    1f7c:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    1f7e:	685c      	ldr	r4, [r3, #4]
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	9800      	ldr	r0, [sp, #0]
    1f84:	9901      	ldr	r1, [sp, #4]
    1f86:	9302      	str	r3, [sp, #8]
    1f88:	9403      	str	r4, [sp, #12]
    1f8a:	4b64      	ldr	r3, [pc, #400]	; (211c <STACK_SIZE+0x11c>)
    1f8c:	685c      	ldr	r4, [r3, #4]
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	9304      	str	r3, [sp, #16]
    1f92:	9405      	str	r4, [sp, #20]
    1f94:	4c62      	ldr	r4, [pc, #392]	; (2120 <STACK_SIZE+0x120>)
    1f96:	6822      	ldr	r2, [r4, #0]
    1f98:	6863      	ldr	r3, [r4, #4]
    1f9a:	47a8      	blx	r5
    1f9c:	68a2      	ldr	r2, [r4, #8]
    1f9e:	68e3      	ldr	r3, [r4, #12]
    1fa0:	0006      	movs	r6, r0
    1fa2:	000f      	movs	r7, r1
    1fa4:	9802      	ldr	r0, [sp, #8]
    1fa6:	9903      	ldr	r1, [sp, #12]
    1fa8:	47a8      	blx	r5
    1faa:	0002      	movs	r2, r0
    1fac:	000b      	movs	r3, r1
    1fae:	0030      	movs	r0, r6
    1fb0:	0039      	movs	r1, r7
    1fb2:	4e5c      	ldr	r6, [pc, #368]	; (2124 <STACK_SIZE+0x124>)
    1fb4:	47b0      	blx	r6
    1fb6:	6922      	ldr	r2, [r4, #16]
    1fb8:	6963      	ldr	r3, [r4, #20]
    1fba:	0006      	movs	r6, r0
    1fbc:	000f      	movs	r7, r1
    1fbe:	9804      	ldr	r0, [sp, #16]
    1fc0:	9905      	ldr	r1, [sp, #20]
    1fc2:	47a8      	blx	r5
    1fc4:	0002      	movs	r2, r0
    1fc6:	000b      	movs	r3, r1
    1fc8:	0030      	movs	r0, r6
    1fca:	0039      	movs	r1, r7
    1fcc:	4e55      	ldr	r6, [pc, #340]	; (2124 <STACK_SIZE+0x124>)
    1fce:	47b0      	blx	r6
    1fd0:	900a      	str	r0, [sp, #40]	; 0x28
    1fd2:	910b      	str	r1, [sp, #44]	; 0x2c
    1fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fd8:	4953      	ldr	r1, [pc, #332]	; (2128 <STACK_SIZE+0x128>)
    1fda:	600a      	str	r2, [r1, #0]
    1fdc:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1fde:	69a2      	ldr	r2, [r4, #24]
    1fe0:	69e3      	ldr	r3, [r4, #28]
    1fe2:	9800      	ldr	r0, [sp, #0]
    1fe4:	9901      	ldr	r1, [sp, #4]
    1fe6:	47a8      	blx	r5
    1fe8:	6a22      	ldr	r2, [r4, #32]
    1fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1fec:	0006      	movs	r6, r0
    1fee:	000f      	movs	r7, r1
    1ff0:	9802      	ldr	r0, [sp, #8]
    1ff2:	9903      	ldr	r1, [sp, #12]
    1ff4:	47a8      	blx	r5
    1ff6:	0002      	movs	r2, r0
    1ff8:	000b      	movs	r3, r1
    1ffa:	0030      	movs	r0, r6
    1ffc:	0039      	movs	r1, r7
    1ffe:	4e49      	ldr	r6, [pc, #292]	; (2124 <STACK_SIZE+0x124>)
    2000:	47b0      	blx	r6
    2002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2006:	0006      	movs	r6, r0
    2008:	000f      	movs	r7, r1
    200a:	9804      	ldr	r0, [sp, #16]
    200c:	9905      	ldr	r1, [sp, #20]
    200e:	47a8      	blx	r5
    2010:	0002      	movs	r2, r0
    2012:	000b      	movs	r3, r1
    2014:	0030      	movs	r0, r6
    2016:	0039      	movs	r1, r7
    2018:	4e42      	ldr	r6, [pc, #264]	; (2124 <STACK_SIZE+0x124>)
    201a:	47b0      	blx	r6
    201c:	900c      	str	r0, [sp, #48]	; 0x30
    201e:	910d      	str	r1, [sp, #52]	; 0x34
    2020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2024:	4940      	ldr	r1, [pc, #256]	; (2128 <STACK_SIZE+0x128>)
    2026:	608a      	str	r2, [r1, #8]
    2028:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    202a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    202c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    202e:	9800      	ldr	r0, [sp, #0]
    2030:	9901      	ldr	r1, [sp, #4]
    2032:	47a8      	blx	r5
    2034:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2038:	0006      	movs	r6, r0
    203a:	000f      	movs	r7, r1
    203c:	9802      	ldr	r0, [sp, #8]
    203e:	9903      	ldr	r1, [sp, #12]
    2040:	47a8      	blx	r5
    2042:	0002      	movs	r2, r0
    2044:	000b      	movs	r3, r1
    2046:	0030      	movs	r0, r6
    2048:	0039      	movs	r1, r7
    204a:	4e36      	ldr	r6, [pc, #216]	; (2124 <STACK_SIZE+0x124>)
    204c:	47b0      	blx	r6
    204e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2050:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2052:	0006      	movs	r6, r0
    2054:	000f      	movs	r7, r1
    2056:	9804      	ldr	r0, [sp, #16]
    2058:	9905      	ldr	r1, [sp, #20]
    205a:	47a8      	blx	r5
    205c:	4c31      	ldr	r4, [pc, #196]	; (2124 <STACK_SIZE+0x124>)
    205e:	0002      	movs	r2, r0
    2060:	000b      	movs	r3, r1
    2062:	0030      	movs	r0, r6
    2064:	0039      	movs	r1, r7
    2066:	47a0      	blx	r4
    2068:	0003      	movs	r3, r0
    206a:	000c      	movs	r4, r1
    206c:	4a2e      	ldr	r2, [pc, #184]	; (2128 <STACK_SIZE+0x128>)
    206e:	9000      	str	r0, [sp, #0]
    2070:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2072:	9806      	ldr	r0, [sp, #24]
    2074:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2076:	6113      	str	r3, [r2, #16]
    2078:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    207a:	4c2c      	ldr	r4, [pc, #176]	; (212c <STACK_SIZE+0x12c>)
    207c:	6822      	ldr	r2, [r4, #0]
    207e:	6863      	ldr	r3, [r4, #4]
    2080:	47a8      	blx	r5
    2082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2086:	4e27      	ldr	r6, [pc, #156]	; (2124 <STACK_SIZE+0x124>)
    2088:	47b0      	blx	r6
    208a:	68a2      	ldr	r2, [r4, #8]
    208c:	68e3      	ldr	r3, [r4, #12]
    208e:	0006      	movs	r6, r0
    2090:	000f      	movs	r7, r1
    2092:	9808      	ldr	r0, [sp, #32]
    2094:	9909      	ldr	r1, [sp, #36]	; 0x24
    2096:	47a8      	blx	r5
    2098:	0002      	movs	r2, r0
    209a:	000b      	movs	r3, r1
    209c:	0030      	movs	r0, r6
    209e:	0039      	movs	r1, r7
    20a0:	4e20      	ldr	r6, [pc, #128]	; (2124 <STACK_SIZE+0x124>)
    20a2:	47b0      	blx	r6
    20a4:	4b1a      	ldr	r3, [pc, #104]	; (2110 <STACK_SIZE+0x110>)
    20a6:	6018      	str	r0, [r3, #0]
    20a8:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    20aa:	6922      	ldr	r2, [r4, #16]
    20ac:	6963      	ldr	r3, [r4, #20]
    20ae:	9806      	ldr	r0, [sp, #24]
    20b0:	9907      	ldr	r1, [sp, #28]
    20b2:	47a8      	blx	r5
    20b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20b8:	47b0      	blx	r6
    20ba:	69a2      	ldr	r2, [r4, #24]
    20bc:	69e3      	ldr	r3, [r4, #28]
    20be:	0006      	movs	r6, r0
    20c0:	000f      	movs	r7, r1
    20c2:	9808      	ldr	r0, [sp, #32]
    20c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    20c6:	47a8      	blx	r5
    20c8:	0002      	movs	r2, r0
    20ca:	000b      	movs	r3, r1
    20cc:	0030      	movs	r0, r6
    20ce:	0039      	movs	r1, r7
    20d0:	4e14      	ldr	r6, [pc, #80]	; (2124 <STACK_SIZE+0x124>)
    20d2:	47b0      	blx	r6
    20d4:	4b10      	ldr	r3, [pc, #64]	; (2118 <STACK_SIZE+0x118>)
    20d6:	6018      	str	r0, [r3, #0]
    20d8:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    20da:	6a22      	ldr	r2, [r4, #32]
    20dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20de:	9806      	ldr	r0, [sp, #24]
    20e0:	9907      	ldr	r1, [sp, #28]
    20e2:	47a8      	blx	r5
    20e4:	9a00      	ldr	r2, [sp, #0]
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	47b0      	blx	r6
    20ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    20ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20ee:	0006      	movs	r6, r0
    20f0:	000f      	movs	r7, r1
    20f2:	9808      	ldr	r0, [sp, #32]
    20f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    20f6:	47a8      	blx	r5
    20f8:	4c0a      	ldr	r4, [pc, #40]	; (2124 <STACK_SIZE+0x124>)
    20fa:	0002      	movs	r2, r0
    20fc:	000b      	movs	r3, r1
    20fe:	0030      	movs	r0, r6
    2100:	0039      	movs	r1, r7
    2102:	47a0      	blx	r4
    2104:	4b05      	ldr	r3, [pc, #20]	; (211c <STACK_SIZE+0x11c>)
    2106:	6018      	str	r0, [r3, #0]
    2108:	6059      	str	r1, [r3, #4]
}
    210a:	b00f      	add	sp, #60	; 0x3c
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	200006b0 	.word	0x200006b0
    2114:	000053e9 	.word	0x000053e9
    2118:	200006a8 	.word	0x200006a8
    211c:	200006a0 	.word	0x200006a0
    2120:	20000010 	.word	0x20000010
    2124:	00004549 	.word	0x00004549
    2128:	200006b8 	.word	0x200006b8
    212c:	20000650 	.word	0x20000650

00002130 <computeKalmanStates>:

void computeKalmanStates() {
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    2132:	4b20      	ldr	r3, [pc, #128]	; (21b4 <computeKalmanStates+0x84>)
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
}

void computeKalmanStates() {
    2134:	b085      	sub	sp, #20

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    2136:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    2138:	4a1f      	ldr	r2, [pc, #124]	; (21b8 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    213a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    213e:	9300      	str	r3, [sp, #0]
    2140:	9401      	str	r4, [sp, #4]

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    2142:	6891      	ldr	r1, [r2, #8]
    2144:	68d2      	ldr	r2, [r2, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2146:	4c1d      	ldr	r4, [pc, #116]	; (21bc <computeKalmanStates+0x8c>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    2148:	9102      	str	r1, [sp, #8]
    214a:	9203      	str	r2, [sp, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    214c:	6820      	ldr	r0, [r4, #0]
    214e:	6861      	ldr	r1, [r4, #4]
    2150:	2200      	movs	r2, #0
    2152:	2300      	movs	r3, #0
    2154:	4d1a      	ldr	r5, [pc, #104]	; (21c0 <computeKalmanStates+0x90>)
    2156:	47a8      	blx	r5
    2158:	2800      	cmp	r0, #0
    215a:	d003      	beq.n	2164 <computeKalmanStates+0x34>
        altitude = pressure;
    215c:	9a00      	ldr	r2, [sp, #0]
    215e:	9b01      	ldr	r3, [sp, #4]
    2160:	6022      	str	r2, [r4, #0]
    2162:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2164:	9800      	ldr	r0, [sp, #0]
    2166:	9901      	ldr	r1, [sp, #4]
    2168:	4e16      	ldr	r6, [pc, #88]	; (21c4 <computeKalmanStates+0x94>)
    216a:	4c17      	ldr	r4, [pc, #92]	; (21c8 <computeKalmanStates+0x98>)
    216c:	6832      	ldr	r2, [r6, #0]
    216e:	6873      	ldr	r3, [r6, #4]
    2170:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    2172:	4b16      	ldr	r3, [pc, #88]	; (21cc <computeKalmanStates+0x9c>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2174:	0004      	movs	r4, r0
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    2176:	781b      	ldrb	r3, [r3, #0]
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2178:	000d      	movs	r5, r1
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    217a:	2b05      	cmp	r3, #5
    217c:	d815      	bhi.n	21aa <computeKalmanStates+0x7a>
        KalmanBothUpdate(alt_inovation,accel_inovation);
    217e:	1c38      	adds	r0, r7, #0
    2180:	4b13      	ldr	r3, [pc, #76]	; (21d0 <computeKalmanStates+0xa0>)
    2182:	4798      	blx	r3
    2184:	9a02      	ldr	r2, [sp, #8]
    2186:	9b03      	ldr	r3, [sp, #12]
    2188:	4f0f      	ldr	r7, [pc, #60]	; (21c8 <computeKalmanStates+0x98>)
    218a:	47b8      	blx	r7
    218c:	4a11      	ldr	r2, [pc, #68]	; (21d4 <computeKalmanStates+0xa4>)
    218e:	4b12      	ldr	r3, [pc, #72]	; (21d8 <computeKalmanStates+0xa8>)
    2190:	4f12      	ldr	r7, [pc, #72]	; (21dc <computeKalmanStates+0xac>)
    2192:	47b8      	blx	r7
    2194:	6932      	ldr	r2, [r6, #16]
    2196:	6973      	ldr	r3, [r6, #20]
    2198:	4e0b      	ldr	r6, [pc, #44]	; (21c8 <computeKalmanStates+0x98>)
    219a:	47b0      	blx	r6
    219c:	0002      	movs	r2, r0
    219e:	000b      	movs	r3, r1
    21a0:	0020      	movs	r0, r4
    21a2:	0029      	movs	r1, r5
    21a4:	4c0e      	ldr	r4, [pc, #56]	; (21e0 <computeKalmanStates+0xb0>)
    21a6:	47a0      	blx	r4
    21a8:	e001      	b.n	21ae <computeKalmanStates+0x7e>
    } else {
        KalmanBaroUpdate(alt_inovation);
    21aa:	4b0e      	ldr	r3, [pc, #56]	; (21e4 <computeKalmanStates+0xb4>)
    21ac:	4798      	blx	r3
    }
}
    21ae:	b005      	add	sp, #20
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	20000908 	.word	0x20000908
    21b8:	200004d8 	.word	0x200004d8
    21bc:	200006b0 	.word	0x200006b0
    21c0:	000041ed 	.word	0x000041ed
    21c4:	200006b8 	.word	0x200006b8
    21c8:	000058dd 	.word	0x000058dd
    21cc:	2000053c 	.word	0x2000053c
    21d0:	00006125 	.word	0x00006125
    21d4:	33daf8df 	.word	0x33daf8df
    21d8:	4040164b 	.word	0x4040164b
    21dc:	000053e9 	.word	0x000053e9
    21e0:	00001f65 	.word	0x00001f65
    21e4:	00001e45 	.word	0x00001e45

000021e8 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    21ea:	4a1f      	ldr	r2, [pc, #124]	; (2268 <makePage+0x80>)
    21ec:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    21ee:	1943      	adds	r3, r0, r5
    21f0:	2bff      	cmp	r3, #255	; 0xff
    21f2:	dc03      	bgt.n	21fc <makePage+0x14>
    21f4:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21f6:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    21f8:	4c1c      	ldr	r4, [pc, #112]	; (226c <makePage+0x84>)
    21fa:	e029      	b.n	2250 <makePage+0x68>
    21fc:	2300      	movs	r3, #0
    21fe:	4e1b      	ldr	r6, [pc, #108]	; (226c <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2200:	195f      	adds	r7, r3, r5
    2202:	b2dc      	uxtb	r4, r3
    2204:	46b4      	mov	ip, r6
    2206:	2fff      	cmp	r7, #255	; 0xff
    2208:	dc04      	bgt.n	2214 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    220a:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    220c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    220e:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2210:	b29b      	uxth	r3, r3
    2212:	e7f5      	b.n	2200 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2214:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2216:	4f16      	ldr	r7, [pc, #88]	; (2270 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2218:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    221a:	4665      	mov	r5, ip
    221c:	18ed      	adds	r5, r5, r3
    221e:	782e      	ldrb	r6, [r5, #0]
    2220:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2222:	2600      	movs	r6, #0
    2224:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2226:	2580      	movs	r5, #128	; 0x80
    2228:	3301      	adds	r3, #1
    222a:	006d      	lsls	r5, r5, #1
    222c:	42ab      	cmp	r3, r5
    222e:	d1f4      	bne.n	221a <makePage+0x32>
    2230:	2300      	movs	r3, #0
    2232:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2234:	4284      	cmp	r4, r0
    2236:	d207      	bcs.n	2248 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2238:	4667      	mov	r7, ip
    223a:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    223c:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    223e:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2240:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2242:	7015      	strb	r5, [r2, #0]
    2244:	002b      	movs	r3, r5
    2246:	e7f4      	b.n	2232 <makePage+0x4a>
        }
        pageReady = true;
    2248:	2201      	movs	r2, #1
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <makePage+0x8c>)
    224c:	701a      	strb	r2, [r3, #0]
    224e:	e009      	b.n	2264 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2250:	4283      	cmp	r3, r0
    2252:	d807      	bhi.n	2264 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2254:	5ccf      	ldrb	r7, [r1, r3]
    2256:	18e6      	adds	r6, r4, r3
    2258:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    225a:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    225c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    225e:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2260:	b29b      	uxth	r3, r3
    2262:	e7f5      	b.n	2250 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	20000904 	.word	0x20000904
    226c:	2000053e 	.word	0x2000053e
    2270:	200006d2 	.word	0x200006d2
    2274:	200007d2 	.word	0x200007d2

00002278 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2278:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    227a:	2706      	movs	r7, #6
    227c:	2300      	movs	r3, #0
    227e:	4c0d      	ldr	r4, [pc, #52]	; (22b4 <writePadBuffer+0x3c>)
    2280:	37ff      	adds	r7, #255	; 0xff
    2282:	18c5      	adds	r5, r0, r3
    2284:	191a      	adds	r2, r3, r4
    2286:	192d      	adds	r5, r5, r4
        for (j = 0; j < bytesToWrite; j++) {
    2288:	42aa      	cmp	r2, r5
    228a:	d003      	beq.n	2294 <writePadBuffer+0x1c>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    228c:	7f56      	ldrb	r6, [r2, #29]
    228e:	7016      	strb	r6, [r2, #0]
    2290:	3201      	adds	r2, #1
    2292:	e7f9      	b.n	2288 <writePadBuffer+0x10>
    2294:	331d      	adds	r3, #29
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2296:	42bb      	cmp	r3, r7
    2298:	d1f3      	bne.n	2282 <writePadBuffer+0xa>
    229a:	2300      	movs	r3, #0
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    229c:	b2da      	uxtb	r2, r3
    229e:	4290      	cmp	r0, r2
    22a0:	d906      	bls.n	22b0 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    22a2:	5ccc      	ldrb	r4, [r1, r3]
    22a4:	1d9a      	adds	r2, r3, #6
    22a6:	4d03      	ldr	r5, [pc, #12]	; (22b4 <writePadBuffer+0x3c>)
    22a8:	32ff      	adds	r2, #255	; 0xff
    22aa:	54ac      	strb	r4, [r5, r2]
    22ac:	3301      	adds	r3, #1
    22ae:	e7f5      	b.n	229c <writePadBuffer+0x24>
    }
}
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	200007dc 	.word	0x200007dc

000022b8 <logFlight>:


void logFlight() {
    22b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    22ba:	2346      	movs	r3, #70	; 0x46
    22bc:	466a      	mov	r2, sp
    22be:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    22c0:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    22c2:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    22c4:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    22c6:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    22c8:	4a10      	ldr	r2, [pc, #64]	; (230c <logFlight+0x54>)
    22ca:	6813      	ldr	r3, [r2, #0]
    22cc:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    22ce:	0a19      	lsrs	r1, r3, #8
    22d0:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    22d2:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    22d4:	0e1b      	lsrs	r3, r3, #24
    22d6:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    22d8:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    22da:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    22dc:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    22de:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    22e0:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    22e2:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    22e4:	0e1b      	lsrs	r3, r3, #24
    22e6:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    22e8:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    22ea:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    22ec:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    22ee:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    22f0:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    22f2:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    22f4:	0e1b      	lsrs	r3, r3, #24
    22f6:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22f8:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    22fa:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22fc:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    22fe:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2300:	2010      	movs	r0, #16
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <logFlight+0x58>)
    2304:	4798      	blx	r3
}
    2306:	b005      	add	sp, #20
    2308:	bd00      	pop	{pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	200004d8 	.word	0x200004d8
    2310:	000021e9 	.word	0x000021e9

00002314 <logEvent>:

void logEvent(u8_t eventType) {
    2314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2316:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2318:	4d10      	ldr	r5, [pc, #64]	; (235c <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    231a:	ac01      	add	r4, sp, #4
    231c:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    231e:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2320:	4e0f      	ldr	r6, [pc, #60]	; (2360 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    2322:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2324:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    2326:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    2328:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    232a:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    232c:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    232e:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2330:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2332:	47b0      	blx	r6
    2334:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2336:	47b0      	blx	r6
    2338:	1200      	asrs	r0, r0, #8
    233a:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    233c:	47b0      	blx	r6
    233e:	1400      	asrs	r0, r0, #16
    2340:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2342:	47b0      	blx	r6
    2344:	1600      	asrs	r0, r0, #24
    2346:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2348:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    234a:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    234c:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    234e:	0a1b      	lsrs	r3, r3, #8
    2350:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2352:	200c      	movs	r0, #12
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <logEvent+0x50>)
    2356:	4798      	blx	r3

}
    2358:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	20000908 	.word	0x20000908
    2360:	00000afd 	.word	0x00000afd
    2364:	000021e9 	.word	0x000021e9

00002368 <logSensors>:

void logSensors() {

    writeLog = false;
    2368:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    236a:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    236c:	4b59      	ldr	r3, [pc, #356]	; (24d4 <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    236e:	b08d      	sub	sp, #52	; 0x34

    writeLog = false;
    2370:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2372:	4b59      	ldr	r3, [pc, #356]	; (24d8 <logSensors+0x170>)
    2374:	681e      	ldr	r6, [r3, #0]
    2376:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2378:	4b58      	ldr	r3, [pc, #352]	; (24dc <logSensors+0x174>)
    237a:	0039      	movs	r1, r7
    237c:	0030      	movs	r0, r6
    237e:	4798      	blx	r3
    2380:	4c57      	ldr	r4, [pc, #348]	; (24e0 <logSensors+0x178>)
    2382:	b200      	sxth	r0, r0
    2384:	47a0      	blx	r4
    2386:	4d57      	ldr	r5, [pc, #348]	; (24e4 <logSensors+0x17c>)
    2388:	0002      	movs	r2, r0
    238a:	000b      	movs	r3, r1
    238c:	0030      	movs	r0, r6
    238e:	0039      	movs	r1, r7
    2390:	47a8      	blx	r5
    2392:	4e55      	ldr	r6, [pc, #340]	; (24e8 <logSensors+0x180>)
    2394:	47b0      	blx	r6
    2396:	4955      	ldr	r1, [pc, #340]	; (24ec <logSensors+0x184>)
    2398:	4b55      	ldr	r3, [pc, #340]	; (24f0 <logSensors+0x188>)
    239a:	4798      	blx	r3
    239c:	4b55      	ldr	r3, [pc, #340]	; (24f4 <logSensors+0x18c>)
    239e:	4798      	blx	r3

    float fractionalVelocity = velocity - (int16_t)(velocity);
    23a0:	4f55      	ldr	r7, [pc, #340]	; (24f8 <logSensors+0x190>)

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;
    23a2:	b203      	sxth	r3, r0
    23a4:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    23a6:	683a      	ldr	r2, [r7, #0]
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	9202      	str	r2, [sp, #8]
    23ac:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23ae:	0010      	movs	r0, r2
    23b0:	0019      	movs	r1, r3
    23b2:	4b4a      	ldr	r3, [pc, #296]	; (24dc <logSensors+0x174>)
    23b4:	4798      	blx	r3
    23b6:	b200      	sxth	r0, r0
    23b8:	47a0      	blx	r4
    23ba:	0002      	movs	r2, r0
    23bc:	000b      	movs	r3, r1
    23be:	9802      	ldr	r0, [sp, #8]
    23c0:	9903      	ldr	r1, [sp, #12]
    23c2:	47a8      	blx	r5
    23c4:	47b0      	blx	r6
    23c6:	4949      	ldr	r1, [pc, #292]	; (24ec <logSensors+0x184>)
    23c8:	4b49      	ldr	r3, [pc, #292]	; (24f0 <logSensors+0x188>)
    23ca:	4798      	blx	r3
    23cc:	4b49      	ldr	r3, [pc, #292]	; (24f4 <logSensors+0x18c>)
    23ce:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    23d0:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    23d2:	4c4a      	ldr	r4, [pc, #296]	; (24fc <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    23d4:	aa04      	add	r2, sp, #16
    23d6:	7013      	strb	r3, [r2, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    23d8:	6863      	ldr	r3, [r4, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    23da:	a904      	add	r1, sp, #16
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    23dc:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    23de:	0a1a      	lsrs	r2, r3, #8
    23e0:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    23e2:	0c1a      	lsrs	r2, r3, #16
    23e4:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    23e6:	0e1b      	lsrs	r3, r3, #24

    dataToSend[5] = altitudeAGL() >> 0;
    23e8:	4e45      	ldr	r6, [pc, #276]	; (2500 <logSensors+0x198>)
    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;
    23ea:	710b      	strb	r3, [r1, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23ec:	b205      	sxth	r5, r0
    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    23ee:	47b0      	blx	r6
    23f0:	ab04      	add	r3, sp, #16
    23f2:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    23f4:	47b0      	blx	r6
    23f6:	ab04      	add	r3, sp, #16
    23f8:	1200      	asrs	r0, r0, #8
    23fa:	7198      	strb	r0, [r3, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    23fc:	47b0      	blx	r6
    23fe:	ab04      	add	r3, sp, #16
    2400:	1400      	asrs	r0, r0, #16
    2402:	71d8      	strb	r0, [r3, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2404:	47b0      	blx	r6
    2406:	ab04      	add	r3, sp, #16
    2408:	1600      	asrs	r0, r0, #24
    240a:	7218      	strb	r0, [r3, #8]



    dataToSend[9] = (int16_t)(accel) >> 0;
    240c:	4b32      	ldr	r3, [pc, #200]	; (24d8 <logSensors+0x170>)
    240e:	6818      	ldr	r0, [r3, #0]
    2410:	6859      	ldr	r1, [r3, #4]
    2412:	4b32      	ldr	r3, [pc, #200]	; (24dc <logSensors+0x174>)
    2414:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2416:	466a      	mov	r2, sp
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    2418:	ab04      	add	r3, sp, #16
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    241a:	7912      	ldrb	r2, [r2, #4]
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    241c:	b200      	sxth	r0, r0
    241e:	7258      	strb	r0, [r3, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2420:	1200      	asrs	r0, r0, #8
    dataToSend[11] = fractAccelPart >> 0;
    2422:	72da      	strb	r2, [r3, #11]
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    2424:	7298      	strb	r0, [r3, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2426:	9b01      	ldr	r3, [sp, #4]
    2428:	1218      	asrs	r0, r3, #8
    242a:	ab04      	add	r3, sp, #16
    242c:	7318      	strb	r0, [r3, #12]


    dataToSend[13] = (int16_t)(velocity) >> 0;
    242e:	4b2b      	ldr	r3, [pc, #172]	; (24dc <logSensors+0x174>)
    2430:	6838      	ldr	r0, [r7, #0]
    2432:	6879      	ldr	r1, [r7, #4]
    2434:	4798      	blx	r3
    2436:	ab04      	add	r3, sp, #16
    2438:	b200      	sxth	r0, r0
    243a:	7358      	strb	r0, [r3, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    243c:	73dd      	strb	r5, [r3, #15]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    243e:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2440:	122d      	asrs	r5, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2442:	7398      	strb	r0, [r3, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2444:	741d      	strb	r5, [r3, #16]

    dataToSend[17] = sample.accelXint >> 0;
    2446:	2220      	movs	r2, #32
    2448:	5ea3      	ldrsh	r3, [r4, r2]
    244a:	aa04      	add	r2, sp, #16
    244c:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = sample.accelXint >> 8;
    244e:	121b      	asrs	r3, r3, #8
    2450:	7493      	strb	r3, [r2, #18]

    dataToSend[19] = sample.accelYint >> 0;
    2452:	2228      	movs	r2, #40	; 0x28
    2454:	5ea3      	ldrsh	r3, [r4, r2]
    2456:	aa04      	add	r2, sp, #16
    2458:	74d3      	strb	r3, [r2, #19]
    dataToSend[20] = sample.accelYint >> 8;
    245a:	121b      	asrs	r3, r3, #8
    245c:	7513      	strb	r3, [r2, #20]

    dataToSend[21] = sample.gyroXint >> 0;
    245e:	2238      	movs	r2, #56	; 0x38
    2460:	5ea3      	ldrsh	r3, [r4, r2]
    2462:	aa04      	add	r2, sp, #16
    2464:	7553      	strb	r3, [r2, #21]
    dataToSend[22] = sample.gyroXint >> 8;
    2466:	121b      	asrs	r3, r3, #8
    2468:	7593      	strb	r3, [r2, #22]

    dataToSend[23] = sample.gyroYint >> 0;
    246a:	1ca3      	adds	r3, r4, #2
    246c:	223e      	movs	r2, #62	; 0x3e
    246e:	5e9b      	ldrsh	r3, [r3, r2]
    2470:	aa04      	add	r2, sp, #16
    2472:	75d3      	strb	r3, [r2, #23]
    dataToSend[24] = sample.gyroYint >> 8;
    2474:	121b      	asrs	r3, r3, #8
    2476:	7613      	strb	r3, [r2, #24]

    dataToSend[25] = sample.gyroZint >> 0;
    2478:	0023      	movs	r3, r4
    247a:	3348      	adds	r3, #72	; 0x48
    247c:	2200      	movs	r2, #0
    247e:	5e9b      	ldrsh	r3, [r3, r2]
    2480:	aa04      	add	r2, sp, #16
    2482:	7653      	strb	r3, [r2, #25]
    dataToSend[26] = sample.gyroZint >> 8;
    2484:	121b      	asrs	r3, r3, #8
    2486:	7693      	strb	r3, [r2, #26]

    dataToSend[27] = sample.analogRaw >> 0;
    2488:	8b23      	ldrh	r3, [r4, #24]
    248a:	76d3      	strb	r3, [r2, #27]
    dataToSend[28] = sample.analogRaw >> 8;
    248c:	0a1b      	lsrs	r3, r3, #8
    248e:	7713      	strb	r3, [r2, #28]


    if (flightState == flightPad) {
    2490:	4b1c      	ldr	r3, [pc, #112]	; (2504 <logSensors+0x19c>)
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	2b02      	cmp	r3, #2
    2496:	d104      	bne.n	24a2 <logSensors+0x13a>
        writePadBuffer(bytesToSend, dataToSend);
    2498:	0011      	movs	r1, r2
    249a:	201d      	movs	r0, #29
    249c:	4b1a      	ldr	r3, [pc, #104]	; (2508 <logSensors+0x1a0>)
    249e:	4798      	blx	r3
    24a0:	e016      	b.n	24d0 <logSensors+0x168>

    } else {

        makePage(bytesToSend, dataToSend);
    24a2:	4b1a      	ldr	r3, [pc, #104]	; (250c <logSensors+0x1a4>)
    24a4:	a904      	add	r1, sp, #16
    24a6:	201d      	movs	r0, #29
    24a8:	4798      	blx	r3

        if (pageReady) {
    24aa:	4b19      	ldr	r3, [pc, #100]	; (2510 <logSensors+0x1a8>)
    24ac:	781a      	ldrb	r2, [r3, #0]
    24ae:	2a00      	cmp	r2, #0
    24b0:	d00e      	beq.n	24d0 <logSensors+0x168>
            pageReady = false;
    24b2:	2200      	movs	r2, #0
    24b4:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    24b6:	2280      	movs	r2, #128	; 0x80
    24b8:	4b16      	ldr	r3, [pc, #88]	; (2514 <logSensors+0x1ac>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    24ba:	4c17      	ldr	r4, [pc, #92]	; (2518 <logSensors+0x1b0>)
    24bc:	0352      	lsls	r2, r2, #13
    24be:	61da      	str	r2, [r3, #28]
    24c0:	4916      	ldr	r1, [pc, #88]	; (251c <logSensors+0x1b4>)
    24c2:	4b17      	ldr	r3, [pc, #92]	; (2520 <logSensors+0x1b8>)
    24c4:	6820      	ldr	r0, [r4, #0]
    24c6:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    24c8:	6823      	ldr	r3, [r4, #0]
    24ca:	3301      	adds	r3, #1
    24cc:	33ff      	adds	r3, #255	; 0xff
    24ce:	6023      	str	r3, [r4, #0]
        }
    }
}
    24d0:	b00d      	add	sp, #52	; 0x34
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d4:	2000052a 	.word	0x2000052a
    24d8:	200006a0 	.word	0x200006a0
    24dc:	00005fc5 	.word	0x00005fc5
    24e0:	00006031 	.word	0x00006031
    24e4:	000058dd 	.word	0x000058dd
    24e8:	000061cd 	.word	0x000061cd
    24ec:	447a0000 	.word	0x447a0000
    24f0:	000042dd 	.word	0x000042dd
    24f4:	00004505 	.word	0x00004505
    24f8:	200006a8 	.word	0x200006a8
    24fc:	20000908 	.word	0x20000908
    2500:	00000afd 	.word	0x00000afd
    2504:	2000053c 	.word	0x2000053c
    2508:	00002279 	.word	0x00002279
    250c:	000021e9 	.word	0x000021e9
    2510:	200007d2 	.word	0x200007d2
    2514:	41004400 	.word	0x41004400
    2518:	200007d8 	.word	0x200007d8
    251c:	200006d2 	.word	0x200006d2
    2520:	000002a5 	.word	0x000002a5

00002524 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2524:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2526:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2528:	4358      	muls	r0, r3
    252a:	ac01      	add	r4, sp, #4
    252c:	3001      	adds	r0, #1
    252e:	30ff      	adds	r0, #255	; 0xff
    2530:	0022      	movs	r2, r4
    2532:	2103      	movs	r1, #3
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <getFlightStartAddress+0x24>)
    2536:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2538:	7860      	ldrb	r0, [r4, #1]
    253a:	78a3      	ldrb	r3, [r4, #2]
    253c:	0200      	lsls	r0, r0, #8
    253e:	041b      	lsls	r3, r3, #16
    2540:	4318      	orrs	r0, r3
    2542:	7823      	ldrb	r3, [r4, #0]
    2544:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2546:	bd16      	pop	{r1, r2, r4, pc}
    2548:	00000301 	.word	0x00000301

0000254c <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    254c:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    254e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2550:	4358      	muls	r0, r3
    2552:	ac01      	add	r4, sp, #4
    2554:	3004      	adds	r0, #4
    2556:	30ff      	adds	r0, #255	; 0xff
    2558:	0022      	movs	r2, r4
    255a:	2103      	movs	r1, #3
    255c:	4b04      	ldr	r3, [pc, #16]	; (2570 <FindFlightEndingAddress+0x24>)
    255e:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2560:	7860      	ldrb	r0, [r4, #1]
    2562:	78a3      	ldrb	r3, [r4, #2]
    2564:	0200      	lsls	r0, r0, #8
    2566:	041b      	lsls	r3, r3, #16
    2568:	4318      	orrs	r0, r3
    256a:	7823      	ldrb	r3, [r4, #0]
    256c:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    256e:	bd16      	pop	{r1, r2, r4, pc}
    2570:	00000301 	.word	0x00000301

00002574 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2574:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2576:	4b04      	ldr	r3, [pc, #16]	; (2588 <isFlightLogged+0x14>)
    2578:	4798      	blx	r3
    257a:	4b04      	ldr	r3, [pc, #16]	; (258c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    257c:	18c0      	adds	r0, r0, r3
    257e:	1e43      	subs	r3, r0, #1
    2580:	4198      	sbcs	r0, r3
    2582:	b2c0      	uxtb	r0, r0
    2584:	bd10      	pop	{r4, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	00002525 	.word	0x00002525
    258c:	ff000001 	.word	0xff000001

00002590 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    2590:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    2592:	4b03      	ldr	r3, [pc, #12]	; (25a0 <writeFlightStartAddress+0x10>)
    2594:	4a03      	ldr	r2, [pc, #12]	; (25a4 <writeFlightStartAddress+0x14>)
    2596:	8818      	ldrh	r0, [r3, #0]
    2598:	2103      	movs	r1, #3
    259a:	4b03      	ldr	r3, [pc, #12]	; (25a8 <writeFlightStartAddress+0x18>)
    259c:	4798      	blx	r3
}
    259e:	bd10      	pop	{r4, pc}
    25a0:	200006d0 	.word	0x200006d0
    25a4:	200007d3 	.word	0x200007d3
    25a8:	00000241 	.word	0x00000241

000025ac <writeFlightEndAddress>:


void writeFlightEndAddress() {
    25ac:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    25ae:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    25b0:	4b09      	ldr	r3, [pc, #36]	; (25d8 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25b2:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    25b4:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25b6:	7013      	strb	r3, [r2, #0]
    25b8:	0a19      	lsrs	r1, r3, #8
    25ba:	0c1b      	lsrs	r3, r3, #16
    25bc:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    25be:	4b07      	ldr	r3, [pc, #28]	; (25dc <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25c0:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	2103      	movs	r1, #3
    25c6:	4358      	muls	r0, r3
    25c8:	3004      	adds	r0, #4
    25ca:	30ff      	adds	r0, #255	; 0xff
    25cc:	4b04      	ldr	r3, [pc, #16]	; (25e0 <writeFlightEndAddress+0x34>)
    25ce:	4798      	blx	r3
    delay_ms(10);
    25d0:	200a      	movs	r0, #10
    25d2:	4b04      	ldr	r3, [pc, #16]	; (25e4 <writeFlightEndAddress+0x38>)
    25d4:	4798      	blx	r3
}
    25d6:	bd07      	pop	{r0, r1, r2, pc}
    25d8:	200007d8 	.word	0x200007d8
    25dc:	2000052b 	.word	0x2000052b
    25e0:	00000241 	.word	0x00000241
    25e4:	00000f01 	.word	0x00000f01

000025e8 <writeGroundLog>:

void writeGroundLog() {
    25e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ea:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    25ec:	2691      	movs	r6, #145	; 0x91
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    25ee:	2400      	movs	r4, #0
    25f0:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    25f2:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    25f4:	490c      	ldr	r1, [pc, #48]	; (2628 <writeGroundLog+0x40>)
    25f6:	4b0d      	ldr	r3, [pc, #52]	; (262c <writeGroundLog+0x44>)
    25f8:	1861      	adds	r1, r4, r1
    25fa:	201d      	movs	r0, #29
    25fc:	4798      	blx	r3

        if (pageReady) {
    25fe:	4b0c      	ldr	r3, [pc, #48]	; (2630 <writeGroundLog+0x48>)
    2600:	781a      	ldrb	r2, [r3, #0]
    2602:	2a00      	cmp	r2, #0
    2604:	d00c      	beq.n	2620 <writeGroundLog+0x38>
            pageReady = false;
    2606:	2200      	movs	r2, #0
    2608:	701a      	strb	r2, [r3, #0]
    260a:	4b0a      	ldr	r3, [pc, #40]	; (2634 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    260c:	4d0a      	ldr	r5, [pc, #40]	; (2638 <writeGroundLog+0x50>)
    260e:	61df      	str	r7, [r3, #28]
    2610:	490a      	ldr	r1, [pc, #40]	; (263c <writeGroundLog+0x54>)
    2612:	4b0b      	ldr	r3, [pc, #44]	; (2640 <writeGroundLog+0x58>)
    2614:	6828      	ldr	r0, [r5, #0]
    2616:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    2618:	682b      	ldr	r3, [r5, #0]
    261a:	3301      	adds	r3, #1
    261c:	33ff      	adds	r3, #255	; 0xff
    261e:	602b      	str	r3, [r5, #0]
    2620:	341d      	adds	r4, #29
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    2622:	42b4      	cmp	r4, r6
    2624:	d1e6      	bne.n	25f4 <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    2626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2628:	200007dc 	.word	0x200007dc
    262c:	000021e9 	.word	0x000021e9
    2630:	200007d2 	.word	0x200007d2
    2634:	41004400 	.word	0x41004400
    2638:	200007d8 	.word	0x200007d8
    263c:	200006d2 	.word	0x200006d2
    2640:	000002a5 	.word	0x000002a5

00002644 <findNewFlightStart>:


void findNewFlightStart() {
    2644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2646:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2648:	0020      	movs	r0, r4
    264a:	4b21      	ldr	r3, [pc, #132]	; (26d0 <findNewFlightStart+0x8c>)
    264c:	4798      	blx	r3
    264e:	2800      	cmp	r0, #0
    2650:	d138      	bne.n	26c4 <findNewFlightStart+0x80>
    2652:	4f20      	ldr	r7, [pc, #128]	; (26d4 <findNewFlightStart+0x90>)
    2654:	4d20      	ldr	r5, [pc, #128]	; (26d8 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    2656:	2c00      	cmp	r4, #0
    2658:	d014      	beq.n	2684 <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    265a:	1e60      	subs	r0, r4, #1
    265c:	4b1f      	ldr	r3, [pc, #124]	; (26dc <findNewFlightStart+0x98>)
    265e:	b2c0      	uxtb	r0, r0
    2660:	4798      	blx	r3
    2662:	0006      	movs	r6, r0
                delay_ms(5);
    2664:	4b1e      	ldr	r3, [pc, #120]	; (26e0 <findNewFlightStart+0x9c>)
    2666:	2005      	movs	r0, #5
    2668:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    266a:	0a33      	lsrs	r3, r6, #8
    266c:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    266e:	2306      	movs	r3, #6
    2670:	4363      	muls	r3, r4
    2672:	4a1c      	ldr	r2, [pc, #112]	; (26e4 <findNewFlightStart+0xa0>)
    2674:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    2676:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    2678:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    267a:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    267c:	0c36      	lsrs	r6, r6, #16
    267e:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2680:	8013      	strh	r3, [r2, #0]
    2682:	e00d      	b.n	26a0 <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    2684:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    2686:	4a17      	ldr	r2, [pc, #92]	; (26e4 <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    2688:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    268a:	33f0      	adds	r3, #240	; 0xf0
    268c:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    268e:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    2690:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    2692:	015b      	lsls	r3, r3, #5
    2694:	603b      	str	r3, [r7, #0]
                beep(1000);
    2696:	0080      	lsls	r0, r0, #2
    2698:	4b13      	ldr	r3, [pc, #76]	; (26e8 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    269a:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    269c:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    269e:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    26a0:	4b12      	ldr	r3, [pc, #72]	; (26ec <findNewFlightStart+0xa8>)
    26a2:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    26a4:	20fa      	movs	r0, #250	; 0xfa
    26a6:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    26a8:	2c00      	cmp	r4, #0
    26aa:	d008      	beq.n	26be <findNewFlightStart+0x7a>
                beep(500);
    26ac:	4b0e      	ldr	r3, [pc, #56]	; (26e8 <findNewFlightStart+0xa4>)
    26ae:	4798      	blx	r3
                delay_ms(500);
    26b0:	20fa      	movs	r0, #250	; 0xfa
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <findNewFlightStart+0x9c>)
    26b4:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    26b6:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    26b8:	4798      	blx	r3
                --flightNumbToCheck;
    26ba:	b2e4      	uxtb	r4, r4
    26bc:	e7f2      	b.n	26a4 <findNewFlightStart+0x60>
            }
            delay_ms(500);
    26be:	4b08      	ldr	r3, [pc, #32]	; (26e0 <findNewFlightStart+0x9c>)
    26c0:	4798      	blx	r3
            break;
    26c2:	e003      	b.n	26cc <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    26c4:	3401      	adds	r4, #1
    26c6:	b2e4      	uxtb	r4, r4
    26c8:	2c14      	cmp	r4, #20
    26ca:	d1bd      	bne.n	2648 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    26cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	00002575 	.word	0x00002575
    26d4:	200007d8 	.word	0x200007d8
    26d8:	200007d3 	.word	0x200007d3
    26dc:	0000254d 	.word	0x0000254d
    26e0:	00000f01 	.word	0x00000f01
    26e4:	200006d0 	.word	0x200006d0
    26e8:	00000c71 	.word	0x00000c71
    26ec:	2000052b 	.word	0x2000052b

000026f0 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    26f0:	4b01      	ldr	r3, [pc, #4]	; (26f8 <takeSample+0x8>)
    26f2:	7818      	ldrb	r0, [r3, #0]
}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	2000053d 	.word	0x2000053d

000026fc <pullSample>:

void pullSample() {
    SampleBool = true;
    26fc:	2201      	movs	r2, #1
    26fe:	4b01      	ldr	r3, [pc, #4]	; (2704 <pullSample+0x8>)
    2700:	701a      	strb	r2, [r3, #0]
}
    2702:	4770      	bx	lr
    2704:	2000053d 	.word	0x2000053d

00002708 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    270a:	2600      	movs	r6, #0
    270c:	4bb1      	ldr	r3, [pc, #708]	; (29d4 <sampleTick+0x2cc>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    270e:	4cb2      	ldr	r4, [pc, #712]	; (29d8 <sampleTick+0x2d0>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2710:	b085      	sub	sp, #20
    SampleBool = false;
    2712:	701e      	strb	r6, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    2714:	4bb1      	ldr	r3, [pc, #708]	; (29dc <sampleTick+0x2d4>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    2716:	6865      	ldr	r5, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    2718:	4798      	blx	r3
    271a:	4bb1      	ldr	r3, [pc, #708]	; (29e0 <sampleTick+0x2d8>)
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	1ac0      	subs	r0, r0, r3
    2720:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    2722:	1b40      	subs	r0, r0, r5

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2724:	4daf      	ldr	r5, [pc, #700]	; (29e4 <sampleTick+0x2dc>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;
    2726:	8020      	strh	r0, [r4, #0]

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2728:	786b      	ldrb	r3, [r5, #1]
    272a:	7829      	ldrb	r1, [r5, #0]
    272c:	78a8      	ldrb	r0, [r5, #2]
    272e:	021b      	lsls	r3, r3, #8
    2730:	430b      	orrs	r3, r1
    2732:	0400      	lsls	r0, r0, #16
    2734:	001a      	movs	r2, r3
    2736:	0003      	movs	r3, r0
    2738:	78e8      	ldrb	r0, [r5, #3]
    273a:	4313      	orrs	r3, r2
    273c:	0600      	lsls	r0, r0, #24
    273e:	7929      	ldrb	r1, [r5, #4]
    2740:	4318      	orrs	r0, r3
    2742:	4ba9      	ldr	r3, [pc, #676]	; (29e8 <sampleTick+0x2e0>)
    2744:	4798      	blx	r3

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2746:	4ba9      	ldr	r3, [pc, #676]	; (29ec <sampleTick+0x2e4>)

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2748:	8120      	strh	r0, [r4, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    274a:	4798      	blx	r3
    274c:	4aa8      	ldr	r2, [pc, #672]	; (29f0 <sampleTick+0x2e8>)
    274e:	4fa9      	ldr	r7, [pc, #676]	; (29f4 <sampleTick+0x2ec>)
    2750:	4ba9      	ldr	r3, [pc, #676]	; (29f8 <sampleTick+0x2f0>)
    2752:	47b8      	blx	r7
    2754:	4ba9      	ldr	r3, [pc, #676]	; (29fc <sampleTick+0x2f4>)
    2756:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2758:	79ab      	ldrb	r3, [r5, #6]
    275a:	7969      	ldrb	r1, [r5, #5]



    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    275c:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    275e:	79e8      	ldrb	r0, [r5, #7]
    2760:	021b      	lsls	r3, r3, #8
    2762:	430b      	orrs	r3, r1
    2764:	0400      	lsls	r0, r0, #16
    2766:	001a      	movs	r2, r3
    2768:	0003      	movs	r3, r0
    276a:	7a28      	ldrb	r0, [r5, #8]
    276c:	4313      	orrs	r3, r2
    276e:	0600      	lsls	r0, r0, #24
    2770:	7a69      	ldrb	r1, [r5, #9]
    2772:	4318      	orrs	r0, r3
    2774:	4b9c      	ldr	r3, [pc, #624]	; (29e8 <sampleTick+0x2e0>)
    2776:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2778:	7aeb      	ldrb	r3, [r5, #11]
    277a:	7aa9      	ldrb	r1, [r5, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    277c:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    277e:	7b28      	ldrb	r0, [r5, #12]
    2780:	021b      	lsls	r3, r3, #8
    2782:	430b      	orrs	r3, r1
    2784:	0400      	lsls	r0, r0, #16
    2786:	001a      	movs	r2, r3
    2788:	0003      	movs	r3, r0
    278a:	7b68      	ldrb	r0, [r5, #13]
    278c:	4313      	orrs	r3, r2
    278e:	0600      	lsls	r0, r0, #24
    2790:	7ba9      	ldrb	r1, [r5, #14]
    2792:	4318      	orrs	r0, r3
    2794:	4b94      	ldr	r3, [pc, #592]	; (29e8 <sampleTick+0x2e0>)
    2796:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    2798:	7c2b      	ldrb	r3, [r5, #16]
    279a:	7be9      	ldrb	r1, [r5, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    279c:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    279e:	7c68      	ldrb	r0, [r5, #17]
    27a0:	021b      	lsls	r3, r3, #8
    27a2:	430b      	orrs	r3, r1
    27a4:	0400      	lsls	r0, r0, #16
    27a6:	001a      	movs	r2, r3
    27a8:	0003      	movs	r3, r0
    27aa:	7ca8      	ldrb	r0, [r5, #18]
    27ac:	4313      	orrs	r3, r2
    27ae:	0600      	lsls	r0, r0, #24
    27b0:	7ce9      	ldrb	r1, [r5, #19]
    27b2:	4318      	orrs	r0, r3
    27b4:	4b8c      	ldr	r3, [pc, #560]	; (29e8 <sampleTick+0x2e0>)
    27b6:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    27b8:	7d6b      	ldrb	r3, [r5, #21]
    27ba:	7d29      	ldrb	r1, [r5, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    27bc:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    27be:	7da8      	ldrb	r0, [r5, #22]
    27c0:	021b      	lsls	r3, r3, #8
    27c2:	430b      	orrs	r3, r1
    27c4:	0400      	lsls	r0, r0, #16
    27c6:	001a      	movs	r2, r3
    27c8:	0003      	movs	r3, r0
    27ca:	7de8      	ldrb	r0, [r5, #23]
    27cc:	4313      	orrs	r3, r2
    27ce:	0600      	lsls	r0, r0, #24
    27d0:	7e29      	ldrb	r1, [r5, #24]
    27d2:	4318      	orrs	r0, r3
    27d4:	4b84      	ldr	r3, [pc, #528]	; (29e8 <sampleTick+0x2e0>)
    27d6:	4798      	blx	r3


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    27d8:	2210      	movs	r2, #16
    27da:	4f89      	ldr	r7, [pc, #548]	; (2a00 <sampleTick+0x2f8>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    27dc:	82e0      	strh	r0, [r4, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    27de:	88bb      	ldrh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    27e0:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    27e2:	4313      	orrs	r3, r2
    27e4:	80bb      	strh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    27e6:	2304      	movs	r3, #4
    27e8:	70bb      	strb	r3, [r7, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    27ea:	7eab      	ldrb	r3, [r5, #26]
    27ec:	7ee8      	ldrb	r0, [r5, #27]
    27ee:	021b      	lsls	r3, r3, #8
    27f0:	430b      	orrs	r3, r1
    27f2:	0400      	lsls	r0, r0, #16
    27f4:	4303      	orrs	r3, r0
    27f6:	7f28      	ldrb	r0, [r5, #28]
    27f8:	7f69      	ldrb	r1, [r5, #29]
    27fa:	0600      	lsls	r0, r0, #24
    27fc:	4318      	orrs	r0, r3
    27fe:	4b7a      	ldr	r3, [pc, #488]	; (29e8 <sampleTick+0x2e0>)
    2800:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2802:	4b80      	ldr	r3, [pc, #512]	; (2a04 <sampleTick+0x2fc>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2804:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2806:	18c0      	adds	r0, r0, r3
    2808:	4b78      	ldr	r3, [pc, #480]	; (29ec <sampleTick+0x2e4>)
    280a:	4798      	blx	r3
    280c:	4a7e      	ldr	r2, [pc, #504]	; (2a08 <sampleTick+0x300>)
    280e:	4d79      	ldr	r5, [pc, #484]	; (29f4 <sampleTick+0x2ec>)
    2810:	4b7e      	ldr	r3, [pc, #504]	; (2a0c <sampleTick+0x304>)
    2812:	47a8      	blx	r5
    2814:	4b79      	ldr	r3, [pc, #484]	; (29fc <sampleTick+0x2f4>)
    2816:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2818:	2580      	movs	r5, #128	; 0x80
    281a:	61e0      	str	r0, [r4, #28]

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    281c:	70be      	strb	r6, [r7, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    281e:	88bb      	ldrh	r3, [r7, #4]
    2820:	01ed      	lsls	r5, r5, #7
    2822:	b29b      	uxth	r3, r3
    2824:	80bb      	strh	r3, [r7, #4]
    2826:	4b7a      	ldr	r3, [pc, #488]	; (2a10 <sampleTick+0x308>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2828:	2150      	movs	r1, #80	; 0x50
    282a:	4f7a      	ldr	r7, [pc, #488]	; (2a14 <sampleTick+0x30c>)
    282c:	615d      	str	r5, [r3, #20]
    282e:	2002      	movs	r0, #2
    2830:	47b8      	blx	r7
    pinHigh(cs_baro);
    delay_us(600);
    2832:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2834:	4b76      	ldr	r3, [pc, #472]	; (2a10 <sampleTick+0x308>)
    2836:	0080      	lsls	r0, r0, #2
    2838:	619d      	str	r5, [r3, #24]
    283a:	4b77      	ldr	r3, [pc, #476]	; (2a18 <sampleTick+0x310>)
    283c:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    283e:	4b77      	ldr	r3, [pc, #476]	; (2a1c <sampleTick+0x314>)
    2840:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2842:	4b73      	ldr	r3, [pc, #460]	; (2a10 <sampleTick+0x308>)
    2844:	9003      	str	r0, [sp, #12]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    2846:	2140      	movs	r1, #64	; 0x40
    2848:	615d      	str	r5, [r3, #20]
    284a:	2002      	movs	r0, #2
    284c:	47b8      	blx	r7
    284e:	2280      	movs	r2, #128	; 0x80
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2850:	4b6f      	ldr	r3, [pc, #444]	; (2a10 <sampleTick+0x308>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2852:	00d2      	lsls	r2, r2, #3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2854:	619d      	str	r5, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2856:	4b72      	ldr	r3, [pc, #456]	; (2a20 <sampleTick+0x318>)

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2858:	2182      	movs	r1, #130	; 0x82
    285a:	601a      	str	r2, [r3, #0]
    285c:	0030      	movs	r0, r6
    285e:	47b8      	blx	r7
    byteOne = spiDataIn(ACCEL_SPI);
    2860:	4d70      	ldr	r5, [pc, #448]	; (2a24 <sampleTick+0x31c>)
    2862:	0030      	movs	r0, r6
    2864:	47a8      	blx	r5
    2866:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2868:	0030      	movs	r0, r6
    286a:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    286c:	0200      	lsls	r0, r0, #8
    286e:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2870:	0030      	movs	r0, r6
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    2872:	8427      	strh	r7, [r4, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    2874:	47a8      	blx	r5
    2876:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2878:	0030      	movs	r0, r6
    287a:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    287c:	0200      	lsls	r0, r0, #8
    287e:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2880:	0030      	movs	r0, r6
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    2882:	8527      	strh	r7, [r4, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    2884:	47a8      	blx	r5
    2886:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2888:	0030      	movs	r0, r6
    288a:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    288c:	2280      	movs	r2, #128	; 0x80
    288e:	4b66      	ldr	r3, [pc, #408]	; (2a28 <sampleTick+0x320>)
    2890:	00d2      	lsls	r2, r2, #3
    2892:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    2894:	0205      	lsls	r5, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    2896:	2220      	movs	r2, #32
    2898:	5ea3      	ldrsh	r3, [r4, r2]
    sample.accelYint =  sample.accelYint >> 4;
    289a:	2228      	movs	r2, #40	; 0x28
    289c:	5ea6      	ldrsh	r6, [r4, r2]
    sample.accelZint =  sample.accelZint >> 4;
    289e:	432f      	orrs	r7, r5
    28a0:	b23d      	sxth	r5, r7
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    28a2:	111b      	asrs	r3, r3, #4
    sample.accelYint =  sample.accelYint >> 4;
    28a4:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;
    28a6:	112d      	asrs	r5, r5, #4
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    28a8:	8423      	strh	r3, [r4, #32]
    sample.accelYint =  sample.accelYint >> 4;
    28aa:	8526      	strh	r6, [r4, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    28ac:	0018      	movs	r0, r3
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    28ae:	8625      	strh	r5, [r4, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    28b0:	4b4e      	ldr	r3, [pc, #312]	; (29ec <sampleTick+0x2e4>)
    28b2:	4798      	blx	r3
    28b4:	23fe      	movs	r3, #254	; 0xfe
    28b6:	2200      	movs	r2, #0
    28b8:	059b      	lsls	r3, r3, #22
    28ba:	4f4e      	ldr	r7, [pc, #312]	; (29f4 <sampleTick+0x2ec>)
    28bc:	47b8      	blx	r7
    28be:	4b4f      	ldr	r3, [pc, #316]	; (29fc <sampleTick+0x2f4>)
    28c0:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    28c2:	4b4a      	ldr	r3, [pc, #296]	; (29ec <sampleTick+0x2e4>)

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    28c4:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    28c6:	0030      	movs	r0, r6
    28c8:	4798      	blx	r3
    28ca:	23fe      	movs	r3, #254	; 0xfe
    28cc:	2200      	movs	r2, #0
    28ce:	059b      	lsls	r3, r3, #22
    28d0:	47b8      	blx	r7
    28d2:	4b4a      	ldr	r3, [pc, #296]	; (29fc <sampleTick+0x2f4>)
    28d4:	4798      	blx	r3
	
    if (altimeter.pointingUp) {
    28d6:	4b55      	ldr	r3, [pc, #340]	; (2a2c <sampleTick+0x324>)
    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    28d8:	62e0      	str	r0, [r4, #44]	; 0x2c
	
    if (altimeter.pointingUp) {
    28da:	795b      	ldrb	r3, [r3, #5]
    28dc:	4e4c      	ldr	r6, [pc, #304]	; (2a10 <sampleTick+0x308>)
    28de:	2b00      	cmp	r3, #0
    28e0:	d007      	beq.n	28f2 <sampleTick+0x1ea>
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    28e2:	4268      	negs	r0, r5
    28e4:	4b41      	ldr	r3, [pc, #260]	; (29ec <sampleTick+0x2e4>)
    28e6:	4798      	blx	r3
    28e8:	23fe      	movs	r3, #254	; 0xfe
    28ea:	2200      	movs	r2, #0
    28ec:	059b      	lsls	r3, r3, #22
    28ee:	003d      	movs	r5, r7
    28f0:	e006      	b.n	2900 <sampleTick+0x1f8>
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    28f2:	0028      	movs	r0, r5
    28f4:	4b3d      	ldr	r3, [pc, #244]	; (29ec <sampleTick+0x2e4>)
    28f6:	4798      	blx	r3
    28f8:	23fe      	movs	r3, #254	; 0xfe
    28fa:	2200      	movs	r2, #0
    28fc:	4d3d      	ldr	r5, [pc, #244]	; (29f4 <sampleTick+0x2ec>)
    28fe:	059b      	lsls	r3, r3, #22
    2900:	47a8      	blx	r5
    2902:	4b3e      	ldr	r3, [pc, #248]	; (29fc <sampleTick+0x2f4>)
    2904:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2906:	2380      	movs	r3, #128	; 0x80
    2908:	00db      	lsls	r3, r3, #3
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    290a:	2182      	movs	r1, #130	; 0x82
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
	
    if (altimeter.pointingUp) {
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    290c:	6360      	str	r0, [r4, #52]	; 0x34
    290e:	6173      	str	r3, [r6, #20]
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2910:	2000      	movs	r0, #0
    2912:	4b40      	ldr	r3, [pc, #256]	; (2a14 <sampleTick+0x30c>)
    2914:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    2916:	4d43      	ldr	r5, [pc, #268]	; (2a24 <sampleTick+0x31c>)
    2918:	2000      	movs	r0, #0
    291a:	47a8      	blx	r5
    291c:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    291e:	2000      	movs	r0, #0
    2920:	47a8      	blx	r5
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2922:	4f2d      	ldr	r7, [pc, #180]	; (29d8 <sampleTick+0x2d0>)
    2924:	0200      	lsls	r0, r0, #8
    2926:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    2928:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    292a:	873c      	strh	r4, [r7, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    292c:	47a8      	blx	r5
    292e:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2930:	2000      	movs	r0, #0
    2932:	47a8      	blx	r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2934:	4b3e      	ldr	r3, [pc, #248]	; (2a30 <sampleTick+0x328>)
    2936:	0200      	lsls	r0, r0, #8
    2938:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    293a:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    293c:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    293e:	47a8      	blx	r5
    2940:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2942:	2000      	movs	r0, #0
    2944:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2946:	2380      	movs	r3, #128	; 0x80
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2948:	4669      	mov	r1, sp
    294a:	00db      	lsls	r3, r3, #3
    294c:	61b3      	str	r3, [r6, #24]
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    294e:	2238      	movs	r2, #56	; 0x38
    2950:	5ebb      	ldrsh	r3, [r7, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    2952:	4a37      	ldr	r2, [pc, #220]	; (2a30 <sampleTick+0x328>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2954:	111b      	asrs	r3, r3, #4
    2956:	873b      	strh	r3, [r7, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    2958:	253e      	movs	r5, #62	; 0x3e
    295a:	5f55      	ldrsh	r5, [r2, r5]
    sample.gyroZint = sample.gyroZint >> 4;
    295c:	0200      	lsls	r0, r0, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    295e:	112a      	asrs	r2, r5, #4
    2960:	9201      	str	r2, [sp, #4]
    2962:	8889      	ldrh	r1, [r1, #4]
    2964:	4a32      	ldr	r2, [pc, #200]	; (2a30 <sampleTick+0x328>)
    sample.gyroZint = sample.gyroZint >> 4;
    2966:	4304      	orrs	r4, r0
    2968:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    296a:	87d1      	strh	r1, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    296c:	1122      	asrs	r2, r4, #4
    296e:	4669      	mov	r1, sp
    2970:	9202      	str	r2, [sp, #8]
    2972:	003a      	movs	r2, r7
    2974:	8909      	ldrh	r1, [r1, #8]
    2976:	3248      	adds	r2, #72	; 0x48

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2978:	4d1c      	ldr	r5, [pc, #112]	; (29ec <sampleTick+0x2e4>)
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;
    297a:	8011      	strh	r1, [r2, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    297c:	0018      	movs	r0, r3
    297e:	47a8      	blx	r5
    2980:	23fe      	movs	r3, #254	; 0xfe
    2982:	4c1c      	ldr	r4, [pc, #112]	; (29f4 <sampleTick+0x2ec>)
    2984:	2200      	movs	r2, #0
    2986:	059b      	lsls	r3, r3, #22
    2988:	47a0      	blx	r4
    298a:	4e1c      	ldr	r6, [pc, #112]	; (29fc <sampleTick+0x2f4>)
    298c:	47b0      	blx	r6
    298e:	63f8      	str	r0, [r7, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2990:	9801      	ldr	r0, [sp, #4]
    2992:	47a8      	blx	r5
    2994:	23fe      	movs	r3, #254	; 0xfe
    2996:	2200      	movs	r2, #0
    2998:	059b      	lsls	r3, r3, #22
    299a:	47a0      	blx	r4
    299c:	47b0      	blx	r6
    299e:	6478      	str	r0, [r7, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    29a0:	9802      	ldr	r0, [sp, #8]
    29a2:	47a8      	blx	r5
    29a4:	23fe      	movs	r3, #254	; 0xfe
    29a6:	2200      	movs	r2, #0
    29a8:	059b      	lsls	r3, r3, #22
    29aa:	47a0      	blx	r4
    29ac:	47b0      	blx	r6
    29ae:	64f8      	str	r0, [r7, #76]	; 0x4c


    delay_us(400);
    29b0:	20c8      	movs	r0, #200	; 0xc8
    29b2:	4b19      	ldr	r3, [pc, #100]	; (2a18 <sampleTick+0x310>)
    29b4:	0040      	lsls	r0, r0, #1
    29b6:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    29b8:	4b18      	ldr	r3, [pc, #96]	; (2a1c <sampleTick+0x314>)
    29ba:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    29bc:	4a1d      	ldr	r2, [pc, #116]	; (2a34 <sampleTick+0x32c>)
    29be:	9903      	ldr	r1, [sp, #12]
    29c0:	4b1d      	ldr	r3, [pc, #116]	; (2a38 <sampleTick+0x330>)
    29c2:	4c1e      	ldr	r4, [pc, #120]	; (2a3c <sampleTick+0x334>)
    29c4:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    29c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    29c8:	4b1d      	ldr	r3, [pc, #116]	; (2a40 <sampleTick+0x338>)
    29ca:	4798      	blx	r3
    29cc:	65b8      	str	r0, [r7, #88]	; 0x58
    29ce:	65f9      	str	r1, [r7, #92]	; 0x5c
}
    29d0:	b005      	add	sp, #20
    29d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d4:	2000053d 	.word	0x2000053d
    29d8:	20000908 	.word	0x20000908
    29dc:	00000f4d 	.word	0x00000f4d
    29e0:	2000052c 	.word	0x2000052c
    29e4:	000064a4 	.word	0x000064a4
    29e8:	00000c09 	.word	0x00000c09
    29ec:	00006031 	.word	0x00006031
    29f0:	a97e132b 	.word	0xa97e132b
    29f4:	000053e9 	.word	0x000053e9
    29f8:	3f65379f 	.word	0x3f65379f
    29fc:	000061cd 	.word	0x000061cd
    2a00:	42004000 	.word	0x42004000
    2a04:	ffff41c9 	.word	0xffff41c9
    2a08:	abb44e51 	.word	0xabb44e51
    2a0c:	3f73f290 	.word	0x3f73f290
    2a10:	41004400 	.word	0x41004400
    2a14:	00002b55 	.word	0x00002b55
    2a18:	00000ed1 	.word	0x00000ed1
    2a1c:	000003b5 	.word	0x000003b5
    2a20:	41004494 	.word	0x41004494
    2a24:	00002b6d 	.word	0x00002b6d
    2a28:	41004498 	.word	0x41004498
    2a2c:	20000530 	.word	0x20000530
    2a30:	2000090a 	.word	0x2000090a
    2a34:	2000095c 	.word	0x2000095c
    2a38:	20000958 	.word	0x20000958
    2a3c:	000003f5 	.word	0x000003f5
    2a40:	00000495 	.word	0x00000495

00002a44 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2a48:	2301      	movs	r3, #1
    2a4a:	1ca6      	adds	r6, r4, #2
    2a4c:	40b3      	lsls	r3, r6
    2a4e:	480d      	ldr	r0, [pc, #52]	; (2a84 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2a50:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2a52:	6a01      	ldr	r1, [r0, #32]
    2a54:	430b      	orrs	r3, r1
    2a56:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2a58:	2d00      	cmp	r5, #0
    2a5a:	d003      	beq.n	2a64 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2a5c:	2107      	movs	r1, #7
    2a5e:	0028      	movs	r0, r5
    2a60:	4b09      	ldr	r3, [pc, #36]	; (2a88 <sercomClockEnable+0x44>)
    2a62:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2a64:	22f0      	movs	r2, #240	; 0xf0
    2a66:	2080      	movs	r0, #128	; 0x80
    2a68:	0229      	lsls	r1, r5, #8
    2a6a:	0112      	lsls	r2, r2, #4
    2a6c:	4011      	ands	r1, r2
    2a6e:	01c0      	lsls	r0, r0, #7
    2a70:	4301      	orrs	r1, r0
    2a72:	0020      	movs	r0, r4
    2a74:	3014      	adds	r0, #20
    2a76:	223f      	movs	r2, #63	; 0x3f
    2a78:	0003      	movs	r3, r0
    2a7a:	4013      	ands	r3, r2
    2a7c:	4319      	orrs	r1, r3
    2a7e:	4b03      	ldr	r3, [pc, #12]	; (2a8c <sercomClockEnable+0x48>)
    2a80:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2a82:	bd70      	pop	{r4, r5, r6, pc}
    2a84:	40000400 	.word	0x40000400
    2a88:	00000e81 	.word	0x00000e81
    2a8c:	40000c00 	.word	0x40000c00

00002a90 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2a90:	4b04      	ldr	r3, [pc, #16]	; (2aa4 <sercomReset+0x14>)
    2a92:	0280      	lsls	r0, r0, #10
    2a94:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2a96:	2301      	movs	r3, #1
    2a98:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2a9a:	6802      	ldr	r2, [r0, #0]
    2a9c:	421a      	tst	r2, r3
    2a9e:	d1fc      	bne.n	2a9a <sercomReset+0xa>
}
    2aa0:	4770      	bx	lr
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	42000800 	.word	0x42000800

00002aa8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2aaa:	0004      	movs	r4, r0
    2aac:	9300      	str	r3, [sp, #0]
    2aae:	ab08      	add	r3, sp, #32
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	000e      	movs	r6, r1
    2ab4:	9301      	str	r3, [sp, #4]
    2ab6:	ab09      	add	r3, sp, #36	; 0x24
    2ab8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2aba:	4b12      	ldr	r3, [pc, #72]	; (2b04 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2abc:	0015      	movs	r5, r2

    sercomReset(id);
    2abe:	4798      	blx	r3
    2ac0:	4b11      	ldr	r3, [pc, #68]	; (2b08 <sercomSpiMasterInit+0x60>)
    2ac2:	02a4      	lsls	r4, r4, #10
    2ac4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2ac6:	2380      	movs	r3, #128	; 0x80
    2ac8:	029b      	lsls	r3, r3, #10
    2aca:	6063      	str	r3, [r4, #4]
    2acc:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2ace:	21c0      	movs	r1, #192	; 0xc0
    2ad0:	042d      	lsls	r5, r5, #16
    2ad2:	029b      	lsls	r3, r3, #10
    2ad4:	402b      	ands	r3, r5
    2ad6:	250e      	movs	r5, #14
    2ad8:	0536      	lsls	r6, r6, #20
    2ada:	0389      	lsls	r1, r1, #14
    2adc:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2ade:	9e00      	ldr	r6, [sp, #0]
    2ae0:	431d      	orrs	r5, r3
    2ae2:	1e73      	subs	r3, r6, #1
    2ae4:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2ae6:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2ae8:	0772      	lsls	r2, r6, #29
    2aea:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2aec:	432a      	orrs	r2, r5
    2aee:	1e59      	subs	r1, r3, #1
    2af0:	418b      	sbcs	r3, r1
    2af2:	0016      	movs	r6, r2
    2af4:	071b      	lsls	r3, r3, #28
    2af6:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2af8:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2afa:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2afc:	69e3      	ldr	r3, [r4, #28]
    2afe:	075b      	lsls	r3, r3, #29
    2b00:	d4fc      	bmi.n	2afc <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2b02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2b04:	00002a91 	.word	0x00002a91
    2b08:	42000800 	.word	0x42000800

00002b0c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2b0c:	b570      	push	{r4, r5, r6, lr}
    2b0e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2b10:	4b0c      	ldr	r3, [pc, #48]	; (2b44 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2b12:	000d      	movs	r5, r1
    2b14:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2b16:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <sercomUartInit+0x3c>)
    2b1a:	02b0      	lsls	r0, r6, #10
    2b1c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2b1e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2b20:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2b22:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2b24:	4b09      	ldr	r3, [pc, #36]	; (2b4c <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2b26:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2b28:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2b2a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2b2c:	0392      	lsls	r2, r2, #14
    2b2e:	4011      	ands	r1, r2
    2b30:	4a07      	ldr	r2, [pc, #28]	; (2b50 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2b32:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2b34:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2b36:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2b38:	4311      	orrs	r1, r2
    2b3a:	4023      	ands	r3, r4
    2b3c:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2b3e:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2b40:	bd70      	pop	{r4, r5, r6, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00002a91 	.word	0x00002a91
    2b48:	42000800 	.word	0x42000800
    2b4c:	ffffb15b 	.word	0xffffb15b
    2b50:	40000006 	.word	0x40000006

00002b54 <spiDataOut>:
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <spiDataOut+0x14>)
    2b56:	0280      	lsls	r0, r0, #10
    2b58:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    return sercom(id)->SPI.DATA.reg;
}

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2b5a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2b5c:	7e03      	ldrb	r3, [r0, #24]
    2b5e:	075b      	lsls	r3, r3, #29
    2b60:	d5fc      	bpl.n	2b5c <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2b62:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2b64:	4770      	bx	lr
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	42000800 	.word	0x42000800

00002b6c <spiDataIn>:
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <spiDataIn+0x18>)
    2b6e:	0280      	lsls	r0, r0, #10
    2b70:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2b72:	23ff      	movs	r3, #255	; 0xff
    2b74:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2b76:	7e03      	ldrb	r3, [r0, #24]
    2b78:	075b      	lsls	r3, r3, #29
    2b7a:	d5fc      	bpl.n	2b76 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2b7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2b7e:	b2c0      	uxtb	r0, r0
}
    2b80:	4770      	bx	lr
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	42000800 	.word	0x42000800

00002b88 <usartDataOut>:
    2b88:	4b04      	ldr	r3, [pc, #16]	; (2b9c <usartDataOut+0x14>)
    2b8a:	0280      	lsls	r0, r0, #10
    2b8c:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2b8e:	b289      	uxth	r1, r1
    2b90:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2b92:	7e03      	ldrb	r3, [r0, #24]
    2b94:	07db      	lsls	r3, r3, #31
    2b96:	d5fc      	bpl.n	2b92 <usartDataOut+0xa>
}
    2b98:	4770      	bx	lr
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	42000800 	.word	0x42000800

00002ba0 <usartDataIn>:
    2ba0:	4b02      	ldr	r3, [pc, #8]	; (2bac <usartDataIn+0xc>)
    2ba2:	0280      	lsls	r0, r0, #10
    2ba4:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2ba6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2ba8:	b2c0      	uxtb	r0, r0
}
    2baa:	4770      	bx	lr
    2bac:	42000800 	.word	0x42000800

00002bb0 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    2bb0:	4a11      	ldr	r2, [pc, #68]	; (2bf8 <findMainAltitude+0x48>)
    2bb2:	7851      	ldrb	r1, [r2, #1]
    2bb4:	0013      	movs	r3, r2
    2bb6:	2900      	cmp	r1, #0
    2bb8:	d105      	bne.n	2bc6 <findMainAltitude+0x16>
    2bba:	7811      	ldrb	r1, [r2, #0]
    2bbc:	2900      	cmp	r1, #0
    2bbe:	d002      	beq.n	2bc6 <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2bc0:	8853      	ldrh	r3, [r2, #2]
    2bc2:	8313      	strh	r3, [r2, #24]
        return;
    2bc4:	e017      	b.n	2bf6 <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2bc6:	79da      	ldrb	r2, [r3, #7]
    2bc8:	2a00      	cmp	r2, #0
    2bca:	d104      	bne.n	2bd6 <findMainAltitude+0x26>
    2bcc:	799a      	ldrb	r2, [r3, #6]
    2bce:	2a00      	cmp	r2, #0
    2bd0:	d001      	beq.n	2bd6 <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2bd2:	891a      	ldrh	r2, [r3, #8]
    2bd4:	e00e      	b.n	2bf4 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2bd6:	7b5a      	ldrb	r2, [r3, #13]
    2bd8:	2a00      	cmp	r2, #0
    2bda:	d104      	bne.n	2be6 <findMainAltitude+0x36>
    2bdc:	7b1a      	ldrb	r2, [r3, #12]
    2bde:	2a00      	cmp	r2, #0
    2be0:	d001      	beq.n	2be6 <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2be2:	89da      	ldrh	r2, [r3, #14]
    2be4:	e006      	b.n	2bf4 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2be6:	7cda      	ldrb	r2, [r3, #19]
    2be8:	2a00      	cmp	r2, #0
    2bea:	d104      	bne.n	2bf6 <findMainAltitude+0x46>
    2bec:	7c9a      	ldrb	r2, [r3, #18]
    2bee:	2a00      	cmp	r2, #0
    2bf0:	d001      	beq.n	2bf6 <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2bf2:	8a9a      	ldrh	r2, [r3, #20]
    2bf4:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2bf6:	4770      	bx	lr
    2bf8:	20000510 	.word	0x20000510

00002bfc <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2bfc:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2bfe:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2c00:	2101      	movs	r1, #1
    2c02:	4b09      	ldr	r3, [pc, #36]	; (2c28 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2c04:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2c06:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2c08:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2c0a:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2c0c:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2c0e:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2c10:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2c12:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2c14:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2c16:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2c18:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2c1a:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2c1c:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2c1e:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2c20:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2c22:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2c24:	759a      	strb	r2, [r3, #22]
}
    2c26:	4770      	bx	lr
    2c28:	20000510 	.word	0x20000510

00002c2c <putSettings>:

void putSettings() {
    2c2c:	b500      	push	{lr}
    2c2e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2c30:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2c32:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2c34:	4b17      	ldr	r3, [pc, #92]	; (2c94 <putSettings+0x68>)
    2c36:	781a      	ldrb	r2, [r3, #0]
    2c38:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2c3a:	785a      	ldrb	r2, [r3, #1]
    2c3c:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2c3e:	885a      	ldrh	r2, [r3, #2]
    2c40:	0a11      	lsrs	r1, r2, #8
    2c42:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2c44:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2c46:	791a      	ldrb	r2, [r3, #4]
    2c48:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2c4a:	799a      	ldrb	r2, [r3, #6]
    2c4c:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2c4e:	79da      	ldrb	r2, [r3, #7]
    2c50:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2c52:	891a      	ldrh	r2, [r3, #8]
    2c54:	0a11      	lsrs	r1, r2, #8
    2c56:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2c58:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2c5a:	7a9a      	ldrb	r2, [r3, #10]
    2c5c:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2c5e:	7b1a      	ldrb	r2, [r3, #12]
    2c60:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2c62:	7b5a      	ldrb	r2, [r3, #13]
    2c64:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2c66:	89da      	ldrh	r2, [r3, #14]
    2c68:	0a11      	lsrs	r1, r2, #8
    2c6a:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2c6c:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2c6e:	7c1a      	ldrb	r2, [r3, #16]
    2c70:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2c72:	7c9a      	ldrb	r2, [r3, #18]
    2c74:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2c76:	7cda      	ldrb	r2, [r3, #19]
    2c78:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2c7a:	8a9a      	ldrh	r2, [r3, #20]
    2c7c:	0a11      	lsrs	r1, r2, #8
    2c7e:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2c80:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2c82:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2c84:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2c86:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2c88:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2c8a:	4b03      	ldr	r3, [pc, #12]	; (2c98 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2c8c:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2c8e:	4798      	blx	r3
}
    2c90:	b041      	add	sp, #260	; 0x104
    2c92:	bd00      	pop	{pc}
    2c94:	20000510 	.word	0x20000510
    2c98:	000002a5 	.word	0x000002a5

00002c9c <getSettings>:




void getSettings() {
    2c9c:	b500      	push	{lr}
    2c9e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2ca0:	4669      	mov	r1, sp
    2ca2:	4b2c      	ldr	r3, [pc, #176]	; (2d54 <getSettings+0xb8>)
    2ca4:	2000      	movs	r0, #0
    2ca6:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2ca8:	466a      	mov	r2, sp
    2caa:	7812      	ldrb	r2, [r2, #0]
    2cac:	4b2a      	ldr	r3, [pc, #168]	; (2d58 <getSettings+0xbc>)
    2cae:	1e51      	subs	r1, r2, #1
    2cb0:	418a      	sbcs	r2, r1
    2cb2:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2cb4:	466a      	mov	r2, sp
    2cb6:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2cb8:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2cba:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2cbc:	466a      	mov	r2, sp
    2cbe:	7892      	ldrb	r2, [r2, #2]
    2cc0:	78c9      	ldrb	r1, [r1, #3]
    2cc2:	0212      	lsls	r2, r2, #8
    2cc4:	430a      	orrs	r2, r1
    2cc6:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2cc8:	466a      	mov	r2, sp
    2cca:	7912      	ldrb	r2, [r2, #4]
    2ccc:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2cce:	466a      	mov	r2, sp
    2cd0:	7952      	ldrb	r2, [r2, #5]
    2cd2:	1e51      	subs	r1, r2, #1
    2cd4:	418a      	sbcs	r2, r1
    2cd6:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2cd8:	466a      	mov	r2, sp
    2cda:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2cdc:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2cde:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2ce0:	466a      	mov	r2, sp
    2ce2:	79d2      	ldrb	r2, [r2, #7]
    2ce4:	7a09      	ldrb	r1, [r1, #8]
    2ce6:	0212      	lsls	r2, r2, #8
    2ce8:	430a      	orrs	r2, r1
    2cea:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2cec:	466a      	mov	r2, sp
    2cee:	7a52      	ldrb	r2, [r2, #9]
    2cf0:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2cf2:	466a      	mov	r2, sp
    2cf4:	7a92      	ldrb	r2, [r2, #10]
    2cf6:	1e51      	subs	r1, r2, #1
    2cf8:	418a      	sbcs	r2, r1
    2cfa:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2cfc:	466a      	mov	r2, sp
    2cfe:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2d00:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2d02:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2d04:	466a      	mov	r2, sp
    2d06:	7b12      	ldrb	r2, [r2, #12]
    2d08:	7b49      	ldrb	r1, [r1, #13]
    2d0a:	0212      	lsls	r2, r2, #8
    2d0c:	430a      	orrs	r2, r1
    2d0e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2d10:	466a      	mov	r2, sp
    2d12:	7b92      	ldrb	r2, [r2, #14]
    2d14:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2d16:	466a      	mov	r2, sp
    2d18:	7bd2      	ldrb	r2, [r2, #15]
    2d1a:	1e51      	subs	r1, r2, #1
    2d1c:	418a      	sbcs	r2, r1
    2d1e:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2d20:	466a      	mov	r2, sp
    2d22:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2d24:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2d26:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2d28:	466a      	mov	r2, sp
    2d2a:	7c52      	ldrb	r2, [r2, #17]
    2d2c:	7c89      	ldrb	r1, [r1, #18]
    2d2e:	0212      	lsls	r2, r2, #8
    2d30:	430a      	orrs	r2, r1
    2d32:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2d34:	466a      	mov	r2, sp
    2d36:	7cd2      	ldrb	r2, [r2, #19]
    2d38:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2d3a:	466b      	mov	r3, sp
    2d3c:	7d1b      	ldrb	r3, [r3, #20]
    2d3e:	2bff      	cmp	r3, #255	; 0xff
    2d40:	d103      	bne.n	2d4a <getSettings+0xae>
        applyDefaultSettings();
    2d42:	4b06      	ldr	r3, [pc, #24]	; (2d5c <getSettings+0xc0>)
    2d44:	4798      	blx	r3
        putSettings();
    2d46:	4b06      	ldr	r3, [pc, #24]	; (2d60 <getSettings+0xc4>)
    2d48:	4798      	blx	r3
    }

    findMainAltitude();
    2d4a:	4b06      	ldr	r3, [pc, #24]	; (2d64 <getSettings+0xc8>)
    2d4c:	4798      	blx	r3

}
    2d4e:	b041      	add	sp, #260	; 0x104
    2d50:	bd00      	pop	{pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	0000035d 	.word	0x0000035d
    2d58:	20000510 	.word	0x20000510
    2d5c:	00002bfd 	.word	0x00002bfd
    2d60:	00002c2d 	.word	0x00002c2d
    2d64:	00002bb1 	.word	0x00002bb1

00002d68 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2d6a:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2d6c:	0020      	movs	r0, r4
    2d6e:	4b1e      	ldr	r3, [pc, #120]	; (2de8 <sendFlightLogs+0x80>)
    2d70:	4798      	blx	r3
    2d72:	2800      	cmp	r0, #0
    2d74:	d003      	beq.n	2d7e <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2d76:	0021      	movs	r1, r4
    2d78:	2003      	movs	r0, #3
    2d7a:	4b1c      	ldr	r3, [pc, #112]	; (2dec <sendFlightLogs+0x84>)
    2d7c:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2d7e:	3401      	adds	r4, #1
    2d80:	b2e4      	uxtb	r4, r4
    2d82:	2c14      	cmp	r4, #20
    2d84:	d1f2      	bne.n	2d6c <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2d86:	21ff      	movs	r1, #255	; 0xff
    2d88:	2003      	movs	r0, #3
    2d8a:	4c18      	ldr	r4, [pc, #96]	; (2dec <sendFlightLogs+0x84>)
    2d8c:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2d8e:	4a18      	ldr	r2, [pc, #96]	; (2df0 <sendFlightLogs+0x88>)
    2d90:	7e13      	ldrb	r3, [r2, #24]
    2d92:	075b      	lsls	r3, r3, #29
    2d94:	d5fc      	bpl.n	2d90 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    2d96:	4b17      	ldr	r3, [pc, #92]	; (2df4 <sendFlightLogs+0x8c>)
    2d98:	2003      	movs	r0, #3
    2d9a:	4798      	blx	r3
    2d9c:	466b      	mov	r3, sp
    2d9e:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2da0:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    2da2:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2da4:	b2c0      	uxtb	r0, r0
    2da6:	4b14      	ldr	r3, [pc, #80]	; (2df8 <sendFlightLogs+0x90>)
    2da8:	4798      	blx	r3
    2daa:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2dac:	7828      	ldrb	r0, [r5, #0]
    2dae:	4b13      	ldr	r3, [pc, #76]	; (2dfc <sendFlightLogs+0x94>)
    2db0:	b2c0      	uxtb	r0, r0
    2db2:	4798      	blx	r3
    2db4:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2db6:	1bc5      	subs	r5, r0, r7
    2db8:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    2dba:	b2e9      	uxtb	r1, r5
    2dbc:	2003      	movs	r0, #3
    2dbe:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    2dc0:	b2a9      	uxth	r1, r5
    2dc2:	0a09      	lsrs	r1, r1, #8
    2dc4:	2003      	movs	r0, #3
    2dc6:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    2dc8:	b2f1      	uxtb	r1, r6
    2dca:	2003      	movs	r0, #3
    2dcc:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    2dce:	0a31      	lsrs	r1, r6, #8
    2dd0:	b2c9      	uxtb	r1, r1
    2dd2:	2003      	movs	r0, #3
    2dd4:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    2dd6:	0c31      	lsrs	r1, r6, #16
    2dd8:	b2c9      	uxtb	r1, r1
    2dda:	2003      	movs	r0, #3
    2ddc:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2dde:	0031      	movs	r1, r6
    2de0:	0038      	movs	r0, r7
    2de2:	4b07      	ldr	r3, [pc, #28]	; (2e00 <sendFlightLogs+0x98>)
    2de4:	4798      	blx	r3

}
    2de6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2de8:	00002575 	.word	0x00002575
    2dec:	00002b89 	.word	0x00002b89
    2df0:	42001400 	.word	0x42001400
    2df4:	00002ba1 	.word	0x00002ba1
    2df8:	00002525 	.word	0x00002525
    2dfc:	0000254d 	.word	0x0000254d
    2e00:	00000ab5 	.word	0x00000ab5

00002e04 <attemptConnection>:

void attemptConnection() {
    2e04:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    2e06:	4b14      	ldr	r3, [pc, #80]	; (2e58 <attemptConnection+0x54>)
    2e08:	4798      	blx	r3
    2e0a:	2800      	cmp	r0, #0
    2e0c:	d022      	beq.n	2e54 <attemptConnection+0x50>

        flightState = flightIdle;
    2e0e:	2201      	movs	r2, #1
    2e10:	4b12      	ldr	r3, [pc, #72]	; (2e5c <attemptConnection+0x58>)
    2e12:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2e14:	4a12      	ldr	r2, [pc, #72]	; (2e60 <attemptConnection+0x5c>)
    2e16:	7e13      	ldrb	r3, [r2, #24]
    2e18:	075b      	lsls	r3, r3, #29
    2e1a:	d5fc      	bpl.n	2e16 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2e1c:	2003      	movs	r0, #3
    2e1e:	4b11      	ldr	r3, [pc, #68]	; (2e64 <attemptConnection+0x60>)
    2e20:	4798      	blx	r3
    2e22:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2e24:	2c4c      	cmp	r4, #76	; 0x4c
    2e26:	d102      	bne.n	2e2e <attemptConnection+0x2a>

            sendFlightLogs();
    2e28:	4b0f      	ldr	r3, [pc, #60]	; (2e68 <attemptConnection+0x64>)
    2e2a:	4798      	blx	r3
    2e2c:	e012      	b.n	2e54 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2e2e:	2845      	cmp	r0, #69	; 0x45
    2e30:	d110      	bne.n	2e54 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    2e32:	4e0e      	ldr	r6, [pc, #56]	; (2e6c <attemptConnection+0x68>)
    2e34:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2e36:	4d0e      	ldr	r5, [pc, #56]	; (2e70 <attemptConnection+0x6c>)
    2e38:	47a8      	blx	r5
            delay_ms(100);
    2e3a:	2064      	movs	r0, #100	; 0x64
    2e3c:	4b0d      	ldr	r3, [pc, #52]	; (2e74 <attemptConnection+0x70>)
    2e3e:	4798      	blx	r3
            AT25SFChipErase();
    2e40:	47b0      	blx	r6

            AT25SFHoldTillReady();
    2e42:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    2e44:	2003      	movs	r0, #3
    2e46:	4b0c      	ldr	r3, [pc, #48]	; (2e78 <attemptConnection+0x74>)
    2e48:	0021      	movs	r1, r4
    2e4a:	4798      	blx	r3
            beep(400);
    2e4c:	20c8      	movs	r0, #200	; 0xc8
    2e4e:	4b0b      	ldr	r3, [pc, #44]	; (2e7c <attemptConnection+0x78>)
    2e50:	0040      	lsls	r0, r0, #1
    2e52:	4798      	blx	r3


        }
    }

}
    2e54:	bd70      	pop	{r4, r5, r6, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	00000a81 	.word	0x00000a81
    2e5c:	2000053c 	.word	0x2000053c
    2e60:	42001400 	.word	0x42001400
    2e64:	00002ba1 	.word	0x00002ba1
    2e68:	00002d69 	.word	0x00002d69
    2e6c:	00000219 	.word	0x00000219
    2e70:	000001e5 	.word	0x000001e5
    2e74:	00000f01 	.word	0x00000f01
    2e78:	00002b89 	.word	0x00002b89
    2e7c:	00000c71 	.word	0x00000c71

00002e80 <pow>:
    2e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e82:	465f      	mov	r7, fp
    2e84:	464d      	mov	r5, r9
    2e86:	4656      	mov	r6, sl
    2e88:	4644      	mov	r4, r8
    2e8a:	b4f0      	push	{r4, r5, r6, r7}
    2e8c:	b091      	sub	sp, #68	; 0x44
    2e8e:	001f      	movs	r7, r3
    2e90:	0004      	movs	r4, r0
    2e92:	000d      	movs	r5, r1
    2e94:	0016      	movs	r6, r2
    2e96:	f000 f9af 	bl	31f8 <__ieee754_pow>
    2e9a:	4bcf      	ldr	r3, [pc, #828]	; (31d8 <pow+0x358>)
    2e9c:	9002      	str	r0, [sp, #8]
    2e9e:	9103      	str	r1, [sp, #12]
    2ea0:	469b      	mov	fp, r3
    2ea2:	781b      	ldrb	r3, [r3, #0]
    2ea4:	b25b      	sxtb	r3, r3
    2ea6:	4699      	mov	r9, r3
    2ea8:	3301      	adds	r3, #1
    2eaa:	d04f      	beq.n	2f4c <pow+0xcc>
    2eac:	0032      	movs	r2, r6
    2eae:	003b      	movs	r3, r7
    2eb0:	0030      	movs	r0, r6
    2eb2:	0039      	movs	r1, r7
    2eb4:	f003 f866 	bl	5f84 <__aeabi_dcmpun>
    2eb8:	9000      	str	r0, [sp, #0]
    2eba:	2800      	cmp	r0, #0
    2ebc:	d146      	bne.n	2f4c <pow+0xcc>
    2ebe:	0022      	movs	r2, r4
    2ec0:	002b      	movs	r3, r5
    2ec2:	0020      	movs	r0, r4
    2ec4:	0029      	movs	r1, r5
    2ec6:	f003 f85d 	bl	5f84 <__aeabi_dcmpun>
    2eca:	2200      	movs	r2, #0
    2ecc:	4682      	mov	sl, r0
    2ece:	2800      	cmp	r0, #0
    2ed0:	d134      	bne.n	2f3c <pow+0xbc>
    2ed2:	2300      	movs	r3, #0
    2ed4:	0020      	movs	r0, r4
    2ed6:	0029      	movs	r1, r5
    2ed8:	f001 f988 	bl	41ec <__aeabi_dcmpeq>
    2edc:	2800      	cmp	r0, #0
    2ede:	d03a      	beq.n	2f56 <pow+0xd6>
    2ee0:	2200      	movs	r2, #0
    2ee2:	2300      	movs	r3, #0
    2ee4:	0030      	movs	r0, r6
    2ee6:	0039      	movs	r1, r7
    2ee8:	f001 f980 	bl	41ec <__aeabi_dcmpeq>
    2eec:	9005      	str	r0, [sp, #20]
    2eee:	2800      	cmp	r0, #0
    2ef0:	d100      	bne.n	2ef4 <pow+0x74>
    2ef2:	e074      	b.n	2fde <pow+0x15e>
    2ef4:	ab06      	add	r3, sp, #24
    2ef6:	4698      	mov	r8, r3
    2ef8:	2301      	movs	r3, #1
    2efa:	4642      	mov	r2, r8
    2efc:	9306      	str	r3, [sp, #24]
    2efe:	4bb7      	ldr	r3, [pc, #732]	; (31dc <pow+0x35c>)
    2f00:	6053      	str	r3, [r2, #4]
    2f02:	4643      	mov	r3, r8
    2f04:	4652      	mov	r2, sl
    2f06:	609c      	str	r4, [r3, #8]
    2f08:	60dd      	str	r5, [r3, #12]
    2f0a:	621a      	str	r2, [r3, #32]
    2f0c:	611e      	str	r6, [r3, #16]
    2f0e:	615f      	str	r7, [r3, #20]
    2f10:	4642      	mov	r2, r8
    2f12:	2300      	movs	r3, #0
    2f14:	2400      	movs	r4, #0
    2f16:	6193      	str	r3, [r2, #24]
    2f18:	61d4      	str	r4, [r2, #28]
    2f1a:	464b      	mov	r3, r9
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d100      	bne.n	2f22 <pow+0xa2>
    2f20:	e094      	b.n	304c <pow+0x1cc>
    2f22:	2300      	movs	r3, #0
    2f24:	4cae      	ldr	r4, [pc, #696]	; (31e0 <pow+0x360>)
    2f26:	9300      	str	r3, [sp, #0]
    2f28:	9401      	str	r4, [sp, #4]
    2f2a:	9800      	ldr	r0, [sp, #0]
    2f2c:	9901      	ldr	r1, [sp, #4]
    2f2e:	b011      	add	sp, #68	; 0x44
    2f30:	bc3c      	pop	{r2, r3, r4, r5}
    2f32:	4690      	mov	r8, r2
    2f34:	4699      	mov	r9, r3
    2f36:	46a2      	mov	sl, r4
    2f38:	46ab      	mov	fp, r5
    2f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f3c:	2300      	movs	r3, #0
    2f3e:	0030      	movs	r0, r6
    2f40:	0039      	movs	r1, r7
    2f42:	f001 f953 	bl	41ec <__aeabi_dcmpeq>
    2f46:	2800      	cmp	r0, #0
    2f48:	d000      	beq.n	2f4c <pow+0xcc>
    2f4a:	e0eb      	b.n	3124 <pow+0x2a4>
    2f4c:	9b02      	ldr	r3, [sp, #8]
    2f4e:	9c03      	ldr	r4, [sp, #12]
    2f50:	9300      	str	r3, [sp, #0]
    2f52:	9401      	str	r4, [sp, #4]
    2f54:	e7e9      	b.n	2f2a <pow+0xaa>
    2f56:	9802      	ldr	r0, [sp, #8]
    2f58:	9903      	ldr	r1, [sp, #12]
    2f5a:	f000 ff7d 	bl	3e58 <finite>
    2f5e:	4681      	mov	r9, r0
    2f60:	2800      	cmp	r0, #0
    2f62:	d100      	bne.n	2f66 <pow+0xe6>
    2f64:	e086      	b.n	3074 <pow+0x1f4>
    2f66:	9802      	ldr	r0, [sp, #8]
    2f68:	9903      	ldr	r1, [sp, #12]
    2f6a:	2200      	movs	r2, #0
    2f6c:	2300      	movs	r3, #0
    2f6e:	f001 f93d 	bl	41ec <__aeabi_dcmpeq>
    2f72:	2800      	cmp	r0, #0
    2f74:	d0ea      	beq.n	2f4c <pow+0xcc>
    2f76:	0020      	movs	r0, r4
    2f78:	0029      	movs	r1, r5
    2f7a:	f000 ff6d 	bl	3e58 <finite>
    2f7e:	9a02      	ldr	r2, [sp, #8]
    2f80:	9b03      	ldr	r3, [sp, #12]
    2f82:	9200      	str	r2, [sp, #0]
    2f84:	9301      	str	r3, [sp, #4]
    2f86:	2800      	cmp	r0, #0
    2f88:	d0cf      	beq.n	2f2a <pow+0xaa>
    2f8a:	0030      	movs	r0, r6
    2f8c:	0039      	movs	r1, r7
    2f8e:	f000 ff63 	bl	3e58 <finite>
    2f92:	9a02      	ldr	r2, [sp, #8]
    2f94:	9b03      	ldr	r3, [sp, #12]
    2f96:	9200      	str	r2, [sp, #0]
    2f98:	9301      	str	r3, [sp, #4]
    2f9a:	2800      	cmp	r0, #0
    2f9c:	d0c5      	beq.n	2f2a <pow+0xaa>
    2f9e:	ab06      	add	r3, sp, #24
    2fa0:	4698      	mov	r8, r3
    2fa2:	2304      	movs	r3, #4
    2fa4:	4642      	mov	r2, r8
    2fa6:	9306      	str	r3, [sp, #24]
    2fa8:	4b8c      	ldr	r3, [pc, #560]	; (31dc <pow+0x35c>)
    2faa:	6094      	str	r4, [r2, #8]
    2fac:	60d5      	str	r5, [r2, #12]
    2fae:	6053      	str	r3, [r2, #4]
    2fb0:	2300      	movs	r3, #0
    2fb2:	2400      	movs	r4, #0
    2fb4:	6213      	str	r3, [r2, #32]
    2fb6:	2300      	movs	r3, #0
    2fb8:	6193      	str	r3, [r2, #24]
    2fba:	61d4      	str	r4, [r2, #28]
    2fbc:	465b      	mov	r3, fp
    2fbe:	781b      	ldrb	r3, [r3, #0]
    2fc0:	6116      	str	r6, [r2, #16]
    2fc2:	6157      	str	r7, [r2, #20]
    2fc4:	b25b      	sxtb	r3, r3
    2fc6:	2b02      	cmp	r3, #2
    2fc8:	d004      	beq.n	2fd4 <pow+0x154>
    2fca:	4640      	mov	r0, r8
    2fcc:	f000 ff4e 	bl	3e6c <matherr>
    2fd0:	2800      	cmp	r0, #0
    2fd2:	d140      	bne.n	3056 <pow+0x1d6>
    2fd4:	f003 f9a4 	bl	6320 <__errno>
    2fd8:	2322      	movs	r3, #34	; 0x22
    2fda:	6003      	str	r3, [r0, #0]
    2fdc:	e03b      	b.n	3056 <pow+0x1d6>
    2fde:	0030      	movs	r0, r6
    2fe0:	0039      	movs	r1, r7
    2fe2:	f000 ff39 	bl	3e58 <finite>
    2fe6:	9a02      	ldr	r2, [sp, #8]
    2fe8:	9b03      	ldr	r3, [sp, #12]
    2fea:	9200      	str	r2, [sp, #0]
    2fec:	9301      	str	r3, [sp, #4]
    2fee:	2800      	cmp	r0, #0
    2ff0:	d09b      	beq.n	2f2a <pow+0xaa>
    2ff2:	2200      	movs	r2, #0
    2ff4:	2300      	movs	r3, #0
    2ff6:	0030      	movs	r0, r6
    2ff8:	0039      	movs	r1, r7
    2ffa:	f001 f8fd 	bl	41f8 <__aeabi_dcmplt>
    2ffe:	2800      	cmp	r0, #0
    3000:	d100      	bne.n	3004 <pow+0x184>
    3002:	e792      	b.n	2f2a <pow+0xaa>
    3004:	ab06      	add	r3, sp, #24
    3006:	4698      	mov	r8, r3
    3008:	2301      	movs	r3, #1
    300a:	4642      	mov	r2, r8
    300c:	9306      	str	r3, [sp, #24]
    300e:	4b73      	ldr	r3, [pc, #460]	; (31dc <pow+0x35c>)
    3010:	6053      	str	r3, [r2, #4]
    3012:	4643      	mov	r3, r8
    3014:	9a05      	ldr	r2, [sp, #20]
    3016:	609c      	str	r4, [r3, #8]
    3018:	60dd      	str	r5, [r3, #12]
    301a:	621a      	str	r2, [r3, #32]
    301c:	611e      	str	r6, [r3, #16]
    301e:	615f      	str	r7, [r3, #20]
    3020:	465b      	mov	r3, fp
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	b25b      	sxtb	r3, r3
    3026:	2b00      	cmp	r3, #0
    3028:	d00b      	beq.n	3042 <pow+0x1c2>
    302a:	2000      	movs	r0, #0
    302c:	4642      	mov	r2, r8
    302e:	496d      	ldr	r1, [pc, #436]	; (31e4 <pow+0x364>)
    3030:	6190      	str	r0, [r2, #24]
    3032:	61d1      	str	r1, [r2, #28]
    3034:	2b02      	cmp	r3, #2
    3036:	d109      	bne.n	304c <pow+0x1cc>
    3038:	f003 f972 	bl	6320 <__errno>
    303c:	2321      	movs	r3, #33	; 0x21
    303e:	6003      	str	r3, [r0, #0]
    3040:	e009      	b.n	3056 <pow+0x1d6>
    3042:	4642      	mov	r2, r8
    3044:	2300      	movs	r3, #0
    3046:	2400      	movs	r4, #0
    3048:	6193      	str	r3, [r2, #24]
    304a:	61d4      	str	r4, [r2, #28]
    304c:	4640      	mov	r0, r8
    304e:	f000 ff0d 	bl	3e6c <matherr>
    3052:	2800      	cmp	r0, #0
    3054:	d0f0      	beq.n	3038 <pow+0x1b8>
    3056:	4643      	mov	r3, r8
    3058:	6a1b      	ldr	r3, [r3, #32]
    305a:	2b00      	cmp	r3, #0
    305c:	d004      	beq.n	3068 <pow+0x1e8>
    305e:	f003 f95f 	bl	6320 <__errno>
    3062:	4643      	mov	r3, r8
    3064:	6a1b      	ldr	r3, [r3, #32]
    3066:	6003      	str	r3, [r0, #0]
    3068:	4643      	mov	r3, r8
    306a:	69dc      	ldr	r4, [r3, #28]
    306c:	699b      	ldr	r3, [r3, #24]
    306e:	9300      	str	r3, [sp, #0]
    3070:	9401      	str	r4, [sp, #4]
    3072:	e75a      	b.n	2f2a <pow+0xaa>
    3074:	0020      	movs	r0, r4
    3076:	0029      	movs	r1, r5
    3078:	f000 feee 	bl	3e58 <finite>
    307c:	2800      	cmp	r0, #0
    307e:	d100      	bne.n	3082 <pow+0x202>
    3080:	e771      	b.n	2f66 <pow+0xe6>
    3082:	0030      	movs	r0, r6
    3084:	0039      	movs	r1, r7
    3086:	f000 fee7 	bl	3e58 <finite>
    308a:	2800      	cmp	r0, #0
    308c:	d100      	bne.n	3090 <pow+0x210>
    308e:	e76a      	b.n	2f66 <pow+0xe6>
    3090:	9802      	ldr	r0, [sp, #8]
    3092:	9903      	ldr	r1, [sp, #12]
    3094:	000b      	movs	r3, r1
    3096:	0002      	movs	r2, r0
    3098:	f002 ff74 	bl	5f84 <__aeabi_dcmpun>
    309c:	ab06      	add	r3, sp, #24
    309e:	4698      	mov	r8, r3
    30a0:	2800      	cmp	r0, #0
    30a2:	d17a      	bne.n	319a <pow+0x31a>
    30a4:	2303      	movs	r3, #3
    30a6:	4642      	mov	r2, r8
    30a8:	9306      	str	r3, [sp, #24]
    30aa:	4b4c      	ldr	r3, [pc, #304]	; (31dc <pow+0x35c>)
    30ac:	6210      	str	r0, [r2, #32]
    30ae:	6053      	str	r3, [r2, #4]
    30b0:	465b      	mov	r3, fp
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	6094      	str	r4, [r2, #8]
    30b6:	60d5      	str	r5, [r2, #12]
    30b8:	b25b      	sxtb	r3, r3
    30ba:	6116      	str	r6, [r2, #16]
    30bc:	6157      	str	r7, [r2, #20]
    30be:	4699      	mov	r9, r3
    30c0:	2b00      	cmp	r3, #0
    30c2:	d148      	bne.n	3156 <pow+0x2d6>
    30c4:	22e0      	movs	r2, #224	; 0xe0
    30c6:	4641      	mov	r1, r8
    30c8:	4b47      	ldr	r3, [pc, #284]	; (31e8 <pow+0x368>)
    30ca:	0612      	lsls	r2, r2, #24
    30cc:	618a      	str	r2, [r1, #24]
    30ce:	61cb      	str	r3, [r1, #28]
    30d0:	0020      	movs	r0, r4
    30d2:	2200      	movs	r2, #0
    30d4:	2300      	movs	r3, #0
    30d6:	0029      	movs	r1, r5
    30d8:	f001 f88e 	bl	41f8 <__aeabi_dcmplt>
    30dc:	2800      	cmp	r0, #0
    30de:	d100      	bne.n	30e2 <pow+0x262>
    30e0:	e773      	b.n	2fca <pow+0x14a>
    30e2:	2200      	movs	r2, #0
    30e4:	4b41      	ldr	r3, [pc, #260]	; (31ec <pow+0x36c>)
    30e6:	0030      	movs	r0, r6
    30e8:	0039      	movs	r1, r7
    30ea:	f002 f97d 	bl	53e8 <__aeabi_dmul>
    30ee:	0004      	movs	r4, r0
    30f0:	000d      	movs	r5, r1
    30f2:	f000 fec3 	bl	3e7c <rint>
    30f6:	0002      	movs	r2, r0
    30f8:	000b      	movs	r3, r1
    30fa:	0020      	movs	r0, r4
    30fc:	0029      	movs	r1, r5
    30fe:	f001 f875 	bl	41ec <__aeabi_dcmpeq>
    3102:	2800      	cmp	r0, #0
    3104:	d105      	bne.n	3112 <pow+0x292>
    3106:	22e0      	movs	r2, #224	; 0xe0
    3108:	4b39      	ldr	r3, [pc, #228]	; (31f0 <pow+0x370>)
    310a:	0612      	lsls	r2, r2, #24
    310c:	4641      	mov	r1, r8
    310e:	618a      	str	r2, [r1, #24]
    3110:	61cb      	str	r3, [r1, #28]
    3112:	465b      	mov	r3, fp
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	b25b      	sxtb	r3, r3
    3118:	4699      	mov	r9, r3
    311a:	464b      	mov	r3, r9
    311c:	2b02      	cmp	r3, #2
    311e:	d000      	beq.n	3122 <pow+0x2a2>
    3120:	e753      	b.n	2fca <pow+0x14a>
    3122:	e757      	b.n	2fd4 <pow+0x154>
    3124:	ab06      	add	r3, sp, #24
    3126:	4698      	mov	r8, r3
    3128:	2301      	movs	r3, #1
    312a:	4642      	mov	r2, r8
    312c:	9306      	str	r3, [sp, #24]
    312e:	4b2b      	ldr	r3, [pc, #172]	; (31dc <pow+0x35c>)
    3130:	6053      	str	r3, [r2, #4]
    3132:	4643      	mov	r3, r8
    3134:	609c      	str	r4, [r3, #8]
    3136:	60dd      	str	r5, [r3, #12]
    3138:	2400      	movs	r4, #0
    313a:	9a00      	ldr	r2, [sp, #0]
    313c:	4d28      	ldr	r5, [pc, #160]	; (31e0 <pow+0x360>)
    313e:	621a      	str	r2, [r3, #32]
    3140:	611e      	str	r6, [r3, #16]
    3142:	615f      	str	r7, [r3, #20]
    3144:	619c      	str	r4, [r3, #24]
    3146:	61dd      	str	r5, [r3, #28]
    3148:	464b      	mov	r3, r9
    314a:	9400      	str	r4, [sp, #0]
    314c:	9501      	str	r5, [sp, #4]
    314e:	2b02      	cmp	r3, #2
    3150:	d000      	beq.n	3154 <pow+0x2d4>
    3152:	e77b      	b.n	304c <pow+0x1cc>
    3154:	e6e9      	b.n	2f2a <pow+0xaa>
    3156:	2200      	movs	r2, #0
    3158:	4641      	mov	r1, r8
    315a:	4b26      	ldr	r3, [pc, #152]	; (31f4 <pow+0x374>)
    315c:	0020      	movs	r0, r4
    315e:	618a      	str	r2, [r1, #24]
    3160:	61cb      	str	r3, [r1, #28]
    3162:	2200      	movs	r2, #0
    3164:	2300      	movs	r3, #0
    3166:	0029      	movs	r1, r5
    3168:	f001 f846 	bl	41f8 <__aeabi_dcmplt>
    316c:	2800      	cmp	r0, #0
    316e:	d0d4      	beq.n	311a <pow+0x29a>
    3170:	2200      	movs	r2, #0
    3172:	4b1e      	ldr	r3, [pc, #120]	; (31ec <pow+0x36c>)
    3174:	0030      	movs	r0, r6
    3176:	0039      	movs	r1, r7
    3178:	f002 f936 	bl	53e8 <__aeabi_dmul>
    317c:	0004      	movs	r4, r0
    317e:	000d      	movs	r5, r1
    3180:	f000 fe7c 	bl	3e7c <rint>
    3184:	0002      	movs	r2, r0
    3186:	000b      	movs	r3, r1
    3188:	0020      	movs	r0, r4
    318a:	0029      	movs	r1, r5
    318c:	f001 f82e 	bl	41ec <__aeabi_dcmpeq>
    3190:	2800      	cmp	r0, #0
    3192:	d1be      	bne.n	3112 <pow+0x292>
    3194:	2200      	movs	r2, #0
    3196:	4b13      	ldr	r3, [pc, #76]	; (31e4 <pow+0x364>)
    3198:	e7b8      	b.n	310c <pow+0x28c>
    319a:	2301      	movs	r3, #1
    319c:	4642      	mov	r2, r8
    319e:	9306      	str	r3, [sp, #24]
    31a0:	4b0e      	ldr	r3, [pc, #56]	; (31dc <pow+0x35c>)
    31a2:	6053      	str	r3, [r2, #4]
    31a4:	4643      	mov	r3, r8
    31a6:	464a      	mov	r2, r9
    31a8:	609c      	str	r4, [r3, #8]
    31aa:	60dd      	str	r5, [r3, #12]
    31ac:	621a      	str	r2, [r3, #32]
    31ae:	611e      	str	r6, [r3, #16]
    31b0:	615f      	str	r7, [r3, #20]
    31b2:	2400      	movs	r4, #0
    31b4:	465b      	mov	r3, fp
    31b6:	571c      	ldrsb	r4, [r3, r4]
    31b8:	2c00      	cmp	r4, #0
    31ba:	d100      	bne.n	31be <pow+0x33e>
    31bc:	e741      	b.n	3042 <pow+0x1c2>
    31be:	2300      	movs	r3, #0
    31c0:	2200      	movs	r2, #0
    31c2:	0019      	movs	r1, r3
    31c4:	0010      	movs	r0, r2
    31c6:	f001 fceb 	bl	4ba0 <__aeabi_ddiv>
    31ca:	4643      	mov	r3, r8
    31cc:	6198      	str	r0, [r3, #24]
    31ce:	61d9      	str	r1, [r3, #28]
    31d0:	2c02      	cmp	r4, #2
    31d2:	d100      	bne.n	31d6 <pow+0x356>
    31d4:	e730      	b.n	3038 <pow+0x1b8>
    31d6:	e739      	b.n	304c <pow+0x1cc>
    31d8:	20000070 	.word	0x20000070
    31dc:	000064c4 	.word	0x000064c4
    31e0:	3ff00000 	.word	0x3ff00000
    31e4:	fff00000 	.word	0xfff00000
    31e8:	47efffff 	.word	0x47efffff
    31ec:	3fe00000 	.word	0x3fe00000
    31f0:	c7efffff 	.word	0xc7efffff
    31f4:	7ff00000 	.word	0x7ff00000

000031f8 <__ieee754_pow>:
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fa:	4656      	mov	r6, sl
    31fc:	464d      	mov	r5, r9
    31fe:	4644      	mov	r4, r8
    3200:	465f      	mov	r7, fp
    3202:	b4f0      	push	{r4, r5, r6, r7}
    3204:	001c      	movs	r4, r3
    3206:	0013      	movs	r3, r2
    3208:	0067      	lsls	r7, r4, #1
    320a:	b091      	sub	sp, #68	; 0x44
    320c:	087f      	lsrs	r7, r7, #1
    320e:	9300      	str	r3, [sp, #0]
    3210:	9401      	str	r4, [sp, #4]
    3212:	0006      	movs	r6, r0
    3214:	000d      	movs	r5, r1
    3216:	4680      	mov	r8, r0
    3218:	4689      	mov	r9, r1
    321a:	46a2      	mov	sl, r4
    321c:	433b      	orrs	r3, r7
    321e:	d032      	beq.n	3286 <__ieee754_pow+0x8e>
    3220:	4b6e      	ldr	r3, [pc, #440]	; (33dc <__ieee754_pow+0x1e4>)
    3222:	006c      	lsls	r4, r5, #1
    3224:	0864      	lsrs	r4, r4, #1
    3226:	429c      	cmp	r4, r3
    3228:	dc29      	bgt.n	327e <__ieee754_pow+0x86>
    322a:	d026      	beq.n	327a <__ieee754_pow+0x82>
    322c:	429f      	cmp	r7, r3
    322e:	dc26      	bgt.n	327e <__ieee754_pow+0x86>
    3230:	4b6a      	ldr	r3, [pc, #424]	; (33dc <__ieee754_pow+0x1e4>)
    3232:	429f      	cmp	r7, r3
    3234:	d100      	bne.n	3238 <__ieee754_pow+0x40>
    3236:	e089      	b.n	334c <__ieee754_pow+0x154>
    3238:	2300      	movs	r3, #0
    323a:	469b      	mov	fp, r3
    323c:	464b      	mov	r3, r9
    323e:	2b00      	cmp	r3, #0
    3240:	da00      	bge.n	3244 <__ieee754_pow+0x4c>
    3242:	e087      	b.n	3354 <__ieee754_pow+0x15c>
    3244:	2a00      	cmp	r2, #0
    3246:	d12f      	bne.n	32a8 <__ieee754_pow+0xb0>
    3248:	4b64      	ldr	r3, [pc, #400]	; (33dc <__ieee754_pow+0x1e4>)
    324a:	429f      	cmp	r7, r3
    324c:	d100      	bne.n	3250 <__ieee754_pow+0x58>
    324e:	e09f      	b.n	3390 <__ieee754_pow+0x198>
    3250:	4b63      	ldr	r3, [pc, #396]	; (33e0 <__ieee754_pow+0x1e8>)
    3252:	429f      	cmp	r7, r3
    3254:	d05d      	beq.n	3312 <__ieee754_pow+0x11a>
    3256:	2380      	movs	r3, #128	; 0x80
    3258:	05db      	lsls	r3, r3, #23
    325a:	459a      	cmp	sl, r3
    325c:	d101      	bne.n	3262 <__ieee754_pow+0x6a>
    325e:	f000 fbc1 	bl	39e4 <__ieee754_pow+0x7ec>
    3262:	4b60      	ldr	r3, [pc, #384]	; (33e4 <__ieee754_pow+0x1ec>)
    3264:	459a      	cmp	sl, r3
    3266:	d11f      	bne.n	32a8 <__ieee754_pow+0xb0>
    3268:	464b      	mov	r3, r9
    326a:	2b00      	cmp	r3, #0
    326c:	db1c      	blt.n	32a8 <__ieee754_pow+0xb0>
    326e:	0030      	movs	r0, r6
    3270:	0029      	movs	r1, r5
    3272:	f000 fcf7 	bl	3c64 <__ieee754_sqrt>
    3276:	0006      	movs	r6, r0
    3278:	e007      	b.n	328a <__ieee754_pow+0x92>
    327a:	2800      	cmp	r0, #0
    327c:	d00d      	beq.n	329a <__ieee754_pow+0xa2>
    327e:	4b5a      	ldr	r3, [pc, #360]	; (33e8 <__ieee754_pow+0x1f0>)
    3280:	18e0      	adds	r0, r4, r3
    3282:	4330      	orrs	r0, r6
    3284:	d10b      	bne.n	329e <__ieee754_pow+0xa6>
    3286:	2600      	movs	r6, #0
    3288:	4955      	ldr	r1, [pc, #340]	; (33e0 <__ieee754_pow+0x1e8>)
    328a:	0030      	movs	r0, r6
    328c:	b011      	add	sp, #68	; 0x44
    328e:	bc3c      	pop	{r2, r3, r4, r5}
    3290:	4690      	mov	r8, r2
    3292:	4699      	mov	r9, r3
    3294:	46a2      	mov	sl, r4
    3296:	46ab      	mov	fp, r5
    3298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    329a:	42a7      	cmp	r7, r4
    329c:	ddc8      	ble.n	3230 <__ieee754_pow+0x38>
    329e:	4853      	ldr	r0, [pc, #332]	; (33ec <__ieee754_pow+0x1f4>)
    32a0:	f000 fde6 	bl	3e70 <nan>
    32a4:	0006      	movs	r6, r0
    32a6:	e7f0      	b.n	328a <__ieee754_pow+0x92>
    32a8:	0030      	movs	r0, r6
    32aa:	0029      	movs	r1, r5
    32ac:	f000 fdd0 	bl	3e50 <fabs>
    32b0:	4643      	mov	r3, r8
    32b2:	2b00      	cmp	r3, #0
    32b4:	d01d      	beq.n	32f2 <__ieee754_pow+0xfa>
    32b6:	0feb      	lsrs	r3, r5, #31
    32b8:	3b01      	subs	r3, #1
    32ba:	4698      	mov	r8, r3
    32bc:	465b      	mov	r3, fp
    32be:	4642      	mov	r2, r8
    32c0:	4313      	orrs	r3, r2
    32c2:	d079      	beq.n	33b8 <__ieee754_pow+0x1c0>
    32c4:	4b4a      	ldr	r3, [pc, #296]	; (33f0 <__ieee754_pow+0x1f8>)
    32c6:	429f      	cmp	r7, r3
    32c8:	dc00      	bgt.n	32cc <__ieee754_pow+0xd4>
    32ca:	e09f      	b.n	340c <__ieee754_pow+0x214>
    32cc:	4b49      	ldr	r3, [pc, #292]	; (33f4 <__ieee754_pow+0x1fc>)
    32ce:	429f      	cmp	r7, r3
    32d0:	dc01      	bgt.n	32d6 <__ieee754_pow+0xde>
    32d2:	f000 fbce 	bl	3a72 <__ieee754_pow+0x87a>
    32d6:	4b48      	ldr	r3, [pc, #288]	; (33f8 <__ieee754_pow+0x200>)
    32d8:	429c      	cmp	r4, r3
    32da:	dd79      	ble.n	33d0 <__ieee754_pow+0x1d8>
    32dc:	4653      	mov	r3, sl
    32de:	2b00      	cmp	r3, #0
    32e0:	dd79      	ble.n	33d6 <__ieee754_pow+0x1de>
    32e2:	4a46      	ldr	r2, [pc, #280]	; (33fc <__ieee754_pow+0x204>)
    32e4:	4b46      	ldr	r3, [pc, #280]	; (3400 <__ieee754_pow+0x208>)
    32e6:	0010      	movs	r0, r2
    32e8:	0019      	movs	r1, r3
    32ea:	f002 f87d 	bl	53e8 <__aeabi_dmul>
    32ee:	0006      	movs	r6, r0
    32f0:	e7cb      	b.n	328a <__ieee754_pow+0x92>
    32f2:	2c00      	cmp	r4, #0
    32f4:	d004      	beq.n	3300 <__ieee754_pow+0x108>
    32f6:	4a3a      	ldr	r2, [pc, #232]	; (33e0 <__ieee754_pow+0x1e8>)
    32f8:	00ab      	lsls	r3, r5, #2
    32fa:	089b      	lsrs	r3, r3, #2
    32fc:	4293      	cmp	r3, r2
    32fe:	d1da      	bne.n	32b6 <__ieee754_pow+0xbe>
    3300:	4653      	mov	r3, sl
    3302:	2b00      	cmp	r3, #0
    3304:	da00      	bge.n	3308 <__ieee754_pow+0x110>
    3306:	e3ad      	b.n	3a64 <__ieee754_pow+0x86c>
    3308:	464b      	mov	r3, r9
    330a:	2b00      	cmp	r3, #0
    330c:	db0d      	blt.n	332a <__ieee754_pow+0x132>
    330e:	0006      	movs	r6, r0
    3310:	e7bb      	b.n	328a <__ieee754_pow+0x92>
    3312:	4653      	mov	r3, sl
    3314:	0029      	movs	r1, r5
    3316:	2b00      	cmp	r3, #0
    3318:	dab7      	bge.n	328a <__ieee754_pow+0x92>
    331a:	0032      	movs	r2, r6
    331c:	002b      	movs	r3, r5
    331e:	2000      	movs	r0, #0
    3320:	492f      	ldr	r1, [pc, #188]	; (33e0 <__ieee754_pow+0x1e8>)
    3322:	f001 fc3d 	bl	4ba0 <__aeabi_ddiv>
    3326:	0006      	movs	r6, r0
    3328:	e7af      	b.n	328a <__ieee754_pow+0x92>
    332a:	4b2f      	ldr	r3, [pc, #188]	; (33e8 <__ieee754_pow+0x1f0>)
    332c:	469c      	mov	ip, r3
    332e:	465b      	mov	r3, fp
    3330:	4464      	add	r4, ip
    3332:	431c      	orrs	r4, r3
    3334:	d101      	bne.n	333a <__ieee754_pow+0x142>
    3336:	f000 fc2b 	bl	3b90 <__ieee754_pow+0x998>
    333a:	465b      	mov	r3, fp
    333c:	0006      	movs	r6, r0
    333e:	2b01      	cmp	r3, #1
    3340:	d1a3      	bne.n	328a <__ieee754_pow+0x92>
    3342:	2380      	movs	r3, #128	; 0x80
    3344:	061b      	lsls	r3, r3, #24
    3346:	469c      	mov	ip, r3
    3348:	4461      	add	r1, ip
    334a:	e79e      	b.n	328a <__ieee754_pow+0x92>
    334c:	2a00      	cmp	r2, #0
    334e:	d100      	bne.n	3352 <__ieee754_pow+0x15a>
    3350:	e772      	b.n	3238 <__ieee754_pow+0x40>
    3352:	e794      	b.n	327e <__ieee754_pow+0x86>
    3354:	4b2b      	ldr	r3, [pc, #172]	; (3404 <__ieee754_pow+0x20c>)
    3356:	429f      	cmp	r7, r3
    3358:	dc2b      	bgt.n	33b2 <__ieee754_pow+0x1ba>
    335a:	4b27      	ldr	r3, [pc, #156]	; (33f8 <__ieee754_pow+0x200>)
    335c:	429f      	cmp	r7, r3
    335e:	dc00      	bgt.n	3362 <__ieee754_pow+0x16a>
    3360:	e770      	b.n	3244 <__ieee754_pow+0x4c>
    3362:	4929      	ldr	r1, [pc, #164]	; (3408 <__ieee754_pow+0x210>)
    3364:	153b      	asrs	r3, r7, #20
    3366:	468c      	mov	ip, r1
    3368:	4463      	add	r3, ip
    336a:	2b14      	cmp	r3, #20
    336c:	dc01      	bgt.n	3372 <__ieee754_pow+0x17a>
    336e:	f000 fbf2 	bl	3b56 <__ieee754_pow+0x95e>
    3372:	2134      	movs	r1, #52	; 0x34
    3374:	1acb      	subs	r3, r1, r3
    3376:	9900      	ldr	r1, [sp, #0]
    3378:	40d9      	lsrs	r1, r3
    337a:	0008      	movs	r0, r1
    337c:	4098      	lsls	r0, r3
    337e:	4282      	cmp	r2, r0
    3380:	d000      	beq.n	3384 <__ieee754_pow+0x18c>
    3382:	e75f      	b.n	3244 <__ieee754_pow+0x4c>
    3384:	2301      	movs	r3, #1
    3386:	4019      	ands	r1, r3
    3388:	3301      	adds	r3, #1
    338a:	1a5b      	subs	r3, r3, r1
    338c:	469b      	mov	fp, r3
    338e:	e759      	b.n	3244 <__ieee754_pow+0x4c>
    3390:	4b15      	ldr	r3, [pc, #84]	; (33e8 <__ieee754_pow+0x1f0>)
    3392:	18e0      	adds	r0, r4, r3
    3394:	4306      	orrs	r6, r0
    3396:	d100      	bne.n	339a <__ieee754_pow+0x1a2>
    3398:	e775      	b.n	3286 <__ieee754_pow+0x8e>
    339a:	4b17      	ldr	r3, [pc, #92]	; (33f8 <__ieee754_pow+0x200>)
    339c:	429c      	cmp	r4, r3
    339e:	dc00      	bgt.n	33a2 <__ieee754_pow+0x1aa>
    33a0:	e351      	b.n	3a46 <__ieee754_pow+0x84e>
    33a2:	4653      	mov	r3, sl
    33a4:	2b00      	cmp	r3, #0
    33a6:	db16      	blt.n	33d6 <__ieee754_pow+0x1de>
    33a8:	9b00      	ldr	r3, [sp, #0]
    33aa:	9c01      	ldr	r4, [sp, #4]
    33ac:	001e      	movs	r6, r3
    33ae:	0021      	movs	r1, r4
    33b0:	e76b      	b.n	328a <__ieee754_pow+0x92>
    33b2:	2302      	movs	r3, #2
    33b4:	469b      	mov	fp, r3
    33b6:	e745      	b.n	3244 <__ieee754_pow+0x4c>
    33b8:	0032      	movs	r2, r6
    33ba:	002b      	movs	r3, r5
    33bc:	0030      	movs	r0, r6
    33be:	0029      	movs	r1, r5
    33c0:	f002 fa8c 	bl	58dc <__aeabi_dsub>
    33c4:	0002      	movs	r2, r0
    33c6:	000b      	movs	r3, r1
    33c8:	f001 fbea 	bl	4ba0 <__aeabi_ddiv>
    33cc:	0006      	movs	r6, r0
    33ce:	e75c      	b.n	328a <__ieee754_pow+0x92>
    33d0:	4653      	mov	r3, sl
    33d2:	2b00      	cmp	r3, #0
    33d4:	db85      	blt.n	32e2 <__ieee754_pow+0xea>
    33d6:	2600      	movs	r6, #0
    33d8:	2100      	movs	r1, #0
    33da:	e756      	b.n	328a <__ieee754_pow+0x92>
    33dc:	7ff00000 	.word	0x7ff00000
    33e0:	3ff00000 	.word	0x3ff00000
    33e4:	3fe00000 	.word	0x3fe00000
    33e8:	c0100000 	.word	0xc0100000
    33ec:	000064c8 	.word	0x000064c8
    33f0:	41e00000 	.word	0x41e00000
    33f4:	43f00000 	.word	0x43f00000
    33f8:	3fefffff 	.word	0x3fefffff
    33fc:	8800759c 	.word	0x8800759c
    3400:	7e37e43c 	.word	0x7e37e43c
    3404:	433fffff 	.word	0x433fffff
    3408:	fffffc01 	.word	0xfffffc01
    340c:	4be8      	ldr	r3, [pc, #928]	; (37b0 <__ieee754_pow+0x5b8>)
    340e:	2200      	movs	r2, #0
    3410:	429c      	cmp	r4, r3
    3412:	dc06      	bgt.n	3422 <__ieee754_pow+0x22a>
    3414:	2200      	movs	r2, #0
    3416:	4be7      	ldr	r3, [pc, #924]	; (37b4 <__ieee754_pow+0x5bc>)
    3418:	f001 ffe6 	bl	53e8 <__aeabi_dmul>
    341c:	2235      	movs	r2, #53	; 0x35
    341e:	000c      	movs	r4, r1
    3420:	4252      	negs	r2, r2
    3422:	4de5      	ldr	r5, [pc, #916]	; (37b8 <__ieee754_pow+0x5c0>)
    3424:	1523      	asrs	r3, r4, #20
    3426:	46ac      	mov	ip, r5
    3428:	4463      	add	r3, ip
    342a:	4699      	mov	r9, r3
    342c:	0324      	lsls	r4, r4, #12
    342e:	4de3      	ldr	r5, [pc, #908]	; (37bc <__ieee754_pow+0x5c4>)
    3430:	4be3      	ldr	r3, [pc, #908]	; (37c0 <__ieee754_pow+0x5c8>)
    3432:	0b24      	lsrs	r4, r4, #12
    3434:	4491      	add	r9, r2
    3436:	4325      	orrs	r5, r4
    3438:	429c      	cmp	r4, r3
    343a:	dd09      	ble.n	3450 <__ieee754_pow+0x258>
    343c:	4be1      	ldr	r3, [pc, #900]	; (37c4 <__ieee754_pow+0x5cc>)
    343e:	429c      	cmp	r4, r3
    3440:	dc00      	bgt.n	3444 <__ieee754_pow+0x24c>
    3442:	e3a9      	b.n	3b98 <__ieee754_pow+0x9a0>
    3444:	2301      	movs	r3, #1
    3446:	469c      	mov	ip, r3
    3448:	4bdf      	ldr	r3, [pc, #892]	; (37c8 <__ieee754_pow+0x5d0>)
    344a:	44e1      	add	r9, ip
    344c:	469c      	mov	ip, r3
    344e:	4465      	add	r5, ip
    3450:	2300      	movs	r3, #0
    3452:	2400      	movs	r4, #0
    3454:	2200      	movs	r2, #0
    3456:	9308      	str	r3, [sp, #32]
    3458:	9409      	str	r4, [sp, #36]	; 0x24
    345a:	930c      	str	r3, [sp, #48]	; 0x30
    345c:	940d      	str	r4, [sp, #52]	; 0x34
    345e:	2400      	movs	r4, #0
    3460:	4bd6      	ldr	r3, [pc, #856]	; (37bc <__ieee754_pow+0x5c4>)
    3462:	9206      	str	r2, [sp, #24]
    3464:	9307      	str	r3, [sp, #28]
    3466:	9a06      	ldr	r2, [sp, #24]
    3468:	9b07      	ldr	r3, [sp, #28]
    346a:	0029      	movs	r1, r5
    346c:	900a      	str	r0, [sp, #40]	; 0x28
    346e:	910b      	str	r1, [sp, #44]	; 0x2c
    3470:	f002 fa34 	bl	58dc <__aeabi_dsub>
    3474:	9a06      	ldr	r2, [sp, #24]
    3476:	9b07      	ldr	r3, [sp, #28]
    3478:	0006      	movs	r6, r0
    347a:	000f      	movs	r7, r1
    347c:	980a      	ldr	r0, [sp, #40]	; 0x28
    347e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3480:	f001 f862 	bl	4548 <__aeabi_dadd>
    3484:	0002      	movs	r2, r0
    3486:	000b      	movs	r3, r1
    3488:	2000      	movs	r0, #0
    348a:	49cc      	ldr	r1, [pc, #816]	; (37bc <__ieee754_pow+0x5c4>)
    348c:	f001 fb88 	bl	4ba0 <__aeabi_ddiv>
    3490:	000a      	movs	r2, r1
    3492:	0001      	movs	r1, r0
    3494:	0013      	movs	r3, r2
    3496:	910e      	str	r1, [sp, #56]	; 0x38
    3498:	920f      	str	r2, [sp, #60]	; 0x3c
    349a:	0002      	movs	r2, r0
    349c:	0039      	movs	r1, r7
    349e:	0030      	movs	r0, r6
    34a0:	f001 ffa2 	bl	53e8 <__aeabi_dmul>
    34a4:	000a      	movs	r2, r1
    34a6:	0001      	movs	r1, r0
    34a8:	2080      	movs	r0, #128	; 0x80
    34aa:	9104      	str	r1, [sp, #16]
    34ac:	9205      	str	r2, [sp, #20]
    34ae:	0013      	movs	r3, r2
    34b0:	2200      	movs	r2, #0
    34b2:	2180      	movs	r1, #128	; 0x80
    34b4:	0300      	lsls	r0, r0, #12
    34b6:	4684      	mov	ip, r0
    34b8:	9202      	str	r2, [sp, #8]
    34ba:	9303      	str	r3, [sp, #12]
    34bc:	2200      	movs	r2, #0
    34be:	0589      	lsls	r1, r1, #22
    34c0:	106d      	asrs	r5, r5, #1
    34c2:	430d      	orrs	r5, r1
    34c4:	4465      	add	r5, ip
    34c6:	192b      	adds	r3, r5, r4
    34c8:	9802      	ldr	r0, [sp, #8]
    34ca:	9903      	ldr	r1, [sp, #12]
    34cc:	0014      	movs	r4, r2
    34ce:	001d      	movs	r5, r3
    34d0:	f001 ff8a 	bl	53e8 <__aeabi_dmul>
    34d4:	0002      	movs	r2, r0
    34d6:	000b      	movs	r3, r1
    34d8:	0030      	movs	r0, r6
    34da:	0039      	movs	r1, r7
    34dc:	f002 f9fe 	bl	58dc <__aeabi_dsub>
    34e0:	9a06      	ldr	r2, [sp, #24]
    34e2:	9b07      	ldr	r3, [sp, #28]
    34e4:	0006      	movs	r6, r0
    34e6:	000f      	movs	r7, r1
    34e8:	0020      	movs	r0, r4
    34ea:	0029      	movs	r1, r5
    34ec:	f002 f9f6 	bl	58dc <__aeabi_dsub>
    34f0:	0002      	movs	r2, r0
    34f2:	000b      	movs	r3, r1
    34f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    34f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    34f8:	f002 f9f0 	bl	58dc <__aeabi_dsub>
    34fc:	9a02      	ldr	r2, [sp, #8]
    34fe:	9b03      	ldr	r3, [sp, #12]
    3500:	f001 ff72 	bl	53e8 <__aeabi_dmul>
    3504:	0002      	movs	r2, r0
    3506:	000b      	movs	r3, r1
    3508:	0030      	movs	r0, r6
    350a:	0039      	movs	r1, r7
    350c:	f002 f9e6 	bl	58dc <__aeabi_dsub>
    3510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3514:	f001 ff68 	bl	53e8 <__aeabi_dmul>
    3518:	9d04      	ldr	r5, [sp, #16]
    351a:	9e05      	ldr	r6, [sp, #20]
    351c:	9006      	str	r0, [sp, #24]
    351e:	9107      	str	r1, [sp, #28]
    3520:	002a      	movs	r2, r5
    3522:	0033      	movs	r3, r6
    3524:	0028      	movs	r0, r5
    3526:	0031      	movs	r1, r6
    3528:	f001 ff5e 	bl	53e8 <__aeabi_dmul>
    352c:	0006      	movs	r6, r0
    352e:	000f      	movs	r7, r1
    3530:	4aa6      	ldr	r2, [pc, #664]	; (37cc <__ieee754_pow+0x5d4>)
    3532:	4ba7      	ldr	r3, [pc, #668]	; (37d0 <__ieee754_pow+0x5d8>)
    3534:	f001 ff58 	bl	53e8 <__aeabi_dmul>
    3538:	4aa6      	ldr	r2, [pc, #664]	; (37d4 <__ieee754_pow+0x5dc>)
    353a:	4ba7      	ldr	r3, [pc, #668]	; (37d8 <__ieee754_pow+0x5e0>)
    353c:	f001 f804 	bl	4548 <__aeabi_dadd>
    3540:	0032      	movs	r2, r6
    3542:	003b      	movs	r3, r7
    3544:	f001 ff50 	bl	53e8 <__aeabi_dmul>
    3548:	4aa4      	ldr	r2, [pc, #656]	; (37dc <__ieee754_pow+0x5e4>)
    354a:	4ba5      	ldr	r3, [pc, #660]	; (37e0 <__ieee754_pow+0x5e8>)
    354c:	f000 fffc 	bl	4548 <__aeabi_dadd>
    3550:	0032      	movs	r2, r6
    3552:	003b      	movs	r3, r7
    3554:	f001 ff48 	bl	53e8 <__aeabi_dmul>
    3558:	4aa2      	ldr	r2, [pc, #648]	; (37e4 <__ieee754_pow+0x5ec>)
    355a:	4ba3      	ldr	r3, [pc, #652]	; (37e8 <__ieee754_pow+0x5f0>)
    355c:	f000 fff4 	bl	4548 <__aeabi_dadd>
    3560:	0032      	movs	r2, r6
    3562:	003b      	movs	r3, r7
    3564:	f001 ff40 	bl	53e8 <__aeabi_dmul>
    3568:	4aa0      	ldr	r2, [pc, #640]	; (37ec <__ieee754_pow+0x5f4>)
    356a:	4ba1      	ldr	r3, [pc, #644]	; (37f0 <__ieee754_pow+0x5f8>)
    356c:	f000 ffec 	bl	4548 <__aeabi_dadd>
    3570:	0032      	movs	r2, r6
    3572:	003b      	movs	r3, r7
    3574:	f001 ff38 	bl	53e8 <__aeabi_dmul>
    3578:	4a9e      	ldr	r2, [pc, #632]	; (37f4 <__ieee754_pow+0x5fc>)
    357a:	4b9f      	ldr	r3, [pc, #636]	; (37f8 <__ieee754_pow+0x600>)
    357c:	f000 ffe4 	bl	4548 <__aeabi_dadd>
    3580:	0032      	movs	r2, r6
    3582:	0004      	movs	r4, r0
    3584:	000d      	movs	r5, r1
    3586:	003b      	movs	r3, r7
    3588:	0030      	movs	r0, r6
    358a:	0039      	movs	r1, r7
    358c:	f001 ff2c 	bl	53e8 <__aeabi_dmul>
    3590:	0002      	movs	r2, r0
    3592:	000b      	movs	r3, r1
    3594:	0020      	movs	r0, r4
    3596:	0029      	movs	r1, r5
    3598:	f001 ff26 	bl	53e8 <__aeabi_dmul>
    359c:	9e02      	ldr	r6, [sp, #8]
    359e:	9f03      	ldr	r7, [sp, #12]
    35a0:	0004      	movs	r4, r0
    35a2:	000d      	movs	r5, r1
    35a4:	9804      	ldr	r0, [sp, #16]
    35a6:	9905      	ldr	r1, [sp, #20]
    35a8:	0032      	movs	r2, r6
    35aa:	003b      	movs	r3, r7
    35ac:	f000 ffcc 	bl	4548 <__aeabi_dadd>
    35b0:	9a06      	ldr	r2, [sp, #24]
    35b2:	9b07      	ldr	r3, [sp, #28]
    35b4:	f001 ff18 	bl	53e8 <__aeabi_dmul>
    35b8:	0022      	movs	r2, r4
    35ba:	002b      	movs	r3, r5
    35bc:	f000 ffc4 	bl	4548 <__aeabi_dadd>
    35c0:	0032      	movs	r2, r6
    35c2:	900a      	str	r0, [sp, #40]	; 0x28
    35c4:	910b      	str	r1, [sp, #44]	; 0x2c
    35c6:	003b      	movs	r3, r7
    35c8:	0030      	movs	r0, r6
    35ca:	0039      	movs	r1, r7
    35cc:	9602      	str	r6, [sp, #8]
    35ce:	9703      	str	r7, [sp, #12]
    35d0:	f001 ff0a 	bl	53e8 <__aeabi_dmul>
    35d4:	2200      	movs	r2, #0
    35d6:	4b89      	ldr	r3, [pc, #548]	; (37fc <__ieee754_pow+0x604>)
    35d8:	0004      	movs	r4, r0
    35da:	000d      	movs	r5, r1
    35dc:	f000 ffb4 	bl	4548 <__aeabi_dadd>
    35e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    35e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35e4:	f000 ffb0 	bl	4548 <__aeabi_dadd>
    35e8:	2600      	movs	r6, #0
    35ea:	000f      	movs	r7, r1
    35ec:	0032      	movs	r2, r6
    35ee:	000b      	movs	r3, r1
    35f0:	9802      	ldr	r0, [sp, #8]
    35f2:	9903      	ldr	r1, [sp, #12]
    35f4:	f001 fef8 	bl	53e8 <__aeabi_dmul>
    35f8:	2200      	movs	r2, #0
    35fa:	9002      	str	r0, [sp, #8]
    35fc:	9103      	str	r1, [sp, #12]
    35fe:	4b7f      	ldr	r3, [pc, #508]	; (37fc <__ieee754_pow+0x604>)
    3600:	0030      	movs	r0, r6
    3602:	0039      	movs	r1, r7
    3604:	f002 f96a 	bl	58dc <__aeabi_dsub>
    3608:	0022      	movs	r2, r4
    360a:	002b      	movs	r3, r5
    360c:	f002 f966 	bl	58dc <__aeabi_dsub>
    3610:	0002      	movs	r2, r0
    3612:	000b      	movs	r3, r1
    3614:	980a      	ldr	r0, [sp, #40]	; 0x28
    3616:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3618:	f002 f960 	bl	58dc <__aeabi_dsub>
    361c:	9a04      	ldr	r2, [sp, #16]
    361e:	9b05      	ldr	r3, [sp, #20]
    3620:	f001 fee2 	bl	53e8 <__aeabi_dmul>
    3624:	0032      	movs	r2, r6
    3626:	0004      	movs	r4, r0
    3628:	000d      	movs	r5, r1
    362a:	9806      	ldr	r0, [sp, #24]
    362c:	9907      	ldr	r1, [sp, #28]
    362e:	003b      	movs	r3, r7
    3630:	f001 feda 	bl	53e8 <__aeabi_dmul>
    3634:	0002      	movs	r2, r0
    3636:	000b      	movs	r3, r1
    3638:	0020      	movs	r0, r4
    363a:	0029      	movs	r1, r5
    363c:	f000 ff84 	bl	4548 <__aeabi_dadd>
    3640:	0004      	movs	r4, r0
    3642:	000d      	movs	r5, r1
    3644:	0002      	movs	r2, r0
    3646:	000b      	movs	r3, r1
    3648:	9802      	ldr	r0, [sp, #8]
    364a:	9903      	ldr	r1, [sp, #12]
    364c:	f000 ff7c 	bl	4548 <__aeabi_dadd>
    3650:	2600      	movs	r6, #0
    3652:	22e0      	movs	r2, #224	; 0xe0
    3654:	4b6a      	ldr	r3, [pc, #424]	; (3800 <__ieee754_pow+0x608>)
    3656:	0612      	lsls	r2, r2, #24
    3658:	0030      	movs	r0, r6
    365a:	000f      	movs	r7, r1
    365c:	f001 fec4 	bl	53e8 <__aeabi_dmul>
    3660:	9a02      	ldr	r2, [sp, #8]
    3662:	9b03      	ldr	r3, [sp, #12]
    3664:	9004      	str	r0, [sp, #16]
    3666:	9105      	str	r1, [sp, #20]
    3668:	0030      	movs	r0, r6
    366a:	0039      	movs	r1, r7
    366c:	f002 f936 	bl	58dc <__aeabi_dsub>
    3670:	0002      	movs	r2, r0
    3672:	000b      	movs	r3, r1
    3674:	0020      	movs	r0, r4
    3676:	0029      	movs	r1, r5
    3678:	f002 f930 	bl	58dc <__aeabi_dsub>
    367c:	4a61      	ldr	r2, [pc, #388]	; (3804 <__ieee754_pow+0x60c>)
    367e:	4b60      	ldr	r3, [pc, #384]	; (3800 <__ieee754_pow+0x608>)
    3680:	f001 feb2 	bl	53e8 <__aeabi_dmul>
    3684:	4a60      	ldr	r2, [pc, #384]	; (3808 <__ieee754_pow+0x610>)
    3686:	0004      	movs	r4, r0
    3688:	000d      	movs	r5, r1
    368a:	4b60      	ldr	r3, [pc, #384]	; (380c <__ieee754_pow+0x614>)
    368c:	0030      	movs	r0, r6
    368e:	0039      	movs	r1, r7
    3690:	f001 feaa 	bl	53e8 <__aeabi_dmul>
    3694:	0002      	movs	r2, r0
    3696:	000b      	movs	r3, r1
    3698:	0020      	movs	r0, r4
    369a:	0029      	movs	r1, r5
    369c:	f000 ff54 	bl	4548 <__aeabi_dadd>
    36a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    36a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    36a4:	f000 ff50 	bl	4548 <__aeabi_dadd>
    36a8:	0006      	movs	r6, r0
    36aa:	4648      	mov	r0, r9
    36ac:	000f      	movs	r7, r1
    36ae:	f002 fcbf 	bl	6030 <__aeabi_i2d>
    36b2:	0004      	movs	r4, r0
    36b4:	000d      	movs	r5, r1
    36b6:	9804      	ldr	r0, [sp, #16]
    36b8:	9905      	ldr	r1, [sp, #20]
    36ba:	0032      	movs	r2, r6
    36bc:	003b      	movs	r3, r7
    36be:	f000 ff43 	bl	4548 <__aeabi_dadd>
    36c2:	9a08      	ldr	r2, [sp, #32]
    36c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36c6:	f000 ff3f 	bl	4548 <__aeabi_dadd>
    36ca:	0022      	movs	r2, r4
    36cc:	002b      	movs	r3, r5
    36ce:	f000 ff3b 	bl	4548 <__aeabi_dadd>
    36d2:	2000      	movs	r0, #0
    36d4:	0022      	movs	r2, r4
    36d6:	002b      	movs	r3, r5
    36d8:	9002      	str	r0, [sp, #8]
    36da:	9103      	str	r1, [sp, #12]
    36dc:	f002 f8fe 	bl	58dc <__aeabi_dsub>
    36e0:	9a08      	ldr	r2, [sp, #32]
    36e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36e4:	f002 f8fa 	bl	58dc <__aeabi_dsub>
    36e8:	9a04      	ldr	r2, [sp, #16]
    36ea:	9b05      	ldr	r3, [sp, #20]
    36ec:	f002 f8f6 	bl	58dc <__aeabi_dsub>
    36f0:	0002      	movs	r2, r0
    36f2:	000b      	movs	r3, r1
    36f4:	0030      	movs	r0, r6
    36f6:	0039      	movs	r1, r7
    36f8:	f002 f8f0 	bl	58dc <__aeabi_dsub>
    36fc:	9004      	str	r0, [sp, #16]
    36fe:	9105      	str	r1, [sp, #20]
    3700:	465b      	mov	r3, fp
    3702:	4642      	mov	r2, r8
    3704:	3b01      	subs	r3, #1
    3706:	4313      	orrs	r3, r2
    3708:	d100      	bne.n	370c <__ieee754_pow+0x514>
    370a:	e197      	b.n	3a3c <__ieee754_pow+0x844>
    370c:	2300      	movs	r3, #0
    370e:	4c2b      	ldr	r4, [pc, #172]	; (37bc <__ieee754_pow+0x5c4>)
    3710:	9306      	str	r3, [sp, #24]
    3712:	9407      	str	r4, [sp, #28]
    3714:	9800      	ldr	r0, [sp, #0]
    3716:	9901      	ldr	r1, [sp, #4]
    3718:	2600      	movs	r6, #0
    371a:	000b      	movs	r3, r1
    371c:	0032      	movs	r2, r6
    371e:	000f      	movs	r7, r1
    3720:	f002 f8dc 	bl	58dc <__aeabi_dsub>
    3724:	9a02      	ldr	r2, [sp, #8]
    3726:	9b03      	ldr	r3, [sp, #12]
    3728:	f001 fe5e 	bl	53e8 <__aeabi_dmul>
    372c:	9a00      	ldr	r2, [sp, #0]
    372e:	9b01      	ldr	r3, [sp, #4]
    3730:	0004      	movs	r4, r0
    3732:	000d      	movs	r5, r1
    3734:	9804      	ldr	r0, [sp, #16]
    3736:	9905      	ldr	r1, [sp, #20]
    3738:	f001 fe56 	bl	53e8 <__aeabi_dmul>
    373c:	0002      	movs	r2, r0
    373e:	000b      	movs	r3, r1
    3740:	0020      	movs	r0, r4
    3742:	0029      	movs	r1, r5
    3744:	f000 ff00 	bl	4548 <__aeabi_dadd>
    3748:	0004      	movs	r4, r0
    374a:	000d      	movs	r5, r1
    374c:	9802      	ldr	r0, [sp, #8]
    374e:	9903      	ldr	r1, [sp, #12]
    3750:	003b      	movs	r3, r7
    3752:	0032      	movs	r2, r6
    3754:	9404      	str	r4, [sp, #16]
    3756:	9505      	str	r5, [sp, #20]
    3758:	f001 fe46 	bl	53e8 <__aeabi_dmul>
    375c:	9000      	str	r0, [sp, #0]
    375e:	9101      	str	r1, [sp, #4]
    3760:	000b      	movs	r3, r1
    3762:	0002      	movs	r2, r0
    3764:	0029      	movs	r1, r5
    3766:	0020      	movs	r0, r4
    3768:	f000 feee 	bl	4548 <__aeabi_dadd>
    376c:	4b28      	ldr	r3, [pc, #160]	; (3810 <__ieee754_pow+0x618>)
    376e:	4681      	mov	r9, r0
    3770:	1e0f      	subs	r7, r1, #0
    3772:	468a      	mov	sl, r1
    3774:	429f      	cmp	r7, r3
    3776:	dc00      	bgt.n	377a <__ieee754_pow+0x582>
    3778:	e13c      	b.n	39f4 <__ieee754_pow+0x7fc>
    377a:	4b26      	ldr	r3, [pc, #152]	; (3814 <__ieee754_pow+0x61c>)
    377c:	18cb      	adds	r3, r1, r3
    377e:	4303      	orrs	r3, r0
    3780:	d000      	beq.n	3784 <__ieee754_pow+0x58c>
    3782:	e1db      	b.n	3b3c <__ieee754_pow+0x944>
    3784:	9804      	ldr	r0, [sp, #16]
    3786:	9905      	ldr	r1, [sp, #20]
    3788:	4a23      	ldr	r2, [pc, #140]	; (3818 <__ieee754_pow+0x620>)
    378a:	4b24      	ldr	r3, [pc, #144]	; (381c <__ieee754_pow+0x624>)
    378c:	f000 fedc 	bl	4548 <__aeabi_dadd>
    3790:	9a00      	ldr	r2, [sp, #0]
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	0004      	movs	r4, r0
    3796:	000d      	movs	r5, r1
    3798:	4648      	mov	r0, r9
    379a:	0039      	movs	r1, r7
    379c:	f002 f89e 	bl	58dc <__aeabi_dsub>
    37a0:	0002      	movs	r2, r0
    37a2:	000b      	movs	r3, r1
    37a4:	0020      	movs	r0, r4
    37a6:	0029      	movs	r1, r5
    37a8:	f000 fd3a 	bl	4220 <__aeabi_dcmpgt>
    37ac:	003e      	movs	r6, r7
    37ae:	e037      	b.n	3820 <__ieee754_pow+0x628>
    37b0:	000fffff 	.word	0x000fffff
    37b4:	43400000 	.word	0x43400000
    37b8:	fffffc01 	.word	0xfffffc01
    37bc:	3ff00000 	.word	0x3ff00000
    37c0:	0003988e 	.word	0x0003988e
    37c4:	000bb679 	.word	0x000bb679
    37c8:	fff00000 	.word	0xfff00000
    37cc:	4a454eef 	.word	0x4a454eef
    37d0:	3fca7e28 	.word	0x3fca7e28
    37d4:	93c9db65 	.word	0x93c9db65
    37d8:	3fcd864a 	.word	0x3fcd864a
    37dc:	a91d4101 	.word	0xa91d4101
    37e0:	3fd17460 	.word	0x3fd17460
    37e4:	518f264d 	.word	0x518f264d
    37e8:	3fd55555 	.word	0x3fd55555
    37ec:	db6fabff 	.word	0xdb6fabff
    37f0:	3fdb6db6 	.word	0x3fdb6db6
    37f4:	33333303 	.word	0x33333303
    37f8:	3fe33333 	.word	0x3fe33333
    37fc:	40080000 	.word	0x40080000
    3800:	3feec709 	.word	0x3feec709
    3804:	dc3a03fd 	.word	0xdc3a03fd
    3808:	145b01f5 	.word	0x145b01f5
    380c:	be3e2fe0 	.word	0xbe3e2fe0
    3810:	408fffff 	.word	0x408fffff
    3814:	bf700000 	.word	0xbf700000
    3818:	652b82fe 	.word	0x652b82fe
    381c:	3c971547 	.word	0x3c971547
    3820:	2800      	cmp	r0, #0
    3822:	d000      	beq.n	3826 <__ieee754_pow+0x62e>
    3824:	e18a      	b.n	3b3c <__ieee754_pow+0x944>
    3826:	2280      	movs	r2, #128	; 0x80
    3828:	4be7      	ldr	r3, [pc, #924]	; (3bc8 <__ieee754_pow+0x9d0>)
    382a:	0352      	lsls	r2, r2, #13
    382c:	469c      	mov	ip, r3
    382e:	0013      	movs	r3, r2
    3830:	1536      	asrs	r6, r6, #20
    3832:	4466      	add	r6, ip
    3834:	4133      	asrs	r3, r6
    3836:	49e5      	ldr	r1, [pc, #916]	; (3bcc <__ieee754_pow+0x9d4>)
    3838:	19db      	adds	r3, r3, r7
    383a:	005e      	lsls	r6, r3, #1
    383c:	001c      	movs	r4, r3
    383e:	031b      	lsls	r3, r3, #12
    3840:	468c      	mov	ip, r1
    3842:	0b1b      	lsrs	r3, r3, #12
    3844:	4313      	orrs	r3, r2
    3846:	2214      	movs	r2, #20
    3848:	0d76      	lsrs	r6, r6, #21
    384a:	4fe1      	ldr	r7, [pc, #900]	; (3bd0 <__ieee754_pow+0x9d8>)
    384c:	4466      	add	r6, ip
    384e:	4137      	asrs	r7, r6
    3850:	1b96      	subs	r6, r2, r6
    3852:	4133      	asrs	r3, r6
    3854:	4698      	mov	r8, r3
    3856:	4653      	mov	r3, sl
    3858:	43bc      	bics	r4, r7
    385a:	2000      	movs	r0, #0
    385c:	0021      	movs	r1, r4
    385e:	2b00      	cmp	r3, #0
    3860:	da00      	bge.n	3864 <__ieee754_pow+0x66c>
    3862:	e1a9      	b.n	3bb8 <__ieee754_pow+0x9c0>
    3864:	0002      	movs	r2, r0
    3866:	000b      	movs	r3, r1
    3868:	9800      	ldr	r0, [sp, #0]
    386a:	9901      	ldr	r1, [sp, #4]
    386c:	f002 f836 	bl	58dc <__aeabi_dsub>
    3870:	000b      	movs	r3, r1
    3872:	9000      	str	r0, [sp, #0]
    3874:	9101      	str	r1, [sp, #4]
    3876:	0002      	movs	r2, r0
    3878:	9804      	ldr	r0, [sp, #16]
    387a:	9905      	ldr	r1, [sp, #20]
    387c:	f000 fe64 	bl	4548 <__aeabi_dadd>
    3880:	4643      	mov	r3, r8
    3882:	051b      	lsls	r3, r3, #20
    3884:	4699      	mov	r9, r3
    3886:	2000      	movs	r0, #0
    3888:	2200      	movs	r2, #0
    388a:	4bd2      	ldr	r3, [pc, #840]	; (3bd4 <__ieee754_pow+0x9dc>)
    388c:	0006      	movs	r6, r0
    388e:	000f      	movs	r7, r1
    3890:	f001 fdaa 	bl	53e8 <__aeabi_dmul>
    3894:	9a00      	ldr	r2, [sp, #0]
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	9002      	str	r0, [sp, #8]
    389a:	9103      	str	r1, [sp, #12]
    389c:	0030      	movs	r0, r6
    389e:	0039      	movs	r1, r7
    38a0:	f002 f81c 	bl	58dc <__aeabi_dsub>
    38a4:	0002      	movs	r2, r0
    38a6:	000b      	movs	r3, r1
    38a8:	9804      	ldr	r0, [sp, #16]
    38aa:	9905      	ldr	r1, [sp, #20]
    38ac:	f002 f816 	bl	58dc <__aeabi_dsub>
    38b0:	4ac9      	ldr	r2, [pc, #804]	; (3bd8 <__ieee754_pow+0x9e0>)
    38b2:	4bca      	ldr	r3, [pc, #808]	; (3bdc <__ieee754_pow+0x9e4>)
    38b4:	f001 fd98 	bl	53e8 <__aeabi_dmul>
    38b8:	4ac9      	ldr	r2, [pc, #804]	; (3be0 <__ieee754_pow+0x9e8>)
    38ba:	0004      	movs	r4, r0
    38bc:	000d      	movs	r5, r1
    38be:	4bc9      	ldr	r3, [pc, #804]	; (3be4 <__ieee754_pow+0x9ec>)
    38c0:	0030      	movs	r0, r6
    38c2:	0039      	movs	r1, r7
    38c4:	f001 fd90 	bl	53e8 <__aeabi_dmul>
    38c8:	0002      	movs	r2, r0
    38ca:	000b      	movs	r3, r1
    38cc:	0020      	movs	r0, r4
    38ce:	0029      	movs	r1, r5
    38d0:	f000 fe3a 	bl	4548 <__aeabi_dadd>
    38d4:	0004      	movs	r4, r0
    38d6:	000d      	movs	r5, r1
    38d8:	0002      	movs	r2, r0
    38da:	000b      	movs	r3, r1
    38dc:	9802      	ldr	r0, [sp, #8]
    38de:	9903      	ldr	r1, [sp, #12]
    38e0:	f000 fe32 	bl	4548 <__aeabi_dadd>
    38e4:	9a02      	ldr	r2, [sp, #8]
    38e6:	9b03      	ldr	r3, [sp, #12]
    38e8:	0006      	movs	r6, r0
    38ea:	000f      	movs	r7, r1
    38ec:	f001 fff6 	bl	58dc <__aeabi_dsub>
    38f0:	0002      	movs	r2, r0
    38f2:	000b      	movs	r3, r1
    38f4:	0020      	movs	r0, r4
    38f6:	0029      	movs	r1, r5
    38f8:	f001 fff0 	bl	58dc <__aeabi_dsub>
    38fc:	0032      	movs	r2, r6
    38fe:	9000      	str	r0, [sp, #0]
    3900:	9101      	str	r1, [sp, #4]
    3902:	003b      	movs	r3, r7
    3904:	0030      	movs	r0, r6
    3906:	0039      	movs	r1, r7
    3908:	f001 fd6e 	bl	53e8 <__aeabi_dmul>
    390c:	0004      	movs	r4, r0
    390e:	000d      	movs	r5, r1
    3910:	4ab5      	ldr	r2, [pc, #724]	; (3be8 <__ieee754_pow+0x9f0>)
    3912:	4bb6      	ldr	r3, [pc, #728]	; (3bec <__ieee754_pow+0x9f4>)
    3914:	f001 fd68 	bl	53e8 <__aeabi_dmul>
    3918:	4ab5      	ldr	r2, [pc, #724]	; (3bf0 <__ieee754_pow+0x9f8>)
    391a:	4bb6      	ldr	r3, [pc, #728]	; (3bf4 <__ieee754_pow+0x9fc>)
    391c:	f001 ffde 	bl	58dc <__aeabi_dsub>
    3920:	0022      	movs	r2, r4
    3922:	002b      	movs	r3, r5
    3924:	f001 fd60 	bl	53e8 <__aeabi_dmul>
    3928:	4ab3      	ldr	r2, [pc, #716]	; (3bf8 <__ieee754_pow+0xa00>)
    392a:	4bb4      	ldr	r3, [pc, #720]	; (3bfc <__ieee754_pow+0xa04>)
    392c:	f000 fe0c 	bl	4548 <__aeabi_dadd>
    3930:	0022      	movs	r2, r4
    3932:	002b      	movs	r3, r5
    3934:	f001 fd58 	bl	53e8 <__aeabi_dmul>
    3938:	4ab1      	ldr	r2, [pc, #708]	; (3c00 <__ieee754_pow+0xa08>)
    393a:	4bb2      	ldr	r3, [pc, #712]	; (3c04 <__ieee754_pow+0xa0c>)
    393c:	f001 ffce 	bl	58dc <__aeabi_dsub>
    3940:	0022      	movs	r2, r4
    3942:	002b      	movs	r3, r5
    3944:	f001 fd50 	bl	53e8 <__aeabi_dmul>
    3948:	4aaf      	ldr	r2, [pc, #700]	; (3c08 <__ieee754_pow+0xa10>)
    394a:	4bb0      	ldr	r3, [pc, #704]	; (3c0c <__ieee754_pow+0xa14>)
    394c:	f000 fdfc 	bl	4548 <__aeabi_dadd>
    3950:	0022      	movs	r2, r4
    3952:	002b      	movs	r3, r5
    3954:	f001 fd48 	bl	53e8 <__aeabi_dmul>
    3958:	0002      	movs	r2, r0
    395a:	000b      	movs	r3, r1
    395c:	0030      	movs	r0, r6
    395e:	0039      	movs	r1, r7
    3960:	f001 ffbc 	bl	58dc <__aeabi_dsub>
    3964:	0004      	movs	r4, r0
    3966:	000d      	movs	r5, r1
    3968:	0002      	movs	r2, r0
    396a:	000b      	movs	r3, r1
    396c:	0030      	movs	r0, r6
    396e:	0039      	movs	r1, r7
    3970:	f001 fd3a 	bl	53e8 <__aeabi_dmul>
    3974:	2380      	movs	r3, #128	; 0x80
    3976:	9002      	str	r0, [sp, #8]
    3978:	9103      	str	r1, [sp, #12]
    397a:	2200      	movs	r2, #0
    397c:	05db      	lsls	r3, r3, #23
    397e:	0020      	movs	r0, r4
    3980:	0029      	movs	r1, r5
    3982:	f001 ffab 	bl	58dc <__aeabi_dsub>
    3986:	0002      	movs	r2, r0
    3988:	000b      	movs	r3, r1
    398a:	9802      	ldr	r0, [sp, #8]
    398c:	9903      	ldr	r1, [sp, #12]
    398e:	f001 f907 	bl	4ba0 <__aeabi_ddiv>
    3992:	9a00      	ldr	r2, [sp, #0]
    3994:	9b01      	ldr	r3, [sp, #4]
    3996:	0004      	movs	r4, r0
    3998:	000d      	movs	r5, r1
    399a:	0030      	movs	r0, r6
    399c:	0039      	movs	r1, r7
    399e:	f001 fd23 	bl	53e8 <__aeabi_dmul>
    39a2:	9a00      	ldr	r2, [sp, #0]
    39a4:	9b01      	ldr	r3, [sp, #4]
    39a6:	f000 fdcf 	bl	4548 <__aeabi_dadd>
    39aa:	0002      	movs	r2, r0
    39ac:	000b      	movs	r3, r1
    39ae:	0020      	movs	r0, r4
    39b0:	0029      	movs	r1, r5
    39b2:	f001 ff93 	bl	58dc <__aeabi_dsub>
    39b6:	0032      	movs	r2, r6
    39b8:	003b      	movs	r3, r7
    39ba:	f001 ff8f 	bl	58dc <__aeabi_dsub>
    39be:	0002      	movs	r2, r0
    39c0:	000b      	movs	r3, r1
    39c2:	2000      	movs	r0, #0
    39c4:	4992      	ldr	r1, [pc, #584]	; (3c10 <__ieee754_pow+0xa18>)
    39c6:	f001 ff89 	bl	58dc <__aeabi_dsub>
    39ca:	464b      	mov	r3, r9
    39cc:	185b      	adds	r3, r3, r1
    39ce:	151a      	asrs	r2, r3, #20
    39d0:	2a00      	cmp	r2, #0
    39d2:	dc00      	bgt.n	39d6 <__ieee754_pow+0x7de>
    39d4:	e0f4      	b.n	3bc0 <__ieee754_pow+0x9c8>
    39d6:	0019      	movs	r1, r3
    39d8:	9a06      	ldr	r2, [sp, #24]
    39da:	9b07      	ldr	r3, [sp, #28]
    39dc:	f001 fd04 	bl	53e8 <__aeabi_dmul>
    39e0:	0006      	movs	r6, r0
    39e2:	e452      	b.n	328a <__ieee754_pow+0x92>
    39e4:	0032      	movs	r2, r6
    39e6:	0030      	movs	r0, r6
    39e8:	002b      	movs	r3, r5
    39ea:	0029      	movs	r1, r5
    39ec:	f001 fcfc 	bl	53e8 <__aeabi_dmul>
    39f0:	0006      	movs	r6, r0
    39f2:	e44a      	b.n	328a <__ieee754_pow+0x92>
    39f4:	4b87      	ldr	r3, [pc, #540]	; (3c14 <__ieee754_pow+0xa1c>)
    39f6:	004e      	lsls	r6, r1, #1
    39f8:	0876      	lsrs	r6, r6, #1
    39fa:	429e      	cmp	r6, r3
    39fc:	dc00      	bgt.n	3a00 <__ieee754_pow+0x808>
    39fe:	e0bf      	b.n	3b80 <__ieee754_pow+0x988>
    3a00:	4b85      	ldr	r3, [pc, #532]	; (3c18 <__ieee754_pow+0xa20>)
    3a02:	18cb      	adds	r3, r1, r3
    3a04:	4303      	orrs	r3, r0
    3a06:	d10c      	bne.n	3a22 <__ieee754_pow+0x82a>
    3a08:	9a00      	ldr	r2, [sp, #0]
    3a0a:	9b01      	ldr	r3, [sp, #4]
    3a0c:	f001 ff66 	bl	58dc <__aeabi_dsub>
    3a10:	0002      	movs	r2, r0
    3a12:	000b      	movs	r3, r1
    3a14:	9804      	ldr	r0, [sp, #16]
    3a16:	9905      	ldr	r1, [sp, #20]
    3a18:	f000 fbf8 	bl	420c <__aeabi_dcmple>
    3a1c:	2800      	cmp	r0, #0
    3a1e:	d100      	bne.n	3a22 <__ieee754_pow+0x82a>
    3a20:	e701      	b.n	3826 <__ieee754_pow+0x62e>
    3a22:	9806      	ldr	r0, [sp, #24]
    3a24:	9907      	ldr	r1, [sp, #28]
    3a26:	4a7d      	ldr	r2, [pc, #500]	; (3c1c <__ieee754_pow+0xa24>)
    3a28:	4b7d      	ldr	r3, [pc, #500]	; (3c20 <__ieee754_pow+0xa28>)
    3a2a:	f001 fcdd 	bl	53e8 <__aeabi_dmul>
    3a2e:	4a7b      	ldr	r2, [pc, #492]	; (3c1c <__ieee754_pow+0xa24>)
    3a30:	4b7b      	ldr	r3, [pc, #492]	; (3c20 <__ieee754_pow+0xa28>)
    3a32:	f001 fcd9 	bl	53e8 <__aeabi_dmul>
    3a36:	0006      	movs	r6, r0
    3a38:	f7ff fc27 	bl	328a <__ieee754_pow+0x92>
    3a3c:	2300      	movs	r3, #0
    3a3e:	4c79      	ldr	r4, [pc, #484]	; (3c24 <__ieee754_pow+0xa2c>)
    3a40:	9306      	str	r3, [sp, #24]
    3a42:	9407      	str	r4, [sp, #28]
    3a44:	e666      	b.n	3714 <__ieee754_pow+0x51c>
    3a46:	4653      	mov	r3, sl
    3a48:	2b00      	cmp	r3, #0
    3a4a:	db00      	blt.n	3a4e <__ieee754_pow+0x856>
    3a4c:	e4c3      	b.n	33d6 <__ieee754_pow+0x1de>
    3a4e:	9b00      	ldr	r3, [sp, #0]
    3a50:	9c01      	ldr	r4, [sp, #4]
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	0612      	lsls	r2, r2, #24
    3a56:	001e      	movs	r6, r3
    3a58:	4694      	mov	ip, r2
    3a5a:	0023      	movs	r3, r4
    3a5c:	4463      	add	r3, ip
    3a5e:	0019      	movs	r1, r3
    3a60:	f7ff fc13 	bl	328a <__ieee754_pow+0x92>
    3a64:	0002      	movs	r2, r0
    3a66:	000b      	movs	r3, r1
    3a68:	2000      	movs	r0, #0
    3a6a:	4969      	ldr	r1, [pc, #420]	; (3c10 <__ieee754_pow+0xa18>)
    3a6c:	f001 f898 	bl	4ba0 <__aeabi_ddiv>
    3a70:	e44a      	b.n	3308 <__ieee754_pow+0x110>
    3a72:	4b6d      	ldr	r3, [pc, #436]	; (3c28 <__ieee754_pow+0xa30>)
    3a74:	429c      	cmp	r4, r3
    3a76:	dc00      	bgt.n	3a7a <__ieee754_pow+0x882>
    3a78:	e4aa      	b.n	33d0 <__ieee754_pow+0x1d8>
    3a7a:	4b65      	ldr	r3, [pc, #404]	; (3c10 <__ieee754_pow+0xa18>)
    3a7c:	429c      	cmp	r4, r3
    3a7e:	dd01      	ble.n	3a84 <__ieee754_pow+0x88c>
    3a80:	f7ff fc2c 	bl	32dc <__ieee754_pow+0xe4>
    3a84:	2200      	movs	r2, #0
    3a86:	4b62      	ldr	r3, [pc, #392]	; (3c10 <__ieee754_pow+0xa18>)
    3a88:	f001 ff28 	bl	58dc <__aeabi_dsub>
    3a8c:	22c0      	movs	r2, #192	; 0xc0
    3a8e:	4b67      	ldr	r3, [pc, #412]	; (3c2c <__ieee754_pow+0xa34>)
    3a90:	05d2      	lsls	r2, r2, #23
    3a92:	0004      	movs	r4, r0
    3a94:	000d      	movs	r5, r1
    3a96:	f001 fca7 	bl	53e8 <__aeabi_dmul>
    3a9a:	4a65      	ldr	r2, [pc, #404]	; (3c30 <__ieee754_pow+0xa38>)
    3a9c:	0006      	movs	r6, r0
    3a9e:	000f      	movs	r7, r1
    3aa0:	4b64      	ldr	r3, [pc, #400]	; (3c34 <__ieee754_pow+0xa3c>)
    3aa2:	0020      	movs	r0, r4
    3aa4:	0029      	movs	r1, r5
    3aa6:	f001 fc9f 	bl	53e8 <__aeabi_dmul>
    3aaa:	2200      	movs	r2, #0
    3aac:	9002      	str	r0, [sp, #8]
    3aae:	9103      	str	r1, [sp, #12]
    3ab0:	4b61      	ldr	r3, [pc, #388]	; (3c38 <__ieee754_pow+0xa40>)
    3ab2:	0020      	movs	r0, r4
    3ab4:	0029      	movs	r1, r5
    3ab6:	f001 fc97 	bl	53e8 <__aeabi_dmul>
    3aba:	0002      	movs	r2, r0
    3abc:	000b      	movs	r3, r1
    3abe:	485f      	ldr	r0, [pc, #380]	; (3c3c <__ieee754_pow+0xa44>)
    3ac0:	495f      	ldr	r1, [pc, #380]	; (3c40 <__ieee754_pow+0xa48>)
    3ac2:	f001 ff0b 	bl	58dc <__aeabi_dsub>
    3ac6:	0022      	movs	r2, r4
    3ac8:	002b      	movs	r3, r5
    3aca:	f001 fc8d 	bl	53e8 <__aeabi_dmul>
    3ace:	0002      	movs	r2, r0
    3ad0:	000b      	movs	r3, r1
    3ad2:	2000      	movs	r0, #0
    3ad4:	495b      	ldr	r1, [pc, #364]	; (3c44 <__ieee754_pow+0xa4c>)
    3ad6:	f001 ff01 	bl	58dc <__aeabi_dsub>
    3ada:	0022      	movs	r2, r4
    3adc:	9004      	str	r0, [sp, #16]
    3ade:	9105      	str	r1, [sp, #20]
    3ae0:	002b      	movs	r3, r5
    3ae2:	0020      	movs	r0, r4
    3ae4:	0029      	movs	r1, r5
    3ae6:	f001 fc7f 	bl	53e8 <__aeabi_dmul>
    3aea:	0002      	movs	r2, r0
    3aec:	000b      	movs	r3, r1
    3aee:	9804      	ldr	r0, [sp, #16]
    3af0:	9905      	ldr	r1, [sp, #20]
    3af2:	f001 fc79 	bl	53e8 <__aeabi_dmul>
    3af6:	4a54      	ldr	r2, [pc, #336]	; (3c48 <__ieee754_pow+0xa50>)
    3af8:	4b4c      	ldr	r3, [pc, #304]	; (3c2c <__ieee754_pow+0xa34>)
    3afa:	f001 fc75 	bl	53e8 <__aeabi_dmul>
    3afe:	0002      	movs	r2, r0
    3b00:	000b      	movs	r3, r1
    3b02:	9802      	ldr	r0, [sp, #8]
    3b04:	9903      	ldr	r1, [sp, #12]
    3b06:	f001 fee9 	bl	58dc <__aeabi_dsub>
    3b0a:	0002      	movs	r2, r0
    3b0c:	000b      	movs	r3, r1
    3b0e:	0004      	movs	r4, r0
    3b10:	000d      	movs	r5, r1
    3b12:	0030      	movs	r0, r6
    3b14:	0039      	movs	r1, r7
    3b16:	f000 fd17 	bl	4548 <__aeabi_dadd>
    3b1a:	2200      	movs	r2, #0
    3b1c:	0010      	movs	r0, r2
    3b1e:	003b      	movs	r3, r7
    3b20:	0032      	movs	r2, r6
    3b22:	9002      	str	r0, [sp, #8]
    3b24:	9103      	str	r1, [sp, #12]
    3b26:	f001 fed9 	bl	58dc <__aeabi_dsub>
    3b2a:	0002      	movs	r2, r0
    3b2c:	000b      	movs	r3, r1
    3b2e:	0020      	movs	r0, r4
    3b30:	0029      	movs	r1, r5
    3b32:	f001 fed3 	bl	58dc <__aeabi_dsub>
    3b36:	9004      	str	r0, [sp, #16]
    3b38:	9105      	str	r1, [sp, #20]
    3b3a:	e5e1      	b.n	3700 <__ieee754_pow+0x508>
    3b3c:	4a43      	ldr	r2, [pc, #268]	; (3c4c <__ieee754_pow+0xa54>)
    3b3e:	4b44      	ldr	r3, [pc, #272]	; (3c50 <__ieee754_pow+0xa58>)
    3b40:	9806      	ldr	r0, [sp, #24]
    3b42:	9907      	ldr	r1, [sp, #28]
    3b44:	f001 fc50 	bl	53e8 <__aeabi_dmul>
    3b48:	4a40      	ldr	r2, [pc, #256]	; (3c4c <__ieee754_pow+0xa54>)
    3b4a:	4b41      	ldr	r3, [pc, #260]	; (3c50 <__ieee754_pow+0xa58>)
    3b4c:	f001 fc4c 	bl	53e8 <__aeabi_dmul>
    3b50:	0006      	movs	r6, r0
    3b52:	f7ff fb9a 	bl	328a <__ieee754_pow+0x92>
    3b56:	2a00      	cmp	r2, #0
    3b58:	d001      	beq.n	3b5e <__ieee754_pow+0x966>
    3b5a:	f7ff fba5 	bl	32a8 <__ieee754_pow+0xb0>
    3b5e:	3214      	adds	r2, #20
    3b60:	1ad3      	subs	r3, r2, r3
    3b62:	003a      	movs	r2, r7
    3b64:	411a      	asrs	r2, r3
    3b66:	0011      	movs	r1, r2
    3b68:	4099      	lsls	r1, r3
    3b6a:	428f      	cmp	r7, r1
    3b6c:	d001      	beq.n	3b72 <__ieee754_pow+0x97a>
    3b6e:	f7ff fb6f 	bl	3250 <__ieee754_pow+0x58>
    3b72:	2301      	movs	r3, #1
    3b74:	4013      	ands	r3, r2
    3b76:	2202      	movs	r2, #2
    3b78:	1ad3      	subs	r3, r2, r3
    3b7a:	469b      	mov	fp, r3
    3b7c:	f7ff fb68 	bl	3250 <__ieee754_pow+0x58>
    3b80:	4b30      	ldr	r3, [pc, #192]	; (3c44 <__ieee754_pow+0xa4c>)
    3b82:	429e      	cmp	r6, r3
    3b84:	dd00      	ble.n	3b88 <__ieee754_pow+0x990>
    3b86:	e64e      	b.n	3826 <__ieee754_pow+0x62e>
    3b88:	2300      	movs	r3, #0
    3b8a:	4699      	mov	r9, r3
    3b8c:	4698      	mov	r8, r3
    3b8e:	e67a      	b.n	3886 <__ieee754_pow+0x68e>
    3b90:	0002      	movs	r2, r0
    3b92:	000b      	movs	r3, r1
    3b94:	f7ff fc14 	bl	33c0 <__ieee754_pow+0x1c8>
    3b98:	2380      	movs	r3, #128	; 0x80
    3b9a:	4c2e      	ldr	r4, [pc, #184]	; (3c54 <__ieee754_pow+0xa5c>)
    3b9c:	05db      	lsls	r3, r3, #23
    3b9e:	9308      	str	r3, [sp, #32]
    3ba0:	9409      	str	r4, [sp, #36]	; 0x24
    3ba2:	4b2d      	ldr	r3, [pc, #180]	; (3c58 <__ieee754_pow+0xa60>)
    3ba4:	4c2d      	ldr	r4, [pc, #180]	; (3c5c <__ieee754_pow+0xa64>)
    3ba6:	2200      	movs	r2, #0
    3ba8:	930c      	str	r3, [sp, #48]	; 0x30
    3baa:	940d      	str	r4, [sp, #52]	; 0x34
    3bac:	2480      	movs	r4, #128	; 0x80
    3bae:	4b2c      	ldr	r3, [pc, #176]	; (3c60 <__ieee754_pow+0xa68>)
    3bb0:	02e4      	lsls	r4, r4, #11
    3bb2:	9206      	str	r2, [sp, #24]
    3bb4:	9307      	str	r3, [sp, #28]
    3bb6:	e456      	b.n	3466 <__ieee754_pow+0x26e>
    3bb8:	4643      	mov	r3, r8
    3bba:	425b      	negs	r3, r3
    3bbc:	4698      	mov	r8, r3
    3bbe:	e651      	b.n	3864 <__ieee754_pow+0x66c>
    3bc0:	4642      	mov	r2, r8
    3bc2:	f000 f9fd 	bl	3fc0 <scalbn>
    3bc6:	e707      	b.n	39d8 <__ieee754_pow+0x7e0>
    3bc8:	fffffc02 	.word	0xfffffc02
    3bcc:	fffffc01 	.word	0xfffffc01
    3bd0:	000fffff 	.word	0x000fffff
    3bd4:	3fe62e43 	.word	0x3fe62e43
    3bd8:	fefa39ef 	.word	0xfefa39ef
    3bdc:	3fe62e42 	.word	0x3fe62e42
    3be0:	0ca86c39 	.word	0x0ca86c39
    3be4:	be205c61 	.word	0xbe205c61
    3be8:	72bea4d0 	.word	0x72bea4d0
    3bec:	3e663769 	.word	0x3e663769
    3bf0:	c5d26bf1 	.word	0xc5d26bf1
    3bf4:	3ebbbd41 	.word	0x3ebbbd41
    3bf8:	af25de2c 	.word	0xaf25de2c
    3bfc:	3f11566a 	.word	0x3f11566a
    3c00:	16bebd93 	.word	0x16bebd93
    3c04:	3f66c16c 	.word	0x3f66c16c
    3c08:	5555553e 	.word	0x5555553e
    3c0c:	3fc55555 	.word	0x3fc55555
    3c10:	3ff00000 	.word	0x3ff00000
    3c14:	4090cbff 	.word	0x4090cbff
    3c18:	3f6f3400 	.word	0x3f6f3400
    3c1c:	c2f8f359 	.word	0xc2f8f359
    3c20:	01a56e1f 	.word	0x01a56e1f
    3c24:	bff00000 	.word	0xbff00000
    3c28:	3feffffe 	.word	0x3feffffe
    3c2c:	3ff71547 	.word	0x3ff71547
    3c30:	f85ddf44 	.word	0xf85ddf44
    3c34:	3e54ae0b 	.word	0x3e54ae0b
    3c38:	3fd00000 	.word	0x3fd00000
    3c3c:	55555555 	.word	0x55555555
    3c40:	3fd55555 	.word	0x3fd55555
    3c44:	3fe00000 	.word	0x3fe00000
    3c48:	652b82fe 	.word	0x652b82fe
    3c4c:	8800759c 	.word	0x8800759c
    3c50:	7e37e43c 	.word	0x7e37e43c
    3c54:	3fe2b803 	.word	0x3fe2b803
    3c58:	43cfd006 	.word	0x43cfd006
    3c5c:	3e4cfdeb 	.word	0x3e4cfdeb
    3c60:	3ff80000 	.word	0x3ff80000

00003c64 <__ieee754_sqrt>:
    3c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c66:	4656      	mov	r6, sl
    3c68:	464d      	mov	r5, r9
    3c6a:	4644      	mov	r4, r8
    3c6c:	465f      	mov	r7, fp
    3c6e:	4b75      	ldr	r3, [pc, #468]	; (3e44 <__ieee754_sqrt+0x1e0>)
    3c70:	b4f0      	push	{r4, r5, r6, r7}
    3c72:	000a      	movs	r2, r1
    3c74:	000d      	movs	r5, r1
    3c76:	0019      	movs	r1, r3
    3c78:	b083      	sub	sp, #12
    3c7a:	0006      	movs	r6, r0
    3c7c:	0004      	movs	r4, r0
    3c7e:	4029      	ands	r1, r5
    3c80:	4299      	cmp	r1, r3
    3c82:	d100      	bne.n	3c86 <__ieee754_sqrt+0x22>
    3c84:	e0ba      	b.n	3dfc <__ieee754_sqrt+0x198>
    3c86:	2d00      	cmp	r5, #0
    3c88:	dc00      	bgt.n	3c8c <__ieee754_sqrt+0x28>
    3c8a:	e094      	b.n	3db6 <__ieee754_sqrt+0x152>
    3c8c:	152d      	asrs	r5, r5, #20
    3c8e:	d100      	bne.n	3c92 <__ieee754_sqrt+0x2e>
    3c90:	e0a3      	b.n	3dda <__ieee754_sqrt+0x176>
    3c92:	4b6d      	ldr	r3, [pc, #436]	; (3e48 <__ieee754_sqrt+0x1e4>)
    3c94:	0312      	lsls	r2, r2, #12
    3c96:	469c      	mov	ip, r3
    3c98:	2380      	movs	r3, #128	; 0x80
    3c9a:	0b12      	lsrs	r2, r2, #12
    3c9c:	035b      	lsls	r3, r3, #13
    3c9e:	4465      	add	r5, ip
    3ca0:	431a      	orrs	r2, r3
    3ca2:	07eb      	lsls	r3, r5, #31
    3ca4:	d500      	bpl.n	3ca8 <__ieee754_sqrt+0x44>
    3ca6:	e081      	b.n	3dac <__ieee754_sqrt+0x148>
    3ca8:	106b      	asrs	r3, r5, #1
    3caa:	4698      	mov	r8, r3
    3cac:	0fe3      	lsrs	r3, r4, #31
    3cae:	189b      	adds	r3, r3, r2
    3cb0:	189b      	adds	r3, r3, r2
    3cb2:	2280      	movs	r2, #128	; 0x80
    3cb4:	2116      	movs	r1, #22
    3cb6:	2600      	movs	r6, #0
    3cb8:	2700      	movs	r7, #0
    3cba:	0064      	lsls	r4, r4, #1
    3cbc:	0392      	lsls	r2, r2, #14
    3cbe:	18b8      	adds	r0, r7, r2
    3cc0:	4298      	cmp	r0, r3
    3cc2:	dc02      	bgt.n	3cca <__ieee754_sqrt+0x66>
    3cc4:	1887      	adds	r7, r0, r2
    3cc6:	1a1b      	subs	r3, r3, r0
    3cc8:	18b6      	adds	r6, r6, r2
    3cca:	0fe0      	lsrs	r0, r4, #31
    3ccc:	005b      	lsls	r3, r3, #1
    3cce:	3901      	subs	r1, #1
    3cd0:	181b      	adds	r3, r3, r0
    3cd2:	0064      	lsls	r4, r4, #1
    3cd4:	0852      	lsrs	r2, r2, #1
    3cd6:	2900      	cmp	r1, #0
    3cd8:	d1f1      	bne.n	3cbe <__ieee754_sqrt+0x5a>
    3cda:	2200      	movs	r2, #0
    3cdc:	9201      	str	r2, [sp, #4]
    3cde:	4694      	mov	ip, r2
    3ce0:	2280      	movs	r2, #128	; 0x80
    3ce2:	0612      	lsls	r2, r2, #24
    3ce4:	2020      	movs	r0, #32
    3ce6:	4691      	mov	r9, r2
    3ce8:	e009      	b.n	3cfe <__ieee754_sqrt+0x9a>
    3cea:	429f      	cmp	r7, r3
    3cec:	d041      	beq.n	3d72 <__ieee754_sqrt+0x10e>
    3cee:	0fe1      	lsrs	r1, r4, #31
    3cf0:	18c9      	adds	r1, r1, r3
    3cf2:	3801      	subs	r0, #1
    3cf4:	18cb      	adds	r3, r1, r3
    3cf6:	0064      	lsls	r4, r4, #1
    3cf8:	0852      	lsrs	r2, r2, #1
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d01e      	beq.n	3d3c <__ieee754_sqrt+0xd8>
    3cfe:	4661      	mov	r1, ip
    3d00:	1851      	adds	r1, r2, r1
    3d02:	429f      	cmp	r7, r3
    3d04:	daf1      	bge.n	3cea <__ieee754_sqrt+0x86>
    3d06:	188d      	adds	r5, r1, r2
    3d08:	46ac      	mov	ip, r5
    3d0a:	0fcd      	lsrs	r5, r1, #31
    3d0c:	07ed      	lsls	r5, r5, #31
    3d0e:	46ba      	mov	sl, r7
    3d10:	454d      	cmp	r5, r9
    3d12:	d039      	beq.n	3d88 <__ieee754_sqrt+0x124>
    3d14:	1bdb      	subs	r3, r3, r7
    3d16:	428c      	cmp	r4, r1
    3d18:	41bf      	sbcs	r7, r7
    3d1a:	427f      	negs	r7, r7
    3d1c:	1bdb      	subs	r3, r3, r7
    3d1e:	1a64      	subs	r4, r4, r1
    3d20:	9901      	ldr	r1, [sp, #4]
    3d22:	3801      	subs	r0, #1
    3d24:	468b      	mov	fp, r1
    3d26:	4493      	add	fp, r2
    3d28:	4659      	mov	r1, fp
    3d2a:	9101      	str	r1, [sp, #4]
    3d2c:	0fe1      	lsrs	r1, r4, #31
    3d2e:	18c9      	adds	r1, r1, r3
    3d30:	4657      	mov	r7, sl
    3d32:	18cb      	adds	r3, r1, r3
    3d34:	0064      	lsls	r4, r4, #1
    3d36:	0852      	lsrs	r2, r2, #1
    3d38:	2800      	cmp	r0, #0
    3d3a:	d1e0      	bne.n	3cfe <__ieee754_sqrt+0x9a>
    3d3c:	4323      	orrs	r3, r4
    3d3e:	d12b      	bne.n	3d98 <__ieee754_sqrt+0x134>
    3d40:	9b01      	ldr	r3, [sp, #4]
    3d42:	085b      	lsrs	r3, r3, #1
    3d44:	4941      	ldr	r1, [pc, #260]	; (3e4c <__ieee754_sqrt+0x1e8>)
    3d46:	1072      	asrs	r2, r6, #1
    3d48:	468c      	mov	ip, r1
    3d4a:	4462      	add	r2, ip
    3d4c:	07f1      	lsls	r1, r6, #31
    3d4e:	d502      	bpl.n	3d56 <__ieee754_sqrt+0xf2>
    3d50:	2180      	movs	r1, #128	; 0x80
    3d52:	0609      	lsls	r1, r1, #24
    3d54:	430b      	orrs	r3, r1
    3d56:	4641      	mov	r1, r8
    3d58:	0509      	lsls	r1, r1, #20
    3d5a:	188d      	adds	r5, r1, r2
    3d5c:	001e      	movs	r6, r3
    3d5e:	002f      	movs	r7, r5
    3d60:	0030      	movs	r0, r6
    3d62:	0039      	movs	r1, r7
    3d64:	b003      	add	sp, #12
    3d66:	bc3c      	pop	{r2, r3, r4, r5}
    3d68:	4690      	mov	r8, r2
    3d6a:	4699      	mov	r9, r3
    3d6c:	46a2      	mov	sl, r4
    3d6e:	46ab      	mov	fp, r5
    3d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d72:	42a1      	cmp	r1, r4
    3d74:	d80e      	bhi.n	3d94 <__ieee754_sqrt+0x130>
    3d76:	188d      	adds	r5, r1, r2
    3d78:	46ac      	mov	ip, r5
    3d7a:	0fcd      	lsrs	r5, r1, #31
    3d7c:	07ed      	lsls	r5, r5, #31
    3d7e:	454d      	cmp	r5, r9
    3d80:	d048      	beq.n	3e14 <__ieee754_sqrt+0x1b0>
    3d82:	469a      	mov	sl, r3
    3d84:	2300      	movs	r3, #0
    3d86:	e7ca      	b.n	3d1e <__ieee754_sqrt+0xba>
    3d88:	4665      	mov	r5, ip
    3d8a:	2d00      	cmp	r5, #0
    3d8c:	dbc2      	blt.n	3d14 <__ieee754_sqrt+0xb0>
    3d8e:	1c7d      	adds	r5, r7, #1
    3d90:	46aa      	mov	sl, r5
    3d92:	e7bf      	b.n	3d14 <__ieee754_sqrt+0xb0>
    3d94:	003b      	movs	r3, r7
    3d96:	e7aa      	b.n	3cee <__ieee754_sqrt+0x8a>
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	3301      	adds	r3, #1
    3d9c:	d03e      	beq.n	3e1c <__ieee754_sqrt+0x1b8>
    3d9e:	9a01      	ldr	r2, [sp, #4]
    3da0:	2301      	movs	r3, #1
    3da2:	4694      	mov	ip, r2
    3da4:	4013      	ands	r3, r2
    3da6:	4463      	add	r3, ip
    3da8:	085b      	lsrs	r3, r3, #1
    3daa:	e7cb      	b.n	3d44 <__ieee754_sqrt+0xe0>
    3dac:	0fe3      	lsrs	r3, r4, #31
    3dae:	0052      	lsls	r2, r2, #1
    3db0:	189a      	adds	r2, r3, r2
    3db2:	0064      	lsls	r4, r4, #1
    3db4:	e778      	b.n	3ca8 <__ieee754_sqrt+0x44>
    3db6:	006b      	lsls	r3, r5, #1
    3db8:	085b      	lsrs	r3, r3, #1
    3dba:	4303      	orrs	r3, r0
    3dbc:	002f      	movs	r7, r5
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d0ce      	beq.n	3d60 <__ieee754_sqrt+0xfc>
    3dc2:	2500      	movs	r5, #0
    3dc4:	2a00      	cmp	r2, #0
    3dc6:	d131      	bne.n	3e2c <__ieee754_sqrt+0x1c8>
    3dc8:	0ae2      	lsrs	r2, r4, #11
    3dca:	3d15      	subs	r5, #21
    3dcc:	0564      	lsls	r4, r4, #21
    3dce:	2a00      	cmp	r2, #0
    3dd0:	d0fa      	beq.n	3dc8 <__ieee754_sqrt+0x164>
    3dd2:	2380      	movs	r3, #128	; 0x80
    3dd4:	035b      	lsls	r3, r3, #13
    3dd6:	421a      	tst	r2, r3
    3dd8:	d123      	bne.n	3e22 <__ieee754_sqrt+0x1be>
    3dda:	2080      	movs	r0, #128	; 0x80
    3ddc:	2300      	movs	r3, #0
    3dde:	0340      	lsls	r0, r0, #13
    3de0:	e000      	b.n	3de4 <__ieee754_sqrt+0x180>
    3de2:	000b      	movs	r3, r1
    3de4:	0052      	lsls	r2, r2, #1
    3de6:	1c59      	adds	r1, r3, #1
    3de8:	4202      	tst	r2, r0
    3dea:	d0fa      	beq.n	3de2 <__ieee754_sqrt+0x17e>
    3dec:	2020      	movs	r0, #32
    3dee:	1a40      	subs	r0, r0, r1
    3df0:	1aed      	subs	r5, r5, r3
    3df2:	0023      	movs	r3, r4
    3df4:	40c3      	lsrs	r3, r0
    3df6:	408c      	lsls	r4, r1
    3df8:	431a      	orrs	r2, r3
    3dfa:	e74a      	b.n	3c92 <__ieee754_sqrt+0x2e>
    3dfc:	0002      	movs	r2, r0
    3dfe:	002b      	movs	r3, r5
    3e00:	0029      	movs	r1, r5
    3e02:	f001 faf1 	bl	53e8 <__aeabi_dmul>
    3e06:	0032      	movs	r2, r6
    3e08:	002b      	movs	r3, r5
    3e0a:	f000 fb9d 	bl	4548 <__aeabi_dadd>
    3e0e:	0006      	movs	r6, r0
    3e10:	000f      	movs	r7, r1
    3e12:	e7a5      	b.n	3d60 <__ieee754_sqrt+0xfc>
    3e14:	4665      	mov	r5, ip
    3e16:	2d00      	cmp	r5, #0
    3e18:	dab9      	bge.n	3d8e <__ieee754_sqrt+0x12a>
    3e1a:	e7b2      	b.n	3d82 <__ieee754_sqrt+0x11e>
    3e1c:	3601      	adds	r6, #1
    3e1e:	2300      	movs	r3, #0
    3e20:	e790      	b.n	3d44 <__ieee754_sqrt+0xe0>
    3e22:	2301      	movs	r3, #1
    3e24:	2020      	movs	r0, #32
    3e26:	425b      	negs	r3, r3
    3e28:	2100      	movs	r1, #0
    3e2a:	e7e1      	b.n	3df0 <__ieee754_sqrt+0x18c>
    3e2c:	003b      	movs	r3, r7
    3e2e:	0002      	movs	r2, r0
    3e30:	0039      	movs	r1, r7
    3e32:	f001 fd53 	bl	58dc <__aeabi_dsub>
    3e36:	0002      	movs	r2, r0
    3e38:	000b      	movs	r3, r1
    3e3a:	f000 feb1 	bl	4ba0 <__aeabi_ddiv>
    3e3e:	0006      	movs	r6, r0
    3e40:	000f      	movs	r7, r1
    3e42:	e78d      	b.n	3d60 <__ieee754_sqrt+0xfc>
    3e44:	7ff00000 	.word	0x7ff00000
    3e48:	fffffc01 	.word	0xfffffc01
    3e4c:	3fe00000 	.word	0x3fe00000

00003e50 <fabs>:
    3e50:	0049      	lsls	r1, r1, #1
    3e52:	084b      	lsrs	r3, r1, #1
    3e54:	0019      	movs	r1, r3
    3e56:	4770      	bx	lr

00003e58 <finite>:
    3e58:	4b03      	ldr	r3, [pc, #12]	; (3e68 <finite+0x10>)
    3e5a:	0048      	lsls	r0, r1, #1
    3e5c:	469c      	mov	ip, r3
    3e5e:	0840      	lsrs	r0, r0, #1
    3e60:	4460      	add	r0, ip
    3e62:	0fc0      	lsrs	r0, r0, #31
    3e64:	4770      	bx	lr
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	80100000 	.word	0x80100000

00003e6c <matherr>:
    3e6c:	2000      	movs	r0, #0
    3e6e:	4770      	bx	lr

00003e70 <nan>:
    3e70:	2000      	movs	r0, #0
    3e72:	4901      	ldr	r1, [pc, #4]	; (3e78 <nan+0x8>)
    3e74:	4770      	bx	lr
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	7ff80000 	.word	0x7ff80000

00003e7c <rint>:
    3e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7e:	4647      	mov	r7, r8
    3e80:	b480      	push	{r7}
    3e82:	0fcb      	lsrs	r3, r1, #31
    3e84:	4698      	mov	r8, r3
    3e86:	4c4a      	ldr	r4, [pc, #296]	; (3fb0 <rint+0x134>)
    3e88:	004b      	lsls	r3, r1, #1
    3e8a:	0d5b      	lsrs	r3, r3, #21
    3e8c:	191e      	adds	r6, r3, r4
    3e8e:	b082      	sub	sp, #8
    3e90:	0007      	movs	r7, r0
    3e92:	000a      	movs	r2, r1
    3e94:	2e13      	cmp	r6, #19
    3e96:	dc35      	bgt.n	3f04 <rint+0x88>
    3e98:	2e00      	cmp	r6, #0
    3e9a:	db57      	blt.n	3f4c <rint+0xd0>
    3e9c:	4b45      	ldr	r3, [pc, #276]	; (3fb4 <rint+0x138>)
    3e9e:	0004      	movs	r4, r0
    3ea0:	4133      	asrs	r3, r6
    3ea2:	001f      	movs	r7, r3
    3ea4:	400f      	ands	r7, r1
    3ea6:	4307      	orrs	r7, r0
    3ea8:	000d      	movs	r5, r1
    3eaa:	2f00      	cmp	r7, #0
    3eac:	d024      	beq.n	3ef8 <rint+0x7c>
    3eae:	085b      	lsrs	r3, r3, #1
    3eb0:	001c      	movs	r4, r3
    3eb2:	400c      	ands	r4, r1
    3eb4:	4320      	orrs	r0, r4
    3eb6:	2700      	movs	r7, #0
    3eb8:	2800      	cmp	r0, #0
    3eba:	d007      	beq.n	3ecc <rint+0x50>
    3ebc:	2e13      	cmp	r6, #19
    3ebe:	d100      	bne.n	3ec2 <rint+0x46>
    3ec0:	e072      	b.n	3fa8 <rint+0x12c>
    3ec2:	2280      	movs	r2, #128	; 0x80
    3ec4:	02d2      	lsls	r2, r2, #11
    3ec6:	4132      	asrs	r2, r6
    3ec8:	4399      	bics	r1, r3
    3eca:	430a      	orrs	r2, r1
    3ecc:	4643      	mov	r3, r8
    3ece:	00de      	lsls	r6, r3, #3
    3ed0:	4b39      	ldr	r3, [pc, #228]	; (3fb8 <rint+0x13c>)
    3ed2:	0011      	movs	r1, r2
    3ed4:	199e      	adds	r6, r3, r6
    3ed6:	6834      	ldr	r4, [r6, #0]
    3ed8:	6875      	ldr	r5, [r6, #4]
    3eda:	0038      	movs	r0, r7
    3edc:	0022      	movs	r2, r4
    3ede:	002b      	movs	r3, r5
    3ee0:	f000 fb32 	bl	4548 <__aeabi_dadd>
    3ee4:	9000      	str	r0, [sp, #0]
    3ee6:	9101      	str	r1, [sp, #4]
    3ee8:	9800      	ldr	r0, [sp, #0]
    3eea:	9901      	ldr	r1, [sp, #4]
    3eec:	0022      	movs	r2, r4
    3eee:	002b      	movs	r3, r5
    3ef0:	f001 fcf4 	bl	58dc <__aeabi_dsub>
    3ef4:	0004      	movs	r4, r0
    3ef6:	000d      	movs	r5, r1
    3ef8:	0020      	movs	r0, r4
    3efa:	0029      	movs	r1, r5
    3efc:	b002      	add	sp, #8
    3efe:	bc04      	pop	{r2}
    3f00:	4690      	mov	r8, r2
    3f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f04:	2e33      	cmp	r6, #51	; 0x33
    3f06:	dd0c      	ble.n	3f22 <rint+0xa6>
    3f08:	2380      	movs	r3, #128	; 0x80
    3f0a:	0004      	movs	r4, r0
    3f0c:	000d      	movs	r5, r1
    3f0e:	00db      	lsls	r3, r3, #3
    3f10:	429e      	cmp	r6, r3
    3f12:	d1f1      	bne.n	3ef8 <rint+0x7c>
    3f14:	0002      	movs	r2, r0
    3f16:	000b      	movs	r3, r1
    3f18:	f000 fb16 	bl	4548 <__aeabi_dadd>
    3f1c:	0004      	movs	r4, r0
    3f1e:	000d      	movs	r5, r1
    3f20:	e7ea      	b.n	3ef8 <rint+0x7c>
    3f22:	4c26      	ldr	r4, [pc, #152]	; (3fbc <rint+0x140>)
    3f24:	000d      	movs	r5, r1
    3f26:	46a4      	mov	ip, r4
    3f28:	2401      	movs	r4, #1
    3f2a:	4463      	add	r3, ip
    3f2c:	4264      	negs	r4, r4
    3f2e:	40dc      	lsrs	r4, r3
    3f30:	46a4      	mov	ip, r4
    3f32:	4661      	mov	r1, ip
    3f34:	0004      	movs	r4, r0
    3f36:	4201      	tst	r1, r0
    3f38:	d0de      	beq.n	3ef8 <rint+0x7c>
    3f3a:	0849      	lsrs	r1, r1, #1
    3f3c:	4201      	tst	r1, r0
    3f3e:	d0c5      	beq.n	3ecc <rint+0x50>
    3f40:	2780      	movs	r7, #128	; 0x80
    3f42:	05ff      	lsls	r7, r7, #23
    3f44:	411f      	asrs	r7, r3
    3f46:	4388      	bics	r0, r1
    3f48:	4307      	orrs	r7, r0
    3f4a:	e7bf      	b.n	3ecc <rint+0x50>
    3f4c:	004b      	lsls	r3, r1, #1
    3f4e:	085b      	lsrs	r3, r3, #1
    3f50:	4303      	orrs	r3, r0
    3f52:	0004      	movs	r4, r0
    3f54:	000d      	movs	r5, r1
    3f56:	2b00      	cmp	r3, #0
    3f58:	d0ce      	beq.n	3ef8 <rint+0x7c>
    3f5a:	030b      	lsls	r3, r1, #12
    3f5c:	0b1b      	lsrs	r3, r3, #12
    3f5e:	4303      	orrs	r3, r0
    3f60:	425a      	negs	r2, r3
    3f62:	4313      	orrs	r3, r2
    3f64:	2280      	movs	r2, #128	; 0x80
    3f66:	0b1b      	lsrs	r3, r3, #12
    3f68:	0312      	lsls	r2, r2, #12
    3f6a:	4013      	ands	r3, r2
    3f6c:	0c4a      	lsrs	r2, r1, #17
    3f6e:	0452      	lsls	r2, r2, #17
    3f70:	4313      	orrs	r3, r2
    3f72:	0019      	movs	r1, r3
    3f74:	4643      	mov	r3, r8
    3f76:	4a10      	ldr	r2, [pc, #64]	; (3fb8 <rint+0x13c>)
    3f78:	00db      	lsls	r3, r3, #3
    3f7a:	18d3      	adds	r3, r2, r3
    3f7c:	681c      	ldr	r4, [r3, #0]
    3f7e:	685d      	ldr	r5, [r3, #4]
    3f80:	0022      	movs	r2, r4
    3f82:	002b      	movs	r3, r5
    3f84:	f000 fae0 	bl	4548 <__aeabi_dadd>
    3f88:	9000      	str	r0, [sp, #0]
    3f8a:	9101      	str	r1, [sp, #4]
    3f8c:	9800      	ldr	r0, [sp, #0]
    3f8e:	9901      	ldr	r1, [sp, #4]
    3f90:	0022      	movs	r2, r4
    3f92:	002b      	movs	r3, r5
    3f94:	f001 fca2 	bl	58dc <__aeabi_dsub>
    3f98:	4642      	mov	r2, r8
    3f9a:	004b      	lsls	r3, r1, #1
    3f9c:	085b      	lsrs	r3, r3, #1
    3f9e:	07d6      	lsls	r6, r2, #31
    3fa0:	4333      	orrs	r3, r6
    3fa2:	0004      	movs	r4, r0
    3fa4:	001d      	movs	r5, r3
    3fa6:	e7a7      	b.n	3ef8 <rint+0x7c>
    3fa8:	2780      	movs	r7, #128	; 0x80
    3faa:	063f      	lsls	r7, r7, #24
    3fac:	e789      	b.n	3ec2 <rint+0x46>
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	fffffc01 	.word	0xfffffc01
    3fb4:	000fffff 	.word	0x000fffff
    3fb8:	000064d0 	.word	0x000064d0
    3fbc:	fffffbed 	.word	0xfffffbed

00003fc0 <scalbn>:
    3fc0:	004b      	lsls	r3, r1, #1
    3fc2:	b570      	push	{r4, r5, r6, lr}
    3fc4:	0d5b      	lsrs	r3, r3, #21
    3fc6:	0014      	movs	r4, r2
    3fc8:	000a      	movs	r2, r1
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d11a      	bne.n	4004 <scalbn+0x44>
    3fce:	004b      	lsls	r3, r1, #1
    3fd0:	085b      	lsrs	r3, r3, #1
    3fd2:	4303      	orrs	r3, r0
    3fd4:	d015      	beq.n	4002 <scalbn+0x42>
    3fd6:	2200      	movs	r2, #0
    3fd8:	4b22      	ldr	r3, [pc, #136]	; (4064 <scalbn+0xa4>)
    3fda:	f001 fa05 	bl	53e8 <__aeabi_dmul>
    3fde:	4b22      	ldr	r3, [pc, #136]	; (4068 <scalbn+0xa8>)
    3fe0:	000a      	movs	r2, r1
    3fe2:	429c      	cmp	r4, r3
    3fe4:	db22      	blt.n	402c <scalbn+0x6c>
    3fe6:	004b      	lsls	r3, r1, #1
    3fe8:	0d5b      	lsrs	r3, r3, #21
    3fea:	3b36      	subs	r3, #54	; 0x36
    3fec:	4d1f      	ldr	r5, [pc, #124]	; (406c <scalbn+0xac>)
    3fee:	18e3      	adds	r3, r4, r3
    3ff0:	42ab      	cmp	r3, r5
    3ff2:	dc20      	bgt.n	4036 <scalbn+0x76>
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	dd0d      	ble.n	4014 <scalbn+0x54>
    3ff8:	4c1d      	ldr	r4, [pc, #116]	; (4070 <scalbn+0xb0>)
    3ffa:	051b      	lsls	r3, r3, #20
    3ffc:	4022      	ands	r2, r4
    3ffe:	431a      	orrs	r2, r3
    4000:	0011      	movs	r1, r2
    4002:	bd70      	pop	{r4, r5, r6, pc}
    4004:	4d1b      	ldr	r5, [pc, #108]	; (4074 <scalbn+0xb4>)
    4006:	42ab      	cmp	r3, r5
    4008:	d1f0      	bne.n	3fec <scalbn+0x2c>
    400a:	0002      	movs	r2, r0
    400c:	000b      	movs	r3, r1
    400e:	f000 fa9b 	bl	4548 <__aeabi_dadd>
    4012:	e7f6      	b.n	4002 <scalbn+0x42>
    4014:	001d      	movs	r5, r3
    4016:	3535      	adds	r5, #53	; 0x35
    4018:	da18      	bge.n	404c <scalbn+0x8c>
    401a:	4b17      	ldr	r3, [pc, #92]	; (4078 <scalbn+0xb8>)
    401c:	0002      	movs	r2, r0
    401e:	429c      	cmp	r4, r3
    4020:	dc0a      	bgt.n	4038 <scalbn+0x78>
    4022:	000b      	movs	r3, r1
    4024:	4815      	ldr	r0, [pc, #84]	; (407c <scalbn+0xbc>)
    4026:	4916      	ldr	r1, [pc, #88]	; (4080 <scalbn+0xc0>)
    4028:	f000 f832 	bl	4090 <copysign>
    402c:	4a13      	ldr	r2, [pc, #76]	; (407c <scalbn+0xbc>)
    402e:	4b14      	ldr	r3, [pc, #80]	; (4080 <scalbn+0xc0>)
    4030:	f001 f9da 	bl	53e8 <__aeabi_dmul>
    4034:	e7e5      	b.n	4002 <scalbn+0x42>
    4036:	0002      	movs	r2, r0
    4038:	000b      	movs	r3, r1
    403a:	4812      	ldr	r0, [pc, #72]	; (4084 <scalbn+0xc4>)
    403c:	4912      	ldr	r1, [pc, #72]	; (4088 <scalbn+0xc8>)
    403e:	f000 f827 	bl	4090 <copysign>
    4042:	4a10      	ldr	r2, [pc, #64]	; (4084 <scalbn+0xc4>)
    4044:	4b10      	ldr	r3, [pc, #64]	; (4088 <scalbn+0xc8>)
    4046:	f001 f9cf 	bl	53e8 <__aeabi_dmul>
    404a:	e7da      	b.n	4002 <scalbn+0x42>
    404c:	4c08      	ldr	r4, [pc, #32]	; (4070 <scalbn+0xb0>)
    404e:	3336      	adds	r3, #54	; 0x36
    4050:	4022      	ands	r2, r4
    4052:	051b      	lsls	r3, r3, #20
    4054:	4313      	orrs	r3, r2
    4056:	0019      	movs	r1, r3
    4058:	2200      	movs	r2, #0
    405a:	4b0c      	ldr	r3, [pc, #48]	; (408c <scalbn+0xcc>)
    405c:	f001 f9c4 	bl	53e8 <__aeabi_dmul>
    4060:	e7cf      	b.n	4002 <scalbn+0x42>
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	43500000 	.word	0x43500000
    4068:	ffff3cb0 	.word	0xffff3cb0
    406c:	000007fe 	.word	0x000007fe
    4070:	800fffff 	.word	0x800fffff
    4074:	000007ff 	.word	0x000007ff
    4078:	0000c350 	.word	0x0000c350
    407c:	c2f8f359 	.word	0xc2f8f359
    4080:	01a56e1f 	.word	0x01a56e1f
    4084:	8800759c 	.word	0x8800759c
    4088:	7e37e43c 	.word	0x7e37e43c
    408c:	3c900000 	.word	0x3c900000

00004090 <copysign>:
    4090:	b530      	push	{r4, r5, lr}
    4092:	004a      	lsls	r2, r1, #1
    4094:	0fdb      	lsrs	r3, r3, #31
    4096:	07db      	lsls	r3, r3, #31
    4098:	0852      	lsrs	r2, r2, #1
    409a:	431a      	orrs	r2, r3
    409c:	0011      	movs	r1, r2
    409e:	bd30      	pop	{r4, r5, pc}

000040a0 <__gnu_thumb1_case_uqi>:
    40a0:	b402      	push	{r1}
    40a2:	4671      	mov	r1, lr
    40a4:	0849      	lsrs	r1, r1, #1
    40a6:	0049      	lsls	r1, r1, #1
    40a8:	5c09      	ldrb	r1, [r1, r0]
    40aa:	0049      	lsls	r1, r1, #1
    40ac:	448e      	add	lr, r1
    40ae:	bc02      	pop	{r1}
    40b0:	4770      	bx	lr
    40b2:	46c0      	nop			; (mov r8, r8)

000040b4 <__aeabi_uidiv>:
    40b4:	2200      	movs	r2, #0
    40b6:	0843      	lsrs	r3, r0, #1
    40b8:	428b      	cmp	r3, r1
    40ba:	d374      	bcc.n	41a6 <__aeabi_uidiv+0xf2>
    40bc:	0903      	lsrs	r3, r0, #4
    40be:	428b      	cmp	r3, r1
    40c0:	d35f      	bcc.n	4182 <__aeabi_uidiv+0xce>
    40c2:	0a03      	lsrs	r3, r0, #8
    40c4:	428b      	cmp	r3, r1
    40c6:	d344      	bcc.n	4152 <__aeabi_uidiv+0x9e>
    40c8:	0b03      	lsrs	r3, r0, #12
    40ca:	428b      	cmp	r3, r1
    40cc:	d328      	bcc.n	4120 <__aeabi_uidiv+0x6c>
    40ce:	0c03      	lsrs	r3, r0, #16
    40d0:	428b      	cmp	r3, r1
    40d2:	d30d      	bcc.n	40f0 <__aeabi_uidiv+0x3c>
    40d4:	22ff      	movs	r2, #255	; 0xff
    40d6:	0209      	lsls	r1, r1, #8
    40d8:	ba12      	rev	r2, r2
    40da:	0c03      	lsrs	r3, r0, #16
    40dc:	428b      	cmp	r3, r1
    40de:	d302      	bcc.n	40e6 <__aeabi_uidiv+0x32>
    40e0:	1212      	asrs	r2, r2, #8
    40e2:	0209      	lsls	r1, r1, #8
    40e4:	d065      	beq.n	41b2 <__aeabi_uidiv+0xfe>
    40e6:	0b03      	lsrs	r3, r0, #12
    40e8:	428b      	cmp	r3, r1
    40ea:	d319      	bcc.n	4120 <__aeabi_uidiv+0x6c>
    40ec:	e000      	b.n	40f0 <__aeabi_uidiv+0x3c>
    40ee:	0a09      	lsrs	r1, r1, #8
    40f0:	0bc3      	lsrs	r3, r0, #15
    40f2:	428b      	cmp	r3, r1
    40f4:	d301      	bcc.n	40fa <__aeabi_uidiv+0x46>
    40f6:	03cb      	lsls	r3, r1, #15
    40f8:	1ac0      	subs	r0, r0, r3
    40fa:	4152      	adcs	r2, r2
    40fc:	0b83      	lsrs	r3, r0, #14
    40fe:	428b      	cmp	r3, r1
    4100:	d301      	bcc.n	4106 <__aeabi_uidiv+0x52>
    4102:	038b      	lsls	r3, r1, #14
    4104:	1ac0      	subs	r0, r0, r3
    4106:	4152      	adcs	r2, r2
    4108:	0b43      	lsrs	r3, r0, #13
    410a:	428b      	cmp	r3, r1
    410c:	d301      	bcc.n	4112 <__aeabi_uidiv+0x5e>
    410e:	034b      	lsls	r3, r1, #13
    4110:	1ac0      	subs	r0, r0, r3
    4112:	4152      	adcs	r2, r2
    4114:	0b03      	lsrs	r3, r0, #12
    4116:	428b      	cmp	r3, r1
    4118:	d301      	bcc.n	411e <__aeabi_uidiv+0x6a>
    411a:	030b      	lsls	r3, r1, #12
    411c:	1ac0      	subs	r0, r0, r3
    411e:	4152      	adcs	r2, r2
    4120:	0ac3      	lsrs	r3, r0, #11
    4122:	428b      	cmp	r3, r1
    4124:	d301      	bcc.n	412a <__aeabi_uidiv+0x76>
    4126:	02cb      	lsls	r3, r1, #11
    4128:	1ac0      	subs	r0, r0, r3
    412a:	4152      	adcs	r2, r2
    412c:	0a83      	lsrs	r3, r0, #10
    412e:	428b      	cmp	r3, r1
    4130:	d301      	bcc.n	4136 <__aeabi_uidiv+0x82>
    4132:	028b      	lsls	r3, r1, #10
    4134:	1ac0      	subs	r0, r0, r3
    4136:	4152      	adcs	r2, r2
    4138:	0a43      	lsrs	r3, r0, #9
    413a:	428b      	cmp	r3, r1
    413c:	d301      	bcc.n	4142 <__aeabi_uidiv+0x8e>
    413e:	024b      	lsls	r3, r1, #9
    4140:	1ac0      	subs	r0, r0, r3
    4142:	4152      	adcs	r2, r2
    4144:	0a03      	lsrs	r3, r0, #8
    4146:	428b      	cmp	r3, r1
    4148:	d301      	bcc.n	414e <__aeabi_uidiv+0x9a>
    414a:	020b      	lsls	r3, r1, #8
    414c:	1ac0      	subs	r0, r0, r3
    414e:	4152      	adcs	r2, r2
    4150:	d2cd      	bcs.n	40ee <__aeabi_uidiv+0x3a>
    4152:	09c3      	lsrs	r3, r0, #7
    4154:	428b      	cmp	r3, r1
    4156:	d301      	bcc.n	415c <__aeabi_uidiv+0xa8>
    4158:	01cb      	lsls	r3, r1, #7
    415a:	1ac0      	subs	r0, r0, r3
    415c:	4152      	adcs	r2, r2
    415e:	0983      	lsrs	r3, r0, #6
    4160:	428b      	cmp	r3, r1
    4162:	d301      	bcc.n	4168 <__aeabi_uidiv+0xb4>
    4164:	018b      	lsls	r3, r1, #6
    4166:	1ac0      	subs	r0, r0, r3
    4168:	4152      	adcs	r2, r2
    416a:	0943      	lsrs	r3, r0, #5
    416c:	428b      	cmp	r3, r1
    416e:	d301      	bcc.n	4174 <__aeabi_uidiv+0xc0>
    4170:	014b      	lsls	r3, r1, #5
    4172:	1ac0      	subs	r0, r0, r3
    4174:	4152      	adcs	r2, r2
    4176:	0903      	lsrs	r3, r0, #4
    4178:	428b      	cmp	r3, r1
    417a:	d301      	bcc.n	4180 <__aeabi_uidiv+0xcc>
    417c:	010b      	lsls	r3, r1, #4
    417e:	1ac0      	subs	r0, r0, r3
    4180:	4152      	adcs	r2, r2
    4182:	08c3      	lsrs	r3, r0, #3
    4184:	428b      	cmp	r3, r1
    4186:	d301      	bcc.n	418c <__aeabi_uidiv+0xd8>
    4188:	00cb      	lsls	r3, r1, #3
    418a:	1ac0      	subs	r0, r0, r3
    418c:	4152      	adcs	r2, r2
    418e:	0883      	lsrs	r3, r0, #2
    4190:	428b      	cmp	r3, r1
    4192:	d301      	bcc.n	4198 <__aeabi_uidiv+0xe4>
    4194:	008b      	lsls	r3, r1, #2
    4196:	1ac0      	subs	r0, r0, r3
    4198:	4152      	adcs	r2, r2
    419a:	0843      	lsrs	r3, r0, #1
    419c:	428b      	cmp	r3, r1
    419e:	d301      	bcc.n	41a4 <__aeabi_uidiv+0xf0>
    41a0:	004b      	lsls	r3, r1, #1
    41a2:	1ac0      	subs	r0, r0, r3
    41a4:	4152      	adcs	r2, r2
    41a6:	1a41      	subs	r1, r0, r1
    41a8:	d200      	bcs.n	41ac <__aeabi_uidiv+0xf8>
    41aa:	4601      	mov	r1, r0
    41ac:	4152      	adcs	r2, r2
    41ae:	4610      	mov	r0, r2
    41b0:	4770      	bx	lr
    41b2:	e7ff      	b.n	41b4 <__aeabi_uidiv+0x100>
    41b4:	b501      	push	{r0, lr}
    41b6:	2000      	movs	r0, #0
    41b8:	f000 f806 	bl	41c8 <__aeabi_idiv0>
    41bc:	bd02      	pop	{r1, pc}
    41be:	46c0      	nop			; (mov r8, r8)

000041c0 <__aeabi_uidivmod>:
    41c0:	2900      	cmp	r1, #0
    41c2:	d0f7      	beq.n	41b4 <__aeabi_uidiv+0x100>
    41c4:	e776      	b.n	40b4 <__aeabi_uidiv>
    41c6:	4770      	bx	lr

000041c8 <__aeabi_idiv0>:
    41c8:	4770      	bx	lr
    41ca:	46c0      	nop			; (mov r8, r8)

000041cc <__aeabi_cdrcmple>:
    41cc:	4684      	mov	ip, r0
    41ce:	1c10      	adds	r0, r2, #0
    41d0:	4662      	mov	r2, ip
    41d2:	468c      	mov	ip, r1
    41d4:	1c19      	adds	r1, r3, #0
    41d6:	4663      	mov	r3, ip
    41d8:	e000      	b.n	41dc <__aeabi_cdcmpeq>
    41da:	46c0      	nop			; (mov r8, r8)

000041dc <__aeabi_cdcmpeq>:
    41dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41de:	f001 f899 	bl	5314 <__ledf2>
    41e2:	2800      	cmp	r0, #0
    41e4:	d401      	bmi.n	41ea <__aeabi_cdcmpeq+0xe>
    41e6:	2100      	movs	r1, #0
    41e8:	42c8      	cmn	r0, r1
    41ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000041ec <__aeabi_dcmpeq>:
    41ec:	b510      	push	{r4, lr}
    41ee:	f000 ffed 	bl	51cc <__eqdf2>
    41f2:	4240      	negs	r0, r0
    41f4:	3001      	adds	r0, #1
    41f6:	bd10      	pop	{r4, pc}

000041f8 <__aeabi_dcmplt>:
    41f8:	b510      	push	{r4, lr}
    41fa:	f001 f88b 	bl	5314 <__ledf2>
    41fe:	2800      	cmp	r0, #0
    4200:	db01      	blt.n	4206 <__aeabi_dcmplt+0xe>
    4202:	2000      	movs	r0, #0
    4204:	bd10      	pop	{r4, pc}
    4206:	2001      	movs	r0, #1
    4208:	bd10      	pop	{r4, pc}
    420a:	46c0      	nop			; (mov r8, r8)

0000420c <__aeabi_dcmple>:
    420c:	b510      	push	{r4, lr}
    420e:	f001 f881 	bl	5314 <__ledf2>
    4212:	2800      	cmp	r0, #0
    4214:	dd01      	ble.n	421a <__aeabi_dcmple+0xe>
    4216:	2000      	movs	r0, #0
    4218:	bd10      	pop	{r4, pc}
    421a:	2001      	movs	r0, #1
    421c:	bd10      	pop	{r4, pc}
    421e:	46c0      	nop			; (mov r8, r8)

00004220 <__aeabi_dcmpgt>:
    4220:	b510      	push	{r4, lr}
    4222:	f001 f813 	bl	524c <__gedf2>
    4226:	2800      	cmp	r0, #0
    4228:	dc01      	bgt.n	422e <__aeabi_dcmpgt+0xe>
    422a:	2000      	movs	r0, #0
    422c:	bd10      	pop	{r4, pc}
    422e:	2001      	movs	r0, #1
    4230:	bd10      	pop	{r4, pc}
    4232:	46c0      	nop			; (mov r8, r8)

00004234 <__aeabi_dcmpge>:
    4234:	b510      	push	{r4, lr}
    4236:	f001 f809 	bl	524c <__gedf2>
    423a:	2800      	cmp	r0, #0
    423c:	da01      	bge.n	4242 <__aeabi_dcmpge+0xe>
    423e:	2000      	movs	r0, #0
    4240:	bd10      	pop	{r4, pc}
    4242:	2001      	movs	r0, #1
    4244:	bd10      	pop	{r4, pc}
    4246:	46c0      	nop			; (mov r8, r8)

00004248 <__aeabi_lmul>:
    4248:	b5f0      	push	{r4, r5, r6, r7, lr}
    424a:	464f      	mov	r7, r9
    424c:	4646      	mov	r6, r8
    424e:	b4c0      	push	{r6, r7}
    4250:	0416      	lsls	r6, r2, #16
    4252:	0c36      	lsrs	r6, r6, #16
    4254:	4699      	mov	r9, r3
    4256:	0033      	movs	r3, r6
    4258:	0405      	lsls	r5, r0, #16
    425a:	0c2c      	lsrs	r4, r5, #16
    425c:	0c07      	lsrs	r7, r0, #16
    425e:	0c15      	lsrs	r5, r2, #16
    4260:	4363      	muls	r3, r4
    4262:	437e      	muls	r6, r7
    4264:	436f      	muls	r7, r5
    4266:	4365      	muls	r5, r4
    4268:	0c1c      	lsrs	r4, r3, #16
    426a:	19ad      	adds	r5, r5, r6
    426c:	1964      	adds	r4, r4, r5
    426e:	469c      	mov	ip, r3
    4270:	42a6      	cmp	r6, r4
    4272:	d903      	bls.n	427c <__aeabi_lmul+0x34>
    4274:	2380      	movs	r3, #128	; 0x80
    4276:	025b      	lsls	r3, r3, #9
    4278:	4698      	mov	r8, r3
    427a:	4447      	add	r7, r8
    427c:	4663      	mov	r3, ip
    427e:	0c25      	lsrs	r5, r4, #16
    4280:	19ef      	adds	r7, r5, r7
    4282:	041d      	lsls	r5, r3, #16
    4284:	464b      	mov	r3, r9
    4286:	434a      	muls	r2, r1
    4288:	4343      	muls	r3, r0
    428a:	0c2d      	lsrs	r5, r5, #16
    428c:	0424      	lsls	r4, r4, #16
    428e:	1964      	adds	r4, r4, r5
    4290:	1899      	adds	r1, r3, r2
    4292:	19c9      	adds	r1, r1, r7
    4294:	0020      	movs	r0, r4
    4296:	bc0c      	pop	{r2, r3}
    4298:	4690      	mov	r8, r2
    429a:	4699      	mov	r9, r3
    429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    429e:	46c0      	nop			; (mov r8, r8)

000042a0 <__aeabi_d2uiz>:
    42a0:	b570      	push	{r4, r5, r6, lr}
    42a2:	2200      	movs	r2, #0
    42a4:	4b0c      	ldr	r3, [pc, #48]	; (42d8 <__aeabi_d2uiz+0x38>)
    42a6:	0004      	movs	r4, r0
    42a8:	000d      	movs	r5, r1
    42aa:	f7ff ffc3 	bl	4234 <__aeabi_dcmpge>
    42ae:	2800      	cmp	r0, #0
    42b0:	d104      	bne.n	42bc <__aeabi_d2uiz+0x1c>
    42b2:	0020      	movs	r0, r4
    42b4:	0029      	movs	r1, r5
    42b6:	f001 fe85 	bl	5fc4 <__aeabi_d2iz>
    42ba:	bd70      	pop	{r4, r5, r6, pc}
    42bc:	4b06      	ldr	r3, [pc, #24]	; (42d8 <__aeabi_d2uiz+0x38>)
    42be:	2200      	movs	r2, #0
    42c0:	0020      	movs	r0, r4
    42c2:	0029      	movs	r1, r5
    42c4:	f001 fb0a 	bl	58dc <__aeabi_dsub>
    42c8:	f001 fe7c 	bl	5fc4 <__aeabi_d2iz>
    42cc:	2380      	movs	r3, #128	; 0x80
    42ce:	061b      	lsls	r3, r3, #24
    42d0:	469c      	mov	ip, r3
    42d2:	4460      	add	r0, ip
    42d4:	e7f1      	b.n	42ba <__aeabi_d2uiz+0x1a>
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	41e00000 	.word	0x41e00000

000042dc <__aeabi_fmul>:
    42dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42de:	4657      	mov	r7, sl
    42e0:	464e      	mov	r6, r9
    42e2:	4645      	mov	r5, r8
    42e4:	0043      	lsls	r3, r0, #1
    42e6:	b4e0      	push	{r5, r6, r7}
    42e8:	0246      	lsls	r6, r0, #9
    42ea:	4688      	mov	r8, r1
    42ec:	0a76      	lsrs	r6, r6, #9
    42ee:	0e1f      	lsrs	r7, r3, #24
    42f0:	0fc4      	lsrs	r4, r0, #31
    42f2:	2f00      	cmp	r7, #0
    42f4:	d047      	beq.n	4386 <__aeabi_fmul+0xaa>
    42f6:	2fff      	cmp	r7, #255	; 0xff
    42f8:	d025      	beq.n	4346 <__aeabi_fmul+0x6a>
    42fa:	2300      	movs	r3, #0
    42fc:	2580      	movs	r5, #128	; 0x80
    42fe:	469a      	mov	sl, r3
    4300:	4699      	mov	r9, r3
    4302:	00f6      	lsls	r6, r6, #3
    4304:	04ed      	lsls	r5, r5, #19
    4306:	432e      	orrs	r6, r5
    4308:	3f7f      	subs	r7, #127	; 0x7f
    430a:	4643      	mov	r3, r8
    430c:	4642      	mov	r2, r8
    430e:	025d      	lsls	r5, r3, #9
    4310:	0fd2      	lsrs	r2, r2, #31
    4312:	005b      	lsls	r3, r3, #1
    4314:	0a6d      	lsrs	r5, r5, #9
    4316:	0e1b      	lsrs	r3, r3, #24
    4318:	4690      	mov	r8, r2
    431a:	d040      	beq.n	439e <__aeabi_fmul+0xc2>
    431c:	2bff      	cmp	r3, #255	; 0xff
    431e:	d039      	beq.n	4394 <__aeabi_fmul+0xb8>
    4320:	2280      	movs	r2, #128	; 0x80
    4322:	2000      	movs	r0, #0
    4324:	00ed      	lsls	r5, r5, #3
    4326:	04d2      	lsls	r2, r2, #19
    4328:	4315      	orrs	r5, r2
    432a:	3b7f      	subs	r3, #127	; 0x7f
    432c:	18fb      	adds	r3, r7, r3
    432e:	4642      	mov	r2, r8
    4330:	4657      	mov	r7, sl
    4332:	1c59      	adds	r1, r3, #1
    4334:	4062      	eors	r2, r4
    4336:	468c      	mov	ip, r1
    4338:	4307      	orrs	r7, r0
    433a:	2f0f      	cmp	r7, #15
    433c:	d85c      	bhi.n	43f8 <__aeabi_fmul+0x11c>
    433e:	496f      	ldr	r1, [pc, #444]	; (44fc <__aeabi_fmul+0x220>)
    4340:	00bf      	lsls	r7, r7, #2
    4342:	59c9      	ldr	r1, [r1, r7]
    4344:	468f      	mov	pc, r1
    4346:	2e00      	cmp	r6, #0
    4348:	d145      	bne.n	43d6 <__aeabi_fmul+0xfa>
    434a:	2308      	movs	r3, #8
    434c:	469a      	mov	sl, r3
    434e:	3b06      	subs	r3, #6
    4350:	4699      	mov	r9, r3
    4352:	e7da      	b.n	430a <__aeabi_fmul+0x2e>
    4354:	4642      	mov	r2, r8
    4356:	2802      	cmp	r0, #2
    4358:	d02d      	beq.n	43b6 <__aeabi_fmul+0xda>
    435a:	2803      	cmp	r0, #3
    435c:	d100      	bne.n	4360 <__aeabi_fmul+0x84>
    435e:	e0c3      	b.n	44e8 <__aeabi_fmul+0x20c>
    4360:	2801      	cmp	r0, #1
    4362:	d000      	beq.n	4366 <__aeabi_fmul+0x8a>
    4364:	e0a2      	b.n	44ac <__aeabi_fmul+0x1d0>
    4366:	2500      	movs	r5, #0
    4368:	2600      	movs	r6, #0
    436a:	4002      	ands	r2, r0
    436c:	b2d4      	uxtb	r4, r2
    436e:	0276      	lsls	r6, r6, #9
    4370:	05ed      	lsls	r5, r5, #23
    4372:	0a76      	lsrs	r6, r6, #9
    4374:	432e      	orrs	r6, r5
    4376:	07e4      	lsls	r4, r4, #31
    4378:	4326      	orrs	r6, r4
    437a:	0030      	movs	r0, r6
    437c:	bc1c      	pop	{r2, r3, r4}
    437e:	4690      	mov	r8, r2
    4380:	4699      	mov	r9, r3
    4382:	46a2      	mov	sl, r4
    4384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4386:	2e00      	cmp	r6, #0
    4388:	d11a      	bne.n	43c0 <__aeabi_fmul+0xe4>
    438a:	2304      	movs	r3, #4
    438c:	469a      	mov	sl, r3
    438e:	3b03      	subs	r3, #3
    4390:	4699      	mov	r9, r3
    4392:	e7ba      	b.n	430a <__aeabi_fmul+0x2e>
    4394:	002a      	movs	r2, r5
    4396:	1e51      	subs	r1, r2, #1
    4398:	418a      	sbcs	r2, r1
    439a:	1c90      	adds	r0, r2, #2
    439c:	e7c6      	b.n	432c <__aeabi_fmul+0x50>
    439e:	2001      	movs	r0, #1
    43a0:	2d00      	cmp	r5, #0
    43a2:	d0c3      	beq.n	432c <__aeabi_fmul+0x50>
    43a4:	0028      	movs	r0, r5
    43a6:	f001 ff9d 	bl	62e4 <__clzsi2>
    43aa:	1f43      	subs	r3, r0, #5
    43ac:	3076      	adds	r0, #118	; 0x76
    43ae:	409d      	lsls	r5, r3
    43b0:	4243      	negs	r3, r0
    43b2:	2000      	movs	r0, #0
    43b4:	e7ba      	b.n	432c <__aeabi_fmul+0x50>
    43b6:	2401      	movs	r4, #1
    43b8:	25ff      	movs	r5, #255	; 0xff
    43ba:	4014      	ands	r4, r2
    43bc:	2600      	movs	r6, #0
    43be:	e7d6      	b.n	436e <__aeabi_fmul+0x92>
    43c0:	0030      	movs	r0, r6
    43c2:	f001 ff8f 	bl	62e4 <__clzsi2>
    43c6:	1f43      	subs	r3, r0, #5
    43c8:	409e      	lsls	r6, r3
    43ca:	2300      	movs	r3, #0
    43cc:	3076      	adds	r0, #118	; 0x76
    43ce:	4247      	negs	r7, r0
    43d0:	469a      	mov	sl, r3
    43d2:	4699      	mov	r9, r3
    43d4:	e799      	b.n	430a <__aeabi_fmul+0x2e>
    43d6:	230c      	movs	r3, #12
    43d8:	469a      	mov	sl, r3
    43da:	3b09      	subs	r3, #9
    43dc:	4699      	mov	r9, r3
    43de:	e794      	b.n	430a <__aeabi_fmul+0x2e>
    43e0:	2680      	movs	r6, #128	; 0x80
    43e2:	2400      	movs	r4, #0
    43e4:	03f6      	lsls	r6, r6, #15
    43e6:	25ff      	movs	r5, #255	; 0xff
    43e8:	e7c1      	b.n	436e <__aeabi_fmul+0x92>
    43ea:	0035      	movs	r5, r6
    43ec:	4648      	mov	r0, r9
    43ee:	e7b2      	b.n	4356 <__aeabi_fmul+0x7a>
    43f0:	0035      	movs	r5, r6
    43f2:	0022      	movs	r2, r4
    43f4:	4648      	mov	r0, r9
    43f6:	e7ae      	b.n	4356 <__aeabi_fmul+0x7a>
    43f8:	0429      	lsls	r1, r5, #16
    43fa:	0c09      	lsrs	r1, r1, #16
    43fc:	0008      	movs	r0, r1
    43fe:	0c37      	lsrs	r7, r6, #16
    4400:	0436      	lsls	r6, r6, #16
    4402:	0c36      	lsrs	r6, r6, #16
    4404:	0c2c      	lsrs	r4, r5, #16
    4406:	4379      	muls	r1, r7
    4408:	4370      	muls	r0, r6
    440a:	4367      	muls	r7, r4
    440c:	4374      	muls	r4, r6
    440e:	0c06      	lsrs	r6, r0, #16
    4410:	1864      	adds	r4, r4, r1
    4412:	1936      	adds	r6, r6, r4
    4414:	42b1      	cmp	r1, r6
    4416:	d903      	bls.n	4420 <__aeabi_fmul+0x144>
    4418:	2180      	movs	r1, #128	; 0x80
    441a:	0249      	lsls	r1, r1, #9
    441c:	4688      	mov	r8, r1
    441e:	4447      	add	r7, r8
    4420:	0400      	lsls	r0, r0, #16
    4422:	0c00      	lsrs	r0, r0, #16
    4424:	0431      	lsls	r1, r6, #16
    4426:	1809      	adds	r1, r1, r0
    4428:	018d      	lsls	r5, r1, #6
    442a:	1e68      	subs	r0, r5, #1
    442c:	4185      	sbcs	r5, r0
    442e:	0e89      	lsrs	r1, r1, #26
    4430:	4329      	orrs	r1, r5
    4432:	0c35      	lsrs	r5, r6, #16
    4434:	19ed      	adds	r5, r5, r7
    4436:	01ad      	lsls	r5, r5, #6
    4438:	430d      	orrs	r5, r1
    443a:	0129      	lsls	r1, r5, #4
    443c:	d504      	bpl.n	4448 <__aeabi_fmul+0x16c>
    443e:	2301      	movs	r3, #1
    4440:	0869      	lsrs	r1, r5, #1
    4442:	401d      	ands	r5, r3
    4444:	4663      	mov	r3, ip
    4446:	430d      	orrs	r5, r1
    4448:	0019      	movs	r1, r3
    444a:	317f      	adds	r1, #127	; 0x7f
    444c:	2900      	cmp	r1, #0
    444e:	dd25      	ble.n	449c <__aeabi_fmul+0x1c0>
    4450:	0768      	lsls	r0, r5, #29
    4452:	d004      	beq.n	445e <__aeabi_fmul+0x182>
    4454:	200f      	movs	r0, #15
    4456:	4028      	ands	r0, r5
    4458:	2804      	cmp	r0, #4
    445a:	d000      	beq.n	445e <__aeabi_fmul+0x182>
    445c:	3504      	adds	r5, #4
    445e:	0128      	lsls	r0, r5, #4
    4460:	d503      	bpl.n	446a <__aeabi_fmul+0x18e>
    4462:	4927      	ldr	r1, [pc, #156]	; (4500 <__aeabi_fmul+0x224>)
    4464:	3380      	adds	r3, #128	; 0x80
    4466:	400d      	ands	r5, r1
    4468:	0019      	movs	r1, r3
    446a:	29fe      	cmp	r1, #254	; 0xfe
    446c:	dca3      	bgt.n	43b6 <__aeabi_fmul+0xda>
    446e:	2401      	movs	r4, #1
    4470:	01ad      	lsls	r5, r5, #6
    4472:	0a6e      	lsrs	r6, r5, #9
    4474:	4014      	ands	r4, r2
    4476:	b2cd      	uxtb	r5, r1
    4478:	e779      	b.n	436e <__aeabi_fmul+0x92>
    447a:	2080      	movs	r0, #128	; 0x80
    447c:	03c0      	lsls	r0, r0, #15
    447e:	4206      	tst	r6, r0
    4480:	d007      	beq.n	4492 <__aeabi_fmul+0x1b6>
    4482:	4205      	tst	r5, r0
    4484:	d105      	bne.n	4492 <__aeabi_fmul+0x1b6>
    4486:	4328      	orrs	r0, r5
    4488:	0246      	lsls	r6, r0, #9
    448a:	0a76      	lsrs	r6, r6, #9
    448c:	4644      	mov	r4, r8
    448e:	25ff      	movs	r5, #255	; 0xff
    4490:	e76d      	b.n	436e <__aeabi_fmul+0x92>
    4492:	4306      	orrs	r6, r0
    4494:	0276      	lsls	r6, r6, #9
    4496:	0a76      	lsrs	r6, r6, #9
    4498:	25ff      	movs	r5, #255	; 0xff
    449a:	e768      	b.n	436e <__aeabi_fmul+0x92>
    449c:	2401      	movs	r4, #1
    449e:	1a61      	subs	r1, r4, r1
    44a0:	291b      	cmp	r1, #27
    44a2:	dd05      	ble.n	44b0 <__aeabi_fmul+0x1d4>
    44a4:	4014      	ands	r4, r2
    44a6:	2500      	movs	r5, #0
    44a8:	2600      	movs	r6, #0
    44aa:	e760      	b.n	436e <__aeabi_fmul+0x92>
    44ac:	4663      	mov	r3, ip
    44ae:	e7cb      	b.n	4448 <__aeabi_fmul+0x16c>
    44b0:	002e      	movs	r6, r5
    44b2:	2320      	movs	r3, #32
    44b4:	40ce      	lsrs	r6, r1
    44b6:	1a59      	subs	r1, r3, r1
    44b8:	408d      	lsls	r5, r1
    44ba:	1e6b      	subs	r3, r5, #1
    44bc:	419d      	sbcs	r5, r3
    44be:	432e      	orrs	r6, r5
    44c0:	0773      	lsls	r3, r6, #29
    44c2:	d004      	beq.n	44ce <__aeabi_fmul+0x1f2>
    44c4:	230f      	movs	r3, #15
    44c6:	4033      	ands	r3, r6
    44c8:	2b04      	cmp	r3, #4
    44ca:	d000      	beq.n	44ce <__aeabi_fmul+0x1f2>
    44cc:	3604      	adds	r6, #4
    44ce:	0173      	lsls	r3, r6, #5
    44d0:	d504      	bpl.n	44dc <__aeabi_fmul+0x200>
    44d2:	2401      	movs	r4, #1
    44d4:	2501      	movs	r5, #1
    44d6:	4014      	ands	r4, r2
    44d8:	2600      	movs	r6, #0
    44da:	e748      	b.n	436e <__aeabi_fmul+0x92>
    44dc:	2401      	movs	r4, #1
    44de:	01b6      	lsls	r6, r6, #6
    44e0:	0a76      	lsrs	r6, r6, #9
    44e2:	4014      	ands	r4, r2
    44e4:	2500      	movs	r5, #0
    44e6:	e742      	b.n	436e <__aeabi_fmul+0x92>
    44e8:	2680      	movs	r6, #128	; 0x80
    44ea:	2401      	movs	r4, #1
    44ec:	03f6      	lsls	r6, r6, #15
    44ee:	432e      	orrs	r6, r5
    44f0:	0276      	lsls	r6, r6, #9
    44f2:	0a76      	lsrs	r6, r6, #9
    44f4:	4014      	ands	r4, r2
    44f6:	25ff      	movs	r5, #255	; 0xff
    44f8:	e739      	b.n	436e <__aeabi_fmul+0x92>
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	000064e0 	.word	0x000064e0
    4500:	f7ffffff 	.word	0xf7ffffff

00004504 <__aeabi_f2iz>:
    4504:	0243      	lsls	r3, r0, #9
    4506:	0a59      	lsrs	r1, r3, #9
    4508:	0043      	lsls	r3, r0, #1
    450a:	0fc2      	lsrs	r2, r0, #31
    450c:	0e1b      	lsrs	r3, r3, #24
    450e:	2000      	movs	r0, #0
    4510:	2b7e      	cmp	r3, #126	; 0x7e
    4512:	dd0e      	ble.n	4532 <__aeabi_f2iz+0x2e>
    4514:	2b9d      	cmp	r3, #157	; 0x9d
    4516:	dc0d      	bgt.n	4534 <__aeabi_f2iz+0x30>
    4518:	2080      	movs	r0, #128	; 0x80
    451a:	0400      	lsls	r0, r0, #16
    451c:	4301      	orrs	r1, r0
    451e:	2b95      	cmp	r3, #149	; 0x95
    4520:	dc0b      	bgt.n	453a <__aeabi_f2iz+0x36>
    4522:	2096      	movs	r0, #150	; 0x96
    4524:	1ac3      	subs	r3, r0, r3
    4526:	40d9      	lsrs	r1, r3
    4528:	000b      	movs	r3, r1
    452a:	4258      	negs	r0, r3
    452c:	2a00      	cmp	r2, #0
    452e:	d100      	bne.n	4532 <__aeabi_f2iz+0x2e>
    4530:	0018      	movs	r0, r3
    4532:	4770      	bx	lr
    4534:	4b03      	ldr	r3, [pc, #12]	; (4544 <__aeabi_f2iz+0x40>)
    4536:	18d0      	adds	r0, r2, r3
    4538:	e7fb      	b.n	4532 <__aeabi_f2iz+0x2e>
    453a:	3b96      	subs	r3, #150	; 0x96
    453c:	4099      	lsls	r1, r3
    453e:	000b      	movs	r3, r1
    4540:	e7f3      	b.n	452a <__aeabi_f2iz+0x26>
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	7fffffff 	.word	0x7fffffff

00004548 <__aeabi_dadd>:
    4548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    454a:	4656      	mov	r6, sl
    454c:	465f      	mov	r7, fp
    454e:	464d      	mov	r5, r9
    4550:	4644      	mov	r4, r8
    4552:	b4f0      	push	{r4, r5, r6, r7}
    4554:	000f      	movs	r7, r1
    4556:	0ffd      	lsrs	r5, r7, #31
    4558:	46aa      	mov	sl, r5
    455a:	0309      	lsls	r1, r1, #12
    455c:	007c      	lsls	r4, r7, #1
    455e:	002e      	movs	r6, r5
    4560:	005f      	lsls	r7, r3, #1
    4562:	0f45      	lsrs	r5, r0, #29
    4564:	0a49      	lsrs	r1, r1, #9
    4566:	0d7f      	lsrs	r7, r7, #21
    4568:	4329      	orrs	r1, r5
    456a:	00c5      	lsls	r5, r0, #3
    456c:	0318      	lsls	r0, r3, #12
    456e:	46bc      	mov	ip, r7
    4570:	0a40      	lsrs	r0, r0, #9
    4572:	0f57      	lsrs	r7, r2, #29
    4574:	0d64      	lsrs	r4, r4, #21
    4576:	0fdb      	lsrs	r3, r3, #31
    4578:	4338      	orrs	r0, r7
    457a:	00d2      	lsls	r2, r2, #3
    457c:	459a      	cmp	sl, r3
    457e:	d100      	bne.n	4582 <__aeabi_dadd+0x3a>
    4580:	e0aa      	b.n	46d8 <__aeabi_dadd+0x190>
    4582:	4666      	mov	r6, ip
    4584:	1ba6      	subs	r6, r4, r6
    4586:	2e00      	cmp	r6, #0
    4588:	dc00      	bgt.n	458c <__aeabi_dadd+0x44>
    458a:	e0ff      	b.n	478c <__aeabi_dadd+0x244>
    458c:	4663      	mov	r3, ip
    458e:	2b00      	cmp	r3, #0
    4590:	d139      	bne.n	4606 <__aeabi_dadd+0xbe>
    4592:	0003      	movs	r3, r0
    4594:	4313      	orrs	r3, r2
    4596:	d000      	beq.n	459a <__aeabi_dadd+0x52>
    4598:	e0d9      	b.n	474e <__aeabi_dadd+0x206>
    459a:	076b      	lsls	r3, r5, #29
    459c:	d009      	beq.n	45b2 <__aeabi_dadd+0x6a>
    459e:	230f      	movs	r3, #15
    45a0:	402b      	ands	r3, r5
    45a2:	2b04      	cmp	r3, #4
    45a4:	d005      	beq.n	45b2 <__aeabi_dadd+0x6a>
    45a6:	1d2b      	adds	r3, r5, #4
    45a8:	42ab      	cmp	r3, r5
    45aa:	41ad      	sbcs	r5, r5
    45ac:	426d      	negs	r5, r5
    45ae:	1949      	adds	r1, r1, r5
    45b0:	001d      	movs	r5, r3
    45b2:	020b      	lsls	r3, r1, #8
    45b4:	d400      	bmi.n	45b8 <__aeabi_dadd+0x70>
    45b6:	e082      	b.n	46be <__aeabi_dadd+0x176>
    45b8:	4bca      	ldr	r3, [pc, #808]	; (48e4 <__aeabi_dadd+0x39c>)
    45ba:	3401      	adds	r4, #1
    45bc:	429c      	cmp	r4, r3
    45be:	d100      	bne.n	45c2 <__aeabi_dadd+0x7a>
    45c0:	e0fe      	b.n	47c0 <__aeabi_dadd+0x278>
    45c2:	000a      	movs	r2, r1
    45c4:	4656      	mov	r6, sl
    45c6:	4bc8      	ldr	r3, [pc, #800]	; (48e8 <__aeabi_dadd+0x3a0>)
    45c8:	08ed      	lsrs	r5, r5, #3
    45ca:	401a      	ands	r2, r3
    45cc:	0750      	lsls	r0, r2, #29
    45ce:	0564      	lsls	r4, r4, #21
    45d0:	0252      	lsls	r2, r2, #9
    45d2:	4305      	orrs	r5, r0
    45d4:	0b12      	lsrs	r2, r2, #12
    45d6:	0d64      	lsrs	r4, r4, #21
    45d8:	2100      	movs	r1, #0
    45da:	0312      	lsls	r2, r2, #12
    45dc:	0d0b      	lsrs	r3, r1, #20
    45de:	051b      	lsls	r3, r3, #20
    45e0:	0564      	lsls	r4, r4, #21
    45e2:	0b12      	lsrs	r2, r2, #12
    45e4:	431a      	orrs	r2, r3
    45e6:	0863      	lsrs	r3, r4, #1
    45e8:	4cc0      	ldr	r4, [pc, #768]	; (48ec <__aeabi_dadd+0x3a4>)
    45ea:	07f6      	lsls	r6, r6, #31
    45ec:	4014      	ands	r4, r2
    45ee:	431c      	orrs	r4, r3
    45f0:	0064      	lsls	r4, r4, #1
    45f2:	0864      	lsrs	r4, r4, #1
    45f4:	4334      	orrs	r4, r6
    45f6:	0028      	movs	r0, r5
    45f8:	0021      	movs	r1, r4
    45fa:	bc3c      	pop	{r2, r3, r4, r5}
    45fc:	4690      	mov	r8, r2
    45fe:	4699      	mov	r9, r3
    4600:	46a2      	mov	sl, r4
    4602:	46ab      	mov	fp, r5
    4604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4606:	4bb7      	ldr	r3, [pc, #732]	; (48e4 <__aeabi_dadd+0x39c>)
    4608:	429c      	cmp	r4, r3
    460a:	d0c6      	beq.n	459a <__aeabi_dadd+0x52>
    460c:	2380      	movs	r3, #128	; 0x80
    460e:	041b      	lsls	r3, r3, #16
    4610:	4318      	orrs	r0, r3
    4612:	2e38      	cmp	r6, #56	; 0x38
    4614:	dd00      	ble.n	4618 <__aeabi_dadd+0xd0>
    4616:	e0eb      	b.n	47f0 <__aeabi_dadd+0x2a8>
    4618:	2e1f      	cmp	r6, #31
    461a:	dd00      	ble.n	461e <__aeabi_dadd+0xd6>
    461c:	e11e      	b.n	485c <__aeabi_dadd+0x314>
    461e:	2320      	movs	r3, #32
    4620:	1b9b      	subs	r3, r3, r6
    4622:	469c      	mov	ip, r3
    4624:	0003      	movs	r3, r0
    4626:	4667      	mov	r7, ip
    4628:	40bb      	lsls	r3, r7
    462a:	4698      	mov	r8, r3
    462c:	0013      	movs	r3, r2
    462e:	4647      	mov	r7, r8
    4630:	40f3      	lsrs	r3, r6
    4632:	433b      	orrs	r3, r7
    4634:	4667      	mov	r7, ip
    4636:	40ba      	lsls	r2, r7
    4638:	1e57      	subs	r7, r2, #1
    463a:	41ba      	sbcs	r2, r7
    463c:	4313      	orrs	r3, r2
    463e:	0002      	movs	r2, r0
    4640:	40f2      	lsrs	r2, r6
    4642:	1aeb      	subs	r3, r5, r3
    4644:	429d      	cmp	r5, r3
    4646:	41b6      	sbcs	r6, r6
    4648:	001d      	movs	r5, r3
    464a:	1a8a      	subs	r2, r1, r2
    464c:	4276      	negs	r6, r6
    464e:	1b91      	subs	r1, r2, r6
    4650:	020b      	lsls	r3, r1, #8
    4652:	d531      	bpl.n	46b8 <__aeabi_dadd+0x170>
    4654:	024a      	lsls	r2, r1, #9
    4656:	0a56      	lsrs	r6, r2, #9
    4658:	2e00      	cmp	r6, #0
    465a:	d100      	bne.n	465e <__aeabi_dadd+0x116>
    465c:	e0b4      	b.n	47c8 <__aeabi_dadd+0x280>
    465e:	0030      	movs	r0, r6
    4660:	f001 fe40 	bl	62e4 <__clzsi2>
    4664:	0003      	movs	r3, r0
    4666:	3b08      	subs	r3, #8
    4668:	2b1f      	cmp	r3, #31
    466a:	dd00      	ble.n	466e <__aeabi_dadd+0x126>
    466c:	e0b5      	b.n	47da <__aeabi_dadd+0x292>
    466e:	2220      	movs	r2, #32
    4670:	0029      	movs	r1, r5
    4672:	1ad2      	subs	r2, r2, r3
    4674:	40d1      	lsrs	r1, r2
    4676:	409e      	lsls	r6, r3
    4678:	000a      	movs	r2, r1
    467a:	409d      	lsls	r5, r3
    467c:	4332      	orrs	r2, r6
    467e:	429c      	cmp	r4, r3
    4680:	dd00      	ble.n	4684 <__aeabi_dadd+0x13c>
    4682:	e0b1      	b.n	47e8 <__aeabi_dadd+0x2a0>
    4684:	1b1c      	subs	r4, r3, r4
    4686:	1c63      	adds	r3, r4, #1
    4688:	2b1f      	cmp	r3, #31
    468a:	dd00      	ble.n	468e <__aeabi_dadd+0x146>
    468c:	e0d5      	b.n	483a <__aeabi_dadd+0x2f2>
    468e:	2120      	movs	r1, #32
    4690:	0014      	movs	r4, r2
    4692:	0028      	movs	r0, r5
    4694:	1ac9      	subs	r1, r1, r3
    4696:	408c      	lsls	r4, r1
    4698:	40d8      	lsrs	r0, r3
    469a:	408d      	lsls	r5, r1
    469c:	4304      	orrs	r4, r0
    469e:	40da      	lsrs	r2, r3
    46a0:	1e68      	subs	r0, r5, #1
    46a2:	4185      	sbcs	r5, r0
    46a4:	0011      	movs	r1, r2
    46a6:	4325      	orrs	r5, r4
    46a8:	2400      	movs	r4, #0
    46aa:	e776      	b.n	459a <__aeabi_dadd+0x52>
    46ac:	4641      	mov	r1, r8
    46ae:	4331      	orrs	r1, r6
    46b0:	d100      	bne.n	46b4 <__aeabi_dadd+0x16c>
    46b2:	e234      	b.n	4b1e <__aeabi_dadd+0x5d6>
    46b4:	0031      	movs	r1, r6
    46b6:	4645      	mov	r5, r8
    46b8:	076b      	lsls	r3, r5, #29
    46ba:	d000      	beq.n	46be <__aeabi_dadd+0x176>
    46bc:	e76f      	b.n	459e <__aeabi_dadd+0x56>
    46be:	4656      	mov	r6, sl
    46c0:	0748      	lsls	r0, r1, #29
    46c2:	08ed      	lsrs	r5, r5, #3
    46c4:	08c9      	lsrs	r1, r1, #3
    46c6:	4305      	orrs	r5, r0
    46c8:	4b86      	ldr	r3, [pc, #536]	; (48e4 <__aeabi_dadd+0x39c>)
    46ca:	429c      	cmp	r4, r3
    46cc:	d035      	beq.n	473a <__aeabi_dadd+0x1f2>
    46ce:	030a      	lsls	r2, r1, #12
    46d0:	0564      	lsls	r4, r4, #21
    46d2:	0b12      	lsrs	r2, r2, #12
    46d4:	0d64      	lsrs	r4, r4, #21
    46d6:	e77f      	b.n	45d8 <__aeabi_dadd+0x90>
    46d8:	4663      	mov	r3, ip
    46da:	1ae3      	subs	r3, r4, r3
    46dc:	469b      	mov	fp, r3
    46de:	2b00      	cmp	r3, #0
    46e0:	dc00      	bgt.n	46e4 <__aeabi_dadd+0x19c>
    46e2:	e08b      	b.n	47fc <__aeabi_dadd+0x2b4>
    46e4:	4667      	mov	r7, ip
    46e6:	2f00      	cmp	r7, #0
    46e8:	d03c      	beq.n	4764 <__aeabi_dadd+0x21c>
    46ea:	4f7e      	ldr	r7, [pc, #504]	; (48e4 <__aeabi_dadd+0x39c>)
    46ec:	42bc      	cmp	r4, r7
    46ee:	d100      	bne.n	46f2 <__aeabi_dadd+0x1aa>
    46f0:	e753      	b.n	459a <__aeabi_dadd+0x52>
    46f2:	2780      	movs	r7, #128	; 0x80
    46f4:	043f      	lsls	r7, r7, #16
    46f6:	4338      	orrs	r0, r7
    46f8:	465b      	mov	r3, fp
    46fa:	2b38      	cmp	r3, #56	; 0x38
    46fc:	dc00      	bgt.n	4700 <__aeabi_dadd+0x1b8>
    46fe:	e0f7      	b.n	48f0 <__aeabi_dadd+0x3a8>
    4700:	4302      	orrs	r2, r0
    4702:	1e50      	subs	r0, r2, #1
    4704:	4182      	sbcs	r2, r0
    4706:	2000      	movs	r0, #0
    4708:	b2d2      	uxtb	r2, r2
    470a:	1953      	adds	r3, r2, r5
    470c:	1842      	adds	r2, r0, r1
    470e:	42ab      	cmp	r3, r5
    4710:	4189      	sbcs	r1, r1
    4712:	001d      	movs	r5, r3
    4714:	4249      	negs	r1, r1
    4716:	1889      	adds	r1, r1, r2
    4718:	020b      	lsls	r3, r1, #8
    471a:	d5cd      	bpl.n	46b8 <__aeabi_dadd+0x170>
    471c:	4b71      	ldr	r3, [pc, #452]	; (48e4 <__aeabi_dadd+0x39c>)
    471e:	3401      	adds	r4, #1
    4720:	429c      	cmp	r4, r3
    4722:	d100      	bne.n	4726 <__aeabi_dadd+0x1de>
    4724:	e13d      	b.n	49a2 <__aeabi_dadd+0x45a>
    4726:	2001      	movs	r0, #1
    4728:	4a6f      	ldr	r2, [pc, #444]	; (48e8 <__aeabi_dadd+0x3a0>)
    472a:	086b      	lsrs	r3, r5, #1
    472c:	400a      	ands	r2, r1
    472e:	4028      	ands	r0, r5
    4730:	4318      	orrs	r0, r3
    4732:	07d5      	lsls	r5, r2, #31
    4734:	4305      	orrs	r5, r0
    4736:	0851      	lsrs	r1, r2, #1
    4738:	e72f      	b.n	459a <__aeabi_dadd+0x52>
    473a:	002b      	movs	r3, r5
    473c:	430b      	orrs	r3, r1
    473e:	d100      	bne.n	4742 <__aeabi_dadd+0x1fa>
    4740:	e1cb      	b.n	4ada <__aeabi_dadd+0x592>
    4742:	2380      	movs	r3, #128	; 0x80
    4744:	031b      	lsls	r3, r3, #12
    4746:	430b      	orrs	r3, r1
    4748:	031a      	lsls	r2, r3, #12
    474a:	0b12      	lsrs	r2, r2, #12
    474c:	e744      	b.n	45d8 <__aeabi_dadd+0x90>
    474e:	3e01      	subs	r6, #1
    4750:	2e00      	cmp	r6, #0
    4752:	d16d      	bne.n	4830 <__aeabi_dadd+0x2e8>
    4754:	1aae      	subs	r6, r5, r2
    4756:	42b5      	cmp	r5, r6
    4758:	419b      	sbcs	r3, r3
    475a:	1a09      	subs	r1, r1, r0
    475c:	425b      	negs	r3, r3
    475e:	1ac9      	subs	r1, r1, r3
    4760:	0035      	movs	r5, r6
    4762:	e775      	b.n	4650 <__aeabi_dadd+0x108>
    4764:	0007      	movs	r7, r0
    4766:	4317      	orrs	r7, r2
    4768:	d100      	bne.n	476c <__aeabi_dadd+0x224>
    476a:	e716      	b.n	459a <__aeabi_dadd+0x52>
    476c:	2301      	movs	r3, #1
    476e:	425b      	negs	r3, r3
    4770:	469c      	mov	ip, r3
    4772:	44e3      	add	fp, ip
    4774:	465b      	mov	r3, fp
    4776:	2b00      	cmp	r3, #0
    4778:	d000      	beq.n	477c <__aeabi_dadd+0x234>
    477a:	e0e0      	b.n	493e <__aeabi_dadd+0x3f6>
    477c:	18aa      	adds	r2, r5, r2
    477e:	42aa      	cmp	r2, r5
    4780:	419b      	sbcs	r3, r3
    4782:	1809      	adds	r1, r1, r0
    4784:	425b      	negs	r3, r3
    4786:	1859      	adds	r1, r3, r1
    4788:	0015      	movs	r5, r2
    478a:	e7c5      	b.n	4718 <__aeabi_dadd+0x1d0>
    478c:	2e00      	cmp	r6, #0
    478e:	d175      	bne.n	487c <__aeabi_dadd+0x334>
    4790:	1c66      	adds	r6, r4, #1
    4792:	0576      	lsls	r6, r6, #21
    4794:	0d76      	lsrs	r6, r6, #21
    4796:	2e01      	cmp	r6, #1
    4798:	dc00      	bgt.n	479c <__aeabi_dadd+0x254>
    479a:	e0f3      	b.n	4984 <__aeabi_dadd+0x43c>
    479c:	1aae      	subs	r6, r5, r2
    479e:	46b0      	mov	r8, r6
    47a0:	4545      	cmp	r5, r8
    47a2:	41bf      	sbcs	r7, r7
    47a4:	1a0e      	subs	r6, r1, r0
    47a6:	427f      	negs	r7, r7
    47a8:	1bf6      	subs	r6, r6, r7
    47aa:	0237      	lsls	r7, r6, #8
    47ac:	d400      	bmi.n	47b0 <__aeabi_dadd+0x268>
    47ae:	e08f      	b.n	48d0 <__aeabi_dadd+0x388>
    47b0:	1b55      	subs	r5, r2, r5
    47b2:	42aa      	cmp	r2, r5
    47b4:	41b6      	sbcs	r6, r6
    47b6:	1a41      	subs	r1, r0, r1
    47b8:	4276      	negs	r6, r6
    47ba:	1b8e      	subs	r6, r1, r6
    47bc:	469a      	mov	sl, r3
    47be:	e74b      	b.n	4658 <__aeabi_dadd+0x110>
    47c0:	4656      	mov	r6, sl
    47c2:	2200      	movs	r2, #0
    47c4:	2500      	movs	r5, #0
    47c6:	e707      	b.n	45d8 <__aeabi_dadd+0x90>
    47c8:	0028      	movs	r0, r5
    47ca:	f001 fd8b 	bl	62e4 <__clzsi2>
    47ce:	3020      	adds	r0, #32
    47d0:	0003      	movs	r3, r0
    47d2:	3b08      	subs	r3, #8
    47d4:	2b1f      	cmp	r3, #31
    47d6:	dc00      	bgt.n	47da <__aeabi_dadd+0x292>
    47d8:	e749      	b.n	466e <__aeabi_dadd+0x126>
    47da:	002a      	movs	r2, r5
    47dc:	3828      	subs	r0, #40	; 0x28
    47de:	4082      	lsls	r2, r0
    47e0:	2500      	movs	r5, #0
    47e2:	429c      	cmp	r4, r3
    47e4:	dc00      	bgt.n	47e8 <__aeabi_dadd+0x2a0>
    47e6:	e74d      	b.n	4684 <__aeabi_dadd+0x13c>
    47e8:	493f      	ldr	r1, [pc, #252]	; (48e8 <__aeabi_dadd+0x3a0>)
    47ea:	1ae4      	subs	r4, r4, r3
    47ec:	4011      	ands	r1, r2
    47ee:	e6d4      	b.n	459a <__aeabi_dadd+0x52>
    47f0:	4302      	orrs	r2, r0
    47f2:	1e50      	subs	r0, r2, #1
    47f4:	4182      	sbcs	r2, r0
    47f6:	b2d3      	uxtb	r3, r2
    47f8:	2200      	movs	r2, #0
    47fa:	e722      	b.n	4642 <__aeabi_dadd+0xfa>
    47fc:	2b00      	cmp	r3, #0
    47fe:	d000      	beq.n	4802 <__aeabi_dadd+0x2ba>
    4800:	e0f3      	b.n	49ea <__aeabi_dadd+0x4a2>
    4802:	1c63      	adds	r3, r4, #1
    4804:	469c      	mov	ip, r3
    4806:	055b      	lsls	r3, r3, #21
    4808:	0d5b      	lsrs	r3, r3, #21
    480a:	2b01      	cmp	r3, #1
    480c:	dc00      	bgt.n	4810 <__aeabi_dadd+0x2c8>
    480e:	e09f      	b.n	4950 <__aeabi_dadd+0x408>
    4810:	4b34      	ldr	r3, [pc, #208]	; (48e4 <__aeabi_dadd+0x39c>)
    4812:	459c      	cmp	ip, r3
    4814:	d100      	bne.n	4818 <__aeabi_dadd+0x2d0>
    4816:	e0c3      	b.n	49a0 <__aeabi_dadd+0x458>
    4818:	18aa      	adds	r2, r5, r2
    481a:	1809      	adds	r1, r1, r0
    481c:	42aa      	cmp	r2, r5
    481e:	4180      	sbcs	r0, r0
    4820:	4240      	negs	r0, r0
    4822:	1841      	adds	r1, r0, r1
    4824:	07cd      	lsls	r5, r1, #31
    4826:	0852      	lsrs	r2, r2, #1
    4828:	4315      	orrs	r5, r2
    482a:	0849      	lsrs	r1, r1, #1
    482c:	4664      	mov	r4, ip
    482e:	e6b4      	b.n	459a <__aeabi_dadd+0x52>
    4830:	4b2c      	ldr	r3, [pc, #176]	; (48e4 <__aeabi_dadd+0x39c>)
    4832:	429c      	cmp	r4, r3
    4834:	d000      	beq.n	4838 <__aeabi_dadd+0x2f0>
    4836:	e6ec      	b.n	4612 <__aeabi_dadd+0xca>
    4838:	e6af      	b.n	459a <__aeabi_dadd+0x52>
    483a:	0011      	movs	r1, r2
    483c:	3c1f      	subs	r4, #31
    483e:	40e1      	lsrs	r1, r4
    4840:	000c      	movs	r4, r1
    4842:	2b20      	cmp	r3, #32
    4844:	d100      	bne.n	4848 <__aeabi_dadd+0x300>
    4846:	e07f      	b.n	4948 <__aeabi_dadd+0x400>
    4848:	2140      	movs	r1, #64	; 0x40
    484a:	1acb      	subs	r3, r1, r3
    484c:	409a      	lsls	r2, r3
    484e:	4315      	orrs	r5, r2
    4850:	1e6a      	subs	r2, r5, #1
    4852:	4195      	sbcs	r5, r2
    4854:	2100      	movs	r1, #0
    4856:	4325      	orrs	r5, r4
    4858:	2400      	movs	r4, #0
    485a:	e72d      	b.n	46b8 <__aeabi_dadd+0x170>
    485c:	0033      	movs	r3, r6
    485e:	0007      	movs	r7, r0
    4860:	3b20      	subs	r3, #32
    4862:	40df      	lsrs	r7, r3
    4864:	003b      	movs	r3, r7
    4866:	2e20      	cmp	r6, #32
    4868:	d070      	beq.n	494c <__aeabi_dadd+0x404>
    486a:	2740      	movs	r7, #64	; 0x40
    486c:	1bbe      	subs	r6, r7, r6
    486e:	40b0      	lsls	r0, r6
    4870:	4302      	orrs	r2, r0
    4872:	1e50      	subs	r0, r2, #1
    4874:	4182      	sbcs	r2, r0
    4876:	4313      	orrs	r3, r2
    4878:	2200      	movs	r2, #0
    487a:	e6e2      	b.n	4642 <__aeabi_dadd+0xfa>
    487c:	2c00      	cmp	r4, #0
    487e:	d04f      	beq.n	4920 <__aeabi_dadd+0x3d8>
    4880:	4c18      	ldr	r4, [pc, #96]	; (48e4 <__aeabi_dadd+0x39c>)
    4882:	45a4      	cmp	ip, r4
    4884:	d100      	bne.n	4888 <__aeabi_dadd+0x340>
    4886:	e0ab      	b.n	49e0 <__aeabi_dadd+0x498>
    4888:	2480      	movs	r4, #128	; 0x80
    488a:	0424      	lsls	r4, r4, #16
    488c:	4276      	negs	r6, r6
    488e:	4321      	orrs	r1, r4
    4890:	2e38      	cmp	r6, #56	; 0x38
    4892:	dd00      	ble.n	4896 <__aeabi_dadd+0x34e>
    4894:	e0df      	b.n	4a56 <__aeabi_dadd+0x50e>
    4896:	2e1f      	cmp	r6, #31
    4898:	dd00      	ble.n	489c <__aeabi_dadd+0x354>
    489a:	e143      	b.n	4b24 <__aeabi_dadd+0x5dc>
    489c:	2720      	movs	r7, #32
    489e:	1bbc      	subs	r4, r7, r6
    48a0:	46a1      	mov	r9, r4
    48a2:	000c      	movs	r4, r1
    48a4:	464f      	mov	r7, r9
    48a6:	40bc      	lsls	r4, r7
    48a8:	46a0      	mov	r8, r4
    48aa:	002c      	movs	r4, r5
    48ac:	4647      	mov	r7, r8
    48ae:	40f4      	lsrs	r4, r6
    48b0:	433c      	orrs	r4, r7
    48b2:	464f      	mov	r7, r9
    48b4:	40bd      	lsls	r5, r7
    48b6:	1e6f      	subs	r7, r5, #1
    48b8:	41bd      	sbcs	r5, r7
    48ba:	40f1      	lsrs	r1, r6
    48bc:	432c      	orrs	r4, r5
    48be:	1b15      	subs	r5, r2, r4
    48c0:	42aa      	cmp	r2, r5
    48c2:	4192      	sbcs	r2, r2
    48c4:	1a41      	subs	r1, r0, r1
    48c6:	4252      	negs	r2, r2
    48c8:	1a89      	subs	r1, r1, r2
    48ca:	4664      	mov	r4, ip
    48cc:	469a      	mov	sl, r3
    48ce:	e6bf      	b.n	4650 <__aeabi_dadd+0x108>
    48d0:	4641      	mov	r1, r8
    48d2:	4645      	mov	r5, r8
    48d4:	4331      	orrs	r1, r6
    48d6:	d000      	beq.n	48da <__aeabi_dadd+0x392>
    48d8:	e6be      	b.n	4658 <__aeabi_dadd+0x110>
    48da:	2600      	movs	r6, #0
    48dc:	2400      	movs	r4, #0
    48de:	2500      	movs	r5, #0
    48e0:	e6f2      	b.n	46c8 <__aeabi_dadd+0x180>
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	000007ff 	.word	0x000007ff
    48e8:	ff7fffff 	.word	0xff7fffff
    48ec:	800fffff 	.word	0x800fffff
    48f0:	2b1f      	cmp	r3, #31
    48f2:	dc59      	bgt.n	49a8 <__aeabi_dadd+0x460>
    48f4:	2720      	movs	r7, #32
    48f6:	1aff      	subs	r7, r7, r3
    48f8:	46bc      	mov	ip, r7
    48fa:	0007      	movs	r7, r0
    48fc:	4663      	mov	r3, ip
    48fe:	409f      	lsls	r7, r3
    4900:	465b      	mov	r3, fp
    4902:	46b9      	mov	r9, r7
    4904:	0017      	movs	r7, r2
    4906:	40df      	lsrs	r7, r3
    4908:	46b8      	mov	r8, r7
    490a:	464f      	mov	r7, r9
    490c:	4643      	mov	r3, r8
    490e:	431f      	orrs	r7, r3
    4910:	4663      	mov	r3, ip
    4912:	409a      	lsls	r2, r3
    4914:	1e53      	subs	r3, r2, #1
    4916:	419a      	sbcs	r2, r3
    4918:	465b      	mov	r3, fp
    491a:	433a      	orrs	r2, r7
    491c:	40d8      	lsrs	r0, r3
    491e:	e6f4      	b.n	470a <__aeabi_dadd+0x1c2>
    4920:	000c      	movs	r4, r1
    4922:	432c      	orrs	r4, r5
    4924:	d05c      	beq.n	49e0 <__aeabi_dadd+0x498>
    4926:	43f6      	mvns	r6, r6
    4928:	2e00      	cmp	r6, #0
    492a:	d155      	bne.n	49d8 <__aeabi_dadd+0x490>
    492c:	1b55      	subs	r5, r2, r5
    492e:	42aa      	cmp	r2, r5
    4930:	41a4      	sbcs	r4, r4
    4932:	1a41      	subs	r1, r0, r1
    4934:	4264      	negs	r4, r4
    4936:	1b09      	subs	r1, r1, r4
    4938:	469a      	mov	sl, r3
    493a:	4664      	mov	r4, ip
    493c:	e688      	b.n	4650 <__aeabi_dadd+0x108>
    493e:	4f96      	ldr	r7, [pc, #600]	; (4b98 <__aeabi_dadd+0x650>)
    4940:	42bc      	cmp	r4, r7
    4942:	d000      	beq.n	4946 <__aeabi_dadd+0x3fe>
    4944:	e6d8      	b.n	46f8 <__aeabi_dadd+0x1b0>
    4946:	e628      	b.n	459a <__aeabi_dadd+0x52>
    4948:	2200      	movs	r2, #0
    494a:	e780      	b.n	484e <__aeabi_dadd+0x306>
    494c:	2000      	movs	r0, #0
    494e:	e78f      	b.n	4870 <__aeabi_dadd+0x328>
    4950:	000b      	movs	r3, r1
    4952:	432b      	orrs	r3, r5
    4954:	2c00      	cmp	r4, #0
    4956:	d000      	beq.n	495a <__aeabi_dadd+0x412>
    4958:	e0c2      	b.n	4ae0 <__aeabi_dadd+0x598>
    495a:	2b00      	cmp	r3, #0
    495c:	d100      	bne.n	4960 <__aeabi_dadd+0x418>
    495e:	e101      	b.n	4b64 <__aeabi_dadd+0x61c>
    4960:	0003      	movs	r3, r0
    4962:	4313      	orrs	r3, r2
    4964:	d100      	bne.n	4968 <__aeabi_dadd+0x420>
    4966:	e618      	b.n	459a <__aeabi_dadd+0x52>
    4968:	18ab      	adds	r3, r5, r2
    496a:	42ab      	cmp	r3, r5
    496c:	41b6      	sbcs	r6, r6
    496e:	1809      	adds	r1, r1, r0
    4970:	4276      	negs	r6, r6
    4972:	1871      	adds	r1, r6, r1
    4974:	020a      	lsls	r2, r1, #8
    4976:	d400      	bmi.n	497a <__aeabi_dadd+0x432>
    4978:	e109      	b.n	4b8e <__aeabi_dadd+0x646>
    497a:	4a88      	ldr	r2, [pc, #544]	; (4b9c <__aeabi_dadd+0x654>)
    497c:	001d      	movs	r5, r3
    497e:	4011      	ands	r1, r2
    4980:	4664      	mov	r4, ip
    4982:	e60a      	b.n	459a <__aeabi_dadd+0x52>
    4984:	2c00      	cmp	r4, #0
    4986:	d15b      	bne.n	4a40 <__aeabi_dadd+0x4f8>
    4988:	000e      	movs	r6, r1
    498a:	432e      	orrs	r6, r5
    498c:	d000      	beq.n	4990 <__aeabi_dadd+0x448>
    498e:	e08a      	b.n	4aa6 <__aeabi_dadd+0x55e>
    4990:	0001      	movs	r1, r0
    4992:	4311      	orrs	r1, r2
    4994:	d100      	bne.n	4998 <__aeabi_dadd+0x450>
    4996:	e0c2      	b.n	4b1e <__aeabi_dadd+0x5d6>
    4998:	0001      	movs	r1, r0
    499a:	0015      	movs	r5, r2
    499c:	469a      	mov	sl, r3
    499e:	e5fc      	b.n	459a <__aeabi_dadd+0x52>
    49a0:	4664      	mov	r4, ip
    49a2:	2100      	movs	r1, #0
    49a4:	2500      	movs	r5, #0
    49a6:	e68f      	b.n	46c8 <__aeabi_dadd+0x180>
    49a8:	2320      	movs	r3, #32
    49aa:	425b      	negs	r3, r3
    49ac:	469c      	mov	ip, r3
    49ae:	44dc      	add	ip, fp
    49b0:	4663      	mov	r3, ip
    49b2:	0007      	movs	r7, r0
    49b4:	40df      	lsrs	r7, r3
    49b6:	465b      	mov	r3, fp
    49b8:	46bc      	mov	ip, r7
    49ba:	2b20      	cmp	r3, #32
    49bc:	d100      	bne.n	49c0 <__aeabi_dadd+0x478>
    49be:	e0ac      	b.n	4b1a <__aeabi_dadd+0x5d2>
    49c0:	2340      	movs	r3, #64	; 0x40
    49c2:	465f      	mov	r7, fp
    49c4:	1bdb      	subs	r3, r3, r7
    49c6:	4098      	lsls	r0, r3
    49c8:	4302      	orrs	r2, r0
    49ca:	1e50      	subs	r0, r2, #1
    49cc:	4182      	sbcs	r2, r0
    49ce:	4663      	mov	r3, ip
    49d0:	4313      	orrs	r3, r2
    49d2:	001a      	movs	r2, r3
    49d4:	2000      	movs	r0, #0
    49d6:	e698      	b.n	470a <__aeabi_dadd+0x1c2>
    49d8:	4c6f      	ldr	r4, [pc, #444]	; (4b98 <__aeabi_dadd+0x650>)
    49da:	45a4      	cmp	ip, r4
    49dc:	d000      	beq.n	49e0 <__aeabi_dadd+0x498>
    49de:	e757      	b.n	4890 <__aeabi_dadd+0x348>
    49e0:	0001      	movs	r1, r0
    49e2:	0015      	movs	r5, r2
    49e4:	4664      	mov	r4, ip
    49e6:	469a      	mov	sl, r3
    49e8:	e5d7      	b.n	459a <__aeabi_dadd+0x52>
    49ea:	2c00      	cmp	r4, #0
    49ec:	d139      	bne.n	4a62 <__aeabi_dadd+0x51a>
    49ee:	000c      	movs	r4, r1
    49f0:	432c      	orrs	r4, r5
    49f2:	d06e      	beq.n	4ad2 <__aeabi_dadd+0x58a>
    49f4:	43db      	mvns	r3, r3
    49f6:	2b00      	cmp	r3, #0
    49f8:	d01a      	beq.n	4a30 <__aeabi_dadd+0x4e8>
    49fa:	4c67      	ldr	r4, [pc, #412]	; (4b98 <__aeabi_dadd+0x650>)
    49fc:	45a4      	cmp	ip, r4
    49fe:	d068      	beq.n	4ad2 <__aeabi_dadd+0x58a>
    4a00:	2b38      	cmp	r3, #56	; 0x38
    4a02:	dd00      	ble.n	4a06 <__aeabi_dadd+0x4be>
    4a04:	e0a4      	b.n	4b50 <__aeabi_dadd+0x608>
    4a06:	2b1f      	cmp	r3, #31
    4a08:	dd00      	ble.n	4a0c <__aeabi_dadd+0x4c4>
    4a0a:	e0ae      	b.n	4b6a <__aeabi_dadd+0x622>
    4a0c:	2420      	movs	r4, #32
    4a0e:	000f      	movs	r7, r1
    4a10:	1ae4      	subs	r4, r4, r3
    4a12:	40a7      	lsls	r7, r4
    4a14:	46b9      	mov	r9, r7
    4a16:	002f      	movs	r7, r5
    4a18:	40df      	lsrs	r7, r3
    4a1a:	46b8      	mov	r8, r7
    4a1c:	46a3      	mov	fp, r4
    4a1e:	464f      	mov	r7, r9
    4a20:	4644      	mov	r4, r8
    4a22:	4327      	orrs	r7, r4
    4a24:	465c      	mov	r4, fp
    4a26:	40a5      	lsls	r5, r4
    4a28:	1e6c      	subs	r4, r5, #1
    4a2a:	41a5      	sbcs	r5, r4
    4a2c:	40d9      	lsrs	r1, r3
    4a2e:	433d      	orrs	r5, r7
    4a30:	18ad      	adds	r5, r5, r2
    4a32:	4295      	cmp	r5, r2
    4a34:	419b      	sbcs	r3, r3
    4a36:	1809      	adds	r1, r1, r0
    4a38:	425b      	negs	r3, r3
    4a3a:	1859      	adds	r1, r3, r1
    4a3c:	4664      	mov	r4, ip
    4a3e:	e66b      	b.n	4718 <__aeabi_dadd+0x1d0>
    4a40:	000c      	movs	r4, r1
    4a42:	432c      	orrs	r4, r5
    4a44:	d115      	bne.n	4a72 <__aeabi_dadd+0x52a>
    4a46:	0001      	movs	r1, r0
    4a48:	4311      	orrs	r1, r2
    4a4a:	d07b      	beq.n	4b44 <__aeabi_dadd+0x5fc>
    4a4c:	0001      	movs	r1, r0
    4a4e:	0015      	movs	r5, r2
    4a50:	469a      	mov	sl, r3
    4a52:	4c51      	ldr	r4, [pc, #324]	; (4b98 <__aeabi_dadd+0x650>)
    4a54:	e5a1      	b.n	459a <__aeabi_dadd+0x52>
    4a56:	430d      	orrs	r5, r1
    4a58:	1e69      	subs	r1, r5, #1
    4a5a:	418d      	sbcs	r5, r1
    4a5c:	2100      	movs	r1, #0
    4a5e:	b2ec      	uxtb	r4, r5
    4a60:	e72d      	b.n	48be <__aeabi_dadd+0x376>
    4a62:	4c4d      	ldr	r4, [pc, #308]	; (4b98 <__aeabi_dadd+0x650>)
    4a64:	45a4      	cmp	ip, r4
    4a66:	d034      	beq.n	4ad2 <__aeabi_dadd+0x58a>
    4a68:	2480      	movs	r4, #128	; 0x80
    4a6a:	0424      	lsls	r4, r4, #16
    4a6c:	425b      	negs	r3, r3
    4a6e:	4321      	orrs	r1, r4
    4a70:	e7c6      	b.n	4a00 <__aeabi_dadd+0x4b8>
    4a72:	0004      	movs	r4, r0
    4a74:	4314      	orrs	r4, r2
    4a76:	d04e      	beq.n	4b16 <__aeabi_dadd+0x5ce>
    4a78:	08ed      	lsrs	r5, r5, #3
    4a7a:	074c      	lsls	r4, r1, #29
    4a7c:	432c      	orrs	r4, r5
    4a7e:	2580      	movs	r5, #128	; 0x80
    4a80:	08c9      	lsrs	r1, r1, #3
    4a82:	032d      	lsls	r5, r5, #12
    4a84:	4229      	tst	r1, r5
    4a86:	d008      	beq.n	4a9a <__aeabi_dadd+0x552>
    4a88:	08c6      	lsrs	r6, r0, #3
    4a8a:	422e      	tst	r6, r5
    4a8c:	d105      	bne.n	4a9a <__aeabi_dadd+0x552>
    4a8e:	08d2      	lsrs	r2, r2, #3
    4a90:	0741      	lsls	r1, r0, #29
    4a92:	4311      	orrs	r1, r2
    4a94:	000c      	movs	r4, r1
    4a96:	469a      	mov	sl, r3
    4a98:	0031      	movs	r1, r6
    4a9a:	0f62      	lsrs	r2, r4, #29
    4a9c:	00c9      	lsls	r1, r1, #3
    4a9e:	00e5      	lsls	r5, r4, #3
    4aa0:	4311      	orrs	r1, r2
    4aa2:	4c3d      	ldr	r4, [pc, #244]	; (4b98 <__aeabi_dadd+0x650>)
    4aa4:	e579      	b.n	459a <__aeabi_dadd+0x52>
    4aa6:	0006      	movs	r6, r0
    4aa8:	4316      	orrs	r6, r2
    4aaa:	d100      	bne.n	4aae <__aeabi_dadd+0x566>
    4aac:	e575      	b.n	459a <__aeabi_dadd+0x52>
    4aae:	1aae      	subs	r6, r5, r2
    4ab0:	46b0      	mov	r8, r6
    4ab2:	4545      	cmp	r5, r8
    4ab4:	41bf      	sbcs	r7, r7
    4ab6:	1a0e      	subs	r6, r1, r0
    4ab8:	427f      	negs	r7, r7
    4aba:	1bf6      	subs	r6, r6, r7
    4abc:	0237      	lsls	r7, r6, #8
    4abe:	d400      	bmi.n	4ac2 <__aeabi_dadd+0x57a>
    4ac0:	e5f4      	b.n	46ac <__aeabi_dadd+0x164>
    4ac2:	1b55      	subs	r5, r2, r5
    4ac4:	42aa      	cmp	r2, r5
    4ac6:	41b6      	sbcs	r6, r6
    4ac8:	1a41      	subs	r1, r0, r1
    4aca:	4276      	negs	r6, r6
    4acc:	1b89      	subs	r1, r1, r6
    4ace:	469a      	mov	sl, r3
    4ad0:	e563      	b.n	459a <__aeabi_dadd+0x52>
    4ad2:	0001      	movs	r1, r0
    4ad4:	0015      	movs	r5, r2
    4ad6:	4664      	mov	r4, ip
    4ad8:	e55f      	b.n	459a <__aeabi_dadd+0x52>
    4ada:	2200      	movs	r2, #0
    4adc:	2500      	movs	r5, #0
    4ade:	e57b      	b.n	45d8 <__aeabi_dadd+0x90>
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d03b      	beq.n	4b5c <__aeabi_dadd+0x614>
    4ae4:	0003      	movs	r3, r0
    4ae6:	4313      	orrs	r3, r2
    4ae8:	d015      	beq.n	4b16 <__aeabi_dadd+0x5ce>
    4aea:	08ed      	lsrs	r5, r5, #3
    4aec:	074b      	lsls	r3, r1, #29
    4aee:	432b      	orrs	r3, r5
    4af0:	2580      	movs	r5, #128	; 0x80
    4af2:	08c9      	lsrs	r1, r1, #3
    4af4:	032d      	lsls	r5, r5, #12
    4af6:	4229      	tst	r1, r5
    4af8:	d007      	beq.n	4b0a <__aeabi_dadd+0x5c2>
    4afa:	08c4      	lsrs	r4, r0, #3
    4afc:	422c      	tst	r4, r5
    4afe:	d104      	bne.n	4b0a <__aeabi_dadd+0x5c2>
    4b00:	0741      	lsls	r1, r0, #29
    4b02:	000b      	movs	r3, r1
    4b04:	0021      	movs	r1, r4
    4b06:	08d2      	lsrs	r2, r2, #3
    4b08:	4313      	orrs	r3, r2
    4b0a:	00c9      	lsls	r1, r1, #3
    4b0c:	0f5a      	lsrs	r2, r3, #29
    4b0e:	4311      	orrs	r1, r2
    4b10:	00dd      	lsls	r5, r3, #3
    4b12:	4c21      	ldr	r4, [pc, #132]	; (4b98 <__aeabi_dadd+0x650>)
    4b14:	e541      	b.n	459a <__aeabi_dadd+0x52>
    4b16:	4c20      	ldr	r4, [pc, #128]	; (4b98 <__aeabi_dadd+0x650>)
    4b18:	e53f      	b.n	459a <__aeabi_dadd+0x52>
    4b1a:	2000      	movs	r0, #0
    4b1c:	e754      	b.n	49c8 <__aeabi_dadd+0x480>
    4b1e:	2600      	movs	r6, #0
    4b20:	2500      	movs	r5, #0
    4b22:	e5d1      	b.n	46c8 <__aeabi_dadd+0x180>
    4b24:	0034      	movs	r4, r6
    4b26:	000f      	movs	r7, r1
    4b28:	3c20      	subs	r4, #32
    4b2a:	40e7      	lsrs	r7, r4
    4b2c:	003c      	movs	r4, r7
    4b2e:	2e20      	cmp	r6, #32
    4b30:	d02b      	beq.n	4b8a <__aeabi_dadd+0x642>
    4b32:	2740      	movs	r7, #64	; 0x40
    4b34:	1bbe      	subs	r6, r7, r6
    4b36:	40b1      	lsls	r1, r6
    4b38:	430d      	orrs	r5, r1
    4b3a:	1e69      	subs	r1, r5, #1
    4b3c:	418d      	sbcs	r5, r1
    4b3e:	2100      	movs	r1, #0
    4b40:	432c      	orrs	r4, r5
    4b42:	e6bc      	b.n	48be <__aeabi_dadd+0x376>
    4b44:	2180      	movs	r1, #128	; 0x80
    4b46:	2600      	movs	r6, #0
    4b48:	0309      	lsls	r1, r1, #12
    4b4a:	4c13      	ldr	r4, [pc, #76]	; (4b98 <__aeabi_dadd+0x650>)
    4b4c:	2500      	movs	r5, #0
    4b4e:	e5bb      	b.n	46c8 <__aeabi_dadd+0x180>
    4b50:	430d      	orrs	r5, r1
    4b52:	1e69      	subs	r1, r5, #1
    4b54:	418d      	sbcs	r5, r1
    4b56:	2100      	movs	r1, #0
    4b58:	b2ed      	uxtb	r5, r5
    4b5a:	e769      	b.n	4a30 <__aeabi_dadd+0x4e8>
    4b5c:	0001      	movs	r1, r0
    4b5e:	0015      	movs	r5, r2
    4b60:	4c0d      	ldr	r4, [pc, #52]	; (4b98 <__aeabi_dadd+0x650>)
    4b62:	e51a      	b.n	459a <__aeabi_dadd+0x52>
    4b64:	0001      	movs	r1, r0
    4b66:	0015      	movs	r5, r2
    4b68:	e517      	b.n	459a <__aeabi_dadd+0x52>
    4b6a:	001c      	movs	r4, r3
    4b6c:	000f      	movs	r7, r1
    4b6e:	3c20      	subs	r4, #32
    4b70:	40e7      	lsrs	r7, r4
    4b72:	003c      	movs	r4, r7
    4b74:	2b20      	cmp	r3, #32
    4b76:	d00c      	beq.n	4b92 <__aeabi_dadd+0x64a>
    4b78:	2740      	movs	r7, #64	; 0x40
    4b7a:	1afb      	subs	r3, r7, r3
    4b7c:	4099      	lsls	r1, r3
    4b7e:	430d      	orrs	r5, r1
    4b80:	1e69      	subs	r1, r5, #1
    4b82:	418d      	sbcs	r5, r1
    4b84:	2100      	movs	r1, #0
    4b86:	4325      	orrs	r5, r4
    4b88:	e752      	b.n	4a30 <__aeabi_dadd+0x4e8>
    4b8a:	2100      	movs	r1, #0
    4b8c:	e7d4      	b.n	4b38 <__aeabi_dadd+0x5f0>
    4b8e:	001d      	movs	r5, r3
    4b90:	e592      	b.n	46b8 <__aeabi_dadd+0x170>
    4b92:	2100      	movs	r1, #0
    4b94:	e7f3      	b.n	4b7e <__aeabi_dadd+0x636>
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	000007ff 	.word	0x000007ff
    4b9c:	ff7fffff 	.word	0xff7fffff

00004ba0 <__aeabi_ddiv>:
    4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ba2:	4656      	mov	r6, sl
    4ba4:	464d      	mov	r5, r9
    4ba6:	4644      	mov	r4, r8
    4ba8:	465f      	mov	r7, fp
    4baa:	b4f0      	push	{r4, r5, r6, r7}
    4bac:	001d      	movs	r5, r3
    4bae:	030e      	lsls	r6, r1, #12
    4bb0:	004c      	lsls	r4, r1, #1
    4bb2:	0fcb      	lsrs	r3, r1, #31
    4bb4:	b087      	sub	sp, #28
    4bb6:	0007      	movs	r7, r0
    4bb8:	4692      	mov	sl, r2
    4bba:	4681      	mov	r9, r0
    4bbc:	0b36      	lsrs	r6, r6, #12
    4bbe:	0d64      	lsrs	r4, r4, #21
    4bc0:	4698      	mov	r8, r3
    4bc2:	d06a      	beq.n	4c9a <__aeabi_ddiv+0xfa>
    4bc4:	4b6d      	ldr	r3, [pc, #436]	; (4d7c <__aeabi_ddiv+0x1dc>)
    4bc6:	429c      	cmp	r4, r3
    4bc8:	d035      	beq.n	4c36 <__aeabi_ddiv+0x96>
    4bca:	2280      	movs	r2, #128	; 0x80
    4bcc:	0f43      	lsrs	r3, r0, #29
    4bce:	0412      	lsls	r2, r2, #16
    4bd0:	4313      	orrs	r3, r2
    4bd2:	00f6      	lsls	r6, r6, #3
    4bd4:	431e      	orrs	r6, r3
    4bd6:	00c3      	lsls	r3, r0, #3
    4bd8:	4699      	mov	r9, r3
    4bda:	4b69      	ldr	r3, [pc, #420]	; (4d80 <__aeabi_ddiv+0x1e0>)
    4bdc:	2700      	movs	r7, #0
    4bde:	469c      	mov	ip, r3
    4be0:	2300      	movs	r3, #0
    4be2:	4464      	add	r4, ip
    4be4:	9302      	str	r3, [sp, #8]
    4be6:	032b      	lsls	r3, r5, #12
    4be8:	0068      	lsls	r0, r5, #1
    4bea:	0b1b      	lsrs	r3, r3, #12
    4bec:	0fed      	lsrs	r5, r5, #31
    4bee:	4651      	mov	r1, sl
    4bf0:	469b      	mov	fp, r3
    4bf2:	0d40      	lsrs	r0, r0, #21
    4bf4:	9500      	str	r5, [sp, #0]
    4bf6:	d100      	bne.n	4bfa <__aeabi_ddiv+0x5a>
    4bf8:	e078      	b.n	4cec <__aeabi_ddiv+0x14c>
    4bfa:	4b60      	ldr	r3, [pc, #384]	; (4d7c <__aeabi_ddiv+0x1dc>)
    4bfc:	4298      	cmp	r0, r3
    4bfe:	d06c      	beq.n	4cda <__aeabi_ddiv+0x13a>
    4c00:	465b      	mov	r3, fp
    4c02:	00da      	lsls	r2, r3, #3
    4c04:	0f4b      	lsrs	r3, r1, #29
    4c06:	2180      	movs	r1, #128	; 0x80
    4c08:	0409      	lsls	r1, r1, #16
    4c0a:	430b      	orrs	r3, r1
    4c0c:	4313      	orrs	r3, r2
    4c0e:	469b      	mov	fp, r3
    4c10:	4653      	mov	r3, sl
    4c12:	00d9      	lsls	r1, r3, #3
    4c14:	4b5a      	ldr	r3, [pc, #360]	; (4d80 <__aeabi_ddiv+0x1e0>)
    4c16:	469c      	mov	ip, r3
    4c18:	2300      	movs	r3, #0
    4c1a:	4460      	add	r0, ip
    4c1c:	4642      	mov	r2, r8
    4c1e:	1a20      	subs	r0, r4, r0
    4c20:	406a      	eors	r2, r5
    4c22:	4692      	mov	sl, r2
    4c24:	9001      	str	r0, [sp, #4]
    4c26:	431f      	orrs	r7, r3
    4c28:	2f0f      	cmp	r7, #15
    4c2a:	d900      	bls.n	4c2e <__aeabi_ddiv+0x8e>
    4c2c:	e0b0      	b.n	4d90 <__aeabi_ddiv+0x1f0>
    4c2e:	4855      	ldr	r0, [pc, #340]	; (4d84 <__aeabi_ddiv+0x1e4>)
    4c30:	00bf      	lsls	r7, r7, #2
    4c32:	59c0      	ldr	r0, [r0, r7]
    4c34:	4687      	mov	pc, r0
    4c36:	4337      	orrs	r7, r6
    4c38:	d000      	beq.n	4c3c <__aeabi_ddiv+0x9c>
    4c3a:	e088      	b.n	4d4e <__aeabi_ddiv+0x1ae>
    4c3c:	2300      	movs	r3, #0
    4c3e:	4699      	mov	r9, r3
    4c40:	3302      	adds	r3, #2
    4c42:	2708      	movs	r7, #8
    4c44:	2600      	movs	r6, #0
    4c46:	9302      	str	r3, [sp, #8]
    4c48:	e7cd      	b.n	4be6 <__aeabi_ddiv+0x46>
    4c4a:	4643      	mov	r3, r8
    4c4c:	46b3      	mov	fp, r6
    4c4e:	4649      	mov	r1, r9
    4c50:	9300      	str	r3, [sp, #0]
    4c52:	9b02      	ldr	r3, [sp, #8]
    4c54:	9a00      	ldr	r2, [sp, #0]
    4c56:	4692      	mov	sl, r2
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d000      	beq.n	4c5e <__aeabi_ddiv+0xbe>
    4c5c:	e1bf      	b.n	4fde <__aeabi_ddiv+0x43e>
    4c5e:	2100      	movs	r1, #0
    4c60:	4653      	mov	r3, sl
    4c62:	2201      	movs	r2, #1
    4c64:	2600      	movs	r6, #0
    4c66:	4689      	mov	r9, r1
    4c68:	401a      	ands	r2, r3
    4c6a:	4b44      	ldr	r3, [pc, #272]	; (4d7c <__aeabi_ddiv+0x1dc>)
    4c6c:	2100      	movs	r1, #0
    4c6e:	0336      	lsls	r6, r6, #12
    4c70:	0d0c      	lsrs	r4, r1, #20
    4c72:	0524      	lsls	r4, r4, #20
    4c74:	0b36      	lsrs	r6, r6, #12
    4c76:	4326      	orrs	r6, r4
    4c78:	4c43      	ldr	r4, [pc, #268]	; (4d88 <__aeabi_ddiv+0x1e8>)
    4c7a:	051b      	lsls	r3, r3, #20
    4c7c:	4026      	ands	r6, r4
    4c7e:	431e      	orrs	r6, r3
    4c80:	0076      	lsls	r6, r6, #1
    4c82:	07d2      	lsls	r2, r2, #31
    4c84:	0876      	lsrs	r6, r6, #1
    4c86:	4316      	orrs	r6, r2
    4c88:	4648      	mov	r0, r9
    4c8a:	0031      	movs	r1, r6
    4c8c:	b007      	add	sp, #28
    4c8e:	bc3c      	pop	{r2, r3, r4, r5}
    4c90:	4690      	mov	r8, r2
    4c92:	4699      	mov	r9, r3
    4c94:	46a2      	mov	sl, r4
    4c96:	46ab      	mov	fp, r5
    4c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c9a:	0033      	movs	r3, r6
    4c9c:	4303      	orrs	r3, r0
    4c9e:	d04f      	beq.n	4d40 <__aeabi_ddiv+0x1a0>
    4ca0:	2e00      	cmp	r6, #0
    4ca2:	d100      	bne.n	4ca6 <__aeabi_ddiv+0x106>
    4ca4:	e1bc      	b.n	5020 <__aeabi_ddiv+0x480>
    4ca6:	0030      	movs	r0, r6
    4ca8:	f001 fb1c 	bl	62e4 <__clzsi2>
    4cac:	0003      	movs	r3, r0
    4cae:	3b0b      	subs	r3, #11
    4cb0:	2b1c      	cmp	r3, #28
    4cb2:	dd00      	ble.n	4cb6 <__aeabi_ddiv+0x116>
    4cb4:	e1ad      	b.n	5012 <__aeabi_ddiv+0x472>
    4cb6:	221d      	movs	r2, #29
    4cb8:	0001      	movs	r1, r0
    4cba:	1ad3      	subs	r3, r2, r3
    4cbc:	3908      	subs	r1, #8
    4cbe:	003a      	movs	r2, r7
    4cc0:	408f      	lsls	r7, r1
    4cc2:	408e      	lsls	r6, r1
    4cc4:	40da      	lsrs	r2, r3
    4cc6:	46b9      	mov	r9, r7
    4cc8:	4316      	orrs	r6, r2
    4cca:	4b30      	ldr	r3, [pc, #192]	; (4d8c <__aeabi_ddiv+0x1ec>)
    4ccc:	2700      	movs	r7, #0
    4cce:	469c      	mov	ip, r3
    4cd0:	2300      	movs	r3, #0
    4cd2:	4460      	add	r0, ip
    4cd4:	4244      	negs	r4, r0
    4cd6:	9302      	str	r3, [sp, #8]
    4cd8:	e785      	b.n	4be6 <__aeabi_ddiv+0x46>
    4cda:	4653      	mov	r3, sl
    4cdc:	465a      	mov	r2, fp
    4cde:	4313      	orrs	r3, r2
    4ce0:	d12c      	bne.n	4d3c <__aeabi_ddiv+0x19c>
    4ce2:	2300      	movs	r3, #0
    4ce4:	2100      	movs	r1, #0
    4ce6:	469b      	mov	fp, r3
    4ce8:	3302      	adds	r3, #2
    4cea:	e797      	b.n	4c1c <__aeabi_ddiv+0x7c>
    4cec:	430b      	orrs	r3, r1
    4cee:	d020      	beq.n	4d32 <__aeabi_ddiv+0x192>
    4cf0:	465b      	mov	r3, fp
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d100      	bne.n	4cf8 <__aeabi_ddiv+0x158>
    4cf6:	e19e      	b.n	5036 <__aeabi_ddiv+0x496>
    4cf8:	4658      	mov	r0, fp
    4cfa:	f001 faf3 	bl	62e4 <__clzsi2>
    4cfe:	0003      	movs	r3, r0
    4d00:	3b0b      	subs	r3, #11
    4d02:	2b1c      	cmp	r3, #28
    4d04:	dd00      	ble.n	4d08 <__aeabi_ddiv+0x168>
    4d06:	e18f      	b.n	5028 <__aeabi_ddiv+0x488>
    4d08:	0002      	movs	r2, r0
    4d0a:	4659      	mov	r1, fp
    4d0c:	3a08      	subs	r2, #8
    4d0e:	4091      	lsls	r1, r2
    4d10:	468b      	mov	fp, r1
    4d12:	211d      	movs	r1, #29
    4d14:	1acb      	subs	r3, r1, r3
    4d16:	4651      	mov	r1, sl
    4d18:	40d9      	lsrs	r1, r3
    4d1a:	000b      	movs	r3, r1
    4d1c:	4659      	mov	r1, fp
    4d1e:	430b      	orrs	r3, r1
    4d20:	4651      	mov	r1, sl
    4d22:	469b      	mov	fp, r3
    4d24:	4091      	lsls	r1, r2
    4d26:	4b19      	ldr	r3, [pc, #100]	; (4d8c <__aeabi_ddiv+0x1ec>)
    4d28:	469c      	mov	ip, r3
    4d2a:	4460      	add	r0, ip
    4d2c:	4240      	negs	r0, r0
    4d2e:	2300      	movs	r3, #0
    4d30:	e774      	b.n	4c1c <__aeabi_ddiv+0x7c>
    4d32:	2300      	movs	r3, #0
    4d34:	2100      	movs	r1, #0
    4d36:	469b      	mov	fp, r3
    4d38:	3301      	adds	r3, #1
    4d3a:	e76f      	b.n	4c1c <__aeabi_ddiv+0x7c>
    4d3c:	2303      	movs	r3, #3
    4d3e:	e76d      	b.n	4c1c <__aeabi_ddiv+0x7c>
    4d40:	2300      	movs	r3, #0
    4d42:	4699      	mov	r9, r3
    4d44:	3301      	adds	r3, #1
    4d46:	2704      	movs	r7, #4
    4d48:	2600      	movs	r6, #0
    4d4a:	9302      	str	r3, [sp, #8]
    4d4c:	e74b      	b.n	4be6 <__aeabi_ddiv+0x46>
    4d4e:	2303      	movs	r3, #3
    4d50:	270c      	movs	r7, #12
    4d52:	9302      	str	r3, [sp, #8]
    4d54:	e747      	b.n	4be6 <__aeabi_ddiv+0x46>
    4d56:	2201      	movs	r2, #1
    4d58:	1ad5      	subs	r5, r2, r3
    4d5a:	2d38      	cmp	r5, #56	; 0x38
    4d5c:	dc00      	bgt.n	4d60 <__aeabi_ddiv+0x1c0>
    4d5e:	e1b0      	b.n	50c2 <__aeabi_ddiv+0x522>
    4d60:	4653      	mov	r3, sl
    4d62:	401a      	ands	r2, r3
    4d64:	2100      	movs	r1, #0
    4d66:	2300      	movs	r3, #0
    4d68:	2600      	movs	r6, #0
    4d6a:	4689      	mov	r9, r1
    4d6c:	e77e      	b.n	4c6c <__aeabi_ddiv+0xcc>
    4d6e:	2300      	movs	r3, #0
    4d70:	2680      	movs	r6, #128	; 0x80
    4d72:	4699      	mov	r9, r3
    4d74:	2200      	movs	r2, #0
    4d76:	0336      	lsls	r6, r6, #12
    4d78:	4b00      	ldr	r3, [pc, #0]	; (4d7c <__aeabi_ddiv+0x1dc>)
    4d7a:	e777      	b.n	4c6c <__aeabi_ddiv+0xcc>
    4d7c:	000007ff 	.word	0x000007ff
    4d80:	fffffc01 	.word	0xfffffc01
    4d84:	00006520 	.word	0x00006520
    4d88:	800fffff 	.word	0x800fffff
    4d8c:	000003f3 	.word	0x000003f3
    4d90:	455e      	cmp	r6, fp
    4d92:	d900      	bls.n	4d96 <__aeabi_ddiv+0x1f6>
    4d94:	e172      	b.n	507c <__aeabi_ddiv+0x4dc>
    4d96:	d100      	bne.n	4d9a <__aeabi_ddiv+0x1fa>
    4d98:	e16d      	b.n	5076 <__aeabi_ddiv+0x4d6>
    4d9a:	9b01      	ldr	r3, [sp, #4]
    4d9c:	464d      	mov	r5, r9
    4d9e:	3b01      	subs	r3, #1
    4da0:	9301      	str	r3, [sp, #4]
    4da2:	2300      	movs	r3, #0
    4da4:	0034      	movs	r4, r6
    4da6:	9302      	str	r3, [sp, #8]
    4da8:	465b      	mov	r3, fp
    4daa:	021e      	lsls	r6, r3, #8
    4dac:	0e0b      	lsrs	r3, r1, #24
    4dae:	431e      	orrs	r6, r3
    4db0:	020b      	lsls	r3, r1, #8
    4db2:	9303      	str	r3, [sp, #12]
    4db4:	0c33      	lsrs	r3, r6, #16
    4db6:	4699      	mov	r9, r3
    4db8:	0433      	lsls	r3, r6, #16
    4dba:	0c1b      	lsrs	r3, r3, #16
    4dbc:	4649      	mov	r1, r9
    4dbe:	0020      	movs	r0, r4
    4dc0:	9300      	str	r3, [sp, #0]
    4dc2:	f7ff f977 	bl	40b4 <__aeabi_uidiv>
    4dc6:	9b00      	ldr	r3, [sp, #0]
    4dc8:	0037      	movs	r7, r6
    4dca:	4343      	muls	r3, r0
    4dcc:	0006      	movs	r6, r0
    4dce:	4649      	mov	r1, r9
    4dd0:	0020      	movs	r0, r4
    4dd2:	4698      	mov	r8, r3
    4dd4:	f7ff f9f4 	bl	41c0 <__aeabi_uidivmod>
    4dd8:	0c2c      	lsrs	r4, r5, #16
    4dda:	0409      	lsls	r1, r1, #16
    4ddc:	430c      	orrs	r4, r1
    4dde:	45a0      	cmp	r8, r4
    4de0:	d909      	bls.n	4df6 <__aeabi_ddiv+0x256>
    4de2:	19e4      	adds	r4, r4, r7
    4de4:	1e73      	subs	r3, r6, #1
    4de6:	42a7      	cmp	r7, r4
    4de8:	d900      	bls.n	4dec <__aeabi_ddiv+0x24c>
    4dea:	e15c      	b.n	50a6 <__aeabi_ddiv+0x506>
    4dec:	45a0      	cmp	r8, r4
    4dee:	d800      	bhi.n	4df2 <__aeabi_ddiv+0x252>
    4df0:	e159      	b.n	50a6 <__aeabi_ddiv+0x506>
    4df2:	3e02      	subs	r6, #2
    4df4:	19e4      	adds	r4, r4, r7
    4df6:	4643      	mov	r3, r8
    4df8:	1ae4      	subs	r4, r4, r3
    4dfa:	4649      	mov	r1, r9
    4dfc:	0020      	movs	r0, r4
    4dfe:	f7ff f959 	bl	40b4 <__aeabi_uidiv>
    4e02:	0003      	movs	r3, r0
    4e04:	9a00      	ldr	r2, [sp, #0]
    4e06:	4680      	mov	r8, r0
    4e08:	4353      	muls	r3, r2
    4e0a:	4649      	mov	r1, r9
    4e0c:	0020      	movs	r0, r4
    4e0e:	469b      	mov	fp, r3
    4e10:	f7ff f9d6 	bl	41c0 <__aeabi_uidivmod>
    4e14:	042a      	lsls	r2, r5, #16
    4e16:	0409      	lsls	r1, r1, #16
    4e18:	0c12      	lsrs	r2, r2, #16
    4e1a:	430a      	orrs	r2, r1
    4e1c:	4593      	cmp	fp, r2
    4e1e:	d90d      	bls.n	4e3c <__aeabi_ddiv+0x29c>
    4e20:	4643      	mov	r3, r8
    4e22:	19d2      	adds	r2, r2, r7
    4e24:	3b01      	subs	r3, #1
    4e26:	4297      	cmp	r7, r2
    4e28:	d900      	bls.n	4e2c <__aeabi_ddiv+0x28c>
    4e2a:	e13a      	b.n	50a2 <__aeabi_ddiv+0x502>
    4e2c:	4593      	cmp	fp, r2
    4e2e:	d800      	bhi.n	4e32 <__aeabi_ddiv+0x292>
    4e30:	e137      	b.n	50a2 <__aeabi_ddiv+0x502>
    4e32:	2302      	movs	r3, #2
    4e34:	425b      	negs	r3, r3
    4e36:	469c      	mov	ip, r3
    4e38:	19d2      	adds	r2, r2, r7
    4e3a:	44e0      	add	r8, ip
    4e3c:	465b      	mov	r3, fp
    4e3e:	1ad2      	subs	r2, r2, r3
    4e40:	4643      	mov	r3, r8
    4e42:	0436      	lsls	r6, r6, #16
    4e44:	4333      	orrs	r3, r6
    4e46:	469b      	mov	fp, r3
    4e48:	9903      	ldr	r1, [sp, #12]
    4e4a:	0c18      	lsrs	r0, r3, #16
    4e4c:	0c0b      	lsrs	r3, r1, #16
    4e4e:	001d      	movs	r5, r3
    4e50:	9305      	str	r3, [sp, #20]
    4e52:	0409      	lsls	r1, r1, #16
    4e54:	465b      	mov	r3, fp
    4e56:	0c09      	lsrs	r1, r1, #16
    4e58:	000c      	movs	r4, r1
    4e5a:	041b      	lsls	r3, r3, #16
    4e5c:	0c1b      	lsrs	r3, r3, #16
    4e5e:	4344      	muls	r4, r0
    4e60:	9104      	str	r1, [sp, #16]
    4e62:	4359      	muls	r1, r3
    4e64:	436b      	muls	r3, r5
    4e66:	4368      	muls	r0, r5
    4e68:	191b      	adds	r3, r3, r4
    4e6a:	0c0d      	lsrs	r5, r1, #16
    4e6c:	18eb      	adds	r3, r5, r3
    4e6e:	429c      	cmp	r4, r3
    4e70:	d903      	bls.n	4e7a <__aeabi_ddiv+0x2da>
    4e72:	2480      	movs	r4, #128	; 0x80
    4e74:	0264      	lsls	r4, r4, #9
    4e76:	46a4      	mov	ip, r4
    4e78:	4460      	add	r0, ip
    4e7a:	0c1c      	lsrs	r4, r3, #16
    4e7c:	0409      	lsls	r1, r1, #16
    4e7e:	041b      	lsls	r3, r3, #16
    4e80:	0c09      	lsrs	r1, r1, #16
    4e82:	1820      	adds	r0, r4, r0
    4e84:	185d      	adds	r5, r3, r1
    4e86:	4282      	cmp	r2, r0
    4e88:	d200      	bcs.n	4e8c <__aeabi_ddiv+0x2ec>
    4e8a:	e0de      	b.n	504a <__aeabi_ddiv+0x4aa>
    4e8c:	d100      	bne.n	4e90 <__aeabi_ddiv+0x2f0>
    4e8e:	e0d7      	b.n	5040 <__aeabi_ddiv+0x4a0>
    4e90:	1a16      	subs	r6, r2, r0
    4e92:	9b02      	ldr	r3, [sp, #8]
    4e94:	469c      	mov	ip, r3
    4e96:	1b5d      	subs	r5, r3, r5
    4e98:	45ac      	cmp	ip, r5
    4e9a:	419b      	sbcs	r3, r3
    4e9c:	425b      	negs	r3, r3
    4e9e:	1af6      	subs	r6, r6, r3
    4ea0:	42b7      	cmp	r7, r6
    4ea2:	d100      	bne.n	4ea6 <__aeabi_ddiv+0x306>
    4ea4:	e106      	b.n	50b4 <__aeabi_ddiv+0x514>
    4ea6:	4649      	mov	r1, r9
    4ea8:	0030      	movs	r0, r6
    4eaa:	f7ff f903 	bl	40b4 <__aeabi_uidiv>
    4eae:	9b00      	ldr	r3, [sp, #0]
    4eb0:	0004      	movs	r4, r0
    4eb2:	4343      	muls	r3, r0
    4eb4:	4649      	mov	r1, r9
    4eb6:	0030      	movs	r0, r6
    4eb8:	4698      	mov	r8, r3
    4eba:	f7ff f981 	bl	41c0 <__aeabi_uidivmod>
    4ebe:	0c2e      	lsrs	r6, r5, #16
    4ec0:	0409      	lsls	r1, r1, #16
    4ec2:	430e      	orrs	r6, r1
    4ec4:	45b0      	cmp	r8, r6
    4ec6:	d909      	bls.n	4edc <__aeabi_ddiv+0x33c>
    4ec8:	19f6      	adds	r6, r6, r7
    4eca:	1e63      	subs	r3, r4, #1
    4ecc:	42b7      	cmp	r7, r6
    4ece:	d900      	bls.n	4ed2 <__aeabi_ddiv+0x332>
    4ed0:	e0f3      	b.n	50ba <__aeabi_ddiv+0x51a>
    4ed2:	45b0      	cmp	r8, r6
    4ed4:	d800      	bhi.n	4ed8 <__aeabi_ddiv+0x338>
    4ed6:	e0f0      	b.n	50ba <__aeabi_ddiv+0x51a>
    4ed8:	3c02      	subs	r4, #2
    4eda:	19f6      	adds	r6, r6, r7
    4edc:	4643      	mov	r3, r8
    4ede:	1af3      	subs	r3, r6, r3
    4ee0:	4649      	mov	r1, r9
    4ee2:	0018      	movs	r0, r3
    4ee4:	9302      	str	r3, [sp, #8]
    4ee6:	f7ff f8e5 	bl	40b4 <__aeabi_uidiv>
    4eea:	9b00      	ldr	r3, [sp, #0]
    4eec:	0006      	movs	r6, r0
    4eee:	4343      	muls	r3, r0
    4ef0:	4649      	mov	r1, r9
    4ef2:	9802      	ldr	r0, [sp, #8]
    4ef4:	4698      	mov	r8, r3
    4ef6:	f7ff f963 	bl	41c0 <__aeabi_uidivmod>
    4efa:	042d      	lsls	r5, r5, #16
    4efc:	0409      	lsls	r1, r1, #16
    4efe:	0c2d      	lsrs	r5, r5, #16
    4f00:	430d      	orrs	r5, r1
    4f02:	45a8      	cmp	r8, r5
    4f04:	d909      	bls.n	4f1a <__aeabi_ddiv+0x37a>
    4f06:	19ed      	adds	r5, r5, r7
    4f08:	1e73      	subs	r3, r6, #1
    4f0a:	42af      	cmp	r7, r5
    4f0c:	d900      	bls.n	4f10 <__aeabi_ddiv+0x370>
    4f0e:	e0d6      	b.n	50be <__aeabi_ddiv+0x51e>
    4f10:	45a8      	cmp	r8, r5
    4f12:	d800      	bhi.n	4f16 <__aeabi_ddiv+0x376>
    4f14:	e0d3      	b.n	50be <__aeabi_ddiv+0x51e>
    4f16:	3e02      	subs	r6, #2
    4f18:	19ed      	adds	r5, r5, r7
    4f1a:	0424      	lsls	r4, r4, #16
    4f1c:	0021      	movs	r1, r4
    4f1e:	4643      	mov	r3, r8
    4f20:	4331      	orrs	r1, r6
    4f22:	9e04      	ldr	r6, [sp, #16]
    4f24:	9a05      	ldr	r2, [sp, #20]
    4f26:	0030      	movs	r0, r6
    4f28:	1aed      	subs	r5, r5, r3
    4f2a:	040b      	lsls	r3, r1, #16
    4f2c:	0c0c      	lsrs	r4, r1, #16
    4f2e:	0c1b      	lsrs	r3, r3, #16
    4f30:	4358      	muls	r0, r3
    4f32:	4366      	muls	r6, r4
    4f34:	4353      	muls	r3, r2
    4f36:	4354      	muls	r4, r2
    4f38:	199a      	adds	r2, r3, r6
    4f3a:	0c03      	lsrs	r3, r0, #16
    4f3c:	189b      	adds	r3, r3, r2
    4f3e:	429e      	cmp	r6, r3
    4f40:	d903      	bls.n	4f4a <__aeabi_ddiv+0x3aa>
    4f42:	2280      	movs	r2, #128	; 0x80
    4f44:	0252      	lsls	r2, r2, #9
    4f46:	4694      	mov	ip, r2
    4f48:	4464      	add	r4, ip
    4f4a:	0c1a      	lsrs	r2, r3, #16
    4f4c:	0400      	lsls	r0, r0, #16
    4f4e:	041b      	lsls	r3, r3, #16
    4f50:	0c00      	lsrs	r0, r0, #16
    4f52:	1914      	adds	r4, r2, r4
    4f54:	181b      	adds	r3, r3, r0
    4f56:	42a5      	cmp	r5, r4
    4f58:	d350      	bcc.n	4ffc <__aeabi_ddiv+0x45c>
    4f5a:	d04d      	beq.n	4ff8 <__aeabi_ddiv+0x458>
    4f5c:	2301      	movs	r3, #1
    4f5e:	4319      	orrs	r1, r3
    4f60:	4a96      	ldr	r2, [pc, #600]	; (51bc <__aeabi_ddiv+0x61c>)
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	4694      	mov	ip, r2
    4f66:	4463      	add	r3, ip
    4f68:	2b00      	cmp	r3, #0
    4f6a:	dc00      	bgt.n	4f6e <__aeabi_ddiv+0x3ce>
    4f6c:	e6f3      	b.n	4d56 <__aeabi_ddiv+0x1b6>
    4f6e:	074a      	lsls	r2, r1, #29
    4f70:	d009      	beq.n	4f86 <__aeabi_ddiv+0x3e6>
    4f72:	220f      	movs	r2, #15
    4f74:	400a      	ands	r2, r1
    4f76:	2a04      	cmp	r2, #4
    4f78:	d005      	beq.n	4f86 <__aeabi_ddiv+0x3e6>
    4f7a:	1d0a      	adds	r2, r1, #4
    4f7c:	428a      	cmp	r2, r1
    4f7e:	4189      	sbcs	r1, r1
    4f80:	4249      	negs	r1, r1
    4f82:	448b      	add	fp, r1
    4f84:	0011      	movs	r1, r2
    4f86:	465a      	mov	r2, fp
    4f88:	01d2      	lsls	r2, r2, #7
    4f8a:	d508      	bpl.n	4f9e <__aeabi_ddiv+0x3fe>
    4f8c:	465a      	mov	r2, fp
    4f8e:	4b8c      	ldr	r3, [pc, #560]	; (51c0 <__aeabi_ddiv+0x620>)
    4f90:	401a      	ands	r2, r3
    4f92:	4693      	mov	fp, r2
    4f94:	2280      	movs	r2, #128	; 0x80
    4f96:	00d2      	lsls	r2, r2, #3
    4f98:	4694      	mov	ip, r2
    4f9a:	9b01      	ldr	r3, [sp, #4]
    4f9c:	4463      	add	r3, ip
    4f9e:	4a89      	ldr	r2, [pc, #548]	; (51c4 <__aeabi_ddiv+0x624>)
    4fa0:	4293      	cmp	r3, r2
    4fa2:	dd00      	ble.n	4fa6 <__aeabi_ddiv+0x406>
    4fa4:	e65b      	b.n	4c5e <__aeabi_ddiv+0xbe>
    4fa6:	465a      	mov	r2, fp
    4fa8:	08c9      	lsrs	r1, r1, #3
    4faa:	0750      	lsls	r0, r2, #29
    4fac:	4308      	orrs	r0, r1
    4fae:	0256      	lsls	r6, r2, #9
    4fb0:	4651      	mov	r1, sl
    4fb2:	2201      	movs	r2, #1
    4fb4:	055b      	lsls	r3, r3, #21
    4fb6:	4681      	mov	r9, r0
    4fb8:	0b36      	lsrs	r6, r6, #12
    4fba:	0d5b      	lsrs	r3, r3, #21
    4fbc:	400a      	ands	r2, r1
    4fbe:	e655      	b.n	4c6c <__aeabi_ddiv+0xcc>
    4fc0:	2380      	movs	r3, #128	; 0x80
    4fc2:	031b      	lsls	r3, r3, #12
    4fc4:	421e      	tst	r6, r3
    4fc6:	d011      	beq.n	4fec <__aeabi_ddiv+0x44c>
    4fc8:	465a      	mov	r2, fp
    4fca:	421a      	tst	r2, r3
    4fcc:	d10e      	bne.n	4fec <__aeabi_ddiv+0x44c>
    4fce:	465e      	mov	r6, fp
    4fd0:	431e      	orrs	r6, r3
    4fd2:	0336      	lsls	r6, r6, #12
    4fd4:	0b36      	lsrs	r6, r6, #12
    4fd6:	002a      	movs	r2, r5
    4fd8:	4689      	mov	r9, r1
    4fda:	4b7b      	ldr	r3, [pc, #492]	; (51c8 <__aeabi_ddiv+0x628>)
    4fdc:	e646      	b.n	4c6c <__aeabi_ddiv+0xcc>
    4fde:	2b03      	cmp	r3, #3
    4fe0:	d100      	bne.n	4fe4 <__aeabi_ddiv+0x444>
    4fe2:	e0e1      	b.n	51a8 <__aeabi_ddiv+0x608>
    4fe4:	2b01      	cmp	r3, #1
    4fe6:	d1bb      	bne.n	4f60 <__aeabi_ddiv+0x3c0>
    4fe8:	401a      	ands	r2, r3
    4fea:	e6bb      	b.n	4d64 <__aeabi_ddiv+0x1c4>
    4fec:	431e      	orrs	r6, r3
    4fee:	0336      	lsls	r6, r6, #12
    4ff0:	0b36      	lsrs	r6, r6, #12
    4ff2:	4642      	mov	r2, r8
    4ff4:	4b74      	ldr	r3, [pc, #464]	; (51c8 <__aeabi_ddiv+0x628>)
    4ff6:	e639      	b.n	4c6c <__aeabi_ddiv+0xcc>
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d0b1      	beq.n	4f60 <__aeabi_ddiv+0x3c0>
    4ffc:	197d      	adds	r5, r7, r5
    4ffe:	1e4a      	subs	r2, r1, #1
    5000:	42af      	cmp	r7, r5
    5002:	d952      	bls.n	50aa <__aeabi_ddiv+0x50a>
    5004:	0011      	movs	r1, r2
    5006:	42a5      	cmp	r5, r4
    5008:	d1a8      	bne.n	4f5c <__aeabi_ddiv+0x3bc>
    500a:	9a03      	ldr	r2, [sp, #12]
    500c:	429a      	cmp	r2, r3
    500e:	d1a5      	bne.n	4f5c <__aeabi_ddiv+0x3bc>
    5010:	e7a6      	b.n	4f60 <__aeabi_ddiv+0x3c0>
    5012:	0003      	movs	r3, r0
    5014:	003e      	movs	r6, r7
    5016:	3b28      	subs	r3, #40	; 0x28
    5018:	409e      	lsls	r6, r3
    501a:	2300      	movs	r3, #0
    501c:	4699      	mov	r9, r3
    501e:	e654      	b.n	4cca <__aeabi_ddiv+0x12a>
    5020:	f001 f960 	bl	62e4 <__clzsi2>
    5024:	3020      	adds	r0, #32
    5026:	e641      	b.n	4cac <__aeabi_ddiv+0x10c>
    5028:	0003      	movs	r3, r0
    502a:	4652      	mov	r2, sl
    502c:	3b28      	subs	r3, #40	; 0x28
    502e:	409a      	lsls	r2, r3
    5030:	2100      	movs	r1, #0
    5032:	4693      	mov	fp, r2
    5034:	e677      	b.n	4d26 <__aeabi_ddiv+0x186>
    5036:	4650      	mov	r0, sl
    5038:	f001 f954 	bl	62e4 <__clzsi2>
    503c:	3020      	adds	r0, #32
    503e:	e65e      	b.n	4cfe <__aeabi_ddiv+0x15e>
    5040:	9b02      	ldr	r3, [sp, #8]
    5042:	2600      	movs	r6, #0
    5044:	42ab      	cmp	r3, r5
    5046:	d300      	bcc.n	504a <__aeabi_ddiv+0x4aa>
    5048:	e723      	b.n	4e92 <__aeabi_ddiv+0x2f2>
    504a:	9e03      	ldr	r6, [sp, #12]
    504c:	9902      	ldr	r1, [sp, #8]
    504e:	46b4      	mov	ip, r6
    5050:	4461      	add	r1, ip
    5052:	4688      	mov	r8, r1
    5054:	45b0      	cmp	r8, r6
    5056:	41b6      	sbcs	r6, r6
    5058:	465b      	mov	r3, fp
    505a:	4276      	negs	r6, r6
    505c:	19f6      	adds	r6, r6, r7
    505e:	18b2      	adds	r2, r6, r2
    5060:	3b01      	subs	r3, #1
    5062:	9102      	str	r1, [sp, #8]
    5064:	4297      	cmp	r7, r2
    5066:	d213      	bcs.n	5090 <__aeabi_ddiv+0x4f0>
    5068:	4290      	cmp	r0, r2
    506a:	d84f      	bhi.n	510c <__aeabi_ddiv+0x56c>
    506c:	d100      	bne.n	5070 <__aeabi_ddiv+0x4d0>
    506e:	e08e      	b.n	518e <__aeabi_ddiv+0x5ee>
    5070:	1a16      	subs	r6, r2, r0
    5072:	469b      	mov	fp, r3
    5074:	e70d      	b.n	4e92 <__aeabi_ddiv+0x2f2>
    5076:	4589      	cmp	r9, r1
    5078:	d200      	bcs.n	507c <__aeabi_ddiv+0x4dc>
    507a:	e68e      	b.n	4d9a <__aeabi_ddiv+0x1fa>
    507c:	0874      	lsrs	r4, r6, #1
    507e:	464b      	mov	r3, r9
    5080:	07f6      	lsls	r6, r6, #31
    5082:	0035      	movs	r5, r6
    5084:	085b      	lsrs	r3, r3, #1
    5086:	431d      	orrs	r5, r3
    5088:	464b      	mov	r3, r9
    508a:	07db      	lsls	r3, r3, #31
    508c:	9302      	str	r3, [sp, #8]
    508e:	e68b      	b.n	4da8 <__aeabi_ddiv+0x208>
    5090:	4297      	cmp	r7, r2
    5092:	d1ed      	bne.n	5070 <__aeabi_ddiv+0x4d0>
    5094:	9903      	ldr	r1, [sp, #12]
    5096:	9c02      	ldr	r4, [sp, #8]
    5098:	42a1      	cmp	r1, r4
    509a:	d9e5      	bls.n	5068 <__aeabi_ddiv+0x4c8>
    509c:	1a3e      	subs	r6, r7, r0
    509e:	469b      	mov	fp, r3
    50a0:	e6f7      	b.n	4e92 <__aeabi_ddiv+0x2f2>
    50a2:	4698      	mov	r8, r3
    50a4:	e6ca      	b.n	4e3c <__aeabi_ddiv+0x29c>
    50a6:	001e      	movs	r6, r3
    50a8:	e6a5      	b.n	4df6 <__aeabi_ddiv+0x256>
    50aa:	42ac      	cmp	r4, r5
    50ac:	d83e      	bhi.n	512c <__aeabi_ddiv+0x58c>
    50ae:	d074      	beq.n	519a <__aeabi_ddiv+0x5fa>
    50b0:	0011      	movs	r1, r2
    50b2:	e753      	b.n	4f5c <__aeabi_ddiv+0x3bc>
    50b4:	2101      	movs	r1, #1
    50b6:	4249      	negs	r1, r1
    50b8:	e752      	b.n	4f60 <__aeabi_ddiv+0x3c0>
    50ba:	001c      	movs	r4, r3
    50bc:	e70e      	b.n	4edc <__aeabi_ddiv+0x33c>
    50be:	001e      	movs	r6, r3
    50c0:	e72b      	b.n	4f1a <__aeabi_ddiv+0x37a>
    50c2:	2d1f      	cmp	r5, #31
    50c4:	dc3c      	bgt.n	5140 <__aeabi_ddiv+0x5a0>
    50c6:	2320      	movs	r3, #32
    50c8:	000a      	movs	r2, r1
    50ca:	4658      	mov	r0, fp
    50cc:	1b5b      	subs	r3, r3, r5
    50ce:	4098      	lsls	r0, r3
    50d0:	40ea      	lsrs	r2, r5
    50d2:	4099      	lsls	r1, r3
    50d4:	4302      	orrs	r2, r0
    50d6:	1e48      	subs	r0, r1, #1
    50d8:	4181      	sbcs	r1, r0
    50da:	465e      	mov	r6, fp
    50dc:	4311      	orrs	r1, r2
    50de:	40ee      	lsrs	r6, r5
    50e0:	074b      	lsls	r3, r1, #29
    50e2:	d009      	beq.n	50f8 <__aeabi_ddiv+0x558>
    50e4:	230f      	movs	r3, #15
    50e6:	400b      	ands	r3, r1
    50e8:	2b04      	cmp	r3, #4
    50ea:	d005      	beq.n	50f8 <__aeabi_ddiv+0x558>
    50ec:	000b      	movs	r3, r1
    50ee:	1d19      	adds	r1, r3, #4
    50f0:	4299      	cmp	r1, r3
    50f2:	419b      	sbcs	r3, r3
    50f4:	425b      	negs	r3, r3
    50f6:	18f6      	adds	r6, r6, r3
    50f8:	0233      	lsls	r3, r6, #8
    50fa:	d53c      	bpl.n	5176 <__aeabi_ddiv+0x5d6>
    50fc:	4653      	mov	r3, sl
    50fe:	2201      	movs	r2, #1
    5100:	2100      	movs	r1, #0
    5102:	401a      	ands	r2, r3
    5104:	2600      	movs	r6, #0
    5106:	2301      	movs	r3, #1
    5108:	4689      	mov	r9, r1
    510a:	e5af      	b.n	4c6c <__aeabi_ddiv+0xcc>
    510c:	2302      	movs	r3, #2
    510e:	425b      	negs	r3, r3
    5110:	469c      	mov	ip, r3
    5112:	9c03      	ldr	r4, [sp, #12]
    5114:	44e3      	add	fp, ip
    5116:	46a4      	mov	ip, r4
    5118:	9b02      	ldr	r3, [sp, #8]
    511a:	4463      	add	r3, ip
    511c:	4698      	mov	r8, r3
    511e:	45a0      	cmp	r8, r4
    5120:	41b6      	sbcs	r6, r6
    5122:	4276      	negs	r6, r6
    5124:	19f6      	adds	r6, r6, r7
    5126:	9302      	str	r3, [sp, #8]
    5128:	18b2      	adds	r2, r6, r2
    512a:	e6b1      	b.n	4e90 <__aeabi_ddiv+0x2f0>
    512c:	9803      	ldr	r0, [sp, #12]
    512e:	1e8a      	subs	r2, r1, #2
    5130:	0041      	lsls	r1, r0, #1
    5132:	4281      	cmp	r1, r0
    5134:	41b6      	sbcs	r6, r6
    5136:	4276      	negs	r6, r6
    5138:	19f6      	adds	r6, r6, r7
    513a:	19ad      	adds	r5, r5, r6
    513c:	9103      	str	r1, [sp, #12]
    513e:	e761      	b.n	5004 <__aeabi_ddiv+0x464>
    5140:	221f      	movs	r2, #31
    5142:	4252      	negs	r2, r2
    5144:	1ad3      	subs	r3, r2, r3
    5146:	465a      	mov	r2, fp
    5148:	40da      	lsrs	r2, r3
    514a:	0013      	movs	r3, r2
    514c:	2d20      	cmp	r5, #32
    514e:	d029      	beq.n	51a4 <__aeabi_ddiv+0x604>
    5150:	2240      	movs	r2, #64	; 0x40
    5152:	4658      	mov	r0, fp
    5154:	1b55      	subs	r5, r2, r5
    5156:	40a8      	lsls	r0, r5
    5158:	4301      	orrs	r1, r0
    515a:	1e48      	subs	r0, r1, #1
    515c:	4181      	sbcs	r1, r0
    515e:	2007      	movs	r0, #7
    5160:	430b      	orrs	r3, r1
    5162:	4018      	ands	r0, r3
    5164:	2600      	movs	r6, #0
    5166:	2800      	cmp	r0, #0
    5168:	d009      	beq.n	517e <__aeabi_ddiv+0x5de>
    516a:	220f      	movs	r2, #15
    516c:	2600      	movs	r6, #0
    516e:	401a      	ands	r2, r3
    5170:	0019      	movs	r1, r3
    5172:	2a04      	cmp	r2, #4
    5174:	d1bb      	bne.n	50ee <__aeabi_ddiv+0x54e>
    5176:	000b      	movs	r3, r1
    5178:	0770      	lsls	r0, r6, #29
    517a:	0276      	lsls	r6, r6, #9
    517c:	0b36      	lsrs	r6, r6, #12
    517e:	08db      	lsrs	r3, r3, #3
    5180:	4303      	orrs	r3, r0
    5182:	4699      	mov	r9, r3
    5184:	2201      	movs	r2, #1
    5186:	4653      	mov	r3, sl
    5188:	401a      	ands	r2, r3
    518a:	2300      	movs	r3, #0
    518c:	e56e      	b.n	4c6c <__aeabi_ddiv+0xcc>
    518e:	9902      	ldr	r1, [sp, #8]
    5190:	428d      	cmp	r5, r1
    5192:	d8bb      	bhi.n	510c <__aeabi_ddiv+0x56c>
    5194:	469b      	mov	fp, r3
    5196:	2600      	movs	r6, #0
    5198:	e67b      	b.n	4e92 <__aeabi_ddiv+0x2f2>
    519a:	9803      	ldr	r0, [sp, #12]
    519c:	4298      	cmp	r0, r3
    519e:	d3c5      	bcc.n	512c <__aeabi_ddiv+0x58c>
    51a0:	0011      	movs	r1, r2
    51a2:	e732      	b.n	500a <__aeabi_ddiv+0x46a>
    51a4:	2000      	movs	r0, #0
    51a6:	e7d7      	b.n	5158 <__aeabi_ddiv+0x5b8>
    51a8:	2680      	movs	r6, #128	; 0x80
    51aa:	465b      	mov	r3, fp
    51ac:	0336      	lsls	r6, r6, #12
    51ae:	431e      	orrs	r6, r3
    51b0:	0336      	lsls	r6, r6, #12
    51b2:	0b36      	lsrs	r6, r6, #12
    51b4:	9a00      	ldr	r2, [sp, #0]
    51b6:	4689      	mov	r9, r1
    51b8:	4b03      	ldr	r3, [pc, #12]	; (51c8 <__aeabi_ddiv+0x628>)
    51ba:	e557      	b.n	4c6c <__aeabi_ddiv+0xcc>
    51bc:	000003ff 	.word	0x000003ff
    51c0:	feffffff 	.word	0xfeffffff
    51c4:	000007fe 	.word	0x000007fe
    51c8:	000007ff 	.word	0x000007ff

000051cc <__eqdf2>:
    51cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ce:	465f      	mov	r7, fp
    51d0:	4656      	mov	r6, sl
    51d2:	464d      	mov	r5, r9
    51d4:	4644      	mov	r4, r8
    51d6:	b4f0      	push	{r4, r5, r6, r7}
    51d8:	031f      	lsls	r7, r3, #12
    51da:	005c      	lsls	r4, r3, #1
    51dc:	0fdb      	lsrs	r3, r3, #31
    51de:	469a      	mov	sl, r3
    51e0:	4b19      	ldr	r3, [pc, #100]	; (5248 <__eqdf2+0x7c>)
    51e2:	030e      	lsls	r6, r1, #12
    51e4:	004d      	lsls	r5, r1, #1
    51e6:	0fc9      	lsrs	r1, r1, #31
    51e8:	4680      	mov	r8, r0
    51ea:	0b36      	lsrs	r6, r6, #12
    51ec:	0d6d      	lsrs	r5, r5, #21
    51ee:	468b      	mov	fp, r1
    51f0:	4691      	mov	r9, r2
    51f2:	0b3f      	lsrs	r7, r7, #12
    51f4:	0d64      	lsrs	r4, r4, #21
    51f6:	429d      	cmp	r5, r3
    51f8:	d019      	beq.n	522e <__eqdf2+0x62>
    51fa:	4b13      	ldr	r3, [pc, #76]	; (5248 <__eqdf2+0x7c>)
    51fc:	429c      	cmp	r4, r3
    51fe:	d01b      	beq.n	5238 <__eqdf2+0x6c>
    5200:	2301      	movs	r3, #1
    5202:	42a5      	cmp	r5, r4
    5204:	d006      	beq.n	5214 <__eqdf2+0x48>
    5206:	0018      	movs	r0, r3
    5208:	bc3c      	pop	{r2, r3, r4, r5}
    520a:	4690      	mov	r8, r2
    520c:	4699      	mov	r9, r3
    520e:	46a2      	mov	sl, r4
    5210:	46ab      	mov	fp, r5
    5212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5214:	42be      	cmp	r6, r7
    5216:	d1f6      	bne.n	5206 <__eqdf2+0x3a>
    5218:	45c8      	cmp	r8, r9
    521a:	d1f4      	bne.n	5206 <__eqdf2+0x3a>
    521c:	45d3      	cmp	fp, sl
    521e:	d010      	beq.n	5242 <__eqdf2+0x76>
    5220:	2d00      	cmp	r5, #0
    5222:	d1f0      	bne.n	5206 <__eqdf2+0x3a>
    5224:	4330      	orrs	r0, r6
    5226:	0003      	movs	r3, r0
    5228:	1e5a      	subs	r2, r3, #1
    522a:	4193      	sbcs	r3, r2
    522c:	e7eb      	b.n	5206 <__eqdf2+0x3a>
    522e:	0031      	movs	r1, r6
    5230:	2301      	movs	r3, #1
    5232:	4301      	orrs	r1, r0
    5234:	d1e7      	bne.n	5206 <__eqdf2+0x3a>
    5236:	e7e0      	b.n	51fa <__eqdf2+0x2e>
    5238:	433a      	orrs	r2, r7
    523a:	2301      	movs	r3, #1
    523c:	2a00      	cmp	r2, #0
    523e:	d1e2      	bne.n	5206 <__eqdf2+0x3a>
    5240:	e7de      	b.n	5200 <__eqdf2+0x34>
    5242:	2300      	movs	r3, #0
    5244:	e7df      	b.n	5206 <__eqdf2+0x3a>
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	000007ff 	.word	0x000007ff

0000524c <__gedf2>:
    524c:	b5f0      	push	{r4, r5, r6, r7, lr}
    524e:	465f      	mov	r7, fp
    5250:	4644      	mov	r4, r8
    5252:	4656      	mov	r6, sl
    5254:	464d      	mov	r5, r9
    5256:	b4f0      	push	{r4, r5, r6, r7}
    5258:	031f      	lsls	r7, r3, #12
    525a:	0b3c      	lsrs	r4, r7, #12
    525c:	4f2c      	ldr	r7, [pc, #176]	; (5310 <__gedf2+0xc4>)
    525e:	030e      	lsls	r6, r1, #12
    5260:	004d      	lsls	r5, r1, #1
    5262:	46a3      	mov	fp, r4
    5264:	005c      	lsls	r4, r3, #1
    5266:	4684      	mov	ip, r0
    5268:	0b36      	lsrs	r6, r6, #12
    526a:	0d6d      	lsrs	r5, r5, #21
    526c:	0fc9      	lsrs	r1, r1, #31
    526e:	4690      	mov	r8, r2
    5270:	0d64      	lsrs	r4, r4, #21
    5272:	0fdb      	lsrs	r3, r3, #31
    5274:	42bd      	cmp	r5, r7
    5276:	d02b      	beq.n	52d0 <__gedf2+0x84>
    5278:	4f25      	ldr	r7, [pc, #148]	; (5310 <__gedf2+0xc4>)
    527a:	42bc      	cmp	r4, r7
    527c:	d02e      	beq.n	52dc <__gedf2+0x90>
    527e:	2d00      	cmp	r5, #0
    5280:	d10e      	bne.n	52a0 <__gedf2+0x54>
    5282:	4330      	orrs	r0, r6
    5284:	0007      	movs	r7, r0
    5286:	4681      	mov	r9, r0
    5288:	4278      	negs	r0, r7
    528a:	4178      	adcs	r0, r7
    528c:	2c00      	cmp	r4, #0
    528e:	d117      	bne.n	52c0 <__gedf2+0x74>
    5290:	465f      	mov	r7, fp
    5292:	433a      	orrs	r2, r7
    5294:	d114      	bne.n	52c0 <__gedf2+0x74>
    5296:	464b      	mov	r3, r9
    5298:	2000      	movs	r0, #0
    529a:	2b00      	cmp	r3, #0
    529c:	d00a      	beq.n	52b4 <__gedf2+0x68>
    529e:	e006      	b.n	52ae <__gedf2+0x62>
    52a0:	2c00      	cmp	r4, #0
    52a2:	d102      	bne.n	52aa <__gedf2+0x5e>
    52a4:	4658      	mov	r0, fp
    52a6:	4302      	orrs	r2, r0
    52a8:	d001      	beq.n	52ae <__gedf2+0x62>
    52aa:	4299      	cmp	r1, r3
    52ac:	d01a      	beq.n	52e4 <__gedf2+0x98>
    52ae:	2301      	movs	r3, #1
    52b0:	4248      	negs	r0, r1
    52b2:	4318      	orrs	r0, r3
    52b4:	bc3c      	pop	{r2, r3, r4, r5}
    52b6:	4690      	mov	r8, r2
    52b8:	4699      	mov	r9, r3
    52ba:	46a2      	mov	sl, r4
    52bc:	46ab      	mov	fp, r5
    52be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52c0:	2800      	cmp	r0, #0
    52c2:	d0f2      	beq.n	52aa <__gedf2+0x5e>
    52c4:	4258      	negs	r0, r3
    52c6:	4158      	adcs	r0, r3
    52c8:	2201      	movs	r2, #1
    52ca:	4240      	negs	r0, r0
    52cc:	4310      	orrs	r0, r2
    52ce:	e7f1      	b.n	52b4 <__gedf2+0x68>
    52d0:	0037      	movs	r7, r6
    52d2:	4307      	orrs	r7, r0
    52d4:	d0d0      	beq.n	5278 <__gedf2+0x2c>
    52d6:	2002      	movs	r0, #2
    52d8:	4240      	negs	r0, r0
    52da:	e7eb      	b.n	52b4 <__gedf2+0x68>
    52dc:	465f      	mov	r7, fp
    52de:	4317      	orrs	r7, r2
    52e0:	d0cd      	beq.n	527e <__gedf2+0x32>
    52e2:	e7f8      	b.n	52d6 <__gedf2+0x8a>
    52e4:	42a5      	cmp	r5, r4
    52e6:	dce2      	bgt.n	52ae <__gedf2+0x62>
    52e8:	db05      	blt.n	52f6 <__gedf2+0xaa>
    52ea:	455e      	cmp	r6, fp
    52ec:	d8df      	bhi.n	52ae <__gedf2+0x62>
    52ee:	d008      	beq.n	5302 <__gedf2+0xb6>
    52f0:	2000      	movs	r0, #0
    52f2:	455e      	cmp	r6, fp
    52f4:	d2de      	bcs.n	52b4 <__gedf2+0x68>
    52f6:	4248      	negs	r0, r1
    52f8:	4148      	adcs	r0, r1
    52fa:	2301      	movs	r3, #1
    52fc:	4240      	negs	r0, r0
    52fe:	4318      	orrs	r0, r3
    5300:	e7d8      	b.n	52b4 <__gedf2+0x68>
    5302:	45c4      	cmp	ip, r8
    5304:	d8d3      	bhi.n	52ae <__gedf2+0x62>
    5306:	2000      	movs	r0, #0
    5308:	45c4      	cmp	ip, r8
    530a:	d3f4      	bcc.n	52f6 <__gedf2+0xaa>
    530c:	e7d2      	b.n	52b4 <__gedf2+0x68>
    530e:	46c0      	nop			; (mov r8, r8)
    5310:	000007ff 	.word	0x000007ff

00005314 <__ledf2>:
    5314:	b5f0      	push	{r4, r5, r6, r7, lr}
    5316:	465f      	mov	r7, fp
    5318:	464d      	mov	r5, r9
    531a:	4644      	mov	r4, r8
    531c:	4656      	mov	r6, sl
    531e:	b4f0      	push	{r4, r5, r6, r7}
    5320:	031c      	lsls	r4, r3, #12
    5322:	0b24      	lsrs	r4, r4, #12
    5324:	46a4      	mov	ip, r4
    5326:	4c2f      	ldr	r4, [pc, #188]	; (53e4 <__ledf2+0xd0>)
    5328:	030f      	lsls	r7, r1, #12
    532a:	004d      	lsls	r5, r1, #1
    532c:	005e      	lsls	r6, r3, #1
    532e:	0fc9      	lsrs	r1, r1, #31
    5330:	4680      	mov	r8, r0
    5332:	0b3f      	lsrs	r7, r7, #12
    5334:	0d6d      	lsrs	r5, r5, #21
    5336:	468b      	mov	fp, r1
    5338:	4691      	mov	r9, r2
    533a:	0d76      	lsrs	r6, r6, #21
    533c:	0fdb      	lsrs	r3, r3, #31
    533e:	42a5      	cmp	r5, r4
    5340:	d020      	beq.n	5384 <__ledf2+0x70>
    5342:	4c28      	ldr	r4, [pc, #160]	; (53e4 <__ledf2+0xd0>)
    5344:	42a6      	cmp	r6, r4
    5346:	d022      	beq.n	538e <__ledf2+0x7a>
    5348:	2d00      	cmp	r5, #0
    534a:	d112      	bne.n	5372 <__ledf2+0x5e>
    534c:	4338      	orrs	r0, r7
    534e:	4244      	negs	r4, r0
    5350:	4144      	adcs	r4, r0
    5352:	2e00      	cmp	r6, #0
    5354:	d020      	beq.n	5398 <__ledf2+0x84>
    5356:	2c00      	cmp	r4, #0
    5358:	d00d      	beq.n	5376 <__ledf2+0x62>
    535a:	425c      	negs	r4, r3
    535c:	4163      	adcs	r3, r4
    535e:	2401      	movs	r4, #1
    5360:	425b      	negs	r3, r3
    5362:	431c      	orrs	r4, r3
    5364:	0020      	movs	r0, r4
    5366:	bc3c      	pop	{r2, r3, r4, r5}
    5368:	4690      	mov	r8, r2
    536a:	4699      	mov	r9, r3
    536c:	46a2      	mov	sl, r4
    536e:	46ab      	mov	fp, r5
    5370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5372:	2e00      	cmp	r6, #0
    5374:	d017      	beq.n	53a6 <__ledf2+0x92>
    5376:	455b      	cmp	r3, fp
    5378:	d019      	beq.n	53ae <__ledf2+0x9a>
    537a:	465b      	mov	r3, fp
    537c:	425c      	negs	r4, r3
    537e:	2301      	movs	r3, #1
    5380:	431c      	orrs	r4, r3
    5382:	e7ef      	b.n	5364 <__ledf2+0x50>
    5384:	0039      	movs	r1, r7
    5386:	2402      	movs	r4, #2
    5388:	4301      	orrs	r1, r0
    538a:	d1eb      	bne.n	5364 <__ledf2+0x50>
    538c:	e7d9      	b.n	5342 <__ledf2+0x2e>
    538e:	4661      	mov	r1, ip
    5390:	2402      	movs	r4, #2
    5392:	4311      	orrs	r1, r2
    5394:	d1e6      	bne.n	5364 <__ledf2+0x50>
    5396:	e7d7      	b.n	5348 <__ledf2+0x34>
    5398:	4661      	mov	r1, ip
    539a:	430a      	orrs	r2, r1
    539c:	d1db      	bne.n	5356 <__ledf2+0x42>
    539e:	2400      	movs	r4, #0
    53a0:	2800      	cmp	r0, #0
    53a2:	d0df      	beq.n	5364 <__ledf2+0x50>
    53a4:	e7e9      	b.n	537a <__ledf2+0x66>
    53a6:	4661      	mov	r1, ip
    53a8:	430a      	orrs	r2, r1
    53aa:	d1e4      	bne.n	5376 <__ledf2+0x62>
    53ac:	e7e5      	b.n	537a <__ledf2+0x66>
    53ae:	42b5      	cmp	r5, r6
    53b0:	dd03      	ble.n	53ba <__ledf2+0xa6>
    53b2:	2201      	movs	r2, #1
    53b4:	425c      	negs	r4, r3
    53b6:	4314      	orrs	r4, r2
    53b8:	e7d4      	b.n	5364 <__ledf2+0x50>
    53ba:	42b5      	cmp	r5, r6
    53bc:	dbcd      	blt.n	535a <__ledf2+0x46>
    53be:	4567      	cmp	r7, ip
    53c0:	d8db      	bhi.n	537a <__ledf2+0x66>
    53c2:	d009      	beq.n	53d8 <__ledf2+0xc4>
    53c4:	2400      	movs	r4, #0
    53c6:	4567      	cmp	r7, ip
    53c8:	d2cc      	bcs.n	5364 <__ledf2+0x50>
    53ca:	4659      	mov	r1, fp
    53cc:	424c      	negs	r4, r1
    53ce:	4161      	adcs	r1, r4
    53d0:	2401      	movs	r4, #1
    53d2:	4249      	negs	r1, r1
    53d4:	430c      	orrs	r4, r1
    53d6:	e7c5      	b.n	5364 <__ledf2+0x50>
    53d8:	45c8      	cmp	r8, r9
    53da:	d8ce      	bhi.n	537a <__ledf2+0x66>
    53dc:	2400      	movs	r4, #0
    53de:	45c8      	cmp	r8, r9
    53e0:	d3f3      	bcc.n	53ca <__ledf2+0xb6>
    53e2:	e7bf      	b.n	5364 <__ledf2+0x50>
    53e4:	000007ff 	.word	0x000007ff

000053e8 <__aeabi_dmul>:
    53e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ea:	465f      	mov	r7, fp
    53ec:	4656      	mov	r6, sl
    53ee:	464d      	mov	r5, r9
    53f0:	4644      	mov	r4, r8
    53f2:	b4f0      	push	{r4, r5, r6, r7}
    53f4:	030d      	lsls	r5, r1, #12
    53f6:	4699      	mov	r9, r3
    53f8:	004e      	lsls	r6, r1, #1
    53fa:	0b2b      	lsrs	r3, r5, #12
    53fc:	b087      	sub	sp, #28
    53fe:	0007      	movs	r7, r0
    5400:	4692      	mov	sl, r2
    5402:	4680      	mov	r8, r0
    5404:	469b      	mov	fp, r3
    5406:	0d76      	lsrs	r6, r6, #21
    5408:	0fcc      	lsrs	r4, r1, #31
    540a:	2e00      	cmp	r6, #0
    540c:	d069      	beq.n	54e2 <__aeabi_dmul+0xfa>
    540e:	4b6d      	ldr	r3, [pc, #436]	; (55c4 <__aeabi_dmul+0x1dc>)
    5410:	429e      	cmp	r6, r3
    5412:	d035      	beq.n	5480 <__aeabi_dmul+0x98>
    5414:	465b      	mov	r3, fp
    5416:	2280      	movs	r2, #128	; 0x80
    5418:	00dd      	lsls	r5, r3, #3
    541a:	0412      	lsls	r2, r2, #16
    541c:	0f43      	lsrs	r3, r0, #29
    541e:	4313      	orrs	r3, r2
    5420:	432b      	orrs	r3, r5
    5422:	469b      	mov	fp, r3
    5424:	00c3      	lsls	r3, r0, #3
    5426:	4698      	mov	r8, r3
    5428:	4b67      	ldr	r3, [pc, #412]	; (55c8 <__aeabi_dmul+0x1e0>)
    542a:	2700      	movs	r7, #0
    542c:	469c      	mov	ip, r3
    542e:	2300      	movs	r3, #0
    5430:	4466      	add	r6, ip
    5432:	9301      	str	r3, [sp, #4]
    5434:	464a      	mov	r2, r9
    5436:	0315      	lsls	r5, r2, #12
    5438:	0050      	lsls	r0, r2, #1
    543a:	0fd2      	lsrs	r2, r2, #31
    543c:	4653      	mov	r3, sl
    543e:	0b2d      	lsrs	r5, r5, #12
    5440:	0d40      	lsrs	r0, r0, #21
    5442:	4691      	mov	r9, r2
    5444:	d100      	bne.n	5448 <__aeabi_dmul+0x60>
    5446:	e076      	b.n	5536 <__aeabi_dmul+0x14e>
    5448:	4a5e      	ldr	r2, [pc, #376]	; (55c4 <__aeabi_dmul+0x1dc>)
    544a:	4290      	cmp	r0, r2
    544c:	d06c      	beq.n	5528 <__aeabi_dmul+0x140>
    544e:	2280      	movs	r2, #128	; 0x80
    5450:	0f5b      	lsrs	r3, r3, #29
    5452:	0412      	lsls	r2, r2, #16
    5454:	4313      	orrs	r3, r2
    5456:	4a5c      	ldr	r2, [pc, #368]	; (55c8 <__aeabi_dmul+0x1e0>)
    5458:	00ed      	lsls	r5, r5, #3
    545a:	4694      	mov	ip, r2
    545c:	431d      	orrs	r5, r3
    545e:	4653      	mov	r3, sl
    5460:	2200      	movs	r2, #0
    5462:	00db      	lsls	r3, r3, #3
    5464:	4460      	add	r0, ip
    5466:	4649      	mov	r1, r9
    5468:	1836      	adds	r6, r6, r0
    546a:	1c70      	adds	r0, r6, #1
    546c:	4061      	eors	r1, r4
    546e:	9002      	str	r0, [sp, #8]
    5470:	4317      	orrs	r7, r2
    5472:	2f0f      	cmp	r7, #15
    5474:	d900      	bls.n	5478 <__aeabi_dmul+0x90>
    5476:	e0af      	b.n	55d8 <__aeabi_dmul+0x1f0>
    5478:	4854      	ldr	r0, [pc, #336]	; (55cc <__aeabi_dmul+0x1e4>)
    547a:	00bf      	lsls	r7, r7, #2
    547c:	59c7      	ldr	r7, [r0, r7]
    547e:	46bf      	mov	pc, r7
    5480:	465b      	mov	r3, fp
    5482:	431f      	orrs	r7, r3
    5484:	d000      	beq.n	5488 <__aeabi_dmul+0xa0>
    5486:	e088      	b.n	559a <__aeabi_dmul+0x1b2>
    5488:	2300      	movs	r3, #0
    548a:	469b      	mov	fp, r3
    548c:	4698      	mov	r8, r3
    548e:	3302      	adds	r3, #2
    5490:	2708      	movs	r7, #8
    5492:	9301      	str	r3, [sp, #4]
    5494:	e7ce      	b.n	5434 <__aeabi_dmul+0x4c>
    5496:	4649      	mov	r1, r9
    5498:	2a02      	cmp	r2, #2
    549a:	d06a      	beq.n	5572 <__aeabi_dmul+0x18a>
    549c:	2a03      	cmp	r2, #3
    549e:	d100      	bne.n	54a2 <__aeabi_dmul+0xba>
    54a0:	e209      	b.n	58b6 <__aeabi_dmul+0x4ce>
    54a2:	2a01      	cmp	r2, #1
    54a4:	d000      	beq.n	54a8 <__aeabi_dmul+0xc0>
    54a6:	e1bb      	b.n	5820 <__aeabi_dmul+0x438>
    54a8:	4011      	ands	r1, r2
    54aa:	2200      	movs	r2, #0
    54ac:	2300      	movs	r3, #0
    54ae:	2500      	movs	r5, #0
    54b0:	4690      	mov	r8, r2
    54b2:	b2cc      	uxtb	r4, r1
    54b4:	2100      	movs	r1, #0
    54b6:	032d      	lsls	r5, r5, #12
    54b8:	0d0a      	lsrs	r2, r1, #20
    54ba:	0512      	lsls	r2, r2, #20
    54bc:	0b2d      	lsrs	r5, r5, #12
    54be:	4315      	orrs	r5, r2
    54c0:	4a43      	ldr	r2, [pc, #268]	; (55d0 <__aeabi_dmul+0x1e8>)
    54c2:	051b      	lsls	r3, r3, #20
    54c4:	4015      	ands	r5, r2
    54c6:	431d      	orrs	r5, r3
    54c8:	006d      	lsls	r5, r5, #1
    54ca:	07e4      	lsls	r4, r4, #31
    54cc:	086d      	lsrs	r5, r5, #1
    54ce:	4325      	orrs	r5, r4
    54d0:	4640      	mov	r0, r8
    54d2:	0029      	movs	r1, r5
    54d4:	b007      	add	sp, #28
    54d6:	bc3c      	pop	{r2, r3, r4, r5}
    54d8:	4690      	mov	r8, r2
    54da:	4699      	mov	r9, r3
    54dc:	46a2      	mov	sl, r4
    54de:	46ab      	mov	fp, r5
    54e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54e2:	4303      	orrs	r3, r0
    54e4:	d052      	beq.n	558c <__aeabi_dmul+0x1a4>
    54e6:	465b      	mov	r3, fp
    54e8:	2b00      	cmp	r3, #0
    54ea:	d100      	bne.n	54ee <__aeabi_dmul+0x106>
    54ec:	e18a      	b.n	5804 <__aeabi_dmul+0x41c>
    54ee:	4658      	mov	r0, fp
    54f0:	f000 fef8 	bl	62e4 <__clzsi2>
    54f4:	0003      	movs	r3, r0
    54f6:	3b0b      	subs	r3, #11
    54f8:	2b1c      	cmp	r3, #28
    54fa:	dd00      	ble.n	54fe <__aeabi_dmul+0x116>
    54fc:	e17b      	b.n	57f6 <__aeabi_dmul+0x40e>
    54fe:	221d      	movs	r2, #29
    5500:	1ad3      	subs	r3, r2, r3
    5502:	003a      	movs	r2, r7
    5504:	0001      	movs	r1, r0
    5506:	465d      	mov	r5, fp
    5508:	40da      	lsrs	r2, r3
    550a:	3908      	subs	r1, #8
    550c:	408d      	lsls	r5, r1
    550e:	0013      	movs	r3, r2
    5510:	408f      	lsls	r7, r1
    5512:	432b      	orrs	r3, r5
    5514:	469b      	mov	fp, r3
    5516:	46b8      	mov	r8, r7
    5518:	4b2e      	ldr	r3, [pc, #184]	; (55d4 <__aeabi_dmul+0x1ec>)
    551a:	2700      	movs	r7, #0
    551c:	469c      	mov	ip, r3
    551e:	2300      	movs	r3, #0
    5520:	4460      	add	r0, ip
    5522:	4246      	negs	r6, r0
    5524:	9301      	str	r3, [sp, #4]
    5526:	e785      	b.n	5434 <__aeabi_dmul+0x4c>
    5528:	4652      	mov	r2, sl
    552a:	432a      	orrs	r2, r5
    552c:	d12c      	bne.n	5588 <__aeabi_dmul+0x1a0>
    552e:	2500      	movs	r5, #0
    5530:	2300      	movs	r3, #0
    5532:	2202      	movs	r2, #2
    5534:	e797      	b.n	5466 <__aeabi_dmul+0x7e>
    5536:	4652      	mov	r2, sl
    5538:	432a      	orrs	r2, r5
    553a:	d021      	beq.n	5580 <__aeabi_dmul+0x198>
    553c:	2d00      	cmp	r5, #0
    553e:	d100      	bne.n	5542 <__aeabi_dmul+0x15a>
    5540:	e154      	b.n	57ec <__aeabi_dmul+0x404>
    5542:	0028      	movs	r0, r5
    5544:	f000 fece 	bl	62e4 <__clzsi2>
    5548:	0003      	movs	r3, r0
    554a:	3b0b      	subs	r3, #11
    554c:	2b1c      	cmp	r3, #28
    554e:	dd00      	ble.n	5552 <__aeabi_dmul+0x16a>
    5550:	e146      	b.n	57e0 <__aeabi_dmul+0x3f8>
    5552:	211d      	movs	r1, #29
    5554:	1acb      	subs	r3, r1, r3
    5556:	4651      	mov	r1, sl
    5558:	0002      	movs	r2, r0
    555a:	40d9      	lsrs	r1, r3
    555c:	4653      	mov	r3, sl
    555e:	3a08      	subs	r2, #8
    5560:	4095      	lsls	r5, r2
    5562:	4093      	lsls	r3, r2
    5564:	430d      	orrs	r5, r1
    5566:	4a1b      	ldr	r2, [pc, #108]	; (55d4 <__aeabi_dmul+0x1ec>)
    5568:	4694      	mov	ip, r2
    556a:	4460      	add	r0, ip
    556c:	4240      	negs	r0, r0
    556e:	2200      	movs	r2, #0
    5570:	e779      	b.n	5466 <__aeabi_dmul+0x7e>
    5572:	2401      	movs	r4, #1
    5574:	2200      	movs	r2, #0
    5576:	400c      	ands	r4, r1
    5578:	4b12      	ldr	r3, [pc, #72]	; (55c4 <__aeabi_dmul+0x1dc>)
    557a:	2500      	movs	r5, #0
    557c:	4690      	mov	r8, r2
    557e:	e799      	b.n	54b4 <__aeabi_dmul+0xcc>
    5580:	2500      	movs	r5, #0
    5582:	2300      	movs	r3, #0
    5584:	2201      	movs	r2, #1
    5586:	e76e      	b.n	5466 <__aeabi_dmul+0x7e>
    5588:	2203      	movs	r2, #3
    558a:	e76c      	b.n	5466 <__aeabi_dmul+0x7e>
    558c:	2300      	movs	r3, #0
    558e:	469b      	mov	fp, r3
    5590:	4698      	mov	r8, r3
    5592:	3301      	adds	r3, #1
    5594:	2704      	movs	r7, #4
    5596:	9301      	str	r3, [sp, #4]
    5598:	e74c      	b.n	5434 <__aeabi_dmul+0x4c>
    559a:	2303      	movs	r3, #3
    559c:	270c      	movs	r7, #12
    559e:	9301      	str	r3, [sp, #4]
    55a0:	e748      	b.n	5434 <__aeabi_dmul+0x4c>
    55a2:	2300      	movs	r3, #0
    55a4:	2580      	movs	r5, #128	; 0x80
    55a6:	4698      	mov	r8, r3
    55a8:	2400      	movs	r4, #0
    55aa:	032d      	lsls	r5, r5, #12
    55ac:	4b05      	ldr	r3, [pc, #20]	; (55c4 <__aeabi_dmul+0x1dc>)
    55ae:	e781      	b.n	54b4 <__aeabi_dmul+0xcc>
    55b0:	465d      	mov	r5, fp
    55b2:	4643      	mov	r3, r8
    55b4:	9a01      	ldr	r2, [sp, #4]
    55b6:	e76f      	b.n	5498 <__aeabi_dmul+0xb0>
    55b8:	465d      	mov	r5, fp
    55ba:	4643      	mov	r3, r8
    55bc:	0021      	movs	r1, r4
    55be:	9a01      	ldr	r2, [sp, #4]
    55c0:	e76a      	b.n	5498 <__aeabi_dmul+0xb0>
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	000007ff 	.word	0x000007ff
    55c8:	fffffc01 	.word	0xfffffc01
    55cc:	00006560 	.word	0x00006560
    55d0:	800fffff 	.word	0x800fffff
    55d4:	000003f3 	.word	0x000003f3
    55d8:	4642      	mov	r2, r8
    55da:	0c12      	lsrs	r2, r2, #16
    55dc:	4691      	mov	r9, r2
    55de:	0c1a      	lsrs	r2, r3, #16
    55e0:	4694      	mov	ip, r2
    55e2:	4642      	mov	r2, r8
    55e4:	0417      	lsls	r7, r2, #16
    55e6:	464a      	mov	r2, r9
    55e8:	041b      	lsls	r3, r3, #16
    55ea:	0c1b      	lsrs	r3, r3, #16
    55ec:	435a      	muls	r2, r3
    55ee:	4660      	mov	r0, ip
    55f0:	4690      	mov	r8, r2
    55f2:	464a      	mov	r2, r9
    55f4:	4342      	muls	r2, r0
    55f6:	0010      	movs	r0, r2
    55f8:	9203      	str	r2, [sp, #12]
    55fa:	4662      	mov	r2, ip
    55fc:	001c      	movs	r4, r3
    55fe:	0c3f      	lsrs	r7, r7, #16
    5600:	437a      	muls	r2, r7
    5602:	437c      	muls	r4, r7
    5604:	4442      	add	r2, r8
    5606:	9201      	str	r2, [sp, #4]
    5608:	0c22      	lsrs	r2, r4, #16
    560a:	4692      	mov	sl, r2
    560c:	9a01      	ldr	r2, [sp, #4]
    560e:	4452      	add	r2, sl
    5610:	4590      	cmp	r8, r2
    5612:	d906      	bls.n	5622 <__aeabi_dmul+0x23a>
    5614:	4682      	mov	sl, r0
    5616:	2080      	movs	r0, #128	; 0x80
    5618:	0240      	lsls	r0, r0, #9
    561a:	4680      	mov	r8, r0
    561c:	44c2      	add	sl, r8
    561e:	4650      	mov	r0, sl
    5620:	9003      	str	r0, [sp, #12]
    5622:	0c10      	lsrs	r0, r2, #16
    5624:	9004      	str	r0, [sp, #16]
    5626:	4648      	mov	r0, r9
    5628:	0424      	lsls	r4, r4, #16
    562a:	0c24      	lsrs	r4, r4, #16
    562c:	0412      	lsls	r2, r2, #16
    562e:	1912      	adds	r2, r2, r4
    5630:	9205      	str	r2, [sp, #20]
    5632:	0c2a      	lsrs	r2, r5, #16
    5634:	042d      	lsls	r5, r5, #16
    5636:	0c2d      	lsrs	r5, r5, #16
    5638:	4368      	muls	r0, r5
    563a:	002c      	movs	r4, r5
    563c:	4682      	mov	sl, r0
    563e:	4648      	mov	r0, r9
    5640:	437c      	muls	r4, r7
    5642:	4350      	muls	r0, r2
    5644:	4681      	mov	r9, r0
    5646:	0c20      	lsrs	r0, r4, #16
    5648:	4680      	mov	r8, r0
    564a:	4357      	muls	r7, r2
    564c:	4457      	add	r7, sl
    564e:	4447      	add	r7, r8
    5650:	45ba      	cmp	sl, r7
    5652:	d903      	bls.n	565c <__aeabi_dmul+0x274>
    5654:	2080      	movs	r0, #128	; 0x80
    5656:	0240      	lsls	r0, r0, #9
    5658:	4680      	mov	r8, r0
    565a:	44c1      	add	r9, r8
    565c:	0c38      	lsrs	r0, r7, #16
    565e:	043f      	lsls	r7, r7, #16
    5660:	46b8      	mov	r8, r7
    5662:	4448      	add	r0, r9
    5664:	0424      	lsls	r4, r4, #16
    5666:	0c24      	lsrs	r4, r4, #16
    5668:	9001      	str	r0, [sp, #4]
    566a:	9804      	ldr	r0, [sp, #16]
    566c:	44a0      	add	r8, r4
    566e:	4440      	add	r0, r8
    5670:	9004      	str	r0, [sp, #16]
    5672:	4658      	mov	r0, fp
    5674:	0c00      	lsrs	r0, r0, #16
    5676:	4681      	mov	r9, r0
    5678:	4658      	mov	r0, fp
    567a:	0404      	lsls	r4, r0, #16
    567c:	0c20      	lsrs	r0, r4, #16
    567e:	4682      	mov	sl, r0
    5680:	0007      	movs	r7, r0
    5682:	4648      	mov	r0, r9
    5684:	435f      	muls	r7, r3
    5686:	464c      	mov	r4, r9
    5688:	4343      	muls	r3, r0
    568a:	4660      	mov	r0, ip
    568c:	4360      	muls	r0, r4
    568e:	4664      	mov	r4, ip
    5690:	4683      	mov	fp, r0
    5692:	4650      	mov	r0, sl
    5694:	4344      	muls	r4, r0
    5696:	0c38      	lsrs	r0, r7, #16
    5698:	4684      	mov	ip, r0
    569a:	18e4      	adds	r4, r4, r3
    569c:	4464      	add	r4, ip
    569e:	42a3      	cmp	r3, r4
    56a0:	d903      	bls.n	56aa <__aeabi_dmul+0x2c2>
    56a2:	2380      	movs	r3, #128	; 0x80
    56a4:	025b      	lsls	r3, r3, #9
    56a6:	469c      	mov	ip, r3
    56a8:	44e3      	add	fp, ip
    56aa:	4648      	mov	r0, r9
    56ac:	043f      	lsls	r7, r7, #16
    56ae:	0c23      	lsrs	r3, r4, #16
    56b0:	0c3f      	lsrs	r7, r7, #16
    56b2:	0424      	lsls	r4, r4, #16
    56b4:	19e4      	adds	r4, r4, r7
    56b6:	4657      	mov	r7, sl
    56b8:	4368      	muls	r0, r5
    56ba:	436f      	muls	r7, r5
    56bc:	4684      	mov	ip, r0
    56be:	464d      	mov	r5, r9
    56c0:	4650      	mov	r0, sl
    56c2:	4355      	muls	r5, r2
    56c4:	4342      	muls	r2, r0
    56c6:	0c38      	lsrs	r0, r7, #16
    56c8:	4681      	mov	r9, r0
    56ca:	4462      	add	r2, ip
    56cc:	444a      	add	r2, r9
    56ce:	445b      	add	r3, fp
    56d0:	4594      	cmp	ip, r2
    56d2:	d903      	bls.n	56dc <__aeabi_dmul+0x2f4>
    56d4:	2080      	movs	r0, #128	; 0x80
    56d6:	0240      	lsls	r0, r0, #9
    56d8:	4684      	mov	ip, r0
    56da:	4465      	add	r5, ip
    56dc:	9803      	ldr	r0, [sp, #12]
    56de:	043f      	lsls	r7, r7, #16
    56e0:	4683      	mov	fp, r0
    56e2:	9804      	ldr	r0, [sp, #16]
    56e4:	0c3f      	lsrs	r7, r7, #16
    56e6:	4684      	mov	ip, r0
    56e8:	44e3      	add	fp, ip
    56ea:	45c3      	cmp	fp, r8
    56ec:	4180      	sbcs	r0, r0
    56ee:	4240      	negs	r0, r0
    56f0:	4682      	mov	sl, r0
    56f2:	0410      	lsls	r0, r2, #16
    56f4:	4684      	mov	ip, r0
    56f6:	9801      	ldr	r0, [sp, #4]
    56f8:	4467      	add	r7, ip
    56fa:	4684      	mov	ip, r0
    56fc:	4467      	add	r7, ip
    56fe:	44a3      	add	fp, r4
    5700:	46bc      	mov	ip, r7
    5702:	45a3      	cmp	fp, r4
    5704:	41a4      	sbcs	r4, r4
    5706:	4699      	mov	r9, r3
    5708:	44d4      	add	ip, sl
    570a:	4264      	negs	r4, r4
    570c:	4287      	cmp	r7, r0
    570e:	41bf      	sbcs	r7, r7
    5710:	45d4      	cmp	ip, sl
    5712:	4180      	sbcs	r0, r0
    5714:	44e1      	add	r9, ip
    5716:	46a0      	mov	r8, r4
    5718:	4599      	cmp	r9, r3
    571a:	419b      	sbcs	r3, r3
    571c:	427f      	negs	r7, r7
    571e:	4240      	negs	r0, r0
    5720:	44c8      	add	r8, r9
    5722:	4307      	orrs	r7, r0
    5724:	0c12      	lsrs	r2, r2, #16
    5726:	18ba      	adds	r2, r7, r2
    5728:	45a0      	cmp	r8, r4
    572a:	41a4      	sbcs	r4, r4
    572c:	425f      	negs	r7, r3
    572e:	003b      	movs	r3, r7
    5730:	4264      	negs	r4, r4
    5732:	4323      	orrs	r3, r4
    5734:	18d7      	adds	r7, r2, r3
    5736:	4643      	mov	r3, r8
    5738:	197d      	adds	r5, r7, r5
    573a:	0ddb      	lsrs	r3, r3, #23
    573c:	026d      	lsls	r5, r5, #9
    573e:	431d      	orrs	r5, r3
    5740:	465b      	mov	r3, fp
    5742:	025a      	lsls	r2, r3, #9
    5744:	9b05      	ldr	r3, [sp, #20]
    5746:	431a      	orrs	r2, r3
    5748:	1e53      	subs	r3, r2, #1
    574a:	419a      	sbcs	r2, r3
    574c:	465b      	mov	r3, fp
    574e:	0ddb      	lsrs	r3, r3, #23
    5750:	431a      	orrs	r2, r3
    5752:	4643      	mov	r3, r8
    5754:	025b      	lsls	r3, r3, #9
    5756:	4313      	orrs	r3, r2
    5758:	01ea      	lsls	r2, r5, #7
    575a:	d507      	bpl.n	576c <__aeabi_dmul+0x384>
    575c:	2201      	movs	r2, #1
    575e:	085c      	lsrs	r4, r3, #1
    5760:	4013      	ands	r3, r2
    5762:	4323      	orrs	r3, r4
    5764:	07ea      	lsls	r2, r5, #31
    5766:	9e02      	ldr	r6, [sp, #8]
    5768:	4313      	orrs	r3, r2
    576a:	086d      	lsrs	r5, r5, #1
    576c:	4a57      	ldr	r2, [pc, #348]	; (58cc <__aeabi_dmul+0x4e4>)
    576e:	18b2      	adds	r2, r6, r2
    5770:	2a00      	cmp	r2, #0
    5772:	dd4b      	ble.n	580c <__aeabi_dmul+0x424>
    5774:	0758      	lsls	r0, r3, #29
    5776:	d009      	beq.n	578c <__aeabi_dmul+0x3a4>
    5778:	200f      	movs	r0, #15
    577a:	4018      	ands	r0, r3
    577c:	2804      	cmp	r0, #4
    577e:	d005      	beq.n	578c <__aeabi_dmul+0x3a4>
    5780:	1d18      	adds	r0, r3, #4
    5782:	4298      	cmp	r0, r3
    5784:	419b      	sbcs	r3, r3
    5786:	425b      	negs	r3, r3
    5788:	18ed      	adds	r5, r5, r3
    578a:	0003      	movs	r3, r0
    578c:	01e8      	lsls	r0, r5, #7
    578e:	d504      	bpl.n	579a <__aeabi_dmul+0x3b2>
    5790:	4a4f      	ldr	r2, [pc, #316]	; (58d0 <__aeabi_dmul+0x4e8>)
    5792:	4015      	ands	r5, r2
    5794:	2280      	movs	r2, #128	; 0x80
    5796:	00d2      	lsls	r2, r2, #3
    5798:	18b2      	adds	r2, r6, r2
    579a:	484e      	ldr	r0, [pc, #312]	; (58d4 <__aeabi_dmul+0x4ec>)
    579c:	4282      	cmp	r2, r0
    579e:	dd00      	ble.n	57a2 <__aeabi_dmul+0x3ba>
    57a0:	e6e7      	b.n	5572 <__aeabi_dmul+0x18a>
    57a2:	2401      	movs	r4, #1
    57a4:	08db      	lsrs	r3, r3, #3
    57a6:	0768      	lsls	r0, r5, #29
    57a8:	4318      	orrs	r0, r3
    57aa:	026d      	lsls	r5, r5, #9
    57ac:	0553      	lsls	r3, r2, #21
    57ae:	4680      	mov	r8, r0
    57b0:	0b2d      	lsrs	r5, r5, #12
    57b2:	0d5b      	lsrs	r3, r3, #21
    57b4:	400c      	ands	r4, r1
    57b6:	e67d      	b.n	54b4 <__aeabi_dmul+0xcc>
    57b8:	2280      	movs	r2, #128	; 0x80
    57ba:	4659      	mov	r1, fp
    57bc:	0312      	lsls	r2, r2, #12
    57be:	4211      	tst	r1, r2
    57c0:	d008      	beq.n	57d4 <__aeabi_dmul+0x3ec>
    57c2:	4215      	tst	r5, r2
    57c4:	d106      	bne.n	57d4 <__aeabi_dmul+0x3ec>
    57c6:	4315      	orrs	r5, r2
    57c8:	032d      	lsls	r5, r5, #12
    57ca:	4698      	mov	r8, r3
    57cc:	0b2d      	lsrs	r5, r5, #12
    57ce:	464c      	mov	r4, r9
    57d0:	4b41      	ldr	r3, [pc, #260]	; (58d8 <__aeabi_dmul+0x4f0>)
    57d2:	e66f      	b.n	54b4 <__aeabi_dmul+0xcc>
    57d4:	465d      	mov	r5, fp
    57d6:	4315      	orrs	r5, r2
    57d8:	032d      	lsls	r5, r5, #12
    57da:	0b2d      	lsrs	r5, r5, #12
    57dc:	4b3e      	ldr	r3, [pc, #248]	; (58d8 <__aeabi_dmul+0x4f0>)
    57de:	e669      	b.n	54b4 <__aeabi_dmul+0xcc>
    57e0:	0003      	movs	r3, r0
    57e2:	4655      	mov	r5, sl
    57e4:	3b28      	subs	r3, #40	; 0x28
    57e6:	409d      	lsls	r5, r3
    57e8:	2300      	movs	r3, #0
    57ea:	e6bc      	b.n	5566 <__aeabi_dmul+0x17e>
    57ec:	4650      	mov	r0, sl
    57ee:	f000 fd79 	bl	62e4 <__clzsi2>
    57f2:	3020      	adds	r0, #32
    57f4:	e6a8      	b.n	5548 <__aeabi_dmul+0x160>
    57f6:	0003      	movs	r3, r0
    57f8:	3b28      	subs	r3, #40	; 0x28
    57fa:	409f      	lsls	r7, r3
    57fc:	2300      	movs	r3, #0
    57fe:	46bb      	mov	fp, r7
    5800:	4698      	mov	r8, r3
    5802:	e689      	b.n	5518 <__aeabi_dmul+0x130>
    5804:	f000 fd6e 	bl	62e4 <__clzsi2>
    5808:	3020      	adds	r0, #32
    580a:	e673      	b.n	54f4 <__aeabi_dmul+0x10c>
    580c:	2401      	movs	r4, #1
    580e:	1aa6      	subs	r6, r4, r2
    5810:	2e38      	cmp	r6, #56	; 0x38
    5812:	dd07      	ble.n	5824 <__aeabi_dmul+0x43c>
    5814:	2200      	movs	r2, #0
    5816:	400c      	ands	r4, r1
    5818:	2300      	movs	r3, #0
    581a:	2500      	movs	r5, #0
    581c:	4690      	mov	r8, r2
    581e:	e649      	b.n	54b4 <__aeabi_dmul+0xcc>
    5820:	9e02      	ldr	r6, [sp, #8]
    5822:	e7a3      	b.n	576c <__aeabi_dmul+0x384>
    5824:	2e1f      	cmp	r6, #31
    5826:	dc20      	bgt.n	586a <__aeabi_dmul+0x482>
    5828:	2220      	movs	r2, #32
    582a:	002c      	movs	r4, r5
    582c:	0018      	movs	r0, r3
    582e:	1b92      	subs	r2, r2, r6
    5830:	40f0      	lsrs	r0, r6
    5832:	4094      	lsls	r4, r2
    5834:	4093      	lsls	r3, r2
    5836:	4304      	orrs	r4, r0
    5838:	1e58      	subs	r0, r3, #1
    583a:	4183      	sbcs	r3, r0
    583c:	431c      	orrs	r4, r3
    583e:	40f5      	lsrs	r5, r6
    5840:	0763      	lsls	r3, r4, #29
    5842:	d009      	beq.n	5858 <__aeabi_dmul+0x470>
    5844:	230f      	movs	r3, #15
    5846:	4023      	ands	r3, r4
    5848:	2b04      	cmp	r3, #4
    584a:	d005      	beq.n	5858 <__aeabi_dmul+0x470>
    584c:	0023      	movs	r3, r4
    584e:	1d1c      	adds	r4, r3, #4
    5850:	429c      	cmp	r4, r3
    5852:	4192      	sbcs	r2, r2
    5854:	4252      	negs	r2, r2
    5856:	18ad      	adds	r5, r5, r2
    5858:	022b      	lsls	r3, r5, #8
    585a:	d51f      	bpl.n	589c <__aeabi_dmul+0x4b4>
    585c:	2401      	movs	r4, #1
    585e:	2200      	movs	r2, #0
    5860:	400c      	ands	r4, r1
    5862:	2301      	movs	r3, #1
    5864:	2500      	movs	r5, #0
    5866:	4690      	mov	r8, r2
    5868:	e624      	b.n	54b4 <__aeabi_dmul+0xcc>
    586a:	201f      	movs	r0, #31
    586c:	002c      	movs	r4, r5
    586e:	4240      	negs	r0, r0
    5870:	1a82      	subs	r2, r0, r2
    5872:	40d4      	lsrs	r4, r2
    5874:	2e20      	cmp	r6, #32
    5876:	d01c      	beq.n	58b2 <__aeabi_dmul+0x4ca>
    5878:	2240      	movs	r2, #64	; 0x40
    587a:	1b96      	subs	r6, r2, r6
    587c:	40b5      	lsls	r5, r6
    587e:	432b      	orrs	r3, r5
    5880:	1e58      	subs	r0, r3, #1
    5882:	4183      	sbcs	r3, r0
    5884:	2007      	movs	r0, #7
    5886:	4323      	orrs	r3, r4
    5888:	4018      	ands	r0, r3
    588a:	2500      	movs	r5, #0
    588c:	2800      	cmp	r0, #0
    588e:	d009      	beq.n	58a4 <__aeabi_dmul+0x4bc>
    5890:	220f      	movs	r2, #15
    5892:	2500      	movs	r5, #0
    5894:	401a      	ands	r2, r3
    5896:	001c      	movs	r4, r3
    5898:	2a04      	cmp	r2, #4
    589a:	d1d8      	bne.n	584e <__aeabi_dmul+0x466>
    589c:	0023      	movs	r3, r4
    589e:	0768      	lsls	r0, r5, #29
    58a0:	026d      	lsls	r5, r5, #9
    58a2:	0b2d      	lsrs	r5, r5, #12
    58a4:	2401      	movs	r4, #1
    58a6:	08db      	lsrs	r3, r3, #3
    58a8:	4303      	orrs	r3, r0
    58aa:	4698      	mov	r8, r3
    58ac:	400c      	ands	r4, r1
    58ae:	2300      	movs	r3, #0
    58b0:	e600      	b.n	54b4 <__aeabi_dmul+0xcc>
    58b2:	2500      	movs	r5, #0
    58b4:	e7e3      	b.n	587e <__aeabi_dmul+0x496>
    58b6:	2280      	movs	r2, #128	; 0x80
    58b8:	2401      	movs	r4, #1
    58ba:	0312      	lsls	r2, r2, #12
    58bc:	4315      	orrs	r5, r2
    58be:	032d      	lsls	r5, r5, #12
    58c0:	4698      	mov	r8, r3
    58c2:	0b2d      	lsrs	r5, r5, #12
    58c4:	400c      	ands	r4, r1
    58c6:	4b04      	ldr	r3, [pc, #16]	; (58d8 <__aeabi_dmul+0x4f0>)
    58c8:	e5f4      	b.n	54b4 <__aeabi_dmul+0xcc>
    58ca:	46c0      	nop			; (mov r8, r8)
    58cc:	000003ff 	.word	0x000003ff
    58d0:	feffffff 	.word	0xfeffffff
    58d4:	000007fe 	.word	0x000007fe
    58d8:	000007ff 	.word	0x000007ff

000058dc <__aeabi_dsub>:
    58dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58de:	4657      	mov	r7, sl
    58e0:	464e      	mov	r6, r9
    58e2:	4645      	mov	r5, r8
    58e4:	b4e0      	push	{r5, r6, r7}
    58e6:	000e      	movs	r6, r1
    58e8:	0011      	movs	r1, r2
    58ea:	0ff2      	lsrs	r2, r6, #31
    58ec:	4692      	mov	sl, r2
    58ee:	00c5      	lsls	r5, r0, #3
    58f0:	0f42      	lsrs	r2, r0, #29
    58f2:	0318      	lsls	r0, r3, #12
    58f4:	0337      	lsls	r7, r6, #12
    58f6:	0074      	lsls	r4, r6, #1
    58f8:	0a40      	lsrs	r0, r0, #9
    58fa:	0f4e      	lsrs	r6, r1, #29
    58fc:	0a7f      	lsrs	r7, r7, #9
    58fe:	4330      	orrs	r0, r6
    5900:	4ecf      	ldr	r6, [pc, #828]	; (5c40 <__aeabi_dsub+0x364>)
    5902:	4317      	orrs	r7, r2
    5904:	005a      	lsls	r2, r3, #1
    5906:	0d64      	lsrs	r4, r4, #21
    5908:	0d52      	lsrs	r2, r2, #21
    590a:	0fdb      	lsrs	r3, r3, #31
    590c:	00c9      	lsls	r1, r1, #3
    590e:	42b2      	cmp	r2, r6
    5910:	d100      	bne.n	5914 <__aeabi_dsub+0x38>
    5912:	e0e5      	b.n	5ae0 <__aeabi_dsub+0x204>
    5914:	2601      	movs	r6, #1
    5916:	4073      	eors	r3, r6
    5918:	1aa6      	subs	r6, r4, r2
    591a:	46b4      	mov	ip, r6
    591c:	4553      	cmp	r3, sl
    591e:	d100      	bne.n	5922 <__aeabi_dsub+0x46>
    5920:	e0af      	b.n	5a82 <__aeabi_dsub+0x1a6>
    5922:	2e00      	cmp	r6, #0
    5924:	dc00      	bgt.n	5928 <__aeabi_dsub+0x4c>
    5926:	e10d      	b.n	5b44 <__aeabi_dsub+0x268>
    5928:	2a00      	cmp	r2, #0
    592a:	d13a      	bne.n	59a2 <__aeabi_dsub+0xc6>
    592c:	0003      	movs	r3, r0
    592e:	430b      	orrs	r3, r1
    5930:	d000      	beq.n	5934 <__aeabi_dsub+0x58>
    5932:	e0e4      	b.n	5afe <__aeabi_dsub+0x222>
    5934:	076b      	lsls	r3, r5, #29
    5936:	d009      	beq.n	594c <__aeabi_dsub+0x70>
    5938:	230f      	movs	r3, #15
    593a:	402b      	ands	r3, r5
    593c:	2b04      	cmp	r3, #4
    593e:	d005      	beq.n	594c <__aeabi_dsub+0x70>
    5940:	1d2b      	adds	r3, r5, #4
    5942:	42ab      	cmp	r3, r5
    5944:	41ad      	sbcs	r5, r5
    5946:	426d      	negs	r5, r5
    5948:	197f      	adds	r7, r7, r5
    594a:	001d      	movs	r5, r3
    594c:	023b      	lsls	r3, r7, #8
    594e:	d400      	bmi.n	5952 <__aeabi_dsub+0x76>
    5950:	e088      	b.n	5a64 <__aeabi_dsub+0x188>
    5952:	4bbb      	ldr	r3, [pc, #748]	; (5c40 <__aeabi_dsub+0x364>)
    5954:	3401      	adds	r4, #1
    5956:	429c      	cmp	r4, r3
    5958:	d100      	bne.n	595c <__aeabi_dsub+0x80>
    595a:	e110      	b.n	5b7e <__aeabi_dsub+0x2a2>
    595c:	003a      	movs	r2, r7
    595e:	4bb9      	ldr	r3, [pc, #740]	; (5c44 <__aeabi_dsub+0x368>)
    5960:	4651      	mov	r1, sl
    5962:	401a      	ands	r2, r3
    5964:	2301      	movs	r3, #1
    5966:	0750      	lsls	r0, r2, #29
    5968:	08ed      	lsrs	r5, r5, #3
    596a:	0252      	lsls	r2, r2, #9
    596c:	0564      	lsls	r4, r4, #21
    596e:	4305      	orrs	r5, r0
    5970:	0b12      	lsrs	r2, r2, #12
    5972:	0d64      	lsrs	r4, r4, #21
    5974:	400b      	ands	r3, r1
    5976:	2100      	movs	r1, #0
    5978:	0028      	movs	r0, r5
    597a:	0312      	lsls	r2, r2, #12
    597c:	0d0d      	lsrs	r5, r1, #20
    597e:	0b12      	lsrs	r2, r2, #12
    5980:	0564      	lsls	r4, r4, #21
    5982:	052d      	lsls	r5, r5, #20
    5984:	4315      	orrs	r5, r2
    5986:	0862      	lsrs	r2, r4, #1
    5988:	4caf      	ldr	r4, [pc, #700]	; (5c48 <__aeabi_dsub+0x36c>)
    598a:	07db      	lsls	r3, r3, #31
    598c:	402c      	ands	r4, r5
    598e:	4314      	orrs	r4, r2
    5990:	0064      	lsls	r4, r4, #1
    5992:	0864      	lsrs	r4, r4, #1
    5994:	431c      	orrs	r4, r3
    5996:	0021      	movs	r1, r4
    5998:	bc1c      	pop	{r2, r3, r4}
    599a:	4690      	mov	r8, r2
    599c:	4699      	mov	r9, r3
    599e:	46a2      	mov	sl, r4
    59a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59a2:	4ba7      	ldr	r3, [pc, #668]	; (5c40 <__aeabi_dsub+0x364>)
    59a4:	429c      	cmp	r4, r3
    59a6:	d0c5      	beq.n	5934 <__aeabi_dsub+0x58>
    59a8:	2380      	movs	r3, #128	; 0x80
    59aa:	041b      	lsls	r3, r3, #16
    59ac:	4318      	orrs	r0, r3
    59ae:	4663      	mov	r3, ip
    59b0:	2b38      	cmp	r3, #56	; 0x38
    59b2:	dd00      	ble.n	59b6 <__aeabi_dsub+0xda>
    59b4:	e0fd      	b.n	5bb2 <__aeabi_dsub+0x2d6>
    59b6:	2b1f      	cmp	r3, #31
    59b8:	dd00      	ble.n	59bc <__aeabi_dsub+0xe0>
    59ba:	e130      	b.n	5c1e <__aeabi_dsub+0x342>
    59bc:	4662      	mov	r2, ip
    59be:	2320      	movs	r3, #32
    59c0:	1a9b      	subs	r3, r3, r2
    59c2:	0002      	movs	r2, r0
    59c4:	409a      	lsls	r2, r3
    59c6:	4666      	mov	r6, ip
    59c8:	4690      	mov	r8, r2
    59ca:	000a      	movs	r2, r1
    59cc:	4099      	lsls	r1, r3
    59ce:	40f2      	lsrs	r2, r6
    59d0:	4646      	mov	r6, r8
    59d2:	1e4b      	subs	r3, r1, #1
    59d4:	4199      	sbcs	r1, r3
    59d6:	4332      	orrs	r2, r6
    59d8:	4311      	orrs	r1, r2
    59da:	4663      	mov	r3, ip
    59dc:	0002      	movs	r2, r0
    59de:	40da      	lsrs	r2, r3
    59e0:	1a69      	subs	r1, r5, r1
    59e2:	428d      	cmp	r5, r1
    59e4:	419b      	sbcs	r3, r3
    59e6:	000d      	movs	r5, r1
    59e8:	1aba      	subs	r2, r7, r2
    59ea:	425b      	negs	r3, r3
    59ec:	1ad7      	subs	r7, r2, r3
    59ee:	023b      	lsls	r3, r7, #8
    59f0:	d535      	bpl.n	5a5e <__aeabi_dsub+0x182>
    59f2:	027a      	lsls	r2, r7, #9
    59f4:	0a53      	lsrs	r3, r2, #9
    59f6:	4698      	mov	r8, r3
    59f8:	4643      	mov	r3, r8
    59fa:	2b00      	cmp	r3, #0
    59fc:	d100      	bne.n	5a00 <__aeabi_dsub+0x124>
    59fe:	e0c4      	b.n	5b8a <__aeabi_dsub+0x2ae>
    5a00:	4640      	mov	r0, r8
    5a02:	f000 fc6f 	bl	62e4 <__clzsi2>
    5a06:	0003      	movs	r3, r0
    5a08:	3b08      	subs	r3, #8
    5a0a:	2b1f      	cmp	r3, #31
    5a0c:	dd00      	ble.n	5a10 <__aeabi_dsub+0x134>
    5a0e:	e0c5      	b.n	5b9c <__aeabi_dsub+0x2c0>
    5a10:	2220      	movs	r2, #32
    5a12:	0029      	movs	r1, r5
    5a14:	1ad2      	subs	r2, r2, r3
    5a16:	4647      	mov	r7, r8
    5a18:	40d1      	lsrs	r1, r2
    5a1a:	409f      	lsls	r7, r3
    5a1c:	000a      	movs	r2, r1
    5a1e:	409d      	lsls	r5, r3
    5a20:	433a      	orrs	r2, r7
    5a22:	429c      	cmp	r4, r3
    5a24:	dd00      	ble.n	5a28 <__aeabi_dsub+0x14c>
    5a26:	e0c0      	b.n	5baa <__aeabi_dsub+0x2ce>
    5a28:	1b1c      	subs	r4, r3, r4
    5a2a:	1c63      	adds	r3, r4, #1
    5a2c:	2b1f      	cmp	r3, #31
    5a2e:	dd00      	ble.n	5a32 <__aeabi_dsub+0x156>
    5a30:	e0e4      	b.n	5bfc <__aeabi_dsub+0x320>
    5a32:	2120      	movs	r1, #32
    5a34:	0014      	movs	r4, r2
    5a36:	0028      	movs	r0, r5
    5a38:	1ac9      	subs	r1, r1, r3
    5a3a:	40d8      	lsrs	r0, r3
    5a3c:	408c      	lsls	r4, r1
    5a3e:	408d      	lsls	r5, r1
    5a40:	4304      	orrs	r4, r0
    5a42:	40da      	lsrs	r2, r3
    5a44:	1e68      	subs	r0, r5, #1
    5a46:	4185      	sbcs	r5, r0
    5a48:	0017      	movs	r7, r2
    5a4a:	4325      	orrs	r5, r4
    5a4c:	2400      	movs	r4, #0
    5a4e:	e771      	b.n	5934 <__aeabi_dsub+0x58>
    5a50:	4642      	mov	r2, r8
    5a52:	4663      	mov	r3, ip
    5a54:	431a      	orrs	r2, r3
    5a56:	d100      	bne.n	5a5a <__aeabi_dsub+0x17e>
    5a58:	e24c      	b.n	5ef4 <__aeabi_dsub+0x618>
    5a5a:	4667      	mov	r7, ip
    5a5c:	4645      	mov	r5, r8
    5a5e:	076b      	lsls	r3, r5, #29
    5a60:	d000      	beq.n	5a64 <__aeabi_dsub+0x188>
    5a62:	e769      	b.n	5938 <__aeabi_dsub+0x5c>
    5a64:	2301      	movs	r3, #1
    5a66:	4651      	mov	r1, sl
    5a68:	0778      	lsls	r0, r7, #29
    5a6a:	08ed      	lsrs	r5, r5, #3
    5a6c:	08fa      	lsrs	r2, r7, #3
    5a6e:	400b      	ands	r3, r1
    5a70:	4305      	orrs	r5, r0
    5a72:	4973      	ldr	r1, [pc, #460]	; (5c40 <__aeabi_dsub+0x364>)
    5a74:	428c      	cmp	r4, r1
    5a76:	d038      	beq.n	5aea <__aeabi_dsub+0x20e>
    5a78:	0312      	lsls	r2, r2, #12
    5a7a:	0564      	lsls	r4, r4, #21
    5a7c:	0b12      	lsrs	r2, r2, #12
    5a7e:	0d64      	lsrs	r4, r4, #21
    5a80:	e779      	b.n	5976 <__aeabi_dsub+0x9a>
    5a82:	2e00      	cmp	r6, #0
    5a84:	dc00      	bgt.n	5a88 <__aeabi_dsub+0x1ac>
    5a86:	e09a      	b.n	5bbe <__aeabi_dsub+0x2e2>
    5a88:	2a00      	cmp	r2, #0
    5a8a:	d047      	beq.n	5b1c <__aeabi_dsub+0x240>
    5a8c:	4a6c      	ldr	r2, [pc, #432]	; (5c40 <__aeabi_dsub+0x364>)
    5a8e:	4294      	cmp	r4, r2
    5a90:	d100      	bne.n	5a94 <__aeabi_dsub+0x1b8>
    5a92:	e74f      	b.n	5934 <__aeabi_dsub+0x58>
    5a94:	2280      	movs	r2, #128	; 0x80
    5a96:	0412      	lsls	r2, r2, #16
    5a98:	4310      	orrs	r0, r2
    5a9a:	4662      	mov	r2, ip
    5a9c:	2a38      	cmp	r2, #56	; 0x38
    5a9e:	dc00      	bgt.n	5aa2 <__aeabi_dsub+0x1c6>
    5aa0:	e108      	b.n	5cb4 <__aeabi_dsub+0x3d8>
    5aa2:	4301      	orrs	r1, r0
    5aa4:	1e48      	subs	r0, r1, #1
    5aa6:	4181      	sbcs	r1, r0
    5aa8:	2200      	movs	r2, #0
    5aaa:	b2c9      	uxtb	r1, r1
    5aac:	1949      	adds	r1, r1, r5
    5aae:	19d2      	adds	r2, r2, r7
    5ab0:	42a9      	cmp	r1, r5
    5ab2:	41bf      	sbcs	r7, r7
    5ab4:	000d      	movs	r5, r1
    5ab6:	427f      	negs	r7, r7
    5ab8:	18bf      	adds	r7, r7, r2
    5aba:	023a      	lsls	r2, r7, #8
    5abc:	d400      	bmi.n	5ac0 <__aeabi_dsub+0x1e4>
    5abe:	e142      	b.n	5d46 <__aeabi_dsub+0x46a>
    5ac0:	4a5f      	ldr	r2, [pc, #380]	; (5c40 <__aeabi_dsub+0x364>)
    5ac2:	3401      	adds	r4, #1
    5ac4:	4294      	cmp	r4, r2
    5ac6:	d100      	bne.n	5aca <__aeabi_dsub+0x1ee>
    5ac8:	e14e      	b.n	5d68 <__aeabi_dsub+0x48c>
    5aca:	2001      	movs	r0, #1
    5acc:	4a5d      	ldr	r2, [pc, #372]	; (5c44 <__aeabi_dsub+0x368>)
    5ace:	0869      	lsrs	r1, r5, #1
    5ad0:	403a      	ands	r2, r7
    5ad2:	4028      	ands	r0, r5
    5ad4:	4308      	orrs	r0, r1
    5ad6:	07d5      	lsls	r5, r2, #31
    5ad8:	4305      	orrs	r5, r0
    5ada:	0857      	lsrs	r7, r2, #1
    5adc:	469a      	mov	sl, r3
    5ade:	e729      	b.n	5934 <__aeabi_dsub+0x58>
    5ae0:	0006      	movs	r6, r0
    5ae2:	430e      	orrs	r6, r1
    5ae4:	d000      	beq.n	5ae8 <__aeabi_dsub+0x20c>
    5ae6:	e717      	b.n	5918 <__aeabi_dsub+0x3c>
    5ae8:	e714      	b.n	5914 <__aeabi_dsub+0x38>
    5aea:	0029      	movs	r1, r5
    5aec:	4311      	orrs	r1, r2
    5aee:	d100      	bne.n	5af2 <__aeabi_dsub+0x216>
    5af0:	e1f9      	b.n	5ee6 <__aeabi_dsub+0x60a>
    5af2:	2180      	movs	r1, #128	; 0x80
    5af4:	0309      	lsls	r1, r1, #12
    5af6:	430a      	orrs	r2, r1
    5af8:	0312      	lsls	r2, r2, #12
    5afa:	0b12      	lsrs	r2, r2, #12
    5afc:	e73b      	b.n	5976 <__aeabi_dsub+0x9a>
    5afe:	2301      	movs	r3, #1
    5b00:	425b      	negs	r3, r3
    5b02:	4698      	mov	r8, r3
    5b04:	44c4      	add	ip, r8
    5b06:	4663      	mov	r3, ip
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d172      	bne.n	5bf2 <__aeabi_dsub+0x316>
    5b0c:	1a69      	subs	r1, r5, r1
    5b0e:	428d      	cmp	r5, r1
    5b10:	419b      	sbcs	r3, r3
    5b12:	1a3f      	subs	r7, r7, r0
    5b14:	425b      	negs	r3, r3
    5b16:	1aff      	subs	r7, r7, r3
    5b18:	000d      	movs	r5, r1
    5b1a:	e768      	b.n	59ee <__aeabi_dsub+0x112>
    5b1c:	0002      	movs	r2, r0
    5b1e:	430a      	orrs	r2, r1
    5b20:	d100      	bne.n	5b24 <__aeabi_dsub+0x248>
    5b22:	e707      	b.n	5934 <__aeabi_dsub+0x58>
    5b24:	2201      	movs	r2, #1
    5b26:	4252      	negs	r2, r2
    5b28:	4690      	mov	r8, r2
    5b2a:	44c4      	add	ip, r8
    5b2c:	4662      	mov	r2, ip
    5b2e:	2a00      	cmp	r2, #0
    5b30:	d000      	beq.n	5b34 <__aeabi_dsub+0x258>
    5b32:	e0e6      	b.n	5d02 <__aeabi_dsub+0x426>
    5b34:	1869      	adds	r1, r5, r1
    5b36:	42a9      	cmp	r1, r5
    5b38:	41b6      	sbcs	r6, r6
    5b3a:	183f      	adds	r7, r7, r0
    5b3c:	4276      	negs	r6, r6
    5b3e:	19f7      	adds	r7, r6, r7
    5b40:	000d      	movs	r5, r1
    5b42:	e7ba      	b.n	5aba <__aeabi_dsub+0x1de>
    5b44:	2e00      	cmp	r6, #0
    5b46:	d000      	beq.n	5b4a <__aeabi_dsub+0x26e>
    5b48:	e080      	b.n	5c4c <__aeabi_dsub+0x370>
    5b4a:	1c62      	adds	r2, r4, #1
    5b4c:	0552      	lsls	r2, r2, #21
    5b4e:	0d52      	lsrs	r2, r2, #21
    5b50:	2a01      	cmp	r2, #1
    5b52:	dc00      	bgt.n	5b56 <__aeabi_dsub+0x27a>
    5b54:	e0f9      	b.n	5d4a <__aeabi_dsub+0x46e>
    5b56:	1a6a      	subs	r2, r5, r1
    5b58:	4691      	mov	r9, r2
    5b5a:	454d      	cmp	r5, r9
    5b5c:	41b6      	sbcs	r6, r6
    5b5e:	1a3a      	subs	r2, r7, r0
    5b60:	4276      	negs	r6, r6
    5b62:	1b92      	subs	r2, r2, r6
    5b64:	4690      	mov	r8, r2
    5b66:	0212      	lsls	r2, r2, #8
    5b68:	d400      	bmi.n	5b6c <__aeabi_dsub+0x290>
    5b6a:	e099      	b.n	5ca0 <__aeabi_dsub+0x3c4>
    5b6c:	1b4d      	subs	r5, r1, r5
    5b6e:	42a9      	cmp	r1, r5
    5b70:	4189      	sbcs	r1, r1
    5b72:	1bc7      	subs	r7, r0, r7
    5b74:	4249      	negs	r1, r1
    5b76:	1a7a      	subs	r2, r7, r1
    5b78:	4690      	mov	r8, r2
    5b7a:	469a      	mov	sl, r3
    5b7c:	e73c      	b.n	59f8 <__aeabi_dsub+0x11c>
    5b7e:	4652      	mov	r2, sl
    5b80:	2301      	movs	r3, #1
    5b82:	2500      	movs	r5, #0
    5b84:	4013      	ands	r3, r2
    5b86:	2200      	movs	r2, #0
    5b88:	e6f5      	b.n	5976 <__aeabi_dsub+0x9a>
    5b8a:	0028      	movs	r0, r5
    5b8c:	f000 fbaa 	bl	62e4 <__clzsi2>
    5b90:	3020      	adds	r0, #32
    5b92:	0003      	movs	r3, r0
    5b94:	3b08      	subs	r3, #8
    5b96:	2b1f      	cmp	r3, #31
    5b98:	dc00      	bgt.n	5b9c <__aeabi_dsub+0x2c0>
    5b9a:	e739      	b.n	5a10 <__aeabi_dsub+0x134>
    5b9c:	002a      	movs	r2, r5
    5b9e:	3828      	subs	r0, #40	; 0x28
    5ba0:	4082      	lsls	r2, r0
    5ba2:	2500      	movs	r5, #0
    5ba4:	429c      	cmp	r4, r3
    5ba6:	dc00      	bgt.n	5baa <__aeabi_dsub+0x2ce>
    5ba8:	e73e      	b.n	5a28 <__aeabi_dsub+0x14c>
    5baa:	4f26      	ldr	r7, [pc, #152]	; (5c44 <__aeabi_dsub+0x368>)
    5bac:	1ae4      	subs	r4, r4, r3
    5bae:	4017      	ands	r7, r2
    5bb0:	e6c0      	b.n	5934 <__aeabi_dsub+0x58>
    5bb2:	4301      	orrs	r1, r0
    5bb4:	1e48      	subs	r0, r1, #1
    5bb6:	4181      	sbcs	r1, r0
    5bb8:	2200      	movs	r2, #0
    5bba:	b2c9      	uxtb	r1, r1
    5bbc:	e710      	b.n	59e0 <__aeabi_dsub+0x104>
    5bbe:	2e00      	cmp	r6, #0
    5bc0:	d000      	beq.n	5bc4 <__aeabi_dsub+0x2e8>
    5bc2:	e0f1      	b.n	5da8 <__aeabi_dsub+0x4cc>
    5bc4:	1c62      	adds	r2, r4, #1
    5bc6:	4694      	mov	ip, r2
    5bc8:	0552      	lsls	r2, r2, #21
    5bca:	0d52      	lsrs	r2, r2, #21
    5bcc:	2a01      	cmp	r2, #1
    5bce:	dc00      	bgt.n	5bd2 <__aeabi_dsub+0x2f6>
    5bd0:	e0a0      	b.n	5d14 <__aeabi_dsub+0x438>
    5bd2:	4a1b      	ldr	r2, [pc, #108]	; (5c40 <__aeabi_dsub+0x364>)
    5bd4:	4594      	cmp	ip, r2
    5bd6:	d100      	bne.n	5bda <__aeabi_dsub+0x2fe>
    5bd8:	e0c5      	b.n	5d66 <__aeabi_dsub+0x48a>
    5bda:	1869      	adds	r1, r5, r1
    5bdc:	42a9      	cmp	r1, r5
    5bde:	4192      	sbcs	r2, r2
    5be0:	183f      	adds	r7, r7, r0
    5be2:	4252      	negs	r2, r2
    5be4:	19d2      	adds	r2, r2, r7
    5be6:	0849      	lsrs	r1, r1, #1
    5be8:	07d5      	lsls	r5, r2, #31
    5bea:	430d      	orrs	r5, r1
    5bec:	0857      	lsrs	r7, r2, #1
    5bee:	4664      	mov	r4, ip
    5bf0:	e6a0      	b.n	5934 <__aeabi_dsub+0x58>
    5bf2:	4b13      	ldr	r3, [pc, #76]	; (5c40 <__aeabi_dsub+0x364>)
    5bf4:	429c      	cmp	r4, r3
    5bf6:	d000      	beq.n	5bfa <__aeabi_dsub+0x31e>
    5bf8:	e6d9      	b.n	59ae <__aeabi_dsub+0xd2>
    5bfa:	e69b      	b.n	5934 <__aeabi_dsub+0x58>
    5bfc:	0011      	movs	r1, r2
    5bfe:	3c1f      	subs	r4, #31
    5c00:	40e1      	lsrs	r1, r4
    5c02:	000c      	movs	r4, r1
    5c04:	2b20      	cmp	r3, #32
    5c06:	d100      	bne.n	5c0a <__aeabi_dsub+0x32e>
    5c08:	e080      	b.n	5d0c <__aeabi_dsub+0x430>
    5c0a:	2140      	movs	r1, #64	; 0x40
    5c0c:	1acb      	subs	r3, r1, r3
    5c0e:	409a      	lsls	r2, r3
    5c10:	4315      	orrs	r5, r2
    5c12:	1e6a      	subs	r2, r5, #1
    5c14:	4195      	sbcs	r5, r2
    5c16:	2700      	movs	r7, #0
    5c18:	4325      	orrs	r5, r4
    5c1a:	2400      	movs	r4, #0
    5c1c:	e71f      	b.n	5a5e <__aeabi_dsub+0x182>
    5c1e:	4663      	mov	r3, ip
    5c20:	0002      	movs	r2, r0
    5c22:	3b20      	subs	r3, #32
    5c24:	40da      	lsrs	r2, r3
    5c26:	4663      	mov	r3, ip
    5c28:	2b20      	cmp	r3, #32
    5c2a:	d071      	beq.n	5d10 <__aeabi_dsub+0x434>
    5c2c:	2340      	movs	r3, #64	; 0x40
    5c2e:	4666      	mov	r6, ip
    5c30:	1b9b      	subs	r3, r3, r6
    5c32:	4098      	lsls	r0, r3
    5c34:	4301      	orrs	r1, r0
    5c36:	1e48      	subs	r0, r1, #1
    5c38:	4181      	sbcs	r1, r0
    5c3a:	4311      	orrs	r1, r2
    5c3c:	2200      	movs	r2, #0
    5c3e:	e6cf      	b.n	59e0 <__aeabi_dsub+0x104>
    5c40:	000007ff 	.word	0x000007ff
    5c44:	ff7fffff 	.word	0xff7fffff
    5c48:	800fffff 	.word	0x800fffff
    5c4c:	2c00      	cmp	r4, #0
    5c4e:	d048      	beq.n	5ce2 <__aeabi_dsub+0x406>
    5c50:	4cca      	ldr	r4, [pc, #808]	; (5f7c <__aeabi_dsub+0x6a0>)
    5c52:	42a2      	cmp	r2, r4
    5c54:	d100      	bne.n	5c58 <__aeabi_dsub+0x37c>
    5c56:	e0a2      	b.n	5d9e <__aeabi_dsub+0x4c2>
    5c58:	4274      	negs	r4, r6
    5c5a:	46a1      	mov	r9, r4
    5c5c:	2480      	movs	r4, #128	; 0x80
    5c5e:	0424      	lsls	r4, r4, #16
    5c60:	4327      	orrs	r7, r4
    5c62:	464c      	mov	r4, r9
    5c64:	2c38      	cmp	r4, #56	; 0x38
    5c66:	dd00      	ble.n	5c6a <__aeabi_dsub+0x38e>
    5c68:	e0db      	b.n	5e22 <__aeabi_dsub+0x546>
    5c6a:	2c1f      	cmp	r4, #31
    5c6c:	dd00      	ble.n	5c70 <__aeabi_dsub+0x394>
    5c6e:	e144      	b.n	5efa <__aeabi_dsub+0x61e>
    5c70:	464e      	mov	r6, r9
    5c72:	2420      	movs	r4, #32
    5c74:	1ba4      	subs	r4, r4, r6
    5c76:	003e      	movs	r6, r7
    5c78:	40a6      	lsls	r6, r4
    5c7a:	46a2      	mov	sl, r4
    5c7c:	46b0      	mov	r8, r6
    5c7e:	464c      	mov	r4, r9
    5c80:	002e      	movs	r6, r5
    5c82:	40e6      	lsrs	r6, r4
    5c84:	46b4      	mov	ip, r6
    5c86:	4646      	mov	r6, r8
    5c88:	4664      	mov	r4, ip
    5c8a:	4326      	orrs	r6, r4
    5c8c:	4654      	mov	r4, sl
    5c8e:	40a5      	lsls	r5, r4
    5c90:	1e6c      	subs	r4, r5, #1
    5c92:	41a5      	sbcs	r5, r4
    5c94:	0034      	movs	r4, r6
    5c96:	432c      	orrs	r4, r5
    5c98:	464d      	mov	r5, r9
    5c9a:	40ef      	lsrs	r7, r5
    5c9c:	1b0d      	subs	r5, r1, r4
    5c9e:	e028      	b.n	5cf2 <__aeabi_dsub+0x416>
    5ca0:	464a      	mov	r2, r9
    5ca2:	4643      	mov	r3, r8
    5ca4:	464d      	mov	r5, r9
    5ca6:	431a      	orrs	r2, r3
    5ca8:	d000      	beq.n	5cac <__aeabi_dsub+0x3d0>
    5caa:	e6a5      	b.n	59f8 <__aeabi_dsub+0x11c>
    5cac:	2300      	movs	r3, #0
    5cae:	2400      	movs	r4, #0
    5cb0:	2500      	movs	r5, #0
    5cb2:	e6de      	b.n	5a72 <__aeabi_dsub+0x196>
    5cb4:	2a1f      	cmp	r2, #31
    5cb6:	dc5a      	bgt.n	5d6e <__aeabi_dsub+0x492>
    5cb8:	4666      	mov	r6, ip
    5cba:	2220      	movs	r2, #32
    5cbc:	1b92      	subs	r2, r2, r6
    5cbe:	0006      	movs	r6, r0
    5cc0:	4096      	lsls	r6, r2
    5cc2:	4691      	mov	r9, r2
    5cc4:	46b0      	mov	r8, r6
    5cc6:	4662      	mov	r2, ip
    5cc8:	000e      	movs	r6, r1
    5cca:	40d6      	lsrs	r6, r2
    5ccc:	4642      	mov	r2, r8
    5cce:	4316      	orrs	r6, r2
    5cd0:	464a      	mov	r2, r9
    5cd2:	4091      	lsls	r1, r2
    5cd4:	1e4a      	subs	r2, r1, #1
    5cd6:	4191      	sbcs	r1, r2
    5cd8:	0002      	movs	r2, r0
    5cda:	4660      	mov	r0, ip
    5cdc:	4331      	orrs	r1, r6
    5cde:	40c2      	lsrs	r2, r0
    5ce0:	e6e4      	b.n	5aac <__aeabi_dsub+0x1d0>
    5ce2:	003c      	movs	r4, r7
    5ce4:	432c      	orrs	r4, r5
    5ce6:	d05a      	beq.n	5d9e <__aeabi_dsub+0x4c2>
    5ce8:	43f4      	mvns	r4, r6
    5cea:	46a1      	mov	r9, r4
    5cec:	2c00      	cmp	r4, #0
    5cee:	d152      	bne.n	5d96 <__aeabi_dsub+0x4ba>
    5cf0:	1b4d      	subs	r5, r1, r5
    5cf2:	42a9      	cmp	r1, r5
    5cf4:	4189      	sbcs	r1, r1
    5cf6:	1bc7      	subs	r7, r0, r7
    5cf8:	4249      	negs	r1, r1
    5cfa:	1a7f      	subs	r7, r7, r1
    5cfc:	0014      	movs	r4, r2
    5cfe:	469a      	mov	sl, r3
    5d00:	e675      	b.n	59ee <__aeabi_dsub+0x112>
    5d02:	4a9e      	ldr	r2, [pc, #632]	; (5f7c <__aeabi_dsub+0x6a0>)
    5d04:	4294      	cmp	r4, r2
    5d06:	d000      	beq.n	5d0a <__aeabi_dsub+0x42e>
    5d08:	e6c7      	b.n	5a9a <__aeabi_dsub+0x1be>
    5d0a:	e613      	b.n	5934 <__aeabi_dsub+0x58>
    5d0c:	2200      	movs	r2, #0
    5d0e:	e77f      	b.n	5c10 <__aeabi_dsub+0x334>
    5d10:	2000      	movs	r0, #0
    5d12:	e78f      	b.n	5c34 <__aeabi_dsub+0x358>
    5d14:	2c00      	cmp	r4, #0
    5d16:	d000      	beq.n	5d1a <__aeabi_dsub+0x43e>
    5d18:	e0c8      	b.n	5eac <__aeabi_dsub+0x5d0>
    5d1a:	003b      	movs	r3, r7
    5d1c:	432b      	orrs	r3, r5
    5d1e:	d100      	bne.n	5d22 <__aeabi_dsub+0x446>
    5d20:	e10f      	b.n	5f42 <__aeabi_dsub+0x666>
    5d22:	0003      	movs	r3, r0
    5d24:	430b      	orrs	r3, r1
    5d26:	d100      	bne.n	5d2a <__aeabi_dsub+0x44e>
    5d28:	e604      	b.n	5934 <__aeabi_dsub+0x58>
    5d2a:	1869      	adds	r1, r5, r1
    5d2c:	42a9      	cmp	r1, r5
    5d2e:	419b      	sbcs	r3, r3
    5d30:	183f      	adds	r7, r7, r0
    5d32:	425b      	negs	r3, r3
    5d34:	19df      	adds	r7, r3, r7
    5d36:	023b      	lsls	r3, r7, #8
    5d38:	d400      	bmi.n	5d3c <__aeabi_dsub+0x460>
    5d3a:	e11a      	b.n	5f72 <__aeabi_dsub+0x696>
    5d3c:	4b90      	ldr	r3, [pc, #576]	; (5f80 <__aeabi_dsub+0x6a4>)
    5d3e:	000d      	movs	r5, r1
    5d40:	401f      	ands	r7, r3
    5d42:	4664      	mov	r4, ip
    5d44:	e5f6      	b.n	5934 <__aeabi_dsub+0x58>
    5d46:	469a      	mov	sl, r3
    5d48:	e689      	b.n	5a5e <__aeabi_dsub+0x182>
    5d4a:	003a      	movs	r2, r7
    5d4c:	432a      	orrs	r2, r5
    5d4e:	2c00      	cmp	r4, #0
    5d50:	d15c      	bne.n	5e0c <__aeabi_dsub+0x530>
    5d52:	2a00      	cmp	r2, #0
    5d54:	d175      	bne.n	5e42 <__aeabi_dsub+0x566>
    5d56:	0002      	movs	r2, r0
    5d58:	430a      	orrs	r2, r1
    5d5a:	d100      	bne.n	5d5e <__aeabi_dsub+0x482>
    5d5c:	e0ca      	b.n	5ef4 <__aeabi_dsub+0x618>
    5d5e:	0007      	movs	r7, r0
    5d60:	000d      	movs	r5, r1
    5d62:	469a      	mov	sl, r3
    5d64:	e5e6      	b.n	5934 <__aeabi_dsub+0x58>
    5d66:	4664      	mov	r4, ip
    5d68:	2200      	movs	r2, #0
    5d6a:	2500      	movs	r5, #0
    5d6c:	e681      	b.n	5a72 <__aeabi_dsub+0x196>
    5d6e:	4662      	mov	r2, ip
    5d70:	0006      	movs	r6, r0
    5d72:	3a20      	subs	r2, #32
    5d74:	40d6      	lsrs	r6, r2
    5d76:	4662      	mov	r2, ip
    5d78:	46b0      	mov	r8, r6
    5d7a:	2a20      	cmp	r2, #32
    5d7c:	d100      	bne.n	5d80 <__aeabi_dsub+0x4a4>
    5d7e:	e0b7      	b.n	5ef0 <__aeabi_dsub+0x614>
    5d80:	2240      	movs	r2, #64	; 0x40
    5d82:	4666      	mov	r6, ip
    5d84:	1b92      	subs	r2, r2, r6
    5d86:	4090      	lsls	r0, r2
    5d88:	4301      	orrs	r1, r0
    5d8a:	4642      	mov	r2, r8
    5d8c:	1e48      	subs	r0, r1, #1
    5d8e:	4181      	sbcs	r1, r0
    5d90:	4311      	orrs	r1, r2
    5d92:	2200      	movs	r2, #0
    5d94:	e68a      	b.n	5aac <__aeabi_dsub+0x1d0>
    5d96:	4c79      	ldr	r4, [pc, #484]	; (5f7c <__aeabi_dsub+0x6a0>)
    5d98:	42a2      	cmp	r2, r4
    5d9a:	d000      	beq.n	5d9e <__aeabi_dsub+0x4c2>
    5d9c:	e761      	b.n	5c62 <__aeabi_dsub+0x386>
    5d9e:	0007      	movs	r7, r0
    5da0:	000d      	movs	r5, r1
    5da2:	0014      	movs	r4, r2
    5da4:	469a      	mov	sl, r3
    5da6:	e5c5      	b.n	5934 <__aeabi_dsub+0x58>
    5da8:	2c00      	cmp	r4, #0
    5daa:	d141      	bne.n	5e30 <__aeabi_dsub+0x554>
    5dac:	003c      	movs	r4, r7
    5dae:	432c      	orrs	r4, r5
    5db0:	d078      	beq.n	5ea4 <__aeabi_dsub+0x5c8>
    5db2:	43f4      	mvns	r4, r6
    5db4:	46a1      	mov	r9, r4
    5db6:	2c00      	cmp	r4, #0
    5db8:	d020      	beq.n	5dfc <__aeabi_dsub+0x520>
    5dba:	4c70      	ldr	r4, [pc, #448]	; (5f7c <__aeabi_dsub+0x6a0>)
    5dbc:	42a2      	cmp	r2, r4
    5dbe:	d071      	beq.n	5ea4 <__aeabi_dsub+0x5c8>
    5dc0:	464c      	mov	r4, r9
    5dc2:	2c38      	cmp	r4, #56	; 0x38
    5dc4:	dd00      	ble.n	5dc8 <__aeabi_dsub+0x4ec>
    5dc6:	e0b2      	b.n	5f2e <__aeabi_dsub+0x652>
    5dc8:	2c1f      	cmp	r4, #31
    5dca:	dd00      	ble.n	5dce <__aeabi_dsub+0x4f2>
    5dcc:	e0bc      	b.n	5f48 <__aeabi_dsub+0x66c>
    5dce:	2620      	movs	r6, #32
    5dd0:	1b34      	subs	r4, r6, r4
    5dd2:	46a2      	mov	sl, r4
    5dd4:	003c      	movs	r4, r7
    5dd6:	4656      	mov	r6, sl
    5dd8:	40b4      	lsls	r4, r6
    5dda:	464e      	mov	r6, r9
    5ddc:	46a0      	mov	r8, r4
    5dde:	002c      	movs	r4, r5
    5de0:	40f4      	lsrs	r4, r6
    5de2:	46a4      	mov	ip, r4
    5de4:	4644      	mov	r4, r8
    5de6:	4666      	mov	r6, ip
    5de8:	4334      	orrs	r4, r6
    5dea:	46a4      	mov	ip, r4
    5dec:	4654      	mov	r4, sl
    5dee:	40a5      	lsls	r5, r4
    5df0:	4664      	mov	r4, ip
    5df2:	1e6e      	subs	r6, r5, #1
    5df4:	41b5      	sbcs	r5, r6
    5df6:	4325      	orrs	r5, r4
    5df8:	464c      	mov	r4, r9
    5dfa:	40e7      	lsrs	r7, r4
    5dfc:	186d      	adds	r5, r5, r1
    5dfe:	428d      	cmp	r5, r1
    5e00:	4189      	sbcs	r1, r1
    5e02:	183f      	adds	r7, r7, r0
    5e04:	4249      	negs	r1, r1
    5e06:	19cf      	adds	r7, r1, r7
    5e08:	0014      	movs	r4, r2
    5e0a:	e656      	b.n	5aba <__aeabi_dsub+0x1de>
    5e0c:	2a00      	cmp	r2, #0
    5e0e:	d12f      	bne.n	5e70 <__aeabi_dsub+0x594>
    5e10:	0002      	movs	r2, r0
    5e12:	430a      	orrs	r2, r1
    5e14:	d100      	bne.n	5e18 <__aeabi_dsub+0x53c>
    5e16:	e084      	b.n	5f22 <__aeabi_dsub+0x646>
    5e18:	0007      	movs	r7, r0
    5e1a:	000d      	movs	r5, r1
    5e1c:	469a      	mov	sl, r3
    5e1e:	4c57      	ldr	r4, [pc, #348]	; (5f7c <__aeabi_dsub+0x6a0>)
    5e20:	e588      	b.n	5934 <__aeabi_dsub+0x58>
    5e22:	433d      	orrs	r5, r7
    5e24:	1e6f      	subs	r7, r5, #1
    5e26:	41bd      	sbcs	r5, r7
    5e28:	b2ec      	uxtb	r4, r5
    5e2a:	2700      	movs	r7, #0
    5e2c:	1b0d      	subs	r5, r1, r4
    5e2e:	e760      	b.n	5cf2 <__aeabi_dsub+0x416>
    5e30:	4c52      	ldr	r4, [pc, #328]	; (5f7c <__aeabi_dsub+0x6a0>)
    5e32:	42a2      	cmp	r2, r4
    5e34:	d036      	beq.n	5ea4 <__aeabi_dsub+0x5c8>
    5e36:	4274      	negs	r4, r6
    5e38:	2680      	movs	r6, #128	; 0x80
    5e3a:	0436      	lsls	r6, r6, #16
    5e3c:	46a1      	mov	r9, r4
    5e3e:	4337      	orrs	r7, r6
    5e40:	e7be      	b.n	5dc0 <__aeabi_dsub+0x4e4>
    5e42:	0002      	movs	r2, r0
    5e44:	430a      	orrs	r2, r1
    5e46:	d100      	bne.n	5e4a <__aeabi_dsub+0x56e>
    5e48:	e574      	b.n	5934 <__aeabi_dsub+0x58>
    5e4a:	1a6a      	subs	r2, r5, r1
    5e4c:	4690      	mov	r8, r2
    5e4e:	4545      	cmp	r5, r8
    5e50:	41b6      	sbcs	r6, r6
    5e52:	1a3a      	subs	r2, r7, r0
    5e54:	4276      	negs	r6, r6
    5e56:	1b92      	subs	r2, r2, r6
    5e58:	4694      	mov	ip, r2
    5e5a:	0212      	lsls	r2, r2, #8
    5e5c:	d400      	bmi.n	5e60 <__aeabi_dsub+0x584>
    5e5e:	e5f7      	b.n	5a50 <__aeabi_dsub+0x174>
    5e60:	1b4d      	subs	r5, r1, r5
    5e62:	42a9      	cmp	r1, r5
    5e64:	4189      	sbcs	r1, r1
    5e66:	1bc7      	subs	r7, r0, r7
    5e68:	4249      	negs	r1, r1
    5e6a:	1a7f      	subs	r7, r7, r1
    5e6c:	469a      	mov	sl, r3
    5e6e:	e561      	b.n	5934 <__aeabi_dsub+0x58>
    5e70:	0002      	movs	r2, r0
    5e72:	430a      	orrs	r2, r1
    5e74:	d03a      	beq.n	5eec <__aeabi_dsub+0x610>
    5e76:	08ed      	lsrs	r5, r5, #3
    5e78:	077c      	lsls	r4, r7, #29
    5e7a:	432c      	orrs	r4, r5
    5e7c:	2580      	movs	r5, #128	; 0x80
    5e7e:	08fa      	lsrs	r2, r7, #3
    5e80:	032d      	lsls	r5, r5, #12
    5e82:	422a      	tst	r2, r5
    5e84:	d008      	beq.n	5e98 <__aeabi_dsub+0x5bc>
    5e86:	08c7      	lsrs	r7, r0, #3
    5e88:	422f      	tst	r7, r5
    5e8a:	d105      	bne.n	5e98 <__aeabi_dsub+0x5bc>
    5e8c:	0745      	lsls	r5, r0, #29
    5e8e:	002c      	movs	r4, r5
    5e90:	003a      	movs	r2, r7
    5e92:	469a      	mov	sl, r3
    5e94:	08c9      	lsrs	r1, r1, #3
    5e96:	430c      	orrs	r4, r1
    5e98:	0f67      	lsrs	r7, r4, #29
    5e9a:	00d2      	lsls	r2, r2, #3
    5e9c:	00e5      	lsls	r5, r4, #3
    5e9e:	4317      	orrs	r7, r2
    5ea0:	4c36      	ldr	r4, [pc, #216]	; (5f7c <__aeabi_dsub+0x6a0>)
    5ea2:	e547      	b.n	5934 <__aeabi_dsub+0x58>
    5ea4:	0007      	movs	r7, r0
    5ea6:	000d      	movs	r5, r1
    5ea8:	0014      	movs	r4, r2
    5eaa:	e543      	b.n	5934 <__aeabi_dsub+0x58>
    5eac:	003a      	movs	r2, r7
    5eae:	432a      	orrs	r2, r5
    5eb0:	d043      	beq.n	5f3a <__aeabi_dsub+0x65e>
    5eb2:	0002      	movs	r2, r0
    5eb4:	430a      	orrs	r2, r1
    5eb6:	d019      	beq.n	5eec <__aeabi_dsub+0x610>
    5eb8:	08ed      	lsrs	r5, r5, #3
    5eba:	077c      	lsls	r4, r7, #29
    5ebc:	432c      	orrs	r4, r5
    5ebe:	2580      	movs	r5, #128	; 0x80
    5ec0:	08fa      	lsrs	r2, r7, #3
    5ec2:	032d      	lsls	r5, r5, #12
    5ec4:	422a      	tst	r2, r5
    5ec6:	d007      	beq.n	5ed8 <__aeabi_dsub+0x5fc>
    5ec8:	08c6      	lsrs	r6, r0, #3
    5eca:	422e      	tst	r6, r5
    5ecc:	d104      	bne.n	5ed8 <__aeabi_dsub+0x5fc>
    5ece:	0747      	lsls	r7, r0, #29
    5ed0:	003c      	movs	r4, r7
    5ed2:	0032      	movs	r2, r6
    5ed4:	08c9      	lsrs	r1, r1, #3
    5ed6:	430c      	orrs	r4, r1
    5ed8:	00d7      	lsls	r7, r2, #3
    5eda:	0f62      	lsrs	r2, r4, #29
    5edc:	00e5      	lsls	r5, r4, #3
    5ede:	4317      	orrs	r7, r2
    5ee0:	469a      	mov	sl, r3
    5ee2:	4c26      	ldr	r4, [pc, #152]	; (5f7c <__aeabi_dsub+0x6a0>)
    5ee4:	e526      	b.n	5934 <__aeabi_dsub+0x58>
    5ee6:	2200      	movs	r2, #0
    5ee8:	2500      	movs	r5, #0
    5eea:	e544      	b.n	5976 <__aeabi_dsub+0x9a>
    5eec:	4c23      	ldr	r4, [pc, #140]	; (5f7c <__aeabi_dsub+0x6a0>)
    5eee:	e521      	b.n	5934 <__aeabi_dsub+0x58>
    5ef0:	2000      	movs	r0, #0
    5ef2:	e749      	b.n	5d88 <__aeabi_dsub+0x4ac>
    5ef4:	2300      	movs	r3, #0
    5ef6:	2500      	movs	r5, #0
    5ef8:	e5bb      	b.n	5a72 <__aeabi_dsub+0x196>
    5efa:	464c      	mov	r4, r9
    5efc:	003e      	movs	r6, r7
    5efe:	3c20      	subs	r4, #32
    5f00:	40e6      	lsrs	r6, r4
    5f02:	464c      	mov	r4, r9
    5f04:	46b4      	mov	ip, r6
    5f06:	2c20      	cmp	r4, #32
    5f08:	d031      	beq.n	5f6e <__aeabi_dsub+0x692>
    5f0a:	2440      	movs	r4, #64	; 0x40
    5f0c:	464e      	mov	r6, r9
    5f0e:	1ba6      	subs	r6, r4, r6
    5f10:	40b7      	lsls	r7, r6
    5f12:	433d      	orrs	r5, r7
    5f14:	1e6c      	subs	r4, r5, #1
    5f16:	41a5      	sbcs	r5, r4
    5f18:	4664      	mov	r4, ip
    5f1a:	432c      	orrs	r4, r5
    5f1c:	2700      	movs	r7, #0
    5f1e:	1b0d      	subs	r5, r1, r4
    5f20:	e6e7      	b.n	5cf2 <__aeabi_dsub+0x416>
    5f22:	2280      	movs	r2, #128	; 0x80
    5f24:	2300      	movs	r3, #0
    5f26:	0312      	lsls	r2, r2, #12
    5f28:	4c14      	ldr	r4, [pc, #80]	; (5f7c <__aeabi_dsub+0x6a0>)
    5f2a:	2500      	movs	r5, #0
    5f2c:	e5a1      	b.n	5a72 <__aeabi_dsub+0x196>
    5f2e:	433d      	orrs	r5, r7
    5f30:	1e6f      	subs	r7, r5, #1
    5f32:	41bd      	sbcs	r5, r7
    5f34:	2700      	movs	r7, #0
    5f36:	b2ed      	uxtb	r5, r5
    5f38:	e760      	b.n	5dfc <__aeabi_dsub+0x520>
    5f3a:	0007      	movs	r7, r0
    5f3c:	000d      	movs	r5, r1
    5f3e:	4c0f      	ldr	r4, [pc, #60]	; (5f7c <__aeabi_dsub+0x6a0>)
    5f40:	e4f8      	b.n	5934 <__aeabi_dsub+0x58>
    5f42:	0007      	movs	r7, r0
    5f44:	000d      	movs	r5, r1
    5f46:	e4f5      	b.n	5934 <__aeabi_dsub+0x58>
    5f48:	464e      	mov	r6, r9
    5f4a:	003c      	movs	r4, r7
    5f4c:	3e20      	subs	r6, #32
    5f4e:	40f4      	lsrs	r4, r6
    5f50:	46a0      	mov	r8, r4
    5f52:	464c      	mov	r4, r9
    5f54:	2c20      	cmp	r4, #32
    5f56:	d00e      	beq.n	5f76 <__aeabi_dsub+0x69a>
    5f58:	2440      	movs	r4, #64	; 0x40
    5f5a:	464e      	mov	r6, r9
    5f5c:	1ba4      	subs	r4, r4, r6
    5f5e:	40a7      	lsls	r7, r4
    5f60:	433d      	orrs	r5, r7
    5f62:	1e6f      	subs	r7, r5, #1
    5f64:	41bd      	sbcs	r5, r7
    5f66:	4644      	mov	r4, r8
    5f68:	2700      	movs	r7, #0
    5f6a:	4325      	orrs	r5, r4
    5f6c:	e746      	b.n	5dfc <__aeabi_dsub+0x520>
    5f6e:	2700      	movs	r7, #0
    5f70:	e7cf      	b.n	5f12 <__aeabi_dsub+0x636>
    5f72:	000d      	movs	r5, r1
    5f74:	e573      	b.n	5a5e <__aeabi_dsub+0x182>
    5f76:	2700      	movs	r7, #0
    5f78:	e7f2      	b.n	5f60 <__aeabi_dsub+0x684>
    5f7a:	46c0      	nop			; (mov r8, r8)
    5f7c:	000007ff 	.word	0x000007ff
    5f80:	ff7fffff 	.word	0xff7fffff

00005f84 <__aeabi_dcmpun>:
    5f84:	b570      	push	{r4, r5, r6, lr}
    5f86:	4e0e      	ldr	r6, [pc, #56]	; (5fc0 <__aeabi_dcmpun+0x3c>)
    5f88:	030c      	lsls	r4, r1, #12
    5f8a:	031d      	lsls	r5, r3, #12
    5f8c:	0049      	lsls	r1, r1, #1
    5f8e:	005b      	lsls	r3, r3, #1
    5f90:	0b24      	lsrs	r4, r4, #12
    5f92:	0d49      	lsrs	r1, r1, #21
    5f94:	0b2d      	lsrs	r5, r5, #12
    5f96:	0d5b      	lsrs	r3, r3, #21
    5f98:	42b1      	cmp	r1, r6
    5f9a:	d004      	beq.n	5fa6 <__aeabi_dcmpun+0x22>
    5f9c:	4908      	ldr	r1, [pc, #32]	; (5fc0 <__aeabi_dcmpun+0x3c>)
    5f9e:	2000      	movs	r0, #0
    5fa0:	428b      	cmp	r3, r1
    5fa2:	d008      	beq.n	5fb6 <__aeabi_dcmpun+0x32>
    5fa4:	bd70      	pop	{r4, r5, r6, pc}
    5fa6:	4304      	orrs	r4, r0
    5fa8:	2001      	movs	r0, #1
    5faa:	2c00      	cmp	r4, #0
    5fac:	d1fa      	bne.n	5fa4 <__aeabi_dcmpun+0x20>
    5fae:	4904      	ldr	r1, [pc, #16]	; (5fc0 <__aeabi_dcmpun+0x3c>)
    5fb0:	2000      	movs	r0, #0
    5fb2:	428b      	cmp	r3, r1
    5fb4:	d1f6      	bne.n	5fa4 <__aeabi_dcmpun+0x20>
    5fb6:	4315      	orrs	r5, r2
    5fb8:	0028      	movs	r0, r5
    5fba:	1e45      	subs	r5, r0, #1
    5fbc:	41a8      	sbcs	r0, r5
    5fbe:	e7f1      	b.n	5fa4 <__aeabi_dcmpun+0x20>
    5fc0:	000007ff 	.word	0x000007ff

00005fc4 <__aeabi_d2iz>:
    5fc4:	030b      	lsls	r3, r1, #12
    5fc6:	b530      	push	{r4, r5, lr}
    5fc8:	4d13      	ldr	r5, [pc, #76]	; (6018 <__aeabi_d2iz+0x54>)
    5fca:	0b1a      	lsrs	r2, r3, #12
    5fcc:	004b      	lsls	r3, r1, #1
    5fce:	0d5b      	lsrs	r3, r3, #21
    5fd0:	0fc9      	lsrs	r1, r1, #31
    5fd2:	2400      	movs	r4, #0
    5fd4:	42ab      	cmp	r3, r5
    5fd6:	dd11      	ble.n	5ffc <__aeabi_d2iz+0x38>
    5fd8:	4c10      	ldr	r4, [pc, #64]	; (601c <__aeabi_d2iz+0x58>)
    5fda:	42a3      	cmp	r3, r4
    5fdc:	dc10      	bgt.n	6000 <__aeabi_d2iz+0x3c>
    5fde:	2480      	movs	r4, #128	; 0x80
    5fe0:	0364      	lsls	r4, r4, #13
    5fe2:	4322      	orrs	r2, r4
    5fe4:	4c0e      	ldr	r4, [pc, #56]	; (6020 <__aeabi_d2iz+0x5c>)
    5fe6:	1ae4      	subs	r4, r4, r3
    5fe8:	2c1f      	cmp	r4, #31
    5fea:	dd0c      	ble.n	6006 <__aeabi_d2iz+0x42>
    5fec:	480d      	ldr	r0, [pc, #52]	; (6024 <__aeabi_d2iz+0x60>)
    5fee:	1ac3      	subs	r3, r0, r3
    5ff0:	40da      	lsrs	r2, r3
    5ff2:	0013      	movs	r3, r2
    5ff4:	425c      	negs	r4, r3
    5ff6:	2900      	cmp	r1, #0
    5ff8:	d100      	bne.n	5ffc <__aeabi_d2iz+0x38>
    5ffa:	001c      	movs	r4, r3
    5ffc:	0020      	movs	r0, r4
    5ffe:	bd30      	pop	{r4, r5, pc}
    6000:	4b09      	ldr	r3, [pc, #36]	; (6028 <__aeabi_d2iz+0x64>)
    6002:	18cc      	adds	r4, r1, r3
    6004:	e7fa      	b.n	5ffc <__aeabi_d2iz+0x38>
    6006:	40e0      	lsrs	r0, r4
    6008:	4c08      	ldr	r4, [pc, #32]	; (602c <__aeabi_d2iz+0x68>)
    600a:	46a4      	mov	ip, r4
    600c:	4463      	add	r3, ip
    600e:	409a      	lsls	r2, r3
    6010:	0013      	movs	r3, r2
    6012:	4303      	orrs	r3, r0
    6014:	e7ee      	b.n	5ff4 <__aeabi_d2iz+0x30>
    6016:	46c0      	nop			; (mov r8, r8)
    6018:	000003fe 	.word	0x000003fe
    601c:	0000041d 	.word	0x0000041d
    6020:	00000433 	.word	0x00000433
    6024:	00000413 	.word	0x00000413
    6028:	7fffffff 	.word	0x7fffffff
    602c:	fffffbed 	.word	0xfffffbed

00006030 <__aeabi_i2d>:
    6030:	b570      	push	{r4, r5, r6, lr}
    6032:	2800      	cmp	r0, #0
    6034:	d030      	beq.n	6098 <__aeabi_i2d+0x68>
    6036:	17c3      	asrs	r3, r0, #31
    6038:	18c4      	adds	r4, r0, r3
    603a:	405c      	eors	r4, r3
    603c:	0fc5      	lsrs	r5, r0, #31
    603e:	0020      	movs	r0, r4
    6040:	f000 f950 	bl	62e4 <__clzsi2>
    6044:	4b17      	ldr	r3, [pc, #92]	; (60a4 <__aeabi_i2d+0x74>)
    6046:	4a18      	ldr	r2, [pc, #96]	; (60a8 <__aeabi_i2d+0x78>)
    6048:	1a1b      	subs	r3, r3, r0
    604a:	1ad2      	subs	r2, r2, r3
    604c:	2a1f      	cmp	r2, #31
    604e:	dd18      	ble.n	6082 <__aeabi_i2d+0x52>
    6050:	4a16      	ldr	r2, [pc, #88]	; (60ac <__aeabi_i2d+0x7c>)
    6052:	1ad2      	subs	r2, r2, r3
    6054:	4094      	lsls	r4, r2
    6056:	2200      	movs	r2, #0
    6058:	0324      	lsls	r4, r4, #12
    605a:	055b      	lsls	r3, r3, #21
    605c:	0b24      	lsrs	r4, r4, #12
    605e:	0d5b      	lsrs	r3, r3, #21
    6060:	2100      	movs	r1, #0
    6062:	0010      	movs	r0, r2
    6064:	0324      	lsls	r4, r4, #12
    6066:	0d0a      	lsrs	r2, r1, #20
    6068:	0512      	lsls	r2, r2, #20
    606a:	0b24      	lsrs	r4, r4, #12
    606c:	4314      	orrs	r4, r2
    606e:	4a10      	ldr	r2, [pc, #64]	; (60b0 <__aeabi_i2d+0x80>)
    6070:	051b      	lsls	r3, r3, #20
    6072:	4014      	ands	r4, r2
    6074:	431c      	orrs	r4, r3
    6076:	0064      	lsls	r4, r4, #1
    6078:	07ed      	lsls	r5, r5, #31
    607a:	0864      	lsrs	r4, r4, #1
    607c:	432c      	orrs	r4, r5
    607e:	0021      	movs	r1, r4
    6080:	bd70      	pop	{r4, r5, r6, pc}
    6082:	0021      	movs	r1, r4
    6084:	4091      	lsls	r1, r2
    6086:	000a      	movs	r2, r1
    6088:	210b      	movs	r1, #11
    608a:	1a08      	subs	r0, r1, r0
    608c:	40c4      	lsrs	r4, r0
    608e:	055b      	lsls	r3, r3, #21
    6090:	0324      	lsls	r4, r4, #12
    6092:	0b24      	lsrs	r4, r4, #12
    6094:	0d5b      	lsrs	r3, r3, #21
    6096:	e7e3      	b.n	6060 <__aeabi_i2d+0x30>
    6098:	2500      	movs	r5, #0
    609a:	2300      	movs	r3, #0
    609c:	2400      	movs	r4, #0
    609e:	2200      	movs	r2, #0
    60a0:	e7de      	b.n	6060 <__aeabi_i2d+0x30>
    60a2:	46c0      	nop			; (mov r8, r8)
    60a4:	0000041e 	.word	0x0000041e
    60a8:	00000433 	.word	0x00000433
    60ac:	00000413 	.word	0x00000413
    60b0:	800fffff 	.word	0x800fffff

000060b4 <__aeabi_ui2d>:
    60b4:	b570      	push	{r4, r5, r6, lr}
    60b6:	1e05      	subs	r5, r0, #0
    60b8:	d028      	beq.n	610c <__aeabi_ui2d+0x58>
    60ba:	f000 f913 	bl	62e4 <__clzsi2>
    60be:	4b15      	ldr	r3, [pc, #84]	; (6114 <__aeabi_ui2d+0x60>)
    60c0:	4a15      	ldr	r2, [pc, #84]	; (6118 <__aeabi_ui2d+0x64>)
    60c2:	1a1b      	subs	r3, r3, r0
    60c4:	1ad2      	subs	r2, r2, r3
    60c6:	2a1f      	cmp	r2, #31
    60c8:	dd16      	ble.n	60f8 <__aeabi_ui2d+0x44>
    60ca:	002c      	movs	r4, r5
    60cc:	4a13      	ldr	r2, [pc, #76]	; (611c <__aeabi_ui2d+0x68>)
    60ce:	2500      	movs	r5, #0
    60d0:	1ad2      	subs	r2, r2, r3
    60d2:	4094      	lsls	r4, r2
    60d4:	055a      	lsls	r2, r3, #21
    60d6:	0324      	lsls	r4, r4, #12
    60d8:	0b24      	lsrs	r4, r4, #12
    60da:	0d52      	lsrs	r2, r2, #21
    60dc:	2100      	movs	r1, #0
    60de:	0324      	lsls	r4, r4, #12
    60e0:	0d0b      	lsrs	r3, r1, #20
    60e2:	0b24      	lsrs	r4, r4, #12
    60e4:	051b      	lsls	r3, r3, #20
    60e6:	4323      	orrs	r3, r4
    60e8:	4c0d      	ldr	r4, [pc, #52]	; (6120 <__aeabi_ui2d+0x6c>)
    60ea:	0512      	lsls	r2, r2, #20
    60ec:	4023      	ands	r3, r4
    60ee:	4313      	orrs	r3, r2
    60f0:	005b      	lsls	r3, r3, #1
    60f2:	0028      	movs	r0, r5
    60f4:	0859      	lsrs	r1, r3, #1
    60f6:	bd70      	pop	{r4, r5, r6, pc}
    60f8:	210b      	movs	r1, #11
    60fa:	002c      	movs	r4, r5
    60fc:	1a08      	subs	r0, r1, r0
    60fe:	40c4      	lsrs	r4, r0
    6100:	4095      	lsls	r5, r2
    6102:	0324      	lsls	r4, r4, #12
    6104:	055a      	lsls	r2, r3, #21
    6106:	0b24      	lsrs	r4, r4, #12
    6108:	0d52      	lsrs	r2, r2, #21
    610a:	e7e7      	b.n	60dc <__aeabi_ui2d+0x28>
    610c:	2200      	movs	r2, #0
    610e:	2400      	movs	r4, #0
    6110:	e7e4      	b.n	60dc <__aeabi_ui2d+0x28>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	0000041e 	.word	0x0000041e
    6118:	00000433 	.word	0x00000433
    611c:	00000413 	.word	0x00000413
    6120:	800fffff 	.word	0x800fffff

00006124 <__aeabi_f2d>:
    6124:	0042      	lsls	r2, r0, #1
    6126:	0e12      	lsrs	r2, r2, #24
    6128:	1c51      	adds	r1, r2, #1
    612a:	0243      	lsls	r3, r0, #9
    612c:	b2c9      	uxtb	r1, r1
    612e:	b570      	push	{r4, r5, r6, lr}
    6130:	0a5d      	lsrs	r5, r3, #9
    6132:	0fc4      	lsrs	r4, r0, #31
    6134:	2901      	cmp	r1, #1
    6136:	dd15      	ble.n	6164 <__aeabi_f2d+0x40>
    6138:	21e0      	movs	r1, #224	; 0xe0
    613a:	0089      	lsls	r1, r1, #2
    613c:	468c      	mov	ip, r1
    613e:	076d      	lsls	r5, r5, #29
    6140:	0b1b      	lsrs	r3, r3, #12
    6142:	4462      	add	r2, ip
    6144:	2100      	movs	r1, #0
    6146:	0028      	movs	r0, r5
    6148:	0d0d      	lsrs	r5, r1, #20
    614a:	052d      	lsls	r5, r5, #20
    614c:	432b      	orrs	r3, r5
    614e:	4d1c      	ldr	r5, [pc, #112]	; (61c0 <__aeabi_f2d+0x9c>)
    6150:	0552      	lsls	r2, r2, #21
    6152:	402b      	ands	r3, r5
    6154:	0852      	lsrs	r2, r2, #1
    6156:	4313      	orrs	r3, r2
    6158:	005b      	lsls	r3, r3, #1
    615a:	07e4      	lsls	r4, r4, #31
    615c:	085b      	lsrs	r3, r3, #1
    615e:	4323      	orrs	r3, r4
    6160:	0019      	movs	r1, r3
    6162:	bd70      	pop	{r4, r5, r6, pc}
    6164:	2a00      	cmp	r2, #0
    6166:	d115      	bne.n	6194 <__aeabi_f2d+0x70>
    6168:	2d00      	cmp	r5, #0
    616a:	d01f      	beq.n	61ac <__aeabi_f2d+0x88>
    616c:	0028      	movs	r0, r5
    616e:	f000 f8b9 	bl	62e4 <__clzsi2>
    6172:	280a      	cmp	r0, #10
    6174:	dc1d      	bgt.n	61b2 <__aeabi_f2d+0x8e>
    6176:	230b      	movs	r3, #11
    6178:	002a      	movs	r2, r5
    617a:	1a1b      	subs	r3, r3, r0
    617c:	40da      	lsrs	r2, r3
    617e:	0013      	movs	r3, r2
    6180:	0002      	movs	r2, r0
    6182:	3215      	adds	r2, #21
    6184:	4095      	lsls	r5, r2
    6186:	4a0f      	ldr	r2, [pc, #60]	; (61c4 <__aeabi_f2d+0xa0>)
    6188:	031b      	lsls	r3, r3, #12
    618a:	1a12      	subs	r2, r2, r0
    618c:	0552      	lsls	r2, r2, #21
    618e:	0b1b      	lsrs	r3, r3, #12
    6190:	0d52      	lsrs	r2, r2, #21
    6192:	e7d7      	b.n	6144 <__aeabi_f2d+0x20>
    6194:	2d00      	cmp	r5, #0
    6196:	d006      	beq.n	61a6 <__aeabi_f2d+0x82>
    6198:	2280      	movs	r2, #128	; 0x80
    619a:	0b1b      	lsrs	r3, r3, #12
    619c:	0312      	lsls	r2, r2, #12
    619e:	4313      	orrs	r3, r2
    61a0:	076d      	lsls	r5, r5, #29
    61a2:	4a09      	ldr	r2, [pc, #36]	; (61c8 <__aeabi_f2d+0xa4>)
    61a4:	e7ce      	b.n	6144 <__aeabi_f2d+0x20>
    61a6:	4a08      	ldr	r2, [pc, #32]	; (61c8 <__aeabi_f2d+0xa4>)
    61a8:	2300      	movs	r3, #0
    61aa:	e7cb      	b.n	6144 <__aeabi_f2d+0x20>
    61ac:	2200      	movs	r2, #0
    61ae:	2300      	movs	r3, #0
    61b0:	e7c8      	b.n	6144 <__aeabi_f2d+0x20>
    61b2:	0003      	movs	r3, r0
    61b4:	3b0b      	subs	r3, #11
    61b6:	409d      	lsls	r5, r3
    61b8:	002b      	movs	r3, r5
    61ba:	2500      	movs	r5, #0
    61bc:	e7e3      	b.n	6186 <__aeabi_f2d+0x62>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	800fffff 	.word	0x800fffff
    61c4:	00000389 	.word	0x00000389
    61c8:	000007ff 	.word	0x000007ff

000061cc <__aeabi_d2f>:
    61cc:	004b      	lsls	r3, r1, #1
    61ce:	b570      	push	{r4, r5, r6, lr}
    61d0:	0d5e      	lsrs	r6, r3, #21
    61d2:	030c      	lsls	r4, r1, #12
    61d4:	1c75      	adds	r5, r6, #1
    61d6:	0a64      	lsrs	r4, r4, #9
    61d8:	0f42      	lsrs	r2, r0, #29
    61da:	056d      	lsls	r5, r5, #21
    61dc:	4322      	orrs	r2, r4
    61de:	0fc9      	lsrs	r1, r1, #31
    61e0:	00c4      	lsls	r4, r0, #3
    61e2:	0d6d      	lsrs	r5, r5, #21
    61e4:	2d01      	cmp	r5, #1
    61e6:	dd2a      	ble.n	623e <__aeabi_d2f+0x72>
    61e8:	4b3b      	ldr	r3, [pc, #236]	; (62d8 <__aeabi_d2f+0x10c>)
    61ea:	18f3      	adds	r3, r6, r3
    61ec:	2bfe      	cmp	r3, #254	; 0xfe
    61ee:	dc1a      	bgt.n	6226 <__aeabi_d2f+0x5a>
    61f0:	2b00      	cmp	r3, #0
    61f2:	dd42      	ble.n	627a <__aeabi_d2f+0xae>
    61f4:	0180      	lsls	r0, r0, #6
    61f6:	1e45      	subs	r5, r0, #1
    61f8:	41a8      	sbcs	r0, r5
    61fa:	00d2      	lsls	r2, r2, #3
    61fc:	4310      	orrs	r0, r2
    61fe:	0f62      	lsrs	r2, r4, #29
    6200:	4302      	orrs	r2, r0
    6202:	0750      	lsls	r0, r2, #29
    6204:	d004      	beq.n	6210 <__aeabi_d2f+0x44>
    6206:	200f      	movs	r0, #15
    6208:	4010      	ands	r0, r2
    620a:	2804      	cmp	r0, #4
    620c:	d000      	beq.n	6210 <__aeabi_d2f+0x44>
    620e:	3204      	adds	r2, #4
    6210:	2080      	movs	r0, #128	; 0x80
    6212:	04c0      	lsls	r0, r0, #19
    6214:	4010      	ands	r0, r2
    6216:	d021      	beq.n	625c <__aeabi_d2f+0x90>
    6218:	3301      	adds	r3, #1
    621a:	2bff      	cmp	r3, #255	; 0xff
    621c:	d003      	beq.n	6226 <__aeabi_d2f+0x5a>
    621e:	0192      	lsls	r2, r2, #6
    6220:	0a52      	lsrs	r2, r2, #9
    6222:	b2db      	uxtb	r3, r3
    6224:	e001      	b.n	622a <__aeabi_d2f+0x5e>
    6226:	23ff      	movs	r3, #255	; 0xff
    6228:	2200      	movs	r2, #0
    622a:	0252      	lsls	r2, r2, #9
    622c:	0a52      	lsrs	r2, r2, #9
    622e:	05db      	lsls	r3, r3, #23
    6230:	4313      	orrs	r3, r2
    6232:	005b      	lsls	r3, r3, #1
    6234:	07c9      	lsls	r1, r1, #31
    6236:	085b      	lsrs	r3, r3, #1
    6238:	430b      	orrs	r3, r1
    623a:	0018      	movs	r0, r3
    623c:	bd70      	pop	{r4, r5, r6, pc}
    623e:	2e00      	cmp	r6, #0
    6240:	d007      	beq.n	6252 <__aeabi_d2f+0x86>
    6242:	4314      	orrs	r4, r2
    6244:	d0ef      	beq.n	6226 <__aeabi_d2f+0x5a>
    6246:	2080      	movs	r0, #128	; 0x80
    6248:	00d2      	lsls	r2, r2, #3
    624a:	0480      	lsls	r0, r0, #18
    624c:	4302      	orrs	r2, r0
    624e:	23ff      	movs	r3, #255	; 0xff
    6250:	e7d7      	b.n	6202 <__aeabi_d2f+0x36>
    6252:	4322      	orrs	r2, r4
    6254:	2300      	movs	r3, #0
    6256:	2a00      	cmp	r2, #0
    6258:	d003      	beq.n	6262 <__aeabi_d2f+0x96>
    625a:	2205      	movs	r2, #5
    625c:	08d2      	lsrs	r2, r2, #3
    625e:	2bff      	cmp	r3, #255	; 0xff
    6260:	d003      	beq.n	626a <__aeabi_d2f+0x9e>
    6262:	0252      	lsls	r2, r2, #9
    6264:	0a52      	lsrs	r2, r2, #9
    6266:	b2db      	uxtb	r3, r3
    6268:	e7df      	b.n	622a <__aeabi_d2f+0x5e>
    626a:	2a00      	cmp	r2, #0
    626c:	d032      	beq.n	62d4 <__aeabi_d2f+0x108>
    626e:	2080      	movs	r0, #128	; 0x80
    6270:	03c0      	lsls	r0, r0, #15
    6272:	4302      	orrs	r2, r0
    6274:	0252      	lsls	r2, r2, #9
    6276:	0a52      	lsrs	r2, r2, #9
    6278:	e7d7      	b.n	622a <__aeabi_d2f+0x5e>
    627a:	0018      	movs	r0, r3
    627c:	3017      	adds	r0, #23
    627e:	db14      	blt.n	62aa <__aeabi_d2f+0xde>
    6280:	2080      	movs	r0, #128	; 0x80
    6282:	0400      	lsls	r0, r0, #16
    6284:	4302      	orrs	r2, r0
    6286:	201e      	movs	r0, #30
    6288:	1ac0      	subs	r0, r0, r3
    628a:	281f      	cmp	r0, #31
    628c:	dc0f      	bgt.n	62ae <__aeabi_d2f+0xe2>
    628e:	0025      	movs	r5, r4
    6290:	4b12      	ldr	r3, [pc, #72]	; (62dc <__aeabi_d2f+0x110>)
    6292:	18f3      	adds	r3, r6, r3
    6294:	409d      	lsls	r5, r3
    6296:	1e6e      	subs	r6, r5, #1
    6298:	41b5      	sbcs	r5, r6
    629a:	409a      	lsls	r2, r3
    629c:	002b      	movs	r3, r5
    629e:	4313      	orrs	r3, r2
    62a0:	0022      	movs	r2, r4
    62a2:	40c2      	lsrs	r2, r0
    62a4:	431a      	orrs	r2, r3
    62a6:	2300      	movs	r3, #0
    62a8:	e7ab      	b.n	6202 <__aeabi_d2f+0x36>
    62aa:	2300      	movs	r3, #0
    62ac:	e7d5      	b.n	625a <__aeabi_d2f+0x8e>
    62ae:	2502      	movs	r5, #2
    62b0:	426d      	negs	r5, r5
    62b2:	1aeb      	subs	r3, r5, r3
    62b4:	0015      	movs	r5, r2
    62b6:	40dd      	lsrs	r5, r3
    62b8:	2820      	cmp	r0, #32
    62ba:	d009      	beq.n	62d0 <__aeabi_d2f+0x104>
    62bc:	4b08      	ldr	r3, [pc, #32]	; (62e0 <__aeabi_d2f+0x114>)
    62be:	18f3      	adds	r3, r6, r3
    62c0:	409a      	lsls	r2, r3
    62c2:	4314      	orrs	r4, r2
    62c4:	1e62      	subs	r2, r4, #1
    62c6:	4194      	sbcs	r4, r2
    62c8:	0022      	movs	r2, r4
    62ca:	2300      	movs	r3, #0
    62cc:	432a      	orrs	r2, r5
    62ce:	e798      	b.n	6202 <__aeabi_d2f+0x36>
    62d0:	2200      	movs	r2, #0
    62d2:	e7f6      	b.n	62c2 <__aeabi_d2f+0xf6>
    62d4:	2200      	movs	r2, #0
    62d6:	e7a8      	b.n	622a <__aeabi_d2f+0x5e>
    62d8:	fffffc80 	.word	0xfffffc80
    62dc:	fffffc82 	.word	0xfffffc82
    62e0:	fffffca2 	.word	0xfffffca2

000062e4 <__clzsi2>:
    62e4:	211c      	movs	r1, #28
    62e6:	2301      	movs	r3, #1
    62e8:	041b      	lsls	r3, r3, #16
    62ea:	4298      	cmp	r0, r3
    62ec:	d301      	bcc.n	62f2 <__clzsi2+0xe>
    62ee:	0c00      	lsrs	r0, r0, #16
    62f0:	3910      	subs	r1, #16
    62f2:	0a1b      	lsrs	r3, r3, #8
    62f4:	4298      	cmp	r0, r3
    62f6:	d301      	bcc.n	62fc <__clzsi2+0x18>
    62f8:	0a00      	lsrs	r0, r0, #8
    62fa:	3908      	subs	r1, #8
    62fc:	091b      	lsrs	r3, r3, #4
    62fe:	4298      	cmp	r0, r3
    6300:	d301      	bcc.n	6306 <__clzsi2+0x22>
    6302:	0900      	lsrs	r0, r0, #4
    6304:	3904      	subs	r1, #4
    6306:	a202      	add	r2, pc, #8	; (adr r2, 6310 <__clzsi2+0x2c>)
    6308:	5c10      	ldrb	r0, [r2, r0]
    630a:	1840      	adds	r0, r0, r1
    630c:	4770      	bx	lr
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	02020304 	.word	0x02020304
    6314:	01010101 	.word	0x01010101
	...

00006320 <__errno>:
    6320:	4b01      	ldr	r3, [pc, #4]	; (6328 <__errno+0x8>)
    6322:	6818      	ldr	r0, [r3, #0]
    6324:	4770      	bx	lr
    6326:	46c0      	nop			; (mov r8, r8)
    6328:	200004a0 	.word	0x200004a0

0000632c <__libc_init_array>:
    632c:	b570      	push	{r4, r5, r6, lr}
    632e:	4e0d      	ldr	r6, [pc, #52]	; (6364 <__libc_init_array+0x38>)
    6330:	4d0d      	ldr	r5, [pc, #52]	; (6368 <__libc_init_array+0x3c>)
    6332:	2400      	movs	r4, #0
    6334:	1bad      	subs	r5, r5, r6
    6336:	10ad      	asrs	r5, r5, #2
    6338:	d005      	beq.n	6346 <__libc_init_array+0x1a>
    633a:	00a3      	lsls	r3, r4, #2
    633c:	58f3      	ldr	r3, [r6, r3]
    633e:	3401      	adds	r4, #1
    6340:	4798      	blx	r3
    6342:	42a5      	cmp	r5, r4
    6344:	d1f9      	bne.n	633a <__libc_init_array+0xe>
    6346:	f000 f92f 	bl	65a8 <_init>
    634a:	4e08      	ldr	r6, [pc, #32]	; (636c <__libc_init_array+0x40>)
    634c:	4d08      	ldr	r5, [pc, #32]	; (6370 <__libc_init_array+0x44>)
    634e:	2400      	movs	r4, #0
    6350:	1bad      	subs	r5, r5, r6
    6352:	10ad      	asrs	r5, r5, #2
    6354:	d005      	beq.n	6362 <__libc_init_array+0x36>
    6356:	00a3      	lsls	r3, r4, #2
    6358:	58f3      	ldr	r3, [r6, r3]
    635a:	3401      	adds	r4, #1
    635c:	4798      	blx	r3
    635e:	42a5      	cmp	r5, r4
    6360:	d1f9      	bne.n	6356 <__libc_init_array+0x2a>
    6362:	bd70      	pop	{r4, r5, r6, pc}
    6364:	000065b4 	.word	0x000065b4
    6368:	000065b4 	.word	0x000065b4
    636c:	000065b4 	.word	0x000065b4
    6370:	000065bc 	.word	0x000065bc

00006374 <register_fini>:
    6374:	4b03      	ldr	r3, [pc, #12]	; (6384 <register_fini+0x10>)
    6376:	b510      	push	{r4, lr}
    6378:	2b00      	cmp	r3, #0
    637a:	d002      	beq.n	6382 <register_fini+0xe>
    637c:	4802      	ldr	r0, [pc, #8]	; (6388 <register_fini+0x14>)
    637e:	f000 f805 	bl	638c <atexit>
    6382:	bd10      	pop	{r4, pc}
    6384:	00000000 	.word	0x00000000
    6388:	0000639d 	.word	0x0000639d

0000638c <atexit>:
    638c:	b510      	push	{r4, lr}
    638e:	0001      	movs	r1, r0
    6390:	2300      	movs	r3, #0
    6392:	2200      	movs	r2, #0
    6394:	2000      	movs	r0, #0
    6396:	f000 f81b 	bl	63d0 <__register_exitproc>
    639a:	bd10      	pop	{r4, pc}

0000639c <__libc_fini_array>:
    639c:	b570      	push	{r4, r5, r6, lr}
    639e:	4b09      	ldr	r3, [pc, #36]	; (63c4 <__libc_fini_array+0x28>)
    63a0:	4c09      	ldr	r4, [pc, #36]	; (63c8 <__libc_fini_array+0x2c>)
    63a2:	1ae4      	subs	r4, r4, r3
    63a4:	10a4      	asrs	r4, r4, #2
    63a6:	d009      	beq.n	63bc <__libc_fini_array+0x20>
    63a8:	4a08      	ldr	r2, [pc, #32]	; (63cc <__libc_fini_array+0x30>)
    63aa:	18a5      	adds	r5, r4, r2
    63ac:	00ad      	lsls	r5, r5, #2
    63ae:	18ed      	adds	r5, r5, r3
    63b0:	682b      	ldr	r3, [r5, #0]
    63b2:	3c01      	subs	r4, #1
    63b4:	4798      	blx	r3
    63b6:	3d04      	subs	r5, #4
    63b8:	2c00      	cmp	r4, #0
    63ba:	d1f9      	bne.n	63b0 <__libc_fini_array+0x14>
    63bc:	f000 f8fe 	bl	65bc <_fini>
    63c0:	bd70      	pop	{r4, r5, r6, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	000065c8 	.word	0x000065c8
    63c8:	000065cc 	.word	0x000065cc
    63cc:	3fffffff 	.word	0x3fffffff

000063d0 <__register_exitproc>:
    63d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63d2:	4644      	mov	r4, r8
    63d4:	465f      	mov	r7, fp
    63d6:	4656      	mov	r6, sl
    63d8:	464d      	mov	r5, r9
    63da:	469b      	mov	fp, r3
    63dc:	4b2f      	ldr	r3, [pc, #188]	; (649c <__register_exitproc+0xcc>)
    63de:	b4f0      	push	{r4, r5, r6, r7}
    63e0:	681c      	ldr	r4, [r3, #0]
    63e2:	23a4      	movs	r3, #164	; 0xa4
    63e4:	005b      	lsls	r3, r3, #1
    63e6:	0005      	movs	r5, r0
    63e8:	58e0      	ldr	r0, [r4, r3]
    63ea:	000e      	movs	r6, r1
    63ec:	4690      	mov	r8, r2
    63ee:	2800      	cmp	r0, #0
    63f0:	d04b      	beq.n	648a <__register_exitproc+0xba>
    63f2:	6843      	ldr	r3, [r0, #4]
    63f4:	2b1f      	cmp	r3, #31
    63f6:	dc0d      	bgt.n	6414 <__register_exitproc+0x44>
    63f8:	1c5c      	adds	r4, r3, #1
    63fa:	2d00      	cmp	r5, #0
    63fc:	d121      	bne.n	6442 <__register_exitproc+0x72>
    63fe:	3302      	adds	r3, #2
    6400:	009b      	lsls	r3, r3, #2
    6402:	6044      	str	r4, [r0, #4]
    6404:	501e      	str	r6, [r3, r0]
    6406:	2000      	movs	r0, #0
    6408:	bc3c      	pop	{r2, r3, r4, r5}
    640a:	4690      	mov	r8, r2
    640c:	4699      	mov	r9, r3
    640e:	46a2      	mov	sl, r4
    6410:	46ab      	mov	fp, r5
    6412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6414:	4b22      	ldr	r3, [pc, #136]	; (64a0 <__register_exitproc+0xd0>)
    6416:	2b00      	cmp	r3, #0
    6418:	d03c      	beq.n	6494 <__register_exitproc+0xc4>
    641a:	20c8      	movs	r0, #200	; 0xc8
    641c:	0040      	lsls	r0, r0, #1
    641e:	e000      	b.n	6422 <__register_exitproc+0x52>
    6420:	bf00      	nop
    6422:	2800      	cmp	r0, #0
    6424:	d036      	beq.n	6494 <__register_exitproc+0xc4>
    6426:	22a4      	movs	r2, #164	; 0xa4
    6428:	2300      	movs	r3, #0
    642a:	0052      	lsls	r2, r2, #1
    642c:	58a1      	ldr	r1, [r4, r2]
    642e:	6043      	str	r3, [r0, #4]
    6430:	6001      	str	r1, [r0, #0]
    6432:	50a0      	str	r0, [r4, r2]
    6434:	3240      	adds	r2, #64	; 0x40
    6436:	5083      	str	r3, [r0, r2]
    6438:	3204      	adds	r2, #4
    643a:	5083      	str	r3, [r0, r2]
    643c:	2401      	movs	r4, #1
    643e:	2d00      	cmp	r5, #0
    6440:	d0dd      	beq.n	63fe <__register_exitproc+0x2e>
    6442:	009a      	lsls	r2, r3, #2
    6444:	4691      	mov	r9, r2
    6446:	4481      	add	r9, r0
    6448:	4642      	mov	r2, r8
    644a:	2188      	movs	r1, #136	; 0x88
    644c:	464f      	mov	r7, r9
    644e:	507a      	str	r2, [r7, r1]
    6450:	22c4      	movs	r2, #196	; 0xc4
    6452:	0052      	lsls	r2, r2, #1
    6454:	4690      	mov	r8, r2
    6456:	4480      	add	r8, r0
    6458:	4642      	mov	r2, r8
    645a:	3987      	subs	r1, #135	; 0x87
    645c:	4099      	lsls	r1, r3
    645e:	6812      	ldr	r2, [r2, #0]
    6460:	468a      	mov	sl, r1
    6462:	430a      	orrs	r2, r1
    6464:	4694      	mov	ip, r2
    6466:	4642      	mov	r2, r8
    6468:	4661      	mov	r1, ip
    646a:	6011      	str	r1, [r2, #0]
    646c:	2284      	movs	r2, #132	; 0x84
    646e:	4649      	mov	r1, r9
    6470:	465f      	mov	r7, fp
    6472:	0052      	lsls	r2, r2, #1
    6474:	508f      	str	r7, [r1, r2]
    6476:	2d02      	cmp	r5, #2
    6478:	d1c1      	bne.n	63fe <__register_exitproc+0x2e>
    647a:	0002      	movs	r2, r0
    647c:	4655      	mov	r5, sl
    647e:	328d      	adds	r2, #141	; 0x8d
    6480:	32ff      	adds	r2, #255	; 0xff
    6482:	6811      	ldr	r1, [r2, #0]
    6484:	430d      	orrs	r5, r1
    6486:	6015      	str	r5, [r2, #0]
    6488:	e7b9      	b.n	63fe <__register_exitproc+0x2e>
    648a:	0020      	movs	r0, r4
    648c:	304d      	adds	r0, #77	; 0x4d
    648e:	30ff      	adds	r0, #255	; 0xff
    6490:	50e0      	str	r0, [r4, r3]
    6492:	e7ae      	b.n	63f2 <__register_exitproc+0x22>
    6494:	2001      	movs	r0, #1
    6496:	4240      	negs	r0, r0
    6498:	e7b6      	b.n	6408 <__register_exitproc+0x38>
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	000065a4 	.word	0x000065a4
    64a0:	00000000 	.word	0x00000000

000064a4 <senseBatPin>:
    64a4:	06000000 01000106                                .....

000064a9 <senseAPin>:
    64a9:	03010001 0100010b                                .....

000064ae <senseBPin>:
    64ae:	02010001 0000010a                                .....

000064b3 <senseCPin>:
    64b3:	03000001 00000101                                .....

000064b8 <senseDPin>:
    64b8:	02000001 00000100                                .....

000064bd <analogAccelPin>:
    64bd:	07000001 70000007 0000776f 00000000     .......pow......
    64cd:	00000000                                         ...

000064d0 <TWO52>:
    64d0:	00000000 43300000 00000000 c3300000     ......0C......0.
    64e0:	000043f8 00004356 00004356 00004354     .C..VC..VC..TC..
    64f0:	000043ea 000043ea 000043e0 00004354     .C...C...C..TC..
    6500:	000043ea 000043e0 000043ea 00004354     .C...C...C..TC..
    6510:	000043f0 000043f0 000043f0 0000447a     .C...C...C..zD..
    6520:	00004d90 00004c5e 00004d64 00004c54     .M..^L..dM..TL..
    6530:	00004d64 00004d6e 00004d64 00004c54     dM..nM..dM..TL..
    6540:	00004c5e 00004c5e 00004d6e 00004c54     ^L..^L..nM..TL..
    6550:	00004c4a 00004c4a 00004c4a 00004fc0     JL..JL..JL...O..
    6560:	000055d8 00005498 00005498 00005496     .U...T...T...T..
    6570:	000055b0 000055b0 000055a2 00005496     .U...U...U...T..
    6580:	000055b0 000055a2 000055b0 00005496     .U...U...U...T..
    6590:	000055b8 000055b8 000055b8 000057b8     .U...U...U...W..
    65a0:	00000043                                C...

000065a4 <_global_impure_ptr>:
    65a4:	20000078                                x.. 

000065a8 <_init>:
    65a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65ae:	bc08      	pop	{r3}
    65b0:	469e      	mov	lr, r3
    65b2:	4770      	bx	lr

000065b4 <__init_array_start>:
    65b4:	00006375 	.word	0x00006375

000065b8 <__frame_dummy_init_array_entry>:
    65b8:	000000dd                                ....

000065bc <_fini>:
    65bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65be:	46c0      	nop			; (mov r8, r8)
    65c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65c2:	bc08      	pop	{r3}
    65c4:	469e      	mov	lr, r3
    65c6:	4770      	bx	lr

000065c8 <__fini_array_start>:
    65c8:	000000b5 	.word	0x000000b5
