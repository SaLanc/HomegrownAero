
Parabeep V0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000f64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020434  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020434  2**0
                  CONTENTS
  4 .bss          000000ac  20000438  000013a0  00020438  2**3
                  ALLOC
  5 .stack        0000c004  200004e4  0000144c  00020438  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000e1ed  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000126e  00000000  00000000  0002e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d72  00000000  00000000  0002f912  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001a0  00000000  00000000  00030684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00030824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000216f6  00000000  00000000  00030bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003fd9  00000000  00000000  000522c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000cdbc8  00000000  00000000  0005629b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000578  00000000  00000000  00123e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	e8 c4 00 20 01 05 00 00 fd 04 00 00 fd 04 00 00     ... ............
  10:	fd 04 00 00 fd 04 00 00 fd 04 00 00 00 00 00 00     ................
	...
  2c:	fd 04 00 00 fd 04 00 00 00 00 00 00 fd 04 00 00     ................
  3c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  4c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  5c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  6c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  7c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  8c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  9c:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  ac:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  bc:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  cc:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
  dc:	fd 04 00 00 fd 04 00 00 fd 04 00 00 00 00 00 00     ................
	...
  f4:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 104:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 114:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 124:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 134:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 144:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 154:	fd 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 180:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 190:	00 00 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1a0:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1b0:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1c0:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1d0:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1e0:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 1f0:	fd 04 00 00 61 04 00 00 fd 04 00 00 fd 04 00 00     ....a...........
 200:	fd 04 00 00 00 00 00 00 00 00 00 00 fd 04 00 00     ................
 210:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 220:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 230:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 240:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 250:	fd 04 00 00 fd 04 00 00 fd 04 00 00 fd 04 00 00     ................
 260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
 264:	b510      	push	{r4, lr}
 266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
 268:	7823      	ldrb	r3, [r4, #0]
 26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
 26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
 270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
 272:	f3af 8000 	nop.w
 276:	2301      	movs	r3, #1
 278:	7023      	strb	r3, [r4, #0]
 27a:	bd10      	pop	{r4, pc}
 27c:	20000438 	.word	0x20000438
 280:	00000000 	.word	0x00000000
 284:	00000f64 	.word	0x00000f64

00000288 <frame_dummy>:
 288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
 28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
 28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
 28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
 290:	b510      	push	{r4, lr}
 292:	f3af 8000 	nop.w
 296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
 298:	6803      	ldr	r3, [r0, #0]
 29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
 29c:	bd10      	pop	{r4, pc}
 29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
 2a0:	6803      	ldr	r3, [r0, #0]
 2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
 2a4:	4770      	bx	lr
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
 2a8:	2b00      	cmp	r3, #0
 2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
 2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 2b0:	4718      	bx	r3
 2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
 2b4:	2b00      	cmp	r3, #0
 2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
 2b8:	4718      	bx	r3
 2ba:	bf00      	nop
 2bc:	00000000 	.word	0x00000000
 2c0:	00000f64 	.word	0x00000f64
 2c4:	2000043c 	.word	0x2000043c
 2c8:	00000f64 	.word	0x00000f64
 2cc:	00000000 	.word	0x00000000

000002d0 <adxlReadByte>:
#include "util.h"

u8_t adxlReadByte(u8_t address) {
 2d0:	b530      	push	{r4, r5, lr}
 2d2:	b083      	sub	sp, #12
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
	PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 2d4:	4c0a      	ldr	r4, [pc, #40]	; (300 <adxlReadByte+0x30>)
 2d6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 2da:	6165      	str	r5, [r4, #20]
    pinLow(cs_accel);
    spiDataOut(SPI0, address | READ_BIT);
 2dc:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 2e0:	2000      	movs	r0, #0
 2e2:	4b08      	ldr	r3, [pc, #32]	; (304 <adxlReadByte+0x34>)
 2e4:	4798      	blx	r3
    delay_us(1);
 2e6:	2001      	movs	r0, #1
 2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <adxlReadByte+0x38>)
 2ea:	4798      	blx	r3
    volatile u8_t rx = spiDataIn(SPI0);
 2ec:	2000      	movs	r0, #0
 2ee:	4b07      	ldr	r3, [pc, #28]	; (30c <adxlReadByte+0x3c>)
 2f0:	4798      	blx	r3
 2f2:	f88d 0007 	strb.w	r0, [sp, #7]
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 2f6:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_accel);
    return rx;
 2f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 2fc:	b003      	add	sp, #12
 2fe:	bd30      	pop	{r4, r5, pc}
 300:	41008000 	.word	0x41008000
 304:	00000c59 	.word	0x00000c59
 308:	000004cd 	.word	0x000004cd
 30c:	00000d11 	.word	0x00000d11

00000310 <adxlWriteByte>:

void adxlWriteByte(u8_t address, u8_t data) {
 310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 312:	460f      	mov	r7, r1
	PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 314:	4c07      	ldr	r4, [pc, #28]	; (334 <adxlWriteByte+0x24>)
 316:	f44f 6500 	mov.w	r5, #2048	; 0x800
 31a:	6165      	str	r5, [r4, #20]
    pinLow(cs_accel);
    spiDataOut(SPI0, address);
 31c:	4601      	mov	r1, r0
 31e:	2000      	movs	r0, #0
 320:	4e05      	ldr	r6, [pc, #20]	; (338 <adxlWriteByte+0x28>)
 322:	47b0      	blx	r6
    delay_us(1);
 324:	2001      	movs	r0, #1
 326:	4b05      	ldr	r3, [pc, #20]	; (33c <adxlWriteByte+0x2c>)
 328:	4798      	blx	r3

    spiDataOut(SPI0, data);
 32a:	4639      	mov	r1, r7
 32c:	2000      	movs	r0, #0
 32e:	47b0      	blx	r6
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 330:	61a5      	str	r5, [r4, #24]
 332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 334:	41008000 	.word	0x41008000
 338:	00000c59 	.word	0x00000c59
 33c:	000004cd 	.word	0x000004cd

00000340 <enable_clock_generator_sync>:

void disconnect_gclk_from_peripheral(uint8_t gclk, uint8_t peripheral) {
    GCLK->PCHCTRL[peripheral].reg = 0;
}

static void enable_clock_generator_sync(uint8_t gclk, uint32_t source, uint16_t divisor, bool sync) {
 340:	b430      	push	{r4, r5}
    uint32_t divsel = 0;
    // The datasheet says 8 bits and max value of 512, how is that possible?
    if (divisor > 255) { // Generator 1 has 16 bits
 342:	2aff      	cmp	r2, #255	; 0xff
 344:	d81d      	bhi.n	382 <enable_clock_generator_sync+0x42>
    uint32_t divsel = 0;
 346:	2500      	movs	r5, #0
                break;
            }
        }
    }

    GCLK->GENCTRL[gclk].reg = GCLK_GENCTRL_SRC(source) | GCLK_GENCTRL_DIV(divisor) | divsel | GCLK_GENCTRL_OE | GCLK_GENCTRL_GENEN;
 348:	4604      	mov	r4, r0
 34a:	f001 010f 	and.w	r1, r1, #15
 34e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 352:	432a      	orrs	r2, r5
 354:	f442 6210 	orr.w	r2, r2, #2304	; 0x900
 358:	3008      	adds	r0, #8
 35a:	4910      	ldr	r1, [pc, #64]	; (39c <enable_clock_generator_sync+0x5c>)
 35c:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    if (sync)
 360:	b13b      	cbz	r3, 372 <enable_clock_generator_sync+0x32>
        while ((GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclk)) != 0) {}
 362:	4b0e      	ldr	r3, [pc, #56]	; (39c <enable_clock_generator_sync+0x5c>)
 364:	685b      	ldr	r3, [r3, #4]
 366:	f3c3 038b 	ubfx	r3, r3, #2, #12
 36a:	4123      	asrs	r3, r4
 36c:	f013 0f01 	tst.w	r3, #1
 370:	d1f7      	bne.n	362 <enable_clock_generator_sync+0x22>
}
 372:	bc30      	pop	{r4, r5}
 374:	4770      	bx	lr
                divisor = i - 1;
 376:	b2a2      	uxth	r2, r4
 378:	3a01      	subs	r2, #1
 37a:	b292      	uxth	r2, r2
        divsel = GCLK_GENCTRL_DIVSEL;
 37c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                break;
 380:	e7e2      	b.n	348 <enable_clock_generator_sync+0x8>
 382:	240f      	movs	r4, #15
        for (int i = 15; i > 0; i--) {
 384:	2c00      	cmp	r4, #0
 386:	dd06      	ble.n	396 <enable_clock_generator_sync+0x56>
            if (divisor & (1 << i)) {
 388:	fa42 f504 	asr.w	r5, r2, r4
 38c:	f015 0f01 	tst.w	r5, #1
 390:	d1f1      	bne.n	376 <enable_clock_generator_sync+0x36>
        for (int i = 15; i > 0; i--) {
 392:	3c01      	subs	r4, #1
 394:	e7f6      	b.n	384 <enable_clock_generator_sync+0x44>
        divsel = GCLK_GENCTRL_DIVSEL;
 396:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 39a:	e7d5      	b.n	348 <enable_clock_generator_sync+0x8>
 39c:	40001c00 	.word	0x40001c00

000003a0 <init_clock_source_osculp32k>:

static void init_clock_source_osculp32k(void) {
    // Calibration value is loaded at startup
    OSC32KCTRL->OSCULP32K.bit.EN1K = 0;
 3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <init_clock_source_osculp32k+0x14>)
 3a2:	69da      	ldr	r2, [r3, #28]
 3a4:	f36f 0282 	bfc	r2, #2, #1
 3a8:	61da      	str	r2, [r3, #28]
    OSC32KCTRL->OSCULP32K.bit.EN32K = 1;
 3aa:	69da      	ldr	r2, [r3, #28]
 3ac:	f042 0202 	orr.w	r2, r2, #2
 3b0:	61da      	str	r2, [r3, #28]
 3b2:	4770      	bx	lr
 3b4:	40001400 	.word	0x40001400

000003b8 <connect_gclk_to_peripheral>:
    GCLK->PCHCTRL[peripheral].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN(gclk);
 3b8:	f000 000f 	and.w	r0, r0, #15
 3bc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 3c0:	3120      	adds	r1, #32
 3c2:	4b04      	ldr	r3, [pc, #16]	; (3d4 <connect_gclk_to_peripheral+0x1c>)
 3c4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    while(GCLK->SYNCBUSY.reg != 0) {}
 3c8:	4b02      	ldr	r3, [pc, #8]	; (3d4 <connect_gclk_to_peripheral+0x1c>)
 3ca:	685b      	ldr	r3, [r3, #4]
 3cc:	2b00      	cmp	r3, #0
 3ce:	d1fb      	bne.n	3c8 <connect_gclk_to_peripheral+0x10>
}
 3d0:	4770      	bx	lr
 3d2:	bf00      	nop
 3d4:	40001c00 	.word	0x40001c00

000003d8 <enable_clock_generator>:
}

void enable_clock_generator(uint8_t gclk, uint32_t source, uint16_t divisor) {
 3d8:	b510      	push	{r4, lr}
    enable_clock_generator_sync(gclk, source, divisor, true);
 3da:	2301      	movs	r3, #1
 3dc:	4c01      	ldr	r4, [pc, #4]	; (3e4 <enable_clock_generator+0xc>)
 3de:	47a0      	blx	r4
 3e0:	bd10      	pop	{r4, pc}
 3e2:	bf00      	nop
 3e4:	00000341 	.word	0x00000341

000003e8 <TC2Init>:



volatile u8_t TC2Dur = 30;

void TC2Init() {
 3e8:	b508      	push	{r3, lr}

    init_clock_source_osculp32k();
 3ea:	4b16      	ldr	r3, [pc, #88]	; (444 <TC2Init+0x5c>)
 3ec:	4798      	blx	r3


    //OSC32KCTRL->RTCCTRL.bit.RTCSEL = OSC32KCTRL_RTCCTRL_RTCSEL_ULP32K_Val;


    enable_clock_generator(3, GCLK_GENCTRL_SRC_DFLL, 32);
 3ee:	2220      	movs	r2, #32
 3f0:	2106      	movs	r1, #6
 3f2:	2003      	movs	r0, #3
 3f4:	4b14      	ldr	r3, [pc, #80]	; (448 <TC2Init+0x60>)
 3f6:	4798      	blx	r3

    connect_gclk_to_peripheral(3, 26);
 3f8:	211a      	movs	r1, #26
 3fa:	2003      	movs	r0, #3
 3fc:	4b13      	ldr	r3, [pc, #76]	; (44c <TC2Init+0x64>)
 3fe:	4798      	blx	r3

    MCLK->APBBMASK.reg |= MCLK_APBBMASK_TC2;
 400:	4a13      	ldr	r2, [pc, #76]	; (450 <TC2Init+0x68>)
 402:	6993      	ldr	r3, [r2, #24]
 404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 408:	6193      	str	r3, [r2, #24]

    TC2->COUNT8.CTRLA.reg = TC_CTRLA_SWRST;
 40a:	2201      	movs	r2, #1
 40c:	4b11      	ldr	r3, [pc, #68]	; (454 <TC2Init+0x6c>)
 40e:	601a      	str	r2, [r3, #0]
    while(TC2->COUNT8.SYNCBUSY.bit.SWRST);
 410:	4b10      	ldr	r3, [pc, #64]	; (454 <TC2Init+0x6c>)
 412:	691b      	ldr	r3, [r3, #16]
 414:	f013 0f01 	tst.w	r3, #1
 418:	d1fa      	bne.n	410 <TC2Init+0x28>
    //TC0->COUNT16.CTRLBSET.reg = TC_CTRLBSET_ONESHOT;
    TC2->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
 41a:	4b0e      	ldr	r3, [pc, #56]	; (454 <TC2Init+0x6c>)
 41c:	2201      	movs	r2, #1
 41e:	725a      	strb	r2, [r3, #9]
    TC2->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
 420:	f240 2206 	movw	r2, #518	; 0x206
 424:	601a      	str	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV4 |
                            TC_CTRLA_ENABLE;
    TC2->COUNT8.PERBUF.reg = TC2Dur;
 426:	4a0c      	ldr	r2, [pc, #48]	; (458 <TC2Init+0x70>)
 428:	7812      	ldrb	r2, [r2, #0]
 42a:	b2d2      	uxtb	r2, r2
 42c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    while(TC2->COUNT8.SYNCBUSY.bit.ENABLE);
 430:	4b08      	ldr	r3, [pc, #32]	; (454 <TC2Init+0x6c>)
 432:	691b      	ldr	r3, [r3, #16]
 434:	f013 0f02 	tst.w	r3, #2
 438:	d1fa      	bne.n	430 <TC2Init+0x48>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 43a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 43e:	4b07      	ldr	r3, [pc, #28]	; (45c <TC2Init+0x74>)
 440:	60da      	str	r2, [r3, #12]
 442:	bd08      	pop	{r3, pc}
 444:	000003a1 	.word	0x000003a1
 448:	000003d9 	.word	0x000003d9
 44c:	000003b9 	.word	0x000003b9
 450:	40000800 	.word	0x40000800
 454:	4101a000 	.word	0x4101a000
 458:	20000000 	.word	0x20000000
 45c:	e000e100 	.word	0xe000e100

00000460 <TC2_Handler>:
    NVIC_EnableIRQ(TC2_IRQn);
}

void TC2_Handler(void) {
    TC2->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
 460:	2201      	movs	r2, #1
 462:	4b05      	ldr	r3, [pc, #20]	; (478 <TC2_Handler+0x18>)
 464:	729a      	strb	r2, [r3, #10]
    if (buzzing) {
 466:	4b05      	ldr	r3, [pc, #20]	; (47c <TC2_Handler+0x1c>)
 468:	781b      	ldrb	r3, [r3, #0]
 46a:	b11b      	cbz	r3, 474 <TC2_Handler+0x14>
}


inline static void pinToggle(Pin p) {
	PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
 46c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 470:	4b03      	ldr	r3, [pc, #12]	; (480 <TC2_Handler+0x20>)
 472:	61da      	str	r2, [r3, #28]
 474:	4770      	bx	lr
 476:	bf00      	nop
 478:	4101a000 	.word	0x4101a000
 47c:	20000468 	.word	0x20000468
 480:	41008000 	.word	0x41008000

00000484 <delayInit>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 484:	2200      	movs	r2, #0
 486:	4b04      	ldr	r3, [pc, #16]	; (498 <delayInit+0x14>)
 488:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23


void delayInit(void) {
    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 48c:	2205      	movs	r2, #5
 48e:	f5a3 634f 	sub.w	r3, r3, #3312	; 0xcf0
 492:	601a      	str	r2, [r3, #0]
 494:	4770      	bx	lr
 496:	bf00      	nop
 498:	e000ed00 	.word	0xe000ed00

0000049c <delay_ms>:

    }
}

void delay_ms(uint32_t n) {
    while (n--) {
 49c:	e003      	b.n	4a6 <delay_ms+0xa>
        SysTick->CTRL = 0;
 49e:	2100      	movs	r1, #0
 4a0:	4b09      	ldr	r3, [pc, #36]	; (4c8 <delay_ms+0x2c>)
 4a2:	6019      	str	r1, [r3, #0]
 4a4:	4610      	mov	r0, r2
    while (n--) {
 4a6:	1e42      	subs	r2, r0, #1
 4a8:	b168      	cbz	r0, 4c6 <delay_ms+0x2a>
        SysTick->LOAD = n;
 4aa:	4b07      	ldr	r3, [pc, #28]	; (4c8 <delay_ms+0x2c>)
 4ac:	f64b 3180 	movw	r1, #48000	; 0xbb80
 4b0:	6059      	str	r1, [r3, #4]
        SysTick->VAL = 0;
 4b2:	2100      	movs	r1, #0
 4b4:	6099      	str	r1, [r3, #8]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 4b6:	2101      	movs	r1, #1
 4b8:	6019      	str	r1, [r3, #0]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {};
 4ba:	4b03      	ldr	r3, [pc, #12]	; (4c8 <delay_ms+0x2c>)
 4bc:	681b      	ldr	r3, [r3, #0]
 4be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 4c2:	d0fa      	beq.n	4ba <delay_ms+0x1e>
 4c4:	e7eb      	b.n	49e <delay_ms+0x2>
        /* divide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
 4c6:	4770      	bx	lr
 4c8:	e000e010 	.word	0xe000e010

000004cc <delay_us>:

void delay_us(uint32_t n) {
    while (n--) {
 4cc:	e003      	b.n	4d6 <delay_us+0xa>
        SysTick->CTRL = 0;
 4ce:	2100      	movs	r1, #0
 4d0:	4b09      	ldr	r3, [pc, #36]	; (4f8 <delay_us+0x2c>)
 4d2:	6019      	str	r1, [r3, #0]
 4d4:	4610      	mov	r0, r2
    while (n--) {
 4d6:	1e42      	subs	r2, r0, #1
 4d8:	b160      	cbz	r0, 4f4 <delay_us+0x28>
        SysTick->LOAD = n;
 4da:	4b07      	ldr	r3, [pc, #28]	; (4f8 <delay_us+0x2c>)
 4dc:	2130      	movs	r1, #48	; 0x30
 4de:	6059      	str	r1, [r3, #4]
        SysTick->VAL = 0;
 4e0:	2100      	movs	r1, #0
 4e2:	6099      	str	r1, [r3, #8]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 4e4:	2101      	movs	r1, #1
 4e6:	6019      	str	r1, [r3, #0]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {};
 4e8:	4b03      	ldr	r3, [pc, #12]	; (4f8 <delay_us+0x2c>)
 4ea:	681b      	ldr	r3, [r3, #0]
 4ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 4f0:	d0fa      	beq.n	4e8 <delay_us+0x1c>
 4f2:	e7ec      	b.n	4ce <delay_us+0x2>
        /* divide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
 4f4:	4770      	bx	lr
 4f6:	bf00      	nop
 4f8:	e000e010 	.word	0xe000e010

000004fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 4fc:	e7fe      	b.n	4fc <Dummy_Handler>
	...

00000500 <Reset_Handler>:
{
 500:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
 502:	4b10      	ldr	r3, [pc, #64]	; (544 <Reset_Handler+0x44>)
 504:	4a10      	ldr	r2, [pc, #64]	; (548 <Reset_Handler+0x48>)
 506:	429a      	cmp	r2, r3
 508:	d009      	beq.n	51e <Reset_Handler+0x1e>
 50a:	4b0e      	ldr	r3, [pc, #56]	; (544 <Reset_Handler+0x44>)
 50c:	4a0e      	ldr	r2, [pc, #56]	; (548 <Reset_Handler+0x48>)
 50e:	e003      	b.n	518 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 510:	6811      	ldr	r1, [r2, #0]
 512:	6019      	str	r1, [r3, #0]
 514:	3304      	adds	r3, #4
 516:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 518:	490c      	ldr	r1, [pc, #48]	; (54c <Reset_Handler+0x4c>)
 51a:	428b      	cmp	r3, r1
 51c:	d3f8      	bcc.n	510 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 51e:	4b0c      	ldr	r3, [pc, #48]	; (550 <Reset_Handler+0x50>)
 520:	e002      	b.n	528 <Reset_Handler+0x28>
                *pDest++ = 0;
 522:	2200      	movs	r2, #0
 524:	601a      	str	r2, [r3, #0]
 526:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 528:	4a0a      	ldr	r2, [pc, #40]	; (554 <Reset_Handler+0x54>)
 52a:	4293      	cmp	r3, r2
 52c:	d3f9      	bcc.n	522 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 52e:	4a0a      	ldr	r2, [pc, #40]	; (558 <Reset_Handler+0x58>)
 530:	4b0a      	ldr	r3, [pc, #40]	; (55c <Reset_Handler+0x5c>)
 532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 536:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 538:	4b09      	ldr	r3, [pc, #36]	; (560 <Reset_Handler+0x60>)
 53a:	4798      	blx	r3
        main();
 53c:	4b09      	ldr	r3, [pc, #36]	; (564 <Reset_Handler+0x64>)
 53e:	4798      	blx	r3
 540:	e7fe      	b.n	540 <Reset_Handler+0x40>
 542:	bf00      	nop
 544:	20000000 	.word	0x20000000
 548:	00000f64 	.word	0x00000f64
 54c:	20000434 	.word	0x20000434
 550:	20000438 	.word	0x20000438
 554:	200004e4 	.word	0x200004e4
 558:	e000ed00 	.word	0xe000ed00
 55c:	00000000 	.word	0x00000000
 560:	00000dcd 	.word	0x00000dcd
 564:	00000731 	.word	0x00000731

00000568 <init>:


#include "sam.h"
#include "util.h"

void init() {
 568:	b508      	push	{r3, lr}
    delayInit();
 56a:	4b6b      	ldr	r3, [pc, #428]	; (718 <init+0x1b0>)
 56c:	4798      	blx	r3
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 56e:	4b6b      	ldr	r3, [pc, #428]	; (71c <init+0x1b4>)
 570:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 574:	f36f 0200 	bfc	r2, #0, #1
 578:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 57c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 580:	609a      	str	r2, [r3, #8]
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 582:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
 586:	f36f 0200 	bfc	r2, #0, #1
 58a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 58e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 596:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 59a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 59e:	f36f 0200 	bfc	r2, #0, #1
 5a2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 5a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 5ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 5b6:	f36f 0200 	bfc	r2, #0, #1
 5ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 5be:	f44f 7280 	mov.w	r2, #256	; 0x100
 5c2:	609a      	str	r2, [r3, #8]
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
 5c4:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 5c8:	2202      	movs	r2, #2
 5ca:	f362 0103 	bfi	r1, r2, #0, #4
 5ce:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 5d2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 5d6:	f041 0101 	orr.w	r1, r1, #1
 5da:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 5de:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 5e2:	f36f 0100 	bfc	r1, #0, #1
 5e6:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 5ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 5ee:	6099      	str	r1, [r3, #8]
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
 5f0:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 5f4:	f362 1107 	bfi	r1, r2, #4, #4
 5f8:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 5fc:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 600:	f041 0101 	orr.w	r1, r1, #1
 604:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 608:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
 60c:	f36f 0100 	bfc	r1, #0, #1
 610:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 618:	6099      	str	r1, [r3, #8]
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 61a:	6199      	str	r1, [r3, #24]
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 61c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
 620:	f36f 0100 	bfc	r1, #0, #1
 624:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 628:	2180      	movs	r1, #128	; 0x80
 62a:	6099      	str	r1, [r3, #8]
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 62c:	6199      	str	r1, [r3, #24]
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 62e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 632:	f36f 0100 	bfc	r1, #0, #1
 636:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
 63a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 63e:	4311      	orrs	r1, r2
 640:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
 644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 648:	6059      	str	r1, [r3, #4]
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
 64a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 64e:	f362 0103 	bfi	r1, r2, #0, #4
 652:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 656:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 65a:	f041 0101 	orr.w	r1, r1, #1
 65e:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 662:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
 666:	f36f 0100 	bfc	r1, #0, #1
 66a:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 66e:	2104      	movs	r1, #4
 670:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
 674:	f893 10b1 	ldrb.w	r1, [r3, #177]	; 0xb1
 678:	2003      	movs	r0, #3
 67a:	f360 0103 	bfi	r1, r0, #0, #4
 67e:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 682:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
 686:	f041 0101 	orr.w	r1, r1, #1
 68a:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 68e:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
 692:	f36f 0100 	bfc	r1, #0, #1
 696:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 69a:	2108      	movs	r1, #8
 69c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
 6a0:	f893 10b1 	ldrb.w	r1, [r3, #177]	; 0xb1
 6a4:	f360 1107 	bfi	r1, r0, #4, #4
 6a8:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 6ac:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
 6b0:	f041 0101 	orr.w	r1, r1, #1
 6b4:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 6b8:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
 6bc:	f36f 0100 	bfc	r1, #0, #1
 6c0:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
	PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 6c4:	2101      	movs	r1, #1
 6c6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 6ca:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 6ce:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
 6d2:	f36f 0100 	bfc	r1, #0, #1
 6d6:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
 6da:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
 6de:	4311      	orrs	r1, r2
 6e0:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
 6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
 6e8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 6ec:	f360 1207 	bfi	r2, r0, #4, #4
 6f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 6f4:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 6f8:	f042 0201 	orr.w	r2, r2, #1
 6fc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    pinHigh(cs_mem);
    pinIn(spi5MISO);
    pinMux(spi5MISO);


    TC2Init();
 700:	4b07      	ldr	r3, [pc, #28]	; (720 <init+0x1b8>)
 702:	4798      	blx	r3
    SPI0init(0);
 704:	2000      	movs	r0, #0
 706:	4b07      	ldr	r3, [pc, #28]	; (724 <init+0x1bc>)
 708:	4798      	blx	r3
    SPI5init(5);
 70a:	2005      	movs	r0, #5
 70c:	4b06      	ldr	r3, [pc, #24]	; (728 <init+0x1c0>)
 70e:	4798      	blx	r3

    initMS5803Barometer();
 710:	4b06      	ldr	r3, [pc, #24]	; (72c <init+0x1c4>)
 712:	4798      	blx	r3
 714:	bd08      	pop	{r3, pc}
 716:	bf00      	nop
 718:	00000485 	.word	0x00000485
 71c:	41008000 	.word	0x41008000
 720:	000003e9 	.word	0x000003e9
 724:	0000090d 	.word	0x0000090d
 728:	00000ab9 	.word	0x00000ab9
 72c:	000008dd 	.word	0x000008dd

00000730 <main>:
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);

}


int main(void) {
 730:	b500      	push	{lr}
 732:	b089      	sub	sp, #36	; 0x24

    init();
 734:	4b45      	ldr	r3, [pc, #276]	; (84c <main+0x11c>)
 736:	4798      	blx	r3

    adxlWriteByte(ADXL345_REG_POWER_CTL, 0x00);
 738:	2100      	movs	r1, #0
 73a:	202d      	movs	r0, #45	; 0x2d
 73c:	4d44      	ldr	r5, [pc, #272]	; (850 <main+0x120>)
 73e:	47a8      	blx	r5
    volatile u8_t pwr = adxlReadByte(ADXL345_REG_POWER_CTL);
 740:	202d      	movs	r0, #45	; 0x2d
 742:	4c44      	ldr	r4, [pc, #272]	; (854 <main+0x124>)
 744:	47a0      	blx	r4
 746:	f88d 001f 	strb.w	r0, [sp, #31]

    adxlWriteByte(ADXL345_REG_DATA_FORMAT, 0x03);
 74a:	2103      	movs	r1, #3
 74c:	2031      	movs	r0, #49	; 0x31
 74e:	47a8      	blx	r5
    volatile u8_t data = adxlReadByte(ADXL345_REG_DATA_FORMAT);
 750:	2031      	movs	r0, #49	; 0x31
 752:	47a0      	blx	r4
 754:	f88d 001e 	strb.w	r0, [sp, #30]

    adxlWriteByte(ADXL345_REG_FIFO_CTL, 0x00);
 758:	2100      	movs	r1, #0
 75a:	2038      	movs	r0, #56	; 0x38
 75c:	47a8      	blx	r5
    volatile u8_t fifo = adxlReadByte(ADXL345_REG_FIFO_CTL);
 75e:	2038      	movs	r0, #56	; 0x38
 760:	47a0      	blx	r4
 762:	f88d 001d 	strb.w	r0, [sp, #29]

    //adxlWriteByte(ADXL345_REG_BW_RATE, 0x0F);
    volatile u8_t rate = adxlReadByte(ADXL345_REG_BW_RATE);
 766:	202c      	movs	r0, #44	; 0x2c
 768:	47a0      	blx	r4
 76a:	f88d 001c 	strb.w	r0, [sp, #28]

    adxlWriteByte(ADXL345_REG_POWER_CTL, 0x08);
 76e:	2108      	movs	r1, #8
 770:	202d      	movs	r0, #45	; 0x2d
 772:	47a8      	blx	r5
    volatile u8_t pwr2 = adxlReadByte(ADXL345_REG_POWER_CTL);
 774:	202d      	movs	r0, #45	; 0x2d
 776:	47a0      	blx	r4
 778:	f88d 001b 	strb.w	r0, [sp, #27]

    volatile u8_t divid = adxlReadByte(ADXL345_REG_DEVID);
 77c:	2000      	movs	r0, #0
 77e:	47a0      	blx	r4
 780:	f88d 001a 	strb.w	r0, [sp, #26]
    volatile u8_t pwr4 = adxlReadByte(ADXL345_REG_POWER_CTL);
 784:	202d      	movs	r0, #45	; 0x2d
 786:	47a0      	blx	r4
 788:	f88d 0019 	strb.w	r0, [sp, #25]
    volatile u8_t data2 = adxlReadByte(ADXL345_REG_DATA_FORMAT);
 78c:	2031      	movs	r0, #49	; 0x31
 78e:	47a0      	blx	r4
 790:	f88d 0018 	strb.w	r0, [sp, #24]

    volatile u8_t fifo1 = adxlReadByte(ADXL345_REG_FIFO_STATUS);
 794:	2039      	movs	r0, #57	; 0x39
 796:	47a0      	blx	r4
 798:	f88d 0017 	strb.w	r0, [sp, #23]
	PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 79c:	4c2e      	ldr	r4, [pc, #184]	; (858 <main+0x128>)
 79e:	2501      	movs	r5, #1
 7a0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94


    pinLow(cs_mem);
    spiDataOut(SPI5, 0x9f);
 7a4:	219f      	movs	r1, #159	; 0x9f
 7a6:	2005      	movs	r0, #5
 7a8:	4b2c      	ldr	r3, [pc, #176]	; (85c <main+0x12c>)
 7aa:	4798      	blx	r3
    volatile u8_t MEMID0 = spiDataIn(SPI5);
 7ac:	2005      	movs	r0, #5
 7ae:	4e2c      	ldr	r6, [pc, #176]	; (860 <main+0x130>)
 7b0:	47b0      	blx	r6
 7b2:	f88d 0016 	strb.w	r0, [sp, #22]
    volatile u8_t MEMID1 = spiDataIn(SPI5);
 7b6:	2005      	movs	r0, #5
 7b8:	47b0      	blx	r6
 7ba:	f88d 0015 	strb.w	r0, [sp, #21]
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 7be:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98

    pinHigh(cs_mem);
    delay_ms(10);
 7c2:	200a      	movs	r0, #10
 7c4:	4b27      	ldr	r3, [pc, #156]	; (864 <main+0x134>)
 7c6:	4798      	blx	r3

    //buzzing = true;


    volatile long count = 0;
 7c8:	2300      	movs	r3, #0
 7ca:	9304      	str	r3, [sp, #16]
    while (1) {

        //getAlt();
        adxlWriteByte(ADXL345_REG_POWER_CTL, 0x08);
 7cc:	2108      	movs	r1, #8
 7ce:	202d      	movs	r0, #45	; 0x2d
 7d0:	4b1f      	ldr	r3, [pc, #124]	; (850 <main+0x120>)
 7d2:	4798      	blx	r3

        volatile u8_t junk = spiDataIn(SPI0);
 7d4:	2000      	movs	r0, #0
 7d6:	4e22      	ldr	r6, [pc, #136]	; (860 <main+0x130>)
 7d8:	47b0      	blx	r6
 7da:	f88d 0005 	strb.w	r0, [sp, #5]
	PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
 7de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 7e2:	4b1d      	ldr	r3, [pc, #116]	; (858 <main+0x128>)
 7e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        pinToggle(LedPin);
        delay_ms(50);
 7e8:	2032      	movs	r0, #50	; 0x32
 7ea:	4d1e      	ldr	r5, [pc, #120]	; (864 <main+0x134>)
 7ec:	47a8      	blx	r5

        volatile u8_t divid2 = adxlReadByte(ADXL345_REG_DEVID);
 7ee:	2000      	movs	r0, #0
 7f0:	4c18      	ldr	r4, [pc, #96]	; (854 <main+0x124>)
 7f2:	47a0      	blx	r4
 7f4:	f88d 0006 	strb.w	r0, [sp, #6]


        volatile u8_t x0 = adxlReadByte(ADXL345_REG_DATAX0);
 7f8:	2032      	movs	r0, #50	; 0x32
 7fa:	47a0      	blx	r4
 7fc:	f88d 0007 	strb.w	r0, [sp, #7]
        volatile u8_t x1 = adxlReadByte(ADXL345_REG_DATAX1);
 800:	2033      	movs	r0, #51	; 0x33
 802:	47a0      	blx	r4
 804:	f88d 0008 	strb.w	r0, [sp, #8]
        volatile u8_t y0 = adxlReadByte(ADXL345_REG_DATAY0);
 808:	2034      	movs	r0, #52	; 0x34
 80a:	47a0      	blx	r4
 80c:	f88d 0009 	strb.w	r0, [sp, #9]
        volatile u8_t y1 = adxlReadByte(ADXL345_REG_DATAY1);
 810:	2035      	movs	r0, #53	; 0x35
 812:	47a0      	blx	r4
 814:	f88d 000a 	strb.w	r0, [sp, #10]
        volatile u8_t z0 = adxlReadByte(ADXL345_REG_DATAZ0);
 818:	2036      	movs	r0, #54	; 0x36
 81a:	47a0      	blx	r4
 81c:	f88d 000b 	strb.w	r0, [sp, #11]
        volatile u8_t z1 = adxlReadByte(ADXL345_REG_DATAZ1);
 820:	2037      	movs	r0, #55	; 0x37
 822:	47a0      	blx	r4
 824:	f88d 000c 	strb.w	r0, [sp, #12]
        delay_ms(10);
 828:	200a      	movs	r0, #10
 82a:	47a8      	blx	r5
        volatile u8_t junk2 = spiDataIn(SPI0);
 82c:	2000      	movs	r0, #0
 82e:	47b0      	blx	r6
 830:	f88d 000d 	strb.w	r0, [sp, #13]

        volatile u8_t pwr3 = adxlReadByte(ADXL345_REG_POWER_CTL);
 834:	202d      	movs	r0, #45	; 0x2d
 836:	47a0      	blx	r4
 838:	f88d 000e 	strb.w	r0, [sp, #14]
        volatile u8_t pwr4 = adxlReadByte(ADXL345_REG_POWER_CTL);
 83c:	202d      	movs	r0, #45	; 0x2d
 83e:	47a0      	blx	r4
 840:	f88d 000f 	strb.w	r0, [sp, #15]



        delay_ms(500);
 844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 848:	47a8      	blx	r5
 84a:	e7bf      	b.n	7cc <main+0x9c>
 84c:	00000569 	.word	0x00000569
 850:	00000311 	.word	0x00000311
 854:	000002d1 	.word	0x000002d1
 858:	41008000 	.word	0x41008000
 85c:	00000c59 	.word	0x00000c59
 860:	00000d11 	.word	0x00000d11
 864:	0000049d 	.word	0x0000049d

00000868 <readMS5803Coefficients>:

}



void readMS5803Coefficients() {
 868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
 86c:	2401      	movs	r4, #1
 86e:	e026      	b.n	8be <readMS5803Coefficients+0x56>
		u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
 870:	f104 0550 	add.w	r5, r4, #80	; 0x50
 874:	006d      	lsls	r5, r5, #1
 876:	b2ed      	uxtb	r5, r5
	PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 878:	4f13      	ldr	r7, [pc, #76]	; (8c8 <readMS5803Coefficients+0x60>)
 87a:	f04f 0880 	mov.w	r8, #128	; 0x80
 87e:	f8c7 8014 	str.w	r8, [r7, #20]
		pinLow(cs_baro);
		delay_us(600);
 882:	f44f 7016 	mov.w	r0, #600	; 0x258
 886:	4e11      	ldr	r6, [pc, #68]	; (8cc <readMS5803Coefficients+0x64>)
 888:	47b0      	blx	r6
		spiDataOut(SPI0, _cmd);
 88a:	4629      	mov	r1, r5
 88c:	2000      	movs	r0, #0
 88e:	4b10      	ldr	r3, [pc, #64]	; (8d0 <readMS5803Coefficients+0x68>)
 890:	4798      	blx	r3
		delay_us(600);
 892:	f44f 7016 	mov.w	r0, #600	; 0x258
 896:	47b0      	blx	r6
		u8_t _byte1 = spiDataIn(SPI0);
 898:	2000      	movs	r0, #0
 89a:	4d0e      	ldr	r5, [pc, #56]	; (8d4 <readMS5803Coefficients+0x6c>)
 89c:	47a8      	blx	r5
 89e:	4681      	mov	r9, r0
		u8_t _byte2 = spiDataIn(SPI0);
 8a0:	2000      	movs	r0, #0
 8a2:	47a8      	blx	r5
 8a4:	4605      	mov	r5, r0
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 8a6:	f8c7 8018 	str.w	r8, [r7, #24]
		pinHigh(cs_baro);
		delay_us(600);
 8aa:	f44f 7016 	mov.w	r0, #600	; 0x258
 8ae:	47b0      	blx	r6

		coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
 8b0:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <readMS5803Coefficients+0x70>)
 8b6:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
 8ba:	3401      	adds	r4, #1
 8bc:	b2e4      	uxtb	r4, r4
 8be:	2c06      	cmp	r4, #6
 8c0:	d9d6      	bls.n	870 <readMS5803Coefficients+0x8>
	}

}
 8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8c6:	bf00      	nop
 8c8:	41008000 	.word	0x41008000
 8cc:	000004cd 	.word	0x000004cd
 8d0:	00000c59 	.word	0x00000c59
 8d4:	00000d11 	.word	0x00000d11
 8d8:	20000458 	.word	0x20000458

000008dc <initMS5803Barometer>:

void initMS5803Barometer() {
 8dc:	b538      	push	{r3, r4, r5, lr}
	PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 8de:	4c07      	ldr	r4, [pc, #28]	; (8fc <initMS5803Barometer+0x20>)
 8e0:	2580      	movs	r5, #128	; 0x80
 8e2:	6165      	str	r5, [r4, #20]


	pinLow(cs_baro);
	spiDataOut(SPI0, MS5803_CMD_RES);
 8e4:	211e      	movs	r1, #30
 8e6:	2000      	movs	r0, #0
 8e8:	4b05      	ldr	r3, [pc, #20]	; (900 <initMS5803Barometer+0x24>)
 8ea:	4798      	blx	r3
	PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 8ec:	61a5      	str	r5, [r4, #24]

	pinHigh(cs_baro);
	delay_ms(300);
 8ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8f2:	4b04      	ldr	r3, [pc, #16]	; (904 <initMS5803Barometer+0x28>)
 8f4:	4798      	blx	r3
	readMS5803Coefficients();
 8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <initMS5803Barometer+0x2c>)
 8f8:	4798      	blx	r3
 8fa:	bd38      	pop	{r3, r4, r5, pc}
 8fc:	41008000 	.word	0x41008000
 900:	00000c59 	.word	0x00000c59
 904:	0000049d 	.word	0x0000049d
 908:	00000869 	.word	0x00000869

0000090c <SPI0init>:
 * Created: 2/6/2021 4:42:57 PM
 *  Author: Desktop
 */
#include "util.h"

void SPI0init(u8_t id) {
 90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 910:	4604      	mov	r4, r0

    enable_clock_generator(1, GCLK_GENCTRL_SRC_DFLL, 12);
 912:	220c      	movs	r2, #12
 914:	2106      	movs	r1, #6
 916:	2001      	movs	r0, #1
 918:	4b5e      	ldr	r3, [pc, #376]	; (a94 <SPI0init+0x188>)
 91a:	4798      	blx	r3
    connect_gclk_to_peripheral(1, 7);
 91c:	2107      	movs	r1, #7
 91e:	2001      	movs	r0, #1
 920:	4b5d      	ldr	r3, [pc, #372]	; (a98 <SPI0init+0x18c>)
 922:	4798      	blx	r3

    MCLK->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
 924:	4a5d      	ldr	r2, [pc, #372]	; (a9c <SPI0init+0x190>)
 926:	6953      	ldr	r3, [r2, #20]
 928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 92c:	6153      	str	r3, [r2, #20]
u8_t spiDataTransfer(SercomId id, u8_t data);
void spiDataOut(SercomId id, u8_t data);
u8_t spiDataIn(SercomId id);

inline static Sercom* sercom(SercomId id) {
    if ( id == 0) {
 92e:	b164      	cbz	r4, 94a <SPI0init+0x3e>
        return (Sercom*) (0x40003000U);
    } else if ( id == 1) {
 930:	2c01      	cmp	r4, #1
 932:	d010      	beq.n	956 <SPI0init+0x4a>
        return (Sercom*) (0x40003400U);
    } else if ( id == 2) {
 934:	2c02      	cmp	r4, #2
 936:	d011      	beq.n	95c <SPI0init+0x50>
        return (Sercom*) (0x41012000U);
    } else if ( id == 3) {
 938:	2c03      	cmp	r4, #3
 93a:	d012      	beq.n	962 <SPI0init+0x56>
        return (Sercom*) (0x41014000U);
    } else if ( id == 4) {
 93c:	2c04      	cmp	r4, #4
 93e:	d013      	beq.n	968 <SPI0init+0x5c>
        return (Sercom*) (0x43000000U);
    } else if ( id == 5) {
 940:	2c05      	cmp	r4, #5
 942:	d104      	bne.n	94e <SPI0init+0x42>
        return (Sercom*) (0x43000400U);
 944:	f8df a15c 	ldr.w	sl, [pc, #348]	; aa4 <SPI0init+0x198>
 948:	e001      	b.n	94e <SPI0init+0x42>
        return (Sercom*) (0x40003000U);
 94a:	f8df a154 	ldr.w	sl, [pc, #340]	; aa0 <SPI0init+0x194>


    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
 94e:	2301      	movs	r3, #1
 950:	f8ca 3000 	str.w	r3, [sl]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
 954:	e010      	b.n	978 <SPI0init+0x6c>
        return (Sercom*) (0x40003400U);
 956:	f8df a150 	ldr.w	sl, [pc, #336]	; aa8 <SPI0init+0x19c>
 95a:	e7f8      	b.n	94e <SPI0init+0x42>
        return (Sercom*) (0x41012000U);
 95c:	f8df a14c 	ldr.w	sl, [pc, #332]	; aac <SPI0init+0x1a0>
 960:	e7f5      	b.n	94e <SPI0init+0x42>
        return (Sercom*) (0x41014000U);
 962:	f8df a14c 	ldr.w	sl, [pc, #332]	; ab0 <SPI0init+0x1a4>
 966:	e7f2      	b.n	94e <SPI0init+0x42>
        return (Sercom*) (0x43000000U);
 968:	f04f 4a86 	mov.w	sl, #1124073472	; 0x43000000
 96c:	e7ef      	b.n	94e <SPI0init+0x42>
        return (Sercom*) (0x40003000U);
 96e:	4e4c      	ldr	r6, [pc, #304]	; (aa0 <SPI0init+0x194>)
 970:	6833      	ldr	r3, [r6, #0]
 972:	f013 0f01 	tst.w	r3, #1
 976:	d016      	beq.n	9a6 <SPI0init+0x9a>
    if ( id == 0) {
 978:	2c00      	cmp	r4, #0
 97a:	d0f8      	beq.n	96e <SPI0init+0x62>
    } else if ( id == 1) {
 97c:	2c01      	cmp	r4, #1
 97e:	d009      	beq.n	994 <SPI0init+0x88>
    } else if ( id == 2) {
 980:	2c02      	cmp	r4, #2
 982:	d009      	beq.n	998 <SPI0init+0x8c>
    } else if ( id == 3) {
 984:	2c03      	cmp	r4, #3
 986:	d009      	beq.n	99c <SPI0init+0x90>
    } else if ( id == 4) {
 988:	2c04      	cmp	r4, #4
 98a:	d009      	beq.n	9a0 <SPI0init+0x94>
    } else if ( id == 5) {
 98c:	2c05      	cmp	r4, #5
 98e:	d1ef      	bne.n	970 <SPI0init+0x64>
        return (Sercom*) (0x43000400U);
 990:	4e44      	ldr	r6, [pc, #272]	; (aa4 <SPI0init+0x198>)
 992:	e7ed      	b.n	970 <SPI0init+0x64>
        return (Sercom*) (0x40003400U);
 994:	4e44      	ldr	r6, [pc, #272]	; (aa8 <SPI0init+0x19c>)
 996:	e7eb      	b.n	970 <SPI0init+0x64>
        return (Sercom*) (0x41012000U);
 998:	4e44      	ldr	r6, [pc, #272]	; (aac <SPI0init+0x1a0>)
 99a:	e7e9      	b.n	970 <SPI0init+0x64>
        return (Sercom*) (0x41014000U);
 99c:	4e44      	ldr	r6, [pc, #272]	; (ab0 <SPI0init+0x1a4>)
 99e:	e7e7      	b.n	970 <SPI0init+0x64>
        return (Sercom*) (0x43000000U);
 9a0:	f04f 4686 	mov.w	r6, #1124073472	; 0x43000000
 9a4:	e7e4      	b.n	970 <SPI0init+0x64>
    if ( id == 0) {
 9a6:	b164      	cbz	r4, 9c2 <SPI0init+0xb6>
    } else if ( id == 1) {
 9a8:	2c01      	cmp	r4, #1
 9aa:	d01e      	beq.n	9ea <SPI0init+0xde>
    } else if ( id == 2) {
 9ac:	2c02      	cmp	r4, #2
 9ae:	d01f      	beq.n	9f0 <SPI0init+0xe4>
    } else if ( id == 3) {
 9b0:	2c03      	cmp	r4, #3
 9b2:	d020      	beq.n	9f6 <SPI0init+0xea>
    } else if ( id == 4) {
 9b4:	2c04      	cmp	r4, #4
 9b6:	d021      	beq.n	9fc <SPI0init+0xf0>
    } else if ( id == 5) {
 9b8:	2c05      	cmp	r4, #5
 9ba:	d104      	bne.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x43000400U);
 9bc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; aa4 <SPI0init+0x198>
 9c0:	e001      	b.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x40003000U);
 9c2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; aa0 <SPI0init+0x194>

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
 9c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 9ca:	f8c9 3004 	str.w	r3, [r9, #4]
    if ( id == 0) {
 9ce:	b1c4      	cbz	r4, a02 <SPI0init+0xf6>
    } else if ( id == 1) {
 9d0:	2c01      	cmp	r4, #1
 9d2:	d028      	beq.n	a26 <SPI0init+0x11a>
    } else if ( id == 2) {
 9d4:	2c02      	cmp	r4, #2
 9d6:	d029      	beq.n	a2c <SPI0init+0x120>
    } else if ( id == 3) {
 9d8:	2c03      	cmp	r4, #3
 9da:	d02a      	beq.n	a32 <SPI0init+0x126>
    } else if ( id == 4) {
 9dc:	2c04      	cmp	r4, #4
 9de:	d02b      	beq.n	a38 <SPI0init+0x12c>
    } else if ( id == 5) {
 9e0:	2c05      	cmp	r4, #5
 9e2:	d110      	bne.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x43000400U);
 9e4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; aa4 <SPI0init+0x198>
 9e8:	e00d      	b.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x40003400U);
 9ea:	f8df 90bc 	ldr.w	r9, [pc, #188]	; aa8 <SPI0init+0x19c>
 9ee:	e7ea      	b.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x41012000U);
 9f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; aac <SPI0init+0x1a0>
 9f4:	e7e7      	b.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x41014000U);
 9f6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; ab0 <SPI0init+0x1a4>
 9fa:	e7e4      	b.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x43000000U);
 9fc:	f04f 4986 	mov.w	r9, #1124073472	; 0x43000000
 a00:	e7e1      	b.n	9c6 <SPI0init+0xba>
        return (Sercom*) (0x40003000U);
 a02:	f8df 809c 	ldr.w	r8, [pc, #156]	; aa0 <SPI0init+0x194>

    sercom(id)->SPI.BAUD.reg = 0x05;
 a06:	2305      	movs	r3, #5
 a08:	f888 300c 	strb.w	r3, [r8, #12]
    if ( id == 0) {
 a0c:	b1bc      	cbz	r4, a3e <SPI0init+0x132>
    } else if ( id == 1) {
 a0e:	2c01      	cmp	r4, #1
 a10:	d019      	beq.n	a46 <SPI0init+0x13a>
    } else if ( id == 2) {
 a12:	2c02      	cmp	r4, #2
 a14:	d019      	beq.n	a4a <SPI0init+0x13e>
    } else if ( id == 3) {
 a16:	2c03      	cmp	r4, #3
 a18:	d019      	beq.n	a4e <SPI0init+0x142>
    } else if ( id == 4) {
 a1a:	2c04      	cmp	r4, #4
 a1c:	d019      	beq.n	a52 <SPI0init+0x146>
    } else if ( id == 5) {
 a1e:	429c      	cmp	r4, r3
 a20:	d10e      	bne.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x43000400U);
 a22:	4f20      	ldr	r7, [pc, #128]	; (aa4 <SPI0init+0x198>)
 a24:	e00c      	b.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x40003400U);
 a26:	f8df 8080 	ldr.w	r8, [pc, #128]	; aa8 <SPI0init+0x19c>
 a2a:	e7ec      	b.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x41012000U);
 a2c:	f8df 807c 	ldr.w	r8, [pc, #124]	; aac <SPI0init+0x1a0>
 a30:	e7e9      	b.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x41014000U);
 a32:	f8df 807c 	ldr.w	r8, [pc, #124]	; ab0 <SPI0init+0x1a4>
 a36:	e7e6      	b.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x43000000U);
 a38:	f04f 4886 	mov.w	r8, #1124073472	; 0x43000000
 a3c:	e7e3      	b.n	a06 <SPI0init+0xfa>
        return (Sercom*) (0x40003000U);
 a3e:	4f18      	ldr	r7, [pc, #96]	; (aa0 <SPI0init+0x194>)

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
 a40:	4b1c      	ldr	r3, [pc, #112]	; (ab4 <SPI0init+0x1a8>)
 a42:	603b      	str	r3, [r7, #0]
          | SERCOM_SPI_CTRLA_CPOL
          | SERCOM_SPI_CTRLA_CPHA;
          //| (0 ? SERCOM_SPI_CTRLA_CPOL : 0)
          //| (0 ? SERCOM_SPI_CTRLA_CPHA : 0);

    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
 a44:	e00d      	b.n	a62 <SPI0init+0x156>
        return (Sercom*) (0x40003400U);
 a46:	4f18      	ldr	r7, [pc, #96]	; (aa8 <SPI0init+0x19c>)
 a48:	e7fa      	b.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x41012000U);
 a4a:	4f18      	ldr	r7, [pc, #96]	; (aac <SPI0init+0x1a0>)
 a4c:	e7f8      	b.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x41014000U);
 a4e:	4f18      	ldr	r7, [pc, #96]	; (ab0 <SPI0init+0x1a4>)
 a50:	e7f6      	b.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x43000000U);
 a52:	f04f 4786 	mov.w	r7, #1124073472	; 0x43000000
 a56:	e7f3      	b.n	a40 <SPI0init+0x134>
        return (Sercom*) (0x40003000U);
 a58:	4d11      	ldr	r5, [pc, #68]	; (aa0 <SPI0init+0x194>)
 a5a:	69eb      	ldr	r3, [r5, #28]
 a5c:	f013 0f04 	tst.w	r3, #4
 a60:	d016      	beq.n	a90 <SPI0init+0x184>
    if ( id == 0) {
 a62:	2c00      	cmp	r4, #0
 a64:	d0f8      	beq.n	a58 <SPI0init+0x14c>
    } else if ( id == 1) {
 a66:	2c01      	cmp	r4, #1
 a68:	d009      	beq.n	a7e <SPI0init+0x172>
    } else if ( id == 2) {
 a6a:	2c02      	cmp	r4, #2
 a6c:	d009      	beq.n	a82 <SPI0init+0x176>
    } else if ( id == 3) {
 a6e:	2c03      	cmp	r4, #3
 a70:	d009      	beq.n	a86 <SPI0init+0x17a>
    } else if ( id == 4) {
 a72:	2c04      	cmp	r4, #4
 a74:	d009      	beq.n	a8a <SPI0init+0x17e>
    } else if ( id == 5) {
 a76:	2c05      	cmp	r4, #5
 a78:	d1ef      	bne.n	a5a <SPI0init+0x14e>
        return (Sercom*) (0x43000400U);
 a7a:	4d0a      	ldr	r5, [pc, #40]	; (aa4 <SPI0init+0x198>)
 a7c:	e7ed      	b.n	a5a <SPI0init+0x14e>
        return (Sercom*) (0x40003400U);
 a7e:	4d0a      	ldr	r5, [pc, #40]	; (aa8 <SPI0init+0x19c>)
 a80:	e7eb      	b.n	a5a <SPI0init+0x14e>
        return (Sercom*) (0x41012000U);
 a82:	4d0a      	ldr	r5, [pc, #40]	; (aac <SPI0init+0x1a0>)
 a84:	e7e9      	b.n	a5a <SPI0init+0x14e>
        return (Sercom*) (0x41014000U);
 a86:	4d0a      	ldr	r5, [pc, #40]	; (ab0 <SPI0init+0x1a4>)
 a88:	e7e7      	b.n	a5a <SPI0init+0x14e>
        return (Sercom*) (0x43000000U);
 a8a:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
 a8e:	e7e4      	b.n	a5a <SPI0init+0x14e>

}
 a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 a94:	000003d9 	.word	0x000003d9
 a98:	000003b9 	.word	0x000003b9
 a9c:	40000800 	.word	0x40000800
 aa0:	40003000 	.word	0x40003000
 aa4:	43000400 	.word	0x43000400
 aa8:	40003400 	.word	0x40003400
 aac:	41012000 	.word	0x41012000
 ab0:	41014000 	.word	0x41014000
 ab4:	3020000e 	.word	0x3020000e

00000ab8 <SPI5init>:

void SPI5init(u8_t id) {
 ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 abc:	4604      	mov	r4, r0

    //enable_clock_generator(1, GCLK_GENCTRL_SRC_DFLL, 1);
    connect_gclk_to_peripheral(1, 35);
 abe:	2123      	movs	r1, #35	; 0x23
 ac0:	2001      	movs	r0, #1
 ac2:	4b5d      	ldr	r3, [pc, #372]	; (c38 <SPI5init+0x180>)
 ac4:	4798      	blx	r3
    MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
 ac6:	4a5d      	ldr	r2, [pc, #372]	; (c3c <SPI5init+0x184>)
 ac8:	6a13      	ldr	r3, [r2, #32]
 aca:	f043 0302 	orr.w	r3, r3, #2
 ace:	6213      	str	r3, [r2, #32]
    if ( id == 0) {
 ad0:	b164      	cbz	r4, aec <SPI5init+0x34>
    } else if ( id == 1) {
 ad2:	2c01      	cmp	r4, #1
 ad4:	d010      	beq.n	af8 <SPI5init+0x40>
    } else if ( id == 2) {
 ad6:	2c02      	cmp	r4, #2
 ad8:	d011      	beq.n	afe <SPI5init+0x46>
    } else if ( id == 3) {
 ada:	2c03      	cmp	r4, #3
 adc:	d012      	beq.n	b04 <SPI5init+0x4c>
    } else if ( id == 4) {
 ade:	2c04      	cmp	r4, #4
 ae0:	d013      	beq.n	b0a <SPI5init+0x52>
    } else if ( id == 5) {
 ae2:	2c05      	cmp	r4, #5
 ae4:	d104      	bne.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x43000400U);
 ae6:	f8df a15c 	ldr.w	sl, [pc, #348]	; c44 <SPI5init+0x18c>
 aea:	e001      	b.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x40003000U);
 aec:	f8df a150 	ldr.w	sl, [pc, #336]	; c40 <SPI5init+0x188>




    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
 af0:	2301      	movs	r3, #1
 af2:	f8ca 3000 	str.w	r3, [sl]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
 af6:	e010      	b.n	b1a <SPI5init+0x62>
        return (Sercom*) (0x40003400U);
 af8:	f8df a14c 	ldr.w	sl, [pc, #332]	; c48 <SPI5init+0x190>
 afc:	e7f8      	b.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x41012000U);
 afe:	f8df a14c 	ldr.w	sl, [pc, #332]	; c4c <SPI5init+0x194>
 b02:	e7f5      	b.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x41014000U);
 b04:	f8df a148 	ldr.w	sl, [pc, #328]	; c50 <SPI5init+0x198>
 b08:	e7f2      	b.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x43000000U);
 b0a:	f04f 4a86 	mov.w	sl, #1124073472	; 0x43000000
 b0e:	e7ef      	b.n	af0 <SPI5init+0x38>
        return (Sercom*) (0x40003000U);
 b10:	4e4b      	ldr	r6, [pc, #300]	; (c40 <SPI5init+0x188>)
 b12:	6833      	ldr	r3, [r6, #0]
 b14:	f013 0f01 	tst.w	r3, #1
 b18:	d016      	beq.n	b48 <SPI5init+0x90>
    if ( id == 0) {
 b1a:	2c00      	cmp	r4, #0
 b1c:	d0f8      	beq.n	b10 <SPI5init+0x58>
    } else if ( id == 1) {
 b1e:	2c01      	cmp	r4, #1
 b20:	d009      	beq.n	b36 <SPI5init+0x7e>
    } else if ( id == 2) {
 b22:	2c02      	cmp	r4, #2
 b24:	d009      	beq.n	b3a <SPI5init+0x82>
    } else if ( id == 3) {
 b26:	2c03      	cmp	r4, #3
 b28:	d009      	beq.n	b3e <SPI5init+0x86>
    } else if ( id == 4) {
 b2a:	2c04      	cmp	r4, #4
 b2c:	d009      	beq.n	b42 <SPI5init+0x8a>
    } else if ( id == 5) {
 b2e:	2c05      	cmp	r4, #5
 b30:	d1ef      	bne.n	b12 <SPI5init+0x5a>
        return (Sercom*) (0x43000400U);
 b32:	4e44      	ldr	r6, [pc, #272]	; (c44 <SPI5init+0x18c>)
 b34:	e7ed      	b.n	b12 <SPI5init+0x5a>
        return (Sercom*) (0x40003400U);
 b36:	4e44      	ldr	r6, [pc, #272]	; (c48 <SPI5init+0x190>)
 b38:	e7eb      	b.n	b12 <SPI5init+0x5a>
        return (Sercom*) (0x41012000U);
 b3a:	4e44      	ldr	r6, [pc, #272]	; (c4c <SPI5init+0x194>)
 b3c:	e7e9      	b.n	b12 <SPI5init+0x5a>
        return (Sercom*) (0x41014000U);
 b3e:	4e44      	ldr	r6, [pc, #272]	; (c50 <SPI5init+0x198>)
 b40:	e7e7      	b.n	b12 <SPI5init+0x5a>
        return (Sercom*) (0x43000000U);
 b42:	f04f 4686 	mov.w	r6, #1124073472	; 0x43000000
 b46:	e7e4      	b.n	b12 <SPI5init+0x5a>
    if ( id == 0) {
 b48:	b164      	cbz	r4, b64 <SPI5init+0xac>
    } else if ( id == 1) {
 b4a:	2c01      	cmp	r4, #1
 b4c:	d01e      	beq.n	b8c <SPI5init+0xd4>
    } else if ( id == 2) {
 b4e:	2c02      	cmp	r4, #2
 b50:	d01f      	beq.n	b92 <SPI5init+0xda>
    } else if ( id == 3) {
 b52:	2c03      	cmp	r4, #3
 b54:	d020      	beq.n	b98 <SPI5init+0xe0>
    } else if ( id == 4) {
 b56:	2c04      	cmp	r4, #4
 b58:	d021      	beq.n	b9e <SPI5init+0xe6>
    } else if ( id == 5) {
 b5a:	2c05      	cmp	r4, #5
 b5c:	d104      	bne.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x43000400U);
 b5e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; c44 <SPI5init+0x18c>
 b62:	e001      	b.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x40003000U);
 b64:	f8df 90d8 	ldr.w	r9, [pc, #216]	; c40 <SPI5init+0x188>

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
 b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 b6c:	f8c9 3004 	str.w	r3, [r9, #4]
    if ( id == 0) {
 b70:	b1c4      	cbz	r4, ba4 <SPI5init+0xec>
    } else if ( id == 1) {
 b72:	2c01      	cmp	r4, #1
 b74:	d028      	beq.n	bc8 <SPI5init+0x110>
    } else if ( id == 2) {
 b76:	2c02      	cmp	r4, #2
 b78:	d029      	beq.n	bce <SPI5init+0x116>
    } else if ( id == 3) {
 b7a:	2c03      	cmp	r4, #3
 b7c:	d02a      	beq.n	bd4 <SPI5init+0x11c>
    } else if ( id == 4) {
 b7e:	2c04      	cmp	r4, #4
 b80:	d02b      	beq.n	bda <SPI5init+0x122>
    } else if ( id == 5) {
 b82:	2c05      	cmp	r4, #5
 b84:	d110      	bne.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x43000400U);
 b86:	f8df 80bc 	ldr.w	r8, [pc, #188]	; c44 <SPI5init+0x18c>
 b8a:	e00d      	b.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x40003400U);
 b8c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; c48 <SPI5init+0x190>
 b90:	e7ea      	b.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x41012000U);
 b92:	f8df 90b8 	ldr.w	r9, [pc, #184]	; c4c <SPI5init+0x194>
 b96:	e7e7      	b.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x41014000U);
 b98:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c50 <SPI5init+0x198>
 b9c:	e7e4      	b.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x43000000U);
 b9e:	f04f 4986 	mov.w	r9, #1124073472	; 0x43000000
 ba2:	e7e1      	b.n	b68 <SPI5init+0xb0>
        return (Sercom*) (0x40003000U);
 ba4:	f8df 8098 	ldr.w	r8, [pc, #152]	; c40 <SPI5init+0x188>

    sercom(id)->SPI.BAUD.reg = 0x05;
 ba8:	2305      	movs	r3, #5
 baa:	f888 300c 	strb.w	r3, [r8, #12]
    if ( id == 0) {
 bae:	b1bc      	cbz	r4, be0 <SPI5init+0x128>
    } else if ( id == 1) {
 bb0:	2c01      	cmp	r4, #1
 bb2:	d019      	beq.n	be8 <SPI5init+0x130>
    } else if ( id == 2) {
 bb4:	2c02      	cmp	r4, #2
 bb6:	d019      	beq.n	bec <SPI5init+0x134>
    } else if ( id == 3) {
 bb8:	2c03      	cmp	r4, #3
 bba:	d019      	beq.n	bf0 <SPI5init+0x138>
    } else if ( id == 4) {
 bbc:	2c04      	cmp	r4, #4
 bbe:	d019      	beq.n	bf4 <SPI5init+0x13c>
    } else if ( id == 5) {
 bc0:	429c      	cmp	r4, r3
 bc2:	d10e      	bne.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x43000400U);
 bc4:	4f1f      	ldr	r7, [pc, #124]	; (c44 <SPI5init+0x18c>)
 bc6:	e00c      	b.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x40003400U);
 bc8:	f8df 807c 	ldr.w	r8, [pc, #124]	; c48 <SPI5init+0x190>
 bcc:	e7ec      	b.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x41012000U);
 bce:	f8df 807c 	ldr.w	r8, [pc, #124]	; c4c <SPI5init+0x194>
 bd2:	e7e9      	b.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x41014000U);
 bd4:	f8df 8078 	ldr.w	r8, [pc, #120]	; c50 <SPI5init+0x198>
 bd8:	e7e6      	b.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x43000000U);
 bda:	f04f 4886 	mov.w	r8, #1124073472	; 0x43000000
 bde:	e7e3      	b.n	ba8 <SPI5init+0xf0>
        return (Sercom*) (0x40003000U);
 be0:	4f17      	ldr	r7, [pc, #92]	; (c40 <SPI5init+0x188>)

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
 be2:	4b1c      	ldr	r3, [pc, #112]	; (c54 <SPI5init+0x19c>)
 be4:	603b      	str	r3, [r7, #0]
          | SERCOM_SPI_CTRLA_DOPO(0x0)
          //| SERCOM_SPI_CTRLA_CPOL
          //| SERCOM_SPI_CTRLA_CPHA;
          | (0 ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (0 ? SERCOM_SPI_CTRLA_CPHA : 0);
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
 be6:	e00d      	b.n	c04 <SPI5init+0x14c>
        return (Sercom*) (0x40003400U);
 be8:	4f17      	ldr	r7, [pc, #92]	; (c48 <SPI5init+0x190>)
 bea:	e7fa      	b.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x41012000U);
 bec:	4f17      	ldr	r7, [pc, #92]	; (c4c <SPI5init+0x194>)
 bee:	e7f8      	b.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x41014000U);
 bf0:	4f17      	ldr	r7, [pc, #92]	; (c50 <SPI5init+0x198>)
 bf2:	e7f6      	b.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x43000000U);
 bf4:	f04f 4786 	mov.w	r7, #1124073472	; 0x43000000
 bf8:	e7f3      	b.n	be2 <SPI5init+0x12a>
        return (Sercom*) (0x40003000U);
 bfa:	4d11      	ldr	r5, [pc, #68]	; (c40 <SPI5init+0x188>)
 bfc:	69eb      	ldr	r3, [r5, #28]
 bfe:	f013 0f04 	tst.w	r3, #4
 c02:	d016      	beq.n	c32 <SPI5init+0x17a>
    if ( id == 0) {
 c04:	2c00      	cmp	r4, #0
 c06:	d0f8      	beq.n	bfa <SPI5init+0x142>
    } else if ( id == 1) {
 c08:	2c01      	cmp	r4, #1
 c0a:	d009      	beq.n	c20 <SPI5init+0x168>
    } else if ( id == 2) {
 c0c:	2c02      	cmp	r4, #2
 c0e:	d009      	beq.n	c24 <SPI5init+0x16c>
    } else if ( id == 3) {
 c10:	2c03      	cmp	r4, #3
 c12:	d009      	beq.n	c28 <SPI5init+0x170>
    } else if ( id == 4) {
 c14:	2c04      	cmp	r4, #4
 c16:	d009      	beq.n	c2c <SPI5init+0x174>
    } else if ( id == 5) {
 c18:	2c05      	cmp	r4, #5
 c1a:	d1ef      	bne.n	bfc <SPI5init+0x144>
        return (Sercom*) (0x43000400U);
 c1c:	4d09      	ldr	r5, [pc, #36]	; (c44 <SPI5init+0x18c>)
 c1e:	e7ed      	b.n	bfc <SPI5init+0x144>
        return (Sercom*) (0x40003400U);
 c20:	4d09      	ldr	r5, [pc, #36]	; (c48 <SPI5init+0x190>)
 c22:	e7eb      	b.n	bfc <SPI5init+0x144>
        return (Sercom*) (0x41012000U);
 c24:	4d09      	ldr	r5, [pc, #36]	; (c4c <SPI5init+0x194>)
 c26:	e7e9      	b.n	bfc <SPI5init+0x144>
        return (Sercom*) (0x41014000U);
 c28:	4d09      	ldr	r5, [pc, #36]	; (c50 <SPI5init+0x198>)
 c2a:	e7e7      	b.n	bfc <SPI5init+0x144>
        return (Sercom*) (0x43000000U);
 c2c:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
 c30:	e7e4      	b.n	bfc <SPI5init+0x144>

}
 c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c36:	bf00      	nop
 c38:	000003b9 	.word	0x000003b9
 c3c:	40000800 	.word	0x40000800
 c40:	40003000 	.word	0x40003000
 c44:	43000400 	.word	0x43000400
 c48:	40003400 	.word	0x40003400
 c4c:	41012000 	.word	0x41012000
 c50:	41014000 	.word	0x41014000
 c54:	0030000e 	.word	0x0030000e

00000c58 <spiDataOut>:
    sercom(id)->SPI.DATA.reg = data;
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    return sercom(id)->SPI.DATA.reg;
}

void spiDataOut(SercomId id, u8_t data) {
 c58:	b430      	push	{r4, r5}
    if ( id == 0) {
 c5a:	4603      	mov	r3, r0
 c5c:	b158      	cbz	r0, c76 <spiDataOut+0x1e>
    } else if ( id == 1) {
 c5e:	2801      	cmp	r0, #1
 c60:	d00c      	beq.n	c7c <spiDataOut+0x24>
    } else if ( id == 2) {
 c62:	2802      	cmp	r0, #2
 c64:	d00c      	beq.n	c80 <spiDataOut+0x28>
    } else if ( id == 3) {
 c66:	2803      	cmp	r0, #3
 c68:	d00c      	beq.n	c84 <spiDataOut+0x2c>
    } else if ( id == 4) {
 c6a:	2804      	cmp	r0, #4
 c6c:	d00c      	beq.n	c88 <spiDataOut+0x30>
    } else if ( id == 5) {
 c6e:	2805      	cmp	r0, #5
 c70:	d102      	bne.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x43000400U);
 c72:	4a22      	ldr	r2, [pc, #136]	; (cfc <spiDataOut+0xa4>)
 c74:	e000      	b.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x40003000U);
 c76:	4a22      	ldr	r2, [pc, #136]	; (d00 <spiDataOut+0xa8>)
    sercom(id)->SPI.DATA.reg = data;
 c78:	6291      	str	r1, [r2, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
 c7a:	e00d      	b.n	c98 <spiDataOut+0x40>
        return (Sercom*) (0x40003400U);
 c7c:	4a21      	ldr	r2, [pc, #132]	; (d04 <spiDataOut+0xac>)
 c7e:	e7fb      	b.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x41012000U);
 c80:	4a21      	ldr	r2, [pc, #132]	; (d08 <spiDataOut+0xb0>)
 c82:	e7f9      	b.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x41014000U);
 c84:	4a21      	ldr	r2, [pc, #132]	; (d0c <spiDataOut+0xb4>)
 c86:	e7f7      	b.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x43000000U);
 c88:	f04f 4286 	mov.w	r2, #1124073472	; 0x43000000
 c8c:	e7f4      	b.n	c78 <spiDataOut+0x20>
        return (Sercom*) (0x40003000U);
 c8e:	4c1c      	ldr	r4, [pc, #112]	; (d00 <spiDataOut+0xa8>)
 c90:	7e22      	ldrb	r2, [r4, #24]
 c92:	f012 0f04 	tst.w	r2, #4
 c96:	d116      	bne.n	cc6 <spiDataOut+0x6e>
    if ( id == 0) {
 c98:	2b00      	cmp	r3, #0
 c9a:	d0f8      	beq.n	c8e <spiDataOut+0x36>
    } else if ( id == 1) {
 c9c:	2b01      	cmp	r3, #1
 c9e:	d009      	beq.n	cb4 <spiDataOut+0x5c>
    } else if ( id == 2) {
 ca0:	2b02      	cmp	r3, #2
 ca2:	d009      	beq.n	cb8 <spiDataOut+0x60>
    } else if ( id == 3) {
 ca4:	2b03      	cmp	r3, #3
 ca6:	d009      	beq.n	cbc <spiDataOut+0x64>
    } else if ( id == 4) {
 ca8:	2b04      	cmp	r3, #4
 caa:	d009      	beq.n	cc0 <spiDataOut+0x68>
    } else if ( id == 5) {
 cac:	2b05      	cmp	r3, #5
 cae:	d1ef      	bne.n	c90 <spiDataOut+0x38>
        return (Sercom*) (0x43000400U);
 cb0:	4c12      	ldr	r4, [pc, #72]	; (cfc <spiDataOut+0xa4>)
 cb2:	e7ed      	b.n	c90 <spiDataOut+0x38>
        return (Sercom*) (0x40003400U);
 cb4:	4c13      	ldr	r4, [pc, #76]	; (d04 <spiDataOut+0xac>)
 cb6:	e7eb      	b.n	c90 <spiDataOut+0x38>
        return (Sercom*) (0x41012000U);
 cb8:	4c13      	ldr	r4, [pc, #76]	; (d08 <spiDataOut+0xb0>)
 cba:	e7e9      	b.n	c90 <spiDataOut+0x38>
        return (Sercom*) (0x41014000U);
 cbc:	4c13      	ldr	r4, [pc, #76]	; (d0c <spiDataOut+0xb4>)
 cbe:	e7e7      	b.n	c90 <spiDataOut+0x38>
        return (Sercom*) (0x43000000U);
 cc0:	f04f 4486 	mov.w	r4, #1124073472	; 0x43000000
 cc4:	e7e4      	b.n	c90 <spiDataOut+0x38>
    if ( id == 0) {
 cc6:	b15b      	cbz	r3, ce0 <spiDataOut+0x88>
    } else if ( id == 1) {
 cc8:	2b01      	cmp	r3, #1
 cca:	d00d      	beq.n	ce8 <spiDataOut+0x90>
    } else if ( id == 2) {
 ccc:	2b02      	cmp	r3, #2
 cce:	d00d      	beq.n	cec <spiDataOut+0x94>
    } else if ( id == 3) {
 cd0:	2b03      	cmp	r3, #3
 cd2:	d00d      	beq.n	cf0 <spiDataOut+0x98>
    } else if ( id == 4) {
 cd4:	2b04      	cmp	r3, #4
 cd6:	d00d      	beq.n	cf4 <spiDataOut+0x9c>
    } else if ( id == 5) {
 cd8:	2b05      	cmp	r3, #5
 cda:	d102      	bne.n	ce2 <spiDataOut+0x8a>
        return (Sercom*) (0x43000400U);
 cdc:	4d07      	ldr	r5, [pc, #28]	; (cfc <spiDataOut+0xa4>)
 cde:	e000      	b.n	ce2 <spiDataOut+0x8a>
        return (Sercom*) (0x40003000U);
 ce0:	4d07      	ldr	r5, [pc, #28]	; (d00 <spiDataOut+0xa8>)
    u8_t dummy = sercom(id)->SPI.DATA.reg;
 ce2:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
 ce4:	bc30      	pop	{r4, r5}
 ce6:	4770      	bx	lr
        return (Sercom*) (0x40003400U);
 ce8:	4d06      	ldr	r5, [pc, #24]	; (d04 <spiDataOut+0xac>)
 cea:	e7fa      	b.n	ce2 <spiDataOut+0x8a>
        return (Sercom*) (0x41012000U);
 cec:	4d06      	ldr	r5, [pc, #24]	; (d08 <spiDataOut+0xb0>)
 cee:	e7f8      	b.n	ce2 <spiDataOut+0x8a>
        return (Sercom*) (0x41014000U);
 cf0:	4d06      	ldr	r5, [pc, #24]	; (d0c <spiDataOut+0xb4>)
 cf2:	e7f6      	b.n	ce2 <spiDataOut+0x8a>
        return (Sercom*) (0x43000000U);
 cf4:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
 cf8:	e7f3      	b.n	ce2 <spiDataOut+0x8a>
 cfa:	bf00      	nop
 cfc:	43000400 	.word	0x43000400
 d00:	40003000 	.word	0x40003000
 d04:	40003400 	.word	0x40003400
 d08:	41012000 	.word	0x41012000
 d0c:	41014000 	.word	0x41014000

00000d10 <spiDataIn>:

u8_t spiDataIn(SercomId id) {
 d10:	b430      	push	{r4, r5}
    if ( id == 0) {
 d12:	4603      	mov	r3, r0
 d14:	b158      	cbz	r0, d2e <spiDataIn+0x1e>
    } else if ( id == 1) {
 d16:	2801      	cmp	r0, #1
 d18:	d00d      	beq.n	d36 <spiDataIn+0x26>
    } else if ( id == 2) {
 d1a:	2802      	cmp	r0, #2
 d1c:	d00d      	beq.n	d3a <spiDataIn+0x2a>
    } else if ( id == 3) {
 d1e:	2803      	cmp	r0, #3
 d20:	d00d      	beq.n	d3e <spiDataIn+0x2e>
    } else if ( id == 4) {
 d22:	2804      	cmp	r0, #4
 d24:	d00d      	beq.n	d42 <spiDataIn+0x32>
    } else if ( id == 5) {
 d26:	2805      	cmp	r0, #5
 d28:	d102      	bne.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x43000400U);
 d2a:	4c23      	ldr	r4, [pc, #140]	; (db8 <spiDataIn+0xa8>)
 d2c:	e000      	b.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x40003000U);
 d2e:	4c23      	ldr	r4, [pc, #140]	; (dbc <spiDataIn+0xac>)
    sercom(id)->SPI.DATA.reg = 0xFF;
 d30:	22ff      	movs	r2, #255	; 0xff
 d32:	62a2      	str	r2, [r4, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
 d34:	e00d      	b.n	d52 <spiDataIn+0x42>
        return (Sercom*) (0x40003400U);
 d36:	4c22      	ldr	r4, [pc, #136]	; (dc0 <spiDataIn+0xb0>)
 d38:	e7fa      	b.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x41012000U);
 d3a:	4c22      	ldr	r4, [pc, #136]	; (dc4 <spiDataIn+0xb4>)
 d3c:	e7f8      	b.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x41014000U);
 d3e:	4c22      	ldr	r4, [pc, #136]	; (dc8 <spiDataIn+0xb8>)
 d40:	e7f6      	b.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x43000000U);
 d42:	f04f 4486 	mov.w	r4, #1124073472	; 0x43000000
 d46:	e7f3      	b.n	d30 <spiDataIn+0x20>
        return (Sercom*) (0x40003000U);
 d48:	491c      	ldr	r1, [pc, #112]	; (dbc <spiDataIn+0xac>)
 d4a:	7e0a      	ldrb	r2, [r1, #24]
 d4c:	f012 0f04 	tst.w	r2, #4
 d50:	d116      	bne.n	d80 <spiDataIn+0x70>
    if ( id == 0) {
 d52:	2b00      	cmp	r3, #0
 d54:	d0f8      	beq.n	d48 <spiDataIn+0x38>
    } else if ( id == 1) {
 d56:	2b01      	cmp	r3, #1
 d58:	d009      	beq.n	d6e <spiDataIn+0x5e>
    } else if ( id == 2) {
 d5a:	2b02      	cmp	r3, #2
 d5c:	d009      	beq.n	d72 <spiDataIn+0x62>
    } else if ( id == 3) {
 d5e:	2b03      	cmp	r3, #3
 d60:	d009      	beq.n	d76 <spiDataIn+0x66>
    } else if ( id == 4) {
 d62:	2b04      	cmp	r3, #4
 d64:	d009      	beq.n	d7a <spiDataIn+0x6a>
    } else if ( id == 5) {
 d66:	2b05      	cmp	r3, #5
 d68:	d1ef      	bne.n	d4a <spiDataIn+0x3a>
        return (Sercom*) (0x43000400U);
 d6a:	4913      	ldr	r1, [pc, #76]	; (db8 <spiDataIn+0xa8>)
 d6c:	e7ed      	b.n	d4a <spiDataIn+0x3a>
        return (Sercom*) (0x40003400U);
 d6e:	4914      	ldr	r1, [pc, #80]	; (dc0 <spiDataIn+0xb0>)
 d70:	e7eb      	b.n	d4a <spiDataIn+0x3a>
        return (Sercom*) (0x41012000U);
 d72:	4914      	ldr	r1, [pc, #80]	; (dc4 <spiDataIn+0xb4>)
 d74:	e7e9      	b.n	d4a <spiDataIn+0x3a>
        return (Sercom*) (0x41014000U);
 d76:	4914      	ldr	r1, [pc, #80]	; (dc8 <spiDataIn+0xb8>)
 d78:	e7e7      	b.n	d4a <spiDataIn+0x3a>
        return (Sercom*) (0x43000000U);
 d7a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 d7e:	e7e4      	b.n	d4a <spiDataIn+0x3a>
    if ( id == 0) {
 d80:	b15b      	cbz	r3, d9a <spiDataIn+0x8a>
    } else if ( id == 1) {
 d82:	2b01      	cmp	r3, #1
 d84:	d00e      	beq.n	da4 <spiDataIn+0x94>
    } else if ( id == 2) {
 d86:	2b02      	cmp	r3, #2
 d88:	d00e      	beq.n	da8 <spiDataIn+0x98>
    } else if ( id == 3) {
 d8a:	2b03      	cmp	r3, #3
 d8c:	d00e      	beq.n	dac <spiDataIn+0x9c>
    } else if ( id == 4) {
 d8e:	2b04      	cmp	r3, #4
 d90:	d00e      	beq.n	db0 <spiDataIn+0xa0>
    } else if ( id == 5) {
 d92:	2b05      	cmp	r3, #5
 d94:	d102      	bne.n	d9c <spiDataIn+0x8c>
        return (Sercom*) (0x43000400U);
 d96:	4d08      	ldr	r5, [pc, #32]	; (db8 <spiDataIn+0xa8>)
 d98:	e000      	b.n	d9c <spiDataIn+0x8c>
        return (Sercom*) (0x40003000U);
 d9a:	4d08      	ldr	r5, [pc, #32]	; (dbc <spiDataIn+0xac>)
    return sercom(id)->SPI.DATA.reg;
 d9c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 d9e:	b2c0      	uxtb	r0, r0
 da0:	bc30      	pop	{r4, r5}
 da2:	4770      	bx	lr
        return (Sercom*) (0x40003400U);
 da4:	4d06      	ldr	r5, [pc, #24]	; (dc0 <spiDataIn+0xb0>)
 da6:	e7f9      	b.n	d9c <spiDataIn+0x8c>
        return (Sercom*) (0x41012000U);
 da8:	4d06      	ldr	r5, [pc, #24]	; (dc4 <spiDataIn+0xb4>)
 daa:	e7f7      	b.n	d9c <spiDataIn+0x8c>
        return (Sercom*) (0x41014000U);
 dac:	4d06      	ldr	r5, [pc, #24]	; (dc8 <spiDataIn+0xb8>)
 dae:	e7f5      	b.n	d9c <spiDataIn+0x8c>
        return (Sercom*) (0x43000000U);
 db0:	f04f 4586 	mov.w	r5, #1124073472	; 0x43000000
 db4:	e7f2      	b.n	d9c <spiDataIn+0x8c>
 db6:	bf00      	nop
 db8:	43000400 	.word	0x43000400
 dbc:	40003000 	.word	0x40003000
 dc0:	40003400 	.word	0x40003400
 dc4:	41012000 	.word	0x41012000
 dc8:	41014000 	.word	0x41014000

00000dcc <__libc_init_array>:
 dcc:	b570      	push	{r4, r5, r6, lr}
 dce:	4e0f      	ldr	r6, [pc, #60]	; (e0c <__libc_init_array+0x40>)
 dd0:	4d0f      	ldr	r5, [pc, #60]	; (e10 <__libc_init_array+0x44>)
 dd2:	1b76      	subs	r6, r6, r5
 dd4:	10b6      	asrs	r6, r6, #2
 dd6:	bf18      	it	ne
 dd8:	2400      	movne	r4, #0
 dda:	d005      	beq.n	de8 <__libc_init_array+0x1c>
 ddc:	3401      	adds	r4, #1
 dde:	f855 3b04 	ldr.w	r3, [r5], #4
 de2:	4798      	blx	r3
 de4:	42a6      	cmp	r6, r4
 de6:	d1f9      	bne.n	ddc <__libc_init_array+0x10>
 de8:	4e0a      	ldr	r6, [pc, #40]	; (e14 <__libc_init_array+0x48>)
 dea:	4d0b      	ldr	r5, [pc, #44]	; (e18 <__libc_init_array+0x4c>)
 dec:	1b76      	subs	r6, r6, r5
 dee:	f000 f8a7 	bl	f40 <_init>
 df2:	10b6      	asrs	r6, r6, #2
 df4:	bf18      	it	ne
 df6:	2400      	movne	r4, #0
 df8:	d006      	beq.n	e08 <__libc_init_array+0x3c>
 dfa:	3401      	adds	r4, #1
 dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 e00:	4798      	blx	r3
 e02:	42a6      	cmp	r6, r4
 e04:	d1f9      	bne.n	dfa <__libc_init_array+0x2e>
 e06:	bd70      	pop	{r4, r5, r6, pc}
 e08:	bd70      	pop	{r4, r5, r6, pc}
 e0a:	bf00      	nop
 e0c:	00000f4c 	.word	0x00000f4c
 e10:	00000f4c 	.word	0x00000f4c
 e14:	00000f54 	.word	0x00000f54
 e18:	00000f4c 	.word	0x00000f4c

00000e1c <register_fini>:
 e1c:	4b02      	ldr	r3, [pc, #8]	; (e28 <register_fini+0xc>)
 e1e:	b113      	cbz	r3, e26 <register_fini+0xa>
 e20:	4802      	ldr	r0, [pc, #8]	; (e2c <register_fini+0x10>)
 e22:	f000 b805 	b.w	e30 <atexit>
 e26:	4770      	bx	lr
 e28:	00000000 	.word	0x00000000
 e2c:	00000e3d 	.word	0x00000e3d

00000e30 <atexit>:
 e30:	2300      	movs	r3, #0
 e32:	4601      	mov	r1, r0
 e34:	461a      	mov	r2, r3
 e36:	4618      	mov	r0, r3
 e38:	f000 b81e 	b.w	e78 <__register_exitproc>

00000e3c <__libc_fini_array>:
 e3c:	b538      	push	{r3, r4, r5, lr}
 e3e:	4c0a      	ldr	r4, [pc, #40]	; (e68 <__libc_fini_array+0x2c>)
 e40:	4d0a      	ldr	r5, [pc, #40]	; (e6c <__libc_fini_array+0x30>)
 e42:	1b64      	subs	r4, r4, r5
 e44:	10a4      	asrs	r4, r4, #2
 e46:	d00a      	beq.n	e5e <__libc_fini_array+0x22>
 e48:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 e4c:	3b01      	subs	r3, #1
 e4e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 e52:	3c01      	subs	r4, #1
 e54:	f855 3904 	ldr.w	r3, [r5], #-4
 e58:	4798      	blx	r3
 e5a:	2c00      	cmp	r4, #0
 e5c:	d1f9      	bne.n	e52 <__libc_fini_array+0x16>
 e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 e62:	f000 b877 	b.w	f54 <_fini>
 e66:	bf00      	nop
 e68:	00000f64 	.word	0x00000f64
 e6c:	00000f60 	.word	0x00000f60

00000e70 <__retarget_lock_acquire_recursive>:
 e70:	4770      	bx	lr
 e72:	bf00      	nop

00000e74 <__retarget_lock_release_recursive>:
 e74:	4770      	bx	lr
 e76:	bf00      	nop

00000e78 <__register_exitproc>:
 e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 e7c:	4d2c      	ldr	r5, [pc, #176]	; (f30 <__register_exitproc+0xb8>)
 e7e:	4606      	mov	r6, r0
 e80:	6828      	ldr	r0, [r5, #0]
 e82:	4698      	mov	r8, r3
 e84:	460f      	mov	r7, r1
 e86:	4691      	mov	r9, r2
 e88:	f7ff fff2 	bl	e70 <__retarget_lock_acquire_recursive>
 e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <__register_exitproc+0xbc>)
 e8e:	681c      	ldr	r4, [r3, #0]
 e90:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 e94:	2b00      	cmp	r3, #0
 e96:	d03e      	beq.n	f16 <__register_exitproc+0x9e>
 e98:	685a      	ldr	r2, [r3, #4]
 e9a:	2a1f      	cmp	r2, #31
 e9c:	dc1c      	bgt.n	ed8 <__register_exitproc+0x60>
 e9e:	f102 0e01 	add.w	lr, r2, #1
 ea2:	b176      	cbz	r6, ec2 <__register_exitproc+0x4a>
 ea4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 ea8:	2401      	movs	r4, #1
 eaa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 eae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 eb2:	4094      	lsls	r4, r2
 eb4:	4320      	orrs	r0, r4
 eb6:	2e02      	cmp	r6, #2
 eb8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 ebc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 ec0:	d023      	beq.n	f0a <__register_exitproc+0x92>
 ec2:	3202      	adds	r2, #2
 ec4:	f8c3 e004 	str.w	lr, [r3, #4]
 ec8:	6828      	ldr	r0, [r5, #0]
 eca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 ece:	f7ff ffd1 	bl	e74 <__retarget_lock_release_recursive>
 ed2:	2000      	movs	r0, #0
 ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 ed8:	4b17      	ldr	r3, [pc, #92]	; (f38 <__register_exitproc+0xc0>)
 eda:	b30b      	cbz	r3, f20 <__register_exitproc+0xa8>
 edc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 ee0:	f3af 8000 	nop.w
 ee4:	4603      	mov	r3, r0
 ee6:	b1d8      	cbz	r0, f20 <__register_exitproc+0xa8>
 ee8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 eec:	6002      	str	r2, [r0, #0]
 eee:	2100      	movs	r1, #0
 ef0:	6041      	str	r1, [r0, #4]
 ef2:	460a      	mov	r2, r1
 ef4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 ef8:	f04f 0e01 	mov.w	lr, #1
 efc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 f00:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 f04:	2e00      	cmp	r6, #0
 f06:	d0dc      	beq.n	ec2 <__register_exitproc+0x4a>
 f08:	e7cc      	b.n	ea4 <__register_exitproc+0x2c>
 f0a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 f0e:	430c      	orrs	r4, r1
 f10:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 f14:	e7d5      	b.n	ec2 <__register_exitproc+0x4a>
 f16:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 f1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 f1e:	e7bb      	b.n	e98 <__register_exitproc+0x20>
 f20:	6828      	ldr	r0, [r5, #0]
 f22:	f7ff ffa7 	bl	e74 <__retarget_lock_release_recursive>
 f26:	f04f 30ff 	mov.w	r0, #4294967295
 f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 f2e:	bf00      	nop
 f30:	20000430 	.word	0x20000430
 f34:	00000f3c 	.word	0x00000f3c
 f38:	00000000 	.word	0x00000000

00000f3c <_global_impure_ptr>:
 f3c:	20000008                                ... 

00000f40 <_init>:
 f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f42:	bf00      	nop
 f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f46:	bc08      	pop	{r3}
 f48:	469e      	mov	lr, r3
 f4a:	4770      	bx	lr

00000f4c <__init_array_start>:
 f4c:	00000e1d 	.word	0x00000e1d

00000f50 <__frame_dummy_init_array_entry>:
 f50:	00000289                                ....

00000f54 <_fini>:
 f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f56:	bf00      	nop
 f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f5a:	bc08      	pop	{r3}
 f5c:	469e      	mov	lr, r3
 f5e:	4770      	bx	lr

00000f60 <__fini_array_start>:
 f60:	00000265 	.word	0x00000265
