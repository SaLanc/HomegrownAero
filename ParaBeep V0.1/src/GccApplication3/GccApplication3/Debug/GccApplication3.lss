
GccApplication3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000834  00020434  2**2
                  ALLOC
  3 .heap         00000204  20000474  00000874  00020434  2**0
                  ALLOC
  4 .stack        00000400  20000678  00000a78  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002c  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  7 .debug_info   000007a0  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000023a  00000000  00000000  00020c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000098  00000000  00000000  00020e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000070  00000000  00000000  00020f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00020f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013a96  00000000  00000000  00020fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000014c0  00000000  00000000  00034a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007e006  00000000  00000000  00035f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000250  00000000  00000000  000b3f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 0a 00 20 63 01 00 00 61 01 00 00 61 01 00 00     x.. c...a...a...
	...
  2c:	61 01 00 00 00 00 00 00 00 00 00 00 61 01 00 00     a...........a...
  3c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  4c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  5c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  6c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  7c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  8c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  9c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  ac:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  bc:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  cc:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  dc:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
  ec:	61 01 00 00 61 01 00 00                             a...a...

000000f4 <__do_global_dtors_aux>:
  f4:	b510      	push	{r4, lr}
  f6:	f240 4434 	movw	r4, #1076	; 0x434
  fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
  fe:	7823      	ldrb	r3, [r4, #0]
 100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
 102:	f240 0300 	movw	r3, #0
 106:	f2c0 0300 	movt	r3, #0
 10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
 10c:	f240 4000 	movw	r0, #1024	; 0x400
 110:	f2c0 0000 	movt	r0, #0
 114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
 116:	bf00      	nop
 118:	2301      	movs	r3, #1
 11a:	7023      	strb	r3, [r4, #0]
 11c:	bd10      	pop	{r4, pc}
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
 120:	f240 0300 	movw	r3, #0
 124:	f2c0 0300 	movt	r3, #0
 128:	b510      	push	{r4, lr}
 12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
 12c:	f240 4138 	movw	r1, #1080	; 0x438
 130:	f240 4000 	movw	r0, #1024	; 0x400
 134:	f2c2 0100 	movt	r1, #8192	; 0x2000
 138:	f2c0 0000 	movt	r0, #0
 13c:	e000      	b.n	140 <frame_dummy+0x20>
 13e:	bf00      	nop
 140:	f240 4000 	movw	r0, #1024	; 0x400
 144:	f2c0 0000 	movt	r0, #0
 148:	6803      	ldr	r3, [r0, #0]
 14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
 14c:	bd10      	pop	{r4, pc}
 14e:	f240 0300 	movw	r3, #0
 152:	f2c0 0300 	movt	r3, #0
 156:	2b00      	cmp	r3, #0
 158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
 15a:	4798      	blx	r3
 15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
 15e:	46c0      	nop			; (mov r8, r8)

00000160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 160:	e7fe      	b.n	160 <Dummy_Handler>

00000162 <Reset_Handler>:
{
 162:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 164:	f240 4200 	movw	r2, #1024	; 0x400
 168:	f2c0 0200 	movt	r2, #0
 16c:	f240 0300 	movw	r3, #0
 170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 174:	429a      	cmp	r2, r3
 176:	d012      	beq.n	19e <Reset_Handler+0x3c>
 178:	f240 0300 	movw	r3, #0
 17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 180:	f240 4200 	movw	r2, #1024	; 0x400
 184:	f2c0 0200 	movt	r2, #0
 188:	e003      	b.n	192 <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
 18a:	6811      	ldr	r1, [r2, #0]
 18c:	6019      	str	r1, [r3, #0]
 18e:	3304      	adds	r3, #4
 190:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 192:	f240 4134 	movw	r1, #1076	; 0x434
 196:	f2c2 0100 	movt	r1, #8192	; 0x2000
 19a:	428b      	cmp	r3, r1
 19c:	d3f5      	bcc.n	18a <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
 19e:	f240 4334 	movw	r3, #1076	; 0x434
 1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1a6:	e002      	b.n	1ae <Reset_Handler+0x4c>
                *pDest++ = 0;
 1a8:	2200      	movs	r2, #0
 1aa:	601a      	str	r2, [r3, #0]
 1ac:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 1ae:	f240 4274 	movw	r2, #1140	; 0x474
 1b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1b6:	4293      	cmp	r3, r2
 1b8:	d3f6      	bcc.n	1a8 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 1ba:	f240 0300 	movw	r3, #0
 1be:	f2c0 0300 	movt	r3, #0
 1c2:	227f      	movs	r2, #127	; 0x7f
 1c4:	4393      	bics	r3, r2
 1c6:	f64e 5200 	movw	r2, #60672	; 0xed00
 1ca:	f2ce 0200 	movt	r2, #57344	; 0xe000
 1ce:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 1d0:	f240 2309 	movw	r3, #521	; 0x209
 1d4:	f2c0 0300 	movt	r3, #0
 1d8:	4798      	blx	r3
        main();
 1da:	f240 13fb 	movw	r3, #507	; 0x1fb
 1de:	f2c0 0300 	movt	r3, #0
 1e2:	4798      	blx	r3
 1e4:	e7fe      	b.n	1e4 <Reset_Handler+0x82>

000001e6 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
 1e6:	f240 0300 	movw	r3, #0
 1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1ee:	f640 1200 	movw	r2, #2304	; 0x900
 1f2:	f2c0 023d 	movt	r2, #61	; 0x3d
 1f6:	601a      	str	r2, [r3, #0]
    return;
}
 1f8:	4770      	bx	lr

000001fa <main>:

#include "sam.h"


int main(void)
{
 1fa:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 1fc:	f240 13e7 	movw	r3, #487	; 0x1e7
 200:	f2c0 0300 	movt	r3, #0
 204:	4798      	blx	r3
 206:	e7fe      	b.n	206 <HEAP_SIZE+0x6>

00000208 <__libc_init_array>:
 208:	b570      	push	{r4, r5, r6, lr}
 20a:	f240 33e8 	movw	r3, #1000	; 0x3e8
 20e:	f240 35e8 	movw	r5, #1000	; 0x3e8
 212:	f2c0 0300 	movt	r3, #0
 216:	f2c0 0500 	movt	r5, #0
 21a:	1aed      	subs	r5, r5, r3
 21c:	10ad      	asrs	r5, r5, #2
 21e:	2400      	movs	r4, #0
 220:	b15d      	cbz	r5, 23a <__libc_init_array+0x32>
 222:	f240 32e8 	movw	r2, #1000	; 0x3e8
 226:	f2c0 0200 	movt	r2, #0
 22a:	4694      	mov	ip, r2
 22c:	00a3      	lsls	r3, r4, #2
 22e:	4463      	add	r3, ip
 230:	681b      	ldr	r3, [r3, #0]
 232:	3401      	adds	r4, #1
 234:	4798      	blx	r3
 236:	42a5      	cmp	r5, r4
 238:	d1f3      	bne.n	222 <__libc_init_array+0x1a>
 23a:	f000 f8cf 	bl	3dc <_init>
 23e:	f240 35f0 	movw	r5, #1008	; 0x3f0
 242:	f240 33e8 	movw	r3, #1000	; 0x3e8
 246:	f2c0 0500 	movt	r5, #0
 24a:	f2c0 0300 	movt	r3, #0
 24e:	1aed      	subs	r5, r5, r3
 250:	10ad      	asrs	r5, r5, #2
 252:	2400      	movs	r4, #0
 254:	b15d      	cbz	r5, 26e <__libc_init_array+0x66>
 256:	f240 32e8 	movw	r2, #1000	; 0x3e8
 25a:	f2c0 0200 	movt	r2, #0
 25e:	4694      	mov	ip, r2
 260:	00a3      	lsls	r3, r4, #2
 262:	4463      	add	r3, ip
 264:	681b      	ldr	r3, [r3, #0]
 266:	3401      	adds	r4, #1
 268:	4798      	blx	r3
 26a:	42a5      	cmp	r5, r4
 26c:	d1f3      	bne.n	256 <__libc_init_array+0x4e>
 26e:	bd70      	pop	{r4, r5, r6, pc}

00000270 <register_fini>:
 270:	f240 0300 	movw	r3, #0
 274:	f2c0 0300 	movt	r3, #0
 278:	b510      	push	{r4, lr}
 27a:	b12b      	cbz	r3, 288 <register_fini+0x18>
 27c:	f240 209d 	movw	r0, #669	; 0x29d
 280:	f2c0 0000 	movt	r0, #0
 284:	f000 f802 	bl	28c <atexit>
 288:	bd10      	pop	{r4, pc}
 28a:	46c0      	nop			; (mov r8, r8)

0000028c <atexit>:
 28c:	b510      	push	{r4, lr}
 28e:	0001      	movs	r1, r0
 290:	2300      	movs	r3, #0
 292:	2200      	movs	r2, #0
 294:	2000      	movs	r0, #0
 296:	f000 f825 	bl	2e4 <__register_exitproc>
 29a:	bd10      	pop	{r4, pc}

0000029c <__libc_fini_array>:
 29c:	b570      	push	{r4, r5, r6, lr}
 29e:	f240 33fc 	movw	r3, #1020	; 0x3fc
 2a2:	f240 4400 	movw	r4, #1024	; 0x400
 2a6:	f2c0 0300 	movt	r3, #0
 2aa:	f2c0 0400 	movt	r4, #0
 2ae:	1ae4      	subs	r4, r4, r3
 2b0:	10a4      	asrs	r4, r4, #2
 2b2:	b174      	cbz	r4, 2d2 <__libc_fini_array+0x36>
 2b4:	4b08      	ldr	r3, [pc, #32]	; (2d8 <__libc_fini_array+0x3c>)
 2b6:	18e5      	adds	r5, r4, r3
 2b8:	f240 33fc 	movw	r3, #1020	; 0x3fc
 2bc:	f2c0 0300 	movt	r3, #0
 2c0:	469c      	mov	ip, r3
 2c2:	00ad      	lsls	r5, r5, #2
 2c4:	4465      	add	r5, ip
 2c6:	682b      	ldr	r3, [r5, #0]
 2c8:	3c01      	subs	r4, #1
 2ca:	4798      	blx	r3
 2cc:	3d04      	subs	r5, #4
 2ce:	2c00      	cmp	r4, #0
 2d0:	d1f9      	bne.n	2c6 <__libc_fini_array+0x2a>
 2d2:	f000 f88d 	bl	3f0 <_fini>
 2d6:	bd70      	pop	{r4, r5, r6, pc}
 2d8:	3fffffff 	.word	0x3fffffff

000002dc <__retarget_lock_acquire_recursive>:
 2dc:	4770      	bx	lr
 2de:	46c0      	nop			; (mov r8, r8)

000002e0 <__retarget_lock_release_recursive>:
 2e0:	4770      	bx	lr
 2e2:	46c0      	nop			; (mov r8, r8)

000002e4 <__register_exitproc>:
 2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 2e6:	464e      	mov	r6, r9
 2e8:	4645      	mov	r5, r8
 2ea:	46de      	mov	lr, fp
 2ec:	4657      	mov	r7, sl
 2ee:	f240 4430 	movw	r4, #1072	; 0x430
 2f2:	b5e0      	push	{r5, r6, r7, lr}
 2f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 2f8:	b083      	sub	sp, #12
 2fa:	0006      	movs	r6, r0
 2fc:	6820      	ldr	r0, [r4, #0]
 2fe:	4698      	mov	r8, r3
 300:	000f      	movs	r7, r1
 302:	4691      	mov	r9, r2
 304:	f7ff ffea 	bl	2dc <__retarget_lock_acquire_recursive>
 308:	f240 33d8 	movw	r3, #984	; 0x3d8
 30c:	f2c0 0300 	movt	r3, #0
 310:	681d      	ldr	r5, [r3, #0]
 312:	f240 1348 	movw	r3, #328	; 0x148
 316:	58e8      	ldr	r0, [r5, r3]
 318:	2800      	cmp	r0, #0
 31a:	d052      	beq.n	3c2 <__register_exitproc+0xde>
 31c:	6843      	ldr	r3, [r0, #4]
 31e:	2b1f      	cmp	r3, #31
 320:	dc12      	bgt.n	348 <__register_exitproc+0x64>
 322:	1c5a      	adds	r2, r3, #1
 324:	9201      	str	r2, [sp, #4]
 326:	bb4e      	cbnz	r6, 37c <__register_exitproc+0x98>
 328:	9a01      	ldr	r2, [sp, #4]
 32a:	3302      	adds	r3, #2
 32c:	009b      	lsls	r3, r3, #2
 32e:	6042      	str	r2, [r0, #4]
 330:	501f      	str	r7, [r3, r0]
 332:	6820      	ldr	r0, [r4, #0]
 334:	f7ff ffd4 	bl	2e0 <__retarget_lock_release_recursive>
 338:	2000      	movs	r0, #0
 33a:	b003      	add	sp, #12
 33c:	bc3c      	pop	{r2, r3, r4, r5}
 33e:	4690      	mov	r8, r2
 340:	4699      	mov	r9, r3
 342:	46a2      	mov	sl, r4
 344:	46ab      	mov	fp, r5
 346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 348:	f240 0300 	movw	r3, #0
 34c:	f2c0 0300 	movt	r3, #0
 350:	b3e3      	cbz	r3, 3cc <__register_exitproc+0xe8>
 352:	f240 1090 	movw	r0, #400	; 0x190
 356:	e000      	b.n	35a <__register_exitproc+0x76>
 358:	bf00      	nop
 35a:	b3b8      	cbz	r0, 3cc <__register_exitproc+0xe8>
 35c:	f240 1248 	movw	r2, #328	; 0x148
 360:	2300      	movs	r3, #0
 362:	58a9      	ldr	r1, [r5, r2]
 364:	6043      	str	r3, [r0, #4]
 366:	6001      	str	r1, [r0, #0]
 368:	50a8      	str	r0, [r5, r2]
 36a:	3240      	adds	r2, #64	; 0x40
 36c:	5083      	str	r3, [r0, r2]
 36e:	3204      	adds	r2, #4
 370:	5083      	str	r3, [r0, r2]
 372:	3301      	adds	r3, #1
 374:	9301      	str	r3, [sp, #4]
 376:	2300      	movs	r3, #0
 378:	2e00      	cmp	r6, #0
 37a:	d0d5      	beq.n	328 <__register_exitproc+0x44>
 37c:	009a      	lsls	r2, r3, #2
 37e:	4692      	mov	sl, r2
 380:	464a      	mov	r2, r9
 382:	4482      	add	sl, r0
 384:	f240 1988 	movw	r9, #392	; 0x188
 388:	2188      	movs	r1, #136	; 0x88
 38a:	4655      	mov	r5, sl
 38c:	4481      	add	r9, r0
 38e:	506a      	str	r2, [r5, r1]
 390:	464a      	mov	r2, r9
 392:	3987      	subs	r1, #135	; 0x87
 394:	4099      	lsls	r1, r3
 396:	6812      	ldr	r2, [r2, #0]
 398:	468b      	mov	fp, r1
 39a:	430a      	orrs	r2, r1
 39c:	4694      	mov	ip, r2
 39e:	464a      	mov	r2, r9
 3a0:	4661      	mov	r1, ip
 3a2:	f240 1c08 	movw	ip, #264	; 0x108
 3a6:	6011      	str	r1, [r2, #0]
 3a8:	4662      	mov	r2, ip
 3aa:	4641      	mov	r1, r8
 3ac:	50a9      	str	r1, [r5, r2]
 3ae:	2e02      	cmp	r6, #2
 3b0:	d1ba      	bne.n	328 <__register_exitproc+0x44>
 3b2:	0002      	movs	r2, r0
 3b4:	465d      	mov	r5, fp
 3b6:	328d      	adds	r2, #141	; 0x8d
 3b8:	32ff      	adds	r2, #255	; 0xff
 3ba:	6811      	ldr	r1, [r2, #0]
 3bc:	430d      	orrs	r5, r1
 3be:	6015      	str	r5, [r2, #0]
 3c0:	e7b2      	b.n	328 <__register_exitproc+0x44>
 3c2:	0028      	movs	r0, r5
 3c4:	304d      	adds	r0, #77	; 0x4d
 3c6:	30ff      	adds	r0, #255	; 0xff
 3c8:	50e8      	str	r0, [r5, r3]
 3ca:	e7a7      	b.n	31c <__register_exitproc+0x38>
 3cc:	6820      	ldr	r0, [r4, #0]
 3ce:	f7ff ff87 	bl	2e0 <__retarget_lock_release_recursive>
 3d2:	2001      	movs	r0, #1
 3d4:	4240      	negs	r0, r0
 3d6:	e7b0      	b.n	33a <__register_exitproc+0x56>

000003d8 <_global_impure_ptr>:
 3d8:	0008 2000                                   ... 

000003dc <_init>:
 3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3de:	46c0      	nop			; (mov r8, r8)
 3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3e2:	bc08      	pop	{r3}
 3e4:	469e      	mov	lr, r3
 3e6:	4770      	bx	lr

000003e8 <__init_array_start>:
 3e8:	00000271 	.word	0x00000271

000003ec <__frame_dummy_init_array_entry>:
 3ec:	00000121                                !...

000003f0 <_fini>:
 3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3f2:	46c0      	nop			; (mov r8, r8)
 3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3f6:	bc08      	pop	{r3}
 3f8:	469e      	mov	lr, r3
 3fa:	4770      	bx	lr

000003fc <__fini_array_start>:
 3fc:	000000f5 	.word	0x000000f5
