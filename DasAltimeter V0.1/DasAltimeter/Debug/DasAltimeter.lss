
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e70  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00001e70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  000022b0  00020438  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00002450  00020438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010e58  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001321  00000000  00000000  00031311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000126a  00000000  00000000  00032632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  0003389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c0  00000000  00000000  00033abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001386c  00000000  00000000  00033c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004b54  00000000  00000000  000474e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071853  00000000  00000000  0004c03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007b4  00000000  00000000  000bd890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e0 	.word	0x200025e0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00001e70 	.word	0x00001e70

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00001e70 	.word	0x00001e70
     10c:	00001e70 	.word	0x00001e70
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	00001e70 	.word	0x00001e70
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e0 	.word	0x200005e0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001a3d 	.word	0x00001a3d
     20c:	00000371 	.word	0x00000371

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	4657      	mov	r7, sl
     224:	464e      	mov	r6, r9
     226:	4645      	mov	r5, r8
     228:	b4e0      	push	{r5, r6, r7}
     22a:	b082      	sub	sp, #8
    SystemInit();
     22c:	4b46      	ldr	r3, [pc, #280]	; (348 <init+0x128>)
     22e:	4798      	blx	r3
    GclkInit();
     230:	4b46      	ldr	r3, [pc, #280]	; (34c <init+0x12c>)
     232:	4798      	blx	r3
    delayInit();
     234:	4b46      	ldr	r3, [pc, #280]	; (350 <init+0x130>)
     236:	4798      	blx	r3
    adcInit();
     238:	4b46      	ldr	r3, [pc, #280]	; (354 <init+0x134>)
     23a:	4798      	blx	r3
    dmaInit();
     23c:	4b46      	ldr	r3, [pc, #280]	; (358 <init+0x138>)
     23e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     240:	4b46      	ldr	r3, [pc, #280]	; (35c <init+0x13c>)
     242:	2240      	movs	r2, #64	; 0x40
     244:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     246:	21c1      	movs	r1, #193	; 0xc1
     248:	0089      	lsls	r1, r1, #2
     24a:	5858      	ldr	r0, [r3, r1]
     24c:	4a44      	ldr	r2, [pc, #272]	; (360 <init+0x140>)
     24e:	4002      	ands	r2, r0
     250:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     252:	4b44      	ldr	r3, [pc, #272]	; (364 <init+0x144>)
     254:	205c      	movs	r0, #92	; 0x5c
     256:	5c19      	ldrb	r1, [r3, r0]
     258:	2201      	movs	r2, #1
     25a:	4391      	bics	r1, r2
     25c:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     25e:	2180      	movs	r1, #128	; 0x80
     260:	0549      	lsls	r1, r1, #21
     262:	6099      	str	r1, [r3, #8]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     264:	2432      	movs	r4, #50	; 0x32
     266:	5d19      	ldrb	r1, [r3, r4]
     268:	384d      	subs	r0, #77	; 0x4d
     26a:	4680      	mov	r8, r0
     26c:	4001      	ands	r1, r0
     26e:	2010      	movs	r0, #16
     270:	4301      	orrs	r1, r0
     272:	5519      	strb	r1, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     274:	3413      	adds	r4, #19
     276:	5d18      	ldrb	r0, [r3, r4]
     278:	2101      	movs	r1, #1
     27a:	4308      	orrs	r0, r1
     27c:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     27e:	254c      	movs	r5, #76	; 0x4c
     280:	5d58      	ldrb	r0, [r3, r5]
     282:	4390      	bics	r0, r2
     284:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     286:	2080      	movs	r0, #128	; 0x80
     288:	0140      	lsls	r0, r0, #5
     28a:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     28c:	274d      	movs	r7, #77	; 0x4d
     28e:	5dd8      	ldrb	r0, [r3, r7]
     290:	4390      	bics	r0, r2
     292:	55d8      	strb	r0, [r3, r7]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     294:	2080      	movs	r0, #128	; 0x80
     296:	0180      	lsls	r0, r0, #6
     298:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     29a:	204f      	movs	r0, #79	; 0x4f
     29c:	5c1c      	ldrb	r4, [r3, r0]
     29e:	4394      	bics	r4, r2
     2a0:	541c      	strb	r4, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2a2:	5c1c      	ldrb	r4, [r3, r0]
     2a4:	2602      	movs	r6, #2
     2a6:	46b2      	mov	sl, r6
     2a8:	4656      	mov	r6, sl
     2aa:	4334      	orrs	r4, r6
     2ac:	541c      	strb	r4, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2ae:	2480      	movs	r4, #128	; 0x80
     2b0:	0224      	lsls	r4, r4, #8
     2b2:	605c      	str	r4, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2b4:	2437      	movs	r4, #55	; 0x37
     2b6:	46a1      	mov	r9, r4
     2b8:	5d1c      	ldrb	r4, [r3, r4]
     2ba:	4646      	mov	r6, r8
     2bc:	4034      	ands	r4, r6
     2be:	2620      	movs	r6, #32
     2c0:	46b4      	mov	ip, r6
     2c2:	4666      	mov	r6, ip
     2c4:	4334      	orrs	r4, r6
     2c6:	464e      	mov	r6, r9
     2c8:	559c      	strb	r4, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2ca:	5c1c      	ldrb	r4, [r3, r0]
     2cc:	430c      	orrs	r4, r1
     2ce:	541c      	strb	r4, [r3, r0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d0:	3819      	subs	r0, #25
     2d2:	5c1c      	ldrb	r4, [r3, r0]
     2d4:	4646      	mov	r6, r8
     2d6:	4034      	ands	r4, r6
     2d8:	4666      	mov	r6, ip
     2da:	4334      	orrs	r4, r6
     2dc:	541c      	strb	r4, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2de:	5ddc      	ldrb	r4, [r3, r7]
     2e0:	430c      	orrs	r4, r1
     2e2:	55dc      	strb	r4, [r3, r7]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2e4:	5c1c      	ldrb	r4, [r3, r0]
     2e6:	3f3e      	subs	r7, #62	; 0x3e
     2e8:	43bc      	bics	r4, r7
     2ea:	4656      	mov	r6, sl
     2ec:	4326      	orrs	r6, r4
     2ee:	541e      	strb	r6, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f0:	5d58      	ldrb	r0, [r3, r5]
     2f2:	4301      	orrs	r1, r0
     2f4:	5559      	strb	r1, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2f6:	2154      	movs	r1, #84	; 0x54
     2f8:	5c58      	ldrb	r0, [r3, r1]
     2fa:	4390      	bics	r0, r2
     2fc:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2fe:	2080      	movs	r0, #128	; 0x80
     300:	0340      	lsls	r0, r0, #13
     302:	6098      	str	r0, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     304:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     306:	5c58      	ldrb	r0, [r3, r1]
     308:	4390      	bics	r0, r2
     30a:	5458      	strb	r0, [r3, r1]
     30c:	3906      	subs	r1, #6
     30e:	5c58      	ldrb	r0, [r3, r1]
     310:	4390      	bics	r0, r2
     312:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     314:	2080      	movs	r0, #128	; 0x80
     316:	01c0      	lsls	r0, r0, #7
     318:	6098      	str	r0, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     31a:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     31c:	5c58      	ldrb	r0, [r3, r1]
     31e:	4390      	bics	r0, r2
     320:	5458      	strb	r0, [r3, r1]
    pinOut(cs_baro);
    pinHigh(cs_baro);
    pinGpio(cs_baro);


    sercomClockEnable(SPI1, 3, 4);
     322:	2204      	movs	r2, #4
     324:	394b      	subs	r1, #75	; 0x4b
     326:	2002      	movs	r0, #2
     328:	4b0f      	ldr	r3, [pc, #60]	; (368 <init+0x148>)
     32a:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     32c:	2300      	movs	r3, #0
     32e:	9301      	str	r3, [sp, #4]
     330:	9300      	str	r3, [sp, #0]
     332:	2200      	movs	r2, #0
     334:	2103      	movs	r1, #3
     336:	2002      	movs	r0, #2
     338:	4c0c      	ldr	r4, [pc, #48]	; (36c <init+0x14c>)
     33a:	47a0      	blx	r4

}
     33c:	b002      	add	sp, #8
     33e:	bc1c      	pop	{r2, r3, r4}
     340:	4690      	mov	r8, r2
     342:	4699      	mov	r9, r3
     344:	46a2      	mov	sl, r4
     346:	bdf0      	pop	{r4, r5, r6, r7, pc}
     348:	00000211 	.word	0x00000211
     34c:	00000535 	.word	0x00000535
     350:	00000605 	.word	0x00000605
     354:	00000435 	.word	0x00000435
     358:	0000067d 	.word	0x0000067d
     35c:	e000e100 	.word	0xe000e100
     360:	ff00ffff 	.word	0xff00ffff
     364:	41004400 	.word	0x41004400
     368:	00000b49 	.word	0x00000b49
     36c:	00000bb1 	.word	0x00000bb1

00000370 <main>:


int main(void) {
     370:	b5f0      	push	{r4, r5, r6, r7, lr}
     372:	b0a1      	sub	sp, #132	; 0x84

    init();
     374:	4b20      	ldr	r3, [pc, #128]	; (3f8 <main+0x88>)
     376:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     378:	a805      	add	r0, sp, #20
     37a:	4b20      	ldr	r3, [pc, #128]	; (3fc <main+0x8c>)
     37c:	4798      	blx	r3


    volatile long counter = 0;
     37e:	2300      	movs	r3, #0
     380:	9304      	str	r3, [sp, #16]

        counter++;
//       pinToggle(LedPin);


        sampleTick(&my_altimeter);
     382:	4e1f      	ldr	r6, [pc, #124]	; (400 <main+0x90>)


        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

        analogSample = adc_read(analogAccelPin);
     384:	4f1f      	ldr	r7, [pc, #124]	; (404 <main+0x94>)
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;

        if (counter == 100) {
            pinToggle(LedPin);

            averageAlt = averageAlt / 100;
     386:	4d20      	ldr	r5, [pc, #128]	; (408 <main+0x98>)

    while (1) {

        //   delay_ms(50);

        counter++;
     388:	9b04      	ldr	r3, [sp, #16]
     38a:	3301      	adds	r3, #1
     38c:	9304      	str	r3, [sp, #16]
//       pinToggle(LedPin);


        sampleTick(&my_altimeter);
     38e:	a805      	add	r0, sp, #20
     390:	47b0      	blx	r6


        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

        analogSample = adc_read(analogAccelPin);
     392:	6838      	ldr	r0, [r7, #0]
     394:	6879      	ldr	r1, [r7, #4]
     396:	4b1d      	ldr	r3, [pc, #116]	; (40c <main+0x9c>)
     398:	4798      	blx	r3
     39a:	466b      	mov	r3, sp
     39c:	80d8      	strh	r0, [r3, #6]
        accelX = (analogSample - 3920) * 0.0227;
     39e:	88d8      	ldrh	r0, [r3, #6]
     3a0:	4b1b      	ldr	r3, [pc, #108]	; (410 <main+0xa0>)
     3a2:	469c      	mov	ip, r3
     3a4:	4460      	add	r0, ip
     3a6:	4b1b      	ldr	r3, [pc, #108]	; (414 <main+0xa4>)
     3a8:	4798      	blx	r3
     3aa:	4a1b      	ldr	r2, [pc, #108]	; (418 <main+0xa8>)
     3ac:	4b1b      	ldr	r3, [pc, #108]	; (41c <main+0xac>)
     3ae:	4c1c      	ldr	r4, [pc, #112]	; (420 <main+0xb0>)
     3b0:	47a0      	blx	r4
     3b2:	4b1c      	ldr	r3, [pc, #112]	; (424 <main+0xb4>)
     3b4:	4798      	blx	r3
     3b6:	9000      	str	r0, [sp, #0]

        averageAccel = averageAccel + accelX;
     3b8:	9803      	ldr	r0, [sp, #12]
     3ba:	9900      	ldr	r1, [sp, #0]
     3bc:	4c1a      	ldr	r4, [pc, #104]	; (428 <main+0xb8>)
     3be:	47a0      	blx	r4
     3c0:	9003      	str	r0, [sp, #12]
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     3c2:	9802      	ldr	r0, [sp, #8]
     3c4:	990e      	ldr	r1, [sp, #56]	; 0x38
     3c6:	47a0      	blx	r4
     3c8:	9002      	str	r0, [sp, #8]

        if (counter == 100) {
     3ca:	9b04      	ldr	r3, [sp, #16]
     3cc:	2b64      	cmp	r3, #100	; 0x64
     3ce:	d1db      	bne.n	388 <main+0x18>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     3d0:	2280      	movs	r2, #128	; 0x80
     3d2:	0552      	lsls	r2, r2, #21
     3d4:	4b15      	ldr	r3, [pc, #84]	; (42c <main+0xbc>)
     3d6:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);

            averageAlt = averageAlt / 100;
     3d8:	9802      	ldr	r0, [sp, #8]
     3da:	4c15      	ldr	r4, [pc, #84]	; (430 <main+0xc0>)
     3dc:	1c29      	adds	r1, r5, #0
     3de:	47a0      	blx	r4
     3e0:	9002      	str	r0, [sp, #8]
            averageAccel = averageAccel / 100;
     3e2:	9803      	ldr	r0, [sp, #12]
     3e4:	1c29      	adds	r1, r5, #0
     3e6:	47a0      	blx	r4
     3e8:	9003      	str	r0, [sp, #12]

            counter = -1;
     3ea:	2301      	movs	r3, #1
     3ec:	425b      	negs	r3, r3
     3ee:	9304      	str	r3, [sp, #16]

            averageAccel = 0;
     3f0:	2300      	movs	r3, #0
     3f2:	9303      	str	r3, [sp, #12]
            averageAlt = 0;
     3f4:	9302      	str	r3, [sp, #8]
     3f6:	e7c7      	b.n	388 <main+0x18>
     3f8:	00000221 	.word	0x00000221
     3fc:	000008e9 	.word	0x000008e9
     400:	00000945 	.word	0x00000945
     404:	00001c40 	.word	0x00001c40
     408:	42c80000 	.word	0x42c80000
     40c:	000004b5 	.word	0x000004b5
     410:	fffff0b0 	.word	0xfffff0b0
     414:	000017bd 	.word	0x000017bd
     418:	367a0f91 	.word	0x367a0f91
     41c:	3f973eab 	.word	0x3f973eab
     420:	000012c9 	.word	0x000012c9
     424:	000018e9 	.word	0x000018e9
     428:	00000c9d 	.word	0x00000c9d
     42c:	41004400 	.word	0x41004400
     430:	00000f89 	.word	0x00000f89

00000434 <adcInit>:


#include <util.h>

void adcInit() {
     434:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     436:	4a12      	ldr	r2, [pc, #72]	; (480 <adcInit+0x4c>)
     438:	6a13      	ldr	r3, [r2, #32]
     43a:	2180      	movs	r1, #128	; 0x80
     43c:	0249      	lsls	r1, r1, #9
     43e:	430b      	orrs	r3, r1
     440:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     442:	4910      	ldr	r1, [pc, #64]	; (484 <adcInit+0x50>)
     444:	22e0      	movs	r2, #224	; 0xe0
     446:	00d2      	lsls	r2, r2, #3
     448:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     44a:	480f      	ldr	r0, [pc, #60]	; (488 <adcInit+0x54>)
     44c:	4b0f      	ldr	r3, [pc, #60]	; (48c <adcInit+0x58>)
     44e:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     450:	4b0f      	ldr	r3, [pc, #60]	; (490 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     452:	681b      	ldr	r3, [r3, #0]
     454:	015b      	lsls	r3, r3, #5
     456:	4013      	ands	r3, r2
     458:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     45a:	4b0e      	ldr	r3, [pc, #56]	; (494 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     45c:	685a      	ldr	r2, [r3, #4]
     45e:	0154      	lsls	r4, r2, #5
     460:	681a      	ldr	r2, [r3, #0]
     462:	0ed3      	lsrs	r3, r2, #27
     464:	4323      	orrs	r3, r4
     466:	22ff      	movs	r2, #255	; 0xff
     468:	4013      	ands	r3, r2
     46a:	4303      	orrs	r3, r0
     46c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     46e:	2302      	movs	r3, #2
     470:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     472:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     474:	000a      	movs	r2, r1
     476:	7e53      	ldrb	r3, [r2, #25]
     478:	b25b      	sxtb	r3, r3
     47a:	2b00      	cmp	r3, #0
     47c:	dbfb      	blt.n	476 <adcInit+0x42>
}
     47e:	bd10      	pop	{r4, pc}
     480:	40000400 	.word	0x40000400
     484:	42004000 	.word	0x42004000
     488:	0000401e 	.word	0x0000401e
     48c:	40000c00 	.word	0x40000c00
     490:	00806024 	.word	0x00806024
     494:	00806020 	.word	0x00806020

00000498 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     498:	2202      	movs	r2, #2
     49a:	4b05      	ldr	r3, [pc, #20]	; (4b0 <adcSample+0x18>)
     49c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     49e:	0019      	movs	r1, r3
     4a0:	3a01      	subs	r2, #1
     4a2:	7e0b      	ldrb	r3, [r1, #24]
     4a4:	4213      	tst	r3, r2
     4a6:	d0fc      	beq.n	4a2 <adcSample+0xa>
    return ADC->RESULT.reg;
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <adcSample+0x18>)
     4aa:	8b58      	ldrh	r0, [r3, #26]
     4ac:	b280      	uxth	r0, r0
}
     4ae:	4770      	bx	lr
     4b0:	42004000 	.word	0x42004000

000004b4 <adc_read>:


u16_t adc_read(Pin p) {
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	b083      	sub	sp, #12
     4b8:	0c03      	lsrs	r3, r0, #16
     4ba:	0002      	movs	r2, r0
     4bc:	9000      	str	r0, [sp, #0]
     4be:	9101      	str	r1, [sp, #4]
     4c0:	b2c9      	uxtb	r1, r1
     4c2:	b2db      	uxtb	r3, r3
     4c4:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     4c6:	07c2      	lsls	r2, r0, #31
     4c8:	d50c      	bpl.n	4e4 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     4ca:	0842      	lsrs	r2, r0, #1
     4cc:	01dc      	lsls	r4, r3, #7
     4ce:	1912      	adds	r2, r2, r4
     4d0:	4c14      	ldr	r4, [pc, #80]	; (524 <adc_read+0x70>)
     4d2:	46a4      	mov	ip, r4
     4d4:	4462      	add	r2, ip
     4d6:	7814      	ldrb	r4, [r2, #0]
     4d8:	250f      	movs	r5, #15
     4da:	402c      	ands	r4, r5
     4dc:	2510      	movs	r5, #16
     4de:	432c      	orrs	r4, r5
     4e0:	7014      	strb	r4, [r2, #0]
     4e2:	e00b      	b.n	4fc <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     4e4:	0842      	lsrs	r2, r0, #1
     4e6:	01dc      	lsls	r4, r3, #7
     4e8:	1912      	adds	r2, r2, r4
     4ea:	4c0e      	ldr	r4, [pc, #56]	; (524 <adc_read+0x70>)
     4ec:	46a4      	mov	ip, r4
     4ee:	4462      	add	r2, ip
     4f0:	7814      	ldrb	r4, [r2, #0]
     4f2:	250f      	movs	r5, #15
     4f4:	43ac      	bics	r4, r5
     4f6:	2501      	movs	r5, #1
     4f8:	432c      	orrs	r4, r5
     4fa:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     4fc:	01db      	lsls	r3, r3, #7
     4fe:	18c0      	adds	r0, r0, r3
     500:	4b09      	ldr	r3, [pc, #36]	; (528 <adc_read+0x74>)
     502:	469c      	mov	ip, r3
     504:	4460      	add	r0, ip
     506:	7802      	ldrb	r2, [r0, #0]
     508:	2301      	movs	r3, #1
     50a:	4313      	orrs	r3, r2
     50c:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     50e:	231f      	movs	r3, #31
     510:	4019      	ands	r1, r3
     512:	23c0      	movs	r3, #192	; 0xc0
     514:	015b      	lsls	r3, r3, #5
     516:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     518:	4b04      	ldr	r3, [pc, #16]	; (52c <adc_read+0x78>)
     51a:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     51c:	4b04      	ldr	r3, [pc, #16]	; (530 <adc_read+0x7c>)
     51e:	4798      	blx	r3
     520:	b003      	add	sp, #12
     522:	bd30      	pop	{r4, r5, pc}
     524:	41004430 	.word	0x41004430
     528:	41004440 	.word	0x41004440
     52c:	42004000 	.word	0x42004000
     530:	00000499 	.word	0x00000499

00000534 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     534:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     536:	4a1c      	ldr	r2, [pc, #112]	; (5a8 <GclkInit+0x74>)
     538:	23c2      	movs	r3, #194	; 0xc2
     53a:	00db      	lsls	r3, r3, #3
     53c:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     53e:	491b      	ldr	r1, [pc, #108]	; (5ac <GclkInit+0x78>)
     540:	6848      	ldr	r0, [r1, #4]
     542:	2302      	movs	r3, #2
     544:	4303      	orrs	r3, r0
     546:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     548:	4b19      	ldr	r3, [pc, #100]	; (5b0 <GclkInit+0x7c>)
     54a:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     54c:	0011      	movs	r1, r2
     54e:	2202      	movs	r2, #2
     550:	68cb      	ldr	r3, [r1, #12]
     552:	421a      	tst	r2, r3
     554:	d0fc      	beq.n	550 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     556:	4b17      	ldr	r3, [pc, #92]	; (5b4 <GclkInit+0x80>)
     558:	681c      	ldr	r4, [r3, #0]
     55a:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     55c:	2c3f      	cmp	r4, #63	; 0x3f
     55e:	d100      	bne.n	562 <GclkInit+0x2e>
        coarse = 0x1f;
     560:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     562:	4b15      	ldr	r3, [pc, #84]	; (5b8 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     564:	6818      	ldr	r0, [r3, #0]
     566:	0580      	lsls	r0, r0, #22
     568:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     56a:	4b14      	ldr	r3, [pc, #80]	; (5bc <GclkInit+0x88>)
     56c:	4298      	cmp	r0, r3
     56e:	d100      	bne.n	572 <GclkInit+0x3e>
        fine = 0x1ff;
     570:	4813      	ldr	r0, [pc, #76]	; (5c0 <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     572:	4a14      	ldr	r2, [pc, #80]	; (5c4 <GclkInit+0x90>)
     574:	4b0c      	ldr	r3, [pc, #48]	; (5a8 <GclkInit+0x74>)
     576:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     578:	0019      	movs	r1, r3
     57a:	2210      	movs	r2, #16
     57c:	68cb      	ldr	r3, [r1, #12]
     57e:	421a      	tst	r2, r3
     580:	d0fc      	beq.n	57c <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     582:	02a4      	lsls	r4, r4, #10
     584:	4320      	orrs	r0, r4
     586:	4b08      	ldr	r3, [pc, #32]	; (5a8 <GclkInit+0x74>)
     588:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     58a:	0019      	movs	r1, r3
     58c:	2210      	movs	r2, #16
     58e:	68cb      	ldr	r3, [r1, #12]
     590:	421a      	tst	r2, r3
     592:	d0fc      	beq.n	58e <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     594:	4a0c      	ldr	r2, [pc, #48]	; (5c8 <GclkInit+0x94>)
     596:	4b04      	ldr	r3, [pc, #16]	; (5a8 <GclkInit+0x74>)
     598:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     59a:	4b0c      	ldr	r3, [pc, #48]	; (5cc <GclkInit+0x98>)
     59c:	2280      	movs	r2, #128	; 0x80
     59e:	0052      	lsls	r2, r2, #1
     5a0:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     5a2:	4a0b      	ldr	r2, [pc, #44]	; (5d0 <GclkInit+0x9c>)
     5a4:	605a      	str	r2, [r3, #4]
}
     5a6:	bd10      	pop	{r4, pc}
     5a8:	40000800 	.word	0x40000800
     5ac:	41004000 	.word	0x41004000
     5b0:	0000060e 	.word	0x0000060e
     5b4:	00806024 	.word	0x00806024
     5b8:	00806028 	.word	0x00806028
     5bc:	000003ff 	.word	0x000003ff
     5c0:	000001ff 	.word	0x000001ff
     5c4:	00000522 	.word	0x00000522
     5c8:	000005a2 	.word	0x000005a2
     5cc:	40000c00 	.word	0x40000c00
     5d0:	00010700 	.word	0x00010700

000005d4 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     5d4:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     5d6:	230f      	movs	r3, #15
     5d8:	4018      	ands	r0, r3
     5da:	0212      	lsls	r2, r2, #8
     5dc:	4b07      	ldr	r3, [pc, #28]	; (5fc <gclkEnable+0x28>)
     5de:	401a      	ands	r2, r3
     5e0:	4302      	orrs	r2, r0
     5e2:	4c07      	ldr	r4, [pc, #28]	; (600 <gclkEnable+0x2c>)
     5e4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     5e6:	0209      	lsls	r1, r1, #8
     5e8:	23f8      	movs	r3, #248	; 0xf8
     5ea:	015b      	lsls	r3, r3, #5
     5ec:	4019      	ands	r1, r3
     5ee:	2380      	movs	r3, #128	; 0x80
     5f0:	025b      	lsls	r3, r3, #9
     5f2:	4319      	orrs	r1, r3
     5f4:	4308      	orrs	r0, r1
     5f6:	6060      	str	r0, [r4, #4]
}
     5f8:	bd10      	pop	{r4, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	00ffff00 	.word	0x00ffff00
     600:	40000c00 	.word	0x40000c00

00000604 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     604:	4b04      	ldr	r3, [pc, #16]	; (618 <delayInit+0x14>)
     606:	4a05      	ldr	r2, [pc, #20]	; (61c <delayInit+0x18>)
     608:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     60a:	2230      	movs	r2, #48	; 0x30
     60c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     60e:	3a2b      	subs	r2, #43	; 0x2b
     610:	4b03      	ldr	r3, [pc, #12]	; (620 <delayInit+0x1c>)
     612:	601a      	str	r2, [r3, #0]
}
     614:	4770      	bx	lr
     616:	46c0      	nop			; (mov r8, r8)
     618:	20000004 	.word	0x20000004
     61c:	0000bb80 	.word	0x0000bb80
     620:	e000e010 	.word	0xe000e010

00000624 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     624:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     626:	4b08      	ldr	r3, [pc, #32]	; (648 <delay_us+0x24>)
     628:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     62a:	4a08      	ldr	r2, [pc, #32]	; (64c <delay_us+0x28>)
		SysTick->VAL = 0;
     62c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     62e:	2180      	movs	r1, #128	; 0x80
     630:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     632:	e006      	b.n	642 <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     634:	2c00      	cmp	r4, #0
     636:	d004      	beq.n	642 <delay_us+0x1e>
		SysTick->LOAD = n;
     638:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     63a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     63c:	6813      	ldr	r3, [r2, #0]
     63e:	420b      	tst	r3, r1
     640:	d0fc      	beq.n	63c <delay_us+0x18>
     642:	3801      	subs	r0, #1
     644:	d2f6      	bcs.n	634 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     646:	bd30      	pop	{r4, r5, pc}
     648:	20000004 	.word	0x20000004
     64c:	e000e010 	.word	0xe000e010

00000650 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     650:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     652:	4b08      	ldr	r3, [pc, #32]	; (674 <delay_ms+0x24>)
     654:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     656:	4a08      	ldr	r2, [pc, #32]	; (678 <delay_ms+0x28>)
		SysTick->VAL = 0;
     658:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     65a:	2180      	movs	r1, #128	; 0x80
     65c:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     65e:	e006      	b.n	66e <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     660:	2c00      	cmp	r4, #0
     662:	d004      	beq.n	66e <delay_ms+0x1e>
		SysTick->LOAD = n;
     664:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     666:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     668:	6813      	ldr	r3, [r2, #0]
     66a:	420b      	tst	r3, r1
     66c:	d0fc      	beq.n	668 <delay_ms+0x18>
     66e:	3801      	subs	r0, #1
     670:	d2f6      	bcs.n	660 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     672:	bd30      	pop	{r4, r5, pc}
     674:	20000004 	.word	0x20000004
     678:	e000e010 	.word	0xe000e010

0000067c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     67c:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     67e:	4d11      	ldr	r5, [pc, #68]	; (6c4 <dmaInit+0x48>)
     680:	22c0      	movs	r2, #192	; 0xc0
     682:	2100      	movs	r1, #0
     684:	0028      	movs	r0, r5
     686:	4e10      	ldr	r6, [pc, #64]	; (6c8 <dmaInit+0x4c>)
     688:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     68a:	4c10      	ldr	r4, [pc, #64]	; (6cc <dmaInit+0x50>)
     68c:	22c0      	movs	r2, #192	; 0xc0
     68e:	2100      	movs	r1, #0
     690:	0020      	movs	r0, r4
     692:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     694:	4b0e      	ldr	r3, [pc, #56]	; (6d0 <dmaInit+0x54>)
     696:	6959      	ldr	r1, [r3, #20]
     698:	2220      	movs	r2, #32
     69a:	430a      	orrs	r2, r1
     69c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     69e:	69d9      	ldr	r1, [r3, #28]
     6a0:	2210      	movs	r2, #16
     6a2:	430a      	orrs	r2, r1
     6a4:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     6a6:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <dmaInit+0x58>)
     6a8:	881a      	ldrh	r2, [r3, #0]
     6aa:	2102      	movs	r1, #2
     6ac:	438a      	bics	r2, r1
     6ae:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     6b0:	8819      	ldrh	r1, [r3, #0]
     6b2:	2201      	movs	r2, #1
     6b4:	430a      	orrs	r2, r1
     6b6:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     6b8:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     6ba:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     6bc:	4a06      	ldr	r2, [pc, #24]	; (6d8 <dmaInit+0x5c>)
     6be:	801a      	strh	r2, [r3, #0]
}
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	20000520 	.word	0x20000520
     6c8:	00001a85 	.word	0x00001a85
     6cc:	20000460 	.word	0x20000460
     6d0:	40000400 	.word	0x40000400
     6d4:	41004800 	.word	0x41004800
     6d8:	00000f02 	.word	0x00000f02

000006dc <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6de:	4647      	mov	r7, r8
     6e0:	b480      	push	{r7}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e2:	4f0e      	ldr	r7, [pc, #56]	; (71c <readMS5803AdcResults+0x40>)
     6e4:	2480      	movs	r4, #128	; 0x80
     6e6:	01e4      	lsls	r4, r4, #7
     6e8:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     6ea:	2100      	movs	r1, #0
     6ec:	2002      	movs	r0, #2
     6ee:	4d0c      	ldr	r5, [pc, #48]	; (720 <readMS5803AdcResults+0x44>)
     6f0:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     6f2:	21ff      	movs	r1, #255	; 0xff
     6f4:	2002      	movs	r0, #2
     6f6:	47a8      	blx	r5
     6f8:	0006      	movs	r6, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     6fa:	21ff      	movs	r1, #255	; 0xff
     6fc:	2002      	movs	r0, #2
     6fe:	47a8      	blx	r5
     700:	4680      	mov	r8, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     702:	21ff      	movs	r1, #255	; 0xff
     704:	2002      	movs	r0, #2
     706:	47a8      	blx	r5




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     708:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     70a:	0436      	lsls	r6, r6, #16
     70c:	4643      	mov	r3, r8
     70e:	021c      	lsls	r4, r3, #8
     710:	4334      	orrs	r4, r6
     712:	4320      	orrs	r0, r4
}
     714:	bc04      	pop	{r2}
     716:	4690      	mov	r8, r2
     718:	bdf0      	pop	{r4, r5, r6, r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	41004400 	.word	0x41004400
     720:	00000c29 	.word	0x00000c29

00000724 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	464f      	mov	r7, r9
     728:	4646      	mov	r6, r8
     72a:	b4c0      	push	{r6, r7}
     72c:	b08b      	sub	sp, #44	; 0x2c
     72e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     730:	8803      	ldrh	r3, [r0, #0]
     732:	251e      	movs	r5, #30
     734:	aa02      	add	r2, sp, #8
     736:	4694      	mov	ip, r2
     738:	4465      	add	r5, ip
     73a:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     73c:	8843      	ldrh	r3, [r0, #2]
     73e:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     740:	8883      	ldrh	r3, [r0, #4]
     742:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     744:	88c3      	ldrh	r3, [r0, #6]
     746:	ae08      	add	r6, sp, #32
     748:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     74a:	8903      	ldrh	r3, [r0, #8]
     74c:	2216      	movs	r2, #22
     74e:	4462      	add	r2, ip
     750:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     752:	8941      	ldrh	r1, [r0, #10]
     754:	ab07      	add	r3, sp, #28
     756:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     758:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     75a:	0224      	lsls	r4, r4, #8
     75c:	6902      	ldr	r2, [r0, #16]
     75e:	1b14      	subs	r4, r2, r4
     760:	17e2      	asrs	r2, r4, #31
     762:	0011      	movs	r1, r2
     764:	8818      	ldrh	r0, [r3, #0]
     766:	b280      	uxth	r0, r0
     768:	4b2b      	ldr	r3, [pc, #172]	; (818 <ConvertPressureTemperature+0xf4>)
     76a:	4699      	mov	r9, r3
     76c:	0022      	movs	r2, r4
     76e:	9101      	str	r1, [sp, #4]
     770:	000b      	movs	r3, r1
     772:	2100      	movs	r1, #0
     774:	47c8      	blx	r9
     776:	23fa      	movs	r3, #250	; 0xfa
     778:	00db      	lsls	r3, r3, #3
     77a:	469c      	mov	ip, r3
     77c:	4461      	add	r1, ip
     77e:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     780:	ab02      	add	r3, sp, #8
     782:	8b9b      	ldrh	r3, [r3, #28]
     784:	b29b      	uxth	r3, r3
     786:	4698      	mov	r8, r3
     788:	8830      	ldrh	r0, [r6, #0]
     78a:	b280      	uxth	r0, r0
     78c:	0022      	movs	r2, r4
     78e:	9b01      	ldr	r3, [sp, #4]
     790:	2100      	movs	r1, #0
     792:	47c8      	blx	r9
     794:	064e      	lsls	r6, r1, #25
     796:	09c2      	lsrs	r2, r0, #7
     798:	4332      	orrs	r2, r6
     79a:	11cb      	asrs	r3, r1, #7
     79c:	2100      	movs	r1, #0
     79e:	4646      	mov	r6, r8
     7a0:	0430      	lsls	r0, r6, #16
     7a2:	1812      	adds	r2, r2, r0
     7a4:	414b      	adcs	r3, r1
     7a6:	9204      	str	r2, [sp, #16]
     7a8:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     7aa:	882d      	ldrh	r5, [r5, #0]
     7ac:	b2ad      	uxth	r5, r5
     7ae:	aa02      	add	r2, sp, #8
     7b0:	8b50      	ldrh	r0, [r2, #26]
     7b2:	b280      	uxth	r0, r0
     7b4:	0022      	movs	r2, r4
     7b6:	9b01      	ldr	r3, [sp, #4]
     7b8:	2100      	movs	r1, #0
     7ba:	47c8      	blx	r9
     7bc:	060c      	lsls	r4, r1, #24
     7be:	0a02      	lsrs	r2, r0, #8
     7c0:	4322      	orrs	r2, r4
     7c2:	120b      	asrs	r3, r1, #8
     7c4:	2100      	movs	r1, #0
     7c6:	03e8      	lsls	r0, r5, #15
     7c8:	1812      	adds	r2, r2, r0
     7ca:	414b      	adcs	r3, r1
     7cc:	9202      	str	r2, [sp, #8]
     7ce:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     7d0:	9a02      	ldr	r2, [sp, #8]
     7d2:	9b03      	ldr	r3, [sp, #12]
     7d4:	9c04      	ldr	r4, [sp, #16]
     7d6:	9d05      	ldr	r5, [sp, #20]
     7d8:	68f8      	ldr	r0, [r7, #12]
     7da:	2100      	movs	r1, #0
     7dc:	47c8      	blx	r9
     7de:	17ce      	asrs	r6, r1, #31
     7e0:	02f6      	lsls	r6, r6, #11
     7e2:	0af2      	lsrs	r2, r6, #11
     7e4:	2300      	movs	r3, #0
     7e6:	1880      	adds	r0, r0, r2
     7e8:	4159      	adcs	r1, r3
     7ea:	02ce      	lsls	r6, r1, #11
     7ec:	0d42      	lsrs	r2, r0, #21
     7ee:	4332      	orrs	r2, r6
     7f0:	154b      	asrs	r3, r1, #21
     7f2:	1b12      	subs	r2, r2, r4
     7f4:	41ab      	sbcs	r3, r5
     7f6:	17dc      	asrs	r4, r3, #31
     7f8:	0464      	lsls	r4, r4, #17
     7fa:	0c60      	lsrs	r0, r4, #17
     7fc:	2100      	movs	r1, #0
     7fe:	1812      	adds	r2, r2, r0
     800:	414b      	adcs	r3, r1
     802:	0011      	movs	r1, r2
     804:	045b      	lsls	r3, r3, #17
     806:	0bca      	lsrs	r2, r1, #15
     808:	431a      	orrs	r2, r3
     80a:	61fa      	str	r2, [r7, #28]
}
     80c:	b00b      	add	sp, #44	; 0x2c
     80e:	bc0c      	pop	{r2, r3}
     810:	4690      	mov	r8, r2
     812:	4699      	mov	r9, r3
     814:	bdf0      	pop	{r4, r5, r6, r7, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000c45 	.word	0x00000c45

0000081c <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     81c:	b570      	push	{r4, r5, r6, lr}
     81e:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *1;
     820:	69c2      	ldr	r2, [r0, #28]
     822:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     824:	4b0f      	ldr	r3, [pc, #60]	; (864 <pascalToCent+0x48>)
     826:	429a      	cmp	r2, r3
     828:	d902      	bls.n	830 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     82a:	4b0f      	ldr	r3, [pc, #60]	; (868 <pascalToCent+0x4c>)
     82c:	6203      	str	r3, [r0, #32]
     82e:	e018      	b.n	862 <pascalToCent+0x46>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     830:	4b0c      	ldr	r3, [pc, #48]	; (864 <pascalToCent+0x48>)
     832:	1a9b      	subs	r3, r3, r2
     834:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     836:	2b4b      	cmp	r3, #75	; 0x4b
     838:	dd02      	ble.n	840 <pascalToCent+0x24>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <pascalToCent+0x50>)
     83c:	6203      	str	r3, [r0, #32]
     83e:	e010      	b.n	862 <pascalToCent+0x46>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     840:	4d0b      	ldr	r5, [pc, #44]	; (870 <pascalToCent+0x54>)
     842:	0099      	lsls	r1, r3, #2
     844:	5948      	ldr	r0, [r1, r5]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     846:	029e      	lsls	r6, r3, #10
     848:	4906      	ldr	r1, [pc, #24]	; (864 <pascalToCent+0x48>)
     84a:	1b89      	subs	r1, r1, r6
     84c:	1a8a      	subs	r2, r1, r2
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     84e:	3301      	adds	r3, #1
     850:	009b      	lsls	r3, r3, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     852:	595b      	ldr	r3, [r3, r5]
     854:	1a1b      	subs	r3, r3, r0
     856:	435a      	muls	r2, r3
     858:	0a92      	lsrs	r2, r2, #10
     85a:	1810      	adds	r0, r2, r0
     85c:	4b05      	ldr	r3, [pc, #20]	; (874 <pascalToCent+0x58>)
     85e:	4798      	blx	r3
     860:	6220      	str	r0, [r4, #32]
        }
    }
}
     862:	bd70      	pop	{r4, r5, r6, pc}
     864:	000199cc 	.word	0x000199cc
     868:	c6e5c000 	.word	0xc6e5c000
     86c:	497048e0 	.word	0x497048e0
     870:	00001c48 	.word	0x00001c48
     874:	0000124d 	.word	0x0000124d

00000878 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     878:	b5f0      	push	{r4, r5, r6, r7, lr}
     87a:	465f      	mov	r7, fp
     87c:	464e      	mov	r6, r9
     87e:	4645      	mov	r5, r8
     880:	b4e0      	push	{r5, r6, r7}
     882:	4680      	mov	r8, r0
     884:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     886:	4e15      	ldr	r6, [pc, #84]	; (8dc <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     888:	4f15      	ldr	r7, [pc, #84]	; (8e0 <readMS5803Coefficients+0x68>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     88a:	2096      	movs	r0, #150	; 0x96
     88c:	0080      	lsls	r0, r0, #2
     88e:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     890:	2096      	movs	r0, #150	; 0x96
     892:	0080      	lsls	r0, r0, #2
     894:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     896:	4d13      	ldr	r5, [pc, #76]	; (8e4 <readMS5803Coefficients+0x6c>)
     898:	2380      	movs	r3, #128	; 0x80
     89a:	01db      	lsls	r3, r3, #7
     89c:	469b      	mov	fp, r3
     89e:	616b      	str	r3, [r5, #20]
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     8a0:	0021      	movs	r1, r4
     8a2:	2002      	movs	r0, #2
     8a4:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     8a6:	21ff      	movs	r1, #255	; 0xff
     8a8:	2002      	movs	r0, #2
     8aa:	47b8      	blx	r7
     8ac:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     8ae:	21ff      	movs	r1, #255	; 0xff
     8b0:	2002      	movs	r0, #2
     8b2:	47b8      	blx	r7




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b4:	465b      	mov	r3, fp
     8b6:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     8b8:	464b      	mov	r3, r9
     8ba:	021d      	lsls	r5, r3, #8
     8bc:	4328      	orrs	r0, r5
     8be:	4643      	mov	r3, r8
     8c0:	8018      	strh	r0, [r3, #0]
     8c2:	3402      	adds	r4, #2
     8c4:	b2e4      	uxtb	r4, r4
     8c6:	2302      	movs	r3, #2
     8c8:	469c      	mov	ip, r3
     8ca:	44e0      	add	r8, ip
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     8cc:	2cae      	cmp	r4, #174	; 0xae
     8ce:	d1dc      	bne.n	88a <readMS5803Coefficients+0x12>
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     8d0:	bc1c      	pop	{r2, r3, r4}
     8d2:	4690      	mov	r8, r2
     8d4:	4699      	mov	r9, r3
     8d6:	46a3      	mov	fp, r4
     8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	00000625 	.word	0x00000625
     8e0:	00000c29 	.word	0x00000c29
     8e4:	41004400 	.word	0x41004400

000008e8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     8e8:	b570      	push	{r4, r5, r6, lr}
     8ea:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     8ec:	4d0d      	ldr	r5, [pc, #52]	; (924 <initMS5803Barometer+0x3c>)
     8ee:	2680      	movs	r6, #128	; 0x80
     8f0:	01f6      	lsls	r6, r6, #7
     8f2:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     8f4:	211e      	movs	r1, #30
     8f6:	2002      	movs	r0, #2
     8f8:	4b0b      	ldr	r3, [pc, #44]	; (928 <initMS5803Barometer+0x40>)
     8fa:	4798      	blx	r3




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8fc:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     8fe:	20c8      	movs	r0, #200	; 0xc8
     900:	4b0a      	ldr	r3, [pc, #40]	; (92c <initMS5803Barometer+0x44>)
     902:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     904:	0020      	movs	r0, r4
     906:	4b0a      	ldr	r3, [pc, #40]	; (930 <initMS5803Barometer+0x48>)
     908:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     90a:	4b0a      	ldr	r3, [pc, #40]	; (934 <initMS5803Barometer+0x4c>)
     90c:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     90e:	4b0a      	ldr	r3, [pc, #40]	; (938 <initMS5803Barometer+0x50>)
     910:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <initMS5803Barometer+0x54>)
     914:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     916:	4b0a      	ldr	r3, [pc, #40]	; (940 <initMS5803Barometer+0x58>)
     918:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     91a:	23fa      	movs	r3, #250	; 0xfa
     91c:	00db      	lsls	r3, r3, #3
     91e:	6163      	str	r3, [r4, #20]




}
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	41004400 	.word	0x41004400
     928:	00000c29 	.word	0x00000c29
     92c:	00000651 	.word	0x00000651
     930:	00000879 	.word	0x00000879
     934:	457a0000 	.word	0x457a0000
     938:	00002710 	.word	0x00002710
     93c:	0041c9fe 	.word	0x0041c9fe
     940:	007ffae4 	.word	0x007ffae4

00000944 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     946:	465f      	mov	r7, fp
     948:	4656      	mov	r6, sl
     94a:	464d      	mov	r5, r9
     94c:	4644      	mov	r4, r8
     94e:	b4f0      	push	{r4, r5, r6, r7}
     950:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBat));
     952:	4b69      	ldr	r3, [pc, #420]	; (af8 <sampleTick+0x1b4>)
     954:	6818      	ldr	r0, [r3, #0]
     956:	6859      	ldr	r1, [r3, #4]
     958:	4b68      	ldr	r3, [pc, #416]	; (afc <sampleTick+0x1b8>)
     95a:	4798      	blx	r3
     95c:	4b68      	ldr	r3, [pc, #416]	; (b00 <sampleTick+0x1bc>)
     95e:	4798      	blx	r3
     960:	4b68      	ldr	r3, [pc, #416]	; (b04 <sampleTick+0x1c0>)
     962:	4699      	mov	r9, r3
     964:	4a68      	ldr	r2, [pc, #416]	; (b08 <sampleTick+0x1c4>)
     966:	4b69      	ldr	r3, [pc, #420]	; (b0c <sampleTick+0x1c8>)
     968:	47c8      	blx	r9
     96a:	4b69      	ldr	r3, [pc, #420]	; (b10 <sampleTick+0x1cc>)
     96c:	4698      	mov	r8, r3
     96e:	4798      	blx	r3
     970:	66a0      	str	r0, [r4, #104]	; 0x68
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     972:	4d68      	ldr	r5, [pc, #416]	; (b14 <sampleTick+0x1d0>)
     974:	2780      	movs	r7, #128	; 0x80
     976:	01ff      	lsls	r7, r7, #7
     978:	616f      	str	r7, [r5, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;


    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     97a:	2150      	movs	r1, #80	; 0x50
     97c:	2002      	movs	r0, #2
     97e:	4e66      	ldr	r6, [pc, #408]	; (b18 <sampleTick+0x1d4>)
     980:	47b0      	blx	r6




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     982:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     984:	2002      	movs	r0, #2
     986:	4b65      	ldr	r3, [pc, #404]	; (b1c <sampleTick+0x1d8>)
     988:	469b      	mov	fp, r3
     98a:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     98c:	4b64      	ldr	r3, [pc, #400]	; (b20 <sampleTick+0x1dc>)
     98e:	469a      	mov	sl, r3
     990:	4798      	blx	r3
     992:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     994:	616f      	str	r7, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     996:	2142      	movs	r1, #66	; 0x42
     998:	2002      	movs	r0, #2
     99a:	47b0      	blx	r6




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     99c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     99e:	2002      	movs	r0, #2
     9a0:	47d8      	blx	fp
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     9a2:	47d0      	blx	sl
     9a4:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     9a6:	0020      	movs	r0, r4
     9a8:	4b5e      	ldr	r3, [pc, #376]	; (b24 <sampleTick+0x1e0>)
     9aa:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     9ac:	0020      	movs	r0, r4
     9ae:	4b5e      	ldr	r3, [pc, #376]	; (b28 <sampleTick+0x1e4>)
     9b0:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     9b2:	6a20      	ldr	r0, [r4, #32]
     9b4:	4b5d      	ldr	r3, [pc, #372]	; (b2c <sampleTick+0x1e8>)
     9b6:	4798      	blx	r3
     9b8:	4a5d      	ldr	r2, [pc, #372]	; (b30 <sampleTick+0x1ec>)
     9ba:	4b5e      	ldr	r3, [pc, #376]	; (b34 <sampleTick+0x1f0>)
     9bc:	47c8      	blx	r9
     9be:	47c0      	blx	r8
     9c0:	6260      	str	r0, [r4, #36]	; 0x24
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9c2:	2780      	movs	r7, #128	; 0x80
     9c4:	037f      	lsls	r7, r7, #13
     9c6:	616f      	str	r7, [r5, #20]


 

    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_XOUT_H);
     9c8:	21ba      	movs	r1, #186	; 0xba
     9ca:	2002      	movs	r0, #2
     9cc:	47b0      	blx	r6
    my_altimeter->myIMU.accelXHigh  = spiDataTransfer(SPI1,dummy_Tx);
     9ce:	21ff      	movs	r1, #255	; 0xff
     9d0:	2002      	movs	r0, #2
     9d2:	47b0      	blx	r6
     9d4:	234c      	movs	r3, #76	; 0x4c
     9d6:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXLow  = spiDataTransfer(SPI1,dummy_Tx);
     9d8:	21ff      	movs	r1, #255	; 0xff
     9da:	2002      	movs	r0, #2
     9dc:	47b0      	blx	r6
     9de:	234d      	movs	r3, #77	; 0x4d
     9e0:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9e2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativex = (my_altimeter->myIMU.accelXLow & (1 <<7)) != 0;
     9e4:	5ce3      	ldrb	r3, [r4, r3]
    if (negativex) {
     9e6:	b25a      	sxtb	r2, r3
     9e8:	2a00      	cmp	r2, #0
     9ea:	da09      	bge.n	a00 <sampleTick+0xbc>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
     9ec:	224c      	movs	r2, #76	; 0x4c
     9ee:	5ca2      	ldrb	r2, [r4, r2]
     9f0:	4851      	ldr	r0, [pc, #324]	; (b38 <sampleTick+0x1f4>)
     9f2:	4310      	orrs	r0, r2
     9f4:	021b      	lsls	r3, r3, #8
     9f6:	4318      	orrs	r0, r3
     9f8:	4b50      	ldr	r3, [pc, #320]	; (b3c <sampleTick+0x1f8>)
     9fa:	4798      	blx	r3
     9fc:	62a0      	str	r0, [r4, #40]	; 0x28
     9fe:	e006      	b.n	a0e <sampleTick+0xca>
    } else {
        my_altimeter->myIMU.accelX = (my_altimeter->myIMU.accelXLow << 8) + my_altimeter->myIMU.accelXHigh;
     a00:	021b      	lsls	r3, r3, #8
     a02:	224c      	movs	r2, #76	; 0x4c
     a04:	5ca0      	ldrb	r0, [r4, r2]
     a06:	1818      	adds	r0, r3, r0
     a08:	4b4c      	ldr	r3, [pc, #304]	; (b3c <sampleTick+0x1f8>)
     a0a:	4798      	blx	r3
     a0c:	62a0      	str	r0, [r4, #40]	; 0x28
    }
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelX *0.00006103;
     a0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     a10:	4b46      	ldr	r3, [pc, #280]	; (b2c <sampleTick+0x1e8>)
     a12:	4798      	blx	r3
     a14:	4a4a      	ldr	r2, [pc, #296]	; (b40 <sampleTick+0x1fc>)
     a16:	4b4b      	ldr	r3, [pc, #300]	; (b44 <sampleTick+0x200>)
     a18:	4d3a      	ldr	r5, [pc, #232]	; (b04 <sampleTick+0x1c0>)
     a1a:	47a8      	blx	r5
     a1c:	4b3c      	ldr	r3, [pc, #240]	; (b10 <sampleTick+0x1cc>)
     a1e:	4798      	blx	r3
     a20:	62a0      	str	r0, [r4, #40]	; 0x28
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a22:	4e3c      	ldr	r6, [pc, #240]	; (b14 <sampleTick+0x1d0>)
     a24:	2780      	movs	r7, #128	; 0x80
     a26:	037f      	lsls	r7, r7, #13
     a28:	6177      	str	r7, [r6, #20]



    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_YOUT_H);
     a2a:	21bc      	movs	r1, #188	; 0xbc
     a2c:	2002      	movs	r0, #2
     a2e:	4d3a      	ldr	r5, [pc, #232]	; (b18 <sampleTick+0x1d4>)
     a30:	47a8      	blx	r5
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI1,dummy_Tx);
     a32:	21ff      	movs	r1, #255	; 0xff
     a34:	2002      	movs	r0, #2
     a36:	47a8      	blx	r5
     a38:	234e      	movs	r3, #78	; 0x4e
     a3a:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI1,dummy_Tx);
     a3c:	21ff      	movs	r1, #255	; 0xff
     a3e:	2002      	movs	r0, #2
     a40:	47a8      	blx	r5
     a42:	234f      	movs	r3, #79	; 0x4f
     a44:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a46:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativey = (my_altimeter->myIMU.accelYLow & (1 <<7)) != 0;
     a48:	5ce3      	ldrb	r3, [r4, r3]
    if (negativey) {
     a4a:	b25a      	sxtb	r2, r3
     a4c:	2a00      	cmp	r2, #0
     a4e:	da09      	bge.n	a64 <sampleTick+0x120>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
     a50:	224e      	movs	r2, #78	; 0x4e
     a52:	5ca2      	ldrb	r2, [r4, r2]
     a54:	4838      	ldr	r0, [pc, #224]	; (b38 <sampleTick+0x1f4>)
     a56:	4310      	orrs	r0, r2
     a58:	021b      	lsls	r3, r3, #8
     a5a:	4318      	orrs	r0, r3
     a5c:	4b37      	ldr	r3, [pc, #220]	; (b3c <sampleTick+0x1f8>)
     a5e:	4798      	blx	r3
     a60:	62e0      	str	r0, [r4, #44]	; 0x2c
     a62:	e006      	b.n	a72 <sampleTick+0x12e>
    } else {
        my_altimeter->myIMU.accelY = (my_altimeter->myIMU.accelYLow << 8) + my_altimeter->myIMU.accelYHigh;
     a64:	021b      	lsls	r3, r3, #8
     a66:	224e      	movs	r2, #78	; 0x4e
     a68:	5ca0      	ldrb	r0, [r4, r2]
     a6a:	1818      	adds	r0, r3, r0
     a6c:	4b33      	ldr	r3, [pc, #204]	; (b3c <sampleTick+0x1f8>)
     a6e:	4798      	blx	r3
     a70:	62e0      	str	r0, [r4, #44]	; 0x2c
    }
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelY *0.00006103;
     a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     a74:	4b2d      	ldr	r3, [pc, #180]	; (b2c <sampleTick+0x1e8>)
     a76:	4798      	blx	r3
     a78:	4a31      	ldr	r2, [pc, #196]	; (b40 <sampleTick+0x1fc>)
     a7a:	4b32      	ldr	r3, [pc, #200]	; (b44 <sampleTick+0x200>)
     a7c:	4d21      	ldr	r5, [pc, #132]	; (b04 <sampleTick+0x1c0>)
     a7e:	47a8      	blx	r5
     a80:	4b23      	ldr	r3, [pc, #140]	; (b10 <sampleTick+0x1cc>)
     a82:	4798      	blx	r3
     a84:	62e0      	str	r0, [r4, #44]	; 0x2c
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a86:	4e23      	ldr	r6, [pc, #140]	; (b14 <sampleTick+0x1d0>)
     a88:	2780      	movs	r7, #128	; 0x80
     a8a:	037f      	lsls	r7, r7, #13
     a8c:	6177      	str	r7, [r6, #20]


    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_ZOUT_H);
     a8e:	21be      	movs	r1, #190	; 0xbe
     a90:	2002      	movs	r0, #2
     a92:	4d21      	ldr	r5, [pc, #132]	; (b18 <sampleTick+0x1d4>)
     a94:	47a8      	blx	r5
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI1,dummy_Tx);
     a96:	21ff      	movs	r1, #255	; 0xff
     a98:	2002      	movs	r0, #2
     a9a:	47a8      	blx	r5
     a9c:	2350      	movs	r3, #80	; 0x50
     a9e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI1,dummy_Tx);
     aa0:	21ff      	movs	r1, #255	; 0xff
     aa2:	2002      	movs	r0, #2
     aa4:	47a8      	blx	r5
     aa6:	2351      	movs	r3, #81	; 0x51
     aa8:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aaa:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     aac:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     aae:	b243      	sxtb	r3, r0
     ab0:	2b00      	cmp	r3, #0
     ab2:	da09      	bge.n	ac8 <sampleTick+0x184>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     ab4:	2350      	movs	r3, #80	; 0x50
     ab6:	5ce3      	ldrb	r3, [r4, r3]
     ab8:	4a1f      	ldr	r2, [pc, #124]	; (b38 <sampleTick+0x1f4>)
     aba:	4313      	orrs	r3, r2
     abc:	0200      	lsls	r0, r0, #8
     abe:	4318      	orrs	r0, r3
     ac0:	4b1e      	ldr	r3, [pc, #120]	; (b3c <sampleTick+0x1f8>)
     ac2:	4798      	blx	r3
     ac4:	6320      	str	r0, [r4, #48]	; 0x30
     ac6:	e006      	b.n	ad6 <sampleTick+0x192>
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     ac8:	0200      	lsls	r0, r0, #8
     aca:	2350      	movs	r3, #80	; 0x50
     acc:	5ce3      	ldrb	r3, [r4, r3]
     ace:	18c0      	adds	r0, r0, r3
     ad0:	4b1a      	ldr	r3, [pc, #104]	; (b3c <sampleTick+0x1f8>)
     ad2:	4798      	blx	r3
     ad4:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     ad6:	6b20      	ldr	r0, [r4, #48]	; 0x30
     ad8:	4b14      	ldr	r3, [pc, #80]	; (b2c <sampleTick+0x1e8>)
     ada:	4798      	blx	r3
     adc:	4a18      	ldr	r2, [pc, #96]	; (b40 <sampleTick+0x1fc>)
     ade:	4b19      	ldr	r3, [pc, #100]	; (b44 <sampleTick+0x200>)
     ae0:	4d08      	ldr	r5, [pc, #32]	; (b04 <sampleTick+0x1c0>)
     ae2:	47a8      	blx	r5
     ae4:	4b0a      	ldr	r3, [pc, #40]	; (b10 <sampleTick+0x1cc>)
     ae6:	4798      	blx	r3
     ae8:	6320      	str	r0, [r4, #48]	; 0x30





}
     aea:	bc3c      	pop	{r2, r3, r4, r5}
     aec:	4690      	mov	r8, r2
     aee:	4699      	mov	r9, r3
     af0:	46a2      	mov	sl, r4
     af2:	46ab      	mov	fp, r5
     af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	00001d7c 	.word	0x00001d7c
     afc:	000004b5 	.word	0x000004b5
     b00:	000017bd 	.word	0x000017bd
     b04:	000012c9 	.word	0x000012c9
     b08:	eaa2a0a9 	.word	0xeaa2a0a9
     b0c:	3f5f3a57 	.word	0x3f5f3a57
     b10:	000018e9 	.word	0x000018e9
     b14:	41004400 	.word	0x41004400
     b18:	00000c29 	.word	0x00000c29
     b1c:	00000651 	.word	0x00000651
     b20:	000006dd 	.word	0x000006dd
     b24:	00000725 	.word	0x00000725
     b28:	0000081d 	.word	0x0000081d
     b2c:	00001841 	.word	0x00001841
     b30:	e9f6a93f 	.word	0xe9f6a93f
     b34:	3fa0cc78 	.word	0x3fa0cc78
     b38:	ffff0000 	.word	0xffff0000
     b3c:	000011bd 	.word	0x000011bd
     b40:	d52535ef 	.word	0xd52535ef
     b44:	3f0fff4e 	.word	0x3f0fff4e

00000b48 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	0004      	movs	r4, r0
     b4c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     b4e:	480e      	ldr	r0, [pc, #56]	; (b88 <sercomClockEnable+0x40>)
     b50:	6a01      	ldr	r1, [r0, #32]
     b52:	1ca6      	adds	r6, r4, #2
     b54:	2301      	movs	r3, #1
     b56:	40b3      	lsls	r3, r6
     b58:	430b      	orrs	r3, r1
     b5a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     b5c:	2d00      	cmp	r5, #0
     b5e:	d003      	beq.n	b68 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     b60:	2107      	movs	r1, #7
     b62:	0028      	movs	r0, r5
     b64:	4b09      	ldr	r3, [pc, #36]	; (b8c <sercomClockEnable+0x44>)
     b66:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b68:	0229      	lsls	r1, r5, #8
     b6a:	23f0      	movs	r3, #240	; 0xf0
     b6c:	011b      	lsls	r3, r3, #4
     b6e:	4019      	ands	r1, r3
     b70:	2380      	movs	r3, #128	; 0x80
     b72:	01db      	lsls	r3, r3, #7
     b74:	4319      	orrs	r1, r3
     b76:	0023      	movs	r3, r4
     b78:	3314      	adds	r3, #20
     b7a:	243f      	movs	r4, #63	; 0x3f
     b7c:	401c      	ands	r4, r3
     b7e:	430c      	orrs	r4, r1
     b80:	4b03      	ldr	r3, [pc, #12]	; (b90 <sercomClockEnable+0x48>)
     b82:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     b84:	bd70      	pop	{r4, r5, r6, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	40000400 	.word	0x40000400
     b8c:	000005d5 	.word	0x000005d5
     b90:	40000c00 	.word	0x40000c00

00000b94 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     b94:	0280      	lsls	r0, r0, #10
     b96:	4b05      	ldr	r3, [pc, #20]	; (bac <sercomReset+0x18>)
     b98:	469c      	mov	ip, r3
     b9a:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     b9c:	2301      	movs	r3, #1
     b9e:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     ba0:	2201      	movs	r2, #1
     ba2:	6803      	ldr	r3, [r0, #0]
     ba4:	421a      	tst	r2, r3
     ba6:	d1fc      	bne.n	ba2 <sercomReset+0xe>
}
     ba8:	4770      	bx	lr
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	42000800 	.word	0x42000800

00000bb0 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bb2:	464f      	mov	r7, r9
     bb4:	4646      	mov	r6, r8
     bb6:	b4c0      	push	{r6, r7}
     bb8:	0006      	movs	r6, r0
     bba:	4688      	mov	r8, r1
     bbc:	0017      	movs	r7, r2
     bbe:	001d      	movs	r5, r3
     bc0:	ab08      	add	r3, sp, #32
     bc2:	781c      	ldrb	r4, [r3, #0]
     bc4:	ab09      	add	r3, sp, #36	; 0x24
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	4699      	mov	r9, r3
		
    sercomReset(id);
     bca:	4b15      	ldr	r3, [pc, #84]	; (c20 <sercomSpiMasterInit+0x70>)
     bcc:	4798      	blx	r3
     bce:	02b0      	lsls	r0, r6, #10
     bd0:	4b14      	ldr	r3, [pc, #80]	; (c24 <sercomSpiMasterInit+0x74>)
     bd2:	469c      	mov	ip, r3
     bd4:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     bd6:	2380      	movs	r3, #128	; 0x80
     bd8:	029b      	lsls	r3, r3, #10
     bda:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     bdc:	464b      	mov	r3, r9
     bde:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     be0:	4643      	mov	r3, r8
     be2:	0519      	lsls	r1, r3, #20
     be4:	23c0      	movs	r3, #192	; 0xc0
     be6:	039b      	lsls	r3, r3, #14
     be8:	4019      	ands	r1, r3
     bea:	000e      	movs	r6, r1
     bec:	0439      	lsls	r1, r7, #16
     bee:	23c0      	movs	r3, #192	; 0xc0
     bf0:	029b      	lsls	r3, r3, #10
     bf2:	4019      	ands	r1, r3
     bf4:	230e      	movs	r3, #14
     bf6:	000a      	movs	r2, r1
     bf8:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     bfa:	1e6b      	subs	r3, r5, #1
     bfc:	419d      	sbcs	r5, r3
     bfe:	076d      	lsls	r5, r5, #29
     c00:	0031      	movs	r1, r6
     c02:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     c04:	1e63      	subs	r3, r4, #1
     c06:	419c      	sbcs	r4, r3
     c08:	0722      	lsls	r2, r4, #28
     c0a:	002c      	movs	r4, r5
     c0c:	430c      	orrs	r4, r1
     c0e:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     c10:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     c12:	69c3      	ldr	r3, [r0, #28]
     c14:	075b      	lsls	r3, r3, #29
     c16:	d4fc      	bmi.n	c12 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     c18:	bc0c      	pop	{r2, r3}
     c1a:	4690      	mov	r8, r2
     c1c:	4699      	mov	r9, r3
     c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c20:	00000b95 	.word	0x00000b95
     c24:	42000800 	.word	0x42000800

00000c28 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     c28:	0280      	lsls	r0, r0, #10
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <spiDataTransfer+0x18>)
     c2c:	469c      	mov	ip, r3
     c2e:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     c30:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     c32:	7e03      	ldrb	r3, [r0, #24]
     c34:	075b      	lsls	r3, r3, #29
     c36:	d5fc      	bpl.n	c32 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     c38:	6a80      	ldr	r0, [r0, #40]	; 0x28
     c3a:	b2c0      	uxtb	r0, r0
}
     c3c:	4770      	bx	lr
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	42000800 	.word	0x42000800

00000c44 <__aeabi_lmul>:
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	464f      	mov	r7, r9
     c48:	4646      	mov	r6, r8
     c4a:	b4c0      	push	{r6, r7}
     c4c:	0416      	lsls	r6, r2, #16
     c4e:	0c36      	lsrs	r6, r6, #16
     c50:	4699      	mov	r9, r3
     c52:	0033      	movs	r3, r6
     c54:	0405      	lsls	r5, r0, #16
     c56:	0c2c      	lsrs	r4, r5, #16
     c58:	0c07      	lsrs	r7, r0, #16
     c5a:	0c15      	lsrs	r5, r2, #16
     c5c:	4363      	muls	r3, r4
     c5e:	437e      	muls	r6, r7
     c60:	436f      	muls	r7, r5
     c62:	4365      	muls	r5, r4
     c64:	0c1c      	lsrs	r4, r3, #16
     c66:	19ad      	adds	r5, r5, r6
     c68:	1964      	adds	r4, r4, r5
     c6a:	469c      	mov	ip, r3
     c6c:	42a6      	cmp	r6, r4
     c6e:	d903      	bls.n	c78 <__aeabi_lmul+0x34>
     c70:	2380      	movs	r3, #128	; 0x80
     c72:	025b      	lsls	r3, r3, #9
     c74:	4698      	mov	r8, r3
     c76:	4447      	add	r7, r8
     c78:	4663      	mov	r3, ip
     c7a:	0c25      	lsrs	r5, r4, #16
     c7c:	19ef      	adds	r7, r5, r7
     c7e:	041d      	lsls	r5, r3, #16
     c80:	464b      	mov	r3, r9
     c82:	434a      	muls	r2, r1
     c84:	4343      	muls	r3, r0
     c86:	0c2d      	lsrs	r5, r5, #16
     c88:	0424      	lsls	r4, r4, #16
     c8a:	1964      	adds	r4, r4, r5
     c8c:	1899      	adds	r1, r3, r2
     c8e:	19c9      	adds	r1, r1, r7
     c90:	0020      	movs	r0, r4
     c92:	bc0c      	pop	{r2, r3}
     c94:	4690      	mov	r8, r2
     c96:	4699      	mov	r9, r3
     c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c9a:	46c0      	nop			; (mov r8, r8)

00000c9c <__aeabi_fadd>:
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9e:	024a      	lsls	r2, r1, #9
     ca0:	0243      	lsls	r3, r0, #9
     ca2:	0044      	lsls	r4, r0, #1
     ca4:	004e      	lsls	r6, r1, #1
     ca6:	0fc5      	lsrs	r5, r0, #31
     ca8:	0e24      	lsrs	r4, r4, #24
     caa:	0028      	movs	r0, r5
     cac:	099b      	lsrs	r3, r3, #6
     cae:	0e36      	lsrs	r6, r6, #24
     cb0:	0fc9      	lsrs	r1, r1, #31
     cb2:	0992      	lsrs	r2, r2, #6
     cb4:	428d      	cmp	r5, r1
     cb6:	d059      	beq.n	d6c <__aeabi_fadd+0xd0>
     cb8:	1ba0      	subs	r0, r4, r6
     cba:	2800      	cmp	r0, #0
     cbc:	dc00      	bgt.n	cc0 <__aeabi_fadd+0x24>
     cbe:	e08d      	b.n	ddc <__aeabi_fadd+0x140>
     cc0:	2e00      	cmp	r6, #0
     cc2:	d11a      	bne.n	cfa <__aeabi_fadd+0x5e>
     cc4:	2a00      	cmp	r2, #0
     cc6:	d000      	beq.n	cca <__aeabi_fadd+0x2e>
     cc8:	e079      	b.n	dbe <__aeabi_fadd+0x122>
     cca:	075a      	lsls	r2, r3, #29
     ccc:	d004      	beq.n	cd8 <__aeabi_fadd+0x3c>
     cce:	220f      	movs	r2, #15
     cd0:	401a      	ands	r2, r3
     cd2:	2a04      	cmp	r2, #4
     cd4:	d000      	beq.n	cd8 <__aeabi_fadd+0x3c>
     cd6:	3304      	adds	r3, #4
     cd8:	015a      	lsls	r2, r3, #5
     cda:	d538      	bpl.n	d4e <__aeabi_fadd+0xb2>
     cdc:	3401      	adds	r4, #1
     cde:	2cff      	cmp	r4, #255	; 0xff
     ce0:	d100      	bne.n	ce4 <__aeabi_fadd+0x48>
     ce2:	e089      	b.n	df8 <__aeabi_fadd+0x15c>
     ce4:	0028      	movs	r0, r5
     ce6:	019b      	lsls	r3, r3, #6
     ce8:	0a5b      	lsrs	r3, r3, #9
     cea:	b2e4      	uxtb	r4, r4
     cec:	025b      	lsls	r3, r3, #9
     cee:	05e4      	lsls	r4, r4, #23
     cf0:	0a5b      	lsrs	r3, r3, #9
     cf2:	4323      	orrs	r3, r4
     cf4:	07c0      	lsls	r0, r0, #31
     cf6:	4318      	orrs	r0, r3
     cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cfa:	2cff      	cmp	r4, #255	; 0xff
     cfc:	d0e5      	beq.n	cca <__aeabi_fadd+0x2e>
     cfe:	2180      	movs	r1, #128	; 0x80
     d00:	04c9      	lsls	r1, r1, #19
     d02:	430a      	orrs	r2, r1
     d04:	281b      	cmp	r0, #27
     d06:	dd00      	ble.n	d0a <__aeabi_fadd+0x6e>
     d08:	e089      	b.n	e1e <__aeabi_fadd+0x182>
     d0a:	0016      	movs	r6, r2
     d0c:	2120      	movs	r1, #32
     d0e:	40c6      	lsrs	r6, r0
     d10:	1a08      	subs	r0, r1, r0
     d12:	4082      	lsls	r2, r0
     d14:	1e51      	subs	r1, r2, #1
     d16:	418a      	sbcs	r2, r1
     d18:	4332      	orrs	r2, r6
     d1a:	1a9b      	subs	r3, r3, r2
     d1c:	015a      	lsls	r2, r3, #5
     d1e:	d514      	bpl.n	d4a <__aeabi_fadd+0xae>
     d20:	019b      	lsls	r3, r3, #6
     d22:	099e      	lsrs	r6, r3, #6
     d24:	0030      	movs	r0, r6
     d26:	f000 fe6b 	bl	1a00 <__clzsi2>
     d2a:	3805      	subs	r0, #5
     d2c:	4086      	lsls	r6, r0
     d2e:	4284      	cmp	r4, r0
     d30:	dc65      	bgt.n	dfe <__aeabi_fadd+0x162>
     d32:	1b04      	subs	r4, r0, r4
     d34:	0033      	movs	r3, r6
     d36:	2020      	movs	r0, #32
     d38:	3401      	adds	r4, #1
     d3a:	40e3      	lsrs	r3, r4
     d3c:	1b04      	subs	r4, r0, r4
     d3e:	40a6      	lsls	r6, r4
     d40:	1e72      	subs	r2, r6, #1
     d42:	4196      	sbcs	r6, r2
     d44:	2400      	movs	r4, #0
     d46:	4333      	orrs	r3, r6
     d48:	e7bf      	b.n	cca <__aeabi_fadd+0x2e>
     d4a:	075a      	lsls	r2, r3, #29
     d4c:	d1bf      	bne.n	cce <__aeabi_fadd+0x32>
     d4e:	08df      	lsrs	r7, r3, #3
     d50:	0028      	movs	r0, r5
     d52:	2cff      	cmp	r4, #255	; 0xff
     d54:	d12f      	bne.n	db6 <__aeabi_fadd+0x11a>
     d56:	2f00      	cmp	r7, #0
     d58:	d100      	bne.n	d5c <__aeabi_fadd+0xc0>
     d5a:	e087      	b.n	e6c <__aeabi_fadd+0x1d0>
     d5c:	2280      	movs	r2, #128	; 0x80
     d5e:	03d2      	lsls	r2, r2, #15
     d60:	0013      	movs	r3, r2
     d62:	433b      	orrs	r3, r7
     d64:	025b      	lsls	r3, r3, #9
     d66:	0a5b      	lsrs	r3, r3, #9
     d68:	24ff      	movs	r4, #255	; 0xff
     d6a:	e7bf      	b.n	cec <__aeabi_fadd+0x50>
     d6c:	1ba1      	subs	r1, r4, r6
     d6e:	2900      	cmp	r1, #0
     d70:	dd49      	ble.n	e06 <__aeabi_fadd+0x16a>
     d72:	2e00      	cmp	r6, #0
     d74:	d029      	beq.n	dca <__aeabi_fadd+0x12e>
     d76:	2cff      	cmp	r4, #255	; 0xff
     d78:	d0a7      	beq.n	cca <__aeabi_fadd+0x2e>
     d7a:	2680      	movs	r6, #128	; 0x80
     d7c:	04f6      	lsls	r6, r6, #19
     d7e:	4332      	orrs	r2, r6
     d80:	291b      	cmp	r1, #27
     d82:	dd00      	ble.n	d86 <__aeabi_fadd+0xea>
     d84:	e08d      	b.n	ea2 <__aeabi_fadd+0x206>
     d86:	0017      	movs	r7, r2
     d88:	2620      	movs	r6, #32
     d8a:	40cf      	lsrs	r7, r1
     d8c:	1a71      	subs	r1, r6, r1
     d8e:	408a      	lsls	r2, r1
     d90:	1e51      	subs	r1, r2, #1
     d92:	418a      	sbcs	r2, r1
     d94:	433a      	orrs	r2, r7
     d96:	189b      	adds	r3, r3, r2
     d98:	015a      	lsls	r2, r3, #5
     d9a:	d5d6      	bpl.n	d4a <__aeabi_fadd+0xae>
     d9c:	3401      	adds	r4, #1
     d9e:	2cff      	cmp	r4, #255	; 0xff
     da0:	d064      	beq.n	e6c <__aeabi_fadd+0x1d0>
     da2:	2201      	movs	r2, #1
     da4:	4976      	ldr	r1, [pc, #472]	; (f80 <__aeabi_fadd+0x2e4>)
     da6:	401a      	ands	r2, r3
     da8:	085b      	lsrs	r3, r3, #1
     daa:	400b      	ands	r3, r1
     dac:	4313      	orrs	r3, r2
     dae:	e78c      	b.n	cca <__aeabi_fadd+0x2e>
     db0:	1e03      	subs	r3, r0, #0
     db2:	d1ca      	bne.n	d4a <__aeabi_fadd+0xae>
     db4:	2000      	movs	r0, #0
     db6:	027b      	lsls	r3, r7, #9
     db8:	0a5b      	lsrs	r3, r3, #9
     dba:	b2e4      	uxtb	r4, r4
     dbc:	e796      	b.n	cec <__aeabi_fadd+0x50>
     dbe:	3801      	subs	r0, #1
     dc0:	2800      	cmp	r0, #0
     dc2:	d0aa      	beq.n	d1a <__aeabi_fadd+0x7e>
     dc4:	2cff      	cmp	r4, #255	; 0xff
     dc6:	d19d      	bne.n	d04 <__aeabi_fadd+0x68>
     dc8:	e77f      	b.n	cca <__aeabi_fadd+0x2e>
     dca:	2a00      	cmp	r2, #0
     dcc:	d100      	bne.n	dd0 <__aeabi_fadd+0x134>
     dce:	e77c      	b.n	cca <__aeabi_fadd+0x2e>
     dd0:	3901      	subs	r1, #1
     dd2:	2900      	cmp	r1, #0
     dd4:	d0df      	beq.n	d96 <__aeabi_fadd+0xfa>
     dd6:	2cff      	cmp	r4, #255	; 0xff
     dd8:	d1d2      	bne.n	d80 <__aeabi_fadd+0xe4>
     dda:	e776      	b.n	cca <__aeabi_fadd+0x2e>
     ddc:	2800      	cmp	r0, #0
     dde:	d120      	bne.n	e22 <__aeabi_fadd+0x186>
     de0:	1c60      	adds	r0, r4, #1
     de2:	b2c0      	uxtb	r0, r0
     de4:	2801      	cmp	r0, #1
     de6:	dd53      	ble.n	e90 <__aeabi_fadd+0x1f4>
     de8:	2780      	movs	r7, #128	; 0x80
     dea:	1a9e      	subs	r6, r3, r2
     dec:	04ff      	lsls	r7, r7, #19
     dee:	4037      	ands	r7, r6
     df0:	d02f      	beq.n	e52 <__aeabi_fadd+0x1b6>
     df2:	1ad6      	subs	r6, r2, r3
     df4:	000d      	movs	r5, r1
     df6:	e795      	b.n	d24 <__aeabi_fadd+0x88>
     df8:	0028      	movs	r0, r5
     dfa:	2300      	movs	r3, #0
     dfc:	e776      	b.n	cec <__aeabi_fadd+0x50>
     dfe:	4b61      	ldr	r3, [pc, #388]	; (f84 <__aeabi_fadd+0x2e8>)
     e00:	1a24      	subs	r4, r4, r0
     e02:	4033      	ands	r3, r6
     e04:	e761      	b.n	cca <__aeabi_fadd+0x2e>
     e06:	2900      	cmp	r1, #0
     e08:	d14d      	bne.n	ea6 <__aeabi_fadd+0x20a>
     e0a:	1c61      	adds	r1, r4, #1
     e0c:	b2ce      	uxtb	r6, r1
     e0e:	2e01      	cmp	r6, #1
     e10:	dd2f      	ble.n	e72 <__aeabi_fadd+0x1d6>
     e12:	29ff      	cmp	r1, #255	; 0xff
     e14:	d02a      	beq.n	e6c <__aeabi_fadd+0x1d0>
     e16:	189b      	adds	r3, r3, r2
     e18:	085b      	lsrs	r3, r3, #1
     e1a:	000c      	movs	r4, r1
     e1c:	e755      	b.n	cca <__aeabi_fadd+0x2e>
     e1e:	2201      	movs	r2, #1
     e20:	e77b      	b.n	d1a <__aeabi_fadd+0x7e>
     e22:	2c00      	cmp	r4, #0
     e24:	d11b      	bne.n	e5e <__aeabi_fadd+0x1c2>
     e26:	2b00      	cmp	r3, #0
     e28:	d05b      	beq.n	ee2 <__aeabi_fadd+0x246>
     e2a:	43c0      	mvns	r0, r0
     e2c:	2800      	cmp	r0, #0
     e2e:	d00c      	beq.n	e4a <__aeabi_fadd+0x1ae>
     e30:	2eff      	cmp	r6, #255	; 0xff
     e32:	d07e      	beq.n	f32 <__aeabi_fadd+0x296>
     e34:	281b      	cmp	r0, #27
     e36:	dd00      	ble.n	e3a <__aeabi_fadd+0x19e>
     e38:	e092      	b.n	f60 <__aeabi_fadd+0x2c4>
     e3a:	001d      	movs	r5, r3
     e3c:	2420      	movs	r4, #32
     e3e:	40c5      	lsrs	r5, r0
     e40:	1a20      	subs	r0, r4, r0
     e42:	4083      	lsls	r3, r0
     e44:	1e58      	subs	r0, r3, #1
     e46:	4183      	sbcs	r3, r0
     e48:	432b      	orrs	r3, r5
     e4a:	1ad3      	subs	r3, r2, r3
     e4c:	0034      	movs	r4, r6
     e4e:	000d      	movs	r5, r1
     e50:	e764      	b.n	d1c <__aeabi_fadd+0x80>
     e52:	2e00      	cmp	r6, #0
     e54:	d000      	beq.n	e58 <__aeabi_fadd+0x1bc>
     e56:	e765      	b.n	d24 <__aeabi_fadd+0x88>
     e58:	2000      	movs	r0, #0
     e5a:	2400      	movs	r4, #0
     e5c:	e7ab      	b.n	db6 <__aeabi_fadd+0x11a>
     e5e:	2eff      	cmp	r6, #255	; 0xff
     e60:	d067      	beq.n	f32 <__aeabi_fadd+0x296>
     e62:	2480      	movs	r4, #128	; 0x80
     e64:	04e4      	lsls	r4, r4, #19
     e66:	4240      	negs	r0, r0
     e68:	4323      	orrs	r3, r4
     e6a:	e7e3      	b.n	e34 <__aeabi_fadd+0x198>
     e6c:	24ff      	movs	r4, #255	; 0xff
     e6e:	2300      	movs	r3, #0
     e70:	e73c      	b.n	cec <__aeabi_fadd+0x50>
     e72:	2c00      	cmp	r4, #0
     e74:	d161      	bne.n	f3a <__aeabi_fadd+0x29e>
     e76:	2b00      	cmp	r3, #0
     e78:	d07e      	beq.n	f78 <__aeabi_fadd+0x2dc>
     e7a:	2a00      	cmp	r2, #0
     e7c:	d100      	bne.n	e80 <__aeabi_fadd+0x1e4>
     e7e:	e724      	b.n	cca <__aeabi_fadd+0x2e>
     e80:	189b      	adds	r3, r3, r2
     e82:	015a      	lsls	r2, r3, #5
     e84:	d400      	bmi.n	e88 <__aeabi_fadd+0x1ec>
     e86:	e760      	b.n	d4a <__aeabi_fadd+0xae>
     e88:	4a3e      	ldr	r2, [pc, #248]	; (f84 <__aeabi_fadd+0x2e8>)
     e8a:	000c      	movs	r4, r1
     e8c:	4013      	ands	r3, r2
     e8e:	e71c      	b.n	cca <__aeabi_fadd+0x2e>
     e90:	2c00      	cmp	r4, #0
     e92:	d11e      	bne.n	ed2 <__aeabi_fadd+0x236>
     e94:	2b00      	cmp	r3, #0
     e96:	d12f      	bne.n	ef8 <__aeabi_fadd+0x25c>
     e98:	2a00      	cmp	r2, #0
     e9a:	d066      	beq.n	f6a <__aeabi_fadd+0x2ce>
     e9c:	0013      	movs	r3, r2
     e9e:	000d      	movs	r5, r1
     ea0:	e713      	b.n	cca <__aeabi_fadd+0x2e>
     ea2:	2201      	movs	r2, #1
     ea4:	e777      	b.n	d96 <__aeabi_fadd+0xfa>
     ea6:	2c00      	cmp	r4, #0
     ea8:	d11f      	bne.n	eea <__aeabi_fadd+0x24e>
     eaa:	2b00      	cmp	r3, #0
     eac:	d05a      	beq.n	f64 <__aeabi_fadd+0x2c8>
     eae:	43c9      	mvns	r1, r1
     eb0:	2900      	cmp	r1, #0
     eb2:	d00b      	beq.n	ecc <__aeabi_fadd+0x230>
     eb4:	2eff      	cmp	r6, #255	; 0xff
     eb6:	d050      	beq.n	f5a <__aeabi_fadd+0x2be>
     eb8:	291b      	cmp	r1, #27
     eba:	dc5f      	bgt.n	f7c <__aeabi_fadd+0x2e0>
     ebc:	001f      	movs	r7, r3
     ebe:	2420      	movs	r4, #32
     ec0:	40cf      	lsrs	r7, r1
     ec2:	1a61      	subs	r1, r4, r1
     ec4:	408b      	lsls	r3, r1
     ec6:	1e59      	subs	r1, r3, #1
     ec8:	418b      	sbcs	r3, r1
     eca:	433b      	orrs	r3, r7
     ecc:	189b      	adds	r3, r3, r2
     ece:	0034      	movs	r4, r6
     ed0:	e762      	b.n	d98 <__aeabi_fadd+0xfc>
     ed2:	2b00      	cmp	r3, #0
     ed4:	d11c      	bne.n	f10 <__aeabi_fadd+0x274>
     ed6:	2a00      	cmp	r2, #0
     ed8:	d04a      	beq.n	f70 <__aeabi_fadd+0x2d4>
     eda:	0013      	movs	r3, r2
     edc:	000d      	movs	r5, r1
     ede:	24ff      	movs	r4, #255	; 0xff
     ee0:	e6f3      	b.n	cca <__aeabi_fadd+0x2e>
     ee2:	0013      	movs	r3, r2
     ee4:	0034      	movs	r4, r6
     ee6:	000d      	movs	r5, r1
     ee8:	e6ef      	b.n	cca <__aeabi_fadd+0x2e>
     eea:	2eff      	cmp	r6, #255	; 0xff
     eec:	d035      	beq.n	f5a <__aeabi_fadd+0x2be>
     eee:	2480      	movs	r4, #128	; 0x80
     ef0:	04e4      	lsls	r4, r4, #19
     ef2:	4249      	negs	r1, r1
     ef4:	4323      	orrs	r3, r4
     ef6:	e7df      	b.n	eb8 <__aeabi_fadd+0x21c>
     ef8:	2a00      	cmp	r2, #0
     efa:	d100      	bne.n	efe <__aeabi_fadd+0x262>
     efc:	e6e5      	b.n	cca <__aeabi_fadd+0x2e>
     efe:	2780      	movs	r7, #128	; 0x80
     f00:	1a98      	subs	r0, r3, r2
     f02:	04ff      	lsls	r7, r7, #19
     f04:	4007      	ands	r7, r0
     f06:	d100      	bne.n	f0a <__aeabi_fadd+0x26e>
     f08:	e752      	b.n	db0 <__aeabi_fadd+0x114>
     f0a:	1ad3      	subs	r3, r2, r3
     f0c:	000d      	movs	r5, r1
     f0e:	e6dc      	b.n	cca <__aeabi_fadd+0x2e>
     f10:	24ff      	movs	r4, #255	; 0xff
     f12:	2a00      	cmp	r2, #0
     f14:	d100      	bne.n	f18 <__aeabi_fadd+0x27c>
     f16:	e6d8      	b.n	cca <__aeabi_fadd+0x2e>
     f18:	2080      	movs	r0, #128	; 0x80
     f1a:	08db      	lsrs	r3, r3, #3
     f1c:	03c0      	lsls	r0, r0, #15
     f1e:	4203      	tst	r3, r0
     f20:	d004      	beq.n	f2c <__aeabi_fadd+0x290>
     f22:	08d2      	lsrs	r2, r2, #3
     f24:	4202      	tst	r2, r0
     f26:	d101      	bne.n	f2c <__aeabi_fadd+0x290>
     f28:	0013      	movs	r3, r2
     f2a:	000d      	movs	r5, r1
     f2c:	00db      	lsls	r3, r3, #3
     f2e:	24ff      	movs	r4, #255	; 0xff
     f30:	e6cb      	b.n	cca <__aeabi_fadd+0x2e>
     f32:	0013      	movs	r3, r2
     f34:	24ff      	movs	r4, #255	; 0xff
     f36:	000d      	movs	r5, r1
     f38:	e6c7      	b.n	cca <__aeabi_fadd+0x2e>
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00d      	beq.n	f5a <__aeabi_fadd+0x2be>
     f3e:	24ff      	movs	r4, #255	; 0xff
     f40:	2a00      	cmp	r2, #0
     f42:	d100      	bne.n	f46 <__aeabi_fadd+0x2aa>
     f44:	e6c1      	b.n	cca <__aeabi_fadd+0x2e>
     f46:	2180      	movs	r1, #128	; 0x80
     f48:	08db      	lsrs	r3, r3, #3
     f4a:	03c9      	lsls	r1, r1, #15
     f4c:	420b      	tst	r3, r1
     f4e:	d0ed      	beq.n	f2c <__aeabi_fadd+0x290>
     f50:	08d2      	lsrs	r2, r2, #3
     f52:	420a      	tst	r2, r1
     f54:	d1ea      	bne.n	f2c <__aeabi_fadd+0x290>
     f56:	0013      	movs	r3, r2
     f58:	e7e8      	b.n	f2c <__aeabi_fadd+0x290>
     f5a:	0013      	movs	r3, r2
     f5c:	24ff      	movs	r4, #255	; 0xff
     f5e:	e6b4      	b.n	cca <__aeabi_fadd+0x2e>
     f60:	2301      	movs	r3, #1
     f62:	e772      	b.n	e4a <__aeabi_fadd+0x1ae>
     f64:	0013      	movs	r3, r2
     f66:	0034      	movs	r4, r6
     f68:	e6af      	b.n	cca <__aeabi_fadd+0x2e>
     f6a:	2700      	movs	r7, #0
     f6c:	2000      	movs	r0, #0
     f6e:	e722      	b.n	db6 <__aeabi_fadd+0x11a>
     f70:	2780      	movs	r7, #128	; 0x80
     f72:	2000      	movs	r0, #0
     f74:	03ff      	lsls	r7, r7, #15
     f76:	e6f1      	b.n	d5c <__aeabi_fadd+0xc0>
     f78:	0013      	movs	r3, r2
     f7a:	e6a6      	b.n	cca <__aeabi_fadd+0x2e>
     f7c:	2301      	movs	r3, #1
     f7e:	e7a5      	b.n	ecc <__aeabi_fadd+0x230>
     f80:	7dffffff 	.word	0x7dffffff
     f84:	fbffffff 	.word	0xfbffffff

00000f88 <__aeabi_fdiv>:
     f88:	b5f0      	push	{r4, r5, r6, r7, lr}
     f8a:	4656      	mov	r6, sl
     f8c:	4644      	mov	r4, r8
     f8e:	465f      	mov	r7, fp
     f90:	464d      	mov	r5, r9
     f92:	b4f0      	push	{r4, r5, r6, r7}
     f94:	0244      	lsls	r4, r0, #9
     f96:	0046      	lsls	r6, r0, #1
     f98:	0fc7      	lsrs	r7, r0, #31
     f9a:	b083      	sub	sp, #12
     f9c:	4688      	mov	r8, r1
     f9e:	0a65      	lsrs	r5, r4, #9
     fa0:	0e36      	lsrs	r6, r6, #24
     fa2:	46ba      	mov	sl, r7
     fa4:	d03d      	beq.n	1022 <__aeabi_fdiv+0x9a>
     fa6:	2eff      	cmp	r6, #255	; 0xff
     fa8:	d022      	beq.n	ff0 <__aeabi_fdiv+0x68>
     faa:	2300      	movs	r3, #0
     fac:	00ec      	lsls	r4, r5, #3
     fae:	2580      	movs	r5, #128	; 0x80
     fb0:	4699      	mov	r9, r3
     fb2:	469b      	mov	fp, r3
     fb4:	04ed      	lsls	r5, r5, #19
     fb6:	4325      	orrs	r5, r4
     fb8:	3e7f      	subs	r6, #127	; 0x7f
     fba:	4643      	mov	r3, r8
     fbc:	025c      	lsls	r4, r3, #9
     fbe:	0058      	lsls	r0, r3, #1
     fc0:	0fdb      	lsrs	r3, r3, #31
     fc2:	0a64      	lsrs	r4, r4, #9
     fc4:	0e00      	lsrs	r0, r0, #24
     fc6:	4698      	mov	r8, r3
     fc8:	d036      	beq.n	1038 <__aeabi_fdiv+0xb0>
     fca:	28ff      	cmp	r0, #255	; 0xff
     fcc:	d030      	beq.n	1030 <__aeabi_fdiv+0xa8>
     fce:	2380      	movs	r3, #128	; 0x80
     fd0:	2100      	movs	r1, #0
     fd2:	00e4      	lsls	r4, r4, #3
     fd4:	04db      	lsls	r3, r3, #19
     fd6:	431c      	orrs	r4, r3
     fd8:	387f      	subs	r0, #127	; 0x7f
     fda:	1a30      	subs	r0, r6, r0
     fdc:	9001      	str	r0, [sp, #4]
     fde:	4648      	mov	r0, r9
     fe0:	4642      	mov	r2, r8
     fe2:	4308      	orrs	r0, r1
     fe4:	4e72      	ldr	r6, [pc, #456]	; (11b0 <__aeabi_fdiv+0x228>)
     fe6:	0080      	lsls	r0, r0, #2
     fe8:	5830      	ldr	r0, [r6, r0]
     fea:	407a      	eors	r2, r7
     fec:	0013      	movs	r3, r2
     fee:	4687      	mov	pc, r0
     ff0:	2d00      	cmp	r5, #0
     ff2:	d144      	bne.n	107e <__aeabi_fdiv+0xf6>
     ff4:	2308      	movs	r3, #8
     ff6:	4699      	mov	r9, r3
     ff8:	3b06      	subs	r3, #6
     ffa:	469b      	mov	fp, r3
     ffc:	e7dd      	b.n	fba <__aeabi_fdiv+0x32>
     ffe:	2201      	movs	r2, #1
    1000:	20ff      	movs	r0, #255	; 0xff
    1002:	2400      	movs	r4, #0
    1004:	401a      	ands	r2, r3
    1006:	0264      	lsls	r4, r4, #9
    1008:	05c3      	lsls	r3, r0, #23
    100a:	0a64      	lsrs	r4, r4, #9
    100c:	07d2      	lsls	r2, r2, #31
    100e:	431c      	orrs	r4, r3
    1010:	4314      	orrs	r4, r2
    1012:	0020      	movs	r0, r4
    1014:	b003      	add	sp, #12
    1016:	bc3c      	pop	{r2, r3, r4, r5}
    1018:	4690      	mov	r8, r2
    101a:	4699      	mov	r9, r3
    101c:	46a2      	mov	sl, r4
    101e:	46ab      	mov	fp, r5
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1022:	2d00      	cmp	r5, #0
    1024:	d120      	bne.n	1068 <__aeabi_fdiv+0xe0>
    1026:	2304      	movs	r3, #4
    1028:	4699      	mov	r9, r3
    102a:	3b03      	subs	r3, #3
    102c:	469b      	mov	fp, r3
    102e:	e7c4      	b.n	fba <__aeabi_fdiv+0x32>
    1030:	2c00      	cmp	r4, #0
    1032:	d117      	bne.n	1064 <__aeabi_fdiv+0xdc>
    1034:	2102      	movs	r1, #2
    1036:	e002      	b.n	103e <__aeabi_fdiv+0xb6>
    1038:	2c00      	cmp	r4, #0
    103a:	d10a      	bne.n	1052 <__aeabi_fdiv+0xca>
    103c:	2101      	movs	r1, #1
    103e:	1a32      	subs	r2, r6, r0
    1040:	9201      	str	r2, [sp, #4]
    1042:	464a      	mov	r2, r9
    1044:	4643      	mov	r3, r8
    1046:	430a      	orrs	r2, r1
    1048:	485a      	ldr	r0, [pc, #360]	; (11b4 <__aeabi_fdiv+0x22c>)
    104a:	0092      	lsls	r2, r2, #2
    104c:	5882      	ldr	r2, [r0, r2]
    104e:	407b      	eors	r3, r7
    1050:	4697      	mov	pc, r2
    1052:	0020      	movs	r0, r4
    1054:	f000 fcd4 	bl	1a00 <__clzsi2>
    1058:	1f43      	subs	r3, r0, #5
    105a:	3076      	adds	r0, #118	; 0x76
    105c:	409c      	lsls	r4, r3
    105e:	4240      	negs	r0, r0
    1060:	2100      	movs	r1, #0
    1062:	e7ba      	b.n	fda <__aeabi_fdiv+0x52>
    1064:	2103      	movs	r1, #3
    1066:	e7b8      	b.n	fda <__aeabi_fdiv+0x52>
    1068:	0028      	movs	r0, r5
    106a:	f000 fcc9 	bl	1a00 <__clzsi2>
    106e:	1f43      	subs	r3, r0, #5
    1070:	409d      	lsls	r5, r3
    1072:	2300      	movs	r3, #0
    1074:	3076      	adds	r0, #118	; 0x76
    1076:	4246      	negs	r6, r0
    1078:	4699      	mov	r9, r3
    107a:	469b      	mov	fp, r3
    107c:	e79d      	b.n	fba <__aeabi_fdiv+0x32>
    107e:	230c      	movs	r3, #12
    1080:	4699      	mov	r9, r3
    1082:	3b09      	subs	r3, #9
    1084:	469b      	mov	fp, r3
    1086:	e798      	b.n	fba <__aeabi_fdiv+0x32>
    1088:	2480      	movs	r4, #128	; 0x80
    108a:	2200      	movs	r2, #0
    108c:	03e4      	lsls	r4, r4, #15
    108e:	20ff      	movs	r0, #255	; 0xff
    1090:	e7b9      	b.n	1006 <__aeabi_fdiv+0x7e>
    1092:	2400      	movs	r4, #0
    1094:	46c2      	mov	sl, r8
    1096:	468b      	mov	fp, r1
    1098:	465a      	mov	r2, fp
    109a:	4653      	mov	r3, sl
    109c:	2a02      	cmp	r2, #2
    109e:	d0ae      	beq.n	ffe <__aeabi_fdiv+0x76>
    10a0:	2a03      	cmp	r2, #3
    10a2:	d07d      	beq.n	11a0 <__aeabi_fdiv+0x218>
    10a4:	2a01      	cmp	r2, #1
    10a6:	d131      	bne.n	110c <__aeabi_fdiv+0x184>
    10a8:	2201      	movs	r2, #1
    10aa:	2000      	movs	r0, #0
    10ac:	401a      	ands	r2, r3
    10ae:	2400      	movs	r4, #0
    10b0:	e7a9      	b.n	1006 <__aeabi_fdiv+0x7e>
    10b2:	2201      	movs	r2, #1
    10b4:	1a10      	subs	r0, r2, r0
    10b6:	281b      	cmp	r0, #27
    10b8:	dd56      	ble.n	1168 <__aeabi_fdiv+0x1e0>
    10ba:	401a      	ands	r2, r3
    10bc:	2000      	movs	r0, #0
    10be:	2400      	movs	r4, #0
    10c0:	e7a1      	b.n	1006 <__aeabi_fdiv+0x7e>
    10c2:	2380      	movs	r3, #128	; 0x80
    10c4:	03db      	lsls	r3, r3, #15
    10c6:	421d      	tst	r5, r3
    10c8:	d14b      	bne.n	1162 <__aeabi_fdiv+0x1da>
    10ca:	2380      	movs	r3, #128	; 0x80
    10cc:	03db      	lsls	r3, r3, #15
    10ce:	432b      	orrs	r3, r5
    10d0:	025c      	lsls	r4, r3, #9
    10d2:	0a64      	lsrs	r4, r4, #9
    10d4:	003a      	movs	r2, r7
    10d6:	20ff      	movs	r0, #255	; 0xff
    10d8:	e795      	b.n	1006 <__aeabi_fdiv+0x7e>
    10da:	016d      	lsls	r5, r5, #5
    10dc:	0160      	lsls	r0, r4, #5
    10de:	4285      	cmp	r5, r0
    10e0:	d230      	bcs.n	1144 <__aeabi_fdiv+0x1bc>
    10e2:	9a01      	ldr	r2, [sp, #4]
    10e4:	2400      	movs	r4, #0
    10e6:	3a01      	subs	r2, #1
    10e8:	9201      	str	r2, [sp, #4]
    10ea:	221b      	movs	r2, #27
    10ec:	2701      	movs	r7, #1
    10ee:	0029      	movs	r1, r5
    10f0:	0064      	lsls	r4, r4, #1
    10f2:	006d      	lsls	r5, r5, #1
    10f4:	2900      	cmp	r1, #0
    10f6:	db01      	blt.n	10fc <__aeabi_fdiv+0x174>
    10f8:	42a8      	cmp	r0, r5
    10fa:	d801      	bhi.n	1100 <__aeabi_fdiv+0x178>
    10fc:	1a2d      	subs	r5, r5, r0
    10fe:	433c      	orrs	r4, r7
    1100:	3a01      	subs	r2, #1
    1102:	2a00      	cmp	r2, #0
    1104:	d1f3      	bne.n	10ee <__aeabi_fdiv+0x166>
    1106:	1e6a      	subs	r2, r5, #1
    1108:	4195      	sbcs	r5, r2
    110a:	432c      	orrs	r4, r5
    110c:	9801      	ldr	r0, [sp, #4]
    110e:	307f      	adds	r0, #127	; 0x7f
    1110:	2800      	cmp	r0, #0
    1112:	ddce      	ble.n	10b2 <__aeabi_fdiv+0x12a>
    1114:	0762      	lsls	r2, r4, #29
    1116:	d004      	beq.n	1122 <__aeabi_fdiv+0x19a>
    1118:	220f      	movs	r2, #15
    111a:	4022      	ands	r2, r4
    111c:	2a04      	cmp	r2, #4
    111e:	d000      	beq.n	1122 <__aeabi_fdiv+0x19a>
    1120:	3404      	adds	r4, #4
    1122:	0122      	lsls	r2, r4, #4
    1124:	d503      	bpl.n	112e <__aeabi_fdiv+0x1a6>
    1126:	4a24      	ldr	r2, [pc, #144]	; (11b8 <__aeabi_fdiv+0x230>)
    1128:	9801      	ldr	r0, [sp, #4]
    112a:	4014      	ands	r4, r2
    112c:	3080      	adds	r0, #128	; 0x80
    112e:	28fe      	cmp	r0, #254	; 0xfe
    1130:	dd00      	ble.n	1134 <__aeabi_fdiv+0x1ac>
    1132:	e764      	b.n	ffe <__aeabi_fdiv+0x76>
    1134:	2201      	movs	r2, #1
    1136:	01a4      	lsls	r4, r4, #6
    1138:	0a64      	lsrs	r4, r4, #9
    113a:	b2c0      	uxtb	r0, r0
    113c:	401a      	ands	r2, r3
    113e:	e762      	b.n	1006 <__aeabi_fdiv+0x7e>
    1140:	002c      	movs	r4, r5
    1142:	e7a9      	b.n	1098 <__aeabi_fdiv+0x110>
    1144:	1a2d      	subs	r5, r5, r0
    1146:	221a      	movs	r2, #26
    1148:	2401      	movs	r4, #1
    114a:	e7cf      	b.n	10ec <__aeabi_fdiv+0x164>
    114c:	026b      	lsls	r3, r5, #9
    114e:	d5bc      	bpl.n	10ca <__aeabi_fdiv+0x142>
    1150:	2400      	movs	r4, #0
    1152:	2380      	movs	r3, #128	; 0x80
    1154:	03db      	lsls	r3, r3, #15
    1156:	431c      	orrs	r4, r3
    1158:	0264      	lsls	r4, r4, #9
    115a:	0a64      	lsrs	r4, r4, #9
    115c:	4642      	mov	r2, r8
    115e:	20ff      	movs	r0, #255	; 0xff
    1160:	e751      	b.n	1006 <__aeabi_fdiv+0x7e>
    1162:	421c      	tst	r4, r3
    1164:	d1b3      	bne.n	10ce <__aeabi_fdiv+0x146>
    1166:	e7f4      	b.n	1152 <__aeabi_fdiv+0x1ca>
    1168:	0021      	movs	r1, r4
    116a:	2220      	movs	r2, #32
    116c:	40c1      	lsrs	r1, r0
    116e:	1a10      	subs	r0, r2, r0
    1170:	4084      	lsls	r4, r0
    1172:	1e62      	subs	r2, r4, #1
    1174:	4194      	sbcs	r4, r2
    1176:	430c      	orrs	r4, r1
    1178:	0762      	lsls	r2, r4, #29
    117a:	d004      	beq.n	1186 <__aeabi_fdiv+0x1fe>
    117c:	220f      	movs	r2, #15
    117e:	4022      	ands	r2, r4
    1180:	2a04      	cmp	r2, #4
    1182:	d000      	beq.n	1186 <__aeabi_fdiv+0x1fe>
    1184:	3404      	adds	r4, #4
    1186:	0162      	lsls	r2, r4, #5
    1188:	d504      	bpl.n	1194 <__aeabi_fdiv+0x20c>
    118a:	2201      	movs	r2, #1
    118c:	2001      	movs	r0, #1
    118e:	401a      	ands	r2, r3
    1190:	2400      	movs	r4, #0
    1192:	e738      	b.n	1006 <__aeabi_fdiv+0x7e>
    1194:	2201      	movs	r2, #1
    1196:	01a4      	lsls	r4, r4, #6
    1198:	0a64      	lsrs	r4, r4, #9
    119a:	401a      	ands	r2, r3
    119c:	2000      	movs	r0, #0
    119e:	e732      	b.n	1006 <__aeabi_fdiv+0x7e>
    11a0:	2380      	movs	r3, #128	; 0x80
    11a2:	03db      	lsls	r3, r3, #15
    11a4:	431c      	orrs	r4, r3
    11a6:	0264      	lsls	r4, r4, #9
    11a8:	0a64      	lsrs	r4, r4, #9
    11aa:	4652      	mov	r2, sl
    11ac:	20ff      	movs	r0, #255	; 0xff
    11ae:	e72a      	b.n	1006 <__aeabi_fdiv+0x7e>
    11b0:	00001d84 	.word	0x00001d84
    11b4:	00001dc4 	.word	0x00001dc4
    11b8:	f7ffffff 	.word	0xf7ffffff

000011bc <__aeabi_i2f>:
    11bc:	b570      	push	{r4, r5, r6, lr}
    11be:	2800      	cmp	r0, #0
    11c0:	d030      	beq.n	1224 <__aeabi_i2f+0x68>
    11c2:	17c3      	asrs	r3, r0, #31
    11c4:	18c5      	adds	r5, r0, r3
    11c6:	405d      	eors	r5, r3
    11c8:	0fc4      	lsrs	r4, r0, #31
    11ca:	0028      	movs	r0, r5
    11cc:	f000 fc18 	bl	1a00 <__clzsi2>
    11d0:	239e      	movs	r3, #158	; 0x9e
    11d2:	1a1b      	subs	r3, r3, r0
    11d4:	2b96      	cmp	r3, #150	; 0x96
    11d6:	dc0d      	bgt.n	11f4 <__aeabi_i2f+0x38>
    11d8:	2296      	movs	r2, #150	; 0x96
    11da:	1ad2      	subs	r2, r2, r3
    11dc:	4095      	lsls	r5, r2
    11de:	026a      	lsls	r2, r5, #9
    11e0:	0a52      	lsrs	r2, r2, #9
    11e2:	b2d8      	uxtb	r0, r3
    11e4:	0252      	lsls	r2, r2, #9
    11e6:	05c0      	lsls	r0, r0, #23
    11e8:	0a52      	lsrs	r2, r2, #9
    11ea:	07e4      	lsls	r4, r4, #31
    11ec:	4302      	orrs	r2, r0
    11ee:	4322      	orrs	r2, r4
    11f0:	0010      	movs	r0, r2
    11f2:	bd70      	pop	{r4, r5, r6, pc}
    11f4:	2b99      	cmp	r3, #153	; 0x99
    11f6:	dc19      	bgt.n	122c <__aeabi_i2f+0x70>
    11f8:	2299      	movs	r2, #153	; 0x99
    11fa:	1ad2      	subs	r2, r2, r3
    11fc:	4095      	lsls	r5, r2
    11fe:	4a12      	ldr	r2, [pc, #72]	; (1248 <__aeabi_i2f+0x8c>)
    1200:	402a      	ands	r2, r5
    1202:	0769      	lsls	r1, r5, #29
    1204:	d004      	beq.n	1210 <__aeabi_i2f+0x54>
    1206:	210f      	movs	r1, #15
    1208:	400d      	ands	r5, r1
    120a:	2d04      	cmp	r5, #4
    120c:	d000      	beq.n	1210 <__aeabi_i2f+0x54>
    120e:	3204      	adds	r2, #4
    1210:	0151      	lsls	r1, r2, #5
    1212:	d503      	bpl.n	121c <__aeabi_i2f+0x60>
    1214:	4b0c      	ldr	r3, [pc, #48]	; (1248 <__aeabi_i2f+0x8c>)
    1216:	401a      	ands	r2, r3
    1218:	239f      	movs	r3, #159	; 0x9f
    121a:	1a1b      	subs	r3, r3, r0
    121c:	0192      	lsls	r2, r2, #6
    121e:	0a52      	lsrs	r2, r2, #9
    1220:	b2d8      	uxtb	r0, r3
    1222:	e7df      	b.n	11e4 <__aeabi_i2f+0x28>
    1224:	2400      	movs	r4, #0
    1226:	2000      	movs	r0, #0
    1228:	2200      	movs	r2, #0
    122a:	e7db      	b.n	11e4 <__aeabi_i2f+0x28>
    122c:	2205      	movs	r2, #5
    122e:	002e      	movs	r6, r5
    1230:	1a12      	subs	r2, r2, r0
    1232:	21b9      	movs	r1, #185	; 0xb9
    1234:	40d6      	lsrs	r6, r2
    1236:	002a      	movs	r2, r5
    1238:	1ac9      	subs	r1, r1, r3
    123a:	408a      	lsls	r2, r1
    123c:	1e55      	subs	r5, r2, #1
    123e:	41aa      	sbcs	r2, r5
    1240:	0035      	movs	r5, r6
    1242:	4315      	orrs	r5, r2
    1244:	e7db      	b.n	11fe <__aeabi_i2f+0x42>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	fbffffff 	.word	0xfbffffff

0000124c <__aeabi_ui2f>:
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	1e04      	subs	r4, r0, #0
    1250:	d028      	beq.n	12a4 <__aeabi_ui2f+0x58>
    1252:	f000 fbd5 	bl	1a00 <__clzsi2>
    1256:	239e      	movs	r3, #158	; 0x9e
    1258:	1a1b      	subs	r3, r3, r0
    125a:	2b96      	cmp	r3, #150	; 0x96
    125c:	dc0a      	bgt.n	1274 <__aeabi_ui2f+0x28>
    125e:	2296      	movs	r2, #150	; 0x96
    1260:	1ad2      	subs	r2, r2, r3
    1262:	4094      	lsls	r4, r2
    1264:	0262      	lsls	r2, r4, #9
    1266:	0a52      	lsrs	r2, r2, #9
    1268:	b2d8      	uxtb	r0, r3
    126a:	0252      	lsls	r2, r2, #9
    126c:	0a52      	lsrs	r2, r2, #9
    126e:	05c0      	lsls	r0, r0, #23
    1270:	4310      	orrs	r0, r2
    1272:	bd70      	pop	{r4, r5, r6, pc}
    1274:	2b99      	cmp	r3, #153	; 0x99
    1276:	dc18      	bgt.n	12aa <__aeabi_ui2f+0x5e>
    1278:	2299      	movs	r2, #153	; 0x99
    127a:	1ad2      	subs	r2, r2, r3
    127c:	4094      	lsls	r4, r2
    127e:	4a11      	ldr	r2, [pc, #68]	; (12c4 <__aeabi_ui2f+0x78>)
    1280:	4022      	ands	r2, r4
    1282:	0761      	lsls	r1, r4, #29
    1284:	d004      	beq.n	1290 <__aeabi_ui2f+0x44>
    1286:	210f      	movs	r1, #15
    1288:	400c      	ands	r4, r1
    128a:	2c04      	cmp	r4, #4
    128c:	d000      	beq.n	1290 <__aeabi_ui2f+0x44>
    128e:	3204      	adds	r2, #4
    1290:	0151      	lsls	r1, r2, #5
    1292:	d503      	bpl.n	129c <__aeabi_ui2f+0x50>
    1294:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <__aeabi_ui2f+0x78>)
    1296:	401a      	ands	r2, r3
    1298:	239f      	movs	r3, #159	; 0x9f
    129a:	1a1b      	subs	r3, r3, r0
    129c:	0192      	lsls	r2, r2, #6
    129e:	0a52      	lsrs	r2, r2, #9
    12a0:	b2d8      	uxtb	r0, r3
    12a2:	e7e2      	b.n	126a <__aeabi_ui2f+0x1e>
    12a4:	2000      	movs	r0, #0
    12a6:	2200      	movs	r2, #0
    12a8:	e7df      	b.n	126a <__aeabi_ui2f+0x1e>
    12aa:	2205      	movs	r2, #5
    12ac:	0025      	movs	r5, r4
    12ae:	1a12      	subs	r2, r2, r0
    12b0:	21b9      	movs	r1, #185	; 0xb9
    12b2:	40d5      	lsrs	r5, r2
    12b4:	0022      	movs	r2, r4
    12b6:	1ac9      	subs	r1, r1, r3
    12b8:	408a      	lsls	r2, r1
    12ba:	1e54      	subs	r4, r2, #1
    12bc:	41a2      	sbcs	r2, r4
    12be:	002c      	movs	r4, r5
    12c0:	4314      	orrs	r4, r2
    12c2:	e7dc      	b.n	127e <__aeabi_ui2f+0x32>
    12c4:	fbffffff 	.word	0xfbffffff

000012c8 <__aeabi_dmul>:
    12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ca:	465f      	mov	r7, fp
    12cc:	4656      	mov	r6, sl
    12ce:	464d      	mov	r5, r9
    12d0:	4644      	mov	r4, r8
    12d2:	b4f0      	push	{r4, r5, r6, r7}
    12d4:	030d      	lsls	r5, r1, #12
    12d6:	4699      	mov	r9, r3
    12d8:	004e      	lsls	r6, r1, #1
    12da:	0b2b      	lsrs	r3, r5, #12
    12dc:	b087      	sub	sp, #28
    12de:	0007      	movs	r7, r0
    12e0:	4692      	mov	sl, r2
    12e2:	4680      	mov	r8, r0
    12e4:	469b      	mov	fp, r3
    12e6:	0d76      	lsrs	r6, r6, #21
    12e8:	0fcc      	lsrs	r4, r1, #31
    12ea:	2e00      	cmp	r6, #0
    12ec:	d069      	beq.n	13c2 <__aeabi_dmul+0xfa>
    12ee:	4b6d      	ldr	r3, [pc, #436]	; (14a4 <__aeabi_dmul+0x1dc>)
    12f0:	429e      	cmp	r6, r3
    12f2:	d035      	beq.n	1360 <__aeabi_dmul+0x98>
    12f4:	465b      	mov	r3, fp
    12f6:	2280      	movs	r2, #128	; 0x80
    12f8:	00dd      	lsls	r5, r3, #3
    12fa:	0412      	lsls	r2, r2, #16
    12fc:	0f43      	lsrs	r3, r0, #29
    12fe:	4313      	orrs	r3, r2
    1300:	432b      	orrs	r3, r5
    1302:	469b      	mov	fp, r3
    1304:	00c3      	lsls	r3, r0, #3
    1306:	4698      	mov	r8, r3
    1308:	4b67      	ldr	r3, [pc, #412]	; (14a8 <__aeabi_dmul+0x1e0>)
    130a:	2700      	movs	r7, #0
    130c:	469c      	mov	ip, r3
    130e:	2300      	movs	r3, #0
    1310:	4466      	add	r6, ip
    1312:	9301      	str	r3, [sp, #4]
    1314:	464a      	mov	r2, r9
    1316:	0315      	lsls	r5, r2, #12
    1318:	0050      	lsls	r0, r2, #1
    131a:	0fd2      	lsrs	r2, r2, #31
    131c:	4653      	mov	r3, sl
    131e:	0b2d      	lsrs	r5, r5, #12
    1320:	0d40      	lsrs	r0, r0, #21
    1322:	4691      	mov	r9, r2
    1324:	d100      	bne.n	1328 <__aeabi_dmul+0x60>
    1326:	e076      	b.n	1416 <__aeabi_dmul+0x14e>
    1328:	4a5e      	ldr	r2, [pc, #376]	; (14a4 <__aeabi_dmul+0x1dc>)
    132a:	4290      	cmp	r0, r2
    132c:	d06c      	beq.n	1408 <__aeabi_dmul+0x140>
    132e:	2280      	movs	r2, #128	; 0x80
    1330:	0f5b      	lsrs	r3, r3, #29
    1332:	0412      	lsls	r2, r2, #16
    1334:	4313      	orrs	r3, r2
    1336:	4a5c      	ldr	r2, [pc, #368]	; (14a8 <__aeabi_dmul+0x1e0>)
    1338:	00ed      	lsls	r5, r5, #3
    133a:	4694      	mov	ip, r2
    133c:	431d      	orrs	r5, r3
    133e:	4653      	mov	r3, sl
    1340:	2200      	movs	r2, #0
    1342:	00db      	lsls	r3, r3, #3
    1344:	4460      	add	r0, ip
    1346:	4649      	mov	r1, r9
    1348:	1836      	adds	r6, r6, r0
    134a:	1c70      	adds	r0, r6, #1
    134c:	4061      	eors	r1, r4
    134e:	9002      	str	r0, [sp, #8]
    1350:	4317      	orrs	r7, r2
    1352:	2f0f      	cmp	r7, #15
    1354:	d900      	bls.n	1358 <__aeabi_dmul+0x90>
    1356:	e0af      	b.n	14b8 <__aeabi_dmul+0x1f0>
    1358:	4854      	ldr	r0, [pc, #336]	; (14ac <__aeabi_dmul+0x1e4>)
    135a:	00bf      	lsls	r7, r7, #2
    135c:	59c7      	ldr	r7, [r0, r7]
    135e:	46bf      	mov	pc, r7
    1360:	465b      	mov	r3, fp
    1362:	431f      	orrs	r7, r3
    1364:	d000      	beq.n	1368 <__aeabi_dmul+0xa0>
    1366:	e088      	b.n	147a <__aeabi_dmul+0x1b2>
    1368:	2300      	movs	r3, #0
    136a:	469b      	mov	fp, r3
    136c:	4698      	mov	r8, r3
    136e:	3302      	adds	r3, #2
    1370:	2708      	movs	r7, #8
    1372:	9301      	str	r3, [sp, #4]
    1374:	e7ce      	b.n	1314 <__aeabi_dmul+0x4c>
    1376:	4649      	mov	r1, r9
    1378:	2a02      	cmp	r2, #2
    137a:	d06a      	beq.n	1452 <__aeabi_dmul+0x18a>
    137c:	2a03      	cmp	r2, #3
    137e:	d100      	bne.n	1382 <__aeabi_dmul+0xba>
    1380:	e209      	b.n	1796 <__aeabi_dmul+0x4ce>
    1382:	2a01      	cmp	r2, #1
    1384:	d000      	beq.n	1388 <__aeabi_dmul+0xc0>
    1386:	e1bb      	b.n	1700 <__aeabi_dmul+0x438>
    1388:	4011      	ands	r1, r2
    138a:	2200      	movs	r2, #0
    138c:	2300      	movs	r3, #0
    138e:	2500      	movs	r5, #0
    1390:	4690      	mov	r8, r2
    1392:	b2cc      	uxtb	r4, r1
    1394:	2100      	movs	r1, #0
    1396:	032d      	lsls	r5, r5, #12
    1398:	0d0a      	lsrs	r2, r1, #20
    139a:	0512      	lsls	r2, r2, #20
    139c:	0b2d      	lsrs	r5, r5, #12
    139e:	4315      	orrs	r5, r2
    13a0:	4a43      	ldr	r2, [pc, #268]	; (14b0 <__aeabi_dmul+0x1e8>)
    13a2:	051b      	lsls	r3, r3, #20
    13a4:	4015      	ands	r5, r2
    13a6:	431d      	orrs	r5, r3
    13a8:	006d      	lsls	r5, r5, #1
    13aa:	07e4      	lsls	r4, r4, #31
    13ac:	086d      	lsrs	r5, r5, #1
    13ae:	4325      	orrs	r5, r4
    13b0:	4640      	mov	r0, r8
    13b2:	0029      	movs	r1, r5
    13b4:	b007      	add	sp, #28
    13b6:	bc3c      	pop	{r2, r3, r4, r5}
    13b8:	4690      	mov	r8, r2
    13ba:	4699      	mov	r9, r3
    13bc:	46a2      	mov	sl, r4
    13be:	46ab      	mov	fp, r5
    13c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c2:	4303      	orrs	r3, r0
    13c4:	d052      	beq.n	146c <__aeabi_dmul+0x1a4>
    13c6:	465b      	mov	r3, fp
    13c8:	2b00      	cmp	r3, #0
    13ca:	d100      	bne.n	13ce <__aeabi_dmul+0x106>
    13cc:	e18a      	b.n	16e4 <__aeabi_dmul+0x41c>
    13ce:	4658      	mov	r0, fp
    13d0:	f000 fb16 	bl	1a00 <__clzsi2>
    13d4:	0003      	movs	r3, r0
    13d6:	3b0b      	subs	r3, #11
    13d8:	2b1c      	cmp	r3, #28
    13da:	dd00      	ble.n	13de <__aeabi_dmul+0x116>
    13dc:	e17b      	b.n	16d6 <__aeabi_dmul+0x40e>
    13de:	221d      	movs	r2, #29
    13e0:	1ad3      	subs	r3, r2, r3
    13e2:	003a      	movs	r2, r7
    13e4:	0001      	movs	r1, r0
    13e6:	465d      	mov	r5, fp
    13e8:	40da      	lsrs	r2, r3
    13ea:	3908      	subs	r1, #8
    13ec:	408d      	lsls	r5, r1
    13ee:	0013      	movs	r3, r2
    13f0:	408f      	lsls	r7, r1
    13f2:	432b      	orrs	r3, r5
    13f4:	469b      	mov	fp, r3
    13f6:	46b8      	mov	r8, r7
    13f8:	4b2e      	ldr	r3, [pc, #184]	; (14b4 <__aeabi_dmul+0x1ec>)
    13fa:	2700      	movs	r7, #0
    13fc:	469c      	mov	ip, r3
    13fe:	2300      	movs	r3, #0
    1400:	4460      	add	r0, ip
    1402:	4246      	negs	r6, r0
    1404:	9301      	str	r3, [sp, #4]
    1406:	e785      	b.n	1314 <__aeabi_dmul+0x4c>
    1408:	4652      	mov	r2, sl
    140a:	432a      	orrs	r2, r5
    140c:	d12c      	bne.n	1468 <__aeabi_dmul+0x1a0>
    140e:	2500      	movs	r5, #0
    1410:	2300      	movs	r3, #0
    1412:	2202      	movs	r2, #2
    1414:	e797      	b.n	1346 <__aeabi_dmul+0x7e>
    1416:	4652      	mov	r2, sl
    1418:	432a      	orrs	r2, r5
    141a:	d021      	beq.n	1460 <__aeabi_dmul+0x198>
    141c:	2d00      	cmp	r5, #0
    141e:	d100      	bne.n	1422 <__aeabi_dmul+0x15a>
    1420:	e154      	b.n	16cc <__aeabi_dmul+0x404>
    1422:	0028      	movs	r0, r5
    1424:	f000 faec 	bl	1a00 <__clzsi2>
    1428:	0003      	movs	r3, r0
    142a:	3b0b      	subs	r3, #11
    142c:	2b1c      	cmp	r3, #28
    142e:	dd00      	ble.n	1432 <__aeabi_dmul+0x16a>
    1430:	e146      	b.n	16c0 <__aeabi_dmul+0x3f8>
    1432:	211d      	movs	r1, #29
    1434:	1acb      	subs	r3, r1, r3
    1436:	4651      	mov	r1, sl
    1438:	0002      	movs	r2, r0
    143a:	40d9      	lsrs	r1, r3
    143c:	4653      	mov	r3, sl
    143e:	3a08      	subs	r2, #8
    1440:	4095      	lsls	r5, r2
    1442:	4093      	lsls	r3, r2
    1444:	430d      	orrs	r5, r1
    1446:	4a1b      	ldr	r2, [pc, #108]	; (14b4 <__aeabi_dmul+0x1ec>)
    1448:	4694      	mov	ip, r2
    144a:	4460      	add	r0, ip
    144c:	4240      	negs	r0, r0
    144e:	2200      	movs	r2, #0
    1450:	e779      	b.n	1346 <__aeabi_dmul+0x7e>
    1452:	2401      	movs	r4, #1
    1454:	2200      	movs	r2, #0
    1456:	400c      	ands	r4, r1
    1458:	4b12      	ldr	r3, [pc, #72]	; (14a4 <__aeabi_dmul+0x1dc>)
    145a:	2500      	movs	r5, #0
    145c:	4690      	mov	r8, r2
    145e:	e799      	b.n	1394 <__aeabi_dmul+0xcc>
    1460:	2500      	movs	r5, #0
    1462:	2300      	movs	r3, #0
    1464:	2201      	movs	r2, #1
    1466:	e76e      	b.n	1346 <__aeabi_dmul+0x7e>
    1468:	2203      	movs	r2, #3
    146a:	e76c      	b.n	1346 <__aeabi_dmul+0x7e>
    146c:	2300      	movs	r3, #0
    146e:	469b      	mov	fp, r3
    1470:	4698      	mov	r8, r3
    1472:	3301      	adds	r3, #1
    1474:	2704      	movs	r7, #4
    1476:	9301      	str	r3, [sp, #4]
    1478:	e74c      	b.n	1314 <__aeabi_dmul+0x4c>
    147a:	2303      	movs	r3, #3
    147c:	270c      	movs	r7, #12
    147e:	9301      	str	r3, [sp, #4]
    1480:	e748      	b.n	1314 <__aeabi_dmul+0x4c>
    1482:	2300      	movs	r3, #0
    1484:	2580      	movs	r5, #128	; 0x80
    1486:	4698      	mov	r8, r3
    1488:	2400      	movs	r4, #0
    148a:	032d      	lsls	r5, r5, #12
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <__aeabi_dmul+0x1dc>)
    148e:	e781      	b.n	1394 <__aeabi_dmul+0xcc>
    1490:	465d      	mov	r5, fp
    1492:	4643      	mov	r3, r8
    1494:	9a01      	ldr	r2, [sp, #4]
    1496:	e76f      	b.n	1378 <__aeabi_dmul+0xb0>
    1498:	465d      	mov	r5, fp
    149a:	4643      	mov	r3, r8
    149c:	0021      	movs	r1, r4
    149e:	9a01      	ldr	r2, [sp, #4]
    14a0:	e76a      	b.n	1378 <__aeabi_dmul+0xb0>
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	000007ff 	.word	0x000007ff
    14a8:	fffffc01 	.word	0xfffffc01
    14ac:	00001e04 	.word	0x00001e04
    14b0:	800fffff 	.word	0x800fffff
    14b4:	000003f3 	.word	0x000003f3
    14b8:	4642      	mov	r2, r8
    14ba:	0c12      	lsrs	r2, r2, #16
    14bc:	4691      	mov	r9, r2
    14be:	0c1a      	lsrs	r2, r3, #16
    14c0:	4694      	mov	ip, r2
    14c2:	4642      	mov	r2, r8
    14c4:	0417      	lsls	r7, r2, #16
    14c6:	464a      	mov	r2, r9
    14c8:	041b      	lsls	r3, r3, #16
    14ca:	0c1b      	lsrs	r3, r3, #16
    14cc:	435a      	muls	r2, r3
    14ce:	4660      	mov	r0, ip
    14d0:	4690      	mov	r8, r2
    14d2:	464a      	mov	r2, r9
    14d4:	4342      	muls	r2, r0
    14d6:	0010      	movs	r0, r2
    14d8:	9203      	str	r2, [sp, #12]
    14da:	4662      	mov	r2, ip
    14dc:	001c      	movs	r4, r3
    14de:	0c3f      	lsrs	r7, r7, #16
    14e0:	437a      	muls	r2, r7
    14e2:	437c      	muls	r4, r7
    14e4:	4442      	add	r2, r8
    14e6:	9201      	str	r2, [sp, #4]
    14e8:	0c22      	lsrs	r2, r4, #16
    14ea:	4692      	mov	sl, r2
    14ec:	9a01      	ldr	r2, [sp, #4]
    14ee:	4452      	add	r2, sl
    14f0:	4590      	cmp	r8, r2
    14f2:	d906      	bls.n	1502 <__aeabi_dmul+0x23a>
    14f4:	4682      	mov	sl, r0
    14f6:	2080      	movs	r0, #128	; 0x80
    14f8:	0240      	lsls	r0, r0, #9
    14fa:	4680      	mov	r8, r0
    14fc:	44c2      	add	sl, r8
    14fe:	4650      	mov	r0, sl
    1500:	9003      	str	r0, [sp, #12]
    1502:	0c10      	lsrs	r0, r2, #16
    1504:	9004      	str	r0, [sp, #16]
    1506:	4648      	mov	r0, r9
    1508:	0424      	lsls	r4, r4, #16
    150a:	0c24      	lsrs	r4, r4, #16
    150c:	0412      	lsls	r2, r2, #16
    150e:	1912      	adds	r2, r2, r4
    1510:	9205      	str	r2, [sp, #20]
    1512:	0c2a      	lsrs	r2, r5, #16
    1514:	042d      	lsls	r5, r5, #16
    1516:	0c2d      	lsrs	r5, r5, #16
    1518:	4368      	muls	r0, r5
    151a:	002c      	movs	r4, r5
    151c:	4682      	mov	sl, r0
    151e:	4648      	mov	r0, r9
    1520:	437c      	muls	r4, r7
    1522:	4350      	muls	r0, r2
    1524:	4681      	mov	r9, r0
    1526:	0c20      	lsrs	r0, r4, #16
    1528:	4680      	mov	r8, r0
    152a:	4357      	muls	r7, r2
    152c:	4457      	add	r7, sl
    152e:	4447      	add	r7, r8
    1530:	45ba      	cmp	sl, r7
    1532:	d903      	bls.n	153c <__aeabi_dmul+0x274>
    1534:	2080      	movs	r0, #128	; 0x80
    1536:	0240      	lsls	r0, r0, #9
    1538:	4680      	mov	r8, r0
    153a:	44c1      	add	r9, r8
    153c:	0c38      	lsrs	r0, r7, #16
    153e:	043f      	lsls	r7, r7, #16
    1540:	46b8      	mov	r8, r7
    1542:	4448      	add	r0, r9
    1544:	0424      	lsls	r4, r4, #16
    1546:	0c24      	lsrs	r4, r4, #16
    1548:	9001      	str	r0, [sp, #4]
    154a:	9804      	ldr	r0, [sp, #16]
    154c:	44a0      	add	r8, r4
    154e:	4440      	add	r0, r8
    1550:	9004      	str	r0, [sp, #16]
    1552:	4658      	mov	r0, fp
    1554:	0c00      	lsrs	r0, r0, #16
    1556:	4681      	mov	r9, r0
    1558:	4658      	mov	r0, fp
    155a:	0404      	lsls	r4, r0, #16
    155c:	0c20      	lsrs	r0, r4, #16
    155e:	4682      	mov	sl, r0
    1560:	0007      	movs	r7, r0
    1562:	4648      	mov	r0, r9
    1564:	435f      	muls	r7, r3
    1566:	464c      	mov	r4, r9
    1568:	4343      	muls	r3, r0
    156a:	4660      	mov	r0, ip
    156c:	4360      	muls	r0, r4
    156e:	4664      	mov	r4, ip
    1570:	4683      	mov	fp, r0
    1572:	4650      	mov	r0, sl
    1574:	4344      	muls	r4, r0
    1576:	0c38      	lsrs	r0, r7, #16
    1578:	4684      	mov	ip, r0
    157a:	18e4      	adds	r4, r4, r3
    157c:	4464      	add	r4, ip
    157e:	42a3      	cmp	r3, r4
    1580:	d903      	bls.n	158a <__aeabi_dmul+0x2c2>
    1582:	2380      	movs	r3, #128	; 0x80
    1584:	025b      	lsls	r3, r3, #9
    1586:	469c      	mov	ip, r3
    1588:	44e3      	add	fp, ip
    158a:	4648      	mov	r0, r9
    158c:	043f      	lsls	r7, r7, #16
    158e:	0c23      	lsrs	r3, r4, #16
    1590:	0c3f      	lsrs	r7, r7, #16
    1592:	0424      	lsls	r4, r4, #16
    1594:	19e4      	adds	r4, r4, r7
    1596:	4657      	mov	r7, sl
    1598:	4368      	muls	r0, r5
    159a:	436f      	muls	r7, r5
    159c:	4684      	mov	ip, r0
    159e:	464d      	mov	r5, r9
    15a0:	4650      	mov	r0, sl
    15a2:	4355      	muls	r5, r2
    15a4:	4342      	muls	r2, r0
    15a6:	0c38      	lsrs	r0, r7, #16
    15a8:	4681      	mov	r9, r0
    15aa:	4462      	add	r2, ip
    15ac:	444a      	add	r2, r9
    15ae:	445b      	add	r3, fp
    15b0:	4594      	cmp	ip, r2
    15b2:	d903      	bls.n	15bc <__aeabi_dmul+0x2f4>
    15b4:	2080      	movs	r0, #128	; 0x80
    15b6:	0240      	lsls	r0, r0, #9
    15b8:	4684      	mov	ip, r0
    15ba:	4465      	add	r5, ip
    15bc:	9803      	ldr	r0, [sp, #12]
    15be:	043f      	lsls	r7, r7, #16
    15c0:	4683      	mov	fp, r0
    15c2:	9804      	ldr	r0, [sp, #16]
    15c4:	0c3f      	lsrs	r7, r7, #16
    15c6:	4684      	mov	ip, r0
    15c8:	44e3      	add	fp, ip
    15ca:	45c3      	cmp	fp, r8
    15cc:	4180      	sbcs	r0, r0
    15ce:	4240      	negs	r0, r0
    15d0:	4682      	mov	sl, r0
    15d2:	0410      	lsls	r0, r2, #16
    15d4:	4684      	mov	ip, r0
    15d6:	9801      	ldr	r0, [sp, #4]
    15d8:	4467      	add	r7, ip
    15da:	4684      	mov	ip, r0
    15dc:	4467      	add	r7, ip
    15de:	44a3      	add	fp, r4
    15e0:	46bc      	mov	ip, r7
    15e2:	45a3      	cmp	fp, r4
    15e4:	41a4      	sbcs	r4, r4
    15e6:	4699      	mov	r9, r3
    15e8:	44d4      	add	ip, sl
    15ea:	4264      	negs	r4, r4
    15ec:	4287      	cmp	r7, r0
    15ee:	41bf      	sbcs	r7, r7
    15f0:	45d4      	cmp	ip, sl
    15f2:	4180      	sbcs	r0, r0
    15f4:	44e1      	add	r9, ip
    15f6:	46a0      	mov	r8, r4
    15f8:	4599      	cmp	r9, r3
    15fa:	419b      	sbcs	r3, r3
    15fc:	427f      	negs	r7, r7
    15fe:	4240      	negs	r0, r0
    1600:	44c8      	add	r8, r9
    1602:	4307      	orrs	r7, r0
    1604:	0c12      	lsrs	r2, r2, #16
    1606:	18ba      	adds	r2, r7, r2
    1608:	45a0      	cmp	r8, r4
    160a:	41a4      	sbcs	r4, r4
    160c:	425f      	negs	r7, r3
    160e:	003b      	movs	r3, r7
    1610:	4264      	negs	r4, r4
    1612:	4323      	orrs	r3, r4
    1614:	18d7      	adds	r7, r2, r3
    1616:	4643      	mov	r3, r8
    1618:	197d      	adds	r5, r7, r5
    161a:	0ddb      	lsrs	r3, r3, #23
    161c:	026d      	lsls	r5, r5, #9
    161e:	431d      	orrs	r5, r3
    1620:	465b      	mov	r3, fp
    1622:	025a      	lsls	r2, r3, #9
    1624:	9b05      	ldr	r3, [sp, #20]
    1626:	431a      	orrs	r2, r3
    1628:	1e53      	subs	r3, r2, #1
    162a:	419a      	sbcs	r2, r3
    162c:	465b      	mov	r3, fp
    162e:	0ddb      	lsrs	r3, r3, #23
    1630:	431a      	orrs	r2, r3
    1632:	4643      	mov	r3, r8
    1634:	025b      	lsls	r3, r3, #9
    1636:	4313      	orrs	r3, r2
    1638:	01ea      	lsls	r2, r5, #7
    163a:	d507      	bpl.n	164c <__aeabi_dmul+0x384>
    163c:	2201      	movs	r2, #1
    163e:	085c      	lsrs	r4, r3, #1
    1640:	4013      	ands	r3, r2
    1642:	4323      	orrs	r3, r4
    1644:	07ea      	lsls	r2, r5, #31
    1646:	9e02      	ldr	r6, [sp, #8]
    1648:	4313      	orrs	r3, r2
    164a:	086d      	lsrs	r5, r5, #1
    164c:	4a57      	ldr	r2, [pc, #348]	; (17ac <__aeabi_dmul+0x4e4>)
    164e:	18b2      	adds	r2, r6, r2
    1650:	2a00      	cmp	r2, #0
    1652:	dd4b      	ble.n	16ec <__aeabi_dmul+0x424>
    1654:	0758      	lsls	r0, r3, #29
    1656:	d009      	beq.n	166c <__aeabi_dmul+0x3a4>
    1658:	200f      	movs	r0, #15
    165a:	4018      	ands	r0, r3
    165c:	2804      	cmp	r0, #4
    165e:	d005      	beq.n	166c <__aeabi_dmul+0x3a4>
    1660:	1d18      	adds	r0, r3, #4
    1662:	4298      	cmp	r0, r3
    1664:	419b      	sbcs	r3, r3
    1666:	425b      	negs	r3, r3
    1668:	18ed      	adds	r5, r5, r3
    166a:	0003      	movs	r3, r0
    166c:	01e8      	lsls	r0, r5, #7
    166e:	d504      	bpl.n	167a <__aeabi_dmul+0x3b2>
    1670:	4a4f      	ldr	r2, [pc, #316]	; (17b0 <__aeabi_dmul+0x4e8>)
    1672:	4015      	ands	r5, r2
    1674:	2280      	movs	r2, #128	; 0x80
    1676:	00d2      	lsls	r2, r2, #3
    1678:	18b2      	adds	r2, r6, r2
    167a:	484e      	ldr	r0, [pc, #312]	; (17b4 <__aeabi_dmul+0x4ec>)
    167c:	4282      	cmp	r2, r0
    167e:	dd00      	ble.n	1682 <__aeabi_dmul+0x3ba>
    1680:	e6e7      	b.n	1452 <__aeabi_dmul+0x18a>
    1682:	2401      	movs	r4, #1
    1684:	08db      	lsrs	r3, r3, #3
    1686:	0768      	lsls	r0, r5, #29
    1688:	4318      	orrs	r0, r3
    168a:	026d      	lsls	r5, r5, #9
    168c:	0553      	lsls	r3, r2, #21
    168e:	4680      	mov	r8, r0
    1690:	0b2d      	lsrs	r5, r5, #12
    1692:	0d5b      	lsrs	r3, r3, #21
    1694:	400c      	ands	r4, r1
    1696:	e67d      	b.n	1394 <__aeabi_dmul+0xcc>
    1698:	2280      	movs	r2, #128	; 0x80
    169a:	4659      	mov	r1, fp
    169c:	0312      	lsls	r2, r2, #12
    169e:	4211      	tst	r1, r2
    16a0:	d008      	beq.n	16b4 <__aeabi_dmul+0x3ec>
    16a2:	4215      	tst	r5, r2
    16a4:	d106      	bne.n	16b4 <__aeabi_dmul+0x3ec>
    16a6:	4315      	orrs	r5, r2
    16a8:	032d      	lsls	r5, r5, #12
    16aa:	4698      	mov	r8, r3
    16ac:	0b2d      	lsrs	r5, r5, #12
    16ae:	464c      	mov	r4, r9
    16b0:	4b41      	ldr	r3, [pc, #260]	; (17b8 <__aeabi_dmul+0x4f0>)
    16b2:	e66f      	b.n	1394 <__aeabi_dmul+0xcc>
    16b4:	465d      	mov	r5, fp
    16b6:	4315      	orrs	r5, r2
    16b8:	032d      	lsls	r5, r5, #12
    16ba:	0b2d      	lsrs	r5, r5, #12
    16bc:	4b3e      	ldr	r3, [pc, #248]	; (17b8 <__aeabi_dmul+0x4f0>)
    16be:	e669      	b.n	1394 <__aeabi_dmul+0xcc>
    16c0:	0003      	movs	r3, r0
    16c2:	4655      	mov	r5, sl
    16c4:	3b28      	subs	r3, #40	; 0x28
    16c6:	409d      	lsls	r5, r3
    16c8:	2300      	movs	r3, #0
    16ca:	e6bc      	b.n	1446 <__aeabi_dmul+0x17e>
    16cc:	4650      	mov	r0, sl
    16ce:	f000 f997 	bl	1a00 <__clzsi2>
    16d2:	3020      	adds	r0, #32
    16d4:	e6a8      	b.n	1428 <__aeabi_dmul+0x160>
    16d6:	0003      	movs	r3, r0
    16d8:	3b28      	subs	r3, #40	; 0x28
    16da:	409f      	lsls	r7, r3
    16dc:	2300      	movs	r3, #0
    16de:	46bb      	mov	fp, r7
    16e0:	4698      	mov	r8, r3
    16e2:	e689      	b.n	13f8 <__aeabi_dmul+0x130>
    16e4:	f000 f98c 	bl	1a00 <__clzsi2>
    16e8:	3020      	adds	r0, #32
    16ea:	e673      	b.n	13d4 <__aeabi_dmul+0x10c>
    16ec:	2401      	movs	r4, #1
    16ee:	1aa6      	subs	r6, r4, r2
    16f0:	2e38      	cmp	r6, #56	; 0x38
    16f2:	dd07      	ble.n	1704 <__aeabi_dmul+0x43c>
    16f4:	2200      	movs	r2, #0
    16f6:	400c      	ands	r4, r1
    16f8:	2300      	movs	r3, #0
    16fa:	2500      	movs	r5, #0
    16fc:	4690      	mov	r8, r2
    16fe:	e649      	b.n	1394 <__aeabi_dmul+0xcc>
    1700:	9e02      	ldr	r6, [sp, #8]
    1702:	e7a3      	b.n	164c <__aeabi_dmul+0x384>
    1704:	2e1f      	cmp	r6, #31
    1706:	dc20      	bgt.n	174a <__aeabi_dmul+0x482>
    1708:	2220      	movs	r2, #32
    170a:	002c      	movs	r4, r5
    170c:	0018      	movs	r0, r3
    170e:	1b92      	subs	r2, r2, r6
    1710:	40f0      	lsrs	r0, r6
    1712:	4094      	lsls	r4, r2
    1714:	4093      	lsls	r3, r2
    1716:	4304      	orrs	r4, r0
    1718:	1e58      	subs	r0, r3, #1
    171a:	4183      	sbcs	r3, r0
    171c:	431c      	orrs	r4, r3
    171e:	40f5      	lsrs	r5, r6
    1720:	0763      	lsls	r3, r4, #29
    1722:	d009      	beq.n	1738 <__aeabi_dmul+0x470>
    1724:	230f      	movs	r3, #15
    1726:	4023      	ands	r3, r4
    1728:	2b04      	cmp	r3, #4
    172a:	d005      	beq.n	1738 <__aeabi_dmul+0x470>
    172c:	0023      	movs	r3, r4
    172e:	1d1c      	adds	r4, r3, #4
    1730:	429c      	cmp	r4, r3
    1732:	4192      	sbcs	r2, r2
    1734:	4252      	negs	r2, r2
    1736:	18ad      	adds	r5, r5, r2
    1738:	022b      	lsls	r3, r5, #8
    173a:	d51f      	bpl.n	177c <__aeabi_dmul+0x4b4>
    173c:	2401      	movs	r4, #1
    173e:	2200      	movs	r2, #0
    1740:	400c      	ands	r4, r1
    1742:	2301      	movs	r3, #1
    1744:	2500      	movs	r5, #0
    1746:	4690      	mov	r8, r2
    1748:	e624      	b.n	1394 <__aeabi_dmul+0xcc>
    174a:	201f      	movs	r0, #31
    174c:	002c      	movs	r4, r5
    174e:	4240      	negs	r0, r0
    1750:	1a82      	subs	r2, r0, r2
    1752:	40d4      	lsrs	r4, r2
    1754:	2e20      	cmp	r6, #32
    1756:	d01c      	beq.n	1792 <__aeabi_dmul+0x4ca>
    1758:	2240      	movs	r2, #64	; 0x40
    175a:	1b96      	subs	r6, r2, r6
    175c:	40b5      	lsls	r5, r6
    175e:	432b      	orrs	r3, r5
    1760:	1e58      	subs	r0, r3, #1
    1762:	4183      	sbcs	r3, r0
    1764:	2007      	movs	r0, #7
    1766:	4323      	orrs	r3, r4
    1768:	4018      	ands	r0, r3
    176a:	2500      	movs	r5, #0
    176c:	2800      	cmp	r0, #0
    176e:	d009      	beq.n	1784 <__aeabi_dmul+0x4bc>
    1770:	220f      	movs	r2, #15
    1772:	2500      	movs	r5, #0
    1774:	401a      	ands	r2, r3
    1776:	001c      	movs	r4, r3
    1778:	2a04      	cmp	r2, #4
    177a:	d1d8      	bne.n	172e <__aeabi_dmul+0x466>
    177c:	0023      	movs	r3, r4
    177e:	0768      	lsls	r0, r5, #29
    1780:	026d      	lsls	r5, r5, #9
    1782:	0b2d      	lsrs	r5, r5, #12
    1784:	2401      	movs	r4, #1
    1786:	08db      	lsrs	r3, r3, #3
    1788:	4303      	orrs	r3, r0
    178a:	4698      	mov	r8, r3
    178c:	400c      	ands	r4, r1
    178e:	2300      	movs	r3, #0
    1790:	e600      	b.n	1394 <__aeabi_dmul+0xcc>
    1792:	2500      	movs	r5, #0
    1794:	e7e3      	b.n	175e <__aeabi_dmul+0x496>
    1796:	2280      	movs	r2, #128	; 0x80
    1798:	2401      	movs	r4, #1
    179a:	0312      	lsls	r2, r2, #12
    179c:	4315      	orrs	r5, r2
    179e:	032d      	lsls	r5, r5, #12
    17a0:	4698      	mov	r8, r3
    17a2:	0b2d      	lsrs	r5, r5, #12
    17a4:	400c      	ands	r4, r1
    17a6:	4b04      	ldr	r3, [pc, #16]	; (17b8 <__aeabi_dmul+0x4f0>)
    17a8:	e5f4      	b.n	1394 <__aeabi_dmul+0xcc>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	000003ff 	.word	0x000003ff
    17b0:	feffffff 	.word	0xfeffffff
    17b4:	000007fe 	.word	0x000007fe
    17b8:	000007ff 	.word	0x000007ff

000017bc <__aeabi_i2d>:
    17bc:	b570      	push	{r4, r5, r6, lr}
    17be:	2800      	cmp	r0, #0
    17c0:	d030      	beq.n	1824 <__aeabi_i2d+0x68>
    17c2:	17c3      	asrs	r3, r0, #31
    17c4:	18c4      	adds	r4, r0, r3
    17c6:	405c      	eors	r4, r3
    17c8:	0fc5      	lsrs	r5, r0, #31
    17ca:	0020      	movs	r0, r4
    17cc:	f000 f918 	bl	1a00 <__clzsi2>
    17d0:	4b17      	ldr	r3, [pc, #92]	; (1830 <__aeabi_i2d+0x74>)
    17d2:	4a18      	ldr	r2, [pc, #96]	; (1834 <__aeabi_i2d+0x78>)
    17d4:	1a1b      	subs	r3, r3, r0
    17d6:	1ad2      	subs	r2, r2, r3
    17d8:	2a1f      	cmp	r2, #31
    17da:	dd18      	ble.n	180e <__aeabi_i2d+0x52>
    17dc:	4a16      	ldr	r2, [pc, #88]	; (1838 <__aeabi_i2d+0x7c>)
    17de:	1ad2      	subs	r2, r2, r3
    17e0:	4094      	lsls	r4, r2
    17e2:	2200      	movs	r2, #0
    17e4:	0324      	lsls	r4, r4, #12
    17e6:	055b      	lsls	r3, r3, #21
    17e8:	0b24      	lsrs	r4, r4, #12
    17ea:	0d5b      	lsrs	r3, r3, #21
    17ec:	2100      	movs	r1, #0
    17ee:	0010      	movs	r0, r2
    17f0:	0324      	lsls	r4, r4, #12
    17f2:	0d0a      	lsrs	r2, r1, #20
    17f4:	0512      	lsls	r2, r2, #20
    17f6:	0b24      	lsrs	r4, r4, #12
    17f8:	4314      	orrs	r4, r2
    17fa:	4a10      	ldr	r2, [pc, #64]	; (183c <__aeabi_i2d+0x80>)
    17fc:	051b      	lsls	r3, r3, #20
    17fe:	4014      	ands	r4, r2
    1800:	431c      	orrs	r4, r3
    1802:	0064      	lsls	r4, r4, #1
    1804:	07ed      	lsls	r5, r5, #31
    1806:	0864      	lsrs	r4, r4, #1
    1808:	432c      	orrs	r4, r5
    180a:	0021      	movs	r1, r4
    180c:	bd70      	pop	{r4, r5, r6, pc}
    180e:	0021      	movs	r1, r4
    1810:	4091      	lsls	r1, r2
    1812:	000a      	movs	r2, r1
    1814:	210b      	movs	r1, #11
    1816:	1a08      	subs	r0, r1, r0
    1818:	40c4      	lsrs	r4, r0
    181a:	055b      	lsls	r3, r3, #21
    181c:	0324      	lsls	r4, r4, #12
    181e:	0b24      	lsrs	r4, r4, #12
    1820:	0d5b      	lsrs	r3, r3, #21
    1822:	e7e3      	b.n	17ec <__aeabi_i2d+0x30>
    1824:	2500      	movs	r5, #0
    1826:	2300      	movs	r3, #0
    1828:	2400      	movs	r4, #0
    182a:	2200      	movs	r2, #0
    182c:	e7de      	b.n	17ec <__aeabi_i2d+0x30>
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	0000041e 	.word	0x0000041e
    1834:	00000433 	.word	0x00000433
    1838:	00000413 	.word	0x00000413
    183c:	800fffff 	.word	0x800fffff

00001840 <__aeabi_f2d>:
    1840:	0042      	lsls	r2, r0, #1
    1842:	0e12      	lsrs	r2, r2, #24
    1844:	1c51      	adds	r1, r2, #1
    1846:	0243      	lsls	r3, r0, #9
    1848:	b2c9      	uxtb	r1, r1
    184a:	b570      	push	{r4, r5, r6, lr}
    184c:	0a5d      	lsrs	r5, r3, #9
    184e:	0fc4      	lsrs	r4, r0, #31
    1850:	2901      	cmp	r1, #1
    1852:	dd15      	ble.n	1880 <__aeabi_f2d+0x40>
    1854:	21e0      	movs	r1, #224	; 0xe0
    1856:	0089      	lsls	r1, r1, #2
    1858:	468c      	mov	ip, r1
    185a:	076d      	lsls	r5, r5, #29
    185c:	0b1b      	lsrs	r3, r3, #12
    185e:	4462      	add	r2, ip
    1860:	2100      	movs	r1, #0
    1862:	0028      	movs	r0, r5
    1864:	0d0d      	lsrs	r5, r1, #20
    1866:	052d      	lsls	r5, r5, #20
    1868:	432b      	orrs	r3, r5
    186a:	4d1c      	ldr	r5, [pc, #112]	; (18dc <__aeabi_f2d+0x9c>)
    186c:	0552      	lsls	r2, r2, #21
    186e:	402b      	ands	r3, r5
    1870:	0852      	lsrs	r2, r2, #1
    1872:	4313      	orrs	r3, r2
    1874:	005b      	lsls	r3, r3, #1
    1876:	07e4      	lsls	r4, r4, #31
    1878:	085b      	lsrs	r3, r3, #1
    187a:	4323      	orrs	r3, r4
    187c:	0019      	movs	r1, r3
    187e:	bd70      	pop	{r4, r5, r6, pc}
    1880:	2a00      	cmp	r2, #0
    1882:	d115      	bne.n	18b0 <__aeabi_f2d+0x70>
    1884:	2d00      	cmp	r5, #0
    1886:	d01f      	beq.n	18c8 <__aeabi_f2d+0x88>
    1888:	0028      	movs	r0, r5
    188a:	f000 f8b9 	bl	1a00 <__clzsi2>
    188e:	280a      	cmp	r0, #10
    1890:	dc1d      	bgt.n	18ce <__aeabi_f2d+0x8e>
    1892:	230b      	movs	r3, #11
    1894:	002a      	movs	r2, r5
    1896:	1a1b      	subs	r3, r3, r0
    1898:	40da      	lsrs	r2, r3
    189a:	0013      	movs	r3, r2
    189c:	0002      	movs	r2, r0
    189e:	3215      	adds	r2, #21
    18a0:	4095      	lsls	r5, r2
    18a2:	4a0f      	ldr	r2, [pc, #60]	; (18e0 <__aeabi_f2d+0xa0>)
    18a4:	031b      	lsls	r3, r3, #12
    18a6:	1a12      	subs	r2, r2, r0
    18a8:	0552      	lsls	r2, r2, #21
    18aa:	0b1b      	lsrs	r3, r3, #12
    18ac:	0d52      	lsrs	r2, r2, #21
    18ae:	e7d7      	b.n	1860 <__aeabi_f2d+0x20>
    18b0:	2d00      	cmp	r5, #0
    18b2:	d006      	beq.n	18c2 <__aeabi_f2d+0x82>
    18b4:	2280      	movs	r2, #128	; 0x80
    18b6:	0b1b      	lsrs	r3, r3, #12
    18b8:	0312      	lsls	r2, r2, #12
    18ba:	4313      	orrs	r3, r2
    18bc:	076d      	lsls	r5, r5, #29
    18be:	4a09      	ldr	r2, [pc, #36]	; (18e4 <__aeabi_f2d+0xa4>)
    18c0:	e7ce      	b.n	1860 <__aeabi_f2d+0x20>
    18c2:	4a08      	ldr	r2, [pc, #32]	; (18e4 <__aeabi_f2d+0xa4>)
    18c4:	2300      	movs	r3, #0
    18c6:	e7cb      	b.n	1860 <__aeabi_f2d+0x20>
    18c8:	2200      	movs	r2, #0
    18ca:	2300      	movs	r3, #0
    18cc:	e7c8      	b.n	1860 <__aeabi_f2d+0x20>
    18ce:	0003      	movs	r3, r0
    18d0:	3b0b      	subs	r3, #11
    18d2:	409d      	lsls	r5, r3
    18d4:	002b      	movs	r3, r5
    18d6:	2500      	movs	r5, #0
    18d8:	e7e3      	b.n	18a2 <__aeabi_f2d+0x62>
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	800fffff 	.word	0x800fffff
    18e0:	00000389 	.word	0x00000389
    18e4:	000007ff 	.word	0x000007ff

000018e8 <__aeabi_d2f>:
    18e8:	004b      	lsls	r3, r1, #1
    18ea:	b570      	push	{r4, r5, r6, lr}
    18ec:	0d5e      	lsrs	r6, r3, #21
    18ee:	030c      	lsls	r4, r1, #12
    18f0:	1c75      	adds	r5, r6, #1
    18f2:	0a64      	lsrs	r4, r4, #9
    18f4:	0f42      	lsrs	r2, r0, #29
    18f6:	056d      	lsls	r5, r5, #21
    18f8:	4322      	orrs	r2, r4
    18fa:	0fc9      	lsrs	r1, r1, #31
    18fc:	00c4      	lsls	r4, r0, #3
    18fe:	0d6d      	lsrs	r5, r5, #21
    1900:	2d01      	cmp	r5, #1
    1902:	dd2a      	ble.n	195a <__aeabi_d2f+0x72>
    1904:	4b3b      	ldr	r3, [pc, #236]	; (19f4 <__aeabi_d2f+0x10c>)
    1906:	18f3      	adds	r3, r6, r3
    1908:	2bfe      	cmp	r3, #254	; 0xfe
    190a:	dc1a      	bgt.n	1942 <__aeabi_d2f+0x5a>
    190c:	2b00      	cmp	r3, #0
    190e:	dd42      	ble.n	1996 <__aeabi_d2f+0xae>
    1910:	0180      	lsls	r0, r0, #6
    1912:	1e45      	subs	r5, r0, #1
    1914:	41a8      	sbcs	r0, r5
    1916:	00d2      	lsls	r2, r2, #3
    1918:	4310      	orrs	r0, r2
    191a:	0f62      	lsrs	r2, r4, #29
    191c:	4302      	orrs	r2, r0
    191e:	0750      	lsls	r0, r2, #29
    1920:	d004      	beq.n	192c <__aeabi_d2f+0x44>
    1922:	200f      	movs	r0, #15
    1924:	4010      	ands	r0, r2
    1926:	2804      	cmp	r0, #4
    1928:	d000      	beq.n	192c <__aeabi_d2f+0x44>
    192a:	3204      	adds	r2, #4
    192c:	2080      	movs	r0, #128	; 0x80
    192e:	04c0      	lsls	r0, r0, #19
    1930:	4010      	ands	r0, r2
    1932:	d021      	beq.n	1978 <__aeabi_d2f+0x90>
    1934:	3301      	adds	r3, #1
    1936:	2bff      	cmp	r3, #255	; 0xff
    1938:	d003      	beq.n	1942 <__aeabi_d2f+0x5a>
    193a:	0192      	lsls	r2, r2, #6
    193c:	0a52      	lsrs	r2, r2, #9
    193e:	b2db      	uxtb	r3, r3
    1940:	e001      	b.n	1946 <__aeabi_d2f+0x5e>
    1942:	23ff      	movs	r3, #255	; 0xff
    1944:	2200      	movs	r2, #0
    1946:	0252      	lsls	r2, r2, #9
    1948:	0a52      	lsrs	r2, r2, #9
    194a:	05db      	lsls	r3, r3, #23
    194c:	4313      	orrs	r3, r2
    194e:	005b      	lsls	r3, r3, #1
    1950:	07c9      	lsls	r1, r1, #31
    1952:	085b      	lsrs	r3, r3, #1
    1954:	430b      	orrs	r3, r1
    1956:	0018      	movs	r0, r3
    1958:	bd70      	pop	{r4, r5, r6, pc}
    195a:	2e00      	cmp	r6, #0
    195c:	d007      	beq.n	196e <__aeabi_d2f+0x86>
    195e:	4314      	orrs	r4, r2
    1960:	d0ef      	beq.n	1942 <__aeabi_d2f+0x5a>
    1962:	2080      	movs	r0, #128	; 0x80
    1964:	00d2      	lsls	r2, r2, #3
    1966:	0480      	lsls	r0, r0, #18
    1968:	4302      	orrs	r2, r0
    196a:	23ff      	movs	r3, #255	; 0xff
    196c:	e7d7      	b.n	191e <__aeabi_d2f+0x36>
    196e:	4322      	orrs	r2, r4
    1970:	2300      	movs	r3, #0
    1972:	2a00      	cmp	r2, #0
    1974:	d003      	beq.n	197e <__aeabi_d2f+0x96>
    1976:	2205      	movs	r2, #5
    1978:	08d2      	lsrs	r2, r2, #3
    197a:	2bff      	cmp	r3, #255	; 0xff
    197c:	d003      	beq.n	1986 <__aeabi_d2f+0x9e>
    197e:	0252      	lsls	r2, r2, #9
    1980:	0a52      	lsrs	r2, r2, #9
    1982:	b2db      	uxtb	r3, r3
    1984:	e7df      	b.n	1946 <__aeabi_d2f+0x5e>
    1986:	2a00      	cmp	r2, #0
    1988:	d032      	beq.n	19f0 <__aeabi_d2f+0x108>
    198a:	2080      	movs	r0, #128	; 0x80
    198c:	03c0      	lsls	r0, r0, #15
    198e:	4302      	orrs	r2, r0
    1990:	0252      	lsls	r2, r2, #9
    1992:	0a52      	lsrs	r2, r2, #9
    1994:	e7d7      	b.n	1946 <__aeabi_d2f+0x5e>
    1996:	0018      	movs	r0, r3
    1998:	3017      	adds	r0, #23
    199a:	db14      	blt.n	19c6 <__aeabi_d2f+0xde>
    199c:	2080      	movs	r0, #128	; 0x80
    199e:	0400      	lsls	r0, r0, #16
    19a0:	4302      	orrs	r2, r0
    19a2:	201e      	movs	r0, #30
    19a4:	1ac0      	subs	r0, r0, r3
    19a6:	281f      	cmp	r0, #31
    19a8:	dc0f      	bgt.n	19ca <__aeabi_d2f+0xe2>
    19aa:	0025      	movs	r5, r4
    19ac:	4b12      	ldr	r3, [pc, #72]	; (19f8 <__aeabi_d2f+0x110>)
    19ae:	18f3      	adds	r3, r6, r3
    19b0:	409d      	lsls	r5, r3
    19b2:	1e6e      	subs	r6, r5, #1
    19b4:	41b5      	sbcs	r5, r6
    19b6:	409a      	lsls	r2, r3
    19b8:	002b      	movs	r3, r5
    19ba:	4313      	orrs	r3, r2
    19bc:	0022      	movs	r2, r4
    19be:	40c2      	lsrs	r2, r0
    19c0:	431a      	orrs	r2, r3
    19c2:	2300      	movs	r3, #0
    19c4:	e7ab      	b.n	191e <__aeabi_d2f+0x36>
    19c6:	2300      	movs	r3, #0
    19c8:	e7d5      	b.n	1976 <__aeabi_d2f+0x8e>
    19ca:	2502      	movs	r5, #2
    19cc:	426d      	negs	r5, r5
    19ce:	1aeb      	subs	r3, r5, r3
    19d0:	0015      	movs	r5, r2
    19d2:	40dd      	lsrs	r5, r3
    19d4:	2820      	cmp	r0, #32
    19d6:	d009      	beq.n	19ec <__aeabi_d2f+0x104>
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <__aeabi_d2f+0x114>)
    19da:	18f3      	adds	r3, r6, r3
    19dc:	409a      	lsls	r2, r3
    19de:	4314      	orrs	r4, r2
    19e0:	1e62      	subs	r2, r4, #1
    19e2:	4194      	sbcs	r4, r2
    19e4:	0022      	movs	r2, r4
    19e6:	2300      	movs	r3, #0
    19e8:	432a      	orrs	r2, r5
    19ea:	e798      	b.n	191e <__aeabi_d2f+0x36>
    19ec:	2200      	movs	r2, #0
    19ee:	e7f6      	b.n	19de <__aeabi_d2f+0xf6>
    19f0:	2200      	movs	r2, #0
    19f2:	e7a8      	b.n	1946 <__aeabi_d2f+0x5e>
    19f4:	fffffc80 	.word	0xfffffc80
    19f8:	fffffc82 	.word	0xfffffc82
    19fc:	fffffca2 	.word	0xfffffca2

00001a00 <__clzsi2>:
    1a00:	211c      	movs	r1, #28
    1a02:	2301      	movs	r3, #1
    1a04:	041b      	lsls	r3, r3, #16
    1a06:	4298      	cmp	r0, r3
    1a08:	d301      	bcc.n	1a0e <__clzsi2+0xe>
    1a0a:	0c00      	lsrs	r0, r0, #16
    1a0c:	3910      	subs	r1, #16
    1a0e:	0a1b      	lsrs	r3, r3, #8
    1a10:	4298      	cmp	r0, r3
    1a12:	d301      	bcc.n	1a18 <__clzsi2+0x18>
    1a14:	0a00      	lsrs	r0, r0, #8
    1a16:	3908      	subs	r1, #8
    1a18:	091b      	lsrs	r3, r3, #4
    1a1a:	4298      	cmp	r0, r3
    1a1c:	d301      	bcc.n	1a22 <__clzsi2+0x22>
    1a1e:	0900      	lsrs	r0, r0, #4
    1a20:	3904      	subs	r1, #4
    1a22:	a202      	add	r2, pc, #8	; (adr r2, 1a2c <__clzsi2+0x2c>)
    1a24:	5c10      	ldrb	r0, [r2, r0]
    1a26:	1840      	adds	r0, r0, r1
    1a28:	4770      	bx	lr
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	02020304 	.word	0x02020304
    1a30:	01010101 	.word	0x01010101
	...

00001a3c <__libc_init_array>:
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	4e0d      	ldr	r6, [pc, #52]	; (1a74 <__libc_init_array+0x38>)
    1a40:	4d0d      	ldr	r5, [pc, #52]	; (1a78 <__libc_init_array+0x3c>)
    1a42:	2400      	movs	r4, #0
    1a44:	1bad      	subs	r5, r5, r6
    1a46:	10ad      	asrs	r5, r5, #2
    1a48:	d005      	beq.n	1a56 <__libc_init_array+0x1a>
    1a4a:	00a3      	lsls	r3, r4, #2
    1a4c:	58f3      	ldr	r3, [r6, r3]
    1a4e:	3401      	adds	r4, #1
    1a50:	4798      	blx	r3
    1a52:	42a5      	cmp	r5, r4
    1a54:	d1f9      	bne.n	1a4a <__libc_init_array+0xe>
    1a56:	f000 f9f9 	bl	1e4c <_init>
    1a5a:	4e08      	ldr	r6, [pc, #32]	; (1a7c <__libc_init_array+0x40>)
    1a5c:	4d08      	ldr	r5, [pc, #32]	; (1a80 <__libc_init_array+0x44>)
    1a5e:	2400      	movs	r4, #0
    1a60:	1bad      	subs	r5, r5, r6
    1a62:	10ad      	asrs	r5, r5, #2
    1a64:	d005      	beq.n	1a72 <__libc_init_array+0x36>
    1a66:	00a3      	lsls	r3, r4, #2
    1a68:	58f3      	ldr	r3, [r6, r3]
    1a6a:	3401      	adds	r4, #1
    1a6c:	4798      	blx	r3
    1a6e:	42a5      	cmp	r5, r4
    1a70:	d1f9      	bne.n	1a66 <__libc_init_array+0x2a>
    1a72:	bd70      	pop	{r4, r5, r6, pc}
    1a74:	00001e58 	.word	0x00001e58
    1a78:	00001e58 	.word	0x00001e58
    1a7c:	00001e58 	.word	0x00001e58
    1a80:	00001e60 	.word	0x00001e60

00001a84 <memset>:
    1a84:	b570      	push	{r4, r5, r6, lr}
    1a86:	0783      	lsls	r3, r0, #30
    1a88:	d03f      	beq.n	1b0a <memset+0x86>
    1a8a:	1e54      	subs	r4, r2, #1
    1a8c:	2a00      	cmp	r2, #0
    1a8e:	d03b      	beq.n	1b08 <memset+0x84>
    1a90:	b2ce      	uxtb	r6, r1
    1a92:	0003      	movs	r3, r0
    1a94:	2503      	movs	r5, #3
    1a96:	e003      	b.n	1aa0 <memset+0x1c>
    1a98:	1e62      	subs	r2, r4, #1
    1a9a:	2c00      	cmp	r4, #0
    1a9c:	d034      	beq.n	1b08 <memset+0x84>
    1a9e:	0014      	movs	r4, r2
    1aa0:	3301      	adds	r3, #1
    1aa2:	1e5a      	subs	r2, r3, #1
    1aa4:	7016      	strb	r6, [r2, #0]
    1aa6:	422b      	tst	r3, r5
    1aa8:	d1f6      	bne.n	1a98 <memset+0x14>
    1aaa:	2c03      	cmp	r4, #3
    1aac:	d924      	bls.n	1af8 <memset+0x74>
    1aae:	25ff      	movs	r5, #255	; 0xff
    1ab0:	400d      	ands	r5, r1
    1ab2:	022a      	lsls	r2, r5, #8
    1ab4:	4315      	orrs	r5, r2
    1ab6:	042a      	lsls	r2, r5, #16
    1ab8:	4315      	orrs	r5, r2
    1aba:	2c0f      	cmp	r4, #15
    1abc:	d911      	bls.n	1ae2 <memset+0x5e>
    1abe:	0026      	movs	r6, r4
    1ac0:	3e10      	subs	r6, #16
    1ac2:	0936      	lsrs	r6, r6, #4
    1ac4:	3601      	adds	r6, #1
    1ac6:	0136      	lsls	r6, r6, #4
    1ac8:	001a      	movs	r2, r3
    1aca:	199b      	adds	r3, r3, r6
    1acc:	6015      	str	r5, [r2, #0]
    1ace:	6055      	str	r5, [r2, #4]
    1ad0:	6095      	str	r5, [r2, #8]
    1ad2:	60d5      	str	r5, [r2, #12]
    1ad4:	3210      	adds	r2, #16
    1ad6:	4293      	cmp	r3, r2
    1ad8:	d1f8      	bne.n	1acc <memset+0x48>
    1ada:	220f      	movs	r2, #15
    1adc:	4014      	ands	r4, r2
    1ade:	2c03      	cmp	r4, #3
    1ae0:	d90a      	bls.n	1af8 <memset+0x74>
    1ae2:	1f26      	subs	r6, r4, #4
    1ae4:	08b6      	lsrs	r6, r6, #2
    1ae6:	3601      	adds	r6, #1
    1ae8:	00b6      	lsls	r6, r6, #2
    1aea:	001a      	movs	r2, r3
    1aec:	199b      	adds	r3, r3, r6
    1aee:	c220      	stmia	r2!, {r5}
    1af0:	4293      	cmp	r3, r2
    1af2:	d1fc      	bne.n	1aee <memset+0x6a>
    1af4:	2203      	movs	r2, #3
    1af6:	4014      	ands	r4, r2
    1af8:	2c00      	cmp	r4, #0
    1afa:	d005      	beq.n	1b08 <memset+0x84>
    1afc:	b2c9      	uxtb	r1, r1
    1afe:	191c      	adds	r4, r3, r4
    1b00:	7019      	strb	r1, [r3, #0]
    1b02:	3301      	adds	r3, #1
    1b04:	429c      	cmp	r4, r3
    1b06:	d1fb      	bne.n	1b00 <memset+0x7c>
    1b08:	bd70      	pop	{r4, r5, r6, pc}
    1b0a:	0014      	movs	r4, r2
    1b0c:	0003      	movs	r3, r0
    1b0e:	e7cc      	b.n	1aaa <memset+0x26>

00001b10 <register_fini>:
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <register_fini+0x10>)
    1b12:	b510      	push	{r4, lr}
    1b14:	2b00      	cmp	r3, #0
    1b16:	d002      	beq.n	1b1e <register_fini+0xe>
    1b18:	4802      	ldr	r0, [pc, #8]	; (1b24 <register_fini+0x14>)
    1b1a:	f000 f805 	bl	1b28 <atexit>
    1b1e:	bd10      	pop	{r4, pc}
    1b20:	00000000 	.word	0x00000000
    1b24:	00001b39 	.word	0x00001b39

00001b28 <atexit>:
    1b28:	b510      	push	{r4, lr}
    1b2a:	0001      	movs	r1, r0
    1b2c:	2300      	movs	r3, #0
    1b2e:	2200      	movs	r2, #0
    1b30:	2000      	movs	r0, #0
    1b32:	f000 f81b 	bl	1b6c <__register_exitproc>
    1b36:	bd10      	pop	{r4, pc}

00001b38 <__libc_fini_array>:
    1b38:	b570      	push	{r4, r5, r6, lr}
    1b3a:	4b09      	ldr	r3, [pc, #36]	; (1b60 <__libc_fini_array+0x28>)
    1b3c:	4c09      	ldr	r4, [pc, #36]	; (1b64 <__libc_fini_array+0x2c>)
    1b3e:	1ae4      	subs	r4, r4, r3
    1b40:	10a4      	asrs	r4, r4, #2
    1b42:	d009      	beq.n	1b58 <__libc_fini_array+0x20>
    1b44:	4a08      	ldr	r2, [pc, #32]	; (1b68 <__libc_fini_array+0x30>)
    1b46:	18a5      	adds	r5, r4, r2
    1b48:	00ad      	lsls	r5, r5, #2
    1b4a:	18ed      	adds	r5, r5, r3
    1b4c:	682b      	ldr	r3, [r5, #0]
    1b4e:	3c01      	subs	r4, #1
    1b50:	4798      	blx	r3
    1b52:	3d04      	subs	r5, #4
    1b54:	2c00      	cmp	r4, #0
    1b56:	d1f9      	bne.n	1b4c <__libc_fini_array+0x14>
    1b58:	f000 f982 	bl	1e60 <_fini>
    1b5c:	bd70      	pop	{r4, r5, r6, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00001e6c 	.word	0x00001e6c
    1b64:	00001e70 	.word	0x00001e70
    1b68:	3fffffff 	.word	0x3fffffff

00001b6c <__register_exitproc>:
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6e:	4644      	mov	r4, r8
    1b70:	465f      	mov	r7, fp
    1b72:	4656      	mov	r6, sl
    1b74:	464d      	mov	r5, r9
    1b76:	469b      	mov	fp, r3
    1b78:	4b2f      	ldr	r3, [pc, #188]	; (1c38 <__register_exitproc+0xcc>)
    1b7a:	b4f0      	push	{r4, r5, r6, r7}
    1b7c:	681c      	ldr	r4, [r3, #0]
    1b7e:	23a4      	movs	r3, #164	; 0xa4
    1b80:	005b      	lsls	r3, r3, #1
    1b82:	0005      	movs	r5, r0
    1b84:	58e0      	ldr	r0, [r4, r3]
    1b86:	000e      	movs	r6, r1
    1b88:	4690      	mov	r8, r2
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d04b      	beq.n	1c26 <__register_exitproc+0xba>
    1b8e:	6843      	ldr	r3, [r0, #4]
    1b90:	2b1f      	cmp	r3, #31
    1b92:	dc0d      	bgt.n	1bb0 <__register_exitproc+0x44>
    1b94:	1c5c      	adds	r4, r3, #1
    1b96:	2d00      	cmp	r5, #0
    1b98:	d121      	bne.n	1bde <__register_exitproc+0x72>
    1b9a:	3302      	adds	r3, #2
    1b9c:	009b      	lsls	r3, r3, #2
    1b9e:	6044      	str	r4, [r0, #4]
    1ba0:	501e      	str	r6, [r3, r0]
    1ba2:	2000      	movs	r0, #0
    1ba4:	bc3c      	pop	{r2, r3, r4, r5}
    1ba6:	4690      	mov	r8, r2
    1ba8:	4699      	mov	r9, r3
    1baa:	46a2      	mov	sl, r4
    1bac:	46ab      	mov	fp, r5
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	4b22      	ldr	r3, [pc, #136]	; (1c3c <__register_exitproc+0xd0>)
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d03c      	beq.n	1c30 <__register_exitproc+0xc4>
    1bb6:	20c8      	movs	r0, #200	; 0xc8
    1bb8:	0040      	lsls	r0, r0, #1
    1bba:	e000      	b.n	1bbe <__register_exitproc+0x52>
    1bbc:	bf00      	nop
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d036      	beq.n	1c30 <__register_exitproc+0xc4>
    1bc2:	22a4      	movs	r2, #164	; 0xa4
    1bc4:	2300      	movs	r3, #0
    1bc6:	0052      	lsls	r2, r2, #1
    1bc8:	58a1      	ldr	r1, [r4, r2]
    1bca:	6043      	str	r3, [r0, #4]
    1bcc:	6001      	str	r1, [r0, #0]
    1bce:	50a0      	str	r0, [r4, r2]
    1bd0:	3240      	adds	r2, #64	; 0x40
    1bd2:	5083      	str	r3, [r0, r2]
    1bd4:	3204      	adds	r2, #4
    1bd6:	5083      	str	r3, [r0, r2]
    1bd8:	2401      	movs	r4, #1
    1bda:	2d00      	cmp	r5, #0
    1bdc:	d0dd      	beq.n	1b9a <__register_exitproc+0x2e>
    1bde:	009a      	lsls	r2, r3, #2
    1be0:	4691      	mov	r9, r2
    1be2:	4481      	add	r9, r0
    1be4:	4642      	mov	r2, r8
    1be6:	2188      	movs	r1, #136	; 0x88
    1be8:	464f      	mov	r7, r9
    1bea:	507a      	str	r2, [r7, r1]
    1bec:	22c4      	movs	r2, #196	; 0xc4
    1bee:	0052      	lsls	r2, r2, #1
    1bf0:	4690      	mov	r8, r2
    1bf2:	4480      	add	r8, r0
    1bf4:	4642      	mov	r2, r8
    1bf6:	3987      	subs	r1, #135	; 0x87
    1bf8:	4099      	lsls	r1, r3
    1bfa:	6812      	ldr	r2, [r2, #0]
    1bfc:	468a      	mov	sl, r1
    1bfe:	430a      	orrs	r2, r1
    1c00:	4694      	mov	ip, r2
    1c02:	4642      	mov	r2, r8
    1c04:	4661      	mov	r1, ip
    1c06:	6011      	str	r1, [r2, #0]
    1c08:	2284      	movs	r2, #132	; 0x84
    1c0a:	4649      	mov	r1, r9
    1c0c:	465f      	mov	r7, fp
    1c0e:	0052      	lsls	r2, r2, #1
    1c10:	508f      	str	r7, [r1, r2]
    1c12:	2d02      	cmp	r5, #2
    1c14:	d1c1      	bne.n	1b9a <__register_exitproc+0x2e>
    1c16:	0002      	movs	r2, r0
    1c18:	4655      	mov	r5, sl
    1c1a:	328d      	adds	r2, #141	; 0x8d
    1c1c:	32ff      	adds	r2, #255	; 0xff
    1c1e:	6811      	ldr	r1, [r2, #0]
    1c20:	430d      	orrs	r5, r1
    1c22:	6015      	str	r5, [r2, #0]
    1c24:	e7b9      	b.n	1b9a <__register_exitproc+0x2e>
    1c26:	0020      	movs	r0, r4
    1c28:	304d      	adds	r0, #77	; 0x4d
    1c2a:	30ff      	adds	r0, #255	; 0xff
    1c2c:	50e0      	str	r0, [r4, r3]
    1c2e:	e7ae      	b.n	1b8e <__register_exitproc+0x22>
    1c30:	2001      	movs	r0, #1
    1c32:	4240      	negs	r0, r0
    1c34:	e7b6      	b.n	1ba4 <__register_exitproc+0x38>
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00001e48 	.word	0x00001e48
    1c3c:	00000000 	.word	0x00000000

00001c40 <analogAccelPin>:
    1c40:	07000000 00000007                       ........

00001c48 <lookupTable.12295>:
    1c48:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1c58:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1c68:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1c78:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1c88:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1c98:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1ca8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1cb8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1cc8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1cd8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1ce8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1cf8:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1d08:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1d18:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1d28:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1d38:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1d48:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1d58:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1d68:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1d78:	000f048e                                ....

00001d7c <senseBat>:
    1d7c:	05000000 00000005 000010da 00000ffe     ................
    1d8c:	000010bc 00001094 000010bc 00001088     ................
    1d9c:	000010bc 00001094 00000ffe 00000ffe     ................
    1dac:	00001088 00001094 00001140 00001140     ........@...@...
    1dbc:	00001140 000010c2 00000ffe 00000ffe     @...............
    1dcc:	000010a8 00001092 000010a8 00001088     ................
    1ddc:	000010a8 00001092 00000ffe 00000ffe     ................
    1dec:	00001088 00001092 00001140 00001140     ........@...@...
    1dfc:	00001140 0000114c 000014b8 00001378     @...L.......x...
    1e0c:	00001378 00001376 00001490 00001490     x...v...........
    1e1c:	00001482 00001376 00001490 00001482     ....v...........
    1e2c:	00001490 00001376 00001498 00001498     ....v...........
    1e3c:	00001498 00001698 00000043              ........C...

00001e48 <_global_impure_ptr>:
    1e48:	20000010                                ... 

00001e4c <_init>:
    1e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e52:	bc08      	pop	{r3}
    1e54:	469e      	mov	lr, r3
    1e56:	4770      	bx	lr

00001e58 <__init_array_start>:
    1e58:	00001b11 	.word	0x00001b11

00001e5c <__frame_dummy_init_array_entry>:
    1e5c:	000000dd                                ....

00001e60 <_fini>:
    1e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e66:	bc08      	pop	{r3}
    1e68:	469e      	mov	lr, r3
    1e6a:	4770      	bx	lr

00001e6c <__fini_array_start>:
    1e6c:	000000b5 	.word	0x000000b5
