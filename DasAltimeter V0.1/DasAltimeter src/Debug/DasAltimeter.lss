
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003620  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00003620  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003a60  00020438  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003c10  00020438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b87d  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022f1  00000000  00000000  0003bd36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001d62  00000000  00000000  0003e027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000390  00000000  00000000  0003fd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c80  00000000  00000000  00040119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000156fa  00000000  00000000  00040d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008812  00000000  00000000  00056493  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000726b6  00000000  00000000  0005eca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bf8  00000000  00000000  000d135c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001095 	.word	0x00001095
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001135 	.word	0x00001135
      90:	0000119d 	.word	0x0000119d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00003620 	.word	0x00003620

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00003620 	.word	0x00003620
     10c:	00003620 	.word	0x00003620
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00003620 	.word	0x00003620
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00003245 	.word	0x00003245
     1d0:	00000a8d 	.word	0x00000a8d

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFGetByte>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

uint8_t AT25SFGetByte(uint32_t address) {
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4f0f      	ldr	r7, [pc, #60]	; (228 <AT25SFGetByte+0x44>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	617b      	str	r3, [r7, #20]
     1ee:	0005      	movs	r5, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     1f0:	4c0e      	ldr	r4, [pc, #56]	; (22c <AT25SFGetByte+0x48>)
     1f2:	2103      	movs	r1, #3
     1f4:	2001      	movs	r0, #1
     1f6:	47a0      	blx	r4
     1f8:	4e0d      	ldr	r6, [pc, #52]	; (230 <AT25SFGetByte+0x4c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     1fa:	0c29      	lsrs	r1, r5, #16
}

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     1fc:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     1fe:	b2c9      	uxtb	r1, r1
     200:	2001      	movs	r0, #1
     202:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     204:	0a29      	lsrs	r1, r5, #8

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     206:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     208:	b2c9      	uxtb	r1, r1
     20a:	2001      	movs	r0, #1
     20c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     20e:	b2e9      	uxtb	r1, r5
uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     210:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     212:	2001      	movs	r0, #1
     214:	47a0      	blx	r4
     216:	7030      	strb	r0, [r6, #0]
     218:	0001      	movs	r1, r0

    uint8_t _byte = spiDataTransfer(SPI1,dummy_rx);
     21a:	2001      	movs	r0, #1
     21c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     21e:	2380      	movs	r3, #128	; 0x80
     220:	02db      	lsls	r3, r3, #11
     222:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    return _byte;
}
     224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	41004400 	.word	0x41004400
     22c:	00001989 	.word	0x00001989
     230:	20000460 	.word	0x20000460

00000234 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     234:	2380      	movs	r3, #128	; 0x80


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     238:	4f17      	ldr	r7, [pc, #92]	; (298 <AT25SEreadSample+0x64>)
     23a:	02db      	lsls	r3, r3, #11
     23c:	9201      	str	r2, [sp, #4]
     23e:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     240:	4c16      	ldr	r4, [pc, #88]	; (29c <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     242:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     244:	2001      	movs	r0, #1
     246:	617b      	str	r3, [r7, #20]
     248:	210b      	movs	r1, #11
     24a:	47a0      	blx	r4
     24c:	4d14      	ldr	r5, [pc, #80]	; (2a0 <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     24e:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     250:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     252:	b2c9      	uxtb	r1, r1
     254:	2001      	movs	r0, #1
     256:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     258:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     25a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     25c:	b2c9      	uxtb	r1, r1
     25e:	2001      	movs	r0, #1
     260:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     262:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     264:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     266:	2001      	movs	r0, #1
     268:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     26a:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     26c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     26e:	2001      	movs	r0, #1
     270:	47a0      	blx	r4
     272:	9b00      	ldr	r3, [sp, #0]
     274:	9e01      	ldr	r6, [sp, #4]
     276:	7028      	strb	r0, [r5, #0]
     278:	18f3      	adds	r3, r6, r3
     27a:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     27c:	9b00      	ldr	r3, [sp, #0]
     27e:	429e      	cmp	r6, r3
     280:	d005      	beq.n	28e <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     282:	7829      	ldrb	r1, [r5, #0]
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
     288:	7030      	strb	r0, [r6, #0]
     28a:	3601      	adds	r6, #1
     28c:	e7f6      	b.n	27c <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28e:	2380      	movs	r3, #128	; 0x80
     290:	02db      	lsls	r3, r3, #11
     292:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     294:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	41004400 	.word	0x41004400
     29c:	00001989 	.word	0x00001989
     2a0:	20000460 	.word	0x20000460

000002a4 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a4:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     2a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2a8:	4f16      	ldr	r7, [pc, #88]	; (304 <AT25SEreadPage+0x60>)
     2aa:	02db      	lsls	r3, r3, #11
     2ac:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2ae:	4c16      	ldr	r4, [pc, #88]	; (308 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2b2:	2001      	movs	r0, #1
     2b4:	617b      	str	r3, [r7, #20]
     2b6:	210b      	movs	r1, #11
     2b8:	47a0      	blx	r4
     2ba:	4d14      	ldr	r5, [pc, #80]	; (30c <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2be:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2c0:	b2c9      	uxtb	r1, r1
     2c2:	2001      	movs	r0, #1
     2c4:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2c6:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2c8:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2ca:	b2c9      	uxtb	r1, r1
     2cc:	2001      	movs	r0, #1
     2ce:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2d0:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2d2:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2d4:	2001      	movs	r0, #1
     2d6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     2d8:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2da:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     2dc:	2001      	movs	r0, #1
     2de:	47a0      	blx	r4
     2e0:	9e01      	ldr	r6, [sp, #4]
     2e2:	7028      	strb	r0, [r5, #0]
     2e4:	1c73      	adds	r3, r6, #1
     2e6:	33ff      	adds	r3, #255	; 0xff
     2e8:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     2ea:	7829      	ldrb	r1, [r5, #0]
     2ec:	2001      	movs	r0, #1
     2ee:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     2f0:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     2f2:	7030      	strb	r0, [r6, #0]
     2f4:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     2f6:	429e      	cmp	r6, r3
     2f8:	d1f7      	bne.n	2ea <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2fa:	2380      	movs	r3, #128	; 0x80
     2fc:	02db      	lsls	r3, r3, #11
     2fe:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     300:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	41004400 	.word	0x41004400
     308:	00001989 	.word	0x00001989
     30c:	20000460 	.word	0x20000460

00000310 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     310:	2280      	movs	r2, #128	; 0x80
     312:	4b28      	ldr	r3, [pc, #160]	; (3b4 <readMS5803AdcResults+0xa4>)
     314:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     316:	b5f0      	push	{r4, r5, r6, r7, lr}
     318:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     31a:	2300      	movs	r3, #0
     31c:	4d26      	ldr	r5, [pc, #152]	; (3b8 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     31e:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     320:	9300      	str	r3, [sp, #0]
     322:	786b      	ldrb	r3, [r5, #1]
     324:	7828      	ldrb	r0, [r5, #0]
     326:	78aa      	ldrb	r2, [r5, #2]
     328:	021b      	lsls	r3, r3, #8
     32a:	4303      	orrs	r3, r0
     32c:	0412      	lsls	r2, r2, #16
     32e:	0019      	movs	r1, r3
     330:	0013      	movs	r3, r2
     332:	430b      	orrs	r3, r1
     334:	79a9      	ldrb	r1, [r5, #6]
     336:	796f      	ldrb	r7, [r5, #5]
     338:	79ec      	ldrb	r4, [r5, #7]
     33a:	0209      	lsls	r1, r1, #8
     33c:	4339      	orrs	r1, r7
     33e:	0424      	lsls	r4, r4, #16
     340:	0008      	movs	r0, r1
     342:	0021      	movs	r1, r4
     344:	7a2c      	ldrb	r4, [r5, #8]
     346:	78ea      	ldrb	r2, [r5, #3]
     348:	7a6f      	ldrb	r7, [r5, #9]
     34a:	4301      	orrs	r1, r0
     34c:	0624      	lsls	r4, r4, #24
     34e:	430c      	orrs	r4, r1
     350:	0612      	lsls	r2, r2, #24
     352:	431a      	orrs	r2, r3
     354:	0020      	movs	r0, r4
     356:	792b      	ldrb	r3, [r5, #4]
     358:	0039      	movs	r1, r7
     35a:	4e18      	ldr	r6, [pc, #96]	; (3bc <readMS5803AdcResults+0xac>)
     35c:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     35e:	7aeb      	ldrb	r3, [r5, #11]
     360:	7aa9      	ldrb	r1, [r5, #10]
     362:	021b      	lsls	r3, r3, #8
     364:	430b      	orrs	r3, r1
     366:	001a      	movs	r2, r3
     368:	7b2b      	ldrb	r3, [r5, #12]
     36a:	4e15      	ldr	r6, [pc, #84]	; (3c0 <readMS5803AdcResults+0xb0>)
     36c:	041b      	lsls	r3, r3, #16
     36e:	4313      	orrs	r3, r2
     370:	7b6a      	ldrb	r2, [r5, #13]
     372:	7bad      	ldrb	r5, [r5, #14]
     374:	0612      	lsls	r2, r2, #24
     376:	431a      	orrs	r2, r3
     378:	0039      	movs	r1, r7
     37a:	002b      	movs	r3, r5
     37c:	0020      	movs	r0, r4
     37e:	9203      	str	r2, [sp, #12]
     380:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     382:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     384:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     386:	002b      	movs	r3, r5
     388:	0039      	movs	r1, r7
     38a:	0020      	movs	r0, r4
     38c:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     38e:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     390:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     392:	002b      	movs	r3, r5
     394:	0020      	movs	r0, r4
     396:	0039      	movs	r1, r7
     398:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2280      	movs	r2, #128	; 0x80
     39c:	4b05      	ldr	r3, [pc, #20]	; (3b4 <readMS5803AdcResults+0xa4>)
     39e:	0212      	lsls	r2, r2, #8
     3a0:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3a2:	9b04      	ldr	r3, [sp, #16]
     3a4:	9a05      	ldr	r2, [sp, #20]
     3a6:	041b      	lsls	r3, r3, #16
     3a8:	0215      	lsls	r5, r2, #8
     3aa:	431d      	orrs	r5, r3
     3ac:	4328      	orrs	r0, r5
}
     3ae:	b007      	add	sp, #28
     3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	41004400 	.word	0x41004400
     3b8:	00003448 	.word	0x00003448
     3bc:	00000dc5 	.word	0x00000dc5
     3c0:	00000e31 	.word	0x00000e31

000003c4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3c6:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     3c8:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     3ca:	8803      	ldrh	r3, [r0, #0]
     3cc:	aa04      	add	r2, sp, #16
     3ce:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3d0:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3d2:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3d4:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3d6:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3d8:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3da:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3dc:	88c3      	ldrh	r3, [r0, #6]
     3de:	9401      	str	r4, [sp, #4]
     3e0:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     3e2:	8903      	ldrh	r3, [r0, #8]
     3e4:	aa07      	add	r2, sp, #28
     3e6:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     3e8:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     3ea:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     3ec:	8941      	ldrh	r1, [r0, #10]
     3ee:	a804      	add	r0, sp, #16
     3f0:	181b      	adds	r3, r3, r0
     3f2:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     3f4:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     3f6:	693a      	ldr	r2, [r7, #16]
     3f8:	0236      	lsls	r6, r6, #8
     3fa:	8818      	ldrh	r0, [r3, #0]
     3fc:	1b96      	subs	r6, r2, r6
     3fe:	17f2      	asrs	r2, r6, #31
     400:	4c2a      	ldr	r4, [pc, #168]	; (4ac <ConvertPressureTemperature+0xe8>)
     402:	9203      	str	r2, [sp, #12]
     404:	17f3      	asrs	r3, r6, #31
     406:	0032      	movs	r2, r6
     408:	b280      	uxth	r0, r0
     40a:	2100      	movs	r1, #0
     40c:	47a0      	blx	r4
     40e:	23fa      	movs	r3, #250	; 0xfa
     410:	00db      	lsls	r3, r3, #3
     412:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     414:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     416:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     418:	b29b      	uxth	r3, r3
     41a:	9302      	str	r3, [sp, #8]
     41c:	9b01      	ldr	r3, [sp, #4]
     41e:	0032      	movs	r2, r6
     420:	8818      	ldrh	r0, [r3, #0]
     422:	2100      	movs	r1, #0
     424:	17f3      	asrs	r3, r6, #31
     426:	b280      	uxth	r0, r0
     428:	47a0      	blx	r4
     42a:	064b      	lsls	r3, r1, #25
     42c:	09c4      	lsrs	r4, r0, #7
     42e:	431c      	orrs	r4, r3
     430:	2300      	movs	r3, #0
     432:	11cd      	asrs	r5, r1, #7
     434:	9902      	ldr	r1, [sp, #8]
     436:	040a      	lsls	r2, r1, #16
     438:	1912      	adds	r2, r2, r4
     43a:	416b      	adcs	r3, r5
     43c:	9208      	str	r2, [sp, #32]
     43e:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     440:	ab04      	add	r3, sp, #16
     442:	889c      	ldrh	r4, [r3, #4]
     444:	8918      	ldrh	r0, [r3, #8]
     446:	0032      	movs	r2, r6
     448:	9b03      	ldr	r3, [sp, #12]
     44a:	4d18      	ldr	r5, [pc, #96]	; (4ac <ConvertPressureTemperature+0xe8>)
     44c:	b280      	uxth	r0, r0
     44e:	2100      	movs	r1, #0
     450:	47a8      	blx	r5
     452:	060b      	lsls	r3, r1, #24
     454:	0a05      	lsrs	r5, r0, #8
     456:	431d      	orrs	r5, r3
     458:	2300      	movs	r3, #0
     45a:	b2a4      	uxth	r4, r4
     45c:	120e      	asrs	r6, r1, #8
     45e:	03e2      	lsls	r2, r4, #15
     460:	1952      	adds	r2, r2, r5
     462:	4173      	adcs	r3, r6
     464:	920a      	str	r2, [sp, #40]	; 0x28
     466:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     46c:	9c08      	ldr	r4, [sp, #32]
     46e:	9d09      	ldr	r5, [sp, #36]	; 0x24
     470:	4e0e      	ldr	r6, [pc, #56]	; (4ac <ConvertPressureTemperature+0xe8>)
     472:	68f8      	ldr	r0, [r7, #12]
     474:	2100      	movs	r1, #0
     476:	47b0      	blx	r6
     478:	2300      	movs	r3, #0
     47a:	17ce      	asrs	r6, r1, #31
     47c:	02f6      	lsls	r6, r6, #11
     47e:	0af2      	lsrs	r2, r6, #11
     480:	1880      	adds	r0, r0, r2
     482:	4159      	adcs	r1, r3
     484:	02ce      	lsls	r6, r1, #11
     486:	0d42      	lsrs	r2, r0, #21
     488:	4332      	orrs	r2, r6
     48a:	154b      	asrs	r3, r1, #21
     48c:	1b12      	subs	r2, r2, r4
     48e:	41ab      	sbcs	r3, r5
     490:	2100      	movs	r1, #0
     492:	17dc      	asrs	r4, r3, #31
     494:	0464      	lsls	r4, r4, #17
     496:	0c60      	lsrs	r0, r4, #17
     498:	1812      	adds	r2, r2, r0
     49a:	414b      	adcs	r3, r1
     49c:	0011      	movs	r1, r2
     49e:	045b      	lsls	r3, r3, #17
     4a0:	0bca      	lsrs	r2, r1, #15
     4a2:	431a      	orrs	r2, r3
     4a4:	61fa      	str	r2, [r7, #28]
}
     4a6:	b00d      	add	sp, #52	; 0x34
     4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	00001a45 	.word	0x00001a45

000004b0 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4b0:	220a      	movs	r2, #10
     4b2:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     4b4:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4b6:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     4b8:	4c0e      	ldr	r4, [pc, #56]	; (4f4 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4ba:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     4bc:	42a2      	cmp	r2, r4
     4be:	d901      	bls.n	4c4 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     4c0:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <pascalToCent+0x48>)
     4c2:	e015      	b.n	4f0 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     4c4:	1aa3      	subs	r3, r4, r2
     4c6:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     4c8:	2b4b      	cmp	r3, #75	; 0x4b
     4ca:	d901      	bls.n	4d0 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <pascalToCent+0x4c>)
     4ce:	e00f      	b.n	4f0 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4d0:	4d0b      	ldr	r5, [pc, #44]	; (500 <pascalToCent+0x50>)
     4d2:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4d4:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     4d6:	3301      	adds	r3, #1
     4d8:	009b      	lsls	r3, r3, #2
     4da:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4dc:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4de:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4e0:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4e2:	1aa4      	subs	r4, r4, r2
     4e4:	691a      	ldr	r2, [r3, #16]
     4e6:	1a52      	subs	r2, r2, r1
     4e8:	0013      	movs	r3, r2
     4ea:	4363      	muls	r3, r4
     4ec:	0a9b      	lsrs	r3, r3, #10
     4ee:	185b      	adds	r3, r3, r1
     4f0:	6203      	str	r3, [r0, #32]
        }
    }
}
     4f2:	bd70      	pop	{r4, r5, r6, pc}
     4f4:	000199cc 	.word	0x000199cc
     4f8:	ffff8d20 	.word	0xffff8d20
     4fc:	000f048e 	.word	0x000f048e
     500:	00003448 	.word	0x00003448

00000504 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     504:	b5f0      	push	{r4, r5, r6, r7, lr}
     506:	27a2      	movs	r7, #162	; 0xa2
     508:	b087      	sub	sp, #28
     50a:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     50c:	2096      	movs	r0, #150	; 0x96
     50e:	4c2b      	ldr	r4, [pc, #172]	; (5bc <readMS5803Coefficients+0xb8>)
     510:	0080      	lsls	r0, r0, #2
     512:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     514:	2096      	movs	r0, #150	; 0x96
     516:	0080      	lsls	r0, r0, #2
     518:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     51a:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     51c:	4c28      	ldr	r4, [pc, #160]	; (5c0 <readMS5803Coefficients+0xbc>)
     51e:	4b29      	ldr	r3, [pc, #164]	; (5c4 <readMS5803Coefficients+0xc0>)
     520:	0212      	lsls	r2, r2, #8
     522:	615a      	str	r2, [r3, #20]
     524:	7863      	ldrb	r3, [r4, #1]
     526:	7820      	ldrb	r0, [r4, #0]
     528:	78a2      	ldrb	r2, [r4, #2]
     52a:	021b      	lsls	r3, r3, #8
     52c:	4303      	orrs	r3, r0
     52e:	0412      	lsls	r2, r2, #16
     530:	0019      	movs	r1, r3
     532:	0013      	movs	r3, r2
     534:	430b      	orrs	r3, r1
     536:	79a1      	ldrb	r1, [r4, #6]
     538:	7966      	ldrb	r6, [r4, #5]
     53a:	0209      	lsls	r1, r1, #8
     53c:	4331      	orrs	r1, r6
     53e:	0008      	movs	r0, r1
     540:	79e1      	ldrb	r1, [r4, #7]
     542:	78e2      	ldrb	r2, [r4, #3]
     544:	0409      	lsls	r1, r1, #16
     546:	4301      	orrs	r1, r0
     548:	7a20      	ldrb	r0, [r4, #8]
     54a:	7a66      	ldrb	r6, [r4, #9]
     54c:	0612      	lsls	r2, r2, #24
     54e:	0600      	lsls	r0, r0, #24
     550:	4308      	orrs	r0, r1
     552:	431a      	orrs	r2, r3
     554:	9700      	str	r7, [sp, #0]
     556:	7923      	ldrb	r3, [r4, #4]
     558:	0031      	movs	r1, r6
     55a:	4d1b      	ldr	r5, [pc, #108]	; (5c8 <readMS5803Coefficients+0xc4>)
     55c:	9003      	str	r0, [sp, #12]
     55e:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     560:	7ae3      	ldrb	r3, [r4, #11]
     562:	0020      	movs	r0, r4
     564:	7aa1      	ldrb	r1, [r4, #10]
     566:	7b24      	ldrb	r4, [r4, #12]
     568:	021b      	lsls	r3, r3, #8
     56a:	430b      	orrs	r3, r1
     56c:	0424      	lsls	r4, r4, #16
     56e:	001a      	movs	r2, r3
     570:	0023      	movs	r3, r4
     572:	7b44      	ldrb	r4, [r0, #13]
     574:	7b85      	ldrb	r5, [r0, #14]
     576:	4313      	orrs	r3, r2
     578:	0624      	lsls	r4, r4, #24
     57a:	431c      	orrs	r4, r3
     57c:	0022      	movs	r2, r4
     57e:	002b      	movs	r3, r5
     580:	9404      	str	r4, [sp, #16]
     582:	0031      	movs	r1, r6
     584:	4c11      	ldr	r4, [pc, #68]	; (5cc <readMS5803Coefficients+0xc8>)
     586:	9803      	ldr	r0, [sp, #12]
     588:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     58a:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     58c:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     58e:	9a04      	ldr	r2, [sp, #16]
     590:	9803      	ldr	r0, [sp, #12]
     592:	0031      	movs	r1, r6
     594:	4c0d      	ldr	r4, [pc, #52]	; (5cc <readMS5803Coefficients+0xc8>)
     596:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     598:	2280      	movs	r2, #128	; 0x80
     59a:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <readMS5803Coefficients+0xc0>)
     59c:	0212      	lsls	r2, r2, #8
     59e:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     5a0:	9b05      	ldr	r3, [sp, #20]
     5a2:	021d      	lsls	r5, r3, #8
     5a4:	9b02      	ldr	r3, [sp, #8]
     5a6:	4328      	orrs	r0, r5
     5a8:	8018      	strh	r0, [r3, #0]
     5aa:	1cbb      	adds	r3, r7, #2
     5ac:	b2df      	uxtb	r7, r3
     5ae:	9b02      	ldr	r3, [sp, #8]
     5b0:	3302      	adds	r3, #2
     5b2:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     5b4:	2fae      	cmp	r7, #174	; 0xae
     5b6:	d1a9      	bne.n	50c <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5b8:	b007      	add	sp, #28
     5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5bc:	00001035 	.word	0x00001035
     5c0:	00003448 	.word	0x00003448
     5c4:	41004400 	.word	0x41004400
     5c8:	00000dc5 	.word	0x00000dc5
     5cc:	00000e31 	.word	0x00000e31

000005d0 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5d2:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     5d4:	231e      	movs	r3, #30
     5d6:	491a      	ldr	r1, [pc, #104]	; (640 <initMS5803Barometer+0x70>)
     5d8:	4d1a      	ldr	r5, [pc, #104]	; (644 <initMS5803Barometer+0x74>)
     5da:	0236      	lsls	r6, r6, #8
     5dc:	616e      	str	r6, [r5, #20]
     5de:	9300      	str	r3, [sp, #0]
     5e0:	784b      	ldrb	r3, [r1, #1]
     5e2:	780a      	ldrb	r2, [r1, #0]
     5e4:	021b      	lsls	r3, r3, #8
     5e6:	4313      	orrs	r3, r2
     5e8:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     5ea:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     5ec:	0412      	lsls	r2, r2, #16
     5ee:	0018      	movs	r0, r3
     5f0:	0013      	movs	r3, r2
     5f2:	78ca      	ldrb	r2, [r1, #3]
     5f4:	4303      	orrs	r3, r0
     5f6:	0612      	lsls	r2, r2, #24
     5f8:	1d4f      	adds	r7, r1, #5
     5fa:	431a      	orrs	r2, r3
     5fc:	7948      	ldrb	r0, [r1, #5]
     5fe:	790b      	ldrb	r3, [r1, #4]
     600:	7989      	ldrb	r1, [r1, #6]
     602:	0209      	lsls	r1, r1, #8
     604:	4301      	orrs	r1, r0
     606:	78b8      	ldrb	r0, [r7, #2]
     608:	0400      	lsls	r0, r0, #16
     60a:	4301      	orrs	r1, r0
     60c:	78f8      	ldrb	r0, [r7, #3]
     60e:	0600      	lsls	r0, r0, #24
     610:	4308      	orrs	r0, r1
     612:	7939      	ldrb	r1, [r7, #4]
     614:	4f0c      	ldr	r7, [pc, #48]	; (648 <initMS5803Barometer+0x78>)
     616:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     618:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     61a:	20c8      	movs	r0, #200	; 0xc8
     61c:	4b0b      	ldr	r3, [pc, #44]	; (64c <initMS5803Barometer+0x7c>)
     61e:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     620:	0020      	movs	r0, r4
     622:	4b0b      	ldr	r3, [pc, #44]	; (650 <initMS5803Barometer+0x80>)
     624:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     626:	23fa      	movs	r3, #250	; 0xfa
     628:	011b      	lsls	r3, r3, #4
     62a:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     62c:	4b09      	ldr	r3, [pc, #36]	; (654 <initMS5803Barometer+0x84>)
     62e:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <initMS5803Barometer+0x88>)
     632:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <initMS5803Barometer+0x8c>)
     636:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     638:	23fa      	movs	r3, #250	; 0xfa
     63a:	00db      	lsls	r3, r3, #3
     63c:	6163      	str	r3, [r4, #20]




}
     63e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     640:	00003448 	.word	0x00003448
     644:	41004400 	.word	0x41004400
     648:	00000dc5 	.word	0x00000dc5
     64c:	00001065 	.word	0x00001065
     650:	00000505 	.word	0x00000505
     654:	00002710 	.word	0x00002710
     658:	0041c9fe 	.word	0x0041c9fe
     65c:	007ffae4 	.word	0x007ffae4

00000660 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     662:	4bbf      	ldr	r3, [pc, #764]	; (960 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     664:	b085      	sub	sp, #20
    SystemInit();
     666:	4798      	blx	r3
    GclkInit();
     668:	4bbe      	ldr	r3, [pc, #760]	; (964 <init+0x304>)
     66a:	4798      	blx	r3
    RtcInit();
     66c:	4bbe      	ldr	r3, [pc, #760]	; (968 <init+0x308>)
     66e:	4798      	blx	r3
    delayInit();
     670:	4bbe      	ldr	r3, [pc, #760]	; (96c <init+0x30c>)
     672:	4798      	blx	r3
    adcInit();
     674:	4bbe      	ldr	r3, [pc, #760]	; (970 <init+0x310>)
     676:	4798      	blx	r3
    dmaInit();
     678:	4bbe      	ldr	r3, [pc, #760]	; (974 <init+0x314>)
     67a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     67c:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     67e:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     680:	4bbd      	ldr	r3, [pc, #756]	; (978 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     682:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     684:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     686:	5858      	ldr	r0, [r3, r1]
     688:	4abc      	ldr	r2, [pc, #752]	; (97c <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	2401      	movs	r4, #1
     68c:	4002      	ands	r2, r0
     68e:	505a      	str	r2, [r3, r1]
     690:	4bbb      	ldr	r3, [pc, #748]	; (980 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     692:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     694:	0019      	movs	r1, r3
     696:	3154      	adds	r1, #84	; 0x54
     698:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     69a:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	43a2      	bics	r2, r4
     69e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a0:	2280      	movs	r2, #128	; 0x80
     6a2:	0352      	lsls	r2, r2, #13
     6a4:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6a6:	220f      	movs	r2, #15
     6a8:	3033      	adds	r0, #51	; 0x33
     6aa:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ac:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6ae:	4391      	bics	r1, r2
     6b0:	4321      	orrs	r1, r4
     6b2:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b4:	7cc1      	ldrb	r1, [r0, #19]
     6b6:	36c3      	adds	r6, #195	; 0xc3
     6b8:	4321      	orrs	r1, r4
     6ba:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6bc:	0019      	movs	r1, r3
     6be:	31b1      	adds	r1, #177	; 0xb1
     6c0:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c2:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c4:	4010      	ands	r0, r2
     6c6:	4328      	orrs	r0, r5
     6c8:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ca:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6cc:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ce:	4320      	orrs	r0, r4
     6d0:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6d2:	7808      	ldrb	r0, [r1, #0]
     6d4:	4010      	ands	r0, r2
     6d6:	4328      	orrs	r0, r5
     6d8:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6da:	7830      	ldrb	r0, [r6, #0]
     6dc:	4320      	orrs	r0, r4
     6de:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e0:	7d30      	ldrb	r0, [r6, #20]
     6e2:	43a0      	bics	r0, r4
     6e4:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e6:	2080      	movs	r0, #128	; 0x80
     6e8:	0400      	lsls	r0, r0, #16
     6ea:	9703      	str	r7, [sp, #12]
     6ec:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ee:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6f0:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6f2:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6f4:	4390      	bics	r0, r2
     6f6:	4320      	orrs	r0, r4
     6f8:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	20c2      	movs	r0, #194	; 0xc2
     6fc:	4684      	mov	ip, r0
     6fe:	449c      	add	ip, r3
     700:	4660      	mov	r0, ip
     702:	4667      	mov	r7, ip
     704:	7800      	ldrb	r0, [r0, #0]
     706:	4320      	orrs	r0, r4
     708:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     70a:	7808      	ldrb	r0, [r1, #0]
     70c:	4390      	bics	r0, r2
     70e:	4320      	orrs	r0, r4
     710:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     712:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     714:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     716:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     718:	4321      	orrs	r1, r4
     71a:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71c:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     71e:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     720:	43a1      	bics	r1, r4
     722:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     724:	2180      	movs	r1, #128	; 0x80
     726:	9803      	ldr	r0, [sp, #12]
     728:	03c9      	lsls	r1, r1, #15
     72a:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     72c:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     72e:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     730:	3031      	adds	r0, #49	; 0x31
     732:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     734:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     736:	4011      	ands	r1, r2
     738:	430d      	orrs	r5, r1
     73a:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     73c:	001d      	movs	r5, r3
     73e:	3543      	adds	r5, #67	; 0x43
     740:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     742:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	4321      	orrs	r1, r4
     746:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     748:	7da9      	ldrb	r1, [r5, #22]
     74a:	3505      	adds	r5, #5
     74c:	43a1      	bics	r1, r4
     74e:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     750:	2180      	movs	r1, #128	; 0x80
     752:	0489      	lsls	r1, r1, #18
     754:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     756:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     758:	7801      	ldrb	r1, [r0, #0]
     75a:	4391      	bics	r1, r2
     75c:	4321      	orrs	r1, r4
     75e:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     760:	7c41      	ldrb	r1, [r0, #17]
     762:	3011      	adds	r0, #17
     764:	4321      	orrs	r1, r4
     766:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     768:	7d81      	ldrb	r1, [r0, #22]
     76a:	43a1      	bics	r1, r4
     76c:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     76e:	2180      	movs	r1, #128	; 0x80
     770:	0449      	lsls	r1, r1, #17
     772:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     774:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     776:	7829      	ldrb	r1, [r5, #0]
     778:	43a1      	bics	r1, r4
     77a:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     77c:	2180      	movs	r1, #128	; 0x80
     77e:	0049      	lsls	r1, r1, #1
     780:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     782:	7831      	ldrb	r1, [r6, #0]
     784:	43a1      	bics	r1, r4
     786:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2180      	movs	r1, #128	; 0x80
     78a:	0089      	lsls	r1, r1, #2
     78c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	0019      	movs	r1, r3
     790:	314b      	adds	r1, #75	; 0x4b
     792:	7808      	ldrb	r0, [r1, #0]
     794:	43a0      	bics	r0, r4
     796:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     798:	7808      	ldrb	r0, [r1, #0]
     79a:	4338      	orrs	r0, r7
     79c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     79e:	2080      	movs	r0, #128	; 0x80
     7a0:	0100      	lsls	r0, r0, #4
     7a2:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7a4:	4877      	ldr	r0, [pc, #476]	; (984 <init+0x324>)
     7a6:	371e      	adds	r7, #30
     7a8:	7800      	ldrb	r0, [r0, #0]
     7aa:	4010      	ands	r0, r2
     7ac:	4338      	orrs	r0, r7
     7ae:	4f75      	ldr	r7, [pc, #468]	; (984 <init+0x324>)
     7b0:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b4:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b6:	4320      	orrs	r0, r4
     7b8:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ba:	0018      	movs	r0, r3
     7bc:	3034      	adds	r0, #52	; 0x34
     7be:	7801      	ldrb	r1, [r0, #0]
     7c0:	4011      	ands	r1, r2
     7c2:	4339      	orrs	r1, r7
     7c4:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c6:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7c8:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ca:	4321      	orrs	r1, r4
     7cc:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7ce:	4666      	mov	r6, ip
     7d0:	7801      	ldrb	r1, [r0, #0]
     7d2:	4391      	bics	r1, r2
     7d4:	4331      	orrs	r1, r6
     7d6:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d8:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7da:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7dc:	4321      	orrs	r1, r4
     7de:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e0:	7801      	ldrb	r1, [r0, #0]
     7e2:	001e      	movs	r6, r3
     7e4:	43a1      	bics	r1, r4
     7e6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e8:	2180      	movs	r1, #128	; 0x80
     7ea:	9803      	ldr	r0, [sp, #12]
     7ec:	00c9      	lsls	r1, r1, #3
     7ee:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7f0:	0018      	movs	r0, r3
     7f2:	3098      	adds	r0, #152	; 0x98
     7f4:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f6:	78a8      	ldrb	r0, [r5, #2]
     7f8:	3651      	adds	r6, #81	; 0x51
     7fa:	43a0      	bics	r0, r4
     7fc:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7fe:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     800:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     802:	7a29      	ldrb	r1, [r5, #8]
     804:	43a1      	bics	r1, r4
     806:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     808:	2180      	movs	r1, #128	; 0x80
     80a:	0249      	lsls	r1, r1, #9
     80c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80e:	7831      	ldrb	r1, [r6, #0]
     810:	43a1      	bics	r1, r4
     812:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2180      	movs	r1, #128	; 0x80
     816:	0289      	lsls	r1, r1, #10
     818:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	0019      	movs	r1, r3
     81c:	3153      	adds	r1, #83	; 0x53
     81e:	7808      	ldrb	r0, [r1, #0]
     820:	43a0      	bics	r0, r4
     822:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     824:	7808      	ldrb	r0, [r1, #0]
     826:	4338      	orrs	r0, r7
     828:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82a:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     82c:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82e:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     830:	0300      	lsls	r0, r0, #12
     832:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     834:	9703      	str	r7, [sp, #12]
     836:	7838      	ldrb	r0, [r7, #0]
     838:	2720      	movs	r7, #32
     83a:	4010      	ands	r0, r2
     83c:	4338      	orrs	r0, r7
     83e:	9f03      	ldr	r7, [sp, #12]
     840:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     842:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     846:	4320      	orrs	r0, r4
     848:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     84a:	0018      	movs	r0, r3
     84c:	3038      	adds	r0, #56	; 0x38
     84e:	7801      	ldrb	r1, [r0, #0]
     850:	4011      	ands	r1, r2
     852:	4339      	orrs	r1, r7
     854:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     856:	7831      	ldrb	r1, [r6, #0]
     858:	4321      	orrs	r1, r4
     85a:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     85c:	4666      	mov	r6, ip
     85e:	7801      	ldrb	r1, [r0, #0]
     860:	4391      	bics	r1, r2
     862:	4331      	orrs	r1, r6
     864:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     868:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86a:	4321      	orrs	r1, r4
     86c:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86e:	7981      	ldrb	r1, [r0, #6]
     870:	43a1      	bics	r1, r4
     872:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     874:	2180      	movs	r1, #128	; 0x80
     876:	02c9      	lsls	r1, r1, #11
     878:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     87a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87c:	7801      	ldrb	r1, [r0, #0]
     87e:	43a1      	bics	r1, r4
     880:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     882:	2180      	movs	r1, #128	; 0x80
     884:	0149      	lsls	r1, r1, #5
     886:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     888:	7881      	ldrb	r1, [r0, #2]
     88a:	43a1      	bics	r1, r4
     88c:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2180      	movs	r1, #128	; 0x80
     890:	01c9      	lsls	r1, r1, #7
     892:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	0019      	movs	r1, r3
     896:	314d      	adds	r1, #77	; 0x4d
     898:	7808      	ldrb	r0, [r1, #0]
     89a:	43a0      	bics	r0, r4
     89c:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     89e:	7808      	ldrb	r0, [r1, #0]
     8a0:	4330      	orrs	r0, r6
     8a2:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a4:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a6:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a8:	0189      	lsls	r1, r1, #6
     8aa:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	304f      	adds	r0, #79	; 0x4f
     8ae:	7801      	ldrb	r1, [r0, #0]
     8b0:	43a1      	bics	r1, r4
     8b2:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b4:	2180      	movs	r1, #128	; 0x80
     8b6:	0209      	lsls	r1, r1, #8
     8b8:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8ba:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8bc:	0019      	movs	r1, r3
     8be:	3155      	adds	r1, #85	; 0x55
     8c0:	7808      	ldrb	r0, [r1, #0]
     8c2:	43a0      	bics	r0, r4
     8c4:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c6:	2080      	movs	r0, #128	; 0x80
     8c8:	0380      	lsls	r0, r0, #14
     8ca:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8cc:	2040      	movs	r0, #64	; 0x40
     8ce:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d0:	7848      	ldrb	r0, [r1, #1]
     8d2:	43a0      	bics	r0, r4
     8d4:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d6:	2080      	movs	r0, #128	; 0x80
     8d8:	03c0      	lsls	r0, r0, #15
     8da:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	0018      	movs	r0, r3
     8de:	303b      	adds	r0, #59	; 0x3b
     8e0:	7805      	ldrb	r5, [r0, #0]
     8e2:	4395      	bics	r5, r2
     8e4:	4335      	orrs	r5, r6
     8e6:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e8:	784d      	ldrb	r5, [r1, #1]
     8ea:	4325      	orrs	r5, r4
     8ec:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ee:	788d      	ldrb	r5, [r1, #2]
     8f0:	43a5      	bics	r5, r4
     8f2:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8f4:	788d      	ldrb	r5, [r1, #2]
     8f6:	4335      	orrs	r5, r6
     8f8:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8fa:	2580      	movs	r5, #128	; 0x80
     8fc:	042d      	lsls	r5, r5, #16
     8fe:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     900:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     902:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     904:	4e20      	ldr	r6, [pc, #128]	; (988 <init+0x328>)
     906:	401a      	ands	r2, r3
     908:	433a      	orrs	r2, r7
     90a:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90c:	788b      	ldrb	r3, [r1, #2]
     90e:	2204      	movs	r2, #4
     910:	4323      	orrs	r3, r4
     912:	708b      	strb	r3, [r1, #2]
     914:	2000      	movs	r0, #0
     916:	2103      	movs	r1, #3
     918:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     91a:	002b      	movs	r3, r5
     91c:	002a      	movs	r2, r5
     91e:	0028      	movs	r0, r5
     920:	4f1a      	ldr	r7, [pc, #104]	; (98c <init+0x32c>)
     922:	9501      	str	r5, [sp, #4]
     924:	9500      	str	r5, [sp, #0]
     926:	2103      	movs	r1, #3
     928:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     92a:	0020      	movs	r0, r4
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     932:	002b      	movs	r3, r5
     934:	002a      	movs	r2, r5
     936:	0020      	movs	r0, r4
     938:	9501      	str	r5, [sp, #4]
     93a:	9500      	str	r5, [sp, #0]
     93c:	2103      	movs	r1, #3
     93e:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     940:	2208      	movs	r2, #8
     942:	2104      	movs	r1, #4
     944:	2003      	movs	r0, #3
     946:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     948:	0021      	movs	r1, r4
     94a:	002a      	movs	r2, r5
     94c:	2003      	movs	r0, #3
     94e:	4b10      	ldr	r3, [pc, #64]	; (990 <init+0x330>)
     950:	4c10      	ldr	r4, [pc, #64]	; (994 <init+0x334>)
     952:	47a0      	blx	r4

    TC4Init();
     954:	4b10      	ldr	r3, [pc, #64]	; (998 <init+0x338>)
     956:	4798      	blx	r3
    TC5Init();
     958:	4b10      	ldr	r3, [pc, #64]	; (99c <init+0x33c>)
     95a:	4798      	blx	r3
}
     95c:	b005      	add	sp, #20
     95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     960:	000001d5 	.word	0x000001d5
     964:	00000ec1 	.word	0x00000ec1
     968:	00000f49 	.word	0x00000f49
     96c:	00001015 	.word	0x00001015
     970:	00000ce1 	.word	0x00000ce1
     974:	000011b5 	.word	0x000011b5
     978:	e000e100 	.word	0xe000e100
     97c:	ff00ffff 	.word	0xff00ffff
     980:	41004400 	.word	0x41004400
     984:	41004435 	.word	0x41004435
     988:	0000187d 	.word	0x0000187d
     98c:	000018e1 	.word	0x000018e1
     990:	0000f2e4 	.word	0x0000f2e4
     994:	00001945 	.word	0x00001945
     998:	000010e5 	.word	0x000010e5
     99c:	0000114d 	.word	0x0000114d

000009a0 <startUp>:

void startUp(Altimeter *my_altimeter) {
     9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a2:	0005      	movs	r5, r0

    beep(400);
     9a4:	20c8      	movs	r0, #200	; 0xc8

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     9a6:	b0c3      	sub	sp, #268	; 0x10c

    beep(400);
     9a8:	0040      	lsls	r0, r0, #1
     9aa:	4c2e      	ldr	r4, [pc, #184]	; (a64 <startUp+0xc4>)
     9ac:	47a0      	blx	r4

    u32_t startupTime = millis();
     9ae:	4e2e      	ldr	r6, [pc, #184]	; (a68 <startUp+0xc8>)
     9b0:	47b0      	blx	r6
     9b2:	0007      	movs	r7, r0

    while((millis() - startupTime) < 10000) {
     9b4:	47b0      	blx	r6
     9b6:	4b2d      	ldr	r3, [pc, #180]	; (a6c <startUp+0xcc>)
     9b8:	1bc0      	subs	r0, r0, r7
     9ba:	4298      	cmp	r0, r3
     9bc:	d834      	bhi.n	a28 <startUp+0x88>

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     9be:	4b2c      	ldr	r3, [pc, #176]	; (a70 <startUp+0xd0>)
     9c0:	7e1b      	ldrb	r3, [r3, #24]
     9c2:	075b      	lsls	r3, r3, #29
     9c4:	d5f6      	bpl.n	9b4 <startUp+0x14>
            u8_t data1 = usartDataIn(USART3);
     9c6:	2003      	movs	r0, #3
     9c8:	4b2a      	ldr	r3, [pc, #168]	; (a74 <startUp+0xd4>)
     9ca:	4798      	blx	r3
            if (data1 == 0x41) {
     9cc:	2841      	cmp	r0, #65	; 0x41
     9ce:	d1f1      	bne.n	9b4 <startUp+0x14>

                usartDataOut(USART3, 'T');
     9d0:	4f29      	ldr	r7, [pc, #164]	; (a78 <startUp+0xd8>)
     9d2:	2154      	movs	r1, #84	; 0x54
     9d4:	383e      	subs	r0, #62	; 0x3e
     9d6:	47b8      	blx	r7

                u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - my_altimeter->myFlashMemory.currentAddress) >> 8;
     9d8:	002e      	movs	r6, r5
     9da:	002b      	movs	r3, r5
     9dc:	3688      	adds	r6, #136	; 0x88
     9de:	338c      	adds	r3, #140	; 0x8c
     9e0:	681b      	ldr	r3, [r3, #0]
     9e2:	6832      	ldr	r2, [r6, #0]
                usartDataOut(USART3, pagesToSend);
     9e4:	2003      	movs	r0, #3
            u8_t data1 = usartDataIn(USART3);
            if (data1 == 0x41) {

                usartDataOut(USART3, 'T');

                u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - my_altimeter->myFlashMemory.currentAddress) >> 8;
     9e6:	1a9b      	subs	r3, r3, r2
     9e8:	0a1b      	lsrs	r3, r3, #8
     9ea:	b2db      	uxtb	r3, r3
                usartDataOut(USART3, pagesToSend);
     9ec:	0019      	movs	r1, r3
            u8_t data1 = usartDataIn(USART3);
            if (data1 == 0x41) {

                usartDataOut(USART3, 'T');

                u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - my_altimeter->myFlashMemory.currentAddress) >> 8;
     9ee:	9301      	str	r3, [sp, #4]
                usartDataOut(USART3, pagesToSend);
     9f0:	47b8      	blx	r7

                u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;

                for (u8_t page = 0; page <= pagesToSend; ++page) {
     9f2:	2300      	movs	r3, #0
                usartDataOut(USART3, 'T');

                u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - my_altimeter->myFlashMemory.currentAddress) >> 8;
                usartDataOut(USART3, pagesToSend);

                u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;
     9f4:	6837      	ldr	r7, [r6, #0]

                for (u8_t page = 0; page <= pagesToSend; ++page) {
     9f6:	9300      	str	r3, [sp, #0]

                    u8_t data[256];
                    AT25SEreadPage(addressToSend, data);
     9f8:	a902      	add	r1, sp, #8
     9fa:	0038      	movs	r0, r7
     9fc:	4b1f      	ldr	r3, [pc, #124]	; (a7c <startUp+0xdc>)
     9fe:	4798      	blx	r3
     a00:	2600      	movs	r6, #0

                    for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
                        usartDataOut(USART3, data[dataByte]);
     a02:	ab02      	add	r3, sp, #8
     a04:	5cf1      	ldrb	r1, [r6, r3]
     a06:	2003      	movs	r0, #3
     a08:	4b1b      	ldr	r3, [pc, #108]	; (a78 <startUp+0xd8>)
     a0a:	4798      	blx	r3
                for (u8_t page = 0; page <= pagesToSend; ++page) {

                    u8_t data[256];
                    AT25SEreadPage(addressToSend, data);

                    for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	3601      	adds	r6, #1
     a10:	005b      	lsls	r3, r3, #1
     a12:	429e      	cmp	r6, r3
     a14:	d1f5      	bne.n	a02 <startUp+0x62>
                        usartDataOut(USART3, data[dataByte]);
                    }

                    addressToSend = addressToSend + 0x100;
     a16:	18ff      	adds	r7, r7, r3
                u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - my_altimeter->myFlashMemory.currentAddress) >> 8;
                usartDataOut(USART3, pagesToSend);

                u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;

                for (u8_t page = 0; page <= pagesToSend; ++page) {
     a18:	9b00      	ldr	r3, [sp, #0]
     a1a:	3301      	adds	r3, #1
     a1c:	b2db      	uxtb	r3, r3
     a1e:	9300      	str	r3, [sp, #0]
     a20:	9a00      	ldr	r2, [sp, #0]
     a22:	9b01      	ldr	r3, [sp, #4]
     a24:	4293      	cmp	r3, r2
     a26:	d2e7      	bcs.n	9f8 <startUp+0x58>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     a28:	0028      	movs	r0, r5
     a2a:	4b15      	ldr	r3, [pc, #84]	; (a80 <startUp+0xe0>)
     a2c:	4798      	blx	r3
    flight(my_altimeter);
     a2e:	4b15      	ldr	r3, [pc, #84]	; (a84 <startUp+0xe4>)
     a30:	0028      	movs	r0, r5
     a32:	4798      	blx	r3

    beep(300);
     a34:	2096      	movs	r0, #150	; 0x96
     a36:	0040      	lsls	r0, r0, #1
     a38:	47a0      	blx	r4
    delay_ms(80);
     a3a:	4d13      	ldr	r5, [pc, #76]	; (a88 <startUp+0xe8>)
     a3c:	2050      	movs	r0, #80	; 0x50
     a3e:	47a8      	blx	r5
    beep(300);
     a40:	2096      	movs	r0, #150	; 0x96
     a42:	0040      	lsls	r0, r0, #1
     a44:	47a0      	blx	r4
    delay_ms(250);
     a46:	20fa      	movs	r0, #250	; 0xfa
     a48:	47a8      	blx	r5
    beep(300);
     a4a:	2096      	movs	r0, #150	; 0x96
     a4c:	0040      	lsls	r0, r0, #1
     a4e:	47a0      	blx	r4
    delay_ms(80);
     a50:	2050      	movs	r0, #80	; 0x50
     a52:	47a8      	blx	r5
    beep(300);
     a54:	2096      	movs	r0, #150	; 0x96
     a56:	0040      	lsls	r0, r0, #1
     a58:	47a0      	blx	r4
    delay_ms(500);
     a5a:	20fa      	movs	r0, #250	; 0xfa
     a5c:	0040      	lsls	r0, r0, #1
     a5e:	47a8      	blx	r5
}
     a60:	b043      	add	sp, #268	; 0x10c
     a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a64:	00000e85 	.word	0x00000e85
     a68:	000010b1 	.word	0x000010b1
     a6c:	0000270f 	.word	0x0000270f
     a70:	42001400 	.word	0x42001400
     a74:	000019b9 	.word	0x000019b9
     a78:	000019a1 	.word	0x000019a1
     a7c:	000002a5 	.word	0x000002a5
     a80:	000014d5 	.word	0x000014d5
     a84:	00001215 	.word	0x00001215
     a88:	00001065 	.word	0x00001065

00000a8c <main>:



int main(void) {
     a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a8e:	4c35      	ldr	r4, [pc, #212]	; (b64 <main+0xd8>)

    init();
     a90:	4b35      	ldr	r3, [pc, #212]	; (b68 <main+0xdc>)
    delay_ms(500);
}



int main(void) {
     a92:	44a5      	add	sp, r4

    init();
     a94:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a96:	2400      	movs	r4, #0
     a98:	466b      	mov	r3, sp
    initMS5803Barometer(&my_altimeter.myBarometer);
     a9a:	a801      	add	r0, sp, #4
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a9c:	701c      	strb	r4, [r3, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     a9e:	4b33      	ldr	r3, [pc, #204]	; (b6c <main+0xe0>)
     aa0:	4798      	blx	r3
    IMUinit();
     aa2:	4b33      	ldr	r3, [pc, #204]	; (b70 <main+0xe4>)
     aa4:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     aa6:	23c8      	movs	r3, #200	; 0xc8
     aa8:	466a      	mov	r2, sp
     aaa:	005b      	lsls	r3, r3, #1
     aac:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
     aae:	2380      	movs	r3, #128	; 0x80
     ab0:	019b      	lsls	r3, r3, #6
     ab2:	9322      	str	r3, [sp, #136]	; 0x88
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     ab4:	4b2f      	ldr	r3, [pc, #188]	; (b74 <main+0xe8>)
    my_altimeter.myFlashMemory.pageReady = false;
     ab6:	4f30      	ldr	r7, [pc, #192]	; (b78 <main+0xec>)
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     ab8:	9323      	str	r3, [sp, #140]	; 0x8c
    my_altimeter.myFlashMemory.pageReady = false;

    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     aba:	4668      	mov	r0, sp
     abc:	4b2f      	ldr	r3, [pc, #188]	; (b7c <main+0xf0>)
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
    my_altimeter.myFlashMemory.pageReady = false;
     abe:	55d4      	strb	r4, [r2, r7]

    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     ac0:	4798      	blx	r3
    //delay_ms(10);




    findFlight(&my_altimeter);
     ac2:	4668      	mov	r0, sp
     ac4:	4b2e      	ldr	r3, [pc, #184]	; (b80 <main+0xf4>)
     ac6:	4798      	blx	r3




    u32_t timeNow = millis();
     ac8:	4c2e      	ldr	r4, [pc, #184]	; (b84 <main+0xf8>)
     aca:	47a0      	blx	r4
     acc:	0005      	movs	r5, r0
    while((millis() - timeNow) < 3000) {
     ace:	47a0      	blx	r4
     ad0:	4b2d      	ldr	r3, [pc, #180]	; (b88 <main+0xfc>)
     ad2:	1b40      	subs	r0, r0, r5
     ad4:	4298      	cmp	r0, r3
     ad6:	d806      	bhi.n	ae6 <main+0x5a>
        sampleTick(&my_altimeter);
     ad8:	4668      	mov	r0, sp
     ada:	4b2c      	ldr	r3, [pc, #176]	; (b8c <main+0x100>)
     adc:	4798      	blx	r3
        flight(&my_altimeter);
     ade:	4668      	mov	r0, sp
     ae0:	4b2b      	ldr	r3, [pc, #172]	; (b90 <main+0x104>)
     ae2:	4798      	blx	r3
     ae4:	e7f3      	b.n	ace <main+0x42>
    }

    logFlight(&my_altimeter);
     ae6:	4668      	mov	r0, sp
     ae8:	4b2a      	ldr	r3, [pc, #168]	; (b94 <main+0x108>)
     aea:	4798      	blx	r3

    beep(300);
     aec:	2096      	movs	r0, #150	; 0x96
     aee:	4b2a      	ldr	r3, [pc, #168]	; (b98 <main+0x10c>)
     af0:	0040      	lsls	r0, r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     af2:	2680      	movs	r6, #128	; 0x80
     af4:	4798      	blx	r3
     af6:	0376      	lsls	r6, r6, #13
    while (1) {

        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     af8:	2400      	movs	r4, #0

    beep(300);

    while (1) {

        if (takeSample) {
     afa:	4d28      	ldr	r5, [pc, #160]	; (b9c <main+0x110>)
     afc:	782b      	ldrb	r3, [r5, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d006      	beq.n	b10 <main+0x84>
            sampleTick(&my_altimeter);
     b02:	4668      	mov	r0, sp
     b04:	4b21      	ldr	r3, [pc, #132]	; (b8c <main+0x100>)
     b06:	4798      	blx	r3
            flight(&my_altimeter);
     b08:	4668      	mov	r0, sp
     b0a:	4b21      	ldr	r3, [pc, #132]	; (b90 <main+0x104>)
     b0c:	4798      	blx	r3
            takeSample = false;
     b0e:	702c      	strb	r4, [r5, #0]
        }

        if (writeLog) {
     b10:	4b23      	ldr	r3, [pc, #140]	; (ba0 <main+0x114>)
     b12:	781a      	ldrb	r2, [r3, #0]
     b14:	2a00      	cmp	r2, #0
     b16:	d0f0      	beq.n	afa <main+0x6e>
            writeLog = false;
     b18:	701c      	strb	r4, [r3, #0]
            logSensors(&my_altimeter);
     b1a:	4668      	mov	r0, sp
     b1c:	4b21      	ldr	r3, [pc, #132]	; (ba4 <main+0x118>)
     b1e:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     b20:	466b      	mov	r3, sp
     b22:	5ddb      	ldrb	r3, [r3, r7]
     b24:	2b00      	cmp	r3, #0
     b26:	d0e8      	beq.n	afa <main+0x6e>
                my_altimeter.myFlashMemory.pageReady = false;
     b28:	2200      	movs	r2, #0
     b2a:	4669      	mov	r1, sp
     b2c:	4b12      	ldr	r3, [pc, #72]	; (b78 <main+0xec>)
     b2e:	4d1e      	ldr	r5, [pc, #120]	; (ba8 <main+0x11c>)
     b30:	54ca      	strb	r2, [r1, r3]
     b32:	61ee      	str	r6, [r5, #28]

                pinToggle(LedPin);

                if (my_altimeter.myFlashMemory.currentAddress <= my_altimeter.myFlashMemory.endingAddress) {
     b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
     b36:	9a23      	ldr	r2, [sp, #140]	; 0x8c
     b38:	4293      	cmp	r3, r2
     b3a:	d803      	bhi.n	b44 <main+0xb8>

                    //u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
                    my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     b3c:	3301      	adds	r3, #1
     b3e:	33ff      	adds	r3, #255	; 0xff
     b40:	9322      	str	r3, [sp, #136]	; 0x88
     b42:	e7d9      	b.n	af8 <main+0x6c>
                } else {
                    delay_ms(80);
     b44:	4c19      	ldr	r4, [pc, #100]	; (bac <main+0x120>)
     b46:	2050      	movs	r0, #80	; 0x50
     b48:	47a0      	blx	r4
     b4a:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b4c:	2050      	movs	r0, #80	; 0x50
     b4e:	47a0      	blx	r4
     b50:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b52:	2050      	movs	r0, #80	; 0x50
     b54:	47a0      	blx	r4
     b56:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b58:	2050      	movs	r0, #80	; 0x50
     b5a:	47a0      	blx	r4
     b5c:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b5e:	2050      	movs	r0, #80	; 0x50
     b60:	47a0      	blx	r4
     b62:	e7c9      	b.n	af8 <main+0x6c>
     b64:	fffffd54 	.word	0xfffffd54
     b68:	00000661 	.word	0x00000661
     b6c:	000005d1 	.word	0x000005d1
     b70:	00000bb1 	.word	0x00000bb1
     b74:	00005fff 	.word	0x00005fff
     b78:	00000291 	.word	0x00000291
     b7c:	000009a1 	.word	0x000009a1
     b80:	00000c2d 	.word	0x00000c2d
     b84:	000010b1 	.word	0x000010b1
     b88:	00000bb7 	.word	0x00000bb7
     b8c:	000014d5 	.word	0x000014d5
     b90:	00001215 	.word	0x00001215
     b94:	000013e5 	.word	0x000013e5
     b98:	00000e85 	.word	0x00000e85
     b9c:	20000463 	.word	0x20000463
     ba0:	20000461 	.word	0x20000461
     ba4:	00001441 	.word	0x00001441
     ba8:	41004400 	.word	0x41004400
     bac:	00001065 	.word	0x00001065

00000bb0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     bb0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bb2:	4c08      	ldr	r4, [pc, #32]	; (bd4 <IMUinit+0x24>)
     bb4:	2580      	movs	r5, #128	; 0x80
     bb6:	0023      	movs	r3, r4
     bb8:	00ed      	lsls	r5, r5, #3
     bba:	3394      	adds	r3, #148	; 0x94
     bbc:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     bbe:	4e06      	ldr	r6, [pc, #24]	; (bd8 <IMUinit+0x28>)
     bc0:	210f      	movs	r1, #15
     bc2:	2000      	movs	r0, #0
     bc4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bc6:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     bc8:	210c      	movs	r1, #12
     bca:	2000      	movs	r0, #0
     bcc:	47b0      	blx	r6
     bce:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	41004400 	.word	0x41004400
     bd8:	00001989 	.word	0x00001989

00000bdc <findFlightEnding>:
        }
        ++lastFlightFound;
    }
}

u32_t findFlightEnding(Altimeter *my_altimeter, u8_t lastFlightFound) {
     bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
     bde:	0008      	movs	r0, r1

    u32_t flightToSearch = (lastFlightFound * 0x03) + (FLIGHTONESTART - 0x03);

    u8_t searchStartByte[3] = {0x00, 0x00, 0x00};
    AT25SEreadSample(flightToSearch, 0x03, searchStartByte);
     be0:	2103      	movs	r1, #3

u32_t findFlightEnding(Altimeter *my_altimeter, u8_t lastFlightFound) {

    u32_t flightToSearch = (lastFlightFound * 0x03) + (FLIGHTONESTART - 0x03);

    u8_t searchStartByte[3] = {0x00, 0x00, 0x00};
     be2:	2300      	movs	r3, #0
    AT25SEreadSample(flightToSearch, 0x03, searchStartByte);
     be4:	4348      	muls	r0, r1

u32_t findFlightEnding(Altimeter *my_altimeter, u8_t lastFlightFound) {

    u32_t flightToSearch = (lastFlightFound * 0x03) + (FLIGHTONESTART - 0x03);

    u8_t searchStartByte[3] = {0x00, 0x00, 0x00};
     be6:	ad01      	add	r5, sp, #4
     be8:	702b      	strb	r3, [r5, #0]
     bea:	706b      	strb	r3, [r5, #1]
     bec:	70ab      	strb	r3, [r5, #2]
    AT25SEreadSample(flightToSearch, 0x03, searchStartByte);
     bee:	30fd      	adds	r0, #253	; 0xfd
     bf0:	4b0c      	ldr	r3, [pc, #48]	; (c24 <findFlightEnding+0x48>)
     bf2:	002a      	movs	r2, r5
     bf4:	4798      	blx	r3

    u32_t searchStart = searchStartByte[0] << 0 | searchStartByte[1] << 8 | searchStartByte[2] << 16;
     bf6:	786c      	ldrb	r4, [r5, #1]
     bf8:	78ab      	ldrb	r3, [r5, #2]
     bfa:	0224      	lsls	r4, r4, #8
     bfc:	041b      	lsls	r3, r3, #16
     bfe:	431c      	orrs	r4, r3
     c00:	782b      	ldrb	r3, [r5, #0]
     c02:	431c      	orrs	r4, r3
    int16_t flightSampFound = 0;

    bool flightEndFound = false;
    while (!flightEndFound) {

        u8_t byteToCheck = AT25SFGetByte(byteToCheckAddress);
     c04:	0020      	movs	r0, r4
     c06:	4b08      	ldr	r3, [pc, #32]	; (c28 <findFlightEnding+0x4c>)
     c08:	4798      	blx	r3

        if (byteToCheck == 0x41) {
     c0a:	2841      	cmp	r0, #65	; 0x41
     c0c:	d101      	bne.n	c12 <findFlightEnding+0x36>
            byteToCheckAddress += 24;
     c0e:	3418      	adds	r4, #24
     c10:	e7f8      	b.n	c04 <findFlightEnding+0x28>
            ++sensorsFound;
        } else if (byteToCheck == 0x46) {
     c12:	2846      	cmp	r0, #70	; 0x46
     c14:	d101      	bne.n	c1a <findFlightEnding+0x3e>
            byteToCheckAddress += 17;
     c16:	3411      	adds	r4, #17
     c18:	e7f4      	b.n	c04 <findFlightEnding+0x28>
            ++flightSampFound;
        } else if (byteToCheck == 0xFF) {
     c1a:	28ff      	cmp	r0, #255	; 0xff
     c1c:	d1f2      	bne.n	c04 <findFlightEnding+0x28>
            return ((byteToCheckAddress >> 8) << 8);
     c1e:	4384      	bics	r4, r0
     c20:	0020      	movs	r0, r4
        }
    }
     c22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c24:	00000235 	.word	0x00000235
     c28:	000001e5 	.word	0x000001e5

00000c2c <findFlight>:
    pinHigh(cs_accel);

}


void findFlight(Altimeter *my_altimeter) {
     c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c2e:	b085      	sub	sp, #20

    volatile u8_t lastFlightFound = 0;
     c30:	466b      	mov	r3, sp
     c32:	2400      	movs	r4, #0
     c34:	1dde      	adds	r6, r3, #7
    u8_t beeps = 0;

    for (volatile flightAddress = FLIGHTONESTART; flightAddress <= FLIGHTTENSTART; flightAddress += 0x03) {
     c36:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_accel);

}


void findFlight(Altimeter *my_altimeter) {
     c38:	0005      	movs	r5, r0

    volatile u8_t lastFlightFound = 0;
     c3a:	7034      	strb	r4, [r6, #0]
    u8_t beeps = 0;

    for (volatile flightAddress = FLIGHTONESTART; flightAddress <= FLIGHTTENSTART; flightAddress += 0x03) {
     c3c:	005b      	lsls	r3, r3, #1
     c3e:	9303      	str	r3, [sp, #12]
     c40:	231c      	movs	r3, #28
     c42:	9a03      	ldr	r2, [sp, #12]
     c44:	33ff      	adds	r3, #255	; 0xff
     c46:	429a      	cmp	r2, r3
     c48:	dc3d      	bgt.n	cc6 <findFlight+0x9a>

        ++beeps;

        u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     c4a:	2300      	movs	r3, #0
     c4c:	af02      	add	r7, sp, #8
     c4e:	703b      	strb	r3, [r7, #0]
     c50:	707b      	strb	r3, [r7, #1]
     c52:	70bb      	strb	r3, [r7, #2]
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);
     c54:	003a      	movs	r2, r7
     c56:	4b1d      	ldr	r3, [pc, #116]	; (ccc <findFlight+0xa0>)
     c58:	9803      	ldr	r0, [sp, #12]
     c5a:	2103      	movs	r1, #3
     c5c:	4798      	blx	r3

        u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
     c5e:	787b      	ldrb	r3, [r7, #1]
    volatile u8_t lastFlightFound = 0;
    u8_t beeps = 0;

    for (volatile flightAddress = FLIGHTONESTART; flightAddress <= FLIGHTTENSTART; flightAddress += 0x03) {

        ++beeps;
     c60:	3401      	adds	r4, #1
        u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);

        u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
     c62:	021a      	lsls	r2, r3, #8
     c64:	78bb      	ldrb	r3, [r7, #2]
    volatile u8_t lastFlightFound = 0;
    u8_t beeps = 0;

    for (volatile flightAddress = FLIGHTONESTART; flightAddress <= FLIGHTTENSTART; flightAddress += 0x03) {

        ++beeps;
     c66:	b2e4      	uxtb	r4, r4
        u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);

        u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
     c68:	041b      	lsls	r3, r3, #16
     c6a:	4313      	orrs	r3, r2
     c6c:	783a      	ldrb	r2, [r7, #0]
     c6e:	4313      	orrs	r3, r2
     c70:	4a17      	ldr	r2, [pc, #92]	; (cd0 <findFlight+0xa4>)
     c72:	4293      	cmp	r3, r2
     c74:	d120      	bne.n	cb8 <findFlight+0x8c>
     c76:	4f17      	ldr	r7, [pc, #92]	; (cd4 <findFlight+0xa8>)
            while ( beeps > 0 ) {
     c78:	2c00      	cmp	r4, #0
     c7a:	d008      	beq.n	c8e <findFlight+0x62>
                beep(400);
     c7c:	20c8      	movs	r0, #200	; 0xc8
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <findFlight+0xac>)
     c80:	0040      	lsls	r0, r0, #1
     c82:	4798      	blx	r3
                delay_ms(200);
                --beeps;
     c84:	3c01      	subs	r4, #1
        u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
            while ( beeps > 0 ) {
                beep(400);
                delay_ms(200);
     c86:	20c8      	movs	r0, #200	; 0xc8
     c88:	47b8      	blx	r7
                --beeps;
     c8a:	b2e4      	uxtb	r4, r4
     c8c:	e7f3      	b.n	c76 <findFlight+0x4a>
            }
            delay_ms(500);
     c8e:	20fa      	movs	r0, #250	; 0xfa
     c90:	0040      	lsls	r0, r0, #1
     c92:	47b8      	blx	r7
            u32_t previousFlightEnd = findFlightEnding(my_altimeter, lastFlightFound);
     c94:	7831      	ldrb	r1, [r6, #0]
     c96:	0028      	movs	r0, r5
     c98:	b2c9      	uxtb	r1, r1
     c9a:	4b10      	ldr	r3, [pc, #64]	; (cdc <findFlight+0xb0>)
     c9c:	4798      	blx	r3
            my_altimeter->myFlashMemory.currentAddress = previousFlightEnd;
     c9e:	3588      	adds	r5, #136	; 0x88
     ca0:	6028      	str	r0, [r5, #0]
            beep(1000);
     ca2:	20fa      	movs	r0, #250	; 0xfa
     ca4:	4b0c      	ldr	r3, [pc, #48]	; (cd8 <findFlight+0xac>)
     ca6:	0080      	lsls	r0, r0, #2
     ca8:	4798      	blx	r3
            delay_ms(200);
     caa:	20c8      	movs	r0, #200	; 0xc8
     cac:	47b8      	blx	r7
            beep(1000);
     cae:	20fa      	movs	r0, #250	; 0xfa
     cb0:	4b09      	ldr	r3, [pc, #36]	; (cd8 <findFlight+0xac>)
     cb2:	0080      	lsls	r0, r0, #2
     cb4:	4798      	blx	r3
     cb6:	e006      	b.n	cc6 <findFlight+0x9a>
            break;
        }
        ++lastFlightFound;
     cb8:	7833      	ldrb	r3, [r6, #0]
     cba:	3301      	adds	r3, #1
     cbc:	b2db      	uxtb	r3, r3
     cbe:	7033      	strb	r3, [r6, #0]
void findFlight(Altimeter *my_altimeter) {

    volatile u8_t lastFlightFound = 0;
    u8_t beeps = 0;

    for (volatile flightAddress = FLIGHTONESTART; flightAddress <= FLIGHTTENSTART; flightAddress += 0x03) {
     cc0:	9b03      	ldr	r3, [sp, #12]
     cc2:	3303      	adds	r3, #3
     cc4:	e7bb      	b.n	c3e <findFlight+0x12>
            beep(1000);
            break;
        }
        ++lastFlightFound;
    }
}
     cc6:	b005      	add	sp, #20
     cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	00000235 	.word	0x00000235
     cd0:	00ffffff 	.word	0x00ffffff
     cd4:	00001065 	.word	0x00001065
     cd8:	00000e85 	.word	0x00000e85
     cdc:	00000bdd 	.word	0x00000bdd

00000ce0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ce0:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     ce2:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ce4:	4a10      	ldr	r2, [pc, #64]	; (d28 <adcInit+0x48>)
     ce6:	0249      	lsls	r1, r1, #9
     ce8:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cea:	4810      	ldr	r0, [pc, #64]	; (d2c <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     cec:	430b      	orrs	r3, r1
     cee:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     cf0:	23e0      	movs	r3, #224	; 0xe0
     cf2:	490f      	ldr	r1, [pc, #60]	; (d30 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cf4:	4a0f      	ldr	r2, [pc, #60]	; (d34 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     cf6:	00db      	lsls	r3, r3, #3
     cf8:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cfa:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     cfc:	4a0e      	ldr	r2, [pc, #56]	; (d38 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     cfe:	6812      	ldr	r2, [r2, #0]
     d00:	0150      	lsls	r0, r2, #5
     d02:	4018      	ands	r0, r3
     d04:	4b0d      	ldr	r3, [pc, #52]	; (d3c <adcInit+0x5c>)
     d06:	0154      	lsls	r4, r2, #5
     d08:	681a      	ldr	r2, [r3, #0]
     d0a:	0ed3      	lsrs	r3, r2, #27
     d0c:	4323      	orrs	r3, r4
     d0e:	b2da      	uxtb	r2, r3
     d10:	0003      	movs	r3, r0
     d12:	4313      	orrs	r3, r2
     d14:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     d16:	2302      	movs	r3, #2
     d18:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d1a:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d1c:	7e4b      	ldrb	r3, [r1, #25]
     d1e:	b25b      	sxtb	r3, r3
     d20:	2b00      	cmp	r3, #0
     d22:	dbfb      	blt.n	d1c <adcInit+0x3c>
}
     d24:	bd10      	pop	{r4, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40000400 	.word	0x40000400
     d2c:	0000401e 	.word	0x0000401e
     d30:	42004000 	.word	0x42004000
     d34:	40000c00 	.word	0x40000c00
     d38:	00806024 	.word	0x00806024
     d3c:	00806020 	.word	0x00806020

00000d40 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     d40:	2202      	movs	r2, #2
     d42:	4b05      	ldr	r3, [pc, #20]	; (d58 <adcSample+0x18>)
     d44:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     d46:	3a01      	subs	r2, #1
     d48:	7e19      	ldrb	r1, [r3, #24]
     d4a:	4211      	tst	r1, r2
     d4c:	d0fc      	beq.n	d48 <adcSample+0x8>
    return ADC->RESULT.reg;
     d4e:	4b02      	ldr	r3, [pc, #8]	; (d58 <adcSample+0x18>)
     d50:	8b58      	ldrh	r0, [r3, #26]
     d52:	b280      	uxth	r0, r0
}
     d54:	4770      	bx	lr
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	42004000 	.word	0x42004000

00000d5c <adc_read>:


u16_t adc_read(Pin p) {
     d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d5e:	2501      	movs	r5, #1
     d60:	0c02      	lsrs	r2, r0, #16
     d62:	b2d4      	uxtb	r4, r2
     d64:	9000      	str	r0, [sp, #0]
     d66:	0e00      	lsrs	r0, r0, #24
     d68:	9101      	str	r1, [sp, #4]
     d6a:	0842      	lsrs	r2, r0, #1
     d6c:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d6e:	4911      	ldr	r1, [pc, #68]	; (db4 <adc_read+0x58>)
     d70:	18d2      	adds	r2, r2, r3
     d72:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d74:	4228      	tst	r0, r5
     d76:	d005      	beq.n	d84 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d78:	210f      	movs	r1, #15
     d7a:	7814      	ldrb	r4, [r2, #0]
     d7c:	4021      	ands	r1, r4
     d7e:	2410      	movs	r4, #16
     d80:	4321      	orrs	r1, r4
     d82:	e003      	b.n	d8c <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     d84:	240f      	movs	r4, #15
     d86:	7811      	ldrb	r1, [r2, #0]
     d88:	43a1      	bics	r1, r4
     d8a:	4329      	orrs	r1, r5
     d8c:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d8e:	2101      	movs	r1, #1
     d90:	4a09      	ldr	r2, [pc, #36]	; (db8 <adc_read+0x5c>)
     d92:	18c3      	adds	r3, r0, r3
     d94:	189b      	adds	r3, r3, r2
     d96:	781a      	ldrb	r2, [r3, #0]
     d98:	430a      	orrs	r2, r1
     d9a:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d9c:	466b      	mov	r3, sp
     d9e:	791a      	ldrb	r2, [r3, #4]
     da0:	231f      	movs	r3, #31
     da2:	4013      	ands	r3, r2
     da4:	22c0      	movs	r2, #192	; 0xc0
     da6:	0152      	lsls	r2, r2, #5
     da8:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     daa:	4a04      	ldr	r2, [pc, #16]	; (dbc <adc_read+0x60>)
     dac:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     dae:	4b04      	ldr	r3, [pc, #16]	; (dc0 <adc_read+0x64>)
     db0:	4798      	blx	r3
     db2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     db4:	41004430 	.word	0x41004430
     db8:	41004440 	.word	0x41004440
     dbc:	42004000 	.word	0x42004000
     dc0:	00000d41 	.word	0x00000d41

00000dc4 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     dc4:	0c01      	lsrs	r1, r0, #16
     dc6:	0c13      	lsrs	r3, r2, #16
     dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dca:	b2cd      	uxtb	r5, r1
     dcc:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dce:	2301      	movs	r3, #1
     dd0:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dd2:	0e12      	lsrs	r2, r2, #24
     dd4:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dd6:	0e00      	lsrs	r0, r0, #24
     dd8:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dda:	001a      	movs	r2, r3
     ddc:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dde:	0030      	movs	r0, r6
     de0:	4e11      	ldr	r6, [pc, #68]	; (e28 <byteOut+0x64>)
     de2:	01c9      	lsls	r1, r1, #7
     de4:	b087      	sub	sp, #28
     de6:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     de8:	4e10      	ldr	r6, [pc, #64]	; (e2c <byteOut+0x68>)
     dea:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dec:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dee:	19ae      	adds	r6, r5, r6
     df0:	7824      	ldrb	r4, [r4, #0]
     df2:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     df4:	4e0c      	ldr	r6, [pc, #48]	; (e28 <byteOut+0x64>)
     df6:	46b4      	mov	ip, r6
     df8:	44ac      	add	ip, r5
     dfa:	4666      	mov	r6, ip
     dfc:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     dfe:	b266      	sxtb	r6, r4
     e00:	2e00      	cmp	r6, #0
     e02:	da05      	bge.n	e10 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e04:	4e09      	ldr	r6, [pc, #36]	; (e2c <byteOut+0x68>)
     e06:	46b4      	mov	ip, r6
     e08:	448c      	add	ip, r1
     e0a:	4666      	mov	r6, ip
     e0c:	6032      	str	r2, [r6, #0]
     e0e:	e000      	b.n	e12 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e10:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e12:	9e01      	ldr	r6, [sp, #4]
     e14:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     e16:	0064      	lsls	r4, r4, #1
     e18:	b2db      	uxtb	r3, r3
     e1a:	6030      	str	r0, [r6, #0]
     e1c:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     e1e:	2b00      	cmp	r3, #0
     e20:	d1e8      	bne.n	df4 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     e22:	b007      	add	sp, #28
     e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	41004414 	.word	0x41004414
     e2c:	41004418 	.word	0x41004418

00000e30 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     e30:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e32:	2501      	movs	r5, #1
     e34:	b085      	sub	sp, #20
     e36:	9103      	str	r1, [sp, #12]
     e38:	0011      	movs	r1, r2
     e3a:	0c06      	lsrs	r6, r0, #16
     e3c:	9301      	str	r3, [sp, #4]
     e3e:	b2f3      	uxtb	r3, r6
     e40:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e42:	0e09      	lsrs	r1, r1, #24
     e44:	0c14      	lsrs	r4, r2, #16
     e46:	9002      	str	r0, [sp, #8]
     e48:	9200      	str	r2, [sp, #0]
     e4a:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e4c:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e4e:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     e50:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e52:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e54:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e56:	4c0a      	ldr	r4, [pc, #40]	; (e80 <byteIn+0x50>)
     e58:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e5a:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e5c:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e5e:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e60:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e62:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     e64:	0040      	lsls	r0, r0, #1
     e66:	402c      	ands	r4, r5
     e68:	1e67      	subs	r7, r4, #1
     e6a:	41bc      	sbcs	r4, r7
     e6c:	3901      	subs	r1, #1
     e6e:	4304      	orrs	r4, r0
     e70:	b2c9      	uxtb	r1, r1
     e72:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e74:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     e76:	2900      	cmp	r1, #0
     e78:	d1f2      	bne.n	e60 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     e7a:	b005      	add	sp, #20
     e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	41004400 	.word	0x41004400

00000e84 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e86:	2380      	movs	r3, #128	; 0x80
     e88:	2780      	movs	r7, #128	; 0x80
     e8a:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e8c:	2500      	movs	r5, #0
     e8e:	4c0a      	ldr	r4, [pc, #40]	; (eb8 <beep+0x34>)
     e90:	035b      	lsls	r3, r3, #13
     e92:	61e3      	str	r3, [r4, #28]
     e94:	03bf      	lsls	r7, r7, #14
     e96:	42b5      	cmp	r5, r6
     e98:	d006      	beq.n	ea8 <beep+0x24>
     e9a:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e9c:	207a      	movs	r0, #122	; 0x7a
     e9e:	4b07      	ldr	r3, [pc, #28]	; (ebc <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     ea0:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     ea2:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     ea4:	b2ad      	uxth	r5, r5
     ea6:	e7f6      	b.n	e96 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ea8:	2380      	movs	r3, #128	; 0x80
     eaa:	039b      	lsls	r3, r3, #14
     eac:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     eae:	2380      	movs	r3, #128	; 0x80
     eb0:	035b      	lsls	r3, r3, #13
     eb2:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	41004400 	.word	0x41004400
     ebc:	00001035 	.word	0x00001035

00000ec0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ec0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     ec2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     ec4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ec6:	4916      	ldr	r1, [pc, #88]	; (f20 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     ec8:	4a16      	ldr	r2, [pc, #88]	; (f24 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     eca:	00db      	lsls	r3, r3, #3
     ecc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     ece:	6853      	ldr	r3, [r2, #4]
     ed0:	4303      	orrs	r3, r0
     ed2:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     ed4:	4b14      	ldr	r3, [pc, #80]	; (f28 <GclkInit+0x68>)
     ed6:	681a      	ldr	r2, [r3, #0]
     ed8:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     eda:	2a3f      	cmp	r2, #63	; 0x3f
     edc:	d100      	bne.n	ee0 <GclkInit+0x20>
        coarse = 0x1f;
     ede:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     ee0:	4b12      	ldr	r3, [pc, #72]	; (f2c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ee2:	4813      	ldr	r0, [pc, #76]	; (f30 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	059b      	lsls	r3, r3, #22
     ee8:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     eea:	4283      	cmp	r3, r0
     eec:	d100      	bne.n	ef0 <GclkInit+0x30>
        fine = 0x1ff;
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     ef0:	4811      	ldr	r0, [pc, #68]	; (f38 <GclkInit+0x78>)
     ef2:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     ef4:	2010      	movs	r0, #16
     ef6:	68cc      	ldr	r4, [r1, #12]
     ef8:	4204      	tst	r4, r0
     efa:	d0fc      	beq.n	ef6 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     efc:	0292      	lsls	r2, r2, #10
     efe:	4313      	orrs	r3, r2
     f00:	4a07      	ldr	r2, [pc, #28]	; (f20 <GclkInit+0x60>)
     f02:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     f04:	2310      	movs	r3, #16
     f06:	68ca      	ldr	r2, [r1, #12]
     f08:	421a      	tst	r2, r3
     f0a:	d0fc      	beq.n	f06 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     f0c:	4a0b      	ldr	r2, [pc, #44]	; (f3c <GclkInit+0x7c>)
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <GclkInit+0x60>)
     f10:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     f12:	2280      	movs	r2, #128	; 0x80
     f14:	4b0a      	ldr	r3, [pc, #40]	; (f40 <GclkInit+0x80>)
     f16:	0052      	lsls	r2, r2, #1
     f18:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     f1a:	4a0a      	ldr	r2, [pc, #40]	; (f44 <GclkInit+0x84>)
     f1c:	605a      	str	r2, [r3, #4]
}
     f1e:	bd10      	pop	{r4, pc}
     f20:	40000800 	.word	0x40000800
     f24:	41004000 	.word	0x41004000
     f28:	00806024 	.word	0x00806024
     f2c:	00806028 	.word	0x00806028
     f30:	000003ff 	.word	0x000003ff
     f34:	000001ff 	.word	0x000001ff
     f38:	00000522 	.word	0x00000522
     f3c:	000005a2 	.word	0x000005a2
     f40:	40000c00 	.word	0x40000c00
     f44:	00010700 	.word	0x00010700

00000f48 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     f48:	4a1d      	ldr	r2, [pc, #116]	; (fc0 <RtcInit+0x78>)
     f4a:	4b1e      	ldr	r3, [pc, #120]	; (fc4 <RtcInit+0x7c>)
     f4c:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     f4e:	2202      	movs	r2, #2
     f50:	68d9      	ldr	r1, [r3, #12]
     f52:	4211      	tst	r1, r2
     f54:	d0fc      	beq.n	f50 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f56:	2281      	movs	r2, #129	; 0x81
     f58:	4b1b      	ldr	r3, [pc, #108]	; (fc8 <RtcInit+0x80>)
     f5a:	0052      	lsls	r2, r2, #1
     f5c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f5e:	4a1b      	ldr	r2, [pc, #108]	; (fcc <RtcInit+0x84>)
     f60:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f62:	785a      	ldrb	r2, [r3, #1]
     f64:	b252      	sxtb	r2, r2
     f66:	2a00      	cmp	r2, #0
     f68:	dbfb      	blt.n	f62 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f6a:	4a19      	ldr	r2, [pc, #100]	; (fd0 <RtcInit+0x88>)
     f6c:	4b16      	ldr	r3, [pc, #88]	; (fc8 <RtcInit+0x80>)
     f6e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f70:	2204      	movs	r2, #4
     f72:	4b18      	ldr	r3, [pc, #96]	; (fd4 <RtcInit+0x8c>)
     f74:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f76:	7a9a      	ldrb	r2, [r3, #10]
     f78:	4916      	ldr	r1, [pc, #88]	; (fd4 <RtcInit+0x8c>)
     f7a:	09d2      	lsrs	r2, r2, #7
     f7c:	d1fb      	bne.n	f76 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f7e:	20a0      	movs	r0, #160	; 0xa0
     f80:	880a      	ldrh	r2, [r1, #0]
     f82:	00c0      	lsls	r0, r0, #3
     f84:	4302      	orrs	r2, r0
     f86:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f88:	7a9a      	ldrb	r2, [r3, #10]
     f8a:	09d2      	lsrs	r2, r2, #7
     f8c:	d1fc      	bne.n	f88 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     f8e:	4912      	ldr	r1, [pc, #72]	; (fd8 <RtcInit+0x90>)
     f90:	4a10      	ldr	r2, [pc, #64]	; (fd4 <RtcInit+0x8c>)
     f92:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f94:	7a99      	ldrb	r1, [r3, #10]
     f96:	4a0f      	ldr	r2, [pc, #60]	; (fd4 <RtcInit+0x8c>)
     f98:	09c9      	lsrs	r1, r1, #7
     f9a:	d1fb      	bne.n	f94 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f9c:	8851      	ldrh	r1, [r2, #2]
     f9e:	480f      	ldr	r0, [pc, #60]	; (fdc <RtcInit+0x94>)
     fa0:	4301      	orrs	r1, r0
     fa2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fa4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     fa6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fa8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     faa:	8811      	ldrh	r1, [r2, #0]
     fac:	4301      	orrs	r1, r0
     fae:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     fb0:	7a9a      	ldrb	r2, [r3, #10]
     fb2:	09d2      	lsrs	r2, r2, #7
     fb4:	d1fc      	bne.n	fb0 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fb6:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <RtcInit+0x98>)
     fb8:	3208      	adds	r2, #8
     fba:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fbc:	4770      	bx	lr
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	0000060e 	.word	0x0000060e
     fc4:	40000800 	.word	0x40000800
     fc8:	40000c00 	.word	0x40000c00
     fcc:	00230002 	.word	0x00230002
     fd0:	00004204 	.word	0x00004204
     fd4:	40001400 	.word	0x40001400
     fd8:	000003e6 	.word	0x000003e6
     fdc:	00004010 	.word	0x00004010
     fe0:	e000e100 	.word	0xe000e100

00000fe4 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fe4:	230f      	movs	r3, #15
     fe6:	4018      	ands	r0, r3
     fe8:	4b08      	ldr	r3, [pc, #32]	; (100c <gclkEnable+0x28>)
     fea:	0212      	lsls	r2, r2, #8
     fec:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fee:	23f8      	movs	r3, #248	; 0xf8
     ff0:	0209      	lsls	r1, r1, #8
     ff2:	015b      	lsls	r3, r3, #5
     ff4:	4019      	ands	r1, r3
     ff6:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     ff8:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffa:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ffc:	4c04      	ldr	r4, [pc, #16]	; (1010 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffe:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1000:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1002:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1004:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1006:	6060      	str	r0, [r4, #4]
}
    1008:	bd10      	pop	{r4, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00ffff00 	.word	0x00ffff00
    1010:	40000c00 	.word	0x40000c00

00001014 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <delayInit+0x14>)
    1016:	4a05      	ldr	r2, [pc, #20]	; (102c <delayInit+0x18>)
    1018:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
    101a:	2230      	movs	r2, #48	; 0x30
    101c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    101e:	4b04      	ldr	r3, [pc, #16]	; (1030 <delayInit+0x1c>)
    1020:	3a2b      	subs	r2, #43	; 0x2b
    1022:	601a      	str	r2, [r3, #0]
}
    1024:	4770      	bx	lr
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	20000004 	.word	0x20000004
    102c:	0000bb80 	.word	0x0000bb80
    1030:	e000e010 	.word	0xe000e010

00001034 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1034:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1036:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1038:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    103a:	4b08      	ldr	r3, [pc, #32]	; (105c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    103c:	4a08      	ldr	r2, [pc, #32]	; (1060 <delay_us+0x2c>)
    103e:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1040:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    1042:	3801      	subs	r0, #1
    1044:	d308      	bcc.n	1058 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1046:	2b00      	cmp	r3, #0
    1048:	d0fb      	beq.n	1042 <delay_us+0xe>
    104a:	4e05      	ldr	r6, [pc, #20]	; (1060 <delay_us+0x2c>)
        SysTick->LOAD = n;
    104c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    104e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1050:	6835      	ldr	r5, [r6, #0]
    1052:	4225      	tst	r5, r4
    1054:	d0fc      	beq.n	1050 <delay_us+0x1c>
    1056:	e7f4      	b.n	1042 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1058:	bd70      	pop	{r4, r5, r6, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	20000004 	.word	0x20000004
    1060:	e000e010 	.word	0xe000e010

00001064 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1068:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    106a:	4b08      	ldr	r3, [pc, #32]	; (108c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    106c:	4a08      	ldr	r2, [pc, #32]	; (1090 <delay_ms+0x2c>)
    106e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1070:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    1072:	3801      	subs	r0, #1
    1074:	d308      	bcc.n	1088 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1076:	2b00      	cmp	r3, #0
    1078:	d0fb      	beq.n	1072 <delay_ms+0xe>
    107a:	4e05      	ldr	r6, [pc, #20]	; (1090 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    107c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    107e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1080:	6835      	ldr	r5, [r6, #0]
    1082:	4225      	tst	r5, r4
    1084:	d0fc      	beq.n	1080 <delay_ms+0x1c>
    1086:	e7f4      	b.n	1072 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1088:	bd70      	pop	{r4, r5, r6, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	20000004 	.word	0x20000004
    1090:	e000e010 	.word	0xe000e010

00001094 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1094:	21fa      	movs	r1, #250	; 0xfa
    1096:	4a04      	ldr	r2, [pc, #16]	; (10a8 <RTC_Handler+0x14>)
    1098:	0089      	lsls	r1, r1, #2
    109a:	6813      	ldr	r3, [r2, #0]
    109c:	185b      	adds	r3, r3, r1
    109e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    10a0:	22ff      	movs	r2, #255	; 0xff
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <RTC_Handler+0x18>)
    10a4:	721a      	strb	r2, [r3, #8]
}
    10a6:	4770      	bx	lr
    10a8:	2000045c 	.word	0x2000045c
    10ac:	40001400 	.word	0x40001400

000010b0 <millis>:

uint32_t millis(void) {
    10b0:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    10b2:	f3ef 8110 	mrs	r1, PRIMASK
    10b6:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    10b8:	4a08      	ldr	r2, [pc, #32]	; (10dc <millis+0x2c>)
    10ba:	4d09      	ldr	r5, [pc, #36]	; (10e0 <millis+0x30>)
    10bc:	8a10      	ldrh	r0, [r2, #16]
    10be:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    10c0:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    10c2:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    10c4:	09e4      	lsrs	r4, r4, #7
    10c6:	d004      	beq.n	10d2 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    10c8:	8a13      	ldrh	r3, [r2, #16]
    10ca:	22fa      	movs	r2, #250	; 0xfa
    10cc:	6828      	ldr	r0, [r5, #0]
    10ce:	0092      	lsls	r2, r2, #2
    10d0:	1880      	adds	r0, r0, r2
    10d2:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    10d4:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    10d8:	bd30      	pop	{r4, r5, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	40001400 	.word	0x40001400
    10e0:	2000045c 	.word	0x2000045c

000010e4 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10e4:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10e6:	4a0d      	ldr	r2, [pc, #52]	; (111c <TC4Init+0x38>)
    10e8:	4b0d      	ldr	r3, [pc, #52]	; (1120 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10ea:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10ec:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10ee:	4a0d      	ldr	r2, [pc, #52]	; (1124 <TC4Init+0x40>)
    10f0:	6a13      	ldr	r3, [r2, #32]
    10f2:	430b      	orrs	r3, r1
    10f4:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10f6:	4b0c      	ldr	r3, [pc, #48]	; (1128 <TC4Init+0x44>)
    10f8:	4a0c      	ldr	r2, [pc, #48]	; (112c <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10fa:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10fc:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    10fe:	2241      	movs	r2, #65	; 0x41
    1100:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1102:	3a40      	subs	r2, #64	; 0x40
    1104:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1106:	32ff      	adds	r2, #255	; 0xff
    1108:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    110a:	881a      	ldrh	r2, [r3, #0]
    110c:	430a      	orrs	r2, r1
    110e:	801a      	strh	r2, [r3, #0]
    1110:	2280      	movs	r2, #128	; 0x80
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <TC4Init+0x4c>)
    1114:	0312      	lsls	r2, r2, #12
    1116:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1118:	4770      	bx	lr
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	0000421c 	.word	0x0000421c
    1120:	40000c00 	.word	0x40000c00
    1124:	40000400 	.word	0x40000400
    1128:	42003000 	.word	0x42003000
    112c:	00000904 	.word	0x00000904
    1130:	e000e100 	.word	0xe000e100

00001134 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1134:	22ff      	movs	r2, #255	; 0xff
    1136:	4b03      	ldr	r3, [pc, #12]	; (1144 <TC4_Handler+0x10>)
    1138:	739a      	strb	r2, [r3, #14]
    takeSample = true;
    113a:	4b03      	ldr	r3, [pc, #12]	; (1148 <TC4_Handler+0x14>)
    113c:	3afe      	subs	r2, #254	; 0xfe
    113e:	701a      	strb	r2, [r3, #0]
}
    1140:	4770      	bx	lr
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	42003000 	.word	0x42003000
    1148:	20000463 	.word	0x20000463

0000114c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    114c:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    114e:	4a0d      	ldr	r2, [pc, #52]	; (1184 <TC5Init+0x38>)
    1150:	4b0d      	ldr	r3, [pc, #52]	; (1188 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1152:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1154:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1156:	4a0d      	ldr	r2, [pc, #52]	; (118c <TC5Init+0x40>)
    1158:	6a13      	ldr	r3, [r2, #32]
    115a:	430b      	orrs	r3, r1
    115c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    115e:	4b0c      	ldr	r3, [pc, #48]	; (1190 <TC5Init+0x44>)
    1160:	4a0c      	ldr	r2, [pc, #48]	; (1194 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1162:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1164:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1166:	2220      	movs	r2, #32
    1168:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    116a:	3a1f      	subs	r2, #31
    116c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    116e:	32ff      	adds	r2, #255	; 0xff
    1170:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1172:	881a      	ldrh	r2, [r3, #0]
    1174:	430a      	orrs	r2, r1
    1176:	801a      	strh	r2, [r3, #0]
    1178:	2280      	movs	r2, #128	; 0x80
    117a:	4b07      	ldr	r3, [pc, #28]	; (1198 <TC5Init+0x4c>)
    117c:	0352      	lsls	r2, r2, #13
    117e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1180:	4770      	bx	lr
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	0000421c 	.word	0x0000421c
    1188:	40000c00 	.word	0x40000c00
    118c:	40000400 	.word	0x40000400
    1190:	42003400 	.word	0x42003400
    1194:	00000d04 	.word	0x00000d04
    1198:	e000e100 	.word	0xe000e100

0000119c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    119c:	22ff      	movs	r2, #255	; 0xff
    119e:	4b03      	ldr	r3, [pc, #12]	; (11ac <TC5_Handler+0x10>)
    11a0:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    11a2:	4b03      	ldr	r3, [pc, #12]	; (11b0 <TC5_Handler+0x14>)
    11a4:	3afe      	subs	r2, #254	; 0xfe
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	4770      	bx	lr
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	42003400 	.word	0x42003400
    11b0:	20000461 	.word	0x20000461

000011b4 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    11b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    11b6:	27c0      	movs	r7, #192	; 0xc0
    11b8:	4d10      	ldr	r5, [pc, #64]	; (11fc <dmaInit+0x48>)
    11ba:	003a      	movs	r2, r7
    11bc:	4e10      	ldr	r6, [pc, #64]	; (1200 <dmaInit+0x4c>)
    11be:	0028      	movs	r0, r5
    11c0:	2100      	movs	r1, #0
    11c2:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    11c4:	4c0f      	ldr	r4, [pc, #60]	; (1204 <dmaInit+0x50>)
    11c6:	003a      	movs	r2, r7
    11c8:	2100      	movs	r1, #0
    11ca:	0020      	movs	r0, r4
    11cc:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    11ce:	2120      	movs	r1, #32
    11d0:	4b0d      	ldr	r3, [pc, #52]	; (1208 <dmaInit+0x54>)
    11d2:	695a      	ldr	r2, [r3, #20]
    11d4:	430a      	orrs	r2, r1
    11d6:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    11d8:	69da      	ldr	r2, [r3, #28]
    11da:	3910      	subs	r1, #16
    11dc:	430a      	orrs	r2, r1
    11de:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    11e0:	4b0a      	ldr	r3, [pc, #40]	; (120c <dmaInit+0x58>)
    11e2:	390e      	subs	r1, #14
    11e4:	881a      	ldrh	r2, [r3, #0]
    11e6:	438a      	bics	r2, r1
    11e8:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    11ea:	881a      	ldrh	r2, [r3, #0]
    11ec:	3901      	subs	r1, #1
    11ee:	430a      	orrs	r2, r1
    11f0:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    11f2:	4a07      	ldr	r2, [pc, #28]	; (1210 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    11f4:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    11f6:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    11f8:	801a      	strh	r2, [r3, #0]
}
    11fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11fc:	20000530 	.word	0x20000530
    1200:	0000328d 	.word	0x0000328d
    1204:	20000470 	.word	0x20000470
    1208:	40000400 	.word	0x40000400
    120c:	41004800 	.word	0x41004800
    1210:	00000f02 	.word	0x00000f02

00001214 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1214:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1216:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1218:	b085      	sub	sp, #20
    121a:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    121c:	2b00      	cmp	r3, #0
    121e:	d178      	bne.n	1312 <flight+0xfe>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1220:	4d3d      	ldr	r5, [pc, #244]	; (1318 <flight+0x104>)
    1222:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1224:	47a8      	blx	r5
    1226:	2200      	movs	r2, #0
    1228:	4b3c      	ldr	r3, [pc, #240]	; (131c <flight+0x108>)
    122a:	4e3d      	ldr	r6, [pc, #244]	; (1320 <flight+0x10c>)
    122c:	47b0      	blx	r6
    122e:	0006      	movs	r6, r0
    1230:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1232:	000f      	movs	r7, r1
    1234:	47a8      	blx	r5
    1236:	4d3a      	ldr	r5, [pc, #232]	; (1320 <flight+0x10c>)
    1238:	2200      	movs	r2, #0
    123a:	4b38      	ldr	r3, [pc, #224]	; (131c <flight+0x108>)
    123c:	47a8      	blx	r5
    123e:	4d39      	ldr	r5, [pc, #228]	; (1324 <flight+0x110>)
    1240:	0002      	movs	r2, r0
    1242:	000b      	movs	r3, r1
    1244:	0030      	movs	r0, r6
    1246:	0039      	movs	r1, r7
    1248:	47a8      	blx	r5
    124a:	4b37      	ldr	r3, [pc, #220]	; (1328 <flight+0x114>)
    124c:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    124e:	0023      	movs	r3, r4
    1250:	3348      	adds	r3, #72	; 0x48
    1252:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1254:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1256:	8818      	ldrh	r0, [r3, #0]
    1258:	4d34      	ldr	r5, [pc, #208]	; (132c <flight+0x118>)
    125a:	47a8      	blx	r5
    125c:	2200      	movs	r2, #0
    125e:	4e30      	ldr	r6, [pc, #192]	; (1320 <flight+0x10c>)
    1260:	4b2e      	ldr	r3, [pc, #184]	; (131c <flight+0x108>)
    1262:	47b0      	blx	r6
    1264:	0023      	movs	r3, r4
    1266:	3370      	adds	r3, #112	; 0x70
    1268:	0006      	movs	r6, r0
    126a:	8818      	ldrh	r0, [r3, #0]
    126c:	000f      	movs	r7, r1
    126e:	47a8      	blx	r5
    1270:	4d2b      	ldr	r5, [pc, #172]	; (1320 <flight+0x10c>)
    1272:	2200      	movs	r2, #0
    1274:	4b29      	ldr	r3, [pc, #164]	; (131c <flight+0x108>)
    1276:	47a8      	blx	r5
    1278:	4d2a      	ldr	r5, [pc, #168]	; (1324 <flight+0x110>)
    127a:	0002      	movs	r2, r0
    127c:	000b      	movs	r3, r1
    127e:	0030      	movs	r0, r6
    1280:	0039      	movs	r1, r7
    1282:	47a8      	blx	r5
    1284:	4b2a      	ldr	r3, [pc, #168]	; (1330 <flight+0x11c>)
    1286:	4798      	blx	r3
    1288:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    128a:	4d2a      	ldr	r5, [pc, #168]	; (1334 <flight+0x120>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    128c:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    128e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1290:	47a8      	blx	r5
    1292:	4e23      	ldr	r6, [pc, #140]	; (1320 <flight+0x10c>)
    1294:	2200      	movs	r2, #0
    1296:	4b21      	ldr	r3, [pc, #132]	; (131c <flight+0x108>)
    1298:	47b0      	blx	r6
    129a:	9002      	str	r0, [sp, #8]
    129c:	9103      	str	r1, [sp, #12]
    129e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    12a0:	47a8      	blx	r5
    12a2:	2200      	movs	r2, #0
    12a4:	4b1d      	ldr	r3, [pc, #116]	; (131c <flight+0x108>)
    12a6:	47b0      	blx	r6
    12a8:	4e1e      	ldr	r6, [pc, #120]	; (1324 <flight+0x110>)
    12aa:	0002      	movs	r2, r0
    12ac:	000b      	movs	r3, r1
    12ae:	9802      	ldr	r0, [sp, #8]
    12b0:	9903      	ldr	r1, [sp, #12]
    12b2:	47b0      	blx	r6
    12b4:	4b1e      	ldr	r3, [pc, #120]	; (1330 <flight+0x11c>)
    12b6:	4798      	blx	r3
    12b8:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    12ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    12bc:	47a8      	blx	r5
    12be:	2200      	movs	r2, #0
    12c0:	4b16      	ldr	r3, [pc, #88]	; (131c <flight+0x108>)
    12c2:	4e17      	ldr	r6, [pc, #92]	; (1320 <flight+0x10c>)
    12c4:	47b0      	blx	r6
    12c6:	0006      	movs	r6, r0
    12c8:	69a0      	ldr	r0, [r4, #24]
    12ca:	000f      	movs	r7, r1
    12cc:	47a8      	blx	r5
    12ce:	4d14      	ldr	r5, [pc, #80]	; (1320 <flight+0x10c>)
    12d0:	2200      	movs	r2, #0
    12d2:	4b12      	ldr	r3, [pc, #72]	; (131c <flight+0x108>)
    12d4:	47a8      	blx	r5
    12d6:	4d13      	ldr	r5, [pc, #76]	; (1324 <flight+0x110>)
    12d8:	0002      	movs	r2, r0
    12da:	000b      	movs	r3, r1
    12dc:	0030      	movs	r0, r6
    12de:	0039      	movs	r1, r7
    12e0:	47a8      	blx	r5
    12e2:	4b13      	ldr	r3, [pc, #76]	; (1330 <flight+0x11c>)
    12e4:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    12e6:	4d14      	ldr	r5, [pc, #80]	; (1338 <flight+0x124>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    12e8:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    12ea:	47a8      	blx	r5
    12ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12ee:	1ac0      	subs	r0, r0, r3
    12f0:	23fa      	movs	r3, #250	; 0xfa
    12f2:	00db      	lsls	r3, r3, #3
    12f4:	4298      	cmp	r0, r3
    12f6:	d90c      	bls.n	1312 <flight+0xfe>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    12f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    12fa:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    12fc:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    12fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1300:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1302:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1304:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1306:	0023      	movs	r3, r4
    1308:	8812      	ldrh	r2, [r2, #0]
    130a:	334a      	adds	r3, #74	; 0x4a
    130c:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    130e:	47a8      	blx	r5
    1310:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


    1312:	b005      	add	sp, #20
    1314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00003049 	.word	0x00003049
    131c:	3fe00000 	.word	0x3fe00000
    1320:	0000234d 	.word	0x0000234d
    1324:	00001ad9 	.word	0x00001ad9
    1328:	000030f1 	.word	0x000030f1
    132c:	00002f55 	.word	0x00002f55
    1330:	00001a9d 	.word	0x00001a9d
    1334:	00002fd9 	.word	0x00002fd9
    1338:	000010b1 	.word	0x000010b1

0000133c <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    133c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    133e:	26c8      	movs	r6, #200	; 0xc8
    1340:	0076      	lsls	r6, r6, #1
    1342:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1344:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1346:	194b      	adds	r3, r1, r5
    1348:	2bfe      	cmp	r3, #254	; 0xfe
    134a:	dc03      	bgt.n	1354 <makePage+0x18>
    134c:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    134e:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1350:	1947      	adds	r7, r0, r5
    1352:	e035      	b.n	13c0 <makePage+0x84>
    1354:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1356:	195c      	adds	r4, r3, r5
    1358:	b2de      	uxtb	r6, r3
    135a:	2cfe      	cmp	r4, #254	; 0xfe
    135c:	dc08      	bgt.n	1370 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    135e:	9a00      	ldr	r2, [sp, #0]
    1360:	1904      	adds	r4, r0, r4
    1362:	5cd6      	ldrb	r6, [r2, r3]
    1364:	3492      	adds	r4, #146	; 0x92
    1366:	34ff      	adds	r4, #255	; 0xff

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1368:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    136a:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    136c:	b29b      	uxth	r3, r3
    136e:	e7f2      	b.n	1356 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1370:	23c8      	movs	r3, #200	; 0xc8
    1372:	2500      	movs	r5, #0
    1374:	0004      	movs	r4, r0
    1376:	005b      	lsls	r3, r3, #1
    1378:	54c5      	strb	r5, [r0, r3]
    137a:	4b19      	ldr	r3, [pc, #100]	; (13e0 <makePage+0xa4>)
    137c:	3492      	adds	r4, #146	; 0x92
    137e:	18c3      	adds	r3, r0, r3
    1380:	34ff      	adds	r4, #255	; 0xff
    1382:	9301      	str	r3, [sp, #4]
    1384:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1386:	781f      	ldrb	r7, [r3, #0]
    1388:	46bc      	mov	ip, r7
    138a:	4662      	mov	r2, ip
    138c:	1e9f      	subs	r7, r3, #2
    138e:	3fff      	subs	r7, #255	; 0xff
    1390:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1392:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1394:	701d      	strb	r5, [r3, #0]
    1396:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1398:	4293      	cmp	r3, r2
    139a:	d1f4      	bne.n	1386 <makePage+0x4a>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    139c:	25c8      	movs	r5, #200	; 0xc8
    139e:	0033      	movs	r3, r6
    13a0:	006d      	lsls	r5, r5, #1
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    13a2:	428b      	cmp	r3, r1
    13a4:	d208      	bcs.n	13b8 <makePage+0x7c>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    13a6:	9a00      	ldr	r2, [sp, #0]
    13a8:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    13aa:	3301      	adds	r3, #1
    13ac:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    13ae:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    13b0:	1b9f      	subs	r7, r3, r6
    13b2:	5547      	strb	r7, [r0, r5]
    13b4:	3401      	adds	r4, #1
    13b6:	e7f4      	b.n	13a2 <makePage+0x66>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    13b8:	2201      	movs	r2, #1
    13ba:	4b09      	ldr	r3, [pc, #36]	; (13e0 <makePage+0xa4>)
    13bc:	54c2      	strb	r2, [r0, r3]
    13be:	e00d      	b.n	13dc <makePage+0xa0>
    13c0:	1c5c      	adds	r4, r3, #1
    13c2:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    13c4:	428b      	cmp	r3, r1
    13c6:	d809      	bhi.n	13dc <makePage+0xa0>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    13c8:	9a00      	ldr	r2, [sp, #0]
    13ca:	5cd2      	ldrb	r2, [r2, r3]
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	3392      	adds	r3, #146	; 0x92
    13d0:	33ff      	adds	r3, #255	; 0xff
    13d2:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    13d4:	192b      	adds	r3, r5, r4
    13d6:	5583      	strb	r3, [r0, r6]
    13d8:	0023      	movs	r3, r4
    13da:	e7f1      	b.n	13c0 <makePage+0x84>
        }

    }
}
    13dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	00000291 	.word	0x00000291

000013e4 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    13e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    13e6:	2346      	movs	r3, #70	; 0x46
    13e8:	466a      	mov	r2, sp
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    13ea:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    13ec:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    13ee:	7843      	ldrb	r3, [r0, #1]
    13f0:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    13f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    13f4:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    13f6:	0a1a      	lsrs	r2, r3, #8
    13f8:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    13fa:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    13fc:	0e1b      	lsrs	r3, r3, #24
    13fe:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1400:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1402:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1404:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1406:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1408:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    140a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    140c:	0e1b      	lsrs	r3, r3, #24
    140e:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1410:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1412:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1414:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1416:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1418:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    141a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    141c:	0e1b      	lsrs	r3, r3, #24
    141e:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1420:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1422:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1424:	334a      	adds	r3, #74	; 0x4a
    1426:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1428:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    142a:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    142c:	0a1b      	lsrs	r3, r3, #8
    142e:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1430:	2110      	movs	r1, #16
    1432:	4b02      	ldr	r3, [pc, #8]	; (143c <logFlight+0x58>)
    1434:	4798      	blx	r3
}
    1436:	b005      	add	sp, #20
    1438:	bd00      	pop	{pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	0000133d 	.word	0x0000133d

00001440 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1442:	2341      	movs	r3, #65	; 0x41
    1444:	466a      	mov	r2, sp
    1446:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1448:	23a8      	movs	r3, #168	; 0xa8
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    144a:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    144c:	009b      	lsls	r3, r3, #2
    144e:	58c3      	ldr	r3, [r0, r3]
    1450:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1452:	0a1a      	lsrs	r2, r3, #8
    1454:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1456:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1458:	0e1b      	lsrs	r3, r3, #24
    145a:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    145c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    145e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1460:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1462:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1464:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1466:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1468:	0e1b      	lsrs	r3, r3, #24
    146a:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    146c:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    146e:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1470:	3368      	adds	r3, #104	; 0x68
    1472:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1474:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1476:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1478:	0a1b      	lsrs	r3, r3, #8
    147a:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    147c:	0003      	movs	r3, r0
    147e:	336c      	adds	r3, #108	; 0x6c
    1480:	881b      	ldrh	r3, [r3, #0]
    1482:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1484:	0a1b      	lsrs	r3, r3, #8
    1486:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1488:	0003      	movs	r3, r0
    148a:	3370      	adds	r3, #112	; 0x70
    148c:	881b      	ldrh	r3, [r3, #0]
    148e:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1490:	0a1b      	lsrs	r3, r3, #8
    1492:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1494:	0003      	movs	r3, r0
    1496:	3374      	adds	r3, #116	; 0x74
    1498:	881b      	ldrh	r3, [r3, #0]
    149a:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    149c:	0a1b      	lsrs	r3, r3, #8
    149e:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    14a0:	0003      	movs	r3, r0
    14a2:	3378      	adds	r3, #120	; 0x78
    14a4:	881b      	ldrh	r3, [r3, #0]
    14a6:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    14a8:	0a1b      	lsrs	r3, r3, #8
    14aa:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    14ac:	0003      	movs	r3, r0
    14ae:	337c      	adds	r3, #124	; 0x7c
    14b0:	881b      	ldrh	r3, [r3, #0]
    14b2:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    14b4:	0a1b      	lsrs	r3, r3, #8
    14b6:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    14b8:	0003      	movs	r3, r0
    14ba:	3380      	adds	r3, #128	; 0x80
    14bc:	881b      	ldrh	r3, [r3, #0]
    14be:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    14c0:	0a1b      	lsrs	r3, r3, #8
    14c2:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    14c4:	2117      	movs	r1, #23
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <logSensors+0x90>)
    14c8:	4798      	blx	r3
}
    14ca:	b007      	add	sp, #28
    14cc:	bd00      	pop	{pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	0000133d 	.word	0x0000133d

000014d4 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    14d6:	4bd2      	ldr	r3, [pc, #840]	; (1820 <sampleTick+0x34c>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    14d8:	b087      	sub	sp, #28
    14da:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    14dc:	4798      	blx	r3
    14de:	23a8      	movs	r3, #168	; 0xa8

    my_altimeter->batV = adc_read(senseBatPin);
    14e0:	4dd0      	ldr	r5, [pc, #832]	; (1824 <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    14e2:	009b      	lsls	r3, r3, #2
    14e4:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    14e6:	786b      	ldrb	r3, [r5, #1]
    14e8:	7829      	ldrb	r1, [r5, #0]
    14ea:	78a8      	ldrb	r0, [r5, #2]
    14ec:	021b      	lsls	r3, r3, #8
    14ee:	430b      	orrs	r3, r1
    14f0:	0400      	lsls	r0, r0, #16
    14f2:	001a      	movs	r2, r3
    14f4:	0003      	movs	r3, r0
    14f6:	78e8      	ldrb	r0, [r5, #3]
    14f8:	4313      	orrs	r3, r2
    14fa:	0600      	lsls	r0, r0, #24
    14fc:	4eca      	ldr	r6, [pc, #808]	; (1828 <sampleTick+0x354>)
    14fe:	7929      	ldrb	r1, [r5, #4]
    1500:	4318      	orrs	r0, r3
    1502:	47b0      	blx	r6
    1504:	23a5      	movs	r3, #165	; 0xa5
    1506:	009b      	lsls	r3, r3, #2
    1508:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    150a:	79ab      	ldrb	r3, [r5, #6]
    150c:	7969      	ldrb	r1, [r5, #5]
    150e:	79e8      	ldrb	r0, [r5, #7]
    1510:	021b      	lsls	r3, r3, #8
    1512:	430b      	orrs	r3, r1
    1514:	0400      	lsls	r0, r0, #16
    1516:	001a      	movs	r2, r3
    1518:	0003      	movs	r3, r0
    151a:	7a28      	ldrb	r0, [r5, #8]
    151c:	4313      	orrs	r3, r2
    151e:	0600      	lsls	r0, r0, #24
    1520:	7a69      	ldrb	r1, [r5, #9]
    1522:	4318      	orrs	r0, r3
    1524:	47b0      	blx	r6
    1526:	4bc1      	ldr	r3, [pc, #772]	; (182c <sampleTick+0x358>)
    my_altimeter->senseB = adc_read(senseBPin);
    1528:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    152a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    152c:	7aeb      	ldrb	r3, [r5, #11]
    152e:	7b28      	ldrb	r0, [r5, #12]
    1530:	021b      	lsls	r3, r3, #8
    1532:	430b      	orrs	r3, r1
    1534:	0400      	lsls	r0, r0, #16
    1536:	001a      	movs	r2, r3
    1538:	0003      	movs	r3, r0
    153a:	7b68      	ldrb	r0, [r5, #13]
    153c:	4313      	orrs	r3, r2
    153e:	0600      	lsls	r0, r0, #24
    1540:	7ba9      	ldrb	r1, [r5, #14]
    1542:	4318      	orrs	r0, r3
    1544:	47b0      	blx	r6
    1546:	23a6      	movs	r3, #166	; 0xa6
    1548:	009b      	lsls	r3, r3, #2
    154a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    154c:	7c2b      	ldrb	r3, [r5, #16]
    154e:	7be9      	ldrb	r1, [r5, #15]
    1550:	7c68      	ldrb	r0, [r5, #17]
    1552:	021b      	lsls	r3, r3, #8
    1554:	430b      	orrs	r3, r1
    1556:	0400      	lsls	r0, r0, #16
    1558:	001a      	movs	r2, r3
    155a:	0003      	movs	r3, r0
    155c:	7ca8      	ldrb	r0, [r5, #18]
    155e:	4313      	orrs	r3, r2
    1560:	0600      	lsls	r0, r0, #24
    1562:	7ce9      	ldrb	r1, [r5, #19]
    1564:	4318      	orrs	r0, r3
    1566:	47b0      	blx	r6
    1568:	4bb1      	ldr	r3, [pc, #708]	; (1830 <sampleTick+0x35c>)
    my_altimeter->senseD = adc_read(senseDPin);
    156a:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    156c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    156e:	7d6b      	ldrb	r3, [r5, #21]
    1570:	7da8      	ldrb	r0, [r5, #22]
    1572:	021b      	lsls	r3, r3, #8
    1574:	430b      	orrs	r3, r1
    1576:	0400      	lsls	r0, r0, #16
    1578:	001a      	movs	r2, r3
    157a:	0003      	movs	r3, r0
    157c:	7de8      	ldrb	r0, [r5, #23]
    157e:	4313      	orrs	r3, r2
    1580:	0600      	lsls	r0, r0, #24
    1582:	7e29      	ldrb	r1, [r5, #24]
    1584:	4318      	orrs	r0, r3
    1586:	47b0      	blx	r6
    1588:	23a7      	movs	r3, #167	; 0xa7
    158a:	009b      	lsls	r3, r3, #2
    158c:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    158e:	7eab      	ldrb	r3, [r5, #26]
    1590:	7e69      	ldrb	r1, [r5, #25]
    1592:	7ee8      	ldrb	r0, [r5, #27]
    1594:	021b      	lsls	r3, r3, #8
    1596:	430b      	orrs	r3, r1
    1598:	0400      	lsls	r0, r0, #16
    159a:	001a      	movs	r2, r3
    159c:	0003      	movs	r3, r0
    159e:	7f28      	ldrb	r0, [r5, #28]
    15a0:	4313      	orrs	r3, r2
    15a2:	0600      	lsls	r0, r0, #24
    15a4:	7f69      	ldrb	r1, [r5, #29]
    15a6:	4318      	orrs	r0, r3
    15a8:	47b0      	blx	r6
    15aa:	0023      	movs	r3, r4
    15ac:	3380      	adds	r3, #128	; 0x80
    15ae:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    15b0:	4ba0      	ldr	r3, [pc, #640]	; (1834 <sampleTick+0x360>)
    15b2:	0026      	movs	r6, r4
    15b4:	18c0      	adds	r0, r0, r3
    15b6:	4ba0      	ldr	r3, [pc, #640]	; (1838 <sampleTick+0x364>)
    15b8:	4798      	blx	r3
    15ba:	4aa0      	ldr	r2, [pc, #640]	; (183c <sampleTick+0x368>)
    15bc:	4fa0      	ldr	r7, [pc, #640]	; (1840 <sampleTick+0x36c>)
    15be:	4ba1      	ldr	r3, [pc, #644]	; (1844 <sampleTick+0x370>)
    15c0:	47b8      	blx	r7
    15c2:	4ba1      	ldr	r3, [pc, #644]	; (1848 <sampleTick+0x374>)
    15c4:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    15c6:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    15c8:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    15ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    15cc:	3608      	adds	r6, #8
    15ce:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    15d0:	6523      	str	r3, [r4, #80]	; 0x50
    15d2:	4b9e      	ldr	r3, [pc, #632]	; (184c <sampleTick+0x378>)
    15d4:	023f      	lsls	r7, r7, #8
    15d6:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    15d8:	002e      	movs	r6, r5
    15da:	9200      	str	r2, [sp, #0]
    15dc:	7fea      	ldrb	r2, [r5, #31]
    15de:	7fa8      	ldrb	r0, [r5, #30]
    15e0:	0212      	lsls	r2, r2, #8
    15e2:	4302      	orrs	r2, r0
    15e4:	0011      	movs	r1, r2
    15e6:	002b      	movs	r3, r5
    15e8:	361e      	adds	r6, #30
    15ea:	78b2      	ldrb	r2, [r6, #2]
    15ec:	3323      	adds	r3, #35	; 0x23
    15ee:	0412      	lsls	r2, r2, #16
    15f0:	430a      	orrs	r2, r1
    15f2:	78f1      	ldrb	r1, [r6, #3]
    15f4:	7818      	ldrb	r0, [r3, #0]
    15f6:	0609      	lsls	r1, r1, #24
    15f8:	4311      	orrs	r1, r2
    15fa:	7932      	ldrb	r2, [r6, #4]
    15fc:	789d      	ldrb	r5, [r3, #2]
    15fe:	9204      	str	r2, [sp, #16]
    1600:	785a      	ldrb	r2, [r3, #1]
    1602:	042d      	lsls	r5, r5, #16
    1604:	0212      	lsls	r2, r2, #8
    1606:	4302      	orrs	r2, r0
    1608:	9103      	str	r1, [sp, #12]
    160a:	0011      	movs	r1, r2
    160c:	002a      	movs	r2, r5
    160e:	78dd      	ldrb	r5, [r3, #3]
    1610:	791b      	ldrb	r3, [r3, #4]
    1612:	430a      	orrs	r2, r1
    1614:	062d      	lsls	r5, r5, #24
    1616:	4315      	orrs	r5, r2
    1618:	9305      	str	r3, [sp, #20]
    161a:	9a03      	ldr	r2, [sp, #12]
    161c:	9905      	ldr	r1, [sp, #20]
    161e:	9b04      	ldr	r3, [sp, #16]
    1620:	0028      	movs	r0, r5
    1622:	4e8b      	ldr	r6, [pc, #556]	; (1850 <sampleTick+0x37c>)
    1624:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    1626:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1628:	4b88      	ldr	r3, [pc, #544]	; (184c <sampleTick+0x378>)
    162a:	0040      	lsls	r0, r0, #1
    162c:	619f      	str	r7, [r3, #24]
    162e:	4b89      	ldr	r3, [pc, #548]	; (1854 <sampleTick+0x380>)
    1630:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1632:	4b89      	ldr	r3, [pc, #548]	; (1858 <sampleTick+0x384>)
    1634:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1636:	4b85      	ldr	r3, [pc, #532]	; (184c <sampleTick+0x378>)
    1638:	6160      	str	r0, [r4, #20]
    163a:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    163c:	2342      	movs	r3, #66	; 0x42
    163e:	9a03      	ldr	r2, [sp, #12]
    1640:	9300      	str	r3, [sp, #0]
    1642:	0028      	movs	r0, r5
    1644:	9b04      	ldr	r3, [sp, #16]
    1646:	9905      	ldr	r1, [sp, #20]
    1648:	47b0      	blx	r6
    164a:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    164c:	4b7f      	ldr	r3, [pc, #508]	; (184c <sampleTick+0x378>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    164e:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1650:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1652:	4b82      	ldr	r3, [pc, #520]	; (185c <sampleTick+0x388>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1654:	4f82      	ldr	r7, [pc, #520]	; (1860 <sampleTick+0x38c>)
    1656:	601a      	str	r2, [r3, #0]
    1658:	2182      	movs	r1, #130	; 0x82
    165a:	2000      	movs	r0, #0
    165c:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    165e:	21ff      	movs	r1, #255	; 0xff
    1660:	2000      	movs	r0, #0
    1662:	47b8      	blx	r7
    1664:	0023      	movs	r3, r4
    1666:	3368      	adds	r3, #104	; 0x68
    1668:	8018      	strh	r0, [r3, #0]
    166a:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    166c:	21ff      	movs	r1, #255	; 0xff
    166e:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1670:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1672:	47b8      	blx	r7
    1674:	9b03      	ldr	r3, [sp, #12]
    1676:	0200      	lsls	r0, r0, #8
    1678:	4305      	orrs	r5, r0
    167a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    167c:	21ff      	movs	r1, #255	; 0xff
    167e:	0026      	movs	r6, r4
    1680:	2000      	movs	r0, #0
    1682:	47b8      	blx	r7
    1684:	366c      	adds	r6, #108	; 0x6c
    1686:	8030      	strh	r0, [r6, #0]
    1688:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    168a:	21ff      	movs	r1, #255	; 0xff
    168c:	2000      	movs	r0, #0
    168e:	47b8      	blx	r7
    1690:	0200      	lsls	r0, r0, #8
    1692:	4305      	orrs	r5, r0
    1694:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1696:	21ff      	movs	r1, #255	; 0xff
    1698:	2000      	movs	r0, #0
    169a:	47b8      	blx	r7
    169c:	466b      	mov	r3, sp
    169e:	0025      	movs	r5, r4
    16a0:	9004      	str	r0, [sp, #16]
    16a2:	8a1b      	ldrh	r3, [r3, #16]
    16a4:	3570      	adds	r5, #112	; 0x70
    16a6:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    16a8:	21ff      	movs	r1, #255	; 0xff
    16aa:	2000      	movs	r0, #0
    16ac:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    16ae:	2280      	movs	r2, #128	; 0x80
    16b0:	9b04      	ldr	r3, [sp, #16]
    16b2:	0200      	lsls	r0, r0, #8
    16b4:	4303      	orrs	r3, r0
    16b6:	802b      	strh	r3, [r5, #0]
    16b8:	4b6a      	ldr	r3, [pc, #424]	; (1864 <sampleTick+0x390>)
    16ba:	00d2      	lsls	r2, r2, #3
    16bc:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    16be:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    16c0:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    16c2:	2000      	movs	r0, #0
    16c4:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    16c6:	2300      	movs	r3, #0
    16c8:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    16ca:	2102      	movs	r1, #2
    16cc:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    16ce:	0021      	movs	r1, r4
    16d0:	1112      	asrs	r2, r2, #4
    16d2:	1100      	asrs	r0, r0, #4
    16d4:	316a      	adds	r1, #106	; 0x6a
    16d6:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    16d8:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    16da:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    16dc:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    16de:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    16e0:	4b55      	ldr	r3, [pc, #340]	; (1838 <sampleTick+0x364>)
    16e2:	4798      	blx	r3
    16e4:	23fe      	movs	r3, #254	; 0xfe
    16e6:	4d56      	ldr	r5, [pc, #344]	; (1840 <sampleTick+0x36c>)
    16e8:	2200      	movs	r2, #0
    16ea:	059b      	lsls	r3, r3, #22
    16ec:	47a8      	blx	r5
    16ee:	4b56      	ldr	r3, [pc, #344]	; (1848 <sampleTick+0x374>)
    16f0:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    16f2:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    16f4:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    16f6:	2000      	movs	r0, #0
    16f8:	5e18      	ldrsh	r0, [r3, r0]
    16fa:	4b4f      	ldr	r3, [pc, #316]	; (1838 <sampleTick+0x364>)
    16fc:	4798      	blx	r3
    16fe:	23fe      	movs	r3, #254	; 0xfe
    1700:	2200      	movs	r2, #0
    1702:	059b      	lsls	r3, r3, #22
    1704:	47a8      	blx	r5
    1706:	4b50      	ldr	r3, [pc, #320]	; (1848 <sampleTick+0x374>)
    1708:	4798      	blx	r3
    170a:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    170c:	2306      	movs	r3, #6
    170e:	5ef0      	ldrsh	r0, [r6, r3]
    1710:	4b49      	ldr	r3, [pc, #292]	; (1838 <sampleTick+0x364>)
    1712:	4798      	blx	r3
    1714:	23fe      	movs	r3, #254	; 0xfe
    1716:	2200      	movs	r2, #0
    1718:	059b      	lsls	r3, r3, #22
    171a:	47a8      	blx	r5
    171c:	4b4a      	ldr	r3, [pc, #296]	; (1848 <sampleTick+0x374>)
    171e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1720:	2280      	movs	r2, #128	; 0x80
    1722:	4b4a      	ldr	r3, [pc, #296]	; (184c <sampleTick+0x378>)
    1724:	00d2      	lsls	r2, r2, #3
    1726:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1728:	2182      	movs	r1, #130	; 0x82
    172a:	615a      	str	r2, [r3, #20]
    172c:	2000      	movs	r0, #0
    172e:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1730:	21ff      	movs	r1, #255	; 0xff
    1732:	2000      	movs	r0, #0
    1734:	47b8      	blx	r7
    1736:	0023      	movs	r3, r4
    1738:	3374      	adds	r3, #116	; 0x74
    173a:	8018      	strh	r0, [r3, #0]
    173c:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    173e:	21ff      	movs	r1, #255	; 0xff
    1740:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1742:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1744:	47b8      	blx	r7
    1746:	9b03      	ldr	r3, [sp, #12]
    1748:	0200      	lsls	r0, r0, #8
    174a:	4305      	orrs	r5, r0
    174c:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    174e:	21ff      	movs	r1, #255	; 0xff
    1750:	2000      	movs	r0, #0
    1752:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1754:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1756:	81b0      	strh	r0, [r6, #12]
    1758:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    175a:	2000      	movs	r0, #0
    175c:	47b8      	blx	r7
    175e:	0200      	lsls	r0, r0, #8
    1760:	4305      	orrs	r5, r0
    1762:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1764:	21ff      	movs	r1, #255	; 0xff
    1766:	2000      	movs	r0, #0
    1768:	47b8      	blx	r7
    176a:	466b      	mov	r3, sp
    176c:	0025      	movs	r5, r4
    176e:	9004      	str	r0, [sp, #16]
    1770:	8a1b      	ldrh	r3, [r3, #16]
    1772:	357c      	adds	r5, #124	; 0x7c
    1774:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1776:	21ff      	movs	r1, #255	; 0xff
    1778:	2000      	movs	r0, #0
    177a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    177c:	2280      	movs	r2, #128	; 0x80
    177e:	9f04      	ldr	r7, [sp, #16]
    1780:	0200      	lsls	r0, r0, #8
    1782:	4b32      	ldr	r3, [pc, #200]	; (184c <sampleTick+0x378>)
    1784:	4307      	orrs	r7, r0
    1786:	00d2      	lsls	r2, r2, #3
    1788:	802f      	strh	r7, [r5, #0]
    178a:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    178c:	9b03      	ldr	r3, [sp, #12]
    178e:	2000      	movs	r0, #0
    1790:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    1792:	230c      	movs	r3, #12
    1794:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    1796:	2100      	movs	r1, #0
    1798:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    179a:	0021      	movs	r1, r4
    179c:	1112      	asrs	r2, r2, #4
    179e:	1100      	asrs	r0, r0, #4
    17a0:	3176      	adds	r1, #118	; 0x76
    17a2:	111b      	asrs	r3, r3, #4
    17a4:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    17a6:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    17a8:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    17aa:	4b23      	ldr	r3, [pc, #140]	; (1838 <sampleTick+0x364>)
    17ac:	4798      	blx	r3
    17ae:	23fe      	movs	r3, #254	; 0xfe
    17b0:	4f23      	ldr	r7, [pc, #140]	; (1840 <sampleTick+0x36c>)
    17b2:	2200      	movs	r2, #0
    17b4:	059b      	lsls	r3, r3, #22
    17b6:	47b8      	blx	r7
    17b8:	4b23      	ldr	r3, [pc, #140]	; (1848 <sampleTick+0x374>)
    17ba:	4798      	blx	r3
    17bc:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    17be:	230e      	movs	r3, #14
    17c0:	5ef0      	ldrsh	r0, [r6, r3]
    17c2:	4b1d      	ldr	r3, [pc, #116]	; (1838 <sampleTick+0x364>)
    17c4:	4798      	blx	r3
    17c6:	23fe      	movs	r3, #254	; 0xfe
    17c8:	2200      	movs	r2, #0
    17ca:	059b      	lsls	r3, r3, #22
    17cc:	47b8      	blx	r7
    17ce:	4b1e      	ldr	r3, [pc, #120]	; (1848 <sampleTick+0x374>)
    17d0:	4798      	blx	r3
    17d2:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    17d4:	2302      	movs	r3, #2
    17d6:	5ee8      	ldrsh	r0, [r5, r3]
    17d8:	4b17      	ldr	r3, [pc, #92]	; (1838 <sampleTick+0x364>)
    17da:	4798      	blx	r3
    17dc:	23fe      	movs	r3, #254	; 0xfe
    17de:	2200      	movs	r2, #0
    17e0:	059b      	lsls	r3, r3, #22
    17e2:	47b8      	blx	r7
    17e4:	4b18      	ldr	r3, [pc, #96]	; (1848 <sampleTick+0x374>)
    17e6:	4798      	blx	r3
    17e8:	6660      	str	r0, [r4, #100]	; 0x64

    delay_us(800);
    17ea:	20c8      	movs	r0, #200	; 0xc8
    17ec:	4b19      	ldr	r3, [pc, #100]	; (1854 <sampleTick+0x380>)
    17ee:	0080      	lsls	r0, r0, #2
    17f0:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    17f2:	4b19      	ldr	r3, [pc, #100]	; (1858 <sampleTick+0x384>)
    17f4:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    17f6:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    17f8:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    17fa:	4b1b      	ldr	r3, [pc, #108]	; (1868 <sampleTick+0x394>)
    17fc:	0028      	movs	r0, r5
    17fe:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1800:	0028      	movs	r0, r5
    1802:	4b1a      	ldr	r3, [pc, #104]	; (186c <sampleTick+0x398>)
    1804:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1806:	4b1a      	ldr	r3, [pc, #104]	; (1870 <sampleTick+0x39c>)
    1808:	6a60      	ldr	r0, [r4, #36]	; 0x24
    180a:	4798      	blx	r3
    180c:	4a19      	ldr	r2, [pc, #100]	; (1874 <sampleTick+0x3a0>)
    180e:	4b1a      	ldr	r3, [pc, #104]	; (1878 <sampleTick+0x3a4>)
    1810:	4d0b      	ldr	r5, [pc, #44]	; (1840 <sampleTick+0x36c>)
    1812:	47a8      	blx	r5
    1814:	4b0c      	ldr	r3, [pc, #48]	; (1848 <sampleTick+0x374>)
    1816:	4798      	blx	r3
    1818:	62a0      	str	r0, [r4, #40]	; 0x28


}
    181a:	b007      	add	sp, #28
    181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	000010b1 	.word	0x000010b1
    1824:	0000358c 	.word	0x0000358c
    1828:	00000d5d 	.word	0x00000d5d
    182c:	00000296 	.word	0x00000296
    1830:	0000029a 	.word	0x0000029a
    1834:	fffff0c4 	.word	0xfffff0c4
    1838:	00002f55 	.word	0x00002f55
    183c:	02de00d2 	.word	0x02de00d2
    1840:	0000234d 	.word	0x0000234d
    1844:	bf8f8a09 	.word	0xbf8f8a09
    1848:	000030f1 	.word	0x000030f1
    184c:	41004400 	.word	0x41004400
    1850:	00000dc5 	.word	0x00000dc5
    1854:	00001035 	.word	0x00001035
    1858:	00000311 	.word	0x00000311
    185c:	41004494 	.word	0x41004494
    1860:	00001989 	.word	0x00001989
    1864:	41004498 	.word	0x41004498
    1868:	000003c5 	.word	0x000003c5
    186c:	000004b1 	.word	0x000004b1
    1870:	00002fd9 	.word	0x00002fd9
    1874:	e9f6a93f 	.word	0xe9f6a93f
    1878:	3fa0cc78 	.word	0x3fa0cc78

0000187c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1880:	2301      	movs	r3, #1
    1882:	1ca6      	adds	r6, r4, #2
    1884:	40b3      	lsls	r3, r6
    1886:	480d      	ldr	r0, [pc, #52]	; (18bc <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1888:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    188a:	6a01      	ldr	r1, [r0, #32]
    188c:	430b      	orrs	r3, r1
    188e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1890:	2d00      	cmp	r5, #0
    1892:	d003      	beq.n	189c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1894:	2107      	movs	r1, #7
    1896:	0028      	movs	r0, r5
    1898:	4b09      	ldr	r3, [pc, #36]	; (18c0 <sercomClockEnable+0x44>)
    189a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    189c:	22f0      	movs	r2, #240	; 0xf0
    189e:	2080      	movs	r0, #128	; 0x80
    18a0:	0229      	lsls	r1, r5, #8
    18a2:	0112      	lsls	r2, r2, #4
    18a4:	4011      	ands	r1, r2
    18a6:	01c0      	lsls	r0, r0, #7
    18a8:	4301      	orrs	r1, r0
    18aa:	0020      	movs	r0, r4
    18ac:	3014      	adds	r0, #20
    18ae:	223f      	movs	r2, #63	; 0x3f
    18b0:	0003      	movs	r3, r0
    18b2:	4013      	ands	r3, r2
    18b4:	4319      	orrs	r1, r3
    18b6:	4b03      	ldr	r3, [pc, #12]	; (18c4 <sercomClockEnable+0x48>)
    18b8:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    18ba:	bd70      	pop	{r4, r5, r6, pc}
    18bc:	40000400 	.word	0x40000400
    18c0:	00000fe5 	.word	0x00000fe5
    18c4:	40000c00 	.word	0x40000c00

000018c8 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <sercomReset+0x14>)
    18ca:	0280      	lsls	r0, r0, #10
    18cc:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    18ce:	2301      	movs	r3, #1
    18d0:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    18d2:	6802      	ldr	r2, [r0, #0]
    18d4:	421a      	tst	r2, r3
    18d6:	d1fc      	bne.n	18d2 <sercomReset+0xa>
}
    18d8:	4770      	bx	lr
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	42000800 	.word	0x42000800

000018e0 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    18e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18e2:	0004      	movs	r4, r0
    18e4:	9300      	str	r3, [sp, #0]
    18e6:	ab08      	add	r3, sp, #32
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	000e      	movs	r6, r1
    18ec:	9301      	str	r3, [sp, #4]
    18ee:	ab09      	add	r3, sp, #36	; 0x24
    18f0:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    18f2:	4b12      	ldr	r3, [pc, #72]	; (193c <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    18f4:	0015      	movs	r5, r2

    sercomReset(id);
    18f6:	4798      	blx	r3
    18f8:	4b11      	ldr	r3, [pc, #68]	; (1940 <sercomSpiMasterInit+0x60>)
    18fa:	02a4      	lsls	r4, r4, #10
    18fc:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    18fe:	2380      	movs	r3, #128	; 0x80
    1900:	029b      	lsls	r3, r3, #10
    1902:	6063      	str	r3, [r4, #4]
    1904:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1906:	21c0      	movs	r1, #192	; 0xc0
    1908:	042d      	lsls	r5, r5, #16
    190a:	029b      	lsls	r3, r3, #10
    190c:	402b      	ands	r3, r5
    190e:	250e      	movs	r5, #14
    1910:	0536      	lsls	r6, r6, #20
    1912:	0389      	lsls	r1, r1, #14
    1914:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1916:	9e00      	ldr	r6, [sp, #0]
    1918:	431d      	orrs	r5, r3
    191a:	1e73      	subs	r3, r6, #1
    191c:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    191e:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1920:	0772      	lsls	r2, r6, #29
    1922:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1924:	432a      	orrs	r2, r5
    1926:	1e59      	subs	r1, r3, #1
    1928:	418b      	sbcs	r3, r1
    192a:	0016      	movs	r6, r2
    192c:	071b      	lsls	r3, r3, #28
    192e:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1930:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1932:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1934:	69e3      	ldr	r3, [r4, #28]
    1936:	075b      	lsls	r3, r3, #29
    1938:	d4fc      	bmi.n	1934 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    193a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    193c:	000018c9 	.word	0x000018c9
    1940:	42000800 	.word	0x42000800

00001944 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1946:	0007      	movs	r7, r0
    1948:	001e      	movs	r6, r3
    sercomReset(id);
    194a:	4b0c      	ldr	r3, [pc, #48]	; (197c <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    194c:	000d      	movs	r5, r1
    194e:	0014      	movs	r4, r2
    sercomReset(id);
    1950:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1952:	4b0b      	ldr	r3, [pc, #44]	; (1980 <sercomUartInit+0x3c>)
    1954:	02b8      	lsls	r0, r7, #10
    1956:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1958:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    195a:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    195c:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    195e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1960:	0529      	lsls	r1, r5, #20
    1962:	0392      	lsls	r2, r2, #14
    1964:	4011      	ands	r1, r2
    1966:	4a07      	ldr	r2, [pc, #28]	; (1984 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1968:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    196a:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    196c:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    196e:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1970:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1972:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1974:	4023      	ands	r3, r4
    1976:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1978:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    197c:	000018c9 	.word	0x000018c9
    1980:	42000800 	.word	0x42000800
    1984:	40000006 	.word	0x40000006

00001988 <spiDataTransfer>:
    1988:	4b04      	ldr	r3, [pc, #16]	; (199c <spiDataTransfer+0x14>)
    198a:	0280      	lsls	r0, r0, #10
    198c:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    198e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1990:	7e03      	ldrb	r3, [r0, #24]
    1992:	075b      	lsls	r3, r3, #29
    1994:	d5fc      	bpl.n	1990 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1996:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1998:	b2c0      	uxtb	r0, r0
}
    199a:	4770      	bx	lr
    199c:	42000800 	.word	0x42000800

000019a0 <usartDataOut>:
    19a0:	4b04      	ldr	r3, [pc, #16]	; (19b4 <usartDataOut+0x14>)
    19a2:	0280      	lsls	r0, r0, #10
    19a4:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    19a6:	b289      	uxth	r1, r1
    19a8:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    19aa:	7e03      	ldrb	r3, [r0, #24]
    19ac:	07db      	lsls	r3, r3, #31
    19ae:	d5fc      	bpl.n	19aa <usartDataOut+0xa>
}
    19b0:	4770      	bx	lr
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	42000800 	.word	0x42000800

000019b8 <usartDataIn>:
    19b8:	4b02      	ldr	r3, [pc, #8]	; (19c4 <usartDataIn+0xc>)
    19ba:	0280      	lsls	r0, r0, #10
    19bc:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    19be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    19c0:	b2c0      	uxtb	r0, r0
    19c2:	4770      	bx	lr
    19c4:	42000800 	.word	0x42000800

000019c8 <__aeabi_cdrcmple>:
    19c8:	4684      	mov	ip, r0
    19ca:	1c10      	adds	r0, r2, #0
    19cc:	4662      	mov	r2, ip
    19ce:	468c      	mov	ip, r1
    19d0:	1c19      	adds	r1, r3, #0
    19d2:	4663      	mov	r3, ip
    19d4:	e000      	b.n	19d8 <__aeabi_cdcmpeq>
    19d6:	46c0      	nop			; (mov r8, r8)

000019d8 <__aeabi_cdcmpeq>:
    19d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    19da:	f000 fc4d 	bl	2278 <__ledf2>
    19de:	2800      	cmp	r0, #0
    19e0:	d401      	bmi.n	19e6 <__aeabi_cdcmpeq+0xe>
    19e2:	2100      	movs	r1, #0
    19e4:	42c8      	cmn	r0, r1
    19e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000019e8 <__aeabi_dcmpeq>:
    19e8:	b510      	push	{r4, lr}
    19ea:	f000 fba1 	bl	2130 <__eqdf2>
    19ee:	4240      	negs	r0, r0
    19f0:	3001      	adds	r0, #1
    19f2:	bd10      	pop	{r4, pc}

000019f4 <__aeabi_dcmplt>:
    19f4:	b510      	push	{r4, lr}
    19f6:	f000 fc3f 	bl	2278 <__ledf2>
    19fa:	2800      	cmp	r0, #0
    19fc:	db01      	blt.n	1a02 <__aeabi_dcmplt+0xe>
    19fe:	2000      	movs	r0, #0
    1a00:	bd10      	pop	{r4, pc}
    1a02:	2001      	movs	r0, #1
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)

00001a08 <__aeabi_dcmple>:
    1a08:	b510      	push	{r4, lr}
    1a0a:	f000 fc35 	bl	2278 <__ledf2>
    1a0e:	2800      	cmp	r0, #0
    1a10:	dd01      	ble.n	1a16 <__aeabi_dcmple+0xe>
    1a12:	2000      	movs	r0, #0
    1a14:	bd10      	pop	{r4, pc}
    1a16:	2001      	movs	r0, #1
    1a18:	bd10      	pop	{r4, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)

00001a1c <__aeabi_dcmpgt>:
    1a1c:	b510      	push	{r4, lr}
    1a1e:	f000 fbc7 	bl	21b0 <__gedf2>
    1a22:	2800      	cmp	r0, #0
    1a24:	dc01      	bgt.n	1a2a <__aeabi_dcmpgt+0xe>
    1a26:	2000      	movs	r0, #0
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	2001      	movs	r0, #1
    1a2c:	bd10      	pop	{r4, pc}
    1a2e:	46c0      	nop			; (mov r8, r8)

00001a30 <__aeabi_dcmpge>:
    1a30:	b510      	push	{r4, lr}
    1a32:	f000 fbbd 	bl	21b0 <__gedf2>
    1a36:	2800      	cmp	r0, #0
    1a38:	da01      	bge.n	1a3e <__aeabi_dcmpge+0xe>
    1a3a:	2000      	movs	r0, #0
    1a3c:	bd10      	pop	{r4, pc}
    1a3e:	2001      	movs	r0, #1
    1a40:	bd10      	pop	{r4, pc}
    1a42:	46c0      	nop			; (mov r8, r8)

00001a44 <__aeabi_lmul>:
    1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a46:	464f      	mov	r7, r9
    1a48:	4646      	mov	r6, r8
    1a4a:	b4c0      	push	{r6, r7}
    1a4c:	0416      	lsls	r6, r2, #16
    1a4e:	0c36      	lsrs	r6, r6, #16
    1a50:	4699      	mov	r9, r3
    1a52:	0033      	movs	r3, r6
    1a54:	0405      	lsls	r5, r0, #16
    1a56:	0c2c      	lsrs	r4, r5, #16
    1a58:	0c07      	lsrs	r7, r0, #16
    1a5a:	0c15      	lsrs	r5, r2, #16
    1a5c:	4363      	muls	r3, r4
    1a5e:	437e      	muls	r6, r7
    1a60:	436f      	muls	r7, r5
    1a62:	4365      	muls	r5, r4
    1a64:	0c1c      	lsrs	r4, r3, #16
    1a66:	19ad      	adds	r5, r5, r6
    1a68:	1964      	adds	r4, r4, r5
    1a6a:	469c      	mov	ip, r3
    1a6c:	42a6      	cmp	r6, r4
    1a6e:	d903      	bls.n	1a78 <__aeabi_lmul+0x34>
    1a70:	2380      	movs	r3, #128	; 0x80
    1a72:	025b      	lsls	r3, r3, #9
    1a74:	4698      	mov	r8, r3
    1a76:	4447      	add	r7, r8
    1a78:	4663      	mov	r3, ip
    1a7a:	0c25      	lsrs	r5, r4, #16
    1a7c:	19ef      	adds	r7, r5, r7
    1a7e:	041d      	lsls	r5, r3, #16
    1a80:	464b      	mov	r3, r9
    1a82:	434a      	muls	r2, r1
    1a84:	4343      	muls	r3, r0
    1a86:	0c2d      	lsrs	r5, r5, #16
    1a88:	0424      	lsls	r4, r4, #16
    1a8a:	1964      	adds	r4, r4, r5
    1a8c:	1899      	adds	r1, r3, r2
    1a8e:	19c9      	adds	r1, r1, r7
    1a90:	0020      	movs	r0, r4
    1a92:	bc0c      	pop	{r2, r3}
    1a94:	4690      	mov	r8, r2
    1a96:	4699      	mov	r9, r3
    1a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)

00001a9c <__aeabi_d2uiz>:
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	2200      	movs	r2, #0
    1aa0:	4b0c      	ldr	r3, [pc, #48]	; (1ad4 <__aeabi_d2uiz+0x38>)
    1aa2:	0004      	movs	r4, r0
    1aa4:	000d      	movs	r5, r1
    1aa6:	f7ff ffc3 	bl	1a30 <__aeabi_dcmpge>
    1aaa:	2800      	cmp	r0, #0
    1aac:	d104      	bne.n	1ab8 <__aeabi_d2uiz+0x1c>
    1aae:	0020      	movs	r0, r4
    1ab0:	0029      	movs	r1, r5
    1ab2:	f001 fa19 	bl	2ee8 <__aeabi_d2iz>
    1ab6:	bd70      	pop	{r4, r5, r6, pc}
    1ab8:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <__aeabi_d2uiz+0x38>)
    1aba:	2200      	movs	r2, #0
    1abc:	0020      	movs	r0, r4
    1abe:	0029      	movs	r1, r5
    1ac0:	f000 febe 	bl	2840 <__aeabi_dsub>
    1ac4:	f001 fa10 	bl	2ee8 <__aeabi_d2iz>
    1ac8:	2380      	movs	r3, #128	; 0x80
    1aca:	061b      	lsls	r3, r3, #24
    1acc:	469c      	mov	ip, r3
    1ace:	4460      	add	r0, ip
    1ad0:	e7f1      	b.n	1ab6 <__aeabi_d2uiz+0x1a>
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	41e00000 	.word	0x41e00000

00001ad8 <__aeabi_dadd>:
    1ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ada:	4656      	mov	r6, sl
    1adc:	465f      	mov	r7, fp
    1ade:	464d      	mov	r5, r9
    1ae0:	4644      	mov	r4, r8
    1ae2:	b4f0      	push	{r4, r5, r6, r7}
    1ae4:	000f      	movs	r7, r1
    1ae6:	0ffd      	lsrs	r5, r7, #31
    1ae8:	46aa      	mov	sl, r5
    1aea:	0309      	lsls	r1, r1, #12
    1aec:	007c      	lsls	r4, r7, #1
    1aee:	002e      	movs	r6, r5
    1af0:	005f      	lsls	r7, r3, #1
    1af2:	0f45      	lsrs	r5, r0, #29
    1af4:	0a49      	lsrs	r1, r1, #9
    1af6:	0d7f      	lsrs	r7, r7, #21
    1af8:	4329      	orrs	r1, r5
    1afa:	00c5      	lsls	r5, r0, #3
    1afc:	0318      	lsls	r0, r3, #12
    1afe:	46bc      	mov	ip, r7
    1b00:	0a40      	lsrs	r0, r0, #9
    1b02:	0f57      	lsrs	r7, r2, #29
    1b04:	0d64      	lsrs	r4, r4, #21
    1b06:	0fdb      	lsrs	r3, r3, #31
    1b08:	4338      	orrs	r0, r7
    1b0a:	00d2      	lsls	r2, r2, #3
    1b0c:	459a      	cmp	sl, r3
    1b0e:	d100      	bne.n	1b12 <__aeabi_dadd+0x3a>
    1b10:	e0aa      	b.n	1c68 <__aeabi_dadd+0x190>
    1b12:	4666      	mov	r6, ip
    1b14:	1ba6      	subs	r6, r4, r6
    1b16:	2e00      	cmp	r6, #0
    1b18:	dc00      	bgt.n	1b1c <__aeabi_dadd+0x44>
    1b1a:	e0ff      	b.n	1d1c <__aeabi_dadd+0x244>
    1b1c:	4663      	mov	r3, ip
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d139      	bne.n	1b96 <__aeabi_dadd+0xbe>
    1b22:	0003      	movs	r3, r0
    1b24:	4313      	orrs	r3, r2
    1b26:	d000      	beq.n	1b2a <__aeabi_dadd+0x52>
    1b28:	e0d9      	b.n	1cde <__aeabi_dadd+0x206>
    1b2a:	076b      	lsls	r3, r5, #29
    1b2c:	d009      	beq.n	1b42 <__aeabi_dadd+0x6a>
    1b2e:	230f      	movs	r3, #15
    1b30:	402b      	ands	r3, r5
    1b32:	2b04      	cmp	r3, #4
    1b34:	d005      	beq.n	1b42 <__aeabi_dadd+0x6a>
    1b36:	1d2b      	adds	r3, r5, #4
    1b38:	42ab      	cmp	r3, r5
    1b3a:	41ad      	sbcs	r5, r5
    1b3c:	426d      	negs	r5, r5
    1b3e:	1949      	adds	r1, r1, r5
    1b40:	001d      	movs	r5, r3
    1b42:	020b      	lsls	r3, r1, #8
    1b44:	d400      	bmi.n	1b48 <__aeabi_dadd+0x70>
    1b46:	e082      	b.n	1c4e <__aeabi_dadd+0x176>
    1b48:	4bca      	ldr	r3, [pc, #808]	; (1e74 <__aeabi_dadd+0x39c>)
    1b4a:	3401      	adds	r4, #1
    1b4c:	429c      	cmp	r4, r3
    1b4e:	d100      	bne.n	1b52 <__aeabi_dadd+0x7a>
    1b50:	e0fe      	b.n	1d50 <__aeabi_dadd+0x278>
    1b52:	000a      	movs	r2, r1
    1b54:	4656      	mov	r6, sl
    1b56:	4bc8      	ldr	r3, [pc, #800]	; (1e78 <__aeabi_dadd+0x3a0>)
    1b58:	08ed      	lsrs	r5, r5, #3
    1b5a:	401a      	ands	r2, r3
    1b5c:	0750      	lsls	r0, r2, #29
    1b5e:	0564      	lsls	r4, r4, #21
    1b60:	0252      	lsls	r2, r2, #9
    1b62:	4305      	orrs	r5, r0
    1b64:	0b12      	lsrs	r2, r2, #12
    1b66:	0d64      	lsrs	r4, r4, #21
    1b68:	2100      	movs	r1, #0
    1b6a:	0312      	lsls	r2, r2, #12
    1b6c:	0d0b      	lsrs	r3, r1, #20
    1b6e:	051b      	lsls	r3, r3, #20
    1b70:	0564      	lsls	r4, r4, #21
    1b72:	0b12      	lsrs	r2, r2, #12
    1b74:	431a      	orrs	r2, r3
    1b76:	0863      	lsrs	r3, r4, #1
    1b78:	4cc0      	ldr	r4, [pc, #768]	; (1e7c <__aeabi_dadd+0x3a4>)
    1b7a:	07f6      	lsls	r6, r6, #31
    1b7c:	4014      	ands	r4, r2
    1b7e:	431c      	orrs	r4, r3
    1b80:	0064      	lsls	r4, r4, #1
    1b82:	0864      	lsrs	r4, r4, #1
    1b84:	4334      	orrs	r4, r6
    1b86:	0028      	movs	r0, r5
    1b88:	0021      	movs	r1, r4
    1b8a:	bc3c      	pop	{r2, r3, r4, r5}
    1b8c:	4690      	mov	r8, r2
    1b8e:	4699      	mov	r9, r3
    1b90:	46a2      	mov	sl, r4
    1b92:	46ab      	mov	fp, r5
    1b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b96:	4bb7      	ldr	r3, [pc, #732]	; (1e74 <__aeabi_dadd+0x39c>)
    1b98:	429c      	cmp	r4, r3
    1b9a:	d0c6      	beq.n	1b2a <__aeabi_dadd+0x52>
    1b9c:	2380      	movs	r3, #128	; 0x80
    1b9e:	041b      	lsls	r3, r3, #16
    1ba0:	4318      	orrs	r0, r3
    1ba2:	2e38      	cmp	r6, #56	; 0x38
    1ba4:	dd00      	ble.n	1ba8 <__aeabi_dadd+0xd0>
    1ba6:	e0eb      	b.n	1d80 <__aeabi_dadd+0x2a8>
    1ba8:	2e1f      	cmp	r6, #31
    1baa:	dd00      	ble.n	1bae <__aeabi_dadd+0xd6>
    1bac:	e11e      	b.n	1dec <__aeabi_dadd+0x314>
    1bae:	2320      	movs	r3, #32
    1bb0:	1b9b      	subs	r3, r3, r6
    1bb2:	469c      	mov	ip, r3
    1bb4:	0003      	movs	r3, r0
    1bb6:	4667      	mov	r7, ip
    1bb8:	40bb      	lsls	r3, r7
    1bba:	4698      	mov	r8, r3
    1bbc:	0013      	movs	r3, r2
    1bbe:	4647      	mov	r7, r8
    1bc0:	40f3      	lsrs	r3, r6
    1bc2:	433b      	orrs	r3, r7
    1bc4:	4667      	mov	r7, ip
    1bc6:	40ba      	lsls	r2, r7
    1bc8:	1e57      	subs	r7, r2, #1
    1bca:	41ba      	sbcs	r2, r7
    1bcc:	4313      	orrs	r3, r2
    1bce:	0002      	movs	r2, r0
    1bd0:	40f2      	lsrs	r2, r6
    1bd2:	1aeb      	subs	r3, r5, r3
    1bd4:	429d      	cmp	r5, r3
    1bd6:	41b6      	sbcs	r6, r6
    1bd8:	001d      	movs	r5, r3
    1bda:	1a8a      	subs	r2, r1, r2
    1bdc:	4276      	negs	r6, r6
    1bde:	1b91      	subs	r1, r2, r6
    1be0:	020b      	lsls	r3, r1, #8
    1be2:	d531      	bpl.n	1c48 <__aeabi_dadd+0x170>
    1be4:	024a      	lsls	r2, r1, #9
    1be6:	0a56      	lsrs	r6, r2, #9
    1be8:	2e00      	cmp	r6, #0
    1bea:	d100      	bne.n	1bee <__aeabi_dadd+0x116>
    1bec:	e0b4      	b.n	1d58 <__aeabi_dadd+0x280>
    1bee:	0030      	movs	r0, r6
    1bf0:	f001 fb0a 	bl	3208 <__clzsi2>
    1bf4:	0003      	movs	r3, r0
    1bf6:	3b08      	subs	r3, #8
    1bf8:	2b1f      	cmp	r3, #31
    1bfa:	dd00      	ble.n	1bfe <__aeabi_dadd+0x126>
    1bfc:	e0b5      	b.n	1d6a <__aeabi_dadd+0x292>
    1bfe:	2220      	movs	r2, #32
    1c00:	0029      	movs	r1, r5
    1c02:	1ad2      	subs	r2, r2, r3
    1c04:	40d1      	lsrs	r1, r2
    1c06:	409e      	lsls	r6, r3
    1c08:	000a      	movs	r2, r1
    1c0a:	409d      	lsls	r5, r3
    1c0c:	4332      	orrs	r2, r6
    1c0e:	429c      	cmp	r4, r3
    1c10:	dd00      	ble.n	1c14 <__aeabi_dadd+0x13c>
    1c12:	e0b1      	b.n	1d78 <__aeabi_dadd+0x2a0>
    1c14:	1b1c      	subs	r4, r3, r4
    1c16:	1c63      	adds	r3, r4, #1
    1c18:	2b1f      	cmp	r3, #31
    1c1a:	dd00      	ble.n	1c1e <__aeabi_dadd+0x146>
    1c1c:	e0d5      	b.n	1dca <__aeabi_dadd+0x2f2>
    1c1e:	2120      	movs	r1, #32
    1c20:	0014      	movs	r4, r2
    1c22:	0028      	movs	r0, r5
    1c24:	1ac9      	subs	r1, r1, r3
    1c26:	408c      	lsls	r4, r1
    1c28:	40d8      	lsrs	r0, r3
    1c2a:	408d      	lsls	r5, r1
    1c2c:	4304      	orrs	r4, r0
    1c2e:	40da      	lsrs	r2, r3
    1c30:	1e68      	subs	r0, r5, #1
    1c32:	4185      	sbcs	r5, r0
    1c34:	0011      	movs	r1, r2
    1c36:	4325      	orrs	r5, r4
    1c38:	2400      	movs	r4, #0
    1c3a:	e776      	b.n	1b2a <__aeabi_dadd+0x52>
    1c3c:	4641      	mov	r1, r8
    1c3e:	4331      	orrs	r1, r6
    1c40:	d100      	bne.n	1c44 <__aeabi_dadd+0x16c>
    1c42:	e234      	b.n	20ae <STACK_SIZE+0xae>
    1c44:	0031      	movs	r1, r6
    1c46:	4645      	mov	r5, r8
    1c48:	076b      	lsls	r3, r5, #29
    1c4a:	d000      	beq.n	1c4e <__aeabi_dadd+0x176>
    1c4c:	e76f      	b.n	1b2e <__aeabi_dadd+0x56>
    1c4e:	4656      	mov	r6, sl
    1c50:	0748      	lsls	r0, r1, #29
    1c52:	08ed      	lsrs	r5, r5, #3
    1c54:	08c9      	lsrs	r1, r1, #3
    1c56:	4305      	orrs	r5, r0
    1c58:	4b86      	ldr	r3, [pc, #536]	; (1e74 <__aeabi_dadd+0x39c>)
    1c5a:	429c      	cmp	r4, r3
    1c5c:	d035      	beq.n	1cca <__aeabi_dadd+0x1f2>
    1c5e:	030a      	lsls	r2, r1, #12
    1c60:	0564      	lsls	r4, r4, #21
    1c62:	0b12      	lsrs	r2, r2, #12
    1c64:	0d64      	lsrs	r4, r4, #21
    1c66:	e77f      	b.n	1b68 <__aeabi_dadd+0x90>
    1c68:	4663      	mov	r3, ip
    1c6a:	1ae3      	subs	r3, r4, r3
    1c6c:	469b      	mov	fp, r3
    1c6e:	2b00      	cmp	r3, #0
    1c70:	dc00      	bgt.n	1c74 <__aeabi_dadd+0x19c>
    1c72:	e08b      	b.n	1d8c <__aeabi_dadd+0x2b4>
    1c74:	4667      	mov	r7, ip
    1c76:	2f00      	cmp	r7, #0
    1c78:	d03c      	beq.n	1cf4 <__aeabi_dadd+0x21c>
    1c7a:	4f7e      	ldr	r7, [pc, #504]	; (1e74 <__aeabi_dadd+0x39c>)
    1c7c:	42bc      	cmp	r4, r7
    1c7e:	d100      	bne.n	1c82 <__aeabi_dadd+0x1aa>
    1c80:	e753      	b.n	1b2a <__aeabi_dadd+0x52>
    1c82:	2780      	movs	r7, #128	; 0x80
    1c84:	043f      	lsls	r7, r7, #16
    1c86:	4338      	orrs	r0, r7
    1c88:	465b      	mov	r3, fp
    1c8a:	2b38      	cmp	r3, #56	; 0x38
    1c8c:	dc00      	bgt.n	1c90 <__aeabi_dadd+0x1b8>
    1c8e:	e0f7      	b.n	1e80 <__aeabi_dadd+0x3a8>
    1c90:	4302      	orrs	r2, r0
    1c92:	1e50      	subs	r0, r2, #1
    1c94:	4182      	sbcs	r2, r0
    1c96:	2000      	movs	r0, #0
    1c98:	b2d2      	uxtb	r2, r2
    1c9a:	1953      	adds	r3, r2, r5
    1c9c:	1842      	adds	r2, r0, r1
    1c9e:	42ab      	cmp	r3, r5
    1ca0:	4189      	sbcs	r1, r1
    1ca2:	001d      	movs	r5, r3
    1ca4:	4249      	negs	r1, r1
    1ca6:	1889      	adds	r1, r1, r2
    1ca8:	020b      	lsls	r3, r1, #8
    1caa:	d5cd      	bpl.n	1c48 <__aeabi_dadd+0x170>
    1cac:	4b71      	ldr	r3, [pc, #452]	; (1e74 <__aeabi_dadd+0x39c>)
    1cae:	3401      	adds	r4, #1
    1cb0:	429c      	cmp	r4, r3
    1cb2:	d100      	bne.n	1cb6 <__aeabi_dadd+0x1de>
    1cb4:	e13d      	b.n	1f32 <__aeabi_dadd+0x45a>
    1cb6:	2001      	movs	r0, #1
    1cb8:	4a6f      	ldr	r2, [pc, #444]	; (1e78 <__aeabi_dadd+0x3a0>)
    1cba:	086b      	lsrs	r3, r5, #1
    1cbc:	400a      	ands	r2, r1
    1cbe:	4028      	ands	r0, r5
    1cc0:	4318      	orrs	r0, r3
    1cc2:	07d5      	lsls	r5, r2, #31
    1cc4:	4305      	orrs	r5, r0
    1cc6:	0851      	lsrs	r1, r2, #1
    1cc8:	e72f      	b.n	1b2a <__aeabi_dadd+0x52>
    1cca:	002b      	movs	r3, r5
    1ccc:	430b      	orrs	r3, r1
    1cce:	d100      	bne.n	1cd2 <__aeabi_dadd+0x1fa>
    1cd0:	e1cb      	b.n	206a <STACK_SIZE+0x6a>
    1cd2:	2380      	movs	r3, #128	; 0x80
    1cd4:	031b      	lsls	r3, r3, #12
    1cd6:	430b      	orrs	r3, r1
    1cd8:	031a      	lsls	r2, r3, #12
    1cda:	0b12      	lsrs	r2, r2, #12
    1cdc:	e744      	b.n	1b68 <__aeabi_dadd+0x90>
    1cde:	3e01      	subs	r6, #1
    1ce0:	2e00      	cmp	r6, #0
    1ce2:	d16d      	bne.n	1dc0 <__aeabi_dadd+0x2e8>
    1ce4:	1aae      	subs	r6, r5, r2
    1ce6:	42b5      	cmp	r5, r6
    1ce8:	419b      	sbcs	r3, r3
    1cea:	1a09      	subs	r1, r1, r0
    1cec:	425b      	negs	r3, r3
    1cee:	1ac9      	subs	r1, r1, r3
    1cf0:	0035      	movs	r5, r6
    1cf2:	e775      	b.n	1be0 <__aeabi_dadd+0x108>
    1cf4:	0007      	movs	r7, r0
    1cf6:	4317      	orrs	r7, r2
    1cf8:	d100      	bne.n	1cfc <__aeabi_dadd+0x224>
    1cfa:	e716      	b.n	1b2a <__aeabi_dadd+0x52>
    1cfc:	2301      	movs	r3, #1
    1cfe:	425b      	negs	r3, r3
    1d00:	469c      	mov	ip, r3
    1d02:	44e3      	add	fp, ip
    1d04:	465b      	mov	r3, fp
    1d06:	2b00      	cmp	r3, #0
    1d08:	d000      	beq.n	1d0c <__aeabi_dadd+0x234>
    1d0a:	e0e0      	b.n	1ece <__aeabi_dadd+0x3f6>
    1d0c:	18aa      	adds	r2, r5, r2
    1d0e:	42aa      	cmp	r2, r5
    1d10:	419b      	sbcs	r3, r3
    1d12:	1809      	adds	r1, r1, r0
    1d14:	425b      	negs	r3, r3
    1d16:	1859      	adds	r1, r3, r1
    1d18:	0015      	movs	r5, r2
    1d1a:	e7c5      	b.n	1ca8 <__aeabi_dadd+0x1d0>
    1d1c:	2e00      	cmp	r6, #0
    1d1e:	d175      	bne.n	1e0c <__aeabi_dadd+0x334>
    1d20:	1c66      	adds	r6, r4, #1
    1d22:	0576      	lsls	r6, r6, #21
    1d24:	0d76      	lsrs	r6, r6, #21
    1d26:	2e01      	cmp	r6, #1
    1d28:	dc00      	bgt.n	1d2c <__aeabi_dadd+0x254>
    1d2a:	e0f3      	b.n	1f14 <__aeabi_dadd+0x43c>
    1d2c:	1aae      	subs	r6, r5, r2
    1d2e:	46b0      	mov	r8, r6
    1d30:	4545      	cmp	r5, r8
    1d32:	41bf      	sbcs	r7, r7
    1d34:	1a0e      	subs	r6, r1, r0
    1d36:	427f      	negs	r7, r7
    1d38:	1bf6      	subs	r6, r6, r7
    1d3a:	0237      	lsls	r7, r6, #8
    1d3c:	d400      	bmi.n	1d40 <__aeabi_dadd+0x268>
    1d3e:	e08f      	b.n	1e60 <__aeabi_dadd+0x388>
    1d40:	1b55      	subs	r5, r2, r5
    1d42:	42aa      	cmp	r2, r5
    1d44:	41b6      	sbcs	r6, r6
    1d46:	1a41      	subs	r1, r0, r1
    1d48:	4276      	negs	r6, r6
    1d4a:	1b8e      	subs	r6, r1, r6
    1d4c:	469a      	mov	sl, r3
    1d4e:	e74b      	b.n	1be8 <__aeabi_dadd+0x110>
    1d50:	4656      	mov	r6, sl
    1d52:	2200      	movs	r2, #0
    1d54:	2500      	movs	r5, #0
    1d56:	e707      	b.n	1b68 <__aeabi_dadd+0x90>
    1d58:	0028      	movs	r0, r5
    1d5a:	f001 fa55 	bl	3208 <__clzsi2>
    1d5e:	3020      	adds	r0, #32
    1d60:	0003      	movs	r3, r0
    1d62:	3b08      	subs	r3, #8
    1d64:	2b1f      	cmp	r3, #31
    1d66:	dc00      	bgt.n	1d6a <__aeabi_dadd+0x292>
    1d68:	e749      	b.n	1bfe <__aeabi_dadd+0x126>
    1d6a:	002a      	movs	r2, r5
    1d6c:	3828      	subs	r0, #40	; 0x28
    1d6e:	4082      	lsls	r2, r0
    1d70:	2500      	movs	r5, #0
    1d72:	429c      	cmp	r4, r3
    1d74:	dc00      	bgt.n	1d78 <__aeabi_dadd+0x2a0>
    1d76:	e74d      	b.n	1c14 <__aeabi_dadd+0x13c>
    1d78:	493f      	ldr	r1, [pc, #252]	; (1e78 <__aeabi_dadd+0x3a0>)
    1d7a:	1ae4      	subs	r4, r4, r3
    1d7c:	4011      	ands	r1, r2
    1d7e:	e6d4      	b.n	1b2a <__aeabi_dadd+0x52>
    1d80:	4302      	orrs	r2, r0
    1d82:	1e50      	subs	r0, r2, #1
    1d84:	4182      	sbcs	r2, r0
    1d86:	b2d3      	uxtb	r3, r2
    1d88:	2200      	movs	r2, #0
    1d8a:	e722      	b.n	1bd2 <__aeabi_dadd+0xfa>
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d000      	beq.n	1d92 <__aeabi_dadd+0x2ba>
    1d90:	e0f3      	b.n	1f7a <__aeabi_dadd+0x4a2>
    1d92:	1c63      	adds	r3, r4, #1
    1d94:	469c      	mov	ip, r3
    1d96:	055b      	lsls	r3, r3, #21
    1d98:	0d5b      	lsrs	r3, r3, #21
    1d9a:	2b01      	cmp	r3, #1
    1d9c:	dc00      	bgt.n	1da0 <__aeabi_dadd+0x2c8>
    1d9e:	e09f      	b.n	1ee0 <__aeabi_dadd+0x408>
    1da0:	4b34      	ldr	r3, [pc, #208]	; (1e74 <__aeabi_dadd+0x39c>)
    1da2:	459c      	cmp	ip, r3
    1da4:	d100      	bne.n	1da8 <__aeabi_dadd+0x2d0>
    1da6:	e0c3      	b.n	1f30 <__aeabi_dadd+0x458>
    1da8:	18aa      	adds	r2, r5, r2
    1daa:	1809      	adds	r1, r1, r0
    1dac:	42aa      	cmp	r2, r5
    1dae:	4180      	sbcs	r0, r0
    1db0:	4240      	negs	r0, r0
    1db2:	1841      	adds	r1, r0, r1
    1db4:	07cd      	lsls	r5, r1, #31
    1db6:	0852      	lsrs	r2, r2, #1
    1db8:	4315      	orrs	r5, r2
    1dba:	0849      	lsrs	r1, r1, #1
    1dbc:	4664      	mov	r4, ip
    1dbe:	e6b4      	b.n	1b2a <__aeabi_dadd+0x52>
    1dc0:	4b2c      	ldr	r3, [pc, #176]	; (1e74 <__aeabi_dadd+0x39c>)
    1dc2:	429c      	cmp	r4, r3
    1dc4:	d000      	beq.n	1dc8 <__aeabi_dadd+0x2f0>
    1dc6:	e6ec      	b.n	1ba2 <__aeabi_dadd+0xca>
    1dc8:	e6af      	b.n	1b2a <__aeabi_dadd+0x52>
    1dca:	0011      	movs	r1, r2
    1dcc:	3c1f      	subs	r4, #31
    1dce:	40e1      	lsrs	r1, r4
    1dd0:	000c      	movs	r4, r1
    1dd2:	2b20      	cmp	r3, #32
    1dd4:	d100      	bne.n	1dd8 <__aeabi_dadd+0x300>
    1dd6:	e07f      	b.n	1ed8 <__aeabi_dadd+0x400>
    1dd8:	2140      	movs	r1, #64	; 0x40
    1dda:	1acb      	subs	r3, r1, r3
    1ddc:	409a      	lsls	r2, r3
    1dde:	4315      	orrs	r5, r2
    1de0:	1e6a      	subs	r2, r5, #1
    1de2:	4195      	sbcs	r5, r2
    1de4:	2100      	movs	r1, #0
    1de6:	4325      	orrs	r5, r4
    1de8:	2400      	movs	r4, #0
    1dea:	e72d      	b.n	1c48 <__aeabi_dadd+0x170>
    1dec:	0033      	movs	r3, r6
    1dee:	0007      	movs	r7, r0
    1df0:	3b20      	subs	r3, #32
    1df2:	40df      	lsrs	r7, r3
    1df4:	003b      	movs	r3, r7
    1df6:	2e20      	cmp	r6, #32
    1df8:	d070      	beq.n	1edc <__aeabi_dadd+0x404>
    1dfa:	2740      	movs	r7, #64	; 0x40
    1dfc:	1bbe      	subs	r6, r7, r6
    1dfe:	40b0      	lsls	r0, r6
    1e00:	4302      	orrs	r2, r0
    1e02:	1e50      	subs	r0, r2, #1
    1e04:	4182      	sbcs	r2, r0
    1e06:	4313      	orrs	r3, r2
    1e08:	2200      	movs	r2, #0
    1e0a:	e6e2      	b.n	1bd2 <__aeabi_dadd+0xfa>
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	d04f      	beq.n	1eb0 <__aeabi_dadd+0x3d8>
    1e10:	4c18      	ldr	r4, [pc, #96]	; (1e74 <__aeabi_dadd+0x39c>)
    1e12:	45a4      	cmp	ip, r4
    1e14:	d100      	bne.n	1e18 <__aeabi_dadd+0x340>
    1e16:	e0ab      	b.n	1f70 <__aeabi_dadd+0x498>
    1e18:	2480      	movs	r4, #128	; 0x80
    1e1a:	0424      	lsls	r4, r4, #16
    1e1c:	4276      	negs	r6, r6
    1e1e:	4321      	orrs	r1, r4
    1e20:	2e38      	cmp	r6, #56	; 0x38
    1e22:	dd00      	ble.n	1e26 <__aeabi_dadd+0x34e>
    1e24:	e0df      	b.n	1fe6 <__aeabi_dadd+0x50e>
    1e26:	2e1f      	cmp	r6, #31
    1e28:	dd00      	ble.n	1e2c <__aeabi_dadd+0x354>
    1e2a:	e143      	b.n	20b4 <STACK_SIZE+0xb4>
    1e2c:	2720      	movs	r7, #32
    1e2e:	1bbc      	subs	r4, r7, r6
    1e30:	46a1      	mov	r9, r4
    1e32:	000c      	movs	r4, r1
    1e34:	464f      	mov	r7, r9
    1e36:	40bc      	lsls	r4, r7
    1e38:	46a0      	mov	r8, r4
    1e3a:	002c      	movs	r4, r5
    1e3c:	4647      	mov	r7, r8
    1e3e:	40f4      	lsrs	r4, r6
    1e40:	433c      	orrs	r4, r7
    1e42:	464f      	mov	r7, r9
    1e44:	40bd      	lsls	r5, r7
    1e46:	1e6f      	subs	r7, r5, #1
    1e48:	41bd      	sbcs	r5, r7
    1e4a:	40f1      	lsrs	r1, r6
    1e4c:	432c      	orrs	r4, r5
    1e4e:	1b15      	subs	r5, r2, r4
    1e50:	42aa      	cmp	r2, r5
    1e52:	4192      	sbcs	r2, r2
    1e54:	1a41      	subs	r1, r0, r1
    1e56:	4252      	negs	r2, r2
    1e58:	1a89      	subs	r1, r1, r2
    1e5a:	4664      	mov	r4, ip
    1e5c:	469a      	mov	sl, r3
    1e5e:	e6bf      	b.n	1be0 <__aeabi_dadd+0x108>
    1e60:	4641      	mov	r1, r8
    1e62:	4645      	mov	r5, r8
    1e64:	4331      	orrs	r1, r6
    1e66:	d000      	beq.n	1e6a <__aeabi_dadd+0x392>
    1e68:	e6be      	b.n	1be8 <__aeabi_dadd+0x110>
    1e6a:	2600      	movs	r6, #0
    1e6c:	2400      	movs	r4, #0
    1e6e:	2500      	movs	r5, #0
    1e70:	e6f2      	b.n	1c58 <__aeabi_dadd+0x180>
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	000007ff 	.word	0x000007ff
    1e78:	ff7fffff 	.word	0xff7fffff
    1e7c:	800fffff 	.word	0x800fffff
    1e80:	2b1f      	cmp	r3, #31
    1e82:	dc59      	bgt.n	1f38 <__aeabi_dadd+0x460>
    1e84:	2720      	movs	r7, #32
    1e86:	1aff      	subs	r7, r7, r3
    1e88:	46bc      	mov	ip, r7
    1e8a:	0007      	movs	r7, r0
    1e8c:	4663      	mov	r3, ip
    1e8e:	409f      	lsls	r7, r3
    1e90:	465b      	mov	r3, fp
    1e92:	46b9      	mov	r9, r7
    1e94:	0017      	movs	r7, r2
    1e96:	40df      	lsrs	r7, r3
    1e98:	46b8      	mov	r8, r7
    1e9a:	464f      	mov	r7, r9
    1e9c:	4643      	mov	r3, r8
    1e9e:	431f      	orrs	r7, r3
    1ea0:	4663      	mov	r3, ip
    1ea2:	409a      	lsls	r2, r3
    1ea4:	1e53      	subs	r3, r2, #1
    1ea6:	419a      	sbcs	r2, r3
    1ea8:	465b      	mov	r3, fp
    1eaa:	433a      	orrs	r2, r7
    1eac:	40d8      	lsrs	r0, r3
    1eae:	e6f4      	b.n	1c9a <__aeabi_dadd+0x1c2>
    1eb0:	000c      	movs	r4, r1
    1eb2:	432c      	orrs	r4, r5
    1eb4:	d05c      	beq.n	1f70 <__aeabi_dadd+0x498>
    1eb6:	43f6      	mvns	r6, r6
    1eb8:	2e00      	cmp	r6, #0
    1eba:	d155      	bne.n	1f68 <__aeabi_dadd+0x490>
    1ebc:	1b55      	subs	r5, r2, r5
    1ebe:	42aa      	cmp	r2, r5
    1ec0:	41a4      	sbcs	r4, r4
    1ec2:	1a41      	subs	r1, r0, r1
    1ec4:	4264      	negs	r4, r4
    1ec6:	1b09      	subs	r1, r1, r4
    1ec8:	469a      	mov	sl, r3
    1eca:	4664      	mov	r4, ip
    1ecc:	e688      	b.n	1be0 <__aeabi_dadd+0x108>
    1ece:	4f96      	ldr	r7, [pc, #600]	; (2128 <STACK_SIZE+0x128>)
    1ed0:	42bc      	cmp	r4, r7
    1ed2:	d000      	beq.n	1ed6 <__aeabi_dadd+0x3fe>
    1ed4:	e6d8      	b.n	1c88 <__aeabi_dadd+0x1b0>
    1ed6:	e628      	b.n	1b2a <__aeabi_dadd+0x52>
    1ed8:	2200      	movs	r2, #0
    1eda:	e780      	b.n	1dde <__aeabi_dadd+0x306>
    1edc:	2000      	movs	r0, #0
    1ede:	e78f      	b.n	1e00 <__aeabi_dadd+0x328>
    1ee0:	000b      	movs	r3, r1
    1ee2:	432b      	orrs	r3, r5
    1ee4:	2c00      	cmp	r4, #0
    1ee6:	d000      	beq.n	1eea <__aeabi_dadd+0x412>
    1ee8:	e0c2      	b.n	2070 <STACK_SIZE+0x70>
    1eea:	2b00      	cmp	r3, #0
    1eec:	d100      	bne.n	1ef0 <__aeabi_dadd+0x418>
    1eee:	e101      	b.n	20f4 <STACK_SIZE+0xf4>
    1ef0:	0003      	movs	r3, r0
    1ef2:	4313      	orrs	r3, r2
    1ef4:	d100      	bne.n	1ef8 <__aeabi_dadd+0x420>
    1ef6:	e618      	b.n	1b2a <__aeabi_dadd+0x52>
    1ef8:	18ab      	adds	r3, r5, r2
    1efa:	42ab      	cmp	r3, r5
    1efc:	41b6      	sbcs	r6, r6
    1efe:	1809      	adds	r1, r1, r0
    1f00:	4276      	negs	r6, r6
    1f02:	1871      	adds	r1, r6, r1
    1f04:	020a      	lsls	r2, r1, #8
    1f06:	d400      	bmi.n	1f0a <__aeabi_dadd+0x432>
    1f08:	e109      	b.n	211e <STACK_SIZE+0x11e>
    1f0a:	4a88      	ldr	r2, [pc, #544]	; (212c <STACK_SIZE+0x12c>)
    1f0c:	001d      	movs	r5, r3
    1f0e:	4011      	ands	r1, r2
    1f10:	4664      	mov	r4, ip
    1f12:	e60a      	b.n	1b2a <__aeabi_dadd+0x52>
    1f14:	2c00      	cmp	r4, #0
    1f16:	d15b      	bne.n	1fd0 <__aeabi_dadd+0x4f8>
    1f18:	000e      	movs	r6, r1
    1f1a:	432e      	orrs	r6, r5
    1f1c:	d000      	beq.n	1f20 <__aeabi_dadd+0x448>
    1f1e:	e08a      	b.n	2036 <STACK_SIZE+0x36>
    1f20:	0001      	movs	r1, r0
    1f22:	4311      	orrs	r1, r2
    1f24:	d100      	bne.n	1f28 <__aeabi_dadd+0x450>
    1f26:	e0c2      	b.n	20ae <STACK_SIZE+0xae>
    1f28:	0001      	movs	r1, r0
    1f2a:	0015      	movs	r5, r2
    1f2c:	469a      	mov	sl, r3
    1f2e:	e5fc      	b.n	1b2a <__aeabi_dadd+0x52>
    1f30:	4664      	mov	r4, ip
    1f32:	2100      	movs	r1, #0
    1f34:	2500      	movs	r5, #0
    1f36:	e68f      	b.n	1c58 <__aeabi_dadd+0x180>
    1f38:	2320      	movs	r3, #32
    1f3a:	425b      	negs	r3, r3
    1f3c:	469c      	mov	ip, r3
    1f3e:	44dc      	add	ip, fp
    1f40:	4663      	mov	r3, ip
    1f42:	0007      	movs	r7, r0
    1f44:	40df      	lsrs	r7, r3
    1f46:	465b      	mov	r3, fp
    1f48:	46bc      	mov	ip, r7
    1f4a:	2b20      	cmp	r3, #32
    1f4c:	d100      	bne.n	1f50 <__aeabi_dadd+0x478>
    1f4e:	e0ac      	b.n	20aa <STACK_SIZE+0xaa>
    1f50:	2340      	movs	r3, #64	; 0x40
    1f52:	465f      	mov	r7, fp
    1f54:	1bdb      	subs	r3, r3, r7
    1f56:	4098      	lsls	r0, r3
    1f58:	4302      	orrs	r2, r0
    1f5a:	1e50      	subs	r0, r2, #1
    1f5c:	4182      	sbcs	r2, r0
    1f5e:	4663      	mov	r3, ip
    1f60:	4313      	orrs	r3, r2
    1f62:	001a      	movs	r2, r3
    1f64:	2000      	movs	r0, #0
    1f66:	e698      	b.n	1c9a <__aeabi_dadd+0x1c2>
    1f68:	4c6f      	ldr	r4, [pc, #444]	; (2128 <STACK_SIZE+0x128>)
    1f6a:	45a4      	cmp	ip, r4
    1f6c:	d000      	beq.n	1f70 <__aeabi_dadd+0x498>
    1f6e:	e757      	b.n	1e20 <__aeabi_dadd+0x348>
    1f70:	0001      	movs	r1, r0
    1f72:	0015      	movs	r5, r2
    1f74:	4664      	mov	r4, ip
    1f76:	469a      	mov	sl, r3
    1f78:	e5d7      	b.n	1b2a <__aeabi_dadd+0x52>
    1f7a:	2c00      	cmp	r4, #0
    1f7c:	d139      	bne.n	1ff2 <__aeabi_dadd+0x51a>
    1f7e:	000c      	movs	r4, r1
    1f80:	432c      	orrs	r4, r5
    1f82:	d06e      	beq.n	2062 <STACK_SIZE+0x62>
    1f84:	43db      	mvns	r3, r3
    1f86:	2b00      	cmp	r3, #0
    1f88:	d01a      	beq.n	1fc0 <__aeabi_dadd+0x4e8>
    1f8a:	4c67      	ldr	r4, [pc, #412]	; (2128 <STACK_SIZE+0x128>)
    1f8c:	45a4      	cmp	ip, r4
    1f8e:	d068      	beq.n	2062 <STACK_SIZE+0x62>
    1f90:	2b38      	cmp	r3, #56	; 0x38
    1f92:	dd00      	ble.n	1f96 <__aeabi_dadd+0x4be>
    1f94:	e0a4      	b.n	20e0 <STACK_SIZE+0xe0>
    1f96:	2b1f      	cmp	r3, #31
    1f98:	dd00      	ble.n	1f9c <__aeabi_dadd+0x4c4>
    1f9a:	e0ae      	b.n	20fa <STACK_SIZE+0xfa>
    1f9c:	2420      	movs	r4, #32
    1f9e:	000f      	movs	r7, r1
    1fa0:	1ae4      	subs	r4, r4, r3
    1fa2:	40a7      	lsls	r7, r4
    1fa4:	46b9      	mov	r9, r7
    1fa6:	002f      	movs	r7, r5
    1fa8:	40df      	lsrs	r7, r3
    1faa:	46b8      	mov	r8, r7
    1fac:	46a3      	mov	fp, r4
    1fae:	464f      	mov	r7, r9
    1fb0:	4644      	mov	r4, r8
    1fb2:	4327      	orrs	r7, r4
    1fb4:	465c      	mov	r4, fp
    1fb6:	40a5      	lsls	r5, r4
    1fb8:	1e6c      	subs	r4, r5, #1
    1fba:	41a5      	sbcs	r5, r4
    1fbc:	40d9      	lsrs	r1, r3
    1fbe:	433d      	orrs	r5, r7
    1fc0:	18ad      	adds	r5, r5, r2
    1fc2:	4295      	cmp	r5, r2
    1fc4:	419b      	sbcs	r3, r3
    1fc6:	1809      	adds	r1, r1, r0
    1fc8:	425b      	negs	r3, r3
    1fca:	1859      	adds	r1, r3, r1
    1fcc:	4664      	mov	r4, ip
    1fce:	e66b      	b.n	1ca8 <__aeabi_dadd+0x1d0>
    1fd0:	000c      	movs	r4, r1
    1fd2:	432c      	orrs	r4, r5
    1fd4:	d115      	bne.n	2002 <STACK_SIZE+0x2>
    1fd6:	0001      	movs	r1, r0
    1fd8:	4311      	orrs	r1, r2
    1fda:	d07b      	beq.n	20d4 <STACK_SIZE+0xd4>
    1fdc:	0001      	movs	r1, r0
    1fde:	0015      	movs	r5, r2
    1fe0:	469a      	mov	sl, r3
    1fe2:	4c51      	ldr	r4, [pc, #324]	; (2128 <STACK_SIZE+0x128>)
    1fe4:	e5a1      	b.n	1b2a <__aeabi_dadd+0x52>
    1fe6:	430d      	orrs	r5, r1
    1fe8:	1e69      	subs	r1, r5, #1
    1fea:	418d      	sbcs	r5, r1
    1fec:	2100      	movs	r1, #0
    1fee:	b2ec      	uxtb	r4, r5
    1ff0:	e72d      	b.n	1e4e <__aeabi_dadd+0x376>
    1ff2:	4c4d      	ldr	r4, [pc, #308]	; (2128 <STACK_SIZE+0x128>)
    1ff4:	45a4      	cmp	ip, r4
    1ff6:	d034      	beq.n	2062 <STACK_SIZE+0x62>
    1ff8:	2480      	movs	r4, #128	; 0x80
    1ffa:	0424      	lsls	r4, r4, #16
    1ffc:	425b      	negs	r3, r3
    1ffe:	4321      	orrs	r1, r4
    2000:	e7c6      	b.n	1f90 <__aeabi_dadd+0x4b8>
    2002:	0004      	movs	r4, r0
    2004:	4314      	orrs	r4, r2
    2006:	d04e      	beq.n	20a6 <STACK_SIZE+0xa6>
    2008:	08ed      	lsrs	r5, r5, #3
    200a:	074c      	lsls	r4, r1, #29
    200c:	432c      	orrs	r4, r5
    200e:	2580      	movs	r5, #128	; 0x80
    2010:	08c9      	lsrs	r1, r1, #3
    2012:	032d      	lsls	r5, r5, #12
    2014:	4229      	tst	r1, r5
    2016:	d008      	beq.n	202a <STACK_SIZE+0x2a>
    2018:	08c6      	lsrs	r6, r0, #3
    201a:	422e      	tst	r6, r5
    201c:	d105      	bne.n	202a <STACK_SIZE+0x2a>
    201e:	08d2      	lsrs	r2, r2, #3
    2020:	0741      	lsls	r1, r0, #29
    2022:	4311      	orrs	r1, r2
    2024:	000c      	movs	r4, r1
    2026:	469a      	mov	sl, r3
    2028:	0031      	movs	r1, r6
    202a:	0f62      	lsrs	r2, r4, #29
    202c:	00c9      	lsls	r1, r1, #3
    202e:	00e5      	lsls	r5, r4, #3
    2030:	4311      	orrs	r1, r2
    2032:	4c3d      	ldr	r4, [pc, #244]	; (2128 <STACK_SIZE+0x128>)
    2034:	e579      	b.n	1b2a <__aeabi_dadd+0x52>
    2036:	0006      	movs	r6, r0
    2038:	4316      	orrs	r6, r2
    203a:	d100      	bne.n	203e <STACK_SIZE+0x3e>
    203c:	e575      	b.n	1b2a <__aeabi_dadd+0x52>
    203e:	1aae      	subs	r6, r5, r2
    2040:	46b0      	mov	r8, r6
    2042:	4545      	cmp	r5, r8
    2044:	41bf      	sbcs	r7, r7
    2046:	1a0e      	subs	r6, r1, r0
    2048:	427f      	negs	r7, r7
    204a:	1bf6      	subs	r6, r6, r7
    204c:	0237      	lsls	r7, r6, #8
    204e:	d400      	bmi.n	2052 <STACK_SIZE+0x52>
    2050:	e5f4      	b.n	1c3c <__aeabi_dadd+0x164>
    2052:	1b55      	subs	r5, r2, r5
    2054:	42aa      	cmp	r2, r5
    2056:	41b6      	sbcs	r6, r6
    2058:	1a41      	subs	r1, r0, r1
    205a:	4276      	negs	r6, r6
    205c:	1b89      	subs	r1, r1, r6
    205e:	469a      	mov	sl, r3
    2060:	e563      	b.n	1b2a <__aeabi_dadd+0x52>
    2062:	0001      	movs	r1, r0
    2064:	0015      	movs	r5, r2
    2066:	4664      	mov	r4, ip
    2068:	e55f      	b.n	1b2a <__aeabi_dadd+0x52>
    206a:	2200      	movs	r2, #0
    206c:	2500      	movs	r5, #0
    206e:	e57b      	b.n	1b68 <__aeabi_dadd+0x90>
    2070:	2b00      	cmp	r3, #0
    2072:	d03b      	beq.n	20ec <STACK_SIZE+0xec>
    2074:	0003      	movs	r3, r0
    2076:	4313      	orrs	r3, r2
    2078:	d015      	beq.n	20a6 <STACK_SIZE+0xa6>
    207a:	08ed      	lsrs	r5, r5, #3
    207c:	074b      	lsls	r3, r1, #29
    207e:	432b      	orrs	r3, r5
    2080:	2580      	movs	r5, #128	; 0x80
    2082:	08c9      	lsrs	r1, r1, #3
    2084:	032d      	lsls	r5, r5, #12
    2086:	4229      	tst	r1, r5
    2088:	d007      	beq.n	209a <STACK_SIZE+0x9a>
    208a:	08c4      	lsrs	r4, r0, #3
    208c:	422c      	tst	r4, r5
    208e:	d104      	bne.n	209a <STACK_SIZE+0x9a>
    2090:	0741      	lsls	r1, r0, #29
    2092:	000b      	movs	r3, r1
    2094:	0021      	movs	r1, r4
    2096:	08d2      	lsrs	r2, r2, #3
    2098:	4313      	orrs	r3, r2
    209a:	00c9      	lsls	r1, r1, #3
    209c:	0f5a      	lsrs	r2, r3, #29
    209e:	4311      	orrs	r1, r2
    20a0:	00dd      	lsls	r5, r3, #3
    20a2:	4c21      	ldr	r4, [pc, #132]	; (2128 <STACK_SIZE+0x128>)
    20a4:	e541      	b.n	1b2a <__aeabi_dadd+0x52>
    20a6:	4c20      	ldr	r4, [pc, #128]	; (2128 <STACK_SIZE+0x128>)
    20a8:	e53f      	b.n	1b2a <__aeabi_dadd+0x52>
    20aa:	2000      	movs	r0, #0
    20ac:	e754      	b.n	1f58 <__aeabi_dadd+0x480>
    20ae:	2600      	movs	r6, #0
    20b0:	2500      	movs	r5, #0
    20b2:	e5d1      	b.n	1c58 <__aeabi_dadd+0x180>
    20b4:	0034      	movs	r4, r6
    20b6:	000f      	movs	r7, r1
    20b8:	3c20      	subs	r4, #32
    20ba:	40e7      	lsrs	r7, r4
    20bc:	003c      	movs	r4, r7
    20be:	2e20      	cmp	r6, #32
    20c0:	d02b      	beq.n	211a <STACK_SIZE+0x11a>
    20c2:	2740      	movs	r7, #64	; 0x40
    20c4:	1bbe      	subs	r6, r7, r6
    20c6:	40b1      	lsls	r1, r6
    20c8:	430d      	orrs	r5, r1
    20ca:	1e69      	subs	r1, r5, #1
    20cc:	418d      	sbcs	r5, r1
    20ce:	2100      	movs	r1, #0
    20d0:	432c      	orrs	r4, r5
    20d2:	e6bc      	b.n	1e4e <__aeabi_dadd+0x376>
    20d4:	2180      	movs	r1, #128	; 0x80
    20d6:	2600      	movs	r6, #0
    20d8:	0309      	lsls	r1, r1, #12
    20da:	4c13      	ldr	r4, [pc, #76]	; (2128 <STACK_SIZE+0x128>)
    20dc:	2500      	movs	r5, #0
    20de:	e5bb      	b.n	1c58 <__aeabi_dadd+0x180>
    20e0:	430d      	orrs	r5, r1
    20e2:	1e69      	subs	r1, r5, #1
    20e4:	418d      	sbcs	r5, r1
    20e6:	2100      	movs	r1, #0
    20e8:	b2ed      	uxtb	r5, r5
    20ea:	e769      	b.n	1fc0 <__aeabi_dadd+0x4e8>
    20ec:	0001      	movs	r1, r0
    20ee:	0015      	movs	r5, r2
    20f0:	4c0d      	ldr	r4, [pc, #52]	; (2128 <STACK_SIZE+0x128>)
    20f2:	e51a      	b.n	1b2a <__aeabi_dadd+0x52>
    20f4:	0001      	movs	r1, r0
    20f6:	0015      	movs	r5, r2
    20f8:	e517      	b.n	1b2a <__aeabi_dadd+0x52>
    20fa:	001c      	movs	r4, r3
    20fc:	000f      	movs	r7, r1
    20fe:	3c20      	subs	r4, #32
    2100:	40e7      	lsrs	r7, r4
    2102:	003c      	movs	r4, r7
    2104:	2b20      	cmp	r3, #32
    2106:	d00c      	beq.n	2122 <STACK_SIZE+0x122>
    2108:	2740      	movs	r7, #64	; 0x40
    210a:	1afb      	subs	r3, r7, r3
    210c:	4099      	lsls	r1, r3
    210e:	430d      	orrs	r5, r1
    2110:	1e69      	subs	r1, r5, #1
    2112:	418d      	sbcs	r5, r1
    2114:	2100      	movs	r1, #0
    2116:	4325      	orrs	r5, r4
    2118:	e752      	b.n	1fc0 <__aeabi_dadd+0x4e8>
    211a:	2100      	movs	r1, #0
    211c:	e7d4      	b.n	20c8 <STACK_SIZE+0xc8>
    211e:	001d      	movs	r5, r3
    2120:	e592      	b.n	1c48 <__aeabi_dadd+0x170>
    2122:	2100      	movs	r1, #0
    2124:	e7f3      	b.n	210e <STACK_SIZE+0x10e>
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	000007ff 	.word	0x000007ff
    212c:	ff7fffff 	.word	0xff7fffff

00002130 <__eqdf2>:
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    2132:	465f      	mov	r7, fp
    2134:	4656      	mov	r6, sl
    2136:	464d      	mov	r5, r9
    2138:	4644      	mov	r4, r8
    213a:	b4f0      	push	{r4, r5, r6, r7}
    213c:	031f      	lsls	r7, r3, #12
    213e:	005c      	lsls	r4, r3, #1
    2140:	0fdb      	lsrs	r3, r3, #31
    2142:	469a      	mov	sl, r3
    2144:	4b19      	ldr	r3, [pc, #100]	; (21ac <__eqdf2+0x7c>)
    2146:	030e      	lsls	r6, r1, #12
    2148:	004d      	lsls	r5, r1, #1
    214a:	0fc9      	lsrs	r1, r1, #31
    214c:	4680      	mov	r8, r0
    214e:	0b36      	lsrs	r6, r6, #12
    2150:	0d6d      	lsrs	r5, r5, #21
    2152:	468b      	mov	fp, r1
    2154:	4691      	mov	r9, r2
    2156:	0b3f      	lsrs	r7, r7, #12
    2158:	0d64      	lsrs	r4, r4, #21
    215a:	429d      	cmp	r5, r3
    215c:	d019      	beq.n	2192 <__eqdf2+0x62>
    215e:	4b13      	ldr	r3, [pc, #76]	; (21ac <__eqdf2+0x7c>)
    2160:	429c      	cmp	r4, r3
    2162:	d01b      	beq.n	219c <__eqdf2+0x6c>
    2164:	2301      	movs	r3, #1
    2166:	42a5      	cmp	r5, r4
    2168:	d006      	beq.n	2178 <__eqdf2+0x48>
    216a:	0018      	movs	r0, r3
    216c:	bc3c      	pop	{r2, r3, r4, r5}
    216e:	4690      	mov	r8, r2
    2170:	4699      	mov	r9, r3
    2172:	46a2      	mov	sl, r4
    2174:	46ab      	mov	fp, r5
    2176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2178:	42be      	cmp	r6, r7
    217a:	d1f6      	bne.n	216a <__eqdf2+0x3a>
    217c:	45c8      	cmp	r8, r9
    217e:	d1f4      	bne.n	216a <__eqdf2+0x3a>
    2180:	45d3      	cmp	fp, sl
    2182:	d010      	beq.n	21a6 <__eqdf2+0x76>
    2184:	2d00      	cmp	r5, #0
    2186:	d1f0      	bne.n	216a <__eqdf2+0x3a>
    2188:	4330      	orrs	r0, r6
    218a:	0003      	movs	r3, r0
    218c:	1e5a      	subs	r2, r3, #1
    218e:	4193      	sbcs	r3, r2
    2190:	e7eb      	b.n	216a <__eqdf2+0x3a>
    2192:	0031      	movs	r1, r6
    2194:	2301      	movs	r3, #1
    2196:	4301      	orrs	r1, r0
    2198:	d1e7      	bne.n	216a <__eqdf2+0x3a>
    219a:	e7e0      	b.n	215e <__eqdf2+0x2e>
    219c:	433a      	orrs	r2, r7
    219e:	2301      	movs	r3, #1
    21a0:	2a00      	cmp	r2, #0
    21a2:	d1e2      	bne.n	216a <__eqdf2+0x3a>
    21a4:	e7de      	b.n	2164 <__eqdf2+0x34>
    21a6:	2300      	movs	r3, #0
    21a8:	e7df      	b.n	216a <__eqdf2+0x3a>
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	000007ff 	.word	0x000007ff

000021b0 <__gedf2>:
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	465f      	mov	r7, fp
    21b4:	4644      	mov	r4, r8
    21b6:	4656      	mov	r6, sl
    21b8:	464d      	mov	r5, r9
    21ba:	b4f0      	push	{r4, r5, r6, r7}
    21bc:	031f      	lsls	r7, r3, #12
    21be:	0b3c      	lsrs	r4, r7, #12
    21c0:	4f2c      	ldr	r7, [pc, #176]	; (2274 <__gedf2+0xc4>)
    21c2:	030e      	lsls	r6, r1, #12
    21c4:	004d      	lsls	r5, r1, #1
    21c6:	46a3      	mov	fp, r4
    21c8:	005c      	lsls	r4, r3, #1
    21ca:	4684      	mov	ip, r0
    21cc:	0b36      	lsrs	r6, r6, #12
    21ce:	0d6d      	lsrs	r5, r5, #21
    21d0:	0fc9      	lsrs	r1, r1, #31
    21d2:	4690      	mov	r8, r2
    21d4:	0d64      	lsrs	r4, r4, #21
    21d6:	0fdb      	lsrs	r3, r3, #31
    21d8:	42bd      	cmp	r5, r7
    21da:	d02b      	beq.n	2234 <__gedf2+0x84>
    21dc:	4f25      	ldr	r7, [pc, #148]	; (2274 <__gedf2+0xc4>)
    21de:	42bc      	cmp	r4, r7
    21e0:	d02e      	beq.n	2240 <__gedf2+0x90>
    21e2:	2d00      	cmp	r5, #0
    21e4:	d10e      	bne.n	2204 <__gedf2+0x54>
    21e6:	4330      	orrs	r0, r6
    21e8:	0007      	movs	r7, r0
    21ea:	4681      	mov	r9, r0
    21ec:	4278      	negs	r0, r7
    21ee:	4178      	adcs	r0, r7
    21f0:	2c00      	cmp	r4, #0
    21f2:	d117      	bne.n	2224 <__gedf2+0x74>
    21f4:	465f      	mov	r7, fp
    21f6:	433a      	orrs	r2, r7
    21f8:	d114      	bne.n	2224 <__gedf2+0x74>
    21fa:	464b      	mov	r3, r9
    21fc:	2000      	movs	r0, #0
    21fe:	2b00      	cmp	r3, #0
    2200:	d00a      	beq.n	2218 <__gedf2+0x68>
    2202:	e006      	b.n	2212 <__gedf2+0x62>
    2204:	2c00      	cmp	r4, #0
    2206:	d102      	bne.n	220e <__gedf2+0x5e>
    2208:	4658      	mov	r0, fp
    220a:	4302      	orrs	r2, r0
    220c:	d001      	beq.n	2212 <__gedf2+0x62>
    220e:	4299      	cmp	r1, r3
    2210:	d01a      	beq.n	2248 <__gedf2+0x98>
    2212:	2301      	movs	r3, #1
    2214:	4248      	negs	r0, r1
    2216:	4318      	orrs	r0, r3
    2218:	bc3c      	pop	{r2, r3, r4, r5}
    221a:	4690      	mov	r8, r2
    221c:	4699      	mov	r9, r3
    221e:	46a2      	mov	sl, r4
    2220:	46ab      	mov	fp, r5
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2224:	2800      	cmp	r0, #0
    2226:	d0f2      	beq.n	220e <__gedf2+0x5e>
    2228:	4258      	negs	r0, r3
    222a:	4158      	adcs	r0, r3
    222c:	2201      	movs	r2, #1
    222e:	4240      	negs	r0, r0
    2230:	4310      	orrs	r0, r2
    2232:	e7f1      	b.n	2218 <__gedf2+0x68>
    2234:	0037      	movs	r7, r6
    2236:	4307      	orrs	r7, r0
    2238:	d0d0      	beq.n	21dc <__gedf2+0x2c>
    223a:	2002      	movs	r0, #2
    223c:	4240      	negs	r0, r0
    223e:	e7eb      	b.n	2218 <__gedf2+0x68>
    2240:	465f      	mov	r7, fp
    2242:	4317      	orrs	r7, r2
    2244:	d0cd      	beq.n	21e2 <__gedf2+0x32>
    2246:	e7f8      	b.n	223a <__gedf2+0x8a>
    2248:	42a5      	cmp	r5, r4
    224a:	dce2      	bgt.n	2212 <__gedf2+0x62>
    224c:	db05      	blt.n	225a <__gedf2+0xaa>
    224e:	455e      	cmp	r6, fp
    2250:	d8df      	bhi.n	2212 <__gedf2+0x62>
    2252:	d008      	beq.n	2266 <__gedf2+0xb6>
    2254:	2000      	movs	r0, #0
    2256:	455e      	cmp	r6, fp
    2258:	d2de      	bcs.n	2218 <__gedf2+0x68>
    225a:	4248      	negs	r0, r1
    225c:	4148      	adcs	r0, r1
    225e:	2301      	movs	r3, #1
    2260:	4240      	negs	r0, r0
    2262:	4318      	orrs	r0, r3
    2264:	e7d8      	b.n	2218 <__gedf2+0x68>
    2266:	45c4      	cmp	ip, r8
    2268:	d8d3      	bhi.n	2212 <__gedf2+0x62>
    226a:	2000      	movs	r0, #0
    226c:	45c4      	cmp	ip, r8
    226e:	d3f4      	bcc.n	225a <__gedf2+0xaa>
    2270:	e7d2      	b.n	2218 <__gedf2+0x68>
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	000007ff 	.word	0x000007ff

00002278 <__ledf2>:
    2278:	b5f0      	push	{r4, r5, r6, r7, lr}
    227a:	465f      	mov	r7, fp
    227c:	464d      	mov	r5, r9
    227e:	4644      	mov	r4, r8
    2280:	4656      	mov	r6, sl
    2282:	b4f0      	push	{r4, r5, r6, r7}
    2284:	031c      	lsls	r4, r3, #12
    2286:	0b24      	lsrs	r4, r4, #12
    2288:	46a4      	mov	ip, r4
    228a:	4c2f      	ldr	r4, [pc, #188]	; (2348 <__ledf2+0xd0>)
    228c:	030f      	lsls	r7, r1, #12
    228e:	004d      	lsls	r5, r1, #1
    2290:	005e      	lsls	r6, r3, #1
    2292:	0fc9      	lsrs	r1, r1, #31
    2294:	4680      	mov	r8, r0
    2296:	0b3f      	lsrs	r7, r7, #12
    2298:	0d6d      	lsrs	r5, r5, #21
    229a:	468b      	mov	fp, r1
    229c:	4691      	mov	r9, r2
    229e:	0d76      	lsrs	r6, r6, #21
    22a0:	0fdb      	lsrs	r3, r3, #31
    22a2:	42a5      	cmp	r5, r4
    22a4:	d020      	beq.n	22e8 <__ledf2+0x70>
    22a6:	4c28      	ldr	r4, [pc, #160]	; (2348 <__ledf2+0xd0>)
    22a8:	42a6      	cmp	r6, r4
    22aa:	d022      	beq.n	22f2 <__ledf2+0x7a>
    22ac:	2d00      	cmp	r5, #0
    22ae:	d112      	bne.n	22d6 <__ledf2+0x5e>
    22b0:	4338      	orrs	r0, r7
    22b2:	4244      	negs	r4, r0
    22b4:	4144      	adcs	r4, r0
    22b6:	2e00      	cmp	r6, #0
    22b8:	d020      	beq.n	22fc <__ledf2+0x84>
    22ba:	2c00      	cmp	r4, #0
    22bc:	d00d      	beq.n	22da <__ledf2+0x62>
    22be:	425c      	negs	r4, r3
    22c0:	4163      	adcs	r3, r4
    22c2:	2401      	movs	r4, #1
    22c4:	425b      	negs	r3, r3
    22c6:	431c      	orrs	r4, r3
    22c8:	0020      	movs	r0, r4
    22ca:	bc3c      	pop	{r2, r3, r4, r5}
    22cc:	4690      	mov	r8, r2
    22ce:	4699      	mov	r9, r3
    22d0:	46a2      	mov	sl, r4
    22d2:	46ab      	mov	fp, r5
    22d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22d6:	2e00      	cmp	r6, #0
    22d8:	d017      	beq.n	230a <__ledf2+0x92>
    22da:	455b      	cmp	r3, fp
    22dc:	d019      	beq.n	2312 <__ledf2+0x9a>
    22de:	465b      	mov	r3, fp
    22e0:	425c      	negs	r4, r3
    22e2:	2301      	movs	r3, #1
    22e4:	431c      	orrs	r4, r3
    22e6:	e7ef      	b.n	22c8 <__ledf2+0x50>
    22e8:	0039      	movs	r1, r7
    22ea:	2402      	movs	r4, #2
    22ec:	4301      	orrs	r1, r0
    22ee:	d1eb      	bne.n	22c8 <__ledf2+0x50>
    22f0:	e7d9      	b.n	22a6 <__ledf2+0x2e>
    22f2:	4661      	mov	r1, ip
    22f4:	2402      	movs	r4, #2
    22f6:	4311      	orrs	r1, r2
    22f8:	d1e6      	bne.n	22c8 <__ledf2+0x50>
    22fa:	e7d7      	b.n	22ac <__ledf2+0x34>
    22fc:	4661      	mov	r1, ip
    22fe:	430a      	orrs	r2, r1
    2300:	d1db      	bne.n	22ba <__ledf2+0x42>
    2302:	2400      	movs	r4, #0
    2304:	2800      	cmp	r0, #0
    2306:	d0df      	beq.n	22c8 <__ledf2+0x50>
    2308:	e7e9      	b.n	22de <__ledf2+0x66>
    230a:	4661      	mov	r1, ip
    230c:	430a      	orrs	r2, r1
    230e:	d1e4      	bne.n	22da <__ledf2+0x62>
    2310:	e7e5      	b.n	22de <__ledf2+0x66>
    2312:	42b5      	cmp	r5, r6
    2314:	dd03      	ble.n	231e <__ledf2+0xa6>
    2316:	2201      	movs	r2, #1
    2318:	425c      	negs	r4, r3
    231a:	4314      	orrs	r4, r2
    231c:	e7d4      	b.n	22c8 <__ledf2+0x50>
    231e:	42b5      	cmp	r5, r6
    2320:	dbcd      	blt.n	22be <__ledf2+0x46>
    2322:	4567      	cmp	r7, ip
    2324:	d8db      	bhi.n	22de <__ledf2+0x66>
    2326:	d009      	beq.n	233c <__ledf2+0xc4>
    2328:	2400      	movs	r4, #0
    232a:	4567      	cmp	r7, ip
    232c:	d2cc      	bcs.n	22c8 <__ledf2+0x50>
    232e:	4659      	mov	r1, fp
    2330:	424c      	negs	r4, r1
    2332:	4161      	adcs	r1, r4
    2334:	2401      	movs	r4, #1
    2336:	4249      	negs	r1, r1
    2338:	430c      	orrs	r4, r1
    233a:	e7c5      	b.n	22c8 <__ledf2+0x50>
    233c:	45c8      	cmp	r8, r9
    233e:	d8ce      	bhi.n	22de <__ledf2+0x66>
    2340:	2400      	movs	r4, #0
    2342:	45c8      	cmp	r8, r9
    2344:	d3f3      	bcc.n	232e <__ledf2+0xb6>
    2346:	e7bf      	b.n	22c8 <__ledf2+0x50>
    2348:	000007ff 	.word	0x000007ff

0000234c <__aeabi_dmul>:
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
    234e:	465f      	mov	r7, fp
    2350:	4656      	mov	r6, sl
    2352:	464d      	mov	r5, r9
    2354:	4644      	mov	r4, r8
    2356:	b4f0      	push	{r4, r5, r6, r7}
    2358:	030d      	lsls	r5, r1, #12
    235a:	4699      	mov	r9, r3
    235c:	004e      	lsls	r6, r1, #1
    235e:	0b2b      	lsrs	r3, r5, #12
    2360:	b087      	sub	sp, #28
    2362:	0007      	movs	r7, r0
    2364:	4692      	mov	sl, r2
    2366:	4680      	mov	r8, r0
    2368:	469b      	mov	fp, r3
    236a:	0d76      	lsrs	r6, r6, #21
    236c:	0fcc      	lsrs	r4, r1, #31
    236e:	2e00      	cmp	r6, #0
    2370:	d069      	beq.n	2446 <__aeabi_dmul+0xfa>
    2372:	4b6d      	ldr	r3, [pc, #436]	; (2528 <__aeabi_dmul+0x1dc>)
    2374:	429e      	cmp	r6, r3
    2376:	d035      	beq.n	23e4 <__aeabi_dmul+0x98>
    2378:	465b      	mov	r3, fp
    237a:	2280      	movs	r2, #128	; 0x80
    237c:	00dd      	lsls	r5, r3, #3
    237e:	0412      	lsls	r2, r2, #16
    2380:	0f43      	lsrs	r3, r0, #29
    2382:	4313      	orrs	r3, r2
    2384:	432b      	orrs	r3, r5
    2386:	469b      	mov	fp, r3
    2388:	00c3      	lsls	r3, r0, #3
    238a:	4698      	mov	r8, r3
    238c:	4b67      	ldr	r3, [pc, #412]	; (252c <__aeabi_dmul+0x1e0>)
    238e:	2700      	movs	r7, #0
    2390:	469c      	mov	ip, r3
    2392:	2300      	movs	r3, #0
    2394:	4466      	add	r6, ip
    2396:	9301      	str	r3, [sp, #4]
    2398:	464a      	mov	r2, r9
    239a:	0315      	lsls	r5, r2, #12
    239c:	0050      	lsls	r0, r2, #1
    239e:	0fd2      	lsrs	r2, r2, #31
    23a0:	4653      	mov	r3, sl
    23a2:	0b2d      	lsrs	r5, r5, #12
    23a4:	0d40      	lsrs	r0, r0, #21
    23a6:	4691      	mov	r9, r2
    23a8:	d100      	bne.n	23ac <__aeabi_dmul+0x60>
    23aa:	e076      	b.n	249a <__aeabi_dmul+0x14e>
    23ac:	4a5e      	ldr	r2, [pc, #376]	; (2528 <__aeabi_dmul+0x1dc>)
    23ae:	4290      	cmp	r0, r2
    23b0:	d06c      	beq.n	248c <__aeabi_dmul+0x140>
    23b2:	2280      	movs	r2, #128	; 0x80
    23b4:	0f5b      	lsrs	r3, r3, #29
    23b6:	0412      	lsls	r2, r2, #16
    23b8:	4313      	orrs	r3, r2
    23ba:	4a5c      	ldr	r2, [pc, #368]	; (252c <__aeabi_dmul+0x1e0>)
    23bc:	00ed      	lsls	r5, r5, #3
    23be:	4694      	mov	ip, r2
    23c0:	431d      	orrs	r5, r3
    23c2:	4653      	mov	r3, sl
    23c4:	2200      	movs	r2, #0
    23c6:	00db      	lsls	r3, r3, #3
    23c8:	4460      	add	r0, ip
    23ca:	4649      	mov	r1, r9
    23cc:	1836      	adds	r6, r6, r0
    23ce:	1c70      	adds	r0, r6, #1
    23d0:	4061      	eors	r1, r4
    23d2:	9002      	str	r0, [sp, #8]
    23d4:	4317      	orrs	r7, r2
    23d6:	2f0f      	cmp	r7, #15
    23d8:	d900      	bls.n	23dc <__aeabi_dmul+0x90>
    23da:	e0af      	b.n	253c <__aeabi_dmul+0x1f0>
    23dc:	4854      	ldr	r0, [pc, #336]	; (2530 <__aeabi_dmul+0x1e4>)
    23de:	00bf      	lsls	r7, r7, #2
    23e0:	59c7      	ldr	r7, [r0, r7]
    23e2:	46bf      	mov	pc, r7
    23e4:	465b      	mov	r3, fp
    23e6:	431f      	orrs	r7, r3
    23e8:	d000      	beq.n	23ec <__aeabi_dmul+0xa0>
    23ea:	e088      	b.n	24fe <__aeabi_dmul+0x1b2>
    23ec:	2300      	movs	r3, #0
    23ee:	469b      	mov	fp, r3
    23f0:	4698      	mov	r8, r3
    23f2:	3302      	adds	r3, #2
    23f4:	2708      	movs	r7, #8
    23f6:	9301      	str	r3, [sp, #4]
    23f8:	e7ce      	b.n	2398 <__aeabi_dmul+0x4c>
    23fa:	4649      	mov	r1, r9
    23fc:	2a02      	cmp	r2, #2
    23fe:	d06a      	beq.n	24d6 <__aeabi_dmul+0x18a>
    2400:	2a03      	cmp	r2, #3
    2402:	d100      	bne.n	2406 <__aeabi_dmul+0xba>
    2404:	e209      	b.n	281a <__aeabi_dmul+0x4ce>
    2406:	2a01      	cmp	r2, #1
    2408:	d000      	beq.n	240c <__aeabi_dmul+0xc0>
    240a:	e1bb      	b.n	2784 <__aeabi_dmul+0x438>
    240c:	4011      	ands	r1, r2
    240e:	2200      	movs	r2, #0
    2410:	2300      	movs	r3, #0
    2412:	2500      	movs	r5, #0
    2414:	4690      	mov	r8, r2
    2416:	b2cc      	uxtb	r4, r1
    2418:	2100      	movs	r1, #0
    241a:	032d      	lsls	r5, r5, #12
    241c:	0d0a      	lsrs	r2, r1, #20
    241e:	0512      	lsls	r2, r2, #20
    2420:	0b2d      	lsrs	r5, r5, #12
    2422:	4315      	orrs	r5, r2
    2424:	4a43      	ldr	r2, [pc, #268]	; (2534 <__aeabi_dmul+0x1e8>)
    2426:	051b      	lsls	r3, r3, #20
    2428:	4015      	ands	r5, r2
    242a:	431d      	orrs	r5, r3
    242c:	006d      	lsls	r5, r5, #1
    242e:	07e4      	lsls	r4, r4, #31
    2430:	086d      	lsrs	r5, r5, #1
    2432:	4325      	orrs	r5, r4
    2434:	4640      	mov	r0, r8
    2436:	0029      	movs	r1, r5
    2438:	b007      	add	sp, #28
    243a:	bc3c      	pop	{r2, r3, r4, r5}
    243c:	4690      	mov	r8, r2
    243e:	4699      	mov	r9, r3
    2440:	46a2      	mov	sl, r4
    2442:	46ab      	mov	fp, r5
    2444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2446:	4303      	orrs	r3, r0
    2448:	d052      	beq.n	24f0 <__aeabi_dmul+0x1a4>
    244a:	465b      	mov	r3, fp
    244c:	2b00      	cmp	r3, #0
    244e:	d100      	bne.n	2452 <__aeabi_dmul+0x106>
    2450:	e18a      	b.n	2768 <__aeabi_dmul+0x41c>
    2452:	4658      	mov	r0, fp
    2454:	f000 fed8 	bl	3208 <__clzsi2>
    2458:	0003      	movs	r3, r0
    245a:	3b0b      	subs	r3, #11
    245c:	2b1c      	cmp	r3, #28
    245e:	dd00      	ble.n	2462 <__aeabi_dmul+0x116>
    2460:	e17b      	b.n	275a <__aeabi_dmul+0x40e>
    2462:	221d      	movs	r2, #29
    2464:	1ad3      	subs	r3, r2, r3
    2466:	003a      	movs	r2, r7
    2468:	0001      	movs	r1, r0
    246a:	465d      	mov	r5, fp
    246c:	40da      	lsrs	r2, r3
    246e:	3908      	subs	r1, #8
    2470:	408d      	lsls	r5, r1
    2472:	0013      	movs	r3, r2
    2474:	408f      	lsls	r7, r1
    2476:	432b      	orrs	r3, r5
    2478:	469b      	mov	fp, r3
    247a:	46b8      	mov	r8, r7
    247c:	4b2e      	ldr	r3, [pc, #184]	; (2538 <__aeabi_dmul+0x1ec>)
    247e:	2700      	movs	r7, #0
    2480:	469c      	mov	ip, r3
    2482:	2300      	movs	r3, #0
    2484:	4460      	add	r0, ip
    2486:	4246      	negs	r6, r0
    2488:	9301      	str	r3, [sp, #4]
    248a:	e785      	b.n	2398 <__aeabi_dmul+0x4c>
    248c:	4652      	mov	r2, sl
    248e:	432a      	orrs	r2, r5
    2490:	d12c      	bne.n	24ec <__aeabi_dmul+0x1a0>
    2492:	2500      	movs	r5, #0
    2494:	2300      	movs	r3, #0
    2496:	2202      	movs	r2, #2
    2498:	e797      	b.n	23ca <__aeabi_dmul+0x7e>
    249a:	4652      	mov	r2, sl
    249c:	432a      	orrs	r2, r5
    249e:	d021      	beq.n	24e4 <__aeabi_dmul+0x198>
    24a0:	2d00      	cmp	r5, #0
    24a2:	d100      	bne.n	24a6 <__aeabi_dmul+0x15a>
    24a4:	e154      	b.n	2750 <__aeabi_dmul+0x404>
    24a6:	0028      	movs	r0, r5
    24a8:	f000 feae 	bl	3208 <__clzsi2>
    24ac:	0003      	movs	r3, r0
    24ae:	3b0b      	subs	r3, #11
    24b0:	2b1c      	cmp	r3, #28
    24b2:	dd00      	ble.n	24b6 <__aeabi_dmul+0x16a>
    24b4:	e146      	b.n	2744 <__aeabi_dmul+0x3f8>
    24b6:	211d      	movs	r1, #29
    24b8:	1acb      	subs	r3, r1, r3
    24ba:	4651      	mov	r1, sl
    24bc:	0002      	movs	r2, r0
    24be:	40d9      	lsrs	r1, r3
    24c0:	4653      	mov	r3, sl
    24c2:	3a08      	subs	r2, #8
    24c4:	4095      	lsls	r5, r2
    24c6:	4093      	lsls	r3, r2
    24c8:	430d      	orrs	r5, r1
    24ca:	4a1b      	ldr	r2, [pc, #108]	; (2538 <__aeabi_dmul+0x1ec>)
    24cc:	4694      	mov	ip, r2
    24ce:	4460      	add	r0, ip
    24d0:	4240      	negs	r0, r0
    24d2:	2200      	movs	r2, #0
    24d4:	e779      	b.n	23ca <__aeabi_dmul+0x7e>
    24d6:	2401      	movs	r4, #1
    24d8:	2200      	movs	r2, #0
    24da:	400c      	ands	r4, r1
    24dc:	4b12      	ldr	r3, [pc, #72]	; (2528 <__aeabi_dmul+0x1dc>)
    24de:	2500      	movs	r5, #0
    24e0:	4690      	mov	r8, r2
    24e2:	e799      	b.n	2418 <__aeabi_dmul+0xcc>
    24e4:	2500      	movs	r5, #0
    24e6:	2300      	movs	r3, #0
    24e8:	2201      	movs	r2, #1
    24ea:	e76e      	b.n	23ca <__aeabi_dmul+0x7e>
    24ec:	2203      	movs	r2, #3
    24ee:	e76c      	b.n	23ca <__aeabi_dmul+0x7e>
    24f0:	2300      	movs	r3, #0
    24f2:	469b      	mov	fp, r3
    24f4:	4698      	mov	r8, r3
    24f6:	3301      	adds	r3, #1
    24f8:	2704      	movs	r7, #4
    24fa:	9301      	str	r3, [sp, #4]
    24fc:	e74c      	b.n	2398 <__aeabi_dmul+0x4c>
    24fe:	2303      	movs	r3, #3
    2500:	270c      	movs	r7, #12
    2502:	9301      	str	r3, [sp, #4]
    2504:	e748      	b.n	2398 <__aeabi_dmul+0x4c>
    2506:	2300      	movs	r3, #0
    2508:	2580      	movs	r5, #128	; 0x80
    250a:	4698      	mov	r8, r3
    250c:	2400      	movs	r4, #0
    250e:	032d      	lsls	r5, r5, #12
    2510:	4b05      	ldr	r3, [pc, #20]	; (2528 <__aeabi_dmul+0x1dc>)
    2512:	e781      	b.n	2418 <__aeabi_dmul+0xcc>
    2514:	465d      	mov	r5, fp
    2516:	4643      	mov	r3, r8
    2518:	9a01      	ldr	r2, [sp, #4]
    251a:	e76f      	b.n	23fc <__aeabi_dmul+0xb0>
    251c:	465d      	mov	r5, fp
    251e:	4643      	mov	r3, r8
    2520:	0021      	movs	r1, r4
    2522:	9a01      	ldr	r2, [sp, #4]
    2524:	e76a      	b.n	23fc <__aeabi_dmul+0xb0>
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	000007ff 	.word	0x000007ff
    252c:	fffffc01 	.word	0xfffffc01
    2530:	000035b4 	.word	0x000035b4
    2534:	800fffff 	.word	0x800fffff
    2538:	000003f3 	.word	0x000003f3
    253c:	4642      	mov	r2, r8
    253e:	0c12      	lsrs	r2, r2, #16
    2540:	4691      	mov	r9, r2
    2542:	0c1a      	lsrs	r2, r3, #16
    2544:	4694      	mov	ip, r2
    2546:	4642      	mov	r2, r8
    2548:	0417      	lsls	r7, r2, #16
    254a:	464a      	mov	r2, r9
    254c:	041b      	lsls	r3, r3, #16
    254e:	0c1b      	lsrs	r3, r3, #16
    2550:	435a      	muls	r2, r3
    2552:	4660      	mov	r0, ip
    2554:	4690      	mov	r8, r2
    2556:	464a      	mov	r2, r9
    2558:	4342      	muls	r2, r0
    255a:	0010      	movs	r0, r2
    255c:	9203      	str	r2, [sp, #12]
    255e:	4662      	mov	r2, ip
    2560:	001c      	movs	r4, r3
    2562:	0c3f      	lsrs	r7, r7, #16
    2564:	437a      	muls	r2, r7
    2566:	437c      	muls	r4, r7
    2568:	4442      	add	r2, r8
    256a:	9201      	str	r2, [sp, #4]
    256c:	0c22      	lsrs	r2, r4, #16
    256e:	4692      	mov	sl, r2
    2570:	9a01      	ldr	r2, [sp, #4]
    2572:	4452      	add	r2, sl
    2574:	4590      	cmp	r8, r2
    2576:	d906      	bls.n	2586 <__aeabi_dmul+0x23a>
    2578:	4682      	mov	sl, r0
    257a:	2080      	movs	r0, #128	; 0x80
    257c:	0240      	lsls	r0, r0, #9
    257e:	4680      	mov	r8, r0
    2580:	44c2      	add	sl, r8
    2582:	4650      	mov	r0, sl
    2584:	9003      	str	r0, [sp, #12]
    2586:	0c10      	lsrs	r0, r2, #16
    2588:	9004      	str	r0, [sp, #16]
    258a:	4648      	mov	r0, r9
    258c:	0424      	lsls	r4, r4, #16
    258e:	0c24      	lsrs	r4, r4, #16
    2590:	0412      	lsls	r2, r2, #16
    2592:	1912      	adds	r2, r2, r4
    2594:	9205      	str	r2, [sp, #20]
    2596:	0c2a      	lsrs	r2, r5, #16
    2598:	042d      	lsls	r5, r5, #16
    259a:	0c2d      	lsrs	r5, r5, #16
    259c:	4368      	muls	r0, r5
    259e:	002c      	movs	r4, r5
    25a0:	4682      	mov	sl, r0
    25a2:	4648      	mov	r0, r9
    25a4:	437c      	muls	r4, r7
    25a6:	4350      	muls	r0, r2
    25a8:	4681      	mov	r9, r0
    25aa:	0c20      	lsrs	r0, r4, #16
    25ac:	4680      	mov	r8, r0
    25ae:	4357      	muls	r7, r2
    25b0:	4457      	add	r7, sl
    25b2:	4447      	add	r7, r8
    25b4:	45ba      	cmp	sl, r7
    25b6:	d903      	bls.n	25c0 <__aeabi_dmul+0x274>
    25b8:	2080      	movs	r0, #128	; 0x80
    25ba:	0240      	lsls	r0, r0, #9
    25bc:	4680      	mov	r8, r0
    25be:	44c1      	add	r9, r8
    25c0:	0c38      	lsrs	r0, r7, #16
    25c2:	043f      	lsls	r7, r7, #16
    25c4:	46b8      	mov	r8, r7
    25c6:	4448      	add	r0, r9
    25c8:	0424      	lsls	r4, r4, #16
    25ca:	0c24      	lsrs	r4, r4, #16
    25cc:	9001      	str	r0, [sp, #4]
    25ce:	9804      	ldr	r0, [sp, #16]
    25d0:	44a0      	add	r8, r4
    25d2:	4440      	add	r0, r8
    25d4:	9004      	str	r0, [sp, #16]
    25d6:	4658      	mov	r0, fp
    25d8:	0c00      	lsrs	r0, r0, #16
    25da:	4681      	mov	r9, r0
    25dc:	4658      	mov	r0, fp
    25de:	0404      	lsls	r4, r0, #16
    25e0:	0c20      	lsrs	r0, r4, #16
    25e2:	4682      	mov	sl, r0
    25e4:	0007      	movs	r7, r0
    25e6:	4648      	mov	r0, r9
    25e8:	435f      	muls	r7, r3
    25ea:	464c      	mov	r4, r9
    25ec:	4343      	muls	r3, r0
    25ee:	4660      	mov	r0, ip
    25f0:	4360      	muls	r0, r4
    25f2:	4664      	mov	r4, ip
    25f4:	4683      	mov	fp, r0
    25f6:	4650      	mov	r0, sl
    25f8:	4344      	muls	r4, r0
    25fa:	0c38      	lsrs	r0, r7, #16
    25fc:	4684      	mov	ip, r0
    25fe:	18e4      	adds	r4, r4, r3
    2600:	4464      	add	r4, ip
    2602:	42a3      	cmp	r3, r4
    2604:	d903      	bls.n	260e <__aeabi_dmul+0x2c2>
    2606:	2380      	movs	r3, #128	; 0x80
    2608:	025b      	lsls	r3, r3, #9
    260a:	469c      	mov	ip, r3
    260c:	44e3      	add	fp, ip
    260e:	4648      	mov	r0, r9
    2610:	043f      	lsls	r7, r7, #16
    2612:	0c23      	lsrs	r3, r4, #16
    2614:	0c3f      	lsrs	r7, r7, #16
    2616:	0424      	lsls	r4, r4, #16
    2618:	19e4      	adds	r4, r4, r7
    261a:	4657      	mov	r7, sl
    261c:	4368      	muls	r0, r5
    261e:	436f      	muls	r7, r5
    2620:	4684      	mov	ip, r0
    2622:	464d      	mov	r5, r9
    2624:	4650      	mov	r0, sl
    2626:	4355      	muls	r5, r2
    2628:	4342      	muls	r2, r0
    262a:	0c38      	lsrs	r0, r7, #16
    262c:	4681      	mov	r9, r0
    262e:	4462      	add	r2, ip
    2630:	444a      	add	r2, r9
    2632:	445b      	add	r3, fp
    2634:	4594      	cmp	ip, r2
    2636:	d903      	bls.n	2640 <__aeabi_dmul+0x2f4>
    2638:	2080      	movs	r0, #128	; 0x80
    263a:	0240      	lsls	r0, r0, #9
    263c:	4684      	mov	ip, r0
    263e:	4465      	add	r5, ip
    2640:	9803      	ldr	r0, [sp, #12]
    2642:	043f      	lsls	r7, r7, #16
    2644:	4683      	mov	fp, r0
    2646:	9804      	ldr	r0, [sp, #16]
    2648:	0c3f      	lsrs	r7, r7, #16
    264a:	4684      	mov	ip, r0
    264c:	44e3      	add	fp, ip
    264e:	45c3      	cmp	fp, r8
    2650:	4180      	sbcs	r0, r0
    2652:	4240      	negs	r0, r0
    2654:	4682      	mov	sl, r0
    2656:	0410      	lsls	r0, r2, #16
    2658:	4684      	mov	ip, r0
    265a:	9801      	ldr	r0, [sp, #4]
    265c:	4467      	add	r7, ip
    265e:	4684      	mov	ip, r0
    2660:	4467      	add	r7, ip
    2662:	44a3      	add	fp, r4
    2664:	46bc      	mov	ip, r7
    2666:	45a3      	cmp	fp, r4
    2668:	41a4      	sbcs	r4, r4
    266a:	4699      	mov	r9, r3
    266c:	44d4      	add	ip, sl
    266e:	4264      	negs	r4, r4
    2670:	4287      	cmp	r7, r0
    2672:	41bf      	sbcs	r7, r7
    2674:	45d4      	cmp	ip, sl
    2676:	4180      	sbcs	r0, r0
    2678:	44e1      	add	r9, ip
    267a:	46a0      	mov	r8, r4
    267c:	4599      	cmp	r9, r3
    267e:	419b      	sbcs	r3, r3
    2680:	427f      	negs	r7, r7
    2682:	4240      	negs	r0, r0
    2684:	44c8      	add	r8, r9
    2686:	4307      	orrs	r7, r0
    2688:	0c12      	lsrs	r2, r2, #16
    268a:	18ba      	adds	r2, r7, r2
    268c:	45a0      	cmp	r8, r4
    268e:	41a4      	sbcs	r4, r4
    2690:	425f      	negs	r7, r3
    2692:	003b      	movs	r3, r7
    2694:	4264      	negs	r4, r4
    2696:	4323      	orrs	r3, r4
    2698:	18d7      	adds	r7, r2, r3
    269a:	4643      	mov	r3, r8
    269c:	197d      	adds	r5, r7, r5
    269e:	0ddb      	lsrs	r3, r3, #23
    26a0:	026d      	lsls	r5, r5, #9
    26a2:	431d      	orrs	r5, r3
    26a4:	465b      	mov	r3, fp
    26a6:	025a      	lsls	r2, r3, #9
    26a8:	9b05      	ldr	r3, [sp, #20]
    26aa:	431a      	orrs	r2, r3
    26ac:	1e53      	subs	r3, r2, #1
    26ae:	419a      	sbcs	r2, r3
    26b0:	465b      	mov	r3, fp
    26b2:	0ddb      	lsrs	r3, r3, #23
    26b4:	431a      	orrs	r2, r3
    26b6:	4643      	mov	r3, r8
    26b8:	025b      	lsls	r3, r3, #9
    26ba:	4313      	orrs	r3, r2
    26bc:	01ea      	lsls	r2, r5, #7
    26be:	d507      	bpl.n	26d0 <__aeabi_dmul+0x384>
    26c0:	2201      	movs	r2, #1
    26c2:	085c      	lsrs	r4, r3, #1
    26c4:	4013      	ands	r3, r2
    26c6:	4323      	orrs	r3, r4
    26c8:	07ea      	lsls	r2, r5, #31
    26ca:	9e02      	ldr	r6, [sp, #8]
    26cc:	4313      	orrs	r3, r2
    26ce:	086d      	lsrs	r5, r5, #1
    26d0:	4a57      	ldr	r2, [pc, #348]	; (2830 <__aeabi_dmul+0x4e4>)
    26d2:	18b2      	adds	r2, r6, r2
    26d4:	2a00      	cmp	r2, #0
    26d6:	dd4b      	ble.n	2770 <__aeabi_dmul+0x424>
    26d8:	0758      	lsls	r0, r3, #29
    26da:	d009      	beq.n	26f0 <__aeabi_dmul+0x3a4>
    26dc:	200f      	movs	r0, #15
    26de:	4018      	ands	r0, r3
    26e0:	2804      	cmp	r0, #4
    26e2:	d005      	beq.n	26f0 <__aeabi_dmul+0x3a4>
    26e4:	1d18      	adds	r0, r3, #4
    26e6:	4298      	cmp	r0, r3
    26e8:	419b      	sbcs	r3, r3
    26ea:	425b      	negs	r3, r3
    26ec:	18ed      	adds	r5, r5, r3
    26ee:	0003      	movs	r3, r0
    26f0:	01e8      	lsls	r0, r5, #7
    26f2:	d504      	bpl.n	26fe <__aeabi_dmul+0x3b2>
    26f4:	4a4f      	ldr	r2, [pc, #316]	; (2834 <__aeabi_dmul+0x4e8>)
    26f6:	4015      	ands	r5, r2
    26f8:	2280      	movs	r2, #128	; 0x80
    26fa:	00d2      	lsls	r2, r2, #3
    26fc:	18b2      	adds	r2, r6, r2
    26fe:	484e      	ldr	r0, [pc, #312]	; (2838 <__aeabi_dmul+0x4ec>)
    2700:	4282      	cmp	r2, r0
    2702:	dd00      	ble.n	2706 <__aeabi_dmul+0x3ba>
    2704:	e6e7      	b.n	24d6 <__aeabi_dmul+0x18a>
    2706:	2401      	movs	r4, #1
    2708:	08db      	lsrs	r3, r3, #3
    270a:	0768      	lsls	r0, r5, #29
    270c:	4318      	orrs	r0, r3
    270e:	026d      	lsls	r5, r5, #9
    2710:	0553      	lsls	r3, r2, #21
    2712:	4680      	mov	r8, r0
    2714:	0b2d      	lsrs	r5, r5, #12
    2716:	0d5b      	lsrs	r3, r3, #21
    2718:	400c      	ands	r4, r1
    271a:	e67d      	b.n	2418 <__aeabi_dmul+0xcc>
    271c:	2280      	movs	r2, #128	; 0x80
    271e:	4659      	mov	r1, fp
    2720:	0312      	lsls	r2, r2, #12
    2722:	4211      	tst	r1, r2
    2724:	d008      	beq.n	2738 <__aeabi_dmul+0x3ec>
    2726:	4215      	tst	r5, r2
    2728:	d106      	bne.n	2738 <__aeabi_dmul+0x3ec>
    272a:	4315      	orrs	r5, r2
    272c:	032d      	lsls	r5, r5, #12
    272e:	4698      	mov	r8, r3
    2730:	0b2d      	lsrs	r5, r5, #12
    2732:	464c      	mov	r4, r9
    2734:	4b41      	ldr	r3, [pc, #260]	; (283c <__aeabi_dmul+0x4f0>)
    2736:	e66f      	b.n	2418 <__aeabi_dmul+0xcc>
    2738:	465d      	mov	r5, fp
    273a:	4315      	orrs	r5, r2
    273c:	032d      	lsls	r5, r5, #12
    273e:	0b2d      	lsrs	r5, r5, #12
    2740:	4b3e      	ldr	r3, [pc, #248]	; (283c <__aeabi_dmul+0x4f0>)
    2742:	e669      	b.n	2418 <__aeabi_dmul+0xcc>
    2744:	0003      	movs	r3, r0
    2746:	4655      	mov	r5, sl
    2748:	3b28      	subs	r3, #40	; 0x28
    274a:	409d      	lsls	r5, r3
    274c:	2300      	movs	r3, #0
    274e:	e6bc      	b.n	24ca <__aeabi_dmul+0x17e>
    2750:	4650      	mov	r0, sl
    2752:	f000 fd59 	bl	3208 <__clzsi2>
    2756:	3020      	adds	r0, #32
    2758:	e6a8      	b.n	24ac <__aeabi_dmul+0x160>
    275a:	0003      	movs	r3, r0
    275c:	3b28      	subs	r3, #40	; 0x28
    275e:	409f      	lsls	r7, r3
    2760:	2300      	movs	r3, #0
    2762:	46bb      	mov	fp, r7
    2764:	4698      	mov	r8, r3
    2766:	e689      	b.n	247c <__aeabi_dmul+0x130>
    2768:	f000 fd4e 	bl	3208 <__clzsi2>
    276c:	3020      	adds	r0, #32
    276e:	e673      	b.n	2458 <__aeabi_dmul+0x10c>
    2770:	2401      	movs	r4, #1
    2772:	1aa6      	subs	r6, r4, r2
    2774:	2e38      	cmp	r6, #56	; 0x38
    2776:	dd07      	ble.n	2788 <__aeabi_dmul+0x43c>
    2778:	2200      	movs	r2, #0
    277a:	400c      	ands	r4, r1
    277c:	2300      	movs	r3, #0
    277e:	2500      	movs	r5, #0
    2780:	4690      	mov	r8, r2
    2782:	e649      	b.n	2418 <__aeabi_dmul+0xcc>
    2784:	9e02      	ldr	r6, [sp, #8]
    2786:	e7a3      	b.n	26d0 <__aeabi_dmul+0x384>
    2788:	2e1f      	cmp	r6, #31
    278a:	dc20      	bgt.n	27ce <__aeabi_dmul+0x482>
    278c:	2220      	movs	r2, #32
    278e:	002c      	movs	r4, r5
    2790:	0018      	movs	r0, r3
    2792:	1b92      	subs	r2, r2, r6
    2794:	40f0      	lsrs	r0, r6
    2796:	4094      	lsls	r4, r2
    2798:	4093      	lsls	r3, r2
    279a:	4304      	orrs	r4, r0
    279c:	1e58      	subs	r0, r3, #1
    279e:	4183      	sbcs	r3, r0
    27a0:	431c      	orrs	r4, r3
    27a2:	40f5      	lsrs	r5, r6
    27a4:	0763      	lsls	r3, r4, #29
    27a6:	d009      	beq.n	27bc <__aeabi_dmul+0x470>
    27a8:	230f      	movs	r3, #15
    27aa:	4023      	ands	r3, r4
    27ac:	2b04      	cmp	r3, #4
    27ae:	d005      	beq.n	27bc <__aeabi_dmul+0x470>
    27b0:	0023      	movs	r3, r4
    27b2:	1d1c      	adds	r4, r3, #4
    27b4:	429c      	cmp	r4, r3
    27b6:	4192      	sbcs	r2, r2
    27b8:	4252      	negs	r2, r2
    27ba:	18ad      	adds	r5, r5, r2
    27bc:	022b      	lsls	r3, r5, #8
    27be:	d51f      	bpl.n	2800 <__aeabi_dmul+0x4b4>
    27c0:	2401      	movs	r4, #1
    27c2:	2200      	movs	r2, #0
    27c4:	400c      	ands	r4, r1
    27c6:	2301      	movs	r3, #1
    27c8:	2500      	movs	r5, #0
    27ca:	4690      	mov	r8, r2
    27cc:	e624      	b.n	2418 <__aeabi_dmul+0xcc>
    27ce:	201f      	movs	r0, #31
    27d0:	002c      	movs	r4, r5
    27d2:	4240      	negs	r0, r0
    27d4:	1a82      	subs	r2, r0, r2
    27d6:	40d4      	lsrs	r4, r2
    27d8:	2e20      	cmp	r6, #32
    27da:	d01c      	beq.n	2816 <__aeabi_dmul+0x4ca>
    27dc:	2240      	movs	r2, #64	; 0x40
    27de:	1b96      	subs	r6, r2, r6
    27e0:	40b5      	lsls	r5, r6
    27e2:	432b      	orrs	r3, r5
    27e4:	1e58      	subs	r0, r3, #1
    27e6:	4183      	sbcs	r3, r0
    27e8:	2007      	movs	r0, #7
    27ea:	4323      	orrs	r3, r4
    27ec:	4018      	ands	r0, r3
    27ee:	2500      	movs	r5, #0
    27f0:	2800      	cmp	r0, #0
    27f2:	d009      	beq.n	2808 <__aeabi_dmul+0x4bc>
    27f4:	220f      	movs	r2, #15
    27f6:	2500      	movs	r5, #0
    27f8:	401a      	ands	r2, r3
    27fa:	001c      	movs	r4, r3
    27fc:	2a04      	cmp	r2, #4
    27fe:	d1d8      	bne.n	27b2 <__aeabi_dmul+0x466>
    2800:	0023      	movs	r3, r4
    2802:	0768      	lsls	r0, r5, #29
    2804:	026d      	lsls	r5, r5, #9
    2806:	0b2d      	lsrs	r5, r5, #12
    2808:	2401      	movs	r4, #1
    280a:	08db      	lsrs	r3, r3, #3
    280c:	4303      	orrs	r3, r0
    280e:	4698      	mov	r8, r3
    2810:	400c      	ands	r4, r1
    2812:	2300      	movs	r3, #0
    2814:	e600      	b.n	2418 <__aeabi_dmul+0xcc>
    2816:	2500      	movs	r5, #0
    2818:	e7e3      	b.n	27e2 <__aeabi_dmul+0x496>
    281a:	2280      	movs	r2, #128	; 0x80
    281c:	2401      	movs	r4, #1
    281e:	0312      	lsls	r2, r2, #12
    2820:	4315      	orrs	r5, r2
    2822:	032d      	lsls	r5, r5, #12
    2824:	4698      	mov	r8, r3
    2826:	0b2d      	lsrs	r5, r5, #12
    2828:	400c      	ands	r4, r1
    282a:	4b04      	ldr	r3, [pc, #16]	; (283c <__aeabi_dmul+0x4f0>)
    282c:	e5f4      	b.n	2418 <__aeabi_dmul+0xcc>
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	000003ff 	.word	0x000003ff
    2834:	feffffff 	.word	0xfeffffff
    2838:	000007fe 	.word	0x000007fe
    283c:	000007ff 	.word	0x000007ff

00002840 <__aeabi_dsub>:
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	4657      	mov	r7, sl
    2844:	464e      	mov	r6, r9
    2846:	4645      	mov	r5, r8
    2848:	b4e0      	push	{r5, r6, r7}
    284a:	000e      	movs	r6, r1
    284c:	0011      	movs	r1, r2
    284e:	0ff2      	lsrs	r2, r6, #31
    2850:	4692      	mov	sl, r2
    2852:	00c5      	lsls	r5, r0, #3
    2854:	0f42      	lsrs	r2, r0, #29
    2856:	0318      	lsls	r0, r3, #12
    2858:	0337      	lsls	r7, r6, #12
    285a:	0074      	lsls	r4, r6, #1
    285c:	0a40      	lsrs	r0, r0, #9
    285e:	0f4e      	lsrs	r6, r1, #29
    2860:	0a7f      	lsrs	r7, r7, #9
    2862:	4330      	orrs	r0, r6
    2864:	4ecf      	ldr	r6, [pc, #828]	; (2ba4 <__aeabi_dsub+0x364>)
    2866:	4317      	orrs	r7, r2
    2868:	005a      	lsls	r2, r3, #1
    286a:	0d64      	lsrs	r4, r4, #21
    286c:	0d52      	lsrs	r2, r2, #21
    286e:	0fdb      	lsrs	r3, r3, #31
    2870:	00c9      	lsls	r1, r1, #3
    2872:	42b2      	cmp	r2, r6
    2874:	d100      	bne.n	2878 <__aeabi_dsub+0x38>
    2876:	e0e5      	b.n	2a44 <__aeabi_dsub+0x204>
    2878:	2601      	movs	r6, #1
    287a:	4073      	eors	r3, r6
    287c:	1aa6      	subs	r6, r4, r2
    287e:	46b4      	mov	ip, r6
    2880:	4553      	cmp	r3, sl
    2882:	d100      	bne.n	2886 <__aeabi_dsub+0x46>
    2884:	e0af      	b.n	29e6 <__aeabi_dsub+0x1a6>
    2886:	2e00      	cmp	r6, #0
    2888:	dc00      	bgt.n	288c <__aeabi_dsub+0x4c>
    288a:	e10d      	b.n	2aa8 <__aeabi_dsub+0x268>
    288c:	2a00      	cmp	r2, #0
    288e:	d13a      	bne.n	2906 <__aeabi_dsub+0xc6>
    2890:	0003      	movs	r3, r0
    2892:	430b      	orrs	r3, r1
    2894:	d000      	beq.n	2898 <__aeabi_dsub+0x58>
    2896:	e0e4      	b.n	2a62 <__aeabi_dsub+0x222>
    2898:	076b      	lsls	r3, r5, #29
    289a:	d009      	beq.n	28b0 <__aeabi_dsub+0x70>
    289c:	230f      	movs	r3, #15
    289e:	402b      	ands	r3, r5
    28a0:	2b04      	cmp	r3, #4
    28a2:	d005      	beq.n	28b0 <__aeabi_dsub+0x70>
    28a4:	1d2b      	adds	r3, r5, #4
    28a6:	42ab      	cmp	r3, r5
    28a8:	41ad      	sbcs	r5, r5
    28aa:	426d      	negs	r5, r5
    28ac:	197f      	adds	r7, r7, r5
    28ae:	001d      	movs	r5, r3
    28b0:	023b      	lsls	r3, r7, #8
    28b2:	d400      	bmi.n	28b6 <__aeabi_dsub+0x76>
    28b4:	e088      	b.n	29c8 <__aeabi_dsub+0x188>
    28b6:	4bbb      	ldr	r3, [pc, #748]	; (2ba4 <__aeabi_dsub+0x364>)
    28b8:	3401      	adds	r4, #1
    28ba:	429c      	cmp	r4, r3
    28bc:	d100      	bne.n	28c0 <__aeabi_dsub+0x80>
    28be:	e110      	b.n	2ae2 <__aeabi_dsub+0x2a2>
    28c0:	003a      	movs	r2, r7
    28c2:	4bb9      	ldr	r3, [pc, #740]	; (2ba8 <__aeabi_dsub+0x368>)
    28c4:	4651      	mov	r1, sl
    28c6:	401a      	ands	r2, r3
    28c8:	2301      	movs	r3, #1
    28ca:	0750      	lsls	r0, r2, #29
    28cc:	08ed      	lsrs	r5, r5, #3
    28ce:	0252      	lsls	r2, r2, #9
    28d0:	0564      	lsls	r4, r4, #21
    28d2:	4305      	orrs	r5, r0
    28d4:	0b12      	lsrs	r2, r2, #12
    28d6:	0d64      	lsrs	r4, r4, #21
    28d8:	400b      	ands	r3, r1
    28da:	2100      	movs	r1, #0
    28dc:	0028      	movs	r0, r5
    28de:	0312      	lsls	r2, r2, #12
    28e0:	0d0d      	lsrs	r5, r1, #20
    28e2:	0b12      	lsrs	r2, r2, #12
    28e4:	0564      	lsls	r4, r4, #21
    28e6:	052d      	lsls	r5, r5, #20
    28e8:	4315      	orrs	r5, r2
    28ea:	0862      	lsrs	r2, r4, #1
    28ec:	4caf      	ldr	r4, [pc, #700]	; (2bac <__aeabi_dsub+0x36c>)
    28ee:	07db      	lsls	r3, r3, #31
    28f0:	402c      	ands	r4, r5
    28f2:	4314      	orrs	r4, r2
    28f4:	0064      	lsls	r4, r4, #1
    28f6:	0864      	lsrs	r4, r4, #1
    28f8:	431c      	orrs	r4, r3
    28fa:	0021      	movs	r1, r4
    28fc:	bc1c      	pop	{r2, r3, r4}
    28fe:	4690      	mov	r8, r2
    2900:	4699      	mov	r9, r3
    2902:	46a2      	mov	sl, r4
    2904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2906:	4ba7      	ldr	r3, [pc, #668]	; (2ba4 <__aeabi_dsub+0x364>)
    2908:	429c      	cmp	r4, r3
    290a:	d0c5      	beq.n	2898 <__aeabi_dsub+0x58>
    290c:	2380      	movs	r3, #128	; 0x80
    290e:	041b      	lsls	r3, r3, #16
    2910:	4318      	orrs	r0, r3
    2912:	4663      	mov	r3, ip
    2914:	2b38      	cmp	r3, #56	; 0x38
    2916:	dd00      	ble.n	291a <__aeabi_dsub+0xda>
    2918:	e0fd      	b.n	2b16 <__aeabi_dsub+0x2d6>
    291a:	2b1f      	cmp	r3, #31
    291c:	dd00      	ble.n	2920 <__aeabi_dsub+0xe0>
    291e:	e130      	b.n	2b82 <__aeabi_dsub+0x342>
    2920:	4662      	mov	r2, ip
    2922:	2320      	movs	r3, #32
    2924:	1a9b      	subs	r3, r3, r2
    2926:	0002      	movs	r2, r0
    2928:	409a      	lsls	r2, r3
    292a:	4666      	mov	r6, ip
    292c:	4690      	mov	r8, r2
    292e:	000a      	movs	r2, r1
    2930:	4099      	lsls	r1, r3
    2932:	40f2      	lsrs	r2, r6
    2934:	4646      	mov	r6, r8
    2936:	1e4b      	subs	r3, r1, #1
    2938:	4199      	sbcs	r1, r3
    293a:	4332      	orrs	r2, r6
    293c:	4311      	orrs	r1, r2
    293e:	4663      	mov	r3, ip
    2940:	0002      	movs	r2, r0
    2942:	40da      	lsrs	r2, r3
    2944:	1a69      	subs	r1, r5, r1
    2946:	428d      	cmp	r5, r1
    2948:	419b      	sbcs	r3, r3
    294a:	000d      	movs	r5, r1
    294c:	1aba      	subs	r2, r7, r2
    294e:	425b      	negs	r3, r3
    2950:	1ad7      	subs	r7, r2, r3
    2952:	023b      	lsls	r3, r7, #8
    2954:	d535      	bpl.n	29c2 <__aeabi_dsub+0x182>
    2956:	027a      	lsls	r2, r7, #9
    2958:	0a53      	lsrs	r3, r2, #9
    295a:	4698      	mov	r8, r3
    295c:	4643      	mov	r3, r8
    295e:	2b00      	cmp	r3, #0
    2960:	d100      	bne.n	2964 <__aeabi_dsub+0x124>
    2962:	e0c4      	b.n	2aee <__aeabi_dsub+0x2ae>
    2964:	4640      	mov	r0, r8
    2966:	f000 fc4f 	bl	3208 <__clzsi2>
    296a:	0003      	movs	r3, r0
    296c:	3b08      	subs	r3, #8
    296e:	2b1f      	cmp	r3, #31
    2970:	dd00      	ble.n	2974 <__aeabi_dsub+0x134>
    2972:	e0c5      	b.n	2b00 <__aeabi_dsub+0x2c0>
    2974:	2220      	movs	r2, #32
    2976:	0029      	movs	r1, r5
    2978:	1ad2      	subs	r2, r2, r3
    297a:	4647      	mov	r7, r8
    297c:	40d1      	lsrs	r1, r2
    297e:	409f      	lsls	r7, r3
    2980:	000a      	movs	r2, r1
    2982:	409d      	lsls	r5, r3
    2984:	433a      	orrs	r2, r7
    2986:	429c      	cmp	r4, r3
    2988:	dd00      	ble.n	298c <__aeabi_dsub+0x14c>
    298a:	e0c0      	b.n	2b0e <__aeabi_dsub+0x2ce>
    298c:	1b1c      	subs	r4, r3, r4
    298e:	1c63      	adds	r3, r4, #1
    2990:	2b1f      	cmp	r3, #31
    2992:	dd00      	ble.n	2996 <__aeabi_dsub+0x156>
    2994:	e0e4      	b.n	2b60 <__aeabi_dsub+0x320>
    2996:	2120      	movs	r1, #32
    2998:	0014      	movs	r4, r2
    299a:	0028      	movs	r0, r5
    299c:	1ac9      	subs	r1, r1, r3
    299e:	40d8      	lsrs	r0, r3
    29a0:	408c      	lsls	r4, r1
    29a2:	408d      	lsls	r5, r1
    29a4:	4304      	orrs	r4, r0
    29a6:	40da      	lsrs	r2, r3
    29a8:	1e68      	subs	r0, r5, #1
    29aa:	4185      	sbcs	r5, r0
    29ac:	0017      	movs	r7, r2
    29ae:	4325      	orrs	r5, r4
    29b0:	2400      	movs	r4, #0
    29b2:	e771      	b.n	2898 <__aeabi_dsub+0x58>
    29b4:	4642      	mov	r2, r8
    29b6:	4663      	mov	r3, ip
    29b8:	431a      	orrs	r2, r3
    29ba:	d100      	bne.n	29be <__aeabi_dsub+0x17e>
    29bc:	e24c      	b.n	2e58 <__aeabi_dsub+0x618>
    29be:	4667      	mov	r7, ip
    29c0:	4645      	mov	r5, r8
    29c2:	076b      	lsls	r3, r5, #29
    29c4:	d000      	beq.n	29c8 <__aeabi_dsub+0x188>
    29c6:	e769      	b.n	289c <__aeabi_dsub+0x5c>
    29c8:	2301      	movs	r3, #1
    29ca:	4651      	mov	r1, sl
    29cc:	0778      	lsls	r0, r7, #29
    29ce:	08ed      	lsrs	r5, r5, #3
    29d0:	08fa      	lsrs	r2, r7, #3
    29d2:	400b      	ands	r3, r1
    29d4:	4305      	orrs	r5, r0
    29d6:	4973      	ldr	r1, [pc, #460]	; (2ba4 <__aeabi_dsub+0x364>)
    29d8:	428c      	cmp	r4, r1
    29da:	d038      	beq.n	2a4e <__aeabi_dsub+0x20e>
    29dc:	0312      	lsls	r2, r2, #12
    29de:	0564      	lsls	r4, r4, #21
    29e0:	0b12      	lsrs	r2, r2, #12
    29e2:	0d64      	lsrs	r4, r4, #21
    29e4:	e779      	b.n	28da <__aeabi_dsub+0x9a>
    29e6:	2e00      	cmp	r6, #0
    29e8:	dc00      	bgt.n	29ec <__aeabi_dsub+0x1ac>
    29ea:	e09a      	b.n	2b22 <__aeabi_dsub+0x2e2>
    29ec:	2a00      	cmp	r2, #0
    29ee:	d047      	beq.n	2a80 <__aeabi_dsub+0x240>
    29f0:	4a6c      	ldr	r2, [pc, #432]	; (2ba4 <__aeabi_dsub+0x364>)
    29f2:	4294      	cmp	r4, r2
    29f4:	d100      	bne.n	29f8 <__aeabi_dsub+0x1b8>
    29f6:	e74f      	b.n	2898 <__aeabi_dsub+0x58>
    29f8:	2280      	movs	r2, #128	; 0x80
    29fa:	0412      	lsls	r2, r2, #16
    29fc:	4310      	orrs	r0, r2
    29fe:	4662      	mov	r2, ip
    2a00:	2a38      	cmp	r2, #56	; 0x38
    2a02:	dc00      	bgt.n	2a06 <__aeabi_dsub+0x1c6>
    2a04:	e108      	b.n	2c18 <__aeabi_dsub+0x3d8>
    2a06:	4301      	orrs	r1, r0
    2a08:	1e48      	subs	r0, r1, #1
    2a0a:	4181      	sbcs	r1, r0
    2a0c:	2200      	movs	r2, #0
    2a0e:	b2c9      	uxtb	r1, r1
    2a10:	1949      	adds	r1, r1, r5
    2a12:	19d2      	adds	r2, r2, r7
    2a14:	42a9      	cmp	r1, r5
    2a16:	41bf      	sbcs	r7, r7
    2a18:	000d      	movs	r5, r1
    2a1a:	427f      	negs	r7, r7
    2a1c:	18bf      	adds	r7, r7, r2
    2a1e:	023a      	lsls	r2, r7, #8
    2a20:	d400      	bmi.n	2a24 <__aeabi_dsub+0x1e4>
    2a22:	e142      	b.n	2caa <__aeabi_dsub+0x46a>
    2a24:	4a5f      	ldr	r2, [pc, #380]	; (2ba4 <__aeabi_dsub+0x364>)
    2a26:	3401      	adds	r4, #1
    2a28:	4294      	cmp	r4, r2
    2a2a:	d100      	bne.n	2a2e <__aeabi_dsub+0x1ee>
    2a2c:	e14e      	b.n	2ccc <__aeabi_dsub+0x48c>
    2a2e:	2001      	movs	r0, #1
    2a30:	4a5d      	ldr	r2, [pc, #372]	; (2ba8 <__aeabi_dsub+0x368>)
    2a32:	0869      	lsrs	r1, r5, #1
    2a34:	403a      	ands	r2, r7
    2a36:	4028      	ands	r0, r5
    2a38:	4308      	orrs	r0, r1
    2a3a:	07d5      	lsls	r5, r2, #31
    2a3c:	4305      	orrs	r5, r0
    2a3e:	0857      	lsrs	r7, r2, #1
    2a40:	469a      	mov	sl, r3
    2a42:	e729      	b.n	2898 <__aeabi_dsub+0x58>
    2a44:	0006      	movs	r6, r0
    2a46:	430e      	orrs	r6, r1
    2a48:	d000      	beq.n	2a4c <__aeabi_dsub+0x20c>
    2a4a:	e717      	b.n	287c <__aeabi_dsub+0x3c>
    2a4c:	e714      	b.n	2878 <__aeabi_dsub+0x38>
    2a4e:	0029      	movs	r1, r5
    2a50:	4311      	orrs	r1, r2
    2a52:	d100      	bne.n	2a56 <__aeabi_dsub+0x216>
    2a54:	e1f9      	b.n	2e4a <__aeabi_dsub+0x60a>
    2a56:	2180      	movs	r1, #128	; 0x80
    2a58:	0309      	lsls	r1, r1, #12
    2a5a:	430a      	orrs	r2, r1
    2a5c:	0312      	lsls	r2, r2, #12
    2a5e:	0b12      	lsrs	r2, r2, #12
    2a60:	e73b      	b.n	28da <__aeabi_dsub+0x9a>
    2a62:	2301      	movs	r3, #1
    2a64:	425b      	negs	r3, r3
    2a66:	4698      	mov	r8, r3
    2a68:	44c4      	add	ip, r8
    2a6a:	4663      	mov	r3, ip
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d172      	bne.n	2b56 <__aeabi_dsub+0x316>
    2a70:	1a69      	subs	r1, r5, r1
    2a72:	428d      	cmp	r5, r1
    2a74:	419b      	sbcs	r3, r3
    2a76:	1a3f      	subs	r7, r7, r0
    2a78:	425b      	negs	r3, r3
    2a7a:	1aff      	subs	r7, r7, r3
    2a7c:	000d      	movs	r5, r1
    2a7e:	e768      	b.n	2952 <__aeabi_dsub+0x112>
    2a80:	0002      	movs	r2, r0
    2a82:	430a      	orrs	r2, r1
    2a84:	d100      	bne.n	2a88 <__aeabi_dsub+0x248>
    2a86:	e707      	b.n	2898 <__aeabi_dsub+0x58>
    2a88:	2201      	movs	r2, #1
    2a8a:	4252      	negs	r2, r2
    2a8c:	4690      	mov	r8, r2
    2a8e:	44c4      	add	ip, r8
    2a90:	4662      	mov	r2, ip
    2a92:	2a00      	cmp	r2, #0
    2a94:	d000      	beq.n	2a98 <__aeabi_dsub+0x258>
    2a96:	e0e6      	b.n	2c66 <__aeabi_dsub+0x426>
    2a98:	1869      	adds	r1, r5, r1
    2a9a:	42a9      	cmp	r1, r5
    2a9c:	41b6      	sbcs	r6, r6
    2a9e:	183f      	adds	r7, r7, r0
    2aa0:	4276      	negs	r6, r6
    2aa2:	19f7      	adds	r7, r6, r7
    2aa4:	000d      	movs	r5, r1
    2aa6:	e7ba      	b.n	2a1e <__aeabi_dsub+0x1de>
    2aa8:	2e00      	cmp	r6, #0
    2aaa:	d000      	beq.n	2aae <__aeabi_dsub+0x26e>
    2aac:	e080      	b.n	2bb0 <__aeabi_dsub+0x370>
    2aae:	1c62      	adds	r2, r4, #1
    2ab0:	0552      	lsls	r2, r2, #21
    2ab2:	0d52      	lsrs	r2, r2, #21
    2ab4:	2a01      	cmp	r2, #1
    2ab6:	dc00      	bgt.n	2aba <__aeabi_dsub+0x27a>
    2ab8:	e0f9      	b.n	2cae <__aeabi_dsub+0x46e>
    2aba:	1a6a      	subs	r2, r5, r1
    2abc:	4691      	mov	r9, r2
    2abe:	454d      	cmp	r5, r9
    2ac0:	41b6      	sbcs	r6, r6
    2ac2:	1a3a      	subs	r2, r7, r0
    2ac4:	4276      	negs	r6, r6
    2ac6:	1b92      	subs	r2, r2, r6
    2ac8:	4690      	mov	r8, r2
    2aca:	0212      	lsls	r2, r2, #8
    2acc:	d400      	bmi.n	2ad0 <__aeabi_dsub+0x290>
    2ace:	e099      	b.n	2c04 <__aeabi_dsub+0x3c4>
    2ad0:	1b4d      	subs	r5, r1, r5
    2ad2:	42a9      	cmp	r1, r5
    2ad4:	4189      	sbcs	r1, r1
    2ad6:	1bc7      	subs	r7, r0, r7
    2ad8:	4249      	negs	r1, r1
    2ada:	1a7a      	subs	r2, r7, r1
    2adc:	4690      	mov	r8, r2
    2ade:	469a      	mov	sl, r3
    2ae0:	e73c      	b.n	295c <__aeabi_dsub+0x11c>
    2ae2:	4652      	mov	r2, sl
    2ae4:	2301      	movs	r3, #1
    2ae6:	2500      	movs	r5, #0
    2ae8:	4013      	ands	r3, r2
    2aea:	2200      	movs	r2, #0
    2aec:	e6f5      	b.n	28da <__aeabi_dsub+0x9a>
    2aee:	0028      	movs	r0, r5
    2af0:	f000 fb8a 	bl	3208 <__clzsi2>
    2af4:	3020      	adds	r0, #32
    2af6:	0003      	movs	r3, r0
    2af8:	3b08      	subs	r3, #8
    2afa:	2b1f      	cmp	r3, #31
    2afc:	dc00      	bgt.n	2b00 <__aeabi_dsub+0x2c0>
    2afe:	e739      	b.n	2974 <__aeabi_dsub+0x134>
    2b00:	002a      	movs	r2, r5
    2b02:	3828      	subs	r0, #40	; 0x28
    2b04:	4082      	lsls	r2, r0
    2b06:	2500      	movs	r5, #0
    2b08:	429c      	cmp	r4, r3
    2b0a:	dc00      	bgt.n	2b0e <__aeabi_dsub+0x2ce>
    2b0c:	e73e      	b.n	298c <__aeabi_dsub+0x14c>
    2b0e:	4f26      	ldr	r7, [pc, #152]	; (2ba8 <__aeabi_dsub+0x368>)
    2b10:	1ae4      	subs	r4, r4, r3
    2b12:	4017      	ands	r7, r2
    2b14:	e6c0      	b.n	2898 <__aeabi_dsub+0x58>
    2b16:	4301      	orrs	r1, r0
    2b18:	1e48      	subs	r0, r1, #1
    2b1a:	4181      	sbcs	r1, r0
    2b1c:	2200      	movs	r2, #0
    2b1e:	b2c9      	uxtb	r1, r1
    2b20:	e710      	b.n	2944 <__aeabi_dsub+0x104>
    2b22:	2e00      	cmp	r6, #0
    2b24:	d000      	beq.n	2b28 <__aeabi_dsub+0x2e8>
    2b26:	e0f1      	b.n	2d0c <__aeabi_dsub+0x4cc>
    2b28:	1c62      	adds	r2, r4, #1
    2b2a:	4694      	mov	ip, r2
    2b2c:	0552      	lsls	r2, r2, #21
    2b2e:	0d52      	lsrs	r2, r2, #21
    2b30:	2a01      	cmp	r2, #1
    2b32:	dc00      	bgt.n	2b36 <__aeabi_dsub+0x2f6>
    2b34:	e0a0      	b.n	2c78 <__aeabi_dsub+0x438>
    2b36:	4a1b      	ldr	r2, [pc, #108]	; (2ba4 <__aeabi_dsub+0x364>)
    2b38:	4594      	cmp	ip, r2
    2b3a:	d100      	bne.n	2b3e <__aeabi_dsub+0x2fe>
    2b3c:	e0c5      	b.n	2cca <__aeabi_dsub+0x48a>
    2b3e:	1869      	adds	r1, r5, r1
    2b40:	42a9      	cmp	r1, r5
    2b42:	4192      	sbcs	r2, r2
    2b44:	183f      	adds	r7, r7, r0
    2b46:	4252      	negs	r2, r2
    2b48:	19d2      	adds	r2, r2, r7
    2b4a:	0849      	lsrs	r1, r1, #1
    2b4c:	07d5      	lsls	r5, r2, #31
    2b4e:	430d      	orrs	r5, r1
    2b50:	0857      	lsrs	r7, r2, #1
    2b52:	4664      	mov	r4, ip
    2b54:	e6a0      	b.n	2898 <__aeabi_dsub+0x58>
    2b56:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <__aeabi_dsub+0x364>)
    2b58:	429c      	cmp	r4, r3
    2b5a:	d000      	beq.n	2b5e <__aeabi_dsub+0x31e>
    2b5c:	e6d9      	b.n	2912 <__aeabi_dsub+0xd2>
    2b5e:	e69b      	b.n	2898 <__aeabi_dsub+0x58>
    2b60:	0011      	movs	r1, r2
    2b62:	3c1f      	subs	r4, #31
    2b64:	40e1      	lsrs	r1, r4
    2b66:	000c      	movs	r4, r1
    2b68:	2b20      	cmp	r3, #32
    2b6a:	d100      	bne.n	2b6e <__aeabi_dsub+0x32e>
    2b6c:	e080      	b.n	2c70 <__aeabi_dsub+0x430>
    2b6e:	2140      	movs	r1, #64	; 0x40
    2b70:	1acb      	subs	r3, r1, r3
    2b72:	409a      	lsls	r2, r3
    2b74:	4315      	orrs	r5, r2
    2b76:	1e6a      	subs	r2, r5, #1
    2b78:	4195      	sbcs	r5, r2
    2b7a:	2700      	movs	r7, #0
    2b7c:	4325      	orrs	r5, r4
    2b7e:	2400      	movs	r4, #0
    2b80:	e71f      	b.n	29c2 <__aeabi_dsub+0x182>
    2b82:	4663      	mov	r3, ip
    2b84:	0002      	movs	r2, r0
    2b86:	3b20      	subs	r3, #32
    2b88:	40da      	lsrs	r2, r3
    2b8a:	4663      	mov	r3, ip
    2b8c:	2b20      	cmp	r3, #32
    2b8e:	d071      	beq.n	2c74 <__aeabi_dsub+0x434>
    2b90:	2340      	movs	r3, #64	; 0x40
    2b92:	4666      	mov	r6, ip
    2b94:	1b9b      	subs	r3, r3, r6
    2b96:	4098      	lsls	r0, r3
    2b98:	4301      	orrs	r1, r0
    2b9a:	1e48      	subs	r0, r1, #1
    2b9c:	4181      	sbcs	r1, r0
    2b9e:	4311      	orrs	r1, r2
    2ba0:	2200      	movs	r2, #0
    2ba2:	e6cf      	b.n	2944 <__aeabi_dsub+0x104>
    2ba4:	000007ff 	.word	0x000007ff
    2ba8:	ff7fffff 	.word	0xff7fffff
    2bac:	800fffff 	.word	0x800fffff
    2bb0:	2c00      	cmp	r4, #0
    2bb2:	d048      	beq.n	2c46 <__aeabi_dsub+0x406>
    2bb4:	4cca      	ldr	r4, [pc, #808]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2bb6:	42a2      	cmp	r2, r4
    2bb8:	d100      	bne.n	2bbc <__aeabi_dsub+0x37c>
    2bba:	e0a2      	b.n	2d02 <__aeabi_dsub+0x4c2>
    2bbc:	4274      	negs	r4, r6
    2bbe:	46a1      	mov	r9, r4
    2bc0:	2480      	movs	r4, #128	; 0x80
    2bc2:	0424      	lsls	r4, r4, #16
    2bc4:	4327      	orrs	r7, r4
    2bc6:	464c      	mov	r4, r9
    2bc8:	2c38      	cmp	r4, #56	; 0x38
    2bca:	dd00      	ble.n	2bce <__aeabi_dsub+0x38e>
    2bcc:	e0db      	b.n	2d86 <__aeabi_dsub+0x546>
    2bce:	2c1f      	cmp	r4, #31
    2bd0:	dd00      	ble.n	2bd4 <__aeabi_dsub+0x394>
    2bd2:	e144      	b.n	2e5e <__aeabi_dsub+0x61e>
    2bd4:	464e      	mov	r6, r9
    2bd6:	2420      	movs	r4, #32
    2bd8:	1ba4      	subs	r4, r4, r6
    2bda:	003e      	movs	r6, r7
    2bdc:	40a6      	lsls	r6, r4
    2bde:	46a2      	mov	sl, r4
    2be0:	46b0      	mov	r8, r6
    2be2:	464c      	mov	r4, r9
    2be4:	002e      	movs	r6, r5
    2be6:	40e6      	lsrs	r6, r4
    2be8:	46b4      	mov	ip, r6
    2bea:	4646      	mov	r6, r8
    2bec:	4664      	mov	r4, ip
    2bee:	4326      	orrs	r6, r4
    2bf0:	4654      	mov	r4, sl
    2bf2:	40a5      	lsls	r5, r4
    2bf4:	1e6c      	subs	r4, r5, #1
    2bf6:	41a5      	sbcs	r5, r4
    2bf8:	0034      	movs	r4, r6
    2bfa:	432c      	orrs	r4, r5
    2bfc:	464d      	mov	r5, r9
    2bfe:	40ef      	lsrs	r7, r5
    2c00:	1b0d      	subs	r5, r1, r4
    2c02:	e028      	b.n	2c56 <__aeabi_dsub+0x416>
    2c04:	464a      	mov	r2, r9
    2c06:	4643      	mov	r3, r8
    2c08:	464d      	mov	r5, r9
    2c0a:	431a      	orrs	r2, r3
    2c0c:	d000      	beq.n	2c10 <__aeabi_dsub+0x3d0>
    2c0e:	e6a5      	b.n	295c <__aeabi_dsub+0x11c>
    2c10:	2300      	movs	r3, #0
    2c12:	2400      	movs	r4, #0
    2c14:	2500      	movs	r5, #0
    2c16:	e6de      	b.n	29d6 <__aeabi_dsub+0x196>
    2c18:	2a1f      	cmp	r2, #31
    2c1a:	dc5a      	bgt.n	2cd2 <__aeabi_dsub+0x492>
    2c1c:	4666      	mov	r6, ip
    2c1e:	2220      	movs	r2, #32
    2c20:	1b92      	subs	r2, r2, r6
    2c22:	0006      	movs	r6, r0
    2c24:	4096      	lsls	r6, r2
    2c26:	4691      	mov	r9, r2
    2c28:	46b0      	mov	r8, r6
    2c2a:	4662      	mov	r2, ip
    2c2c:	000e      	movs	r6, r1
    2c2e:	40d6      	lsrs	r6, r2
    2c30:	4642      	mov	r2, r8
    2c32:	4316      	orrs	r6, r2
    2c34:	464a      	mov	r2, r9
    2c36:	4091      	lsls	r1, r2
    2c38:	1e4a      	subs	r2, r1, #1
    2c3a:	4191      	sbcs	r1, r2
    2c3c:	0002      	movs	r2, r0
    2c3e:	4660      	mov	r0, ip
    2c40:	4331      	orrs	r1, r6
    2c42:	40c2      	lsrs	r2, r0
    2c44:	e6e4      	b.n	2a10 <__aeabi_dsub+0x1d0>
    2c46:	003c      	movs	r4, r7
    2c48:	432c      	orrs	r4, r5
    2c4a:	d05a      	beq.n	2d02 <__aeabi_dsub+0x4c2>
    2c4c:	43f4      	mvns	r4, r6
    2c4e:	46a1      	mov	r9, r4
    2c50:	2c00      	cmp	r4, #0
    2c52:	d152      	bne.n	2cfa <__aeabi_dsub+0x4ba>
    2c54:	1b4d      	subs	r5, r1, r5
    2c56:	42a9      	cmp	r1, r5
    2c58:	4189      	sbcs	r1, r1
    2c5a:	1bc7      	subs	r7, r0, r7
    2c5c:	4249      	negs	r1, r1
    2c5e:	1a7f      	subs	r7, r7, r1
    2c60:	0014      	movs	r4, r2
    2c62:	469a      	mov	sl, r3
    2c64:	e675      	b.n	2952 <__aeabi_dsub+0x112>
    2c66:	4a9e      	ldr	r2, [pc, #632]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2c68:	4294      	cmp	r4, r2
    2c6a:	d000      	beq.n	2c6e <__aeabi_dsub+0x42e>
    2c6c:	e6c7      	b.n	29fe <__aeabi_dsub+0x1be>
    2c6e:	e613      	b.n	2898 <__aeabi_dsub+0x58>
    2c70:	2200      	movs	r2, #0
    2c72:	e77f      	b.n	2b74 <__aeabi_dsub+0x334>
    2c74:	2000      	movs	r0, #0
    2c76:	e78f      	b.n	2b98 <__aeabi_dsub+0x358>
    2c78:	2c00      	cmp	r4, #0
    2c7a:	d000      	beq.n	2c7e <__aeabi_dsub+0x43e>
    2c7c:	e0c8      	b.n	2e10 <__aeabi_dsub+0x5d0>
    2c7e:	003b      	movs	r3, r7
    2c80:	432b      	orrs	r3, r5
    2c82:	d100      	bne.n	2c86 <__aeabi_dsub+0x446>
    2c84:	e10f      	b.n	2ea6 <__aeabi_dsub+0x666>
    2c86:	0003      	movs	r3, r0
    2c88:	430b      	orrs	r3, r1
    2c8a:	d100      	bne.n	2c8e <__aeabi_dsub+0x44e>
    2c8c:	e604      	b.n	2898 <__aeabi_dsub+0x58>
    2c8e:	1869      	adds	r1, r5, r1
    2c90:	42a9      	cmp	r1, r5
    2c92:	419b      	sbcs	r3, r3
    2c94:	183f      	adds	r7, r7, r0
    2c96:	425b      	negs	r3, r3
    2c98:	19df      	adds	r7, r3, r7
    2c9a:	023b      	lsls	r3, r7, #8
    2c9c:	d400      	bmi.n	2ca0 <__aeabi_dsub+0x460>
    2c9e:	e11a      	b.n	2ed6 <__aeabi_dsub+0x696>
    2ca0:	4b90      	ldr	r3, [pc, #576]	; (2ee4 <__aeabi_dsub+0x6a4>)
    2ca2:	000d      	movs	r5, r1
    2ca4:	401f      	ands	r7, r3
    2ca6:	4664      	mov	r4, ip
    2ca8:	e5f6      	b.n	2898 <__aeabi_dsub+0x58>
    2caa:	469a      	mov	sl, r3
    2cac:	e689      	b.n	29c2 <__aeabi_dsub+0x182>
    2cae:	003a      	movs	r2, r7
    2cb0:	432a      	orrs	r2, r5
    2cb2:	2c00      	cmp	r4, #0
    2cb4:	d15c      	bne.n	2d70 <__aeabi_dsub+0x530>
    2cb6:	2a00      	cmp	r2, #0
    2cb8:	d175      	bne.n	2da6 <__aeabi_dsub+0x566>
    2cba:	0002      	movs	r2, r0
    2cbc:	430a      	orrs	r2, r1
    2cbe:	d100      	bne.n	2cc2 <__aeabi_dsub+0x482>
    2cc0:	e0ca      	b.n	2e58 <__aeabi_dsub+0x618>
    2cc2:	0007      	movs	r7, r0
    2cc4:	000d      	movs	r5, r1
    2cc6:	469a      	mov	sl, r3
    2cc8:	e5e6      	b.n	2898 <__aeabi_dsub+0x58>
    2cca:	4664      	mov	r4, ip
    2ccc:	2200      	movs	r2, #0
    2cce:	2500      	movs	r5, #0
    2cd0:	e681      	b.n	29d6 <__aeabi_dsub+0x196>
    2cd2:	4662      	mov	r2, ip
    2cd4:	0006      	movs	r6, r0
    2cd6:	3a20      	subs	r2, #32
    2cd8:	40d6      	lsrs	r6, r2
    2cda:	4662      	mov	r2, ip
    2cdc:	46b0      	mov	r8, r6
    2cde:	2a20      	cmp	r2, #32
    2ce0:	d100      	bne.n	2ce4 <__aeabi_dsub+0x4a4>
    2ce2:	e0b7      	b.n	2e54 <__aeabi_dsub+0x614>
    2ce4:	2240      	movs	r2, #64	; 0x40
    2ce6:	4666      	mov	r6, ip
    2ce8:	1b92      	subs	r2, r2, r6
    2cea:	4090      	lsls	r0, r2
    2cec:	4301      	orrs	r1, r0
    2cee:	4642      	mov	r2, r8
    2cf0:	1e48      	subs	r0, r1, #1
    2cf2:	4181      	sbcs	r1, r0
    2cf4:	4311      	orrs	r1, r2
    2cf6:	2200      	movs	r2, #0
    2cf8:	e68a      	b.n	2a10 <__aeabi_dsub+0x1d0>
    2cfa:	4c79      	ldr	r4, [pc, #484]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2cfc:	42a2      	cmp	r2, r4
    2cfe:	d000      	beq.n	2d02 <__aeabi_dsub+0x4c2>
    2d00:	e761      	b.n	2bc6 <__aeabi_dsub+0x386>
    2d02:	0007      	movs	r7, r0
    2d04:	000d      	movs	r5, r1
    2d06:	0014      	movs	r4, r2
    2d08:	469a      	mov	sl, r3
    2d0a:	e5c5      	b.n	2898 <__aeabi_dsub+0x58>
    2d0c:	2c00      	cmp	r4, #0
    2d0e:	d141      	bne.n	2d94 <__aeabi_dsub+0x554>
    2d10:	003c      	movs	r4, r7
    2d12:	432c      	orrs	r4, r5
    2d14:	d078      	beq.n	2e08 <__aeabi_dsub+0x5c8>
    2d16:	43f4      	mvns	r4, r6
    2d18:	46a1      	mov	r9, r4
    2d1a:	2c00      	cmp	r4, #0
    2d1c:	d020      	beq.n	2d60 <__aeabi_dsub+0x520>
    2d1e:	4c70      	ldr	r4, [pc, #448]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2d20:	42a2      	cmp	r2, r4
    2d22:	d071      	beq.n	2e08 <__aeabi_dsub+0x5c8>
    2d24:	464c      	mov	r4, r9
    2d26:	2c38      	cmp	r4, #56	; 0x38
    2d28:	dd00      	ble.n	2d2c <__aeabi_dsub+0x4ec>
    2d2a:	e0b2      	b.n	2e92 <__aeabi_dsub+0x652>
    2d2c:	2c1f      	cmp	r4, #31
    2d2e:	dd00      	ble.n	2d32 <__aeabi_dsub+0x4f2>
    2d30:	e0bc      	b.n	2eac <__aeabi_dsub+0x66c>
    2d32:	2620      	movs	r6, #32
    2d34:	1b34      	subs	r4, r6, r4
    2d36:	46a2      	mov	sl, r4
    2d38:	003c      	movs	r4, r7
    2d3a:	4656      	mov	r6, sl
    2d3c:	40b4      	lsls	r4, r6
    2d3e:	464e      	mov	r6, r9
    2d40:	46a0      	mov	r8, r4
    2d42:	002c      	movs	r4, r5
    2d44:	40f4      	lsrs	r4, r6
    2d46:	46a4      	mov	ip, r4
    2d48:	4644      	mov	r4, r8
    2d4a:	4666      	mov	r6, ip
    2d4c:	4334      	orrs	r4, r6
    2d4e:	46a4      	mov	ip, r4
    2d50:	4654      	mov	r4, sl
    2d52:	40a5      	lsls	r5, r4
    2d54:	4664      	mov	r4, ip
    2d56:	1e6e      	subs	r6, r5, #1
    2d58:	41b5      	sbcs	r5, r6
    2d5a:	4325      	orrs	r5, r4
    2d5c:	464c      	mov	r4, r9
    2d5e:	40e7      	lsrs	r7, r4
    2d60:	186d      	adds	r5, r5, r1
    2d62:	428d      	cmp	r5, r1
    2d64:	4189      	sbcs	r1, r1
    2d66:	183f      	adds	r7, r7, r0
    2d68:	4249      	negs	r1, r1
    2d6a:	19cf      	adds	r7, r1, r7
    2d6c:	0014      	movs	r4, r2
    2d6e:	e656      	b.n	2a1e <__aeabi_dsub+0x1de>
    2d70:	2a00      	cmp	r2, #0
    2d72:	d12f      	bne.n	2dd4 <__aeabi_dsub+0x594>
    2d74:	0002      	movs	r2, r0
    2d76:	430a      	orrs	r2, r1
    2d78:	d100      	bne.n	2d7c <__aeabi_dsub+0x53c>
    2d7a:	e084      	b.n	2e86 <__aeabi_dsub+0x646>
    2d7c:	0007      	movs	r7, r0
    2d7e:	000d      	movs	r5, r1
    2d80:	469a      	mov	sl, r3
    2d82:	4c57      	ldr	r4, [pc, #348]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2d84:	e588      	b.n	2898 <__aeabi_dsub+0x58>
    2d86:	433d      	orrs	r5, r7
    2d88:	1e6f      	subs	r7, r5, #1
    2d8a:	41bd      	sbcs	r5, r7
    2d8c:	b2ec      	uxtb	r4, r5
    2d8e:	2700      	movs	r7, #0
    2d90:	1b0d      	subs	r5, r1, r4
    2d92:	e760      	b.n	2c56 <__aeabi_dsub+0x416>
    2d94:	4c52      	ldr	r4, [pc, #328]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2d96:	42a2      	cmp	r2, r4
    2d98:	d036      	beq.n	2e08 <__aeabi_dsub+0x5c8>
    2d9a:	4274      	negs	r4, r6
    2d9c:	2680      	movs	r6, #128	; 0x80
    2d9e:	0436      	lsls	r6, r6, #16
    2da0:	46a1      	mov	r9, r4
    2da2:	4337      	orrs	r7, r6
    2da4:	e7be      	b.n	2d24 <__aeabi_dsub+0x4e4>
    2da6:	0002      	movs	r2, r0
    2da8:	430a      	orrs	r2, r1
    2daa:	d100      	bne.n	2dae <__aeabi_dsub+0x56e>
    2dac:	e574      	b.n	2898 <__aeabi_dsub+0x58>
    2dae:	1a6a      	subs	r2, r5, r1
    2db0:	4690      	mov	r8, r2
    2db2:	4545      	cmp	r5, r8
    2db4:	41b6      	sbcs	r6, r6
    2db6:	1a3a      	subs	r2, r7, r0
    2db8:	4276      	negs	r6, r6
    2dba:	1b92      	subs	r2, r2, r6
    2dbc:	4694      	mov	ip, r2
    2dbe:	0212      	lsls	r2, r2, #8
    2dc0:	d400      	bmi.n	2dc4 <__aeabi_dsub+0x584>
    2dc2:	e5f7      	b.n	29b4 <__aeabi_dsub+0x174>
    2dc4:	1b4d      	subs	r5, r1, r5
    2dc6:	42a9      	cmp	r1, r5
    2dc8:	4189      	sbcs	r1, r1
    2dca:	1bc7      	subs	r7, r0, r7
    2dcc:	4249      	negs	r1, r1
    2dce:	1a7f      	subs	r7, r7, r1
    2dd0:	469a      	mov	sl, r3
    2dd2:	e561      	b.n	2898 <__aeabi_dsub+0x58>
    2dd4:	0002      	movs	r2, r0
    2dd6:	430a      	orrs	r2, r1
    2dd8:	d03a      	beq.n	2e50 <__aeabi_dsub+0x610>
    2dda:	08ed      	lsrs	r5, r5, #3
    2ddc:	077c      	lsls	r4, r7, #29
    2dde:	432c      	orrs	r4, r5
    2de0:	2580      	movs	r5, #128	; 0x80
    2de2:	08fa      	lsrs	r2, r7, #3
    2de4:	032d      	lsls	r5, r5, #12
    2de6:	422a      	tst	r2, r5
    2de8:	d008      	beq.n	2dfc <__aeabi_dsub+0x5bc>
    2dea:	08c7      	lsrs	r7, r0, #3
    2dec:	422f      	tst	r7, r5
    2dee:	d105      	bne.n	2dfc <__aeabi_dsub+0x5bc>
    2df0:	0745      	lsls	r5, r0, #29
    2df2:	002c      	movs	r4, r5
    2df4:	003a      	movs	r2, r7
    2df6:	469a      	mov	sl, r3
    2df8:	08c9      	lsrs	r1, r1, #3
    2dfa:	430c      	orrs	r4, r1
    2dfc:	0f67      	lsrs	r7, r4, #29
    2dfe:	00d2      	lsls	r2, r2, #3
    2e00:	00e5      	lsls	r5, r4, #3
    2e02:	4317      	orrs	r7, r2
    2e04:	4c36      	ldr	r4, [pc, #216]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2e06:	e547      	b.n	2898 <__aeabi_dsub+0x58>
    2e08:	0007      	movs	r7, r0
    2e0a:	000d      	movs	r5, r1
    2e0c:	0014      	movs	r4, r2
    2e0e:	e543      	b.n	2898 <__aeabi_dsub+0x58>
    2e10:	003a      	movs	r2, r7
    2e12:	432a      	orrs	r2, r5
    2e14:	d043      	beq.n	2e9e <__aeabi_dsub+0x65e>
    2e16:	0002      	movs	r2, r0
    2e18:	430a      	orrs	r2, r1
    2e1a:	d019      	beq.n	2e50 <__aeabi_dsub+0x610>
    2e1c:	08ed      	lsrs	r5, r5, #3
    2e1e:	077c      	lsls	r4, r7, #29
    2e20:	432c      	orrs	r4, r5
    2e22:	2580      	movs	r5, #128	; 0x80
    2e24:	08fa      	lsrs	r2, r7, #3
    2e26:	032d      	lsls	r5, r5, #12
    2e28:	422a      	tst	r2, r5
    2e2a:	d007      	beq.n	2e3c <__aeabi_dsub+0x5fc>
    2e2c:	08c6      	lsrs	r6, r0, #3
    2e2e:	422e      	tst	r6, r5
    2e30:	d104      	bne.n	2e3c <__aeabi_dsub+0x5fc>
    2e32:	0747      	lsls	r7, r0, #29
    2e34:	003c      	movs	r4, r7
    2e36:	0032      	movs	r2, r6
    2e38:	08c9      	lsrs	r1, r1, #3
    2e3a:	430c      	orrs	r4, r1
    2e3c:	00d7      	lsls	r7, r2, #3
    2e3e:	0f62      	lsrs	r2, r4, #29
    2e40:	00e5      	lsls	r5, r4, #3
    2e42:	4317      	orrs	r7, r2
    2e44:	469a      	mov	sl, r3
    2e46:	4c26      	ldr	r4, [pc, #152]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2e48:	e526      	b.n	2898 <__aeabi_dsub+0x58>
    2e4a:	2200      	movs	r2, #0
    2e4c:	2500      	movs	r5, #0
    2e4e:	e544      	b.n	28da <__aeabi_dsub+0x9a>
    2e50:	4c23      	ldr	r4, [pc, #140]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2e52:	e521      	b.n	2898 <__aeabi_dsub+0x58>
    2e54:	2000      	movs	r0, #0
    2e56:	e749      	b.n	2cec <__aeabi_dsub+0x4ac>
    2e58:	2300      	movs	r3, #0
    2e5a:	2500      	movs	r5, #0
    2e5c:	e5bb      	b.n	29d6 <__aeabi_dsub+0x196>
    2e5e:	464c      	mov	r4, r9
    2e60:	003e      	movs	r6, r7
    2e62:	3c20      	subs	r4, #32
    2e64:	40e6      	lsrs	r6, r4
    2e66:	464c      	mov	r4, r9
    2e68:	46b4      	mov	ip, r6
    2e6a:	2c20      	cmp	r4, #32
    2e6c:	d031      	beq.n	2ed2 <__aeabi_dsub+0x692>
    2e6e:	2440      	movs	r4, #64	; 0x40
    2e70:	464e      	mov	r6, r9
    2e72:	1ba6      	subs	r6, r4, r6
    2e74:	40b7      	lsls	r7, r6
    2e76:	433d      	orrs	r5, r7
    2e78:	1e6c      	subs	r4, r5, #1
    2e7a:	41a5      	sbcs	r5, r4
    2e7c:	4664      	mov	r4, ip
    2e7e:	432c      	orrs	r4, r5
    2e80:	2700      	movs	r7, #0
    2e82:	1b0d      	subs	r5, r1, r4
    2e84:	e6e7      	b.n	2c56 <__aeabi_dsub+0x416>
    2e86:	2280      	movs	r2, #128	; 0x80
    2e88:	2300      	movs	r3, #0
    2e8a:	0312      	lsls	r2, r2, #12
    2e8c:	4c14      	ldr	r4, [pc, #80]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2e8e:	2500      	movs	r5, #0
    2e90:	e5a1      	b.n	29d6 <__aeabi_dsub+0x196>
    2e92:	433d      	orrs	r5, r7
    2e94:	1e6f      	subs	r7, r5, #1
    2e96:	41bd      	sbcs	r5, r7
    2e98:	2700      	movs	r7, #0
    2e9a:	b2ed      	uxtb	r5, r5
    2e9c:	e760      	b.n	2d60 <__aeabi_dsub+0x520>
    2e9e:	0007      	movs	r7, r0
    2ea0:	000d      	movs	r5, r1
    2ea2:	4c0f      	ldr	r4, [pc, #60]	; (2ee0 <__aeabi_dsub+0x6a0>)
    2ea4:	e4f8      	b.n	2898 <__aeabi_dsub+0x58>
    2ea6:	0007      	movs	r7, r0
    2ea8:	000d      	movs	r5, r1
    2eaa:	e4f5      	b.n	2898 <__aeabi_dsub+0x58>
    2eac:	464e      	mov	r6, r9
    2eae:	003c      	movs	r4, r7
    2eb0:	3e20      	subs	r6, #32
    2eb2:	40f4      	lsrs	r4, r6
    2eb4:	46a0      	mov	r8, r4
    2eb6:	464c      	mov	r4, r9
    2eb8:	2c20      	cmp	r4, #32
    2eba:	d00e      	beq.n	2eda <__aeabi_dsub+0x69a>
    2ebc:	2440      	movs	r4, #64	; 0x40
    2ebe:	464e      	mov	r6, r9
    2ec0:	1ba4      	subs	r4, r4, r6
    2ec2:	40a7      	lsls	r7, r4
    2ec4:	433d      	orrs	r5, r7
    2ec6:	1e6f      	subs	r7, r5, #1
    2ec8:	41bd      	sbcs	r5, r7
    2eca:	4644      	mov	r4, r8
    2ecc:	2700      	movs	r7, #0
    2ece:	4325      	orrs	r5, r4
    2ed0:	e746      	b.n	2d60 <__aeabi_dsub+0x520>
    2ed2:	2700      	movs	r7, #0
    2ed4:	e7cf      	b.n	2e76 <__aeabi_dsub+0x636>
    2ed6:	000d      	movs	r5, r1
    2ed8:	e573      	b.n	29c2 <__aeabi_dsub+0x182>
    2eda:	2700      	movs	r7, #0
    2edc:	e7f2      	b.n	2ec4 <__aeabi_dsub+0x684>
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	000007ff 	.word	0x000007ff
    2ee4:	ff7fffff 	.word	0xff7fffff

00002ee8 <__aeabi_d2iz>:
    2ee8:	030b      	lsls	r3, r1, #12
    2eea:	b530      	push	{r4, r5, lr}
    2eec:	4d13      	ldr	r5, [pc, #76]	; (2f3c <__aeabi_d2iz+0x54>)
    2eee:	0b1a      	lsrs	r2, r3, #12
    2ef0:	004b      	lsls	r3, r1, #1
    2ef2:	0d5b      	lsrs	r3, r3, #21
    2ef4:	0fc9      	lsrs	r1, r1, #31
    2ef6:	2400      	movs	r4, #0
    2ef8:	42ab      	cmp	r3, r5
    2efa:	dd11      	ble.n	2f20 <__aeabi_d2iz+0x38>
    2efc:	4c10      	ldr	r4, [pc, #64]	; (2f40 <__aeabi_d2iz+0x58>)
    2efe:	42a3      	cmp	r3, r4
    2f00:	dc10      	bgt.n	2f24 <__aeabi_d2iz+0x3c>
    2f02:	2480      	movs	r4, #128	; 0x80
    2f04:	0364      	lsls	r4, r4, #13
    2f06:	4322      	orrs	r2, r4
    2f08:	4c0e      	ldr	r4, [pc, #56]	; (2f44 <__aeabi_d2iz+0x5c>)
    2f0a:	1ae4      	subs	r4, r4, r3
    2f0c:	2c1f      	cmp	r4, #31
    2f0e:	dd0c      	ble.n	2f2a <__aeabi_d2iz+0x42>
    2f10:	480d      	ldr	r0, [pc, #52]	; (2f48 <__aeabi_d2iz+0x60>)
    2f12:	1ac3      	subs	r3, r0, r3
    2f14:	40da      	lsrs	r2, r3
    2f16:	0013      	movs	r3, r2
    2f18:	425c      	negs	r4, r3
    2f1a:	2900      	cmp	r1, #0
    2f1c:	d100      	bne.n	2f20 <__aeabi_d2iz+0x38>
    2f1e:	001c      	movs	r4, r3
    2f20:	0020      	movs	r0, r4
    2f22:	bd30      	pop	{r4, r5, pc}
    2f24:	4b09      	ldr	r3, [pc, #36]	; (2f4c <__aeabi_d2iz+0x64>)
    2f26:	18cc      	adds	r4, r1, r3
    2f28:	e7fa      	b.n	2f20 <__aeabi_d2iz+0x38>
    2f2a:	40e0      	lsrs	r0, r4
    2f2c:	4c08      	ldr	r4, [pc, #32]	; (2f50 <__aeabi_d2iz+0x68>)
    2f2e:	46a4      	mov	ip, r4
    2f30:	4463      	add	r3, ip
    2f32:	409a      	lsls	r2, r3
    2f34:	0013      	movs	r3, r2
    2f36:	4303      	orrs	r3, r0
    2f38:	e7ee      	b.n	2f18 <__aeabi_d2iz+0x30>
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	000003fe 	.word	0x000003fe
    2f40:	0000041d 	.word	0x0000041d
    2f44:	00000433 	.word	0x00000433
    2f48:	00000413 	.word	0x00000413
    2f4c:	7fffffff 	.word	0x7fffffff
    2f50:	fffffbed 	.word	0xfffffbed

00002f54 <__aeabi_i2d>:
    2f54:	b570      	push	{r4, r5, r6, lr}
    2f56:	2800      	cmp	r0, #0
    2f58:	d030      	beq.n	2fbc <__aeabi_i2d+0x68>
    2f5a:	17c3      	asrs	r3, r0, #31
    2f5c:	18c4      	adds	r4, r0, r3
    2f5e:	405c      	eors	r4, r3
    2f60:	0fc5      	lsrs	r5, r0, #31
    2f62:	0020      	movs	r0, r4
    2f64:	f000 f950 	bl	3208 <__clzsi2>
    2f68:	4b17      	ldr	r3, [pc, #92]	; (2fc8 <__aeabi_i2d+0x74>)
    2f6a:	4a18      	ldr	r2, [pc, #96]	; (2fcc <__aeabi_i2d+0x78>)
    2f6c:	1a1b      	subs	r3, r3, r0
    2f6e:	1ad2      	subs	r2, r2, r3
    2f70:	2a1f      	cmp	r2, #31
    2f72:	dd18      	ble.n	2fa6 <__aeabi_i2d+0x52>
    2f74:	4a16      	ldr	r2, [pc, #88]	; (2fd0 <__aeabi_i2d+0x7c>)
    2f76:	1ad2      	subs	r2, r2, r3
    2f78:	4094      	lsls	r4, r2
    2f7a:	2200      	movs	r2, #0
    2f7c:	0324      	lsls	r4, r4, #12
    2f7e:	055b      	lsls	r3, r3, #21
    2f80:	0b24      	lsrs	r4, r4, #12
    2f82:	0d5b      	lsrs	r3, r3, #21
    2f84:	2100      	movs	r1, #0
    2f86:	0010      	movs	r0, r2
    2f88:	0324      	lsls	r4, r4, #12
    2f8a:	0d0a      	lsrs	r2, r1, #20
    2f8c:	0512      	lsls	r2, r2, #20
    2f8e:	0b24      	lsrs	r4, r4, #12
    2f90:	4314      	orrs	r4, r2
    2f92:	4a10      	ldr	r2, [pc, #64]	; (2fd4 <__aeabi_i2d+0x80>)
    2f94:	051b      	lsls	r3, r3, #20
    2f96:	4014      	ands	r4, r2
    2f98:	431c      	orrs	r4, r3
    2f9a:	0064      	lsls	r4, r4, #1
    2f9c:	07ed      	lsls	r5, r5, #31
    2f9e:	0864      	lsrs	r4, r4, #1
    2fa0:	432c      	orrs	r4, r5
    2fa2:	0021      	movs	r1, r4
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
    2fa6:	0021      	movs	r1, r4
    2fa8:	4091      	lsls	r1, r2
    2faa:	000a      	movs	r2, r1
    2fac:	210b      	movs	r1, #11
    2fae:	1a08      	subs	r0, r1, r0
    2fb0:	40c4      	lsrs	r4, r0
    2fb2:	055b      	lsls	r3, r3, #21
    2fb4:	0324      	lsls	r4, r4, #12
    2fb6:	0b24      	lsrs	r4, r4, #12
    2fb8:	0d5b      	lsrs	r3, r3, #21
    2fba:	e7e3      	b.n	2f84 <__aeabi_i2d+0x30>
    2fbc:	2500      	movs	r5, #0
    2fbe:	2300      	movs	r3, #0
    2fc0:	2400      	movs	r4, #0
    2fc2:	2200      	movs	r2, #0
    2fc4:	e7de      	b.n	2f84 <__aeabi_i2d+0x30>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	0000041e 	.word	0x0000041e
    2fcc:	00000433 	.word	0x00000433
    2fd0:	00000413 	.word	0x00000413
    2fd4:	800fffff 	.word	0x800fffff

00002fd8 <__aeabi_ui2d>:
    2fd8:	b570      	push	{r4, r5, r6, lr}
    2fda:	1e05      	subs	r5, r0, #0
    2fdc:	d028      	beq.n	3030 <__aeabi_ui2d+0x58>
    2fde:	f000 f913 	bl	3208 <__clzsi2>
    2fe2:	4b15      	ldr	r3, [pc, #84]	; (3038 <__aeabi_ui2d+0x60>)
    2fe4:	4a15      	ldr	r2, [pc, #84]	; (303c <__aeabi_ui2d+0x64>)
    2fe6:	1a1b      	subs	r3, r3, r0
    2fe8:	1ad2      	subs	r2, r2, r3
    2fea:	2a1f      	cmp	r2, #31
    2fec:	dd16      	ble.n	301c <__aeabi_ui2d+0x44>
    2fee:	002c      	movs	r4, r5
    2ff0:	4a13      	ldr	r2, [pc, #76]	; (3040 <__aeabi_ui2d+0x68>)
    2ff2:	2500      	movs	r5, #0
    2ff4:	1ad2      	subs	r2, r2, r3
    2ff6:	4094      	lsls	r4, r2
    2ff8:	055a      	lsls	r2, r3, #21
    2ffa:	0324      	lsls	r4, r4, #12
    2ffc:	0b24      	lsrs	r4, r4, #12
    2ffe:	0d52      	lsrs	r2, r2, #21
    3000:	2100      	movs	r1, #0
    3002:	0324      	lsls	r4, r4, #12
    3004:	0d0b      	lsrs	r3, r1, #20
    3006:	0b24      	lsrs	r4, r4, #12
    3008:	051b      	lsls	r3, r3, #20
    300a:	4323      	orrs	r3, r4
    300c:	4c0d      	ldr	r4, [pc, #52]	; (3044 <__aeabi_ui2d+0x6c>)
    300e:	0512      	lsls	r2, r2, #20
    3010:	4023      	ands	r3, r4
    3012:	4313      	orrs	r3, r2
    3014:	005b      	lsls	r3, r3, #1
    3016:	0028      	movs	r0, r5
    3018:	0859      	lsrs	r1, r3, #1
    301a:	bd70      	pop	{r4, r5, r6, pc}
    301c:	210b      	movs	r1, #11
    301e:	002c      	movs	r4, r5
    3020:	1a08      	subs	r0, r1, r0
    3022:	40c4      	lsrs	r4, r0
    3024:	4095      	lsls	r5, r2
    3026:	0324      	lsls	r4, r4, #12
    3028:	055a      	lsls	r2, r3, #21
    302a:	0b24      	lsrs	r4, r4, #12
    302c:	0d52      	lsrs	r2, r2, #21
    302e:	e7e7      	b.n	3000 <__aeabi_ui2d+0x28>
    3030:	2200      	movs	r2, #0
    3032:	2400      	movs	r4, #0
    3034:	e7e4      	b.n	3000 <__aeabi_ui2d+0x28>
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	0000041e 	.word	0x0000041e
    303c:	00000433 	.word	0x00000433
    3040:	00000413 	.word	0x00000413
    3044:	800fffff 	.word	0x800fffff

00003048 <__aeabi_f2d>:
    3048:	0042      	lsls	r2, r0, #1
    304a:	0e12      	lsrs	r2, r2, #24
    304c:	1c51      	adds	r1, r2, #1
    304e:	0243      	lsls	r3, r0, #9
    3050:	b2c9      	uxtb	r1, r1
    3052:	b570      	push	{r4, r5, r6, lr}
    3054:	0a5d      	lsrs	r5, r3, #9
    3056:	0fc4      	lsrs	r4, r0, #31
    3058:	2901      	cmp	r1, #1
    305a:	dd15      	ble.n	3088 <__aeabi_f2d+0x40>
    305c:	21e0      	movs	r1, #224	; 0xe0
    305e:	0089      	lsls	r1, r1, #2
    3060:	468c      	mov	ip, r1
    3062:	076d      	lsls	r5, r5, #29
    3064:	0b1b      	lsrs	r3, r3, #12
    3066:	4462      	add	r2, ip
    3068:	2100      	movs	r1, #0
    306a:	0028      	movs	r0, r5
    306c:	0d0d      	lsrs	r5, r1, #20
    306e:	052d      	lsls	r5, r5, #20
    3070:	432b      	orrs	r3, r5
    3072:	4d1c      	ldr	r5, [pc, #112]	; (30e4 <__aeabi_f2d+0x9c>)
    3074:	0552      	lsls	r2, r2, #21
    3076:	402b      	ands	r3, r5
    3078:	0852      	lsrs	r2, r2, #1
    307a:	4313      	orrs	r3, r2
    307c:	005b      	lsls	r3, r3, #1
    307e:	07e4      	lsls	r4, r4, #31
    3080:	085b      	lsrs	r3, r3, #1
    3082:	4323      	orrs	r3, r4
    3084:	0019      	movs	r1, r3
    3086:	bd70      	pop	{r4, r5, r6, pc}
    3088:	2a00      	cmp	r2, #0
    308a:	d115      	bne.n	30b8 <__aeabi_f2d+0x70>
    308c:	2d00      	cmp	r5, #0
    308e:	d01f      	beq.n	30d0 <__aeabi_f2d+0x88>
    3090:	0028      	movs	r0, r5
    3092:	f000 f8b9 	bl	3208 <__clzsi2>
    3096:	280a      	cmp	r0, #10
    3098:	dc1d      	bgt.n	30d6 <__aeabi_f2d+0x8e>
    309a:	230b      	movs	r3, #11
    309c:	002a      	movs	r2, r5
    309e:	1a1b      	subs	r3, r3, r0
    30a0:	40da      	lsrs	r2, r3
    30a2:	0013      	movs	r3, r2
    30a4:	0002      	movs	r2, r0
    30a6:	3215      	adds	r2, #21
    30a8:	4095      	lsls	r5, r2
    30aa:	4a0f      	ldr	r2, [pc, #60]	; (30e8 <__aeabi_f2d+0xa0>)
    30ac:	031b      	lsls	r3, r3, #12
    30ae:	1a12      	subs	r2, r2, r0
    30b0:	0552      	lsls	r2, r2, #21
    30b2:	0b1b      	lsrs	r3, r3, #12
    30b4:	0d52      	lsrs	r2, r2, #21
    30b6:	e7d7      	b.n	3068 <__aeabi_f2d+0x20>
    30b8:	2d00      	cmp	r5, #0
    30ba:	d006      	beq.n	30ca <__aeabi_f2d+0x82>
    30bc:	2280      	movs	r2, #128	; 0x80
    30be:	0b1b      	lsrs	r3, r3, #12
    30c0:	0312      	lsls	r2, r2, #12
    30c2:	4313      	orrs	r3, r2
    30c4:	076d      	lsls	r5, r5, #29
    30c6:	4a09      	ldr	r2, [pc, #36]	; (30ec <__aeabi_f2d+0xa4>)
    30c8:	e7ce      	b.n	3068 <__aeabi_f2d+0x20>
    30ca:	4a08      	ldr	r2, [pc, #32]	; (30ec <__aeabi_f2d+0xa4>)
    30cc:	2300      	movs	r3, #0
    30ce:	e7cb      	b.n	3068 <__aeabi_f2d+0x20>
    30d0:	2200      	movs	r2, #0
    30d2:	2300      	movs	r3, #0
    30d4:	e7c8      	b.n	3068 <__aeabi_f2d+0x20>
    30d6:	0003      	movs	r3, r0
    30d8:	3b0b      	subs	r3, #11
    30da:	409d      	lsls	r5, r3
    30dc:	002b      	movs	r3, r5
    30de:	2500      	movs	r5, #0
    30e0:	e7e3      	b.n	30aa <__aeabi_f2d+0x62>
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	800fffff 	.word	0x800fffff
    30e8:	00000389 	.word	0x00000389
    30ec:	000007ff 	.word	0x000007ff

000030f0 <__aeabi_d2f>:
    30f0:	004b      	lsls	r3, r1, #1
    30f2:	b570      	push	{r4, r5, r6, lr}
    30f4:	0d5e      	lsrs	r6, r3, #21
    30f6:	030c      	lsls	r4, r1, #12
    30f8:	1c75      	adds	r5, r6, #1
    30fa:	0a64      	lsrs	r4, r4, #9
    30fc:	0f42      	lsrs	r2, r0, #29
    30fe:	056d      	lsls	r5, r5, #21
    3100:	4322      	orrs	r2, r4
    3102:	0fc9      	lsrs	r1, r1, #31
    3104:	00c4      	lsls	r4, r0, #3
    3106:	0d6d      	lsrs	r5, r5, #21
    3108:	2d01      	cmp	r5, #1
    310a:	dd2a      	ble.n	3162 <__aeabi_d2f+0x72>
    310c:	4b3b      	ldr	r3, [pc, #236]	; (31fc <__aeabi_d2f+0x10c>)
    310e:	18f3      	adds	r3, r6, r3
    3110:	2bfe      	cmp	r3, #254	; 0xfe
    3112:	dc1a      	bgt.n	314a <__aeabi_d2f+0x5a>
    3114:	2b00      	cmp	r3, #0
    3116:	dd42      	ble.n	319e <__aeabi_d2f+0xae>
    3118:	0180      	lsls	r0, r0, #6
    311a:	1e45      	subs	r5, r0, #1
    311c:	41a8      	sbcs	r0, r5
    311e:	00d2      	lsls	r2, r2, #3
    3120:	4310      	orrs	r0, r2
    3122:	0f62      	lsrs	r2, r4, #29
    3124:	4302      	orrs	r2, r0
    3126:	0750      	lsls	r0, r2, #29
    3128:	d004      	beq.n	3134 <__aeabi_d2f+0x44>
    312a:	200f      	movs	r0, #15
    312c:	4010      	ands	r0, r2
    312e:	2804      	cmp	r0, #4
    3130:	d000      	beq.n	3134 <__aeabi_d2f+0x44>
    3132:	3204      	adds	r2, #4
    3134:	2080      	movs	r0, #128	; 0x80
    3136:	04c0      	lsls	r0, r0, #19
    3138:	4010      	ands	r0, r2
    313a:	d021      	beq.n	3180 <__aeabi_d2f+0x90>
    313c:	3301      	adds	r3, #1
    313e:	2bff      	cmp	r3, #255	; 0xff
    3140:	d003      	beq.n	314a <__aeabi_d2f+0x5a>
    3142:	0192      	lsls	r2, r2, #6
    3144:	0a52      	lsrs	r2, r2, #9
    3146:	b2db      	uxtb	r3, r3
    3148:	e001      	b.n	314e <__aeabi_d2f+0x5e>
    314a:	23ff      	movs	r3, #255	; 0xff
    314c:	2200      	movs	r2, #0
    314e:	0252      	lsls	r2, r2, #9
    3150:	0a52      	lsrs	r2, r2, #9
    3152:	05db      	lsls	r3, r3, #23
    3154:	4313      	orrs	r3, r2
    3156:	005b      	lsls	r3, r3, #1
    3158:	07c9      	lsls	r1, r1, #31
    315a:	085b      	lsrs	r3, r3, #1
    315c:	430b      	orrs	r3, r1
    315e:	0018      	movs	r0, r3
    3160:	bd70      	pop	{r4, r5, r6, pc}
    3162:	2e00      	cmp	r6, #0
    3164:	d007      	beq.n	3176 <__aeabi_d2f+0x86>
    3166:	4314      	orrs	r4, r2
    3168:	d0ef      	beq.n	314a <__aeabi_d2f+0x5a>
    316a:	2080      	movs	r0, #128	; 0x80
    316c:	00d2      	lsls	r2, r2, #3
    316e:	0480      	lsls	r0, r0, #18
    3170:	4302      	orrs	r2, r0
    3172:	23ff      	movs	r3, #255	; 0xff
    3174:	e7d7      	b.n	3126 <__aeabi_d2f+0x36>
    3176:	4322      	orrs	r2, r4
    3178:	2300      	movs	r3, #0
    317a:	2a00      	cmp	r2, #0
    317c:	d003      	beq.n	3186 <__aeabi_d2f+0x96>
    317e:	2205      	movs	r2, #5
    3180:	08d2      	lsrs	r2, r2, #3
    3182:	2bff      	cmp	r3, #255	; 0xff
    3184:	d003      	beq.n	318e <__aeabi_d2f+0x9e>
    3186:	0252      	lsls	r2, r2, #9
    3188:	0a52      	lsrs	r2, r2, #9
    318a:	b2db      	uxtb	r3, r3
    318c:	e7df      	b.n	314e <__aeabi_d2f+0x5e>
    318e:	2a00      	cmp	r2, #0
    3190:	d032      	beq.n	31f8 <__aeabi_d2f+0x108>
    3192:	2080      	movs	r0, #128	; 0x80
    3194:	03c0      	lsls	r0, r0, #15
    3196:	4302      	orrs	r2, r0
    3198:	0252      	lsls	r2, r2, #9
    319a:	0a52      	lsrs	r2, r2, #9
    319c:	e7d7      	b.n	314e <__aeabi_d2f+0x5e>
    319e:	0018      	movs	r0, r3
    31a0:	3017      	adds	r0, #23
    31a2:	db14      	blt.n	31ce <__aeabi_d2f+0xde>
    31a4:	2080      	movs	r0, #128	; 0x80
    31a6:	0400      	lsls	r0, r0, #16
    31a8:	4302      	orrs	r2, r0
    31aa:	201e      	movs	r0, #30
    31ac:	1ac0      	subs	r0, r0, r3
    31ae:	281f      	cmp	r0, #31
    31b0:	dc0f      	bgt.n	31d2 <__aeabi_d2f+0xe2>
    31b2:	0025      	movs	r5, r4
    31b4:	4b12      	ldr	r3, [pc, #72]	; (3200 <__aeabi_d2f+0x110>)
    31b6:	18f3      	adds	r3, r6, r3
    31b8:	409d      	lsls	r5, r3
    31ba:	1e6e      	subs	r6, r5, #1
    31bc:	41b5      	sbcs	r5, r6
    31be:	409a      	lsls	r2, r3
    31c0:	002b      	movs	r3, r5
    31c2:	4313      	orrs	r3, r2
    31c4:	0022      	movs	r2, r4
    31c6:	40c2      	lsrs	r2, r0
    31c8:	431a      	orrs	r2, r3
    31ca:	2300      	movs	r3, #0
    31cc:	e7ab      	b.n	3126 <__aeabi_d2f+0x36>
    31ce:	2300      	movs	r3, #0
    31d0:	e7d5      	b.n	317e <__aeabi_d2f+0x8e>
    31d2:	2502      	movs	r5, #2
    31d4:	426d      	negs	r5, r5
    31d6:	1aeb      	subs	r3, r5, r3
    31d8:	0015      	movs	r5, r2
    31da:	40dd      	lsrs	r5, r3
    31dc:	2820      	cmp	r0, #32
    31de:	d009      	beq.n	31f4 <__aeabi_d2f+0x104>
    31e0:	4b08      	ldr	r3, [pc, #32]	; (3204 <__aeabi_d2f+0x114>)
    31e2:	18f3      	adds	r3, r6, r3
    31e4:	409a      	lsls	r2, r3
    31e6:	4314      	orrs	r4, r2
    31e8:	1e62      	subs	r2, r4, #1
    31ea:	4194      	sbcs	r4, r2
    31ec:	0022      	movs	r2, r4
    31ee:	2300      	movs	r3, #0
    31f0:	432a      	orrs	r2, r5
    31f2:	e798      	b.n	3126 <__aeabi_d2f+0x36>
    31f4:	2200      	movs	r2, #0
    31f6:	e7f6      	b.n	31e6 <__aeabi_d2f+0xf6>
    31f8:	2200      	movs	r2, #0
    31fa:	e7a8      	b.n	314e <__aeabi_d2f+0x5e>
    31fc:	fffffc80 	.word	0xfffffc80
    3200:	fffffc82 	.word	0xfffffc82
    3204:	fffffca2 	.word	0xfffffca2

00003208 <__clzsi2>:
    3208:	211c      	movs	r1, #28
    320a:	2301      	movs	r3, #1
    320c:	041b      	lsls	r3, r3, #16
    320e:	4298      	cmp	r0, r3
    3210:	d301      	bcc.n	3216 <__clzsi2+0xe>
    3212:	0c00      	lsrs	r0, r0, #16
    3214:	3910      	subs	r1, #16
    3216:	0a1b      	lsrs	r3, r3, #8
    3218:	4298      	cmp	r0, r3
    321a:	d301      	bcc.n	3220 <__clzsi2+0x18>
    321c:	0a00      	lsrs	r0, r0, #8
    321e:	3908      	subs	r1, #8
    3220:	091b      	lsrs	r3, r3, #4
    3222:	4298      	cmp	r0, r3
    3224:	d301      	bcc.n	322a <__clzsi2+0x22>
    3226:	0900      	lsrs	r0, r0, #4
    3228:	3904      	subs	r1, #4
    322a:	a202      	add	r2, pc, #8	; (adr r2, 3234 <__clzsi2+0x2c>)
    322c:	5c10      	ldrb	r0, [r2, r0]
    322e:	1840      	adds	r0, r0, r1
    3230:	4770      	bx	lr
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	02020304 	.word	0x02020304
    3238:	01010101 	.word	0x01010101
	...

00003244 <__libc_init_array>:
    3244:	b570      	push	{r4, r5, r6, lr}
    3246:	4e0d      	ldr	r6, [pc, #52]	; (327c <__libc_init_array+0x38>)
    3248:	4d0d      	ldr	r5, [pc, #52]	; (3280 <__libc_init_array+0x3c>)
    324a:	2400      	movs	r4, #0
    324c:	1bad      	subs	r5, r5, r6
    324e:	10ad      	asrs	r5, r5, #2
    3250:	d005      	beq.n	325e <__libc_init_array+0x1a>
    3252:	00a3      	lsls	r3, r4, #2
    3254:	58f3      	ldr	r3, [r6, r3]
    3256:	3401      	adds	r4, #1
    3258:	4798      	blx	r3
    325a:	42a5      	cmp	r5, r4
    325c:	d1f9      	bne.n	3252 <__libc_init_array+0xe>
    325e:	f000 f9cd 	bl	35fc <_init>
    3262:	4e08      	ldr	r6, [pc, #32]	; (3284 <__libc_init_array+0x40>)
    3264:	4d08      	ldr	r5, [pc, #32]	; (3288 <__libc_init_array+0x44>)
    3266:	2400      	movs	r4, #0
    3268:	1bad      	subs	r5, r5, r6
    326a:	10ad      	asrs	r5, r5, #2
    326c:	d005      	beq.n	327a <__libc_init_array+0x36>
    326e:	00a3      	lsls	r3, r4, #2
    3270:	58f3      	ldr	r3, [r6, r3]
    3272:	3401      	adds	r4, #1
    3274:	4798      	blx	r3
    3276:	42a5      	cmp	r5, r4
    3278:	d1f9      	bne.n	326e <__libc_init_array+0x2a>
    327a:	bd70      	pop	{r4, r5, r6, pc}
    327c:	00003608 	.word	0x00003608
    3280:	00003608 	.word	0x00003608
    3284:	00003608 	.word	0x00003608
    3288:	00003610 	.word	0x00003610

0000328c <memset>:
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	0783      	lsls	r3, r0, #30
    3290:	d03f      	beq.n	3312 <memset+0x86>
    3292:	1e54      	subs	r4, r2, #1
    3294:	2a00      	cmp	r2, #0
    3296:	d03b      	beq.n	3310 <memset+0x84>
    3298:	b2ce      	uxtb	r6, r1
    329a:	0003      	movs	r3, r0
    329c:	2503      	movs	r5, #3
    329e:	e003      	b.n	32a8 <memset+0x1c>
    32a0:	1e62      	subs	r2, r4, #1
    32a2:	2c00      	cmp	r4, #0
    32a4:	d034      	beq.n	3310 <memset+0x84>
    32a6:	0014      	movs	r4, r2
    32a8:	3301      	adds	r3, #1
    32aa:	1e5a      	subs	r2, r3, #1
    32ac:	7016      	strb	r6, [r2, #0]
    32ae:	422b      	tst	r3, r5
    32b0:	d1f6      	bne.n	32a0 <memset+0x14>
    32b2:	2c03      	cmp	r4, #3
    32b4:	d924      	bls.n	3300 <memset+0x74>
    32b6:	25ff      	movs	r5, #255	; 0xff
    32b8:	400d      	ands	r5, r1
    32ba:	022a      	lsls	r2, r5, #8
    32bc:	4315      	orrs	r5, r2
    32be:	042a      	lsls	r2, r5, #16
    32c0:	4315      	orrs	r5, r2
    32c2:	2c0f      	cmp	r4, #15
    32c4:	d911      	bls.n	32ea <memset+0x5e>
    32c6:	0026      	movs	r6, r4
    32c8:	3e10      	subs	r6, #16
    32ca:	0936      	lsrs	r6, r6, #4
    32cc:	3601      	adds	r6, #1
    32ce:	0136      	lsls	r6, r6, #4
    32d0:	001a      	movs	r2, r3
    32d2:	199b      	adds	r3, r3, r6
    32d4:	6015      	str	r5, [r2, #0]
    32d6:	6055      	str	r5, [r2, #4]
    32d8:	6095      	str	r5, [r2, #8]
    32da:	60d5      	str	r5, [r2, #12]
    32dc:	3210      	adds	r2, #16
    32de:	4293      	cmp	r3, r2
    32e0:	d1f8      	bne.n	32d4 <memset+0x48>
    32e2:	220f      	movs	r2, #15
    32e4:	4014      	ands	r4, r2
    32e6:	2c03      	cmp	r4, #3
    32e8:	d90a      	bls.n	3300 <memset+0x74>
    32ea:	1f26      	subs	r6, r4, #4
    32ec:	08b6      	lsrs	r6, r6, #2
    32ee:	3601      	adds	r6, #1
    32f0:	00b6      	lsls	r6, r6, #2
    32f2:	001a      	movs	r2, r3
    32f4:	199b      	adds	r3, r3, r6
    32f6:	c220      	stmia	r2!, {r5}
    32f8:	4293      	cmp	r3, r2
    32fa:	d1fc      	bne.n	32f6 <memset+0x6a>
    32fc:	2203      	movs	r2, #3
    32fe:	4014      	ands	r4, r2
    3300:	2c00      	cmp	r4, #0
    3302:	d005      	beq.n	3310 <memset+0x84>
    3304:	b2c9      	uxtb	r1, r1
    3306:	191c      	adds	r4, r3, r4
    3308:	7019      	strb	r1, [r3, #0]
    330a:	3301      	adds	r3, #1
    330c:	429c      	cmp	r4, r3
    330e:	d1fb      	bne.n	3308 <memset+0x7c>
    3310:	bd70      	pop	{r4, r5, r6, pc}
    3312:	0014      	movs	r4, r2
    3314:	0003      	movs	r3, r0
    3316:	e7cc      	b.n	32b2 <memset+0x26>

00003318 <register_fini>:
    3318:	4b03      	ldr	r3, [pc, #12]	; (3328 <register_fini+0x10>)
    331a:	b510      	push	{r4, lr}
    331c:	2b00      	cmp	r3, #0
    331e:	d002      	beq.n	3326 <register_fini+0xe>
    3320:	4802      	ldr	r0, [pc, #8]	; (332c <register_fini+0x14>)
    3322:	f000 f805 	bl	3330 <atexit>
    3326:	bd10      	pop	{r4, pc}
    3328:	00000000 	.word	0x00000000
    332c:	00003341 	.word	0x00003341

00003330 <atexit>:
    3330:	b510      	push	{r4, lr}
    3332:	0001      	movs	r1, r0
    3334:	2300      	movs	r3, #0
    3336:	2200      	movs	r2, #0
    3338:	2000      	movs	r0, #0
    333a:	f000 f81b 	bl	3374 <__register_exitproc>
    333e:	bd10      	pop	{r4, pc}

00003340 <__libc_fini_array>:
    3340:	b570      	push	{r4, r5, r6, lr}
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <__libc_fini_array+0x28>)
    3344:	4c09      	ldr	r4, [pc, #36]	; (336c <__libc_fini_array+0x2c>)
    3346:	1ae4      	subs	r4, r4, r3
    3348:	10a4      	asrs	r4, r4, #2
    334a:	d009      	beq.n	3360 <__libc_fini_array+0x20>
    334c:	4a08      	ldr	r2, [pc, #32]	; (3370 <__libc_fini_array+0x30>)
    334e:	18a5      	adds	r5, r4, r2
    3350:	00ad      	lsls	r5, r5, #2
    3352:	18ed      	adds	r5, r5, r3
    3354:	682b      	ldr	r3, [r5, #0]
    3356:	3c01      	subs	r4, #1
    3358:	4798      	blx	r3
    335a:	3d04      	subs	r5, #4
    335c:	2c00      	cmp	r4, #0
    335e:	d1f9      	bne.n	3354 <__libc_fini_array+0x14>
    3360:	f000 f956 	bl	3610 <_fini>
    3364:	bd70      	pop	{r4, r5, r6, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	0000361c 	.word	0x0000361c
    336c:	00003620 	.word	0x00003620
    3370:	3fffffff 	.word	0x3fffffff

00003374 <__register_exitproc>:
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3376:	4644      	mov	r4, r8
    3378:	465f      	mov	r7, fp
    337a:	4656      	mov	r6, sl
    337c:	464d      	mov	r5, r9
    337e:	469b      	mov	fp, r3
    3380:	4b2f      	ldr	r3, [pc, #188]	; (3440 <__register_exitproc+0xcc>)
    3382:	b4f0      	push	{r4, r5, r6, r7}
    3384:	681c      	ldr	r4, [r3, #0]
    3386:	23a4      	movs	r3, #164	; 0xa4
    3388:	005b      	lsls	r3, r3, #1
    338a:	0005      	movs	r5, r0
    338c:	58e0      	ldr	r0, [r4, r3]
    338e:	000e      	movs	r6, r1
    3390:	4690      	mov	r8, r2
    3392:	2800      	cmp	r0, #0
    3394:	d04b      	beq.n	342e <__register_exitproc+0xba>
    3396:	6843      	ldr	r3, [r0, #4]
    3398:	2b1f      	cmp	r3, #31
    339a:	dc0d      	bgt.n	33b8 <__register_exitproc+0x44>
    339c:	1c5c      	adds	r4, r3, #1
    339e:	2d00      	cmp	r5, #0
    33a0:	d121      	bne.n	33e6 <__register_exitproc+0x72>
    33a2:	3302      	adds	r3, #2
    33a4:	009b      	lsls	r3, r3, #2
    33a6:	6044      	str	r4, [r0, #4]
    33a8:	501e      	str	r6, [r3, r0]
    33aa:	2000      	movs	r0, #0
    33ac:	bc3c      	pop	{r2, r3, r4, r5}
    33ae:	4690      	mov	r8, r2
    33b0:	4699      	mov	r9, r3
    33b2:	46a2      	mov	sl, r4
    33b4:	46ab      	mov	fp, r5
    33b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b8:	4b22      	ldr	r3, [pc, #136]	; (3444 <__register_exitproc+0xd0>)
    33ba:	2b00      	cmp	r3, #0
    33bc:	d03c      	beq.n	3438 <__register_exitproc+0xc4>
    33be:	20c8      	movs	r0, #200	; 0xc8
    33c0:	0040      	lsls	r0, r0, #1
    33c2:	e000      	b.n	33c6 <__register_exitproc+0x52>
    33c4:	bf00      	nop
    33c6:	2800      	cmp	r0, #0
    33c8:	d036      	beq.n	3438 <__register_exitproc+0xc4>
    33ca:	22a4      	movs	r2, #164	; 0xa4
    33cc:	2300      	movs	r3, #0
    33ce:	0052      	lsls	r2, r2, #1
    33d0:	58a1      	ldr	r1, [r4, r2]
    33d2:	6043      	str	r3, [r0, #4]
    33d4:	6001      	str	r1, [r0, #0]
    33d6:	50a0      	str	r0, [r4, r2]
    33d8:	3240      	adds	r2, #64	; 0x40
    33da:	5083      	str	r3, [r0, r2]
    33dc:	3204      	adds	r2, #4
    33de:	5083      	str	r3, [r0, r2]
    33e0:	2401      	movs	r4, #1
    33e2:	2d00      	cmp	r5, #0
    33e4:	d0dd      	beq.n	33a2 <__register_exitproc+0x2e>
    33e6:	009a      	lsls	r2, r3, #2
    33e8:	4691      	mov	r9, r2
    33ea:	4481      	add	r9, r0
    33ec:	4642      	mov	r2, r8
    33ee:	2188      	movs	r1, #136	; 0x88
    33f0:	464f      	mov	r7, r9
    33f2:	507a      	str	r2, [r7, r1]
    33f4:	22c4      	movs	r2, #196	; 0xc4
    33f6:	0052      	lsls	r2, r2, #1
    33f8:	4690      	mov	r8, r2
    33fa:	4480      	add	r8, r0
    33fc:	4642      	mov	r2, r8
    33fe:	3987      	subs	r1, #135	; 0x87
    3400:	4099      	lsls	r1, r3
    3402:	6812      	ldr	r2, [r2, #0]
    3404:	468a      	mov	sl, r1
    3406:	430a      	orrs	r2, r1
    3408:	4694      	mov	ip, r2
    340a:	4642      	mov	r2, r8
    340c:	4661      	mov	r1, ip
    340e:	6011      	str	r1, [r2, #0]
    3410:	2284      	movs	r2, #132	; 0x84
    3412:	4649      	mov	r1, r9
    3414:	465f      	mov	r7, fp
    3416:	0052      	lsls	r2, r2, #1
    3418:	508f      	str	r7, [r1, r2]
    341a:	2d02      	cmp	r5, #2
    341c:	d1c1      	bne.n	33a2 <__register_exitproc+0x2e>
    341e:	0002      	movs	r2, r0
    3420:	4655      	mov	r5, sl
    3422:	328d      	adds	r2, #141	; 0x8d
    3424:	32ff      	adds	r2, #255	; 0xff
    3426:	6811      	ldr	r1, [r2, #0]
    3428:	430d      	orrs	r5, r1
    342a:	6015      	str	r5, [r2, #0]
    342c:	e7b9      	b.n	33a2 <__register_exitproc+0x2e>
    342e:	0020      	movs	r0, r4
    3430:	304d      	adds	r0, #77	; 0x4d
    3432:	30ff      	adds	r0, #255	; 0xff
    3434:	50e0      	str	r0, [r4, r3]
    3436:	e7ae      	b.n	3396 <__register_exitproc+0x22>
    3438:	2001      	movs	r0, #1
    343a:	4240      	negs	r0, r0
    343c:	e7b6      	b.n	33ac <__register_exitproc+0x38>
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	000035f8 	.word	0x000035f8
    3444:	00000000 	.word	0x00000000

00003448 <spi2MOSI>:
    3448:	0c000002 00000200                                .....

0000344d <spi2SCK>:
    344d:	0e000002 00000200                                .....

00003452 <spi2MISO>:
    3452:	0d000002 8d200000                                ......

00003458 <lookupTable.12461>:
    3458:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    3468:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    3478:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    3488:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    3498:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    34a8:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    34b8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    34c8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    34d8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    34e8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    34f8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    3508:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    3518:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    3528:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    3538:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    3548:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    3558:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    3568:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    3578:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    3588:	000f048e                                ....

0000358c <senseBatPin>:
    358c:	06000000 01000106                                .....

00003591 <senseAPin>:
    3591:	03010001 0100010b                                .....

00003596 <senseBPin>:
    3596:	02010001 0000000a                                .....

0000359b <senseCPin>:
    359b:	03000000 00000001                                .....

000035a0 <senseDPin>:
    35a0:	02000000 00000000                                .....

000035a5 <analogAccelPin>:
    35a5:	07000000 00000207                                .....

000035aa <spi2MOSI>:
    35aa:	0c000002 00000200                                .....

000035af <spi2SCK>:
    35af:	0e000002 00253c00 0023fc00 0023fc00     .....<%...#...#.
    35bf:	0023fa00 00251400 00251400 00250600     ..#...%...%...%.
    35cf:	0023fa00 00251400 00250600 00251400     ..#...%...%...%.
    35df:	0023fa00 00251c00 00251c00 00251c00     ..#...%...%...%.
    35ef:	00271c00 00004300 00001000                       ..'..C...

000035f8 <_global_impure_ptr>:
    35f8:	20000010                                ... 

000035fc <_init>:
    35fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3602:	bc08      	pop	{r3}
    3604:	469e      	mov	lr, r3
    3606:	4770      	bx	lr

00003608 <__init_array_start>:
    3608:	00003319 	.word	0x00003319

0000360c <__frame_dummy_init_array_entry>:
    360c:	000000dd                                ....

00003610 <_fini>:
    3610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3616:	bc08      	pop	{r3}
    3618:	469e      	mov	lr, r3
    361a:	4770      	bx	lr

0000361c <__fini_array_start>:
    361c:	000000b5 	.word	0x000000b5
