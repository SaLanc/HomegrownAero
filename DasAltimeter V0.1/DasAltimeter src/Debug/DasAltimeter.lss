
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003518  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00003518  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003960  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003b10  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001846d  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8a  00000000  00000000  00038926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001a25  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000308  00000000  00000000  0003c0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000348  00000000  00000000  0003c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014bde  00000000  00000000  0003c725  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000704c  00000000  00000000  00051303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000721ab  00000000  00000000  0005834f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000abc  00000000  00000000  000ca4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteByte(uint32_t address, uint8_t byteToWrite) {
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
       c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
      2c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000e05 	.word	0x00000e05
      50:	00000115 	.word	0x00000115

    dummy_rx = spiDataTransfer(SPI1,byteToWrite);
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
    pinHigh(cs_mem);

}
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000ead 	.word	0x00000ead
      90:	00000f15 	.word	0x00000f15
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00003518 	.word	0x00003518

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00003518 	.word	0x00003518
     10c:	00003518 	.word	0x00003518
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	00003518 	.word	0x00003518
     1dc:	20000438 	.word	0x20000438
     1e0:	200005f0 	.word	0x200005f0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	0000305d 	.word	0x0000305d
     20c:	00000849 	.word	0x00000849

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	464f      	mov	r7, r9
     224:	4646      	mov	r6, r8
     226:	b4c0      	push	{r6, r7}
     228:	b083      	sub	sp, #12
     22a:	4e16      	ldr	r6, [pc, #88]	; (284 <readMS5803AdcResults+0x64>)
     22c:	2380      	movs	r3, #128	; 0x80
     22e:	021b      	lsls	r3, r3, #8
     230:	4699      	mov	r9, r3
     232:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     234:	4c14      	ldr	r4, [pc, #80]	; (288 <readMS5803AdcResults+0x68>)
     236:	2300      	movs	r3, #0
     238:	9300      	str	r3, [sp, #0]
     23a:	6822      	ldr	r2, [r4, #0]
     23c:	6863      	ldr	r3, [r4, #4]
     23e:	68a0      	ldr	r0, [r4, #8]
     240:	68e1      	ldr	r1, [r4, #12]
     242:	4d12      	ldr	r5, [pc, #72]	; (28c <readMS5803AdcResults+0x6c>)
     244:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     246:	6922      	ldr	r2, [r4, #16]
     248:	6963      	ldr	r3, [r4, #20]
     24a:	68a0      	ldr	r0, [r4, #8]
     24c:	68e1      	ldr	r1, [r4, #12]
     24e:	4f10      	ldr	r7, [pc, #64]	; (290 <readMS5803AdcResults+0x70>)
     250:	47b8      	blx	r7
     252:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     254:	6922      	ldr	r2, [r4, #16]
     256:	6963      	ldr	r3, [r4, #20]
     258:	68a0      	ldr	r0, [r4, #8]
     25a:	68e1      	ldr	r1, [r4, #12]
     25c:	47b8      	blx	r7
     25e:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     260:	6922      	ldr	r2, [r4, #16]
     262:	6963      	ldr	r3, [r4, #20]
     264:	68a0      	ldr	r0, [r4, #8]
     266:	68e1      	ldr	r1, [r4, #12]
     268:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26a:	464b      	mov	r3, r9
     26c:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     26e:	4643      	mov	r3, r8
     270:	041e      	lsls	r6, r3, #16
     272:	022d      	lsls	r5, r5, #8
     274:	4335      	orrs	r5, r6
     276:	4328      	orrs	r0, r5
}
     278:	b003      	add	sp, #12
     27a:	bc0c      	pop	{r2, r3}
     27c:	4690      	mov	r8, r2
     27e:	4699      	mov	r9, r3
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	41004400 	.word	0x41004400
     288:	00003260 	.word	0x00003260
     28c:	00000b99 	.word	0x00000b99
     290:	00000be9 	.word	0x00000be9

00000294 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	464f      	mov	r7, r9
     298:	4646      	mov	r6, r8
     29a:	b4c0      	push	{r6, r7}
     29c:	b08b      	sub	sp, #44	; 0x2c
     29e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     2a0:	8803      	ldrh	r3, [r0, #0]
     2a2:	251e      	movs	r5, #30
     2a4:	aa02      	add	r2, sp, #8
     2a6:	4694      	mov	ip, r2
     2a8:	4465      	add	r5, ip
     2aa:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2ac:	8843      	ldrh	r3, [r0, #2]
     2ae:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     2b0:	8883      	ldrh	r3, [r0, #4]
     2b2:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2b4:	88c3      	ldrh	r3, [r0, #6]
     2b6:	ae08      	add	r6, sp, #32
     2b8:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     2ba:	8903      	ldrh	r3, [r0, #8]
     2bc:	2216      	movs	r2, #22
     2be:	4462      	add	r2, ip
     2c0:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     2c2:	8941      	ldrh	r1, [r0, #10]
     2c4:	ab07      	add	r3, sp, #28
     2c6:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     2c8:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2ca:	0224      	lsls	r4, r4, #8
     2cc:	6902      	ldr	r2, [r0, #16]
     2ce:	1b14      	subs	r4, r2, r4
     2d0:	17e2      	asrs	r2, r4, #31
     2d2:	0011      	movs	r1, r2
     2d4:	8818      	ldrh	r0, [r3, #0]
     2d6:	b280      	uxth	r0, r0
     2d8:	4b2b      	ldr	r3, [pc, #172]	; (388 <ConvertPressureTemperature+0xf4>)
     2da:	4699      	mov	r9, r3
     2dc:	0022      	movs	r2, r4
     2de:	9101      	str	r1, [sp, #4]
     2e0:	000b      	movs	r3, r1
     2e2:	2100      	movs	r1, #0
     2e4:	47c8      	blx	r9
     2e6:	23fa      	movs	r3, #250	; 0xfa
     2e8:	00db      	lsls	r3, r3, #3
     2ea:	469c      	mov	ip, r3
     2ec:	4461      	add	r1, ip
     2ee:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2f0:	ab02      	add	r3, sp, #8
     2f2:	8b9b      	ldrh	r3, [r3, #28]
     2f4:	b29b      	uxth	r3, r3
     2f6:	4698      	mov	r8, r3
     2f8:	8830      	ldrh	r0, [r6, #0]
     2fa:	b280      	uxth	r0, r0
     2fc:	0022      	movs	r2, r4
     2fe:	9b01      	ldr	r3, [sp, #4]
     300:	2100      	movs	r1, #0
     302:	47c8      	blx	r9
     304:	064e      	lsls	r6, r1, #25
     306:	09c2      	lsrs	r2, r0, #7
     308:	4332      	orrs	r2, r6
     30a:	11cb      	asrs	r3, r1, #7
     30c:	2100      	movs	r1, #0
     30e:	4646      	mov	r6, r8
     310:	0430      	lsls	r0, r6, #16
     312:	1812      	adds	r2, r2, r0
     314:	414b      	adcs	r3, r1
     316:	9204      	str	r2, [sp, #16]
     318:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     31a:	882d      	ldrh	r5, [r5, #0]
     31c:	b2ad      	uxth	r5, r5
     31e:	aa02      	add	r2, sp, #8
     320:	8b50      	ldrh	r0, [r2, #26]
     322:	b280      	uxth	r0, r0
     324:	0022      	movs	r2, r4
     326:	9b01      	ldr	r3, [sp, #4]
     328:	2100      	movs	r1, #0
     32a:	47c8      	blx	r9
     32c:	060c      	lsls	r4, r1, #24
     32e:	0a02      	lsrs	r2, r0, #8
     330:	4322      	orrs	r2, r4
     332:	120b      	asrs	r3, r1, #8
     334:	2100      	movs	r1, #0
     336:	03e8      	lsls	r0, r5, #15
     338:	1812      	adds	r2, r2, r0
     33a:	414b      	adcs	r3, r1
     33c:	9202      	str	r2, [sp, #8]
     33e:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     340:	9a02      	ldr	r2, [sp, #8]
     342:	9b03      	ldr	r3, [sp, #12]
     344:	9c04      	ldr	r4, [sp, #16]
     346:	9d05      	ldr	r5, [sp, #20]
     348:	68f8      	ldr	r0, [r7, #12]
     34a:	2100      	movs	r1, #0
     34c:	47c8      	blx	r9
     34e:	17ce      	asrs	r6, r1, #31
     350:	02f6      	lsls	r6, r6, #11
     352:	0af2      	lsrs	r2, r6, #11
     354:	2300      	movs	r3, #0
     356:	1880      	adds	r0, r0, r2
     358:	4159      	adcs	r1, r3
     35a:	02ce      	lsls	r6, r1, #11
     35c:	0d42      	lsrs	r2, r0, #21
     35e:	4332      	orrs	r2, r6
     360:	154b      	asrs	r3, r1, #21
     362:	1b12      	subs	r2, r2, r4
     364:	41ab      	sbcs	r3, r5
     366:	17dc      	asrs	r4, r3, #31
     368:	0464      	lsls	r4, r4, #17
     36a:	0c60      	lsrs	r0, r4, #17
     36c:	2100      	movs	r1, #0
     36e:	1812      	adds	r2, r2, r0
     370:	414b      	adcs	r3, r1
     372:	0011      	movs	r1, r2
     374:	045b      	lsls	r3, r3, #17
     376:	0bca      	lsrs	r2, r1, #15
     378:	431a      	orrs	r2, r3
     37a:	61fa      	str	r2, [r7, #28]
}
     37c:	b00b      	add	sp, #44	; 0x2c
     37e:	bc0c      	pop	{r2, r3}
     380:	4690      	mov	r8, r2
     382:	4699      	mov	r9, r3
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	0000154d 	.word	0x0000154d

0000038c <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     390:	69c2      	ldr	r2, [r0, #28]
     392:	0093      	lsls	r3, r2, #2
     394:	189b      	adds	r3, r3, r2
     396:	005b      	lsls	r3, r3, #1
     398:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     39a:	4a11      	ldr	r2, [pc, #68]	; (3e0 <pascalToCent+0x54>)
     39c:	4293      	cmp	r3, r2
     39e:	d902      	bls.n	3a6 <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     3a0:	4b10      	ldr	r3, [pc, #64]	; (3e4 <pascalToCent+0x58>)
     3a2:	6203      	str	r3, [r0, #32]
     3a4:	e01a      	b.n	3dc <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     3a6:	4a0e      	ldr	r2, [pc, #56]	; (3e0 <pascalToCent+0x54>)
     3a8:	1ad2      	subs	r2, r2, r3
     3aa:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     3ac:	2a4b      	cmp	r2, #75	; 0x4b
     3ae:	dd02      	ble.n	3b6 <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     3b0:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <pascalToCent+0x5c>)
     3b2:	6203      	str	r3, [r0, #32]
     3b4:	e012      	b.n	3dc <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     3b6:	4d0d      	ldr	r5, [pc, #52]	; (3ec <pascalToCent+0x60>)
     3b8:	0091      	lsls	r1, r2, #2
     3ba:	1869      	adds	r1, r5, r1
     3bc:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3be:	0296      	lsls	r6, r2, #10
     3c0:	4907      	ldr	r1, [pc, #28]	; (3e0 <pascalToCent+0x54>)
     3c2:	1b89      	subs	r1, r1, r6
     3c4:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     3c6:	3201      	adds	r2, #1
     3c8:	0092      	lsls	r2, r2, #2
     3ca:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3cc:	6992      	ldr	r2, [r2, #24]
     3ce:	1a12      	subs	r2, r2, r0
     3d0:	4353      	muls	r3, r2
     3d2:	0a9b      	lsrs	r3, r3, #10
     3d4:	1818      	adds	r0, r3, r0
     3d6:	4b06      	ldr	r3, [pc, #24]	; (3f0 <pascalToCent+0x64>)
     3d8:	4798      	blx	r3
     3da:	6220      	str	r0, [r4, #32]
        }
    }
}
     3dc:	bd70      	pop	{r4, r5, r6, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	000199cc 	.word	0x000199cc
     3e4:	c6e5c000 	.word	0xc6e5c000
     3e8:	497048e0 	.word	0x497048e0
     3ec:	00003260 	.word	0x00003260
     3f0:	00001ff9 	.word	0x00001ff9

000003f4 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	465f      	mov	r7, fp
     3f8:	4656      	mov	r6, sl
     3fa:	464d      	mov	r5, r9
     3fc:	4644      	mov	r4, r8
     3fe:	b4f0      	push	{r4, r5, r6, r7}
     400:	b083      	sub	sp, #12
     402:	0007      	movs	r7, r0
     404:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     406:	4b1a      	ldr	r3, [pc, #104]	; (470 <readMS5803Coefficients+0x7c>)
     408:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     40a:	4c1a      	ldr	r4, [pc, #104]	; (474 <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     40c:	2596      	movs	r5, #150	; 0x96
     40e:	00ad      	lsls	r5, r5, #2
     410:	0028      	movs	r0, r5
     412:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     414:	0028      	movs	r0, r5
     416:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     418:	2380      	movs	r3, #128	; 0x80
     41a:	021b      	lsls	r3, r3, #8
     41c:	4699      	mov	r9, r3
     41e:	4a16      	ldr	r2, [pc, #88]	; (478 <readMS5803Coefficients+0x84>)
     420:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     422:	9600      	str	r6, [sp, #0]
     424:	6822      	ldr	r2, [r4, #0]
     426:	6863      	ldr	r3, [r4, #4]
     428:	68a0      	ldr	r0, [r4, #8]
     42a:	68e1      	ldr	r1, [r4, #12]
     42c:	4d13      	ldr	r5, [pc, #76]	; (47c <readMS5803Coefficients+0x88>)
     42e:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     430:	6922      	ldr	r2, [r4, #16]
     432:	6963      	ldr	r3, [r4, #20]
     434:	68a0      	ldr	r0, [r4, #8]
     436:	68e1      	ldr	r1, [r4, #12]
     438:	4d11      	ldr	r5, [pc, #68]	; (480 <readMS5803Coefficients+0x8c>)
     43a:	47a8      	blx	r5
     43c:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     43e:	6922      	ldr	r2, [r4, #16]
     440:	6963      	ldr	r3, [r4, #20]
     442:	68a0      	ldr	r0, [r4, #8]
     444:	68e1      	ldr	r1, [r4, #12]
     446:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     448:	464b      	mov	r3, r9
     44a:	4a0b      	ldr	r2, [pc, #44]	; (478 <readMS5803Coefficients+0x84>)
     44c:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     44e:	4643      	mov	r3, r8
     450:	021d      	lsls	r5, r3, #8
     452:	4328      	orrs	r0, r5
     454:	8038      	strh	r0, [r7, #0]
     456:	3602      	adds	r6, #2
     458:	b2f6      	uxtb	r6, r6
     45a:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     45c:	2eae      	cmp	r6, #174	; 0xae
     45e:	d1d5      	bne.n	40c <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     460:	b003      	add	sp, #12
     462:	bc3c      	pop	{r2, r3, r4, r5}
     464:	4690      	mov	r8, r2
     466:	4699      	mov	r9, r3
     468:	46a2      	mov	sl, r4
     46a:	46ab      	mov	fp, r5
     46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00000dad 	.word	0x00000dad
     474:	00003260 	.word	0x00003260
     478:	41004400 	.word	0x41004400
     47c:	00000b99 	.word	0x00000b99
     480:	00000be9 	.word	0x00000be9

00000484 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     484:	b5f0      	push	{r4, r5, r6, r7, lr}
     486:	b083      	sub	sp, #12
     488:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     48a:	4d10      	ldr	r5, [pc, #64]	; (4cc <initMS5803Barometer+0x48>)
     48c:	2680      	movs	r6, #128	; 0x80
     48e:	0236      	lsls	r6, r6, #8
     490:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     492:	490f      	ldr	r1, [pc, #60]	; (4d0 <initMS5803Barometer+0x4c>)
     494:	231e      	movs	r3, #30
     496:	9300      	str	r3, [sp, #0]
     498:	680a      	ldr	r2, [r1, #0]
     49a:	684b      	ldr	r3, [r1, #4]
     49c:	6888      	ldr	r0, [r1, #8]
     49e:	68c9      	ldr	r1, [r1, #12]
     4a0:	4f0c      	ldr	r7, [pc, #48]	; (4d4 <initMS5803Barometer+0x50>)
     4a2:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a4:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     4a6:	20c8      	movs	r0, #200	; 0xc8
     4a8:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <initMS5803Barometer+0x54>)
     4aa:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     4ac:	0020      	movs	r0, r4
     4ae:	4b0b      	ldr	r3, [pc, #44]	; (4dc <initMS5803Barometer+0x58>)
     4b0:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     4b2:	4b0b      	ldr	r3, [pc, #44]	; (4e0 <initMS5803Barometer+0x5c>)
     4b4:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     4b6:	4b0b      	ldr	r3, [pc, #44]	; (4e4 <initMS5803Barometer+0x60>)
     4b8:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     4ba:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <initMS5803Barometer+0x64>)
     4bc:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     4be:	4b0b      	ldr	r3, [pc, #44]	; (4ec <initMS5803Barometer+0x68>)
     4c0:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     4c2:	23fa      	movs	r3, #250	; 0xfa
     4c4:	00db      	lsls	r3, r3, #3
     4c6:	6163      	str	r3, [r4, #20]




}
     4c8:	b003      	add	sp, #12
     4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4cc:	41004400 	.word	0x41004400
     4d0:	00003260 	.word	0x00003260
     4d4:	00000b99 	.word	0x00000b99
     4d8:	00000dd9 	.word	0x00000dd9
     4dc:	000003f5 	.word	0x000003f5
     4e0:	457a0000 	.word	0x457a0000
     4e4:	00002710 	.word	0x00002710
     4e8:	0041c9fe 	.word	0x0041c9fe
     4ec:	007ffae4 	.word	0x007ffae4

000004f0 <init>:
#include "math.h"




void init() {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	465f      	mov	r7, fp
     4f4:	4656      	mov	r6, sl
     4f6:	464d      	mov	r5, r9
     4f8:	4644      	mov	r4, r8
     4fa:	b4f0      	push	{r4, r5, r6, r7}
     4fc:	b083      	sub	sp, #12
    SystemInit();
     4fe:	4bc3      	ldr	r3, [pc, #780]	; (80c <init+0x31c>)
     500:	4798      	blx	r3
    GclkInit();
     502:	4bc3      	ldr	r3, [pc, #780]	; (810 <init+0x320>)
     504:	4798      	blx	r3
    RtcInit();
     506:	4bc3      	ldr	r3, [pc, #780]	; (814 <init+0x324>)
     508:	4798      	blx	r3
    delayInit();
     50a:	4bc3      	ldr	r3, [pc, #780]	; (818 <init+0x328>)
     50c:	4798      	blx	r3
    adcInit();
     50e:	4bc3      	ldr	r3, [pc, #780]	; (81c <init+0x32c>)
     510:	4798      	blx	r3
    dmaInit();
     512:	4bc3      	ldr	r3, [pc, #780]	; (820 <init+0x330>)
     514:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     516:	4bc3      	ldr	r3, [pc, #780]	; (824 <init+0x334>)
     518:	2240      	movs	r2, #64	; 0x40
     51a:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     51c:	21c1      	movs	r1, #193	; 0xc1
     51e:	0089      	lsls	r1, r1, #2
     520:	5858      	ldr	r0, [r3, r1]
     522:	4ac1      	ldr	r2, [pc, #772]	; (828 <init+0x338>)
     524:	4002      	ands	r2, r0
     526:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     528:	4bc0      	ldr	r3, [pc, #768]	; (82c <init+0x33c>)
     52a:	2054      	movs	r0, #84	; 0x54
     52c:	5c1a      	ldrb	r2, [r3, r0]
     52e:	2101      	movs	r1, #1
     530:	438a      	bics	r2, r1
     532:	541a      	strb	r2, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     534:	2280      	movs	r2, #128	; 0x80
     536:	0352      	lsls	r2, r2, #13
     538:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     53a:	2533      	movs	r5, #51	; 0x33
     53c:	5d58      	ldrb	r0, [r3, r5]
     53e:	220f      	movs	r2, #15
     540:	4390      	bics	r0, r2
     542:	2201      	movs	r2, #1
     544:	4310      	orrs	r0, r2
     546:	5558      	strb	r0, [r3, r5]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     548:	3513      	adds	r5, #19
     54a:	5d58      	ldrb	r0, [r3, r5]
     54c:	4310      	orrs	r0, r2
     54e:	5558      	strb	r0, [r3, r5]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     550:	20b1      	movs	r0, #177	; 0xb1
     552:	5c1f      	ldrb	r7, [r3, r0]
     554:	3d37      	subs	r5, #55	; 0x37
     556:	402f      	ands	r7, r5
     558:	2610      	movs	r6, #16
     55a:	4337      	orrs	r7, r6
     55c:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     55e:	24c3      	movs	r4, #195	; 0xc3
     560:	5d1f      	ldrb	r7, [r3, r4]
     562:	4317      	orrs	r7, r2
     564:	551f      	strb	r7, [r3, r4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     566:	5c1f      	ldrb	r7, [r3, r0]
     568:	402f      	ands	r7, r5
     56a:	4337      	orrs	r7, r6
     56c:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     56e:	5d1f      	ldrb	r7, [r3, r4]
     570:	4317      	orrs	r7, r2
     572:	551f      	strb	r7, [r3, r4]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     574:	3414      	adds	r4, #20
     576:	5d1f      	ldrb	r7, [r3, r4]
     578:	438f      	bics	r7, r1
     57a:	551f      	strb	r7, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     57c:	3c4f      	subs	r4, #79	; 0x4f
     57e:	46a2      	mov	sl, r4
     580:	2780      	movs	r7, #128	; 0x80
     582:	043f      	lsls	r7, r7, #16
     584:	511f      	str	r7, [r3, r4]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     586:	340c      	adds	r4, #12
     588:	46a4      	mov	ip, r4
     58a:	511f      	str	r7, [r3, r4]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     58c:	5c1f      	ldrb	r7, [r3, r0]
     58e:	3c85      	subs	r4, #133	; 0x85
     590:	43a7      	bics	r7, r4
     592:	4317      	orrs	r7, r2
     594:	541f      	strb	r7, [r3, r0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     596:	34b3      	adds	r4, #179	; 0xb3
     598:	46a0      	mov	r8, r4
     59a:	5d1f      	ldrb	r7, [r3, r4]
     59c:	4317      	orrs	r7, r2
     59e:	551f      	strb	r7, [r3, r4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     5a0:	5c1f      	ldrb	r7, [r3, r0]
     5a2:	3cb3      	subs	r4, #179	; 0xb3
     5a4:	43a7      	bics	r7, r4
     5a6:	4317      	orrs	r7, r2
     5a8:	541f      	strb	r7, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5aa:	4640      	mov	r0, r8
     5ac:	5c18      	ldrb	r0, [r3, r0]
     5ae:	4310      	orrs	r0, r2
     5b0:	4644      	mov	r4, r8
     5b2:	5518      	strb	r0, [r3, r4]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5b4:	27d6      	movs	r7, #214	; 0xd6
     5b6:	5dd8      	ldrb	r0, [r3, r7]
     5b8:	4388      	bics	r0, r1
     5ba:	55d8      	strb	r0, [r3, r7]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5bc:	2080      	movs	r0, #128	; 0x80
     5be:	03c0      	lsls	r0, r0, #15
     5c0:	4683      	mov	fp, r0
     5c2:	4650      	mov	r0, sl
     5c4:	465c      	mov	r4, fp
     5c6:	501c      	str	r4, [r3, r0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5c8:	4660      	mov	r0, ip
     5ca:	501c      	str	r4, [r3, r0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5cc:	3fa5      	subs	r7, #165	; 0xa5
     5ce:	5dd8      	ldrb	r0, [r3, r7]
     5d0:	4028      	ands	r0, r5
     5d2:	4306      	orrs	r6, r0
     5d4:	55de      	strb	r6, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5d6:	2643      	movs	r6, #67	; 0x43
     5d8:	5d98      	ldrb	r0, [r3, r6]
     5da:	4310      	orrs	r0, r2
     5dc:	5598      	strb	r0, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5de:	3616      	adds	r6, #22
     5e0:	5d98      	ldrb	r0, [r3, r6]
     5e2:	4388      	bics	r0, r1
     5e4:	5598      	strb	r0, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e6:	2080      	movs	r0, #128	; 0x80
     5e8:	0480      	lsls	r0, r0, #18
     5ea:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ec:	6158      	str	r0, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	5dd8      	ldrb	r0, [r3, r7]
     5f0:	240f      	movs	r4, #15
     5f2:	43a0      	bics	r0, r4
     5f4:	4310      	orrs	r0, r2
     5f6:	55d8      	strb	r0, [r3, r7]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f8:	3e17      	subs	r6, #23
     5fa:	5d98      	ldrb	r0, [r3, r6]
     5fc:	4310      	orrs	r0, r2
     5fe:	5598      	strb	r0, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	3616      	adds	r6, #22
     602:	5d98      	ldrb	r0, [r3, r6]
     604:	4388      	bics	r0, r1
     606:	5598      	strb	r0, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     608:	2080      	movs	r0, #128	; 0x80
     60a:	0440      	lsls	r0, r0, #17
     60c:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     60e:	6158      	str	r0, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     610:	2048      	movs	r0, #72	; 0x48
     612:	4680      	mov	r8, r0
     614:	5c18      	ldrb	r0, [r3, r0]
     616:	4388      	bics	r0, r1
     618:	4644      	mov	r4, r8
     61a:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     61c:	2080      	movs	r0, #128	; 0x80
     61e:	0040      	lsls	r0, r0, #1
     620:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     622:	38b7      	subs	r0, #183	; 0xb7
     624:	4681      	mov	r9, r0
     626:	5c18      	ldrb	r0, [r3, r0]
     628:	4388      	bics	r0, r1
     62a:	464c      	mov	r4, r9
     62c:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     62e:	2080      	movs	r0, #128	; 0x80
     630:	0080      	lsls	r0, r0, #2
     632:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     634:	371a      	adds	r7, #26
     636:	5dd8      	ldrb	r0, [r3, r7]
     638:	4388      	bics	r0, r1
     63a:	55d8      	strb	r0, [r3, r7]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     63c:	5dde      	ldrb	r6, [r3, r7]
     63e:	2002      	movs	r0, #2
     640:	4306      	orrs	r6, r0
     642:	55de      	strb	r6, [r3, r7]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     644:	2680      	movs	r6, #128	; 0x80
     646:	0136      	lsls	r6, r6, #4
     648:	605e      	str	r6, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     64a:	3c14      	subs	r4, #20
     64c:	5d1e      	ldrb	r6, [r3, r4]
     64e:	402e      	ands	r6, r5
     650:	0034      	movs	r4, r6
     652:	2620      	movs	r6, #32
     654:	4334      	orrs	r4, r6
     656:	46a4      	mov	ip, r4
     658:	2435      	movs	r4, #53	; 0x35
     65a:	4666      	mov	r6, ip
     65c:	551e      	strb	r6, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65e:	5ddc      	ldrb	r4, [r3, r7]
     660:	4314      	orrs	r4, r2
     662:	55dc      	strb	r4, [r3, r7]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     664:	2434      	movs	r4, #52	; 0x34
     666:	46a4      	mov	ip, r4
     668:	5d1f      	ldrb	r7, [r3, r4]
     66a:	402f      	ands	r7, r5
     66c:	3c14      	subs	r4, #20
     66e:	4327      	orrs	r7, r4
     670:	4664      	mov	r4, ip
     672:	551f      	strb	r7, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     674:	464c      	mov	r4, r9
     676:	5d1f      	ldrb	r7, [r3, r4]
     678:	4317      	orrs	r7, r2
     67a:	551f      	strb	r7, [r3, r4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67c:	4664      	mov	r4, ip
     67e:	5d1f      	ldrb	r7, [r3, r4]
     680:	3c25      	subs	r4, #37	; 0x25
     682:	43a7      	bics	r7, r4
     684:	4307      	orrs	r7, r0
     686:	4664      	mov	r4, ip
     688:	551f      	strb	r7, [r3, r4]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68a:	4644      	mov	r4, r8
     68c:	5d1f      	ldrb	r7, [r3, r4]
     68e:	4317      	orrs	r7, r2
     690:	551f      	strb	r7, [r3, r4]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     692:	3482      	adds	r4, #130	; 0x82
     694:	5d1f      	ldrb	r7, [r3, r4]
     696:	438f      	bics	r7, r1
     698:	551f      	strb	r7, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     69a:	2780      	movs	r7, #128	; 0x80
     69c:	00ff      	lsls	r7, r7, #3
     69e:	4654      	mov	r4, sl
     6a0:	511f      	str	r7, [r3, r4]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6a2:	3410      	adds	r4, #16
     6a4:	511f      	str	r7, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a6:	3c4e      	subs	r4, #78	; 0x4e
     6a8:	46a0      	mov	r8, r4
     6aa:	5d1c      	ldrb	r4, [r3, r4]
     6ac:	438c      	bics	r4, r1
     6ae:	46a4      	mov	ip, r4
     6b0:	4644      	mov	r4, r8
     6b2:	4666      	mov	r6, ip
     6b4:	551e      	strb	r6, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b6:	609f      	str	r7, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6b8:	619f      	str	r7, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ba:	3406      	adds	r4, #6
     6bc:	46a0      	mov	r8, r4
     6be:	5d1f      	ldrb	r7, [r3, r4]
     6c0:	438f      	bics	r7, r1
     6c2:	551f      	strb	r7, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c4:	2780      	movs	r7, #128	; 0x80
     6c6:	027f      	lsls	r7, r7, #9
     6c8:	609f      	str	r7, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	3401      	adds	r4, #1
     6cc:	46a1      	mov	r9, r4
     6ce:	5d1f      	ldrb	r7, [r3, r4]
     6d0:	438f      	bics	r7, r1
     6d2:	551f      	strb	r7, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2780      	movs	r7, #128	; 0x80
     6d6:	02bf      	lsls	r7, r7, #10
     6d8:	609f      	str	r7, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6da:	2753      	movs	r7, #83	; 0x53
     6dc:	5ddc      	ldrb	r4, [r3, r7]
     6de:	438c      	bics	r4, r1
     6e0:	55dc      	strb	r4, [r3, r7]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e2:	5ddc      	ldrb	r4, [r3, r7]
     6e4:	4304      	orrs	r4, r0
     6e6:	55dc      	strb	r4, [r3, r7]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6e8:	2480      	movs	r4, #128	; 0x80
     6ea:	0324      	lsls	r4, r4, #12
     6ec:	605c      	str	r4, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ee:	2439      	movs	r4, #57	; 0x39
     6f0:	46a2      	mov	sl, r4
     6f2:	5d1c      	ldrb	r4, [r3, r4]
     6f4:	402c      	ands	r4, r5
     6f6:	2620      	movs	r6, #32
     6f8:	4334      	orrs	r4, r6
     6fa:	46a4      	mov	ip, r4
     6fc:	4654      	mov	r4, sl
     6fe:	4666      	mov	r6, ip
     700:	551e      	strb	r6, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     702:	5ddc      	ldrb	r4, [r3, r7]
     704:	4314      	orrs	r4, r2
     706:	55dc      	strb	r4, [r3, r7]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     708:	3f1b      	subs	r7, #27
     70a:	5ddc      	ldrb	r4, [r3, r7]
     70c:	4025      	ands	r5, r4
     70e:	2620      	movs	r6, #32
     710:	432e      	orrs	r6, r5
     712:	55de      	strb	r6, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     714:	464c      	mov	r4, r9
     716:	5d1d      	ldrb	r5, [r3, r4]
     718:	4315      	orrs	r5, r2
     71a:	551d      	strb	r5, [r3, r4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     71c:	5ddd      	ldrb	r5, [r3, r7]
     71e:	3c42      	subs	r4, #66	; 0x42
     720:	43a5      	bics	r5, r4
     722:	4305      	orrs	r5, r0
     724:	55dd      	strb	r5, [r3, r7]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     726:	4644      	mov	r4, r8
     728:	5d1d      	ldrb	r5, [r3, r4]
     72a:	4315      	orrs	r5, r2
     72c:	551d      	strb	r5, [r3, r4]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72e:	2652      	movs	r6, #82	; 0x52
     730:	5d9d      	ldrb	r5, [r3, r6]
     732:	438d      	bics	r5, r1
     734:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     736:	2580      	movs	r5, #128	; 0x80
     738:	02ed      	lsls	r5, r5, #11
     73a:	609d      	str	r5, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     73c:	619d      	str	r5, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73e:	3e06      	subs	r6, #6
     740:	5d9d      	ldrb	r5, [r3, r6]
     742:	438d      	bics	r5, r1
     744:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     746:	2580      	movs	r5, #128	; 0x80
     748:	016d      	lsls	r5, r5, #5
     74a:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     74c:	3602      	adds	r6, #2
     74e:	5d9d      	ldrb	r5, [r3, r6]
     750:	438d      	bics	r5, r1
     752:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     754:	2580      	movs	r5, #128	; 0x80
     756:	01ed      	lsls	r5, r5, #7
     758:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75a:	254d      	movs	r5, #77	; 0x4d
     75c:	5d5e      	ldrb	r6, [r3, r5]
     75e:	438e      	bics	r6, r1
     760:	555e      	strb	r6, [r3, r5]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     762:	5d5e      	ldrb	r6, [r3, r5]
     764:	4306      	orrs	r6, r0
     766:	555e      	strb	r6, [r3, r5]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     768:	2580      	movs	r5, #128	; 0x80
     76a:	01ad      	lsls	r5, r5, #6
     76c:	605d      	str	r5, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76e:	264f      	movs	r6, #79	; 0x4f
     770:	5d9d      	ldrb	r5, [r3, r6]
     772:	438d      	bics	r5, r1
     774:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     776:	2580      	movs	r5, #128	; 0x80
     778:	022d      	lsls	r5, r5, #8
     77a:	609d      	str	r5, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     77c:	619d      	str	r5, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77e:	2555      	movs	r5, #85	; 0x55
     780:	5d5e      	ldrb	r6, [r3, r5]
     782:	438e      	bics	r6, r1
     784:	555e      	strb	r6, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     786:	2680      	movs	r6, #128	; 0x80
     788:	03b6      	lsls	r6, r6, #14
     78a:	609e      	str	r6, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     78c:	3c10      	subs	r4, #16
     78e:	555c      	strb	r4, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	3501      	adds	r5, #1
     792:	5d5e      	ldrb	r6, [r3, r5]
     794:	438e      	bics	r6, r1
     796:	555e      	strb	r6, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     798:	4659      	mov	r1, fp
     79a:	6099      	str	r1, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     79c:	263b      	movs	r6, #59	; 0x3b
     79e:	5d99      	ldrb	r1, [r3, r6]
     7a0:	240f      	movs	r4, #15
     7a2:	43a1      	bics	r1, r4
     7a4:	4308      	orrs	r0, r1
     7a6:	5598      	strb	r0, [r3, r6]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7a8:	5d59      	ldrb	r1, [r3, r5]
     7aa:	430a      	orrs	r2, r1
     7ac:	555a      	strb	r2, [r3, r5]
    pinMux(TxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     7ae:	2204      	movs	r2, #4
     7b0:	2103      	movs	r1, #3
     7b2:	2000      	movs	r0, #0
     7b4:	4d1e      	ldr	r5, [pc, #120]	; (830 <init+0x340>)
     7b6:	47a8      	blx	r5
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     7b8:	2400      	movs	r4, #0
     7ba:	9401      	str	r4, [sp, #4]
     7bc:	9400      	str	r4, [sp, #0]
     7be:	2300      	movs	r3, #0
     7c0:	2200      	movs	r2, #0
     7c2:	2103      	movs	r1, #3
     7c4:	2000      	movs	r0, #0
     7c6:	4e1b      	ldr	r6, [pc, #108]	; (834 <init+0x344>)
     7c8:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     7ca:	2204      	movs	r2, #4
     7cc:	2103      	movs	r1, #3
     7ce:	2001      	movs	r0, #1
     7d0:	47a8      	blx	r5
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     7d2:	9401      	str	r4, [sp, #4]
     7d4:	9400      	str	r4, [sp, #0]
     7d6:	2300      	movs	r3, #0
     7d8:	2200      	movs	r2, #0
     7da:	2103      	movs	r1, #3
     7dc:	2001      	movs	r0, #1
     7de:	47b0      	blx	r6

    sercomClockEnable(SERCOM3, 4, 8);
     7e0:	2208      	movs	r2, #8
     7e2:	2104      	movs	r1, #4
     7e4:	2003      	movs	r0, #3
     7e6:	47a8      	blx	r5
    sercomUartInit(SERCOM3,1,0,63858);
     7e8:	4b13      	ldr	r3, [pc, #76]	; (838 <init+0x348>)
     7ea:	2200      	movs	r2, #0
     7ec:	2101      	movs	r1, #1
     7ee:	2003      	movs	r0, #3
     7f0:	4c12      	ldr	r4, [pc, #72]	; (83c <init+0x34c>)
     7f2:	47a0      	blx	r4

    TC4Init();
     7f4:	4b12      	ldr	r3, [pc, #72]	; (840 <init+0x350>)
     7f6:	4798      	blx	r3
    TC5Init();
     7f8:	4b12      	ldr	r3, [pc, #72]	; (844 <init+0x354>)
     7fa:	4798      	blx	r3
}
     7fc:	b003      	add	sp, #12
     7fe:	bc3c      	pop	{r2, r3, r4, r5}
     800:	4690      	mov	r8, r2
     802:	4699      	mov	r9, r3
     804:	46a2      	mov	sl, r4
     806:	46ab      	mov	fp, r5
     808:	bdf0      	pop	{r4, r5, r6, r7, pc}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	00000211 	.word	0x00000211
     810:	00000c41 	.word	0x00000c41
     814:	00000cd1 	.word	0x00000cd1
     818:	00000d8d 	.word	0x00000d8d
     81c:	00000a99 	.word	0x00000a99
     820:	00000f2d 	.word	0x00000f2d
     824:	e000e100 	.word	0xe000e100
     828:	ff00ffff 	.word	0xff00ffff
     82c:	41004400 	.word	0x41004400
     830:	00001375 	.word	0x00001375
     834:	000013dd 	.word	0x000013dd
     838:	0000f972 	.word	0x0000f972
     83c:	00001455 	.word	0x00001455
     840:	00000e5d 	.word	0x00000e5d
     844:	00000ec5 	.word	0x00000ec5

00000848 <main>:



int main(void) {
     848:	b5f0      	push	{r4, r5, r6, r7, lr}
     84a:	465f      	mov	r7, fp
     84c:	4656      	mov	r6, sl
     84e:	464d      	mov	r5, r9
     850:	4644      	mov	r4, r8
     852:	b4f0      	push	{r4, r5, r6, r7}
     854:	b0ad      	sub	sp, #180	; 0xb4

    init();
     856:	4b6f      	ldr	r3, [pc, #444]	; (a14 <main+0x1cc>)
     858:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     85a:	2200      	movs	r2, #0
     85c:	ab09      	add	r3, sp, #36	; 0x24
     85e:	701a      	strb	r2, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     860:	a80b      	add	r0, sp, #44	; 0x2c
     862:	4b6d      	ldr	r3, [pc, #436]	; (a18 <main+0x1d0>)
     864:	4798      	blx	r3
    IMUinit();
     866:	4b6d      	ldr	r3, [pc, #436]	; (a1c <main+0x1d4>)
     868:	4798      	blx	r3
     86a:	24c8      	movs	r4, #200	; 0xc8
     86c:	0064      	lsls	r4, r4, #1
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     86e:	4f6c      	ldr	r7, [pc, #432]	; (a20 <main+0x1d8>)

        baseAltitude -= baseAltitude / 50;
     870:	4e6c      	ldr	r6, [pc, #432]	; (a24 <main+0x1dc>)
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     872:	a809      	add	r0, sp, #36	; 0x24
     874:	47b8      	blx	r7

        baseAltitude -= baseAltitude / 50;
     876:	9803      	ldr	r0, [sp, #12]
     878:	9d03      	ldr	r5, [sp, #12]
     87a:	496b      	ldr	r1, [pc, #428]	; (a28 <main+0x1e0>)
     87c:	47b0      	blx	r6
     87e:	1c01      	adds	r1, r0, #0
     880:	1c28      	adds	r0, r5, #0
     882:	4b6a      	ldr	r3, [pc, #424]	; (a2c <main+0x1e4>)
     884:	4798      	blx	r3
     886:	9003      	str	r0, [sp, #12]
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
     888:	9d03      	ldr	r5, [sp, #12]
     88a:	4967      	ldr	r1, [pc, #412]	; (a28 <main+0x1e0>)
     88c:	9814      	ldr	r0, [sp, #80]	; 0x50
     88e:	47b0      	blx	r6
     890:	1c29      	adds	r1, r5, #0
     892:	4b67      	ldr	r3, [pc, #412]	; (a30 <main+0x1e8>)
     894:	4798      	blx	r3
     896:	9003      	str	r0, [sp, #12]
        delay_us(150);
     898:	2096      	movs	r0, #150	; 0x96
     89a:	4b66      	ldr	r3, [pc, #408]	; (a34 <main+0x1ec>)
     89c:	4798      	blx	r3
     89e:	3c01      	subs	r4, #1
     8a0:	b2a4      	uxth	r4, r4
    volatile float averageAlt;
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
     8a2:	2c00      	cmp	r4, #0
     8a4:	d1e5      	bne.n	872 <main+0x2a>
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
        delay_us(150);

    }

    averageAlt = baseAltitude;
     8a6:	9b03      	ldr	r3, [sp, #12]
     8a8:	9304      	str	r3, [sp, #16]
    u32_t time = 0;
    u32_t lastTime = 0;

    //AT25SFErace4KBlock(0);

    my_altimeter.currentAddress = 0x00;
     8aa:	2300      	movs	r3, #0
     8ac:	930a      	str	r3, [sp, #40]	; 0x28



    while (1) {
        time = millis();
     8ae:	4b62      	ldr	r3, [pc, #392]	; (a38 <main+0x1f0>)
     8b0:	4699      	mov	r9, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     8b2:	2480      	movs	r4, #128	; 0x80
     8b4:	03a4      	lsls	r4, r4, #14
     8b6:	47c8      	blx	r9



        if (takeSample) {
     8b8:	4b60      	ldr	r3, [pc, #384]	; (a3c <main+0x1f4>)
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	2b00      	cmp	r3, #0
     8be:	d01b      	beq.n	8f8 <main+0xb0>
            sampleTick(&my_altimeter);
     8c0:	a809      	add	r0, sp, #36	; 0x24
     8c2:	4b57      	ldr	r3, [pc, #348]	; (a20 <main+0x1d8>)
     8c4:	4798      	blx	r3
            flight(&my_altimeter);
     8c6:	a809      	add	r0, sp, #36	; 0x24
     8c8:	4b5d      	ldr	r3, [pc, #372]	; (a40 <main+0x1f8>)
     8ca:	4798      	blx	r3
            takeSample = false;
     8cc:	2200      	movs	r2, #0
     8ce:	4b5b      	ldr	r3, [pc, #364]	; (a3c <main+0x1f4>)
     8d0:	701a      	strb	r2, [r3, #0]
            //pinToggle(TxPo);
            usartDataOut(SERCOM3,0x68);
     8d2:	2168      	movs	r1, #104	; 0x68
     8d4:	2003      	movs	r0, #3
     8d6:	4d5b      	ldr	r5, [pc, #364]	; (a44 <main+0x1fc>)
     8d8:	47a8      	blx	r5
            usartDataOut(SERCOM3,0x65);
     8da:	2165      	movs	r1, #101	; 0x65
     8dc:	2003      	movs	r0, #3
     8de:	47a8      	blx	r5
            usartDataOut(SERCOM3,0x6c);
     8e0:	216c      	movs	r1, #108	; 0x6c
     8e2:	2003      	movs	r0, #3
     8e4:	47a8      	blx	r5
            usartDataOut(SERCOM3,0x6c);
     8e6:	216c      	movs	r1, #108	; 0x6c
     8e8:	2003      	movs	r0, #3
     8ea:	47a8      	blx	r5
            usartDataOut(SERCOM3,0x6f);
     8ec:	216f      	movs	r1, #111	; 0x6f
     8ee:	2003      	movs	r0, #3
     8f0:	47a8      	blx	r5
            usartDataOut(SERCOM3,0x21);
     8f2:	2121      	movs	r1, #33	; 0x21
     8f4:	2003      	movs	r0, #3
     8f6:	47a8      	blx	r5



        }

        if (writeSample) {
     8f8:	4b53      	ldr	r3, [pc, #332]	; (a48 <main+0x200>)
     8fa:	781b      	ldrb	r3, [r3, #0]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d003      	beq.n	908 <main+0xc0>
            //AT25SFWriteByte(my_altimeter.currentAddress,my_altimeter.myBarometer);
            //volatile u8_t byte1 = AT25SFGetByte(my_altimeter.currentAddress);
            my_altimeter.currentAddress++;
     900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     902:	9301      	str	r3, [sp, #4]
     904:	3301      	adds	r3, #1
     906:	930a      	str	r3, [sp, #40]	; 0x28





        averageAlt -= averageAlt / 20;
     908:	9804      	ldr	r0, [sp, #16]
     90a:	9d04      	ldr	r5, [sp, #16]
     90c:	4e45      	ldr	r6, [pc, #276]	; (a24 <main+0x1dc>)
     90e:	494f      	ldr	r1, [pc, #316]	; (a4c <main+0x204>)
     910:	47b0      	blx	r6
     912:	1c01      	adds	r1, r0, #0
     914:	4f45      	ldr	r7, [pc, #276]	; (a2c <main+0x1e4>)
     916:	1c28      	adds	r0, r5, #0
     918:	47b8      	blx	r7
     91a:	9004      	str	r0, [sp, #16]
        averageAlt += my_altimeter.myBarometer.heightFeet / 20;
     91c:	9b04      	ldr	r3, [sp, #16]
     91e:	4698      	mov	r8, r3
     920:	494a      	ldr	r1, [pc, #296]	; (a4c <main+0x204>)
     922:	9814      	ldr	r0, [sp, #80]	; 0x50
     924:	47b0      	blx	r6
     926:	4d42      	ldr	r5, [pc, #264]	; (a30 <main+0x1e8>)
     928:	4641      	mov	r1, r8
     92a:	47a8      	blx	r5
     92c:	9004      	str	r0, [sp, #16]


        averageAccel -= averageAccel / 10;
     92e:	9805      	ldr	r0, [sp, #20]
     930:	9b05      	ldr	r3, [sp, #20]
     932:	4698      	mov	r8, r3
     934:	4946      	ldr	r1, [pc, #280]	; (a50 <main+0x208>)
     936:	47b0      	blx	r6
     938:	1c01      	adds	r1, r0, #0
     93a:	4640      	mov	r0, r8
     93c:	47b8      	blx	r7
     93e:	9005      	str	r0, [sp, #20]
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;
     940:	9b05      	ldr	r3, [sp, #20]
     942:	4698      	mov	r8, r3
     944:	4942      	ldr	r1, [pc, #264]	; (a50 <main+0x208>)
     946:	9826      	ldr	r0, [sp, #152]	; 0x98
     948:	47b0      	blx	r6
     94a:	4641      	mov	r1, r8
     94c:	47a8      	blx	r5
     94e:	9005      	str	r0, [sp, #20]

        averageXAccel -= averageXAccel / 3;
     950:	9808      	ldr	r0, [sp, #32]
     952:	9b08      	ldr	r3, [sp, #32]
     954:	4698      	mov	r8, r3
     956:	493f      	ldr	r1, [pc, #252]	; (a54 <main+0x20c>)
     958:	47b0      	blx	r6
     95a:	1c01      	adds	r1, r0, #0
     95c:	4640      	mov	r0, r8
     95e:	47b8      	blx	r7
     960:	9008      	str	r0, [sp, #32]
        averageXAccel += my_altimeter.myIMU.accelX / 3;
     962:	9b08      	ldr	r3, [sp, #32]
     964:	4698      	mov	r8, r3
     966:	493b      	ldr	r1, [pc, #236]	; (a54 <main+0x20c>)
     968:	9818      	ldr	r0, [sp, #96]	; 0x60
     96a:	47b0      	blx	r6
     96c:	4641      	mov	r1, r8
     96e:	47a8      	blx	r5
     970:	9008      	str	r0, [sp, #32]

        averageYAccel -= averageYAccel / 3;
     972:	9807      	ldr	r0, [sp, #28]
     974:	9b07      	ldr	r3, [sp, #28]
     976:	4698      	mov	r8, r3
     978:	4936      	ldr	r1, [pc, #216]	; (a54 <main+0x20c>)
     97a:	47b0      	blx	r6
     97c:	1c01      	adds	r1, r0, #0
     97e:	4640      	mov	r0, r8
     980:	47b8      	blx	r7
     982:	9007      	str	r0, [sp, #28]
        averageYAccel += my_altimeter.myIMU.accelY / 3;
     984:	9b07      	ldr	r3, [sp, #28]
     986:	4698      	mov	r8, r3
     988:	4932      	ldr	r1, [pc, #200]	; (a54 <main+0x20c>)
     98a:	981a      	ldr	r0, [sp, #104]	; 0x68
     98c:	47b0      	blx	r6
     98e:	4641      	mov	r1, r8
     990:	47a8      	blx	r5
     992:	9007      	str	r0, [sp, #28]

        averageZAccel -= averageZAccel / 3;
     994:	9806      	ldr	r0, [sp, #24]
     996:	9b06      	ldr	r3, [sp, #24]
     998:	4698      	mov	r8, r3
     99a:	492e      	ldr	r1, [pc, #184]	; (a54 <main+0x20c>)
     99c:	47b0      	blx	r6
     99e:	1c01      	adds	r1, r0, #0
     9a0:	4640      	mov	r0, r8
     9a2:	47b8      	blx	r7
     9a4:	9006      	str	r0, [sp, #24]
        averageZAccel += my_altimeter.myIMU.accelZ / 3;
     9a6:	9f06      	ldr	r7, [sp, #24]
     9a8:	492a      	ldr	r1, [pc, #168]	; (a54 <main+0x20c>)
     9aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
     9ac:	47b0      	blx	r6
     9ae:	1c39      	adds	r1, r7, #0
     9b0:	47a8      	blx	r5
     9b2:	9006      	str	r0, [sp, #24]



        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);
     9b4:	9808      	ldr	r0, [sp, #32]
     9b6:	9908      	ldr	r1, [sp, #32]
     9b8:	9b07      	ldr	r3, [sp, #28]
     9ba:	469a      	mov	sl, r3
     9bc:	9b07      	ldr	r3, [sp, #28]
     9be:	469b      	mov	fp, r3
     9c0:	9f06      	ldr	r7, [sp, #24]
     9c2:	9b06      	ldr	r3, [sp, #24]
     9c4:	4698      	mov	r8, r3
     9c6:	4e24      	ldr	r6, [pc, #144]	; (a58 <main+0x210>)
     9c8:	47b0      	blx	r6
     9ca:	9001      	str	r0, [sp, #4]
     9cc:	4659      	mov	r1, fp
     9ce:	4650      	mov	r0, sl
     9d0:	47b0      	blx	r6
     9d2:	1c01      	adds	r1, r0, #0
     9d4:	9801      	ldr	r0, [sp, #4]
     9d6:	47a8      	blx	r5
     9d8:	9001      	str	r0, [sp, #4]
     9da:	4641      	mov	r1, r8
     9dc:	1c38      	adds	r0, r7, #0
     9de:	47b0      	blx	r6
     9e0:	1c01      	adds	r1, r0, #0
     9e2:	9801      	ldr	r0, [sp, #4]
     9e4:	47a8      	blx	r5
     9e6:	9002      	str	r0, [sp, #8]


        if (sumAccel > 1.3) {
     9e8:	9802      	ldr	r0, [sp, #8]
     9ea:	4b1c      	ldr	r3, [pc, #112]	; (a5c <main+0x214>)
     9ec:	4798      	blx	r3
     9ee:	4a1c      	ldr	r2, [pc, #112]	; (a60 <main+0x218>)
     9f0:	4b1c      	ldr	r3, [pc, #112]	; (a64 <main+0x21c>)
     9f2:	4d1d      	ldr	r5, [pc, #116]	; (a68 <main+0x220>)
     9f4:	47a8      	blx	r5
     9f6:	2800      	cmp	r0, #0
     9f8:	d100      	bne.n	9fc <main+0x1b4>
     9fa:	e75c      	b.n	8b6 <main+0x6e>
     9fc:	25fa      	movs	r5, #250	; 0xfa
     9fe:	006d      	lsls	r5, r5, #1
     a00:	4f1a      	ldr	r7, [pc, #104]	; (a6c <main+0x224>)
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
                pinToggle(buzzerPin);
                delay_us(122);
     a02:	4e0c      	ldr	r6, [pc, #48]	; (a34 <main+0x1ec>)
     a04:	61fc      	str	r4, [r7, #28]
     a06:	207a      	movs	r0, #122	; 0x7a
     a08:	47b0      	blx	r6
     a0a:	3d01      	subs	r5, #1
     a0c:	b2ad      	uxth	r5, r5

        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);


        if (sumAccel > 1.3) {
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
     a0e:	2d00      	cmp	r5, #0
     a10:	d1f8      	bne.n	a04 <main+0x1bc>
     a12:	e750      	b.n	8b6 <main+0x6e>
     a14:	000004f1 	.word	0x000004f1
     a18:	00000485 	.word	0x00000485
     a1c:	00000a71 	.word	0x00000a71
     a20:	00000ffd 	.word	0x00000ffd
     a24:	00001891 	.word	0x00001891
     a28:	42480000 	.word	0x42480000
     a2c:	00001ced 	.word	0x00001ced
     a30:	000015a5 	.word	0x000015a5
     a34:	00000dad 	.word	0x00000dad
     a38:	00000e25 	.word	0x00000e25
     a3c:	20000462 	.word	0x20000462
     a40:	00000f8d 	.word	0x00000f8d
     a44:	000014b9 	.word	0x000014b9
     a48:	20000460 	.word	0x20000460
     a4c:	41a00000 	.word	0x41a00000
     a50:	41200000 	.word	0x41200000
     a54:	40400000 	.word	0x40400000
     a58:	00001ac5 	.word	0x00001ac5
     a5c:	00002e61 	.word	0x00002e61
     a60:	cccccccd 	.word	0xcccccccd
     a64:	3ff4cccc 	.word	0x3ff4cccc
     a68:	00001525 	.word	0x00001525
     a6c:	41004400 	.word	0x41004400

00000a70 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a70:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a72:	4c07      	ldr	r4, [pc, #28]	; (a90 <IMUinit+0x20>)
     a74:	2580      	movs	r5, #128	; 0x80
     a76:	00ed      	lsls	r5, r5, #3
     a78:	2394      	movs	r3, #148	; 0x94
     a7a:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     a7c:	210f      	movs	r1, #15
     a7e:	2000      	movs	r0, #0
     a80:	4e04      	ldr	r6, [pc, #16]	; (a94 <IMUinit+0x24>)
     a82:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     a84:	210c      	movs	r1, #12
     a86:	2000      	movs	r0, #0
     a88:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8a:	2398      	movs	r3, #152	; 0x98
     a8c:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     a8e:	bd70      	pop	{r4, r5, r6, pc}
     a90:	41004400 	.word	0x41004400
     a94:	0000149d 	.word	0x0000149d

00000a98 <adcInit>:


#include <util.h>

void adcInit() {
     a98:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a9a:	4a12      	ldr	r2, [pc, #72]	; (ae4 <adcInit+0x4c>)
     a9c:	6a13      	ldr	r3, [r2, #32]
     a9e:	2180      	movs	r1, #128	; 0x80
     aa0:	0249      	lsls	r1, r1, #9
     aa2:	430b      	orrs	r3, r1
     aa4:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     aa6:	4910      	ldr	r1, [pc, #64]	; (ae8 <adcInit+0x50>)
     aa8:	22e0      	movs	r2, #224	; 0xe0
     aaa:	00d2      	lsls	r2, r2, #3
     aac:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     aae:	480f      	ldr	r0, [pc, #60]	; (aec <adcInit+0x54>)
     ab0:	4b0f      	ldr	r3, [pc, #60]	; (af0 <adcInit+0x58>)
     ab2:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     ab4:	4b0f      	ldr	r3, [pc, #60]	; (af4 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     ab6:	681b      	ldr	r3, [r3, #0]
     ab8:	015b      	lsls	r3, r3, #5
     aba:	4013      	ands	r3, r2
     abc:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     abe:	4b0e      	ldr	r3, [pc, #56]	; (af8 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     ac0:	685a      	ldr	r2, [r3, #4]
     ac2:	0154      	lsls	r4, r2, #5
     ac4:	681a      	ldr	r2, [r3, #0]
     ac6:	0ed3      	lsrs	r3, r2, #27
     ac8:	4323      	orrs	r3, r4
     aca:	22ff      	movs	r2, #255	; 0xff
     acc:	4013      	ands	r3, r2
     ace:	4303      	orrs	r3, r0
     ad0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     ad2:	2302      	movs	r3, #2
     ad4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     ad6:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ad8:	000a      	movs	r2, r1
     ada:	7e53      	ldrb	r3, [r2, #25]
     adc:	b25b      	sxtb	r3, r3
     ade:	2b00      	cmp	r3, #0
     ae0:	dbfb      	blt.n	ada <adcInit+0x42>
}
     ae2:	bd10      	pop	{r4, pc}
     ae4:	40000400 	.word	0x40000400
     ae8:	42004000 	.word	0x42004000
     aec:	0000401e 	.word	0x0000401e
     af0:	40000c00 	.word	0x40000c00
     af4:	00806024 	.word	0x00806024
     af8:	00806020 	.word	0x00806020

00000afc <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     afc:	2202      	movs	r2, #2
     afe:	4b05      	ldr	r3, [pc, #20]	; (b14 <adcSample+0x18>)
     b00:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     b02:	0019      	movs	r1, r3
     b04:	3a01      	subs	r2, #1
     b06:	7e0b      	ldrb	r3, [r1, #24]
     b08:	4213      	tst	r3, r2
     b0a:	d0fc      	beq.n	b06 <adcSample+0xa>
    return ADC->RESULT.reg;
     b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <adcSample+0x18>)
     b0e:	8b58      	ldrh	r0, [r3, #26]
     b10:	b280      	uxth	r0, r0
}
     b12:	4770      	bx	lr
     b14:	42004000 	.word	0x42004000

00000b18 <adc_read>:


u16_t adc_read(Pin p) {
     b18:	b530      	push	{r4, r5, lr}
     b1a:	b083      	sub	sp, #12
     b1c:	0c03      	lsrs	r3, r0, #16
     b1e:	0002      	movs	r2, r0
     b20:	9000      	str	r0, [sp, #0]
     b22:	9101      	str	r1, [sp, #4]
     b24:	b2c9      	uxtb	r1, r1
     b26:	b2db      	uxtb	r3, r3
     b28:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b2a:	07c2      	lsls	r2, r0, #31
     b2c:	d50c      	bpl.n	b48 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b2e:	0842      	lsrs	r2, r0, #1
     b30:	01dc      	lsls	r4, r3, #7
     b32:	1912      	adds	r2, r2, r4
     b34:	4c14      	ldr	r4, [pc, #80]	; (b88 <adc_read+0x70>)
     b36:	46a4      	mov	ip, r4
     b38:	4462      	add	r2, ip
     b3a:	7814      	ldrb	r4, [r2, #0]
     b3c:	250f      	movs	r5, #15
     b3e:	402c      	ands	r4, r5
     b40:	2510      	movs	r5, #16
     b42:	432c      	orrs	r4, r5
     b44:	7014      	strb	r4, [r2, #0]
     b46:	e00b      	b.n	b60 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b48:	0842      	lsrs	r2, r0, #1
     b4a:	01dc      	lsls	r4, r3, #7
     b4c:	1912      	adds	r2, r2, r4
     b4e:	4c0e      	ldr	r4, [pc, #56]	; (b88 <adc_read+0x70>)
     b50:	46a4      	mov	ip, r4
     b52:	4462      	add	r2, ip
     b54:	7814      	ldrb	r4, [r2, #0]
     b56:	250f      	movs	r5, #15
     b58:	43ac      	bics	r4, r5
     b5a:	2501      	movs	r5, #1
     b5c:	432c      	orrs	r4, r5
     b5e:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b60:	01db      	lsls	r3, r3, #7
     b62:	18c0      	adds	r0, r0, r3
     b64:	4b09      	ldr	r3, [pc, #36]	; (b8c <adc_read+0x74>)
     b66:	469c      	mov	ip, r3
     b68:	4460      	add	r0, ip
     b6a:	7802      	ldrb	r2, [r0, #0]
     b6c:	2301      	movs	r3, #1
     b6e:	4313      	orrs	r3, r2
     b70:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b72:	231f      	movs	r3, #31
     b74:	4019      	ands	r1, r3
     b76:	23c0      	movs	r3, #192	; 0xc0
     b78:	015b      	lsls	r3, r3, #5
     b7a:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b7c:	4b04      	ldr	r3, [pc, #16]	; (b90 <adc_read+0x78>)
     b7e:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <adc_read+0x7c>)
     b82:	4798      	blx	r3
     b84:	b003      	add	sp, #12
     b86:	bd30      	pop	{r4, r5, pc}
     b88:	41004430 	.word	0x41004430
     b8c:	41004440 	.word	0x41004440
     b90:	42004000 	.word	0x42004000
     b94:	00000afd 	.word	0x00000afd

00000b98 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b98:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9a:	b085      	sub	sp, #20
     b9c:	0c03      	lsrs	r3, r0, #16
     b9e:	0c14      	lsrs	r4, r2, #16
     ba0:	a90a      	add	r1, sp, #40	; 0x28
     ba2:	7809      	ldrb	r1, [r1, #0]
     ba4:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ba6:	b2dc      	uxtb	r4, r3
     ba8:	0e00      	lsrs	r0, r0, #24
     baa:	2701      	movs	r7, #1
     bac:	003d      	movs	r5, r7
     bae:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bb0:	0e12      	lsrs	r2, r2, #24
     bb2:	4097      	lsls	r7, r2
     bb4:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bb6:	01e0      	lsls	r0, r4, #7
     bb8:	4a0a      	ldr	r2, [pc, #40]	; (be4 <byteOut+0x4c>)
     bba:	4694      	mov	ip, r2
     bbc:	4460      	add	r0, ip
     bbe:	01f4      	lsls	r4, r6, #7
     bc0:	4464      	add	r4, ip
     bc2:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     bc4:	b24a      	sxtb	r2, r1
     bc6:	2a00      	cmp	r2, #0
     bc8:	da01      	bge.n	bce <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bca:	61a7      	str	r7, [r4, #24]
     bcc:	e000      	b.n	bd0 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bce:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd0:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     bd2:	0049      	lsls	r1, r1, #1
     bd4:	b2c9      	uxtb	r1, r1
     bd6:	3b01      	subs	r3, #1
     bd8:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     bda:	2b00      	cmp	r3, #0
     bdc:	d1f1      	bne.n	bc2 <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     bde:	b005      	add	sp, #20
     be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	41004400 	.word	0x41004400

00000be8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	b085      	sub	sp, #20
     bec:	0c04      	lsrs	r4, r0, #16
     bee:	9002      	str	r0, [sp, #8]
     bf0:	9103      	str	r1, [sp, #12]
     bf2:	0c11      	lsrs	r1, r2, #16
     bf4:	0017      	movs	r7, r2
     bf6:	9200      	str	r2, [sp, #0]
     bf8:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bfa:	b2e4      	uxtb	r4, r4
     bfc:	0e05      	lsrs	r5, r0, #24
     bfe:	2601      	movs	r6, #1
     c00:	0033      	movs	r3, r6
     c02:	40ab      	lsls	r3, r5
     c04:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c06:	b2ca      	uxtb	r2, r1
     c08:	0e3f      	lsrs	r7, r7, #24
     c0a:	40be      	lsls	r6, r7
     c0c:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     c0e:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c10:	01e4      	lsls	r4, r4, #7
     c12:	4b0a      	ldr	r3, [pc, #40]	; (c3c <byteIn+0x54>)
     c14:	469c      	mov	ip, r3
     c16:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c18:	01d2      	lsls	r2, r2, #7
     c1a:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c1c:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c1e:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c20:	4033      	ands	r3, r6
     c22:	1e5f      	subs	r7, r3, #1
     c24:	41bb      	sbcs	r3, r7
     c26:	0040      	lsls	r0, r0, #1
     c28:	4303      	orrs	r3, r0
     c2a:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c2c:	61a5      	str	r5, [r4, #24]
     c2e:	3901      	subs	r1, #1
     c30:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     c32:	2900      	cmp	r1, #0
     c34:	d1f2      	bne.n	c1c <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     c36:	b005      	add	sp, #20
     c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	41004400 	.word	0x41004400

00000c40 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     c40:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c42:	22c2      	movs	r2, #194	; 0xc2
     c44:	00d2      	lsls	r2, r2, #3
     c46:	4b18      	ldr	r3, [pc, #96]	; (ca8 <GclkInit+0x68>)
     c48:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c4a:	4a18      	ldr	r2, [pc, #96]	; (cac <GclkInit+0x6c>)
     c4c:	6851      	ldr	r1, [r2, #4]
     c4e:	2302      	movs	r3, #2
     c50:	430b      	orrs	r3, r1
     c52:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c54:	4b16      	ldr	r3, [pc, #88]	; (cb0 <GclkInit+0x70>)
     c56:	681c      	ldr	r4, [r3, #0]
     c58:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     c5a:	2c3f      	cmp	r4, #63	; 0x3f
     c5c:	d100      	bne.n	c60 <GclkInit+0x20>
        coarse = 0x1f;
     c5e:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c60:	4b14      	ldr	r3, [pc, #80]	; (cb4 <GclkInit+0x74>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c62:	6818      	ldr	r0, [r3, #0]
     c64:	0580      	lsls	r0, r0, #22
     c66:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c68:	4b13      	ldr	r3, [pc, #76]	; (cb8 <GclkInit+0x78>)
     c6a:	4298      	cmp	r0, r3
     c6c:	d100      	bne.n	c70 <GclkInit+0x30>
        fine = 0x1ff;
     c6e:	4813      	ldr	r0, [pc, #76]	; (cbc <GclkInit+0x7c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c70:	4a13      	ldr	r2, [pc, #76]	; (cc0 <GclkInit+0x80>)
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <GclkInit+0x68>)
     c74:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c76:	0019      	movs	r1, r3
     c78:	2210      	movs	r2, #16
     c7a:	68cb      	ldr	r3, [r1, #12]
     c7c:	421a      	tst	r2, r3
     c7e:	d0fc      	beq.n	c7a <GclkInit+0x3a>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     c80:	02a4      	lsls	r4, r4, #10
     c82:	4320      	orrs	r0, r4
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <GclkInit+0x68>)
     c86:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c88:	0019      	movs	r1, r3
     c8a:	2210      	movs	r2, #16
     c8c:	68cb      	ldr	r3, [r1, #12]
     c8e:	421a      	tst	r2, r3
     c90:	d0fc      	beq.n	c8c <GclkInit+0x4c>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     c92:	4a0c      	ldr	r2, [pc, #48]	; (cc4 <GclkInit+0x84>)
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <GclkInit+0x68>)
     c96:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c98:	4b0b      	ldr	r3, [pc, #44]	; (cc8 <GclkInit+0x88>)
     c9a:	2280      	movs	r2, #128	; 0x80
     c9c:	0052      	lsls	r2, r2, #1
     c9e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     ca0:	4a0a      	ldr	r2, [pc, #40]	; (ccc <GclkInit+0x8c>)
     ca2:	605a      	str	r2, [r3, #4]
}
     ca4:	bd10      	pop	{r4, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	40000800 	.word	0x40000800
     cac:	41004000 	.word	0x41004000
     cb0:	00806024 	.word	0x00806024
     cb4:	00806028 	.word	0x00806028
     cb8:	000003ff 	.word	0x000003ff
     cbc:	000001ff 	.word	0x000001ff
     cc0:	00000522 	.word	0x00000522
     cc4:	000005a2 	.word	0x000005a2
     cc8:	40000c00 	.word	0x40000c00
     ccc:	00010700 	.word	0x00010700

00000cd0 <RtcInit>:

void RtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     cd0:	4b1b      	ldr	r3, [pc, #108]	; (d40 <RtcInit+0x70>)
     cd2:	2281      	movs	r2, #129	; 0x81
     cd4:	0052      	lsls	r2, r2, #1
     cd6:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     cd8:	4a1a      	ldr	r2, [pc, #104]	; (d44 <RtcInit+0x74>)
     cda:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     cdc:	001a      	movs	r2, r3
     cde:	7853      	ldrb	r3, [r2, #1]
     ce0:	b25b      	sxtb	r3, r3
     ce2:	2b00      	cmp	r3, #0
     ce4:	dbfb      	blt.n	cde <RtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ce6:	4a18      	ldr	r2, [pc, #96]	; (d48 <RtcInit+0x78>)
     ce8:	4b15      	ldr	r3, [pc, #84]	; (d40 <RtcInit+0x70>)
     cea:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     cec:	2204      	movs	r2, #4
     cee:	4b17      	ldr	r3, [pc, #92]	; (d4c <RtcInit+0x7c>)
     cf0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cf2:	001a      	movs	r2, r3
     cf4:	7a93      	ldrb	r3, [r2, #10]
     cf6:	09db      	lsrs	r3, r3, #7
     cf8:	d1fc      	bne.n	cf4 <RtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     cfa:	4a14      	ldr	r2, [pc, #80]	; (d4c <RtcInit+0x7c>)
     cfc:	8811      	ldrh	r1, [r2, #0]
     cfe:	23a0      	movs	r3, #160	; 0xa0
     d00:	00db      	lsls	r3, r3, #3
     d02:	430b      	orrs	r3, r1
     d04:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d06:	7a93      	ldrb	r3, [r2, #10]
     d08:	09db      	lsrs	r3, r3, #7
     d0a:	d1fc      	bne.n	d06 <RtcInit+0x36>

    RTC->MODE1.PER.reg = 998;
     d0c:	4a10      	ldr	r2, [pc, #64]	; (d50 <RtcInit+0x80>)
     d0e:	4b0f      	ldr	r3, [pc, #60]	; (d4c <RtcInit+0x7c>)
     d10:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d12:	001a      	movs	r2, r3
     d14:	7a93      	ldrb	r3, [r2, #10]
     d16:	09db      	lsrs	r3, r3, #7
     d18:	d1fc      	bne.n	d14 <RtcInit+0x44>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d1a:	4b0c      	ldr	r3, [pc, #48]	; (d4c <RtcInit+0x7c>)
     d1c:	8859      	ldrh	r1, [r3, #2]
     d1e:	4a0d      	ldr	r2, [pc, #52]	; (d54 <RtcInit+0x84>)
     d20:	430a      	orrs	r2, r1
     d22:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d24:	2280      	movs	r2, #128	; 0x80
     d26:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d28:	8819      	ldrh	r1, [r3, #0]
     d2a:	2202      	movs	r2, #2
     d2c:	430a      	orrs	r2, r1
     d2e:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d30:	001a      	movs	r2, r3
     d32:	7a93      	ldrb	r3, [r2, #10]
     d34:	09db      	lsrs	r3, r3, #7
     d36:	d1fc      	bne.n	d32 <RtcInit+0x62>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d38:	2208      	movs	r2, #8
     d3a:	4b07      	ldr	r3, [pc, #28]	; (d58 <RtcInit+0x88>)
     d3c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d3e:	4770      	bx	lr
     d40:	40000c00 	.word	0x40000c00
     d44:	00230002 	.word	0x00230002
     d48:	00004204 	.word	0x00004204
     d4c:	40001400 	.word	0x40001400
     d50:	000003e6 	.word	0x000003e6
     d54:	00004010 	.word	0x00004010
     d58:	e000e100 	.word	0xe000e100

00000d5c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     d5c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d5e:	230f      	movs	r3, #15
     d60:	4018      	ands	r0, r3
     d62:	0212      	lsls	r2, r2, #8
     d64:	4b07      	ldr	r3, [pc, #28]	; (d84 <gclkEnable+0x28>)
     d66:	401a      	ands	r2, r3
     d68:	4302      	orrs	r2, r0
     d6a:	4c07      	ldr	r4, [pc, #28]	; (d88 <gclkEnable+0x2c>)
     d6c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d6e:	0209      	lsls	r1, r1, #8
     d70:	23f8      	movs	r3, #248	; 0xf8
     d72:	015b      	lsls	r3, r3, #5
     d74:	4019      	ands	r1, r3
     d76:	2380      	movs	r3, #128	; 0x80
     d78:	025b      	lsls	r3, r3, #9
     d7a:	4319      	orrs	r1, r3
     d7c:	4308      	orrs	r0, r1
     d7e:	6060      	str	r0, [r4, #4]
}
     d80:	bd10      	pop	{r4, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	00ffff00 	.word	0x00ffff00
     d88:	40000c00 	.word	0x40000c00

00000d8c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     d8c:	4b04      	ldr	r3, [pc, #16]	; (da0 <delayInit+0x14>)
     d8e:	4a05      	ldr	r2, [pc, #20]	; (da4 <delayInit+0x18>)
     d90:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     d92:	2230      	movs	r2, #48	; 0x30
     d94:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     d96:	3a2b      	subs	r2, #43	; 0x2b
     d98:	4b03      	ldr	r3, [pc, #12]	; (da8 <delayInit+0x1c>)
     d9a:	601a      	str	r2, [r3, #0]
}
     d9c:	4770      	bx	lr
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	20000004 	.word	0x20000004
     da4:	0000bb80 	.word	0x0000bb80
     da8:	e000e010 	.word	0xe000e010

00000dac <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     dac:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     dae:	4b08      	ldr	r3, [pc, #32]	; (dd0 <delay_us+0x24>)
     db0:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     db2:	4a08      	ldr	r2, [pc, #32]	; (dd4 <delay_us+0x28>)
        SysTick->VAL = 0;
     db4:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     db6:	2180      	movs	r1, #128	; 0x80
     db8:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     dba:	e006      	b.n	dca <delay_us+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     dbc:	2c00      	cmp	r4, #0
     dbe:	d004      	beq.n	dca <delay_us+0x1e>
        SysTick->LOAD = n;
     dc0:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     dc2:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dc4:	6813      	ldr	r3, [r2, #0]
     dc6:	420b      	tst	r3, r1
     dc8:	d0fc      	beq.n	dc4 <delay_us+0x18>
     dca:	3801      	subs	r0, #1
     dcc:	d2f6      	bcs.n	dbc <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     dce:	bd30      	pop	{r4, r5, pc}
     dd0:	20000004 	.word	0x20000004
     dd4:	e000e010 	.word	0xe000e010

00000dd8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     dd8:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     dda:	4b08      	ldr	r3, [pc, #32]	; (dfc <delay_ms+0x24>)
     ddc:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     dde:	4a08      	ldr	r2, [pc, #32]	; (e00 <delay_ms+0x28>)
        SysTick->VAL = 0;
     de0:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     de2:	2180      	movs	r1, #128	; 0x80
     de4:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     de6:	e006      	b.n	df6 <delay_ms+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     de8:	2c00      	cmp	r4, #0
     dea:	d004      	beq.n	df6 <delay_ms+0x1e>
        SysTick->LOAD = n;
     dec:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     dee:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     df0:	6813      	ldr	r3, [r2, #0]
     df2:	420b      	tst	r3, r1
     df4:	d0fc      	beq.n	df0 <delay_ms+0x18>
     df6:	3801      	subs	r0, #1
     df8:	d2f6      	bcs.n	de8 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     dfa:	bd30      	pop	{r4, r5, pc}
     dfc:	20000004 	.word	0x20000004
     e00:	e000e010 	.word	0xe000e010

00000e04 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e04:	4a05      	ldr	r2, [pc, #20]	; (e1c <RTC_Handler+0x18>)
     e06:	6813      	ldr	r3, [r2, #0]
     e08:	21fa      	movs	r1, #250	; 0xfa
     e0a:	0089      	lsls	r1, r1, #2
     e0c:	468c      	mov	ip, r1
     e0e:	4463      	add	r3, ip
     e10:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e12:	22ff      	movs	r2, #255	; 0xff
     e14:	4b02      	ldr	r3, [pc, #8]	; (e20 <RTC_Handler+0x1c>)
     e16:	721a      	strb	r2, [r3, #8]
}
     e18:	4770      	bx	lr
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	2000045c 	.word	0x2000045c
     e20:	40001400 	.word	0x40001400

00000e24 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e24:	f3ef 8110 	mrs	r1, PRIMASK
     e28:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e2a:	4a0a      	ldr	r2, [pc, #40]	; (e54 <millis+0x30>)
     e2c:	8a10      	ldrh	r0, [r2, #16]
     e2e:	b280      	uxth	r0, r0
     e30:	4b09      	ldr	r3, [pc, #36]	; (e58 <millis+0x34>)
     e32:	681b      	ldr	r3, [r3, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e34:	7a12      	ldrb	r2, [r2, #8]
     e36:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e38:	18c0      	adds	r0, r0, r3
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e3a:	2a00      	cmp	r2, #0
     e3c:	d007      	beq.n	e4e <millis+0x2a>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <millis+0x30>)
     e40:	8a1a      	ldrh	r2, [r3, #16]
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <millis+0x34>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	20fa      	movs	r0, #250	; 0xfa
     e48:	0080      	lsls	r0, r0, #2
     e4a:	1818      	adds	r0, r3, r0
     e4c:	1810      	adds	r0, r2, r0
    ATOMIC_SECTION_LEAVE
     e4e:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e52:	4770      	bx	lr
     e54:	40001400 	.word	0x40001400
     e58:	2000045c 	.word	0x2000045c

00000e5c <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e5c:	4a0d      	ldr	r2, [pc, #52]	; (e94 <TC4Init+0x38>)
     e5e:	4b0e      	ldr	r3, [pc, #56]	; (e98 <TC4Init+0x3c>)
     e60:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e62:	4a0e      	ldr	r2, [pc, #56]	; (e9c <TC4Init+0x40>)
     e64:	6a13      	ldr	r3, [r2, #32]
     e66:	2180      	movs	r1, #128	; 0x80
     e68:	0149      	lsls	r1, r1, #5
     e6a:	430b      	orrs	r3, r1
     e6c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e6e:	4b0c      	ldr	r3, [pc, #48]	; (ea0 <TC4Init+0x44>)
     e70:	4a0c      	ldr	r2, [pc, #48]	; (ea4 <TC4Init+0x48>)
     e72:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     e74:	2241      	movs	r2, #65	; 0x41
     e76:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e78:	3a40      	subs	r2, #64	; 0x40
     e7a:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e7c:	32ff      	adds	r2, #255	; 0xff
     e7e:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e80:	8819      	ldrh	r1, [r3, #0]
     e82:	3afe      	subs	r2, #254	; 0xfe
     e84:	430a      	orrs	r2, r1
     e86:	801a      	strh	r2, [r3, #0]
     e88:	2280      	movs	r2, #128	; 0x80
     e8a:	0312      	lsls	r2, r2, #12
     e8c:	4b06      	ldr	r3, [pc, #24]	; (ea8 <TC4Init+0x4c>)
     e8e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     e90:	4770      	bx	lr
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	0000421c 	.word	0x0000421c
     e98:	40000c00 	.word	0x40000c00
     e9c:	40000400 	.word	0x40000400
     ea0:	42003000 	.word	0x42003000
     ea4:	00000904 	.word	0x00000904
     ea8:	e000e100 	.word	0xe000e100

00000eac <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     eac:	22ff      	movs	r2, #255	; 0xff
     eae:	4b03      	ldr	r3, [pc, #12]	; (ebc <TC4_Handler+0x10>)
     eb0:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     eb2:	3afe      	subs	r2, #254	; 0xfe
     eb4:	4b02      	ldr	r3, [pc, #8]	; (ec0 <TC4_Handler+0x14>)
     eb6:	701a      	strb	r2, [r3, #0]
}
     eb8:	4770      	bx	lr
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	42003000 	.word	0x42003000
     ec0:	20000462 	.word	0x20000462

00000ec4 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     ec4:	4a0d      	ldr	r2, [pc, #52]	; (efc <TC5Init+0x38>)
     ec6:	4b0e      	ldr	r3, [pc, #56]	; (f00 <TC5Init+0x3c>)
     ec8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     eca:	4a0e      	ldr	r2, [pc, #56]	; (f04 <TC5Init+0x40>)
     ecc:	6a13      	ldr	r3, [r2, #32]
     ece:	2180      	movs	r1, #128	; 0x80
     ed0:	0189      	lsls	r1, r1, #6
     ed2:	430b      	orrs	r3, r1
     ed4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ed6:	4b0c      	ldr	r3, [pc, #48]	; (f08 <TC5Init+0x44>)
     ed8:	4a0c      	ldr	r2, [pc, #48]	; (f0c <TC5Init+0x48>)
     eda:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
     edc:	2280      	movs	r2, #128	; 0x80
     ede:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ee0:	3a7f      	subs	r2, #127	; 0x7f
     ee2:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ee4:	32ff      	adds	r2, #255	; 0xff
     ee6:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ee8:	8819      	ldrh	r1, [r3, #0]
     eea:	3afe      	subs	r2, #254	; 0xfe
     eec:	430a      	orrs	r2, r1
     eee:	801a      	strh	r2, [r3, #0]
     ef0:	2280      	movs	r2, #128	; 0x80
     ef2:	0352      	lsls	r2, r2, #13
     ef4:	4b06      	ldr	r3, [pc, #24]	; (f10 <TC5Init+0x4c>)
     ef6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     ef8:	4770      	bx	lr
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	0000421c 	.word	0x0000421c
     f00:	40000c00 	.word	0x40000c00
     f04:	40000400 	.word	0x40000400
     f08:	42003400 	.word	0x42003400
     f0c:	00000e04 	.word	0x00000e04
     f10:	e000e100 	.word	0xe000e100

00000f14 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f14:	22ff      	movs	r2, #255	; 0xff
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <TC5_Handler+0x10>)
     f18:	739a      	strb	r2, [r3, #14]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f1a:	2280      	movs	r2, #128	; 0x80
     f1c:	0352      	lsls	r2, r2, #13
     f1e:	4b02      	ldr	r3, [pc, #8]	; (f28 <TC5_Handler+0x14>)
     f20:	61da      	str	r2, [r3, #28]
    pinToggle(LedPin);
     f22:	4770      	bx	lr
     f24:	42003400 	.word	0x42003400
     f28:	41004400 	.word	0x41004400

00000f2c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f2c:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f2e:	4d11      	ldr	r5, [pc, #68]	; (f74 <dmaInit+0x48>)
     f30:	22c0      	movs	r2, #192	; 0xc0
     f32:	2100      	movs	r1, #0
     f34:	0028      	movs	r0, r5
     f36:	4e10      	ldr	r6, [pc, #64]	; (f78 <dmaInit+0x4c>)
     f38:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f3a:	4c10      	ldr	r4, [pc, #64]	; (f7c <dmaInit+0x50>)
     f3c:	22c0      	movs	r2, #192	; 0xc0
     f3e:	2100      	movs	r1, #0
     f40:	0020      	movs	r0, r4
     f42:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <dmaInit+0x54>)
     f46:	6959      	ldr	r1, [r3, #20]
     f48:	2220      	movs	r2, #32
     f4a:	430a      	orrs	r2, r1
     f4c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f4e:	69d9      	ldr	r1, [r3, #28]
     f50:	2210      	movs	r2, #16
     f52:	430a      	orrs	r2, r1
     f54:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     f56:	4b0b      	ldr	r3, [pc, #44]	; (f84 <dmaInit+0x58>)
     f58:	881a      	ldrh	r2, [r3, #0]
     f5a:	2102      	movs	r1, #2
     f5c:	438a      	bics	r2, r1
     f5e:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     f60:	8819      	ldrh	r1, [r3, #0]
     f62:	2201      	movs	r2, #1
     f64:	430a      	orrs	r2, r1
     f66:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     f68:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     f6a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f6c:	4a06      	ldr	r2, [pc, #24]	; (f88 <dmaInit+0x5c>)
     f6e:	801a      	strh	r2, [r3, #0]
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	20000530 	.word	0x20000530
     f78:	000030a5 	.word	0x000030a5
     f7c:	20000470 	.word	0x20000470
     f80:	40000400 	.word	0x40000400
     f84:	41004800 	.word	0x41004800
     f88:	00000f02 	.word	0x00000f02

00000f8c <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	b082      	sub	sp, #8
     f90:	0004      	movs	r4, r0
	


    switch(my_altimeter->myFlightState) {
     f92:	7803      	ldrb	r3, [r0, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d123      	bne.n	fe0 <flight+0x54>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     f98:	4e12      	ldr	r6, [pc, #72]	; (fe4 <flight+0x58>)
     f9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
     f9c:	47b0      	blx	r6
     f9e:	4d12      	ldr	r5, [pc, #72]	; (fe8 <flight+0x5c>)
     fa0:	2200      	movs	r2, #0
     fa2:	4b12      	ldr	r3, [pc, #72]	; (fec <flight+0x60>)
     fa4:	47a8      	blx	r5
     fa6:	9000      	str	r0, [sp, #0]
     fa8:	9101      	str	r1, [sp, #4]
     faa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     fac:	47b0      	blx	r6
     fae:	2200      	movs	r2, #0
     fb0:	4b0e      	ldr	r3, [pc, #56]	; (fec <flight+0x60>)
     fb2:	47a8      	blx	r5
     fb4:	0002      	movs	r2, r0
     fb6:	000b      	movs	r3, r1
     fb8:	9800      	ldr	r0, [sp, #0]
     fba:	9901      	ldr	r1, [sp, #4]
     fbc:	4d0c      	ldr	r5, [pc, #48]	; (ff0 <flight+0x64>)
     fbe:	47a8      	blx	r5
     fc0:	4b0c      	ldr	r3, [pc, #48]	; (ff4 <flight+0x68>)
     fc2:	4798      	blx	r3
     fc4:	63a0      	str	r0, [r4, #56]	; 0x38

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     fc6:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <flight+0x6c>)
     fc8:	4798      	blx	r3
     fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
     fcc:	1ac0      	subs	r0, r0, r3
     fce:	23fa      	movs	r3, #250	; 0xfa
     fd0:	00db      	lsls	r3, r3, #3
     fd2:	4298      	cmp	r0, r3
     fd4:	d904      	bls.n	fe0 <flight+0x54>
            //recursive filter
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer; 
     fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     fd8:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.offsetBufferTime = millis();
     fda:	4b07      	ldr	r3, [pc, #28]	; (ff8 <flight+0x6c>)
     fdc:	4798      	blx	r3
     fde:	6320      	str	r0, [r4, #48]	; 0x30

        break;
    }


     fe0:	b002      	add	sp, #8
     fe2:	bd70      	pop	{r4, r5, r6, pc}
     fe4:	00002e61 	.word	0x00002e61
     fe8:	000028e9 	.word	0x000028e9
     fec:	3fe00000 	.word	0x3fe00000
     ff0:	00002075 	.word	0x00002075
     ff4:	00002f09 	.word	0x00002f09
     ff8:	00000e25 	.word	0x00000e25

00000ffc <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffe:	465f      	mov	r7, fp
    1000:	4656      	mov	r6, sl
    1002:	464d      	mov	r5, r9
    1004:	4644      	mov	r4, r8
    1006:	b4f0      	push	{r4, r5, r6, r7}
    1008:	b083      	sub	sp, #12
    100a:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    100c:	4bc2      	ldr	r3, [pc, #776]	; (1318 <sampleTick+0x31c>)
    100e:	4798      	blx	r3
    1010:	2384      	movs	r3, #132	; 0x84
    1012:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
    1014:	4dc1      	ldr	r5, [pc, #772]	; (131c <sampleTick+0x320>)
    1016:	6828      	ldr	r0, [r5, #0]
    1018:	6869      	ldr	r1, [r5, #4]
    101a:	4ec1      	ldr	r6, [pc, #772]	; (1320 <sampleTick+0x324>)
    101c:	47b0      	blx	r6
    101e:	4bc1      	ldr	r3, [pc, #772]	; (1324 <sampleTick+0x328>)
    1020:	4699      	mov	r9, r3
    1022:	4798      	blx	r3
    1024:	4bc0      	ldr	r3, [pc, #768]	; (1328 <sampleTick+0x32c>)
    1026:	4698      	mov	r8, r3
    1028:	4ac0      	ldr	r2, [pc, #768]	; (132c <sampleTick+0x330>)
    102a:	4bc1      	ldr	r3, [pc, #772]	; (1330 <sampleTick+0x334>)
    102c:	47c0      	blx	r8
    102e:	4fc1      	ldr	r7, [pc, #772]	; (1334 <sampleTick+0x338>)
    1030:	47b8      	blx	r7
    1032:	67a0      	str	r0, [r4, #120]	; 0x78
    my_altimeter->senseA = adc_read(senseAPin);
    1034:	68a8      	ldr	r0, [r5, #8]
    1036:	68e9      	ldr	r1, [r5, #12]
    1038:	47b0      	blx	r6
    103a:	237c      	movs	r3, #124	; 0x7c
    103c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    103e:	6928      	ldr	r0, [r5, #16]
    1040:	6969      	ldr	r1, [r5, #20]
    1042:	47b0      	blx	r6
    1044:	237e      	movs	r3, #126	; 0x7e
    1046:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    1048:	69a8      	ldr	r0, [r5, #24]
    104a:	69e9      	ldr	r1, [r5, #28]
    104c:	47b0      	blx	r6
    104e:	2380      	movs	r3, #128	; 0x80
    1050:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    1052:	6a28      	ldr	r0, [r5, #32]
    1054:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1056:	47b0      	blx	r6
    1058:	2382      	movs	r3, #130	; 0x82
    105a:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    105c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    105e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    1060:	47b0      	blx	r6
    1062:	2370      	movs	r3, #112	; 0x70
    1064:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
    1066:	4bb4      	ldr	r3, [pc, #720]	; (1338 <sampleTick+0x33c>)
    1068:	469c      	mov	ip, r3
    106a:	4460      	add	r0, ip
    106c:	47c8      	blx	r9
    106e:	4ab3      	ldr	r2, [pc, #716]	; (133c <sampleTick+0x340>)
    1070:	4bb3      	ldr	r3, [pc, #716]	; (1340 <sampleTick+0x344>)
    1072:	47c0      	blx	r8
    1074:	47b8      	blx	r7
    1076:	6760      	str	r0, [r4, #116]	; 0x74

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    107a:	6423      	str	r3, [r4, #64]	; 0x40
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    107c:	4eb1      	ldr	r6, [pc, #708]	; (1344 <sampleTick+0x348>)
    107e:	2380      	movs	r3, #128	; 0x80
    1080:	021b      	lsls	r3, r3, #8
    1082:	4699      	mov	r9, r3
    1084:	6173      	str	r3, [r6, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1086:	2350      	movs	r3, #80	; 0x50
    1088:	9300      	str	r3, [sp, #0]
    108a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    108c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    108e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    1090:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    1092:	4fad      	ldr	r7, [pc, #692]	; (1348 <sampleTick+0x34c>)
    1094:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1096:	464b      	mov	r3, r9
    1098:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_us(500);
    109a:	20fa      	movs	r0, #250	; 0xfa
    109c:	0040      	lsls	r0, r0, #1
    109e:	4bab      	ldr	r3, [pc, #684]	; (134c <sampleTick+0x350>)
    10a0:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    10a2:	4bab      	ldr	r3, [pc, #684]	; (1350 <sampleTick+0x354>)
    10a4:	4798      	blx	r3
    10a6:	61a0      	str	r0, [r4, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    10a8:	464b      	mov	r3, r9
    10aa:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    10ac:	2342      	movs	r3, #66	; 0x42
    10ae:	9300      	str	r3, [sp, #0]
    10b0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    10b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    10b4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    10b6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    10b8:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    10ba:	464b      	mov	r3, r9
    10bc:	61b3      	str	r3, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    10be:	2380      	movs	r3, #128	; 0x80
    10c0:	00db      	lsls	r3, r3, #3
    10c2:	469b      	mov	fp, r3
    10c4:	2394      	movs	r3, #148	; 0x94
    10c6:	465a      	mov	r2, fp
    10c8:	50f2      	str	r2, [r6, r3]
    pinHigh(cs_baro);

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    10ca:	2182      	movs	r1, #130	; 0x82
    10cc:	2000      	movs	r0, #0
    10ce:	4da1      	ldr	r5, [pc, #644]	; (1354 <sampleTick+0x358>)
    10d0:	47a8      	blx	r5
    //spiDataOut(SPI0, 0x80 | 0x02);

    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
    10d2:	21ff      	movs	r1, #255	; 0xff
    10d4:	2000      	movs	r0, #0
    10d6:	47a8      	blx	r5
    10d8:	2359      	movs	r3, #89	; 0x59
    10da:	4698      	mov	r8, r3
    10dc:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
    10de:	21ff      	movs	r1, #255	; 0xff
    10e0:	2000      	movs	r0, #0
    10e2:	47a8      	blx	r5
    10e4:	2358      	movs	r3, #88	; 0x58
    10e6:	469a      	mov	sl, r3
    10e8:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
    10ea:	21ff      	movs	r1, #255	; 0xff
    10ec:	2000      	movs	r0, #0
    10ee:	47a8      	blx	r5
    10f0:	275d      	movs	r7, #93	; 0x5d
    10f2:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
    10f4:	21ff      	movs	r1, #255	; 0xff
    10f6:	2000      	movs	r0, #0
    10f8:	47a8      	blx	r5
    10fa:	235c      	movs	r3, #92	; 0x5c
    10fc:	4699      	mov	r9, r3
    10fe:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
    1100:	21ff      	movs	r1, #255	; 0xff
    1102:	2000      	movs	r0, #0
    1104:	47a8      	blx	r5
    1106:	2361      	movs	r3, #97	; 0x61
    1108:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
    110a:	21ff      	movs	r1, #255	; 0xff
    110c:	2000      	movs	r0, #0
    110e:	47a8      	blx	r5
    1110:	2360      	movs	r3, #96	; 0x60
    1112:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1114:	2298      	movs	r2, #152	; 0x98
    1116:	4659      	mov	r1, fp
    1118:	50b1      	str	r1, [r6, r2]
    //my_altimeter->myIMU.accelYHigh = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZLow = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZHigh = spiDataIn(SPI0);
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
    111a:	4652      	mov	r2, sl
    111c:	5ca0      	ldrb	r0, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
    111e:	464a      	mov	r2, r9
    1120:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
    1122:	5ce2      	ldrb	r2, [r4, r3]

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    1124:	0203      	lsls	r3, r0, #8
    1126:	4645      	mov	r5, r8
    1128:	5d65      	ldrb	r5, [r4, r5]
    112a:	432b      	orrs	r3, r5
    112c:	b21d      	sxth	r5, r3
    112e:	235a      	movs	r3, #90	; 0x5a
    1130:	52e5      	strh	r5, [r4, r3]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
    1132:	020b      	lsls	r3, r1, #8
    1134:	5de6      	ldrb	r6, [r4, r7]
    1136:	4333      	orrs	r3, r6
    1138:	b21e      	sxth	r6, r3
    113a:	235e      	movs	r3, #94	; 0x5e
    113c:	52e6      	strh	r6, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
    113e:	0213      	lsls	r3, r2, #8
    1140:	3704      	adds	r7, #4
    1142:	5de7      	ldrb	r7, [r4, r7]
    1144:	433b      	orrs	r3, r7
    1146:	b21b      	sxth	r3, r3
    1148:	2762      	movs	r7, #98	; 0x62
    114a:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
    114c:	2801      	cmp	r0, #1
    114e:	d009      	beq.n	1164 <sampleTick+0x168>
        if (negativeX) {
    1150:	b240      	sxtb	r0, r0
    1152:	2800      	cmp	r0, #0
    1154:	da03      	bge.n	115e <sampleTick+0x162>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1156:	112d      	asrs	r5, r5, #4
    1158:	205a      	movs	r0, #90	; 0x5a
    115a:	5225      	strh	r5, [r4, r0]
    115c:	e002      	b.n	1164 <sampleTick+0x168>
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    115e:	112d      	asrs	r5, r5, #4
    1160:	205a      	movs	r0, #90	; 0x5a
    1162:	5225      	strh	r5, [r4, r0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
    1164:	2901      	cmp	r1, #1
    1166:	d009      	beq.n	117c <sampleTick+0x180>
        if (negativeY) {
    1168:	b249      	sxtb	r1, r1
    116a:	2900      	cmp	r1, #0
    116c:	da03      	bge.n	1176 <sampleTick+0x17a>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    116e:	1136      	asrs	r6, r6, #4
    1170:	215e      	movs	r1, #94	; 0x5e
    1172:	5266      	strh	r6, [r4, r1]
    1174:	e002      	b.n	117c <sampleTick+0x180>
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1176:	1136      	asrs	r6, r6, #4
    1178:	215e      	movs	r1, #94	; 0x5e
    117a:	5266      	strh	r6, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
    117c:	2a01      	cmp	r2, #1
    117e:	d009      	beq.n	1194 <sampleTick+0x198>
        if (negativeZ) {
    1180:	b252      	sxtb	r2, r2
    1182:	2a00      	cmp	r2, #0
    1184:	da03      	bge.n	118e <sampleTick+0x192>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1186:	111b      	asrs	r3, r3, #4
    1188:	2262      	movs	r2, #98	; 0x62
    118a:	52a3      	strh	r3, [r4, r2]
    118c:	e002      	b.n	1194 <sampleTick+0x198>
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    118e:	111b      	asrs	r3, r3, #4
    1190:	2262      	movs	r2, #98	; 0x62
    1192:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
    1194:	235a      	movs	r3, #90	; 0x5a
    1196:	5ee0      	ldrsh	r0, [r4, r3]
    1198:	4f62      	ldr	r7, [pc, #392]	; (1324 <sampleTick+0x328>)
    119a:	47b8      	blx	r7
    119c:	4e62      	ldr	r6, [pc, #392]	; (1328 <sampleTick+0x32c>)
    119e:	4a6e      	ldr	r2, [pc, #440]	; (1358 <sampleTick+0x35c>)
    11a0:	4b6e      	ldr	r3, [pc, #440]	; (135c <sampleTick+0x360>)
    11a2:	47b0      	blx	r6
    11a4:	4d63      	ldr	r5, [pc, #396]	; (1334 <sampleTick+0x338>)
    11a6:	47a8      	blx	r5
    11a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    11aa:	235e      	movs	r3, #94	; 0x5e
    11ac:	5ee0      	ldrsh	r0, [r4, r3]
    11ae:	47b8      	blx	r7
    11b0:	4a69      	ldr	r2, [pc, #420]	; (1358 <sampleTick+0x35c>)
    11b2:	4b6a      	ldr	r3, [pc, #424]	; (135c <sampleTick+0x360>)
    11b4:	47b0      	blx	r6
    11b6:	47a8      	blx	r5
    11b8:	6460      	str	r0, [r4, #68]	; 0x44
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    11ba:	2362      	movs	r3, #98	; 0x62
    11bc:	5ee0      	ldrsh	r0, [r4, r3]
    11be:	47b8      	blx	r7
    11c0:	4a65      	ldr	r2, [pc, #404]	; (1358 <sampleTick+0x35c>)
    11c2:	4b66      	ldr	r3, [pc, #408]	; (135c <sampleTick+0x360>)
    11c4:	47b0      	blx	r6
    11c6:	47a8      	blx	r5
    11c8:	64a0      	str	r0, [r4, #72]	; 0x48
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    11ca:	4b5e      	ldr	r3, [pc, #376]	; (1344 <sampleTick+0x348>)
    11cc:	469a      	mov	sl, r3
    11ce:	2380      	movs	r3, #128	; 0x80
    11d0:	00db      	lsls	r3, r3, #3
    11d2:	469b      	mov	fp, r3
    11d4:	4653      	mov	r3, sl
    11d6:	465a      	mov	r2, fp
    11d8:	615a      	str	r2, [r3, #20]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    11da:	2182      	movs	r1, #130	; 0x82
    11dc:	2000      	movs	r0, #0
    11de:	4d5d      	ldr	r5, [pc, #372]	; (1354 <sampleTick+0x358>)
    11e0:	47a8      	blx	r5
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
    11e2:	21ff      	movs	r1, #255	; 0xff
    11e4:	2000      	movs	r0, #0
    11e6:	47a8      	blx	r5
    11e8:	2765      	movs	r7, #101	; 0x65
    11ea:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    11ec:	21ff      	movs	r1, #255	; 0xff
    11ee:	2000      	movs	r0, #0
    11f0:	47a8      	blx	r5
    11f2:	2364      	movs	r3, #100	; 0x64
    11f4:	4699      	mov	r9, r3
    11f6:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    11f8:	21ff      	movs	r1, #255	; 0xff
    11fa:	2000      	movs	r0, #0
    11fc:	47a8      	blx	r5
    11fe:	2669      	movs	r6, #105	; 0x69
    1200:	55a0      	strb	r0, [r4, r6]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    1202:	21ff      	movs	r1, #255	; 0xff
    1204:	2000      	movs	r0, #0
    1206:	47a8      	blx	r5
    1208:	2368      	movs	r3, #104	; 0x68
    120a:	4698      	mov	r8, r3
    120c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    120e:	21ff      	movs	r1, #255	; 0xff
    1210:	2000      	movs	r0, #0
    1212:	47a8      	blx	r5
    1214:	236d      	movs	r3, #109	; 0x6d
    1216:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
    1218:	21ff      	movs	r1, #255	; 0xff
    121a:	2000      	movs	r0, #0
    121c:	47a8      	blx	r5
    121e:	236c      	movs	r3, #108	; 0x6c
    1220:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1222:	4652      	mov	r2, sl
    1224:	4659      	mov	r1, fp
    1226:	6191      	str	r1, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
    1228:	464a      	mov	r2, r9
    122a:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
    122c:	4642      	mov	r2, r8
    122e:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;
    1230:	5ce5      	ldrb	r5, [r4, r3]
    1232:	b26b      	sxtb	r3, r5
    1234:	469c      	mov	ip, r3

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
    1236:	020b      	lsls	r3, r1, #8
    1238:	5de7      	ldrb	r7, [r4, r7]
    123a:	431f      	orrs	r7, r3
    123c:	b23f      	sxth	r7, r7
    123e:	2366      	movs	r3, #102	; 0x66
    1240:	52e7      	strh	r7, [r4, r3]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
    1242:	0213      	lsls	r3, r2, #8
    1244:	5da0      	ldrb	r0, [r4, r6]
    1246:	4318      	orrs	r0, r3
    1248:	b200      	sxth	r0, r0
    124a:	236a      	movs	r3, #106	; 0x6a
    124c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
    124e:	022b      	lsls	r3, r5, #8
    1250:	3604      	adds	r6, #4
    1252:	5da6      	ldrb	r6, [r4, r6]
    1254:	4333      	orrs	r3, r6
    1256:	b21b      	sxth	r3, r3
    1258:	266e      	movs	r6, #110	; 0x6e
    125a:	53a3      	strh	r3, [r4, r6]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
    125c:	2901      	cmp	r1, #1
    125e:	d009      	beq.n	1274 <sampleTick+0x278>
        if (negativeXgyro) {
    1260:	b249      	sxtb	r1, r1
    1262:	2900      	cmp	r1, #0
    1264:	da03      	bge.n	126e <sampleTick+0x272>
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1266:	113f      	asrs	r7, r7, #4
    1268:	2166      	movs	r1, #102	; 0x66
    126a:	5267      	strh	r7, [r4, r1]
    126c:	e002      	b.n	1274 <sampleTick+0x278>
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    126e:	113f      	asrs	r7, r7, #4
    1270:	2166      	movs	r1, #102	; 0x66
    1272:	5267      	strh	r7, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
    1274:	2a01      	cmp	r2, #1
    1276:	d009      	beq.n	128c <sampleTick+0x290>
        if (negativeYgyro) {
    1278:	b252      	sxtb	r2, r2
    127a:	2a00      	cmp	r2, #0
    127c:	da03      	bge.n	1286 <sampleTick+0x28a>
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    127e:	1100      	asrs	r0, r0, #4
    1280:	226a      	movs	r2, #106	; 0x6a
    1282:	52a0      	strh	r0, [r4, r2]
    1284:	e002      	b.n	128c <sampleTick+0x290>
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1286:	1100      	asrs	r0, r0, #4
    1288:	226a      	movs	r2, #106	; 0x6a
    128a:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
    128c:	2d01      	cmp	r5, #1
    128e:	d009      	beq.n	12a4 <sampleTick+0x2a8>
        if (negativeZgyro) {
    1290:	4662      	mov	r2, ip
    1292:	2a00      	cmp	r2, #0
    1294:	da03      	bge.n	129e <sampleTick+0x2a2>
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1296:	111b      	asrs	r3, r3, #4
    1298:	226e      	movs	r2, #110	; 0x6e
    129a:	52a3      	strh	r3, [r4, r2]
    129c:	e002      	b.n	12a4 <sampleTick+0x2a8>
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    129e:	111b      	asrs	r3, r3, #4
    12a0:	226e      	movs	r2, #110	; 0x6e
    12a2:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
    12a4:	2366      	movs	r3, #102	; 0x66
    12a6:	5ee0      	ldrsh	r0, [r4, r3]
    12a8:	4f1e      	ldr	r7, [pc, #120]	; (1324 <sampleTick+0x328>)
    12aa:	47b8      	blx	r7
    12ac:	4e1e      	ldr	r6, [pc, #120]	; (1328 <sampleTick+0x32c>)
    12ae:	4a2a      	ldr	r2, [pc, #168]	; (1358 <sampleTick+0x35c>)
    12b0:	4b2a      	ldr	r3, [pc, #168]	; (135c <sampleTick+0x360>)
    12b2:	47b0      	blx	r6
    12b4:	4d1f      	ldr	r5, [pc, #124]	; (1334 <sampleTick+0x338>)
    12b6:	47a8      	blx	r5
    12b8:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    12ba:	236a      	movs	r3, #106	; 0x6a
    12bc:	5ee0      	ldrsh	r0, [r4, r3]
    12be:	47b8      	blx	r7
    12c0:	4a25      	ldr	r2, [pc, #148]	; (1358 <sampleTick+0x35c>)
    12c2:	4b26      	ldr	r3, [pc, #152]	; (135c <sampleTick+0x360>)
    12c4:	47b0      	blx	r6
    12c6:	47a8      	blx	r5
    12c8:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
    12ca:	236e      	movs	r3, #110	; 0x6e
    12cc:	5ee0      	ldrsh	r0, [r4, r3]
    12ce:	47b8      	blx	r7
    12d0:	4a21      	ldr	r2, [pc, #132]	; (1358 <sampleTick+0x35c>)
    12d2:	4b22      	ldr	r3, [pc, #136]	; (135c <sampleTick+0x360>)
    12d4:	47b0      	blx	r6
    12d6:	47a8      	blx	r5
    12d8:	6560      	str	r0, [r4, #84]	; 0x54

    delay_us(800);
    12da:	20c8      	movs	r0, #200	; 0xc8
    12dc:	0080      	lsls	r0, r0, #2
    12de:	4b1b      	ldr	r3, [pc, #108]	; (134c <sampleTick+0x350>)
    12e0:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    12e2:	4b1b      	ldr	r3, [pc, #108]	; (1350 <sampleTick+0x354>)
    12e4:	4798      	blx	r3
    12e6:	6160      	str	r0, [r4, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    12e8:	0027      	movs	r7, r4
    12ea:	3708      	adds	r7, #8
    12ec:	0038      	movs	r0, r7
    12ee:	4b1c      	ldr	r3, [pc, #112]	; (1360 <sampleTick+0x364>)
    12f0:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    12f2:	0038      	movs	r0, r7
    12f4:	4b1b      	ldr	r3, [pc, #108]	; (1364 <sampleTick+0x368>)
    12f6:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    12f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    12fa:	4b1b      	ldr	r3, [pc, #108]	; (1368 <sampleTick+0x36c>)
    12fc:	4798      	blx	r3
    12fe:	4a1b      	ldr	r2, [pc, #108]	; (136c <sampleTick+0x370>)
    1300:	4b1b      	ldr	r3, [pc, #108]	; (1370 <sampleTick+0x374>)
    1302:	47b0      	blx	r6
    1304:	47a8      	blx	r5
    1306:	62e0      	str	r0, [r4, #44]	; 0x2c


}
    1308:	b003      	add	sp, #12
    130a:	bc3c      	pop	{r2, r3, r4, r5}
    130c:	4690      	mov	r8, r2
    130e:	4699      	mov	r9, r3
    1310:	46a2      	mov	sl, r4
    1312:	46ab      	mov	fp, r5
    1314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00000e25 	.word	0x00000e25
    131c:	000033ac 	.word	0x000033ac
    1320:	00000b19 	.word	0x00000b19
    1324:	00002ddd 	.word	0x00002ddd
    1328:	000028e9 	.word	0x000028e9
    132c:	eaa2a0a9 	.word	0xeaa2a0a9
    1330:	3f5f3a57 	.word	0x3f5f3a57
    1334:	00002f09 	.word	0x00002f09
    1338:	fffff0da 	.word	0xfffff0da
    133c:	367a0f91 	.word	0x367a0f91
    1340:	bf973eab 	.word	0xbf973eab
    1344:	41004400 	.word	0x41004400
    1348:	00000b99 	.word	0x00000b99
    134c:	00000dad 	.word	0x00000dad
    1350:	00000221 	.word	0x00000221
    1354:	0000149d 	.word	0x0000149d
    1358:	e94ee393 	.word	0xe94ee393
    135c:	3f7ffd60 	.word	0x3f7ffd60
    1360:	00000295 	.word	0x00000295
    1364:	0000038d 	.word	0x0000038d
    1368:	00002e61 	.word	0x00002e61
    136c:	e9f6a93f 	.word	0xe9f6a93f
    1370:	3fa0cc78 	.word	0x3fa0cc78

00001374 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1374:	b570      	push	{r4, r5, r6, lr}
    1376:	0004      	movs	r4, r0
    1378:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    137a:	480e      	ldr	r0, [pc, #56]	; (13b4 <sercomClockEnable+0x40>)
    137c:	6a01      	ldr	r1, [r0, #32]
    137e:	1ca6      	adds	r6, r4, #2
    1380:	2301      	movs	r3, #1
    1382:	40b3      	lsls	r3, r6
    1384:	430b      	orrs	r3, r1
    1386:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1388:	2d00      	cmp	r5, #0
    138a:	d003      	beq.n	1394 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    138c:	2107      	movs	r1, #7
    138e:	0028      	movs	r0, r5
    1390:	4b09      	ldr	r3, [pc, #36]	; (13b8 <sercomClockEnable+0x44>)
    1392:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1394:	0229      	lsls	r1, r5, #8
    1396:	23f0      	movs	r3, #240	; 0xf0
    1398:	011b      	lsls	r3, r3, #4
    139a:	4019      	ands	r1, r3
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	01db      	lsls	r3, r3, #7
    13a0:	4319      	orrs	r1, r3
    13a2:	0023      	movs	r3, r4
    13a4:	3314      	adds	r3, #20
    13a6:	243f      	movs	r4, #63	; 0x3f
    13a8:	401c      	ands	r4, r3
    13aa:	430c      	orrs	r4, r1
    13ac:	4b03      	ldr	r3, [pc, #12]	; (13bc <sercomClockEnable+0x48>)
    13ae:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    13b0:	bd70      	pop	{r4, r5, r6, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	40000400 	.word	0x40000400
    13b8:	00000d5d 	.word	0x00000d5d
    13bc:	40000c00 	.word	0x40000c00

000013c0 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    13c0:	0280      	lsls	r0, r0, #10
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <sercomReset+0x18>)
    13c4:	469c      	mov	ip, r3
    13c6:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    13c8:	2301      	movs	r3, #1
    13ca:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    13cc:	2201      	movs	r2, #1
    13ce:	6803      	ldr	r3, [r0, #0]
    13d0:	421a      	tst	r2, r3
    13d2:	d1fc      	bne.n	13ce <sercomReset+0xe>
}
    13d4:	4770      	bx	lr
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	42000800 	.word	0x42000800

000013dc <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    13dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13de:	464f      	mov	r7, r9
    13e0:	4646      	mov	r6, r8
    13e2:	b4c0      	push	{r6, r7}
    13e4:	0006      	movs	r6, r0
    13e6:	4688      	mov	r8, r1
    13e8:	0017      	movs	r7, r2
    13ea:	001d      	movs	r5, r3
    13ec:	ab08      	add	r3, sp, #32
    13ee:	781c      	ldrb	r4, [r3, #0]
    13f0:	ab09      	add	r3, sp, #36	; 0x24
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	4699      	mov	r9, r3

    sercomReset(id);
    13f6:	4b15      	ldr	r3, [pc, #84]	; (144c <sercomSpiMasterInit+0x70>)
    13f8:	4798      	blx	r3
    13fa:	02b0      	lsls	r0, r6, #10
    13fc:	4b14      	ldr	r3, [pc, #80]	; (1450 <sercomSpiMasterInit+0x74>)
    13fe:	469c      	mov	ip, r3
    1400:	4460      	add	r0, ip

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1402:	2380      	movs	r3, #128	; 0x80
    1404:	029b      	lsls	r3, r3, #10
    1406:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
    1408:	464b      	mov	r3, r9
    140a:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    140c:	4643      	mov	r3, r8
    140e:	0519      	lsls	r1, r3, #20
    1410:	23c0      	movs	r3, #192	; 0xc0
    1412:	039b      	lsls	r3, r3, #14
    1414:	4019      	ands	r1, r3
    1416:	000e      	movs	r6, r1
    1418:	0439      	lsls	r1, r7, #16
    141a:	23c0      	movs	r3, #192	; 0xc0
    141c:	029b      	lsls	r3, r3, #10
    141e:	4019      	ands	r1, r3
    1420:	230e      	movs	r3, #14
    1422:	000a      	movs	r2, r1
    1424:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1426:	1e6b      	subs	r3, r5, #1
    1428:	419d      	sbcs	r5, r3
    142a:	076d      	lsls	r5, r5, #29
    142c:	0031      	movs	r1, r6
    142e:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1430:	1e63      	subs	r3, r4, #1
    1432:	419c      	sbcs	r4, r3
    1434:	0722      	lsls	r2, r4, #28
    1436:	002c      	movs	r4, r5
    1438:	430c      	orrs	r4, r1
    143a:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    143c:	6004      	str	r4, [r0, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    143e:	69c3      	ldr	r3, [r0, #28]
    1440:	075b      	lsls	r3, r3, #29
    1442:	d4fc      	bmi.n	143e <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1444:	bc0c      	pop	{r2, r3}
    1446:	4690      	mov	r8, r2
    1448:	4699      	mov	r9, r3
    144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    144c:	000013c1 	.word	0x000013c1
    1450:	42000800 	.word	0x42000800

00001454 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1456:	0004      	movs	r4, r0
    1458:	000f      	movs	r7, r1
    145a:	0015      	movs	r5, r2
    145c:	001e      	movs	r6, r3
    sercomReset(id);
    145e:	4b0c      	ldr	r3, [pc, #48]	; (1490 <sercomUartInit+0x3c>)
    1460:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1462:	02a0      	lsls	r0, r4, #10
    1464:	4b0b      	ldr	r3, [pc, #44]	; (1494 <sercomUartInit+0x40>)
    1466:	469c      	mov	ip, r3
    1468:	4460      	add	r0, ip
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    146a:	2304      	movs	r3, #4
    146c:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    146e:	b2b6      	uxth	r6, r6
    1470:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1472:	23c0      	movs	r3, #192	; 0xc0
    1474:	029b      	lsls	r3, r3, #10
    1476:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1478:	0539      	lsls	r1, r7, #20
    147a:	22c0      	movs	r2, #192	; 0xc0
    147c:	0392      	lsls	r2, r2, #14
    147e:	4011      	ands	r1, r2
    1480:	4a05      	ldr	r2, [pc, #20]	; (1498 <sercomUartInit+0x44>)
    1482:	4311      	orrs	r1, r2
    1484:	042d      	lsls	r5, r5, #16
    1486:	402b      	ands	r3, r5
    1488:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    148a:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	000013c1 	.word	0x000013c1
    1494:	42000800 	.word	0x42000800
    1498:	40000006 	.word	0x40000006

0000149c <spiDataTransfer>:
    149c:	0280      	lsls	r0, r0, #10
    149e:	4b05      	ldr	r3, [pc, #20]	; (14b4 <spiDataTransfer+0x18>)
    14a0:	469c      	mov	ip, r3
    14a2:	4460      	add	r0, ip

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    14a4:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    14a6:	7e03      	ldrb	r3, [r0, #24]
    14a8:	075b      	lsls	r3, r3, #29
    14aa:	d5fc      	bpl.n	14a6 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
    14ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
    14ae:	b2c0      	uxtb	r0, r0
}
    14b0:	4770      	bx	lr
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	42000800 	.word	0x42000800

000014b8 <usartDataOut>:
    14b8:	0280      	lsls	r0, r0, #10
    14ba:	4b04      	ldr	r3, [pc, #16]	; (14cc <usartDataOut+0x14>)
    14bc:	469c      	mov	ip, r3
    14be:	4460      	add	r0, ip
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    14c0:	b289      	uxth	r1, r1
    14c2:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    14c4:	7e03      	ldrb	r3, [r0, #24]
    14c6:	07db      	lsls	r3, r3, #31
    14c8:	d5fc      	bpl.n	14c4 <usartDataOut+0xc>
    14ca:	4770      	bx	lr
    14cc:	42000800 	.word	0x42000800

000014d0 <__aeabi_cdrcmple>:
    14d0:	4684      	mov	ip, r0
    14d2:	1c10      	adds	r0, r2, #0
    14d4:	4662      	mov	r2, ip
    14d6:	468c      	mov	ip, r1
    14d8:	1c19      	adds	r1, r3, #0
    14da:	4663      	mov	r3, ip
    14dc:	e000      	b.n	14e0 <__aeabi_cdcmpeq>
    14de:	46c0      	nop			; (mov r8, r8)

000014e0 <__aeabi_cdcmpeq>:
    14e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    14e2:	f001 f997 	bl	2814 <__ledf2>
    14e6:	2800      	cmp	r0, #0
    14e8:	d401      	bmi.n	14ee <__aeabi_cdcmpeq+0xe>
    14ea:	2100      	movs	r1, #0
    14ec:	42c8      	cmn	r0, r1
    14ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000014f0 <__aeabi_dcmpeq>:
    14f0:	b510      	push	{r4, lr}
    14f2:	f001 f8eb 	bl	26cc <__eqdf2>
    14f6:	4240      	negs	r0, r0
    14f8:	3001      	adds	r0, #1
    14fa:	bd10      	pop	{r4, pc}

000014fc <__aeabi_dcmplt>:
    14fc:	b510      	push	{r4, lr}
    14fe:	f001 f989 	bl	2814 <__ledf2>
    1502:	2800      	cmp	r0, #0
    1504:	db01      	blt.n	150a <__aeabi_dcmplt+0xe>
    1506:	2000      	movs	r0, #0
    1508:	bd10      	pop	{r4, pc}
    150a:	2001      	movs	r0, #1
    150c:	bd10      	pop	{r4, pc}
    150e:	46c0      	nop			; (mov r8, r8)

00001510 <__aeabi_dcmple>:
    1510:	b510      	push	{r4, lr}
    1512:	f001 f97f 	bl	2814 <__ledf2>
    1516:	2800      	cmp	r0, #0
    1518:	dd01      	ble.n	151e <__aeabi_dcmple+0xe>
    151a:	2000      	movs	r0, #0
    151c:	bd10      	pop	{r4, pc}
    151e:	2001      	movs	r0, #1
    1520:	bd10      	pop	{r4, pc}
    1522:	46c0      	nop			; (mov r8, r8)

00001524 <__aeabi_dcmpgt>:
    1524:	b510      	push	{r4, lr}
    1526:	f001 f911 	bl	274c <__gedf2>
    152a:	2800      	cmp	r0, #0
    152c:	dc01      	bgt.n	1532 <__aeabi_dcmpgt+0xe>
    152e:	2000      	movs	r0, #0
    1530:	bd10      	pop	{r4, pc}
    1532:	2001      	movs	r0, #1
    1534:	bd10      	pop	{r4, pc}
    1536:	46c0      	nop			; (mov r8, r8)

00001538 <__aeabi_dcmpge>:
    1538:	b510      	push	{r4, lr}
    153a:	f001 f907 	bl	274c <__gedf2>
    153e:	2800      	cmp	r0, #0
    1540:	da01      	bge.n	1546 <__aeabi_dcmpge+0xe>
    1542:	2000      	movs	r0, #0
    1544:	bd10      	pop	{r4, pc}
    1546:	2001      	movs	r0, #1
    1548:	bd10      	pop	{r4, pc}
    154a:	46c0      	nop			; (mov r8, r8)

0000154c <__aeabi_lmul>:
    154c:	b5f0      	push	{r4, r5, r6, r7, lr}
    154e:	464f      	mov	r7, r9
    1550:	4646      	mov	r6, r8
    1552:	b4c0      	push	{r6, r7}
    1554:	0416      	lsls	r6, r2, #16
    1556:	0c36      	lsrs	r6, r6, #16
    1558:	4699      	mov	r9, r3
    155a:	0033      	movs	r3, r6
    155c:	0405      	lsls	r5, r0, #16
    155e:	0c2c      	lsrs	r4, r5, #16
    1560:	0c07      	lsrs	r7, r0, #16
    1562:	0c15      	lsrs	r5, r2, #16
    1564:	4363      	muls	r3, r4
    1566:	437e      	muls	r6, r7
    1568:	436f      	muls	r7, r5
    156a:	4365      	muls	r5, r4
    156c:	0c1c      	lsrs	r4, r3, #16
    156e:	19ad      	adds	r5, r5, r6
    1570:	1964      	adds	r4, r4, r5
    1572:	469c      	mov	ip, r3
    1574:	42a6      	cmp	r6, r4
    1576:	d903      	bls.n	1580 <__aeabi_lmul+0x34>
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	025b      	lsls	r3, r3, #9
    157c:	4698      	mov	r8, r3
    157e:	4447      	add	r7, r8
    1580:	4663      	mov	r3, ip
    1582:	0c25      	lsrs	r5, r4, #16
    1584:	19ef      	adds	r7, r5, r7
    1586:	041d      	lsls	r5, r3, #16
    1588:	464b      	mov	r3, r9
    158a:	434a      	muls	r2, r1
    158c:	4343      	muls	r3, r0
    158e:	0c2d      	lsrs	r5, r5, #16
    1590:	0424      	lsls	r4, r4, #16
    1592:	1964      	adds	r4, r4, r5
    1594:	1899      	adds	r1, r3, r2
    1596:	19c9      	adds	r1, r1, r7
    1598:	0020      	movs	r0, r4
    159a:	bc0c      	pop	{r2, r3}
    159c:	4690      	mov	r8, r2
    159e:	4699      	mov	r9, r3
    15a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15a2:	46c0      	nop			; (mov r8, r8)

000015a4 <__aeabi_fadd>:
    15a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a6:	024a      	lsls	r2, r1, #9
    15a8:	0243      	lsls	r3, r0, #9
    15aa:	0044      	lsls	r4, r0, #1
    15ac:	004e      	lsls	r6, r1, #1
    15ae:	0fc5      	lsrs	r5, r0, #31
    15b0:	0e24      	lsrs	r4, r4, #24
    15b2:	0028      	movs	r0, r5
    15b4:	099b      	lsrs	r3, r3, #6
    15b6:	0e36      	lsrs	r6, r6, #24
    15b8:	0fc9      	lsrs	r1, r1, #31
    15ba:	0992      	lsrs	r2, r2, #6
    15bc:	428d      	cmp	r5, r1
    15be:	d059      	beq.n	1674 <__aeabi_fadd+0xd0>
    15c0:	1ba0      	subs	r0, r4, r6
    15c2:	2800      	cmp	r0, #0
    15c4:	dc00      	bgt.n	15c8 <__aeabi_fadd+0x24>
    15c6:	e08d      	b.n	16e4 <__aeabi_fadd+0x140>
    15c8:	2e00      	cmp	r6, #0
    15ca:	d11a      	bne.n	1602 <__aeabi_fadd+0x5e>
    15cc:	2a00      	cmp	r2, #0
    15ce:	d000      	beq.n	15d2 <__aeabi_fadd+0x2e>
    15d0:	e079      	b.n	16c6 <__aeabi_fadd+0x122>
    15d2:	075a      	lsls	r2, r3, #29
    15d4:	d004      	beq.n	15e0 <__aeabi_fadd+0x3c>
    15d6:	220f      	movs	r2, #15
    15d8:	401a      	ands	r2, r3
    15da:	2a04      	cmp	r2, #4
    15dc:	d000      	beq.n	15e0 <__aeabi_fadd+0x3c>
    15de:	3304      	adds	r3, #4
    15e0:	015a      	lsls	r2, r3, #5
    15e2:	d538      	bpl.n	1656 <__aeabi_fadd+0xb2>
    15e4:	3401      	adds	r4, #1
    15e6:	2cff      	cmp	r4, #255	; 0xff
    15e8:	d100      	bne.n	15ec <__aeabi_fadd+0x48>
    15ea:	e089      	b.n	1700 <__aeabi_fadd+0x15c>
    15ec:	0028      	movs	r0, r5
    15ee:	019b      	lsls	r3, r3, #6
    15f0:	0a5b      	lsrs	r3, r3, #9
    15f2:	b2e4      	uxtb	r4, r4
    15f4:	025b      	lsls	r3, r3, #9
    15f6:	05e4      	lsls	r4, r4, #23
    15f8:	0a5b      	lsrs	r3, r3, #9
    15fa:	4323      	orrs	r3, r4
    15fc:	07c0      	lsls	r0, r0, #31
    15fe:	4318      	orrs	r0, r3
    1600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1602:	2cff      	cmp	r4, #255	; 0xff
    1604:	d0e5      	beq.n	15d2 <__aeabi_fadd+0x2e>
    1606:	2180      	movs	r1, #128	; 0x80
    1608:	04c9      	lsls	r1, r1, #19
    160a:	430a      	orrs	r2, r1
    160c:	281b      	cmp	r0, #27
    160e:	dd00      	ble.n	1612 <__aeabi_fadd+0x6e>
    1610:	e089      	b.n	1726 <__aeabi_fadd+0x182>
    1612:	0016      	movs	r6, r2
    1614:	2120      	movs	r1, #32
    1616:	40c6      	lsrs	r6, r0
    1618:	1a08      	subs	r0, r1, r0
    161a:	4082      	lsls	r2, r0
    161c:	1e51      	subs	r1, r2, #1
    161e:	418a      	sbcs	r2, r1
    1620:	4332      	orrs	r2, r6
    1622:	1a9b      	subs	r3, r3, r2
    1624:	015a      	lsls	r2, r3, #5
    1626:	d514      	bpl.n	1652 <__aeabi_fadd+0xae>
    1628:	019b      	lsls	r3, r3, #6
    162a:	099e      	lsrs	r6, r3, #6
    162c:	0030      	movs	r0, r6
    162e:	f001 fcf7 	bl	3020 <__clzsi2>
    1632:	3805      	subs	r0, #5
    1634:	4086      	lsls	r6, r0
    1636:	4284      	cmp	r4, r0
    1638:	dc65      	bgt.n	1706 <__aeabi_fadd+0x162>
    163a:	1b04      	subs	r4, r0, r4
    163c:	0033      	movs	r3, r6
    163e:	2020      	movs	r0, #32
    1640:	3401      	adds	r4, #1
    1642:	40e3      	lsrs	r3, r4
    1644:	1b04      	subs	r4, r0, r4
    1646:	40a6      	lsls	r6, r4
    1648:	1e72      	subs	r2, r6, #1
    164a:	4196      	sbcs	r6, r2
    164c:	2400      	movs	r4, #0
    164e:	4333      	orrs	r3, r6
    1650:	e7bf      	b.n	15d2 <__aeabi_fadd+0x2e>
    1652:	075a      	lsls	r2, r3, #29
    1654:	d1bf      	bne.n	15d6 <__aeabi_fadd+0x32>
    1656:	08df      	lsrs	r7, r3, #3
    1658:	0028      	movs	r0, r5
    165a:	2cff      	cmp	r4, #255	; 0xff
    165c:	d12f      	bne.n	16be <__aeabi_fadd+0x11a>
    165e:	2f00      	cmp	r7, #0
    1660:	d100      	bne.n	1664 <__aeabi_fadd+0xc0>
    1662:	e087      	b.n	1774 <__aeabi_fadd+0x1d0>
    1664:	2280      	movs	r2, #128	; 0x80
    1666:	03d2      	lsls	r2, r2, #15
    1668:	0013      	movs	r3, r2
    166a:	433b      	orrs	r3, r7
    166c:	025b      	lsls	r3, r3, #9
    166e:	0a5b      	lsrs	r3, r3, #9
    1670:	24ff      	movs	r4, #255	; 0xff
    1672:	e7bf      	b.n	15f4 <__aeabi_fadd+0x50>
    1674:	1ba1      	subs	r1, r4, r6
    1676:	2900      	cmp	r1, #0
    1678:	dd49      	ble.n	170e <__aeabi_fadd+0x16a>
    167a:	2e00      	cmp	r6, #0
    167c:	d029      	beq.n	16d2 <__aeabi_fadd+0x12e>
    167e:	2cff      	cmp	r4, #255	; 0xff
    1680:	d0a7      	beq.n	15d2 <__aeabi_fadd+0x2e>
    1682:	2680      	movs	r6, #128	; 0x80
    1684:	04f6      	lsls	r6, r6, #19
    1686:	4332      	orrs	r2, r6
    1688:	291b      	cmp	r1, #27
    168a:	dd00      	ble.n	168e <__aeabi_fadd+0xea>
    168c:	e08d      	b.n	17aa <__aeabi_fadd+0x206>
    168e:	0017      	movs	r7, r2
    1690:	2620      	movs	r6, #32
    1692:	40cf      	lsrs	r7, r1
    1694:	1a71      	subs	r1, r6, r1
    1696:	408a      	lsls	r2, r1
    1698:	1e51      	subs	r1, r2, #1
    169a:	418a      	sbcs	r2, r1
    169c:	433a      	orrs	r2, r7
    169e:	189b      	adds	r3, r3, r2
    16a0:	015a      	lsls	r2, r3, #5
    16a2:	d5d6      	bpl.n	1652 <__aeabi_fadd+0xae>
    16a4:	3401      	adds	r4, #1
    16a6:	2cff      	cmp	r4, #255	; 0xff
    16a8:	d064      	beq.n	1774 <__aeabi_fadd+0x1d0>
    16aa:	2201      	movs	r2, #1
    16ac:	4976      	ldr	r1, [pc, #472]	; (1888 <__aeabi_fadd+0x2e4>)
    16ae:	401a      	ands	r2, r3
    16b0:	085b      	lsrs	r3, r3, #1
    16b2:	400b      	ands	r3, r1
    16b4:	4313      	orrs	r3, r2
    16b6:	e78c      	b.n	15d2 <__aeabi_fadd+0x2e>
    16b8:	1e03      	subs	r3, r0, #0
    16ba:	d1ca      	bne.n	1652 <__aeabi_fadd+0xae>
    16bc:	2000      	movs	r0, #0
    16be:	027b      	lsls	r3, r7, #9
    16c0:	0a5b      	lsrs	r3, r3, #9
    16c2:	b2e4      	uxtb	r4, r4
    16c4:	e796      	b.n	15f4 <__aeabi_fadd+0x50>
    16c6:	3801      	subs	r0, #1
    16c8:	2800      	cmp	r0, #0
    16ca:	d0aa      	beq.n	1622 <__aeabi_fadd+0x7e>
    16cc:	2cff      	cmp	r4, #255	; 0xff
    16ce:	d19d      	bne.n	160c <__aeabi_fadd+0x68>
    16d0:	e77f      	b.n	15d2 <__aeabi_fadd+0x2e>
    16d2:	2a00      	cmp	r2, #0
    16d4:	d100      	bne.n	16d8 <__aeabi_fadd+0x134>
    16d6:	e77c      	b.n	15d2 <__aeabi_fadd+0x2e>
    16d8:	3901      	subs	r1, #1
    16da:	2900      	cmp	r1, #0
    16dc:	d0df      	beq.n	169e <__aeabi_fadd+0xfa>
    16de:	2cff      	cmp	r4, #255	; 0xff
    16e0:	d1d2      	bne.n	1688 <__aeabi_fadd+0xe4>
    16e2:	e776      	b.n	15d2 <__aeabi_fadd+0x2e>
    16e4:	2800      	cmp	r0, #0
    16e6:	d120      	bne.n	172a <__aeabi_fadd+0x186>
    16e8:	1c60      	adds	r0, r4, #1
    16ea:	b2c0      	uxtb	r0, r0
    16ec:	2801      	cmp	r0, #1
    16ee:	dd53      	ble.n	1798 <__aeabi_fadd+0x1f4>
    16f0:	2780      	movs	r7, #128	; 0x80
    16f2:	1a9e      	subs	r6, r3, r2
    16f4:	04ff      	lsls	r7, r7, #19
    16f6:	4037      	ands	r7, r6
    16f8:	d02f      	beq.n	175a <__aeabi_fadd+0x1b6>
    16fa:	1ad6      	subs	r6, r2, r3
    16fc:	000d      	movs	r5, r1
    16fe:	e795      	b.n	162c <__aeabi_fadd+0x88>
    1700:	0028      	movs	r0, r5
    1702:	2300      	movs	r3, #0
    1704:	e776      	b.n	15f4 <__aeabi_fadd+0x50>
    1706:	4b61      	ldr	r3, [pc, #388]	; (188c <__aeabi_fadd+0x2e8>)
    1708:	1a24      	subs	r4, r4, r0
    170a:	4033      	ands	r3, r6
    170c:	e761      	b.n	15d2 <__aeabi_fadd+0x2e>
    170e:	2900      	cmp	r1, #0
    1710:	d14d      	bne.n	17ae <__aeabi_fadd+0x20a>
    1712:	1c61      	adds	r1, r4, #1
    1714:	b2ce      	uxtb	r6, r1
    1716:	2e01      	cmp	r6, #1
    1718:	dd2f      	ble.n	177a <__aeabi_fadd+0x1d6>
    171a:	29ff      	cmp	r1, #255	; 0xff
    171c:	d02a      	beq.n	1774 <__aeabi_fadd+0x1d0>
    171e:	189b      	adds	r3, r3, r2
    1720:	085b      	lsrs	r3, r3, #1
    1722:	000c      	movs	r4, r1
    1724:	e755      	b.n	15d2 <__aeabi_fadd+0x2e>
    1726:	2201      	movs	r2, #1
    1728:	e77b      	b.n	1622 <__aeabi_fadd+0x7e>
    172a:	2c00      	cmp	r4, #0
    172c:	d11b      	bne.n	1766 <__aeabi_fadd+0x1c2>
    172e:	2b00      	cmp	r3, #0
    1730:	d05b      	beq.n	17ea <__aeabi_fadd+0x246>
    1732:	43c0      	mvns	r0, r0
    1734:	2800      	cmp	r0, #0
    1736:	d00c      	beq.n	1752 <__aeabi_fadd+0x1ae>
    1738:	2eff      	cmp	r6, #255	; 0xff
    173a:	d07e      	beq.n	183a <__aeabi_fadd+0x296>
    173c:	281b      	cmp	r0, #27
    173e:	dd00      	ble.n	1742 <__aeabi_fadd+0x19e>
    1740:	e092      	b.n	1868 <__aeabi_fadd+0x2c4>
    1742:	001d      	movs	r5, r3
    1744:	2420      	movs	r4, #32
    1746:	40c5      	lsrs	r5, r0
    1748:	1a20      	subs	r0, r4, r0
    174a:	4083      	lsls	r3, r0
    174c:	1e58      	subs	r0, r3, #1
    174e:	4183      	sbcs	r3, r0
    1750:	432b      	orrs	r3, r5
    1752:	1ad3      	subs	r3, r2, r3
    1754:	0034      	movs	r4, r6
    1756:	000d      	movs	r5, r1
    1758:	e764      	b.n	1624 <__aeabi_fadd+0x80>
    175a:	2e00      	cmp	r6, #0
    175c:	d000      	beq.n	1760 <__aeabi_fadd+0x1bc>
    175e:	e765      	b.n	162c <__aeabi_fadd+0x88>
    1760:	2000      	movs	r0, #0
    1762:	2400      	movs	r4, #0
    1764:	e7ab      	b.n	16be <__aeabi_fadd+0x11a>
    1766:	2eff      	cmp	r6, #255	; 0xff
    1768:	d067      	beq.n	183a <__aeabi_fadd+0x296>
    176a:	2480      	movs	r4, #128	; 0x80
    176c:	04e4      	lsls	r4, r4, #19
    176e:	4240      	negs	r0, r0
    1770:	4323      	orrs	r3, r4
    1772:	e7e3      	b.n	173c <__aeabi_fadd+0x198>
    1774:	24ff      	movs	r4, #255	; 0xff
    1776:	2300      	movs	r3, #0
    1778:	e73c      	b.n	15f4 <__aeabi_fadd+0x50>
    177a:	2c00      	cmp	r4, #0
    177c:	d161      	bne.n	1842 <__aeabi_fadd+0x29e>
    177e:	2b00      	cmp	r3, #0
    1780:	d07e      	beq.n	1880 <__aeabi_fadd+0x2dc>
    1782:	2a00      	cmp	r2, #0
    1784:	d100      	bne.n	1788 <__aeabi_fadd+0x1e4>
    1786:	e724      	b.n	15d2 <__aeabi_fadd+0x2e>
    1788:	189b      	adds	r3, r3, r2
    178a:	015a      	lsls	r2, r3, #5
    178c:	d400      	bmi.n	1790 <__aeabi_fadd+0x1ec>
    178e:	e760      	b.n	1652 <__aeabi_fadd+0xae>
    1790:	4a3e      	ldr	r2, [pc, #248]	; (188c <__aeabi_fadd+0x2e8>)
    1792:	000c      	movs	r4, r1
    1794:	4013      	ands	r3, r2
    1796:	e71c      	b.n	15d2 <__aeabi_fadd+0x2e>
    1798:	2c00      	cmp	r4, #0
    179a:	d11e      	bne.n	17da <__aeabi_fadd+0x236>
    179c:	2b00      	cmp	r3, #0
    179e:	d12f      	bne.n	1800 <__aeabi_fadd+0x25c>
    17a0:	2a00      	cmp	r2, #0
    17a2:	d066      	beq.n	1872 <__aeabi_fadd+0x2ce>
    17a4:	0013      	movs	r3, r2
    17a6:	000d      	movs	r5, r1
    17a8:	e713      	b.n	15d2 <__aeabi_fadd+0x2e>
    17aa:	2201      	movs	r2, #1
    17ac:	e777      	b.n	169e <__aeabi_fadd+0xfa>
    17ae:	2c00      	cmp	r4, #0
    17b0:	d11f      	bne.n	17f2 <__aeabi_fadd+0x24e>
    17b2:	2b00      	cmp	r3, #0
    17b4:	d05a      	beq.n	186c <__aeabi_fadd+0x2c8>
    17b6:	43c9      	mvns	r1, r1
    17b8:	2900      	cmp	r1, #0
    17ba:	d00b      	beq.n	17d4 <__aeabi_fadd+0x230>
    17bc:	2eff      	cmp	r6, #255	; 0xff
    17be:	d050      	beq.n	1862 <__aeabi_fadd+0x2be>
    17c0:	291b      	cmp	r1, #27
    17c2:	dc5f      	bgt.n	1884 <__aeabi_fadd+0x2e0>
    17c4:	001f      	movs	r7, r3
    17c6:	2420      	movs	r4, #32
    17c8:	40cf      	lsrs	r7, r1
    17ca:	1a61      	subs	r1, r4, r1
    17cc:	408b      	lsls	r3, r1
    17ce:	1e59      	subs	r1, r3, #1
    17d0:	418b      	sbcs	r3, r1
    17d2:	433b      	orrs	r3, r7
    17d4:	189b      	adds	r3, r3, r2
    17d6:	0034      	movs	r4, r6
    17d8:	e762      	b.n	16a0 <__aeabi_fadd+0xfc>
    17da:	2b00      	cmp	r3, #0
    17dc:	d11c      	bne.n	1818 <__aeabi_fadd+0x274>
    17de:	2a00      	cmp	r2, #0
    17e0:	d04a      	beq.n	1878 <__aeabi_fadd+0x2d4>
    17e2:	0013      	movs	r3, r2
    17e4:	000d      	movs	r5, r1
    17e6:	24ff      	movs	r4, #255	; 0xff
    17e8:	e6f3      	b.n	15d2 <__aeabi_fadd+0x2e>
    17ea:	0013      	movs	r3, r2
    17ec:	0034      	movs	r4, r6
    17ee:	000d      	movs	r5, r1
    17f0:	e6ef      	b.n	15d2 <__aeabi_fadd+0x2e>
    17f2:	2eff      	cmp	r6, #255	; 0xff
    17f4:	d035      	beq.n	1862 <__aeabi_fadd+0x2be>
    17f6:	2480      	movs	r4, #128	; 0x80
    17f8:	04e4      	lsls	r4, r4, #19
    17fa:	4249      	negs	r1, r1
    17fc:	4323      	orrs	r3, r4
    17fe:	e7df      	b.n	17c0 <__aeabi_fadd+0x21c>
    1800:	2a00      	cmp	r2, #0
    1802:	d100      	bne.n	1806 <__aeabi_fadd+0x262>
    1804:	e6e5      	b.n	15d2 <__aeabi_fadd+0x2e>
    1806:	2780      	movs	r7, #128	; 0x80
    1808:	1a98      	subs	r0, r3, r2
    180a:	04ff      	lsls	r7, r7, #19
    180c:	4007      	ands	r7, r0
    180e:	d100      	bne.n	1812 <__aeabi_fadd+0x26e>
    1810:	e752      	b.n	16b8 <__aeabi_fadd+0x114>
    1812:	1ad3      	subs	r3, r2, r3
    1814:	000d      	movs	r5, r1
    1816:	e6dc      	b.n	15d2 <__aeabi_fadd+0x2e>
    1818:	24ff      	movs	r4, #255	; 0xff
    181a:	2a00      	cmp	r2, #0
    181c:	d100      	bne.n	1820 <__aeabi_fadd+0x27c>
    181e:	e6d8      	b.n	15d2 <__aeabi_fadd+0x2e>
    1820:	2080      	movs	r0, #128	; 0x80
    1822:	08db      	lsrs	r3, r3, #3
    1824:	03c0      	lsls	r0, r0, #15
    1826:	4203      	tst	r3, r0
    1828:	d004      	beq.n	1834 <__aeabi_fadd+0x290>
    182a:	08d2      	lsrs	r2, r2, #3
    182c:	4202      	tst	r2, r0
    182e:	d101      	bne.n	1834 <__aeabi_fadd+0x290>
    1830:	0013      	movs	r3, r2
    1832:	000d      	movs	r5, r1
    1834:	00db      	lsls	r3, r3, #3
    1836:	24ff      	movs	r4, #255	; 0xff
    1838:	e6cb      	b.n	15d2 <__aeabi_fadd+0x2e>
    183a:	0013      	movs	r3, r2
    183c:	24ff      	movs	r4, #255	; 0xff
    183e:	000d      	movs	r5, r1
    1840:	e6c7      	b.n	15d2 <__aeabi_fadd+0x2e>
    1842:	2b00      	cmp	r3, #0
    1844:	d00d      	beq.n	1862 <__aeabi_fadd+0x2be>
    1846:	24ff      	movs	r4, #255	; 0xff
    1848:	2a00      	cmp	r2, #0
    184a:	d100      	bne.n	184e <__aeabi_fadd+0x2aa>
    184c:	e6c1      	b.n	15d2 <__aeabi_fadd+0x2e>
    184e:	2180      	movs	r1, #128	; 0x80
    1850:	08db      	lsrs	r3, r3, #3
    1852:	03c9      	lsls	r1, r1, #15
    1854:	420b      	tst	r3, r1
    1856:	d0ed      	beq.n	1834 <__aeabi_fadd+0x290>
    1858:	08d2      	lsrs	r2, r2, #3
    185a:	420a      	tst	r2, r1
    185c:	d1ea      	bne.n	1834 <__aeabi_fadd+0x290>
    185e:	0013      	movs	r3, r2
    1860:	e7e8      	b.n	1834 <__aeabi_fadd+0x290>
    1862:	0013      	movs	r3, r2
    1864:	24ff      	movs	r4, #255	; 0xff
    1866:	e6b4      	b.n	15d2 <__aeabi_fadd+0x2e>
    1868:	2301      	movs	r3, #1
    186a:	e772      	b.n	1752 <__aeabi_fadd+0x1ae>
    186c:	0013      	movs	r3, r2
    186e:	0034      	movs	r4, r6
    1870:	e6af      	b.n	15d2 <__aeabi_fadd+0x2e>
    1872:	2700      	movs	r7, #0
    1874:	2000      	movs	r0, #0
    1876:	e722      	b.n	16be <__aeabi_fadd+0x11a>
    1878:	2780      	movs	r7, #128	; 0x80
    187a:	2000      	movs	r0, #0
    187c:	03ff      	lsls	r7, r7, #15
    187e:	e6f1      	b.n	1664 <__aeabi_fadd+0xc0>
    1880:	0013      	movs	r3, r2
    1882:	e6a6      	b.n	15d2 <__aeabi_fadd+0x2e>
    1884:	2301      	movs	r3, #1
    1886:	e7a5      	b.n	17d4 <__aeabi_fadd+0x230>
    1888:	7dffffff 	.word	0x7dffffff
    188c:	fbffffff 	.word	0xfbffffff

00001890 <__aeabi_fdiv>:
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	4656      	mov	r6, sl
    1894:	4644      	mov	r4, r8
    1896:	465f      	mov	r7, fp
    1898:	464d      	mov	r5, r9
    189a:	b4f0      	push	{r4, r5, r6, r7}
    189c:	0244      	lsls	r4, r0, #9
    189e:	0046      	lsls	r6, r0, #1
    18a0:	0fc7      	lsrs	r7, r0, #31
    18a2:	b083      	sub	sp, #12
    18a4:	4688      	mov	r8, r1
    18a6:	0a65      	lsrs	r5, r4, #9
    18a8:	0e36      	lsrs	r6, r6, #24
    18aa:	46ba      	mov	sl, r7
    18ac:	d03d      	beq.n	192a <__aeabi_fdiv+0x9a>
    18ae:	2eff      	cmp	r6, #255	; 0xff
    18b0:	d022      	beq.n	18f8 <__aeabi_fdiv+0x68>
    18b2:	2300      	movs	r3, #0
    18b4:	00ec      	lsls	r4, r5, #3
    18b6:	2580      	movs	r5, #128	; 0x80
    18b8:	4699      	mov	r9, r3
    18ba:	469b      	mov	fp, r3
    18bc:	04ed      	lsls	r5, r5, #19
    18be:	4325      	orrs	r5, r4
    18c0:	3e7f      	subs	r6, #127	; 0x7f
    18c2:	4643      	mov	r3, r8
    18c4:	025c      	lsls	r4, r3, #9
    18c6:	0058      	lsls	r0, r3, #1
    18c8:	0fdb      	lsrs	r3, r3, #31
    18ca:	0a64      	lsrs	r4, r4, #9
    18cc:	0e00      	lsrs	r0, r0, #24
    18ce:	4698      	mov	r8, r3
    18d0:	d036      	beq.n	1940 <__aeabi_fdiv+0xb0>
    18d2:	28ff      	cmp	r0, #255	; 0xff
    18d4:	d030      	beq.n	1938 <__aeabi_fdiv+0xa8>
    18d6:	2380      	movs	r3, #128	; 0x80
    18d8:	2100      	movs	r1, #0
    18da:	00e4      	lsls	r4, r4, #3
    18dc:	04db      	lsls	r3, r3, #19
    18de:	431c      	orrs	r4, r3
    18e0:	387f      	subs	r0, #127	; 0x7f
    18e2:	1a30      	subs	r0, r6, r0
    18e4:	9001      	str	r0, [sp, #4]
    18e6:	4648      	mov	r0, r9
    18e8:	4642      	mov	r2, r8
    18ea:	4308      	orrs	r0, r1
    18ec:	4e72      	ldr	r6, [pc, #456]	; (1ab8 <__aeabi_fdiv+0x228>)
    18ee:	0080      	lsls	r0, r0, #2
    18f0:	5830      	ldr	r0, [r6, r0]
    18f2:	407a      	eors	r2, r7
    18f4:	0013      	movs	r3, r2
    18f6:	4687      	mov	pc, r0
    18f8:	2d00      	cmp	r5, #0
    18fa:	d144      	bne.n	1986 <__aeabi_fdiv+0xf6>
    18fc:	2308      	movs	r3, #8
    18fe:	4699      	mov	r9, r3
    1900:	3b06      	subs	r3, #6
    1902:	469b      	mov	fp, r3
    1904:	e7dd      	b.n	18c2 <__aeabi_fdiv+0x32>
    1906:	2201      	movs	r2, #1
    1908:	20ff      	movs	r0, #255	; 0xff
    190a:	2400      	movs	r4, #0
    190c:	401a      	ands	r2, r3
    190e:	0264      	lsls	r4, r4, #9
    1910:	05c3      	lsls	r3, r0, #23
    1912:	0a64      	lsrs	r4, r4, #9
    1914:	07d2      	lsls	r2, r2, #31
    1916:	431c      	orrs	r4, r3
    1918:	4314      	orrs	r4, r2
    191a:	0020      	movs	r0, r4
    191c:	b003      	add	sp, #12
    191e:	bc3c      	pop	{r2, r3, r4, r5}
    1920:	4690      	mov	r8, r2
    1922:	4699      	mov	r9, r3
    1924:	46a2      	mov	sl, r4
    1926:	46ab      	mov	fp, r5
    1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    192a:	2d00      	cmp	r5, #0
    192c:	d120      	bne.n	1970 <__aeabi_fdiv+0xe0>
    192e:	2304      	movs	r3, #4
    1930:	4699      	mov	r9, r3
    1932:	3b03      	subs	r3, #3
    1934:	469b      	mov	fp, r3
    1936:	e7c4      	b.n	18c2 <__aeabi_fdiv+0x32>
    1938:	2c00      	cmp	r4, #0
    193a:	d117      	bne.n	196c <__aeabi_fdiv+0xdc>
    193c:	2102      	movs	r1, #2
    193e:	e002      	b.n	1946 <__aeabi_fdiv+0xb6>
    1940:	2c00      	cmp	r4, #0
    1942:	d10a      	bne.n	195a <__aeabi_fdiv+0xca>
    1944:	2101      	movs	r1, #1
    1946:	1a32      	subs	r2, r6, r0
    1948:	9201      	str	r2, [sp, #4]
    194a:	464a      	mov	r2, r9
    194c:	4643      	mov	r3, r8
    194e:	430a      	orrs	r2, r1
    1950:	485a      	ldr	r0, [pc, #360]	; (1abc <__aeabi_fdiv+0x22c>)
    1952:	0092      	lsls	r2, r2, #2
    1954:	5882      	ldr	r2, [r0, r2]
    1956:	407b      	eors	r3, r7
    1958:	4697      	mov	pc, r2
    195a:	0020      	movs	r0, r4
    195c:	f001 fb60 	bl	3020 <__clzsi2>
    1960:	1f43      	subs	r3, r0, #5
    1962:	3076      	adds	r0, #118	; 0x76
    1964:	409c      	lsls	r4, r3
    1966:	4240      	negs	r0, r0
    1968:	2100      	movs	r1, #0
    196a:	e7ba      	b.n	18e2 <__aeabi_fdiv+0x52>
    196c:	2103      	movs	r1, #3
    196e:	e7b8      	b.n	18e2 <__aeabi_fdiv+0x52>
    1970:	0028      	movs	r0, r5
    1972:	f001 fb55 	bl	3020 <__clzsi2>
    1976:	1f43      	subs	r3, r0, #5
    1978:	409d      	lsls	r5, r3
    197a:	2300      	movs	r3, #0
    197c:	3076      	adds	r0, #118	; 0x76
    197e:	4246      	negs	r6, r0
    1980:	4699      	mov	r9, r3
    1982:	469b      	mov	fp, r3
    1984:	e79d      	b.n	18c2 <__aeabi_fdiv+0x32>
    1986:	230c      	movs	r3, #12
    1988:	4699      	mov	r9, r3
    198a:	3b09      	subs	r3, #9
    198c:	469b      	mov	fp, r3
    198e:	e798      	b.n	18c2 <__aeabi_fdiv+0x32>
    1990:	2480      	movs	r4, #128	; 0x80
    1992:	2200      	movs	r2, #0
    1994:	03e4      	lsls	r4, r4, #15
    1996:	20ff      	movs	r0, #255	; 0xff
    1998:	e7b9      	b.n	190e <__aeabi_fdiv+0x7e>
    199a:	2400      	movs	r4, #0
    199c:	46c2      	mov	sl, r8
    199e:	468b      	mov	fp, r1
    19a0:	465a      	mov	r2, fp
    19a2:	4653      	mov	r3, sl
    19a4:	2a02      	cmp	r2, #2
    19a6:	d0ae      	beq.n	1906 <__aeabi_fdiv+0x76>
    19a8:	2a03      	cmp	r2, #3
    19aa:	d07d      	beq.n	1aa8 <__aeabi_fdiv+0x218>
    19ac:	2a01      	cmp	r2, #1
    19ae:	d131      	bne.n	1a14 <__aeabi_fdiv+0x184>
    19b0:	2201      	movs	r2, #1
    19b2:	2000      	movs	r0, #0
    19b4:	401a      	ands	r2, r3
    19b6:	2400      	movs	r4, #0
    19b8:	e7a9      	b.n	190e <__aeabi_fdiv+0x7e>
    19ba:	2201      	movs	r2, #1
    19bc:	1a10      	subs	r0, r2, r0
    19be:	281b      	cmp	r0, #27
    19c0:	dd56      	ble.n	1a70 <__aeabi_fdiv+0x1e0>
    19c2:	401a      	ands	r2, r3
    19c4:	2000      	movs	r0, #0
    19c6:	2400      	movs	r4, #0
    19c8:	e7a1      	b.n	190e <__aeabi_fdiv+0x7e>
    19ca:	2380      	movs	r3, #128	; 0x80
    19cc:	03db      	lsls	r3, r3, #15
    19ce:	421d      	tst	r5, r3
    19d0:	d14b      	bne.n	1a6a <__aeabi_fdiv+0x1da>
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	03db      	lsls	r3, r3, #15
    19d6:	432b      	orrs	r3, r5
    19d8:	025c      	lsls	r4, r3, #9
    19da:	0a64      	lsrs	r4, r4, #9
    19dc:	003a      	movs	r2, r7
    19de:	20ff      	movs	r0, #255	; 0xff
    19e0:	e795      	b.n	190e <__aeabi_fdiv+0x7e>
    19e2:	016d      	lsls	r5, r5, #5
    19e4:	0160      	lsls	r0, r4, #5
    19e6:	4285      	cmp	r5, r0
    19e8:	d230      	bcs.n	1a4c <__aeabi_fdiv+0x1bc>
    19ea:	9a01      	ldr	r2, [sp, #4]
    19ec:	2400      	movs	r4, #0
    19ee:	3a01      	subs	r2, #1
    19f0:	9201      	str	r2, [sp, #4]
    19f2:	221b      	movs	r2, #27
    19f4:	2701      	movs	r7, #1
    19f6:	0029      	movs	r1, r5
    19f8:	0064      	lsls	r4, r4, #1
    19fa:	006d      	lsls	r5, r5, #1
    19fc:	2900      	cmp	r1, #0
    19fe:	db01      	blt.n	1a04 <__aeabi_fdiv+0x174>
    1a00:	42a8      	cmp	r0, r5
    1a02:	d801      	bhi.n	1a08 <__aeabi_fdiv+0x178>
    1a04:	1a2d      	subs	r5, r5, r0
    1a06:	433c      	orrs	r4, r7
    1a08:	3a01      	subs	r2, #1
    1a0a:	2a00      	cmp	r2, #0
    1a0c:	d1f3      	bne.n	19f6 <__aeabi_fdiv+0x166>
    1a0e:	1e6a      	subs	r2, r5, #1
    1a10:	4195      	sbcs	r5, r2
    1a12:	432c      	orrs	r4, r5
    1a14:	9801      	ldr	r0, [sp, #4]
    1a16:	307f      	adds	r0, #127	; 0x7f
    1a18:	2800      	cmp	r0, #0
    1a1a:	ddce      	ble.n	19ba <__aeabi_fdiv+0x12a>
    1a1c:	0762      	lsls	r2, r4, #29
    1a1e:	d004      	beq.n	1a2a <__aeabi_fdiv+0x19a>
    1a20:	220f      	movs	r2, #15
    1a22:	4022      	ands	r2, r4
    1a24:	2a04      	cmp	r2, #4
    1a26:	d000      	beq.n	1a2a <__aeabi_fdiv+0x19a>
    1a28:	3404      	adds	r4, #4
    1a2a:	0122      	lsls	r2, r4, #4
    1a2c:	d503      	bpl.n	1a36 <__aeabi_fdiv+0x1a6>
    1a2e:	4a24      	ldr	r2, [pc, #144]	; (1ac0 <__aeabi_fdiv+0x230>)
    1a30:	9801      	ldr	r0, [sp, #4]
    1a32:	4014      	ands	r4, r2
    1a34:	3080      	adds	r0, #128	; 0x80
    1a36:	28fe      	cmp	r0, #254	; 0xfe
    1a38:	dd00      	ble.n	1a3c <__aeabi_fdiv+0x1ac>
    1a3a:	e764      	b.n	1906 <__aeabi_fdiv+0x76>
    1a3c:	2201      	movs	r2, #1
    1a3e:	01a4      	lsls	r4, r4, #6
    1a40:	0a64      	lsrs	r4, r4, #9
    1a42:	b2c0      	uxtb	r0, r0
    1a44:	401a      	ands	r2, r3
    1a46:	e762      	b.n	190e <__aeabi_fdiv+0x7e>
    1a48:	002c      	movs	r4, r5
    1a4a:	e7a9      	b.n	19a0 <__aeabi_fdiv+0x110>
    1a4c:	1a2d      	subs	r5, r5, r0
    1a4e:	221a      	movs	r2, #26
    1a50:	2401      	movs	r4, #1
    1a52:	e7cf      	b.n	19f4 <__aeabi_fdiv+0x164>
    1a54:	026b      	lsls	r3, r5, #9
    1a56:	d5bc      	bpl.n	19d2 <__aeabi_fdiv+0x142>
    1a58:	2400      	movs	r4, #0
    1a5a:	2380      	movs	r3, #128	; 0x80
    1a5c:	03db      	lsls	r3, r3, #15
    1a5e:	431c      	orrs	r4, r3
    1a60:	0264      	lsls	r4, r4, #9
    1a62:	0a64      	lsrs	r4, r4, #9
    1a64:	4642      	mov	r2, r8
    1a66:	20ff      	movs	r0, #255	; 0xff
    1a68:	e751      	b.n	190e <__aeabi_fdiv+0x7e>
    1a6a:	421c      	tst	r4, r3
    1a6c:	d1b3      	bne.n	19d6 <__aeabi_fdiv+0x146>
    1a6e:	e7f4      	b.n	1a5a <__aeabi_fdiv+0x1ca>
    1a70:	0021      	movs	r1, r4
    1a72:	2220      	movs	r2, #32
    1a74:	40c1      	lsrs	r1, r0
    1a76:	1a10      	subs	r0, r2, r0
    1a78:	4084      	lsls	r4, r0
    1a7a:	1e62      	subs	r2, r4, #1
    1a7c:	4194      	sbcs	r4, r2
    1a7e:	430c      	orrs	r4, r1
    1a80:	0762      	lsls	r2, r4, #29
    1a82:	d004      	beq.n	1a8e <__aeabi_fdiv+0x1fe>
    1a84:	220f      	movs	r2, #15
    1a86:	4022      	ands	r2, r4
    1a88:	2a04      	cmp	r2, #4
    1a8a:	d000      	beq.n	1a8e <__aeabi_fdiv+0x1fe>
    1a8c:	3404      	adds	r4, #4
    1a8e:	0162      	lsls	r2, r4, #5
    1a90:	d504      	bpl.n	1a9c <__aeabi_fdiv+0x20c>
    1a92:	2201      	movs	r2, #1
    1a94:	2001      	movs	r0, #1
    1a96:	401a      	ands	r2, r3
    1a98:	2400      	movs	r4, #0
    1a9a:	e738      	b.n	190e <__aeabi_fdiv+0x7e>
    1a9c:	2201      	movs	r2, #1
    1a9e:	01a4      	lsls	r4, r4, #6
    1aa0:	0a64      	lsrs	r4, r4, #9
    1aa2:	401a      	ands	r2, r3
    1aa4:	2000      	movs	r0, #0
    1aa6:	e732      	b.n	190e <__aeabi_fdiv+0x7e>
    1aa8:	2380      	movs	r3, #128	; 0x80
    1aaa:	03db      	lsls	r3, r3, #15
    1aac:	431c      	orrs	r4, r3
    1aae:	0264      	lsls	r4, r4, #9
    1ab0:	0a64      	lsrs	r4, r4, #9
    1ab2:	4652      	mov	r2, sl
    1ab4:	20ff      	movs	r0, #255	; 0xff
    1ab6:	e72a      	b.n	190e <__aeabi_fdiv+0x7e>
    1ab8:	000033ec 	.word	0x000033ec
    1abc:	0000342c 	.word	0x0000342c
    1ac0:	f7ffffff 	.word	0xf7ffffff

00001ac4 <__aeabi_fmul>:
    1ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ac6:	4657      	mov	r7, sl
    1ac8:	464e      	mov	r6, r9
    1aca:	4645      	mov	r5, r8
    1acc:	0043      	lsls	r3, r0, #1
    1ace:	b4e0      	push	{r5, r6, r7}
    1ad0:	0246      	lsls	r6, r0, #9
    1ad2:	4688      	mov	r8, r1
    1ad4:	0a76      	lsrs	r6, r6, #9
    1ad6:	0e1f      	lsrs	r7, r3, #24
    1ad8:	0fc4      	lsrs	r4, r0, #31
    1ada:	2f00      	cmp	r7, #0
    1adc:	d047      	beq.n	1b6e <__aeabi_fmul+0xaa>
    1ade:	2fff      	cmp	r7, #255	; 0xff
    1ae0:	d025      	beq.n	1b2e <__aeabi_fmul+0x6a>
    1ae2:	2300      	movs	r3, #0
    1ae4:	2580      	movs	r5, #128	; 0x80
    1ae6:	469a      	mov	sl, r3
    1ae8:	4699      	mov	r9, r3
    1aea:	00f6      	lsls	r6, r6, #3
    1aec:	04ed      	lsls	r5, r5, #19
    1aee:	432e      	orrs	r6, r5
    1af0:	3f7f      	subs	r7, #127	; 0x7f
    1af2:	4643      	mov	r3, r8
    1af4:	4642      	mov	r2, r8
    1af6:	025d      	lsls	r5, r3, #9
    1af8:	0fd2      	lsrs	r2, r2, #31
    1afa:	005b      	lsls	r3, r3, #1
    1afc:	0a6d      	lsrs	r5, r5, #9
    1afe:	0e1b      	lsrs	r3, r3, #24
    1b00:	4690      	mov	r8, r2
    1b02:	d040      	beq.n	1b86 <__aeabi_fmul+0xc2>
    1b04:	2bff      	cmp	r3, #255	; 0xff
    1b06:	d039      	beq.n	1b7c <__aeabi_fmul+0xb8>
    1b08:	2280      	movs	r2, #128	; 0x80
    1b0a:	2000      	movs	r0, #0
    1b0c:	00ed      	lsls	r5, r5, #3
    1b0e:	04d2      	lsls	r2, r2, #19
    1b10:	4315      	orrs	r5, r2
    1b12:	3b7f      	subs	r3, #127	; 0x7f
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	4642      	mov	r2, r8
    1b18:	4657      	mov	r7, sl
    1b1a:	1c59      	adds	r1, r3, #1
    1b1c:	4062      	eors	r2, r4
    1b1e:	468c      	mov	ip, r1
    1b20:	4307      	orrs	r7, r0
    1b22:	2f0f      	cmp	r7, #15
    1b24:	d85c      	bhi.n	1be0 <__aeabi_fmul+0x11c>
    1b26:	496f      	ldr	r1, [pc, #444]	; (1ce4 <__aeabi_fmul+0x220>)
    1b28:	00bf      	lsls	r7, r7, #2
    1b2a:	59c9      	ldr	r1, [r1, r7]
    1b2c:	468f      	mov	pc, r1
    1b2e:	2e00      	cmp	r6, #0
    1b30:	d145      	bne.n	1bbe <__aeabi_fmul+0xfa>
    1b32:	2308      	movs	r3, #8
    1b34:	469a      	mov	sl, r3
    1b36:	3b06      	subs	r3, #6
    1b38:	4699      	mov	r9, r3
    1b3a:	e7da      	b.n	1af2 <__aeabi_fmul+0x2e>
    1b3c:	4642      	mov	r2, r8
    1b3e:	2802      	cmp	r0, #2
    1b40:	d02d      	beq.n	1b9e <__aeabi_fmul+0xda>
    1b42:	2803      	cmp	r0, #3
    1b44:	d100      	bne.n	1b48 <__aeabi_fmul+0x84>
    1b46:	e0c3      	b.n	1cd0 <__aeabi_fmul+0x20c>
    1b48:	2801      	cmp	r0, #1
    1b4a:	d000      	beq.n	1b4e <__aeabi_fmul+0x8a>
    1b4c:	e0a2      	b.n	1c94 <__aeabi_fmul+0x1d0>
    1b4e:	2500      	movs	r5, #0
    1b50:	2600      	movs	r6, #0
    1b52:	4002      	ands	r2, r0
    1b54:	b2d4      	uxtb	r4, r2
    1b56:	0276      	lsls	r6, r6, #9
    1b58:	05ed      	lsls	r5, r5, #23
    1b5a:	0a76      	lsrs	r6, r6, #9
    1b5c:	432e      	orrs	r6, r5
    1b5e:	07e4      	lsls	r4, r4, #31
    1b60:	4326      	orrs	r6, r4
    1b62:	0030      	movs	r0, r6
    1b64:	bc1c      	pop	{r2, r3, r4}
    1b66:	4690      	mov	r8, r2
    1b68:	4699      	mov	r9, r3
    1b6a:	46a2      	mov	sl, r4
    1b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b6e:	2e00      	cmp	r6, #0
    1b70:	d11a      	bne.n	1ba8 <__aeabi_fmul+0xe4>
    1b72:	2304      	movs	r3, #4
    1b74:	469a      	mov	sl, r3
    1b76:	3b03      	subs	r3, #3
    1b78:	4699      	mov	r9, r3
    1b7a:	e7ba      	b.n	1af2 <__aeabi_fmul+0x2e>
    1b7c:	002a      	movs	r2, r5
    1b7e:	1e51      	subs	r1, r2, #1
    1b80:	418a      	sbcs	r2, r1
    1b82:	1c90      	adds	r0, r2, #2
    1b84:	e7c6      	b.n	1b14 <__aeabi_fmul+0x50>
    1b86:	2001      	movs	r0, #1
    1b88:	2d00      	cmp	r5, #0
    1b8a:	d0c3      	beq.n	1b14 <__aeabi_fmul+0x50>
    1b8c:	0028      	movs	r0, r5
    1b8e:	f001 fa47 	bl	3020 <__clzsi2>
    1b92:	1f43      	subs	r3, r0, #5
    1b94:	3076      	adds	r0, #118	; 0x76
    1b96:	409d      	lsls	r5, r3
    1b98:	4243      	negs	r3, r0
    1b9a:	2000      	movs	r0, #0
    1b9c:	e7ba      	b.n	1b14 <__aeabi_fmul+0x50>
    1b9e:	2401      	movs	r4, #1
    1ba0:	25ff      	movs	r5, #255	; 0xff
    1ba2:	4014      	ands	r4, r2
    1ba4:	2600      	movs	r6, #0
    1ba6:	e7d6      	b.n	1b56 <__aeabi_fmul+0x92>
    1ba8:	0030      	movs	r0, r6
    1baa:	f001 fa39 	bl	3020 <__clzsi2>
    1bae:	1f43      	subs	r3, r0, #5
    1bb0:	409e      	lsls	r6, r3
    1bb2:	2300      	movs	r3, #0
    1bb4:	3076      	adds	r0, #118	; 0x76
    1bb6:	4247      	negs	r7, r0
    1bb8:	469a      	mov	sl, r3
    1bba:	4699      	mov	r9, r3
    1bbc:	e799      	b.n	1af2 <__aeabi_fmul+0x2e>
    1bbe:	230c      	movs	r3, #12
    1bc0:	469a      	mov	sl, r3
    1bc2:	3b09      	subs	r3, #9
    1bc4:	4699      	mov	r9, r3
    1bc6:	e794      	b.n	1af2 <__aeabi_fmul+0x2e>
    1bc8:	2680      	movs	r6, #128	; 0x80
    1bca:	2400      	movs	r4, #0
    1bcc:	03f6      	lsls	r6, r6, #15
    1bce:	25ff      	movs	r5, #255	; 0xff
    1bd0:	e7c1      	b.n	1b56 <__aeabi_fmul+0x92>
    1bd2:	0035      	movs	r5, r6
    1bd4:	4648      	mov	r0, r9
    1bd6:	e7b2      	b.n	1b3e <__aeabi_fmul+0x7a>
    1bd8:	0035      	movs	r5, r6
    1bda:	0022      	movs	r2, r4
    1bdc:	4648      	mov	r0, r9
    1bde:	e7ae      	b.n	1b3e <__aeabi_fmul+0x7a>
    1be0:	0429      	lsls	r1, r5, #16
    1be2:	0c09      	lsrs	r1, r1, #16
    1be4:	0008      	movs	r0, r1
    1be6:	0c37      	lsrs	r7, r6, #16
    1be8:	0436      	lsls	r6, r6, #16
    1bea:	0c36      	lsrs	r6, r6, #16
    1bec:	0c2c      	lsrs	r4, r5, #16
    1bee:	4379      	muls	r1, r7
    1bf0:	4370      	muls	r0, r6
    1bf2:	4367      	muls	r7, r4
    1bf4:	4374      	muls	r4, r6
    1bf6:	0c06      	lsrs	r6, r0, #16
    1bf8:	1864      	adds	r4, r4, r1
    1bfa:	1936      	adds	r6, r6, r4
    1bfc:	42b1      	cmp	r1, r6
    1bfe:	d903      	bls.n	1c08 <__aeabi_fmul+0x144>
    1c00:	2180      	movs	r1, #128	; 0x80
    1c02:	0249      	lsls	r1, r1, #9
    1c04:	4688      	mov	r8, r1
    1c06:	4447      	add	r7, r8
    1c08:	0400      	lsls	r0, r0, #16
    1c0a:	0c00      	lsrs	r0, r0, #16
    1c0c:	0431      	lsls	r1, r6, #16
    1c0e:	1809      	adds	r1, r1, r0
    1c10:	018d      	lsls	r5, r1, #6
    1c12:	1e68      	subs	r0, r5, #1
    1c14:	4185      	sbcs	r5, r0
    1c16:	0e89      	lsrs	r1, r1, #26
    1c18:	4329      	orrs	r1, r5
    1c1a:	0c35      	lsrs	r5, r6, #16
    1c1c:	19ed      	adds	r5, r5, r7
    1c1e:	01ad      	lsls	r5, r5, #6
    1c20:	430d      	orrs	r5, r1
    1c22:	0129      	lsls	r1, r5, #4
    1c24:	d504      	bpl.n	1c30 <__aeabi_fmul+0x16c>
    1c26:	2301      	movs	r3, #1
    1c28:	0869      	lsrs	r1, r5, #1
    1c2a:	401d      	ands	r5, r3
    1c2c:	4663      	mov	r3, ip
    1c2e:	430d      	orrs	r5, r1
    1c30:	0019      	movs	r1, r3
    1c32:	317f      	adds	r1, #127	; 0x7f
    1c34:	2900      	cmp	r1, #0
    1c36:	dd25      	ble.n	1c84 <__aeabi_fmul+0x1c0>
    1c38:	0768      	lsls	r0, r5, #29
    1c3a:	d004      	beq.n	1c46 <__aeabi_fmul+0x182>
    1c3c:	200f      	movs	r0, #15
    1c3e:	4028      	ands	r0, r5
    1c40:	2804      	cmp	r0, #4
    1c42:	d000      	beq.n	1c46 <__aeabi_fmul+0x182>
    1c44:	3504      	adds	r5, #4
    1c46:	0128      	lsls	r0, r5, #4
    1c48:	d503      	bpl.n	1c52 <__aeabi_fmul+0x18e>
    1c4a:	4927      	ldr	r1, [pc, #156]	; (1ce8 <__aeabi_fmul+0x224>)
    1c4c:	3380      	adds	r3, #128	; 0x80
    1c4e:	400d      	ands	r5, r1
    1c50:	0019      	movs	r1, r3
    1c52:	29fe      	cmp	r1, #254	; 0xfe
    1c54:	dca3      	bgt.n	1b9e <__aeabi_fmul+0xda>
    1c56:	2401      	movs	r4, #1
    1c58:	01ad      	lsls	r5, r5, #6
    1c5a:	0a6e      	lsrs	r6, r5, #9
    1c5c:	4014      	ands	r4, r2
    1c5e:	b2cd      	uxtb	r5, r1
    1c60:	e779      	b.n	1b56 <__aeabi_fmul+0x92>
    1c62:	2080      	movs	r0, #128	; 0x80
    1c64:	03c0      	lsls	r0, r0, #15
    1c66:	4206      	tst	r6, r0
    1c68:	d007      	beq.n	1c7a <__aeabi_fmul+0x1b6>
    1c6a:	4205      	tst	r5, r0
    1c6c:	d105      	bne.n	1c7a <__aeabi_fmul+0x1b6>
    1c6e:	4328      	orrs	r0, r5
    1c70:	0246      	lsls	r6, r0, #9
    1c72:	0a76      	lsrs	r6, r6, #9
    1c74:	4644      	mov	r4, r8
    1c76:	25ff      	movs	r5, #255	; 0xff
    1c78:	e76d      	b.n	1b56 <__aeabi_fmul+0x92>
    1c7a:	4306      	orrs	r6, r0
    1c7c:	0276      	lsls	r6, r6, #9
    1c7e:	0a76      	lsrs	r6, r6, #9
    1c80:	25ff      	movs	r5, #255	; 0xff
    1c82:	e768      	b.n	1b56 <__aeabi_fmul+0x92>
    1c84:	2401      	movs	r4, #1
    1c86:	1a61      	subs	r1, r4, r1
    1c88:	291b      	cmp	r1, #27
    1c8a:	dd05      	ble.n	1c98 <__aeabi_fmul+0x1d4>
    1c8c:	4014      	ands	r4, r2
    1c8e:	2500      	movs	r5, #0
    1c90:	2600      	movs	r6, #0
    1c92:	e760      	b.n	1b56 <__aeabi_fmul+0x92>
    1c94:	4663      	mov	r3, ip
    1c96:	e7cb      	b.n	1c30 <__aeabi_fmul+0x16c>
    1c98:	002e      	movs	r6, r5
    1c9a:	2320      	movs	r3, #32
    1c9c:	40ce      	lsrs	r6, r1
    1c9e:	1a59      	subs	r1, r3, r1
    1ca0:	408d      	lsls	r5, r1
    1ca2:	1e6b      	subs	r3, r5, #1
    1ca4:	419d      	sbcs	r5, r3
    1ca6:	432e      	orrs	r6, r5
    1ca8:	0773      	lsls	r3, r6, #29
    1caa:	d004      	beq.n	1cb6 <__aeabi_fmul+0x1f2>
    1cac:	230f      	movs	r3, #15
    1cae:	4033      	ands	r3, r6
    1cb0:	2b04      	cmp	r3, #4
    1cb2:	d000      	beq.n	1cb6 <__aeabi_fmul+0x1f2>
    1cb4:	3604      	adds	r6, #4
    1cb6:	0173      	lsls	r3, r6, #5
    1cb8:	d504      	bpl.n	1cc4 <__aeabi_fmul+0x200>
    1cba:	2401      	movs	r4, #1
    1cbc:	2501      	movs	r5, #1
    1cbe:	4014      	ands	r4, r2
    1cc0:	2600      	movs	r6, #0
    1cc2:	e748      	b.n	1b56 <__aeabi_fmul+0x92>
    1cc4:	2401      	movs	r4, #1
    1cc6:	01b6      	lsls	r6, r6, #6
    1cc8:	0a76      	lsrs	r6, r6, #9
    1cca:	4014      	ands	r4, r2
    1ccc:	2500      	movs	r5, #0
    1cce:	e742      	b.n	1b56 <__aeabi_fmul+0x92>
    1cd0:	2680      	movs	r6, #128	; 0x80
    1cd2:	2401      	movs	r4, #1
    1cd4:	03f6      	lsls	r6, r6, #15
    1cd6:	432e      	orrs	r6, r5
    1cd8:	0276      	lsls	r6, r6, #9
    1cda:	0a76      	lsrs	r6, r6, #9
    1cdc:	4014      	ands	r4, r2
    1cde:	25ff      	movs	r5, #255	; 0xff
    1ce0:	e739      	b.n	1b56 <__aeabi_fmul+0x92>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	0000346c 	.word	0x0000346c
    1ce8:	f7ffffff 	.word	0xf7ffffff

00001cec <__aeabi_fsub>:
    1cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cee:	024a      	lsls	r2, r1, #9
    1cf0:	004e      	lsls	r6, r1, #1
    1cf2:	0243      	lsls	r3, r0, #9
    1cf4:	0044      	lsls	r4, r0, #1
    1cf6:	0e24      	lsrs	r4, r4, #24
    1cf8:	0fc5      	lsrs	r5, r0, #31
    1cfa:	099b      	lsrs	r3, r3, #6
    1cfc:	0e36      	lsrs	r6, r6, #24
    1cfe:	0fc9      	lsrs	r1, r1, #31
    1d00:	0992      	lsrs	r2, r2, #6
    1d02:	2eff      	cmp	r6, #255	; 0xff
    1d04:	d100      	bne.n	1d08 <__aeabi_fsub+0x1c>
    1d06:	e083      	b.n	1e10 <__aeabi_fsub+0x124>
    1d08:	2001      	movs	r0, #1
    1d0a:	4041      	eors	r1, r0
    1d0c:	1ba0      	subs	r0, r4, r6
    1d0e:	42a9      	cmp	r1, r5
    1d10:	d05c      	beq.n	1dcc <__aeabi_fsub+0xe0>
    1d12:	2800      	cmp	r0, #0
    1d14:	dc00      	bgt.n	1d18 <__aeabi_fsub+0x2c>
    1d16:	e095      	b.n	1e44 <__aeabi_fsub+0x158>
    1d18:	2e00      	cmp	r6, #0
    1d1a:	d11c      	bne.n	1d56 <__aeabi_fsub+0x6a>
    1d1c:	2a00      	cmp	r2, #0
    1d1e:	d000      	beq.n	1d22 <__aeabi_fsub+0x36>
    1d20:	e081      	b.n	1e26 <__aeabi_fsub+0x13a>
    1d22:	075a      	lsls	r2, r3, #29
    1d24:	d004      	beq.n	1d30 <__aeabi_fsub+0x44>
    1d26:	220f      	movs	r2, #15
    1d28:	401a      	ands	r2, r3
    1d2a:	2a04      	cmp	r2, #4
    1d2c:	d000      	beq.n	1d30 <__aeabi_fsub+0x44>
    1d2e:	3304      	adds	r3, #4
    1d30:	015a      	lsls	r2, r3, #5
    1d32:	d53b      	bpl.n	1dac <__aeabi_fsub+0xc0>
    1d34:	3401      	adds	r4, #1
    1d36:	2cff      	cmp	r4, #255	; 0xff
    1d38:	d100      	bne.n	1d3c <__aeabi_fsub+0x50>
    1d3a:	e091      	b.n	1e60 <__aeabi_fsub+0x174>
    1d3c:	2001      	movs	r0, #1
    1d3e:	019b      	lsls	r3, r3, #6
    1d40:	0a5b      	lsrs	r3, r3, #9
    1d42:	b2e4      	uxtb	r4, r4
    1d44:	4005      	ands	r5, r0
    1d46:	025b      	lsls	r3, r3, #9
    1d48:	05e4      	lsls	r4, r4, #23
    1d4a:	0a5b      	lsrs	r3, r3, #9
    1d4c:	07ed      	lsls	r5, r5, #31
    1d4e:	4323      	orrs	r3, r4
    1d50:	432b      	orrs	r3, r5
    1d52:	0018      	movs	r0, r3
    1d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d56:	2cff      	cmp	r4, #255	; 0xff
    1d58:	d0e3      	beq.n	1d22 <__aeabi_fsub+0x36>
    1d5a:	2180      	movs	r1, #128	; 0x80
    1d5c:	04c9      	lsls	r1, r1, #19
    1d5e:	430a      	orrs	r2, r1
    1d60:	281b      	cmp	r0, #27
    1d62:	dd00      	ble.n	1d66 <__aeabi_fsub+0x7a>
    1d64:	e090      	b.n	1e88 <__aeabi_fsub+0x19c>
    1d66:	0016      	movs	r6, r2
    1d68:	2120      	movs	r1, #32
    1d6a:	40c6      	lsrs	r6, r0
    1d6c:	1a08      	subs	r0, r1, r0
    1d6e:	4082      	lsls	r2, r0
    1d70:	1e51      	subs	r1, r2, #1
    1d72:	418a      	sbcs	r2, r1
    1d74:	4332      	orrs	r2, r6
    1d76:	1a9b      	subs	r3, r3, r2
    1d78:	015a      	lsls	r2, r3, #5
    1d7a:	d515      	bpl.n	1da8 <__aeabi_fsub+0xbc>
    1d7c:	019b      	lsls	r3, r3, #6
    1d7e:	099e      	lsrs	r6, r3, #6
    1d80:	0030      	movs	r0, r6
    1d82:	f001 f94d 	bl	3020 <__clzsi2>
    1d86:	3805      	subs	r0, #5
    1d88:	4086      	lsls	r6, r0
    1d8a:	4284      	cmp	r4, r0
    1d8c:	dc6c      	bgt.n	1e68 <__aeabi_fsub+0x17c>
    1d8e:	1b04      	subs	r4, r0, r4
    1d90:	0033      	movs	r3, r6
    1d92:	2020      	movs	r0, #32
    1d94:	3401      	adds	r4, #1
    1d96:	40e3      	lsrs	r3, r4
    1d98:	1b04      	subs	r4, r0, r4
    1d9a:	40a6      	lsls	r6, r4
    1d9c:	1e72      	subs	r2, r6, #1
    1d9e:	4196      	sbcs	r6, r2
    1da0:	2400      	movs	r4, #0
    1da2:	4333      	orrs	r3, r6
    1da4:	e7bd      	b.n	1d22 <__aeabi_fsub+0x36>
    1da6:	000d      	movs	r5, r1
    1da8:	075a      	lsls	r2, r3, #29
    1daa:	d1bc      	bne.n	1d26 <__aeabi_fsub+0x3a>
    1dac:	08df      	lsrs	r7, r3, #3
    1dae:	2301      	movs	r3, #1
    1db0:	401d      	ands	r5, r3
    1db2:	2cff      	cmp	r4, #255	; 0xff
    1db4:	d133      	bne.n	1e1e <__aeabi_fsub+0x132>
    1db6:	2f00      	cmp	r7, #0
    1db8:	d100      	bne.n	1dbc <__aeabi_fsub+0xd0>
    1dba:	e090      	b.n	1ede <__aeabi_fsub+0x1f2>
    1dbc:	2280      	movs	r2, #128	; 0x80
    1dbe:	03d2      	lsls	r2, r2, #15
    1dc0:	0013      	movs	r3, r2
    1dc2:	433b      	orrs	r3, r7
    1dc4:	025b      	lsls	r3, r3, #9
    1dc6:	0a5b      	lsrs	r3, r3, #9
    1dc8:	24ff      	movs	r4, #255	; 0xff
    1dca:	e7bc      	b.n	1d46 <__aeabi_fsub+0x5a>
    1dcc:	2800      	cmp	r0, #0
    1dce:	dd4f      	ble.n	1e70 <__aeabi_fsub+0x184>
    1dd0:	2e00      	cmp	r6, #0
    1dd2:	d02e      	beq.n	1e32 <__aeabi_fsub+0x146>
    1dd4:	2cff      	cmp	r4, #255	; 0xff
    1dd6:	d0a4      	beq.n	1d22 <__aeabi_fsub+0x36>
    1dd8:	2580      	movs	r5, #128	; 0x80
    1dda:	04ed      	lsls	r5, r5, #19
    1ddc:	432a      	orrs	r2, r5
    1dde:	281b      	cmp	r0, #27
    1de0:	dd00      	ble.n	1de4 <__aeabi_fsub+0xf8>
    1de2:	e097      	b.n	1f14 <__aeabi_fsub+0x228>
    1de4:	0016      	movs	r6, r2
    1de6:	2520      	movs	r5, #32
    1de8:	40c6      	lsrs	r6, r0
    1dea:	1a28      	subs	r0, r5, r0
    1dec:	4082      	lsls	r2, r0
    1dee:	1e50      	subs	r0, r2, #1
    1df0:	4182      	sbcs	r2, r0
    1df2:	4332      	orrs	r2, r6
    1df4:	189b      	adds	r3, r3, r2
    1df6:	015a      	lsls	r2, r3, #5
    1df8:	d5d5      	bpl.n	1da6 <__aeabi_fsub+0xba>
    1dfa:	3401      	adds	r4, #1
    1dfc:	2cff      	cmp	r4, #255	; 0xff
    1dfe:	d06d      	beq.n	1edc <__aeabi_fsub+0x1f0>
    1e00:	2201      	movs	r2, #1
    1e02:	487b      	ldr	r0, [pc, #492]	; (1ff0 <__aeabi_fsub+0x304>)
    1e04:	401a      	ands	r2, r3
    1e06:	085b      	lsrs	r3, r3, #1
    1e08:	4003      	ands	r3, r0
    1e0a:	4313      	orrs	r3, r2
    1e0c:	000d      	movs	r5, r1
    1e0e:	e788      	b.n	1d22 <__aeabi_fsub+0x36>
    1e10:	2a00      	cmp	r2, #0
    1e12:	d000      	beq.n	1e16 <__aeabi_fsub+0x12a>
    1e14:	e77a      	b.n	1d0c <__aeabi_fsub+0x20>
    1e16:	e777      	b.n	1d08 <__aeabi_fsub+0x1c>
    1e18:	1e03      	subs	r3, r0, #0
    1e1a:	d1c5      	bne.n	1da8 <__aeabi_fsub+0xbc>
    1e1c:	2500      	movs	r5, #0
    1e1e:	027b      	lsls	r3, r7, #9
    1e20:	0a5b      	lsrs	r3, r3, #9
    1e22:	b2e4      	uxtb	r4, r4
    1e24:	e78f      	b.n	1d46 <__aeabi_fsub+0x5a>
    1e26:	3801      	subs	r0, #1
    1e28:	2800      	cmp	r0, #0
    1e2a:	d0a4      	beq.n	1d76 <__aeabi_fsub+0x8a>
    1e2c:	2cff      	cmp	r4, #255	; 0xff
    1e2e:	d197      	bne.n	1d60 <__aeabi_fsub+0x74>
    1e30:	e777      	b.n	1d22 <__aeabi_fsub+0x36>
    1e32:	2a00      	cmp	r2, #0
    1e34:	d100      	bne.n	1e38 <__aeabi_fsub+0x14c>
    1e36:	e774      	b.n	1d22 <__aeabi_fsub+0x36>
    1e38:	3801      	subs	r0, #1
    1e3a:	2800      	cmp	r0, #0
    1e3c:	d0da      	beq.n	1df4 <__aeabi_fsub+0x108>
    1e3e:	2cff      	cmp	r4, #255	; 0xff
    1e40:	d1cd      	bne.n	1dde <__aeabi_fsub+0xf2>
    1e42:	e76e      	b.n	1d22 <__aeabi_fsub+0x36>
    1e44:	2800      	cmp	r0, #0
    1e46:	d121      	bne.n	1e8c <__aeabi_fsub+0x1a0>
    1e48:	1c60      	adds	r0, r4, #1
    1e4a:	b2c0      	uxtb	r0, r0
    1e4c:	2801      	cmp	r0, #1
    1e4e:	dd58      	ble.n	1f02 <__aeabi_fsub+0x216>
    1e50:	2780      	movs	r7, #128	; 0x80
    1e52:	1a9e      	subs	r6, r3, r2
    1e54:	04ff      	lsls	r7, r7, #19
    1e56:	4037      	ands	r7, r6
    1e58:	d02f      	beq.n	1eba <__aeabi_fsub+0x1ce>
    1e5a:	1ad6      	subs	r6, r2, r3
    1e5c:	000d      	movs	r5, r1
    1e5e:	e78f      	b.n	1d80 <__aeabi_fsub+0x94>
    1e60:	2301      	movs	r3, #1
    1e62:	401d      	ands	r5, r3
    1e64:	2300      	movs	r3, #0
    1e66:	e76e      	b.n	1d46 <__aeabi_fsub+0x5a>
    1e68:	4b62      	ldr	r3, [pc, #392]	; (1ff4 <__aeabi_fsub+0x308>)
    1e6a:	1a24      	subs	r4, r4, r0
    1e6c:	4033      	ands	r3, r6
    1e6e:	e758      	b.n	1d22 <__aeabi_fsub+0x36>
    1e70:	2800      	cmp	r0, #0
    1e72:	d151      	bne.n	1f18 <__aeabi_fsub+0x22c>
    1e74:	1c60      	adds	r0, r4, #1
    1e76:	b2c6      	uxtb	r6, r0
    1e78:	2e01      	cmp	r6, #1
    1e7a:	dd33      	ble.n	1ee4 <__aeabi_fsub+0x1f8>
    1e7c:	28ff      	cmp	r0, #255	; 0xff
    1e7e:	d02d      	beq.n	1edc <__aeabi_fsub+0x1f0>
    1e80:	189b      	adds	r3, r3, r2
    1e82:	085b      	lsrs	r3, r3, #1
    1e84:	0004      	movs	r4, r0
    1e86:	e74c      	b.n	1d22 <__aeabi_fsub+0x36>
    1e88:	2201      	movs	r2, #1
    1e8a:	e774      	b.n	1d76 <__aeabi_fsub+0x8a>
    1e8c:	2c00      	cmp	r4, #0
    1e8e:	d01a      	beq.n	1ec6 <__aeabi_fsub+0x1da>
    1e90:	2eff      	cmp	r6, #255	; 0xff
    1e92:	d01f      	beq.n	1ed4 <__aeabi_fsub+0x1e8>
    1e94:	2480      	movs	r4, #128	; 0x80
    1e96:	04e4      	lsls	r4, r4, #19
    1e98:	4240      	negs	r0, r0
    1e9a:	4323      	orrs	r3, r4
    1e9c:	281b      	cmp	r0, #27
    1e9e:	dd00      	ble.n	1ea2 <__aeabi_fsub+0x1b6>
    1ea0:	e096      	b.n	1fd0 <__aeabi_fsub+0x2e4>
    1ea2:	001d      	movs	r5, r3
    1ea4:	2420      	movs	r4, #32
    1ea6:	40c5      	lsrs	r5, r0
    1ea8:	1a20      	subs	r0, r4, r0
    1eaa:	4083      	lsls	r3, r0
    1eac:	1e58      	subs	r0, r3, #1
    1eae:	4183      	sbcs	r3, r0
    1eb0:	432b      	orrs	r3, r5
    1eb2:	1ad3      	subs	r3, r2, r3
    1eb4:	0034      	movs	r4, r6
    1eb6:	000d      	movs	r5, r1
    1eb8:	e75e      	b.n	1d78 <__aeabi_fsub+0x8c>
    1eba:	2e00      	cmp	r6, #0
    1ebc:	d000      	beq.n	1ec0 <__aeabi_fsub+0x1d4>
    1ebe:	e75f      	b.n	1d80 <__aeabi_fsub+0x94>
    1ec0:	2500      	movs	r5, #0
    1ec2:	2400      	movs	r4, #0
    1ec4:	e7ab      	b.n	1e1e <__aeabi_fsub+0x132>
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d044      	beq.n	1f54 <__aeabi_fsub+0x268>
    1eca:	43c0      	mvns	r0, r0
    1ecc:	2800      	cmp	r0, #0
    1ece:	d0f0      	beq.n	1eb2 <__aeabi_fsub+0x1c6>
    1ed0:	2eff      	cmp	r6, #255	; 0xff
    1ed2:	d1e3      	bne.n	1e9c <__aeabi_fsub+0x1b0>
    1ed4:	0013      	movs	r3, r2
    1ed6:	24ff      	movs	r4, #255	; 0xff
    1ed8:	000d      	movs	r5, r1
    1eda:	e722      	b.n	1d22 <__aeabi_fsub+0x36>
    1edc:	000d      	movs	r5, r1
    1ede:	24ff      	movs	r4, #255	; 0xff
    1ee0:	2300      	movs	r3, #0
    1ee2:	e730      	b.n	1d46 <__aeabi_fsub+0x5a>
    1ee4:	2c00      	cmp	r4, #0
    1ee6:	d15d      	bne.n	1fa4 <__aeabi_fsub+0x2b8>
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d07d      	beq.n	1fe8 <__aeabi_fsub+0x2fc>
    1eec:	2a00      	cmp	r2, #0
    1eee:	d100      	bne.n	1ef2 <__aeabi_fsub+0x206>
    1ef0:	e717      	b.n	1d22 <__aeabi_fsub+0x36>
    1ef2:	189b      	adds	r3, r3, r2
    1ef4:	015a      	lsls	r2, r3, #5
    1ef6:	d400      	bmi.n	1efa <__aeabi_fsub+0x20e>
    1ef8:	e756      	b.n	1da8 <__aeabi_fsub+0xbc>
    1efa:	4a3e      	ldr	r2, [pc, #248]	; (1ff4 <__aeabi_fsub+0x308>)
    1efc:	0004      	movs	r4, r0
    1efe:	4013      	ands	r3, r2
    1f00:	e70f      	b.n	1d22 <__aeabi_fsub+0x36>
    1f02:	2c00      	cmp	r4, #0
    1f04:	d11e      	bne.n	1f44 <__aeabi_fsub+0x258>
    1f06:	2b00      	cmp	r3, #0
    1f08:	d12f      	bne.n	1f6a <__aeabi_fsub+0x27e>
    1f0a:	2a00      	cmp	r2, #0
    1f0c:	d065      	beq.n	1fda <__aeabi_fsub+0x2ee>
    1f0e:	0013      	movs	r3, r2
    1f10:	000d      	movs	r5, r1
    1f12:	e706      	b.n	1d22 <__aeabi_fsub+0x36>
    1f14:	2201      	movs	r2, #1
    1f16:	e76d      	b.n	1df4 <__aeabi_fsub+0x108>
    1f18:	2c00      	cmp	r4, #0
    1f1a:	d11f      	bne.n	1f5c <__aeabi_fsub+0x270>
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d059      	beq.n	1fd4 <__aeabi_fsub+0x2e8>
    1f20:	43c0      	mvns	r0, r0
    1f22:	2800      	cmp	r0, #0
    1f24:	d00b      	beq.n	1f3e <__aeabi_fsub+0x252>
    1f26:	2eff      	cmp	r6, #255	; 0xff
    1f28:	d04f      	beq.n	1fca <__aeabi_fsub+0x2de>
    1f2a:	281b      	cmp	r0, #27
    1f2c:	dc5e      	bgt.n	1fec <__aeabi_fsub+0x300>
    1f2e:	001d      	movs	r5, r3
    1f30:	2420      	movs	r4, #32
    1f32:	40c5      	lsrs	r5, r0
    1f34:	1a20      	subs	r0, r4, r0
    1f36:	4083      	lsls	r3, r0
    1f38:	1e58      	subs	r0, r3, #1
    1f3a:	4183      	sbcs	r3, r0
    1f3c:	432b      	orrs	r3, r5
    1f3e:	189b      	adds	r3, r3, r2
    1f40:	0034      	movs	r4, r6
    1f42:	e758      	b.n	1df6 <__aeabi_fsub+0x10a>
    1f44:	2b00      	cmp	r3, #0
    1f46:	d11c      	bne.n	1f82 <__aeabi_fsub+0x296>
    1f48:	2a00      	cmp	r2, #0
    1f4a:	d049      	beq.n	1fe0 <__aeabi_fsub+0x2f4>
    1f4c:	0013      	movs	r3, r2
    1f4e:	000d      	movs	r5, r1
    1f50:	24ff      	movs	r4, #255	; 0xff
    1f52:	e6e6      	b.n	1d22 <__aeabi_fsub+0x36>
    1f54:	0013      	movs	r3, r2
    1f56:	0034      	movs	r4, r6
    1f58:	000d      	movs	r5, r1
    1f5a:	e6e2      	b.n	1d22 <__aeabi_fsub+0x36>
    1f5c:	2eff      	cmp	r6, #255	; 0xff
    1f5e:	d034      	beq.n	1fca <__aeabi_fsub+0x2de>
    1f60:	2480      	movs	r4, #128	; 0x80
    1f62:	04e4      	lsls	r4, r4, #19
    1f64:	4240      	negs	r0, r0
    1f66:	4323      	orrs	r3, r4
    1f68:	e7df      	b.n	1f2a <__aeabi_fsub+0x23e>
    1f6a:	2a00      	cmp	r2, #0
    1f6c:	d100      	bne.n	1f70 <__aeabi_fsub+0x284>
    1f6e:	e6d8      	b.n	1d22 <__aeabi_fsub+0x36>
    1f70:	2780      	movs	r7, #128	; 0x80
    1f72:	1a98      	subs	r0, r3, r2
    1f74:	04ff      	lsls	r7, r7, #19
    1f76:	4007      	ands	r7, r0
    1f78:	d100      	bne.n	1f7c <__aeabi_fsub+0x290>
    1f7a:	e74d      	b.n	1e18 <__aeabi_fsub+0x12c>
    1f7c:	1ad3      	subs	r3, r2, r3
    1f7e:	000d      	movs	r5, r1
    1f80:	e6cf      	b.n	1d22 <__aeabi_fsub+0x36>
    1f82:	24ff      	movs	r4, #255	; 0xff
    1f84:	2a00      	cmp	r2, #0
    1f86:	d100      	bne.n	1f8a <__aeabi_fsub+0x29e>
    1f88:	e6cb      	b.n	1d22 <__aeabi_fsub+0x36>
    1f8a:	2080      	movs	r0, #128	; 0x80
    1f8c:	08db      	lsrs	r3, r3, #3
    1f8e:	03c0      	lsls	r0, r0, #15
    1f90:	4203      	tst	r3, r0
    1f92:	d004      	beq.n	1f9e <__aeabi_fsub+0x2b2>
    1f94:	08d2      	lsrs	r2, r2, #3
    1f96:	4202      	tst	r2, r0
    1f98:	d101      	bne.n	1f9e <__aeabi_fsub+0x2b2>
    1f9a:	0013      	movs	r3, r2
    1f9c:	000d      	movs	r5, r1
    1f9e:	00db      	lsls	r3, r3, #3
    1fa0:	24ff      	movs	r4, #255	; 0xff
    1fa2:	e6be      	b.n	1d22 <__aeabi_fsub+0x36>
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d010      	beq.n	1fca <__aeabi_fsub+0x2de>
    1fa8:	24ff      	movs	r4, #255	; 0xff
    1faa:	2a00      	cmp	r2, #0
    1fac:	d100      	bne.n	1fb0 <__aeabi_fsub+0x2c4>
    1fae:	e6b8      	b.n	1d22 <__aeabi_fsub+0x36>
    1fb0:	2080      	movs	r0, #128	; 0x80
    1fb2:	08db      	lsrs	r3, r3, #3
    1fb4:	03c0      	lsls	r0, r0, #15
    1fb6:	4203      	tst	r3, r0
    1fb8:	d003      	beq.n	1fc2 <__aeabi_fsub+0x2d6>
    1fba:	08d2      	lsrs	r2, r2, #3
    1fbc:	4202      	tst	r2, r0
    1fbe:	d100      	bne.n	1fc2 <__aeabi_fsub+0x2d6>
    1fc0:	0013      	movs	r3, r2
    1fc2:	00db      	lsls	r3, r3, #3
    1fc4:	000d      	movs	r5, r1
    1fc6:	24ff      	movs	r4, #255	; 0xff
    1fc8:	e6ab      	b.n	1d22 <__aeabi_fsub+0x36>
    1fca:	0013      	movs	r3, r2
    1fcc:	24ff      	movs	r4, #255	; 0xff
    1fce:	e6a8      	b.n	1d22 <__aeabi_fsub+0x36>
    1fd0:	2301      	movs	r3, #1
    1fd2:	e76e      	b.n	1eb2 <__aeabi_fsub+0x1c6>
    1fd4:	0013      	movs	r3, r2
    1fd6:	0034      	movs	r4, r6
    1fd8:	e6a3      	b.n	1d22 <__aeabi_fsub+0x36>
    1fda:	2700      	movs	r7, #0
    1fdc:	2500      	movs	r5, #0
    1fde:	e71e      	b.n	1e1e <__aeabi_fsub+0x132>
    1fe0:	2780      	movs	r7, #128	; 0x80
    1fe2:	2500      	movs	r5, #0
    1fe4:	03ff      	lsls	r7, r7, #15
    1fe6:	e6e9      	b.n	1dbc <__aeabi_fsub+0xd0>
    1fe8:	0013      	movs	r3, r2
    1fea:	e69a      	b.n	1d22 <__aeabi_fsub+0x36>
    1fec:	2301      	movs	r3, #1
    1fee:	e7a6      	b.n	1f3e <__aeabi_fsub+0x252>
    1ff0:	7dffffff 	.word	0x7dffffff
    1ff4:	fbffffff 	.word	0xfbffffff

00001ff8 <__aeabi_ui2f>:
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	1e04      	subs	r4, r0, #0
    1ffc:	d028      	beq.n	2050 <STACK_SIZE+0x50>
    1ffe:	f001 f80f 	bl	3020 <__clzsi2>
    2002:	239e      	movs	r3, #158	; 0x9e
    2004:	1a1b      	subs	r3, r3, r0
    2006:	2b96      	cmp	r3, #150	; 0x96
    2008:	dc0a      	bgt.n	2020 <STACK_SIZE+0x20>
    200a:	2296      	movs	r2, #150	; 0x96
    200c:	1ad2      	subs	r2, r2, r3
    200e:	4094      	lsls	r4, r2
    2010:	0262      	lsls	r2, r4, #9
    2012:	0a52      	lsrs	r2, r2, #9
    2014:	b2d8      	uxtb	r0, r3
    2016:	0252      	lsls	r2, r2, #9
    2018:	0a52      	lsrs	r2, r2, #9
    201a:	05c0      	lsls	r0, r0, #23
    201c:	4310      	orrs	r0, r2
    201e:	bd70      	pop	{r4, r5, r6, pc}
    2020:	2b99      	cmp	r3, #153	; 0x99
    2022:	dc18      	bgt.n	2056 <STACK_SIZE+0x56>
    2024:	2299      	movs	r2, #153	; 0x99
    2026:	1ad2      	subs	r2, r2, r3
    2028:	4094      	lsls	r4, r2
    202a:	4a11      	ldr	r2, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202c:	4022      	ands	r2, r4
    202e:	0761      	lsls	r1, r4, #29
    2030:	d004      	beq.n	203c <STACK_SIZE+0x3c>
    2032:	210f      	movs	r1, #15
    2034:	400c      	ands	r4, r1
    2036:	2c04      	cmp	r4, #4
    2038:	d000      	beq.n	203c <STACK_SIZE+0x3c>
    203a:	3204      	adds	r2, #4
    203c:	0151      	lsls	r1, r2, #5
    203e:	d503      	bpl.n	2048 <STACK_SIZE+0x48>
    2040:	4b0b      	ldr	r3, [pc, #44]	; (2070 <STACK_SIZE+0x70>)
    2042:	401a      	ands	r2, r3
    2044:	239f      	movs	r3, #159	; 0x9f
    2046:	1a1b      	subs	r3, r3, r0
    2048:	0192      	lsls	r2, r2, #6
    204a:	0a52      	lsrs	r2, r2, #9
    204c:	b2d8      	uxtb	r0, r3
    204e:	e7e2      	b.n	2016 <STACK_SIZE+0x16>
    2050:	2000      	movs	r0, #0
    2052:	2200      	movs	r2, #0
    2054:	e7df      	b.n	2016 <STACK_SIZE+0x16>
    2056:	2205      	movs	r2, #5
    2058:	0025      	movs	r5, r4
    205a:	1a12      	subs	r2, r2, r0
    205c:	21b9      	movs	r1, #185	; 0xb9
    205e:	40d5      	lsrs	r5, r2
    2060:	0022      	movs	r2, r4
    2062:	1ac9      	subs	r1, r1, r3
    2064:	408a      	lsls	r2, r1
    2066:	1e54      	subs	r4, r2, #1
    2068:	41a2      	sbcs	r2, r4
    206a:	002c      	movs	r4, r5
    206c:	4314      	orrs	r4, r2
    206e:	e7dc      	b.n	202a <STACK_SIZE+0x2a>
    2070:	fbffffff 	.word	0xfbffffff

00002074 <__aeabi_dadd>:
    2074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2076:	4656      	mov	r6, sl
    2078:	465f      	mov	r7, fp
    207a:	464d      	mov	r5, r9
    207c:	4644      	mov	r4, r8
    207e:	b4f0      	push	{r4, r5, r6, r7}
    2080:	000f      	movs	r7, r1
    2082:	0ffd      	lsrs	r5, r7, #31
    2084:	46aa      	mov	sl, r5
    2086:	0309      	lsls	r1, r1, #12
    2088:	007c      	lsls	r4, r7, #1
    208a:	002e      	movs	r6, r5
    208c:	005f      	lsls	r7, r3, #1
    208e:	0f45      	lsrs	r5, r0, #29
    2090:	0a49      	lsrs	r1, r1, #9
    2092:	0d7f      	lsrs	r7, r7, #21
    2094:	4329      	orrs	r1, r5
    2096:	00c5      	lsls	r5, r0, #3
    2098:	0318      	lsls	r0, r3, #12
    209a:	46bc      	mov	ip, r7
    209c:	0a40      	lsrs	r0, r0, #9
    209e:	0f57      	lsrs	r7, r2, #29
    20a0:	0d64      	lsrs	r4, r4, #21
    20a2:	0fdb      	lsrs	r3, r3, #31
    20a4:	4338      	orrs	r0, r7
    20a6:	00d2      	lsls	r2, r2, #3
    20a8:	459a      	cmp	sl, r3
    20aa:	d100      	bne.n	20ae <__aeabi_dadd+0x3a>
    20ac:	e0aa      	b.n	2204 <__aeabi_dadd+0x190>
    20ae:	4666      	mov	r6, ip
    20b0:	1ba6      	subs	r6, r4, r6
    20b2:	2e00      	cmp	r6, #0
    20b4:	dc00      	bgt.n	20b8 <__aeabi_dadd+0x44>
    20b6:	e0ff      	b.n	22b8 <__aeabi_dadd+0x244>
    20b8:	4663      	mov	r3, ip
    20ba:	2b00      	cmp	r3, #0
    20bc:	d139      	bne.n	2132 <__aeabi_dadd+0xbe>
    20be:	0003      	movs	r3, r0
    20c0:	4313      	orrs	r3, r2
    20c2:	d000      	beq.n	20c6 <__aeabi_dadd+0x52>
    20c4:	e0d9      	b.n	227a <__aeabi_dadd+0x206>
    20c6:	076b      	lsls	r3, r5, #29
    20c8:	d009      	beq.n	20de <__aeabi_dadd+0x6a>
    20ca:	230f      	movs	r3, #15
    20cc:	402b      	ands	r3, r5
    20ce:	2b04      	cmp	r3, #4
    20d0:	d005      	beq.n	20de <__aeabi_dadd+0x6a>
    20d2:	1d2b      	adds	r3, r5, #4
    20d4:	42ab      	cmp	r3, r5
    20d6:	41ad      	sbcs	r5, r5
    20d8:	426d      	negs	r5, r5
    20da:	1949      	adds	r1, r1, r5
    20dc:	001d      	movs	r5, r3
    20de:	020b      	lsls	r3, r1, #8
    20e0:	d400      	bmi.n	20e4 <__aeabi_dadd+0x70>
    20e2:	e082      	b.n	21ea <__aeabi_dadd+0x176>
    20e4:	4bca      	ldr	r3, [pc, #808]	; (2410 <__aeabi_dadd+0x39c>)
    20e6:	3401      	adds	r4, #1
    20e8:	429c      	cmp	r4, r3
    20ea:	d100      	bne.n	20ee <__aeabi_dadd+0x7a>
    20ec:	e0fe      	b.n	22ec <__aeabi_dadd+0x278>
    20ee:	000a      	movs	r2, r1
    20f0:	4656      	mov	r6, sl
    20f2:	4bc8      	ldr	r3, [pc, #800]	; (2414 <__aeabi_dadd+0x3a0>)
    20f4:	08ed      	lsrs	r5, r5, #3
    20f6:	401a      	ands	r2, r3
    20f8:	0750      	lsls	r0, r2, #29
    20fa:	0564      	lsls	r4, r4, #21
    20fc:	0252      	lsls	r2, r2, #9
    20fe:	4305      	orrs	r5, r0
    2100:	0b12      	lsrs	r2, r2, #12
    2102:	0d64      	lsrs	r4, r4, #21
    2104:	2100      	movs	r1, #0
    2106:	0312      	lsls	r2, r2, #12
    2108:	0d0b      	lsrs	r3, r1, #20
    210a:	051b      	lsls	r3, r3, #20
    210c:	0564      	lsls	r4, r4, #21
    210e:	0b12      	lsrs	r2, r2, #12
    2110:	431a      	orrs	r2, r3
    2112:	0863      	lsrs	r3, r4, #1
    2114:	4cc0      	ldr	r4, [pc, #768]	; (2418 <__aeabi_dadd+0x3a4>)
    2116:	07f6      	lsls	r6, r6, #31
    2118:	4014      	ands	r4, r2
    211a:	431c      	orrs	r4, r3
    211c:	0064      	lsls	r4, r4, #1
    211e:	0864      	lsrs	r4, r4, #1
    2120:	4334      	orrs	r4, r6
    2122:	0028      	movs	r0, r5
    2124:	0021      	movs	r1, r4
    2126:	bc3c      	pop	{r2, r3, r4, r5}
    2128:	4690      	mov	r8, r2
    212a:	4699      	mov	r9, r3
    212c:	46a2      	mov	sl, r4
    212e:	46ab      	mov	fp, r5
    2130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2132:	4bb7      	ldr	r3, [pc, #732]	; (2410 <__aeabi_dadd+0x39c>)
    2134:	429c      	cmp	r4, r3
    2136:	d0c6      	beq.n	20c6 <__aeabi_dadd+0x52>
    2138:	2380      	movs	r3, #128	; 0x80
    213a:	041b      	lsls	r3, r3, #16
    213c:	4318      	orrs	r0, r3
    213e:	2e38      	cmp	r6, #56	; 0x38
    2140:	dd00      	ble.n	2144 <__aeabi_dadd+0xd0>
    2142:	e0eb      	b.n	231c <__aeabi_dadd+0x2a8>
    2144:	2e1f      	cmp	r6, #31
    2146:	dd00      	ble.n	214a <__aeabi_dadd+0xd6>
    2148:	e11e      	b.n	2388 <__aeabi_dadd+0x314>
    214a:	2320      	movs	r3, #32
    214c:	1b9b      	subs	r3, r3, r6
    214e:	469c      	mov	ip, r3
    2150:	0003      	movs	r3, r0
    2152:	4667      	mov	r7, ip
    2154:	40bb      	lsls	r3, r7
    2156:	4698      	mov	r8, r3
    2158:	0013      	movs	r3, r2
    215a:	4647      	mov	r7, r8
    215c:	40f3      	lsrs	r3, r6
    215e:	433b      	orrs	r3, r7
    2160:	4667      	mov	r7, ip
    2162:	40ba      	lsls	r2, r7
    2164:	1e57      	subs	r7, r2, #1
    2166:	41ba      	sbcs	r2, r7
    2168:	4313      	orrs	r3, r2
    216a:	0002      	movs	r2, r0
    216c:	40f2      	lsrs	r2, r6
    216e:	1aeb      	subs	r3, r5, r3
    2170:	429d      	cmp	r5, r3
    2172:	41b6      	sbcs	r6, r6
    2174:	001d      	movs	r5, r3
    2176:	1a8a      	subs	r2, r1, r2
    2178:	4276      	negs	r6, r6
    217a:	1b91      	subs	r1, r2, r6
    217c:	020b      	lsls	r3, r1, #8
    217e:	d531      	bpl.n	21e4 <__aeabi_dadd+0x170>
    2180:	024a      	lsls	r2, r1, #9
    2182:	0a56      	lsrs	r6, r2, #9
    2184:	2e00      	cmp	r6, #0
    2186:	d100      	bne.n	218a <__aeabi_dadd+0x116>
    2188:	e0b4      	b.n	22f4 <__aeabi_dadd+0x280>
    218a:	0030      	movs	r0, r6
    218c:	f000 ff48 	bl	3020 <__clzsi2>
    2190:	0003      	movs	r3, r0
    2192:	3b08      	subs	r3, #8
    2194:	2b1f      	cmp	r3, #31
    2196:	dd00      	ble.n	219a <__aeabi_dadd+0x126>
    2198:	e0b5      	b.n	2306 <__aeabi_dadd+0x292>
    219a:	2220      	movs	r2, #32
    219c:	0029      	movs	r1, r5
    219e:	1ad2      	subs	r2, r2, r3
    21a0:	40d1      	lsrs	r1, r2
    21a2:	409e      	lsls	r6, r3
    21a4:	000a      	movs	r2, r1
    21a6:	409d      	lsls	r5, r3
    21a8:	4332      	orrs	r2, r6
    21aa:	429c      	cmp	r4, r3
    21ac:	dd00      	ble.n	21b0 <__aeabi_dadd+0x13c>
    21ae:	e0b1      	b.n	2314 <__aeabi_dadd+0x2a0>
    21b0:	1b1c      	subs	r4, r3, r4
    21b2:	1c63      	adds	r3, r4, #1
    21b4:	2b1f      	cmp	r3, #31
    21b6:	dd00      	ble.n	21ba <__aeabi_dadd+0x146>
    21b8:	e0d5      	b.n	2366 <__aeabi_dadd+0x2f2>
    21ba:	2120      	movs	r1, #32
    21bc:	0014      	movs	r4, r2
    21be:	0028      	movs	r0, r5
    21c0:	1ac9      	subs	r1, r1, r3
    21c2:	408c      	lsls	r4, r1
    21c4:	40d8      	lsrs	r0, r3
    21c6:	408d      	lsls	r5, r1
    21c8:	4304      	orrs	r4, r0
    21ca:	40da      	lsrs	r2, r3
    21cc:	1e68      	subs	r0, r5, #1
    21ce:	4185      	sbcs	r5, r0
    21d0:	0011      	movs	r1, r2
    21d2:	4325      	orrs	r5, r4
    21d4:	2400      	movs	r4, #0
    21d6:	e776      	b.n	20c6 <__aeabi_dadd+0x52>
    21d8:	4641      	mov	r1, r8
    21da:	4331      	orrs	r1, r6
    21dc:	d100      	bne.n	21e0 <__aeabi_dadd+0x16c>
    21de:	e234      	b.n	264a <__aeabi_dadd+0x5d6>
    21e0:	0031      	movs	r1, r6
    21e2:	4645      	mov	r5, r8
    21e4:	076b      	lsls	r3, r5, #29
    21e6:	d000      	beq.n	21ea <__aeabi_dadd+0x176>
    21e8:	e76f      	b.n	20ca <__aeabi_dadd+0x56>
    21ea:	4656      	mov	r6, sl
    21ec:	0748      	lsls	r0, r1, #29
    21ee:	08ed      	lsrs	r5, r5, #3
    21f0:	08c9      	lsrs	r1, r1, #3
    21f2:	4305      	orrs	r5, r0
    21f4:	4b86      	ldr	r3, [pc, #536]	; (2410 <__aeabi_dadd+0x39c>)
    21f6:	429c      	cmp	r4, r3
    21f8:	d035      	beq.n	2266 <__aeabi_dadd+0x1f2>
    21fa:	030a      	lsls	r2, r1, #12
    21fc:	0564      	lsls	r4, r4, #21
    21fe:	0b12      	lsrs	r2, r2, #12
    2200:	0d64      	lsrs	r4, r4, #21
    2202:	e77f      	b.n	2104 <__aeabi_dadd+0x90>
    2204:	4663      	mov	r3, ip
    2206:	1ae3      	subs	r3, r4, r3
    2208:	469b      	mov	fp, r3
    220a:	2b00      	cmp	r3, #0
    220c:	dc00      	bgt.n	2210 <__aeabi_dadd+0x19c>
    220e:	e08b      	b.n	2328 <__aeabi_dadd+0x2b4>
    2210:	4667      	mov	r7, ip
    2212:	2f00      	cmp	r7, #0
    2214:	d03c      	beq.n	2290 <__aeabi_dadd+0x21c>
    2216:	4f7e      	ldr	r7, [pc, #504]	; (2410 <__aeabi_dadd+0x39c>)
    2218:	42bc      	cmp	r4, r7
    221a:	d100      	bne.n	221e <__aeabi_dadd+0x1aa>
    221c:	e753      	b.n	20c6 <__aeabi_dadd+0x52>
    221e:	2780      	movs	r7, #128	; 0x80
    2220:	043f      	lsls	r7, r7, #16
    2222:	4338      	orrs	r0, r7
    2224:	465b      	mov	r3, fp
    2226:	2b38      	cmp	r3, #56	; 0x38
    2228:	dc00      	bgt.n	222c <__aeabi_dadd+0x1b8>
    222a:	e0f7      	b.n	241c <__aeabi_dadd+0x3a8>
    222c:	4302      	orrs	r2, r0
    222e:	1e50      	subs	r0, r2, #1
    2230:	4182      	sbcs	r2, r0
    2232:	2000      	movs	r0, #0
    2234:	b2d2      	uxtb	r2, r2
    2236:	1953      	adds	r3, r2, r5
    2238:	1842      	adds	r2, r0, r1
    223a:	42ab      	cmp	r3, r5
    223c:	4189      	sbcs	r1, r1
    223e:	001d      	movs	r5, r3
    2240:	4249      	negs	r1, r1
    2242:	1889      	adds	r1, r1, r2
    2244:	020b      	lsls	r3, r1, #8
    2246:	d5cd      	bpl.n	21e4 <__aeabi_dadd+0x170>
    2248:	4b71      	ldr	r3, [pc, #452]	; (2410 <__aeabi_dadd+0x39c>)
    224a:	3401      	adds	r4, #1
    224c:	429c      	cmp	r4, r3
    224e:	d100      	bne.n	2252 <__aeabi_dadd+0x1de>
    2250:	e13d      	b.n	24ce <__aeabi_dadd+0x45a>
    2252:	2001      	movs	r0, #1
    2254:	4a6f      	ldr	r2, [pc, #444]	; (2414 <__aeabi_dadd+0x3a0>)
    2256:	086b      	lsrs	r3, r5, #1
    2258:	400a      	ands	r2, r1
    225a:	4028      	ands	r0, r5
    225c:	4318      	orrs	r0, r3
    225e:	07d5      	lsls	r5, r2, #31
    2260:	4305      	orrs	r5, r0
    2262:	0851      	lsrs	r1, r2, #1
    2264:	e72f      	b.n	20c6 <__aeabi_dadd+0x52>
    2266:	002b      	movs	r3, r5
    2268:	430b      	orrs	r3, r1
    226a:	d100      	bne.n	226e <__aeabi_dadd+0x1fa>
    226c:	e1cb      	b.n	2606 <__aeabi_dadd+0x592>
    226e:	2380      	movs	r3, #128	; 0x80
    2270:	031b      	lsls	r3, r3, #12
    2272:	430b      	orrs	r3, r1
    2274:	031a      	lsls	r2, r3, #12
    2276:	0b12      	lsrs	r2, r2, #12
    2278:	e744      	b.n	2104 <__aeabi_dadd+0x90>
    227a:	3e01      	subs	r6, #1
    227c:	2e00      	cmp	r6, #0
    227e:	d16d      	bne.n	235c <__aeabi_dadd+0x2e8>
    2280:	1aae      	subs	r6, r5, r2
    2282:	42b5      	cmp	r5, r6
    2284:	419b      	sbcs	r3, r3
    2286:	1a09      	subs	r1, r1, r0
    2288:	425b      	negs	r3, r3
    228a:	1ac9      	subs	r1, r1, r3
    228c:	0035      	movs	r5, r6
    228e:	e775      	b.n	217c <__aeabi_dadd+0x108>
    2290:	0007      	movs	r7, r0
    2292:	4317      	orrs	r7, r2
    2294:	d100      	bne.n	2298 <__aeabi_dadd+0x224>
    2296:	e716      	b.n	20c6 <__aeabi_dadd+0x52>
    2298:	2301      	movs	r3, #1
    229a:	425b      	negs	r3, r3
    229c:	469c      	mov	ip, r3
    229e:	44e3      	add	fp, ip
    22a0:	465b      	mov	r3, fp
    22a2:	2b00      	cmp	r3, #0
    22a4:	d000      	beq.n	22a8 <__aeabi_dadd+0x234>
    22a6:	e0e0      	b.n	246a <__aeabi_dadd+0x3f6>
    22a8:	18aa      	adds	r2, r5, r2
    22aa:	42aa      	cmp	r2, r5
    22ac:	419b      	sbcs	r3, r3
    22ae:	1809      	adds	r1, r1, r0
    22b0:	425b      	negs	r3, r3
    22b2:	1859      	adds	r1, r3, r1
    22b4:	0015      	movs	r5, r2
    22b6:	e7c5      	b.n	2244 <__aeabi_dadd+0x1d0>
    22b8:	2e00      	cmp	r6, #0
    22ba:	d175      	bne.n	23a8 <__aeabi_dadd+0x334>
    22bc:	1c66      	adds	r6, r4, #1
    22be:	0576      	lsls	r6, r6, #21
    22c0:	0d76      	lsrs	r6, r6, #21
    22c2:	2e01      	cmp	r6, #1
    22c4:	dc00      	bgt.n	22c8 <__aeabi_dadd+0x254>
    22c6:	e0f3      	b.n	24b0 <__aeabi_dadd+0x43c>
    22c8:	1aae      	subs	r6, r5, r2
    22ca:	46b0      	mov	r8, r6
    22cc:	4545      	cmp	r5, r8
    22ce:	41bf      	sbcs	r7, r7
    22d0:	1a0e      	subs	r6, r1, r0
    22d2:	427f      	negs	r7, r7
    22d4:	1bf6      	subs	r6, r6, r7
    22d6:	0237      	lsls	r7, r6, #8
    22d8:	d400      	bmi.n	22dc <__aeabi_dadd+0x268>
    22da:	e08f      	b.n	23fc <__aeabi_dadd+0x388>
    22dc:	1b55      	subs	r5, r2, r5
    22de:	42aa      	cmp	r2, r5
    22e0:	41b6      	sbcs	r6, r6
    22e2:	1a41      	subs	r1, r0, r1
    22e4:	4276      	negs	r6, r6
    22e6:	1b8e      	subs	r6, r1, r6
    22e8:	469a      	mov	sl, r3
    22ea:	e74b      	b.n	2184 <__aeabi_dadd+0x110>
    22ec:	4656      	mov	r6, sl
    22ee:	2200      	movs	r2, #0
    22f0:	2500      	movs	r5, #0
    22f2:	e707      	b.n	2104 <__aeabi_dadd+0x90>
    22f4:	0028      	movs	r0, r5
    22f6:	f000 fe93 	bl	3020 <__clzsi2>
    22fa:	3020      	adds	r0, #32
    22fc:	0003      	movs	r3, r0
    22fe:	3b08      	subs	r3, #8
    2300:	2b1f      	cmp	r3, #31
    2302:	dc00      	bgt.n	2306 <__aeabi_dadd+0x292>
    2304:	e749      	b.n	219a <__aeabi_dadd+0x126>
    2306:	002a      	movs	r2, r5
    2308:	3828      	subs	r0, #40	; 0x28
    230a:	4082      	lsls	r2, r0
    230c:	2500      	movs	r5, #0
    230e:	429c      	cmp	r4, r3
    2310:	dc00      	bgt.n	2314 <__aeabi_dadd+0x2a0>
    2312:	e74d      	b.n	21b0 <__aeabi_dadd+0x13c>
    2314:	493f      	ldr	r1, [pc, #252]	; (2414 <__aeabi_dadd+0x3a0>)
    2316:	1ae4      	subs	r4, r4, r3
    2318:	4011      	ands	r1, r2
    231a:	e6d4      	b.n	20c6 <__aeabi_dadd+0x52>
    231c:	4302      	orrs	r2, r0
    231e:	1e50      	subs	r0, r2, #1
    2320:	4182      	sbcs	r2, r0
    2322:	b2d3      	uxtb	r3, r2
    2324:	2200      	movs	r2, #0
    2326:	e722      	b.n	216e <__aeabi_dadd+0xfa>
    2328:	2b00      	cmp	r3, #0
    232a:	d000      	beq.n	232e <__aeabi_dadd+0x2ba>
    232c:	e0f3      	b.n	2516 <__aeabi_dadd+0x4a2>
    232e:	1c63      	adds	r3, r4, #1
    2330:	469c      	mov	ip, r3
    2332:	055b      	lsls	r3, r3, #21
    2334:	0d5b      	lsrs	r3, r3, #21
    2336:	2b01      	cmp	r3, #1
    2338:	dc00      	bgt.n	233c <__aeabi_dadd+0x2c8>
    233a:	e09f      	b.n	247c <__aeabi_dadd+0x408>
    233c:	4b34      	ldr	r3, [pc, #208]	; (2410 <__aeabi_dadd+0x39c>)
    233e:	459c      	cmp	ip, r3
    2340:	d100      	bne.n	2344 <__aeabi_dadd+0x2d0>
    2342:	e0c3      	b.n	24cc <__aeabi_dadd+0x458>
    2344:	18aa      	adds	r2, r5, r2
    2346:	1809      	adds	r1, r1, r0
    2348:	42aa      	cmp	r2, r5
    234a:	4180      	sbcs	r0, r0
    234c:	4240      	negs	r0, r0
    234e:	1841      	adds	r1, r0, r1
    2350:	07cd      	lsls	r5, r1, #31
    2352:	0852      	lsrs	r2, r2, #1
    2354:	4315      	orrs	r5, r2
    2356:	0849      	lsrs	r1, r1, #1
    2358:	4664      	mov	r4, ip
    235a:	e6b4      	b.n	20c6 <__aeabi_dadd+0x52>
    235c:	4b2c      	ldr	r3, [pc, #176]	; (2410 <__aeabi_dadd+0x39c>)
    235e:	429c      	cmp	r4, r3
    2360:	d000      	beq.n	2364 <__aeabi_dadd+0x2f0>
    2362:	e6ec      	b.n	213e <__aeabi_dadd+0xca>
    2364:	e6af      	b.n	20c6 <__aeabi_dadd+0x52>
    2366:	0011      	movs	r1, r2
    2368:	3c1f      	subs	r4, #31
    236a:	40e1      	lsrs	r1, r4
    236c:	000c      	movs	r4, r1
    236e:	2b20      	cmp	r3, #32
    2370:	d100      	bne.n	2374 <__aeabi_dadd+0x300>
    2372:	e07f      	b.n	2474 <__aeabi_dadd+0x400>
    2374:	2140      	movs	r1, #64	; 0x40
    2376:	1acb      	subs	r3, r1, r3
    2378:	409a      	lsls	r2, r3
    237a:	4315      	orrs	r5, r2
    237c:	1e6a      	subs	r2, r5, #1
    237e:	4195      	sbcs	r5, r2
    2380:	2100      	movs	r1, #0
    2382:	4325      	orrs	r5, r4
    2384:	2400      	movs	r4, #0
    2386:	e72d      	b.n	21e4 <__aeabi_dadd+0x170>
    2388:	0033      	movs	r3, r6
    238a:	0007      	movs	r7, r0
    238c:	3b20      	subs	r3, #32
    238e:	40df      	lsrs	r7, r3
    2390:	003b      	movs	r3, r7
    2392:	2e20      	cmp	r6, #32
    2394:	d070      	beq.n	2478 <__aeabi_dadd+0x404>
    2396:	2740      	movs	r7, #64	; 0x40
    2398:	1bbe      	subs	r6, r7, r6
    239a:	40b0      	lsls	r0, r6
    239c:	4302      	orrs	r2, r0
    239e:	1e50      	subs	r0, r2, #1
    23a0:	4182      	sbcs	r2, r0
    23a2:	4313      	orrs	r3, r2
    23a4:	2200      	movs	r2, #0
    23a6:	e6e2      	b.n	216e <__aeabi_dadd+0xfa>
    23a8:	2c00      	cmp	r4, #0
    23aa:	d04f      	beq.n	244c <__aeabi_dadd+0x3d8>
    23ac:	4c18      	ldr	r4, [pc, #96]	; (2410 <__aeabi_dadd+0x39c>)
    23ae:	45a4      	cmp	ip, r4
    23b0:	d100      	bne.n	23b4 <__aeabi_dadd+0x340>
    23b2:	e0ab      	b.n	250c <__aeabi_dadd+0x498>
    23b4:	2480      	movs	r4, #128	; 0x80
    23b6:	0424      	lsls	r4, r4, #16
    23b8:	4276      	negs	r6, r6
    23ba:	4321      	orrs	r1, r4
    23bc:	2e38      	cmp	r6, #56	; 0x38
    23be:	dd00      	ble.n	23c2 <__aeabi_dadd+0x34e>
    23c0:	e0df      	b.n	2582 <__aeabi_dadd+0x50e>
    23c2:	2e1f      	cmp	r6, #31
    23c4:	dd00      	ble.n	23c8 <__aeabi_dadd+0x354>
    23c6:	e143      	b.n	2650 <__aeabi_dadd+0x5dc>
    23c8:	2720      	movs	r7, #32
    23ca:	1bbc      	subs	r4, r7, r6
    23cc:	46a1      	mov	r9, r4
    23ce:	000c      	movs	r4, r1
    23d0:	464f      	mov	r7, r9
    23d2:	40bc      	lsls	r4, r7
    23d4:	46a0      	mov	r8, r4
    23d6:	002c      	movs	r4, r5
    23d8:	4647      	mov	r7, r8
    23da:	40f4      	lsrs	r4, r6
    23dc:	433c      	orrs	r4, r7
    23de:	464f      	mov	r7, r9
    23e0:	40bd      	lsls	r5, r7
    23e2:	1e6f      	subs	r7, r5, #1
    23e4:	41bd      	sbcs	r5, r7
    23e6:	40f1      	lsrs	r1, r6
    23e8:	432c      	orrs	r4, r5
    23ea:	1b15      	subs	r5, r2, r4
    23ec:	42aa      	cmp	r2, r5
    23ee:	4192      	sbcs	r2, r2
    23f0:	1a41      	subs	r1, r0, r1
    23f2:	4252      	negs	r2, r2
    23f4:	1a89      	subs	r1, r1, r2
    23f6:	4664      	mov	r4, ip
    23f8:	469a      	mov	sl, r3
    23fa:	e6bf      	b.n	217c <__aeabi_dadd+0x108>
    23fc:	4641      	mov	r1, r8
    23fe:	4645      	mov	r5, r8
    2400:	4331      	orrs	r1, r6
    2402:	d000      	beq.n	2406 <__aeabi_dadd+0x392>
    2404:	e6be      	b.n	2184 <__aeabi_dadd+0x110>
    2406:	2600      	movs	r6, #0
    2408:	2400      	movs	r4, #0
    240a:	2500      	movs	r5, #0
    240c:	e6f2      	b.n	21f4 <__aeabi_dadd+0x180>
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	000007ff 	.word	0x000007ff
    2414:	ff7fffff 	.word	0xff7fffff
    2418:	800fffff 	.word	0x800fffff
    241c:	2b1f      	cmp	r3, #31
    241e:	dc59      	bgt.n	24d4 <__aeabi_dadd+0x460>
    2420:	2720      	movs	r7, #32
    2422:	1aff      	subs	r7, r7, r3
    2424:	46bc      	mov	ip, r7
    2426:	0007      	movs	r7, r0
    2428:	4663      	mov	r3, ip
    242a:	409f      	lsls	r7, r3
    242c:	465b      	mov	r3, fp
    242e:	46b9      	mov	r9, r7
    2430:	0017      	movs	r7, r2
    2432:	40df      	lsrs	r7, r3
    2434:	46b8      	mov	r8, r7
    2436:	464f      	mov	r7, r9
    2438:	4643      	mov	r3, r8
    243a:	431f      	orrs	r7, r3
    243c:	4663      	mov	r3, ip
    243e:	409a      	lsls	r2, r3
    2440:	1e53      	subs	r3, r2, #1
    2442:	419a      	sbcs	r2, r3
    2444:	465b      	mov	r3, fp
    2446:	433a      	orrs	r2, r7
    2448:	40d8      	lsrs	r0, r3
    244a:	e6f4      	b.n	2236 <__aeabi_dadd+0x1c2>
    244c:	000c      	movs	r4, r1
    244e:	432c      	orrs	r4, r5
    2450:	d05c      	beq.n	250c <__aeabi_dadd+0x498>
    2452:	43f6      	mvns	r6, r6
    2454:	2e00      	cmp	r6, #0
    2456:	d155      	bne.n	2504 <__aeabi_dadd+0x490>
    2458:	1b55      	subs	r5, r2, r5
    245a:	42aa      	cmp	r2, r5
    245c:	41a4      	sbcs	r4, r4
    245e:	1a41      	subs	r1, r0, r1
    2460:	4264      	negs	r4, r4
    2462:	1b09      	subs	r1, r1, r4
    2464:	469a      	mov	sl, r3
    2466:	4664      	mov	r4, ip
    2468:	e688      	b.n	217c <__aeabi_dadd+0x108>
    246a:	4f96      	ldr	r7, [pc, #600]	; (26c4 <__aeabi_dadd+0x650>)
    246c:	42bc      	cmp	r4, r7
    246e:	d000      	beq.n	2472 <__aeabi_dadd+0x3fe>
    2470:	e6d8      	b.n	2224 <__aeabi_dadd+0x1b0>
    2472:	e628      	b.n	20c6 <__aeabi_dadd+0x52>
    2474:	2200      	movs	r2, #0
    2476:	e780      	b.n	237a <__aeabi_dadd+0x306>
    2478:	2000      	movs	r0, #0
    247a:	e78f      	b.n	239c <__aeabi_dadd+0x328>
    247c:	000b      	movs	r3, r1
    247e:	432b      	orrs	r3, r5
    2480:	2c00      	cmp	r4, #0
    2482:	d000      	beq.n	2486 <__aeabi_dadd+0x412>
    2484:	e0c2      	b.n	260c <__aeabi_dadd+0x598>
    2486:	2b00      	cmp	r3, #0
    2488:	d100      	bne.n	248c <__aeabi_dadd+0x418>
    248a:	e101      	b.n	2690 <__aeabi_dadd+0x61c>
    248c:	0003      	movs	r3, r0
    248e:	4313      	orrs	r3, r2
    2490:	d100      	bne.n	2494 <__aeabi_dadd+0x420>
    2492:	e618      	b.n	20c6 <__aeabi_dadd+0x52>
    2494:	18ab      	adds	r3, r5, r2
    2496:	42ab      	cmp	r3, r5
    2498:	41b6      	sbcs	r6, r6
    249a:	1809      	adds	r1, r1, r0
    249c:	4276      	negs	r6, r6
    249e:	1871      	adds	r1, r6, r1
    24a0:	020a      	lsls	r2, r1, #8
    24a2:	d400      	bmi.n	24a6 <__aeabi_dadd+0x432>
    24a4:	e109      	b.n	26ba <__aeabi_dadd+0x646>
    24a6:	4a88      	ldr	r2, [pc, #544]	; (26c8 <__aeabi_dadd+0x654>)
    24a8:	001d      	movs	r5, r3
    24aa:	4011      	ands	r1, r2
    24ac:	4664      	mov	r4, ip
    24ae:	e60a      	b.n	20c6 <__aeabi_dadd+0x52>
    24b0:	2c00      	cmp	r4, #0
    24b2:	d15b      	bne.n	256c <__aeabi_dadd+0x4f8>
    24b4:	000e      	movs	r6, r1
    24b6:	432e      	orrs	r6, r5
    24b8:	d000      	beq.n	24bc <__aeabi_dadd+0x448>
    24ba:	e08a      	b.n	25d2 <__aeabi_dadd+0x55e>
    24bc:	0001      	movs	r1, r0
    24be:	4311      	orrs	r1, r2
    24c0:	d100      	bne.n	24c4 <__aeabi_dadd+0x450>
    24c2:	e0c2      	b.n	264a <__aeabi_dadd+0x5d6>
    24c4:	0001      	movs	r1, r0
    24c6:	0015      	movs	r5, r2
    24c8:	469a      	mov	sl, r3
    24ca:	e5fc      	b.n	20c6 <__aeabi_dadd+0x52>
    24cc:	4664      	mov	r4, ip
    24ce:	2100      	movs	r1, #0
    24d0:	2500      	movs	r5, #0
    24d2:	e68f      	b.n	21f4 <__aeabi_dadd+0x180>
    24d4:	2320      	movs	r3, #32
    24d6:	425b      	negs	r3, r3
    24d8:	469c      	mov	ip, r3
    24da:	44dc      	add	ip, fp
    24dc:	4663      	mov	r3, ip
    24de:	0007      	movs	r7, r0
    24e0:	40df      	lsrs	r7, r3
    24e2:	465b      	mov	r3, fp
    24e4:	46bc      	mov	ip, r7
    24e6:	2b20      	cmp	r3, #32
    24e8:	d100      	bne.n	24ec <__aeabi_dadd+0x478>
    24ea:	e0ac      	b.n	2646 <__aeabi_dadd+0x5d2>
    24ec:	2340      	movs	r3, #64	; 0x40
    24ee:	465f      	mov	r7, fp
    24f0:	1bdb      	subs	r3, r3, r7
    24f2:	4098      	lsls	r0, r3
    24f4:	4302      	orrs	r2, r0
    24f6:	1e50      	subs	r0, r2, #1
    24f8:	4182      	sbcs	r2, r0
    24fa:	4663      	mov	r3, ip
    24fc:	4313      	orrs	r3, r2
    24fe:	001a      	movs	r2, r3
    2500:	2000      	movs	r0, #0
    2502:	e698      	b.n	2236 <__aeabi_dadd+0x1c2>
    2504:	4c6f      	ldr	r4, [pc, #444]	; (26c4 <__aeabi_dadd+0x650>)
    2506:	45a4      	cmp	ip, r4
    2508:	d000      	beq.n	250c <__aeabi_dadd+0x498>
    250a:	e757      	b.n	23bc <__aeabi_dadd+0x348>
    250c:	0001      	movs	r1, r0
    250e:	0015      	movs	r5, r2
    2510:	4664      	mov	r4, ip
    2512:	469a      	mov	sl, r3
    2514:	e5d7      	b.n	20c6 <__aeabi_dadd+0x52>
    2516:	2c00      	cmp	r4, #0
    2518:	d139      	bne.n	258e <__aeabi_dadd+0x51a>
    251a:	000c      	movs	r4, r1
    251c:	432c      	orrs	r4, r5
    251e:	d06e      	beq.n	25fe <__aeabi_dadd+0x58a>
    2520:	43db      	mvns	r3, r3
    2522:	2b00      	cmp	r3, #0
    2524:	d01a      	beq.n	255c <__aeabi_dadd+0x4e8>
    2526:	4c67      	ldr	r4, [pc, #412]	; (26c4 <__aeabi_dadd+0x650>)
    2528:	45a4      	cmp	ip, r4
    252a:	d068      	beq.n	25fe <__aeabi_dadd+0x58a>
    252c:	2b38      	cmp	r3, #56	; 0x38
    252e:	dd00      	ble.n	2532 <__aeabi_dadd+0x4be>
    2530:	e0a4      	b.n	267c <__aeabi_dadd+0x608>
    2532:	2b1f      	cmp	r3, #31
    2534:	dd00      	ble.n	2538 <__aeabi_dadd+0x4c4>
    2536:	e0ae      	b.n	2696 <__aeabi_dadd+0x622>
    2538:	2420      	movs	r4, #32
    253a:	000f      	movs	r7, r1
    253c:	1ae4      	subs	r4, r4, r3
    253e:	40a7      	lsls	r7, r4
    2540:	46b9      	mov	r9, r7
    2542:	002f      	movs	r7, r5
    2544:	40df      	lsrs	r7, r3
    2546:	46b8      	mov	r8, r7
    2548:	46a3      	mov	fp, r4
    254a:	464f      	mov	r7, r9
    254c:	4644      	mov	r4, r8
    254e:	4327      	orrs	r7, r4
    2550:	465c      	mov	r4, fp
    2552:	40a5      	lsls	r5, r4
    2554:	1e6c      	subs	r4, r5, #1
    2556:	41a5      	sbcs	r5, r4
    2558:	40d9      	lsrs	r1, r3
    255a:	433d      	orrs	r5, r7
    255c:	18ad      	adds	r5, r5, r2
    255e:	4295      	cmp	r5, r2
    2560:	419b      	sbcs	r3, r3
    2562:	1809      	adds	r1, r1, r0
    2564:	425b      	negs	r3, r3
    2566:	1859      	adds	r1, r3, r1
    2568:	4664      	mov	r4, ip
    256a:	e66b      	b.n	2244 <__aeabi_dadd+0x1d0>
    256c:	000c      	movs	r4, r1
    256e:	432c      	orrs	r4, r5
    2570:	d115      	bne.n	259e <__aeabi_dadd+0x52a>
    2572:	0001      	movs	r1, r0
    2574:	4311      	orrs	r1, r2
    2576:	d07b      	beq.n	2670 <__aeabi_dadd+0x5fc>
    2578:	0001      	movs	r1, r0
    257a:	0015      	movs	r5, r2
    257c:	469a      	mov	sl, r3
    257e:	4c51      	ldr	r4, [pc, #324]	; (26c4 <__aeabi_dadd+0x650>)
    2580:	e5a1      	b.n	20c6 <__aeabi_dadd+0x52>
    2582:	430d      	orrs	r5, r1
    2584:	1e69      	subs	r1, r5, #1
    2586:	418d      	sbcs	r5, r1
    2588:	2100      	movs	r1, #0
    258a:	b2ec      	uxtb	r4, r5
    258c:	e72d      	b.n	23ea <__aeabi_dadd+0x376>
    258e:	4c4d      	ldr	r4, [pc, #308]	; (26c4 <__aeabi_dadd+0x650>)
    2590:	45a4      	cmp	ip, r4
    2592:	d034      	beq.n	25fe <__aeabi_dadd+0x58a>
    2594:	2480      	movs	r4, #128	; 0x80
    2596:	0424      	lsls	r4, r4, #16
    2598:	425b      	negs	r3, r3
    259a:	4321      	orrs	r1, r4
    259c:	e7c6      	b.n	252c <__aeabi_dadd+0x4b8>
    259e:	0004      	movs	r4, r0
    25a0:	4314      	orrs	r4, r2
    25a2:	d04e      	beq.n	2642 <__aeabi_dadd+0x5ce>
    25a4:	08ed      	lsrs	r5, r5, #3
    25a6:	074c      	lsls	r4, r1, #29
    25a8:	432c      	orrs	r4, r5
    25aa:	2580      	movs	r5, #128	; 0x80
    25ac:	08c9      	lsrs	r1, r1, #3
    25ae:	032d      	lsls	r5, r5, #12
    25b0:	4229      	tst	r1, r5
    25b2:	d008      	beq.n	25c6 <__aeabi_dadd+0x552>
    25b4:	08c6      	lsrs	r6, r0, #3
    25b6:	422e      	tst	r6, r5
    25b8:	d105      	bne.n	25c6 <__aeabi_dadd+0x552>
    25ba:	08d2      	lsrs	r2, r2, #3
    25bc:	0741      	lsls	r1, r0, #29
    25be:	4311      	orrs	r1, r2
    25c0:	000c      	movs	r4, r1
    25c2:	469a      	mov	sl, r3
    25c4:	0031      	movs	r1, r6
    25c6:	0f62      	lsrs	r2, r4, #29
    25c8:	00c9      	lsls	r1, r1, #3
    25ca:	00e5      	lsls	r5, r4, #3
    25cc:	4311      	orrs	r1, r2
    25ce:	4c3d      	ldr	r4, [pc, #244]	; (26c4 <__aeabi_dadd+0x650>)
    25d0:	e579      	b.n	20c6 <__aeabi_dadd+0x52>
    25d2:	0006      	movs	r6, r0
    25d4:	4316      	orrs	r6, r2
    25d6:	d100      	bne.n	25da <__aeabi_dadd+0x566>
    25d8:	e575      	b.n	20c6 <__aeabi_dadd+0x52>
    25da:	1aae      	subs	r6, r5, r2
    25dc:	46b0      	mov	r8, r6
    25de:	4545      	cmp	r5, r8
    25e0:	41bf      	sbcs	r7, r7
    25e2:	1a0e      	subs	r6, r1, r0
    25e4:	427f      	negs	r7, r7
    25e6:	1bf6      	subs	r6, r6, r7
    25e8:	0237      	lsls	r7, r6, #8
    25ea:	d400      	bmi.n	25ee <__aeabi_dadd+0x57a>
    25ec:	e5f4      	b.n	21d8 <__aeabi_dadd+0x164>
    25ee:	1b55      	subs	r5, r2, r5
    25f0:	42aa      	cmp	r2, r5
    25f2:	41b6      	sbcs	r6, r6
    25f4:	1a41      	subs	r1, r0, r1
    25f6:	4276      	negs	r6, r6
    25f8:	1b89      	subs	r1, r1, r6
    25fa:	469a      	mov	sl, r3
    25fc:	e563      	b.n	20c6 <__aeabi_dadd+0x52>
    25fe:	0001      	movs	r1, r0
    2600:	0015      	movs	r5, r2
    2602:	4664      	mov	r4, ip
    2604:	e55f      	b.n	20c6 <__aeabi_dadd+0x52>
    2606:	2200      	movs	r2, #0
    2608:	2500      	movs	r5, #0
    260a:	e57b      	b.n	2104 <__aeabi_dadd+0x90>
    260c:	2b00      	cmp	r3, #0
    260e:	d03b      	beq.n	2688 <__aeabi_dadd+0x614>
    2610:	0003      	movs	r3, r0
    2612:	4313      	orrs	r3, r2
    2614:	d015      	beq.n	2642 <__aeabi_dadd+0x5ce>
    2616:	08ed      	lsrs	r5, r5, #3
    2618:	074b      	lsls	r3, r1, #29
    261a:	432b      	orrs	r3, r5
    261c:	2580      	movs	r5, #128	; 0x80
    261e:	08c9      	lsrs	r1, r1, #3
    2620:	032d      	lsls	r5, r5, #12
    2622:	4229      	tst	r1, r5
    2624:	d007      	beq.n	2636 <__aeabi_dadd+0x5c2>
    2626:	08c4      	lsrs	r4, r0, #3
    2628:	422c      	tst	r4, r5
    262a:	d104      	bne.n	2636 <__aeabi_dadd+0x5c2>
    262c:	0741      	lsls	r1, r0, #29
    262e:	000b      	movs	r3, r1
    2630:	0021      	movs	r1, r4
    2632:	08d2      	lsrs	r2, r2, #3
    2634:	4313      	orrs	r3, r2
    2636:	00c9      	lsls	r1, r1, #3
    2638:	0f5a      	lsrs	r2, r3, #29
    263a:	4311      	orrs	r1, r2
    263c:	00dd      	lsls	r5, r3, #3
    263e:	4c21      	ldr	r4, [pc, #132]	; (26c4 <__aeabi_dadd+0x650>)
    2640:	e541      	b.n	20c6 <__aeabi_dadd+0x52>
    2642:	4c20      	ldr	r4, [pc, #128]	; (26c4 <__aeabi_dadd+0x650>)
    2644:	e53f      	b.n	20c6 <__aeabi_dadd+0x52>
    2646:	2000      	movs	r0, #0
    2648:	e754      	b.n	24f4 <__aeabi_dadd+0x480>
    264a:	2600      	movs	r6, #0
    264c:	2500      	movs	r5, #0
    264e:	e5d1      	b.n	21f4 <__aeabi_dadd+0x180>
    2650:	0034      	movs	r4, r6
    2652:	000f      	movs	r7, r1
    2654:	3c20      	subs	r4, #32
    2656:	40e7      	lsrs	r7, r4
    2658:	003c      	movs	r4, r7
    265a:	2e20      	cmp	r6, #32
    265c:	d02b      	beq.n	26b6 <__aeabi_dadd+0x642>
    265e:	2740      	movs	r7, #64	; 0x40
    2660:	1bbe      	subs	r6, r7, r6
    2662:	40b1      	lsls	r1, r6
    2664:	430d      	orrs	r5, r1
    2666:	1e69      	subs	r1, r5, #1
    2668:	418d      	sbcs	r5, r1
    266a:	2100      	movs	r1, #0
    266c:	432c      	orrs	r4, r5
    266e:	e6bc      	b.n	23ea <__aeabi_dadd+0x376>
    2670:	2180      	movs	r1, #128	; 0x80
    2672:	2600      	movs	r6, #0
    2674:	0309      	lsls	r1, r1, #12
    2676:	4c13      	ldr	r4, [pc, #76]	; (26c4 <__aeabi_dadd+0x650>)
    2678:	2500      	movs	r5, #0
    267a:	e5bb      	b.n	21f4 <__aeabi_dadd+0x180>
    267c:	430d      	orrs	r5, r1
    267e:	1e69      	subs	r1, r5, #1
    2680:	418d      	sbcs	r5, r1
    2682:	2100      	movs	r1, #0
    2684:	b2ed      	uxtb	r5, r5
    2686:	e769      	b.n	255c <__aeabi_dadd+0x4e8>
    2688:	0001      	movs	r1, r0
    268a:	0015      	movs	r5, r2
    268c:	4c0d      	ldr	r4, [pc, #52]	; (26c4 <__aeabi_dadd+0x650>)
    268e:	e51a      	b.n	20c6 <__aeabi_dadd+0x52>
    2690:	0001      	movs	r1, r0
    2692:	0015      	movs	r5, r2
    2694:	e517      	b.n	20c6 <__aeabi_dadd+0x52>
    2696:	001c      	movs	r4, r3
    2698:	000f      	movs	r7, r1
    269a:	3c20      	subs	r4, #32
    269c:	40e7      	lsrs	r7, r4
    269e:	003c      	movs	r4, r7
    26a0:	2b20      	cmp	r3, #32
    26a2:	d00c      	beq.n	26be <__aeabi_dadd+0x64a>
    26a4:	2740      	movs	r7, #64	; 0x40
    26a6:	1afb      	subs	r3, r7, r3
    26a8:	4099      	lsls	r1, r3
    26aa:	430d      	orrs	r5, r1
    26ac:	1e69      	subs	r1, r5, #1
    26ae:	418d      	sbcs	r5, r1
    26b0:	2100      	movs	r1, #0
    26b2:	4325      	orrs	r5, r4
    26b4:	e752      	b.n	255c <__aeabi_dadd+0x4e8>
    26b6:	2100      	movs	r1, #0
    26b8:	e7d4      	b.n	2664 <__aeabi_dadd+0x5f0>
    26ba:	001d      	movs	r5, r3
    26bc:	e592      	b.n	21e4 <__aeabi_dadd+0x170>
    26be:	2100      	movs	r1, #0
    26c0:	e7f3      	b.n	26aa <__aeabi_dadd+0x636>
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	000007ff 	.word	0x000007ff
    26c8:	ff7fffff 	.word	0xff7fffff

000026cc <__eqdf2>:
    26cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ce:	465f      	mov	r7, fp
    26d0:	4656      	mov	r6, sl
    26d2:	464d      	mov	r5, r9
    26d4:	4644      	mov	r4, r8
    26d6:	b4f0      	push	{r4, r5, r6, r7}
    26d8:	031f      	lsls	r7, r3, #12
    26da:	005c      	lsls	r4, r3, #1
    26dc:	0fdb      	lsrs	r3, r3, #31
    26de:	469a      	mov	sl, r3
    26e0:	4b19      	ldr	r3, [pc, #100]	; (2748 <__eqdf2+0x7c>)
    26e2:	030e      	lsls	r6, r1, #12
    26e4:	004d      	lsls	r5, r1, #1
    26e6:	0fc9      	lsrs	r1, r1, #31
    26e8:	4680      	mov	r8, r0
    26ea:	0b36      	lsrs	r6, r6, #12
    26ec:	0d6d      	lsrs	r5, r5, #21
    26ee:	468b      	mov	fp, r1
    26f0:	4691      	mov	r9, r2
    26f2:	0b3f      	lsrs	r7, r7, #12
    26f4:	0d64      	lsrs	r4, r4, #21
    26f6:	429d      	cmp	r5, r3
    26f8:	d019      	beq.n	272e <__eqdf2+0x62>
    26fa:	4b13      	ldr	r3, [pc, #76]	; (2748 <__eqdf2+0x7c>)
    26fc:	429c      	cmp	r4, r3
    26fe:	d01b      	beq.n	2738 <__eqdf2+0x6c>
    2700:	2301      	movs	r3, #1
    2702:	42a5      	cmp	r5, r4
    2704:	d006      	beq.n	2714 <__eqdf2+0x48>
    2706:	0018      	movs	r0, r3
    2708:	bc3c      	pop	{r2, r3, r4, r5}
    270a:	4690      	mov	r8, r2
    270c:	4699      	mov	r9, r3
    270e:	46a2      	mov	sl, r4
    2710:	46ab      	mov	fp, r5
    2712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2714:	42be      	cmp	r6, r7
    2716:	d1f6      	bne.n	2706 <__eqdf2+0x3a>
    2718:	45c8      	cmp	r8, r9
    271a:	d1f4      	bne.n	2706 <__eqdf2+0x3a>
    271c:	45d3      	cmp	fp, sl
    271e:	d010      	beq.n	2742 <__eqdf2+0x76>
    2720:	2d00      	cmp	r5, #0
    2722:	d1f0      	bne.n	2706 <__eqdf2+0x3a>
    2724:	4330      	orrs	r0, r6
    2726:	0003      	movs	r3, r0
    2728:	1e5a      	subs	r2, r3, #1
    272a:	4193      	sbcs	r3, r2
    272c:	e7eb      	b.n	2706 <__eqdf2+0x3a>
    272e:	0031      	movs	r1, r6
    2730:	2301      	movs	r3, #1
    2732:	4301      	orrs	r1, r0
    2734:	d1e7      	bne.n	2706 <__eqdf2+0x3a>
    2736:	e7e0      	b.n	26fa <__eqdf2+0x2e>
    2738:	433a      	orrs	r2, r7
    273a:	2301      	movs	r3, #1
    273c:	2a00      	cmp	r2, #0
    273e:	d1e2      	bne.n	2706 <__eqdf2+0x3a>
    2740:	e7de      	b.n	2700 <__eqdf2+0x34>
    2742:	2300      	movs	r3, #0
    2744:	e7df      	b.n	2706 <__eqdf2+0x3a>
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	000007ff 	.word	0x000007ff

0000274c <__gedf2>:
    274c:	b5f0      	push	{r4, r5, r6, r7, lr}
    274e:	465f      	mov	r7, fp
    2750:	4644      	mov	r4, r8
    2752:	4656      	mov	r6, sl
    2754:	464d      	mov	r5, r9
    2756:	b4f0      	push	{r4, r5, r6, r7}
    2758:	031f      	lsls	r7, r3, #12
    275a:	0b3c      	lsrs	r4, r7, #12
    275c:	4f2c      	ldr	r7, [pc, #176]	; (2810 <__gedf2+0xc4>)
    275e:	030e      	lsls	r6, r1, #12
    2760:	004d      	lsls	r5, r1, #1
    2762:	46a3      	mov	fp, r4
    2764:	005c      	lsls	r4, r3, #1
    2766:	4684      	mov	ip, r0
    2768:	0b36      	lsrs	r6, r6, #12
    276a:	0d6d      	lsrs	r5, r5, #21
    276c:	0fc9      	lsrs	r1, r1, #31
    276e:	4690      	mov	r8, r2
    2770:	0d64      	lsrs	r4, r4, #21
    2772:	0fdb      	lsrs	r3, r3, #31
    2774:	42bd      	cmp	r5, r7
    2776:	d02b      	beq.n	27d0 <__gedf2+0x84>
    2778:	4f25      	ldr	r7, [pc, #148]	; (2810 <__gedf2+0xc4>)
    277a:	42bc      	cmp	r4, r7
    277c:	d02e      	beq.n	27dc <__gedf2+0x90>
    277e:	2d00      	cmp	r5, #0
    2780:	d10e      	bne.n	27a0 <__gedf2+0x54>
    2782:	4330      	orrs	r0, r6
    2784:	0007      	movs	r7, r0
    2786:	4681      	mov	r9, r0
    2788:	4278      	negs	r0, r7
    278a:	4178      	adcs	r0, r7
    278c:	2c00      	cmp	r4, #0
    278e:	d117      	bne.n	27c0 <__gedf2+0x74>
    2790:	465f      	mov	r7, fp
    2792:	433a      	orrs	r2, r7
    2794:	d114      	bne.n	27c0 <__gedf2+0x74>
    2796:	464b      	mov	r3, r9
    2798:	2000      	movs	r0, #0
    279a:	2b00      	cmp	r3, #0
    279c:	d00a      	beq.n	27b4 <__gedf2+0x68>
    279e:	e006      	b.n	27ae <__gedf2+0x62>
    27a0:	2c00      	cmp	r4, #0
    27a2:	d102      	bne.n	27aa <__gedf2+0x5e>
    27a4:	4658      	mov	r0, fp
    27a6:	4302      	orrs	r2, r0
    27a8:	d001      	beq.n	27ae <__gedf2+0x62>
    27aa:	4299      	cmp	r1, r3
    27ac:	d01a      	beq.n	27e4 <__gedf2+0x98>
    27ae:	2301      	movs	r3, #1
    27b0:	4248      	negs	r0, r1
    27b2:	4318      	orrs	r0, r3
    27b4:	bc3c      	pop	{r2, r3, r4, r5}
    27b6:	4690      	mov	r8, r2
    27b8:	4699      	mov	r9, r3
    27ba:	46a2      	mov	sl, r4
    27bc:	46ab      	mov	fp, r5
    27be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c0:	2800      	cmp	r0, #0
    27c2:	d0f2      	beq.n	27aa <__gedf2+0x5e>
    27c4:	4258      	negs	r0, r3
    27c6:	4158      	adcs	r0, r3
    27c8:	2201      	movs	r2, #1
    27ca:	4240      	negs	r0, r0
    27cc:	4310      	orrs	r0, r2
    27ce:	e7f1      	b.n	27b4 <__gedf2+0x68>
    27d0:	0037      	movs	r7, r6
    27d2:	4307      	orrs	r7, r0
    27d4:	d0d0      	beq.n	2778 <__gedf2+0x2c>
    27d6:	2002      	movs	r0, #2
    27d8:	4240      	negs	r0, r0
    27da:	e7eb      	b.n	27b4 <__gedf2+0x68>
    27dc:	465f      	mov	r7, fp
    27de:	4317      	orrs	r7, r2
    27e0:	d0cd      	beq.n	277e <__gedf2+0x32>
    27e2:	e7f8      	b.n	27d6 <__gedf2+0x8a>
    27e4:	42a5      	cmp	r5, r4
    27e6:	dce2      	bgt.n	27ae <__gedf2+0x62>
    27e8:	db05      	blt.n	27f6 <__gedf2+0xaa>
    27ea:	455e      	cmp	r6, fp
    27ec:	d8df      	bhi.n	27ae <__gedf2+0x62>
    27ee:	d008      	beq.n	2802 <__gedf2+0xb6>
    27f0:	2000      	movs	r0, #0
    27f2:	455e      	cmp	r6, fp
    27f4:	d2de      	bcs.n	27b4 <__gedf2+0x68>
    27f6:	4248      	negs	r0, r1
    27f8:	4148      	adcs	r0, r1
    27fa:	2301      	movs	r3, #1
    27fc:	4240      	negs	r0, r0
    27fe:	4318      	orrs	r0, r3
    2800:	e7d8      	b.n	27b4 <__gedf2+0x68>
    2802:	45c4      	cmp	ip, r8
    2804:	d8d3      	bhi.n	27ae <__gedf2+0x62>
    2806:	2000      	movs	r0, #0
    2808:	45c4      	cmp	ip, r8
    280a:	d3f4      	bcc.n	27f6 <__gedf2+0xaa>
    280c:	e7d2      	b.n	27b4 <__gedf2+0x68>
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	000007ff 	.word	0x000007ff

00002814 <__ledf2>:
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
    2816:	465f      	mov	r7, fp
    2818:	464d      	mov	r5, r9
    281a:	4644      	mov	r4, r8
    281c:	4656      	mov	r6, sl
    281e:	b4f0      	push	{r4, r5, r6, r7}
    2820:	031c      	lsls	r4, r3, #12
    2822:	0b24      	lsrs	r4, r4, #12
    2824:	46a4      	mov	ip, r4
    2826:	4c2f      	ldr	r4, [pc, #188]	; (28e4 <__ledf2+0xd0>)
    2828:	030f      	lsls	r7, r1, #12
    282a:	004d      	lsls	r5, r1, #1
    282c:	005e      	lsls	r6, r3, #1
    282e:	0fc9      	lsrs	r1, r1, #31
    2830:	4680      	mov	r8, r0
    2832:	0b3f      	lsrs	r7, r7, #12
    2834:	0d6d      	lsrs	r5, r5, #21
    2836:	468b      	mov	fp, r1
    2838:	4691      	mov	r9, r2
    283a:	0d76      	lsrs	r6, r6, #21
    283c:	0fdb      	lsrs	r3, r3, #31
    283e:	42a5      	cmp	r5, r4
    2840:	d020      	beq.n	2884 <__ledf2+0x70>
    2842:	4c28      	ldr	r4, [pc, #160]	; (28e4 <__ledf2+0xd0>)
    2844:	42a6      	cmp	r6, r4
    2846:	d022      	beq.n	288e <__ledf2+0x7a>
    2848:	2d00      	cmp	r5, #0
    284a:	d112      	bne.n	2872 <__ledf2+0x5e>
    284c:	4338      	orrs	r0, r7
    284e:	4244      	negs	r4, r0
    2850:	4144      	adcs	r4, r0
    2852:	2e00      	cmp	r6, #0
    2854:	d020      	beq.n	2898 <__ledf2+0x84>
    2856:	2c00      	cmp	r4, #0
    2858:	d00d      	beq.n	2876 <__ledf2+0x62>
    285a:	425c      	negs	r4, r3
    285c:	4163      	adcs	r3, r4
    285e:	2401      	movs	r4, #1
    2860:	425b      	negs	r3, r3
    2862:	431c      	orrs	r4, r3
    2864:	0020      	movs	r0, r4
    2866:	bc3c      	pop	{r2, r3, r4, r5}
    2868:	4690      	mov	r8, r2
    286a:	4699      	mov	r9, r3
    286c:	46a2      	mov	sl, r4
    286e:	46ab      	mov	fp, r5
    2870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2872:	2e00      	cmp	r6, #0
    2874:	d017      	beq.n	28a6 <__ledf2+0x92>
    2876:	455b      	cmp	r3, fp
    2878:	d019      	beq.n	28ae <__ledf2+0x9a>
    287a:	465b      	mov	r3, fp
    287c:	425c      	negs	r4, r3
    287e:	2301      	movs	r3, #1
    2880:	431c      	orrs	r4, r3
    2882:	e7ef      	b.n	2864 <__ledf2+0x50>
    2884:	0039      	movs	r1, r7
    2886:	2402      	movs	r4, #2
    2888:	4301      	orrs	r1, r0
    288a:	d1eb      	bne.n	2864 <__ledf2+0x50>
    288c:	e7d9      	b.n	2842 <__ledf2+0x2e>
    288e:	4661      	mov	r1, ip
    2890:	2402      	movs	r4, #2
    2892:	4311      	orrs	r1, r2
    2894:	d1e6      	bne.n	2864 <__ledf2+0x50>
    2896:	e7d7      	b.n	2848 <__ledf2+0x34>
    2898:	4661      	mov	r1, ip
    289a:	430a      	orrs	r2, r1
    289c:	d1db      	bne.n	2856 <__ledf2+0x42>
    289e:	2400      	movs	r4, #0
    28a0:	2800      	cmp	r0, #0
    28a2:	d0df      	beq.n	2864 <__ledf2+0x50>
    28a4:	e7e9      	b.n	287a <__ledf2+0x66>
    28a6:	4661      	mov	r1, ip
    28a8:	430a      	orrs	r2, r1
    28aa:	d1e4      	bne.n	2876 <__ledf2+0x62>
    28ac:	e7e5      	b.n	287a <__ledf2+0x66>
    28ae:	42b5      	cmp	r5, r6
    28b0:	dd03      	ble.n	28ba <__ledf2+0xa6>
    28b2:	2201      	movs	r2, #1
    28b4:	425c      	negs	r4, r3
    28b6:	4314      	orrs	r4, r2
    28b8:	e7d4      	b.n	2864 <__ledf2+0x50>
    28ba:	42b5      	cmp	r5, r6
    28bc:	dbcd      	blt.n	285a <__ledf2+0x46>
    28be:	4567      	cmp	r7, ip
    28c0:	d8db      	bhi.n	287a <__ledf2+0x66>
    28c2:	d009      	beq.n	28d8 <__ledf2+0xc4>
    28c4:	2400      	movs	r4, #0
    28c6:	4567      	cmp	r7, ip
    28c8:	d2cc      	bcs.n	2864 <__ledf2+0x50>
    28ca:	4659      	mov	r1, fp
    28cc:	424c      	negs	r4, r1
    28ce:	4161      	adcs	r1, r4
    28d0:	2401      	movs	r4, #1
    28d2:	4249      	negs	r1, r1
    28d4:	430c      	orrs	r4, r1
    28d6:	e7c5      	b.n	2864 <__ledf2+0x50>
    28d8:	45c8      	cmp	r8, r9
    28da:	d8ce      	bhi.n	287a <__ledf2+0x66>
    28dc:	2400      	movs	r4, #0
    28de:	45c8      	cmp	r8, r9
    28e0:	d3f3      	bcc.n	28ca <__ledf2+0xb6>
    28e2:	e7bf      	b.n	2864 <__ledf2+0x50>
    28e4:	000007ff 	.word	0x000007ff

000028e8 <__aeabi_dmul>:
    28e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ea:	465f      	mov	r7, fp
    28ec:	4656      	mov	r6, sl
    28ee:	464d      	mov	r5, r9
    28f0:	4644      	mov	r4, r8
    28f2:	b4f0      	push	{r4, r5, r6, r7}
    28f4:	030d      	lsls	r5, r1, #12
    28f6:	4699      	mov	r9, r3
    28f8:	004e      	lsls	r6, r1, #1
    28fa:	0b2b      	lsrs	r3, r5, #12
    28fc:	b087      	sub	sp, #28
    28fe:	0007      	movs	r7, r0
    2900:	4692      	mov	sl, r2
    2902:	4680      	mov	r8, r0
    2904:	469b      	mov	fp, r3
    2906:	0d76      	lsrs	r6, r6, #21
    2908:	0fcc      	lsrs	r4, r1, #31
    290a:	2e00      	cmp	r6, #0
    290c:	d069      	beq.n	29e2 <__aeabi_dmul+0xfa>
    290e:	4b6d      	ldr	r3, [pc, #436]	; (2ac4 <__aeabi_dmul+0x1dc>)
    2910:	429e      	cmp	r6, r3
    2912:	d035      	beq.n	2980 <__aeabi_dmul+0x98>
    2914:	465b      	mov	r3, fp
    2916:	2280      	movs	r2, #128	; 0x80
    2918:	00dd      	lsls	r5, r3, #3
    291a:	0412      	lsls	r2, r2, #16
    291c:	0f43      	lsrs	r3, r0, #29
    291e:	4313      	orrs	r3, r2
    2920:	432b      	orrs	r3, r5
    2922:	469b      	mov	fp, r3
    2924:	00c3      	lsls	r3, r0, #3
    2926:	4698      	mov	r8, r3
    2928:	4b67      	ldr	r3, [pc, #412]	; (2ac8 <__aeabi_dmul+0x1e0>)
    292a:	2700      	movs	r7, #0
    292c:	469c      	mov	ip, r3
    292e:	2300      	movs	r3, #0
    2930:	4466      	add	r6, ip
    2932:	9301      	str	r3, [sp, #4]
    2934:	464a      	mov	r2, r9
    2936:	0315      	lsls	r5, r2, #12
    2938:	0050      	lsls	r0, r2, #1
    293a:	0fd2      	lsrs	r2, r2, #31
    293c:	4653      	mov	r3, sl
    293e:	0b2d      	lsrs	r5, r5, #12
    2940:	0d40      	lsrs	r0, r0, #21
    2942:	4691      	mov	r9, r2
    2944:	d100      	bne.n	2948 <__aeabi_dmul+0x60>
    2946:	e076      	b.n	2a36 <__aeabi_dmul+0x14e>
    2948:	4a5e      	ldr	r2, [pc, #376]	; (2ac4 <__aeabi_dmul+0x1dc>)
    294a:	4290      	cmp	r0, r2
    294c:	d06c      	beq.n	2a28 <__aeabi_dmul+0x140>
    294e:	2280      	movs	r2, #128	; 0x80
    2950:	0f5b      	lsrs	r3, r3, #29
    2952:	0412      	lsls	r2, r2, #16
    2954:	4313      	orrs	r3, r2
    2956:	4a5c      	ldr	r2, [pc, #368]	; (2ac8 <__aeabi_dmul+0x1e0>)
    2958:	00ed      	lsls	r5, r5, #3
    295a:	4694      	mov	ip, r2
    295c:	431d      	orrs	r5, r3
    295e:	4653      	mov	r3, sl
    2960:	2200      	movs	r2, #0
    2962:	00db      	lsls	r3, r3, #3
    2964:	4460      	add	r0, ip
    2966:	4649      	mov	r1, r9
    2968:	1836      	adds	r6, r6, r0
    296a:	1c70      	adds	r0, r6, #1
    296c:	4061      	eors	r1, r4
    296e:	9002      	str	r0, [sp, #8]
    2970:	4317      	orrs	r7, r2
    2972:	2f0f      	cmp	r7, #15
    2974:	d900      	bls.n	2978 <__aeabi_dmul+0x90>
    2976:	e0af      	b.n	2ad8 <__aeabi_dmul+0x1f0>
    2978:	4854      	ldr	r0, [pc, #336]	; (2acc <__aeabi_dmul+0x1e4>)
    297a:	00bf      	lsls	r7, r7, #2
    297c:	59c7      	ldr	r7, [r0, r7]
    297e:	46bf      	mov	pc, r7
    2980:	465b      	mov	r3, fp
    2982:	431f      	orrs	r7, r3
    2984:	d000      	beq.n	2988 <__aeabi_dmul+0xa0>
    2986:	e088      	b.n	2a9a <__aeabi_dmul+0x1b2>
    2988:	2300      	movs	r3, #0
    298a:	469b      	mov	fp, r3
    298c:	4698      	mov	r8, r3
    298e:	3302      	adds	r3, #2
    2990:	2708      	movs	r7, #8
    2992:	9301      	str	r3, [sp, #4]
    2994:	e7ce      	b.n	2934 <__aeabi_dmul+0x4c>
    2996:	4649      	mov	r1, r9
    2998:	2a02      	cmp	r2, #2
    299a:	d06a      	beq.n	2a72 <__aeabi_dmul+0x18a>
    299c:	2a03      	cmp	r2, #3
    299e:	d100      	bne.n	29a2 <__aeabi_dmul+0xba>
    29a0:	e209      	b.n	2db6 <__aeabi_dmul+0x4ce>
    29a2:	2a01      	cmp	r2, #1
    29a4:	d000      	beq.n	29a8 <__aeabi_dmul+0xc0>
    29a6:	e1bb      	b.n	2d20 <__aeabi_dmul+0x438>
    29a8:	4011      	ands	r1, r2
    29aa:	2200      	movs	r2, #0
    29ac:	2300      	movs	r3, #0
    29ae:	2500      	movs	r5, #0
    29b0:	4690      	mov	r8, r2
    29b2:	b2cc      	uxtb	r4, r1
    29b4:	2100      	movs	r1, #0
    29b6:	032d      	lsls	r5, r5, #12
    29b8:	0d0a      	lsrs	r2, r1, #20
    29ba:	0512      	lsls	r2, r2, #20
    29bc:	0b2d      	lsrs	r5, r5, #12
    29be:	4315      	orrs	r5, r2
    29c0:	4a43      	ldr	r2, [pc, #268]	; (2ad0 <__aeabi_dmul+0x1e8>)
    29c2:	051b      	lsls	r3, r3, #20
    29c4:	4015      	ands	r5, r2
    29c6:	431d      	orrs	r5, r3
    29c8:	006d      	lsls	r5, r5, #1
    29ca:	07e4      	lsls	r4, r4, #31
    29cc:	086d      	lsrs	r5, r5, #1
    29ce:	4325      	orrs	r5, r4
    29d0:	4640      	mov	r0, r8
    29d2:	0029      	movs	r1, r5
    29d4:	b007      	add	sp, #28
    29d6:	bc3c      	pop	{r2, r3, r4, r5}
    29d8:	4690      	mov	r8, r2
    29da:	4699      	mov	r9, r3
    29dc:	46a2      	mov	sl, r4
    29de:	46ab      	mov	fp, r5
    29e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29e2:	4303      	orrs	r3, r0
    29e4:	d052      	beq.n	2a8c <__aeabi_dmul+0x1a4>
    29e6:	465b      	mov	r3, fp
    29e8:	2b00      	cmp	r3, #0
    29ea:	d100      	bne.n	29ee <__aeabi_dmul+0x106>
    29ec:	e18a      	b.n	2d04 <__aeabi_dmul+0x41c>
    29ee:	4658      	mov	r0, fp
    29f0:	f000 fb16 	bl	3020 <__clzsi2>
    29f4:	0003      	movs	r3, r0
    29f6:	3b0b      	subs	r3, #11
    29f8:	2b1c      	cmp	r3, #28
    29fa:	dd00      	ble.n	29fe <__aeabi_dmul+0x116>
    29fc:	e17b      	b.n	2cf6 <__aeabi_dmul+0x40e>
    29fe:	221d      	movs	r2, #29
    2a00:	1ad3      	subs	r3, r2, r3
    2a02:	003a      	movs	r2, r7
    2a04:	0001      	movs	r1, r0
    2a06:	465d      	mov	r5, fp
    2a08:	40da      	lsrs	r2, r3
    2a0a:	3908      	subs	r1, #8
    2a0c:	408d      	lsls	r5, r1
    2a0e:	0013      	movs	r3, r2
    2a10:	408f      	lsls	r7, r1
    2a12:	432b      	orrs	r3, r5
    2a14:	469b      	mov	fp, r3
    2a16:	46b8      	mov	r8, r7
    2a18:	4b2e      	ldr	r3, [pc, #184]	; (2ad4 <__aeabi_dmul+0x1ec>)
    2a1a:	2700      	movs	r7, #0
    2a1c:	469c      	mov	ip, r3
    2a1e:	2300      	movs	r3, #0
    2a20:	4460      	add	r0, ip
    2a22:	4246      	negs	r6, r0
    2a24:	9301      	str	r3, [sp, #4]
    2a26:	e785      	b.n	2934 <__aeabi_dmul+0x4c>
    2a28:	4652      	mov	r2, sl
    2a2a:	432a      	orrs	r2, r5
    2a2c:	d12c      	bne.n	2a88 <__aeabi_dmul+0x1a0>
    2a2e:	2500      	movs	r5, #0
    2a30:	2300      	movs	r3, #0
    2a32:	2202      	movs	r2, #2
    2a34:	e797      	b.n	2966 <__aeabi_dmul+0x7e>
    2a36:	4652      	mov	r2, sl
    2a38:	432a      	orrs	r2, r5
    2a3a:	d021      	beq.n	2a80 <__aeabi_dmul+0x198>
    2a3c:	2d00      	cmp	r5, #0
    2a3e:	d100      	bne.n	2a42 <__aeabi_dmul+0x15a>
    2a40:	e154      	b.n	2cec <__aeabi_dmul+0x404>
    2a42:	0028      	movs	r0, r5
    2a44:	f000 faec 	bl	3020 <__clzsi2>
    2a48:	0003      	movs	r3, r0
    2a4a:	3b0b      	subs	r3, #11
    2a4c:	2b1c      	cmp	r3, #28
    2a4e:	dd00      	ble.n	2a52 <__aeabi_dmul+0x16a>
    2a50:	e146      	b.n	2ce0 <__aeabi_dmul+0x3f8>
    2a52:	211d      	movs	r1, #29
    2a54:	1acb      	subs	r3, r1, r3
    2a56:	4651      	mov	r1, sl
    2a58:	0002      	movs	r2, r0
    2a5a:	40d9      	lsrs	r1, r3
    2a5c:	4653      	mov	r3, sl
    2a5e:	3a08      	subs	r2, #8
    2a60:	4095      	lsls	r5, r2
    2a62:	4093      	lsls	r3, r2
    2a64:	430d      	orrs	r5, r1
    2a66:	4a1b      	ldr	r2, [pc, #108]	; (2ad4 <__aeabi_dmul+0x1ec>)
    2a68:	4694      	mov	ip, r2
    2a6a:	4460      	add	r0, ip
    2a6c:	4240      	negs	r0, r0
    2a6e:	2200      	movs	r2, #0
    2a70:	e779      	b.n	2966 <__aeabi_dmul+0x7e>
    2a72:	2401      	movs	r4, #1
    2a74:	2200      	movs	r2, #0
    2a76:	400c      	ands	r4, r1
    2a78:	4b12      	ldr	r3, [pc, #72]	; (2ac4 <__aeabi_dmul+0x1dc>)
    2a7a:	2500      	movs	r5, #0
    2a7c:	4690      	mov	r8, r2
    2a7e:	e799      	b.n	29b4 <__aeabi_dmul+0xcc>
    2a80:	2500      	movs	r5, #0
    2a82:	2300      	movs	r3, #0
    2a84:	2201      	movs	r2, #1
    2a86:	e76e      	b.n	2966 <__aeabi_dmul+0x7e>
    2a88:	2203      	movs	r2, #3
    2a8a:	e76c      	b.n	2966 <__aeabi_dmul+0x7e>
    2a8c:	2300      	movs	r3, #0
    2a8e:	469b      	mov	fp, r3
    2a90:	4698      	mov	r8, r3
    2a92:	3301      	adds	r3, #1
    2a94:	2704      	movs	r7, #4
    2a96:	9301      	str	r3, [sp, #4]
    2a98:	e74c      	b.n	2934 <__aeabi_dmul+0x4c>
    2a9a:	2303      	movs	r3, #3
    2a9c:	270c      	movs	r7, #12
    2a9e:	9301      	str	r3, [sp, #4]
    2aa0:	e748      	b.n	2934 <__aeabi_dmul+0x4c>
    2aa2:	2300      	movs	r3, #0
    2aa4:	2580      	movs	r5, #128	; 0x80
    2aa6:	4698      	mov	r8, r3
    2aa8:	2400      	movs	r4, #0
    2aaa:	032d      	lsls	r5, r5, #12
    2aac:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <__aeabi_dmul+0x1dc>)
    2aae:	e781      	b.n	29b4 <__aeabi_dmul+0xcc>
    2ab0:	465d      	mov	r5, fp
    2ab2:	4643      	mov	r3, r8
    2ab4:	9a01      	ldr	r2, [sp, #4]
    2ab6:	e76f      	b.n	2998 <__aeabi_dmul+0xb0>
    2ab8:	465d      	mov	r5, fp
    2aba:	4643      	mov	r3, r8
    2abc:	0021      	movs	r1, r4
    2abe:	9a01      	ldr	r2, [sp, #4]
    2ac0:	e76a      	b.n	2998 <__aeabi_dmul+0xb0>
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	000007ff 	.word	0x000007ff
    2ac8:	fffffc01 	.word	0xfffffc01
    2acc:	000034ac 	.word	0x000034ac
    2ad0:	800fffff 	.word	0x800fffff
    2ad4:	000003f3 	.word	0x000003f3
    2ad8:	4642      	mov	r2, r8
    2ada:	0c12      	lsrs	r2, r2, #16
    2adc:	4691      	mov	r9, r2
    2ade:	0c1a      	lsrs	r2, r3, #16
    2ae0:	4694      	mov	ip, r2
    2ae2:	4642      	mov	r2, r8
    2ae4:	0417      	lsls	r7, r2, #16
    2ae6:	464a      	mov	r2, r9
    2ae8:	041b      	lsls	r3, r3, #16
    2aea:	0c1b      	lsrs	r3, r3, #16
    2aec:	435a      	muls	r2, r3
    2aee:	4660      	mov	r0, ip
    2af0:	4690      	mov	r8, r2
    2af2:	464a      	mov	r2, r9
    2af4:	4342      	muls	r2, r0
    2af6:	0010      	movs	r0, r2
    2af8:	9203      	str	r2, [sp, #12]
    2afa:	4662      	mov	r2, ip
    2afc:	001c      	movs	r4, r3
    2afe:	0c3f      	lsrs	r7, r7, #16
    2b00:	437a      	muls	r2, r7
    2b02:	437c      	muls	r4, r7
    2b04:	4442      	add	r2, r8
    2b06:	9201      	str	r2, [sp, #4]
    2b08:	0c22      	lsrs	r2, r4, #16
    2b0a:	4692      	mov	sl, r2
    2b0c:	9a01      	ldr	r2, [sp, #4]
    2b0e:	4452      	add	r2, sl
    2b10:	4590      	cmp	r8, r2
    2b12:	d906      	bls.n	2b22 <__aeabi_dmul+0x23a>
    2b14:	4682      	mov	sl, r0
    2b16:	2080      	movs	r0, #128	; 0x80
    2b18:	0240      	lsls	r0, r0, #9
    2b1a:	4680      	mov	r8, r0
    2b1c:	44c2      	add	sl, r8
    2b1e:	4650      	mov	r0, sl
    2b20:	9003      	str	r0, [sp, #12]
    2b22:	0c10      	lsrs	r0, r2, #16
    2b24:	9004      	str	r0, [sp, #16]
    2b26:	4648      	mov	r0, r9
    2b28:	0424      	lsls	r4, r4, #16
    2b2a:	0c24      	lsrs	r4, r4, #16
    2b2c:	0412      	lsls	r2, r2, #16
    2b2e:	1912      	adds	r2, r2, r4
    2b30:	9205      	str	r2, [sp, #20]
    2b32:	0c2a      	lsrs	r2, r5, #16
    2b34:	042d      	lsls	r5, r5, #16
    2b36:	0c2d      	lsrs	r5, r5, #16
    2b38:	4368      	muls	r0, r5
    2b3a:	002c      	movs	r4, r5
    2b3c:	4682      	mov	sl, r0
    2b3e:	4648      	mov	r0, r9
    2b40:	437c      	muls	r4, r7
    2b42:	4350      	muls	r0, r2
    2b44:	4681      	mov	r9, r0
    2b46:	0c20      	lsrs	r0, r4, #16
    2b48:	4680      	mov	r8, r0
    2b4a:	4357      	muls	r7, r2
    2b4c:	4457      	add	r7, sl
    2b4e:	4447      	add	r7, r8
    2b50:	45ba      	cmp	sl, r7
    2b52:	d903      	bls.n	2b5c <__aeabi_dmul+0x274>
    2b54:	2080      	movs	r0, #128	; 0x80
    2b56:	0240      	lsls	r0, r0, #9
    2b58:	4680      	mov	r8, r0
    2b5a:	44c1      	add	r9, r8
    2b5c:	0c38      	lsrs	r0, r7, #16
    2b5e:	043f      	lsls	r7, r7, #16
    2b60:	46b8      	mov	r8, r7
    2b62:	4448      	add	r0, r9
    2b64:	0424      	lsls	r4, r4, #16
    2b66:	0c24      	lsrs	r4, r4, #16
    2b68:	9001      	str	r0, [sp, #4]
    2b6a:	9804      	ldr	r0, [sp, #16]
    2b6c:	44a0      	add	r8, r4
    2b6e:	4440      	add	r0, r8
    2b70:	9004      	str	r0, [sp, #16]
    2b72:	4658      	mov	r0, fp
    2b74:	0c00      	lsrs	r0, r0, #16
    2b76:	4681      	mov	r9, r0
    2b78:	4658      	mov	r0, fp
    2b7a:	0404      	lsls	r4, r0, #16
    2b7c:	0c20      	lsrs	r0, r4, #16
    2b7e:	4682      	mov	sl, r0
    2b80:	0007      	movs	r7, r0
    2b82:	4648      	mov	r0, r9
    2b84:	435f      	muls	r7, r3
    2b86:	464c      	mov	r4, r9
    2b88:	4343      	muls	r3, r0
    2b8a:	4660      	mov	r0, ip
    2b8c:	4360      	muls	r0, r4
    2b8e:	4664      	mov	r4, ip
    2b90:	4683      	mov	fp, r0
    2b92:	4650      	mov	r0, sl
    2b94:	4344      	muls	r4, r0
    2b96:	0c38      	lsrs	r0, r7, #16
    2b98:	4684      	mov	ip, r0
    2b9a:	18e4      	adds	r4, r4, r3
    2b9c:	4464      	add	r4, ip
    2b9e:	42a3      	cmp	r3, r4
    2ba0:	d903      	bls.n	2baa <__aeabi_dmul+0x2c2>
    2ba2:	2380      	movs	r3, #128	; 0x80
    2ba4:	025b      	lsls	r3, r3, #9
    2ba6:	469c      	mov	ip, r3
    2ba8:	44e3      	add	fp, ip
    2baa:	4648      	mov	r0, r9
    2bac:	043f      	lsls	r7, r7, #16
    2bae:	0c23      	lsrs	r3, r4, #16
    2bb0:	0c3f      	lsrs	r7, r7, #16
    2bb2:	0424      	lsls	r4, r4, #16
    2bb4:	19e4      	adds	r4, r4, r7
    2bb6:	4657      	mov	r7, sl
    2bb8:	4368      	muls	r0, r5
    2bba:	436f      	muls	r7, r5
    2bbc:	4684      	mov	ip, r0
    2bbe:	464d      	mov	r5, r9
    2bc0:	4650      	mov	r0, sl
    2bc2:	4355      	muls	r5, r2
    2bc4:	4342      	muls	r2, r0
    2bc6:	0c38      	lsrs	r0, r7, #16
    2bc8:	4681      	mov	r9, r0
    2bca:	4462      	add	r2, ip
    2bcc:	444a      	add	r2, r9
    2bce:	445b      	add	r3, fp
    2bd0:	4594      	cmp	ip, r2
    2bd2:	d903      	bls.n	2bdc <__aeabi_dmul+0x2f4>
    2bd4:	2080      	movs	r0, #128	; 0x80
    2bd6:	0240      	lsls	r0, r0, #9
    2bd8:	4684      	mov	ip, r0
    2bda:	4465      	add	r5, ip
    2bdc:	9803      	ldr	r0, [sp, #12]
    2bde:	043f      	lsls	r7, r7, #16
    2be0:	4683      	mov	fp, r0
    2be2:	9804      	ldr	r0, [sp, #16]
    2be4:	0c3f      	lsrs	r7, r7, #16
    2be6:	4684      	mov	ip, r0
    2be8:	44e3      	add	fp, ip
    2bea:	45c3      	cmp	fp, r8
    2bec:	4180      	sbcs	r0, r0
    2bee:	4240      	negs	r0, r0
    2bf0:	4682      	mov	sl, r0
    2bf2:	0410      	lsls	r0, r2, #16
    2bf4:	4684      	mov	ip, r0
    2bf6:	9801      	ldr	r0, [sp, #4]
    2bf8:	4467      	add	r7, ip
    2bfa:	4684      	mov	ip, r0
    2bfc:	4467      	add	r7, ip
    2bfe:	44a3      	add	fp, r4
    2c00:	46bc      	mov	ip, r7
    2c02:	45a3      	cmp	fp, r4
    2c04:	41a4      	sbcs	r4, r4
    2c06:	4699      	mov	r9, r3
    2c08:	44d4      	add	ip, sl
    2c0a:	4264      	negs	r4, r4
    2c0c:	4287      	cmp	r7, r0
    2c0e:	41bf      	sbcs	r7, r7
    2c10:	45d4      	cmp	ip, sl
    2c12:	4180      	sbcs	r0, r0
    2c14:	44e1      	add	r9, ip
    2c16:	46a0      	mov	r8, r4
    2c18:	4599      	cmp	r9, r3
    2c1a:	419b      	sbcs	r3, r3
    2c1c:	427f      	negs	r7, r7
    2c1e:	4240      	negs	r0, r0
    2c20:	44c8      	add	r8, r9
    2c22:	4307      	orrs	r7, r0
    2c24:	0c12      	lsrs	r2, r2, #16
    2c26:	18ba      	adds	r2, r7, r2
    2c28:	45a0      	cmp	r8, r4
    2c2a:	41a4      	sbcs	r4, r4
    2c2c:	425f      	negs	r7, r3
    2c2e:	003b      	movs	r3, r7
    2c30:	4264      	negs	r4, r4
    2c32:	4323      	orrs	r3, r4
    2c34:	18d7      	adds	r7, r2, r3
    2c36:	4643      	mov	r3, r8
    2c38:	197d      	adds	r5, r7, r5
    2c3a:	0ddb      	lsrs	r3, r3, #23
    2c3c:	026d      	lsls	r5, r5, #9
    2c3e:	431d      	orrs	r5, r3
    2c40:	465b      	mov	r3, fp
    2c42:	025a      	lsls	r2, r3, #9
    2c44:	9b05      	ldr	r3, [sp, #20]
    2c46:	431a      	orrs	r2, r3
    2c48:	1e53      	subs	r3, r2, #1
    2c4a:	419a      	sbcs	r2, r3
    2c4c:	465b      	mov	r3, fp
    2c4e:	0ddb      	lsrs	r3, r3, #23
    2c50:	431a      	orrs	r2, r3
    2c52:	4643      	mov	r3, r8
    2c54:	025b      	lsls	r3, r3, #9
    2c56:	4313      	orrs	r3, r2
    2c58:	01ea      	lsls	r2, r5, #7
    2c5a:	d507      	bpl.n	2c6c <__aeabi_dmul+0x384>
    2c5c:	2201      	movs	r2, #1
    2c5e:	085c      	lsrs	r4, r3, #1
    2c60:	4013      	ands	r3, r2
    2c62:	4323      	orrs	r3, r4
    2c64:	07ea      	lsls	r2, r5, #31
    2c66:	9e02      	ldr	r6, [sp, #8]
    2c68:	4313      	orrs	r3, r2
    2c6a:	086d      	lsrs	r5, r5, #1
    2c6c:	4a57      	ldr	r2, [pc, #348]	; (2dcc <__aeabi_dmul+0x4e4>)
    2c6e:	18b2      	adds	r2, r6, r2
    2c70:	2a00      	cmp	r2, #0
    2c72:	dd4b      	ble.n	2d0c <__aeabi_dmul+0x424>
    2c74:	0758      	lsls	r0, r3, #29
    2c76:	d009      	beq.n	2c8c <__aeabi_dmul+0x3a4>
    2c78:	200f      	movs	r0, #15
    2c7a:	4018      	ands	r0, r3
    2c7c:	2804      	cmp	r0, #4
    2c7e:	d005      	beq.n	2c8c <__aeabi_dmul+0x3a4>
    2c80:	1d18      	adds	r0, r3, #4
    2c82:	4298      	cmp	r0, r3
    2c84:	419b      	sbcs	r3, r3
    2c86:	425b      	negs	r3, r3
    2c88:	18ed      	adds	r5, r5, r3
    2c8a:	0003      	movs	r3, r0
    2c8c:	01e8      	lsls	r0, r5, #7
    2c8e:	d504      	bpl.n	2c9a <__aeabi_dmul+0x3b2>
    2c90:	4a4f      	ldr	r2, [pc, #316]	; (2dd0 <__aeabi_dmul+0x4e8>)
    2c92:	4015      	ands	r5, r2
    2c94:	2280      	movs	r2, #128	; 0x80
    2c96:	00d2      	lsls	r2, r2, #3
    2c98:	18b2      	adds	r2, r6, r2
    2c9a:	484e      	ldr	r0, [pc, #312]	; (2dd4 <__aeabi_dmul+0x4ec>)
    2c9c:	4282      	cmp	r2, r0
    2c9e:	dd00      	ble.n	2ca2 <__aeabi_dmul+0x3ba>
    2ca0:	e6e7      	b.n	2a72 <__aeabi_dmul+0x18a>
    2ca2:	2401      	movs	r4, #1
    2ca4:	08db      	lsrs	r3, r3, #3
    2ca6:	0768      	lsls	r0, r5, #29
    2ca8:	4318      	orrs	r0, r3
    2caa:	026d      	lsls	r5, r5, #9
    2cac:	0553      	lsls	r3, r2, #21
    2cae:	4680      	mov	r8, r0
    2cb0:	0b2d      	lsrs	r5, r5, #12
    2cb2:	0d5b      	lsrs	r3, r3, #21
    2cb4:	400c      	ands	r4, r1
    2cb6:	e67d      	b.n	29b4 <__aeabi_dmul+0xcc>
    2cb8:	2280      	movs	r2, #128	; 0x80
    2cba:	4659      	mov	r1, fp
    2cbc:	0312      	lsls	r2, r2, #12
    2cbe:	4211      	tst	r1, r2
    2cc0:	d008      	beq.n	2cd4 <__aeabi_dmul+0x3ec>
    2cc2:	4215      	tst	r5, r2
    2cc4:	d106      	bne.n	2cd4 <__aeabi_dmul+0x3ec>
    2cc6:	4315      	orrs	r5, r2
    2cc8:	032d      	lsls	r5, r5, #12
    2cca:	4698      	mov	r8, r3
    2ccc:	0b2d      	lsrs	r5, r5, #12
    2cce:	464c      	mov	r4, r9
    2cd0:	4b41      	ldr	r3, [pc, #260]	; (2dd8 <__aeabi_dmul+0x4f0>)
    2cd2:	e66f      	b.n	29b4 <__aeabi_dmul+0xcc>
    2cd4:	465d      	mov	r5, fp
    2cd6:	4315      	orrs	r5, r2
    2cd8:	032d      	lsls	r5, r5, #12
    2cda:	0b2d      	lsrs	r5, r5, #12
    2cdc:	4b3e      	ldr	r3, [pc, #248]	; (2dd8 <__aeabi_dmul+0x4f0>)
    2cde:	e669      	b.n	29b4 <__aeabi_dmul+0xcc>
    2ce0:	0003      	movs	r3, r0
    2ce2:	4655      	mov	r5, sl
    2ce4:	3b28      	subs	r3, #40	; 0x28
    2ce6:	409d      	lsls	r5, r3
    2ce8:	2300      	movs	r3, #0
    2cea:	e6bc      	b.n	2a66 <__aeabi_dmul+0x17e>
    2cec:	4650      	mov	r0, sl
    2cee:	f000 f997 	bl	3020 <__clzsi2>
    2cf2:	3020      	adds	r0, #32
    2cf4:	e6a8      	b.n	2a48 <__aeabi_dmul+0x160>
    2cf6:	0003      	movs	r3, r0
    2cf8:	3b28      	subs	r3, #40	; 0x28
    2cfa:	409f      	lsls	r7, r3
    2cfc:	2300      	movs	r3, #0
    2cfe:	46bb      	mov	fp, r7
    2d00:	4698      	mov	r8, r3
    2d02:	e689      	b.n	2a18 <__aeabi_dmul+0x130>
    2d04:	f000 f98c 	bl	3020 <__clzsi2>
    2d08:	3020      	adds	r0, #32
    2d0a:	e673      	b.n	29f4 <__aeabi_dmul+0x10c>
    2d0c:	2401      	movs	r4, #1
    2d0e:	1aa6      	subs	r6, r4, r2
    2d10:	2e38      	cmp	r6, #56	; 0x38
    2d12:	dd07      	ble.n	2d24 <__aeabi_dmul+0x43c>
    2d14:	2200      	movs	r2, #0
    2d16:	400c      	ands	r4, r1
    2d18:	2300      	movs	r3, #0
    2d1a:	2500      	movs	r5, #0
    2d1c:	4690      	mov	r8, r2
    2d1e:	e649      	b.n	29b4 <__aeabi_dmul+0xcc>
    2d20:	9e02      	ldr	r6, [sp, #8]
    2d22:	e7a3      	b.n	2c6c <__aeabi_dmul+0x384>
    2d24:	2e1f      	cmp	r6, #31
    2d26:	dc20      	bgt.n	2d6a <__aeabi_dmul+0x482>
    2d28:	2220      	movs	r2, #32
    2d2a:	002c      	movs	r4, r5
    2d2c:	0018      	movs	r0, r3
    2d2e:	1b92      	subs	r2, r2, r6
    2d30:	40f0      	lsrs	r0, r6
    2d32:	4094      	lsls	r4, r2
    2d34:	4093      	lsls	r3, r2
    2d36:	4304      	orrs	r4, r0
    2d38:	1e58      	subs	r0, r3, #1
    2d3a:	4183      	sbcs	r3, r0
    2d3c:	431c      	orrs	r4, r3
    2d3e:	40f5      	lsrs	r5, r6
    2d40:	0763      	lsls	r3, r4, #29
    2d42:	d009      	beq.n	2d58 <__aeabi_dmul+0x470>
    2d44:	230f      	movs	r3, #15
    2d46:	4023      	ands	r3, r4
    2d48:	2b04      	cmp	r3, #4
    2d4a:	d005      	beq.n	2d58 <__aeabi_dmul+0x470>
    2d4c:	0023      	movs	r3, r4
    2d4e:	1d1c      	adds	r4, r3, #4
    2d50:	429c      	cmp	r4, r3
    2d52:	4192      	sbcs	r2, r2
    2d54:	4252      	negs	r2, r2
    2d56:	18ad      	adds	r5, r5, r2
    2d58:	022b      	lsls	r3, r5, #8
    2d5a:	d51f      	bpl.n	2d9c <__aeabi_dmul+0x4b4>
    2d5c:	2401      	movs	r4, #1
    2d5e:	2200      	movs	r2, #0
    2d60:	400c      	ands	r4, r1
    2d62:	2301      	movs	r3, #1
    2d64:	2500      	movs	r5, #0
    2d66:	4690      	mov	r8, r2
    2d68:	e624      	b.n	29b4 <__aeabi_dmul+0xcc>
    2d6a:	201f      	movs	r0, #31
    2d6c:	002c      	movs	r4, r5
    2d6e:	4240      	negs	r0, r0
    2d70:	1a82      	subs	r2, r0, r2
    2d72:	40d4      	lsrs	r4, r2
    2d74:	2e20      	cmp	r6, #32
    2d76:	d01c      	beq.n	2db2 <__aeabi_dmul+0x4ca>
    2d78:	2240      	movs	r2, #64	; 0x40
    2d7a:	1b96      	subs	r6, r2, r6
    2d7c:	40b5      	lsls	r5, r6
    2d7e:	432b      	orrs	r3, r5
    2d80:	1e58      	subs	r0, r3, #1
    2d82:	4183      	sbcs	r3, r0
    2d84:	2007      	movs	r0, #7
    2d86:	4323      	orrs	r3, r4
    2d88:	4018      	ands	r0, r3
    2d8a:	2500      	movs	r5, #0
    2d8c:	2800      	cmp	r0, #0
    2d8e:	d009      	beq.n	2da4 <__aeabi_dmul+0x4bc>
    2d90:	220f      	movs	r2, #15
    2d92:	2500      	movs	r5, #0
    2d94:	401a      	ands	r2, r3
    2d96:	001c      	movs	r4, r3
    2d98:	2a04      	cmp	r2, #4
    2d9a:	d1d8      	bne.n	2d4e <__aeabi_dmul+0x466>
    2d9c:	0023      	movs	r3, r4
    2d9e:	0768      	lsls	r0, r5, #29
    2da0:	026d      	lsls	r5, r5, #9
    2da2:	0b2d      	lsrs	r5, r5, #12
    2da4:	2401      	movs	r4, #1
    2da6:	08db      	lsrs	r3, r3, #3
    2da8:	4303      	orrs	r3, r0
    2daa:	4698      	mov	r8, r3
    2dac:	400c      	ands	r4, r1
    2dae:	2300      	movs	r3, #0
    2db0:	e600      	b.n	29b4 <__aeabi_dmul+0xcc>
    2db2:	2500      	movs	r5, #0
    2db4:	e7e3      	b.n	2d7e <__aeabi_dmul+0x496>
    2db6:	2280      	movs	r2, #128	; 0x80
    2db8:	2401      	movs	r4, #1
    2dba:	0312      	lsls	r2, r2, #12
    2dbc:	4315      	orrs	r5, r2
    2dbe:	032d      	lsls	r5, r5, #12
    2dc0:	4698      	mov	r8, r3
    2dc2:	0b2d      	lsrs	r5, r5, #12
    2dc4:	400c      	ands	r4, r1
    2dc6:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <__aeabi_dmul+0x4f0>)
    2dc8:	e5f4      	b.n	29b4 <__aeabi_dmul+0xcc>
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	000003ff 	.word	0x000003ff
    2dd0:	feffffff 	.word	0xfeffffff
    2dd4:	000007fe 	.word	0x000007fe
    2dd8:	000007ff 	.word	0x000007ff

00002ddc <__aeabi_i2d>:
    2ddc:	b570      	push	{r4, r5, r6, lr}
    2dde:	2800      	cmp	r0, #0
    2de0:	d030      	beq.n	2e44 <__aeabi_i2d+0x68>
    2de2:	17c3      	asrs	r3, r0, #31
    2de4:	18c4      	adds	r4, r0, r3
    2de6:	405c      	eors	r4, r3
    2de8:	0fc5      	lsrs	r5, r0, #31
    2dea:	0020      	movs	r0, r4
    2dec:	f000 f918 	bl	3020 <__clzsi2>
    2df0:	4b17      	ldr	r3, [pc, #92]	; (2e50 <__aeabi_i2d+0x74>)
    2df2:	4a18      	ldr	r2, [pc, #96]	; (2e54 <__aeabi_i2d+0x78>)
    2df4:	1a1b      	subs	r3, r3, r0
    2df6:	1ad2      	subs	r2, r2, r3
    2df8:	2a1f      	cmp	r2, #31
    2dfa:	dd18      	ble.n	2e2e <__aeabi_i2d+0x52>
    2dfc:	4a16      	ldr	r2, [pc, #88]	; (2e58 <__aeabi_i2d+0x7c>)
    2dfe:	1ad2      	subs	r2, r2, r3
    2e00:	4094      	lsls	r4, r2
    2e02:	2200      	movs	r2, #0
    2e04:	0324      	lsls	r4, r4, #12
    2e06:	055b      	lsls	r3, r3, #21
    2e08:	0b24      	lsrs	r4, r4, #12
    2e0a:	0d5b      	lsrs	r3, r3, #21
    2e0c:	2100      	movs	r1, #0
    2e0e:	0010      	movs	r0, r2
    2e10:	0324      	lsls	r4, r4, #12
    2e12:	0d0a      	lsrs	r2, r1, #20
    2e14:	0512      	lsls	r2, r2, #20
    2e16:	0b24      	lsrs	r4, r4, #12
    2e18:	4314      	orrs	r4, r2
    2e1a:	4a10      	ldr	r2, [pc, #64]	; (2e5c <__aeabi_i2d+0x80>)
    2e1c:	051b      	lsls	r3, r3, #20
    2e1e:	4014      	ands	r4, r2
    2e20:	431c      	orrs	r4, r3
    2e22:	0064      	lsls	r4, r4, #1
    2e24:	07ed      	lsls	r5, r5, #31
    2e26:	0864      	lsrs	r4, r4, #1
    2e28:	432c      	orrs	r4, r5
    2e2a:	0021      	movs	r1, r4
    2e2c:	bd70      	pop	{r4, r5, r6, pc}
    2e2e:	0021      	movs	r1, r4
    2e30:	4091      	lsls	r1, r2
    2e32:	000a      	movs	r2, r1
    2e34:	210b      	movs	r1, #11
    2e36:	1a08      	subs	r0, r1, r0
    2e38:	40c4      	lsrs	r4, r0
    2e3a:	055b      	lsls	r3, r3, #21
    2e3c:	0324      	lsls	r4, r4, #12
    2e3e:	0b24      	lsrs	r4, r4, #12
    2e40:	0d5b      	lsrs	r3, r3, #21
    2e42:	e7e3      	b.n	2e0c <__aeabi_i2d+0x30>
    2e44:	2500      	movs	r5, #0
    2e46:	2300      	movs	r3, #0
    2e48:	2400      	movs	r4, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	e7de      	b.n	2e0c <__aeabi_i2d+0x30>
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	0000041e 	.word	0x0000041e
    2e54:	00000433 	.word	0x00000433
    2e58:	00000413 	.word	0x00000413
    2e5c:	800fffff 	.word	0x800fffff

00002e60 <__aeabi_f2d>:
    2e60:	0042      	lsls	r2, r0, #1
    2e62:	0e12      	lsrs	r2, r2, #24
    2e64:	1c51      	adds	r1, r2, #1
    2e66:	0243      	lsls	r3, r0, #9
    2e68:	b2c9      	uxtb	r1, r1
    2e6a:	b570      	push	{r4, r5, r6, lr}
    2e6c:	0a5d      	lsrs	r5, r3, #9
    2e6e:	0fc4      	lsrs	r4, r0, #31
    2e70:	2901      	cmp	r1, #1
    2e72:	dd15      	ble.n	2ea0 <__aeabi_f2d+0x40>
    2e74:	21e0      	movs	r1, #224	; 0xe0
    2e76:	0089      	lsls	r1, r1, #2
    2e78:	468c      	mov	ip, r1
    2e7a:	076d      	lsls	r5, r5, #29
    2e7c:	0b1b      	lsrs	r3, r3, #12
    2e7e:	4462      	add	r2, ip
    2e80:	2100      	movs	r1, #0
    2e82:	0028      	movs	r0, r5
    2e84:	0d0d      	lsrs	r5, r1, #20
    2e86:	052d      	lsls	r5, r5, #20
    2e88:	432b      	orrs	r3, r5
    2e8a:	4d1c      	ldr	r5, [pc, #112]	; (2efc <__aeabi_f2d+0x9c>)
    2e8c:	0552      	lsls	r2, r2, #21
    2e8e:	402b      	ands	r3, r5
    2e90:	0852      	lsrs	r2, r2, #1
    2e92:	4313      	orrs	r3, r2
    2e94:	005b      	lsls	r3, r3, #1
    2e96:	07e4      	lsls	r4, r4, #31
    2e98:	085b      	lsrs	r3, r3, #1
    2e9a:	4323      	orrs	r3, r4
    2e9c:	0019      	movs	r1, r3
    2e9e:	bd70      	pop	{r4, r5, r6, pc}
    2ea0:	2a00      	cmp	r2, #0
    2ea2:	d115      	bne.n	2ed0 <__aeabi_f2d+0x70>
    2ea4:	2d00      	cmp	r5, #0
    2ea6:	d01f      	beq.n	2ee8 <__aeabi_f2d+0x88>
    2ea8:	0028      	movs	r0, r5
    2eaa:	f000 f8b9 	bl	3020 <__clzsi2>
    2eae:	280a      	cmp	r0, #10
    2eb0:	dc1d      	bgt.n	2eee <__aeabi_f2d+0x8e>
    2eb2:	230b      	movs	r3, #11
    2eb4:	002a      	movs	r2, r5
    2eb6:	1a1b      	subs	r3, r3, r0
    2eb8:	40da      	lsrs	r2, r3
    2eba:	0013      	movs	r3, r2
    2ebc:	0002      	movs	r2, r0
    2ebe:	3215      	adds	r2, #21
    2ec0:	4095      	lsls	r5, r2
    2ec2:	4a0f      	ldr	r2, [pc, #60]	; (2f00 <__aeabi_f2d+0xa0>)
    2ec4:	031b      	lsls	r3, r3, #12
    2ec6:	1a12      	subs	r2, r2, r0
    2ec8:	0552      	lsls	r2, r2, #21
    2eca:	0b1b      	lsrs	r3, r3, #12
    2ecc:	0d52      	lsrs	r2, r2, #21
    2ece:	e7d7      	b.n	2e80 <__aeabi_f2d+0x20>
    2ed0:	2d00      	cmp	r5, #0
    2ed2:	d006      	beq.n	2ee2 <__aeabi_f2d+0x82>
    2ed4:	2280      	movs	r2, #128	; 0x80
    2ed6:	0b1b      	lsrs	r3, r3, #12
    2ed8:	0312      	lsls	r2, r2, #12
    2eda:	4313      	orrs	r3, r2
    2edc:	076d      	lsls	r5, r5, #29
    2ede:	4a09      	ldr	r2, [pc, #36]	; (2f04 <__aeabi_f2d+0xa4>)
    2ee0:	e7ce      	b.n	2e80 <__aeabi_f2d+0x20>
    2ee2:	4a08      	ldr	r2, [pc, #32]	; (2f04 <__aeabi_f2d+0xa4>)
    2ee4:	2300      	movs	r3, #0
    2ee6:	e7cb      	b.n	2e80 <__aeabi_f2d+0x20>
    2ee8:	2200      	movs	r2, #0
    2eea:	2300      	movs	r3, #0
    2eec:	e7c8      	b.n	2e80 <__aeabi_f2d+0x20>
    2eee:	0003      	movs	r3, r0
    2ef0:	3b0b      	subs	r3, #11
    2ef2:	409d      	lsls	r5, r3
    2ef4:	002b      	movs	r3, r5
    2ef6:	2500      	movs	r5, #0
    2ef8:	e7e3      	b.n	2ec2 <__aeabi_f2d+0x62>
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	800fffff 	.word	0x800fffff
    2f00:	00000389 	.word	0x00000389
    2f04:	000007ff 	.word	0x000007ff

00002f08 <__aeabi_d2f>:
    2f08:	004b      	lsls	r3, r1, #1
    2f0a:	b570      	push	{r4, r5, r6, lr}
    2f0c:	0d5e      	lsrs	r6, r3, #21
    2f0e:	030c      	lsls	r4, r1, #12
    2f10:	1c75      	adds	r5, r6, #1
    2f12:	0a64      	lsrs	r4, r4, #9
    2f14:	0f42      	lsrs	r2, r0, #29
    2f16:	056d      	lsls	r5, r5, #21
    2f18:	4322      	orrs	r2, r4
    2f1a:	0fc9      	lsrs	r1, r1, #31
    2f1c:	00c4      	lsls	r4, r0, #3
    2f1e:	0d6d      	lsrs	r5, r5, #21
    2f20:	2d01      	cmp	r5, #1
    2f22:	dd2a      	ble.n	2f7a <__aeabi_d2f+0x72>
    2f24:	4b3b      	ldr	r3, [pc, #236]	; (3014 <__aeabi_d2f+0x10c>)
    2f26:	18f3      	adds	r3, r6, r3
    2f28:	2bfe      	cmp	r3, #254	; 0xfe
    2f2a:	dc1a      	bgt.n	2f62 <__aeabi_d2f+0x5a>
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	dd42      	ble.n	2fb6 <__aeabi_d2f+0xae>
    2f30:	0180      	lsls	r0, r0, #6
    2f32:	1e45      	subs	r5, r0, #1
    2f34:	41a8      	sbcs	r0, r5
    2f36:	00d2      	lsls	r2, r2, #3
    2f38:	4310      	orrs	r0, r2
    2f3a:	0f62      	lsrs	r2, r4, #29
    2f3c:	4302      	orrs	r2, r0
    2f3e:	0750      	lsls	r0, r2, #29
    2f40:	d004      	beq.n	2f4c <__aeabi_d2f+0x44>
    2f42:	200f      	movs	r0, #15
    2f44:	4010      	ands	r0, r2
    2f46:	2804      	cmp	r0, #4
    2f48:	d000      	beq.n	2f4c <__aeabi_d2f+0x44>
    2f4a:	3204      	adds	r2, #4
    2f4c:	2080      	movs	r0, #128	; 0x80
    2f4e:	04c0      	lsls	r0, r0, #19
    2f50:	4010      	ands	r0, r2
    2f52:	d021      	beq.n	2f98 <__aeabi_d2f+0x90>
    2f54:	3301      	adds	r3, #1
    2f56:	2bff      	cmp	r3, #255	; 0xff
    2f58:	d003      	beq.n	2f62 <__aeabi_d2f+0x5a>
    2f5a:	0192      	lsls	r2, r2, #6
    2f5c:	0a52      	lsrs	r2, r2, #9
    2f5e:	b2db      	uxtb	r3, r3
    2f60:	e001      	b.n	2f66 <__aeabi_d2f+0x5e>
    2f62:	23ff      	movs	r3, #255	; 0xff
    2f64:	2200      	movs	r2, #0
    2f66:	0252      	lsls	r2, r2, #9
    2f68:	0a52      	lsrs	r2, r2, #9
    2f6a:	05db      	lsls	r3, r3, #23
    2f6c:	4313      	orrs	r3, r2
    2f6e:	005b      	lsls	r3, r3, #1
    2f70:	07c9      	lsls	r1, r1, #31
    2f72:	085b      	lsrs	r3, r3, #1
    2f74:	430b      	orrs	r3, r1
    2f76:	0018      	movs	r0, r3
    2f78:	bd70      	pop	{r4, r5, r6, pc}
    2f7a:	2e00      	cmp	r6, #0
    2f7c:	d007      	beq.n	2f8e <__aeabi_d2f+0x86>
    2f7e:	4314      	orrs	r4, r2
    2f80:	d0ef      	beq.n	2f62 <__aeabi_d2f+0x5a>
    2f82:	2080      	movs	r0, #128	; 0x80
    2f84:	00d2      	lsls	r2, r2, #3
    2f86:	0480      	lsls	r0, r0, #18
    2f88:	4302      	orrs	r2, r0
    2f8a:	23ff      	movs	r3, #255	; 0xff
    2f8c:	e7d7      	b.n	2f3e <__aeabi_d2f+0x36>
    2f8e:	4322      	orrs	r2, r4
    2f90:	2300      	movs	r3, #0
    2f92:	2a00      	cmp	r2, #0
    2f94:	d003      	beq.n	2f9e <__aeabi_d2f+0x96>
    2f96:	2205      	movs	r2, #5
    2f98:	08d2      	lsrs	r2, r2, #3
    2f9a:	2bff      	cmp	r3, #255	; 0xff
    2f9c:	d003      	beq.n	2fa6 <__aeabi_d2f+0x9e>
    2f9e:	0252      	lsls	r2, r2, #9
    2fa0:	0a52      	lsrs	r2, r2, #9
    2fa2:	b2db      	uxtb	r3, r3
    2fa4:	e7df      	b.n	2f66 <__aeabi_d2f+0x5e>
    2fa6:	2a00      	cmp	r2, #0
    2fa8:	d032      	beq.n	3010 <__aeabi_d2f+0x108>
    2faa:	2080      	movs	r0, #128	; 0x80
    2fac:	03c0      	lsls	r0, r0, #15
    2fae:	4302      	orrs	r2, r0
    2fb0:	0252      	lsls	r2, r2, #9
    2fb2:	0a52      	lsrs	r2, r2, #9
    2fb4:	e7d7      	b.n	2f66 <__aeabi_d2f+0x5e>
    2fb6:	0018      	movs	r0, r3
    2fb8:	3017      	adds	r0, #23
    2fba:	db14      	blt.n	2fe6 <__aeabi_d2f+0xde>
    2fbc:	2080      	movs	r0, #128	; 0x80
    2fbe:	0400      	lsls	r0, r0, #16
    2fc0:	4302      	orrs	r2, r0
    2fc2:	201e      	movs	r0, #30
    2fc4:	1ac0      	subs	r0, r0, r3
    2fc6:	281f      	cmp	r0, #31
    2fc8:	dc0f      	bgt.n	2fea <__aeabi_d2f+0xe2>
    2fca:	0025      	movs	r5, r4
    2fcc:	4b12      	ldr	r3, [pc, #72]	; (3018 <__aeabi_d2f+0x110>)
    2fce:	18f3      	adds	r3, r6, r3
    2fd0:	409d      	lsls	r5, r3
    2fd2:	1e6e      	subs	r6, r5, #1
    2fd4:	41b5      	sbcs	r5, r6
    2fd6:	409a      	lsls	r2, r3
    2fd8:	002b      	movs	r3, r5
    2fda:	4313      	orrs	r3, r2
    2fdc:	0022      	movs	r2, r4
    2fde:	40c2      	lsrs	r2, r0
    2fe0:	431a      	orrs	r2, r3
    2fe2:	2300      	movs	r3, #0
    2fe4:	e7ab      	b.n	2f3e <__aeabi_d2f+0x36>
    2fe6:	2300      	movs	r3, #0
    2fe8:	e7d5      	b.n	2f96 <__aeabi_d2f+0x8e>
    2fea:	2502      	movs	r5, #2
    2fec:	426d      	negs	r5, r5
    2fee:	1aeb      	subs	r3, r5, r3
    2ff0:	0015      	movs	r5, r2
    2ff2:	40dd      	lsrs	r5, r3
    2ff4:	2820      	cmp	r0, #32
    2ff6:	d009      	beq.n	300c <__aeabi_d2f+0x104>
    2ff8:	4b08      	ldr	r3, [pc, #32]	; (301c <__aeabi_d2f+0x114>)
    2ffa:	18f3      	adds	r3, r6, r3
    2ffc:	409a      	lsls	r2, r3
    2ffe:	4314      	orrs	r4, r2
    3000:	1e62      	subs	r2, r4, #1
    3002:	4194      	sbcs	r4, r2
    3004:	0022      	movs	r2, r4
    3006:	2300      	movs	r3, #0
    3008:	432a      	orrs	r2, r5
    300a:	e798      	b.n	2f3e <__aeabi_d2f+0x36>
    300c:	2200      	movs	r2, #0
    300e:	e7f6      	b.n	2ffe <__aeabi_d2f+0xf6>
    3010:	2200      	movs	r2, #0
    3012:	e7a8      	b.n	2f66 <__aeabi_d2f+0x5e>
    3014:	fffffc80 	.word	0xfffffc80
    3018:	fffffc82 	.word	0xfffffc82
    301c:	fffffca2 	.word	0xfffffca2

00003020 <__clzsi2>:
    3020:	211c      	movs	r1, #28
    3022:	2301      	movs	r3, #1
    3024:	041b      	lsls	r3, r3, #16
    3026:	4298      	cmp	r0, r3
    3028:	d301      	bcc.n	302e <__clzsi2+0xe>
    302a:	0c00      	lsrs	r0, r0, #16
    302c:	3910      	subs	r1, #16
    302e:	0a1b      	lsrs	r3, r3, #8
    3030:	4298      	cmp	r0, r3
    3032:	d301      	bcc.n	3038 <__clzsi2+0x18>
    3034:	0a00      	lsrs	r0, r0, #8
    3036:	3908      	subs	r1, #8
    3038:	091b      	lsrs	r3, r3, #4
    303a:	4298      	cmp	r0, r3
    303c:	d301      	bcc.n	3042 <__clzsi2+0x22>
    303e:	0900      	lsrs	r0, r0, #4
    3040:	3904      	subs	r1, #4
    3042:	a202      	add	r2, pc, #8	; (adr r2, 304c <__clzsi2+0x2c>)
    3044:	5c10      	ldrb	r0, [r2, r0]
    3046:	1840      	adds	r0, r0, r1
    3048:	4770      	bx	lr
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	02020304 	.word	0x02020304
    3050:	01010101 	.word	0x01010101
	...

0000305c <__libc_init_array>:
    305c:	b570      	push	{r4, r5, r6, lr}
    305e:	4e0d      	ldr	r6, [pc, #52]	; (3094 <__libc_init_array+0x38>)
    3060:	4d0d      	ldr	r5, [pc, #52]	; (3098 <__libc_init_array+0x3c>)
    3062:	2400      	movs	r4, #0
    3064:	1bad      	subs	r5, r5, r6
    3066:	10ad      	asrs	r5, r5, #2
    3068:	d005      	beq.n	3076 <__libc_init_array+0x1a>
    306a:	00a3      	lsls	r3, r4, #2
    306c:	58f3      	ldr	r3, [r6, r3]
    306e:	3401      	adds	r4, #1
    3070:	4798      	blx	r3
    3072:	42a5      	cmp	r5, r4
    3074:	d1f9      	bne.n	306a <__libc_init_array+0xe>
    3076:	f000 fa3d 	bl	34f4 <_init>
    307a:	4e08      	ldr	r6, [pc, #32]	; (309c <__libc_init_array+0x40>)
    307c:	4d08      	ldr	r5, [pc, #32]	; (30a0 <__libc_init_array+0x44>)
    307e:	2400      	movs	r4, #0
    3080:	1bad      	subs	r5, r5, r6
    3082:	10ad      	asrs	r5, r5, #2
    3084:	d005      	beq.n	3092 <__libc_init_array+0x36>
    3086:	00a3      	lsls	r3, r4, #2
    3088:	58f3      	ldr	r3, [r6, r3]
    308a:	3401      	adds	r4, #1
    308c:	4798      	blx	r3
    308e:	42a5      	cmp	r5, r4
    3090:	d1f9      	bne.n	3086 <__libc_init_array+0x2a>
    3092:	bd70      	pop	{r4, r5, r6, pc}
    3094:	00003500 	.word	0x00003500
    3098:	00003500 	.word	0x00003500
    309c:	00003500 	.word	0x00003500
    30a0:	00003508 	.word	0x00003508

000030a4 <memset>:
    30a4:	b570      	push	{r4, r5, r6, lr}
    30a6:	0783      	lsls	r3, r0, #30
    30a8:	d03f      	beq.n	312a <memset+0x86>
    30aa:	1e54      	subs	r4, r2, #1
    30ac:	2a00      	cmp	r2, #0
    30ae:	d03b      	beq.n	3128 <memset+0x84>
    30b0:	b2ce      	uxtb	r6, r1
    30b2:	0003      	movs	r3, r0
    30b4:	2503      	movs	r5, #3
    30b6:	e003      	b.n	30c0 <memset+0x1c>
    30b8:	1e62      	subs	r2, r4, #1
    30ba:	2c00      	cmp	r4, #0
    30bc:	d034      	beq.n	3128 <memset+0x84>
    30be:	0014      	movs	r4, r2
    30c0:	3301      	adds	r3, #1
    30c2:	1e5a      	subs	r2, r3, #1
    30c4:	7016      	strb	r6, [r2, #0]
    30c6:	422b      	tst	r3, r5
    30c8:	d1f6      	bne.n	30b8 <memset+0x14>
    30ca:	2c03      	cmp	r4, #3
    30cc:	d924      	bls.n	3118 <memset+0x74>
    30ce:	25ff      	movs	r5, #255	; 0xff
    30d0:	400d      	ands	r5, r1
    30d2:	022a      	lsls	r2, r5, #8
    30d4:	4315      	orrs	r5, r2
    30d6:	042a      	lsls	r2, r5, #16
    30d8:	4315      	orrs	r5, r2
    30da:	2c0f      	cmp	r4, #15
    30dc:	d911      	bls.n	3102 <memset+0x5e>
    30de:	0026      	movs	r6, r4
    30e0:	3e10      	subs	r6, #16
    30e2:	0936      	lsrs	r6, r6, #4
    30e4:	3601      	adds	r6, #1
    30e6:	0136      	lsls	r6, r6, #4
    30e8:	001a      	movs	r2, r3
    30ea:	199b      	adds	r3, r3, r6
    30ec:	6015      	str	r5, [r2, #0]
    30ee:	6055      	str	r5, [r2, #4]
    30f0:	6095      	str	r5, [r2, #8]
    30f2:	60d5      	str	r5, [r2, #12]
    30f4:	3210      	adds	r2, #16
    30f6:	4293      	cmp	r3, r2
    30f8:	d1f8      	bne.n	30ec <memset+0x48>
    30fa:	220f      	movs	r2, #15
    30fc:	4014      	ands	r4, r2
    30fe:	2c03      	cmp	r4, #3
    3100:	d90a      	bls.n	3118 <memset+0x74>
    3102:	1f26      	subs	r6, r4, #4
    3104:	08b6      	lsrs	r6, r6, #2
    3106:	3601      	adds	r6, #1
    3108:	00b6      	lsls	r6, r6, #2
    310a:	001a      	movs	r2, r3
    310c:	199b      	adds	r3, r3, r6
    310e:	c220      	stmia	r2!, {r5}
    3110:	4293      	cmp	r3, r2
    3112:	d1fc      	bne.n	310e <memset+0x6a>
    3114:	2203      	movs	r2, #3
    3116:	4014      	ands	r4, r2
    3118:	2c00      	cmp	r4, #0
    311a:	d005      	beq.n	3128 <memset+0x84>
    311c:	b2c9      	uxtb	r1, r1
    311e:	191c      	adds	r4, r3, r4
    3120:	7019      	strb	r1, [r3, #0]
    3122:	3301      	adds	r3, #1
    3124:	429c      	cmp	r4, r3
    3126:	d1fb      	bne.n	3120 <memset+0x7c>
    3128:	bd70      	pop	{r4, r5, r6, pc}
    312a:	0014      	movs	r4, r2
    312c:	0003      	movs	r3, r0
    312e:	e7cc      	b.n	30ca <memset+0x26>

00003130 <register_fini>:
    3130:	4b03      	ldr	r3, [pc, #12]	; (3140 <register_fini+0x10>)
    3132:	b510      	push	{r4, lr}
    3134:	2b00      	cmp	r3, #0
    3136:	d002      	beq.n	313e <register_fini+0xe>
    3138:	4802      	ldr	r0, [pc, #8]	; (3144 <register_fini+0x14>)
    313a:	f000 f805 	bl	3148 <atexit>
    313e:	bd10      	pop	{r4, pc}
    3140:	00000000 	.word	0x00000000
    3144:	00003159 	.word	0x00003159

00003148 <atexit>:
    3148:	b510      	push	{r4, lr}
    314a:	0001      	movs	r1, r0
    314c:	2300      	movs	r3, #0
    314e:	2200      	movs	r2, #0
    3150:	2000      	movs	r0, #0
    3152:	f000 f81b 	bl	318c <__register_exitproc>
    3156:	bd10      	pop	{r4, pc}

00003158 <__libc_fini_array>:
    3158:	b570      	push	{r4, r5, r6, lr}
    315a:	4b09      	ldr	r3, [pc, #36]	; (3180 <__libc_fini_array+0x28>)
    315c:	4c09      	ldr	r4, [pc, #36]	; (3184 <__libc_fini_array+0x2c>)
    315e:	1ae4      	subs	r4, r4, r3
    3160:	10a4      	asrs	r4, r4, #2
    3162:	d009      	beq.n	3178 <__libc_fini_array+0x20>
    3164:	4a08      	ldr	r2, [pc, #32]	; (3188 <__libc_fini_array+0x30>)
    3166:	18a5      	adds	r5, r4, r2
    3168:	00ad      	lsls	r5, r5, #2
    316a:	18ed      	adds	r5, r5, r3
    316c:	682b      	ldr	r3, [r5, #0]
    316e:	3c01      	subs	r4, #1
    3170:	4798      	blx	r3
    3172:	3d04      	subs	r5, #4
    3174:	2c00      	cmp	r4, #0
    3176:	d1f9      	bne.n	316c <__libc_fini_array+0x14>
    3178:	f000 f9c6 	bl	3508 <_fini>
    317c:	bd70      	pop	{r4, r5, r6, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	00003514 	.word	0x00003514
    3184:	00003518 	.word	0x00003518
    3188:	3fffffff 	.word	0x3fffffff

0000318c <__register_exitproc>:
    318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    318e:	4644      	mov	r4, r8
    3190:	465f      	mov	r7, fp
    3192:	4656      	mov	r6, sl
    3194:	464d      	mov	r5, r9
    3196:	469b      	mov	fp, r3
    3198:	4b2f      	ldr	r3, [pc, #188]	; (3258 <__register_exitproc+0xcc>)
    319a:	b4f0      	push	{r4, r5, r6, r7}
    319c:	681c      	ldr	r4, [r3, #0]
    319e:	23a4      	movs	r3, #164	; 0xa4
    31a0:	005b      	lsls	r3, r3, #1
    31a2:	0005      	movs	r5, r0
    31a4:	58e0      	ldr	r0, [r4, r3]
    31a6:	000e      	movs	r6, r1
    31a8:	4690      	mov	r8, r2
    31aa:	2800      	cmp	r0, #0
    31ac:	d04b      	beq.n	3246 <__register_exitproc+0xba>
    31ae:	6843      	ldr	r3, [r0, #4]
    31b0:	2b1f      	cmp	r3, #31
    31b2:	dc0d      	bgt.n	31d0 <__register_exitproc+0x44>
    31b4:	1c5c      	adds	r4, r3, #1
    31b6:	2d00      	cmp	r5, #0
    31b8:	d121      	bne.n	31fe <__register_exitproc+0x72>
    31ba:	3302      	adds	r3, #2
    31bc:	009b      	lsls	r3, r3, #2
    31be:	6044      	str	r4, [r0, #4]
    31c0:	501e      	str	r6, [r3, r0]
    31c2:	2000      	movs	r0, #0
    31c4:	bc3c      	pop	{r2, r3, r4, r5}
    31c6:	4690      	mov	r8, r2
    31c8:	4699      	mov	r9, r3
    31ca:	46a2      	mov	sl, r4
    31cc:	46ab      	mov	fp, r5
    31ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31d0:	4b22      	ldr	r3, [pc, #136]	; (325c <__register_exitproc+0xd0>)
    31d2:	2b00      	cmp	r3, #0
    31d4:	d03c      	beq.n	3250 <__register_exitproc+0xc4>
    31d6:	20c8      	movs	r0, #200	; 0xc8
    31d8:	0040      	lsls	r0, r0, #1
    31da:	e000      	b.n	31de <__register_exitproc+0x52>
    31dc:	bf00      	nop
    31de:	2800      	cmp	r0, #0
    31e0:	d036      	beq.n	3250 <__register_exitproc+0xc4>
    31e2:	22a4      	movs	r2, #164	; 0xa4
    31e4:	2300      	movs	r3, #0
    31e6:	0052      	lsls	r2, r2, #1
    31e8:	58a1      	ldr	r1, [r4, r2]
    31ea:	6043      	str	r3, [r0, #4]
    31ec:	6001      	str	r1, [r0, #0]
    31ee:	50a0      	str	r0, [r4, r2]
    31f0:	3240      	adds	r2, #64	; 0x40
    31f2:	5083      	str	r3, [r0, r2]
    31f4:	3204      	adds	r2, #4
    31f6:	5083      	str	r3, [r0, r2]
    31f8:	2401      	movs	r4, #1
    31fa:	2d00      	cmp	r5, #0
    31fc:	d0dd      	beq.n	31ba <__register_exitproc+0x2e>
    31fe:	009a      	lsls	r2, r3, #2
    3200:	4691      	mov	r9, r2
    3202:	4481      	add	r9, r0
    3204:	4642      	mov	r2, r8
    3206:	2188      	movs	r1, #136	; 0x88
    3208:	464f      	mov	r7, r9
    320a:	507a      	str	r2, [r7, r1]
    320c:	22c4      	movs	r2, #196	; 0xc4
    320e:	0052      	lsls	r2, r2, #1
    3210:	4690      	mov	r8, r2
    3212:	4480      	add	r8, r0
    3214:	4642      	mov	r2, r8
    3216:	3987      	subs	r1, #135	; 0x87
    3218:	4099      	lsls	r1, r3
    321a:	6812      	ldr	r2, [r2, #0]
    321c:	468a      	mov	sl, r1
    321e:	430a      	orrs	r2, r1
    3220:	4694      	mov	ip, r2
    3222:	4642      	mov	r2, r8
    3224:	4661      	mov	r1, ip
    3226:	6011      	str	r1, [r2, #0]
    3228:	2284      	movs	r2, #132	; 0x84
    322a:	4649      	mov	r1, r9
    322c:	465f      	mov	r7, fp
    322e:	0052      	lsls	r2, r2, #1
    3230:	508f      	str	r7, [r1, r2]
    3232:	2d02      	cmp	r5, #2
    3234:	d1c1      	bne.n	31ba <__register_exitproc+0x2e>
    3236:	0002      	movs	r2, r0
    3238:	4655      	mov	r5, sl
    323a:	328d      	adds	r2, #141	; 0x8d
    323c:	32ff      	adds	r2, #255	; 0xff
    323e:	6811      	ldr	r1, [r2, #0]
    3240:	430d      	orrs	r5, r1
    3242:	6015      	str	r5, [r2, #0]
    3244:	e7b9      	b.n	31ba <__register_exitproc+0x2e>
    3246:	0020      	movs	r0, r4
    3248:	304d      	adds	r0, #77	; 0x4d
    324a:	30ff      	adds	r0, #255	; 0xff
    324c:	50e0      	str	r0, [r4, r3]
    324e:	e7ae      	b.n	31ae <__register_exitproc+0x22>
    3250:	2001      	movs	r0, #1
    3252:	4240      	negs	r0, r0
    3254:	e7b6      	b.n	31c4 <__register_exitproc+0x38>
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	000034f0 	.word	0x000034f0
    325c:	00000000 	.word	0x00000000

00003260 <spi2MOSI>:
    3260:	0c000002 00000000                       ........

00003268 <spi2SCK>:
    3268:	0e000002 00000000                       ........

00003270 <spi2MISO>:
    3270:	0d000002 00000000                       ........

00003278 <lookupTable.12365>:
    3278:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    3288:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    3298:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    32a8:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    32b8:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    32c8:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    32d8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    32e8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    32f8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    3308:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    3318:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    3328:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    3338:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    3348:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    3358:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    3368:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    3378:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    3388:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    3398:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    33a8:	000f048e                                ....

000033ac <senseBatPin>:
    33ac:	06000000 00000006                       ........

000033b4 <senseAPin>:
    33b4:	03010001 0000000b                       ........

000033bc <senseBPin>:
    33bc:	02010001 0000000a                       ........

000033c4 <senseCPin>:
    33c4:	03000000 00000001                       ........

000033cc <senseDPin>:
    33cc:	02000000 00000000                       ........

000033d4 <analogAccelPin>:
    33d4:	07000000 00000007                       ........

000033dc <spi2MOSI>:
    33dc:	0c000002 00000000                       ........

000033e4 <spi2SCK>:
    33e4:	0e000002 00000000 000019e2 00001906     ................
    33f4:	000019c4 0000199c 000019c4 00001990     ................
    3404:	000019c4 0000199c 00001906 00001906     ................
    3414:	00001990 0000199c 00001a48 00001a48     ........H...H...
    3424:	00001a48 000019ca 00001906 00001906     H...............
    3434:	000019b0 0000199a 000019b0 00001990     ................
    3444:	000019b0 0000199a 00001906 00001906     ................
    3454:	00001990 0000199a 00001a48 00001a48     ........H...H...
    3464:	00001a48 00001a54 00001be0 00001b3e     H...T.......>...
    3474:	00001b3e 00001b3c 00001bd2 00001bd2     >...<...........
    3484:	00001bc8 00001b3c 00001bd2 00001bc8     ....<...........
    3494:	00001bd2 00001b3c 00001bd8 00001bd8     ....<...........
    34a4:	00001bd8 00001c62 00002ad8 00002998     ....b....*...)..
    34b4:	00002998 00002996 00002ab0 00002ab0     .)...)...*...*..
    34c4:	00002aa2 00002996 00002ab0 00002aa2     .*...)...*...*..
    34d4:	00002ab0 00002996 00002ab8 00002ab8     .*...)...*...*..
    34e4:	00002ab8 00002cb8 00000043              .*...,..C...

000034f0 <_global_impure_ptr>:
    34f0:	20000010                                ... 

000034f4 <_init>:
    34f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34fa:	bc08      	pop	{r3}
    34fc:	469e      	mov	lr, r3
    34fe:	4770      	bx	lr

00003500 <__init_array_start>:
    3500:	00003131 	.word	0x00003131

00003504 <__frame_dummy_init_array_entry>:
    3504:	000000dd                                ....

00003508 <_fini>:
    3508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    350e:	bc08      	pop	{r3}
    3510:	469e      	mov	lr, r3
    3512:	4770      	bx	lr

00003514 <__fini_array_start>:
    3514:	000000b5 	.word	0x000000b5
