
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033a4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000033a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  000037f0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  000039a0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b92b  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022df  00000000  00000000  0003bde4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001dea  00000000  00000000  0003e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000398  00000000  00000000  0003fead  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c68  00000000  00000000  00040245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015700  00000000  00000000  00040ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000881f  00000000  00000000  000565ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007270c  00000000  00000000  0005edcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c14  00000000  00000000  000d14d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000e41 	.word	0x00000e41
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000ee1 	.word	0x00000ee1
      90:	00000f49 	.word	0x00000f49
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000033a4 	.word	0x000033a4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000033a4 	.word	0x000033a4
     10c:	000033a4 	.word	0x000033a4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000033a4 	.word	0x000033a4
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00002fc9 	.word	0x00002fc9
     1d0:	000008e5 	.word	0x000008e5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SEreadSample>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e8:	4f17      	ldr	r7, [pc, #92]	; (248 <AT25SEreadSample+0x64>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	9201      	str	r2, [sp, #4]
     1ee:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f0:	4c16      	ldr	r4, [pc, #88]	; (24c <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1f2:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f4:	2001      	movs	r0, #1
     1f6:	617b      	str	r3, [r7, #20]
     1f8:	210b      	movs	r1, #11
     1fa:	47a0      	blx	r4
     1fc:	4d14      	ldr	r5, [pc, #80]	; (250 <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     1fe:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     200:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     202:	b2c9      	uxtb	r1, r1
     204:	2001      	movs	r0, #1
     206:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     208:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     20a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     20c:	b2c9      	uxtb	r1, r1
     20e:	2001      	movs	r0, #1
     210:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     212:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     214:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     216:	2001      	movs	r0, #1
     218:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21a:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     21c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21e:	2001      	movs	r0, #1
     220:	47a0      	blx	r4
     222:	9b00      	ldr	r3, [sp, #0]
     224:	9e01      	ldr	r6, [sp, #4]
     226:	7028      	strb	r0, [r5, #0]
     228:	18f3      	adds	r3, r6, r3
     22a:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     22c:	9b00      	ldr	r3, [sp, #0]
     22e:	429e      	cmp	r6, r3
     230:	d005      	beq.n	23e <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     232:	7829      	ldrb	r1, [r5, #0]
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	7030      	strb	r0, [r6, #0]
     23a:	3601      	adds	r6, #1
     23c:	e7f6      	b.n	22c <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     23e:	2380      	movs	r3, #128	; 0x80
     240:	02db      	lsls	r3, r3, #11
     242:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     244:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00001735 	.word	0x00001735
     250:	20000460 	.word	0x20000460

00000254 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2280      	movs	r2, #128	; 0x80
     256:	4b28      	ldr	r3, [pc, #160]	; (2f8 <readMS5803AdcResults+0xa4>)
     258:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     25a:	b5f0      	push	{r4, r5, r6, r7, lr}
     25c:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     25e:	2300      	movs	r3, #0
     260:	4d26      	ldr	r5, [pc, #152]	; (2fc <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     262:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     264:	9300      	str	r3, [sp, #0]
     266:	786b      	ldrb	r3, [r5, #1]
     268:	7828      	ldrb	r0, [r5, #0]
     26a:	78aa      	ldrb	r2, [r5, #2]
     26c:	021b      	lsls	r3, r3, #8
     26e:	4303      	orrs	r3, r0
     270:	0412      	lsls	r2, r2, #16
     272:	0019      	movs	r1, r3
     274:	0013      	movs	r3, r2
     276:	430b      	orrs	r3, r1
     278:	79a9      	ldrb	r1, [r5, #6]
     27a:	796f      	ldrb	r7, [r5, #5]
     27c:	79ec      	ldrb	r4, [r5, #7]
     27e:	0209      	lsls	r1, r1, #8
     280:	4339      	orrs	r1, r7
     282:	0424      	lsls	r4, r4, #16
     284:	0008      	movs	r0, r1
     286:	0021      	movs	r1, r4
     288:	7a2c      	ldrb	r4, [r5, #8]
     28a:	78ea      	ldrb	r2, [r5, #3]
     28c:	7a6f      	ldrb	r7, [r5, #9]
     28e:	4301      	orrs	r1, r0
     290:	0624      	lsls	r4, r4, #24
     292:	430c      	orrs	r4, r1
     294:	0612      	lsls	r2, r2, #24
     296:	431a      	orrs	r2, r3
     298:	0020      	movs	r0, r4
     29a:	792b      	ldrb	r3, [r5, #4]
     29c:	0039      	movs	r1, r7
     29e:	4e18      	ldr	r6, [pc, #96]	; (300 <readMS5803AdcResults+0xac>)
     2a0:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2a2:	7aeb      	ldrb	r3, [r5, #11]
     2a4:	7aa9      	ldrb	r1, [r5, #10]
     2a6:	021b      	lsls	r3, r3, #8
     2a8:	430b      	orrs	r3, r1
     2aa:	001a      	movs	r2, r3
     2ac:	7b2b      	ldrb	r3, [r5, #12]
     2ae:	4e15      	ldr	r6, [pc, #84]	; (304 <readMS5803AdcResults+0xb0>)
     2b0:	041b      	lsls	r3, r3, #16
     2b2:	4313      	orrs	r3, r2
     2b4:	7b6a      	ldrb	r2, [r5, #13]
     2b6:	7bad      	ldrb	r5, [r5, #14]
     2b8:	0612      	lsls	r2, r2, #24
     2ba:	431a      	orrs	r2, r3
     2bc:	0039      	movs	r1, r7
     2be:	002b      	movs	r3, r5
     2c0:	0020      	movs	r0, r4
     2c2:	9203      	str	r2, [sp, #12]
     2c4:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2c6:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2c8:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2ca:	002b      	movs	r3, r5
     2cc:	0039      	movs	r1, r7
     2ce:	0020      	movs	r0, r4
     2d0:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2d2:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2d4:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2d6:	002b      	movs	r3, r5
     2d8:	0020      	movs	r0, r4
     2da:	0039      	movs	r1, r7
     2dc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2de:	2280      	movs	r2, #128	; 0x80
     2e0:	4b05      	ldr	r3, [pc, #20]	; (2f8 <readMS5803AdcResults+0xa4>)
     2e2:	0212      	lsls	r2, r2, #8
     2e4:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     2e6:	9b04      	ldr	r3, [sp, #16]
     2e8:	9a05      	ldr	r2, [sp, #20]
     2ea:	041b      	lsls	r3, r3, #16
     2ec:	0215      	lsls	r5, r2, #8
     2ee:	431d      	orrs	r5, r3
     2f0:	4328      	orrs	r0, r5
}
     2f2:	b007      	add	sp, #28
     2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	000031cc 	.word	0x000031cc
     300:	00000b71 	.word	0x00000b71
     304:	00000bdd 	.word	0x00000bdd

00000308 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     30a:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     30c:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     30e:	8803      	ldrh	r3, [r0, #0]
     310:	aa04      	add	r2, sp, #16
     312:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     314:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     316:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     318:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     31a:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     31c:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     31e:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     320:	88c3      	ldrh	r3, [r0, #6]
     322:	9401      	str	r4, [sp, #4]
     324:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     326:	8903      	ldrh	r3, [r0, #8]
     328:	aa07      	add	r2, sp, #28
     32a:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     32c:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     32e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     330:	8941      	ldrh	r1, [r0, #10]
     332:	a804      	add	r0, sp, #16
     334:	181b      	adds	r3, r3, r0
     336:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     338:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     33a:	693a      	ldr	r2, [r7, #16]
     33c:	0236      	lsls	r6, r6, #8
     33e:	8818      	ldrh	r0, [r3, #0]
     340:	1b96      	subs	r6, r2, r6
     342:	17f2      	asrs	r2, r6, #31
     344:	4c2a      	ldr	r4, [pc, #168]	; (3f0 <ConvertPressureTemperature+0xe8>)
     346:	9203      	str	r2, [sp, #12]
     348:	17f3      	asrs	r3, r6, #31
     34a:	0032      	movs	r2, r6
     34c:	b280      	uxth	r0, r0
     34e:	2100      	movs	r1, #0
     350:	47a0      	blx	r4
     352:	23fa      	movs	r3, #250	; 0xfa
     354:	00db      	lsls	r3, r3, #3
     356:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     358:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     35a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     35c:	b29b      	uxth	r3, r3
     35e:	9302      	str	r3, [sp, #8]
     360:	9b01      	ldr	r3, [sp, #4]
     362:	0032      	movs	r2, r6
     364:	8818      	ldrh	r0, [r3, #0]
     366:	2100      	movs	r1, #0
     368:	17f3      	asrs	r3, r6, #31
     36a:	b280      	uxth	r0, r0
     36c:	47a0      	blx	r4
     36e:	064b      	lsls	r3, r1, #25
     370:	09c4      	lsrs	r4, r0, #7
     372:	431c      	orrs	r4, r3
     374:	2300      	movs	r3, #0
     376:	11cd      	asrs	r5, r1, #7
     378:	9902      	ldr	r1, [sp, #8]
     37a:	040a      	lsls	r2, r1, #16
     37c:	1912      	adds	r2, r2, r4
     37e:	416b      	adcs	r3, r5
     380:	9208      	str	r2, [sp, #32]
     382:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     384:	ab04      	add	r3, sp, #16
     386:	889c      	ldrh	r4, [r3, #4]
     388:	8918      	ldrh	r0, [r3, #8]
     38a:	0032      	movs	r2, r6
     38c:	9b03      	ldr	r3, [sp, #12]
     38e:	4d18      	ldr	r5, [pc, #96]	; (3f0 <ConvertPressureTemperature+0xe8>)
     390:	b280      	uxth	r0, r0
     392:	2100      	movs	r1, #0
     394:	47a8      	blx	r5
     396:	060b      	lsls	r3, r1, #24
     398:	0a05      	lsrs	r5, r0, #8
     39a:	431d      	orrs	r5, r3
     39c:	2300      	movs	r3, #0
     39e:	b2a4      	uxth	r4, r4
     3a0:	120e      	asrs	r6, r1, #8
     3a2:	03e2      	lsls	r2, r4, #15
     3a4:	1952      	adds	r2, r2, r5
     3a6:	4173      	adcs	r3, r6
     3a8:	920a      	str	r2, [sp, #40]	; 0x28
     3aa:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     3b0:	9c08      	ldr	r4, [sp, #32]
     3b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
     3b4:	4e0e      	ldr	r6, [pc, #56]	; (3f0 <ConvertPressureTemperature+0xe8>)
     3b6:	68f8      	ldr	r0, [r7, #12]
     3b8:	2100      	movs	r1, #0
     3ba:	47b0      	blx	r6
     3bc:	2300      	movs	r3, #0
     3be:	17ce      	asrs	r6, r1, #31
     3c0:	02f6      	lsls	r6, r6, #11
     3c2:	0af2      	lsrs	r2, r6, #11
     3c4:	1880      	adds	r0, r0, r2
     3c6:	4159      	adcs	r1, r3
     3c8:	02ce      	lsls	r6, r1, #11
     3ca:	0d42      	lsrs	r2, r0, #21
     3cc:	4332      	orrs	r2, r6
     3ce:	154b      	asrs	r3, r1, #21
     3d0:	1b12      	subs	r2, r2, r4
     3d2:	41ab      	sbcs	r3, r5
     3d4:	2100      	movs	r1, #0
     3d6:	17dc      	asrs	r4, r3, #31
     3d8:	0464      	lsls	r4, r4, #17
     3da:	0c60      	lsrs	r0, r4, #17
     3dc:	1812      	adds	r2, r2, r0
     3de:	414b      	adcs	r3, r1
     3e0:	0011      	movs	r1, r2
     3e2:	045b      	lsls	r3, r3, #17
     3e4:	0bca      	lsrs	r2, r1, #15
     3e6:	431a      	orrs	r2, r3
     3e8:	61fa      	str	r2, [r7, #28]
}
     3ea:	b00d      	add	sp, #52	; 0x34
     3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	000017c9 	.word	0x000017c9

000003f4 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3f4:	220a      	movs	r2, #10
     3f6:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     3f8:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3fa:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     3fc:	4c0e      	ldr	r4, [pc, #56]	; (438 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3fe:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     400:	42a2      	cmp	r2, r4
     402:	d901      	bls.n	408 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     404:	4b0d      	ldr	r3, [pc, #52]	; (43c <pascalToCent+0x48>)
     406:	e015      	b.n	434 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     408:	1aa3      	subs	r3, r4, r2
     40a:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     40c:	2b4b      	cmp	r3, #75	; 0x4b
     40e:	d901      	bls.n	414 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     410:	4b0b      	ldr	r3, [pc, #44]	; (440 <pascalToCent+0x4c>)
     412:	e00f      	b.n	434 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     414:	4d0b      	ldr	r5, [pc, #44]	; (444 <pascalToCent+0x50>)
     416:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     418:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     41a:	3301      	adds	r3, #1
     41c:	009b      	lsls	r3, r3, #2
     41e:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     420:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     422:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     424:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     426:	1aa4      	subs	r4, r4, r2
     428:	691a      	ldr	r2, [r3, #16]
     42a:	1a52      	subs	r2, r2, r1
     42c:	0013      	movs	r3, r2
     42e:	4363      	muls	r3, r4
     430:	0a9b      	lsrs	r3, r3, #10
     432:	185b      	adds	r3, r3, r1
     434:	6203      	str	r3, [r0, #32]
        }
    }
}
     436:	bd70      	pop	{r4, r5, r6, pc}
     438:	000199cc 	.word	0x000199cc
     43c:	ffff8d20 	.word	0xffff8d20
     440:	000f048e 	.word	0x000f048e
     444:	000031cc 	.word	0x000031cc

00000448 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	27a2      	movs	r7, #162	; 0xa2
     44c:	b087      	sub	sp, #28
     44e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     450:	2096      	movs	r0, #150	; 0x96
     452:	4c2b      	ldr	r4, [pc, #172]	; (500 <readMS5803Coefficients+0xb8>)
     454:	0080      	lsls	r0, r0, #2
     456:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     458:	2096      	movs	r0, #150	; 0x96
     45a:	0080      	lsls	r0, r0, #2
     45c:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     45e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     460:	4c28      	ldr	r4, [pc, #160]	; (504 <readMS5803Coefficients+0xbc>)
     462:	4b29      	ldr	r3, [pc, #164]	; (508 <readMS5803Coefficients+0xc0>)
     464:	0212      	lsls	r2, r2, #8
     466:	615a      	str	r2, [r3, #20]
     468:	7863      	ldrb	r3, [r4, #1]
     46a:	7820      	ldrb	r0, [r4, #0]
     46c:	78a2      	ldrb	r2, [r4, #2]
     46e:	021b      	lsls	r3, r3, #8
     470:	4303      	orrs	r3, r0
     472:	0412      	lsls	r2, r2, #16
     474:	0019      	movs	r1, r3
     476:	0013      	movs	r3, r2
     478:	430b      	orrs	r3, r1
     47a:	79a1      	ldrb	r1, [r4, #6]
     47c:	7966      	ldrb	r6, [r4, #5]
     47e:	0209      	lsls	r1, r1, #8
     480:	4331      	orrs	r1, r6
     482:	0008      	movs	r0, r1
     484:	79e1      	ldrb	r1, [r4, #7]
     486:	78e2      	ldrb	r2, [r4, #3]
     488:	0409      	lsls	r1, r1, #16
     48a:	4301      	orrs	r1, r0
     48c:	7a20      	ldrb	r0, [r4, #8]
     48e:	7a66      	ldrb	r6, [r4, #9]
     490:	0612      	lsls	r2, r2, #24
     492:	0600      	lsls	r0, r0, #24
     494:	4308      	orrs	r0, r1
     496:	431a      	orrs	r2, r3
     498:	9700      	str	r7, [sp, #0]
     49a:	7923      	ldrb	r3, [r4, #4]
     49c:	0031      	movs	r1, r6
     49e:	4d1b      	ldr	r5, [pc, #108]	; (50c <readMS5803Coefficients+0xc4>)
     4a0:	9003      	str	r0, [sp, #12]
     4a2:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4a4:	7ae3      	ldrb	r3, [r4, #11]
     4a6:	0020      	movs	r0, r4
     4a8:	7aa1      	ldrb	r1, [r4, #10]
     4aa:	7b24      	ldrb	r4, [r4, #12]
     4ac:	021b      	lsls	r3, r3, #8
     4ae:	430b      	orrs	r3, r1
     4b0:	0424      	lsls	r4, r4, #16
     4b2:	001a      	movs	r2, r3
     4b4:	0023      	movs	r3, r4
     4b6:	7b44      	ldrb	r4, [r0, #13]
     4b8:	7b85      	ldrb	r5, [r0, #14]
     4ba:	4313      	orrs	r3, r2
     4bc:	0624      	lsls	r4, r4, #24
     4be:	431c      	orrs	r4, r3
     4c0:	0022      	movs	r2, r4
     4c2:	002b      	movs	r3, r5
     4c4:	9404      	str	r4, [sp, #16]
     4c6:	0031      	movs	r1, r6
     4c8:	4c11      	ldr	r4, [pc, #68]	; (510 <readMS5803Coefficients+0xc8>)
     4ca:	9803      	ldr	r0, [sp, #12]
     4cc:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ce:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4d0:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4d2:	9a04      	ldr	r2, [sp, #16]
     4d4:	9803      	ldr	r0, [sp, #12]
     4d6:	0031      	movs	r1, r6
     4d8:	4c0d      	ldr	r4, [pc, #52]	; (510 <readMS5803Coefficients+0xc8>)
     4da:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4dc:	2280      	movs	r2, #128	; 0x80
     4de:	4b0a      	ldr	r3, [pc, #40]	; (508 <readMS5803Coefficients+0xc0>)
     4e0:	0212      	lsls	r2, r2, #8
     4e2:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     4e4:	9b05      	ldr	r3, [sp, #20]
     4e6:	021d      	lsls	r5, r3, #8
     4e8:	9b02      	ldr	r3, [sp, #8]
     4ea:	4328      	orrs	r0, r5
     4ec:	8018      	strh	r0, [r3, #0]
     4ee:	1cbb      	adds	r3, r7, #2
     4f0:	b2df      	uxtb	r7, r3
     4f2:	9b02      	ldr	r3, [sp, #8]
     4f4:	3302      	adds	r3, #2
     4f6:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     4f8:	2fae      	cmp	r7, #174	; 0xae
     4fa:	d1a9      	bne.n	450 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     4fc:	b007      	add	sp, #28
     4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     500:	00000de1 	.word	0x00000de1
     504:	000031cc 	.word	0x000031cc
     508:	41004400 	.word	0x41004400
     50c:	00000b71 	.word	0x00000b71
     510:	00000bdd 	.word	0x00000bdd

00000514 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     516:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     518:	231e      	movs	r3, #30
     51a:	491a      	ldr	r1, [pc, #104]	; (584 <initMS5803Barometer+0x70>)
     51c:	4d1a      	ldr	r5, [pc, #104]	; (588 <initMS5803Barometer+0x74>)
     51e:	0236      	lsls	r6, r6, #8
     520:	616e      	str	r6, [r5, #20]
     522:	9300      	str	r3, [sp, #0]
     524:	784b      	ldrb	r3, [r1, #1]
     526:	780a      	ldrb	r2, [r1, #0]
     528:	021b      	lsls	r3, r3, #8
     52a:	4313      	orrs	r3, r2
     52c:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     52e:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     530:	0412      	lsls	r2, r2, #16
     532:	0018      	movs	r0, r3
     534:	0013      	movs	r3, r2
     536:	78ca      	ldrb	r2, [r1, #3]
     538:	4303      	orrs	r3, r0
     53a:	0612      	lsls	r2, r2, #24
     53c:	1d4f      	adds	r7, r1, #5
     53e:	431a      	orrs	r2, r3
     540:	7948      	ldrb	r0, [r1, #5]
     542:	790b      	ldrb	r3, [r1, #4]
     544:	7989      	ldrb	r1, [r1, #6]
     546:	0209      	lsls	r1, r1, #8
     548:	4301      	orrs	r1, r0
     54a:	78b8      	ldrb	r0, [r7, #2]
     54c:	0400      	lsls	r0, r0, #16
     54e:	4301      	orrs	r1, r0
     550:	78f8      	ldrb	r0, [r7, #3]
     552:	0600      	lsls	r0, r0, #24
     554:	4308      	orrs	r0, r1
     556:	7939      	ldrb	r1, [r7, #4]
     558:	4f0c      	ldr	r7, [pc, #48]	; (58c <initMS5803Barometer+0x78>)
     55a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     55c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     55e:	20c8      	movs	r0, #200	; 0xc8
     560:	4b0b      	ldr	r3, [pc, #44]	; (590 <initMS5803Barometer+0x7c>)
     562:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     564:	0020      	movs	r0, r4
     566:	4b0b      	ldr	r3, [pc, #44]	; (594 <initMS5803Barometer+0x80>)
     568:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     56a:	23fa      	movs	r3, #250	; 0xfa
     56c:	011b      	lsls	r3, r3, #4
     56e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     570:	4b09      	ldr	r3, [pc, #36]	; (598 <initMS5803Barometer+0x84>)
     572:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     574:	4b09      	ldr	r3, [pc, #36]	; (59c <initMS5803Barometer+0x88>)
     576:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     578:	4b09      	ldr	r3, [pc, #36]	; (5a0 <initMS5803Barometer+0x8c>)
     57a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     57c:	23fa      	movs	r3, #250	; 0xfa
     57e:	00db      	lsls	r3, r3, #3
     580:	6163      	str	r3, [r4, #20]




}
     582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     584:	000031cc 	.word	0x000031cc
     588:	41004400 	.word	0x41004400
     58c:	00000b71 	.word	0x00000b71
     590:	00000e11 	.word	0x00000e11
     594:	00000449 	.word	0x00000449
     598:	00002710 	.word	0x00002710
     59c:	0041c9fe 	.word	0x0041c9fe
     5a0:	007ffae4 	.word	0x007ffae4

000005a4 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     5a6:	4bbf      	ldr	r3, [pc, #764]	; (8a4 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5a8:	b085      	sub	sp, #20
    SystemInit();
     5aa:	4798      	blx	r3
    GclkInit();
     5ac:	4bbe      	ldr	r3, [pc, #760]	; (8a8 <init+0x304>)
     5ae:	4798      	blx	r3
    RtcInit();
     5b0:	4bbe      	ldr	r3, [pc, #760]	; (8ac <init+0x308>)
     5b2:	4798      	blx	r3
    delayInit();
     5b4:	4bbe      	ldr	r3, [pc, #760]	; (8b0 <init+0x30c>)
     5b6:	4798      	blx	r3
    adcInit();
     5b8:	4bbe      	ldr	r3, [pc, #760]	; (8b4 <init+0x310>)
     5ba:	4798      	blx	r3
    dmaInit();
     5bc:	4bbe      	ldr	r3, [pc, #760]	; (8b8 <init+0x314>)
     5be:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c2:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	4bbd      	ldr	r3, [pc, #756]	; (8bc <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	5858      	ldr	r0, [r3, r1]
     5cc:	4abc      	ldr	r2, [pc, #752]	; (8c0 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	2401      	movs	r4, #1
     5d0:	4002      	ands	r2, r0
     5d2:	505a      	str	r2, [r3, r1]
     5d4:	4bbb      	ldr	r3, [pc, #748]	; (8c4 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5d6:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d8:	0019      	movs	r1, r3
     5da:	3154      	adds	r1, #84	; 0x54
     5dc:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5de:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e0:	43a2      	bics	r2, r4
     5e2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e4:	2280      	movs	r2, #128	; 0x80
     5e6:	0352      	lsls	r2, r2, #13
     5e8:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	220f      	movs	r2, #15
     5ec:	3033      	adds	r0, #51	; 0x33
     5ee:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f2:	4391      	bics	r1, r2
     5f4:	4321      	orrs	r1, r4
     5f6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f8:	7cc1      	ldrb	r1, [r0, #19]
     5fa:	36c3      	adds	r6, #195	; 0xc3
     5fc:	4321      	orrs	r1, r4
     5fe:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     600:	0019      	movs	r1, r3
     602:	31b1      	adds	r1, #177	; 0xb1
     604:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     606:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     608:	4010      	ands	r0, r2
     60a:	4328      	orrs	r0, r5
     60c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     60e:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     610:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     612:	4320      	orrs	r0, r4
     614:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     616:	7808      	ldrb	r0, [r1, #0]
     618:	4010      	ands	r0, r2
     61a:	4328      	orrs	r0, r5
     61c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61e:	7830      	ldrb	r0, [r6, #0]
     620:	4320      	orrs	r0, r4
     622:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     624:	7d30      	ldrb	r0, [r6, #20]
     626:	43a0      	bics	r0, r4
     628:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     62a:	2080      	movs	r0, #128	; 0x80
     62c:	0400      	lsls	r0, r0, #16
     62e:	9703      	str	r7, [sp, #12]
     630:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     632:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     634:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     636:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     638:	4390      	bics	r0, r2
     63a:	4320      	orrs	r0, r4
     63c:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     63e:	20c2      	movs	r0, #194	; 0xc2
     640:	4684      	mov	ip, r0
     642:	449c      	add	ip, r3
     644:	4660      	mov	r0, ip
     646:	4667      	mov	r7, ip
     648:	7800      	ldrb	r0, [r0, #0]
     64a:	4320      	orrs	r0, r4
     64c:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     64e:	7808      	ldrb	r0, [r1, #0]
     650:	4390      	bics	r0, r2
     652:	4320      	orrs	r0, r4
     654:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     656:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     658:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     65a:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65c:	4321      	orrs	r1, r4
     65e:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     660:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     662:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     664:	43a1      	bics	r1, r4
     666:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     668:	2180      	movs	r1, #128	; 0x80
     66a:	9803      	ldr	r0, [sp, #12]
     66c:	03c9      	lsls	r1, r1, #15
     66e:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     670:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     672:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     674:	3031      	adds	r0, #49	; 0x31
     676:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     678:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     67a:	4011      	ands	r1, r2
     67c:	430d      	orrs	r5, r1
     67e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     680:	001d      	movs	r5, r3
     682:	3543      	adds	r5, #67	; 0x43
     684:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     686:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     688:	4321      	orrs	r1, r4
     68a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68c:	7da9      	ldrb	r1, [r5, #22]
     68e:	3505      	adds	r5, #5
     690:	43a1      	bics	r1, r4
     692:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	0489      	lsls	r1, r1, #18
     698:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     69c:	7801      	ldrb	r1, [r0, #0]
     69e:	4391      	bics	r1, r2
     6a0:	4321      	orrs	r1, r4
     6a2:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a4:	7c41      	ldrb	r1, [r0, #17]
     6a6:	3011      	adds	r0, #17
     6a8:	4321      	orrs	r1, r4
     6aa:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ac:	7d81      	ldrb	r1, [r0, #22]
     6ae:	43a1      	bics	r1, r4
     6b0:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b2:	2180      	movs	r1, #128	; 0x80
     6b4:	0449      	lsls	r1, r1, #17
     6b6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6b8:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	43a1      	bics	r1, r4
     6be:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c0:	2180      	movs	r1, #128	; 0x80
     6c2:	0049      	lsls	r1, r1, #1
     6c4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c6:	7831      	ldrb	r1, [r6, #0]
     6c8:	43a1      	bics	r1, r4
     6ca:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6cc:	2180      	movs	r1, #128	; 0x80
     6ce:	0089      	lsls	r1, r1, #2
     6d0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d2:	0019      	movs	r1, r3
     6d4:	314b      	adds	r1, #75	; 0x4b
     6d6:	7808      	ldrb	r0, [r1, #0]
     6d8:	43a0      	bics	r0, r4
     6da:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6dc:	7808      	ldrb	r0, [r1, #0]
     6de:	4338      	orrs	r0, r7
     6e0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6e2:	2080      	movs	r0, #128	; 0x80
     6e4:	0100      	lsls	r0, r0, #4
     6e6:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6e8:	4877      	ldr	r0, [pc, #476]	; (8c8 <init+0x324>)
     6ea:	371e      	adds	r7, #30
     6ec:	7800      	ldrb	r0, [r0, #0]
     6ee:	4010      	ands	r0, r2
     6f0:	4338      	orrs	r0, r7
     6f2:	4f75      	ldr	r7, [pc, #468]	; (8c8 <init+0x324>)
     6f4:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f8:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	4320      	orrs	r0, r4
     6fc:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fe:	0018      	movs	r0, r3
     700:	3034      	adds	r0, #52	; 0x34
     702:	7801      	ldrb	r1, [r0, #0]
     704:	4011      	ands	r1, r2
     706:	4339      	orrs	r1, r7
     708:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70a:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     70c:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70e:	4321      	orrs	r1, r4
     710:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     712:	4666      	mov	r6, ip
     714:	7801      	ldrb	r1, [r0, #0]
     716:	4391      	bics	r1, r2
     718:	4331      	orrs	r1, r6
     71a:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     71c:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71e:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     720:	4321      	orrs	r1, r4
     722:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     724:	7801      	ldrb	r1, [r0, #0]
     726:	001e      	movs	r6, r3
     728:	43a1      	bics	r1, r4
     72a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72c:	2180      	movs	r1, #128	; 0x80
     72e:	9803      	ldr	r0, [sp, #12]
     730:	00c9      	lsls	r1, r1, #3
     732:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     734:	0018      	movs	r0, r3
     736:	3098      	adds	r0, #152	; 0x98
     738:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73a:	78a8      	ldrb	r0, [r5, #2]
     73c:	3651      	adds	r6, #81	; 0x51
     73e:	43a0      	bics	r0, r4
     740:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     742:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     744:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     746:	7a29      	ldrb	r1, [r5, #8]
     748:	43a1      	bics	r1, r4
     74a:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     74c:	2180      	movs	r1, #128	; 0x80
     74e:	0249      	lsls	r1, r1, #9
     750:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     752:	7831      	ldrb	r1, [r6, #0]
     754:	43a1      	bics	r1, r4
     756:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     758:	2180      	movs	r1, #128	; 0x80
     75a:	0289      	lsls	r1, r1, #10
     75c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75e:	0019      	movs	r1, r3
     760:	3153      	adds	r1, #83	; 0x53
     762:	7808      	ldrb	r0, [r1, #0]
     764:	43a0      	bics	r0, r4
     766:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     768:	7808      	ldrb	r0, [r1, #0]
     76a:	4338      	orrs	r0, r7
     76c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     770:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     772:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     774:	0300      	lsls	r0, r0, #12
     776:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     778:	9703      	str	r7, [sp, #12]
     77a:	7838      	ldrb	r0, [r7, #0]
     77c:	2720      	movs	r7, #32
     77e:	4010      	ands	r0, r2
     780:	4338      	orrs	r0, r7
     782:	9f03      	ldr	r7, [sp, #12]
     784:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     786:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     788:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78a:	4320      	orrs	r0, r4
     78c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     78e:	0018      	movs	r0, r3
     790:	3038      	adds	r0, #56	; 0x38
     792:	7801      	ldrb	r1, [r0, #0]
     794:	4011      	ands	r1, r2
     796:	4339      	orrs	r1, r7
     798:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79a:	7831      	ldrb	r1, [r6, #0]
     79c:	4321      	orrs	r1, r4
     79e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7a0:	4666      	mov	r6, ip
     7a2:	7801      	ldrb	r1, [r0, #0]
     7a4:	4391      	bics	r1, r2
     7a6:	4331      	orrs	r1, r6
     7a8:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7aa:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ac:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ae:	4321      	orrs	r1, r4
     7b0:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	7981      	ldrb	r1, [r0, #6]
     7b4:	43a1      	bics	r1, r4
     7b6:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	02c9      	lsls	r1, r1, #11
     7bc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7be:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	7801      	ldrb	r1, [r0, #0]
     7c2:	43a1      	bics	r1, r4
     7c4:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c6:	2180      	movs	r1, #128	; 0x80
     7c8:	0149      	lsls	r1, r1, #5
     7ca:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7cc:	7881      	ldrb	r1, [r0, #2]
     7ce:	43a1      	bics	r1, r4
     7d0:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d2:	2180      	movs	r1, #128	; 0x80
     7d4:	01c9      	lsls	r1, r1, #7
     7d6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d8:	0019      	movs	r1, r3
     7da:	314d      	adds	r1, #77	; 0x4d
     7dc:	7808      	ldrb	r0, [r1, #0]
     7de:	43a0      	bics	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7e2:	7808      	ldrb	r0, [r1, #0]
     7e4:	4330      	orrs	r0, r6
     7e6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e8:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ea:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7ec:	0189      	lsls	r1, r1, #6
     7ee:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f0:	304f      	adds	r0, #79	; 0x4f
     7f2:	7801      	ldrb	r1, [r0, #0]
     7f4:	43a1      	bics	r1, r4
     7f6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f8:	2180      	movs	r1, #128	; 0x80
     7fa:	0209      	lsls	r1, r1, #8
     7fc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7fe:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	0019      	movs	r1, r3
     802:	3155      	adds	r1, #85	; 0x55
     804:	7808      	ldrb	r0, [r1, #0]
     806:	43a0      	bics	r0, r4
     808:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80a:	2080      	movs	r0, #128	; 0x80
     80c:	0380      	lsls	r0, r0, #14
     80e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     810:	2040      	movs	r0, #64	; 0x40
     812:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	7848      	ldrb	r0, [r1, #1]
     816:	43a0      	bics	r0, r4
     818:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81a:	2080      	movs	r0, #128	; 0x80
     81c:	03c0      	lsls	r0, r0, #15
     81e:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     820:	0018      	movs	r0, r3
     822:	303b      	adds	r0, #59	; 0x3b
     824:	7805      	ldrb	r5, [r0, #0]
     826:	4395      	bics	r5, r2
     828:	4335      	orrs	r5, r6
     82a:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	784d      	ldrb	r5, [r1, #1]
     82e:	4325      	orrs	r5, r4
     830:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     832:	788d      	ldrb	r5, [r1, #2]
     834:	43a5      	bics	r5, r4
     836:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     838:	788d      	ldrb	r5, [r1, #2]
     83a:	4335      	orrs	r5, r6
     83c:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     83e:	2580      	movs	r5, #128	; 0x80
     840:	042d      	lsls	r5, r5, #16
     842:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     844:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     846:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     848:	4e20      	ldr	r6, [pc, #128]	; (8cc <init+0x328>)
     84a:	401a      	ands	r2, r3
     84c:	433a      	orrs	r2, r7
     84e:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     850:	788b      	ldrb	r3, [r1, #2]
     852:	2204      	movs	r2, #4
     854:	4323      	orrs	r3, r4
     856:	708b      	strb	r3, [r1, #2]
     858:	2000      	movs	r0, #0
     85a:	2103      	movs	r1, #3
     85c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     85e:	002b      	movs	r3, r5
     860:	002a      	movs	r2, r5
     862:	0028      	movs	r0, r5
     864:	4f1a      	ldr	r7, [pc, #104]	; (8d0 <init+0x32c>)
     866:	9501      	str	r5, [sp, #4]
     868:	9500      	str	r5, [sp, #0]
     86a:	2103      	movs	r1, #3
     86c:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     86e:	0020      	movs	r0, r4
     870:	2204      	movs	r2, #4
     872:	2103      	movs	r1, #3
     874:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     876:	002b      	movs	r3, r5
     878:	002a      	movs	r2, r5
     87a:	0020      	movs	r0, r4
     87c:	9501      	str	r5, [sp, #4]
     87e:	9500      	str	r5, [sp, #0]
     880:	2103      	movs	r1, #3
     882:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     884:	2208      	movs	r2, #8
     886:	2104      	movs	r1, #4
     888:	2003      	movs	r0, #3
     88a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     88c:	0021      	movs	r1, r4
     88e:	002a      	movs	r2, r5
     890:	2003      	movs	r0, #3
     892:	4b10      	ldr	r3, [pc, #64]	; (8d4 <init+0x330>)
     894:	4c10      	ldr	r4, [pc, #64]	; (8d8 <init+0x334>)
     896:	47a0      	blx	r4

    TC4Init();
     898:	4b10      	ldr	r3, [pc, #64]	; (8dc <init+0x338>)
     89a:	4798      	blx	r3
    TC5Init();
     89c:	4b10      	ldr	r3, [pc, #64]	; (8e0 <init+0x33c>)
     89e:	4798      	blx	r3
}
     8a0:	b005      	add	sp, #20
     8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8a4:	000001d5 	.word	0x000001d5
     8a8:	00000c6d 	.word	0x00000c6d
     8ac:	00000cf5 	.word	0x00000cf5
     8b0:	00000dc1 	.word	0x00000dc1
     8b4:	00000a8d 	.word	0x00000a8d
     8b8:	00000f61 	.word	0x00000f61
     8bc:	e000e100 	.word	0xe000e100
     8c0:	ff00ffff 	.word	0xff00ffff
     8c4:	41004400 	.word	0x41004400
     8c8:	41004435 	.word	0x41004435
     8cc:	00001629 	.word	0x00001629
     8d0:	0000168d 	.word	0x0000168d
     8d4:	0000f2e4 	.word	0x0000f2e4
     8d8:	000016f1 	.word	0x000016f1
     8dc:	00000e91 	.word	0x00000e91
     8e0:	00000ef9 	.word	0x00000ef9

000008e4 <main>:
    delay_ms(500);
}



int main(void) {
     8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e6:	4c3d      	ldr	r4, [pc, #244]	; (9dc <main+0xf8>)

    init();
     8e8:	4b3d      	ldr	r3, [pc, #244]	; (9e0 <main+0xfc>)
    delay_ms(500);
}



int main(void) {
     8ea:	44a5      	add	sp, r4

    init();
     8ec:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8ee:	2400      	movs	r4, #0
     8f0:	466b      	mov	r3, sp
    initMS5803Barometer(&my_altimeter.myBarometer);
     8f2:	a801      	add	r0, sp, #4
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8f4:	701c      	strb	r4, [r3, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     8f6:	4b3b      	ldr	r3, [pc, #236]	; (9e4 <main+0x100>)
     8f8:	4798      	blx	r3
    IMUinit();
     8fa:	4b3b      	ldr	r3, [pc, #236]	; (9e8 <main+0x104>)
     8fc:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     8fe:	23c8      	movs	r3, #200	; 0xc8
     900:	466a      	mov	r2, sp
     902:	005b      	lsls	r3, r3, #1
     904:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
     906:	2380      	movs	r3, #128	; 0x80
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
    my_altimeter.myFlashMemory.pageReady = false;
     908:	4f38      	ldr	r7, [pc, #224]	; (9ec <main+0x108>)
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
     90a:	019b      	lsls	r3, r3, #6
     90c:	9322      	str	r3, [sp, #136]	; 0x88
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     90e:	4b38      	ldr	r3, [pc, #224]	; (9f0 <main+0x10c>)
    my_altimeter.myFlashMemory.pageReady = false;
     910:	55d4      	strb	r4, [r2, r7]





    u32_t timeNow = millis();
     912:	4c38      	ldr	r4, [pc, #224]	; (9f4 <main+0x110>)
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     914:	9323      	str	r3, [sp, #140]	; 0x8c





    u32_t timeNow = millis();
     916:	47a0      	blx	r4
     918:	0005      	movs	r5, r0
    while((millis() - timeNow) < 3000) {
     91a:	47a0      	blx	r4
     91c:	4b36      	ldr	r3, [pc, #216]	; (9f8 <main+0x114>)
     91e:	1b40      	subs	r0, r0, r5
     920:	4298      	cmp	r0, r3
     922:	d806      	bhi.n	932 <main+0x4e>
        sampleTick(&my_altimeter);
     924:	4668      	mov	r0, sp
     926:	4b35      	ldr	r3, [pc, #212]	; (9fc <main+0x118>)
     928:	4798      	blx	r3
        flight(&my_altimeter);
     92a:	4668      	mov	r0, sp
     92c:	4b34      	ldr	r3, [pc, #208]	; (a00 <main+0x11c>)
     92e:	4798      	blx	r3
     930:	e7f3      	b.n	91a <main+0x36>
    }

    logFlight(&my_altimeter);
     932:	4668      	mov	r0, sp
     934:	4b33      	ldr	r3, [pc, #204]	; (a04 <main+0x120>)
     936:	4798      	blx	r3

    //beep(300);

    if (isFlightLogged(0)) {
     938:	2000      	movs	r0, #0
     93a:	4c33      	ldr	r4, [pc, #204]	; (a08 <main+0x124>)
     93c:	47a0      	blx	r4
     93e:	2800      	cmp	r0, #0
     940:	d007      	beq.n	952 <main+0x6e>
        beep(2000);
     942:	20fa      	movs	r0, #250	; 0xfa
     944:	4b31      	ldr	r3, [pc, #196]	; (a0c <main+0x128>)
     946:	00c0      	lsls	r0, r0, #3
     948:	4798      	blx	r3
        delay_ms(500);
     94a:	20fa      	movs	r0, #250	; 0xfa
     94c:	4b30      	ldr	r3, [pc, #192]	; (a10 <main+0x12c>)
     94e:	0040      	lsls	r0, r0, #1
     950:	4798      	blx	r3

    }

    if (isFlightLogged(1)) {
     952:	2001      	movs	r0, #1
     954:	47a0      	blx	r4
     956:	2800      	cmp	r0, #0
     958:	d007      	beq.n	96a <main+0x86>
        beep(2000);
     95a:	20fa      	movs	r0, #250	; 0xfa
     95c:	4b2b      	ldr	r3, [pc, #172]	; (a0c <main+0x128>)
     95e:	00c0      	lsls	r0, r0, #3
     960:	4798      	blx	r3
        delay_ms(500);
     962:	20fa      	movs	r0, #250	; 0xfa
     964:	4b2a      	ldr	r3, [pc, #168]	; (a10 <main+0x12c>)
     966:	0040      	lsls	r0, r0, #1
     968:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     96a:	2680      	movs	r6, #128	; 0x80
     96c:	0376      	lsls	r6, r6, #13
    while (1) {

        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     96e:	2400      	movs	r4, #0
    }


    while (1) {

        if (takeSample) {
     970:	4d28      	ldr	r5, [pc, #160]	; (a14 <main+0x130>)
     972:	782b      	ldrb	r3, [r5, #0]
     974:	2b00      	cmp	r3, #0
     976:	d006      	beq.n	986 <main+0xa2>
            sampleTick(&my_altimeter);
     978:	4668      	mov	r0, sp
     97a:	4b20      	ldr	r3, [pc, #128]	; (9fc <main+0x118>)
     97c:	4798      	blx	r3
            flight(&my_altimeter);
     97e:	4668      	mov	r0, sp
     980:	4b1f      	ldr	r3, [pc, #124]	; (a00 <main+0x11c>)
     982:	4798      	blx	r3
            takeSample = false;
     984:	702c      	strb	r4, [r5, #0]
        }

        if (writeLog) {
     986:	4b24      	ldr	r3, [pc, #144]	; (a18 <main+0x134>)
     988:	781a      	ldrb	r2, [r3, #0]
     98a:	2a00      	cmp	r2, #0
     98c:	d0f0      	beq.n	970 <main+0x8c>
            writeLog = false;
     98e:	701c      	strb	r4, [r3, #0]
            logSensors(&my_altimeter);
     990:	4668      	mov	r0, sp
     992:	4b22      	ldr	r3, [pc, #136]	; (a1c <main+0x138>)
     994:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     996:	466b      	mov	r3, sp
     998:	5ddb      	ldrb	r3, [r3, r7]
     99a:	2b00      	cmp	r3, #0
     99c:	d0e8      	beq.n	970 <main+0x8c>
                my_altimeter.myFlashMemory.pageReady = false;
     99e:	2200      	movs	r2, #0
     9a0:	4669      	mov	r1, sp
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <main+0x108>)
     9a4:	4d1e      	ldr	r5, [pc, #120]	; (a20 <main+0x13c>)
     9a6:	54ca      	strb	r2, [r1, r3]
     9a8:	61ee      	str	r6, [r5, #28]

                pinToggle(LedPin);

                if (my_altimeter.myFlashMemory.currentAddress <= my_altimeter.myFlashMemory.endingAddress) {
     9aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
     9ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
     9ae:	4293      	cmp	r3, r2
     9b0:	d803      	bhi.n	9ba <main+0xd6>

                    //u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
                    my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     9b2:	3301      	adds	r3, #1
     9b4:	33ff      	adds	r3, #255	; 0xff
     9b6:	9322      	str	r3, [sp, #136]	; 0x88
     9b8:	e7d9      	b.n	96e <main+0x8a>
                } else {
                    delay_ms(80);
     9ba:	4c15      	ldr	r4, [pc, #84]	; (a10 <main+0x12c>)
     9bc:	2050      	movs	r0, #80	; 0x50
     9be:	47a0      	blx	r4
     9c0:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9c2:	2050      	movs	r0, #80	; 0x50
     9c4:	47a0      	blx	r4
     9c6:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9c8:	2050      	movs	r0, #80	; 0x50
     9ca:	47a0      	blx	r4
     9cc:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9ce:	2050      	movs	r0, #80	; 0x50
     9d0:	47a0      	blx	r4
     9d2:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9d4:	2050      	movs	r0, #80	; 0x50
     9d6:	47a0      	blx	r4
     9d8:	e7c9      	b.n	96e <main+0x8a>
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	fffffd54 	.word	0xfffffd54
     9e0:	000005a5 	.word	0x000005a5
     9e4:	00000515 	.word	0x00000515
     9e8:	00000a25 	.word	0x00000a25
     9ec:	00000291 	.word	0x00000291
     9f0:	00005fff 	.word	0x00005fff
     9f4:	00000e5d 	.word	0x00000e5d
     9f8:	00000bb7 	.word	0x00000bb7
     9fc:	00001281 	.word	0x00001281
     a00:	00000fc1 	.word	0x00000fc1
     a04:	00001191 	.word	0x00001191
     a08:	00000a51 	.word	0x00000a51
     a0c:	00000c31 	.word	0x00000c31
     a10:	00000e11 	.word	0x00000e11
     a14:	20000463 	.word	0x20000463
     a18:	20000461 	.word	0x20000461
     a1c:	000011ed 	.word	0x000011ed
     a20:	41004400 	.word	0x41004400

00000a24 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a24:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a26:	4c08      	ldr	r4, [pc, #32]	; (a48 <IMUinit+0x24>)
     a28:	2580      	movs	r5, #128	; 0x80
     a2a:	0023      	movs	r3, r4
     a2c:	00ed      	lsls	r5, r5, #3
     a2e:	3394      	adds	r3, #148	; 0x94
     a30:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a32:	4e06      	ldr	r6, [pc, #24]	; (a4c <IMUinit+0x28>)
     a34:	210f      	movs	r1, #15
     a36:	2000      	movs	r0, #0
     a38:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a3a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a3c:	210c      	movs	r1, #12
     a3e:	2000      	movs	r0, #0
     a40:	47b0      	blx	r6
     a42:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a44:	bd70      	pop	{r4, r5, r6, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	41004400 	.word	0x41004400
     a4c:	00001735 	.word	0x00001735

00000a50 <isFlightLogged>:
        }
    }
}


bool isFlightLogged(u8_t flightNumbToCheck) {
     a50:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     a52:	2103      	movs	r1, #3

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     a54:	2300      	movs	r3, #0

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     a56:	4348      	muls	r0, r1

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     a58:	ac01      	add	r4, sp, #4

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     a5a:	3001      	adds	r0, #1

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     a5c:	7023      	strb	r3, [r4, #0]
     a5e:	7063      	strb	r3, [r4, #1]
     a60:	70a3      	strb	r3, [r4, #2]

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     a62:	30ff      	adds	r0, #255	; 0xff
     a64:	0022      	movs	r2, r4
     a66:	4b07      	ldr	r3, [pc, #28]	; (a84 <isFlightLogged+0x34>)
     a68:	4798      	blx	r3

    u32_t possibleStart = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    if (possibleStart == 0xFFFFFF) {
     a6a:	7860      	ldrb	r0, [r4, #1]
     a6c:	78a3      	ldrb	r3, [r4, #2]
     a6e:	0200      	lsls	r0, r0, #8
     a70:	041b      	lsls	r3, r3, #16
     a72:	4318      	orrs	r0, r3
     a74:	7823      	ldrb	r3, [r4, #0]
     a76:	4318      	orrs	r0, r3
     a78:	4b03      	ldr	r3, [pc, #12]	; (a88 <isFlightLogged+0x38>)
     a7a:	18c0      	adds	r0, r0, r3
     a7c:	1e43      	subs	r3, r0, #1
     a7e:	4198      	sbcs	r0, r3
     a80:	b2c0      	uxtb	r0, r0
    } else {
        return true;
    }


     a82:	bd16      	pop	{r1, r2, r4, pc}
     a84:	000001e5 	.word	0x000001e5
     a88:	ff000001 	.word	0xff000001

00000a8c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a8c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     a8e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a90:	4a10      	ldr	r2, [pc, #64]	; (ad4 <adcInit+0x48>)
     a92:	0249      	lsls	r1, r1, #9
     a94:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a96:	4810      	ldr	r0, [pc, #64]	; (ad8 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a98:	430b      	orrs	r3, r1
     a9a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a9c:	23e0      	movs	r3, #224	; 0xe0
     a9e:	490f      	ldr	r1, [pc, #60]	; (adc <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     aa0:	4a0f      	ldr	r2, [pc, #60]	; (ae0 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     aa2:	00db      	lsls	r3, r3, #3
     aa4:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     aa6:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     aa8:	4a0e      	ldr	r2, [pc, #56]	; (ae4 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     aaa:	6812      	ldr	r2, [r2, #0]
     aac:	0150      	lsls	r0, r2, #5
     aae:	4018      	ands	r0, r3
     ab0:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <adcInit+0x5c>)
     ab2:	0154      	lsls	r4, r2, #5
     ab4:	681a      	ldr	r2, [r3, #0]
     ab6:	0ed3      	lsrs	r3, r2, #27
     ab8:	4323      	orrs	r3, r4
     aba:	b2da      	uxtb	r2, r3
     abc:	0003      	movs	r3, r0
     abe:	4313      	orrs	r3, r2
     ac0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     ac2:	2302      	movs	r3, #2
     ac4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     ac6:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ac8:	7e4b      	ldrb	r3, [r1, #25]
     aca:	b25b      	sxtb	r3, r3
     acc:	2b00      	cmp	r3, #0
     ace:	dbfb      	blt.n	ac8 <adcInit+0x3c>
}
     ad0:	bd10      	pop	{r4, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	40000400 	.word	0x40000400
     ad8:	0000401e 	.word	0x0000401e
     adc:	42004000 	.word	0x42004000
     ae0:	40000c00 	.word	0x40000c00
     ae4:	00806024 	.word	0x00806024
     ae8:	00806020 	.word	0x00806020

00000aec <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     aec:	2202      	movs	r2, #2
     aee:	4b05      	ldr	r3, [pc, #20]	; (b04 <adcSample+0x18>)
     af0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     af2:	3a01      	subs	r2, #1
     af4:	7e19      	ldrb	r1, [r3, #24]
     af6:	4211      	tst	r1, r2
     af8:	d0fc      	beq.n	af4 <adcSample+0x8>
    return ADC->RESULT.reg;
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <adcSample+0x18>)
     afc:	8b58      	ldrh	r0, [r3, #26]
     afe:	b280      	uxth	r0, r0
}
     b00:	4770      	bx	lr
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	42004000 	.word	0x42004000

00000b08 <adc_read>:


u16_t adc_read(Pin p) {
     b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b0a:	2501      	movs	r5, #1
     b0c:	0c02      	lsrs	r2, r0, #16
     b0e:	b2d4      	uxtb	r4, r2
     b10:	9000      	str	r0, [sp, #0]
     b12:	0e00      	lsrs	r0, r0, #24
     b14:	9101      	str	r1, [sp, #4]
     b16:	0842      	lsrs	r2, r0, #1
     b18:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b1a:	4911      	ldr	r1, [pc, #68]	; (b60 <adc_read+0x58>)
     b1c:	18d2      	adds	r2, r2, r3
     b1e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b20:	4228      	tst	r0, r5
     b22:	d005      	beq.n	b30 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b24:	210f      	movs	r1, #15
     b26:	7814      	ldrb	r4, [r2, #0]
     b28:	4021      	ands	r1, r4
     b2a:	2410      	movs	r4, #16
     b2c:	4321      	orrs	r1, r4
     b2e:	e003      	b.n	b38 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b30:	240f      	movs	r4, #15
     b32:	7811      	ldrb	r1, [r2, #0]
     b34:	43a1      	bics	r1, r4
     b36:	4329      	orrs	r1, r5
     b38:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b3a:	2101      	movs	r1, #1
     b3c:	4a09      	ldr	r2, [pc, #36]	; (b64 <adc_read+0x5c>)
     b3e:	18c3      	adds	r3, r0, r3
     b40:	189b      	adds	r3, r3, r2
     b42:	781a      	ldrb	r2, [r3, #0]
     b44:	430a      	orrs	r2, r1
     b46:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b48:	466b      	mov	r3, sp
     b4a:	791a      	ldrb	r2, [r3, #4]
     b4c:	231f      	movs	r3, #31
     b4e:	4013      	ands	r3, r2
     b50:	22c0      	movs	r2, #192	; 0xc0
     b52:	0152      	lsls	r2, r2, #5
     b54:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b56:	4a04      	ldr	r2, [pc, #16]	; (b68 <adc_read+0x60>)
     b58:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     b5a:	4b04      	ldr	r3, [pc, #16]	; (b6c <adc_read+0x64>)
     b5c:	4798      	blx	r3
     b5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     b60:	41004430 	.word	0x41004430
     b64:	41004440 	.word	0x41004440
     b68:	42004000 	.word	0x42004000
     b6c:	00000aed 	.word	0x00000aed

00000b70 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b70:	0c01      	lsrs	r1, r0, #16
     b72:	0c13      	lsrs	r3, r2, #16
     b74:	b5f0      	push	{r4, r5, r6, r7, lr}
     b76:	b2cd      	uxtb	r5, r1
     b78:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b7a:	2301      	movs	r3, #1
     b7c:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b7e:	0e12      	lsrs	r2, r2, #24
     b80:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b82:	0e00      	lsrs	r0, r0, #24
     b84:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b86:	001a      	movs	r2, r3
     b88:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b8a:	0030      	movs	r0, r6
     b8c:	4e11      	ldr	r6, [pc, #68]	; (bd4 <byteOut+0x64>)
     b8e:	01c9      	lsls	r1, r1, #7
     b90:	b087      	sub	sp, #28
     b92:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b94:	4e10      	ldr	r6, [pc, #64]	; (bd8 <byteOut+0x68>)
     b96:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b98:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b9a:	19ae      	adds	r6, r5, r6
     b9c:	7824      	ldrb	r4, [r4, #0]
     b9e:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ba0:	4e0c      	ldr	r6, [pc, #48]	; (bd4 <byteOut+0x64>)
     ba2:	46b4      	mov	ip, r6
     ba4:	44ac      	add	ip, r5
     ba6:	4666      	mov	r6, ip
     ba8:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     baa:	b266      	sxtb	r6, r4
     bac:	2e00      	cmp	r6, #0
     bae:	da05      	bge.n	bbc <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bb0:	4e09      	ldr	r6, [pc, #36]	; (bd8 <byteOut+0x68>)
     bb2:	46b4      	mov	ip, r6
     bb4:	448c      	add	ip, r1
     bb6:	4666      	mov	r6, ip
     bb8:	6032      	str	r2, [r6, #0]
     bba:	e000      	b.n	bbe <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bbc:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bbe:	9e01      	ldr	r6, [sp, #4]
     bc0:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     bc2:	0064      	lsls	r4, r4, #1
     bc4:	b2db      	uxtb	r3, r3
     bc6:	6030      	str	r0, [r6, #0]
     bc8:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     bca:	2b00      	cmp	r3, #0
     bcc:	d1e8      	bne.n	ba0 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     bce:	b007      	add	sp, #28
     bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	41004414 	.word	0x41004414
     bd8:	41004418 	.word	0x41004418

00000bdc <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bde:	2501      	movs	r5, #1
     be0:	b085      	sub	sp, #20
     be2:	9103      	str	r1, [sp, #12]
     be4:	0011      	movs	r1, r2
     be6:	0c06      	lsrs	r6, r0, #16
     be8:	9301      	str	r3, [sp, #4]
     bea:	b2f3      	uxtb	r3, r6
     bec:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bee:	0e09      	lsrs	r1, r1, #24
     bf0:	0c14      	lsrs	r4, r2, #16
     bf2:	9002      	str	r0, [sp, #8]
     bf4:	9200      	str	r2, [sp, #0]
     bf6:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bf8:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bfa:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     bfc:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bfe:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c00:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c02:	4c0a      	ldr	r4, [pc, #40]	; (c2c <byteIn+0x50>)
     c04:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c06:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c08:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c0a:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0c:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c0e:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c10:	0040      	lsls	r0, r0, #1
     c12:	402c      	ands	r4, r5
     c14:	1e67      	subs	r7, r4, #1
     c16:	41bc      	sbcs	r4, r7
     c18:	3901      	subs	r1, #1
     c1a:	4304      	orrs	r4, r0
     c1c:	b2c9      	uxtb	r1, r1
     c1e:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c20:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     c22:	2900      	cmp	r1, #0
     c24:	d1f2      	bne.n	c0c <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     c26:	b005      	add	sp, #20
     c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	41004400 	.word	0x41004400

00000c30 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c32:	2380      	movs	r3, #128	; 0x80
     c34:	2780      	movs	r7, #128	; 0x80
     c36:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c38:	2500      	movs	r5, #0
     c3a:	4c0a      	ldr	r4, [pc, #40]	; (c64 <beep+0x34>)
     c3c:	035b      	lsls	r3, r3, #13
     c3e:	61e3      	str	r3, [r4, #28]
     c40:	03bf      	lsls	r7, r7, #14
     c42:	42b5      	cmp	r5, r6
     c44:	d006      	beq.n	c54 <beep+0x24>
     c46:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     c48:	207a      	movs	r0, #122	; 0x7a
     c4a:	4b07      	ldr	r3, [pc, #28]	; (c68 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c4c:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     c4e:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c50:	b2ad      	uxth	r5, r5
     c52:	e7f6      	b.n	c42 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c54:	2380      	movs	r3, #128	; 0x80
     c56:	039b      	lsls	r3, r3, #14
     c58:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	035b      	lsls	r3, r3, #13
     c5e:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	41004400 	.word	0x41004400
     c68:	00000de1 	.word	0x00000de1

00000c6c <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c6c:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c6e:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     c70:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c72:	4916      	ldr	r1, [pc, #88]	; (ccc <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c74:	4a16      	ldr	r2, [pc, #88]	; (cd0 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c76:	00db      	lsls	r3, r3, #3
     c78:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c7a:	6853      	ldr	r3, [r2, #4]
     c7c:	4303      	orrs	r3, r0
     c7e:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c80:	4b14      	ldr	r3, [pc, #80]	; (cd4 <GclkInit+0x68>)
     c82:	681a      	ldr	r2, [r3, #0]
     c84:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     c86:	2a3f      	cmp	r2, #63	; 0x3f
     c88:	d100      	bne.n	c8c <GclkInit+0x20>
        coarse = 0x1f;
     c8a:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c8c:	4b12      	ldr	r3, [pc, #72]	; (cd8 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c8e:	4813      	ldr	r0, [pc, #76]	; (cdc <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	059b      	lsls	r3, r3, #22
     c94:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c96:	4283      	cmp	r3, r0
     c98:	d100      	bne.n	c9c <GclkInit+0x30>
        fine = 0x1ff;
     c9a:	4b11      	ldr	r3, [pc, #68]	; (ce0 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c9c:	4811      	ldr	r0, [pc, #68]	; (ce4 <GclkInit+0x78>)
     c9e:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     ca0:	2010      	movs	r0, #16
     ca2:	68cc      	ldr	r4, [r1, #12]
     ca4:	4204      	tst	r4, r0
     ca6:	d0fc      	beq.n	ca2 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ca8:	0292      	lsls	r2, r2, #10
     caa:	4313      	orrs	r3, r2
     cac:	4a07      	ldr	r2, [pc, #28]	; (ccc <GclkInit+0x60>)
     cae:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cb0:	2310      	movs	r3, #16
     cb2:	68ca      	ldr	r2, [r1, #12]
     cb4:	421a      	tst	r2, r3
     cb6:	d0fc      	beq.n	cb2 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     cb8:	4a0b      	ldr	r2, [pc, #44]	; (ce8 <GclkInit+0x7c>)
     cba:	4b04      	ldr	r3, [pc, #16]	; (ccc <GclkInit+0x60>)
     cbc:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     cbe:	2280      	movs	r2, #128	; 0x80
     cc0:	4b0a      	ldr	r3, [pc, #40]	; (cec <GclkInit+0x80>)
     cc2:	0052      	lsls	r2, r2, #1
     cc4:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     cc6:	4a0a      	ldr	r2, [pc, #40]	; (cf0 <GclkInit+0x84>)
     cc8:	605a      	str	r2, [r3, #4]
}
     cca:	bd10      	pop	{r4, pc}
     ccc:	40000800 	.word	0x40000800
     cd0:	41004000 	.word	0x41004000
     cd4:	00806024 	.word	0x00806024
     cd8:	00806028 	.word	0x00806028
     cdc:	000003ff 	.word	0x000003ff
     ce0:	000001ff 	.word	0x000001ff
     ce4:	00000522 	.word	0x00000522
     ce8:	000005a2 	.word	0x000005a2
     cec:	40000c00 	.word	0x40000c00
     cf0:	00010700 	.word	0x00010700

00000cf4 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     cf4:	4a1d      	ldr	r2, [pc, #116]	; (d6c <RtcInit+0x78>)
     cf6:	4b1e      	ldr	r3, [pc, #120]	; (d70 <RtcInit+0x7c>)
     cf8:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     cfa:	2202      	movs	r2, #2
     cfc:	68d9      	ldr	r1, [r3, #12]
     cfe:	4211      	tst	r1, r2
     d00:	d0fc      	beq.n	cfc <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     d02:	2281      	movs	r2, #129	; 0x81
     d04:	4b1b      	ldr	r3, [pc, #108]	; (d74 <RtcInit+0x80>)
     d06:	0052      	lsls	r2, r2, #1
     d08:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     d0a:	4a1b      	ldr	r2, [pc, #108]	; (d78 <RtcInit+0x84>)
     d0c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     d0e:	785a      	ldrb	r2, [r3, #1]
     d10:	b252      	sxtb	r2, r2
     d12:	2a00      	cmp	r2, #0
     d14:	dbfb      	blt.n	d0e <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     d16:	4a19      	ldr	r2, [pc, #100]	; (d7c <RtcInit+0x88>)
     d18:	4b16      	ldr	r3, [pc, #88]	; (d74 <RtcInit+0x80>)
     d1a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     d1c:	2204      	movs	r2, #4
     d1e:	4b18      	ldr	r3, [pc, #96]	; (d80 <RtcInit+0x8c>)
     d20:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d22:	7a9a      	ldrb	r2, [r3, #10]
     d24:	4916      	ldr	r1, [pc, #88]	; (d80 <RtcInit+0x8c>)
     d26:	09d2      	lsrs	r2, r2, #7
     d28:	d1fb      	bne.n	d22 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     d2a:	20a0      	movs	r0, #160	; 0xa0
     d2c:	880a      	ldrh	r2, [r1, #0]
     d2e:	00c0      	lsls	r0, r0, #3
     d30:	4302      	orrs	r2, r0
     d32:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d34:	7a9a      	ldrb	r2, [r3, #10]
     d36:	09d2      	lsrs	r2, r2, #7
     d38:	d1fc      	bne.n	d34 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     d3a:	4912      	ldr	r1, [pc, #72]	; (d84 <RtcInit+0x90>)
     d3c:	4a10      	ldr	r2, [pc, #64]	; (d80 <RtcInit+0x8c>)
     d3e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d40:	7a99      	ldrb	r1, [r3, #10]
     d42:	4a0f      	ldr	r2, [pc, #60]	; (d80 <RtcInit+0x8c>)
     d44:	09c9      	lsrs	r1, r1, #7
     d46:	d1fb      	bne.n	d40 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d48:	8851      	ldrh	r1, [r2, #2]
     d4a:	480f      	ldr	r0, [pc, #60]	; (d88 <RtcInit+0x94>)
     d4c:	4301      	orrs	r1, r0
     d4e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d50:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d52:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d54:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d56:	8811      	ldrh	r1, [r2, #0]
     d58:	4301      	orrs	r1, r0
     d5a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d5c:	7a9a      	ldrb	r2, [r3, #10]
     d5e:	09d2      	lsrs	r2, r2, #7
     d60:	d1fc      	bne.n	d5c <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <RtcInit+0x98>)
     d64:	3208      	adds	r2, #8
     d66:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d68:	4770      	bx	lr
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	0000060e 	.word	0x0000060e
     d70:	40000800 	.word	0x40000800
     d74:	40000c00 	.word	0x40000c00
     d78:	00230002 	.word	0x00230002
     d7c:	00004204 	.word	0x00004204
     d80:	40001400 	.word	0x40001400
     d84:	000003e6 	.word	0x000003e6
     d88:	00004010 	.word	0x00004010
     d8c:	e000e100 	.word	0xe000e100

00000d90 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d90:	230f      	movs	r3, #15
     d92:	4018      	ands	r0, r3
     d94:	4b08      	ldr	r3, [pc, #32]	; (db8 <gclkEnable+0x28>)
     d96:	0212      	lsls	r2, r2, #8
     d98:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d9a:	23f8      	movs	r3, #248	; 0xf8
     d9c:	0209      	lsls	r1, r1, #8
     d9e:	015b      	lsls	r3, r3, #5
     da0:	4019      	ands	r1, r3
     da2:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     da4:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     da6:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     da8:	4c04      	ldr	r4, [pc, #16]	; (dbc <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     daa:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     dac:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dae:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     db0:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     db2:	6060      	str	r0, [r4, #4]
}
     db4:	bd10      	pop	{r4, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	00ffff00 	.word	0x00ffff00
     dbc:	40000c00 	.word	0x40000c00

00000dc0 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     dc0:	4b04      	ldr	r3, [pc, #16]	; (dd4 <delayInit+0x14>)
     dc2:	4a05      	ldr	r2, [pc, #20]	; (dd8 <delayInit+0x18>)
     dc4:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     dc6:	2230      	movs	r2, #48	; 0x30
     dc8:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     dca:	4b04      	ldr	r3, [pc, #16]	; (ddc <delayInit+0x1c>)
     dcc:	3a2b      	subs	r2, #43	; 0x2b
     dce:	601a      	str	r2, [r3, #0]
}
     dd0:	4770      	bx	lr
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20000004 	.word	0x20000004
     dd8:	0000bb80 	.word	0x0000bb80
     ddc:	e000e010 	.word	0xe000e010

00000de0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     de0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     de2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     de4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     de6:	4b08      	ldr	r3, [pc, #32]	; (e08 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     de8:	4a08      	ldr	r2, [pc, #32]	; (e0c <delay_us+0x2c>)
     dea:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dec:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     dee:	3801      	subs	r0, #1
     df0:	d308      	bcc.n	e04 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     df2:	2b00      	cmp	r3, #0
     df4:	d0fb      	beq.n	dee <delay_us+0xe>
     df6:	4e05      	ldr	r6, [pc, #20]	; (e0c <delay_us+0x2c>)
        SysTick->LOAD = n;
     df8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     dfa:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dfc:	6835      	ldr	r5, [r6, #0]
     dfe:	4225      	tst	r5, r4
     e00:	d0fc      	beq.n	dfc <delay_us+0x1c>
     e02:	e7f4      	b.n	dee <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	20000004 	.word	0x20000004
     e0c:	e000e010 	.word	0xe000e010

00000e10 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     e10:	b570      	push	{r4, r5, r6, lr}
     e12:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     e14:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     e16:	4b08      	ldr	r3, [pc, #32]	; (e38 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     e18:	4a08      	ldr	r2, [pc, #32]	; (e3c <delay_ms+0x2c>)
     e1a:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e1c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     e1e:	3801      	subs	r0, #1
     e20:	d308      	bcc.n	e34 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     e22:	2b00      	cmp	r3, #0
     e24:	d0fb      	beq.n	e1e <delay_ms+0xe>
     e26:	4e05      	ldr	r6, [pc, #20]	; (e3c <delay_ms+0x2c>)
        SysTick->LOAD = n;
     e28:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     e2a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e2c:	6835      	ldr	r5, [r6, #0]
     e2e:	4225      	tst	r5, r4
     e30:	d0fc      	beq.n	e2c <delay_ms+0x1c>
     e32:	e7f4      	b.n	e1e <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     e34:	bd70      	pop	{r4, r5, r6, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	20000004 	.word	0x20000004
     e3c:	e000e010 	.word	0xe000e010

00000e40 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e40:	21fa      	movs	r1, #250	; 0xfa
     e42:	4a04      	ldr	r2, [pc, #16]	; (e54 <RTC_Handler+0x14>)
     e44:	0089      	lsls	r1, r1, #2
     e46:	6813      	ldr	r3, [r2, #0]
     e48:	185b      	adds	r3, r3, r1
     e4a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e4c:	22ff      	movs	r2, #255	; 0xff
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <RTC_Handler+0x18>)
     e50:	721a      	strb	r2, [r3, #8]
}
     e52:	4770      	bx	lr
     e54:	2000045c 	.word	0x2000045c
     e58:	40001400 	.word	0x40001400

00000e5c <millis>:

uint32_t millis(void) {
     e5c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e5e:	f3ef 8110 	mrs	r1, PRIMASK
     e62:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e64:	4a08      	ldr	r2, [pc, #32]	; (e88 <millis+0x2c>)
     e66:	4d09      	ldr	r5, [pc, #36]	; (e8c <millis+0x30>)
     e68:	8a10      	ldrh	r0, [r2, #16]
     e6a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e6c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e6e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e70:	09e4      	lsrs	r4, r4, #7
     e72:	d004      	beq.n	e7e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e74:	8a13      	ldrh	r3, [r2, #16]
     e76:	22fa      	movs	r2, #250	; 0xfa
     e78:	6828      	ldr	r0, [r5, #0]
     e7a:	0092      	lsls	r2, r2, #2
     e7c:	1880      	adds	r0, r0, r2
     e7e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     e80:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e84:	bd30      	pop	{r4, r5, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	40001400 	.word	0x40001400
     e8c:	2000045c 	.word	0x2000045c

00000e90 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e90:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e92:	4a0d      	ldr	r2, [pc, #52]	; (ec8 <TC4Init+0x38>)
     e94:	4b0d      	ldr	r3, [pc, #52]	; (ecc <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e96:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e98:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e9a:	4a0d      	ldr	r2, [pc, #52]	; (ed0 <TC4Init+0x40>)
     e9c:	6a13      	ldr	r3, [r2, #32]
     e9e:	430b      	orrs	r3, r1
     ea0:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ea2:	4b0c      	ldr	r3, [pc, #48]	; (ed4 <TC4Init+0x44>)
     ea4:	4a0c      	ldr	r2, [pc, #48]	; (ed8 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ea6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ea8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     eaa:	2241      	movs	r2, #65	; 0x41
     eac:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     eae:	3a40      	subs	r2, #64	; 0x40
     eb0:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     eb2:	32ff      	adds	r2, #255	; 0xff
     eb4:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     eb6:	881a      	ldrh	r2, [r3, #0]
     eb8:	430a      	orrs	r2, r1
     eba:	801a      	strh	r2, [r3, #0]
     ebc:	2280      	movs	r2, #128	; 0x80
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <TC4Init+0x4c>)
     ec0:	0312      	lsls	r2, r2, #12
     ec2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     ec4:	4770      	bx	lr
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	0000421c 	.word	0x0000421c
     ecc:	40000c00 	.word	0x40000c00
     ed0:	40000400 	.word	0x40000400
     ed4:	42003000 	.word	0x42003000
     ed8:	00000904 	.word	0x00000904
     edc:	e000e100 	.word	0xe000e100

00000ee0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     ee0:	22ff      	movs	r2, #255	; 0xff
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <TC4_Handler+0x10>)
     ee4:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     ee6:	4b03      	ldr	r3, [pc, #12]	; (ef4 <TC4_Handler+0x14>)
     ee8:	3afe      	subs	r2, #254	; 0xfe
     eea:	701a      	strb	r2, [r3, #0]
}
     eec:	4770      	bx	lr
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	42003000 	.word	0x42003000
     ef4:	20000463 	.word	0x20000463

00000ef8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     ef8:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     efa:	4a0d      	ldr	r2, [pc, #52]	; (f30 <TC5Init+0x38>)
     efc:	4b0d      	ldr	r3, [pc, #52]	; (f34 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     efe:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f00:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f02:	4a0d      	ldr	r2, [pc, #52]	; (f38 <TC5Init+0x40>)
     f04:	6a13      	ldr	r3, [r2, #32]
     f06:	430b      	orrs	r3, r1
     f08:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f0a:	4b0c      	ldr	r3, [pc, #48]	; (f3c <TC5Init+0x44>)
     f0c:	4a0c      	ldr	r2, [pc, #48]	; (f40 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f0e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f10:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
     f12:	2220      	movs	r2, #32
     f14:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f16:	3a1f      	subs	r2, #31
     f18:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f1a:	32ff      	adds	r2, #255	; 0xff
     f1c:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f1e:	881a      	ldrh	r2, [r3, #0]
     f20:	430a      	orrs	r2, r1
     f22:	801a      	strh	r2, [r3, #0]
     f24:	2280      	movs	r2, #128	; 0x80
     f26:	4b07      	ldr	r3, [pc, #28]	; (f44 <TC5Init+0x4c>)
     f28:	0352      	lsls	r2, r2, #13
     f2a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     f2c:	4770      	bx	lr
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	0000421c 	.word	0x0000421c
     f34:	40000c00 	.word	0x40000c00
     f38:	40000400 	.word	0x40000400
     f3c:	42003400 	.word	0x42003400
     f40:	00000d04 	.word	0x00000d04
     f44:	e000e100 	.word	0xe000e100

00000f48 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f48:	22ff      	movs	r2, #255	; 0xff
     f4a:	4b03      	ldr	r3, [pc, #12]	; (f58 <TC5_Handler+0x10>)
     f4c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     f4e:	4b03      	ldr	r3, [pc, #12]	; (f5c <TC5_Handler+0x14>)
     f50:	3afe      	subs	r2, #254	; 0xfe
     f52:	701a      	strb	r2, [r3, #0]
     f54:	4770      	bx	lr
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	42003400 	.word	0x42003400
     f5c:	20000461 	.word	0x20000461

00000f60 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f62:	27c0      	movs	r7, #192	; 0xc0
     f64:	4d10      	ldr	r5, [pc, #64]	; (fa8 <dmaInit+0x48>)
     f66:	003a      	movs	r2, r7
     f68:	4e10      	ldr	r6, [pc, #64]	; (fac <dmaInit+0x4c>)
     f6a:	0028      	movs	r0, r5
     f6c:	2100      	movs	r1, #0
     f6e:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f70:	4c0f      	ldr	r4, [pc, #60]	; (fb0 <dmaInit+0x50>)
     f72:	003a      	movs	r2, r7
     f74:	2100      	movs	r1, #0
     f76:	0020      	movs	r0, r4
     f78:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f7a:	2120      	movs	r1, #32
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <dmaInit+0x54>)
     f7e:	695a      	ldr	r2, [r3, #20]
     f80:	430a      	orrs	r2, r1
     f82:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f84:	69da      	ldr	r2, [r3, #28]
     f86:	3910      	subs	r1, #16
     f88:	430a      	orrs	r2, r1
     f8a:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     f8c:	4b0a      	ldr	r3, [pc, #40]	; (fb8 <dmaInit+0x58>)
     f8e:	390e      	subs	r1, #14
     f90:	881a      	ldrh	r2, [r3, #0]
     f92:	438a      	bics	r2, r1
     f94:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     f96:	881a      	ldrh	r2, [r3, #0]
     f98:	3901      	subs	r1, #1
     f9a:	430a      	orrs	r2, r1
     f9c:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f9e:	4a07      	ldr	r2, [pc, #28]	; (fbc <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     fa0:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     fa2:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     fa4:	801a      	strh	r2, [r3, #0]
}
     fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fa8:	20000530 	.word	0x20000530
     fac:	00003011 	.word	0x00003011
     fb0:	20000470 	.word	0x20000470
     fb4:	40000400 	.word	0x40000400
     fb8:	41004800 	.word	0x41004800
     fbc:	00000f02 	.word	0x00000f02

00000fc0 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
     fc2:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     fc4:	b085      	sub	sp, #20
     fc6:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
     fc8:	2b00      	cmp	r3, #0
     fca:	d178      	bne.n	10be <flight+0xfe>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     fcc:	4d3d      	ldr	r5, [pc, #244]	; (10c4 <flight+0x104>)
     fce:	6c40      	ldr	r0, [r0, #68]	; 0x44
     fd0:	47a8      	blx	r5
     fd2:	2200      	movs	r2, #0
     fd4:	4b3c      	ldr	r3, [pc, #240]	; (10c8 <flight+0x108>)
     fd6:	4e3d      	ldr	r6, [pc, #244]	; (10cc <flight+0x10c>)
     fd8:	47b0      	blx	r6
     fda:	0006      	movs	r6, r0
     fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
     fde:	000f      	movs	r7, r1
     fe0:	47a8      	blx	r5
     fe2:	4d3a      	ldr	r5, [pc, #232]	; (10cc <flight+0x10c>)
     fe4:	2200      	movs	r2, #0
     fe6:	4b38      	ldr	r3, [pc, #224]	; (10c8 <flight+0x108>)
     fe8:	47a8      	blx	r5
     fea:	4d39      	ldr	r5, [pc, #228]	; (10d0 <flight+0x110>)
     fec:	0002      	movs	r2, r0
     fee:	000b      	movs	r3, r1
     ff0:	0030      	movs	r0, r6
     ff2:	0039      	movs	r1, r7
     ff4:	47a8      	blx	r5
     ff6:	4b37      	ldr	r3, [pc, #220]	; (10d4 <flight+0x114>)
     ff8:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
     ffa:	0023      	movs	r3, r4
     ffc:	3348      	adds	r3, #72	; 0x48
     ffe:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1000:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1002:	8818      	ldrh	r0, [r3, #0]
    1004:	4d34      	ldr	r5, [pc, #208]	; (10d8 <flight+0x118>)
    1006:	47a8      	blx	r5
    1008:	2200      	movs	r2, #0
    100a:	4e30      	ldr	r6, [pc, #192]	; (10cc <flight+0x10c>)
    100c:	4b2e      	ldr	r3, [pc, #184]	; (10c8 <flight+0x108>)
    100e:	47b0      	blx	r6
    1010:	0023      	movs	r3, r4
    1012:	3370      	adds	r3, #112	; 0x70
    1014:	0006      	movs	r6, r0
    1016:	8818      	ldrh	r0, [r3, #0]
    1018:	000f      	movs	r7, r1
    101a:	47a8      	blx	r5
    101c:	4d2b      	ldr	r5, [pc, #172]	; (10cc <flight+0x10c>)
    101e:	2200      	movs	r2, #0
    1020:	4b29      	ldr	r3, [pc, #164]	; (10c8 <flight+0x108>)
    1022:	47a8      	blx	r5
    1024:	4d2a      	ldr	r5, [pc, #168]	; (10d0 <flight+0x110>)
    1026:	0002      	movs	r2, r0
    1028:	000b      	movs	r3, r1
    102a:	0030      	movs	r0, r6
    102c:	0039      	movs	r1, r7
    102e:	47a8      	blx	r5
    1030:	4b2a      	ldr	r3, [pc, #168]	; (10dc <flight+0x11c>)
    1032:	4798      	blx	r3
    1034:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    1036:	4d2a      	ldr	r5, [pc, #168]	; (10e0 <flight+0x120>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1038:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    103a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    103c:	47a8      	blx	r5
    103e:	4e23      	ldr	r6, [pc, #140]	; (10cc <flight+0x10c>)
    1040:	2200      	movs	r2, #0
    1042:	4b21      	ldr	r3, [pc, #132]	; (10c8 <flight+0x108>)
    1044:	47b0      	blx	r6
    1046:	9002      	str	r0, [sp, #8]
    1048:	9103      	str	r1, [sp, #12]
    104a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    104c:	47a8      	blx	r5
    104e:	2200      	movs	r2, #0
    1050:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <flight+0x108>)
    1052:	47b0      	blx	r6
    1054:	4e1e      	ldr	r6, [pc, #120]	; (10d0 <flight+0x110>)
    1056:	0002      	movs	r2, r0
    1058:	000b      	movs	r3, r1
    105a:	9802      	ldr	r0, [sp, #8]
    105c:	9903      	ldr	r1, [sp, #12]
    105e:	47b0      	blx	r6
    1060:	4b1e      	ldr	r3, [pc, #120]	; (10dc <flight+0x11c>)
    1062:	4798      	blx	r3
    1064:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1066:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1068:	47a8      	blx	r5
    106a:	2200      	movs	r2, #0
    106c:	4b16      	ldr	r3, [pc, #88]	; (10c8 <flight+0x108>)
    106e:	4e17      	ldr	r6, [pc, #92]	; (10cc <flight+0x10c>)
    1070:	47b0      	blx	r6
    1072:	0006      	movs	r6, r0
    1074:	69a0      	ldr	r0, [r4, #24]
    1076:	000f      	movs	r7, r1
    1078:	47a8      	blx	r5
    107a:	4d14      	ldr	r5, [pc, #80]	; (10cc <flight+0x10c>)
    107c:	2200      	movs	r2, #0
    107e:	4b12      	ldr	r3, [pc, #72]	; (10c8 <flight+0x108>)
    1080:	47a8      	blx	r5
    1082:	4d13      	ldr	r5, [pc, #76]	; (10d0 <flight+0x110>)
    1084:	0002      	movs	r2, r0
    1086:	000b      	movs	r3, r1
    1088:	0030      	movs	r0, r6
    108a:	0039      	movs	r1, r7
    108c:	47a8      	blx	r5
    108e:	4b13      	ldr	r3, [pc, #76]	; (10dc <flight+0x11c>)
    1090:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1092:	4d14      	ldr	r5, [pc, #80]	; (10e4 <flight+0x124>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1094:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1096:	47a8      	blx	r5
    1098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    109a:	1ac0      	subs	r0, r0, r3
    109c:	23fa      	movs	r3, #250	; 0xfa
    109e:	00db      	lsls	r3, r3, #3
    10a0:	4298      	cmp	r0, r3
    10a2:	d90c      	bls.n	10be <flight+0xfe>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    10a6:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10a8:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    10aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    10ac:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    10ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
    10b0:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    10b2:	0023      	movs	r3, r4
    10b4:	8812      	ldrh	r2, [r2, #0]
    10b6:	334a      	adds	r3, #74	; 0x4a
    10b8:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    10ba:	47a8      	blx	r5
    10bc:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


    10be:	b005      	add	sp, #20
    10c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00002dcd 	.word	0x00002dcd
    10c8:	3fe00000 	.word	0x3fe00000
    10cc:	000020d1 	.word	0x000020d1
    10d0:	0000185d 	.word	0x0000185d
    10d4:	00002e75 	.word	0x00002e75
    10d8:	00002cd9 	.word	0x00002cd9
    10dc:	00001821 	.word	0x00001821
    10e0:	00002d5d 	.word	0x00002d5d
    10e4:	00000e5d 	.word	0x00000e5d

000010e8 <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    10e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    10ea:	26c8      	movs	r6, #200	; 0xc8
    10ec:	0076      	lsls	r6, r6, #1
    10ee:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    10f0:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    10f2:	194b      	adds	r3, r1, r5
    10f4:	2bfe      	cmp	r3, #254	; 0xfe
    10f6:	dc03      	bgt.n	1100 <makePage+0x18>
    10f8:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    10fa:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    10fc:	1947      	adds	r7, r0, r5
    10fe:	e035      	b.n	116c <makePage+0x84>
    1100:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1102:	195c      	adds	r4, r3, r5
    1104:	b2de      	uxtb	r6, r3
    1106:	2cfe      	cmp	r4, #254	; 0xfe
    1108:	dc08      	bgt.n	111c <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    110a:	9a00      	ldr	r2, [sp, #0]
    110c:	1904      	adds	r4, r0, r4
    110e:	5cd6      	ldrb	r6, [r2, r3]
    1110:	3492      	adds	r4, #146	; 0x92
    1112:	34ff      	adds	r4, #255	; 0xff

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1114:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1116:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1118:	b29b      	uxth	r3, r3
    111a:	e7f2      	b.n	1102 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    111c:	23c8      	movs	r3, #200	; 0xc8
    111e:	2500      	movs	r5, #0
    1120:	0004      	movs	r4, r0
    1122:	005b      	lsls	r3, r3, #1
    1124:	54c5      	strb	r5, [r0, r3]
    1126:	4b19      	ldr	r3, [pc, #100]	; (118c <makePage+0xa4>)
    1128:	3492      	adds	r4, #146	; 0x92
    112a:	18c3      	adds	r3, r0, r3
    112c:	34ff      	adds	r4, #255	; 0xff
    112e:	9301      	str	r3, [sp, #4]
    1130:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1132:	781f      	ldrb	r7, [r3, #0]
    1134:	46bc      	mov	ip, r7
    1136:	4662      	mov	r2, ip
    1138:	1e9f      	subs	r7, r3, #2
    113a:	3fff      	subs	r7, #255	; 0xff
    113c:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    113e:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1140:	701d      	strb	r5, [r3, #0]
    1142:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1144:	4293      	cmp	r3, r2
    1146:	d1f4      	bne.n	1132 <makePage+0x4a>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1148:	25c8      	movs	r5, #200	; 0xc8
    114a:	0033      	movs	r3, r6
    114c:	006d      	lsls	r5, r5, #1
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    114e:	428b      	cmp	r3, r1
    1150:	d208      	bcs.n	1164 <makePage+0x7c>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1152:	9a00      	ldr	r2, [sp, #0]
    1154:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1156:	3301      	adds	r3, #1
    1158:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    115a:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    115c:	1b9f      	subs	r7, r3, r6
    115e:	5547      	strb	r7, [r0, r5]
    1160:	3401      	adds	r4, #1
    1162:	e7f4      	b.n	114e <makePage+0x66>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1164:	2201      	movs	r2, #1
    1166:	4b09      	ldr	r3, [pc, #36]	; (118c <makePage+0xa4>)
    1168:	54c2      	strb	r2, [r0, r3]
    116a:	e00d      	b.n	1188 <makePage+0xa0>
    116c:	1c5c      	adds	r4, r3, #1
    116e:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1170:	428b      	cmp	r3, r1
    1172:	d809      	bhi.n	1188 <makePage+0xa0>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1174:	9a00      	ldr	r2, [sp, #0]
    1176:	5cd2      	ldrb	r2, [r2, r3]
    1178:	18fb      	adds	r3, r7, r3
    117a:	3392      	adds	r3, #146	; 0x92
    117c:	33ff      	adds	r3, #255	; 0xff
    117e:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1180:	192b      	adds	r3, r5, r4
    1182:	5583      	strb	r3, [r0, r6]
    1184:	0023      	movs	r3, r4
    1186:	e7f1      	b.n	116c <makePage+0x84>
        }

    }
}
    1188:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000291 	.word	0x00000291

00001190 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1190:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1192:	2346      	movs	r3, #70	; 0x46
    1194:	466a      	mov	r2, sp
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1196:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1198:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    119a:	7843      	ldrb	r3, [r0, #1]
    119c:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    119e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    11a0:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    11a2:	0a1a      	lsrs	r2, r3, #8
    11a4:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    11a6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    11a8:	0e1b      	lsrs	r3, r3, #24
    11aa:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    11ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    11ae:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    11b0:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    11b2:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    11b4:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    11b6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    11b8:	0e1b      	lsrs	r3, r3, #24
    11ba:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    11bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    11be:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    11c0:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    11c2:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    11c4:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    11c6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    11c8:	0e1b      	lsrs	r3, r3, #24
    11ca:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    11cc:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    11ce:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    11d0:	334a      	adds	r3, #74	; 0x4a
    11d2:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    11d4:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    11d6:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    11d8:	0a1b      	lsrs	r3, r3, #8
    11da:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    11dc:	2110      	movs	r1, #16
    11de:	4b02      	ldr	r3, [pc, #8]	; (11e8 <logFlight+0x58>)
    11e0:	4798      	blx	r3
}
    11e2:	b005      	add	sp, #20
    11e4:	bd00      	pop	{pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	000010e9 	.word	0x000010e9

000011ec <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    11ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    11ee:	2341      	movs	r3, #65	; 0x41
    11f0:	466a      	mov	r2, sp
    11f2:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11f4:	23a8      	movs	r3, #168	; 0xa8
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11f6:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11f8:	009b      	lsls	r3, r3, #2
    11fa:	58c3      	ldr	r3, [r0, r3]
    11fc:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11fe:	0a1a      	lsrs	r2, r3, #8
    1200:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1202:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1204:	0e1b      	lsrs	r3, r3, #24
    1206:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1208:	6a43      	ldr	r3, [r0, #36]	; 0x24
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    120a:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    120c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    120e:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1210:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1212:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1214:	0e1b      	lsrs	r3, r3, #24
    1216:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1218:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    121a:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    121c:	3368      	adds	r3, #104	; 0x68
    121e:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1220:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1222:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1224:	0a1b      	lsrs	r3, r3, #8
    1226:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1228:	0003      	movs	r3, r0
    122a:	336c      	adds	r3, #108	; 0x6c
    122c:	881b      	ldrh	r3, [r3, #0]
    122e:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1230:	0a1b      	lsrs	r3, r3, #8
    1232:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1234:	0003      	movs	r3, r0
    1236:	3370      	adds	r3, #112	; 0x70
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    123c:	0a1b      	lsrs	r3, r3, #8
    123e:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1240:	0003      	movs	r3, r0
    1242:	3374      	adds	r3, #116	; 0x74
    1244:	881b      	ldrh	r3, [r3, #0]
    1246:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1248:	0a1b      	lsrs	r3, r3, #8
    124a:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    124c:	0003      	movs	r3, r0
    124e:	3378      	adds	r3, #120	; 0x78
    1250:	881b      	ldrh	r3, [r3, #0]
    1252:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1254:	0a1b      	lsrs	r3, r3, #8
    1256:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1258:	0003      	movs	r3, r0
    125a:	337c      	adds	r3, #124	; 0x7c
    125c:	881b      	ldrh	r3, [r3, #0]
    125e:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    1260:	0a1b      	lsrs	r3, r3, #8
    1262:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1264:	0003      	movs	r3, r0
    1266:	3380      	adds	r3, #128	; 0x80
    1268:	881b      	ldrh	r3, [r3, #0]
    126a:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    126c:	0a1b      	lsrs	r3, r3, #8
    126e:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1270:	2117      	movs	r1, #23
    1272:	4b02      	ldr	r3, [pc, #8]	; (127c <logSensors+0x90>)
    1274:	4798      	blx	r3
}
    1276:	b007      	add	sp, #28
    1278:	bd00      	pop	{pc}
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	000010e9 	.word	0x000010e9

00001280 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    1282:	4bd2      	ldr	r3, [pc, #840]	; (15cc <sampleTick+0x34c>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1284:	b087      	sub	sp, #28
    1286:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    1288:	4798      	blx	r3
    128a:	23a8      	movs	r3, #168	; 0xa8

    my_altimeter->batV = adc_read(senseBatPin);
    128c:	4dd0      	ldr	r5, [pc, #832]	; (15d0 <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    128e:	009b      	lsls	r3, r3, #2
    1290:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    1292:	786b      	ldrb	r3, [r5, #1]
    1294:	7829      	ldrb	r1, [r5, #0]
    1296:	78a8      	ldrb	r0, [r5, #2]
    1298:	021b      	lsls	r3, r3, #8
    129a:	430b      	orrs	r3, r1
    129c:	0400      	lsls	r0, r0, #16
    129e:	001a      	movs	r2, r3
    12a0:	0003      	movs	r3, r0
    12a2:	78e8      	ldrb	r0, [r5, #3]
    12a4:	4313      	orrs	r3, r2
    12a6:	0600      	lsls	r0, r0, #24
    12a8:	4eca      	ldr	r6, [pc, #808]	; (15d4 <sampleTick+0x354>)
    12aa:	7929      	ldrb	r1, [r5, #4]
    12ac:	4318      	orrs	r0, r3
    12ae:	47b0      	blx	r6
    12b0:	23a5      	movs	r3, #165	; 0xa5
    12b2:	009b      	lsls	r3, r3, #2
    12b4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    12b6:	79ab      	ldrb	r3, [r5, #6]
    12b8:	7969      	ldrb	r1, [r5, #5]
    12ba:	79e8      	ldrb	r0, [r5, #7]
    12bc:	021b      	lsls	r3, r3, #8
    12be:	430b      	orrs	r3, r1
    12c0:	0400      	lsls	r0, r0, #16
    12c2:	001a      	movs	r2, r3
    12c4:	0003      	movs	r3, r0
    12c6:	7a28      	ldrb	r0, [r5, #8]
    12c8:	4313      	orrs	r3, r2
    12ca:	0600      	lsls	r0, r0, #24
    12cc:	7a69      	ldrb	r1, [r5, #9]
    12ce:	4318      	orrs	r0, r3
    12d0:	47b0      	blx	r6
    12d2:	4bc1      	ldr	r3, [pc, #772]	; (15d8 <sampleTick+0x358>)
    my_altimeter->senseB = adc_read(senseBPin);
    12d4:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    12d6:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    12d8:	7aeb      	ldrb	r3, [r5, #11]
    12da:	7b28      	ldrb	r0, [r5, #12]
    12dc:	021b      	lsls	r3, r3, #8
    12de:	430b      	orrs	r3, r1
    12e0:	0400      	lsls	r0, r0, #16
    12e2:	001a      	movs	r2, r3
    12e4:	0003      	movs	r3, r0
    12e6:	7b68      	ldrb	r0, [r5, #13]
    12e8:	4313      	orrs	r3, r2
    12ea:	0600      	lsls	r0, r0, #24
    12ec:	7ba9      	ldrb	r1, [r5, #14]
    12ee:	4318      	orrs	r0, r3
    12f0:	47b0      	blx	r6
    12f2:	23a6      	movs	r3, #166	; 0xa6
    12f4:	009b      	lsls	r3, r3, #2
    12f6:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    12f8:	7c2b      	ldrb	r3, [r5, #16]
    12fa:	7be9      	ldrb	r1, [r5, #15]
    12fc:	7c68      	ldrb	r0, [r5, #17]
    12fe:	021b      	lsls	r3, r3, #8
    1300:	430b      	orrs	r3, r1
    1302:	0400      	lsls	r0, r0, #16
    1304:	001a      	movs	r2, r3
    1306:	0003      	movs	r3, r0
    1308:	7ca8      	ldrb	r0, [r5, #18]
    130a:	4313      	orrs	r3, r2
    130c:	0600      	lsls	r0, r0, #24
    130e:	7ce9      	ldrb	r1, [r5, #19]
    1310:	4318      	orrs	r0, r3
    1312:	47b0      	blx	r6
    1314:	4bb1      	ldr	r3, [pc, #708]	; (15dc <sampleTick+0x35c>)
    my_altimeter->senseD = adc_read(senseDPin);
    1316:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    1318:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    131a:	7d6b      	ldrb	r3, [r5, #21]
    131c:	7da8      	ldrb	r0, [r5, #22]
    131e:	021b      	lsls	r3, r3, #8
    1320:	430b      	orrs	r3, r1
    1322:	0400      	lsls	r0, r0, #16
    1324:	001a      	movs	r2, r3
    1326:	0003      	movs	r3, r0
    1328:	7de8      	ldrb	r0, [r5, #23]
    132a:	4313      	orrs	r3, r2
    132c:	0600      	lsls	r0, r0, #24
    132e:	7e29      	ldrb	r1, [r5, #24]
    1330:	4318      	orrs	r0, r3
    1332:	47b0      	blx	r6
    1334:	23a7      	movs	r3, #167	; 0xa7
    1336:	009b      	lsls	r3, r3, #2
    1338:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    133a:	7eab      	ldrb	r3, [r5, #26]
    133c:	7e69      	ldrb	r1, [r5, #25]
    133e:	7ee8      	ldrb	r0, [r5, #27]
    1340:	021b      	lsls	r3, r3, #8
    1342:	430b      	orrs	r3, r1
    1344:	0400      	lsls	r0, r0, #16
    1346:	001a      	movs	r2, r3
    1348:	0003      	movs	r3, r0
    134a:	7f28      	ldrb	r0, [r5, #28]
    134c:	4313      	orrs	r3, r2
    134e:	0600      	lsls	r0, r0, #24
    1350:	7f69      	ldrb	r1, [r5, #29]
    1352:	4318      	orrs	r0, r3
    1354:	47b0      	blx	r6
    1356:	0023      	movs	r3, r4
    1358:	3380      	adds	r3, #128	; 0x80
    135a:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    135c:	4ba0      	ldr	r3, [pc, #640]	; (15e0 <sampleTick+0x360>)
    135e:	0026      	movs	r6, r4
    1360:	18c0      	adds	r0, r0, r3
    1362:	4ba0      	ldr	r3, [pc, #640]	; (15e4 <sampleTick+0x364>)
    1364:	4798      	blx	r3
    1366:	4aa0      	ldr	r2, [pc, #640]	; (15e8 <sampleTick+0x368>)
    1368:	4fa0      	ldr	r7, [pc, #640]	; (15ec <sampleTick+0x36c>)
    136a:	4ba1      	ldr	r3, [pc, #644]	; (15f0 <sampleTick+0x370>)
    136c:	47b8      	blx	r7
    136e:	4ba1      	ldr	r3, [pc, #644]	; (15f4 <sampleTick+0x374>)
    1370:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1372:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1374:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1378:	3608      	adds	r6, #8
    137a:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    137c:	6523      	str	r3, [r4, #80]	; 0x50
    137e:	4b9e      	ldr	r3, [pc, #632]	; (15f8 <sampleTick+0x378>)
    1380:	023f      	lsls	r7, r7, #8
    1382:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1384:	002e      	movs	r6, r5
    1386:	9200      	str	r2, [sp, #0]
    1388:	7fea      	ldrb	r2, [r5, #31]
    138a:	7fa8      	ldrb	r0, [r5, #30]
    138c:	0212      	lsls	r2, r2, #8
    138e:	4302      	orrs	r2, r0
    1390:	0011      	movs	r1, r2
    1392:	002b      	movs	r3, r5
    1394:	361e      	adds	r6, #30
    1396:	78b2      	ldrb	r2, [r6, #2]
    1398:	3323      	adds	r3, #35	; 0x23
    139a:	0412      	lsls	r2, r2, #16
    139c:	430a      	orrs	r2, r1
    139e:	78f1      	ldrb	r1, [r6, #3]
    13a0:	7818      	ldrb	r0, [r3, #0]
    13a2:	0609      	lsls	r1, r1, #24
    13a4:	4311      	orrs	r1, r2
    13a6:	7932      	ldrb	r2, [r6, #4]
    13a8:	789d      	ldrb	r5, [r3, #2]
    13aa:	9204      	str	r2, [sp, #16]
    13ac:	785a      	ldrb	r2, [r3, #1]
    13ae:	042d      	lsls	r5, r5, #16
    13b0:	0212      	lsls	r2, r2, #8
    13b2:	4302      	orrs	r2, r0
    13b4:	9103      	str	r1, [sp, #12]
    13b6:	0011      	movs	r1, r2
    13b8:	002a      	movs	r2, r5
    13ba:	78dd      	ldrb	r5, [r3, #3]
    13bc:	791b      	ldrb	r3, [r3, #4]
    13be:	430a      	orrs	r2, r1
    13c0:	062d      	lsls	r5, r5, #24
    13c2:	4315      	orrs	r5, r2
    13c4:	9305      	str	r3, [sp, #20]
    13c6:	9a03      	ldr	r2, [sp, #12]
    13c8:	9905      	ldr	r1, [sp, #20]
    13ca:	9b04      	ldr	r3, [sp, #16]
    13cc:	0028      	movs	r0, r5
    13ce:	4e8b      	ldr	r6, [pc, #556]	; (15fc <sampleTick+0x37c>)
    13d0:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    13d2:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13d4:	4b88      	ldr	r3, [pc, #544]	; (15f8 <sampleTick+0x378>)
    13d6:	0040      	lsls	r0, r0, #1
    13d8:	619f      	str	r7, [r3, #24]
    13da:	4b89      	ldr	r3, [pc, #548]	; (1600 <sampleTick+0x380>)
    13dc:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    13de:	4b89      	ldr	r3, [pc, #548]	; (1604 <sampleTick+0x384>)
    13e0:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13e2:	4b85      	ldr	r3, [pc, #532]	; (15f8 <sampleTick+0x378>)
    13e4:	6160      	str	r0, [r4, #20]
    13e6:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    13e8:	2342      	movs	r3, #66	; 0x42
    13ea:	9a03      	ldr	r2, [sp, #12]
    13ec:	9300      	str	r3, [sp, #0]
    13ee:	0028      	movs	r0, r5
    13f0:	9b04      	ldr	r3, [sp, #16]
    13f2:	9905      	ldr	r1, [sp, #20]
    13f4:	47b0      	blx	r6
    13f6:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13f8:	4b7f      	ldr	r3, [pc, #508]	; (15f8 <sampleTick+0x378>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13fa:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13fc:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13fe:	4b82      	ldr	r3, [pc, #520]	; (1608 <sampleTick+0x388>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1400:	4f82      	ldr	r7, [pc, #520]	; (160c <sampleTick+0x38c>)
    1402:	601a      	str	r2, [r3, #0]
    1404:	2182      	movs	r1, #130	; 0x82
    1406:	2000      	movs	r0, #0
    1408:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    140a:	21ff      	movs	r1, #255	; 0xff
    140c:	2000      	movs	r0, #0
    140e:	47b8      	blx	r7
    1410:	0023      	movs	r3, r4
    1412:	3368      	adds	r3, #104	; 0x68
    1414:	8018      	strh	r0, [r3, #0]
    1416:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1418:	21ff      	movs	r1, #255	; 0xff
    141a:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    141c:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    141e:	47b8      	blx	r7
    1420:	9b03      	ldr	r3, [sp, #12]
    1422:	0200      	lsls	r0, r0, #8
    1424:	4305      	orrs	r5, r0
    1426:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1428:	21ff      	movs	r1, #255	; 0xff
    142a:	0026      	movs	r6, r4
    142c:	2000      	movs	r0, #0
    142e:	47b8      	blx	r7
    1430:	366c      	adds	r6, #108	; 0x6c
    1432:	8030      	strh	r0, [r6, #0]
    1434:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1436:	21ff      	movs	r1, #255	; 0xff
    1438:	2000      	movs	r0, #0
    143a:	47b8      	blx	r7
    143c:	0200      	lsls	r0, r0, #8
    143e:	4305      	orrs	r5, r0
    1440:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1442:	21ff      	movs	r1, #255	; 0xff
    1444:	2000      	movs	r0, #0
    1446:	47b8      	blx	r7
    1448:	466b      	mov	r3, sp
    144a:	0025      	movs	r5, r4
    144c:	9004      	str	r0, [sp, #16]
    144e:	8a1b      	ldrh	r3, [r3, #16]
    1450:	3570      	adds	r5, #112	; 0x70
    1452:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1454:	21ff      	movs	r1, #255	; 0xff
    1456:	2000      	movs	r0, #0
    1458:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    145a:	2280      	movs	r2, #128	; 0x80
    145c:	9b04      	ldr	r3, [sp, #16]
    145e:	0200      	lsls	r0, r0, #8
    1460:	4303      	orrs	r3, r0
    1462:	802b      	strh	r3, [r5, #0]
    1464:	4b6a      	ldr	r3, [pc, #424]	; (1610 <sampleTick+0x390>)
    1466:	00d2      	lsls	r2, r2, #3
    1468:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    146a:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    146c:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    146e:	2000      	movs	r0, #0
    1470:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1472:	2300      	movs	r3, #0
    1474:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1476:	2102      	movs	r1, #2
    1478:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    147a:	0021      	movs	r1, r4
    147c:	1112      	asrs	r2, r2, #4
    147e:	1100      	asrs	r0, r0, #4
    1480:	316a      	adds	r1, #106	; 0x6a
    1482:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1484:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1486:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1488:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    148a:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    148c:	4b55      	ldr	r3, [pc, #340]	; (15e4 <sampleTick+0x364>)
    148e:	4798      	blx	r3
    1490:	23fe      	movs	r3, #254	; 0xfe
    1492:	4d56      	ldr	r5, [pc, #344]	; (15ec <sampleTick+0x36c>)
    1494:	2200      	movs	r2, #0
    1496:	059b      	lsls	r3, r3, #22
    1498:	47a8      	blx	r5
    149a:	4b56      	ldr	r3, [pc, #344]	; (15f4 <sampleTick+0x374>)
    149c:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    149e:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    14a0:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    14a2:	2000      	movs	r0, #0
    14a4:	5e18      	ldrsh	r0, [r3, r0]
    14a6:	4b4f      	ldr	r3, [pc, #316]	; (15e4 <sampleTick+0x364>)
    14a8:	4798      	blx	r3
    14aa:	23fe      	movs	r3, #254	; 0xfe
    14ac:	2200      	movs	r2, #0
    14ae:	059b      	lsls	r3, r3, #22
    14b0:	47a8      	blx	r5
    14b2:	4b50      	ldr	r3, [pc, #320]	; (15f4 <sampleTick+0x374>)
    14b4:	4798      	blx	r3
    14b6:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    14b8:	2306      	movs	r3, #6
    14ba:	5ef0      	ldrsh	r0, [r6, r3]
    14bc:	4b49      	ldr	r3, [pc, #292]	; (15e4 <sampleTick+0x364>)
    14be:	4798      	blx	r3
    14c0:	23fe      	movs	r3, #254	; 0xfe
    14c2:	2200      	movs	r2, #0
    14c4:	059b      	lsls	r3, r3, #22
    14c6:	47a8      	blx	r5
    14c8:	4b4a      	ldr	r3, [pc, #296]	; (15f4 <sampleTick+0x374>)
    14ca:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    14cc:	2280      	movs	r2, #128	; 0x80
    14ce:	4b4a      	ldr	r3, [pc, #296]	; (15f8 <sampleTick+0x378>)
    14d0:	00d2      	lsls	r2, r2, #3
    14d2:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    14d4:	2182      	movs	r1, #130	; 0x82
    14d6:	615a      	str	r2, [r3, #20]
    14d8:	2000      	movs	r0, #0
    14da:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    14dc:	21ff      	movs	r1, #255	; 0xff
    14de:	2000      	movs	r0, #0
    14e0:	47b8      	blx	r7
    14e2:	0023      	movs	r3, r4
    14e4:	3374      	adds	r3, #116	; 0x74
    14e6:	8018      	strh	r0, [r3, #0]
    14e8:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14ea:	21ff      	movs	r1, #255	; 0xff
    14ec:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    14ee:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14f0:	47b8      	blx	r7
    14f2:	9b03      	ldr	r3, [sp, #12]
    14f4:	0200      	lsls	r0, r0, #8
    14f6:	4305      	orrs	r5, r0
    14f8:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    14fa:	21ff      	movs	r1, #255	; 0xff
    14fc:	2000      	movs	r0, #0
    14fe:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1500:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1502:	81b0      	strh	r0, [r6, #12]
    1504:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1506:	2000      	movs	r0, #0
    1508:	47b8      	blx	r7
    150a:	0200      	lsls	r0, r0, #8
    150c:	4305      	orrs	r5, r0
    150e:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1510:	21ff      	movs	r1, #255	; 0xff
    1512:	2000      	movs	r0, #0
    1514:	47b8      	blx	r7
    1516:	466b      	mov	r3, sp
    1518:	0025      	movs	r5, r4
    151a:	9004      	str	r0, [sp, #16]
    151c:	8a1b      	ldrh	r3, [r3, #16]
    151e:	357c      	adds	r5, #124	; 0x7c
    1520:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1522:	21ff      	movs	r1, #255	; 0xff
    1524:	2000      	movs	r0, #0
    1526:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1528:	2280      	movs	r2, #128	; 0x80
    152a:	9f04      	ldr	r7, [sp, #16]
    152c:	0200      	lsls	r0, r0, #8
    152e:	4b32      	ldr	r3, [pc, #200]	; (15f8 <sampleTick+0x378>)
    1530:	4307      	orrs	r7, r0
    1532:	00d2      	lsls	r2, r2, #3
    1534:	802f      	strh	r7, [r5, #0]
    1536:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1538:	9b03      	ldr	r3, [sp, #12]
    153a:	2000      	movs	r0, #0
    153c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    153e:	230c      	movs	r3, #12
    1540:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    1542:	2100      	movs	r1, #0
    1544:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1546:	0021      	movs	r1, r4
    1548:	1112      	asrs	r2, r2, #4
    154a:	1100      	asrs	r0, r0, #4
    154c:	3176      	adds	r1, #118	; 0x76
    154e:	111b      	asrs	r3, r3, #4
    1550:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1552:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1554:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1556:	4b23      	ldr	r3, [pc, #140]	; (15e4 <sampleTick+0x364>)
    1558:	4798      	blx	r3
    155a:	23fe      	movs	r3, #254	; 0xfe
    155c:	4f23      	ldr	r7, [pc, #140]	; (15ec <sampleTick+0x36c>)
    155e:	2200      	movs	r2, #0
    1560:	059b      	lsls	r3, r3, #22
    1562:	47b8      	blx	r7
    1564:	4b23      	ldr	r3, [pc, #140]	; (15f4 <sampleTick+0x374>)
    1566:	4798      	blx	r3
    1568:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    156a:	230e      	movs	r3, #14
    156c:	5ef0      	ldrsh	r0, [r6, r3]
    156e:	4b1d      	ldr	r3, [pc, #116]	; (15e4 <sampleTick+0x364>)
    1570:	4798      	blx	r3
    1572:	23fe      	movs	r3, #254	; 0xfe
    1574:	2200      	movs	r2, #0
    1576:	059b      	lsls	r3, r3, #22
    1578:	47b8      	blx	r7
    157a:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <sampleTick+0x374>)
    157c:	4798      	blx	r3
    157e:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1580:	2302      	movs	r3, #2
    1582:	5ee8      	ldrsh	r0, [r5, r3]
    1584:	4b17      	ldr	r3, [pc, #92]	; (15e4 <sampleTick+0x364>)
    1586:	4798      	blx	r3
    1588:	23fe      	movs	r3, #254	; 0xfe
    158a:	2200      	movs	r2, #0
    158c:	059b      	lsls	r3, r3, #22
    158e:	47b8      	blx	r7
    1590:	4b18      	ldr	r3, [pc, #96]	; (15f4 <sampleTick+0x374>)
    1592:	4798      	blx	r3
    1594:	6660      	str	r0, [r4, #100]	; 0x64

    delay_us(800);
    1596:	20c8      	movs	r0, #200	; 0xc8
    1598:	4b19      	ldr	r3, [pc, #100]	; (1600 <sampleTick+0x380>)
    159a:	0080      	lsls	r0, r0, #2
    159c:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    159e:	4b19      	ldr	r3, [pc, #100]	; (1604 <sampleTick+0x384>)
    15a0:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15a2:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    15a4:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15a6:	4b1b      	ldr	r3, [pc, #108]	; (1614 <sampleTick+0x394>)
    15a8:	0028      	movs	r0, r5
    15aa:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    15ac:	0028      	movs	r0, r5
    15ae:	4b1a      	ldr	r3, [pc, #104]	; (1618 <sampleTick+0x398>)
    15b0:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    15b2:	4b1a      	ldr	r3, [pc, #104]	; (161c <sampleTick+0x39c>)
    15b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    15b6:	4798      	blx	r3
    15b8:	4a19      	ldr	r2, [pc, #100]	; (1620 <sampleTick+0x3a0>)
    15ba:	4b1a      	ldr	r3, [pc, #104]	; (1624 <sampleTick+0x3a4>)
    15bc:	4d0b      	ldr	r5, [pc, #44]	; (15ec <sampleTick+0x36c>)
    15be:	47a8      	blx	r5
    15c0:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <sampleTick+0x374>)
    15c2:	4798      	blx	r3
    15c4:	62a0      	str	r0, [r4, #40]	; 0x28


}
    15c6:	b007      	add	sp, #28
    15c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	00000e5d 	.word	0x00000e5d
    15d0:	00003310 	.word	0x00003310
    15d4:	00000b09 	.word	0x00000b09
    15d8:	00000296 	.word	0x00000296
    15dc:	0000029a 	.word	0x0000029a
    15e0:	fffff0c4 	.word	0xfffff0c4
    15e4:	00002cd9 	.word	0x00002cd9
    15e8:	02de00d2 	.word	0x02de00d2
    15ec:	000020d1 	.word	0x000020d1
    15f0:	bf8f8a09 	.word	0xbf8f8a09
    15f4:	00002e75 	.word	0x00002e75
    15f8:	41004400 	.word	0x41004400
    15fc:	00000b71 	.word	0x00000b71
    1600:	00000de1 	.word	0x00000de1
    1604:	00000255 	.word	0x00000255
    1608:	41004494 	.word	0x41004494
    160c:	00001735 	.word	0x00001735
    1610:	41004498 	.word	0x41004498
    1614:	00000309 	.word	0x00000309
    1618:	000003f5 	.word	0x000003f5
    161c:	00002d5d 	.word	0x00002d5d
    1620:	e9f6a93f 	.word	0xe9f6a93f
    1624:	3fa0cc78 	.word	0x3fa0cc78

00001628 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    162c:	2301      	movs	r3, #1
    162e:	1ca6      	adds	r6, r4, #2
    1630:	40b3      	lsls	r3, r6
    1632:	480d      	ldr	r0, [pc, #52]	; (1668 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1634:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1636:	6a01      	ldr	r1, [r0, #32]
    1638:	430b      	orrs	r3, r1
    163a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    163c:	2d00      	cmp	r5, #0
    163e:	d003      	beq.n	1648 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1640:	2107      	movs	r1, #7
    1642:	0028      	movs	r0, r5
    1644:	4b09      	ldr	r3, [pc, #36]	; (166c <sercomClockEnable+0x44>)
    1646:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1648:	22f0      	movs	r2, #240	; 0xf0
    164a:	2080      	movs	r0, #128	; 0x80
    164c:	0229      	lsls	r1, r5, #8
    164e:	0112      	lsls	r2, r2, #4
    1650:	4011      	ands	r1, r2
    1652:	01c0      	lsls	r0, r0, #7
    1654:	4301      	orrs	r1, r0
    1656:	0020      	movs	r0, r4
    1658:	3014      	adds	r0, #20
    165a:	223f      	movs	r2, #63	; 0x3f
    165c:	0003      	movs	r3, r0
    165e:	4013      	ands	r3, r2
    1660:	4319      	orrs	r1, r3
    1662:	4b03      	ldr	r3, [pc, #12]	; (1670 <sercomClockEnable+0x48>)
    1664:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    1666:	bd70      	pop	{r4, r5, r6, pc}
    1668:	40000400 	.word	0x40000400
    166c:	00000d91 	.word	0x00000d91
    1670:	40000c00 	.word	0x40000c00

00001674 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1674:	4b04      	ldr	r3, [pc, #16]	; (1688 <sercomReset+0x14>)
    1676:	0280      	lsls	r0, r0, #10
    1678:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    167a:	2301      	movs	r3, #1
    167c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    167e:	6802      	ldr	r2, [r0, #0]
    1680:	421a      	tst	r2, r3
    1682:	d1fc      	bne.n	167e <sercomReset+0xa>
}
    1684:	4770      	bx	lr
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	42000800 	.word	0x42000800

0000168c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    168c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    168e:	0004      	movs	r4, r0
    1690:	9300      	str	r3, [sp, #0]
    1692:	ab08      	add	r3, sp, #32
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	000e      	movs	r6, r1
    1698:	9301      	str	r3, [sp, #4]
    169a:	ab09      	add	r3, sp, #36	; 0x24
    169c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    169e:	4b12      	ldr	r3, [pc, #72]	; (16e8 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    16a0:	0015      	movs	r5, r2

    sercomReset(id);
    16a2:	4798      	blx	r3
    16a4:	4b11      	ldr	r3, [pc, #68]	; (16ec <sercomSpiMasterInit+0x60>)
    16a6:	02a4      	lsls	r4, r4, #10
    16a8:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    16aa:	2380      	movs	r3, #128	; 0x80
    16ac:	029b      	lsls	r3, r3, #10
    16ae:	6063      	str	r3, [r4, #4]
    16b0:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    16b2:	21c0      	movs	r1, #192	; 0xc0
    16b4:	042d      	lsls	r5, r5, #16
    16b6:	029b      	lsls	r3, r3, #10
    16b8:	402b      	ands	r3, r5
    16ba:	250e      	movs	r5, #14
    16bc:	0536      	lsls	r6, r6, #20
    16be:	0389      	lsls	r1, r1, #14
    16c0:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    16c2:	9e00      	ldr	r6, [sp, #0]
    16c4:	431d      	orrs	r5, r3
    16c6:	1e73      	subs	r3, r6, #1
    16c8:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    16ca:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    16cc:	0772      	lsls	r2, r6, #29
    16ce:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    16d0:	432a      	orrs	r2, r5
    16d2:	1e59      	subs	r1, r3, #1
    16d4:	418b      	sbcs	r3, r1
    16d6:	0016      	movs	r6, r2
    16d8:	071b      	lsls	r3, r3, #28
    16da:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    16dc:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    16de:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    16e0:	69e3      	ldr	r3, [r4, #28]
    16e2:	075b      	lsls	r3, r3, #29
    16e4:	d4fc      	bmi.n	16e0 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    16e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    16e8:	00001675 	.word	0x00001675
    16ec:	42000800 	.word	0x42000800

000016f0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    16f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16f2:	0007      	movs	r7, r0
    16f4:	001e      	movs	r6, r3
    sercomReset(id);
    16f6:	4b0c      	ldr	r3, [pc, #48]	; (1728 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    16f8:	000d      	movs	r5, r1
    16fa:	0014      	movs	r4, r2
    sercomReset(id);
    16fc:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    16fe:	4b0b      	ldr	r3, [pc, #44]	; (172c <sercomUartInit+0x3c>)
    1700:	02b8      	lsls	r0, r7, #10
    1702:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1704:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1706:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1708:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    170a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    170c:	0529      	lsls	r1, r5, #20
    170e:	0392      	lsls	r2, r2, #14
    1710:	4011      	ands	r1, r2
    1712:	4a07      	ldr	r2, [pc, #28]	; (1730 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1714:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1716:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1718:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    171a:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    171c:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    171e:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1720:	4023      	ands	r3, r4
    1722:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1724:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1728:	00001675 	.word	0x00001675
    172c:	42000800 	.word	0x42000800
    1730:	40000006 	.word	0x40000006

00001734 <spiDataTransfer>:
    1734:	4b04      	ldr	r3, [pc, #16]	; (1748 <spiDataTransfer+0x14>)
    1736:	0280      	lsls	r0, r0, #10
    1738:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    173a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    173c:	7e03      	ldrb	r3, [r0, #24]
    173e:	075b      	lsls	r3, r3, #29
    1740:	d5fc      	bpl.n	173c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1742:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1744:	b2c0      	uxtb	r0, r0
}
    1746:	4770      	bx	lr
    1748:	42000800 	.word	0x42000800

0000174c <__aeabi_cdrcmple>:
    174c:	4684      	mov	ip, r0
    174e:	1c10      	adds	r0, r2, #0
    1750:	4662      	mov	r2, ip
    1752:	468c      	mov	ip, r1
    1754:	1c19      	adds	r1, r3, #0
    1756:	4663      	mov	r3, ip
    1758:	e000      	b.n	175c <__aeabi_cdcmpeq>
    175a:	46c0      	nop			; (mov r8, r8)

0000175c <__aeabi_cdcmpeq>:
    175c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    175e:	f000 fc4d 	bl	1ffc <__ledf2>
    1762:	2800      	cmp	r0, #0
    1764:	d401      	bmi.n	176a <__aeabi_cdcmpeq+0xe>
    1766:	2100      	movs	r1, #0
    1768:	42c8      	cmn	r0, r1
    176a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000176c <__aeabi_dcmpeq>:
    176c:	b510      	push	{r4, lr}
    176e:	f000 fba1 	bl	1eb4 <__eqdf2>
    1772:	4240      	negs	r0, r0
    1774:	3001      	adds	r0, #1
    1776:	bd10      	pop	{r4, pc}

00001778 <__aeabi_dcmplt>:
    1778:	b510      	push	{r4, lr}
    177a:	f000 fc3f 	bl	1ffc <__ledf2>
    177e:	2800      	cmp	r0, #0
    1780:	db01      	blt.n	1786 <__aeabi_dcmplt+0xe>
    1782:	2000      	movs	r0, #0
    1784:	bd10      	pop	{r4, pc}
    1786:	2001      	movs	r0, #1
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)

0000178c <__aeabi_dcmple>:
    178c:	b510      	push	{r4, lr}
    178e:	f000 fc35 	bl	1ffc <__ledf2>
    1792:	2800      	cmp	r0, #0
    1794:	dd01      	ble.n	179a <__aeabi_dcmple+0xe>
    1796:	2000      	movs	r0, #0
    1798:	bd10      	pop	{r4, pc}
    179a:	2001      	movs	r0, #1
    179c:	bd10      	pop	{r4, pc}
    179e:	46c0      	nop			; (mov r8, r8)

000017a0 <__aeabi_dcmpgt>:
    17a0:	b510      	push	{r4, lr}
    17a2:	f000 fbc7 	bl	1f34 <__gedf2>
    17a6:	2800      	cmp	r0, #0
    17a8:	dc01      	bgt.n	17ae <__aeabi_dcmpgt+0xe>
    17aa:	2000      	movs	r0, #0
    17ac:	bd10      	pop	{r4, pc}
    17ae:	2001      	movs	r0, #1
    17b0:	bd10      	pop	{r4, pc}
    17b2:	46c0      	nop			; (mov r8, r8)

000017b4 <__aeabi_dcmpge>:
    17b4:	b510      	push	{r4, lr}
    17b6:	f000 fbbd 	bl	1f34 <__gedf2>
    17ba:	2800      	cmp	r0, #0
    17bc:	da01      	bge.n	17c2 <__aeabi_dcmpge+0xe>
    17be:	2000      	movs	r0, #0
    17c0:	bd10      	pop	{r4, pc}
    17c2:	2001      	movs	r0, #1
    17c4:	bd10      	pop	{r4, pc}
    17c6:	46c0      	nop			; (mov r8, r8)

000017c8 <__aeabi_lmul>:
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ca:	464f      	mov	r7, r9
    17cc:	4646      	mov	r6, r8
    17ce:	b4c0      	push	{r6, r7}
    17d0:	0416      	lsls	r6, r2, #16
    17d2:	0c36      	lsrs	r6, r6, #16
    17d4:	4699      	mov	r9, r3
    17d6:	0033      	movs	r3, r6
    17d8:	0405      	lsls	r5, r0, #16
    17da:	0c2c      	lsrs	r4, r5, #16
    17dc:	0c07      	lsrs	r7, r0, #16
    17de:	0c15      	lsrs	r5, r2, #16
    17e0:	4363      	muls	r3, r4
    17e2:	437e      	muls	r6, r7
    17e4:	436f      	muls	r7, r5
    17e6:	4365      	muls	r5, r4
    17e8:	0c1c      	lsrs	r4, r3, #16
    17ea:	19ad      	adds	r5, r5, r6
    17ec:	1964      	adds	r4, r4, r5
    17ee:	469c      	mov	ip, r3
    17f0:	42a6      	cmp	r6, r4
    17f2:	d903      	bls.n	17fc <__aeabi_lmul+0x34>
    17f4:	2380      	movs	r3, #128	; 0x80
    17f6:	025b      	lsls	r3, r3, #9
    17f8:	4698      	mov	r8, r3
    17fa:	4447      	add	r7, r8
    17fc:	4663      	mov	r3, ip
    17fe:	0c25      	lsrs	r5, r4, #16
    1800:	19ef      	adds	r7, r5, r7
    1802:	041d      	lsls	r5, r3, #16
    1804:	464b      	mov	r3, r9
    1806:	434a      	muls	r2, r1
    1808:	4343      	muls	r3, r0
    180a:	0c2d      	lsrs	r5, r5, #16
    180c:	0424      	lsls	r4, r4, #16
    180e:	1964      	adds	r4, r4, r5
    1810:	1899      	adds	r1, r3, r2
    1812:	19c9      	adds	r1, r1, r7
    1814:	0020      	movs	r0, r4
    1816:	bc0c      	pop	{r2, r3}
    1818:	4690      	mov	r8, r2
    181a:	4699      	mov	r9, r3
    181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181e:	46c0      	nop			; (mov r8, r8)

00001820 <__aeabi_d2uiz>:
    1820:	b570      	push	{r4, r5, r6, lr}
    1822:	2200      	movs	r2, #0
    1824:	4b0c      	ldr	r3, [pc, #48]	; (1858 <__aeabi_d2uiz+0x38>)
    1826:	0004      	movs	r4, r0
    1828:	000d      	movs	r5, r1
    182a:	f7ff ffc3 	bl	17b4 <__aeabi_dcmpge>
    182e:	2800      	cmp	r0, #0
    1830:	d104      	bne.n	183c <__aeabi_d2uiz+0x1c>
    1832:	0020      	movs	r0, r4
    1834:	0029      	movs	r1, r5
    1836:	f001 fa19 	bl	2c6c <__aeabi_d2iz>
    183a:	bd70      	pop	{r4, r5, r6, pc}
    183c:	4b06      	ldr	r3, [pc, #24]	; (1858 <__aeabi_d2uiz+0x38>)
    183e:	2200      	movs	r2, #0
    1840:	0020      	movs	r0, r4
    1842:	0029      	movs	r1, r5
    1844:	f000 febe 	bl	25c4 <__aeabi_dsub>
    1848:	f001 fa10 	bl	2c6c <__aeabi_d2iz>
    184c:	2380      	movs	r3, #128	; 0x80
    184e:	061b      	lsls	r3, r3, #24
    1850:	469c      	mov	ip, r3
    1852:	4460      	add	r0, ip
    1854:	e7f1      	b.n	183a <__aeabi_d2uiz+0x1a>
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	41e00000 	.word	0x41e00000

0000185c <__aeabi_dadd>:
    185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    185e:	4656      	mov	r6, sl
    1860:	465f      	mov	r7, fp
    1862:	464d      	mov	r5, r9
    1864:	4644      	mov	r4, r8
    1866:	b4f0      	push	{r4, r5, r6, r7}
    1868:	000f      	movs	r7, r1
    186a:	0ffd      	lsrs	r5, r7, #31
    186c:	46aa      	mov	sl, r5
    186e:	0309      	lsls	r1, r1, #12
    1870:	007c      	lsls	r4, r7, #1
    1872:	002e      	movs	r6, r5
    1874:	005f      	lsls	r7, r3, #1
    1876:	0f45      	lsrs	r5, r0, #29
    1878:	0a49      	lsrs	r1, r1, #9
    187a:	0d7f      	lsrs	r7, r7, #21
    187c:	4329      	orrs	r1, r5
    187e:	00c5      	lsls	r5, r0, #3
    1880:	0318      	lsls	r0, r3, #12
    1882:	46bc      	mov	ip, r7
    1884:	0a40      	lsrs	r0, r0, #9
    1886:	0f57      	lsrs	r7, r2, #29
    1888:	0d64      	lsrs	r4, r4, #21
    188a:	0fdb      	lsrs	r3, r3, #31
    188c:	4338      	orrs	r0, r7
    188e:	00d2      	lsls	r2, r2, #3
    1890:	459a      	cmp	sl, r3
    1892:	d100      	bne.n	1896 <__aeabi_dadd+0x3a>
    1894:	e0aa      	b.n	19ec <__aeabi_dadd+0x190>
    1896:	4666      	mov	r6, ip
    1898:	1ba6      	subs	r6, r4, r6
    189a:	2e00      	cmp	r6, #0
    189c:	dc00      	bgt.n	18a0 <__aeabi_dadd+0x44>
    189e:	e0ff      	b.n	1aa0 <__aeabi_dadd+0x244>
    18a0:	4663      	mov	r3, ip
    18a2:	2b00      	cmp	r3, #0
    18a4:	d139      	bne.n	191a <__aeabi_dadd+0xbe>
    18a6:	0003      	movs	r3, r0
    18a8:	4313      	orrs	r3, r2
    18aa:	d000      	beq.n	18ae <__aeabi_dadd+0x52>
    18ac:	e0d9      	b.n	1a62 <__aeabi_dadd+0x206>
    18ae:	076b      	lsls	r3, r5, #29
    18b0:	d009      	beq.n	18c6 <__aeabi_dadd+0x6a>
    18b2:	230f      	movs	r3, #15
    18b4:	402b      	ands	r3, r5
    18b6:	2b04      	cmp	r3, #4
    18b8:	d005      	beq.n	18c6 <__aeabi_dadd+0x6a>
    18ba:	1d2b      	adds	r3, r5, #4
    18bc:	42ab      	cmp	r3, r5
    18be:	41ad      	sbcs	r5, r5
    18c0:	426d      	negs	r5, r5
    18c2:	1949      	adds	r1, r1, r5
    18c4:	001d      	movs	r5, r3
    18c6:	020b      	lsls	r3, r1, #8
    18c8:	d400      	bmi.n	18cc <__aeabi_dadd+0x70>
    18ca:	e082      	b.n	19d2 <__aeabi_dadd+0x176>
    18cc:	4bca      	ldr	r3, [pc, #808]	; (1bf8 <__aeabi_dadd+0x39c>)
    18ce:	3401      	adds	r4, #1
    18d0:	429c      	cmp	r4, r3
    18d2:	d100      	bne.n	18d6 <__aeabi_dadd+0x7a>
    18d4:	e0fe      	b.n	1ad4 <__aeabi_dadd+0x278>
    18d6:	000a      	movs	r2, r1
    18d8:	4656      	mov	r6, sl
    18da:	4bc8      	ldr	r3, [pc, #800]	; (1bfc <__aeabi_dadd+0x3a0>)
    18dc:	08ed      	lsrs	r5, r5, #3
    18de:	401a      	ands	r2, r3
    18e0:	0750      	lsls	r0, r2, #29
    18e2:	0564      	lsls	r4, r4, #21
    18e4:	0252      	lsls	r2, r2, #9
    18e6:	4305      	orrs	r5, r0
    18e8:	0b12      	lsrs	r2, r2, #12
    18ea:	0d64      	lsrs	r4, r4, #21
    18ec:	2100      	movs	r1, #0
    18ee:	0312      	lsls	r2, r2, #12
    18f0:	0d0b      	lsrs	r3, r1, #20
    18f2:	051b      	lsls	r3, r3, #20
    18f4:	0564      	lsls	r4, r4, #21
    18f6:	0b12      	lsrs	r2, r2, #12
    18f8:	431a      	orrs	r2, r3
    18fa:	0863      	lsrs	r3, r4, #1
    18fc:	4cc0      	ldr	r4, [pc, #768]	; (1c00 <__aeabi_dadd+0x3a4>)
    18fe:	07f6      	lsls	r6, r6, #31
    1900:	4014      	ands	r4, r2
    1902:	431c      	orrs	r4, r3
    1904:	0064      	lsls	r4, r4, #1
    1906:	0864      	lsrs	r4, r4, #1
    1908:	4334      	orrs	r4, r6
    190a:	0028      	movs	r0, r5
    190c:	0021      	movs	r1, r4
    190e:	bc3c      	pop	{r2, r3, r4, r5}
    1910:	4690      	mov	r8, r2
    1912:	4699      	mov	r9, r3
    1914:	46a2      	mov	sl, r4
    1916:	46ab      	mov	fp, r5
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191a:	4bb7      	ldr	r3, [pc, #732]	; (1bf8 <__aeabi_dadd+0x39c>)
    191c:	429c      	cmp	r4, r3
    191e:	d0c6      	beq.n	18ae <__aeabi_dadd+0x52>
    1920:	2380      	movs	r3, #128	; 0x80
    1922:	041b      	lsls	r3, r3, #16
    1924:	4318      	orrs	r0, r3
    1926:	2e38      	cmp	r6, #56	; 0x38
    1928:	dd00      	ble.n	192c <__aeabi_dadd+0xd0>
    192a:	e0eb      	b.n	1b04 <__aeabi_dadd+0x2a8>
    192c:	2e1f      	cmp	r6, #31
    192e:	dd00      	ble.n	1932 <__aeabi_dadd+0xd6>
    1930:	e11e      	b.n	1b70 <__aeabi_dadd+0x314>
    1932:	2320      	movs	r3, #32
    1934:	1b9b      	subs	r3, r3, r6
    1936:	469c      	mov	ip, r3
    1938:	0003      	movs	r3, r0
    193a:	4667      	mov	r7, ip
    193c:	40bb      	lsls	r3, r7
    193e:	4698      	mov	r8, r3
    1940:	0013      	movs	r3, r2
    1942:	4647      	mov	r7, r8
    1944:	40f3      	lsrs	r3, r6
    1946:	433b      	orrs	r3, r7
    1948:	4667      	mov	r7, ip
    194a:	40ba      	lsls	r2, r7
    194c:	1e57      	subs	r7, r2, #1
    194e:	41ba      	sbcs	r2, r7
    1950:	4313      	orrs	r3, r2
    1952:	0002      	movs	r2, r0
    1954:	40f2      	lsrs	r2, r6
    1956:	1aeb      	subs	r3, r5, r3
    1958:	429d      	cmp	r5, r3
    195a:	41b6      	sbcs	r6, r6
    195c:	001d      	movs	r5, r3
    195e:	1a8a      	subs	r2, r1, r2
    1960:	4276      	negs	r6, r6
    1962:	1b91      	subs	r1, r2, r6
    1964:	020b      	lsls	r3, r1, #8
    1966:	d531      	bpl.n	19cc <__aeabi_dadd+0x170>
    1968:	024a      	lsls	r2, r1, #9
    196a:	0a56      	lsrs	r6, r2, #9
    196c:	2e00      	cmp	r6, #0
    196e:	d100      	bne.n	1972 <__aeabi_dadd+0x116>
    1970:	e0b4      	b.n	1adc <__aeabi_dadd+0x280>
    1972:	0030      	movs	r0, r6
    1974:	f001 fb0a 	bl	2f8c <__clzsi2>
    1978:	0003      	movs	r3, r0
    197a:	3b08      	subs	r3, #8
    197c:	2b1f      	cmp	r3, #31
    197e:	dd00      	ble.n	1982 <__aeabi_dadd+0x126>
    1980:	e0b5      	b.n	1aee <__aeabi_dadd+0x292>
    1982:	2220      	movs	r2, #32
    1984:	0029      	movs	r1, r5
    1986:	1ad2      	subs	r2, r2, r3
    1988:	40d1      	lsrs	r1, r2
    198a:	409e      	lsls	r6, r3
    198c:	000a      	movs	r2, r1
    198e:	409d      	lsls	r5, r3
    1990:	4332      	orrs	r2, r6
    1992:	429c      	cmp	r4, r3
    1994:	dd00      	ble.n	1998 <__aeabi_dadd+0x13c>
    1996:	e0b1      	b.n	1afc <__aeabi_dadd+0x2a0>
    1998:	1b1c      	subs	r4, r3, r4
    199a:	1c63      	adds	r3, r4, #1
    199c:	2b1f      	cmp	r3, #31
    199e:	dd00      	ble.n	19a2 <__aeabi_dadd+0x146>
    19a0:	e0d5      	b.n	1b4e <__aeabi_dadd+0x2f2>
    19a2:	2120      	movs	r1, #32
    19a4:	0014      	movs	r4, r2
    19a6:	0028      	movs	r0, r5
    19a8:	1ac9      	subs	r1, r1, r3
    19aa:	408c      	lsls	r4, r1
    19ac:	40d8      	lsrs	r0, r3
    19ae:	408d      	lsls	r5, r1
    19b0:	4304      	orrs	r4, r0
    19b2:	40da      	lsrs	r2, r3
    19b4:	1e68      	subs	r0, r5, #1
    19b6:	4185      	sbcs	r5, r0
    19b8:	0011      	movs	r1, r2
    19ba:	4325      	orrs	r5, r4
    19bc:	2400      	movs	r4, #0
    19be:	e776      	b.n	18ae <__aeabi_dadd+0x52>
    19c0:	4641      	mov	r1, r8
    19c2:	4331      	orrs	r1, r6
    19c4:	d100      	bne.n	19c8 <__aeabi_dadd+0x16c>
    19c6:	e234      	b.n	1e32 <__aeabi_dadd+0x5d6>
    19c8:	0031      	movs	r1, r6
    19ca:	4645      	mov	r5, r8
    19cc:	076b      	lsls	r3, r5, #29
    19ce:	d000      	beq.n	19d2 <__aeabi_dadd+0x176>
    19d0:	e76f      	b.n	18b2 <__aeabi_dadd+0x56>
    19d2:	4656      	mov	r6, sl
    19d4:	0748      	lsls	r0, r1, #29
    19d6:	08ed      	lsrs	r5, r5, #3
    19d8:	08c9      	lsrs	r1, r1, #3
    19da:	4305      	orrs	r5, r0
    19dc:	4b86      	ldr	r3, [pc, #536]	; (1bf8 <__aeabi_dadd+0x39c>)
    19de:	429c      	cmp	r4, r3
    19e0:	d035      	beq.n	1a4e <__aeabi_dadd+0x1f2>
    19e2:	030a      	lsls	r2, r1, #12
    19e4:	0564      	lsls	r4, r4, #21
    19e6:	0b12      	lsrs	r2, r2, #12
    19e8:	0d64      	lsrs	r4, r4, #21
    19ea:	e77f      	b.n	18ec <__aeabi_dadd+0x90>
    19ec:	4663      	mov	r3, ip
    19ee:	1ae3      	subs	r3, r4, r3
    19f0:	469b      	mov	fp, r3
    19f2:	2b00      	cmp	r3, #0
    19f4:	dc00      	bgt.n	19f8 <__aeabi_dadd+0x19c>
    19f6:	e08b      	b.n	1b10 <__aeabi_dadd+0x2b4>
    19f8:	4667      	mov	r7, ip
    19fa:	2f00      	cmp	r7, #0
    19fc:	d03c      	beq.n	1a78 <__aeabi_dadd+0x21c>
    19fe:	4f7e      	ldr	r7, [pc, #504]	; (1bf8 <__aeabi_dadd+0x39c>)
    1a00:	42bc      	cmp	r4, r7
    1a02:	d100      	bne.n	1a06 <__aeabi_dadd+0x1aa>
    1a04:	e753      	b.n	18ae <__aeabi_dadd+0x52>
    1a06:	2780      	movs	r7, #128	; 0x80
    1a08:	043f      	lsls	r7, r7, #16
    1a0a:	4338      	orrs	r0, r7
    1a0c:	465b      	mov	r3, fp
    1a0e:	2b38      	cmp	r3, #56	; 0x38
    1a10:	dc00      	bgt.n	1a14 <__aeabi_dadd+0x1b8>
    1a12:	e0f7      	b.n	1c04 <__aeabi_dadd+0x3a8>
    1a14:	4302      	orrs	r2, r0
    1a16:	1e50      	subs	r0, r2, #1
    1a18:	4182      	sbcs	r2, r0
    1a1a:	2000      	movs	r0, #0
    1a1c:	b2d2      	uxtb	r2, r2
    1a1e:	1953      	adds	r3, r2, r5
    1a20:	1842      	adds	r2, r0, r1
    1a22:	42ab      	cmp	r3, r5
    1a24:	4189      	sbcs	r1, r1
    1a26:	001d      	movs	r5, r3
    1a28:	4249      	negs	r1, r1
    1a2a:	1889      	adds	r1, r1, r2
    1a2c:	020b      	lsls	r3, r1, #8
    1a2e:	d5cd      	bpl.n	19cc <__aeabi_dadd+0x170>
    1a30:	4b71      	ldr	r3, [pc, #452]	; (1bf8 <__aeabi_dadd+0x39c>)
    1a32:	3401      	adds	r4, #1
    1a34:	429c      	cmp	r4, r3
    1a36:	d100      	bne.n	1a3a <__aeabi_dadd+0x1de>
    1a38:	e13d      	b.n	1cb6 <__aeabi_dadd+0x45a>
    1a3a:	2001      	movs	r0, #1
    1a3c:	4a6f      	ldr	r2, [pc, #444]	; (1bfc <__aeabi_dadd+0x3a0>)
    1a3e:	086b      	lsrs	r3, r5, #1
    1a40:	400a      	ands	r2, r1
    1a42:	4028      	ands	r0, r5
    1a44:	4318      	orrs	r0, r3
    1a46:	07d5      	lsls	r5, r2, #31
    1a48:	4305      	orrs	r5, r0
    1a4a:	0851      	lsrs	r1, r2, #1
    1a4c:	e72f      	b.n	18ae <__aeabi_dadd+0x52>
    1a4e:	002b      	movs	r3, r5
    1a50:	430b      	orrs	r3, r1
    1a52:	d100      	bne.n	1a56 <__aeabi_dadd+0x1fa>
    1a54:	e1cb      	b.n	1dee <__aeabi_dadd+0x592>
    1a56:	2380      	movs	r3, #128	; 0x80
    1a58:	031b      	lsls	r3, r3, #12
    1a5a:	430b      	orrs	r3, r1
    1a5c:	031a      	lsls	r2, r3, #12
    1a5e:	0b12      	lsrs	r2, r2, #12
    1a60:	e744      	b.n	18ec <__aeabi_dadd+0x90>
    1a62:	3e01      	subs	r6, #1
    1a64:	2e00      	cmp	r6, #0
    1a66:	d16d      	bne.n	1b44 <__aeabi_dadd+0x2e8>
    1a68:	1aae      	subs	r6, r5, r2
    1a6a:	42b5      	cmp	r5, r6
    1a6c:	419b      	sbcs	r3, r3
    1a6e:	1a09      	subs	r1, r1, r0
    1a70:	425b      	negs	r3, r3
    1a72:	1ac9      	subs	r1, r1, r3
    1a74:	0035      	movs	r5, r6
    1a76:	e775      	b.n	1964 <__aeabi_dadd+0x108>
    1a78:	0007      	movs	r7, r0
    1a7a:	4317      	orrs	r7, r2
    1a7c:	d100      	bne.n	1a80 <__aeabi_dadd+0x224>
    1a7e:	e716      	b.n	18ae <__aeabi_dadd+0x52>
    1a80:	2301      	movs	r3, #1
    1a82:	425b      	negs	r3, r3
    1a84:	469c      	mov	ip, r3
    1a86:	44e3      	add	fp, ip
    1a88:	465b      	mov	r3, fp
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d000      	beq.n	1a90 <__aeabi_dadd+0x234>
    1a8e:	e0e0      	b.n	1c52 <__aeabi_dadd+0x3f6>
    1a90:	18aa      	adds	r2, r5, r2
    1a92:	42aa      	cmp	r2, r5
    1a94:	419b      	sbcs	r3, r3
    1a96:	1809      	adds	r1, r1, r0
    1a98:	425b      	negs	r3, r3
    1a9a:	1859      	adds	r1, r3, r1
    1a9c:	0015      	movs	r5, r2
    1a9e:	e7c5      	b.n	1a2c <__aeabi_dadd+0x1d0>
    1aa0:	2e00      	cmp	r6, #0
    1aa2:	d175      	bne.n	1b90 <__aeabi_dadd+0x334>
    1aa4:	1c66      	adds	r6, r4, #1
    1aa6:	0576      	lsls	r6, r6, #21
    1aa8:	0d76      	lsrs	r6, r6, #21
    1aaa:	2e01      	cmp	r6, #1
    1aac:	dc00      	bgt.n	1ab0 <__aeabi_dadd+0x254>
    1aae:	e0f3      	b.n	1c98 <__aeabi_dadd+0x43c>
    1ab0:	1aae      	subs	r6, r5, r2
    1ab2:	46b0      	mov	r8, r6
    1ab4:	4545      	cmp	r5, r8
    1ab6:	41bf      	sbcs	r7, r7
    1ab8:	1a0e      	subs	r6, r1, r0
    1aba:	427f      	negs	r7, r7
    1abc:	1bf6      	subs	r6, r6, r7
    1abe:	0237      	lsls	r7, r6, #8
    1ac0:	d400      	bmi.n	1ac4 <__aeabi_dadd+0x268>
    1ac2:	e08f      	b.n	1be4 <__aeabi_dadd+0x388>
    1ac4:	1b55      	subs	r5, r2, r5
    1ac6:	42aa      	cmp	r2, r5
    1ac8:	41b6      	sbcs	r6, r6
    1aca:	1a41      	subs	r1, r0, r1
    1acc:	4276      	negs	r6, r6
    1ace:	1b8e      	subs	r6, r1, r6
    1ad0:	469a      	mov	sl, r3
    1ad2:	e74b      	b.n	196c <__aeabi_dadd+0x110>
    1ad4:	4656      	mov	r6, sl
    1ad6:	2200      	movs	r2, #0
    1ad8:	2500      	movs	r5, #0
    1ada:	e707      	b.n	18ec <__aeabi_dadd+0x90>
    1adc:	0028      	movs	r0, r5
    1ade:	f001 fa55 	bl	2f8c <__clzsi2>
    1ae2:	3020      	adds	r0, #32
    1ae4:	0003      	movs	r3, r0
    1ae6:	3b08      	subs	r3, #8
    1ae8:	2b1f      	cmp	r3, #31
    1aea:	dc00      	bgt.n	1aee <__aeabi_dadd+0x292>
    1aec:	e749      	b.n	1982 <__aeabi_dadd+0x126>
    1aee:	002a      	movs	r2, r5
    1af0:	3828      	subs	r0, #40	; 0x28
    1af2:	4082      	lsls	r2, r0
    1af4:	2500      	movs	r5, #0
    1af6:	429c      	cmp	r4, r3
    1af8:	dc00      	bgt.n	1afc <__aeabi_dadd+0x2a0>
    1afa:	e74d      	b.n	1998 <__aeabi_dadd+0x13c>
    1afc:	493f      	ldr	r1, [pc, #252]	; (1bfc <__aeabi_dadd+0x3a0>)
    1afe:	1ae4      	subs	r4, r4, r3
    1b00:	4011      	ands	r1, r2
    1b02:	e6d4      	b.n	18ae <__aeabi_dadd+0x52>
    1b04:	4302      	orrs	r2, r0
    1b06:	1e50      	subs	r0, r2, #1
    1b08:	4182      	sbcs	r2, r0
    1b0a:	b2d3      	uxtb	r3, r2
    1b0c:	2200      	movs	r2, #0
    1b0e:	e722      	b.n	1956 <__aeabi_dadd+0xfa>
    1b10:	2b00      	cmp	r3, #0
    1b12:	d000      	beq.n	1b16 <__aeabi_dadd+0x2ba>
    1b14:	e0f3      	b.n	1cfe <__aeabi_dadd+0x4a2>
    1b16:	1c63      	adds	r3, r4, #1
    1b18:	469c      	mov	ip, r3
    1b1a:	055b      	lsls	r3, r3, #21
    1b1c:	0d5b      	lsrs	r3, r3, #21
    1b1e:	2b01      	cmp	r3, #1
    1b20:	dc00      	bgt.n	1b24 <__aeabi_dadd+0x2c8>
    1b22:	e09f      	b.n	1c64 <__aeabi_dadd+0x408>
    1b24:	4b34      	ldr	r3, [pc, #208]	; (1bf8 <__aeabi_dadd+0x39c>)
    1b26:	459c      	cmp	ip, r3
    1b28:	d100      	bne.n	1b2c <__aeabi_dadd+0x2d0>
    1b2a:	e0c3      	b.n	1cb4 <__aeabi_dadd+0x458>
    1b2c:	18aa      	adds	r2, r5, r2
    1b2e:	1809      	adds	r1, r1, r0
    1b30:	42aa      	cmp	r2, r5
    1b32:	4180      	sbcs	r0, r0
    1b34:	4240      	negs	r0, r0
    1b36:	1841      	adds	r1, r0, r1
    1b38:	07cd      	lsls	r5, r1, #31
    1b3a:	0852      	lsrs	r2, r2, #1
    1b3c:	4315      	orrs	r5, r2
    1b3e:	0849      	lsrs	r1, r1, #1
    1b40:	4664      	mov	r4, ip
    1b42:	e6b4      	b.n	18ae <__aeabi_dadd+0x52>
    1b44:	4b2c      	ldr	r3, [pc, #176]	; (1bf8 <__aeabi_dadd+0x39c>)
    1b46:	429c      	cmp	r4, r3
    1b48:	d000      	beq.n	1b4c <__aeabi_dadd+0x2f0>
    1b4a:	e6ec      	b.n	1926 <__aeabi_dadd+0xca>
    1b4c:	e6af      	b.n	18ae <__aeabi_dadd+0x52>
    1b4e:	0011      	movs	r1, r2
    1b50:	3c1f      	subs	r4, #31
    1b52:	40e1      	lsrs	r1, r4
    1b54:	000c      	movs	r4, r1
    1b56:	2b20      	cmp	r3, #32
    1b58:	d100      	bne.n	1b5c <__aeabi_dadd+0x300>
    1b5a:	e07f      	b.n	1c5c <__aeabi_dadd+0x400>
    1b5c:	2140      	movs	r1, #64	; 0x40
    1b5e:	1acb      	subs	r3, r1, r3
    1b60:	409a      	lsls	r2, r3
    1b62:	4315      	orrs	r5, r2
    1b64:	1e6a      	subs	r2, r5, #1
    1b66:	4195      	sbcs	r5, r2
    1b68:	2100      	movs	r1, #0
    1b6a:	4325      	orrs	r5, r4
    1b6c:	2400      	movs	r4, #0
    1b6e:	e72d      	b.n	19cc <__aeabi_dadd+0x170>
    1b70:	0033      	movs	r3, r6
    1b72:	0007      	movs	r7, r0
    1b74:	3b20      	subs	r3, #32
    1b76:	40df      	lsrs	r7, r3
    1b78:	003b      	movs	r3, r7
    1b7a:	2e20      	cmp	r6, #32
    1b7c:	d070      	beq.n	1c60 <__aeabi_dadd+0x404>
    1b7e:	2740      	movs	r7, #64	; 0x40
    1b80:	1bbe      	subs	r6, r7, r6
    1b82:	40b0      	lsls	r0, r6
    1b84:	4302      	orrs	r2, r0
    1b86:	1e50      	subs	r0, r2, #1
    1b88:	4182      	sbcs	r2, r0
    1b8a:	4313      	orrs	r3, r2
    1b8c:	2200      	movs	r2, #0
    1b8e:	e6e2      	b.n	1956 <__aeabi_dadd+0xfa>
    1b90:	2c00      	cmp	r4, #0
    1b92:	d04f      	beq.n	1c34 <__aeabi_dadd+0x3d8>
    1b94:	4c18      	ldr	r4, [pc, #96]	; (1bf8 <__aeabi_dadd+0x39c>)
    1b96:	45a4      	cmp	ip, r4
    1b98:	d100      	bne.n	1b9c <__aeabi_dadd+0x340>
    1b9a:	e0ab      	b.n	1cf4 <__aeabi_dadd+0x498>
    1b9c:	2480      	movs	r4, #128	; 0x80
    1b9e:	0424      	lsls	r4, r4, #16
    1ba0:	4276      	negs	r6, r6
    1ba2:	4321      	orrs	r1, r4
    1ba4:	2e38      	cmp	r6, #56	; 0x38
    1ba6:	dd00      	ble.n	1baa <__aeabi_dadd+0x34e>
    1ba8:	e0df      	b.n	1d6a <__aeabi_dadd+0x50e>
    1baa:	2e1f      	cmp	r6, #31
    1bac:	dd00      	ble.n	1bb0 <__aeabi_dadd+0x354>
    1bae:	e143      	b.n	1e38 <__aeabi_dadd+0x5dc>
    1bb0:	2720      	movs	r7, #32
    1bb2:	1bbc      	subs	r4, r7, r6
    1bb4:	46a1      	mov	r9, r4
    1bb6:	000c      	movs	r4, r1
    1bb8:	464f      	mov	r7, r9
    1bba:	40bc      	lsls	r4, r7
    1bbc:	46a0      	mov	r8, r4
    1bbe:	002c      	movs	r4, r5
    1bc0:	4647      	mov	r7, r8
    1bc2:	40f4      	lsrs	r4, r6
    1bc4:	433c      	orrs	r4, r7
    1bc6:	464f      	mov	r7, r9
    1bc8:	40bd      	lsls	r5, r7
    1bca:	1e6f      	subs	r7, r5, #1
    1bcc:	41bd      	sbcs	r5, r7
    1bce:	40f1      	lsrs	r1, r6
    1bd0:	432c      	orrs	r4, r5
    1bd2:	1b15      	subs	r5, r2, r4
    1bd4:	42aa      	cmp	r2, r5
    1bd6:	4192      	sbcs	r2, r2
    1bd8:	1a41      	subs	r1, r0, r1
    1bda:	4252      	negs	r2, r2
    1bdc:	1a89      	subs	r1, r1, r2
    1bde:	4664      	mov	r4, ip
    1be0:	469a      	mov	sl, r3
    1be2:	e6bf      	b.n	1964 <__aeabi_dadd+0x108>
    1be4:	4641      	mov	r1, r8
    1be6:	4645      	mov	r5, r8
    1be8:	4331      	orrs	r1, r6
    1bea:	d000      	beq.n	1bee <__aeabi_dadd+0x392>
    1bec:	e6be      	b.n	196c <__aeabi_dadd+0x110>
    1bee:	2600      	movs	r6, #0
    1bf0:	2400      	movs	r4, #0
    1bf2:	2500      	movs	r5, #0
    1bf4:	e6f2      	b.n	19dc <__aeabi_dadd+0x180>
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	000007ff 	.word	0x000007ff
    1bfc:	ff7fffff 	.word	0xff7fffff
    1c00:	800fffff 	.word	0x800fffff
    1c04:	2b1f      	cmp	r3, #31
    1c06:	dc59      	bgt.n	1cbc <__aeabi_dadd+0x460>
    1c08:	2720      	movs	r7, #32
    1c0a:	1aff      	subs	r7, r7, r3
    1c0c:	46bc      	mov	ip, r7
    1c0e:	0007      	movs	r7, r0
    1c10:	4663      	mov	r3, ip
    1c12:	409f      	lsls	r7, r3
    1c14:	465b      	mov	r3, fp
    1c16:	46b9      	mov	r9, r7
    1c18:	0017      	movs	r7, r2
    1c1a:	40df      	lsrs	r7, r3
    1c1c:	46b8      	mov	r8, r7
    1c1e:	464f      	mov	r7, r9
    1c20:	4643      	mov	r3, r8
    1c22:	431f      	orrs	r7, r3
    1c24:	4663      	mov	r3, ip
    1c26:	409a      	lsls	r2, r3
    1c28:	1e53      	subs	r3, r2, #1
    1c2a:	419a      	sbcs	r2, r3
    1c2c:	465b      	mov	r3, fp
    1c2e:	433a      	orrs	r2, r7
    1c30:	40d8      	lsrs	r0, r3
    1c32:	e6f4      	b.n	1a1e <__aeabi_dadd+0x1c2>
    1c34:	000c      	movs	r4, r1
    1c36:	432c      	orrs	r4, r5
    1c38:	d05c      	beq.n	1cf4 <__aeabi_dadd+0x498>
    1c3a:	43f6      	mvns	r6, r6
    1c3c:	2e00      	cmp	r6, #0
    1c3e:	d155      	bne.n	1cec <__aeabi_dadd+0x490>
    1c40:	1b55      	subs	r5, r2, r5
    1c42:	42aa      	cmp	r2, r5
    1c44:	41a4      	sbcs	r4, r4
    1c46:	1a41      	subs	r1, r0, r1
    1c48:	4264      	negs	r4, r4
    1c4a:	1b09      	subs	r1, r1, r4
    1c4c:	469a      	mov	sl, r3
    1c4e:	4664      	mov	r4, ip
    1c50:	e688      	b.n	1964 <__aeabi_dadd+0x108>
    1c52:	4f96      	ldr	r7, [pc, #600]	; (1eac <__aeabi_dadd+0x650>)
    1c54:	42bc      	cmp	r4, r7
    1c56:	d000      	beq.n	1c5a <__aeabi_dadd+0x3fe>
    1c58:	e6d8      	b.n	1a0c <__aeabi_dadd+0x1b0>
    1c5a:	e628      	b.n	18ae <__aeabi_dadd+0x52>
    1c5c:	2200      	movs	r2, #0
    1c5e:	e780      	b.n	1b62 <__aeabi_dadd+0x306>
    1c60:	2000      	movs	r0, #0
    1c62:	e78f      	b.n	1b84 <__aeabi_dadd+0x328>
    1c64:	000b      	movs	r3, r1
    1c66:	432b      	orrs	r3, r5
    1c68:	2c00      	cmp	r4, #0
    1c6a:	d000      	beq.n	1c6e <__aeabi_dadd+0x412>
    1c6c:	e0c2      	b.n	1df4 <__aeabi_dadd+0x598>
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d100      	bne.n	1c74 <__aeabi_dadd+0x418>
    1c72:	e101      	b.n	1e78 <__aeabi_dadd+0x61c>
    1c74:	0003      	movs	r3, r0
    1c76:	4313      	orrs	r3, r2
    1c78:	d100      	bne.n	1c7c <__aeabi_dadd+0x420>
    1c7a:	e618      	b.n	18ae <__aeabi_dadd+0x52>
    1c7c:	18ab      	adds	r3, r5, r2
    1c7e:	42ab      	cmp	r3, r5
    1c80:	41b6      	sbcs	r6, r6
    1c82:	1809      	adds	r1, r1, r0
    1c84:	4276      	negs	r6, r6
    1c86:	1871      	adds	r1, r6, r1
    1c88:	020a      	lsls	r2, r1, #8
    1c8a:	d400      	bmi.n	1c8e <__aeabi_dadd+0x432>
    1c8c:	e109      	b.n	1ea2 <__aeabi_dadd+0x646>
    1c8e:	4a88      	ldr	r2, [pc, #544]	; (1eb0 <__aeabi_dadd+0x654>)
    1c90:	001d      	movs	r5, r3
    1c92:	4011      	ands	r1, r2
    1c94:	4664      	mov	r4, ip
    1c96:	e60a      	b.n	18ae <__aeabi_dadd+0x52>
    1c98:	2c00      	cmp	r4, #0
    1c9a:	d15b      	bne.n	1d54 <__aeabi_dadd+0x4f8>
    1c9c:	000e      	movs	r6, r1
    1c9e:	432e      	orrs	r6, r5
    1ca0:	d000      	beq.n	1ca4 <__aeabi_dadd+0x448>
    1ca2:	e08a      	b.n	1dba <__aeabi_dadd+0x55e>
    1ca4:	0001      	movs	r1, r0
    1ca6:	4311      	orrs	r1, r2
    1ca8:	d100      	bne.n	1cac <__aeabi_dadd+0x450>
    1caa:	e0c2      	b.n	1e32 <__aeabi_dadd+0x5d6>
    1cac:	0001      	movs	r1, r0
    1cae:	0015      	movs	r5, r2
    1cb0:	469a      	mov	sl, r3
    1cb2:	e5fc      	b.n	18ae <__aeabi_dadd+0x52>
    1cb4:	4664      	mov	r4, ip
    1cb6:	2100      	movs	r1, #0
    1cb8:	2500      	movs	r5, #0
    1cba:	e68f      	b.n	19dc <__aeabi_dadd+0x180>
    1cbc:	2320      	movs	r3, #32
    1cbe:	425b      	negs	r3, r3
    1cc0:	469c      	mov	ip, r3
    1cc2:	44dc      	add	ip, fp
    1cc4:	4663      	mov	r3, ip
    1cc6:	0007      	movs	r7, r0
    1cc8:	40df      	lsrs	r7, r3
    1cca:	465b      	mov	r3, fp
    1ccc:	46bc      	mov	ip, r7
    1cce:	2b20      	cmp	r3, #32
    1cd0:	d100      	bne.n	1cd4 <__aeabi_dadd+0x478>
    1cd2:	e0ac      	b.n	1e2e <__aeabi_dadd+0x5d2>
    1cd4:	2340      	movs	r3, #64	; 0x40
    1cd6:	465f      	mov	r7, fp
    1cd8:	1bdb      	subs	r3, r3, r7
    1cda:	4098      	lsls	r0, r3
    1cdc:	4302      	orrs	r2, r0
    1cde:	1e50      	subs	r0, r2, #1
    1ce0:	4182      	sbcs	r2, r0
    1ce2:	4663      	mov	r3, ip
    1ce4:	4313      	orrs	r3, r2
    1ce6:	001a      	movs	r2, r3
    1ce8:	2000      	movs	r0, #0
    1cea:	e698      	b.n	1a1e <__aeabi_dadd+0x1c2>
    1cec:	4c6f      	ldr	r4, [pc, #444]	; (1eac <__aeabi_dadd+0x650>)
    1cee:	45a4      	cmp	ip, r4
    1cf0:	d000      	beq.n	1cf4 <__aeabi_dadd+0x498>
    1cf2:	e757      	b.n	1ba4 <__aeabi_dadd+0x348>
    1cf4:	0001      	movs	r1, r0
    1cf6:	0015      	movs	r5, r2
    1cf8:	4664      	mov	r4, ip
    1cfa:	469a      	mov	sl, r3
    1cfc:	e5d7      	b.n	18ae <__aeabi_dadd+0x52>
    1cfe:	2c00      	cmp	r4, #0
    1d00:	d139      	bne.n	1d76 <__aeabi_dadd+0x51a>
    1d02:	000c      	movs	r4, r1
    1d04:	432c      	orrs	r4, r5
    1d06:	d06e      	beq.n	1de6 <__aeabi_dadd+0x58a>
    1d08:	43db      	mvns	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d01a      	beq.n	1d44 <__aeabi_dadd+0x4e8>
    1d0e:	4c67      	ldr	r4, [pc, #412]	; (1eac <__aeabi_dadd+0x650>)
    1d10:	45a4      	cmp	ip, r4
    1d12:	d068      	beq.n	1de6 <__aeabi_dadd+0x58a>
    1d14:	2b38      	cmp	r3, #56	; 0x38
    1d16:	dd00      	ble.n	1d1a <__aeabi_dadd+0x4be>
    1d18:	e0a4      	b.n	1e64 <__aeabi_dadd+0x608>
    1d1a:	2b1f      	cmp	r3, #31
    1d1c:	dd00      	ble.n	1d20 <__aeabi_dadd+0x4c4>
    1d1e:	e0ae      	b.n	1e7e <__aeabi_dadd+0x622>
    1d20:	2420      	movs	r4, #32
    1d22:	000f      	movs	r7, r1
    1d24:	1ae4      	subs	r4, r4, r3
    1d26:	40a7      	lsls	r7, r4
    1d28:	46b9      	mov	r9, r7
    1d2a:	002f      	movs	r7, r5
    1d2c:	40df      	lsrs	r7, r3
    1d2e:	46b8      	mov	r8, r7
    1d30:	46a3      	mov	fp, r4
    1d32:	464f      	mov	r7, r9
    1d34:	4644      	mov	r4, r8
    1d36:	4327      	orrs	r7, r4
    1d38:	465c      	mov	r4, fp
    1d3a:	40a5      	lsls	r5, r4
    1d3c:	1e6c      	subs	r4, r5, #1
    1d3e:	41a5      	sbcs	r5, r4
    1d40:	40d9      	lsrs	r1, r3
    1d42:	433d      	orrs	r5, r7
    1d44:	18ad      	adds	r5, r5, r2
    1d46:	4295      	cmp	r5, r2
    1d48:	419b      	sbcs	r3, r3
    1d4a:	1809      	adds	r1, r1, r0
    1d4c:	425b      	negs	r3, r3
    1d4e:	1859      	adds	r1, r3, r1
    1d50:	4664      	mov	r4, ip
    1d52:	e66b      	b.n	1a2c <__aeabi_dadd+0x1d0>
    1d54:	000c      	movs	r4, r1
    1d56:	432c      	orrs	r4, r5
    1d58:	d115      	bne.n	1d86 <__aeabi_dadd+0x52a>
    1d5a:	0001      	movs	r1, r0
    1d5c:	4311      	orrs	r1, r2
    1d5e:	d07b      	beq.n	1e58 <__aeabi_dadd+0x5fc>
    1d60:	0001      	movs	r1, r0
    1d62:	0015      	movs	r5, r2
    1d64:	469a      	mov	sl, r3
    1d66:	4c51      	ldr	r4, [pc, #324]	; (1eac <__aeabi_dadd+0x650>)
    1d68:	e5a1      	b.n	18ae <__aeabi_dadd+0x52>
    1d6a:	430d      	orrs	r5, r1
    1d6c:	1e69      	subs	r1, r5, #1
    1d6e:	418d      	sbcs	r5, r1
    1d70:	2100      	movs	r1, #0
    1d72:	b2ec      	uxtb	r4, r5
    1d74:	e72d      	b.n	1bd2 <__aeabi_dadd+0x376>
    1d76:	4c4d      	ldr	r4, [pc, #308]	; (1eac <__aeabi_dadd+0x650>)
    1d78:	45a4      	cmp	ip, r4
    1d7a:	d034      	beq.n	1de6 <__aeabi_dadd+0x58a>
    1d7c:	2480      	movs	r4, #128	; 0x80
    1d7e:	0424      	lsls	r4, r4, #16
    1d80:	425b      	negs	r3, r3
    1d82:	4321      	orrs	r1, r4
    1d84:	e7c6      	b.n	1d14 <__aeabi_dadd+0x4b8>
    1d86:	0004      	movs	r4, r0
    1d88:	4314      	orrs	r4, r2
    1d8a:	d04e      	beq.n	1e2a <__aeabi_dadd+0x5ce>
    1d8c:	08ed      	lsrs	r5, r5, #3
    1d8e:	074c      	lsls	r4, r1, #29
    1d90:	432c      	orrs	r4, r5
    1d92:	2580      	movs	r5, #128	; 0x80
    1d94:	08c9      	lsrs	r1, r1, #3
    1d96:	032d      	lsls	r5, r5, #12
    1d98:	4229      	tst	r1, r5
    1d9a:	d008      	beq.n	1dae <__aeabi_dadd+0x552>
    1d9c:	08c6      	lsrs	r6, r0, #3
    1d9e:	422e      	tst	r6, r5
    1da0:	d105      	bne.n	1dae <__aeabi_dadd+0x552>
    1da2:	08d2      	lsrs	r2, r2, #3
    1da4:	0741      	lsls	r1, r0, #29
    1da6:	4311      	orrs	r1, r2
    1da8:	000c      	movs	r4, r1
    1daa:	469a      	mov	sl, r3
    1dac:	0031      	movs	r1, r6
    1dae:	0f62      	lsrs	r2, r4, #29
    1db0:	00c9      	lsls	r1, r1, #3
    1db2:	00e5      	lsls	r5, r4, #3
    1db4:	4311      	orrs	r1, r2
    1db6:	4c3d      	ldr	r4, [pc, #244]	; (1eac <__aeabi_dadd+0x650>)
    1db8:	e579      	b.n	18ae <__aeabi_dadd+0x52>
    1dba:	0006      	movs	r6, r0
    1dbc:	4316      	orrs	r6, r2
    1dbe:	d100      	bne.n	1dc2 <__aeabi_dadd+0x566>
    1dc0:	e575      	b.n	18ae <__aeabi_dadd+0x52>
    1dc2:	1aae      	subs	r6, r5, r2
    1dc4:	46b0      	mov	r8, r6
    1dc6:	4545      	cmp	r5, r8
    1dc8:	41bf      	sbcs	r7, r7
    1dca:	1a0e      	subs	r6, r1, r0
    1dcc:	427f      	negs	r7, r7
    1dce:	1bf6      	subs	r6, r6, r7
    1dd0:	0237      	lsls	r7, r6, #8
    1dd2:	d400      	bmi.n	1dd6 <__aeabi_dadd+0x57a>
    1dd4:	e5f4      	b.n	19c0 <__aeabi_dadd+0x164>
    1dd6:	1b55      	subs	r5, r2, r5
    1dd8:	42aa      	cmp	r2, r5
    1dda:	41b6      	sbcs	r6, r6
    1ddc:	1a41      	subs	r1, r0, r1
    1dde:	4276      	negs	r6, r6
    1de0:	1b89      	subs	r1, r1, r6
    1de2:	469a      	mov	sl, r3
    1de4:	e563      	b.n	18ae <__aeabi_dadd+0x52>
    1de6:	0001      	movs	r1, r0
    1de8:	0015      	movs	r5, r2
    1dea:	4664      	mov	r4, ip
    1dec:	e55f      	b.n	18ae <__aeabi_dadd+0x52>
    1dee:	2200      	movs	r2, #0
    1df0:	2500      	movs	r5, #0
    1df2:	e57b      	b.n	18ec <__aeabi_dadd+0x90>
    1df4:	2b00      	cmp	r3, #0
    1df6:	d03b      	beq.n	1e70 <__aeabi_dadd+0x614>
    1df8:	0003      	movs	r3, r0
    1dfa:	4313      	orrs	r3, r2
    1dfc:	d015      	beq.n	1e2a <__aeabi_dadd+0x5ce>
    1dfe:	08ed      	lsrs	r5, r5, #3
    1e00:	074b      	lsls	r3, r1, #29
    1e02:	432b      	orrs	r3, r5
    1e04:	2580      	movs	r5, #128	; 0x80
    1e06:	08c9      	lsrs	r1, r1, #3
    1e08:	032d      	lsls	r5, r5, #12
    1e0a:	4229      	tst	r1, r5
    1e0c:	d007      	beq.n	1e1e <__aeabi_dadd+0x5c2>
    1e0e:	08c4      	lsrs	r4, r0, #3
    1e10:	422c      	tst	r4, r5
    1e12:	d104      	bne.n	1e1e <__aeabi_dadd+0x5c2>
    1e14:	0741      	lsls	r1, r0, #29
    1e16:	000b      	movs	r3, r1
    1e18:	0021      	movs	r1, r4
    1e1a:	08d2      	lsrs	r2, r2, #3
    1e1c:	4313      	orrs	r3, r2
    1e1e:	00c9      	lsls	r1, r1, #3
    1e20:	0f5a      	lsrs	r2, r3, #29
    1e22:	4311      	orrs	r1, r2
    1e24:	00dd      	lsls	r5, r3, #3
    1e26:	4c21      	ldr	r4, [pc, #132]	; (1eac <__aeabi_dadd+0x650>)
    1e28:	e541      	b.n	18ae <__aeabi_dadd+0x52>
    1e2a:	4c20      	ldr	r4, [pc, #128]	; (1eac <__aeabi_dadd+0x650>)
    1e2c:	e53f      	b.n	18ae <__aeabi_dadd+0x52>
    1e2e:	2000      	movs	r0, #0
    1e30:	e754      	b.n	1cdc <__aeabi_dadd+0x480>
    1e32:	2600      	movs	r6, #0
    1e34:	2500      	movs	r5, #0
    1e36:	e5d1      	b.n	19dc <__aeabi_dadd+0x180>
    1e38:	0034      	movs	r4, r6
    1e3a:	000f      	movs	r7, r1
    1e3c:	3c20      	subs	r4, #32
    1e3e:	40e7      	lsrs	r7, r4
    1e40:	003c      	movs	r4, r7
    1e42:	2e20      	cmp	r6, #32
    1e44:	d02b      	beq.n	1e9e <__aeabi_dadd+0x642>
    1e46:	2740      	movs	r7, #64	; 0x40
    1e48:	1bbe      	subs	r6, r7, r6
    1e4a:	40b1      	lsls	r1, r6
    1e4c:	430d      	orrs	r5, r1
    1e4e:	1e69      	subs	r1, r5, #1
    1e50:	418d      	sbcs	r5, r1
    1e52:	2100      	movs	r1, #0
    1e54:	432c      	orrs	r4, r5
    1e56:	e6bc      	b.n	1bd2 <__aeabi_dadd+0x376>
    1e58:	2180      	movs	r1, #128	; 0x80
    1e5a:	2600      	movs	r6, #0
    1e5c:	0309      	lsls	r1, r1, #12
    1e5e:	4c13      	ldr	r4, [pc, #76]	; (1eac <__aeabi_dadd+0x650>)
    1e60:	2500      	movs	r5, #0
    1e62:	e5bb      	b.n	19dc <__aeabi_dadd+0x180>
    1e64:	430d      	orrs	r5, r1
    1e66:	1e69      	subs	r1, r5, #1
    1e68:	418d      	sbcs	r5, r1
    1e6a:	2100      	movs	r1, #0
    1e6c:	b2ed      	uxtb	r5, r5
    1e6e:	e769      	b.n	1d44 <__aeabi_dadd+0x4e8>
    1e70:	0001      	movs	r1, r0
    1e72:	0015      	movs	r5, r2
    1e74:	4c0d      	ldr	r4, [pc, #52]	; (1eac <__aeabi_dadd+0x650>)
    1e76:	e51a      	b.n	18ae <__aeabi_dadd+0x52>
    1e78:	0001      	movs	r1, r0
    1e7a:	0015      	movs	r5, r2
    1e7c:	e517      	b.n	18ae <__aeabi_dadd+0x52>
    1e7e:	001c      	movs	r4, r3
    1e80:	000f      	movs	r7, r1
    1e82:	3c20      	subs	r4, #32
    1e84:	40e7      	lsrs	r7, r4
    1e86:	003c      	movs	r4, r7
    1e88:	2b20      	cmp	r3, #32
    1e8a:	d00c      	beq.n	1ea6 <__aeabi_dadd+0x64a>
    1e8c:	2740      	movs	r7, #64	; 0x40
    1e8e:	1afb      	subs	r3, r7, r3
    1e90:	4099      	lsls	r1, r3
    1e92:	430d      	orrs	r5, r1
    1e94:	1e69      	subs	r1, r5, #1
    1e96:	418d      	sbcs	r5, r1
    1e98:	2100      	movs	r1, #0
    1e9a:	4325      	orrs	r5, r4
    1e9c:	e752      	b.n	1d44 <__aeabi_dadd+0x4e8>
    1e9e:	2100      	movs	r1, #0
    1ea0:	e7d4      	b.n	1e4c <__aeabi_dadd+0x5f0>
    1ea2:	001d      	movs	r5, r3
    1ea4:	e592      	b.n	19cc <__aeabi_dadd+0x170>
    1ea6:	2100      	movs	r1, #0
    1ea8:	e7f3      	b.n	1e92 <__aeabi_dadd+0x636>
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	000007ff 	.word	0x000007ff
    1eb0:	ff7fffff 	.word	0xff7fffff

00001eb4 <__eqdf2>:
    1eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb6:	465f      	mov	r7, fp
    1eb8:	4656      	mov	r6, sl
    1eba:	464d      	mov	r5, r9
    1ebc:	4644      	mov	r4, r8
    1ebe:	b4f0      	push	{r4, r5, r6, r7}
    1ec0:	031f      	lsls	r7, r3, #12
    1ec2:	005c      	lsls	r4, r3, #1
    1ec4:	0fdb      	lsrs	r3, r3, #31
    1ec6:	469a      	mov	sl, r3
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <__eqdf2+0x7c>)
    1eca:	030e      	lsls	r6, r1, #12
    1ecc:	004d      	lsls	r5, r1, #1
    1ece:	0fc9      	lsrs	r1, r1, #31
    1ed0:	4680      	mov	r8, r0
    1ed2:	0b36      	lsrs	r6, r6, #12
    1ed4:	0d6d      	lsrs	r5, r5, #21
    1ed6:	468b      	mov	fp, r1
    1ed8:	4691      	mov	r9, r2
    1eda:	0b3f      	lsrs	r7, r7, #12
    1edc:	0d64      	lsrs	r4, r4, #21
    1ede:	429d      	cmp	r5, r3
    1ee0:	d019      	beq.n	1f16 <__eqdf2+0x62>
    1ee2:	4b13      	ldr	r3, [pc, #76]	; (1f30 <__eqdf2+0x7c>)
    1ee4:	429c      	cmp	r4, r3
    1ee6:	d01b      	beq.n	1f20 <__eqdf2+0x6c>
    1ee8:	2301      	movs	r3, #1
    1eea:	42a5      	cmp	r5, r4
    1eec:	d006      	beq.n	1efc <__eqdf2+0x48>
    1eee:	0018      	movs	r0, r3
    1ef0:	bc3c      	pop	{r2, r3, r4, r5}
    1ef2:	4690      	mov	r8, r2
    1ef4:	4699      	mov	r9, r3
    1ef6:	46a2      	mov	sl, r4
    1ef8:	46ab      	mov	fp, r5
    1efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1efc:	42be      	cmp	r6, r7
    1efe:	d1f6      	bne.n	1eee <__eqdf2+0x3a>
    1f00:	45c8      	cmp	r8, r9
    1f02:	d1f4      	bne.n	1eee <__eqdf2+0x3a>
    1f04:	45d3      	cmp	fp, sl
    1f06:	d010      	beq.n	1f2a <__eqdf2+0x76>
    1f08:	2d00      	cmp	r5, #0
    1f0a:	d1f0      	bne.n	1eee <__eqdf2+0x3a>
    1f0c:	4330      	orrs	r0, r6
    1f0e:	0003      	movs	r3, r0
    1f10:	1e5a      	subs	r2, r3, #1
    1f12:	4193      	sbcs	r3, r2
    1f14:	e7eb      	b.n	1eee <__eqdf2+0x3a>
    1f16:	0031      	movs	r1, r6
    1f18:	2301      	movs	r3, #1
    1f1a:	4301      	orrs	r1, r0
    1f1c:	d1e7      	bne.n	1eee <__eqdf2+0x3a>
    1f1e:	e7e0      	b.n	1ee2 <__eqdf2+0x2e>
    1f20:	433a      	orrs	r2, r7
    1f22:	2301      	movs	r3, #1
    1f24:	2a00      	cmp	r2, #0
    1f26:	d1e2      	bne.n	1eee <__eqdf2+0x3a>
    1f28:	e7de      	b.n	1ee8 <__eqdf2+0x34>
    1f2a:	2300      	movs	r3, #0
    1f2c:	e7df      	b.n	1eee <__eqdf2+0x3a>
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	000007ff 	.word	0x000007ff

00001f34 <__gedf2>:
    1f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f36:	465f      	mov	r7, fp
    1f38:	4644      	mov	r4, r8
    1f3a:	4656      	mov	r6, sl
    1f3c:	464d      	mov	r5, r9
    1f3e:	b4f0      	push	{r4, r5, r6, r7}
    1f40:	031f      	lsls	r7, r3, #12
    1f42:	0b3c      	lsrs	r4, r7, #12
    1f44:	4f2c      	ldr	r7, [pc, #176]	; (1ff8 <__gedf2+0xc4>)
    1f46:	030e      	lsls	r6, r1, #12
    1f48:	004d      	lsls	r5, r1, #1
    1f4a:	46a3      	mov	fp, r4
    1f4c:	005c      	lsls	r4, r3, #1
    1f4e:	4684      	mov	ip, r0
    1f50:	0b36      	lsrs	r6, r6, #12
    1f52:	0d6d      	lsrs	r5, r5, #21
    1f54:	0fc9      	lsrs	r1, r1, #31
    1f56:	4690      	mov	r8, r2
    1f58:	0d64      	lsrs	r4, r4, #21
    1f5a:	0fdb      	lsrs	r3, r3, #31
    1f5c:	42bd      	cmp	r5, r7
    1f5e:	d02b      	beq.n	1fb8 <__gedf2+0x84>
    1f60:	4f25      	ldr	r7, [pc, #148]	; (1ff8 <__gedf2+0xc4>)
    1f62:	42bc      	cmp	r4, r7
    1f64:	d02e      	beq.n	1fc4 <__gedf2+0x90>
    1f66:	2d00      	cmp	r5, #0
    1f68:	d10e      	bne.n	1f88 <__gedf2+0x54>
    1f6a:	4330      	orrs	r0, r6
    1f6c:	0007      	movs	r7, r0
    1f6e:	4681      	mov	r9, r0
    1f70:	4278      	negs	r0, r7
    1f72:	4178      	adcs	r0, r7
    1f74:	2c00      	cmp	r4, #0
    1f76:	d117      	bne.n	1fa8 <__gedf2+0x74>
    1f78:	465f      	mov	r7, fp
    1f7a:	433a      	orrs	r2, r7
    1f7c:	d114      	bne.n	1fa8 <__gedf2+0x74>
    1f7e:	464b      	mov	r3, r9
    1f80:	2000      	movs	r0, #0
    1f82:	2b00      	cmp	r3, #0
    1f84:	d00a      	beq.n	1f9c <__gedf2+0x68>
    1f86:	e006      	b.n	1f96 <__gedf2+0x62>
    1f88:	2c00      	cmp	r4, #0
    1f8a:	d102      	bne.n	1f92 <__gedf2+0x5e>
    1f8c:	4658      	mov	r0, fp
    1f8e:	4302      	orrs	r2, r0
    1f90:	d001      	beq.n	1f96 <__gedf2+0x62>
    1f92:	4299      	cmp	r1, r3
    1f94:	d01a      	beq.n	1fcc <__gedf2+0x98>
    1f96:	2301      	movs	r3, #1
    1f98:	4248      	negs	r0, r1
    1f9a:	4318      	orrs	r0, r3
    1f9c:	bc3c      	pop	{r2, r3, r4, r5}
    1f9e:	4690      	mov	r8, r2
    1fa0:	4699      	mov	r9, r3
    1fa2:	46a2      	mov	sl, r4
    1fa4:	46ab      	mov	fp, r5
    1fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa8:	2800      	cmp	r0, #0
    1faa:	d0f2      	beq.n	1f92 <__gedf2+0x5e>
    1fac:	4258      	negs	r0, r3
    1fae:	4158      	adcs	r0, r3
    1fb0:	2201      	movs	r2, #1
    1fb2:	4240      	negs	r0, r0
    1fb4:	4310      	orrs	r0, r2
    1fb6:	e7f1      	b.n	1f9c <__gedf2+0x68>
    1fb8:	0037      	movs	r7, r6
    1fba:	4307      	orrs	r7, r0
    1fbc:	d0d0      	beq.n	1f60 <__gedf2+0x2c>
    1fbe:	2002      	movs	r0, #2
    1fc0:	4240      	negs	r0, r0
    1fc2:	e7eb      	b.n	1f9c <__gedf2+0x68>
    1fc4:	465f      	mov	r7, fp
    1fc6:	4317      	orrs	r7, r2
    1fc8:	d0cd      	beq.n	1f66 <__gedf2+0x32>
    1fca:	e7f8      	b.n	1fbe <__gedf2+0x8a>
    1fcc:	42a5      	cmp	r5, r4
    1fce:	dce2      	bgt.n	1f96 <__gedf2+0x62>
    1fd0:	db05      	blt.n	1fde <__gedf2+0xaa>
    1fd2:	455e      	cmp	r6, fp
    1fd4:	d8df      	bhi.n	1f96 <__gedf2+0x62>
    1fd6:	d008      	beq.n	1fea <__gedf2+0xb6>
    1fd8:	2000      	movs	r0, #0
    1fda:	455e      	cmp	r6, fp
    1fdc:	d2de      	bcs.n	1f9c <__gedf2+0x68>
    1fde:	4248      	negs	r0, r1
    1fe0:	4148      	adcs	r0, r1
    1fe2:	2301      	movs	r3, #1
    1fe4:	4240      	negs	r0, r0
    1fe6:	4318      	orrs	r0, r3
    1fe8:	e7d8      	b.n	1f9c <__gedf2+0x68>
    1fea:	45c4      	cmp	ip, r8
    1fec:	d8d3      	bhi.n	1f96 <__gedf2+0x62>
    1fee:	2000      	movs	r0, #0
    1ff0:	45c4      	cmp	ip, r8
    1ff2:	d3f4      	bcc.n	1fde <__gedf2+0xaa>
    1ff4:	e7d2      	b.n	1f9c <__gedf2+0x68>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	000007ff 	.word	0x000007ff

00001ffc <__ledf2>:
    1ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffe:	465f      	mov	r7, fp
    2000:	464d      	mov	r5, r9
    2002:	4644      	mov	r4, r8
    2004:	4656      	mov	r6, sl
    2006:	b4f0      	push	{r4, r5, r6, r7}
    2008:	031c      	lsls	r4, r3, #12
    200a:	0b24      	lsrs	r4, r4, #12
    200c:	46a4      	mov	ip, r4
    200e:	4c2f      	ldr	r4, [pc, #188]	; (20cc <STACK_SIZE+0xcc>)
    2010:	030f      	lsls	r7, r1, #12
    2012:	004d      	lsls	r5, r1, #1
    2014:	005e      	lsls	r6, r3, #1
    2016:	0fc9      	lsrs	r1, r1, #31
    2018:	4680      	mov	r8, r0
    201a:	0b3f      	lsrs	r7, r7, #12
    201c:	0d6d      	lsrs	r5, r5, #21
    201e:	468b      	mov	fp, r1
    2020:	4691      	mov	r9, r2
    2022:	0d76      	lsrs	r6, r6, #21
    2024:	0fdb      	lsrs	r3, r3, #31
    2026:	42a5      	cmp	r5, r4
    2028:	d020      	beq.n	206c <STACK_SIZE+0x6c>
    202a:	4c28      	ldr	r4, [pc, #160]	; (20cc <STACK_SIZE+0xcc>)
    202c:	42a6      	cmp	r6, r4
    202e:	d022      	beq.n	2076 <STACK_SIZE+0x76>
    2030:	2d00      	cmp	r5, #0
    2032:	d112      	bne.n	205a <STACK_SIZE+0x5a>
    2034:	4338      	orrs	r0, r7
    2036:	4244      	negs	r4, r0
    2038:	4144      	adcs	r4, r0
    203a:	2e00      	cmp	r6, #0
    203c:	d020      	beq.n	2080 <STACK_SIZE+0x80>
    203e:	2c00      	cmp	r4, #0
    2040:	d00d      	beq.n	205e <STACK_SIZE+0x5e>
    2042:	425c      	negs	r4, r3
    2044:	4163      	adcs	r3, r4
    2046:	2401      	movs	r4, #1
    2048:	425b      	negs	r3, r3
    204a:	431c      	orrs	r4, r3
    204c:	0020      	movs	r0, r4
    204e:	bc3c      	pop	{r2, r3, r4, r5}
    2050:	4690      	mov	r8, r2
    2052:	4699      	mov	r9, r3
    2054:	46a2      	mov	sl, r4
    2056:	46ab      	mov	fp, r5
    2058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    205a:	2e00      	cmp	r6, #0
    205c:	d017      	beq.n	208e <STACK_SIZE+0x8e>
    205e:	455b      	cmp	r3, fp
    2060:	d019      	beq.n	2096 <STACK_SIZE+0x96>
    2062:	465b      	mov	r3, fp
    2064:	425c      	negs	r4, r3
    2066:	2301      	movs	r3, #1
    2068:	431c      	orrs	r4, r3
    206a:	e7ef      	b.n	204c <STACK_SIZE+0x4c>
    206c:	0039      	movs	r1, r7
    206e:	2402      	movs	r4, #2
    2070:	4301      	orrs	r1, r0
    2072:	d1eb      	bne.n	204c <STACK_SIZE+0x4c>
    2074:	e7d9      	b.n	202a <STACK_SIZE+0x2a>
    2076:	4661      	mov	r1, ip
    2078:	2402      	movs	r4, #2
    207a:	4311      	orrs	r1, r2
    207c:	d1e6      	bne.n	204c <STACK_SIZE+0x4c>
    207e:	e7d7      	b.n	2030 <STACK_SIZE+0x30>
    2080:	4661      	mov	r1, ip
    2082:	430a      	orrs	r2, r1
    2084:	d1db      	bne.n	203e <STACK_SIZE+0x3e>
    2086:	2400      	movs	r4, #0
    2088:	2800      	cmp	r0, #0
    208a:	d0df      	beq.n	204c <STACK_SIZE+0x4c>
    208c:	e7e9      	b.n	2062 <STACK_SIZE+0x62>
    208e:	4661      	mov	r1, ip
    2090:	430a      	orrs	r2, r1
    2092:	d1e4      	bne.n	205e <STACK_SIZE+0x5e>
    2094:	e7e5      	b.n	2062 <STACK_SIZE+0x62>
    2096:	42b5      	cmp	r5, r6
    2098:	dd03      	ble.n	20a2 <STACK_SIZE+0xa2>
    209a:	2201      	movs	r2, #1
    209c:	425c      	negs	r4, r3
    209e:	4314      	orrs	r4, r2
    20a0:	e7d4      	b.n	204c <STACK_SIZE+0x4c>
    20a2:	42b5      	cmp	r5, r6
    20a4:	dbcd      	blt.n	2042 <STACK_SIZE+0x42>
    20a6:	4567      	cmp	r7, ip
    20a8:	d8db      	bhi.n	2062 <STACK_SIZE+0x62>
    20aa:	d009      	beq.n	20c0 <STACK_SIZE+0xc0>
    20ac:	2400      	movs	r4, #0
    20ae:	4567      	cmp	r7, ip
    20b0:	d2cc      	bcs.n	204c <STACK_SIZE+0x4c>
    20b2:	4659      	mov	r1, fp
    20b4:	424c      	negs	r4, r1
    20b6:	4161      	adcs	r1, r4
    20b8:	2401      	movs	r4, #1
    20ba:	4249      	negs	r1, r1
    20bc:	430c      	orrs	r4, r1
    20be:	e7c5      	b.n	204c <STACK_SIZE+0x4c>
    20c0:	45c8      	cmp	r8, r9
    20c2:	d8ce      	bhi.n	2062 <STACK_SIZE+0x62>
    20c4:	2400      	movs	r4, #0
    20c6:	45c8      	cmp	r8, r9
    20c8:	d3f3      	bcc.n	20b2 <STACK_SIZE+0xb2>
    20ca:	e7bf      	b.n	204c <STACK_SIZE+0x4c>
    20cc:	000007ff 	.word	0x000007ff

000020d0 <__aeabi_dmul>:
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	465f      	mov	r7, fp
    20d4:	4656      	mov	r6, sl
    20d6:	464d      	mov	r5, r9
    20d8:	4644      	mov	r4, r8
    20da:	b4f0      	push	{r4, r5, r6, r7}
    20dc:	030d      	lsls	r5, r1, #12
    20de:	4699      	mov	r9, r3
    20e0:	004e      	lsls	r6, r1, #1
    20e2:	0b2b      	lsrs	r3, r5, #12
    20e4:	b087      	sub	sp, #28
    20e6:	0007      	movs	r7, r0
    20e8:	4692      	mov	sl, r2
    20ea:	4680      	mov	r8, r0
    20ec:	469b      	mov	fp, r3
    20ee:	0d76      	lsrs	r6, r6, #21
    20f0:	0fcc      	lsrs	r4, r1, #31
    20f2:	2e00      	cmp	r6, #0
    20f4:	d069      	beq.n	21ca <__aeabi_dmul+0xfa>
    20f6:	4b6d      	ldr	r3, [pc, #436]	; (22ac <__aeabi_dmul+0x1dc>)
    20f8:	429e      	cmp	r6, r3
    20fa:	d035      	beq.n	2168 <__aeabi_dmul+0x98>
    20fc:	465b      	mov	r3, fp
    20fe:	2280      	movs	r2, #128	; 0x80
    2100:	00dd      	lsls	r5, r3, #3
    2102:	0412      	lsls	r2, r2, #16
    2104:	0f43      	lsrs	r3, r0, #29
    2106:	4313      	orrs	r3, r2
    2108:	432b      	orrs	r3, r5
    210a:	469b      	mov	fp, r3
    210c:	00c3      	lsls	r3, r0, #3
    210e:	4698      	mov	r8, r3
    2110:	4b67      	ldr	r3, [pc, #412]	; (22b0 <__aeabi_dmul+0x1e0>)
    2112:	2700      	movs	r7, #0
    2114:	469c      	mov	ip, r3
    2116:	2300      	movs	r3, #0
    2118:	4466      	add	r6, ip
    211a:	9301      	str	r3, [sp, #4]
    211c:	464a      	mov	r2, r9
    211e:	0315      	lsls	r5, r2, #12
    2120:	0050      	lsls	r0, r2, #1
    2122:	0fd2      	lsrs	r2, r2, #31
    2124:	4653      	mov	r3, sl
    2126:	0b2d      	lsrs	r5, r5, #12
    2128:	0d40      	lsrs	r0, r0, #21
    212a:	4691      	mov	r9, r2
    212c:	d100      	bne.n	2130 <__aeabi_dmul+0x60>
    212e:	e076      	b.n	221e <__aeabi_dmul+0x14e>
    2130:	4a5e      	ldr	r2, [pc, #376]	; (22ac <__aeabi_dmul+0x1dc>)
    2132:	4290      	cmp	r0, r2
    2134:	d06c      	beq.n	2210 <__aeabi_dmul+0x140>
    2136:	2280      	movs	r2, #128	; 0x80
    2138:	0f5b      	lsrs	r3, r3, #29
    213a:	0412      	lsls	r2, r2, #16
    213c:	4313      	orrs	r3, r2
    213e:	4a5c      	ldr	r2, [pc, #368]	; (22b0 <__aeabi_dmul+0x1e0>)
    2140:	00ed      	lsls	r5, r5, #3
    2142:	4694      	mov	ip, r2
    2144:	431d      	orrs	r5, r3
    2146:	4653      	mov	r3, sl
    2148:	2200      	movs	r2, #0
    214a:	00db      	lsls	r3, r3, #3
    214c:	4460      	add	r0, ip
    214e:	4649      	mov	r1, r9
    2150:	1836      	adds	r6, r6, r0
    2152:	1c70      	adds	r0, r6, #1
    2154:	4061      	eors	r1, r4
    2156:	9002      	str	r0, [sp, #8]
    2158:	4317      	orrs	r7, r2
    215a:	2f0f      	cmp	r7, #15
    215c:	d900      	bls.n	2160 <__aeabi_dmul+0x90>
    215e:	e0af      	b.n	22c0 <__aeabi_dmul+0x1f0>
    2160:	4854      	ldr	r0, [pc, #336]	; (22b4 <__aeabi_dmul+0x1e4>)
    2162:	00bf      	lsls	r7, r7, #2
    2164:	59c7      	ldr	r7, [r0, r7]
    2166:	46bf      	mov	pc, r7
    2168:	465b      	mov	r3, fp
    216a:	431f      	orrs	r7, r3
    216c:	d000      	beq.n	2170 <__aeabi_dmul+0xa0>
    216e:	e088      	b.n	2282 <__aeabi_dmul+0x1b2>
    2170:	2300      	movs	r3, #0
    2172:	469b      	mov	fp, r3
    2174:	4698      	mov	r8, r3
    2176:	3302      	adds	r3, #2
    2178:	2708      	movs	r7, #8
    217a:	9301      	str	r3, [sp, #4]
    217c:	e7ce      	b.n	211c <__aeabi_dmul+0x4c>
    217e:	4649      	mov	r1, r9
    2180:	2a02      	cmp	r2, #2
    2182:	d06a      	beq.n	225a <__aeabi_dmul+0x18a>
    2184:	2a03      	cmp	r2, #3
    2186:	d100      	bne.n	218a <__aeabi_dmul+0xba>
    2188:	e209      	b.n	259e <__aeabi_dmul+0x4ce>
    218a:	2a01      	cmp	r2, #1
    218c:	d000      	beq.n	2190 <__aeabi_dmul+0xc0>
    218e:	e1bb      	b.n	2508 <__aeabi_dmul+0x438>
    2190:	4011      	ands	r1, r2
    2192:	2200      	movs	r2, #0
    2194:	2300      	movs	r3, #0
    2196:	2500      	movs	r5, #0
    2198:	4690      	mov	r8, r2
    219a:	b2cc      	uxtb	r4, r1
    219c:	2100      	movs	r1, #0
    219e:	032d      	lsls	r5, r5, #12
    21a0:	0d0a      	lsrs	r2, r1, #20
    21a2:	0512      	lsls	r2, r2, #20
    21a4:	0b2d      	lsrs	r5, r5, #12
    21a6:	4315      	orrs	r5, r2
    21a8:	4a43      	ldr	r2, [pc, #268]	; (22b8 <__aeabi_dmul+0x1e8>)
    21aa:	051b      	lsls	r3, r3, #20
    21ac:	4015      	ands	r5, r2
    21ae:	431d      	orrs	r5, r3
    21b0:	006d      	lsls	r5, r5, #1
    21b2:	07e4      	lsls	r4, r4, #31
    21b4:	086d      	lsrs	r5, r5, #1
    21b6:	4325      	orrs	r5, r4
    21b8:	4640      	mov	r0, r8
    21ba:	0029      	movs	r1, r5
    21bc:	b007      	add	sp, #28
    21be:	bc3c      	pop	{r2, r3, r4, r5}
    21c0:	4690      	mov	r8, r2
    21c2:	4699      	mov	r9, r3
    21c4:	46a2      	mov	sl, r4
    21c6:	46ab      	mov	fp, r5
    21c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ca:	4303      	orrs	r3, r0
    21cc:	d052      	beq.n	2274 <__aeabi_dmul+0x1a4>
    21ce:	465b      	mov	r3, fp
    21d0:	2b00      	cmp	r3, #0
    21d2:	d100      	bne.n	21d6 <__aeabi_dmul+0x106>
    21d4:	e18a      	b.n	24ec <__aeabi_dmul+0x41c>
    21d6:	4658      	mov	r0, fp
    21d8:	f000 fed8 	bl	2f8c <__clzsi2>
    21dc:	0003      	movs	r3, r0
    21de:	3b0b      	subs	r3, #11
    21e0:	2b1c      	cmp	r3, #28
    21e2:	dd00      	ble.n	21e6 <__aeabi_dmul+0x116>
    21e4:	e17b      	b.n	24de <__aeabi_dmul+0x40e>
    21e6:	221d      	movs	r2, #29
    21e8:	1ad3      	subs	r3, r2, r3
    21ea:	003a      	movs	r2, r7
    21ec:	0001      	movs	r1, r0
    21ee:	465d      	mov	r5, fp
    21f0:	40da      	lsrs	r2, r3
    21f2:	3908      	subs	r1, #8
    21f4:	408d      	lsls	r5, r1
    21f6:	0013      	movs	r3, r2
    21f8:	408f      	lsls	r7, r1
    21fa:	432b      	orrs	r3, r5
    21fc:	469b      	mov	fp, r3
    21fe:	46b8      	mov	r8, r7
    2200:	4b2e      	ldr	r3, [pc, #184]	; (22bc <__aeabi_dmul+0x1ec>)
    2202:	2700      	movs	r7, #0
    2204:	469c      	mov	ip, r3
    2206:	2300      	movs	r3, #0
    2208:	4460      	add	r0, ip
    220a:	4246      	negs	r6, r0
    220c:	9301      	str	r3, [sp, #4]
    220e:	e785      	b.n	211c <__aeabi_dmul+0x4c>
    2210:	4652      	mov	r2, sl
    2212:	432a      	orrs	r2, r5
    2214:	d12c      	bne.n	2270 <__aeabi_dmul+0x1a0>
    2216:	2500      	movs	r5, #0
    2218:	2300      	movs	r3, #0
    221a:	2202      	movs	r2, #2
    221c:	e797      	b.n	214e <__aeabi_dmul+0x7e>
    221e:	4652      	mov	r2, sl
    2220:	432a      	orrs	r2, r5
    2222:	d021      	beq.n	2268 <__aeabi_dmul+0x198>
    2224:	2d00      	cmp	r5, #0
    2226:	d100      	bne.n	222a <__aeabi_dmul+0x15a>
    2228:	e154      	b.n	24d4 <__aeabi_dmul+0x404>
    222a:	0028      	movs	r0, r5
    222c:	f000 feae 	bl	2f8c <__clzsi2>
    2230:	0003      	movs	r3, r0
    2232:	3b0b      	subs	r3, #11
    2234:	2b1c      	cmp	r3, #28
    2236:	dd00      	ble.n	223a <__aeabi_dmul+0x16a>
    2238:	e146      	b.n	24c8 <__aeabi_dmul+0x3f8>
    223a:	211d      	movs	r1, #29
    223c:	1acb      	subs	r3, r1, r3
    223e:	4651      	mov	r1, sl
    2240:	0002      	movs	r2, r0
    2242:	40d9      	lsrs	r1, r3
    2244:	4653      	mov	r3, sl
    2246:	3a08      	subs	r2, #8
    2248:	4095      	lsls	r5, r2
    224a:	4093      	lsls	r3, r2
    224c:	430d      	orrs	r5, r1
    224e:	4a1b      	ldr	r2, [pc, #108]	; (22bc <__aeabi_dmul+0x1ec>)
    2250:	4694      	mov	ip, r2
    2252:	4460      	add	r0, ip
    2254:	4240      	negs	r0, r0
    2256:	2200      	movs	r2, #0
    2258:	e779      	b.n	214e <__aeabi_dmul+0x7e>
    225a:	2401      	movs	r4, #1
    225c:	2200      	movs	r2, #0
    225e:	400c      	ands	r4, r1
    2260:	4b12      	ldr	r3, [pc, #72]	; (22ac <__aeabi_dmul+0x1dc>)
    2262:	2500      	movs	r5, #0
    2264:	4690      	mov	r8, r2
    2266:	e799      	b.n	219c <__aeabi_dmul+0xcc>
    2268:	2500      	movs	r5, #0
    226a:	2300      	movs	r3, #0
    226c:	2201      	movs	r2, #1
    226e:	e76e      	b.n	214e <__aeabi_dmul+0x7e>
    2270:	2203      	movs	r2, #3
    2272:	e76c      	b.n	214e <__aeabi_dmul+0x7e>
    2274:	2300      	movs	r3, #0
    2276:	469b      	mov	fp, r3
    2278:	4698      	mov	r8, r3
    227a:	3301      	adds	r3, #1
    227c:	2704      	movs	r7, #4
    227e:	9301      	str	r3, [sp, #4]
    2280:	e74c      	b.n	211c <__aeabi_dmul+0x4c>
    2282:	2303      	movs	r3, #3
    2284:	270c      	movs	r7, #12
    2286:	9301      	str	r3, [sp, #4]
    2288:	e748      	b.n	211c <__aeabi_dmul+0x4c>
    228a:	2300      	movs	r3, #0
    228c:	2580      	movs	r5, #128	; 0x80
    228e:	4698      	mov	r8, r3
    2290:	2400      	movs	r4, #0
    2292:	032d      	lsls	r5, r5, #12
    2294:	4b05      	ldr	r3, [pc, #20]	; (22ac <__aeabi_dmul+0x1dc>)
    2296:	e781      	b.n	219c <__aeabi_dmul+0xcc>
    2298:	465d      	mov	r5, fp
    229a:	4643      	mov	r3, r8
    229c:	9a01      	ldr	r2, [sp, #4]
    229e:	e76f      	b.n	2180 <__aeabi_dmul+0xb0>
    22a0:	465d      	mov	r5, fp
    22a2:	4643      	mov	r3, r8
    22a4:	0021      	movs	r1, r4
    22a6:	9a01      	ldr	r2, [sp, #4]
    22a8:	e76a      	b.n	2180 <__aeabi_dmul+0xb0>
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	000007ff 	.word	0x000007ff
    22b0:	fffffc01 	.word	0xfffffc01
    22b4:	00003338 	.word	0x00003338
    22b8:	800fffff 	.word	0x800fffff
    22bc:	000003f3 	.word	0x000003f3
    22c0:	4642      	mov	r2, r8
    22c2:	0c12      	lsrs	r2, r2, #16
    22c4:	4691      	mov	r9, r2
    22c6:	0c1a      	lsrs	r2, r3, #16
    22c8:	4694      	mov	ip, r2
    22ca:	4642      	mov	r2, r8
    22cc:	0417      	lsls	r7, r2, #16
    22ce:	464a      	mov	r2, r9
    22d0:	041b      	lsls	r3, r3, #16
    22d2:	0c1b      	lsrs	r3, r3, #16
    22d4:	435a      	muls	r2, r3
    22d6:	4660      	mov	r0, ip
    22d8:	4690      	mov	r8, r2
    22da:	464a      	mov	r2, r9
    22dc:	4342      	muls	r2, r0
    22de:	0010      	movs	r0, r2
    22e0:	9203      	str	r2, [sp, #12]
    22e2:	4662      	mov	r2, ip
    22e4:	001c      	movs	r4, r3
    22e6:	0c3f      	lsrs	r7, r7, #16
    22e8:	437a      	muls	r2, r7
    22ea:	437c      	muls	r4, r7
    22ec:	4442      	add	r2, r8
    22ee:	9201      	str	r2, [sp, #4]
    22f0:	0c22      	lsrs	r2, r4, #16
    22f2:	4692      	mov	sl, r2
    22f4:	9a01      	ldr	r2, [sp, #4]
    22f6:	4452      	add	r2, sl
    22f8:	4590      	cmp	r8, r2
    22fa:	d906      	bls.n	230a <__aeabi_dmul+0x23a>
    22fc:	4682      	mov	sl, r0
    22fe:	2080      	movs	r0, #128	; 0x80
    2300:	0240      	lsls	r0, r0, #9
    2302:	4680      	mov	r8, r0
    2304:	44c2      	add	sl, r8
    2306:	4650      	mov	r0, sl
    2308:	9003      	str	r0, [sp, #12]
    230a:	0c10      	lsrs	r0, r2, #16
    230c:	9004      	str	r0, [sp, #16]
    230e:	4648      	mov	r0, r9
    2310:	0424      	lsls	r4, r4, #16
    2312:	0c24      	lsrs	r4, r4, #16
    2314:	0412      	lsls	r2, r2, #16
    2316:	1912      	adds	r2, r2, r4
    2318:	9205      	str	r2, [sp, #20]
    231a:	0c2a      	lsrs	r2, r5, #16
    231c:	042d      	lsls	r5, r5, #16
    231e:	0c2d      	lsrs	r5, r5, #16
    2320:	4368      	muls	r0, r5
    2322:	002c      	movs	r4, r5
    2324:	4682      	mov	sl, r0
    2326:	4648      	mov	r0, r9
    2328:	437c      	muls	r4, r7
    232a:	4350      	muls	r0, r2
    232c:	4681      	mov	r9, r0
    232e:	0c20      	lsrs	r0, r4, #16
    2330:	4680      	mov	r8, r0
    2332:	4357      	muls	r7, r2
    2334:	4457      	add	r7, sl
    2336:	4447      	add	r7, r8
    2338:	45ba      	cmp	sl, r7
    233a:	d903      	bls.n	2344 <__aeabi_dmul+0x274>
    233c:	2080      	movs	r0, #128	; 0x80
    233e:	0240      	lsls	r0, r0, #9
    2340:	4680      	mov	r8, r0
    2342:	44c1      	add	r9, r8
    2344:	0c38      	lsrs	r0, r7, #16
    2346:	043f      	lsls	r7, r7, #16
    2348:	46b8      	mov	r8, r7
    234a:	4448      	add	r0, r9
    234c:	0424      	lsls	r4, r4, #16
    234e:	0c24      	lsrs	r4, r4, #16
    2350:	9001      	str	r0, [sp, #4]
    2352:	9804      	ldr	r0, [sp, #16]
    2354:	44a0      	add	r8, r4
    2356:	4440      	add	r0, r8
    2358:	9004      	str	r0, [sp, #16]
    235a:	4658      	mov	r0, fp
    235c:	0c00      	lsrs	r0, r0, #16
    235e:	4681      	mov	r9, r0
    2360:	4658      	mov	r0, fp
    2362:	0404      	lsls	r4, r0, #16
    2364:	0c20      	lsrs	r0, r4, #16
    2366:	4682      	mov	sl, r0
    2368:	0007      	movs	r7, r0
    236a:	4648      	mov	r0, r9
    236c:	435f      	muls	r7, r3
    236e:	464c      	mov	r4, r9
    2370:	4343      	muls	r3, r0
    2372:	4660      	mov	r0, ip
    2374:	4360      	muls	r0, r4
    2376:	4664      	mov	r4, ip
    2378:	4683      	mov	fp, r0
    237a:	4650      	mov	r0, sl
    237c:	4344      	muls	r4, r0
    237e:	0c38      	lsrs	r0, r7, #16
    2380:	4684      	mov	ip, r0
    2382:	18e4      	adds	r4, r4, r3
    2384:	4464      	add	r4, ip
    2386:	42a3      	cmp	r3, r4
    2388:	d903      	bls.n	2392 <__aeabi_dmul+0x2c2>
    238a:	2380      	movs	r3, #128	; 0x80
    238c:	025b      	lsls	r3, r3, #9
    238e:	469c      	mov	ip, r3
    2390:	44e3      	add	fp, ip
    2392:	4648      	mov	r0, r9
    2394:	043f      	lsls	r7, r7, #16
    2396:	0c23      	lsrs	r3, r4, #16
    2398:	0c3f      	lsrs	r7, r7, #16
    239a:	0424      	lsls	r4, r4, #16
    239c:	19e4      	adds	r4, r4, r7
    239e:	4657      	mov	r7, sl
    23a0:	4368      	muls	r0, r5
    23a2:	436f      	muls	r7, r5
    23a4:	4684      	mov	ip, r0
    23a6:	464d      	mov	r5, r9
    23a8:	4650      	mov	r0, sl
    23aa:	4355      	muls	r5, r2
    23ac:	4342      	muls	r2, r0
    23ae:	0c38      	lsrs	r0, r7, #16
    23b0:	4681      	mov	r9, r0
    23b2:	4462      	add	r2, ip
    23b4:	444a      	add	r2, r9
    23b6:	445b      	add	r3, fp
    23b8:	4594      	cmp	ip, r2
    23ba:	d903      	bls.n	23c4 <__aeabi_dmul+0x2f4>
    23bc:	2080      	movs	r0, #128	; 0x80
    23be:	0240      	lsls	r0, r0, #9
    23c0:	4684      	mov	ip, r0
    23c2:	4465      	add	r5, ip
    23c4:	9803      	ldr	r0, [sp, #12]
    23c6:	043f      	lsls	r7, r7, #16
    23c8:	4683      	mov	fp, r0
    23ca:	9804      	ldr	r0, [sp, #16]
    23cc:	0c3f      	lsrs	r7, r7, #16
    23ce:	4684      	mov	ip, r0
    23d0:	44e3      	add	fp, ip
    23d2:	45c3      	cmp	fp, r8
    23d4:	4180      	sbcs	r0, r0
    23d6:	4240      	negs	r0, r0
    23d8:	4682      	mov	sl, r0
    23da:	0410      	lsls	r0, r2, #16
    23dc:	4684      	mov	ip, r0
    23de:	9801      	ldr	r0, [sp, #4]
    23e0:	4467      	add	r7, ip
    23e2:	4684      	mov	ip, r0
    23e4:	4467      	add	r7, ip
    23e6:	44a3      	add	fp, r4
    23e8:	46bc      	mov	ip, r7
    23ea:	45a3      	cmp	fp, r4
    23ec:	41a4      	sbcs	r4, r4
    23ee:	4699      	mov	r9, r3
    23f0:	44d4      	add	ip, sl
    23f2:	4264      	negs	r4, r4
    23f4:	4287      	cmp	r7, r0
    23f6:	41bf      	sbcs	r7, r7
    23f8:	45d4      	cmp	ip, sl
    23fa:	4180      	sbcs	r0, r0
    23fc:	44e1      	add	r9, ip
    23fe:	46a0      	mov	r8, r4
    2400:	4599      	cmp	r9, r3
    2402:	419b      	sbcs	r3, r3
    2404:	427f      	negs	r7, r7
    2406:	4240      	negs	r0, r0
    2408:	44c8      	add	r8, r9
    240a:	4307      	orrs	r7, r0
    240c:	0c12      	lsrs	r2, r2, #16
    240e:	18ba      	adds	r2, r7, r2
    2410:	45a0      	cmp	r8, r4
    2412:	41a4      	sbcs	r4, r4
    2414:	425f      	negs	r7, r3
    2416:	003b      	movs	r3, r7
    2418:	4264      	negs	r4, r4
    241a:	4323      	orrs	r3, r4
    241c:	18d7      	adds	r7, r2, r3
    241e:	4643      	mov	r3, r8
    2420:	197d      	adds	r5, r7, r5
    2422:	0ddb      	lsrs	r3, r3, #23
    2424:	026d      	lsls	r5, r5, #9
    2426:	431d      	orrs	r5, r3
    2428:	465b      	mov	r3, fp
    242a:	025a      	lsls	r2, r3, #9
    242c:	9b05      	ldr	r3, [sp, #20]
    242e:	431a      	orrs	r2, r3
    2430:	1e53      	subs	r3, r2, #1
    2432:	419a      	sbcs	r2, r3
    2434:	465b      	mov	r3, fp
    2436:	0ddb      	lsrs	r3, r3, #23
    2438:	431a      	orrs	r2, r3
    243a:	4643      	mov	r3, r8
    243c:	025b      	lsls	r3, r3, #9
    243e:	4313      	orrs	r3, r2
    2440:	01ea      	lsls	r2, r5, #7
    2442:	d507      	bpl.n	2454 <__aeabi_dmul+0x384>
    2444:	2201      	movs	r2, #1
    2446:	085c      	lsrs	r4, r3, #1
    2448:	4013      	ands	r3, r2
    244a:	4323      	orrs	r3, r4
    244c:	07ea      	lsls	r2, r5, #31
    244e:	9e02      	ldr	r6, [sp, #8]
    2450:	4313      	orrs	r3, r2
    2452:	086d      	lsrs	r5, r5, #1
    2454:	4a57      	ldr	r2, [pc, #348]	; (25b4 <__aeabi_dmul+0x4e4>)
    2456:	18b2      	adds	r2, r6, r2
    2458:	2a00      	cmp	r2, #0
    245a:	dd4b      	ble.n	24f4 <__aeabi_dmul+0x424>
    245c:	0758      	lsls	r0, r3, #29
    245e:	d009      	beq.n	2474 <__aeabi_dmul+0x3a4>
    2460:	200f      	movs	r0, #15
    2462:	4018      	ands	r0, r3
    2464:	2804      	cmp	r0, #4
    2466:	d005      	beq.n	2474 <__aeabi_dmul+0x3a4>
    2468:	1d18      	adds	r0, r3, #4
    246a:	4298      	cmp	r0, r3
    246c:	419b      	sbcs	r3, r3
    246e:	425b      	negs	r3, r3
    2470:	18ed      	adds	r5, r5, r3
    2472:	0003      	movs	r3, r0
    2474:	01e8      	lsls	r0, r5, #7
    2476:	d504      	bpl.n	2482 <__aeabi_dmul+0x3b2>
    2478:	4a4f      	ldr	r2, [pc, #316]	; (25b8 <__aeabi_dmul+0x4e8>)
    247a:	4015      	ands	r5, r2
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	00d2      	lsls	r2, r2, #3
    2480:	18b2      	adds	r2, r6, r2
    2482:	484e      	ldr	r0, [pc, #312]	; (25bc <__aeabi_dmul+0x4ec>)
    2484:	4282      	cmp	r2, r0
    2486:	dd00      	ble.n	248a <__aeabi_dmul+0x3ba>
    2488:	e6e7      	b.n	225a <__aeabi_dmul+0x18a>
    248a:	2401      	movs	r4, #1
    248c:	08db      	lsrs	r3, r3, #3
    248e:	0768      	lsls	r0, r5, #29
    2490:	4318      	orrs	r0, r3
    2492:	026d      	lsls	r5, r5, #9
    2494:	0553      	lsls	r3, r2, #21
    2496:	4680      	mov	r8, r0
    2498:	0b2d      	lsrs	r5, r5, #12
    249a:	0d5b      	lsrs	r3, r3, #21
    249c:	400c      	ands	r4, r1
    249e:	e67d      	b.n	219c <__aeabi_dmul+0xcc>
    24a0:	2280      	movs	r2, #128	; 0x80
    24a2:	4659      	mov	r1, fp
    24a4:	0312      	lsls	r2, r2, #12
    24a6:	4211      	tst	r1, r2
    24a8:	d008      	beq.n	24bc <__aeabi_dmul+0x3ec>
    24aa:	4215      	tst	r5, r2
    24ac:	d106      	bne.n	24bc <__aeabi_dmul+0x3ec>
    24ae:	4315      	orrs	r5, r2
    24b0:	032d      	lsls	r5, r5, #12
    24b2:	4698      	mov	r8, r3
    24b4:	0b2d      	lsrs	r5, r5, #12
    24b6:	464c      	mov	r4, r9
    24b8:	4b41      	ldr	r3, [pc, #260]	; (25c0 <__aeabi_dmul+0x4f0>)
    24ba:	e66f      	b.n	219c <__aeabi_dmul+0xcc>
    24bc:	465d      	mov	r5, fp
    24be:	4315      	orrs	r5, r2
    24c0:	032d      	lsls	r5, r5, #12
    24c2:	0b2d      	lsrs	r5, r5, #12
    24c4:	4b3e      	ldr	r3, [pc, #248]	; (25c0 <__aeabi_dmul+0x4f0>)
    24c6:	e669      	b.n	219c <__aeabi_dmul+0xcc>
    24c8:	0003      	movs	r3, r0
    24ca:	4655      	mov	r5, sl
    24cc:	3b28      	subs	r3, #40	; 0x28
    24ce:	409d      	lsls	r5, r3
    24d0:	2300      	movs	r3, #0
    24d2:	e6bc      	b.n	224e <__aeabi_dmul+0x17e>
    24d4:	4650      	mov	r0, sl
    24d6:	f000 fd59 	bl	2f8c <__clzsi2>
    24da:	3020      	adds	r0, #32
    24dc:	e6a8      	b.n	2230 <__aeabi_dmul+0x160>
    24de:	0003      	movs	r3, r0
    24e0:	3b28      	subs	r3, #40	; 0x28
    24e2:	409f      	lsls	r7, r3
    24e4:	2300      	movs	r3, #0
    24e6:	46bb      	mov	fp, r7
    24e8:	4698      	mov	r8, r3
    24ea:	e689      	b.n	2200 <__aeabi_dmul+0x130>
    24ec:	f000 fd4e 	bl	2f8c <__clzsi2>
    24f0:	3020      	adds	r0, #32
    24f2:	e673      	b.n	21dc <__aeabi_dmul+0x10c>
    24f4:	2401      	movs	r4, #1
    24f6:	1aa6      	subs	r6, r4, r2
    24f8:	2e38      	cmp	r6, #56	; 0x38
    24fa:	dd07      	ble.n	250c <__aeabi_dmul+0x43c>
    24fc:	2200      	movs	r2, #0
    24fe:	400c      	ands	r4, r1
    2500:	2300      	movs	r3, #0
    2502:	2500      	movs	r5, #0
    2504:	4690      	mov	r8, r2
    2506:	e649      	b.n	219c <__aeabi_dmul+0xcc>
    2508:	9e02      	ldr	r6, [sp, #8]
    250a:	e7a3      	b.n	2454 <__aeabi_dmul+0x384>
    250c:	2e1f      	cmp	r6, #31
    250e:	dc20      	bgt.n	2552 <__aeabi_dmul+0x482>
    2510:	2220      	movs	r2, #32
    2512:	002c      	movs	r4, r5
    2514:	0018      	movs	r0, r3
    2516:	1b92      	subs	r2, r2, r6
    2518:	40f0      	lsrs	r0, r6
    251a:	4094      	lsls	r4, r2
    251c:	4093      	lsls	r3, r2
    251e:	4304      	orrs	r4, r0
    2520:	1e58      	subs	r0, r3, #1
    2522:	4183      	sbcs	r3, r0
    2524:	431c      	orrs	r4, r3
    2526:	40f5      	lsrs	r5, r6
    2528:	0763      	lsls	r3, r4, #29
    252a:	d009      	beq.n	2540 <__aeabi_dmul+0x470>
    252c:	230f      	movs	r3, #15
    252e:	4023      	ands	r3, r4
    2530:	2b04      	cmp	r3, #4
    2532:	d005      	beq.n	2540 <__aeabi_dmul+0x470>
    2534:	0023      	movs	r3, r4
    2536:	1d1c      	adds	r4, r3, #4
    2538:	429c      	cmp	r4, r3
    253a:	4192      	sbcs	r2, r2
    253c:	4252      	negs	r2, r2
    253e:	18ad      	adds	r5, r5, r2
    2540:	022b      	lsls	r3, r5, #8
    2542:	d51f      	bpl.n	2584 <__aeabi_dmul+0x4b4>
    2544:	2401      	movs	r4, #1
    2546:	2200      	movs	r2, #0
    2548:	400c      	ands	r4, r1
    254a:	2301      	movs	r3, #1
    254c:	2500      	movs	r5, #0
    254e:	4690      	mov	r8, r2
    2550:	e624      	b.n	219c <__aeabi_dmul+0xcc>
    2552:	201f      	movs	r0, #31
    2554:	002c      	movs	r4, r5
    2556:	4240      	negs	r0, r0
    2558:	1a82      	subs	r2, r0, r2
    255a:	40d4      	lsrs	r4, r2
    255c:	2e20      	cmp	r6, #32
    255e:	d01c      	beq.n	259a <__aeabi_dmul+0x4ca>
    2560:	2240      	movs	r2, #64	; 0x40
    2562:	1b96      	subs	r6, r2, r6
    2564:	40b5      	lsls	r5, r6
    2566:	432b      	orrs	r3, r5
    2568:	1e58      	subs	r0, r3, #1
    256a:	4183      	sbcs	r3, r0
    256c:	2007      	movs	r0, #7
    256e:	4323      	orrs	r3, r4
    2570:	4018      	ands	r0, r3
    2572:	2500      	movs	r5, #0
    2574:	2800      	cmp	r0, #0
    2576:	d009      	beq.n	258c <__aeabi_dmul+0x4bc>
    2578:	220f      	movs	r2, #15
    257a:	2500      	movs	r5, #0
    257c:	401a      	ands	r2, r3
    257e:	001c      	movs	r4, r3
    2580:	2a04      	cmp	r2, #4
    2582:	d1d8      	bne.n	2536 <__aeabi_dmul+0x466>
    2584:	0023      	movs	r3, r4
    2586:	0768      	lsls	r0, r5, #29
    2588:	026d      	lsls	r5, r5, #9
    258a:	0b2d      	lsrs	r5, r5, #12
    258c:	2401      	movs	r4, #1
    258e:	08db      	lsrs	r3, r3, #3
    2590:	4303      	orrs	r3, r0
    2592:	4698      	mov	r8, r3
    2594:	400c      	ands	r4, r1
    2596:	2300      	movs	r3, #0
    2598:	e600      	b.n	219c <__aeabi_dmul+0xcc>
    259a:	2500      	movs	r5, #0
    259c:	e7e3      	b.n	2566 <__aeabi_dmul+0x496>
    259e:	2280      	movs	r2, #128	; 0x80
    25a0:	2401      	movs	r4, #1
    25a2:	0312      	lsls	r2, r2, #12
    25a4:	4315      	orrs	r5, r2
    25a6:	032d      	lsls	r5, r5, #12
    25a8:	4698      	mov	r8, r3
    25aa:	0b2d      	lsrs	r5, r5, #12
    25ac:	400c      	ands	r4, r1
    25ae:	4b04      	ldr	r3, [pc, #16]	; (25c0 <__aeabi_dmul+0x4f0>)
    25b0:	e5f4      	b.n	219c <__aeabi_dmul+0xcc>
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	000003ff 	.word	0x000003ff
    25b8:	feffffff 	.word	0xfeffffff
    25bc:	000007fe 	.word	0x000007fe
    25c0:	000007ff 	.word	0x000007ff

000025c4 <__aeabi_dsub>:
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	4657      	mov	r7, sl
    25c8:	464e      	mov	r6, r9
    25ca:	4645      	mov	r5, r8
    25cc:	b4e0      	push	{r5, r6, r7}
    25ce:	000e      	movs	r6, r1
    25d0:	0011      	movs	r1, r2
    25d2:	0ff2      	lsrs	r2, r6, #31
    25d4:	4692      	mov	sl, r2
    25d6:	00c5      	lsls	r5, r0, #3
    25d8:	0f42      	lsrs	r2, r0, #29
    25da:	0318      	lsls	r0, r3, #12
    25dc:	0337      	lsls	r7, r6, #12
    25de:	0074      	lsls	r4, r6, #1
    25e0:	0a40      	lsrs	r0, r0, #9
    25e2:	0f4e      	lsrs	r6, r1, #29
    25e4:	0a7f      	lsrs	r7, r7, #9
    25e6:	4330      	orrs	r0, r6
    25e8:	4ecf      	ldr	r6, [pc, #828]	; (2928 <__aeabi_dsub+0x364>)
    25ea:	4317      	orrs	r7, r2
    25ec:	005a      	lsls	r2, r3, #1
    25ee:	0d64      	lsrs	r4, r4, #21
    25f0:	0d52      	lsrs	r2, r2, #21
    25f2:	0fdb      	lsrs	r3, r3, #31
    25f4:	00c9      	lsls	r1, r1, #3
    25f6:	42b2      	cmp	r2, r6
    25f8:	d100      	bne.n	25fc <__aeabi_dsub+0x38>
    25fa:	e0e5      	b.n	27c8 <__aeabi_dsub+0x204>
    25fc:	2601      	movs	r6, #1
    25fe:	4073      	eors	r3, r6
    2600:	1aa6      	subs	r6, r4, r2
    2602:	46b4      	mov	ip, r6
    2604:	4553      	cmp	r3, sl
    2606:	d100      	bne.n	260a <__aeabi_dsub+0x46>
    2608:	e0af      	b.n	276a <__aeabi_dsub+0x1a6>
    260a:	2e00      	cmp	r6, #0
    260c:	dc00      	bgt.n	2610 <__aeabi_dsub+0x4c>
    260e:	e10d      	b.n	282c <__aeabi_dsub+0x268>
    2610:	2a00      	cmp	r2, #0
    2612:	d13a      	bne.n	268a <__aeabi_dsub+0xc6>
    2614:	0003      	movs	r3, r0
    2616:	430b      	orrs	r3, r1
    2618:	d000      	beq.n	261c <__aeabi_dsub+0x58>
    261a:	e0e4      	b.n	27e6 <__aeabi_dsub+0x222>
    261c:	076b      	lsls	r3, r5, #29
    261e:	d009      	beq.n	2634 <__aeabi_dsub+0x70>
    2620:	230f      	movs	r3, #15
    2622:	402b      	ands	r3, r5
    2624:	2b04      	cmp	r3, #4
    2626:	d005      	beq.n	2634 <__aeabi_dsub+0x70>
    2628:	1d2b      	adds	r3, r5, #4
    262a:	42ab      	cmp	r3, r5
    262c:	41ad      	sbcs	r5, r5
    262e:	426d      	negs	r5, r5
    2630:	197f      	adds	r7, r7, r5
    2632:	001d      	movs	r5, r3
    2634:	023b      	lsls	r3, r7, #8
    2636:	d400      	bmi.n	263a <__aeabi_dsub+0x76>
    2638:	e088      	b.n	274c <__aeabi_dsub+0x188>
    263a:	4bbb      	ldr	r3, [pc, #748]	; (2928 <__aeabi_dsub+0x364>)
    263c:	3401      	adds	r4, #1
    263e:	429c      	cmp	r4, r3
    2640:	d100      	bne.n	2644 <__aeabi_dsub+0x80>
    2642:	e110      	b.n	2866 <__aeabi_dsub+0x2a2>
    2644:	003a      	movs	r2, r7
    2646:	4bb9      	ldr	r3, [pc, #740]	; (292c <__aeabi_dsub+0x368>)
    2648:	4651      	mov	r1, sl
    264a:	401a      	ands	r2, r3
    264c:	2301      	movs	r3, #1
    264e:	0750      	lsls	r0, r2, #29
    2650:	08ed      	lsrs	r5, r5, #3
    2652:	0252      	lsls	r2, r2, #9
    2654:	0564      	lsls	r4, r4, #21
    2656:	4305      	orrs	r5, r0
    2658:	0b12      	lsrs	r2, r2, #12
    265a:	0d64      	lsrs	r4, r4, #21
    265c:	400b      	ands	r3, r1
    265e:	2100      	movs	r1, #0
    2660:	0028      	movs	r0, r5
    2662:	0312      	lsls	r2, r2, #12
    2664:	0d0d      	lsrs	r5, r1, #20
    2666:	0b12      	lsrs	r2, r2, #12
    2668:	0564      	lsls	r4, r4, #21
    266a:	052d      	lsls	r5, r5, #20
    266c:	4315      	orrs	r5, r2
    266e:	0862      	lsrs	r2, r4, #1
    2670:	4caf      	ldr	r4, [pc, #700]	; (2930 <__aeabi_dsub+0x36c>)
    2672:	07db      	lsls	r3, r3, #31
    2674:	402c      	ands	r4, r5
    2676:	4314      	orrs	r4, r2
    2678:	0064      	lsls	r4, r4, #1
    267a:	0864      	lsrs	r4, r4, #1
    267c:	431c      	orrs	r4, r3
    267e:	0021      	movs	r1, r4
    2680:	bc1c      	pop	{r2, r3, r4}
    2682:	4690      	mov	r8, r2
    2684:	4699      	mov	r9, r3
    2686:	46a2      	mov	sl, r4
    2688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    268a:	4ba7      	ldr	r3, [pc, #668]	; (2928 <__aeabi_dsub+0x364>)
    268c:	429c      	cmp	r4, r3
    268e:	d0c5      	beq.n	261c <__aeabi_dsub+0x58>
    2690:	2380      	movs	r3, #128	; 0x80
    2692:	041b      	lsls	r3, r3, #16
    2694:	4318      	orrs	r0, r3
    2696:	4663      	mov	r3, ip
    2698:	2b38      	cmp	r3, #56	; 0x38
    269a:	dd00      	ble.n	269e <__aeabi_dsub+0xda>
    269c:	e0fd      	b.n	289a <__aeabi_dsub+0x2d6>
    269e:	2b1f      	cmp	r3, #31
    26a0:	dd00      	ble.n	26a4 <__aeabi_dsub+0xe0>
    26a2:	e130      	b.n	2906 <__aeabi_dsub+0x342>
    26a4:	4662      	mov	r2, ip
    26a6:	2320      	movs	r3, #32
    26a8:	1a9b      	subs	r3, r3, r2
    26aa:	0002      	movs	r2, r0
    26ac:	409a      	lsls	r2, r3
    26ae:	4666      	mov	r6, ip
    26b0:	4690      	mov	r8, r2
    26b2:	000a      	movs	r2, r1
    26b4:	4099      	lsls	r1, r3
    26b6:	40f2      	lsrs	r2, r6
    26b8:	4646      	mov	r6, r8
    26ba:	1e4b      	subs	r3, r1, #1
    26bc:	4199      	sbcs	r1, r3
    26be:	4332      	orrs	r2, r6
    26c0:	4311      	orrs	r1, r2
    26c2:	4663      	mov	r3, ip
    26c4:	0002      	movs	r2, r0
    26c6:	40da      	lsrs	r2, r3
    26c8:	1a69      	subs	r1, r5, r1
    26ca:	428d      	cmp	r5, r1
    26cc:	419b      	sbcs	r3, r3
    26ce:	000d      	movs	r5, r1
    26d0:	1aba      	subs	r2, r7, r2
    26d2:	425b      	negs	r3, r3
    26d4:	1ad7      	subs	r7, r2, r3
    26d6:	023b      	lsls	r3, r7, #8
    26d8:	d535      	bpl.n	2746 <__aeabi_dsub+0x182>
    26da:	027a      	lsls	r2, r7, #9
    26dc:	0a53      	lsrs	r3, r2, #9
    26de:	4698      	mov	r8, r3
    26e0:	4643      	mov	r3, r8
    26e2:	2b00      	cmp	r3, #0
    26e4:	d100      	bne.n	26e8 <__aeabi_dsub+0x124>
    26e6:	e0c4      	b.n	2872 <__aeabi_dsub+0x2ae>
    26e8:	4640      	mov	r0, r8
    26ea:	f000 fc4f 	bl	2f8c <__clzsi2>
    26ee:	0003      	movs	r3, r0
    26f0:	3b08      	subs	r3, #8
    26f2:	2b1f      	cmp	r3, #31
    26f4:	dd00      	ble.n	26f8 <__aeabi_dsub+0x134>
    26f6:	e0c5      	b.n	2884 <__aeabi_dsub+0x2c0>
    26f8:	2220      	movs	r2, #32
    26fa:	0029      	movs	r1, r5
    26fc:	1ad2      	subs	r2, r2, r3
    26fe:	4647      	mov	r7, r8
    2700:	40d1      	lsrs	r1, r2
    2702:	409f      	lsls	r7, r3
    2704:	000a      	movs	r2, r1
    2706:	409d      	lsls	r5, r3
    2708:	433a      	orrs	r2, r7
    270a:	429c      	cmp	r4, r3
    270c:	dd00      	ble.n	2710 <__aeabi_dsub+0x14c>
    270e:	e0c0      	b.n	2892 <__aeabi_dsub+0x2ce>
    2710:	1b1c      	subs	r4, r3, r4
    2712:	1c63      	adds	r3, r4, #1
    2714:	2b1f      	cmp	r3, #31
    2716:	dd00      	ble.n	271a <__aeabi_dsub+0x156>
    2718:	e0e4      	b.n	28e4 <__aeabi_dsub+0x320>
    271a:	2120      	movs	r1, #32
    271c:	0014      	movs	r4, r2
    271e:	0028      	movs	r0, r5
    2720:	1ac9      	subs	r1, r1, r3
    2722:	40d8      	lsrs	r0, r3
    2724:	408c      	lsls	r4, r1
    2726:	408d      	lsls	r5, r1
    2728:	4304      	orrs	r4, r0
    272a:	40da      	lsrs	r2, r3
    272c:	1e68      	subs	r0, r5, #1
    272e:	4185      	sbcs	r5, r0
    2730:	0017      	movs	r7, r2
    2732:	4325      	orrs	r5, r4
    2734:	2400      	movs	r4, #0
    2736:	e771      	b.n	261c <__aeabi_dsub+0x58>
    2738:	4642      	mov	r2, r8
    273a:	4663      	mov	r3, ip
    273c:	431a      	orrs	r2, r3
    273e:	d100      	bne.n	2742 <__aeabi_dsub+0x17e>
    2740:	e24c      	b.n	2bdc <__aeabi_dsub+0x618>
    2742:	4667      	mov	r7, ip
    2744:	4645      	mov	r5, r8
    2746:	076b      	lsls	r3, r5, #29
    2748:	d000      	beq.n	274c <__aeabi_dsub+0x188>
    274a:	e769      	b.n	2620 <__aeabi_dsub+0x5c>
    274c:	2301      	movs	r3, #1
    274e:	4651      	mov	r1, sl
    2750:	0778      	lsls	r0, r7, #29
    2752:	08ed      	lsrs	r5, r5, #3
    2754:	08fa      	lsrs	r2, r7, #3
    2756:	400b      	ands	r3, r1
    2758:	4305      	orrs	r5, r0
    275a:	4973      	ldr	r1, [pc, #460]	; (2928 <__aeabi_dsub+0x364>)
    275c:	428c      	cmp	r4, r1
    275e:	d038      	beq.n	27d2 <__aeabi_dsub+0x20e>
    2760:	0312      	lsls	r2, r2, #12
    2762:	0564      	lsls	r4, r4, #21
    2764:	0b12      	lsrs	r2, r2, #12
    2766:	0d64      	lsrs	r4, r4, #21
    2768:	e779      	b.n	265e <__aeabi_dsub+0x9a>
    276a:	2e00      	cmp	r6, #0
    276c:	dc00      	bgt.n	2770 <__aeabi_dsub+0x1ac>
    276e:	e09a      	b.n	28a6 <__aeabi_dsub+0x2e2>
    2770:	2a00      	cmp	r2, #0
    2772:	d047      	beq.n	2804 <__aeabi_dsub+0x240>
    2774:	4a6c      	ldr	r2, [pc, #432]	; (2928 <__aeabi_dsub+0x364>)
    2776:	4294      	cmp	r4, r2
    2778:	d100      	bne.n	277c <__aeabi_dsub+0x1b8>
    277a:	e74f      	b.n	261c <__aeabi_dsub+0x58>
    277c:	2280      	movs	r2, #128	; 0x80
    277e:	0412      	lsls	r2, r2, #16
    2780:	4310      	orrs	r0, r2
    2782:	4662      	mov	r2, ip
    2784:	2a38      	cmp	r2, #56	; 0x38
    2786:	dc00      	bgt.n	278a <__aeabi_dsub+0x1c6>
    2788:	e108      	b.n	299c <__aeabi_dsub+0x3d8>
    278a:	4301      	orrs	r1, r0
    278c:	1e48      	subs	r0, r1, #1
    278e:	4181      	sbcs	r1, r0
    2790:	2200      	movs	r2, #0
    2792:	b2c9      	uxtb	r1, r1
    2794:	1949      	adds	r1, r1, r5
    2796:	19d2      	adds	r2, r2, r7
    2798:	42a9      	cmp	r1, r5
    279a:	41bf      	sbcs	r7, r7
    279c:	000d      	movs	r5, r1
    279e:	427f      	negs	r7, r7
    27a0:	18bf      	adds	r7, r7, r2
    27a2:	023a      	lsls	r2, r7, #8
    27a4:	d400      	bmi.n	27a8 <__aeabi_dsub+0x1e4>
    27a6:	e142      	b.n	2a2e <__aeabi_dsub+0x46a>
    27a8:	4a5f      	ldr	r2, [pc, #380]	; (2928 <__aeabi_dsub+0x364>)
    27aa:	3401      	adds	r4, #1
    27ac:	4294      	cmp	r4, r2
    27ae:	d100      	bne.n	27b2 <__aeabi_dsub+0x1ee>
    27b0:	e14e      	b.n	2a50 <__aeabi_dsub+0x48c>
    27b2:	2001      	movs	r0, #1
    27b4:	4a5d      	ldr	r2, [pc, #372]	; (292c <__aeabi_dsub+0x368>)
    27b6:	0869      	lsrs	r1, r5, #1
    27b8:	403a      	ands	r2, r7
    27ba:	4028      	ands	r0, r5
    27bc:	4308      	orrs	r0, r1
    27be:	07d5      	lsls	r5, r2, #31
    27c0:	4305      	orrs	r5, r0
    27c2:	0857      	lsrs	r7, r2, #1
    27c4:	469a      	mov	sl, r3
    27c6:	e729      	b.n	261c <__aeabi_dsub+0x58>
    27c8:	0006      	movs	r6, r0
    27ca:	430e      	orrs	r6, r1
    27cc:	d000      	beq.n	27d0 <__aeabi_dsub+0x20c>
    27ce:	e717      	b.n	2600 <__aeabi_dsub+0x3c>
    27d0:	e714      	b.n	25fc <__aeabi_dsub+0x38>
    27d2:	0029      	movs	r1, r5
    27d4:	4311      	orrs	r1, r2
    27d6:	d100      	bne.n	27da <__aeabi_dsub+0x216>
    27d8:	e1f9      	b.n	2bce <__aeabi_dsub+0x60a>
    27da:	2180      	movs	r1, #128	; 0x80
    27dc:	0309      	lsls	r1, r1, #12
    27de:	430a      	orrs	r2, r1
    27e0:	0312      	lsls	r2, r2, #12
    27e2:	0b12      	lsrs	r2, r2, #12
    27e4:	e73b      	b.n	265e <__aeabi_dsub+0x9a>
    27e6:	2301      	movs	r3, #1
    27e8:	425b      	negs	r3, r3
    27ea:	4698      	mov	r8, r3
    27ec:	44c4      	add	ip, r8
    27ee:	4663      	mov	r3, ip
    27f0:	2b00      	cmp	r3, #0
    27f2:	d172      	bne.n	28da <__aeabi_dsub+0x316>
    27f4:	1a69      	subs	r1, r5, r1
    27f6:	428d      	cmp	r5, r1
    27f8:	419b      	sbcs	r3, r3
    27fa:	1a3f      	subs	r7, r7, r0
    27fc:	425b      	negs	r3, r3
    27fe:	1aff      	subs	r7, r7, r3
    2800:	000d      	movs	r5, r1
    2802:	e768      	b.n	26d6 <__aeabi_dsub+0x112>
    2804:	0002      	movs	r2, r0
    2806:	430a      	orrs	r2, r1
    2808:	d100      	bne.n	280c <__aeabi_dsub+0x248>
    280a:	e707      	b.n	261c <__aeabi_dsub+0x58>
    280c:	2201      	movs	r2, #1
    280e:	4252      	negs	r2, r2
    2810:	4690      	mov	r8, r2
    2812:	44c4      	add	ip, r8
    2814:	4662      	mov	r2, ip
    2816:	2a00      	cmp	r2, #0
    2818:	d000      	beq.n	281c <__aeabi_dsub+0x258>
    281a:	e0e6      	b.n	29ea <__aeabi_dsub+0x426>
    281c:	1869      	adds	r1, r5, r1
    281e:	42a9      	cmp	r1, r5
    2820:	41b6      	sbcs	r6, r6
    2822:	183f      	adds	r7, r7, r0
    2824:	4276      	negs	r6, r6
    2826:	19f7      	adds	r7, r6, r7
    2828:	000d      	movs	r5, r1
    282a:	e7ba      	b.n	27a2 <__aeabi_dsub+0x1de>
    282c:	2e00      	cmp	r6, #0
    282e:	d000      	beq.n	2832 <__aeabi_dsub+0x26e>
    2830:	e080      	b.n	2934 <__aeabi_dsub+0x370>
    2832:	1c62      	adds	r2, r4, #1
    2834:	0552      	lsls	r2, r2, #21
    2836:	0d52      	lsrs	r2, r2, #21
    2838:	2a01      	cmp	r2, #1
    283a:	dc00      	bgt.n	283e <__aeabi_dsub+0x27a>
    283c:	e0f9      	b.n	2a32 <__aeabi_dsub+0x46e>
    283e:	1a6a      	subs	r2, r5, r1
    2840:	4691      	mov	r9, r2
    2842:	454d      	cmp	r5, r9
    2844:	41b6      	sbcs	r6, r6
    2846:	1a3a      	subs	r2, r7, r0
    2848:	4276      	negs	r6, r6
    284a:	1b92      	subs	r2, r2, r6
    284c:	4690      	mov	r8, r2
    284e:	0212      	lsls	r2, r2, #8
    2850:	d400      	bmi.n	2854 <__aeabi_dsub+0x290>
    2852:	e099      	b.n	2988 <__aeabi_dsub+0x3c4>
    2854:	1b4d      	subs	r5, r1, r5
    2856:	42a9      	cmp	r1, r5
    2858:	4189      	sbcs	r1, r1
    285a:	1bc7      	subs	r7, r0, r7
    285c:	4249      	negs	r1, r1
    285e:	1a7a      	subs	r2, r7, r1
    2860:	4690      	mov	r8, r2
    2862:	469a      	mov	sl, r3
    2864:	e73c      	b.n	26e0 <__aeabi_dsub+0x11c>
    2866:	4652      	mov	r2, sl
    2868:	2301      	movs	r3, #1
    286a:	2500      	movs	r5, #0
    286c:	4013      	ands	r3, r2
    286e:	2200      	movs	r2, #0
    2870:	e6f5      	b.n	265e <__aeabi_dsub+0x9a>
    2872:	0028      	movs	r0, r5
    2874:	f000 fb8a 	bl	2f8c <__clzsi2>
    2878:	3020      	adds	r0, #32
    287a:	0003      	movs	r3, r0
    287c:	3b08      	subs	r3, #8
    287e:	2b1f      	cmp	r3, #31
    2880:	dc00      	bgt.n	2884 <__aeabi_dsub+0x2c0>
    2882:	e739      	b.n	26f8 <__aeabi_dsub+0x134>
    2884:	002a      	movs	r2, r5
    2886:	3828      	subs	r0, #40	; 0x28
    2888:	4082      	lsls	r2, r0
    288a:	2500      	movs	r5, #0
    288c:	429c      	cmp	r4, r3
    288e:	dc00      	bgt.n	2892 <__aeabi_dsub+0x2ce>
    2890:	e73e      	b.n	2710 <__aeabi_dsub+0x14c>
    2892:	4f26      	ldr	r7, [pc, #152]	; (292c <__aeabi_dsub+0x368>)
    2894:	1ae4      	subs	r4, r4, r3
    2896:	4017      	ands	r7, r2
    2898:	e6c0      	b.n	261c <__aeabi_dsub+0x58>
    289a:	4301      	orrs	r1, r0
    289c:	1e48      	subs	r0, r1, #1
    289e:	4181      	sbcs	r1, r0
    28a0:	2200      	movs	r2, #0
    28a2:	b2c9      	uxtb	r1, r1
    28a4:	e710      	b.n	26c8 <__aeabi_dsub+0x104>
    28a6:	2e00      	cmp	r6, #0
    28a8:	d000      	beq.n	28ac <__aeabi_dsub+0x2e8>
    28aa:	e0f1      	b.n	2a90 <__aeabi_dsub+0x4cc>
    28ac:	1c62      	adds	r2, r4, #1
    28ae:	4694      	mov	ip, r2
    28b0:	0552      	lsls	r2, r2, #21
    28b2:	0d52      	lsrs	r2, r2, #21
    28b4:	2a01      	cmp	r2, #1
    28b6:	dc00      	bgt.n	28ba <__aeabi_dsub+0x2f6>
    28b8:	e0a0      	b.n	29fc <__aeabi_dsub+0x438>
    28ba:	4a1b      	ldr	r2, [pc, #108]	; (2928 <__aeabi_dsub+0x364>)
    28bc:	4594      	cmp	ip, r2
    28be:	d100      	bne.n	28c2 <__aeabi_dsub+0x2fe>
    28c0:	e0c5      	b.n	2a4e <__aeabi_dsub+0x48a>
    28c2:	1869      	adds	r1, r5, r1
    28c4:	42a9      	cmp	r1, r5
    28c6:	4192      	sbcs	r2, r2
    28c8:	183f      	adds	r7, r7, r0
    28ca:	4252      	negs	r2, r2
    28cc:	19d2      	adds	r2, r2, r7
    28ce:	0849      	lsrs	r1, r1, #1
    28d0:	07d5      	lsls	r5, r2, #31
    28d2:	430d      	orrs	r5, r1
    28d4:	0857      	lsrs	r7, r2, #1
    28d6:	4664      	mov	r4, ip
    28d8:	e6a0      	b.n	261c <__aeabi_dsub+0x58>
    28da:	4b13      	ldr	r3, [pc, #76]	; (2928 <__aeabi_dsub+0x364>)
    28dc:	429c      	cmp	r4, r3
    28de:	d000      	beq.n	28e2 <__aeabi_dsub+0x31e>
    28e0:	e6d9      	b.n	2696 <__aeabi_dsub+0xd2>
    28e2:	e69b      	b.n	261c <__aeabi_dsub+0x58>
    28e4:	0011      	movs	r1, r2
    28e6:	3c1f      	subs	r4, #31
    28e8:	40e1      	lsrs	r1, r4
    28ea:	000c      	movs	r4, r1
    28ec:	2b20      	cmp	r3, #32
    28ee:	d100      	bne.n	28f2 <__aeabi_dsub+0x32e>
    28f0:	e080      	b.n	29f4 <__aeabi_dsub+0x430>
    28f2:	2140      	movs	r1, #64	; 0x40
    28f4:	1acb      	subs	r3, r1, r3
    28f6:	409a      	lsls	r2, r3
    28f8:	4315      	orrs	r5, r2
    28fa:	1e6a      	subs	r2, r5, #1
    28fc:	4195      	sbcs	r5, r2
    28fe:	2700      	movs	r7, #0
    2900:	4325      	orrs	r5, r4
    2902:	2400      	movs	r4, #0
    2904:	e71f      	b.n	2746 <__aeabi_dsub+0x182>
    2906:	4663      	mov	r3, ip
    2908:	0002      	movs	r2, r0
    290a:	3b20      	subs	r3, #32
    290c:	40da      	lsrs	r2, r3
    290e:	4663      	mov	r3, ip
    2910:	2b20      	cmp	r3, #32
    2912:	d071      	beq.n	29f8 <__aeabi_dsub+0x434>
    2914:	2340      	movs	r3, #64	; 0x40
    2916:	4666      	mov	r6, ip
    2918:	1b9b      	subs	r3, r3, r6
    291a:	4098      	lsls	r0, r3
    291c:	4301      	orrs	r1, r0
    291e:	1e48      	subs	r0, r1, #1
    2920:	4181      	sbcs	r1, r0
    2922:	4311      	orrs	r1, r2
    2924:	2200      	movs	r2, #0
    2926:	e6cf      	b.n	26c8 <__aeabi_dsub+0x104>
    2928:	000007ff 	.word	0x000007ff
    292c:	ff7fffff 	.word	0xff7fffff
    2930:	800fffff 	.word	0x800fffff
    2934:	2c00      	cmp	r4, #0
    2936:	d048      	beq.n	29ca <__aeabi_dsub+0x406>
    2938:	4cca      	ldr	r4, [pc, #808]	; (2c64 <__aeabi_dsub+0x6a0>)
    293a:	42a2      	cmp	r2, r4
    293c:	d100      	bne.n	2940 <__aeabi_dsub+0x37c>
    293e:	e0a2      	b.n	2a86 <__aeabi_dsub+0x4c2>
    2940:	4274      	negs	r4, r6
    2942:	46a1      	mov	r9, r4
    2944:	2480      	movs	r4, #128	; 0x80
    2946:	0424      	lsls	r4, r4, #16
    2948:	4327      	orrs	r7, r4
    294a:	464c      	mov	r4, r9
    294c:	2c38      	cmp	r4, #56	; 0x38
    294e:	dd00      	ble.n	2952 <__aeabi_dsub+0x38e>
    2950:	e0db      	b.n	2b0a <__aeabi_dsub+0x546>
    2952:	2c1f      	cmp	r4, #31
    2954:	dd00      	ble.n	2958 <__aeabi_dsub+0x394>
    2956:	e144      	b.n	2be2 <__aeabi_dsub+0x61e>
    2958:	464e      	mov	r6, r9
    295a:	2420      	movs	r4, #32
    295c:	1ba4      	subs	r4, r4, r6
    295e:	003e      	movs	r6, r7
    2960:	40a6      	lsls	r6, r4
    2962:	46a2      	mov	sl, r4
    2964:	46b0      	mov	r8, r6
    2966:	464c      	mov	r4, r9
    2968:	002e      	movs	r6, r5
    296a:	40e6      	lsrs	r6, r4
    296c:	46b4      	mov	ip, r6
    296e:	4646      	mov	r6, r8
    2970:	4664      	mov	r4, ip
    2972:	4326      	orrs	r6, r4
    2974:	4654      	mov	r4, sl
    2976:	40a5      	lsls	r5, r4
    2978:	1e6c      	subs	r4, r5, #1
    297a:	41a5      	sbcs	r5, r4
    297c:	0034      	movs	r4, r6
    297e:	432c      	orrs	r4, r5
    2980:	464d      	mov	r5, r9
    2982:	40ef      	lsrs	r7, r5
    2984:	1b0d      	subs	r5, r1, r4
    2986:	e028      	b.n	29da <__aeabi_dsub+0x416>
    2988:	464a      	mov	r2, r9
    298a:	4643      	mov	r3, r8
    298c:	464d      	mov	r5, r9
    298e:	431a      	orrs	r2, r3
    2990:	d000      	beq.n	2994 <__aeabi_dsub+0x3d0>
    2992:	e6a5      	b.n	26e0 <__aeabi_dsub+0x11c>
    2994:	2300      	movs	r3, #0
    2996:	2400      	movs	r4, #0
    2998:	2500      	movs	r5, #0
    299a:	e6de      	b.n	275a <__aeabi_dsub+0x196>
    299c:	2a1f      	cmp	r2, #31
    299e:	dc5a      	bgt.n	2a56 <__aeabi_dsub+0x492>
    29a0:	4666      	mov	r6, ip
    29a2:	2220      	movs	r2, #32
    29a4:	1b92      	subs	r2, r2, r6
    29a6:	0006      	movs	r6, r0
    29a8:	4096      	lsls	r6, r2
    29aa:	4691      	mov	r9, r2
    29ac:	46b0      	mov	r8, r6
    29ae:	4662      	mov	r2, ip
    29b0:	000e      	movs	r6, r1
    29b2:	40d6      	lsrs	r6, r2
    29b4:	4642      	mov	r2, r8
    29b6:	4316      	orrs	r6, r2
    29b8:	464a      	mov	r2, r9
    29ba:	4091      	lsls	r1, r2
    29bc:	1e4a      	subs	r2, r1, #1
    29be:	4191      	sbcs	r1, r2
    29c0:	0002      	movs	r2, r0
    29c2:	4660      	mov	r0, ip
    29c4:	4331      	orrs	r1, r6
    29c6:	40c2      	lsrs	r2, r0
    29c8:	e6e4      	b.n	2794 <__aeabi_dsub+0x1d0>
    29ca:	003c      	movs	r4, r7
    29cc:	432c      	orrs	r4, r5
    29ce:	d05a      	beq.n	2a86 <__aeabi_dsub+0x4c2>
    29d0:	43f4      	mvns	r4, r6
    29d2:	46a1      	mov	r9, r4
    29d4:	2c00      	cmp	r4, #0
    29d6:	d152      	bne.n	2a7e <__aeabi_dsub+0x4ba>
    29d8:	1b4d      	subs	r5, r1, r5
    29da:	42a9      	cmp	r1, r5
    29dc:	4189      	sbcs	r1, r1
    29de:	1bc7      	subs	r7, r0, r7
    29e0:	4249      	negs	r1, r1
    29e2:	1a7f      	subs	r7, r7, r1
    29e4:	0014      	movs	r4, r2
    29e6:	469a      	mov	sl, r3
    29e8:	e675      	b.n	26d6 <__aeabi_dsub+0x112>
    29ea:	4a9e      	ldr	r2, [pc, #632]	; (2c64 <__aeabi_dsub+0x6a0>)
    29ec:	4294      	cmp	r4, r2
    29ee:	d000      	beq.n	29f2 <__aeabi_dsub+0x42e>
    29f0:	e6c7      	b.n	2782 <__aeabi_dsub+0x1be>
    29f2:	e613      	b.n	261c <__aeabi_dsub+0x58>
    29f4:	2200      	movs	r2, #0
    29f6:	e77f      	b.n	28f8 <__aeabi_dsub+0x334>
    29f8:	2000      	movs	r0, #0
    29fa:	e78f      	b.n	291c <__aeabi_dsub+0x358>
    29fc:	2c00      	cmp	r4, #0
    29fe:	d000      	beq.n	2a02 <__aeabi_dsub+0x43e>
    2a00:	e0c8      	b.n	2b94 <__aeabi_dsub+0x5d0>
    2a02:	003b      	movs	r3, r7
    2a04:	432b      	orrs	r3, r5
    2a06:	d100      	bne.n	2a0a <__aeabi_dsub+0x446>
    2a08:	e10f      	b.n	2c2a <__aeabi_dsub+0x666>
    2a0a:	0003      	movs	r3, r0
    2a0c:	430b      	orrs	r3, r1
    2a0e:	d100      	bne.n	2a12 <__aeabi_dsub+0x44e>
    2a10:	e604      	b.n	261c <__aeabi_dsub+0x58>
    2a12:	1869      	adds	r1, r5, r1
    2a14:	42a9      	cmp	r1, r5
    2a16:	419b      	sbcs	r3, r3
    2a18:	183f      	adds	r7, r7, r0
    2a1a:	425b      	negs	r3, r3
    2a1c:	19df      	adds	r7, r3, r7
    2a1e:	023b      	lsls	r3, r7, #8
    2a20:	d400      	bmi.n	2a24 <__aeabi_dsub+0x460>
    2a22:	e11a      	b.n	2c5a <__aeabi_dsub+0x696>
    2a24:	4b90      	ldr	r3, [pc, #576]	; (2c68 <__aeabi_dsub+0x6a4>)
    2a26:	000d      	movs	r5, r1
    2a28:	401f      	ands	r7, r3
    2a2a:	4664      	mov	r4, ip
    2a2c:	e5f6      	b.n	261c <__aeabi_dsub+0x58>
    2a2e:	469a      	mov	sl, r3
    2a30:	e689      	b.n	2746 <__aeabi_dsub+0x182>
    2a32:	003a      	movs	r2, r7
    2a34:	432a      	orrs	r2, r5
    2a36:	2c00      	cmp	r4, #0
    2a38:	d15c      	bne.n	2af4 <__aeabi_dsub+0x530>
    2a3a:	2a00      	cmp	r2, #0
    2a3c:	d175      	bne.n	2b2a <__aeabi_dsub+0x566>
    2a3e:	0002      	movs	r2, r0
    2a40:	430a      	orrs	r2, r1
    2a42:	d100      	bne.n	2a46 <__aeabi_dsub+0x482>
    2a44:	e0ca      	b.n	2bdc <__aeabi_dsub+0x618>
    2a46:	0007      	movs	r7, r0
    2a48:	000d      	movs	r5, r1
    2a4a:	469a      	mov	sl, r3
    2a4c:	e5e6      	b.n	261c <__aeabi_dsub+0x58>
    2a4e:	4664      	mov	r4, ip
    2a50:	2200      	movs	r2, #0
    2a52:	2500      	movs	r5, #0
    2a54:	e681      	b.n	275a <__aeabi_dsub+0x196>
    2a56:	4662      	mov	r2, ip
    2a58:	0006      	movs	r6, r0
    2a5a:	3a20      	subs	r2, #32
    2a5c:	40d6      	lsrs	r6, r2
    2a5e:	4662      	mov	r2, ip
    2a60:	46b0      	mov	r8, r6
    2a62:	2a20      	cmp	r2, #32
    2a64:	d100      	bne.n	2a68 <__aeabi_dsub+0x4a4>
    2a66:	e0b7      	b.n	2bd8 <__aeabi_dsub+0x614>
    2a68:	2240      	movs	r2, #64	; 0x40
    2a6a:	4666      	mov	r6, ip
    2a6c:	1b92      	subs	r2, r2, r6
    2a6e:	4090      	lsls	r0, r2
    2a70:	4301      	orrs	r1, r0
    2a72:	4642      	mov	r2, r8
    2a74:	1e48      	subs	r0, r1, #1
    2a76:	4181      	sbcs	r1, r0
    2a78:	4311      	orrs	r1, r2
    2a7a:	2200      	movs	r2, #0
    2a7c:	e68a      	b.n	2794 <__aeabi_dsub+0x1d0>
    2a7e:	4c79      	ldr	r4, [pc, #484]	; (2c64 <__aeabi_dsub+0x6a0>)
    2a80:	42a2      	cmp	r2, r4
    2a82:	d000      	beq.n	2a86 <__aeabi_dsub+0x4c2>
    2a84:	e761      	b.n	294a <__aeabi_dsub+0x386>
    2a86:	0007      	movs	r7, r0
    2a88:	000d      	movs	r5, r1
    2a8a:	0014      	movs	r4, r2
    2a8c:	469a      	mov	sl, r3
    2a8e:	e5c5      	b.n	261c <__aeabi_dsub+0x58>
    2a90:	2c00      	cmp	r4, #0
    2a92:	d141      	bne.n	2b18 <__aeabi_dsub+0x554>
    2a94:	003c      	movs	r4, r7
    2a96:	432c      	orrs	r4, r5
    2a98:	d078      	beq.n	2b8c <__aeabi_dsub+0x5c8>
    2a9a:	43f4      	mvns	r4, r6
    2a9c:	46a1      	mov	r9, r4
    2a9e:	2c00      	cmp	r4, #0
    2aa0:	d020      	beq.n	2ae4 <__aeabi_dsub+0x520>
    2aa2:	4c70      	ldr	r4, [pc, #448]	; (2c64 <__aeabi_dsub+0x6a0>)
    2aa4:	42a2      	cmp	r2, r4
    2aa6:	d071      	beq.n	2b8c <__aeabi_dsub+0x5c8>
    2aa8:	464c      	mov	r4, r9
    2aaa:	2c38      	cmp	r4, #56	; 0x38
    2aac:	dd00      	ble.n	2ab0 <__aeabi_dsub+0x4ec>
    2aae:	e0b2      	b.n	2c16 <__aeabi_dsub+0x652>
    2ab0:	2c1f      	cmp	r4, #31
    2ab2:	dd00      	ble.n	2ab6 <__aeabi_dsub+0x4f2>
    2ab4:	e0bc      	b.n	2c30 <__aeabi_dsub+0x66c>
    2ab6:	2620      	movs	r6, #32
    2ab8:	1b34      	subs	r4, r6, r4
    2aba:	46a2      	mov	sl, r4
    2abc:	003c      	movs	r4, r7
    2abe:	4656      	mov	r6, sl
    2ac0:	40b4      	lsls	r4, r6
    2ac2:	464e      	mov	r6, r9
    2ac4:	46a0      	mov	r8, r4
    2ac6:	002c      	movs	r4, r5
    2ac8:	40f4      	lsrs	r4, r6
    2aca:	46a4      	mov	ip, r4
    2acc:	4644      	mov	r4, r8
    2ace:	4666      	mov	r6, ip
    2ad0:	4334      	orrs	r4, r6
    2ad2:	46a4      	mov	ip, r4
    2ad4:	4654      	mov	r4, sl
    2ad6:	40a5      	lsls	r5, r4
    2ad8:	4664      	mov	r4, ip
    2ada:	1e6e      	subs	r6, r5, #1
    2adc:	41b5      	sbcs	r5, r6
    2ade:	4325      	orrs	r5, r4
    2ae0:	464c      	mov	r4, r9
    2ae2:	40e7      	lsrs	r7, r4
    2ae4:	186d      	adds	r5, r5, r1
    2ae6:	428d      	cmp	r5, r1
    2ae8:	4189      	sbcs	r1, r1
    2aea:	183f      	adds	r7, r7, r0
    2aec:	4249      	negs	r1, r1
    2aee:	19cf      	adds	r7, r1, r7
    2af0:	0014      	movs	r4, r2
    2af2:	e656      	b.n	27a2 <__aeabi_dsub+0x1de>
    2af4:	2a00      	cmp	r2, #0
    2af6:	d12f      	bne.n	2b58 <__aeabi_dsub+0x594>
    2af8:	0002      	movs	r2, r0
    2afa:	430a      	orrs	r2, r1
    2afc:	d100      	bne.n	2b00 <__aeabi_dsub+0x53c>
    2afe:	e084      	b.n	2c0a <__aeabi_dsub+0x646>
    2b00:	0007      	movs	r7, r0
    2b02:	000d      	movs	r5, r1
    2b04:	469a      	mov	sl, r3
    2b06:	4c57      	ldr	r4, [pc, #348]	; (2c64 <__aeabi_dsub+0x6a0>)
    2b08:	e588      	b.n	261c <__aeabi_dsub+0x58>
    2b0a:	433d      	orrs	r5, r7
    2b0c:	1e6f      	subs	r7, r5, #1
    2b0e:	41bd      	sbcs	r5, r7
    2b10:	b2ec      	uxtb	r4, r5
    2b12:	2700      	movs	r7, #0
    2b14:	1b0d      	subs	r5, r1, r4
    2b16:	e760      	b.n	29da <__aeabi_dsub+0x416>
    2b18:	4c52      	ldr	r4, [pc, #328]	; (2c64 <__aeabi_dsub+0x6a0>)
    2b1a:	42a2      	cmp	r2, r4
    2b1c:	d036      	beq.n	2b8c <__aeabi_dsub+0x5c8>
    2b1e:	4274      	negs	r4, r6
    2b20:	2680      	movs	r6, #128	; 0x80
    2b22:	0436      	lsls	r6, r6, #16
    2b24:	46a1      	mov	r9, r4
    2b26:	4337      	orrs	r7, r6
    2b28:	e7be      	b.n	2aa8 <__aeabi_dsub+0x4e4>
    2b2a:	0002      	movs	r2, r0
    2b2c:	430a      	orrs	r2, r1
    2b2e:	d100      	bne.n	2b32 <__aeabi_dsub+0x56e>
    2b30:	e574      	b.n	261c <__aeabi_dsub+0x58>
    2b32:	1a6a      	subs	r2, r5, r1
    2b34:	4690      	mov	r8, r2
    2b36:	4545      	cmp	r5, r8
    2b38:	41b6      	sbcs	r6, r6
    2b3a:	1a3a      	subs	r2, r7, r0
    2b3c:	4276      	negs	r6, r6
    2b3e:	1b92      	subs	r2, r2, r6
    2b40:	4694      	mov	ip, r2
    2b42:	0212      	lsls	r2, r2, #8
    2b44:	d400      	bmi.n	2b48 <__aeabi_dsub+0x584>
    2b46:	e5f7      	b.n	2738 <__aeabi_dsub+0x174>
    2b48:	1b4d      	subs	r5, r1, r5
    2b4a:	42a9      	cmp	r1, r5
    2b4c:	4189      	sbcs	r1, r1
    2b4e:	1bc7      	subs	r7, r0, r7
    2b50:	4249      	negs	r1, r1
    2b52:	1a7f      	subs	r7, r7, r1
    2b54:	469a      	mov	sl, r3
    2b56:	e561      	b.n	261c <__aeabi_dsub+0x58>
    2b58:	0002      	movs	r2, r0
    2b5a:	430a      	orrs	r2, r1
    2b5c:	d03a      	beq.n	2bd4 <__aeabi_dsub+0x610>
    2b5e:	08ed      	lsrs	r5, r5, #3
    2b60:	077c      	lsls	r4, r7, #29
    2b62:	432c      	orrs	r4, r5
    2b64:	2580      	movs	r5, #128	; 0x80
    2b66:	08fa      	lsrs	r2, r7, #3
    2b68:	032d      	lsls	r5, r5, #12
    2b6a:	422a      	tst	r2, r5
    2b6c:	d008      	beq.n	2b80 <__aeabi_dsub+0x5bc>
    2b6e:	08c7      	lsrs	r7, r0, #3
    2b70:	422f      	tst	r7, r5
    2b72:	d105      	bne.n	2b80 <__aeabi_dsub+0x5bc>
    2b74:	0745      	lsls	r5, r0, #29
    2b76:	002c      	movs	r4, r5
    2b78:	003a      	movs	r2, r7
    2b7a:	469a      	mov	sl, r3
    2b7c:	08c9      	lsrs	r1, r1, #3
    2b7e:	430c      	orrs	r4, r1
    2b80:	0f67      	lsrs	r7, r4, #29
    2b82:	00d2      	lsls	r2, r2, #3
    2b84:	00e5      	lsls	r5, r4, #3
    2b86:	4317      	orrs	r7, r2
    2b88:	4c36      	ldr	r4, [pc, #216]	; (2c64 <__aeabi_dsub+0x6a0>)
    2b8a:	e547      	b.n	261c <__aeabi_dsub+0x58>
    2b8c:	0007      	movs	r7, r0
    2b8e:	000d      	movs	r5, r1
    2b90:	0014      	movs	r4, r2
    2b92:	e543      	b.n	261c <__aeabi_dsub+0x58>
    2b94:	003a      	movs	r2, r7
    2b96:	432a      	orrs	r2, r5
    2b98:	d043      	beq.n	2c22 <__aeabi_dsub+0x65e>
    2b9a:	0002      	movs	r2, r0
    2b9c:	430a      	orrs	r2, r1
    2b9e:	d019      	beq.n	2bd4 <__aeabi_dsub+0x610>
    2ba0:	08ed      	lsrs	r5, r5, #3
    2ba2:	077c      	lsls	r4, r7, #29
    2ba4:	432c      	orrs	r4, r5
    2ba6:	2580      	movs	r5, #128	; 0x80
    2ba8:	08fa      	lsrs	r2, r7, #3
    2baa:	032d      	lsls	r5, r5, #12
    2bac:	422a      	tst	r2, r5
    2bae:	d007      	beq.n	2bc0 <__aeabi_dsub+0x5fc>
    2bb0:	08c6      	lsrs	r6, r0, #3
    2bb2:	422e      	tst	r6, r5
    2bb4:	d104      	bne.n	2bc0 <__aeabi_dsub+0x5fc>
    2bb6:	0747      	lsls	r7, r0, #29
    2bb8:	003c      	movs	r4, r7
    2bba:	0032      	movs	r2, r6
    2bbc:	08c9      	lsrs	r1, r1, #3
    2bbe:	430c      	orrs	r4, r1
    2bc0:	00d7      	lsls	r7, r2, #3
    2bc2:	0f62      	lsrs	r2, r4, #29
    2bc4:	00e5      	lsls	r5, r4, #3
    2bc6:	4317      	orrs	r7, r2
    2bc8:	469a      	mov	sl, r3
    2bca:	4c26      	ldr	r4, [pc, #152]	; (2c64 <__aeabi_dsub+0x6a0>)
    2bcc:	e526      	b.n	261c <__aeabi_dsub+0x58>
    2bce:	2200      	movs	r2, #0
    2bd0:	2500      	movs	r5, #0
    2bd2:	e544      	b.n	265e <__aeabi_dsub+0x9a>
    2bd4:	4c23      	ldr	r4, [pc, #140]	; (2c64 <__aeabi_dsub+0x6a0>)
    2bd6:	e521      	b.n	261c <__aeabi_dsub+0x58>
    2bd8:	2000      	movs	r0, #0
    2bda:	e749      	b.n	2a70 <__aeabi_dsub+0x4ac>
    2bdc:	2300      	movs	r3, #0
    2bde:	2500      	movs	r5, #0
    2be0:	e5bb      	b.n	275a <__aeabi_dsub+0x196>
    2be2:	464c      	mov	r4, r9
    2be4:	003e      	movs	r6, r7
    2be6:	3c20      	subs	r4, #32
    2be8:	40e6      	lsrs	r6, r4
    2bea:	464c      	mov	r4, r9
    2bec:	46b4      	mov	ip, r6
    2bee:	2c20      	cmp	r4, #32
    2bf0:	d031      	beq.n	2c56 <__aeabi_dsub+0x692>
    2bf2:	2440      	movs	r4, #64	; 0x40
    2bf4:	464e      	mov	r6, r9
    2bf6:	1ba6      	subs	r6, r4, r6
    2bf8:	40b7      	lsls	r7, r6
    2bfa:	433d      	orrs	r5, r7
    2bfc:	1e6c      	subs	r4, r5, #1
    2bfe:	41a5      	sbcs	r5, r4
    2c00:	4664      	mov	r4, ip
    2c02:	432c      	orrs	r4, r5
    2c04:	2700      	movs	r7, #0
    2c06:	1b0d      	subs	r5, r1, r4
    2c08:	e6e7      	b.n	29da <__aeabi_dsub+0x416>
    2c0a:	2280      	movs	r2, #128	; 0x80
    2c0c:	2300      	movs	r3, #0
    2c0e:	0312      	lsls	r2, r2, #12
    2c10:	4c14      	ldr	r4, [pc, #80]	; (2c64 <__aeabi_dsub+0x6a0>)
    2c12:	2500      	movs	r5, #0
    2c14:	e5a1      	b.n	275a <__aeabi_dsub+0x196>
    2c16:	433d      	orrs	r5, r7
    2c18:	1e6f      	subs	r7, r5, #1
    2c1a:	41bd      	sbcs	r5, r7
    2c1c:	2700      	movs	r7, #0
    2c1e:	b2ed      	uxtb	r5, r5
    2c20:	e760      	b.n	2ae4 <__aeabi_dsub+0x520>
    2c22:	0007      	movs	r7, r0
    2c24:	000d      	movs	r5, r1
    2c26:	4c0f      	ldr	r4, [pc, #60]	; (2c64 <__aeabi_dsub+0x6a0>)
    2c28:	e4f8      	b.n	261c <__aeabi_dsub+0x58>
    2c2a:	0007      	movs	r7, r0
    2c2c:	000d      	movs	r5, r1
    2c2e:	e4f5      	b.n	261c <__aeabi_dsub+0x58>
    2c30:	464e      	mov	r6, r9
    2c32:	003c      	movs	r4, r7
    2c34:	3e20      	subs	r6, #32
    2c36:	40f4      	lsrs	r4, r6
    2c38:	46a0      	mov	r8, r4
    2c3a:	464c      	mov	r4, r9
    2c3c:	2c20      	cmp	r4, #32
    2c3e:	d00e      	beq.n	2c5e <__aeabi_dsub+0x69a>
    2c40:	2440      	movs	r4, #64	; 0x40
    2c42:	464e      	mov	r6, r9
    2c44:	1ba4      	subs	r4, r4, r6
    2c46:	40a7      	lsls	r7, r4
    2c48:	433d      	orrs	r5, r7
    2c4a:	1e6f      	subs	r7, r5, #1
    2c4c:	41bd      	sbcs	r5, r7
    2c4e:	4644      	mov	r4, r8
    2c50:	2700      	movs	r7, #0
    2c52:	4325      	orrs	r5, r4
    2c54:	e746      	b.n	2ae4 <__aeabi_dsub+0x520>
    2c56:	2700      	movs	r7, #0
    2c58:	e7cf      	b.n	2bfa <__aeabi_dsub+0x636>
    2c5a:	000d      	movs	r5, r1
    2c5c:	e573      	b.n	2746 <__aeabi_dsub+0x182>
    2c5e:	2700      	movs	r7, #0
    2c60:	e7f2      	b.n	2c48 <__aeabi_dsub+0x684>
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	000007ff 	.word	0x000007ff
    2c68:	ff7fffff 	.word	0xff7fffff

00002c6c <__aeabi_d2iz>:
    2c6c:	030b      	lsls	r3, r1, #12
    2c6e:	b530      	push	{r4, r5, lr}
    2c70:	4d13      	ldr	r5, [pc, #76]	; (2cc0 <__aeabi_d2iz+0x54>)
    2c72:	0b1a      	lsrs	r2, r3, #12
    2c74:	004b      	lsls	r3, r1, #1
    2c76:	0d5b      	lsrs	r3, r3, #21
    2c78:	0fc9      	lsrs	r1, r1, #31
    2c7a:	2400      	movs	r4, #0
    2c7c:	42ab      	cmp	r3, r5
    2c7e:	dd11      	ble.n	2ca4 <__aeabi_d2iz+0x38>
    2c80:	4c10      	ldr	r4, [pc, #64]	; (2cc4 <__aeabi_d2iz+0x58>)
    2c82:	42a3      	cmp	r3, r4
    2c84:	dc10      	bgt.n	2ca8 <__aeabi_d2iz+0x3c>
    2c86:	2480      	movs	r4, #128	; 0x80
    2c88:	0364      	lsls	r4, r4, #13
    2c8a:	4322      	orrs	r2, r4
    2c8c:	4c0e      	ldr	r4, [pc, #56]	; (2cc8 <__aeabi_d2iz+0x5c>)
    2c8e:	1ae4      	subs	r4, r4, r3
    2c90:	2c1f      	cmp	r4, #31
    2c92:	dd0c      	ble.n	2cae <__aeabi_d2iz+0x42>
    2c94:	480d      	ldr	r0, [pc, #52]	; (2ccc <__aeabi_d2iz+0x60>)
    2c96:	1ac3      	subs	r3, r0, r3
    2c98:	40da      	lsrs	r2, r3
    2c9a:	0013      	movs	r3, r2
    2c9c:	425c      	negs	r4, r3
    2c9e:	2900      	cmp	r1, #0
    2ca0:	d100      	bne.n	2ca4 <__aeabi_d2iz+0x38>
    2ca2:	001c      	movs	r4, r3
    2ca4:	0020      	movs	r0, r4
    2ca6:	bd30      	pop	{r4, r5, pc}
    2ca8:	4b09      	ldr	r3, [pc, #36]	; (2cd0 <__aeabi_d2iz+0x64>)
    2caa:	18cc      	adds	r4, r1, r3
    2cac:	e7fa      	b.n	2ca4 <__aeabi_d2iz+0x38>
    2cae:	40e0      	lsrs	r0, r4
    2cb0:	4c08      	ldr	r4, [pc, #32]	; (2cd4 <__aeabi_d2iz+0x68>)
    2cb2:	46a4      	mov	ip, r4
    2cb4:	4463      	add	r3, ip
    2cb6:	409a      	lsls	r2, r3
    2cb8:	0013      	movs	r3, r2
    2cba:	4303      	orrs	r3, r0
    2cbc:	e7ee      	b.n	2c9c <__aeabi_d2iz+0x30>
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	000003fe 	.word	0x000003fe
    2cc4:	0000041d 	.word	0x0000041d
    2cc8:	00000433 	.word	0x00000433
    2ccc:	00000413 	.word	0x00000413
    2cd0:	7fffffff 	.word	0x7fffffff
    2cd4:	fffffbed 	.word	0xfffffbed

00002cd8 <__aeabi_i2d>:
    2cd8:	b570      	push	{r4, r5, r6, lr}
    2cda:	2800      	cmp	r0, #0
    2cdc:	d030      	beq.n	2d40 <__aeabi_i2d+0x68>
    2cde:	17c3      	asrs	r3, r0, #31
    2ce0:	18c4      	adds	r4, r0, r3
    2ce2:	405c      	eors	r4, r3
    2ce4:	0fc5      	lsrs	r5, r0, #31
    2ce6:	0020      	movs	r0, r4
    2ce8:	f000 f950 	bl	2f8c <__clzsi2>
    2cec:	4b17      	ldr	r3, [pc, #92]	; (2d4c <__aeabi_i2d+0x74>)
    2cee:	4a18      	ldr	r2, [pc, #96]	; (2d50 <__aeabi_i2d+0x78>)
    2cf0:	1a1b      	subs	r3, r3, r0
    2cf2:	1ad2      	subs	r2, r2, r3
    2cf4:	2a1f      	cmp	r2, #31
    2cf6:	dd18      	ble.n	2d2a <__aeabi_i2d+0x52>
    2cf8:	4a16      	ldr	r2, [pc, #88]	; (2d54 <__aeabi_i2d+0x7c>)
    2cfa:	1ad2      	subs	r2, r2, r3
    2cfc:	4094      	lsls	r4, r2
    2cfe:	2200      	movs	r2, #0
    2d00:	0324      	lsls	r4, r4, #12
    2d02:	055b      	lsls	r3, r3, #21
    2d04:	0b24      	lsrs	r4, r4, #12
    2d06:	0d5b      	lsrs	r3, r3, #21
    2d08:	2100      	movs	r1, #0
    2d0a:	0010      	movs	r0, r2
    2d0c:	0324      	lsls	r4, r4, #12
    2d0e:	0d0a      	lsrs	r2, r1, #20
    2d10:	0512      	lsls	r2, r2, #20
    2d12:	0b24      	lsrs	r4, r4, #12
    2d14:	4314      	orrs	r4, r2
    2d16:	4a10      	ldr	r2, [pc, #64]	; (2d58 <__aeabi_i2d+0x80>)
    2d18:	051b      	lsls	r3, r3, #20
    2d1a:	4014      	ands	r4, r2
    2d1c:	431c      	orrs	r4, r3
    2d1e:	0064      	lsls	r4, r4, #1
    2d20:	07ed      	lsls	r5, r5, #31
    2d22:	0864      	lsrs	r4, r4, #1
    2d24:	432c      	orrs	r4, r5
    2d26:	0021      	movs	r1, r4
    2d28:	bd70      	pop	{r4, r5, r6, pc}
    2d2a:	0021      	movs	r1, r4
    2d2c:	4091      	lsls	r1, r2
    2d2e:	000a      	movs	r2, r1
    2d30:	210b      	movs	r1, #11
    2d32:	1a08      	subs	r0, r1, r0
    2d34:	40c4      	lsrs	r4, r0
    2d36:	055b      	lsls	r3, r3, #21
    2d38:	0324      	lsls	r4, r4, #12
    2d3a:	0b24      	lsrs	r4, r4, #12
    2d3c:	0d5b      	lsrs	r3, r3, #21
    2d3e:	e7e3      	b.n	2d08 <__aeabi_i2d+0x30>
    2d40:	2500      	movs	r5, #0
    2d42:	2300      	movs	r3, #0
    2d44:	2400      	movs	r4, #0
    2d46:	2200      	movs	r2, #0
    2d48:	e7de      	b.n	2d08 <__aeabi_i2d+0x30>
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	0000041e 	.word	0x0000041e
    2d50:	00000433 	.word	0x00000433
    2d54:	00000413 	.word	0x00000413
    2d58:	800fffff 	.word	0x800fffff

00002d5c <__aeabi_ui2d>:
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	1e05      	subs	r5, r0, #0
    2d60:	d028      	beq.n	2db4 <__aeabi_ui2d+0x58>
    2d62:	f000 f913 	bl	2f8c <__clzsi2>
    2d66:	4b15      	ldr	r3, [pc, #84]	; (2dbc <__aeabi_ui2d+0x60>)
    2d68:	4a15      	ldr	r2, [pc, #84]	; (2dc0 <__aeabi_ui2d+0x64>)
    2d6a:	1a1b      	subs	r3, r3, r0
    2d6c:	1ad2      	subs	r2, r2, r3
    2d6e:	2a1f      	cmp	r2, #31
    2d70:	dd16      	ble.n	2da0 <__aeabi_ui2d+0x44>
    2d72:	002c      	movs	r4, r5
    2d74:	4a13      	ldr	r2, [pc, #76]	; (2dc4 <__aeabi_ui2d+0x68>)
    2d76:	2500      	movs	r5, #0
    2d78:	1ad2      	subs	r2, r2, r3
    2d7a:	4094      	lsls	r4, r2
    2d7c:	055a      	lsls	r2, r3, #21
    2d7e:	0324      	lsls	r4, r4, #12
    2d80:	0b24      	lsrs	r4, r4, #12
    2d82:	0d52      	lsrs	r2, r2, #21
    2d84:	2100      	movs	r1, #0
    2d86:	0324      	lsls	r4, r4, #12
    2d88:	0d0b      	lsrs	r3, r1, #20
    2d8a:	0b24      	lsrs	r4, r4, #12
    2d8c:	051b      	lsls	r3, r3, #20
    2d8e:	4323      	orrs	r3, r4
    2d90:	4c0d      	ldr	r4, [pc, #52]	; (2dc8 <__aeabi_ui2d+0x6c>)
    2d92:	0512      	lsls	r2, r2, #20
    2d94:	4023      	ands	r3, r4
    2d96:	4313      	orrs	r3, r2
    2d98:	005b      	lsls	r3, r3, #1
    2d9a:	0028      	movs	r0, r5
    2d9c:	0859      	lsrs	r1, r3, #1
    2d9e:	bd70      	pop	{r4, r5, r6, pc}
    2da0:	210b      	movs	r1, #11
    2da2:	002c      	movs	r4, r5
    2da4:	1a08      	subs	r0, r1, r0
    2da6:	40c4      	lsrs	r4, r0
    2da8:	4095      	lsls	r5, r2
    2daa:	0324      	lsls	r4, r4, #12
    2dac:	055a      	lsls	r2, r3, #21
    2dae:	0b24      	lsrs	r4, r4, #12
    2db0:	0d52      	lsrs	r2, r2, #21
    2db2:	e7e7      	b.n	2d84 <__aeabi_ui2d+0x28>
    2db4:	2200      	movs	r2, #0
    2db6:	2400      	movs	r4, #0
    2db8:	e7e4      	b.n	2d84 <__aeabi_ui2d+0x28>
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	0000041e 	.word	0x0000041e
    2dc0:	00000433 	.word	0x00000433
    2dc4:	00000413 	.word	0x00000413
    2dc8:	800fffff 	.word	0x800fffff

00002dcc <__aeabi_f2d>:
    2dcc:	0042      	lsls	r2, r0, #1
    2dce:	0e12      	lsrs	r2, r2, #24
    2dd0:	1c51      	adds	r1, r2, #1
    2dd2:	0243      	lsls	r3, r0, #9
    2dd4:	b2c9      	uxtb	r1, r1
    2dd6:	b570      	push	{r4, r5, r6, lr}
    2dd8:	0a5d      	lsrs	r5, r3, #9
    2dda:	0fc4      	lsrs	r4, r0, #31
    2ddc:	2901      	cmp	r1, #1
    2dde:	dd15      	ble.n	2e0c <__aeabi_f2d+0x40>
    2de0:	21e0      	movs	r1, #224	; 0xe0
    2de2:	0089      	lsls	r1, r1, #2
    2de4:	468c      	mov	ip, r1
    2de6:	076d      	lsls	r5, r5, #29
    2de8:	0b1b      	lsrs	r3, r3, #12
    2dea:	4462      	add	r2, ip
    2dec:	2100      	movs	r1, #0
    2dee:	0028      	movs	r0, r5
    2df0:	0d0d      	lsrs	r5, r1, #20
    2df2:	052d      	lsls	r5, r5, #20
    2df4:	432b      	orrs	r3, r5
    2df6:	4d1c      	ldr	r5, [pc, #112]	; (2e68 <__aeabi_f2d+0x9c>)
    2df8:	0552      	lsls	r2, r2, #21
    2dfa:	402b      	ands	r3, r5
    2dfc:	0852      	lsrs	r2, r2, #1
    2dfe:	4313      	orrs	r3, r2
    2e00:	005b      	lsls	r3, r3, #1
    2e02:	07e4      	lsls	r4, r4, #31
    2e04:	085b      	lsrs	r3, r3, #1
    2e06:	4323      	orrs	r3, r4
    2e08:	0019      	movs	r1, r3
    2e0a:	bd70      	pop	{r4, r5, r6, pc}
    2e0c:	2a00      	cmp	r2, #0
    2e0e:	d115      	bne.n	2e3c <__aeabi_f2d+0x70>
    2e10:	2d00      	cmp	r5, #0
    2e12:	d01f      	beq.n	2e54 <__aeabi_f2d+0x88>
    2e14:	0028      	movs	r0, r5
    2e16:	f000 f8b9 	bl	2f8c <__clzsi2>
    2e1a:	280a      	cmp	r0, #10
    2e1c:	dc1d      	bgt.n	2e5a <__aeabi_f2d+0x8e>
    2e1e:	230b      	movs	r3, #11
    2e20:	002a      	movs	r2, r5
    2e22:	1a1b      	subs	r3, r3, r0
    2e24:	40da      	lsrs	r2, r3
    2e26:	0013      	movs	r3, r2
    2e28:	0002      	movs	r2, r0
    2e2a:	3215      	adds	r2, #21
    2e2c:	4095      	lsls	r5, r2
    2e2e:	4a0f      	ldr	r2, [pc, #60]	; (2e6c <__aeabi_f2d+0xa0>)
    2e30:	031b      	lsls	r3, r3, #12
    2e32:	1a12      	subs	r2, r2, r0
    2e34:	0552      	lsls	r2, r2, #21
    2e36:	0b1b      	lsrs	r3, r3, #12
    2e38:	0d52      	lsrs	r2, r2, #21
    2e3a:	e7d7      	b.n	2dec <__aeabi_f2d+0x20>
    2e3c:	2d00      	cmp	r5, #0
    2e3e:	d006      	beq.n	2e4e <__aeabi_f2d+0x82>
    2e40:	2280      	movs	r2, #128	; 0x80
    2e42:	0b1b      	lsrs	r3, r3, #12
    2e44:	0312      	lsls	r2, r2, #12
    2e46:	4313      	orrs	r3, r2
    2e48:	076d      	lsls	r5, r5, #29
    2e4a:	4a09      	ldr	r2, [pc, #36]	; (2e70 <__aeabi_f2d+0xa4>)
    2e4c:	e7ce      	b.n	2dec <__aeabi_f2d+0x20>
    2e4e:	4a08      	ldr	r2, [pc, #32]	; (2e70 <__aeabi_f2d+0xa4>)
    2e50:	2300      	movs	r3, #0
    2e52:	e7cb      	b.n	2dec <__aeabi_f2d+0x20>
    2e54:	2200      	movs	r2, #0
    2e56:	2300      	movs	r3, #0
    2e58:	e7c8      	b.n	2dec <__aeabi_f2d+0x20>
    2e5a:	0003      	movs	r3, r0
    2e5c:	3b0b      	subs	r3, #11
    2e5e:	409d      	lsls	r5, r3
    2e60:	002b      	movs	r3, r5
    2e62:	2500      	movs	r5, #0
    2e64:	e7e3      	b.n	2e2e <__aeabi_f2d+0x62>
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	800fffff 	.word	0x800fffff
    2e6c:	00000389 	.word	0x00000389
    2e70:	000007ff 	.word	0x000007ff

00002e74 <__aeabi_d2f>:
    2e74:	004b      	lsls	r3, r1, #1
    2e76:	b570      	push	{r4, r5, r6, lr}
    2e78:	0d5e      	lsrs	r6, r3, #21
    2e7a:	030c      	lsls	r4, r1, #12
    2e7c:	1c75      	adds	r5, r6, #1
    2e7e:	0a64      	lsrs	r4, r4, #9
    2e80:	0f42      	lsrs	r2, r0, #29
    2e82:	056d      	lsls	r5, r5, #21
    2e84:	4322      	orrs	r2, r4
    2e86:	0fc9      	lsrs	r1, r1, #31
    2e88:	00c4      	lsls	r4, r0, #3
    2e8a:	0d6d      	lsrs	r5, r5, #21
    2e8c:	2d01      	cmp	r5, #1
    2e8e:	dd2a      	ble.n	2ee6 <__aeabi_d2f+0x72>
    2e90:	4b3b      	ldr	r3, [pc, #236]	; (2f80 <__aeabi_d2f+0x10c>)
    2e92:	18f3      	adds	r3, r6, r3
    2e94:	2bfe      	cmp	r3, #254	; 0xfe
    2e96:	dc1a      	bgt.n	2ece <__aeabi_d2f+0x5a>
    2e98:	2b00      	cmp	r3, #0
    2e9a:	dd42      	ble.n	2f22 <__aeabi_d2f+0xae>
    2e9c:	0180      	lsls	r0, r0, #6
    2e9e:	1e45      	subs	r5, r0, #1
    2ea0:	41a8      	sbcs	r0, r5
    2ea2:	00d2      	lsls	r2, r2, #3
    2ea4:	4310      	orrs	r0, r2
    2ea6:	0f62      	lsrs	r2, r4, #29
    2ea8:	4302      	orrs	r2, r0
    2eaa:	0750      	lsls	r0, r2, #29
    2eac:	d004      	beq.n	2eb8 <__aeabi_d2f+0x44>
    2eae:	200f      	movs	r0, #15
    2eb0:	4010      	ands	r0, r2
    2eb2:	2804      	cmp	r0, #4
    2eb4:	d000      	beq.n	2eb8 <__aeabi_d2f+0x44>
    2eb6:	3204      	adds	r2, #4
    2eb8:	2080      	movs	r0, #128	; 0x80
    2eba:	04c0      	lsls	r0, r0, #19
    2ebc:	4010      	ands	r0, r2
    2ebe:	d021      	beq.n	2f04 <__aeabi_d2f+0x90>
    2ec0:	3301      	adds	r3, #1
    2ec2:	2bff      	cmp	r3, #255	; 0xff
    2ec4:	d003      	beq.n	2ece <__aeabi_d2f+0x5a>
    2ec6:	0192      	lsls	r2, r2, #6
    2ec8:	0a52      	lsrs	r2, r2, #9
    2eca:	b2db      	uxtb	r3, r3
    2ecc:	e001      	b.n	2ed2 <__aeabi_d2f+0x5e>
    2ece:	23ff      	movs	r3, #255	; 0xff
    2ed0:	2200      	movs	r2, #0
    2ed2:	0252      	lsls	r2, r2, #9
    2ed4:	0a52      	lsrs	r2, r2, #9
    2ed6:	05db      	lsls	r3, r3, #23
    2ed8:	4313      	orrs	r3, r2
    2eda:	005b      	lsls	r3, r3, #1
    2edc:	07c9      	lsls	r1, r1, #31
    2ede:	085b      	lsrs	r3, r3, #1
    2ee0:	430b      	orrs	r3, r1
    2ee2:	0018      	movs	r0, r3
    2ee4:	bd70      	pop	{r4, r5, r6, pc}
    2ee6:	2e00      	cmp	r6, #0
    2ee8:	d007      	beq.n	2efa <__aeabi_d2f+0x86>
    2eea:	4314      	orrs	r4, r2
    2eec:	d0ef      	beq.n	2ece <__aeabi_d2f+0x5a>
    2eee:	2080      	movs	r0, #128	; 0x80
    2ef0:	00d2      	lsls	r2, r2, #3
    2ef2:	0480      	lsls	r0, r0, #18
    2ef4:	4302      	orrs	r2, r0
    2ef6:	23ff      	movs	r3, #255	; 0xff
    2ef8:	e7d7      	b.n	2eaa <__aeabi_d2f+0x36>
    2efa:	4322      	orrs	r2, r4
    2efc:	2300      	movs	r3, #0
    2efe:	2a00      	cmp	r2, #0
    2f00:	d003      	beq.n	2f0a <__aeabi_d2f+0x96>
    2f02:	2205      	movs	r2, #5
    2f04:	08d2      	lsrs	r2, r2, #3
    2f06:	2bff      	cmp	r3, #255	; 0xff
    2f08:	d003      	beq.n	2f12 <__aeabi_d2f+0x9e>
    2f0a:	0252      	lsls	r2, r2, #9
    2f0c:	0a52      	lsrs	r2, r2, #9
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	e7df      	b.n	2ed2 <__aeabi_d2f+0x5e>
    2f12:	2a00      	cmp	r2, #0
    2f14:	d032      	beq.n	2f7c <__aeabi_d2f+0x108>
    2f16:	2080      	movs	r0, #128	; 0x80
    2f18:	03c0      	lsls	r0, r0, #15
    2f1a:	4302      	orrs	r2, r0
    2f1c:	0252      	lsls	r2, r2, #9
    2f1e:	0a52      	lsrs	r2, r2, #9
    2f20:	e7d7      	b.n	2ed2 <__aeabi_d2f+0x5e>
    2f22:	0018      	movs	r0, r3
    2f24:	3017      	adds	r0, #23
    2f26:	db14      	blt.n	2f52 <__aeabi_d2f+0xde>
    2f28:	2080      	movs	r0, #128	; 0x80
    2f2a:	0400      	lsls	r0, r0, #16
    2f2c:	4302      	orrs	r2, r0
    2f2e:	201e      	movs	r0, #30
    2f30:	1ac0      	subs	r0, r0, r3
    2f32:	281f      	cmp	r0, #31
    2f34:	dc0f      	bgt.n	2f56 <__aeabi_d2f+0xe2>
    2f36:	0025      	movs	r5, r4
    2f38:	4b12      	ldr	r3, [pc, #72]	; (2f84 <__aeabi_d2f+0x110>)
    2f3a:	18f3      	adds	r3, r6, r3
    2f3c:	409d      	lsls	r5, r3
    2f3e:	1e6e      	subs	r6, r5, #1
    2f40:	41b5      	sbcs	r5, r6
    2f42:	409a      	lsls	r2, r3
    2f44:	002b      	movs	r3, r5
    2f46:	4313      	orrs	r3, r2
    2f48:	0022      	movs	r2, r4
    2f4a:	40c2      	lsrs	r2, r0
    2f4c:	431a      	orrs	r2, r3
    2f4e:	2300      	movs	r3, #0
    2f50:	e7ab      	b.n	2eaa <__aeabi_d2f+0x36>
    2f52:	2300      	movs	r3, #0
    2f54:	e7d5      	b.n	2f02 <__aeabi_d2f+0x8e>
    2f56:	2502      	movs	r5, #2
    2f58:	426d      	negs	r5, r5
    2f5a:	1aeb      	subs	r3, r5, r3
    2f5c:	0015      	movs	r5, r2
    2f5e:	40dd      	lsrs	r5, r3
    2f60:	2820      	cmp	r0, #32
    2f62:	d009      	beq.n	2f78 <__aeabi_d2f+0x104>
    2f64:	4b08      	ldr	r3, [pc, #32]	; (2f88 <__aeabi_d2f+0x114>)
    2f66:	18f3      	adds	r3, r6, r3
    2f68:	409a      	lsls	r2, r3
    2f6a:	4314      	orrs	r4, r2
    2f6c:	1e62      	subs	r2, r4, #1
    2f6e:	4194      	sbcs	r4, r2
    2f70:	0022      	movs	r2, r4
    2f72:	2300      	movs	r3, #0
    2f74:	432a      	orrs	r2, r5
    2f76:	e798      	b.n	2eaa <__aeabi_d2f+0x36>
    2f78:	2200      	movs	r2, #0
    2f7a:	e7f6      	b.n	2f6a <__aeabi_d2f+0xf6>
    2f7c:	2200      	movs	r2, #0
    2f7e:	e7a8      	b.n	2ed2 <__aeabi_d2f+0x5e>
    2f80:	fffffc80 	.word	0xfffffc80
    2f84:	fffffc82 	.word	0xfffffc82
    2f88:	fffffca2 	.word	0xfffffca2

00002f8c <__clzsi2>:
    2f8c:	211c      	movs	r1, #28
    2f8e:	2301      	movs	r3, #1
    2f90:	041b      	lsls	r3, r3, #16
    2f92:	4298      	cmp	r0, r3
    2f94:	d301      	bcc.n	2f9a <__clzsi2+0xe>
    2f96:	0c00      	lsrs	r0, r0, #16
    2f98:	3910      	subs	r1, #16
    2f9a:	0a1b      	lsrs	r3, r3, #8
    2f9c:	4298      	cmp	r0, r3
    2f9e:	d301      	bcc.n	2fa4 <__clzsi2+0x18>
    2fa0:	0a00      	lsrs	r0, r0, #8
    2fa2:	3908      	subs	r1, #8
    2fa4:	091b      	lsrs	r3, r3, #4
    2fa6:	4298      	cmp	r0, r3
    2fa8:	d301      	bcc.n	2fae <__clzsi2+0x22>
    2faa:	0900      	lsrs	r0, r0, #4
    2fac:	3904      	subs	r1, #4
    2fae:	a202      	add	r2, pc, #8	; (adr r2, 2fb8 <__clzsi2+0x2c>)
    2fb0:	5c10      	ldrb	r0, [r2, r0]
    2fb2:	1840      	adds	r0, r0, r1
    2fb4:	4770      	bx	lr
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	02020304 	.word	0x02020304
    2fbc:	01010101 	.word	0x01010101
	...

00002fc8 <__libc_init_array>:
    2fc8:	b570      	push	{r4, r5, r6, lr}
    2fca:	4e0d      	ldr	r6, [pc, #52]	; (3000 <__libc_init_array+0x38>)
    2fcc:	4d0d      	ldr	r5, [pc, #52]	; (3004 <__libc_init_array+0x3c>)
    2fce:	2400      	movs	r4, #0
    2fd0:	1bad      	subs	r5, r5, r6
    2fd2:	10ad      	asrs	r5, r5, #2
    2fd4:	d005      	beq.n	2fe2 <__libc_init_array+0x1a>
    2fd6:	00a3      	lsls	r3, r4, #2
    2fd8:	58f3      	ldr	r3, [r6, r3]
    2fda:	3401      	adds	r4, #1
    2fdc:	4798      	blx	r3
    2fde:	42a5      	cmp	r5, r4
    2fe0:	d1f9      	bne.n	2fd6 <__libc_init_array+0xe>
    2fe2:	f000 f9cd 	bl	3380 <_init>
    2fe6:	4e08      	ldr	r6, [pc, #32]	; (3008 <__libc_init_array+0x40>)
    2fe8:	4d08      	ldr	r5, [pc, #32]	; (300c <__libc_init_array+0x44>)
    2fea:	2400      	movs	r4, #0
    2fec:	1bad      	subs	r5, r5, r6
    2fee:	10ad      	asrs	r5, r5, #2
    2ff0:	d005      	beq.n	2ffe <__libc_init_array+0x36>
    2ff2:	00a3      	lsls	r3, r4, #2
    2ff4:	58f3      	ldr	r3, [r6, r3]
    2ff6:	3401      	adds	r4, #1
    2ff8:	4798      	blx	r3
    2ffa:	42a5      	cmp	r5, r4
    2ffc:	d1f9      	bne.n	2ff2 <__libc_init_array+0x2a>
    2ffe:	bd70      	pop	{r4, r5, r6, pc}
    3000:	0000338c 	.word	0x0000338c
    3004:	0000338c 	.word	0x0000338c
    3008:	0000338c 	.word	0x0000338c
    300c:	00003394 	.word	0x00003394

00003010 <memset>:
    3010:	b570      	push	{r4, r5, r6, lr}
    3012:	0783      	lsls	r3, r0, #30
    3014:	d03f      	beq.n	3096 <memset+0x86>
    3016:	1e54      	subs	r4, r2, #1
    3018:	2a00      	cmp	r2, #0
    301a:	d03b      	beq.n	3094 <memset+0x84>
    301c:	b2ce      	uxtb	r6, r1
    301e:	0003      	movs	r3, r0
    3020:	2503      	movs	r5, #3
    3022:	e003      	b.n	302c <memset+0x1c>
    3024:	1e62      	subs	r2, r4, #1
    3026:	2c00      	cmp	r4, #0
    3028:	d034      	beq.n	3094 <memset+0x84>
    302a:	0014      	movs	r4, r2
    302c:	3301      	adds	r3, #1
    302e:	1e5a      	subs	r2, r3, #1
    3030:	7016      	strb	r6, [r2, #0]
    3032:	422b      	tst	r3, r5
    3034:	d1f6      	bne.n	3024 <memset+0x14>
    3036:	2c03      	cmp	r4, #3
    3038:	d924      	bls.n	3084 <memset+0x74>
    303a:	25ff      	movs	r5, #255	; 0xff
    303c:	400d      	ands	r5, r1
    303e:	022a      	lsls	r2, r5, #8
    3040:	4315      	orrs	r5, r2
    3042:	042a      	lsls	r2, r5, #16
    3044:	4315      	orrs	r5, r2
    3046:	2c0f      	cmp	r4, #15
    3048:	d911      	bls.n	306e <memset+0x5e>
    304a:	0026      	movs	r6, r4
    304c:	3e10      	subs	r6, #16
    304e:	0936      	lsrs	r6, r6, #4
    3050:	3601      	adds	r6, #1
    3052:	0136      	lsls	r6, r6, #4
    3054:	001a      	movs	r2, r3
    3056:	199b      	adds	r3, r3, r6
    3058:	6015      	str	r5, [r2, #0]
    305a:	6055      	str	r5, [r2, #4]
    305c:	6095      	str	r5, [r2, #8]
    305e:	60d5      	str	r5, [r2, #12]
    3060:	3210      	adds	r2, #16
    3062:	4293      	cmp	r3, r2
    3064:	d1f8      	bne.n	3058 <memset+0x48>
    3066:	220f      	movs	r2, #15
    3068:	4014      	ands	r4, r2
    306a:	2c03      	cmp	r4, #3
    306c:	d90a      	bls.n	3084 <memset+0x74>
    306e:	1f26      	subs	r6, r4, #4
    3070:	08b6      	lsrs	r6, r6, #2
    3072:	3601      	adds	r6, #1
    3074:	00b6      	lsls	r6, r6, #2
    3076:	001a      	movs	r2, r3
    3078:	199b      	adds	r3, r3, r6
    307a:	c220      	stmia	r2!, {r5}
    307c:	4293      	cmp	r3, r2
    307e:	d1fc      	bne.n	307a <memset+0x6a>
    3080:	2203      	movs	r2, #3
    3082:	4014      	ands	r4, r2
    3084:	2c00      	cmp	r4, #0
    3086:	d005      	beq.n	3094 <memset+0x84>
    3088:	b2c9      	uxtb	r1, r1
    308a:	191c      	adds	r4, r3, r4
    308c:	7019      	strb	r1, [r3, #0]
    308e:	3301      	adds	r3, #1
    3090:	429c      	cmp	r4, r3
    3092:	d1fb      	bne.n	308c <memset+0x7c>
    3094:	bd70      	pop	{r4, r5, r6, pc}
    3096:	0014      	movs	r4, r2
    3098:	0003      	movs	r3, r0
    309a:	e7cc      	b.n	3036 <memset+0x26>

0000309c <register_fini>:
    309c:	4b03      	ldr	r3, [pc, #12]	; (30ac <register_fini+0x10>)
    309e:	b510      	push	{r4, lr}
    30a0:	2b00      	cmp	r3, #0
    30a2:	d002      	beq.n	30aa <register_fini+0xe>
    30a4:	4802      	ldr	r0, [pc, #8]	; (30b0 <register_fini+0x14>)
    30a6:	f000 f805 	bl	30b4 <atexit>
    30aa:	bd10      	pop	{r4, pc}
    30ac:	00000000 	.word	0x00000000
    30b0:	000030c5 	.word	0x000030c5

000030b4 <atexit>:
    30b4:	b510      	push	{r4, lr}
    30b6:	0001      	movs	r1, r0
    30b8:	2300      	movs	r3, #0
    30ba:	2200      	movs	r2, #0
    30bc:	2000      	movs	r0, #0
    30be:	f000 f81b 	bl	30f8 <__register_exitproc>
    30c2:	bd10      	pop	{r4, pc}

000030c4 <__libc_fini_array>:
    30c4:	b570      	push	{r4, r5, r6, lr}
    30c6:	4b09      	ldr	r3, [pc, #36]	; (30ec <__libc_fini_array+0x28>)
    30c8:	4c09      	ldr	r4, [pc, #36]	; (30f0 <__libc_fini_array+0x2c>)
    30ca:	1ae4      	subs	r4, r4, r3
    30cc:	10a4      	asrs	r4, r4, #2
    30ce:	d009      	beq.n	30e4 <__libc_fini_array+0x20>
    30d0:	4a08      	ldr	r2, [pc, #32]	; (30f4 <__libc_fini_array+0x30>)
    30d2:	18a5      	adds	r5, r4, r2
    30d4:	00ad      	lsls	r5, r5, #2
    30d6:	18ed      	adds	r5, r5, r3
    30d8:	682b      	ldr	r3, [r5, #0]
    30da:	3c01      	subs	r4, #1
    30dc:	4798      	blx	r3
    30de:	3d04      	subs	r5, #4
    30e0:	2c00      	cmp	r4, #0
    30e2:	d1f9      	bne.n	30d8 <__libc_fini_array+0x14>
    30e4:	f000 f956 	bl	3394 <_fini>
    30e8:	bd70      	pop	{r4, r5, r6, pc}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	000033a0 	.word	0x000033a0
    30f0:	000033a4 	.word	0x000033a4
    30f4:	3fffffff 	.word	0x3fffffff

000030f8 <__register_exitproc>:
    30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30fa:	4644      	mov	r4, r8
    30fc:	465f      	mov	r7, fp
    30fe:	4656      	mov	r6, sl
    3100:	464d      	mov	r5, r9
    3102:	469b      	mov	fp, r3
    3104:	4b2f      	ldr	r3, [pc, #188]	; (31c4 <__register_exitproc+0xcc>)
    3106:	b4f0      	push	{r4, r5, r6, r7}
    3108:	681c      	ldr	r4, [r3, #0]
    310a:	23a4      	movs	r3, #164	; 0xa4
    310c:	005b      	lsls	r3, r3, #1
    310e:	0005      	movs	r5, r0
    3110:	58e0      	ldr	r0, [r4, r3]
    3112:	000e      	movs	r6, r1
    3114:	4690      	mov	r8, r2
    3116:	2800      	cmp	r0, #0
    3118:	d04b      	beq.n	31b2 <__register_exitproc+0xba>
    311a:	6843      	ldr	r3, [r0, #4]
    311c:	2b1f      	cmp	r3, #31
    311e:	dc0d      	bgt.n	313c <__register_exitproc+0x44>
    3120:	1c5c      	adds	r4, r3, #1
    3122:	2d00      	cmp	r5, #0
    3124:	d121      	bne.n	316a <__register_exitproc+0x72>
    3126:	3302      	adds	r3, #2
    3128:	009b      	lsls	r3, r3, #2
    312a:	6044      	str	r4, [r0, #4]
    312c:	501e      	str	r6, [r3, r0]
    312e:	2000      	movs	r0, #0
    3130:	bc3c      	pop	{r2, r3, r4, r5}
    3132:	4690      	mov	r8, r2
    3134:	4699      	mov	r9, r3
    3136:	46a2      	mov	sl, r4
    3138:	46ab      	mov	fp, r5
    313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    313c:	4b22      	ldr	r3, [pc, #136]	; (31c8 <__register_exitproc+0xd0>)
    313e:	2b00      	cmp	r3, #0
    3140:	d03c      	beq.n	31bc <__register_exitproc+0xc4>
    3142:	20c8      	movs	r0, #200	; 0xc8
    3144:	0040      	lsls	r0, r0, #1
    3146:	e000      	b.n	314a <__register_exitproc+0x52>
    3148:	bf00      	nop
    314a:	2800      	cmp	r0, #0
    314c:	d036      	beq.n	31bc <__register_exitproc+0xc4>
    314e:	22a4      	movs	r2, #164	; 0xa4
    3150:	2300      	movs	r3, #0
    3152:	0052      	lsls	r2, r2, #1
    3154:	58a1      	ldr	r1, [r4, r2]
    3156:	6043      	str	r3, [r0, #4]
    3158:	6001      	str	r1, [r0, #0]
    315a:	50a0      	str	r0, [r4, r2]
    315c:	3240      	adds	r2, #64	; 0x40
    315e:	5083      	str	r3, [r0, r2]
    3160:	3204      	adds	r2, #4
    3162:	5083      	str	r3, [r0, r2]
    3164:	2401      	movs	r4, #1
    3166:	2d00      	cmp	r5, #0
    3168:	d0dd      	beq.n	3126 <__register_exitproc+0x2e>
    316a:	009a      	lsls	r2, r3, #2
    316c:	4691      	mov	r9, r2
    316e:	4481      	add	r9, r0
    3170:	4642      	mov	r2, r8
    3172:	2188      	movs	r1, #136	; 0x88
    3174:	464f      	mov	r7, r9
    3176:	507a      	str	r2, [r7, r1]
    3178:	22c4      	movs	r2, #196	; 0xc4
    317a:	0052      	lsls	r2, r2, #1
    317c:	4690      	mov	r8, r2
    317e:	4480      	add	r8, r0
    3180:	4642      	mov	r2, r8
    3182:	3987      	subs	r1, #135	; 0x87
    3184:	4099      	lsls	r1, r3
    3186:	6812      	ldr	r2, [r2, #0]
    3188:	468a      	mov	sl, r1
    318a:	430a      	orrs	r2, r1
    318c:	4694      	mov	ip, r2
    318e:	4642      	mov	r2, r8
    3190:	4661      	mov	r1, ip
    3192:	6011      	str	r1, [r2, #0]
    3194:	2284      	movs	r2, #132	; 0x84
    3196:	4649      	mov	r1, r9
    3198:	465f      	mov	r7, fp
    319a:	0052      	lsls	r2, r2, #1
    319c:	508f      	str	r7, [r1, r2]
    319e:	2d02      	cmp	r5, #2
    31a0:	d1c1      	bne.n	3126 <__register_exitproc+0x2e>
    31a2:	0002      	movs	r2, r0
    31a4:	4655      	mov	r5, sl
    31a6:	328d      	adds	r2, #141	; 0x8d
    31a8:	32ff      	adds	r2, #255	; 0xff
    31aa:	6811      	ldr	r1, [r2, #0]
    31ac:	430d      	orrs	r5, r1
    31ae:	6015      	str	r5, [r2, #0]
    31b0:	e7b9      	b.n	3126 <__register_exitproc+0x2e>
    31b2:	0020      	movs	r0, r4
    31b4:	304d      	adds	r0, #77	; 0x4d
    31b6:	30ff      	adds	r0, #255	; 0xff
    31b8:	50e0      	str	r0, [r4, r3]
    31ba:	e7ae      	b.n	311a <__register_exitproc+0x22>
    31bc:	2001      	movs	r0, #1
    31be:	4240      	negs	r0, r0
    31c0:	e7b6      	b.n	3130 <__register_exitproc+0x38>
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	0000337c 	.word	0x0000337c
    31c8:	00000000 	.word	0x00000000

000031cc <spi2MOSI>:
    31cc:	0c000002 00000200                                .....

000031d1 <spi2SCK>:
    31d1:	0e000002 00000200                                .....

000031d6 <spi2MISO>:
    31d6:	0d000002 8d200000                                ......

000031dc <lookupTable.12463>:
    31dc:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    31ec:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    31fc:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    320c:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    321c:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    322c:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    323c:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    324c:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    325c:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    326c:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    327c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    328c:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    329c:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    32ac:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    32bc:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    32cc:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    32dc:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    32ec:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    32fc:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    330c:	000f048e                                ....

00003310 <senseBatPin>:
    3310:	06000000 01000106                                .....

00003315 <senseAPin>:
    3315:	03010001 0100010b                                .....

0000331a <senseBPin>:
    331a:	02010001 0000000a                                .....

0000331f <senseCPin>:
    331f:	03000000 00000001                                .....

00003324 <senseDPin>:
    3324:	02000000 00000000                                .....

00003329 <analogAccelPin>:
    3329:	07000000 00000207                                .....

0000332e <spi2MOSI>:
    332e:	0c000002 00000200                                .....

00003333 <spi2SCK>:
    3333:	0e000002 0022c000 00218000 00218000     ......"...!...!.
    3343:	00217e00 00229800 00229800 00228a00     .~!..."..."...".
    3353:	00217e00 00229800 00228a00 00229800     .~!..."..."...".
    3363:	00217e00 0022a000 0022a000 0022a000     .~!..."..."...".
    3373:	0024a000 00004300 00001000                       ..$..C...

0000337c <_global_impure_ptr>:
    337c:	20000010                                ... 

00003380 <_init>:
    3380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3386:	bc08      	pop	{r3}
    3388:	469e      	mov	lr, r3
    338a:	4770      	bx	lr

0000338c <__init_array_start>:
    338c:	0000309d 	.word	0x0000309d

00003390 <__frame_dummy_init_array_entry>:
    3390:	000000dd                                ....

00003394 <_fini>:
    3394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	bcf8      	pop	{r3, r4, r5, r6, r7}
    339a:	bc08      	pop	{r3}
    339c:	469e      	mov	lr, r3
    339e:	4770      	bx	lr

000033a0 <__fini_array_start>:
    33a0:	000000b5 	.word	0x000000b5
