
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066c4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  000066c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006b80  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006d30  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020360  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ba  00000000  00000000  00040885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000273b  00000000  00000000  0004313f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000420  00000000  00000000  0004587a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d40  00000000  00000000  00045c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001638d  00000000  00000000  000469da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009bb7  00000000  00000000  0005cd67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007294f  00000000  00000000  0006691e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000111c  00000000  00000000  000d9270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000fb5 	.word	0x00000fb5
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001055 	.word	0x00001055
      90:	000010bd 	.word	0x000010bd
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	000066c4 	.word	0x000066c4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	000066c4 	.word	0x000066c4
     10c:	000066c4 	.word	0x000066c4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000066c4 	.word	0x000066c4
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000624d 	.word	0x0000624d
     1d0:	00000aa9 	.word	0x00000aa9

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFChipErase>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFChipErase() {
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2580      	movs	r5, #128	; 0x80
     1e8:	4c09      	ldr	r4, [pc, #36]	; (210 <AT25SFChipErase+0x2c>)
     1ea:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ec:	4f09      	ldr	r7, [pc, #36]	; (214 <AT25SFChipErase+0x30>)
     1ee:	6165      	str	r5, [r4, #20]
     1f0:	2106      	movs	r1, #6
     1f2:	2001      	movs	r0, #1
     1f4:	47b8      	blx	r7
     1f6:	4e08      	ldr	r6, [pc, #32]	; (218 <AT25SFChipErase+0x34>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1f8:	2160      	movs	r1, #96	; 0x60
}

void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fa:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     1fc:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1fe:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     200:	6165      	str	r5, [r4, #20]
     202:	47b8      	blx	r7
    pinHigh(cs_mem);

    delay_ms(30000);
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <AT25SFChipErase+0x38>)
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     206:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     208:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    delay_ms(30000);
     20a:	4805      	ldr	r0, [pc, #20]	; (220 <AT25SFChipErase+0x3c>)
     20c:	4798      	blx	r3
}
     20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     210:	41004400 	.word	0x41004400
     214:	000026e1 	.word	0x000026e1
     218:	200004d0 	.word	0x200004d0
     21c:	00000f85 	.word	0x00000f85
     220:	00007530 	.word	0x00007530

00000224 <AT25SFGetByte>:

uint8_t AT25SFGetByte(uint32_t address) {
     224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     226:	2380      	movs	r3, #128	; 0x80
     228:	4f0f      	ldr	r7, [pc, #60]	; (268 <AT25SFGetByte+0x44>)
     22a:	02db      	lsls	r3, r3, #11
     22c:	617b      	str	r3, [r7, #20]
     22e:	0005      	movs	r5, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     230:	4c0e      	ldr	r4, [pc, #56]	; (26c <AT25SFGetByte+0x48>)
     232:	2103      	movs	r1, #3
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	4e0d      	ldr	r6, [pc, #52]	; (270 <AT25SFGetByte+0x4c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23a:	0c29      	lsrs	r1, r5, #16
}

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     23c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23e:	b2c9      	uxtb	r1, r1
     240:	2001      	movs	r0, #1
     242:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     244:	0a29      	lsrs	r1, r5, #8

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     246:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     248:	b2c9      	uxtb	r1, r1
     24a:	2001      	movs	r0, #1
     24c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     24e:	b2e9      	uxtb	r1, r5
uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     250:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     252:	2001      	movs	r0, #1
     254:	47a0      	blx	r4
     256:	7030      	strb	r0, [r6, #0]
     258:	0001      	movs	r1, r0

    uint8_t _byte = spiDataTransfer(SPI1,dummy_rx);
     25a:	2001      	movs	r0, #1
     25c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25e:	2380      	movs	r3, #128	; 0x80
     260:	02db      	lsls	r3, r3, #11
     262:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    return _byte;
}
     264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	41004400 	.word	0x41004400
     26c:	000026e1 	.word	0x000026e1
     270:	200004d0 	.word	0x200004d0

00000274 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     274:	2380      	movs	r3, #128	; 0x80

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     278:	4e19      	ldr	r6, [pc, #100]	; (2e0 <AT25SFWriteBytes+0x6c>)
     27a:	02db      	lsls	r3, r3, #11
     27c:	9201      	str	r2, [sp, #4]
     27e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     280:	4c18      	ldr	r4, [pc, #96]	; (2e4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     282:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     284:	2001      	movs	r0, #1
     286:	6173      	str	r3, [r6, #20]
     288:	2106      	movs	r1, #6
     28a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	4d16      	ldr	r5, [pc, #88]	; (2e8 <AT25SFWriteBytes+0x74>)
     290:	02db      	lsls	r3, r3, #11
     292:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     294:	2102      	movs	r1, #2
     296:	61b3      	str	r3, [r6, #24]
     298:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29a:	6173      	str	r3, [r6, #20]
     29c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     29e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2a0:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2a2:	b2c9      	uxtb	r1, r1
     2a4:	2001      	movs	r0, #1
     2a6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2a8:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2aa:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2ac:	b2c9      	uxtb	r1, r1
     2ae:	2001      	movs	r0, #1
     2b0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b2:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2b4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b6:	2001      	movs	r0, #1
     2b8:	47a0      	blx	r4
     2ba:	9b00      	ldr	r3, [sp, #0]
     2bc:	9f01      	ldr	r7, [sp, #4]
     2be:	7028      	strb	r0, [r5, #0]
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2c4:	9b00      	ldr	r3, [sp, #0]
     2c6:	429f      	cmp	r7, r3
     2c8:	d005      	beq.n	2d6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2ca:	7839      	ldrb	r1, [r7, #0]
     2cc:	2001      	movs	r0, #1
     2ce:	47a0      	blx	r4
     2d0:	3701      	adds	r7, #1
     2d2:	7028      	strb	r0, [r5, #0]
     2d4:	e7f6      	b.n	2c4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	02db      	lsls	r3, r3, #11
     2da:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	41004400 	.word	0x41004400
     2e4:	000026e1 	.word	0x000026e1
     2e8:	200004d0 	.word	0x200004d0

000002ec <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2f0:	4e18      	ldr	r6, [pc, #96]	; (354 <AT25SEWritePage+0x68>)
     2f2:	02db      	lsls	r3, r3, #11
     2f4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2f6:	4d18      	ldr	r5, [pc, #96]	; (358 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2f8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2fa:	2001      	movs	r0, #1
     2fc:	6173      	str	r3, [r6, #20]
     2fe:	2106      	movs	r1, #6
     300:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     302:	2380      	movs	r3, #128	; 0x80
     304:	4c15      	ldr	r4, [pc, #84]	; (35c <AT25SEWritePage+0x70>)
     306:	02db      	lsls	r3, r3, #11
     308:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     30a:	2102      	movs	r1, #2
     30c:	61b3      	str	r3, [r6, #24]
     30e:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     310:	6173      	str	r3, [r6, #20]
     312:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     314:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     316:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     318:	b2c9      	uxtb	r1, r1
     31a:	2001      	movs	r0, #1
     31c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     31e:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     320:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     328:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     32a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     32c:	2001      	movs	r0, #1
     32e:	47a8      	blx	r5
     330:	9f01      	ldr	r7, [sp, #4]
     332:	7020      	strb	r0, [r4, #0]
     334:	1c7b      	adds	r3, r7, #1
     336:	33ff      	adds	r3, #255	; 0xff
     338:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     33a:	7839      	ldrb	r1, [r7, #0]
     33c:	2001      	movs	r0, #1
     33e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     340:	9b01      	ldr	r3, [sp, #4]
     342:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     344:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     346:	429f      	cmp	r7, r3
     348:	d1f7      	bne.n	33a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	02db      	lsls	r3, r3, #11
     34e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     350:	2000      	movs	r0, #0
     352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     354:	41004400 	.word	0x41004400
     358:	000026e1 	.word	0x000026e1
     35c:	200004d0 	.word	0x200004d0

00000360 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     360:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     364:	4f17      	ldr	r7, [pc, #92]	; (3c4 <AT25SEreadSample+0x64>)
     366:	02db      	lsls	r3, r3, #11
     368:	9201      	str	r2, [sp, #4]
     36a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     36c:	4c16      	ldr	r4, [pc, #88]	; (3c8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     36e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     370:	2001      	movs	r0, #1
     372:	617b      	str	r3, [r7, #20]
     374:	210b      	movs	r1, #11
     376:	47a0      	blx	r4
     378:	4d14      	ldr	r5, [pc, #80]	; (3cc <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     37c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37e:	b2c9      	uxtb	r1, r1
     380:	2001      	movs	r0, #1
     382:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     384:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     386:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     388:	b2c9      	uxtb	r1, r1
     38a:	2001      	movs	r0, #1
     38c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     38e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     390:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     392:	2001      	movs	r0, #1
     394:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     396:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     398:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     39a:	2001      	movs	r0, #1
     39c:	47a0      	blx	r4
     39e:	9b00      	ldr	r3, [sp, #0]
     3a0:	9e01      	ldr	r6, [sp, #4]
     3a2:	7028      	strb	r0, [r5, #0]
     3a4:	18f3      	adds	r3, r6, r3
     3a6:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     3a8:	9b00      	ldr	r3, [sp, #0]
     3aa:	429e      	cmp	r6, r3
     3ac:	d005      	beq.n	3ba <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3ae:	7829      	ldrb	r1, [r5, #0]
     3b0:	2001      	movs	r0, #1
     3b2:	47a0      	blx	r4
     3b4:	7030      	strb	r0, [r6, #0]
     3b6:	3601      	adds	r6, #1
     3b8:	e7f6      	b.n	3a8 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3ba:	2380      	movs	r3, #128	; 0x80
     3bc:	02db      	lsls	r3, r3, #11
     3be:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	41004400 	.word	0x41004400
     3c8:	000026e1 	.word	0x000026e1
     3cc:	200004d0 	.word	0x200004d0

000003d0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3d0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3d4:	4f16      	ldr	r7, [pc, #88]	; (430 <AT25SEreadPage+0x60>)
     3d6:	02db      	lsls	r3, r3, #11
     3d8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3da:	4c16      	ldr	r4, [pc, #88]	; (434 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3dc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3de:	2001      	movs	r0, #1
     3e0:	617b      	str	r3, [r7, #20]
     3e2:	210b      	movs	r1, #11
     3e4:	47a0      	blx	r4
     3e6:	4d14      	ldr	r5, [pc, #80]	; (438 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3e8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ea:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3ec:	b2c9      	uxtb	r1, r1
     3ee:	2001      	movs	r0, #1
     3f0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3f4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f6:	b2c9      	uxtb	r1, r1
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3fc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     400:	2001      	movs	r0, #1
     402:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     404:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     406:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     408:	2001      	movs	r0, #1
     40a:	47a0      	blx	r4
     40c:	9e01      	ldr	r6, [sp, #4]
     40e:	7028      	strb	r0, [r5, #0]
     410:	1c73      	adds	r3, r6, #1
     412:	33ff      	adds	r3, #255	; 0xff
     414:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     416:	7829      	ldrb	r1, [r5, #0]
     418:	2001      	movs	r0, #1
     41a:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     41c:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     41e:	7030      	strb	r0, [r6, #0]
     420:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     422:	429e      	cmp	r6, r3
     424:	d1f7      	bne.n	416 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     426:	2380      	movs	r3, #128	; 0x80
     428:	02db      	lsls	r3, r3, #11
     42a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     42c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	41004400 	.word	0x41004400
     434:	000026e1 	.word	0x000026e1
     438:	200004d0 	.word	0x200004d0

0000043c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	4b28      	ldr	r3, [pc, #160]	; (4e0 <readMS5803AdcResults+0xa4>)
     440:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     442:	b5f0      	push	{r4, r5, r6, r7, lr}
     444:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     446:	2300      	movs	r3, #0
     448:	4d26      	ldr	r5, [pc, #152]	; (4e4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     44a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     44c:	9300      	str	r3, [sp, #0]
     44e:	786b      	ldrb	r3, [r5, #1]
     450:	7828      	ldrb	r0, [r5, #0]
     452:	78aa      	ldrb	r2, [r5, #2]
     454:	021b      	lsls	r3, r3, #8
     456:	4303      	orrs	r3, r0
     458:	0412      	lsls	r2, r2, #16
     45a:	0019      	movs	r1, r3
     45c:	0013      	movs	r3, r2
     45e:	430b      	orrs	r3, r1
     460:	79a9      	ldrb	r1, [r5, #6]
     462:	796f      	ldrb	r7, [r5, #5]
     464:	79ec      	ldrb	r4, [r5, #7]
     466:	0209      	lsls	r1, r1, #8
     468:	4339      	orrs	r1, r7
     46a:	0424      	lsls	r4, r4, #16
     46c:	0008      	movs	r0, r1
     46e:	0021      	movs	r1, r4
     470:	7a2c      	ldrb	r4, [r5, #8]
     472:	78ea      	ldrb	r2, [r5, #3]
     474:	7a6f      	ldrb	r7, [r5, #9]
     476:	4301      	orrs	r1, r0
     478:	0624      	lsls	r4, r4, #24
     47a:	430c      	orrs	r4, r1
     47c:	0612      	lsls	r2, r2, #24
     47e:	431a      	orrs	r2, r3
     480:	0020      	movs	r0, r4
     482:	792b      	ldrb	r3, [r5, #4]
     484:	0039      	movs	r1, r7
     486:	4e18      	ldr	r6, [pc, #96]	; (4e8 <readMS5803AdcResults+0xac>)
     488:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     48a:	7aeb      	ldrb	r3, [r5, #11]
     48c:	7aa9      	ldrb	r1, [r5, #10]
     48e:	021b      	lsls	r3, r3, #8
     490:	430b      	orrs	r3, r1
     492:	001a      	movs	r2, r3
     494:	7b2b      	ldrb	r3, [r5, #12]
     496:	4e15      	ldr	r6, [pc, #84]	; (4ec <readMS5803AdcResults+0xb0>)
     498:	041b      	lsls	r3, r3, #16
     49a:	4313      	orrs	r3, r2
     49c:	7b6a      	ldrb	r2, [r5, #13]
     49e:	7bad      	ldrb	r5, [r5, #14]
     4a0:	0612      	lsls	r2, r2, #24
     4a2:	431a      	orrs	r2, r3
     4a4:	0039      	movs	r1, r7
     4a6:	002b      	movs	r3, r5
     4a8:	0020      	movs	r0, r4
     4aa:	9203      	str	r2, [sp, #12]
     4ac:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ae:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4b0:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b2:	002b      	movs	r3, r5
     4b4:	0039      	movs	r1, r7
     4b6:	0020      	movs	r0, r4
     4b8:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4ba:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4bc:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4be:	002b      	movs	r3, r5
     4c0:	0020      	movs	r0, r4
     4c2:	0039      	movs	r1, r7
     4c4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <readMS5803AdcResults+0xa4>)
     4ca:	0212      	lsls	r2, r2, #8
     4cc:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ce:	9b04      	ldr	r3, [sp, #16]
     4d0:	9a05      	ldr	r2, [sp, #20]
     4d2:	041b      	lsls	r3, r3, #16
     4d4:	0215      	lsls	r5, r2, #8
     4d6:	431d      	orrs	r5, r3
     4d8:	4328      	orrs	r0, r5
}
     4da:	b007      	add	sp, #28
     4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	41004400 	.word	0x41004400
     4e4:	00006450 	.word	0x00006450
     4e8:	00000cad 	.word	0x00000cad
     4ec:	00000d19 	.word	0x00000d19

000004f0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4f2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4f6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4f8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4fa:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4fc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4fe:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     500:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     502:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     504:	8905      	ldrh	r5, [r0, #8]
     506:	6903      	ldr	r3, [r0, #16]
     508:	022d      	lsls	r5, r5, #8
     50a:	1b5b      	subs	r3, r3, r5
     50c:	2500      	movs	r5, #0
     50e:	9302      	str	r3, [sp, #8]
     510:	17db      	asrs	r3, r3, #31
     512:	9303      	str	r3, [sp, #12]
     514:	8940      	ldrh	r0, [r0, #10]
     516:	4f1f      	ldr	r7, [pc, #124]	; (594 <ConvertPressureTemperature+0xa4>)
     518:	9a02      	ldr	r2, [sp, #8]
     51a:	0029      	movs	r1, r5
     51c:	47b8      	blx	r7
     51e:	23fa      	movs	r3, #250	; 0xfa
     520:	0249      	lsls	r1, r1, #9
     522:	0dc0      	lsrs	r0, r0, #23
     524:	4308      	orrs	r0, r1
     526:	00db      	lsls	r3, r3, #3
     528:	18c0      	adds	r0, r0, r3
     52a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	9b03      	ldr	r3, [sp, #12]
     530:	0030      	movs	r0, r6
     532:	0029      	movs	r1, r5
     534:	47b8      	blx	r7
     536:	060b      	lsls	r3, r1, #24
     538:	120f      	asrs	r7, r1, #8
     53a:	0a06      	lsrs	r6, r0, #8
     53c:	9900      	ldr	r1, [sp, #0]
     53e:	431e      	orrs	r6, r3
     540:	03ca      	lsls	r2, r1, #15
     542:	002b      	movs	r3, r5
     544:	0030      	movs	r0, r6
     546:	0039      	movs	r1, r7
     548:	4e12      	ldr	r6, [pc, #72]	; (594 <ConvertPressureTemperature+0xa4>)
     54a:	1880      	adds	r0, r0, r2
     54c:	4159      	adcs	r1, r3
     54e:	68e2      	ldr	r2, [r4, #12]
     550:	47b0      	blx	r6
     552:	02cb      	lsls	r3, r1, #11
     554:	0d42      	lsrs	r2, r0, #21
     556:	431a      	orrs	r2, r3
     558:	154b      	asrs	r3, r1, #21
     55a:	9200      	str	r2, [sp, #0]
     55c:	9301      	str	r3, [sp, #4]
     55e:	9a02      	ldr	r2, [sp, #8]
     560:	9b03      	ldr	r3, [sp, #12]
     562:	4e0c      	ldr	r6, [pc, #48]	; (594 <ConvertPressureTemperature+0xa4>)
     564:	9805      	ldr	r0, [sp, #20]
     566:	0029      	movs	r1, r5
     568:	47b0      	blx	r6
     56a:	064b      	lsls	r3, r1, #25
     56c:	09c6      	lsrs	r6, r0, #7
     56e:	431e      	orrs	r6, r3
     570:	002b      	movs	r3, r5
     572:	11cf      	asrs	r7, r1, #7
     574:	9904      	ldr	r1, [sp, #16]
     576:	040a      	lsls	r2, r1, #16
     578:	1992      	adds	r2, r2, r6
     57a:	417b      	adcs	r3, r7
     57c:	9800      	ldr	r0, [sp, #0]
     57e:	9901      	ldr	r1, [sp, #4]
     580:	1a80      	subs	r0, r0, r2
     582:	4199      	sbcs	r1, r3
     584:	000a      	movs	r2, r1
     586:	0453      	lsls	r3, r2, #17
     588:	0bc2      	lsrs	r2, r0, #15
     58a:	431a      	orrs	r2, r3
     58c:	61e2      	str	r2, [r4, #28]

}
     58e:	b007      	add	sp, #28
     590:	bdf0      	pop	{r4, r5, r6, r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00003b25 	.word	0x00003b25

00000598 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     598:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59a:	4b0f      	ldr	r3, [pc, #60]	; (5d8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     59c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59e:	69c0      	ldr	r0, [r0, #28]
     5a0:	4798      	blx	r3
     5a2:	4d0e      	ldr	r5, [pc, #56]	; (5dc <paToFeetNOAA+0x44>)
     5a4:	2200      	movs	r2, #0
     5a6:	4b0e      	ldr	r3, [pc, #56]	; (5e0 <paToFeetNOAA+0x48>)
     5a8:	47a8      	blx	r5
     5aa:	2200      	movs	r2, #0
     5ac:	4b0d      	ldr	r3, [pc, #52]	; (5e4 <paToFeetNOAA+0x4c>)
     5ae:	47a8      	blx	r5
     5b0:	4a0d      	ldr	r2, [pc, #52]	; (5e8 <paToFeetNOAA+0x50>)
     5b2:	4b0e      	ldr	r3, [pc, #56]	; (5ec <paToFeetNOAA+0x54>)
     5b4:	4d0e      	ldr	r5, [pc, #56]	; (5f0 <paToFeetNOAA+0x58>)
     5b6:	47a8      	blx	r5
     5b8:	4d0e      	ldr	r5, [pc, #56]	; (5f4 <paToFeetNOAA+0x5c>)
     5ba:	0002      	movs	r2, r0
     5bc:	000b      	movs	r3, r1
     5be:	2000      	movs	r0, #0
     5c0:	490d      	ldr	r1, [pc, #52]	; (5f8 <paToFeetNOAA+0x60>)
     5c2:	47a8      	blx	r5
     5c4:	4a0d      	ldr	r2, [pc, #52]	; (5fc <paToFeetNOAA+0x64>)
     5c6:	4d0e      	ldr	r5, [pc, #56]	; (600 <paToFeetNOAA+0x68>)
     5c8:	4b0e      	ldr	r3, [pc, #56]	; (604 <paToFeetNOAA+0x6c>)
     5ca:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5cc:	4b0e      	ldr	r3, [pc, #56]	; (608 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ce:	62a0      	str	r0, [r4, #40]	; 0x28
     5d0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5d2:	4798      	blx	r3
     5d4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
     5d8:	00005e39 	.word	0x00005e39
     5dc:	000049a9 	.word	0x000049a9
     5e0:	40240000 	.word	0x40240000
     5e4:	408faa00 	.word	0x408faa00
     5e8:	e279dd3c 	.word	0xe279dd3c
     5ec:	3fc85b39 	.word	0x3fc85b39
     5f0:	00002801 	.word	0x00002801
     5f4:	000056e5 	.word	0x000056e5
     5f8:	3ff00000 	.word	0x3ff00000
     5fc:	9999999a 	.word	0x9999999a
     600:	000051f1 	.word	0x000051f1
     604:	4101beb3 	.word	0x4101beb3
     608:	00003bad 	.word	0x00003bad

0000060c <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	27a2      	movs	r7, #162	; 0xa2
     610:	b087      	sub	sp, #28
     612:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     614:	2096      	movs	r0, #150	; 0x96
     616:	4c2b      	ldr	r4, [pc, #172]	; (6c4 <readMS5803Coefficients+0xb8>)
     618:	0080      	lsls	r0, r0, #2
     61a:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     61c:	2096      	movs	r0, #150	; 0x96
     61e:	0080      	lsls	r0, r0, #2
     620:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     622:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     624:	4c28      	ldr	r4, [pc, #160]	; (6c8 <readMS5803Coefficients+0xbc>)
     626:	4b29      	ldr	r3, [pc, #164]	; (6cc <readMS5803Coefficients+0xc0>)
     628:	0212      	lsls	r2, r2, #8
     62a:	615a      	str	r2, [r3, #20]
     62c:	7863      	ldrb	r3, [r4, #1]
     62e:	7820      	ldrb	r0, [r4, #0]
     630:	78a2      	ldrb	r2, [r4, #2]
     632:	021b      	lsls	r3, r3, #8
     634:	4303      	orrs	r3, r0
     636:	0412      	lsls	r2, r2, #16
     638:	0019      	movs	r1, r3
     63a:	0013      	movs	r3, r2
     63c:	430b      	orrs	r3, r1
     63e:	79a1      	ldrb	r1, [r4, #6]
     640:	7966      	ldrb	r6, [r4, #5]
     642:	0209      	lsls	r1, r1, #8
     644:	4331      	orrs	r1, r6
     646:	0008      	movs	r0, r1
     648:	79e1      	ldrb	r1, [r4, #7]
     64a:	78e2      	ldrb	r2, [r4, #3]
     64c:	0409      	lsls	r1, r1, #16
     64e:	4301      	orrs	r1, r0
     650:	7a20      	ldrb	r0, [r4, #8]
     652:	7a66      	ldrb	r6, [r4, #9]
     654:	0612      	lsls	r2, r2, #24
     656:	0600      	lsls	r0, r0, #24
     658:	4308      	orrs	r0, r1
     65a:	431a      	orrs	r2, r3
     65c:	9700      	str	r7, [sp, #0]
     65e:	7923      	ldrb	r3, [r4, #4]
     660:	0031      	movs	r1, r6
     662:	4d1b      	ldr	r5, [pc, #108]	; (6d0 <readMS5803Coefficients+0xc4>)
     664:	9003      	str	r0, [sp, #12]
     666:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     668:	7ae3      	ldrb	r3, [r4, #11]
     66a:	0020      	movs	r0, r4
     66c:	7aa1      	ldrb	r1, [r4, #10]
     66e:	7b24      	ldrb	r4, [r4, #12]
     670:	021b      	lsls	r3, r3, #8
     672:	430b      	orrs	r3, r1
     674:	0424      	lsls	r4, r4, #16
     676:	001a      	movs	r2, r3
     678:	0023      	movs	r3, r4
     67a:	7b44      	ldrb	r4, [r0, #13]
     67c:	7b85      	ldrb	r5, [r0, #14]
     67e:	4313      	orrs	r3, r2
     680:	0624      	lsls	r4, r4, #24
     682:	431c      	orrs	r4, r3
     684:	0022      	movs	r2, r4
     686:	002b      	movs	r3, r5
     688:	9404      	str	r4, [sp, #16]
     68a:	0031      	movs	r1, r6
     68c:	4c11      	ldr	r4, [pc, #68]	; (6d4 <readMS5803Coefficients+0xc8>)
     68e:	9803      	ldr	r0, [sp, #12]
     690:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     692:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     694:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     696:	9a04      	ldr	r2, [sp, #16]
     698:	9803      	ldr	r0, [sp, #12]
     69a:	0031      	movs	r1, r6
     69c:	4c0d      	ldr	r4, [pc, #52]	; (6d4 <readMS5803Coefficients+0xc8>)
     69e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6a0:	2280      	movs	r2, #128	; 0x80
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <readMS5803Coefficients+0xc0>)
     6a4:	0212      	lsls	r2, r2, #8
     6a6:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     6a8:	9b05      	ldr	r3, [sp, #20]
     6aa:	021d      	lsls	r5, r3, #8
     6ac:	9b02      	ldr	r3, [sp, #8]
     6ae:	4328      	orrs	r0, r5
     6b0:	8018      	strh	r0, [r3, #0]
     6b2:	1cbb      	adds	r3, r7, #2
     6b4:	b2df      	uxtb	r7, r3
     6b6:	9b02      	ldr	r3, [sp, #8]
     6b8:	3302      	adds	r3, #2
     6ba:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     6bc:	2fae      	cmp	r7, #174	; 0xae
     6be:	d1a9      	bne.n	614 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6c0:	b007      	add	sp, #28
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6c4:	00000f55 	.word	0x00000f55
     6c8:	00006450 	.word	0x00006450
     6cc:	41004400 	.word	0x41004400
     6d0:	00000cad 	.word	0x00000cad
     6d4:	00000d19 	.word	0x00000d19

000006d8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6dc:	231e      	movs	r3, #30
     6de:	491a      	ldr	r1, [pc, #104]	; (748 <initMS5803Barometer+0x70>)
     6e0:	4d1a      	ldr	r5, [pc, #104]	; (74c <initMS5803Barometer+0x74>)
     6e2:	0236      	lsls	r6, r6, #8
     6e4:	616e      	str	r6, [r5, #20]
     6e6:	9300      	str	r3, [sp, #0]
     6e8:	784b      	ldrb	r3, [r1, #1]
     6ea:	780a      	ldrb	r2, [r1, #0]
     6ec:	021b      	lsls	r3, r3, #8
     6ee:	4313      	orrs	r3, r2
     6f0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6f2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6f4:	0412      	lsls	r2, r2, #16
     6f6:	0018      	movs	r0, r3
     6f8:	0013      	movs	r3, r2
     6fa:	78ca      	ldrb	r2, [r1, #3]
     6fc:	4303      	orrs	r3, r0
     6fe:	0612      	lsls	r2, r2, #24
     700:	1d4f      	adds	r7, r1, #5
     702:	431a      	orrs	r2, r3
     704:	7948      	ldrb	r0, [r1, #5]
     706:	790b      	ldrb	r3, [r1, #4]
     708:	7989      	ldrb	r1, [r1, #6]
     70a:	0209      	lsls	r1, r1, #8
     70c:	4301      	orrs	r1, r0
     70e:	78b8      	ldrb	r0, [r7, #2]
     710:	0400      	lsls	r0, r0, #16
     712:	4301      	orrs	r1, r0
     714:	78f8      	ldrb	r0, [r7, #3]
     716:	0600      	lsls	r0, r0, #24
     718:	4308      	orrs	r0, r1
     71a:	7939      	ldrb	r1, [r7, #4]
     71c:	4f0c      	ldr	r7, [pc, #48]	; (750 <initMS5803Barometer+0x78>)
     71e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     720:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     722:	20c8      	movs	r0, #200	; 0xc8
     724:	4b0b      	ldr	r3, [pc, #44]	; (754 <initMS5803Barometer+0x7c>)
     726:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     728:	0020      	movs	r0, r4
     72a:	4b0b      	ldr	r3, [pc, #44]	; (758 <initMS5803Barometer+0x80>)
     72c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     72e:	23fa      	movs	r3, #250	; 0xfa
     730:	011b      	lsls	r3, r3, #4
     732:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     734:	4b09      	ldr	r3, [pc, #36]	; (75c <initMS5803Barometer+0x84>)
     736:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     738:	4b09      	ldr	r3, [pc, #36]	; (760 <initMS5803Barometer+0x88>)
     73a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     73c:	4b09      	ldr	r3, [pc, #36]	; (764 <initMS5803Barometer+0x8c>)
     73e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     740:	23fa      	movs	r3, #250	; 0xfa
     742:	00db      	lsls	r3, r3, #3
     744:	6163      	str	r3, [r4, #20]




}
     746:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     748:	00006450 	.word	0x00006450
     74c:	41004400 	.word	0x41004400
     750:	00000cad 	.word	0x00000cad
     754:	00000f85 	.word	0x00000f85
     758:	0000060d 	.word	0x0000060d
     75c:	00002710 	.word	0x00002710
     760:	0041c9fe 	.word	0x0041c9fe
     764:	007ffae4 	.word	0x007ffae4

00000768 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     768:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     76a:	4bbf      	ldr	r3, [pc, #764]	; (a68 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     76c:	b085      	sub	sp, #20
    SystemInit();
     76e:	4798      	blx	r3
    GclkInit();
     770:	4bbe      	ldr	r3, [pc, #760]	; (a6c <init+0x304>)
     772:	4798      	blx	r3
    RtcInit();
     774:	4bbe      	ldr	r3, [pc, #760]	; (a70 <init+0x308>)
     776:	4798      	blx	r3
    delayInit();
     778:	4bbe      	ldr	r3, [pc, #760]	; (a74 <init+0x30c>)
     77a:	4798      	blx	r3
    adcInit();
     77c:	4bbe      	ldr	r3, [pc, #760]	; (a78 <init+0x310>)
     77e:	4798      	blx	r3
    dmaInit();
     780:	4bbe      	ldr	r3, [pc, #760]	; (a7c <init+0x314>)
     782:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     784:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     786:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     788:	4bbd      	ldr	r3, [pc, #756]	; (a80 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     78c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78e:	5858      	ldr	r0, [r3, r1]
     790:	4abc      	ldr	r2, [pc, #752]	; (a84 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     792:	2401      	movs	r4, #1
     794:	4002      	ands	r2, r0
     796:	505a      	str	r2, [r3, r1]
     798:	4bbb      	ldr	r3, [pc, #748]	; (a88 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     79a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	0019      	movs	r1, r3
     79e:	3154      	adds	r1, #84	; 0x54
     7a0:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7a2:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a4:	43a2      	bics	r2, r4
     7a6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a8:	2280      	movs	r2, #128	; 0x80
     7aa:	0352      	lsls	r2, r2, #13
     7ac:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7ae:	220f      	movs	r2, #15
     7b0:	3033      	adds	r0, #51	; 0x33
     7b2:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7b6:	4391      	bics	r1, r2
     7b8:	4321      	orrs	r1, r4
     7ba:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7bc:	7cc1      	ldrb	r1, [r0, #19]
     7be:	36c3      	adds	r6, #195	; 0xc3
     7c0:	4321      	orrs	r1, r4
     7c2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c4:	0019      	movs	r1, r3
     7c6:	31b1      	adds	r1, #177	; 0xb1
     7c8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7cc:	4010      	ands	r0, r2
     7ce:	4328      	orrs	r0, r5
     7d0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	4320      	orrs	r0, r4
     7d8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7da:	7808      	ldrb	r0, [r1, #0]
     7dc:	4010      	ands	r0, r2
     7de:	4328      	orrs	r0, r5
     7e0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	7830      	ldrb	r0, [r6, #0]
     7e4:	4320      	orrs	r0, r4
     7e6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e8:	7d30      	ldrb	r0, [r6, #20]
     7ea:	43a0      	bics	r0, r4
     7ec:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ee:	2080      	movs	r0, #128	; 0x80
     7f0:	0400      	lsls	r0, r0, #16
     7f2:	9703      	str	r7, [sp, #12]
     7f4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7f6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7f8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7fa:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7fc:	4390      	bics	r0, r2
     7fe:	4320      	orrs	r0, r4
     800:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     802:	20c2      	movs	r0, #194	; 0xc2
     804:	4684      	mov	ip, r0
     806:	449c      	add	ip, r3
     808:	4660      	mov	r0, ip
     80a:	4667      	mov	r7, ip
     80c:	7800      	ldrb	r0, [r0, #0]
     80e:	4320      	orrs	r0, r4
     810:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     812:	7808      	ldrb	r0, [r1, #0]
     814:	4390      	bics	r0, r2
     816:	4320      	orrs	r0, r4
     818:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81e:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     820:	4321      	orrs	r1, r4
     822:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     824:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     826:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	43a1      	bics	r1, r4
     82a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2180      	movs	r1, #128	; 0x80
     82e:	9803      	ldr	r0, [sp, #12]
     830:	03c9      	lsls	r1, r1, #15
     832:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     834:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     836:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     838:	3031      	adds	r0, #49	; 0x31
     83a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     83e:	4011      	ands	r1, r2
     840:	430d      	orrs	r5, r1
     842:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     844:	001d      	movs	r5, r3
     846:	3543      	adds	r5, #67	; 0x43
     848:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84c:	4321      	orrs	r1, r4
     84e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7da9      	ldrb	r1, [r5, #22]
     852:	3505      	adds	r5, #5
     854:	43a1      	bics	r1, r4
     856:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     858:	2180      	movs	r1, #128	; 0x80
     85a:	0489      	lsls	r1, r1, #18
     85c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     860:	7801      	ldrb	r1, [r0, #0]
     862:	4391      	bics	r1, r2
     864:	4321      	orrs	r1, r4
     866:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     868:	7c41      	ldrb	r1, [r0, #17]
     86a:	3011      	adds	r0, #17
     86c:	4321      	orrs	r1, r4
     86e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     870:	7d81      	ldrb	r1, [r0, #22]
     872:	43a1      	bics	r1, r4
     874:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     876:	2180      	movs	r1, #128	; 0x80
     878:	0449      	lsls	r1, r1, #17
     87a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     87c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87e:	7829      	ldrb	r1, [r5, #0]
     880:	43a1      	bics	r1, r4
     882:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     884:	2180      	movs	r1, #128	; 0x80
     886:	0049      	lsls	r1, r1, #1
     888:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88a:	7831      	ldrb	r1, [r6, #0]
     88c:	43a1      	bics	r1, r4
     88e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     890:	2180      	movs	r1, #128	; 0x80
     892:	0089      	lsls	r1, r1, #2
     894:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     896:	0019      	movs	r1, r3
     898:	314b      	adds	r1, #75	; 0x4b
     89a:	7808      	ldrb	r0, [r1, #0]
     89c:	43a0      	bics	r0, r4
     89e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8a0:	7808      	ldrb	r0, [r1, #0]
     8a2:	4338      	orrs	r0, r7
     8a4:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a6:	2080      	movs	r0, #128	; 0x80
     8a8:	0100      	lsls	r0, r0, #4
     8aa:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8ac:	4877      	ldr	r0, [pc, #476]	; (a8c <init+0x324>)
     8ae:	371e      	adds	r7, #30
     8b0:	7800      	ldrb	r0, [r0, #0]
     8b2:	4010      	ands	r0, r2
     8b4:	4338      	orrs	r0, r7
     8b6:	4f75      	ldr	r7, [pc, #468]	; (a8c <init+0x324>)
     8b8:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ba:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8bc:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8be:	4320      	orrs	r0, r4
     8c0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8c2:	0018      	movs	r0, r3
     8c4:	3034      	adds	r0, #52	; 0x34
     8c6:	7801      	ldrb	r1, [r0, #0]
     8c8:	4011      	ands	r1, r2
     8ca:	4339      	orrs	r1, r7
     8cc:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ce:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d2:	4321      	orrs	r1, r4
     8d4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d6:	4666      	mov	r6, ip
     8d8:	7801      	ldrb	r1, [r0, #0]
     8da:	4391      	bics	r1, r2
     8dc:	4331      	orrs	r1, r6
     8de:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e4:	4321      	orrs	r1, r4
     8e6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e8:	7801      	ldrb	r1, [r0, #0]
     8ea:	001e      	movs	r6, r3
     8ec:	43a1      	bics	r1, r4
     8ee:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	9803      	ldr	r0, [sp, #12]
     8f4:	00c9      	lsls	r1, r1, #3
     8f6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8f8:	0018      	movs	r0, r3
     8fa:	3098      	adds	r0, #152	; 0x98
     8fc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fe:	78a8      	ldrb	r0, [r5, #2]
     900:	3651      	adds	r6, #81	; 0x51
     902:	43a0      	bics	r0, r4
     904:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     906:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     908:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     90a:	7a29      	ldrb	r1, [r5, #8]
     90c:	43a1      	bics	r1, r4
     90e:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     910:	2180      	movs	r1, #128	; 0x80
     912:	0249      	lsls	r1, r1, #9
     914:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     916:	7831      	ldrb	r1, [r6, #0]
     918:	43a1      	bics	r1, r4
     91a:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91c:	2180      	movs	r1, #128	; 0x80
     91e:	0289      	lsls	r1, r1, #10
     920:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     922:	0019      	movs	r1, r3
     924:	3153      	adds	r1, #83	; 0x53
     926:	7808      	ldrb	r0, [r1, #0]
     928:	43a0      	bics	r0, r4
     92a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     92c:	7808      	ldrb	r0, [r1, #0]
     92e:	4338      	orrs	r0, r7
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     934:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     936:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     938:	0300      	lsls	r0, r0, #12
     93a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     93c:	9703      	str	r7, [sp, #12]
     93e:	7838      	ldrb	r0, [r7, #0]
     940:	2720      	movs	r7, #32
     942:	4010      	ands	r0, r2
     944:	4338      	orrs	r0, r7
     946:	9f03      	ldr	r7, [sp, #12]
     948:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	4320      	orrs	r0, r4
     950:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     952:	0018      	movs	r0, r3
     954:	3038      	adds	r0, #56	; 0x38
     956:	7801      	ldrb	r1, [r0, #0]
     958:	4011      	ands	r1, r2
     95a:	4339      	orrs	r1, r7
     95c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     95e:	7831      	ldrb	r1, [r6, #0]
     960:	4321      	orrs	r1, r4
     962:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     964:	4666      	mov	r6, ip
     966:	7801      	ldrb	r1, [r0, #0]
     968:	4391      	bics	r1, r2
     96a:	4331      	orrs	r1, r6
     96c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     96e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     972:	4321      	orrs	r1, r4
     974:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     976:	7981      	ldrb	r1, [r0, #6]
     978:	43a1      	bics	r1, r4
     97a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     97c:	2180      	movs	r1, #128	; 0x80
     97e:	02c9      	lsls	r1, r1, #11
     980:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     982:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     984:	7801      	ldrb	r1, [r0, #0]
     986:	43a1      	bics	r1, r4
     988:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98a:	2180      	movs	r1, #128	; 0x80
     98c:	0149      	lsls	r1, r1, #5
     98e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     990:	7881      	ldrb	r1, [r0, #2]
     992:	43a1      	bics	r1, r4
     994:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     996:	2180      	movs	r1, #128	; 0x80
     998:	01c9      	lsls	r1, r1, #7
     99a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     99c:	0019      	movs	r1, r3
     99e:	314d      	adds	r1, #77	; 0x4d
     9a0:	7808      	ldrb	r0, [r1, #0]
     9a2:	43a0      	bics	r0, r4
     9a4:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9a6:	7808      	ldrb	r0, [r1, #0]
     9a8:	4330      	orrs	r0, r6
     9aa:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9ac:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9ae:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9b0:	0189      	lsls	r1, r1, #6
     9b2:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b4:	304f      	adds	r0, #79	; 0x4f
     9b6:	7801      	ldrb	r1, [r0, #0]
     9b8:	43a1      	bics	r1, r4
     9ba:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9bc:	2180      	movs	r1, #128	; 0x80
     9be:	0209      	lsls	r1, r1, #8
     9c0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9c2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c4:	0019      	movs	r1, r3
     9c6:	3155      	adds	r1, #85	; 0x55
     9c8:	7808      	ldrb	r0, [r1, #0]
     9ca:	43a0      	bics	r0, r4
     9cc:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ce:	2080      	movs	r0, #128	; 0x80
     9d0:	0380      	lsls	r0, r0, #14
     9d2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9d4:	2040      	movs	r0, #64	; 0x40
     9d6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d8:	7848      	ldrb	r0, [r1, #1]
     9da:	43a0      	bics	r0, r4
     9dc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9de:	2080      	movs	r0, #128	; 0x80
     9e0:	03c0      	lsls	r0, r0, #15
     9e2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9e4:	0018      	movs	r0, r3
     9e6:	303b      	adds	r0, #59	; 0x3b
     9e8:	7805      	ldrb	r5, [r0, #0]
     9ea:	4395      	bics	r5, r2
     9ec:	4335      	orrs	r5, r6
     9ee:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f0:	784d      	ldrb	r5, [r1, #1]
     9f2:	4325      	orrs	r5, r4
     9f4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9f6:	788d      	ldrb	r5, [r1, #2]
     9f8:	43a5      	bics	r5, r4
     9fa:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9fc:	788d      	ldrb	r5, [r1, #2]
     9fe:	4335      	orrs	r5, r6
     a00:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     a02:	2580      	movs	r5, #128	; 0x80
     a04:	042d      	lsls	r5, r5, #16
     a06:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a08:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a0a:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     a0c:	4e20      	ldr	r6, [pc, #128]	; (a90 <init+0x328>)
     a0e:	401a      	ands	r2, r3
     a10:	433a      	orrs	r2, r7
     a12:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a14:	788b      	ldrb	r3, [r1, #2]
     a16:	2204      	movs	r2, #4
     a18:	4323      	orrs	r3, r4
     a1a:	708b      	strb	r3, [r1, #2]
     a1c:	2000      	movs	r0, #0
     a1e:	2103      	movs	r1, #3
     a20:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a22:	002b      	movs	r3, r5
     a24:	002a      	movs	r2, r5
     a26:	0028      	movs	r0, r5
     a28:	4f1a      	ldr	r7, [pc, #104]	; (a94 <init+0x32c>)
     a2a:	9501      	str	r5, [sp, #4]
     a2c:	9500      	str	r5, [sp, #0]
     a2e:	2103      	movs	r1, #3
     a30:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a32:	0020      	movs	r0, r4
     a34:	2204      	movs	r2, #4
     a36:	2103      	movs	r1, #3
     a38:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a3a:	002b      	movs	r3, r5
     a3c:	002a      	movs	r2, r5
     a3e:	0020      	movs	r0, r4
     a40:	9501      	str	r5, [sp, #4]
     a42:	9500      	str	r5, [sp, #0]
     a44:	2103      	movs	r1, #3
     a46:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a48:	2208      	movs	r2, #8
     a4a:	2104      	movs	r1, #4
     a4c:	2003      	movs	r0, #3
     a4e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     a50:	0021      	movs	r1, r4
     a52:	002a      	movs	r2, r5
     a54:	2003      	movs	r0, #3
     a56:	4b10      	ldr	r3, [pc, #64]	; (a98 <init+0x330>)
     a58:	4c10      	ldr	r4, [pc, #64]	; (a9c <init+0x334>)
     a5a:	47a0      	blx	r4

    TC4Init();
     a5c:	4b10      	ldr	r3, [pc, #64]	; (aa0 <init+0x338>)
     a5e:	4798      	blx	r3
    TC5Init();
     a60:	4b10      	ldr	r3, [pc, #64]	; (aa4 <init+0x33c>)
     a62:	4798      	blx	r3
}
     a64:	b005      	add	sp, #20
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a68:	000001d5 	.word	0x000001d5
     a6c:	00000de1 	.word	0x00000de1
     a70:	00000e69 	.word	0x00000e69
     a74:	00000f35 	.word	0x00000f35
     a78:	00000bc9 	.word	0x00000bc9
     a7c:	000010d5 	.word	0x000010d5
     a80:	e000e100 	.word	0xe000e100
     a84:	ff00ffff 	.word	0xff00ffff
     a88:	41004400 	.word	0x41004400
     a8c:	41004435 	.word	0x41004435
     a90:	000025d5 	.word	0x000025d5
     a94:	00002639 	.word	0x00002639
     a98:	0000f2e4 	.word	0x0000f2e4
     a9c:	0000269d 	.word	0x0000269d
     aa0:	00001005 	.word	0x00001005
     aa4:	0000106d 	.word	0x0000106d

00000aa8 <main>:


int main(void) {
     aa8:	b510      	push	{r4, lr}
     aaa:	4c13      	ldr	r4, [pc, #76]	; (af8 <main+0x50>)

    init();
     aac:	4b13      	ldr	r3, [pc, #76]	; (afc <main+0x54>)
    TC4Init();
    TC5Init();
}


int main(void) {
     aae:	44a5      	add	sp, r4

    init();
     ab0:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ab2:	2400      	movs	r4, #0
     ab4:	466b      	mov	r3, sp
    my_altimeter.myIMU.gravityOffsetBuffer = -1.0;
     ab6:	2200      	movs	r2, #0
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ab8:	701c      	strb	r4, [r3, #0]
    my_altimeter.myIMU.gravityOffsetBuffer = -1.0;
     aba:	4b11      	ldr	r3, [pc, #68]	; (b00 <main+0x58>)
    my_altimeter.myIMU.gravityOffset = -1.0;

    initMS5803Barometer(&my_altimeter.myBarometer);
     abc:	a802      	add	r0, sp, #8

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    my_altimeter.myIMU.gravityOffsetBuffer = -1.0;
     abe:	9230      	str	r2, [sp, #192]	; 0xc0
     ac0:	9331      	str	r3, [sp, #196]	; 0xc4
    my_altimeter.myIMU.gravityOffset = -1.0;
     ac2:	922e      	str	r2, [sp, #184]	; 0xb8
     ac4:	932f      	str	r3, [sp, #188]	; 0xbc

    initMS5803Barometer(&my_altimeter.myBarometer);
     ac6:	4b0f      	ldr	r3, [pc, #60]	; (b04 <main+0x5c>)
     ac8:	4798      	blx	r3
    IMUinit();
     aca:	4b0f      	ldr	r3, [pc, #60]	; (b08 <main+0x60>)
     acc:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     ace:	2384      	movs	r3, #132	; 0x84
     ad0:	466a      	mov	r2, sp
     ad2:	009b      	lsls	r3, r3, #2
     ad4:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     ad6:	4b0d      	ldr	r3, [pc, #52]	; (b0c <main+0x64>)

    my_altimeter.myFlightState = flightStatrup;
     ad8:	7014      	strb	r4, [r2, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     ada:	54d4      	strb	r4, [r2, r3]
	


    while (1) {

        if (takeSample()) {
     adc:	4b0c      	ldr	r3, [pc, #48]	; (b10 <main+0x68>)
     ade:	4798      	blx	r3
     ae0:	2800      	cmp	r0, #0
     ae2:	d0fb      	beq.n	adc <main+0x34>
            sampleTick(&my_altimeter);
     ae4:	4668      	mov	r0, sp
     ae6:	4b0b      	ldr	r3, [pc, #44]	; (b14 <main+0x6c>)
     ae8:	4798      	blx	r3
            flight(&my_altimeter);
     aea:	4668      	mov	r0, sp
     aec:	4b0a      	ldr	r3, [pc, #40]	; (b18 <main+0x70>)
     aee:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     af0:	4668      	mov	r0, sp
     af2:	4b0a      	ldr	r3, [pc, #40]	; (b1c <main+0x74>)
     af4:	4798      	blx	r3
     af6:	e7f1      	b.n	adc <main+0x34>
     af8:	fffffcd0 	.word	0xfffffcd0
     afc:	00000769 	.word	0x00000769
     b00:	bff00000 	.word	0xbff00000
     b04:	000006d9 	.word	0x000006d9
     b08:	00000b21 	.word	0x00000b21
     b0c:	00000311 	.word	0x00000311
     b10:	000021c5 	.word	0x000021c5
     b14:	000021dd 	.word	0x000021dd
     b18:	00001135 	.word	0x00001135
     b1c:	00001c21 	.word	0x00001c21

00000b20 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b20:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b22:	4c08      	ldr	r4, [pc, #32]	; (b44 <IMUinit+0x24>)
     b24:	2580      	movs	r5, #128	; 0x80
     b26:	0023      	movs	r3, r4
     b28:	00ed      	lsls	r5, r5, #3
     b2a:	3394      	adds	r3, #148	; 0x94
     b2c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b2e:	4e06      	ldr	r6, [pc, #24]	; (b48 <IMUinit+0x28>)
     b30:	210f      	movs	r1, #15
     b32:	2000      	movs	r0, #0
     b34:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b36:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b38:	210c      	movs	r1, #12
     b3a:	2000      	movs	r0, #0
     b3c:	47b0      	blx	r6
     b3e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b40:	bd70      	pop	{r4, r5, r6, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	41004400 	.word	0x41004400
     b48:	000026e1 	.word	0x000026e1

00000b4c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable(){
     b4c:	b510      	push	{r4, lr}

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b4e:	4b09      	ldr	r3, [pc, #36]	; (b74 <USARTconnectionAvaliable+0x28>)
     b50:	7e1c      	ldrb	r4, [r3, #24]
     b52:	0764      	lsls	r4, r4, #29
     b54:	0fe4      	lsrs	r4, r4, #31
     b56:	2c01      	cmp	r4, #1
     b58:	d001      	beq.n	b5e <USARTconnectionAvaliable+0x12>
			}
			else{
				return false;
			}
	}
		return false;
     b5a:	2000      	movs	r0, #0
     b5c:	e009      	b.n	b72 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable(){

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
		u8_t connectAttempt = usartDataIn(USART3);
     b5e:	2003      	movs	r0, #3
     b60:	4b05      	ldr	r3, [pc, #20]	; (b78 <USARTconnectionAvaliable+0x2c>)
     b62:	4798      	blx	r3
     b64:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     b66:	2948      	cmp	r1, #72	; 0x48
     b68:	d1f7      	bne.n	b5a <USARTconnectionAvaliable+0xe>
				usartDataOut(USART3, 'H');
     b6a:	2003      	movs	r0, #3
     b6c:	4b03      	ldr	r3, [pc, #12]	; (b7c <USARTconnectionAvaliable+0x30>)
     b6e:	4798      	blx	r3
				return true;
     b70:	0020      	movs	r0, r4
			else{
				return false;
			}
	}
		return false;
  }
     b72:	bd10      	pop	{r4, pc}
     b74:	42001400 	.word	0x42001400
     b78:	00002711 	.word	0x00002711
     b7c:	000026f9 	.word	0x000026f9

00000b80 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b82:	2780      	movs	r7, #128	; 0x80
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b84:	0005      	movs	r5, r0
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     b86:	2400      	movs	r4, #0
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b88:	1a09      	subs	r1, r1, r0
     b8a:	0a09      	lsrs	r1, r1, #8
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b8c:	b0c3      	sub	sp, #268	; 0x10c
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b8e:	b28b      	uxth	r3, r1
     b90:	9301      	str	r3, [sp, #4]
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b92:	007f      	lsls	r7, r7, #1
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     b94:	a902      	add	r1, sp, #8
     b96:	0028      	movs	r0, r5
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <sendTheasePagesToComputer+0x40>)
     b9a:	4798      	blx	r3
     b9c:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
     b9e:	ab02      	add	r3, sp, #8
     ba0:	5d99      	ldrb	r1, [r3, r6]
     ba2:	2003      	movs	r0, #3
     ba4:	4b07      	ldr	r3, [pc, #28]	; (bc4 <sendTheasePagesToComputer+0x44>)
     ba6:	3601      	adds	r6, #1
     ba8:	4798      	blx	r3
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     baa:	42be      	cmp	r6, r7
     bac:	d1f7      	bne.n	b9e <sendTheasePagesToComputer+0x1e>
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     bae:	3401      	adds	r4, #1
     bb0:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     bb2:	3501      	adds	r5, #1
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     bb4:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     bb6:	35ff      	adds	r5, #255	; 0xff
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     bb8:	42a3      	cmp	r3, r4
     bba:	d2eb      	bcs.n	b94 <sendTheasePagesToComputer+0x14>
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
 }
     bbc:	b043      	add	sp, #268	; 0x10c
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc0:	000003d1 	.word	0x000003d1
     bc4:	000026f9 	.word	0x000026f9

00000bc8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bc8:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     bca:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bcc:	4a10      	ldr	r2, [pc, #64]	; (c10 <adcInit+0x48>)
     bce:	0249      	lsls	r1, r1, #9
     bd0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bd2:	4810      	ldr	r0, [pc, #64]	; (c14 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bd4:	430b      	orrs	r3, r1
     bd6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bd8:	23e0      	movs	r3, #224	; 0xe0
     bda:	490f      	ldr	r1, [pc, #60]	; (c18 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bdc:	4a0f      	ldr	r2, [pc, #60]	; (c1c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bde:	00db      	lsls	r3, r3, #3
     be0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     be2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     be4:	4a0e      	ldr	r2, [pc, #56]	; (c20 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     be6:	6812      	ldr	r2, [r2, #0]
     be8:	0150      	lsls	r0, r2, #5
     bea:	4018      	ands	r0, r3
     bec:	4b0d      	ldr	r3, [pc, #52]	; (c24 <adcInit+0x5c>)
     bee:	0154      	lsls	r4, r2, #5
     bf0:	681a      	ldr	r2, [r3, #0]
     bf2:	0ed3      	lsrs	r3, r2, #27
     bf4:	4323      	orrs	r3, r4
     bf6:	b2da      	uxtb	r2, r3
     bf8:	0003      	movs	r3, r0
     bfa:	4313      	orrs	r3, r2
     bfc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     bfe:	2302      	movs	r3, #2
     c00:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c02:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c04:	7e4b      	ldrb	r3, [r1, #25]
     c06:	b25b      	sxtb	r3, r3
     c08:	2b00      	cmp	r3, #0
     c0a:	dbfb      	blt.n	c04 <adcInit+0x3c>
}
     c0c:	bd10      	pop	{r4, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	40000400 	.word	0x40000400
     c14:	0000401e 	.word	0x0000401e
     c18:	42004000 	.word	0x42004000
     c1c:	40000c00 	.word	0x40000c00
     c20:	00806024 	.word	0x00806024
     c24:	00806020 	.word	0x00806020

00000c28 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c28:	2202      	movs	r2, #2
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <adcSample+0x18>)
     c2c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c2e:	3a01      	subs	r2, #1
     c30:	7e19      	ldrb	r1, [r3, #24]
     c32:	4211      	tst	r1, r2
     c34:	d0fc      	beq.n	c30 <adcSample+0x8>
    return ADC->RESULT.reg;
     c36:	4b02      	ldr	r3, [pc, #8]	; (c40 <adcSample+0x18>)
     c38:	8b58      	ldrh	r0, [r3, #26]
     c3a:	b280      	uxth	r0, r0
}
     c3c:	4770      	bx	lr
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	42004000 	.word	0x42004000

00000c44 <adc_read>:


u16_t adc_read(Pin p) {
     c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c46:	2501      	movs	r5, #1
     c48:	0c02      	lsrs	r2, r0, #16
     c4a:	b2d4      	uxtb	r4, r2
     c4c:	9000      	str	r0, [sp, #0]
     c4e:	0e00      	lsrs	r0, r0, #24
     c50:	9101      	str	r1, [sp, #4]
     c52:	0842      	lsrs	r2, r0, #1
     c54:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c56:	4911      	ldr	r1, [pc, #68]	; (c9c <adc_read+0x58>)
     c58:	18d2      	adds	r2, r2, r3
     c5a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c5c:	4228      	tst	r0, r5
     c5e:	d005      	beq.n	c6c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c60:	210f      	movs	r1, #15
     c62:	7814      	ldrb	r4, [r2, #0]
     c64:	4021      	ands	r1, r4
     c66:	2410      	movs	r4, #16
     c68:	4321      	orrs	r1, r4
     c6a:	e003      	b.n	c74 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c6c:	240f      	movs	r4, #15
     c6e:	7811      	ldrb	r1, [r2, #0]
     c70:	43a1      	bics	r1, r4
     c72:	4329      	orrs	r1, r5
     c74:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c76:	2101      	movs	r1, #1
     c78:	4a09      	ldr	r2, [pc, #36]	; (ca0 <adc_read+0x5c>)
     c7a:	18c3      	adds	r3, r0, r3
     c7c:	189b      	adds	r3, r3, r2
     c7e:	781a      	ldrb	r2, [r3, #0]
     c80:	430a      	orrs	r2, r1
     c82:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c84:	466b      	mov	r3, sp
     c86:	791a      	ldrb	r2, [r3, #4]
     c88:	231f      	movs	r3, #31
     c8a:	4013      	ands	r3, r2
     c8c:	22c0      	movs	r2, #192	; 0xc0
     c8e:	0152      	lsls	r2, r2, #5
     c90:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c92:	4a04      	ldr	r2, [pc, #16]	; (ca4 <adc_read+0x60>)
     c94:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c96:	4b04      	ldr	r3, [pc, #16]	; (ca8 <adc_read+0x64>)
     c98:	4798      	blx	r3
     c9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c9c:	41004430 	.word	0x41004430
     ca0:	41004440 	.word	0x41004440
     ca4:	42004000 	.word	0x42004000
     ca8:	00000c29 	.word	0x00000c29

00000cac <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     cac:	0c01      	lsrs	r1, r0, #16
     cae:	0c13      	lsrs	r3, r2, #16
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	b2cd      	uxtb	r5, r1
     cb4:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cb6:	2301      	movs	r3, #1
     cb8:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cba:	0e12      	lsrs	r2, r2, #24
     cbc:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cbe:	0e00      	lsrs	r0, r0, #24
     cc0:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc2:	001a      	movs	r2, r3
     cc4:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc6:	0030      	movs	r0, r6
     cc8:	4e11      	ldr	r6, [pc, #68]	; (d10 <byteOut+0x64>)
     cca:	01c9      	lsls	r1, r1, #7
     ccc:	b087      	sub	sp, #28
     cce:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd0:	4e10      	ldr	r6, [pc, #64]	; (d14 <byteOut+0x68>)
     cd2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd6:	19ae      	adds	r6, r5, r6
     cd8:	7824      	ldrb	r4, [r4, #0]
     cda:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cdc:	4e0c      	ldr	r6, [pc, #48]	; (d10 <byteOut+0x64>)
     cde:	46b4      	mov	ip, r6
     ce0:	44ac      	add	ip, r5
     ce2:	4666      	mov	r6, ip
     ce4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     ce6:	b266      	sxtb	r6, r4
     ce8:	2e00      	cmp	r6, #0
     cea:	da05      	bge.n	cf8 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cec:	4e09      	ldr	r6, [pc, #36]	; (d14 <byteOut+0x68>)
     cee:	46b4      	mov	ip, r6
     cf0:	448c      	add	ip, r1
     cf2:	4666      	mov	r6, ip
     cf4:	6032      	str	r2, [r6, #0]
     cf6:	e000      	b.n	cfa <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cf8:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cfa:	9e01      	ldr	r6, [sp, #4]
     cfc:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     cfe:	0064      	lsls	r4, r4, #1
     d00:	b2db      	uxtb	r3, r3
     d02:	6030      	str	r0, [r6, #0]
     d04:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d06:	2b00      	cmp	r3, #0
     d08:	d1e8      	bne.n	cdc <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d0a:	b007      	add	sp, #28
     d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	41004414 	.word	0x41004414
     d14:	41004418 	.word	0x41004418

00000d18 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d18:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d1a:	2501      	movs	r5, #1
     d1c:	b085      	sub	sp, #20
     d1e:	9103      	str	r1, [sp, #12]
     d20:	0011      	movs	r1, r2
     d22:	0c06      	lsrs	r6, r0, #16
     d24:	9301      	str	r3, [sp, #4]
     d26:	b2f3      	uxtb	r3, r6
     d28:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d2a:	0e09      	lsrs	r1, r1, #24
     d2c:	0c14      	lsrs	r4, r2, #16
     d2e:	9002      	str	r0, [sp, #8]
     d30:	9200      	str	r2, [sp, #0]
     d32:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d34:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d36:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d38:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d3a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d3c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d3e:	4c0a      	ldr	r4, [pc, #40]	; (d68 <byteIn+0x50>)
     d40:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d42:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d44:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d46:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d48:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d4a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d4c:	0040      	lsls	r0, r0, #1
     d4e:	402c      	ands	r4, r5
     d50:	1e67      	subs	r7, r4, #1
     d52:	41bc      	sbcs	r4, r7
     d54:	3901      	subs	r1, #1
     d56:	4304      	orrs	r4, r0
     d58:	b2c9      	uxtb	r1, r1
     d5a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d5c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d5e:	2900      	cmp	r1, #0
     d60:	d1f2      	bne.n	d48 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d62:	b005      	add	sp, #20
     d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	41004400 	.word	0x41004400

00000d6c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d6e:	2380      	movs	r3, #128	; 0x80
     d70:	2780      	movs	r7, #128	; 0x80
     d72:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d74:	2500      	movs	r5, #0
     d76:	4c0a      	ldr	r4, [pc, #40]	; (da0 <beep+0x34>)
     d78:	035b      	lsls	r3, r3, #13
     d7a:	61e3      	str	r3, [r4, #28]
     d7c:	03bf      	lsls	r7, r7, #14
     d7e:	42b5      	cmp	r5, r6
     d80:	d006      	beq.n	d90 <beep+0x24>
     d82:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d84:	207a      	movs	r0, #122	; 0x7a
     d86:	4b07      	ldr	r3, [pc, #28]	; (da4 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d88:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d8a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d8c:	b2ad      	uxth	r5, r5
     d8e:	e7f6      	b.n	d7e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d90:	2380      	movs	r3, #128	; 0x80
     d92:	039b      	lsls	r3, r3, #14
     d94:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d96:	2380      	movs	r3, #128	; 0x80
     d98:	035b      	lsls	r3, r3, #13
     d9a:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	41004400 	.word	0x41004400
     da4:	00000f55 	.word	0x00000f55

00000da8 <startupJingle>:

void startupJingle(){
     da8:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     daa:	2696      	movs	r6, #150	; 0x96
     dac:	0076      	lsls	r6, r6, #1
     dae:	4d0a      	ldr	r5, [pc, #40]	; (dd8 <startupJingle+0x30>)
     db0:	0030      	movs	r0, r6
     db2:	47a8      	blx	r5
    delay_ms(80);
     db4:	4c09      	ldr	r4, [pc, #36]	; (ddc <startupJingle+0x34>)
     db6:	2050      	movs	r0, #80	; 0x50
     db8:	47a0      	blx	r4
    beep(300);
     dba:	0030      	movs	r0, r6
     dbc:	47a8      	blx	r5
    delay_ms(250);
     dbe:	20fa      	movs	r0, #250	; 0xfa
     dc0:	47a0      	blx	r4
    beep(300);
     dc2:	0030      	movs	r0, r6
     dc4:	47a8      	blx	r5
    delay_ms(80);
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
    beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
    delay_ms(500);
     dce:	20fa      	movs	r0, #250	; 0xfa
     dd0:	0040      	lsls	r0, r0, #1
     dd2:	47a0      	blx	r4
}
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00000d6d 	.word	0x00000d6d
     ddc:	00000f85 	.word	0x00000f85

00000de0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     de0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     de2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     de4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     de6:	4916      	ldr	r1, [pc, #88]	; (e40 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     de8:	4a16      	ldr	r2, [pc, #88]	; (e44 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dea:	00db      	lsls	r3, r3, #3
     dec:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dee:	6853      	ldr	r3, [r2, #4]
     df0:	4303      	orrs	r3, r0
     df2:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     df4:	4b14      	ldr	r3, [pc, #80]	; (e48 <GclkInit+0x68>)
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     dfa:	2a3f      	cmp	r2, #63	; 0x3f
     dfc:	d100      	bne.n	e00 <GclkInit+0x20>
        coarse = 0x1f;
     dfe:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e00:	4b12      	ldr	r3, [pc, #72]	; (e4c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e02:	4813      	ldr	r0, [pc, #76]	; (e50 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	059b      	lsls	r3, r3, #22
     e08:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e0a:	4283      	cmp	r3, r0
     e0c:	d100      	bne.n	e10 <GclkInit+0x30>
        fine = 0x1ff;
     e0e:	4b11      	ldr	r3, [pc, #68]	; (e54 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e10:	4811      	ldr	r0, [pc, #68]	; (e58 <GclkInit+0x78>)
     e12:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e14:	2010      	movs	r0, #16
     e16:	68cc      	ldr	r4, [r1, #12]
     e18:	4204      	tst	r4, r0
     e1a:	d0fc      	beq.n	e16 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e1c:	0292      	lsls	r2, r2, #10
     e1e:	4313      	orrs	r3, r2
     e20:	4a07      	ldr	r2, [pc, #28]	; (e40 <GclkInit+0x60>)
     e22:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e24:	2310      	movs	r3, #16
     e26:	68ca      	ldr	r2, [r1, #12]
     e28:	421a      	tst	r2, r3
     e2a:	d0fc      	beq.n	e26 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e2c:	4a0b      	ldr	r2, [pc, #44]	; (e5c <GclkInit+0x7c>)
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <GclkInit+0x60>)
     e30:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e32:	2280      	movs	r2, #128	; 0x80
     e34:	4b0a      	ldr	r3, [pc, #40]	; (e60 <GclkInit+0x80>)
     e36:	0052      	lsls	r2, r2, #1
     e38:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e3a:	4a0a      	ldr	r2, [pc, #40]	; (e64 <GclkInit+0x84>)
     e3c:	605a      	str	r2, [r3, #4]
}
     e3e:	bd10      	pop	{r4, pc}
     e40:	40000800 	.word	0x40000800
     e44:	41004000 	.word	0x41004000
     e48:	00806024 	.word	0x00806024
     e4c:	00806028 	.word	0x00806028
     e50:	000003ff 	.word	0x000003ff
     e54:	000001ff 	.word	0x000001ff
     e58:	00000522 	.word	0x00000522
     e5c:	000005a2 	.word	0x000005a2
     e60:	40000c00 	.word	0x40000c00
     e64:	00010700 	.word	0x00010700

00000e68 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e68:	4a1d      	ldr	r2, [pc, #116]	; (ee0 <RtcInit+0x78>)
     e6a:	4b1e      	ldr	r3, [pc, #120]	; (ee4 <RtcInit+0x7c>)
     e6c:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e6e:	2202      	movs	r2, #2
     e70:	68d9      	ldr	r1, [r3, #12]
     e72:	4211      	tst	r1, r2
     e74:	d0fc      	beq.n	e70 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e76:	2281      	movs	r2, #129	; 0x81
     e78:	4b1b      	ldr	r3, [pc, #108]	; (ee8 <RtcInit+0x80>)
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e7e:	4a1b      	ldr	r2, [pc, #108]	; (eec <RtcInit+0x84>)
     e80:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e82:	785a      	ldrb	r2, [r3, #1]
     e84:	b252      	sxtb	r2, r2
     e86:	2a00      	cmp	r2, #0
     e88:	dbfb      	blt.n	e82 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e8a:	4a19      	ldr	r2, [pc, #100]	; (ef0 <RtcInit+0x88>)
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <RtcInit+0x80>)
     e8e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e90:	2204      	movs	r2, #4
     e92:	4b18      	ldr	r3, [pc, #96]	; (ef4 <RtcInit+0x8c>)
     e94:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e96:	7a9a      	ldrb	r2, [r3, #10]
     e98:	4916      	ldr	r1, [pc, #88]	; (ef4 <RtcInit+0x8c>)
     e9a:	09d2      	lsrs	r2, r2, #7
     e9c:	d1fb      	bne.n	e96 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e9e:	20a0      	movs	r0, #160	; 0xa0
     ea0:	880a      	ldrh	r2, [r1, #0]
     ea2:	00c0      	lsls	r0, r0, #3
     ea4:	4302      	orrs	r2, r0
     ea6:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ea8:	7a9a      	ldrb	r2, [r3, #10]
     eaa:	09d2      	lsrs	r2, r2, #7
     eac:	d1fc      	bne.n	ea8 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     eae:	4912      	ldr	r1, [pc, #72]	; (ef8 <RtcInit+0x90>)
     eb0:	4a10      	ldr	r2, [pc, #64]	; (ef4 <RtcInit+0x8c>)
     eb2:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eb4:	7a99      	ldrb	r1, [r3, #10]
     eb6:	4a0f      	ldr	r2, [pc, #60]	; (ef4 <RtcInit+0x8c>)
     eb8:	09c9      	lsrs	r1, r1, #7
     eba:	d1fb      	bne.n	eb4 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ebc:	8851      	ldrh	r1, [r2, #2]
     ebe:	480f      	ldr	r0, [pc, #60]	; (efc <RtcInit+0x94>)
     ec0:	4301      	orrs	r1, r0
     ec2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ec4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ec6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ec8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eca:	8811      	ldrh	r1, [r2, #0]
     ecc:	4301      	orrs	r1, r0
     ece:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ed0:	7a9a      	ldrb	r2, [r3, #10]
     ed2:	09d2      	lsrs	r2, r2, #7
     ed4:	d1fc      	bne.n	ed0 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ed6:	4b0a      	ldr	r3, [pc, #40]	; (f00 <RtcInit+0x98>)
     ed8:	3208      	adds	r2, #8
     eda:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     edc:	4770      	bx	lr
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	0000060e 	.word	0x0000060e
     ee4:	40000800 	.word	0x40000800
     ee8:	40000c00 	.word	0x40000c00
     eec:	00230002 	.word	0x00230002
     ef0:	00004204 	.word	0x00004204
     ef4:	40001400 	.word	0x40001400
     ef8:	000003e6 	.word	0x000003e6
     efc:	00004010 	.word	0x00004010
     f00:	e000e100 	.word	0xe000e100

00000f04 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f04:	230f      	movs	r3, #15
     f06:	4018      	ands	r0, r3
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <gclkEnable+0x28>)
     f0a:	0212      	lsls	r2, r2, #8
     f0c:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f0e:	23f8      	movs	r3, #248	; 0xf8
     f10:	0209      	lsls	r1, r1, #8
     f12:	015b      	lsls	r3, r3, #5
     f14:	4019      	ands	r1, r3
     f16:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f18:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f1a:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f1c:	4c04      	ldr	r4, [pc, #16]	; (f30 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f1e:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f20:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f22:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f24:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f26:	6060      	str	r0, [r4, #4]
}
     f28:	bd10      	pop	{r4, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00ffff00 	.word	0x00ffff00
     f30:	40000c00 	.word	0x40000c00

00000f34 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f34:	4b04      	ldr	r3, [pc, #16]	; (f48 <delayInit+0x14>)
     f36:	4a05      	ldr	r2, [pc, #20]	; (f4c <delayInit+0x18>)
     f38:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f3a:	2230      	movs	r2, #48	; 0x30
     f3c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f3e:	4b04      	ldr	r3, [pc, #16]	; (f50 <delayInit+0x1c>)
     f40:	3a2b      	subs	r2, #43	; 0x2b
     f42:	601a      	str	r2, [r3, #0]
}
     f44:	4770      	bx	lr
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	20000004 	.word	0x20000004
     f4c:	0000bb80 	.word	0x0000bb80
     f50:	e000e010 	.word	0xe000e010

00000f54 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f54:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f56:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f58:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f5a:	4b08      	ldr	r3, [pc, #32]	; (f7c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f5c:	4a08      	ldr	r2, [pc, #32]	; (f80 <delay_us+0x2c>)
     f5e:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f60:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f62:	3801      	subs	r0, #1
     f64:	d308      	bcc.n	f78 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f66:	2b00      	cmp	r3, #0
     f68:	d0fb      	beq.n	f62 <delay_us+0xe>
     f6a:	4e05      	ldr	r6, [pc, #20]	; (f80 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f6c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f6e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f70:	6835      	ldr	r5, [r6, #0]
     f72:	4225      	tst	r5, r4
     f74:	d0fc      	beq.n	f70 <delay_us+0x1c>
     f76:	e7f4      	b.n	f62 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f78:	bd70      	pop	{r4, r5, r6, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	20000004 	.word	0x20000004
     f80:	e000e010 	.word	0xe000e010

00000f84 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f88:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f8a:	4b08      	ldr	r3, [pc, #32]	; (fac <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f8c:	4a08      	ldr	r2, [pc, #32]	; (fb0 <delay_ms+0x2c>)
     f8e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f90:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f92:	3801      	subs	r0, #1
     f94:	d308      	bcc.n	fa8 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f96:	2b00      	cmp	r3, #0
     f98:	d0fb      	beq.n	f92 <delay_ms+0xe>
     f9a:	4e05      	ldr	r6, [pc, #20]	; (fb0 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f9c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f9e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa0:	6835      	ldr	r5, [r6, #0]
     fa2:	4225      	tst	r5, r4
     fa4:	d0fc      	beq.n	fa0 <delay_ms+0x1c>
     fa6:	e7f4      	b.n	f92 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fa8:	bd70      	pop	{r4, r5, r6, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	20000004 	.word	0x20000004
     fb0:	e000e010 	.word	0xe000e010

00000fb4 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     fb4:	21fa      	movs	r1, #250	; 0xfa
     fb6:	4a04      	ldr	r2, [pc, #16]	; (fc8 <RTC_Handler+0x14>)
     fb8:	0089      	lsls	r1, r1, #2
     fba:	6813      	ldr	r3, [r2, #0]
     fbc:	185b      	adds	r3, r3, r1
     fbe:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     fc0:	22ff      	movs	r2, #255	; 0xff
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <RTC_Handler+0x18>)
     fc4:	721a      	strb	r2, [r3, #8]
}
     fc6:	4770      	bx	lr
     fc8:	200004cc 	.word	0x200004cc
     fcc:	40001400 	.word	0x40001400

00000fd0 <millis>:

uint32_t millis(void) {
     fd0:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     fd2:	f3ef 8110 	mrs	r1, PRIMASK
     fd6:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fd8:	4a08      	ldr	r2, [pc, #32]	; (ffc <millis+0x2c>)
     fda:	4d09      	ldr	r5, [pc, #36]	; (1000 <millis+0x30>)
     fdc:	8a10      	ldrh	r0, [r2, #16]
     fde:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fe0:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fe2:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fe4:	09e4      	lsrs	r4, r4, #7
     fe6:	d004      	beq.n	ff2 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     fe8:	8a13      	ldrh	r3, [r2, #16]
     fea:	22fa      	movs	r2, #250	; 0xfa
     fec:	6828      	ldr	r0, [r5, #0]
     fee:	0092      	lsls	r2, r2, #2
     ff0:	1880      	adds	r0, r0, r2
     ff2:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     ff4:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     ff8:	bd30      	pop	{r4, r5, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	40001400 	.word	0x40001400
    1000:	200004cc 	.word	0x200004cc

00001004 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1004:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1006:	4a0d      	ldr	r2, [pc, #52]	; (103c <TC4Init+0x38>)
    1008:	4b0d      	ldr	r3, [pc, #52]	; (1040 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    100a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    100c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    100e:	4a0d      	ldr	r2, [pc, #52]	; (1044 <TC4Init+0x40>)
    1010:	6a13      	ldr	r3, [r2, #32]
    1012:	430b      	orrs	r3, r1
    1014:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1016:	4b0c      	ldr	r3, [pc, #48]	; (1048 <TC4Init+0x44>)
    1018:	4a0c      	ldr	r2, [pc, #48]	; (104c <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    101a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    101c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    101e:	2241      	movs	r2, #65	; 0x41
    1020:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1022:	3a40      	subs	r2, #64	; 0x40
    1024:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1026:	32ff      	adds	r2, #255	; 0xff
    1028:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    102a:	881a      	ldrh	r2, [r3, #0]
    102c:	430a      	orrs	r2, r1
    102e:	801a      	strh	r2, [r3, #0]
    1030:	2280      	movs	r2, #128	; 0x80
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <TC4Init+0x4c>)
    1034:	0312      	lsls	r2, r2, #12
    1036:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1038:	4770      	bx	lr
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	0000421c 	.word	0x0000421c
    1040:	40000c00 	.word	0x40000c00
    1044:	40000400 	.word	0x40000400
    1048:	42003000 	.word	0x42003000
    104c:	00000904 	.word	0x00000904
    1050:	e000e100 	.word	0xe000e100

00001054 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1054:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1056:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1058:	4b02      	ldr	r3, [pc, #8]	; (1064 <TC4_Handler+0x10>)
    105a:	739a      	strb	r2, [r3, #14]
    pullSample();
    105c:	4b02      	ldr	r3, [pc, #8]	; (1068 <TC4_Handler+0x14>)
    105e:	4798      	blx	r3
}
    1060:	bd10      	pop	{r4, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	42003000 	.word	0x42003000
    1068:	000021d1 	.word	0x000021d1

0000106c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    106c:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    106e:	4a0d      	ldr	r2, [pc, #52]	; (10a4 <TC5Init+0x38>)
    1070:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1072:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1074:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1076:	4a0d      	ldr	r2, [pc, #52]	; (10ac <TC5Init+0x40>)
    1078:	6a13      	ldr	r3, [r2, #32]
    107a:	430b      	orrs	r3, r1
    107c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    107e:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <TC5Init+0x44>)
    1080:	4a0c      	ldr	r2, [pc, #48]	; (10b4 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1082:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1084:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1086:	2220      	movs	r2, #32
    1088:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    108a:	3a1f      	subs	r2, #31
    108c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    108e:	32ff      	adds	r2, #255	; 0xff
    1090:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1092:	881a      	ldrh	r2, [r3, #0]
    1094:	430a      	orrs	r2, r1
    1096:	801a      	strh	r2, [r3, #0]
    1098:	2280      	movs	r2, #128	; 0x80
    109a:	4b07      	ldr	r3, [pc, #28]	; (10b8 <TC5Init+0x4c>)
    109c:	0352      	lsls	r2, r2, #13
    109e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10a0:	4770      	bx	lr
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	0000421c 	.word	0x0000421c
    10a8:	40000c00 	.word	0x40000c00
    10ac:	40000400 	.word	0x40000400
    10b0:	42003400 	.word	0x42003400
    10b4:	00000d04 	.word	0x00000d04
    10b8:	e000e100 	.word	0xe000e100

000010bc <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    10bc:	22ff      	movs	r2, #255	; 0xff
    10be:	4b03      	ldr	r3, [pc, #12]	; (10cc <TC5_Handler+0x10>)
    10c0:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    10c2:	4b03      	ldr	r3, [pc, #12]	; (10d0 <TC5_Handler+0x14>)
    10c4:	3afe      	subs	r2, #254	; 0xfe
    10c6:	701a      	strb	r2, [r3, #0]
}
    10c8:	4770      	bx	lr
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	42003400 	.word	0x42003400
    10d0:	200004d1 	.word	0x200004d1

000010d4 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10d6:	27c0      	movs	r7, #192	; 0xc0
    10d8:	4d10      	ldr	r5, [pc, #64]	; (111c <dmaInit+0x48>)
    10da:	003a      	movs	r2, r7
    10dc:	4e10      	ldr	r6, [pc, #64]	; (1120 <dmaInit+0x4c>)
    10de:	0028      	movs	r0, r5
    10e0:	2100      	movs	r1, #0
    10e2:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    10e4:	4c0f      	ldr	r4, [pc, #60]	; (1124 <dmaInit+0x50>)
    10e6:	003a      	movs	r2, r7
    10e8:	2100      	movs	r1, #0
    10ea:	0020      	movs	r0, r4
    10ec:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    10ee:	2120      	movs	r1, #32
    10f0:	4b0d      	ldr	r3, [pc, #52]	; (1128 <dmaInit+0x54>)
    10f2:	695a      	ldr	r2, [r3, #20]
    10f4:	430a      	orrs	r2, r1
    10f6:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    10f8:	69da      	ldr	r2, [r3, #28]
    10fa:	3910      	subs	r1, #16
    10fc:	430a      	orrs	r2, r1
    10fe:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1100:	4b0a      	ldr	r3, [pc, #40]	; (112c <dmaInit+0x58>)
    1102:	390e      	subs	r1, #14
    1104:	881a      	ldrh	r2, [r3, #0]
    1106:	438a      	bics	r2, r1
    1108:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    110a:	881a      	ldrh	r2, [r3, #0]
    110c:	3901      	subs	r1, #1
    110e:	430a      	orrs	r2, r1
    1110:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1112:	4a07      	ldr	r2, [pc, #28]	; (1130 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1114:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1116:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1118:	801a      	strh	r2, [r3, #0]
}
    111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    111c:	200005a0 	.word	0x200005a0
    1120:	00006295 	.word	0x00006295
    1124:	200004e0 	.word	0x200004e0
    1128:	40000400 	.word	0x40000400
    112c:	41004800 	.word	0x41004800
    1130:	00000f02 	.word	0x00000f02

00001134 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1134:	b5f0      	push	{r4, r5, r6, r7, lr}
    1136:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1138:	7800      	ldrb	r0, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    113a:	b085      	sub	sp, #20



    switch(my_altimeter->myFlightState) {
    113c:	280a      	cmp	r0, #10
    113e:	d900      	bls.n	1142 <flight+0xe>
    1140:	e0e5      	b.n	130e <flight+0x1da>
    1142:	f002 fc6d 	bl	3a20 <__gnu_thumb1_case_uqi>
    1146:	1606      	.short	0x1606
    1148:	e4e4e49c 	.word	0xe4e4e49c
    114c:	e4e4e4e4 	.word	0xe4e4e4e4
    1150:	df          	.byte	0xdf
    1151:	00          	.byte	0x00
    case flightStatrup:

        beep(400);
    1152:	20c8      	movs	r0, #200	; 0xc8
    1154:	4b6f      	ldr	r3, [pc, #444]	; (1314 <flight+0x1e0>)
    1156:	0040      	lsls	r0, r0, #1
    1158:	4798      	blx	r3

        computeKalmanGains(&my_altimeter->myKalmanFilter);
    115a:	0020      	movs	r0, r4
    115c:	4b6e      	ldr	r3, [pc, #440]	; (1318 <flight+0x1e4>)
    115e:	3048      	adds	r0, #72	; 0x48
    1160:	4798      	blx	r3


        my_altimeter->StartupTick = millis();
    1162:	4b6e      	ldr	r3, [pc, #440]	; (131c <flight+0x1e8>)
    1164:	4798      	blx	r3
    1166:	23ca      	movs	r3, #202	; 0xca
    1168:	009b      	lsls	r3, r3, #2
    116a:	50e0      	str	r0, [r4, r3]

        my_altimeter->myFlightState = flightIdle;
    116c:	2301      	movs	r3, #1
    116e:	7023      	strb	r3, [r4, #0]

        break;
    1170:	e0cd      	b.n	130e <flight+0x1da>
    case flightIdle:


        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.8 + my_altimeter->myIMU.accelZ*0.2;
    1172:	0025      	movs	r5, r4
    1174:	35c0      	adds	r5, #192	; 0xc0
    1176:	6828      	ldr	r0, [r5, #0]
    1178:	6869      	ldr	r1, [r5, #4]
    117a:	4a69      	ldr	r2, [pc, #420]	; (1320 <flight+0x1ec>)
    117c:	4e69      	ldr	r6, [pc, #420]	; (1324 <flight+0x1f0>)
    117e:	9501      	str	r5, [sp, #4]
    1180:	4b69      	ldr	r3, [pc, #420]	; (1328 <flight+0x1f4>)
    1182:	47b0      	blx	r6
    1184:	0023      	movs	r3, r4
    1186:	33d4      	adds	r3, #212	; 0xd4
    1188:	0006      	movs	r6, r0
    118a:	6818      	ldr	r0, [r3, #0]
    118c:	4b67      	ldr	r3, [pc, #412]	; (132c <flight+0x1f8>)
    118e:	000f      	movs	r7, r1
    1190:	4798      	blx	r3
    1192:	4d64      	ldr	r5, [pc, #400]	; (1324 <flight+0x1f0>)
    1194:	4a62      	ldr	r2, [pc, #392]	; (1320 <flight+0x1ec>)
    1196:	4b66      	ldr	r3, [pc, #408]	; (1330 <flight+0x1fc>)
    1198:	47a8      	blx	r5
    119a:	4d66      	ldr	r5, [pc, #408]	; (1334 <flight+0x200>)
    119c:	0002      	movs	r2, r0
    119e:	000b      	movs	r3, r1
    11a0:	0030      	movs	r0, r6
    11a2:	0039      	movs	r1, r7
    11a4:	47a8      	blx	r5
    11a6:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.8 + my_altimeter->myBarometer.heightCm*0.2;
    11a8:	4e63      	ldr	r6, [pc, #396]	; (1338 <flight+0x204>)

        break;
    case flightIdle:


        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.8 + my_altimeter->myIMU.accelZ*0.2;
    11aa:	6018      	str	r0, [r3, #0]
    11ac:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.8 + my_altimeter->myBarometer.heightCm*0.2;
    11ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    11b0:	47b0      	blx	r6
    11b2:	4d5c      	ldr	r5, [pc, #368]	; (1324 <flight+0x1f0>)
    11b4:	4a5a      	ldr	r2, [pc, #360]	; (1320 <flight+0x1ec>)
    11b6:	4b5c      	ldr	r3, [pc, #368]	; (1328 <flight+0x1f4>)
    11b8:	47a8      	blx	r5
    11ba:	9002      	str	r0, [sp, #8]
    11bc:	9103      	str	r1, [sp, #12]
    11be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    11c0:	47b0      	blx	r6
    11c2:	4a57      	ldr	r2, [pc, #348]	; (1320 <flight+0x1ec>)
    11c4:	4b5a      	ldr	r3, [pc, #360]	; (1330 <flight+0x1fc>)
    11c6:	47a8      	blx	r5
    11c8:	4d5a      	ldr	r5, [pc, #360]	; (1334 <flight+0x200>)
    11ca:	0002      	movs	r2, r0
    11cc:	000b      	movs	r3, r1
    11ce:	9802      	ldr	r0, [sp, #8]
    11d0:	9903      	ldr	r1, [sp, #12]
    11d2:	47a8      	blx	r5
    11d4:	4f59      	ldr	r7, [pc, #356]	; (133c <flight+0x208>)
    11d6:	47b8      	blx	r7
    11d8:	63e0      	str	r0, [r4, #60]	; 0x3c
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.8 + my_altimeter->myBarometer.temperatureCelcus*0.2;
    11da:	6c60      	ldr	r0, [r4, #68]	; 0x44
    11dc:	47b0      	blx	r6
    11de:	4a50      	ldr	r2, [pc, #320]	; (1320 <flight+0x1ec>)
    11e0:	4b51      	ldr	r3, [pc, #324]	; (1328 <flight+0x1f4>)
    11e2:	4d50      	ldr	r5, [pc, #320]	; (1324 <flight+0x1f0>)
    11e4:	47a8      	blx	r5
    11e6:	9002      	str	r0, [sp, #8]
    11e8:	9103      	str	r1, [sp, #12]
    11ea:	69e0      	ldr	r0, [r4, #28]
    11ec:	47b0      	blx	r6
    11ee:	4a4c      	ldr	r2, [pc, #304]	; (1320 <flight+0x1ec>)
    11f0:	4b4f      	ldr	r3, [pc, #316]	; (1330 <flight+0x1fc>)
    11f2:	47a8      	blx	r5
    11f4:	000b      	movs	r3, r1
    11f6:	0002      	movs	r2, r0
    11f8:	9802      	ldr	r0, [sp, #8]
    11fa:	9903      	ldr	r1, [sp, #12]
    11fc:	4d4d      	ldr	r5, [pc, #308]	; (1334 <flight+0x200>)
    11fe:	47a8      	blx	r5
    1200:	47b8      	blx	r7

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1202:	0027      	movs	r7, r4
    case flightIdle:


        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.8 + my_altimeter->myIMU.accelZ*0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.8 + my_altimeter->myBarometer.heightCm*0.2;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.8 + my_altimeter->myBarometer.temperatureCelcus*0.2;
    1204:	6460      	str	r0, [r4, #68]	; 0x44

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1206:	4e45      	ldr	r6, [pc, #276]	; (131c <flight+0x1e8>)
    1208:	47b0      	blx	r6
    120a:	37b0      	adds	r7, #176	; 0xb0
    120c:	683b      	ldr	r3, [r7, #0]
    120e:	1ac0      	subs	r0, r0, r3
    1210:	23fa      	movs	r3, #250	; 0xfa
    1212:	00db      	lsls	r3, r3, #3
    1214:	4298      	cmp	r0, r3
    1216:	d90c      	bls.n	1232 <flight+0xfe>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    121a:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.8 + my_altimeter->myBarometer.heightCm*0.2;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.8 + my_altimeter->myBarometer.temperatureCelcus*0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    121c:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    121e:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1220:	6811      	ldr	r1, [r2, #0]
    1222:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.8 + my_altimeter->myBarometer.temperatureCelcus*0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1224:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1226:	0023      	movs	r3, r4
    1228:	33b8      	adds	r3, #184	; 0xb8
    122a:	6019      	str	r1, [r3, #0]
    122c:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    122e:	47b0      	blx	r6
    1230:	6038      	str	r0, [r7, #0]
        }


        if ((millis() - my_altimeter->StartupTick) > 15000) {
    1232:	47b0      	blx	r6
    1234:	23ca      	movs	r3, #202	; 0xca
    1236:	009b      	lsls	r3, r3, #2
    1238:	58e3      	ldr	r3, [r4, r3]
    123a:	1ac0      	subs	r0, r0, r3
    123c:	4b40      	ldr	r3, [pc, #256]	; (1340 <flight+0x20c>)
    123e:	4298      	cmp	r0, r3
    1240:	d909      	bls.n	1256 <flight+0x122>
            findNewFlightStart(my_altimeter);
    1242:	0020      	movs	r0, r4
    1244:	4b3f      	ldr	r3, [pc, #252]	; (1344 <flight+0x210>)
    1246:	4798      	blx	r3
            logFlight(my_altimeter);
    1248:	0020      	movs	r0, r4
    124a:	4b3f      	ldr	r3, [pc, #252]	; (1348 <flight+0x214>)
    124c:	4798      	blx	r3
            startupJingle();
    124e:	4b3f      	ldr	r3, [pc, #252]	; (134c <flight+0x218>)
    1250:	4798      	blx	r3
            my_altimeter->myFlightState = flightPad;
    1252:	2302      	movs	r3, #2
    1254:	7023      	strb	r3, [r4, #0]
        }

        attemptConnection(my_altimeter);
    1256:	0020      	movs	r0, r4
    1258:	4b3d      	ldr	r3, [pc, #244]	; (1350 <flight+0x21c>)
    125a:	4798      	blx	r3


        if (my_altimeter->batFloat < 3.5) {
    125c:	23c6      	movs	r3, #198	; 0xc6
    125e:	009b      	lsls	r3, r3, #2
    1260:	58e0      	ldr	r0, [r4, r3]
    1262:	493c      	ldr	r1, [pc, #240]	; (1354 <flight+0x220>)
    1264:	4b3c      	ldr	r3, [pc, #240]	; (1358 <flight+0x224>)
    1266:	4798      	blx	r3
    1268:	2800      	cmp	r0, #0
    126a:	d050      	beq.n	130e <flight+0x1da>
            my_altimeter->myFlightState = flightTest;
    126c:	230a      	movs	r3, #10
            delay_ms(80);
    126e:	2050      	movs	r0, #80	; 0x50

        attemptConnection(my_altimeter);


        if (my_altimeter->batFloat < 3.5) {
            my_altimeter->myFlightState = flightTest;
    1270:	7023      	strb	r3, [r4, #0]
            delay_ms(80);
    1272:	4c3a      	ldr	r4, [pc, #232]	; (135c <flight+0x228>)
    1274:	47a0      	blx	r4
            beep(300);
    1276:	2096      	movs	r0, #150	; 0x96
    1278:	4d26      	ldr	r5, [pc, #152]	; (1314 <flight+0x1e0>)
    127a:	0040      	lsls	r0, r0, #1
    127c:	e032      	b.n	12e4 <flight+0x1b0>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
    127e:	4b38      	ldr	r3, [pc, #224]	; (1360 <flight+0x22c>)
    1280:	781a      	ldrb	r2, [r3, #0]
    1282:	2a00      	cmp	r2, #0
    1284:	d019      	beq.n	12ba <flight+0x186>
            writeLog = false;
    1286:	2500      	movs	r5, #0



            logSensors(my_altimeter);
    1288:	0020      	movs	r0, r4
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
            writeLog = false;
    128a:	701d      	strb	r5, [r3, #0]



            logSensors(my_altimeter);
    128c:	4b35      	ldr	r3, [pc, #212]	; (1364 <flight+0x230>)
    128e:	4798      	blx	r3

            if (my_altimeter->myFlashMemory.pageReady) {
    1290:	4b35      	ldr	r3, [pc, #212]	; (1368 <flight+0x234>)
    1292:	5ce2      	ldrb	r2, [r4, r3]
    1294:	42aa      	cmp	r2, r5
    1296:	d010      	beq.n	12ba <flight+0x186>
    1298:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    129a:	54e5      	strb	r5, [r4, r3]

                pinToggle(LedPin);

                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    129c:	0021      	movs	r1, r4
    129e:	0025      	movs	r5, r4
    12a0:	4b32      	ldr	r3, [pc, #200]	; (136c <flight+0x238>)
    12a2:	0352      	lsls	r2, r2, #13
    12a4:	61da      	str	r2, [r3, #28]
    12a6:	35fc      	adds	r5, #252	; 0xfc
    12a8:	3111      	adds	r1, #17
    12aa:	4b31      	ldr	r3, [pc, #196]	; (1370 <flight+0x23c>)
    12ac:	31ff      	adds	r1, #255	; 0xff
    12ae:	68e8      	ldr	r0, [r5, #12]
    12b0:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    12b2:	68eb      	ldr	r3, [r5, #12]
    12b4:	3301      	adds	r3, #1
    12b6:	33ff      	adds	r3, #255	; 0xff
    12b8:	60eb      	str	r3, [r5, #12]


            }
        }

        if (my_altimeter->batFloat < 3.5) {
    12ba:	23c6      	movs	r3, #198	; 0xc6
    12bc:	009b      	lsls	r3, r3, #2
    12be:	58e0      	ldr	r0, [r4, r3]
    12c0:	4924      	ldr	r1, [pc, #144]	; (1354 <flight+0x220>)
    12c2:	4b25      	ldr	r3, [pc, #148]	; (1358 <flight+0x224>)
    12c4:	4798      	blx	r3
    12c6:	2800      	cmp	r0, #0
    12c8:	d021      	beq.n	130e <flight+0x1da>
            my_altimeter->myFlightState = flightTest;
    12ca:	230a      	movs	r3, #10
            delay_ms(80);
    12cc:	2050      	movs	r0, #80	; 0x50

            }
        }

        if (my_altimeter->batFloat < 3.5) {
            my_altimeter->myFlightState = flightTest;
    12ce:	7023      	strb	r3, [r4, #0]
            delay_ms(80);
    12d0:	4c22      	ldr	r4, [pc, #136]	; (135c <flight+0x228>)
    12d2:	47a0      	blx	r4
            beep(300);
    12d4:	2096      	movs	r0, #150	; 0x96
    12d6:	4d0f      	ldr	r5, [pc, #60]	; (1314 <flight+0x1e0>)
    12d8:	0040      	lsls	r0, r0, #1
    12da:	47a8      	blx	r5
            delay_ms(80);
    12dc:	2050      	movs	r0, #80	; 0x50
    12de:	47a0      	blx	r4
            beep(300);
    12e0:	2096      	movs	r0, #150	; 0x96
    12e2:	0040      	lsls	r0, r0, #1
    12e4:	47a8      	blx	r5
            delay_ms(80);
    12e6:	2050      	movs	r0, #80	; 0x50
    12e8:	47a0      	blx	r4
            beep(300);
    12ea:	2096      	movs	r0, #150	; 0x96
    12ec:	0040      	lsls	r0, r0, #1
    12ee:	47a8      	blx	r5
            delay_ms(80);
    12f0:	2050      	movs	r0, #80	; 0x50
    12f2:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	4b1d      	ldr	r3, [pc, #116]	; (136c <flight+0x238>)
    12f8:	0392      	lsls	r2, r2, #14
    12fa:	615a      	str	r2, [r3, #20]
    12fc:	2280      	movs	r2, #128	; 0x80
    12fe:	0352      	lsls	r2, r2, #13
    1300:	615a      	str	r2, [r3, #20]
    1302:	e004      	b.n	130e <flight+0x1da>


        break;
    case flightTest:

        TC4->COUNT8.CTRLA.reg = 0;
    1304:	2300      	movs	r3, #0
    1306:	4a1b      	ldr	r2, [pc, #108]	; (1374 <flight+0x240>)
    1308:	8013      	strh	r3, [r2, #0]
        TC5->COUNT8.CTRLA.reg = 0;
    130a:	4a1b      	ldr	r2, [pc, #108]	; (1378 <flight+0x244>)
    130c:	8013      	strh	r3, [r2, #0]

        break;
    }


}
    130e:	b005      	add	sp, #20
    1310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	00000d6d 	.word	0x00000d6d
    1318:	0000137d 	.word	0x0000137d
    131c:	00000fd1 	.word	0x00000fd1
    1320:	9999999a 	.word	0x9999999a
    1324:	000051f1 	.word	0x000051f1
    1328:	3fe99999 	.word	0x3fe99999
    132c:	00005f2d 	.word	0x00005f2d
    1330:	3fc99999 	.word	0x3fc99999
    1334:	00004351 	.word	0x00004351
    1338:	00005ebd 	.word	0x00005ebd
    133c:	00003bad 	.word	0x00003bad
    1340:	00003a98 	.word	0x00003a98
    1344:	0000211d 	.word	0x0000211d
    1348:	00001f35 	.word	0x00001f35
    134c:	00000da9 	.word	0x00000da9
    1350:	00002721 	.word	0x00002721
    1354:	40600000 	.word	0x40600000
    1358:	00003ad5 	.word	0x00003ad5
    135c:	00000f85 	.word	0x00000f85
    1360:	200004d1 	.word	0x200004d1
    1364:	00001f95 	.word	0x00001f95
    1368:	00000311 	.word	0x00000311
    136c:	41004400 	.word	0x41004400
    1370:	000002ed 	.word	0x000002ed
    1374:	42003000 	.word	0x42003000
    1378:	42003400 	.word	0x42003400

0000137c <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    137c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    137e:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1380:	4cdb      	ldr	r4, [pc, #876]	; (16f0 <computeKalmanGains+0x374>)
    1382:	4adc      	ldr	r2, [pc, #880]	; (16f4 <computeKalmanGains+0x378>)
    1384:	4bdc      	ldr	r3, [pc, #880]	; (16f8 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1386:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1388:	60a2      	str	r2, [r4, #8]
    138a:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    138c:	62a2      	str	r2, [r4, #40]	; 0x28
    138e:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1390:	4ada      	ldr	r2, [pc, #872]	; (16fc <computeKalmanGains+0x380>)
    1392:	4bdb      	ldr	r3, [pc, #876]	; (1700 <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1394:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1396:	6122      	str	r2, [r4, #16]
    1398:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    139a:	48d6      	ldr	r0, [pc, #856]	; (16f4 <computeKalmanGains+0x378>)
    139c:	49d9      	ldr	r1, [pc, #868]	; (1704 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    139e:	2200      	movs	r2, #0
    13a0:	ae4c      	add	r6, sp, #304	; 0x130
    13a2:	ab40      	add	r3, sp, #256	; 0x100
    13a4:	1977      	adds	r7, r6, r5
    13a6:	18ee      	adds	r6, r5, r3
    13a8:	4bd7      	ldr	r3, [pc, #860]	; (1708 <computeKalmanGains+0x38c>)
    13aa:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13ac:	6038      	str	r0, [r7, #0]
    13ae:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    13b0:	6032      	str	r2, [r6, #0]
    13b2:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13b4:	60b8      	str	r0, [r7, #8]
    13b6:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    13b8:	60b2      	str	r2, [r6, #8]
    13ba:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    13bc:	2d30      	cmp	r5, #48	; 0x30
    13be:	d1ee      	bne.n	139e <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    13c0:	6822      	ldr	r2, [r4, #0]
    13c2:	6863      	ldr	r3, [r4, #4]
    13c4:	921a      	str	r2, [sp, #104]	; 0x68
    13c6:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    13c8:	69a2      	ldr	r2, [r4, #24]
    13ca:	69e3      	ldr	r3, [r4, #28]
    13cc:	921c      	str	r2, [sp, #112]	; 0x70
    13ce:	931d      	str	r3, [sp, #116]	; 0x74
    13d0:	6a22      	ldr	r2, [r4, #32]
    13d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13d4:	921e      	str	r2, [sp, #120]	; 0x78
    13d6:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    13d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    13da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13dc:	9220      	str	r2, [sp, #128]	; 0x80
    13de:	9321      	str	r3, [sp, #132]	; 0x84
    13e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    13e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13e4:	9222      	str	r2, [sp, #136]	; 0x88
    13e6:	9323      	str	r3, [sp, #140]	; 0x8c
    13e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13ec:	9224      	str	r2, [sp, #144]	; 0x90
    13ee:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    13f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    13f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    13f4:	9238      	str	r2, [sp, #224]	; 0xe0
    13f6:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    13f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    13fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    13fc:	923a      	str	r2, [sp, #232]	; 0xe8
    13fe:	933b      	str	r3, [sp, #236]	; 0xec
    1400:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1402:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    1404:	933c      	str	r3, [sp, #240]	; 0xf0
    1406:	943d      	str	r4, [sp, #244]	; 0xf4
    1408:	2300      	movs	r3, #0
    140a:	4cc0      	ldr	r4, [pc, #768]	; (170c <computeKalmanGains+0x390>)
    140c:	9302      	str	r3, [sp, #8]
    140e:	9403      	str	r4, [sp, #12]
    1410:	2300      	movs	r3, #0
    1412:	2400      	movs	r4, #0
    1414:	9312      	str	r3, [sp, #72]	; 0x48
    1416:	9413      	str	r4, [sp, #76]	; 0x4c
    1418:	9310      	str	r3, [sp, #64]	; 0x40
    141a:	9411      	str	r4, [sp, #68]	; 0x44
    141c:	9304      	str	r3, [sp, #16]
    141e:	9405      	str	r4, [sp, #20]
    1420:	2300      	movs	r3, #0
    1422:	4cba      	ldr	r4, [pc, #744]	; (170c <computeKalmanGains+0x390>)
    1424:	930e      	str	r3, [sp, #56]	; 0x38
    1426:	940f      	str	r4, [sp, #60]	; 0x3c
    1428:	2300      	movs	r3, #0
    142a:	2400      	movs	r4, #0
    142c:	9308      	str	r3, [sp, #32]
    142e:	9409      	str	r4, [sp, #36]	; 0x24
    1430:	930c      	str	r3, [sp, #48]	; 0x30
    1432:	940d      	str	r4, [sp, #52]	; 0x34
    1434:	930a      	str	r3, [sp, #40]	; 0x28
    1436:	940b      	str	r4, [sp, #44]	; 0x2c
    1438:	2480      	movs	r4, #128	; 0x80
    143a:	2300      	movs	r3, #0
    143c:	05e4      	lsls	r4, r4, #23
    143e:	9306      	str	r3, [sp, #24]
    1440:	9407      	str	r4, [sp, #28]
    1442:	2300      	movs	r3, #0
    1444:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1446:	4db2      	ldr	r5, [pc, #712]	; (1710 <computeKalmanGains+0x394>)
    1448:	9a06      	ldr	r2, [sp, #24]
    144a:	9b07      	ldr	r3, [sp, #28]
    144c:	981a      	ldr	r0, [sp, #104]	; 0x68
    144e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1450:	47a8      	blx	r5
    1452:	4aa8      	ldr	r2, [pc, #672]	; (16f4 <computeKalmanGains+0x378>)
    1454:	0006      	movs	r6, r0
    1456:	000f      	movs	r7, r1
    1458:	9808      	ldr	r0, [sp, #32]
    145a:	9909      	ldr	r1, [sp, #36]	; 0x24
    145c:	4ba6      	ldr	r3, [pc, #664]	; (16f8 <computeKalmanGains+0x37c>)
    145e:	47a8      	blx	r5
    1460:	4cac      	ldr	r4, [pc, #688]	; (1714 <computeKalmanGains+0x398>)
    1462:	0002      	movs	r2, r0
    1464:	000b      	movs	r3, r1
    1466:	0030      	movs	r0, r6
    1468:	0039      	movs	r1, r7
    146a:	47a0      	blx	r4
    146c:	4aa3      	ldr	r2, [pc, #652]	; (16fc <computeKalmanGains+0x380>)
    146e:	0006      	movs	r6, r0
    1470:	000f      	movs	r7, r1
    1472:	9810      	ldr	r0, [sp, #64]	; 0x40
    1474:	9911      	ldr	r1, [sp, #68]	; 0x44
    1476:	4ba2      	ldr	r3, [pc, #648]	; (1700 <computeKalmanGains+0x384>)
    1478:	47a8      	blx	r5
    147a:	0002      	movs	r2, r0
    147c:	000b      	movs	r3, r1
    147e:	0030      	movs	r0, r6
    1480:	0039      	movs	r1, r7
    1482:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1488:	9016      	str	r0, [sp, #88]	; 0x58
    148a:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    148c:	981a      	ldr	r0, [sp, #104]	; 0x68
    148e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1490:	47a8      	blx	r5
    1492:	4a98      	ldr	r2, [pc, #608]	; (16f4 <computeKalmanGains+0x378>)
    1494:	0006      	movs	r6, r0
    1496:	000f      	movs	r7, r1
    1498:	980e      	ldr	r0, [sp, #56]	; 0x38
    149a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    149c:	4b96      	ldr	r3, [pc, #600]	; (16f8 <computeKalmanGains+0x37c>)
    149e:	47a8      	blx	r5
    14a0:	0002      	movs	r2, r0
    14a2:	000b      	movs	r3, r1
    14a4:	0030      	movs	r0, r6
    14a6:	0039      	movs	r1, r7
    14a8:	47a0      	blx	r4
    14aa:	4a94      	ldr	r2, [pc, #592]	; (16fc <computeKalmanGains+0x380>)
    14ac:	0006      	movs	r6, r0
    14ae:	000f      	movs	r7, r1
    14b0:	9812      	ldr	r0, [sp, #72]	; 0x48
    14b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    14b4:	4b92      	ldr	r3, [pc, #584]	; (1700 <computeKalmanGains+0x384>)
    14b6:	47a8      	blx	r5
    14b8:	0002      	movs	r2, r0
    14ba:	000b      	movs	r3, r1
    14bc:	0030      	movs	r0, r6
    14be:	0039      	movs	r1, r7
    14c0:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14c6:	9000      	str	r0, [sp, #0]
    14c8:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14ca:	981a      	ldr	r0, [sp, #104]	; 0x68
    14cc:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14ce:	47a8      	blx	r5
    14d0:	4a88      	ldr	r2, [pc, #544]	; (16f4 <computeKalmanGains+0x378>)
    14d2:	0006      	movs	r6, r0
    14d4:	000f      	movs	r7, r1
    14d6:	9804      	ldr	r0, [sp, #16]
    14d8:	9905      	ldr	r1, [sp, #20]
    14da:	4b87      	ldr	r3, [pc, #540]	; (16f8 <computeKalmanGains+0x37c>)
    14dc:	47a8      	blx	r5
    14de:	0002      	movs	r2, r0
    14e0:	000b      	movs	r3, r1
    14e2:	0030      	movs	r0, r6
    14e4:	0039      	movs	r1, r7
    14e6:	47a0      	blx	r4
    14e8:	4a84      	ldr	r2, [pc, #528]	; (16fc <computeKalmanGains+0x380>)
    14ea:	0006      	movs	r6, r0
    14ec:	000f      	movs	r7, r1
    14ee:	9802      	ldr	r0, [sp, #8]
    14f0:	9903      	ldr	r1, [sp, #12]
    14f2:	4b83      	ldr	r3, [pc, #524]	; (1700 <computeKalmanGains+0x384>)
    14f4:	47a8      	blx	r5
    14f6:	0002      	movs	r2, r0
    14f8:	000b      	movs	r3, r1
    14fa:	0030      	movs	r0, r6
    14fc:	0039      	movs	r1, r7
    14fe:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1500:	9a06      	ldr	r2, [sp, #24]
    1502:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1504:	9014      	str	r0, [sp, #80]	; 0x50
    1506:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1508:	981c      	ldr	r0, [sp, #112]	; 0x70
    150a:	991d      	ldr	r1, [sp, #116]	; 0x74
    150c:	47a8      	blx	r5
    150e:	9a08      	ldr	r2, [sp, #32]
    1510:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1512:	0006      	movs	r6, r0
    1514:	000f      	movs	r7, r1
    1516:	981e      	ldr	r0, [sp, #120]	; 0x78
    1518:	991f      	ldr	r1, [sp, #124]	; 0x7c
    151a:	47a8      	blx	r5
    151c:	0002      	movs	r2, r0
    151e:	000b      	movs	r3, r1
    1520:	0030      	movs	r0, r6
    1522:	0039      	movs	r1, r7
    1524:	47a0      	blx	r4
    1526:	4a73      	ldr	r2, [pc, #460]	; (16f4 <computeKalmanGains+0x378>)
    1528:	0006      	movs	r6, r0
    152a:	000f      	movs	r7, r1
    152c:	9810      	ldr	r0, [sp, #64]	; 0x40
    152e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1530:	4b71      	ldr	r3, [pc, #452]	; (16f8 <computeKalmanGains+0x37c>)
    1532:	47a8      	blx	r5
    1534:	0002      	movs	r2, r0
    1536:	000b      	movs	r3, r1
    1538:	0030      	movs	r0, r6
    153a:	0039      	movs	r1, r7
    153c:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    153e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1542:	9018      	str	r0, [sp, #96]	; 0x60
    1544:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1546:	981c      	ldr	r0, [sp, #112]	; 0x70
    1548:	991d      	ldr	r1, [sp, #116]	; 0x74
    154a:	47a8      	blx	r5
    154c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    154e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1550:	0006      	movs	r6, r0
    1552:	000f      	movs	r7, r1
    1554:	981e      	ldr	r0, [sp, #120]	; 0x78
    1556:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1558:	47a8      	blx	r5
    155a:	0002      	movs	r2, r0
    155c:	000b      	movs	r3, r1
    155e:	0030      	movs	r0, r6
    1560:	0039      	movs	r1, r7
    1562:	47a0      	blx	r4
    1564:	4a63      	ldr	r2, [pc, #396]	; (16f4 <computeKalmanGains+0x378>)
    1566:	0006      	movs	r6, r0
    1568:	000f      	movs	r7, r1
    156a:	9812      	ldr	r0, [sp, #72]	; 0x48
    156c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    156e:	4b62      	ldr	r3, [pc, #392]	; (16f8 <computeKalmanGains+0x37c>)
    1570:	47a8      	blx	r5
    1572:	0002      	movs	r2, r0
    1574:	000b      	movs	r3, r1
    1576:	0030      	movs	r0, r6
    1578:	0039      	movs	r1, r7
    157a:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    157c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    157e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1580:	9026      	str	r0, [sp, #152]	; 0x98
    1582:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1584:	981c      	ldr	r0, [sp, #112]	; 0x70
    1586:	991d      	ldr	r1, [sp, #116]	; 0x74
    1588:	47a8      	blx	r5
    158a:	9a04      	ldr	r2, [sp, #16]
    158c:	9b05      	ldr	r3, [sp, #20]
    158e:	0006      	movs	r6, r0
    1590:	000f      	movs	r7, r1
    1592:	981e      	ldr	r0, [sp, #120]	; 0x78
    1594:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1596:	47a8      	blx	r5
    1598:	0002      	movs	r2, r0
    159a:	000b      	movs	r3, r1
    159c:	0030      	movs	r0, r6
    159e:	0039      	movs	r1, r7
    15a0:	47a0      	blx	r4
    15a2:	4a54      	ldr	r2, [pc, #336]	; (16f4 <computeKalmanGains+0x378>)
    15a4:	0006      	movs	r6, r0
    15a6:	000f      	movs	r7, r1
    15a8:	9802      	ldr	r0, [sp, #8]
    15aa:	9903      	ldr	r1, [sp, #12]
    15ac:	4b52      	ldr	r3, [pc, #328]	; (16f8 <computeKalmanGains+0x37c>)
    15ae:	47a8      	blx	r5
    15b0:	0002      	movs	r2, r0
    15b2:	000b      	movs	r3, r1
    15b4:	0030      	movs	r0, r6
    15b6:	0039      	movs	r1, r7
    15b8:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15ba:	9a06      	ldr	r2, [sp, #24]
    15bc:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15be:	9028      	str	r0, [sp, #160]	; 0xa0
    15c0:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15c2:	9820      	ldr	r0, [sp, #128]	; 0x80
    15c4:	9921      	ldr	r1, [sp, #132]	; 0x84
    15c6:	47a8      	blx	r5
    15c8:	9a08      	ldr	r2, [sp, #32]
    15ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15cc:	0006      	movs	r6, r0
    15ce:	000f      	movs	r7, r1
    15d0:	9822      	ldr	r0, [sp, #136]	; 0x88
    15d2:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15d4:	47a8      	blx	r5
    15d6:	0002      	movs	r2, r0
    15d8:	000b      	movs	r3, r1
    15da:	0030      	movs	r0, r6
    15dc:	0039      	movs	r1, r7
    15de:	47a0      	blx	r4
    15e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    15e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    15e4:	0006      	movs	r6, r0
    15e6:	000f      	movs	r7, r1
    15e8:	9824      	ldr	r0, [sp, #144]	; 0x90
    15ea:	9925      	ldr	r1, [sp, #148]	; 0x94
    15ec:	47a8      	blx	r5
    15ee:	0002      	movs	r2, r0
    15f0:	000b      	movs	r3, r1
    15f2:	0030      	movs	r0, r6
    15f4:	0039      	movs	r1, r7
    15f6:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15fc:	9010      	str	r0, [sp, #64]	; 0x40
    15fe:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1600:	9820      	ldr	r0, [sp, #128]	; 0x80
    1602:	9921      	ldr	r1, [sp, #132]	; 0x84
    1604:	47a8      	blx	r5
    1606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    160a:	0006      	movs	r6, r0
    160c:	000f      	movs	r7, r1
    160e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1610:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1612:	47a8      	blx	r5
    1614:	0002      	movs	r2, r0
    1616:	000b      	movs	r3, r1
    1618:	0030      	movs	r0, r6
    161a:	0039      	movs	r1, r7
    161c:	47a0      	blx	r4
    161e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1622:	0006      	movs	r6, r0
    1624:	000f      	movs	r7, r1
    1626:	9824      	ldr	r0, [sp, #144]	; 0x90
    1628:	9925      	ldr	r1, [sp, #148]	; 0x94
    162a:	47a8      	blx	r5
    162c:	0002      	movs	r2, r0
    162e:	000b      	movs	r3, r1
    1630:	0030      	movs	r0, r6
    1632:	0039      	movs	r1, r7
    1634:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    163a:	9006      	str	r0, [sp, #24]
    163c:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    163e:	9820      	ldr	r0, [sp, #128]	; 0x80
    1640:	9921      	ldr	r1, [sp, #132]	; 0x84
    1642:	47a8      	blx	r5
    1644:	9a04      	ldr	r2, [sp, #16]
    1646:	9b05      	ldr	r3, [sp, #20]
    1648:	0006      	movs	r6, r0
    164a:	000f      	movs	r7, r1
    164c:	9822      	ldr	r0, [sp, #136]	; 0x88
    164e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1650:	47a8      	blx	r5
    1652:	0002      	movs	r2, r0
    1654:	000b      	movs	r3, r1
    1656:	0030      	movs	r0, r6
    1658:	0039      	movs	r1, r7
    165a:	47a0      	blx	r4
    165c:	9a02      	ldr	r2, [sp, #8]
    165e:	9b03      	ldr	r3, [sp, #12]
    1660:	0006      	movs	r6, r0
    1662:	000f      	movs	r7, r1
    1664:	9824      	ldr	r0, [sp, #144]	; 0x90
    1666:	9925      	ldr	r1, [sp, #148]	; 0x94
    1668:	47a8      	blx	r5
    166a:	0002      	movs	r2, r0
    166c:	000b      	movs	r3, r1
    166e:	0030      	movs	r0, r6
    1670:	0039      	movs	r1, r7
    1672:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1674:	4a1f      	ldr	r2, [pc, #124]	; (16f4 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1676:	9002      	str	r0, [sp, #8]
    1678:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    167a:	9800      	ldr	r0, [sp, #0]
    167c:	9901      	ldr	r1, [sp, #4]
    167e:	4b1e      	ldr	r3, [pc, #120]	; (16f8 <computeKalmanGains+0x37c>)
    1680:	47a8      	blx	r5
    1682:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1686:	47a0      	blx	r4
    1688:	4a1c      	ldr	r2, [pc, #112]	; (16fc <computeKalmanGains+0x380>)
    168a:	0006      	movs	r6, r0
    168c:	000f      	movs	r7, r1
    168e:	9814      	ldr	r0, [sp, #80]	; 0x50
    1690:	9915      	ldr	r1, [sp, #84]	; 0x54
    1692:	4b1b      	ldr	r3, [pc, #108]	; (1700 <computeKalmanGains+0x384>)
    1694:	47a8      	blx	r5
    1696:	0002      	movs	r2, r0
    1698:	000b      	movs	r3, r1
    169a:	0030      	movs	r0, r6
    169c:	0039      	movs	r1, r7
    169e:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16a0:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16a2:	9008      	str	r0, [sp, #32]
    16a4:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    16a8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    16aa:	2300      	movs	r3, #0
    16ac:	47a8      	blx	r5
    16ae:	0006      	movs	r6, r0
    16b0:	000f      	movs	r7, r1
    16b2:	0002      	movs	r2, r0
    16b4:	000b      	movs	r3, r1
    16b6:	9800      	ldr	r0, [sp, #0]
    16b8:	9901      	ldr	r1, [sp, #4]
    16ba:	47a0      	blx	r4
    16bc:	4a0d      	ldr	r2, [pc, #52]	; (16f4 <computeKalmanGains+0x378>)
    16be:	9004      	str	r0, [sp, #16]
    16c0:	9105      	str	r1, [sp, #20]
    16c2:	9814      	ldr	r0, [sp, #80]	; 0x50
    16c4:	9915      	ldr	r1, [sp, #84]	; 0x54
    16c6:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <computeKalmanGains+0x37c>)
    16c8:	47a8      	blx	r5
    16ca:	0002      	movs	r2, r0
    16cc:	000b      	movs	r3, r1
    16ce:	9804      	ldr	r0, [sp, #16]
    16d0:	9905      	ldr	r1, [sp, #20]
    16d2:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16d4:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16d6:	9030      	str	r0, [sp, #192]	; 0xc0
    16d8:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16da:	9800      	ldr	r0, [sp, #0]
    16dc:	9901      	ldr	r1, [sp, #4]
    16de:	2300      	movs	r3, #0
    16e0:	47a8      	blx	r5
    16e2:	0032      	movs	r2, r6
    16e4:	003b      	movs	r3, r7
    16e6:	47a0      	blx	r4
    16e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    16ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    16ec:	47a0      	blx	r4
    16ee:	e013      	b.n	1718 <computeKalmanGains+0x39c>
    16f0:	20000010 	.word	0x20000010
    16f4:	d2f1a9fc 	.word	0xd2f1a9fc
    16f8:	3f80624d 	.word	0x3f80624d
    16fc:	a0b5ed8d 	.word	0xa0b5ed8d
    1700:	3f00c6f7 	.word	0x3f00c6f7
    1704:	3f50624d 	.word	0x3f50624d
    1708:	3ff00000 	.word	0x3ff00000
    170c:	40220000 	.word	0x40220000
    1710:	000051f1 	.word	0x000051f1
    1714:	00004351 	.word	0x00004351
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1718:	4ada      	ldr	r2, [pc, #872]	; (1a84 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    171a:	9114      	str	r1, [sp, #80]	; 0x50
    171c:	9004      	str	r0, [sp, #16]
    171e:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1720:	4bd9      	ldr	r3, [pc, #868]	; (1a88 <computeKalmanGains+0x70c>)
    1722:	9826      	ldr	r0, [sp, #152]	; 0x98
    1724:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1726:	47a8      	blx	r5
    1728:	9a18      	ldr	r2, [sp, #96]	; 0x60
    172a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    172c:	47a0      	blx	r4
    172e:	4ad7      	ldr	r2, [pc, #860]	; (1a8c <computeKalmanGains+0x710>)
    1730:	0006      	movs	r6, r0
    1732:	000f      	movs	r7, r1
    1734:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1736:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1738:	4bd5      	ldr	r3, [pc, #852]	; (1a90 <computeKalmanGains+0x714>)
    173a:	47a8      	blx	r5
    173c:	0002      	movs	r2, r0
    173e:	000b      	movs	r3, r1
    1740:	0030      	movs	r0, r6
    1742:	0039      	movs	r1, r7
    1744:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1746:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1748:	902a      	str	r0, [sp, #168]	; 0xa8
    174a:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    174c:	9818      	ldr	r0, [sp, #96]	; 0x60
    174e:	9919      	ldr	r1, [sp, #100]	; 0x64
    1750:	2300      	movs	r3, #0
    1752:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1754:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1756:	9032      	str	r0, [sp, #200]	; 0xc8
    1758:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    175a:	9826      	ldr	r0, [sp, #152]	; 0x98
    175c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    175e:	2300      	movs	r3, #0
    1760:	47a8      	blx	r5
    1762:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1764:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1766:	47a0      	blx	r4
    1768:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    176a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    176c:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    176e:	4ac5      	ldr	r2, [pc, #788]	; (1a84 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1770:	902c      	str	r0, [sp, #176]	; 0xb0
    1772:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1774:	9806      	ldr	r0, [sp, #24]
    1776:	9907      	ldr	r1, [sp, #28]
    1778:	4bc3      	ldr	r3, [pc, #780]	; (1a88 <computeKalmanGains+0x70c>)
    177a:	47a8      	blx	r5
    177c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    177e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1780:	47a0      	blx	r4
    1782:	4ac2      	ldr	r2, [pc, #776]	; (1a8c <computeKalmanGains+0x710>)
    1784:	0006      	movs	r6, r0
    1786:	000f      	movs	r7, r1
    1788:	9802      	ldr	r0, [sp, #8]
    178a:	9903      	ldr	r1, [sp, #12]
    178c:	4bc0      	ldr	r3, [pc, #768]	; (1a90 <computeKalmanGains+0x714>)
    178e:	47a8      	blx	r5
    1790:	0002      	movs	r2, r0
    1792:	000b      	movs	r3, r1
    1794:	0030      	movs	r0, r6
    1796:	0039      	movs	r1, r7
    1798:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    179a:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    179c:	9000      	str	r0, [sp, #0]
    179e:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    17a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    17a4:	2300      	movs	r3, #0
    17a6:	47a8      	blx	r5
    17a8:	0006      	movs	r6, r0
    17aa:	000f      	movs	r7, r1
    17ac:	0002      	movs	r2, r0
    17ae:	000b      	movs	r3, r1
    17b0:	9806      	ldr	r0, [sp, #24]
    17b2:	9907      	ldr	r1, [sp, #28]
    17b4:	47a0      	blx	r4
    17b6:	4ab3      	ldr	r2, [pc, #716]	; (1a84 <computeKalmanGains+0x708>)
    17b8:	900a      	str	r0, [sp, #40]	; 0x28
    17ba:	910b      	str	r1, [sp, #44]	; 0x2c
    17bc:	9802      	ldr	r0, [sp, #8]
    17be:	9903      	ldr	r1, [sp, #12]
    17c0:	4bb1      	ldr	r3, [pc, #708]	; (1a88 <computeKalmanGains+0x70c>)
    17c2:	47a8      	blx	r5
    17c4:	0002      	movs	r2, r0
    17c6:	000b      	movs	r3, r1
    17c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    17ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17cc:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ce:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17d0:	9012      	str	r0, [sp, #72]	; 0x48
    17d2:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17d4:	9806      	ldr	r0, [sp, #24]
    17d6:	9907      	ldr	r1, [sp, #28]
    17d8:	2300      	movs	r3, #0
    17da:	47a8      	blx	r5
    17dc:	0032      	movs	r2, r6
    17de:	003b      	movs	r3, r7
    17e0:	47a0      	blx	r4
    17e2:	9a02      	ldr	r2, [sp, #8]
    17e4:	9b03      	ldr	r3, [sp, #12]
    17e6:	47a0      	blx	r4
    17e8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    17ea:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    17ec:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17ee:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    17f0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17f2:	9002      	str	r0, [sp, #8]
    17f4:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17f6:	9808      	ldr	r0, [sp, #32]
    17f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    17fa:	47a0      	blx	r4
    17fc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    17fe:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    1800:	900a      	str	r0, [sp, #40]	; 0x28
    1802:	910b      	str	r1, [sp, #44]	; 0x2c
    1804:	9802      	ldr	r0, [sp, #8]
    1806:	9903      	ldr	r1, [sp, #12]
    1808:	47a0      	blx	r4
    180a:	9a00      	ldr	r2, [sp, #0]
    180c:	9b01      	ldr	r3, [sp, #4]
    180e:	900c      	str	r0, [sp, #48]	; 0x30
    1810:	910d      	str	r1, [sp, #52]	; 0x34
    1812:	9804      	ldr	r0, [sp, #16]
    1814:	9916      	ldr	r1, [sp, #88]	; 0x58
    1816:	47a8      	blx	r5
    1818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    181a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    181c:	900e      	str	r0, [sp, #56]	; 0x38
    181e:	910f      	str	r1, [sp, #60]	; 0x3c
    1820:	980a      	ldr	r0, [sp, #40]	; 0x28
    1822:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1824:	47a8      	blx	r5
    1826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    182a:	4e9a      	ldr	r6, [pc, #616]	; (1a94 <computeKalmanGains+0x718>)
    182c:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    182e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1830:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1832:	9006      	str	r0, [sp, #24]
    1834:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1836:	9808      	ldr	r0, [sp, #32]
    1838:	9909      	ldr	r1, [sp, #36]	; 0x24
    183a:	47a8      	blx	r5
    183c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    183e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1840:	47b0      	blx	r6
    1842:	9a06      	ldr	r2, [sp, #24]
    1844:	9b07      	ldr	r3, [sp, #28]
    1846:	4e94      	ldr	r6, [pc, #592]	; (1a98 <computeKalmanGains+0x71c>)
    1848:	47b0      	blx	r6
    184a:	0002      	movs	r2, r0
    184c:	000b      	movs	r3, r1
    184e:	9240      	str	r2, [sp, #256]	; 0x100
    1850:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1852:	2280      	movs	r2, #128	; 0x80
    1854:	0612      	lsls	r2, r2, #24
    1856:	4694      	mov	ip, r2
    1858:	9b14      	ldr	r3, [sp, #80]	; 0x50
    185a:	9a04      	ldr	r2, [sp, #16]
    185c:	4463      	add	r3, ip
    185e:	932f      	str	r3, [sp, #188]	; 0xbc
    1860:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1862:	9034      	str	r0, [sp, #208]	; 0xd0
    1864:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1866:	9808      	ldr	r0, [sp, #32]
    1868:	9909      	ldr	r1, [sp, #36]	; 0x24
    186a:	47a8      	blx	r5
    186c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    186e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1870:	0006      	movs	r6, r0
    1872:	000f      	movs	r7, r1
    1874:	9804      	ldr	r0, [sp, #16]
    1876:	9916      	ldr	r1, [sp, #88]	; 0x58
    1878:	47a8      	blx	r5
    187a:	0002      	movs	r2, r0
    187c:	000b      	movs	r3, r1
    187e:	0030      	movs	r0, r6
    1880:	0039      	movs	r1, r7
    1882:	47a0      	blx	r4
    1884:	9a06      	ldr	r2, [sp, #24]
    1886:	9b07      	ldr	r3, [sp, #28]
    1888:	4e83      	ldr	r6, [pc, #524]	; (1a98 <computeKalmanGains+0x71c>)
    188a:	47b0      	blx	r6
    188c:	0002      	movs	r2, r0
    188e:	000b      	movs	r3, r1
    1890:	900e      	str	r0, [sp, #56]	; 0x38
    1892:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1894:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1896:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1898:	9242      	str	r2, [sp, #264]	; 0x108
    189a:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    189c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    189e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18a0:	47a8      	blx	r5
    18a2:	9a00      	ldr	r2, [sp, #0]
    18a4:	9b01      	ldr	r3, [sp, #4]
    18a6:	0006      	movs	r6, r0
    18a8:	000f      	movs	r7, r1
    18aa:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18ac:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18ae:	47a8      	blx	r5
    18b0:	0002      	movs	r2, r0
    18b2:	000b      	movs	r3, r1
    18b4:	0030      	movs	r0, r6
    18b6:	0039      	movs	r1, r7
    18b8:	4e76      	ldr	r6, [pc, #472]	; (1a94 <computeKalmanGains+0x718>)
    18ba:	47b0      	blx	r6
    18bc:	9a06      	ldr	r2, [sp, #24]
    18be:	9b07      	ldr	r3, [sp, #28]
    18c0:	4e75      	ldr	r6, [pc, #468]	; (1a98 <computeKalmanGains+0x71c>)
    18c2:	47b0      	blx	r6
    18c4:	0002      	movs	r2, r0
    18c6:	000b      	movs	r3, r1
    18c8:	913e      	str	r1, [sp, #248]	; 0xf8
    18ca:	9244      	str	r2, [sp, #272]	; 0x110
    18cc:	9345      	str	r3, [sp, #276]	; 0x114
    18ce:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18d0:	9a04      	ldr	r2, [sp, #16]
    18d2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18d4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18d6:	992b      	ldr	r1, [sp, #172]	; 0xac
    18d8:	47a8      	blx	r5
    18da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18de:	0006      	movs	r6, r0
    18e0:	000f      	movs	r7, r1
    18e2:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18e4:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18e6:	47a8      	blx	r5
    18e8:	0002      	movs	r2, r0
    18ea:	000b      	movs	r3, r1
    18ec:	0030      	movs	r0, r6
    18ee:	0039      	movs	r1, r7
    18f0:	47a0      	blx	r4
    18f2:	9a06      	ldr	r2, [sp, #24]
    18f4:	9b07      	ldr	r3, [sp, #28]
    18f6:	4e68      	ldr	r6, [pc, #416]	; (1a98 <computeKalmanGains+0x71c>)
    18f8:	47b0      	blx	r6
    18fa:	0002      	movs	r2, r0
    18fc:	000b      	movs	r3, r1
    18fe:	9010      	str	r0, [sp, #64]	; 0x40
    1900:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1902:	9800      	ldr	r0, [sp, #0]
    1904:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1906:	9246      	str	r2, [sp, #280]	; 0x118
    1908:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    190a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    190c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    190e:	47a8      	blx	r5
    1910:	9a02      	ldr	r2, [sp, #8]
    1912:	9b03      	ldr	r3, [sp, #12]
    1914:	0006      	movs	r6, r0
    1916:	000f      	movs	r7, r1
    1918:	9800      	ldr	r0, [sp, #0]
    191a:	9901      	ldr	r1, [sp, #4]
    191c:	47a8      	blx	r5
    191e:	0002      	movs	r2, r0
    1920:	000b      	movs	r3, r1
    1922:	0030      	movs	r0, r6
    1924:	0039      	movs	r1, r7
    1926:	4e5b      	ldr	r6, [pc, #364]	; (1a94 <computeKalmanGains+0x718>)
    1928:	47b0      	blx	r6
    192a:	9a06      	ldr	r2, [sp, #24]
    192c:	9b07      	ldr	r3, [sp, #28]
    192e:	4e5a      	ldr	r6, [pc, #360]	; (1a98 <computeKalmanGains+0x71c>)
    1930:	47b0      	blx	r6
    1932:	0002      	movs	r2, r0
    1934:	000b      	movs	r3, r1
    1936:	9014      	str	r0, [sp, #80]	; 0x50
    1938:	9115      	str	r1, [sp, #84]	; 0x54
    193a:	9248      	str	r2, [sp, #288]	; 0x120
    193c:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    193e:	9800      	ldr	r0, [sp, #0]
    1940:	9901      	ldr	r1, [sp, #4]
    1942:	9a04      	ldr	r2, [sp, #16]
    1944:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1946:	47a8      	blx	r5
    1948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    194a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    194c:	0006      	movs	r6, r0
    194e:	000f      	movs	r7, r1
    1950:	9802      	ldr	r0, [sp, #8]
    1952:	9903      	ldr	r1, [sp, #12]
    1954:	47a8      	blx	r5
    1956:	0002      	movs	r2, r0
    1958:	000b      	movs	r3, r1
    195a:	0030      	movs	r0, r6
    195c:	0039      	movs	r1, r7
    195e:	47a0      	blx	r4
    1960:	9a06      	ldr	r2, [sp, #24]
    1962:	9b07      	ldr	r3, [sp, #28]
    1964:	4e4c      	ldr	r6, [pc, #304]	; (1a98 <computeKalmanGains+0x71c>)
    1966:	47b0      	blx	r6
    1968:	0002      	movs	r2, r0
    196a:	000b      	movs	r3, r1
    196c:	9036      	str	r0, [sp, #216]	; 0xd8
    196e:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1970:	4e48      	ldr	r6, [pc, #288]	; (1a94 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1972:	924a      	str	r2, [sp, #296]	; 0x128
    1974:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1976:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1978:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    197a:	2000      	movs	r0, #0
    197c:	4947      	ldr	r1, [pc, #284]	; (1a9c <computeKalmanGains+0x720>)
    197e:	47b0      	blx	r6
    1980:	0002      	movs	r2, r0
    1982:	000b      	movs	r3, r1
    1984:	900c      	str	r0, [sp, #48]	; 0x30
    1986:	910d      	str	r1, [sp, #52]	; 0x34
    1988:	9808      	ldr	r0, [sp, #32]
    198a:	9909      	ldr	r1, [sp, #36]	; 0x24
    198c:	47a8      	blx	r5
    198e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1992:	0006      	movs	r6, r0
    1994:	000f      	movs	r7, r1
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9901      	ldr	r1, [sp, #4]
    199a:	47a8      	blx	r5
    199c:	0002      	movs	r2, r0
    199e:	000b      	movs	r3, r1
    19a0:	0030      	movs	r0, r6
    19a2:	0039      	movs	r1, r7
    19a4:	4e3b      	ldr	r6, [pc, #236]	; (1a94 <computeKalmanGains+0x718>)
    19a6:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19ac:	9006      	str	r0, [sp, #24]
    19ae:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19b0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    19b2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    19b4:	47a8      	blx	r5
    19b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19ba:	0006      	movs	r6, r0
    19bc:	000f      	movs	r7, r1
    19be:	9812      	ldr	r0, [sp, #72]	; 0x48
    19c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19c2:	47a8      	blx	r5
    19c4:	0002      	movs	r2, r0
    19c6:	000b      	movs	r3, r1
    19c8:	0030      	movs	r0, r6
    19ca:	0039      	movs	r1, r7
    19cc:	4e31      	ldr	r6, [pc, #196]	; (1a94 <computeKalmanGains+0x718>)
    19ce:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19d4:	900a      	str	r0, [sp, #40]	; 0x28
    19d6:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19d8:	9804      	ldr	r0, [sp, #16]
    19da:	9916      	ldr	r1, [sp, #88]	; 0x58
    19dc:	47a8      	blx	r5
    19de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19e2:	0006      	movs	r6, r0
    19e4:	000f      	movs	r7, r1
    19e6:	9802      	ldr	r0, [sp, #8]
    19e8:	9903      	ldr	r1, [sp, #12]
    19ea:	47a8      	blx	r5
    19ec:	0002      	movs	r2, r0
    19ee:	000b      	movs	r3, r1
    19f0:	0030      	movs	r0, r6
    19f2:	0039      	movs	r1, r7
    19f4:	4e27      	ldr	r6, [pc, #156]	; (1a94 <computeKalmanGains+0x718>)
    19f6:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19f8:	2280      	movs	r2, #128	; 0x80
    19fa:	0612      	lsls	r2, r2, #24
    19fc:	4694      	mov	ip, r2
    19fe:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    1a00:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a02:	4463      	add	r3, ip
    1a04:	932f      	str	r3, [sp, #188]	; 0xbc
    1a06:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a08:	900c      	str	r0, [sp, #48]	; 0x30
    1a0a:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a0c:	9808      	ldr	r0, [sp, #32]
    1a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a10:	47a8      	blx	r5
    1a12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1a14:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1a16:	47a0      	blx	r4
    1a18:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a1c:	0006      	movs	r6, r0
    1a1e:	000f      	movs	r7, r1
    1a20:	9800      	ldr	r0, [sp, #0]
    1a22:	9901      	ldr	r1, [sp, #4]
    1a24:	47a8      	blx	r5
    1a26:	0002      	movs	r2, r0
    1a28:	000b      	movs	r3, r1
    1a2a:	0030      	movs	r0, r6
    1a2c:	0039      	movs	r1, r7
    1a2e:	4e19      	ldr	r6, [pc, #100]	; (1a94 <computeKalmanGains+0x718>)
    1a30:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a32:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a34:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a36:	9008      	str	r0, [sp, #32]
    1a38:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a3a:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a3e:	47a0      	blx	r4
    1a40:	4a10      	ldr	r2, [pc, #64]	; (1a84 <computeKalmanGains+0x708>)
    1a42:	0006      	movs	r6, r0
    1a44:	000f      	movs	r7, r1
    1a46:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a48:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a4a:	4b0f      	ldr	r3, [pc, #60]	; (1a88 <computeKalmanGains+0x70c>)
    1a4c:	47a8      	blx	r5
    1a4e:	0002      	movs	r2, r0
    1a50:	000b      	movs	r3, r1
    1a52:	0030      	movs	r0, r6
    1a54:	0039      	movs	r1, r7
    1a56:	47a0      	blx	r4
    1a58:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a5a:	0006      	movs	r6, r0
    1a5c:	000f      	movs	r7, r1
    1a5e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a60:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a62:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a64:	47a8      	blx	r5
    1a66:	0002      	movs	r2, r0
    1a68:	000b      	movs	r3, r1
    1a6a:	0030      	movs	r0, r6
    1a6c:	0039      	movs	r1, r7
    1a6e:	47a0      	blx	r4
    1a70:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a74:	0006      	movs	r6, r0
    1a76:	000f      	movs	r7, r1
    1a78:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a7c:	47a8      	blx	r5
    1a7e:	0002      	movs	r2, r0
    1a80:	000b      	movs	r3, r1
    1a82:	e00d      	b.n	1aa0 <computeKalmanGains+0x724>
    1a84:	d2f1a9fc 	.word	0xd2f1a9fc
    1a88:	3f80624d 	.word	0x3f80624d
    1a8c:	a0b5ed8d 	.word	0xa0b5ed8d
    1a90:	3f00c6f7 	.word	0x3f00c6f7
    1a94:	000056e5 	.word	0x000056e5
    1a98:	000049a9 	.word	0x000049a9
    1a9c:	3ff00000 	.word	0x3ff00000
    1aa0:	0030      	movs	r0, r6
    1aa2:	0039      	movs	r1, r7
    1aa4:	4e58      	ldr	r6, [pc, #352]	; (1c08 <computeKalmanGains+0x88c>)
    1aa6:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aa8:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1aaa:	900e      	str	r0, [sp, #56]	; 0x38
    1aac:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ab0:	9804      	ldr	r0, [sp, #16]
    1ab2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ab4:	47a8      	blx	r5
    1ab6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ab8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1aba:	47a0      	blx	r4
    1abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1ac0:	0006      	movs	r6, r0
    1ac2:	000f      	movs	r7, r1
    1ac4:	9802      	ldr	r0, [sp, #8]
    1ac6:	9903      	ldr	r1, [sp, #12]
    1ac8:	47a8      	blx	r5
    1aca:	4c4f      	ldr	r4, [pc, #316]	; (1c08 <computeKalmanGains+0x88c>)
    1acc:	0002      	movs	r2, r0
    1ace:	000b      	movs	r3, r1
    1ad0:	0030      	movs	r0, r6
    1ad2:	0039      	movs	r1, r7
    1ad4:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ad6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ad8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ada:	9004      	str	r0, [sp, #16]
    1adc:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ade:	2000      	movs	r0, #0
    1ae0:	494a      	ldr	r1, [pc, #296]	; (1c0c <computeKalmanGains+0x890>)
    1ae2:	47a0      	blx	r4
    1ae4:	0002      	movs	r2, r0
    1ae6:	000b      	movs	r3, r1
    1ae8:	9016      	str	r0, [sp, #88]	; 0x58
    1aea:	9117      	str	r1, [sp, #92]	; 0x5c
    1aec:	9800      	ldr	r0, [sp, #0]
    1aee:	9901      	ldr	r1, [sp, #4]
    1af0:	47a8      	blx	r5
    1af2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1af6:	0006      	movs	r6, r0
    1af8:	000f      	movs	r7, r1
    1afa:	9800      	ldr	r0, [sp, #0]
    1afc:	9901      	ldr	r1, [sp, #4]
    1afe:	47a8      	blx	r5
    1b00:	0002      	movs	r2, r0
    1b02:	000b      	movs	r3, r1
    1b04:	0030      	movs	r0, r6
    1b06:	0039      	movs	r1, r7
    1b08:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b0e:	9010      	str	r0, [sp, #64]	; 0x40
    1b10:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b12:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b14:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b16:	47a8      	blx	r5
    1b18:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b1c:	0006      	movs	r6, r0
    1b1e:	000f      	movs	r7, r1
    1b20:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b22:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b24:	47a8      	blx	r5
    1b26:	0002      	movs	r2, r0
    1b28:	000b      	movs	r3, r1
    1b2a:	0030      	movs	r0, r6
    1b2c:	0039      	movs	r1, r7
    1b2e:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b30:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b34:	9012      	str	r0, [sp, #72]	; 0x48
    1b36:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b38:	9802      	ldr	r0, [sp, #8]
    1b3a:	9903      	ldr	r1, [sp, #12]
    1b3c:	47a8      	blx	r5
    1b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b42:	0006      	movs	r6, r0
    1b44:	000f      	movs	r7, r1
    1b46:	9802      	ldr	r0, [sp, #8]
    1b48:	9903      	ldr	r1, [sp, #12]
    1b4a:	47a8      	blx	r5
    1b4c:	000b      	movs	r3, r1
    1b4e:	0002      	movs	r2, r0
    1b50:	0039      	movs	r1, r7
    1b52:	0030      	movs	r0, r6
    1b54:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b56:	2400      	movs	r4, #0
    1b58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b5a:	9002      	str	r0, [sp, #8]
    1b5c:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b5e:	3301      	adds	r3, #1
    1b60:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b62:	ab40      	add	r3, sp, #256	; 0x100
    1b64:	9326      	str	r3, [sp, #152]	; 0x98
    1b66:	4b28      	ldr	r3, [pc, #160]	; (1c08 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b68:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b6a:	9328      	str	r3, [sp, #160]	; 0xa0
    1b6c:	ab4c      	add	r3, sp, #304	; 0x130
    1b6e:	191b      	adds	r3, r3, r4
    1b70:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b72:	2300      	movs	r3, #0
    1b74:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b76:	9b00      	ldr	r3, [sp, #0]
    1b78:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b7a:	18e3      	adds	r3, r4, r3
    1b7c:	18d3      	adds	r3, r2, r3
    1b7e:	681a      	ldr	r2, [r3, #0]
    1b80:	685b      	ldr	r3, [r3, #4]
    1b82:	9218      	str	r2, [sp, #96]	; 0x60
    1b84:	9319      	str	r3, [sp, #100]	; 0x64
    1b86:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b88:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1b8c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1b8e:	681e      	ldr	r6, [r3, #0]
    1b90:	685f      	ldr	r7, [r3, #4]
    1b92:	0032      	movs	r2, r6
    1b94:	003b      	movs	r3, r7
    1b96:	47a8      	blx	r5
    1b98:	0032      	movs	r2, r6
    1b9a:	003b      	movs	r3, r7
    1b9c:	4d1c      	ldr	r5, [pc, #112]	; (1c10 <computeKalmanGains+0x894>)
    1b9e:	47a8      	blx	r5
    1ba0:	4b1c      	ldr	r3, [pc, #112]	; (1c14 <computeKalmanGains+0x898>)
    1ba2:	4a1d      	ldr	r2, [pc, #116]	; (1c18 <computeKalmanGains+0x89c>)
    1ba4:	4e1d      	ldr	r6, [pc, #116]	; (1c1c <computeKalmanGains+0x8a0>)
    1ba6:	47b0      	blx	r6
                    notdone++;
    1ba8:	1e43      	subs	r3, r0, #1
    1baa:	4198      	sbcs	r0, r3
    1bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1bae:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1bb0:	181b      	adds	r3, r3, r0
    1bb2:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1bb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bb8:	c10c      	stmia	r1!, {r2, r3}
    1bba:	9b00      	ldr	r3, [sp, #0]
    1bbc:	9116      	str	r1, [sp, #88]	; 0x58
    1bbe:	3308      	adds	r3, #8
    1bc0:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1bc2:	2b10      	cmp	r3, #16
    1bc4:	d1d7      	bne.n	1b76 <computeKalmanGains+0x7fa>
    1bc6:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1bc8:	2c30      	cmp	r4, #48	; 0x30
    1bca:	d1cf      	bne.n	1b6c <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1bcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d001      	beq.n	1bd6 <computeKalmanGains+0x85a>
    1bd2:	f7ff fc38 	bl	1446 <computeKalmanGains+0xca>
    1bd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bd8:	2b63      	cmp	r3, #99	; 0x63
    1bda:	dc01      	bgt.n	1be0 <computeKalmanGains+0x864>
    1bdc:	f7ff fc33 	bl	1446 <computeKalmanGains+0xca>
    1be0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1be2:	aa42      	add	r2, sp, #264	; 0x108
    1be4:	0019      	movs	r1, r3
    1be6:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1be8:	0010      	movs	r0, r2
    1bea:	3808      	subs	r0, #8
    1bec:	6804      	ldr	r4, [r0, #0]
    1bee:	6845      	ldr	r5, [r0, #4]
    1bf0:	601c      	str	r4, [r3, #0]
    1bf2:	605d      	str	r5, [r3, #4]
    1bf4:	6814      	ldr	r4, [r2, #0]
    1bf6:	6855      	ldr	r5, [r2, #4]
    1bf8:	609c      	str	r4, [r3, #8]
    1bfa:	60dd      	str	r5, [r3, #12]
    1bfc:	3310      	adds	r3, #16
    1bfe:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1c00:	4299      	cmp	r1, r3
    1c02:	d1f1      	bne.n	1be8 <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1c04:	b059      	add	sp, #356	; 0x164
    1c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c08:	000056e5 	.word	0x000056e5
    1c0c:	3ff00000 	.word	0x3ff00000
    1c10:	000049a9 	.word	0x000049a9
    1c14:	3ee4f8b5 	.word	0x3ee4f8b5
    1c18:	88e368f1 	.word	0x88e368f1
    1c1c:	00003a89 	.word	0x00003a89

00001c20 <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c20:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c22:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c24:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c26:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c28:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c2a:	6818      	ldr	r0, [r3, #0]
    1c2c:	4b8c      	ldr	r3, [pc, #560]	; (1e60 <computeKalmanStates+0x240>)
    1c2e:	4798      	blx	r3
    1c30:	003b      	movs	r3, r7
    1c32:	33b8      	adds	r3, #184	; 0xb8
    1c34:	681a      	ldr	r2, [r3, #0]
    1c36:	685b      	ldr	r3, [r3, #4]
    1c38:	4c8a      	ldr	r4, [pc, #552]	; (1e64 <computeKalmanStates+0x244>)
    1c3a:	47a0      	blx	r4
    1c3c:	4a8a      	ldr	r2, [pc, #552]	; (1e68 <computeKalmanStates+0x248>)
    1c3e:	4b8b      	ldr	r3, [pc, #556]	; (1e6c <computeKalmanStates+0x24c>)
    1c40:	4d8b      	ldr	r5, [pc, #556]	; (1e70 <computeKalmanStates+0x250>)
    1c42:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c44:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    1c46:	6b7e      	ldr	r6, [r7, #52]	; 0x34
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c48:	9000      	str	r0, [sp, #0]
    1c4a:	9101      	str	r1, [sp, #4]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    1c4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1c50:	4c88      	ldr	r4, [pc, #544]	; (1e74 <computeKalmanStates+0x254>)
    1c52:	2200      	movs	r2, #0
    1c54:	2300      	movs	r3, #0
    1c56:	47a0      	blx	r4
    1c58:	4c82      	ldr	r4, [pc, #520]	; (1e64 <computeKalmanStates+0x244>)
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d001      	beq.n	1c62 <computeKalmanStates+0x42>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1c5e:	67bd      	str	r5, [r7, #120]	; 0x78
    1c60:	67fe      	str	r6, [r7, #124]	; 0x7c
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c62:	003b      	movs	r3, r7
    1c64:	3390      	adds	r3, #144	; 0x90
    1c66:	930a      	str	r3, [sp, #40]	; 0x28
    1c68:	0028      	movs	r0, r5
    1c6a:	681a      	ldr	r2, [r3, #0]
    1c6c:	685b      	ldr	r3, [r3, #4]
    1c6e:	0031      	movs	r1, r6
    1c70:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c72:	003b      	movs	r3, r7
    1c74:	33a0      	adds	r3, #160	; 0xa0
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c76:	9006      	str	r0, [sp, #24]
    1c78:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c7a:	9800      	ldr	r0, [sp, #0]
    1c7c:	9901      	ldr	r1, [sp, #4]
    1c7e:	930d      	str	r3, [sp, #52]	; 0x34
    1c80:	681a      	ldr	r2, [r3, #0]
    1c82:	685b      	ldr	r3, [r3, #4]
    1c84:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1c88:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1c8a:	9300      	str	r3, [sp, #0]
    1c8c:	9401      	str	r4, [sp, #4]
    1c8e:	003b      	movs	r3, r7
    1c90:	3380      	adds	r3, #128	; 0x80
    1c92:	930e      	str	r3, [sp, #56]	; 0x38
    1c94:	685c      	ldr	r4, [r3, #4]
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	9302      	str	r3, [sp, #8]
    1c9a:	9403      	str	r4, [sp, #12]
    1c9c:	003b      	movs	r3, r7
    1c9e:	3388      	adds	r3, #136	; 0x88
    1ca0:	930f      	str	r3, [sp, #60]	; 0x3c
    1ca2:	685c      	ldr	r4, [r3, #4]
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	9304      	str	r3, [sp, #16]
    1ca8:	9405      	str	r4, [sp, #20]
    1caa:	4b73      	ldr	r3, [pc, #460]	; (1e78 <computeKalmanStates+0x258>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1cac:	9008      	str	r0, [sp, #32]
    1cae:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	685b      	ldr	r3, [r3, #4]
    1cb4:	9800      	ldr	r0, [sp, #0]
    1cb6:	9901      	ldr	r1, [sp, #4]
    1cb8:	4c6d      	ldr	r4, [pc, #436]	; (1e70 <computeKalmanStates+0x250>)
    1cba:	47a0      	blx	r4
    1cbc:	4b6e      	ldr	r3, [pc, #440]	; (1e78 <computeKalmanStates+0x258>)
    1cbe:	4e6c      	ldr	r6, [pc, #432]	; (1e70 <computeKalmanStates+0x250>)
    1cc0:	689a      	ldr	r2, [r3, #8]
    1cc2:	68db      	ldr	r3, [r3, #12]
    1cc4:	0004      	movs	r4, r0
    1cc6:	000d      	movs	r5, r1
    1cc8:	9802      	ldr	r0, [sp, #8]
    1cca:	9903      	ldr	r1, [sp, #12]
    1ccc:	47b0      	blx	r6
    1cce:	0002      	movs	r2, r0
    1cd0:	000b      	movs	r3, r1
    1cd2:	0020      	movs	r0, r4
    1cd4:	0029      	movs	r1, r5
    1cd6:	4c69      	ldr	r4, [pc, #420]	; (1e7c <computeKalmanStates+0x25c>)
    1cd8:	47a0      	blx	r4
    1cda:	4b67      	ldr	r3, [pc, #412]	; (1e78 <computeKalmanStates+0x258>)
    1cdc:	0004      	movs	r4, r0
    1cde:	691a      	ldr	r2, [r3, #16]
    1ce0:	695b      	ldr	r3, [r3, #20]
    1ce2:	000d      	movs	r5, r1
    1ce4:	9804      	ldr	r0, [sp, #16]
    1ce6:	9905      	ldr	r1, [sp, #20]
    1ce8:	47b0      	blx	r6
    1cea:	0002      	movs	r2, r0
    1cec:	000b      	movs	r3, r1
    1cee:	0020      	movs	r0, r4
    1cf0:	0029      	movs	r1, r5
    1cf2:	4c62      	ldr	r4, [pc, #392]	; (1e7c <computeKalmanStates+0x25c>)
    1cf4:	47a0      	blx	r4
    1cf6:	0003      	movs	r3, r0
    1cf8:	000c      	movs	r4, r1
    1cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1cfc:	9010      	str	r0, [sp, #64]	; 0x40
    1cfe:	9111      	str	r1, [sp, #68]	; 0x44
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1d00:	9800      	ldr	r0, [sp, #0]
    1d02:	9901      	ldr	r1, [sp, #4]
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1d04:	6013      	str	r3, [r2, #0]
    1d06:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1d08:	4b5b      	ldr	r3, [pc, #364]	; (1e78 <computeKalmanStates+0x258>)
    1d0a:	699a      	ldr	r2, [r3, #24]
    1d0c:	69db      	ldr	r3, [r3, #28]
    1d0e:	47b0      	blx	r6
    1d10:	4b59      	ldr	r3, [pc, #356]	; (1e78 <computeKalmanStates+0x258>)
    1d12:	0004      	movs	r4, r0
    1d14:	6a1a      	ldr	r2, [r3, #32]
    1d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d18:	000d      	movs	r5, r1
    1d1a:	9802      	ldr	r0, [sp, #8]
    1d1c:	9903      	ldr	r1, [sp, #12]
    1d1e:	47b0      	blx	r6
    1d20:	0002      	movs	r2, r0
    1d22:	000b      	movs	r3, r1
    1d24:	0020      	movs	r0, r4
    1d26:	0029      	movs	r1, r5
    1d28:	4c54      	ldr	r4, [pc, #336]	; (1e7c <computeKalmanStates+0x25c>)
    1d2a:	47a0      	blx	r4
    1d2c:	4b52      	ldr	r3, [pc, #328]	; (1e78 <computeKalmanStates+0x258>)
    1d2e:	0004      	movs	r4, r0
    1d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d34:	000d      	movs	r5, r1
    1d36:	9804      	ldr	r0, [sp, #16]
    1d38:	9905      	ldr	r1, [sp, #20]
    1d3a:	47b0      	blx	r6
    1d3c:	0002      	movs	r2, r0
    1d3e:	000b      	movs	r3, r1
    1d40:	0020      	movs	r0, r4
    1d42:	0029      	movs	r1, r5
    1d44:	4c4d      	ldr	r4, [pc, #308]	; (1e7c <computeKalmanStates+0x25c>)
    1d46:	47a0      	blx	r4
    1d48:	003b      	movs	r3, r7
    1d4a:	900a      	str	r0, [sp, #40]	; 0x28
    1d4c:	910b      	str	r1, [sp, #44]	; 0x2c
    1d4e:	000a      	movs	r2, r1
    1d50:	0001      	movs	r1, r0
    1d52:	3398      	adds	r3, #152	; 0x98
    1d54:	6019      	str	r1, [r3, #0]
    1d56:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d58:	9800      	ldr	r0, [sp, #0]
    1d5a:	9901      	ldr	r1, [sp, #4]
    1d5c:	4b46      	ldr	r3, [pc, #280]	; (1e78 <computeKalmanStates+0x258>)
    1d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d62:	47b0      	blx	r6
    1d64:	4b44      	ldr	r3, [pc, #272]	; (1e78 <computeKalmanStates+0x258>)
    1d66:	0004      	movs	r4, r0
    1d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d6c:	000d      	movs	r5, r1
    1d6e:	9802      	ldr	r0, [sp, #8]
    1d70:	9903      	ldr	r1, [sp, #12]
    1d72:	47b0      	blx	r6
    1d74:	0002      	movs	r2, r0
    1d76:	000b      	movs	r3, r1
    1d78:	0020      	movs	r0, r4
    1d7a:	0029      	movs	r1, r5
    1d7c:	4c3f      	ldr	r4, [pc, #252]	; (1e7c <computeKalmanStates+0x25c>)
    1d7e:	47a0      	blx	r4
    1d80:	4b3d      	ldr	r3, [pc, #244]	; (1e78 <computeKalmanStates+0x258>)
    1d82:	0004      	movs	r4, r0
    1d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d88:	000d      	movs	r5, r1
    1d8a:	9804      	ldr	r0, [sp, #16]
    1d8c:	9905      	ldr	r1, [sp, #20]
    1d8e:	47b0      	blx	r6
    1d90:	0002      	movs	r2, r0
    1d92:	000b      	movs	r3, r1
    1d94:	0020      	movs	r0, r4
    1d96:	0029      	movs	r1, r5
    1d98:	4c38      	ldr	r4, [pc, #224]	; (1e7c <computeKalmanStates+0x25c>)
    1d9a:	47a0      	blx	r4
    1d9c:	0003      	movs	r3, r0
    1d9e:	000c      	movs	r4, r1
    1da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1da2:	9000      	str	r0, [sp, #0]
    1da4:	9101      	str	r1, [sp, #4]
    1da6:	6013      	str	r3, [r2, #0]
    1da8:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1dae:	9806      	ldr	r0, [sp, #24]
    1db0:	9907      	ldr	r1, [sp, #28]
    1db2:	47b0      	blx	r6
    1db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1db8:	4c30      	ldr	r4, [pc, #192]	; (1e7c <computeKalmanStates+0x25c>)
    1dba:	47a0      	blx	r4
    1dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dc0:	0004      	movs	r4, r0
    1dc2:	000d      	movs	r5, r1
    1dc4:	9808      	ldr	r0, [sp, #32]
    1dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dc8:	47b0      	blx	r6
    1dca:	0002      	movs	r2, r0
    1dcc:	000b      	movs	r3, r1
    1dce:	0020      	movs	r0, r4
    1dd0:	0029      	movs	r1, r5
    1dd2:	4c2a      	ldr	r4, [pc, #168]	; (1e7c <computeKalmanStates+0x25c>)
    1dd4:	47a0      	blx	r4
    1dd6:	0003      	movs	r3, r0
    1dd8:	000c      	movs	r4, r1
    1dda:	9002      	str	r0, [sp, #8]
    1ddc:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1dde:	9806      	ldr	r0, [sp, #24]
    1de0:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1de2:	67bb      	str	r3, [r7, #120]	; 0x78
    1de4:	67fc      	str	r4, [r7, #124]	; 0x7c
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1de6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1dea:	47b0      	blx	r6
    1dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1df0:	4c22      	ldr	r4, [pc, #136]	; (1e7c <computeKalmanStates+0x25c>)
    1df2:	47a0      	blx	r4
    1df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1df8:	0004      	movs	r4, r0
    1dfa:	000d      	movs	r5, r1
    1dfc:	9808      	ldr	r0, [sp, #32]
    1dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e00:	47b0      	blx	r6
    1e02:	0002      	movs	r2, r0
    1e04:	000b      	movs	r3, r1
    1e06:	0020      	movs	r0, r4
    1e08:	0029      	movs	r1, r5
    1e0a:	4c1c      	ldr	r4, [pc, #112]	; (1e7c <computeKalmanStates+0x25c>)
    1e0c:	47a0      	blx	r4
    1e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e10:	6018      	str	r0, [r3, #0]
    1e12:	6059      	str	r1, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1e18:	9806      	ldr	r0, [sp, #24]
    1e1a:	9907      	ldr	r1, [sp, #28]
    1e1c:	47b0      	blx	r6
    1e1e:	9a00      	ldr	r2, [sp, #0]
    1e20:	9b01      	ldr	r3, [sp, #4]
    1e22:	4c16      	ldr	r4, [pc, #88]	; (1e7c <computeKalmanStates+0x25c>)
    1e24:	47a0      	blx	r4
    1e26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e2a:	0004      	movs	r4, r0
    1e2c:	000d      	movs	r5, r1
    1e2e:	9808      	ldr	r0, [sp, #32]
    1e30:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e32:	47b0      	blx	r6
    1e34:	0002      	movs	r2, r0
    1e36:	000b      	movs	r3, r1
    1e38:	0020      	movs	r0, r4
    1e3a:	0029      	movs	r1, r5
    1e3c:	4c0f      	ldr	r4, [pc, #60]	; (1e7c <computeKalmanStates+0x25c>)
    1e3e:	47a0      	blx	r4
    1e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->myKalmanFilter.kalmanAccel = my_altimeter->myKalmanFilter.est[2];
    1e42:	003c      	movs	r4, r7
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e44:	6018      	str	r0, [r3, #0]
    1e46:	6059      	str	r1, [r3, #4]

    my_altimeter->myKalmanFilter.kalmanAccel = my_altimeter->myKalmanFilter.est[2];
    1e48:	4b0d      	ldr	r3, [pc, #52]	; (1e80 <computeKalmanStates+0x260>)
    1e4a:	4798      	blx	r3
    1e4c:	34a8      	adds	r4, #168	; 0xa8
    1e4e:	6020      	str	r0, [r4, #0]
    my_altimeter->myKalmanFilter.kalmanAltitude = my_altimeter->myKalmanFilter.est[0];
    1e50:	4b0c      	ldr	r3, [pc, #48]	; (1e84 <computeKalmanStates+0x264>)
    1e52:	9802      	ldr	r0, [sp, #8]
    1e54:	9903      	ldr	r1, [sp, #12]
    1e56:	4798      	blx	r3
    1e58:	6060      	str	r0, [r4, #4]


}
    1e5a:	b013      	add	sp, #76	; 0x4c
    1e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00005f2d 	.word	0x00005f2d
    1e64:	000056e5 	.word	0x000056e5
    1e68:	33daf8df 	.word	0x33daf8df
    1e6c:	4040164b 	.word	0x4040164b
    1e70:	000051f1 	.word	0x000051f1
    1e74:	00003a55 	.word	0x00003a55
    1e78:	20000010 	.word	0x20000010
    1e7c:	00004351 	.word	0x00004351
    1e80:	00005fd5 	.word	0x00005fd5
    1e84:	00003bad 	.word	0x00003bad

00001e88 <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1e8a:	2684      	movs	r6, #132	; 0x84
    1e8c:	00b6      	lsls	r6, r6, #2
    1e8e:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e90:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1e92:	194b      	adds	r3, r1, r5
    1e94:	2bfe      	cmp	r3, #254	; 0xfe
    1e96:	dc03      	bgt.n	1ea0 <makePage+0x18>
    1e98:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e9a:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1e9c:	1947      	adds	r7, r0, r5
    1e9e:	e034      	b.n	1f0a <makePage+0x82>
    1ea0:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1ea2:	195c      	adds	r4, r3, r5
    1ea4:	b2de      	uxtb	r6, r3
    1ea6:	2cfe      	cmp	r4, #254	; 0xfe
    1ea8:	dc08      	bgt.n	1ebc <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1eaa:	9a00      	ldr	r2, [sp, #0]
    1eac:	4f1f      	ldr	r7, [pc, #124]	; (1f2c <makePage+0xa4>)
    1eae:	5cd6      	ldrb	r6, [r2, r3]
    1eb0:	1904      	adds	r4, r0, r4
    1eb2:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eb4:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1eb6:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eb8:	b29b      	uxth	r3, r3
    1eba:	e7f2      	b.n	1ea2 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1ebc:	2384      	movs	r3, #132	; 0x84
    1ebe:	2500      	movs	r5, #0
    1ec0:	009b      	lsls	r3, r3, #2
    1ec2:	54c5      	strb	r5, [r0, r3]
    1ec4:	4b19      	ldr	r3, [pc, #100]	; (1f2c <makePage+0xa4>)
    1ec6:	18c4      	adds	r4, r0, r3
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <makePage+0xa8>)
    1eca:	18c3      	adds	r3, r0, r3
    1ecc:	9301      	str	r3, [sp, #4]
    1ece:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1ed0:	781f      	ldrb	r7, [r3, #0]
    1ed2:	46bc      	mov	ip, r7
    1ed4:	4662      	mov	r2, ip
    1ed6:	1e9f      	subs	r7, r3, #2
    1ed8:	3fff      	subs	r7, #255	; 0xff
    1eda:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1edc:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1ede:	701d      	strb	r5, [r3, #0]
    1ee0:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ee2:	4293      	cmp	r3, r2
    1ee4:	d1f4      	bne.n	1ed0 <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1ee6:	2584      	movs	r5, #132	; 0x84
    1ee8:	0033      	movs	r3, r6
    1eea:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1eec:	428b      	cmp	r3, r1
    1eee:	d208      	bcs.n	1f02 <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ef0:	9a00      	ldr	r2, [sp, #0]
    1ef2:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1ef4:	3301      	adds	r3, #1
    1ef6:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ef8:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1efa:	1b9f      	subs	r7, r3, r6
    1efc:	5547      	strb	r7, [r0, r5]
    1efe:	3401      	adds	r4, #1
    1f00:	e7f4      	b.n	1eec <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1f02:	2201      	movs	r2, #1
    1f04:	4b0a      	ldr	r3, [pc, #40]	; (1f30 <makePage+0xa8>)
    1f06:	54c2      	strb	r2, [r0, r3]
    1f08:	e00f      	b.n	1f2a <makePage+0xa2>
    1f0a:	1c5c      	adds	r4, r3, #1
    1f0c:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f0e:	428b      	cmp	r3, r1
    1f10:	d80b      	bhi.n	1f2a <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1f12:	9a00      	ldr	r2, [sp, #0]
    1f14:	5cd2      	ldrb	r2, [r2, r3]
    1f16:	18fb      	adds	r3, r7, r3
    1f18:	4694      	mov	ip, r2
    1f1a:	4a04      	ldr	r2, [pc, #16]	; (1f2c <makePage+0xa4>)
    1f1c:	189b      	adds	r3, r3, r2
    1f1e:	4662      	mov	r2, ip
    1f20:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1f22:	192b      	adds	r3, r5, r4
    1f24:	5583      	strb	r3, [r0, r6]
    1f26:	0023      	movs	r3, r4
    1f28:	e7ef      	b.n	1f0a <makePage+0x82>
        }

    }
}
    1f2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f2c:	00000211 	.word	0x00000211
    1f30:	00000311 	.word	0x00000311

00001f34 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f36:	2346      	movs	r3, #70	; 0x46
    1f38:	466a      	mov	r2, sp
    1f3a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1f3c:	7843      	ldrb	r3, [r0, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f3e:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1f40:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1f42:	0003      	movs	r3, r0
    1f44:	33b0      	adds	r3, #176	; 0xb0
    1f46:	681b      	ldr	r3, [r3, #0]
    1f48:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f4a:	0a1a      	lsrs	r2, r3, #8
    1f4c:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f4e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1f50:	0e1b      	lsrs	r3, r3, #24
    1f52:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f54:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f56:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f58:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f5a:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f5c:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f5e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1f60:	0e1b      	lsrs	r3, r3, #24
    1f62:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f64:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f66:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f68:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f6a:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f6c:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f6e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f70:	0e1b      	lsrs	r3, r3, #24
    1f72:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f74:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f76:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f78:	33e4      	adds	r3, #228	; 0xe4
    1f7a:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f7c:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f7e:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    1f80:	0a1b      	lsrs	r3, r3, #8
    1f82:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1f84:	2110      	movs	r1, #16
    1f86:	4b02      	ldr	r3, [pc, #8]	; (1f90 <logFlight+0x5c>)
    1f88:	4798      	blx	r3
}
    1f8a:	b005      	add	sp, #20
    1f8c:	bd00      	pop	{pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	00001e89 	.word	0x00001e89

00001f94 <logSensors>:
void logSensors(Altimeter *my_altimeter) {

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f94:	2341      	movs	r3, #65	; 0x41
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
}

void logSensors(Altimeter *my_altimeter) {
    1f96:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f98:	b089      	sub	sp, #36	; 0x24

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f9a:	ac02      	add	r4, sp, #8
    1f9c:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1f9e:	23c9      	movs	r3, #201	; 0xc9
    1fa0:	009b      	lsls	r3, r3, #2
    1fa2:	58c3      	ldr	r3, [r0, r3]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
}

void logSensors(Altimeter *my_altimeter) {
    1fa4:	0005      	movs	r5, r0
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1fa6:	0a1a      	lsrs	r2, r3, #8

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1fa8:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1faa:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fac:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1fae:	0e1b      	lsrs	r3, r3, #24
    1fb0:	7123      	strb	r3, [r4, #4]
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1fb2:	0003      	movs	r3, r0
    1fb4:	33ac      	adds	r3, #172	; 0xac
    1fb6:	681b      	ldr	r3, [r3, #0]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fb8:	70e2      	strb	r2, [r4, #3]
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1fba:	0a1a      	lsrs	r2, r3, #8
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1fbc:	7163      	strb	r3, [r4, #5]
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1fbe:	71a2      	strb	r2, [r4, #6]
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1fc0:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;
    1fc2:	0e1b      	lsrs	r3, r3, #24
    1fc4:	7223      	strb	r3, [r4, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fc6:	0003      	movs	r3, r0
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1fc8:	71e2      	strb	r2, [r4, #7]
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fca:	33e4      	adds	r3, #228	; 0xe4
    1fcc:	881b      	ldrh	r3, [r3, #0]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    1fce:	ae01      	add	r6, sp, #4
    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fd0:	7263      	strb	r3, [r4, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1fd2:	0a1b      	lsrs	r3, r3, #8
    1fd4:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1fd6:	0003      	movs	r3, r0
    1fd8:	33e8      	adds	r3, #232	; 0xe8
    1fda:	881b      	ldrh	r3, [r3, #0]
    1fdc:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1fde:	0a1b      	lsrs	r3, r3, #8
    1fe0:	7323      	strb	r3, [r4, #12]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    1fe2:	0003      	movs	r3, r0
    1fe4:	33a8      	adds	r3, #168	; 0xa8
    1fe6:	681f      	ldr	r7, [r3, #0]
    1fe8:	4b1c      	ldr	r3, [pc, #112]	; (205c <STACK_SIZE+0x5c>)
    1fea:	1c38      	adds	r0, r7, #0
    1fec:	4798      	blx	r3
    1fee:	b280      	uxth	r0, r0
    1ff0:	8030      	strh	r0, [r6, #0]
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    1ff2:	8830      	ldrh	r0, [r6, #0]
    fractpart = fractional * 1000;
    1ff4:	4b1a      	ldr	r3, [pc, #104]	; (2060 <STACK_SIZE+0x60>)
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    1ff6:	b280      	uxth	r0, r0
    fractpart = fractional * 1000;
    1ff8:	4798      	blx	r3
    1ffa:	4b1a      	ldr	r3, [pc, #104]	; (2064 <STACK_SIZE+0x64>)
    1ffc:	1c01      	adds	r1, r0, #0
    1ffe:	1c38      	adds	r0, r7, #0
    2000:	4798      	blx	r3
    2002:	4919      	ldr	r1, [pc, #100]	; (2068 <STACK_SIZE+0x68>)
    2004:	4b19      	ldr	r3, [pc, #100]	; (206c <STACK_SIZE+0x6c>)
    2006:	4798      	blx	r3
    2008:	4b19      	ldr	r3, [pc, #100]	; (2070 <STACK_SIZE+0x70>)
    200a:	4798      	blx	r3
    200c:	466b      	mov	r3, sp
    200e:	b280      	uxth	r0, r0
    2010:	80d8      	strh	r0, [r3, #6]

    dataToSend[13] = fractpart >> 0;
    2012:	88da      	ldrh	r2, [r3, #6]
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    fractpart = fractional * 1000;
    2014:	3306      	adds	r3, #6

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;
    2016:	881b      	ldrh	r3, [r3, #0]

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    fractpart = fractional * 1000;

    dataToSend[13] = fractpart >> 0;
    2018:	7362      	strb	r2, [r4, #13]
    dataToSend[14] = fractpart >> 8;
    201a:	0a1b      	lsrs	r3, r3, #8
    201c:	73a3      	strb	r3, [r4, #14]

    dataToSend[15] = intpart >> 0;
    201e:	8833      	ldrh	r3, [r6, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2020:	0022      	movs	r2, r4
    fractpart = fractional * 1000;

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    2022:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = intpart >> 8;
    2024:	8833      	ldrh	r3, [r6, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2026:	2117      	movs	r1, #23

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    dataToSend[16] = intpart >> 8;
    2028:	0a1b      	lsrs	r3, r3, #8
    202a:	7423      	strb	r3, [r4, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    202c:	002b      	movs	r3, r5
    202e:	33f4      	adds	r3, #244	; 0xf4
    2030:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2032:	0028      	movs	r0, r5
    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    dataToSend[16] = intpart >> 8;
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    2034:	7463      	strb	r3, [r4, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    2036:	0a1b      	lsrs	r3, r3, #8
    2038:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    203a:	002b      	movs	r3, r5
    203c:	33f8      	adds	r3, #248	; 0xf8
    203e:	881b      	ldrh	r3, [r3, #0]
    2040:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    2042:	0a1b      	lsrs	r3, r3, #8
    2044:	7523      	strb	r3, [r4, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    2046:	002b      	movs	r3, r5
    2048:	33fe      	adds	r3, #254	; 0xfe
    204a:	885b      	ldrh	r3, [r3, #2]
    204c:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    204e:	0a1b      	lsrs	r3, r3, #8
    2050:	75a3      	strb	r3, [r4, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    2052:	4b08      	ldr	r3, [pc, #32]	; (2074 <STACK_SIZE+0x74>)
    2054:	4798      	blx	r3
}
    2056:	b009      	add	sp, #36	; 0x24
    2058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	0000427d 	.word	0x0000427d
    2060:	000042c1 	.word	0x000042c1
    2064:	00003f71 	.word	0x00003f71
    2068:	447a0000 	.word	0x447a0000
    206c:	00003d49 	.word	0x00003d49
    2070:	00003b7d 	.word	0x00003b7d
    2074:	00001e89 	.word	0x00001e89

00002078 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    2078:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    207a:	2103      	movs	r1, #3
    207c:	4348      	muls	r0, r1
    207e:	ac01      	add	r4, sp, #4
    2080:	3001      	adds	r0, #1
    2082:	30ff      	adds	r0, #255	; 0xff
    2084:	0022      	movs	r2, r4
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <getFlightStartAddress+0x24>)
    2088:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    208a:	7860      	ldrb	r0, [r4, #1]
    208c:	78a3      	ldrb	r3, [r4, #2]
    208e:	0200      	lsls	r0, r0, #8
    2090:	041b      	lsls	r3, r3, #16
    2092:	4318      	orrs	r0, r3
    2094:	7823      	ldrb	r3, [r4, #0]
    2096:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2098:	bd16      	pop	{r1, r2, r4, pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	00000361 	.word	0x00000361

000020a0 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    20a0:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    20a2:	4b04      	ldr	r3, [pc, #16]	; (20b4 <isFlightLogged+0x14>)
    20a4:	4798      	blx	r3
    20a6:	4b04      	ldr	r3, [pc, #16]	; (20b8 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    20a8:	18c0      	adds	r0, r0, r3
    20aa:	1e43      	subs	r3, r0, #1
    20ac:	4198      	sbcs	r0, r3
    20ae:	b2c0      	uxtb	r0, r0
    20b0:	bd10      	pop	{r4, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	00002079 	.word	0x00002079
    20b8:	ff000001 	.word	0xff000001

000020bc <findNextBlankPage>:


u32_t findNextBlankPage(u8_t lastFlightStart) {
    20bc:	b510      	push	{r4, lr}

    u32_t byteToCheckAddress = getFlightStartAddress(lastFlightStart);
    20be:	4b09      	ldr	r3, [pc, #36]	; (20e4 <findNextBlankPage+0x28>)
    20c0:	4798      	blx	r3
    20c2:	0004      	movs	r4, r0

    bool flightEndFound = false;
    while (!flightEndFound) {

        u8_t byteToCheck = AT25SFGetByte(byteToCheckAddress);
    20c4:	0020      	movs	r0, r4
    20c6:	4b08      	ldr	r3, [pc, #32]	; (20e8 <findNextBlankPage+0x2c>)
    20c8:	4798      	blx	r3

        if (byteToCheck == 0x41) {
    20ca:	2841      	cmp	r0, #65	; 0x41
    20cc:	d101      	bne.n	20d2 <findNextBlankPage+0x16>
            byteToCheckAddress += 24;
    20ce:	3418      	adds	r4, #24
    20d0:	e7f8      	b.n	20c4 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0x46) {
    20d2:	2846      	cmp	r0, #70	; 0x46
    20d4:	d101      	bne.n	20da <findNextBlankPage+0x1e>
            byteToCheckAddress += 17;
    20d6:	3411      	adds	r4, #17
    20d8:	e7f4      	b.n	20c4 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0xFF) {
    20da:	28ff      	cmp	r0, #255	; 0xff
    20dc:	d1f2      	bne.n	20c4 <findNextBlankPage+0x8>
            return ((byteToCheckAddress >> 8) << 8);
    20de:	4384      	bics	r4, r0
    20e0:	0020      	movs	r0, r4
        }
    }
}
    20e2:	bd10      	pop	{r4, pc}
    20e4:	00002079 	.word	0x00002079
    20e8:	00000225 	.word	0x00000225

000020ec <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    20ec:	b570      	push	{r4, r5, r6, lr}

    u8_t nextFlight = findThisFlightsEnd + 1;
    20ee:	1c44      	adds	r4, r0, #1
    20f0:	b2e4      	uxtb	r4, r4
            return ((byteToCheckAddress >> 8) << 8);
        }
    }
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    20f2:	0005      	movs	r5, r0

    u8_t nextFlight = findThisFlightsEnd + 1;
    u32_t thisFlightsEndingAddress;

    if (isFlightLogged(nextFlight)) {
    20f4:	4b06      	ldr	r3, [pc, #24]	; (2110 <FindFlightEndingAddress+0x24>)
    20f6:	0020      	movs	r0, r4
    20f8:	4798      	blx	r3
    20fa:	2800      	cmp	r0, #0
    20fc:	d002      	beq.n	2104 <FindFlightEndingAddress+0x18>
        thisFlightsEndingAddress = getFlightStartAddress(nextFlight) - 0x100;
    20fe:	0020      	movs	r0, r4
    2100:	4b04      	ldr	r3, [pc, #16]	; (2114 <FindFlightEndingAddress+0x28>)
    2102:	e001      	b.n	2108 <FindFlightEndingAddress+0x1c>
    } else {
        thisFlightsEndingAddress = findNextBlankPage(findThisFlightsEnd) - 0x100;
    2104:	0028      	movs	r0, r5
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <FindFlightEndingAddress+0x2c>)
    2108:	4798      	blx	r3
    210a:	3801      	subs	r0, #1
    210c:	38ff      	subs	r0, #255	; 0xff
    }
    return thisFlightsEndingAddress;
}
    210e:	bd70      	pop	{r4, r5, r6, pc}
    2110:	000020a1 	.word	0x000020a1
    2114:	00002079 	.word	0x00002079
    2118:	000020bd 	.word	0x000020bd

0000211c <findNewFlightStart>:


void findNewFlightStart(Altimeter *my_altimeter) {
    211c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    211e:	0006      	movs	r6, r0

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    2120:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2122:	0020      	movs	r0, r4
    2124:	4b21      	ldr	r3, [pc, #132]	; (21ac <findNewFlightStart+0x90>)
    2126:	4798      	blx	r3
    2128:	2800      	cmp	r0, #0
    212a:	d139      	bne.n	21a0 <findNewFlightStart+0x84>
    212c:	0037      	movs	r7, r6
    212e:	ad01      	add	r5, sp, #4
    2130:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    2132:	2c00      	cmp	r4, #0
    2134:	d014      	beq.n	2160 <findNewFlightStart+0x44>
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    2136:	1e60      	subs	r0, r4, #1
    2138:	4b1d      	ldr	r3, [pc, #116]	; (21b0 <findNewFlightStart+0x94>)
    213a:	b2c0      	uxtb	r0, r0
    213c:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    213e:	2103      	movs	r1, #3
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    2140:	3001      	adds	r0, #1
    2142:	30ff      	adds	r0, #255	; 0xff
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    2144:	0c03      	lsrs	r3, r0, #16

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;
    2146:	60f8      	str	r0, [r7, #12]

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    2148:	702b      	strb	r3, [r5, #0]
    214a:	70a8      	strb	r0, [r5, #2]
    214c:	0a03      	lsrs	r3, r0, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    214e:	0008      	movs	r0, r1
    2150:	4360      	muls	r0, r4
    2152:	3001      	adds	r0, #1

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    2154:	706b      	strb	r3, [r5, #1]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2156:	30ff      	adds	r0, #255	; 0xff
    2158:	002a      	movs	r2, r5
    215a:	4b16      	ldr	r3, [pc, #88]	; (21b4 <findNewFlightStart+0x98>)
    215c:	4798      	blx	r3
    215e:	e00f      	b.n	2180 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2160:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2162:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2164:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2166:	0040      	lsls	r0, r0, #1
    2168:	4b12      	ldr	r3, [pc, #72]	; (21b4 <findNewFlightStart+0x98>)
    216a:	002a      	movs	r2, r5
    216c:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    216e:	702c      	strb	r4, [r5, #0]
    2170:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2172:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    2174:	2380      	movs	r3, #128	; 0x80
    2176:	015b      	lsls	r3, r3, #5
    2178:	60fb      	str	r3, [r7, #12]
                beep(1500);
    217a:	480f      	ldr	r0, [pc, #60]	; (21b8 <findNewFlightStart+0x9c>)
    217c:	4b0f      	ldr	r3, [pc, #60]	; (21bc <findNewFlightStart+0xa0>)
    217e:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    2180:	7074      	strb	r4, [r6, #1]

            while (flightNumbToCheck > 0) {
                beep(500);
    2182:	20fa      	movs	r0, #250	; 0xfa
    2184:	4d0e      	ldr	r5, [pc, #56]	; (21c0 <findNewFlightStart+0xa4>)
    2186:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2188:	2c00      	cmp	r4, #0
    218a:	d007      	beq.n	219c <findNewFlightStart+0x80>
                beep(500);
    218c:	4b0b      	ldr	r3, [pc, #44]	; (21bc <findNewFlightStart+0xa0>)
    218e:	4798      	blx	r3
                delay_ms(500);
    2190:	20fa      	movs	r0, #250	; 0xfa
                --flightNumbToCheck;
    2192:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2194:	0040      	lsls	r0, r0, #1
    2196:	47a8      	blx	r5
                --flightNumbToCheck;
    2198:	b2e4      	uxtb	r4, r4
    219a:	e7f2      	b.n	2182 <findNewFlightStart+0x66>
            }
            delay_ms(500);
    219c:	47a8      	blx	r5
            break;
    219e:	e003      	b.n	21a8 <findNewFlightStart+0x8c>
}


void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    21a0:	3401      	adds	r4, #1
    21a2:	b2e4      	uxtb	r4, r4
    21a4:	2c0b      	cmp	r4, #11
    21a6:	d1bc      	bne.n	2122 <findNewFlightStart+0x6>
            }
            delay_ms(500);
            break;
        }
    }
}
    21a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	000020a1 	.word	0x000020a1
    21b0:	000020bd 	.word	0x000020bd
    21b4:	00000275 	.word	0x00000275
    21b8:	000005dc 	.word	0x000005dc
    21bc:	00000d6d 	.word	0x00000d6d
    21c0:	00000f85 	.word	0x00000f85

000021c4 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    21c4:	4b01      	ldr	r3, [pc, #4]	; (21cc <takeSample+0x8>)
    21c6:	7818      	ldrb	r0, [r3, #0]
}
    21c8:	4770      	bx	lr
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	200004d3 	.word	0x200004d3

000021d0 <pullSample>:

void pullSample() {
    SampleBool = true;
    21d0:	2201      	movs	r2, #1
    21d2:	4b01      	ldr	r3, [pc, #4]	; (21d8 <pullSample+0x8>)
    21d4:	701a      	strb	r2, [r3, #0]
}
    21d6:	4770      	bx	lr
    21d8:	200004d3 	.word	0x200004d3

000021dc <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21dc:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    21de:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21e0:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    21e2:	0004      	movs	r4, r0
    SampleBool = false;
    21e4:	4be3      	ldr	r3, [pc, #908]	; (2574 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    21e6:	b087      	sub	sp, #28
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21e8:	4ee3      	ldr	r6, [pc, #908]	; (2578 <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21ea:	701a      	strb	r2, [r3, #0]

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21ec:	47b0      	blx	r6
    21ee:	00ad      	lsls	r5, r5, #2
    21f0:	5963      	ldr	r3, [r4, r5]
    21f2:	1ac0      	subs	r0, r0, r3
    21f4:	23cb      	movs	r3, #203	; 0xcb
    21f6:	009b      	lsls	r3, r3, #2
    21f8:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    21fa:	47b0      	blx	r6
    21fc:	5160      	str	r0, [r4, r5]

    my_altimeter->batV = adc_read(senseBatPin);
    21fe:	4ddf      	ldr	r5, [pc, #892]	; (257c <sampleTick+0x3a0>)
    2200:	4edf      	ldr	r6, [pc, #892]	; (2580 <sampleTick+0x3a4>)
    2202:	786b      	ldrb	r3, [r5, #1]
    2204:	7829      	ldrb	r1, [r5, #0]
    2206:	78a8      	ldrb	r0, [r5, #2]
    2208:	021b      	lsls	r3, r3, #8
    220a:	430b      	orrs	r3, r1
    220c:	0400      	lsls	r0, r0, #16
    220e:	001a      	movs	r2, r3
    2210:	0003      	movs	r3, r0
    2212:	78e8      	ldrb	r0, [r5, #3]
    2214:	4313      	orrs	r3, r2
    2216:	0600      	lsls	r0, r0, #24
    2218:	7929      	ldrb	r1, [r5, #4]
    221a:	4318      	orrs	r0, r3
    221c:	47b0      	blx	r6
    221e:	23c5      	movs	r3, #197	; 0xc5
    2220:	009b      	lsls	r3, r3, #2
    2222:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;
    2224:	4bd7      	ldr	r3, [pc, #860]	; (2584 <sampleTick+0x3a8>)
    2226:	4798      	blx	r3
    2228:	4ad7      	ldr	r2, [pc, #860]	; (2588 <sampleTick+0x3ac>)
    222a:	4fd8      	ldr	r7, [pc, #864]	; (258c <sampleTick+0x3b0>)
    222c:	4bd8      	ldr	r3, [pc, #864]	; (2590 <sampleTick+0x3b4>)
    222e:	47b8      	blx	r7
    2230:	4bd8      	ldr	r3, [pc, #864]	; (2594 <sampleTick+0x3b8>)
    2232:	4798      	blx	r3
    2234:	23c6      	movs	r3, #198	; 0xc6
    2236:	009b      	lsls	r3, r3, #2
    2238:	50e0      	str	r0, [r4, r3]

    my_altimeter->senseA = adc_read(senseAPin);
    223a:	79ab      	ldrb	r3, [r5, #6]
    223c:	7969      	ldrb	r1, [r5, #5]
    223e:	79e8      	ldrb	r0, [r5, #7]
    2240:	021b      	lsls	r3, r3, #8
    2242:	430b      	orrs	r3, r1
    2244:	0400      	lsls	r0, r0, #16
    2246:	001a      	movs	r2, r3
    2248:	0003      	movs	r3, r0
    224a:	7a28      	ldrb	r0, [r5, #8]
    224c:	4313      	orrs	r3, r2
    224e:	0600      	lsls	r0, r0, #24
    2250:	7a69      	ldrb	r1, [r5, #9]
    2252:	4318      	orrs	r0, r3
    2254:	47b0      	blx	r6
    2256:	23c7      	movs	r3, #199	; 0xc7
    2258:	009b      	lsls	r3, r3, #2
    225a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    225c:	7aeb      	ldrb	r3, [r5, #11]
    225e:	7aa9      	ldrb	r1, [r5, #10]
    2260:	7b28      	ldrb	r0, [r5, #12]
    2262:	021b      	lsls	r3, r3, #8
    2264:	430b      	orrs	r3, r1
    2266:	0400      	lsls	r0, r0, #16
    2268:	001a      	movs	r2, r3
    226a:	0003      	movs	r3, r0
    226c:	7b68      	ldrb	r0, [r5, #13]
    226e:	4313      	orrs	r3, r2
    2270:	0600      	lsls	r0, r0, #24
    2272:	7ba9      	ldrb	r1, [r5, #14]
    2274:	4318      	orrs	r0, r3
    2276:	47b0      	blx	r6
    2278:	4bc7      	ldr	r3, [pc, #796]	; (2598 <sampleTick+0x3bc>)
    my_altimeter->senseC = adc_read(senseCPin);
    227a:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    227c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    227e:	7c2b      	ldrb	r3, [r5, #16]
    2280:	7c68      	ldrb	r0, [r5, #17]
    2282:	021b      	lsls	r3, r3, #8
    2284:	430b      	orrs	r3, r1
    2286:	0400      	lsls	r0, r0, #16
    2288:	001a      	movs	r2, r3
    228a:	0003      	movs	r3, r0
    228c:	7ca8      	ldrb	r0, [r5, #18]
    228e:	4313      	orrs	r3, r2
    2290:	0600      	lsls	r0, r0, #24
    2292:	7ce9      	ldrb	r1, [r5, #19]
    2294:	4318      	orrs	r0, r3
    2296:	47b0      	blx	r6
    2298:	23c8      	movs	r3, #200	; 0xc8
    229a:	009b      	lsls	r3, r3, #2
    229c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    229e:	7d6b      	ldrb	r3, [r5, #21]
    22a0:	7d29      	ldrb	r1, [r5, #20]
    22a2:	7da8      	ldrb	r0, [r5, #22]
    22a4:	021b      	lsls	r3, r3, #8
    22a6:	430b      	orrs	r3, r1
    22a8:	0400      	lsls	r0, r0, #16
    22aa:	001a      	movs	r2, r3
    22ac:	0003      	movs	r3, r0
    22ae:	7de8      	ldrb	r0, [r5, #23]
    22b0:	4313      	orrs	r3, r2
    22b2:	0600      	lsls	r0, r0, #24
    22b4:	7e29      	ldrb	r1, [r5, #24]
    22b6:	4318      	orrs	r0, r3
    22b8:	47b0      	blx	r6
    22ba:	4bb8      	ldr	r3, [pc, #736]	; (259c <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22bc:	7e69      	ldrb	r1, [r5, #25]
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);
    22be:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22c0:	7eab      	ldrb	r3, [r5, #26]
    22c2:	7ee8      	ldrb	r0, [r5, #27]
    22c4:	021b      	lsls	r3, r3, #8
    22c6:	430b      	orrs	r3, r1
    22c8:	0400      	lsls	r0, r0, #16
    22ca:	001a      	movs	r2, r3
    22cc:	0003      	movs	r3, r0
    22ce:	7f28      	ldrb	r0, [r5, #28]
    22d0:	4313      	orrs	r3, r2
    22d2:	0600      	lsls	r0, r0, #24
    22d4:	7f69      	ldrb	r1, [r5, #29]
    22d6:	4318      	orrs	r0, r3
    22d8:	47b0      	blx	r6
    22da:	0023      	movs	r3, r4
    22dc:	33fe      	adds	r3, #254	; 0xfe
    22de:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    22e0:	4baf      	ldr	r3, [pc, #700]	; (25a0 <sampleTick+0x3c4>)
    22e2:	0026      	movs	r6, r4
    22e4:	18c0      	adds	r0, r0, r3
    22e6:	4ba7      	ldr	r3, [pc, #668]	; (2584 <sampleTick+0x3a8>)
    22e8:	4798      	blx	r3
    22ea:	4aae      	ldr	r2, [pc, #696]	; (25a4 <sampleTick+0x3c8>)
    22ec:	4fa7      	ldr	r7, [pc, #668]	; (258c <sampleTick+0x3b0>)
    22ee:	4bae      	ldr	r3, [pc, #696]	; (25a8 <sampleTick+0x3cc>)
    22f0:	47b8      	blx	r7
    22f2:	4ba8      	ldr	r3, [pc, #672]	; (2594 <sampleTick+0x3b8>)
    22f4:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    22f6:	0022      	movs	r2, r4
    22f8:	0023      	movs	r3, r4
    22fa:	32c8      	adds	r2, #200	; 0xc8
    22fc:	9204      	str	r2, [sp, #16]
    22fe:	6812      	ldr	r2, [r2, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2300:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2302:	33cc      	adds	r3, #204	; 0xcc
    2304:	2780      	movs	r7, #128	; 0x80
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2306:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2308:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    230a:	2250      	movs	r2, #80	; 0x50
    230c:	4ba7      	ldr	r3, [pc, #668]	; (25ac <sampleTick+0x3d0>)
    230e:	023f      	lsls	r7, r7, #8
    2310:	615f      	str	r7, [r3, #20]
    2312:	002e      	movs	r6, r5
    2314:	9200      	str	r2, [sp, #0]
    2316:	7fea      	ldrb	r2, [r5, #31]
    2318:	7fa8      	ldrb	r0, [r5, #30]
    231a:	0212      	lsls	r2, r2, #8
    231c:	4302      	orrs	r2, r0
    231e:	0011      	movs	r1, r2
    2320:	002b      	movs	r3, r5
    2322:	361e      	adds	r6, #30
    2324:	78b2      	ldrb	r2, [r6, #2]
    2326:	3323      	adds	r3, #35	; 0x23
    2328:	0412      	lsls	r2, r2, #16
    232a:	430a      	orrs	r2, r1
    232c:	78f1      	ldrb	r1, [r6, #3]
    232e:	7818      	ldrb	r0, [r3, #0]
    2330:	0609      	lsls	r1, r1, #24
    2332:	4311      	orrs	r1, r2
    2334:	7932      	ldrb	r2, [r6, #4]
    2336:	789d      	ldrb	r5, [r3, #2]
    2338:	9203      	str	r2, [sp, #12]
    233a:	785a      	ldrb	r2, [r3, #1]
    233c:	042d      	lsls	r5, r5, #16
    233e:	0212      	lsls	r2, r2, #8
    2340:	4302      	orrs	r2, r0
    2342:	9102      	str	r1, [sp, #8]
    2344:	0011      	movs	r1, r2
    2346:	002a      	movs	r2, r5
    2348:	78dd      	ldrb	r5, [r3, #3]
    234a:	791b      	ldrb	r3, [r3, #4]
    234c:	430a      	orrs	r2, r1
    234e:	062d      	lsls	r5, r5, #24
    2350:	4315      	orrs	r5, r2
    2352:	9305      	str	r3, [sp, #20]
    2354:	9a02      	ldr	r2, [sp, #8]
    2356:	9905      	ldr	r1, [sp, #20]
    2358:	9b03      	ldr	r3, [sp, #12]
    235a:	0028      	movs	r0, r5
    235c:	4e94      	ldr	r6, [pc, #592]	; (25b0 <sampleTick+0x3d4>)
    235e:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    2360:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2362:	4b92      	ldr	r3, [pc, #584]	; (25ac <sampleTick+0x3d0>)
    2364:	0040      	lsls	r0, r0, #1
    2366:	619f      	str	r7, [r3, #24]
    2368:	4b92      	ldr	r3, [pc, #584]	; (25b4 <sampleTick+0x3d8>)
    236a:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    236c:	4b92      	ldr	r3, [pc, #584]	; (25b8 <sampleTick+0x3dc>)
    236e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2370:	4b8e      	ldr	r3, [pc, #568]	; (25ac <sampleTick+0x3d0>)
    2372:	61a0      	str	r0, [r4, #24]
    2374:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    2376:	2346      	movs	r3, #70	; 0x46
    2378:	9a02      	ldr	r2, [sp, #8]
    237a:	9300      	str	r3, [sp, #0]
    237c:	0028      	movs	r0, r5
    237e:	9b03      	ldr	r3, [sp, #12]
    2380:	9905      	ldr	r1, [sp, #20]
    2382:	47b0      	blx	r6
    2384:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2386:	4b89      	ldr	r3, [pc, #548]	; (25ac <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2388:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    238a:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    238c:	4b8b      	ldr	r3, [pc, #556]	; (25bc <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    238e:	4e8c      	ldr	r6, [pc, #560]	; (25c0 <sampleTick+0x3e4>)
    2390:	601a      	str	r2, [r3, #0]
    2392:	2182      	movs	r1, #130	; 0x82
    2394:	2000      	movs	r0, #0
    2396:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2398:	21ff      	movs	r1, #255	; 0xff
    239a:	2000      	movs	r0, #0
    239c:	47b0      	blx	r6
    239e:	0023      	movs	r3, r4
    23a0:	33e4      	adds	r3, #228	; 0xe4
    23a2:	8018      	strh	r0, [r3, #0]
    23a4:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23a6:	21ff      	movs	r1, #255	; 0xff
    23a8:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23aa:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ac:	47b0      	blx	r6
    23ae:	9b02      	ldr	r3, [sp, #8]
    23b0:	0200      	lsls	r0, r0, #8
    23b2:	4305      	orrs	r5, r0
    23b4:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23b6:	21ff      	movs	r1, #255	; 0xff
    23b8:	2000      	movs	r0, #0
    23ba:	47b0      	blx	r6
    23bc:	0023      	movs	r3, r4
    23be:	33e8      	adds	r3, #232	; 0xe8
    23c0:	8018      	strh	r0, [r3, #0]
    23c2:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23c4:	21ff      	movs	r1, #255	; 0xff
    23c6:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23c8:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ca:	47b0      	blx	r6
    23cc:	9b03      	ldr	r3, [sp, #12]
    23ce:	0200      	lsls	r0, r0, #8
    23d0:	4305      	orrs	r5, r0
    23d2:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23d4:	21ff      	movs	r1, #255	; 0xff
    23d6:	0025      	movs	r5, r4
    23d8:	2000      	movs	r0, #0
    23da:	47b0      	blx	r6
    23dc:	35ec      	adds	r5, #236	; 0xec
    23de:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23e0:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23e2:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23e4:	2000      	movs	r0, #0
    23e6:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23e8:	2280      	movs	r2, #128	; 0x80
    23ea:	0200      	lsls	r0, r0, #8
    23ec:	4b75      	ldr	r3, [pc, #468]	; (25c4 <sampleTick+0x3e8>)
    23ee:	4307      	orrs	r7, r0
    23f0:	00d2      	lsls	r2, r2, #3
    23f2:	802f      	strh	r7, [r5, #0]
    23f4:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    23f6:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    23f8:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    23fa:	2000      	movs	r0, #0
    23fc:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    23fe:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2400:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2402:	2200      	movs	r2, #0
    2404:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    2406:	2102      	movs	r1, #2
    2408:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    240a:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    240c:	37ee      	adds	r7, #238	; 0xee
    240e:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2410:	1100      	asrs	r0, r0, #4
    2412:	31e6      	adds	r1, #230	; 0xe6
    2414:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2416:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2418:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    241a:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    241c:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    241e:	4b59      	ldr	r3, [pc, #356]	; (2584 <sampleTick+0x3a8>)
    2420:	4798      	blx	r3
    2422:	23fe      	movs	r3, #254	; 0xfe
    2424:	2200      	movs	r2, #0
    2426:	4d59      	ldr	r5, [pc, #356]	; (258c <sampleTick+0x3b0>)
    2428:	059b      	lsls	r3, r3, #22
    242a:	47a8      	blx	r5
    242c:	4b59      	ldr	r3, [pc, #356]	; (2594 <sampleTick+0x3b8>)
    242e:	4798      	blx	r3
    2430:	9b04      	ldr	r3, [sp, #16]
    2432:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2434:	0023      	movs	r3, r4
    2436:	33d0      	adds	r3, #208	; 0xd0
    2438:	9303      	str	r3, [sp, #12]
    243a:	9b02      	ldr	r3, [sp, #8]
    243c:	2000      	movs	r0, #0
    243e:	5e18      	ldrsh	r0, [r3, r0]
    2440:	4b50      	ldr	r3, [pc, #320]	; (2584 <sampleTick+0x3a8>)
    2442:	4798      	blx	r3
    2444:	23fe      	movs	r3, #254	; 0xfe
    2446:	2200      	movs	r2, #0
    2448:	059b      	lsls	r3, r3, #22
    244a:	47a8      	blx	r5
    244c:	4b51      	ldr	r3, [pc, #324]	; (2594 <sampleTick+0x3b8>)
    244e:	4798      	blx	r3
    2450:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    2452:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2454:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    2456:	2300      	movs	r3, #0
    2458:	5ef8      	ldrsh	r0, [r7, r3]
    245a:	4b4a      	ldr	r3, [pc, #296]	; (2584 <sampleTick+0x3a8>)
    245c:	4798      	blx	r3
    245e:	23fe      	movs	r3, #254	; 0xfe
    2460:	2200      	movs	r2, #0
    2462:	4f4a      	ldr	r7, [pc, #296]	; (258c <sampleTick+0x3b0>)
    2464:	059b      	lsls	r3, r3, #22
    2466:	47b8      	blx	r7
    2468:	4b4a      	ldr	r3, [pc, #296]	; (2594 <sampleTick+0x3b8>)
    246a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    246c:	2280      	movs	r2, #128	; 0x80
    246e:	4b4f      	ldr	r3, [pc, #316]	; (25ac <sampleTick+0x3d0>)
    2470:	00d2      	lsls	r2, r2, #3
    2472:	35d4      	adds	r5, #212	; 0xd4
    2474:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2476:	2182      	movs	r1, #130	; 0x82
    2478:	615a      	str	r2, [r3, #20]
    247a:	2000      	movs	r0, #0
    247c:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    247e:	21ff      	movs	r1, #255	; 0xff
    2480:	2000      	movs	r0, #0
    2482:	47b0      	blx	r6
    2484:	0023      	movs	r3, r4
    2486:	33f0      	adds	r3, #240	; 0xf0
    2488:	8018      	strh	r0, [r3, #0]
    248a:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    248c:	21ff      	movs	r1, #255	; 0xff
    248e:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2490:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2492:	47b0      	blx	r6
    2494:	9b02      	ldr	r3, [sp, #8]
    2496:	0200      	lsls	r0, r0, #8
    2498:	4305      	orrs	r5, r0
    249a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    249c:	21ff      	movs	r1, #255	; 0xff
    249e:	2000      	movs	r0, #0
    24a0:	47b0      	blx	r6
    24a2:	0023      	movs	r3, r4
    24a4:	33f4      	adds	r3, #244	; 0xf4
    24a6:	8018      	strh	r0, [r3, #0]
    24a8:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24aa:	21ff      	movs	r1, #255	; 0xff
    24ac:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ae:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24b0:	47b0      	blx	r6
    24b2:	9b03      	ldr	r3, [sp, #12]
    24b4:	0200      	lsls	r0, r0, #8
    24b6:	4305      	orrs	r5, r0
    24b8:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ba:	21ff      	movs	r1, #255	; 0xff
    24bc:	0025      	movs	r5, r4
    24be:	2000      	movs	r0, #0
    24c0:	47b0      	blx	r6
    24c2:	35f8      	adds	r5, #248	; 0xf8
    24c4:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24c6:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24c8:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24ca:	2000      	movs	r0, #0
    24cc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24ce:	2280      	movs	r2, #128	; 0x80
    24d0:	0200      	lsls	r0, r0, #8
    24d2:	4b36      	ldr	r3, [pc, #216]	; (25ac <sampleTick+0x3d0>)
    24d4:	4307      	orrs	r7, r0
    24d6:	00d2      	lsls	r2, r2, #3
    24d8:	802f      	strh	r7, [r5, #0]
    24da:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24dc:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    24de:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24e0:	2000      	movs	r0, #0
    24e2:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24e4:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    24e6:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24e8:	2200      	movs	r2, #0
    24ea:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    24ec:	2100      	movs	r1, #0
    24ee:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    24f0:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    24f2:	36f6      	adds	r6, #246	; 0xf6
    24f4:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    24f6:	1100      	asrs	r0, r0, #4
    24f8:	31f2      	adds	r1, #242	; 0xf2
    24fa:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    24fc:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    24fe:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2500:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    2502:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    2504:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2506:	4b1f      	ldr	r3, [pc, #124]	; (2584 <sampleTick+0x3a8>)
    2508:	4798      	blx	r3
    250a:	23fe      	movs	r3, #254	; 0xfe
    250c:	2200      	movs	r2, #0
    250e:	4f1f      	ldr	r7, [pc, #124]	; (258c <sampleTick+0x3b0>)
    2510:	059b      	lsls	r3, r3, #22
    2512:	47b8      	blx	r7
    2514:	4b1f      	ldr	r3, [pc, #124]	; (2594 <sampleTick+0x3b8>)
    2516:	4798      	blx	r3
    2518:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    251a:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    251c:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    251e:	2300      	movs	r3, #0
    2520:	5ef0      	ldrsh	r0, [r6, r3]
    2522:	4b18      	ldr	r3, [pc, #96]	; (2584 <sampleTick+0x3a8>)
    2524:	4798      	blx	r3
    2526:	23fe      	movs	r3, #254	; 0xfe
    2528:	2200      	movs	r2, #0
    252a:	4e18      	ldr	r6, [pc, #96]	; (258c <sampleTick+0x3b0>)
    252c:	059b      	lsls	r3, r3, #22
    252e:	47b0      	blx	r6
    2530:	4b18      	ldr	r3, [pc, #96]	; (2594 <sampleTick+0x3b8>)
    2532:	4798      	blx	r3
    2534:	37dc      	adds	r7, #220	; 0xdc
    2536:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    2538:	2302      	movs	r3, #2
    253a:	5ee8      	ldrsh	r0, [r5, r3]
    253c:	4b11      	ldr	r3, [pc, #68]	; (2584 <sampleTick+0x3a8>)
    253e:	4798      	blx	r3
    2540:	23fe      	movs	r3, #254	; 0xfe
    2542:	2200      	movs	r2, #0
    2544:	4d11      	ldr	r5, [pc, #68]	; (258c <sampleTick+0x3b0>)
    2546:	059b      	lsls	r3, r3, #22
    2548:	47a8      	blx	r5
    254a:	0026      	movs	r6, r4
    254c:	4b11      	ldr	r3, [pc, #68]	; (2594 <sampleTick+0x3b8>)
    254e:	4798      	blx	r3
    2550:	36e0      	adds	r6, #224	; 0xe0
    2552:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    2554:	4b1c      	ldr	r3, [pc, #112]	; (25c8 <sampleTick+0x3ec>)
    2556:	2005      	movs	r0, #5
    2558:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    255a:	4b17      	ldr	r3, [pc, #92]	; (25b8 <sampleTick+0x3dc>)
    255c:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    255e:	3408      	adds	r4, #8
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    2560:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    2562:	4b1a      	ldr	r3, [pc, #104]	; (25cc <sampleTick+0x3f0>)
    2564:	0020      	movs	r0, r4
    2566:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    2568:	0020      	movs	r0, r4
    256a:	4b19      	ldr	r3, [pc, #100]	; (25d0 <sampleTick+0x3f4>)
    256c:	4798      	blx	r3


}
    256e:	b007      	add	sp, #28
    2570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	200004d3 	.word	0x200004d3
    2578:	00000fd1 	.word	0x00000fd1
    257c:	00006594 	.word	0x00006594
    2580:	00000c45 	.word	0x00000c45
    2584:	00005e39 	.word	0x00005e39
    2588:	77318fc5 	.word	0x77318fc5
    258c:	000051f1 	.word	0x000051f1
    2590:	3f5f212d 	.word	0x3f5f212d
    2594:	00005fd5 	.word	0x00005fd5
    2598:	0000031e 	.word	0x0000031e
    259c:	00000322 	.word	0x00000322
    25a0:	fffff0c4 	.word	0xfffff0c4
    25a4:	02de00d2 	.word	0x02de00d2
    25a8:	bf8f8a09 	.word	0xbf8f8a09
    25ac:	41004400 	.word	0x41004400
    25b0:	00000cad 	.word	0x00000cad
    25b4:	00000f55 	.word	0x00000f55
    25b8:	0000043d 	.word	0x0000043d
    25bc:	41004494 	.word	0x41004494
    25c0:	000026e1 	.word	0x000026e1
    25c4:	41004498 	.word	0x41004498
    25c8:	00000f85 	.word	0x00000f85
    25cc:	000004f1 	.word	0x000004f1
    25d0:	00000599 	.word	0x00000599

000025d4 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25d4:	b570      	push	{r4, r5, r6, lr}
    25d6:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25d8:	2301      	movs	r3, #1
    25da:	1ca6      	adds	r6, r4, #2
    25dc:	40b3      	lsls	r3, r6
    25de:	480d      	ldr	r0, [pc, #52]	; (2614 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25e0:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25e2:	6a01      	ldr	r1, [r0, #32]
    25e4:	430b      	orrs	r3, r1
    25e6:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    25e8:	2d00      	cmp	r5, #0
    25ea:	d003      	beq.n	25f4 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    25ec:	2107      	movs	r1, #7
    25ee:	0028      	movs	r0, r5
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <sercomClockEnable+0x44>)
    25f2:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    25f4:	22f0      	movs	r2, #240	; 0xf0
    25f6:	2080      	movs	r0, #128	; 0x80
    25f8:	0229      	lsls	r1, r5, #8
    25fa:	0112      	lsls	r2, r2, #4
    25fc:	4011      	ands	r1, r2
    25fe:	01c0      	lsls	r0, r0, #7
    2600:	4301      	orrs	r1, r0
    2602:	0020      	movs	r0, r4
    2604:	3014      	adds	r0, #20
    2606:	223f      	movs	r2, #63	; 0x3f
    2608:	0003      	movs	r3, r0
    260a:	4013      	ands	r3, r2
    260c:	4319      	orrs	r1, r3
    260e:	4b03      	ldr	r3, [pc, #12]	; (261c <sercomClockEnable+0x48>)
    2610:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2612:	bd70      	pop	{r4, r5, r6, pc}
    2614:	40000400 	.word	0x40000400
    2618:	00000f05 	.word	0x00000f05
    261c:	40000c00 	.word	0x40000c00

00002620 <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <sercomReset+0x14>)
    2622:	0280      	lsls	r0, r0, #10
    2624:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2626:	2301      	movs	r3, #1
    2628:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    262a:	6802      	ldr	r2, [r0, #0]
    262c:	421a      	tst	r2, r3
    262e:	d1fc      	bne.n	262a <sercomReset+0xa>
}
    2630:	4770      	bx	lr
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	42000800 	.word	0x42000800

00002638 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    263a:	0004      	movs	r4, r0
    263c:	9300      	str	r3, [sp, #0]
    263e:	ab08      	add	r3, sp, #32
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	000e      	movs	r6, r1
    2644:	9301      	str	r3, [sp, #4]
    2646:	ab09      	add	r3, sp, #36	; 0x24
    2648:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    264a:	4b12      	ldr	r3, [pc, #72]	; (2694 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    264c:	0015      	movs	r5, r2

    sercomReset(id);
    264e:	4798      	blx	r3
    2650:	4b11      	ldr	r3, [pc, #68]	; (2698 <sercomSpiMasterInit+0x60>)
    2652:	02a4      	lsls	r4, r4, #10
    2654:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	029b      	lsls	r3, r3, #10
    265a:	6063      	str	r3, [r4, #4]
    265c:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    265e:	21c0      	movs	r1, #192	; 0xc0
    2660:	042d      	lsls	r5, r5, #16
    2662:	029b      	lsls	r3, r3, #10
    2664:	402b      	ands	r3, r5
    2666:	250e      	movs	r5, #14
    2668:	0536      	lsls	r6, r6, #20
    266a:	0389      	lsls	r1, r1, #14
    266c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    266e:	9e00      	ldr	r6, [sp, #0]
    2670:	431d      	orrs	r5, r3
    2672:	1e73      	subs	r3, r6, #1
    2674:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2676:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2678:	0772      	lsls	r2, r6, #29
    267a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    267c:	432a      	orrs	r2, r5
    267e:	1e59      	subs	r1, r3, #1
    2680:	418b      	sbcs	r3, r1
    2682:	0016      	movs	r6, r2
    2684:	071b      	lsls	r3, r3, #28
    2686:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2688:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    268a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    268c:	69e3      	ldr	r3, [r4, #28]
    268e:	075b      	lsls	r3, r3, #29
    2690:	d4fc      	bmi.n	268c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2692:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2694:	00002621 	.word	0x00002621
    2698:	42000800 	.word	0x42000800

0000269c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269e:	0007      	movs	r7, r0
    26a0:	001e      	movs	r6, r3
    sercomReset(id);
    26a2:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    26a4:	000d      	movs	r5, r1
    26a6:	0014      	movs	r4, r2
    sercomReset(id);
    26a8:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26aa:	4b0b      	ldr	r3, [pc, #44]	; (26d8 <sercomUartInit+0x3c>)
    26ac:	02b8      	lsls	r0, r7, #10
    26ae:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26b0:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26b2:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26b4:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26b6:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26b8:	0529      	lsls	r1, r5, #20
    26ba:	0392      	lsls	r2, r2, #14
    26bc:	4011      	ands	r1, r2
    26be:	4a07      	ldr	r2, [pc, #28]	; (26dc <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    26c0:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26c2:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c4:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    26c6:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c8:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26ca:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26cc:	4023      	ands	r3, r4
    26ce:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    26d0:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    26d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26d4:	00002621 	.word	0x00002621
    26d8:	42000800 	.word	0x42000800
    26dc:	40000006 	.word	0x40000006

000026e0 <spiDataTransfer>:
    26e0:	4b04      	ldr	r3, [pc, #16]	; (26f4 <spiDataTransfer+0x14>)
    26e2:	0280      	lsls	r0, r0, #10
    26e4:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    26e6:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    26e8:	7e03      	ldrb	r3, [r0, #24]
    26ea:	075b      	lsls	r3, r3, #29
    26ec:	d5fc      	bpl.n	26e8 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    26ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
    26f0:	b2c0      	uxtb	r0, r0
}
    26f2:	4770      	bx	lr
    26f4:	42000800 	.word	0x42000800

000026f8 <usartDataOut>:
    26f8:	4b04      	ldr	r3, [pc, #16]	; (270c <usartDataOut+0x14>)
    26fa:	0280      	lsls	r0, r0, #10
    26fc:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    26fe:	b289      	uxth	r1, r1
    2700:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2702:	7e03      	ldrb	r3, [r0, #24]
    2704:	07db      	lsls	r3, r3, #31
    2706:	d5fc      	bpl.n	2702 <usartDataOut+0xa>
}
    2708:	4770      	bx	lr
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	42000800 	.word	0x42000800

00002710 <usartDataIn>:
    2710:	4b02      	ldr	r3, [pc, #8]	; (271c <usartDataIn+0xc>)
    2712:	0280      	lsls	r0, r0, #10
    2714:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2716:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2718:	b2c0      	uxtb	r0, r0
    271a:	4770      	bx	lr
    271c:	42000800 	.word	0x42000800

00002720 <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2722:	4b2d      	ldr	r3, [pc, #180]	; (27d8 <attemptConnection+0xb8>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2724:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    2726:	4798      	blx	r3
    2728:	2800      	cmp	r0, #0
    272a:	d054      	beq.n	27d6 <attemptConnection+0xb6>

        my_altimeter->myFlightState = flightTest;
    272c:	230a      	movs	r3, #10

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    272e:	4a2b      	ldr	r2, [pc, #172]	; (27dc <attemptConnection+0xbc>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightTest;
    2730:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2732:	7e13      	ldrb	r3, [r2, #24]
    2734:	4e29      	ldr	r6, [pc, #164]	; (27dc <attemptConnection+0xbc>)
    2736:	075b      	lsls	r3, r3, #29
    2738:	d5fb      	bpl.n	2732 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    273a:	2003      	movs	r0, #3
    273c:	4d28      	ldr	r5, [pc, #160]	; (27e0 <attemptConnection+0xc0>)
    273e:	47a8      	blx	r5
    2740:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2742:	2c4c      	cmp	r4, #76	; 0x4c
    2744:	d13b      	bne.n	27be <attemptConnection+0x9e>
    2746:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2748:	0020      	movs	r0, r4
    274a:	4b26      	ldr	r3, [pc, #152]	; (27e4 <attemptConnection+0xc4>)
    274c:	4798      	blx	r3
    274e:	2800      	cmp	r0, #0
    2750:	d005      	beq.n	275e <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    2752:	0021      	movs	r1, r4
    2754:	3130      	adds	r1, #48	; 0x30
    2756:	b2c9      	uxtb	r1, r1
    2758:	2003      	movs	r0, #3
    275a:	4b23      	ldr	r3, [pc, #140]	; (27e8 <attemptConnection+0xc8>)
    275c:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    275e:	3401      	adds	r4, #1
    2760:	b2e4      	uxtb	r4, r4
    2762:	2c0b      	cmp	r4, #11
    2764:	d1f0      	bne.n	2748 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    2766:	210f      	movs	r1, #15
    2768:	2003      	movs	r0, #3
    276a:	4c1f      	ldr	r4, [pc, #124]	; (27e8 <attemptConnection+0xc8>)
    276c:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    276e:	7e33      	ldrb	r3, [r6, #24]
    2770:	075b      	lsls	r3, r3, #29
    2772:	d5fc      	bpl.n	276e <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2774:	2003      	movs	r0, #3
    2776:	47a8      	blx	r5
    2778:	3830      	subs	r0, #48	; 0x30
    277a:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    277c:	0028      	movs	r0, r5
    277e:	4b1b      	ldr	r3, [pc, #108]	; (27ec <attemptConnection+0xcc>)
    2780:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2782:	4b1b      	ldr	r3, [pc, #108]	; (27f0 <attemptConnection+0xd0>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2784:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2786:	0028      	movs	r0, r5
    2788:	4798      	blx	r3
    278a:	0006      	movs	r6, r0

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    278c:	1bc5      	subs	r5, r0, r7
    278e:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2790:	b2e9      	uxtb	r1, r5
    2792:	2003      	movs	r0, #3
    2794:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2796:	b2a9      	uxth	r1, r5
    2798:	0a09      	lsrs	r1, r1, #8
    279a:	2003      	movs	r0, #3
    279c:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    279e:	b2f1      	uxtb	r1, r6
    27a0:	2003      	movs	r0, #3
    27a2:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    27a4:	0a31      	lsrs	r1, r6, #8
    27a6:	b2c9      	uxtb	r1, r1
    27a8:	2003      	movs	r0, #3
    27aa:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    27ac:	0c31      	lsrs	r1, r6, #16
    27ae:	b2c9      	uxtb	r1, r1
    27b0:	2003      	movs	r0, #3
    27b2:	47a0      	blx	r4



            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    27b4:	0031      	movs	r1, r6
    27b6:	0038      	movs	r0, r7
    27b8:	4b0e      	ldr	r3, [pc, #56]	; (27f4 <attemptConnection+0xd4>)
    27ba:	4798      	blx	r3
    27bc:	e00b      	b.n	27d6 <attemptConnection+0xb6>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    27be:	2845      	cmp	r0, #69	; 0x45
    27c0:	d109      	bne.n	27d6 <attemptConnection+0xb6>
            AT25SFChipErase();
    27c2:	4b0d      	ldr	r3, [pc, #52]	; (27f8 <attemptConnection+0xd8>)
    27c4:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    27c6:	2003      	movs	r0, #3
    27c8:	4b07      	ldr	r3, [pc, #28]	; (27e8 <attemptConnection+0xc8>)
    27ca:	0021      	movs	r1, r4
    27cc:	4798      	blx	r3
            beep(400);
    27ce:	20c8      	movs	r0, #200	; 0xc8
    27d0:	4b0a      	ldr	r3, [pc, #40]	; (27fc <attemptConnection+0xdc>)
    27d2:	0040      	lsls	r0, r0, #1
    27d4:	4798      	blx	r3


        }
    }

}
    27d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27d8:	00000b4d 	.word	0x00000b4d
    27dc:	42001400 	.word	0x42001400
    27e0:	00002711 	.word	0x00002711
    27e4:	000020a1 	.word	0x000020a1
    27e8:	000026f9 	.word	0x000026f9
    27ec:	00002079 	.word	0x00002079
    27f0:	000020ed 	.word	0x000020ed
    27f4:	00000b81 	.word	0x00000b81
    27f8:	000001e5 	.word	0x000001e5
    27fc:	00000d6d 	.word	0x00000d6d

00002800 <pow>:
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	465f      	mov	r7, fp
    2804:	464d      	mov	r5, r9
    2806:	4656      	mov	r6, sl
    2808:	4644      	mov	r4, r8
    280a:	b4f0      	push	{r4, r5, r6, r7}
    280c:	b091      	sub	sp, #68	; 0x44
    280e:	001f      	movs	r7, r3
    2810:	0004      	movs	r4, r0
    2812:	000d      	movs	r5, r1
    2814:	0016      	movs	r6, r2
    2816:	f000 f9af 	bl	2b78 <__ieee754_pow>
    281a:	4bcf      	ldr	r3, [pc, #828]	; (2b58 <pow+0x358>)
    281c:	9002      	str	r0, [sp, #8]
    281e:	9103      	str	r1, [sp, #12]
    2820:	469b      	mov	fp, r3
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	b25b      	sxtb	r3, r3
    2826:	4699      	mov	r9, r3
    2828:	3301      	adds	r3, #1
    282a:	d04f      	beq.n	28cc <pow+0xcc>
    282c:	0032      	movs	r2, r6
    282e:	003b      	movs	r3, r7
    2830:	0030      	movs	r0, r6
    2832:	0039      	movs	r1, r7
    2834:	f003 faaa 	bl	5d8c <__aeabi_dcmpun>
    2838:	9000      	str	r0, [sp, #0]
    283a:	2800      	cmp	r0, #0
    283c:	d146      	bne.n	28cc <pow+0xcc>
    283e:	0022      	movs	r2, r4
    2840:	002b      	movs	r3, r5
    2842:	0020      	movs	r0, r4
    2844:	0029      	movs	r1, r5
    2846:	f003 faa1 	bl	5d8c <__aeabi_dcmpun>
    284a:	2200      	movs	r2, #0
    284c:	4682      	mov	sl, r0
    284e:	2800      	cmp	r0, #0
    2850:	d134      	bne.n	28bc <pow+0xbc>
    2852:	2300      	movs	r3, #0
    2854:	0020      	movs	r0, r4
    2856:	0029      	movs	r1, r5
    2858:	f001 f8fc 	bl	3a54 <__aeabi_dcmpeq>
    285c:	2800      	cmp	r0, #0
    285e:	d03a      	beq.n	28d6 <pow+0xd6>
    2860:	2200      	movs	r2, #0
    2862:	2300      	movs	r3, #0
    2864:	0030      	movs	r0, r6
    2866:	0039      	movs	r1, r7
    2868:	f001 f8f4 	bl	3a54 <__aeabi_dcmpeq>
    286c:	9005      	str	r0, [sp, #20]
    286e:	2800      	cmp	r0, #0
    2870:	d100      	bne.n	2874 <pow+0x74>
    2872:	e074      	b.n	295e <pow+0x15e>
    2874:	ab06      	add	r3, sp, #24
    2876:	4698      	mov	r8, r3
    2878:	2301      	movs	r3, #1
    287a:	4642      	mov	r2, r8
    287c:	9306      	str	r3, [sp, #24]
    287e:	4bb7      	ldr	r3, [pc, #732]	; (2b5c <pow+0x35c>)
    2880:	6053      	str	r3, [r2, #4]
    2882:	4643      	mov	r3, r8
    2884:	4652      	mov	r2, sl
    2886:	609c      	str	r4, [r3, #8]
    2888:	60dd      	str	r5, [r3, #12]
    288a:	621a      	str	r2, [r3, #32]
    288c:	611e      	str	r6, [r3, #16]
    288e:	615f      	str	r7, [r3, #20]
    2890:	4642      	mov	r2, r8
    2892:	2300      	movs	r3, #0
    2894:	2400      	movs	r4, #0
    2896:	6193      	str	r3, [r2, #24]
    2898:	61d4      	str	r4, [r2, #28]
    289a:	464b      	mov	r3, r9
    289c:	2b00      	cmp	r3, #0
    289e:	d100      	bne.n	28a2 <pow+0xa2>
    28a0:	e094      	b.n	29cc <pow+0x1cc>
    28a2:	2300      	movs	r3, #0
    28a4:	4cae      	ldr	r4, [pc, #696]	; (2b60 <pow+0x360>)
    28a6:	9300      	str	r3, [sp, #0]
    28a8:	9401      	str	r4, [sp, #4]
    28aa:	9800      	ldr	r0, [sp, #0]
    28ac:	9901      	ldr	r1, [sp, #4]
    28ae:	b011      	add	sp, #68	; 0x44
    28b0:	bc3c      	pop	{r2, r3, r4, r5}
    28b2:	4690      	mov	r8, r2
    28b4:	4699      	mov	r9, r3
    28b6:	46a2      	mov	sl, r4
    28b8:	46ab      	mov	fp, r5
    28ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28bc:	2300      	movs	r3, #0
    28be:	0030      	movs	r0, r6
    28c0:	0039      	movs	r1, r7
    28c2:	f001 f8c7 	bl	3a54 <__aeabi_dcmpeq>
    28c6:	2800      	cmp	r0, #0
    28c8:	d000      	beq.n	28cc <pow+0xcc>
    28ca:	e0eb      	b.n	2aa4 <pow+0x2a4>
    28cc:	9b02      	ldr	r3, [sp, #8]
    28ce:	9c03      	ldr	r4, [sp, #12]
    28d0:	9300      	str	r3, [sp, #0]
    28d2:	9401      	str	r4, [sp, #4]
    28d4:	e7e9      	b.n	28aa <pow+0xaa>
    28d6:	9802      	ldr	r0, [sp, #8]
    28d8:	9903      	ldr	r1, [sp, #12]
    28da:	f000 ff7d 	bl	37d8 <finite>
    28de:	4681      	mov	r9, r0
    28e0:	2800      	cmp	r0, #0
    28e2:	d100      	bne.n	28e6 <pow+0xe6>
    28e4:	e086      	b.n	29f4 <pow+0x1f4>
    28e6:	9802      	ldr	r0, [sp, #8]
    28e8:	9903      	ldr	r1, [sp, #12]
    28ea:	2200      	movs	r2, #0
    28ec:	2300      	movs	r3, #0
    28ee:	f001 f8b1 	bl	3a54 <__aeabi_dcmpeq>
    28f2:	2800      	cmp	r0, #0
    28f4:	d0ea      	beq.n	28cc <pow+0xcc>
    28f6:	0020      	movs	r0, r4
    28f8:	0029      	movs	r1, r5
    28fa:	f000 ff6d 	bl	37d8 <finite>
    28fe:	9a02      	ldr	r2, [sp, #8]
    2900:	9b03      	ldr	r3, [sp, #12]
    2902:	9200      	str	r2, [sp, #0]
    2904:	9301      	str	r3, [sp, #4]
    2906:	2800      	cmp	r0, #0
    2908:	d0cf      	beq.n	28aa <pow+0xaa>
    290a:	0030      	movs	r0, r6
    290c:	0039      	movs	r1, r7
    290e:	f000 ff63 	bl	37d8 <finite>
    2912:	9a02      	ldr	r2, [sp, #8]
    2914:	9b03      	ldr	r3, [sp, #12]
    2916:	9200      	str	r2, [sp, #0]
    2918:	9301      	str	r3, [sp, #4]
    291a:	2800      	cmp	r0, #0
    291c:	d0c5      	beq.n	28aa <pow+0xaa>
    291e:	ab06      	add	r3, sp, #24
    2920:	4698      	mov	r8, r3
    2922:	2304      	movs	r3, #4
    2924:	4642      	mov	r2, r8
    2926:	9306      	str	r3, [sp, #24]
    2928:	4b8c      	ldr	r3, [pc, #560]	; (2b5c <pow+0x35c>)
    292a:	6094      	str	r4, [r2, #8]
    292c:	60d5      	str	r5, [r2, #12]
    292e:	6053      	str	r3, [r2, #4]
    2930:	2300      	movs	r3, #0
    2932:	2400      	movs	r4, #0
    2934:	6213      	str	r3, [r2, #32]
    2936:	2300      	movs	r3, #0
    2938:	6193      	str	r3, [r2, #24]
    293a:	61d4      	str	r4, [r2, #28]
    293c:	465b      	mov	r3, fp
    293e:	781b      	ldrb	r3, [r3, #0]
    2940:	6116      	str	r6, [r2, #16]
    2942:	6157      	str	r7, [r2, #20]
    2944:	b25b      	sxtb	r3, r3
    2946:	2b02      	cmp	r3, #2
    2948:	d004      	beq.n	2954 <pow+0x154>
    294a:	4640      	mov	r0, r8
    294c:	f000 ff4e 	bl	37ec <matherr>
    2950:	2800      	cmp	r0, #0
    2952:	d140      	bne.n	29d6 <pow+0x1d6>
    2954:	f003 fc74 	bl	6240 <__errno>
    2958:	2322      	movs	r3, #34	; 0x22
    295a:	6003      	str	r3, [r0, #0]
    295c:	e03b      	b.n	29d6 <pow+0x1d6>
    295e:	0030      	movs	r0, r6
    2960:	0039      	movs	r1, r7
    2962:	f000 ff39 	bl	37d8 <finite>
    2966:	9a02      	ldr	r2, [sp, #8]
    2968:	9b03      	ldr	r3, [sp, #12]
    296a:	9200      	str	r2, [sp, #0]
    296c:	9301      	str	r3, [sp, #4]
    296e:	2800      	cmp	r0, #0
    2970:	d09b      	beq.n	28aa <pow+0xaa>
    2972:	2200      	movs	r2, #0
    2974:	2300      	movs	r3, #0
    2976:	0030      	movs	r0, r6
    2978:	0039      	movs	r1, r7
    297a:	f001 f871 	bl	3a60 <__aeabi_dcmplt>
    297e:	2800      	cmp	r0, #0
    2980:	d100      	bne.n	2984 <pow+0x184>
    2982:	e792      	b.n	28aa <pow+0xaa>
    2984:	ab06      	add	r3, sp, #24
    2986:	4698      	mov	r8, r3
    2988:	2301      	movs	r3, #1
    298a:	4642      	mov	r2, r8
    298c:	9306      	str	r3, [sp, #24]
    298e:	4b73      	ldr	r3, [pc, #460]	; (2b5c <pow+0x35c>)
    2990:	6053      	str	r3, [r2, #4]
    2992:	4643      	mov	r3, r8
    2994:	9a05      	ldr	r2, [sp, #20]
    2996:	609c      	str	r4, [r3, #8]
    2998:	60dd      	str	r5, [r3, #12]
    299a:	621a      	str	r2, [r3, #32]
    299c:	611e      	str	r6, [r3, #16]
    299e:	615f      	str	r7, [r3, #20]
    29a0:	465b      	mov	r3, fp
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	b25b      	sxtb	r3, r3
    29a6:	2b00      	cmp	r3, #0
    29a8:	d00b      	beq.n	29c2 <pow+0x1c2>
    29aa:	2000      	movs	r0, #0
    29ac:	4642      	mov	r2, r8
    29ae:	496d      	ldr	r1, [pc, #436]	; (2b64 <pow+0x364>)
    29b0:	6190      	str	r0, [r2, #24]
    29b2:	61d1      	str	r1, [r2, #28]
    29b4:	2b02      	cmp	r3, #2
    29b6:	d109      	bne.n	29cc <pow+0x1cc>
    29b8:	f003 fc42 	bl	6240 <__errno>
    29bc:	2321      	movs	r3, #33	; 0x21
    29be:	6003      	str	r3, [r0, #0]
    29c0:	e009      	b.n	29d6 <pow+0x1d6>
    29c2:	4642      	mov	r2, r8
    29c4:	2300      	movs	r3, #0
    29c6:	2400      	movs	r4, #0
    29c8:	6193      	str	r3, [r2, #24]
    29ca:	61d4      	str	r4, [r2, #28]
    29cc:	4640      	mov	r0, r8
    29ce:	f000 ff0d 	bl	37ec <matherr>
    29d2:	2800      	cmp	r0, #0
    29d4:	d0f0      	beq.n	29b8 <pow+0x1b8>
    29d6:	4643      	mov	r3, r8
    29d8:	6a1b      	ldr	r3, [r3, #32]
    29da:	2b00      	cmp	r3, #0
    29dc:	d004      	beq.n	29e8 <pow+0x1e8>
    29de:	f003 fc2f 	bl	6240 <__errno>
    29e2:	4643      	mov	r3, r8
    29e4:	6a1b      	ldr	r3, [r3, #32]
    29e6:	6003      	str	r3, [r0, #0]
    29e8:	4643      	mov	r3, r8
    29ea:	69dc      	ldr	r4, [r3, #28]
    29ec:	699b      	ldr	r3, [r3, #24]
    29ee:	9300      	str	r3, [sp, #0]
    29f0:	9401      	str	r4, [sp, #4]
    29f2:	e75a      	b.n	28aa <pow+0xaa>
    29f4:	0020      	movs	r0, r4
    29f6:	0029      	movs	r1, r5
    29f8:	f000 feee 	bl	37d8 <finite>
    29fc:	2800      	cmp	r0, #0
    29fe:	d100      	bne.n	2a02 <pow+0x202>
    2a00:	e771      	b.n	28e6 <pow+0xe6>
    2a02:	0030      	movs	r0, r6
    2a04:	0039      	movs	r1, r7
    2a06:	f000 fee7 	bl	37d8 <finite>
    2a0a:	2800      	cmp	r0, #0
    2a0c:	d100      	bne.n	2a10 <pow+0x210>
    2a0e:	e76a      	b.n	28e6 <pow+0xe6>
    2a10:	9802      	ldr	r0, [sp, #8]
    2a12:	9903      	ldr	r1, [sp, #12]
    2a14:	000b      	movs	r3, r1
    2a16:	0002      	movs	r2, r0
    2a18:	f003 f9b8 	bl	5d8c <__aeabi_dcmpun>
    2a1c:	ab06      	add	r3, sp, #24
    2a1e:	4698      	mov	r8, r3
    2a20:	2800      	cmp	r0, #0
    2a22:	d17a      	bne.n	2b1a <pow+0x31a>
    2a24:	2303      	movs	r3, #3
    2a26:	4642      	mov	r2, r8
    2a28:	9306      	str	r3, [sp, #24]
    2a2a:	4b4c      	ldr	r3, [pc, #304]	; (2b5c <pow+0x35c>)
    2a2c:	6210      	str	r0, [r2, #32]
    2a2e:	6053      	str	r3, [r2, #4]
    2a30:	465b      	mov	r3, fp
    2a32:	781b      	ldrb	r3, [r3, #0]
    2a34:	6094      	str	r4, [r2, #8]
    2a36:	60d5      	str	r5, [r2, #12]
    2a38:	b25b      	sxtb	r3, r3
    2a3a:	6116      	str	r6, [r2, #16]
    2a3c:	6157      	str	r7, [r2, #20]
    2a3e:	4699      	mov	r9, r3
    2a40:	2b00      	cmp	r3, #0
    2a42:	d148      	bne.n	2ad6 <pow+0x2d6>
    2a44:	22e0      	movs	r2, #224	; 0xe0
    2a46:	4641      	mov	r1, r8
    2a48:	4b47      	ldr	r3, [pc, #284]	; (2b68 <pow+0x368>)
    2a4a:	0612      	lsls	r2, r2, #24
    2a4c:	618a      	str	r2, [r1, #24]
    2a4e:	61cb      	str	r3, [r1, #28]
    2a50:	0020      	movs	r0, r4
    2a52:	2200      	movs	r2, #0
    2a54:	2300      	movs	r3, #0
    2a56:	0029      	movs	r1, r5
    2a58:	f001 f802 	bl	3a60 <__aeabi_dcmplt>
    2a5c:	2800      	cmp	r0, #0
    2a5e:	d100      	bne.n	2a62 <pow+0x262>
    2a60:	e773      	b.n	294a <pow+0x14a>
    2a62:	2200      	movs	r2, #0
    2a64:	4b41      	ldr	r3, [pc, #260]	; (2b6c <pow+0x36c>)
    2a66:	0030      	movs	r0, r6
    2a68:	0039      	movs	r1, r7
    2a6a:	f002 fbc1 	bl	51f0 <__aeabi_dmul>
    2a6e:	0004      	movs	r4, r0
    2a70:	000d      	movs	r5, r1
    2a72:	f000 fec3 	bl	37fc <rint>
    2a76:	0002      	movs	r2, r0
    2a78:	000b      	movs	r3, r1
    2a7a:	0020      	movs	r0, r4
    2a7c:	0029      	movs	r1, r5
    2a7e:	f000 ffe9 	bl	3a54 <__aeabi_dcmpeq>
    2a82:	2800      	cmp	r0, #0
    2a84:	d105      	bne.n	2a92 <pow+0x292>
    2a86:	22e0      	movs	r2, #224	; 0xe0
    2a88:	4b39      	ldr	r3, [pc, #228]	; (2b70 <pow+0x370>)
    2a8a:	0612      	lsls	r2, r2, #24
    2a8c:	4641      	mov	r1, r8
    2a8e:	618a      	str	r2, [r1, #24]
    2a90:	61cb      	str	r3, [r1, #28]
    2a92:	465b      	mov	r3, fp
    2a94:	781b      	ldrb	r3, [r3, #0]
    2a96:	b25b      	sxtb	r3, r3
    2a98:	4699      	mov	r9, r3
    2a9a:	464b      	mov	r3, r9
    2a9c:	2b02      	cmp	r3, #2
    2a9e:	d000      	beq.n	2aa2 <pow+0x2a2>
    2aa0:	e753      	b.n	294a <pow+0x14a>
    2aa2:	e757      	b.n	2954 <pow+0x154>
    2aa4:	ab06      	add	r3, sp, #24
    2aa6:	4698      	mov	r8, r3
    2aa8:	2301      	movs	r3, #1
    2aaa:	4642      	mov	r2, r8
    2aac:	9306      	str	r3, [sp, #24]
    2aae:	4b2b      	ldr	r3, [pc, #172]	; (2b5c <pow+0x35c>)
    2ab0:	6053      	str	r3, [r2, #4]
    2ab2:	4643      	mov	r3, r8
    2ab4:	609c      	str	r4, [r3, #8]
    2ab6:	60dd      	str	r5, [r3, #12]
    2ab8:	2400      	movs	r4, #0
    2aba:	9a00      	ldr	r2, [sp, #0]
    2abc:	4d28      	ldr	r5, [pc, #160]	; (2b60 <pow+0x360>)
    2abe:	621a      	str	r2, [r3, #32]
    2ac0:	611e      	str	r6, [r3, #16]
    2ac2:	615f      	str	r7, [r3, #20]
    2ac4:	619c      	str	r4, [r3, #24]
    2ac6:	61dd      	str	r5, [r3, #28]
    2ac8:	464b      	mov	r3, r9
    2aca:	9400      	str	r4, [sp, #0]
    2acc:	9501      	str	r5, [sp, #4]
    2ace:	2b02      	cmp	r3, #2
    2ad0:	d000      	beq.n	2ad4 <pow+0x2d4>
    2ad2:	e77b      	b.n	29cc <pow+0x1cc>
    2ad4:	e6e9      	b.n	28aa <pow+0xaa>
    2ad6:	2200      	movs	r2, #0
    2ad8:	4641      	mov	r1, r8
    2ada:	4b26      	ldr	r3, [pc, #152]	; (2b74 <pow+0x374>)
    2adc:	0020      	movs	r0, r4
    2ade:	618a      	str	r2, [r1, #24]
    2ae0:	61cb      	str	r3, [r1, #28]
    2ae2:	2200      	movs	r2, #0
    2ae4:	2300      	movs	r3, #0
    2ae6:	0029      	movs	r1, r5
    2ae8:	f000 ffba 	bl	3a60 <__aeabi_dcmplt>
    2aec:	2800      	cmp	r0, #0
    2aee:	d0d4      	beq.n	2a9a <pow+0x29a>
    2af0:	2200      	movs	r2, #0
    2af2:	4b1e      	ldr	r3, [pc, #120]	; (2b6c <pow+0x36c>)
    2af4:	0030      	movs	r0, r6
    2af6:	0039      	movs	r1, r7
    2af8:	f002 fb7a 	bl	51f0 <__aeabi_dmul>
    2afc:	0004      	movs	r4, r0
    2afe:	000d      	movs	r5, r1
    2b00:	f000 fe7c 	bl	37fc <rint>
    2b04:	0002      	movs	r2, r0
    2b06:	000b      	movs	r3, r1
    2b08:	0020      	movs	r0, r4
    2b0a:	0029      	movs	r1, r5
    2b0c:	f000 ffa2 	bl	3a54 <__aeabi_dcmpeq>
    2b10:	2800      	cmp	r0, #0
    2b12:	d1be      	bne.n	2a92 <pow+0x292>
    2b14:	2200      	movs	r2, #0
    2b16:	4b13      	ldr	r3, [pc, #76]	; (2b64 <pow+0x364>)
    2b18:	e7b8      	b.n	2a8c <pow+0x28c>
    2b1a:	2301      	movs	r3, #1
    2b1c:	4642      	mov	r2, r8
    2b1e:	9306      	str	r3, [sp, #24]
    2b20:	4b0e      	ldr	r3, [pc, #56]	; (2b5c <pow+0x35c>)
    2b22:	6053      	str	r3, [r2, #4]
    2b24:	4643      	mov	r3, r8
    2b26:	464a      	mov	r2, r9
    2b28:	609c      	str	r4, [r3, #8]
    2b2a:	60dd      	str	r5, [r3, #12]
    2b2c:	621a      	str	r2, [r3, #32]
    2b2e:	611e      	str	r6, [r3, #16]
    2b30:	615f      	str	r7, [r3, #20]
    2b32:	2400      	movs	r4, #0
    2b34:	465b      	mov	r3, fp
    2b36:	571c      	ldrsb	r4, [r3, r4]
    2b38:	2c00      	cmp	r4, #0
    2b3a:	d100      	bne.n	2b3e <pow+0x33e>
    2b3c:	e741      	b.n	29c2 <pow+0x1c2>
    2b3e:	2300      	movs	r3, #0
    2b40:	2200      	movs	r2, #0
    2b42:	0019      	movs	r1, r3
    2b44:	0010      	movs	r0, r2
    2b46:	f001 ff2f 	bl	49a8 <__aeabi_ddiv>
    2b4a:	4643      	mov	r3, r8
    2b4c:	6198      	str	r0, [r3, #24]
    2b4e:	61d9      	str	r1, [r3, #28]
    2b50:	2c02      	cmp	r4, #2
    2b52:	d100      	bne.n	2b56 <pow+0x356>
    2b54:	e730      	b.n	29b8 <pow+0x1b8>
    2b56:	e739      	b.n	29cc <pow+0x1cc>
    2b58:	20000070 	.word	0x20000070
    2b5c:	000065bc 	.word	0x000065bc
    2b60:	3ff00000 	.word	0x3ff00000
    2b64:	fff00000 	.word	0xfff00000
    2b68:	47efffff 	.word	0x47efffff
    2b6c:	3fe00000 	.word	0x3fe00000
    2b70:	c7efffff 	.word	0xc7efffff
    2b74:	7ff00000 	.word	0x7ff00000

00002b78 <__ieee754_pow>:
    2b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b7a:	4656      	mov	r6, sl
    2b7c:	464d      	mov	r5, r9
    2b7e:	4644      	mov	r4, r8
    2b80:	465f      	mov	r7, fp
    2b82:	b4f0      	push	{r4, r5, r6, r7}
    2b84:	001c      	movs	r4, r3
    2b86:	0013      	movs	r3, r2
    2b88:	0067      	lsls	r7, r4, #1
    2b8a:	b091      	sub	sp, #68	; 0x44
    2b8c:	087f      	lsrs	r7, r7, #1
    2b8e:	9300      	str	r3, [sp, #0]
    2b90:	9401      	str	r4, [sp, #4]
    2b92:	0006      	movs	r6, r0
    2b94:	000d      	movs	r5, r1
    2b96:	4680      	mov	r8, r0
    2b98:	4689      	mov	r9, r1
    2b9a:	46a2      	mov	sl, r4
    2b9c:	433b      	orrs	r3, r7
    2b9e:	d032      	beq.n	2c06 <__ieee754_pow+0x8e>
    2ba0:	4b6e      	ldr	r3, [pc, #440]	; (2d5c <__ieee754_pow+0x1e4>)
    2ba2:	006c      	lsls	r4, r5, #1
    2ba4:	0864      	lsrs	r4, r4, #1
    2ba6:	429c      	cmp	r4, r3
    2ba8:	dc29      	bgt.n	2bfe <__ieee754_pow+0x86>
    2baa:	d026      	beq.n	2bfa <__ieee754_pow+0x82>
    2bac:	429f      	cmp	r7, r3
    2bae:	dc26      	bgt.n	2bfe <__ieee754_pow+0x86>
    2bb0:	4b6a      	ldr	r3, [pc, #424]	; (2d5c <__ieee754_pow+0x1e4>)
    2bb2:	429f      	cmp	r7, r3
    2bb4:	d100      	bne.n	2bb8 <__ieee754_pow+0x40>
    2bb6:	e089      	b.n	2ccc <__ieee754_pow+0x154>
    2bb8:	2300      	movs	r3, #0
    2bba:	469b      	mov	fp, r3
    2bbc:	464b      	mov	r3, r9
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	da00      	bge.n	2bc4 <__ieee754_pow+0x4c>
    2bc2:	e087      	b.n	2cd4 <__ieee754_pow+0x15c>
    2bc4:	2a00      	cmp	r2, #0
    2bc6:	d12f      	bne.n	2c28 <__ieee754_pow+0xb0>
    2bc8:	4b64      	ldr	r3, [pc, #400]	; (2d5c <__ieee754_pow+0x1e4>)
    2bca:	429f      	cmp	r7, r3
    2bcc:	d100      	bne.n	2bd0 <__ieee754_pow+0x58>
    2bce:	e09f      	b.n	2d10 <__ieee754_pow+0x198>
    2bd0:	4b63      	ldr	r3, [pc, #396]	; (2d60 <__ieee754_pow+0x1e8>)
    2bd2:	429f      	cmp	r7, r3
    2bd4:	d05d      	beq.n	2c92 <__ieee754_pow+0x11a>
    2bd6:	2380      	movs	r3, #128	; 0x80
    2bd8:	05db      	lsls	r3, r3, #23
    2bda:	459a      	cmp	sl, r3
    2bdc:	d101      	bne.n	2be2 <__ieee754_pow+0x6a>
    2bde:	f000 fbc1 	bl	3364 <__ieee754_pow+0x7ec>
    2be2:	4b60      	ldr	r3, [pc, #384]	; (2d64 <__ieee754_pow+0x1ec>)
    2be4:	459a      	cmp	sl, r3
    2be6:	d11f      	bne.n	2c28 <__ieee754_pow+0xb0>
    2be8:	464b      	mov	r3, r9
    2bea:	2b00      	cmp	r3, #0
    2bec:	db1c      	blt.n	2c28 <__ieee754_pow+0xb0>
    2bee:	0030      	movs	r0, r6
    2bf0:	0029      	movs	r1, r5
    2bf2:	f000 fcf7 	bl	35e4 <__ieee754_sqrt>
    2bf6:	0006      	movs	r6, r0
    2bf8:	e007      	b.n	2c0a <__ieee754_pow+0x92>
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d00d      	beq.n	2c1a <__ieee754_pow+0xa2>
    2bfe:	4b5a      	ldr	r3, [pc, #360]	; (2d68 <__ieee754_pow+0x1f0>)
    2c00:	18e0      	adds	r0, r4, r3
    2c02:	4330      	orrs	r0, r6
    2c04:	d10b      	bne.n	2c1e <__ieee754_pow+0xa6>
    2c06:	2600      	movs	r6, #0
    2c08:	4955      	ldr	r1, [pc, #340]	; (2d60 <__ieee754_pow+0x1e8>)
    2c0a:	0030      	movs	r0, r6
    2c0c:	b011      	add	sp, #68	; 0x44
    2c0e:	bc3c      	pop	{r2, r3, r4, r5}
    2c10:	4690      	mov	r8, r2
    2c12:	4699      	mov	r9, r3
    2c14:	46a2      	mov	sl, r4
    2c16:	46ab      	mov	fp, r5
    2c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1a:	42a7      	cmp	r7, r4
    2c1c:	ddc8      	ble.n	2bb0 <__ieee754_pow+0x38>
    2c1e:	4853      	ldr	r0, [pc, #332]	; (2d6c <__ieee754_pow+0x1f4>)
    2c20:	f000 fde6 	bl	37f0 <nan>
    2c24:	0006      	movs	r6, r0
    2c26:	e7f0      	b.n	2c0a <__ieee754_pow+0x92>
    2c28:	0030      	movs	r0, r6
    2c2a:	0029      	movs	r1, r5
    2c2c:	f000 fdd0 	bl	37d0 <fabs>
    2c30:	4643      	mov	r3, r8
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01d      	beq.n	2c72 <__ieee754_pow+0xfa>
    2c36:	0feb      	lsrs	r3, r5, #31
    2c38:	3b01      	subs	r3, #1
    2c3a:	4698      	mov	r8, r3
    2c3c:	465b      	mov	r3, fp
    2c3e:	4642      	mov	r2, r8
    2c40:	4313      	orrs	r3, r2
    2c42:	d079      	beq.n	2d38 <__ieee754_pow+0x1c0>
    2c44:	4b4a      	ldr	r3, [pc, #296]	; (2d70 <__ieee754_pow+0x1f8>)
    2c46:	429f      	cmp	r7, r3
    2c48:	dc00      	bgt.n	2c4c <__ieee754_pow+0xd4>
    2c4a:	e09f      	b.n	2d8c <__ieee754_pow+0x214>
    2c4c:	4b49      	ldr	r3, [pc, #292]	; (2d74 <__ieee754_pow+0x1fc>)
    2c4e:	429f      	cmp	r7, r3
    2c50:	dc01      	bgt.n	2c56 <__ieee754_pow+0xde>
    2c52:	f000 fbce 	bl	33f2 <__ieee754_pow+0x87a>
    2c56:	4b48      	ldr	r3, [pc, #288]	; (2d78 <__ieee754_pow+0x200>)
    2c58:	429c      	cmp	r4, r3
    2c5a:	dd79      	ble.n	2d50 <__ieee754_pow+0x1d8>
    2c5c:	4653      	mov	r3, sl
    2c5e:	2b00      	cmp	r3, #0
    2c60:	dd79      	ble.n	2d56 <__ieee754_pow+0x1de>
    2c62:	4a46      	ldr	r2, [pc, #280]	; (2d7c <__ieee754_pow+0x204>)
    2c64:	4b46      	ldr	r3, [pc, #280]	; (2d80 <__ieee754_pow+0x208>)
    2c66:	0010      	movs	r0, r2
    2c68:	0019      	movs	r1, r3
    2c6a:	f002 fac1 	bl	51f0 <__aeabi_dmul>
    2c6e:	0006      	movs	r6, r0
    2c70:	e7cb      	b.n	2c0a <__ieee754_pow+0x92>
    2c72:	2c00      	cmp	r4, #0
    2c74:	d004      	beq.n	2c80 <__ieee754_pow+0x108>
    2c76:	4a3a      	ldr	r2, [pc, #232]	; (2d60 <__ieee754_pow+0x1e8>)
    2c78:	00ab      	lsls	r3, r5, #2
    2c7a:	089b      	lsrs	r3, r3, #2
    2c7c:	4293      	cmp	r3, r2
    2c7e:	d1da      	bne.n	2c36 <__ieee754_pow+0xbe>
    2c80:	4653      	mov	r3, sl
    2c82:	2b00      	cmp	r3, #0
    2c84:	da00      	bge.n	2c88 <__ieee754_pow+0x110>
    2c86:	e3ad      	b.n	33e4 <__ieee754_pow+0x86c>
    2c88:	464b      	mov	r3, r9
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	db0d      	blt.n	2caa <__ieee754_pow+0x132>
    2c8e:	0006      	movs	r6, r0
    2c90:	e7bb      	b.n	2c0a <__ieee754_pow+0x92>
    2c92:	4653      	mov	r3, sl
    2c94:	0029      	movs	r1, r5
    2c96:	2b00      	cmp	r3, #0
    2c98:	dab7      	bge.n	2c0a <__ieee754_pow+0x92>
    2c9a:	0032      	movs	r2, r6
    2c9c:	002b      	movs	r3, r5
    2c9e:	2000      	movs	r0, #0
    2ca0:	492f      	ldr	r1, [pc, #188]	; (2d60 <__ieee754_pow+0x1e8>)
    2ca2:	f001 fe81 	bl	49a8 <__aeabi_ddiv>
    2ca6:	0006      	movs	r6, r0
    2ca8:	e7af      	b.n	2c0a <__ieee754_pow+0x92>
    2caa:	4b2f      	ldr	r3, [pc, #188]	; (2d68 <__ieee754_pow+0x1f0>)
    2cac:	469c      	mov	ip, r3
    2cae:	465b      	mov	r3, fp
    2cb0:	4464      	add	r4, ip
    2cb2:	431c      	orrs	r4, r3
    2cb4:	d101      	bne.n	2cba <__ieee754_pow+0x142>
    2cb6:	f000 fc2b 	bl	3510 <__ieee754_pow+0x998>
    2cba:	465b      	mov	r3, fp
    2cbc:	0006      	movs	r6, r0
    2cbe:	2b01      	cmp	r3, #1
    2cc0:	d1a3      	bne.n	2c0a <__ieee754_pow+0x92>
    2cc2:	2380      	movs	r3, #128	; 0x80
    2cc4:	061b      	lsls	r3, r3, #24
    2cc6:	469c      	mov	ip, r3
    2cc8:	4461      	add	r1, ip
    2cca:	e79e      	b.n	2c0a <__ieee754_pow+0x92>
    2ccc:	2a00      	cmp	r2, #0
    2cce:	d100      	bne.n	2cd2 <__ieee754_pow+0x15a>
    2cd0:	e772      	b.n	2bb8 <__ieee754_pow+0x40>
    2cd2:	e794      	b.n	2bfe <__ieee754_pow+0x86>
    2cd4:	4b2b      	ldr	r3, [pc, #172]	; (2d84 <__ieee754_pow+0x20c>)
    2cd6:	429f      	cmp	r7, r3
    2cd8:	dc2b      	bgt.n	2d32 <__ieee754_pow+0x1ba>
    2cda:	4b27      	ldr	r3, [pc, #156]	; (2d78 <__ieee754_pow+0x200>)
    2cdc:	429f      	cmp	r7, r3
    2cde:	dc00      	bgt.n	2ce2 <__ieee754_pow+0x16a>
    2ce0:	e770      	b.n	2bc4 <__ieee754_pow+0x4c>
    2ce2:	4929      	ldr	r1, [pc, #164]	; (2d88 <__ieee754_pow+0x210>)
    2ce4:	153b      	asrs	r3, r7, #20
    2ce6:	468c      	mov	ip, r1
    2ce8:	4463      	add	r3, ip
    2cea:	2b14      	cmp	r3, #20
    2cec:	dc01      	bgt.n	2cf2 <__ieee754_pow+0x17a>
    2cee:	f000 fbf2 	bl	34d6 <__ieee754_pow+0x95e>
    2cf2:	2134      	movs	r1, #52	; 0x34
    2cf4:	1acb      	subs	r3, r1, r3
    2cf6:	9900      	ldr	r1, [sp, #0]
    2cf8:	40d9      	lsrs	r1, r3
    2cfa:	0008      	movs	r0, r1
    2cfc:	4098      	lsls	r0, r3
    2cfe:	4282      	cmp	r2, r0
    2d00:	d000      	beq.n	2d04 <__ieee754_pow+0x18c>
    2d02:	e75f      	b.n	2bc4 <__ieee754_pow+0x4c>
    2d04:	2301      	movs	r3, #1
    2d06:	4019      	ands	r1, r3
    2d08:	3301      	adds	r3, #1
    2d0a:	1a5b      	subs	r3, r3, r1
    2d0c:	469b      	mov	fp, r3
    2d0e:	e759      	b.n	2bc4 <__ieee754_pow+0x4c>
    2d10:	4b15      	ldr	r3, [pc, #84]	; (2d68 <__ieee754_pow+0x1f0>)
    2d12:	18e0      	adds	r0, r4, r3
    2d14:	4306      	orrs	r6, r0
    2d16:	d100      	bne.n	2d1a <__ieee754_pow+0x1a2>
    2d18:	e775      	b.n	2c06 <__ieee754_pow+0x8e>
    2d1a:	4b17      	ldr	r3, [pc, #92]	; (2d78 <__ieee754_pow+0x200>)
    2d1c:	429c      	cmp	r4, r3
    2d1e:	dc00      	bgt.n	2d22 <__ieee754_pow+0x1aa>
    2d20:	e351      	b.n	33c6 <__ieee754_pow+0x84e>
    2d22:	4653      	mov	r3, sl
    2d24:	2b00      	cmp	r3, #0
    2d26:	db16      	blt.n	2d56 <__ieee754_pow+0x1de>
    2d28:	9b00      	ldr	r3, [sp, #0]
    2d2a:	9c01      	ldr	r4, [sp, #4]
    2d2c:	001e      	movs	r6, r3
    2d2e:	0021      	movs	r1, r4
    2d30:	e76b      	b.n	2c0a <__ieee754_pow+0x92>
    2d32:	2302      	movs	r3, #2
    2d34:	469b      	mov	fp, r3
    2d36:	e745      	b.n	2bc4 <__ieee754_pow+0x4c>
    2d38:	0032      	movs	r2, r6
    2d3a:	002b      	movs	r3, r5
    2d3c:	0030      	movs	r0, r6
    2d3e:	0029      	movs	r1, r5
    2d40:	f002 fcd0 	bl	56e4 <__aeabi_dsub>
    2d44:	0002      	movs	r2, r0
    2d46:	000b      	movs	r3, r1
    2d48:	f001 fe2e 	bl	49a8 <__aeabi_ddiv>
    2d4c:	0006      	movs	r6, r0
    2d4e:	e75c      	b.n	2c0a <__ieee754_pow+0x92>
    2d50:	4653      	mov	r3, sl
    2d52:	2b00      	cmp	r3, #0
    2d54:	db85      	blt.n	2c62 <__ieee754_pow+0xea>
    2d56:	2600      	movs	r6, #0
    2d58:	2100      	movs	r1, #0
    2d5a:	e756      	b.n	2c0a <__ieee754_pow+0x92>
    2d5c:	7ff00000 	.word	0x7ff00000
    2d60:	3ff00000 	.word	0x3ff00000
    2d64:	3fe00000 	.word	0x3fe00000
    2d68:	c0100000 	.word	0xc0100000
    2d6c:	000065c0 	.word	0x000065c0
    2d70:	41e00000 	.word	0x41e00000
    2d74:	43f00000 	.word	0x43f00000
    2d78:	3fefffff 	.word	0x3fefffff
    2d7c:	8800759c 	.word	0x8800759c
    2d80:	7e37e43c 	.word	0x7e37e43c
    2d84:	433fffff 	.word	0x433fffff
    2d88:	fffffc01 	.word	0xfffffc01
    2d8c:	4be8      	ldr	r3, [pc, #928]	; (3130 <__ieee754_pow+0x5b8>)
    2d8e:	2200      	movs	r2, #0
    2d90:	429c      	cmp	r4, r3
    2d92:	dc06      	bgt.n	2da2 <__ieee754_pow+0x22a>
    2d94:	2200      	movs	r2, #0
    2d96:	4be7      	ldr	r3, [pc, #924]	; (3134 <__ieee754_pow+0x5bc>)
    2d98:	f002 fa2a 	bl	51f0 <__aeabi_dmul>
    2d9c:	2235      	movs	r2, #53	; 0x35
    2d9e:	000c      	movs	r4, r1
    2da0:	4252      	negs	r2, r2
    2da2:	4de5      	ldr	r5, [pc, #916]	; (3138 <__ieee754_pow+0x5c0>)
    2da4:	1523      	asrs	r3, r4, #20
    2da6:	46ac      	mov	ip, r5
    2da8:	4463      	add	r3, ip
    2daa:	4699      	mov	r9, r3
    2dac:	0324      	lsls	r4, r4, #12
    2dae:	4de3      	ldr	r5, [pc, #908]	; (313c <__ieee754_pow+0x5c4>)
    2db0:	4be3      	ldr	r3, [pc, #908]	; (3140 <__ieee754_pow+0x5c8>)
    2db2:	0b24      	lsrs	r4, r4, #12
    2db4:	4491      	add	r9, r2
    2db6:	4325      	orrs	r5, r4
    2db8:	429c      	cmp	r4, r3
    2dba:	dd09      	ble.n	2dd0 <__ieee754_pow+0x258>
    2dbc:	4be1      	ldr	r3, [pc, #900]	; (3144 <__ieee754_pow+0x5cc>)
    2dbe:	429c      	cmp	r4, r3
    2dc0:	dc00      	bgt.n	2dc4 <__ieee754_pow+0x24c>
    2dc2:	e3a9      	b.n	3518 <__ieee754_pow+0x9a0>
    2dc4:	2301      	movs	r3, #1
    2dc6:	469c      	mov	ip, r3
    2dc8:	4bdf      	ldr	r3, [pc, #892]	; (3148 <__ieee754_pow+0x5d0>)
    2dca:	44e1      	add	r9, ip
    2dcc:	469c      	mov	ip, r3
    2dce:	4465      	add	r5, ip
    2dd0:	2300      	movs	r3, #0
    2dd2:	2400      	movs	r4, #0
    2dd4:	2200      	movs	r2, #0
    2dd6:	9308      	str	r3, [sp, #32]
    2dd8:	9409      	str	r4, [sp, #36]	; 0x24
    2dda:	930c      	str	r3, [sp, #48]	; 0x30
    2ddc:	940d      	str	r4, [sp, #52]	; 0x34
    2dde:	2400      	movs	r4, #0
    2de0:	4bd6      	ldr	r3, [pc, #856]	; (313c <__ieee754_pow+0x5c4>)
    2de2:	9206      	str	r2, [sp, #24]
    2de4:	9307      	str	r3, [sp, #28]
    2de6:	9a06      	ldr	r2, [sp, #24]
    2de8:	9b07      	ldr	r3, [sp, #28]
    2dea:	0029      	movs	r1, r5
    2dec:	900a      	str	r0, [sp, #40]	; 0x28
    2dee:	910b      	str	r1, [sp, #44]	; 0x2c
    2df0:	f002 fc78 	bl	56e4 <__aeabi_dsub>
    2df4:	9a06      	ldr	r2, [sp, #24]
    2df6:	9b07      	ldr	r3, [sp, #28]
    2df8:	0006      	movs	r6, r0
    2dfa:	000f      	movs	r7, r1
    2dfc:	980a      	ldr	r0, [sp, #40]	; 0x28
    2dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e00:	f001 faa6 	bl	4350 <__aeabi_dadd>
    2e04:	0002      	movs	r2, r0
    2e06:	000b      	movs	r3, r1
    2e08:	2000      	movs	r0, #0
    2e0a:	49cc      	ldr	r1, [pc, #816]	; (313c <__ieee754_pow+0x5c4>)
    2e0c:	f001 fdcc 	bl	49a8 <__aeabi_ddiv>
    2e10:	000a      	movs	r2, r1
    2e12:	0001      	movs	r1, r0
    2e14:	0013      	movs	r3, r2
    2e16:	910e      	str	r1, [sp, #56]	; 0x38
    2e18:	920f      	str	r2, [sp, #60]	; 0x3c
    2e1a:	0002      	movs	r2, r0
    2e1c:	0039      	movs	r1, r7
    2e1e:	0030      	movs	r0, r6
    2e20:	f002 f9e6 	bl	51f0 <__aeabi_dmul>
    2e24:	000a      	movs	r2, r1
    2e26:	0001      	movs	r1, r0
    2e28:	2080      	movs	r0, #128	; 0x80
    2e2a:	9104      	str	r1, [sp, #16]
    2e2c:	9205      	str	r2, [sp, #20]
    2e2e:	0013      	movs	r3, r2
    2e30:	2200      	movs	r2, #0
    2e32:	2180      	movs	r1, #128	; 0x80
    2e34:	0300      	lsls	r0, r0, #12
    2e36:	4684      	mov	ip, r0
    2e38:	9202      	str	r2, [sp, #8]
    2e3a:	9303      	str	r3, [sp, #12]
    2e3c:	2200      	movs	r2, #0
    2e3e:	0589      	lsls	r1, r1, #22
    2e40:	106d      	asrs	r5, r5, #1
    2e42:	430d      	orrs	r5, r1
    2e44:	4465      	add	r5, ip
    2e46:	192b      	adds	r3, r5, r4
    2e48:	9802      	ldr	r0, [sp, #8]
    2e4a:	9903      	ldr	r1, [sp, #12]
    2e4c:	0014      	movs	r4, r2
    2e4e:	001d      	movs	r5, r3
    2e50:	f002 f9ce 	bl	51f0 <__aeabi_dmul>
    2e54:	0002      	movs	r2, r0
    2e56:	000b      	movs	r3, r1
    2e58:	0030      	movs	r0, r6
    2e5a:	0039      	movs	r1, r7
    2e5c:	f002 fc42 	bl	56e4 <__aeabi_dsub>
    2e60:	9a06      	ldr	r2, [sp, #24]
    2e62:	9b07      	ldr	r3, [sp, #28]
    2e64:	0006      	movs	r6, r0
    2e66:	000f      	movs	r7, r1
    2e68:	0020      	movs	r0, r4
    2e6a:	0029      	movs	r1, r5
    2e6c:	f002 fc3a 	bl	56e4 <__aeabi_dsub>
    2e70:	0002      	movs	r2, r0
    2e72:	000b      	movs	r3, r1
    2e74:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e76:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e78:	f002 fc34 	bl	56e4 <__aeabi_dsub>
    2e7c:	9a02      	ldr	r2, [sp, #8]
    2e7e:	9b03      	ldr	r3, [sp, #12]
    2e80:	f002 f9b6 	bl	51f0 <__aeabi_dmul>
    2e84:	0002      	movs	r2, r0
    2e86:	000b      	movs	r3, r1
    2e88:	0030      	movs	r0, r6
    2e8a:	0039      	movs	r1, r7
    2e8c:	f002 fc2a 	bl	56e4 <__aeabi_dsub>
    2e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2e94:	f002 f9ac 	bl	51f0 <__aeabi_dmul>
    2e98:	9d04      	ldr	r5, [sp, #16]
    2e9a:	9e05      	ldr	r6, [sp, #20]
    2e9c:	9006      	str	r0, [sp, #24]
    2e9e:	9107      	str	r1, [sp, #28]
    2ea0:	002a      	movs	r2, r5
    2ea2:	0033      	movs	r3, r6
    2ea4:	0028      	movs	r0, r5
    2ea6:	0031      	movs	r1, r6
    2ea8:	f002 f9a2 	bl	51f0 <__aeabi_dmul>
    2eac:	0006      	movs	r6, r0
    2eae:	000f      	movs	r7, r1
    2eb0:	4aa6      	ldr	r2, [pc, #664]	; (314c <__ieee754_pow+0x5d4>)
    2eb2:	4ba7      	ldr	r3, [pc, #668]	; (3150 <__ieee754_pow+0x5d8>)
    2eb4:	f002 f99c 	bl	51f0 <__aeabi_dmul>
    2eb8:	4aa6      	ldr	r2, [pc, #664]	; (3154 <__ieee754_pow+0x5dc>)
    2eba:	4ba7      	ldr	r3, [pc, #668]	; (3158 <__ieee754_pow+0x5e0>)
    2ebc:	f001 fa48 	bl	4350 <__aeabi_dadd>
    2ec0:	0032      	movs	r2, r6
    2ec2:	003b      	movs	r3, r7
    2ec4:	f002 f994 	bl	51f0 <__aeabi_dmul>
    2ec8:	4aa4      	ldr	r2, [pc, #656]	; (315c <__ieee754_pow+0x5e4>)
    2eca:	4ba5      	ldr	r3, [pc, #660]	; (3160 <__ieee754_pow+0x5e8>)
    2ecc:	f001 fa40 	bl	4350 <__aeabi_dadd>
    2ed0:	0032      	movs	r2, r6
    2ed2:	003b      	movs	r3, r7
    2ed4:	f002 f98c 	bl	51f0 <__aeabi_dmul>
    2ed8:	4aa2      	ldr	r2, [pc, #648]	; (3164 <__ieee754_pow+0x5ec>)
    2eda:	4ba3      	ldr	r3, [pc, #652]	; (3168 <__ieee754_pow+0x5f0>)
    2edc:	f001 fa38 	bl	4350 <__aeabi_dadd>
    2ee0:	0032      	movs	r2, r6
    2ee2:	003b      	movs	r3, r7
    2ee4:	f002 f984 	bl	51f0 <__aeabi_dmul>
    2ee8:	4aa0      	ldr	r2, [pc, #640]	; (316c <__ieee754_pow+0x5f4>)
    2eea:	4ba1      	ldr	r3, [pc, #644]	; (3170 <__ieee754_pow+0x5f8>)
    2eec:	f001 fa30 	bl	4350 <__aeabi_dadd>
    2ef0:	0032      	movs	r2, r6
    2ef2:	003b      	movs	r3, r7
    2ef4:	f002 f97c 	bl	51f0 <__aeabi_dmul>
    2ef8:	4a9e      	ldr	r2, [pc, #632]	; (3174 <__ieee754_pow+0x5fc>)
    2efa:	4b9f      	ldr	r3, [pc, #636]	; (3178 <__ieee754_pow+0x600>)
    2efc:	f001 fa28 	bl	4350 <__aeabi_dadd>
    2f00:	0032      	movs	r2, r6
    2f02:	0004      	movs	r4, r0
    2f04:	000d      	movs	r5, r1
    2f06:	003b      	movs	r3, r7
    2f08:	0030      	movs	r0, r6
    2f0a:	0039      	movs	r1, r7
    2f0c:	f002 f970 	bl	51f0 <__aeabi_dmul>
    2f10:	0002      	movs	r2, r0
    2f12:	000b      	movs	r3, r1
    2f14:	0020      	movs	r0, r4
    2f16:	0029      	movs	r1, r5
    2f18:	f002 f96a 	bl	51f0 <__aeabi_dmul>
    2f1c:	9e02      	ldr	r6, [sp, #8]
    2f1e:	9f03      	ldr	r7, [sp, #12]
    2f20:	0004      	movs	r4, r0
    2f22:	000d      	movs	r5, r1
    2f24:	9804      	ldr	r0, [sp, #16]
    2f26:	9905      	ldr	r1, [sp, #20]
    2f28:	0032      	movs	r2, r6
    2f2a:	003b      	movs	r3, r7
    2f2c:	f001 fa10 	bl	4350 <__aeabi_dadd>
    2f30:	9a06      	ldr	r2, [sp, #24]
    2f32:	9b07      	ldr	r3, [sp, #28]
    2f34:	f002 f95c 	bl	51f0 <__aeabi_dmul>
    2f38:	0022      	movs	r2, r4
    2f3a:	002b      	movs	r3, r5
    2f3c:	f001 fa08 	bl	4350 <__aeabi_dadd>
    2f40:	0032      	movs	r2, r6
    2f42:	900a      	str	r0, [sp, #40]	; 0x28
    2f44:	910b      	str	r1, [sp, #44]	; 0x2c
    2f46:	003b      	movs	r3, r7
    2f48:	0030      	movs	r0, r6
    2f4a:	0039      	movs	r1, r7
    2f4c:	9602      	str	r6, [sp, #8]
    2f4e:	9703      	str	r7, [sp, #12]
    2f50:	f002 f94e 	bl	51f0 <__aeabi_dmul>
    2f54:	2200      	movs	r2, #0
    2f56:	4b89      	ldr	r3, [pc, #548]	; (317c <__ieee754_pow+0x604>)
    2f58:	0004      	movs	r4, r0
    2f5a:	000d      	movs	r5, r1
    2f5c:	f001 f9f8 	bl	4350 <__aeabi_dadd>
    2f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f64:	f001 f9f4 	bl	4350 <__aeabi_dadd>
    2f68:	2600      	movs	r6, #0
    2f6a:	000f      	movs	r7, r1
    2f6c:	0032      	movs	r2, r6
    2f6e:	000b      	movs	r3, r1
    2f70:	9802      	ldr	r0, [sp, #8]
    2f72:	9903      	ldr	r1, [sp, #12]
    2f74:	f002 f93c 	bl	51f0 <__aeabi_dmul>
    2f78:	2200      	movs	r2, #0
    2f7a:	9002      	str	r0, [sp, #8]
    2f7c:	9103      	str	r1, [sp, #12]
    2f7e:	4b7f      	ldr	r3, [pc, #508]	; (317c <__ieee754_pow+0x604>)
    2f80:	0030      	movs	r0, r6
    2f82:	0039      	movs	r1, r7
    2f84:	f002 fbae 	bl	56e4 <__aeabi_dsub>
    2f88:	0022      	movs	r2, r4
    2f8a:	002b      	movs	r3, r5
    2f8c:	f002 fbaa 	bl	56e4 <__aeabi_dsub>
    2f90:	0002      	movs	r2, r0
    2f92:	000b      	movs	r3, r1
    2f94:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f98:	f002 fba4 	bl	56e4 <__aeabi_dsub>
    2f9c:	9a04      	ldr	r2, [sp, #16]
    2f9e:	9b05      	ldr	r3, [sp, #20]
    2fa0:	f002 f926 	bl	51f0 <__aeabi_dmul>
    2fa4:	0032      	movs	r2, r6
    2fa6:	0004      	movs	r4, r0
    2fa8:	000d      	movs	r5, r1
    2faa:	9806      	ldr	r0, [sp, #24]
    2fac:	9907      	ldr	r1, [sp, #28]
    2fae:	003b      	movs	r3, r7
    2fb0:	f002 f91e 	bl	51f0 <__aeabi_dmul>
    2fb4:	0002      	movs	r2, r0
    2fb6:	000b      	movs	r3, r1
    2fb8:	0020      	movs	r0, r4
    2fba:	0029      	movs	r1, r5
    2fbc:	f001 f9c8 	bl	4350 <__aeabi_dadd>
    2fc0:	0004      	movs	r4, r0
    2fc2:	000d      	movs	r5, r1
    2fc4:	0002      	movs	r2, r0
    2fc6:	000b      	movs	r3, r1
    2fc8:	9802      	ldr	r0, [sp, #8]
    2fca:	9903      	ldr	r1, [sp, #12]
    2fcc:	f001 f9c0 	bl	4350 <__aeabi_dadd>
    2fd0:	2600      	movs	r6, #0
    2fd2:	22e0      	movs	r2, #224	; 0xe0
    2fd4:	4b6a      	ldr	r3, [pc, #424]	; (3180 <__ieee754_pow+0x608>)
    2fd6:	0612      	lsls	r2, r2, #24
    2fd8:	0030      	movs	r0, r6
    2fda:	000f      	movs	r7, r1
    2fdc:	f002 f908 	bl	51f0 <__aeabi_dmul>
    2fe0:	9a02      	ldr	r2, [sp, #8]
    2fe2:	9b03      	ldr	r3, [sp, #12]
    2fe4:	9004      	str	r0, [sp, #16]
    2fe6:	9105      	str	r1, [sp, #20]
    2fe8:	0030      	movs	r0, r6
    2fea:	0039      	movs	r1, r7
    2fec:	f002 fb7a 	bl	56e4 <__aeabi_dsub>
    2ff0:	0002      	movs	r2, r0
    2ff2:	000b      	movs	r3, r1
    2ff4:	0020      	movs	r0, r4
    2ff6:	0029      	movs	r1, r5
    2ff8:	f002 fb74 	bl	56e4 <__aeabi_dsub>
    2ffc:	4a61      	ldr	r2, [pc, #388]	; (3184 <__ieee754_pow+0x60c>)
    2ffe:	4b60      	ldr	r3, [pc, #384]	; (3180 <__ieee754_pow+0x608>)
    3000:	f002 f8f6 	bl	51f0 <__aeabi_dmul>
    3004:	4a60      	ldr	r2, [pc, #384]	; (3188 <__ieee754_pow+0x610>)
    3006:	0004      	movs	r4, r0
    3008:	000d      	movs	r5, r1
    300a:	4b60      	ldr	r3, [pc, #384]	; (318c <__ieee754_pow+0x614>)
    300c:	0030      	movs	r0, r6
    300e:	0039      	movs	r1, r7
    3010:	f002 f8ee 	bl	51f0 <__aeabi_dmul>
    3014:	0002      	movs	r2, r0
    3016:	000b      	movs	r3, r1
    3018:	0020      	movs	r0, r4
    301a:	0029      	movs	r1, r5
    301c:	f001 f998 	bl	4350 <__aeabi_dadd>
    3020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3024:	f001 f994 	bl	4350 <__aeabi_dadd>
    3028:	0006      	movs	r6, r0
    302a:	4648      	mov	r0, r9
    302c:	000f      	movs	r7, r1
    302e:	f002 ff03 	bl	5e38 <__aeabi_i2d>
    3032:	0004      	movs	r4, r0
    3034:	000d      	movs	r5, r1
    3036:	9804      	ldr	r0, [sp, #16]
    3038:	9905      	ldr	r1, [sp, #20]
    303a:	0032      	movs	r2, r6
    303c:	003b      	movs	r3, r7
    303e:	f001 f987 	bl	4350 <__aeabi_dadd>
    3042:	9a08      	ldr	r2, [sp, #32]
    3044:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3046:	f001 f983 	bl	4350 <__aeabi_dadd>
    304a:	0022      	movs	r2, r4
    304c:	002b      	movs	r3, r5
    304e:	f001 f97f 	bl	4350 <__aeabi_dadd>
    3052:	2000      	movs	r0, #0
    3054:	0022      	movs	r2, r4
    3056:	002b      	movs	r3, r5
    3058:	9002      	str	r0, [sp, #8]
    305a:	9103      	str	r1, [sp, #12]
    305c:	f002 fb42 	bl	56e4 <__aeabi_dsub>
    3060:	9a08      	ldr	r2, [sp, #32]
    3062:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3064:	f002 fb3e 	bl	56e4 <__aeabi_dsub>
    3068:	9a04      	ldr	r2, [sp, #16]
    306a:	9b05      	ldr	r3, [sp, #20]
    306c:	f002 fb3a 	bl	56e4 <__aeabi_dsub>
    3070:	0002      	movs	r2, r0
    3072:	000b      	movs	r3, r1
    3074:	0030      	movs	r0, r6
    3076:	0039      	movs	r1, r7
    3078:	f002 fb34 	bl	56e4 <__aeabi_dsub>
    307c:	9004      	str	r0, [sp, #16]
    307e:	9105      	str	r1, [sp, #20]
    3080:	465b      	mov	r3, fp
    3082:	4642      	mov	r2, r8
    3084:	3b01      	subs	r3, #1
    3086:	4313      	orrs	r3, r2
    3088:	d100      	bne.n	308c <__ieee754_pow+0x514>
    308a:	e197      	b.n	33bc <__ieee754_pow+0x844>
    308c:	2300      	movs	r3, #0
    308e:	4c2b      	ldr	r4, [pc, #172]	; (313c <__ieee754_pow+0x5c4>)
    3090:	9306      	str	r3, [sp, #24]
    3092:	9407      	str	r4, [sp, #28]
    3094:	9800      	ldr	r0, [sp, #0]
    3096:	9901      	ldr	r1, [sp, #4]
    3098:	2600      	movs	r6, #0
    309a:	000b      	movs	r3, r1
    309c:	0032      	movs	r2, r6
    309e:	000f      	movs	r7, r1
    30a0:	f002 fb20 	bl	56e4 <__aeabi_dsub>
    30a4:	9a02      	ldr	r2, [sp, #8]
    30a6:	9b03      	ldr	r3, [sp, #12]
    30a8:	f002 f8a2 	bl	51f0 <__aeabi_dmul>
    30ac:	9a00      	ldr	r2, [sp, #0]
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	0004      	movs	r4, r0
    30b2:	000d      	movs	r5, r1
    30b4:	9804      	ldr	r0, [sp, #16]
    30b6:	9905      	ldr	r1, [sp, #20]
    30b8:	f002 f89a 	bl	51f0 <__aeabi_dmul>
    30bc:	0002      	movs	r2, r0
    30be:	000b      	movs	r3, r1
    30c0:	0020      	movs	r0, r4
    30c2:	0029      	movs	r1, r5
    30c4:	f001 f944 	bl	4350 <__aeabi_dadd>
    30c8:	0004      	movs	r4, r0
    30ca:	000d      	movs	r5, r1
    30cc:	9802      	ldr	r0, [sp, #8]
    30ce:	9903      	ldr	r1, [sp, #12]
    30d0:	003b      	movs	r3, r7
    30d2:	0032      	movs	r2, r6
    30d4:	9404      	str	r4, [sp, #16]
    30d6:	9505      	str	r5, [sp, #20]
    30d8:	f002 f88a 	bl	51f0 <__aeabi_dmul>
    30dc:	9000      	str	r0, [sp, #0]
    30de:	9101      	str	r1, [sp, #4]
    30e0:	000b      	movs	r3, r1
    30e2:	0002      	movs	r2, r0
    30e4:	0029      	movs	r1, r5
    30e6:	0020      	movs	r0, r4
    30e8:	f001 f932 	bl	4350 <__aeabi_dadd>
    30ec:	4b28      	ldr	r3, [pc, #160]	; (3190 <__ieee754_pow+0x618>)
    30ee:	4681      	mov	r9, r0
    30f0:	1e0f      	subs	r7, r1, #0
    30f2:	468a      	mov	sl, r1
    30f4:	429f      	cmp	r7, r3
    30f6:	dc00      	bgt.n	30fa <__ieee754_pow+0x582>
    30f8:	e13c      	b.n	3374 <__ieee754_pow+0x7fc>
    30fa:	4b26      	ldr	r3, [pc, #152]	; (3194 <__ieee754_pow+0x61c>)
    30fc:	18cb      	adds	r3, r1, r3
    30fe:	4303      	orrs	r3, r0
    3100:	d000      	beq.n	3104 <__ieee754_pow+0x58c>
    3102:	e1db      	b.n	34bc <__ieee754_pow+0x944>
    3104:	9804      	ldr	r0, [sp, #16]
    3106:	9905      	ldr	r1, [sp, #20]
    3108:	4a23      	ldr	r2, [pc, #140]	; (3198 <__ieee754_pow+0x620>)
    310a:	4b24      	ldr	r3, [pc, #144]	; (319c <__ieee754_pow+0x624>)
    310c:	f001 f920 	bl	4350 <__aeabi_dadd>
    3110:	9a00      	ldr	r2, [sp, #0]
    3112:	9b01      	ldr	r3, [sp, #4]
    3114:	0004      	movs	r4, r0
    3116:	000d      	movs	r5, r1
    3118:	4648      	mov	r0, r9
    311a:	0039      	movs	r1, r7
    311c:	f002 fae2 	bl	56e4 <__aeabi_dsub>
    3120:	0002      	movs	r2, r0
    3122:	000b      	movs	r3, r1
    3124:	0020      	movs	r0, r4
    3126:	0029      	movs	r1, r5
    3128:	f000 fcae 	bl	3a88 <__aeabi_dcmpgt>
    312c:	003e      	movs	r6, r7
    312e:	e037      	b.n	31a0 <__ieee754_pow+0x628>
    3130:	000fffff 	.word	0x000fffff
    3134:	43400000 	.word	0x43400000
    3138:	fffffc01 	.word	0xfffffc01
    313c:	3ff00000 	.word	0x3ff00000
    3140:	0003988e 	.word	0x0003988e
    3144:	000bb679 	.word	0x000bb679
    3148:	fff00000 	.word	0xfff00000
    314c:	4a454eef 	.word	0x4a454eef
    3150:	3fca7e28 	.word	0x3fca7e28
    3154:	93c9db65 	.word	0x93c9db65
    3158:	3fcd864a 	.word	0x3fcd864a
    315c:	a91d4101 	.word	0xa91d4101
    3160:	3fd17460 	.word	0x3fd17460
    3164:	518f264d 	.word	0x518f264d
    3168:	3fd55555 	.word	0x3fd55555
    316c:	db6fabff 	.word	0xdb6fabff
    3170:	3fdb6db6 	.word	0x3fdb6db6
    3174:	33333303 	.word	0x33333303
    3178:	3fe33333 	.word	0x3fe33333
    317c:	40080000 	.word	0x40080000
    3180:	3feec709 	.word	0x3feec709
    3184:	dc3a03fd 	.word	0xdc3a03fd
    3188:	145b01f5 	.word	0x145b01f5
    318c:	be3e2fe0 	.word	0xbe3e2fe0
    3190:	408fffff 	.word	0x408fffff
    3194:	bf700000 	.word	0xbf700000
    3198:	652b82fe 	.word	0x652b82fe
    319c:	3c971547 	.word	0x3c971547
    31a0:	2800      	cmp	r0, #0
    31a2:	d000      	beq.n	31a6 <__ieee754_pow+0x62e>
    31a4:	e18a      	b.n	34bc <__ieee754_pow+0x944>
    31a6:	2280      	movs	r2, #128	; 0x80
    31a8:	4be7      	ldr	r3, [pc, #924]	; (3548 <__ieee754_pow+0x9d0>)
    31aa:	0352      	lsls	r2, r2, #13
    31ac:	469c      	mov	ip, r3
    31ae:	0013      	movs	r3, r2
    31b0:	1536      	asrs	r6, r6, #20
    31b2:	4466      	add	r6, ip
    31b4:	4133      	asrs	r3, r6
    31b6:	49e5      	ldr	r1, [pc, #916]	; (354c <__ieee754_pow+0x9d4>)
    31b8:	19db      	adds	r3, r3, r7
    31ba:	005e      	lsls	r6, r3, #1
    31bc:	001c      	movs	r4, r3
    31be:	031b      	lsls	r3, r3, #12
    31c0:	468c      	mov	ip, r1
    31c2:	0b1b      	lsrs	r3, r3, #12
    31c4:	4313      	orrs	r3, r2
    31c6:	2214      	movs	r2, #20
    31c8:	0d76      	lsrs	r6, r6, #21
    31ca:	4fe1      	ldr	r7, [pc, #900]	; (3550 <__ieee754_pow+0x9d8>)
    31cc:	4466      	add	r6, ip
    31ce:	4137      	asrs	r7, r6
    31d0:	1b96      	subs	r6, r2, r6
    31d2:	4133      	asrs	r3, r6
    31d4:	4698      	mov	r8, r3
    31d6:	4653      	mov	r3, sl
    31d8:	43bc      	bics	r4, r7
    31da:	2000      	movs	r0, #0
    31dc:	0021      	movs	r1, r4
    31de:	2b00      	cmp	r3, #0
    31e0:	da00      	bge.n	31e4 <__ieee754_pow+0x66c>
    31e2:	e1a9      	b.n	3538 <__ieee754_pow+0x9c0>
    31e4:	0002      	movs	r2, r0
    31e6:	000b      	movs	r3, r1
    31e8:	9800      	ldr	r0, [sp, #0]
    31ea:	9901      	ldr	r1, [sp, #4]
    31ec:	f002 fa7a 	bl	56e4 <__aeabi_dsub>
    31f0:	000b      	movs	r3, r1
    31f2:	9000      	str	r0, [sp, #0]
    31f4:	9101      	str	r1, [sp, #4]
    31f6:	0002      	movs	r2, r0
    31f8:	9804      	ldr	r0, [sp, #16]
    31fa:	9905      	ldr	r1, [sp, #20]
    31fc:	f001 f8a8 	bl	4350 <__aeabi_dadd>
    3200:	4643      	mov	r3, r8
    3202:	051b      	lsls	r3, r3, #20
    3204:	4699      	mov	r9, r3
    3206:	2000      	movs	r0, #0
    3208:	2200      	movs	r2, #0
    320a:	4bd2      	ldr	r3, [pc, #840]	; (3554 <__ieee754_pow+0x9dc>)
    320c:	0006      	movs	r6, r0
    320e:	000f      	movs	r7, r1
    3210:	f001 ffee 	bl	51f0 <__aeabi_dmul>
    3214:	9a00      	ldr	r2, [sp, #0]
    3216:	9b01      	ldr	r3, [sp, #4]
    3218:	9002      	str	r0, [sp, #8]
    321a:	9103      	str	r1, [sp, #12]
    321c:	0030      	movs	r0, r6
    321e:	0039      	movs	r1, r7
    3220:	f002 fa60 	bl	56e4 <__aeabi_dsub>
    3224:	0002      	movs	r2, r0
    3226:	000b      	movs	r3, r1
    3228:	9804      	ldr	r0, [sp, #16]
    322a:	9905      	ldr	r1, [sp, #20]
    322c:	f002 fa5a 	bl	56e4 <__aeabi_dsub>
    3230:	4ac9      	ldr	r2, [pc, #804]	; (3558 <__ieee754_pow+0x9e0>)
    3232:	4bca      	ldr	r3, [pc, #808]	; (355c <__ieee754_pow+0x9e4>)
    3234:	f001 ffdc 	bl	51f0 <__aeabi_dmul>
    3238:	4ac9      	ldr	r2, [pc, #804]	; (3560 <__ieee754_pow+0x9e8>)
    323a:	0004      	movs	r4, r0
    323c:	000d      	movs	r5, r1
    323e:	4bc9      	ldr	r3, [pc, #804]	; (3564 <__ieee754_pow+0x9ec>)
    3240:	0030      	movs	r0, r6
    3242:	0039      	movs	r1, r7
    3244:	f001 ffd4 	bl	51f0 <__aeabi_dmul>
    3248:	0002      	movs	r2, r0
    324a:	000b      	movs	r3, r1
    324c:	0020      	movs	r0, r4
    324e:	0029      	movs	r1, r5
    3250:	f001 f87e 	bl	4350 <__aeabi_dadd>
    3254:	0004      	movs	r4, r0
    3256:	000d      	movs	r5, r1
    3258:	0002      	movs	r2, r0
    325a:	000b      	movs	r3, r1
    325c:	9802      	ldr	r0, [sp, #8]
    325e:	9903      	ldr	r1, [sp, #12]
    3260:	f001 f876 	bl	4350 <__aeabi_dadd>
    3264:	9a02      	ldr	r2, [sp, #8]
    3266:	9b03      	ldr	r3, [sp, #12]
    3268:	0006      	movs	r6, r0
    326a:	000f      	movs	r7, r1
    326c:	f002 fa3a 	bl	56e4 <__aeabi_dsub>
    3270:	0002      	movs	r2, r0
    3272:	000b      	movs	r3, r1
    3274:	0020      	movs	r0, r4
    3276:	0029      	movs	r1, r5
    3278:	f002 fa34 	bl	56e4 <__aeabi_dsub>
    327c:	0032      	movs	r2, r6
    327e:	9000      	str	r0, [sp, #0]
    3280:	9101      	str	r1, [sp, #4]
    3282:	003b      	movs	r3, r7
    3284:	0030      	movs	r0, r6
    3286:	0039      	movs	r1, r7
    3288:	f001 ffb2 	bl	51f0 <__aeabi_dmul>
    328c:	0004      	movs	r4, r0
    328e:	000d      	movs	r5, r1
    3290:	4ab5      	ldr	r2, [pc, #724]	; (3568 <__ieee754_pow+0x9f0>)
    3292:	4bb6      	ldr	r3, [pc, #728]	; (356c <__ieee754_pow+0x9f4>)
    3294:	f001 ffac 	bl	51f0 <__aeabi_dmul>
    3298:	4ab5      	ldr	r2, [pc, #724]	; (3570 <__ieee754_pow+0x9f8>)
    329a:	4bb6      	ldr	r3, [pc, #728]	; (3574 <__ieee754_pow+0x9fc>)
    329c:	f002 fa22 	bl	56e4 <__aeabi_dsub>
    32a0:	0022      	movs	r2, r4
    32a2:	002b      	movs	r3, r5
    32a4:	f001 ffa4 	bl	51f0 <__aeabi_dmul>
    32a8:	4ab3      	ldr	r2, [pc, #716]	; (3578 <__ieee754_pow+0xa00>)
    32aa:	4bb4      	ldr	r3, [pc, #720]	; (357c <__ieee754_pow+0xa04>)
    32ac:	f001 f850 	bl	4350 <__aeabi_dadd>
    32b0:	0022      	movs	r2, r4
    32b2:	002b      	movs	r3, r5
    32b4:	f001 ff9c 	bl	51f0 <__aeabi_dmul>
    32b8:	4ab1      	ldr	r2, [pc, #708]	; (3580 <__ieee754_pow+0xa08>)
    32ba:	4bb2      	ldr	r3, [pc, #712]	; (3584 <__ieee754_pow+0xa0c>)
    32bc:	f002 fa12 	bl	56e4 <__aeabi_dsub>
    32c0:	0022      	movs	r2, r4
    32c2:	002b      	movs	r3, r5
    32c4:	f001 ff94 	bl	51f0 <__aeabi_dmul>
    32c8:	4aaf      	ldr	r2, [pc, #700]	; (3588 <__ieee754_pow+0xa10>)
    32ca:	4bb0      	ldr	r3, [pc, #704]	; (358c <__ieee754_pow+0xa14>)
    32cc:	f001 f840 	bl	4350 <__aeabi_dadd>
    32d0:	0022      	movs	r2, r4
    32d2:	002b      	movs	r3, r5
    32d4:	f001 ff8c 	bl	51f0 <__aeabi_dmul>
    32d8:	0002      	movs	r2, r0
    32da:	000b      	movs	r3, r1
    32dc:	0030      	movs	r0, r6
    32de:	0039      	movs	r1, r7
    32e0:	f002 fa00 	bl	56e4 <__aeabi_dsub>
    32e4:	0004      	movs	r4, r0
    32e6:	000d      	movs	r5, r1
    32e8:	0002      	movs	r2, r0
    32ea:	000b      	movs	r3, r1
    32ec:	0030      	movs	r0, r6
    32ee:	0039      	movs	r1, r7
    32f0:	f001 ff7e 	bl	51f0 <__aeabi_dmul>
    32f4:	2380      	movs	r3, #128	; 0x80
    32f6:	9002      	str	r0, [sp, #8]
    32f8:	9103      	str	r1, [sp, #12]
    32fa:	2200      	movs	r2, #0
    32fc:	05db      	lsls	r3, r3, #23
    32fe:	0020      	movs	r0, r4
    3300:	0029      	movs	r1, r5
    3302:	f002 f9ef 	bl	56e4 <__aeabi_dsub>
    3306:	0002      	movs	r2, r0
    3308:	000b      	movs	r3, r1
    330a:	9802      	ldr	r0, [sp, #8]
    330c:	9903      	ldr	r1, [sp, #12]
    330e:	f001 fb4b 	bl	49a8 <__aeabi_ddiv>
    3312:	9a00      	ldr	r2, [sp, #0]
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	0004      	movs	r4, r0
    3318:	000d      	movs	r5, r1
    331a:	0030      	movs	r0, r6
    331c:	0039      	movs	r1, r7
    331e:	f001 ff67 	bl	51f0 <__aeabi_dmul>
    3322:	9a00      	ldr	r2, [sp, #0]
    3324:	9b01      	ldr	r3, [sp, #4]
    3326:	f001 f813 	bl	4350 <__aeabi_dadd>
    332a:	0002      	movs	r2, r0
    332c:	000b      	movs	r3, r1
    332e:	0020      	movs	r0, r4
    3330:	0029      	movs	r1, r5
    3332:	f002 f9d7 	bl	56e4 <__aeabi_dsub>
    3336:	0032      	movs	r2, r6
    3338:	003b      	movs	r3, r7
    333a:	f002 f9d3 	bl	56e4 <__aeabi_dsub>
    333e:	0002      	movs	r2, r0
    3340:	000b      	movs	r3, r1
    3342:	2000      	movs	r0, #0
    3344:	4992      	ldr	r1, [pc, #584]	; (3590 <__ieee754_pow+0xa18>)
    3346:	f002 f9cd 	bl	56e4 <__aeabi_dsub>
    334a:	464b      	mov	r3, r9
    334c:	185b      	adds	r3, r3, r1
    334e:	151a      	asrs	r2, r3, #20
    3350:	2a00      	cmp	r2, #0
    3352:	dc00      	bgt.n	3356 <__ieee754_pow+0x7de>
    3354:	e0f4      	b.n	3540 <__ieee754_pow+0x9c8>
    3356:	0019      	movs	r1, r3
    3358:	9a06      	ldr	r2, [sp, #24]
    335a:	9b07      	ldr	r3, [sp, #28]
    335c:	f001 ff48 	bl	51f0 <__aeabi_dmul>
    3360:	0006      	movs	r6, r0
    3362:	e452      	b.n	2c0a <__ieee754_pow+0x92>
    3364:	0032      	movs	r2, r6
    3366:	0030      	movs	r0, r6
    3368:	002b      	movs	r3, r5
    336a:	0029      	movs	r1, r5
    336c:	f001 ff40 	bl	51f0 <__aeabi_dmul>
    3370:	0006      	movs	r6, r0
    3372:	e44a      	b.n	2c0a <__ieee754_pow+0x92>
    3374:	4b87      	ldr	r3, [pc, #540]	; (3594 <__ieee754_pow+0xa1c>)
    3376:	004e      	lsls	r6, r1, #1
    3378:	0876      	lsrs	r6, r6, #1
    337a:	429e      	cmp	r6, r3
    337c:	dc00      	bgt.n	3380 <__ieee754_pow+0x808>
    337e:	e0bf      	b.n	3500 <__ieee754_pow+0x988>
    3380:	4b85      	ldr	r3, [pc, #532]	; (3598 <__ieee754_pow+0xa20>)
    3382:	18cb      	adds	r3, r1, r3
    3384:	4303      	orrs	r3, r0
    3386:	d10c      	bne.n	33a2 <__ieee754_pow+0x82a>
    3388:	9a00      	ldr	r2, [sp, #0]
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	f002 f9aa 	bl	56e4 <__aeabi_dsub>
    3390:	0002      	movs	r2, r0
    3392:	000b      	movs	r3, r1
    3394:	9804      	ldr	r0, [sp, #16]
    3396:	9905      	ldr	r1, [sp, #20]
    3398:	f000 fb6c 	bl	3a74 <__aeabi_dcmple>
    339c:	2800      	cmp	r0, #0
    339e:	d100      	bne.n	33a2 <__ieee754_pow+0x82a>
    33a0:	e701      	b.n	31a6 <__ieee754_pow+0x62e>
    33a2:	9806      	ldr	r0, [sp, #24]
    33a4:	9907      	ldr	r1, [sp, #28]
    33a6:	4a7d      	ldr	r2, [pc, #500]	; (359c <__ieee754_pow+0xa24>)
    33a8:	4b7d      	ldr	r3, [pc, #500]	; (35a0 <__ieee754_pow+0xa28>)
    33aa:	f001 ff21 	bl	51f0 <__aeabi_dmul>
    33ae:	4a7b      	ldr	r2, [pc, #492]	; (359c <__ieee754_pow+0xa24>)
    33b0:	4b7b      	ldr	r3, [pc, #492]	; (35a0 <__ieee754_pow+0xa28>)
    33b2:	f001 ff1d 	bl	51f0 <__aeabi_dmul>
    33b6:	0006      	movs	r6, r0
    33b8:	f7ff fc27 	bl	2c0a <__ieee754_pow+0x92>
    33bc:	2300      	movs	r3, #0
    33be:	4c79      	ldr	r4, [pc, #484]	; (35a4 <__ieee754_pow+0xa2c>)
    33c0:	9306      	str	r3, [sp, #24]
    33c2:	9407      	str	r4, [sp, #28]
    33c4:	e666      	b.n	3094 <__ieee754_pow+0x51c>
    33c6:	4653      	mov	r3, sl
    33c8:	2b00      	cmp	r3, #0
    33ca:	db00      	blt.n	33ce <__ieee754_pow+0x856>
    33cc:	e4c3      	b.n	2d56 <__ieee754_pow+0x1de>
    33ce:	9b00      	ldr	r3, [sp, #0]
    33d0:	9c01      	ldr	r4, [sp, #4]
    33d2:	2280      	movs	r2, #128	; 0x80
    33d4:	0612      	lsls	r2, r2, #24
    33d6:	001e      	movs	r6, r3
    33d8:	4694      	mov	ip, r2
    33da:	0023      	movs	r3, r4
    33dc:	4463      	add	r3, ip
    33de:	0019      	movs	r1, r3
    33e0:	f7ff fc13 	bl	2c0a <__ieee754_pow+0x92>
    33e4:	0002      	movs	r2, r0
    33e6:	000b      	movs	r3, r1
    33e8:	2000      	movs	r0, #0
    33ea:	4969      	ldr	r1, [pc, #420]	; (3590 <__ieee754_pow+0xa18>)
    33ec:	f001 fadc 	bl	49a8 <__aeabi_ddiv>
    33f0:	e44a      	b.n	2c88 <__ieee754_pow+0x110>
    33f2:	4b6d      	ldr	r3, [pc, #436]	; (35a8 <__ieee754_pow+0xa30>)
    33f4:	429c      	cmp	r4, r3
    33f6:	dc00      	bgt.n	33fa <__ieee754_pow+0x882>
    33f8:	e4aa      	b.n	2d50 <__ieee754_pow+0x1d8>
    33fa:	4b65      	ldr	r3, [pc, #404]	; (3590 <__ieee754_pow+0xa18>)
    33fc:	429c      	cmp	r4, r3
    33fe:	dd01      	ble.n	3404 <__ieee754_pow+0x88c>
    3400:	f7ff fc2c 	bl	2c5c <__ieee754_pow+0xe4>
    3404:	2200      	movs	r2, #0
    3406:	4b62      	ldr	r3, [pc, #392]	; (3590 <__ieee754_pow+0xa18>)
    3408:	f002 f96c 	bl	56e4 <__aeabi_dsub>
    340c:	22c0      	movs	r2, #192	; 0xc0
    340e:	4b67      	ldr	r3, [pc, #412]	; (35ac <__ieee754_pow+0xa34>)
    3410:	05d2      	lsls	r2, r2, #23
    3412:	0004      	movs	r4, r0
    3414:	000d      	movs	r5, r1
    3416:	f001 feeb 	bl	51f0 <__aeabi_dmul>
    341a:	4a65      	ldr	r2, [pc, #404]	; (35b0 <__ieee754_pow+0xa38>)
    341c:	0006      	movs	r6, r0
    341e:	000f      	movs	r7, r1
    3420:	4b64      	ldr	r3, [pc, #400]	; (35b4 <__ieee754_pow+0xa3c>)
    3422:	0020      	movs	r0, r4
    3424:	0029      	movs	r1, r5
    3426:	f001 fee3 	bl	51f0 <__aeabi_dmul>
    342a:	2200      	movs	r2, #0
    342c:	9002      	str	r0, [sp, #8]
    342e:	9103      	str	r1, [sp, #12]
    3430:	4b61      	ldr	r3, [pc, #388]	; (35b8 <__ieee754_pow+0xa40>)
    3432:	0020      	movs	r0, r4
    3434:	0029      	movs	r1, r5
    3436:	f001 fedb 	bl	51f0 <__aeabi_dmul>
    343a:	0002      	movs	r2, r0
    343c:	000b      	movs	r3, r1
    343e:	485f      	ldr	r0, [pc, #380]	; (35bc <__ieee754_pow+0xa44>)
    3440:	495f      	ldr	r1, [pc, #380]	; (35c0 <__ieee754_pow+0xa48>)
    3442:	f002 f94f 	bl	56e4 <__aeabi_dsub>
    3446:	0022      	movs	r2, r4
    3448:	002b      	movs	r3, r5
    344a:	f001 fed1 	bl	51f0 <__aeabi_dmul>
    344e:	0002      	movs	r2, r0
    3450:	000b      	movs	r3, r1
    3452:	2000      	movs	r0, #0
    3454:	495b      	ldr	r1, [pc, #364]	; (35c4 <__ieee754_pow+0xa4c>)
    3456:	f002 f945 	bl	56e4 <__aeabi_dsub>
    345a:	0022      	movs	r2, r4
    345c:	9004      	str	r0, [sp, #16]
    345e:	9105      	str	r1, [sp, #20]
    3460:	002b      	movs	r3, r5
    3462:	0020      	movs	r0, r4
    3464:	0029      	movs	r1, r5
    3466:	f001 fec3 	bl	51f0 <__aeabi_dmul>
    346a:	0002      	movs	r2, r0
    346c:	000b      	movs	r3, r1
    346e:	9804      	ldr	r0, [sp, #16]
    3470:	9905      	ldr	r1, [sp, #20]
    3472:	f001 febd 	bl	51f0 <__aeabi_dmul>
    3476:	4a54      	ldr	r2, [pc, #336]	; (35c8 <__ieee754_pow+0xa50>)
    3478:	4b4c      	ldr	r3, [pc, #304]	; (35ac <__ieee754_pow+0xa34>)
    347a:	f001 feb9 	bl	51f0 <__aeabi_dmul>
    347e:	0002      	movs	r2, r0
    3480:	000b      	movs	r3, r1
    3482:	9802      	ldr	r0, [sp, #8]
    3484:	9903      	ldr	r1, [sp, #12]
    3486:	f002 f92d 	bl	56e4 <__aeabi_dsub>
    348a:	0002      	movs	r2, r0
    348c:	000b      	movs	r3, r1
    348e:	0004      	movs	r4, r0
    3490:	000d      	movs	r5, r1
    3492:	0030      	movs	r0, r6
    3494:	0039      	movs	r1, r7
    3496:	f000 ff5b 	bl	4350 <__aeabi_dadd>
    349a:	2200      	movs	r2, #0
    349c:	0010      	movs	r0, r2
    349e:	003b      	movs	r3, r7
    34a0:	0032      	movs	r2, r6
    34a2:	9002      	str	r0, [sp, #8]
    34a4:	9103      	str	r1, [sp, #12]
    34a6:	f002 f91d 	bl	56e4 <__aeabi_dsub>
    34aa:	0002      	movs	r2, r0
    34ac:	000b      	movs	r3, r1
    34ae:	0020      	movs	r0, r4
    34b0:	0029      	movs	r1, r5
    34b2:	f002 f917 	bl	56e4 <__aeabi_dsub>
    34b6:	9004      	str	r0, [sp, #16]
    34b8:	9105      	str	r1, [sp, #20]
    34ba:	e5e1      	b.n	3080 <__ieee754_pow+0x508>
    34bc:	4a43      	ldr	r2, [pc, #268]	; (35cc <__ieee754_pow+0xa54>)
    34be:	4b44      	ldr	r3, [pc, #272]	; (35d0 <__ieee754_pow+0xa58>)
    34c0:	9806      	ldr	r0, [sp, #24]
    34c2:	9907      	ldr	r1, [sp, #28]
    34c4:	f001 fe94 	bl	51f0 <__aeabi_dmul>
    34c8:	4a40      	ldr	r2, [pc, #256]	; (35cc <__ieee754_pow+0xa54>)
    34ca:	4b41      	ldr	r3, [pc, #260]	; (35d0 <__ieee754_pow+0xa58>)
    34cc:	f001 fe90 	bl	51f0 <__aeabi_dmul>
    34d0:	0006      	movs	r6, r0
    34d2:	f7ff fb9a 	bl	2c0a <__ieee754_pow+0x92>
    34d6:	2a00      	cmp	r2, #0
    34d8:	d001      	beq.n	34de <__ieee754_pow+0x966>
    34da:	f7ff fba5 	bl	2c28 <__ieee754_pow+0xb0>
    34de:	3214      	adds	r2, #20
    34e0:	1ad3      	subs	r3, r2, r3
    34e2:	003a      	movs	r2, r7
    34e4:	411a      	asrs	r2, r3
    34e6:	0011      	movs	r1, r2
    34e8:	4099      	lsls	r1, r3
    34ea:	428f      	cmp	r7, r1
    34ec:	d001      	beq.n	34f2 <__ieee754_pow+0x97a>
    34ee:	f7ff fb6f 	bl	2bd0 <__ieee754_pow+0x58>
    34f2:	2301      	movs	r3, #1
    34f4:	4013      	ands	r3, r2
    34f6:	2202      	movs	r2, #2
    34f8:	1ad3      	subs	r3, r2, r3
    34fa:	469b      	mov	fp, r3
    34fc:	f7ff fb68 	bl	2bd0 <__ieee754_pow+0x58>
    3500:	4b30      	ldr	r3, [pc, #192]	; (35c4 <__ieee754_pow+0xa4c>)
    3502:	429e      	cmp	r6, r3
    3504:	dd00      	ble.n	3508 <__ieee754_pow+0x990>
    3506:	e64e      	b.n	31a6 <__ieee754_pow+0x62e>
    3508:	2300      	movs	r3, #0
    350a:	4699      	mov	r9, r3
    350c:	4698      	mov	r8, r3
    350e:	e67a      	b.n	3206 <__ieee754_pow+0x68e>
    3510:	0002      	movs	r2, r0
    3512:	000b      	movs	r3, r1
    3514:	f7ff fc14 	bl	2d40 <__ieee754_pow+0x1c8>
    3518:	2380      	movs	r3, #128	; 0x80
    351a:	4c2e      	ldr	r4, [pc, #184]	; (35d4 <__ieee754_pow+0xa5c>)
    351c:	05db      	lsls	r3, r3, #23
    351e:	9308      	str	r3, [sp, #32]
    3520:	9409      	str	r4, [sp, #36]	; 0x24
    3522:	4b2d      	ldr	r3, [pc, #180]	; (35d8 <__ieee754_pow+0xa60>)
    3524:	4c2d      	ldr	r4, [pc, #180]	; (35dc <__ieee754_pow+0xa64>)
    3526:	2200      	movs	r2, #0
    3528:	930c      	str	r3, [sp, #48]	; 0x30
    352a:	940d      	str	r4, [sp, #52]	; 0x34
    352c:	2480      	movs	r4, #128	; 0x80
    352e:	4b2c      	ldr	r3, [pc, #176]	; (35e0 <__ieee754_pow+0xa68>)
    3530:	02e4      	lsls	r4, r4, #11
    3532:	9206      	str	r2, [sp, #24]
    3534:	9307      	str	r3, [sp, #28]
    3536:	e456      	b.n	2de6 <__ieee754_pow+0x26e>
    3538:	4643      	mov	r3, r8
    353a:	425b      	negs	r3, r3
    353c:	4698      	mov	r8, r3
    353e:	e651      	b.n	31e4 <__ieee754_pow+0x66c>
    3540:	4642      	mov	r2, r8
    3542:	f000 f9fd 	bl	3940 <scalbn>
    3546:	e707      	b.n	3358 <__ieee754_pow+0x7e0>
    3548:	fffffc02 	.word	0xfffffc02
    354c:	fffffc01 	.word	0xfffffc01
    3550:	000fffff 	.word	0x000fffff
    3554:	3fe62e43 	.word	0x3fe62e43
    3558:	fefa39ef 	.word	0xfefa39ef
    355c:	3fe62e42 	.word	0x3fe62e42
    3560:	0ca86c39 	.word	0x0ca86c39
    3564:	be205c61 	.word	0xbe205c61
    3568:	72bea4d0 	.word	0x72bea4d0
    356c:	3e663769 	.word	0x3e663769
    3570:	c5d26bf1 	.word	0xc5d26bf1
    3574:	3ebbbd41 	.word	0x3ebbbd41
    3578:	af25de2c 	.word	0xaf25de2c
    357c:	3f11566a 	.word	0x3f11566a
    3580:	16bebd93 	.word	0x16bebd93
    3584:	3f66c16c 	.word	0x3f66c16c
    3588:	5555553e 	.word	0x5555553e
    358c:	3fc55555 	.word	0x3fc55555
    3590:	3ff00000 	.word	0x3ff00000
    3594:	4090cbff 	.word	0x4090cbff
    3598:	3f6f3400 	.word	0x3f6f3400
    359c:	c2f8f359 	.word	0xc2f8f359
    35a0:	01a56e1f 	.word	0x01a56e1f
    35a4:	bff00000 	.word	0xbff00000
    35a8:	3feffffe 	.word	0x3feffffe
    35ac:	3ff71547 	.word	0x3ff71547
    35b0:	f85ddf44 	.word	0xf85ddf44
    35b4:	3e54ae0b 	.word	0x3e54ae0b
    35b8:	3fd00000 	.word	0x3fd00000
    35bc:	55555555 	.word	0x55555555
    35c0:	3fd55555 	.word	0x3fd55555
    35c4:	3fe00000 	.word	0x3fe00000
    35c8:	652b82fe 	.word	0x652b82fe
    35cc:	8800759c 	.word	0x8800759c
    35d0:	7e37e43c 	.word	0x7e37e43c
    35d4:	3fe2b803 	.word	0x3fe2b803
    35d8:	43cfd006 	.word	0x43cfd006
    35dc:	3e4cfdeb 	.word	0x3e4cfdeb
    35e0:	3ff80000 	.word	0x3ff80000

000035e4 <__ieee754_sqrt>:
    35e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35e6:	4656      	mov	r6, sl
    35e8:	464d      	mov	r5, r9
    35ea:	4644      	mov	r4, r8
    35ec:	465f      	mov	r7, fp
    35ee:	4b75      	ldr	r3, [pc, #468]	; (37c4 <__ieee754_sqrt+0x1e0>)
    35f0:	b4f0      	push	{r4, r5, r6, r7}
    35f2:	000a      	movs	r2, r1
    35f4:	000d      	movs	r5, r1
    35f6:	0019      	movs	r1, r3
    35f8:	b083      	sub	sp, #12
    35fa:	0006      	movs	r6, r0
    35fc:	0004      	movs	r4, r0
    35fe:	4029      	ands	r1, r5
    3600:	4299      	cmp	r1, r3
    3602:	d100      	bne.n	3606 <__ieee754_sqrt+0x22>
    3604:	e0ba      	b.n	377c <__ieee754_sqrt+0x198>
    3606:	2d00      	cmp	r5, #0
    3608:	dc00      	bgt.n	360c <__ieee754_sqrt+0x28>
    360a:	e094      	b.n	3736 <__ieee754_sqrt+0x152>
    360c:	152d      	asrs	r5, r5, #20
    360e:	d100      	bne.n	3612 <__ieee754_sqrt+0x2e>
    3610:	e0a3      	b.n	375a <__ieee754_sqrt+0x176>
    3612:	4b6d      	ldr	r3, [pc, #436]	; (37c8 <__ieee754_sqrt+0x1e4>)
    3614:	0312      	lsls	r2, r2, #12
    3616:	469c      	mov	ip, r3
    3618:	2380      	movs	r3, #128	; 0x80
    361a:	0b12      	lsrs	r2, r2, #12
    361c:	035b      	lsls	r3, r3, #13
    361e:	4465      	add	r5, ip
    3620:	431a      	orrs	r2, r3
    3622:	07eb      	lsls	r3, r5, #31
    3624:	d500      	bpl.n	3628 <__ieee754_sqrt+0x44>
    3626:	e081      	b.n	372c <__ieee754_sqrt+0x148>
    3628:	106b      	asrs	r3, r5, #1
    362a:	4698      	mov	r8, r3
    362c:	0fe3      	lsrs	r3, r4, #31
    362e:	189b      	adds	r3, r3, r2
    3630:	189b      	adds	r3, r3, r2
    3632:	2280      	movs	r2, #128	; 0x80
    3634:	2116      	movs	r1, #22
    3636:	2600      	movs	r6, #0
    3638:	2700      	movs	r7, #0
    363a:	0064      	lsls	r4, r4, #1
    363c:	0392      	lsls	r2, r2, #14
    363e:	18b8      	adds	r0, r7, r2
    3640:	4298      	cmp	r0, r3
    3642:	dc02      	bgt.n	364a <__ieee754_sqrt+0x66>
    3644:	1887      	adds	r7, r0, r2
    3646:	1a1b      	subs	r3, r3, r0
    3648:	18b6      	adds	r6, r6, r2
    364a:	0fe0      	lsrs	r0, r4, #31
    364c:	005b      	lsls	r3, r3, #1
    364e:	3901      	subs	r1, #1
    3650:	181b      	adds	r3, r3, r0
    3652:	0064      	lsls	r4, r4, #1
    3654:	0852      	lsrs	r2, r2, #1
    3656:	2900      	cmp	r1, #0
    3658:	d1f1      	bne.n	363e <__ieee754_sqrt+0x5a>
    365a:	2200      	movs	r2, #0
    365c:	9201      	str	r2, [sp, #4]
    365e:	4694      	mov	ip, r2
    3660:	2280      	movs	r2, #128	; 0x80
    3662:	0612      	lsls	r2, r2, #24
    3664:	2020      	movs	r0, #32
    3666:	4691      	mov	r9, r2
    3668:	e009      	b.n	367e <__ieee754_sqrt+0x9a>
    366a:	429f      	cmp	r7, r3
    366c:	d041      	beq.n	36f2 <__ieee754_sqrt+0x10e>
    366e:	0fe1      	lsrs	r1, r4, #31
    3670:	18c9      	adds	r1, r1, r3
    3672:	3801      	subs	r0, #1
    3674:	18cb      	adds	r3, r1, r3
    3676:	0064      	lsls	r4, r4, #1
    3678:	0852      	lsrs	r2, r2, #1
    367a:	2800      	cmp	r0, #0
    367c:	d01e      	beq.n	36bc <__ieee754_sqrt+0xd8>
    367e:	4661      	mov	r1, ip
    3680:	1851      	adds	r1, r2, r1
    3682:	429f      	cmp	r7, r3
    3684:	daf1      	bge.n	366a <__ieee754_sqrt+0x86>
    3686:	188d      	adds	r5, r1, r2
    3688:	46ac      	mov	ip, r5
    368a:	0fcd      	lsrs	r5, r1, #31
    368c:	07ed      	lsls	r5, r5, #31
    368e:	46ba      	mov	sl, r7
    3690:	454d      	cmp	r5, r9
    3692:	d039      	beq.n	3708 <__ieee754_sqrt+0x124>
    3694:	1bdb      	subs	r3, r3, r7
    3696:	428c      	cmp	r4, r1
    3698:	41bf      	sbcs	r7, r7
    369a:	427f      	negs	r7, r7
    369c:	1bdb      	subs	r3, r3, r7
    369e:	1a64      	subs	r4, r4, r1
    36a0:	9901      	ldr	r1, [sp, #4]
    36a2:	3801      	subs	r0, #1
    36a4:	468b      	mov	fp, r1
    36a6:	4493      	add	fp, r2
    36a8:	4659      	mov	r1, fp
    36aa:	9101      	str	r1, [sp, #4]
    36ac:	0fe1      	lsrs	r1, r4, #31
    36ae:	18c9      	adds	r1, r1, r3
    36b0:	4657      	mov	r7, sl
    36b2:	18cb      	adds	r3, r1, r3
    36b4:	0064      	lsls	r4, r4, #1
    36b6:	0852      	lsrs	r2, r2, #1
    36b8:	2800      	cmp	r0, #0
    36ba:	d1e0      	bne.n	367e <__ieee754_sqrt+0x9a>
    36bc:	4323      	orrs	r3, r4
    36be:	d12b      	bne.n	3718 <__ieee754_sqrt+0x134>
    36c0:	9b01      	ldr	r3, [sp, #4]
    36c2:	085b      	lsrs	r3, r3, #1
    36c4:	4941      	ldr	r1, [pc, #260]	; (37cc <__ieee754_sqrt+0x1e8>)
    36c6:	1072      	asrs	r2, r6, #1
    36c8:	468c      	mov	ip, r1
    36ca:	4462      	add	r2, ip
    36cc:	07f1      	lsls	r1, r6, #31
    36ce:	d502      	bpl.n	36d6 <__ieee754_sqrt+0xf2>
    36d0:	2180      	movs	r1, #128	; 0x80
    36d2:	0609      	lsls	r1, r1, #24
    36d4:	430b      	orrs	r3, r1
    36d6:	4641      	mov	r1, r8
    36d8:	0509      	lsls	r1, r1, #20
    36da:	188d      	adds	r5, r1, r2
    36dc:	001e      	movs	r6, r3
    36de:	002f      	movs	r7, r5
    36e0:	0030      	movs	r0, r6
    36e2:	0039      	movs	r1, r7
    36e4:	b003      	add	sp, #12
    36e6:	bc3c      	pop	{r2, r3, r4, r5}
    36e8:	4690      	mov	r8, r2
    36ea:	4699      	mov	r9, r3
    36ec:	46a2      	mov	sl, r4
    36ee:	46ab      	mov	fp, r5
    36f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f2:	42a1      	cmp	r1, r4
    36f4:	d80e      	bhi.n	3714 <__ieee754_sqrt+0x130>
    36f6:	188d      	adds	r5, r1, r2
    36f8:	46ac      	mov	ip, r5
    36fa:	0fcd      	lsrs	r5, r1, #31
    36fc:	07ed      	lsls	r5, r5, #31
    36fe:	454d      	cmp	r5, r9
    3700:	d048      	beq.n	3794 <__ieee754_sqrt+0x1b0>
    3702:	469a      	mov	sl, r3
    3704:	2300      	movs	r3, #0
    3706:	e7ca      	b.n	369e <__ieee754_sqrt+0xba>
    3708:	4665      	mov	r5, ip
    370a:	2d00      	cmp	r5, #0
    370c:	dbc2      	blt.n	3694 <__ieee754_sqrt+0xb0>
    370e:	1c7d      	adds	r5, r7, #1
    3710:	46aa      	mov	sl, r5
    3712:	e7bf      	b.n	3694 <__ieee754_sqrt+0xb0>
    3714:	003b      	movs	r3, r7
    3716:	e7aa      	b.n	366e <__ieee754_sqrt+0x8a>
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	3301      	adds	r3, #1
    371c:	d03e      	beq.n	379c <__ieee754_sqrt+0x1b8>
    371e:	9a01      	ldr	r2, [sp, #4]
    3720:	2301      	movs	r3, #1
    3722:	4694      	mov	ip, r2
    3724:	4013      	ands	r3, r2
    3726:	4463      	add	r3, ip
    3728:	085b      	lsrs	r3, r3, #1
    372a:	e7cb      	b.n	36c4 <__ieee754_sqrt+0xe0>
    372c:	0fe3      	lsrs	r3, r4, #31
    372e:	0052      	lsls	r2, r2, #1
    3730:	189a      	adds	r2, r3, r2
    3732:	0064      	lsls	r4, r4, #1
    3734:	e778      	b.n	3628 <__ieee754_sqrt+0x44>
    3736:	006b      	lsls	r3, r5, #1
    3738:	085b      	lsrs	r3, r3, #1
    373a:	4303      	orrs	r3, r0
    373c:	002f      	movs	r7, r5
    373e:	2b00      	cmp	r3, #0
    3740:	d0ce      	beq.n	36e0 <__ieee754_sqrt+0xfc>
    3742:	2500      	movs	r5, #0
    3744:	2a00      	cmp	r2, #0
    3746:	d131      	bne.n	37ac <__ieee754_sqrt+0x1c8>
    3748:	0ae2      	lsrs	r2, r4, #11
    374a:	3d15      	subs	r5, #21
    374c:	0564      	lsls	r4, r4, #21
    374e:	2a00      	cmp	r2, #0
    3750:	d0fa      	beq.n	3748 <__ieee754_sqrt+0x164>
    3752:	2380      	movs	r3, #128	; 0x80
    3754:	035b      	lsls	r3, r3, #13
    3756:	421a      	tst	r2, r3
    3758:	d123      	bne.n	37a2 <__ieee754_sqrt+0x1be>
    375a:	2080      	movs	r0, #128	; 0x80
    375c:	2300      	movs	r3, #0
    375e:	0340      	lsls	r0, r0, #13
    3760:	e000      	b.n	3764 <__ieee754_sqrt+0x180>
    3762:	000b      	movs	r3, r1
    3764:	0052      	lsls	r2, r2, #1
    3766:	1c59      	adds	r1, r3, #1
    3768:	4202      	tst	r2, r0
    376a:	d0fa      	beq.n	3762 <__ieee754_sqrt+0x17e>
    376c:	2020      	movs	r0, #32
    376e:	1a40      	subs	r0, r0, r1
    3770:	1aed      	subs	r5, r5, r3
    3772:	0023      	movs	r3, r4
    3774:	40c3      	lsrs	r3, r0
    3776:	408c      	lsls	r4, r1
    3778:	431a      	orrs	r2, r3
    377a:	e74a      	b.n	3612 <__ieee754_sqrt+0x2e>
    377c:	0002      	movs	r2, r0
    377e:	002b      	movs	r3, r5
    3780:	0029      	movs	r1, r5
    3782:	f001 fd35 	bl	51f0 <__aeabi_dmul>
    3786:	0032      	movs	r2, r6
    3788:	002b      	movs	r3, r5
    378a:	f000 fde1 	bl	4350 <__aeabi_dadd>
    378e:	0006      	movs	r6, r0
    3790:	000f      	movs	r7, r1
    3792:	e7a5      	b.n	36e0 <__ieee754_sqrt+0xfc>
    3794:	4665      	mov	r5, ip
    3796:	2d00      	cmp	r5, #0
    3798:	dab9      	bge.n	370e <__ieee754_sqrt+0x12a>
    379a:	e7b2      	b.n	3702 <__ieee754_sqrt+0x11e>
    379c:	3601      	adds	r6, #1
    379e:	2300      	movs	r3, #0
    37a0:	e790      	b.n	36c4 <__ieee754_sqrt+0xe0>
    37a2:	2301      	movs	r3, #1
    37a4:	2020      	movs	r0, #32
    37a6:	425b      	negs	r3, r3
    37a8:	2100      	movs	r1, #0
    37aa:	e7e1      	b.n	3770 <__ieee754_sqrt+0x18c>
    37ac:	003b      	movs	r3, r7
    37ae:	0002      	movs	r2, r0
    37b0:	0039      	movs	r1, r7
    37b2:	f001 ff97 	bl	56e4 <__aeabi_dsub>
    37b6:	0002      	movs	r2, r0
    37b8:	000b      	movs	r3, r1
    37ba:	f001 f8f5 	bl	49a8 <__aeabi_ddiv>
    37be:	0006      	movs	r6, r0
    37c0:	000f      	movs	r7, r1
    37c2:	e78d      	b.n	36e0 <__ieee754_sqrt+0xfc>
    37c4:	7ff00000 	.word	0x7ff00000
    37c8:	fffffc01 	.word	0xfffffc01
    37cc:	3fe00000 	.word	0x3fe00000

000037d0 <fabs>:
    37d0:	0049      	lsls	r1, r1, #1
    37d2:	084b      	lsrs	r3, r1, #1
    37d4:	0019      	movs	r1, r3
    37d6:	4770      	bx	lr

000037d8 <finite>:
    37d8:	4b03      	ldr	r3, [pc, #12]	; (37e8 <finite+0x10>)
    37da:	0048      	lsls	r0, r1, #1
    37dc:	469c      	mov	ip, r3
    37de:	0840      	lsrs	r0, r0, #1
    37e0:	4460      	add	r0, ip
    37e2:	0fc0      	lsrs	r0, r0, #31
    37e4:	4770      	bx	lr
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	80100000 	.word	0x80100000

000037ec <matherr>:
    37ec:	2000      	movs	r0, #0
    37ee:	4770      	bx	lr

000037f0 <nan>:
    37f0:	2000      	movs	r0, #0
    37f2:	4901      	ldr	r1, [pc, #4]	; (37f8 <nan+0x8>)
    37f4:	4770      	bx	lr
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	7ff80000 	.word	0x7ff80000

000037fc <rint>:
    37fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fe:	4647      	mov	r7, r8
    3800:	b480      	push	{r7}
    3802:	0fcb      	lsrs	r3, r1, #31
    3804:	4698      	mov	r8, r3
    3806:	4c4a      	ldr	r4, [pc, #296]	; (3930 <rint+0x134>)
    3808:	004b      	lsls	r3, r1, #1
    380a:	0d5b      	lsrs	r3, r3, #21
    380c:	191e      	adds	r6, r3, r4
    380e:	b082      	sub	sp, #8
    3810:	0007      	movs	r7, r0
    3812:	000a      	movs	r2, r1
    3814:	2e13      	cmp	r6, #19
    3816:	dc35      	bgt.n	3884 <rint+0x88>
    3818:	2e00      	cmp	r6, #0
    381a:	db57      	blt.n	38cc <rint+0xd0>
    381c:	4b45      	ldr	r3, [pc, #276]	; (3934 <rint+0x138>)
    381e:	0004      	movs	r4, r0
    3820:	4133      	asrs	r3, r6
    3822:	001f      	movs	r7, r3
    3824:	400f      	ands	r7, r1
    3826:	4307      	orrs	r7, r0
    3828:	000d      	movs	r5, r1
    382a:	2f00      	cmp	r7, #0
    382c:	d024      	beq.n	3878 <rint+0x7c>
    382e:	085b      	lsrs	r3, r3, #1
    3830:	001c      	movs	r4, r3
    3832:	400c      	ands	r4, r1
    3834:	4320      	orrs	r0, r4
    3836:	2700      	movs	r7, #0
    3838:	2800      	cmp	r0, #0
    383a:	d007      	beq.n	384c <rint+0x50>
    383c:	2e13      	cmp	r6, #19
    383e:	d100      	bne.n	3842 <rint+0x46>
    3840:	e072      	b.n	3928 <rint+0x12c>
    3842:	2280      	movs	r2, #128	; 0x80
    3844:	02d2      	lsls	r2, r2, #11
    3846:	4132      	asrs	r2, r6
    3848:	4399      	bics	r1, r3
    384a:	430a      	orrs	r2, r1
    384c:	4643      	mov	r3, r8
    384e:	00de      	lsls	r6, r3, #3
    3850:	4b39      	ldr	r3, [pc, #228]	; (3938 <rint+0x13c>)
    3852:	0011      	movs	r1, r2
    3854:	199e      	adds	r6, r3, r6
    3856:	6834      	ldr	r4, [r6, #0]
    3858:	6875      	ldr	r5, [r6, #4]
    385a:	0038      	movs	r0, r7
    385c:	0022      	movs	r2, r4
    385e:	002b      	movs	r3, r5
    3860:	f000 fd76 	bl	4350 <__aeabi_dadd>
    3864:	9000      	str	r0, [sp, #0]
    3866:	9101      	str	r1, [sp, #4]
    3868:	9800      	ldr	r0, [sp, #0]
    386a:	9901      	ldr	r1, [sp, #4]
    386c:	0022      	movs	r2, r4
    386e:	002b      	movs	r3, r5
    3870:	f001 ff38 	bl	56e4 <__aeabi_dsub>
    3874:	0004      	movs	r4, r0
    3876:	000d      	movs	r5, r1
    3878:	0020      	movs	r0, r4
    387a:	0029      	movs	r1, r5
    387c:	b002      	add	sp, #8
    387e:	bc04      	pop	{r2}
    3880:	4690      	mov	r8, r2
    3882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3884:	2e33      	cmp	r6, #51	; 0x33
    3886:	dd0c      	ble.n	38a2 <rint+0xa6>
    3888:	2380      	movs	r3, #128	; 0x80
    388a:	0004      	movs	r4, r0
    388c:	000d      	movs	r5, r1
    388e:	00db      	lsls	r3, r3, #3
    3890:	429e      	cmp	r6, r3
    3892:	d1f1      	bne.n	3878 <rint+0x7c>
    3894:	0002      	movs	r2, r0
    3896:	000b      	movs	r3, r1
    3898:	f000 fd5a 	bl	4350 <__aeabi_dadd>
    389c:	0004      	movs	r4, r0
    389e:	000d      	movs	r5, r1
    38a0:	e7ea      	b.n	3878 <rint+0x7c>
    38a2:	4c26      	ldr	r4, [pc, #152]	; (393c <rint+0x140>)
    38a4:	000d      	movs	r5, r1
    38a6:	46a4      	mov	ip, r4
    38a8:	2401      	movs	r4, #1
    38aa:	4463      	add	r3, ip
    38ac:	4264      	negs	r4, r4
    38ae:	40dc      	lsrs	r4, r3
    38b0:	46a4      	mov	ip, r4
    38b2:	4661      	mov	r1, ip
    38b4:	0004      	movs	r4, r0
    38b6:	4201      	tst	r1, r0
    38b8:	d0de      	beq.n	3878 <rint+0x7c>
    38ba:	0849      	lsrs	r1, r1, #1
    38bc:	4201      	tst	r1, r0
    38be:	d0c5      	beq.n	384c <rint+0x50>
    38c0:	2780      	movs	r7, #128	; 0x80
    38c2:	05ff      	lsls	r7, r7, #23
    38c4:	411f      	asrs	r7, r3
    38c6:	4388      	bics	r0, r1
    38c8:	4307      	orrs	r7, r0
    38ca:	e7bf      	b.n	384c <rint+0x50>
    38cc:	004b      	lsls	r3, r1, #1
    38ce:	085b      	lsrs	r3, r3, #1
    38d0:	4303      	orrs	r3, r0
    38d2:	0004      	movs	r4, r0
    38d4:	000d      	movs	r5, r1
    38d6:	2b00      	cmp	r3, #0
    38d8:	d0ce      	beq.n	3878 <rint+0x7c>
    38da:	030b      	lsls	r3, r1, #12
    38dc:	0b1b      	lsrs	r3, r3, #12
    38de:	4303      	orrs	r3, r0
    38e0:	425a      	negs	r2, r3
    38e2:	4313      	orrs	r3, r2
    38e4:	2280      	movs	r2, #128	; 0x80
    38e6:	0b1b      	lsrs	r3, r3, #12
    38e8:	0312      	lsls	r2, r2, #12
    38ea:	4013      	ands	r3, r2
    38ec:	0c4a      	lsrs	r2, r1, #17
    38ee:	0452      	lsls	r2, r2, #17
    38f0:	4313      	orrs	r3, r2
    38f2:	0019      	movs	r1, r3
    38f4:	4643      	mov	r3, r8
    38f6:	4a10      	ldr	r2, [pc, #64]	; (3938 <rint+0x13c>)
    38f8:	00db      	lsls	r3, r3, #3
    38fa:	18d3      	adds	r3, r2, r3
    38fc:	681c      	ldr	r4, [r3, #0]
    38fe:	685d      	ldr	r5, [r3, #4]
    3900:	0022      	movs	r2, r4
    3902:	002b      	movs	r3, r5
    3904:	f000 fd24 	bl	4350 <__aeabi_dadd>
    3908:	9000      	str	r0, [sp, #0]
    390a:	9101      	str	r1, [sp, #4]
    390c:	9800      	ldr	r0, [sp, #0]
    390e:	9901      	ldr	r1, [sp, #4]
    3910:	0022      	movs	r2, r4
    3912:	002b      	movs	r3, r5
    3914:	f001 fee6 	bl	56e4 <__aeabi_dsub>
    3918:	4642      	mov	r2, r8
    391a:	004b      	lsls	r3, r1, #1
    391c:	085b      	lsrs	r3, r3, #1
    391e:	07d6      	lsls	r6, r2, #31
    3920:	4333      	orrs	r3, r6
    3922:	0004      	movs	r4, r0
    3924:	001d      	movs	r5, r3
    3926:	e7a7      	b.n	3878 <rint+0x7c>
    3928:	2780      	movs	r7, #128	; 0x80
    392a:	063f      	lsls	r7, r7, #24
    392c:	e789      	b.n	3842 <rint+0x46>
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	fffffc01 	.word	0xfffffc01
    3934:	000fffff 	.word	0x000fffff
    3938:	000065c8 	.word	0x000065c8
    393c:	fffffbed 	.word	0xfffffbed

00003940 <scalbn>:
    3940:	004b      	lsls	r3, r1, #1
    3942:	b570      	push	{r4, r5, r6, lr}
    3944:	0d5b      	lsrs	r3, r3, #21
    3946:	0014      	movs	r4, r2
    3948:	000a      	movs	r2, r1
    394a:	2b00      	cmp	r3, #0
    394c:	d11a      	bne.n	3984 <scalbn+0x44>
    394e:	004b      	lsls	r3, r1, #1
    3950:	085b      	lsrs	r3, r3, #1
    3952:	4303      	orrs	r3, r0
    3954:	d015      	beq.n	3982 <scalbn+0x42>
    3956:	2200      	movs	r2, #0
    3958:	4b22      	ldr	r3, [pc, #136]	; (39e4 <scalbn+0xa4>)
    395a:	f001 fc49 	bl	51f0 <__aeabi_dmul>
    395e:	4b22      	ldr	r3, [pc, #136]	; (39e8 <scalbn+0xa8>)
    3960:	000a      	movs	r2, r1
    3962:	429c      	cmp	r4, r3
    3964:	db22      	blt.n	39ac <scalbn+0x6c>
    3966:	004b      	lsls	r3, r1, #1
    3968:	0d5b      	lsrs	r3, r3, #21
    396a:	3b36      	subs	r3, #54	; 0x36
    396c:	4d1f      	ldr	r5, [pc, #124]	; (39ec <scalbn+0xac>)
    396e:	18e3      	adds	r3, r4, r3
    3970:	42ab      	cmp	r3, r5
    3972:	dc20      	bgt.n	39b6 <scalbn+0x76>
    3974:	2b00      	cmp	r3, #0
    3976:	dd0d      	ble.n	3994 <scalbn+0x54>
    3978:	4c1d      	ldr	r4, [pc, #116]	; (39f0 <scalbn+0xb0>)
    397a:	051b      	lsls	r3, r3, #20
    397c:	4022      	ands	r2, r4
    397e:	431a      	orrs	r2, r3
    3980:	0011      	movs	r1, r2
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	4d1b      	ldr	r5, [pc, #108]	; (39f4 <scalbn+0xb4>)
    3986:	42ab      	cmp	r3, r5
    3988:	d1f0      	bne.n	396c <scalbn+0x2c>
    398a:	0002      	movs	r2, r0
    398c:	000b      	movs	r3, r1
    398e:	f000 fcdf 	bl	4350 <__aeabi_dadd>
    3992:	e7f6      	b.n	3982 <scalbn+0x42>
    3994:	001d      	movs	r5, r3
    3996:	3535      	adds	r5, #53	; 0x35
    3998:	da18      	bge.n	39cc <scalbn+0x8c>
    399a:	4b17      	ldr	r3, [pc, #92]	; (39f8 <scalbn+0xb8>)
    399c:	0002      	movs	r2, r0
    399e:	429c      	cmp	r4, r3
    39a0:	dc0a      	bgt.n	39b8 <scalbn+0x78>
    39a2:	000b      	movs	r3, r1
    39a4:	4815      	ldr	r0, [pc, #84]	; (39fc <scalbn+0xbc>)
    39a6:	4916      	ldr	r1, [pc, #88]	; (3a00 <scalbn+0xc0>)
    39a8:	f000 f832 	bl	3a10 <copysign>
    39ac:	4a13      	ldr	r2, [pc, #76]	; (39fc <scalbn+0xbc>)
    39ae:	4b14      	ldr	r3, [pc, #80]	; (3a00 <scalbn+0xc0>)
    39b0:	f001 fc1e 	bl	51f0 <__aeabi_dmul>
    39b4:	e7e5      	b.n	3982 <scalbn+0x42>
    39b6:	0002      	movs	r2, r0
    39b8:	000b      	movs	r3, r1
    39ba:	4812      	ldr	r0, [pc, #72]	; (3a04 <scalbn+0xc4>)
    39bc:	4912      	ldr	r1, [pc, #72]	; (3a08 <scalbn+0xc8>)
    39be:	f000 f827 	bl	3a10 <copysign>
    39c2:	4a10      	ldr	r2, [pc, #64]	; (3a04 <scalbn+0xc4>)
    39c4:	4b10      	ldr	r3, [pc, #64]	; (3a08 <scalbn+0xc8>)
    39c6:	f001 fc13 	bl	51f0 <__aeabi_dmul>
    39ca:	e7da      	b.n	3982 <scalbn+0x42>
    39cc:	4c08      	ldr	r4, [pc, #32]	; (39f0 <scalbn+0xb0>)
    39ce:	3336      	adds	r3, #54	; 0x36
    39d0:	4022      	ands	r2, r4
    39d2:	051b      	lsls	r3, r3, #20
    39d4:	4313      	orrs	r3, r2
    39d6:	0019      	movs	r1, r3
    39d8:	2200      	movs	r2, #0
    39da:	4b0c      	ldr	r3, [pc, #48]	; (3a0c <scalbn+0xcc>)
    39dc:	f001 fc08 	bl	51f0 <__aeabi_dmul>
    39e0:	e7cf      	b.n	3982 <scalbn+0x42>
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	43500000 	.word	0x43500000
    39e8:	ffff3cb0 	.word	0xffff3cb0
    39ec:	000007fe 	.word	0x000007fe
    39f0:	800fffff 	.word	0x800fffff
    39f4:	000007ff 	.word	0x000007ff
    39f8:	0000c350 	.word	0x0000c350
    39fc:	c2f8f359 	.word	0xc2f8f359
    3a00:	01a56e1f 	.word	0x01a56e1f
    3a04:	8800759c 	.word	0x8800759c
    3a08:	7e37e43c 	.word	0x7e37e43c
    3a0c:	3c900000 	.word	0x3c900000

00003a10 <copysign>:
    3a10:	b530      	push	{r4, r5, lr}
    3a12:	004a      	lsls	r2, r1, #1
    3a14:	0fdb      	lsrs	r3, r3, #31
    3a16:	07db      	lsls	r3, r3, #31
    3a18:	0852      	lsrs	r2, r2, #1
    3a1a:	431a      	orrs	r2, r3
    3a1c:	0011      	movs	r1, r2
    3a1e:	bd30      	pop	{r4, r5, pc}

00003a20 <__gnu_thumb1_case_uqi>:
    3a20:	b402      	push	{r1}
    3a22:	4671      	mov	r1, lr
    3a24:	0849      	lsrs	r1, r1, #1
    3a26:	0049      	lsls	r1, r1, #1
    3a28:	5c09      	ldrb	r1, [r1, r0]
    3a2a:	0049      	lsls	r1, r1, #1
    3a2c:	448e      	add	lr, r1
    3a2e:	bc02      	pop	{r1}
    3a30:	4770      	bx	lr
    3a32:	46c0      	nop			; (mov r8, r8)

00003a34 <__aeabi_cdrcmple>:
    3a34:	4684      	mov	ip, r0
    3a36:	1c10      	adds	r0, r2, #0
    3a38:	4662      	mov	r2, ip
    3a3a:	468c      	mov	ip, r1
    3a3c:	1c19      	adds	r1, r3, #0
    3a3e:	4663      	mov	r3, ip
    3a40:	e000      	b.n	3a44 <__aeabi_cdcmpeq>
    3a42:	46c0      	nop			; (mov r8, r8)

00003a44 <__aeabi_cdcmpeq>:
    3a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a46:	f001 fb69 	bl	511c <__ledf2>
    3a4a:	2800      	cmp	r0, #0
    3a4c:	d401      	bmi.n	3a52 <__aeabi_cdcmpeq+0xe>
    3a4e:	2100      	movs	r1, #0
    3a50:	42c8      	cmn	r0, r1
    3a52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a54 <__aeabi_dcmpeq>:
    3a54:	b510      	push	{r4, lr}
    3a56:	f001 fabd 	bl	4fd4 <__eqdf2>
    3a5a:	4240      	negs	r0, r0
    3a5c:	3001      	adds	r0, #1
    3a5e:	bd10      	pop	{r4, pc}

00003a60 <__aeabi_dcmplt>:
    3a60:	b510      	push	{r4, lr}
    3a62:	f001 fb5b 	bl	511c <__ledf2>
    3a66:	2800      	cmp	r0, #0
    3a68:	db01      	blt.n	3a6e <__aeabi_dcmplt+0xe>
    3a6a:	2000      	movs	r0, #0
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	2001      	movs	r0, #1
    3a70:	bd10      	pop	{r4, pc}
    3a72:	46c0      	nop			; (mov r8, r8)

00003a74 <__aeabi_dcmple>:
    3a74:	b510      	push	{r4, lr}
    3a76:	f001 fb51 	bl	511c <__ledf2>
    3a7a:	2800      	cmp	r0, #0
    3a7c:	dd01      	ble.n	3a82 <__aeabi_dcmple+0xe>
    3a7e:	2000      	movs	r0, #0
    3a80:	bd10      	pop	{r4, pc}
    3a82:	2001      	movs	r0, #1
    3a84:	bd10      	pop	{r4, pc}
    3a86:	46c0      	nop			; (mov r8, r8)

00003a88 <__aeabi_dcmpgt>:
    3a88:	b510      	push	{r4, lr}
    3a8a:	f001 fae3 	bl	5054 <__gedf2>
    3a8e:	2800      	cmp	r0, #0
    3a90:	dc01      	bgt.n	3a96 <__aeabi_dcmpgt+0xe>
    3a92:	2000      	movs	r0, #0
    3a94:	bd10      	pop	{r4, pc}
    3a96:	2001      	movs	r0, #1
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	46c0      	nop			; (mov r8, r8)

00003a9c <__aeabi_dcmpge>:
    3a9c:	b510      	push	{r4, lr}
    3a9e:	f001 fad9 	bl	5054 <__gedf2>
    3aa2:	2800      	cmp	r0, #0
    3aa4:	da01      	bge.n	3aaa <__aeabi_dcmpge+0xe>
    3aa6:	2000      	movs	r0, #0
    3aa8:	bd10      	pop	{r4, pc}
    3aaa:	2001      	movs	r0, #1
    3aac:	bd10      	pop	{r4, pc}
    3aae:	46c0      	nop			; (mov r8, r8)

00003ab0 <__aeabi_cfrcmple>:
    3ab0:	4684      	mov	ip, r0
    3ab2:	1c08      	adds	r0, r1, #0
    3ab4:	4661      	mov	r1, ip
    3ab6:	e7ff      	b.n	3ab8 <__aeabi_cfcmpeq>

00003ab8 <__aeabi_cfcmpeq>:
    3ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3aba:	f000 f901 	bl	3cc0 <__lesf2>
    3abe:	2800      	cmp	r0, #0
    3ac0:	d401      	bmi.n	3ac6 <__aeabi_cfcmpeq+0xe>
    3ac2:	2100      	movs	r1, #0
    3ac4:	42c8      	cmn	r0, r1
    3ac6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ac8 <__aeabi_fcmpeq>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	f000 f88d 	bl	3be8 <__eqsf2>
    3ace:	4240      	negs	r0, r0
    3ad0:	3001      	adds	r0, #1
    3ad2:	bd10      	pop	{r4, pc}

00003ad4 <__aeabi_fcmplt>:
    3ad4:	b510      	push	{r4, lr}
    3ad6:	f000 f8f3 	bl	3cc0 <__lesf2>
    3ada:	2800      	cmp	r0, #0
    3adc:	db01      	blt.n	3ae2 <__aeabi_fcmplt+0xe>
    3ade:	2000      	movs	r0, #0
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	2001      	movs	r0, #1
    3ae4:	bd10      	pop	{r4, pc}
    3ae6:	46c0      	nop			; (mov r8, r8)

00003ae8 <__aeabi_fcmple>:
    3ae8:	b510      	push	{r4, lr}
    3aea:	f000 f8e9 	bl	3cc0 <__lesf2>
    3aee:	2800      	cmp	r0, #0
    3af0:	dd01      	ble.n	3af6 <__aeabi_fcmple+0xe>
    3af2:	2000      	movs	r0, #0
    3af4:	bd10      	pop	{r4, pc}
    3af6:	2001      	movs	r0, #1
    3af8:	bd10      	pop	{r4, pc}
    3afa:	46c0      	nop			; (mov r8, r8)

00003afc <__aeabi_fcmpgt>:
    3afc:	b510      	push	{r4, lr}
    3afe:	f000 f89b 	bl	3c38 <__gesf2>
    3b02:	2800      	cmp	r0, #0
    3b04:	dc01      	bgt.n	3b0a <__aeabi_fcmpgt+0xe>
    3b06:	2000      	movs	r0, #0
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	2001      	movs	r0, #1
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)

00003b10 <__aeabi_fcmpge>:
    3b10:	b510      	push	{r4, lr}
    3b12:	f000 f891 	bl	3c38 <__gesf2>
    3b16:	2800      	cmp	r0, #0
    3b18:	da01      	bge.n	3b1e <__aeabi_fcmpge+0xe>
    3b1a:	2000      	movs	r0, #0
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	2001      	movs	r0, #1
    3b20:	bd10      	pop	{r4, pc}
    3b22:	46c0      	nop			; (mov r8, r8)

00003b24 <__aeabi_lmul>:
    3b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b26:	464f      	mov	r7, r9
    3b28:	4646      	mov	r6, r8
    3b2a:	b4c0      	push	{r6, r7}
    3b2c:	0416      	lsls	r6, r2, #16
    3b2e:	0c36      	lsrs	r6, r6, #16
    3b30:	4699      	mov	r9, r3
    3b32:	0033      	movs	r3, r6
    3b34:	0405      	lsls	r5, r0, #16
    3b36:	0c2c      	lsrs	r4, r5, #16
    3b38:	0c07      	lsrs	r7, r0, #16
    3b3a:	0c15      	lsrs	r5, r2, #16
    3b3c:	4363      	muls	r3, r4
    3b3e:	437e      	muls	r6, r7
    3b40:	436f      	muls	r7, r5
    3b42:	4365      	muls	r5, r4
    3b44:	0c1c      	lsrs	r4, r3, #16
    3b46:	19ad      	adds	r5, r5, r6
    3b48:	1964      	adds	r4, r4, r5
    3b4a:	469c      	mov	ip, r3
    3b4c:	42a6      	cmp	r6, r4
    3b4e:	d903      	bls.n	3b58 <__aeabi_lmul+0x34>
    3b50:	2380      	movs	r3, #128	; 0x80
    3b52:	025b      	lsls	r3, r3, #9
    3b54:	4698      	mov	r8, r3
    3b56:	4447      	add	r7, r8
    3b58:	4663      	mov	r3, ip
    3b5a:	0c25      	lsrs	r5, r4, #16
    3b5c:	19ef      	adds	r7, r5, r7
    3b5e:	041d      	lsls	r5, r3, #16
    3b60:	464b      	mov	r3, r9
    3b62:	434a      	muls	r2, r1
    3b64:	4343      	muls	r3, r0
    3b66:	0c2d      	lsrs	r5, r5, #16
    3b68:	0424      	lsls	r4, r4, #16
    3b6a:	1964      	adds	r4, r4, r5
    3b6c:	1899      	adds	r1, r3, r2
    3b6e:	19c9      	adds	r1, r1, r7
    3b70:	0020      	movs	r0, r4
    3b72:	bc0c      	pop	{r2, r3}
    3b74:	4690      	mov	r8, r2
    3b76:	4699      	mov	r9, r3
    3b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)

00003b7c <__aeabi_f2uiz>:
    3b7c:	219e      	movs	r1, #158	; 0x9e
    3b7e:	b510      	push	{r4, lr}
    3b80:	05c9      	lsls	r1, r1, #23
    3b82:	1c04      	adds	r4, r0, #0
    3b84:	f7ff ffc4 	bl	3b10 <__aeabi_fcmpge>
    3b88:	2800      	cmp	r0, #0
    3b8a:	d103      	bne.n	3b94 <__aeabi_f2uiz+0x18>
    3b8c:	1c20      	adds	r0, r4, #0
    3b8e:	f000 fb75 	bl	427c <__aeabi_f2iz>
    3b92:	bd10      	pop	{r4, pc}
    3b94:	219e      	movs	r1, #158	; 0x9e
    3b96:	1c20      	adds	r0, r4, #0
    3b98:	05c9      	lsls	r1, r1, #23
    3b9a:	f000 f9e9 	bl	3f70 <__aeabi_fsub>
    3b9e:	f000 fb6d 	bl	427c <__aeabi_f2iz>
    3ba2:	2380      	movs	r3, #128	; 0x80
    3ba4:	061b      	lsls	r3, r3, #24
    3ba6:	469c      	mov	ip, r3
    3ba8:	4460      	add	r0, ip
    3baa:	e7f2      	b.n	3b92 <__aeabi_f2uiz+0x16>

00003bac <__aeabi_d2uiz>:
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	2200      	movs	r2, #0
    3bb0:	4b0c      	ldr	r3, [pc, #48]	; (3be4 <__aeabi_d2uiz+0x38>)
    3bb2:	0004      	movs	r4, r0
    3bb4:	000d      	movs	r5, r1
    3bb6:	f7ff ff71 	bl	3a9c <__aeabi_dcmpge>
    3bba:	2800      	cmp	r0, #0
    3bbc:	d104      	bne.n	3bc8 <__aeabi_d2uiz+0x1c>
    3bbe:	0020      	movs	r0, r4
    3bc0:	0029      	movs	r1, r5
    3bc2:	f002 f903 	bl	5dcc <__aeabi_d2iz>
    3bc6:	bd70      	pop	{r4, r5, r6, pc}
    3bc8:	4b06      	ldr	r3, [pc, #24]	; (3be4 <__aeabi_d2uiz+0x38>)
    3bca:	2200      	movs	r2, #0
    3bcc:	0020      	movs	r0, r4
    3bce:	0029      	movs	r1, r5
    3bd0:	f001 fd88 	bl	56e4 <__aeabi_dsub>
    3bd4:	f002 f8fa 	bl	5dcc <__aeabi_d2iz>
    3bd8:	2380      	movs	r3, #128	; 0x80
    3bda:	061b      	lsls	r3, r3, #24
    3bdc:	469c      	mov	ip, r3
    3bde:	4460      	add	r0, ip
    3be0:	e7f1      	b.n	3bc6 <__aeabi_d2uiz+0x1a>
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	41e00000 	.word	0x41e00000

00003be8 <__eqsf2>:
    3be8:	0243      	lsls	r3, r0, #9
    3bea:	b570      	push	{r4, r5, r6, lr}
    3bec:	0042      	lsls	r2, r0, #1
    3bee:	004c      	lsls	r4, r1, #1
    3bf0:	0a5d      	lsrs	r5, r3, #9
    3bf2:	0fc3      	lsrs	r3, r0, #31
    3bf4:	0248      	lsls	r0, r1, #9
    3bf6:	0e12      	lsrs	r2, r2, #24
    3bf8:	0a46      	lsrs	r6, r0, #9
    3bfa:	0e24      	lsrs	r4, r4, #24
    3bfc:	0fc9      	lsrs	r1, r1, #31
    3bfe:	2aff      	cmp	r2, #255	; 0xff
    3c00:	d00f      	beq.n	3c22 <__eqsf2+0x3a>
    3c02:	2cff      	cmp	r4, #255	; 0xff
    3c04:	d011      	beq.n	3c2a <__eqsf2+0x42>
    3c06:	2001      	movs	r0, #1
    3c08:	42a2      	cmp	r2, r4
    3c0a:	d000      	beq.n	3c0e <__eqsf2+0x26>
    3c0c:	bd70      	pop	{r4, r5, r6, pc}
    3c0e:	42b5      	cmp	r5, r6
    3c10:	d1fc      	bne.n	3c0c <__eqsf2+0x24>
    3c12:	428b      	cmp	r3, r1
    3c14:	d00d      	beq.n	3c32 <__eqsf2+0x4a>
    3c16:	2a00      	cmp	r2, #0
    3c18:	d1f8      	bne.n	3c0c <__eqsf2+0x24>
    3c1a:	0028      	movs	r0, r5
    3c1c:	1e43      	subs	r3, r0, #1
    3c1e:	4198      	sbcs	r0, r3
    3c20:	e7f4      	b.n	3c0c <__eqsf2+0x24>
    3c22:	2001      	movs	r0, #1
    3c24:	2d00      	cmp	r5, #0
    3c26:	d1f1      	bne.n	3c0c <__eqsf2+0x24>
    3c28:	e7eb      	b.n	3c02 <__eqsf2+0x1a>
    3c2a:	2001      	movs	r0, #1
    3c2c:	2e00      	cmp	r6, #0
    3c2e:	d1ed      	bne.n	3c0c <__eqsf2+0x24>
    3c30:	e7e9      	b.n	3c06 <__eqsf2+0x1e>
    3c32:	2000      	movs	r0, #0
    3c34:	e7ea      	b.n	3c0c <__eqsf2+0x24>
    3c36:	46c0      	nop			; (mov r8, r8)

00003c38 <__gesf2>:
    3c38:	0243      	lsls	r3, r0, #9
    3c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3c:	0042      	lsls	r2, r0, #1
    3c3e:	0a5d      	lsrs	r5, r3, #9
    3c40:	0fc3      	lsrs	r3, r0, #31
    3c42:	0248      	lsls	r0, r1, #9
    3c44:	0a44      	lsrs	r4, r0, #9
    3c46:	0048      	lsls	r0, r1, #1
    3c48:	0e12      	lsrs	r2, r2, #24
    3c4a:	0e00      	lsrs	r0, r0, #24
    3c4c:	0fc9      	lsrs	r1, r1, #31
    3c4e:	2aff      	cmp	r2, #255	; 0xff
    3c50:	d01f      	beq.n	3c92 <__gesf2+0x5a>
    3c52:	28ff      	cmp	r0, #255	; 0xff
    3c54:	d022      	beq.n	3c9c <__gesf2+0x64>
    3c56:	2a00      	cmp	r2, #0
    3c58:	d109      	bne.n	3c6e <__gesf2+0x36>
    3c5a:	426e      	negs	r6, r5
    3c5c:	416e      	adcs	r6, r5
    3c5e:	2800      	cmp	r0, #0
    3c60:	d10f      	bne.n	3c82 <__gesf2+0x4a>
    3c62:	2c00      	cmp	r4, #0
    3c64:	d10d      	bne.n	3c82 <__gesf2+0x4a>
    3c66:	2000      	movs	r0, #0
    3c68:	2d00      	cmp	r5, #0
    3c6a:	d009      	beq.n	3c80 <__gesf2+0x48>
    3c6c:	e005      	b.n	3c7a <__gesf2+0x42>
    3c6e:	2800      	cmp	r0, #0
    3c70:	d101      	bne.n	3c76 <__gesf2+0x3e>
    3c72:	2c00      	cmp	r4, #0
    3c74:	d001      	beq.n	3c7a <__gesf2+0x42>
    3c76:	428b      	cmp	r3, r1
    3c78:	d013      	beq.n	3ca2 <__gesf2+0x6a>
    3c7a:	4258      	negs	r0, r3
    3c7c:	2301      	movs	r3, #1
    3c7e:	4318      	orrs	r0, r3
    3c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c82:	2e00      	cmp	r6, #0
    3c84:	d0f7      	beq.n	3c76 <__gesf2+0x3e>
    3c86:	4248      	negs	r0, r1
    3c88:	4141      	adcs	r1, r0
    3c8a:	2001      	movs	r0, #1
    3c8c:	4249      	negs	r1, r1
    3c8e:	4308      	orrs	r0, r1
    3c90:	e7f6      	b.n	3c80 <__gesf2+0x48>
    3c92:	2d00      	cmp	r5, #0
    3c94:	d0dd      	beq.n	3c52 <__gesf2+0x1a>
    3c96:	2002      	movs	r0, #2
    3c98:	4240      	negs	r0, r0
    3c9a:	e7f1      	b.n	3c80 <__gesf2+0x48>
    3c9c:	2c00      	cmp	r4, #0
    3c9e:	d0da      	beq.n	3c56 <__gesf2+0x1e>
    3ca0:	e7f9      	b.n	3c96 <__gesf2+0x5e>
    3ca2:	4282      	cmp	r2, r0
    3ca4:	dce9      	bgt.n	3c7a <__gesf2+0x42>
    3ca6:	db04      	blt.n	3cb2 <__gesf2+0x7a>
    3ca8:	42a5      	cmp	r5, r4
    3caa:	d8e6      	bhi.n	3c7a <__gesf2+0x42>
    3cac:	2000      	movs	r0, #0
    3cae:	42a5      	cmp	r5, r4
    3cb0:	d2e6      	bcs.n	3c80 <__gesf2+0x48>
    3cb2:	4258      	negs	r0, r3
    3cb4:	4143      	adcs	r3, r0
    3cb6:	2001      	movs	r0, #1
    3cb8:	425b      	negs	r3, r3
    3cba:	4318      	orrs	r0, r3
    3cbc:	e7e0      	b.n	3c80 <__gesf2+0x48>
    3cbe:	46c0      	nop			; (mov r8, r8)

00003cc0 <__lesf2>:
    3cc0:	0243      	lsls	r3, r0, #9
    3cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cc4:	0042      	lsls	r2, r0, #1
    3cc6:	004c      	lsls	r4, r1, #1
    3cc8:	0a5e      	lsrs	r6, r3, #9
    3cca:	0fc3      	lsrs	r3, r0, #31
    3ccc:	0248      	lsls	r0, r1, #9
    3cce:	0e12      	lsrs	r2, r2, #24
    3cd0:	0a45      	lsrs	r5, r0, #9
    3cd2:	0e24      	lsrs	r4, r4, #24
    3cd4:	0fc9      	lsrs	r1, r1, #31
    3cd6:	2aff      	cmp	r2, #255	; 0xff
    3cd8:	d017      	beq.n	3d0a <__lesf2+0x4a>
    3cda:	2cff      	cmp	r4, #255	; 0xff
    3cdc:	d019      	beq.n	3d12 <__lesf2+0x52>
    3cde:	2a00      	cmp	r2, #0
    3ce0:	d10b      	bne.n	3cfa <__lesf2+0x3a>
    3ce2:	4270      	negs	r0, r6
    3ce4:	4170      	adcs	r0, r6
    3ce6:	2c00      	cmp	r4, #0
    3ce8:	d017      	beq.n	3d1a <__lesf2+0x5a>
    3cea:	2800      	cmp	r0, #0
    3cec:	d007      	beq.n	3cfe <__lesf2+0x3e>
    3cee:	4248      	negs	r0, r1
    3cf0:	4141      	adcs	r1, r0
    3cf2:	2001      	movs	r0, #1
    3cf4:	4249      	negs	r1, r1
    3cf6:	4308      	orrs	r0, r1
    3cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfa:	2c00      	cmp	r4, #0
    3cfc:	d013      	beq.n	3d26 <__lesf2+0x66>
    3cfe:	428b      	cmp	r3, r1
    3d00:	d014      	beq.n	3d2c <__lesf2+0x6c>
    3d02:	4258      	negs	r0, r3
    3d04:	2301      	movs	r3, #1
    3d06:	4318      	orrs	r0, r3
    3d08:	e7f6      	b.n	3cf8 <__lesf2+0x38>
    3d0a:	2002      	movs	r0, #2
    3d0c:	2e00      	cmp	r6, #0
    3d0e:	d1f3      	bne.n	3cf8 <__lesf2+0x38>
    3d10:	e7e3      	b.n	3cda <__lesf2+0x1a>
    3d12:	2002      	movs	r0, #2
    3d14:	2d00      	cmp	r5, #0
    3d16:	d1ef      	bne.n	3cf8 <__lesf2+0x38>
    3d18:	e7e1      	b.n	3cde <__lesf2+0x1e>
    3d1a:	2d00      	cmp	r5, #0
    3d1c:	d1e5      	bne.n	3cea <__lesf2+0x2a>
    3d1e:	2000      	movs	r0, #0
    3d20:	2e00      	cmp	r6, #0
    3d22:	d0e9      	beq.n	3cf8 <__lesf2+0x38>
    3d24:	e7ed      	b.n	3d02 <__lesf2+0x42>
    3d26:	2d00      	cmp	r5, #0
    3d28:	d1e9      	bne.n	3cfe <__lesf2+0x3e>
    3d2a:	e7ea      	b.n	3d02 <__lesf2+0x42>
    3d2c:	42a2      	cmp	r2, r4
    3d2e:	dce8      	bgt.n	3d02 <__lesf2+0x42>
    3d30:	db04      	blt.n	3d3c <__lesf2+0x7c>
    3d32:	42ae      	cmp	r6, r5
    3d34:	d8e5      	bhi.n	3d02 <__lesf2+0x42>
    3d36:	2000      	movs	r0, #0
    3d38:	42ae      	cmp	r6, r5
    3d3a:	d2dd      	bcs.n	3cf8 <__lesf2+0x38>
    3d3c:	4258      	negs	r0, r3
    3d3e:	4143      	adcs	r3, r0
    3d40:	2001      	movs	r0, #1
    3d42:	425b      	negs	r3, r3
    3d44:	4318      	orrs	r0, r3
    3d46:	e7d7      	b.n	3cf8 <__lesf2+0x38>

00003d48 <__aeabi_fmul>:
    3d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4a:	4657      	mov	r7, sl
    3d4c:	464e      	mov	r6, r9
    3d4e:	4645      	mov	r5, r8
    3d50:	0043      	lsls	r3, r0, #1
    3d52:	b4e0      	push	{r5, r6, r7}
    3d54:	0246      	lsls	r6, r0, #9
    3d56:	4688      	mov	r8, r1
    3d58:	0a76      	lsrs	r6, r6, #9
    3d5a:	0e1f      	lsrs	r7, r3, #24
    3d5c:	0fc4      	lsrs	r4, r0, #31
    3d5e:	2f00      	cmp	r7, #0
    3d60:	d047      	beq.n	3df2 <__aeabi_fmul+0xaa>
    3d62:	2fff      	cmp	r7, #255	; 0xff
    3d64:	d025      	beq.n	3db2 <__aeabi_fmul+0x6a>
    3d66:	2300      	movs	r3, #0
    3d68:	2580      	movs	r5, #128	; 0x80
    3d6a:	469a      	mov	sl, r3
    3d6c:	4699      	mov	r9, r3
    3d6e:	00f6      	lsls	r6, r6, #3
    3d70:	04ed      	lsls	r5, r5, #19
    3d72:	432e      	orrs	r6, r5
    3d74:	3f7f      	subs	r7, #127	; 0x7f
    3d76:	4643      	mov	r3, r8
    3d78:	4642      	mov	r2, r8
    3d7a:	025d      	lsls	r5, r3, #9
    3d7c:	0fd2      	lsrs	r2, r2, #31
    3d7e:	005b      	lsls	r3, r3, #1
    3d80:	0a6d      	lsrs	r5, r5, #9
    3d82:	0e1b      	lsrs	r3, r3, #24
    3d84:	4690      	mov	r8, r2
    3d86:	d040      	beq.n	3e0a <__aeabi_fmul+0xc2>
    3d88:	2bff      	cmp	r3, #255	; 0xff
    3d8a:	d039      	beq.n	3e00 <__aeabi_fmul+0xb8>
    3d8c:	2280      	movs	r2, #128	; 0x80
    3d8e:	2000      	movs	r0, #0
    3d90:	00ed      	lsls	r5, r5, #3
    3d92:	04d2      	lsls	r2, r2, #19
    3d94:	4315      	orrs	r5, r2
    3d96:	3b7f      	subs	r3, #127	; 0x7f
    3d98:	18fb      	adds	r3, r7, r3
    3d9a:	4642      	mov	r2, r8
    3d9c:	4657      	mov	r7, sl
    3d9e:	1c59      	adds	r1, r3, #1
    3da0:	4062      	eors	r2, r4
    3da2:	468c      	mov	ip, r1
    3da4:	4307      	orrs	r7, r0
    3da6:	2f0f      	cmp	r7, #15
    3da8:	d85c      	bhi.n	3e64 <__aeabi_fmul+0x11c>
    3daa:	496f      	ldr	r1, [pc, #444]	; (3f68 <__aeabi_fmul+0x220>)
    3dac:	00bf      	lsls	r7, r7, #2
    3dae:	59c9      	ldr	r1, [r1, r7]
    3db0:	468f      	mov	pc, r1
    3db2:	2e00      	cmp	r6, #0
    3db4:	d145      	bne.n	3e42 <__aeabi_fmul+0xfa>
    3db6:	2308      	movs	r3, #8
    3db8:	469a      	mov	sl, r3
    3dba:	3b06      	subs	r3, #6
    3dbc:	4699      	mov	r9, r3
    3dbe:	e7da      	b.n	3d76 <__aeabi_fmul+0x2e>
    3dc0:	4642      	mov	r2, r8
    3dc2:	2802      	cmp	r0, #2
    3dc4:	d02d      	beq.n	3e22 <__aeabi_fmul+0xda>
    3dc6:	2803      	cmp	r0, #3
    3dc8:	d100      	bne.n	3dcc <__aeabi_fmul+0x84>
    3dca:	e0c3      	b.n	3f54 <__aeabi_fmul+0x20c>
    3dcc:	2801      	cmp	r0, #1
    3dce:	d000      	beq.n	3dd2 <__aeabi_fmul+0x8a>
    3dd0:	e0a2      	b.n	3f18 <__aeabi_fmul+0x1d0>
    3dd2:	2500      	movs	r5, #0
    3dd4:	2600      	movs	r6, #0
    3dd6:	4002      	ands	r2, r0
    3dd8:	b2d4      	uxtb	r4, r2
    3dda:	0276      	lsls	r6, r6, #9
    3ddc:	05ed      	lsls	r5, r5, #23
    3dde:	0a76      	lsrs	r6, r6, #9
    3de0:	432e      	orrs	r6, r5
    3de2:	07e4      	lsls	r4, r4, #31
    3de4:	4326      	orrs	r6, r4
    3de6:	0030      	movs	r0, r6
    3de8:	bc1c      	pop	{r2, r3, r4}
    3dea:	4690      	mov	r8, r2
    3dec:	4699      	mov	r9, r3
    3dee:	46a2      	mov	sl, r4
    3df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3df2:	2e00      	cmp	r6, #0
    3df4:	d11a      	bne.n	3e2c <__aeabi_fmul+0xe4>
    3df6:	2304      	movs	r3, #4
    3df8:	469a      	mov	sl, r3
    3dfa:	3b03      	subs	r3, #3
    3dfc:	4699      	mov	r9, r3
    3dfe:	e7ba      	b.n	3d76 <__aeabi_fmul+0x2e>
    3e00:	002a      	movs	r2, r5
    3e02:	1e51      	subs	r1, r2, #1
    3e04:	418a      	sbcs	r2, r1
    3e06:	1c90      	adds	r0, r2, #2
    3e08:	e7c6      	b.n	3d98 <__aeabi_fmul+0x50>
    3e0a:	2001      	movs	r0, #1
    3e0c:	2d00      	cmp	r5, #0
    3e0e:	d0c3      	beq.n	3d98 <__aeabi_fmul+0x50>
    3e10:	0028      	movs	r0, r5
    3e12:	f002 f9f7 	bl	6204 <__clzsi2>
    3e16:	1f43      	subs	r3, r0, #5
    3e18:	3076      	adds	r0, #118	; 0x76
    3e1a:	409d      	lsls	r5, r3
    3e1c:	4243      	negs	r3, r0
    3e1e:	2000      	movs	r0, #0
    3e20:	e7ba      	b.n	3d98 <__aeabi_fmul+0x50>
    3e22:	2401      	movs	r4, #1
    3e24:	25ff      	movs	r5, #255	; 0xff
    3e26:	4014      	ands	r4, r2
    3e28:	2600      	movs	r6, #0
    3e2a:	e7d6      	b.n	3dda <__aeabi_fmul+0x92>
    3e2c:	0030      	movs	r0, r6
    3e2e:	f002 f9e9 	bl	6204 <__clzsi2>
    3e32:	1f43      	subs	r3, r0, #5
    3e34:	409e      	lsls	r6, r3
    3e36:	2300      	movs	r3, #0
    3e38:	3076      	adds	r0, #118	; 0x76
    3e3a:	4247      	negs	r7, r0
    3e3c:	469a      	mov	sl, r3
    3e3e:	4699      	mov	r9, r3
    3e40:	e799      	b.n	3d76 <__aeabi_fmul+0x2e>
    3e42:	230c      	movs	r3, #12
    3e44:	469a      	mov	sl, r3
    3e46:	3b09      	subs	r3, #9
    3e48:	4699      	mov	r9, r3
    3e4a:	e794      	b.n	3d76 <__aeabi_fmul+0x2e>
    3e4c:	2680      	movs	r6, #128	; 0x80
    3e4e:	2400      	movs	r4, #0
    3e50:	03f6      	lsls	r6, r6, #15
    3e52:	25ff      	movs	r5, #255	; 0xff
    3e54:	e7c1      	b.n	3dda <__aeabi_fmul+0x92>
    3e56:	0035      	movs	r5, r6
    3e58:	4648      	mov	r0, r9
    3e5a:	e7b2      	b.n	3dc2 <__aeabi_fmul+0x7a>
    3e5c:	0035      	movs	r5, r6
    3e5e:	0022      	movs	r2, r4
    3e60:	4648      	mov	r0, r9
    3e62:	e7ae      	b.n	3dc2 <__aeabi_fmul+0x7a>
    3e64:	0429      	lsls	r1, r5, #16
    3e66:	0c09      	lsrs	r1, r1, #16
    3e68:	0008      	movs	r0, r1
    3e6a:	0c37      	lsrs	r7, r6, #16
    3e6c:	0436      	lsls	r6, r6, #16
    3e6e:	0c36      	lsrs	r6, r6, #16
    3e70:	0c2c      	lsrs	r4, r5, #16
    3e72:	4379      	muls	r1, r7
    3e74:	4370      	muls	r0, r6
    3e76:	4367      	muls	r7, r4
    3e78:	4374      	muls	r4, r6
    3e7a:	0c06      	lsrs	r6, r0, #16
    3e7c:	1864      	adds	r4, r4, r1
    3e7e:	1936      	adds	r6, r6, r4
    3e80:	42b1      	cmp	r1, r6
    3e82:	d903      	bls.n	3e8c <__aeabi_fmul+0x144>
    3e84:	2180      	movs	r1, #128	; 0x80
    3e86:	0249      	lsls	r1, r1, #9
    3e88:	4688      	mov	r8, r1
    3e8a:	4447      	add	r7, r8
    3e8c:	0400      	lsls	r0, r0, #16
    3e8e:	0c00      	lsrs	r0, r0, #16
    3e90:	0431      	lsls	r1, r6, #16
    3e92:	1809      	adds	r1, r1, r0
    3e94:	018d      	lsls	r5, r1, #6
    3e96:	1e68      	subs	r0, r5, #1
    3e98:	4185      	sbcs	r5, r0
    3e9a:	0e89      	lsrs	r1, r1, #26
    3e9c:	4329      	orrs	r1, r5
    3e9e:	0c35      	lsrs	r5, r6, #16
    3ea0:	19ed      	adds	r5, r5, r7
    3ea2:	01ad      	lsls	r5, r5, #6
    3ea4:	430d      	orrs	r5, r1
    3ea6:	0129      	lsls	r1, r5, #4
    3ea8:	d504      	bpl.n	3eb4 <__aeabi_fmul+0x16c>
    3eaa:	2301      	movs	r3, #1
    3eac:	0869      	lsrs	r1, r5, #1
    3eae:	401d      	ands	r5, r3
    3eb0:	4663      	mov	r3, ip
    3eb2:	430d      	orrs	r5, r1
    3eb4:	0019      	movs	r1, r3
    3eb6:	317f      	adds	r1, #127	; 0x7f
    3eb8:	2900      	cmp	r1, #0
    3eba:	dd25      	ble.n	3f08 <__aeabi_fmul+0x1c0>
    3ebc:	0768      	lsls	r0, r5, #29
    3ebe:	d004      	beq.n	3eca <__aeabi_fmul+0x182>
    3ec0:	200f      	movs	r0, #15
    3ec2:	4028      	ands	r0, r5
    3ec4:	2804      	cmp	r0, #4
    3ec6:	d000      	beq.n	3eca <__aeabi_fmul+0x182>
    3ec8:	3504      	adds	r5, #4
    3eca:	0128      	lsls	r0, r5, #4
    3ecc:	d503      	bpl.n	3ed6 <__aeabi_fmul+0x18e>
    3ece:	4927      	ldr	r1, [pc, #156]	; (3f6c <__aeabi_fmul+0x224>)
    3ed0:	3380      	adds	r3, #128	; 0x80
    3ed2:	400d      	ands	r5, r1
    3ed4:	0019      	movs	r1, r3
    3ed6:	29fe      	cmp	r1, #254	; 0xfe
    3ed8:	dca3      	bgt.n	3e22 <__aeabi_fmul+0xda>
    3eda:	2401      	movs	r4, #1
    3edc:	01ad      	lsls	r5, r5, #6
    3ede:	0a6e      	lsrs	r6, r5, #9
    3ee0:	4014      	ands	r4, r2
    3ee2:	b2cd      	uxtb	r5, r1
    3ee4:	e779      	b.n	3dda <__aeabi_fmul+0x92>
    3ee6:	2080      	movs	r0, #128	; 0x80
    3ee8:	03c0      	lsls	r0, r0, #15
    3eea:	4206      	tst	r6, r0
    3eec:	d007      	beq.n	3efe <__aeabi_fmul+0x1b6>
    3eee:	4205      	tst	r5, r0
    3ef0:	d105      	bne.n	3efe <__aeabi_fmul+0x1b6>
    3ef2:	4328      	orrs	r0, r5
    3ef4:	0246      	lsls	r6, r0, #9
    3ef6:	0a76      	lsrs	r6, r6, #9
    3ef8:	4644      	mov	r4, r8
    3efa:	25ff      	movs	r5, #255	; 0xff
    3efc:	e76d      	b.n	3dda <__aeabi_fmul+0x92>
    3efe:	4306      	orrs	r6, r0
    3f00:	0276      	lsls	r6, r6, #9
    3f02:	0a76      	lsrs	r6, r6, #9
    3f04:	25ff      	movs	r5, #255	; 0xff
    3f06:	e768      	b.n	3dda <__aeabi_fmul+0x92>
    3f08:	2401      	movs	r4, #1
    3f0a:	1a61      	subs	r1, r4, r1
    3f0c:	291b      	cmp	r1, #27
    3f0e:	dd05      	ble.n	3f1c <__aeabi_fmul+0x1d4>
    3f10:	4014      	ands	r4, r2
    3f12:	2500      	movs	r5, #0
    3f14:	2600      	movs	r6, #0
    3f16:	e760      	b.n	3dda <__aeabi_fmul+0x92>
    3f18:	4663      	mov	r3, ip
    3f1a:	e7cb      	b.n	3eb4 <__aeabi_fmul+0x16c>
    3f1c:	002e      	movs	r6, r5
    3f1e:	2320      	movs	r3, #32
    3f20:	40ce      	lsrs	r6, r1
    3f22:	1a59      	subs	r1, r3, r1
    3f24:	408d      	lsls	r5, r1
    3f26:	1e6b      	subs	r3, r5, #1
    3f28:	419d      	sbcs	r5, r3
    3f2a:	432e      	orrs	r6, r5
    3f2c:	0773      	lsls	r3, r6, #29
    3f2e:	d004      	beq.n	3f3a <__aeabi_fmul+0x1f2>
    3f30:	230f      	movs	r3, #15
    3f32:	4033      	ands	r3, r6
    3f34:	2b04      	cmp	r3, #4
    3f36:	d000      	beq.n	3f3a <__aeabi_fmul+0x1f2>
    3f38:	3604      	adds	r6, #4
    3f3a:	0173      	lsls	r3, r6, #5
    3f3c:	d504      	bpl.n	3f48 <__aeabi_fmul+0x200>
    3f3e:	2401      	movs	r4, #1
    3f40:	2501      	movs	r5, #1
    3f42:	4014      	ands	r4, r2
    3f44:	2600      	movs	r6, #0
    3f46:	e748      	b.n	3dda <__aeabi_fmul+0x92>
    3f48:	2401      	movs	r4, #1
    3f4a:	01b6      	lsls	r6, r6, #6
    3f4c:	0a76      	lsrs	r6, r6, #9
    3f4e:	4014      	ands	r4, r2
    3f50:	2500      	movs	r5, #0
    3f52:	e742      	b.n	3dda <__aeabi_fmul+0x92>
    3f54:	2680      	movs	r6, #128	; 0x80
    3f56:	2401      	movs	r4, #1
    3f58:	03f6      	lsls	r6, r6, #15
    3f5a:	432e      	orrs	r6, r5
    3f5c:	0276      	lsls	r6, r6, #9
    3f5e:	0a76      	lsrs	r6, r6, #9
    3f60:	4014      	ands	r4, r2
    3f62:	25ff      	movs	r5, #255	; 0xff
    3f64:	e739      	b.n	3dda <__aeabi_fmul+0x92>
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	000065d8 	.word	0x000065d8
    3f6c:	f7ffffff 	.word	0xf7ffffff

00003f70 <__aeabi_fsub>:
    3f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f72:	024a      	lsls	r2, r1, #9
    3f74:	004e      	lsls	r6, r1, #1
    3f76:	0243      	lsls	r3, r0, #9
    3f78:	0044      	lsls	r4, r0, #1
    3f7a:	0e24      	lsrs	r4, r4, #24
    3f7c:	0fc5      	lsrs	r5, r0, #31
    3f7e:	099b      	lsrs	r3, r3, #6
    3f80:	0e36      	lsrs	r6, r6, #24
    3f82:	0fc9      	lsrs	r1, r1, #31
    3f84:	0992      	lsrs	r2, r2, #6
    3f86:	2eff      	cmp	r6, #255	; 0xff
    3f88:	d100      	bne.n	3f8c <__aeabi_fsub+0x1c>
    3f8a:	e083      	b.n	4094 <__aeabi_fsub+0x124>
    3f8c:	2001      	movs	r0, #1
    3f8e:	4041      	eors	r1, r0
    3f90:	1ba0      	subs	r0, r4, r6
    3f92:	42a9      	cmp	r1, r5
    3f94:	d05c      	beq.n	4050 <__aeabi_fsub+0xe0>
    3f96:	2800      	cmp	r0, #0
    3f98:	dc00      	bgt.n	3f9c <__aeabi_fsub+0x2c>
    3f9a:	e095      	b.n	40c8 <__aeabi_fsub+0x158>
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	d11c      	bne.n	3fda <__aeabi_fsub+0x6a>
    3fa0:	2a00      	cmp	r2, #0
    3fa2:	d000      	beq.n	3fa6 <__aeabi_fsub+0x36>
    3fa4:	e081      	b.n	40aa <__aeabi_fsub+0x13a>
    3fa6:	075a      	lsls	r2, r3, #29
    3fa8:	d004      	beq.n	3fb4 <__aeabi_fsub+0x44>
    3faa:	220f      	movs	r2, #15
    3fac:	401a      	ands	r2, r3
    3fae:	2a04      	cmp	r2, #4
    3fb0:	d000      	beq.n	3fb4 <__aeabi_fsub+0x44>
    3fb2:	3304      	adds	r3, #4
    3fb4:	015a      	lsls	r2, r3, #5
    3fb6:	d53b      	bpl.n	4030 <__aeabi_fsub+0xc0>
    3fb8:	3401      	adds	r4, #1
    3fba:	2cff      	cmp	r4, #255	; 0xff
    3fbc:	d100      	bne.n	3fc0 <__aeabi_fsub+0x50>
    3fbe:	e091      	b.n	40e4 <__aeabi_fsub+0x174>
    3fc0:	2001      	movs	r0, #1
    3fc2:	019b      	lsls	r3, r3, #6
    3fc4:	0a5b      	lsrs	r3, r3, #9
    3fc6:	b2e4      	uxtb	r4, r4
    3fc8:	4005      	ands	r5, r0
    3fca:	025b      	lsls	r3, r3, #9
    3fcc:	05e4      	lsls	r4, r4, #23
    3fce:	0a5b      	lsrs	r3, r3, #9
    3fd0:	07ed      	lsls	r5, r5, #31
    3fd2:	4323      	orrs	r3, r4
    3fd4:	432b      	orrs	r3, r5
    3fd6:	0018      	movs	r0, r3
    3fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fda:	2cff      	cmp	r4, #255	; 0xff
    3fdc:	d0e3      	beq.n	3fa6 <__aeabi_fsub+0x36>
    3fde:	2180      	movs	r1, #128	; 0x80
    3fe0:	04c9      	lsls	r1, r1, #19
    3fe2:	430a      	orrs	r2, r1
    3fe4:	281b      	cmp	r0, #27
    3fe6:	dd00      	ble.n	3fea <__aeabi_fsub+0x7a>
    3fe8:	e090      	b.n	410c <__aeabi_fsub+0x19c>
    3fea:	0016      	movs	r6, r2
    3fec:	2120      	movs	r1, #32
    3fee:	40c6      	lsrs	r6, r0
    3ff0:	1a08      	subs	r0, r1, r0
    3ff2:	4082      	lsls	r2, r0
    3ff4:	1e51      	subs	r1, r2, #1
    3ff6:	418a      	sbcs	r2, r1
    3ff8:	4332      	orrs	r2, r6
    3ffa:	1a9b      	subs	r3, r3, r2
    3ffc:	015a      	lsls	r2, r3, #5
    3ffe:	d515      	bpl.n	402c <__aeabi_fsub+0xbc>
    4000:	019b      	lsls	r3, r3, #6
    4002:	099e      	lsrs	r6, r3, #6
    4004:	0030      	movs	r0, r6
    4006:	f002 f8fd 	bl	6204 <__clzsi2>
    400a:	3805      	subs	r0, #5
    400c:	4086      	lsls	r6, r0
    400e:	4284      	cmp	r4, r0
    4010:	dc6c      	bgt.n	40ec <__aeabi_fsub+0x17c>
    4012:	1b04      	subs	r4, r0, r4
    4014:	0033      	movs	r3, r6
    4016:	2020      	movs	r0, #32
    4018:	3401      	adds	r4, #1
    401a:	40e3      	lsrs	r3, r4
    401c:	1b04      	subs	r4, r0, r4
    401e:	40a6      	lsls	r6, r4
    4020:	1e72      	subs	r2, r6, #1
    4022:	4196      	sbcs	r6, r2
    4024:	2400      	movs	r4, #0
    4026:	4333      	orrs	r3, r6
    4028:	e7bd      	b.n	3fa6 <__aeabi_fsub+0x36>
    402a:	000d      	movs	r5, r1
    402c:	075a      	lsls	r2, r3, #29
    402e:	d1bc      	bne.n	3faa <__aeabi_fsub+0x3a>
    4030:	08df      	lsrs	r7, r3, #3
    4032:	2301      	movs	r3, #1
    4034:	401d      	ands	r5, r3
    4036:	2cff      	cmp	r4, #255	; 0xff
    4038:	d133      	bne.n	40a2 <__aeabi_fsub+0x132>
    403a:	2f00      	cmp	r7, #0
    403c:	d100      	bne.n	4040 <__aeabi_fsub+0xd0>
    403e:	e090      	b.n	4162 <__aeabi_fsub+0x1f2>
    4040:	2280      	movs	r2, #128	; 0x80
    4042:	03d2      	lsls	r2, r2, #15
    4044:	0013      	movs	r3, r2
    4046:	433b      	orrs	r3, r7
    4048:	025b      	lsls	r3, r3, #9
    404a:	0a5b      	lsrs	r3, r3, #9
    404c:	24ff      	movs	r4, #255	; 0xff
    404e:	e7bc      	b.n	3fca <__aeabi_fsub+0x5a>
    4050:	2800      	cmp	r0, #0
    4052:	dd4f      	ble.n	40f4 <__aeabi_fsub+0x184>
    4054:	2e00      	cmp	r6, #0
    4056:	d02e      	beq.n	40b6 <__aeabi_fsub+0x146>
    4058:	2cff      	cmp	r4, #255	; 0xff
    405a:	d0a4      	beq.n	3fa6 <__aeabi_fsub+0x36>
    405c:	2580      	movs	r5, #128	; 0x80
    405e:	04ed      	lsls	r5, r5, #19
    4060:	432a      	orrs	r2, r5
    4062:	281b      	cmp	r0, #27
    4064:	dd00      	ble.n	4068 <__aeabi_fsub+0xf8>
    4066:	e097      	b.n	4198 <__aeabi_fsub+0x228>
    4068:	0016      	movs	r6, r2
    406a:	2520      	movs	r5, #32
    406c:	40c6      	lsrs	r6, r0
    406e:	1a28      	subs	r0, r5, r0
    4070:	4082      	lsls	r2, r0
    4072:	1e50      	subs	r0, r2, #1
    4074:	4182      	sbcs	r2, r0
    4076:	4332      	orrs	r2, r6
    4078:	189b      	adds	r3, r3, r2
    407a:	015a      	lsls	r2, r3, #5
    407c:	d5d5      	bpl.n	402a <__aeabi_fsub+0xba>
    407e:	3401      	adds	r4, #1
    4080:	2cff      	cmp	r4, #255	; 0xff
    4082:	d06d      	beq.n	4160 <__aeabi_fsub+0x1f0>
    4084:	2201      	movs	r2, #1
    4086:	487b      	ldr	r0, [pc, #492]	; (4274 <__aeabi_fsub+0x304>)
    4088:	401a      	ands	r2, r3
    408a:	085b      	lsrs	r3, r3, #1
    408c:	4003      	ands	r3, r0
    408e:	4313      	orrs	r3, r2
    4090:	000d      	movs	r5, r1
    4092:	e788      	b.n	3fa6 <__aeabi_fsub+0x36>
    4094:	2a00      	cmp	r2, #0
    4096:	d000      	beq.n	409a <__aeabi_fsub+0x12a>
    4098:	e77a      	b.n	3f90 <__aeabi_fsub+0x20>
    409a:	e777      	b.n	3f8c <__aeabi_fsub+0x1c>
    409c:	1e03      	subs	r3, r0, #0
    409e:	d1c5      	bne.n	402c <__aeabi_fsub+0xbc>
    40a0:	2500      	movs	r5, #0
    40a2:	027b      	lsls	r3, r7, #9
    40a4:	0a5b      	lsrs	r3, r3, #9
    40a6:	b2e4      	uxtb	r4, r4
    40a8:	e78f      	b.n	3fca <__aeabi_fsub+0x5a>
    40aa:	3801      	subs	r0, #1
    40ac:	2800      	cmp	r0, #0
    40ae:	d0a4      	beq.n	3ffa <__aeabi_fsub+0x8a>
    40b0:	2cff      	cmp	r4, #255	; 0xff
    40b2:	d197      	bne.n	3fe4 <__aeabi_fsub+0x74>
    40b4:	e777      	b.n	3fa6 <__aeabi_fsub+0x36>
    40b6:	2a00      	cmp	r2, #0
    40b8:	d100      	bne.n	40bc <__aeabi_fsub+0x14c>
    40ba:	e774      	b.n	3fa6 <__aeabi_fsub+0x36>
    40bc:	3801      	subs	r0, #1
    40be:	2800      	cmp	r0, #0
    40c0:	d0da      	beq.n	4078 <__aeabi_fsub+0x108>
    40c2:	2cff      	cmp	r4, #255	; 0xff
    40c4:	d1cd      	bne.n	4062 <__aeabi_fsub+0xf2>
    40c6:	e76e      	b.n	3fa6 <__aeabi_fsub+0x36>
    40c8:	2800      	cmp	r0, #0
    40ca:	d121      	bne.n	4110 <__aeabi_fsub+0x1a0>
    40cc:	1c60      	adds	r0, r4, #1
    40ce:	b2c0      	uxtb	r0, r0
    40d0:	2801      	cmp	r0, #1
    40d2:	dd58      	ble.n	4186 <__aeabi_fsub+0x216>
    40d4:	2780      	movs	r7, #128	; 0x80
    40d6:	1a9e      	subs	r6, r3, r2
    40d8:	04ff      	lsls	r7, r7, #19
    40da:	4037      	ands	r7, r6
    40dc:	d02f      	beq.n	413e <__aeabi_fsub+0x1ce>
    40de:	1ad6      	subs	r6, r2, r3
    40e0:	000d      	movs	r5, r1
    40e2:	e78f      	b.n	4004 <__aeabi_fsub+0x94>
    40e4:	2301      	movs	r3, #1
    40e6:	401d      	ands	r5, r3
    40e8:	2300      	movs	r3, #0
    40ea:	e76e      	b.n	3fca <__aeabi_fsub+0x5a>
    40ec:	4b62      	ldr	r3, [pc, #392]	; (4278 <__aeabi_fsub+0x308>)
    40ee:	1a24      	subs	r4, r4, r0
    40f0:	4033      	ands	r3, r6
    40f2:	e758      	b.n	3fa6 <__aeabi_fsub+0x36>
    40f4:	2800      	cmp	r0, #0
    40f6:	d151      	bne.n	419c <__aeabi_fsub+0x22c>
    40f8:	1c60      	adds	r0, r4, #1
    40fa:	b2c6      	uxtb	r6, r0
    40fc:	2e01      	cmp	r6, #1
    40fe:	dd33      	ble.n	4168 <__aeabi_fsub+0x1f8>
    4100:	28ff      	cmp	r0, #255	; 0xff
    4102:	d02d      	beq.n	4160 <__aeabi_fsub+0x1f0>
    4104:	189b      	adds	r3, r3, r2
    4106:	085b      	lsrs	r3, r3, #1
    4108:	0004      	movs	r4, r0
    410a:	e74c      	b.n	3fa6 <__aeabi_fsub+0x36>
    410c:	2201      	movs	r2, #1
    410e:	e774      	b.n	3ffa <__aeabi_fsub+0x8a>
    4110:	2c00      	cmp	r4, #0
    4112:	d01a      	beq.n	414a <__aeabi_fsub+0x1da>
    4114:	2eff      	cmp	r6, #255	; 0xff
    4116:	d01f      	beq.n	4158 <__aeabi_fsub+0x1e8>
    4118:	2480      	movs	r4, #128	; 0x80
    411a:	04e4      	lsls	r4, r4, #19
    411c:	4240      	negs	r0, r0
    411e:	4323      	orrs	r3, r4
    4120:	281b      	cmp	r0, #27
    4122:	dd00      	ble.n	4126 <__aeabi_fsub+0x1b6>
    4124:	e096      	b.n	4254 <__aeabi_fsub+0x2e4>
    4126:	001d      	movs	r5, r3
    4128:	2420      	movs	r4, #32
    412a:	40c5      	lsrs	r5, r0
    412c:	1a20      	subs	r0, r4, r0
    412e:	4083      	lsls	r3, r0
    4130:	1e58      	subs	r0, r3, #1
    4132:	4183      	sbcs	r3, r0
    4134:	432b      	orrs	r3, r5
    4136:	1ad3      	subs	r3, r2, r3
    4138:	0034      	movs	r4, r6
    413a:	000d      	movs	r5, r1
    413c:	e75e      	b.n	3ffc <__aeabi_fsub+0x8c>
    413e:	2e00      	cmp	r6, #0
    4140:	d000      	beq.n	4144 <__aeabi_fsub+0x1d4>
    4142:	e75f      	b.n	4004 <__aeabi_fsub+0x94>
    4144:	2500      	movs	r5, #0
    4146:	2400      	movs	r4, #0
    4148:	e7ab      	b.n	40a2 <__aeabi_fsub+0x132>
    414a:	2b00      	cmp	r3, #0
    414c:	d044      	beq.n	41d8 <__aeabi_fsub+0x268>
    414e:	43c0      	mvns	r0, r0
    4150:	2800      	cmp	r0, #0
    4152:	d0f0      	beq.n	4136 <__aeabi_fsub+0x1c6>
    4154:	2eff      	cmp	r6, #255	; 0xff
    4156:	d1e3      	bne.n	4120 <__aeabi_fsub+0x1b0>
    4158:	0013      	movs	r3, r2
    415a:	24ff      	movs	r4, #255	; 0xff
    415c:	000d      	movs	r5, r1
    415e:	e722      	b.n	3fa6 <__aeabi_fsub+0x36>
    4160:	000d      	movs	r5, r1
    4162:	24ff      	movs	r4, #255	; 0xff
    4164:	2300      	movs	r3, #0
    4166:	e730      	b.n	3fca <__aeabi_fsub+0x5a>
    4168:	2c00      	cmp	r4, #0
    416a:	d15d      	bne.n	4228 <__aeabi_fsub+0x2b8>
    416c:	2b00      	cmp	r3, #0
    416e:	d07d      	beq.n	426c <__aeabi_fsub+0x2fc>
    4170:	2a00      	cmp	r2, #0
    4172:	d100      	bne.n	4176 <__aeabi_fsub+0x206>
    4174:	e717      	b.n	3fa6 <__aeabi_fsub+0x36>
    4176:	189b      	adds	r3, r3, r2
    4178:	015a      	lsls	r2, r3, #5
    417a:	d400      	bmi.n	417e <__aeabi_fsub+0x20e>
    417c:	e756      	b.n	402c <__aeabi_fsub+0xbc>
    417e:	4a3e      	ldr	r2, [pc, #248]	; (4278 <__aeabi_fsub+0x308>)
    4180:	0004      	movs	r4, r0
    4182:	4013      	ands	r3, r2
    4184:	e70f      	b.n	3fa6 <__aeabi_fsub+0x36>
    4186:	2c00      	cmp	r4, #0
    4188:	d11e      	bne.n	41c8 <__aeabi_fsub+0x258>
    418a:	2b00      	cmp	r3, #0
    418c:	d12f      	bne.n	41ee <__aeabi_fsub+0x27e>
    418e:	2a00      	cmp	r2, #0
    4190:	d065      	beq.n	425e <__aeabi_fsub+0x2ee>
    4192:	0013      	movs	r3, r2
    4194:	000d      	movs	r5, r1
    4196:	e706      	b.n	3fa6 <__aeabi_fsub+0x36>
    4198:	2201      	movs	r2, #1
    419a:	e76d      	b.n	4078 <__aeabi_fsub+0x108>
    419c:	2c00      	cmp	r4, #0
    419e:	d11f      	bne.n	41e0 <__aeabi_fsub+0x270>
    41a0:	2b00      	cmp	r3, #0
    41a2:	d059      	beq.n	4258 <__aeabi_fsub+0x2e8>
    41a4:	43c0      	mvns	r0, r0
    41a6:	2800      	cmp	r0, #0
    41a8:	d00b      	beq.n	41c2 <__aeabi_fsub+0x252>
    41aa:	2eff      	cmp	r6, #255	; 0xff
    41ac:	d04f      	beq.n	424e <__aeabi_fsub+0x2de>
    41ae:	281b      	cmp	r0, #27
    41b0:	dc5e      	bgt.n	4270 <__aeabi_fsub+0x300>
    41b2:	001d      	movs	r5, r3
    41b4:	2420      	movs	r4, #32
    41b6:	40c5      	lsrs	r5, r0
    41b8:	1a20      	subs	r0, r4, r0
    41ba:	4083      	lsls	r3, r0
    41bc:	1e58      	subs	r0, r3, #1
    41be:	4183      	sbcs	r3, r0
    41c0:	432b      	orrs	r3, r5
    41c2:	189b      	adds	r3, r3, r2
    41c4:	0034      	movs	r4, r6
    41c6:	e758      	b.n	407a <__aeabi_fsub+0x10a>
    41c8:	2b00      	cmp	r3, #0
    41ca:	d11c      	bne.n	4206 <__aeabi_fsub+0x296>
    41cc:	2a00      	cmp	r2, #0
    41ce:	d049      	beq.n	4264 <__aeabi_fsub+0x2f4>
    41d0:	0013      	movs	r3, r2
    41d2:	000d      	movs	r5, r1
    41d4:	24ff      	movs	r4, #255	; 0xff
    41d6:	e6e6      	b.n	3fa6 <__aeabi_fsub+0x36>
    41d8:	0013      	movs	r3, r2
    41da:	0034      	movs	r4, r6
    41dc:	000d      	movs	r5, r1
    41de:	e6e2      	b.n	3fa6 <__aeabi_fsub+0x36>
    41e0:	2eff      	cmp	r6, #255	; 0xff
    41e2:	d034      	beq.n	424e <__aeabi_fsub+0x2de>
    41e4:	2480      	movs	r4, #128	; 0x80
    41e6:	04e4      	lsls	r4, r4, #19
    41e8:	4240      	negs	r0, r0
    41ea:	4323      	orrs	r3, r4
    41ec:	e7df      	b.n	41ae <__aeabi_fsub+0x23e>
    41ee:	2a00      	cmp	r2, #0
    41f0:	d100      	bne.n	41f4 <__aeabi_fsub+0x284>
    41f2:	e6d8      	b.n	3fa6 <__aeabi_fsub+0x36>
    41f4:	2780      	movs	r7, #128	; 0x80
    41f6:	1a98      	subs	r0, r3, r2
    41f8:	04ff      	lsls	r7, r7, #19
    41fa:	4007      	ands	r7, r0
    41fc:	d100      	bne.n	4200 <__aeabi_fsub+0x290>
    41fe:	e74d      	b.n	409c <__aeabi_fsub+0x12c>
    4200:	1ad3      	subs	r3, r2, r3
    4202:	000d      	movs	r5, r1
    4204:	e6cf      	b.n	3fa6 <__aeabi_fsub+0x36>
    4206:	24ff      	movs	r4, #255	; 0xff
    4208:	2a00      	cmp	r2, #0
    420a:	d100      	bne.n	420e <__aeabi_fsub+0x29e>
    420c:	e6cb      	b.n	3fa6 <__aeabi_fsub+0x36>
    420e:	2080      	movs	r0, #128	; 0x80
    4210:	08db      	lsrs	r3, r3, #3
    4212:	03c0      	lsls	r0, r0, #15
    4214:	4203      	tst	r3, r0
    4216:	d004      	beq.n	4222 <__aeabi_fsub+0x2b2>
    4218:	08d2      	lsrs	r2, r2, #3
    421a:	4202      	tst	r2, r0
    421c:	d101      	bne.n	4222 <__aeabi_fsub+0x2b2>
    421e:	0013      	movs	r3, r2
    4220:	000d      	movs	r5, r1
    4222:	00db      	lsls	r3, r3, #3
    4224:	24ff      	movs	r4, #255	; 0xff
    4226:	e6be      	b.n	3fa6 <__aeabi_fsub+0x36>
    4228:	2b00      	cmp	r3, #0
    422a:	d010      	beq.n	424e <__aeabi_fsub+0x2de>
    422c:	24ff      	movs	r4, #255	; 0xff
    422e:	2a00      	cmp	r2, #0
    4230:	d100      	bne.n	4234 <__aeabi_fsub+0x2c4>
    4232:	e6b8      	b.n	3fa6 <__aeabi_fsub+0x36>
    4234:	2080      	movs	r0, #128	; 0x80
    4236:	08db      	lsrs	r3, r3, #3
    4238:	03c0      	lsls	r0, r0, #15
    423a:	4203      	tst	r3, r0
    423c:	d003      	beq.n	4246 <__aeabi_fsub+0x2d6>
    423e:	08d2      	lsrs	r2, r2, #3
    4240:	4202      	tst	r2, r0
    4242:	d100      	bne.n	4246 <__aeabi_fsub+0x2d6>
    4244:	0013      	movs	r3, r2
    4246:	00db      	lsls	r3, r3, #3
    4248:	000d      	movs	r5, r1
    424a:	24ff      	movs	r4, #255	; 0xff
    424c:	e6ab      	b.n	3fa6 <__aeabi_fsub+0x36>
    424e:	0013      	movs	r3, r2
    4250:	24ff      	movs	r4, #255	; 0xff
    4252:	e6a8      	b.n	3fa6 <__aeabi_fsub+0x36>
    4254:	2301      	movs	r3, #1
    4256:	e76e      	b.n	4136 <__aeabi_fsub+0x1c6>
    4258:	0013      	movs	r3, r2
    425a:	0034      	movs	r4, r6
    425c:	e6a3      	b.n	3fa6 <__aeabi_fsub+0x36>
    425e:	2700      	movs	r7, #0
    4260:	2500      	movs	r5, #0
    4262:	e71e      	b.n	40a2 <__aeabi_fsub+0x132>
    4264:	2780      	movs	r7, #128	; 0x80
    4266:	2500      	movs	r5, #0
    4268:	03ff      	lsls	r7, r7, #15
    426a:	e6e9      	b.n	4040 <__aeabi_fsub+0xd0>
    426c:	0013      	movs	r3, r2
    426e:	e69a      	b.n	3fa6 <__aeabi_fsub+0x36>
    4270:	2301      	movs	r3, #1
    4272:	e7a6      	b.n	41c2 <__aeabi_fsub+0x252>
    4274:	7dffffff 	.word	0x7dffffff
    4278:	fbffffff 	.word	0xfbffffff

0000427c <__aeabi_f2iz>:
    427c:	0243      	lsls	r3, r0, #9
    427e:	0a59      	lsrs	r1, r3, #9
    4280:	0043      	lsls	r3, r0, #1
    4282:	0fc2      	lsrs	r2, r0, #31
    4284:	0e1b      	lsrs	r3, r3, #24
    4286:	2000      	movs	r0, #0
    4288:	2b7e      	cmp	r3, #126	; 0x7e
    428a:	dd0e      	ble.n	42aa <__aeabi_f2iz+0x2e>
    428c:	2b9d      	cmp	r3, #157	; 0x9d
    428e:	dc0d      	bgt.n	42ac <__aeabi_f2iz+0x30>
    4290:	2080      	movs	r0, #128	; 0x80
    4292:	0400      	lsls	r0, r0, #16
    4294:	4301      	orrs	r1, r0
    4296:	2b95      	cmp	r3, #149	; 0x95
    4298:	dc0b      	bgt.n	42b2 <__aeabi_f2iz+0x36>
    429a:	2096      	movs	r0, #150	; 0x96
    429c:	1ac3      	subs	r3, r0, r3
    429e:	40d9      	lsrs	r1, r3
    42a0:	000b      	movs	r3, r1
    42a2:	4258      	negs	r0, r3
    42a4:	2a00      	cmp	r2, #0
    42a6:	d100      	bne.n	42aa <__aeabi_f2iz+0x2e>
    42a8:	0018      	movs	r0, r3
    42aa:	4770      	bx	lr
    42ac:	4b03      	ldr	r3, [pc, #12]	; (42bc <__aeabi_f2iz+0x40>)
    42ae:	18d0      	adds	r0, r2, r3
    42b0:	e7fb      	b.n	42aa <__aeabi_f2iz+0x2e>
    42b2:	3b96      	subs	r3, #150	; 0x96
    42b4:	4099      	lsls	r1, r3
    42b6:	000b      	movs	r3, r1
    42b8:	e7f3      	b.n	42a2 <__aeabi_f2iz+0x26>
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	7fffffff 	.word	0x7fffffff

000042c0 <__aeabi_i2f>:
    42c0:	b570      	push	{r4, r5, r6, lr}
    42c2:	2800      	cmp	r0, #0
    42c4:	d030      	beq.n	4328 <__aeabi_i2f+0x68>
    42c6:	17c3      	asrs	r3, r0, #31
    42c8:	18c5      	adds	r5, r0, r3
    42ca:	405d      	eors	r5, r3
    42cc:	0fc4      	lsrs	r4, r0, #31
    42ce:	0028      	movs	r0, r5
    42d0:	f001 ff98 	bl	6204 <__clzsi2>
    42d4:	239e      	movs	r3, #158	; 0x9e
    42d6:	1a1b      	subs	r3, r3, r0
    42d8:	2b96      	cmp	r3, #150	; 0x96
    42da:	dc0d      	bgt.n	42f8 <__aeabi_i2f+0x38>
    42dc:	2296      	movs	r2, #150	; 0x96
    42de:	1ad2      	subs	r2, r2, r3
    42e0:	4095      	lsls	r5, r2
    42e2:	026a      	lsls	r2, r5, #9
    42e4:	0a52      	lsrs	r2, r2, #9
    42e6:	b2d8      	uxtb	r0, r3
    42e8:	0252      	lsls	r2, r2, #9
    42ea:	05c0      	lsls	r0, r0, #23
    42ec:	0a52      	lsrs	r2, r2, #9
    42ee:	07e4      	lsls	r4, r4, #31
    42f0:	4302      	orrs	r2, r0
    42f2:	4322      	orrs	r2, r4
    42f4:	0010      	movs	r0, r2
    42f6:	bd70      	pop	{r4, r5, r6, pc}
    42f8:	2b99      	cmp	r3, #153	; 0x99
    42fa:	dc19      	bgt.n	4330 <__aeabi_i2f+0x70>
    42fc:	2299      	movs	r2, #153	; 0x99
    42fe:	1ad2      	subs	r2, r2, r3
    4300:	4095      	lsls	r5, r2
    4302:	4a12      	ldr	r2, [pc, #72]	; (434c <__aeabi_i2f+0x8c>)
    4304:	402a      	ands	r2, r5
    4306:	0769      	lsls	r1, r5, #29
    4308:	d004      	beq.n	4314 <__aeabi_i2f+0x54>
    430a:	210f      	movs	r1, #15
    430c:	400d      	ands	r5, r1
    430e:	2d04      	cmp	r5, #4
    4310:	d000      	beq.n	4314 <__aeabi_i2f+0x54>
    4312:	3204      	adds	r2, #4
    4314:	0151      	lsls	r1, r2, #5
    4316:	d503      	bpl.n	4320 <__aeabi_i2f+0x60>
    4318:	4b0c      	ldr	r3, [pc, #48]	; (434c <__aeabi_i2f+0x8c>)
    431a:	401a      	ands	r2, r3
    431c:	239f      	movs	r3, #159	; 0x9f
    431e:	1a1b      	subs	r3, r3, r0
    4320:	0192      	lsls	r2, r2, #6
    4322:	0a52      	lsrs	r2, r2, #9
    4324:	b2d8      	uxtb	r0, r3
    4326:	e7df      	b.n	42e8 <__aeabi_i2f+0x28>
    4328:	2400      	movs	r4, #0
    432a:	2000      	movs	r0, #0
    432c:	2200      	movs	r2, #0
    432e:	e7db      	b.n	42e8 <__aeabi_i2f+0x28>
    4330:	2205      	movs	r2, #5
    4332:	002e      	movs	r6, r5
    4334:	1a12      	subs	r2, r2, r0
    4336:	21b9      	movs	r1, #185	; 0xb9
    4338:	40d6      	lsrs	r6, r2
    433a:	002a      	movs	r2, r5
    433c:	1ac9      	subs	r1, r1, r3
    433e:	408a      	lsls	r2, r1
    4340:	1e55      	subs	r5, r2, #1
    4342:	41aa      	sbcs	r2, r5
    4344:	0035      	movs	r5, r6
    4346:	4315      	orrs	r5, r2
    4348:	e7db      	b.n	4302 <__aeabi_i2f+0x42>
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	fbffffff 	.word	0xfbffffff

00004350 <__aeabi_dadd>:
    4350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4352:	4656      	mov	r6, sl
    4354:	465f      	mov	r7, fp
    4356:	464d      	mov	r5, r9
    4358:	4644      	mov	r4, r8
    435a:	b4f0      	push	{r4, r5, r6, r7}
    435c:	000f      	movs	r7, r1
    435e:	0ffd      	lsrs	r5, r7, #31
    4360:	46aa      	mov	sl, r5
    4362:	0309      	lsls	r1, r1, #12
    4364:	007c      	lsls	r4, r7, #1
    4366:	002e      	movs	r6, r5
    4368:	005f      	lsls	r7, r3, #1
    436a:	0f45      	lsrs	r5, r0, #29
    436c:	0a49      	lsrs	r1, r1, #9
    436e:	0d7f      	lsrs	r7, r7, #21
    4370:	4329      	orrs	r1, r5
    4372:	00c5      	lsls	r5, r0, #3
    4374:	0318      	lsls	r0, r3, #12
    4376:	46bc      	mov	ip, r7
    4378:	0a40      	lsrs	r0, r0, #9
    437a:	0f57      	lsrs	r7, r2, #29
    437c:	0d64      	lsrs	r4, r4, #21
    437e:	0fdb      	lsrs	r3, r3, #31
    4380:	4338      	orrs	r0, r7
    4382:	00d2      	lsls	r2, r2, #3
    4384:	459a      	cmp	sl, r3
    4386:	d100      	bne.n	438a <__aeabi_dadd+0x3a>
    4388:	e0aa      	b.n	44e0 <__aeabi_dadd+0x190>
    438a:	4666      	mov	r6, ip
    438c:	1ba6      	subs	r6, r4, r6
    438e:	2e00      	cmp	r6, #0
    4390:	dc00      	bgt.n	4394 <__aeabi_dadd+0x44>
    4392:	e0ff      	b.n	4594 <__aeabi_dadd+0x244>
    4394:	4663      	mov	r3, ip
    4396:	2b00      	cmp	r3, #0
    4398:	d139      	bne.n	440e <__aeabi_dadd+0xbe>
    439a:	0003      	movs	r3, r0
    439c:	4313      	orrs	r3, r2
    439e:	d000      	beq.n	43a2 <__aeabi_dadd+0x52>
    43a0:	e0d9      	b.n	4556 <__aeabi_dadd+0x206>
    43a2:	076b      	lsls	r3, r5, #29
    43a4:	d009      	beq.n	43ba <__aeabi_dadd+0x6a>
    43a6:	230f      	movs	r3, #15
    43a8:	402b      	ands	r3, r5
    43aa:	2b04      	cmp	r3, #4
    43ac:	d005      	beq.n	43ba <__aeabi_dadd+0x6a>
    43ae:	1d2b      	adds	r3, r5, #4
    43b0:	42ab      	cmp	r3, r5
    43b2:	41ad      	sbcs	r5, r5
    43b4:	426d      	negs	r5, r5
    43b6:	1949      	adds	r1, r1, r5
    43b8:	001d      	movs	r5, r3
    43ba:	020b      	lsls	r3, r1, #8
    43bc:	d400      	bmi.n	43c0 <__aeabi_dadd+0x70>
    43be:	e082      	b.n	44c6 <__aeabi_dadd+0x176>
    43c0:	4bca      	ldr	r3, [pc, #808]	; (46ec <__aeabi_dadd+0x39c>)
    43c2:	3401      	adds	r4, #1
    43c4:	429c      	cmp	r4, r3
    43c6:	d100      	bne.n	43ca <__aeabi_dadd+0x7a>
    43c8:	e0fe      	b.n	45c8 <__aeabi_dadd+0x278>
    43ca:	000a      	movs	r2, r1
    43cc:	4656      	mov	r6, sl
    43ce:	4bc8      	ldr	r3, [pc, #800]	; (46f0 <__aeabi_dadd+0x3a0>)
    43d0:	08ed      	lsrs	r5, r5, #3
    43d2:	401a      	ands	r2, r3
    43d4:	0750      	lsls	r0, r2, #29
    43d6:	0564      	lsls	r4, r4, #21
    43d8:	0252      	lsls	r2, r2, #9
    43da:	4305      	orrs	r5, r0
    43dc:	0b12      	lsrs	r2, r2, #12
    43de:	0d64      	lsrs	r4, r4, #21
    43e0:	2100      	movs	r1, #0
    43e2:	0312      	lsls	r2, r2, #12
    43e4:	0d0b      	lsrs	r3, r1, #20
    43e6:	051b      	lsls	r3, r3, #20
    43e8:	0564      	lsls	r4, r4, #21
    43ea:	0b12      	lsrs	r2, r2, #12
    43ec:	431a      	orrs	r2, r3
    43ee:	0863      	lsrs	r3, r4, #1
    43f0:	4cc0      	ldr	r4, [pc, #768]	; (46f4 <__aeabi_dadd+0x3a4>)
    43f2:	07f6      	lsls	r6, r6, #31
    43f4:	4014      	ands	r4, r2
    43f6:	431c      	orrs	r4, r3
    43f8:	0064      	lsls	r4, r4, #1
    43fa:	0864      	lsrs	r4, r4, #1
    43fc:	4334      	orrs	r4, r6
    43fe:	0028      	movs	r0, r5
    4400:	0021      	movs	r1, r4
    4402:	bc3c      	pop	{r2, r3, r4, r5}
    4404:	4690      	mov	r8, r2
    4406:	4699      	mov	r9, r3
    4408:	46a2      	mov	sl, r4
    440a:	46ab      	mov	fp, r5
    440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    440e:	4bb7      	ldr	r3, [pc, #732]	; (46ec <__aeabi_dadd+0x39c>)
    4410:	429c      	cmp	r4, r3
    4412:	d0c6      	beq.n	43a2 <__aeabi_dadd+0x52>
    4414:	2380      	movs	r3, #128	; 0x80
    4416:	041b      	lsls	r3, r3, #16
    4418:	4318      	orrs	r0, r3
    441a:	2e38      	cmp	r6, #56	; 0x38
    441c:	dd00      	ble.n	4420 <__aeabi_dadd+0xd0>
    441e:	e0eb      	b.n	45f8 <__aeabi_dadd+0x2a8>
    4420:	2e1f      	cmp	r6, #31
    4422:	dd00      	ble.n	4426 <__aeabi_dadd+0xd6>
    4424:	e11e      	b.n	4664 <__aeabi_dadd+0x314>
    4426:	2320      	movs	r3, #32
    4428:	1b9b      	subs	r3, r3, r6
    442a:	469c      	mov	ip, r3
    442c:	0003      	movs	r3, r0
    442e:	4667      	mov	r7, ip
    4430:	40bb      	lsls	r3, r7
    4432:	4698      	mov	r8, r3
    4434:	0013      	movs	r3, r2
    4436:	4647      	mov	r7, r8
    4438:	40f3      	lsrs	r3, r6
    443a:	433b      	orrs	r3, r7
    443c:	4667      	mov	r7, ip
    443e:	40ba      	lsls	r2, r7
    4440:	1e57      	subs	r7, r2, #1
    4442:	41ba      	sbcs	r2, r7
    4444:	4313      	orrs	r3, r2
    4446:	0002      	movs	r2, r0
    4448:	40f2      	lsrs	r2, r6
    444a:	1aeb      	subs	r3, r5, r3
    444c:	429d      	cmp	r5, r3
    444e:	41b6      	sbcs	r6, r6
    4450:	001d      	movs	r5, r3
    4452:	1a8a      	subs	r2, r1, r2
    4454:	4276      	negs	r6, r6
    4456:	1b91      	subs	r1, r2, r6
    4458:	020b      	lsls	r3, r1, #8
    445a:	d531      	bpl.n	44c0 <__aeabi_dadd+0x170>
    445c:	024a      	lsls	r2, r1, #9
    445e:	0a56      	lsrs	r6, r2, #9
    4460:	2e00      	cmp	r6, #0
    4462:	d100      	bne.n	4466 <__aeabi_dadd+0x116>
    4464:	e0b4      	b.n	45d0 <__aeabi_dadd+0x280>
    4466:	0030      	movs	r0, r6
    4468:	f001 fecc 	bl	6204 <__clzsi2>
    446c:	0003      	movs	r3, r0
    446e:	3b08      	subs	r3, #8
    4470:	2b1f      	cmp	r3, #31
    4472:	dd00      	ble.n	4476 <__aeabi_dadd+0x126>
    4474:	e0b5      	b.n	45e2 <__aeabi_dadd+0x292>
    4476:	2220      	movs	r2, #32
    4478:	0029      	movs	r1, r5
    447a:	1ad2      	subs	r2, r2, r3
    447c:	40d1      	lsrs	r1, r2
    447e:	409e      	lsls	r6, r3
    4480:	000a      	movs	r2, r1
    4482:	409d      	lsls	r5, r3
    4484:	4332      	orrs	r2, r6
    4486:	429c      	cmp	r4, r3
    4488:	dd00      	ble.n	448c <__aeabi_dadd+0x13c>
    448a:	e0b1      	b.n	45f0 <__aeabi_dadd+0x2a0>
    448c:	1b1c      	subs	r4, r3, r4
    448e:	1c63      	adds	r3, r4, #1
    4490:	2b1f      	cmp	r3, #31
    4492:	dd00      	ble.n	4496 <__aeabi_dadd+0x146>
    4494:	e0d5      	b.n	4642 <__aeabi_dadd+0x2f2>
    4496:	2120      	movs	r1, #32
    4498:	0014      	movs	r4, r2
    449a:	0028      	movs	r0, r5
    449c:	1ac9      	subs	r1, r1, r3
    449e:	408c      	lsls	r4, r1
    44a0:	40d8      	lsrs	r0, r3
    44a2:	408d      	lsls	r5, r1
    44a4:	4304      	orrs	r4, r0
    44a6:	40da      	lsrs	r2, r3
    44a8:	1e68      	subs	r0, r5, #1
    44aa:	4185      	sbcs	r5, r0
    44ac:	0011      	movs	r1, r2
    44ae:	4325      	orrs	r5, r4
    44b0:	2400      	movs	r4, #0
    44b2:	e776      	b.n	43a2 <__aeabi_dadd+0x52>
    44b4:	4641      	mov	r1, r8
    44b6:	4331      	orrs	r1, r6
    44b8:	d100      	bne.n	44bc <__aeabi_dadd+0x16c>
    44ba:	e234      	b.n	4926 <__aeabi_dadd+0x5d6>
    44bc:	0031      	movs	r1, r6
    44be:	4645      	mov	r5, r8
    44c0:	076b      	lsls	r3, r5, #29
    44c2:	d000      	beq.n	44c6 <__aeabi_dadd+0x176>
    44c4:	e76f      	b.n	43a6 <__aeabi_dadd+0x56>
    44c6:	4656      	mov	r6, sl
    44c8:	0748      	lsls	r0, r1, #29
    44ca:	08ed      	lsrs	r5, r5, #3
    44cc:	08c9      	lsrs	r1, r1, #3
    44ce:	4305      	orrs	r5, r0
    44d0:	4b86      	ldr	r3, [pc, #536]	; (46ec <__aeabi_dadd+0x39c>)
    44d2:	429c      	cmp	r4, r3
    44d4:	d035      	beq.n	4542 <__aeabi_dadd+0x1f2>
    44d6:	030a      	lsls	r2, r1, #12
    44d8:	0564      	lsls	r4, r4, #21
    44da:	0b12      	lsrs	r2, r2, #12
    44dc:	0d64      	lsrs	r4, r4, #21
    44de:	e77f      	b.n	43e0 <__aeabi_dadd+0x90>
    44e0:	4663      	mov	r3, ip
    44e2:	1ae3      	subs	r3, r4, r3
    44e4:	469b      	mov	fp, r3
    44e6:	2b00      	cmp	r3, #0
    44e8:	dc00      	bgt.n	44ec <__aeabi_dadd+0x19c>
    44ea:	e08b      	b.n	4604 <__aeabi_dadd+0x2b4>
    44ec:	4667      	mov	r7, ip
    44ee:	2f00      	cmp	r7, #0
    44f0:	d03c      	beq.n	456c <__aeabi_dadd+0x21c>
    44f2:	4f7e      	ldr	r7, [pc, #504]	; (46ec <__aeabi_dadd+0x39c>)
    44f4:	42bc      	cmp	r4, r7
    44f6:	d100      	bne.n	44fa <__aeabi_dadd+0x1aa>
    44f8:	e753      	b.n	43a2 <__aeabi_dadd+0x52>
    44fa:	2780      	movs	r7, #128	; 0x80
    44fc:	043f      	lsls	r7, r7, #16
    44fe:	4338      	orrs	r0, r7
    4500:	465b      	mov	r3, fp
    4502:	2b38      	cmp	r3, #56	; 0x38
    4504:	dc00      	bgt.n	4508 <__aeabi_dadd+0x1b8>
    4506:	e0f7      	b.n	46f8 <__aeabi_dadd+0x3a8>
    4508:	4302      	orrs	r2, r0
    450a:	1e50      	subs	r0, r2, #1
    450c:	4182      	sbcs	r2, r0
    450e:	2000      	movs	r0, #0
    4510:	b2d2      	uxtb	r2, r2
    4512:	1953      	adds	r3, r2, r5
    4514:	1842      	adds	r2, r0, r1
    4516:	42ab      	cmp	r3, r5
    4518:	4189      	sbcs	r1, r1
    451a:	001d      	movs	r5, r3
    451c:	4249      	negs	r1, r1
    451e:	1889      	adds	r1, r1, r2
    4520:	020b      	lsls	r3, r1, #8
    4522:	d5cd      	bpl.n	44c0 <__aeabi_dadd+0x170>
    4524:	4b71      	ldr	r3, [pc, #452]	; (46ec <__aeabi_dadd+0x39c>)
    4526:	3401      	adds	r4, #1
    4528:	429c      	cmp	r4, r3
    452a:	d100      	bne.n	452e <__aeabi_dadd+0x1de>
    452c:	e13d      	b.n	47aa <__aeabi_dadd+0x45a>
    452e:	2001      	movs	r0, #1
    4530:	4a6f      	ldr	r2, [pc, #444]	; (46f0 <__aeabi_dadd+0x3a0>)
    4532:	086b      	lsrs	r3, r5, #1
    4534:	400a      	ands	r2, r1
    4536:	4028      	ands	r0, r5
    4538:	4318      	orrs	r0, r3
    453a:	07d5      	lsls	r5, r2, #31
    453c:	4305      	orrs	r5, r0
    453e:	0851      	lsrs	r1, r2, #1
    4540:	e72f      	b.n	43a2 <__aeabi_dadd+0x52>
    4542:	002b      	movs	r3, r5
    4544:	430b      	orrs	r3, r1
    4546:	d100      	bne.n	454a <__aeabi_dadd+0x1fa>
    4548:	e1cb      	b.n	48e2 <__aeabi_dadd+0x592>
    454a:	2380      	movs	r3, #128	; 0x80
    454c:	031b      	lsls	r3, r3, #12
    454e:	430b      	orrs	r3, r1
    4550:	031a      	lsls	r2, r3, #12
    4552:	0b12      	lsrs	r2, r2, #12
    4554:	e744      	b.n	43e0 <__aeabi_dadd+0x90>
    4556:	3e01      	subs	r6, #1
    4558:	2e00      	cmp	r6, #0
    455a:	d16d      	bne.n	4638 <__aeabi_dadd+0x2e8>
    455c:	1aae      	subs	r6, r5, r2
    455e:	42b5      	cmp	r5, r6
    4560:	419b      	sbcs	r3, r3
    4562:	1a09      	subs	r1, r1, r0
    4564:	425b      	negs	r3, r3
    4566:	1ac9      	subs	r1, r1, r3
    4568:	0035      	movs	r5, r6
    456a:	e775      	b.n	4458 <__aeabi_dadd+0x108>
    456c:	0007      	movs	r7, r0
    456e:	4317      	orrs	r7, r2
    4570:	d100      	bne.n	4574 <__aeabi_dadd+0x224>
    4572:	e716      	b.n	43a2 <__aeabi_dadd+0x52>
    4574:	2301      	movs	r3, #1
    4576:	425b      	negs	r3, r3
    4578:	469c      	mov	ip, r3
    457a:	44e3      	add	fp, ip
    457c:	465b      	mov	r3, fp
    457e:	2b00      	cmp	r3, #0
    4580:	d000      	beq.n	4584 <__aeabi_dadd+0x234>
    4582:	e0e0      	b.n	4746 <__aeabi_dadd+0x3f6>
    4584:	18aa      	adds	r2, r5, r2
    4586:	42aa      	cmp	r2, r5
    4588:	419b      	sbcs	r3, r3
    458a:	1809      	adds	r1, r1, r0
    458c:	425b      	negs	r3, r3
    458e:	1859      	adds	r1, r3, r1
    4590:	0015      	movs	r5, r2
    4592:	e7c5      	b.n	4520 <__aeabi_dadd+0x1d0>
    4594:	2e00      	cmp	r6, #0
    4596:	d175      	bne.n	4684 <__aeabi_dadd+0x334>
    4598:	1c66      	adds	r6, r4, #1
    459a:	0576      	lsls	r6, r6, #21
    459c:	0d76      	lsrs	r6, r6, #21
    459e:	2e01      	cmp	r6, #1
    45a0:	dc00      	bgt.n	45a4 <__aeabi_dadd+0x254>
    45a2:	e0f3      	b.n	478c <__aeabi_dadd+0x43c>
    45a4:	1aae      	subs	r6, r5, r2
    45a6:	46b0      	mov	r8, r6
    45a8:	4545      	cmp	r5, r8
    45aa:	41bf      	sbcs	r7, r7
    45ac:	1a0e      	subs	r6, r1, r0
    45ae:	427f      	negs	r7, r7
    45b0:	1bf6      	subs	r6, r6, r7
    45b2:	0237      	lsls	r7, r6, #8
    45b4:	d400      	bmi.n	45b8 <__aeabi_dadd+0x268>
    45b6:	e08f      	b.n	46d8 <__aeabi_dadd+0x388>
    45b8:	1b55      	subs	r5, r2, r5
    45ba:	42aa      	cmp	r2, r5
    45bc:	41b6      	sbcs	r6, r6
    45be:	1a41      	subs	r1, r0, r1
    45c0:	4276      	negs	r6, r6
    45c2:	1b8e      	subs	r6, r1, r6
    45c4:	469a      	mov	sl, r3
    45c6:	e74b      	b.n	4460 <__aeabi_dadd+0x110>
    45c8:	4656      	mov	r6, sl
    45ca:	2200      	movs	r2, #0
    45cc:	2500      	movs	r5, #0
    45ce:	e707      	b.n	43e0 <__aeabi_dadd+0x90>
    45d0:	0028      	movs	r0, r5
    45d2:	f001 fe17 	bl	6204 <__clzsi2>
    45d6:	3020      	adds	r0, #32
    45d8:	0003      	movs	r3, r0
    45da:	3b08      	subs	r3, #8
    45dc:	2b1f      	cmp	r3, #31
    45de:	dc00      	bgt.n	45e2 <__aeabi_dadd+0x292>
    45e0:	e749      	b.n	4476 <__aeabi_dadd+0x126>
    45e2:	002a      	movs	r2, r5
    45e4:	3828      	subs	r0, #40	; 0x28
    45e6:	4082      	lsls	r2, r0
    45e8:	2500      	movs	r5, #0
    45ea:	429c      	cmp	r4, r3
    45ec:	dc00      	bgt.n	45f0 <__aeabi_dadd+0x2a0>
    45ee:	e74d      	b.n	448c <__aeabi_dadd+0x13c>
    45f0:	493f      	ldr	r1, [pc, #252]	; (46f0 <__aeabi_dadd+0x3a0>)
    45f2:	1ae4      	subs	r4, r4, r3
    45f4:	4011      	ands	r1, r2
    45f6:	e6d4      	b.n	43a2 <__aeabi_dadd+0x52>
    45f8:	4302      	orrs	r2, r0
    45fa:	1e50      	subs	r0, r2, #1
    45fc:	4182      	sbcs	r2, r0
    45fe:	b2d3      	uxtb	r3, r2
    4600:	2200      	movs	r2, #0
    4602:	e722      	b.n	444a <__aeabi_dadd+0xfa>
    4604:	2b00      	cmp	r3, #0
    4606:	d000      	beq.n	460a <__aeabi_dadd+0x2ba>
    4608:	e0f3      	b.n	47f2 <__aeabi_dadd+0x4a2>
    460a:	1c63      	adds	r3, r4, #1
    460c:	469c      	mov	ip, r3
    460e:	055b      	lsls	r3, r3, #21
    4610:	0d5b      	lsrs	r3, r3, #21
    4612:	2b01      	cmp	r3, #1
    4614:	dc00      	bgt.n	4618 <__aeabi_dadd+0x2c8>
    4616:	e09f      	b.n	4758 <__aeabi_dadd+0x408>
    4618:	4b34      	ldr	r3, [pc, #208]	; (46ec <__aeabi_dadd+0x39c>)
    461a:	459c      	cmp	ip, r3
    461c:	d100      	bne.n	4620 <__aeabi_dadd+0x2d0>
    461e:	e0c3      	b.n	47a8 <__aeabi_dadd+0x458>
    4620:	18aa      	adds	r2, r5, r2
    4622:	1809      	adds	r1, r1, r0
    4624:	42aa      	cmp	r2, r5
    4626:	4180      	sbcs	r0, r0
    4628:	4240      	negs	r0, r0
    462a:	1841      	adds	r1, r0, r1
    462c:	07cd      	lsls	r5, r1, #31
    462e:	0852      	lsrs	r2, r2, #1
    4630:	4315      	orrs	r5, r2
    4632:	0849      	lsrs	r1, r1, #1
    4634:	4664      	mov	r4, ip
    4636:	e6b4      	b.n	43a2 <__aeabi_dadd+0x52>
    4638:	4b2c      	ldr	r3, [pc, #176]	; (46ec <__aeabi_dadd+0x39c>)
    463a:	429c      	cmp	r4, r3
    463c:	d000      	beq.n	4640 <__aeabi_dadd+0x2f0>
    463e:	e6ec      	b.n	441a <__aeabi_dadd+0xca>
    4640:	e6af      	b.n	43a2 <__aeabi_dadd+0x52>
    4642:	0011      	movs	r1, r2
    4644:	3c1f      	subs	r4, #31
    4646:	40e1      	lsrs	r1, r4
    4648:	000c      	movs	r4, r1
    464a:	2b20      	cmp	r3, #32
    464c:	d100      	bne.n	4650 <__aeabi_dadd+0x300>
    464e:	e07f      	b.n	4750 <__aeabi_dadd+0x400>
    4650:	2140      	movs	r1, #64	; 0x40
    4652:	1acb      	subs	r3, r1, r3
    4654:	409a      	lsls	r2, r3
    4656:	4315      	orrs	r5, r2
    4658:	1e6a      	subs	r2, r5, #1
    465a:	4195      	sbcs	r5, r2
    465c:	2100      	movs	r1, #0
    465e:	4325      	orrs	r5, r4
    4660:	2400      	movs	r4, #0
    4662:	e72d      	b.n	44c0 <__aeabi_dadd+0x170>
    4664:	0033      	movs	r3, r6
    4666:	0007      	movs	r7, r0
    4668:	3b20      	subs	r3, #32
    466a:	40df      	lsrs	r7, r3
    466c:	003b      	movs	r3, r7
    466e:	2e20      	cmp	r6, #32
    4670:	d070      	beq.n	4754 <__aeabi_dadd+0x404>
    4672:	2740      	movs	r7, #64	; 0x40
    4674:	1bbe      	subs	r6, r7, r6
    4676:	40b0      	lsls	r0, r6
    4678:	4302      	orrs	r2, r0
    467a:	1e50      	subs	r0, r2, #1
    467c:	4182      	sbcs	r2, r0
    467e:	4313      	orrs	r3, r2
    4680:	2200      	movs	r2, #0
    4682:	e6e2      	b.n	444a <__aeabi_dadd+0xfa>
    4684:	2c00      	cmp	r4, #0
    4686:	d04f      	beq.n	4728 <__aeabi_dadd+0x3d8>
    4688:	4c18      	ldr	r4, [pc, #96]	; (46ec <__aeabi_dadd+0x39c>)
    468a:	45a4      	cmp	ip, r4
    468c:	d100      	bne.n	4690 <__aeabi_dadd+0x340>
    468e:	e0ab      	b.n	47e8 <__aeabi_dadd+0x498>
    4690:	2480      	movs	r4, #128	; 0x80
    4692:	0424      	lsls	r4, r4, #16
    4694:	4276      	negs	r6, r6
    4696:	4321      	orrs	r1, r4
    4698:	2e38      	cmp	r6, #56	; 0x38
    469a:	dd00      	ble.n	469e <__aeabi_dadd+0x34e>
    469c:	e0df      	b.n	485e <__aeabi_dadd+0x50e>
    469e:	2e1f      	cmp	r6, #31
    46a0:	dd00      	ble.n	46a4 <__aeabi_dadd+0x354>
    46a2:	e143      	b.n	492c <__aeabi_dadd+0x5dc>
    46a4:	2720      	movs	r7, #32
    46a6:	1bbc      	subs	r4, r7, r6
    46a8:	46a1      	mov	r9, r4
    46aa:	000c      	movs	r4, r1
    46ac:	464f      	mov	r7, r9
    46ae:	40bc      	lsls	r4, r7
    46b0:	46a0      	mov	r8, r4
    46b2:	002c      	movs	r4, r5
    46b4:	4647      	mov	r7, r8
    46b6:	40f4      	lsrs	r4, r6
    46b8:	433c      	orrs	r4, r7
    46ba:	464f      	mov	r7, r9
    46bc:	40bd      	lsls	r5, r7
    46be:	1e6f      	subs	r7, r5, #1
    46c0:	41bd      	sbcs	r5, r7
    46c2:	40f1      	lsrs	r1, r6
    46c4:	432c      	orrs	r4, r5
    46c6:	1b15      	subs	r5, r2, r4
    46c8:	42aa      	cmp	r2, r5
    46ca:	4192      	sbcs	r2, r2
    46cc:	1a41      	subs	r1, r0, r1
    46ce:	4252      	negs	r2, r2
    46d0:	1a89      	subs	r1, r1, r2
    46d2:	4664      	mov	r4, ip
    46d4:	469a      	mov	sl, r3
    46d6:	e6bf      	b.n	4458 <__aeabi_dadd+0x108>
    46d8:	4641      	mov	r1, r8
    46da:	4645      	mov	r5, r8
    46dc:	4331      	orrs	r1, r6
    46de:	d000      	beq.n	46e2 <__aeabi_dadd+0x392>
    46e0:	e6be      	b.n	4460 <__aeabi_dadd+0x110>
    46e2:	2600      	movs	r6, #0
    46e4:	2400      	movs	r4, #0
    46e6:	2500      	movs	r5, #0
    46e8:	e6f2      	b.n	44d0 <__aeabi_dadd+0x180>
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	000007ff 	.word	0x000007ff
    46f0:	ff7fffff 	.word	0xff7fffff
    46f4:	800fffff 	.word	0x800fffff
    46f8:	2b1f      	cmp	r3, #31
    46fa:	dc59      	bgt.n	47b0 <__aeabi_dadd+0x460>
    46fc:	2720      	movs	r7, #32
    46fe:	1aff      	subs	r7, r7, r3
    4700:	46bc      	mov	ip, r7
    4702:	0007      	movs	r7, r0
    4704:	4663      	mov	r3, ip
    4706:	409f      	lsls	r7, r3
    4708:	465b      	mov	r3, fp
    470a:	46b9      	mov	r9, r7
    470c:	0017      	movs	r7, r2
    470e:	40df      	lsrs	r7, r3
    4710:	46b8      	mov	r8, r7
    4712:	464f      	mov	r7, r9
    4714:	4643      	mov	r3, r8
    4716:	431f      	orrs	r7, r3
    4718:	4663      	mov	r3, ip
    471a:	409a      	lsls	r2, r3
    471c:	1e53      	subs	r3, r2, #1
    471e:	419a      	sbcs	r2, r3
    4720:	465b      	mov	r3, fp
    4722:	433a      	orrs	r2, r7
    4724:	40d8      	lsrs	r0, r3
    4726:	e6f4      	b.n	4512 <__aeabi_dadd+0x1c2>
    4728:	000c      	movs	r4, r1
    472a:	432c      	orrs	r4, r5
    472c:	d05c      	beq.n	47e8 <__aeabi_dadd+0x498>
    472e:	43f6      	mvns	r6, r6
    4730:	2e00      	cmp	r6, #0
    4732:	d155      	bne.n	47e0 <__aeabi_dadd+0x490>
    4734:	1b55      	subs	r5, r2, r5
    4736:	42aa      	cmp	r2, r5
    4738:	41a4      	sbcs	r4, r4
    473a:	1a41      	subs	r1, r0, r1
    473c:	4264      	negs	r4, r4
    473e:	1b09      	subs	r1, r1, r4
    4740:	469a      	mov	sl, r3
    4742:	4664      	mov	r4, ip
    4744:	e688      	b.n	4458 <__aeabi_dadd+0x108>
    4746:	4f96      	ldr	r7, [pc, #600]	; (49a0 <__aeabi_dadd+0x650>)
    4748:	42bc      	cmp	r4, r7
    474a:	d000      	beq.n	474e <__aeabi_dadd+0x3fe>
    474c:	e6d8      	b.n	4500 <__aeabi_dadd+0x1b0>
    474e:	e628      	b.n	43a2 <__aeabi_dadd+0x52>
    4750:	2200      	movs	r2, #0
    4752:	e780      	b.n	4656 <__aeabi_dadd+0x306>
    4754:	2000      	movs	r0, #0
    4756:	e78f      	b.n	4678 <__aeabi_dadd+0x328>
    4758:	000b      	movs	r3, r1
    475a:	432b      	orrs	r3, r5
    475c:	2c00      	cmp	r4, #0
    475e:	d000      	beq.n	4762 <__aeabi_dadd+0x412>
    4760:	e0c2      	b.n	48e8 <__aeabi_dadd+0x598>
    4762:	2b00      	cmp	r3, #0
    4764:	d100      	bne.n	4768 <__aeabi_dadd+0x418>
    4766:	e101      	b.n	496c <__aeabi_dadd+0x61c>
    4768:	0003      	movs	r3, r0
    476a:	4313      	orrs	r3, r2
    476c:	d100      	bne.n	4770 <__aeabi_dadd+0x420>
    476e:	e618      	b.n	43a2 <__aeabi_dadd+0x52>
    4770:	18ab      	adds	r3, r5, r2
    4772:	42ab      	cmp	r3, r5
    4774:	41b6      	sbcs	r6, r6
    4776:	1809      	adds	r1, r1, r0
    4778:	4276      	negs	r6, r6
    477a:	1871      	adds	r1, r6, r1
    477c:	020a      	lsls	r2, r1, #8
    477e:	d400      	bmi.n	4782 <__aeabi_dadd+0x432>
    4780:	e109      	b.n	4996 <__aeabi_dadd+0x646>
    4782:	4a88      	ldr	r2, [pc, #544]	; (49a4 <__aeabi_dadd+0x654>)
    4784:	001d      	movs	r5, r3
    4786:	4011      	ands	r1, r2
    4788:	4664      	mov	r4, ip
    478a:	e60a      	b.n	43a2 <__aeabi_dadd+0x52>
    478c:	2c00      	cmp	r4, #0
    478e:	d15b      	bne.n	4848 <__aeabi_dadd+0x4f8>
    4790:	000e      	movs	r6, r1
    4792:	432e      	orrs	r6, r5
    4794:	d000      	beq.n	4798 <__aeabi_dadd+0x448>
    4796:	e08a      	b.n	48ae <__aeabi_dadd+0x55e>
    4798:	0001      	movs	r1, r0
    479a:	4311      	orrs	r1, r2
    479c:	d100      	bne.n	47a0 <__aeabi_dadd+0x450>
    479e:	e0c2      	b.n	4926 <__aeabi_dadd+0x5d6>
    47a0:	0001      	movs	r1, r0
    47a2:	0015      	movs	r5, r2
    47a4:	469a      	mov	sl, r3
    47a6:	e5fc      	b.n	43a2 <__aeabi_dadd+0x52>
    47a8:	4664      	mov	r4, ip
    47aa:	2100      	movs	r1, #0
    47ac:	2500      	movs	r5, #0
    47ae:	e68f      	b.n	44d0 <__aeabi_dadd+0x180>
    47b0:	2320      	movs	r3, #32
    47b2:	425b      	negs	r3, r3
    47b4:	469c      	mov	ip, r3
    47b6:	44dc      	add	ip, fp
    47b8:	4663      	mov	r3, ip
    47ba:	0007      	movs	r7, r0
    47bc:	40df      	lsrs	r7, r3
    47be:	465b      	mov	r3, fp
    47c0:	46bc      	mov	ip, r7
    47c2:	2b20      	cmp	r3, #32
    47c4:	d100      	bne.n	47c8 <__aeabi_dadd+0x478>
    47c6:	e0ac      	b.n	4922 <__aeabi_dadd+0x5d2>
    47c8:	2340      	movs	r3, #64	; 0x40
    47ca:	465f      	mov	r7, fp
    47cc:	1bdb      	subs	r3, r3, r7
    47ce:	4098      	lsls	r0, r3
    47d0:	4302      	orrs	r2, r0
    47d2:	1e50      	subs	r0, r2, #1
    47d4:	4182      	sbcs	r2, r0
    47d6:	4663      	mov	r3, ip
    47d8:	4313      	orrs	r3, r2
    47da:	001a      	movs	r2, r3
    47dc:	2000      	movs	r0, #0
    47de:	e698      	b.n	4512 <__aeabi_dadd+0x1c2>
    47e0:	4c6f      	ldr	r4, [pc, #444]	; (49a0 <__aeabi_dadd+0x650>)
    47e2:	45a4      	cmp	ip, r4
    47e4:	d000      	beq.n	47e8 <__aeabi_dadd+0x498>
    47e6:	e757      	b.n	4698 <__aeabi_dadd+0x348>
    47e8:	0001      	movs	r1, r0
    47ea:	0015      	movs	r5, r2
    47ec:	4664      	mov	r4, ip
    47ee:	469a      	mov	sl, r3
    47f0:	e5d7      	b.n	43a2 <__aeabi_dadd+0x52>
    47f2:	2c00      	cmp	r4, #0
    47f4:	d139      	bne.n	486a <__aeabi_dadd+0x51a>
    47f6:	000c      	movs	r4, r1
    47f8:	432c      	orrs	r4, r5
    47fa:	d06e      	beq.n	48da <__aeabi_dadd+0x58a>
    47fc:	43db      	mvns	r3, r3
    47fe:	2b00      	cmp	r3, #0
    4800:	d01a      	beq.n	4838 <__aeabi_dadd+0x4e8>
    4802:	4c67      	ldr	r4, [pc, #412]	; (49a0 <__aeabi_dadd+0x650>)
    4804:	45a4      	cmp	ip, r4
    4806:	d068      	beq.n	48da <__aeabi_dadd+0x58a>
    4808:	2b38      	cmp	r3, #56	; 0x38
    480a:	dd00      	ble.n	480e <__aeabi_dadd+0x4be>
    480c:	e0a4      	b.n	4958 <__aeabi_dadd+0x608>
    480e:	2b1f      	cmp	r3, #31
    4810:	dd00      	ble.n	4814 <__aeabi_dadd+0x4c4>
    4812:	e0ae      	b.n	4972 <__aeabi_dadd+0x622>
    4814:	2420      	movs	r4, #32
    4816:	000f      	movs	r7, r1
    4818:	1ae4      	subs	r4, r4, r3
    481a:	40a7      	lsls	r7, r4
    481c:	46b9      	mov	r9, r7
    481e:	002f      	movs	r7, r5
    4820:	40df      	lsrs	r7, r3
    4822:	46b8      	mov	r8, r7
    4824:	46a3      	mov	fp, r4
    4826:	464f      	mov	r7, r9
    4828:	4644      	mov	r4, r8
    482a:	4327      	orrs	r7, r4
    482c:	465c      	mov	r4, fp
    482e:	40a5      	lsls	r5, r4
    4830:	1e6c      	subs	r4, r5, #1
    4832:	41a5      	sbcs	r5, r4
    4834:	40d9      	lsrs	r1, r3
    4836:	433d      	orrs	r5, r7
    4838:	18ad      	adds	r5, r5, r2
    483a:	4295      	cmp	r5, r2
    483c:	419b      	sbcs	r3, r3
    483e:	1809      	adds	r1, r1, r0
    4840:	425b      	negs	r3, r3
    4842:	1859      	adds	r1, r3, r1
    4844:	4664      	mov	r4, ip
    4846:	e66b      	b.n	4520 <__aeabi_dadd+0x1d0>
    4848:	000c      	movs	r4, r1
    484a:	432c      	orrs	r4, r5
    484c:	d115      	bne.n	487a <__aeabi_dadd+0x52a>
    484e:	0001      	movs	r1, r0
    4850:	4311      	orrs	r1, r2
    4852:	d07b      	beq.n	494c <__aeabi_dadd+0x5fc>
    4854:	0001      	movs	r1, r0
    4856:	0015      	movs	r5, r2
    4858:	469a      	mov	sl, r3
    485a:	4c51      	ldr	r4, [pc, #324]	; (49a0 <__aeabi_dadd+0x650>)
    485c:	e5a1      	b.n	43a2 <__aeabi_dadd+0x52>
    485e:	430d      	orrs	r5, r1
    4860:	1e69      	subs	r1, r5, #1
    4862:	418d      	sbcs	r5, r1
    4864:	2100      	movs	r1, #0
    4866:	b2ec      	uxtb	r4, r5
    4868:	e72d      	b.n	46c6 <__aeabi_dadd+0x376>
    486a:	4c4d      	ldr	r4, [pc, #308]	; (49a0 <__aeabi_dadd+0x650>)
    486c:	45a4      	cmp	ip, r4
    486e:	d034      	beq.n	48da <__aeabi_dadd+0x58a>
    4870:	2480      	movs	r4, #128	; 0x80
    4872:	0424      	lsls	r4, r4, #16
    4874:	425b      	negs	r3, r3
    4876:	4321      	orrs	r1, r4
    4878:	e7c6      	b.n	4808 <__aeabi_dadd+0x4b8>
    487a:	0004      	movs	r4, r0
    487c:	4314      	orrs	r4, r2
    487e:	d04e      	beq.n	491e <__aeabi_dadd+0x5ce>
    4880:	08ed      	lsrs	r5, r5, #3
    4882:	074c      	lsls	r4, r1, #29
    4884:	432c      	orrs	r4, r5
    4886:	2580      	movs	r5, #128	; 0x80
    4888:	08c9      	lsrs	r1, r1, #3
    488a:	032d      	lsls	r5, r5, #12
    488c:	4229      	tst	r1, r5
    488e:	d008      	beq.n	48a2 <__aeabi_dadd+0x552>
    4890:	08c6      	lsrs	r6, r0, #3
    4892:	422e      	tst	r6, r5
    4894:	d105      	bne.n	48a2 <__aeabi_dadd+0x552>
    4896:	08d2      	lsrs	r2, r2, #3
    4898:	0741      	lsls	r1, r0, #29
    489a:	4311      	orrs	r1, r2
    489c:	000c      	movs	r4, r1
    489e:	469a      	mov	sl, r3
    48a0:	0031      	movs	r1, r6
    48a2:	0f62      	lsrs	r2, r4, #29
    48a4:	00c9      	lsls	r1, r1, #3
    48a6:	00e5      	lsls	r5, r4, #3
    48a8:	4311      	orrs	r1, r2
    48aa:	4c3d      	ldr	r4, [pc, #244]	; (49a0 <__aeabi_dadd+0x650>)
    48ac:	e579      	b.n	43a2 <__aeabi_dadd+0x52>
    48ae:	0006      	movs	r6, r0
    48b0:	4316      	orrs	r6, r2
    48b2:	d100      	bne.n	48b6 <__aeabi_dadd+0x566>
    48b4:	e575      	b.n	43a2 <__aeabi_dadd+0x52>
    48b6:	1aae      	subs	r6, r5, r2
    48b8:	46b0      	mov	r8, r6
    48ba:	4545      	cmp	r5, r8
    48bc:	41bf      	sbcs	r7, r7
    48be:	1a0e      	subs	r6, r1, r0
    48c0:	427f      	negs	r7, r7
    48c2:	1bf6      	subs	r6, r6, r7
    48c4:	0237      	lsls	r7, r6, #8
    48c6:	d400      	bmi.n	48ca <__aeabi_dadd+0x57a>
    48c8:	e5f4      	b.n	44b4 <__aeabi_dadd+0x164>
    48ca:	1b55      	subs	r5, r2, r5
    48cc:	42aa      	cmp	r2, r5
    48ce:	41b6      	sbcs	r6, r6
    48d0:	1a41      	subs	r1, r0, r1
    48d2:	4276      	negs	r6, r6
    48d4:	1b89      	subs	r1, r1, r6
    48d6:	469a      	mov	sl, r3
    48d8:	e563      	b.n	43a2 <__aeabi_dadd+0x52>
    48da:	0001      	movs	r1, r0
    48dc:	0015      	movs	r5, r2
    48de:	4664      	mov	r4, ip
    48e0:	e55f      	b.n	43a2 <__aeabi_dadd+0x52>
    48e2:	2200      	movs	r2, #0
    48e4:	2500      	movs	r5, #0
    48e6:	e57b      	b.n	43e0 <__aeabi_dadd+0x90>
    48e8:	2b00      	cmp	r3, #0
    48ea:	d03b      	beq.n	4964 <__aeabi_dadd+0x614>
    48ec:	0003      	movs	r3, r0
    48ee:	4313      	orrs	r3, r2
    48f0:	d015      	beq.n	491e <__aeabi_dadd+0x5ce>
    48f2:	08ed      	lsrs	r5, r5, #3
    48f4:	074b      	lsls	r3, r1, #29
    48f6:	432b      	orrs	r3, r5
    48f8:	2580      	movs	r5, #128	; 0x80
    48fa:	08c9      	lsrs	r1, r1, #3
    48fc:	032d      	lsls	r5, r5, #12
    48fe:	4229      	tst	r1, r5
    4900:	d007      	beq.n	4912 <__aeabi_dadd+0x5c2>
    4902:	08c4      	lsrs	r4, r0, #3
    4904:	422c      	tst	r4, r5
    4906:	d104      	bne.n	4912 <__aeabi_dadd+0x5c2>
    4908:	0741      	lsls	r1, r0, #29
    490a:	000b      	movs	r3, r1
    490c:	0021      	movs	r1, r4
    490e:	08d2      	lsrs	r2, r2, #3
    4910:	4313      	orrs	r3, r2
    4912:	00c9      	lsls	r1, r1, #3
    4914:	0f5a      	lsrs	r2, r3, #29
    4916:	4311      	orrs	r1, r2
    4918:	00dd      	lsls	r5, r3, #3
    491a:	4c21      	ldr	r4, [pc, #132]	; (49a0 <__aeabi_dadd+0x650>)
    491c:	e541      	b.n	43a2 <__aeabi_dadd+0x52>
    491e:	4c20      	ldr	r4, [pc, #128]	; (49a0 <__aeabi_dadd+0x650>)
    4920:	e53f      	b.n	43a2 <__aeabi_dadd+0x52>
    4922:	2000      	movs	r0, #0
    4924:	e754      	b.n	47d0 <__aeabi_dadd+0x480>
    4926:	2600      	movs	r6, #0
    4928:	2500      	movs	r5, #0
    492a:	e5d1      	b.n	44d0 <__aeabi_dadd+0x180>
    492c:	0034      	movs	r4, r6
    492e:	000f      	movs	r7, r1
    4930:	3c20      	subs	r4, #32
    4932:	40e7      	lsrs	r7, r4
    4934:	003c      	movs	r4, r7
    4936:	2e20      	cmp	r6, #32
    4938:	d02b      	beq.n	4992 <__aeabi_dadd+0x642>
    493a:	2740      	movs	r7, #64	; 0x40
    493c:	1bbe      	subs	r6, r7, r6
    493e:	40b1      	lsls	r1, r6
    4940:	430d      	orrs	r5, r1
    4942:	1e69      	subs	r1, r5, #1
    4944:	418d      	sbcs	r5, r1
    4946:	2100      	movs	r1, #0
    4948:	432c      	orrs	r4, r5
    494a:	e6bc      	b.n	46c6 <__aeabi_dadd+0x376>
    494c:	2180      	movs	r1, #128	; 0x80
    494e:	2600      	movs	r6, #0
    4950:	0309      	lsls	r1, r1, #12
    4952:	4c13      	ldr	r4, [pc, #76]	; (49a0 <__aeabi_dadd+0x650>)
    4954:	2500      	movs	r5, #0
    4956:	e5bb      	b.n	44d0 <__aeabi_dadd+0x180>
    4958:	430d      	orrs	r5, r1
    495a:	1e69      	subs	r1, r5, #1
    495c:	418d      	sbcs	r5, r1
    495e:	2100      	movs	r1, #0
    4960:	b2ed      	uxtb	r5, r5
    4962:	e769      	b.n	4838 <__aeabi_dadd+0x4e8>
    4964:	0001      	movs	r1, r0
    4966:	0015      	movs	r5, r2
    4968:	4c0d      	ldr	r4, [pc, #52]	; (49a0 <__aeabi_dadd+0x650>)
    496a:	e51a      	b.n	43a2 <__aeabi_dadd+0x52>
    496c:	0001      	movs	r1, r0
    496e:	0015      	movs	r5, r2
    4970:	e517      	b.n	43a2 <__aeabi_dadd+0x52>
    4972:	001c      	movs	r4, r3
    4974:	000f      	movs	r7, r1
    4976:	3c20      	subs	r4, #32
    4978:	40e7      	lsrs	r7, r4
    497a:	003c      	movs	r4, r7
    497c:	2b20      	cmp	r3, #32
    497e:	d00c      	beq.n	499a <__aeabi_dadd+0x64a>
    4980:	2740      	movs	r7, #64	; 0x40
    4982:	1afb      	subs	r3, r7, r3
    4984:	4099      	lsls	r1, r3
    4986:	430d      	orrs	r5, r1
    4988:	1e69      	subs	r1, r5, #1
    498a:	418d      	sbcs	r5, r1
    498c:	2100      	movs	r1, #0
    498e:	4325      	orrs	r5, r4
    4990:	e752      	b.n	4838 <__aeabi_dadd+0x4e8>
    4992:	2100      	movs	r1, #0
    4994:	e7d4      	b.n	4940 <__aeabi_dadd+0x5f0>
    4996:	001d      	movs	r5, r3
    4998:	e592      	b.n	44c0 <__aeabi_dadd+0x170>
    499a:	2100      	movs	r1, #0
    499c:	e7f3      	b.n	4986 <__aeabi_dadd+0x636>
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	000007ff 	.word	0x000007ff
    49a4:	ff7fffff 	.word	0xff7fffff

000049a8 <__aeabi_ddiv>:
    49a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49aa:	4656      	mov	r6, sl
    49ac:	464d      	mov	r5, r9
    49ae:	4644      	mov	r4, r8
    49b0:	465f      	mov	r7, fp
    49b2:	b4f0      	push	{r4, r5, r6, r7}
    49b4:	001d      	movs	r5, r3
    49b6:	030e      	lsls	r6, r1, #12
    49b8:	004c      	lsls	r4, r1, #1
    49ba:	0fcb      	lsrs	r3, r1, #31
    49bc:	b087      	sub	sp, #28
    49be:	0007      	movs	r7, r0
    49c0:	4692      	mov	sl, r2
    49c2:	4681      	mov	r9, r0
    49c4:	0b36      	lsrs	r6, r6, #12
    49c6:	0d64      	lsrs	r4, r4, #21
    49c8:	4698      	mov	r8, r3
    49ca:	d06a      	beq.n	4aa2 <__aeabi_ddiv+0xfa>
    49cc:	4b6d      	ldr	r3, [pc, #436]	; (4b84 <__aeabi_ddiv+0x1dc>)
    49ce:	429c      	cmp	r4, r3
    49d0:	d035      	beq.n	4a3e <__aeabi_ddiv+0x96>
    49d2:	2280      	movs	r2, #128	; 0x80
    49d4:	0f43      	lsrs	r3, r0, #29
    49d6:	0412      	lsls	r2, r2, #16
    49d8:	4313      	orrs	r3, r2
    49da:	00f6      	lsls	r6, r6, #3
    49dc:	431e      	orrs	r6, r3
    49de:	00c3      	lsls	r3, r0, #3
    49e0:	4699      	mov	r9, r3
    49e2:	4b69      	ldr	r3, [pc, #420]	; (4b88 <__aeabi_ddiv+0x1e0>)
    49e4:	2700      	movs	r7, #0
    49e6:	469c      	mov	ip, r3
    49e8:	2300      	movs	r3, #0
    49ea:	4464      	add	r4, ip
    49ec:	9302      	str	r3, [sp, #8]
    49ee:	032b      	lsls	r3, r5, #12
    49f0:	0068      	lsls	r0, r5, #1
    49f2:	0b1b      	lsrs	r3, r3, #12
    49f4:	0fed      	lsrs	r5, r5, #31
    49f6:	4651      	mov	r1, sl
    49f8:	469b      	mov	fp, r3
    49fa:	0d40      	lsrs	r0, r0, #21
    49fc:	9500      	str	r5, [sp, #0]
    49fe:	d100      	bne.n	4a02 <__aeabi_ddiv+0x5a>
    4a00:	e078      	b.n	4af4 <__aeabi_ddiv+0x14c>
    4a02:	4b60      	ldr	r3, [pc, #384]	; (4b84 <__aeabi_ddiv+0x1dc>)
    4a04:	4298      	cmp	r0, r3
    4a06:	d06c      	beq.n	4ae2 <__aeabi_ddiv+0x13a>
    4a08:	465b      	mov	r3, fp
    4a0a:	00da      	lsls	r2, r3, #3
    4a0c:	0f4b      	lsrs	r3, r1, #29
    4a0e:	2180      	movs	r1, #128	; 0x80
    4a10:	0409      	lsls	r1, r1, #16
    4a12:	430b      	orrs	r3, r1
    4a14:	4313      	orrs	r3, r2
    4a16:	469b      	mov	fp, r3
    4a18:	4653      	mov	r3, sl
    4a1a:	00d9      	lsls	r1, r3, #3
    4a1c:	4b5a      	ldr	r3, [pc, #360]	; (4b88 <__aeabi_ddiv+0x1e0>)
    4a1e:	469c      	mov	ip, r3
    4a20:	2300      	movs	r3, #0
    4a22:	4460      	add	r0, ip
    4a24:	4642      	mov	r2, r8
    4a26:	1a20      	subs	r0, r4, r0
    4a28:	406a      	eors	r2, r5
    4a2a:	4692      	mov	sl, r2
    4a2c:	9001      	str	r0, [sp, #4]
    4a2e:	431f      	orrs	r7, r3
    4a30:	2f0f      	cmp	r7, #15
    4a32:	d900      	bls.n	4a36 <__aeabi_ddiv+0x8e>
    4a34:	e0b0      	b.n	4b98 <__aeabi_ddiv+0x1f0>
    4a36:	4855      	ldr	r0, [pc, #340]	; (4b8c <__aeabi_ddiv+0x1e4>)
    4a38:	00bf      	lsls	r7, r7, #2
    4a3a:	59c0      	ldr	r0, [r0, r7]
    4a3c:	4687      	mov	pc, r0
    4a3e:	4337      	orrs	r7, r6
    4a40:	d000      	beq.n	4a44 <__aeabi_ddiv+0x9c>
    4a42:	e088      	b.n	4b56 <__aeabi_ddiv+0x1ae>
    4a44:	2300      	movs	r3, #0
    4a46:	4699      	mov	r9, r3
    4a48:	3302      	adds	r3, #2
    4a4a:	2708      	movs	r7, #8
    4a4c:	2600      	movs	r6, #0
    4a4e:	9302      	str	r3, [sp, #8]
    4a50:	e7cd      	b.n	49ee <__aeabi_ddiv+0x46>
    4a52:	4643      	mov	r3, r8
    4a54:	46b3      	mov	fp, r6
    4a56:	4649      	mov	r1, r9
    4a58:	9300      	str	r3, [sp, #0]
    4a5a:	9b02      	ldr	r3, [sp, #8]
    4a5c:	9a00      	ldr	r2, [sp, #0]
    4a5e:	4692      	mov	sl, r2
    4a60:	2b02      	cmp	r3, #2
    4a62:	d000      	beq.n	4a66 <__aeabi_ddiv+0xbe>
    4a64:	e1bf      	b.n	4de6 <__aeabi_ddiv+0x43e>
    4a66:	2100      	movs	r1, #0
    4a68:	4653      	mov	r3, sl
    4a6a:	2201      	movs	r2, #1
    4a6c:	2600      	movs	r6, #0
    4a6e:	4689      	mov	r9, r1
    4a70:	401a      	ands	r2, r3
    4a72:	4b44      	ldr	r3, [pc, #272]	; (4b84 <__aeabi_ddiv+0x1dc>)
    4a74:	2100      	movs	r1, #0
    4a76:	0336      	lsls	r6, r6, #12
    4a78:	0d0c      	lsrs	r4, r1, #20
    4a7a:	0524      	lsls	r4, r4, #20
    4a7c:	0b36      	lsrs	r6, r6, #12
    4a7e:	4326      	orrs	r6, r4
    4a80:	4c43      	ldr	r4, [pc, #268]	; (4b90 <__aeabi_ddiv+0x1e8>)
    4a82:	051b      	lsls	r3, r3, #20
    4a84:	4026      	ands	r6, r4
    4a86:	431e      	orrs	r6, r3
    4a88:	0076      	lsls	r6, r6, #1
    4a8a:	07d2      	lsls	r2, r2, #31
    4a8c:	0876      	lsrs	r6, r6, #1
    4a8e:	4316      	orrs	r6, r2
    4a90:	4648      	mov	r0, r9
    4a92:	0031      	movs	r1, r6
    4a94:	b007      	add	sp, #28
    4a96:	bc3c      	pop	{r2, r3, r4, r5}
    4a98:	4690      	mov	r8, r2
    4a9a:	4699      	mov	r9, r3
    4a9c:	46a2      	mov	sl, r4
    4a9e:	46ab      	mov	fp, r5
    4aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aa2:	0033      	movs	r3, r6
    4aa4:	4303      	orrs	r3, r0
    4aa6:	d04f      	beq.n	4b48 <__aeabi_ddiv+0x1a0>
    4aa8:	2e00      	cmp	r6, #0
    4aaa:	d100      	bne.n	4aae <__aeabi_ddiv+0x106>
    4aac:	e1bc      	b.n	4e28 <__aeabi_ddiv+0x480>
    4aae:	0030      	movs	r0, r6
    4ab0:	f001 fba8 	bl	6204 <__clzsi2>
    4ab4:	0003      	movs	r3, r0
    4ab6:	3b0b      	subs	r3, #11
    4ab8:	2b1c      	cmp	r3, #28
    4aba:	dd00      	ble.n	4abe <__aeabi_ddiv+0x116>
    4abc:	e1ad      	b.n	4e1a <__aeabi_ddiv+0x472>
    4abe:	221d      	movs	r2, #29
    4ac0:	0001      	movs	r1, r0
    4ac2:	1ad3      	subs	r3, r2, r3
    4ac4:	3908      	subs	r1, #8
    4ac6:	003a      	movs	r2, r7
    4ac8:	408f      	lsls	r7, r1
    4aca:	408e      	lsls	r6, r1
    4acc:	40da      	lsrs	r2, r3
    4ace:	46b9      	mov	r9, r7
    4ad0:	4316      	orrs	r6, r2
    4ad2:	4b30      	ldr	r3, [pc, #192]	; (4b94 <__aeabi_ddiv+0x1ec>)
    4ad4:	2700      	movs	r7, #0
    4ad6:	469c      	mov	ip, r3
    4ad8:	2300      	movs	r3, #0
    4ada:	4460      	add	r0, ip
    4adc:	4244      	negs	r4, r0
    4ade:	9302      	str	r3, [sp, #8]
    4ae0:	e785      	b.n	49ee <__aeabi_ddiv+0x46>
    4ae2:	4653      	mov	r3, sl
    4ae4:	465a      	mov	r2, fp
    4ae6:	4313      	orrs	r3, r2
    4ae8:	d12c      	bne.n	4b44 <__aeabi_ddiv+0x19c>
    4aea:	2300      	movs	r3, #0
    4aec:	2100      	movs	r1, #0
    4aee:	469b      	mov	fp, r3
    4af0:	3302      	adds	r3, #2
    4af2:	e797      	b.n	4a24 <__aeabi_ddiv+0x7c>
    4af4:	430b      	orrs	r3, r1
    4af6:	d020      	beq.n	4b3a <__aeabi_ddiv+0x192>
    4af8:	465b      	mov	r3, fp
    4afa:	2b00      	cmp	r3, #0
    4afc:	d100      	bne.n	4b00 <__aeabi_ddiv+0x158>
    4afe:	e19e      	b.n	4e3e <__aeabi_ddiv+0x496>
    4b00:	4658      	mov	r0, fp
    4b02:	f001 fb7f 	bl	6204 <__clzsi2>
    4b06:	0003      	movs	r3, r0
    4b08:	3b0b      	subs	r3, #11
    4b0a:	2b1c      	cmp	r3, #28
    4b0c:	dd00      	ble.n	4b10 <__aeabi_ddiv+0x168>
    4b0e:	e18f      	b.n	4e30 <__aeabi_ddiv+0x488>
    4b10:	0002      	movs	r2, r0
    4b12:	4659      	mov	r1, fp
    4b14:	3a08      	subs	r2, #8
    4b16:	4091      	lsls	r1, r2
    4b18:	468b      	mov	fp, r1
    4b1a:	211d      	movs	r1, #29
    4b1c:	1acb      	subs	r3, r1, r3
    4b1e:	4651      	mov	r1, sl
    4b20:	40d9      	lsrs	r1, r3
    4b22:	000b      	movs	r3, r1
    4b24:	4659      	mov	r1, fp
    4b26:	430b      	orrs	r3, r1
    4b28:	4651      	mov	r1, sl
    4b2a:	469b      	mov	fp, r3
    4b2c:	4091      	lsls	r1, r2
    4b2e:	4b19      	ldr	r3, [pc, #100]	; (4b94 <__aeabi_ddiv+0x1ec>)
    4b30:	469c      	mov	ip, r3
    4b32:	4460      	add	r0, ip
    4b34:	4240      	negs	r0, r0
    4b36:	2300      	movs	r3, #0
    4b38:	e774      	b.n	4a24 <__aeabi_ddiv+0x7c>
    4b3a:	2300      	movs	r3, #0
    4b3c:	2100      	movs	r1, #0
    4b3e:	469b      	mov	fp, r3
    4b40:	3301      	adds	r3, #1
    4b42:	e76f      	b.n	4a24 <__aeabi_ddiv+0x7c>
    4b44:	2303      	movs	r3, #3
    4b46:	e76d      	b.n	4a24 <__aeabi_ddiv+0x7c>
    4b48:	2300      	movs	r3, #0
    4b4a:	4699      	mov	r9, r3
    4b4c:	3301      	adds	r3, #1
    4b4e:	2704      	movs	r7, #4
    4b50:	2600      	movs	r6, #0
    4b52:	9302      	str	r3, [sp, #8]
    4b54:	e74b      	b.n	49ee <__aeabi_ddiv+0x46>
    4b56:	2303      	movs	r3, #3
    4b58:	270c      	movs	r7, #12
    4b5a:	9302      	str	r3, [sp, #8]
    4b5c:	e747      	b.n	49ee <__aeabi_ddiv+0x46>
    4b5e:	2201      	movs	r2, #1
    4b60:	1ad5      	subs	r5, r2, r3
    4b62:	2d38      	cmp	r5, #56	; 0x38
    4b64:	dc00      	bgt.n	4b68 <__aeabi_ddiv+0x1c0>
    4b66:	e1b0      	b.n	4eca <__aeabi_ddiv+0x522>
    4b68:	4653      	mov	r3, sl
    4b6a:	401a      	ands	r2, r3
    4b6c:	2100      	movs	r1, #0
    4b6e:	2300      	movs	r3, #0
    4b70:	2600      	movs	r6, #0
    4b72:	4689      	mov	r9, r1
    4b74:	e77e      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4b76:	2300      	movs	r3, #0
    4b78:	2680      	movs	r6, #128	; 0x80
    4b7a:	4699      	mov	r9, r3
    4b7c:	2200      	movs	r2, #0
    4b7e:	0336      	lsls	r6, r6, #12
    4b80:	4b00      	ldr	r3, [pc, #0]	; (4b84 <__aeabi_ddiv+0x1dc>)
    4b82:	e777      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4b84:	000007ff 	.word	0x000007ff
    4b88:	fffffc01 	.word	0xfffffc01
    4b8c:	00006618 	.word	0x00006618
    4b90:	800fffff 	.word	0x800fffff
    4b94:	000003f3 	.word	0x000003f3
    4b98:	455e      	cmp	r6, fp
    4b9a:	d900      	bls.n	4b9e <__aeabi_ddiv+0x1f6>
    4b9c:	e172      	b.n	4e84 <__aeabi_ddiv+0x4dc>
    4b9e:	d100      	bne.n	4ba2 <__aeabi_ddiv+0x1fa>
    4ba0:	e16d      	b.n	4e7e <__aeabi_ddiv+0x4d6>
    4ba2:	9b01      	ldr	r3, [sp, #4]
    4ba4:	464d      	mov	r5, r9
    4ba6:	3b01      	subs	r3, #1
    4ba8:	9301      	str	r3, [sp, #4]
    4baa:	2300      	movs	r3, #0
    4bac:	0034      	movs	r4, r6
    4bae:	9302      	str	r3, [sp, #8]
    4bb0:	465b      	mov	r3, fp
    4bb2:	021e      	lsls	r6, r3, #8
    4bb4:	0e0b      	lsrs	r3, r1, #24
    4bb6:	431e      	orrs	r6, r3
    4bb8:	020b      	lsls	r3, r1, #8
    4bba:	9303      	str	r3, [sp, #12]
    4bbc:	0c33      	lsrs	r3, r6, #16
    4bbe:	4699      	mov	r9, r3
    4bc0:	0433      	lsls	r3, r6, #16
    4bc2:	0c1b      	lsrs	r3, r3, #16
    4bc4:	4649      	mov	r1, r9
    4bc6:	0020      	movs	r0, r4
    4bc8:	9300      	str	r3, [sp, #0]
    4bca:	f001 fa8f 	bl	60ec <__aeabi_uidiv>
    4bce:	9b00      	ldr	r3, [sp, #0]
    4bd0:	0037      	movs	r7, r6
    4bd2:	4343      	muls	r3, r0
    4bd4:	0006      	movs	r6, r0
    4bd6:	4649      	mov	r1, r9
    4bd8:	0020      	movs	r0, r4
    4bda:	4698      	mov	r8, r3
    4bdc:	f001 fb0c 	bl	61f8 <__aeabi_uidivmod>
    4be0:	0c2c      	lsrs	r4, r5, #16
    4be2:	0409      	lsls	r1, r1, #16
    4be4:	430c      	orrs	r4, r1
    4be6:	45a0      	cmp	r8, r4
    4be8:	d909      	bls.n	4bfe <__aeabi_ddiv+0x256>
    4bea:	19e4      	adds	r4, r4, r7
    4bec:	1e73      	subs	r3, r6, #1
    4bee:	42a7      	cmp	r7, r4
    4bf0:	d900      	bls.n	4bf4 <__aeabi_ddiv+0x24c>
    4bf2:	e15c      	b.n	4eae <__aeabi_ddiv+0x506>
    4bf4:	45a0      	cmp	r8, r4
    4bf6:	d800      	bhi.n	4bfa <__aeabi_ddiv+0x252>
    4bf8:	e159      	b.n	4eae <__aeabi_ddiv+0x506>
    4bfa:	3e02      	subs	r6, #2
    4bfc:	19e4      	adds	r4, r4, r7
    4bfe:	4643      	mov	r3, r8
    4c00:	1ae4      	subs	r4, r4, r3
    4c02:	4649      	mov	r1, r9
    4c04:	0020      	movs	r0, r4
    4c06:	f001 fa71 	bl	60ec <__aeabi_uidiv>
    4c0a:	0003      	movs	r3, r0
    4c0c:	9a00      	ldr	r2, [sp, #0]
    4c0e:	4680      	mov	r8, r0
    4c10:	4353      	muls	r3, r2
    4c12:	4649      	mov	r1, r9
    4c14:	0020      	movs	r0, r4
    4c16:	469b      	mov	fp, r3
    4c18:	f001 faee 	bl	61f8 <__aeabi_uidivmod>
    4c1c:	042a      	lsls	r2, r5, #16
    4c1e:	0409      	lsls	r1, r1, #16
    4c20:	0c12      	lsrs	r2, r2, #16
    4c22:	430a      	orrs	r2, r1
    4c24:	4593      	cmp	fp, r2
    4c26:	d90d      	bls.n	4c44 <__aeabi_ddiv+0x29c>
    4c28:	4643      	mov	r3, r8
    4c2a:	19d2      	adds	r2, r2, r7
    4c2c:	3b01      	subs	r3, #1
    4c2e:	4297      	cmp	r7, r2
    4c30:	d900      	bls.n	4c34 <__aeabi_ddiv+0x28c>
    4c32:	e13a      	b.n	4eaa <__aeabi_ddiv+0x502>
    4c34:	4593      	cmp	fp, r2
    4c36:	d800      	bhi.n	4c3a <__aeabi_ddiv+0x292>
    4c38:	e137      	b.n	4eaa <__aeabi_ddiv+0x502>
    4c3a:	2302      	movs	r3, #2
    4c3c:	425b      	negs	r3, r3
    4c3e:	469c      	mov	ip, r3
    4c40:	19d2      	adds	r2, r2, r7
    4c42:	44e0      	add	r8, ip
    4c44:	465b      	mov	r3, fp
    4c46:	1ad2      	subs	r2, r2, r3
    4c48:	4643      	mov	r3, r8
    4c4a:	0436      	lsls	r6, r6, #16
    4c4c:	4333      	orrs	r3, r6
    4c4e:	469b      	mov	fp, r3
    4c50:	9903      	ldr	r1, [sp, #12]
    4c52:	0c18      	lsrs	r0, r3, #16
    4c54:	0c0b      	lsrs	r3, r1, #16
    4c56:	001d      	movs	r5, r3
    4c58:	9305      	str	r3, [sp, #20]
    4c5a:	0409      	lsls	r1, r1, #16
    4c5c:	465b      	mov	r3, fp
    4c5e:	0c09      	lsrs	r1, r1, #16
    4c60:	000c      	movs	r4, r1
    4c62:	041b      	lsls	r3, r3, #16
    4c64:	0c1b      	lsrs	r3, r3, #16
    4c66:	4344      	muls	r4, r0
    4c68:	9104      	str	r1, [sp, #16]
    4c6a:	4359      	muls	r1, r3
    4c6c:	436b      	muls	r3, r5
    4c6e:	4368      	muls	r0, r5
    4c70:	191b      	adds	r3, r3, r4
    4c72:	0c0d      	lsrs	r5, r1, #16
    4c74:	18eb      	adds	r3, r5, r3
    4c76:	429c      	cmp	r4, r3
    4c78:	d903      	bls.n	4c82 <__aeabi_ddiv+0x2da>
    4c7a:	2480      	movs	r4, #128	; 0x80
    4c7c:	0264      	lsls	r4, r4, #9
    4c7e:	46a4      	mov	ip, r4
    4c80:	4460      	add	r0, ip
    4c82:	0c1c      	lsrs	r4, r3, #16
    4c84:	0409      	lsls	r1, r1, #16
    4c86:	041b      	lsls	r3, r3, #16
    4c88:	0c09      	lsrs	r1, r1, #16
    4c8a:	1820      	adds	r0, r4, r0
    4c8c:	185d      	adds	r5, r3, r1
    4c8e:	4282      	cmp	r2, r0
    4c90:	d200      	bcs.n	4c94 <__aeabi_ddiv+0x2ec>
    4c92:	e0de      	b.n	4e52 <__aeabi_ddiv+0x4aa>
    4c94:	d100      	bne.n	4c98 <__aeabi_ddiv+0x2f0>
    4c96:	e0d7      	b.n	4e48 <__aeabi_ddiv+0x4a0>
    4c98:	1a16      	subs	r6, r2, r0
    4c9a:	9b02      	ldr	r3, [sp, #8]
    4c9c:	469c      	mov	ip, r3
    4c9e:	1b5d      	subs	r5, r3, r5
    4ca0:	45ac      	cmp	ip, r5
    4ca2:	419b      	sbcs	r3, r3
    4ca4:	425b      	negs	r3, r3
    4ca6:	1af6      	subs	r6, r6, r3
    4ca8:	42b7      	cmp	r7, r6
    4caa:	d100      	bne.n	4cae <__aeabi_ddiv+0x306>
    4cac:	e106      	b.n	4ebc <__aeabi_ddiv+0x514>
    4cae:	4649      	mov	r1, r9
    4cb0:	0030      	movs	r0, r6
    4cb2:	f001 fa1b 	bl	60ec <__aeabi_uidiv>
    4cb6:	9b00      	ldr	r3, [sp, #0]
    4cb8:	0004      	movs	r4, r0
    4cba:	4343      	muls	r3, r0
    4cbc:	4649      	mov	r1, r9
    4cbe:	0030      	movs	r0, r6
    4cc0:	4698      	mov	r8, r3
    4cc2:	f001 fa99 	bl	61f8 <__aeabi_uidivmod>
    4cc6:	0c2e      	lsrs	r6, r5, #16
    4cc8:	0409      	lsls	r1, r1, #16
    4cca:	430e      	orrs	r6, r1
    4ccc:	45b0      	cmp	r8, r6
    4cce:	d909      	bls.n	4ce4 <__aeabi_ddiv+0x33c>
    4cd0:	19f6      	adds	r6, r6, r7
    4cd2:	1e63      	subs	r3, r4, #1
    4cd4:	42b7      	cmp	r7, r6
    4cd6:	d900      	bls.n	4cda <__aeabi_ddiv+0x332>
    4cd8:	e0f3      	b.n	4ec2 <__aeabi_ddiv+0x51a>
    4cda:	45b0      	cmp	r8, r6
    4cdc:	d800      	bhi.n	4ce0 <__aeabi_ddiv+0x338>
    4cde:	e0f0      	b.n	4ec2 <__aeabi_ddiv+0x51a>
    4ce0:	3c02      	subs	r4, #2
    4ce2:	19f6      	adds	r6, r6, r7
    4ce4:	4643      	mov	r3, r8
    4ce6:	1af3      	subs	r3, r6, r3
    4ce8:	4649      	mov	r1, r9
    4cea:	0018      	movs	r0, r3
    4cec:	9302      	str	r3, [sp, #8]
    4cee:	f001 f9fd 	bl	60ec <__aeabi_uidiv>
    4cf2:	9b00      	ldr	r3, [sp, #0]
    4cf4:	0006      	movs	r6, r0
    4cf6:	4343      	muls	r3, r0
    4cf8:	4649      	mov	r1, r9
    4cfa:	9802      	ldr	r0, [sp, #8]
    4cfc:	4698      	mov	r8, r3
    4cfe:	f001 fa7b 	bl	61f8 <__aeabi_uidivmod>
    4d02:	042d      	lsls	r5, r5, #16
    4d04:	0409      	lsls	r1, r1, #16
    4d06:	0c2d      	lsrs	r5, r5, #16
    4d08:	430d      	orrs	r5, r1
    4d0a:	45a8      	cmp	r8, r5
    4d0c:	d909      	bls.n	4d22 <__aeabi_ddiv+0x37a>
    4d0e:	19ed      	adds	r5, r5, r7
    4d10:	1e73      	subs	r3, r6, #1
    4d12:	42af      	cmp	r7, r5
    4d14:	d900      	bls.n	4d18 <__aeabi_ddiv+0x370>
    4d16:	e0d6      	b.n	4ec6 <__aeabi_ddiv+0x51e>
    4d18:	45a8      	cmp	r8, r5
    4d1a:	d800      	bhi.n	4d1e <__aeabi_ddiv+0x376>
    4d1c:	e0d3      	b.n	4ec6 <__aeabi_ddiv+0x51e>
    4d1e:	3e02      	subs	r6, #2
    4d20:	19ed      	adds	r5, r5, r7
    4d22:	0424      	lsls	r4, r4, #16
    4d24:	0021      	movs	r1, r4
    4d26:	4643      	mov	r3, r8
    4d28:	4331      	orrs	r1, r6
    4d2a:	9e04      	ldr	r6, [sp, #16]
    4d2c:	9a05      	ldr	r2, [sp, #20]
    4d2e:	0030      	movs	r0, r6
    4d30:	1aed      	subs	r5, r5, r3
    4d32:	040b      	lsls	r3, r1, #16
    4d34:	0c0c      	lsrs	r4, r1, #16
    4d36:	0c1b      	lsrs	r3, r3, #16
    4d38:	4358      	muls	r0, r3
    4d3a:	4366      	muls	r6, r4
    4d3c:	4353      	muls	r3, r2
    4d3e:	4354      	muls	r4, r2
    4d40:	199a      	adds	r2, r3, r6
    4d42:	0c03      	lsrs	r3, r0, #16
    4d44:	189b      	adds	r3, r3, r2
    4d46:	429e      	cmp	r6, r3
    4d48:	d903      	bls.n	4d52 <__aeabi_ddiv+0x3aa>
    4d4a:	2280      	movs	r2, #128	; 0x80
    4d4c:	0252      	lsls	r2, r2, #9
    4d4e:	4694      	mov	ip, r2
    4d50:	4464      	add	r4, ip
    4d52:	0c1a      	lsrs	r2, r3, #16
    4d54:	0400      	lsls	r0, r0, #16
    4d56:	041b      	lsls	r3, r3, #16
    4d58:	0c00      	lsrs	r0, r0, #16
    4d5a:	1914      	adds	r4, r2, r4
    4d5c:	181b      	adds	r3, r3, r0
    4d5e:	42a5      	cmp	r5, r4
    4d60:	d350      	bcc.n	4e04 <__aeabi_ddiv+0x45c>
    4d62:	d04d      	beq.n	4e00 <__aeabi_ddiv+0x458>
    4d64:	2301      	movs	r3, #1
    4d66:	4319      	orrs	r1, r3
    4d68:	4a96      	ldr	r2, [pc, #600]	; (4fc4 <__aeabi_ddiv+0x61c>)
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	4694      	mov	ip, r2
    4d6e:	4463      	add	r3, ip
    4d70:	2b00      	cmp	r3, #0
    4d72:	dc00      	bgt.n	4d76 <__aeabi_ddiv+0x3ce>
    4d74:	e6f3      	b.n	4b5e <__aeabi_ddiv+0x1b6>
    4d76:	074a      	lsls	r2, r1, #29
    4d78:	d009      	beq.n	4d8e <__aeabi_ddiv+0x3e6>
    4d7a:	220f      	movs	r2, #15
    4d7c:	400a      	ands	r2, r1
    4d7e:	2a04      	cmp	r2, #4
    4d80:	d005      	beq.n	4d8e <__aeabi_ddiv+0x3e6>
    4d82:	1d0a      	adds	r2, r1, #4
    4d84:	428a      	cmp	r2, r1
    4d86:	4189      	sbcs	r1, r1
    4d88:	4249      	negs	r1, r1
    4d8a:	448b      	add	fp, r1
    4d8c:	0011      	movs	r1, r2
    4d8e:	465a      	mov	r2, fp
    4d90:	01d2      	lsls	r2, r2, #7
    4d92:	d508      	bpl.n	4da6 <__aeabi_ddiv+0x3fe>
    4d94:	465a      	mov	r2, fp
    4d96:	4b8c      	ldr	r3, [pc, #560]	; (4fc8 <__aeabi_ddiv+0x620>)
    4d98:	401a      	ands	r2, r3
    4d9a:	4693      	mov	fp, r2
    4d9c:	2280      	movs	r2, #128	; 0x80
    4d9e:	00d2      	lsls	r2, r2, #3
    4da0:	4694      	mov	ip, r2
    4da2:	9b01      	ldr	r3, [sp, #4]
    4da4:	4463      	add	r3, ip
    4da6:	4a89      	ldr	r2, [pc, #548]	; (4fcc <__aeabi_ddiv+0x624>)
    4da8:	4293      	cmp	r3, r2
    4daa:	dd00      	ble.n	4dae <__aeabi_ddiv+0x406>
    4dac:	e65b      	b.n	4a66 <__aeabi_ddiv+0xbe>
    4dae:	465a      	mov	r2, fp
    4db0:	08c9      	lsrs	r1, r1, #3
    4db2:	0750      	lsls	r0, r2, #29
    4db4:	4308      	orrs	r0, r1
    4db6:	0256      	lsls	r6, r2, #9
    4db8:	4651      	mov	r1, sl
    4dba:	2201      	movs	r2, #1
    4dbc:	055b      	lsls	r3, r3, #21
    4dbe:	4681      	mov	r9, r0
    4dc0:	0b36      	lsrs	r6, r6, #12
    4dc2:	0d5b      	lsrs	r3, r3, #21
    4dc4:	400a      	ands	r2, r1
    4dc6:	e655      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4dc8:	2380      	movs	r3, #128	; 0x80
    4dca:	031b      	lsls	r3, r3, #12
    4dcc:	421e      	tst	r6, r3
    4dce:	d011      	beq.n	4df4 <__aeabi_ddiv+0x44c>
    4dd0:	465a      	mov	r2, fp
    4dd2:	421a      	tst	r2, r3
    4dd4:	d10e      	bne.n	4df4 <__aeabi_ddiv+0x44c>
    4dd6:	465e      	mov	r6, fp
    4dd8:	431e      	orrs	r6, r3
    4dda:	0336      	lsls	r6, r6, #12
    4ddc:	0b36      	lsrs	r6, r6, #12
    4dde:	002a      	movs	r2, r5
    4de0:	4689      	mov	r9, r1
    4de2:	4b7b      	ldr	r3, [pc, #492]	; (4fd0 <__aeabi_ddiv+0x628>)
    4de4:	e646      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4de6:	2b03      	cmp	r3, #3
    4de8:	d100      	bne.n	4dec <__aeabi_ddiv+0x444>
    4dea:	e0e1      	b.n	4fb0 <__aeabi_ddiv+0x608>
    4dec:	2b01      	cmp	r3, #1
    4dee:	d1bb      	bne.n	4d68 <__aeabi_ddiv+0x3c0>
    4df0:	401a      	ands	r2, r3
    4df2:	e6bb      	b.n	4b6c <__aeabi_ddiv+0x1c4>
    4df4:	431e      	orrs	r6, r3
    4df6:	0336      	lsls	r6, r6, #12
    4df8:	0b36      	lsrs	r6, r6, #12
    4dfa:	4642      	mov	r2, r8
    4dfc:	4b74      	ldr	r3, [pc, #464]	; (4fd0 <__aeabi_ddiv+0x628>)
    4dfe:	e639      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4e00:	2b00      	cmp	r3, #0
    4e02:	d0b1      	beq.n	4d68 <__aeabi_ddiv+0x3c0>
    4e04:	197d      	adds	r5, r7, r5
    4e06:	1e4a      	subs	r2, r1, #1
    4e08:	42af      	cmp	r7, r5
    4e0a:	d952      	bls.n	4eb2 <__aeabi_ddiv+0x50a>
    4e0c:	0011      	movs	r1, r2
    4e0e:	42a5      	cmp	r5, r4
    4e10:	d1a8      	bne.n	4d64 <__aeabi_ddiv+0x3bc>
    4e12:	9a03      	ldr	r2, [sp, #12]
    4e14:	429a      	cmp	r2, r3
    4e16:	d1a5      	bne.n	4d64 <__aeabi_ddiv+0x3bc>
    4e18:	e7a6      	b.n	4d68 <__aeabi_ddiv+0x3c0>
    4e1a:	0003      	movs	r3, r0
    4e1c:	003e      	movs	r6, r7
    4e1e:	3b28      	subs	r3, #40	; 0x28
    4e20:	409e      	lsls	r6, r3
    4e22:	2300      	movs	r3, #0
    4e24:	4699      	mov	r9, r3
    4e26:	e654      	b.n	4ad2 <__aeabi_ddiv+0x12a>
    4e28:	f001 f9ec 	bl	6204 <__clzsi2>
    4e2c:	3020      	adds	r0, #32
    4e2e:	e641      	b.n	4ab4 <__aeabi_ddiv+0x10c>
    4e30:	0003      	movs	r3, r0
    4e32:	4652      	mov	r2, sl
    4e34:	3b28      	subs	r3, #40	; 0x28
    4e36:	409a      	lsls	r2, r3
    4e38:	2100      	movs	r1, #0
    4e3a:	4693      	mov	fp, r2
    4e3c:	e677      	b.n	4b2e <__aeabi_ddiv+0x186>
    4e3e:	4650      	mov	r0, sl
    4e40:	f001 f9e0 	bl	6204 <__clzsi2>
    4e44:	3020      	adds	r0, #32
    4e46:	e65e      	b.n	4b06 <__aeabi_ddiv+0x15e>
    4e48:	9b02      	ldr	r3, [sp, #8]
    4e4a:	2600      	movs	r6, #0
    4e4c:	42ab      	cmp	r3, r5
    4e4e:	d300      	bcc.n	4e52 <__aeabi_ddiv+0x4aa>
    4e50:	e723      	b.n	4c9a <__aeabi_ddiv+0x2f2>
    4e52:	9e03      	ldr	r6, [sp, #12]
    4e54:	9902      	ldr	r1, [sp, #8]
    4e56:	46b4      	mov	ip, r6
    4e58:	4461      	add	r1, ip
    4e5a:	4688      	mov	r8, r1
    4e5c:	45b0      	cmp	r8, r6
    4e5e:	41b6      	sbcs	r6, r6
    4e60:	465b      	mov	r3, fp
    4e62:	4276      	negs	r6, r6
    4e64:	19f6      	adds	r6, r6, r7
    4e66:	18b2      	adds	r2, r6, r2
    4e68:	3b01      	subs	r3, #1
    4e6a:	9102      	str	r1, [sp, #8]
    4e6c:	4297      	cmp	r7, r2
    4e6e:	d213      	bcs.n	4e98 <__aeabi_ddiv+0x4f0>
    4e70:	4290      	cmp	r0, r2
    4e72:	d84f      	bhi.n	4f14 <__aeabi_ddiv+0x56c>
    4e74:	d100      	bne.n	4e78 <__aeabi_ddiv+0x4d0>
    4e76:	e08e      	b.n	4f96 <__aeabi_ddiv+0x5ee>
    4e78:	1a16      	subs	r6, r2, r0
    4e7a:	469b      	mov	fp, r3
    4e7c:	e70d      	b.n	4c9a <__aeabi_ddiv+0x2f2>
    4e7e:	4589      	cmp	r9, r1
    4e80:	d200      	bcs.n	4e84 <__aeabi_ddiv+0x4dc>
    4e82:	e68e      	b.n	4ba2 <__aeabi_ddiv+0x1fa>
    4e84:	0874      	lsrs	r4, r6, #1
    4e86:	464b      	mov	r3, r9
    4e88:	07f6      	lsls	r6, r6, #31
    4e8a:	0035      	movs	r5, r6
    4e8c:	085b      	lsrs	r3, r3, #1
    4e8e:	431d      	orrs	r5, r3
    4e90:	464b      	mov	r3, r9
    4e92:	07db      	lsls	r3, r3, #31
    4e94:	9302      	str	r3, [sp, #8]
    4e96:	e68b      	b.n	4bb0 <__aeabi_ddiv+0x208>
    4e98:	4297      	cmp	r7, r2
    4e9a:	d1ed      	bne.n	4e78 <__aeabi_ddiv+0x4d0>
    4e9c:	9903      	ldr	r1, [sp, #12]
    4e9e:	9c02      	ldr	r4, [sp, #8]
    4ea0:	42a1      	cmp	r1, r4
    4ea2:	d9e5      	bls.n	4e70 <__aeabi_ddiv+0x4c8>
    4ea4:	1a3e      	subs	r6, r7, r0
    4ea6:	469b      	mov	fp, r3
    4ea8:	e6f7      	b.n	4c9a <__aeabi_ddiv+0x2f2>
    4eaa:	4698      	mov	r8, r3
    4eac:	e6ca      	b.n	4c44 <__aeabi_ddiv+0x29c>
    4eae:	001e      	movs	r6, r3
    4eb0:	e6a5      	b.n	4bfe <__aeabi_ddiv+0x256>
    4eb2:	42ac      	cmp	r4, r5
    4eb4:	d83e      	bhi.n	4f34 <__aeabi_ddiv+0x58c>
    4eb6:	d074      	beq.n	4fa2 <__aeabi_ddiv+0x5fa>
    4eb8:	0011      	movs	r1, r2
    4eba:	e753      	b.n	4d64 <__aeabi_ddiv+0x3bc>
    4ebc:	2101      	movs	r1, #1
    4ebe:	4249      	negs	r1, r1
    4ec0:	e752      	b.n	4d68 <__aeabi_ddiv+0x3c0>
    4ec2:	001c      	movs	r4, r3
    4ec4:	e70e      	b.n	4ce4 <__aeabi_ddiv+0x33c>
    4ec6:	001e      	movs	r6, r3
    4ec8:	e72b      	b.n	4d22 <__aeabi_ddiv+0x37a>
    4eca:	2d1f      	cmp	r5, #31
    4ecc:	dc3c      	bgt.n	4f48 <__aeabi_ddiv+0x5a0>
    4ece:	2320      	movs	r3, #32
    4ed0:	000a      	movs	r2, r1
    4ed2:	4658      	mov	r0, fp
    4ed4:	1b5b      	subs	r3, r3, r5
    4ed6:	4098      	lsls	r0, r3
    4ed8:	40ea      	lsrs	r2, r5
    4eda:	4099      	lsls	r1, r3
    4edc:	4302      	orrs	r2, r0
    4ede:	1e48      	subs	r0, r1, #1
    4ee0:	4181      	sbcs	r1, r0
    4ee2:	465e      	mov	r6, fp
    4ee4:	4311      	orrs	r1, r2
    4ee6:	40ee      	lsrs	r6, r5
    4ee8:	074b      	lsls	r3, r1, #29
    4eea:	d009      	beq.n	4f00 <__aeabi_ddiv+0x558>
    4eec:	230f      	movs	r3, #15
    4eee:	400b      	ands	r3, r1
    4ef0:	2b04      	cmp	r3, #4
    4ef2:	d005      	beq.n	4f00 <__aeabi_ddiv+0x558>
    4ef4:	000b      	movs	r3, r1
    4ef6:	1d19      	adds	r1, r3, #4
    4ef8:	4299      	cmp	r1, r3
    4efa:	419b      	sbcs	r3, r3
    4efc:	425b      	negs	r3, r3
    4efe:	18f6      	adds	r6, r6, r3
    4f00:	0233      	lsls	r3, r6, #8
    4f02:	d53c      	bpl.n	4f7e <__aeabi_ddiv+0x5d6>
    4f04:	4653      	mov	r3, sl
    4f06:	2201      	movs	r2, #1
    4f08:	2100      	movs	r1, #0
    4f0a:	401a      	ands	r2, r3
    4f0c:	2600      	movs	r6, #0
    4f0e:	2301      	movs	r3, #1
    4f10:	4689      	mov	r9, r1
    4f12:	e5af      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4f14:	2302      	movs	r3, #2
    4f16:	425b      	negs	r3, r3
    4f18:	469c      	mov	ip, r3
    4f1a:	9c03      	ldr	r4, [sp, #12]
    4f1c:	44e3      	add	fp, ip
    4f1e:	46a4      	mov	ip, r4
    4f20:	9b02      	ldr	r3, [sp, #8]
    4f22:	4463      	add	r3, ip
    4f24:	4698      	mov	r8, r3
    4f26:	45a0      	cmp	r8, r4
    4f28:	41b6      	sbcs	r6, r6
    4f2a:	4276      	negs	r6, r6
    4f2c:	19f6      	adds	r6, r6, r7
    4f2e:	9302      	str	r3, [sp, #8]
    4f30:	18b2      	adds	r2, r6, r2
    4f32:	e6b1      	b.n	4c98 <__aeabi_ddiv+0x2f0>
    4f34:	9803      	ldr	r0, [sp, #12]
    4f36:	1e8a      	subs	r2, r1, #2
    4f38:	0041      	lsls	r1, r0, #1
    4f3a:	4281      	cmp	r1, r0
    4f3c:	41b6      	sbcs	r6, r6
    4f3e:	4276      	negs	r6, r6
    4f40:	19f6      	adds	r6, r6, r7
    4f42:	19ad      	adds	r5, r5, r6
    4f44:	9103      	str	r1, [sp, #12]
    4f46:	e761      	b.n	4e0c <__aeabi_ddiv+0x464>
    4f48:	221f      	movs	r2, #31
    4f4a:	4252      	negs	r2, r2
    4f4c:	1ad3      	subs	r3, r2, r3
    4f4e:	465a      	mov	r2, fp
    4f50:	40da      	lsrs	r2, r3
    4f52:	0013      	movs	r3, r2
    4f54:	2d20      	cmp	r5, #32
    4f56:	d029      	beq.n	4fac <__aeabi_ddiv+0x604>
    4f58:	2240      	movs	r2, #64	; 0x40
    4f5a:	4658      	mov	r0, fp
    4f5c:	1b55      	subs	r5, r2, r5
    4f5e:	40a8      	lsls	r0, r5
    4f60:	4301      	orrs	r1, r0
    4f62:	1e48      	subs	r0, r1, #1
    4f64:	4181      	sbcs	r1, r0
    4f66:	2007      	movs	r0, #7
    4f68:	430b      	orrs	r3, r1
    4f6a:	4018      	ands	r0, r3
    4f6c:	2600      	movs	r6, #0
    4f6e:	2800      	cmp	r0, #0
    4f70:	d009      	beq.n	4f86 <__aeabi_ddiv+0x5de>
    4f72:	220f      	movs	r2, #15
    4f74:	2600      	movs	r6, #0
    4f76:	401a      	ands	r2, r3
    4f78:	0019      	movs	r1, r3
    4f7a:	2a04      	cmp	r2, #4
    4f7c:	d1bb      	bne.n	4ef6 <__aeabi_ddiv+0x54e>
    4f7e:	000b      	movs	r3, r1
    4f80:	0770      	lsls	r0, r6, #29
    4f82:	0276      	lsls	r6, r6, #9
    4f84:	0b36      	lsrs	r6, r6, #12
    4f86:	08db      	lsrs	r3, r3, #3
    4f88:	4303      	orrs	r3, r0
    4f8a:	4699      	mov	r9, r3
    4f8c:	2201      	movs	r2, #1
    4f8e:	4653      	mov	r3, sl
    4f90:	401a      	ands	r2, r3
    4f92:	2300      	movs	r3, #0
    4f94:	e56e      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4f96:	9902      	ldr	r1, [sp, #8]
    4f98:	428d      	cmp	r5, r1
    4f9a:	d8bb      	bhi.n	4f14 <__aeabi_ddiv+0x56c>
    4f9c:	469b      	mov	fp, r3
    4f9e:	2600      	movs	r6, #0
    4fa0:	e67b      	b.n	4c9a <__aeabi_ddiv+0x2f2>
    4fa2:	9803      	ldr	r0, [sp, #12]
    4fa4:	4298      	cmp	r0, r3
    4fa6:	d3c5      	bcc.n	4f34 <__aeabi_ddiv+0x58c>
    4fa8:	0011      	movs	r1, r2
    4faa:	e732      	b.n	4e12 <__aeabi_ddiv+0x46a>
    4fac:	2000      	movs	r0, #0
    4fae:	e7d7      	b.n	4f60 <__aeabi_ddiv+0x5b8>
    4fb0:	2680      	movs	r6, #128	; 0x80
    4fb2:	465b      	mov	r3, fp
    4fb4:	0336      	lsls	r6, r6, #12
    4fb6:	431e      	orrs	r6, r3
    4fb8:	0336      	lsls	r6, r6, #12
    4fba:	0b36      	lsrs	r6, r6, #12
    4fbc:	9a00      	ldr	r2, [sp, #0]
    4fbe:	4689      	mov	r9, r1
    4fc0:	4b03      	ldr	r3, [pc, #12]	; (4fd0 <__aeabi_ddiv+0x628>)
    4fc2:	e557      	b.n	4a74 <__aeabi_ddiv+0xcc>
    4fc4:	000003ff 	.word	0x000003ff
    4fc8:	feffffff 	.word	0xfeffffff
    4fcc:	000007fe 	.word	0x000007fe
    4fd0:	000007ff 	.word	0x000007ff

00004fd4 <__eqdf2>:
    4fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fd6:	465f      	mov	r7, fp
    4fd8:	4656      	mov	r6, sl
    4fda:	464d      	mov	r5, r9
    4fdc:	4644      	mov	r4, r8
    4fde:	b4f0      	push	{r4, r5, r6, r7}
    4fe0:	031f      	lsls	r7, r3, #12
    4fe2:	005c      	lsls	r4, r3, #1
    4fe4:	0fdb      	lsrs	r3, r3, #31
    4fe6:	469a      	mov	sl, r3
    4fe8:	4b19      	ldr	r3, [pc, #100]	; (5050 <__eqdf2+0x7c>)
    4fea:	030e      	lsls	r6, r1, #12
    4fec:	004d      	lsls	r5, r1, #1
    4fee:	0fc9      	lsrs	r1, r1, #31
    4ff0:	4680      	mov	r8, r0
    4ff2:	0b36      	lsrs	r6, r6, #12
    4ff4:	0d6d      	lsrs	r5, r5, #21
    4ff6:	468b      	mov	fp, r1
    4ff8:	4691      	mov	r9, r2
    4ffa:	0b3f      	lsrs	r7, r7, #12
    4ffc:	0d64      	lsrs	r4, r4, #21
    4ffe:	429d      	cmp	r5, r3
    5000:	d019      	beq.n	5036 <__eqdf2+0x62>
    5002:	4b13      	ldr	r3, [pc, #76]	; (5050 <__eqdf2+0x7c>)
    5004:	429c      	cmp	r4, r3
    5006:	d01b      	beq.n	5040 <__eqdf2+0x6c>
    5008:	2301      	movs	r3, #1
    500a:	42a5      	cmp	r5, r4
    500c:	d006      	beq.n	501c <__eqdf2+0x48>
    500e:	0018      	movs	r0, r3
    5010:	bc3c      	pop	{r2, r3, r4, r5}
    5012:	4690      	mov	r8, r2
    5014:	4699      	mov	r9, r3
    5016:	46a2      	mov	sl, r4
    5018:	46ab      	mov	fp, r5
    501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    501c:	42be      	cmp	r6, r7
    501e:	d1f6      	bne.n	500e <__eqdf2+0x3a>
    5020:	45c8      	cmp	r8, r9
    5022:	d1f4      	bne.n	500e <__eqdf2+0x3a>
    5024:	45d3      	cmp	fp, sl
    5026:	d010      	beq.n	504a <__eqdf2+0x76>
    5028:	2d00      	cmp	r5, #0
    502a:	d1f0      	bne.n	500e <__eqdf2+0x3a>
    502c:	4330      	orrs	r0, r6
    502e:	0003      	movs	r3, r0
    5030:	1e5a      	subs	r2, r3, #1
    5032:	4193      	sbcs	r3, r2
    5034:	e7eb      	b.n	500e <__eqdf2+0x3a>
    5036:	0031      	movs	r1, r6
    5038:	2301      	movs	r3, #1
    503a:	4301      	orrs	r1, r0
    503c:	d1e7      	bne.n	500e <__eqdf2+0x3a>
    503e:	e7e0      	b.n	5002 <__eqdf2+0x2e>
    5040:	433a      	orrs	r2, r7
    5042:	2301      	movs	r3, #1
    5044:	2a00      	cmp	r2, #0
    5046:	d1e2      	bne.n	500e <__eqdf2+0x3a>
    5048:	e7de      	b.n	5008 <__eqdf2+0x34>
    504a:	2300      	movs	r3, #0
    504c:	e7df      	b.n	500e <__eqdf2+0x3a>
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	000007ff 	.word	0x000007ff

00005054 <__gedf2>:
    5054:	b5f0      	push	{r4, r5, r6, r7, lr}
    5056:	465f      	mov	r7, fp
    5058:	4644      	mov	r4, r8
    505a:	4656      	mov	r6, sl
    505c:	464d      	mov	r5, r9
    505e:	b4f0      	push	{r4, r5, r6, r7}
    5060:	031f      	lsls	r7, r3, #12
    5062:	0b3c      	lsrs	r4, r7, #12
    5064:	4f2c      	ldr	r7, [pc, #176]	; (5118 <__gedf2+0xc4>)
    5066:	030e      	lsls	r6, r1, #12
    5068:	004d      	lsls	r5, r1, #1
    506a:	46a3      	mov	fp, r4
    506c:	005c      	lsls	r4, r3, #1
    506e:	4684      	mov	ip, r0
    5070:	0b36      	lsrs	r6, r6, #12
    5072:	0d6d      	lsrs	r5, r5, #21
    5074:	0fc9      	lsrs	r1, r1, #31
    5076:	4690      	mov	r8, r2
    5078:	0d64      	lsrs	r4, r4, #21
    507a:	0fdb      	lsrs	r3, r3, #31
    507c:	42bd      	cmp	r5, r7
    507e:	d02b      	beq.n	50d8 <__gedf2+0x84>
    5080:	4f25      	ldr	r7, [pc, #148]	; (5118 <__gedf2+0xc4>)
    5082:	42bc      	cmp	r4, r7
    5084:	d02e      	beq.n	50e4 <__gedf2+0x90>
    5086:	2d00      	cmp	r5, #0
    5088:	d10e      	bne.n	50a8 <__gedf2+0x54>
    508a:	4330      	orrs	r0, r6
    508c:	0007      	movs	r7, r0
    508e:	4681      	mov	r9, r0
    5090:	4278      	negs	r0, r7
    5092:	4178      	adcs	r0, r7
    5094:	2c00      	cmp	r4, #0
    5096:	d117      	bne.n	50c8 <__gedf2+0x74>
    5098:	465f      	mov	r7, fp
    509a:	433a      	orrs	r2, r7
    509c:	d114      	bne.n	50c8 <__gedf2+0x74>
    509e:	464b      	mov	r3, r9
    50a0:	2000      	movs	r0, #0
    50a2:	2b00      	cmp	r3, #0
    50a4:	d00a      	beq.n	50bc <__gedf2+0x68>
    50a6:	e006      	b.n	50b6 <__gedf2+0x62>
    50a8:	2c00      	cmp	r4, #0
    50aa:	d102      	bne.n	50b2 <__gedf2+0x5e>
    50ac:	4658      	mov	r0, fp
    50ae:	4302      	orrs	r2, r0
    50b0:	d001      	beq.n	50b6 <__gedf2+0x62>
    50b2:	4299      	cmp	r1, r3
    50b4:	d01a      	beq.n	50ec <__gedf2+0x98>
    50b6:	2301      	movs	r3, #1
    50b8:	4248      	negs	r0, r1
    50ba:	4318      	orrs	r0, r3
    50bc:	bc3c      	pop	{r2, r3, r4, r5}
    50be:	4690      	mov	r8, r2
    50c0:	4699      	mov	r9, r3
    50c2:	46a2      	mov	sl, r4
    50c4:	46ab      	mov	fp, r5
    50c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c8:	2800      	cmp	r0, #0
    50ca:	d0f2      	beq.n	50b2 <__gedf2+0x5e>
    50cc:	4258      	negs	r0, r3
    50ce:	4158      	adcs	r0, r3
    50d0:	2201      	movs	r2, #1
    50d2:	4240      	negs	r0, r0
    50d4:	4310      	orrs	r0, r2
    50d6:	e7f1      	b.n	50bc <__gedf2+0x68>
    50d8:	0037      	movs	r7, r6
    50da:	4307      	orrs	r7, r0
    50dc:	d0d0      	beq.n	5080 <__gedf2+0x2c>
    50de:	2002      	movs	r0, #2
    50e0:	4240      	negs	r0, r0
    50e2:	e7eb      	b.n	50bc <__gedf2+0x68>
    50e4:	465f      	mov	r7, fp
    50e6:	4317      	orrs	r7, r2
    50e8:	d0cd      	beq.n	5086 <__gedf2+0x32>
    50ea:	e7f8      	b.n	50de <__gedf2+0x8a>
    50ec:	42a5      	cmp	r5, r4
    50ee:	dce2      	bgt.n	50b6 <__gedf2+0x62>
    50f0:	db05      	blt.n	50fe <__gedf2+0xaa>
    50f2:	455e      	cmp	r6, fp
    50f4:	d8df      	bhi.n	50b6 <__gedf2+0x62>
    50f6:	d008      	beq.n	510a <__gedf2+0xb6>
    50f8:	2000      	movs	r0, #0
    50fa:	455e      	cmp	r6, fp
    50fc:	d2de      	bcs.n	50bc <__gedf2+0x68>
    50fe:	4248      	negs	r0, r1
    5100:	4148      	adcs	r0, r1
    5102:	2301      	movs	r3, #1
    5104:	4240      	negs	r0, r0
    5106:	4318      	orrs	r0, r3
    5108:	e7d8      	b.n	50bc <__gedf2+0x68>
    510a:	45c4      	cmp	ip, r8
    510c:	d8d3      	bhi.n	50b6 <__gedf2+0x62>
    510e:	2000      	movs	r0, #0
    5110:	45c4      	cmp	ip, r8
    5112:	d3f4      	bcc.n	50fe <__gedf2+0xaa>
    5114:	e7d2      	b.n	50bc <__gedf2+0x68>
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	000007ff 	.word	0x000007ff

0000511c <__ledf2>:
    511c:	b5f0      	push	{r4, r5, r6, r7, lr}
    511e:	465f      	mov	r7, fp
    5120:	464d      	mov	r5, r9
    5122:	4644      	mov	r4, r8
    5124:	4656      	mov	r6, sl
    5126:	b4f0      	push	{r4, r5, r6, r7}
    5128:	031c      	lsls	r4, r3, #12
    512a:	0b24      	lsrs	r4, r4, #12
    512c:	46a4      	mov	ip, r4
    512e:	4c2f      	ldr	r4, [pc, #188]	; (51ec <__ledf2+0xd0>)
    5130:	030f      	lsls	r7, r1, #12
    5132:	004d      	lsls	r5, r1, #1
    5134:	005e      	lsls	r6, r3, #1
    5136:	0fc9      	lsrs	r1, r1, #31
    5138:	4680      	mov	r8, r0
    513a:	0b3f      	lsrs	r7, r7, #12
    513c:	0d6d      	lsrs	r5, r5, #21
    513e:	468b      	mov	fp, r1
    5140:	4691      	mov	r9, r2
    5142:	0d76      	lsrs	r6, r6, #21
    5144:	0fdb      	lsrs	r3, r3, #31
    5146:	42a5      	cmp	r5, r4
    5148:	d020      	beq.n	518c <__ledf2+0x70>
    514a:	4c28      	ldr	r4, [pc, #160]	; (51ec <__ledf2+0xd0>)
    514c:	42a6      	cmp	r6, r4
    514e:	d022      	beq.n	5196 <__ledf2+0x7a>
    5150:	2d00      	cmp	r5, #0
    5152:	d112      	bne.n	517a <__ledf2+0x5e>
    5154:	4338      	orrs	r0, r7
    5156:	4244      	negs	r4, r0
    5158:	4144      	adcs	r4, r0
    515a:	2e00      	cmp	r6, #0
    515c:	d020      	beq.n	51a0 <__ledf2+0x84>
    515e:	2c00      	cmp	r4, #0
    5160:	d00d      	beq.n	517e <__ledf2+0x62>
    5162:	425c      	negs	r4, r3
    5164:	4163      	adcs	r3, r4
    5166:	2401      	movs	r4, #1
    5168:	425b      	negs	r3, r3
    516a:	431c      	orrs	r4, r3
    516c:	0020      	movs	r0, r4
    516e:	bc3c      	pop	{r2, r3, r4, r5}
    5170:	4690      	mov	r8, r2
    5172:	4699      	mov	r9, r3
    5174:	46a2      	mov	sl, r4
    5176:	46ab      	mov	fp, r5
    5178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    517a:	2e00      	cmp	r6, #0
    517c:	d017      	beq.n	51ae <__ledf2+0x92>
    517e:	455b      	cmp	r3, fp
    5180:	d019      	beq.n	51b6 <__ledf2+0x9a>
    5182:	465b      	mov	r3, fp
    5184:	425c      	negs	r4, r3
    5186:	2301      	movs	r3, #1
    5188:	431c      	orrs	r4, r3
    518a:	e7ef      	b.n	516c <__ledf2+0x50>
    518c:	0039      	movs	r1, r7
    518e:	2402      	movs	r4, #2
    5190:	4301      	orrs	r1, r0
    5192:	d1eb      	bne.n	516c <__ledf2+0x50>
    5194:	e7d9      	b.n	514a <__ledf2+0x2e>
    5196:	4661      	mov	r1, ip
    5198:	2402      	movs	r4, #2
    519a:	4311      	orrs	r1, r2
    519c:	d1e6      	bne.n	516c <__ledf2+0x50>
    519e:	e7d7      	b.n	5150 <__ledf2+0x34>
    51a0:	4661      	mov	r1, ip
    51a2:	430a      	orrs	r2, r1
    51a4:	d1db      	bne.n	515e <__ledf2+0x42>
    51a6:	2400      	movs	r4, #0
    51a8:	2800      	cmp	r0, #0
    51aa:	d0df      	beq.n	516c <__ledf2+0x50>
    51ac:	e7e9      	b.n	5182 <__ledf2+0x66>
    51ae:	4661      	mov	r1, ip
    51b0:	430a      	orrs	r2, r1
    51b2:	d1e4      	bne.n	517e <__ledf2+0x62>
    51b4:	e7e5      	b.n	5182 <__ledf2+0x66>
    51b6:	42b5      	cmp	r5, r6
    51b8:	dd03      	ble.n	51c2 <__ledf2+0xa6>
    51ba:	2201      	movs	r2, #1
    51bc:	425c      	negs	r4, r3
    51be:	4314      	orrs	r4, r2
    51c0:	e7d4      	b.n	516c <__ledf2+0x50>
    51c2:	42b5      	cmp	r5, r6
    51c4:	dbcd      	blt.n	5162 <__ledf2+0x46>
    51c6:	4567      	cmp	r7, ip
    51c8:	d8db      	bhi.n	5182 <__ledf2+0x66>
    51ca:	d009      	beq.n	51e0 <__ledf2+0xc4>
    51cc:	2400      	movs	r4, #0
    51ce:	4567      	cmp	r7, ip
    51d0:	d2cc      	bcs.n	516c <__ledf2+0x50>
    51d2:	4659      	mov	r1, fp
    51d4:	424c      	negs	r4, r1
    51d6:	4161      	adcs	r1, r4
    51d8:	2401      	movs	r4, #1
    51da:	4249      	negs	r1, r1
    51dc:	430c      	orrs	r4, r1
    51de:	e7c5      	b.n	516c <__ledf2+0x50>
    51e0:	45c8      	cmp	r8, r9
    51e2:	d8ce      	bhi.n	5182 <__ledf2+0x66>
    51e4:	2400      	movs	r4, #0
    51e6:	45c8      	cmp	r8, r9
    51e8:	d3f3      	bcc.n	51d2 <__ledf2+0xb6>
    51ea:	e7bf      	b.n	516c <__ledf2+0x50>
    51ec:	000007ff 	.word	0x000007ff

000051f0 <__aeabi_dmul>:
    51f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51f2:	465f      	mov	r7, fp
    51f4:	4656      	mov	r6, sl
    51f6:	464d      	mov	r5, r9
    51f8:	4644      	mov	r4, r8
    51fa:	b4f0      	push	{r4, r5, r6, r7}
    51fc:	030d      	lsls	r5, r1, #12
    51fe:	4699      	mov	r9, r3
    5200:	004e      	lsls	r6, r1, #1
    5202:	0b2b      	lsrs	r3, r5, #12
    5204:	b087      	sub	sp, #28
    5206:	0007      	movs	r7, r0
    5208:	4692      	mov	sl, r2
    520a:	4680      	mov	r8, r0
    520c:	469b      	mov	fp, r3
    520e:	0d76      	lsrs	r6, r6, #21
    5210:	0fcc      	lsrs	r4, r1, #31
    5212:	2e00      	cmp	r6, #0
    5214:	d069      	beq.n	52ea <__aeabi_dmul+0xfa>
    5216:	4b6d      	ldr	r3, [pc, #436]	; (53cc <__aeabi_dmul+0x1dc>)
    5218:	429e      	cmp	r6, r3
    521a:	d035      	beq.n	5288 <__aeabi_dmul+0x98>
    521c:	465b      	mov	r3, fp
    521e:	2280      	movs	r2, #128	; 0x80
    5220:	00dd      	lsls	r5, r3, #3
    5222:	0412      	lsls	r2, r2, #16
    5224:	0f43      	lsrs	r3, r0, #29
    5226:	4313      	orrs	r3, r2
    5228:	432b      	orrs	r3, r5
    522a:	469b      	mov	fp, r3
    522c:	00c3      	lsls	r3, r0, #3
    522e:	4698      	mov	r8, r3
    5230:	4b67      	ldr	r3, [pc, #412]	; (53d0 <__aeabi_dmul+0x1e0>)
    5232:	2700      	movs	r7, #0
    5234:	469c      	mov	ip, r3
    5236:	2300      	movs	r3, #0
    5238:	4466      	add	r6, ip
    523a:	9301      	str	r3, [sp, #4]
    523c:	464a      	mov	r2, r9
    523e:	0315      	lsls	r5, r2, #12
    5240:	0050      	lsls	r0, r2, #1
    5242:	0fd2      	lsrs	r2, r2, #31
    5244:	4653      	mov	r3, sl
    5246:	0b2d      	lsrs	r5, r5, #12
    5248:	0d40      	lsrs	r0, r0, #21
    524a:	4691      	mov	r9, r2
    524c:	d100      	bne.n	5250 <__aeabi_dmul+0x60>
    524e:	e076      	b.n	533e <__aeabi_dmul+0x14e>
    5250:	4a5e      	ldr	r2, [pc, #376]	; (53cc <__aeabi_dmul+0x1dc>)
    5252:	4290      	cmp	r0, r2
    5254:	d06c      	beq.n	5330 <__aeabi_dmul+0x140>
    5256:	2280      	movs	r2, #128	; 0x80
    5258:	0f5b      	lsrs	r3, r3, #29
    525a:	0412      	lsls	r2, r2, #16
    525c:	4313      	orrs	r3, r2
    525e:	4a5c      	ldr	r2, [pc, #368]	; (53d0 <__aeabi_dmul+0x1e0>)
    5260:	00ed      	lsls	r5, r5, #3
    5262:	4694      	mov	ip, r2
    5264:	431d      	orrs	r5, r3
    5266:	4653      	mov	r3, sl
    5268:	2200      	movs	r2, #0
    526a:	00db      	lsls	r3, r3, #3
    526c:	4460      	add	r0, ip
    526e:	4649      	mov	r1, r9
    5270:	1836      	adds	r6, r6, r0
    5272:	1c70      	adds	r0, r6, #1
    5274:	4061      	eors	r1, r4
    5276:	9002      	str	r0, [sp, #8]
    5278:	4317      	orrs	r7, r2
    527a:	2f0f      	cmp	r7, #15
    527c:	d900      	bls.n	5280 <__aeabi_dmul+0x90>
    527e:	e0af      	b.n	53e0 <__aeabi_dmul+0x1f0>
    5280:	4854      	ldr	r0, [pc, #336]	; (53d4 <__aeabi_dmul+0x1e4>)
    5282:	00bf      	lsls	r7, r7, #2
    5284:	59c7      	ldr	r7, [r0, r7]
    5286:	46bf      	mov	pc, r7
    5288:	465b      	mov	r3, fp
    528a:	431f      	orrs	r7, r3
    528c:	d000      	beq.n	5290 <__aeabi_dmul+0xa0>
    528e:	e088      	b.n	53a2 <__aeabi_dmul+0x1b2>
    5290:	2300      	movs	r3, #0
    5292:	469b      	mov	fp, r3
    5294:	4698      	mov	r8, r3
    5296:	3302      	adds	r3, #2
    5298:	2708      	movs	r7, #8
    529a:	9301      	str	r3, [sp, #4]
    529c:	e7ce      	b.n	523c <__aeabi_dmul+0x4c>
    529e:	4649      	mov	r1, r9
    52a0:	2a02      	cmp	r2, #2
    52a2:	d06a      	beq.n	537a <__aeabi_dmul+0x18a>
    52a4:	2a03      	cmp	r2, #3
    52a6:	d100      	bne.n	52aa <__aeabi_dmul+0xba>
    52a8:	e209      	b.n	56be <__aeabi_dmul+0x4ce>
    52aa:	2a01      	cmp	r2, #1
    52ac:	d000      	beq.n	52b0 <__aeabi_dmul+0xc0>
    52ae:	e1bb      	b.n	5628 <__aeabi_dmul+0x438>
    52b0:	4011      	ands	r1, r2
    52b2:	2200      	movs	r2, #0
    52b4:	2300      	movs	r3, #0
    52b6:	2500      	movs	r5, #0
    52b8:	4690      	mov	r8, r2
    52ba:	b2cc      	uxtb	r4, r1
    52bc:	2100      	movs	r1, #0
    52be:	032d      	lsls	r5, r5, #12
    52c0:	0d0a      	lsrs	r2, r1, #20
    52c2:	0512      	lsls	r2, r2, #20
    52c4:	0b2d      	lsrs	r5, r5, #12
    52c6:	4315      	orrs	r5, r2
    52c8:	4a43      	ldr	r2, [pc, #268]	; (53d8 <__aeabi_dmul+0x1e8>)
    52ca:	051b      	lsls	r3, r3, #20
    52cc:	4015      	ands	r5, r2
    52ce:	431d      	orrs	r5, r3
    52d0:	006d      	lsls	r5, r5, #1
    52d2:	07e4      	lsls	r4, r4, #31
    52d4:	086d      	lsrs	r5, r5, #1
    52d6:	4325      	orrs	r5, r4
    52d8:	4640      	mov	r0, r8
    52da:	0029      	movs	r1, r5
    52dc:	b007      	add	sp, #28
    52de:	bc3c      	pop	{r2, r3, r4, r5}
    52e0:	4690      	mov	r8, r2
    52e2:	4699      	mov	r9, r3
    52e4:	46a2      	mov	sl, r4
    52e6:	46ab      	mov	fp, r5
    52e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ea:	4303      	orrs	r3, r0
    52ec:	d052      	beq.n	5394 <__aeabi_dmul+0x1a4>
    52ee:	465b      	mov	r3, fp
    52f0:	2b00      	cmp	r3, #0
    52f2:	d100      	bne.n	52f6 <__aeabi_dmul+0x106>
    52f4:	e18a      	b.n	560c <__aeabi_dmul+0x41c>
    52f6:	4658      	mov	r0, fp
    52f8:	f000 ff84 	bl	6204 <__clzsi2>
    52fc:	0003      	movs	r3, r0
    52fe:	3b0b      	subs	r3, #11
    5300:	2b1c      	cmp	r3, #28
    5302:	dd00      	ble.n	5306 <__aeabi_dmul+0x116>
    5304:	e17b      	b.n	55fe <__aeabi_dmul+0x40e>
    5306:	221d      	movs	r2, #29
    5308:	1ad3      	subs	r3, r2, r3
    530a:	003a      	movs	r2, r7
    530c:	0001      	movs	r1, r0
    530e:	465d      	mov	r5, fp
    5310:	40da      	lsrs	r2, r3
    5312:	3908      	subs	r1, #8
    5314:	408d      	lsls	r5, r1
    5316:	0013      	movs	r3, r2
    5318:	408f      	lsls	r7, r1
    531a:	432b      	orrs	r3, r5
    531c:	469b      	mov	fp, r3
    531e:	46b8      	mov	r8, r7
    5320:	4b2e      	ldr	r3, [pc, #184]	; (53dc <__aeabi_dmul+0x1ec>)
    5322:	2700      	movs	r7, #0
    5324:	469c      	mov	ip, r3
    5326:	2300      	movs	r3, #0
    5328:	4460      	add	r0, ip
    532a:	4246      	negs	r6, r0
    532c:	9301      	str	r3, [sp, #4]
    532e:	e785      	b.n	523c <__aeabi_dmul+0x4c>
    5330:	4652      	mov	r2, sl
    5332:	432a      	orrs	r2, r5
    5334:	d12c      	bne.n	5390 <__aeabi_dmul+0x1a0>
    5336:	2500      	movs	r5, #0
    5338:	2300      	movs	r3, #0
    533a:	2202      	movs	r2, #2
    533c:	e797      	b.n	526e <__aeabi_dmul+0x7e>
    533e:	4652      	mov	r2, sl
    5340:	432a      	orrs	r2, r5
    5342:	d021      	beq.n	5388 <__aeabi_dmul+0x198>
    5344:	2d00      	cmp	r5, #0
    5346:	d100      	bne.n	534a <__aeabi_dmul+0x15a>
    5348:	e154      	b.n	55f4 <__aeabi_dmul+0x404>
    534a:	0028      	movs	r0, r5
    534c:	f000 ff5a 	bl	6204 <__clzsi2>
    5350:	0003      	movs	r3, r0
    5352:	3b0b      	subs	r3, #11
    5354:	2b1c      	cmp	r3, #28
    5356:	dd00      	ble.n	535a <__aeabi_dmul+0x16a>
    5358:	e146      	b.n	55e8 <__aeabi_dmul+0x3f8>
    535a:	211d      	movs	r1, #29
    535c:	1acb      	subs	r3, r1, r3
    535e:	4651      	mov	r1, sl
    5360:	0002      	movs	r2, r0
    5362:	40d9      	lsrs	r1, r3
    5364:	4653      	mov	r3, sl
    5366:	3a08      	subs	r2, #8
    5368:	4095      	lsls	r5, r2
    536a:	4093      	lsls	r3, r2
    536c:	430d      	orrs	r5, r1
    536e:	4a1b      	ldr	r2, [pc, #108]	; (53dc <__aeabi_dmul+0x1ec>)
    5370:	4694      	mov	ip, r2
    5372:	4460      	add	r0, ip
    5374:	4240      	negs	r0, r0
    5376:	2200      	movs	r2, #0
    5378:	e779      	b.n	526e <__aeabi_dmul+0x7e>
    537a:	2401      	movs	r4, #1
    537c:	2200      	movs	r2, #0
    537e:	400c      	ands	r4, r1
    5380:	4b12      	ldr	r3, [pc, #72]	; (53cc <__aeabi_dmul+0x1dc>)
    5382:	2500      	movs	r5, #0
    5384:	4690      	mov	r8, r2
    5386:	e799      	b.n	52bc <__aeabi_dmul+0xcc>
    5388:	2500      	movs	r5, #0
    538a:	2300      	movs	r3, #0
    538c:	2201      	movs	r2, #1
    538e:	e76e      	b.n	526e <__aeabi_dmul+0x7e>
    5390:	2203      	movs	r2, #3
    5392:	e76c      	b.n	526e <__aeabi_dmul+0x7e>
    5394:	2300      	movs	r3, #0
    5396:	469b      	mov	fp, r3
    5398:	4698      	mov	r8, r3
    539a:	3301      	adds	r3, #1
    539c:	2704      	movs	r7, #4
    539e:	9301      	str	r3, [sp, #4]
    53a0:	e74c      	b.n	523c <__aeabi_dmul+0x4c>
    53a2:	2303      	movs	r3, #3
    53a4:	270c      	movs	r7, #12
    53a6:	9301      	str	r3, [sp, #4]
    53a8:	e748      	b.n	523c <__aeabi_dmul+0x4c>
    53aa:	2300      	movs	r3, #0
    53ac:	2580      	movs	r5, #128	; 0x80
    53ae:	4698      	mov	r8, r3
    53b0:	2400      	movs	r4, #0
    53b2:	032d      	lsls	r5, r5, #12
    53b4:	4b05      	ldr	r3, [pc, #20]	; (53cc <__aeabi_dmul+0x1dc>)
    53b6:	e781      	b.n	52bc <__aeabi_dmul+0xcc>
    53b8:	465d      	mov	r5, fp
    53ba:	4643      	mov	r3, r8
    53bc:	9a01      	ldr	r2, [sp, #4]
    53be:	e76f      	b.n	52a0 <__aeabi_dmul+0xb0>
    53c0:	465d      	mov	r5, fp
    53c2:	4643      	mov	r3, r8
    53c4:	0021      	movs	r1, r4
    53c6:	9a01      	ldr	r2, [sp, #4]
    53c8:	e76a      	b.n	52a0 <__aeabi_dmul+0xb0>
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	000007ff 	.word	0x000007ff
    53d0:	fffffc01 	.word	0xfffffc01
    53d4:	00006658 	.word	0x00006658
    53d8:	800fffff 	.word	0x800fffff
    53dc:	000003f3 	.word	0x000003f3
    53e0:	4642      	mov	r2, r8
    53e2:	0c12      	lsrs	r2, r2, #16
    53e4:	4691      	mov	r9, r2
    53e6:	0c1a      	lsrs	r2, r3, #16
    53e8:	4694      	mov	ip, r2
    53ea:	4642      	mov	r2, r8
    53ec:	0417      	lsls	r7, r2, #16
    53ee:	464a      	mov	r2, r9
    53f0:	041b      	lsls	r3, r3, #16
    53f2:	0c1b      	lsrs	r3, r3, #16
    53f4:	435a      	muls	r2, r3
    53f6:	4660      	mov	r0, ip
    53f8:	4690      	mov	r8, r2
    53fa:	464a      	mov	r2, r9
    53fc:	4342      	muls	r2, r0
    53fe:	0010      	movs	r0, r2
    5400:	9203      	str	r2, [sp, #12]
    5402:	4662      	mov	r2, ip
    5404:	001c      	movs	r4, r3
    5406:	0c3f      	lsrs	r7, r7, #16
    5408:	437a      	muls	r2, r7
    540a:	437c      	muls	r4, r7
    540c:	4442      	add	r2, r8
    540e:	9201      	str	r2, [sp, #4]
    5410:	0c22      	lsrs	r2, r4, #16
    5412:	4692      	mov	sl, r2
    5414:	9a01      	ldr	r2, [sp, #4]
    5416:	4452      	add	r2, sl
    5418:	4590      	cmp	r8, r2
    541a:	d906      	bls.n	542a <__aeabi_dmul+0x23a>
    541c:	4682      	mov	sl, r0
    541e:	2080      	movs	r0, #128	; 0x80
    5420:	0240      	lsls	r0, r0, #9
    5422:	4680      	mov	r8, r0
    5424:	44c2      	add	sl, r8
    5426:	4650      	mov	r0, sl
    5428:	9003      	str	r0, [sp, #12]
    542a:	0c10      	lsrs	r0, r2, #16
    542c:	9004      	str	r0, [sp, #16]
    542e:	4648      	mov	r0, r9
    5430:	0424      	lsls	r4, r4, #16
    5432:	0c24      	lsrs	r4, r4, #16
    5434:	0412      	lsls	r2, r2, #16
    5436:	1912      	adds	r2, r2, r4
    5438:	9205      	str	r2, [sp, #20]
    543a:	0c2a      	lsrs	r2, r5, #16
    543c:	042d      	lsls	r5, r5, #16
    543e:	0c2d      	lsrs	r5, r5, #16
    5440:	4368      	muls	r0, r5
    5442:	002c      	movs	r4, r5
    5444:	4682      	mov	sl, r0
    5446:	4648      	mov	r0, r9
    5448:	437c      	muls	r4, r7
    544a:	4350      	muls	r0, r2
    544c:	4681      	mov	r9, r0
    544e:	0c20      	lsrs	r0, r4, #16
    5450:	4680      	mov	r8, r0
    5452:	4357      	muls	r7, r2
    5454:	4457      	add	r7, sl
    5456:	4447      	add	r7, r8
    5458:	45ba      	cmp	sl, r7
    545a:	d903      	bls.n	5464 <__aeabi_dmul+0x274>
    545c:	2080      	movs	r0, #128	; 0x80
    545e:	0240      	lsls	r0, r0, #9
    5460:	4680      	mov	r8, r0
    5462:	44c1      	add	r9, r8
    5464:	0c38      	lsrs	r0, r7, #16
    5466:	043f      	lsls	r7, r7, #16
    5468:	46b8      	mov	r8, r7
    546a:	4448      	add	r0, r9
    546c:	0424      	lsls	r4, r4, #16
    546e:	0c24      	lsrs	r4, r4, #16
    5470:	9001      	str	r0, [sp, #4]
    5472:	9804      	ldr	r0, [sp, #16]
    5474:	44a0      	add	r8, r4
    5476:	4440      	add	r0, r8
    5478:	9004      	str	r0, [sp, #16]
    547a:	4658      	mov	r0, fp
    547c:	0c00      	lsrs	r0, r0, #16
    547e:	4681      	mov	r9, r0
    5480:	4658      	mov	r0, fp
    5482:	0404      	lsls	r4, r0, #16
    5484:	0c20      	lsrs	r0, r4, #16
    5486:	4682      	mov	sl, r0
    5488:	0007      	movs	r7, r0
    548a:	4648      	mov	r0, r9
    548c:	435f      	muls	r7, r3
    548e:	464c      	mov	r4, r9
    5490:	4343      	muls	r3, r0
    5492:	4660      	mov	r0, ip
    5494:	4360      	muls	r0, r4
    5496:	4664      	mov	r4, ip
    5498:	4683      	mov	fp, r0
    549a:	4650      	mov	r0, sl
    549c:	4344      	muls	r4, r0
    549e:	0c38      	lsrs	r0, r7, #16
    54a0:	4684      	mov	ip, r0
    54a2:	18e4      	adds	r4, r4, r3
    54a4:	4464      	add	r4, ip
    54a6:	42a3      	cmp	r3, r4
    54a8:	d903      	bls.n	54b2 <__aeabi_dmul+0x2c2>
    54aa:	2380      	movs	r3, #128	; 0x80
    54ac:	025b      	lsls	r3, r3, #9
    54ae:	469c      	mov	ip, r3
    54b0:	44e3      	add	fp, ip
    54b2:	4648      	mov	r0, r9
    54b4:	043f      	lsls	r7, r7, #16
    54b6:	0c23      	lsrs	r3, r4, #16
    54b8:	0c3f      	lsrs	r7, r7, #16
    54ba:	0424      	lsls	r4, r4, #16
    54bc:	19e4      	adds	r4, r4, r7
    54be:	4657      	mov	r7, sl
    54c0:	4368      	muls	r0, r5
    54c2:	436f      	muls	r7, r5
    54c4:	4684      	mov	ip, r0
    54c6:	464d      	mov	r5, r9
    54c8:	4650      	mov	r0, sl
    54ca:	4355      	muls	r5, r2
    54cc:	4342      	muls	r2, r0
    54ce:	0c38      	lsrs	r0, r7, #16
    54d0:	4681      	mov	r9, r0
    54d2:	4462      	add	r2, ip
    54d4:	444a      	add	r2, r9
    54d6:	445b      	add	r3, fp
    54d8:	4594      	cmp	ip, r2
    54da:	d903      	bls.n	54e4 <__aeabi_dmul+0x2f4>
    54dc:	2080      	movs	r0, #128	; 0x80
    54de:	0240      	lsls	r0, r0, #9
    54e0:	4684      	mov	ip, r0
    54e2:	4465      	add	r5, ip
    54e4:	9803      	ldr	r0, [sp, #12]
    54e6:	043f      	lsls	r7, r7, #16
    54e8:	4683      	mov	fp, r0
    54ea:	9804      	ldr	r0, [sp, #16]
    54ec:	0c3f      	lsrs	r7, r7, #16
    54ee:	4684      	mov	ip, r0
    54f0:	44e3      	add	fp, ip
    54f2:	45c3      	cmp	fp, r8
    54f4:	4180      	sbcs	r0, r0
    54f6:	4240      	negs	r0, r0
    54f8:	4682      	mov	sl, r0
    54fa:	0410      	lsls	r0, r2, #16
    54fc:	4684      	mov	ip, r0
    54fe:	9801      	ldr	r0, [sp, #4]
    5500:	4467      	add	r7, ip
    5502:	4684      	mov	ip, r0
    5504:	4467      	add	r7, ip
    5506:	44a3      	add	fp, r4
    5508:	46bc      	mov	ip, r7
    550a:	45a3      	cmp	fp, r4
    550c:	41a4      	sbcs	r4, r4
    550e:	4699      	mov	r9, r3
    5510:	44d4      	add	ip, sl
    5512:	4264      	negs	r4, r4
    5514:	4287      	cmp	r7, r0
    5516:	41bf      	sbcs	r7, r7
    5518:	45d4      	cmp	ip, sl
    551a:	4180      	sbcs	r0, r0
    551c:	44e1      	add	r9, ip
    551e:	46a0      	mov	r8, r4
    5520:	4599      	cmp	r9, r3
    5522:	419b      	sbcs	r3, r3
    5524:	427f      	negs	r7, r7
    5526:	4240      	negs	r0, r0
    5528:	44c8      	add	r8, r9
    552a:	4307      	orrs	r7, r0
    552c:	0c12      	lsrs	r2, r2, #16
    552e:	18ba      	adds	r2, r7, r2
    5530:	45a0      	cmp	r8, r4
    5532:	41a4      	sbcs	r4, r4
    5534:	425f      	negs	r7, r3
    5536:	003b      	movs	r3, r7
    5538:	4264      	negs	r4, r4
    553a:	4323      	orrs	r3, r4
    553c:	18d7      	adds	r7, r2, r3
    553e:	4643      	mov	r3, r8
    5540:	197d      	adds	r5, r7, r5
    5542:	0ddb      	lsrs	r3, r3, #23
    5544:	026d      	lsls	r5, r5, #9
    5546:	431d      	orrs	r5, r3
    5548:	465b      	mov	r3, fp
    554a:	025a      	lsls	r2, r3, #9
    554c:	9b05      	ldr	r3, [sp, #20]
    554e:	431a      	orrs	r2, r3
    5550:	1e53      	subs	r3, r2, #1
    5552:	419a      	sbcs	r2, r3
    5554:	465b      	mov	r3, fp
    5556:	0ddb      	lsrs	r3, r3, #23
    5558:	431a      	orrs	r2, r3
    555a:	4643      	mov	r3, r8
    555c:	025b      	lsls	r3, r3, #9
    555e:	4313      	orrs	r3, r2
    5560:	01ea      	lsls	r2, r5, #7
    5562:	d507      	bpl.n	5574 <__aeabi_dmul+0x384>
    5564:	2201      	movs	r2, #1
    5566:	085c      	lsrs	r4, r3, #1
    5568:	4013      	ands	r3, r2
    556a:	4323      	orrs	r3, r4
    556c:	07ea      	lsls	r2, r5, #31
    556e:	9e02      	ldr	r6, [sp, #8]
    5570:	4313      	orrs	r3, r2
    5572:	086d      	lsrs	r5, r5, #1
    5574:	4a57      	ldr	r2, [pc, #348]	; (56d4 <__aeabi_dmul+0x4e4>)
    5576:	18b2      	adds	r2, r6, r2
    5578:	2a00      	cmp	r2, #0
    557a:	dd4b      	ble.n	5614 <__aeabi_dmul+0x424>
    557c:	0758      	lsls	r0, r3, #29
    557e:	d009      	beq.n	5594 <__aeabi_dmul+0x3a4>
    5580:	200f      	movs	r0, #15
    5582:	4018      	ands	r0, r3
    5584:	2804      	cmp	r0, #4
    5586:	d005      	beq.n	5594 <__aeabi_dmul+0x3a4>
    5588:	1d18      	adds	r0, r3, #4
    558a:	4298      	cmp	r0, r3
    558c:	419b      	sbcs	r3, r3
    558e:	425b      	negs	r3, r3
    5590:	18ed      	adds	r5, r5, r3
    5592:	0003      	movs	r3, r0
    5594:	01e8      	lsls	r0, r5, #7
    5596:	d504      	bpl.n	55a2 <__aeabi_dmul+0x3b2>
    5598:	4a4f      	ldr	r2, [pc, #316]	; (56d8 <__aeabi_dmul+0x4e8>)
    559a:	4015      	ands	r5, r2
    559c:	2280      	movs	r2, #128	; 0x80
    559e:	00d2      	lsls	r2, r2, #3
    55a0:	18b2      	adds	r2, r6, r2
    55a2:	484e      	ldr	r0, [pc, #312]	; (56dc <__aeabi_dmul+0x4ec>)
    55a4:	4282      	cmp	r2, r0
    55a6:	dd00      	ble.n	55aa <__aeabi_dmul+0x3ba>
    55a8:	e6e7      	b.n	537a <__aeabi_dmul+0x18a>
    55aa:	2401      	movs	r4, #1
    55ac:	08db      	lsrs	r3, r3, #3
    55ae:	0768      	lsls	r0, r5, #29
    55b0:	4318      	orrs	r0, r3
    55b2:	026d      	lsls	r5, r5, #9
    55b4:	0553      	lsls	r3, r2, #21
    55b6:	4680      	mov	r8, r0
    55b8:	0b2d      	lsrs	r5, r5, #12
    55ba:	0d5b      	lsrs	r3, r3, #21
    55bc:	400c      	ands	r4, r1
    55be:	e67d      	b.n	52bc <__aeabi_dmul+0xcc>
    55c0:	2280      	movs	r2, #128	; 0x80
    55c2:	4659      	mov	r1, fp
    55c4:	0312      	lsls	r2, r2, #12
    55c6:	4211      	tst	r1, r2
    55c8:	d008      	beq.n	55dc <__aeabi_dmul+0x3ec>
    55ca:	4215      	tst	r5, r2
    55cc:	d106      	bne.n	55dc <__aeabi_dmul+0x3ec>
    55ce:	4315      	orrs	r5, r2
    55d0:	032d      	lsls	r5, r5, #12
    55d2:	4698      	mov	r8, r3
    55d4:	0b2d      	lsrs	r5, r5, #12
    55d6:	464c      	mov	r4, r9
    55d8:	4b41      	ldr	r3, [pc, #260]	; (56e0 <__aeabi_dmul+0x4f0>)
    55da:	e66f      	b.n	52bc <__aeabi_dmul+0xcc>
    55dc:	465d      	mov	r5, fp
    55de:	4315      	orrs	r5, r2
    55e0:	032d      	lsls	r5, r5, #12
    55e2:	0b2d      	lsrs	r5, r5, #12
    55e4:	4b3e      	ldr	r3, [pc, #248]	; (56e0 <__aeabi_dmul+0x4f0>)
    55e6:	e669      	b.n	52bc <__aeabi_dmul+0xcc>
    55e8:	0003      	movs	r3, r0
    55ea:	4655      	mov	r5, sl
    55ec:	3b28      	subs	r3, #40	; 0x28
    55ee:	409d      	lsls	r5, r3
    55f0:	2300      	movs	r3, #0
    55f2:	e6bc      	b.n	536e <__aeabi_dmul+0x17e>
    55f4:	4650      	mov	r0, sl
    55f6:	f000 fe05 	bl	6204 <__clzsi2>
    55fa:	3020      	adds	r0, #32
    55fc:	e6a8      	b.n	5350 <__aeabi_dmul+0x160>
    55fe:	0003      	movs	r3, r0
    5600:	3b28      	subs	r3, #40	; 0x28
    5602:	409f      	lsls	r7, r3
    5604:	2300      	movs	r3, #0
    5606:	46bb      	mov	fp, r7
    5608:	4698      	mov	r8, r3
    560a:	e689      	b.n	5320 <__aeabi_dmul+0x130>
    560c:	f000 fdfa 	bl	6204 <__clzsi2>
    5610:	3020      	adds	r0, #32
    5612:	e673      	b.n	52fc <__aeabi_dmul+0x10c>
    5614:	2401      	movs	r4, #1
    5616:	1aa6      	subs	r6, r4, r2
    5618:	2e38      	cmp	r6, #56	; 0x38
    561a:	dd07      	ble.n	562c <__aeabi_dmul+0x43c>
    561c:	2200      	movs	r2, #0
    561e:	400c      	ands	r4, r1
    5620:	2300      	movs	r3, #0
    5622:	2500      	movs	r5, #0
    5624:	4690      	mov	r8, r2
    5626:	e649      	b.n	52bc <__aeabi_dmul+0xcc>
    5628:	9e02      	ldr	r6, [sp, #8]
    562a:	e7a3      	b.n	5574 <__aeabi_dmul+0x384>
    562c:	2e1f      	cmp	r6, #31
    562e:	dc20      	bgt.n	5672 <__aeabi_dmul+0x482>
    5630:	2220      	movs	r2, #32
    5632:	002c      	movs	r4, r5
    5634:	0018      	movs	r0, r3
    5636:	1b92      	subs	r2, r2, r6
    5638:	40f0      	lsrs	r0, r6
    563a:	4094      	lsls	r4, r2
    563c:	4093      	lsls	r3, r2
    563e:	4304      	orrs	r4, r0
    5640:	1e58      	subs	r0, r3, #1
    5642:	4183      	sbcs	r3, r0
    5644:	431c      	orrs	r4, r3
    5646:	40f5      	lsrs	r5, r6
    5648:	0763      	lsls	r3, r4, #29
    564a:	d009      	beq.n	5660 <__aeabi_dmul+0x470>
    564c:	230f      	movs	r3, #15
    564e:	4023      	ands	r3, r4
    5650:	2b04      	cmp	r3, #4
    5652:	d005      	beq.n	5660 <__aeabi_dmul+0x470>
    5654:	0023      	movs	r3, r4
    5656:	1d1c      	adds	r4, r3, #4
    5658:	429c      	cmp	r4, r3
    565a:	4192      	sbcs	r2, r2
    565c:	4252      	negs	r2, r2
    565e:	18ad      	adds	r5, r5, r2
    5660:	022b      	lsls	r3, r5, #8
    5662:	d51f      	bpl.n	56a4 <__aeabi_dmul+0x4b4>
    5664:	2401      	movs	r4, #1
    5666:	2200      	movs	r2, #0
    5668:	400c      	ands	r4, r1
    566a:	2301      	movs	r3, #1
    566c:	2500      	movs	r5, #0
    566e:	4690      	mov	r8, r2
    5670:	e624      	b.n	52bc <__aeabi_dmul+0xcc>
    5672:	201f      	movs	r0, #31
    5674:	002c      	movs	r4, r5
    5676:	4240      	negs	r0, r0
    5678:	1a82      	subs	r2, r0, r2
    567a:	40d4      	lsrs	r4, r2
    567c:	2e20      	cmp	r6, #32
    567e:	d01c      	beq.n	56ba <__aeabi_dmul+0x4ca>
    5680:	2240      	movs	r2, #64	; 0x40
    5682:	1b96      	subs	r6, r2, r6
    5684:	40b5      	lsls	r5, r6
    5686:	432b      	orrs	r3, r5
    5688:	1e58      	subs	r0, r3, #1
    568a:	4183      	sbcs	r3, r0
    568c:	2007      	movs	r0, #7
    568e:	4323      	orrs	r3, r4
    5690:	4018      	ands	r0, r3
    5692:	2500      	movs	r5, #0
    5694:	2800      	cmp	r0, #0
    5696:	d009      	beq.n	56ac <__aeabi_dmul+0x4bc>
    5698:	220f      	movs	r2, #15
    569a:	2500      	movs	r5, #0
    569c:	401a      	ands	r2, r3
    569e:	001c      	movs	r4, r3
    56a0:	2a04      	cmp	r2, #4
    56a2:	d1d8      	bne.n	5656 <__aeabi_dmul+0x466>
    56a4:	0023      	movs	r3, r4
    56a6:	0768      	lsls	r0, r5, #29
    56a8:	026d      	lsls	r5, r5, #9
    56aa:	0b2d      	lsrs	r5, r5, #12
    56ac:	2401      	movs	r4, #1
    56ae:	08db      	lsrs	r3, r3, #3
    56b0:	4303      	orrs	r3, r0
    56b2:	4698      	mov	r8, r3
    56b4:	400c      	ands	r4, r1
    56b6:	2300      	movs	r3, #0
    56b8:	e600      	b.n	52bc <__aeabi_dmul+0xcc>
    56ba:	2500      	movs	r5, #0
    56bc:	e7e3      	b.n	5686 <__aeabi_dmul+0x496>
    56be:	2280      	movs	r2, #128	; 0x80
    56c0:	2401      	movs	r4, #1
    56c2:	0312      	lsls	r2, r2, #12
    56c4:	4315      	orrs	r5, r2
    56c6:	032d      	lsls	r5, r5, #12
    56c8:	4698      	mov	r8, r3
    56ca:	0b2d      	lsrs	r5, r5, #12
    56cc:	400c      	ands	r4, r1
    56ce:	4b04      	ldr	r3, [pc, #16]	; (56e0 <__aeabi_dmul+0x4f0>)
    56d0:	e5f4      	b.n	52bc <__aeabi_dmul+0xcc>
    56d2:	46c0      	nop			; (mov r8, r8)
    56d4:	000003ff 	.word	0x000003ff
    56d8:	feffffff 	.word	0xfeffffff
    56dc:	000007fe 	.word	0x000007fe
    56e0:	000007ff 	.word	0x000007ff

000056e4 <__aeabi_dsub>:
    56e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56e6:	4657      	mov	r7, sl
    56e8:	464e      	mov	r6, r9
    56ea:	4645      	mov	r5, r8
    56ec:	b4e0      	push	{r5, r6, r7}
    56ee:	000e      	movs	r6, r1
    56f0:	0011      	movs	r1, r2
    56f2:	0ff2      	lsrs	r2, r6, #31
    56f4:	4692      	mov	sl, r2
    56f6:	00c5      	lsls	r5, r0, #3
    56f8:	0f42      	lsrs	r2, r0, #29
    56fa:	0318      	lsls	r0, r3, #12
    56fc:	0337      	lsls	r7, r6, #12
    56fe:	0074      	lsls	r4, r6, #1
    5700:	0a40      	lsrs	r0, r0, #9
    5702:	0f4e      	lsrs	r6, r1, #29
    5704:	0a7f      	lsrs	r7, r7, #9
    5706:	4330      	orrs	r0, r6
    5708:	4ecf      	ldr	r6, [pc, #828]	; (5a48 <__aeabi_dsub+0x364>)
    570a:	4317      	orrs	r7, r2
    570c:	005a      	lsls	r2, r3, #1
    570e:	0d64      	lsrs	r4, r4, #21
    5710:	0d52      	lsrs	r2, r2, #21
    5712:	0fdb      	lsrs	r3, r3, #31
    5714:	00c9      	lsls	r1, r1, #3
    5716:	42b2      	cmp	r2, r6
    5718:	d100      	bne.n	571c <__aeabi_dsub+0x38>
    571a:	e0e5      	b.n	58e8 <__aeabi_dsub+0x204>
    571c:	2601      	movs	r6, #1
    571e:	4073      	eors	r3, r6
    5720:	1aa6      	subs	r6, r4, r2
    5722:	46b4      	mov	ip, r6
    5724:	4553      	cmp	r3, sl
    5726:	d100      	bne.n	572a <__aeabi_dsub+0x46>
    5728:	e0af      	b.n	588a <__aeabi_dsub+0x1a6>
    572a:	2e00      	cmp	r6, #0
    572c:	dc00      	bgt.n	5730 <__aeabi_dsub+0x4c>
    572e:	e10d      	b.n	594c <__aeabi_dsub+0x268>
    5730:	2a00      	cmp	r2, #0
    5732:	d13a      	bne.n	57aa <__aeabi_dsub+0xc6>
    5734:	0003      	movs	r3, r0
    5736:	430b      	orrs	r3, r1
    5738:	d000      	beq.n	573c <__aeabi_dsub+0x58>
    573a:	e0e4      	b.n	5906 <__aeabi_dsub+0x222>
    573c:	076b      	lsls	r3, r5, #29
    573e:	d009      	beq.n	5754 <__aeabi_dsub+0x70>
    5740:	230f      	movs	r3, #15
    5742:	402b      	ands	r3, r5
    5744:	2b04      	cmp	r3, #4
    5746:	d005      	beq.n	5754 <__aeabi_dsub+0x70>
    5748:	1d2b      	adds	r3, r5, #4
    574a:	42ab      	cmp	r3, r5
    574c:	41ad      	sbcs	r5, r5
    574e:	426d      	negs	r5, r5
    5750:	197f      	adds	r7, r7, r5
    5752:	001d      	movs	r5, r3
    5754:	023b      	lsls	r3, r7, #8
    5756:	d400      	bmi.n	575a <__aeabi_dsub+0x76>
    5758:	e088      	b.n	586c <__aeabi_dsub+0x188>
    575a:	4bbb      	ldr	r3, [pc, #748]	; (5a48 <__aeabi_dsub+0x364>)
    575c:	3401      	adds	r4, #1
    575e:	429c      	cmp	r4, r3
    5760:	d100      	bne.n	5764 <__aeabi_dsub+0x80>
    5762:	e110      	b.n	5986 <__aeabi_dsub+0x2a2>
    5764:	003a      	movs	r2, r7
    5766:	4bb9      	ldr	r3, [pc, #740]	; (5a4c <__aeabi_dsub+0x368>)
    5768:	4651      	mov	r1, sl
    576a:	401a      	ands	r2, r3
    576c:	2301      	movs	r3, #1
    576e:	0750      	lsls	r0, r2, #29
    5770:	08ed      	lsrs	r5, r5, #3
    5772:	0252      	lsls	r2, r2, #9
    5774:	0564      	lsls	r4, r4, #21
    5776:	4305      	orrs	r5, r0
    5778:	0b12      	lsrs	r2, r2, #12
    577a:	0d64      	lsrs	r4, r4, #21
    577c:	400b      	ands	r3, r1
    577e:	2100      	movs	r1, #0
    5780:	0028      	movs	r0, r5
    5782:	0312      	lsls	r2, r2, #12
    5784:	0d0d      	lsrs	r5, r1, #20
    5786:	0b12      	lsrs	r2, r2, #12
    5788:	0564      	lsls	r4, r4, #21
    578a:	052d      	lsls	r5, r5, #20
    578c:	4315      	orrs	r5, r2
    578e:	0862      	lsrs	r2, r4, #1
    5790:	4caf      	ldr	r4, [pc, #700]	; (5a50 <__aeabi_dsub+0x36c>)
    5792:	07db      	lsls	r3, r3, #31
    5794:	402c      	ands	r4, r5
    5796:	4314      	orrs	r4, r2
    5798:	0064      	lsls	r4, r4, #1
    579a:	0864      	lsrs	r4, r4, #1
    579c:	431c      	orrs	r4, r3
    579e:	0021      	movs	r1, r4
    57a0:	bc1c      	pop	{r2, r3, r4}
    57a2:	4690      	mov	r8, r2
    57a4:	4699      	mov	r9, r3
    57a6:	46a2      	mov	sl, r4
    57a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57aa:	4ba7      	ldr	r3, [pc, #668]	; (5a48 <__aeabi_dsub+0x364>)
    57ac:	429c      	cmp	r4, r3
    57ae:	d0c5      	beq.n	573c <__aeabi_dsub+0x58>
    57b0:	2380      	movs	r3, #128	; 0x80
    57b2:	041b      	lsls	r3, r3, #16
    57b4:	4318      	orrs	r0, r3
    57b6:	4663      	mov	r3, ip
    57b8:	2b38      	cmp	r3, #56	; 0x38
    57ba:	dd00      	ble.n	57be <__aeabi_dsub+0xda>
    57bc:	e0fd      	b.n	59ba <__aeabi_dsub+0x2d6>
    57be:	2b1f      	cmp	r3, #31
    57c0:	dd00      	ble.n	57c4 <__aeabi_dsub+0xe0>
    57c2:	e130      	b.n	5a26 <__aeabi_dsub+0x342>
    57c4:	4662      	mov	r2, ip
    57c6:	2320      	movs	r3, #32
    57c8:	1a9b      	subs	r3, r3, r2
    57ca:	0002      	movs	r2, r0
    57cc:	409a      	lsls	r2, r3
    57ce:	4666      	mov	r6, ip
    57d0:	4690      	mov	r8, r2
    57d2:	000a      	movs	r2, r1
    57d4:	4099      	lsls	r1, r3
    57d6:	40f2      	lsrs	r2, r6
    57d8:	4646      	mov	r6, r8
    57da:	1e4b      	subs	r3, r1, #1
    57dc:	4199      	sbcs	r1, r3
    57de:	4332      	orrs	r2, r6
    57e0:	4311      	orrs	r1, r2
    57e2:	4663      	mov	r3, ip
    57e4:	0002      	movs	r2, r0
    57e6:	40da      	lsrs	r2, r3
    57e8:	1a69      	subs	r1, r5, r1
    57ea:	428d      	cmp	r5, r1
    57ec:	419b      	sbcs	r3, r3
    57ee:	000d      	movs	r5, r1
    57f0:	1aba      	subs	r2, r7, r2
    57f2:	425b      	negs	r3, r3
    57f4:	1ad7      	subs	r7, r2, r3
    57f6:	023b      	lsls	r3, r7, #8
    57f8:	d535      	bpl.n	5866 <__aeabi_dsub+0x182>
    57fa:	027a      	lsls	r2, r7, #9
    57fc:	0a53      	lsrs	r3, r2, #9
    57fe:	4698      	mov	r8, r3
    5800:	4643      	mov	r3, r8
    5802:	2b00      	cmp	r3, #0
    5804:	d100      	bne.n	5808 <__aeabi_dsub+0x124>
    5806:	e0c4      	b.n	5992 <__aeabi_dsub+0x2ae>
    5808:	4640      	mov	r0, r8
    580a:	f000 fcfb 	bl	6204 <__clzsi2>
    580e:	0003      	movs	r3, r0
    5810:	3b08      	subs	r3, #8
    5812:	2b1f      	cmp	r3, #31
    5814:	dd00      	ble.n	5818 <__aeabi_dsub+0x134>
    5816:	e0c5      	b.n	59a4 <__aeabi_dsub+0x2c0>
    5818:	2220      	movs	r2, #32
    581a:	0029      	movs	r1, r5
    581c:	1ad2      	subs	r2, r2, r3
    581e:	4647      	mov	r7, r8
    5820:	40d1      	lsrs	r1, r2
    5822:	409f      	lsls	r7, r3
    5824:	000a      	movs	r2, r1
    5826:	409d      	lsls	r5, r3
    5828:	433a      	orrs	r2, r7
    582a:	429c      	cmp	r4, r3
    582c:	dd00      	ble.n	5830 <__aeabi_dsub+0x14c>
    582e:	e0c0      	b.n	59b2 <__aeabi_dsub+0x2ce>
    5830:	1b1c      	subs	r4, r3, r4
    5832:	1c63      	adds	r3, r4, #1
    5834:	2b1f      	cmp	r3, #31
    5836:	dd00      	ble.n	583a <__aeabi_dsub+0x156>
    5838:	e0e4      	b.n	5a04 <__aeabi_dsub+0x320>
    583a:	2120      	movs	r1, #32
    583c:	0014      	movs	r4, r2
    583e:	0028      	movs	r0, r5
    5840:	1ac9      	subs	r1, r1, r3
    5842:	40d8      	lsrs	r0, r3
    5844:	408c      	lsls	r4, r1
    5846:	408d      	lsls	r5, r1
    5848:	4304      	orrs	r4, r0
    584a:	40da      	lsrs	r2, r3
    584c:	1e68      	subs	r0, r5, #1
    584e:	4185      	sbcs	r5, r0
    5850:	0017      	movs	r7, r2
    5852:	4325      	orrs	r5, r4
    5854:	2400      	movs	r4, #0
    5856:	e771      	b.n	573c <__aeabi_dsub+0x58>
    5858:	4642      	mov	r2, r8
    585a:	4663      	mov	r3, ip
    585c:	431a      	orrs	r2, r3
    585e:	d100      	bne.n	5862 <__aeabi_dsub+0x17e>
    5860:	e24c      	b.n	5cfc <__aeabi_dsub+0x618>
    5862:	4667      	mov	r7, ip
    5864:	4645      	mov	r5, r8
    5866:	076b      	lsls	r3, r5, #29
    5868:	d000      	beq.n	586c <__aeabi_dsub+0x188>
    586a:	e769      	b.n	5740 <__aeabi_dsub+0x5c>
    586c:	2301      	movs	r3, #1
    586e:	4651      	mov	r1, sl
    5870:	0778      	lsls	r0, r7, #29
    5872:	08ed      	lsrs	r5, r5, #3
    5874:	08fa      	lsrs	r2, r7, #3
    5876:	400b      	ands	r3, r1
    5878:	4305      	orrs	r5, r0
    587a:	4973      	ldr	r1, [pc, #460]	; (5a48 <__aeabi_dsub+0x364>)
    587c:	428c      	cmp	r4, r1
    587e:	d038      	beq.n	58f2 <__aeabi_dsub+0x20e>
    5880:	0312      	lsls	r2, r2, #12
    5882:	0564      	lsls	r4, r4, #21
    5884:	0b12      	lsrs	r2, r2, #12
    5886:	0d64      	lsrs	r4, r4, #21
    5888:	e779      	b.n	577e <__aeabi_dsub+0x9a>
    588a:	2e00      	cmp	r6, #0
    588c:	dc00      	bgt.n	5890 <__aeabi_dsub+0x1ac>
    588e:	e09a      	b.n	59c6 <__aeabi_dsub+0x2e2>
    5890:	2a00      	cmp	r2, #0
    5892:	d047      	beq.n	5924 <__aeabi_dsub+0x240>
    5894:	4a6c      	ldr	r2, [pc, #432]	; (5a48 <__aeabi_dsub+0x364>)
    5896:	4294      	cmp	r4, r2
    5898:	d100      	bne.n	589c <__aeabi_dsub+0x1b8>
    589a:	e74f      	b.n	573c <__aeabi_dsub+0x58>
    589c:	2280      	movs	r2, #128	; 0x80
    589e:	0412      	lsls	r2, r2, #16
    58a0:	4310      	orrs	r0, r2
    58a2:	4662      	mov	r2, ip
    58a4:	2a38      	cmp	r2, #56	; 0x38
    58a6:	dc00      	bgt.n	58aa <__aeabi_dsub+0x1c6>
    58a8:	e108      	b.n	5abc <__aeabi_dsub+0x3d8>
    58aa:	4301      	orrs	r1, r0
    58ac:	1e48      	subs	r0, r1, #1
    58ae:	4181      	sbcs	r1, r0
    58b0:	2200      	movs	r2, #0
    58b2:	b2c9      	uxtb	r1, r1
    58b4:	1949      	adds	r1, r1, r5
    58b6:	19d2      	adds	r2, r2, r7
    58b8:	42a9      	cmp	r1, r5
    58ba:	41bf      	sbcs	r7, r7
    58bc:	000d      	movs	r5, r1
    58be:	427f      	negs	r7, r7
    58c0:	18bf      	adds	r7, r7, r2
    58c2:	023a      	lsls	r2, r7, #8
    58c4:	d400      	bmi.n	58c8 <__aeabi_dsub+0x1e4>
    58c6:	e142      	b.n	5b4e <__aeabi_dsub+0x46a>
    58c8:	4a5f      	ldr	r2, [pc, #380]	; (5a48 <__aeabi_dsub+0x364>)
    58ca:	3401      	adds	r4, #1
    58cc:	4294      	cmp	r4, r2
    58ce:	d100      	bne.n	58d2 <__aeabi_dsub+0x1ee>
    58d0:	e14e      	b.n	5b70 <__aeabi_dsub+0x48c>
    58d2:	2001      	movs	r0, #1
    58d4:	4a5d      	ldr	r2, [pc, #372]	; (5a4c <__aeabi_dsub+0x368>)
    58d6:	0869      	lsrs	r1, r5, #1
    58d8:	403a      	ands	r2, r7
    58da:	4028      	ands	r0, r5
    58dc:	4308      	orrs	r0, r1
    58de:	07d5      	lsls	r5, r2, #31
    58e0:	4305      	orrs	r5, r0
    58e2:	0857      	lsrs	r7, r2, #1
    58e4:	469a      	mov	sl, r3
    58e6:	e729      	b.n	573c <__aeabi_dsub+0x58>
    58e8:	0006      	movs	r6, r0
    58ea:	430e      	orrs	r6, r1
    58ec:	d000      	beq.n	58f0 <__aeabi_dsub+0x20c>
    58ee:	e717      	b.n	5720 <__aeabi_dsub+0x3c>
    58f0:	e714      	b.n	571c <__aeabi_dsub+0x38>
    58f2:	0029      	movs	r1, r5
    58f4:	4311      	orrs	r1, r2
    58f6:	d100      	bne.n	58fa <__aeabi_dsub+0x216>
    58f8:	e1f9      	b.n	5cee <__aeabi_dsub+0x60a>
    58fa:	2180      	movs	r1, #128	; 0x80
    58fc:	0309      	lsls	r1, r1, #12
    58fe:	430a      	orrs	r2, r1
    5900:	0312      	lsls	r2, r2, #12
    5902:	0b12      	lsrs	r2, r2, #12
    5904:	e73b      	b.n	577e <__aeabi_dsub+0x9a>
    5906:	2301      	movs	r3, #1
    5908:	425b      	negs	r3, r3
    590a:	4698      	mov	r8, r3
    590c:	44c4      	add	ip, r8
    590e:	4663      	mov	r3, ip
    5910:	2b00      	cmp	r3, #0
    5912:	d172      	bne.n	59fa <__aeabi_dsub+0x316>
    5914:	1a69      	subs	r1, r5, r1
    5916:	428d      	cmp	r5, r1
    5918:	419b      	sbcs	r3, r3
    591a:	1a3f      	subs	r7, r7, r0
    591c:	425b      	negs	r3, r3
    591e:	1aff      	subs	r7, r7, r3
    5920:	000d      	movs	r5, r1
    5922:	e768      	b.n	57f6 <__aeabi_dsub+0x112>
    5924:	0002      	movs	r2, r0
    5926:	430a      	orrs	r2, r1
    5928:	d100      	bne.n	592c <__aeabi_dsub+0x248>
    592a:	e707      	b.n	573c <__aeabi_dsub+0x58>
    592c:	2201      	movs	r2, #1
    592e:	4252      	negs	r2, r2
    5930:	4690      	mov	r8, r2
    5932:	44c4      	add	ip, r8
    5934:	4662      	mov	r2, ip
    5936:	2a00      	cmp	r2, #0
    5938:	d000      	beq.n	593c <__aeabi_dsub+0x258>
    593a:	e0e6      	b.n	5b0a <__aeabi_dsub+0x426>
    593c:	1869      	adds	r1, r5, r1
    593e:	42a9      	cmp	r1, r5
    5940:	41b6      	sbcs	r6, r6
    5942:	183f      	adds	r7, r7, r0
    5944:	4276      	negs	r6, r6
    5946:	19f7      	adds	r7, r6, r7
    5948:	000d      	movs	r5, r1
    594a:	e7ba      	b.n	58c2 <__aeabi_dsub+0x1de>
    594c:	2e00      	cmp	r6, #0
    594e:	d000      	beq.n	5952 <__aeabi_dsub+0x26e>
    5950:	e080      	b.n	5a54 <__aeabi_dsub+0x370>
    5952:	1c62      	adds	r2, r4, #1
    5954:	0552      	lsls	r2, r2, #21
    5956:	0d52      	lsrs	r2, r2, #21
    5958:	2a01      	cmp	r2, #1
    595a:	dc00      	bgt.n	595e <__aeabi_dsub+0x27a>
    595c:	e0f9      	b.n	5b52 <__aeabi_dsub+0x46e>
    595e:	1a6a      	subs	r2, r5, r1
    5960:	4691      	mov	r9, r2
    5962:	454d      	cmp	r5, r9
    5964:	41b6      	sbcs	r6, r6
    5966:	1a3a      	subs	r2, r7, r0
    5968:	4276      	negs	r6, r6
    596a:	1b92      	subs	r2, r2, r6
    596c:	4690      	mov	r8, r2
    596e:	0212      	lsls	r2, r2, #8
    5970:	d400      	bmi.n	5974 <__aeabi_dsub+0x290>
    5972:	e099      	b.n	5aa8 <__aeabi_dsub+0x3c4>
    5974:	1b4d      	subs	r5, r1, r5
    5976:	42a9      	cmp	r1, r5
    5978:	4189      	sbcs	r1, r1
    597a:	1bc7      	subs	r7, r0, r7
    597c:	4249      	negs	r1, r1
    597e:	1a7a      	subs	r2, r7, r1
    5980:	4690      	mov	r8, r2
    5982:	469a      	mov	sl, r3
    5984:	e73c      	b.n	5800 <__aeabi_dsub+0x11c>
    5986:	4652      	mov	r2, sl
    5988:	2301      	movs	r3, #1
    598a:	2500      	movs	r5, #0
    598c:	4013      	ands	r3, r2
    598e:	2200      	movs	r2, #0
    5990:	e6f5      	b.n	577e <__aeabi_dsub+0x9a>
    5992:	0028      	movs	r0, r5
    5994:	f000 fc36 	bl	6204 <__clzsi2>
    5998:	3020      	adds	r0, #32
    599a:	0003      	movs	r3, r0
    599c:	3b08      	subs	r3, #8
    599e:	2b1f      	cmp	r3, #31
    59a0:	dc00      	bgt.n	59a4 <__aeabi_dsub+0x2c0>
    59a2:	e739      	b.n	5818 <__aeabi_dsub+0x134>
    59a4:	002a      	movs	r2, r5
    59a6:	3828      	subs	r0, #40	; 0x28
    59a8:	4082      	lsls	r2, r0
    59aa:	2500      	movs	r5, #0
    59ac:	429c      	cmp	r4, r3
    59ae:	dc00      	bgt.n	59b2 <__aeabi_dsub+0x2ce>
    59b0:	e73e      	b.n	5830 <__aeabi_dsub+0x14c>
    59b2:	4f26      	ldr	r7, [pc, #152]	; (5a4c <__aeabi_dsub+0x368>)
    59b4:	1ae4      	subs	r4, r4, r3
    59b6:	4017      	ands	r7, r2
    59b8:	e6c0      	b.n	573c <__aeabi_dsub+0x58>
    59ba:	4301      	orrs	r1, r0
    59bc:	1e48      	subs	r0, r1, #1
    59be:	4181      	sbcs	r1, r0
    59c0:	2200      	movs	r2, #0
    59c2:	b2c9      	uxtb	r1, r1
    59c4:	e710      	b.n	57e8 <__aeabi_dsub+0x104>
    59c6:	2e00      	cmp	r6, #0
    59c8:	d000      	beq.n	59cc <__aeabi_dsub+0x2e8>
    59ca:	e0f1      	b.n	5bb0 <__aeabi_dsub+0x4cc>
    59cc:	1c62      	adds	r2, r4, #1
    59ce:	4694      	mov	ip, r2
    59d0:	0552      	lsls	r2, r2, #21
    59d2:	0d52      	lsrs	r2, r2, #21
    59d4:	2a01      	cmp	r2, #1
    59d6:	dc00      	bgt.n	59da <__aeabi_dsub+0x2f6>
    59d8:	e0a0      	b.n	5b1c <__aeabi_dsub+0x438>
    59da:	4a1b      	ldr	r2, [pc, #108]	; (5a48 <__aeabi_dsub+0x364>)
    59dc:	4594      	cmp	ip, r2
    59de:	d100      	bne.n	59e2 <__aeabi_dsub+0x2fe>
    59e0:	e0c5      	b.n	5b6e <__aeabi_dsub+0x48a>
    59e2:	1869      	adds	r1, r5, r1
    59e4:	42a9      	cmp	r1, r5
    59e6:	4192      	sbcs	r2, r2
    59e8:	183f      	adds	r7, r7, r0
    59ea:	4252      	negs	r2, r2
    59ec:	19d2      	adds	r2, r2, r7
    59ee:	0849      	lsrs	r1, r1, #1
    59f0:	07d5      	lsls	r5, r2, #31
    59f2:	430d      	orrs	r5, r1
    59f4:	0857      	lsrs	r7, r2, #1
    59f6:	4664      	mov	r4, ip
    59f8:	e6a0      	b.n	573c <__aeabi_dsub+0x58>
    59fa:	4b13      	ldr	r3, [pc, #76]	; (5a48 <__aeabi_dsub+0x364>)
    59fc:	429c      	cmp	r4, r3
    59fe:	d000      	beq.n	5a02 <__aeabi_dsub+0x31e>
    5a00:	e6d9      	b.n	57b6 <__aeabi_dsub+0xd2>
    5a02:	e69b      	b.n	573c <__aeabi_dsub+0x58>
    5a04:	0011      	movs	r1, r2
    5a06:	3c1f      	subs	r4, #31
    5a08:	40e1      	lsrs	r1, r4
    5a0a:	000c      	movs	r4, r1
    5a0c:	2b20      	cmp	r3, #32
    5a0e:	d100      	bne.n	5a12 <__aeabi_dsub+0x32e>
    5a10:	e080      	b.n	5b14 <__aeabi_dsub+0x430>
    5a12:	2140      	movs	r1, #64	; 0x40
    5a14:	1acb      	subs	r3, r1, r3
    5a16:	409a      	lsls	r2, r3
    5a18:	4315      	orrs	r5, r2
    5a1a:	1e6a      	subs	r2, r5, #1
    5a1c:	4195      	sbcs	r5, r2
    5a1e:	2700      	movs	r7, #0
    5a20:	4325      	orrs	r5, r4
    5a22:	2400      	movs	r4, #0
    5a24:	e71f      	b.n	5866 <__aeabi_dsub+0x182>
    5a26:	4663      	mov	r3, ip
    5a28:	0002      	movs	r2, r0
    5a2a:	3b20      	subs	r3, #32
    5a2c:	40da      	lsrs	r2, r3
    5a2e:	4663      	mov	r3, ip
    5a30:	2b20      	cmp	r3, #32
    5a32:	d071      	beq.n	5b18 <__aeabi_dsub+0x434>
    5a34:	2340      	movs	r3, #64	; 0x40
    5a36:	4666      	mov	r6, ip
    5a38:	1b9b      	subs	r3, r3, r6
    5a3a:	4098      	lsls	r0, r3
    5a3c:	4301      	orrs	r1, r0
    5a3e:	1e48      	subs	r0, r1, #1
    5a40:	4181      	sbcs	r1, r0
    5a42:	4311      	orrs	r1, r2
    5a44:	2200      	movs	r2, #0
    5a46:	e6cf      	b.n	57e8 <__aeabi_dsub+0x104>
    5a48:	000007ff 	.word	0x000007ff
    5a4c:	ff7fffff 	.word	0xff7fffff
    5a50:	800fffff 	.word	0x800fffff
    5a54:	2c00      	cmp	r4, #0
    5a56:	d048      	beq.n	5aea <__aeabi_dsub+0x406>
    5a58:	4cca      	ldr	r4, [pc, #808]	; (5d84 <__aeabi_dsub+0x6a0>)
    5a5a:	42a2      	cmp	r2, r4
    5a5c:	d100      	bne.n	5a60 <__aeabi_dsub+0x37c>
    5a5e:	e0a2      	b.n	5ba6 <__aeabi_dsub+0x4c2>
    5a60:	4274      	negs	r4, r6
    5a62:	46a1      	mov	r9, r4
    5a64:	2480      	movs	r4, #128	; 0x80
    5a66:	0424      	lsls	r4, r4, #16
    5a68:	4327      	orrs	r7, r4
    5a6a:	464c      	mov	r4, r9
    5a6c:	2c38      	cmp	r4, #56	; 0x38
    5a6e:	dd00      	ble.n	5a72 <__aeabi_dsub+0x38e>
    5a70:	e0db      	b.n	5c2a <__aeabi_dsub+0x546>
    5a72:	2c1f      	cmp	r4, #31
    5a74:	dd00      	ble.n	5a78 <__aeabi_dsub+0x394>
    5a76:	e144      	b.n	5d02 <__aeabi_dsub+0x61e>
    5a78:	464e      	mov	r6, r9
    5a7a:	2420      	movs	r4, #32
    5a7c:	1ba4      	subs	r4, r4, r6
    5a7e:	003e      	movs	r6, r7
    5a80:	40a6      	lsls	r6, r4
    5a82:	46a2      	mov	sl, r4
    5a84:	46b0      	mov	r8, r6
    5a86:	464c      	mov	r4, r9
    5a88:	002e      	movs	r6, r5
    5a8a:	40e6      	lsrs	r6, r4
    5a8c:	46b4      	mov	ip, r6
    5a8e:	4646      	mov	r6, r8
    5a90:	4664      	mov	r4, ip
    5a92:	4326      	orrs	r6, r4
    5a94:	4654      	mov	r4, sl
    5a96:	40a5      	lsls	r5, r4
    5a98:	1e6c      	subs	r4, r5, #1
    5a9a:	41a5      	sbcs	r5, r4
    5a9c:	0034      	movs	r4, r6
    5a9e:	432c      	orrs	r4, r5
    5aa0:	464d      	mov	r5, r9
    5aa2:	40ef      	lsrs	r7, r5
    5aa4:	1b0d      	subs	r5, r1, r4
    5aa6:	e028      	b.n	5afa <__aeabi_dsub+0x416>
    5aa8:	464a      	mov	r2, r9
    5aaa:	4643      	mov	r3, r8
    5aac:	464d      	mov	r5, r9
    5aae:	431a      	orrs	r2, r3
    5ab0:	d000      	beq.n	5ab4 <__aeabi_dsub+0x3d0>
    5ab2:	e6a5      	b.n	5800 <__aeabi_dsub+0x11c>
    5ab4:	2300      	movs	r3, #0
    5ab6:	2400      	movs	r4, #0
    5ab8:	2500      	movs	r5, #0
    5aba:	e6de      	b.n	587a <__aeabi_dsub+0x196>
    5abc:	2a1f      	cmp	r2, #31
    5abe:	dc5a      	bgt.n	5b76 <__aeabi_dsub+0x492>
    5ac0:	4666      	mov	r6, ip
    5ac2:	2220      	movs	r2, #32
    5ac4:	1b92      	subs	r2, r2, r6
    5ac6:	0006      	movs	r6, r0
    5ac8:	4096      	lsls	r6, r2
    5aca:	4691      	mov	r9, r2
    5acc:	46b0      	mov	r8, r6
    5ace:	4662      	mov	r2, ip
    5ad0:	000e      	movs	r6, r1
    5ad2:	40d6      	lsrs	r6, r2
    5ad4:	4642      	mov	r2, r8
    5ad6:	4316      	orrs	r6, r2
    5ad8:	464a      	mov	r2, r9
    5ada:	4091      	lsls	r1, r2
    5adc:	1e4a      	subs	r2, r1, #1
    5ade:	4191      	sbcs	r1, r2
    5ae0:	0002      	movs	r2, r0
    5ae2:	4660      	mov	r0, ip
    5ae4:	4331      	orrs	r1, r6
    5ae6:	40c2      	lsrs	r2, r0
    5ae8:	e6e4      	b.n	58b4 <__aeabi_dsub+0x1d0>
    5aea:	003c      	movs	r4, r7
    5aec:	432c      	orrs	r4, r5
    5aee:	d05a      	beq.n	5ba6 <__aeabi_dsub+0x4c2>
    5af0:	43f4      	mvns	r4, r6
    5af2:	46a1      	mov	r9, r4
    5af4:	2c00      	cmp	r4, #0
    5af6:	d152      	bne.n	5b9e <__aeabi_dsub+0x4ba>
    5af8:	1b4d      	subs	r5, r1, r5
    5afa:	42a9      	cmp	r1, r5
    5afc:	4189      	sbcs	r1, r1
    5afe:	1bc7      	subs	r7, r0, r7
    5b00:	4249      	negs	r1, r1
    5b02:	1a7f      	subs	r7, r7, r1
    5b04:	0014      	movs	r4, r2
    5b06:	469a      	mov	sl, r3
    5b08:	e675      	b.n	57f6 <__aeabi_dsub+0x112>
    5b0a:	4a9e      	ldr	r2, [pc, #632]	; (5d84 <__aeabi_dsub+0x6a0>)
    5b0c:	4294      	cmp	r4, r2
    5b0e:	d000      	beq.n	5b12 <__aeabi_dsub+0x42e>
    5b10:	e6c7      	b.n	58a2 <__aeabi_dsub+0x1be>
    5b12:	e613      	b.n	573c <__aeabi_dsub+0x58>
    5b14:	2200      	movs	r2, #0
    5b16:	e77f      	b.n	5a18 <__aeabi_dsub+0x334>
    5b18:	2000      	movs	r0, #0
    5b1a:	e78f      	b.n	5a3c <__aeabi_dsub+0x358>
    5b1c:	2c00      	cmp	r4, #0
    5b1e:	d000      	beq.n	5b22 <__aeabi_dsub+0x43e>
    5b20:	e0c8      	b.n	5cb4 <__aeabi_dsub+0x5d0>
    5b22:	003b      	movs	r3, r7
    5b24:	432b      	orrs	r3, r5
    5b26:	d100      	bne.n	5b2a <__aeabi_dsub+0x446>
    5b28:	e10f      	b.n	5d4a <__aeabi_dsub+0x666>
    5b2a:	0003      	movs	r3, r0
    5b2c:	430b      	orrs	r3, r1
    5b2e:	d100      	bne.n	5b32 <__aeabi_dsub+0x44e>
    5b30:	e604      	b.n	573c <__aeabi_dsub+0x58>
    5b32:	1869      	adds	r1, r5, r1
    5b34:	42a9      	cmp	r1, r5
    5b36:	419b      	sbcs	r3, r3
    5b38:	183f      	adds	r7, r7, r0
    5b3a:	425b      	negs	r3, r3
    5b3c:	19df      	adds	r7, r3, r7
    5b3e:	023b      	lsls	r3, r7, #8
    5b40:	d400      	bmi.n	5b44 <__aeabi_dsub+0x460>
    5b42:	e11a      	b.n	5d7a <__aeabi_dsub+0x696>
    5b44:	4b90      	ldr	r3, [pc, #576]	; (5d88 <__aeabi_dsub+0x6a4>)
    5b46:	000d      	movs	r5, r1
    5b48:	401f      	ands	r7, r3
    5b4a:	4664      	mov	r4, ip
    5b4c:	e5f6      	b.n	573c <__aeabi_dsub+0x58>
    5b4e:	469a      	mov	sl, r3
    5b50:	e689      	b.n	5866 <__aeabi_dsub+0x182>
    5b52:	003a      	movs	r2, r7
    5b54:	432a      	orrs	r2, r5
    5b56:	2c00      	cmp	r4, #0
    5b58:	d15c      	bne.n	5c14 <__aeabi_dsub+0x530>
    5b5a:	2a00      	cmp	r2, #0
    5b5c:	d175      	bne.n	5c4a <__aeabi_dsub+0x566>
    5b5e:	0002      	movs	r2, r0
    5b60:	430a      	orrs	r2, r1
    5b62:	d100      	bne.n	5b66 <__aeabi_dsub+0x482>
    5b64:	e0ca      	b.n	5cfc <__aeabi_dsub+0x618>
    5b66:	0007      	movs	r7, r0
    5b68:	000d      	movs	r5, r1
    5b6a:	469a      	mov	sl, r3
    5b6c:	e5e6      	b.n	573c <__aeabi_dsub+0x58>
    5b6e:	4664      	mov	r4, ip
    5b70:	2200      	movs	r2, #0
    5b72:	2500      	movs	r5, #0
    5b74:	e681      	b.n	587a <__aeabi_dsub+0x196>
    5b76:	4662      	mov	r2, ip
    5b78:	0006      	movs	r6, r0
    5b7a:	3a20      	subs	r2, #32
    5b7c:	40d6      	lsrs	r6, r2
    5b7e:	4662      	mov	r2, ip
    5b80:	46b0      	mov	r8, r6
    5b82:	2a20      	cmp	r2, #32
    5b84:	d100      	bne.n	5b88 <__aeabi_dsub+0x4a4>
    5b86:	e0b7      	b.n	5cf8 <__aeabi_dsub+0x614>
    5b88:	2240      	movs	r2, #64	; 0x40
    5b8a:	4666      	mov	r6, ip
    5b8c:	1b92      	subs	r2, r2, r6
    5b8e:	4090      	lsls	r0, r2
    5b90:	4301      	orrs	r1, r0
    5b92:	4642      	mov	r2, r8
    5b94:	1e48      	subs	r0, r1, #1
    5b96:	4181      	sbcs	r1, r0
    5b98:	4311      	orrs	r1, r2
    5b9a:	2200      	movs	r2, #0
    5b9c:	e68a      	b.n	58b4 <__aeabi_dsub+0x1d0>
    5b9e:	4c79      	ldr	r4, [pc, #484]	; (5d84 <__aeabi_dsub+0x6a0>)
    5ba0:	42a2      	cmp	r2, r4
    5ba2:	d000      	beq.n	5ba6 <__aeabi_dsub+0x4c2>
    5ba4:	e761      	b.n	5a6a <__aeabi_dsub+0x386>
    5ba6:	0007      	movs	r7, r0
    5ba8:	000d      	movs	r5, r1
    5baa:	0014      	movs	r4, r2
    5bac:	469a      	mov	sl, r3
    5bae:	e5c5      	b.n	573c <__aeabi_dsub+0x58>
    5bb0:	2c00      	cmp	r4, #0
    5bb2:	d141      	bne.n	5c38 <__aeabi_dsub+0x554>
    5bb4:	003c      	movs	r4, r7
    5bb6:	432c      	orrs	r4, r5
    5bb8:	d078      	beq.n	5cac <__aeabi_dsub+0x5c8>
    5bba:	43f4      	mvns	r4, r6
    5bbc:	46a1      	mov	r9, r4
    5bbe:	2c00      	cmp	r4, #0
    5bc0:	d020      	beq.n	5c04 <__aeabi_dsub+0x520>
    5bc2:	4c70      	ldr	r4, [pc, #448]	; (5d84 <__aeabi_dsub+0x6a0>)
    5bc4:	42a2      	cmp	r2, r4
    5bc6:	d071      	beq.n	5cac <__aeabi_dsub+0x5c8>
    5bc8:	464c      	mov	r4, r9
    5bca:	2c38      	cmp	r4, #56	; 0x38
    5bcc:	dd00      	ble.n	5bd0 <__aeabi_dsub+0x4ec>
    5bce:	e0b2      	b.n	5d36 <__aeabi_dsub+0x652>
    5bd0:	2c1f      	cmp	r4, #31
    5bd2:	dd00      	ble.n	5bd6 <__aeabi_dsub+0x4f2>
    5bd4:	e0bc      	b.n	5d50 <__aeabi_dsub+0x66c>
    5bd6:	2620      	movs	r6, #32
    5bd8:	1b34      	subs	r4, r6, r4
    5bda:	46a2      	mov	sl, r4
    5bdc:	003c      	movs	r4, r7
    5bde:	4656      	mov	r6, sl
    5be0:	40b4      	lsls	r4, r6
    5be2:	464e      	mov	r6, r9
    5be4:	46a0      	mov	r8, r4
    5be6:	002c      	movs	r4, r5
    5be8:	40f4      	lsrs	r4, r6
    5bea:	46a4      	mov	ip, r4
    5bec:	4644      	mov	r4, r8
    5bee:	4666      	mov	r6, ip
    5bf0:	4334      	orrs	r4, r6
    5bf2:	46a4      	mov	ip, r4
    5bf4:	4654      	mov	r4, sl
    5bf6:	40a5      	lsls	r5, r4
    5bf8:	4664      	mov	r4, ip
    5bfa:	1e6e      	subs	r6, r5, #1
    5bfc:	41b5      	sbcs	r5, r6
    5bfe:	4325      	orrs	r5, r4
    5c00:	464c      	mov	r4, r9
    5c02:	40e7      	lsrs	r7, r4
    5c04:	186d      	adds	r5, r5, r1
    5c06:	428d      	cmp	r5, r1
    5c08:	4189      	sbcs	r1, r1
    5c0a:	183f      	adds	r7, r7, r0
    5c0c:	4249      	negs	r1, r1
    5c0e:	19cf      	adds	r7, r1, r7
    5c10:	0014      	movs	r4, r2
    5c12:	e656      	b.n	58c2 <__aeabi_dsub+0x1de>
    5c14:	2a00      	cmp	r2, #0
    5c16:	d12f      	bne.n	5c78 <__aeabi_dsub+0x594>
    5c18:	0002      	movs	r2, r0
    5c1a:	430a      	orrs	r2, r1
    5c1c:	d100      	bne.n	5c20 <__aeabi_dsub+0x53c>
    5c1e:	e084      	b.n	5d2a <__aeabi_dsub+0x646>
    5c20:	0007      	movs	r7, r0
    5c22:	000d      	movs	r5, r1
    5c24:	469a      	mov	sl, r3
    5c26:	4c57      	ldr	r4, [pc, #348]	; (5d84 <__aeabi_dsub+0x6a0>)
    5c28:	e588      	b.n	573c <__aeabi_dsub+0x58>
    5c2a:	433d      	orrs	r5, r7
    5c2c:	1e6f      	subs	r7, r5, #1
    5c2e:	41bd      	sbcs	r5, r7
    5c30:	b2ec      	uxtb	r4, r5
    5c32:	2700      	movs	r7, #0
    5c34:	1b0d      	subs	r5, r1, r4
    5c36:	e760      	b.n	5afa <__aeabi_dsub+0x416>
    5c38:	4c52      	ldr	r4, [pc, #328]	; (5d84 <__aeabi_dsub+0x6a0>)
    5c3a:	42a2      	cmp	r2, r4
    5c3c:	d036      	beq.n	5cac <__aeabi_dsub+0x5c8>
    5c3e:	4274      	negs	r4, r6
    5c40:	2680      	movs	r6, #128	; 0x80
    5c42:	0436      	lsls	r6, r6, #16
    5c44:	46a1      	mov	r9, r4
    5c46:	4337      	orrs	r7, r6
    5c48:	e7be      	b.n	5bc8 <__aeabi_dsub+0x4e4>
    5c4a:	0002      	movs	r2, r0
    5c4c:	430a      	orrs	r2, r1
    5c4e:	d100      	bne.n	5c52 <__aeabi_dsub+0x56e>
    5c50:	e574      	b.n	573c <__aeabi_dsub+0x58>
    5c52:	1a6a      	subs	r2, r5, r1
    5c54:	4690      	mov	r8, r2
    5c56:	4545      	cmp	r5, r8
    5c58:	41b6      	sbcs	r6, r6
    5c5a:	1a3a      	subs	r2, r7, r0
    5c5c:	4276      	negs	r6, r6
    5c5e:	1b92      	subs	r2, r2, r6
    5c60:	4694      	mov	ip, r2
    5c62:	0212      	lsls	r2, r2, #8
    5c64:	d400      	bmi.n	5c68 <__aeabi_dsub+0x584>
    5c66:	e5f7      	b.n	5858 <__aeabi_dsub+0x174>
    5c68:	1b4d      	subs	r5, r1, r5
    5c6a:	42a9      	cmp	r1, r5
    5c6c:	4189      	sbcs	r1, r1
    5c6e:	1bc7      	subs	r7, r0, r7
    5c70:	4249      	negs	r1, r1
    5c72:	1a7f      	subs	r7, r7, r1
    5c74:	469a      	mov	sl, r3
    5c76:	e561      	b.n	573c <__aeabi_dsub+0x58>
    5c78:	0002      	movs	r2, r0
    5c7a:	430a      	orrs	r2, r1
    5c7c:	d03a      	beq.n	5cf4 <__aeabi_dsub+0x610>
    5c7e:	08ed      	lsrs	r5, r5, #3
    5c80:	077c      	lsls	r4, r7, #29
    5c82:	432c      	orrs	r4, r5
    5c84:	2580      	movs	r5, #128	; 0x80
    5c86:	08fa      	lsrs	r2, r7, #3
    5c88:	032d      	lsls	r5, r5, #12
    5c8a:	422a      	tst	r2, r5
    5c8c:	d008      	beq.n	5ca0 <__aeabi_dsub+0x5bc>
    5c8e:	08c7      	lsrs	r7, r0, #3
    5c90:	422f      	tst	r7, r5
    5c92:	d105      	bne.n	5ca0 <__aeabi_dsub+0x5bc>
    5c94:	0745      	lsls	r5, r0, #29
    5c96:	002c      	movs	r4, r5
    5c98:	003a      	movs	r2, r7
    5c9a:	469a      	mov	sl, r3
    5c9c:	08c9      	lsrs	r1, r1, #3
    5c9e:	430c      	orrs	r4, r1
    5ca0:	0f67      	lsrs	r7, r4, #29
    5ca2:	00d2      	lsls	r2, r2, #3
    5ca4:	00e5      	lsls	r5, r4, #3
    5ca6:	4317      	orrs	r7, r2
    5ca8:	4c36      	ldr	r4, [pc, #216]	; (5d84 <__aeabi_dsub+0x6a0>)
    5caa:	e547      	b.n	573c <__aeabi_dsub+0x58>
    5cac:	0007      	movs	r7, r0
    5cae:	000d      	movs	r5, r1
    5cb0:	0014      	movs	r4, r2
    5cb2:	e543      	b.n	573c <__aeabi_dsub+0x58>
    5cb4:	003a      	movs	r2, r7
    5cb6:	432a      	orrs	r2, r5
    5cb8:	d043      	beq.n	5d42 <__aeabi_dsub+0x65e>
    5cba:	0002      	movs	r2, r0
    5cbc:	430a      	orrs	r2, r1
    5cbe:	d019      	beq.n	5cf4 <__aeabi_dsub+0x610>
    5cc0:	08ed      	lsrs	r5, r5, #3
    5cc2:	077c      	lsls	r4, r7, #29
    5cc4:	432c      	orrs	r4, r5
    5cc6:	2580      	movs	r5, #128	; 0x80
    5cc8:	08fa      	lsrs	r2, r7, #3
    5cca:	032d      	lsls	r5, r5, #12
    5ccc:	422a      	tst	r2, r5
    5cce:	d007      	beq.n	5ce0 <__aeabi_dsub+0x5fc>
    5cd0:	08c6      	lsrs	r6, r0, #3
    5cd2:	422e      	tst	r6, r5
    5cd4:	d104      	bne.n	5ce0 <__aeabi_dsub+0x5fc>
    5cd6:	0747      	lsls	r7, r0, #29
    5cd8:	003c      	movs	r4, r7
    5cda:	0032      	movs	r2, r6
    5cdc:	08c9      	lsrs	r1, r1, #3
    5cde:	430c      	orrs	r4, r1
    5ce0:	00d7      	lsls	r7, r2, #3
    5ce2:	0f62      	lsrs	r2, r4, #29
    5ce4:	00e5      	lsls	r5, r4, #3
    5ce6:	4317      	orrs	r7, r2
    5ce8:	469a      	mov	sl, r3
    5cea:	4c26      	ldr	r4, [pc, #152]	; (5d84 <__aeabi_dsub+0x6a0>)
    5cec:	e526      	b.n	573c <__aeabi_dsub+0x58>
    5cee:	2200      	movs	r2, #0
    5cf0:	2500      	movs	r5, #0
    5cf2:	e544      	b.n	577e <__aeabi_dsub+0x9a>
    5cf4:	4c23      	ldr	r4, [pc, #140]	; (5d84 <__aeabi_dsub+0x6a0>)
    5cf6:	e521      	b.n	573c <__aeabi_dsub+0x58>
    5cf8:	2000      	movs	r0, #0
    5cfa:	e749      	b.n	5b90 <__aeabi_dsub+0x4ac>
    5cfc:	2300      	movs	r3, #0
    5cfe:	2500      	movs	r5, #0
    5d00:	e5bb      	b.n	587a <__aeabi_dsub+0x196>
    5d02:	464c      	mov	r4, r9
    5d04:	003e      	movs	r6, r7
    5d06:	3c20      	subs	r4, #32
    5d08:	40e6      	lsrs	r6, r4
    5d0a:	464c      	mov	r4, r9
    5d0c:	46b4      	mov	ip, r6
    5d0e:	2c20      	cmp	r4, #32
    5d10:	d031      	beq.n	5d76 <__aeabi_dsub+0x692>
    5d12:	2440      	movs	r4, #64	; 0x40
    5d14:	464e      	mov	r6, r9
    5d16:	1ba6      	subs	r6, r4, r6
    5d18:	40b7      	lsls	r7, r6
    5d1a:	433d      	orrs	r5, r7
    5d1c:	1e6c      	subs	r4, r5, #1
    5d1e:	41a5      	sbcs	r5, r4
    5d20:	4664      	mov	r4, ip
    5d22:	432c      	orrs	r4, r5
    5d24:	2700      	movs	r7, #0
    5d26:	1b0d      	subs	r5, r1, r4
    5d28:	e6e7      	b.n	5afa <__aeabi_dsub+0x416>
    5d2a:	2280      	movs	r2, #128	; 0x80
    5d2c:	2300      	movs	r3, #0
    5d2e:	0312      	lsls	r2, r2, #12
    5d30:	4c14      	ldr	r4, [pc, #80]	; (5d84 <__aeabi_dsub+0x6a0>)
    5d32:	2500      	movs	r5, #0
    5d34:	e5a1      	b.n	587a <__aeabi_dsub+0x196>
    5d36:	433d      	orrs	r5, r7
    5d38:	1e6f      	subs	r7, r5, #1
    5d3a:	41bd      	sbcs	r5, r7
    5d3c:	2700      	movs	r7, #0
    5d3e:	b2ed      	uxtb	r5, r5
    5d40:	e760      	b.n	5c04 <__aeabi_dsub+0x520>
    5d42:	0007      	movs	r7, r0
    5d44:	000d      	movs	r5, r1
    5d46:	4c0f      	ldr	r4, [pc, #60]	; (5d84 <__aeabi_dsub+0x6a0>)
    5d48:	e4f8      	b.n	573c <__aeabi_dsub+0x58>
    5d4a:	0007      	movs	r7, r0
    5d4c:	000d      	movs	r5, r1
    5d4e:	e4f5      	b.n	573c <__aeabi_dsub+0x58>
    5d50:	464e      	mov	r6, r9
    5d52:	003c      	movs	r4, r7
    5d54:	3e20      	subs	r6, #32
    5d56:	40f4      	lsrs	r4, r6
    5d58:	46a0      	mov	r8, r4
    5d5a:	464c      	mov	r4, r9
    5d5c:	2c20      	cmp	r4, #32
    5d5e:	d00e      	beq.n	5d7e <__aeabi_dsub+0x69a>
    5d60:	2440      	movs	r4, #64	; 0x40
    5d62:	464e      	mov	r6, r9
    5d64:	1ba4      	subs	r4, r4, r6
    5d66:	40a7      	lsls	r7, r4
    5d68:	433d      	orrs	r5, r7
    5d6a:	1e6f      	subs	r7, r5, #1
    5d6c:	41bd      	sbcs	r5, r7
    5d6e:	4644      	mov	r4, r8
    5d70:	2700      	movs	r7, #0
    5d72:	4325      	orrs	r5, r4
    5d74:	e746      	b.n	5c04 <__aeabi_dsub+0x520>
    5d76:	2700      	movs	r7, #0
    5d78:	e7cf      	b.n	5d1a <__aeabi_dsub+0x636>
    5d7a:	000d      	movs	r5, r1
    5d7c:	e573      	b.n	5866 <__aeabi_dsub+0x182>
    5d7e:	2700      	movs	r7, #0
    5d80:	e7f2      	b.n	5d68 <__aeabi_dsub+0x684>
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	000007ff 	.word	0x000007ff
    5d88:	ff7fffff 	.word	0xff7fffff

00005d8c <__aeabi_dcmpun>:
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4e0e      	ldr	r6, [pc, #56]	; (5dc8 <__aeabi_dcmpun+0x3c>)
    5d90:	030c      	lsls	r4, r1, #12
    5d92:	031d      	lsls	r5, r3, #12
    5d94:	0049      	lsls	r1, r1, #1
    5d96:	005b      	lsls	r3, r3, #1
    5d98:	0b24      	lsrs	r4, r4, #12
    5d9a:	0d49      	lsrs	r1, r1, #21
    5d9c:	0b2d      	lsrs	r5, r5, #12
    5d9e:	0d5b      	lsrs	r3, r3, #21
    5da0:	42b1      	cmp	r1, r6
    5da2:	d004      	beq.n	5dae <__aeabi_dcmpun+0x22>
    5da4:	4908      	ldr	r1, [pc, #32]	; (5dc8 <__aeabi_dcmpun+0x3c>)
    5da6:	2000      	movs	r0, #0
    5da8:	428b      	cmp	r3, r1
    5daa:	d008      	beq.n	5dbe <__aeabi_dcmpun+0x32>
    5dac:	bd70      	pop	{r4, r5, r6, pc}
    5dae:	4304      	orrs	r4, r0
    5db0:	2001      	movs	r0, #1
    5db2:	2c00      	cmp	r4, #0
    5db4:	d1fa      	bne.n	5dac <__aeabi_dcmpun+0x20>
    5db6:	4904      	ldr	r1, [pc, #16]	; (5dc8 <__aeabi_dcmpun+0x3c>)
    5db8:	2000      	movs	r0, #0
    5dba:	428b      	cmp	r3, r1
    5dbc:	d1f6      	bne.n	5dac <__aeabi_dcmpun+0x20>
    5dbe:	4315      	orrs	r5, r2
    5dc0:	0028      	movs	r0, r5
    5dc2:	1e45      	subs	r5, r0, #1
    5dc4:	41a8      	sbcs	r0, r5
    5dc6:	e7f1      	b.n	5dac <__aeabi_dcmpun+0x20>
    5dc8:	000007ff 	.word	0x000007ff

00005dcc <__aeabi_d2iz>:
    5dcc:	030b      	lsls	r3, r1, #12
    5dce:	b530      	push	{r4, r5, lr}
    5dd0:	4d13      	ldr	r5, [pc, #76]	; (5e20 <__aeabi_d2iz+0x54>)
    5dd2:	0b1a      	lsrs	r2, r3, #12
    5dd4:	004b      	lsls	r3, r1, #1
    5dd6:	0d5b      	lsrs	r3, r3, #21
    5dd8:	0fc9      	lsrs	r1, r1, #31
    5dda:	2400      	movs	r4, #0
    5ddc:	42ab      	cmp	r3, r5
    5dde:	dd11      	ble.n	5e04 <__aeabi_d2iz+0x38>
    5de0:	4c10      	ldr	r4, [pc, #64]	; (5e24 <__aeabi_d2iz+0x58>)
    5de2:	42a3      	cmp	r3, r4
    5de4:	dc10      	bgt.n	5e08 <__aeabi_d2iz+0x3c>
    5de6:	2480      	movs	r4, #128	; 0x80
    5de8:	0364      	lsls	r4, r4, #13
    5dea:	4322      	orrs	r2, r4
    5dec:	4c0e      	ldr	r4, [pc, #56]	; (5e28 <__aeabi_d2iz+0x5c>)
    5dee:	1ae4      	subs	r4, r4, r3
    5df0:	2c1f      	cmp	r4, #31
    5df2:	dd0c      	ble.n	5e0e <__aeabi_d2iz+0x42>
    5df4:	480d      	ldr	r0, [pc, #52]	; (5e2c <__aeabi_d2iz+0x60>)
    5df6:	1ac3      	subs	r3, r0, r3
    5df8:	40da      	lsrs	r2, r3
    5dfa:	0013      	movs	r3, r2
    5dfc:	425c      	negs	r4, r3
    5dfe:	2900      	cmp	r1, #0
    5e00:	d100      	bne.n	5e04 <__aeabi_d2iz+0x38>
    5e02:	001c      	movs	r4, r3
    5e04:	0020      	movs	r0, r4
    5e06:	bd30      	pop	{r4, r5, pc}
    5e08:	4b09      	ldr	r3, [pc, #36]	; (5e30 <__aeabi_d2iz+0x64>)
    5e0a:	18cc      	adds	r4, r1, r3
    5e0c:	e7fa      	b.n	5e04 <__aeabi_d2iz+0x38>
    5e0e:	40e0      	lsrs	r0, r4
    5e10:	4c08      	ldr	r4, [pc, #32]	; (5e34 <__aeabi_d2iz+0x68>)
    5e12:	46a4      	mov	ip, r4
    5e14:	4463      	add	r3, ip
    5e16:	409a      	lsls	r2, r3
    5e18:	0013      	movs	r3, r2
    5e1a:	4303      	orrs	r3, r0
    5e1c:	e7ee      	b.n	5dfc <__aeabi_d2iz+0x30>
    5e1e:	46c0      	nop			; (mov r8, r8)
    5e20:	000003fe 	.word	0x000003fe
    5e24:	0000041d 	.word	0x0000041d
    5e28:	00000433 	.word	0x00000433
    5e2c:	00000413 	.word	0x00000413
    5e30:	7fffffff 	.word	0x7fffffff
    5e34:	fffffbed 	.word	0xfffffbed

00005e38 <__aeabi_i2d>:
    5e38:	b570      	push	{r4, r5, r6, lr}
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d030      	beq.n	5ea0 <__aeabi_i2d+0x68>
    5e3e:	17c3      	asrs	r3, r0, #31
    5e40:	18c4      	adds	r4, r0, r3
    5e42:	405c      	eors	r4, r3
    5e44:	0fc5      	lsrs	r5, r0, #31
    5e46:	0020      	movs	r0, r4
    5e48:	f000 f9dc 	bl	6204 <__clzsi2>
    5e4c:	4b17      	ldr	r3, [pc, #92]	; (5eac <__aeabi_i2d+0x74>)
    5e4e:	4a18      	ldr	r2, [pc, #96]	; (5eb0 <__aeabi_i2d+0x78>)
    5e50:	1a1b      	subs	r3, r3, r0
    5e52:	1ad2      	subs	r2, r2, r3
    5e54:	2a1f      	cmp	r2, #31
    5e56:	dd18      	ble.n	5e8a <__aeabi_i2d+0x52>
    5e58:	4a16      	ldr	r2, [pc, #88]	; (5eb4 <__aeabi_i2d+0x7c>)
    5e5a:	1ad2      	subs	r2, r2, r3
    5e5c:	4094      	lsls	r4, r2
    5e5e:	2200      	movs	r2, #0
    5e60:	0324      	lsls	r4, r4, #12
    5e62:	055b      	lsls	r3, r3, #21
    5e64:	0b24      	lsrs	r4, r4, #12
    5e66:	0d5b      	lsrs	r3, r3, #21
    5e68:	2100      	movs	r1, #0
    5e6a:	0010      	movs	r0, r2
    5e6c:	0324      	lsls	r4, r4, #12
    5e6e:	0d0a      	lsrs	r2, r1, #20
    5e70:	0512      	lsls	r2, r2, #20
    5e72:	0b24      	lsrs	r4, r4, #12
    5e74:	4314      	orrs	r4, r2
    5e76:	4a10      	ldr	r2, [pc, #64]	; (5eb8 <__aeabi_i2d+0x80>)
    5e78:	051b      	lsls	r3, r3, #20
    5e7a:	4014      	ands	r4, r2
    5e7c:	431c      	orrs	r4, r3
    5e7e:	0064      	lsls	r4, r4, #1
    5e80:	07ed      	lsls	r5, r5, #31
    5e82:	0864      	lsrs	r4, r4, #1
    5e84:	432c      	orrs	r4, r5
    5e86:	0021      	movs	r1, r4
    5e88:	bd70      	pop	{r4, r5, r6, pc}
    5e8a:	0021      	movs	r1, r4
    5e8c:	4091      	lsls	r1, r2
    5e8e:	000a      	movs	r2, r1
    5e90:	210b      	movs	r1, #11
    5e92:	1a08      	subs	r0, r1, r0
    5e94:	40c4      	lsrs	r4, r0
    5e96:	055b      	lsls	r3, r3, #21
    5e98:	0324      	lsls	r4, r4, #12
    5e9a:	0b24      	lsrs	r4, r4, #12
    5e9c:	0d5b      	lsrs	r3, r3, #21
    5e9e:	e7e3      	b.n	5e68 <__aeabi_i2d+0x30>
    5ea0:	2500      	movs	r5, #0
    5ea2:	2300      	movs	r3, #0
    5ea4:	2400      	movs	r4, #0
    5ea6:	2200      	movs	r2, #0
    5ea8:	e7de      	b.n	5e68 <__aeabi_i2d+0x30>
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	0000041e 	.word	0x0000041e
    5eb0:	00000433 	.word	0x00000433
    5eb4:	00000413 	.word	0x00000413
    5eb8:	800fffff 	.word	0x800fffff

00005ebc <__aeabi_ui2d>:
    5ebc:	b570      	push	{r4, r5, r6, lr}
    5ebe:	1e05      	subs	r5, r0, #0
    5ec0:	d028      	beq.n	5f14 <__aeabi_ui2d+0x58>
    5ec2:	f000 f99f 	bl	6204 <__clzsi2>
    5ec6:	4b15      	ldr	r3, [pc, #84]	; (5f1c <__aeabi_ui2d+0x60>)
    5ec8:	4a15      	ldr	r2, [pc, #84]	; (5f20 <__aeabi_ui2d+0x64>)
    5eca:	1a1b      	subs	r3, r3, r0
    5ecc:	1ad2      	subs	r2, r2, r3
    5ece:	2a1f      	cmp	r2, #31
    5ed0:	dd16      	ble.n	5f00 <__aeabi_ui2d+0x44>
    5ed2:	002c      	movs	r4, r5
    5ed4:	4a13      	ldr	r2, [pc, #76]	; (5f24 <__aeabi_ui2d+0x68>)
    5ed6:	2500      	movs	r5, #0
    5ed8:	1ad2      	subs	r2, r2, r3
    5eda:	4094      	lsls	r4, r2
    5edc:	055a      	lsls	r2, r3, #21
    5ede:	0324      	lsls	r4, r4, #12
    5ee0:	0b24      	lsrs	r4, r4, #12
    5ee2:	0d52      	lsrs	r2, r2, #21
    5ee4:	2100      	movs	r1, #0
    5ee6:	0324      	lsls	r4, r4, #12
    5ee8:	0d0b      	lsrs	r3, r1, #20
    5eea:	0b24      	lsrs	r4, r4, #12
    5eec:	051b      	lsls	r3, r3, #20
    5eee:	4323      	orrs	r3, r4
    5ef0:	4c0d      	ldr	r4, [pc, #52]	; (5f28 <__aeabi_ui2d+0x6c>)
    5ef2:	0512      	lsls	r2, r2, #20
    5ef4:	4023      	ands	r3, r4
    5ef6:	4313      	orrs	r3, r2
    5ef8:	005b      	lsls	r3, r3, #1
    5efa:	0028      	movs	r0, r5
    5efc:	0859      	lsrs	r1, r3, #1
    5efe:	bd70      	pop	{r4, r5, r6, pc}
    5f00:	210b      	movs	r1, #11
    5f02:	002c      	movs	r4, r5
    5f04:	1a08      	subs	r0, r1, r0
    5f06:	40c4      	lsrs	r4, r0
    5f08:	4095      	lsls	r5, r2
    5f0a:	0324      	lsls	r4, r4, #12
    5f0c:	055a      	lsls	r2, r3, #21
    5f0e:	0b24      	lsrs	r4, r4, #12
    5f10:	0d52      	lsrs	r2, r2, #21
    5f12:	e7e7      	b.n	5ee4 <__aeabi_ui2d+0x28>
    5f14:	2200      	movs	r2, #0
    5f16:	2400      	movs	r4, #0
    5f18:	e7e4      	b.n	5ee4 <__aeabi_ui2d+0x28>
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	0000041e 	.word	0x0000041e
    5f20:	00000433 	.word	0x00000433
    5f24:	00000413 	.word	0x00000413
    5f28:	800fffff 	.word	0x800fffff

00005f2c <__aeabi_f2d>:
    5f2c:	0042      	lsls	r2, r0, #1
    5f2e:	0e12      	lsrs	r2, r2, #24
    5f30:	1c51      	adds	r1, r2, #1
    5f32:	0243      	lsls	r3, r0, #9
    5f34:	b2c9      	uxtb	r1, r1
    5f36:	b570      	push	{r4, r5, r6, lr}
    5f38:	0a5d      	lsrs	r5, r3, #9
    5f3a:	0fc4      	lsrs	r4, r0, #31
    5f3c:	2901      	cmp	r1, #1
    5f3e:	dd15      	ble.n	5f6c <__aeabi_f2d+0x40>
    5f40:	21e0      	movs	r1, #224	; 0xe0
    5f42:	0089      	lsls	r1, r1, #2
    5f44:	468c      	mov	ip, r1
    5f46:	076d      	lsls	r5, r5, #29
    5f48:	0b1b      	lsrs	r3, r3, #12
    5f4a:	4462      	add	r2, ip
    5f4c:	2100      	movs	r1, #0
    5f4e:	0028      	movs	r0, r5
    5f50:	0d0d      	lsrs	r5, r1, #20
    5f52:	052d      	lsls	r5, r5, #20
    5f54:	432b      	orrs	r3, r5
    5f56:	4d1c      	ldr	r5, [pc, #112]	; (5fc8 <__aeabi_f2d+0x9c>)
    5f58:	0552      	lsls	r2, r2, #21
    5f5a:	402b      	ands	r3, r5
    5f5c:	0852      	lsrs	r2, r2, #1
    5f5e:	4313      	orrs	r3, r2
    5f60:	005b      	lsls	r3, r3, #1
    5f62:	07e4      	lsls	r4, r4, #31
    5f64:	085b      	lsrs	r3, r3, #1
    5f66:	4323      	orrs	r3, r4
    5f68:	0019      	movs	r1, r3
    5f6a:	bd70      	pop	{r4, r5, r6, pc}
    5f6c:	2a00      	cmp	r2, #0
    5f6e:	d115      	bne.n	5f9c <__aeabi_f2d+0x70>
    5f70:	2d00      	cmp	r5, #0
    5f72:	d01f      	beq.n	5fb4 <__aeabi_f2d+0x88>
    5f74:	0028      	movs	r0, r5
    5f76:	f000 f945 	bl	6204 <__clzsi2>
    5f7a:	280a      	cmp	r0, #10
    5f7c:	dc1d      	bgt.n	5fba <__aeabi_f2d+0x8e>
    5f7e:	230b      	movs	r3, #11
    5f80:	002a      	movs	r2, r5
    5f82:	1a1b      	subs	r3, r3, r0
    5f84:	40da      	lsrs	r2, r3
    5f86:	0013      	movs	r3, r2
    5f88:	0002      	movs	r2, r0
    5f8a:	3215      	adds	r2, #21
    5f8c:	4095      	lsls	r5, r2
    5f8e:	4a0f      	ldr	r2, [pc, #60]	; (5fcc <__aeabi_f2d+0xa0>)
    5f90:	031b      	lsls	r3, r3, #12
    5f92:	1a12      	subs	r2, r2, r0
    5f94:	0552      	lsls	r2, r2, #21
    5f96:	0b1b      	lsrs	r3, r3, #12
    5f98:	0d52      	lsrs	r2, r2, #21
    5f9a:	e7d7      	b.n	5f4c <__aeabi_f2d+0x20>
    5f9c:	2d00      	cmp	r5, #0
    5f9e:	d006      	beq.n	5fae <__aeabi_f2d+0x82>
    5fa0:	2280      	movs	r2, #128	; 0x80
    5fa2:	0b1b      	lsrs	r3, r3, #12
    5fa4:	0312      	lsls	r2, r2, #12
    5fa6:	4313      	orrs	r3, r2
    5fa8:	076d      	lsls	r5, r5, #29
    5faa:	4a09      	ldr	r2, [pc, #36]	; (5fd0 <__aeabi_f2d+0xa4>)
    5fac:	e7ce      	b.n	5f4c <__aeabi_f2d+0x20>
    5fae:	4a08      	ldr	r2, [pc, #32]	; (5fd0 <__aeabi_f2d+0xa4>)
    5fb0:	2300      	movs	r3, #0
    5fb2:	e7cb      	b.n	5f4c <__aeabi_f2d+0x20>
    5fb4:	2200      	movs	r2, #0
    5fb6:	2300      	movs	r3, #0
    5fb8:	e7c8      	b.n	5f4c <__aeabi_f2d+0x20>
    5fba:	0003      	movs	r3, r0
    5fbc:	3b0b      	subs	r3, #11
    5fbe:	409d      	lsls	r5, r3
    5fc0:	002b      	movs	r3, r5
    5fc2:	2500      	movs	r5, #0
    5fc4:	e7e3      	b.n	5f8e <__aeabi_f2d+0x62>
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	800fffff 	.word	0x800fffff
    5fcc:	00000389 	.word	0x00000389
    5fd0:	000007ff 	.word	0x000007ff

00005fd4 <__aeabi_d2f>:
    5fd4:	004b      	lsls	r3, r1, #1
    5fd6:	b570      	push	{r4, r5, r6, lr}
    5fd8:	0d5e      	lsrs	r6, r3, #21
    5fda:	030c      	lsls	r4, r1, #12
    5fdc:	1c75      	adds	r5, r6, #1
    5fde:	0a64      	lsrs	r4, r4, #9
    5fe0:	0f42      	lsrs	r2, r0, #29
    5fe2:	056d      	lsls	r5, r5, #21
    5fe4:	4322      	orrs	r2, r4
    5fe6:	0fc9      	lsrs	r1, r1, #31
    5fe8:	00c4      	lsls	r4, r0, #3
    5fea:	0d6d      	lsrs	r5, r5, #21
    5fec:	2d01      	cmp	r5, #1
    5fee:	dd2a      	ble.n	6046 <__aeabi_d2f+0x72>
    5ff0:	4b3b      	ldr	r3, [pc, #236]	; (60e0 <__aeabi_d2f+0x10c>)
    5ff2:	18f3      	adds	r3, r6, r3
    5ff4:	2bfe      	cmp	r3, #254	; 0xfe
    5ff6:	dc1a      	bgt.n	602e <__aeabi_d2f+0x5a>
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	dd42      	ble.n	6082 <__aeabi_d2f+0xae>
    5ffc:	0180      	lsls	r0, r0, #6
    5ffe:	1e45      	subs	r5, r0, #1
    6000:	41a8      	sbcs	r0, r5
    6002:	00d2      	lsls	r2, r2, #3
    6004:	4310      	orrs	r0, r2
    6006:	0f62      	lsrs	r2, r4, #29
    6008:	4302      	orrs	r2, r0
    600a:	0750      	lsls	r0, r2, #29
    600c:	d004      	beq.n	6018 <__aeabi_d2f+0x44>
    600e:	200f      	movs	r0, #15
    6010:	4010      	ands	r0, r2
    6012:	2804      	cmp	r0, #4
    6014:	d000      	beq.n	6018 <__aeabi_d2f+0x44>
    6016:	3204      	adds	r2, #4
    6018:	2080      	movs	r0, #128	; 0x80
    601a:	04c0      	lsls	r0, r0, #19
    601c:	4010      	ands	r0, r2
    601e:	d021      	beq.n	6064 <__aeabi_d2f+0x90>
    6020:	3301      	adds	r3, #1
    6022:	2bff      	cmp	r3, #255	; 0xff
    6024:	d003      	beq.n	602e <__aeabi_d2f+0x5a>
    6026:	0192      	lsls	r2, r2, #6
    6028:	0a52      	lsrs	r2, r2, #9
    602a:	b2db      	uxtb	r3, r3
    602c:	e001      	b.n	6032 <__aeabi_d2f+0x5e>
    602e:	23ff      	movs	r3, #255	; 0xff
    6030:	2200      	movs	r2, #0
    6032:	0252      	lsls	r2, r2, #9
    6034:	0a52      	lsrs	r2, r2, #9
    6036:	05db      	lsls	r3, r3, #23
    6038:	4313      	orrs	r3, r2
    603a:	005b      	lsls	r3, r3, #1
    603c:	07c9      	lsls	r1, r1, #31
    603e:	085b      	lsrs	r3, r3, #1
    6040:	430b      	orrs	r3, r1
    6042:	0018      	movs	r0, r3
    6044:	bd70      	pop	{r4, r5, r6, pc}
    6046:	2e00      	cmp	r6, #0
    6048:	d007      	beq.n	605a <__aeabi_d2f+0x86>
    604a:	4314      	orrs	r4, r2
    604c:	d0ef      	beq.n	602e <__aeabi_d2f+0x5a>
    604e:	2080      	movs	r0, #128	; 0x80
    6050:	00d2      	lsls	r2, r2, #3
    6052:	0480      	lsls	r0, r0, #18
    6054:	4302      	orrs	r2, r0
    6056:	23ff      	movs	r3, #255	; 0xff
    6058:	e7d7      	b.n	600a <__aeabi_d2f+0x36>
    605a:	4322      	orrs	r2, r4
    605c:	2300      	movs	r3, #0
    605e:	2a00      	cmp	r2, #0
    6060:	d003      	beq.n	606a <__aeabi_d2f+0x96>
    6062:	2205      	movs	r2, #5
    6064:	08d2      	lsrs	r2, r2, #3
    6066:	2bff      	cmp	r3, #255	; 0xff
    6068:	d003      	beq.n	6072 <__aeabi_d2f+0x9e>
    606a:	0252      	lsls	r2, r2, #9
    606c:	0a52      	lsrs	r2, r2, #9
    606e:	b2db      	uxtb	r3, r3
    6070:	e7df      	b.n	6032 <__aeabi_d2f+0x5e>
    6072:	2a00      	cmp	r2, #0
    6074:	d032      	beq.n	60dc <__aeabi_d2f+0x108>
    6076:	2080      	movs	r0, #128	; 0x80
    6078:	03c0      	lsls	r0, r0, #15
    607a:	4302      	orrs	r2, r0
    607c:	0252      	lsls	r2, r2, #9
    607e:	0a52      	lsrs	r2, r2, #9
    6080:	e7d7      	b.n	6032 <__aeabi_d2f+0x5e>
    6082:	0018      	movs	r0, r3
    6084:	3017      	adds	r0, #23
    6086:	db14      	blt.n	60b2 <__aeabi_d2f+0xde>
    6088:	2080      	movs	r0, #128	; 0x80
    608a:	0400      	lsls	r0, r0, #16
    608c:	4302      	orrs	r2, r0
    608e:	201e      	movs	r0, #30
    6090:	1ac0      	subs	r0, r0, r3
    6092:	281f      	cmp	r0, #31
    6094:	dc0f      	bgt.n	60b6 <__aeabi_d2f+0xe2>
    6096:	0025      	movs	r5, r4
    6098:	4b12      	ldr	r3, [pc, #72]	; (60e4 <__aeabi_d2f+0x110>)
    609a:	18f3      	adds	r3, r6, r3
    609c:	409d      	lsls	r5, r3
    609e:	1e6e      	subs	r6, r5, #1
    60a0:	41b5      	sbcs	r5, r6
    60a2:	409a      	lsls	r2, r3
    60a4:	002b      	movs	r3, r5
    60a6:	4313      	orrs	r3, r2
    60a8:	0022      	movs	r2, r4
    60aa:	40c2      	lsrs	r2, r0
    60ac:	431a      	orrs	r2, r3
    60ae:	2300      	movs	r3, #0
    60b0:	e7ab      	b.n	600a <__aeabi_d2f+0x36>
    60b2:	2300      	movs	r3, #0
    60b4:	e7d5      	b.n	6062 <__aeabi_d2f+0x8e>
    60b6:	2502      	movs	r5, #2
    60b8:	426d      	negs	r5, r5
    60ba:	1aeb      	subs	r3, r5, r3
    60bc:	0015      	movs	r5, r2
    60be:	40dd      	lsrs	r5, r3
    60c0:	2820      	cmp	r0, #32
    60c2:	d009      	beq.n	60d8 <__aeabi_d2f+0x104>
    60c4:	4b08      	ldr	r3, [pc, #32]	; (60e8 <__aeabi_d2f+0x114>)
    60c6:	18f3      	adds	r3, r6, r3
    60c8:	409a      	lsls	r2, r3
    60ca:	4314      	orrs	r4, r2
    60cc:	1e62      	subs	r2, r4, #1
    60ce:	4194      	sbcs	r4, r2
    60d0:	0022      	movs	r2, r4
    60d2:	2300      	movs	r3, #0
    60d4:	432a      	orrs	r2, r5
    60d6:	e798      	b.n	600a <__aeabi_d2f+0x36>
    60d8:	2200      	movs	r2, #0
    60da:	e7f6      	b.n	60ca <__aeabi_d2f+0xf6>
    60dc:	2200      	movs	r2, #0
    60de:	e7a8      	b.n	6032 <__aeabi_d2f+0x5e>
    60e0:	fffffc80 	.word	0xfffffc80
    60e4:	fffffc82 	.word	0xfffffc82
    60e8:	fffffca2 	.word	0xfffffca2

000060ec <__aeabi_uidiv>:
    60ec:	2200      	movs	r2, #0
    60ee:	0843      	lsrs	r3, r0, #1
    60f0:	428b      	cmp	r3, r1
    60f2:	d374      	bcc.n	61de <__aeabi_uidiv+0xf2>
    60f4:	0903      	lsrs	r3, r0, #4
    60f6:	428b      	cmp	r3, r1
    60f8:	d35f      	bcc.n	61ba <__aeabi_uidiv+0xce>
    60fa:	0a03      	lsrs	r3, r0, #8
    60fc:	428b      	cmp	r3, r1
    60fe:	d344      	bcc.n	618a <__aeabi_uidiv+0x9e>
    6100:	0b03      	lsrs	r3, r0, #12
    6102:	428b      	cmp	r3, r1
    6104:	d328      	bcc.n	6158 <__aeabi_uidiv+0x6c>
    6106:	0c03      	lsrs	r3, r0, #16
    6108:	428b      	cmp	r3, r1
    610a:	d30d      	bcc.n	6128 <__aeabi_uidiv+0x3c>
    610c:	22ff      	movs	r2, #255	; 0xff
    610e:	0209      	lsls	r1, r1, #8
    6110:	ba12      	rev	r2, r2
    6112:	0c03      	lsrs	r3, r0, #16
    6114:	428b      	cmp	r3, r1
    6116:	d302      	bcc.n	611e <__aeabi_uidiv+0x32>
    6118:	1212      	asrs	r2, r2, #8
    611a:	0209      	lsls	r1, r1, #8
    611c:	d065      	beq.n	61ea <__aeabi_uidiv+0xfe>
    611e:	0b03      	lsrs	r3, r0, #12
    6120:	428b      	cmp	r3, r1
    6122:	d319      	bcc.n	6158 <__aeabi_uidiv+0x6c>
    6124:	e000      	b.n	6128 <__aeabi_uidiv+0x3c>
    6126:	0a09      	lsrs	r1, r1, #8
    6128:	0bc3      	lsrs	r3, r0, #15
    612a:	428b      	cmp	r3, r1
    612c:	d301      	bcc.n	6132 <__aeabi_uidiv+0x46>
    612e:	03cb      	lsls	r3, r1, #15
    6130:	1ac0      	subs	r0, r0, r3
    6132:	4152      	adcs	r2, r2
    6134:	0b83      	lsrs	r3, r0, #14
    6136:	428b      	cmp	r3, r1
    6138:	d301      	bcc.n	613e <__aeabi_uidiv+0x52>
    613a:	038b      	lsls	r3, r1, #14
    613c:	1ac0      	subs	r0, r0, r3
    613e:	4152      	adcs	r2, r2
    6140:	0b43      	lsrs	r3, r0, #13
    6142:	428b      	cmp	r3, r1
    6144:	d301      	bcc.n	614a <__aeabi_uidiv+0x5e>
    6146:	034b      	lsls	r3, r1, #13
    6148:	1ac0      	subs	r0, r0, r3
    614a:	4152      	adcs	r2, r2
    614c:	0b03      	lsrs	r3, r0, #12
    614e:	428b      	cmp	r3, r1
    6150:	d301      	bcc.n	6156 <__aeabi_uidiv+0x6a>
    6152:	030b      	lsls	r3, r1, #12
    6154:	1ac0      	subs	r0, r0, r3
    6156:	4152      	adcs	r2, r2
    6158:	0ac3      	lsrs	r3, r0, #11
    615a:	428b      	cmp	r3, r1
    615c:	d301      	bcc.n	6162 <__aeabi_uidiv+0x76>
    615e:	02cb      	lsls	r3, r1, #11
    6160:	1ac0      	subs	r0, r0, r3
    6162:	4152      	adcs	r2, r2
    6164:	0a83      	lsrs	r3, r0, #10
    6166:	428b      	cmp	r3, r1
    6168:	d301      	bcc.n	616e <__aeabi_uidiv+0x82>
    616a:	028b      	lsls	r3, r1, #10
    616c:	1ac0      	subs	r0, r0, r3
    616e:	4152      	adcs	r2, r2
    6170:	0a43      	lsrs	r3, r0, #9
    6172:	428b      	cmp	r3, r1
    6174:	d301      	bcc.n	617a <__aeabi_uidiv+0x8e>
    6176:	024b      	lsls	r3, r1, #9
    6178:	1ac0      	subs	r0, r0, r3
    617a:	4152      	adcs	r2, r2
    617c:	0a03      	lsrs	r3, r0, #8
    617e:	428b      	cmp	r3, r1
    6180:	d301      	bcc.n	6186 <__aeabi_uidiv+0x9a>
    6182:	020b      	lsls	r3, r1, #8
    6184:	1ac0      	subs	r0, r0, r3
    6186:	4152      	adcs	r2, r2
    6188:	d2cd      	bcs.n	6126 <__aeabi_uidiv+0x3a>
    618a:	09c3      	lsrs	r3, r0, #7
    618c:	428b      	cmp	r3, r1
    618e:	d301      	bcc.n	6194 <__aeabi_uidiv+0xa8>
    6190:	01cb      	lsls	r3, r1, #7
    6192:	1ac0      	subs	r0, r0, r3
    6194:	4152      	adcs	r2, r2
    6196:	0983      	lsrs	r3, r0, #6
    6198:	428b      	cmp	r3, r1
    619a:	d301      	bcc.n	61a0 <__aeabi_uidiv+0xb4>
    619c:	018b      	lsls	r3, r1, #6
    619e:	1ac0      	subs	r0, r0, r3
    61a0:	4152      	adcs	r2, r2
    61a2:	0943      	lsrs	r3, r0, #5
    61a4:	428b      	cmp	r3, r1
    61a6:	d301      	bcc.n	61ac <__aeabi_uidiv+0xc0>
    61a8:	014b      	lsls	r3, r1, #5
    61aa:	1ac0      	subs	r0, r0, r3
    61ac:	4152      	adcs	r2, r2
    61ae:	0903      	lsrs	r3, r0, #4
    61b0:	428b      	cmp	r3, r1
    61b2:	d301      	bcc.n	61b8 <__aeabi_uidiv+0xcc>
    61b4:	010b      	lsls	r3, r1, #4
    61b6:	1ac0      	subs	r0, r0, r3
    61b8:	4152      	adcs	r2, r2
    61ba:	08c3      	lsrs	r3, r0, #3
    61bc:	428b      	cmp	r3, r1
    61be:	d301      	bcc.n	61c4 <__aeabi_uidiv+0xd8>
    61c0:	00cb      	lsls	r3, r1, #3
    61c2:	1ac0      	subs	r0, r0, r3
    61c4:	4152      	adcs	r2, r2
    61c6:	0883      	lsrs	r3, r0, #2
    61c8:	428b      	cmp	r3, r1
    61ca:	d301      	bcc.n	61d0 <__aeabi_uidiv+0xe4>
    61cc:	008b      	lsls	r3, r1, #2
    61ce:	1ac0      	subs	r0, r0, r3
    61d0:	4152      	adcs	r2, r2
    61d2:	0843      	lsrs	r3, r0, #1
    61d4:	428b      	cmp	r3, r1
    61d6:	d301      	bcc.n	61dc <__aeabi_uidiv+0xf0>
    61d8:	004b      	lsls	r3, r1, #1
    61da:	1ac0      	subs	r0, r0, r3
    61dc:	4152      	adcs	r2, r2
    61de:	1a41      	subs	r1, r0, r1
    61e0:	d200      	bcs.n	61e4 <__aeabi_uidiv+0xf8>
    61e2:	4601      	mov	r1, r0
    61e4:	4152      	adcs	r2, r2
    61e6:	4610      	mov	r0, r2
    61e8:	4770      	bx	lr
    61ea:	e7ff      	b.n	61ec <__aeabi_uidiv+0x100>
    61ec:	b501      	push	{r0, lr}
    61ee:	2000      	movs	r0, #0
    61f0:	f000 f806 	bl	6200 <__aeabi_idiv0>
    61f4:	bd02      	pop	{r1, pc}
    61f6:	46c0      	nop			; (mov r8, r8)

000061f8 <__aeabi_uidivmod>:
    61f8:	2900      	cmp	r1, #0
    61fa:	d0f7      	beq.n	61ec <__aeabi_uidiv+0x100>
    61fc:	e776      	b.n	60ec <__aeabi_uidiv>
    61fe:	4770      	bx	lr

00006200 <__aeabi_idiv0>:
    6200:	4770      	bx	lr
    6202:	46c0      	nop			; (mov r8, r8)

00006204 <__clzsi2>:
    6204:	211c      	movs	r1, #28
    6206:	2301      	movs	r3, #1
    6208:	041b      	lsls	r3, r3, #16
    620a:	4298      	cmp	r0, r3
    620c:	d301      	bcc.n	6212 <__clzsi2+0xe>
    620e:	0c00      	lsrs	r0, r0, #16
    6210:	3910      	subs	r1, #16
    6212:	0a1b      	lsrs	r3, r3, #8
    6214:	4298      	cmp	r0, r3
    6216:	d301      	bcc.n	621c <__clzsi2+0x18>
    6218:	0a00      	lsrs	r0, r0, #8
    621a:	3908      	subs	r1, #8
    621c:	091b      	lsrs	r3, r3, #4
    621e:	4298      	cmp	r0, r3
    6220:	d301      	bcc.n	6226 <__clzsi2+0x22>
    6222:	0900      	lsrs	r0, r0, #4
    6224:	3904      	subs	r1, #4
    6226:	a202      	add	r2, pc, #8	; (adr r2, 6230 <__clzsi2+0x2c>)
    6228:	5c10      	ldrb	r0, [r2, r0]
    622a:	1840      	adds	r0, r0, r1
    622c:	4770      	bx	lr
    622e:	46c0      	nop			; (mov r8, r8)
    6230:	02020304 	.word	0x02020304
    6234:	01010101 	.word	0x01010101
	...

00006240 <__errno>:
    6240:	4b01      	ldr	r3, [pc, #4]	; (6248 <__errno+0x8>)
    6242:	6818      	ldr	r0, [r3, #0]
    6244:	4770      	bx	lr
    6246:	46c0      	nop			; (mov r8, r8)
    6248:	200004a0 	.word	0x200004a0

0000624c <__libc_init_array>:
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	4e0d      	ldr	r6, [pc, #52]	; (6284 <__libc_init_array+0x38>)
    6250:	4d0d      	ldr	r5, [pc, #52]	; (6288 <__libc_init_array+0x3c>)
    6252:	2400      	movs	r4, #0
    6254:	1bad      	subs	r5, r5, r6
    6256:	10ad      	asrs	r5, r5, #2
    6258:	d005      	beq.n	6266 <__libc_init_array+0x1a>
    625a:	00a3      	lsls	r3, r4, #2
    625c:	58f3      	ldr	r3, [r6, r3]
    625e:	3401      	adds	r4, #1
    6260:	4798      	blx	r3
    6262:	42a5      	cmp	r5, r4
    6264:	d1f9      	bne.n	625a <__libc_init_array+0xe>
    6266:	f000 fa1b 	bl	66a0 <_init>
    626a:	4e08      	ldr	r6, [pc, #32]	; (628c <__libc_init_array+0x40>)
    626c:	4d08      	ldr	r5, [pc, #32]	; (6290 <__libc_init_array+0x44>)
    626e:	2400      	movs	r4, #0
    6270:	1bad      	subs	r5, r5, r6
    6272:	10ad      	asrs	r5, r5, #2
    6274:	d005      	beq.n	6282 <__libc_init_array+0x36>
    6276:	00a3      	lsls	r3, r4, #2
    6278:	58f3      	ldr	r3, [r6, r3]
    627a:	3401      	adds	r4, #1
    627c:	4798      	blx	r3
    627e:	42a5      	cmp	r5, r4
    6280:	d1f9      	bne.n	6276 <__libc_init_array+0x2a>
    6282:	bd70      	pop	{r4, r5, r6, pc}
    6284:	000066ac 	.word	0x000066ac
    6288:	000066ac 	.word	0x000066ac
    628c:	000066ac 	.word	0x000066ac
    6290:	000066b4 	.word	0x000066b4

00006294 <memset>:
    6294:	b570      	push	{r4, r5, r6, lr}
    6296:	0783      	lsls	r3, r0, #30
    6298:	d03f      	beq.n	631a <memset+0x86>
    629a:	1e54      	subs	r4, r2, #1
    629c:	2a00      	cmp	r2, #0
    629e:	d03b      	beq.n	6318 <memset+0x84>
    62a0:	b2ce      	uxtb	r6, r1
    62a2:	0003      	movs	r3, r0
    62a4:	2503      	movs	r5, #3
    62a6:	e003      	b.n	62b0 <memset+0x1c>
    62a8:	1e62      	subs	r2, r4, #1
    62aa:	2c00      	cmp	r4, #0
    62ac:	d034      	beq.n	6318 <memset+0x84>
    62ae:	0014      	movs	r4, r2
    62b0:	3301      	adds	r3, #1
    62b2:	1e5a      	subs	r2, r3, #1
    62b4:	7016      	strb	r6, [r2, #0]
    62b6:	422b      	tst	r3, r5
    62b8:	d1f6      	bne.n	62a8 <memset+0x14>
    62ba:	2c03      	cmp	r4, #3
    62bc:	d924      	bls.n	6308 <memset+0x74>
    62be:	25ff      	movs	r5, #255	; 0xff
    62c0:	400d      	ands	r5, r1
    62c2:	022a      	lsls	r2, r5, #8
    62c4:	4315      	orrs	r5, r2
    62c6:	042a      	lsls	r2, r5, #16
    62c8:	4315      	orrs	r5, r2
    62ca:	2c0f      	cmp	r4, #15
    62cc:	d911      	bls.n	62f2 <memset+0x5e>
    62ce:	0026      	movs	r6, r4
    62d0:	3e10      	subs	r6, #16
    62d2:	0936      	lsrs	r6, r6, #4
    62d4:	3601      	adds	r6, #1
    62d6:	0136      	lsls	r6, r6, #4
    62d8:	001a      	movs	r2, r3
    62da:	199b      	adds	r3, r3, r6
    62dc:	6015      	str	r5, [r2, #0]
    62de:	6055      	str	r5, [r2, #4]
    62e0:	6095      	str	r5, [r2, #8]
    62e2:	60d5      	str	r5, [r2, #12]
    62e4:	3210      	adds	r2, #16
    62e6:	4293      	cmp	r3, r2
    62e8:	d1f8      	bne.n	62dc <memset+0x48>
    62ea:	220f      	movs	r2, #15
    62ec:	4014      	ands	r4, r2
    62ee:	2c03      	cmp	r4, #3
    62f0:	d90a      	bls.n	6308 <memset+0x74>
    62f2:	1f26      	subs	r6, r4, #4
    62f4:	08b6      	lsrs	r6, r6, #2
    62f6:	3601      	adds	r6, #1
    62f8:	00b6      	lsls	r6, r6, #2
    62fa:	001a      	movs	r2, r3
    62fc:	199b      	adds	r3, r3, r6
    62fe:	c220      	stmia	r2!, {r5}
    6300:	4293      	cmp	r3, r2
    6302:	d1fc      	bne.n	62fe <memset+0x6a>
    6304:	2203      	movs	r2, #3
    6306:	4014      	ands	r4, r2
    6308:	2c00      	cmp	r4, #0
    630a:	d005      	beq.n	6318 <memset+0x84>
    630c:	b2c9      	uxtb	r1, r1
    630e:	191c      	adds	r4, r3, r4
    6310:	7019      	strb	r1, [r3, #0]
    6312:	3301      	adds	r3, #1
    6314:	429c      	cmp	r4, r3
    6316:	d1fb      	bne.n	6310 <memset+0x7c>
    6318:	bd70      	pop	{r4, r5, r6, pc}
    631a:	0014      	movs	r4, r2
    631c:	0003      	movs	r3, r0
    631e:	e7cc      	b.n	62ba <memset+0x26>

00006320 <register_fini>:
    6320:	4b03      	ldr	r3, [pc, #12]	; (6330 <register_fini+0x10>)
    6322:	b510      	push	{r4, lr}
    6324:	2b00      	cmp	r3, #0
    6326:	d002      	beq.n	632e <register_fini+0xe>
    6328:	4802      	ldr	r0, [pc, #8]	; (6334 <register_fini+0x14>)
    632a:	f000 f805 	bl	6338 <atexit>
    632e:	bd10      	pop	{r4, pc}
    6330:	00000000 	.word	0x00000000
    6334:	00006349 	.word	0x00006349

00006338 <atexit>:
    6338:	b510      	push	{r4, lr}
    633a:	0001      	movs	r1, r0
    633c:	2300      	movs	r3, #0
    633e:	2200      	movs	r2, #0
    6340:	2000      	movs	r0, #0
    6342:	f000 f81b 	bl	637c <__register_exitproc>
    6346:	bd10      	pop	{r4, pc}

00006348 <__libc_fini_array>:
    6348:	b570      	push	{r4, r5, r6, lr}
    634a:	4b09      	ldr	r3, [pc, #36]	; (6370 <__libc_fini_array+0x28>)
    634c:	4c09      	ldr	r4, [pc, #36]	; (6374 <__libc_fini_array+0x2c>)
    634e:	1ae4      	subs	r4, r4, r3
    6350:	10a4      	asrs	r4, r4, #2
    6352:	d009      	beq.n	6368 <__libc_fini_array+0x20>
    6354:	4a08      	ldr	r2, [pc, #32]	; (6378 <__libc_fini_array+0x30>)
    6356:	18a5      	adds	r5, r4, r2
    6358:	00ad      	lsls	r5, r5, #2
    635a:	18ed      	adds	r5, r5, r3
    635c:	682b      	ldr	r3, [r5, #0]
    635e:	3c01      	subs	r4, #1
    6360:	4798      	blx	r3
    6362:	3d04      	subs	r5, #4
    6364:	2c00      	cmp	r4, #0
    6366:	d1f9      	bne.n	635c <__libc_fini_array+0x14>
    6368:	f000 f9a4 	bl	66b4 <_fini>
    636c:	bd70      	pop	{r4, r5, r6, pc}
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	000066c0 	.word	0x000066c0
    6374:	000066c4 	.word	0x000066c4
    6378:	3fffffff 	.word	0x3fffffff

0000637c <__register_exitproc>:
    637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637e:	4644      	mov	r4, r8
    6380:	465f      	mov	r7, fp
    6382:	4656      	mov	r6, sl
    6384:	464d      	mov	r5, r9
    6386:	469b      	mov	fp, r3
    6388:	4b2f      	ldr	r3, [pc, #188]	; (6448 <__register_exitproc+0xcc>)
    638a:	b4f0      	push	{r4, r5, r6, r7}
    638c:	681c      	ldr	r4, [r3, #0]
    638e:	23a4      	movs	r3, #164	; 0xa4
    6390:	005b      	lsls	r3, r3, #1
    6392:	0005      	movs	r5, r0
    6394:	58e0      	ldr	r0, [r4, r3]
    6396:	000e      	movs	r6, r1
    6398:	4690      	mov	r8, r2
    639a:	2800      	cmp	r0, #0
    639c:	d04b      	beq.n	6436 <__register_exitproc+0xba>
    639e:	6843      	ldr	r3, [r0, #4]
    63a0:	2b1f      	cmp	r3, #31
    63a2:	dc0d      	bgt.n	63c0 <__register_exitproc+0x44>
    63a4:	1c5c      	adds	r4, r3, #1
    63a6:	2d00      	cmp	r5, #0
    63a8:	d121      	bne.n	63ee <__register_exitproc+0x72>
    63aa:	3302      	adds	r3, #2
    63ac:	009b      	lsls	r3, r3, #2
    63ae:	6044      	str	r4, [r0, #4]
    63b0:	501e      	str	r6, [r3, r0]
    63b2:	2000      	movs	r0, #0
    63b4:	bc3c      	pop	{r2, r3, r4, r5}
    63b6:	4690      	mov	r8, r2
    63b8:	4699      	mov	r9, r3
    63ba:	46a2      	mov	sl, r4
    63bc:	46ab      	mov	fp, r5
    63be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63c0:	4b22      	ldr	r3, [pc, #136]	; (644c <__register_exitproc+0xd0>)
    63c2:	2b00      	cmp	r3, #0
    63c4:	d03c      	beq.n	6440 <__register_exitproc+0xc4>
    63c6:	20c8      	movs	r0, #200	; 0xc8
    63c8:	0040      	lsls	r0, r0, #1
    63ca:	e000      	b.n	63ce <__register_exitproc+0x52>
    63cc:	bf00      	nop
    63ce:	2800      	cmp	r0, #0
    63d0:	d036      	beq.n	6440 <__register_exitproc+0xc4>
    63d2:	22a4      	movs	r2, #164	; 0xa4
    63d4:	2300      	movs	r3, #0
    63d6:	0052      	lsls	r2, r2, #1
    63d8:	58a1      	ldr	r1, [r4, r2]
    63da:	6043      	str	r3, [r0, #4]
    63dc:	6001      	str	r1, [r0, #0]
    63de:	50a0      	str	r0, [r4, r2]
    63e0:	3240      	adds	r2, #64	; 0x40
    63e2:	5083      	str	r3, [r0, r2]
    63e4:	3204      	adds	r2, #4
    63e6:	5083      	str	r3, [r0, r2]
    63e8:	2401      	movs	r4, #1
    63ea:	2d00      	cmp	r5, #0
    63ec:	d0dd      	beq.n	63aa <__register_exitproc+0x2e>
    63ee:	009a      	lsls	r2, r3, #2
    63f0:	4691      	mov	r9, r2
    63f2:	4481      	add	r9, r0
    63f4:	4642      	mov	r2, r8
    63f6:	2188      	movs	r1, #136	; 0x88
    63f8:	464f      	mov	r7, r9
    63fa:	507a      	str	r2, [r7, r1]
    63fc:	22c4      	movs	r2, #196	; 0xc4
    63fe:	0052      	lsls	r2, r2, #1
    6400:	4690      	mov	r8, r2
    6402:	4480      	add	r8, r0
    6404:	4642      	mov	r2, r8
    6406:	3987      	subs	r1, #135	; 0x87
    6408:	4099      	lsls	r1, r3
    640a:	6812      	ldr	r2, [r2, #0]
    640c:	468a      	mov	sl, r1
    640e:	430a      	orrs	r2, r1
    6410:	4694      	mov	ip, r2
    6412:	4642      	mov	r2, r8
    6414:	4661      	mov	r1, ip
    6416:	6011      	str	r1, [r2, #0]
    6418:	2284      	movs	r2, #132	; 0x84
    641a:	4649      	mov	r1, r9
    641c:	465f      	mov	r7, fp
    641e:	0052      	lsls	r2, r2, #1
    6420:	508f      	str	r7, [r1, r2]
    6422:	2d02      	cmp	r5, #2
    6424:	d1c1      	bne.n	63aa <__register_exitproc+0x2e>
    6426:	0002      	movs	r2, r0
    6428:	4655      	mov	r5, sl
    642a:	328d      	adds	r2, #141	; 0x8d
    642c:	32ff      	adds	r2, #255	; 0xff
    642e:	6811      	ldr	r1, [r2, #0]
    6430:	430d      	orrs	r5, r1
    6432:	6015      	str	r5, [r2, #0]
    6434:	e7b9      	b.n	63aa <__register_exitproc+0x2e>
    6436:	0020      	movs	r0, r4
    6438:	304d      	adds	r0, #77	; 0x4d
    643a:	30ff      	adds	r0, #255	; 0xff
    643c:	50e0      	str	r0, [r4, r3]
    643e:	e7ae      	b.n	639e <__register_exitproc+0x22>
    6440:	2001      	movs	r0, #1
    6442:	4240      	negs	r0, r0
    6444:	e7b6      	b.n	63b4 <__register_exitproc+0x38>
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	0000669c 	.word	0x0000669c
    644c:	00000000 	.word	0x00000000

00006450 <spi2MOSI>:
    6450:	0c000002 00000200                                .....

00006455 <spi2SCK>:
    6455:	0e000002 00000200                                .....

0000645a <spi2MISO>:
    645a:	0d000002 8d200000                                ......

00006460 <lookupTable.12492>:
    6460:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    6470:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    6480:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    6490:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    64a0:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    64b0:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    64c0:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    64d0:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    64e0:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    64f0:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    6500:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    6510:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    6520:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    6530:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    6540:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    6550:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    6560:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    6570:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    6580:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    6590:	000f048e                                ....

00006594 <senseBatPin>:
    6594:	06000000 01000106                                .....

00006599 <senseAPin>:
    6599:	03010001 0100010b                                .....

0000659e <senseBPin>:
    659e:	02010001 0000000a                                .....

000065a3 <senseCPin>:
    65a3:	03000000 00000001                                .....

000065a8 <senseDPin>:
    65a8:	02000000 00000000                                .....

000065ad <analogAccelPin>:
    65ad:	07000000 00000207                                .....

000065b2 <spi2MOSI>:
    65b2:	0c000002 00000200                                .....

000065b7 <spi2SCK>:
    65b7:	0e000002 776f7000 00000000 00000000     .....pow........
	...

000065c8 <TWO52>:
    65c8:	00000000 43300000 00000000 c3300000     ......0C......0.
    65d8:	00003e64 00003dc2 00003dc2 00003dc0     d>...=...=...=..
    65e8:	00003e56 00003e56 00003e4c 00003dc0     V>..V>..L>...=..
    65f8:	00003e56 00003e4c 00003e56 00003dc0     V>..L>..V>...=..
    6608:	00003e5c 00003e5c 00003e5c 00003ee6     \>..\>..\>...>..
    6618:	00004b98 00004a66 00004b6c 00004a5c     .K..fJ..lK..\J..
    6628:	00004b6c 00004b76 00004b6c 00004a5c     lK..vK..lK..\J..
    6638:	00004a66 00004a66 00004b76 00004a5c     fJ..fJ..vK..\J..
    6648:	00004a52 00004a52 00004a52 00004dc8     RJ..RJ..RJ...M..
    6658:	000053e0 000052a0 000052a0 0000529e     .S...R...R...R..
    6668:	000053b8 000053b8 000053aa 0000529e     .S...S...S...R..
    6678:	000053b8 000053aa 000053b8 0000529e     .S...S...S...R..
    6688:	000053c0 000053c0 000053c0 000055c0     .S...S...S...U..
    6698:	00000043                                C...

0000669c <_global_impure_ptr>:
    669c:	20000078                                x.. 

000066a0 <_init>:
    66a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66a2:	46c0      	nop			; (mov r8, r8)
    66a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66a6:	bc08      	pop	{r3}
    66a8:	469e      	mov	lr, r3
    66aa:	4770      	bx	lr

000066ac <__init_array_start>:
    66ac:	00006321 	.word	0x00006321

000066b0 <__frame_dummy_init_array_entry>:
    66b0:	000000dd                                ....

000066b4 <_fini>:
    66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66b6:	46c0      	nop			; (mov r8, r8)
    66b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66ba:	bc08      	pop	{r3}
    66bc:	469e      	mov	lr, r3
    66be:	4770      	bx	lr

000066c0 <__fini_array_start>:
    66c0:	000000b5 	.word	0x000000b5
