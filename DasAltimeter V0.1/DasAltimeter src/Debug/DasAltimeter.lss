
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006704  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006704  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006bc0  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006d70  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002045a  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002893  00000000  00000000  0004097f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000278b  00000000  00000000  00043212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000428  00000000  00000000  0004599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d78  00000000  00000000  00045dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016363  00000000  00000000  00046b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009bf2  00000000  00000000  0005cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072856  00000000  00000000  00066a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001140  00000000  00000000  000d92e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f85 	.word	0x00000f85
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001025 	.word	0x00001025
      90:	0000108d 	.word	0x0000108d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	00006704 	.word	0x00006704

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	00006704 	.word	0x00006704
     10c:	00006704 	.word	0x00006704
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006704 	.word	0x00006704
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000628d 	.word	0x0000628d
     1d0:	00000a89 	.word	0x00000a89

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	000026ed 	.word	0x000026ed
     21c:	200004d0 	.word	0x200004d0

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000026ed 	.word	0x000026ed
     250:	200004d0 	.word	0x200004d0

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	000026ed 	.word	0x000026ed
     2c8:	200004d0 	.word	0x200004d0

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000026ed 	.word	0x000026ed
     33c:	200004d0 	.word	0x200004d0

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	000026ed 	.word	0x000026ed
     3ac:	200004d0 	.word	0x200004d0

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	000026ed 	.word	0x000026ed
     418:	200004d0 	.word	0x200004d0

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	0212      	lsls	r2, r2, #8
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	00006490 	.word	0x00006490
     4c8:	00000c7d 	.word	0x00000c7d
     4cc:	00000ce9 	.word	0x00000ce9

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4d2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4d6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4d8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4da:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4dc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4de:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     4e0:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     4e2:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	8905      	ldrh	r5, [r0, #8]
     4e6:	6903      	ldr	r3, [r0, #16]
     4e8:	022d      	lsls	r5, r5, #8
     4ea:	1b5b      	subs	r3, r3, r5
     4ec:	2500      	movs	r5, #0
     4ee:	9302      	str	r3, [sp, #8]
     4f0:	17db      	asrs	r3, r3, #31
     4f2:	9303      	str	r3, [sp, #12]
     4f4:	8940      	ldrh	r0, [r0, #10]
     4f6:	4f1f      	ldr	r7, [pc, #124]	; (574 <ConvertPressureTemperature+0xa4>)
     4f8:	9a02      	ldr	r2, [sp, #8]
     4fa:	0029      	movs	r1, r5
     4fc:	47b8      	blx	r7
     4fe:	23fa      	movs	r3, #250	; 0xfa
     500:	0249      	lsls	r1, r1, #9
     502:	0dc0      	lsrs	r0, r0, #23
     504:	4308      	orrs	r0, r1
     506:	00db      	lsls	r3, r3, #3
     508:	18c0      	adds	r0, r0, r3
     50a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	9b03      	ldr	r3, [sp, #12]
     510:	0030      	movs	r0, r6
     512:	0029      	movs	r1, r5
     514:	47b8      	blx	r7
     516:	060b      	lsls	r3, r1, #24
     518:	120f      	asrs	r7, r1, #8
     51a:	0a06      	lsrs	r6, r0, #8
     51c:	9900      	ldr	r1, [sp, #0]
     51e:	431e      	orrs	r6, r3
     520:	03ca      	lsls	r2, r1, #15
     522:	002b      	movs	r3, r5
     524:	0030      	movs	r0, r6
     526:	0039      	movs	r1, r7
     528:	4e12      	ldr	r6, [pc, #72]	; (574 <ConvertPressureTemperature+0xa4>)
     52a:	1880      	adds	r0, r0, r2
     52c:	4159      	adcs	r1, r3
     52e:	68e2      	ldr	r2, [r4, #12]
     530:	47b0      	blx	r6
     532:	02cb      	lsls	r3, r1, #11
     534:	0d42      	lsrs	r2, r0, #21
     536:	431a      	orrs	r2, r3
     538:	154b      	asrs	r3, r1, #21
     53a:	9200      	str	r2, [sp, #0]
     53c:	9301      	str	r3, [sp, #4]
     53e:	9a02      	ldr	r2, [sp, #8]
     540:	9b03      	ldr	r3, [sp, #12]
     542:	4e0c      	ldr	r6, [pc, #48]	; (574 <ConvertPressureTemperature+0xa4>)
     544:	9805      	ldr	r0, [sp, #20]
     546:	0029      	movs	r1, r5
     548:	47b0      	blx	r6
     54a:	064b      	lsls	r3, r1, #25
     54c:	09c6      	lsrs	r6, r0, #7
     54e:	431e      	orrs	r6, r3
     550:	002b      	movs	r3, r5
     552:	11cf      	asrs	r7, r1, #7
     554:	9904      	ldr	r1, [sp, #16]
     556:	040a      	lsls	r2, r1, #16
     558:	1992      	adds	r2, r2, r6
     55a:	417b      	adcs	r3, r7
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a80      	subs	r0, r0, r2
     562:	4199      	sbcs	r1, r3
     564:	000a      	movs	r2, r1
     566:	0453      	lsls	r3, r2, #17
     568:	0bc2      	lsrs	r2, r0, #15
     56a:	431a      	orrs	r2, r3
     56c:	61e2      	str	r2, [r4, #28]

}
     56e:	b007      	add	sp, #28
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	00003b65 	.word	0x00003b65

00000578 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     578:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     57c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57e:	69c0      	ldr	r0, [r0, #28]
     580:	4798      	blx	r3
     582:	4d0e      	ldr	r5, [pc, #56]	; (5bc <paToFeetNOAA+0x44>)
     584:	2200      	movs	r2, #0
     586:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <paToFeetNOAA+0x48>)
     588:	47a8      	blx	r5
     58a:	2200      	movs	r2, #0
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <paToFeetNOAA+0x4c>)
     58e:	47a8      	blx	r5
     590:	4a0d      	ldr	r2, [pc, #52]	; (5c8 <paToFeetNOAA+0x50>)
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <paToFeetNOAA+0x54>)
     594:	4d0e      	ldr	r5, [pc, #56]	; (5d0 <paToFeetNOAA+0x58>)
     596:	47a8      	blx	r5
     598:	4d0e      	ldr	r5, [pc, #56]	; (5d4 <paToFeetNOAA+0x5c>)
     59a:	0002      	movs	r2, r0
     59c:	000b      	movs	r3, r1
     59e:	2000      	movs	r0, #0
     5a0:	490d      	ldr	r1, [pc, #52]	; (5d8 <paToFeetNOAA+0x60>)
     5a2:	47a8      	blx	r5
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <paToFeetNOAA+0x64>)
     5a6:	4d0e      	ldr	r5, [pc, #56]	; (5e0 <paToFeetNOAA+0x68>)
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <paToFeetNOAA+0x6c>)
     5aa:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ae:	62a0      	str	r0, [r4, #40]	; 0x28
     5b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5b2:	4798      	blx	r3
     5b4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	00005e79 	.word	0x00005e79
     5bc:	000049e9 	.word	0x000049e9
     5c0:	40240000 	.word	0x40240000
     5c4:	408faa00 	.word	0x408faa00
     5c8:	e279dd3c 	.word	0xe279dd3c
     5cc:	3fc85b39 	.word	0x3fc85b39
     5d0:	00002841 	.word	0x00002841
     5d4:	00005725 	.word	0x00005725
     5d8:	3ff00000 	.word	0x3ff00000
     5dc:	9999999a 	.word	0x9999999a
     5e0:	00005231 	.word	0x00005231
     5e4:	4101beb3 	.word	0x4101beb3
     5e8:	00003bed 	.word	0x00003bed

000005ec <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	27a2      	movs	r7, #162	; 0xa2
     5f0:	b087      	sub	sp, #28
     5f2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5f4:	2096      	movs	r0, #150	; 0x96
     5f6:	4c2b      	ldr	r4, [pc, #172]	; (6a4 <readMS5803Coefficients+0xb8>)
     5f8:	0080      	lsls	r0, r0, #2
     5fa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5fc:	2096      	movs	r0, #150	; 0x96
     5fe:	0080      	lsls	r0, r0, #2
     600:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     604:	4c28      	ldr	r4, [pc, #160]	; (6a8 <readMS5803Coefficients+0xbc>)
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <readMS5803Coefficients+0xc0>)
     608:	0212      	lsls	r2, r2, #8
     60a:	615a      	str	r2, [r3, #20]
     60c:	7863      	ldrb	r3, [r4, #1]
     60e:	7820      	ldrb	r0, [r4, #0]
     610:	78a2      	ldrb	r2, [r4, #2]
     612:	021b      	lsls	r3, r3, #8
     614:	4303      	orrs	r3, r0
     616:	0412      	lsls	r2, r2, #16
     618:	0019      	movs	r1, r3
     61a:	0013      	movs	r3, r2
     61c:	430b      	orrs	r3, r1
     61e:	79a1      	ldrb	r1, [r4, #6]
     620:	7966      	ldrb	r6, [r4, #5]
     622:	0209      	lsls	r1, r1, #8
     624:	4331      	orrs	r1, r6
     626:	0008      	movs	r0, r1
     628:	79e1      	ldrb	r1, [r4, #7]
     62a:	78e2      	ldrb	r2, [r4, #3]
     62c:	0409      	lsls	r1, r1, #16
     62e:	4301      	orrs	r1, r0
     630:	7a20      	ldrb	r0, [r4, #8]
     632:	7a66      	ldrb	r6, [r4, #9]
     634:	0612      	lsls	r2, r2, #24
     636:	0600      	lsls	r0, r0, #24
     638:	4308      	orrs	r0, r1
     63a:	431a      	orrs	r2, r3
     63c:	9700      	str	r7, [sp, #0]
     63e:	7923      	ldrb	r3, [r4, #4]
     640:	0031      	movs	r1, r6
     642:	4d1b      	ldr	r5, [pc, #108]	; (6b0 <readMS5803Coefficients+0xc4>)
     644:	9003      	str	r0, [sp, #12]
     646:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	0020      	movs	r0, r4
     64c:	7aa1      	ldrb	r1, [r4, #10]
     64e:	7b24      	ldrb	r4, [r4, #12]
     650:	021b      	lsls	r3, r3, #8
     652:	430b      	orrs	r3, r1
     654:	0424      	lsls	r4, r4, #16
     656:	001a      	movs	r2, r3
     658:	0023      	movs	r3, r4
     65a:	7b44      	ldrb	r4, [r0, #13]
     65c:	7b85      	ldrb	r5, [r0, #14]
     65e:	4313      	orrs	r3, r2
     660:	0624      	lsls	r4, r4, #24
     662:	431c      	orrs	r4, r3
     664:	0022      	movs	r2, r4
     666:	002b      	movs	r3, r5
     668:	9404      	str	r4, [sp, #16]
     66a:	0031      	movs	r1, r6
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <readMS5803Coefficients+0xc8>)
     66e:	9803      	ldr	r0, [sp, #12]
     670:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     672:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     674:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     676:	9a04      	ldr	r2, [sp, #16]
     678:	9803      	ldr	r0, [sp, #12]
     67a:	0031      	movs	r1, r6
     67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <readMS5803Coefficients+0xc8>)
     67e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	2280      	movs	r2, #128	; 0x80
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <readMS5803Coefficients+0xc0>)
     684:	0212      	lsls	r2, r2, #8
     686:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     688:	9b05      	ldr	r3, [sp, #20]
     68a:	021d      	lsls	r5, r3, #8
     68c:	9b02      	ldr	r3, [sp, #8]
     68e:	4328      	orrs	r0, r5
     690:	8018      	strh	r0, [r3, #0]
     692:	1cbb      	adds	r3, r7, #2
     694:	b2df      	uxtb	r7, r3
     696:	9b02      	ldr	r3, [sp, #8]
     698:	3302      	adds	r3, #2
     69a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     69c:	2fae      	cmp	r7, #174	; 0xae
     69e:	d1a9      	bne.n	5f4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6a0:	b007      	add	sp, #28
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	00000f25 	.word	0x00000f25
     6a8:	00006490 	.word	0x00006490
     6ac:	41004400 	.word	0x41004400
     6b0:	00000c7d 	.word	0x00000c7d
     6b4:	00000ce9 	.word	0x00000ce9

000006b8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6bc:	231e      	movs	r3, #30
     6be:	491a      	ldr	r1, [pc, #104]	; (728 <initMS5803Barometer+0x70>)
     6c0:	4d1a      	ldr	r5, [pc, #104]	; (72c <initMS5803Barometer+0x74>)
     6c2:	0236      	lsls	r6, r6, #8
     6c4:	616e      	str	r6, [r5, #20]
     6c6:	9300      	str	r3, [sp, #0]
     6c8:	784b      	ldrb	r3, [r1, #1]
     6ca:	780a      	ldrb	r2, [r1, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	4313      	orrs	r3, r2
     6d0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6d2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d4:	0412      	lsls	r2, r2, #16
     6d6:	0018      	movs	r0, r3
     6d8:	0013      	movs	r3, r2
     6da:	78ca      	ldrb	r2, [r1, #3]
     6dc:	4303      	orrs	r3, r0
     6de:	0612      	lsls	r2, r2, #24
     6e0:	1d4f      	adds	r7, r1, #5
     6e2:	431a      	orrs	r2, r3
     6e4:	7948      	ldrb	r0, [r1, #5]
     6e6:	790b      	ldrb	r3, [r1, #4]
     6e8:	7989      	ldrb	r1, [r1, #6]
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	4301      	orrs	r1, r0
     6ee:	78b8      	ldrb	r0, [r7, #2]
     6f0:	0400      	lsls	r0, r0, #16
     6f2:	4301      	orrs	r1, r0
     6f4:	78f8      	ldrb	r0, [r7, #3]
     6f6:	0600      	lsls	r0, r0, #24
     6f8:	4308      	orrs	r0, r1
     6fa:	7939      	ldrb	r1, [r7, #4]
     6fc:	4f0c      	ldr	r7, [pc, #48]	; (730 <initMS5803Barometer+0x78>)
     6fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     700:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     702:	20c8      	movs	r0, #200	; 0xc8
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <initMS5803Barometer+0x7c>)
     706:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     708:	0020      	movs	r0, r4
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <initMS5803Barometer+0x80>)
     70c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     70e:	23fa      	movs	r3, #250	; 0xfa
     710:	011b      	lsls	r3, r3, #4
     712:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <initMS5803Barometer+0x84>)
     716:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <initMS5803Barometer+0x88>)
     71a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     71c:	4b09      	ldr	r3, [pc, #36]	; (744 <initMS5803Barometer+0x8c>)
     71e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     720:	23fa      	movs	r3, #250	; 0xfa
     722:	00db      	lsls	r3, r3, #3
     724:	6163      	str	r3, [r4, #20]




}
     726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     728:	00006490 	.word	0x00006490
     72c:	41004400 	.word	0x41004400
     730:	00000c7d 	.word	0x00000c7d
     734:	00000f55 	.word	0x00000f55
     738:	000005ed 	.word	0x000005ed
     73c:	00002710 	.word	0x00002710
     740:	0041c9fe 	.word	0x0041c9fe
     744:	007ffae4 	.word	0x007ffae4

00000748 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     748:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     74a:	4bbf      	ldr	r3, [pc, #764]	; (a48 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74c:	b085      	sub	sp, #20
    SystemInit();
     74e:	4798      	blx	r3
    GclkInit();
     750:	4bbe      	ldr	r3, [pc, #760]	; (a4c <init+0x304>)
     752:	4798      	blx	r3
    RtcInit();
     754:	4bbe      	ldr	r3, [pc, #760]	; (a50 <init+0x308>)
     756:	4798      	blx	r3
    delayInit();
     758:	4bbe      	ldr	r3, [pc, #760]	; (a54 <init+0x30c>)
     75a:	4798      	blx	r3
    adcInit();
     75c:	4bbe      	ldr	r3, [pc, #760]	; (a58 <init+0x310>)
     75e:	4798      	blx	r3
    dmaInit();
     760:	4bbe      	ldr	r3, [pc, #760]	; (a5c <init+0x314>)
     762:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     764:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     766:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     768:	4bbd      	ldr	r3, [pc, #756]	; (a60 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     76c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76e:	5858      	ldr	r0, [r3, r1]
     770:	4abc      	ldr	r2, [pc, #752]	; (a64 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	2401      	movs	r4, #1
     774:	4002      	ands	r2, r0
     776:	505a      	str	r2, [r3, r1]
     778:	4bbb      	ldr	r3, [pc, #748]	; (a68 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     77a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77c:	0019      	movs	r1, r3
     77e:	3154      	adds	r1, #84	; 0x54
     780:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     782:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	43a2      	bics	r2, r4
     786:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2280      	movs	r2, #128	; 0x80
     78a:	0352      	lsls	r2, r2, #13
     78c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     78e:	220f      	movs	r2, #15
     790:	3033      	adds	r0, #51	; 0x33
     792:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     794:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     796:	4391      	bics	r1, r2
     798:	4321      	orrs	r1, r4
     79a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	7cc1      	ldrb	r1, [r0, #19]
     79e:	36c3      	adds	r6, #195	; 0xc3
     7a0:	4321      	orrs	r1, r4
     7a2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7a4:	0019      	movs	r1, r3
     7a6:	31b1      	adds	r1, #177	; 0xb1
     7a8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ac:	4010      	ands	r0, r2
     7ae:	4328      	orrs	r0, r5
     7b0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b6:	4320      	orrs	r0, r4
     7b8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ba:	7808      	ldrb	r0, [r1, #0]
     7bc:	4010      	ands	r0, r2
     7be:	4328      	orrs	r0, r5
     7c0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7830      	ldrb	r0, [r6, #0]
     7c4:	4320      	orrs	r0, r4
     7c6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	7d30      	ldrb	r0, [r6, #20]
     7ca:	43a0      	bics	r0, r4
     7cc:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ce:	2080      	movs	r0, #128	; 0x80
     7d0:	0400      	lsls	r0, r0, #16
     7d2:	9703      	str	r7, [sp, #12]
     7d4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7d6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7d8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7da:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7dc:	4390      	bics	r0, r2
     7de:	4320      	orrs	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	20c2      	movs	r0, #194	; 0xc2
     7e4:	4684      	mov	ip, r0
     7e6:	449c      	add	ip, r3
     7e8:	4660      	mov	r0, ip
     7ea:	4667      	mov	r7, ip
     7ec:	7800      	ldrb	r0, [r0, #0]
     7ee:	4320      	orrs	r0, r4
     7f0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f2:	7808      	ldrb	r0, [r1, #0]
     7f4:	4390      	bics	r0, r2
     7f6:	4320      	orrs	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     806:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	43a1      	bics	r1, r4
     80a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	9803      	ldr	r0, [sp, #12]
     810:	03c9      	lsls	r1, r1, #15
     812:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     814:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     816:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     818:	3031      	adds	r0, #49	; 0x31
     81a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     81e:	4011      	ands	r1, r2
     820:	430d      	orrs	r5, r1
     822:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	001d      	movs	r5, r3
     826:	3543      	adds	r5, #67	; 0x43
     828:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     82a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	4321      	orrs	r1, r4
     82e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	7da9      	ldrb	r1, [r5, #22]
     832:	3505      	adds	r5, #5
     834:	43a1      	bics	r1, r4
     836:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0489      	lsls	r1, r1, #18
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     840:	7801      	ldrb	r1, [r0, #0]
     842:	4391      	bics	r1, r2
     844:	4321      	orrs	r1, r4
     846:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     848:	7c41      	ldrb	r1, [r0, #17]
     84a:	3011      	adds	r0, #17
     84c:	4321      	orrs	r1, r4
     84e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7d81      	ldrb	r1, [r0, #22]
     852:	43a1      	bics	r1, r4
     854:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     856:	2180      	movs	r1, #128	; 0x80
     858:	0449      	lsls	r1, r1, #17
     85a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     85e:	7829      	ldrb	r1, [r5, #0]
     860:	43a1      	bics	r1, r4
     862:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     864:	2180      	movs	r1, #128	; 0x80
     866:	0049      	lsls	r1, r1, #1
     868:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	7831      	ldrb	r1, [r6, #0]
     86c:	43a1      	bics	r1, r4
     86e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2180      	movs	r1, #128	; 0x80
     872:	0089      	lsls	r1, r1, #2
     874:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     876:	0019      	movs	r1, r3
     878:	314b      	adds	r1, #75	; 0x4b
     87a:	7808      	ldrb	r0, [r1, #0]
     87c:	43a0      	bics	r0, r4
     87e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     880:	7808      	ldrb	r0, [r1, #0]
     882:	4338      	orrs	r0, r7
     884:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     886:	2080      	movs	r0, #128	; 0x80
     888:	0100      	lsls	r0, r0, #4
     88a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88c:	4877      	ldr	r0, [pc, #476]	; (a6c <init+0x324>)
     88e:	371e      	adds	r7, #30
     890:	7800      	ldrb	r0, [r0, #0]
     892:	4010      	ands	r0, r2
     894:	4338      	orrs	r0, r7
     896:	4f75      	ldr	r7, [pc, #468]	; (a6c <init+0x324>)
     898:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     89c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89e:	4320      	orrs	r0, r4
     8a0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a2:	0018      	movs	r0, r3
     8a4:	3034      	adds	r0, #52	; 0x34
     8a6:	7801      	ldrb	r1, [r0, #0]
     8a8:	4011      	ands	r1, r2
     8aa:	4339      	orrs	r1, r7
     8ac:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ae:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8b0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b2:	4321      	orrs	r1, r4
     8b4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	4666      	mov	r6, ip
     8b8:	7801      	ldrb	r1, [r0, #0]
     8ba:	4391      	bics	r1, r2
     8bc:	4331      	orrs	r1, r6
     8be:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c4:	4321      	orrs	r1, r4
     8c6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7801      	ldrb	r1, [r0, #0]
     8ca:	001e      	movs	r6, r3
     8cc:	43a1      	bics	r1, r4
     8ce:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d0:	2180      	movs	r1, #128	; 0x80
     8d2:	9803      	ldr	r0, [sp, #12]
     8d4:	00c9      	lsls	r1, r1, #3
     8d6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8d8:	0018      	movs	r0, r3
     8da:	3098      	adds	r0, #152	; 0x98
     8dc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	78a8      	ldrb	r0, [r5, #2]
     8e0:	3651      	adds	r6, #81	; 0x51
     8e2:	43a0      	bics	r0, r4
     8e4:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8e8:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	7a29      	ldrb	r1, [r5, #8]
     8ec:	43a1      	bics	r1, r4
     8ee:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0249      	lsls	r1, r1, #9
     8f4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f6:	7831      	ldrb	r1, [r6, #0]
     8f8:	43a1      	bics	r1, r4
     8fa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	0289      	lsls	r1, r1, #10
     900:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	0019      	movs	r1, r3
     904:	3153      	adds	r1, #83	; 0x53
     906:	7808      	ldrb	r0, [r1, #0]
     908:	43a0      	bics	r0, r4
     90a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90c:	7808      	ldrb	r0, [r1, #0]
     90e:	4338      	orrs	r0, r7
     910:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     914:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     916:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     918:	0300      	lsls	r0, r0, #12
     91a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     91c:	9703      	str	r7, [sp, #12]
     91e:	7838      	ldrb	r0, [r7, #0]
     920:	2720      	movs	r7, #32
     922:	4010      	ands	r0, r2
     924:	4338      	orrs	r0, r7
     926:	9f03      	ldr	r7, [sp, #12]
     928:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     92c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	4320      	orrs	r0, r4
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	0018      	movs	r0, r3
     934:	3038      	adds	r0, #56	; 0x38
     936:	7801      	ldrb	r1, [r0, #0]
     938:	4011      	ands	r1, r2
     93a:	4339      	orrs	r1, r7
     93c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     93e:	7831      	ldrb	r1, [r6, #0]
     940:	4321      	orrs	r1, r4
     942:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     944:	4666      	mov	r6, ip
     946:	7801      	ldrb	r1, [r0, #0]
     948:	4391      	bics	r1, r2
     94a:	4331      	orrs	r1, r6
     94c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     950:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     952:	4321      	orrs	r1, r4
     954:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     956:	7981      	ldrb	r1, [r0, #6]
     958:	43a1      	bics	r1, r4
     95a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     95c:	2180      	movs	r1, #128	; 0x80
     95e:	02c9      	lsls	r1, r1, #11
     960:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     962:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     964:	7801      	ldrb	r1, [r0, #0]
     966:	43a1      	bics	r1, r4
     968:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     96a:	2180      	movs	r1, #128	; 0x80
     96c:	0149      	lsls	r1, r1, #5
     96e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	7881      	ldrb	r1, [r0, #2]
     972:	43a1      	bics	r1, r4
     974:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     976:	2180      	movs	r1, #128	; 0x80
     978:	01c9      	lsls	r1, r1, #7
     97a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     97c:	0019      	movs	r1, r3
     97e:	314d      	adds	r1, #77	; 0x4d
     980:	7808      	ldrb	r0, [r1, #0]
     982:	43a0      	bics	r0, r4
     984:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     986:	7808      	ldrb	r0, [r1, #0]
     988:	4330      	orrs	r0, r6
     98a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     98c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     98e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     990:	0189      	lsls	r1, r1, #6
     992:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	304f      	adds	r0, #79	; 0x4f
     996:	7801      	ldrb	r1, [r0, #0]
     998:	43a1      	bics	r1, r4
     99a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99c:	2180      	movs	r1, #128	; 0x80
     99e:	0209      	lsls	r1, r1, #8
     9a0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a4:	0019      	movs	r1, r3
     9a6:	3155      	adds	r1, #85	; 0x55
     9a8:	7808      	ldrb	r0, [r1, #0]
     9aa:	43a0      	bics	r0, r4
     9ac:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ae:	2080      	movs	r0, #128	; 0x80
     9b0:	0380      	lsls	r0, r0, #14
     9b2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9b4:	2040      	movs	r0, #64	; 0x40
     9b6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b8:	7848      	ldrb	r0, [r1, #1]
     9ba:	43a0      	bics	r0, r4
     9bc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9be:	2080      	movs	r0, #128	; 0x80
     9c0:	03c0      	lsls	r0, r0, #15
     9c2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9c4:	0018      	movs	r0, r3
     9c6:	303b      	adds	r0, #59	; 0x3b
     9c8:	7805      	ldrb	r5, [r0, #0]
     9ca:	4395      	bics	r5, r2
     9cc:	4335      	orrs	r5, r6
     9ce:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9d0:	784d      	ldrb	r5, [r1, #1]
     9d2:	4325      	orrs	r5, r4
     9d4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d6:	788d      	ldrb	r5, [r1, #2]
     9d8:	43a5      	bics	r5, r4
     9da:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9dc:	788d      	ldrb	r5, [r1, #2]
     9de:	4335      	orrs	r5, r6
     9e0:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9e2:	2580      	movs	r5, #128	; 0x80
     9e4:	042d      	lsls	r5, r5, #16
     9e6:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9e8:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9ea:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     9ec:	4e20      	ldr	r6, [pc, #128]	; (a70 <init+0x328>)
     9ee:	401a      	ands	r2, r3
     9f0:	433a      	orrs	r2, r7
     9f2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f4:	788b      	ldrb	r3, [r1, #2]
     9f6:	2204      	movs	r2, #4
     9f8:	4323      	orrs	r3, r4
     9fa:	708b      	strb	r3, [r1, #2]
     9fc:	2000      	movs	r0, #0
     9fe:	2103      	movs	r1, #3
     a00:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a02:	002b      	movs	r3, r5
     a04:	002a      	movs	r2, r5
     a06:	0028      	movs	r0, r5
     a08:	4f1a      	ldr	r7, [pc, #104]	; (a74 <init+0x32c>)
     a0a:	9501      	str	r5, [sp, #4]
     a0c:	9500      	str	r5, [sp, #0]
     a0e:	2103      	movs	r1, #3
     a10:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a12:	0020      	movs	r0, r4
     a14:	2204      	movs	r2, #4
     a16:	2103      	movs	r1, #3
     a18:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a1a:	002b      	movs	r3, r5
     a1c:	002a      	movs	r2, r5
     a1e:	0020      	movs	r0, r4
     a20:	9501      	str	r5, [sp, #4]
     a22:	9500      	str	r5, [sp, #0]
     a24:	2103      	movs	r1, #3
     a26:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a28:	2208      	movs	r2, #8
     a2a:	2104      	movs	r1, #4
     a2c:	2003      	movs	r0, #3
     a2e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     a30:	0021      	movs	r1, r4
     a32:	002a      	movs	r2, r5
     a34:	2003      	movs	r0, #3
     a36:	4b10      	ldr	r3, [pc, #64]	; (a78 <init+0x330>)
     a38:	4c10      	ldr	r4, [pc, #64]	; (a7c <init+0x334>)
     a3a:	47a0      	blx	r4

    TC4Init();
     a3c:	4b10      	ldr	r3, [pc, #64]	; (a80 <init+0x338>)
     a3e:	4798      	blx	r3
    TC5Init();
     a40:	4b10      	ldr	r3, [pc, #64]	; (a84 <init+0x33c>)
     a42:	4798      	blx	r3
}
     a44:	b005      	add	sp, #20
     a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a48:	000001d5 	.word	0x000001d5
     a4c:	00000db1 	.word	0x00000db1
     a50:	00000e39 	.word	0x00000e39
     a54:	00000f05 	.word	0x00000f05
     a58:	00000b99 	.word	0x00000b99
     a5c:	000010a5 	.word	0x000010a5
     a60:	e000e100 	.word	0xe000e100
     a64:	ff00ffff 	.word	0xff00ffff
     a68:	41004400 	.word	0x41004400
     a6c:	41004435 	.word	0x41004435
     a70:	000025e1 	.word	0x000025e1
     a74:	00002645 	.word	0x00002645
     a78:	0000f2e4 	.word	0x0000f2e4
     a7c:	000026a9 	.word	0x000026a9
     a80:	00000fd5 	.word	0x00000fd5
     a84:	0000103d 	.word	0x0000103d

00000a88 <main>:


int main(void) {
     a88:	b510      	push	{r4, lr}
     a8a:	4c10      	ldr	r4, [pc, #64]	; (acc <main+0x44>)

    init();
     a8c:	4b10      	ldr	r3, [pc, #64]	; (ad0 <main+0x48>)
    TC4Init();
    TC5Init();
}


int main(void) {
     a8e:	44a5      	add	sp, r4

    init();
     a90:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a92:	2400      	movs	r4, #0
     a94:	466b      	mov	r3, sp

    initMS5803Barometer(&my_altimeter.myBarometer);
     a96:	a802      	add	r0, sp, #8
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a98:	701c      	strb	r4, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <main+0x4c>)
     a9c:	4798      	blx	r3
    IMUinit();
     a9e:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <main+0x50>)
     aa0:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     aa2:	2384      	movs	r3, #132	; 0x84
     aa4:	466a      	mov	r2, sp
     aa6:	009b      	lsls	r3, r3, #2
     aa8:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     aaa:	4b0c      	ldr	r3, [pc, #48]	; (adc <main+0x54>)
     aac:	54d4      	strb	r4, [r2, r3]
	


    while (1) {

        if (takeSample()) {
     aae:	4b0c      	ldr	r3, [pc, #48]	; (ae0 <main+0x58>)
     ab0:	4798      	blx	r3
     ab2:	2800      	cmp	r0, #0
     ab4:	d0fb      	beq.n	aae <main+0x26>
            sampleTick(&my_altimeter);
     ab6:	4668      	mov	r0, sp
     ab8:	4b0a      	ldr	r3, [pc, #40]	; (ae4 <main+0x5c>)
     aba:	4798      	blx	r3
            flight(&my_altimeter);
     abc:	4668      	mov	r0, sp
     abe:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <main+0x60>)
     ac0:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     ac2:	4668      	mov	r0, sp
     ac4:	4b09      	ldr	r3, [pc, #36]	; (aec <main+0x64>)
     ac6:	4798      	blx	r3
     ac8:	e7f1      	b.n	aae <main+0x26>
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	fffffcd0 	.word	0xfffffcd0
     ad0:	00000749 	.word	0x00000749
     ad4:	000006b9 	.word	0x000006b9
     ad8:	00000af1 	.word	0x00000af1
     adc:	00000311 	.word	0x00000311
     ae0:	000021d1 	.word	0x000021d1
     ae4:	000021e9 	.word	0x000021e9
     ae8:	00001105 	.word	0x00001105
     aec:	00001c1d 	.word	0x00001c1d

00000af0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     af0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     af2:	4c08      	ldr	r4, [pc, #32]	; (b14 <IMUinit+0x24>)
     af4:	2580      	movs	r5, #128	; 0x80
     af6:	0023      	movs	r3, r4
     af8:	00ed      	lsls	r5, r5, #3
     afa:	3394      	adds	r3, #148	; 0x94
     afc:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     afe:	4e06      	ldr	r6, [pc, #24]	; (b18 <IMUinit+0x28>)
     b00:	210f      	movs	r1, #15
     b02:	2000      	movs	r0, #0
     b04:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b06:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b08:	210c      	movs	r1, #12
     b0a:	2000      	movs	r0, #0
     b0c:	47b0      	blx	r6
     b0e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	41004400 	.word	0x41004400
     b18:	000026ed 	.word	0x000026ed

00000b1c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable(){
     b1c:	b510      	push	{r4, lr}

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b1e:	4b09      	ldr	r3, [pc, #36]	; (b44 <USARTconnectionAvaliable+0x28>)
     b20:	7e1c      	ldrb	r4, [r3, #24]
     b22:	0764      	lsls	r4, r4, #29
     b24:	0fe4      	lsrs	r4, r4, #31
     b26:	2c01      	cmp	r4, #1
     b28:	d001      	beq.n	b2e <USARTconnectionAvaliable+0x12>
			}
			else{
				return false;
			}
	}
		return false;
     b2a:	2000      	movs	r0, #0
     b2c:	e009      	b.n	b42 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable(){

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
		u8_t connectAttempt = usartDataIn(USART3);
     b2e:	2003      	movs	r0, #3
     b30:	4b05      	ldr	r3, [pc, #20]	; (b48 <USARTconnectionAvaliable+0x2c>)
     b32:	4798      	blx	r3
     b34:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     b36:	2948      	cmp	r1, #72	; 0x48
     b38:	d1f7      	bne.n	b2a <USARTconnectionAvaliable+0xe>
				usartDataOut(USART3, 'H');
     b3a:	2003      	movs	r0, #3
     b3c:	4b03      	ldr	r3, [pc, #12]	; (b4c <USARTconnectionAvaliable+0x30>)
     b3e:	4798      	blx	r3
				return true;
     b40:	0020      	movs	r0, r4
			else{
				return false;
			}
	}
		return false;
  }
     b42:	bd10      	pop	{r4, pc}
     b44:	42001400 	.word	0x42001400
     b48:	0000271d 	.word	0x0000271d
     b4c:	00002705 	.word	0x00002705

00000b50 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b50:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b52:	2780      	movs	r7, #128	; 0x80
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b54:	0005      	movs	r5, r0
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     b56:	2400      	movs	r4, #0
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b58:	1a09      	subs	r1, r1, r0
     b5a:	0a09      	lsrs	r1, r1, #8
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     b5c:	b0c3      	sub	sp, #268	; 0x10c
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b5e:	b28b      	uxth	r3, r1
     b60:	9301      	str	r3, [sp, #4]
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b62:	007f      	lsls	r7, r7, #1
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     b64:	a902      	add	r1, sp, #8
     b66:	0028      	movs	r0, r5
     b68:	4b09      	ldr	r3, [pc, #36]	; (b90 <sendTheasePagesToComputer+0x40>)
     b6a:	4798      	blx	r3
     b6c:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
     b6e:	ab02      	add	r3, sp, #8
     b70:	5d99      	ldrb	r1, [r3, r6]
     b72:	2003      	movs	r0, #3
     b74:	4b07      	ldr	r3, [pc, #28]	; (b94 <sendTheasePagesToComputer+0x44>)
     b76:	3601      	adds	r6, #1
     b78:	4798      	blx	r3
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b7a:	42be      	cmp	r6, r7
     b7c:	d1f7      	bne.n	b6e <sendTheasePagesToComputer+0x1e>
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     b7e:	3401      	adds	r4, #1
     b80:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     b82:	3501      	adds	r5, #1
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     b84:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     b86:	35ff      	adds	r5, #255	; 0xff
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     b88:	42a3      	cmp	r3, r4
     b8a:	d2eb      	bcs.n	b64 <sendTheasePagesToComputer+0x14>
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
 }
     b8c:	b043      	add	sp, #268	; 0x10c
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000003b1 	.word	0x000003b1
     b94:	00002705 	.word	0x00002705

00000b98 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b98:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b9a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b9c:	4a10      	ldr	r2, [pc, #64]	; (be0 <adcInit+0x48>)
     b9e:	0249      	lsls	r1, r1, #9
     ba0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba2:	4810      	ldr	r0, [pc, #64]	; (be4 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ba4:	430b      	orrs	r3, r1
     ba6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ba8:	23e0      	movs	r3, #224	; 0xe0
     baa:	490f      	ldr	r1, [pc, #60]	; (be8 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bac:	4a0f      	ldr	r2, [pc, #60]	; (bec <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bae:	00db      	lsls	r3, r3, #3
     bb0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bb2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bb4:	4a0e      	ldr	r2, [pc, #56]	; (bf0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bb6:	6812      	ldr	r2, [r2, #0]
     bb8:	0150      	lsls	r0, r2, #5
     bba:	4018      	ands	r0, r3
     bbc:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <adcInit+0x5c>)
     bbe:	0154      	lsls	r4, r2, #5
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	0ed3      	lsrs	r3, r2, #27
     bc4:	4323      	orrs	r3, r4
     bc6:	b2da      	uxtb	r2, r3
     bc8:	0003      	movs	r3, r0
     bca:	4313      	orrs	r3, r2
     bcc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     bce:	2302      	movs	r3, #2
     bd0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bd2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bd4:	7e4b      	ldrb	r3, [r1, #25]
     bd6:	b25b      	sxtb	r3, r3
     bd8:	2b00      	cmp	r3, #0
     bda:	dbfb      	blt.n	bd4 <adcInit+0x3c>
}
     bdc:	bd10      	pop	{r4, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	40000400 	.word	0x40000400
     be4:	0000401e 	.word	0x0000401e
     be8:	42004000 	.word	0x42004000
     bec:	40000c00 	.word	0x40000c00
     bf0:	00806024 	.word	0x00806024
     bf4:	00806020 	.word	0x00806020

00000bf8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bf8:	2202      	movs	r2, #2
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <adcSample+0x18>)
     bfc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bfe:	3a01      	subs	r2, #1
     c00:	7e19      	ldrb	r1, [r3, #24]
     c02:	4211      	tst	r1, r2
     c04:	d0fc      	beq.n	c00 <adcSample+0x8>
    return ADC->RESULT.reg;
     c06:	4b02      	ldr	r3, [pc, #8]	; (c10 <adcSample+0x18>)
     c08:	8b58      	ldrh	r0, [r3, #26]
     c0a:	b280      	uxth	r0, r0
}
     c0c:	4770      	bx	lr
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	42004000 	.word	0x42004000

00000c14 <adc_read>:


u16_t adc_read(Pin p) {
     c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c16:	2501      	movs	r5, #1
     c18:	0c02      	lsrs	r2, r0, #16
     c1a:	b2d4      	uxtb	r4, r2
     c1c:	9000      	str	r0, [sp, #0]
     c1e:	0e00      	lsrs	r0, r0, #24
     c20:	9101      	str	r1, [sp, #4]
     c22:	0842      	lsrs	r2, r0, #1
     c24:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c26:	4911      	ldr	r1, [pc, #68]	; (c6c <adc_read+0x58>)
     c28:	18d2      	adds	r2, r2, r3
     c2a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c2c:	4228      	tst	r0, r5
     c2e:	d005      	beq.n	c3c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c30:	210f      	movs	r1, #15
     c32:	7814      	ldrb	r4, [r2, #0]
     c34:	4021      	ands	r1, r4
     c36:	2410      	movs	r4, #16
     c38:	4321      	orrs	r1, r4
     c3a:	e003      	b.n	c44 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c3c:	240f      	movs	r4, #15
     c3e:	7811      	ldrb	r1, [r2, #0]
     c40:	43a1      	bics	r1, r4
     c42:	4329      	orrs	r1, r5
     c44:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c46:	2101      	movs	r1, #1
     c48:	4a09      	ldr	r2, [pc, #36]	; (c70 <adc_read+0x5c>)
     c4a:	18c3      	adds	r3, r0, r3
     c4c:	189b      	adds	r3, r3, r2
     c4e:	781a      	ldrb	r2, [r3, #0]
     c50:	430a      	orrs	r2, r1
     c52:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c54:	466b      	mov	r3, sp
     c56:	791a      	ldrb	r2, [r3, #4]
     c58:	231f      	movs	r3, #31
     c5a:	4013      	ands	r3, r2
     c5c:	22c0      	movs	r2, #192	; 0xc0
     c5e:	0152      	lsls	r2, r2, #5
     c60:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c62:	4a04      	ldr	r2, [pc, #16]	; (c74 <adc_read+0x60>)
     c64:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c66:	4b04      	ldr	r3, [pc, #16]	; (c78 <adc_read+0x64>)
     c68:	4798      	blx	r3
     c6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c6c:	41004430 	.word	0x41004430
     c70:	41004440 	.word	0x41004440
     c74:	42004000 	.word	0x42004000
     c78:	00000bf9 	.word	0x00000bf9

00000c7c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c7c:	0c01      	lsrs	r1, r0, #16
     c7e:	0c13      	lsrs	r3, r2, #16
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	b2cd      	uxtb	r5, r1
     c84:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c86:	2301      	movs	r3, #1
     c88:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c8a:	0e12      	lsrs	r2, r2, #24
     c8c:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8e:	0e00      	lsrs	r0, r0, #24
     c90:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c92:	001a      	movs	r2, r3
     c94:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c96:	0030      	movs	r0, r6
     c98:	4e11      	ldr	r6, [pc, #68]	; (ce0 <byteOut+0x64>)
     c9a:	01c9      	lsls	r1, r1, #7
     c9c:	b087      	sub	sp, #28
     c9e:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca0:	4e10      	ldr	r6, [pc, #64]	; (ce4 <byteOut+0x68>)
     ca2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca6:	19ae      	adds	r6, r5, r6
     ca8:	7824      	ldrb	r4, [r4, #0]
     caa:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cac:	4e0c      	ldr	r6, [pc, #48]	; (ce0 <byteOut+0x64>)
     cae:	46b4      	mov	ip, r6
     cb0:	44ac      	add	ip, r5
     cb2:	4666      	mov	r6, ip
     cb4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cb6:	b266      	sxtb	r6, r4
     cb8:	2e00      	cmp	r6, #0
     cba:	da05      	bge.n	cc8 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cbc:	4e09      	ldr	r6, [pc, #36]	; (ce4 <byteOut+0x68>)
     cbe:	46b4      	mov	ip, r6
     cc0:	448c      	add	ip, r1
     cc2:	4666      	mov	r6, ip
     cc4:	6032      	str	r2, [r6, #0]
     cc6:	e000      	b.n	cca <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc8:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cca:	9e01      	ldr	r6, [sp, #4]
     ccc:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     cce:	0064      	lsls	r4, r4, #1
     cd0:	b2db      	uxtb	r3, r3
     cd2:	6030      	str	r0, [r6, #0]
     cd4:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     cd6:	2b00      	cmp	r3, #0
     cd8:	d1e8      	bne.n	cac <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     cda:	b007      	add	sp, #28
     cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	41004414 	.word	0x41004414
     ce4:	41004418 	.word	0x41004418

00000ce8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cea:	2501      	movs	r5, #1
     cec:	b085      	sub	sp, #20
     cee:	9103      	str	r1, [sp, #12]
     cf0:	0011      	movs	r1, r2
     cf2:	0c06      	lsrs	r6, r0, #16
     cf4:	9301      	str	r3, [sp, #4]
     cf6:	b2f3      	uxtb	r3, r6
     cf8:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cfa:	0e09      	lsrs	r1, r1, #24
     cfc:	0c14      	lsrs	r4, r2, #16
     cfe:	9002      	str	r0, [sp, #8]
     d00:	9200      	str	r2, [sp, #0]
     d02:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d04:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d06:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d08:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d0c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0e:	4c0a      	ldr	r4, [pc, #40]	; (d38 <byteIn+0x50>)
     d10:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d12:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d14:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d16:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d18:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d1a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d1c:	0040      	lsls	r0, r0, #1
     d1e:	402c      	ands	r4, r5
     d20:	1e67      	subs	r7, r4, #1
     d22:	41bc      	sbcs	r4, r7
     d24:	3901      	subs	r1, #1
     d26:	4304      	orrs	r4, r0
     d28:	b2c9      	uxtb	r1, r1
     d2a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d2c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d2e:	2900      	cmp	r1, #0
     d30:	d1f2      	bne.n	d18 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d32:	b005      	add	sp, #20
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	41004400 	.word	0x41004400

00000d3c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d3e:	2380      	movs	r3, #128	; 0x80
     d40:	2780      	movs	r7, #128	; 0x80
     d42:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d44:	2500      	movs	r5, #0
     d46:	4c0a      	ldr	r4, [pc, #40]	; (d70 <beep+0x34>)
     d48:	035b      	lsls	r3, r3, #13
     d4a:	61e3      	str	r3, [r4, #28]
     d4c:	03bf      	lsls	r7, r7, #14
     d4e:	42b5      	cmp	r5, r6
     d50:	d006      	beq.n	d60 <beep+0x24>
     d52:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d54:	207a      	movs	r0, #122	; 0x7a
     d56:	4b07      	ldr	r3, [pc, #28]	; (d74 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d58:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d5a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d5c:	b2ad      	uxth	r5, r5
     d5e:	e7f6      	b.n	d4e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d60:	2380      	movs	r3, #128	; 0x80
     d62:	039b      	lsls	r3, r3, #14
     d64:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d66:	2380      	movs	r3, #128	; 0x80
     d68:	035b      	lsls	r3, r3, #13
     d6a:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	41004400 	.word	0x41004400
     d74:	00000f25 	.word	0x00000f25

00000d78 <startupJingle>:

void startupJingle(){
     d78:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d7a:	2696      	movs	r6, #150	; 0x96
     d7c:	0076      	lsls	r6, r6, #1
     d7e:	4d0a      	ldr	r5, [pc, #40]	; (da8 <startupJingle+0x30>)
     d80:	0030      	movs	r0, r6
     d82:	47a8      	blx	r5
    delay_ms(80);
     d84:	4c09      	ldr	r4, [pc, #36]	; (dac <startupJingle+0x34>)
     d86:	2050      	movs	r0, #80	; 0x50
     d88:	47a0      	blx	r4
    beep(300);
     d8a:	0030      	movs	r0, r6
     d8c:	47a8      	blx	r5
    delay_ms(250);
     d8e:	20fa      	movs	r0, #250	; 0xfa
     d90:	47a0      	blx	r4
    beep(300);
     d92:	0030      	movs	r0, r6
     d94:	47a8      	blx	r5
    delay_ms(80);
     d96:	2050      	movs	r0, #80	; 0x50
     d98:	47a0      	blx	r4
    beep(300);
     d9a:	0030      	movs	r0, r6
     d9c:	47a8      	blx	r5
    delay_ms(500);
     d9e:	20fa      	movs	r0, #250	; 0xfa
     da0:	0040      	lsls	r0, r0, #1
     da2:	47a0      	blx	r4
}
     da4:	bd70      	pop	{r4, r5, r6, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00000d3d 	.word	0x00000d3d
     dac:	00000f55 	.word	0x00000f55

00000db0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     db0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     db2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     db4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     db6:	4916      	ldr	r1, [pc, #88]	; (e10 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     db8:	4a16      	ldr	r2, [pc, #88]	; (e14 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dba:	00db      	lsls	r3, r3, #3
     dbc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dbe:	6853      	ldr	r3, [r2, #4]
     dc0:	4303      	orrs	r3, r0
     dc2:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     dc4:	4b14      	ldr	r3, [pc, #80]	; (e18 <GclkInit+0x68>)
     dc6:	681a      	ldr	r2, [r3, #0]
     dc8:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     dca:	2a3f      	cmp	r2, #63	; 0x3f
     dcc:	d100      	bne.n	dd0 <GclkInit+0x20>
        coarse = 0x1f;
     dce:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     dd0:	4b12      	ldr	r3, [pc, #72]	; (e1c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     dd2:	4813      	ldr	r0, [pc, #76]	; (e20 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	059b      	lsls	r3, r3, #22
     dd8:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     dda:	4283      	cmp	r3, r0
     ddc:	d100      	bne.n	de0 <GclkInit+0x30>
        fine = 0x1ff;
     dde:	4b11      	ldr	r3, [pc, #68]	; (e24 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     de0:	4811      	ldr	r0, [pc, #68]	; (e28 <GclkInit+0x78>)
     de2:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     de4:	2010      	movs	r0, #16
     de6:	68cc      	ldr	r4, [r1, #12]
     de8:	4204      	tst	r4, r0
     dea:	d0fc      	beq.n	de6 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     dec:	0292      	lsls	r2, r2, #10
     dee:	4313      	orrs	r3, r2
     df0:	4a07      	ldr	r2, [pc, #28]	; (e10 <GclkInit+0x60>)
     df2:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     df4:	2310      	movs	r3, #16
     df6:	68ca      	ldr	r2, [r1, #12]
     df8:	421a      	tst	r2, r3
     dfa:	d0fc      	beq.n	df6 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     dfc:	4a0b      	ldr	r2, [pc, #44]	; (e2c <GclkInit+0x7c>)
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <GclkInit+0x60>)
     e00:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e02:	2280      	movs	r2, #128	; 0x80
     e04:	4b0a      	ldr	r3, [pc, #40]	; (e30 <GclkInit+0x80>)
     e06:	0052      	lsls	r2, r2, #1
     e08:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e0a:	4a0a      	ldr	r2, [pc, #40]	; (e34 <GclkInit+0x84>)
     e0c:	605a      	str	r2, [r3, #4]
}
     e0e:	bd10      	pop	{r4, pc}
     e10:	40000800 	.word	0x40000800
     e14:	41004000 	.word	0x41004000
     e18:	00806024 	.word	0x00806024
     e1c:	00806028 	.word	0x00806028
     e20:	000003ff 	.word	0x000003ff
     e24:	000001ff 	.word	0x000001ff
     e28:	00000522 	.word	0x00000522
     e2c:	000005a2 	.word	0x000005a2
     e30:	40000c00 	.word	0x40000c00
     e34:	00010700 	.word	0x00010700

00000e38 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e38:	4a1d      	ldr	r2, [pc, #116]	; (eb0 <RtcInit+0x78>)
     e3a:	4b1e      	ldr	r3, [pc, #120]	; (eb4 <RtcInit+0x7c>)
     e3c:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e3e:	2202      	movs	r2, #2
     e40:	68d9      	ldr	r1, [r3, #12]
     e42:	4211      	tst	r1, r2
     e44:	d0fc      	beq.n	e40 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e46:	2281      	movs	r2, #129	; 0x81
     e48:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <RtcInit+0x80>)
     e4a:	0052      	lsls	r2, r2, #1
     e4c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e4e:	4a1b      	ldr	r2, [pc, #108]	; (ebc <RtcInit+0x84>)
     e50:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e52:	785a      	ldrb	r2, [r3, #1]
     e54:	b252      	sxtb	r2, r2
     e56:	2a00      	cmp	r2, #0
     e58:	dbfb      	blt.n	e52 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e5a:	4a19      	ldr	r2, [pc, #100]	; (ec0 <RtcInit+0x88>)
     e5c:	4b16      	ldr	r3, [pc, #88]	; (eb8 <RtcInit+0x80>)
     e5e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e60:	2204      	movs	r2, #4
     e62:	4b18      	ldr	r3, [pc, #96]	; (ec4 <RtcInit+0x8c>)
     e64:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e66:	7a9a      	ldrb	r2, [r3, #10]
     e68:	4916      	ldr	r1, [pc, #88]	; (ec4 <RtcInit+0x8c>)
     e6a:	09d2      	lsrs	r2, r2, #7
     e6c:	d1fb      	bne.n	e66 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e6e:	20a0      	movs	r0, #160	; 0xa0
     e70:	880a      	ldrh	r2, [r1, #0]
     e72:	00c0      	lsls	r0, r0, #3
     e74:	4302      	orrs	r2, r0
     e76:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e78:	7a9a      	ldrb	r2, [r3, #10]
     e7a:	09d2      	lsrs	r2, r2, #7
     e7c:	d1fc      	bne.n	e78 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     e7e:	4912      	ldr	r1, [pc, #72]	; (ec8 <RtcInit+0x90>)
     e80:	4a10      	ldr	r2, [pc, #64]	; (ec4 <RtcInit+0x8c>)
     e82:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e84:	7a99      	ldrb	r1, [r3, #10]
     e86:	4a0f      	ldr	r2, [pc, #60]	; (ec4 <RtcInit+0x8c>)
     e88:	09c9      	lsrs	r1, r1, #7
     e8a:	d1fb      	bne.n	e84 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e8c:	8851      	ldrh	r1, [r2, #2]
     e8e:	480f      	ldr	r0, [pc, #60]	; (ecc <RtcInit+0x94>)
     e90:	4301      	orrs	r1, r0
     e92:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e94:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e96:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e98:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e9a:	8811      	ldrh	r1, [r2, #0]
     e9c:	4301      	orrs	r1, r0
     e9e:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ea0:	7a9a      	ldrb	r2, [r3, #10]
     ea2:	09d2      	lsrs	r2, r2, #7
     ea4:	d1fc      	bne.n	ea0 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <RtcInit+0x98>)
     ea8:	3208      	adds	r2, #8
     eaa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     eac:	4770      	bx	lr
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	0000060e 	.word	0x0000060e
     eb4:	40000800 	.word	0x40000800
     eb8:	40000c00 	.word	0x40000c00
     ebc:	00230002 	.word	0x00230002
     ec0:	00004204 	.word	0x00004204
     ec4:	40001400 	.word	0x40001400
     ec8:	000003e6 	.word	0x000003e6
     ecc:	00004010 	.word	0x00004010
     ed0:	e000e100 	.word	0xe000e100

00000ed4 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ed4:	230f      	movs	r3, #15
     ed6:	4018      	ands	r0, r3
     ed8:	4b08      	ldr	r3, [pc, #32]	; (efc <gclkEnable+0x28>)
     eda:	0212      	lsls	r2, r2, #8
     edc:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ede:	23f8      	movs	r3, #248	; 0xf8
     ee0:	0209      	lsls	r1, r1, #8
     ee2:	015b      	lsls	r3, r3, #5
     ee4:	4019      	ands	r1, r3
     ee6:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     ee8:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eea:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     eec:	4c04      	ldr	r4, [pc, #16]	; (f00 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eee:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ef0:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ef2:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ef4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ef6:	6060      	str	r0, [r4, #4]
}
     ef8:	bd10      	pop	{r4, pc}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	00ffff00 	.word	0x00ffff00
     f00:	40000c00 	.word	0x40000c00

00000f04 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <delayInit+0x14>)
     f06:	4a05      	ldr	r2, [pc, #20]	; (f1c <delayInit+0x18>)
     f08:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f0a:	2230      	movs	r2, #48	; 0x30
     f0c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <delayInit+0x1c>)
     f10:	3a2b      	subs	r2, #43	; 0x2b
     f12:	601a      	str	r2, [r3, #0]
}
     f14:	4770      	bx	lr
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	20000004 	.word	0x20000004
     f1c:	0000bb80 	.word	0x0000bb80
     f20:	e000e010 	.word	0xe000e010

00000f24 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f24:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f26:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f28:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f2a:	4b08      	ldr	r3, [pc, #32]	; (f4c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f2c:	4a08      	ldr	r2, [pc, #32]	; (f50 <delay_us+0x2c>)
     f2e:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f30:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f32:	3801      	subs	r0, #1
     f34:	d308      	bcc.n	f48 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f36:	2b00      	cmp	r3, #0
     f38:	d0fb      	beq.n	f32 <delay_us+0xe>
     f3a:	4e05      	ldr	r6, [pc, #20]	; (f50 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f3c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f3e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f40:	6835      	ldr	r5, [r6, #0]
     f42:	4225      	tst	r5, r4
     f44:	d0fc      	beq.n	f40 <delay_us+0x1c>
     f46:	e7f4      	b.n	f32 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f48:	bd70      	pop	{r4, r5, r6, pc}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	20000004 	.word	0x20000004
     f50:	e000e010 	.word	0xe000e010

00000f54 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f58:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f5a:	4b08      	ldr	r3, [pc, #32]	; (f7c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f5c:	4a08      	ldr	r2, [pc, #32]	; (f80 <delay_ms+0x2c>)
     f5e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f60:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f62:	3801      	subs	r0, #1
     f64:	d308      	bcc.n	f78 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f66:	2b00      	cmp	r3, #0
     f68:	d0fb      	beq.n	f62 <delay_ms+0xe>
     f6a:	4e05      	ldr	r6, [pc, #20]	; (f80 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f6c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f6e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f70:	6835      	ldr	r5, [r6, #0]
     f72:	4225      	tst	r5, r4
     f74:	d0fc      	beq.n	f70 <delay_ms+0x1c>
     f76:	e7f4      	b.n	f62 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f78:	bd70      	pop	{r4, r5, r6, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	20000004 	.word	0x20000004
     f80:	e000e010 	.word	0xe000e010

00000f84 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f84:	21fa      	movs	r1, #250	; 0xfa
     f86:	4a04      	ldr	r2, [pc, #16]	; (f98 <RTC_Handler+0x14>)
     f88:	0089      	lsls	r1, r1, #2
     f8a:	6813      	ldr	r3, [r2, #0]
     f8c:	185b      	adds	r3, r3, r1
     f8e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f90:	22ff      	movs	r2, #255	; 0xff
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <RTC_Handler+0x18>)
     f94:	721a      	strb	r2, [r3, #8]
}
     f96:	4770      	bx	lr
     f98:	200004cc 	.word	0x200004cc
     f9c:	40001400 	.word	0x40001400

00000fa0 <millis>:

uint32_t millis(void) {
     fa0:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     fa2:	f3ef 8110 	mrs	r1, PRIMASK
     fa6:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fa8:	4a08      	ldr	r2, [pc, #32]	; (fcc <millis+0x2c>)
     faa:	4d09      	ldr	r5, [pc, #36]	; (fd0 <millis+0x30>)
     fac:	8a10      	ldrh	r0, [r2, #16]
     fae:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fb0:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fb2:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fb4:	09e4      	lsrs	r4, r4, #7
     fb6:	d004      	beq.n	fc2 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     fb8:	8a13      	ldrh	r3, [r2, #16]
     fba:	22fa      	movs	r2, #250	; 0xfa
     fbc:	6828      	ldr	r0, [r5, #0]
     fbe:	0092      	lsls	r2, r2, #2
     fc0:	1880      	adds	r0, r0, r2
     fc2:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     fc4:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     fc8:	bd30      	pop	{r4, r5, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	40001400 	.word	0x40001400
     fd0:	200004cc 	.word	0x200004cc

00000fd4 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fd4:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     fd6:	4a0d      	ldr	r2, [pc, #52]	; (100c <TC4Init+0x38>)
     fd8:	4b0d      	ldr	r3, [pc, #52]	; (1010 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fda:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     fdc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fde:	4a0d      	ldr	r2, [pc, #52]	; (1014 <TC4Init+0x40>)
     fe0:	6a13      	ldr	r3, [r2, #32]
     fe2:	430b      	orrs	r3, r1
     fe4:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <TC4Init+0x44>)
     fe8:	4a0c      	ldr	r2, [pc, #48]	; (101c <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fea:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fec:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     fee:	2241      	movs	r2, #65	; 0x41
     ff0:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ff2:	3a40      	subs	r2, #64	; 0x40
     ff4:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ff6:	32ff      	adds	r2, #255	; 0xff
     ff8:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ffa:	881a      	ldrh	r2, [r3, #0]
     ffc:	430a      	orrs	r2, r1
     ffe:	801a      	strh	r2, [r3, #0]
    1000:	2280      	movs	r2, #128	; 0x80
    1002:	4b07      	ldr	r3, [pc, #28]	; (1020 <TC4Init+0x4c>)
    1004:	0312      	lsls	r2, r2, #12
    1006:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1008:	4770      	bx	lr
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	0000421c 	.word	0x0000421c
    1010:	40000c00 	.word	0x40000c00
    1014:	40000400 	.word	0x40000400
    1018:	42003000 	.word	0x42003000
    101c:	00000904 	.word	0x00000904
    1020:	e000e100 	.word	0xe000e100

00001024 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1024:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1026:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1028:	4b02      	ldr	r3, [pc, #8]	; (1034 <TC4_Handler+0x10>)
    102a:	739a      	strb	r2, [r3, #14]
    pullSample();
    102c:	4b02      	ldr	r3, [pc, #8]	; (1038 <TC4_Handler+0x14>)
    102e:	4798      	blx	r3
}
    1030:	bd10      	pop	{r4, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	42003000 	.word	0x42003000
    1038:	000021dd 	.word	0x000021dd

0000103c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    103c:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    103e:	4a0d      	ldr	r2, [pc, #52]	; (1074 <TC5Init+0x38>)
    1040:	4b0d      	ldr	r3, [pc, #52]	; (1078 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1042:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1044:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1046:	4a0d      	ldr	r2, [pc, #52]	; (107c <TC5Init+0x40>)
    1048:	6a13      	ldr	r3, [r2, #32]
    104a:	430b      	orrs	r3, r1
    104c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <TC5Init+0x44>)
    1050:	4a0c      	ldr	r2, [pc, #48]	; (1084 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1052:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1054:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1056:	2220      	movs	r2, #32
    1058:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    105a:	3a1f      	subs	r2, #31
    105c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    105e:	32ff      	adds	r2, #255	; 0xff
    1060:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1062:	881a      	ldrh	r2, [r3, #0]
    1064:	430a      	orrs	r2, r1
    1066:	801a      	strh	r2, [r3, #0]
    1068:	2280      	movs	r2, #128	; 0x80
    106a:	4b07      	ldr	r3, [pc, #28]	; (1088 <TC5Init+0x4c>)
    106c:	0352      	lsls	r2, r2, #13
    106e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1070:	4770      	bx	lr
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	0000421c 	.word	0x0000421c
    1078:	40000c00 	.word	0x40000c00
    107c:	40000400 	.word	0x40000400
    1080:	42003400 	.word	0x42003400
    1084:	00000d04 	.word	0x00000d04
    1088:	e000e100 	.word	0xe000e100

0000108c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    108c:	22ff      	movs	r2, #255	; 0xff
    108e:	4b03      	ldr	r3, [pc, #12]	; (109c <TC5_Handler+0x10>)
    1090:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1092:	4b03      	ldr	r3, [pc, #12]	; (10a0 <TC5_Handler+0x14>)
    1094:	3afe      	subs	r2, #254	; 0xfe
    1096:	701a      	strb	r2, [r3, #0]
}
    1098:	4770      	bx	lr
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	42003400 	.word	0x42003400
    10a0:	200004d1 	.word	0x200004d1

000010a4 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10a6:	27c0      	movs	r7, #192	; 0xc0
    10a8:	4d10      	ldr	r5, [pc, #64]	; (10ec <dmaInit+0x48>)
    10aa:	003a      	movs	r2, r7
    10ac:	4e10      	ldr	r6, [pc, #64]	; (10f0 <dmaInit+0x4c>)
    10ae:	0028      	movs	r0, r5
    10b0:	2100      	movs	r1, #0
    10b2:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    10b4:	4c0f      	ldr	r4, [pc, #60]	; (10f4 <dmaInit+0x50>)
    10b6:	003a      	movs	r2, r7
    10b8:	2100      	movs	r1, #0
    10ba:	0020      	movs	r0, r4
    10bc:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    10be:	2120      	movs	r1, #32
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <dmaInit+0x54>)
    10c2:	695a      	ldr	r2, [r3, #20]
    10c4:	430a      	orrs	r2, r1
    10c6:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    10c8:	69da      	ldr	r2, [r3, #28]
    10ca:	3910      	subs	r1, #16
    10cc:	430a      	orrs	r2, r1
    10ce:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <dmaInit+0x58>)
    10d2:	390e      	subs	r1, #14
    10d4:	881a      	ldrh	r2, [r3, #0]
    10d6:	438a      	bics	r2, r1
    10d8:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    10da:	881a      	ldrh	r2, [r3, #0]
    10dc:	3901      	subs	r1, #1
    10de:	430a      	orrs	r2, r1
    10e0:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    10e2:	4a07      	ldr	r2, [pc, #28]	; (1100 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    10e4:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    10e6:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    10e8:	801a      	strh	r2, [r3, #0]
}
    10ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10ec:	200005a0 	.word	0x200005a0
    10f0:	000062d5 	.word	0x000062d5
    10f4:	200004e0 	.word	0x200004e0
    10f8:	40000400 	.word	0x40000400
    10fc:	41004800 	.word	0x41004800
    1100:	00000f02 	.word	0x00000f02

00001104 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1106:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1108:	7800      	ldrb	r0, [r0, #0]
    110a:	280a      	cmp	r0, #10
    110c:	d900      	bls.n	1110 <flight+0xc>
    110e:	e0f6      	b.n	12fe <flight+0x1fa>
    1110:	f002 fca6 	bl	3a60 <__gnu_thumb1_case_uqi>
    1114:	f5a62306 	.word	0xf5a62306
    1118:	f5f5f5f5 	.word	0xf5f5f5f5
    111c:	f5f5      	.short	0xf5f5
    111e:	f0          	.byte	0xf0
    111f:	00          	.byte	0x00
    case flightStatrup:

        beep(400);
    1120:	20c8      	movs	r0, #200	; 0xc8
    1122:	4b77      	ldr	r3, [pc, #476]	; (1300 <flight+0x1fc>)
    1124:	0040      	lsls	r0, r0, #1
    1126:	4798      	blx	r3

        computeKalmanGains(&my_altimeter->myKalmanFilter);
    1128:	0020      	movs	r0, r4
    112a:	4b76      	ldr	r3, [pc, #472]	; (1304 <flight+0x200>)
    112c:	3048      	adds	r0, #72	; 0x48
    112e:	4798      	blx	r3

        my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.accelZ;
    1130:	0023      	movs	r3, r4
    1132:	33d4      	adds	r3, #212	; 0xd4
    1134:	6818      	ldr	r0, [r3, #0]
    1136:	0025      	movs	r5, r4
    1138:	4b73      	ldr	r3, [pc, #460]	; (1308 <flight+0x204>)
    113a:	4798      	blx	r3
    113c:	35b8      	adds	r5, #184	; 0xb8
        my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.altitudefeet;
    113e:	4b73      	ldr	r3, [pc, #460]	; (130c <flight+0x208>)

        beep(400);

        computeKalmanGains(&my_altimeter->myKalmanFilter);

        my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.accelZ;
    1140:	6028      	str	r0, [r5, #0]
    1142:	6069      	str	r1, [r5, #4]
        my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.altitudefeet;
    1144:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1146:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1148:	4798      	blx	r3

        my_altimeter->StartupTick = millis();
    114a:	4b71      	ldr	r3, [pc, #452]	; (1310 <flight+0x20c>)
        beep(400);

        computeKalmanGains(&my_altimeter->myKalmanFilter);

        my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.accelZ;
        my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.altitudefeet;
    114c:	63a0      	str	r0, [r4, #56]	; 0x38

        my_altimeter->StartupTick = millis();
    114e:	4798      	blx	r3
    1150:	23ca      	movs	r3, #202	; 0xca
    1152:	009b      	lsls	r3, r3, #2
    1154:	50e0      	str	r0, [r4, r3]

        my_altimeter->myFlightState = flightIdle;
    1156:	2301      	movs	r3, #1
    1158:	e072      	b.n	1240 <flight+0x13c>
        break;
    case flightIdle:



        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    115a:	0025      	movs	r5, r4
    115c:	35c0      	adds	r5, #192	; 0xc0
    115e:	6828      	ldr	r0, [r5, #0]
    1160:	6869      	ldr	r1, [r5, #4]
    1162:	4a6c      	ldr	r2, [pc, #432]	; (1314 <flight+0x210>)
    1164:	4e6c      	ldr	r6, [pc, #432]	; (1318 <flight+0x214>)
    1166:	9501      	str	r5, [sp, #4]
    1168:	4b6c      	ldr	r3, [pc, #432]	; (131c <flight+0x218>)
    116a:	47b0      	blx	r6
    116c:	0023      	movs	r3, r4
    116e:	33d4      	adds	r3, #212	; 0xd4
    1170:	0006      	movs	r6, r0
    1172:	6818      	ldr	r0, [r3, #0]
    1174:	4b64      	ldr	r3, [pc, #400]	; (1308 <flight+0x204>)
    1176:	000f      	movs	r7, r1
    1178:	4798      	blx	r3
    117a:	4d67      	ldr	r5, [pc, #412]	; (1318 <flight+0x214>)
    117c:	4a65      	ldr	r2, [pc, #404]	; (1314 <flight+0x210>)
    117e:	4b68      	ldr	r3, [pc, #416]	; (1320 <flight+0x21c>)
    1180:	47a8      	blx	r5
    1182:	4d68      	ldr	r5, [pc, #416]	; (1324 <flight+0x220>)
    1184:	0002      	movs	r2, r0
    1186:	000b      	movs	r3, r1
    1188:	0030      	movs	r0, r6
    118a:	0039      	movs	r1, r7
    118c:	47a8      	blx	r5
    118e:	9b01      	ldr	r3, [sp, #4]
    1190:	6018      	str	r0, [r3, #0]
    1192:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    1194:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1196:	4b64      	ldr	r3, [pc, #400]	; (1328 <flight+0x224>)
    1198:	4798      	blx	r3
    119a:	4d5f      	ldr	r5, [pc, #380]	; (1318 <flight+0x214>)
    119c:	2200      	movs	r2, #0
    119e:	4b63      	ldr	r3, [pc, #396]	; (132c <flight+0x228>)
    11a0:	47a8      	blx	r5
    11a2:	2200      	movs	r2, #0
    11a4:	0006      	movs	r6, r0
    11a6:	000f      	movs	r7, r1
    11a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    11aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    11ac:	4b5f      	ldr	r3, [pc, #380]	; (132c <flight+0x228>)
    11ae:	47a8      	blx	r5
    11b0:	4d5c      	ldr	r5, [pc, #368]	; (1324 <flight+0x220>)
    11b2:	0002      	movs	r2, r0
    11b4:	000b      	movs	r3, r1
    11b6:	0030      	movs	r0, r6
    11b8:	0039      	movs	r1, r7
    11ba:	47a8      	blx	r5
    11bc:	4b53      	ldr	r3, [pc, #332]	; (130c <flight+0x208>)
    11be:	4798      	blx	r3
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11c0:	4b59      	ldr	r3, [pc, #356]	; (1328 <flight+0x224>)
    case flightIdle:



        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    11c2:	63e0      	str	r0, [r4, #60]	; 0x3c
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    11c6:	4798      	blx	r3
    11c8:	4d53      	ldr	r5, [pc, #332]	; (1318 <flight+0x214>)
    11ca:	4a52      	ldr	r2, [pc, #328]	; (1314 <flight+0x210>)
    11cc:	4b53      	ldr	r3, [pc, #332]	; (131c <flight+0x218>)
    11ce:	47a8      	blx	r5
    11d0:	4b55      	ldr	r3, [pc, #340]	; (1328 <flight+0x224>)
    11d2:	0006      	movs	r6, r0
    11d4:	69e0      	ldr	r0, [r4, #28]
    11d6:	000f      	movs	r7, r1
    11d8:	4798      	blx	r3
    11da:	4a4e      	ldr	r2, [pc, #312]	; (1314 <flight+0x210>)
    11dc:	4b50      	ldr	r3, [pc, #320]	; (1320 <flight+0x21c>)
    11de:	47a8      	blx	r5
    11e0:	4d50      	ldr	r5, [pc, #320]	; (1324 <flight+0x220>)
    11e2:	0002      	movs	r2, r0
    11e4:	000b      	movs	r3, r1
    11e6:	0030      	movs	r0, r6
    11e8:	0039      	movs	r1, r7
    11ea:	47a8      	blx	r5
    11ec:	4b47      	ldr	r3, [pc, #284]	; (130c <flight+0x208>)
    11ee:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11f0:	0027      	movs	r7, r4



        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11f2:	6460      	str	r0, [r4, #68]	; 0x44

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11f4:	4e46      	ldr	r6, [pc, #280]	; (1310 <flight+0x20c>)
    11f6:	47b0      	blx	r6
    11f8:	37b0      	adds	r7, #176	; 0xb0
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	1ac0      	subs	r0, r0, r3
    11fe:	4b4c      	ldr	r3, [pc, #304]	; (1330 <flight+0x22c>)
    1200:	4298      	cmp	r0, r3
    1202:	d90c      	bls.n	121e <flight+0x11a>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1206:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1208:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    120a:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    120c:	6811      	ldr	r1, [r2, #0]
    120e:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1210:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1212:	0023      	movs	r3, r4
    1214:	33b8      	adds	r3, #184	; 0xb8
    1216:	6019      	str	r1, [r3, #0]
    1218:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    121a:	47b0      	blx	r6
    121c:	6038      	str	r0, [r7, #0]
        }


        if ((millis() - my_altimeter->StartupTick) > 10000) {
    121e:	47b0      	blx	r6
    1220:	23ca      	movs	r3, #202	; 0xca
    1222:	009b      	lsls	r3, r3, #2
    1224:	58e3      	ldr	r3, [r4, r3]
    1226:	1ac0      	subs	r0, r0, r3
    1228:	4b42      	ldr	r3, [pc, #264]	; (1334 <flight+0x230>)
    122a:	4298      	cmp	r0, r3
    122c:	d90a      	bls.n	1244 <flight+0x140>
            findNewFlightStart(my_altimeter);
    122e:	0020      	movs	r0, r4
    1230:	4b41      	ldr	r3, [pc, #260]	; (1338 <flight+0x234>)
    1232:	4798      	blx	r3
            logFlight(my_altimeter);
    1234:	0020      	movs	r0, r4
    1236:	4b41      	ldr	r3, [pc, #260]	; (133c <flight+0x238>)
    1238:	4798      	blx	r3
            startupJingle();
    123a:	4b41      	ldr	r3, [pc, #260]	; (1340 <flight+0x23c>)
    123c:	4798      	blx	r3
            my_altimeter->myFlightState = flightPad;
    123e:	2302      	movs	r3, #2
    1240:	7023      	strb	r3, [r4, #0]
			break;
    1242:	e05c      	b.n	12fe <flight+0x1fa>
        }

        attemptConnection(my_altimeter);
    1244:	0020      	movs	r0, r4
    1246:	4b3f      	ldr	r3, [pc, #252]	; (1344 <flight+0x240>)
    1248:	4798      	blx	r3



        if (my_altimeter->batFloat < 3.5) {
    124a:	23c6      	movs	r3, #198	; 0xc6
    124c:	009b      	lsls	r3, r3, #2
    124e:	58e0      	ldr	r0, [r4, r3]
    1250:	493d      	ldr	r1, [pc, #244]	; (1348 <flight+0x244>)
    1252:	4b3e      	ldr	r3, [pc, #248]	; (134c <flight+0x248>)
    1254:	4798      	blx	r3
    1256:	2800      	cmp	r0, #0
    1258:	d051      	beq.n	12fe <flight+0x1fa>
            my_altimeter->myFlightState = flightTest;
    125a:	230a      	movs	r3, #10
    125c:	7023      	strb	r3, [r4, #0]
    125e:	e02e      	b.n	12be <flight+0x1ba>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
    1260:	4b3b      	ldr	r3, [pc, #236]	; (1350 <flight+0x24c>)
    1262:	781a      	ldrb	r2, [r3, #0]
    1264:	2a00      	cmp	r2, #0
    1266:	d01b      	beq.n	12a0 <flight+0x19c>
            writeLog = false;
    1268:	2500      	movs	r5, #0



            logSensors(my_altimeter);
    126a:	0020      	movs	r0, r4
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
            writeLog = false;
    126c:	701d      	strb	r5, [r3, #0]



            logSensors(my_altimeter);
    126e:	4b39      	ldr	r3, [pc, #228]	; (1354 <flight+0x250>)
    1270:	4798      	blx	r3

            if (my_altimeter->myFlashMemory.pageReady) {
    1272:	4b39      	ldr	r3, [pc, #228]	; (1358 <flight+0x254>)
    1274:	5ce2      	ldrb	r2, [r4, r3]
    1276:	42aa      	cmp	r2, r5
    1278:	d012      	beq.n	12a0 <flight+0x19c>
    127a:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    127c:	54e5      	strb	r5, [r4, r3]
    127e:	4b37      	ldr	r3, [pc, #220]	; (135c <flight+0x258>)
    1280:	0352      	lsls	r2, r2, #13
    1282:	61da      	str	r2, [r3, #28]

                pinToggle(LedPin);
               
			    AT25SFHoldTillReady();
    1284:	4b36      	ldr	r3, [pc, #216]	; (1360 <flight+0x25c>)
    1286:	4798      	blx	r3
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    1288:	0025      	movs	r5, r4
    128a:	0021      	movs	r1, r4
    128c:	35fc      	adds	r5, #252	; 0xfc
    128e:	3111      	adds	r1, #17
    1290:	4b34      	ldr	r3, [pc, #208]	; (1364 <flight+0x260>)
    1292:	31ff      	adds	r1, #255	; 0xff
    1294:	68e8      	ldr	r0, [r5, #12]
    1296:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    1298:	68eb      	ldr	r3, [r5, #12]
    129a:	3301      	adds	r3, #1
    129c:	33ff      	adds	r3, #255	; 0xff
    129e:	60eb      	str	r3, [r5, #12]


            }
        }

        if (my_altimeter->batFloat < 3.5) {
    12a0:	23c6      	movs	r3, #198	; 0xc6
    12a2:	009b      	lsls	r3, r3, #2
    12a4:	58e0      	ldr	r0, [r4, r3]
    12a6:	4928      	ldr	r1, [pc, #160]	; (1348 <flight+0x244>)
    12a8:	4b28      	ldr	r3, [pc, #160]	; (134c <flight+0x248>)
    12aa:	4798      	blx	r3
    12ac:	2800      	cmp	r0, #0
    12ae:	d026      	beq.n	12fe <flight+0x1fa>
            my_altimeter->myFlightState = flightTest;
    12b0:	230a      	movs	r3, #10
    12b2:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    12b4:	4b2a      	ldr	r3, [pc, #168]	; (1360 <flight+0x25c>)
    12b6:	4798      	blx	r3
            writeFlightEndAddress(my_altimeter);
    12b8:	0020      	movs	r0, r4
    12ba:	4b2b      	ldr	r3, [pc, #172]	; (1368 <flight+0x264>)
    12bc:	4798      	blx	r3
            delay_ms(80);
    12be:	4c2b      	ldr	r4, [pc, #172]	; (136c <flight+0x268>)
    12c0:	2050      	movs	r0, #80	; 0x50
    12c2:	47a0      	blx	r4
            beep(300);
    12c4:	2096      	movs	r0, #150	; 0x96
    12c6:	4d0e      	ldr	r5, [pc, #56]	; (1300 <flight+0x1fc>)
    12c8:	0040      	lsls	r0, r0, #1
    12ca:	47a8      	blx	r5
            delay_ms(80);
    12cc:	2050      	movs	r0, #80	; 0x50
    12ce:	47a0      	blx	r4
            beep(300);
    12d0:	2096      	movs	r0, #150	; 0x96
    12d2:	0040      	lsls	r0, r0, #1
    12d4:	47a8      	blx	r5
            delay_ms(80);
    12d6:	2050      	movs	r0, #80	; 0x50
    12d8:	47a0      	blx	r4
            beep(300);
    12da:	2096      	movs	r0, #150	; 0x96
    12dc:	0040      	lsls	r0, r0, #1
    12de:	47a8      	blx	r5
            delay_ms(80);
    12e0:	2050      	movs	r0, #80	; 0x50
    12e2:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	4b1d      	ldr	r3, [pc, #116]	; (135c <flight+0x258>)
    12e8:	0392      	lsls	r2, r2, #14
    12ea:	615a      	str	r2, [r3, #20]
    12ec:	2280      	movs	r2, #128	; 0x80
    12ee:	0352      	lsls	r2, r2, #13
    12f0:	615a      	str	r2, [r3, #20]
    12f2:	e004      	b.n	12fe <flight+0x1fa>


        break;
    case flightTest:

        TC4->COUNT8.CTRLA.reg = 0;
    12f4:	2300      	movs	r3, #0
    12f6:	4a1e      	ldr	r2, [pc, #120]	; (1370 <flight+0x26c>)
    12f8:	8013      	strh	r3, [r2, #0]
        TC5->COUNT8.CTRLA.reg = 0;
    12fa:	4a1e      	ldr	r2, [pc, #120]	; (1374 <flight+0x270>)
    12fc:	8013      	strh	r3, [r2, #0]

        break;
    }


}
    12fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1300:	00000d3d 	.word	0x00000d3d
    1304:	00001379 	.word	0x00001379
    1308:	00005f6d 	.word	0x00005f6d
    130c:	00003bed 	.word	0x00003bed
    1310:	00000fa1 	.word	0x00000fa1
    1314:	9999999a 	.word	0x9999999a
    1318:	00005231 	.word	0x00005231
    131c:	3fe99999 	.word	0x3fe99999
    1320:	3fc99999 	.word	0x3fc99999
    1324:	00004391 	.word	0x00004391
    1328:	00005efd 	.word	0x00005efd
    132c:	3fe00000 	.word	0x3fe00000
    1330:	00000bb8 	.word	0x00000bb8
    1334:	00002710 	.word	0x00002710
    1338:	0000211d 	.word	0x0000211d
    133c:	00001f31 	.word	0x00001f31
    1340:	00000d79 	.word	0x00000d79
    1344:	0000272d 	.word	0x0000272d
    1348:	40600000 	.word	0x40600000
    134c:	00003b15 	.word	0x00003b15
    1350:	200004d1 	.word	0x200004d1
    1354:	00001f91 	.word	0x00001f91
    1358:	00000311 	.word	0x00000311
    135c:	41004400 	.word	0x41004400
    1360:	000001e5 	.word	0x000001e5
    1364:	000002cd 	.word	0x000002cd
    1368:	000020e5 	.word	0x000020e5
    136c:	00000f55 	.word	0x00000f55
    1370:	42003000 	.word	0x42003000
    1374:	42003400 	.word	0x42003400

00001378 <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1378:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    137a:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    137c:	4cdb      	ldr	r4, [pc, #876]	; (16ec <computeKalmanGains+0x374>)
    137e:	4adc      	ldr	r2, [pc, #880]	; (16f0 <computeKalmanGains+0x378>)
    1380:	4bdc      	ldr	r3, [pc, #880]	; (16f4 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1382:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1384:	60a2      	str	r2, [r4, #8]
    1386:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    1388:	62a2      	str	r2, [r4, #40]	; 0x28
    138a:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    138c:	4ada      	ldr	r2, [pc, #872]	; (16f8 <computeKalmanGains+0x380>)
    138e:	4bdb      	ldr	r3, [pc, #876]	; (16fc <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1390:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1392:	6122      	str	r2, [r4, #16]
    1394:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1396:	48d6      	ldr	r0, [pc, #856]	; (16f0 <computeKalmanGains+0x378>)
    1398:	49d9      	ldr	r1, [pc, #868]	; (1700 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    139a:	2200      	movs	r2, #0
    139c:	ae4c      	add	r6, sp, #304	; 0x130
    139e:	ab40      	add	r3, sp, #256	; 0x100
    13a0:	1977      	adds	r7, r6, r5
    13a2:	18ee      	adds	r6, r5, r3
    13a4:	4bd7      	ldr	r3, [pc, #860]	; (1704 <computeKalmanGains+0x38c>)
    13a6:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13a8:	6038      	str	r0, [r7, #0]
    13aa:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    13ac:	6032      	str	r2, [r6, #0]
    13ae:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13b0:	60b8      	str	r0, [r7, #8]
    13b2:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    13b4:	60b2      	str	r2, [r6, #8]
    13b6:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    13b8:	2d30      	cmp	r5, #48	; 0x30
    13ba:	d1ee      	bne.n	139a <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    13bc:	6822      	ldr	r2, [r4, #0]
    13be:	6863      	ldr	r3, [r4, #4]
    13c0:	921a      	str	r2, [sp, #104]	; 0x68
    13c2:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    13c4:	69a2      	ldr	r2, [r4, #24]
    13c6:	69e3      	ldr	r3, [r4, #28]
    13c8:	921c      	str	r2, [sp, #112]	; 0x70
    13ca:	931d      	str	r3, [sp, #116]	; 0x74
    13cc:	6a22      	ldr	r2, [r4, #32]
    13ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13d0:	921e      	str	r2, [sp, #120]	; 0x78
    13d2:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    13d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    13d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13d8:	9220      	str	r2, [sp, #128]	; 0x80
    13da:	9321      	str	r3, [sp, #132]	; 0x84
    13dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    13de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13e0:	9222      	str	r2, [sp, #136]	; 0x88
    13e2:	9323      	str	r3, [sp, #140]	; 0x8c
    13e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13e8:	9224      	str	r2, [sp, #144]	; 0x90
    13ea:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    13ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    13ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    13f0:	9238      	str	r2, [sp, #224]	; 0xe0
    13f2:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    13f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    13f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    13f8:	923a      	str	r2, [sp, #232]	; 0xe8
    13fa:	933b      	str	r3, [sp, #236]	; 0xec
    13fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    13fe:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    1400:	933c      	str	r3, [sp, #240]	; 0xf0
    1402:	943d      	str	r4, [sp, #244]	; 0xf4
    1404:	2300      	movs	r3, #0
    1406:	4cc0      	ldr	r4, [pc, #768]	; (1708 <computeKalmanGains+0x390>)
    1408:	9302      	str	r3, [sp, #8]
    140a:	9403      	str	r4, [sp, #12]
    140c:	2300      	movs	r3, #0
    140e:	2400      	movs	r4, #0
    1410:	9312      	str	r3, [sp, #72]	; 0x48
    1412:	9413      	str	r4, [sp, #76]	; 0x4c
    1414:	9310      	str	r3, [sp, #64]	; 0x40
    1416:	9411      	str	r4, [sp, #68]	; 0x44
    1418:	9304      	str	r3, [sp, #16]
    141a:	9405      	str	r4, [sp, #20]
    141c:	2300      	movs	r3, #0
    141e:	4cba      	ldr	r4, [pc, #744]	; (1708 <computeKalmanGains+0x390>)
    1420:	930e      	str	r3, [sp, #56]	; 0x38
    1422:	940f      	str	r4, [sp, #60]	; 0x3c
    1424:	2300      	movs	r3, #0
    1426:	2400      	movs	r4, #0
    1428:	9308      	str	r3, [sp, #32]
    142a:	9409      	str	r4, [sp, #36]	; 0x24
    142c:	930c      	str	r3, [sp, #48]	; 0x30
    142e:	940d      	str	r4, [sp, #52]	; 0x34
    1430:	930a      	str	r3, [sp, #40]	; 0x28
    1432:	940b      	str	r4, [sp, #44]	; 0x2c
    1434:	2480      	movs	r4, #128	; 0x80
    1436:	2300      	movs	r3, #0
    1438:	05e4      	lsls	r4, r4, #23
    143a:	9306      	str	r3, [sp, #24]
    143c:	9407      	str	r4, [sp, #28]
    143e:	2300      	movs	r3, #0
    1440:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1442:	4db2      	ldr	r5, [pc, #712]	; (170c <computeKalmanGains+0x394>)
    1444:	9a06      	ldr	r2, [sp, #24]
    1446:	9b07      	ldr	r3, [sp, #28]
    1448:	981a      	ldr	r0, [sp, #104]	; 0x68
    144a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    144c:	47a8      	blx	r5
    144e:	4aa8      	ldr	r2, [pc, #672]	; (16f0 <computeKalmanGains+0x378>)
    1450:	0006      	movs	r6, r0
    1452:	000f      	movs	r7, r1
    1454:	9808      	ldr	r0, [sp, #32]
    1456:	9909      	ldr	r1, [sp, #36]	; 0x24
    1458:	4ba6      	ldr	r3, [pc, #664]	; (16f4 <computeKalmanGains+0x37c>)
    145a:	47a8      	blx	r5
    145c:	4cac      	ldr	r4, [pc, #688]	; (1710 <computeKalmanGains+0x398>)
    145e:	0002      	movs	r2, r0
    1460:	000b      	movs	r3, r1
    1462:	0030      	movs	r0, r6
    1464:	0039      	movs	r1, r7
    1466:	47a0      	blx	r4
    1468:	4aa3      	ldr	r2, [pc, #652]	; (16f8 <computeKalmanGains+0x380>)
    146a:	0006      	movs	r6, r0
    146c:	000f      	movs	r7, r1
    146e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1470:	9911      	ldr	r1, [sp, #68]	; 0x44
    1472:	4ba2      	ldr	r3, [pc, #648]	; (16fc <computeKalmanGains+0x384>)
    1474:	47a8      	blx	r5
    1476:	0002      	movs	r2, r0
    1478:	000b      	movs	r3, r1
    147a:	0030      	movs	r0, r6
    147c:	0039      	movs	r1, r7
    147e:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1484:	9016      	str	r0, [sp, #88]	; 0x58
    1486:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1488:	981a      	ldr	r0, [sp, #104]	; 0x68
    148a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    148c:	47a8      	blx	r5
    148e:	4a98      	ldr	r2, [pc, #608]	; (16f0 <computeKalmanGains+0x378>)
    1490:	0006      	movs	r6, r0
    1492:	000f      	movs	r7, r1
    1494:	980e      	ldr	r0, [sp, #56]	; 0x38
    1496:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1498:	4b96      	ldr	r3, [pc, #600]	; (16f4 <computeKalmanGains+0x37c>)
    149a:	47a8      	blx	r5
    149c:	0002      	movs	r2, r0
    149e:	000b      	movs	r3, r1
    14a0:	0030      	movs	r0, r6
    14a2:	0039      	movs	r1, r7
    14a4:	47a0      	blx	r4
    14a6:	4a94      	ldr	r2, [pc, #592]	; (16f8 <computeKalmanGains+0x380>)
    14a8:	0006      	movs	r6, r0
    14aa:	000f      	movs	r7, r1
    14ac:	9812      	ldr	r0, [sp, #72]	; 0x48
    14ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    14b0:	4b92      	ldr	r3, [pc, #584]	; (16fc <computeKalmanGains+0x384>)
    14b2:	47a8      	blx	r5
    14b4:	0002      	movs	r2, r0
    14b6:	000b      	movs	r3, r1
    14b8:	0030      	movs	r0, r6
    14ba:	0039      	movs	r1, r7
    14bc:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14c2:	9000      	str	r0, [sp, #0]
    14c4:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14c6:	981a      	ldr	r0, [sp, #104]	; 0x68
    14c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14ca:	47a8      	blx	r5
    14cc:	4a88      	ldr	r2, [pc, #544]	; (16f0 <computeKalmanGains+0x378>)
    14ce:	0006      	movs	r6, r0
    14d0:	000f      	movs	r7, r1
    14d2:	9804      	ldr	r0, [sp, #16]
    14d4:	9905      	ldr	r1, [sp, #20]
    14d6:	4b87      	ldr	r3, [pc, #540]	; (16f4 <computeKalmanGains+0x37c>)
    14d8:	47a8      	blx	r5
    14da:	0002      	movs	r2, r0
    14dc:	000b      	movs	r3, r1
    14de:	0030      	movs	r0, r6
    14e0:	0039      	movs	r1, r7
    14e2:	47a0      	blx	r4
    14e4:	4a84      	ldr	r2, [pc, #528]	; (16f8 <computeKalmanGains+0x380>)
    14e6:	0006      	movs	r6, r0
    14e8:	000f      	movs	r7, r1
    14ea:	9802      	ldr	r0, [sp, #8]
    14ec:	9903      	ldr	r1, [sp, #12]
    14ee:	4b83      	ldr	r3, [pc, #524]	; (16fc <computeKalmanGains+0x384>)
    14f0:	47a8      	blx	r5
    14f2:	0002      	movs	r2, r0
    14f4:	000b      	movs	r3, r1
    14f6:	0030      	movs	r0, r6
    14f8:	0039      	movs	r1, r7
    14fa:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14fc:	9a06      	ldr	r2, [sp, #24]
    14fe:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1500:	9014      	str	r0, [sp, #80]	; 0x50
    1502:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1504:	981c      	ldr	r0, [sp, #112]	; 0x70
    1506:	991d      	ldr	r1, [sp, #116]	; 0x74
    1508:	47a8      	blx	r5
    150a:	9a08      	ldr	r2, [sp, #32]
    150c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    150e:	0006      	movs	r6, r0
    1510:	000f      	movs	r7, r1
    1512:	981e      	ldr	r0, [sp, #120]	; 0x78
    1514:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1516:	47a8      	blx	r5
    1518:	0002      	movs	r2, r0
    151a:	000b      	movs	r3, r1
    151c:	0030      	movs	r0, r6
    151e:	0039      	movs	r1, r7
    1520:	47a0      	blx	r4
    1522:	4a73      	ldr	r2, [pc, #460]	; (16f0 <computeKalmanGains+0x378>)
    1524:	0006      	movs	r6, r0
    1526:	000f      	movs	r7, r1
    1528:	9810      	ldr	r0, [sp, #64]	; 0x40
    152a:	9911      	ldr	r1, [sp, #68]	; 0x44
    152c:	4b71      	ldr	r3, [pc, #452]	; (16f4 <computeKalmanGains+0x37c>)
    152e:	47a8      	blx	r5
    1530:	0002      	movs	r2, r0
    1532:	000b      	movs	r3, r1
    1534:	0030      	movs	r0, r6
    1536:	0039      	movs	r1, r7
    1538:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    153a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    153c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    153e:	9018      	str	r0, [sp, #96]	; 0x60
    1540:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1542:	981c      	ldr	r0, [sp, #112]	; 0x70
    1544:	991d      	ldr	r1, [sp, #116]	; 0x74
    1546:	47a8      	blx	r5
    1548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    154a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    154c:	0006      	movs	r6, r0
    154e:	000f      	movs	r7, r1
    1550:	981e      	ldr	r0, [sp, #120]	; 0x78
    1552:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1554:	47a8      	blx	r5
    1556:	0002      	movs	r2, r0
    1558:	000b      	movs	r3, r1
    155a:	0030      	movs	r0, r6
    155c:	0039      	movs	r1, r7
    155e:	47a0      	blx	r4
    1560:	4a63      	ldr	r2, [pc, #396]	; (16f0 <computeKalmanGains+0x378>)
    1562:	0006      	movs	r6, r0
    1564:	000f      	movs	r7, r1
    1566:	9812      	ldr	r0, [sp, #72]	; 0x48
    1568:	9913      	ldr	r1, [sp, #76]	; 0x4c
    156a:	4b62      	ldr	r3, [pc, #392]	; (16f4 <computeKalmanGains+0x37c>)
    156c:	47a8      	blx	r5
    156e:	0002      	movs	r2, r0
    1570:	000b      	movs	r3, r1
    1572:	0030      	movs	r0, r6
    1574:	0039      	movs	r1, r7
    1576:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    157a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    157c:	9026      	str	r0, [sp, #152]	; 0x98
    157e:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1580:	981c      	ldr	r0, [sp, #112]	; 0x70
    1582:	991d      	ldr	r1, [sp, #116]	; 0x74
    1584:	47a8      	blx	r5
    1586:	9a04      	ldr	r2, [sp, #16]
    1588:	9b05      	ldr	r3, [sp, #20]
    158a:	0006      	movs	r6, r0
    158c:	000f      	movs	r7, r1
    158e:	981e      	ldr	r0, [sp, #120]	; 0x78
    1590:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1592:	47a8      	blx	r5
    1594:	0002      	movs	r2, r0
    1596:	000b      	movs	r3, r1
    1598:	0030      	movs	r0, r6
    159a:	0039      	movs	r1, r7
    159c:	47a0      	blx	r4
    159e:	4a54      	ldr	r2, [pc, #336]	; (16f0 <computeKalmanGains+0x378>)
    15a0:	0006      	movs	r6, r0
    15a2:	000f      	movs	r7, r1
    15a4:	9802      	ldr	r0, [sp, #8]
    15a6:	9903      	ldr	r1, [sp, #12]
    15a8:	4b52      	ldr	r3, [pc, #328]	; (16f4 <computeKalmanGains+0x37c>)
    15aa:	47a8      	blx	r5
    15ac:	0002      	movs	r2, r0
    15ae:	000b      	movs	r3, r1
    15b0:	0030      	movs	r0, r6
    15b2:	0039      	movs	r1, r7
    15b4:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15b6:	9a06      	ldr	r2, [sp, #24]
    15b8:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15ba:	9028      	str	r0, [sp, #160]	; 0xa0
    15bc:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15be:	9820      	ldr	r0, [sp, #128]	; 0x80
    15c0:	9921      	ldr	r1, [sp, #132]	; 0x84
    15c2:	47a8      	blx	r5
    15c4:	9a08      	ldr	r2, [sp, #32]
    15c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15c8:	0006      	movs	r6, r0
    15ca:	000f      	movs	r7, r1
    15cc:	9822      	ldr	r0, [sp, #136]	; 0x88
    15ce:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15d0:	47a8      	blx	r5
    15d2:	0002      	movs	r2, r0
    15d4:	000b      	movs	r3, r1
    15d6:	0030      	movs	r0, r6
    15d8:	0039      	movs	r1, r7
    15da:	47a0      	blx	r4
    15dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    15de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    15e0:	0006      	movs	r6, r0
    15e2:	000f      	movs	r7, r1
    15e4:	9824      	ldr	r0, [sp, #144]	; 0x90
    15e6:	9925      	ldr	r1, [sp, #148]	; 0x94
    15e8:	47a8      	blx	r5
    15ea:	0002      	movs	r2, r0
    15ec:	000b      	movs	r3, r1
    15ee:	0030      	movs	r0, r6
    15f0:	0039      	movs	r1, r7
    15f2:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15f8:	9010      	str	r0, [sp, #64]	; 0x40
    15fa:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15fc:	9820      	ldr	r0, [sp, #128]	; 0x80
    15fe:	9921      	ldr	r1, [sp, #132]	; 0x84
    1600:	47a8      	blx	r5
    1602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1606:	0006      	movs	r6, r0
    1608:	000f      	movs	r7, r1
    160a:	9822      	ldr	r0, [sp, #136]	; 0x88
    160c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    160e:	47a8      	blx	r5
    1610:	0002      	movs	r2, r0
    1612:	000b      	movs	r3, r1
    1614:	0030      	movs	r0, r6
    1616:	0039      	movs	r1, r7
    1618:	47a0      	blx	r4
    161a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    161c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    161e:	0006      	movs	r6, r0
    1620:	000f      	movs	r7, r1
    1622:	9824      	ldr	r0, [sp, #144]	; 0x90
    1624:	9925      	ldr	r1, [sp, #148]	; 0x94
    1626:	47a8      	blx	r5
    1628:	0002      	movs	r2, r0
    162a:	000b      	movs	r3, r1
    162c:	0030      	movs	r0, r6
    162e:	0039      	movs	r1, r7
    1630:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1636:	9006      	str	r0, [sp, #24]
    1638:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    163a:	9820      	ldr	r0, [sp, #128]	; 0x80
    163c:	9921      	ldr	r1, [sp, #132]	; 0x84
    163e:	47a8      	blx	r5
    1640:	9a04      	ldr	r2, [sp, #16]
    1642:	9b05      	ldr	r3, [sp, #20]
    1644:	0006      	movs	r6, r0
    1646:	000f      	movs	r7, r1
    1648:	9822      	ldr	r0, [sp, #136]	; 0x88
    164a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    164c:	47a8      	blx	r5
    164e:	0002      	movs	r2, r0
    1650:	000b      	movs	r3, r1
    1652:	0030      	movs	r0, r6
    1654:	0039      	movs	r1, r7
    1656:	47a0      	blx	r4
    1658:	9a02      	ldr	r2, [sp, #8]
    165a:	9b03      	ldr	r3, [sp, #12]
    165c:	0006      	movs	r6, r0
    165e:	000f      	movs	r7, r1
    1660:	9824      	ldr	r0, [sp, #144]	; 0x90
    1662:	9925      	ldr	r1, [sp, #148]	; 0x94
    1664:	47a8      	blx	r5
    1666:	0002      	movs	r2, r0
    1668:	000b      	movs	r3, r1
    166a:	0030      	movs	r0, r6
    166c:	0039      	movs	r1, r7
    166e:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1670:	4a1f      	ldr	r2, [pc, #124]	; (16f0 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1672:	9002      	str	r0, [sp, #8]
    1674:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1676:	9800      	ldr	r0, [sp, #0]
    1678:	9901      	ldr	r1, [sp, #4]
    167a:	4b1e      	ldr	r3, [pc, #120]	; (16f4 <computeKalmanGains+0x37c>)
    167c:	47a8      	blx	r5
    167e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1682:	47a0      	blx	r4
    1684:	4a1c      	ldr	r2, [pc, #112]	; (16f8 <computeKalmanGains+0x380>)
    1686:	0006      	movs	r6, r0
    1688:	000f      	movs	r7, r1
    168a:	9814      	ldr	r0, [sp, #80]	; 0x50
    168c:	9915      	ldr	r1, [sp, #84]	; 0x54
    168e:	4b1b      	ldr	r3, [pc, #108]	; (16fc <computeKalmanGains+0x384>)
    1690:	47a8      	blx	r5
    1692:	0002      	movs	r2, r0
    1694:	000b      	movs	r3, r1
    1696:	0030      	movs	r0, r6
    1698:	0039      	movs	r1, r7
    169a:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    169c:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    169e:	9008      	str	r0, [sp, #32]
    16a0:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    16a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    16a6:	2300      	movs	r3, #0
    16a8:	47a8      	blx	r5
    16aa:	0006      	movs	r6, r0
    16ac:	000f      	movs	r7, r1
    16ae:	0002      	movs	r2, r0
    16b0:	000b      	movs	r3, r1
    16b2:	9800      	ldr	r0, [sp, #0]
    16b4:	9901      	ldr	r1, [sp, #4]
    16b6:	47a0      	blx	r4
    16b8:	4a0d      	ldr	r2, [pc, #52]	; (16f0 <computeKalmanGains+0x378>)
    16ba:	9004      	str	r0, [sp, #16]
    16bc:	9105      	str	r1, [sp, #20]
    16be:	9814      	ldr	r0, [sp, #80]	; 0x50
    16c0:	9915      	ldr	r1, [sp, #84]	; 0x54
    16c2:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <computeKalmanGains+0x37c>)
    16c4:	47a8      	blx	r5
    16c6:	0002      	movs	r2, r0
    16c8:	000b      	movs	r3, r1
    16ca:	9804      	ldr	r0, [sp, #16]
    16cc:	9905      	ldr	r1, [sp, #20]
    16ce:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16d0:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16d2:	9030      	str	r0, [sp, #192]	; 0xc0
    16d4:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16d6:	9800      	ldr	r0, [sp, #0]
    16d8:	9901      	ldr	r1, [sp, #4]
    16da:	2300      	movs	r3, #0
    16dc:	47a8      	blx	r5
    16de:	0032      	movs	r2, r6
    16e0:	003b      	movs	r3, r7
    16e2:	47a0      	blx	r4
    16e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    16e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    16e8:	47a0      	blx	r4
    16ea:	e013      	b.n	1714 <computeKalmanGains+0x39c>
    16ec:	20000010 	.word	0x20000010
    16f0:	d2f1a9fc 	.word	0xd2f1a9fc
    16f4:	3f80624d 	.word	0x3f80624d
    16f8:	a0b5ed8d 	.word	0xa0b5ed8d
    16fc:	3f00c6f7 	.word	0x3f00c6f7
    1700:	3f50624d 	.word	0x3f50624d
    1704:	3ff00000 	.word	0x3ff00000
    1708:	40220000 	.word	0x40220000
    170c:	00005231 	.word	0x00005231
    1710:	00004391 	.word	0x00004391
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1714:	4ada      	ldr	r2, [pc, #872]	; (1a80 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1716:	9114      	str	r1, [sp, #80]	; 0x50
    1718:	9004      	str	r0, [sp, #16]
    171a:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    171c:	4bd9      	ldr	r3, [pc, #868]	; (1a84 <computeKalmanGains+0x70c>)
    171e:	9826      	ldr	r0, [sp, #152]	; 0x98
    1720:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1722:	47a8      	blx	r5
    1724:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1726:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1728:	47a0      	blx	r4
    172a:	4ad7      	ldr	r2, [pc, #860]	; (1a88 <computeKalmanGains+0x710>)
    172c:	0006      	movs	r6, r0
    172e:	000f      	movs	r7, r1
    1730:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1732:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1734:	4bd5      	ldr	r3, [pc, #852]	; (1a8c <computeKalmanGains+0x714>)
    1736:	47a8      	blx	r5
    1738:	0002      	movs	r2, r0
    173a:	000b      	movs	r3, r1
    173c:	0030      	movs	r0, r6
    173e:	0039      	movs	r1, r7
    1740:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1742:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1744:	902a      	str	r0, [sp, #168]	; 0xa8
    1746:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1748:	9818      	ldr	r0, [sp, #96]	; 0x60
    174a:	9919      	ldr	r1, [sp, #100]	; 0x64
    174c:	2300      	movs	r3, #0
    174e:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1750:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1752:	9032      	str	r0, [sp, #200]	; 0xc8
    1754:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1756:	9826      	ldr	r0, [sp, #152]	; 0x98
    1758:	9927      	ldr	r1, [sp, #156]	; 0x9c
    175a:	2300      	movs	r3, #0
    175c:	47a8      	blx	r5
    175e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1760:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1762:	47a0      	blx	r4
    1764:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1766:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1768:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    176a:	4ac5      	ldr	r2, [pc, #788]	; (1a80 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    176c:	902c      	str	r0, [sp, #176]	; 0xb0
    176e:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1770:	9806      	ldr	r0, [sp, #24]
    1772:	9907      	ldr	r1, [sp, #28]
    1774:	4bc3      	ldr	r3, [pc, #780]	; (1a84 <computeKalmanGains+0x70c>)
    1776:	47a8      	blx	r5
    1778:	9a10      	ldr	r2, [sp, #64]	; 0x40
    177a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    177c:	47a0      	blx	r4
    177e:	4ac2      	ldr	r2, [pc, #776]	; (1a88 <computeKalmanGains+0x710>)
    1780:	0006      	movs	r6, r0
    1782:	000f      	movs	r7, r1
    1784:	9802      	ldr	r0, [sp, #8]
    1786:	9903      	ldr	r1, [sp, #12]
    1788:	4bc0      	ldr	r3, [pc, #768]	; (1a8c <computeKalmanGains+0x714>)
    178a:	47a8      	blx	r5
    178c:	0002      	movs	r2, r0
    178e:	000b      	movs	r3, r1
    1790:	0030      	movs	r0, r6
    1792:	0039      	movs	r1, r7
    1794:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1796:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1798:	9000      	str	r0, [sp, #0]
    179a:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    179c:	9810      	ldr	r0, [sp, #64]	; 0x40
    179e:	9911      	ldr	r1, [sp, #68]	; 0x44
    17a0:	2300      	movs	r3, #0
    17a2:	47a8      	blx	r5
    17a4:	0006      	movs	r6, r0
    17a6:	000f      	movs	r7, r1
    17a8:	0002      	movs	r2, r0
    17aa:	000b      	movs	r3, r1
    17ac:	9806      	ldr	r0, [sp, #24]
    17ae:	9907      	ldr	r1, [sp, #28]
    17b0:	47a0      	blx	r4
    17b2:	4ab3      	ldr	r2, [pc, #716]	; (1a80 <computeKalmanGains+0x708>)
    17b4:	900a      	str	r0, [sp, #40]	; 0x28
    17b6:	910b      	str	r1, [sp, #44]	; 0x2c
    17b8:	9802      	ldr	r0, [sp, #8]
    17ba:	9903      	ldr	r1, [sp, #12]
    17bc:	4bb1      	ldr	r3, [pc, #708]	; (1a84 <computeKalmanGains+0x70c>)
    17be:	47a8      	blx	r5
    17c0:	0002      	movs	r2, r0
    17c2:	000b      	movs	r3, r1
    17c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    17c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17c8:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ca:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17cc:	9012      	str	r0, [sp, #72]	; 0x48
    17ce:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17d0:	9806      	ldr	r0, [sp, #24]
    17d2:	9907      	ldr	r1, [sp, #28]
    17d4:	2300      	movs	r3, #0
    17d6:	47a8      	blx	r5
    17d8:	0032      	movs	r2, r6
    17da:	003b      	movs	r3, r7
    17dc:	47a0      	blx	r4
    17de:	9a02      	ldr	r2, [sp, #8]
    17e0:	9b03      	ldr	r3, [sp, #12]
    17e2:	47a0      	blx	r4
    17e4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    17e6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    17e8:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17ea:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    17ec:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ee:	9002      	str	r0, [sp, #8]
    17f0:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17f2:	9808      	ldr	r0, [sp, #32]
    17f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    17f6:	47a0      	blx	r4
    17f8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    17fa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    17fc:	900a      	str	r0, [sp, #40]	; 0x28
    17fe:	910b      	str	r1, [sp, #44]	; 0x2c
    1800:	9802      	ldr	r0, [sp, #8]
    1802:	9903      	ldr	r1, [sp, #12]
    1804:	47a0      	blx	r4
    1806:	9a00      	ldr	r2, [sp, #0]
    1808:	9b01      	ldr	r3, [sp, #4]
    180a:	900c      	str	r0, [sp, #48]	; 0x30
    180c:	910d      	str	r1, [sp, #52]	; 0x34
    180e:	9804      	ldr	r0, [sp, #16]
    1810:	9916      	ldr	r1, [sp, #88]	; 0x58
    1812:	47a8      	blx	r5
    1814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1818:	900e      	str	r0, [sp, #56]	; 0x38
    181a:	910f      	str	r1, [sp, #60]	; 0x3c
    181c:	980a      	ldr	r0, [sp, #40]	; 0x28
    181e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1820:	47a8      	blx	r5
    1822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1826:	4e9a      	ldr	r6, [pc, #616]	; (1a90 <computeKalmanGains+0x718>)
    1828:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    182a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    182c:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    182e:	9006      	str	r0, [sp, #24]
    1830:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1832:	9808      	ldr	r0, [sp, #32]
    1834:	9909      	ldr	r1, [sp, #36]	; 0x24
    1836:	47a8      	blx	r5
    1838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    183a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    183c:	47b0      	blx	r6
    183e:	9a06      	ldr	r2, [sp, #24]
    1840:	9b07      	ldr	r3, [sp, #28]
    1842:	4e94      	ldr	r6, [pc, #592]	; (1a94 <computeKalmanGains+0x71c>)
    1844:	47b0      	blx	r6
    1846:	0002      	movs	r2, r0
    1848:	000b      	movs	r3, r1
    184a:	9240      	str	r2, [sp, #256]	; 0x100
    184c:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    184e:	2280      	movs	r2, #128	; 0x80
    1850:	0612      	lsls	r2, r2, #24
    1852:	4694      	mov	ip, r2
    1854:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1856:	9a04      	ldr	r2, [sp, #16]
    1858:	4463      	add	r3, ip
    185a:	932f      	str	r3, [sp, #188]	; 0xbc
    185c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    185e:	9034      	str	r0, [sp, #208]	; 0xd0
    1860:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1862:	9808      	ldr	r0, [sp, #32]
    1864:	9909      	ldr	r1, [sp, #36]	; 0x24
    1866:	47a8      	blx	r5
    1868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    186a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    186c:	0006      	movs	r6, r0
    186e:	000f      	movs	r7, r1
    1870:	9804      	ldr	r0, [sp, #16]
    1872:	9916      	ldr	r1, [sp, #88]	; 0x58
    1874:	47a8      	blx	r5
    1876:	0002      	movs	r2, r0
    1878:	000b      	movs	r3, r1
    187a:	0030      	movs	r0, r6
    187c:	0039      	movs	r1, r7
    187e:	47a0      	blx	r4
    1880:	9a06      	ldr	r2, [sp, #24]
    1882:	9b07      	ldr	r3, [sp, #28]
    1884:	4e83      	ldr	r6, [pc, #524]	; (1a94 <computeKalmanGains+0x71c>)
    1886:	47b0      	blx	r6
    1888:	0002      	movs	r2, r0
    188a:	000b      	movs	r3, r1
    188c:	900e      	str	r0, [sp, #56]	; 0x38
    188e:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1890:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1892:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1894:	9242      	str	r2, [sp, #264]	; 0x108
    1896:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    189a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    189c:	47a8      	blx	r5
    189e:	9a00      	ldr	r2, [sp, #0]
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	0006      	movs	r6, r0
    18a4:	000f      	movs	r7, r1
    18a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18a8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18aa:	47a8      	blx	r5
    18ac:	0002      	movs	r2, r0
    18ae:	000b      	movs	r3, r1
    18b0:	0030      	movs	r0, r6
    18b2:	0039      	movs	r1, r7
    18b4:	4e76      	ldr	r6, [pc, #472]	; (1a90 <computeKalmanGains+0x718>)
    18b6:	47b0      	blx	r6
    18b8:	9a06      	ldr	r2, [sp, #24]
    18ba:	9b07      	ldr	r3, [sp, #28]
    18bc:	4e75      	ldr	r6, [pc, #468]	; (1a94 <computeKalmanGains+0x71c>)
    18be:	47b0      	blx	r6
    18c0:	0002      	movs	r2, r0
    18c2:	000b      	movs	r3, r1
    18c4:	913e      	str	r1, [sp, #248]	; 0xf8
    18c6:	9244      	str	r2, [sp, #272]	; 0x110
    18c8:	9345      	str	r3, [sp, #276]	; 0x114
    18ca:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18cc:	9a04      	ldr	r2, [sp, #16]
    18ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18d0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18d2:	992b      	ldr	r1, [sp, #172]	; 0xac
    18d4:	47a8      	blx	r5
    18d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18da:	0006      	movs	r6, r0
    18dc:	000f      	movs	r7, r1
    18de:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18e0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18e2:	47a8      	blx	r5
    18e4:	0002      	movs	r2, r0
    18e6:	000b      	movs	r3, r1
    18e8:	0030      	movs	r0, r6
    18ea:	0039      	movs	r1, r7
    18ec:	47a0      	blx	r4
    18ee:	9a06      	ldr	r2, [sp, #24]
    18f0:	9b07      	ldr	r3, [sp, #28]
    18f2:	4e68      	ldr	r6, [pc, #416]	; (1a94 <computeKalmanGains+0x71c>)
    18f4:	47b0      	blx	r6
    18f6:	0002      	movs	r2, r0
    18f8:	000b      	movs	r3, r1
    18fa:	9010      	str	r0, [sp, #64]	; 0x40
    18fc:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    18fe:	9800      	ldr	r0, [sp, #0]
    1900:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1902:	9246      	str	r2, [sp, #280]	; 0x118
    1904:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    190a:	47a8      	blx	r5
    190c:	9a02      	ldr	r2, [sp, #8]
    190e:	9b03      	ldr	r3, [sp, #12]
    1910:	0006      	movs	r6, r0
    1912:	000f      	movs	r7, r1
    1914:	9800      	ldr	r0, [sp, #0]
    1916:	9901      	ldr	r1, [sp, #4]
    1918:	47a8      	blx	r5
    191a:	0002      	movs	r2, r0
    191c:	000b      	movs	r3, r1
    191e:	0030      	movs	r0, r6
    1920:	0039      	movs	r1, r7
    1922:	4e5b      	ldr	r6, [pc, #364]	; (1a90 <computeKalmanGains+0x718>)
    1924:	47b0      	blx	r6
    1926:	9a06      	ldr	r2, [sp, #24]
    1928:	9b07      	ldr	r3, [sp, #28]
    192a:	4e5a      	ldr	r6, [pc, #360]	; (1a94 <computeKalmanGains+0x71c>)
    192c:	47b0      	blx	r6
    192e:	0002      	movs	r2, r0
    1930:	000b      	movs	r3, r1
    1932:	9014      	str	r0, [sp, #80]	; 0x50
    1934:	9115      	str	r1, [sp, #84]	; 0x54
    1936:	9248      	str	r2, [sp, #288]	; 0x120
    1938:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    193a:	9800      	ldr	r0, [sp, #0]
    193c:	9901      	ldr	r1, [sp, #4]
    193e:	9a04      	ldr	r2, [sp, #16]
    1940:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1942:	47a8      	blx	r5
    1944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1948:	0006      	movs	r6, r0
    194a:	000f      	movs	r7, r1
    194c:	9802      	ldr	r0, [sp, #8]
    194e:	9903      	ldr	r1, [sp, #12]
    1950:	47a8      	blx	r5
    1952:	0002      	movs	r2, r0
    1954:	000b      	movs	r3, r1
    1956:	0030      	movs	r0, r6
    1958:	0039      	movs	r1, r7
    195a:	47a0      	blx	r4
    195c:	9a06      	ldr	r2, [sp, #24]
    195e:	9b07      	ldr	r3, [sp, #28]
    1960:	4e4c      	ldr	r6, [pc, #304]	; (1a94 <computeKalmanGains+0x71c>)
    1962:	47b0      	blx	r6
    1964:	0002      	movs	r2, r0
    1966:	000b      	movs	r3, r1
    1968:	9036      	str	r0, [sp, #216]	; 0xd8
    196a:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    196c:	4e48      	ldr	r6, [pc, #288]	; (1a90 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    196e:	924a      	str	r2, [sp, #296]	; 0x128
    1970:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1972:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1974:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1976:	2000      	movs	r0, #0
    1978:	4947      	ldr	r1, [pc, #284]	; (1a98 <computeKalmanGains+0x720>)
    197a:	47b0      	blx	r6
    197c:	0002      	movs	r2, r0
    197e:	000b      	movs	r3, r1
    1980:	900c      	str	r0, [sp, #48]	; 0x30
    1982:	910d      	str	r1, [sp, #52]	; 0x34
    1984:	9808      	ldr	r0, [sp, #32]
    1986:	9909      	ldr	r1, [sp, #36]	; 0x24
    1988:	47a8      	blx	r5
    198a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    198c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    198e:	0006      	movs	r6, r0
    1990:	000f      	movs	r7, r1
    1992:	9800      	ldr	r0, [sp, #0]
    1994:	9901      	ldr	r1, [sp, #4]
    1996:	47a8      	blx	r5
    1998:	0002      	movs	r2, r0
    199a:	000b      	movs	r3, r1
    199c:	0030      	movs	r0, r6
    199e:	0039      	movs	r1, r7
    19a0:	4e3b      	ldr	r6, [pc, #236]	; (1a90 <computeKalmanGains+0x718>)
    19a2:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19a8:	9006      	str	r0, [sp, #24]
    19aa:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19ac:	9830      	ldr	r0, [sp, #192]	; 0xc0
    19ae:	9931      	ldr	r1, [sp, #196]	; 0xc4
    19b0:	47a8      	blx	r5
    19b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19b6:	0006      	movs	r6, r0
    19b8:	000f      	movs	r7, r1
    19ba:	9812      	ldr	r0, [sp, #72]	; 0x48
    19bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19be:	47a8      	blx	r5
    19c0:	0002      	movs	r2, r0
    19c2:	000b      	movs	r3, r1
    19c4:	0030      	movs	r0, r6
    19c6:	0039      	movs	r1, r7
    19c8:	4e31      	ldr	r6, [pc, #196]	; (1a90 <computeKalmanGains+0x718>)
    19ca:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19d0:	900a      	str	r0, [sp, #40]	; 0x28
    19d2:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19d4:	9804      	ldr	r0, [sp, #16]
    19d6:	9916      	ldr	r1, [sp, #88]	; 0x58
    19d8:	47a8      	blx	r5
    19da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19de:	0006      	movs	r6, r0
    19e0:	000f      	movs	r7, r1
    19e2:	9802      	ldr	r0, [sp, #8]
    19e4:	9903      	ldr	r1, [sp, #12]
    19e6:	47a8      	blx	r5
    19e8:	0002      	movs	r2, r0
    19ea:	000b      	movs	r3, r1
    19ec:	0030      	movs	r0, r6
    19ee:	0039      	movs	r1, r7
    19f0:	4e27      	ldr	r6, [pc, #156]	; (1a90 <computeKalmanGains+0x718>)
    19f2:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19f4:	2280      	movs	r2, #128	; 0x80
    19f6:	0612      	lsls	r2, r2, #24
    19f8:	4694      	mov	ip, r2
    19fa:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    19fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    19fe:	4463      	add	r3, ip
    1a00:	932f      	str	r3, [sp, #188]	; 0xbc
    1a02:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a04:	900c      	str	r0, [sp, #48]	; 0x30
    1a06:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a08:	9808      	ldr	r0, [sp, #32]
    1a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a0c:	47a8      	blx	r5
    1a0e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1a10:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1a12:	47a0      	blx	r4
    1a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a18:	0006      	movs	r6, r0
    1a1a:	000f      	movs	r7, r1
    1a1c:	9800      	ldr	r0, [sp, #0]
    1a1e:	9901      	ldr	r1, [sp, #4]
    1a20:	47a8      	blx	r5
    1a22:	0002      	movs	r2, r0
    1a24:	000b      	movs	r3, r1
    1a26:	0030      	movs	r0, r6
    1a28:	0039      	movs	r1, r7
    1a2a:	4e19      	ldr	r6, [pc, #100]	; (1a90 <computeKalmanGains+0x718>)
    1a2c:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a2e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a30:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a32:	9008      	str	r0, [sp, #32]
    1a34:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a36:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a38:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a3a:	47a0      	blx	r4
    1a3c:	4a10      	ldr	r2, [pc, #64]	; (1a80 <computeKalmanGains+0x708>)
    1a3e:	0006      	movs	r6, r0
    1a40:	000f      	movs	r7, r1
    1a42:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a44:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a46:	4b0f      	ldr	r3, [pc, #60]	; (1a84 <computeKalmanGains+0x70c>)
    1a48:	47a8      	blx	r5
    1a4a:	0002      	movs	r2, r0
    1a4c:	000b      	movs	r3, r1
    1a4e:	0030      	movs	r0, r6
    1a50:	0039      	movs	r1, r7
    1a52:	47a0      	blx	r4
    1a54:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a56:	0006      	movs	r6, r0
    1a58:	000f      	movs	r7, r1
    1a5a:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a5c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a5e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a60:	47a8      	blx	r5
    1a62:	0002      	movs	r2, r0
    1a64:	000b      	movs	r3, r1
    1a66:	0030      	movs	r0, r6
    1a68:	0039      	movs	r1, r7
    1a6a:	47a0      	blx	r4
    1a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a70:	0006      	movs	r6, r0
    1a72:	000f      	movs	r7, r1
    1a74:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a78:	47a8      	blx	r5
    1a7a:	0002      	movs	r2, r0
    1a7c:	000b      	movs	r3, r1
    1a7e:	e00d      	b.n	1a9c <computeKalmanGains+0x724>
    1a80:	d2f1a9fc 	.word	0xd2f1a9fc
    1a84:	3f80624d 	.word	0x3f80624d
    1a88:	a0b5ed8d 	.word	0xa0b5ed8d
    1a8c:	3f00c6f7 	.word	0x3f00c6f7
    1a90:	00005725 	.word	0x00005725
    1a94:	000049e9 	.word	0x000049e9
    1a98:	3ff00000 	.word	0x3ff00000
    1a9c:	0030      	movs	r0, r6
    1a9e:	0039      	movs	r1, r7
    1aa0:	4e58      	ldr	r6, [pc, #352]	; (1c04 <computeKalmanGains+0x88c>)
    1aa2:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aa4:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1aa6:	900e      	str	r0, [sp, #56]	; 0x38
    1aa8:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aaa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1aac:	9804      	ldr	r0, [sp, #16]
    1aae:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ab0:	47a8      	blx	r5
    1ab2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ab4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1ab6:	47a0      	blx	r4
    1ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1abc:	0006      	movs	r6, r0
    1abe:	000f      	movs	r7, r1
    1ac0:	9802      	ldr	r0, [sp, #8]
    1ac2:	9903      	ldr	r1, [sp, #12]
    1ac4:	47a8      	blx	r5
    1ac6:	4c4f      	ldr	r4, [pc, #316]	; (1c04 <computeKalmanGains+0x88c>)
    1ac8:	0002      	movs	r2, r0
    1aca:	000b      	movs	r3, r1
    1acc:	0030      	movs	r0, r6
    1ace:	0039      	movs	r1, r7
    1ad0:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ad2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ad4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ad6:	9004      	str	r0, [sp, #16]
    1ad8:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ada:	2000      	movs	r0, #0
    1adc:	494a      	ldr	r1, [pc, #296]	; (1c08 <computeKalmanGains+0x890>)
    1ade:	47a0      	blx	r4
    1ae0:	0002      	movs	r2, r0
    1ae2:	000b      	movs	r3, r1
    1ae4:	9016      	str	r0, [sp, #88]	; 0x58
    1ae6:	9117      	str	r1, [sp, #92]	; 0x5c
    1ae8:	9800      	ldr	r0, [sp, #0]
    1aea:	9901      	ldr	r1, [sp, #4]
    1aec:	47a8      	blx	r5
    1aee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1af2:	0006      	movs	r6, r0
    1af4:	000f      	movs	r7, r1
    1af6:	9800      	ldr	r0, [sp, #0]
    1af8:	9901      	ldr	r1, [sp, #4]
    1afa:	47a8      	blx	r5
    1afc:	0002      	movs	r2, r0
    1afe:	000b      	movs	r3, r1
    1b00:	0030      	movs	r0, r6
    1b02:	0039      	movs	r1, r7
    1b04:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b06:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b0a:	9010      	str	r0, [sp, #64]	; 0x40
    1b0c:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b0e:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b10:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b12:	47a8      	blx	r5
    1b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b18:	0006      	movs	r6, r0
    1b1a:	000f      	movs	r7, r1
    1b1c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b20:	47a8      	blx	r5
    1b22:	0002      	movs	r2, r0
    1b24:	000b      	movs	r3, r1
    1b26:	0030      	movs	r0, r6
    1b28:	0039      	movs	r1, r7
    1b2a:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b30:	9012      	str	r0, [sp, #72]	; 0x48
    1b32:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b34:	9802      	ldr	r0, [sp, #8]
    1b36:	9903      	ldr	r1, [sp, #12]
    1b38:	47a8      	blx	r5
    1b3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b3e:	0006      	movs	r6, r0
    1b40:	000f      	movs	r7, r1
    1b42:	9802      	ldr	r0, [sp, #8]
    1b44:	9903      	ldr	r1, [sp, #12]
    1b46:	47a8      	blx	r5
    1b48:	000b      	movs	r3, r1
    1b4a:	0002      	movs	r2, r0
    1b4c:	0039      	movs	r1, r7
    1b4e:	0030      	movs	r0, r6
    1b50:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b52:	2400      	movs	r4, #0
    1b54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b56:	9002      	str	r0, [sp, #8]
    1b58:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b5a:	3301      	adds	r3, #1
    1b5c:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b5e:	ab40      	add	r3, sp, #256	; 0x100
    1b60:	9326      	str	r3, [sp, #152]	; 0x98
    1b62:	4b28      	ldr	r3, [pc, #160]	; (1c04 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b64:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b66:	9328      	str	r3, [sp, #160]	; 0xa0
    1b68:	ab4c      	add	r3, sp, #304	; 0x130
    1b6a:	191b      	adds	r3, r3, r4
    1b6c:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b6e:	2300      	movs	r3, #0
    1b70:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b72:	9b00      	ldr	r3, [sp, #0]
    1b74:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b76:	18e3      	adds	r3, r4, r3
    1b78:	18d3      	adds	r3, r2, r3
    1b7a:	681a      	ldr	r2, [r3, #0]
    1b7c:	685b      	ldr	r3, [r3, #4]
    1b7e:	9218      	str	r2, [sp, #96]	; 0x60
    1b80:	9319      	str	r3, [sp, #100]	; 0x64
    1b82:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b84:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b86:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1b88:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1b8a:	681e      	ldr	r6, [r3, #0]
    1b8c:	685f      	ldr	r7, [r3, #4]
    1b8e:	0032      	movs	r2, r6
    1b90:	003b      	movs	r3, r7
    1b92:	47a8      	blx	r5
    1b94:	0032      	movs	r2, r6
    1b96:	003b      	movs	r3, r7
    1b98:	4d1c      	ldr	r5, [pc, #112]	; (1c0c <computeKalmanGains+0x894>)
    1b9a:	47a8      	blx	r5
    1b9c:	4b1c      	ldr	r3, [pc, #112]	; (1c10 <computeKalmanGains+0x898>)
    1b9e:	4a1d      	ldr	r2, [pc, #116]	; (1c14 <computeKalmanGains+0x89c>)
    1ba0:	4e1d      	ldr	r6, [pc, #116]	; (1c18 <computeKalmanGains+0x8a0>)
    1ba2:	47b0      	blx	r6
                    notdone++;
    1ba4:	1e43      	subs	r3, r0, #1
    1ba6:	4198      	sbcs	r0, r3
    1ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1baa:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1bac:	181b      	adds	r3, r3, r0
    1bae:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1bb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bb4:	c10c      	stmia	r1!, {r2, r3}
    1bb6:	9b00      	ldr	r3, [sp, #0]
    1bb8:	9116      	str	r1, [sp, #88]	; 0x58
    1bba:	3308      	adds	r3, #8
    1bbc:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1bbe:	2b10      	cmp	r3, #16
    1bc0:	d1d7      	bne.n	1b72 <computeKalmanGains+0x7fa>
    1bc2:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1bc4:	2c30      	cmp	r4, #48	; 0x30
    1bc6:	d1cf      	bne.n	1b68 <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1bc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d001      	beq.n	1bd2 <computeKalmanGains+0x85a>
    1bce:	f7ff fc38 	bl	1442 <computeKalmanGains+0xca>
    1bd2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bd4:	2b63      	cmp	r3, #99	; 0x63
    1bd6:	dc01      	bgt.n	1bdc <computeKalmanGains+0x864>
    1bd8:	f7ff fc33 	bl	1442 <computeKalmanGains+0xca>
    1bdc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1bde:	aa42      	add	r2, sp, #264	; 0x108
    1be0:	0019      	movs	r1, r3
    1be2:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1be4:	0010      	movs	r0, r2
    1be6:	3808      	subs	r0, #8
    1be8:	6804      	ldr	r4, [r0, #0]
    1bea:	6845      	ldr	r5, [r0, #4]
    1bec:	601c      	str	r4, [r3, #0]
    1bee:	605d      	str	r5, [r3, #4]
    1bf0:	6814      	ldr	r4, [r2, #0]
    1bf2:	6855      	ldr	r5, [r2, #4]
    1bf4:	609c      	str	r4, [r3, #8]
    1bf6:	60dd      	str	r5, [r3, #12]
    1bf8:	3310      	adds	r3, #16
    1bfa:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1bfc:	4299      	cmp	r1, r3
    1bfe:	d1f1      	bne.n	1be4 <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1c00:	b059      	add	sp, #356	; 0x164
    1c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c04:	00005725 	.word	0x00005725
    1c08:	3ff00000 	.word	0x3ff00000
    1c0c:	000049e9 	.word	0x000049e9
    1c10:	3ee4f8b5 	.word	0x3ee4f8b5
    1c14:	88e368f1 	.word	0x88e368f1
    1c18:	00003ac9 	.word	0x00003ac9

00001c1c <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c1c:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c20:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c22:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c24:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c26:	6818      	ldr	r0, [r3, #0]
    1c28:	4b8c      	ldr	r3, [pc, #560]	; (1e5c <computeKalmanStates+0x240>)
    1c2a:	4798      	blx	r3
    1c2c:	003b      	movs	r3, r7
    1c2e:	33b8      	adds	r3, #184	; 0xb8
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	685b      	ldr	r3, [r3, #4]
    1c34:	4c8a      	ldr	r4, [pc, #552]	; (1e60 <computeKalmanStates+0x244>)
    1c36:	47a0      	blx	r4
    1c38:	4a8a      	ldr	r2, [pc, #552]	; (1e64 <computeKalmanStates+0x248>)
    1c3a:	4b8b      	ldr	r3, [pc, #556]	; (1e68 <computeKalmanStates+0x24c>)
    1c3c:	4d8b      	ldr	r5, [pc, #556]	; (1e6c <computeKalmanStates+0x250>)
    1c3e:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c40:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    1c42:	6b7e      	ldr	r6, [r7, #52]	; 0x34
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c44:	9000      	str	r0, [sp, #0]
    1c46:	9101      	str	r1, [sp, #4]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    1c4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1c4c:	4c88      	ldr	r4, [pc, #544]	; (1e70 <computeKalmanStates+0x254>)
    1c4e:	2200      	movs	r2, #0
    1c50:	2300      	movs	r3, #0
    1c52:	47a0      	blx	r4
    1c54:	4c82      	ldr	r4, [pc, #520]	; (1e60 <computeKalmanStates+0x244>)
    1c56:	2800      	cmp	r0, #0
    1c58:	d001      	beq.n	1c5e <computeKalmanStates+0x42>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1c5a:	67bd      	str	r5, [r7, #120]	; 0x78
    1c5c:	67fe      	str	r6, [r7, #124]	; 0x7c
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c5e:	003b      	movs	r3, r7
    1c60:	3390      	adds	r3, #144	; 0x90
    1c62:	930a      	str	r3, [sp, #40]	; 0x28
    1c64:	0028      	movs	r0, r5
    1c66:	681a      	ldr	r2, [r3, #0]
    1c68:	685b      	ldr	r3, [r3, #4]
    1c6a:	0031      	movs	r1, r6
    1c6c:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c6e:	003b      	movs	r3, r7
    1c70:	33a0      	adds	r3, #160	; 0xa0
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c72:	9006      	str	r0, [sp, #24]
    1c74:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c76:	9800      	ldr	r0, [sp, #0]
    1c78:	9901      	ldr	r1, [sp, #4]
    1c7a:	930d      	str	r3, [sp, #52]	; 0x34
    1c7c:	681a      	ldr	r2, [r3, #0]
    1c7e:	685b      	ldr	r3, [r3, #4]
    1c80:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1c84:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1c86:	9300      	str	r3, [sp, #0]
    1c88:	9401      	str	r4, [sp, #4]
    1c8a:	003b      	movs	r3, r7
    1c8c:	3380      	adds	r3, #128	; 0x80
    1c8e:	930e      	str	r3, [sp, #56]	; 0x38
    1c90:	685c      	ldr	r4, [r3, #4]
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	9302      	str	r3, [sp, #8]
    1c96:	9403      	str	r4, [sp, #12]
    1c98:	003b      	movs	r3, r7
    1c9a:	3388      	adds	r3, #136	; 0x88
    1c9c:	930f      	str	r3, [sp, #60]	; 0x3c
    1c9e:	685c      	ldr	r4, [r3, #4]
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	9304      	str	r3, [sp, #16]
    1ca4:	9405      	str	r4, [sp, #20]
    1ca6:	4b73      	ldr	r3, [pc, #460]	; (1e74 <computeKalmanStates+0x258>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1ca8:	9008      	str	r0, [sp, #32]
    1caa:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1cac:	681a      	ldr	r2, [r3, #0]
    1cae:	685b      	ldr	r3, [r3, #4]
    1cb0:	9800      	ldr	r0, [sp, #0]
    1cb2:	9901      	ldr	r1, [sp, #4]
    1cb4:	4c6d      	ldr	r4, [pc, #436]	; (1e6c <computeKalmanStates+0x250>)
    1cb6:	47a0      	blx	r4
    1cb8:	4b6e      	ldr	r3, [pc, #440]	; (1e74 <computeKalmanStates+0x258>)
    1cba:	4e6c      	ldr	r6, [pc, #432]	; (1e6c <computeKalmanStates+0x250>)
    1cbc:	689a      	ldr	r2, [r3, #8]
    1cbe:	68db      	ldr	r3, [r3, #12]
    1cc0:	0004      	movs	r4, r0
    1cc2:	000d      	movs	r5, r1
    1cc4:	9802      	ldr	r0, [sp, #8]
    1cc6:	9903      	ldr	r1, [sp, #12]
    1cc8:	47b0      	blx	r6
    1cca:	0002      	movs	r2, r0
    1ccc:	000b      	movs	r3, r1
    1cce:	0020      	movs	r0, r4
    1cd0:	0029      	movs	r1, r5
    1cd2:	4c69      	ldr	r4, [pc, #420]	; (1e78 <computeKalmanStates+0x25c>)
    1cd4:	47a0      	blx	r4
    1cd6:	4b67      	ldr	r3, [pc, #412]	; (1e74 <computeKalmanStates+0x258>)
    1cd8:	0004      	movs	r4, r0
    1cda:	691a      	ldr	r2, [r3, #16]
    1cdc:	695b      	ldr	r3, [r3, #20]
    1cde:	000d      	movs	r5, r1
    1ce0:	9804      	ldr	r0, [sp, #16]
    1ce2:	9905      	ldr	r1, [sp, #20]
    1ce4:	47b0      	blx	r6
    1ce6:	0002      	movs	r2, r0
    1ce8:	000b      	movs	r3, r1
    1cea:	0020      	movs	r0, r4
    1cec:	0029      	movs	r1, r5
    1cee:	4c62      	ldr	r4, [pc, #392]	; (1e78 <computeKalmanStates+0x25c>)
    1cf0:	47a0      	blx	r4
    1cf2:	0003      	movs	r3, r0
    1cf4:	000c      	movs	r4, r1
    1cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1cf8:	9010      	str	r0, [sp, #64]	; 0x40
    1cfa:	9111      	str	r1, [sp, #68]	; 0x44
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1cfc:	9800      	ldr	r0, [sp, #0]
    1cfe:	9901      	ldr	r1, [sp, #4]
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1d00:	6013      	str	r3, [r2, #0]
    1d02:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1d04:	4b5b      	ldr	r3, [pc, #364]	; (1e74 <computeKalmanStates+0x258>)
    1d06:	699a      	ldr	r2, [r3, #24]
    1d08:	69db      	ldr	r3, [r3, #28]
    1d0a:	47b0      	blx	r6
    1d0c:	4b59      	ldr	r3, [pc, #356]	; (1e74 <computeKalmanStates+0x258>)
    1d0e:	0004      	movs	r4, r0
    1d10:	6a1a      	ldr	r2, [r3, #32]
    1d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d14:	000d      	movs	r5, r1
    1d16:	9802      	ldr	r0, [sp, #8]
    1d18:	9903      	ldr	r1, [sp, #12]
    1d1a:	47b0      	blx	r6
    1d1c:	0002      	movs	r2, r0
    1d1e:	000b      	movs	r3, r1
    1d20:	0020      	movs	r0, r4
    1d22:	0029      	movs	r1, r5
    1d24:	4c54      	ldr	r4, [pc, #336]	; (1e78 <computeKalmanStates+0x25c>)
    1d26:	47a0      	blx	r4
    1d28:	4b52      	ldr	r3, [pc, #328]	; (1e74 <computeKalmanStates+0x258>)
    1d2a:	0004      	movs	r4, r0
    1d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d30:	000d      	movs	r5, r1
    1d32:	9804      	ldr	r0, [sp, #16]
    1d34:	9905      	ldr	r1, [sp, #20]
    1d36:	47b0      	blx	r6
    1d38:	0002      	movs	r2, r0
    1d3a:	000b      	movs	r3, r1
    1d3c:	0020      	movs	r0, r4
    1d3e:	0029      	movs	r1, r5
    1d40:	4c4d      	ldr	r4, [pc, #308]	; (1e78 <computeKalmanStates+0x25c>)
    1d42:	47a0      	blx	r4
    1d44:	003b      	movs	r3, r7
    1d46:	900a      	str	r0, [sp, #40]	; 0x28
    1d48:	910b      	str	r1, [sp, #44]	; 0x2c
    1d4a:	000a      	movs	r2, r1
    1d4c:	0001      	movs	r1, r0
    1d4e:	3398      	adds	r3, #152	; 0x98
    1d50:	6019      	str	r1, [r3, #0]
    1d52:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d54:	9800      	ldr	r0, [sp, #0]
    1d56:	9901      	ldr	r1, [sp, #4]
    1d58:	4b46      	ldr	r3, [pc, #280]	; (1e74 <computeKalmanStates+0x258>)
    1d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d5e:	47b0      	blx	r6
    1d60:	4b44      	ldr	r3, [pc, #272]	; (1e74 <computeKalmanStates+0x258>)
    1d62:	0004      	movs	r4, r0
    1d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d68:	000d      	movs	r5, r1
    1d6a:	9802      	ldr	r0, [sp, #8]
    1d6c:	9903      	ldr	r1, [sp, #12]
    1d6e:	47b0      	blx	r6
    1d70:	0002      	movs	r2, r0
    1d72:	000b      	movs	r3, r1
    1d74:	0020      	movs	r0, r4
    1d76:	0029      	movs	r1, r5
    1d78:	4c3f      	ldr	r4, [pc, #252]	; (1e78 <computeKalmanStates+0x25c>)
    1d7a:	47a0      	blx	r4
    1d7c:	4b3d      	ldr	r3, [pc, #244]	; (1e74 <computeKalmanStates+0x258>)
    1d7e:	0004      	movs	r4, r0
    1d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d84:	000d      	movs	r5, r1
    1d86:	9804      	ldr	r0, [sp, #16]
    1d88:	9905      	ldr	r1, [sp, #20]
    1d8a:	47b0      	blx	r6
    1d8c:	0002      	movs	r2, r0
    1d8e:	000b      	movs	r3, r1
    1d90:	0020      	movs	r0, r4
    1d92:	0029      	movs	r1, r5
    1d94:	4c38      	ldr	r4, [pc, #224]	; (1e78 <computeKalmanStates+0x25c>)
    1d96:	47a0      	blx	r4
    1d98:	0003      	movs	r3, r0
    1d9a:	000c      	movs	r4, r1
    1d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1d9e:	9000      	str	r0, [sp, #0]
    1da0:	9101      	str	r1, [sp, #4]
    1da2:	6013      	str	r3, [r2, #0]
    1da4:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1daa:	9806      	ldr	r0, [sp, #24]
    1dac:	9907      	ldr	r1, [sp, #28]
    1dae:	47b0      	blx	r6
    1db0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1db4:	4c30      	ldr	r4, [pc, #192]	; (1e78 <computeKalmanStates+0x25c>)
    1db6:	47a0      	blx	r4
    1db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dbc:	0004      	movs	r4, r0
    1dbe:	000d      	movs	r5, r1
    1dc0:	9808      	ldr	r0, [sp, #32]
    1dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dc4:	47b0      	blx	r6
    1dc6:	0002      	movs	r2, r0
    1dc8:	000b      	movs	r3, r1
    1dca:	0020      	movs	r0, r4
    1dcc:	0029      	movs	r1, r5
    1dce:	4c2a      	ldr	r4, [pc, #168]	; (1e78 <computeKalmanStates+0x25c>)
    1dd0:	47a0      	blx	r4
    1dd2:	0003      	movs	r3, r0
    1dd4:	000c      	movs	r4, r1
    1dd6:	9002      	str	r0, [sp, #8]
    1dd8:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1dda:	9806      	ldr	r0, [sp, #24]
    1ddc:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1dde:	67bb      	str	r3, [r7, #120]	; 0x78
    1de0:	67fc      	str	r4, [r7, #124]	; 0x7c
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1de6:	47b0      	blx	r6
    1de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dec:	4c22      	ldr	r4, [pc, #136]	; (1e78 <computeKalmanStates+0x25c>)
    1dee:	47a0      	blx	r4
    1df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1df4:	0004      	movs	r4, r0
    1df6:	000d      	movs	r5, r1
    1df8:	9808      	ldr	r0, [sp, #32]
    1dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dfc:	47b0      	blx	r6
    1dfe:	0002      	movs	r2, r0
    1e00:	000b      	movs	r3, r1
    1e02:	0020      	movs	r0, r4
    1e04:	0029      	movs	r1, r5
    1e06:	4c1c      	ldr	r4, [pc, #112]	; (1e78 <computeKalmanStates+0x25c>)
    1e08:	47a0      	blx	r4
    1e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e0c:	6018      	str	r0, [r3, #0]
    1e0e:	6059      	str	r1, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e10:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1e14:	9806      	ldr	r0, [sp, #24]
    1e16:	9907      	ldr	r1, [sp, #28]
    1e18:	47b0      	blx	r6
    1e1a:	9a00      	ldr	r2, [sp, #0]
    1e1c:	9b01      	ldr	r3, [sp, #4]
    1e1e:	4c16      	ldr	r4, [pc, #88]	; (1e78 <computeKalmanStates+0x25c>)
    1e20:	47a0      	blx	r4
    1e22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e26:	0004      	movs	r4, r0
    1e28:	000d      	movs	r5, r1
    1e2a:	9808      	ldr	r0, [sp, #32]
    1e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e2e:	47b0      	blx	r6
    1e30:	0002      	movs	r2, r0
    1e32:	000b      	movs	r3, r1
    1e34:	0020      	movs	r0, r4
    1e36:	0029      	movs	r1, r5
    1e38:	4c0f      	ldr	r4, [pc, #60]	; (1e78 <computeKalmanStates+0x25c>)
    1e3a:	47a0      	blx	r4
    1e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->myKalmanFilter.kalmanAccel = my_altimeter->myKalmanFilter.est[2];
    1e3e:	003c      	movs	r4, r7
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e40:	6018      	str	r0, [r3, #0]
    1e42:	6059      	str	r1, [r3, #4]

    my_altimeter->myKalmanFilter.kalmanAccel = my_altimeter->myKalmanFilter.est[2];
    1e44:	4b0d      	ldr	r3, [pc, #52]	; (1e7c <computeKalmanStates+0x260>)
    1e46:	4798      	blx	r3
    1e48:	34a8      	adds	r4, #168	; 0xa8
    1e4a:	6020      	str	r0, [r4, #0]
    my_altimeter->myKalmanFilter.kalmanAltitude = my_altimeter->myKalmanFilter.est[0];
    1e4c:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <computeKalmanStates+0x264>)
    1e4e:	9802      	ldr	r0, [sp, #8]
    1e50:	9903      	ldr	r1, [sp, #12]
    1e52:	4798      	blx	r3
    1e54:	6060      	str	r0, [r4, #4]


}
    1e56:	b013      	add	sp, #76	; 0x4c
    1e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	00005f6d 	.word	0x00005f6d
    1e60:	00005725 	.word	0x00005725
    1e64:	33daf8df 	.word	0x33daf8df
    1e68:	4040164b 	.word	0x4040164b
    1e6c:	00005231 	.word	0x00005231
    1e70:	00003a95 	.word	0x00003a95
    1e74:	20000010 	.word	0x20000010
    1e78:	00004391 	.word	0x00004391
    1e7c:	00006015 	.word	0x00006015
    1e80:	00003bed 	.word	0x00003bed

00001e84 <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1e86:	2684      	movs	r6, #132	; 0x84
    1e88:	00b6      	lsls	r6, r6, #2
    1e8a:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e8c:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1e8e:	194b      	adds	r3, r1, r5
    1e90:	2bfe      	cmp	r3, #254	; 0xfe
    1e92:	dc03      	bgt.n	1e9c <makePage+0x18>
    1e94:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e96:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1e98:	1947      	adds	r7, r0, r5
    1e9a:	e034      	b.n	1f06 <makePage+0x82>
    1e9c:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1e9e:	195c      	adds	r4, r3, r5
    1ea0:	b2de      	uxtb	r6, r3
    1ea2:	2cfe      	cmp	r4, #254	; 0xfe
    1ea4:	dc08      	bgt.n	1eb8 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1ea6:	9a00      	ldr	r2, [sp, #0]
    1ea8:	4f1f      	ldr	r7, [pc, #124]	; (1f28 <makePage+0xa4>)
    1eaa:	5cd6      	ldrb	r6, [r2, r3]
    1eac:	1904      	adds	r4, r0, r4
    1eae:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eb0:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1eb2:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eb4:	b29b      	uxth	r3, r3
    1eb6:	e7f2      	b.n	1e9e <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1eb8:	2384      	movs	r3, #132	; 0x84
    1eba:	2500      	movs	r5, #0
    1ebc:	009b      	lsls	r3, r3, #2
    1ebe:	54c5      	strb	r5, [r0, r3]
    1ec0:	4b19      	ldr	r3, [pc, #100]	; (1f28 <makePage+0xa4>)
    1ec2:	18c4      	adds	r4, r0, r3
    1ec4:	4b19      	ldr	r3, [pc, #100]	; (1f2c <makePage+0xa8>)
    1ec6:	18c3      	adds	r3, r0, r3
    1ec8:	9301      	str	r3, [sp, #4]
    1eca:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1ecc:	781f      	ldrb	r7, [r3, #0]
    1ece:	46bc      	mov	ip, r7
    1ed0:	4662      	mov	r2, ip
    1ed2:	1e9f      	subs	r7, r3, #2
    1ed4:	3fff      	subs	r7, #255	; 0xff
    1ed6:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ed8:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1eda:	701d      	strb	r5, [r3, #0]
    1edc:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ede:	4293      	cmp	r3, r2
    1ee0:	d1f4      	bne.n	1ecc <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1ee2:	2584      	movs	r5, #132	; 0x84
    1ee4:	0033      	movs	r3, r6
    1ee6:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1ee8:	428b      	cmp	r3, r1
    1eea:	d208      	bcs.n	1efe <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1eec:	9a00      	ldr	r2, [sp, #0]
    1eee:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1ef0:	3301      	adds	r3, #1
    1ef2:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ef4:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1ef6:	1b9f      	subs	r7, r3, r6
    1ef8:	5547      	strb	r7, [r0, r5]
    1efa:	3401      	adds	r4, #1
    1efc:	e7f4      	b.n	1ee8 <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1efe:	2201      	movs	r2, #1
    1f00:	4b0a      	ldr	r3, [pc, #40]	; (1f2c <makePage+0xa8>)
    1f02:	54c2      	strb	r2, [r0, r3]
    1f04:	e00f      	b.n	1f26 <makePage+0xa2>
    1f06:	1c5c      	adds	r4, r3, #1
    1f08:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f0a:	428b      	cmp	r3, r1
    1f0c:	d80b      	bhi.n	1f26 <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1f0e:	9a00      	ldr	r2, [sp, #0]
    1f10:	5cd2      	ldrb	r2, [r2, r3]
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	4694      	mov	ip, r2
    1f16:	4a04      	ldr	r2, [pc, #16]	; (1f28 <makePage+0xa4>)
    1f18:	189b      	adds	r3, r3, r2
    1f1a:	4662      	mov	r2, ip
    1f1c:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1f1e:	192b      	adds	r3, r5, r4
    1f20:	5583      	strb	r3, [r0, r6]
    1f22:	0023      	movs	r3, r4
    1f24:	e7ef      	b.n	1f06 <makePage+0x82>
        }

    }
}
    1f26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f28:	00000211 	.word	0x00000211
    1f2c:	00000311 	.word	0x00000311

00001f30 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f32:	2346      	movs	r3, #70	; 0x46
    1f34:	466a      	mov	r2, sp
    1f36:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1f38:	7843      	ldrb	r3, [r0, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f3a:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1f3c:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1f3e:	0003      	movs	r3, r0
    1f40:	33b0      	adds	r3, #176	; 0xb0
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f46:	0a1a      	lsrs	r2, r3, #8
    1f48:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f4a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1f4c:	0e1b      	lsrs	r3, r3, #24
    1f4e:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f50:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f52:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f54:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f56:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f58:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f5a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1f5c:	0e1b      	lsrs	r3, r3, #24
    1f5e:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f60:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f62:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f64:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f66:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f68:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f6a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f6c:	0e1b      	lsrs	r3, r3, #24
    1f6e:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f70:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f72:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f74:	33e4      	adds	r3, #228	; 0xe4
    1f76:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f78:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f7a:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    1f7c:	0a1b      	lsrs	r3, r3, #8
    1f7e:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1f80:	2110      	movs	r1, #16
    1f82:	4b02      	ldr	r3, [pc, #8]	; (1f8c <logFlight+0x5c>)
    1f84:	4798      	blx	r3
}
    1f86:	b005      	add	sp, #20
    1f88:	bd00      	pop	{pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	00001e85 	.word	0x00001e85

00001f90 <logSensors>:
void logSensors(Altimeter *my_altimeter) {

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f90:	2341      	movs	r3, #65	; 0x41
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
}

void logSensors(Altimeter *my_altimeter) {
    1f92:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f94:	b089      	sub	sp, #36	; 0x24

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f96:	ac02      	add	r4, sp, #8
    1f98:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1f9a:	23c9      	movs	r3, #201	; 0xc9
    1f9c:	009b      	lsls	r3, r3, #2
    1f9e:	58c3      	ldr	r3, [r0, r3]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
}

void logSensors(Altimeter *my_altimeter) {
    1fa0:	0005      	movs	r5, r0
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1fa2:	0a1a      	lsrs	r2, r3, #8

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1fa4:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1fa6:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fa8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1faa:	0e1b      	lsrs	r3, r3, #24
    1fac:	7123      	strb	r3, [r4, #4]
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1fae:	0003      	movs	r3, r0
    1fb0:	33ac      	adds	r3, #172	; 0xac
    1fb2:	681b      	ldr	r3, [r3, #0]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fb4:	70e2      	strb	r2, [r4, #3]
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1fb6:	0a1a      	lsrs	r2, r3, #8
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1fb8:	7163      	strb	r3, [r4, #5]
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1fba:	71a2      	strb	r2, [r4, #6]
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1fbc:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;
    1fbe:	0e1b      	lsrs	r3, r3, #24
    1fc0:	7223      	strb	r3, [r4, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fc2:	0003      	movs	r3, r0
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1fc4:	71e2      	strb	r2, [r4, #7]
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fc6:	33e4      	adds	r3, #228	; 0xe4
    1fc8:	881b      	ldrh	r3, [r3, #0]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    1fca:	ae01      	add	r6, sp, #4
    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1fcc:	7263      	strb	r3, [r4, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1fce:	0a1b      	lsrs	r3, r3, #8
    1fd0:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1fd2:	0003      	movs	r3, r0
    1fd4:	33e8      	adds	r3, #232	; 0xe8
    1fd6:	881b      	ldrh	r3, [r3, #0]
    1fd8:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1fda:	0a1b      	lsrs	r3, r3, #8
    1fdc:	7323      	strb	r3, [r4, #12]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    1fde:	0003      	movs	r3, r0
    1fe0:	33a8      	adds	r3, #168	; 0xa8
    1fe2:	681f      	ldr	r7, [r3, #0]
    1fe4:	4b1c      	ldr	r3, [pc, #112]	; (2058 <STACK_SIZE+0x58>)
    1fe6:	1c38      	adds	r0, r7, #0
    1fe8:	4798      	blx	r3
    1fea:	b280      	uxth	r0, r0
    1fec:	8030      	strh	r0, [r6, #0]
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    1fee:	8830      	ldrh	r0, [r6, #0]
    fractpart = fractional * 1000;
    1ff0:	4b1a      	ldr	r3, [pc, #104]	; (205c <STACK_SIZE+0x5c>)
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    1ff2:	b280      	uxth	r0, r0
    fractpart = fractional * 1000;
    1ff4:	4798      	blx	r3
    1ff6:	4b1a      	ldr	r3, [pc, #104]	; (2060 <STACK_SIZE+0x60>)
    1ff8:	1c01      	adds	r1, r0, #0
    1ffa:	1c38      	adds	r0, r7, #0
    1ffc:	4798      	blx	r3
    1ffe:	4919      	ldr	r1, [pc, #100]	; (2064 <STACK_SIZE+0x64>)
    2000:	4b19      	ldr	r3, [pc, #100]	; (2068 <STACK_SIZE+0x68>)
    2002:	4798      	blx	r3
    2004:	4b19      	ldr	r3, [pc, #100]	; (206c <STACK_SIZE+0x6c>)
    2006:	4798      	blx	r3
    2008:	466b      	mov	r3, sp
    200a:	b280      	uxth	r0, r0
    200c:	80d8      	strh	r0, [r3, #6]

    dataToSend[13] = fractpart >> 0;
    200e:	88da      	ldrh	r2, [r3, #6]
    volatile u16_t intpart;
    volatile u16_t fractpart;

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    fractpart = fractional * 1000;
    2010:	3306      	adds	r3, #6

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;
    2012:	881b      	ldrh	r3, [r3, #0]

    intpart = (int)(my_altimeter->myKalmanFilter.kalmanAccel);
    float fractional = my_altimeter->myKalmanFilter.kalmanAccel - intpart;
    fractpart = fractional * 1000;

    dataToSend[13] = fractpart >> 0;
    2014:	7362      	strb	r2, [r4, #13]
    dataToSend[14] = fractpart >> 8;
    2016:	0a1b      	lsrs	r3, r3, #8
    2018:	73a3      	strb	r3, [r4, #14]

    dataToSend[15] = intpart >> 0;
    201a:	8833      	ldrh	r3, [r6, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    201c:	0022      	movs	r2, r4
    fractpart = fractional * 1000;

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    201e:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = intpart >> 8;
    2020:	8833      	ldrh	r3, [r6, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2022:	2117      	movs	r1, #23

    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    dataToSend[16] = intpart >> 8;
    2024:	0a1b      	lsrs	r3, r3, #8
    2026:	7423      	strb	r3, [r4, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    2028:	002b      	movs	r3, r5
    202a:	33f4      	adds	r3, #244	; 0xf4
    202c:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    202e:	0028      	movs	r0, r5
    dataToSend[13] = fractpart >> 0;
    dataToSend[14] = fractpart >> 8;

    dataToSend[15] = intpart >> 0;
    dataToSend[16] = intpart >> 8;
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    2030:	7463      	strb	r3, [r4, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    2032:	0a1b      	lsrs	r3, r3, #8
    2034:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    2036:	002b      	movs	r3, r5
    2038:	33f8      	adds	r3, #248	; 0xf8
    203a:	881b      	ldrh	r3, [r3, #0]
    203c:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    203e:	0a1b      	lsrs	r3, r3, #8
    2040:	7523      	strb	r3, [r4, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    2042:	002b      	movs	r3, r5
    2044:	33fe      	adds	r3, #254	; 0xfe
    2046:	885b      	ldrh	r3, [r3, #2]
    2048:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    204a:	0a1b      	lsrs	r3, r3, #8
    204c:	75a3      	strb	r3, [r4, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    204e:	4b08      	ldr	r3, [pc, #32]	; (2070 <STACK_SIZE+0x70>)
    2050:	4798      	blx	r3
}
    2052:	b009      	add	sp, #36	; 0x24
    2054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	000042bd 	.word	0x000042bd
    205c:	00004301 	.word	0x00004301
    2060:	00003fb1 	.word	0x00003fb1
    2064:	447a0000 	.word	0x447a0000
    2068:	00003d89 	.word	0x00003d89
    206c:	00003bbd 	.word	0x00003bbd
    2070:	00001e85 	.word	0x00001e85

00002074 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    2074:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2076:	2103      	movs	r1, #3
    2078:	4348      	muls	r0, r1
    207a:	ac01      	add	r4, sp, #4
    207c:	3001      	adds	r0, #1
    207e:	30ff      	adds	r0, #255	; 0xff
    2080:	0022      	movs	r2, r4
    2082:	4b05      	ldr	r3, [pc, #20]	; (2098 <getFlightStartAddress+0x24>)
    2084:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2086:	7860      	ldrb	r0, [r4, #1]
    2088:	78a3      	ldrb	r3, [r4, #2]
    208a:	0200      	lsls	r0, r0, #8
    208c:	041b      	lsls	r3, r3, #16
    208e:	4318      	orrs	r0, r3
    2090:	7823      	ldrb	r3, [r4, #0]
    2092:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2094:	bd16      	pop	{r1, r2, r4, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	00000341 	.word	0x00000341

0000209c <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    209c:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    209e:	2103      	movs	r1, #3
    20a0:	4348      	muls	r0, r1
    20a2:	4b07      	ldr	r3, [pc, #28]	; (20c0 <FindFlightEndingAddress+0x24>)
    20a4:	ac01      	add	r4, sp, #4
    20a6:	18c0      	adds	r0, r0, r3
    20a8:	0022      	movs	r2, r4
    20aa:	4b06      	ldr	r3, [pc, #24]	; (20c4 <FindFlightEndingAddress+0x28>)
    20ac:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    20ae:	7860      	ldrb	r0, [r4, #1]
    20b0:	78a3      	ldrb	r3, [r4, #2]
    20b2:	0200      	lsls	r0, r0, #8
    20b4:	041b      	lsls	r3, r3, #16
    20b6:	4318      	orrs	r0, r3
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    20bc:	bd16      	pop	{r1, r2, r4, pc}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	00000203 	.word	0x00000203
    20c4:	00000341 	.word	0x00000341

000020c8 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    20c8:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    20ca:	4b04      	ldr	r3, [pc, #16]	; (20dc <isFlightLogged+0x14>)
    20cc:	4798      	blx	r3
    20ce:	4b04      	ldr	r3, [pc, #16]	; (20e0 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    20d0:	18c0      	adds	r0, r0, r3
    20d2:	1e43      	subs	r3, r0, #1
    20d4:	4198      	sbcs	r0, r3
    20d6:	b2c0      	uxtb	r0, r0
    20d8:	bd10      	pop	{r4, pc}
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	00002075 	.word	0x00002075
    20e0:	ff000001 	.word	0xff000001

000020e4 <writeFlightEndAddress>:



void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    20e4:	0003      	movs	r3, r0
    }
}



void writeFlightEndAddress(Altimeter *my_altimeter) {
    20e6:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    20e8:	33fc      	adds	r3, #252	; 0xfc
    20ea:	68db      	ldr	r3, [r3, #12]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    20ec:	aa01      	add	r2, sp, #4
    20ee:	0a19      	lsrs	r1, r3, #8
    20f0:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x03);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    20f2:	2103      	movs	r1, #3

void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    20f4:	7013      	strb	r3, [r2, #0]
    20f6:	0c1b      	lsrs	r3, r3, #16
    20f8:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x03);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    20fa:	7840      	ldrb	r0, [r0, #1]
    20fc:	4b04      	ldr	r3, [pc, #16]	; (2110 <writeFlightEndAddress+0x2c>)
    20fe:	4348      	muls	r0, r1
    2100:	18c0      	adds	r0, r0, r3
    2102:	4b04      	ldr	r3, [pc, #16]	; (2114 <writeFlightEndAddress+0x30>)
    2104:	4798      	blx	r3
    delay_ms(10);
    2106:	200a      	movs	r0, #10
    2108:	4b03      	ldr	r3, [pc, #12]	; (2118 <writeFlightEndAddress+0x34>)
    210a:	4798      	blx	r3

}
    210c:	bd07      	pop	{r0, r1, r2, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00000203 	.word	0x00000203
    2114:	00000255 	.word	0x00000255
    2118:	00000f55 	.word	0x00000f55

0000211c <findNewFlightStart>:




void findNewFlightStart(Altimeter *my_altimeter) {
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    211e:	2400      	movs	r4, #0
}




void findNewFlightStart(Altimeter *my_altimeter) {
    2120:	b085      	sub	sp, #20
    2122:	9001      	str	r0, [sp, #4]

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {
    2124:	0020      	movs	r0, r4
    2126:	4b24      	ldr	r3, [pc, #144]	; (21b8 <findNewFlightStart+0x9c>)
    2128:	4798      	blx	r3
    212a:	2800      	cmp	r0, #0
    212c:	d13d      	bne.n	21aa <findNewFlightStart+0x8e>
    212e:	9f01      	ldr	r7, [sp, #4]
    2130:	ad03      	add	r5, sp, #12
    2132:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    2134:	2c00      	cmp	r4, #0
    2136:	d016      	beq.n	2166 <findNewFlightStart+0x4a>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2138:	1e60      	subs	r0, r4, #1
    213a:	4b20      	ldr	r3, [pc, #128]	; (21bc <findNewFlightStart+0xa0>)
    213c:	b2c0      	uxtb	r0, r0
    213e:	4798      	blx	r3
                delay_ms(5);
    2140:	4b1f      	ldr	r3, [pc, #124]	; (21c0 <findNewFlightStart+0xa4>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2142:	0006      	movs	r6, r0
                delay_ms(5);
    2144:	2005      	movs	r0, #5
    2146:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2148:	2103      	movs	r1, #3
    214a:	0008      	movs	r0, r1
    214c:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    214e:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2150:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;
    2152:	60fe      	str	r6, [r7, #12]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2154:	702e      	strb	r6, [r5, #0]
    2156:	706b      	strb	r3, [r5, #1]
    2158:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    215a:	30ff      	adds	r0, #255	; 0xff
    215c:	002a      	movs	r2, r5
    215e:	4b19      	ldr	r3, [pc, #100]	; (21c4 <findNewFlightStart+0xa8>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2160:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2162:	4798      	blx	r3
    2164:	e00f      	b.n	2186 <findNewFlightStart+0x6a>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2166:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2168:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    216a:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    216c:	0040      	lsls	r0, r0, #1
    216e:	4b15      	ldr	r3, [pc, #84]	; (21c4 <findNewFlightStart+0xa8>)
    2170:	002a      	movs	r2, r5
    2172:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2174:	702c      	strb	r4, [r5, #0]
    2176:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2178:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    217a:	2380      	movs	r3, #128	; 0x80
    217c:	015b      	lsls	r3, r3, #5
    217e:	60fb      	str	r3, [r7, #12]
                beep(1500);
    2180:	4811      	ldr	r0, [pc, #68]	; (21c8 <findNewFlightStart+0xac>)
    2182:	4b12      	ldr	r3, [pc, #72]	; (21cc <findNewFlightStart+0xb0>)
    2184:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    2186:	9b01      	ldr	r3, [sp, #4]
    2188:	705c      	strb	r4, [r3, #1]

            while (flightNumbToCheck > 0) {
                beep(500);
    218a:	20fa      	movs	r0, #250	; 0xfa
    218c:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    218e:	2c00      	cmp	r4, #0
    2190:	d008      	beq.n	21a4 <findNewFlightStart+0x88>
                beep(500);
    2192:	4b0e      	ldr	r3, [pc, #56]	; (21cc <findNewFlightStart+0xb0>)
    2194:	4798      	blx	r3
                delay_ms(500);
    2196:	20fa      	movs	r0, #250	; 0xfa
    2198:	4b09      	ldr	r3, [pc, #36]	; (21c0 <findNewFlightStart+0xa4>)
    219a:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    219c:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    219e:	4798      	blx	r3
                --flightNumbToCheck;
    21a0:	b2e4      	uxtb	r4, r4
    21a2:	e7f2      	b.n	218a <findNewFlightStart+0x6e>
            }
            delay_ms(500);
    21a4:	4b06      	ldr	r3, [pc, #24]	; (21c0 <findNewFlightStart+0xa4>)
    21a6:	4798      	blx	r3
            break;
    21a8:	e003      	b.n	21b2 <findNewFlightStart+0x96>



void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    21aa:	3401      	adds	r4, #1
    21ac:	b2e4      	uxtb	r4, r4
    21ae:	2c14      	cmp	r4, #20
    21b0:	d1b8      	bne.n	2124 <findNewFlightStart+0x8>
            }
            delay_ms(500);
            break;
        }
    }
}
    21b2:	b005      	add	sp, #20
    21b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	000020c9 	.word	0x000020c9
    21bc:	0000209d 	.word	0x0000209d
    21c0:	00000f55 	.word	0x00000f55
    21c4:	00000255 	.word	0x00000255
    21c8:	000005dc 	.word	0x000005dc
    21cc:	00000d3d 	.word	0x00000d3d

000021d0 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    21d0:	4b01      	ldr	r3, [pc, #4]	; (21d8 <takeSample+0x8>)
    21d2:	7818      	ldrb	r0, [r3, #0]
}
    21d4:	4770      	bx	lr
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	200004d3 	.word	0x200004d3

000021dc <pullSample>:

void pullSample() {
    SampleBool = true;
    21dc:	2201      	movs	r2, #1
    21de:	4b01      	ldr	r3, [pc, #4]	; (21e4 <pullSample+0x8>)
    21e0:	701a      	strb	r2, [r3, #0]
}
    21e2:	4770      	bx	lr
    21e4:	200004d3 	.word	0x200004d3

000021e8 <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21e8:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    21ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21ec:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    21ee:	0004      	movs	r4, r0
    SampleBool = false;
    21f0:	4be3      	ldr	r3, [pc, #908]	; (2580 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    21f2:	b087      	sub	sp, #28
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21f4:	4ee3      	ldr	r6, [pc, #908]	; (2584 <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21f6:	701a      	strb	r2, [r3, #0]

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21f8:	47b0      	blx	r6
    21fa:	00ad      	lsls	r5, r5, #2
    21fc:	5963      	ldr	r3, [r4, r5]
    21fe:	1ac0      	subs	r0, r0, r3
    2200:	23cb      	movs	r3, #203	; 0xcb
    2202:	009b      	lsls	r3, r3, #2
    2204:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    2206:	47b0      	blx	r6
    2208:	5160      	str	r0, [r4, r5]

    my_altimeter->batV = adc_read(senseBatPin);
    220a:	4ddf      	ldr	r5, [pc, #892]	; (2588 <sampleTick+0x3a0>)
    220c:	4edf      	ldr	r6, [pc, #892]	; (258c <sampleTick+0x3a4>)
    220e:	786b      	ldrb	r3, [r5, #1]
    2210:	7829      	ldrb	r1, [r5, #0]
    2212:	78a8      	ldrb	r0, [r5, #2]
    2214:	021b      	lsls	r3, r3, #8
    2216:	430b      	orrs	r3, r1
    2218:	0400      	lsls	r0, r0, #16
    221a:	001a      	movs	r2, r3
    221c:	0003      	movs	r3, r0
    221e:	78e8      	ldrb	r0, [r5, #3]
    2220:	4313      	orrs	r3, r2
    2222:	0600      	lsls	r0, r0, #24
    2224:	7929      	ldrb	r1, [r5, #4]
    2226:	4318      	orrs	r0, r3
    2228:	47b0      	blx	r6
    222a:	23c5      	movs	r3, #197	; 0xc5
    222c:	009b      	lsls	r3, r3, #2
    222e:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;
    2230:	4bd7      	ldr	r3, [pc, #860]	; (2590 <sampleTick+0x3a8>)
    2232:	4798      	blx	r3
    2234:	4ad7      	ldr	r2, [pc, #860]	; (2594 <sampleTick+0x3ac>)
    2236:	4fd8      	ldr	r7, [pc, #864]	; (2598 <sampleTick+0x3b0>)
    2238:	4bd8      	ldr	r3, [pc, #864]	; (259c <sampleTick+0x3b4>)
    223a:	47b8      	blx	r7
    223c:	4bd8      	ldr	r3, [pc, #864]	; (25a0 <sampleTick+0x3b8>)
    223e:	4798      	blx	r3
    2240:	23c6      	movs	r3, #198	; 0xc6
    2242:	009b      	lsls	r3, r3, #2
    2244:	50e0      	str	r0, [r4, r3]

    my_altimeter->senseA = adc_read(senseAPin);
    2246:	79ab      	ldrb	r3, [r5, #6]
    2248:	7969      	ldrb	r1, [r5, #5]
    224a:	79e8      	ldrb	r0, [r5, #7]
    224c:	021b      	lsls	r3, r3, #8
    224e:	430b      	orrs	r3, r1
    2250:	0400      	lsls	r0, r0, #16
    2252:	001a      	movs	r2, r3
    2254:	0003      	movs	r3, r0
    2256:	7a28      	ldrb	r0, [r5, #8]
    2258:	4313      	orrs	r3, r2
    225a:	0600      	lsls	r0, r0, #24
    225c:	7a69      	ldrb	r1, [r5, #9]
    225e:	4318      	orrs	r0, r3
    2260:	47b0      	blx	r6
    2262:	23c7      	movs	r3, #199	; 0xc7
    2264:	009b      	lsls	r3, r3, #2
    2266:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    2268:	7aeb      	ldrb	r3, [r5, #11]
    226a:	7aa9      	ldrb	r1, [r5, #10]
    226c:	7b28      	ldrb	r0, [r5, #12]
    226e:	021b      	lsls	r3, r3, #8
    2270:	430b      	orrs	r3, r1
    2272:	0400      	lsls	r0, r0, #16
    2274:	001a      	movs	r2, r3
    2276:	0003      	movs	r3, r0
    2278:	7b68      	ldrb	r0, [r5, #13]
    227a:	4313      	orrs	r3, r2
    227c:	0600      	lsls	r0, r0, #24
    227e:	7ba9      	ldrb	r1, [r5, #14]
    2280:	4318      	orrs	r0, r3
    2282:	47b0      	blx	r6
    2284:	4bc7      	ldr	r3, [pc, #796]	; (25a4 <sampleTick+0x3bc>)
    my_altimeter->senseC = adc_read(senseCPin);
    2286:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    2288:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    228a:	7c2b      	ldrb	r3, [r5, #16]
    228c:	7c68      	ldrb	r0, [r5, #17]
    228e:	021b      	lsls	r3, r3, #8
    2290:	430b      	orrs	r3, r1
    2292:	0400      	lsls	r0, r0, #16
    2294:	001a      	movs	r2, r3
    2296:	0003      	movs	r3, r0
    2298:	7ca8      	ldrb	r0, [r5, #18]
    229a:	4313      	orrs	r3, r2
    229c:	0600      	lsls	r0, r0, #24
    229e:	7ce9      	ldrb	r1, [r5, #19]
    22a0:	4318      	orrs	r0, r3
    22a2:	47b0      	blx	r6
    22a4:	23c8      	movs	r3, #200	; 0xc8
    22a6:	009b      	lsls	r3, r3, #2
    22a8:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    22aa:	7d6b      	ldrb	r3, [r5, #21]
    22ac:	7d29      	ldrb	r1, [r5, #20]
    22ae:	7da8      	ldrb	r0, [r5, #22]
    22b0:	021b      	lsls	r3, r3, #8
    22b2:	430b      	orrs	r3, r1
    22b4:	0400      	lsls	r0, r0, #16
    22b6:	001a      	movs	r2, r3
    22b8:	0003      	movs	r3, r0
    22ba:	7de8      	ldrb	r0, [r5, #23]
    22bc:	4313      	orrs	r3, r2
    22be:	0600      	lsls	r0, r0, #24
    22c0:	7e29      	ldrb	r1, [r5, #24]
    22c2:	4318      	orrs	r0, r3
    22c4:	47b0      	blx	r6
    22c6:	4bb8      	ldr	r3, [pc, #736]	; (25a8 <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22c8:	7e69      	ldrb	r1, [r5, #25]
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);
    22ca:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22cc:	7eab      	ldrb	r3, [r5, #26]
    22ce:	7ee8      	ldrb	r0, [r5, #27]
    22d0:	021b      	lsls	r3, r3, #8
    22d2:	430b      	orrs	r3, r1
    22d4:	0400      	lsls	r0, r0, #16
    22d6:	001a      	movs	r2, r3
    22d8:	0003      	movs	r3, r0
    22da:	7f28      	ldrb	r0, [r5, #28]
    22dc:	4313      	orrs	r3, r2
    22de:	0600      	lsls	r0, r0, #24
    22e0:	7f69      	ldrb	r1, [r5, #29]
    22e2:	4318      	orrs	r0, r3
    22e4:	47b0      	blx	r6
    22e6:	0023      	movs	r3, r4
    22e8:	33fe      	adds	r3, #254	; 0xfe
    22ea:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    22ec:	4baf      	ldr	r3, [pc, #700]	; (25ac <sampleTick+0x3c4>)
    22ee:	0026      	movs	r6, r4
    22f0:	18c0      	adds	r0, r0, r3
    22f2:	4ba7      	ldr	r3, [pc, #668]	; (2590 <sampleTick+0x3a8>)
    22f4:	4798      	blx	r3
    22f6:	4aae      	ldr	r2, [pc, #696]	; (25b0 <sampleTick+0x3c8>)
    22f8:	4fa7      	ldr	r7, [pc, #668]	; (2598 <sampleTick+0x3b0>)
    22fa:	4bae      	ldr	r3, [pc, #696]	; (25b4 <sampleTick+0x3cc>)
    22fc:	47b8      	blx	r7
    22fe:	4ba8      	ldr	r3, [pc, #672]	; (25a0 <sampleTick+0x3b8>)
    2300:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2302:	0022      	movs	r2, r4
    2304:	0023      	movs	r3, r4
    2306:	32c8      	adds	r2, #200	; 0xc8
    2308:	9204      	str	r2, [sp, #16]
    230a:	6812      	ldr	r2, [r2, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    230c:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    230e:	33cc      	adds	r3, #204	; 0xcc
    2310:	2780      	movs	r7, #128	; 0x80
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2312:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2314:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    2316:	2250      	movs	r2, #80	; 0x50
    2318:	4ba7      	ldr	r3, [pc, #668]	; (25b8 <sampleTick+0x3d0>)
    231a:	023f      	lsls	r7, r7, #8
    231c:	615f      	str	r7, [r3, #20]
    231e:	002e      	movs	r6, r5
    2320:	9200      	str	r2, [sp, #0]
    2322:	7fea      	ldrb	r2, [r5, #31]
    2324:	7fa8      	ldrb	r0, [r5, #30]
    2326:	0212      	lsls	r2, r2, #8
    2328:	4302      	orrs	r2, r0
    232a:	0011      	movs	r1, r2
    232c:	002b      	movs	r3, r5
    232e:	361e      	adds	r6, #30
    2330:	78b2      	ldrb	r2, [r6, #2]
    2332:	3323      	adds	r3, #35	; 0x23
    2334:	0412      	lsls	r2, r2, #16
    2336:	430a      	orrs	r2, r1
    2338:	78f1      	ldrb	r1, [r6, #3]
    233a:	7818      	ldrb	r0, [r3, #0]
    233c:	0609      	lsls	r1, r1, #24
    233e:	4311      	orrs	r1, r2
    2340:	7932      	ldrb	r2, [r6, #4]
    2342:	789d      	ldrb	r5, [r3, #2]
    2344:	9203      	str	r2, [sp, #12]
    2346:	785a      	ldrb	r2, [r3, #1]
    2348:	042d      	lsls	r5, r5, #16
    234a:	0212      	lsls	r2, r2, #8
    234c:	4302      	orrs	r2, r0
    234e:	9102      	str	r1, [sp, #8]
    2350:	0011      	movs	r1, r2
    2352:	002a      	movs	r2, r5
    2354:	78dd      	ldrb	r5, [r3, #3]
    2356:	791b      	ldrb	r3, [r3, #4]
    2358:	430a      	orrs	r2, r1
    235a:	062d      	lsls	r5, r5, #24
    235c:	4315      	orrs	r5, r2
    235e:	9305      	str	r3, [sp, #20]
    2360:	9a02      	ldr	r2, [sp, #8]
    2362:	9905      	ldr	r1, [sp, #20]
    2364:	9b03      	ldr	r3, [sp, #12]
    2366:	0028      	movs	r0, r5
    2368:	4e94      	ldr	r6, [pc, #592]	; (25bc <sampleTick+0x3d4>)
    236a:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    236c:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    236e:	4b92      	ldr	r3, [pc, #584]	; (25b8 <sampleTick+0x3d0>)
    2370:	0040      	lsls	r0, r0, #1
    2372:	619f      	str	r7, [r3, #24]
    2374:	4b92      	ldr	r3, [pc, #584]	; (25c0 <sampleTick+0x3d8>)
    2376:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    2378:	4b92      	ldr	r3, [pc, #584]	; (25c4 <sampleTick+0x3dc>)
    237a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    237c:	4b8e      	ldr	r3, [pc, #568]	; (25b8 <sampleTick+0x3d0>)
    237e:	61a0      	str	r0, [r4, #24]
    2380:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    2382:	2346      	movs	r3, #70	; 0x46
    2384:	9a02      	ldr	r2, [sp, #8]
    2386:	9300      	str	r3, [sp, #0]
    2388:	0028      	movs	r0, r5
    238a:	9b03      	ldr	r3, [sp, #12]
    238c:	9905      	ldr	r1, [sp, #20]
    238e:	47b0      	blx	r6
    2390:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2392:	4b89      	ldr	r3, [pc, #548]	; (25b8 <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2394:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2396:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2398:	4b8b      	ldr	r3, [pc, #556]	; (25c8 <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    239a:	4e8c      	ldr	r6, [pc, #560]	; (25cc <sampleTick+0x3e4>)
    239c:	601a      	str	r2, [r3, #0]
    239e:	2182      	movs	r1, #130	; 0x82
    23a0:	2000      	movs	r0, #0
    23a2:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23a4:	21ff      	movs	r1, #255	; 0xff
    23a6:	2000      	movs	r0, #0
    23a8:	47b0      	blx	r6
    23aa:	0023      	movs	r3, r4
    23ac:	33e4      	adds	r3, #228	; 0xe4
    23ae:	8018      	strh	r0, [r3, #0]
    23b0:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23b2:	21ff      	movs	r1, #255	; 0xff
    23b4:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23b6:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23b8:	47b0      	blx	r6
    23ba:	9b02      	ldr	r3, [sp, #8]
    23bc:	0200      	lsls	r0, r0, #8
    23be:	4305      	orrs	r5, r0
    23c0:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23c2:	21ff      	movs	r1, #255	; 0xff
    23c4:	2000      	movs	r0, #0
    23c6:	47b0      	blx	r6
    23c8:	0023      	movs	r3, r4
    23ca:	33e8      	adds	r3, #232	; 0xe8
    23cc:	8018      	strh	r0, [r3, #0]
    23ce:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23d0:	21ff      	movs	r1, #255	; 0xff
    23d2:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23d4:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23d6:	47b0      	blx	r6
    23d8:	9b03      	ldr	r3, [sp, #12]
    23da:	0200      	lsls	r0, r0, #8
    23dc:	4305      	orrs	r5, r0
    23de:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23e0:	21ff      	movs	r1, #255	; 0xff
    23e2:	0025      	movs	r5, r4
    23e4:	2000      	movs	r0, #0
    23e6:	47b0      	blx	r6
    23e8:	35ec      	adds	r5, #236	; 0xec
    23ea:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ec:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23ee:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23f0:	2000      	movs	r0, #0
    23f2:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23f4:	2280      	movs	r2, #128	; 0x80
    23f6:	0200      	lsls	r0, r0, #8
    23f8:	4b75      	ldr	r3, [pc, #468]	; (25d0 <sampleTick+0x3e8>)
    23fa:	4307      	orrs	r7, r0
    23fc:	00d2      	lsls	r2, r2, #3
    23fe:	802f      	strh	r7, [r5, #0]
    2400:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    2402:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2404:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    2406:	2000      	movs	r0, #0
    2408:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    240a:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    240c:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    240e:	2200      	movs	r2, #0
    2410:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    2412:	2102      	movs	r1, #2
    2414:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2416:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2418:	37ee      	adds	r7, #238	; 0xee
    241a:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    241c:	1100      	asrs	r0, r0, #4
    241e:	31e6      	adds	r1, #230	; 0xe6
    2420:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2422:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2424:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    2426:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    2428:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    242a:	4b59      	ldr	r3, [pc, #356]	; (2590 <sampleTick+0x3a8>)
    242c:	4798      	blx	r3
    242e:	23fe      	movs	r3, #254	; 0xfe
    2430:	2200      	movs	r2, #0
    2432:	4d59      	ldr	r5, [pc, #356]	; (2598 <sampleTick+0x3b0>)
    2434:	059b      	lsls	r3, r3, #22
    2436:	47a8      	blx	r5
    2438:	4b59      	ldr	r3, [pc, #356]	; (25a0 <sampleTick+0x3b8>)
    243a:	4798      	blx	r3
    243c:	9b04      	ldr	r3, [sp, #16]
    243e:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2440:	0023      	movs	r3, r4
    2442:	33d0      	adds	r3, #208	; 0xd0
    2444:	9303      	str	r3, [sp, #12]
    2446:	9b02      	ldr	r3, [sp, #8]
    2448:	2000      	movs	r0, #0
    244a:	5e18      	ldrsh	r0, [r3, r0]
    244c:	4b50      	ldr	r3, [pc, #320]	; (2590 <sampleTick+0x3a8>)
    244e:	4798      	blx	r3
    2450:	23fe      	movs	r3, #254	; 0xfe
    2452:	2200      	movs	r2, #0
    2454:	059b      	lsls	r3, r3, #22
    2456:	47a8      	blx	r5
    2458:	4b51      	ldr	r3, [pc, #324]	; (25a0 <sampleTick+0x3b8>)
    245a:	4798      	blx	r3
    245c:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    245e:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2460:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    2462:	2300      	movs	r3, #0
    2464:	5ef8      	ldrsh	r0, [r7, r3]
    2466:	4b4a      	ldr	r3, [pc, #296]	; (2590 <sampleTick+0x3a8>)
    2468:	4798      	blx	r3
    246a:	23fe      	movs	r3, #254	; 0xfe
    246c:	2200      	movs	r2, #0
    246e:	4f4a      	ldr	r7, [pc, #296]	; (2598 <sampleTick+0x3b0>)
    2470:	059b      	lsls	r3, r3, #22
    2472:	47b8      	blx	r7
    2474:	4b4a      	ldr	r3, [pc, #296]	; (25a0 <sampleTick+0x3b8>)
    2476:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2478:	2280      	movs	r2, #128	; 0x80
    247a:	4b4f      	ldr	r3, [pc, #316]	; (25b8 <sampleTick+0x3d0>)
    247c:	00d2      	lsls	r2, r2, #3
    247e:	35d4      	adds	r5, #212	; 0xd4
    2480:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2482:	2182      	movs	r1, #130	; 0x82
    2484:	615a      	str	r2, [r3, #20]
    2486:	2000      	movs	r0, #0
    2488:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    248a:	21ff      	movs	r1, #255	; 0xff
    248c:	2000      	movs	r0, #0
    248e:	47b0      	blx	r6
    2490:	0023      	movs	r3, r4
    2492:	33f0      	adds	r3, #240	; 0xf0
    2494:	8018      	strh	r0, [r3, #0]
    2496:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2498:	21ff      	movs	r1, #255	; 0xff
    249a:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    249c:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    249e:	47b0      	blx	r6
    24a0:	9b02      	ldr	r3, [sp, #8]
    24a2:	0200      	lsls	r0, r0, #8
    24a4:	4305      	orrs	r5, r0
    24a6:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24a8:	21ff      	movs	r1, #255	; 0xff
    24aa:	2000      	movs	r0, #0
    24ac:	47b0      	blx	r6
    24ae:	0023      	movs	r3, r4
    24b0:	33f4      	adds	r3, #244	; 0xf4
    24b2:	8018      	strh	r0, [r3, #0]
    24b4:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24b6:	21ff      	movs	r1, #255	; 0xff
    24b8:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ba:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24bc:	47b0      	blx	r6
    24be:	9b03      	ldr	r3, [sp, #12]
    24c0:	0200      	lsls	r0, r0, #8
    24c2:	4305      	orrs	r5, r0
    24c4:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24c6:	21ff      	movs	r1, #255	; 0xff
    24c8:	0025      	movs	r5, r4
    24ca:	2000      	movs	r0, #0
    24cc:	47b0      	blx	r6
    24ce:	35f8      	adds	r5, #248	; 0xf8
    24d0:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24d2:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24d4:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24d6:	2000      	movs	r0, #0
    24d8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24da:	2280      	movs	r2, #128	; 0x80
    24dc:	0200      	lsls	r0, r0, #8
    24de:	4b36      	ldr	r3, [pc, #216]	; (25b8 <sampleTick+0x3d0>)
    24e0:	4307      	orrs	r7, r0
    24e2:	00d2      	lsls	r2, r2, #3
    24e4:	802f      	strh	r7, [r5, #0]
    24e6:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24e8:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    24ea:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24ec:	2000      	movs	r0, #0
    24ee:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24f0:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    24f2:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24f4:	2200      	movs	r2, #0
    24f6:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    24f8:	2100      	movs	r1, #0
    24fa:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    24fc:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    24fe:	36f6      	adds	r6, #246	; 0xf6
    2500:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2502:	1100      	asrs	r0, r0, #4
    2504:	31f2      	adds	r1, #242	; 0xf2
    2506:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2508:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    250a:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    250c:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    250e:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    2510:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2512:	4b1f      	ldr	r3, [pc, #124]	; (2590 <sampleTick+0x3a8>)
    2514:	4798      	blx	r3
    2516:	23fe      	movs	r3, #254	; 0xfe
    2518:	2200      	movs	r2, #0
    251a:	4f1f      	ldr	r7, [pc, #124]	; (2598 <sampleTick+0x3b0>)
    251c:	059b      	lsls	r3, r3, #22
    251e:	47b8      	blx	r7
    2520:	4b1f      	ldr	r3, [pc, #124]	; (25a0 <sampleTick+0x3b8>)
    2522:	4798      	blx	r3
    2524:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    2526:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2528:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    252a:	2300      	movs	r3, #0
    252c:	5ef0      	ldrsh	r0, [r6, r3]
    252e:	4b18      	ldr	r3, [pc, #96]	; (2590 <sampleTick+0x3a8>)
    2530:	4798      	blx	r3
    2532:	23fe      	movs	r3, #254	; 0xfe
    2534:	2200      	movs	r2, #0
    2536:	4e18      	ldr	r6, [pc, #96]	; (2598 <sampleTick+0x3b0>)
    2538:	059b      	lsls	r3, r3, #22
    253a:	47b0      	blx	r6
    253c:	4b18      	ldr	r3, [pc, #96]	; (25a0 <sampleTick+0x3b8>)
    253e:	4798      	blx	r3
    2540:	37dc      	adds	r7, #220	; 0xdc
    2542:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    2544:	2302      	movs	r3, #2
    2546:	5ee8      	ldrsh	r0, [r5, r3]
    2548:	4b11      	ldr	r3, [pc, #68]	; (2590 <sampleTick+0x3a8>)
    254a:	4798      	blx	r3
    254c:	23fe      	movs	r3, #254	; 0xfe
    254e:	2200      	movs	r2, #0
    2550:	4d11      	ldr	r5, [pc, #68]	; (2598 <sampleTick+0x3b0>)
    2552:	059b      	lsls	r3, r3, #22
    2554:	47a8      	blx	r5
    2556:	0026      	movs	r6, r4
    2558:	4b11      	ldr	r3, [pc, #68]	; (25a0 <sampleTick+0x3b8>)
    255a:	4798      	blx	r3
    255c:	36e0      	adds	r6, #224	; 0xe0
    255e:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    2560:	4b1c      	ldr	r3, [pc, #112]	; (25d4 <sampleTick+0x3ec>)
    2562:	2005      	movs	r0, #5
    2564:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    2566:	4b17      	ldr	r3, [pc, #92]	; (25c4 <sampleTick+0x3dc>)
    2568:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    256a:	3408      	adds	r4, #8
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    256c:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    256e:	4b1a      	ldr	r3, [pc, #104]	; (25d8 <sampleTick+0x3f0>)
    2570:	0020      	movs	r0, r4
    2572:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    2574:	0020      	movs	r0, r4
    2576:	4b19      	ldr	r3, [pc, #100]	; (25dc <sampleTick+0x3f4>)
    2578:	4798      	blx	r3


}
    257a:	b007      	add	sp, #28
    257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	200004d3 	.word	0x200004d3
    2584:	00000fa1 	.word	0x00000fa1
    2588:	000065d4 	.word	0x000065d4
    258c:	00000c15 	.word	0x00000c15
    2590:	00005e79 	.word	0x00005e79
    2594:	77318fc5 	.word	0x77318fc5
    2598:	00005231 	.word	0x00005231
    259c:	3f5f212d 	.word	0x3f5f212d
    25a0:	00006015 	.word	0x00006015
    25a4:	0000031e 	.word	0x0000031e
    25a8:	00000322 	.word	0x00000322
    25ac:	fffff0c4 	.word	0xfffff0c4
    25b0:	02de00d2 	.word	0x02de00d2
    25b4:	bf8f8a09 	.word	0xbf8f8a09
    25b8:	41004400 	.word	0x41004400
    25bc:	00000c7d 	.word	0x00000c7d
    25c0:	00000f25 	.word	0x00000f25
    25c4:	0000041d 	.word	0x0000041d
    25c8:	41004494 	.word	0x41004494
    25cc:	000026ed 	.word	0x000026ed
    25d0:	41004498 	.word	0x41004498
    25d4:	00000f55 	.word	0x00000f55
    25d8:	000004d1 	.word	0x000004d1
    25dc:	00000579 	.word	0x00000579

000025e0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25e4:	2301      	movs	r3, #1
    25e6:	1ca6      	adds	r6, r4, #2
    25e8:	40b3      	lsls	r3, r6
    25ea:	480d      	ldr	r0, [pc, #52]	; (2620 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25ec:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25ee:	6a01      	ldr	r1, [r0, #32]
    25f0:	430b      	orrs	r3, r1
    25f2:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    25f4:	2d00      	cmp	r5, #0
    25f6:	d003      	beq.n	2600 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    25f8:	2107      	movs	r1, #7
    25fa:	0028      	movs	r0, r5
    25fc:	4b09      	ldr	r3, [pc, #36]	; (2624 <sercomClockEnable+0x44>)
    25fe:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2600:	22f0      	movs	r2, #240	; 0xf0
    2602:	2080      	movs	r0, #128	; 0x80
    2604:	0229      	lsls	r1, r5, #8
    2606:	0112      	lsls	r2, r2, #4
    2608:	4011      	ands	r1, r2
    260a:	01c0      	lsls	r0, r0, #7
    260c:	4301      	orrs	r1, r0
    260e:	0020      	movs	r0, r4
    2610:	3014      	adds	r0, #20
    2612:	223f      	movs	r2, #63	; 0x3f
    2614:	0003      	movs	r3, r0
    2616:	4013      	ands	r3, r2
    2618:	4319      	orrs	r1, r3
    261a:	4b03      	ldr	r3, [pc, #12]	; (2628 <sercomClockEnable+0x48>)
    261c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    261e:	bd70      	pop	{r4, r5, r6, pc}
    2620:	40000400 	.word	0x40000400
    2624:	00000ed5 	.word	0x00000ed5
    2628:	40000c00 	.word	0x40000c00

0000262c <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    262c:	4b04      	ldr	r3, [pc, #16]	; (2640 <sercomReset+0x14>)
    262e:	0280      	lsls	r0, r0, #10
    2630:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2632:	2301      	movs	r3, #1
    2634:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2636:	6802      	ldr	r2, [r0, #0]
    2638:	421a      	tst	r2, r3
    263a:	d1fc      	bne.n	2636 <sercomReset+0xa>
}
    263c:	4770      	bx	lr
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	42000800 	.word	0x42000800

00002644 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2646:	0004      	movs	r4, r0
    2648:	9300      	str	r3, [sp, #0]
    264a:	ab08      	add	r3, sp, #32
    264c:	781b      	ldrb	r3, [r3, #0]
    264e:	000e      	movs	r6, r1
    2650:	9301      	str	r3, [sp, #4]
    2652:	ab09      	add	r3, sp, #36	; 0x24
    2654:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2656:	4b12      	ldr	r3, [pc, #72]	; (26a0 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2658:	0015      	movs	r5, r2

    sercomReset(id);
    265a:	4798      	blx	r3
    265c:	4b11      	ldr	r3, [pc, #68]	; (26a4 <sercomSpiMasterInit+0x60>)
    265e:	02a4      	lsls	r4, r4, #10
    2660:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2662:	2380      	movs	r3, #128	; 0x80
    2664:	029b      	lsls	r3, r3, #10
    2666:	6063      	str	r3, [r4, #4]
    2668:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    266a:	21c0      	movs	r1, #192	; 0xc0
    266c:	042d      	lsls	r5, r5, #16
    266e:	029b      	lsls	r3, r3, #10
    2670:	402b      	ands	r3, r5
    2672:	250e      	movs	r5, #14
    2674:	0536      	lsls	r6, r6, #20
    2676:	0389      	lsls	r1, r1, #14
    2678:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    267a:	9e00      	ldr	r6, [sp, #0]
    267c:	431d      	orrs	r5, r3
    267e:	1e73      	subs	r3, r6, #1
    2680:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2682:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2684:	0772      	lsls	r2, r6, #29
    2686:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2688:	432a      	orrs	r2, r5
    268a:	1e59      	subs	r1, r3, #1
    268c:	418b      	sbcs	r3, r1
    268e:	0016      	movs	r6, r2
    2690:	071b      	lsls	r3, r3, #28
    2692:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2694:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2696:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2698:	69e3      	ldr	r3, [r4, #28]
    269a:	075b      	lsls	r3, r3, #29
    269c:	d4fc      	bmi.n	2698 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    269e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    26a0:	0000262d 	.word	0x0000262d
    26a4:	42000800 	.word	0x42000800

000026a8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    26a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26aa:	0007      	movs	r7, r0
    26ac:	001e      	movs	r6, r3
    sercomReset(id);
    26ae:	4b0c      	ldr	r3, [pc, #48]	; (26e0 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    26b0:	000d      	movs	r5, r1
    26b2:	0014      	movs	r4, r2
    sercomReset(id);
    26b4:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26b6:	4b0b      	ldr	r3, [pc, #44]	; (26e4 <sercomUartInit+0x3c>)
    26b8:	02b8      	lsls	r0, r7, #10
    26ba:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26bc:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26be:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26c0:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26c2:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c4:	0529      	lsls	r1, r5, #20
    26c6:	0392      	lsls	r2, r2, #14
    26c8:	4011      	ands	r1, r2
    26ca:	4a07      	ldr	r2, [pc, #28]	; (26e8 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    26cc:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26ce:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d0:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    26d2:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d4:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26d6:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d8:	4023      	ands	r3, r4
    26da:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    26dc:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    26de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26e0:	0000262d 	.word	0x0000262d
    26e4:	42000800 	.word	0x42000800
    26e8:	40000006 	.word	0x40000006

000026ec <spiDataTransfer>:
    26ec:	4b04      	ldr	r3, [pc, #16]	; (2700 <spiDataTransfer+0x14>)
    26ee:	0280      	lsls	r0, r0, #10
    26f0:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    26f2:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    26f4:	7e03      	ldrb	r3, [r0, #24]
    26f6:	075b      	lsls	r3, r3, #29
    26f8:	d5fc      	bpl.n	26f4 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    26fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    26fc:	b2c0      	uxtb	r0, r0
}
    26fe:	4770      	bx	lr
    2700:	42000800 	.word	0x42000800

00002704 <usartDataOut>:
    2704:	4b04      	ldr	r3, [pc, #16]	; (2718 <usartDataOut+0x14>)
    2706:	0280      	lsls	r0, r0, #10
    2708:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    270a:	b289      	uxth	r1, r1
    270c:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    270e:	7e03      	ldrb	r3, [r0, #24]
    2710:	07db      	lsls	r3, r3, #31
    2712:	d5fc      	bpl.n	270e <usartDataOut+0xa>
}
    2714:	4770      	bx	lr
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	42000800 	.word	0x42000800

0000271c <usartDataIn>:
    271c:	4b02      	ldr	r3, [pc, #8]	; (2728 <usartDataIn+0xc>)
    271e:	0280      	lsls	r0, r0, #10
    2720:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2722:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2724:	b2c0      	uxtb	r0, r0
    2726:	4770      	bx	lr
    2728:	42000800 	.word	0x42000800

0000272c <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    272e:	4b38      	ldr	r3, [pc, #224]	; (2810 <attemptConnection+0xe4>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2730:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    2732:	4798      	blx	r3
    2734:	2800      	cmp	r0, #0
    2736:	d069      	beq.n	280c <attemptConnection+0xe0>

        my_altimeter->myFlightState = flightTest;
    2738:	230a      	movs	r3, #10

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    273a:	4a36      	ldr	r2, [pc, #216]	; (2814 <attemptConnection+0xe8>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightTest;
    273c:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    273e:	7e13      	ldrb	r3, [r2, #24]
    2740:	4e34      	ldr	r6, [pc, #208]	; (2814 <attemptConnection+0xe8>)
    2742:	075b      	lsls	r3, r3, #29
    2744:	d5fb      	bpl.n	273e <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2746:	2003      	movs	r0, #3
    2748:	4d33      	ldr	r5, [pc, #204]	; (2818 <attemptConnection+0xec>)
    274a:	47a8      	blx	r5
    274c:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    274e:	2c4c      	cmp	r4, #76	; 0x4c
    2750:	d14c      	bne.n	27ec <attemptConnection+0xc0>
    2752:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2754:	0020      	movs	r0, r4
    2756:	4b31      	ldr	r3, [pc, #196]	; (281c <attemptConnection+0xf0>)
    2758:	4798      	blx	r3
    275a:	2800      	cmp	r0, #0
    275c:	d005      	beq.n	276a <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    275e:	0021      	movs	r1, r4
    2760:	3130      	adds	r1, #48	; 0x30
    2762:	b2c9      	uxtb	r1, r1
    2764:	2003      	movs	r0, #3
    2766:	4b2e      	ldr	r3, [pc, #184]	; (2820 <attemptConnection+0xf4>)
    2768:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    276a:	3401      	adds	r4, #1
    276c:	b2e4      	uxtb	r4, r4
    276e:	2c0b      	cmp	r4, #11
    2770:	d1f0      	bne.n	2754 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    2772:	210f      	movs	r1, #15
    2774:	2003      	movs	r0, #3
    2776:	4c2a      	ldr	r4, [pc, #168]	; (2820 <attemptConnection+0xf4>)
    2778:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    277a:	7e33      	ldrb	r3, [r6, #24]
    277c:	075b      	lsls	r3, r3, #29
    277e:	d5fc      	bpl.n	277a <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2780:	2003      	movs	r0, #3
    2782:	47a8      	blx	r5
    2784:	3830      	subs	r0, #48	; 0x30
    2786:	b2c6      	uxtb	r6, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2788:	4b26      	ldr	r3, [pc, #152]	; (2824 <attemptConnection+0xf8>)
    278a:	0030      	movs	r0, r6
    278c:	4798      	blx	r3
            delay_ms(10);
    278e:	4d26      	ldr	r5, [pc, #152]	; (2828 <attemptConnection+0xfc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2790:	0007      	movs	r7, r0
            delay_ms(10);
    2792:	200a      	movs	r0, #10
    2794:	47a8      	blx	r5
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2796:	4b25      	ldr	r3, [pc, #148]	; (282c <attemptConnection+0x100>)
    2798:	0030      	movs	r0, r6
    279a:	4798      	blx	r3
    279c:	1e46      	subs	r6, r0, #1
    279e:	3eff      	subs	r6, #255	; 0xff
            delay_ms(10);
    27a0:	200a      	movs	r0, #10
    27a2:	47a8      	blx	r5

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    27a4:	1bf5      	subs	r5, r6, r7
    27a6:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    27a8:	b2e9      	uxtb	r1, r5
    27aa:	2003      	movs	r0, #3
    27ac:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    27ae:	b2a9      	uxth	r1, r5
    27b0:	0a09      	lsrs	r1, r1, #8
    27b2:	2003      	movs	r0, #3
    27b4:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    27b6:	b2f1      	uxtb	r1, r6
    27b8:	2003      	movs	r0, #3
    27ba:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    27bc:	0a31      	lsrs	r1, r6, #8
    27be:	b2c9      	uxtb	r1, r1
    27c0:	2003      	movs	r0, #3
    27c2:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    27c4:	0c31      	lsrs	r1, r6, #16
    27c6:	b2c9      	uxtb	r1, r1
    27c8:	2003      	movs	r0, #3
    27ca:	47a0      	blx	r4

            usartDataOut(USART3, flightStartAddress >> 0);
    27cc:	b2f9      	uxtb	r1, r7
    27ce:	2003      	movs	r0, #3
    27d0:	47a0      	blx	r4
            usartDataOut(USART3, flightStartAddress >> 8);
    27d2:	0a39      	lsrs	r1, r7, #8
    27d4:	b2c9      	uxtb	r1, r1
    27d6:	2003      	movs	r0, #3
    27d8:	47a0      	blx	r4
            usartDataOut(USART3, flightStartAddress >> 16);
    27da:	0c39      	lsrs	r1, r7, #16
    27dc:	b2c9      	uxtb	r1, r1
    27de:	2003      	movs	r0, #3
    27e0:	47a0      	blx	r4


            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    27e2:	0031      	movs	r1, r6
    27e4:	0038      	movs	r0, r7
    27e6:	4b12      	ldr	r3, [pc, #72]	; (2830 <attemptConnection+0x104>)
    27e8:	4798      	blx	r3
    27ea:	e00f      	b.n	280c <attemptConnection+0xe0>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    27ec:	2845      	cmp	r0, #69	; 0x45
    27ee:	d10d      	bne.n	280c <attemptConnection+0xe0>
            AT25SFChipErase();
    27f0:	4e10      	ldr	r6, [pc, #64]	; (2834 <attemptConnection+0x108>)
    27f2:	47b0      	blx	r6

            AT25SFHoldTillReady();
    27f4:	4d10      	ldr	r5, [pc, #64]	; (2838 <attemptConnection+0x10c>)
    27f6:	47a8      	blx	r5

            AT25SFChipErase();
    27f8:	47b0      	blx	r6

            AT25SFHoldTillReady();
    27fa:	47a8      	blx	r5

            usartDataOut(USART3, 'E');
    27fc:	2003      	movs	r0, #3
    27fe:	4b08      	ldr	r3, [pc, #32]	; (2820 <attemptConnection+0xf4>)
    2800:	0021      	movs	r1, r4
    2802:	4798      	blx	r3
            beep(400);
    2804:	20c8      	movs	r0, #200	; 0xc8
    2806:	4b0d      	ldr	r3, [pc, #52]	; (283c <attemptConnection+0x110>)
    2808:	0040      	lsls	r0, r0, #1
    280a:	4798      	blx	r3


        }
    }

}
    280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	00000b1d 	.word	0x00000b1d
    2814:	42001400 	.word	0x42001400
    2818:	0000271d 	.word	0x0000271d
    281c:	000020c9 	.word	0x000020c9
    2820:	00002705 	.word	0x00002705
    2824:	00002075 	.word	0x00002075
    2828:	00000f55 	.word	0x00000f55
    282c:	0000209d 	.word	0x0000209d
    2830:	00000b51 	.word	0x00000b51
    2834:	00000221 	.word	0x00000221
    2838:	000001e5 	.word	0x000001e5
    283c:	00000d3d 	.word	0x00000d3d

00002840 <pow>:
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	465f      	mov	r7, fp
    2844:	464d      	mov	r5, r9
    2846:	4656      	mov	r6, sl
    2848:	4644      	mov	r4, r8
    284a:	b4f0      	push	{r4, r5, r6, r7}
    284c:	b091      	sub	sp, #68	; 0x44
    284e:	001f      	movs	r7, r3
    2850:	0004      	movs	r4, r0
    2852:	000d      	movs	r5, r1
    2854:	0016      	movs	r6, r2
    2856:	f000 f9af 	bl	2bb8 <__ieee754_pow>
    285a:	4bcf      	ldr	r3, [pc, #828]	; (2b98 <pow+0x358>)
    285c:	9002      	str	r0, [sp, #8]
    285e:	9103      	str	r1, [sp, #12]
    2860:	469b      	mov	fp, r3
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	b25b      	sxtb	r3, r3
    2866:	4699      	mov	r9, r3
    2868:	3301      	adds	r3, #1
    286a:	d04f      	beq.n	290c <pow+0xcc>
    286c:	0032      	movs	r2, r6
    286e:	003b      	movs	r3, r7
    2870:	0030      	movs	r0, r6
    2872:	0039      	movs	r1, r7
    2874:	f003 faaa 	bl	5dcc <__aeabi_dcmpun>
    2878:	9000      	str	r0, [sp, #0]
    287a:	2800      	cmp	r0, #0
    287c:	d146      	bne.n	290c <pow+0xcc>
    287e:	0022      	movs	r2, r4
    2880:	002b      	movs	r3, r5
    2882:	0020      	movs	r0, r4
    2884:	0029      	movs	r1, r5
    2886:	f003 faa1 	bl	5dcc <__aeabi_dcmpun>
    288a:	2200      	movs	r2, #0
    288c:	4682      	mov	sl, r0
    288e:	2800      	cmp	r0, #0
    2890:	d134      	bne.n	28fc <pow+0xbc>
    2892:	2300      	movs	r3, #0
    2894:	0020      	movs	r0, r4
    2896:	0029      	movs	r1, r5
    2898:	f001 f8fc 	bl	3a94 <__aeabi_dcmpeq>
    289c:	2800      	cmp	r0, #0
    289e:	d03a      	beq.n	2916 <pow+0xd6>
    28a0:	2200      	movs	r2, #0
    28a2:	2300      	movs	r3, #0
    28a4:	0030      	movs	r0, r6
    28a6:	0039      	movs	r1, r7
    28a8:	f001 f8f4 	bl	3a94 <__aeabi_dcmpeq>
    28ac:	9005      	str	r0, [sp, #20]
    28ae:	2800      	cmp	r0, #0
    28b0:	d100      	bne.n	28b4 <pow+0x74>
    28b2:	e074      	b.n	299e <pow+0x15e>
    28b4:	ab06      	add	r3, sp, #24
    28b6:	4698      	mov	r8, r3
    28b8:	2301      	movs	r3, #1
    28ba:	4642      	mov	r2, r8
    28bc:	9306      	str	r3, [sp, #24]
    28be:	4bb7      	ldr	r3, [pc, #732]	; (2b9c <pow+0x35c>)
    28c0:	6053      	str	r3, [r2, #4]
    28c2:	4643      	mov	r3, r8
    28c4:	4652      	mov	r2, sl
    28c6:	609c      	str	r4, [r3, #8]
    28c8:	60dd      	str	r5, [r3, #12]
    28ca:	621a      	str	r2, [r3, #32]
    28cc:	611e      	str	r6, [r3, #16]
    28ce:	615f      	str	r7, [r3, #20]
    28d0:	4642      	mov	r2, r8
    28d2:	2300      	movs	r3, #0
    28d4:	2400      	movs	r4, #0
    28d6:	6193      	str	r3, [r2, #24]
    28d8:	61d4      	str	r4, [r2, #28]
    28da:	464b      	mov	r3, r9
    28dc:	2b00      	cmp	r3, #0
    28de:	d100      	bne.n	28e2 <pow+0xa2>
    28e0:	e094      	b.n	2a0c <pow+0x1cc>
    28e2:	2300      	movs	r3, #0
    28e4:	4cae      	ldr	r4, [pc, #696]	; (2ba0 <pow+0x360>)
    28e6:	9300      	str	r3, [sp, #0]
    28e8:	9401      	str	r4, [sp, #4]
    28ea:	9800      	ldr	r0, [sp, #0]
    28ec:	9901      	ldr	r1, [sp, #4]
    28ee:	b011      	add	sp, #68	; 0x44
    28f0:	bc3c      	pop	{r2, r3, r4, r5}
    28f2:	4690      	mov	r8, r2
    28f4:	4699      	mov	r9, r3
    28f6:	46a2      	mov	sl, r4
    28f8:	46ab      	mov	fp, r5
    28fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28fc:	2300      	movs	r3, #0
    28fe:	0030      	movs	r0, r6
    2900:	0039      	movs	r1, r7
    2902:	f001 f8c7 	bl	3a94 <__aeabi_dcmpeq>
    2906:	2800      	cmp	r0, #0
    2908:	d000      	beq.n	290c <pow+0xcc>
    290a:	e0eb      	b.n	2ae4 <pow+0x2a4>
    290c:	9b02      	ldr	r3, [sp, #8]
    290e:	9c03      	ldr	r4, [sp, #12]
    2910:	9300      	str	r3, [sp, #0]
    2912:	9401      	str	r4, [sp, #4]
    2914:	e7e9      	b.n	28ea <pow+0xaa>
    2916:	9802      	ldr	r0, [sp, #8]
    2918:	9903      	ldr	r1, [sp, #12]
    291a:	f000 ff7d 	bl	3818 <finite>
    291e:	4681      	mov	r9, r0
    2920:	2800      	cmp	r0, #0
    2922:	d100      	bne.n	2926 <pow+0xe6>
    2924:	e086      	b.n	2a34 <pow+0x1f4>
    2926:	9802      	ldr	r0, [sp, #8]
    2928:	9903      	ldr	r1, [sp, #12]
    292a:	2200      	movs	r2, #0
    292c:	2300      	movs	r3, #0
    292e:	f001 f8b1 	bl	3a94 <__aeabi_dcmpeq>
    2932:	2800      	cmp	r0, #0
    2934:	d0ea      	beq.n	290c <pow+0xcc>
    2936:	0020      	movs	r0, r4
    2938:	0029      	movs	r1, r5
    293a:	f000 ff6d 	bl	3818 <finite>
    293e:	9a02      	ldr	r2, [sp, #8]
    2940:	9b03      	ldr	r3, [sp, #12]
    2942:	9200      	str	r2, [sp, #0]
    2944:	9301      	str	r3, [sp, #4]
    2946:	2800      	cmp	r0, #0
    2948:	d0cf      	beq.n	28ea <pow+0xaa>
    294a:	0030      	movs	r0, r6
    294c:	0039      	movs	r1, r7
    294e:	f000 ff63 	bl	3818 <finite>
    2952:	9a02      	ldr	r2, [sp, #8]
    2954:	9b03      	ldr	r3, [sp, #12]
    2956:	9200      	str	r2, [sp, #0]
    2958:	9301      	str	r3, [sp, #4]
    295a:	2800      	cmp	r0, #0
    295c:	d0c5      	beq.n	28ea <pow+0xaa>
    295e:	ab06      	add	r3, sp, #24
    2960:	4698      	mov	r8, r3
    2962:	2304      	movs	r3, #4
    2964:	4642      	mov	r2, r8
    2966:	9306      	str	r3, [sp, #24]
    2968:	4b8c      	ldr	r3, [pc, #560]	; (2b9c <pow+0x35c>)
    296a:	6094      	str	r4, [r2, #8]
    296c:	60d5      	str	r5, [r2, #12]
    296e:	6053      	str	r3, [r2, #4]
    2970:	2300      	movs	r3, #0
    2972:	2400      	movs	r4, #0
    2974:	6213      	str	r3, [r2, #32]
    2976:	2300      	movs	r3, #0
    2978:	6193      	str	r3, [r2, #24]
    297a:	61d4      	str	r4, [r2, #28]
    297c:	465b      	mov	r3, fp
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	6116      	str	r6, [r2, #16]
    2982:	6157      	str	r7, [r2, #20]
    2984:	b25b      	sxtb	r3, r3
    2986:	2b02      	cmp	r3, #2
    2988:	d004      	beq.n	2994 <pow+0x154>
    298a:	4640      	mov	r0, r8
    298c:	f000 ff4e 	bl	382c <matherr>
    2990:	2800      	cmp	r0, #0
    2992:	d140      	bne.n	2a16 <pow+0x1d6>
    2994:	f003 fc74 	bl	6280 <__errno>
    2998:	2322      	movs	r3, #34	; 0x22
    299a:	6003      	str	r3, [r0, #0]
    299c:	e03b      	b.n	2a16 <pow+0x1d6>
    299e:	0030      	movs	r0, r6
    29a0:	0039      	movs	r1, r7
    29a2:	f000 ff39 	bl	3818 <finite>
    29a6:	9a02      	ldr	r2, [sp, #8]
    29a8:	9b03      	ldr	r3, [sp, #12]
    29aa:	9200      	str	r2, [sp, #0]
    29ac:	9301      	str	r3, [sp, #4]
    29ae:	2800      	cmp	r0, #0
    29b0:	d09b      	beq.n	28ea <pow+0xaa>
    29b2:	2200      	movs	r2, #0
    29b4:	2300      	movs	r3, #0
    29b6:	0030      	movs	r0, r6
    29b8:	0039      	movs	r1, r7
    29ba:	f001 f871 	bl	3aa0 <__aeabi_dcmplt>
    29be:	2800      	cmp	r0, #0
    29c0:	d100      	bne.n	29c4 <pow+0x184>
    29c2:	e792      	b.n	28ea <pow+0xaa>
    29c4:	ab06      	add	r3, sp, #24
    29c6:	4698      	mov	r8, r3
    29c8:	2301      	movs	r3, #1
    29ca:	4642      	mov	r2, r8
    29cc:	9306      	str	r3, [sp, #24]
    29ce:	4b73      	ldr	r3, [pc, #460]	; (2b9c <pow+0x35c>)
    29d0:	6053      	str	r3, [r2, #4]
    29d2:	4643      	mov	r3, r8
    29d4:	9a05      	ldr	r2, [sp, #20]
    29d6:	609c      	str	r4, [r3, #8]
    29d8:	60dd      	str	r5, [r3, #12]
    29da:	621a      	str	r2, [r3, #32]
    29dc:	611e      	str	r6, [r3, #16]
    29de:	615f      	str	r7, [r3, #20]
    29e0:	465b      	mov	r3, fp
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	b25b      	sxtb	r3, r3
    29e6:	2b00      	cmp	r3, #0
    29e8:	d00b      	beq.n	2a02 <pow+0x1c2>
    29ea:	2000      	movs	r0, #0
    29ec:	4642      	mov	r2, r8
    29ee:	496d      	ldr	r1, [pc, #436]	; (2ba4 <pow+0x364>)
    29f0:	6190      	str	r0, [r2, #24]
    29f2:	61d1      	str	r1, [r2, #28]
    29f4:	2b02      	cmp	r3, #2
    29f6:	d109      	bne.n	2a0c <pow+0x1cc>
    29f8:	f003 fc42 	bl	6280 <__errno>
    29fc:	2321      	movs	r3, #33	; 0x21
    29fe:	6003      	str	r3, [r0, #0]
    2a00:	e009      	b.n	2a16 <pow+0x1d6>
    2a02:	4642      	mov	r2, r8
    2a04:	2300      	movs	r3, #0
    2a06:	2400      	movs	r4, #0
    2a08:	6193      	str	r3, [r2, #24]
    2a0a:	61d4      	str	r4, [r2, #28]
    2a0c:	4640      	mov	r0, r8
    2a0e:	f000 ff0d 	bl	382c <matherr>
    2a12:	2800      	cmp	r0, #0
    2a14:	d0f0      	beq.n	29f8 <pow+0x1b8>
    2a16:	4643      	mov	r3, r8
    2a18:	6a1b      	ldr	r3, [r3, #32]
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d004      	beq.n	2a28 <pow+0x1e8>
    2a1e:	f003 fc2f 	bl	6280 <__errno>
    2a22:	4643      	mov	r3, r8
    2a24:	6a1b      	ldr	r3, [r3, #32]
    2a26:	6003      	str	r3, [r0, #0]
    2a28:	4643      	mov	r3, r8
    2a2a:	69dc      	ldr	r4, [r3, #28]
    2a2c:	699b      	ldr	r3, [r3, #24]
    2a2e:	9300      	str	r3, [sp, #0]
    2a30:	9401      	str	r4, [sp, #4]
    2a32:	e75a      	b.n	28ea <pow+0xaa>
    2a34:	0020      	movs	r0, r4
    2a36:	0029      	movs	r1, r5
    2a38:	f000 feee 	bl	3818 <finite>
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d100      	bne.n	2a42 <pow+0x202>
    2a40:	e771      	b.n	2926 <pow+0xe6>
    2a42:	0030      	movs	r0, r6
    2a44:	0039      	movs	r1, r7
    2a46:	f000 fee7 	bl	3818 <finite>
    2a4a:	2800      	cmp	r0, #0
    2a4c:	d100      	bne.n	2a50 <pow+0x210>
    2a4e:	e76a      	b.n	2926 <pow+0xe6>
    2a50:	9802      	ldr	r0, [sp, #8]
    2a52:	9903      	ldr	r1, [sp, #12]
    2a54:	000b      	movs	r3, r1
    2a56:	0002      	movs	r2, r0
    2a58:	f003 f9b8 	bl	5dcc <__aeabi_dcmpun>
    2a5c:	ab06      	add	r3, sp, #24
    2a5e:	4698      	mov	r8, r3
    2a60:	2800      	cmp	r0, #0
    2a62:	d17a      	bne.n	2b5a <pow+0x31a>
    2a64:	2303      	movs	r3, #3
    2a66:	4642      	mov	r2, r8
    2a68:	9306      	str	r3, [sp, #24]
    2a6a:	4b4c      	ldr	r3, [pc, #304]	; (2b9c <pow+0x35c>)
    2a6c:	6210      	str	r0, [r2, #32]
    2a6e:	6053      	str	r3, [r2, #4]
    2a70:	465b      	mov	r3, fp
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	6094      	str	r4, [r2, #8]
    2a76:	60d5      	str	r5, [r2, #12]
    2a78:	b25b      	sxtb	r3, r3
    2a7a:	6116      	str	r6, [r2, #16]
    2a7c:	6157      	str	r7, [r2, #20]
    2a7e:	4699      	mov	r9, r3
    2a80:	2b00      	cmp	r3, #0
    2a82:	d148      	bne.n	2b16 <pow+0x2d6>
    2a84:	22e0      	movs	r2, #224	; 0xe0
    2a86:	4641      	mov	r1, r8
    2a88:	4b47      	ldr	r3, [pc, #284]	; (2ba8 <pow+0x368>)
    2a8a:	0612      	lsls	r2, r2, #24
    2a8c:	618a      	str	r2, [r1, #24]
    2a8e:	61cb      	str	r3, [r1, #28]
    2a90:	0020      	movs	r0, r4
    2a92:	2200      	movs	r2, #0
    2a94:	2300      	movs	r3, #0
    2a96:	0029      	movs	r1, r5
    2a98:	f001 f802 	bl	3aa0 <__aeabi_dcmplt>
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d100      	bne.n	2aa2 <pow+0x262>
    2aa0:	e773      	b.n	298a <pow+0x14a>
    2aa2:	2200      	movs	r2, #0
    2aa4:	4b41      	ldr	r3, [pc, #260]	; (2bac <pow+0x36c>)
    2aa6:	0030      	movs	r0, r6
    2aa8:	0039      	movs	r1, r7
    2aaa:	f002 fbc1 	bl	5230 <__aeabi_dmul>
    2aae:	0004      	movs	r4, r0
    2ab0:	000d      	movs	r5, r1
    2ab2:	f000 fec3 	bl	383c <rint>
    2ab6:	0002      	movs	r2, r0
    2ab8:	000b      	movs	r3, r1
    2aba:	0020      	movs	r0, r4
    2abc:	0029      	movs	r1, r5
    2abe:	f000 ffe9 	bl	3a94 <__aeabi_dcmpeq>
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d105      	bne.n	2ad2 <pow+0x292>
    2ac6:	22e0      	movs	r2, #224	; 0xe0
    2ac8:	4b39      	ldr	r3, [pc, #228]	; (2bb0 <pow+0x370>)
    2aca:	0612      	lsls	r2, r2, #24
    2acc:	4641      	mov	r1, r8
    2ace:	618a      	str	r2, [r1, #24]
    2ad0:	61cb      	str	r3, [r1, #28]
    2ad2:	465b      	mov	r3, fp
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	b25b      	sxtb	r3, r3
    2ad8:	4699      	mov	r9, r3
    2ada:	464b      	mov	r3, r9
    2adc:	2b02      	cmp	r3, #2
    2ade:	d000      	beq.n	2ae2 <pow+0x2a2>
    2ae0:	e753      	b.n	298a <pow+0x14a>
    2ae2:	e757      	b.n	2994 <pow+0x154>
    2ae4:	ab06      	add	r3, sp, #24
    2ae6:	4698      	mov	r8, r3
    2ae8:	2301      	movs	r3, #1
    2aea:	4642      	mov	r2, r8
    2aec:	9306      	str	r3, [sp, #24]
    2aee:	4b2b      	ldr	r3, [pc, #172]	; (2b9c <pow+0x35c>)
    2af0:	6053      	str	r3, [r2, #4]
    2af2:	4643      	mov	r3, r8
    2af4:	609c      	str	r4, [r3, #8]
    2af6:	60dd      	str	r5, [r3, #12]
    2af8:	2400      	movs	r4, #0
    2afa:	9a00      	ldr	r2, [sp, #0]
    2afc:	4d28      	ldr	r5, [pc, #160]	; (2ba0 <pow+0x360>)
    2afe:	621a      	str	r2, [r3, #32]
    2b00:	611e      	str	r6, [r3, #16]
    2b02:	615f      	str	r7, [r3, #20]
    2b04:	619c      	str	r4, [r3, #24]
    2b06:	61dd      	str	r5, [r3, #28]
    2b08:	464b      	mov	r3, r9
    2b0a:	9400      	str	r4, [sp, #0]
    2b0c:	9501      	str	r5, [sp, #4]
    2b0e:	2b02      	cmp	r3, #2
    2b10:	d000      	beq.n	2b14 <pow+0x2d4>
    2b12:	e77b      	b.n	2a0c <pow+0x1cc>
    2b14:	e6e9      	b.n	28ea <pow+0xaa>
    2b16:	2200      	movs	r2, #0
    2b18:	4641      	mov	r1, r8
    2b1a:	4b26      	ldr	r3, [pc, #152]	; (2bb4 <pow+0x374>)
    2b1c:	0020      	movs	r0, r4
    2b1e:	618a      	str	r2, [r1, #24]
    2b20:	61cb      	str	r3, [r1, #28]
    2b22:	2200      	movs	r2, #0
    2b24:	2300      	movs	r3, #0
    2b26:	0029      	movs	r1, r5
    2b28:	f000 ffba 	bl	3aa0 <__aeabi_dcmplt>
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d0d4      	beq.n	2ada <pow+0x29a>
    2b30:	2200      	movs	r2, #0
    2b32:	4b1e      	ldr	r3, [pc, #120]	; (2bac <pow+0x36c>)
    2b34:	0030      	movs	r0, r6
    2b36:	0039      	movs	r1, r7
    2b38:	f002 fb7a 	bl	5230 <__aeabi_dmul>
    2b3c:	0004      	movs	r4, r0
    2b3e:	000d      	movs	r5, r1
    2b40:	f000 fe7c 	bl	383c <rint>
    2b44:	0002      	movs	r2, r0
    2b46:	000b      	movs	r3, r1
    2b48:	0020      	movs	r0, r4
    2b4a:	0029      	movs	r1, r5
    2b4c:	f000 ffa2 	bl	3a94 <__aeabi_dcmpeq>
    2b50:	2800      	cmp	r0, #0
    2b52:	d1be      	bne.n	2ad2 <pow+0x292>
    2b54:	2200      	movs	r2, #0
    2b56:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <pow+0x364>)
    2b58:	e7b8      	b.n	2acc <pow+0x28c>
    2b5a:	2301      	movs	r3, #1
    2b5c:	4642      	mov	r2, r8
    2b5e:	9306      	str	r3, [sp, #24]
    2b60:	4b0e      	ldr	r3, [pc, #56]	; (2b9c <pow+0x35c>)
    2b62:	6053      	str	r3, [r2, #4]
    2b64:	4643      	mov	r3, r8
    2b66:	464a      	mov	r2, r9
    2b68:	609c      	str	r4, [r3, #8]
    2b6a:	60dd      	str	r5, [r3, #12]
    2b6c:	621a      	str	r2, [r3, #32]
    2b6e:	611e      	str	r6, [r3, #16]
    2b70:	615f      	str	r7, [r3, #20]
    2b72:	2400      	movs	r4, #0
    2b74:	465b      	mov	r3, fp
    2b76:	571c      	ldrsb	r4, [r3, r4]
    2b78:	2c00      	cmp	r4, #0
    2b7a:	d100      	bne.n	2b7e <pow+0x33e>
    2b7c:	e741      	b.n	2a02 <pow+0x1c2>
    2b7e:	2300      	movs	r3, #0
    2b80:	2200      	movs	r2, #0
    2b82:	0019      	movs	r1, r3
    2b84:	0010      	movs	r0, r2
    2b86:	f001 ff2f 	bl	49e8 <__aeabi_ddiv>
    2b8a:	4643      	mov	r3, r8
    2b8c:	6198      	str	r0, [r3, #24]
    2b8e:	61d9      	str	r1, [r3, #28]
    2b90:	2c02      	cmp	r4, #2
    2b92:	d100      	bne.n	2b96 <pow+0x356>
    2b94:	e730      	b.n	29f8 <pow+0x1b8>
    2b96:	e739      	b.n	2a0c <pow+0x1cc>
    2b98:	20000070 	.word	0x20000070
    2b9c:	000065fc 	.word	0x000065fc
    2ba0:	3ff00000 	.word	0x3ff00000
    2ba4:	fff00000 	.word	0xfff00000
    2ba8:	47efffff 	.word	0x47efffff
    2bac:	3fe00000 	.word	0x3fe00000
    2bb0:	c7efffff 	.word	0xc7efffff
    2bb4:	7ff00000 	.word	0x7ff00000

00002bb8 <__ieee754_pow>:
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	4656      	mov	r6, sl
    2bbc:	464d      	mov	r5, r9
    2bbe:	4644      	mov	r4, r8
    2bc0:	465f      	mov	r7, fp
    2bc2:	b4f0      	push	{r4, r5, r6, r7}
    2bc4:	001c      	movs	r4, r3
    2bc6:	0013      	movs	r3, r2
    2bc8:	0067      	lsls	r7, r4, #1
    2bca:	b091      	sub	sp, #68	; 0x44
    2bcc:	087f      	lsrs	r7, r7, #1
    2bce:	9300      	str	r3, [sp, #0]
    2bd0:	9401      	str	r4, [sp, #4]
    2bd2:	0006      	movs	r6, r0
    2bd4:	000d      	movs	r5, r1
    2bd6:	4680      	mov	r8, r0
    2bd8:	4689      	mov	r9, r1
    2bda:	46a2      	mov	sl, r4
    2bdc:	433b      	orrs	r3, r7
    2bde:	d032      	beq.n	2c46 <__ieee754_pow+0x8e>
    2be0:	4b6e      	ldr	r3, [pc, #440]	; (2d9c <__ieee754_pow+0x1e4>)
    2be2:	006c      	lsls	r4, r5, #1
    2be4:	0864      	lsrs	r4, r4, #1
    2be6:	429c      	cmp	r4, r3
    2be8:	dc29      	bgt.n	2c3e <__ieee754_pow+0x86>
    2bea:	d026      	beq.n	2c3a <__ieee754_pow+0x82>
    2bec:	429f      	cmp	r7, r3
    2bee:	dc26      	bgt.n	2c3e <__ieee754_pow+0x86>
    2bf0:	4b6a      	ldr	r3, [pc, #424]	; (2d9c <__ieee754_pow+0x1e4>)
    2bf2:	429f      	cmp	r7, r3
    2bf4:	d100      	bne.n	2bf8 <__ieee754_pow+0x40>
    2bf6:	e089      	b.n	2d0c <__ieee754_pow+0x154>
    2bf8:	2300      	movs	r3, #0
    2bfa:	469b      	mov	fp, r3
    2bfc:	464b      	mov	r3, r9
    2bfe:	2b00      	cmp	r3, #0
    2c00:	da00      	bge.n	2c04 <__ieee754_pow+0x4c>
    2c02:	e087      	b.n	2d14 <__ieee754_pow+0x15c>
    2c04:	2a00      	cmp	r2, #0
    2c06:	d12f      	bne.n	2c68 <__ieee754_pow+0xb0>
    2c08:	4b64      	ldr	r3, [pc, #400]	; (2d9c <__ieee754_pow+0x1e4>)
    2c0a:	429f      	cmp	r7, r3
    2c0c:	d100      	bne.n	2c10 <__ieee754_pow+0x58>
    2c0e:	e09f      	b.n	2d50 <__ieee754_pow+0x198>
    2c10:	4b63      	ldr	r3, [pc, #396]	; (2da0 <__ieee754_pow+0x1e8>)
    2c12:	429f      	cmp	r7, r3
    2c14:	d05d      	beq.n	2cd2 <__ieee754_pow+0x11a>
    2c16:	2380      	movs	r3, #128	; 0x80
    2c18:	05db      	lsls	r3, r3, #23
    2c1a:	459a      	cmp	sl, r3
    2c1c:	d101      	bne.n	2c22 <__ieee754_pow+0x6a>
    2c1e:	f000 fbc1 	bl	33a4 <__ieee754_pow+0x7ec>
    2c22:	4b60      	ldr	r3, [pc, #384]	; (2da4 <__ieee754_pow+0x1ec>)
    2c24:	459a      	cmp	sl, r3
    2c26:	d11f      	bne.n	2c68 <__ieee754_pow+0xb0>
    2c28:	464b      	mov	r3, r9
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	db1c      	blt.n	2c68 <__ieee754_pow+0xb0>
    2c2e:	0030      	movs	r0, r6
    2c30:	0029      	movs	r1, r5
    2c32:	f000 fcf7 	bl	3624 <__ieee754_sqrt>
    2c36:	0006      	movs	r6, r0
    2c38:	e007      	b.n	2c4a <__ieee754_pow+0x92>
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d00d      	beq.n	2c5a <__ieee754_pow+0xa2>
    2c3e:	4b5a      	ldr	r3, [pc, #360]	; (2da8 <__ieee754_pow+0x1f0>)
    2c40:	18e0      	adds	r0, r4, r3
    2c42:	4330      	orrs	r0, r6
    2c44:	d10b      	bne.n	2c5e <__ieee754_pow+0xa6>
    2c46:	2600      	movs	r6, #0
    2c48:	4955      	ldr	r1, [pc, #340]	; (2da0 <__ieee754_pow+0x1e8>)
    2c4a:	0030      	movs	r0, r6
    2c4c:	b011      	add	sp, #68	; 0x44
    2c4e:	bc3c      	pop	{r2, r3, r4, r5}
    2c50:	4690      	mov	r8, r2
    2c52:	4699      	mov	r9, r3
    2c54:	46a2      	mov	sl, r4
    2c56:	46ab      	mov	fp, r5
    2c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5a:	42a7      	cmp	r7, r4
    2c5c:	ddc8      	ble.n	2bf0 <__ieee754_pow+0x38>
    2c5e:	4853      	ldr	r0, [pc, #332]	; (2dac <__ieee754_pow+0x1f4>)
    2c60:	f000 fde6 	bl	3830 <nan>
    2c64:	0006      	movs	r6, r0
    2c66:	e7f0      	b.n	2c4a <__ieee754_pow+0x92>
    2c68:	0030      	movs	r0, r6
    2c6a:	0029      	movs	r1, r5
    2c6c:	f000 fdd0 	bl	3810 <fabs>
    2c70:	4643      	mov	r3, r8
    2c72:	2b00      	cmp	r3, #0
    2c74:	d01d      	beq.n	2cb2 <__ieee754_pow+0xfa>
    2c76:	0feb      	lsrs	r3, r5, #31
    2c78:	3b01      	subs	r3, #1
    2c7a:	4698      	mov	r8, r3
    2c7c:	465b      	mov	r3, fp
    2c7e:	4642      	mov	r2, r8
    2c80:	4313      	orrs	r3, r2
    2c82:	d079      	beq.n	2d78 <__ieee754_pow+0x1c0>
    2c84:	4b4a      	ldr	r3, [pc, #296]	; (2db0 <__ieee754_pow+0x1f8>)
    2c86:	429f      	cmp	r7, r3
    2c88:	dc00      	bgt.n	2c8c <__ieee754_pow+0xd4>
    2c8a:	e09f      	b.n	2dcc <__ieee754_pow+0x214>
    2c8c:	4b49      	ldr	r3, [pc, #292]	; (2db4 <__ieee754_pow+0x1fc>)
    2c8e:	429f      	cmp	r7, r3
    2c90:	dc01      	bgt.n	2c96 <__ieee754_pow+0xde>
    2c92:	f000 fbce 	bl	3432 <__ieee754_pow+0x87a>
    2c96:	4b48      	ldr	r3, [pc, #288]	; (2db8 <__ieee754_pow+0x200>)
    2c98:	429c      	cmp	r4, r3
    2c9a:	dd79      	ble.n	2d90 <__ieee754_pow+0x1d8>
    2c9c:	4653      	mov	r3, sl
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	dd79      	ble.n	2d96 <__ieee754_pow+0x1de>
    2ca2:	4a46      	ldr	r2, [pc, #280]	; (2dbc <__ieee754_pow+0x204>)
    2ca4:	4b46      	ldr	r3, [pc, #280]	; (2dc0 <__ieee754_pow+0x208>)
    2ca6:	0010      	movs	r0, r2
    2ca8:	0019      	movs	r1, r3
    2caa:	f002 fac1 	bl	5230 <__aeabi_dmul>
    2cae:	0006      	movs	r6, r0
    2cb0:	e7cb      	b.n	2c4a <__ieee754_pow+0x92>
    2cb2:	2c00      	cmp	r4, #0
    2cb4:	d004      	beq.n	2cc0 <__ieee754_pow+0x108>
    2cb6:	4a3a      	ldr	r2, [pc, #232]	; (2da0 <__ieee754_pow+0x1e8>)
    2cb8:	00ab      	lsls	r3, r5, #2
    2cba:	089b      	lsrs	r3, r3, #2
    2cbc:	4293      	cmp	r3, r2
    2cbe:	d1da      	bne.n	2c76 <__ieee754_pow+0xbe>
    2cc0:	4653      	mov	r3, sl
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	da00      	bge.n	2cc8 <__ieee754_pow+0x110>
    2cc6:	e3ad      	b.n	3424 <__ieee754_pow+0x86c>
    2cc8:	464b      	mov	r3, r9
    2cca:	2b00      	cmp	r3, #0
    2ccc:	db0d      	blt.n	2cea <__ieee754_pow+0x132>
    2cce:	0006      	movs	r6, r0
    2cd0:	e7bb      	b.n	2c4a <__ieee754_pow+0x92>
    2cd2:	4653      	mov	r3, sl
    2cd4:	0029      	movs	r1, r5
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	dab7      	bge.n	2c4a <__ieee754_pow+0x92>
    2cda:	0032      	movs	r2, r6
    2cdc:	002b      	movs	r3, r5
    2cde:	2000      	movs	r0, #0
    2ce0:	492f      	ldr	r1, [pc, #188]	; (2da0 <__ieee754_pow+0x1e8>)
    2ce2:	f001 fe81 	bl	49e8 <__aeabi_ddiv>
    2ce6:	0006      	movs	r6, r0
    2ce8:	e7af      	b.n	2c4a <__ieee754_pow+0x92>
    2cea:	4b2f      	ldr	r3, [pc, #188]	; (2da8 <__ieee754_pow+0x1f0>)
    2cec:	469c      	mov	ip, r3
    2cee:	465b      	mov	r3, fp
    2cf0:	4464      	add	r4, ip
    2cf2:	431c      	orrs	r4, r3
    2cf4:	d101      	bne.n	2cfa <__ieee754_pow+0x142>
    2cf6:	f000 fc2b 	bl	3550 <__ieee754_pow+0x998>
    2cfa:	465b      	mov	r3, fp
    2cfc:	0006      	movs	r6, r0
    2cfe:	2b01      	cmp	r3, #1
    2d00:	d1a3      	bne.n	2c4a <__ieee754_pow+0x92>
    2d02:	2380      	movs	r3, #128	; 0x80
    2d04:	061b      	lsls	r3, r3, #24
    2d06:	469c      	mov	ip, r3
    2d08:	4461      	add	r1, ip
    2d0a:	e79e      	b.n	2c4a <__ieee754_pow+0x92>
    2d0c:	2a00      	cmp	r2, #0
    2d0e:	d100      	bne.n	2d12 <__ieee754_pow+0x15a>
    2d10:	e772      	b.n	2bf8 <__ieee754_pow+0x40>
    2d12:	e794      	b.n	2c3e <__ieee754_pow+0x86>
    2d14:	4b2b      	ldr	r3, [pc, #172]	; (2dc4 <__ieee754_pow+0x20c>)
    2d16:	429f      	cmp	r7, r3
    2d18:	dc2b      	bgt.n	2d72 <__ieee754_pow+0x1ba>
    2d1a:	4b27      	ldr	r3, [pc, #156]	; (2db8 <__ieee754_pow+0x200>)
    2d1c:	429f      	cmp	r7, r3
    2d1e:	dc00      	bgt.n	2d22 <__ieee754_pow+0x16a>
    2d20:	e770      	b.n	2c04 <__ieee754_pow+0x4c>
    2d22:	4929      	ldr	r1, [pc, #164]	; (2dc8 <__ieee754_pow+0x210>)
    2d24:	153b      	asrs	r3, r7, #20
    2d26:	468c      	mov	ip, r1
    2d28:	4463      	add	r3, ip
    2d2a:	2b14      	cmp	r3, #20
    2d2c:	dc01      	bgt.n	2d32 <__ieee754_pow+0x17a>
    2d2e:	f000 fbf2 	bl	3516 <__ieee754_pow+0x95e>
    2d32:	2134      	movs	r1, #52	; 0x34
    2d34:	1acb      	subs	r3, r1, r3
    2d36:	9900      	ldr	r1, [sp, #0]
    2d38:	40d9      	lsrs	r1, r3
    2d3a:	0008      	movs	r0, r1
    2d3c:	4098      	lsls	r0, r3
    2d3e:	4282      	cmp	r2, r0
    2d40:	d000      	beq.n	2d44 <__ieee754_pow+0x18c>
    2d42:	e75f      	b.n	2c04 <__ieee754_pow+0x4c>
    2d44:	2301      	movs	r3, #1
    2d46:	4019      	ands	r1, r3
    2d48:	3301      	adds	r3, #1
    2d4a:	1a5b      	subs	r3, r3, r1
    2d4c:	469b      	mov	fp, r3
    2d4e:	e759      	b.n	2c04 <__ieee754_pow+0x4c>
    2d50:	4b15      	ldr	r3, [pc, #84]	; (2da8 <__ieee754_pow+0x1f0>)
    2d52:	18e0      	adds	r0, r4, r3
    2d54:	4306      	orrs	r6, r0
    2d56:	d100      	bne.n	2d5a <__ieee754_pow+0x1a2>
    2d58:	e775      	b.n	2c46 <__ieee754_pow+0x8e>
    2d5a:	4b17      	ldr	r3, [pc, #92]	; (2db8 <__ieee754_pow+0x200>)
    2d5c:	429c      	cmp	r4, r3
    2d5e:	dc00      	bgt.n	2d62 <__ieee754_pow+0x1aa>
    2d60:	e351      	b.n	3406 <__ieee754_pow+0x84e>
    2d62:	4653      	mov	r3, sl
    2d64:	2b00      	cmp	r3, #0
    2d66:	db16      	blt.n	2d96 <__ieee754_pow+0x1de>
    2d68:	9b00      	ldr	r3, [sp, #0]
    2d6a:	9c01      	ldr	r4, [sp, #4]
    2d6c:	001e      	movs	r6, r3
    2d6e:	0021      	movs	r1, r4
    2d70:	e76b      	b.n	2c4a <__ieee754_pow+0x92>
    2d72:	2302      	movs	r3, #2
    2d74:	469b      	mov	fp, r3
    2d76:	e745      	b.n	2c04 <__ieee754_pow+0x4c>
    2d78:	0032      	movs	r2, r6
    2d7a:	002b      	movs	r3, r5
    2d7c:	0030      	movs	r0, r6
    2d7e:	0029      	movs	r1, r5
    2d80:	f002 fcd0 	bl	5724 <__aeabi_dsub>
    2d84:	0002      	movs	r2, r0
    2d86:	000b      	movs	r3, r1
    2d88:	f001 fe2e 	bl	49e8 <__aeabi_ddiv>
    2d8c:	0006      	movs	r6, r0
    2d8e:	e75c      	b.n	2c4a <__ieee754_pow+0x92>
    2d90:	4653      	mov	r3, sl
    2d92:	2b00      	cmp	r3, #0
    2d94:	db85      	blt.n	2ca2 <__ieee754_pow+0xea>
    2d96:	2600      	movs	r6, #0
    2d98:	2100      	movs	r1, #0
    2d9a:	e756      	b.n	2c4a <__ieee754_pow+0x92>
    2d9c:	7ff00000 	.word	0x7ff00000
    2da0:	3ff00000 	.word	0x3ff00000
    2da4:	3fe00000 	.word	0x3fe00000
    2da8:	c0100000 	.word	0xc0100000
    2dac:	00006600 	.word	0x00006600
    2db0:	41e00000 	.word	0x41e00000
    2db4:	43f00000 	.word	0x43f00000
    2db8:	3fefffff 	.word	0x3fefffff
    2dbc:	8800759c 	.word	0x8800759c
    2dc0:	7e37e43c 	.word	0x7e37e43c
    2dc4:	433fffff 	.word	0x433fffff
    2dc8:	fffffc01 	.word	0xfffffc01
    2dcc:	4be8      	ldr	r3, [pc, #928]	; (3170 <__ieee754_pow+0x5b8>)
    2dce:	2200      	movs	r2, #0
    2dd0:	429c      	cmp	r4, r3
    2dd2:	dc06      	bgt.n	2de2 <__ieee754_pow+0x22a>
    2dd4:	2200      	movs	r2, #0
    2dd6:	4be7      	ldr	r3, [pc, #924]	; (3174 <__ieee754_pow+0x5bc>)
    2dd8:	f002 fa2a 	bl	5230 <__aeabi_dmul>
    2ddc:	2235      	movs	r2, #53	; 0x35
    2dde:	000c      	movs	r4, r1
    2de0:	4252      	negs	r2, r2
    2de2:	4de5      	ldr	r5, [pc, #916]	; (3178 <__ieee754_pow+0x5c0>)
    2de4:	1523      	asrs	r3, r4, #20
    2de6:	46ac      	mov	ip, r5
    2de8:	4463      	add	r3, ip
    2dea:	4699      	mov	r9, r3
    2dec:	0324      	lsls	r4, r4, #12
    2dee:	4de3      	ldr	r5, [pc, #908]	; (317c <__ieee754_pow+0x5c4>)
    2df0:	4be3      	ldr	r3, [pc, #908]	; (3180 <__ieee754_pow+0x5c8>)
    2df2:	0b24      	lsrs	r4, r4, #12
    2df4:	4491      	add	r9, r2
    2df6:	4325      	orrs	r5, r4
    2df8:	429c      	cmp	r4, r3
    2dfa:	dd09      	ble.n	2e10 <__ieee754_pow+0x258>
    2dfc:	4be1      	ldr	r3, [pc, #900]	; (3184 <__ieee754_pow+0x5cc>)
    2dfe:	429c      	cmp	r4, r3
    2e00:	dc00      	bgt.n	2e04 <__ieee754_pow+0x24c>
    2e02:	e3a9      	b.n	3558 <__ieee754_pow+0x9a0>
    2e04:	2301      	movs	r3, #1
    2e06:	469c      	mov	ip, r3
    2e08:	4bdf      	ldr	r3, [pc, #892]	; (3188 <__ieee754_pow+0x5d0>)
    2e0a:	44e1      	add	r9, ip
    2e0c:	469c      	mov	ip, r3
    2e0e:	4465      	add	r5, ip
    2e10:	2300      	movs	r3, #0
    2e12:	2400      	movs	r4, #0
    2e14:	2200      	movs	r2, #0
    2e16:	9308      	str	r3, [sp, #32]
    2e18:	9409      	str	r4, [sp, #36]	; 0x24
    2e1a:	930c      	str	r3, [sp, #48]	; 0x30
    2e1c:	940d      	str	r4, [sp, #52]	; 0x34
    2e1e:	2400      	movs	r4, #0
    2e20:	4bd6      	ldr	r3, [pc, #856]	; (317c <__ieee754_pow+0x5c4>)
    2e22:	9206      	str	r2, [sp, #24]
    2e24:	9307      	str	r3, [sp, #28]
    2e26:	9a06      	ldr	r2, [sp, #24]
    2e28:	9b07      	ldr	r3, [sp, #28]
    2e2a:	0029      	movs	r1, r5
    2e2c:	900a      	str	r0, [sp, #40]	; 0x28
    2e2e:	910b      	str	r1, [sp, #44]	; 0x2c
    2e30:	f002 fc78 	bl	5724 <__aeabi_dsub>
    2e34:	9a06      	ldr	r2, [sp, #24]
    2e36:	9b07      	ldr	r3, [sp, #28]
    2e38:	0006      	movs	r6, r0
    2e3a:	000f      	movs	r7, r1
    2e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e40:	f001 faa6 	bl	4390 <__aeabi_dadd>
    2e44:	0002      	movs	r2, r0
    2e46:	000b      	movs	r3, r1
    2e48:	2000      	movs	r0, #0
    2e4a:	49cc      	ldr	r1, [pc, #816]	; (317c <__ieee754_pow+0x5c4>)
    2e4c:	f001 fdcc 	bl	49e8 <__aeabi_ddiv>
    2e50:	000a      	movs	r2, r1
    2e52:	0001      	movs	r1, r0
    2e54:	0013      	movs	r3, r2
    2e56:	910e      	str	r1, [sp, #56]	; 0x38
    2e58:	920f      	str	r2, [sp, #60]	; 0x3c
    2e5a:	0002      	movs	r2, r0
    2e5c:	0039      	movs	r1, r7
    2e5e:	0030      	movs	r0, r6
    2e60:	f002 f9e6 	bl	5230 <__aeabi_dmul>
    2e64:	000a      	movs	r2, r1
    2e66:	0001      	movs	r1, r0
    2e68:	2080      	movs	r0, #128	; 0x80
    2e6a:	9104      	str	r1, [sp, #16]
    2e6c:	9205      	str	r2, [sp, #20]
    2e6e:	0013      	movs	r3, r2
    2e70:	2200      	movs	r2, #0
    2e72:	2180      	movs	r1, #128	; 0x80
    2e74:	0300      	lsls	r0, r0, #12
    2e76:	4684      	mov	ip, r0
    2e78:	9202      	str	r2, [sp, #8]
    2e7a:	9303      	str	r3, [sp, #12]
    2e7c:	2200      	movs	r2, #0
    2e7e:	0589      	lsls	r1, r1, #22
    2e80:	106d      	asrs	r5, r5, #1
    2e82:	430d      	orrs	r5, r1
    2e84:	4465      	add	r5, ip
    2e86:	192b      	adds	r3, r5, r4
    2e88:	9802      	ldr	r0, [sp, #8]
    2e8a:	9903      	ldr	r1, [sp, #12]
    2e8c:	0014      	movs	r4, r2
    2e8e:	001d      	movs	r5, r3
    2e90:	f002 f9ce 	bl	5230 <__aeabi_dmul>
    2e94:	0002      	movs	r2, r0
    2e96:	000b      	movs	r3, r1
    2e98:	0030      	movs	r0, r6
    2e9a:	0039      	movs	r1, r7
    2e9c:	f002 fc42 	bl	5724 <__aeabi_dsub>
    2ea0:	9a06      	ldr	r2, [sp, #24]
    2ea2:	9b07      	ldr	r3, [sp, #28]
    2ea4:	0006      	movs	r6, r0
    2ea6:	000f      	movs	r7, r1
    2ea8:	0020      	movs	r0, r4
    2eaa:	0029      	movs	r1, r5
    2eac:	f002 fc3a 	bl	5724 <__aeabi_dsub>
    2eb0:	0002      	movs	r2, r0
    2eb2:	000b      	movs	r3, r1
    2eb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2eb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2eb8:	f002 fc34 	bl	5724 <__aeabi_dsub>
    2ebc:	9a02      	ldr	r2, [sp, #8]
    2ebe:	9b03      	ldr	r3, [sp, #12]
    2ec0:	f002 f9b6 	bl	5230 <__aeabi_dmul>
    2ec4:	0002      	movs	r2, r0
    2ec6:	000b      	movs	r3, r1
    2ec8:	0030      	movs	r0, r6
    2eca:	0039      	movs	r1, r7
    2ecc:	f002 fc2a 	bl	5724 <__aeabi_dsub>
    2ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2ed4:	f002 f9ac 	bl	5230 <__aeabi_dmul>
    2ed8:	9d04      	ldr	r5, [sp, #16]
    2eda:	9e05      	ldr	r6, [sp, #20]
    2edc:	9006      	str	r0, [sp, #24]
    2ede:	9107      	str	r1, [sp, #28]
    2ee0:	002a      	movs	r2, r5
    2ee2:	0033      	movs	r3, r6
    2ee4:	0028      	movs	r0, r5
    2ee6:	0031      	movs	r1, r6
    2ee8:	f002 f9a2 	bl	5230 <__aeabi_dmul>
    2eec:	0006      	movs	r6, r0
    2eee:	000f      	movs	r7, r1
    2ef0:	4aa6      	ldr	r2, [pc, #664]	; (318c <__ieee754_pow+0x5d4>)
    2ef2:	4ba7      	ldr	r3, [pc, #668]	; (3190 <__ieee754_pow+0x5d8>)
    2ef4:	f002 f99c 	bl	5230 <__aeabi_dmul>
    2ef8:	4aa6      	ldr	r2, [pc, #664]	; (3194 <__ieee754_pow+0x5dc>)
    2efa:	4ba7      	ldr	r3, [pc, #668]	; (3198 <__ieee754_pow+0x5e0>)
    2efc:	f001 fa48 	bl	4390 <__aeabi_dadd>
    2f00:	0032      	movs	r2, r6
    2f02:	003b      	movs	r3, r7
    2f04:	f002 f994 	bl	5230 <__aeabi_dmul>
    2f08:	4aa4      	ldr	r2, [pc, #656]	; (319c <__ieee754_pow+0x5e4>)
    2f0a:	4ba5      	ldr	r3, [pc, #660]	; (31a0 <__ieee754_pow+0x5e8>)
    2f0c:	f001 fa40 	bl	4390 <__aeabi_dadd>
    2f10:	0032      	movs	r2, r6
    2f12:	003b      	movs	r3, r7
    2f14:	f002 f98c 	bl	5230 <__aeabi_dmul>
    2f18:	4aa2      	ldr	r2, [pc, #648]	; (31a4 <__ieee754_pow+0x5ec>)
    2f1a:	4ba3      	ldr	r3, [pc, #652]	; (31a8 <__ieee754_pow+0x5f0>)
    2f1c:	f001 fa38 	bl	4390 <__aeabi_dadd>
    2f20:	0032      	movs	r2, r6
    2f22:	003b      	movs	r3, r7
    2f24:	f002 f984 	bl	5230 <__aeabi_dmul>
    2f28:	4aa0      	ldr	r2, [pc, #640]	; (31ac <__ieee754_pow+0x5f4>)
    2f2a:	4ba1      	ldr	r3, [pc, #644]	; (31b0 <__ieee754_pow+0x5f8>)
    2f2c:	f001 fa30 	bl	4390 <__aeabi_dadd>
    2f30:	0032      	movs	r2, r6
    2f32:	003b      	movs	r3, r7
    2f34:	f002 f97c 	bl	5230 <__aeabi_dmul>
    2f38:	4a9e      	ldr	r2, [pc, #632]	; (31b4 <__ieee754_pow+0x5fc>)
    2f3a:	4b9f      	ldr	r3, [pc, #636]	; (31b8 <__ieee754_pow+0x600>)
    2f3c:	f001 fa28 	bl	4390 <__aeabi_dadd>
    2f40:	0032      	movs	r2, r6
    2f42:	0004      	movs	r4, r0
    2f44:	000d      	movs	r5, r1
    2f46:	003b      	movs	r3, r7
    2f48:	0030      	movs	r0, r6
    2f4a:	0039      	movs	r1, r7
    2f4c:	f002 f970 	bl	5230 <__aeabi_dmul>
    2f50:	0002      	movs	r2, r0
    2f52:	000b      	movs	r3, r1
    2f54:	0020      	movs	r0, r4
    2f56:	0029      	movs	r1, r5
    2f58:	f002 f96a 	bl	5230 <__aeabi_dmul>
    2f5c:	9e02      	ldr	r6, [sp, #8]
    2f5e:	9f03      	ldr	r7, [sp, #12]
    2f60:	0004      	movs	r4, r0
    2f62:	000d      	movs	r5, r1
    2f64:	9804      	ldr	r0, [sp, #16]
    2f66:	9905      	ldr	r1, [sp, #20]
    2f68:	0032      	movs	r2, r6
    2f6a:	003b      	movs	r3, r7
    2f6c:	f001 fa10 	bl	4390 <__aeabi_dadd>
    2f70:	9a06      	ldr	r2, [sp, #24]
    2f72:	9b07      	ldr	r3, [sp, #28]
    2f74:	f002 f95c 	bl	5230 <__aeabi_dmul>
    2f78:	0022      	movs	r2, r4
    2f7a:	002b      	movs	r3, r5
    2f7c:	f001 fa08 	bl	4390 <__aeabi_dadd>
    2f80:	0032      	movs	r2, r6
    2f82:	900a      	str	r0, [sp, #40]	; 0x28
    2f84:	910b      	str	r1, [sp, #44]	; 0x2c
    2f86:	003b      	movs	r3, r7
    2f88:	0030      	movs	r0, r6
    2f8a:	0039      	movs	r1, r7
    2f8c:	9602      	str	r6, [sp, #8]
    2f8e:	9703      	str	r7, [sp, #12]
    2f90:	f002 f94e 	bl	5230 <__aeabi_dmul>
    2f94:	2200      	movs	r2, #0
    2f96:	4b89      	ldr	r3, [pc, #548]	; (31bc <__ieee754_pow+0x604>)
    2f98:	0004      	movs	r4, r0
    2f9a:	000d      	movs	r5, r1
    2f9c:	f001 f9f8 	bl	4390 <__aeabi_dadd>
    2fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2fa4:	f001 f9f4 	bl	4390 <__aeabi_dadd>
    2fa8:	2600      	movs	r6, #0
    2faa:	000f      	movs	r7, r1
    2fac:	0032      	movs	r2, r6
    2fae:	000b      	movs	r3, r1
    2fb0:	9802      	ldr	r0, [sp, #8]
    2fb2:	9903      	ldr	r1, [sp, #12]
    2fb4:	f002 f93c 	bl	5230 <__aeabi_dmul>
    2fb8:	2200      	movs	r2, #0
    2fba:	9002      	str	r0, [sp, #8]
    2fbc:	9103      	str	r1, [sp, #12]
    2fbe:	4b7f      	ldr	r3, [pc, #508]	; (31bc <__ieee754_pow+0x604>)
    2fc0:	0030      	movs	r0, r6
    2fc2:	0039      	movs	r1, r7
    2fc4:	f002 fbae 	bl	5724 <__aeabi_dsub>
    2fc8:	0022      	movs	r2, r4
    2fca:	002b      	movs	r3, r5
    2fcc:	f002 fbaa 	bl	5724 <__aeabi_dsub>
    2fd0:	0002      	movs	r2, r0
    2fd2:	000b      	movs	r3, r1
    2fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fd8:	f002 fba4 	bl	5724 <__aeabi_dsub>
    2fdc:	9a04      	ldr	r2, [sp, #16]
    2fde:	9b05      	ldr	r3, [sp, #20]
    2fe0:	f002 f926 	bl	5230 <__aeabi_dmul>
    2fe4:	0032      	movs	r2, r6
    2fe6:	0004      	movs	r4, r0
    2fe8:	000d      	movs	r5, r1
    2fea:	9806      	ldr	r0, [sp, #24]
    2fec:	9907      	ldr	r1, [sp, #28]
    2fee:	003b      	movs	r3, r7
    2ff0:	f002 f91e 	bl	5230 <__aeabi_dmul>
    2ff4:	0002      	movs	r2, r0
    2ff6:	000b      	movs	r3, r1
    2ff8:	0020      	movs	r0, r4
    2ffa:	0029      	movs	r1, r5
    2ffc:	f001 f9c8 	bl	4390 <__aeabi_dadd>
    3000:	0004      	movs	r4, r0
    3002:	000d      	movs	r5, r1
    3004:	0002      	movs	r2, r0
    3006:	000b      	movs	r3, r1
    3008:	9802      	ldr	r0, [sp, #8]
    300a:	9903      	ldr	r1, [sp, #12]
    300c:	f001 f9c0 	bl	4390 <__aeabi_dadd>
    3010:	2600      	movs	r6, #0
    3012:	22e0      	movs	r2, #224	; 0xe0
    3014:	4b6a      	ldr	r3, [pc, #424]	; (31c0 <__ieee754_pow+0x608>)
    3016:	0612      	lsls	r2, r2, #24
    3018:	0030      	movs	r0, r6
    301a:	000f      	movs	r7, r1
    301c:	f002 f908 	bl	5230 <__aeabi_dmul>
    3020:	9a02      	ldr	r2, [sp, #8]
    3022:	9b03      	ldr	r3, [sp, #12]
    3024:	9004      	str	r0, [sp, #16]
    3026:	9105      	str	r1, [sp, #20]
    3028:	0030      	movs	r0, r6
    302a:	0039      	movs	r1, r7
    302c:	f002 fb7a 	bl	5724 <__aeabi_dsub>
    3030:	0002      	movs	r2, r0
    3032:	000b      	movs	r3, r1
    3034:	0020      	movs	r0, r4
    3036:	0029      	movs	r1, r5
    3038:	f002 fb74 	bl	5724 <__aeabi_dsub>
    303c:	4a61      	ldr	r2, [pc, #388]	; (31c4 <__ieee754_pow+0x60c>)
    303e:	4b60      	ldr	r3, [pc, #384]	; (31c0 <__ieee754_pow+0x608>)
    3040:	f002 f8f6 	bl	5230 <__aeabi_dmul>
    3044:	4a60      	ldr	r2, [pc, #384]	; (31c8 <__ieee754_pow+0x610>)
    3046:	0004      	movs	r4, r0
    3048:	000d      	movs	r5, r1
    304a:	4b60      	ldr	r3, [pc, #384]	; (31cc <__ieee754_pow+0x614>)
    304c:	0030      	movs	r0, r6
    304e:	0039      	movs	r1, r7
    3050:	f002 f8ee 	bl	5230 <__aeabi_dmul>
    3054:	0002      	movs	r2, r0
    3056:	000b      	movs	r3, r1
    3058:	0020      	movs	r0, r4
    305a:	0029      	movs	r1, r5
    305c:	f001 f998 	bl	4390 <__aeabi_dadd>
    3060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3064:	f001 f994 	bl	4390 <__aeabi_dadd>
    3068:	0006      	movs	r6, r0
    306a:	4648      	mov	r0, r9
    306c:	000f      	movs	r7, r1
    306e:	f002 ff03 	bl	5e78 <__aeabi_i2d>
    3072:	0004      	movs	r4, r0
    3074:	000d      	movs	r5, r1
    3076:	9804      	ldr	r0, [sp, #16]
    3078:	9905      	ldr	r1, [sp, #20]
    307a:	0032      	movs	r2, r6
    307c:	003b      	movs	r3, r7
    307e:	f001 f987 	bl	4390 <__aeabi_dadd>
    3082:	9a08      	ldr	r2, [sp, #32]
    3084:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3086:	f001 f983 	bl	4390 <__aeabi_dadd>
    308a:	0022      	movs	r2, r4
    308c:	002b      	movs	r3, r5
    308e:	f001 f97f 	bl	4390 <__aeabi_dadd>
    3092:	2000      	movs	r0, #0
    3094:	0022      	movs	r2, r4
    3096:	002b      	movs	r3, r5
    3098:	9002      	str	r0, [sp, #8]
    309a:	9103      	str	r1, [sp, #12]
    309c:	f002 fb42 	bl	5724 <__aeabi_dsub>
    30a0:	9a08      	ldr	r2, [sp, #32]
    30a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30a4:	f002 fb3e 	bl	5724 <__aeabi_dsub>
    30a8:	9a04      	ldr	r2, [sp, #16]
    30aa:	9b05      	ldr	r3, [sp, #20]
    30ac:	f002 fb3a 	bl	5724 <__aeabi_dsub>
    30b0:	0002      	movs	r2, r0
    30b2:	000b      	movs	r3, r1
    30b4:	0030      	movs	r0, r6
    30b6:	0039      	movs	r1, r7
    30b8:	f002 fb34 	bl	5724 <__aeabi_dsub>
    30bc:	9004      	str	r0, [sp, #16]
    30be:	9105      	str	r1, [sp, #20]
    30c0:	465b      	mov	r3, fp
    30c2:	4642      	mov	r2, r8
    30c4:	3b01      	subs	r3, #1
    30c6:	4313      	orrs	r3, r2
    30c8:	d100      	bne.n	30cc <__ieee754_pow+0x514>
    30ca:	e197      	b.n	33fc <__ieee754_pow+0x844>
    30cc:	2300      	movs	r3, #0
    30ce:	4c2b      	ldr	r4, [pc, #172]	; (317c <__ieee754_pow+0x5c4>)
    30d0:	9306      	str	r3, [sp, #24]
    30d2:	9407      	str	r4, [sp, #28]
    30d4:	9800      	ldr	r0, [sp, #0]
    30d6:	9901      	ldr	r1, [sp, #4]
    30d8:	2600      	movs	r6, #0
    30da:	000b      	movs	r3, r1
    30dc:	0032      	movs	r2, r6
    30de:	000f      	movs	r7, r1
    30e0:	f002 fb20 	bl	5724 <__aeabi_dsub>
    30e4:	9a02      	ldr	r2, [sp, #8]
    30e6:	9b03      	ldr	r3, [sp, #12]
    30e8:	f002 f8a2 	bl	5230 <__aeabi_dmul>
    30ec:	9a00      	ldr	r2, [sp, #0]
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	0004      	movs	r4, r0
    30f2:	000d      	movs	r5, r1
    30f4:	9804      	ldr	r0, [sp, #16]
    30f6:	9905      	ldr	r1, [sp, #20]
    30f8:	f002 f89a 	bl	5230 <__aeabi_dmul>
    30fc:	0002      	movs	r2, r0
    30fe:	000b      	movs	r3, r1
    3100:	0020      	movs	r0, r4
    3102:	0029      	movs	r1, r5
    3104:	f001 f944 	bl	4390 <__aeabi_dadd>
    3108:	0004      	movs	r4, r0
    310a:	000d      	movs	r5, r1
    310c:	9802      	ldr	r0, [sp, #8]
    310e:	9903      	ldr	r1, [sp, #12]
    3110:	003b      	movs	r3, r7
    3112:	0032      	movs	r2, r6
    3114:	9404      	str	r4, [sp, #16]
    3116:	9505      	str	r5, [sp, #20]
    3118:	f002 f88a 	bl	5230 <__aeabi_dmul>
    311c:	9000      	str	r0, [sp, #0]
    311e:	9101      	str	r1, [sp, #4]
    3120:	000b      	movs	r3, r1
    3122:	0002      	movs	r2, r0
    3124:	0029      	movs	r1, r5
    3126:	0020      	movs	r0, r4
    3128:	f001 f932 	bl	4390 <__aeabi_dadd>
    312c:	4b28      	ldr	r3, [pc, #160]	; (31d0 <__ieee754_pow+0x618>)
    312e:	4681      	mov	r9, r0
    3130:	1e0f      	subs	r7, r1, #0
    3132:	468a      	mov	sl, r1
    3134:	429f      	cmp	r7, r3
    3136:	dc00      	bgt.n	313a <__ieee754_pow+0x582>
    3138:	e13c      	b.n	33b4 <__ieee754_pow+0x7fc>
    313a:	4b26      	ldr	r3, [pc, #152]	; (31d4 <__ieee754_pow+0x61c>)
    313c:	18cb      	adds	r3, r1, r3
    313e:	4303      	orrs	r3, r0
    3140:	d000      	beq.n	3144 <__ieee754_pow+0x58c>
    3142:	e1db      	b.n	34fc <__ieee754_pow+0x944>
    3144:	9804      	ldr	r0, [sp, #16]
    3146:	9905      	ldr	r1, [sp, #20]
    3148:	4a23      	ldr	r2, [pc, #140]	; (31d8 <__ieee754_pow+0x620>)
    314a:	4b24      	ldr	r3, [pc, #144]	; (31dc <__ieee754_pow+0x624>)
    314c:	f001 f920 	bl	4390 <__aeabi_dadd>
    3150:	9a00      	ldr	r2, [sp, #0]
    3152:	9b01      	ldr	r3, [sp, #4]
    3154:	0004      	movs	r4, r0
    3156:	000d      	movs	r5, r1
    3158:	4648      	mov	r0, r9
    315a:	0039      	movs	r1, r7
    315c:	f002 fae2 	bl	5724 <__aeabi_dsub>
    3160:	0002      	movs	r2, r0
    3162:	000b      	movs	r3, r1
    3164:	0020      	movs	r0, r4
    3166:	0029      	movs	r1, r5
    3168:	f000 fcae 	bl	3ac8 <__aeabi_dcmpgt>
    316c:	003e      	movs	r6, r7
    316e:	e037      	b.n	31e0 <__ieee754_pow+0x628>
    3170:	000fffff 	.word	0x000fffff
    3174:	43400000 	.word	0x43400000
    3178:	fffffc01 	.word	0xfffffc01
    317c:	3ff00000 	.word	0x3ff00000
    3180:	0003988e 	.word	0x0003988e
    3184:	000bb679 	.word	0x000bb679
    3188:	fff00000 	.word	0xfff00000
    318c:	4a454eef 	.word	0x4a454eef
    3190:	3fca7e28 	.word	0x3fca7e28
    3194:	93c9db65 	.word	0x93c9db65
    3198:	3fcd864a 	.word	0x3fcd864a
    319c:	a91d4101 	.word	0xa91d4101
    31a0:	3fd17460 	.word	0x3fd17460
    31a4:	518f264d 	.word	0x518f264d
    31a8:	3fd55555 	.word	0x3fd55555
    31ac:	db6fabff 	.word	0xdb6fabff
    31b0:	3fdb6db6 	.word	0x3fdb6db6
    31b4:	33333303 	.word	0x33333303
    31b8:	3fe33333 	.word	0x3fe33333
    31bc:	40080000 	.word	0x40080000
    31c0:	3feec709 	.word	0x3feec709
    31c4:	dc3a03fd 	.word	0xdc3a03fd
    31c8:	145b01f5 	.word	0x145b01f5
    31cc:	be3e2fe0 	.word	0xbe3e2fe0
    31d0:	408fffff 	.word	0x408fffff
    31d4:	bf700000 	.word	0xbf700000
    31d8:	652b82fe 	.word	0x652b82fe
    31dc:	3c971547 	.word	0x3c971547
    31e0:	2800      	cmp	r0, #0
    31e2:	d000      	beq.n	31e6 <__ieee754_pow+0x62e>
    31e4:	e18a      	b.n	34fc <__ieee754_pow+0x944>
    31e6:	2280      	movs	r2, #128	; 0x80
    31e8:	4be7      	ldr	r3, [pc, #924]	; (3588 <__ieee754_pow+0x9d0>)
    31ea:	0352      	lsls	r2, r2, #13
    31ec:	469c      	mov	ip, r3
    31ee:	0013      	movs	r3, r2
    31f0:	1536      	asrs	r6, r6, #20
    31f2:	4466      	add	r6, ip
    31f4:	4133      	asrs	r3, r6
    31f6:	49e5      	ldr	r1, [pc, #916]	; (358c <__ieee754_pow+0x9d4>)
    31f8:	19db      	adds	r3, r3, r7
    31fa:	005e      	lsls	r6, r3, #1
    31fc:	001c      	movs	r4, r3
    31fe:	031b      	lsls	r3, r3, #12
    3200:	468c      	mov	ip, r1
    3202:	0b1b      	lsrs	r3, r3, #12
    3204:	4313      	orrs	r3, r2
    3206:	2214      	movs	r2, #20
    3208:	0d76      	lsrs	r6, r6, #21
    320a:	4fe1      	ldr	r7, [pc, #900]	; (3590 <__ieee754_pow+0x9d8>)
    320c:	4466      	add	r6, ip
    320e:	4137      	asrs	r7, r6
    3210:	1b96      	subs	r6, r2, r6
    3212:	4133      	asrs	r3, r6
    3214:	4698      	mov	r8, r3
    3216:	4653      	mov	r3, sl
    3218:	43bc      	bics	r4, r7
    321a:	2000      	movs	r0, #0
    321c:	0021      	movs	r1, r4
    321e:	2b00      	cmp	r3, #0
    3220:	da00      	bge.n	3224 <__ieee754_pow+0x66c>
    3222:	e1a9      	b.n	3578 <__ieee754_pow+0x9c0>
    3224:	0002      	movs	r2, r0
    3226:	000b      	movs	r3, r1
    3228:	9800      	ldr	r0, [sp, #0]
    322a:	9901      	ldr	r1, [sp, #4]
    322c:	f002 fa7a 	bl	5724 <__aeabi_dsub>
    3230:	000b      	movs	r3, r1
    3232:	9000      	str	r0, [sp, #0]
    3234:	9101      	str	r1, [sp, #4]
    3236:	0002      	movs	r2, r0
    3238:	9804      	ldr	r0, [sp, #16]
    323a:	9905      	ldr	r1, [sp, #20]
    323c:	f001 f8a8 	bl	4390 <__aeabi_dadd>
    3240:	4643      	mov	r3, r8
    3242:	051b      	lsls	r3, r3, #20
    3244:	4699      	mov	r9, r3
    3246:	2000      	movs	r0, #0
    3248:	2200      	movs	r2, #0
    324a:	4bd2      	ldr	r3, [pc, #840]	; (3594 <__ieee754_pow+0x9dc>)
    324c:	0006      	movs	r6, r0
    324e:	000f      	movs	r7, r1
    3250:	f001 ffee 	bl	5230 <__aeabi_dmul>
    3254:	9a00      	ldr	r2, [sp, #0]
    3256:	9b01      	ldr	r3, [sp, #4]
    3258:	9002      	str	r0, [sp, #8]
    325a:	9103      	str	r1, [sp, #12]
    325c:	0030      	movs	r0, r6
    325e:	0039      	movs	r1, r7
    3260:	f002 fa60 	bl	5724 <__aeabi_dsub>
    3264:	0002      	movs	r2, r0
    3266:	000b      	movs	r3, r1
    3268:	9804      	ldr	r0, [sp, #16]
    326a:	9905      	ldr	r1, [sp, #20]
    326c:	f002 fa5a 	bl	5724 <__aeabi_dsub>
    3270:	4ac9      	ldr	r2, [pc, #804]	; (3598 <__ieee754_pow+0x9e0>)
    3272:	4bca      	ldr	r3, [pc, #808]	; (359c <__ieee754_pow+0x9e4>)
    3274:	f001 ffdc 	bl	5230 <__aeabi_dmul>
    3278:	4ac9      	ldr	r2, [pc, #804]	; (35a0 <__ieee754_pow+0x9e8>)
    327a:	0004      	movs	r4, r0
    327c:	000d      	movs	r5, r1
    327e:	4bc9      	ldr	r3, [pc, #804]	; (35a4 <__ieee754_pow+0x9ec>)
    3280:	0030      	movs	r0, r6
    3282:	0039      	movs	r1, r7
    3284:	f001 ffd4 	bl	5230 <__aeabi_dmul>
    3288:	0002      	movs	r2, r0
    328a:	000b      	movs	r3, r1
    328c:	0020      	movs	r0, r4
    328e:	0029      	movs	r1, r5
    3290:	f001 f87e 	bl	4390 <__aeabi_dadd>
    3294:	0004      	movs	r4, r0
    3296:	000d      	movs	r5, r1
    3298:	0002      	movs	r2, r0
    329a:	000b      	movs	r3, r1
    329c:	9802      	ldr	r0, [sp, #8]
    329e:	9903      	ldr	r1, [sp, #12]
    32a0:	f001 f876 	bl	4390 <__aeabi_dadd>
    32a4:	9a02      	ldr	r2, [sp, #8]
    32a6:	9b03      	ldr	r3, [sp, #12]
    32a8:	0006      	movs	r6, r0
    32aa:	000f      	movs	r7, r1
    32ac:	f002 fa3a 	bl	5724 <__aeabi_dsub>
    32b0:	0002      	movs	r2, r0
    32b2:	000b      	movs	r3, r1
    32b4:	0020      	movs	r0, r4
    32b6:	0029      	movs	r1, r5
    32b8:	f002 fa34 	bl	5724 <__aeabi_dsub>
    32bc:	0032      	movs	r2, r6
    32be:	9000      	str	r0, [sp, #0]
    32c0:	9101      	str	r1, [sp, #4]
    32c2:	003b      	movs	r3, r7
    32c4:	0030      	movs	r0, r6
    32c6:	0039      	movs	r1, r7
    32c8:	f001 ffb2 	bl	5230 <__aeabi_dmul>
    32cc:	0004      	movs	r4, r0
    32ce:	000d      	movs	r5, r1
    32d0:	4ab5      	ldr	r2, [pc, #724]	; (35a8 <__ieee754_pow+0x9f0>)
    32d2:	4bb6      	ldr	r3, [pc, #728]	; (35ac <__ieee754_pow+0x9f4>)
    32d4:	f001 ffac 	bl	5230 <__aeabi_dmul>
    32d8:	4ab5      	ldr	r2, [pc, #724]	; (35b0 <__ieee754_pow+0x9f8>)
    32da:	4bb6      	ldr	r3, [pc, #728]	; (35b4 <__ieee754_pow+0x9fc>)
    32dc:	f002 fa22 	bl	5724 <__aeabi_dsub>
    32e0:	0022      	movs	r2, r4
    32e2:	002b      	movs	r3, r5
    32e4:	f001 ffa4 	bl	5230 <__aeabi_dmul>
    32e8:	4ab3      	ldr	r2, [pc, #716]	; (35b8 <__ieee754_pow+0xa00>)
    32ea:	4bb4      	ldr	r3, [pc, #720]	; (35bc <__ieee754_pow+0xa04>)
    32ec:	f001 f850 	bl	4390 <__aeabi_dadd>
    32f0:	0022      	movs	r2, r4
    32f2:	002b      	movs	r3, r5
    32f4:	f001 ff9c 	bl	5230 <__aeabi_dmul>
    32f8:	4ab1      	ldr	r2, [pc, #708]	; (35c0 <__ieee754_pow+0xa08>)
    32fa:	4bb2      	ldr	r3, [pc, #712]	; (35c4 <__ieee754_pow+0xa0c>)
    32fc:	f002 fa12 	bl	5724 <__aeabi_dsub>
    3300:	0022      	movs	r2, r4
    3302:	002b      	movs	r3, r5
    3304:	f001 ff94 	bl	5230 <__aeabi_dmul>
    3308:	4aaf      	ldr	r2, [pc, #700]	; (35c8 <__ieee754_pow+0xa10>)
    330a:	4bb0      	ldr	r3, [pc, #704]	; (35cc <__ieee754_pow+0xa14>)
    330c:	f001 f840 	bl	4390 <__aeabi_dadd>
    3310:	0022      	movs	r2, r4
    3312:	002b      	movs	r3, r5
    3314:	f001 ff8c 	bl	5230 <__aeabi_dmul>
    3318:	0002      	movs	r2, r0
    331a:	000b      	movs	r3, r1
    331c:	0030      	movs	r0, r6
    331e:	0039      	movs	r1, r7
    3320:	f002 fa00 	bl	5724 <__aeabi_dsub>
    3324:	0004      	movs	r4, r0
    3326:	000d      	movs	r5, r1
    3328:	0002      	movs	r2, r0
    332a:	000b      	movs	r3, r1
    332c:	0030      	movs	r0, r6
    332e:	0039      	movs	r1, r7
    3330:	f001 ff7e 	bl	5230 <__aeabi_dmul>
    3334:	2380      	movs	r3, #128	; 0x80
    3336:	9002      	str	r0, [sp, #8]
    3338:	9103      	str	r1, [sp, #12]
    333a:	2200      	movs	r2, #0
    333c:	05db      	lsls	r3, r3, #23
    333e:	0020      	movs	r0, r4
    3340:	0029      	movs	r1, r5
    3342:	f002 f9ef 	bl	5724 <__aeabi_dsub>
    3346:	0002      	movs	r2, r0
    3348:	000b      	movs	r3, r1
    334a:	9802      	ldr	r0, [sp, #8]
    334c:	9903      	ldr	r1, [sp, #12]
    334e:	f001 fb4b 	bl	49e8 <__aeabi_ddiv>
    3352:	9a00      	ldr	r2, [sp, #0]
    3354:	9b01      	ldr	r3, [sp, #4]
    3356:	0004      	movs	r4, r0
    3358:	000d      	movs	r5, r1
    335a:	0030      	movs	r0, r6
    335c:	0039      	movs	r1, r7
    335e:	f001 ff67 	bl	5230 <__aeabi_dmul>
    3362:	9a00      	ldr	r2, [sp, #0]
    3364:	9b01      	ldr	r3, [sp, #4]
    3366:	f001 f813 	bl	4390 <__aeabi_dadd>
    336a:	0002      	movs	r2, r0
    336c:	000b      	movs	r3, r1
    336e:	0020      	movs	r0, r4
    3370:	0029      	movs	r1, r5
    3372:	f002 f9d7 	bl	5724 <__aeabi_dsub>
    3376:	0032      	movs	r2, r6
    3378:	003b      	movs	r3, r7
    337a:	f002 f9d3 	bl	5724 <__aeabi_dsub>
    337e:	0002      	movs	r2, r0
    3380:	000b      	movs	r3, r1
    3382:	2000      	movs	r0, #0
    3384:	4992      	ldr	r1, [pc, #584]	; (35d0 <__ieee754_pow+0xa18>)
    3386:	f002 f9cd 	bl	5724 <__aeabi_dsub>
    338a:	464b      	mov	r3, r9
    338c:	185b      	adds	r3, r3, r1
    338e:	151a      	asrs	r2, r3, #20
    3390:	2a00      	cmp	r2, #0
    3392:	dc00      	bgt.n	3396 <__ieee754_pow+0x7de>
    3394:	e0f4      	b.n	3580 <__ieee754_pow+0x9c8>
    3396:	0019      	movs	r1, r3
    3398:	9a06      	ldr	r2, [sp, #24]
    339a:	9b07      	ldr	r3, [sp, #28]
    339c:	f001 ff48 	bl	5230 <__aeabi_dmul>
    33a0:	0006      	movs	r6, r0
    33a2:	e452      	b.n	2c4a <__ieee754_pow+0x92>
    33a4:	0032      	movs	r2, r6
    33a6:	0030      	movs	r0, r6
    33a8:	002b      	movs	r3, r5
    33aa:	0029      	movs	r1, r5
    33ac:	f001 ff40 	bl	5230 <__aeabi_dmul>
    33b0:	0006      	movs	r6, r0
    33b2:	e44a      	b.n	2c4a <__ieee754_pow+0x92>
    33b4:	4b87      	ldr	r3, [pc, #540]	; (35d4 <__ieee754_pow+0xa1c>)
    33b6:	004e      	lsls	r6, r1, #1
    33b8:	0876      	lsrs	r6, r6, #1
    33ba:	429e      	cmp	r6, r3
    33bc:	dc00      	bgt.n	33c0 <__ieee754_pow+0x808>
    33be:	e0bf      	b.n	3540 <__ieee754_pow+0x988>
    33c0:	4b85      	ldr	r3, [pc, #532]	; (35d8 <__ieee754_pow+0xa20>)
    33c2:	18cb      	adds	r3, r1, r3
    33c4:	4303      	orrs	r3, r0
    33c6:	d10c      	bne.n	33e2 <__ieee754_pow+0x82a>
    33c8:	9a00      	ldr	r2, [sp, #0]
    33ca:	9b01      	ldr	r3, [sp, #4]
    33cc:	f002 f9aa 	bl	5724 <__aeabi_dsub>
    33d0:	0002      	movs	r2, r0
    33d2:	000b      	movs	r3, r1
    33d4:	9804      	ldr	r0, [sp, #16]
    33d6:	9905      	ldr	r1, [sp, #20]
    33d8:	f000 fb6c 	bl	3ab4 <__aeabi_dcmple>
    33dc:	2800      	cmp	r0, #0
    33de:	d100      	bne.n	33e2 <__ieee754_pow+0x82a>
    33e0:	e701      	b.n	31e6 <__ieee754_pow+0x62e>
    33e2:	9806      	ldr	r0, [sp, #24]
    33e4:	9907      	ldr	r1, [sp, #28]
    33e6:	4a7d      	ldr	r2, [pc, #500]	; (35dc <__ieee754_pow+0xa24>)
    33e8:	4b7d      	ldr	r3, [pc, #500]	; (35e0 <__ieee754_pow+0xa28>)
    33ea:	f001 ff21 	bl	5230 <__aeabi_dmul>
    33ee:	4a7b      	ldr	r2, [pc, #492]	; (35dc <__ieee754_pow+0xa24>)
    33f0:	4b7b      	ldr	r3, [pc, #492]	; (35e0 <__ieee754_pow+0xa28>)
    33f2:	f001 ff1d 	bl	5230 <__aeabi_dmul>
    33f6:	0006      	movs	r6, r0
    33f8:	f7ff fc27 	bl	2c4a <__ieee754_pow+0x92>
    33fc:	2300      	movs	r3, #0
    33fe:	4c79      	ldr	r4, [pc, #484]	; (35e4 <__ieee754_pow+0xa2c>)
    3400:	9306      	str	r3, [sp, #24]
    3402:	9407      	str	r4, [sp, #28]
    3404:	e666      	b.n	30d4 <__ieee754_pow+0x51c>
    3406:	4653      	mov	r3, sl
    3408:	2b00      	cmp	r3, #0
    340a:	db00      	blt.n	340e <__ieee754_pow+0x856>
    340c:	e4c3      	b.n	2d96 <__ieee754_pow+0x1de>
    340e:	9b00      	ldr	r3, [sp, #0]
    3410:	9c01      	ldr	r4, [sp, #4]
    3412:	2280      	movs	r2, #128	; 0x80
    3414:	0612      	lsls	r2, r2, #24
    3416:	001e      	movs	r6, r3
    3418:	4694      	mov	ip, r2
    341a:	0023      	movs	r3, r4
    341c:	4463      	add	r3, ip
    341e:	0019      	movs	r1, r3
    3420:	f7ff fc13 	bl	2c4a <__ieee754_pow+0x92>
    3424:	0002      	movs	r2, r0
    3426:	000b      	movs	r3, r1
    3428:	2000      	movs	r0, #0
    342a:	4969      	ldr	r1, [pc, #420]	; (35d0 <__ieee754_pow+0xa18>)
    342c:	f001 fadc 	bl	49e8 <__aeabi_ddiv>
    3430:	e44a      	b.n	2cc8 <__ieee754_pow+0x110>
    3432:	4b6d      	ldr	r3, [pc, #436]	; (35e8 <__ieee754_pow+0xa30>)
    3434:	429c      	cmp	r4, r3
    3436:	dc00      	bgt.n	343a <__ieee754_pow+0x882>
    3438:	e4aa      	b.n	2d90 <__ieee754_pow+0x1d8>
    343a:	4b65      	ldr	r3, [pc, #404]	; (35d0 <__ieee754_pow+0xa18>)
    343c:	429c      	cmp	r4, r3
    343e:	dd01      	ble.n	3444 <__ieee754_pow+0x88c>
    3440:	f7ff fc2c 	bl	2c9c <__ieee754_pow+0xe4>
    3444:	2200      	movs	r2, #0
    3446:	4b62      	ldr	r3, [pc, #392]	; (35d0 <__ieee754_pow+0xa18>)
    3448:	f002 f96c 	bl	5724 <__aeabi_dsub>
    344c:	22c0      	movs	r2, #192	; 0xc0
    344e:	4b67      	ldr	r3, [pc, #412]	; (35ec <__ieee754_pow+0xa34>)
    3450:	05d2      	lsls	r2, r2, #23
    3452:	0004      	movs	r4, r0
    3454:	000d      	movs	r5, r1
    3456:	f001 feeb 	bl	5230 <__aeabi_dmul>
    345a:	4a65      	ldr	r2, [pc, #404]	; (35f0 <__ieee754_pow+0xa38>)
    345c:	0006      	movs	r6, r0
    345e:	000f      	movs	r7, r1
    3460:	4b64      	ldr	r3, [pc, #400]	; (35f4 <__ieee754_pow+0xa3c>)
    3462:	0020      	movs	r0, r4
    3464:	0029      	movs	r1, r5
    3466:	f001 fee3 	bl	5230 <__aeabi_dmul>
    346a:	2200      	movs	r2, #0
    346c:	9002      	str	r0, [sp, #8]
    346e:	9103      	str	r1, [sp, #12]
    3470:	4b61      	ldr	r3, [pc, #388]	; (35f8 <__ieee754_pow+0xa40>)
    3472:	0020      	movs	r0, r4
    3474:	0029      	movs	r1, r5
    3476:	f001 fedb 	bl	5230 <__aeabi_dmul>
    347a:	0002      	movs	r2, r0
    347c:	000b      	movs	r3, r1
    347e:	485f      	ldr	r0, [pc, #380]	; (35fc <__ieee754_pow+0xa44>)
    3480:	495f      	ldr	r1, [pc, #380]	; (3600 <__ieee754_pow+0xa48>)
    3482:	f002 f94f 	bl	5724 <__aeabi_dsub>
    3486:	0022      	movs	r2, r4
    3488:	002b      	movs	r3, r5
    348a:	f001 fed1 	bl	5230 <__aeabi_dmul>
    348e:	0002      	movs	r2, r0
    3490:	000b      	movs	r3, r1
    3492:	2000      	movs	r0, #0
    3494:	495b      	ldr	r1, [pc, #364]	; (3604 <__ieee754_pow+0xa4c>)
    3496:	f002 f945 	bl	5724 <__aeabi_dsub>
    349a:	0022      	movs	r2, r4
    349c:	9004      	str	r0, [sp, #16]
    349e:	9105      	str	r1, [sp, #20]
    34a0:	002b      	movs	r3, r5
    34a2:	0020      	movs	r0, r4
    34a4:	0029      	movs	r1, r5
    34a6:	f001 fec3 	bl	5230 <__aeabi_dmul>
    34aa:	0002      	movs	r2, r0
    34ac:	000b      	movs	r3, r1
    34ae:	9804      	ldr	r0, [sp, #16]
    34b0:	9905      	ldr	r1, [sp, #20]
    34b2:	f001 febd 	bl	5230 <__aeabi_dmul>
    34b6:	4a54      	ldr	r2, [pc, #336]	; (3608 <__ieee754_pow+0xa50>)
    34b8:	4b4c      	ldr	r3, [pc, #304]	; (35ec <__ieee754_pow+0xa34>)
    34ba:	f001 feb9 	bl	5230 <__aeabi_dmul>
    34be:	0002      	movs	r2, r0
    34c0:	000b      	movs	r3, r1
    34c2:	9802      	ldr	r0, [sp, #8]
    34c4:	9903      	ldr	r1, [sp, #12]
    34c6:	f002 f92d 	bl	5724 <__aeabi_dsub>
    34ca:	0002      	movs	r2, r0
    34cc:	000b      	movs	r3, r1
    34ce:	0004      	movs	r4, r0
    34d0:	000d      	movs	r5, r1
    34d2:	0030      	movs	r0, r6
    34d4:	0039      	movs	r1, r7
    34d6:	f000 ff5b 	bl	4390 <__aeabi_dadd>
    34da:	2200      	movs	r2, #0
    34dc:	0010      	movs	r0, r2
    34de:	003b      	movs	r3, r7
    34e0:	0032      	movs	r2, r6
    34e2:	9002      	str	r0, [sp, #8]
    34e4:	9103      	str	r1, [sp, #12]
    34e6:	f002 f91d 	bl	5724 <__aeabi_dsub>
    34ea:	0002      	movs	r2, r0
    34ec:	000b      	movs	r3, r1
    34ee:	0020      	movs	r0, r4
    34f0:	0029      	movs	r1, r5
    34f2:	f002 f917 	bl	5724 <__aeabi_dsub>
    34f6:	9004      	str	r0, [sp, #16]
    34f8:	9105      	str	r1, [sp, #20]
    34fa:	e5e1      	b.n	30c0 <__ieee754_pow+0x508>
    34fc:	4a43      	ldr	r2, [pc, #268]	; (360c <__ieee754_pow+0xa54>)
    34fe:	4b44      	ldr	r3, [pc, #272]	; (3610 <__ieee754_pow+0xa58>)
    3500:	9806      	ldr	r0, [sp, #24]
    3502:	9907      	ldr	r1, [sp, #28]
    3504:	f001 fe94 	bl	5230 <__aeabi_dmul>
    3508:	4a40      	ldr	r2, [pc, #256]	; (360c <__ieee754_pow+0xa54>)
    350a:	4b41      	ldr	r3, [pc, #260]	; (3610 <__ieee754_pow+0xa58>)
    350c:	f001 fe90 	bl	5230 <__aeabi_dmul>
    3510:	0006      	movs	r6, r0
    3512:	f7ff fb9a 	bl	2c4a <__ieee754_pow+0x92>
    3516:	2a00      	cmp	r2, #0
    3518:	d001      	beq.n	351e <__ieee754_pow+0x966>
    351a:	f7ff fba5 	bl	2c68 <__ieee754_pow+0xb0>
    351e:	3214      	adds	r2, #20
    3520:	1ad3      	subs	r3, r2, r3
    3522:	003a      	movs	r2, r7
    3524:	411a      	asrs	r2, r3
    3526:	0011      	movs	r1, r2
    3528:	4099      	lsls	r1, r3
    352a:	428f      	cmp	r7, r1
    352c:	d001      	beq.n	3532 <__ieee754_pow+0x97a>
    352e:	f7ff fb6f 	bl	2c10 <__ieee754_pow+0x58>
    3532:	2301      	movs	r3, #1
    3534:	4013      	ands	r3, r2
    3536:	2202      	movs	r2, #2
    3538:	1ad3      	subs	r3, r2, r3
    353a:	469b      	mov	fp, r3
    353c:	f7ff fb68 	bl	2c10 <__ieee754_pow+0x58>
    3540:	4b30      	ldr	r3, [pc, #192]	; (3604 <__ieee754_pow+0xa4c>)
    3542:	429e      	cmp	r6, r3
    3544:	dd00      	ble.n	3548 <__ieee754_pow+0x990>
    3546:	e64e      	b.n	31e6 <__ieee754_pow+0x62e>
    3548:	2300      	movs	r3, #0
    354a:	4699      	mov	r9, r3
    354c:	4698      	mov	r8, r3
    354e:	e67a      	b.n	3246 <__ieee754_pow+0x68e>
    3550:	0002      	movs	r2, r0
    3552:	000b      	movs	r3, r1
    3554:	f7ff fc14 	bl	2d80 <__ieee754_pow+0x1c8>
    3558:	2380      	movs	r3, #128	; 0x80
    355a:	4c2e      	ldr	r4, [pc, #184]	; (3614 <__ieee754_pow+0xa5c>)
    355c:	05db      	lsls	r3, r3, #23
    355e:	9308      	str	r3, [sp, #32]
    3560:	9409      	str	r4, [sp, #36]	; 0x24
    3562:	4b2d      	ldr	r3, [pc, #180]	; (3618 <__ieee754_pow+0xa60>)
    3564:	4c2d      	ldr	r4, [pc, #180]	; (361c <__ieee754_pow+0xa64>)
    3566:	2200      	movs	r2, #0
    3568:	930c      	str	r3, [sp, #48]	; 0x30
    356a:	940d      	str	r4, [sp, #52]	; 0x34
    356c:	2480      	movs	r4, #128	; 0x80
    356e:	4b2c      	ldr	r3, [pc, #176]	; (3620 <__ieee754_pow+0xa68>)
    3570:	02e4      	lsls	r4, r4, #11
    3572:	9206      	str	r2, [sp, #24]
    3574:	9307      	str	r3, [sp, #28]
    3576:	e456      	b.n	2e26 <__ieee754_pow+0x26e>
    3578:	4643      	mov	r3, r8
    357a:	425b      	negs	r3, r3
    357c:	4698      	mov	r8, r3
    357e:	e651      	b.n	3224 <__ieee754_pow+0x66c>
    3580:	4642      	mov	r2, r8
    3582:	f000 f9fd 	bl	3980 <scalbn>
    3586:	e707      	b.n	3398 <__ieee754_pow+0x7e0>
    3588:	fffffc02 	.word	0xfffffc02
    358c:	fffffc01 	.word	0xfffffc01
    3590:	000fffff 	.word	0x000fffff
    3594:	3fe62e43 	.word	0x3fe62e43
    3598:	fefa39ef 	.word	0xfefa39ef
    359c:	3fe62e42 	.word	0x3fe62e42
    35a0:	0ca86c39 	.word	0x0ca86c39
    35a4:	be205c61 	.word	0xbe205c61
    35a8:	72bea4d0 	.word	0x72bea4d0
    35ac:	3e663769 	.word	0x3e663769
    35b0:	c5d26bf1 	.word	0xc5d26bf1
    35b4:	3ebbbd41 	.word	0x3ebbbd41
    35b8:	af25de2c 	.word	0xaf25de2c
    35bc:	3f11566a 	.word	0x3f11566a
    35c0:	16bebd93 	.word	0x16bebd93
    35c4:	3f66c16c 	.word	0x3f66c16c
    35c8:	5555553e 	.word	0x5555553e
    35cc:	3fc55555 	.word	0x3fc55555
    35d0:	3ff00000 	.word	0x3ff00000
    35d4:	4090cbff 	.word	0x4090cbff
    35d8:	3f6f3400 	.word	0x3f6f3400
    35dc:	c2f8f359 	.word	0xc2f8f359
    35e0:	01a56e1f 	.word	0x01a56e1f
    35e4:	bff00000 	.word	0xbff00000
    35e8:	3feffffe 	.word	0x3feffffe
    35ec:	3ff71547 	.word	0x3ff71547
    35f0:	f85ddf44 	.word	0xf85ddf44
    35f4:	3e54ae0b 	.word	0x3e54ae0b
    35f8:	3fd00000 	.word	0x3fd00000
    35fc:	55555555 	.word	0x55555555
    3600:	3fd55555 	.word	0x3fd55555
    3604:	3fe00000 	.word	0x3fe00000
    3608:	652b82fe 	.word	0x652b82fe
    360c:	8800759c 	.word	0x8800759c
    3610:	7e37e43c 	.word	0x7e37e43c
    3614:	3fe2b803 	.word	0x3fe2b803
    3618:	43cfd006 	.word	0x43cfd006
    361c:	3e4cfdeb 	.word	0x3e4cfdeb
    3620:	3ff80000 	.word	0x3ff80000

00003624 <__ieee754_sqrt>:
    3624:	b5f0      	push	{r4, r5, r6, r7, lr}
    3626:	4656      	mov	r6, sl
    3628:	464d      	mov	r5, r9
    362a:	4644      	mov	r4, r8
    362c:	465f      	mov	r7, fp
    362e:	4b75      	ldr	r3, [pc, #468]	; (3804 <__ieee754_sqrt+0x1e0>)
    3630:	b4f0      	push	{r4, r5, r6, r7}
    3632:	000a      	movs	r2, r1
    3634:	000d      	movs	r5, r1
    3636:	0019      	movs	r1, r3
    3638:	b083      	sub	sp, #12
    363a:	0006      	movs	r6, r0
    363c:	0004      	movs	r4, r0
    363e:	4029      	ands	r1, r5
    3640:	4299      	cmp	r1, r3
    3642:	d100      	bne.n	3646 <__ieee754_sqrt+0x22>
    3644:	e0ba      	b.n	37bc <__ieee754_sqrt+0x198>
    3646:	2d00      	cmp	r5, #0
    3648:	dc00      	bgt.n	364c <__ieee754_sqrt+0x28>
    364a:	e094      	b.n	3776 <__ieee754_sqrt+0x152>
    364c:	152d      	asrs	r5, r5, #20
    364e:	d100      	bne.n	3652 <__ieee754_sqrt+0x2e>
    3650:	e0a3      	b.n	379a <__ieee754_sqrt+0x176>
    3652:	4b6d      	ldr	r3, [pc, #436]	; (3808 <__ieee754_sqrt+0x1e4>)
    3654:	0312      	lsls	r2, r2, #12
    3656:	469c      	mov	ip, r3
    3658:	2380      	movs	r3, #128	; 0x80
    365a:	0b12      	lsrs	r2, r2, #12
    365c:	035b      	lsls	r3, r3, #13
    365e:	4465      	add	r5, ip
    3660:	431a      	orrs	r2, r3
    3662:	07eb      	lsls	r3, r5, #31
    3664:	d500      	bpl.n	3668 <__ieee754_sqrt+0x44>
    3666:	e081      	b.n	376c <__ieee754_sqrt+0x148>
    3668:	106b      	asrs	r3, r5, #1
    366a:	4698      	mov	r8, r3
    366c:	0fe3      	lsrs	r3, r4, #31
    366e:	189b      	adds	r3, r3, r2
    3670:	189b      	adds	r3, r3, r2
    3672:	2280      	movs	r2, #128	; 0x80
    3674:	2116      	movs	r1, #22
    3676:	2600      	movs	r6, #0
    3678:	2700      	movs	r7, #0
    367a:	0064      	lsls	r4, r4, #1
    367c:	0392      	lsls	r2, r2, #14
    367e:	18b8      	adds	r0, r7, r2
    3680:	4298      	cmp	r0, r3
    3682:	dc02      	bgt.n	368a <__ieee754_sqrt+0x66>
    3684:	1887      	adds	r7, r0, r2
    3686:	1a1b      	subs	r3, r3, r0
    3688:	18b6      	adds	r6, r6, r2
    368a:	0fe0      	lsrs	r0, r4, #31
    368c:	005b      	lsls	r3, r3, #1
    368e:	3901      	subs	r1, #1
    3690:	181b      	adds	r3, r3, r0
    3692:	0064      	lsls	r4, r4, #1
    3694:	0852      	lsrs	r2, r2, #1
    3696:	2900      	cmp	r1, #0
    3698:	d1f1      	bne.n	367e <__ieee754_sqrt+0x5a>
    369a:	2200      	movs	r2, #0
    369c:	9201      	str	r2, [sp, #4]
    369e:	4694      	mov	ip, r2
    36a0:	2280      	movs	r2, #128	; 0x80
    36a2:	0612      	lsls	r2, r2, #24
    36a4:	2020      	movs	r0, #32
    36a6:	4691      	mov	r9, r2
    36a8:	e009      	b.n	36be <__ieee754_sqrt+0x9a>
    36aa:	429f      	cmp	r7, r3
    36ac:	d041      	beq.n	3732 <__ieee754_sqrt+0x10e>
    36ae:	0fe1      	lsrs	r1, r4, #31
    36b0:	18c9      	adds	r1, r1, r3
    36b2:	3801      	subs	r0, #1
    36b4:	18cb      	adds	r3, r1, r3
    36b6:	0064      	lsls	r4, r4, #1
    36b8:	0852      	lsrs	r2, r2, #1
    36ba:	2800      	cmp	r0, #0
    36bc:	d01e      	beq.n	36fc <__ieee754_sqrt+0xd8>
    36be:	4661      	mov	r1, ip
    36c0:	1851      	adds	r1, r2, r1
    36c2:	429f      	cmp	r7, r3
    36c4:	daf1      	bge.n	36aa <__ieee754_sqrt+0x86>
    36c6:	188d      	adds	r5, r1, r2
    36c8:	46ac      	mov	ip, r5
    36ca:	0fcd      	lsrs	r5, r1, #31
    36cc:	07ed      	lsls	r5, r5, #31
    36ce:	46ba      	mov	sl, r7
    36d0:	454d      	cmp	r5, r9
    36d2:	d039      	beq.n	3748 <__ieee754_sqrt+0x124>
    36d4:	1bdb      	subs	r3, r3, r7
    36d6:	428c      	cmp	r4, r1
    36d8:	41bf      	sbcs	r7, r7
    36da:	427f      	negs	r7, r7
    36dc:	1bdb      	subs	r3, r3, r7
    36de:	1a64      	subs	r4, r4, r1
    36e0:	9901      	ldr	r1, [sp, #4]
    36e2:	3801      	subs	r0, #1
    36e4:	468b      	mov	fp, r1
    36e6:	4493      	add	fp, r2
    36e8:	4659      	mov	r1, fp
    36ea:	9101      	str	r1, [sp, #4]
    36ec:	0fe1      	lsrs	r1, r4, #31
    36ee:	18c9      	adds	r1, r1, r3
    36f0:	4657      	mov	r7, sl
    36f2:	18cb      	adds	r3, r1, r3
    36f4:	0064      	lsls	r4, r4, #1
    36f6:	0852      	lsrs	r2, r2, #1
    36f8:	2800      	cmp	r0, #0
    36fa:	d1e0      	bne.n	36be <__ieee754_sqrt+0x9a>
    36fc:	4323      	orrs	r3, r4
    36fe:	d12b      	bne.n	3758 <__ieee754_sqrt+0x134>
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	085b      	lsrs	r3, r3, #1
    3704:	4941      	ldr	r1, [pc, #260]	; (380c <__ieee754_sqrt+0x1e8>)
    3706:	1072      	asrs	r2, r6, #1
    3708:	468c      	mov	ip, r1
    370a:	4462      	add	r2, ip
    370c:	07f1      	lsls	r1, r6, #31
    370e:	d502      	bpl.n	3716 <__ieee754_sqrt+0xf2>
    3710:	2180      	movs	r1, #128	; 0x80
    3712:	0609      	lsls	r1, r1, #24
    3714:	430b      	orrs	r3, r1
    3716:	4641      	mov	r1, r8
    3718:	0509      	lsls	r1, r1, #20
    371a:	188d      	adds	r5, r1, r2
    371c:	001e      	movs	r6, r3
    371e:	002f      	movs	r7, r5
    3720:	0030      	movs	r0, r6
    3722:	0039      	movs	r1, r7
    3724:	b003      	add	sp, #12
    3726:	bc3c      	pop	{r2, r3, r4, r5}
    3728:	4690      	mov	r8, r2
    372a:	4699      	mov	r9, r3
    372c:	46a2      	mov	sl, r4
    372e:	46ab      	mov	fp, r5
    3730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3732:	42a1      	cmp	r1, r4
    3734:	d80e      	bhi.n	3754 <__ieee754_sqrt+0x130>
    3736:	188d      	adds	r5, r1, r2
    3738:	46ac      	mov	ip, r5
    373a:	0fcd      	lsrs	r5, r1, #31
    373c:	07ed      	lsls	r5, r5, #31
    373e:	454d      	cmp	r5, r9
    3740:	d048      	beq.n	37d4 <__ieee754_sqrt+0x1b0>
    3742:	469a      	mov	sl, r3
    3744:	2300      	movs	r3, #0
    3746:	e7ca      	b.n	36de <__ieee754_sqrt+0xba>
    3748:	4665      	mov	r5, ip
    374a:	2d00      	cmp	r5, #0
    374c:	dbc2      	blt.n	36d4 <__ieee754_sqrt+0xb0>
    374e:	1c7d      	adds	r5, r7, #1
    3750:	46aa      	mov	sl, r5
    3752:	e7bf      	b.n	36d4 <__ieee754_sqrt+0xb0>
    3754:	003b      	movs	r3, r7
    3756:	e7aa      	b.n	36ae <__ieee754_sqrt+0x8a>
    3758:	9b01      	ldr	r3, [sp, #4]
    375a:	3301      	adds	r3, #1
    375c:	d03e      	beq.n	37dc <__ieee754_sqrt+0x1b8>
    375e:	9a01      	ldr	r2, [sp, #4]
    3760:	2301      	movs	r3, #1
    3762:	4694      	mov	ip, r2
    3764:	4013      	ands	r3, r2
    3766:	4463      	add	r3, ip
    3768:	085b      	lsrs	r3, r3, #1
    376a:	e7cb      	b.n	3704 <__ieee754_sqrt+0xe0>
    376c:	0fe3      	lsrs	r3, r4, #31
    376e:	0052      	lsls	r2, r2, #1
    3770:	189a      	adds	r2, r3, r2
    3772:	0064      	lsls	r4, r4, #1
    3774:	e778      	b.n	3668 <__ieee754_sqrt+0x44>
    3776:	006b      	lsls	r3, r5, #1
    3778:	085b      	lsrs	r3, r3, #1
    377a:	4303      	orrs	r3, r0
    377c:	002f      	movs	r7, r5
    377e:	2b00      	cmp	r3, #0
    3780:	d0ce      	beq.n	3720 <__ieee754_sqrt+0xfc>
    3782:	2500      	movs	r5, #0
    3784:	2a00      	cmp	r2, #0
    3786:	d131      	bne.n	37ec <__ieee754_sqrt+0x1c8>
    3788:	0ae2      	lsrs	r2, r4, #11
    378a:	3d15      	subs	r5, #21
    378c:	0564      	lsls	r4, r4, #21
    378e:	2a00      	cmp	r2, #0
    3790:	d0fa      	beq.n	3788 <__ieee754_sqrt+0x164>
    3792:	2380      	movs	r3, #128	; 0x80
    3794:	035b      	lsls	r3, r3, #13
    3796:	421a      	tst	r2, r3
    3798:	d123      	bne.n	37e2 <__ieee754_sqrt+0x1be>
    379a:	2080      	movs	r0, #128	; 0x80
    379c:	2300      	movs	r3, #0
    379e:	0340      	lsls	r0, r0, #13
    37a0:	e000      	b.n	37a4 <__ieee754_sqrt+0x180>
    37a2:	000b      	movs	r3, r1
    37a4:	0052      	lsls	r2, r2, #1
    37a6:	1c59      	adds	r1, r3, #1
    37a8:	4202      	tst	r2, r0
    37aa:	d0fa      	beq.n	37a2 <__ieee754_sqrt+0x17e>
    37ac:	2020      	movs	r0, #32
    37ae:	1a40      	subs	r0, r0, r1
    37b0:	1aed      	subs	r5, r5, r3
    37b2:	0023      	movs	r3, r4
    37b4:	40c3      	lsrs	r3, r0
    37b6:	408c      	lsls	r4, r1
    37b8:	431a      	orrs	r2, r3
    37ba:	e74a      	b.n	3652 <__ieee754_sqrt+0x2e>
    37bc:	0002      	movs	r2, r0
    37be:	002b      	movs	r3, r5
    37c0:	0029      	movs	r1, r5
    37c2:	f001 fd35 	bl	5230 <__aeabi_dmul>
    37c6:	0032      	movs	r2, r6
    37c8:	002b      	movs	r3, r5
    37ca:	f000 fde1 	bl	4390 <__aeabi_dadd>
    37ce:	0006      	movs	r6, r0
    37d0:	000f      	movs	r7, r1
    37d2:	e7a5      	b.n	3720 <__ieee754_sqrt+0xfc>
    37d4:	4665      	mov	r5, ip
    37d6:	2d00      	cmp	r5, #0
    37d8:	dab9      	bge.n	374e <__ieee754_sqrt+0x12a>
    37da:	e7b2      	b.n	3742 <__ieee754_sqrt+0x11e>
    37dc:	3601      	adds	r6, #1
    37de:	2300      	movs	r3, #0
    37e0:	e790      	b.n	3704 <__ieee754_sqrt+0xe0>
    37e2:	2301      	movs	r3, #1
    37e4:	2020      	movs	r0, #32
    37e6:	425b      	negs	r3, r3
    37e8:	2100      	movs	r1, #0
    37ea:	e7e1      	b.n	37b0 <__ieee754_sqrt+0x18c>
    37ec:	003b      	movs	r3, r7
    37ee:	0002      	movs	r2, r0
    37f0:	0039      	movs	r1, r7
    37f2:	f001 ff97 	bl	5724 <__aeabi_dsub>
    37f6:	0002      	movs	r2, r0
    37f8:	000b      	movs	r3, r1
    37fa:	f001 f8f5 	bl	49e8 <__aeabi_ddiv>
    37fe:	0006      	movs	r6, r0
    3800:	000f      	movs	r7, r1
    3802:	e78d      	b.n	3720 <__ieee754_sqrt+0xfc>
    3804:	7ff00000 	.word	0x7ff00000
    3808:	fffffc01 	.word	0xfffffc01
    380c:	3fe00000 	.word	0x3fe00000

00003810 <fabs>:
    3810:	0049      	lsls	r1, r1, #1
    3812:	084b      	lsrs	r3, r1, #1
    3814:	0019      	movs	r1, r3
    3816:	4770      	bx	lr

00003818 <finite>:
    3818:	4b03      	ldr	r3, [pc, #12]	; (3828 <finite+0x10>)
    381a:	0048      	lsls	r0, r1, #1
    381c:	469c      	mov	ip, r3
    381e:	0840      	lsrs	r0, r0, #1
    3820:	4460      	add	r0, ip
    3822:	0fc0      	lsrs	r0, r0, #31
    3824:	4770      	bx	lr
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	80100000 	.word	0x80100000

0000382c <matherr>:
    382c:	2000      	movs	r0, #0
    382e:	4770      	bx	lr

00003830 <nan>:
    3830:	2000      	movs	r0, #0
    3832:	4901      	ldr	r1, [pc, #4]	; (3838 <nan+0x8>)
    3834:	4770      	bx	lr
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	7ff80000 	.word	0x7ff80000

0000383c <rint>:
    383c:	b5f0      	push	{r4, r5, r6, r7, lr}
    383e:	4647      	mov	r7, r8
    3840:	b480      	push	{r7}
    3842:	0fcb      	lsrs	r3, r1, #31
    3844:	4698      	mov	r8, r3
    3846:	4c4a      	ldr	r4, [pc, #296]	; (3970 <rint+0x134>)
    3848:	004b      	lsls	r3, r1, #1
    384a:	0d5b      	lsrs	r3, r3, #21
    384c:	191e      	adds	r6, r3, r4
    384e:	b082      	sub	sp, #8
    3850:	0007      	movs	r7, r0
    3852:	000a      	movs	r2, r1
    3854:	2e13      	cmp	r6, #19
    3856:	dc35      	bgt.n	38c4 <rint+0x88>
    3858:	2e00      	cmp	r6, #0
    385a:	db57      	blt.n	390c <rint+0xd0>
    385c:	4b45      	ldr	r3, [pc, #276]	; (3974 <rint+0x138>)
    385e:	0004      	movs	r4, r0
    3860:	4133      	asrs	r3, r6
    3862:	001f      	movs	r7, r3
    3864:	400f      	ands	r7, r1
    3866:	4307      	orrs	r7, r0
    3868:	000d      	movs	r5, r1
    386a:	2f00      	cmp	r7, #0
    386c:	d024      	beq.n	38b8 <rint+0x7c>
    386e:	085b      	lsrs	r3, r3, #1
    3870:	001c      	movs	r4, r3
    3872:	400c      	ands	r4, r1
    3874:	4320      	orrs	r0, r4
    3876:	2700      	movs	r7, #0
    3878:	2800      	cmp	r0, #0
    387a:	d007      	beq.n	388c <rint+0x50>
    387c:	2e13      	cmp	r6, #19
    387e:	d100      	bne.n	3882 <rint+0x46>
    3880:	e072      	b.n	3968 <rint+0x12c>
    3882:	2280      	movs	r2, #128	; 0x80
    3884:	02d2      	lsls	r2, r2, #11
    3886:	4132      	asrs	r2, r6
    3888:	4399      	bics	r1, r3
    388a:	430a      	orrs	r2, r1
    388c:	4643      	mov	r3, r8
    388e:	00de      	lsls	r6, r3, #3
    3890:	4b39      	ldr	r3, [pc, #228]	; (3978 <rint+0x13c>)
    3892:	0011      	movs	r1, r2
    3894:	199e      	adds	r6, r3, r6
    3896:	6834      	ldr	r4, [r6, #0]
    3898:	6875      	ldr	r5, [r6, #4]
    389a:	0038      	movs	r0, r7
    389c:	0022      	movs	r2, r4
    389e:	002b      	movs	r3, r5
    38a0:	f000 fd76 	bl	4390 <__aeabi_dadd>
    38a4:	9000      	str	r0, [sp, #0]
    38a6:	9101      	str	r1, [sp, #4]
    38a8:	9800      	ldr	r0, [sp, #0]
    38aa:	9901      	ldr	r1, [sp, #4]
    38ac:	0022      	movs	r2, r4
    38ae:	002b      	movs	r3, r5
    38b0:	f001 ff38 	bl	5724 <__aeabi_dsub>
    38b4:	0004      	movs	r4, r0
    38b6:	000d      	movs	r5, r1
    38b8:	0020      	movs	r0, r4
    38ba:	0029      	movs	r1, r5
    38bc:	b002      	add	sp, #8
    38be:	bc04      	pop	{r2}
    38c0:	4690      	mov	r8, r2
    38c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c4:	2e33      	cmp	r6, #51	; 0x33
    38c6:	dd0c      	ble.n	38e2 <rint+0xa6>
    38c8:	2380      	movs	r3, #128	; 0x80
    38ca:	0004      	movs	r4, r0
    38cc:	000d      	movs	r5, r1
    38ce:	00db      	lsls	r3, r3, #3
    38d0:	429e      	cmp	r6, r3
    38d2:	d1f1      	bne.n	38b8 <rint+0x7c>
    38d4:	0002      	movs	r2, r0
    38d6:	000b      	movs	r3, r1
    38d8:	f000 fd5a 	bl	4390 <__aeabi_dadd>
    38dc:	0004      	movs	r4, r0
    38de:	000d      	movs	r5, r1
    38e0:	e7ea      	b.n	38b8 <rint+0x7c>
    38e2:	4c26      	ldr	r4, [pc, #152]	; (397c <rint+0x140>)
    38e4:	000d      	movs	r5, r1
    38e6:	46a4      	mov	ip, r4
    38e8:	2401      	movs	r4, #1
    38ea:	4463      	add	r3, ip
    38ec:	4264      	negs	r4, r4
    38ee:	40dc      	lsrs	r4, r3
    38f0:	46a4      	mov	ip, r4
    38f2:	4661      	mov	r1, ip
    38f4:	0004      	movs	r4, r0
    38f6:	4201      	tst	r1, r0
    38f8:	d0de      	beq.n	38b8 <rint+0x7c>
    38fa:	0849      	lsrs	r1, r1, #1
    38fc:	4201      	tst	r1, r0
    38fe:	d0c5      	beq.n	388c <rint+0x50>
    3900:	2780      	movs	r7, #128	; 0x80
    3902:	05ff      	lsls	r7, r7, #23
    3904:	411f      	asrs	r7, r3
    3906:	4388      	bics	r0, r1
    3908:	4307      	orrs	r7, r0
    390a:	e7bf      	b.n	388c <rint+0x50>
    390c:	004b      	lsls	r3, r1, #1
    390e:	085b      	lsrs	r3, r3, #1
    3910:	4303      	orrs	r3, r0
    3912:	0004      	movs	r4, r0
    3914:	000d      	movs	r5, r1
    3916:	2b00      	cmp	r3, #0
    3918:	d0ce      	beq.n	38b8 <rint+0x7c>
    391a:	030b      	lsls	r3, r1, #12
    391c:	0b1b      	lsrs	r3, r3, #12
    391e:	4303      	orrs	r3, r0
    3920:	425a      	negs	r2, r3
    3922:	4313      	orrs	r3, r2
    3924:	2280      	movs	r2, #128	; 0x80
    3926:	0b1b      	lsrs	r3, r3, #12
    3928:	0312      	lsls	r2, r2, #12
    392a:	4013      	ands	r3, r2
    392c:	0c4a      	lsrs	r2, r1, #17
    392e:	0452      	lsls	r2, r2, #17
    3930:	4313      	orrs	r3, r2
    3932:	0019      	movs	r1, r3
    3934:	4643      	mov	r3, r8
    3936:	4a10      	ldr	r2, [pc, #64]	; (3978 <rint+0x13c>)
    3938:	00db      	lsls	r3, r3, #3
    393a:	18d3      	adds	r3, r2, r3
    393c:	681c      	ldr	r4, [r3, #0]
    393e:	685d      	ldr	r5, [r3, #4]
    3940:	0022      	movs	r2, r4
    3942:	002b      	movs	r3, r5
    3944:	f000 fd24 	bl	4390 <__aeabi_dadd>
    3948:	9000      	str	r0, [sp, #0]
    394a:	9101      	str	r1, [sp, #4]
    394c:	9800      	ldr	r0, [sp, #0]
    394e:	9901      	ldr	r1, [sp, #4]
    3950:	0022      	movs	r2, r4
    3952:	002b      	movs	r3, r5
    3954:	f001 fee6 	bl	5724 <__aeabi_dsub>
    3958:	4642      	mov	r2, r8
    395a:	004b      	lsls	r3, r1, #1
    395c:	085b      	lsrs	r3, r3, #1
    395e:	07d6      	lsls	r6, r2, #31
    3960:	4333      	orrs	r3, r6
    3962:	0004      	movs	r4, r0
    3964:	001d      	movs	r5, r3
    3966:	e7a7      	b.n	38b8 <rint+0x7c>
    3968:	2780      	movs	r7, #128	; 0x80
    396a:	063f      	lsls	r7, r7, #24
    396c:	e789      	b.n	3882 <rint+0x46>
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	fffffc01 	.word	0xfffffc01
    3974:	000fffff 	.word	0x000fffff
    3978:	00006608 	.word	0x00006608
    397c:	fffffbed 	.word	0xfffffbed

00003980 <scalbn>:
    3980:	004b      	lsls	r3, r1, #1
    3982:	b570      	push	{r4, r5, r6, lr}
    3984:	0d5b      	lsrs	r3, r3, #21
    3986:	0014      	movs	r4, r2
    3988:	000a      	movs	r2, r1
    398a:	2b00      	cmp	r3, #0
    398c:	d11a      	bne.n	39c4 <scalbn+0x44>
    398e:	004b      	lsls	r3, r1, #1
    3990:	085b      	lsrs	r3, r3, #1
    3992:	4303      	orrs	r3, r0
    3994:	d015      	beq.n	39c2 <scalbn+0x42>
    3996:	2200      	movs	r2, #0
    3998:	4b22      	ldr	r3, [pc, #136]	; (3a24 <scalbn+0xa4>)
    399a:	f001 fc49 	bl	5230 <__aeabi_dmul>
    399e:	4b22      	ldr	r3, [pc, #136]	; (3a28 <scalbn+0xa8>)
    39a0:	000a      	movs	r2, r1
    39a2:	429c      	cmp	r4, r3
    39a4:	db22      	blt.n	39ec <scalbn+0x6c>
    39a6:	004b      	lsls	r3, r1, #1
    39a8:	0d5b      	lsrs	r3, r3, #21
    39aa:	3b36      	subs	r3, #54	; 0x36
    39ac:	4d1f      	ldr	r5, [pc, #124]	; (3a2c <scalbn+0xac>)
    39ae:	18e3      	adds	r3, r4, r3
    39b0:	42ab      	cmp	r3, r5
    39b2:	dc20      	bgt.n	39f6 <scalbn+0x76>
    39b4:	2b00      	cmp	r3, #0
    39b6:	dd0d      	ble.n	39d4 <scalbn+0x54>
    39b8:	4c1d      	ldr	r4, [pc, #116]	; (3a30 <scalbn+0xb0>)
    39ba:	051b      	lsls	r3, r3, #20
    39bc:	4022      	ands	r2, r4
    39be:	431a      	orrs	r2, r3
    39c0:	0011      	movs	r1, r2
    39c2:	bd70      	pop	{r4, r5, r6, pc}
    39c4:	4d1b      	ldr	r5, [pc, #108]	; (3a34 <scalbn+0xb4>)
    39c6:	42ab      	cmp	r3, r5
    39c8:	d1f0      	bne.n	39ac <scalbn+0x2c>
    39ca:	0002      	movs	r2, r0
    39cc:	000b      	movs	r3, r1
    39ce:	f000 fcdf 	bl	4390 <__aeabi_dadd>
    39d2:	e7f6      	b.n	39c2 <scalbn+0x42>
    39d4:	001d      	movs	r5, r3
    39d6:	3535      	adds	r5, #53	; 0x35
    39d8:	da18      	bge.n	3a0c <scalbn+0x8c>
    39da:	4b17      	ldr	r3, [pc, #92]	; (3a38 <scalbn+0xb8>)
    39dc:	0002      	movs	r2, r0
    39de:	429c      	cmp	r4, r3
    39e0:	dc0a      	bgt.n	39f8 <scalbn+0x78>
    39e2:	000b      	movs	r3, r1
    39e4:	4815      	ldr	r0, [pc, #84]	; (3a3c <scalbn+0xbc>)
    39e6:	4916      	ldr	r1, [pc, #88]	; (3a40 <scalbn+0xc0>)
    39e8:	f000 f832 	bl	3a50 <copysign>
    39ec:	4a13      	ldr	r2, [pc, #76]	; (3a3c <scalbn+0xbc>)
    39ee:	4b14      	ldr	r3, [pc, #80]	; (3a40 <scalbn+0xc0>)
    39f0:	f001 fc1e 	bl	5230 <__aeabi_dmul>
    39f4:	e7e5      	b.n	39c2 <scalbn+0x42>
    39f6:	0002      	movs	r2, r0
    39f8:	000b      	movs	r3, r1
    39fa:	4812      	ldr	r0, [pc, #72]	; (3a44 <scalbn+0xc4>)
    39fc:	4912      	ldr	r1, [pc, #72]	; (3a48 <scalbn+0xc8>)
    39fe:	f000 f827 	bl	3a50 <copysign>
    3a02:	4a10      	ldr	r2, [pc, #64]	; (3a44 <scalbn+0xc4>)
    3a04:	4b10      	ldr	r3, [pc, #64]	; (3a48 <scalbn+0xc8>)
    3a06:	f001 fc13 	bl	5230 <__aeabi_dmul>
    3a0a:	e7da      	b.n	39c2 <scalbn+0x42>
    3a0c:	4c08      	ldr	r4, [pc, #32]	; (3a30 <scalbn+0xb0>)
    3a0e:	3336      	adds	r3, #54	; 0x36
    3a10:	4022      	ands	r2, r4
    3a12:	051b      	lsls	r3, r3, #20
    3a14:	4313      	orrs	r3, r2
    3a16:	0019      	movs	r1, r3
    3a18:	2200      	movs	r2, #0
    3a1a:	4b0c      	ldr	r3, [pc, #48]	; (3a4c <scalbn+0xcc>)
    3a1c:	f001 fc08 	bl	5230 <__aeabi_dmul>
    3a20:	e7cf      	b.n	39c2 <scalbn+0x42>
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	43500000 	.word	0x43500000
    3a28:	ffff3cb0 	.word	0xffff3cb0
    3a2c:	000007fe 	.word	0x000007fe
    3a30:	800fffff 	.word	0x800fffff
    3a34:	000007ff 	.word	0x000007ff
    3a38:	0000c350 	.word	0x0000c350
    3a3c:	c2f8f359 	.word	0xc2f8f359
    3a40:	01a56e1f 	.word	0x01a56e1f
    3a44:	8800759c 	.word	0x8800759c
    3a48:	7e37e43c 	.word	0x7e37e43c
    3a4c:	3c900000 	.word	0x3c900000

00003a50 <copysign>:
    3a50:	b530      	push	{r4, r5, lr}
    3a52:	004a      	lsls	r2, r1, #1
    3a54:	0fdb      	lsrs	r3, r3, #31
    3a56:	07db      	lsls	r3, r3, #31
    3a58:	0852      	lsrs	r2, r2, #1
    3a5a:	431a      	orrs	r2, r3
    3a5c:	0011      	movs	r1, r2
    3a5e:	bd30      	pop	{r4, r5, pc}

00003a60 <__gnu_thumb1_case_uqi>:
    3a60:	b402      	push	{r1}
    3a62:	4671      	mov	r1, lr
    3a64:	0849      	lsrs	r1, r1, #1
    3a66:	0049      	lsls	r1, r1, #1
    3a68:	5c09      	ldrb	r1, [r1, r0]
    3a6a:	0049      	lsls	r1, r1, #1
    3a6c:	448e      	add	lr, r1
    3a6e:	bc02      	pop	{r1}
    3a70:	4770      	bx	lr
    3a72:	46c0      	nop			; (mov r8, r8)

00003a74 <__aeabi_cdrcmple>:
    3a74:	4684      	mov	ip, r0
    3a76:	1c10      	adds	r0, r2, #0
    3a78:	4662      	mov	r2, ip
    3a7a:	468c      	mov	ip, r1
    3a7c:	1c19      	adds	r1, r3, #0
    3a7e:	4663      	mov	r3, ip
    3a80:	e000      	b.n	3a84 <__aeabi_cdcmpeq>
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <__aeabi_cdcmpeq>:
    3a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a86:	f001 fb69 	bl	515c <__ledf2>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	d401      	bmi.n	3a92 <__aeabi_cdcmpeq+0xe>
    3a8e:	2100      	movs	r1, #0
    3a90:	42c8      	cmn	r0, r1
    3a92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a94 <__aeabi_dcmpeq>:
    3a94:	b510      	push	{r4, lr}
    3a96:	f001 fabd 	bl	5014 <__eqdf2>
    3a9a:	4240      	negs	r0, r0
    3a9c:	3001      	adds	r0, #1
    3a9e:	bd10      	pop	{r4, pc}

00003aa0 <__aeabi_dcmplt>:
    3aa0:	b510      	push	{r4, lr}
    3aa2:	f001 fb5b 	bl	515c <__ledf2>
    3aa6:	2800      	cmp	r0, #0
    3aa8:	db01      	blt.n	3aae <__aeabi_dcmplt+0xe>
    3aaa:	2000      	movs	r0, #0
    3aac:	bd10      	pop	{r4, pc}
    3aae:	2001      	movs	r0, #1
    3ab0:	bd10      	pop	{r4, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)

00003ab4 <__aeabi_dcmple>:
    3ab4:	b510      	push	{r4, lr}
    3ab6:	f001 fb51 	bl	515c <__ledf2>
    3aba:	2800      	cmp	r0, #0
    3abc:	dd01      	ble.n	3ac2 <__aeabi_dcmple+0xe>
    3abe:	2000      	movs	r0, #0
    3ac0:	bd10      	pop	{r4, pc}
    3ac2:	2001      	movs	r0, #1
    3ac4:	bd10      	pop	{r4, pc}
    3ac6:	46c0      	nop			; (mov r8, r8)

00003ac8 <__aeabi_dcmpgt>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	f001 fae3 	bl	5094 <__gedf2>
    3ace:	2800      	cmp	r0, #0
    3ad0:	dc01      	bgt.n	3ad6 <__aeabi_dcmpgt+0xe>
    3ad2:	2000      	movs	r0, #0
    3ad4:	bd10      	pop	{r4, pc}
    3ad6:	2001      	movs	r0, #1
    3ad8:	bd10      	pop	{r4, pc}
    3ada:	46c0      	nop			; (mov r8, r8)

00003adc <__aeabi_dcmpge>:
    3adc:	b510      	push	{r4, lr}
    3ade:	f001 fad9 	bl	5094 <__gedf2>
    3ae2:	2800      	cmp	r0, #0
    3ae4:	da01      	bge.n	3aea <__aeabi_dcmpge+0xe>
    3ae6:	2000      	movs	r0, #0
    3ae8:	bd10      	pop	{r4, pc}
    3aea:	2001      	movs	r0, #1
    3aec:	bd10      	pop	{r4, pc}
    3aee:	46c0      	nop			; (mov r8, r8)

00003af0 <__aeabi_cfrcmple>:
    3af0:	4684      	mov	ip, r0
    3af2:	1c08      	adds	r0, r1, #0
    3af4:	4661      	mov	r1, ip
    3af6:	e7ff      	b.n	3af8 <__aeabi_cfcmpeq>

00003af8 <__aeabi_cfcmpeq>:
    3af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3afa:	f000 f901 	bl	3d00 <__lesf2>
    3afe:	2800      	cmp	r0, #0
    3b00:	d401      	bmi.n	3b06 <__aeabi_cfcmpeq+0xe>
    3b02:	2100      	movs	r1, #0
    3b04:	42c8      	cmn	r0, r1
    3b06:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003b08 <__aeabi_fcmpeq>:
    3b08:	b510      	push	{r4, lr}
    3b0a:	f000 f88d 	bl	3c28 <__eqsf2>
    3b0e:	4240      	negs	r0, r0
    3b10:	3001      	adds	r0, #1
    3b12:	bd10      	pop	{r4, pc}

00003b14 <__aeabi_fcmplt>:
    3b14:	b510      	push	{r4, lr}
    3b16:	f000 f8f3 	bl	3d00 <__lesf2>
    3b1a:	2800      	cmp	r0, #0
    3b1c:	db01      	blt.n	3b22 <__aeabi_fcmplt+0xe>
    3b1e:	2000      	movs	r0, #0
    3b20:	bd10      	pop	{r4, pc}
    3b22:	2001      	movs	r0, #1
    3b24:	bd10      	pop	{r4, pc}
    3b26:	46c0      	nop			; (mov r8, r8)

00003b28 <__aeabi_fcmple>:
    3b28:	b510      	push	{r4, lr}
    3b2a:	f000 f8e9 	bl	3d00 <__lesf2>
    3b2e:	2800      	cmp	r0, #0
    3b30:	dd01      	ble.n	3b36 <__aeabi_fcmple+0xe>
    3b32:	2000      	movs	r0, #0
    3b34:	bd10      	pop	{r4, pc}
    3b36:	2001      	movs	r0, #1
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)

00003b3c <__aeabi_fcmpgt>:
    3b3c:	b510      	push	{r4, lr}
    3b3e:	f000 f89b 	bl	3c78 <__gesf2>
    3b42:	2800      	cmp	r0, #0
    3b44:	dc01      	bgt.n	3b4a <__aeabi_fcmpgt+0xe>
    3b46:	2000      	movs	r0, #0
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	2001      	movs	r0, #1
    3b4c:	bd10      	pop	{r4, pc}
    3b4e:	46c0      	nop			; (mov r8, r8)

00003b50 <__aeabi_fcmpge>:
    3b50:	b510      	push	{r4, lr}
    3b52:	f000 f891 	bl	3c78 <__gesf2>
    3b56:	2800      	cmp	r0, #0
    3b58:	da01      	bge.n	3b5e <__aeabi_fcmpge+0xe>
    3b5a:	2000      	movs	r0, #0
    3b5c:	bd10      	pop	{r4, pc}
    3b5e:	2001      	movs	r0, #1
    3b60:	bd10      	pop	{r4, pc}
    3b62:	46c0      	nop			; (mov r8, r8)

00003b64 <__aeabi_lmul>:
    3b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b66:	464f      	mov	r7, r9
    3b68:	4646      	mov	r6, r8
    3b6a:	b4c0      	push	{r6, r7}
    3b6c:	0416      	lsls	r6, r2, #16
    3b6e:	0c36      	lsrs	r6, r6, #16
    3b70:	4699      	mov	r9, r3
    3b72:	0033      	movs	r3, r6
    3b74:	0405      	lsls	r5, r0, #16
    3b76:	0c2c      	lsrs	r4, r5, #16
    3b78:	0c07      	lsrs	r7, r0, #16
    3b7a:	0c15      	lsrs	r5, r2, #16
    3b7c:	4363      	muls	r3, r4
    3b7e:	437e      	muls	r6, r7
    3b80:	436f      	muls	r7, r5
    3b82:	4365      	muls	r5, r4
    3b84:	0c1c      	lsrs	r4, r3, #16
    3b86:	19ad      	adds	r5, r5, r6
    3b88:	1964      	adds	r4, r4, r5
    3b8a:	469c      	mov	ip, r3
    3b8c:	42a6      	cmp	r6, r4
    3b8e:	d903      	bls.n	3b98 <__aeabi_lmul+0x34>
    3b90:	2380      	movs	r3, #128	; 0x80
    3b92:	025b      	lsls	r3, r3, #9
    3b94:	4698      	mov	r8, r3
    3b96:	4447      	add	r7, r8
    3b98:	4663      	mov	r3, ip
    3b9a:	0c25      	lsrs	r5, r4, #16
    3b9c:	19ef      	adds	r7, r5, r7
    3b9e:	041d      	lsls	r5, r3, #16
    3ba0:	464b      	mov	r3, r9
    3ba2:	434a      	muls	r2, r1
    3ba4:	4343      	muls	r3, r0
    3ba6:	0c2d      	lsrs	r5, r5, #16
    3ba8:	0424      	lsls	r4, r4, #16
    3baa:	1964      	adds	r4, r4, r5
    3bac:	1899      	adds	r1, r3, r2
    3bae:	19c9      	adds	r1, r1, r7
    3bb0:	0020      	movs	r0, r4
    3bb2:	bc0c      	pop	{r2, r3}
    3bb4:	4690      	mov	r8, r2
    3bb6:	4699      	mov	r9, r3
    3bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bba:	46c0      	nop			; (mov r8, r8)

00003bbc <__aeabi_f2uiz>:
    3bbc:	219e      	movs	r1, #158	; 0x9e
    3bbe:	b510      	push	{r4, lr}
    3bc0:	05c9      	lsls	r1, r1, #23
    3bc2:	1c04      	adds	r4, r0, #0
    3bc4:	f7ff ffc4 	bl	3b50 <__aeabi_fcmpge>
    3bc8:	2800      	cmp	r0, #0
    3bca:	d103      	bne.n	3bd4 <__aeabi_f2uiz+0x18>
    3bcc:	1c20      	adds	r0, r4, #0
    3bce:	f000 fb75 	bl	42bc <__aeabi_f2iz>
    3bd2:	bd10      	pop	{r4, pc}
    3bd4:	219e      	movs	r1, #158	; 0x9e
    3bd6:	1c20      	adds	r0, r4, #0
    3bd8:	05c9      	lsls	r1, r1, #23
    3bda:	f000 f9e9 	bl	3fb0 <__aeabi_fsub>
    3bde:	f000 fb6d 	bl	42bc <__aeabi_f2iz>
    3be2:	2380      	movs	r3, #128	; 0x80
    3be4:	061b      	lsls	r3, r3, #24
    3be6:	469c      	mov	ip, r3
    3be8:	4460      	add	r0, ip
    3bea:	e7f2      	b.n	3bd2 <__aeabi_f2uiz+0x16>

00003bec <__aeabi_d2uiz>:
    3bec:	b570      	push	{r4, r5, r6, lr}
    3bee:	2200      	movs	r2, #0
    3bf0:	4b0c      	ldr	r3, [pc, #48]	; (3c24 <__aeabi_d2uiz+0x38>)
    3bf2:	0004      	movs	r4, r0
    3bf4:	000d      	movs	r5, r1
    3bf6:	f7ff ff71 	bl	3adc <__aeabi_dcmpge>
    3bfa:	2800      	cmp	r0, #0
    3bfc:	d104      	bne.n	3c08 <__aeabi_d2uiz+0x1c>
    3bfe:	0020      	movs	r0, r4
    3c00:	0029      	movs	r1, r5
    3c02:	f002 f903 	bl	5e0c <__aeabi_d2iz>
    3c06:	bd70      	pop	{r4, r5, r6, pc}
    3c08:	4b06      	ldr	r3, [pc, #24]	; (3c24 <__aeabi_d2uiz+0x38>)
    3c0a:	2200      	movs	r2, #0
    3c0c:	0020      	movs	r0, r4
    3c0e:	0029      	movs	r1, r5
    3c10:	f001 fd88 	bl	5724 <__aeabi_dsub>
    3c14:	f002 f8fa 	bl	5e0c <__aeabi_d2iz>
    3c18:	2380      	movs	r3, #128	; 0x80
    3c1a:	061b      	lsls	r3, r3, #24
    3c1c:	469c      	mov	ip, r3
    3c1e:	4460      	add	r0, ip
    3c20:	e7f1      	b.n	3c06 <__aeabi_d2uiz+0x1a>
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	41e00000 	.word	0x41e00000

00003c28 <__eqsf2>:
    3c28:	0243      	lsls	r3, r0, #9
    3c2a:	b570      	push	{r4, r5, r6, lr}
    3c2c:	0042      	lsls	r2, r0, #1
    3c2e:	004c      	lsls	r4, r1, #1
    3c30:	0a5d      	lsrs	r5, r3, #9
    3c32:	0fc3      	lsrs	r3, r0, #31
    3c34:	0248      	lsls	r0, r1, #9
    3c36:	0e12      	lsrs	r2, r2, #24
    3c38:	0a46      	lsrs	r6, r0, #9
    3c3a:	0e24      	lsrs	r4, r4, #24
    3c3c:	0fc9      	lsrs	r1, r1, #31
    3c3e:	2aff      	cmp	r2, #255	; 0xff
    3c40:	d00f      	beq.n	3c62 <__eqsf2+0x3a>
    3c42:	2cff      	cmp	r4, #255	; 0xff
    3c44:	d011      	beq.n	3c6a <__eqsf2+0x42>
    3c46:	2001      	movs	r0, #1
    3c48:	42a2      	cmp	r2, r4
    3c4a:	d000      	beq.n	3c4e <__eqsf2+0x26>
    3c4c:	bd70      	pop	{r4, r5, r6, pc}
    3c4e:	42b5      	cmp	r5, r6
    3c50:	d1fc      	bne.n	3c4c <__eqsf2+0x24>
    3c52:	428b      	cmp	r3, r1
    3c54:	d00d      	beq.n	3c72 <__eqsf2+0x4a>
    3c56:	2a00      	cmp	r2, #0
    3c58:	d1f8      	bne.n	3c4c <__eqsf2+0x24>
    3c5a:	0028      	movs	r0, r5
    3c5c:	1e43      	subs	r3, r0, #1
    3c5e:	4198      	sbcs	r0, r3
    3c60:	e7f4      	b.n	3c4c <__eqsf2+0x24>
    3c62:	2001      	movs	r0, #1
    3c64:	2d00      	cmp	r5, #0
    3c66:	d1f1      	bne.n	3c4c <__eqsf2+0x24>
    3c68:	e7eb      	b.n	3c42 <__eqsf2+0x1a>
    3c6a:	2001      	movs	r0, #1
    3c6c:	2e00      	cmp	r6, #0
    3c6e:	d1ed      	bne.n	3c4c <__eqsf2+0x24>
    3c70:	e7e9      	b.n	3c46 <__eqsf2+0x1e>
    3c72:	2000      	movs	r0, #0
    3c74:	e7ea      	b.n	3c4c <__eqsf2+0x24>
    3c76:	46c0      	nop			; (mov r8, r8)

00003c78 <__gesf2>:
    3c78:	0243      	lsls	r3, r0, #9
    3c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7c:	0042      	lsls	r2, r0, #1
    3c7e:	0a5d      	lsrs	r5, r3, #9
    3c80:	0fc3      	lsrs	r3, r0, #31
    3c82:	0248      	lsls	r0, r1, #9
    3c84:	0a44      	lsrs	r4, r0, #9
    3c86:	0048      	lsls	r0, r1, #1
    3c88:	0e12      	lsrs	r2, r2, #24
    3c8a:	0e00      	lsrs	r0, r0, #24
    3c8c:	0fc9      	lsrs	r1, r1, #31
    3c8e:	2aff      	cmp	r2, #255	; 0xff
    3c90:	d01f      	beq.n	3cd2 <__gesf2+0x5a>
    3c92:	28ff      	cmp	r0, #255	; 0xff
    3c94:	d022      	beq.n	3cdc <__gesf2+0x64>
    3c96:	2a00      	cmp	r2, #0
    3c98:	d109      	bne.n	3cae <__gesf2+0x36>
    3c9a:	426e      	negs	r6, r5
    3c9c:	416e      	adcs	r6, r5
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d10f      	bne.n	3cc2 <__gesf2+0x4a>
    3ca2:	2c00      	cmp	r4, #0
    3ca4:	d10d      	bne.n	3cc2 <__gesf2+0x4a>
    3ca6:	2000      	movs	r0, #0
    3ca8:	2d00      	cmp	r5, #0
    3caa:	d009      	beq.n	3cc0 <__gesf2+0x48>
    3cac:	e005      	b.n	3cba <__gesf2+0x42>
    3cae:	2800      	cmp	r0, #0
    3cb0:	d101      	bne.n	3cb6 <__gesf2+0x3e>
    3cb2:	2c00      	cmp	r4, #0
    3cb4:	d001      	beq.n	3cba <__gesf2+0x42>
    3cb6:	428b      	cmp	r3, r1
    3cb8:	d013      	beq.n	3ce2 <__gesf2+0x6a>
    3cba:	4258      	negs	r0, r3
    3cbc:	2301      	movs	r3, #1
    3cbe:	4318      	orrs	r0, r3
    3cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cc2:	2e00      	cmp	r6, #0
    3cc4:	d0f7      	beq.n	3cb6 <__gesf2+0x3e>
    3cc6:	4248      	negs	r0, r1
    3cc8:	4141      	adcs	r1, r0
    3cca:	2001      	movs	r0, #1
    3ccc:	4249      	negs	r1, r1
    3cce:	4308      	orrs	r0, r1
    3cd0:	e7f6      	b.n	3cc0 <__gesf2+0x48>
    3cd2:	2d00      	cmp	r5, #0
    3cd4:	d0dd      	beq.n	3c92 <__gesf2+0x1a>
    3cd6:	2002      	movs	r0, #2
    3cd8:	4240      	negs	r0, r0
    3cda:	e7f1      	b.n	3cc0 <__gesf2+0x48>
    3cdc:	2c00      	cmp	r4, #0
    3cde:	d0da      	beq.n	3c96 <__gesf2+0x1e>
    3ce0:	e7f9      	b.n	3cd6 <__gesf2+0x5e>
    3ce2:	4282      	cmp	r2, r0
    3ce4:	dce9      	bgt.n	3cba <__gesf2+0x42>
    3ce6:	db04      	blt.n	3cf2 <__gesf2+0x7a>
    3ce8:	42a5      	cmp	r5, r4
    3cea:	d8e6      	bhi.n	3cba <__gesf2+0x42>
    3cec:	2000      	movs	r0, #0
    3cee:	42a5      	cmp	r5, r4
    3cf0:	d2e6      	bcs.n	3cc0 <__gesf2+0x48>
    3cf2:	4258      	negs	r0, r3
    3cf4:	4143      	adcs	r3, r0
    3cf6:	2001      	movs	r0, #1
    3cf8:	425b      	negs	r3, r3
    3cfa:	4318      	orrs	r0, r3
    3cfc:	e7e0      	b.n	3cc0 <__gesf2+0x48>
    3cfe:	46c0      	nop			; (mov r8, r8)

00003d00 <__lesf2>:
    3d00:	0243      	lsls	r3, r0, #9
    3d02:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d04:	0042      	lsls	r2, r0, #1
    3d06:	004c      	lsls	r4, r1, #1
    3d08:	0a5e      	lsrs	r6, r3, #9
    3d0a:	0fc3      	lsrs	r3, r0, #31
    3d0c:	0248      	lsls	r0, r1, #9
    3d0e:	0e12      	lsrs	r2, r2, #24
    3d10:	0a45      	lsrs	r5, r0, #9
    3d12:	0e24      	lsrs	r4, r4, #24
    3d14:	0fc9      	lsrs	r1, r1, #31
    3d16:	2aff      	cmp	r2, #255	; 0xff
    3d18:	d017      	beq.n	3d4a <__lesf2+0x4a>
    3d1a:	2cff      	cmp	r4, #255	; 0xff
    3d1c:	d019      	beq.n	3d52 <__lesf2+0x52>
    3d1e:	2a00      	cmp	r2, #0
    3d20:	d10b      	bne.n	3d3a <__lesf2+0x3a>
    3d22:	4270      	negs	r0, r6
    3d24:	4170      	adcs	r0, r6
    3d26:	2c00      	cmp	r4, #0
    3d28:	d017      	beq.n	3d5a <__lesf2+0x5a>
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d007      	beq.n	3d3e <__lesf2+0x3e>
    3d2e:	4248      	negs	r0, r1
    3d30:	4141      	adcs	r1, r0
    3d32:	2001      	movs	r0, #1
    3d34:	4249      	negs	r1, r1
    3d36:	4308      	orrs	r0, r1
    3d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d3a:	2c00      	cmp	r4, #0
    3d3c:	d013      	beq.n	3d66 <__lesf2+0x66>
    3d3e:	428b      	cmp	r3, r1
    3d40:	d014      	beq.n	3d6c <__lesf2+0x6c>
    3d42:	4258      	negs	r0, r3
    3d44:	2301      	movs	r3, #1
    3d46:	4318      	orrs	r0, r3
    3d48:	e7f6      	b.n	3d38 <__lesf2+0x38>
    3d4a:	2002      	movs	r0, #2
    3d4c:	2e00      	cmp	r6, #0
    3d4e:	d1f3      	bne.n	3d38 <__lesf2+0x38>
    3d50:	e7e3      	b.n	3d1a <__lesf2+0x1a>
    3d52:	2002      	movs	r0, #2
    3d54:	2d00      	cmp	r5, #0
    3d56:	d1ef      	bne.n	3d38 <__lesf2+0x38>
    3d58:	e7e1      	b.n	3d1e <__lesf2+0x1e>
    3d5a:	2d00      	cmp	r5, #0
    3d5c:	d1e5      	bne.n	3d2a <__lesf2+0x2a>
    3d5e:	2000      	movs	r0, #0
    3d60:	2e00      	cmp	r6, #0
    3d62:	d0e9      	beq.n	3d38 <__lesf2+0x38>
    3d64:	e7ed      	b.n	3d42 <__lesf2+0x42>
    3d66:	2d00      	cmp	r5, #0
    3d68:	d1e9      	bne.n	3d3e <__lesf2+0x3e>
    3d6a:	e7ea      	b.n	3d42 <__lesf2+0x42>
    3d6c:	42a2      	cmp	r2, r4
    3d6e:	dce8      	bgt.n	3d42 <__lesf2+0x42>
    3d70:	db04      	blt.n	3d7c <__lesf2+0x7c>
    3d72:	42ae      	cmp	r6, r5
    3d74:	d8e5      	bhi.n	3d42 <__lesf2+0x42>
    3d76:	2000      	movs	r0, #0
    3d78:	42ae      	cmp	r6, r5
    3d7a:	d2dd      	bcs.n	3d38 <__lesf2+0x38>
    3d7c:	4258      	negs	r0, r3
    3d7e:	4143      	adcs	r3, r0
    3d80:	2001      	movs	r0, #1
    3d82:	425b      	negs	r3, r3
    3d84:	4318      	orrs	r0, r3
    3d86:	e7d7      	b.n	3d38 <__lesf2+0x38>

00003d88 <__aeabi_fmul>:
    3d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8a:	4657      	mov	r7, sl
    3d8c:	464e      	mov	r6, r9
    3d8e:	4645      	mov	r5, r8
    3d90:	0043      	lsls	r3, r0, #1
    3d92:	b4e0      	push	{r5, r6, r7}
    3d94:	0246      	lsls	r6, r0, #9
    3d96:	4688      	mov	r8, r1
    3d98:	0a76      	lsrs	r6, r6, #9
    3d9a:	0e1f      	lsrs	r7, r3, #24
    3d9c:	0fc4      	lsrs	r4, r0, #31
    3d9e:	2f00      	cmp	r7, #0
    3da0:	d047      	beq.n	3e32 <__aeabi_fmul+0xaa>
    3da2:	2fff      	cmp	r7, #255	; 0xff
    3da4:	d025      	beq.n	3df2 <__aeabi_fmul+0x6a>
    3da6:	2300      	movs	r3, #0
    3da8:	2580      	movs	r5, #128	; 0x80
    3daa:	469a      	mov	sl, r3
    3dac:	4699      	mov	r9, r3
    3dae:	00f6      	lsls	r6, r6, #3
    3db0:	04ed      	lsls	r5, r5, #19
    3db2:	432e      	orrs	r6, r5
    3db4:	3f7f      	subs	r7, #127	; 0x7f
    3db6:	4643      	mov	r3, r8
    3db8:	4642      	mov	r2, r8
    3dba:	025d      	lsls	r5, r3, #9
    3dbc:	0fd2      	lsrs	r2, r2, #31
    3dbe:	005b      	lsls	r3, r3, #1
    3dc0:	0a6d      	lsrs	r5, r5, #9
    3dc2:	0e1b      	lsrs	r3, r3, #24
    3dc4:	4690      	mov	r8, r2
    3dc6:	d040      	beq.n	3e4a <__aeabi_fmul+0xc2>
    3dc8:	2bff      	cmp	r3, #255	; 0xff
    3dca:	d039      	beq.n	3e40 <__aeabi_fmul+0xb8>
    3dcc:	2280      	movs	r2, #128	; 0x80
    3dce:	2000      	movs	r0, #0
    3dd0:	00ed      	lsls	r5, r5, #3
    3dd2:	04d2      	lsls	r2, r2, #19
    3dd4:	4315      	orrs	r5, r2
    3dd6:	3b7f      	subs	r3, #127	; 0x7f
    3dd8:	18fb      	adds	r3, r7, r3
    3dda:	4642      	mov	r2, r8
    3ddc:	4657      	mov	r7, sl
    3dde:	1c59      	adds	r1, r3, #1
    3de0:	4062      	eors	r2, r4
    3de2:	468c      	mov	ip, r1
    3de4:	4307      	orrs	r7, r0
    3de6:	2f0f      	cmp	r7, #15
    3de8:	d85c      	bhi.n	3ea4 <__aeabi_fmul+0x11c>
    3dea:	496f      	ldr	r1, [pc, #444]	; (3fa8 <__aeabi_fmul+0x220>)
    3dec:	00bf      	lsls	r7, r7, #2
    3dee:	59c9      	ldr	r1, [r1, r7]
    3df0:	468f      	mov	pc, r1
    3df2:	2e00      	cmp	r6, #0
    3df4:	d145      	bne.n	3e82 <__aeabi_fmul+0xfa>
    3df6:	2308      	movs	r3, #8
    3df8:	469a      	mov	sl, r3
    3dfa:	3b06      	subs	r3, #6
    3dfc:	4699      	mov	r9, r3
    3dfe:	e7da      	b.n	3db6 <__aeabi_fmul+0x2e>
    3e00:	4642      	mov	r2, r8
    3e02:	2802      	cmp	r0, #2
    3e04:	d02d      	beq.n	3e62 <__aeabi_fmul+0xda>
    3e06:	2803      	cmp	r0, #3
    3e08:	d100      	bne.n	3e0c <__aeabi_fmul+0x84>
    3e0a:	e0c3      	b.n	3f94 <__aeabi_fmul+0x20c>
    3e0c:	2801      	cmp	r0, #1
    3e0e:	d000      	beq.n	3e12 <__aeabi_fmul+0x8a>
    3e10:	e0a2      	b.n	3f58 <__aeabi_fmul+0x1d0>
    3e12:	2500      	movs	r5, #0
    3e14:	2600      	movs	r6, #0
    3e16:	4002      	ands	r2, r0
    3e18:	b2d4      	uxtb	r4, r2
    3e1a:	0276      	lsls	r6, r6, #9
    3e1c:	05ed      	lsls	r5, r5, #23
    3e1e:	0a76      	lsrs	r6, r6, #9
    3e20:	432e      	orrs	r6, r5
    3e22:	07e4      	lsls	r4, r4, #31
    3e24:	4326      	orrs	r6, r4
    3e26:	0030      	movs	r0, r6
    3e28:	bc1c      	pop	{r2, r3, r4}
    3e2a:	4690      	mov	r8, r2
    3e2c:	4699      	mov	r9, r3
    3e2e:	46a2      	mov	sl, r4
    3e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e32:	2e00      	cmp	r6, #0
    3e34:	d11a      	bne.n	3e6c <__aeabi_fmul+0xe4>
    3e36:	2304      	movs	r3, #4
    3e38:	469a      	mov	sl, r3
    3e3a:	3b03      	subs	r3, #3
    3e3c:	4699      	mov	r9, r3
    3e3e:	e7ba      	b.n	3db6 <__aeabi_fmul+0x2e>
    3e40:	002a      	movs	r2, r5
    3e42:	1e51      	subs	r1, r2, #1
    3e44:	418a      	sbcs	r2, r1
    3e46:	1c90      	adds	r0, r2, #2
    3e48:	e7c6      	b.n	3dd8 <__aeabi_fmul+0x50>
    3e4a:	2001      	movs	r0, #1
    3e4c:	2d00      	cmp	r5, #0
    3e4e:	d0c3      	beq.n	3dd8 <__aeabi_fmul+0x50>
    3e50:	0028      	movs	r0, r5
    3e52:	f002 f9f7 	bl	6244 <__clzsi2>
    3e56:	1f43      	subs	r3, r0, #5
    3e58:	3076      	adds	r0, #118	; 0x76
    3e5a:	409d      	lsls	r5, r3
    3e5c:	4243      	negs	r3, r0
    3e5e:	2000      	movs	r0, #0
    3e60:	e7ba      	b.n	3dd8 <__aeabi_fmul+0x50>
    3e62:	2401      	movs	r4, #1
    3e64:	25ff      	movs	r5, #255	; 0xff
    3e66:	4014      	ands	r4, r2
    3e68:	2600      	movs	r6, #0
    3e6a:	e7d6      	b.n	3e1a <__aeabi_fmul+0x92>
    3e6c:	0030      	movs	r0, r6
    3e6e:	f002 f9e9 	bl	6244 <__clzsi2>
    3e72:	1f43      	subs	r3, r0, #5
    3e74:	409e      	lsls	r6, r3
    3e76:	2300      	movs	r3, #0
    3e78:	3076      	adds	r0, #118	; 0x76
    3e7a:	4247      	negs	r7, r0
    3e7c:	469a      	mov	sl, r3
    3e7e:	4699      	mov	r9, r3
    3e80:	e799      	b.n	3db6 <__aeabi_fmul+0x2e>
    3e82:	230c      	movs	r3, #12
    3e84:	469a      	mov	sl, r3
    3e86:	3b09      	subs	r3, #9
    3e88:	4699      	mov	r9, r3
    3e8a:	e794      	b.n	3db6 <__aeabi_fmul+0x2e>
    3e8c:	2680      	movs	r6, #128	; 0x80
    3e8e:	2400      	movs	r4, #0
    3e90:	03f6      	lsls	r6, r6, #15
    3e92:	25ff      	movs	r5, #255	; 0xff
    3e94:	e7c1      	b.n	3e1a <__aeabi_fmul+0x92>
    3e96:	0035      	movs	r5, r6
    3e98:	4648      	mov	r0, r9
    3e9a:	e7b2      	b.n	3e02 <__aeabi_fmul+0x7a>
    3e9c:	0035      	movs	r5, r6
    3e9e:	0022      	movs	r2, r4
    3ea0:	4648      	mov	r0, r9
    3ea2:	e7ae      	b.n	3e02 <__aeabi_fmul+0x7a>
    3ea4:	0429      	lsls	r1, r5, #16
    3ea6:	0c09      	lsrs	r1, r1, #16
    3ea8:	0008      	movs	r0, r1
    3eaa:	0c37      	lsrs	r7, r6, #16
    3eac:	0436      	lsls	r6, r6, #16
    3eae:	0c36      	lsrs	r6, r6, #16
    3eb0:	0c2c      	lsrs	r4, r5, #16
    3eb2:	4379      	muls	r1, r7
    3eb4:	4370      	muls	r0, r6
    3eb6:	4367      	muls	r7, r4
    3eb8:	4374      	muls	r4, r6
    3eba:	0c06      	lsrs	r6, r0, #16
    3ebc:	1864      	adds	r4, r4, r1
    3ebe:	1936      	adds	r6, r6, r4
    3ec0:	42b1      	cmp	r1, r6
    3ec2:	d903      	bls.n	3ecc <__aeabi_fmul+0x144>
    3ec4:	2180      	movs	r1, #128	; 0x80
    3ec6:	0249      	lsls	r1, r1, #9
    3ec8:	4688      	mov	r8, r1
    3eca:	4447      	add	r7, r8
    3ecc:	0400      	lsls	r0, r0, #16
    3ece:	0c00      	lsrs	r0, r0, #16
    3ed0:	0431      	lsls	r1, r6, #16
    3ed2:	1809      	adds	r1, r1, r0
    3ed4:	018d      	lsls	r5, r1, #6
    3ed6:	1e68      	subs	r0, r5, #1
    3ed8:	4185      	sbcs	r5, r0
    3eda:	0e89      	lsrs	r1, r1, #26
    3edc:	4329      	orrs	r1, r5
    3ede:	0c35      	lsrs	r5, r6, #16
    3ee0:	19ed      	adds	r5, r5, r7
    3ee2:	01ad      	lsls	r5, r5, #6
    3ee4:	430d      	orrs	r5, r1
    3ee6:	0129      	lsls	r1, r5, #4
    3ee8:	d504      	bpl.n	3ef4 <__aeabi_fmul+0x16c>
    3eea:	2301      	movs	r3, #1
    3eec:	0869      	lsrs	r1, r5, #1
    3eee:	401d      	ands	r5, r3
    3ef0:	4663      	mov	r3, ip
    3ef2:	430d      	orrs	r5, r1
    3ef4:	0019      	movs	r1, r3
    3ef6:	317f      	adds	r1, #127	; 0x7f
    3ef8:	2900      	cmp	r1, #0
    3efa:	dd25      	ble.n	3f48 <__aeabi_fmul+0x1c0>
    3efc:	0768      	lsls	r0, r5, #29
    3efe:	d004      	beq.n	3f0a <__aeabi_fmul+0x182>
    3f00:	200f      	movs	r0, #15
    3f02:	4028      	ands	r0, r5
    3f04:	2804      	cmp	r0, #4
    3f06:	d000      	beq.n	3f0a <__aeabi_fmul+0x182>
    3f08:	3504      	adds	r5, #4
    3f0a:	0128      	lsls	r0, r5, #4
    3f0c:	d503      	bpl.n	3f16 <__aeabi_fmul+0x18e>
    3f0e:	4927      	ldr	r1, [pc, #156]	; (3fac <__aeabi_fmul+0x224>)
    3f10:	3380      	adds	r3, #128	; 0x80
    3f12:	400d      	ands	r5, r1
    3f14:	0019      	movs	r1, r3
    3f16:	29fe      	cmp	r1, #254	; 0xfe
    3f18:	dca3      	bgt.n	3e62 <__aeabi_fmul+0xda>
    3f1a:	2401      	movs	r4, #1
    3f1c:	01ad      	lsls	r5, r5, #6
    3f1e:	0a6e      	lsrs	r6, r5, #9
    3f20:	4014      	ands	r4, r2
    3f22:	b2cd      	uxtb	r5, r1
    3f24:	e779      	b.n	3e1a <__aeabi_fmul+0x92>
    3f26:	2080      	movs	r0, #128	; 0x80
    3f28:	03c0      	lsls	r0, r0, #15
    3f2a:	4206      	tst	r6, r0
    3f2c:	d007      	beq.n	3f3e <__aeabi_fmul+0x1b6>
    3f2e:	4205      	tst	r5, r0
    3f30:	d105      	bne.n	3f3e <__aeabi_fmul+0x1b6>
    3f32:	4328      	orrs	r0, r5
    3f34:	0246      	lsls	r6, r0, #9
    3f36:	0a76      	lsrs	r6, r6, #9
    3f38:	4644      	mov	r4, r8
    3f3a:	25ff      	movs	r5, #255	; 0xff
    3f3c:	e76d      	b.n	3e1a <__aeabi_fmul+0x92>
    3f3e:	4306      	orrs	r6, r0
    3f40:	0276      	lsls	r6, r6, #9
    3f42:	0a76      	lsrs	r6, r6, #9
    3f44:	25ff      	movs	r5, #255	; 0xff
    3f46:	e768      	b.n	3e1a <__aeabi_fmul+0x92>
    3f48:	2401      	movs	r4, #1
    3f4a:	1a61      	subs	r1, r4, r1
    3f4c:	291b      	cmp	r1, #27
    3f4e:	dd05      	ble.n	3f5c <__aeabi_fmul+0x1d4>
    3f50:	4014      	ands	r4, r2
    3f52:	2500      	movs	r5, #0
    3f54:	2600      	movs	r6, #0
    3f56:	e760      	b.n	3e1a <__aeabi_fmul+0x92>
    3f58:	4663      	mov	r3, ip
    3f5a:	e7cb      	b.n	3ef4 <__aeabi_fmul+0x16c>
    3f5c:	002e      	movs	r6, r5
    3f5e:	2320      	movs	r3, #32
    3f60:	40ce      	lsrs	r6, r1
    3f62:	1a59      	subs	r1, r3, r1
    3f64:	408d      	lsls	r5, r1
    3f66:	1e6b      	subs	r3, r5, #1
    3f68:	419d      	sbcs	r5, r3
    3f6a:	432e      	orrs	r6, r5
    3f6c:	0773      	lsls	r3, r6, #29
    3f6e:	d004      	beq.n	3f7a <__aeabi_fmul+0x1f2>
    3f70:	230f      	movs	r3, #15
    3f72:	4033      	ands	r3, r6
    3f74:	2b04      	cmp	r3, #4
    3f76:	d000      	beq.n	3f7a <__aeabi_fmul+0x1f2>
    3f78:	3604      	adds	r6, #4
    3f7a:	0173      	lsls	r3, r6, #5
    3f7c:	d504      	bpl.n	3f88 <__aeabi_fmul+0x200>
    3f7e:	2401      	movs	r4, #1
    3f80:	2501      	movs	r5, #1
    3f82:	4014      	ands	r4, r2
    3f84:	2600      	movs	r6, #0
    3f86:	e748      	b.n	3e1a <__aeabi_fmul+0x92>
    3f88:	2401      	movs	r4, #1
    3f8a:	01b6      	lsls	r6, r6, #6
    3f8c:	0a76      	lsrs	r6, r6, #9
    3f8e:	4014      	ands	r4, r2
    3f90:	2500      	movs	r5, #0
    3f92:	e742      	b.n	3e1a <__aeabi_fmul+0x92>
    3f94:	2680      	movs	r6, #128	; 0x80
    3f96:	2401      	movs	r4, #1
    3f98:	03f6      	lsls	r6, r6, #15
    3f9a:	432e      	orrs	r6, r5
    3f9c:	0276      	lsls	r6, r6, #9
    3f9e:	0a76      	lsrs	r6, r6, #9
    3fa0:	4014      	ands	r4, r2
    3fa2:	25ff      	movs	r5, #255	; 0xff
    3fa4:	e739      	b.n	3e1a <__aeabi_fmul+0x92>
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	00006618 	.word	0x00006618
    3fac:	f7ffffff 	.word	0xf7ffffff

00003fb0 <__aeabi_fsub>:
    3fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fb2:	024a      	lsls	r2, r1, #9
    3fb4:	004e      	lsls	r6, r1, #1
    3fb6:	0243      	lsls	r3, r0, #9
    3fb8:	0044      	lsls	r4, r0, #1
    3fba:	0e24      	lsrs	r4, r4, #24
    3fbc:	0fc5      	lsrs	r5, r0, #31
    3fbe:	099b      	lsrs	r3, r3, #6
    3fc0:	0e36      	lsrs	r6, r6, #24
    3fc2:	0fc9      	lsrs	r1, r1, #31
    3fc4:	0992      	lsrs	r2, r2, #6
    3fc6:	2eff      	cmp	r6, #255	; 0xff
    3fc8:	d100      	bne.n	3fcc <__aeabi_fsub+0x1c>
    3fca:	e083      	b.n	40d4 <__aeabi_fsub+0x124>
    3fcc:	2001      	movs	r0, #1
    3fce:	4041      	eors	r1, r0
    3fd0:	1ba0      	subs	r0, r4, r6
    3fd2:	42a9      	cmp	r1, r5
    3fd4:	d05c      	beq.n	4090 <__aeabi_fsub+0xe0>
    3fd6:	2800      	cmp	r0, #0
    3fd8:	dc00      	bgt.n	3fdc <__aeabi_fsub+0x2c>
    3fda:	e095      	b.n	4108 <__aeabi_fsub+0x158>
    3fdc:	2e00      	cmp	r6, #0
    3fde:	d11c      	bne.n	401a <__aeabi_fsub+0x6a>
    3fe0:	2a00      	cmp	r2, #0
    3fe2:	d000      	beq.n	3fe6 <__aeabi_fsub+0x36>
    3fe4:	e081      	b.n	40ea <__aeabi_fsub+0x13a>
    3fe6:	075a      	lsls	r2, r3, #29
    3fe8:	d004      	beq.n	3ff4 <__aeabi_fsub+0x44>
    3fea:	220f      	movs	r2, #15
    3fec:	401a      	ands	r2, r3
    3fee:	2a04      	cmp	r2, #4
    3ff0:	d000      	beq.n	3ff4 <__aeabi_fsub+0x44>
    3ff2:	3304      	adds	r3, #4
    3ff4:	015a      	lsls	r2, r3, #5
    3ff6:	d53b      	bpl.n	4070 <__aeabi_fsub+0xc0>
    3ff8:	3401      	adds	r4, #1
    3ffa:	2cff      	cmp	r4, #255	; 0xff
    3ffc:	d100      	bne.n	4000 <__aeabi_fsub+0x50>
    3ffe:	e091      	b.n	4124 <__aeabi_fsub+0x174>
    4000:	2001      	movs	r0, #1
    4002:	019b      	lsls	r3, r3, #6
    4004:	0a5b      	lsrs	r3, r3, #9
    4006:	b2e4      	uxtb	r4, r4
    4008:	4005      	ands	r5, r0
    400a:	025b      	lsls	r3, r3, #9
    400c:	05e4      	lsls	r4, r4, #23
    400e:	0a5b      	lsrs	r3, r3, #9
    4010:	07ed      	lsls	r5, r5, #31
    4012:	4323      	orrs	r3, r4
    4014:	432b      	orrs	r3, r5
    4016:	0018      	movs	r0, r3
    4018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    401a:	2cff      	cmp	r4, #255	; 0xff
    401c:	d0e3      	beq.n	3fe6 <__aeabi_fsub+0x36>
    401e:	2180      	movs	r1, #128	; 0x80
    4020:	04c9      	lsls	r1, r1, #19
    4022:	430a      	orrs	r2, r1
    4024:	281b      	cmp	r0, #27
    4026:	dd00      	ble.n	402a <__aeabi_fsub+0x7a>
    4028:	e090      	b.n	414c <__aeabi_fsub+0x19c>
    402a:	0016      	movs	r6, r2
    402c:	2120      	movs	r1, #32
    402e:	40c6      	lsrs	r6, r0
    4030:	1a08      	subs	r0, r1, r0
    4032:	4082      	lsls	r2, r0
    4034:	1e51      	subs	r1, r2, #1
    4036:	418a      	sbcs	r2, r1
    4038:	4332      	orrs	r2, r6
    403a:	1a9b      	subs	r3, r3, r2
    403c:	015a      	lsls	r2, r3, #5
    403e:	d515      	bpl.n	406c <__aeabi_fsub+0xbc>
    4040:	019b      	lsls	r3, r3, #6
    4042:	099e      	lsrs	r6, r3, #6
    4044:	0030      	movs	r0, r6
    4046:	f002 f8fd 	bl	6244 <__clzsi2>
    404a:	3805      	subs	r0, #5
    404c:	4086      	lsls	r6, r0
    404e:	4284      	cmp	r4, r0
    4050:	dc6c      	bgt.n	412c <__aeabi_fsub+0x17c>
    4052:	1b04      	subs	r4, r0, r4
    4054:	0033      	movs	r3, r6
    4056:	2020      	movs	r0, #32
    4058:	3401      	adds	r4, #1
    405a:	40e3      	lsrs	r3, r4
    405c:	1b04      	subs	r4, r0, r4
    405e:	40a6      	lsls	r6, r4
    4060:	1e72      	subs	r2, r6, #1
    4062:	4196      	sbcs	r6, r2
    4064:	2400      	movs	r4, #0
    4066:	4333      	orrs	r3, r6
    4068:	e7bd      	b.n	3fe6 <__aeabi_fsub+0x36>
    406a:	000d      	movs	r5, r1
    406c:	075a      	lsls	r2, r3, #29
    406e:	d1bc      	bne.n	3fea <__aeabi_fsub+0x3a>
    4070:	08df      	lsrs	r7, r3, #3
    4072:	2301      	movs	r3, #1
    4074:	401d      	ands	r5, r3
    4076:	2cff      	cmp	r4, #255	; 0xff
    4078:	d133      	bne.n	40e2 <__aeabi_fsub+0x132>
    407a:	2f00      	cmp	r7, #0
    407c:	d100      	bne.n	4080 <__aeabi_fsub+0xd0>
    407e:	e090      	b.n	41a2 <__aeabi_fsub+0x1f2>
    4080:	2280      	movs	r2, #128	; 0x80
    4082:	03d2      	lsls	r2, r2, #15
    4084:	0013      	movs	r3, r2
    4086:	433b      	orrs	r3, r7
    4088:	025b      	lsls	r3, r3, #9
    408a:	0a5b      	lsrs	r3, r3, #9
    408c:	24ff      	movs	r4, #255	; 0xff
    408e:	e7bc      	b.n	400a <__aeabi_fsub+0x5a>
    4090:	2800      	cmp	r0, #0
    4092:	dd4f      	ble.n	4134 <__aeabi_fsub+0x184>
    4094:	2e00      	cmp	r6, #0
    4096:	d02e      	beq.n	40f6 <__aeabi_fsub+0x146>
    4098:	2cff      	cmp	r4, #255	; 0xff
    409a:	d0a4      	beq.n	3fe6 <__aeabi_fsub+0x36>
    409c:	2580      	movs	r5, #128	; 0x80
    409e:	04ed      	lsls	r5, r5, #19
    40a0:	432a      	orrs	r2, r5
    40a2:	281b      	cmp	r0, #27
    40a4:	dd00      	ble.n	40a8 <__aeabi_fsub+0xf8>
    40a6:	e097      	b.n	41d8 <__aeabi_fsub+0x228>
    40a8:	0016      	movs	r6, r2
    40aa:	2520      	movs	r5, #32
    40ac:	40c6      	lsrs	r6, r0
    40ae:	1a28      	subs	r0, r5, r0
    40b0:	4082      	lsls	r2, r0
    40b2:	1e50      	subs	r0, r2, #1
    40b4:	4182      	sbcs	r2, r0
    40b6:	4332      	orrs	r2, r6
    40b8:	189b      	adds	r3, r3, r2
    40ba:	015a      	lsls	r2, r3, #5
    40bc:	d5d5      	bpl.n	406a <__aeabi_fsub+0xba>
    40be:	3401      	adds	r4, #1
    40c0:	2cff      	cmp	r4, #255	; 0xff
    40c2:	d06d      	beq.n	41a0 <__aeabi_fsub+0x1f0>
    40c4:	2201      	movs	r2, #1
    40c6:	487b      	ldr	r0, [pc, #492]	; (42b4 <__aeabi_fsub+0x304>)
    40c8:	401a      	ands	r2, r3
    40ca:	085b      	lsrs	r3, r3, #1
    40cc:	4003      	ands	r3, r0
    40ce:	4313      	orrs	r3, r2
    40d0:	000d      	movs	r5, r1
    40d2:	e788      	b.n	3fe6 <__aeabi_fsub+0x36>
    40d4:	2a00      	cmp	r2, #0
    40d6:	d000      	beq.n	40da <__aeabi_fsub+0x12a>
    40d8:	e77a      	b.n	3fd0 <__aeabi_fsub+0x20>
    40da:	e777      	b.n	3fcc <__aeabi_fsub+0x1c>
    40dc:	1e03      	subs	r3, r0, #0
    40de:	d1c5      	bne.n	406c <__aeabi_fsub+0xbc>
    40e0:	2500      	movs	r5, #0
    40e2:	027b      	lsls	r3, r7, #9
    40e4:	0a5b      	lsrs	r3, r3, #9
    40e6:	b2e4      	uxtb	r4, r4
    40e8:	e78f      	b.n	400a <__aeabi_fsub+0x5a>
    40ea:	3801      	subs	r0, #1
    40ec:	2800      	cmp	r0, #0
    40ee:	d0a4      	beq.n	403a <__aeabi_fsub+0x8a>
    40f0:	2cff      	cmp	r4, #255	; 0xff
    40f2:	d197      	bne.n	4024 <__aeabi_fsub+0x74>
    40f4:	e777      	b.n	3fe6 <__aeabi_fsub+0x36>
    40f6:	2a00      	cmp	r2, #0
    40f8:	d100      	bne.n	40fc <__aeabi_fsub+0x14c>
    40fa:	e774      	b.n	3fe6 <__aeabi_fsub+0x36>
    40fc:	3801      	subs	r0, #1
    40fe:	2800      	cmp	r0, #0
    4100:	d0da      	beq.n	40b8 <__aeabi_fsub+0x108>
    4102:	2cff      	cmp	r4, #255	; 0xff
    4104:	d1cd      	bne.n	40a2 <__aeabi_fsub+0xf2>
    4106:	e76e      	b.n	3fe6 <__aeabi_fsub+0x36>
    4108:	2800      	cmp	r0, #0
    410a:	d121      	bne.n	4150 <__aeabi_fsub+0x1a0>
    410c:	1c60      	adds	r0, r4, #1
    410e:	b2c0      	uxtb	r0, r0
    4110:	2801      	cmp	r0, #1
    4112:	dd58      	ble.n	41c6 <__aeabi_fsub+0x216>
    4114:	2780      	movs	r7, #128	; 0x80
    4116:	1a9e      	subs	r6, r3, r2
    4118:	04ff      	lsls	r7, r7, #19
    411a:	4037      	ands	r7, r6
    411c:	d02f      	beq.n	417e <__aeabi_fsub+0x1ce>
    411e:	1ad6      	subs	r6, r2, r3
    4120:	000d      	movs	r5, r1
    4122:	e78f      	b.n	4044 <__aeabi_fsub+0x94>
    4124:	2301      	movs	r3, #1
    4126:	401d      	ands	r5, r3
    4128:	2300      	movs	r3, #0
    412a:	e76e      	b.n	400a <__aeabi_fsub+0x5a>
    412c:	4b62      	ldr	r3, [pc, #392]	; (42b8 <__aeabi_fsub+0x308>)
    412e:	1a24      	subs	r4, r4, r0
    4130:	4033      	ands	r3, r6
    4132:	e758      	b.n	3fe6 <__aeabi_fsub+0x36>
    4134:	2800      	cmp	r0, #0
    4136:	d151      	bne.n	41dc <__aeabi_fsub+0x22c>
    4138:	1c60      	adds	r0, r4, #1
    413a:	b2c6      	uxtb	r6, r0
    413c:	2e01      	cmp	r6, #1
    413e:	dd33      	ble.n	41a8 <__aeabi_fsub+0x1f8>
    4140:	28ff      	cmp	r0, #255	; 0xff
    4142:	d02d      	beq.n	41a0 <__aeabi_fsub+0x1f0>
    4144:	189b      	adds	r3, r3, r2
    4146:	085b      	lsrs	r3, r3, #1
    4148:	0004      	movs	r4, r0
    414a:	e74c      	b.n	3fe6 <__aeabi_fsub+0x36>
    414c:	2201      	movs	r2, #1
    414e:	e774      	b.n	403a <__aeabi_fsub+0x8a>
    4150:	2c00      	cmp	r4, #0
    4152:	d01a      	beq.n	418a <__aeabi_fsub+0x1da>
    4154:	2eff      	cmp	r6, #255	; 0xff
    4156:	d01f      	beq.n	4198 <__aeabi_fsub+0x1e8>
    4158:	2480      	movs	r4, #128	; 0x80
    415a:	04e4      	lsls	r4, r4, #19
    415c:	4240      	negs	r0, r0
    415e:	4323      	orrs	r3, r4
    4160:	281b      	cmp	r0, #27
    4162:	dd00      	ble.n	4166 <__aeabi_fsub+0x1b6>
    4164:	e096      	b.n	4294 <__aeabi_fsub+0x2e4>
    4166:	001d      	movs	r5, r3
    4168:	2420      	movs	r4, #32
    416a:	40c5      	lsrs	r5, r0
    416c:	1a20      	subs	r0, r4, r0
    416e:	4083      	lsls	r3, r0
    4170:	1e58      	subs	r0, r3, #1
    4172:	4183      	sbcs	r3, r0
    4174:	432b      	orrs	r3, r5
    4176:	1ad3      	subs	r3, r2, r3
    4178:	0034      	movs	r4, r6
    417a:	000d      	movs	r5, r1
    417c:	e75e      	b.n	403c <__aeabi_fsub+0x8c>
    417e:	2e00      	cmp	r6, #0
    4180:	d000      	beq.n	4184 <__aeabi_fsub+0x1d4>
    4182:	e75f      	b.n	4044 <__aeabi_fsub+0x94>
    4184:	2500      	movs	r5, #0
    4186:	2400      	movs	r4, #0
    4188:	e7ab      	b.n	40e2 <__aeabi_fsub+0x132>
    418a:	2b00      	cmp	r3, #0
    418c:	d044      	beq.n	4218 <__aeabi_fsub+0x268>
    418e:	43c0      	mvns	r0, r0
    4190:	2800      	cmp	r0, #0
    4192:	d0f0      	beq.n	4176 <__aeabi_fsub+0x1c6>
    4194:	2eff      	cmp	r6, #255	; 0xff
    4196:	d1e3      	bne.n	4160 <__aeabi_fsub+0x1b0>
    4198:	0013      	movs	r3, r2
    419a:	24ff      	movs	r4, #255	; 0xff
    419c:	000d      	movs	r5, r1
    419e:	e722      	b.n	3fe6 <__aeabi_fsub+0x36>
    41a0:	000d      	movs	r5, r1
    41a2:	24ff      	movs	r4, #255	; 0xff
    41a4:	2300      	movs	r3, #0
    41a6:	e730      	b.n	400a <__aeabi_fsub+0x5a>
    41a8:	2c00      	cmp	r4, #0
    41aa:	d15d      	bne.n	4268 <__aeabi_fsub+0x2b8>
    41ac:	2b00      	cmp	r3, #0
    41ae:	d07d      	beq.n	42ac <__aeabi_fsub+0x2fc>
    41b0:	2a00      	cmp	r2, #0
    41b2:	d100      	bne.n	41b6 <__aeabi_fsub+0x206>
    41b4:	e717      	b.n	3fe6 <__aeabi_fsub+0x36>
    41b6:	189b      	adds	r3, r3, r2
    41b8:	015a      	lsls	r2, r3, #5
    41ba:	d400      	bmi.n	41be <__aeabi_fsub+0x20e>
    41bc:	e756      	b.n	406c <__aeabi_fsub+0xbc>
    41be:	4a3e      	ldr	r2, [pc, #248]	; (42b8 <__aeabi_fsub+0x308>)
    41c0:	0004      	movs	r4, r0
    41c2:	4013      	ands	r3, r2
    41c4:	e70f      	b.n	3fe6 <__aeabi_fsub+0x36>
    41c6:	2c00      	cmp	r4, #0
    41c8:	d11e      	bne.n	4208 <__aeabi_fsub+0x258>
    41ca:	2b00      	cmp	r3, #0
    41cc:	d12f      	bne.n	422e <__aeabi_fsub+0x27e>
    41ce:	2a00      	cmp	r2, #0
    41d0:	d065      	beq.n	429e <__aeabi_fsub+0x2ee>
    41d2:	0013      	movs	r3, r2
    41d4:	000d      	movs	r5, r1
    41d6:	e706      	b.n	3fe6 <__aeabi_fsub+0x36>
    41d8:	2201      	movs	r2, #1
    41da:	e76d      	b.n	40b8 <__aeabi_fsub+0x108>
    41dc:	2c00      	cmp	r4, #0
    41de:	d11f      	bne.n	4220 <__aeabi_fsub+0x270>
    41e0:	2b00      	cmp	r3, #0
    41e2:	d059      	beq.n	4298 <__aeabi_fsub+0x2e8>
    41e4:	43c0      	mvns	r0, r0
    41e6:	2800      	cmp	r0, #0
    41e8:	d00b      	beq.n	4202 <__aeabi_fsub+0x252>
    41ea:	2eff      	cmp	r6, #255	; 0xff
    41ec:	d04f      	beq.n	428e <__aeabi_fsub+0x2de>
    41ee:	281b      	cmp	r0, #27
    41f0:	dc5e      	bgt.n	42b0 <__aeabi_fsub+0x300>
    41f2:	001d      	movs	r5, r3
    41f4:	2420      	movs	r4, #32
    41f6:	40c5      	lsrs	r5, r0
    41f8:	1a20      	subs	r0, r4, r0
    41fa:	4083      	lsls	r3, r0
    41fc:	1e58      	subs	r0, r3, #1
    41fe:	4183      	sbcs	r3, r0
    4200:	432b      	orrs	r3, r5
    4202:	189b      	adds	r3, r3, r2
    4204:	0034      	movs	r4, r6
    4206:	e758      	b.n	40ba <__aeabi_fsub+0x10a>
    4208:	2b00      	cmp	r3, #0
    420a:	d11c      	bne.n	4246 <__aeabi_fsub+0x296>
    420c:	2a00      	cmp	r2, #0
    420e:	d049      	beq.n	42a4 <__aeabi_fsub+0x2f4>
    4210:	0013      	movs	r3, r2
    4212:	000d      	movs	r5, r1
    4214:	24ff      	movs	r4, #255	; 0xff
    4216:	e6e6      	b.n	3fe6 <__aeabi_fsub+0x36>
    4218:	0013      	movs	r3, r2
    421a:	0034      	movs	r4, r6
    421c:	000d      	movs	r5, r1
    421e:	e6e2      	b.n	3fe6 <__aeabi_fsub+0x36>
    4220:	2eff      	cmp	r6, #255	; 0xff
    4222:	d034      	beq.n	428e <__aeabi_fsub+0x2de>
    4224:	2480      	movs	r4, #128	; 0x80
    4226:	04e4      	lsls	r4, r4, #19
    4228:	4240      	negs	r0, r0
    422a:	4323      	orrs	r3, r4
    422c:	e7df      	b.n	41ee <__aeabi_fsub+0x23e>
    422e:	2a00      	cmp	r2, #0
    4230:	d100      	bne.n	4234 <__aeabi_fsub+0x284>
    4232:	e6d8      	b.n	3fe6 <__aeabi_fsub+0x36>
    4234:	2780      	movs	r7, #128	; 0x80
    4236:	1a98      	subs	r0, r3, r2
    4238:	04ff      	lsls	r7, r7, #19
    423a:	4007      	ands	r7, r0
    423c:	d100      	bne.n	4240 <__aeabi_fsub+0x290>
    423e:	e74d      	b.n	40dc <__aeabi_fsub+0x12c>
    4240:	1ad3      	subs	r3, r2, r3
    4242:	000d      	movs	r5, r1
    4244:	e6cf      	b.n	3fe6 <__aeabi_fsub+0x36>
    4246:	24ff      	movs	r4, #255	; 0xff
    4248:	2a00      	cmp	r2, #0
    424a:	d100      	bne.n	424e <__aeabi_fsub+0x29e>
    424c:	e6cb      	b.n	3fe6 <__aeabi_fsub+0x36>
    424e:	2080      	movs	r0, #128	; 0x80
    4250:	08db      	lsrs	r3, r3, #3
    4252:	03c0      	lsls	r0, r0, #15
    4254:	4203      	tst	r3, r0
    4256:	d004      	beq.n	4262 <__aeabi_fsub+0x2b2>
    4258:	08d2      	lsrs	r2, r2, #3
    425a:	4202      	tst	r2, r0
    425c:	d101      	bne.n	4262 <__aeabi_fsub+0x2b2>
    425e:	0013      	movs	r3, r2
    4260:	000d      	movs	r5, r1
    4262:	00db      	lsls	r3, r3, #3
    4264:	24ff      	movs	r4, #255	; 0xff
    4266:	e6be      	b.n	3fe6 <__aeabi_fsub+0x36>
    4268:	2b00      	cmp	r3, #0
    426a:	d010      	beq.n	428e <__aeabi_fsub+0x2de>
    426c:	24ff      	movs	r4, #255	; 0xff
    426e:	2a00      	cmp	r2, #0
    4270:	d100      	bne.n	4274 <__aeabi_fsub+0x2c4>
    4272:	e6b8      	b.n	3fe6 <__aeabi_fsub+0x36>
    4274:	2080      	movs	r0, #128	; 0x80
    4276:	08db      	lsrs	r3, r3, #3
    4278:	03c0      	lsls	r0, r0, #15
    427a:	4203      	tst	r3, r0
    427c:	d003      	beq.n	4286 <__aeabi_fsub+0x2d6>
    427e:	08d2      	lsrs	r2, r2, #3
    4280:	4202      	tst	r2, r0
    4282:	d100      	bne.n	4286 <__aeabi_fsub+0x2d6>
    4284:	0013      	movs	r3, r2
    4286:	00db      	lsls	r3, r3, #3
    4288:	000d      	movs	r5, r1
    428a:	24ff      	movs	r4, #255	; 0xff
    428c:	e6ab      	b.n	3fe6 <__aeabi_fsub+0x36>
    428e:	0013      	movs	r3, r2
    4290:	24ff      	movs	r4, #255	; 0xff
    4292:	e6a8      	b.n	3fe6 <__aeabi_fsub+0x36>
    4294:	2301      	movs	r3, #1
    4296:	e76e      	b.n	4176 <__aeabi_fsub+0x1c6>
    4298:	0013      	movs	r3, r2
    429a:	0034      	movs	r4, r6
    429c:	e6a3      	b.n	3fe6 <__aeabi_fsub+0x36>
    429e:	2700      	movs	r7, #0
    42a0:	2500      	movs	r5, #0
    42a2:	e71e      	b.n	40e2 <__aeabi_fsub+0x132>
    42a4:	2780      	movs	r7, #128	; 0x80
    42a6:	2500      	movs	r5, #0
    42a8:	03ff      	lsls	r7, r7, #15
    42aa:	e6e9      	b.n	4080 <__aeabi_fsub+0xd0>
    42ac:	0013      	movs	r3, r2
    42ae:	e69a      	b.n	3fe6 <__aeabi_fsub+0x36>
    42b0:	2301      	movs	r3, #1
    42b2:	e7a6      	b.n	4202 <__aeabi_fsub+0x252>
    42b4:	7dffffff 	.word	0x7dffffff
    42b8:	fbffffff 	.word	0xfbffffff

000042bc <__aeabi_f2iz>:
    42bc:	0243      	lsls	r3, r0, #9
    42be:	0a59      	lsrs	r1, r3, #9
    42c0:	0043      	lsls	r3, r0, #1
    42c2:	0fc2      	lsrs	r2, r0, #31
    42c4:	0e1b      	lsrs	r3, r3, #24
    42c6:	2000      	movs	r0, #0
    42c8:	2b7e      	cmp	r3, #126	; 0x7e
    42ca:	dd0e      	ble.n	42ea <__aeabi_f2iz+0x2e>
    42cc:	2b9d      	cmp	r3, #157	; 0x9d
    42ce:	dc0d      	bgt.n	42ec <__aeabi_f2iz+0x30>
    42d0:	2080      	movs	r0, #128	; 0x80
    42d2:	0400      	lsls	r0, r0, #16
    42d4:	4301      	orrs	r1, r0
    42d6:	2b95      	cmp	r3, #149	; 0x95
    42d8:	dc0b      	bgt.n	42f2 <__aeabi_f2iz+0x36>
    42da:	2096      	movs	r0, #150	; 0x96
    42dc:	1ac3      	subs	r3, r0, r3
    42de:	40d9      	lsrs	r1, r3
    42e0:	000b      	movs	r3, r1
    42e2:	4258      	negs	r0, r3
    42e4:	2a00      	cmp	r2, #0
    42e6:	d100      	bne.n	42ea <__aeabi_f2iz+0x2e>
    42e8:	0018      	movs	r0, r3
    42ea:	4770      	bx	lr
    42ec:	4b03      	ldr	r3, [pc, #12]	; (42fc <__aeabi_f2iz+0x40>)
    42ee:	18d0      	adds	r0, r2, r3
    42f0:	e7fb      	b.n	42ea <__aeabi_f2iz+0x2e>
    42f2:	3b96      	subs	r3, #150	; 0x96
    42f4:	4099      	lsls	r1, r3
    42f6:	000b      	movs	r3, r1
    42f8:	e7f3      	b.n	42e2 <__aeabi_f2iz+0x26>
    42fa:	46c0      	nop			; (mov r8, r8)
    42fc:	7fffffff 	.word	0x7fffffff

00004300 <__aeabi_i2f>:
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	2800      	cmp	r0, #0
    4304:	d030      	beq.n	4368 <__aeabi_i2f+0x68>
    4306:	17c3      	asrs	r3, r0, #31
    4308:	18c5      	adds	r5, r0, r3
    430a:	405d      	eors	r5, r3
    430c:	0fc4      	lsrs	r4, r0, #31
    430e:	0028      	movs	r0, r5
    4310:	f001 ff98 	bl	6244 <__clzsi2>
    4314:	239e      	movs	r3, #158	; 0x9e
    4316:	1a1b      	subs	r3, r3, r0
    4318:	2b96      	cmp	r3, #150	; 0x96
    431a:	dc0d      	bgt.n	4338 <__aeabi_i2f+0x38>
    431c:	2296      	movs	r2, #150	; 0x96
    431e:	1ad2      	subs	r2, r2, r3
    4320:	4095      	lsls	r5, r2
    4322:	026a      	lsls	r2, r5, #9
    4324:	0a52      	lsrs	r2, r2, #9
    4326:	b2d8      	uxtb	r0, r3
    4328:	0252      	lsls	r2, r2, #9
    432a:	05c0      	lsls	r0, r0, #23
    432c:	0a52      	lsrs	r2, r2, #9
    432e:	07e4      	lsls	r4, r4, #31
    4330:	4302      	orrs	r2, r0
    4332:	4322      	orrs	r2, r4
    4334:	0010      	movs	r0, r2
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	2b99      	cmp	r3, #153	; 0x99
    433a:	dc19      	bgt.n	4370 <__aeabi_i2f+0x70>
    433c:	2299      	movs	r2, #153	; 0x99
    433e:	1ad2      	subs	r2, r2, r3
    4340:	4095      	lsls	r5, r2
    4342:	4a12      	ldr	r2, [pc, #72]	; (438c <__aeabi_i2f+0x8c>)
    4344:	402a      	ands	r2, r5
    4346:	0769      	lsls	r1, r5, #29
    4348:	d004      	beq.n	4354 <__aeabi_i2f+0x54>
    434a:	210f      	movs	r1, #15
    434c:	400d      	ands	r5, r1
    434e:	2d04      	cmp	r5, #4
    4350:	d000      	beq.n	4354 <__aeabi_i2f+0x54>
    4352:	3204      	adds	r2, #4
    4354:	0151      	lsls	r1, r2, #5
    4356:	d503      	bpl.n	4360 <__aeabi_i2f+0x60>
    4358:	4b0c      	ldr	r3, [pc, #48]	; (438c <__aeabi_i2f+0x8c>)
    435a:	401a      	ands	r2, r3
    435c:	239f      	movs	r3, #159	; 0x9f
    435e:	1a1b      	subs	r3, r3, r0
    4360:	0192      	lsls	r2, r2, #6
    4362:	0a52      	lsrs	r2, r2, #9
    4364:	b2d8      	uxtb	r0, r3
    4366:	e7df      	b.n	4328 <__aeabi_i2f+0x28>
    4368:	2400      	movs	r4, #0
    436a:	2000      	movs	r0, #0
    436c:	2200      	movs	r2, #0
    436e:	e7db      	b.n	4328 <__aeabi_i2f+0x28>
    4370:	2205      	movs	r2, #5
    4372:	002e      	movs	r6, r5
    4374:	1a12      	subs	r2, r2, r0
    4376:	21b9      	movs	r1, #185	; 0xb9
    4378:	40d6      	lsrs	r6, r2
    437a:	002a      	movs	r2, r5
    437c:	1ac9      	subs	r1, r1, r3
    437e:	408a      	lsls	r2, r1
    4380:	1e55      	subs	r5, r2, #1
    4382:	41aa      	sbcs	r2, r5
    4384:	0035      	movs	r5, r6
    4386:	4315      	orrs	r5, r2
    4388:	e7db      	b.n	4342 <__aeabi_i2f+0x42>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	fbffffff 	.word	0xfbffffff

00004390 <__aeabi_dadd>:
    4390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4392:	4656      	mov	r6, sl
    4394:	465f      	mov	r7, fp
    4396:	464d      	mov	r5, r9
    4398:	4644      	mov	r4, r8
    439a:	b4f0      	push	{r4, r5, r6, r7}
    439c:	000f      	movs	r7, r1
    439e:	0ffd      	lsrs	r5, r7, #31
    43a0:	46aa      	mov	sl, r5
    43a2:	0309      	lsls	r1, r1, #12
    43a4:	007c      	lsls	r4, r7, #1
    43a6:	002e      	movs	r6, r5
    43a8:	005f      	lsls	r7, r3, #1
    43aa:	0f45      	lsrs	r5, r0, #29
    43ac:	0a49      	lsrs	r1, r1, #9
    43ae:	0d7f      	lsrs	r7, r7, #21
    43b0:	4329      	orrs	r1, r5
    43b2:	00c5      	lsls	r5, r0, #3
    43b4:	0318      	lsls	r0, r3, #12
    43b6:	46bc      	mov	ip, r7
    43b8:	0a40      	lsrs	r0, r0, #9
    43ba:	0f57      	lsrs	r7, r2, #29
    43bc:	0d64      	lsrs	r4, r4, #21
    43be:	0fdb      	lsrs	r3, r3, #31
    43c0:	4338      	orrs	r0, r7
    43c2:	00d2      	lsls	r2, r2, #3
    43c4:	459a      	cmp	sl, r3
    43c6:	d100      	bne.n	43ca <__aeabi_dadd+0x3a>
    43c8:	e0aa      	b.n	4520 <__aeabi_dadd+0x190>
    43ca:	4666      	mov	r6, ip
    43cc:	1ba6      	subs	r6, r4, r6
    43ce:	2e00      	cmp	r6, #0
    43d0:	dc00      	bgt.n	43d4 <__aeabi_dadd+0x44>
    43d2:	e0ff      	b.n	45d4 <__aeabi_dadd+0x244>
    43d4:	4663      	mov	r3, ip
    43d6:	2b00      	cmp	r3, #0
    43d8:	d139      	bne.n	444e <__aeabi_dadd+0xbe>
    43da:	0003      	movs	r3, r0
    43dc:	4313      	orrs	r3, r2
    43de:	d000      	beq.n	43e2 <__aeabi_dadd+0x52>
    43e0:	e0d9      	b.n	4596 <__aeabi_dadd+0x206>
    43e2:	076b      	lsls	r3, r5, #29
    43e4:	d009      	beq.n	43fa <__aeabi_dadd+0x6a>
    43e6:	230f      	movs	r3, #15
    43e8:	402b      	ands	r3, r5
    43ea:	2b04      	cmp	r3, #4
    43ec:	d005      	beq.n	43fa <__aeabi_dadd+0x6a>
    43ee:	1d2b      	adds	r3, r5, #4
    43f0:	42ab      	cmp	r3, r5
    43f2:	41ad      	sbcs	r5, r5
    43f4:	426d      	negs	r5, r5
    43f6:	1949      	adds	r1, r1, r5
    43f8:	001d      	movs	r5, r3
    43fa:	020b      	lsls	r3, r1, #8
    43fc:	d400      	bmi.n	4400 <__aeabi_dadd+0x70>
    43fe:	e082      	b.n	4506 <__aeabi_dadd+0x176>
    4400:	4bca      	ldr	r3, [pc, #808]	; (472c <__aeabi_dadd+0x39c>)
    4402:	3401      	adds	r4, #1
    4404:	429c      	cmp	r4, r3
    4406:	d100      	bne.n	440a <__aeabi_dadd+0x7a>
    4408:	e0fe      	b.n	4608 <__aeabi_dadd+0x278>
    440a:	000a      	movs	r2, r1
    440c:	4656      	mov	r6, sl
    440e:	4bc8      	ldr	r3, [pc, #800]	; (4730 <__aeabi_dadd+0x3a0>)
    4410:	08ed      	lsrs	r5, r5, #3
    4412:	401a      	ands	r2, r3
    4414:	0750      	lsls	r0, r2, #29
    4416:	0564      	lsls	r4, r4, #21
    4418:	0252      	lsls	r2, r2, #9
    441a:	4305      	orrs	r5, r0
    441c:	0b12      	lsrs	r2, r2, #12
    441e:	0d64      	lsrs	r4, r4, #21
    4420:	2100      	movs	r1, #0
    4422:	0312      	lsls	r2, r2, #12
    4424:	0d0b      	lsrs	r3, r1, #20
    4426:	051b      	lsls	r3, r3, #20
    4428:	0564      	lsls	r4, r4, #21
    442a:	0b12      	lsrs	r2, r2, #12
    442c:	431a      	orrs	r2, r3
    442e:	0863      	lsrs	r3, r4, #1
    4430:	4cc0      	ldr	r4, [pc, #768]	; (4734 <__aeabi_dadd+0x3a4>)
    4432:	07f6      	lsls	r6, r6, #31
    4434:	4014      	ands	r4, r2
    4436:	431c      	orrs	r4, r3
    4438:	0064      	lsls	r4, r4, #1
    443a:	0864      	lsrs	r4, r4, #1
    443c:	4334      	orrs	r4, r6
    443e:	0028      	movs	r0, r5
    4440:	0021      	movs	r1, r4
    4442:	bc3c      	pop	{r2, r3, r4, r5}
    4444:	4690      	mov	r8, r2
    4446:	4699      	mov	r9, r3
    4448:	46a2      	mov	sl, r4
    444a:	46ab      	mov	fp, r5
    444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    444e:	4bb7      	ldr	r3, [pc, #732]	; (472c <__aeabi_dadd+0x39c>)
    4450:	429c      	cmp	r4, r3
    4452:	d0c6      	beq.n	43e2 <__aeabi_dadd+0x52>
    4454:	2380      	movs	r3, #128	; 0x80
    4456:	041b      	lsls	r3, r3, #16
    4458:	4318      	orrs	r0, r3
    445a:	2e38      	cmp	r6, #56	; 0x38
    445c:	dd00      	ble.n	4460 <__aeabi_dadd+0xd0>
    445e:	e0eb      	b.n	4638 <__aeabi_dadd+0x2a8>
    4460:	2e1f      	cmp	r6, #31
    4462:	dd00      	ble.n	4466 <__aeabi_dadd+0xd6>
    4464:	e11e      	b.n	46a4 <__aeabi_dadd+0x314>
    4466:	2320      	movs	r3, #32
    4468:	1b9b      	subs	r3, r3, r6
    446a:	469c      	mov	ip, r3
    446c:	0003      	movs	r3, r0
    446e:	4667      	mov	r7, ip
    4470:	40bb      	lsls	r3, r7
    4472:	4698      	mov	r8, r3
    4474:	0013      	movs	r3, r2
    4476:	4647      	mov	r7, r8
    4478:	40f3      	lsrs	r3, r6
    447a:	433b      	orrs	r3, r7
    447c:	4667      	mov	r7, ip
    447e:	40ba      	lsls	r2, r7
    4480:	1e57      	subs	r7, r2, #1
    4482:	41ba      	sbcs	r2, r7
    4484:	4313      	orrs	r3, r2
    4486:	0002      	movs	r2, r0
    4488:	40f2      	lsrs	r2, r6
    448a:	1aeb      	subs	r3, r5, r3
    448c:	429d      	cmp	r5, r3
    448e:	41b6      	sbcs	r6, r6
    4490:	001d      	movs	r5, r3
    4492:	1a8a      	subs	r2, r1, r2
    4494:	4276      	negs	r6, r6
    4496:	1b91      	subs	r1, r2, r6
    4498:	020b      	lsls	r3, r1, #8
    449a:	d531      	bpl.n	4500 <__aeabi_dadd+0x170>
    449c:	024a      	lsls	r2, r1, #9
    449e:	0a56      	lsrs	r6, r2, #9
    44a0:	2e00      	cmp	r6, #0
    44a2:	d100      	bne.n	44a6 <__aeabi_dadd+0x116>
    44a4:	e0b4      	b.n	4610 <__aeabi_dadd+0x280>
    44a6:	0030      	movs	r0, r6
    44a8:	f001 fecc 	bl	6244 <__clzsi2>
    44ac:	0003      	movs	r3, r0
    44ae:	3b08      	subs	r3, #8
    44b0:	2b1f      	cmp	r3, #31
    44b2:	dd00      	ble.n	44b6 <__aeabi_dadd+0x126>
    44b4:	e0b5      	b.n	4622 <__aeabi_dadd+0x292>
    44b6:	2220      	movs	r2, #32
    44b8:	0029      	movs	r1, r5
    44ba:	1ad2      	subs	r2, r2, r3
    44bc:	40d1      	lsrs	r1, r2
    44be:	409e      	lsls	r6, r3
    44c0:	000a      	movs	r2, r1
    44c2:	409d      	lsls	r5, r3
    44c4:	4332      	orrs	r2, r6
    44c6:	429c      	cmp	r4, r3
    44c8:	dd00      	ble.n	44cc <__aeabi_dadd+0x13c>
    44ca:	e0b1      	b.n	4630 <__aeabi_dadd+0x2a0>
    44cc:	1b1c      	subs	r4, r3, r4
    44ce:	1c63      	adds	r3, r4, #1
    44d0:	2b1f      	cmp	r3, #31
    44d2:	dd00      	ble.n	44d6 <__aeabi_dadd+0x146>
    44d4:	e0d5      	b.n	4682 <__aeabi_dadd+0x2f2>
    44d6:	2120      	movs	r1, #32
    44d8:	0014      	movs	r4, r2
    44da:	0028      	movs	r0, r5
    44dc:	1ac9      	subs	r1, r1, r3
    44de:	408c      	lsls	r4, r1
    44e0:	40d8      	lsrs	r0, r3
    44e2:	408d      	lsls	r5, r1
    44e4:	4304      	orrs	r4, r0
    44e6:	40da      	lsrs	r2, r3
    44e8:	1e68      	subs	r0, r5, #1
    44ea:	4185      	sbcs	r5, r0
    44ec:	0011      	movs	r1, r2
    44ee:	4325      	orrs	r5, r4
    44f0:	2400      	movs	r4, #0
    44f2:	e776      	b.n	43e2 <__aeabi_dadd+0x52>
    44f4:	4641      	mov	r1, r8
    44f6:	4331      	orrs	r1, r6
    44f8:	d100      	bne.n	44fc <__aeabi_dadd+0x16c>
    44fa:	e234      	b.n	4966 <__aeabi_dadd+0x5d6>
    44fc:	0031      	movs	r1, r6
    44fe:	4645      	mov	r5, r8
    4500:	076b      	lsls	r3, r5, #29
    4502:	d000      	beq.n	4506 <__aeabi_dadd+0x176>
    4504:	e76f      	b.n	43e6 <__aeabi_dadd+0x56>
    4506:	4656      	mov	r6, sl
    4508:	0748      	lsls	r0, r1, #29
    450a:	08ed      	lsrs	r5, r5, #3
    450c:	08c9      	lsrs	r1, r1, #3
    450e:	4305      	orrs	r5, r0
    4510:	4b86      	ldr	r3, [pc, #536]	; (472c <__aeabi_dadd+0x39c>)
    4512:	429c      	cmp	r4, r3
    4514:	d035      	beq.n	4582 <__aeabi_dadd+0x1f2>
    4516:	030a      	lsls	r2, r1, #12
    4518:	0564      	lsls	r4, r4, #21
    451a:	0b12      	lsrs	r2, r2, #12
    451c:	0d64      	lsrs	r4, r4, #21
    451e:	e77f      	b.n	4420 <__aeabi_dadd+0x90>
    4520:	4663      	mov	r3, ip
    4522:	1ae3      	subs	r3, r4, r3
    4524:	469b      	mov	fp, r3
    4526:	2b00      	cmp	r3, #0
    4528:	dc00      	bgt.n	452c <__aeabi_dadd+0x19c>
    452a:	e08b      	b.n	4644 <__aeabi_dadd+0x2b4>
    452c:	4667      	mov	r7, ip
    452e:	2f00      	cmp	r7, #0
    4530:	d03c      	beq.n	45ac <__aeabi_dadd+0x21c>
    4532:	4f7e      	ldr	r7, [pc, #504]	; (472c <__aeabi_dadd+0x39c>)
    4534:	42bc      	cmp	r4, r7
    4536:	d100      	bne.n	453a <__aeabi_dadd+0x1aa>
    4538:	e753      	b.n	43e2 <__aeabi_dadd+0x52>
    453a:	2780      	movs	r7, #128	; 0x80
    453c:	043f      	lsls	r7, r7, #16
    453e:	4338      	orrs	r0, r7
    4540:	465b      	mov	r3, fp
    4542:	2b38      	cmp	r3, #56	; 0x38
    4544:	dc00      	bgt.n	4548 <__aeabi_dadd+0x1b8>
    4546:	e0f7      	b.n	4738 <__aeabi_dadd+0x3a8>
    4548:	4302      	orrs	r2, r0
    454a:	1e50      	subs	r0, r2, #1
    454c:	4182      	sbcs	r2, r0
    454e:	2000      	movs	r0, #0
    4550:	b2d2      	uxtb	r2, r2
    4552:	1953      	adds	r3, r2, r5
    4554:	1842      	adds	r2, r0, r1
    4556:	42ab      	cmp	r3, r5
    4558:	4189      	sbcs	r1, r1
    455a:	001d      	movs	r5, r3
    455c:	4249      	negs	r1, r1
    455e:	1889      	adds	r1, r1, r2
    4560:	020b      	lsls	r3, r1, #8
    4562:	d5cd      	bpl.n	4500 <__aeabi_dadd+0x170>
    4564:	4b71      	ldr	r3, [pc, #452]	; (472c <__aeabi_dadd+0x39c>)
    4566:	3401      	adds	r4, #1
    4568:	429c      	cmp	r4, r3
    456a:	d100      	bne.n	456e <__aeabi_dadd+0x1de>
    456c:	e13d      	b.n	47ea <__aeabi_dadd+0x45a>
    456e:	2001      	movs	r0, #1
    4570:	4a6f      	ldr	r2, [pc, #444]	; (4730 <__aeabi_dadd+0x3a0>)
    4572:	086b      	lsrs	r3, r5, #1
    4574:	400a      	ands	r2, r1
    4576:	4028      	ands	r0, r5
    4578:	4318      	orrs	r0, r3
    457a:	07d5      	lsls	r5, r2, #31
    457c:	4305      	orrs	r5, r0
    457e:	0851      	lsrs	r1, r2, #1
    4580:	e72f      	b.n	43e2 <__aeabi_dadd+0x52>
    4582:	002b      	movs	r3, r5
    4584:	430b      	orrs	r3, r1
    4586:	d100      	bne.n	458a <__aeabi_dadd+0x1fa>
    4588:	e1cb      	b.n	4922 <__aeabi_dadd+0x592>
    458a:	2380      	movs	r3, #128	; 0x80
    458c:	031b      	lsls	r3, r3, #12
    458e:	430b      	orrs	r3, r1
    4590:	031a      	lsls	r2, r3, #12
    4592:	0b12      	lsrs	r2, r2, #12
    4594:	e744      	b.n	4420 <__aeabi_dadd+0x90>
    4596:	3e01      	subs	r6, #1
    4598:	2e00      	cmp	r6, #0
    459a:	d16d      	bne.n	4678 <__aeabi_dadd+0x2e8>
    459c:	1aae      	subs	r6, r5, r2
    459e:	42b5      	cmp	r5, r6
    45a0:	419b      	sbcs	r3, r3
    45a2:	1a09      	subs	r1, r1, r0
    45a4:	425b      	negs	r3, r3
    45a6:	1ac9      	subs	r1, r1, r3
    45a8:	0035      	movs	r5, r6
    45aa:	e775      	b.n	4498 <__aeabi_dadd+0x108>
    45ac:	0007      	movs	r7, r0
    45ae:	4317      	orrs	r7, r2
    45b0:	d100      	bne.n	45b4 <__aeabi_dadd+0x224>
    45b2:	e716      	b.n	43e2 <__aeabi_dadd+0x52>
    45b4:	2301      	movs	r3, #1
    45b6:	425b      	negs	r3, r3
    45b8:	469c      	mov	ip, r3
    45ba:	44e3      	add	fp, ip
    45bc:	465b      	mov	r3, fp
    45be:	2b00      	cmp	r3, #0
    45c0:	d000      	beq.n	45c4 <__aeabi_dadd+0x234>
    45c2:	e0e0      	b.n	4786 <__aeabi_dadd+0x3f6>
    45c4:	18aa      	adds	r2, r5, r2
    45c6:	42aa      	cmp	r2, r5
    45c8:	419b      	sbcs	r3, r3
    45ca:	1809      	adds	r1, r1, r0
    45cc:	425b      	negs	r3, r3
    45ce:	1859      	adds	r1, r3, r1
    45d0:	0015      	movs	r5, r2
    45d2:	e7c5      	b.n	4560 <__aeabi_dadd+0x1d0>
    45d4:	2e00      	cmp	r6, #0
    45d6:	d175      	bne.n	46c4 <__aeabi_dadd+0x334>
    45d8:	1c66      	adds	r6, r4, #1
    45da:	0576      	lsls	r6, r6, #21
    45dc:	0d76      	lsrs	r6, r6, #21
    45de:	2e01      	cmp	r6, #1
    45e0:	dc00      	bgt.n	45e4 <__aeabi_dadd+0x254>
    45e2:	e0f3      	b.n	47cc <__aeabi_dadd+0x43c>
    45e4:	1aae      	subs	r6, r5, r2
    45e6:	46b0      	mov	r8, r6
    45e8:	4545      	cmp	r5, r8
    45ea:	41bf      	sbcs	r7, r7
    45ec:	1a0e      	subs	r6, r1, r0
    45ee:	427f      	negs	r7, r7
    45f0:	1bf6      	subs	r6, r6, r7
    45f2:	0237      	lsls	r7, r6, #8
    45f4:	d400      	bmi.n	45f8 <__aeabi_dadd+0x268>
    45f6:	e08f      	b.n	4718 <__aeabi_dadd+0x388>
    45f8:	1b55      	subs	r5, r2, r5
    45fa:	42aa      	cmp	r2, r5
    45fc:	41b6      	sbcs	r6, r6
    45fe:	1a41      	subs	r1, r0, r1
    4600:	4276      	negs	r6, r6
    4602:	1b8e      	subs	r6, r1, r6
    4604:	469a      	mov	sl, r3
    4606:	e74b      	b.n	44a0 <__aeabi_dadd+0x110>
    4608:	4656      	mov	r6, sl
    460a:	2200      	movs	r2, #0
    460c:	2500      	movs	r5, #0
    460e:	e707      	b.n	4420 <__aeabi_dadd+0x90>
    4610:	0028      	movs	r0, r5
    4612:	f001 fe17 	bl	6244 <__clzsi2>
    4616:	3020      	adds	r0, #32
    4618:	0003      	movs	r3, r0
    461a:	3b08      	subs	r3, #8
    461c:	2b1f      	cmp	r3, #31
    461e:	dc00      	bgt.n	4622 <__aeabi_dadd+0x292>
    4620:	e749      	b.n	44b6 <__aeabi_dadd+0x126>
    4622:	002a      	movs	r2, r5
    4624:	3828      	subs	r0, #40	; 0x28
    4626:	4082      	lsls	r2, r0
    4628:	2500      	movs	r5, #0
    462a:	429c      	cmp	r4, r3
    462c:	dc00      	bgt.n	4630 <__aeabi_dadd+0x2a0>
    462e:	e74d      	b.n	44cc <__aeabi_dadd+0x13c>
    4630:	493f      	ldr	r1, [pc, #252]	; (4730 <__aeabi_dadd+0x3a0>)
    4632:	1ae4      	subs	r4, r4, r3
    4634:	4011      	ands	r1, r2
    4636:	e6d4      	b.n	43e2 <__aeabi_dadd+0x52>
    4638:	4302      	orrs	r2, r0
    463a:	1e50      	subs	r0, r2, #1
    463c:	4182      	sbcs	r2, r0
    463e:	b2d3      	uxtb	r3, r2
    4640:	2200      	movs	r2, #0
    4642:	e722      	b.n	448a <__aeabi_dadd+0xfa>
    4644:	2b00      	cmp	r3, #0
    4646:	d000      	beq.n	464a <__aeabi_dadd+0x2ba>
    4648:	e0f3      	b.n	4832 <__aeabi_dadd+0x4a2>
    464a:	1c63      	adds	r3, r4, #1
    464c:	469c      	mov	ip, r3
    464e:	055b      	lsls	r3, r3, #21
    4650:	0d5b      	lsrs	r3, r3, #21
    4652:	2b01      	cmp	r3, #1
    4654:	dc00      	bgt.n	4658 <__aeabi_dadd+0x2c8>
    4656:	e09f      	b.n	4798 <__aeabi_dadd+0x408>
    4658:	4b34      	ldr	r3, [pc, #208]	; (472c <__aeabi_dadd+0x39c>)
    465a:	459c      	cmp	ip, r3
    465c:	d100      	bne.n	4660 <__aeabi_dadd+0x2d0>
    465e:	e0c3      	b.n	47e8 <__aeabi_dadd+0x458>
    4660:	18aa      	adds	r2, r5, r2
    4662:	1809      	adds	r1, r1, r0
    4664:	42aa      	cmp	r2, r5
    4666:	4180      	sbcs	r0, r0
    4668:	4240      	negs	r0, r0
    466a:	1841      	adds	r1, r0, r1
    466c:	07cd      	lsls	r5, r1, #31
    466e:	0852      	lsrs	r2, r2, #1
    4670:	4315      	orrs	r5, r2
    4672:	0849      	lsrs	r1, r1, #1
    4674:	4664      	mov	r4, ip
    4676:	e6b4      	b.n	43e2 <__aeabi_dadd+0x52>
    4678:	4b2c      	ldr	r3, [pc, #176]	; (472c <__aeabi_dadd+0x39c>)
    467a:	429c      	cmp	r4, r3
    467c:	d000      	beq.n	4680 <__aeabi_dadd+0x2f0>
    467e:	e6ec      	b.n	445a <__aeabi_dadd+0xca>
    4680:	e6af      	b.n	43e2 <__aeabi_dadd+0x52>
    4682:	0011      	movs	r1, r2
    4684:	3c1f      	subs	r4, #31
    4686:	40e1      	lsrs	r1, r4
    4688:	000c      	movs	r4, r1
    468a:	2b20      	cmp	r3, #32
    468c:	d100      	bne.n	4690 <__aeabi_dadd+0x300>
    468e:	e07f      	b.n	4790 <__aeabi_dadd+0x400>
    4690:	2140      	movs	r1, #64	; 0x40
    4692:	1acb      	subs	r3, r1, r3
    4694:	409a      	lsls	r2, r3
    4696:	4315      	orrs	r5, r2
    4698:	1e6a      	subs	r2, r5, #1
    469a:	4195      	sbcs	r5, r2
    469c:	2100      	movs	r1, #0
    469e:	4325      	orrs	r5, r4
    46a0:	2400      	movs	r4, #0
    46a2:	e72d      	b.n	4500 <__aeabi_dadd+0x170>
    46a4:	0033      	movs	r3, r6
    46a6:	0007      	movs	r7, r0
    46a8:	3b20      	subs	r3, #32
    46aa:	40df      	lsrs	r7, r3
    46ac:	003b      	movs	r3, r7
    46ae:	2e20      	cmp	r6, #32
    46b0:	d070      	beq.n	4794 <__aeabi_dadd+0x404>
    46b2:	2740      	movs	r7, #64	; 0x40
    46b4:	1bbe      	subs	r6, r7, r6
    46b6:	40b0      	lsls	r0, r6
    46b8:	4302      	orrs	r2, r0
    46ba:	1e50      	subs	r0, r2, #1
    46bc:	4182      	sbcs	r2, r0
    46be:	4313      	orrs	r3, r2
    46c0:	2200      	movs	r2, #0
    46c2:	e6e2      	b.n	448a <__aeabi_dadd+0xfa>
    46c4:	2c00      	cmp	r4, #0
    46c6:	d04f      	beq.n	4768 <__aeabi_dadd+0x3d8>
    46c8:	4c18      	ldr	r4, [pc, #96]	; (472c <__aeabi_dadd+0x39c>)
    46ca:	45a4      	cmp	ip, r4
    46cc:	d100      	bne.n	46d0 <__aeabi_dadd+0x340>
    46ce:	e0ab      	b.n	4828 <__aeabi_dadd+0x498>
    46d0:	2480      	movs	r4, #128	; 0x80
    46d2:	0424      	lsls	r4, r4, #16
    46d4:	4276      	negs	r6, r6
    46d6:	4321      	orrs	r1, r4
    46d8:	2e38      	cmp	r6, #56	; 0x38
    46da:	dd00      	ble.n	46de <__aeabi_dadd+0x34e>
    46dc:	e0df      	b.n	489e <__aeabi_dadd+0x50e>
    46de:	2e1f      	cmp	r6, #31
    46e0:	dd00      	ble.n	46e4 <__aeabi_dadd+0x354>
    46e2:	e143      	b.n	496c <__aeabi_dadd+0x5dc>
    46e4:	2720      	movs	r7, #32
    46e6:	1bbc      	subs	r4, r7, r6
    46e8:	46a1      	mov	r9, r4
    46ea:	000c      	movs	r4, r1
    46ec:	464f      	mov	r7, r9
    46ee:	40bc      	lsls	r4, r7
    46f0:	46a0      	mov	r8, r4
    46f2:	002c      	movs	r4, r5
    46f4:	4647      	mov	r7, r8
    46f6:	40f4      	lsrs	r4, r6
    46f8:	433c      	orrs	r4, r7
    46fa:	464f      	mov	r7, r9
    46fc:	40bd      	lsls	r5, r7
    46fe:	1e6f      	subs	r7, r5, #1
    4700:	41bd      	sbcs	r5, r7
    4702:	40f1      	lsrs	r1, r6
    4704:	432c      	orrs	r4, r5
    4706:	1b15      	subs	r5, r2, r4
    4708:	42aa      	cmp	r2, r5
    470a:	4192      	sbcs	r2, r2
    470c:	1a41      	subs	r1, r0, r1
    470e:	4252      	negs	r2, r2
    4710:	1a89      	subs	r1, r1, r2
    4712:	4664      	mov	r4, ip
    4714:	469a      	mov	sl, r3
    4716:	e6bf      	b.n	4498 <__aeabi_dadd+0x108>
    4718:	4641      	mov	r1, r8
    471a:	4645      	mov	r5, r8
    471c:	4331      	orrs	r1, r6
    471e:	d000      	beq.n	4722 <__aeabi_dadd+0x392>
    4720:	e6be      	b.n	44a0 <__aeabi_dadd+0x110>
    4722:	2600      	movs	r6, #0
    4724:	2400      	movs	r4, #0
    4726:	2500      	movs	r5, #0
    4728:	e6f2      	b.n	4510 <__aeabi_dadd+0x180>
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	000007ff 	.word	0x000007ff
    4730:	ff7fffff 	.word	0xff7fffff
    4734:	800fffff 	.word	0x800fffff
    4738:	2b1f      	cmp	r3, #31
    473a:	dc59      	bgt.n	47f0 <__aeabi_dadd+0x460>
    473c:	2720      	movs	r7, #32
    473e:	1aff      	subs	r7, r7, r3
    4740:	46bc      	mov	ip, r7
    4742:	0007      	movs	r7, r0
    4744:	4663      	mov	r3, ip
    4746:	409f      	lsls	r7, r3
    4748:	465b      	mov	r3, fp
    474a:	46b9      	mov	r9, r7
    474c:	0017      	movs	r7, r2
    474e:	40df      	lsrs	r7, r3
    4750:	46b8      	mov	r8, r7
    4752:	464f      	mov	r7, r9
    4754:	4643      	mov	r3, r8
    4756:	431f      	orrs	r7, r3
    4758:	4663      	mov	r3, ip
    475a:	409a      	lsls	r2, r3
    475c:	1e53      	subs	r3, r2, #1
    475e:	419a      	sbcs	r2, r3
    4760:	465b      	mov	r3, fp
    4762:	433a      	orrs	r2, r7
    4764:	40d8      	lsrs	r0, r3
    4766:	e6f4      	b.n	4552 <__aeabi_dadd+0x1c2>
    4768:	000c      	movs	r4, r1
    476a:	432c      	orrs	r4, r5
    476c:	d05c      	beq.n	4828 <__aeabi_dadd+0x498>
    476e:	43f6      	mvns	r6, r6
    4770:	2e00      	cmp	r6, #0
    4772:	d155      	bne.n	4820 <__aeabi_dadd+0x490>
    4774:	1b55      	subs	r5, r2, r5
    4776:	42aa      	cmp	r2, r5
    4778:	41a4      	sbcs	r4, r4
    477a:	1a41      	subs	r1, r0, r1
    477c:	4264      	negs	r4, r4
    477e:	1b09      	subs	r1, r1, r4
    4780:	469a      	mov	sl, r3
    4782:	4664      	mov	r4, ip
    4784:	e688      	b.n	4498 <__aeabi_dadd+0x108>
    4786:	4f96      	ldr	r7, [pc, #600]	; (49e0 <__aeabi_dadd+0x650>)
    4788:	42bc      	cmp	r4, r7
    478a:	d000      	beq.n	478e <__aeabi_dadd+0x3fe>
    478c:	e6d8      	b.n	4540 <__aeabi_dadd+0x1b0>
    478e:	e628      	b.n	43e2 <__aeabi_dadd+0x52>
    4790:	2200      	movs	r2, #0
    4792:	e780      	b.n	4696 <__aeabi_dadd+0x306>
    4794:	2000      	movs	r0, #0
    4796:	e78f      	b.n	46b8 <__aeabi_dadd+0x328>
    4798:	000b      	movs	r3, r1
    479a:	432b      	orrs	r3, r5
    479c:	2c00      	cmp	r4, #0
    479e:	d000      	beq.n	47a2 <__aeabi_dadd+0x412>
    47a0:	e0c2      	b.n	4928 <__aeabi_dadd+0x598>
    47a2:	2b00      	cmp	r3, #0
    47a4:	d100      	bne.n	47a8 <__aeabi_dadd+0x418>
    47a6:	e101      	b.n	49ac <__aeabi_dadd+0x61c>
    47a8:	0003      	movs	r3, r0
    47aa:	4313      	orrs	r3, r2
    47ac:	d100      	bne.n	47b0 <__aeabi_dadd+0x420>
    47ae:	e618      	b.n	43e2 <__aeabi_dadd+0x52>
    47b0:	18ab      	adds	r3, r5, r2
    47b2:	42ab      	cmp	r3, r5
    47b4:	41b6      	sbcs	r6, r6
    47b6:	1809      	adds	r1, r1, r0
    47b8:	4276      	negs	r6, r6
    47ba:	1871      	adds	r1, r6, r1
    47bc:	020a      	lsls	r2, r1, #8
    47be:	d400      	bmi.n	47c2 <__aeabi_dadd+0x432>
    47c0:	e109      	b.n	49d6 <__aeabi_dadd+0x646>
    47c2:	4a88      	ldr	r2, [pc, #544]	; (49e4 <__aeabi_dadd+0x654>)
    47c4:	001d      	movs	r5, r3
    47c6:	4011      	ands	r1, r2
    47c8:	4664      	mov	r4, ip
    47ca:	e60a      	b.n	43e2 <__aeabi_dadd+0x52>
    47cc:	2c00      	cmp	r4, #0
    47ce:	d15b      	bne.n	4888 <__aeabi_dadd+0x4f8>
    47d0:	000e      	movs	r6, r1
    47d2:	432e      	orrs	r6, r5
    47d4:	d000      	beq.n	47d8 <__aeabi_dadd+0x448>
    47d6:	e08a      	b.n	48ee <__aeabi_dadd+0x55e>
    47d8:	0001      	movs	r1, r0
    47da:	4311      	orrs	r1, r2
    47dc:	d100      	bne.n	47e0 <__aeabi_dadd+0x450>
    47de:	e0c2      	b.n	4966 <__aeabi_dadd+0x5d6>
    47e0:	0001      	movs	r1, r0
    47e2:	0015      	movs	r5, r2
    47e4:	469a      	mov	sl, r3
    47e6:	e5fc      	b.n	43e2 <__aeabi_dadd+0x52>
    47e8:	4664      	mov	r4, ip
    47ea:	2100      	movs	r1, #0
    47ec:	2500      	movs	r5, #0
    47ee:	e68f      	b.n	4510 <__aeabi_dadd+0x180>
    47f0:	2320      	movs	r3, #32
    47f2:	425b      	negs	r3, r3
    47f4:	469c      	mov	ip, r3
    47f6:	44dc      	add	ip, fp
    47f8:	4663      	mov	r3, ip
    47fa:	0007      	movs	r7, r0
    47fc:	40df      	lsrs	r7, r3
    47fe:	465b      	mov	r3, fp
    4800:	46bc      	mov	ip, r7
    4802:	2b20      	cmp	r3, #32
    4804:	d100      	bne.n	4808 <__aeabi_dadd+0x478>
    4806:	e0ac      	b.n	4962 <__aeabi_dadd+0x5d2>
    4808:	2340      	movs	r3, #64	; 0x40
    480a:	465f      	mov	r7, fp
    480c:	1bdb      	subs	r3, r3, r7
    480e:	4098      	lsls	r0, r3
    4810:	4302      	orrs	r2, r0
    4812:	1e50      	subs	r0, r2, #1
    4814:	4182      	sbcs	r2, r0
    4816:	4663      	mov	r3, ip
    4818:	4313      	orrs	r3, r2
    481a:	001a      	movs	r2, r3
    481c:	2000      	movs	r0, #0
    481e:	e698      	b.n	4552 <__aeabi_dadd+0x1c2>
    4820:	4c6f      	ldr	r4, [pc, #444]	; (49e0 <__aeabi_dadd+0x650>)
    4822:	45a4      	cmp	ip, r4
    4824:	d000      	beq.n	4828 <__aeabi_dadd+0x498>
    4826:	e757      	b.n	46d8 <__aeabi_dadd+0x348>
    4828:	0001      	movs	r1, r0
    482a:	0015      	movs	r5, r2
    482c:	4664      	mov	r4, ip
    482e:	469a      	mov	sl, r3
    4830:	e5d7      	b.n	43e2 <__aeabi_dadd+0x52>
    4832:	2c00      	cmp	r4, #0
    4834:	d139      	bne.n	48aa <__aeabi_dadd+0x51a>
    4836:	000c      	movs	r4, r1
    4838:	432c      	orrs	r4, r5
    483a:	d06e      	beq.n	491a <__aeabi_dadd+0x58a>
    483c:	43db      	mvns	r3, r3
    483e:	2b00      	cmp	r3, #0
    4840:	d01a      	beq.n	4878 <__aeabi_dadd+0x4e8>
    4842:	4c67      	ldr	r4, [pc, #412]	; (49e0 <__aeabi_dadd+0x650>)
    4844:	45a4      	cmp	ip, r4
    4846:	d068      	beq.n	491a <__aeabi_dadd+0x58a>
    4848:	2b38      	cmp	r3, #56	; 0x38
    484a:	dd00      	ble.n	484e <__aeabi_dadd+0x4be>
    484c:	e0a4      	b.n	4998 <__aeabi_dadd+0x608>
    484e:	2b1f      	cmp	r3, #31
    4850:	dd00      	ble.n	4854 <__aeabi_dadd+0x4c4>
    4852:	e0ae      	b.n	49b2 <__aeabi_dadd+0x622>
    4854:	2420      	movs	r4, #32
    4856:	000f      	movs	r7, r1
    4858:	1ae4      	subs	r4, r4, r3
    485a:	40a7      	lsls	r7, r4
    485c:	46b9      	mov	r9, r7
    485e:	002f      	movs	r7, r5
    4860:	40df      	lsrs	r7, r3
    4862:	46b8      	mov	r8, r7
    4864:	46a3      	mov	fp, r4
    4866:	464f      	mov	r7, r9
    4868:	4644      	mov	r4, r8
    486a:	4327      	orrs	r7, r4
    486c:	465c      	mov	r4, fp
    486e:	40a5      	lsls	r5, r4
    4870:	1e6c      	subs	r4, r5, #1
    4872:	41a5      	sbcs	r5, r4
    4874:	40d9      	lsrs	r1, r3
    4876:	433d      	orrs	r5, r7
    4878:	18ad      	adds	r5, r5, r2
    487a:	4295      	cmp	r5, r2
    487c:	419b      	sbcs	r3, r3
    487e:	1809      	adds	r1, r1, r0
    4880:	425b      	negs	r3, r3
    4882:	1859      	adds	r1, r3, r1
    4884:	4664      	mov	r4, ip
    4886:	e66b      	b.n	4560 <__aeabi_dadd+0x1d0>
    4888:	000c      	movs	r4, r1
    488a:	432c      	orrs	r4, r5
    488c:	d115      	bne.n	48ba <__aeabi_dadd+0x52a>
    488e:	0001      	movs	r1, r0
    4890:	4311      	orrs	r1, r2
    4892:	d07b      	beq.n	498c <__aeabi_dadd+0x5fc>
    4894:	0001      	movs	r1, r0
    4896:	0015      	movs	r5, r2
    4898:	469a      	mov	sl, r3
    489a:	4c51      	ldr	r4, [pc, #324]	; (49e0 <__aeabi_dadd+0x650>)
    489c:	e5a1      	b.n	43e2 <__aeabi_dadd+0x52>
    489e:	430d      	orrs	r5, r1
    48a0:	1e69      	subs	r1, r5, #1
    48a2:	418d      	sbcs	r5, r1
    48a4:	2100      	movs	r1, #0
    48a6:	b2ec      	uxtb	r4, r5
    48a8:	e72d      	b.n	4706 <__aeabi_dadd+0x376>
    48aa:	4c4d      	ldr	r4, [pc, #308]	; (49e0 <__aeabi_dadd+0x650>)
    48ac:	45a4      	cmp	ip, r4
    48ae:	d034      	beq.n	491a <__aeabi_dadd+0x58a>
    48b0:	2480      	movs	r4, #128	; 0x80
    48b2:	0424      	lsls	r4, r4, #16
    48b4:	425b      	negs	r3, r3
    48b6:	4321      	orrs	r1, r4
    48b8:	e7c6      	b.n	4848 <__aeabi_dadd+0x4b8>
    48ba:	0004      	movs	r4, r0
    48bc:	4314      	orrs	r4, r2
    48be:	d04e      	beq.n	495e <__aeabi_dadd+0x5ce>
    48c0:	08ed      	lsrs	r5, r5, #3
    48c2:	074c      	lsls	r4, r1, #29
    48c4:	432c      	orrs	r4, r5
    48c6:	2580      	movs	r5, #128	; 0x80
    48c8:	08c9      	lsrs	r1, r1, #3
    48ca:	032d      	lsls	r5, r5, #12
    48cc:	4229      	tst	r1, r5
    48ce:	d008      	beq.n	48e2 <__aeabi_dadd+0x552>
    48d0:	08c6      	lsrs	r6, r0, #3
    48d2:	422e      	tst	r6, r5
    48d4:	d105      	bne.n	48e2 <__aeabi_dadd+0x552>
    48d6:	08d2      	lsrs	r2, r2, #3
    48d8:	0741      	lsls	r1, r0, #29
    48da:	4311      	orrs	r1, r2
    48dc:	000c      	movs	r4, r1
    48de:	469a      	mov	sl, r3
    48e0:	0031      	movs	r1, r6
    48e2:	0f62      	lsrs	r2, r4, #29
    48e4:	00c9      	lsls	r1, r1, #3
    48e6:	00e5      	lsls	r5, r4, #3
    48e8:	4311      	orrs	r1, r2
    48ea:	4c3d      	ldr	r4, [pc, #244]	; (49e0 <__aeabi_dadd+0x650>)
    48ec:	e579      	b.n	43e2 <__aeabi_dadd+0x52>
    48ee:	0006      	movs	r6, r0
    48f0:	4316      	orrs	r6, r2
    48f2:	d100      	bne.n	48f6 <__aeabi_dadd+0x566>
    48f4:	e575      	b.n	43e2 <__aeabi_dadd+0x52>
    48f6:	1aae      	subs	r6, r5, r2
    48f8:	46b0      	mov	r8, r6
    48fa:	4545      	cmp	r5, r8
    48fc:	41bf      	sbcs	r7, r7
    48fe:	1a0e      	subs	r6, r1, r0
    4900:	427f      	negs	r7, r7
    4902:	1bf6      	subs	r6, r6, r7
    4904:	0237      	lsls	r7, r6, #8
    4906:	d400      	bmi.n	490a <__aeabi_dadd+0x57a>
    4908:	e5f4      	b.n	44f4 <__aeabi_dadd+0x164>
    490a:	1b55      	subs	r5, r2, r5
    490c:	42aa      	cmp	r2, r5
    490e:	41b6      	sbcs	r6, r6
    4910:	1a41      	subs	r1, r0, r1
    4912:	4276      	negs	r6, r6
    4914:	1b89      	subs	r1, r1, r6
    4916:	469a      	mov	sl, r3
    4918:	e563      	b.n	43e2 <__aeabi_dadd+0x52>
    491a:	0001      	movs	r1, r0
    491c:	0015      	movs	r5, r2
    491e:	4664      	mov	r4, ip
    4920:	e55f      	b.n	43e2 <__aeabi_dadd+0x52>
    4922:	2200      	movs	r2, #0
    4924:	2500      	movs	r5, #0
    4926:	e57b      	b.n	4420 <__aeabi_dadd+0x90>
    4928:	2b00      	cmp	r3, #0
    492a:	d03b      	beq.n	49a4 <__aeabi_dadd+0x614>
    492c:	0003      	movs	r3, r0
    492e:	4313      	orrs	r3, r2
    4930:	d015      	beq.n	495e <__aeabi_dadd+0x5ce>
    4932:	08ed      	lsrs	r5, r5, #3
    4934:	074b      	lsls	r3, r1, #29
    4936:	432b      	orrs	r3, r5
    4938:	2580      	movs	r5, #128	; 0x80
    493a:	08c9      	lsrs	r1, r1, #3
    493c:	032d      	lsls	r5, r5, #12
    493e:	4229      	tst	r1, r5
    4940:	d007      	beq.n	4952 <__aeabi_dadd+0x5c2>
    4942:	08c4      	lsrs	r4, r0, #3
    4944:	422c      	tst	r4, r5
    4946:	d104      	bne.n	4952 <__aeabi_dadd+0x5c2>
    4948:	0741      	lsls	r1, r0, #29
    494a:	000b      	movs	r3, r1
    494c:	0021      	movs	r1, r4
    494e:	08d2      	lsrs	r2, r2, #3
    4950:	4313      	orrs	r3, r2
    4952:	00c9      	lsls	r1, r1, #3
    4954:	0f5a      	lsrs	r2, r3, #29
    4956:	4311      	orrs	r1, r2
    4958:	00dd      	lsls	r5, r3, #3
    495a:	4c21      	ldr	r4, [pc, #132]	; (49e0 <__aeabi_dadd+0x650>)
    495c:	e541      	b.n	43e2 <__aeabi_dadd+0x52>
    495e:	4c20      	ldr	r4, [pc, #128]	; (49e0 <__aeabi_dadd+0x650>)
    4960:	e53f      	b.n	43e2 <__aeabi_dadd+0x52>
    4962:	2000      	movs	r0, #0
    4964:	e754      	b.n	4810 <__aeabi_dadd+0x480>
    4966:	2600      	movs	r6, #0
    4968:	2500      	movs	r5, #0
    496a:	e5d1      	b.n	4510 <__aeabi_dadd+0x180>
    496c:	0034      	movs	r4, r6
    496e:	000f      	movs	r7, r1
    4970:	3c20      	subs	r4, #32
    4972:	40e7      	lsrs	r7, r4
    4974:	003c      	movs	r4, r7
    4976:	2e20      	cmp	r6, #32
    4978:	d02b      	beq.n	49d2 <__aeabi_dadd+0x642>
    497a:	2740      	movs	r7, #64	; 0x40
    497c:	1bbe      	subs	r6, r7, r6
    497e:	40b1      	lsls	r1, r6
    4980:	430d      	orrs	r5, r1
    4982:	1e69      	subs	r1, r5, #1
    4984:	418d      	sbcs	r5, r1
    4986:	2100      	movs	r1, #0
    4988:	432c      	orrs	r4, r5
    498a:	e6bc      	b.n	4706 <__aeabi_dadd+0x376>
    498c:	2180      	movs	r1, #128	; 0x80
    498e:	2600      	movs	r6, #0
    4990:	0309      	lsls	r1, r1, #12
    4992:	4c13      	ldr	r4, [pc, #76]	; (49e0 <__aeabi_dadd+0x650>)
    4994:	2500      	movs	r5, #0
    4996:	e5bb      	b.n	4510 <__aeabi_dadd+0x180>
    4998:	430d      	orrs	r5, r1
    499a:	1e69      	subs	r1, r5, #1
    499c:	418d      	sbcs	r5, r1
    499e:	2100      	movs	r1, #0
    49a0:	b2ed      	uxtb	r5, r5
    49a2:	e769      	b.n	4878 <__aeabi_dadd+0x4e8>
    49a4:	0001      	movs	r1, r0
    49a6:	0015      	movs	r5, r2
    49a8:	4c0d      	ldr	r4, [pc, #52]	; (49e0 <__aeabi_dadd+0x650>)
    49aa:	e51a      	b.n	43e2 <__aeabi_dadd+0x52>
    49ac:	0001      	movs	r1, r0
    49ae:	0015      	movs	r5, r2
    49b0:	e517      	b.n	43e2 <__aeabi_dadd+0x52>
    49b2:	001c      	movs	r4, r3
    49b4:	000f      	movs	r7, r1
    49b6:	3c20      	subs	r4, #32
    49b8:	40e7      	lsrs	r7, r4
    49ba:	003c      	movs	r4, r7
    49bc:	2b20      	cmp	r3, #32
    49be:	d00c      	beq.n	49da <__aeabi_dadd+0x64a>
    49c0:	2740      	movs	r7, #64	; 0x40
    49c2:	1afb      	subs	r3, r7, r3
    49c4:	4099      	lsls	r1, r3
    49c6:	430d      	orrs	r5, r1
    49c8:	1e69      	subs	r1, r5, #1
    49ca:	418d      	sbcs	r5, r1
    49cc:	2100      	movs	r1, #0
    49ce:	4325      	orrs	r5, r4
    49d0:	e752      	b.n	4878 <__aeabi_dadd+0x4e8>
    49d2:	2100      	movs	r1, #0
    49d4:	e7d4      	b.n	4980 <__aeabi_dadd+0x5f0>
    49d6:	001d      	movs	r5, r3
    49d8:	e592      	b.n	4500 <__aeabi_dadd+0x170>
    49da:	2100      	movs	r1, #0
    49dc:	e7f3      	b.n	49c6 <__aeabi_dadd+0x636>
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	000007ff 	.word	0x000007ff
    49e4:	ff7fffff 	.word	0xff7fffff

000049e8 <__aeabi_ddiv>:
    49e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ea:	4656      	mov	r6, sl
    49ec:	464d      	mov	r5, r9
    49ee:	4644      	mov	r4, r8
    49f0:	465f      	mov	r7, fp
    49f2:	b4f0      	push	{r4, r5, r6, r7}
    49f4:	001d      	movs	r5, r3
    49f6:	030e      	lsls	r6, r1, #12
    49f8:	004c      	lsls	r4, r1, #1
    49fa:	0fcb      	lsrs	r3, r1, #31
    49fc:	b087      	sub	sp, #28
    49fe:	0007      	movs	r7, r0
    4a00:	4692      	mov	sl, r2
    4a02:	4681      	mov	r9, r0
    4a04:	0b36      	lsrs	r6, r6, #12
    4a06:	0d64      	lsrs	r4, r4, #21
    4a08:	4698      	mov	r8, r3
    4a0a:	d06a      	beq.n	4ae2 <__aeabi_ddiv+0xfa>
    4a0c:	4b6d      	ldr	r3, [pc, #436]	; (4bc4 <__aeabi_ddiv+0x1dc>)
    4a0e:	429c      	cmp	r4, r3
    4a10:	d035      	beq.n	4a7e <__aeabi_ddiv+0x96>
    4a12:	2280      	movs	r2, #128	; 0x80
    4a14:	0f43      	lsrs	r3, r0, #29
    4a16:	0412      	lsls	r2, r2, #16
    4a18:	4313      	orrs	r3, r2
    4a1a:	00f6      	lsls	r6, r6, #3
    4a1c:	431e      	orrs	r6, r3
    4a1e:	00c3      	lsls	r3, r0, #3
    4a20:	4699      	mov	r9, r3
    4a22:	4b69      	ldr	r3, [pc, #420]	; (4bc8 <__aeabi_ddiv+0x1e0>)
    4a24:	2700      	movs	r7, #0
    4a26:	469c      	mov	ip, r3
    4a28:	2300      	movs	r3, #0
    4a2a:	4464      	add	r4, ip
    4a2c:	9302      	str	r3, [sp, #8]
    4a2e:	032b      	lsls	r3, r5, #12
    4a30:	0068      	lsls	r0, r5, #1
    4a32:	0b1b      	lsrs	r3, r3, #12
    4a34:	0fed      	lsrs	r5, r5, #31
    4a36:	4651      	mov	r1, sl
    4a38:	469b      	mov	fp, r3
    4a3a:	0d40      	lsrs	r0, r0, #21
    4a3c:	9500      	str	r5, [sp, #0]
    4a3e:	d100      	bne.n	4a42 <__aeabi_ddiv+0x5a>
    4a40:	e078      	b.n	4b34 <__aeabi_ddiv+0x14c>
    4a42:	4b60      	ldr	r3, [pc, #384]	; (4bc4 <__aeabi_ddiv+0x1dc>)
    4a44:	4298      	cmp	r0, r3
    4a46:	d06c      	beq.n	4b22 <__aeabi_ddiv+0x13a>
    4a48:	465b      	mov	r3, fp
    4a4a:	00da      	lsls	r2, r3, #3
    4a4c:	0f4b      	lsrs	r3, r1, #29
    4a4e:	2180      	movs	r1, #128	; 0x80
    4a50:	0409      	lsls	r1, r1, #16
    4a52:	430b      	orrs	r3, r1
    4a54:	4313      	orrs	r3, r2
    4a56:	469b      	mov	fp, r3
    4a58:	4653      	mov	r3, sl
    4a5a:	00d9      	lsls	r1, r3, #3
    4a5c:	4b5a      	ldr	r3, [pc, #360]	; (4bc8 <__aeabi_ddiv+0x1e0>)
    4a5e:	469c      	mov	ip, r3
    4a60:	2300      	movs	r3, #0
    4a62:	4460      	add	r0, ip
    4a64:	4642      	mov	r2, r8
    4a66:	1a20      	subs	r0, r4, r0
    4a68:	406a      	eors	r2, r5
    4a6a:	4692      	mov	sl, r2
    4a6c:	9001      	str	r0, [sp, #4]
    4a6e:	431f      	orrs	r7, r3
    4a70:	2f0f      	cmp	r7, #15
    4a72:	d900      	bls.n	4a76 <__aeabi_ddiv+0x8e>
    4a74:	e0b0      	b.n	4bd8 <__aeabi_ddiv+0x1f0>
    4a76:	4855      	ldr	r0, [pc, #340]	; (4bcc <__aeabi_ddiv+0x1e4>)
    4a78:	00bf      	lsls	r7, r7, #2
    4a7a:	59c0      	ldr	r0, [r0, r7]
    4a7c:	4687      	mov	pc, r0
    4a7e:	4337      	orrs	r7, r6
    4a80:	d000      	beq.n	4a84 <__aeabi_ddiv+0x9c>
    4a82:	e088      	b.n	4b96 <__aeabi_ddiv+0x1ae>
    4a84:	2300      	movs	r3, #0
    4a86:	4699      	mov	r9, r3
    4a88:	3302      	adds	r3, #2
    4a8a:	2708      	movs	r7, #8
    4a8c:	2600      	movs	r6, #0
    4a8e:	9302      	str	r3, [sp, #8]
    4a90:	e7cd      	b.n	4a2e <__aeabi_ddiv+0x46>
    4a92:	4643      	mov	r3, r8
    4a94:	46b3      	mov	fp, r6
    4a96:	4649      	mov	r1, r9
    4a98:	9300      	str	r3, [sp, #0]
    4a9a:	9b02      	ldr	r3, [sp, #8]
    4a9c:	9a00      	ldr	r2, [sp, #0]
    4a9e:	4692      	mov	sl, r2
    4aa0:	2b02      	cmp	r3, #2
    4aa2:	d000      	beq.n	4aa6 <__aeabi_ddiv+0xbe>
    4aa4:	e1bf      	b.n	4e26 <__aeabi_ddiv+0x43e>
    4aa6:	2100      	movs	r1, #0
    4aa8:	4653      	mov	r3, sl
    4aaa:	2201      	movs	r2, #1
    4aac:	2600      	movs	r6, #0
    4aae:	4689      	mov	r9, r1
    4ab0:	401a      	ands	r2, r3
    4ab2:	4b44      	ldr	r3, [pc, #272]	; (4bc4 <__aeabi_ddiv+0x1dc>)
    4ab4:	2100      	movs	r1, #0
    4ab6:	0336      	lsls	r6, r6, #12
    4ab8:	0d0c      	lsrs	r4, r1, #20
    4aba:	0524      	lsls	r4, r4, #20
    4abc:	0b36      	lsrs	r6, r6, #12
    4abe:	4326      	orrs	r6, r4
    4ac0:	4c43      	ldr	r4, [pc, #268]	; (4bd0 <__aeabi_ddiv+0x1e8>)
    4ac2:	051b      	lsls	r3, r3, #20
    4ac4:	4026      	ands	r6, r4
    4ac6:	431e      	orrs	r6, r3
    4ac8:	0076      	lsls	r6, r6, #1
    4aca:	07d2      	lsls	r2, r2, #31
    4acc:	0876      	lsrs	r6, r6, #1
    4ace:	4316      	orrs	r6, r2
    4ad0:	4648      	mov	r0, r9
    4ad2:	0031      	movs	r1, r6
    4ad4:	b007      	add	sp, #28
    4ad6:	bc3c      	pop	{r2, r3, r4, r5}
    4ad8:	4690      	mov	r8, r2
    4ada:	4699      	mov	r9, r3
    4adc:	46a2      	mov	sl, r4
    4ade:	46ab      	mov	fp, r5
    4ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ae2:	0033      	movs	r3, r6
    4ae4:	4303      	orrs	r3, r0
    4ae6:	d04f      	beq.n	4b88 <__aeabi_ddiv+0x1a0>
    4ae8:	2e00      	cmp	r6, #0
    4aea:	d100      	bne.n	4aee <__aeabi_ddiv+0x106>
    4aec:	e1bc      	b.n	4e68 <__aeabi_ddiv+0x480>
    4aee:	0030      	movs	r0, r6
    4af0:	f001 fba8 	bl	6244 <__clzsi2>
    4af4:	0003      	movs	r3, r0
    4af6:	3b0b      	subs	r3, #11
    4af8:	2b1c      	cmp	r3, #28
    4afa:	dd00      	ble.n	4afe <__aeabi_ddiv+0x116>
    4afc:	e1ad      	b.n	4e5a <__aeabi_ddiv+0x472>
    4afe:	221d      	movs	r2, #29
    4b00:	0001      	movs	r1, r0
    4b02:	1ad3      	subs	r3, r2, r3
    4b04:	3908      	subs	r1, #8
    4b06:	003a      	movs	r2, r7
    4b08:	408f      	lsls	r7, r1
    4b0a:	408e      	lsls	r6, r1
    4b0c:	40da      	lsrs	r2, r3
    4b0e:	46b9      	mov	r9, r7
    4b10:	4316      	orrs	r6, r2
    4b12:	4b30      	ldr	r3, [pc, #192]	; (4bd4 <__aeabi_ddiv+0x1ec>)
    4b14:	2700      	movs	r7, #0
    4b16:	469c      	mov	ip, r3
    4b18:	2300      	movs	r3, #0
    4b1a:	4460      	add	r0, ip
    4b1c:	4244      	negs	r4, r0
    4b1e:	9302      	str	r3, [sp, #8]
    4b20:	e785      	b.n	4a2e <__aeabi_ddiv+0x46>
    4b22:	4653      	mov	r3, sl
    4b24:	465a      	mov	r2, fp
    4b26:	4313      	orrs	r3, r2
    4b28:	d12c      	bne.n	4b84 <__aeabi_ddiv+0x19c>
    4b2a:	2300      	movs	r3, #0
    4b2c:	2100      	movs	r1, #0
    4b2e:	469b      	mov	fp, r3
    4b30:	3302      	adds	r3, #2
    4b32:	e797      	b.n	4a64 <__aeabi_ddiv+0x7c>
    4b34:	430b      	orrs	r3, r1
    4b36:	d020      	beq.n	4b7a <__aeabi_ddiv+0x192>
    4b38:	465b      	mov	r3, fp
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d100      	bne.n	4b40 <__aeabi_ddiv+0x158>
    4b3e:	e19e      	b.n	4e7e <__aeabi_ddiv+0x496>
    4b40:	4658      	mov	r0, fp
    4b42:	f001 fb7f 	bl	6244 <__clzsi2>
    4b46:	0003      	movs	r3, r0
    4b48:	3b0b      	subs	r3, #11
    4b4a:	2b1c      	cmp	r3, #28
    4b4c:	dd00      	ble.n	4b50 <__aeabi_ddiv+0x168>
    4b4e:	e18f      	b.n	4e70 <__aeabi_ddiv+0x488>
    4b50:	0002      	movs	r2, r0
    4b52:	4659      	mov	r1, fp
    4b54:	3a08      	subs	r2, #8
    4b56:	4091      	lsls	r1, r2
    4b58:	468b      	mov	fp, r1
    4b5a:	211d      	movs	r1, #29
    4b5c:	1acb      	subs	r3, r1, r3
    4b5e:	4651      	mov	r1, sl
    4b60:	40d9      	lsrs	r1, r3
    4b62:	000b      	movs	r3, r1
    4b64:	4659      	mov	r1, fp
    4b66:	430b      	orrs	r3, r1
    4b68:	4651      	mov	r1, sl
    4b6a:	469b      	mov	fp, r3
    4b6c:	4091      	lsls	r1, r2
    4b6e:	4b19      	ldr	r3, [pc, #100]	; (4bd4 <__aeabi_ddiv+0x1ec>)
    4b70:	469c      	mov	ip, r3
    4b72:	4460      	add	r0, ip
    4b74:	4240      	negs	r0, r0
    4b76:	2300      	movs	r3, #0
    4b78:	e774      	b.n	4a64 <__aeabi_ddiv+0x7c>
    4b7a:	2300      	movs	r3, #0
    4b7c:	2100      	movs	r1, #0
    4b7e:	469b      	mov	fp, r3
    4b80:	3301      	adds	r3, #1
    4b82:	e76f      	b.n	4a64 <__aeabi_ddiv+0x7c>
    4b84:	2303      	movs	r3, #3
    4b86:	e76d      	b.n	4a64 <__aeabi_ddiv+0x7c>
    4b88:	2300      	movs	r3, #0
    4b8a:	4699      	mov	r9, r3
    4b8c:	3301      	adds	r3, #1
    4b8e:	2704      	movs	r7, #4
    4b90:	2600      	movs	r6, #0
    4b92:	9302      	str	r3, [sp, #8]
    4b94:	e74b      	b.n	4a2e <__aeabi_ddiv+0x46>
    4b96:	2303      	movs	r3, #3
    4b98:	270c      	movs	r7, #12
    4b9a:	9302      	str	r3, [sp, #8]
    4b9c:	e747      	b.n	4a2e <__aeabi_ddiv+0x46>
    4b9e:	2201      	movs	r2, #1
    4ba0:	1ad5      	subs	r5, r2, r3
    4ba2:	2d38      	cmp	r5, #56	; 0x38
    4ba4:	dc00      	bgt.n	4ba8 <__aeabi_ddiv+0x1c0>
    4ba6:	e1b0      	b.n	4f0a <__aeabi_ddiv+0x522>
    4ba8:	4653      	mov	r3, sl
    4baa:	401a      	ands	r2, r3
    4bac:	2100      	movs	r1, #0
    4bae:	2300      	movs	r3, #0
    4bb0:	2600      	movs	r6, #0
    4bb2:	4689      	mov	r9, r1
    4bb4:	e77e      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4bb6:	2300      	movs	r3, #0
    4bb8:	2680      	movs	r6, #128	; 0x80
    4bba:	4699      	mov	r9, r3
    4bbc:	2200      	movs	r2, #0
    4bbe:	0336      	lsls	r6, r6, #12
    4bc0:	4b00      	ldr	r3, [pc, #0]	; (4bc4 <__aeabi_ddiv+0x1dc>)
    4bc2:	e777      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4bc4:	000007ff 	.word	0x000007ff
    4bc8:	fffffc01 	.word	0xfffffc01
    4bcc:	00006658 	.word	0x00006658
    4bd0:	800fffff 	.word	0x800fffff
    4bd4:	000003f3 	.word	0x000003f3
    4bd8:	455e      	cmp	r6, fp
    4bda:	d900      	bls.n	4bde <__aeabi_ddiv+0x1f6>
    4bdc:	e172      	b.n	4ec4 <__aeabi_ddiv+0x4dc>
    4bde:	d100      	bne.n	4be2 <__aeabi_ddiv+0x1fa>
    4be0:	e16d      	b.n	4ebe <__aeabi_ddiv+0x4d6>
    4be2:	9b01      	ldr	r3, [sp, #4]
    4be4:	464d      	mov	r5, r9
    4be6:	3b01      	subs	r3, #1
    4be8:	9301      	str	r3, [sp, #4]
    4bea:	2300      	movs	r3, #0
    4bec:	0034      	movs	r4, r6
    4bee:	9302      	str	r3, [sp, #8]
    4bf0:	465b      	mov	r3, fp
    4bf2:	021e      	lsls	r6, r3, #8
    4bf4:	0e0b      	lsrs	r3, r1, #24
    4bf6:	431e      	orrs	r6, r3
    4bf8:	020b      	lsls	r3, r1, #8
    4bfa:	9303      	str	r3, [sp, #12]
    4bfc:	0c33      	lsrs	r3, r6, #16
    4bfe:	4699      	mov	r9, r3
    4c00:	0433      	lsls	r3, r6, #16
    4c02:	0c1b      	lsrs	r3, r3, #16
    4c04:	4649      	mov	r1, r9
    4c06:	0020      	movs	r0, r4
    4c08:	9300      	str	r3, [sp, #0]
    4c0a:	f001 fa8f 	bl	612c <__aeabi_uidiv>
    4c0e:	9b00      	ldr	r3, [sp, #0]
    4c10:	0037      	movs	r7, r6
    4c12:	4343      	muls	r3, r0
    4c14:	0006      	movs	r6, r0
    4c16:	4649      	mov	r1, r9
    4c18:	0020      	movs	r0, r4
    4c1a:	4698      	mov	r8, r3
    4c1c:	f001 fb0c 	bl	6238 <__aeabi_uidivmod>
    4c20:	0c2c      	lsrs	r4, r5, #16
    4c22:	0409      	lsls	r1, r1, #16
    4c24:	430c      	orrs	r4, r1
    4c26:	45a0      	cmp	r8, r4
    4c28:	d909      	bls.n	4c3e <__aeabi_ddiv+0x256>
    4c2a:	19e4      	adds	r4, r4, r7
    4c2c:	1e73      	subs	r3, r6, #1
    4c2e:	42a7      	cmp	r7, r4
    4c30:	d900      	bls.n	4c34 <__aeabi_ddiv+0x24c>
    4c32:	e15c      	b.n	4eee <__aeabi_ddiv+0x506>
    4c34:	45a0      	cmp	r8, r4
    4c36:	d800      	bhi.n	4c3a <__aeabi_ddiv+0x252>
    4c38:	e159      	b.n	4eee <__aeabi_ddiv+0x506>
    4c3a:	3e02      	subs	r6, #2
    4c3c:	19e4      	adds	r4, r4, r7
    4c3e:	4643      	mov	r3, r8
    4c40:	1ae4      	subs	r4, r4, r3
    4c42:	4649      	mov	r1, r9
    4c44:	0020      	movs	r0, r4
    4c46:	f001 fa71 	bl	612c <__aeabi_uidiv>
    4c4a:	0003      	movs	r3, r0
    4c4c:	9a00      	ldr	r2, [sp, #0]
    4c4e:	4680      	mov	r8, r0
    4c50:	4353      	muls	r3, r2
    4c52:	4649      	mov	r1, r9
    4c54:	0020      	movs	r0, r4
    4c56:	469b      	mov	fp, r3
    4c58:	f001 faee 	bl	6238 <__aeabi_uidivmod>
    4c5c:	042a      	lsls	r2, r5, #16
    4c5e:	0409      	lsls	r1, r1, #16
    4c60:	0c12      	lsrs	r2, r2, #16
    4c62:	430a      	orrs	r2, r1
    4c64:	4593      	cmp	fp, r2
    4c66:	d90d      	bls.n	4c84 <__aeabi_ddiv+0x29c>
    4c68:	4643      	mov	r3, r8
    4c6a:	19d2      	adds	r2, r2, r7
    4c6c:	3b01      	subs	r3, #1
    4c6e:	4297      	cmp	r7, r2
    4c70:	d900      	bls.n	4c74 <__aeabi_ddiv+0x28c>
    4c72:	e13a      	b.n	4eea <__aeabi_ddiv+0x502>
    4c74:	4593      	cmp	fp, r2
    4c76:	d800      	bhi.n	4c7a <__aeabi_ddiv+0x292>
    4c78:	e137      	b.n	4eea <__aeabi_ddiv+0x502>
    4c7a:	2302      	movs	r3, #2
    4c7c:	425b      	negs	r3, r3
    4c7e:	469c      	mov	ip, r3
    4c80:	19d2      	adds	r2, r2, r7
    4c82:	44e0      	add	r8, ip
    4c84:	465b      	mov	r3, fp
    4c86:	1ad2      	subs	r2, r2, r3
    4c88:	4643      	mov	r3, r8
    4c8a:	0436      	lsls	r6, r6, #16
    4c8c:	4333      	orrs	r3, r6
    4c8e:	469b      	mov	fp, r3
    4c90:	9903      	ldr	r1, [sp, #12]
    4c92:	0c18      	lsrs	r0, r3, #16
    4c94:	0c0b      	lsrs	r3, r1, #16
    4c96:	001d      	movs	r5, r3
    4c98:	9305      	str	r3, [sp, #20]
    4c9a:	0409      	lsls	r1, r1, #16
    4c9c:	465b      	mov	r3, fp
    4c9e:	0c09      	lsrs	r1, r1, #16
    4ca0:	000c      	movs	r4, r1
    4ca2:	041b      	lsls	r3, r3, #16
    4ca4:	0c1b      	lsrs	r3, r3, #16
    4ca6:	4344      	muls	r4, r0
    4ca8:	9104      	str	r1, [sp, #16]
    4caa:	4359      	muls	r1, r3
    4cac:	436b      	muls	r3, r5
    4cae:	4368      	muls	r0, r5
    4cb0:	191b      	adds	r3, r3, r4
    4cb2:	0c0d      	lsrs	r5, r1, #16
    4cb4:	18eb      	adds	r3, r5, r3
    4cb6:	429c      	cmp	r4, r3
    4cb8:	d903      	bls.n	4cc2 <__aeabi_ddiv+0x2da>
    4cba:	2480      	movs	r4, #128	; 0x80
    4cbc:	0264      	lsls	r4, r4, #9
    4cbe:	46a4      	mov	ip, r4
    4cc0:	4460      	add	r0, ip
    4cc2:	0c1c      	lsrs	r4, r3, #16
    4cc4:	0409      	lsls	r1, r1, #16
    4cc6:	041b      	lsls	r3, r3, #16
    4cc8:	0c09      	lsrs	r1, r1, #16
    4cca:	1820      	adds	r0, r4, r0
    4ccc:	185d      	adds	r5, r3, r1
    4cce:	4282      	cmp	r2, r0
    4cd0:	d200      	bcs.n	4cd4 <__aeabi_ddiv+0x2ec>
    4cd2:	e0de      	b.n	4e92 <__aeabi_ddiv+0x4aa>
    4cd4:	d100      	bne.n	4cd8 <__aeabi_ddiv+0x2f0>
    4cd6:	e0d7      	b.n	4e88 <__aeabi_ddiv+0x4a0>
    4cd8:	1a16      	subs	r6, r2, r0
    4cda:	9b02      	ldr	r3, [sp, #8]
    4cdc:	469c      	mov	ip, r3
    4cde:	1b5d      	subs	r5, r3, r5
    4ce0:	45ac      	cmp	ip, r5
    4ce2:	419b      	sbcs	r3, r3
    4ce4:	425b      	negs	r3, r3
    4ce6:	1af6      	subs	r6, r6, r3
    4ce8:	42b7      	cmp	r7, r6
    4cea:	d100      	bne.n	4cee <__aeabi_ddiv+0x306>
    4cec:	e106      	b.n	4efc <__aeabi_ddiv+0x514>
    4cee:	4649      	mov	r1, r9
    4cf0:	0030      	movs	r0, r6
    4cf2:	f001 fa1b 	bl	612c <__aeabi_uidiv>
    4cf6:	9b00      	ldr	r3, [sp, #0]
    4cf8:	0004      	movs	r4, r0
    4cfa:	4343      	muls	r3, r0
    4cfc:	4649      	mov	r1, r9
    4cfe:	0030      	movs	r0, r6
    4d00:	4698      	mov	r8, r3
    4d02:	f001 fa99 	bl	6238 <__aeabi_uidivmod>
    4d06:	0c2e      	lsrs	r6, r5, #16
    4d08:	0409      	lsls	r1, r1, #16
    4d0a:	430e      	orrs	r6, r1
    4d0c:	45b0      	cmp	r8, r6
    4d0e:	d909      	bls.n	4d24 <__aeabi_ddiv+0x33c>
    4d10:	19f6      	adds	r6, r6, r7
    4d12:	1e63      	subs	r3, r4, #1
    4d14:	42b7      	cmp	r7, r6
    4d16:	d900      	bls.n	4d1a <__aeabi_ddiv+0x332>
    4d18:	e0f3      	b.n	4f02 <__aeabi_ddiv+0x51a>
    4d1a:	45b0      	cmp	r8, r6
    4d1c:	d800      	bhi.n	4d20 <__aeabi_ddiv+0x338>
    4d1e:	e0f0      	b.n	4f02 <__aeabi_ddiv+0x51a>
    4d20:	3c02      	subs	r4, #2
    4d22:	19f6      	adds	r6, r6, r7
    4d24:	4643      	mov	r3, r8
    4d26:	1af3      	subs	r3, r6, r3
    4d28:	4649      	mov	r1, r9
    4d2a:	0018      	movs	r0, r3
    4d2c:	9302      	str	r3, [sp, #8]
    4d2e:	f001 f9fd 	bl	612c <__aeabi_uidiv>
    4d32:	9b00      	ldr	r3, [sp, #0]
    4d34:	0006      	movs	r6, r0
    4d36:	4343      	muls	r3, r0
    4d38:	4649      	mov	r1, r9
    4d3a:	9802      	ldr	r0, [sp, #8]
    4d3c:	4698      	mov	r8, r3
    4d3e:	f001 fa7b 	bl	6238 <__aeabi_uidivmod>
    4d42:	042d      	lsls	r5, r5, #16
    4d44:	0409      	lsls	r1, r1, #16
    4d46:	0c2d      	lsrs	r5, r5, #16
    4d48:	430d      	orrs	r5, r1
    4d4a:	45a8      	cmp	r8, r5
    4d4c:	d909      	bls.n	4d62 <__aeabi_ddiv+0x37a>
    4d4e:	19ed      	adds	r5, r5, r7
    4d50:	1e73      	subs	r3, r6, #1
    4d52:	42af      	cmp	r7, r5
    4d54:	d900      	bls.n	4d58 <__aeabi_ddiv+0x370>
    4d56:	e0d6      	b.n	4f06 <__aeabi_ddiv+0x51e>
    4d58:	45a8      	cmp	r8, r5
    4d5a:	d800      	bhi.n	4d5e <__aeabi_ddiv+0x376>
    4d5c:	e0d3      	b.n	4f06 <__aeabi_ddiv+0x51e>
    4d5e:	3e02      	subs	r6, #2
    4d60:	19ed      	adds	r5, r5, r7
    4d62:	0424      	lsls	r4, r4, #16
    4d64:	0021      	movs	r1, r4
    4d66:	4643      	mov	r3, r8
    4d68:	4331      	orrs	r1, r6
    4d6a:	9e04      	ldr	r6, [sp, #16]
    4d6c:	9a05      	ldr	r2, [sp, #20]
    4d6e:	0030      	movs	r0, r6
    4d70:	1aed      	subs	r5, r5, r3
    4d72:	040b      	lsls	r3, r1, #16
    4d74:	0c0c      	lsrs	r4, r1, #16
    4d76:	0c1b      	lsrs	r3, r3, #16
    4d78:	4358      	muls	r0, r3
    4d7a:	4366      	muls	r6, r4
    4d7c:	4353      	muls	r3, r2
    4d7e:	4354      	muls	r4, r2
    4d80:	199a      	adds	r2, r3, r6
    4d82:	0c03      	lsrs	r3, r0, #16
    4d84:	189b      	adds	r3, r3, r2
    4d86:	429e      	cmp	r6, r3
    4d88:	d903      	bls.n	4d92 <__aeabi_ddiv+0x3aa>
    4d8a:	2280      	movs	r2, #128	; 0x80
    4d8c:	0252      	lsls	r2, r2, #9
    4d8e:	4694      	mov	ip, r2
    4d90:	4464      	add	r4, ip
    4d92:	0c1a      	lsrs	r2, r3, #16
    4d94:	0400      	lsls	r0, r0, #16
    4d96:	041b      	lsls	r3, r3, #16
    4d98:	0c00      	lsrs	r0, r0, #16
    4d9a:	1914      	adds	r4, r2, r4
    4d9c:	181b      	adds	r3, r3, r0
    4d9e:	42a5      	cmp	r5, r4
    4da0:	d350      	bcc.n	4e44 <__aeabi_ddiv+0x45c>
    4da2:	d04d      	beq.n	4e40 <__aeabi_ddiv+0x458>
    4da4:	2301      	movs	r3, #1
    4da6:	4319      	orrs	r1, r3
    4da8:	4a96      	ldr	r2, [pc, #600]	; (5004 <__aeabi_ddiv+0x61c>)
    4daa:	9b01      	ldr	r3, [sp, #4]
    4dac:	4694      	mov	ip, r2
    4dae:	4463      	add	r3, ip
    4db0:	2b00      	cmp	r3, #0
    4db2:	dc00      	bgt.n	4db6 <__aeabi_ddiv+0x3ce>
    4db4:	e6f3      	b.n	4b9e <__aeabi_ddiv+0x1b6>
    4db6:	074a      	lsls	r2, r1, #29
    4db8:	d009      	beq.n	4dce <__aeabi_ddiv+0x3e6>
    4dba:	220f      	movs	r2, #15
    4dbc:	400a      	ands	r2, r1
    4dbe:	2a04      	cmp	r2, #4
    4dc0:	d005      	beq.n	4dce <__aeabi_ddiv+0x3e6>
    4dc2:	1d0a      	adds	r2, r1, #4
    4dc4:	428a      	cmp	r2, r1
    4dc6:	4189      	sbcs	r1, r1
    4dc8:	4249      	negs	r1, r1
    4dca:	448b      	add	fp, r1
    4dcc:	0011      	movs	r1, r2
    4dce:	465a      	mov	r2, fp
    4dd0:	01d2      	lsls	r2, r2, #7
    4dd2:	d508      	bpl.n	4de6 <__aeabi_ddiv+0x3fe>
    4dd4:	465a      	mov	r2, fp
    4dd6:	4b8c      	ldr	r3, [pc, #560]	; (5008 <__aeabi_ddiv+0x620>)
    4dd8:	401a      	ands	r2, r3
    4dda:	4693      	mov	fp, r2
    4ddc:	2280      	movs	r2, #128	; 0x80
    4dde:	00d2      	lsls	r2, r2, #3
    4de0:	4694      	mov	ip, r2
    4de2:	9b01      	ldr	r3, [sp, #4]
    4de4:	4463      	add	r3, ip
    4de6:	4a89      	ldr	r2, [pc, #548]	; (500c <__aeabi_ddiv+0x624>)
    4de8:	4293      	cmp	r3, r2
    4dea:	dd00      	ble.n	4dee <__aeabi_ddiv+0x406>
    4dec:	e65b      	b.n	4aa6 <__aeabi_ddiv+0xbe>
    4dee:	465a      	mov	r2, fp
    4df0:	08c9      	lsrs	r1, r1, #3
    4df2:	0750      	lsls	r0, r2, #29
    4df4:	4308      	orrs	r0, r1
    4df6:	0256      	lsls	r6, r2, #9
    4df8:	4651      	mov	r1, sl
    4dfa:	2201      	movs	r2, #1
    4dfc:	055b      	lsls	r3, r3, #21
    4dfe:	4681      	mov	r9, r0
    4e00:	0b36      	lsrs	r6, r6, #12
    4e02:	0d5b      	lsrs	r3, r3, #21
    4e04:	400a      	ands	r2, r1
    4e06:	e655      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4e08:	2380      	movs	r3, #128	; 0x80
    4e0a:	031b      	lsls	r3, r3, #12
    4e0c:	421e      	tst	r6, r3
    4e0e:	d011      	beq.n	4e34 <__aeabi_ddiv+0x44c>
    4e10:	465a      	mov	r2, fp
    4e12:	421a      	tst	r2, r3
    4e14:	d10e      	bne.n	4e34 <__aeabi_ddiv+0x44c>
    4e16:	465e      	mov	r6, fp
    4e18:	431e      	orrs	r6, r3
    4e1a:	0336      	lsls	r6, r6, #12
    4e1c:	0b36      	lsrs	r6, r6, #12
    4e1e:	002a      	movs	r2, r5
    4e20:	4689      	mov	r9, r1
    4e22:	4b7b      	ldr	r3, [pc, #492]	; (5010 <__aeabi_ddiv+0x628>)
    4e24:	e646      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4e26:	2b03      	cmp	r3, #3
    4e28:	d100      	bne.n	4e2c <__aeabi_ddiv+0x444>
    4e2a:	e0e1      	b.n	4ff0 <__aeabi_ddiv+0x608>
    4e2c:	2b01      	cmp	r3, #1
    4e2e:	d1bb      	bne.n	4da8 <__aeabi_ddiv+0x3c0>
    4e30:	401a      	ands	r2, r3
    4e32:	e6bb      	b.n	4bac <__aeabi_ddiv+0x1c4>
    4e34:	431e      	orrs	r6, r3
    4e36:	0336      	lsls	r6, r6, #12
    4e38:	0b36      	lsrs	r6, r6, #12
    4e3a:	4642      	mov	r2, r8
    4e3c:	4b74      	ldr	r3, [pc, #464]	; (5010 <__aeabi_ddiv+0x628>)
    4e3e:	e639      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4e40:	2b00      	cmp	r3, #0
    4e42:	d0b1      	beq.n	4da8 <__aeabi_ddiv+0x3c0>
    4e44:	197d      	adds	r5, r7, r5
    4e46:	1e4a      	subs	r2, r1, #1
    4e48:	42af      	cmp	r7, r5
    4e4a:	d952      	bls.n	4ef2 <__aeabi_ddiv+0x50a>
    4e4c:	0011      	movs	r1, r2
    4e4e:	42a5      	cmp	r5, r4
    4e50:	d1a8      	bne.n	4da4 <__aeabi_ddiv+0x3bc>
    4e52:	9a03      	ldr	r2, [sp, #12]
    4e54:	429a      	cmp	r2, r3
    4e56:	d1a5      	bne.n	4da4 <__aeabi_ddiv+0x3bc>
    4e58:	e7a6      	b.n	4da8 <__aeabi_ddiv+0x3c0>
    4e5a:	0003      	movs	r3, r0
    4e5c:	003e      	movs	r6, r7
    4e5e:	3b28      	subs	r3, #40	; 0x28
    4e60:	409e      	lsls	r6, r3
    4e62:	2300      	movs	r3, #0
    4e64:	4699      	mov	r9, r3
    4e66:	e654      	b.n	4b12 <__aeabi_ddiv+0x12a>
    4e68:	f001 f9ec 	bl	6244 <__clzsi2>
    4e6c:	3020      	adds	r0, #32
    4e6e:	e641      	b.n	4af4 <__aeabi_ddiv+0x10c>
    4e70:	0003      	movs	r3, r0
    4e72:	4652      	mov	r2, sl
    4e74:	3b28      	subs	r3, #40	; 0x28
    4e76:	409a      	lsls	r2, r3
    4e78:	2100      	movs	r1, #0
    4e7a:	4693      	mov	fp, r2
    4e7c:	e677      	b.n	4b6e <__aeabi_ddiv+0x186>
    4e7e:	4650      	mov	r0, sl
    4e80:	f001 f9e0 	bl	6244 <__clzsi2>
    4e84:	3020      	adds	r0, #32
    4e86:	e65e      	b.n	4b46 <__aeabi_ddiv+0x15e>
    4e88:	9b02      	ldr	r3, [sp, #8]
    4e8a:	2600      	movs	r6, #0
    4e8c:	42ab      	cmp	r3, r5
    4e8e:	d300      	bcc.n	4e92 <__aeabi_ddiv+0x4aa>
    4e90:	e723      	b.n	4cda <__aeabi_ddiv+0x2f2>
    4e92:	9e03      	ldr	r6, [sp, #12]
    4e94:	9902      	ldr	r1, [sp, #8]
    4e96:	46b4      	mov	ip, r6
    4e98:	4461      	add	r1, ip
    4e9a:	4688      	mov	r8, r1
    4e9c:	45b0      	cmp	r8, r6
    4e9e:	41b6      	sbcs	r6, r6
    4ea0:	465b      	mov	r3, fp
    4ea2:	4276      	negs	r6, r6
    4ea4:	19f6      	adds	r6, r6, r7
    4ea6:	18b2      	adds	r2, r6, r2
    4ea8:	3b01      	subs	r3, #1
    4eaa:	9102      	str	r1, [sp, #8]
    4eac:	4297      	cmp	r7, r2
    4eae:	d213      	bcs.n	4ed8 <__aeabi_ddiv+0x4f0>
    4eb0:	4290      	cmp	r0, r2
    4eb2:	d84f      	bhi.n	4f54 <__aeabi_ddiv+0x56c>
    4eb4:	d100      	bne.n	4eb8 <__aeabi_ddiv+0x4d0>
    4eb6:	e08e      	b.n	4fd6 <__aeabi_ddiv+0x5ee>
    4eb8:	1a16      	subs	r6, r2, r0
    4eba:	469b      	mov	fp, r3
    4ebc:	e70d      	b.n	4cda <__aeabi_ddiv+0x2f2>
    4ebe:	4589      	cmp	r9, r1
    4ec0:	d200      	bcs.n	4ec4 <__aeabi_ddiv+0x4dc>
    4ec2:	e68e      	b.n	4be2 <__aeabi_ddiv+0x1fa>
    4ec4:	0874      	lsrs	r4, r6, #1
    4ec6:	464b      	mov	r3, r9
    4ec8:	07f6      	lsls	r6, r6, #31
    4eca:	0035      	movs	r5, r6
    4ecc:	085b      	lsrs	r3, r3, #1
    4ece:	431d      	orrs	r5, r3
    4ed0:	464b      	mov	r3, r9
    4ed2:	07db      	lsls	r3, r3, #31
    4ed4:	9302      	str	r3, [sp, #8]
    4ed6:	e68b      	b.n	4bf0 <__aeabi_ddiv+0x208>
    4ed8:	4297      	cmp	r7, r2
    4eda:	d1ed      	bne.n	4eb8 <__aeabi_ddiv+0x4d0>
    4edc:	9903      	ldr	r1, [sp, #12]
    4ede:	9c02      	ldr	r4, [sp, #8]
    4ee0:	42a1      	cmp	r1, r4
    4ee2:	d9e5      	bls.n	4eb0 <__aeabi_ddiv+0x4c8>
    4ee4:	1a3e      	subs	r6, r7, r0
    4ee6:	469b      	mov	fp, r3
    4ee8:	e6f7      	b.n	4cda <__aeabi_ddiv+0x2f2>
    4eea:	4698      	mov	r8, r3
    4eec:	e6ca      	b.n	4c84 <__aeabi_ddiv+0x29c>
    4eee:	001e      	movs	r6, r3
    4ef0:	e6a5      	b.n	4c3e <__aeabi_ddiv+0x256>
    4ef2:	42ac      	cmp	r4, r5
    4ef4:	d83e      	bhi.n	4f74 <__aeabi_ddiv+0x58c>
    4ef6:	d074      	beq.n	4fe2 <__aeabi_ddiv+0x5fa>
    4ef8:	0011      	movs	r1, r2
    4efa:	e753      	b.n	4da4 <__aeabi_ddiv+0x3bc>
    4efc:	2101      	movs	r1, #1
    4efe:	4249      	negs	r1, r1
    4f00:	e752      	b.n	4da8 <__aeabi_ddiv+0x3c0>
    4f02:	001c      	movs	r4, r3
    4f04:	e70e      	b.n	4d24 <__aeabi_ddiv+0x33c>
    4f06:	001e      	movs	r6, r3
    4f08:	e72b      	b.n	4d62 <__aeabi_ddiv+0x37a>
    4f0a:	2d1f      	cmp	r5, #31
    4f0c:	dc3c      	bgt.n	4f88 <__aeabi_ddiv+0x5a0>
    4f0e:	2320      	movs	r3, #32
    4f10:	000a      	movs	r2, r1
    4f12:	4658      	mov	r0, fp
    4f14:	1b5b      	subs	r3, r3, r5
    4f16:	4098      	lsls	r0, r3
    4f18:	40ea      	lsrs	r2, r5
    4f1a:	4099      	lsls	r1, r3
    4f1c:	4302      	orrs	r2, r0
    4f1e:	1e48      	subs	r0, r1, #1
    4f20:	4181      	sbcs	r1, r0
    4f22:	465e      	mov	r6, fp
    4f24:	4311      	orrs	r1, r2
    4f26:	40ee      	lsrs	r6, r5
    4f28:	074b      	lsls	r3, r1, #29
    4f2a:	d009      	beq.n	4f40 <__aeabi_ddiv+0x558>
    4f2c:	230f      	movs	r3, #15
    4f2e:	400b      	ands	r3, r1
    4f30:	2b04      	cmp	r3, #4
    4f32:	d005      	beq.n	4f40 <__aeabi_ddiv+0x558>
    4f34:	000b      	movs	r3, r1
    4f36:	1d19      	adds	r1, r3, #4
    4f38:	4299      	cmp	r1, r3
    4f3a:	419b      	sbcs	r3, r3
    4f3c:	425b      	negs	r3, r3
    4f3e:	18f6      	adds	r6, r6, r3
    4f40:	0233      	lsls	r3, r6, #8
    4f42:	d53c      	bpl.n	4fbe <__aeabi_ddiv+0x5d6>
    4f44:	4653      	mov	r3, sl
    4f46:	2201      	movs	r2, #1
    4f48:	2100      	movs	r1, #0
    4f4a:	401a      	ands	r2, r3
    4f4c:	2600      	movs	r6, #0
    4f4e:	2301      	movs	r3, #1
    4f50:	4689      	mov	r9, r1
    4f52:	e5af      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4f54:	2302      	movs	r3, #2
    4f56:	425b      	negs	r3, r3
    4f58:	469c      	mov	ip, r3
    4f5a:	9c03      	ldr	r4, [sp, #12]
    4f5c:	44e3      	add	fp, ip
    4f5e:	46a4      	mov	ip, r4
    4f60:	9b02      	ldr	r3, [sp, #8]
    4f62:	4463      	add	r3, ip
    4f64:	4698      	mov	r8, r3
    4f66:	45a0      	cmp	r8, r4
    4f68:	41b6      	sbcs	r6, r6
    4f6a:	4276      	negs	r6, r6
    4f6c:	19f6      	adds	r6, r6, r7
    4f6e:	9302      	str	r3, [sp, #8]
    4f70:	18b2      	adds	r2, r6, r2
    4f72:	e6b1      	b.n	4cd8 <__aeabi_ddiv+0x2f0>
    4f74:	9803      	ldr	r0, [sp, #12]
    4f76:	1e8a      	subs	r2, r1, #2
    4f78:	0041      	lsls	r1, r0, #1
    4f7a:	4281      	cmp	r1, r0
    4f7c:	41b6      	sbcs	r6, r6
    4f7e:	4276      	negs	r6, r6
    4f80:	19f6      	adds	r6, r6, r7
    4f82:	19ad      	adds	r5, r5, r6
    4f84:	9103      	str	r1, [sp, #12]
    4f86:	e761      	b.n	4e4c <__aeabi_ddiv+0x464>
    4f88:	221f      	movs	r2, #31
    4f8a:	4252      	negs	r2, r2
    4f8c:	1ad3      	subs	r3, r2, r3
    4f8e:	465a      	mov	r2, fp
    4f90:	40da      	lsrs	r2, r3
    4f92:	0013      	movs	r3, r2
    4f94:	2d20      	cmp	r5, #32
    4f96:	d029      	beq.n	4fec <__aeabi_ddiv+0x604>
    4f98:	2240      	movs	r2, #64	; 0x40
    4f9a:	4658      	mov	r0, fp
    4f9c:	1b55      	subs	r5, r2, r5
    4f9e:	40a8      	lsls	r0, r5
    4fa0:	4301      	orrs	r1, r0
    4fa2:	1e48      	subs	r0, r1, #1
    4fa4:	4181      	sbcs	r1, r0
    4fa6:	2007      	movs	r0, #7
    4fa8:	430b      	orrs	r3, r1
    4faa:	4018      	ands	r0, r3
    4fac:	2600      	movs	r6, #0
    4fae:	2800      	cmp	r0, #0
    4fb0:	d009      	beq.n	4fc6 <__aeabi_ddiv+0x5de>
    4fb2:	220f      	movs	r2, #15
    4fb4:	2600      	movs	r6, #0
    4fb6:	401a      	ands	r2, r3
    4fb8:	0019      	movs	r1, r3
    4fba:	2a04      	cmp	r2, #4
    4fbc:	d1bb      	bne.n	4f36 <__aeabi_ddiv+0x54e>
    4fbe:	000b      	movs	r3, r1
    4fc0:	0770      	lsls	r0, r6, #29
    4fc2:	0276      	lsls	r6, r6, #9
    4fc4:	0b36      	lsrs	r6, r6, #12
    4fc6:	08db      	lsrs	r3, r3, #3
    4fc8:	4303      	orrs	r3, r0
    4fca:	4699      	mov	r9, r3
    4fcc:	2201      	movs	r2, #1
    4fce:	4653      	mov	r3, sl
    4fd0:	401a      	ands	r2, r3
    4fd2:	2300      	movs	r3, #0
    4fd4:	e56e      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    4fd6:	9902      	ldr	r1, [sp, #8]
    4fd8:	428d      	cmp	r5, r1
    4fda:	d8bb      	bhi.n	4f54 <__aeabi_ddiv+0x56c>
    4fdc:	469b      	mov	fp, r3
    4fde:	2600      	movs	r6, #0
    4fe0:	e67b      	b.n	4cda <__aeabi_ddiv+0x2f2>
    4fe2:	9803      	ldr	r0, [sp, #12]
    4fe4:	4298      	cmp	r0, r3
    4fe6:	d3c5      	bcc.n	4f74 <__aeabi_ddiv+0x58c>
    4fe8:	0011      	movs	r1, r2
    4fea:	e732      	b.n	4e52 <__aeabi_ddiv+0x46a>
    4fec:	2000      	movs	r0, #0
    4fee:	e7d7      	b.n	4fa0 <__aeabi_ddiv+0x5b8>
    4ff0:	2680      	movs	r6, #128	; 0x80
    4ff2:	465b      	mov	r3, fp
    4ff4:	0336      	lsls	r6, r6, #12
    4ff6:	431e      	orrs	r6, r3
    4ff8:	0336      	lsls	r6, r6, #12
    4ffa:	0b36      	lsrs	r6, r6, #12
    4ffc:	9a00      	ldr	r2, [sp, #0]
    4ffe:	4689      	mov	r9, r1
    5000:	4b03      	ldr	r3, [pc, #12]	; (5010 <__aeabi_ddiv+0x628>)
    5002:	e557      	b.n	4ab4 <__aeabi_ddiv+0xcc>
    5004:	000003ff 	.word	0x000003ff
    5008:	feffffff 	.word	0xfeffffff
    500c:	000007fe 	.word	0x000007fe
    5010:	000007ff 	.word	0x000007ff

00005014 <__eqdf2>:
    5014:	b5f0      	push	{r4, r5, r6, r7, lr}
    5016:	465f      	mov	r7, fp
    5018:	4656      	mov	r6, sl
    501a:	464d      	mov	r5, r9
    501c:	4644      	mov	r4, r8
    501e:	b4f0      	push	{r4, r5, r6, r7}
    5020:	031f      	lsls	r7, r3, #12
    5022:	005c      	lsls	r4, r3, #1
    5024:	0fdb      	lsrs	r3, r3, #31
    5026:	469a      	mov	sl, r3
    5028:	4b19      	ldr	r3, [pc, #100]	; (5090 <__eqdf2+0x7c>)
    502a:	030e      	lsls	r6, r1, #12
    502c:	004d      	lsls	r5, r1, #1
    502e:	0fc9      	lsrs	r1, r1, #31
    5030:	4680      	mov	r8, r0
    5032:	0b36      	lsrs	r6, r6, #12
    5034:	0d6d      	lsrs	r5, r5, #21
    5036:	468b      	mov	fp, r1
    5038:	4691      	mov	r9, r2
    503a:	0b3f      	lsrs	r7, r7, #12
    503c:	0d64      	lsrs	r4, r4, #21
    503e:	429d      	cmp	r5, r3
    5040:	d019      	beq.n	5076 <__eqdf2+0x62>
    5042:	4b13      	ldr	r3, [pc, #76]	; (5090 <__eqdf2+0x7c>)
    5044:	429c      	cmp	r4, r3
    5046:	d01b      	beq.n	5080 <__eqdf2+0x6c>
    5048:	2301      	movs	r3, #1
    504a:	42a5      	cmp	r5, r4
    504c:	d006      	beq.n	505c <__eqdf2+0x48>
    504e:	0018      	movs	r0, r3
    5050:	bc3c      	pop	{r2, r3, r4, r5}
    5052:	4690      	mov	r8, r2
    5054:	4699      	mov	r9, r3
    5056:	46a2      	mov	sl, r4
    5058:	46ab      	mov	fp, r5
    505a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    505c:	42be      	cmp	r6, r7
    505e:	d1f6      	bne.n	504e <__eqdf2+0x3a>
    5060:	45c8      	cmp	r8, r9
    5062:	d1f4      	bne.n	504e <__eqdf2+0x3a>
    5064:	45d3      	cmp	fp, sl
    5066:	d010      	beq.n	508a <__eqdf2+0x76>
    5068:	2d00      	cmp	r5, #0
    506a:	d1f0      	bne.n	504e <__eqdf2+0x3a>
    506c:	4330      	orrs	r0, r6
    506e:	0003      	movs	r3, r0
    5070:	1e5a      	subs	r2, r3, #1
    5072:	4193      	sbcs	r3, r2
    5074:	e7eb      	b.n	504e <__eqdf2+0x3a>
    5076:	0031      	movs	r1, r6
    5078:	2301      	movs	r3, #1
    507a:	4301      	orrs	r1, r0
    507c:	d1e7      	bne.n	504e <__eqdf2+0x3a>
    507e:	e7e0      	b.n	5042 <__eqdf2+0x2e>
    5080:	433a      	orrs	r2, r7
    5082:	2301      	movs	r3, #1
    5084:	2a00      	cmp	r2, #0
    5086:	d1e2      	bne.n	504e <__eqdf2+0x3a>
    5088:	e7de      	b.n	5048 <__eqdf2+0x34>
    508a:	2300      	movs	r3, #0
    508c:	e7df      	b.n	504e <__eqdf2+0x3a>
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	000007ff 	.word	0x000007ff

00005094 <__gedf2>:
    5094:	b5f0      	push	{r4, r5, r6, r7, lr}
    5096:	465f      	mov	r7, fp
    5098:	4644      	mov	r4, r8
    509a:	4656      	mov	r6, sl
    509c:	464d      	mov	r5, r9
    509e:	b4f0      	push	{r4, r5, r6, r7}
    50a0:	031f      	lsls	r7, r3, #12
    50a2:	0b3c      	lsrs	r4, r7, #12
    50a4:	4f2c      	ldr	r7, [pc, #176]	; (5158 <__gedf2+0xc4>)
    50a6:	030e      	lsls	r6, r1, #12
    50a8:	004d      	lsls	r5, r1, #1
    50aa:	46a3      	mov	fp, r4
    50ac:	005c      	lsls	r4, r3, #1
    50ae:	4684      	mov	ip, r0
    50b0:	0b36      	lsrs	r6, r6, #12
    50b2:	0d6d      	lsrs	r5, r5, #21
    50b4:	0fc9      	lsrs	r1, r1, #31
    50b6:	4690      	mov	r8, r2
    50b8:	0d64      	lsrs	r4, r4, #21
    50ba:	0fdb      	lsrs	r3, r3, #31
    50bc:	42bd      	cmp	r5, r7
    50be:	d02b      	beq.n	5118 <__gedf2+0x84>
    50c0:	4f25      	ldr	r7, [pc, #148]	; (5158 <__gedf2+0xc4>)
    50c2:	42bc      	cmp	r4, r7
    50c4:	d02e      	beq.n	5124 <__gedf2+0x90>
    50c6:	2d00      	cmp	r5, #0
    50c8:	d10e      	bne.n	50e8 <__gedf2+0x54>
    50ca:	4330      	orrs	r0, r6
    50cc:	0007      	movs	r7, r0
    50ce:	4681      	mov	r9, r0
    50d0:	4278      	negs	r0, r7
    50d2:	4178      	adcs	r0, r7
    50d4:	2c00      	cmp	r4, #0
    50d6:	d117      	bne.n	5108 <__gedf2+0x74>
    50d8:	465f      	mov	r7, fp
    50da:	433a      	orrs	r2, r7
    50dc:	d114      	bne.n	5108 <__gedf2+0x74>
    50de:	464b      	mov	r3, r9
    50e0:	2000      	movs	r0, #0
    50e2:	2b00      	cmp	r3, #0
    50e4:	d00a      	beq.n	50fc <__gedf2+0x68>
    50e6:	e006      	b.n	50f6 <__gedf2+0x62>
    50e8:	2c00      	cmp	r4, #0
    50ea:	d102      	bne.n	50f2 <__gedf2+0x5e>
    50ec:	4658      	mov	r0, fp
    50ee:	4302      	orrs	r2, r0
    50f0:	d001      	beq.n	50f6 <__gedf2+0x62>
    50f2:	4299      	cmp	r1, r3
    50f4:	d01a      	beq.n	512c <__gedf2+0x98>
    50f6:	2301      	movs	r3, #1
    50f8:	4248      	negs	r0, r1
    50fa:	4318      	orrs	r0, r3
    50fc:	bc3c      	pop	{r2, r3, r4, r5}
    50fe:	4690      	mov	r8, r2
    5100:	4699      	mov	r9, r3
    5102:	46a2      	mov	sl, r4
    5104:	46ab      	mov	fp, r5
    5106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5108:	2800      	cmp	r0, #0
    510a:	d0f2      	beq.n	50f2 <__gedf2+0x5e>
    510c:	4258      	negs	r0, r3
    510e:	4158      	adcs	r0, r3
    5110:	2201      	movs	r2, #1
    5112:	4240      	negs	r0, r0
    5114:	4310      	orrs	r0, r2
    5116:	e7f1      	b.n	50fc <__gedf2+0x68>
    5118:	0037      	movs	r7, r6
    511a:	4307      	orrs	r7, r0
    511c:	d0d0      	beq.n	50c0 <__gedf2+0x2c>
    511e:	2002      	movs	r0, #2
    5120:	4240      	negs	r0, r0
    5122:	e7eb      	b.n	50fc <__gedf2+0x68>
    5124:	465f      	mov	r7, fp
    5126:	4317      	orrs	r7, r2
    5128:	d0cd      	beq.n	50c6 <__gedf2+0x32>
    512a:	e7f8      	b.n	511e <__gedf2+0x8a>
    512c:	42a5      	cmp	r5, r4
    512e:	dce2      	bgt.n	50f6 <__gedf2+0x62>
    5130:	db05      	blt.n	513e <__gedf2+0xaa>
    5132:	455e      	cmp	r6, fp
    5134:	d8df      	bhi.n	50f6 <__gedf2+0x62>
    5136:	d008      	beq.n	514a <__gedf2+0xb6>
    5138:	2000      	movs	r0, #0
    513a:	455e      	cmp	r6, fp
    513c:	d2de      	bcs.n	50fc <__gedf2+0x68>
    513e:	4248      	negs	r0, r1
    5140:	4148      	adcs	r0, r1
    5142:	2301      	movs	r3, #1
    5144:	4240      	negs	r0, r0
    5146:	4318      	orrs	r0, r3
    5148:	e7d8      	b.n	50fc <__gedf2+0x68>
    514a:	45c4      	cmp	ip, r8
    514c:	d8d3      	bhi.n	50f6 <__gedf2+0x62>
    514e:	2000      	movs	r0, #0
    5150:	45c4      	cmp	ip, r8
    5152:	d3f4      	bcc.n	513e <__gedf2+0xaa>
    5154:	e7d2      	b.n	50fc <__gedf2+0x68>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	000007ff 	.word	0x000007ff

0000515c <__ledf2>:
    515c:	b5f0      	push	{r4, r5, r6, r7, lr}
    515e:	465f      	mov	r7, fp
    5160:	464d      	mov	r5, r9
    5162:	4644      	mov	r4, r8
    5164:	4656      	mov	r6, sl
    5166:	b4f0      	push	{r4, r5, r6, r7}
    5168:	031c      	lsls	r4, r3, #12
    516a:	0b24      	lsrs	r4, r4, #12
    516c:	46a4      	mov	ip, r4
    516e:	4c2f      	ldr	r4, [pc, #188]	; (522c <__ledf2+0xd0>)
    5170:	030f      	lsls	r7, r1, #12
    5172:	004d      	lsls	r5, r1, #1
    5174:	005e      	lsls	r6, r3, #1
    5176:	0fc9      	lsrs	r1, r1, #31
    5178:	4680      	mov	r8, r0
    517a:	0b3f      	lsrs	r7, r7, #12
    517c:	0d6d      	lsrs	r5, r5, #21
    517e:	468b      	mov	fp, r1
    5180:	4691      	mov	r9, r2
    5182:	0d76      	lsrs	r6, r6, #21
    5184:	0fdb      	lsrs	r3, r3, #31
    5186:	42a5      	cmp	r5, r4
    5188:	d020      	beq.n	51cc <__ledf2+0x70>
    518a:	4c28      	ldr	r4, [pc, #160]	; (522c <__ledf2+0xd0>)
    518c:	42a6      	cmp	r6, r4
    518e:	d022      	beq.n	51d6 <__ledf2+0x7a>
    5190:	2d00      	cmp	r5, #0
    5192:	d112      	bne.n	51ba <__ledf2+0x5e>
    5194:	4338      	orrs	r0, r7
    5196:	4244      	negs	r4, r0
    5198:	4144      	adcs	r4, r0
    519a:	2e00      	cmp	r6, #0
    519c:	d020      	beq.n	51e0 <__ledf2+0x84>
    519e:	2c00      	cmp	r4, #0
    51a0:	d00d      	beq.n	51be <__ledf2+0x62>
    51a2:	425c      	negs	r4, r3
    51a4:	4163      	adcs	r3, r4
    51a6:	2401      	movs	r4, #1
    51a8:	425b      	negs	r3, r3
    51aa:	431c      	orrs	r4, r3
    51ac:	0020      	movs	r0, r4
    51ae:	bc3c      	pop	{r2, r3, r4, r5}
    51b0:	4690      	mov	r8, r2
    51b2:	4699      	mov	r9, r3
    51b4:	46a2      	mov	sl, r4
    51b6:	46ab      	mov	fp, r5
    51b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51ba:	2e00      	cmp	r6, #0
    51bc:	d017      	beq.n	51ee <__ledf2+0x92>
    51be:	455b      	cmp	r3, fp
    51c0:	d019      	beq.n	51f6 <__ledf2+0x9a>
    51c2:	465b      	mov	r3, fp
    51c4:	425c      	negs	r4, r3
    51c6:	2301      	movs	r3, #1
    51c8:	431c      	orrs	r4, r3
    51ca:	e7ef      	b.n	51ac <__ledf2+0x50>
    51cc:	0039      	movs	r1, r7
    51ce:	2402      	movs	r4, #2
    51d0:	4301      	orrs	r1, r0
    51d2:	d1eb      	bne.n	51ac <__ledf2+0x50>
    51d4:	e7d9      	b.n	518a <__ledf2+0x2e>
    51d6:	4661      	mov	r1, ip
    51d8:	2402      	movs	r4, #2
    51da:	4311      	orrs	r1, r2
    51dc:	d1e6      	bne.n	51ac <__ledf2+0x50>
    51de:	e7d7      	b.n	5190 <__ledf2+0x34>
    51e0:	4661      	mov	r1, ip
    51e2:	430a      	orrs	r2, r1
    51e4:	d1db      	bne.n	519e <__ledf2+0x42>
    51e6:	2400      	movs	r4, #0
    51e8:	2800      	cmp	r0, #0
    51ea:	d0df      	beq.n	51ac <__ledf2+0x50>
    51ec:	e7e9      	b.n	51c2 <__ledf2+0x66>
    51ee:	4661      	mov	r1, ip
    51f0:	430a      	orrs	r2, r1
    51f2:	d1e4      	bne.n	51be <__ledf2+0x62>
    51f4:	e7e5      	b.n	51c2 <__ledf2+0x66>
    51f6:	42b5      	cmp	r5, r6
    51f8:	dd03      	ble.n	5202 <__ledf2+0xa6>
    51fa:	2201      	movs	r2, #1
    51fc:	425c      	negs	r4, r3
    51fe:	4314      	orrs	r4, r2
    5200:	e7d4      	b.n	51ac <__ledf2+0x50>
    5202:	42b5      	cmp	r5, r6
    5204:	dbcd      	blt.n	51a2 <__ledf2+0x46>
    5206:	4567      	cmp	r7, ip
    5208:	d8db      	bhi.n	51c2 <__ledf2+0x66>
    520a:	d009      	beq.n	5220 <__ledf2+0xc4>
    520c:	2400      	movs	r4, #0
    520e:	4567      	cmp	r7, ip
    5210:	d2cc      	bcs.n	51ac <__ledf2+0x50>
    5212:	4659      	mov	r1, fp
    5214:	424c      	negs	r4, r1
    5216:	4161      	adcs	r1, r4
    5218:	2401      	movs	r4, #1
    521a:	4249      	negs	r1, r1
    521c:	430c      	orrs	r4, r1
    521e:	e7c5      	b.n	51ac <__ledf2+0x50>
    5220:	45c8      	cmp	r8, r9
    5222:	d8ce      	bhi.n	51c2 <__ledf2+0x66>
    5224:	2400      	movs	r4, #0
    5226:	45c8      	cmp	r8, r9
    5228:	d3f3      	bcc.n	5212 <__ledf2+0xb6>
    522a:	e7bf      	b.n	51ac <__ledf2+0x50>
    522c:	000007ff 	.word	0x000007ff

00005230 <__aeabi_dmul>:
    5230:	b5f0      	push	{r4, r5, r6, r7, lr}
    5232:	465f      	mov	r7, fp
    5234:	4656      	mov	r6, sl
    5236:	464d      	mov	r5, r9
    5238:	4644      	mov	r4, r8
    523a:	b4f0      	push	{r4, r5, r6, r7}
    523c:	030d      	lsls	r5, r1, #12
    523e:	4699      	mov	r9, r3
    5240:	004e      	lsls	r6, r1, #1
    5242:	0b2b      	lsrs	r3, r5, #12
    5244:	b087      	sub	sp, #28
    5246:	0007      	movs	r7, r0
    5248:	4692      	mov	sl, r2
    524a:	4680      	mov	r8, r0
    524c:	469b      	mov	fp, r3
    524e:	0d76      	lsrs	r6, r6, #21
    5250:	0fcc      	lsrs	r4, r1, #31
    5252:	2e00      	cmp	r6, #0
    5254:	d069      	beq.n	532a <__aeabi_dmul+0xfa>
    5256:	4b6d      	ldr	r3, [pc, #436]	; (540c <__aeabi_dmul+0x1dc>)
    5258:	429e      	cmp	r6, r3
    525a:	d035      	beq.n	52c8 <__aeabi_dmul+0x98>
    525c:	465b      	mov	r3, fp
    525e:	2280      	movs	r2, #128	; 0x80
    5260:	00dd      	lsls	r5, r3, #3
    5262:	0412      	lsls	r2, r2, #16
    5264:	0f43      	lsrs	r3, r0, #29
    5266:	4313      	orrs	r3, r2
    5268:	432b      	orrs	r3, r5
    526a:	469b      	mov	fp, r3
    526c:	00c3      	lsls	r3, r0, #3
    526e:	4698      	mov	r8, r3
    5270:	4b67      	ldr	r3, [pc, #412]	; (5410 <__aeabi_dmul+0x1e0>)
    5272:	2700      	movs	r7, #0
    5274:	469c      	mov	ip, r3
    5276:	2300      	movs	r3, #0
    5278:	4466      	add	r6, ip
    527a:	9301      	str	r3, [sp, #4]
    527c:	464a      	mov	r2, r9
    527e:	0315      	lsls	r5, r2, #12
    5280:	0050      	lsls	r0, r2, #1
    5282:	0fd2      	lsrs	r2, r2, #31
    5284:	4653      	mov	r3, sl
    5286:	0b2d      	lsrs	r5, r5, #12
    5288:	0d40      	lsrs	r0, r0, #21
    528a:	4691      	mov	r9, r2
    528c:	d100      	bne.n	5290 <__aeabi_dmul+0x60>
    528e:	e076      	b.n	537e <__aeabi_dmul+0x14e>
    5290:	4a5e      	ldr	r2, [pc, #376]	; (540c <__aeabi_dmul+0x1dc>)
    5292:	4290      	cmp	r0, r2
    5294:	d06c      	beq.n	5370 <__aeabi_dmul+0x140>
    5296:	2280      	movs	r2, #128	; 0x80
    5298:	0f5b      	lsrs	r3, r3, #29
    529a:	0412      	lsls	r2, r2, #16
    529c:	4313      	orrs	r3, r2
    529e:	4a5c      	ldr	r2, [pc, #368]	; (5410 <__aeabi_dmul+0x1e0>)
    52a0:	00ed      	lsls	r5, r5, #3
    52a2:	4694      	mov	ip, r2
    52a4:	431d      	orrs	r5, r3
    52a6:	4653      	mov	r3, sl
    52a8:	2200      	movs	r2, #0
    52aa:	00db      	lsls	r3, r3, #3
    52ac:	4460      	add	r0, ip
    52ae:	4649      	mov	r1, r9
    52b0:	1836      	adds	r6, r6, r0
    52b2:	1c70      	adds	r0, r6, #1
    52b4:	4061      	eors	r1, r4
    52b6:	9002      	str	r0, [sp, #8]
    52b8:	4317      	orrs	r7, r2
    52ba:	2f0f      	cmp	r7, #15
    52bc:	d900      	bls.n	52c0 <__aeabi_dmul+0x90>
    52be:	e0af      	b.n	5420 <__aeabi_dmul+0x1f0>
    52c0:	4854      	ldr	r0, [pc, #336]	; (5414 <__aeabi_dmul+0x1e4>)
    52c2:	00bf      	lsls	r7, r7, #2
    52c4:	59c7      	ldr	r7, [r0, r7]
    52c6:	46bf      	mov	pc, r7
    52c8:	465b      	mov	r3, fp
    52ca:	431f      	orrs	r7, r3
    52cc:	d000      	beq.n	52d0 <__aeabi_dmul+0xa0>
    52ce:	e088      	b.n	53e2 <__aeabi_dmul+0x1b2>
    52d0:	2300      	movs	r3, #0
    52d2:	469b      	mov	fp, r3
    52d4:	4698      	mov	r8, r3
    52d6:	3302      	adds	r3, #2
    52d8:	2708      	movs	r7, #8
    52da:	9301      	str	r3, [sp, #4]
    52dc:	e7ce      	b.n	527c <__aeabi_dmul+0x4c>
    52de:	4649      	mov	r1, r9
    52e0:	2a02      	cmp	r2, #2
    52e2:	d06a      	beq.n	53ba <__aeabi_dmul+0x18a>
    52e4:	2a03      	cmp	r2, #3
    52e6:	d100      	bne.n	52ea <__aeabi_dmul+0xba>
    52e8:	e209      	b.n	56fe <__aeabi_dmul+0x4ce>
    52ea:	2a01      	cmp	r2, #1
    52ec:	d000      	beq.n	52f0 <__aeabi_dmul+0xc0>
    52ee:	e1bb      	b.n	5668 <__aeabi_dmul+0x438>
    52f0:	4011      	ands	r1, r2
    52f2:	2200      	movs	r2, #0
    52f4:	2300      	movs	r3, #0
    52f6:	2500      	movs	r5, #0
    52f8:	4690      	mov	r8, r2
    52fa:	b2cc      	uxtb	r4, r1
    52fc:	2100      	movs	r1, #0
    52fe:	032d      	lsls	r5, r5, #12
    5300:	0d0a      	lsrs	r2, r1, #20
    5302:	0512      	lsls	r2, r2, #20
    5304:	0b2d      	lsrs	r5, r5, #12
    5306:	4315      	orrs	r5, r2
    5308:	4a43      	ldr	r2, [pc, #268]	; (5418 <__aeabi_dmul+0x1e8>)
    530a:	051b      	lsls	r3, r3, #20
    530c:	4015      	ands	r5, r2
    530e:	431d      	orrs	r5, r3
    5310:	006d      	lsls	r5, r5, #1
    5312:	07e4      	lsls	r4, r4, #31
    5314:	086d      	lsrs	r5, r5, #1
    5316:	4325      	orrs	r5, r4
    5318:	4640      	mov	r0, r8
    531a:	0029      	movs	r1, r5
    531c:	b007      	add	sp, #28
    531e:	bc3c      	pop	{r2, r3, r4, r5}
    5320:	4690      	mov	r8, r2
    5322:	4699      	mov	r9, r3
    5324:	46a2      	mov	sl, r4
    5326:	46ab      	mov	fp, r5
    5328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    532a:	4303      	orrs	r3, r0
    532c:	d052      	beq.n	53d4 <__aeabi_dmul+0x1a4>
    532e:	465b      	mov	r3, fp
    5330:	2b00      	cmp	r3, #0
    5332:	d100      	bne.n	5336 <__aeabi_dmul+0x106>
    5334:	e18a      	b.n	564c <__aeabi_dmul+0x41c>
    5336:	4658      	mov	r0, fp
    5338:	f000 ff84 	bl	6244 <__clzsi2>
    533c:	0003      	movs	r3, r0
    533e:	3b0b      	subs	r3, #11
    5340:	2b1c      	cmp	r3, #28
    5342:	dd00      	ble.n	5346 <__aeabi_dmul+0x116>
    5344:	e17b      	b.n	563e <__aeabi_dmul+0x40e>
    5346:	221d      	movs	r2, #29
    5348:	1ad3      	subs	r3, r2, r3
    534a:	003a      	movs	r2, r7
    534c:	0001      	movs	r1, r0
    534e:	465d      	mov	r5, fp
    5350:	40da      	lsrs	r2, r3
    5352:	3908      	subs	r1, #8
    5354:	408d      	lsls	r5, r1
    5356:	0013      	movs	r3, r2
    5358:	408f      	lsls	r7, r1
    535a:	432b      	orrs	r3, r5
    535c:	469b      	mov	fp, r3
    535e:	46b8      	mov	r8, r7
    5360:	4b2e      	ldr	r3, [pc, #184]	; (541c <__aeabi_dmul+0x1ec>)
    5362:	2700      	movs	r7, #0
    5364:	469c      	mov	ip, r3
    5366:	2300      	movs	r3, #0
    5368:	4460      	add	r0, ip
    536a:	4246      	negs	r6, r0
    536c:	9301      	str	r3, [sp, #4]
    536e:	e785      	b.n	527c <__aeabi_dmul+0x4c>
    5370:	4652      	mov	r2, sl
    5372:	432a      	orrs	r2, r5
    5374:	d12c      	bne.n	53d0 <__aeabi_dmul+0x1a0>
    5376:	2500      	movs	r5, #0
    5378:	2300      	movs	r3, #0
    537a:	2202      	movs	r2, #2
    537c:	e797      	b.n	52ae <__aeabi_dmul+0x7e>
    537e:	4652      	mov	r2, sl
    5380:	432a      	orrs	r2, r5
    5382:	d021      	beq.n	53c8 <__aeabi_dmul+0x198>
    5384:	2d00      	cmp	r5, #0
    5386:	d100      	bne.n	538a <__aeabi_dmul+0x15a>
    5388:	e154      	b.n	5634 <__aeabi_dmul+0x404>
    538a:	0028      	movs	r0, r5
    538c:	f000 ff5a 	bl	6244 <__clzsi2>
    5390:	0003      	movs	r3, r0
    5392:	3b0b      	subs	r3, #11
    5394:	2b1c      	cmp	r3, #28
    5396:	dd00      	ble.n	539a <__aeabi_dmul+0x16a>
    5398:	e146      	b.n	5628 <__aeabi_dmul+0x3f8>
    539a:	211d      	movs	r1, #29
    539c:	1acb      	subs	r3, r1, r3
    539e:	4651      	mov	r1, sl
    53a0:	0002      	movs	r2, r0
    53a2:	40d9      	lsrs	r1, r3
    53a4:	4653      	mov	r3, sl
    53a6:	3a08      	subs	r2, #8
    53a8:	4095      	lsls	r5, r2
    53aa:	4093      	lsls	r3, r2
    53ac:	430d      	orrs	r5, r1
    53ae:	4a1b      	ldr	r2, [pc, #108]	; (541c <__aeabi_dmul+0x1ec>)
    53b0:	4694      	mov	ip, r2
    53b2:	4460      	add	r0, ip
    53b4:	4240      	negs	r0, r0
    53b6:	2200      	movs	r2, #0
    53b8:	e779      	b.n	52ae <__aeabi_dmul+0x7e>
    53ba:	2401      	movs	r4, #1
    53bc:	2200      	movs	r2, #0
    53be:	400c      	ands	r4, r1
    53c0:	4b12      	ldr	r3, [pc, #72]	; (540c <__aeabi_dmul+0x1dc>)
    53c2:	2500      	movs	r5, #0
    53c4:	4690      	mov	r8, r2
    53c6:	e799      	b.n	52fc <__aeabi_dmul+0xcc>
    53c8:	2500      	movs	r5, #0
    53ca:	2300      	movs	r3, #0
    53cc:	2201      	movs	r2, #1
    53ce:	e76e      	b.n	52ae <__aeabi_dmul+0x7e>
    53d0:	2203      	movs	r2, #3
    53d2:	e76c      	b.n	52ae <__aeabi_dmul+0x7e>
    53d4:	2300      	movs	r3, #0
    53d6:	469b      	mov	fp, r3
    53d8:	4698      	mov	r8, r3
    53da:	3301      	adds	r3, #1
    53dc:	2704      	movs	r7, #4
    53de:	9301      	str	r3, [sp, #4]
    53e0:	e74c      	b.n	527c <__aeabi_dmul+0x4c>
    53e2:	2303      	movs	r3, #3
    53e4:	270c      	movs	r7, #12
    53e6:	9301      	str	r3, [sp, #4]
    53e8:	e748      	b.n	527c <__aeabi_dmul+0x4c>
    53ea:	2300      	movs	r3, #0
    53ec:	2580      	movs	r5, #128	; 0x80
    53ee:	4698      	mov	r8, r3
    53f0:	2400      	movs	r4, #0
    53f2:	032d      	lsls	r5, r5, #12
    53f4:	4b05      	ldr	r3, [pc, #20]	; (540c <__aeabi_dmul+0x1dc>)
    53f6:	e781      	b.n	52fc <__aeabi_dmul+0xcc>
    53f8:	465d      	mov	r5, fp
    53fa:	4643      	mov	r3, r8
    53fc:	9a01      	ldr	r2, [sp, #4]
    53fe:	e76f      	b.n	52e0 <__aeabi_dmul+0xb0>
    5400:	465d      	mov	r5, fp
    5402:	4643      	mov	r3, r8
    5404:	0021      	movs	r1, r4
    5406:	9a01      	ldr	r2, [sp, #4]
    5408:	e76a      	b.n	52e0 <__aeabi_dmul+0xb0>
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	000007ff 	.word	0x000007ff
    5410:	fffffc01 	.word	0xfffffc01
    5414:	00006698 	.word	0x00006698
    5418:	800fffff 	.word	0x800fffff
    541c:	000003f3 	.word	0x000003f3
    5420:	4642      	mov	r2, r8
    5422:	0c12      	lsrs	r2, r2, #16
    5424:	4691      	mov	r9, r2
    5426:	0c1a      	lsrs	r2, r3, #16
    5428:	4694      	mov	ip, r2
    542a:	4642      	mov	r2, r8
    542c:	0417      	lsls	r7, r2, #16
    542e:	464a      	mov	r2, r9
    5430:	041b      	lsls	r3, r3, #16
    5432:	0c1b      	lsrs	r3, r3, #16
    5434:	435a      	muls	r2, r3
    5436:	4660      	mov	r0, ip
    5438:	4690      	mov	r8, r2
    543a:	464a      	mov	r2, r9
    543c:	4342      	muls	r2, r0
    543e:	0010      	movs	r0, r2
    5440:	9203      	str	r2, [sp, #12]
    5442:	4662      	mov	r2, ip
    5444:	001c      	movs	r4, r3
    5446:	0c3f      	lsrs	r7, r7, #16
    5448:	437a      	muls	r2, r7
    544a:	437c      	muls	r4, r7
    544c:	4442      	add	r2, r8
    544e:	9201      	str	r2, [sp, #4]
    5450:	0c22      	lsrs	r2, r4, #16
    5452:	4692      	mov	sl, r2
    5454:	9a01      	ldr	r2, [sp, #4]
    5456:	4452      	add	r2, sl
    5458:	4590      	cmp	r8, r2
    545a:	d906      	bls.n	546a <__aeabi_dmul+0x23a>
    545c:	4682      	mov	sl, r0
    545e:	2080      	movs	r0, #128	; 0x80
    5460:	0240      	lsls	r0, r0, #9
    5462:	4680      	mov	r8, r0
    5464:	44c2      	add	sl, r8
    5466:	4650      	mov	r0, sl
    5468:	9003      	str	r0, [sp, #12]
    546a:	0c10      	lsrs	r0, r2, #16
    546c:	9004      	str	r0, [sp, #16]
    546e:	4648      	mov	r0, r9
    5470:	0424      	lsls	r4, r4, #16
    5472:	0c24      	lsrs	r4, r4, #16
    5474:	0412      	lsls	r2, r2, #16
    5476:	1912      	adds	r2, r2, r4
    5478:	9205      	str	r2, [sp, #20]
    547a:	0c2a      	lsrs	r2, r5, #16
    547c:	042d      	lsls	r5, r5, #16
    547e:	0c2d      	lsrs	r5, r5, #16
    5480:	4368      	muls	r0, r5
    5482:	002c      	movs	r4, r5
    5484:	4682      	mov	sl, r0
    5486:	4648      	mov	r0, r9
    5488:	437c      	muls	r4, r7
    548a:	4350      	muls	r0, r2
    548c:	4681      	mov	r9, r0
    548e:	0c20      	lsrs	r0, r4, #16
    5490:	4680      	mov	r8, r0
    5492:	4357      	muls	r7, r2
    5494:	4457      	add	r7, sl
    5496:	4447      	add	r7, r8
    5498:	45ba      	cmp	sl, r7
    549a:	d903      	bls.n	54a4 <__aeabi_dmul+0x274>
    549c:	2080      	movs	r0, #128	; 0x80
    549e:	0240      	lsls	r0, r0, #9
    54a0:	4680      	mov	r8, r0
    54a2:	44c1      	add	r9, r8
    54a4:	0c38      	lsrs	r0, r7, #16
    54a6:	043f      	lsls	r7, r7, #16
    54a8:	46b8      	mov	r8, r7
    54aa:	4448      	add	r0, r9
    54ac:	0424      	lsls	r4, r4, #16
    54ae:	0c24      	lsrs	r4, r4, #16
    54b0:	9001      	str	r0, [sp, #4]
    54b2:	9804      	ldr	r0, [sp, #16]
    54b4:	44a0      	add	r8, r4
    54b6:	4440      	add	r0, r8
    54b8:	9004      	str	r0, [sp, #16]
    54ba:	4658      	mov	r0, fp
    54bc:	0c00      	lsrs	r0, r0, #16
    54be:	4681      	mov	r9, r0
    54c0:	4658      	mov	r0, fp
    54c2:	0404      	lsls	r4, r0, #16
    54c4:	0c20      	lsrs	r0, r4, #16
    54c6:	4682      	mov	sl, r0
    54c8:	0007      	movs	r7, r0
    54ca:	4648      	mov	r0, r9
    54cc:	435f      	muls	r7, r3
    54ce:	464c      	mov	r4, r9
    54d0:	4343      	muls	r3, r0
    54d2:	4660      	mov	r0, ip
    54d4:	4360      	muls	r0, r4
    54d6:	4664      	mov	r4, ip
    54d8:	4683      	mov	fp, r0
    54da:	4650      	mov	r0, sl
    54dc:	4344      	muls	r4, r0
    54de:	0c38      	lsrs	r0, r7, #16
    54e0:	4684      	mov	ip, r0
    54e2:	18e4      	adds	r4, r4, r3
    54e4:	4464      	add	r4, ip
    54e6:	42a3      	cmp	r3, r4
    54e8:	d903      	bls.n	54f2 <__aeabi_dmul+0x2c2>
    54ea:	2380      	movs	r3, #128	; 0x80
    54ec:	025b      	lsls	r3, r3, #9
    54ee:	469c      	mov	ip, r3
    54f0:	44e3      	add	fp, ip
    54f2:	4648      	mov	r0, r9
    54f4:	043f      	lsls	r7, r7, #16
    54f6:	0c23      	lsrs	r3, r4, #16
    54f8:	0c3f      	lsrs	r7, r7, #16
    54fa:	0424      	lsls	r4, r4, #16
    54fc:	19e4      	adds	r4, r4, r7
    54fe:	4657      	mov	r7, sl
    5500:	4368      	muls	r0, r5
    5502:	436f      	muls	r7, r5
    5504:	4684      	mov	ip, r0
    5506:	464d      	mov	r5, r9
    5508:	4650      	mov	r0, sl
    550a:	4355      	muls	r5, r2
    550c:	4342      	muls	r2, r0
    550e:	0c38      	lsrs	r0, r7, #16
    5510:	4681      	mov	r9, r0
    5512:	4462      	add	r2, ip
    5514:	444a      	add	r2, r9
    5516:	445b      	add	r3, fp
    5518:	4594      	cmp	ip, r2
    551a:	d903      	bls.n	5524 <__aeabi_dmul+0x2f4>
    551c:	2080      	movs	r0, #128	; 0x80
    551e:	0240      	lsls	r0, r0, #9
    5520:	4684      	mov	ip, r0
    5522:	4465      	add	r5, ip
    5524:	9803      	ldr	r0, [sp, #12]
    5526:	043f      	lsls	r7, r7, #16
    5528:	4683      	mov	fp, r0
    552a:	9804      	ldr	r0, [sp, #16]
    552c:	0c3f      	lsrs	r7, r7, #16
    552e:	4684      	mov	ip, r0
    5530:	44e3      	add	fp, ip
    5532:	45c3      	cmp	fp, r8
    5534:	4180      	sbcs	r0, r0
    5536:	4240      	negs	r0, r0
    5538:	4682      	mov	sl, r0
    553a:	0410      	lsls	r0, r2, #16
    553c:	4684      	mov	ip, r0
    553e:	9801      	ldr	r0, [sp, #4]
    5540:	4467      	add	r7, ip
    5542:	4684      	mov	ip, r0
    5544:	4467      	add	r7, ip
    5546:	44a3      	add	fp, r4
    5548:	46bc      	mov	ip, r7
    554a:	45a3      	cmp	fp, r4
    554c:	41a4      	sbcs	r4, r4
    554e:	4699      	mov	r9, r3
    5550:	44d4      	add	ip, sl
    5552:	4264      	negs	r4, r4
    5554:	4287      	cmp	r7, r0
    5556:	41bf      	sbcs	r7, r7
    5558:	45d4      	cmp	ip, sl
    555a:	4180      	sbcs	r0, r0
    555c:	44e1      	add	r9, ip
    555e:	46a0      	mov	r8, r4
    5560:	4599      	cmp	r9, r3
    5562:	419b      	sbcs	r3, r3
    5564:	427f      	negs	r7, r7
    5566:	4240      	negs	r0, r0
    5568:	44c8      	add	r8, r9
    556a:	4307      	orrs	r7, r0
    556c:	0c12      	lsrs	r2, r2, #16
    556e:	18ba      	adds	r2, r7, r2
    5570:	45a0      	cmp	r8, r4
    5572:	41a4      	sbcs	r4, r4
    5574:	425f      	negs	r7, r3
    5576:	003b      	movs	r3, r7
    5578:	4264      	negs	r4, r4
    557a:	4323      	orrs	r3, r4
    557c:	18d7      	adds	r7, r2, r3
    557e:	4643      	mov	r3, r8
    5580:	197d      	adds	r5, r7, r5
    5582:	0ddb      	lsrs	r3, r3, #23
    5584:	026d      	lsls	r5, r5, #9
    5586:	431d      	orrs	r5, r3
    5588:	465b      	mov	r3, fp
    558a:	025a      	lsls	r2, r3, #9
    558c:	9b05      	ldr	r3, [sp, #20]
    558e:	431a      	orrs	r2, r3
    5590:	1e53      	subs	r3, r2, #1
    5592:	419a      	sbcs	r2, r3
    5594:	465b      	mov	r3, fp
    5596:	0ddb      	lsrs	r3, r3, #23
    5598:	431a      	orrs	r2, r3
    559a:	4643      	mov	r3, r8
    559c:	025b      	lsls	r3, r3, #9
    559e:	4313      	orrs	r3, r2
    55a0:	01ea      	lsls	r2, r5, #7
    55a2:	d507      	bpl.n	55b4 <__aeabi_dmul+0x384>
    55a4:	2201      	movs	r2, #1
    55a6:	085c      	lsrs	r4, r3, #1
    55a8:	4013      	ands	r3, r2
    55aa:	4323      	orrs	r3, r4
    55ac:	07ea      	lsls	r2, r5, #31
    55ae:	9e02      	ldr	r6, [sp, #8]
    55b0:	4313      	orrs	r3, r2
    55b2:	086d      	lsrs	r5, r5, #1
    55b4:	4a57      	ldr	r2, [pc, #348]	; (5714 <__aeabi_dmul+0x4e4>)
    55b6:	18b2      	adds	r2, r6, r2
    55b8:	2a00      	cmp	r2, #0
    55ba:	dd4b      	ble.n	5654 <__aeabi_dmul+0x424>
    55bc:	0758      	lsls	r0, r3, #29
    55be:	d009      	beq.n	55d4 <__aeabi_dmul+0x3a4>
    55c0:	200f      	movs	r0, #15
    55c2:	4018      	ands	r0, r3
    55c4:	2804      	cmp	r0, #4
    55c6:	d005      	beq.n	55d4 <__aeabi_dmul+0x3a4>
    55c8:	1d18      	adds	r0, r3, #4
    55ca:	4298      	cmp	r0, r3
    55cc:	419b      	sbcs	r3, r3
    55ce:	425b      	negs	r3, r3
    55d0:	18ed      	adds	r5, r5, r3
    55d2:	0003      	movs	r3, r0
    55d4:	01e8      	lsls	r0, r5, #7
    55d6:	d504      	bpl.n	55e2 <__aeabi_dmul+0x3b2>
    55d8:	4a4f      	ldr	r2, [pc, #316]	; (5718 <__aeabi_dmul+0x4e8>)
    55da:	4015      	ands	r5, r2
    55dc:	2280      	movs	r2, #128	; 0x80
    55de:	00d2      	lsls	r2, r2, #3
    55e0:	18b2      	adds	r2, r6, r2
    55e2:	484e      	ldr	r0, [pc, #312]	; (571c <__aeabi_dmul+0x4ec>)
    55e4:	4282      	cmp	r2, r0
    55e6:	dd00      	ble.n	55ea <__aeabi_dmul+0x3ba>
    55e8:	e6e7      	b.n	53ba <__aeabi_dmul+0x18a>
    55ea:	2401      	movs	r4, #1
    55ec:	08db      	lsrs	r3, r3, #3
    55ee:	0768      	lsls	r0, r5, #29
    55f0:	4318      	orrs	r0, r3
    55f2:	026d      	lsls	r5, r5, #9
    55f4:	0553      	lsls	r3, r2, #21
    55f6:	4680      	mov	r8, r0
    55f8:	0b2d      	lsrs	r5, r5, #12
    55fa:	0d5b      	lsrs	r3, r3, #21
    55fc:	400c      	ands	r4, r1
    55fe:	e67d      	b.n	52fc <__aeabi_dmul+0xcc>
    5600:	2280      	movs	r2, #128	; 0x80
    5602:	4659      	mov	r1, fp
    5604:	0312      	lsls	r2, r2, #12
    5606:	4211      	tst	r1, r2
    5608:	d008      	beq.n	561c <__aeabi_dmul+0x3ec>
    560a:	4215      	tst	r5, r2
    560c:	d106      	bne.n	561c <__aeabi_dmul+0x3ec>
    560e:	4315      	orrs	r5, r2
    5610:	032d      	lsls	r5, r5, #12
    5612:	4698      	mov	r8, r3
    5614:	0b2d      	lsrs	r5, r5, #12
    5616:	464c      	mov	r4, r9
    5618:	4b41      	ldr	r3, [pc, #260]	; (5720 <__aeabi_dmul+0x4f0>)
    561a:	e66f      	b.n	52fc <__aeabi_dmul+0xcc>
    561c:	465d      	mov	r5, fp
    561e:	4315      	orrs	r5, r2
    5620:	032d      	lsls	r5, r5, #12
    5622:	0b2d      	lsrs	r5, r5, #12
    5624:	4b3e      	ldr	r3, [pc, #248]	; (5720 <__aeabi_dmul+0x4f0>)
    5626:	e669      	b.n	52fc <__aeabi_dmul+0xcc>
    5628:	0003      	movs	r3, r0
    562a:	4655      	mov	r5, sl
    562c:	3b28      	subs	r3, #40	; 0x28
    562e:	409d      	lsls	r5, r3
    5630:	2300      	movs	r3, #0
    5632:	e6bc      	b.n	53ae <__aeabi_dmul+0x17e>
    5634:	4650      	mov	r0, sl
    5636:	f000 fe05 	bl	6244 <__clzsi2>
    563a:	3020      	adds	r0, #32
    563c:	e6a8      	b.n	5390 <__aeabi_dmul+0x160>
    563e:	0003      	movs	r3, r0
    5640:	3b28      	subs	r3, #40	; 0x28
    5642:	409f      	lsls	r7, r3
    5644:	2300      	movs	r3, #0
    5646:	46bb      	mov	fp, r7
    5648:	4698      	mov	r8, r3
    564a:	e689      	b.n	5360 <__aeabi_dmul+0x130>
    564c:	f000 fdfa 	bl	6244 <__clzsi2>
    5650:	3020      	adds	r0, #32
    5652:	e673      	b.n	533c <__aeabi_dmul+0x10c>
    5654:	2401      	movs	r4, #1
    5656:	1aa6      	subs	r6, r4, r2
    5658:	2e38      	cmp	r6, #56	; 0x38
    565a:	dd07      	ble.n	566c <__aeabi_dmul+0x43c>
    565c:	2200      	movs	r2, #0
    565e:	400c      	ands	r4, r1
    5660:	2300      	movs	r3, #0
    5662:	2500      	movs	r5, #0
    5664:	4690      	mov	r8, r2
    5666:	e649      	b.n	52fc <__aeabi_dmul+0xcc>
    5668:	9e02      	ldr	r6, [sp, #8]
    566a:	e7a3      	b.n	55b4 <__aeabi_dmul+0x384>
    566c:	2e1f      	cmp	r6, #31
    566e:	dc20      	bgt.n	56b2 <__aeabi_dmul+0x482>
    5670:	2220      	movs	r2, #32
    5672:	002c      	movs	r4, r5
    5674:	0018      	movs	r0, r3
    5676:	1b92      	subs	r2, r2, r6
    5678:	40f0      	lsrs	r0, r6
    567a:	4094      	lsls	r4, r2
    567c:	4093      	lsls	r3, r2
    567e:	4304      	orrs	r4, r0
    5680:	1e58      	subs	r0, r3, #1
    5682:	4183      	sbcs	r3, r0
    5684:	431c      	orrs	r4, r3
    5686:	40f5      	lsrs	r5, r6
    5688:	0763      	lsls	r3, r4, #29
    568a:	d009      	beq.n	56a0 <__aeabi_dmul+0x470>
    568c:	230f      	movs	r3, #15
    568e:	4023      	ands	r3, r4
    5690:	2b04      	cmp	r3, #4
    5692:	d005      	beq.n	56a0 <__aeabi_dmul+0x470>
    5694:	0023      	movs	r3, r4
    5696:	1d1c      	adds	r4, r3, #4
    5698:	429c      	cmp	r4, r3
    569a:	4192      	sbcs	r2, r2
    569c:	4252      	negs	r2, r2
    569e:	18ad      	adds	r5, r5, r2
    56a0:	022b      	lsls	r3, r5, #8
    56a2:	d51f      	bpl.n	56e4 <__aeabi_dmul+0x4b4>
    56a4:	2401      	movs	r4, #1
    56a6:	2200      	movs	r2, #0
    56a8:	400c      	ands	r4, r1
    56aa:	2301      	movs	r3, #1
    56ac:	2500      	movs	r5, #0
    56ae:	4690      	mov	r8, r2
    56b0:	e624      	b.n	52fc <__aeabi_dmul+0xcc>
    56b2:	201f      	movs	r0, #31
    56b4:	002c      	movs	r4, r5
    56b6:	4240      	negs	r0, r0
    56b8:	1a82      	subs	r2, r0, r2
    56ba:	40d4      	lsrs	r4, r2
    56bc:	2e20      	cmp	r6, #32
    56be:	d01c      	beq.n	56fa <__aeabi_dmul+0x4ca>
    56c0:	2240      	movs	r2, #64	; 0x40
    56c2:	1b96      	subs	r6, r2, r6
    56c4:	40b5      	lsls	r5, r6
    56c6:	432b      	orrs	r3, r5
    56c8:	1e58      	subs	r0, r3, #1
    56ca:	4183      	sbcs	r3, r0
    56cc:	2007      	movs	r0, #7
    56ce:	4323      	orrs	r3, r4
    56d0:	4018      	ands	r0, r3
    56d2:	2500      	movs	r5, #0
    56d4:	2800      	cmp	r0, #0
    56d6:	d009      	beq.n	56ec <__aeabi_dmul+0x4bc>
    56d8:	220f      	movs	r2, #15
    56da:	2500      	movs	r5, #0
    56dc:	401a      	ands	r2, r3
    56de:	001c      	movs	r4, r3
    56e0:	2a04      	cmp	r2, #4
    56e2:	d1d8      	bne.n	5696 <__aeabi_dmul+0x466>
    56e4:	0023      	movs	r3, r4
    56e6:	0768      	lsls	r0, r5, #29
    56e8:	026d      	lsls	r5, r5, #9
    56ea:	0b2d      	lsrs	r5, r5, #12
    56ec:	2401      	movs	r4, #1
    56ee:	08db      	lsrs	r3, r3, #3
    56f0:	4303      	orrs	r3, r0
    56f2:	4698      	mov	r8, r3
    56f4:	400c      	ands	r4, r1
    56f6:	2300      	movs	r3, #0
    56f8:	e600      	b.n	52fc <__aeabi_dmul+0xcc>
    56fa:	2500      	movs	r5, #0
    56fc:	e7e3      	b.n	56c6 <__aeabi_dmul+0x496>
    56fe:	2280      	movs	r2, #128	; 0x80
    5700:	2401      	movs	r4, #1
    5702:	0312      	lsls	r2, r2, #12
    5704:	4315      	orrs	r5, r2
    5706:	032d      	lsls	r5, r5, #12
    5708:	4698      	mov	r8, r3
    570a:	0b2d      	lsrs	r5, r5, #12
    570c:	400c      	ands	r4, r1
    570e:	4b04      	ldr	r3, [pc, #16]	; (5720 <__aeabi_dmul+0x4f0>)
    5710:	e5f4      	b.n	52fc <__aeabi_dmul+0xcc>
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	000003ff 	.word	0x000003ff
    5718:	feffffff 	.word	0xfeffffff
    571c:	000007fe 	.word	0x000007fe
    5720:	000007ff 	.word	0x000007ff

00005724 <__aeabi_dsub>:
    5724:	b5f0      	push	{r4, r5, r6, r7, lr}
    5726:	4657      	mov	r7, sl
    5728:	464e      	mov	r6, r9
    572a:	4645      	mov	r5, r8
    572c:	b4e0      	push	{r5, r6, r7}
    572e:	000e      	movs	r6, r1
    5730:	0011      	movs	r1, r2
    5732:	0ff2      	lsrs	r2, r6, #31
    5734:	4692      	mov	sl, r2
    5736:	00c5      	lsls	r5, r0, #3
    5738:	0f42      	lsrs	r2, r0, #29
    573a:	0318      	lsls	r0, r3, #12
    573c:	0337      	lsls	r7, r6, #12
    573e:	0074      	lsls	r4, r6, #1
    5740:	0a40      	lsrs	r0, r0, #9
    5742:	0f4e      	lsrs	r6, r1, #29
    5744:	0a7f      	lsrs	r7, r7, #9
    5746:	4330      	orrs	r0, r6
    5748:	4ecf      	ldr	r6, [pc, #828]	; (5a88 <__aeabi_dsub+0x364>)
    574a:	4317      	orrs	r7, r2
    574c:	005a      	lsls	r2, r3, #1
    574e:	0d64      	lsrs	r4, r4, #21
    5750:	0d52      	lsrs	r2, r2, #21
    5752:	0fdb      	lsrs	r3, r3, #31
    5754:	00c9      	lsls	r1, r1, #3
    5756:	42b2      	cmp	r2, r6
    5758:	d100      	bne.n	575c <__aeabi_dsub+0x38>
    575a:	e0e5      	b.n	5928 <__aeabi_dsub+0x204>
    575c:	2601      	movs	r6, #1
    575e:	4073      	eors	r3, r6
    5760:	1aa6      	subs	r6, r4, r2
    5762:	46b4      	mov	ip, r6
    5764:	4553      	cmp	r3, sl
    5766:	d100      	bne.n	576a <__aeabi_dsub+0x46>
    5768:	e0af      	b.n	58ca <__aeabi_dsub+0x1a6>
    576a:	2e00      	cmp	r6, #0
    576c:	dc00      	bgt.n	5770 <__aeabi_dsub+0x4c>
    576e:	e10d      	b.n	598c <__aeabi_dsub+0x268>
    5770:	2a00      	cmp	r2, #0
    5772:	d13a      	bne.n	57ea <__aeabi_dsub+0xc6>
    5774:	0003      	movs	r3, r0
    5776:	430b      	orrs	r3, r1
    5778:	d000      	beq.n	577c <__aeabi_dsub+0x58>
    577a:	e0e4      	b.n	5946 <__aeabi_dsub+0x222>
    577c:	076b      	lsls	r3, r5, #29
    577e:	d009      	beq.n	5794 <__aeabi_dsub+0x70>
    5780:	230f      	movs	r3, #15
    5782:	402b      	ands	r3, r5
    5784:	2b04      	cmp	r3, #4
    5786:	d005      	beq.n	5794 <__aeabi_dsub+0x70>
    5788:	1d2b      	adds	r3, r5, #4
    578a:	42ab      	cmp	r3, r5
    578c:	41ad      	sbcs	r5, r5
    578e:	426d      	negs	r5, r5
    5790:	197f      	adds	r7, r7, r5
    5792:	001d      	movs	r5, r3
    5794:	023b      	lsls	r3, r7, #8
    5796:	d400      	bmi.n	579a <__aeabi_dsub+0x76>
    5798:	e088      	b.n	58ac <__aeabi_dsub+0x188>
    579a:	4bbb      	ldr	r3, [pc, #748]	; (5a88 <__aeabi_dsub+0x364>)
    579c:	3401      	adds	r4, #1
    579e:	429c      	cmp	r4, r3
    57a0:	d100      	bne.n	57a4 <__aeabi_dsub+0x80>
    57a2:	e110      	b.n	59c6 <__aeabi_dsub+0x2a2>
    57a4:	003a      	movs	r2, r7
    57a6:	4bb9      	ldr	r3, [pc, #740]	; (5a8c <__aeabi_dsub+0x368>)
    57a8:	4651      	mov	r1, sl
    57aa:	401a      	ands	r2, r3
    57ac:	2301      	movs	r3, #1
    57ae:	0750      	lsls	r0, r2, #29
    57b0:	08ed      	lsrs	r5, r5, #3
    57b2:	0252      	lsls	r2, r2, #9
    57b4:	0564      	lsls	r4, r4, #21
    57b6:	4305      	orrs	r5, r0
    57b8:	0b12      	lsrs	r2, r2, #12
    57ba:	0d64      	lsrs	r4, r4, #21
    57bc:	400b      	ands	r3, r1
    57be:	2100      	movs	r1, #0
    57c0:	0028      	movs	r0, r5
    57c2:	0312      	lsls	r2, r2, #12
    57c4:	0d0d      	lsrs	r5, r1, #20
    57c6:	0b12      	lsrs	r2, r2, #12
    57c8:	0564      	lsls	r4, r4, #21
    57ca:	052d      	lsls	r5, r5, #20
    57cc:	4315      	orrs	r5, r2
    57ce:	0862      	lsrs	r2, r4, #1
    57d0:	4caf      	ldr	r4, [pc, #700]	; (5a90 <__aeabi_dsub+0x36c>)
    57d2:	07db      	lsls	r3, r3, #31
    57d4:	402c      	ands	r4, r5
    57d6:	4314      	orrs	r4, r2
    57d8:	0064      	lsls	r4, r4, #1
    57da:	0864      	lsrs	r4, r4, #1
    57dc:	431c      	orrs	r4, r3
    57de:	0021      	movs	r1, r4
    57e0:	bc1c      	pop	{r2, r3, r4}
    57e2:	4690      	mov	r8, r2
    57e4:	4699      	mov	r9, r3
    57e6:	46a2      	mov	sl, r4
    57e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57ea:	4ba7      	ldr	r3, [pc, #668]	; (5a88 <__aeabi_dsub+0x364>)
    57ec:	429c      	cmp	r4, r3
    57ee:	d0c5      	beq.n	577c <__aeabi_dsub+0x58>
    57f0:	2380      	movs	r3, #128	; 0x80
    57f2:	041b      	lsls	r3, r3, #16
    57f4:	4318      	orrs	r0, r3
    57f6:	4663      	mov	r3, ip
    57f8:	2b38      	cmp	r3, #56	; 0x38
    57fa:	dd00      	ble.n	57fe <__aeabi_dsub+0xda>
    57fc:	e0fd      	b.n	59fa <__aeabi_dsub+0x2d6>
    57fe:	2b1f      	cmp	r3, #31
    5800:	dd00      	ble.n	5804 <__aeabi_dsub+0xe0>
    5802:	e130      	b.n	5a66 <__aeabi_dsub+0x342>
    5804:	4662      	mov	r2, ip
    5806:	2320      	movs	r3, #32
    5808:	1a9b      	subs	r3, r3, r2
    580a:	0002      	movs	r2, r0
    580c:	409a      	lsls	r2, r3
    580e:	4666      	mov	r6, ip
    5810:	4690      	mov	r8, r2
    5812:	000a      	movs	r2, r1
    5814:	4099      	lsls	r1, r3
    5816:	40f2      	lsrs	r2, r6
    5818:	4646      	mov	r6, r8
    581a:	1e4b      	subs	r3, r1, #1
    581c:	4199      	sbcs	r1, r3
    581e:	4332      	orrs	r2, r6
    5820:	4311      	orrs	r1, r2
    5822:	4663      	mov	r3, ip
    5824:	0002      	movs	r2, r0
    5826:	40da      	lsrs	r2, r3
    5828:	1a69      	subs	r1, r5, r1
    582a:	428d      	cmp	r5, r1
    582c:	419b      	sbcs	r3, r3
    582e:	000d      	movs	r5, r1
    5830:	1aba      	subs	r2, r7, r2
    5832:	425b      	negs	r3, r3
    5834:	1ad7      	subs	r7, r2, r3
    5836:	023b      	lsls	r3, r7, #8
    5838:	d535      	bpl.n	58a6 <__aeabi_dsub+0x182>
    583a:	027a      	lsls	r2, r7, #9
    583c:	0a53      	lsrs	r3, r2, #9
    583e:	4698      	mov	r8, r3
    5840:	4643      	mov	r3, r8
    5842:	2b00      	cmp	r3, #0
    5844:	d100      	bne.n	5848 <__aeabi_dsub+0x124>
    5846:	e0c4      	b.n	59d2 <__aeabi_dsub+0x2ae>
    5848:	4640      	mov	r0, r8
    584a:	f000 fcfb 	bl	6244 <__clzsi2>
    584e:	0003      	movs	r3, r0
    5850:	3b08      	subs	r3, #8
    5852:	2b1f      	cmp	r3, #31
    5854:	dd00      	ble.n	5858 <__aeabi_dsub+0x134>
    5856:	e0c5      	b.n	59e4 <__aeabi_dsub+0x2c0>
    5858:	2220      	movs	r2, #32
    585a:	0029      	movs	r1, r5
    585c:	1ad2      	subs	r2, r2, r3
    585e:	4647      	mov	r7, r8
    5860:	40d1      	lsrs	r1, r2
    5862:	409f      	lsls	r7, r3
    5864:	000a      	movs	r2, r1
    5866:	409d      	lsls	r5, r3
    5868:	433a      	orrs	r2, r7
    586a:	429c      	cmp	r4, r3
    586c:	dd00      	ble.n	5870 <__aeabi_dsub+0x14c>
    586e:	e0c0      	b.n	59f2 <__aeabi_dsub+0x2ce>
    5870:	1b1c      	subs	r4, r3, r4
    5872:	1c63      	adds	r3, r4, #1
    5874:	2b1f      	cmp	r3, #31
    5876:	dd00      	ble.n	587a <__aeabi_dsub+0x156>
    5878:	e0e4      	b.n	5a44 <__aeabi_dsub+0x320>
    587a:	2120      	movs	r1, #32
    587c:	0014      	movs	r4, r2
    587e:	0028      	movs	r0, r5
    5880:	1ac9      	subs	r1, r1, r3
    5882:	40d8      	lsrs	r0, r3
    5884:	408c      	lsls	r4, r1
    5886:	408d      	lsls	r5, r1
    5888:	4304      	orrs	r4, r0
    588a:	40da      	lsrs	r2, r3
    588c:	1e68      	subs	r0, r5, #1
    588e:	4185      	sbcs	r5, r0
    5890:	0017      	movs	r7, r2
    5892:	4325      	orrs	r5, r4
    5894:	2400      	movs	r4, #0
    5896:	e771      	b.n	577c <__aeabi_dsub+0x58>
    5898:	4642      	mov	r2, r8
    589a:	4663      	mov	r3, ip
    589c:	431a      	orrs	r2, r3
    589e:	d100      	bne.n	58a2 <__aeabi_dsub+0x17e>
    58a0:	e24c      	b.n	5d3c <__aeabi_dsub+0x618>
    58a2:	4667      	mov	r7, ip
    58a4:	4645      	mov	r5, r8
    58a6:	076b      	lsls	r3, r5, #29
    58a8:	d000      	beq.n	58ac <__aeabi_dsub+0x188>
    58aa:	e769      	b.n	5780 <__aeabi_dsub+0x5c>
    58ac:	2301      	movs	r3, #1
    58ae:	4651      	mov	r1, sl
    58b0:	0778      	lsls	r0, r7, #29
    58b2:	08ed      	lsrs	r5, r5, #3
    58b4:	08fa      	lsrs	r2, r7, #3
    58b6:	400b      	ands	r3, r1
    58b8:	4305      	orrs	r5, r0
    58ba:	4973      	ldr	r1, [pc, #460]	; (5a88 <__aeabi_dsub+0x364>)
    58bc:	428c      	cmp	r4, r1
    58be:	d038      	beq.n	5932 <__aeabi_dsub+0x20e>
    58c0:	0312      	lsls	r2, r2, #12
    58c2:	0564      	lsls	r4, r4, #21
    58c4:	0b12      	lsrs	r2, r2, #12
    58c6:	0d64      	lsrs	r4, r4, #21
    58c8:	e779      	b.n	57be <__aeabi_dsub+0x9a>
    58ca:	2e00      	cmp	r6, #0
    58cc:	dc00      	bgt.n	58d0 <__aeabi_dsub+0x1ac>
    58ce:	e09a      	b.n	5a06 <__aeabi_dsub+0x2e2>
    58d0:	2a00      	cmp	r2, #0
    58d2:	d047      	beq.n	5964 <__aeabi_dsub+0x240>
    58d4:	4a6c      	ldr	r2, [pc, #432]	; (5a88 <__aeabi_dsub+0x364>)
    58d6:	4294      	cmp	r4, r2
    58d8:	d100      	bne.n	58dc <__aeabi_dsub+0x1b8>
    58da:	e74f      	b.n	577c <__aeabi_dsub+0x58>
    58dc:	2280      	movs	r2, #128	; 0x80
    58de:	0412      	lsls	r2, r2, #16
    58e0:	4310      	orrs	r0, r2
    58e2:	4662      	mov	r2, ip
    58e4:	2a38      	cmp	r2, #56	; 0x38
    58e6:	dc00      	bgt.n	58ea <__aeabi_dsub+0x1c6>
    58e8:	e108      	b.n	5afc <__aeabi_dsub+0x3d8>
    58ea:	4301      	orrs	r1, r0
    58ec:	1e48      	subs	r0, r1, #1
    58ee:	4181      	sbcs	r1, r0
    58f0:	2200      	movs	r2, #0
    58f2:	b2c9      	uxtb	r1, r1
    58f4:	1949      	adds	r1, r1, r5
    58f6:	19d2      	adds	r2, r2, r7
    58f8:	42a9      	cmp	r1, r5
    58fa:	41bf      	sbcs	r7, r7
    58fc:	000d      	movs	r5, r1
    58fe:	427f      	negs	r7, r7
    5900:	18bf      	adds	r7, r7, r2
    5902:	023a      	lsls	r2, r7, #8
    5904:	d400      	bmi.n	5908 <__aeabi_dsub+0x1e4>
    5906:	e142      	b.n	5b8e <__aeabi_dsub+0x46a>
    5908:	4a5f      	ldr	r2, [pc, #380]	; (5a88 <__aeabi_dsub+0x364>)
    590a:	3401      	adds	r4, #1
    590c:	4294      	cmp	r4, r2
    590e:	d100      	bne.n	5912 <__aeabi_dsub+0x1ee>
    5910:	e14e      	b.n	5bb0 <__aeabi_dsub+0x48c>
    5912:	2001      	movs	r0, #1
    5914:	4a5d      	ldr	r2, [pc, #372]	; (5a8c <__aeabi_dsub+0x368>)
    5916:	0869      	lsrs	r1, r5, #1
    5918:	403a      	ands	r2, r7
    591a:	4028      	ands	r0, r5
    591c:	4308      	orrs	r0, r1
    591e:	07d5      	lsls	r5, r2, #31
    5920:	4305      	orrs	r5, r0
    5922:	0857      	lsrs	r7, r2, #1
    5924:	469a      	mov	sl, r3
    5926:	e729      	b.n	577c <__aeabi_dsub+0x58>
    5928:	0006      	movs	r6, r0
    592a:	430e      	orrs	r6, r1
    592c:	d000      	beq.n	5930 <__aeabi_dsub+0x20c>
    592e:	e717      	b.n	5760 <__aeabi_dsub+0x3c>
    5930:	e714      	b.n	575c <__aeabi_dsub+0x38>
    5932:	0029      	movs	r1, r5
    5934:	4311      	orrs	r1, r2
    5936:	d100      	bne.n	593a <__aeabi_dsub+0x216>
    5938:	e1f9      	b.n	5d2e <__aeabi_dsub+0x60a>
    593a:	2180      	movs	r1, #128	; 0x80
    593c:	0309      	lsls	r1, r1, #12
    593e:	430a      	orrs	r2, r1
    5940:	0312      	lsls	r2, r2, #12
    5942:	0b12      	lsrs	r2, r2, #12
    5944:	e73b      	b.n	57be <__aeabi_dsub+0x9a>
    5946:	2301      	movs	r3, #1
    5948:	425b      	negs	r3, r3
    594a:	4698      	mov	r8, r3
    594c:	44c4      	add	ip, r8
    594e:	4663      	mov	r3, ip
    5950:	2b00      	cmp	r3, #0
    5952:	d172      	bne.n	5a3a <__aeabi_dsub+0x316>
    5954:	1a69      	subs	r1, r5, r1
    5956:	428d      	cmp	r5, r1
    5958:	419b      	sbcs	r3, r3
    595a:	1a3f      	subs	r7, r7, r0
    595c:	425b      	negs	r3, r3
    595e:	1aff      	subs	r7, r7, r3
    5960:	000d      	movs	r5, r1
    5962:	e768      	b.n	5836 <__aeabi_dsub+0x112>
    5964:	0002      	movs	r2, r0
    5966:	430a      	orrs	r2, r1
    5968:	d100      	bne.n	596c <__aeabi_dsub+0x248>
    596a:	e707      	b.n	577c <__aeabi_dsub+0x58>
    596c:	2201      	movs	r2, #1
    596e:	4252      	negs	r2, r2
    5970:	4690      	mov	r8, r2
    5972:	44c4      	add	ip, r8
    5974:	4662      	mov	r2, ip
    5976:	2a00      	cmp	r2, #0
    5978:	d000      	beq.n	597c <__aeabi_dsub+0x258>
    597a:	e0e6      	b.n	5b4a <__aeabi_dsub+0x426>
    597c:	1869      	adds	r1, r5, r1
    597e:	42a9      	cmp	r1, r5
    5980:	41b6      	sbcs	r6, r6
    5982:	183f      	adds	r7, r7, r0
    5984:	4276      	negs	r6, r6
    5986:	19f7      	adds	r7, r6, r7
    5988:	000d      	movs	r5, r1
    598a:	e7ba      	b.n	5902 <__aeabi_dsub+0x1de>
    598c:	2e00      	cmp	r6, #0
    598e:	d000      	beq.n	5992 <__aeabi_dsub+0x26e>
    5990:	e080      	b.n	5a94 <__aeabi_dsub+0x370>
    5992:	1c62      	adds	r2, r4, #1
    5994:	0552      	lsls	r2, r2, #21
    5996:	0d52      	lsrs	r2, r2, #21
    5998:	2a01      	cmp	r2, #1
    599a:	dc00      	bgt.n	599e <__aeabi_dsub+0x27a>
    599c:	e0f9      	b.n	5b92 <__aeabi_dsub+0x46e>
    599e:	1a6a      	subs	r2, r5, r1
    59a0:	4691      	mov	r9, r2
    59a2:	454d      	cmp	r5, r9
    59a4:	41b6      	sbcs	r6, r6
    59a6:	1a3a      	subs	r2, r7, r0
    59a8:	4276      	negs	r6, r6
    59aa:	1b92      	subs	r2, r2, r6
    59ac:	4690      	mov	r8, r2
    59ae:	0212      	lsls	r2, r2, #8
    59b0:	d400      	bmi.n	59b4 <__aeabi_dsub+0x290>
    59b2:	e099      	b.n	5ae8 <__aeabi_dsub+0x3c4>
    59b4:	1b4d      	subs	r5, r1, r5
    59b6:	42a9      	cmp	r1, r5
    59b8:	4189      	sbcs	r1, r1
    59ba:	1bc7      	subs	r7, r0, r7
    59bc:	4249      	negs	r1, r1
    59be:	1a7a      	subs	r2, r7, r1
    59c0:	4690      	mov	r8, r2
    59c2:	469a      	mov	sl, r3
    59c4:	e73c      	b.n	5840 <__aeabi_dsub+0x11c>
    59c6:	4652      	mov	r2, sl
    59c8:	2301      	movs	r3, #1
    59ca:	2500      	movs	r5, #0
    59cc:	4013      	ands	r3, r2
    59ce:	2200      	movs	r2, #0
    59d0:	e6f5      	b.n	57be <__aeabi_dsub+0x9a>
    59d2:	0028      	movs	r0, r5
    59d4:	f000 fc36 	bl	6244 <__clzsi2>
    59d8:	3020      	adds	r0, #32
    59da:	0003      	movs	r3, r0
    59dc:	3b08      	subs	r3, #8
    59de:	2b1f      	cmp	r3, #31
    59e0:	dc00      	bgt.n	59e4 <__aeabi_dsub+0x2c0>
    59e2:	e739      	b.n	5858 <__aeabi_dsub+0x134>
    59e4:	002a      	movs	r2, r5
    59e6:	3828      	subs	r0, #40	; 0x28
    59e8:	4082      	lsls	r2, r0
    59ea:	2500      	movs	r5, #0
    59ec:	429c      	cmp	r4, r3
    59ee:	dc00      	bgt.n	59f2 <__aeabi_dsub+0x2ce>
    59f0:	e73e      	b.n	5870 <__aeabi_dsub+0x14c>
    59f2:	4f26      	ldr	r7, [pc, #152]	; (5a8c <__aeabi_dsub+0x368>)
    59f4:	1ae4      	subs	r4, r4, r3
    59f6:	4017      	ands	r7, r2
    59f8:	e6c0      	b.n	577c <__aeabi_dsub+0x58>
    59fa:	4301      	orrs	r1, r0
    59fc:	1e48      	subs	r0, r1, #1
    59fe:	4181      	sbcs	r1, r0
    5a00:	2200      	movs	r2, #0
    5a02:	b2c9      	uxtb	r1, r1
    5a04:	e710      	b.n	5828 <__aeabi_dsub+0x104>
    5a06:	2e00      	cmp	r6, #0
    5a08:	d000      	beq.n	5a0c <__aeabi_dsub+0x2e8>
    5a0a:	e0f1      	b.n	5bf0 <__aeabi_dsub+0x4cc>
    5a0c:	1c62      	adds	r2, r4, #1
    5a0e:	4694      	mov	ip, r2
    5a10:	0552      	lsls	r2, r2, #21
    5a12:	0d52      	lsrs	r2, r2, #21
    5a14:	2a01      	cmp	r2, #1
    5a16:	dc00      	bgt.n	5a1a <__aeabi_dsub+0x2f6>
    5a18:	e0a0      	b.n	5b5c <__aeabi_dsub+0x438>
    5a1a:	4a1b      	ldr	r2, [pc, #108]	; (5a88 <__aeabi_dsub+0x364>)
    5a1c:	4594      	cmp	ip, r2
    5a1e:	d100      	bne.n	5a22 <__aeabi_dsub+0x2fe>
    5a20:	e0c5      	b.n	5bae <__aeabi_dsub+0x48a>
    5a22:	1869      	adds	r1, r5, r1
    5a24:	42a9      	cmp	r1, r5
    5a26:	4192      	sbcs	r2, r2
    5a28:	183f      	adds	r7, r7, r0
    5a2a:	4252      	negs	r2, r2
    5a2c:	19d2      	adds	r2, r2, r7
    5a2e:	0849      	lsrs	r1, r1, #1
    5a30:	07d5      	lsls	r5, r2, #31
    5a32:	430d      	orrs	r5, r1
    5a34:	0857      	lsrs	r7, r2, #1
    5a36:	4664      	mov	r4, ip
    5a38:	e6a0      	b.n	577c <__aeabi_dsub+0x58>
    5a3a:	4b13      	ldr	r3, [pc, #76]	; (5a88 <__aeabi_dsub+0x364>)
    5a3c:	429c      	cmp	r4, r3
    5a3e:	d000      	beq.n	5a42 <__aeabi_dsub+0x31e>
    5a40:	e6d9      	b.n	57f6 <__aeabi_dsub+0xd2>
    5a42:	e69b      	b.n	577c <__aeabi_dsub+0x58>
    5a44:	0011      	movs	r1, r2
    5a46:	3c1f      	subs	r4, #31
    5a48:	40e1      	lsrs	r1, r4
    5a4a:	000c      	movs	r4, r1
    5a4c:	2b20      	cmp	r3, #32
    5a4e:	d100      	bne.n	5a52 <__aeabi_dsub+0x32e>
    5a50:	e080      	b.n	5b54 <__aeabi_dsub+0x430>
    5a52:	2140      	movs	r1, #64	; 0x40
    5a54:	1acb      	subs	r3, r1, r3
    5a56:	409a      	lsls	r2, r3
    5a58:	4315      	orrs	r5, r2
    5a5a:	1e6a      	subs	r2, r5, #1
    5a5c:	4195      	sbcs	r5, r2
    5a5e:	2700      	movs	r7, #0
    5a60:	4325      	orrs	r5, r4
    5a62:	2400      	movs	r4, #0
    5a64:	e71f      	b.n	58a6 <__aeabi_dsub+0x182>
    5a66:	4663      	mov	r3, ip
    5a68:	0002      	movs	r2, r0
    5a6a:	3b20      	subs	r3, #32
    5a6c:	40da      	lsrs	r2, r3
    5a6e:	4663      	mov	r3, ip
    5a70:	2b20      	cmp	r3, #32
    5a72:	d071      	beq.n	5b58 <__aeabi_dsub+0x434>
    5a74:	2340      	movs	r3, #64	; 0x40
    5a76:	4666      	mov	r6, ip
    5a78:	1b9b      	subs	r3, r3, r6
    5a7a:	4098      	lsls	r0, r3
    5a7c:	4301      	orrs	r1, r0
    5a7e:	1e48      	subs	r0, r1, #1
    5a80:	4181      	sbcs	r1, r0
    5a82:	4311      	orrs	r1, r2
    5a84:	2200      	movs	r2, #0
    5a86:	e6cf      	b.n	5828 <__aeabi_dsub+0x104>
    5a88:	000007ff 	.word	0x000007ff
    5a8c:	ff7fffff 	.word	0xff7fffff
    5a90:	800fffff 	.word	0x800fffff
    5a94:	2c00      	cmp	r4, #0
    5a96:	d048      	beq.n	5b2a <__aeabi_dsub+0x406>
    5a98:	4cca      	ldr	r4, [pc, #808]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5a9a:	42a2      	cmp	r2, r4
    5a9c:	d100      	bne.n	5aa0 <__aeabi_dsub+0x37c>
    5a9e:	e0a2      	b.n	5be6 <__aeabi_dsub+0x4c2>
    5aa0:	4274      	negs	r4, r6
    5aa2:	46a1      	mov	r9, r4
    5aa4:	2480      	movs	r4, #128	; 0x80
    5aa6:	0424      	lsls	r4, r4, #16
    5aa8:	4327      	orrs	r7, r4
    5aaa:	464c      	mov	r4, r9
    5aac:	2c38      	cmp	r4, #56	; 0x38
    5aae:	dd00      	ble.n	5ab2 <__aeabi_dsub+0x38e>
    5ab0:	e0db      	b.n	5c6a <__aeabi_dsub+0x546>
    5ab2:	2c1f      	cmp	r4, #31
    5ab4:	dd00      	ble.n	5ab8 <__aeabi_dsub+0x394>
    5ab6:	e144      	b.n	5d42 <__aeabi_dsub+0x61e>
    5ab8:	464e      	mov	r6, r9
    5aba:	2420      	movs	r4, #32
    5abc:	1ba4      	subs	r4, r4, r6
    5abe:	003e      	movs	r6, r7
    5ac0:	40a6      	lsls	r6, r4
    5ac2:	46a2      	mov	sl, r4
    5ac4:	46b0      	mov	r8, r6
    5ac6:	464c      	mov	r4, r9
    5ac8:	002e      	movs	r6, r5
    5aca:	40e6      	lsrs	r6, r4
    5acc:	46b4      	mov	ip, r6
    5ace:	4646      	mov	r6, r8
    5ad0:	4664      	mov	r4, ip
    5ad2:	4326      	orrs	r6, r4
    5ad4:	4654      	mov	r4, sl
    5ad6:	40a5      	lsls	r5, r4
    5ad8:	1e6c      	subs	r4, r5, #1
    5ada:	41a5      	sbcs	r5, r4
    5adc:	0034      	movs	r4, r6
    5ade:	432c      	orrs	r4, r5
    5ae0:	464d      	mov	r5, r9
    5ae2:	40ef      	lsrs	r7, r5
    5ae4:	1b0d      	subs	r5, r1, r4
    5ae6:	e028      	b.n	5b3a <__aeabi_dsub+0x416>
    5ae8:	464a      	mov	r2, r9
    5aea:	4643      	mov	r3, r8
    5aec:	464d      	mov	r5, r9
    5aee:	431a      	orrs	r2, r3
    5af0:	d000      	beq.n	5af4 <__aeabi_dsub+0x3d0>
    5af2:	e6a5      	b.n	5840 <__aeabi_dsub+0x11c>
    5af4:	2300      	movs	r3, #0
    5af6:	2400      	movs	r4, #0
    5af8:	2500      	movs	r5, #0
    5afa:	e6de      	b.n	58ba <__aeabi_dsub+0x196>
    5afc:	2a1f      	cmp	r2, #31
    5afe:	dc5a      	bgt.n	5bb6 <__aeabi_dsub+0x492>
    5b00:	4666      	mov	r6, ip
    5b02:	2220      	movs	r2, #32
    5b04:	1b92      	subs	r2, r2, r6
    5b06:	0006      	movs	r6, r0
    5b08:	4096      	lsls	r6, r2
    5b0a:	4691      	mov	r9, r2
    5b0c:	46b0      	mov	r8, r6
    5b0e:	4662      	mov	r2, ip
    5b10:	000e      	movs	r6, r1
    5b12:	40d6      	lsrs	r6, r2
    5b14:	4642      	mov	r2, r8
    5b16:	4316      	orrs	r6, r2
    5b18:	464a      	mov	r2, r9
    5b1a:	4091      	lsls	r1, r2
    5b1c:	1e4a      	subs	r2, r1, #1
    5b1e:	4191      	sbcs	r1, r2
    5b20:	0002      	movs	r2, r0
    5b22:	4660      	mov	r0, ip
    5b24:	4331      	orrs	r1, r6
    5b26:	40c2      	lsrs	r2, r0
    5b28:	e6e4      	b.n	58f4 <__aeabi_dsub+0x1d0>
    5b2a:	003c      	movs	r4, r7
    5b2c:	432c      	orrs	r4, r5
    5b2e:	d05a      	beq.n	5be6 <__aeabi_dsub+0x4c2>
    5b30:	43f4      	mvns	r4, r6
    5b32:	46a1      	mov	r9, r4
    5b34:	2c00      	cmp	r4, #0
    5b36:	d152      	bne.n	5bde <__aeabi_dsub+0x4ba>
    5b38:	1b4d      	subs	r5, r1, r5
    5b3a:	42a9      	cmp	r1, r5
    5b3c:	4189      	sbcs	r1, r1
    5b3e:	1bc7      	subs	r7, r0, r7
    5b40:	4249      	negs	r1, r1
    5b42:	1a7f      	subs	r7, r7, r1
    5b44:	0014      	movs	r4, r2
    5b46:	469a      	mov	sl, r3
    5b48:	e675      	b.n	5836 <__aeabi_dsub+0x112>
    5b4a:	4a9e      	ldr	r2, [pc, #632]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5b4c:	4294      	cmp	r4, r2
    5b4e:	d000      	beq.n	5b52 <__aeabi_dsub+0x42e>
    5b50:	e6c7      	b.n	58e2 <__aeabi_dsub+0x1be>
    5b52:	e613      	b.n	577c <__aeabi_dsub+0x58>
    5b54:	2200      	movs	r2, #0
    5b56:	e77f      	b.n	5a58 <__aeabi_dsub+0x334>
    5b58:	2000      	movs	r0, #0
    5b5a:	e78f      	b.n	5a7c <__aeabi_dsub+0x358>
    5b5c:	2c00      	cmp	r4, #0
    5b5e:	d000      	beq.n	5b62 <__aeabi_dsub+0x43e>
    5b60:	e0c8      	b.n	5cf4 <__aeabi_dsub+0x5d0>
    5b62:	003b      	movs	r3, r7
    5b64:	432b      	orrs	r3, r5
    5b66:	d100      	bne.n	5b6a <__aeabi_dsub+0x446>
    5b68:	e10f      	b.n	5d8a <__aeabi_dsub+0x666>
    5b6a:	0003      	movs	r3, r0
    5b6c:	430b      	orrs	r3, r1
    5b6e:	d100      	bne.n	5b72 <__aeabi_dsub+0x44e>
    5b70:	e604      	b.n	577c <__aeabi_dsub+0x58>
    5b72:	1869      	adds	r1, r5, r1
    5b74:	42a9      	cmp	r1, r5
    5b76:	419b      	sbcs	r3, r3
    5b78:	183f      	adds	r7, r7, r0
    5b7a:	425b      	negs	r3, r3
    5b7c:	19df      	adds	r7, r3, r7
    5b7e:	023b      	lsls	r3, r7, #8
    5b80:	d400      	bmi.n	5b84 <__aeabi_dsub+0x460>
    5b82:	e11a      	b.n	5dba <__aeabi_dsub+0x696>
    5b84:	4b90      	ldr	r3, [pc, #576]	; (5dc8 <__aeabi_dsub+0x6a4>)
    5b86:	000d      	movs	r5, r1
    5b88:	401f      	ands	r7, r3
    5b8a:	4664      	mov	r4, ip
    5b8c:	e5f6      	b.n	577c <__aeabi_dsub+0x58>
    5b8e:	469a      	mov	sl, r3
    5b90:	e689      	b.n	58a6 <__aeabi_dsub+0x182>
    5b92:	003a      	movs	r2, r7
    5b94:	432a      	orrs	r2, r5
    5b96:	2c00      	cmp	r4, #0
    5b98:	d15c      	bne.n	5c54 <__aeabi_dsub+0x530>
    5b9a:	2a00      	cmp	r2, #0
    5b9c:	d175      	bne.n	5c8a <__aeabi_dsub+0x566>
    5b9e:	0002      	movs	r2, r0
    5ba0:	430a      	orrs	r2, r1
    5ba2:	d100      	bne.n	5ba6 <__aeabi_dsub+0x482>
    5ba4:	e0ca      	b.n	5d3c <__aeabi_dsub+0x618>
    5ba6:	0007      	movs	r7, r0
    5ba8:	000d      	movs	r5, r1
    5baa:	469a      	mov	sl, r3
    5bac:	e5e6      	b.n	577c <__aeabi_dsub+0x58>
    5bae:	4664      	mov	r4, ip
    5bb0:	2200      	movs	r2, #0
    5bb2:	2500      	movs	r5, #0
    5bb4:	e681      	b.n	58ba <__aeabi_dsub+0x196>
    5bb6:	4662      	mov	r2, ip
    5bb8:	0006      	movs	r6, r0
    5bba:	3a20      	subs	r2, #32
    5bbc:	40d6      	lsrs	r6, r2
    5bbe:	4662      	mov	r2, ip
    5bc0:	46b0      	mov	r8, r6
    5bc2:	2a20      	cmp	r2, #32
    5bc4:	d100      	bne.n	5bc8 <__aeabi_dsub+0x4a4>
    5bc6:	e0b7      	b.n	5d38 <__aeabi_dsub+0x614>
    5bc8:	2240      	movs	r2, #64	; 0x40
    5bca:	4666      	mov	r6, ip
    5bcc:	1b92      	subs	r2, r2, r6
    5bce:	4090      	lsls	r0, r2
    5bd0:	4301      	orrs	r1, r0
    5bd2:	4642      	mov	r2, r8
    5bd4:	1e48      	subs	r0, r1, #1
    5bd6:	4181      	sbcs	r1, r0
    5bd8:	4311      	orrs	r1, r2
    5bda:	2200      	movs	r2, #0
    5bdc:	e68a      	b.n	58f4 <__aeabi_dsub+0x1d0>
    5bde:	4c79      	ldr	r4, [pc, #484]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5be0:	42a2      	cmp	r2, r4
    5be2:	d000      	beq.n	5be6 <__aeabi_dsub+0x4c2>
    5be4:	e761      	b.n	5aaa <__aeabi_dsub+0x386>
    5be6:	0007      	movs	r7, r0
    5be8:	000d      	movs	r5, r1
    5bea:	0014      	movs	r4, r2
    5bec:	469a      	mov	sl, r3
    5bee:	e5c5      	b.n	577c <__aeabi_dsub+0x58>
    5bf0:	2c00      	cmp	r4, #0
    5bf2:	d141      	bne.n	5c78 <__aeabi_dsub+0x554>
    5bf4:	003c      	movs	r4, r7
    5bf6:	432c      	orrs	r4, r5
    5bf8:	d078      	beq.n	5cec <__aeabi_dsub+0x5c8>
    5bfa:	43f4      	mvns	r4, r6
    5bfc:	46a1      	mov	r9, r4
    5bfe:	2c00      	cmp	r4, #0
    5c00:	d020      	beq.n	5c44 <__aeabi_dsub+0x520>
    5c02:	4c70      	ldr	r4, [pc, #448]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5c04:	42a2      	cmp	r2, r4
    5c06:	d071      	beq.n	5cec <__aeabi_dsub+0x5c8>
    5c08:	464c      	mov	r4, r9
    5c0a:	2c38      	cmp	r4, #56	; 0x38
    5c0c:	dd00      	ble.n	5c10 <__aeabi_dsub+0x4ec>
    5c0e:	e0b2      	b.n	5d76 <__aeabi_dsub+0x652>
    5c10:	2c1f      	cmp	r4, #31
    5c12:	dd00      	ble.n	5c16 <__aeabi_dsub+0x4f2>
    5c14:	e0bc      	b.n	5d90 <__aeabi_dsub+0x66c>
    5c16:	2620      	movs	r6, #32
    5c18:	1b34      	subs	r4, r6, r4
    5c1a:	46a2      	mov	sl, r4
    5c1c:	003c      	movs	r4, r7
    5c1e:	4656      	mov	r6, sl
    5c20:	40b4      	lsls	r4, r6
    5c22:	464e      	mov	r6, r9
    5c24:	46a0      	mov	r8, r4
    5c26:	002c      	movs	r4, r5
    5c28:	40f4      	lsrs	r4, r6
    5c2a:	46a4      	mov	ip, r4
    5c2c:	4644      	mov	r4, r8
    5c2e:	4666      	mov	r6, ip
    5c30:	4334      	orrs	r4, r6
    5c32:	46a4      	mov	ip, r4
    5c34:	4654      	mov	r4, sl
    5c36:	40a5      	lsls	r5, r4
    5c38:	4664      	mov	r4, ip
    5c3a:	1e6e      	subs	r6, r5, #1
    5c3c:	41b5      	sbcs	r5, r6
    5c3e:	4325      	orrs	r5, r4
    5c40:	464c      	mov	r4, r9
    5c42:	40e7      	lsrs	r7, r4
    5c44:	186d      	adds	r5, r5, r1
    5c46:	428d      	cmp	r5, r1
    5c48:	4189      	sbcs	r1, r1
    5c4a:	183f      	adds	r7, r7, r0
    5c4c:	4249      	negs	r1, r1
    5c4e:	19cf      	adds	r7, r1, r7
    5c50:	0014      	movs	r4, r2
    5c52:	e656      	b.n	5902 <__aeabi_dsub+0x1de>
    5c54:	2a00      	cmp	r2, #0
    5c56:	d12f      	bne.n	5cb8 <__aeabi_dsub+0x594>
    5c58:	0002      	movs	r2, r0
    5c5a:	430a      	orrs	r2, r1
    5c5c:	d100      	bne.n	5c60 <__aeabi_dsub+0x53c>
    5c5e:	e084      	b.n	5d6a <__aeabi_dsub+0x646>
    5c60:	0007      	movs	r7, r0
    5c62:	000d      	movs	r5, r1
    5c64:	469a      	mov	sl, r3
    5c66:	4c57      	ldr	r4, [pc, #348]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5c68:	e588      	b.n	577c <__aeabi_dsub+0x58>
    5c6a:	433d      	orrs	r5, r7
    5c6c:	1e6f      	subs	r7, r5, #1
    5c6e:	41bd      	sbcs	r5, r7
    5c70:	b2ec      	uxtb	r4, r5
    5c72:	2700      	movs	r7, #0
    5c74:	1b0d      	subs	r5, r1, r4
    5c76:	e760      	b.n	5b3a <__aeabi_dsub+0x416>
    5c78:	4c52      	ldr	r4, [pc, #328]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5c7a:	42a2      	cmp	r2, r4
    5c7c:	d036      	beq.n	5cec <__aeabi_dsub+0x5c8>
    5c7e:	4274      	negs	r4, r6
    5c80:	2680      	movs	r6, #128	; 0x80
    5c82:	0436      	lsls	r6, r6, #16
    5c84:	46a1      	mov	r9, r4
    5c86:	4337      	orrs	r7, r6
    5c88:	e7be      	b.n	5c08 <__aeabi_dsub+0x4e4>
    5c8a:	0002      	movs	r2, r0
    5c8c:	430a      	orrs	r2, r1
    5c8e:	d100      	bne.n	5c92 <__aeabi_dsub+0x56e>
    5c90:	e574      	b.n	577c <__aeabi_dsub+0x58>
    5c92:	1a6a      	subs	r2, r5, r1
    5c94:	4690      	mov	r8, r2
    5c96:	4545      	cmp	r5, r8
    5c98:	41b6      	sbcs	r6, r6
    5c9a:	1a3a      	subs	r2, r7, r0
    5c9c:	4276      	negs	r6, r6
    5c9e:	1b92      	subs	r2, r2, r6
    5ca0:	4694      	mov	ip, r2
    5ca2:	0212      	lsls	r2, r2, #8
    5ca4:	d400      	bmi.n	5ca8 <__aeabi_dsub+0x584>
    5ca6:	e5f7      	b.n	5898 <__aeabi_dsub+0x174>
    5ca8:	1b4d      	subs	r5, r1, r5
    5caa:	42a9      	cmp	r1, r5
    5cac:	4189      	sbcs	r1, r1
    5cae:	1bc7      	subs	r7, r0, r7
    5cb0:	4249      	negs	r1, r1
    5cb2:	1a7f      	subs	r7, r7, r1
    5cb4:	469a      	mov	sl, r3
    5cb6:	e561      	b.n	577c <__aeabi_dsub+0x58>
    5cb8:	0002      	movs	r2, r0
    5cba:	430a      	orrs	r2, r1
    5cbc:	d03a      	beq.n	5d34 <__aeabi_dsub+0x610>
    5cbe:	08ed      	lsrs	r5, r5, #3
    5cc0:	077c      	lsls	r4, r7, #29
    5cc2:	432c      	orrs	r4, r5
    5cc4:	2580      	movs	r5, #128	; 0x80
    5cc6:	08fa      	lsrs	r2, r7, #3
    5cc8:	032d      	lsls	r5, r5, #12
    5cca:	422a      	tst	r2, r5
    5ccc:	d008      	beq.n	5ce0 <__aeabi_dsub+0x5bc>
    5cce:	08c7      	lsrs	r7, r0, #3
    5cd0:	422f      	tst	r7, r5
    5cd2:	d105      	bne.n	5ce0 <__aeabi_dsub+0x5bc>
    5cd4:	0745      	lsls	r5, r0, #29
    5cd6:	002c      	movs	r4, r5
    5cd8:	003a      	movs	r2, r7
    5cda:	469a      	mov	sl, r3
    5cdc:	08c9      	lsrs	r1, r1, #3
    5cde:	430c      	orrs	r4, r1
    5ce0:	0f67      	lsrs	r7, r4, #29
    5ce2:	00d2      	lsls	r2, r2, #3
    5ce4:	00e5      	lsls	r5, r4, #3
    5ce6:	4317      	orrs	r7, r2
    5ce8:	4c36      	ldr	r4, [pc, #216]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5cea:	e547      	b.n	577c <__aeabi_dsub+0x58>
    5cec:	0007      	movs	r7, r0
    5cee:	000d      	movs	r5, r1
    5cf0:	0014      	movs	r4, r2
    5cf2:	e543      	b.n	577c <__aeabi_dsub+0x58>
    5cf4:	003a      	movs	r2, r7
    5cf6:	432a      	orrs	r2, r5
    5cf8:	d043      	beq.n	5d82 <__aeabi_dsub+0x65e>
    5cfa:	0002      	movs	r2, r0
    5cfc:	430a      	orrs	r2, r1
    5cfe:	d019      	beq.n	5d34 <__aeabi_dsub+0x610>
    5d00:	08ed      	lsrs	r5, r5, #3
    5d02:	077c      	lsls	r4, r7, #29
    5d04:	432c      	orrs	r4, r5
    5d06:	2580      	movs	r5, #128	; 0x80
    5d08:	08fa      	lsrs	r2, r7, #3
    5d0a:	032d      	lsls	r5, r5, #12
    5d0c:	422a      	tst	r2, r5
    5d0e:	d007      	beq.n	5d20 <__aeabi_dsub+0x5fc>
    5d10:	08c6      	lsrs	r6, r0, #3
    5d12:	422e      	tst	r6, r5
    5d14:	d104      	bne.n	5d20 <__aeabi_dsub+0x5fc>
    5d16:	0747      	lsls	r7, r0, #29
    5d18:	003c      	movs	r4, r7
    5d1a:	0032      	movs	r2, r6
    5d1c:	08c9      	lsrs	r1, r1, #3
    5d1e:	430c      	orrs	r4, r1
    5d20:	00d7      	lsls	r7, r2, #3
    5d22:	0f62      	lsrs	r2, r4, #29
    5d24:	00e5      	lsls	r5, r4, #3
    5d26:	4317      	orrs	r7, r2
    5d28:	469a      	mov	sl, r3
    5d2a:	4c26      	ldr	r4, [pc, #152]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5d2c:	e526      	b.n	577c <__aeabi_dsub+0x58>
    5d2e:	2200      	movs	r2, #0
    5d30:	2500      	movs	r5, #0
    5d32:	e544      	b.n	57be <__aeabi_dsub+0x9a>
    5d34:	4c23      	ldr	r4, [pc, #140]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5d36:	e521      	b.n	577c <__aeabi_dsub+0x58>
    5d38:	2000      	movs	r0, #0
    5d3a:	e749      	b.n	5bd0 <__aeabi_dsub+0x4ac>
    5d3c:	2300      	movs	r3, #0
    5d3e:	2500      	movs	r5, #0
    5d40:	e5bb      	b.n	58ba <__aeabi_dsub+0x196>
    5d42:	464c      	mov	r4, r9
    5d44:	003e      	movs	r6, r7
    5d46:	3c20      	subs	r4, #32
    5d48:	40e6      	lsrs	r6, r4
    5d4a:	464c      	mov	r4, r9
    5d4c:	46b4      	mov	ip, r6
    5d4e:	2c20      	cmp	r4, #32
    5d50:	d031      	beq.n	5db6 <__aeabi_dsub+0x692>
    5d52:	2440      	movs	r4, #64	; 0x40
    5d54:	464e      	mov	r6, r9
    5d56:	1ba6      	subs	r6, r4, r6
    5d58:	40b7      	lsls	r7, r6
    5d5a:	433d      	orrs	r5, r7
    5d5c:	1e6c      	subs	r4, r5, #1
    5d5e:	41a5      	sbcs	r5, r4
    5d60:	4664      	mov	r4, ip
    5d62:	432c      	orrs	r4, r5
    5d64:	2700      	movs	r7, #0
    5d66:	1b0d      	subs	r5, r1, r4
    5d68:	e6e7      	b.n	5b3a <__aeabi_dsub+0x416>
    5d6a:	2280      	movs	r2, #128	; 0x80
    5d6c:	2300      	movs	r3, #0
    5d6e:	0312      	lsls	r2, r2, #12
    5d70:	4c14      	ldr	r4, [pc, #80]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5d72:	2500      	movs	r5, #0
    5d74:	e5a1      	b.n	58ba <__aeabi_dsub+0x196>
    5d76:	433d      	orrs	r5, r7
    5d78:	1e6f      	subs	r7, r5, #1
    5d7a:	41bd      	sbcs	r5, r7
    5d7c:	2700      	movs	r7, #0
    5d7e:	b2ed      	uxtb	r5, r5
    5d80:	e760      	b.n	5c44 <__aeabi_dsub+0x520>
    5d82:	0007      	movs	r7, r0
    5d84:	000d      	movs	r5, r1
    5d86:	4c0f      	ldr	r4, [pc, #60]	; (5dc4 <__aeabi_dsub+0x6a0>)
    5d88:	e4f8      	b.n	577c <__aeabi_dsub+0x58>
    5d8a:	0007      	movs	r7, r0
    5d8c:	000d      	movs	r5, r1
    5d8e:	e4f5      	b.n	577c <__aeabi_dsub+0x58>
    5d90:	464e      	mov	r6, r9
    5d92:	003c      	movs	r4, r7
    5d94:	3e20      	subs	r6, #32
    5d96:	40f4      	lsrs	r4, r6
    5d98:	46a0      	mov	r8, r4
    5d9a:	464c      	mov	r4, r9
    5d9c:	2c20      	cmp	r4, #32
    5d9e:	d00e      	beq.n	5dbe <__aeabi_dsub+0x69a>
    5da0:	2440      	movs	r4, #64	; 0x40
    5da2:	464e      	mov	r6, r9
    5da4:	1ba4      	subs	r4, r4, r6
    5da6:	40a7      	lsls	r7, r4
    5da8:	433d      	orrs	r5, r7
    5daa:	1e6f      	subs	r7, r5, #1
    5dac:	41bd      	sbcs	r5, r7
    5dae:	4644      	mov	r4, r8
    5db0:	2700      	movs	r7, #0
    5db2:	4325      	orrs	r5, r4
    5db4:	e746      	b.n	5c44 <__aeabi_dsub+0x520>
    5db6:	2700      	movs	r7, #0
    5db8:	e7cf      	b.n	5d5a <__aeabi_dsub+0x636>
    5dba:	000d      	movs	r5, r1
    5dbc:	e573      	b.n	58a6 <__aeabi_dsub+0x182>
    5dbe:	2700      	movs	r7, #0
    5dc0:	e7f2      	b.n	5da8 <__aeabi_dsub+0x684>
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	000007ff 	.word	0x000007ff
    5dc8:	ff7fffff 	.word	0xff7fffff

00005dcc <__aeabi_dcmpun>:
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	4e0e      	ldr	r6, [pc, #56]	; (5e08 <__aeabi_dcmpun+0x3c>)
    5dd0:	030c      	lsls	r4, r1, #12
    5dd2:	031d      	lsls	r5, r3, #12
    5dd4:	0049      	lsls	r1, r1, #1
    5dd6:	005b      	lsls	r3, r3, #1
    5dd8:	0b24      	lsrs	r4, r4, #12
    5dda:	0d49      	lsrs	r1, r1, #21
    5ddc:	0b2d      	lsrs	r5, r5, #12
    5dde:	0d5b      	lsrs	r3, r3, #21
    5de0:	42b1      	cmp	r1, r6
    5de2:	d004      	beq.n	5dee <__aeabi_dcmpun+0x22>
    5de4:	4908      	ldr	r1, [pc, #32]	; (5e08 <__aeabi_dcmpun+0x3c>)
    5de6:	2000      	movs	r0, #0
    5de8:	428b      	cmp	r3, r1
    5dea:	d008      	beq.n	5dfe <__aeabi_dcmpun+0x32>
    5dec:	bd70      	pop	{r4, r5, r6, pc}
    5dee:	4304      	orrs	r4, r0
    5df0:	2001      	movs	r0, #1
    5df2:	2c00      	cmp	r4, #0
    5df4:	d1fa      	bne.n	5dec <__aeabi_dcmpun+0x20>
    5df6:	4904      	ldr	r1, [pc, #16]	; (5e08 <__aeabi_dcmpun+0x3c>)
    5df8:	2000      	movs	r0, #0
    5dfa:	428b      	cmp	r3, r1
    5dfc:	d1f6      	bne.n	5dec <__aeabi_dcmpun+0x20>
    5dfe:	4315      	orrs	r5, r2
    5e00:	0028      	movs	r0, r5
    5e02:	1e45      	subs	r5, r0, #1
    5e04:	41a8      	sbcs	r0, r5
    5e06:	e7f1      	b.n	5dec <__aeabi_dcmpun+0x20>
    5e08:	000007ff 	.word	0x000007ff

00005e0c <__aeabi_d2iz>:
    5e0c:	030b      	lsls	r3, r1, #12
    5e0e:	b530      	push	{r4, r5, lr}
    5e10:	4d13      	ldr	r5, [pc, #76]	; (5e60 <__aeabi_d2iz+0x54>)
    5e12:	0b1a      	lsrs	r2, r3, #12
    5e14:	004b      	lsls	r3, r1, #1
    5e16:	0d5b      	lsrs	r3, r3, #21
    5e18:	0fc9      	lsrs	r1, r1, #31
    5e1a:	2400      	movs	r4, #0
    5e1c:	42ab      	cmp	r3, r5
    5e1e:	dd11      	ble.n	5e44 <__aeabi_d2iz+0x38>
    5e20:	4c10      	ldr	r4, [pc, #64]	; (5e64 <__aeabi_d2iz+0x58>)
    5e22:	42a3      	cmp	r3, r4
    5e24:	dc10      	bgt.n	5e48 <__aeabi_d2iz+0x3c>
    5e26:	2480      	movs	r4, #128	; 0x80
    5e28:	0364      	lsls	r4, r4, #13
    5e2a:	4322      	orrs	r2, r4
    5e2c:	4c0e      	ldr	r4, [pc, #56]	; (5e68 <__aeabi_d2iz+0x5c>)
    5e2e:	1ae4      	subs	r4, r4, r3
    5e30:	2c1f      	cmp	r4, #31
    5e32:	dd0c      	ble.n	5e4e <__aeabi_d2iz+0x42>
    5e34:	480d      	ldr	r0, [pc, #52]	; (5e6c <__aeabi_d2iz+0x60>)
    5e36:	1ac3      	subs	r3, r0, r3
    5e38:	40da      	lsrs	r2, r3
    5e3a:	0013      	movs	r3, r2
    5e3c:	425c      	negs	r4, r3
    5e3e:	2900      	cmp	r1, #0
    5e40:	d100      	bne.n	5e44 <__aeabi_d2iz+0x38>
    5e42:	001c      	movs	r4, r3
    5e44:	0020      	movs	r0, r4
    5e46:	bd30      	pop	{r4, r5, pc}
    5e48:	4b09      	ldr	r3, [pc, #36]	; (5e70 <__aeabi_d2iz+0x64>)
    5e4a:	18cc      	adds	r4, r1, r3
    5e4c:	e7fa      	b.n	5e44 <__aeabi_d2iz+0x38>
    5e4e:	40e0      	lsrs	r0, r4
    5e50:	4c08      	ldr	r4, [pc, #32]	; (5e74 <__aeabi_d2iz+0x68>)
    5e52:	46a4      	mov	ip, r4
    5e54:	4463      	add	r3, ip
    5e56:	409a      	lsls	r2, r3
    5e58:	0013      	movs	r3, r2
    5e5a:	4303      	orrs	r3, r0
    5e5c:	e7ee      	b.n	5e3c <__aeabi_d2iz+0x30>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	000003fe 	.word	0x000003fe
    5e64:	0000041d 	.word	0x0000041d
    5e68:	00000433 	.word	0x00000433
    5e6c:	00000413 	.word	0x00000413
    5e70:	7fffffff 	.word	0x7fffffff
    5e74:	fffffbed 	.word	0xfffffbed

00005e78 <__aeabi_i2d>:
    5e78:	b570      	push	{r4, r5, r6, lr}
    5e7a:	2800      	cmp	r0, #0
    5e7c:	d030      	beq.n	5ee0 <__aeabi_i2d+0x68>
    5e7e:	17c3      	asrs	r3, r0, #31
    5e80:	18c4      	adds	r4, r0, r3
    5e82:	405c      	eors	r4, r3
    5e84:	0fc5      	lsrs	r5, r0, #31
    5e86:	0020      	movs	r0, r4
    5e88:	f000 f9dc 	bl	6244 <__clzsi2>
    5e8c:	4b17      	ldr	r3, [pc, #92]	; (5eec <__aeabi_i2d+0x74>)
    5e8e:	4a18      	ldr	r2, [pc, #96]	; (5ef0 <__aeabi_i2d+0x78>)
    5e90:	1a1b      	subs	r3, r3, r0
    5e92:	1ad2      	subs	r2, r2, r3
    5e94:	2a1f      	cmp	r2, #31
    5e96:	dd18      	ble.n	5eca <__aeabi_i2d+0x52>
    5e98:	4a16      	ldr	r2, [pc, #88]	; (5ef4 <__aeabi_i2d+0x7c>)
    5e9a:	1ad2      	subs	r2, r2, r3
    5e9c:	4094      	lsls	r4, r2
    5e9e:	2200      	movs	r2, #0
    5ea0:	0324      	lsls	r4, r4, #12
    5ea2:	055b      	lsls	r3, r3, #21
    5ea4:	0b24      	lsrs	r4, r4, #12
    5ea6:	0d5b      	lsrs	r3, r3, #21
    5ea8:	2100      	movs	r1, #0
    5eaa:	0010      	movs	r0, r2
    5eac:	0324      	lsls	r4, r4, #12
    5eae:	0d0a      	lsrs	r2, r1, #20
    5eb0:	0512      	lsls	r2, r2, #20
    5eb2:	0b24      	lsrs	r4, r4, #12
    5eb4:	4314      	orrs	r4, r2
    5eb6:	4a10      	ldr	r2, [pc, #64]	; (5ef8 <__aeabi_i2d+0x80>)
    5eb8:	051b      	lsls	r3, r3, #20
    5eba:	4014      	ands	r4, r2
    5ebc:	431c      	orrs	r4, r3
    5ebe:	0064      	lsls	r4, r4, #1
    5ec0:	07ed      	lsls	r5, r5, #31
    5ec2:	0864      	lsrs	r4, r4, #1
    5ec4:	432c      	orrs	r4, r5
    5ec6:	0021      	movs	r1, r4
    5ec8:	bd70      	pop	{r4, r5, r6, pc}
    5eca:	0021      	movs	r1, r4
    5ecc:	4091      	lsls	r1, r2
    5ece:	000a      	movs	r2, r1
    5ed0:	210b      	movs	r1, #11
    5ed2:	1a08      	subs	r0, r1, r0
    5ed4:	40c4      	lsrs	r4, r0
    5ed6:	055b      	lsls	r3, r3, #21
    5ed8:	0324      	lsls	r4, r4, #12
    5eda:	0b24      	lsrs	r4, r4, #12
    5edc:	0d5b      	lsrs	r3, r3, #21
    5ede:	e7e3      	b.n	5ea8 <__aeabi_i2d+0x30>
    5ee0:	2500      	movs	r5, #0
    5ee2:	2300      	movs	r3, #0
    5ee4:	2400      	movs	r4, #0
    5ee6:	2200      	movs	r2, #0
    5ee8:	e7de      	b.n	5ea8 <__aeabi_i2d+0x30>
    5eea:	46c0      	nop			; (mov r8, r8)
    5eec:	0000041e 	.word	0x0000041e
    5ef0:	00000433 	.word	0x00000433
    5ef4:	00000413 	.word	0x00000413
    5ef8:	800fffff 	.word	0x800fffff

00005efc <__aeabi_ui2d>:
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	1e05      	subs	r5, r0, #0
    5f00:	d028      	beq.n	5f54 <__aeabi_ui2d+0x58>
    5f02:	f000 f99f 	bl	6244 <__clzsi2>
    5f06:	4b15      	ldr	r3, [pc, #84]	; (5f5c <__aeabi_ui2d+0x60>)
    5f08:	4a15      	ldr	r2, [pc, #84]	; (5f60 <__aeabi_ui2d+0x64>)
    5f0a:	1a1b      	subs	r3, r3, r0
    5f0c:	1ad2      	subs	r2, r2, r3
    5f0e:	2a1f      	cmp	r2, #31
    5f10:	dd16      	ble.n	5f40 <__aeabi_ui2d+0x44>
    5f12:	002c      	movs	r4, r5
    5f14:	4a13      	ldr	r2, [pc, #76]	; (5f64 <__aeabi_ui2d+0x68>)
    5f16:	2500      	movs	r5, #0
    5f18:	1ad2      	subs	r2, r2, r3
    5f1a:	4094      	lsls	r4, r2
    5f1c:	055a      	lsls	r2, r3, #21
    5f1e:	0324      	lsls	r4, r4, #12
    5f20:	0b24      	lsrs	r4, r4, #12
    5f22:	0d52      	lsrs	r2, r2, #21
    5f24:	2100      	movs	r1, #0
    5f26:	0324      	lsls	r4, r4, #12
    5f28:	0d0b      	lsrs	r3, r1, #20
    5f2a:	0b24      	lsrs	r4, r4, #12
    5f2c:	051b      	lsls	r3, r3, #20
    5f2e:	4323      	orrs	r3, r4
    5f30:	4c0d      	ldr	r4, [pc, #52]	; (5f68 <__aeabi_ui2d+0x6c>)
    5f32:	0512      	lsls	r2, r2, #20
    5f34:	4023      	ands	r3, r4
    5f36:	4313      	orrs	r3, r2
    5f38:	005b      	lsls	r3, r3, #1
    5f3a:	0028      	movs	r0, r5
    5f3c:	0859      	lsrs	r1, r3, #1
    5f3e:	bd70      	pop	{r4, r5, r6, pc}
    5f40:	210b      	movs	r1, #11
    5f42:	002c      	movs	r4, r5
    5f44:	1a08      	subs	r0, r1, r0
    5f46:	40c4      	lsrs	r4, r0
    5f48:	4095      	lsls	r5, r2
    5f4a:	0324      	lsls	r4, r4, #12
    5f4c:	055a      	lsls	r2, r3, #21
    5f4e:	0b24      	lsrs	r4, r4, #12
    5f50:	0d52      	lsrs	r2, r2, #21
    5f52:	e7e7      	b.n	5f24 <__aeabi_ui2d+0x28>
    5f54:	2200      	movs	r2, #0
    5f56:	2400      	movs	r4, #0
    5f58:	e7e4      	b.n	5f24 <__aeabi_ui2d+0x28>
    5f5a:	46c0      	nop			; (mov r8, r8)
    5f5c:	0000041e 	.word	0x0000041e
    5f60:	00000433 	.word	0x00000433
    5f64:	00000413 	.word	0x00000413
    5f68:	800fffff 	.word	0x800fffff

00005f6c <__aeabi_f2d>:
    5f6c:	0042      	lsls	r2, r0, #1
    5f6e:	0e12      	lsrs	r2, r2, #24
    5f70:	1c51      	adds	r1, r2, #1
    5f72:	0243      	lsls	r3, r0, #9
    5f74:	b2c9      	uxtb	r1, r1
    5f76:	b570      	push	{r4, r5, r6, lr}
    5f78:	0a5d      	lsrs	r5, r3, #9
    5f7a:	0fc4      	lsrs	r4, r0, #31
    5f7c:	2901      	cmp	r1, #1
    5f7e:	dd15      	ble.n	5fac <__aeabi_f2d+0x40>
    5f80:	21e0      	movs	r1, #224	; 0xe0
    5f82:	0089      	lsls	r1, r1, #2
    5f84:	468c      	mov	ip, r1
    5f86:	076d      	lsls	r5, r5, #29
    5f88:	0b1b      	lsrs	r3, r3, #12
    5f8a:	4462      	add	r2, ip
    5f8c:	2100      	movs	r1, #0
    5f8e:	0028      	movs	r0, r5
    5f90:	0d0d      	lsrs	r5, r1, #20
    5f92:	052d      	lsls	r5, r5, #20
    5f94:	432b      	orrs	r3, r5
    5f96:	4d1c      	ldr	r5, [pc, #112]	; (6008 <__aeabi_f2d+0x9c>)
    5f98:	0552      	lsls	r2, r2, #21
    5f9a:	402b      	ands	r3, r5
    5f9c:	0852      	lsrs	r2, r2, #1
    5f9e:	4313      	orrs	r3, r2
    5fa0:	005b      	lsls	r3, r3, #1
    5fa2:	07e4      	lsls	r4, r4, #31
    5fa4:	085b      	lsrs	r3, r3, #1
    5fa6:	4323      	orrs	r3, r4
    5fa8:	0019      	movs	r1, r3
    5faa:	bd70      	pop	{r4, r5, r6, pc}
    5fac:	2a00      	cmp	r2, #0
    5fae:	d115      	bne.n	5fdc <__aeabi_f2d+0x70>
    5fb0:	2d00      	cmp	r5, #0
    5fb2:	d01f      	beq.n	5ff4 <__aeabi_f2d+0x88>
    5fb4:	0028      	movs	r0, r5
    5fb6:	f000 f945 	bl	6244 <__clzsi2>
    5fba:	280a      	cmp	r0, #10
    5fbc:	dc1d      	bgt.n	5ffa <__aeabi_f2d+0x8e>
    5fbe:	230b      	movs	r3, #11
    5fc0:	002a      	movs	r2, r5
    5fc2:	1a1b      	subs	r3, r3, r0
    5fc4:	40da      	lsrs	r2, r3
    5fc6:	0013      	movs	r3, r2
    5fc8:	0002      	movs	r2, r0
    5fca:	3215      	adds	r2, #21
    5fcc:	4095      	lsls	r5, r2
    5fce:	4a0f      	ldr	r2, [pc, #60]	; (600c <__aeabi_f2d+0xa0>)
    5fd0:	031b      	lsls	r3, r3, #12
    5fd2:	1a12      	subs	r2, r2, r0
    5fd4:	0552      	lsls	r2, r2, #21
    5fd6:	0b1b      	lsrs	r3, r3, #12
    5fd8:	0d52      	lsrs	r2, r2, #21
    5fda:	e7d7      	b.n	5f8c <__aeabi_f2d+0x20>
    5fdc:	2d00      	cmp	r5, #0
    5fde:	d006      	beq.n	5fee <__aeabi_f2d+0x82>
    5fe0:	2280      	movs	r2, #128	; 0x80
    5fe2:	0b1b      	lsrs	r3, r3, #12
    5fe4:	0312      	lsls	r2, r2, #12
    5fe6:	4313      	orrs	r3, r2
    5fe8:	076d      	lsls	r5, r5, #29
    5fea:	4a09      	ldr	r2, [pc, #36]	; (6010 <__aeabi_f2d+0xa4>)
    5fec:	e7ce      	b.n	5f8c <__aeabi_f2d+0x20>
    5fee:	4a08      	ldr	r2, [pc, #32]	; (6010 <__aeabi_f2d+0xa4>)
    5ff0:	2300      	movs	r3, #0
    5ff2:	e7cb      	b.n	5f8c <__aeabi_f2d+0x20>
    5ff4:	2200      	movs	r2, #0
    5ff6:	2300      	movs	r3, #0
    5ff8:	e7c8      	b.n	5f8c <__aeabi_f2d+0x20>
    5ffa:	0003      	movs	r3, r0
    5ffc:	3b0b      	subs	r3, #11
    5ffe:	409d      	lsls	r5, r3
    6000:	002b      	movs	r3, r5
    6002:	2500      	movs	r5, #0
    6004:	e7e3      	b.n	5fce <__aeabi_f2d+0x62>
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	800fffff 	.word	0x800fffff
    600c:	00000389 	.word	0x00000389
    6010:	000007ff 	.word	0x000007ff

00006014 <__aeabi_d2f>:
    6014:	004b      	lsls	r3, r1, #1
    6016:	b570      	push	{r4, r5, r6, lr}
    6018:	0d5e      	lsrs	r6, r3, #21
    601a:	030c      	lsls	r4, r1, #12
    601c:	1c75      	adds	r5, r6, #1
    601e:	0a64      	lsrs	r4, r4, #9
    6020:	0f42      	lsrs	r2, r0, #29
    6022:	056d      	lsls	r5, r5, #21
    6024:	4322      	orrs	r2, r4
    6026:	0fc9      	lsrs	r1, r1, #31
    6028:	00c4      	lsls	r4, r0, #3
    602a:	0d6d      	lsrs	r5, r5, #21
    602c:	2d01      	cmp	r5, #1
    602e:	dd2a      	ble.n	6086 <__aeabi_d2f+0x72>
    6030:	4b3b      	ldr	r3, [pc, #236]	; (6120 <__aeabi_d2f+0x10c>)
    6032:	18f3      	adds	r3, r6, r3
    6034:	2bfe      	cmp	r3, #254	; 0xfe
    6036:	dc1a      	bgt.n	606e <__aeabi_d2f+0x5a>
    6038:	2b00      	cmp	r3, #0
    603a:	dd42      	ble.n	60c2 <__aeabi_d2f+0xae>
    603c:	0180      	lsls	r0, r0, #6
    603e:	1e45      	subs	r5, r0, #1
    6040:	41a8      	sbcs	r0, r5
    6042:	00d2      	lsls	r2, r2, #3
    6044:	4310      	orrs	r0, r2
    6046:	0f62      	lsrs	r2, r4, #29
    6048:	4302      	orrs	r2, r0
    604a:	0750      	lsls	r0, r2, #29
    604c:	d004      	beq.n	6058 <__aeabi_d2f+0x44>
    604e:	200f      	movs	r0, #15
    6050:	4010      	ands	r0, r2
    6052:	2804      	cmp	r0, #4
    6054:	d000      	beq.n	6058 <__aeabi_d2f+0x44>
    6056:	3204      	adds	r2, #4
    6058:	2080      	movs	r0, #128	; 0x80
    605a:	04c0      	lsls	r0, r0, #19
    605c:	4010      	ands	r0, r2
    605e:	d021      	beq.n	60a4 <__aeabi_d2f+0x90>
    6060:	3301      	adds	r3, #1
    6062:	2bff      	cmp	r3, #255	; 0xff
    6064:	d003      	beq.n	606e <__aeabi_d2f+0x5a>
    6066:	0192      	lsls	r2, r2, #6
    6068:	0a52      	lsrs	r2, r2, #9
    606a:	b2db      	uxtb	r3, r3
    606c:	e001      	b.n	6072 <__aeabi_d2f+0x5e>
    606e:	23ff      	movs	r3, #255	; 0xff
    6070:	2200      	movs	r2, #0
    6072:	0252      	lsls	r2, r2, #9
    6074:	0a52      	lsrs	r2, r2, #9
    6076:	05db      	lsls	r3, r3, #23
    6078:	4313      	orrs	r3, r2
    607a:	005b      	lsls	r3, r3, #1
    607c:	07c9      	lsls	r1, r1, #31
    607e:	085b      	lsrs	r3, r3, #1
    6080:	430b      	orrs	r3, r1
    6082:	0018      	movs	r0, r3
    6084:	bd70      	pop	{r4, r5, r6, pc}
    6086:	2e00      	cmp	r6, #0
    6088:	d007      	beq.n	609a <__aeabi_d2f+0x86>
    608a:	4314      	orrs	r4, r2
    608c:	d0ef      	beq.n	606e <__aeabi_d2f+0x5a>
    608e:	2080      	movs	r0, #128	; 0x80
    6090:	00d2      	lsls	r2, r2, #3
    6092:	0480      	lsls	r0, r0, #18
    6094:	4302      	orrs	r2, r0
    6096:	23ff      	movs	r3, #255	; 0xff
    6098:	e7d7      	b.n	604a <__aeabi_d2f+0x36>
    609a:	4322      	orrs	r2, r4
    609c:	2300      	movs	r3, #0
    609e:	2a00      	cmp	r2, #0
    60a0:	d003      	beq.n	60aa <__aeabi_d2f+0x96>
    60a2:	2205      	movs	r2, #5
    60a4:	08d2      	lsrs	r2, r2, #3
    60a6:	2bff      	cmp	r3, #255	; 0xff
    60a8:	d003      	beq.n	60b2 <__aeabi_d2f+0x9e>
    60aa:	0252      	lsls	r2, r2, #9
    60ac:	0a52      	lsrs	r2, r2, #9
    60ae:	b2db      	uxtb	r3, r3
    60b0:	e7df      	b.n	6072 <__aeabi_d2f+0x5e>
    60b2:	2a00      	cmp	r2, #0
    60b4:	d032      	beq.n	611c <__aeabi_d2f+0x108>
    60b6:	2080      	movs	r0, #128	; 0x80
    60b8:	03c0      	lsls	r0, r0, #15
    60ba:	4302      	orrs	r2, r0
    60bc:	0252      	lsls	r2, r2, #9
    60be:	0a52      	lsrs	r2, r2, #9
    60c0:	e7d7      	b.n	6072 <__aeabi_d2f+0x5e>
    60c2:	0018      	movs	r0, r3
    60c4:	3017      	adds	r0, #23
    60c6:	db14      	blt.n	60f2 <__aeabi_d2f+0xde>
    60c8:	2080      	movs	r0, #128	; 0x80
    60ca:	0400      	lsls	r0, r0, #16
    60cc:	4302      	orrs	r2, r0
    60ce:	201e      	movs	r0, #30
    60d0:	1ac0      	subs	r0, r0, r3
    60d2:	281f      	cmp	r0, #31
    60d4:	dc0f      	bgt.n	60f6 <__aeabi_d2f+0xe2>
    60d6:	0025      	movs	r5, r4
    60d8:	4b12      	ldr	r3, [pc, #72]	; (6124 <__aeabi_d2f+0x110>)
    60da:	18f3      	adds	r3, r6, r3
    60dc:	409d      	lsls	r5, r3
    60de:	1e6e      	subs	r6, r5, #1
    60e0:	41b5      	sbcs	r5, r6
    60e2:	409a      	lsls	r2, r3
    60e4:	002b      	movs	r3, r5
    60e6:	4313      	orrs	r3, r2
    60e8:	0022      	movs	r2, r4
    60ea:	40c2      	lsrs	r2, r0
    60ec:	431a      	orrs	r2, r3
    60ee:	2300      	movs	r3, #0
    60f0:	e7ab      	b.n	604a <__aeabi_d2f+0x36>
    60f2:	2300      	movs	r3, #0
    60f4:	e7d5      	b.n	60a2 <__aeabi_d2f+0x8e>
    60f6:	2502      	movs	r5, #2
    60f8:	426d      	negs	r5, r5
    60fa:	1aeb      	subs	r3, r5, r3
    60fc:	0015      	movs	r5, r2
    60fe:	40dd      	lsrs	r5, r3
    6100:	2820      	cmp	r0, #32
    6102:	d009      	beq.n	6118 <__aeabi_d2f+0x104>
    6104:	4b08      	ldr	r3, [pc, #32]	; (6128 <__aeabi_d2f+0x114>)
    6106:	18f3      	adds	r3, r6, r3
    6108:	409a      	lsls	r2, r3
    610a:	4314      	orrs	r4, r2
    610c:	1e62      	subs	r2, r4, #1
    610e:	4194      	sbcs	r4, r2
    6110:	0022      	movs	r2, r4
    6112:	2300      	movs	r3, #0
    6114:	432a      	orrs	r2, r5
    6116:	e798      	b.n	604a <__aeabi_d2f+0x36>
    6118:	2200      	movs	r2, #0
    611a:	e7f6      	b.n	610a <__aeabi_d2f+0xf6>
    611c:	2200      	movs	r2, #0
    611e:	e7a8      	b.n	6072 <__aeabi_d2f+0x5e>
    6120:	fffffc80 	.word	0xfffffc80
    6124:	fffffc82 	.word	0xfffffc82
    6128:	fffffca2 	.word	0xfffffca2

0000612c <__aeabi_uidiv>:
    612c:	2200      	movs	r2, #0
    612e:	0843      	lsrs	r3, r0, #1
    6130:	428b      	cmp	r3, r1
    6132:	d374      	bcc.n	621e <__aeabi_uidiv+0xf2>
    6134:	0903      	lsrs	r3, r0, #4
    6136:	428b      	cmp	r3, r1
    6138:	d35f      	bcc.n	61fa <__aeabi_uidiv+0xce>
    613a:	0a03      	lsrs	r3, r0, #8
    613c:	428b      	cmp	r3, r1
    613e:	d344      	bcc.n	61ca <__aeabi_uidiv+0x9e>
    6140:	0b03      	lsrs	r3, r0, #12
    6142:	428b      	cmp	r3, r1
    6144:	d328      	bcc.n	6198 <__aeabi_uidiv+0x6c>
    6146:	0c03      	lsrs	r3, r0, #16
    6148:	428b      	cmp	r3, r1
    614a:	d30d      	bcc.n	6168 <__aeabi_uidiv+0x3c>
    614c:	22ff      	movs	r2, #255	; 0xff
    614e:	0209      	lsls	r1, r1, #8
    6150:	ba12      	rev	r2, r2
    6152:	0c03      	lsrs	r3, r0, #16
    6154:	428b      	cmp	r3, r1
    6156:	d302      	bcc.n	615e <__aeabi_uidiv+0x32>
    6158:	1212      	asrs	r2, r2, #8
    615a:	0209      	lsls	r1, r1, #8
    615c:	d065      	beq.n	622a <__aeabi_uidiv+0xfe>
    615e:	0b03      	lsrs	r3, r0, #12
    6160:	428b      	cmp	r3, r1
    6162:	d319      	bcc.n	6198 <__aeabi_uidiv+0x6c>
    6164:	e000      	b.n	6168 <__aeabi_uidiv+0x3c>
    6166:	0a09      	lsrs	r1, r1, #8
    6168:	0bc3      	lsrs	r3, r0, #15
    616a:	428b      	cmp	r3, r1
    616c:	d301      	bcc.n	6172 <__aeabi_uidiv+0x46>
    616e:	03cb      	lsls	r3, r1, #15
    6170:	1ac0      	subs	r0, r0, r3
    6172:	4152      	adcs	r2, r2
    6174:	0b83      	lsrs	r3, r0, #14
    6176:	428b      	cmp	r3, r1
    6178:	d301      	bcc.n	617e <__aeabi_uidiv+0x52>
    617a:	038b      	lsls	r3, r1, #14
    617c:	1ac0      	subs	r0, r0, r3
    617e:	4152      	adcs	r2, r2
    6180:	0b43      	lsrs	r3, r0, #13
    6182:	428b      	cmp	r3, r1
    6184:	d301      	bcc.n	618a <__aeabi_uidiv+0x5e>
    6186:	034b      	lsls	r3, r1, #13
    6188:	1ac0      	subs	r0, r0, r3
    618a:	4152      	adcs	r2, r2
    618c:	0b03      	lsrs	r3, r0, #12
    618e:	428b      	cmp	r3, r1
    6190:	d301      	bcc.n	6196 <__aeabi_uidiv+0x6a>
    6192:	030b      	lsls	r3, r1, #12
    6194:	1ac0      	subs	r0, r0, r3
    6196:	4152      	adcs	r2, r2
    6198:	0ac3      	lsrs	r3, r0, #11
    619a:	428b      	cmp	r3, r1
    619c:	d301      	bcc.n	61a2 <__aeabi_uidiv+0x76>
    619e:	02cb      	lsls	r3, r1, #11
    61a0:	1ac0      	subs	r0, r0, r3
    61a2:	4152      	adcs	r2, r2
    61a4:	0a83      	lsrs	r3, r0, #10
    61a6:	428b      	cmp	r3, r1
    61a8:	d301      	bcc.n	61ae <__aeabi_uidiv+0x82>
    61aa:	028b      	lsls	r3, r1, #10
    61ac:	1ac0      	subs	r0, r0, r3
    61ae:	4152      	adcs	r2, r2
    61b0:	0a43      	lsrs	r3, r0, #9
    61b2:	428b      	cmp	r3, r1
    61b4:	d301      	bcc.n	61ba <__aeabi_uidiv+0x8e>
    61b6:	024b      	lsls	r3, r1, #9
    61b8:	1ac0      	subs	r0, r0, r3
    61ba:	4152      	adcs	r2, r2
    61bc:	0a03      	lsrs	r3, r0, #8
    61be:	428b      	cmp	r3, r1
    61c0:	d301      	bcc.n	61c6 <__aeabi_uidiv+0x9a>
    61c2:	020b      	lsls	r3, r1, #8
    61c4:	1ac0      	subs	r0, r0, r3
    61c6:	4152      	adcs	r2, r2
    61c8:	d2cd      	bcs.n	6166 <__aeabi_uidiv+0x3a>
    61ca:	09c3      	lsrs	r3, r0, #7
    61cc:	428b      	cmp	r3, r1
    61ce:	d301      	bcc.n	61d4 <__aeabi_uidiv+0xa8>
    61d0:	01cb      	lsls	r3, r1, #7
    61d2:	1ac0      	subs	r0, r0, r3
    61d4:	4152      	adcs	r2, r2
    61d6:	0983      	lsrs	r3, r0, #6
    61d8:	428b      	cmp	r3, r1
    61da:	d301      	bcc.n	61e0 <__aeabi_uidiv+0xb4>
    61dc:	018b      	lsls	r3, r1, #6
    61de:	1ac0      	subs	r0, r0, r3
    61e0:	4152      	adcs	r2, r2
    61e2:	0943      	lsrs	r3, r0, #5
    61e4:	428b      	cmp	r3, r1
    61e6:	d301      	bcc.n	61ec <__aeabi_uidiv+0xc0>
    61e8:	014b      	lsls	r3, r1, #5
    61ea:	1ac0      	subs	r0, r0, r3
    61ec:	4152      	adcs	r2, r2
    61ee:	0903      	lsrs	r3, r0, #4
    61f0:	428b      	cmp	r3, r1
    61f2:	d301      	bcc.n	61f8 <__aeabi_uidiv+0xcc>
    61f4:	010b      	lsls	r3, r1, #4
    61f6:	1ac0      	subs	r0, r0, r3
    61f8:	4152      	adcs	r2, r2
    61fa:	08c3      	lsrs	r3, r0, #3
    61fc:	428b      	cmp	r3, r1
    61fe:	d301      	bcc.n	6204 <__aeabi_uidiv+0xd8>
    6200:	00cb      	lsls	r3, r1, #3
    6202:	1ac0      	subs	r0, r0, r3
    6204:	4152      	adcs	r2, r2
    6206:	0883      	lsrs	r3, r0, #2
    6208:	428b      	cmp	r3, r1
    620a:	d301      	bcc.n	6210 <__aeabi_uidiv+0xe4>
    620c:	008b      	lsls	r3, r1, #2
    620e:	1ac0      	subs	r0, r0, r3
    6210:	4152      	adcs	r2, r2
    6212:	0843      	lsrs	r3, r0, #1
    6214:	428b      	cmp	r3, r1
    6216:	d301      	bcc.n	621c <__aeabi_uidiv+0xf0>
    6218:	004b      	lsls	r3, r1, #1
    621a:	1ac0      	subs	r0, r0, r3
    621c:	4152      	adcs	r2, r2
    621e:	1a41      	subs	r1, r0, r1
    6220:	d200      	bcs.n	6224 <__aeabi_uidiv+0xf8>
    6222:	4601      	mov	r1, r0
    6224:	4152      	adcs	r2, r2
    6226:	4610      	mov	r0, r2
    6228:	4770      	bx	lr
    622a:	e7ff      	b.n	622c <__aeabi_uidiv+0x100>
    622c:	b501      	push	{r0, lr}
    622e:	2000      	movs	r0, #0
    6230:	f000 f806 	bl	6240 <__aeabi_idiv0>
    6234:	bd02      	pop	{r1, pc}
    6236:	46c0      	nop			; (mov r8, r8)

00006238 <__aeabi_uidivmod>:
    6238:	2900      	cmp	r1, #0
    623a:	d0f7      	beq.n	622c <__aeabi_uidiv+0x100>
    623c:	e776      	b.n	612c <__aeabi_uidiv>
    623e:	4770      	bx	lr

00006240 <__aeabi_idiv0>:
    6240:	4770      	bx	lr
    6242:	46c0      	nop			; (mov r8, r8)

00006244 <__clzsi2>:
    6244:	211c      	movs	r1, #28
    6246:	2301      	movs	r3, #1
    6248:	041b      	lsls	r3, r3, #16
    624a:	4298      	cmp	r0, r3
    624c:	d301      	bcc.n	6252 <__clzsi2+0xe>
    624e:	0c00      	lsrs	r0, r0, #16
    6250:	3910      	subs	r1, #16
    6252:	0a1b      	lsrs	r3, r3, #8
    6254:	4298      	cmp	r0, r3
    6256:	d301      	bcc.n	625c <__clzsi2+0x18>
    6258:	0a00      	lsrs	r0, r0, #8
    625a:	3908      	subs	r1, #8
    625c:	091b      	lsrs	r3, r3, #4
    625e:	4298      	cmp	r0, r3
    6260:	d301      	bcc.n	6266 <__clzsi2+0x22>
    6262:	0900      	lsrs	r0, r0, #4
    6264:	3904      	subs	r1, #4
    6266:	a202      	add	r2, pc, #8	; (adr r2, 6270 <__clzsi2+0x2c>)
    6268:	5c10      	ldrb	r0, [r2, r0]
    626a:	1840      	adds	r0, r0, r1
    626c:	4770      	bx	lr
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	02020304 	.word	0x02020304
    6274:	01010101 	.word	0x01010101
	...

00006280 <__errno>:
    6280:	4b01      	ldr	r3, [pc, #4]	; (6288 <__errno+0x8>)
    6282:	6818      	ldr	r0, [r3, #0]
    6284:	4770      	bx	lr
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	200004a0 	.word	0x200004a0

0000628c <__libc_init_array>:
    628c:	b570      	push	{r4, r5, r6, lr}
    628e:	4e0d      	ldr	r6, [pc, #52]	; (62c4 <__libc_init_array+0x38>)
    6290:	4d0d      	ldr	r5, [pc, #52]	; (62c8 <__libc_init_array+0x3c>)
    6292:	2400      	movs	r4, #0
    6294:	1bad      	subs	r5, r5, r6
    6296:	10ad      	asrs	r5, r5, #2
    6298:	d005      	beq.n	62a6 <__libc_init_array+0x1a>
    629a:	00a3      	lsls	r3, r4, #2
    629c:	58f3      	ldr	r3, [r6, r3]
    629e:	3401      	adds	r4, #1
    62a0:	4798      	blx	r3
    62a2:	42a5      	cmp	r5, r4
    62a4:	d1f9      	bne.n	629a <__libc_init_array+0xe>
    62a6:	f000 fa1b 	bl	66e0 <_init>
    62aa:	4e08      	ldr	r6, [pc, #32]	; (62cc <__libc_init_array+0x40>)
    62ac:	4d08      	ldr	r5, [pc, #32]	; (62d0 <__libc_init_array+0x44>)
    62ae:	2400      	movs	r4, #0
    62b0:	1bad      	subs	r5, r5, r6
    62b2:	10ad      	asrs	r5, r5, #2
    62b4:	d005      	beq.n	62c2 <__libc_init_array+0x36>
    62b6:	00a3      	lsls	r3, r4, #2
    62b8:	58f3      	ldr	r3, [r6, r3]
    62ba:	3401      	adds	r4, #1
    62bc:	4798      	blx	r3
    62be:	42a5      	cmp	r5, r4
    62c0:	d1f9      	bne.n	62b6 <__libc_init_array+0x2a>
    62c2:	bd70      	pop	{r4, r5, r6, pc}
    62c4:	000066ec 	.word	0x000066ec
    62c8:	000066ec 	.word	0x000066ec
    62cc:	000066ec 	.word	0x000066ec
    62d0:	000066f4 	.word	0x000066f4

000062d4 <memset>:
    62d4:	b570      	push	{r4, r5, r6, lr}
    62d6:	0783      	lsls	r3, r0, #30
    62d8:	d03f      	beq.n	635a <memset+0x86>
    62da:	1e54      	subs	r4, r2, #1
    62dc:	2a00      	cmp	r2, #0
    62de:	d03b      	beq.n	6358 <memset+0x84>
    62e0:	b2ce      	uxtb	r6, r1
    62e2:	0003      	movs	r3, r0
    62e4:	2503      	movs	r5, #3
    62e6:	e003      	b.n	62f0 <memset+0x1c>
    62e8:	1e62      	subs	r2, r4, #1
    62ea:	2c00      	cmp	r4, #0
    62ec:	d034      	beq.n	6358 <memset+0x84>
    62ee:	0014      	movs	r4, r2
    62f0:	3301      	adds	r3, #1
    62f2:	1e5a      	subs	r2, r3, #1
    62f4:	7016      	strb	r6, [r2, #0]
    62f6:	422b      	tst	r3, r5
    62f8:	d1f6      	bne.n	62e8 <memset+0x14>
    62fa:	2c03      	cmp	r4, #3
    62fc:	d924      	bls.n	6348 <memset+0x74>
    62fe:	25ff      	movs	r5, #255	; 0xff
    6300:	400d      	ands	r5, r1
    6302:	022a      	lsls	r2, r5, #8
    6304:	4315      	orrs	r5, r2
    6306:	042a      	lsls	r2, r5, #16
    6308:	4315      	orrs	r5, r2
    630a:	2c0f      	cmp	r4, #15
    630c:	d911      	bls.n	6332 <memset+0x5e>
    630e:	0026      	movs	r6, r4
    6310:	3e10      	subs	r6, #16
    6312:	0936      	lsrs	r6, r6, #4
    6314:	3601      	adds	r6, #1
    6316:	0136      	lsls	r6, r6, #4
    6318:	001a      	movs	r2, r3
    631a:	199b      	adds	r3, r3, r6
    631c:	6015      	str	r5, [r2, #0]
    631e:	6055      	str	r5, [r2, #4]
    6320:	6095      	str	r5, [r2, #8]
    6322:	60d5      	str	r5, [r2, #12]
    6324:	3210      	adds	r2, #16
    6326:	4293      	cmp	r3, r2
    6328:	d1f8      	bne.n	631c <memset+0x48>
    632a:	220f      	movs	r2, #15
    632c:	4014      	ands	r4, r2
    632e:	2c03      	cmp	r4, #3
    6330:	d90a      	bls.n	6348 <memset+0x74>
    6332:	1f26      	subs	r6, r4, #4
    6334:	08b6      	lsrs	r6, r6, #2
    6336:	3601      	adds	r6, #1
    6338:	00b6      	lsls	r6, r6, #2
    633a:	001a      	movs	r2, r3
    633c:	199b      	adds	r3, r3, r6
    633e:	c220      	stmia	r2!, {r5}
    6340:	4293      	cmp	r3, r2
    6342:	d1fc      	bne.n	633e <memset+0x6a>
    6344:	2203      	movs	r2, #3
    6346:	4014      	ands	r4, r2
    6348:	2c00      	cmp	r4, #0
    634a:	d005      	beq.n	6358 <memset+0x84>
    634c:	b2c9      	uxtb	r1, r1
    634e:	191c      	adds	r4, r3, r4
    6350:	7019      	strb	r1, [r3, #0]
    6352:	3301      	adds	r3, #1
    6354:	429c      	cmp	r4, r3
    6356:	d1fb      	bne.n	6350 <memset+0x7c>
    6358:	bd70      	pop	{r4, r5, r6, pc}
    635a:	0014      	movs	r4, r2
    635c:	0003      	movs	r3, r0
    635e:	e7cc      	b.n	62fa <memset+0x26>

00006360 <register_fini>:
    6360:	4b03      	ldr	r3, [pc, #12]	; (6370 <register_fini+0x10>)
    6362:	b510      	push	{r4, lr}
    6364:	2b00      	cmp	r3, #0
    6366:	d002      	beq.n	636e <register_fini+0xe>
    6368:	4802      	ldr	r0, [pc, #8]	; (6374 <register_fini+0x14>)
    636a:	f000 f805 	bl	6378 <atexit>
    636e:	bd10      	pop	{r4, pc}
    6370:	00000000 	.word	0x00000000
    6374:	00006389 	.word	0x00006389

00006378 <atexit>:
    6378:	b510      	push	{r4, lr}
    637a:	0001      	movs	r1, r0
    637c:	2300      	movs	r3, #0
    637e:	2200      	movs	r2, #0
    6380:	2000      	movs	r0, #0
    6382:	f000 f81b 	bl	63bc <__register_exitproc>
    6386:	bd10      	pop	{r4, pc}

00006388 <__libc_fini_array>:
    6388:	b570      	push	{r4, r5, r6, lr}
    638a:	4b09      	ldr	r3, [pc, #36]	; (63b0 <__libc_fini_array+0x28>)
    638c:	4c09      	ldr	r4, [pc, #36]	; (63b4 <__libc_fini_array+0x2c>)
    638e:	1ae4      	subs	r4, r4, r3
    6390:	10a4      	asrs	r4, r4, #2
    6392:	d009      	beq.n	63a8 <__libc_fini_array+0x20>
    6394:	4a08      	ldr	r2, [pc, #32]	; (63b8 <__libc_fini_array+0x30>)
    6396:	18a5      	adds	r5, r4, r2
    6398:	00ad      	lsls	r5, r5, #2
    639a:	18ed      	adds	r5, r5, r3
    639c:	682b      	ldr	r3, [r5, #0]
    639e:	3c01      	subs	r4, #1
    63a0:	4798      	blx	r3
    63a2:	3d04      	subs	r5, #4
    63a4:	2c00      	cmp	r4, #0
    63a6:	d1f9      	bne.n	639c <__libc_fini_array+0x14>
    63a8:	f000 f9a4 	bl	66f4 <_fini>
    63ac:	bd70      	pop	{r4, r5, r6, pc}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	00006700 	.word	0x00006700
    63b4:	00006704 	.word	0x00006704
    63b8:	3fffffff 	.word	0x3fffffff

000063bc <__register_exitproc>:
    63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63be:	4644      	mov	r4, r8
    63c0:	465f      	mov	r7, fp
    63c2:	4656      	mov	r6, sl
    63c4:	464d      	mov	r5, r9
    63c6:	469b      	mov	fp, r3
    63c8:	4b2f      	ldr	r3, [pc, #188]	; (6488 <__register_exitproc+0xcc>)
    63ca:	b4f0      	push	{r4, r5, r6, r7}
    63cc:	681c      	ldr	r4, [r3, #0]
    63ce:	23a4      	movs	r3, #164	; 0xa4
    63d0:	005b      	lsls	r3, r3, #1
    63d2:	0005      	movs	r5, r0
    63d4:	58e0      	ldr	r0, [r4, r3]
    63d6:	000e      	movs	r6, r1
    63d8:	4690      	mov	r8, r2
    63da:	2800      	cmp	r0, #0
    63dc:	d04b      	beq.n	6476 <__register_exitproc+0xba>
    63de:	6843      	ldr	r3, [r0, #4]
    63e0:	2b1f      	cmp	r3, #31
    63e2:	dc0d      	bgt.n	6400 <__register_exitproc+0x44>
    63e4:	1c5c      	adds	r4, r3, #1
    63e6:	2d00      	cmp	r5, #0
    63e8:	d121      	bne.n	642e <__register_exitproc+0x72>
    63ea:	3302      	adds	r3, #2
    63ec:	009b      	lsls	r3, r3, #2
    63ee:	6044      	str	r4, [r0, #4]
    63f0:	501e      	str	r6, [r3, r0]
    63f2:	2000      	movs	r0, #0
    63f4:	bc3c      	pop	{r2, r3, r4, r5}
    63f6:	4690      	mov	r8, r2
    63f8:	4699      	mov	r9, r3
    63fa:	46a2      	mov	sl, r4
    63fc:	46ab      	mov	fp, r5
    63fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6400:	4b22      	ldr	r3, [pc, #136]	; (648c <__register_exitproc+0xd0>)
    6402:	2b00      	cmp	r3, #0
    6404:	d03c      	beq.n	6480 <__register_exitproc+0xc4>
    6406:	20c8      	movs	r0, #200	; 0xc8
    6408:	0040      	lsls	r0, r0, #1
    640a:	e000      	b.n	640e <__register_exitproc+0x52>
    640c:	bf00      	nop
    640e:	2800      	cmp	r0, #0
    6410:	d036      	beq.n	6480 <__register_exitproc+0xc4>
    6412:	22a4      	movs	r2, #164	; 0xa4
    6414:	2300      	movs	r3, #0
    6416:	0052      	lsls	r2, r2, #1
    6418:	58a1      	ldr	r1, [r4, r2]
    641a:	6043      	str	r3, [r0, #4]
    641c:	6001      	str	r1, [r0, #0]
    641e:	50a0      	str	r0, [r4, r2]
    6420:	3240      	adds	r2, #64	; 0x40
    6422:	5083      	str	r3, [r0, r2]
    6424:	3204      	adds	r2, #4
    6426:	5083      	str	r3, [r0, r2]
    6428:	2401      	movs	r4, #1
    642a:	2d00      	cmp	r5, #0
    642c:	d0dd      	beq.n	63ea <__register_exitproc+0x2e>
    642e:	009a      	lsls	r2, r3, #2
    6430:	4691      	mov	r9, r2
    6432:	4481      	add	r9, r0
    6434:	4642      	mov	r2, r8
    6436:	2188      	movs	r1, #136	; 0x88
    6438:	464f      	mov	r7, r9
    643a:	507a      	str	r2, [r7, r1]
    643c:	22c4      	movs	r2, #196	; 0xc4
    643e:	0052      	lsls	r2, r2, #1
    6440:	4690      	mov	r8, r2
    6442:	4480      	add	r8, r0
    6444:	4642      	mov	r2, r8
    6446:	3987      	subs	r1, #135	; 0x87
    6448:	4099      	lsls	r1, r3
    644a:	6812      	ldr	r2, [r2, #0]
    644c:	468a      	mov	sl, r1
    644e:	430a      	orrs	r2, r1
    6450:	4694      	mov	ip, r2
    6452:	4642      	mov	r2, r8
    6454:	4661      	mov	r1, ip
    6456:	6011      	str	r1, [r2, #0]
    6458:	2284      	movs	r2, #132	; 0x84
    645a:	4649      	mov	r1, r9
    645c:	465f      	mov	r7, fp
    645e:	0052      	lsls	r2, r2, #1
    6460:	508f      	str	r7, [r1, r2]
    6462:	2d02      	cmp	r5, #2
    6464:	d1c1      	bne.n	63ea <__register_exitproc+0x2e>
    6466:	0002      	movs	r2, r0
    6468:	4655      	mov	r5, sl
    646a:	328d      	adds	r2, #141	; 0x8d
    646c:	32ff      	adds	r2, #255	; 0xff
    646e:	6811      	ldr	r1, [r2, #0]
    6470:	430d      	orrs	r5, r1
    6472:	6015      	str	r5, [r2, #0]
    6474:	e7b9      	b.n	63ea <__register_exitproc+0x2e>
    6476:	0020      	movs	r0, r4
    6478:	304d      	adds	r0, #77	; 0x4d
    647a:	30ff      	adds	r0, #255	; 0xff
    647c:	50e0      	str	r0, [r4, r3]
    647e:	e7ae      	b.n	63de <__register_exitproc+0x22>
    6480:	2001      	movs	r0, #1
    6482:	4240      	negs	r0, r0
    6484:	e7b6      	b.n	63f4 <__register_exitproc+0x38>
    6486:	46c0      	nop			; (mov r8, r8)
    6488:	000066dc 	.word	0x000066dc
    648c:	00000000 	.word	0x00000000

00006490 <spi2MOSI>:
    6490:	0c000002 00000200                                .....

00006495 <spi2SCK>:
    6495:	0e000002 00000200                                .....

0000649a <spi2MISO>:
    649a:	0d000002 8d200000                                ......

000064a0 <lookupTable.12495>:
    64a0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    64b0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    64c0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    64d0:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    64e0:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    64f0:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    6500:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    6510:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    6520:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    6530:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    6540:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    6550:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    6560:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    6570:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    6580:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    6590:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    65a0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    65b0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    65c0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    65d0:	000f048e                                ....

000065d4 <senseBatPin>:
    65d4:	06000000 01000106                                .....

000065d9 <senseAPin>:
    65d9:	03010001 0100010b                                .....

000065de <senseBPin>:
    65de:	02010001 0000000a                                .....

000065e3 <senseCPin>:
    65e3:	03000000 00000001                                .....

000065e8 <senseDPin>:
    65e8:	02000000 00000000                                .....

000065ed <analogAccelPin>:
    65ed:	07000000 00000207                                .....

000065f2 <spi2MOSI>:
    65f2:	0c000002 00000200                                .....

000065f7 <spi2SCK>:
    65f7:	0e000002 776f7000 00000000 00000000     .....pow........
	...

00006608 <TWO52>:
    6608:	00000000 43300000 00000000 c3300000     ......0C......0.
    6618:	00003ea4 00003e02 00003e02 00003e00     .>...>...>...>..
    6628:	00003e96 00003e96 00003e8c 00003e00     .>...>...>...>..
    6638:	00003e96 00003e8c 00003e96 00003e00     .>...>...>...>..
    6648:	00003e9c 00003e9c 00003e9c 00003f26     .>...>...>..&?..
    6658:	00004bd8 00004aa6 00004bac 00004a9c     .K...J...K...J..
    6668:	00004bac 00004bb6 00004bac 00004a9c     .K...K...K...J..
    6678:	00004aa6 00004aa6 00004bb6 00004a9c     .J...J...K...J..
    6688:	00004a92 00004a92 00004a92 00004e08     .J...J...J...N..
    6698:	00005420 000052e0 000052e0 000052de      T...R...R...R..
    66a8:	000053f8 000053f8 000053ea 000052de     .S...S...S...R..
    66b8:	000053f8 000053ea 000053f8 000052de     .S...S...S...R..
    66c8:	00005400 00005400 00005400 00005600     .T...T...T...V..
    66d8:	00000043                                C...

000066dc <_global_impure_ptr>:
    66dc:	20000078                                x.. 

000066e0 <_init>:
    66e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66e6:	bc08      	pop	{r3}
    66e8:	469e      	mov	lr, r3
    66ea:	4770      	bx	lr

000066ec <__init_array_start>:
    66ec:	00006361 	.word	0x00006361

000066f0 <__frame_dummy_init_array_entry>:
    66f0:	000000dd                                ....

000066f4 <_fini>:
    66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66fa:	bc08      	pop	{r3}
    66fc:	469e      	mov	lr, r3
    66fe:	4770      	bx	lr

00006700 <__fini_array_start>:
    6700:	000000b5 	.word	0x000000b5
