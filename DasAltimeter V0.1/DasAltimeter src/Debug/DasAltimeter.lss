
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000345c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000345c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  000038a0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003a50  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001836a  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d97  00000000  00000000  00038823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001a49  00000000  00000000  0003a5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000310  00000000  00000000  0003c003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000330  00000000  00000000  0003c313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014be4  00000000  00000000  0003c643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007054  00000000  00000000  00051227  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000721e2  00000000  00000000  0005827b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ad8  00000000  00000000  000ca460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteByte(uint32_t address, uint8_t byteToWrite) {
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
       c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
      2c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000da9 	.word	0x00000da9
      50:	00000115 	.word	0x00000115

    dummy_rx = spiDataTransfer(SPI1,byteToWrite);
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
    pinHigh(cs_mem);

}
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000e51 	.word	0x00000e51
      90:	00000eb9 	.word	0x00000eb9
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000345c 	.word	0x0000345c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000345c 	.word	0x0000345c
     10c:	0000345c 	.word	0x0000345c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	0000345c 	.word	0x0000345c
     1dc:	20000438 	.word	0x20000438
     1e0:	200005f0 	.word	0x200005f0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00002fa1 	.word	0x00002fa1
     20c:	0000081d 	.word	0x0000081d

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	464f      	mov	r7, r9
     224:	4646      	mov	r6, r8
     226:	b4c0      	push	{r6, r7}
     228:	b083      	sub	sp, #12
     22a:	4e16      	ldr	r6, [pc, #88]	; (284 <readMS5803AdcResults+0x64>)
     22c:	2380      	movs	r3, #128	; 0x80
     22e:	021b      	lsls	r3, r3, #8
     230:	4699      	mov	r9, r3
     232:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     234:	4c14      	ldr	r4, [pc, #80]	; (288 <readMS5803AdcResults+0x68>)
     236:	2300      	movs	r3, #0
     238:	9300      	str	r3, [sp, #0]
     23a:	6822      	ldr	r2, [r4, #0]
     23c:	6863      	ldr	r3, [r4, #4]
     23e:	68a0      	ldr	r0, [r4, #8]
     240:	68e1      	ldr	r1, [r4, #12]
     242:	4d12      	ldr	r5, [pc, #72]	; (28c <readMS5803AdcResults+0x6c>)
     244:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     246:	6922      	ldr	r2, [r4, #16]
     248:	6963      	ldr	r3, [r4, #20]
     24a:	68a0      	ldr	r0, [r4, #8]
     24c:	68e1      	ldr	r1, [r4, #12]
     24e:	4f10      	ldr	r7, [pc, #64]	; (290 <readMS5803AdcResults+0x70>)
     250:	47b8      	blx	r7
     252:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     254:	6922      	ldr	r2, [r4, #16]
     256:	6963      	ldr	r3, [r4, #20]
     258:	68a0      	ldr	r0, [r4, #8]
     25a:	68e1      	ldr	r1, [r4, #12]
     25c:	47b8      	blx	r7
     25e:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     260:	6922      	ldr	r2, [r4, #16]
     262:	6963      	ldr	r3, [r4, #20]
     264:	68a0      	ldr	r0, [r4, #8]
     266:	68e1      	ldr	r1, [r4, #12]
     268:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26a:	464b      	mov	r3, r9
     26c:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     26e:	4643      	mov	r3, r8
     270:	041e      	lsls	r6, r3, #16
     272:	022d      	lsls	r5, r5, #8
     274:	4335      	orrs	r5, r6
     276:	4328      	orrs	r0, r5
}
     278:	b003      	add	sp, #12
     27a:	bc0c      	pop	{r2, r3}
     27c:	4690      	mov	r8, r2
     27e:	4699      	mov	r9, r3
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	41004400 	.word	0x41004400
     288:	000031a4 	.word	0x000031a4
     28c:	00000b3d 	.word	0x00000b3d
     290:	00000b8d 	.word	0x00000b8d

00000294 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	464f      	mov	r7, r9
     298:	4646      	mov	r6, r8
     29a:	b4c0      	push	{r6, r7}
     29c:	b08b      	sub	sp, #44	; 0x2c
     29e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     2a0:	8803      	ldrh	r3, [r0, #0]
     2a2:	251e      	movs	r5, #30
     2a4:	aa02      	add	r2, sp, #8
     2a6:	4694      	mov	ip, r2
     2a8:	4465      	add	r5, ip
     2aa:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2ac:	8843      	ldrh	r3, [r0, #2]
     2ae:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     2b0:	8883      	ldrh	r3, [r0, #4]
     2b2:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2b4:	88c3      	ldrh	r3, [r0, #6]
     2b6:	ae08      	add	r6, sp, #32
     2b8:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     2ba:	8903      	ldrh	r3, [r0, #8]
     2bc:	2216      	movs	r2, #22
     2be:	4462      	add	r2, ip
     2c0:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     2c2:	8941      	ldrh	r1, [r0, #10]
     2c4:	ab07      	add	r3, sp, #28
     2c6:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     2c8:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2ca:	0224      	lsls	r4, r4, #8
     2cc:	6902      	ldr	r2, [r0, #16]
     2ce:	1b14      	subs	r4, r2, r4
     2d0:	17e2      	asrs	r2, r4, #31
     2d2:	0011      	movs	r1, r2
     2d4:	8818      	ldrh	r0, [r3, #0]
     2d6:	b280      	uxth	r0, r0
     2d8:	4b2b      	ldr	r3, [pc, #172]	; (388 <ConvertPressureTemperature+0xf4>)
     2da:	4699      	mov	r9, r3
     2dc:	0022      	movs	r2, r4
     2de:	9101      	str	r1, [sp, #4]
     2e0:	000b      	movs	r3, r1
     2e2:	2100      	movs	r1, #0
     2e4:	47c8      	blx	r9
     2e6:	23fa      	movs	r3, #250	; 0xfa
     2e8:	00db      	lsls	r3, r3, #3
     2ea:	469c      	mov	ip, r3
     2ec:	4461      	add	r1, ip
     2ee:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2f0:	ab02      	add	r3, sp, #8
     2f2:	8b9b      	ldrh	r3, [r3, #28]
     2f4:	b29b      	uxth	r3, r3
     2f6:	4698      	mov	r8, r3
     2f8:	8830      	ldrh	r0, [r6, #0]
     2fa:	b280      	uxth	r0, r0
     2fc:	0022      	movs	r2, r4
     2fe:	9b01      	ldr	r3, [sp, #4]
     300:	2100      	movs	r1, #0
     302:	47c8      	blx	r9
     304:	064e      	lsls	r6, r1, #25
     306:	09c2      	lsrs	r2, r0, #7
     308:	4332      	orrs	r2, r6
     30a:	11cb      	asrs	r3, r1, #7
     30c:	2100      	movs	r1, #0
     30e:	4646      	mov	r6, r8
     310:	0430      	lsls	r0, r6, #16
     312:	1812      	adds	r2, r2, r0
     314:	414b      	adcs	r3, r1
     316:	9204      	str	r2, [sp, #16]
     318:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     31a:	882d      	ldrh	r5, [r5, #0]
     31c:	b2ad      	uxth	r5, r5
     31e:	aa02      	add	r2, sp, #8
     320:	8b50      	ldrh	r0, [r2, #26]
     322:	b280      	uxth	r0, r0
     324:	0022      	movs	r2, r4
     326:	9b01      	ldr	r3, [sp, #4]
     328:	2100      	movs	r1, #0
     32a:	47c8      	blx	r9
     32c:	060c      	lsls	r4, r1, #24
     32e:	0a02      	lsrs	r2, r0, #8
     330:	4322      	orrs	r2, r4
     332:	120b      	asrs	r3, r1, #8
     334:	2100      	movs	r1, #0
     336:	03e8      	lsls	r0, r5, #15
     338:	1812      	adds	r2, r2, r0
     33a:	414b      	adcs	r3, r1
     33c:	9202      	str	r2, [sp, #8]
     33e:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     340:	9a02      	ldr	r2, [sp, #8]
     342:	9b03      	ldr	r3, [sp, #12]
     344:	9c04      	ldr	r4, [sp, #16]
     346:	9d05      	ldr	r5, [sp, #20]
     348:	68f8      	ldr	r0, [r7, #12]
     34a:	2100      	movs	r1, #0
     34c:	47c8      	blx	r9
     34e:	17ce      	asrs	r6, r1, #31
     350:	02f6      	lsls	r6, r6, #11
     352:	0af2      	lsrs	r2, r6, #11
     354:	2300      	movs	r3, #0
     356:	1880      	adds	r0, r0, r2
     358:	4159      	adcs	r1, r3
     35a:	02ce      	lsls	r6, r1, #11
     35c:	0d42      	lsrs	r2, r0, #21
     35e:	4332      	orrs	r2, r6
     360:	154b      	asrs	r3, r1, #21
     362:	1b12      	subs	r2, r2, r4
     364:	41ab      	sbcs	r3, r5
     366:	17dc      	asrs	r4, r3, #31
     368:	0464      	lsls	r4, r4, #17
     36a:	0c60      	lsrs	r0, r4, #17
     36c:	2100      	movs	r1, #0
     36e:	1812      	adds	r2, r2, r0
     370:	414b      	adcs	r3, r1
     372:	0011      	movs	r1, r2
     374:	045b      	lsls	r3, r3, #17
     376:	0bca      	lsrs	r2, r1, #15
     378:	431a      	orrs	r2, r3
     37a:	61fa      	str	r2, [r7, #28]
}
     37c:	b00b      	add	sp, #44	; 0x2c
     37e:	bc0c      	pop	{r2, r3}
     380:	4690      	mov	r8, r2
     382:	4699      	mov	r9, r3
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	00001491 	.word	0x00001491

0000038c <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     390:	69c2      	ldr	r2, [r0, #28]
     392:	0093      	lsls	r3, r2, #2
     394:	189b      	adds	r3, r3, r2
     396:	005b      	lsls	r3, r3, #1
     398:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     39a:	4a11      	ldr	r2, [pc, #68]	; (3e0 <pascalToCent+0x54>)
     39c:	4293      	cmp	r3, r2
     39e:	d902      	bls.n	3a6 <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     3a0:	4b10      	ldr	r3, [pc, #64]	; (3e4 <pascalToCent+0x58>)
     3a2:	6203      	str	r3, [r0, #32]
     3a4:	e01a      	b.n	3dc <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     3a6:	4a0e      	ldr	r2, [pc, #56]	; (3e0 <pascalToCent+0x54>)
     3a8:	1ad2      	subs	r2, r2, r3
     3aa:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     3ac:	2a4b      	cmp	r2, #75	; 0x4b
     3ae:	dd02      	ble.n	3b6 <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     3b0:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <pascalToCent+0x5c>)
     3b2:	6203      	str	r3, [r0, #32]
     3b4:	e012      	b.n	3dc <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     3b6:	4d0d      	ldr	r5, [pc, #52]	; (3ec <pascalToCent+0x60>)
     3b8:	0091      	lsls	r1, r2, #2
     3ba:	1869      	adds	r1, r5, r1
     3bc:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3be:	0296      	lsls	r6, r2, #10
     3c0:	4907      	ldr	r1, [pc, #28]	; (3e0 <pascalToCent+0x54>)
     3c2:	1b89      	subs	r1, r1, r6
     3c4:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     3c6:	3201      	adds	r2, #1
     3c8:	0092      	lsls	r2, r2, #2
     3ca:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3cc:	6992      	ldr	r2, [r2, #24]
     3ce:	1a12      	subs	r2, r2, r0
     3d0:	4353      	muls	r3, r2
     3d2:	0a9b      	lsrs	r3, r3, #10
     3d4:	1818      	adds	r0, r3, r0
     3d6:	4b06      	ldr	r3, [pc, #24]	; (3f0 <pascalToCent+0x64>)
     3d8:	4798      	blx	r3
     3da:	6220      	str	r0, [r4, #32]
        }
    }
}
     3dc:	bd70      	pop	{r4, r5, r6, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	000199cc 	.word	0x000199cc
     3e4:	c6e5c000 	.word	0xc6e5c000
     3e8:	497048e0 	.word	0x497048e0
     3ec:	000031a4 	.word	0x000031a4
     3f0:	00001f3d 	.word	0x00001f3d

000003f4 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	465f      	mov	r7, fp
     3f8:	4656      	mov	r6, sl
     3fa:	464d      	mov	r5, r9
     3fc:	4644      	mov	r4, r8
     3fe:	b4f0      	push	{r4, r5, r6, r7}
     400:	b083      	sub	sp, #12
     402:	0007      	movs	r7, r0
     404:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     406:	4b1a      	ldr	r3, [pc, #104]	; (470 <readMS5803Coefficients+0x7c>)
     408:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     40a:	4c1a      	ldr	r4, [pc, #104]	; (474 <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     40c:	2596      	movs	r5, #150	; 0x96
     40e:	00ad      	lsls	r5, r5, #2
     410:	0028      	movs	r0, r5
     412:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     414:	0028      	movs	r0, r5
     416:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     418:	2380      	movs	r3, #128	; 0x80
     41a:	021b      	lsls	r3, r3, #8
     41c:	4699      	mov	r9, r3
     41e:	4a16      	ldr	r2, [pc, #88]	; (478 <readMS5803Coefficients+0x84>)
     420:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     422:	9600      	str	r6, [sp, #0]
     424:	6822      	ldr	r2, [r4, #0]
     426:	6863      	ldr	r3, [r4, #4]
     428:	68a0      	ldr	r0, [r4, #8]
     42a:	68e1      	ldr	r1, [r4, #12]
     42c:	4d13      	ldr	r5, [pc, #76]	; (47c <readMS5803Coefficients+0x88>)
     42e:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     430:	6922      	ldr	r2, [r4, #16]
     432:	6963      	ldr	r3, [r4, #20]
     434:	68a0      	ldr	r0, [r4, #8]
     436:	68e1      	ldr	r1, [r4, #12]
     438:	4d11      	ldr	r5, [pc, #68]	; (480 <readMS5803Coefficients+0x8c>)
     43a:	47a8      	blx	r5
     43c:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     43e:	6922      	ldr	r2, [r4, #16]
     440:	6963      	ldr	r3, [r4, #20]
     442:	68a0      	ldr	r0, [r4, #8]
     444:	68e1      	ldr	r1, [r4, #12]
     446:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     448:	464b      	mov	r3, r9
     44a:	4a0b      	ldr	r2, [pc, #44]	; (478 <readMS5803Coefficients+0x84>)
     44c:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     44e:	4643      	mov	r3, r8
     450:	021d      	lsls	r5, r3, #8
     452:	4328      	orrs	r0, r5
     454:	8038      	strh	r0, [r7, #0]
     456:	3602      	adds	r6, #2
     458:	b2f6      	uxtb	r6, r6
     45a:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     45c:	2eae      	cmp	r6, #174	; 0xae
     45e:	d1d5      	bne.n	40c <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     460:	b003      	add	sp, #12
     462:	bc3c      	pop	{r2, r3, r4, r5}
     464:	4690      	mov	r8, r2
     466:	4699      	mov	r9, r3
     468:	46a2      	mov	sl, r4
     46a:	46ab      	mov	fp, r5
     46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00000d51 	.word	0x00000d51
     474:	000031a4 	.word	0x000031a4
     478:	41004400 	.word	0x41004400
     47c:	00000b3d 	.word	0x00000b3d
     480:	00000b8d 	.word	0x00000b8d

00000484 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     484:	b5f0      	push	{r4, r5, r6, r7, lr}
     486:	b083      	sub	sp, #12
     488:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     48a:	4d10      	ldr	r5, [pc, #64]	; (4cc <initMS5803Barometer+0x48>)
     48c:	2680      	movs	r6, #128	; 0x80
     48e:	0236      	lsls	r6, r6, #8
     490:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     492:	490f      	ldr	r1, [pc, #60]	; (4d0 <initMS5803Barometer+0x4c>)
     494:	231e      	movs	r3, #30
     496:	9300      	str	r3, [sp, #0]
     498:	680a      	ldr	r2, [r1, #0]
     49a:	684b      	ldr	r3, [r1, #4]
     49c:	6888      	ldr	r0, [r1, #8]
     49e:	68c9      	ldr	r1, [r1, #12]
     4a0:	4f0c      	ldr	r7, [pc, #48]	; (4d4 <initMS5803Barometer+0x50>)
     4a2:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a4:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     4a6:	20c8      	movs	r0, #200	; 0xc8
     4a8:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <initMS5803Barometer+0x54>)
     4aa:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     4ac:	0020      	movs	r0, r4
     4ae:	4b0b      	ldr	r3, [pc, #44]	; (4dc <initMS5803Barometer+0x58>)
     4b0:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     4b2:	4b0b      	ldr	r3, [pc, #44]	; (4e0 <initMS5803Barometer+0x5c>)
     4b4:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     4b6:	4b0b      	ldr	r3, [pc, #44]	; (4e4 <initMS5803Barometer+0x60>)
     4b8:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     4ba:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <initMS5803Barometer+0x64>)
     4bc:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     4be:	4b0b      	ldr	r3, [pc, #44]	; (4ec <initMS5803Barometer+0x68>)
     4c0:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     4c2:	23fa      	movs	r3, #250	; 0xfa
     4c4:	00db      	lsls	r3, r3, #3
     4c6:	6163      	str	r3, [r4, #20]




}
     4c8:	b003      	add	sp, #12
     4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4cc:	41004400 	.word	0x41004400
     4d0:	000031a4 	.word	0x000031a4
     4d4:	00000b3d 	.word	0x00000b3d
     4d8:	00000d7d 	.word	0x00000d7d
     4dc:	000003f5 	.word	0x000003f5
     4e0:	457a0000 	.word	0x457a0000
     4e4:	00002710 	.word	0x00002710
     4e8:	0041c9fe 	.word	0x0041c9fe
     4ec:	007ffae4 	.word	0x007ffae4

000004f0 <init>:
#include "math.h"




void init() {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	465f      	mov	r7, fp
     4f4:	4656      	mov	r6, sl
     4f6:	464d      	mov	r5, r9
     4f8:	4644      	mov	r4, r8
     4fa:	b4f0      	push	{r4, r5, r6, r7}
     4fc:	b083      	sub	sp, #12
    SystemInit();
     4fe:	4bba      	ldr	r3, [pc, #744]	; (7e8 <init+0x2f8>)
     500:	4798      	blx	r3
    GclkInit();
     502:	4bba      	ldr	r3, [pc, #744]	; (7ec <init+0x2fc>)
     504:	4798      	blx	r3
    RtcInit();
     506:	4bba      	ldr	r3, [pc, #744]	; (7f0 <init+0x300>)
     508:	4798      	blx	r3
    delayInit();
     50a:	4bba      	ldr	r3, [pc, #744]	; (7f4 <init+0x304>)
     50c:	4798      	blx	r3
    adcInit();
     50e:	4bba      	ldr	r3, [pc, #744]	; (7f8 <init+0x308>)
     510:	4798      	blx	r3
    dmaInit();
     512:	4bba      	ldr	r3, [pc, #744]	; (7fc <init+0x30c>)
     514:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     516:	4bba      	ldr	r3, [pc, #744]	; (800 <init+0x310>)
     518:	2240      	movs	r2, #64	; 0x40
     51a:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     51c:	21c1      	movs	r1, #193	; 0xc1
     51e:	0089      	lsls	r1, r1, #2
     520:	5858      	ldr	r0, [r3, r1]
     522:	4ab8      	ldr	r2, [pc, #736]	; (804 <init+0x314>)
     524:	4002      	ands	r2, r0
     526:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     528:	4bb7      	ldr	r3, [pc, #732]	; (808 <init+0x318>)
     52a:	2054      	movs	r0, #84	; 0x54
     52c:	5c19      	ldrb	r1, [r3, r0]
     52e:	2201      	movs	r2, #1
     530:	4391      	bics	r1, r2
     532:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     534:	2180      	movs	r1, #128	; 0x80
     536:	0349      	lsls	r1, r1, #13
     538:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     53a:	2433      	movs	r4, #51	; 0x33
     53c:	5d18      	ldrb	r0, [r3, r4]
     53e:	210f      	movs	r1, #15
     540:	4388      	bics	r0, r1
     542:	2101      	movs	r1, #1
     544:	4308      	orrs	r0, r1
     546:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     548:	3413      	adds	r4, #19
     54a:	5d18      	ldrb	r0, [r3, r4]
     54c:	4308      	orrs	r0, r1
     54e:	5518      	strb	r0, [r3, r4]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     550:	20b1      	movs	r0, #177	; 0xb1
     552:	5c1f      	ldrb	r7, [r3, r0]
     554:	3c37      	subs	r4, #55	; 0x37
     556:	4027      	ands	r7, r4
     558:	2610      	movs	r6, #16
     55a:	4337      	orrs	r7, r6
     55c:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     55e:	25c3      	movs	r5, #195	; 0xc3
     560:	5d5f      	ldrb	r7, [r3, r5]
     562:	430f      	orrs	r7, r1
     564:	555f      	strb	r7, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     566:	5c1f      	ldrb	r7, [r3, r0]
     568:	4027      	ands	r7, r4
     56a:	4337      	orrs	r7, r6
     56c:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     56e:	5d5f      	ldrb	r7, [r3, r5]
     570:	430f      	orrs	r7, r1
     572:	555f      	strb	r7, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     574:	3514      	adds	r5, #20
     576:	5d5f      	ldrb	r7, [r3, r5]
     578:	4397      	bics	r7, r2
     57a:	555f      	strb	r7, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     57c:	3d4f      	subs	r5, #79	; 0x4f
     57e:	46aa      	mov	sl, r5
     580:	2780      	movs	r7, #128	; 0x80
     582:	043f      	lsls	r7, r7, #16
     584:	515f      	str	r7, [r3, r5]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     586:	350c      	adds	r5, #12
     588:	46ac      	mov	ip, r5
     58a:	515f      	str	r7, [r3, r5]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     58c:	5c1f      	ldrb	r7, [r3, r0]
     58e:	3d85      	subs	r5, #133	; 0x85
     590:	43af      	bics	r7, r5
     592:	430f      	orrs	r7, r1
     594:	541f      	strb	r7, [r3, r0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     596:	35b3      	adds	r5, #179	; 0xb3
     598:	46a8      	mov	r8, r5
     59a:	5d5f      	ldrb	r7, [r3, r5]
     59c:	430f      	orrs	r7, r1
     59e:	555f      	strb	r7, [r3, r5]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     5a0:	5c1f      	ldrb	r7, [r3, r0]
     5a2:	3db3      	subs	r5, #179	; 0xb3
     5a4:	43af      	bics	r7, r5
     5a6:	430f      	orrs	r7, r1
     5a8:	541f      	strb	r7, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5aa:	4640      	mov	r0, r8
     5ac:	5c18      	ldrb	r0, [r3, r0]
     5ae:	4308      	orrs	r0, r1
     5b0:	4645      	mov	r5, r8
     5b2:	5558      	strb	r0, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5b4:	27d6      	movs	r7, #214	; 0xd6
     5b6:	5dd8      	ldrb	r0, [r3, r7]
     5b8:	4390      	bics	r0, r2
     5ba:	55d8      	strb	r0, [r3, r7]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5bc:	2080      	movs	r0, #128	; 0x80
     5be:	03c0      	lsls	r0, r0, #15
     5c0:	4683      	mov	fp, r0
     5c2:	4650      	mov	r0, sl
     5c4:	465d      	mov	r5, fp
     5c6:	501d      	str	r5, [r3, r0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5c8:	4660      	mov	r0, ip
     5ca:	501d      	str	r5, [r3, r0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5cc:	3fa5      	subs	r7, #165	; 0xa5
     5ce:	5dd8      	ldrb	r0, [r3, r7]
     5d0:	4020      	ands	r0, r4
     5d2:	4306      	orrs	r6, r0
     5d4:	55de      	strb	r6, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5d6:	2643      	movs	r6, #67	; 0x43
     5d8:	5d98      	ldrb	r0, [r3, r6]
     5da:	4308      	orrs	r0, r1
     5dc:	5598      	strb	r0, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5de:	3616      	adds	r6, #22
     5e0:	5d98      	ldrb	r0, [r3, r6]
     5e2:	4390      	bics	r0, r2
     5e4:	5598      	strb	r0, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e6:	2080      	movs	r0, #128	; 0x80
     5e8:	0480      	lsls	r0, r0, #18
     5ea:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ec:	6158      	str	r0, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	5dd8      	ldrb	r0, [r3, r7]
     5f0:	250f      	movs	r5, #15
     5f2:	43a8      	bics	r0, r5
     5f4:	4308      	orrs	r0, r1
     5f6:	55d8      	strb	r0, [r3, r7]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f8:	3e17      	subs	r6, #23
     5fa:	5d98      	ldrb	r0, [r3, r6]
     5fc:	4308      	orrs	r0, r1
     5fe:	5598      	strb	r0, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	3616      	adds	r6, #22
     602:	5d98      	ldrb	r0, [r3, r6]
     604:	4390      	bics	r0, r2
     606:	5598      	strb	r0, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     608:	2080      	movs	r0, #128	; 0x80
     60a:	0440      	lsls	r0, r0, #17
     60c:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     60e:	6158      	str	r0, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     610:	2048      	movs	r0, #72	; 0x48
     612:	4680      	mov	r8, r0
     614:	5c18      	ldrb	r0, [r3, r0]
     616:	4390      	bics	r0, r2
     618:	4645      	mov	r5, r8
     61a:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     61c:	2080      	movs	r0, #128	; 0x80
     61e:	0040      	lsls	r0, r0, #1
     620:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     622:	38b7      	subs	r0, #183	; 0xb7
     624:	4681      	mov	r9, r0
     626:	5c18      	ldrb	r0, [r3, r0]
     628:	4390      	bics	r0, r2
     62a:	464d      	mov	r5, r9
     62c:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     62e:	2080      	movs	r0, #128	; 0x80
     630:	0080      	lsls	r0, r0, #2
     632:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     634:	371a      	adds	r7, #26
     636:	5dd8      	ldrb	r0, [r3, r7]
     638:	4390      	bics	r0, r2
     63a:	55d8      	strb	r0, [r3, r7]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     63c:	5dde      	ldrb	r6, [r3, r7]
     63e:	2002      	movs	r0, #2
     640:	4306      	orrs	r6, r0
     642:	55de      	strb	r6, [r3, r7]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     644:	2680      	movs	r6, #128	; 0x80
     646:	0136      	lsls	r6, r6, #4
     648:	605e      	str	r6, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     64a:	3d14      	subs	r5, #20
     64c:	5d5e      	ldrb	r6, [r3, r5]
     64e:	4026      	ands	r6, r4
     650:	0035      	movs	r5, r6
     652:	2620      	movs	r6, #32
     654:	4335      	orrs	r5, r6
     656:	46ac      	mov	ip, r5
     658:	2535      	movs	r5, #53	; 0x35
     65a:	4666      	mov	r6, ip
     65c:	555e      	strb	r6, [r3, r5]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65e:	5ddd      	ldrb	r5, [r3, r7]
     660:	430d      	orrs	r5, r1
     662:	55dd      	strb	r5, [r3, r7]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     664:	2534      	movs	r5, #52	; 0x34
     666:	46ac      	mov	ip, r5
     668:	5d5f      	ldrb	r7, [r3, r5]
     66a:	4027      	ands	r7, r4
     66c:	3d14      	subs	r5, #20
     66e:	432f      	orrs	r7, r5
     670:	4665      	mov	r5, ip
     672:	555f      	strb	r7, [r3, r5]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     674:	464d      	mov	r5, r9
     676:	5d5f      	ldrb	r7, [r3, r5]
     678:	430f      	orrs	r7, r1
     67a:	555f      	strb	r7, [r3, r5]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67c:	4665      	mov	r5, ip
     67e:	5d5f      	ldrb	r7, [r3, r5]
     680:	3d25      	subs	r5, #37	; 0x25
     682:	43af      	bics	r7, r5
     684:	4307      	orrs	r7, r0
     686:	4665      	mov	r5, ip
     688:	555f      	strb	r7, [r3, r5]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68a:	4645      	mov	r5, r8
     68c:	5d5f      	ldrb	r7, [r3, r5]
     68e:	430f      	orrs	r7, r1
     690:	555f      	strb	r7, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     692:	3582      	adds	r5, #130	; 0x82
     694:	5d5f      	ldrb	r7, [r3, r5]
     696:	4397      	bics	r7, r2
     698:	555f      	strb	r7, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     69a:	2780      	movs	r7, #128	; 0x80
     69c:	00ff      	lsls	r7, r7, #3
     69e:	4655      	mov	r5, sl
     6a0:	515f      	str	r7, [r3, r5]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6a2:	3510      	adds	r5, #16
     6a4:	515f      	str	r7, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a6:	3d4e      	subs	r5, #78	; 0x4e
     6a8:	46a8      	mov	r8, r5
     6aa:	5d5d      	ldrb	r5, [r3, r5]
     6ac:	4395      	bics	r5, r2
     6ae:	46ac      	mov	ip, r5
     6b0:	4645      	mov	r5, r8
     6b2:	4666      	mov	r6, ip
     6b4:	555e      	strb	r6, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b6:	609f      	str	r7, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6b8:	619f      	str	r7, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ba:	3506      	adds	r5, #6
     6bc:	46a8      	mov	r8, r5
     6be:	5d5f      	ldrb	r7, [r3, r5]
     6c0:	4397      	bics	r7, r2
     6c2:	555f      	strb	r7, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c4:	2780      	movs	r7, #128	; 0x80
     6c6:	027f      	lsls	r7, r7, #9
     6c8:	609f      	str	r7, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	3501      	adds	r5, #1
     6cc:	46a9      	mov	r9, r5
     6ce:	5d5f      	ldrb	r7, [r3, r5]
     6d0:	4397      	bics	r7, r2
     6d2:	555f      	strb	r7, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2780      	movs	r7, #128	; 0x80
     6d6:	02bf      	lsls	r7, r7, #10
     6d8:	609f      	str	r7, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6da:	2753      	movs	r7, #83	; 0x53
     6dc:	5ddd      	ldrb	r5, [r3, r7]
     6de:	4395      	bics	r5, r2
     6e0:	55dd      	strb	r5, [r3, r7]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e2:	5ddd      	ldrb	r5, [r3, r7]
     6e4:	4305      	orrs	r5, r0
     6e6:	55dd      	strb	r5, [r3, r7]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6e8:	2580      	movs	r5, #128	; 0x80
     6ea:	032d      	lsls	r5, r5, #12
     6ec:	605d      	str	r5, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ee:	2539      	movs	r5, #57	; 0x39
     6f0:	46aa      	mov	sl, r5
     6f2:	5d5d      	ldrb	r5, [r3, r5]
     6f4:	4025      	ands	r5, r4
     6f6:	2620      	movs	r6, #32
     6f8:	4335      	orrs	r5, r6
     6fa:	46ac      	mov	ip, r5
     6fc:	4655      	mov	r5, sl
     6fe:	4666      	mov	r6, ip
     700:	555e      	strb	r6, [r3, r5]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     702:	5ddd      	ldrb	r5, [r3, r7]
     704:	430d      	orrs	r5, r1
     706:	55dd      	strb	r5, [r3, r7]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     708:	3f1b      	subs	r7, #27
     70a:	5ddd      	ldrb	r5, [r3, r7]
     70c:	402c      	ands	r4, r5
     70e:	2620      	movs	r6, #32
     710:	4326      	orrs	r6, r4
     712:	55de      	strb	r6, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     714:	464c      	mov	r4, r9
     716:	5d1c      	ldrb	r4, [r3, r4]
     718:	430c      	orrs	r4, r1
     71a:	464d      	mov	r5, r9
     71c:	555c      	strb	r4, [r3, r5]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     71e:	5ddc      	ldrb	r4, [r3, r7]
     720:	3d42      	subs	r5, #66	; 0x42
     722:	43ac      	bics	r4, r5
     724:	4304      	orrs	r4, r0
     726:	55dc      	strb	r4, [r3, r7]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     728:	4644      	mov	r4, r8
     72a:	5d1c      	ldrb	r4, [r3, r4]
     72c:	4321      	orrs	r1, r4
     72e:	4644      	mov	r4, r8
     730:	5519      	strb	r1, [r3, r4]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     732:	3402      	adds	r4, #2
     734:	5d19      	ldrb	r1, [r3, r4]
     736:	4391      	bics	r1, r2
     738:	5519      	strb	r1, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73a:	2180      	movs	r1, #128	; 0x80
     73c:	02c9      	lsls	r1, r1, #11
     73e:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     740:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	3c06      	subs	r4, #6
     744:	5d19      	ldrb	r1, [r3, r4]
     746:	4391      	bics	r1, r2
     748:	5519      	strb	r1, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     74a:	2180      	movs	r1, #128	; 0x80
     74c:	0149      	lsls	r1, r1, #5
     74e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     750:	3402      	adds	r4, #2
     752:	5d19      	ldrb	r1, [r3, r4]
     754:	4391      	bics	r1, r2
     756:	5519      	strb	r1, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     758:	2180      	movs	r1, #128	; 0x80
     75a:	01c9      	lsls	r1, r1, #7
     75c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75e:	214d      	movs	r1, #77	; 0x4d
     760:	5c5c      	ldrb	r4, [r3, r1]
     762:	4394      	bics	r4, r2
     764:	545c      	strb	r4, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     766:	5c5c      	ldrb	r4, [r3, r1]
     768:	4320      	orrs	r0, r4
     76a:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     76c:	2180      	movs	r1, #128	; 0x80
     76e:	0189      	lsls	r1, r1, #6
     770:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	204f      	movs	r0, #79	; 0x4f
     774:	5c19      	ldrb	r1, [r3, r0]
     776:	4391      	bics	r1, r2
     778:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     77a:	2180      	movs	r1, #128	; 0x80
     77c:	0209      	lsls	r1, r1, #8
     77e:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     780:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     782:	2155      	movs	r1, #85	; 0x55
     784:	5c58      	ldrb	r0, [r3, r1]
     786:	4390      	bics	r0, r2
     788:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78a:	2080      	movs	r0, #128	; 0x80
     78c:	0380      	lsls	r0, r0, #14
     78e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     790:	2040      	movs	r0, #64	; 0x40
     792:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	2056      	movs	r0, #86	; 0x56
     796:	5c19      	ldrb	r1, [r3, r0]
     798:	4391      	bics	r1, r2
     79a:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     79c:	465a      	mov	r2, fp
     79e:	609a      	str	r2, [r3, #8]
    pinOut(TxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     7a0:	2204      	movs	r2, #4
     7a2:	2103      	movs	r1, #3
     7a4:	2000      	movs	r0, #0
     7a6:	4e19      	ldr	r6, [pc, #100]	; (80c <init+0x31c>)
     7a8:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     7aa:	2400      	movs	r4, #0
     7ac:	9401      	str	r4, [sp, #4]
     7ae:	9400      	str	r4, [sp, #0]
     7b0:	2300      	movs	r3, #0
     7b2:	2200      	movs	r2, #0
     7b4:	2103      	movs	r1, #3
     7b6:	2000      	movs	r0, #0
     7b8:	4d15      	ldr	r5, [pc, #84]	; (810 <init+0x320>)
     7ba:	47a8      	blx	r5

    sercomClockEnable(SPI1, 3, 4);
     7bc:	2204      	movs	r2, #4
     7be:	2103      	movs	r1, #3
     7c0:	2001      	movs	r0, #1
     7c2:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     7c4:	9401      	str	r4, [sp, #4]
     7c6:	9400      	str	r4, [sp, #0]
     7c8:	2300      	movs	r3, #0
     7ca:	2200      	movs	r2, #0
     7cc:	2103      	movs	r1, #3
     7ce:	2001      	movs	r0, #1
     7d0:	47a8      	blx	r5

    TC4Init();
     7d2:	4b10      	ldr	r3, [pc, #64]	; (814 <init+0x324>)
     7d4:	4798      	blx	r3
    TC5Init();
     7d6:	4b10      	ldr	r3, [pc, #64]	; (818 <init+0x328>)
     7d8:	4798      	blx	r3
}
     7da:	b003      	add	sp, #12
     7dc:	bc3c      	pop	{r2, r3, r4, r5}
     7de:	4690      	mov	r8, r2
     7e0:	4699      	mov	r9, r3
     7e2:	46a2      	mov	sl, r4
     7e4:	46ab      	mov	fp, r5
     7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7e8:	00000211 	.word	0x00000211
     7ec:	00000be5 	.word	0x00000be5
     7f0:	00000c75 	.word	0x00000c75
     7f4:	00000d31 	.word	0x00000d31
     7f8:	00000a3d 	.word	0x00000a3d
     7fc:	00000ed1 	.word	0x00000ed1
     800:	e000e100 	.word	0xe000e100
     804:	ff00ffff 	.word	0xff00ffff
     808:	41004400 	.word	0x41004400
     80c:	00001319 	.word	0x00001319
     810:	00001381 	.word	0x00001381
     814:	00000e01 	.word	0x00000e01
     818:	00000e69 	.word	0x00000e69

0000081c <main>:

}



int main(void) {
     81c:	b5f0      	push	{r4, r5, r6, r7, lr}
     81e:	465f      	mov	r7, fp
     820:	4656      	mov	r6, sl
     822:	4645      	mov	r5, r8
     824:	b4e0      	push	{r5, r6, r7}
     826:	b0ac      	sub	sp, #176	; 0xb0

    init();
     828:	4b65      	ldr	r3, [pc, #404]	; (9c0 <main+0x1a4>)
     82a:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     82c:	2200      	movs	r2, #0
     82e:	ab09      	add	r3, sp, #36	; 0x24
     830:	701a      	strb	r2, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     832:	a80b      	add	r0, sp, #44	; 0x2c
     834:	4b63      	ldr	r3, [pc, #396]	; (9c4 <main+0x1a8>)
     836:	4798      	blx	r3
    IMUinit();
     838:	4b63      	ldr	r3, [pc, #396]	; (9c8 <main+0x1ac>)
     83a:	4798      	blx	r3
     83c:	24c8      	movs	r4, #200	; 0xc8
     83e:	0064      	lsls	r4, r4, #1
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     840:	4f62      	ldr	r7, [pc, #392]	; (9cc <main+0x1b0>)

        baseAltitude -= baseAltitude / 50;
     842:	4e63      	ldr	r6, [pc, #396]	; (9d0 <main+0x1b4>)
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     844:	a809      	add	r0, sp, #36	; 0x24
     846:	47b8      	blx	r7

        baseAltitude -= baseAltitude / 50;
     848:	9803      	ldr	r0, [sp, #12]
     84a:	9d03      	ldr	r5, [sp, #12]
     84c:	4961      	ldr	r1, [pc, #388]	; (9d4 <main+0x1b8>)
     84e:	47b0      	blx	r6
     850:	1c01      	adds	r1, r0, #0
     852:	1c28      	adds	r0, r5, #0
     854:	4b60      	ldr	r3, [pc, #384]	; (9d8 <main+0x1bc>)
     856:	4798      	blx	r3
     858:	9003      	str	r0, [sp, #12]
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
     85a:	9d03      	ldr	r5, [sp, #12]
     85c:	495d      	ldr	r1, [pc, #372]	; (9d4 <main+0x1b8>)
     85e:	9814      	ldr	r0, [sp, #80]	; 0x50
     860:	47b0      	blx	r6
     862:	1c29      	adds	r1, r5, #0
     864:	4b5d      	ldr	r3, [pc, #372]	; (9dc <main+0x1c0>)
     866:	4798      	blx	r3
     868:	9003      	str	r0, [sp, #12]
        delay_us(150);
     86a:	2096      	movs	r0, #150	; 0x96
     86c:	4b5c      	ldr	r3, [pc, #368]	; (9e0 <main+0x1c4>)
     86e:	4798      	blx	r3
     870:	3c01      	subs	r4, #1
     872:	b2a4      	uxth	r4, r4
    volatile float averageAlt;
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
     874:	2c00      	cmp	r4, #0
     876:	d1e5      	bne.n	844 <main+0x28>
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
        delay_us(150);

    }

    averageAlt = baseAltitude;
     878:	9b03      	ldr	r3, [sp, #12]
     87a:	9304      	str	r3, [sp, #16]
    u32_t lastTime = 0;

    //AT25SFErace4KBlock(0);
    u8_t writeEveryThird = 0;

    my_altimeter.currentAddress = 0x00;
     87c:	2300      	movs	r3, #0
     87e:	930a      	str	r3, [sp, #40]	; 0x28

    u32_t time = 0;
    u32_t lastTime = 0;

    //AT25SFErace4KBlock(0);
    u8_t writeEveryThird = 0;
     880:	4698      	mov	r8, r3
    my_altimeter.currentAddress = 0x00;



    while (1) {
        time = millis();
     882:	4b58      	ldr	r3, [pc, #352]	; (9e4 <main+0x1c8>)
     884:	4798      	blx	r3


        if (takeSample) {
     886:	4b58      	ldr	r3, [pc, #352]	; (9e8 <main+0x1cc>)
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	2b00      	cmp	r3, #0
     88c:	d00c      	beq.n	8a8 <main+0x8c>
            sampleTick(&my_altimeter);
     88e:	a809      	add	r0, sp, #36	; 0x24
     890:	4b4e      	ldr	r3, [pc, #312]	; (9cc <main+0x1b0>)
     892:	4798      	blx	r3
            flight(&my_altimeter);
     894:	a809      	add	r0, sp, #36	; 0x24
     896:	4b55      	ldr	r3, [pc, #340]	; (9ec <main+0x1d0>)
     898:	4798      	blx	r3
            takeSample = false;
     89a:	2200      	movs	r2, #0
     89c:	4b52      	ldr	r3, [pc, #328]	; (9e8 <main+0x1cc>)
     89e:	701a      	strb	r2, [r3, #0]
            writeEveryThird++;
     8a0:	4646      	mov	r6, r8
     8a2:	3601      	adds	r6, #1
     8a4:	b2f3      	uxtb	r3, r6
     8a6:	4698      	mov	r8, r3
        }

        if (writeEveryThird == 3) {
     8a8:	4643      	mov	r3, r8
     8aa:	2b03      	cmp	r3, #3
     8ac:	d109      	bne.n	8c2 <main+0xa6>
            //AT25SFWriteByte(my_altimeter.currentAddress,my_altimeter.myBarometer);
            //volatile u8_t byte1 = AT25SFGetByte(my_altimeter.currentAddress);
            my_altimeter.currentAddress++;
     8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     8b0:	9301      	str	r3, [sp, #4]
     8b2:	3301      	adds	r3, #1
     8b4:	930a      	str	r3, [sp, #40]	; 0x28
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	03d2      	lsls	r2, r2, #15
     8ba:	4b4d      	ldr	r3, [pc, #308]	; (9f0 <main+0x1d4>)
     8bc:	61da      	str	r2, [r3, #28]
            writeEveryThird = -1;
     8be:	23ff      	movs	r3, #255	; 0xff
     8c0:	4698      	mov	r8, r3





        averageAlt -= averageAlt / 20;
     8c2:	9804      	ldr	r0, [sp, #16]
     8c4:	9c04      	ldr	r4, [sp, #16]
     8c6:	4d42      	ldr	r5, [pc, #264]	; (9d0 <main+0x1b4>)
     8c8:	494a      	ldr	r1, [pc, #296]	; (9f4 <main+0x1d8>)
     8ca:	47a8      	blx	r5
     8cc:	1c01      	adds	r1, r0, #0
     8ce:	4f42      	ldr	r7, [pc, #264]	; (9d8 <main+0x1bc>)
     8d0:	1c20      	adds	r0, r4, #0
     8d2:	47b8      	blx	r7
     8d4:	9004      	str	r0, [sp, #16]
        averageAlt += my_altimeter.myBarometer.heightFeet / 20;
     8d6:	9e04      	ldr	r6, [sp, #16]
     8d8:	4946      	ldr	r1, [pc, #280]	; (9f4 <main+0x1d8>)
     8da:	9814      	ldr	r0, [sp, #80]	; 0x50
     8dc:	47a8      	blx	r5
     8de:	4c3f      	ldr	r4, [pc, #252]	; (9dc <main+0x1c0>)
     8e0:	1c31      	adds	r1, r6, #0
     8e2:	47a0      	blx	r4
     8e4:	9004      	str	r0, [sp, #16]


        averageAccel -= averageAccel / 10;
     8e6:	9805      	ldr	r0, [sp, #20]
     8e8:	9e05      	ldr	r6, [sp, #20]
     8ea:	4943      	ldr	r1, [pc, #268]	; (9f8 <main+0x1dc>)
     8ec:	47a8      	blx	r5
     8ee:	1c01      	adds	r1, r0, #0
     8f0:	1c30      	adds	r0, r6, #0
     8f2:	47b8      	blx	r7
     8f4:	9005      	str	r0, [sp, #20]
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;
     8f6:	9e05      	ldr	r6, [sp, #20]
     8f8:	493f      	ldr	r1, [pc, #252]	; (9f8 <main+0x1dc>)
     8fa:	9826      	ldr	r0, [sp, #152]	; 0x98
     8fc:	47a8      	blx	r5
     8fe:	1c31      	adds	r1, r6, #0
     900:	47a0      	blx	r4
     902:	9005      	str	r0, [sp, #20]

        averageXAccel -= averageXAccel / 3;
     904:	9808      	ldr	r0, [sp, #32]
     906:	9e08      	ldr	r6, [sp, #32]
     908:	493c      	ldr	r1, [pc, #240]	; (9fc <main+0x1e0>)
     90a:	47a8      	blx	r5
     90c:	1c01      	adds	r1, r0, #0
     90e:	1c30      	adds	r0, r6, #0
     910:	47b8      	blx	r7
     912:	9008      	str	r0, [sp, #32]
        averageXAccel += my_altimeter.myIMU.accelX / 3;
     914:	9e08      	ldr	r6, [sp, #32]
     916:	4939      	ldr	r1, [pc, #228]	; (9fc <main+0x1e0>)
     918:	9818      	ldr	r0, [sp, #96]	; 0x60
     91a:	47a8      	blx	r5
     91c:	1c31      	adds	r1, r6, #0
     91e:	47a0      	blx	r4
     920:	9008      	str	r0, [sp, #32]

        averageYAccel -= averageYAccel / 3;
     922:	9807      	ldr	r0, [sp, #28]
     924:	9e07      	ldr	r6, [sp, #28]
     926:	4935      	ldr	r1, [pc, #212]	; (9fc <main+0x1e0>)
     928:	47a8      	blx	r5
     92a:	1c01      	adds	r1, r0, #0
     92c:	1c30      	adds	r0, r6, #0
     92e:	47b8      	blx	r7
     930:	9007      	str	r0, [sp, #28]
        averageYAccel += my_altimeter.myIMU.accelY / 3;
     932:	9e07      	ldr	r6, [sp, #28]
     934:	4931      	ldr	r1, [pc, #196]	; (9fc <main+0x1e0>)
     936:	981a      	ldr	r0, [sp, #104]	; 0x68
     938:	47a8      	blx	r5
     93a:	1c31      	adds	r1, r6, #0
     93c:	47a0      	blx	r4
     93e:	9007      	str	r0, [sp, #28]

        averageZAccel -= averageZAccel / 3;
     940:	9806      	ldr	r0, [sp, #24]
     942:	9e06      	ldr	r6, [sp, #24]
     944:	492d      	ldr	r1, [pc, #180]	; (9fc <main+0x1e0>)
     946:	47a8      	blx	r5
     948:	1c01      	adds	r1, r0, #0
     94a:	1c30      	adds	r0, r6, #0
     94c:	47b8      	blx	r7
     94e:	9006      	str	r0, [sp, #24]
        averageZAccel += my_altimeter.myIMU.accelZ / 3;
     950:	9f06      	ldr	r7, [sp, #24]
     952:	492a      	ldr	r1, [pc, #168]	; (9fc <main+0x1e0>)
     954:	981b      	ldr	r0, [sp, #108]	; 0x6c
     956:	47a8      	blx	r5
     958:	1c39      	adds	r1, r7, #0
     95a:	47a0      	blx	r4
     95c:	9006      	str	r0, [sp, #24]



        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);
     95e:	9808      	ldr	r0, [sp, #32]
     960:	9908      	ldr	r1, [sp, #32]
     962:	9b07      	ldr	r3, [sp, #28]
     964:	469a      	mov	sl, r3
     966:	9b07      	ldr	r3, [sp, #28]
     968:	469b      	mov	fp, r3
     96a:	9e06      	ldr	r6, [sp, #24]
     96c:	9f06      	ldr	r7, [sp, #24]
     96e:	4d24      	ldr	r5, [pc, #144]	; (a00 <main+0x1e4>)
     970:	47a8      	blx	r5
     972:	9001      	str	r0, [sp, #4]
     974:	4659      	mov	r1, fp
     976:	4650      	mov	r0, sl
     978:	47a8      	blx	r5
     97a:	1c01      	adds	r1, r0, #0
     97c:	9801      	ldr	r0, [sp, #4]
     97e:	47a0      	blx	r4
     980:	9001      	str	r0, [sp, #4]
     982:	1c39      	adds	r1, r7, #0
     984:	1c30      	adds	r0, r6, #0
     986:	47a8      	blx	r5
     988:	1c01      	adds	r1, r0, #0
     98a:	9801      	ldr	r0, [sp, #4]
     98c:	47a0      	blx	r4
     98e:	9002      	str	r0, [sp, #8]


        if (sumAccel > 1.3) {
     990:	9802      	ldr	r0, [sp, #8]
     992:	4b1c      	ldr	r3, [pc, #112]	; (a04 <main+0x1e8>)
     994:	4798      	blx	r3
     996:	4a1c      	ldr	r2, [pc, #112]	; (a08 <main+0x1ec>)
     998:	4b1c      	ldr	r3, [pc, #112]	; (a0c <main+0x1f0>)
     99a:	4c1d      	ldr	r4, [pc, #116]	; (a10 <main+0x1f4>)
     99c:	47a0      	blx	r4
     99e:	2800      	cmp	r0, #0
     9a0:	d100      	bne.n	9a4 <main+0x188>
     9a2:	e76e      	b.n	882 <main+0x66>
     9a4:	24fa      	movs	r4, #250	; 0xfa
     9a6:	0064      	lsls	r4, r4, #1
     9a8:	4e11      	ldr	r6, [pc, #68]	; (9f0 <main+0x1d4>)
     9aa:	2780      	movs	r7, #128	; 0x80
     9ac:	03bf      	lsls	r7, r7, #14
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
                pinToggle(buzzerPin);
                delay_us(122);
     9ae:	4d0c      	ldr	r5, [pc, #48]	; (9e0 <main+0x1c4>)
     9b0:	61f7      	str	r7, [r6, #28]
     9b2:	207a      	movs	r0, #122	; 0x7a
     9b4:	47a8      	blx	r5
     9b6:	3c01      	subs	r4, #1
     9b8:	b2a4      	uxth	r4, r4

        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);


        if (sumAccel > 1.3) {
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
     9ba:	2c00      	cmp	r4, #0
     9bc:	d1f8      	bne.n	9b0 <main+0x194>
     9be:	e760      	b.n	882 <main+0x66>
     9c0:	000004f1 	.word	0x000004f1
     9c4:	00000485 	.word	0x00000485
     9c8:	00000a15 	.word	0x00000a15
     9cc:	00000fa1 	.word	0x00000fa1
     9d0:	000017d5 	.word	0x000017d5
     9d4:	42480000 	.word	0x42480000
     9d8:	00001c31 	.word	0x00001c31
     9dc:	000014e9 	.word	0x000014e9
     9e0:	00000d51 	.word	0x00000d51
     9e4:	00000dc9 	.word	0x00000dc9
     9e8:	20000462 	.word	0x20000462
     9ec:	00000f31 	.word	0x00000f31
     9f0:	41004400 	.word	0x41004400
     9f4:	41a00000 	.word	0x41a00000
     9f8:	41200000 	.word	0x41200000
     9fc:	40400000 	.word	0x40400000
     a00:	00001a09 	.word	0x00001a09
     a04:	00002da5 	.word	0x00002da5
     a08:	cccccccd 	.word	0xcccccccd
     a0c:	3ff4cccc 	.word	0x3ff4cccc
     a10:	00001469 	.word	0x00001469

00000a14 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a14:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a16:	4c07      	ldr	r4, [pc, #28]	; (a34 <IMUinit+0x20>)
     a18:	2580      	movs	r5, #128	; 0x80
     a1a:	00ed      	lsls	r5, r5, #3
     a1c:	2394      	movs	r3, #148	; 0x94
     a1e:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     a20:	210f      	movs	r1, #15
     a22:	2000      	movs	r0, #0
     a24:	4e04      	ldr	r6, [pc, #16]	; (a38 <IMUinit+0x24>)
     a26:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     a28:	210c      	movs	r1, #12
     a2a:	2000      	movs	r0, #0
     a2c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a2e:	2398      	movs	r3, #152	; 0x98
     a30:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     a32:	bd70      	pop	{r4, r5, r6, pc}
     a34:	41004400 	.word	0x41004400
     a38:	000013f9 	.word	0x000013f9

00000a3c <adcInit>:


#include <util.h>

void adcInit() {
     a3c:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a3e:	4a12      	ldr	r2, [pc, #72]	; (a88 <adcInit+0x4c>)
     a40:	6a13      	ldr	r3, [r2, #32]
     a42:	2180      	movs	r1, #128	; 0x80
     a44:	0249      	lsls	r1, r1, #9
     a46:	430b      	orrs	r3, r1
     a48:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a4a:	4910      	ldr	r1, [pc, #64]	; (a8c <adcInit+0x50>)
     a4c:	22e0      	movs	r2, #224	; 0xe0
     a4e:	00d2      	lsls	r2, r2, #3
     a50:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a52:	480f      	ldr	r0, [pc, #60]	; (a90 <adcInit+0x54>)
     a54:	4b0f      	ldr	r3, [pc, #60]	; (a94 <adcInit+0x58>)
     a56:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     a58:	4b0f      	ldr	r3, [pc, #60]	; (a98 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	015b      	lsls	r3, r3, #5
     a5e:	4013      	ands	r3, r2
     a60:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     a64:	685a      	ldr	r2, [r3, #4]
     a66:	0154      	lsls	r4, r2, #5
     a68:	681a      	ldr	r2, [r3, #0]
     a6a:	0ed3      	lsrs	r3, r2, #27
     a6c:	4323      	orrs	r3, r4
     a6e:	22ff      	movs	r2, #255	; 0xff
     a70:	4013      	ands	r3, r2
     a72:	4303      	orrs	r3, r0
     a74:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     a76:	2302      	movs	r3, #2
     a78:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     a7a:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     a7c:	000a      	movs	r2, r1
     a7e:	7e53      	ldrb	r3, [r2, #25]
     a80:	b25b      	sxtb	r3, r3
     a82:	2b00      	cmp	r3, #0
     a84:	dbfb      	blt.n	a7e <adcInit+0x42>
}
     a86:	bd10      	pop	{r4, pc}
     a88:	40000400 	.word	0x40000400
     a8c:	42004000 	.word	0x42004000
     a90:	0000401e 	.word	0x0000401e
     a94:	40000c00 	.word	0x40000c00
     a98:	00806024 	.word	0x00806024
     a9c:	00806020 	.word	0x00806020

00000aa0 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     aa0:	2202      	movs	r2, #2
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <adcSample+0x18>)
     aa4:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     aa6:	0019      	movs	r1, r3
     aa8:	3a01      	subs	r2, #1
     aaa:	7e0b      	ldrb	r3, [r1, #24]
     aac:	4213      	tst	r3, r2
     aae:	d0fc      	beq.n	aaa <adcSample+0xa>
    return ADC->RESULT.reg;
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <adcSample+0x18>)
     ab2:	8b58      	ldrh	r0, [r3, #26]
     ab4:	b280      	uxth	r0, r0
}
     ab6:	4770      	bx	lr
     ab8:	42004000 	.word	0x42004000

00000abc <adc_read>:


u16_t adc_read(Pin p) {
     abc:	b530      	push	{r4, r5, lr}
     abe:	b083      	sub	sp, #12
     ac0:	0c03      	lsrs	r3, r0, #16
     ac2:	0002      	movs	r2, r0
     ac4:	9000      	str	r0, [sp, #0]
     ac6:	9101      	str	r1, [sp, #4]
     ac8:	b2c9      	uxtb	r1, r1
     aca:	b2db      	uxtb	r3, r3
     acc:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ace:	07c2      	lsls	r2, r0, #31
     ad0:	d50c      	bpl.n	aec <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ad2:	0842      	lsrs	r2, r0, #1
     ad4:	01dc      	lsls	r4, r3, #7
     ad6:	1912      	adds	r2, r2, r4
     ad8:	4c14      	ldr	r4, [pc, #80]	; (b2c <adc_read+0x70>)
     ada:	46a4      	mov	ip, r4
     adc:	4462      	add	r2, ip
     ade:	7814      	ldrb	r4, [r2, #0]
     ae0:	250f      	movs	r5, #15
     ae2:	402c      	ands	r4, r5
     ae4:	2510      	movs	r5, #16
     ae6:	432c      	orrs	r4, r5
     ae8:	7014      	strb	r4, [r2, #0]
     aea:	e00b      	b.n	b04 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     aec:	0842      	lsrs	r2, r0, #1
     aee:	01dc      	lsls	r4, r3, #7
     af0:	1912      	adds	r2, r2, r4
     af2:	4c0e      	ldr	r4, [pc, #56]	; (b2c <adc_read+0x70>)
     af4:	46a4      	mov	ip, r4
     af6:	4462      	add	r2, ip
     af8:	7814      	ldrb	r4, [r2, #0]
     afa:	250f      	movs	r5, #15
     afc:	43ac      	bics	r4, r5
     afe:	2501      	movs	r5, #1
     b00:	432c      	orrs	r4, r5
     b02:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b04:	01db      	lsls	r3, r3, #7
     b06:	18c0      	adds	r0, r0, r3
     b08:	4b09      	ldr	r3, [pc, #36]	; (b30 <adc_read+0x74>)
     b0a:	469c      	mov	ip, r3
     b0c:	4460      	add	r0, ip
     b0e:	7802      	ldrb	r2, [r0, #0]
     b10:	2301      	movs	r3, #1
     b12:	4313      	orrs	r3, r2
     b14:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b16:	231f      	movs	r3, #31
     b18:	4019      	ands	r1, r3
     b1a:	23c0      	movs	r3, #192	; 0xc0
     b1c:	015b      	lsls	r3, r3, #5
     b1e:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b20:	4b04      	ldr	r3, [pc, #16]	; (b34 <adc_read+0x78>)
     b22:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     b24:	4b04      	ldr	r3, [pc, #16]	; (b38 <adc_read+0x7c>)
     b26:	4798      	blx	r3
     b28:	b003      	add	sp, #12
     b2a:	bd30      	pop	{r4, r5, pc}
     b2c:	41004430 	.word	0x41004430
     b30:	41004440 	.word	0x41004440
     b34:	42004000 	.word	0x42004000
     b38:	00000aa1 	.word	0x00000aa1

00000b3c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3e:	b085      	sub	sp, #20
     b40:	0c03      	lsrs	r3, r0, #16
     b42:	0c14      	lsrs	r4, r2, #16
     b44:	a90a      	add	r1, sp, #40	; 0x28
     b46:	7809      	ldrb	r1, [r1, #0]
     b48:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b4a:	b2dc      	uxtb	r4, r3
     b4c:	0e00      	lsrs	r0, r0, #24
     b4e:	2701      	movs	r7, #1
     b50:	003d      	movs	r5, r7
     b52:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b54:	0e12      	lsrs	r2, r2, #24
     b56:	4097      	lsls	r7, r2
     b58:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b5a:	01e0      	lsls	r0, r4, #7
     b5c:	4a0a      	ldr	r2, [pc, #40]	; (b88 <byteOut+0x4c>)
     b5e:	4694      	mov	ip, r2
     b60:	4460      	add	r0, ip
     b62:	01f4      	lsls	r4, r6, #7
     b64:	4464      	add	r4, ip
     b66:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     b68:	b24a      	sxtb	r2, r1
     b6a:	2a00      	cmp	r2, #0
     b6c:	da01      	bge.n	b72 <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b6e:	61a7      	str	r7, [r4, #24]
     b70:	e000      	b.n	b74 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b72:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b74:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     b76:	0049      	lsls	r1, r1, #1
     b78:	b2c9      	uxtb	r1, r1
     b7a:	3b01      	subs	r3, #1
     b7c:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     b7e:	2b00      	cmp	r3, #0
     b80:	d1f1      	bne.n	b66 <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     b82:	b005      	add	sp, #20
     b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	41004400 	.word	0x41004400

00000b8c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	b085      	sub	sp, #20
     b90:	0c04      	lsrs	r4, r0, #16
     b92:	9002      	str	r0, [sp, #8]
     b94:	9103      	str	r1, [sp, #12]
     b96:	0c11      	lsrs	r1, r2, #16
     b98:	0017      	movs	r7, r2
     b9a:	9200      	str	r2, [sp, #0]
     b9c:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b9e:	b2e4      	uxtb	r4, r4
     ba0:	0e05      	lsrs	r5, r0, #24
     ba2:	2601      	movs	r6, #1
     ba4:	0033      	movs	r3, r6
     ba6:	40ab      	lsls	r3, r5
     ba8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     baa:	b2ca      	uxtb	r2, r1
     bac:	0e3f      	lsrs	r7, r7, #24
     bae:	40be      	lsls	r6, r7
     bb0:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     bb2:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bb4:	01e4      	lsls	r4, r4, #7
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <byteIn+0x54>)
     bb8:	469c      	mov	ip, r3
     bba:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bbc:	01d2      	lsls	r2, r2, #7
     bbe:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc0:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bc2:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     bc4:	4033      	ands	r3, r6
     bc6:	1e5f      	subs	r7, r3, #1
     bc8:	41bb      	sbcs	r3, r7
     bca:	0040      	lsls	r0, r0, #1
     bcc:	4303      	orrs	r3, r0
     bce:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd0:	61a5      	str	r5, [r4, #24]
     bd2:	3901      	subs	r1, #1
     bd4:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     bd6:	2900      	cmp	r1, #0
     bd8:	d1f2      	bne.n	bc0 <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     bda:	b005      	add	sp, #20
     bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	41004400 	.word	0x41004400

00000be4 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     be4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     be6:	22c2      	movs	r2, #194	; 0xc2
     be8:	00d2      	lsls	r2, r2, #3
     bea:	4b18      	ldr	r3, [pc, #96]	; (c4c <GclkInit+0x68>)
     bec:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     bee:	4a18      	ldr	r2, [pc, #96]	; (c50 <GclkInit+0x6c>)
     bf0:	6851      	ldr	r1, [r2, #4]
     bf2:	2302      	movs	r3, #2
     bf4:	430b      	orrs	r3, r1
     bf6:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <GclkInit+0x70>)
     bfa:	681c      	ldr	r4, [r3, #0]
     bfc:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     bfe:	2c3f      	cmp	r4, #63	; 0x3f
     c00:	d100      	bne.n	c04 <GclkInit+0x20>
        coarse = 0x1f;
     c02:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c04:	4b14      	ldr	r3, [pc, #80]	; (c58 <GclkInit+0x74>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c06:	6818      	ldr	r0, [r3, #0]
     c08:	0580      	lsls	r0, r0, #22
     c0a:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c0c:	4b13      	ldr	r3, [pc, #76]	; (c5c <GclkInit+0x78>)
     c0e:	4298      	cmp	r0, r3
     c10:	d100      	bne.n	c14 <GclkInit+0x30>
        fine = 0x1ff;
     c12:	4813      	ldr	r0, [pc, #76]	; (c60 <GclkInit+0x7c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c14:	4a13      	ldr	r2, [pc, #76]	; (c64 <GclkInit+0x80>)
     c16:	4b0d      	ldr	r3, [pc, #52]	; (c4c <GclkInit+0x68>)
     c18:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c1a:	0019      	movs	r1, r3
     c1c:	2210      	movs	r2, #16
     c1e:	68cb      	ldr	r3, [r1, #12]
     c20:	421a      	tst	r2, r3
     c22:	d0fc      	beq.n	c1e <GclkInit+0x3a>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     c24:	02a4      	lsls	r4, r4, #10
     c26:	4320      	orrs	r0, r4
     c28:	4b08      	ldr	r3, [pc, #32]	; (c4c <GclkInit+0x68>)
     c2a:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c2c:	0019      	movs	r1, r3
     c2e:	2210      	movs	r2, #16
     c30:	68cb      	ldr	r3, [r1, #12]
     c32:	421a      	tst	r2, r3
     c34:	d0fc      	beq.n	c30 <GclkInit+0x4c>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     c36:	4a0c      	ldr	r2, [pc, #48]	; (c68 <GclkInit+0x84>)
     c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <GclkInit+0x68>)
     c3a:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c3c:	4b0b      	ldr	r3, [pc, #44]	; (c6c <GclkInit+0x88>)
     c3e:	2280      	movs	r2, #128	; 0x80
     c40:	0052      	lsls	r2, r2, #1
     c42:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     c44:	4a0a      	ldr	r2, [pc, #40]	; (c70 <GclkInit+0x8c>)
     c46:	605a      	str	r2, [r3, #4]
}
     c48:	bd10      	pop	{r4, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	40000800 	.word	0x40000800
     c50:	41004000 	.word	0x41004000
     c54:	00806024 	.word	0x00806024
     c58:	00806028 	.word	0x00806028
     c5c:	000003ff 	.word	0x000003ff
     c60:	000001ff 	.word	0x000001ff
     c64:	00000522 	.word	0x00000522
     c68:	000005a2 	.word	0x000005a2
     c6c:	40000c00 	.word	0x40000c00
     c70:	00010700 	.word	0x00010700

00000c74 <RtcInit>:

void RtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     c74:	4b1b      	ldr	r3, [pc, #108]	; (ce4 <RtcInit+0x70>)
     c76:	2281      	movs	r2, #129	; 0x81
     c78:	0052      	lsls	r2, r2, #1
     c7a:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     c7c:	4a1a      	ldr	r2, [pc, #104]	; (ce8 <RtcInit+0x74>)
     c7e:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     c80:	001a      	movs	r2, r3
     c82:	7853      	ldrb	r3, [r2, #1]
     c84:	b25b      	sxtb	r3, r3
     c86:	2b00      	cmp	r3, #0
     c88:	dbfb      	blt.n	c82 <RtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     c8a:	4a18      	ldr	r2, [pc, #96]	; (cec <RtcInit+0x78>)
     c8c:	4b15      	ldr	r3, [pc, #84]	; (ce4 <RtcInit+0x70>)
     c8e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     c90:	2204      	movs	r2, #4
     c92:	4b17      	ldr	r3, [pc, #92]	; (cf0 <RtcInit+0x7c>)
     c94:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     c96:	001a      	movs	r2, r3
     c98:	7a93      	ldrb	r3, [r2, #10]
     c9a:	09db      	lsrs	r3, r3, #7
     c9c:	d1fc      	bne.n	c98 <RtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     c9e:	4a14      	ldr	r2, [pc, #80]	; (cf0 <RtcInit+0x7c>)
     ca0:	8811      	ldrh	r1, [r2, #0]
     ca2:	23a0      	movs	r3, #160	; 0xa0
     ca4:	00db      	lsls	r3, r3, #3
     ca6:	430b      	orrs	r3, r1
     ca8:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     caa:	7a93      	ldrb	r3, [r2, #10]
     cac:	09db      	lsrs	r3, r3, #7
     cae:	d1fc      	bne.n	caa <RtcInit+0x36>

    RTC->MODE1.PER.reg = 998;
     cb0:	4a10      	ldr	r2, [pc, #64]	; (cf4 <RtcInit+0x80>)
     cb2:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <RtcInit+0x7c>)
     cb4:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cb6:	001a      	movs	r2, r3
     cb8:	7a93      	ldrb	r3, [r2, #10]
     cba:	09db      	lsrs	r3, r3, #7
     cbc:	d1fc      	bne.n	cb8 <RtcInit+0x44>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     cbe:	4b0c      	ldr	r3, [pc, #48]	; (cf0 <RtcInit+0x7c>)
     cc0:	8859      	ldrh	r1, [r3, #2]
     cc2:	4a0d      	ldr	r2, [pc, #52]	; (cf8 <RtcInit+0x84>)
     cc4:	430a      	orrs	r2, r1
     cc6:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     cc8:	2280      	movs	r2, #128	; 0x80
     cca:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ccc:	8819      	ldrh	r1, [r3, #0]
     cce:	2202      	movs	r2, #2
     cd0:	430a      	orrs	r2, r1
     cd2:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cd4:	001a      	movs	r2, r3
     cd6:	7a93      	ldrb	r3, [r2, #10]
     cd8:	09db      	lsrs	r3, r3, #7
     cda:	d1fc      	bne.n	cd6 <RtcInit+0x62>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     cdc:	2208      	movs	r2, #8
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <RtcInit+0x88>)
     ce0:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     ce2:	4770      	bx	lr
     ce4:	40000c00 	.word	0x40000c00
     ce8:	00230002 	.word	0x00230002
     cec:	00004204 	.word	0x00004204
     cf0:	40001400 	.word	0x40001400
     cf4:	000003e6 	.word	0x000003e6
     cf8:	00004010 	.word	0x00004010
     cfc:	e000e100 	.word	0xe000e100

00000d00 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     d00:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d02:	230f      	movs	r3, #15
     d04:	4018      	ands	r0, r3
     d06:	0212      	lsls	r2, r2, #8
     d08:	4b07      	ldr	r3, [pc, #28]	; (d28 <gclkEnable+0x28>)
     d0a:	401a      	ands	r2, r3
     d0c:	4302      	orrs	r2, r0
     d0e:	4c07      	ldr	r4, [pc, #28]	; (d2c <gclkEnable+0x2c>)
     d10:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d12:	0209      	lsls	r1, r1, #8
     d14:	23f8      	movs	r3, #248	; 0xf8
     d16:	015b      	lsls	r3, r3, #5
     d18:	4019      	ands	r1, r3
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	025b      	lsls	r3, r3, #9
     d1e:	4319      	orrs	r1, r3
     d20:	4308      	orrs	r0, r1
     d22:	6060      	str	r0, [r4, #4]
}
     d24:	bd10      	pop	{r4, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00ffff00 	.word	0x00ffff00
     d2c:	40000c00 	.word	0x40000c00

00000d30 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     d30:	4b04      	ldr	r3, [pc, #16]	; (d44 <delayInit+0x14>)
     d32:	4a05      	ldr	r2, [pc, #20]	; (d48 <delayInit+0x18>)
     d34:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     d36:	2230      	movs	r2, #48	; 0x30
     d38:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     d3a:	3a2b      	subs	r2, #43	; 0x2b
     d3c:	4b03      	ldr	r3, [pc, #12]	; (d4c <delayInit+0x1c>)
     d3e:	601a      	str	r2, [r3, #0]
}
     d40:	4770      	bx	lr
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	20000004 	.word	0x20000004
     d48:	0000bb80 	.word	0x0000bb80
     d4c:	e000e010 	.word	0xe000e010

00000d50 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     d50:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     d52:	4b08      	ldr	r3, [pc, #32]	; (d74 <delay_us+0x24>)
     d54:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     d56:	4a08      	ldr	r2, [pc, #32]	; (d78 <delay_us+0x28>)
        SysTick->VAL = 0;
     d58:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d5a:	2180      	movs	r1, #128	; 0x80
     d5c:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     d5e:	e006      	b.n	d6e <delay_us+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     d60:	2c00      	cmp	r4, #0
     d62:	d004      	beq.n	d6e <delay_us+0x1e>
        SysTick->LOAD = n;
     d64:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     d66:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d68:	6813      	ldr	r3, [r2, #0]
     d6a:	420b      	tst	r3, r1
     d6c:	d0fc      	beq.n	d68 <delay_us+0x18>
     d6e:	3801      	subs	r0, #1
     d70:	d2f6      	bcs.n	d60 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     d72:	bd30      	pop	{r4, r5, pc}
     d74:	20000004 	.word	0x20000004
     d78:	e000e010 	.word	0xe000e010

00000d7c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     d7c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     d7e:	4b08      	ldr	r3, [pc, #32]	; (da0 <delay_ms+0x24>)
     d80:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     d82:	4a08      	ldr	r2, [pc, #32]	; (da4 <delay_ms+0x28>)
        SysTick->VAL = 0;
     d84:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d86:	2180      	movs	r1, #128	; 0x80
     d88:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     d8a:	e006      	b.n	d9a <delay_ms+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     d8c:	2c00      	cmp	r4, #0
     d8e:	d004      	beq.n	d9a <delay_ms+0x1e>
        SysTick->LOAD = n;
     d90:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     d92:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d94:	6813      	ldr	r3, [r2, #0]
     d96:	420b      	tst	r3, r1
     d98:	d0fc      	beq.n	d94 <delay_ms+0x18>
     d9a:	3801      	subs	r0, #1
     d9c:	d2f6      	bcs.n	d8c <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     d9e:	bd30      	pop	{r4, r5, pc}
     da0:	20000004 	.word	0x20000004
     da4:	e000e010 	.word	0xe000e010

00000da8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     da8:	4a05      	ldr	r2, [pc, #20]	; (dc0 <RTC_Handler+0x18>)
     daa:	6813      	ldr	r3, [r2, #0]
     dac:	21fa      	movs	r1, #250	; 0xfa
     dae:	0089      	lsls	r1, r1, #2
     db0:	468c      	mov	ip, r1
     db2:	4463      	add	r3, ip
     db4:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     db6:	22ff      	movs	r2, #255	; 0xff
     db8:	4b02      	ldr	r3, [pc, #8]	; (dc4 <RTC_Handler+0x1c>)
     dba:	721a      	strb	r2, [r3, #8]
}
     dbc:	4770      	bx	lr
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	2000045c 	.word	0x2000045c
     dc4:	40001400 	.word	0x40001400

00000dc8 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     dc8:	f3ef 8110 	mrs	r1, PRIMASK
     dcc:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     dce:	4a0a      	ldr	r2, [pc, #40]	; (df8 <millis+0x30>)
     dd0:	8a10      	ldrh	r0, [r2, #16]
     dd2:	b280      	uxth	r0, r0
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <millis+0x34>)
     dd6:	681b      	ldr	r3, [r3, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     dd8:	7a12      	ldrb	r2, [r2, #8]
     dda:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     ddc:	18c0      	adds	r0, r0, r3
    if (RTC->MODE1.INTFLAG.bit.OVF)
     dde:	2a00      	cmp	r2, #0
     de0:	d007      	beq.n	df2 <millis+0x2a>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <millis+0x30>)
     de4:	8a1a      	ldrh	r2, [r3, #16]
     de6:	4b05      	ldr	r3, [pc, #20]	; (dfc <millis+0x34>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	20fa      	movs	r0, #250	; 0xfa
     dec:	0080      	lsls	r0, r0, #2
     dee:	1818      	adds	r0, r3, r0
     df0:	1810      	adds	r0, r2, r0
    ATOMIC_SECTION_LEAVE
     df2:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     df6:	4770      	bx	lr
     df8:	40001400 	.word	0x40001400
     dfc:	2000045c 	.word	0x2000045c

00000e00 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e00:	4a0d      	ldr	r2, [pc, #52]	; (e38 <TC4Init+0x38>)
     e02:	4b0e      	ldr	r3, [pc, #56]	; (e3c <TC4Init+0x3c>)
     e04:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e06:	4a0e      	ldr	r2, [pc, #56]	; (e40 <TC4Init+0x40>)
     e08:	6a13      	ldr	r3, [r2, #32]
     e0a:	2180      	movs	r1, #128	; 0x80
     e0c:	0149      	lsls	r1, r1, #5
     e0e:	430b      	orrs	r3, r1
     e10:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e12:	4b0c      	ldr	r3, [pc, #48]	; (e44 <TC4Init+0x44>)
     e14:	4a0c      	ldr	r2, [pc, #48]	; (e48 <TC4Init+0x48>)
     e16:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     e18:	2241      	movs	r2, #65	; 0x41
     e1a:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e1c:	3a40      	subs	r2, #64	; 0x40
     e1e:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e20:	32ff      	adds	r2, #255	; 0xff
     e22:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e24:	8819      	ldrh	r1, [r3, #0]
     e26:	3afe      	subs	r2, #254	; 0xfe
     e28:	430a      	orrs	r2, r1
     e2a:	801a      	strh	r2, [r3, #0]
     e2c:	2280      	movs	r2, #128	; 0x80
     e2e:	0312      	lsls	r2, r2, #12
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <TC4Init+0x4c>)
     e32:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     e34:	4770      	bx	lr
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	0000421c 	.word	0x0000421c
     e3c:	40000c00 	.word	0x40000c00
     e40:	40000400 	.word	0x40000400
     e44:	42003000 	.word	0x42003000
     e48:	00000904 	.word	0x00000904
     e4c:	e000e100 	.word	0xe000e100

00000e50 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     e50:	22ff      	movs	r2, #255	; 0xff
     e52:	4b03      	ldr	r3, [pc, #12]	; (e60 <TC4_Handler+0x10>)
     e54:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     e56:	3afe      	subs	r2, #254	; 0xfe
     e58:	4b02      	ldr	r3, [pc, #8]	; (e64 <TC4_Handler+0x14>)
     e5a:	701a      	strb	r2, [r3, #0]
}
     e5c:	4770      	bx	lr
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	42003000 	.word	0x42003000
     e64:	20000462 	.word	0x20000462

00000e68 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     e68:	4a0d      	ldr	r2, [pc, #52]	; (ea0 <TC5Init+0x38>)
     e6a:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <TC5Init+0x3c>)
     e6c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     e6e:	4a0e      	ldr	r2, [pc, #56]	; (ea8 <TC5Init+0x40>)
     e70:	6a13      	ldr	r3, [r2, #32]
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	0189      	lsls	r1, r1, #6
     e76:	430b      	orrs	r3, r1
     e78:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e7a:	4b0c      	ldr	r3, [pc, #48]	; (eac <TC5Init+0x44>)
     e7c:	4a0c      	ldr	r2, [pc, #48]	; (eb0 <TC5Init+0x48>)
     e7e:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
     e80:	2280      	movs	r2, #128	; 0x80
     e82:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e84:	3a7f      	subs	r2, #127	; 0x7f
     e86:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e88:	32ff      	adds	r2, #255	; 0xff
     e8a:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e8c:	8819      	ldrh	r1, [r3, #0]
     e8e:	3afe      	subs	r2, #254	; 0xfe
     e90:	430a      	orrs	r2, r1
     e92:	801a      	strh	r2, [r3, #0]
     e94:	2280      	movs	r2, #128	; 0x80
     e96:	0352      	lsls	r2, r2, #13
     e98:	4b06      	ldr	r3, [pc, #24]	; (eb4 <TC5Init+0x4c>)
     e9a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     e9c:	4770      	bx	lr
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	0000421c 	.word	0x0000421c
     ea4:	40000c00 	.word	0x40000c00
     ea8:	40000400 	.word	0x40000400
     eac:	42003400 	.word	0x42003400
     eb0:	00000e04 	.word	0x00000e04
     eb4:	e000e100 	.word	0xe000e100

00000eb8 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     eb8:	22ff      	movs	r2, #255	; 0xff
     eba:	4b03      	ldr	r3, [pc, #12]	; (ec8 <TC5_Handler+0x10>)
     ebc:	739a      	strb	r2, [r3, #14]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     ebe:	2280      	movs	r2, #128	; 0x80
     ec0:	0352      	lsls	r2, r2, #13
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <TC5_Handler+0x14>)
     ec4:	61da      	str	r2, [r3, #28]
    pinToggle(LedPin);
     ec6:	4770      	bx	lr
     ec8:	42003400 	.word	0x42003400
     ecc:	41004400 	.word	0x41004400

00000ed0 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     ed0:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     ed2:	4d11      	ldr	r5, [pc, #68]	; (f18 <dmaInit+0x48>)
     ed4:	22c0      	movs	r2, #192	; 0xc0
     ed6:	2100      	movs	r1, #0
     ed8:	0028      	movs	r0, r5
     eda:	4e10      	ldr	r6, [pc, #64]	; (f1c <dmaInit+0x4c>)
     edc:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     ede:	4c10      	ldr	r4, [pc, #64]	; (f20 <dmaInit+0x50>)
     ee0:	22c0      	movs	r2, #192	; 0xc0
     ee2:	2100      	movs	r1, #0
     ee4:	0020      	movs	r0, r4
     ee6:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     ee8:	4b0e      	ldr	r3, [pc, #56]	; (f24 <dmaInit+0x54>)
     eea:	6959      	ldr	r1, [r3, #20]
     eec:	2220      	movs	r2, #32
     eee:	430a      	orrs	r2, r1
     ef0:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     ef2:	69d9      	ldr	r1, [r3, #28]
     ef4:	2210      	movs	r2, #16
     ef6:	430a      	orrs	r2, r1
     ef8:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     efa:	4b0b      	ldr	r3, [pc, #44]	; (f28 <dmaInit+0x58>)
     efc:	881a      	ldrh	r2, [r3, #0]
     efe:	2102      	movs	r1, #2
     f00:	438a      	bics	r2, r1
     f02:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     f04:	8819      	ldrh	r1, [r3, #0]
     f06:	2201      	movs	r2, #1
     f08:	430a      	orrs	r2, r1
     f0a:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     f0c:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     f0e:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f10:	4a06      	ldr	r2, [pc, #24]	; (f2c <dmaInit+0x5c>)
     f12:	801a      	strh	r2, [r3, #0]
}
     f14:	bd70      	pop	{r4, r5, r6, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	20000530 	.word	0x20000530
     f1c:	00002fe9 	.word	0x00002fe9
     f20:	20000470 	.word	0x20000470
     f24:	40000400 	.word	0x40000400
     f28:	41004800 	.word	0x41004800
     f2c:	00000f02 	.word	0x00000f02

00000f30 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     f30:	b570      	push	{r4, r5, r6, lr}
     f32:	b082      	sub	sp, #8
     f34:	0004      	movs	r4, r0
	


    switch(my_altimeter->myFlightState) {
     f36:	7803      	ldrb	r3, [r0, #0]
     f38:	2b00      	cmp	r3, #0
     f3a:	d123      	bne.n	f84 <flight+0x54>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     f3c:	4e12      	ldr	r6, [pc, #72]	; (f88 <flight+0x58>)
     f3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
     f40:	47b0      	blx	r6
     f42:	4d12      	ldr	r5, [pc, #72]	; (f8c <flight+0x5c>)
     f44:	2200      	movs	r2, #0
     f46:	4b12      	ldr	r3, [pc, #72]	; (f90 <flight+0x60>)
     f48:	47a8      	blx	r5
     f4a:	9000      	str	r0, [sp, #0]
     f4c:	9101      	str	r1, [sp, #4]
     f4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     f50:	47b0      	blx	r6
     f52:	2200      	movs	r2, #0
     f54:	4b0e      	ldr	r3, [pc, #56]	; (f90 <flight+0x60>)
     f56:	47a8      	blx	r5
     f58:	0002      	movs	r2, r0
     f5a:	000b      	movs	r3, r1
     f5c:	9800      	ldr	r0, [sp, #0]
     f5e:	9901      	ldr	r1, [sp, #4]
     f60:	4d0c      	ldr	r5, [pc, #48]	; (f94 <flight+0x64>)
     f62:	47a8      	blx	r5
     f64:	4b0c      	ldr	r3, [pc, #48]	; (f98 <flight+0x68>)
     f66:	4798      	blx	r3
     f68:	63a0      	str	r0, [r4, #56]	; 0x38

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     f6a:	4b0c      	ldr	r3, [pc, #48]	; (f9c <flight+0x6c>)
     f6c:	4798      	blx	r3
     f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f70:	1ac0      	subs	r0, r0, r3
     f72:	23fa      	movs	r3, #250	; 0xfa
     f74:	00db      	lsls	r3, r3, #3
     f76:	4298      	cmp	r0, r3
     f78:	d904      	bls.n	f84 <flight+0x54>
            //recursive filter
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer; 
     f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     f7c:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.offsetBufferTime = millis();
     f7e:	4b07      	ldr	r3, [pc, #28]	; (f9c <flight+0x6c>)
     f80:	4798      	blx	r3
     f82:	6320      	str	r0, [r4, #48]	; 0x30

        break;
    }


     f84:	b002      	add	sp, #8
     f86:	bd70      	pop	{r4, r5, r6, pc}
     f88:	00002da5 	.word	0x00002da5
     f8c:	0000282d 	.word	0x0000282d
     f90:	3fe00000 	.word	0x3fe00000
     f94:	00001fb9 	.word	0x00001fb9
     f98:	00002e4d 	.word	0x00002e4d
     f9c:	00000dc9 	.word	0x00000dc9

00000fa0 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fa2:	465f      	mov	r7, fp
     fa4:	4656      	mov	r6, sl
     fa6:	464d      	mov	r5, r9
     fa8:	4644      	mov	r4, r8
     faa:	b4f0      	push	{r4, r5, r6, r7}
     fac:	b083      	sub	sp, #12
     fae:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
     fb0:	4bc2      	ldr	r3, [pc, #776]	; (12bc <sampleTick+0x31c>)
     fb2:	4798      	blx	r3
     fb4:	2384      	movs	r3, #132	; 0x84
     fb6:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     fb8:	4dc1      	ldr	r5, [pc, #772]	; (12c0 <sampleTick+0x320>)
     fba:	6828      	ldr	r0, [r5, #0]
     fbc:	6869      	ldr	r1, [r5, #4]
     fbe:	4ec1      	ldr	r6, [pc, #772]	; (12c4 <sampleTick+0x324>)
     fc0:	47b0      	blx	r6
     fc2:	4bc1      	ldr	r3, [pc, #772]	; (12c8 <sampleTick+0x328>)
     fc4:	4699      	mov	r9, r3
     fc6:	4798      	blx	r3
     fc8:	4bc0      	ldr	r3, [pc, #768]	; (12cc <sampleTick+0x32c>)
     fca:	4698      	mov	r8, r3
     fcc:	4ac0      	ldr	r2, [pc, #768]	; (12d0 <sampleTick+0x330>)
     fce:	4bc1      	ldr	r3, [pc, #772]	; (12d4 <sampleTick+0x334>)
     fd0:	47c0      	blx	r8
     fd2:	4fc1      	ldr	r7, [pc, #772]	; (12d8 <sampleTick+0x338>)
     fd4:	47b8      	blx	r7
     fd6:	67a0      	str	r0, [r4, #120]	; 0x78
    my_altimeter->senseA = adc_read(senseAPin);
     fd8:	68a8      	ldr	r0, [r5, #8]
     fda:	68e9      	ldr	r1, [r5, #12]
     fdc:	47b0      	blx	r6
     fde:	237c      	movs	r3, #124	; 0x7c
     fe0:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
     fe2:	6928      	ldr	r0, [r5, #16]
     fe4:	6969      	ldr	r1, [r5, #20]
     fe6:	47b0      	blx	r6
     fe8:	237e      	movs	r3, #126	; 0x7e
     fea:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
     fec:	69a8      	ldr	r0, [r5, #24]
     fee:	69e9      	ldr	r1, [r5, #28]
     ff0:	47b0      	blx	r6
     ff2:	2380      	movs	r3, #128	; 0x80
     ff4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
     ff6:	6a28      	ldr	r0, [r5, #32]
     ff8:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ffa:	47b0      	blx	r6
     ffc:	2382      	movs	r3, #130	; 0x82
     ffe:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    1000:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1002:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    1004:	47b0      	blx	r6
    1006:	2370      	movs	r3, #112	; 0x70
    1008:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
    100a:	4bb4      	ldr	r3, [pc, #720]	; (12dc <sampleTick+0x33c>)
    100c:	469c      	mov	ip, r3
    100e:	4460      	add	r0, ip
    1010:	47c8      	blx	r9
    1012:	4ab3      	ldr	r2, [pc, #716]	; (12e0 <sampleTick+0x340>)
    1014:	4bb3      	ldr	r3, [pc, #716]	; (12e4 <sampleTick+0x344>)
    1016:	47c0      	blx	r8
    1018:	47b8      	blx	r7
    101a:	6760      	str	r0, [r4, #116]	; 0x74

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    101c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    101e:	6423      	str	r3, [r4, #64]	; 0x40
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1020:	4eb1      	ldr	r6, [pc, #708]	; (12e8 <sampleTick+0x348>)
    1022:	2380      	movs	r3, #128	; 0x80
    1024:	021b      	lsls	r3, r3, #8
    1026:	4699      	mov	r9, r3
    1028:	6173      	str	r3, [r6, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    102a:	2350      	movs	r3, #80	; 0x50
    102c:	9300      	str	r3, [sp, #0]
    102e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    1030:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1032:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    1034:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    1036:	4fad      	ldr	r7, [pc, #692]	; (12ec <sampleTick+0x34c>)
    1038:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    103a:	464b      	mov	r3, r9
    103c:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_us(500);
    103e:	20fa      	movs	r0, #250	; 0xfa
    1040:	0040      	lsls	r0, r0, #1
    1042:	4bab      	ldr	r3, [pc, #684]	; (12f0 <sampleTick+0x350>)
    1044:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1046:	4bab      	ldr	r3, [pc, #684]	; (12f4 <sampleTick+0x354>)
    1048:	4798      	blx	r3
    104a:	61a0      	str	r0, [r4, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    104c:	464b      	mov	r3, r9
    104e:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1050:	2342      	movs	r3, #66	; 0x42
    1052:	9300      	str	r3, [sp, #0]
    1054:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    1056:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1058:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    105a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    105c:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    105e:	464b      	mov	r3, r9
    1060:	61b3      	str	r3, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1062:	2380      	movs	r3, #128	; 0x80
    1064:	00db      	lsls	r3, r3, #3
    1066:	469b      	mov	fp, r3
    1068:	2394      	movs	r3, #148	; 0x94
    106a:	465a      	mov	r2, fp
    106c:	50f2      	str	r2, [r6, r3]
    pinHigh(cs_baro);

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    106e:	2182      	movs	r1, #130	; 0x82
    1070:	2000      	movs	r0, #0
    1072:	4da1      	ldr	r5, [pc, #644]	; (12f8 <sampleTick+0x358>)
    1074:	47a8      	blx	r5
    //spiDataOut(SPI0, 0x80 | 0x02);

    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
    1076:	21ff      	movs	r1, #255	; 0xff
    1078:	2000      	movs	r0, #0
    107a:	47a8      	blx	r5
    107c:	2359      	movs	r3, #89	; 0x59
    107e:	4698      	mov	r8, r3
    1080:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1082:	21ff      	movs	r1, #255	; 0xff
    1084:	2000      	movs	r0, #0
    1086:	47a8      	blx	r5
    1088:	2358      	movs	r3, #88	; 0x58
    108a:	469a      	mov	sl, r3
    108c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
    108e:	21ff      	movs	r1, #255	; 0xff
    1090:	2000      	movs	r0, #0
    1092:	47a8      	blx	r5
    1094:	275d      	movs	r7, #93	; 0x5d
    1096:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
    1098:	21ff      	movs	r1, #255	; 0xff
    109a:	2000      	movs	r0, #0
    109c:	47a8      	blx	r5
    109e:	235c      	movs	r3, #92	; 0x5c
    10a0:	4699      	mov	r9, r3
    10a2:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
    10a4:	21ff      	movs	r1, #255	; 0xff
    10a6:	2000      	movs	r0, #0
    10a8:	47a8      	blx	r5
    10aa:	2361      	movs	r3, #97	; 0x61
    10ac:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
    10ae:	21ff      	movs	r1, #255	; 0xff
    10b0:	2000      	movs	r0, #0
    10b2:	47a8      	blx	r5
    10b4:	2360      	movs	r3, #96	; 0x60
    10b6:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    10b8:	2298      	movs	r2, #152	; 0x98
    10ba:	4659      	mov	r1, fp
    10bc:	50b1      	str	r1, [r6, r2]
    //my_altimeter->myIMU.accelYHigh = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZLow = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZHigh = spiDataIn(SPI0);
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
    10be:	4652      	mov	r2, sl
    10c0:	5ca0      	ldrb	r0, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
    10c2:	464a      	mov	r2, r9
    10c4:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
    10c6:	5ce2      	ldrb	r2, [r4, r3]

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    10c8:	0203      	lsls	r3, r0, #8
    10ca:	4645      	mov	r5, r8
    10cc:	5d65      	ldrb	r5, [r4, r5]
    10ce:	432b      	orrs	r3, r5
    10d0:	b21d      	sxth	r5, r3
    10d2:	235a      	movs	r3, #90	; 0x5a
    10d4:	52e5      	strh	r5, [r4, r3]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
    10d6:	020b      	lsls	r3, r1, #8
    10d8:	5de6      	ldrb	r6, [r4, r7]
    10da:	4333      	orrs	r3, r6
    10dc:	b21e      	sxth	r6, r3
    10de:	235e      	movs	r3, #94	; 0x5e
    10e0:	52e6      	strh	r6, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
    10e2:	0213      	lsls	r3, r2, #8
    10e4:	3704      	adds	r7, #4
    10e6:	5de7      	ldrb	r7, [r4, r7]
    10e8:	433b      	orrs	r3, r7
    10ea:	b21b      	sxth	r3, r3
    10ec:	2762      	movs	r7, #98	; 0x62
    10ee:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
    10f0:	2801      	cmp	r0, #1
    10f2:	d009      	beq.n	1108 <sampleTick+0x168>
        if (negativeX) {
    10f4:	b240      	sxtb	r0, r0
    10f6:	2800      	cmp	r0, #0
    10f8:	da03      	bge.n	1102 <sampleTick+0x162>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    10fa:	112d      	asrs	r5, r5, #4
    10fc:	205a      	movs	r0, #90	; 0x5a
    10fe:	5225      	strh	r5, [r4, r0]
    1100:	e002      	b.n	1108 <sampleTick+0x168>
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1102:	112d      	asrs	r5, r5, #4
    1104:	205a      	movs	r0, #90	; 0x5a
    1106:	5225      	strh	r5, [r4, r0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
    1108:	2901      	cmp	r1, #1
    110a:	d009      	beq.n	1120 <sampleTick+0x180>
        if (negativeY) {
    110c:	b249      	sxtb	r1, r1
    110e:	2900      	cmp	r1, #0
    1110:	da03      	bge.n	111a <sampleTick+0x17a>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1112:	1136      	asrs	r6, r6, #4
    1114:	215e      	movs	r1, #94	; 0x5e
    1116:	5266      	strh	r6, [r4, r1]
    1118:	e002      	b.n	1120 <sampleTick+0x180>
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    111a:	1136      	asrs	r6, r6, #4
    111c:	215e      	movs	r1, #94	; 0x5e
    111e:	5266      	strh	r6, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
    1120:	2a01      	cmp	r2, #1
    1122:	d009      	beq.n	1138 <sampleTick+0x198>
        if (negativeZ) {
    1124:	b252      	sxtb	r2, r2
    1126:	2a00      	cmp	r2, #0
    1128:	da03      	bge.n	1132 <sampleTick+0x192>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    112a:	111b      	asrs	r3, r3, #4
    112c:	2262      	movs	r2, #98	; 0x62
    112e:	52a3      	strh	r3, [r4, r2]
    1130:	e002      	b.n	1138 <sampleTick+0x198>
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1132:	111b      	asrs	r3, r3, #4
    1134:	2262      	movs	r2, #98	; 0x62
    1136:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
    1138:	235a      	movs	r3, #90	; 0x5a
    113a:	5ee0      	ldrsh	r0, [r4, r3]
    113c:	4f62      	ldr	r7, [pc, #392]	; (12c8 <sampleTick+0x328>)
    113e:	47b8      	blx	r7
    1140:	4e62      	ldr	r6, [pc, #392]	; (12cc <sampleTick+0x32c>)
    1142:	4a6e      	ldr	r2, [pc, #440]	; (12fc <sampleTick+0x35c>)
    1144:	4b6e      	ldr	r3, [pc, #440]	; (1300 <sampleTick+0x360>)
    1146:	47b0      	blx	r6
    1148:	4d63      	ldr	r5, [pc, #396]	; (12d8 <sampleTick+0x338>)
    114a:	47a8      	blx	r5
    114c:	63e0      	str	r0, [r4, #60]	; 0x3c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    114e:	235e      	movs	r3, #94	; 0x5e
    1150:	5ee0      	ldrsh	r0, [r4, r3]
    1152:	47b8      	blx	r7
    1154:	4a69      	ldr	r2, [pc, #420]	; (12fc <sampleTick+0x35c>)
    1156:	4b6a      	ldr	r3, [pc, #424]	; (1300 <sampleTick+0x360>)
    1158:	47b0      	blx	r6
    115a:	47a8      	blx	r5
    115c:	6460      	str	r0, [r4, #68]	; 0x44
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    115e:	2362      	movs	r3, #98	; 0x62
    1160:	5ee0      	ldrsh	r0, [r4, r3]
    1162:	47b8      	blx	r7
    1164:	4a65      	ldr	r2, [pc, #404]	; (12fc <sampleTick+0x35c>)
    1166:	4b66      	ldr	r3, [pc, #408]	; (1300 <sampleTick+0x360>)
    1168:	47b0      	blx	r6
    116a:	47a8      	blx	r5
    116c:	64a0      	str	r0, [r4, #72]	; 0x48
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    116e:	4b5e      	ldr	r3, [pc, #376]	; (12e8 <sampleTick+0x348>)
    1170:	469a      	mov	sl, r3
    1172:	2380      	movs	r3, #128	; 0x80
    1174:	00db      	lsls	r3, r3, #3
    1176:	469b      	mov	fp, r3
    1178:	4653      	mov	r3, sl
    117a:	465a      	mov	r2, fp
    117c:	615a      	str	r2, [r3, #20]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    117e:	2182      	movs	r1, #130	; 0x82
    1180:	2000      	movs	r0, #0
    1182:	4d5d      	ldr	r5, [pc, #372]	; (12f8 <sampleTick+0x358>)
    1184:	47a8      	blx	r5
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
    1186:	21ff      	movs	r1, #255	; 0xff
    1188:	2000      	movs	r0, #0
    118a:	47a8      	blx	r5
    118c:	2765      	movs	r7, #101	; 0x65
    118e:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1190:	21ff      	movs	r1, #255	; 0xff
    1192:	2000      	movs	r0, #0
    1194:	47a8      	blx	r5
    1196:	2364      	movs	r3, #100	; 0x64
    1198:	4699      	mov	r9, r3
    119a:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    119c:	21ff      	movs	r1, #255	; 0xff
    119e:	2000      	movs	r0, #0
    11a0:	47a8      	blx	r5
    11a2:	2669      	movs	r6, #105	; 0x69
    11a4:	55a0      	strb	r0, [r4, r6]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    11a6:	21ff      	movs	r1, #255	; 0xff
    11a8:	2000      	movs	r0, #0
    11aa:	47a8      	blx	r5
    11ac:	2368      	movs	r3, #104	; 0x68
    11ae:	4698      	mov	r8, r3
    11b0:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    11b2:	21ff      	movs	r1, #255	; 0xff
    11b4:	2000      	movs	r0, #0
    11b6:	47a8      	blx	r5
    11b8:	236d      	movs	r3, #109	; 0x6d
    11ba:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
    11bc:	21ff      	movs	r1, #255	; 0xff
    11be:	2000      	movs	r0, #0
    11c0:	47a8      	blx	r5
    11c2:	236c      	movs	r3, #108	; 0x6c
    11c4:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    11c6:	4652      	mov	r2, sl
    11c8:	4659      	mov	r1, fp
    11ca:	6191      	str	r1, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
    11cc:	464a      	mov	r2, r9
    11ce:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
    11d0:	4642      	mov	r2, r8
    11d2:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;
    11d4:	5ce5      	ldrb	r5, [r4, r3]
    11d6:	b26b      	sxtb	r3, r5
    11d8:	469c      	mov	ip, r3

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
    11da:	020b      	lsls	r3, r1, #8
    11dc:	5de7      	ldrb	r7, [r4, r7]
    11de:	431f      	orrs	r7, r3
    11e0:	b23f      	sxth	r7, r7
    11e2:	2366      	movs	r3, #102	; 0x66
    11e4:	52e7      	strh	r7, [r4, r3]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
    11e6:	0213      	lsls	r3, r2, #8
    11e8:	5da0      	ldrb	r0, [r4, r6]
    11ea:	4318      	orrs	r0, r3
    11ec:	b200      	sxth	r0, r0
    11ee:	236a      	movs	r3, #106	; 0x6a
    11f0:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
    11f2:	022b      	lsls	r3, r5, #8
    11f4:	3604      	adds	r6, #4
    11f6:	5da6      	ldrb	r6, [r4, r6]
    11f8:	4333      	orrs	r3, r6
    11fa:	b21b      	sxth	r3, r3
    11fc:	266e      	movs	r6, #110	; 0x6e
    11fe:	53a3      	strh	r3, [r4, r6]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
    1200:	2901      	cmp	r1, #1
    1202:	d009      	beq.n	1218 <sampleTick+0x278>
        if (negativeXgyro) {
    1204:	b249      	sxtb	r1, r1
    1206:	2900      	cmp	r1, #0
    1208:	da03      	bge.n	1212 <sampleTick+0x272>
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    120a:	113f      	asrs	r7, r7, #4
    120c:	2166      	movs	r1, #102	; 0x66
    120e:	5267      	strh	r7, [r4, r1]
    1210:	e002      	b.n	1218 <sampleTick+0x278>
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1212:	113f      	asrs	r7, r7, #4
    1214:	2166      	movs	r1, #102	; 0x66
    1216:	5267      	strh	r7, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
    1218:	2a01      	cmp	r2, #1
    121a:	d009      	beq.n	1230 <sampleTick+0x290>
        if (negativeYgyro) {
    121c:	b252      	sxtb	r2, r2
    121e:	2a00      	cmp	r2, #0
    1220:	da03      	bge.n	122a <sampleTick+0x28a>
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1222:	1100      	asrs	r0, r0, #4
    1224:	226a      	movs	r2, #106	; 0x6a
    1226:	52a0      	strh	r0, [r4, r2]
    1228:	e002      	b.n	1230 <sampleTick+0x290>
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    122a:	1100      	asrs	r0, r0, #4
    122c:	226a      	movs	r2, #106	; 0x6a
    122e:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
    1230:	2d01      	cmp	r5, #1
    1232:	d009      	beq.n	1248 <sampleTick+0x2a8>
        if (negativeZgyro) {
    1234:	4662      	mov	r2, ip
    1236:	2a00      	cmp	r2, #0
    1238:	da03      	bge.n	1242 <sampleTick+0x2a2>
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    123a:	111b      	asrs	r3, r3, #4
    123c:	226e      	movs	r2, #110	; 0x6e
    123e:	52a3      	strh	r3, [r4, r2]
    1240:	e002      	b.n	1248 <sampleTick+0x2a8>
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1242:	111b      	asrs	r3, r3, #4
    1244:	226e      	movs	r2, #110	; 0x6e
    1246:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
    1248:	2366      	movs	r3, #102	; 0x66
    124a:	5ee0      	ldrsh	r0, [r4, r3]
    124c:	4f1e      	ldr	r7, [pc, #120]	; (12c8 <sampleTick+0x328>)
    124e:	47b8      	blx	r7
    1250:	4e1e      	ldr	r6, [pc, #120]	; (12cc <sampleTick+0x32c>)
    1252:	4a2a      	ldr	r2, [pc, #168]	; (12fc <sampleTick+0x35c>)
    1254:	4b2a      	ldr	r3, [pc, #168]	; (1300 <sampleTick+0x360>)
    1256:	47b0      	blx	r6
    1258:	4d1f      	ldr	r5, [pc, #124]	; (12d8 <sampleTick+0x338>)
    125a:	47a8      	blx	r5
    125c:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    125e:	236a      	movs	r3, #106	; 0x6a
    1260:	5ee0      	ldrsh	r0, [r4, r3]
    1262:	47b8      	blx	r7
    1264:	4a25      	ldr	r2, [pc, #148]	; (12fc <sampleTick+0x35c>)
    1266:	4b26      	ldr	r3, [pc, #152]	; (1300 <sampleTick+0x360>)
    1268:	47b0      	blx	r6
    126a:	47a8      	blx	r5
    126c:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
    126e:	236e      	movs	r3, #110	; 0x6e
    1270:	5ee0      	ldrsh	r0, [r4, r3]
    1272:	47b8      	blx	r7
    1274:	4a21      	ldr	r2, [pc, #132]	; (12fc <sampleTick+0x35c>)
    1276:	4b22      	ldr	r3, [pc, #136]	; (1300 <sampleTick+0x360>)
    1278:	47b0      	blx	r6
    127a:	47a8      	blx	r5
    127c:	6560      	str	r0, [r4, #84]	; 0x54

    delay_us(800);
    127e:	20c8      	movs	r0, #200	; 0xc8
    1280:	0080      	lsls	r0, r0, #2
    1282:	4b1b      	ldr	r3, [pc, #108]	; (12f0 <sampleTick+0x350>)
    1284:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1286:	4b1b      	ldr	r3, [pc, #108]	; (12f4 <sampleTick+0x354>)
    1288:	4798      	blx	r3
    128a:	6160      	str	r0, [r4, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    128c:	0027      	movs	r7, r4
    128e:	3708      	adds	r7, #8
    1290:	0038      	movs	r0, r7
    1292:	4b1c      	ldr	r3, [pc, #112]	; (1304 <sampleTick+0x364>)
    1294:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1296:	0038      	movs	r0, r7
    1298:	4b1b      	ldr	r3, [pc, #108]	; (1308 <sampleTick+0x368>)
    129a:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    129c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    129e:	4b1b      	ldr	r3, [pc, #108]	; (130c <sampleTick+0x36c>)
    12a0:	4798      	blx	r3
    12a2:	4a1b      	ldr	r2, [pc, #108]	; (1310 <sampleTick+0x370>)
    12a4:	4b1b      	ldr	r3, [pc, #108]	; (1314 <sampleTick+0x374>)
    12a6:	47b0      	blx	r6
    12a8:	47a8      	blx	r5
    12aa:	62e0      	str	r0, [r4, #44]	; 0x2c


}
    12ac:	b003      	add	sp, #12
    12ae:	bc3c      	pop	{r2, r3, r4, r5}
    12b0:	4690      	mov	r8, r2
    12b2:	4699      	mov	r9, r3
    12b4:	46a2      	mov	sl, r4
    12b6:	46ab      	mov	fp, r5
    12b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	00000dc9 	.word	0x00000dc9
    12c0:	000032f0 	.word	0x000032f0
    12c4:	00000abd 	.word	0x00000abd
    12c8:	00002d21 	.word	0x00002d21
    12cc:	0000282d 	.word	0x0000282d
    12d0:	eaa2a0a9 	.word	0xeaa2a0a9
    12d4:	3f5f3a57 	.word	0x3f5f3a57
    12d8:	00002e4d 	.word	0x00002e4d
    12dc:	fffff0da 	.word	0xfffff0da
    12e0:	367a0f91 	.word	0x367a0f91
    12e4:	bf973eab 	.word	0xbf973eab
    12e8:	41004400 	.word	0x41004400
    12ec:	00000b3d 	.word	0x00000b3d
    12f0:	00000d51 	.word	0x00000d51
    12f4:	00000221 	.word	0x00000221
    12f8:	000013f9 	.word	0x000013f9
    12fc:	e94ee393 	.word	0xe94ee393
    1300:	3f7ffd60 	.word	0x3f7ffd60
    1304:	00000295 	.word	0x00000295
    1308:	0000038d 	.word	0x0000038d
    130c:	00002da5 	.word	0x00002da5
    1310:	e9f6a93f 	.word	0xe9f6a93f
    1314:	3fa0cc78 	.word	0x3fa0cc78

00001318 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1318:	b570      	push	{r4, r5, r6, lr}
    131a:	0004      	movs	r4, r0
    131c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    131e:	480e      	ldr	r0, [pc, #56]	; (1358 <sercomClockEnable+0x40>)
    1320:	6a01      	ldr	r1, [r0, #32]
    1322:	1ca6      	adds	r6, r4, #2
    1324:	2301      	movs	r3, #1
    1326:	40b3      	lsls	r3, r6
    1328:	430b      	orrs	r3, r1
    132a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    132c:	2d00      	cmp	r5, #0
    132e:	d003      	beq.n	1338 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1330:	2107      	movs	r1, #7
    1332:	0028      	movs	r0, r5
    1334:	4b09      	ldr	r3, [pc, #36]	; (135c <sercomClockEnable+0x44>)
    1336:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1338:	0229      	lsls	r1, r5, #8
    133a:	23f0      	movs	r3, #240	; 0xf0
    133c:	011b      	lsls	r3, r3, #4
    133e:	4019      	ands	r1, r3
    1340:	2380      	movs	r3, #128	; 0x80
    1342:	01db      	lsls	r3, r3, #7
    1344:	4319      	orrs	r1, r3
    1346:	0023      	movs	r3, r4
    1348:	3314      	adds	r3, #20
    134a:	243f      	movs	r4, #63	; 0x3f
    134c:	401c      	ands	r4, r3
    134e:	430c      	orrs	r4, r1
    1350:	4b03      	ldr	r3, [pc, #12]	; (1360 <sercomClockEnable+0x48>)
    1352:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    1354:	bd70      	pop	{r4, r5, r6, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	40000400 	.word	0x40000400
    135c:	00000d01 	.word	0x00000d01
    1360:	40000c00 	.word	0x40000c00

00001364 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1364:	0280      	lsls	r0, r0, #10
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <sercomReset+0x18>)
    1368:	469c      	mov	ip, r3
    136a:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    136c:	2301      	movs	r3, #1
    136e:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1370:	2201      	movs	r2, #1
    1372:	6803      	ldr	r3, [r0, #0]
    1374:	421a      	tst	r2, r3
    1376:	d1fc      	bne.n	1372 <sercomReset+0xe>
}
    1378:	4770      	bx	lr
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	42000800 	.word	0x42000800

00001380 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1382:	464f      	mov	r7, r9
    1384:	4646      	mov	r6, r8
    1386:	b4c0      	push	{r6, r7}
    1388:	0006      	movs	r6, r0
    138a:	4688      	mov	r8, r1
    138c:	0017      	movs	r7, r2
    138e:	001d      	movs	r5, r3
    1390:	ab08      	add	r3, sp, #32
    1392:	781c      	ldrb	r4, [r3, #0]
    1394:	ab09      	add	r3, sp, #36	; 0x24
    1396:	781b      	ldrb	r3, [r3, #0]
    1398:	4699      	mov	r9, r3

    sercomReset(id);
    139a:	4b15      	ldr	r3, [pc, #84]	; (13f0 <sercomSpiMasterInit+0x70>)
    139c:	4798      	blx	r3
    139e:	02b0      	lsls	r0, r6, #10
    13a0:	4b14      	ldr	r3, [pc, #80]	; (13f4 <sercomSpiMasterInit+0x74>)
    13a2:	469c      	mov	ip, r3
    13a4:	4460      	add	r0, ip

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    13a6:	2380      	movs	r3, #128	; 0x80
    13a8:	029b      	lsls	r3, r3, #10
    13aa:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
    13ac:	464b      	mov	r3, r9
    13ae:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    13b0:	4643      	mov	r3, r8
    13b2:	0519      	lsls	r1, r3, #20
    13b4:	23c0      	movs	r3, #192	; 0xc0
    13b6:	039b      	lsls	r3, r3, #14
    13b8:	4019      	ands	r1, r3
    13ba:	000e      	movs	r6, r1
    13bc:	0439      	lsls	r1, r7, #16
    13be:	23c0      	movs	r3, #192	; 0xc0
    13c0:	029b      	lsls	r3, r3, #10
    13c2:	4019      	ands	r1, r3
    13c4:	230e      	movs	r3, #14
    13c6:	000a      	movs	r2, r1
    13c8:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    13ca:	1e6b      	subs	r3, r5, #1
    13cc:	419d      	sbcs	r5, r3
    13ce:	076d      	lsls	r5, r5, #29
    13d0:	0031      	movs	r1, r6
    13d2:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    13d4:	1e63      	subs	r3, r4, #1
    13d6:	419c      	sbcs	r4, r3
    13d8:	0722      	lsls	r2, r4, #28
    13da:	002c      	movs	r4, r5
    13dc:	430c      	orrs	r4, r1
    13de:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    13e0:	6004      	str	r4, [r0, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    13e2:	69c3      	ldr	r3, [r0, #28]
    13e4:	075b      	lsls	r3, r3, #29
    13e6:	d4fc      	bmi.n	13e2 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    13e8:	bc0c      	pop	{r2, r3}
    13ea:	4690      	mov	r8, r2
    13ec:	4699      	mov	r9, r3
    13ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f0:	00001365 	.word	0x00001365
    13f4:	42000800 	.word	0x42000800

000013f8 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    13f8:	0280      	lsls	r0, r0, #10
    13fa:	4b05      	ldr	r3, [pc, #20]	; (1410 <spiDataTransfer+0x18>)
    13fc:	469c      	mov	ip, r3
    13fe:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1400:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1402:	7e03      	ldrb	r3, [r0, #24]
    1404:	075b      	lsls	r3, r3, #29
    1406:	d5fc      	bpl.n	1402 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
    1408:	6a80      	ldr	r0, [r0, #40]	; 0x28
    140a:	b2c0      	uxtb	r0, r0
}
    140c:	4770      	bx	lr
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	42000800 	.word	0x42000800

00001414 <__aeabi_cdrcmple>:
    1414:	4684      	mov	ip, r0
    1416:	1c10      	adds	r0, r2, #0
    1418:	4662      	mov	r2, ip
    141a:	468c      	mov	ip, r1
    141c:	1c19      	adds	r1, r3, #0
    141e:	4663      	mov	r3, ip
    1420:	e000      	b.n	1424 <__aeabi_cdcmpeq>
    1422:	46c0      	nop			; (mov r8, r8)

00001424 <__aeabi_cdcmpeq>:
    1424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1426:	f001 f997 	bl	2758 <__ledf2>
    142a:	2800      	cmp	r0, #0
    142c:	d401      	bmi.n	1432 <__aeabi_cdcmpeq+0xe>
    142e:	2100      	movs	r1, #0
    1430:	42c8      	cmn	r0, r1
    1432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001434 <__aeabi_dcmpeq>:
    1434:	b510      	push	{r4, lr}
    1436:	f001 f8eb 	bl	2610 <__eqdf2>
    143a:	4240      	negs	r0, r0
    143c:	3001      	adds	r0, #1
    143e:	bd10      	pop	{r4, pc}

00001440 <__aeabi_dcmplt>:
    1440:	b510      	push	{r4, lr}
    1442:	f001 f989 	bl	2758 <__ledf2>
    1446:	2800      	cmp	r0, #0
    1448:	db01      	blt.n	144e <__aeabi_dcmplt+0xe>
    144a:	2000      	movs	r0, #0
    144c:	bd10      	pop	{r4, pc}
    144e:	2001      	movs	r0, #1
    1450:	bd10      	pop	{r4, pc}
    1452:	46c0      	nop			; (mov r8, r8)

00001454 <__aeabi_dcmple>:
    1454:	b510      	push	{r4, lr}
    1456:	f001 f97f 	bl	2758 <__ledf2>
    145a:	2800      	cmp	r0, #0
    145c:	dd01      	ble.n	1462 <__aeabi_dcmple+0xe>
    145e:	2000      	movs	r0, #0
    1460:	bd10      	pop	{r4, pc}
    1462:	2001      	movs	r0, #1
    1464:	bd10      	pop	{r4, pc}
    1466:	46c0      	nop			; (mov r8, r8)

00001468 <__aeabi_dcmpgt>:
    1468:	b510      	push	{r4, lr}
    146a:	f001 f911 	bl	2690 <__gedf2>
    146e:	2800      	cmp	r0, #0
    1470:	dc01      	bgt.n	1476 <__aeabi_dcmpgt+0xe>
    1472:	2000      	movs	r0, #0
    1474:	bd10      	pop	{r4, pc}
    1476:	2001      	movs	r0, #1
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)

0000147c <__aeabi_dcmpge>:
    147c:	b510      	push	{r4, lr}
    147e:	f001 f907 	bl	2690 <__gedf2>
    1482:	2800      	cmp	r0, #0
    1484:	da01      	bge.n	148a <__aeabi_dcmpge+0xe>
    1486:	2000      	movs	r0, #0
    1488:	bd10      	pop	{r4, pc}
    148a:	2001      	movs	r0, #1
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)

00001490 <__aeabi_lmul>:
    1490:	b5f0      	push	{r4, r5, r6, r7, lr}
    1492:	464f      	mov	r7, r9
    1494:	4646      	mov	r6, r8
    1496:	b4c0      	push	{r6, r7}
    1498:	0416      	lsls	r6, r2, #16
    149a:	0c36      	lsrs	r6, r6, #16
    149c:	4699      	mov	r9, r3
    149e:	0033      	movs	r3, r6
    14a0:	0405      	lsls	r5, r0, #16
    14a2:	0c2c      	lsrs	r4, r5, #16
    14a4:	0c07      	lsrs	r7, r0, #16
    14a6:	0c15      	lsrs	r5, r2, #16
    14a8:	4363      	muls	r3, r4
    14aa:	437e      	muls	r6, r7
    14ac:	436f      	muls	r7, r5
    14ae:	4365      	muls	r5, r4
    14b0:	0c1c      	lsrs	r4, r3, #16
    14b2:	19ad      	adds	r5, r5, r6
    14b4:	1964      	adds	r4, r4, r5
    14b6:	469c      	mov	ip, r3
    14b8:	42a6      	cmp	r6, r4
    14ba:	d903      	bls.n	14c4 <__aeabi_lmul+0x34>
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	025b      	lsls	r3, r3, #9
    14c0:	4698      	mov	r8, r3
    14c2:	4447      	add	r7, r8
    14c4:	4663      	mov	r3, ip
    14c6:	0c25      	lsrs	r5, r4, #16
    14c8:	19ef      	adds	r7, r5, r7
    14ca:	041d      	lsls	r5, r3, #16
    14cc:	464b      	mov	r3, r9
    14ce:	434a      	muls	r2, r1
    14d0:	4343      	muls	r3, r0
    14d2:	0c2d      	lsrs	r5, r5, #16
    14d4:	0424      	lsls	r4, r4, #16
    14d6:	1964      	adds	r4, r4, r5
    14d8:	1899      	adds	r1, r3, r2
    14da:	19c9      	adds	r1, r1, r7
    14dc:	0020      	movs	r0, r4
    14de:	bc0c      	pop	{r2, r3}
    14e0:	4690      	mov	r8, r2
    14e2:	4699      	mov	r9, r3
    14e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e6:	46c0      	nop			; (mov r8, r8)

000014e8 <__aeabi_fadd>:
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ea:	024a      	lsls	r2, r1, #9
    14ec:	0243      	lsls	r3, r0, #9
    14ee:	0044      	lsls	r4, r0, #1
    14f0:	004e      	lsls	r6, r1, #1
    14f2:	0fc5      	lsrs	r5, r0, #31
    14f4:	0e24      	lsrs	r4, r4, #24
    14f6:	0028      	movs	r0, r5
    14f8:	099b      	lsrs	r3, r3, #6
    14fa:	0e36      	lsrs	r6, r6, #24
    14fc:	0fc9      	lsrs	r1, r1, #31
    14fe:	0992      	lsrs	r2, r2, #6
    1500:	428d      	cmp	r5, r1
    1502:	d059      	beq.n	15b8 <__aeabi_fadd+0xd0>
    1504:	1ba0      	subs	r0, r4, r6
    1506:	2800      	cmp	r0, #0
    1508:	dc00      	bgt.n	150c <__aeabi_fadd+0x24>
    150a:	e08d      	b.n	1628 <__aeabi_fadd+0x140>
    150c:	2e00      	cmp	r6, #0
    150e:	d11a      	bne.n	1546 <__aeabi_fadd+0x5e>
    1510:	2a00      	cmp	r2, #0
    1512:	d000      	beq.n	1516 <__aeabi_fadd+0x2e>
    1514:	e079      	b.n	160a <__aeabi_fadd+0x122>
    1516:	075a      	lsls	r2, r3, #29
    1518:	d004      	beq.n	1524 <__aeabi_fadd+0x3c>
    151a:	220f      	movs	r2, #15
    151c:	401a      	ands	r2, r3
    151e:	2a04      	cmp	r2, #4
    1520:	d000      	beq.n	1524 <__aeabi_fadd+0x3c>
    1522:	3304      	adds	r3, #4
    1524:	015a      	lsls	r2, r3, #5
    1526:	d538      	bpl.n	159a <__aeabi_fadd+0xb2>
    1528:	3401      	adds	r4, #1
    152a:	2cff      	cmp	r4, #255	; 0xff
    152c:	d100      	bne.n	1530 <__aeabi_fadd+0x48>
    152e:	e089      	b.n	1644 <__aeabi_fadd+0x15c>
    1530:	0028      	movs	r0, r5
    1532:	019b      	lsls	r3, r3, #6
    1534:	0a5b      	lsrs	r3, r3, #9
    1536:	b2e4      	uxtb	r4, r4
    1538:	025b      	lsls	r3, r3, #9
    153a:	05e4      	lsls	r4, r4, #23
    153c:	0a5b      	lsrs	r3, r3, #9
    153e:	4323      	orrs	r3, r4
    1540:	07c0      	lsls	r0, r0, #31
    1542:	4318      	orrs	r0, r3
    1544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1546:	2cff      	cmp	r4, #255	; 0xff
    1548:	d0e5      	beq.n	1516 <__aeabi_fadd+0x2e>
    154a:	2180      	movs	r1, #128	; 0x80
    154c:	04c9      	lsls	r1, r1, #19
    154e:	430a      	orrs	r2, r1
    1550:	281b      	cmp	r0, #27
    1552:	dd00      	ble.n	1556 <__aeabi_fadd+0x6e>
    1554:	e089      	b.n	166a <__aeabi_fadd+0x182>
    1556:	0016      	movs	r6, r2
    1558:	2120      	movs	r1, #32
    155a:	40c6      	lsrs	r6, r0
    155c:	1a08      	subs	r0, r1, r0
    155e:	4082      	lsls	r2, r0
    1560:	1e51      	subs	r1, r2, #1
    1562:	418a      	sbcs	r2, r1
    1564:	4332      	orrs	r2, r6
    1566:	1a9b      	subs	r3, r3, r2
    1568:	015a      	lsls	r2, r3, #5
    156a:	d514      	bpl.n	1596 <__aeabi_fadd+0xae>
    156c:	019b      	lsls	r3, r3, #6
    156e:	099e      	lsrs	r6, r3, #6
    1570:	0030      	movs	r0, r6
    1572:	f001 fcf7 	bl	2f64 <__clzsi2>
    1576:	3805      	subs	r0, #5
    1578:	4086      	lsls	r6, r0
    157a:	4284      	cmp	r4, r0
    157c:	dc65      	bgt.n	164a <__aeabi_fadd+0x162>
    157e:	1b04      	subs	r4, r0, r4
    1580:	0033      	movs	r3, r6
    1582:	2020      	movs	r0, #32
    1584:	3401      	adds	r4, #1
    1586:	40e3      	lsrs	r3, r4
    1588:	1b04      	subs	r4, r0, r4
    158a:	40a6      	lsls	r6, r4
    158c:	1e72      	subs	r2, r6, #1
    158e:	4196      	sbcs	r6, r2
    1590:	2400      	movs	r4, #0
    1592:	4333      	orrs	r3, r6
    1594:	e7bf      	b.n	1516 <__aeabi_fadd+0x2e>
    1596:	075a      	lsls	r2, r3, #29
    1598:	d1bf      	bne.n	151a <__aeabi_fadd+0x32>
    159a:	08df      	lsrs	r7, r3, #3
    159c:	0028      	movs	r0, r5
    159e:	2cff      	cmp	r4, #255	; 0xff
    15a0:	d12f      	bne.n	1602 <__aeabi_fadd+0x11a>
    15a2:	2f00      	cmp	r7, #0
    15a4:	d100      	bne.n	15a8 <__aeabi_fadd+0xc0>
    15a6:	e087      	b.n	16b8 <__aeabi_fadd+0x1d0>
    15a8:	2280      	movs	r2, #128	; 0x80
    15aa:	03d2      	lsls	r2, r2, #15
    15ac:	0013      	movs	r3, r2
    15ae:	433b      	orrs	r3, r7
    15b0:	025b      	lsls	r3, r3, #9
    15b2:	0a5b      	lsrs	r3, r3, #9
    15b4:	24ff      	movs	r4, #255	; 0xff
    15b6:	e7bf      	b.n	1538 <__aeabi_fadd+0x50>
    15b8:	1ba1      	subs	r1, r4, r6
    15ba:	2900      	cmp	r1, #0
    15bc:	dd49      	ble.n	1652 <__aeabi_fadd+0x16a>
    15be:	2e00      	cmp	r6, #0
    15c0:	d029      	beq.n	1616 <__aeabi_fadd+0x12e>
    15c2:	2cff      	cmp	r4, #255	; 0xff
    15c4:	d0a7      	beq.n	1516 <__aeabi_fadd+0x2e>
    15c6:	2680      	movs	r6, #128	; 0x80
    15c8:	04f6      	lsls	r6, r6, #19
    15ca:	4332      	orrs	r2, r6
    15cc:	291b      	cmp	r1, #27
    15ce:	dd00      	ble.n	15d2 <__aeabi_fadd+0xea>
    15d0:	e08d      	b.n	16ee <__aeabi_fadd+0x206>
    15d2:	0017      	movs	r7, r2
    15d4:	2620      	movs	r6, #32
    15d6:	40cf      	lsrs	r7, r1
    15d8:	1a71      	subs	r1, r6, r1
    15da:	408a      	lsls	r2, r1
    15dc:	1e51      	subs	r1, r2, #1
    15de:	418a      	sbcs	r2, r1
    15e0:	433a      	orrs	r2, r7
    15e2:	189b      	adds	r3, r3, r2
    15e4:	015a      	lsls	r2, r3, #5
    15e6:	d5d6      	bpl.n	1596 <__aeabi_fadd+0xae>
    15e8:	3401      	adds	r4, #1
    15ea:	2cff      	cmp	r4, #255	; 0xff
    15ec:	d064      	beq.n	16b8 <__aeabi_fadd+0x1d0>
    15ee:	2201      	movs	r2, #1
    15f0:	4976      	ldr	r1, [pc, #472]	; (17cc <__aeabi_fadd+0x2e4>)
    15f2:	401a      	ands	r2, r3
    15f4:	085b      	lsrs	r3, r3, #1
    15f6:	400b      	ands	r3, r1
    15f8:	4313      	orrs	r3, r2
    15fa:	e78c      	b.n	1516 <__aeabi_fadd+0x2e>
    15fc:	1e03      	subs	r3, r0, #0
    15fe:	d1ca      	bne.n	1596 <__aeabi_fadd+0xae>
    1600:	2000      	movs	r0, #0
    1602:	027b      	lsls	r3, r7, #9
    1604:	0a5b      	lsrs	r3, r3, #9
    1606:	b2e4      	uxtb	r4, r4
    1608:	e796      	b.n	1538 <__aeabi_fadd+0x50>
    160a:	3801      	subs	r0, #1
    160c:	2800      	cmp	r0, #0
    160e:	d0aa      	beq.n	1566 <__aeabi_fadd+0x7e>
    1610:	2cff      	cmp	r4, #255	; 0xff
    1612:	d19d      	bne.n	1550 <__aeabi_fadd+0x68>
    1614:	e77f      	b.n	1516 <__aeabi_fadd+0x2e>
    1616:	2a00      	cmp	r2, #0
    1618:	d100      	bne.n	161c <__aeabi_fadd+0x134>
    161a:	e77c      	b.n	1516 <__aeabi_fadd+0x2e>
    161c:	3901      	subs	r1, #1
    161e:	2900      	cmp	r1, #0
    1620:	d0df      	beq.n	15e2 <__aeabi_fadd+0xfa>
    1622:	2cff      	cmp	r4, #255	; 0xff
    1624:	d1d2      	bne.n	15cc <__aeabi_fadd+0xe4>
    1626:	e776      	b.n	1516 <__aeabi_fadd+0x2e>
    1628:	2800      	cmp	r0, #0
    162a:	d120      	bne.n	166e <__aeabi_fadd+0x186>
    162c:	1c60      	adds	r0, r4, #1
    162e:	b2c0      	uxtb	r0, r0
    1630:	2801      	cmp	r0, #1
    1632:	dd53      	ble.n	16dc <__aeabi_fadd+0x1f4>
    1634:	2780      	movs	r7, #128	; 0x80
    1636:	1a9e      	subs	r6, r3, r2
    1638:	04ff      	lsls	r7, r7, #19
    163a:	4037      	ands	r7, r6
    163c:	d02f      	beq.n	169e <__aeabi_fadd+0x1b6>
    163e:	1ad6      	subs	r6, r2, r3
    1640:	000d      	movs	r5, r1
    1642:	e795      	b.n	1570 <__aeabi_fadd+0x88>
    1644:	0028      	movs	r0, r5
    1646:	2300      	movs	r3, #0
    1648:	e776      	b.n	1538 <__aeabi_fadd+0x50>
    164a:	4b61      	ldr	r3, [pc, #388]	; (17d0 <__aeabi_fadd+0x2e8>)
    164c:	1a24      	subs	r4, r4, r0
    164e:	4033      	ands	r3, r6
    1650:	e761      	b.n	1516 <__aeabi_fadd+0x2e>
    1652:	2900      	cmp	r1, #0
    1654:	d14d      	bne.n	16f2 <__aeabi_fadd+0x20a>
    1656:	1c61      	adds	r1, r4, #1
    1658:	b2ce      	uxtb	r6, r1
    165a:	2e01      	cmp	r6, #1
    165c:	dd2f      	ble.n	16be <__aeabi_fadd+0x1d6>
    165e:	29ff      	cmp	r1, #255	; 0xff
    1660:	d02a      	beq.n	16b8 <__aeabi_fadd+0x1d0>
    1662:	189b      	adds	r3, r3, r2
    1664:	085b      	lsrs	r3, r3, #1
    1666:	000c      	movs	r4, r1
    1668:	e755      	b.n	1516 <__aeabi_fadd+0x2e>
    166a:	2201      	movs	r2, #1
    166c:	e77b      	b.n	1566 <__aeabi_fadd+0x7e>
    166e:	2c00      	cmp	r4, #0
    1670:	d11b      	bne.n	16aa <__aeabi_fadd+0x1c2>
    1672:	2b00      	cmp	r3, #0
    1674:	d05b      	beq.n	172e <__aeabi_fadd+0x246>
    1676:	43c0      	mvns	r0, r0
    1678:	2800      	cmp	r0, #0
    167a:	d00c      	beq.n	1696 <__aeabi_fadd+0x1ae>
    167c:	2eff      	cmp	r6, #255	; 0xff
    167e:	d07e      	beq.n	177e <__aeabi_fadd+0x296>
    1680:	281b      	cmp	r0, #27
    1682:	dd00      	ble.n	1686 <__aeabi_fadd+0x19e>
    1684:	e092      	b.n	17ac <__aeabi_fadd+0x2c4>
    1686:	001d      	movs	r5, r3
    1688:	2420      	movs	r4, #32
    168a:	40c5      	lsrs	r5, r0
    168c:	1a20      	subs	r0, r4, r0
    168e:	4083      	lsls	r3, r0
    1690:	1e58      	subs	r0, r3, #1
    1692:	4183      	sbcs	r3, r0
    1694:	432b      	orrs	r3, r5
    1696:	1ad3      	subs	r3, r2, r3
    1698:	0034      	movs	r4, r6
    169a:	000d      	movs	r5, r1
    169c:	e764      	b.n	1568 <__aeabi_fadd+0x80>
    169e:	2e00      	cmp	r6, #0
    16a0:	d000      	beq.n	16a4 <__aeabi_fadd+0x1bc>
    16a2:	e765      	b.n	1570 <__aeabi_fadd+0x88>
    16a4:	2000      	movs	r0, #0
    16a6:	2400      	movs	r4, #0
    16a8:	e7ab      	b.n	1602 <__aeabi_fadd+0x11a>
    16aa:	2eff      	cmp	r6, #255	; 0xff
    16ac:	d067      	beq.n	177e <__aeabi_fadd+0x296>
    16ae:	2480      	movs	r4, #128	; 0x80
    16b0:	04e4      	lsls	r4, r4, #19
    16b2:	4240      	negs	r0, r0
    16b4:	4323      	orrs	r3, r4
    16b6:	e7e3      	b.n	1680 <__aeabi_fadd+0x198>
    16b8:	24ff      	movs	r4, #255	; 0xff
    16ba:	2300      	movs	r3, #0
    16bc:	e73c      	b.n	1538 <__aeabi_fadd+0x50>
    16be:	2c00      	cmp	r4, #0
    16c0:	d161      	bne.n	1786 <__aeabi_fadd+0x29e>
    16c2:	2b00      	cmp	r3, #0
    16c4:	d07e      	beq.n	17c4 <__aeabi_fadd+0x2dc>
    16c6:	2a00      	cmp	r2, #0
    16c8:	d100      	bne.n	16cc <__aeabi_fadd+0x1e4>
    16ca:	e724      	b.n	1516 <__aeabi_fadd+0x2e>
    16cc:	189b      	adds	r3, r3, r2
    16ce:	015a      	lsls	r2, r3, #5
    16d0:	d400      	bmi.n	16d4 <__aeabi_fadd+0x1ec>
    16d2:	e760      	b.n	1596 <__aeabi_fadd+0xae>
    16d4:	4a3e      	ldr	r2, [pc, #248]	; (17d0 <__aeabi_fadd+0x2e8>)
    16d6:	000c      	movs	r4, r1
    16d8:	4013      	ands	r3, r2
    16da:	e71c      	b.n	1516 <__aeabi_fadd+0x2e>
    16dc:	2c00      	cmp	r4, #0
    16de:	d11e      	bne.n	171e <__aeabi_fadd+0x236>
    16e0:	2b00      	cmp	r3, #0
    16e2:	d12f      	bne.n	1744 <__aeabi_fadd+0x25c>
    16e4:	2a00      	cmp	r2, #0
    16e6:	d066      	beq.n	17b6 <__aeabi_fadd+0x2ce>
    16e8:	0013      	movs	r3, r2
    16ea:	000d      	movs	r5, r1
    16ec:	e713      	b.n	1516 <__aeabi_fadd+0x2e>
    16ee:	2201      	movs	r2, #1
    16f0:	e777      	b.n	15e2 <__aeabi_fadd+0xfa>
    16f2:	2c00      	cmp	r4, #0
    16f4:	d11f      	bne.n	1736 <__aeabi_fadd+0x24e>
    16f6:	2b00      	cmp	r3, #0
    16f8:	d05a      	beq.n	17b0 <__aeabi_fadd+0x2c8>
    16fa:	43c9      	mvns	r1, r1
    16fc:	2900      	cmp	r1, #0
    16fe:	d00b      	beq.n	1718 <__aeabi_fadd+0x230>
    1700:	2eff      	cmp	r6, #255	; 0xff
    1702:	d050      	beq.n	17a6 <__aeabi_fadd+0x2be>
    1704:	291b      	cmp	r1, #27
    1706:	dc5f      	bgt.n	17c8 <__aeabi_fadd+0x2e0>
    1708:	001f      	movs	r7, r3
    170a:	2420      	movs	r4, #32
    170c:	40cf      	lsrs	r7, r1
    170e:	1a61      	subs	r1, r4, r1
    1710:	408b      	lsls	r3, r1
    1712:	1e59      	subs	r1, r3, #1
    1714:	418b      	sbcs	r3, r1
    1716:	433b      	orrs	r3, r7
    1718:	189b      	adds	r3, r3, r2
    171a:	0034      	movs	r4, r6
    171c:	e762      	b.n	15e4 <__aeabi_fadd+0xfc>
    171e:	2b00      	cmp	r3, #0
    1720:	d11c      	bne.n	175c <__aeabi_fadd+0x274>
    1722:	2a00      	cmp	r2, #0
    1724:	d04a      	beq.n	17bc <__aeabi_fadd+0x2d4>
    1726:	0013      	movs	r3, r2
    1728:	000d      	movs	r5, r1
    172a:	24ff      	movs	r4, #255	; 0xff
    172c:	e6f3      	b.n	1516 <__aeabi_fadd+0x2e>
    172e:	0013      	movs	r3, r2
    1730:	0034      	movs	r4, r6
    1732:	000d      	movs	r5, r1
    1734:	e6ef      	b.n	1516 <__aeabi_fadd+0x2e>
    1736:	2eff      	cmp	r6, #255	; 0xff
    1738:	d035      	beq.n	17a6 <__aeabi_fadd+0x2be>
    173a:	2480      	movs	r4, #128	; 0x80
    173c:	04e4      	lsls	r4, r4, #19
    173e:	4249      	negs	r1, r1
    1740:	4323      	orrs	r3, r4
    1742:	e7df      	b.n	1704 <__aeabi_fadd+0x21c>
    1744:	2a00      	cmp	r2, #0
    1746:	d100      	bne.n	174a <__aeabi_fadd+0x262>
    1748:	e6e5      	b.n	1516 <__aeabi_fadd+0x2e>
    174a:	2780      	movs	r7, #128	; 0x80
    174c:	1a98      	subs	r0, r3, r2
    174e:	04ff      	lsls	r7, r7, #19
    1750:	4007      	ands	r7, r0
    1752:	d100      	bne.n	1756 <__aeabi_fadd+0x26e>
    1754:	e752      	b.n	15fc <__aeabi_fadd+0x114>
    1756:	1ad3      	subs	r3, r2, r3
    1758:	000d      	movs	r5, r1
    175a:	e6dc      	b.n	1516 <__aeabi_fadd+0x2e>
    175c:	24ff      	movs	r4, #255	; 0xff
    175e:	2a00      	cmp	r2, #0
    1760:	d100      	bne.n	1764 <__aeabi_fadd+0x27c>
    1762:	e6d8      	b.n	1516 <__aeabi_fadd+0x2e>
    1764:	2080      	movs	r0, #128	; 0x80
    1766:	08db      	lsrs	r3, r3, #3
    1768:	03c0      	lsls	r0, r0, #15
    176a:	4203      	tst	r3, r0
    176c:	d004      	beq.n	1778 <__aeabi_fadd+0x290>
    176e:	08d2      	lsrs	r2, r2, #3
    1770:	4202      	tst	r2, r0
    1772:	d101      	bne.n	1778 <__aeabi_fadd+0x290>
    1774:	0013      	movs	r3, r2
    1776:	000d      	movs	r5, r1
    1778:	00db      	lsls	r3, r3, #3
    177a:	24ff      	movs	r4, #255	; 0xff
    177c:	e6cb      	b.n	1516 <__aeabi_fadd+0x2e>
    177e:	0013      	movs	r3, r2
    1780:	24ff      	movs	r4, #255	; 0xff
    1782:	000d      	movs	r5, r1
    1784:	e6c7      	b.n	1516 <__aeabi_fadd+0x2e>
    1786:	2b00      	cmp	r3, #0
    1788:	d00d      	beq.n	17a6 <__aeabi_fadd+0x2be>
    178a:	24ff      	movs	r4, #255	; 0xff
    178c:	2a00      	cmp	r2, #0
    178e:	d100      	bne.n	1792 <__aeabi_fadd+0x2aa>
    1790:	e6c1      	b.n	1516 <__aeabi_fadd+0x2e>
    1792:	2180      	movs	r1, #128	; 0x80
    1794:	08db      	lsrs	r3, r3, #3
    1796:	03c9      	lsls	r1, r1, #15
    1798:	420b      	tst	r3, r1
    179a:	d0ed      	beq.n	1778 <__aeabi_fadd+0x290>
    179c:	08d2      	lsrs	r2, r2, #3
    179e:	420a      	tst	r2, r1
    17a0:	d1ea      	bne.n	1778 <__aeabi_fadd+0x290>
    17a2:	0013      	movs	r3, r2
    17a4:	e7e8      	b.n	1778 <__aeabi_fadd+0x290>
    17a6:	0013      	movs	r3, r2
    17a8:	24ff      	movs	r4, #255	; 0xff
    17aa:	e6b4      	b.n	1516 <__aeabi_fadd+0x2e>
    17ac:	2301      	movs	r3, #1
    17ae:	e772      	b.n	1696 <__aeabi_fadd+0x1ae>
    17b0:	0013      	movs	r3, r2
    17b2:	0034      	movs	r4, r6
    17b4:	e6af      	b.n	1516 <__aeabi_fadd+0x2e>
    17b6:	2700      	movs	r7, #0
    17b8:	2000      	movs	r0, #0
    17ba:	e722      	b.n	1602 <__aeabi_fadd+0x11a>
    17bc:	2780      	movs	r7, #128	; 0x80
    17be:	2000      	movs	r0, #0
    17c0:	03ff      	lsls	r7, r7, #15
    17c2:	e6f1      	b.n	15a8 <__aeabi_fadd+0xc0>
    17c4:	0013      	movs	r3, r2
    17c6:	e6a6      	b.n	1516 <__aeabi_fadd+0x2e>
    17c8:	2301      	movs	r3, #1
    17ca:	e7a5      	b.n	1718 <__aeabi_fadd+0x230>
    17cc:	7dffffff 	.word	0x7dffffff
    17d0:	fbffffff 	.word	0xfbffffff

000017d4 <__aeabi_fdiv>:
    17d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d6:	4656      	mov	r6, sl
    17d8:	4644      	mov	r4, r8
    17da:	465f      	mov	r7, fp
    17dc:	464d      	mov	r5, r9
    17de:	b4f0      	push	{r4, r5, r6, r7}
    17e0:	0244      	lsls	r4, r0, #9
    17e2:	0046      	lsls	r6, r0, #1
    17e4:	0fc7      	lsrs	r7, r0, #31
    17e6:	b083      	sub	sp, #12
    17e8:	4688      	mov	r8, r1
    17ea:	0a65      	lsrs	r5, r4, #9
    17ec:	0e36      	lsrs	r6, r6, #24
    17ee:	46ba      	mov	sl, r7
    17f0:	d03d      	beq.n	186e <__aeabi_fdiv+0x9a>
    17f2:	2eff      	cmp	r6, #255	; 0xff
    17f4:	d022      	beq.n	183c <__aeabi_fdiv+0x68>
    17f6:	2300      	movs	r3, #0
    17f8:	00ec      	lsls	r4, r5, #3
    17fa:	2580      	movs	r5, #128	; 0x80
    17fc:	4699      	mov	r9, r3
    17fe:	469b      	mov	fp, r3
    1800:	04ed      	lsls	r5, r5, #19
    1802:	4325      	orrs	r5, r4
    1804:	3e7f      	subs	r6, #127	; 0x7f
    1806:	4643      	mov	r3, r8
    1808:	025c      	lsls	r4, r3, #9
    180a:	0058      	lsls	r0, r3, #1
    180c:	0fdb      	lsrs	r3, r3, #31
    180e:	0a64      	lsrs	r4, r4, #9
    1810:	0e00      	lsrs	r0, r0, #24
    1812:	4698      	mov	r8, r3
    1814:	d036      	beq.n	1884 <__aeabi_fdiv+0xb0>
    1816:	28ff      	cmp	r0, #255	; 0xff
    1818:	d030      	beq.n	187c <__aeabi_fdiv+0xa8>
    181a:	2380      	movs	r3, #128	; 0x80
    181c:	2100      	movs	r1, #0
    181e:	00e4      	lsls	r4, r4, #3
    1820:	04db      	lsls	r3, r3, #19
    1822:	431c      	orrs	r4, r3
    1824:	387f      	subs	r0, #127	; 0x7f
    1826:	1a30      	subs	r0, r6, r0
    1828:	9001      	str	r0, [sp, #4]
    182a:	4648      	mov	r0, r9
    182c:	4642      	mov	r2, r8
    182e:	4308      	orrs	r0, r1
    1830:	4e72      	ldr	r6, [pc, #456]	; (19fc <__aeabi_fdiv+0x228>)
    1832:	0080      	lsls	r0, r0, #2
    1834:	5830      	ldr	r0, [r6, r0]
    1836:	407a      	eors	r2, r7
    1838:	0013      	movs	r3, r2
    183a:	4687      	mov	pc, r0
    183c:	2d00      	cmp	r5, #0
    183e:	d144      	bne.n	18ca <__aeabi_fdiv+0xf6>
    1840:	2308      	movs	r3, #8
    1842:	4699      	mov	r9, r3
    1844:	3b06      	subs	r3, #6
    1846:	469b      	mov	fp, r3
    1848:	e7dd      	b.n	1806 <__aeabi_fdiv+0x32>
    184a:	2201      	movs	r2, #1
    184c:	20ff      	movs	r0, #255	; 0xff
    184e:	2400      	movs	r4, #0
    1850:	401a      	ands	r2, r3
    1852:	0264      	lsls	r4, r4, #9
    1854:	05c3      	lsls	r3, r0, #23
    1856:	0a64      	lsrs	r4, r4, #9
    1858:	07d2      	lsls	r2, r2, #31
    185a:	431c      	orrs	r4, r3
    185c:	4314      	orrs	r4, r2
    185e:	0020      	movs	r0, r4
    1860:	b003      	add	sp, #12
    1862:	bc3c      	pop	{r2, r3, r4, r5}
    1864:	4690      	mov	r8, r2
    1866:	4699      	mov	r9, r3
    1868:	46a2      	mov	sl, r4
    186a:	46ab      	mov	fp, r5
    186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    186e:	2d00      	cmp	r5, #0
    1870:	d120      	bne.n	18b4 <__aeabi_fdiv+0xe0>
    1872:	2304      	movs	r3, #4
    1874:	4699      	mov	r9, r3
    1876:	3b03      	subs	r3, #3
    1878:	469b      	mov	fp, r3
    187a:	e7c4      	b.n	1806 <__aeabi_fdiv+0x32>
    187c:	2c00      	cmp	r4, #0
    187e:	d117      	bne.n	18b0 <__aeabi_fdiv+0xdc>
    1880:	2102      	movs	r1, #2
    1882:	e002      	b.n	188a <__aeabi_fdiv+0xb6>
    1884:	2c00      	cmp	r4, #0
    1886:	d10a      	bne.n	189e <__aeabi_fdiv+0xca>
    1888:	2101      	movs	r1, #1
    188a:	1a32      	subs	r2, r6, r0
    188c:	9201      	str	r2, [sp, #4]
    188e:	464a      	mov	r2, r9
    1890:	4643      	mov	r3, r8
    1892:	430a      	orrs	r2, r1
    1894:	485a      	ldr	r0, [pc, #360]	; (1a00 <__aeabi_fdiv+0x22c>)
    1896:	0092      	lsls	r2, r2, #2
    1898:	5882      	ldr	r2, [r0, r2]
    189a:	407b      	eors	r3, r7
    189c:	4697      	mov	pc, r2
    189e:	0020      	movs	r0, r4
    18a0:	f001 fb60 	bl	2f64 <__clzsi2>
    18a4:	1f43      	subs	r3, r0, #5
    18a6:	3076      	adds	r0, #118	; 0x76
    18a8:	409c      	lsls	r4, r3
    18aa:	4240      	negs	r0, r0
    18ac:	2100      	movs	r1, #0
    18ae:	e7ba      	b.n	1826 <__aeabi_fdiv+0x52>
    18b0:	2103      	movs	r1, #3
    18b2:	e7b8      	b.n	1826 <__aeabi_fdiv+0x52>
    18b4:	0028      	movs	r0, r5
    18b6:	f001 fb55 	bl	2f64 <__clzsi2>
    18ba:	1f43      	subs	r3, r0, #5
    18bc:	409d      	lsls	r5, r3
    18be:	2300      	movs	r3, #0
    18c0:	3076      	adds	r0, #118	; 0x76
    18c2:	4246      	negs	r6, r0
    18c4:	4699      	mov	r9, r3
    18c6:	469b      	mov	fp, r3
    18c8:	e79d      	b.n	1806 <__aeabi_fdiv+0x32>
    18ca:	230c      	movs	r3, #12
    18cc:	4699      	mov	r9, r3
    18ce:	3b09      	subs	r3, #9
    18d0:	469b      	mov	fp, r3
    18d2:	e798      	b.n	1806 <__aeabi_fdiv+0x32>
    18d4:	2480      	movs	r4, #128	; 0x80
    18d6:	2200      	movs	r2, #0
    18d8:	03e4      	lsls	r4, r4, #15
    18da:	20ff      	movs	r0, #255	; 0xff
    18dc:	e7b9      	b.n	1852 <__aeabi_fdiv+0x7e>
    18de:	2400      	movs	r4, #0
    18e0:	46c2      	mov	sl, r8
    18e2:	468b      	mov	fp, r1
    18e4:	465a      	mov	r2, fp
    18e6:	4653      	mov	r3, sl
    18e8:	2a02      	cmp	r2, #2
    18ea:	d0ae      	beq.n	184a <__aeabi_fdiv+0x76>
    18ec:	2a03      	cmp	r2, #3
    18ee:	d07d      	beq.n	19ec <__aeabi_fdiv+0x218>
    18f0:	2a01      	cmp	r2, #1
    18f2:	d131      	bne.n	1958 <__aeabi_fdiv+0x184>
    18f4:	2201      	movs	r2, #1
    18f6:	2000      	movs	r0, #0
    18f8:	401a      	ands	r2, r3
    18fa:	2400      	movs	r4, #0
    18fc:	e7a9      	b.n	1852 <__aeabi_fdiv+0x7e>
    18fe:	2201      	movs	r2, #1
    1900:	1a10      	subs	r0, r2, r0
    1902:	281b      	cmp	r0, #27
    1904:	dd56      	ble.n	19b4 <__aeabi_fdiv+0x1e0>
    1906:	401a      	ands	r2, r3
    1908:	2000      	movs	r0, #0
    190a:	2400      	movs	r4, #0
    190c:	e7a1      	b.n	1852 <__aeabi_fdiv+0x7e>
    190e:	2380      	movs	r3, #128	; 0x80
    1910:	03db      	lsls	r3, r3, #15
    1912:	421d      	tst	r5, r3
    1914:	d14b      	bne.n	19ae <__aeabi_fdiv+0x1da>
    1916:	2380      	movs	r3, #128	; 0x80
    1918:	03db      	lsls	r3, r3, #15
    191a:	432b      	orrs	r3, r5
    191c:	025c      	lsls	r4, r3, #9
    191e:	0a64      	lsrs	r4, r4, #9
    1920:	003a      	movs	r2, r7
    1922:	20ff      	movs	r0, #255	; 0xff
    1924:	e795      	b.n	1852 <__aeabi_fdiv+0x7e>
    1926:	016d      	lsls	r5, r5, #5
    1928:	0160      	lsls	r0, r4, #5
    192a:	4285      	cmp	r5, r0
    192c:	d230      	bcs.n	1990 <__aeabi_fdiv+0x1bc>
    192e:	9a01      	ldr	r2, [sp, #4]
    1930:	2400      	movs	r4, #0
    1932:	3a01      	subs	r2, #1
    1934:	9201      	str	r2, [sp, #4]
    1936:	221b      	movs	r2, #27
    1938:	2701      	movs	r7, #1
    193a:	0029      	movs	r1, r5
    193c:	0064      	lsls	r4, r4, #1
    193e:	006d      	lsls	r5, r5, #1
    1940:	2900      	cmp	r1, #0
    1942:	db01      	blt.n	1948 <__aeabi_fdiv+0x174>
    1944:	42a8      	cmp	r0, r5
    1946:	d801      	bhi.n	194c <__aeabi_fdiv+0x178>
    1948:	1a2d      	subs	r5, r5, r0
    194a:	433c      	orrs	r4, r7
    194c:	3a01      	subs	r2, #1
    194e:	2a00      	cmp	r2, #0
    1950:	d1f3      	bne.n	193a <__aeabi_fdiv+0x166>
    1952:	1e6a      	subs	r2, r5, #1
    1954:	4195      	sbcs	r5, r2
    1956:	432c      	orrs	r4, r5
    1958:	9801      	ldr	r0, [sp, #4]
    195a:	307f      	adds	r0, #127	; 0x7f
    195c:	2800      	cmp	r0, #0
    195e:	ddce      	ble.n	18fe <__aeabi_fdiv+0x12a>
    1960:	0762      	lsls	r2, r4, #29
    1962:	d004      	beq.n	196e <__aeabi_fdiv+0x19a>
    1964:	220f      	movs	r2, #15
    1966:	4022      	ands	r2, r4
    1968:	2a04      	cmp	r2, #4
    196a:	d000      	beq.n	196e <__aeabi_fdiv+0x19a>
    196c:	3404      	adds	r4, #4
    196e:	0122      	lsls	r2, r4, #4
    1970:	d503      	bpl.n	197a <__aeabi_fdiv+0x1a6>
    1972:	4a24      	ldr	r2, [pc, #144]	; (1a04 <__aeabi_fdiv+0x230>)
    1974:	9801      	ldr	r0, [sp, #4]
    1976:	4014      	ands	r4, r2
    1978:	3080      	adds	r0, #128	; 0x80
    197a:	28fe      	cmp	r0, #254	; 0xfe
    197c:	dd00      	ble.n	1980 <__aeabi_fdiv+0x1ac>
    197e:	e764      	b.n	184a <__aeabi_fdiv+0x76>
    1980:	2201      	movs	r2, #1
    1982:	01a4      	lsls	r4, r4, #6
    1984:	0a64      	lsrs	r4, r4, #9
    1986:	b2c0      	uxtb	r0, r0
    1988:	401a      	ands	r2, r3
    198a:	e762      	b.n	1852 <__aeabi_fdiv+0x7e>
    198c:	002c      	movs	r4, r5
    198e:	e7a9      	b.n	18e4 <__aeabi_fdiv+0x110>
    1990:	1a2d      	subs	r5, r5, r0
    1992:	221a      	movs	r2, #26
    1994:	2401      	movs	r4, #1
    1996:	e7cf      	b.n	1938 <__aeabi_fdiv+0x164>
    1998:	026b      	lsls	r3, r5, #9
    199a:	d5bc      	bpl.n	1916 <__aeabi_fdiv+0x142>
    199c:	2400      	movs	r4, #0
    199e:	2380      	movs	r3, #128	; 0x80
    19a0:	03db      	lsls	r3, r3, #15
    19a2:	431c      	orrs	r4, r3
    19a4:	0264      	lsls	r4, r4, #9
    19a6:	0a64      	lsrs	r4, r4, #9
    19a8:	4642      	mov	r2, r8
    19aa:	20ff      	movs	r0, #255	; 0xff
    19ac:	e751      	b.n	1852 <__aeabi_fdiv+0x7e>
    19ae:	421c      	tst	r4, r3
    19b0:	d1b3      	bne.n	191a <__aeabi_fdiv+0x146>
    19b2:	e7f4      	b.n	199e <__aeabi_fdiv+0x1ca>
    19b4:	0021      	movs	r1, r4
    19b6:	2220      	movs	r2, #32
    19b8:	40c1      	lsrs	r1, r0
    19ba:	1a10      	subs	r0, r2, r0
    19bc:	4084      	lsls	r4, r0
    19be:	1e62      	subs	r2, r4, #1
    19c0:	4194      	sbcs	r4, r2
    19c2:	430c      	orrs	r4, r1
    19c4:	0762      	lsls	r2, r4, #29
    19c6:	d004      	beq.n	19d2 <__aeabi_fdiv+0x1fe>
    19c8:	220f      	movs	r2, #15
    19ca:	4022      	ands	r2, r4
    19cc:	2a04      	cmp	r2, #4
    19ce:	d000      	beq.n	19d2 <__aeabi_fdiv+0x1fe>
    19d0:	3404      	adds	r4, #4
    19d2:	0162      	lsls	r2, r4, #5
    19d4:	d504      	bpl.n	19e0 <__aeabi_fdiv+0x20c>
    19d6:	2201      	movs	r2, #1
    19d8:	2001      	movs	r0, #1
    19da:	401a      	ands	r2, r3
    19dc:	2400      	movs	r4, #0
    19de:	e738      	b.n	1852 <__aeabi_fdiv+0x7e>
    19e0:	2201      	movs	r2, #1
    19e2:	01a4      	lsls	r4, r4, #6
    19e4:	0a64      	lsrs	r4, r4, #9
    19e6:	401a      	ands	r2, r3
    19e8:	2000      	movs	r0, #0
    19ea:	e732      	b.n	1852 <__aeabi_fdiv+0x7e>
    19ec:	2380      	movs	r3, #128	; 0x80
    19ee:	03db      	lsls	r3, r3, #15
    19f0:	431c      	orrs	r4, r3
    19f2:	0264      	lsls	r4, r4, #9
    19f4:	0a64      	lsrs	r4, r4, #9
    19f6:	4652      	mov	r2, sl
    19f8:	20ff      	movs	r0, #255	; 0xff
    19fa:	e72a      	b.n	1852 <__aeabi_fdiv+0x7e>
    19fc:	00003330 	.word	0x00003330
    1a00:	00003370 	.word	0x00003370
    1a04:	f7ffffff 	.word	0xf7ffffff

00001a08 <__aeabi_fmul>:
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	4657      	mov	r7, sl
    1a0c:	464e      	mov	r6, r9
    1a0e:	4645      	mov	r5, r8
    1a10:	0043      	lsls	r3, r0, #1
    1a12:	b4e0      	push	{r5, r6, r7}
    1a14:	0246      	lsls	r6, r0, #9
    1a16:	4688      	mov	r8, r1
    1a18:	0a76      	lsrs	r6, r6, #9
    1a1a:	0e1f      	lsrs	r7, r3, #24
    1a1c:	0fc4      	lsrs	r4, r0, #31
    1a1e:	2f00      	cmp	r7, #0
    1a20:	d047      	beq.n	1ab2 <__aeabi_fmul+0xaa>
    1a22:	2fff      	cmp	r7, #255	; 0xff
    1a24:	d025      	beq.n	1a72 <__aeabi_fmul+0x6a>
    1a26:	2300      	movs	r3, #0
    1a28:	2580      	movs	r5, #128	; 0x80
    1a2a:	469a      	mov	sl, r3
    1a2c:	4699      	mov	r9, r3
    1a2e:	00f6      	lsls	r6, r6, #3
    1a30:	04ed      	lsls	r5, r5, #19
    1a32:	432e      	orrs	r6, r5
    1a34:	3f7f      	subs	r7, #127	; 0x7f
    1a36:	4643      	mov	r3, r8
    1a38:	4642      	mov	r2, r8
    1a3a:	025d      	lsls	r5, r3, #9
    1a3c:	0fd2      	lsrs	r2, r2, #31
    1a3e:	005b      	lsls	r3, r3, #1
    1a40:	0a6d      	lsrs	r5, r5, #9
    1a42:	0e1b      	lsrs	r3, r3, #24
    1a44:	4690      	mov	r8, r2
    1a46:	d040      	beq.n	1aca <__aeabi_fmul+0xc2>
    1a48:	2bff      	cmp	r3, #255	; 0xff
    1a4a:	d039      	beq.n	1ac0 <__aeabi_fmul+0xb8>
    1a4c:	2280      	movs	r2, #128	; 0x80
    1a4e:	2000      	movs	r0, #0
    1a50:	00ed      	lsls	r5, r5, #3
    1a52:	04d2      	lsls	r2, r2, #19
    1a54:	4315      	orrs	r5, r2
    1a56:	3b7f      	subs	r3, #127	; 0x7f
    1a58:	18fb      	adds	r3, r7, r3
    1a5a:	4642      	mov	r2, r8
    1a5c:	4657      	mov	r7, sl
    1a5e:	1c59      	adds	r1, r3, #1
    1a60:	4062      	eors	r2, r4
    1a62:	468c      	mov	ip, r1
    1a64:	4307      	orrs	r7, r0
    1a66:	2f0f      	cmp	r7, #15
    1a68:	d85c      	bhi.n	1b24 <__aeabi_fmul+0x11c>
    1a6a:	496f      	ldr	r1, [pc, #444]	; (1c28 <__aeabi_fmul+0x220>)
    1a6c:	00bf      	lsls	r7, r7, #2
    1a6e:	59c9      	ldr	r1, [r1, r7]
    1a70:	468f      	mov	pc, r1
    1a72:	2e00      	cmp	r6, #0
    1a74:	d145      	bne.n	1b02 <__aeabi_fmul+0xfa>
    1a76:	2308      	movs	r3, #8
    1a78:	469a      	mov	sl, r3
    1a7a:	3b06      	subs	r3, #6
    1a7c:	4699      	mov	r9, r3
    1a7e:	e7da      	b.n	1a36 <__aeabi_fmul+0x2e>
    1a80:	4642      	mov	r2, r8
    1a82:	2802      	cmp	r0, #2
    1a84:	d02d      	beq.n	1ae2 <__aeabi_fmul+0xda>
    1a86:	2803      	cmp	r0, #3
    1a88:	d100      	bne.n	1a8c <__aeabi_fmul+0x84>
    1a8a:	e0c3      	b.n	1c14 <__aeabi_fmul+0x20c>
    1a8c:	2801      	cmp	r0, #1
    1a8e:	d000      	beq.n	1a92 <__aeabi_fmul+0x8a>
    1a90:	e0a2      	b.n	1bd8 <__aeabi_fmul+0x1d0>
    1a92:	2500      	movs	r5, #0
    1a94:	2600      	movs	r6, #0
    1a96:	4002      	ands	r2, r0
    1a98:	b2d4      	uxtb	r4, r2
    1a9a:	0276      	lsls	r6, r6, #9
    1a9c:	05ed      	lsls	r5, r5, #23
    1a9e:	0a76      	lsrs	r6, r6, #9
    1aa0:	432e      	orrs	r6, r5
    1aa2:	07e4      	lsls	r4, r4, #31
    1aa4:	4326      	orrs	r6, r4
    1aa6:	0030      	movs	r0, r6
    1aa8:	bc1c      	pop	{r2, r3, r4}
    1aaa:	4690      	mov	r8, r2
    1aac:	4699      	mov	r9, r3
    1aae:	46a2      	mov	sl, r4
    1ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab2:	2e00      	cmp	r6, #0
    1ab4:	d11a      	bne.n	1aec <__aeabi_fmul+0xe4>
    1ab6:	2304      	movs	r3, #4
    1ab8:	469a      	mov	sl, r3
    1aba:	3b03      	subs	r3, #3
    1abc:	4699      	mov	r9, r3
    1abe:	e7ba      	b.n	1a36 <__aeabi_fmul+0x2e>
    1ac0:	002a      	movs	r2, r5
    1ac2:	1e51      	subs	r1, r2, #1
    1ac4:	418a      	sbcs	r2, r1
    1ac6:	1c90      	adds	r0, r2, #2
    1ac8:	e7c6      	b.n	1a58 <__aeabi_fmul+0x50>
    1aca:	2001      	movs	r0, #1
    1acc:	2d00      	cmp	r5, #0
    1ace:	d0c3      	beq.n	1a58 <__aeabi_fmul+0x50>
    1ad0:	0028      	movs	r0, r5
    1ad2:	f001 fa47 	bl	2f64 <__clzsi2>
    1ad6:	1f43      	subs	r3, r0, #5
    1ad8:	3076      	adds	r0, #118	; 0x76
    1ada:	409d      	lsls	r5, r3
    1adc:	4243      	negs	r3, r0
    1ade:	2000      	movs	r0, #0
    1ae0:	e7ba      	b.n	1a58 <__aeabi_fmul+0x50>
    1ae2:	2401      	movs	r4, #1
    1ae4:	25ff      	movs	r5, #255	; 0xff
    1ae6:	4014      	ands	r4, r2
    1ae8:	2600      	movs	r6, #0
    1aea:	e7d6      	b.n	1a9a <__aeabi_fmul+0x92>
    1aec:	0030      	movs	r0, r6
    1aee:	f001 fa39 	bl	2f64 <__clzsi2>
    1af2:	1f43      	subs	r3, r0, #5
    1af4:	409e      	lsls	r6, r3
    1af6:	2300      	movs	r3, #0
    1af8:	3076      	adds	r0, #118	; 0x76
    1afa:	4247      	negs	r7, r0
    1afc:	469a      	mov	sl, r3
    1afe:	4699      	mov	r9, r3
    1b00:	e799      	b.n	1a36 <__aeabi_fmul+0x2e>
    1b02:	230c      	movs	r3, #12
    1b04:	469a      	mov	sl, r3
    1b06:	3b09      	subs	r3, #9
    1b08:	4699      	mov	r9, r3
    1b0a:	e794      	b.n	1a36 <__aeabi_fmul+0x2e>
    1b0c:	2680      	movs	r6, #128	; 0x80
    1b0e:	2400      	movs	r4, #0
    1b10:	03f6      	lsls	r6, r6, #15
    1b12:	25ff      	movs	r5, #255	; 0xff
    1b14:	e7c1      	b.n	1a9a <__aeabi_fmul+0x92>
    1b16:	0035      	movs	r5, r6
    1b18:	4648      	mov	r0, r9
    1b1a:	e7b2      	b.n	1a82 <__aeabi_fmul+0x7a>
    1b1c:	0035      	movs	r5, r6
    1b1e:	0022      	movs	r2, r4
    1b20:	4648      	mov	r0, r9
    1b22:	e7ae      	b.n	1a82 <__aeabi_fmul+0x7a>
    1b24:	0429      	lsls	r1, r5, #16
    1b26:	0c09      	lsrs	r1, r1, #16
    1b28:	0008      	movs	r0, r1
    1b2a:	0c37      	lsrs	r7, r6, #16
    1b2c:	0436      	lsls	r6, r6, #16
    1b2e:	0c36      	lsrs	r6, r6, #16
    1b30:	0c2c      	lsrs	r4, r5, #16
    1b32:	4379      	muls	r1, r7
    1b34:	4370      	muls	r0, r6
    1b36:	4367      	muls	r7, r4
    1b38:	4374      	muls	r4, r6
    1b3a:	0c06      	lsrs	r6, r0, #16
    1b3c:	1864      	adds	r4, r4, r1
    1b3e:	1936      	adds	r6, r6, r4
    1b40:	42b1      	cmp	r1, r6
    1b42:	d903      	bls.n	1b4c <__aeabi_fmul+0x144>
    1b44:	2180      	movs	r1, #128	; 0x80
    1b46:	0249      	lsls	r1, r1, #9
    1b48:	4688      	mov	r8, r1
    1b4a:	4447      	add	r7, r8
    1b4c:	0400      	lsls	r0, r0, #16
    1b4e:	0c00      	lsrs	r0, r0, #16
    1b50:	0431      	lsls	r1, r6, #16
    1b52:	1809      	adds	r1, r1, r0
    1b54:	018d      	lsls	r5, r1, #6
    1b56:	1e68      	subs	r0, r5, #1
    1b58:	4185      	sbcs	r5, r0
    1b5a:	0e89      	lsrs	r1, r1, #26
    1b5c:	4329      	orrs	r1, r5
    1b5e:	0c35      	lsrs	r5, r6, #16
    1b60:	19ed      	adds	r5, r5, r7
    1b62:	01ad      	lsls	r5, r5, #6
    1b64:	430d      	orrs	r5, r1
    1b66:	0129      	lsls	r1, r5, #4
    1b68:	d504      	bpl.n	1b74 <__aeabi_fmul+0x16c>
    1b6a:	2301      	movs	r3, #1
    1b6c:	0869      	lsrs	r1, r5, #1
    1b6e:	401d      	ands	r5, r3
    1b70:	4663      	mov	r3, ip
    1b72:	430d      	orrs	r5, r1
    1b74:	0019      	movs	r1, r3
    1b76:	317f      	adds	r1, #127	; 0x7f
    1b78:	2900      	cmp	r1, #0
    1b7a:	dd25      	ble.n	1bc8 <__aeabi_fmul+0x1c0>
    1b7c:	0768      	lsls	r0, r5, #29
    1b7e:	d004      	beq.n	1b8a <__aeabi_fmul+0x182>
    1b80:	200f      	movs	r0, #15
    1b82:	4028      	ands	r0, r5
    1b84:	2804      	cmp	r0, #4
    1b86:	d000      	beq.n	1b8a <__aeabi_fmul+0x182>
    1b88:	3504      	adds	r5, #4
    1b8a:	0128      	lsls	r0, r5, #4
    1b8c:	d503      	bpl.n	1b96 <__aeabi_fmul+0x18e>
    1b8e:	4927      	ldr	r1, [pc, #156]	; (1c2c <__aeabi_fmul+0x224>)
    1b90:	3380      	adds	r3, #128	; 0x80
    1b92:	400d      	ands	r5, r1
    1b94:	0019      	movs	r1, r3
    1b96:	29fe      	cmp	r1, #254	; 0xfe
    1b98:	dca3      	bgt.n	1ae2 <__aeabi_fmul+0xda>
    1b9a:	2401      	movs	r4, #1
    1b9c:	01ad      	lsls	r5, r5, #6
    1b9e:	0a6e      	lsrs	r6, r5, #9
    1ba0:	4014      	ands	r4, r2
    1ba2:	b2cd      	uxtb	r5, r1
    1ba4:	e779      	b.n	1a9a <__aeabi_fmul+0x92>
    1ba6:	2080      	movs	r0, #128	; 0x80
    1ba8:	03c0      	lsls	r0, r0, #15
    1baa:	4206      	tst	r6, r0
    1bac:	d007      	beq.n	1bbe <__aeabi_fmul+0x1b6>
    1bae:	4205      	tst	r5, r0
    1bb0:	d105      	bne.n	1bbe <__aeabi_fmul+0x1b6>
    1bb2:	4328      	orrs	r0, r5
    1bb4:	0246      	lsls	r6, r0, #9
    1bb6:	0a76      	lsrs	r6, r6, #9
    1bb8:	4644      	mov	r4, r8
    1bba:	25ff      	movs	r5, #255	; 0xff
    1bbc:	e76d      	b.n	1a9a <__aeabi_fmul+0x92>
    1bbe:	4306      	orrs	r6, r0
    1bc0:	0276      	lsls	r6, r6, #9
    1bc2:	0a76      	lsrs	r6, r6, #9
    1bc4:	25ff      	movs	r5, #255	; 0xff
    1bc6:	e768      	b.n	1a9a <__aeabi_fmul+0x92>
    1bc8:	2401      	movs	r4, #1
    1bca:	1a61      	subs	r1, r4, r1
    1bcc:	291b      	cmp	r1, #27
    1bce:	dd05      	ble.n	1bdc <__aeabi_fmul+0x1d4>
    1bd0:	4014      	ands	r4, r2
    1bd2:	2500      	movs	r5, #0
    1bd4:	2600      	movs	r6, #0
    1bd6:	e760      	b.n	1a9a <__aeabi_fmul+0x92>
    1bd8:	4663      	mov	r3, ip
    1bda:	e7cb      	b.n	1b74 <__aeabi_fmul+0x16c>
    1bdc:	002e      	movs	r6, r5
    1bde:	2320      	movs	r3, #32
    1be0:	40ce      	lsrs	r6, r1
    1be2:	1a59      	subs	r1, r3, r1
    1be4:	408d      	lsls	r5, r1
    1be6:	1e6b      	subs	r3, r5, #1
    1be8:	419d      	sbcs	r5, r3
    1bea:	432e      	orrs	r6, r5
    1bec:	0773      	lsls	r3, r6, #29
    1bee:	d004      	beq.n	1bfa <__aeabi_fmul+0x1f2>
    1bf0:	230f      	movs	r3, #15
    1bf2:	4033      	ands	r3, r6
    1bf4:	2b04      	cmp	r3, #4
    1bf6:	d000      	beq.n	1bfa <__aeabi_fmul+0x1f2>
    1bf8:	3604      	adds	r6, #4
    1bfa:	0173      	lsls	r3, r6, #5
    1bfc:	d504      	bpl.n	1c08 <__aeabi_fmul+0x200>
    1bfe:	2401      	movs	r4, #1
    1c00:	2501      	movs	r5, #1
    1c02:	4014      	ands	r4, r2
    1c04:	2600      	movs	r6, #0
    1c06:	e748      	b.n	1a9a <__aeabi_fmul+0x92>
    1c08:	2401      	movs	r4, #1
    1c0a:	01b6      	lsls	r6, r6, #6
    1c0c:	0a76      	lsrs	r6, r6, #9
    1c0e:	4014      	ands	r4, r2
    1c10:	2500      	movs	r5, #0
    1c12:	e742      	b.n	1a9a <__aeabi_fmul+0x92>
    1c14:	2680      	movs	r6, #128	; 0x80
    1c16:	2401      	movs	r4, #1
    1c18:	03f6      	lsls	r6, r6, #15
    1c1a:	432e      	orrs	r6, r5
    1c1c:	0276      	lsls	r6, r6, #9
    1c1e:	0a76      	lsrs	r6, r6, #9
    1c20:	4014      	ands	r4, r2
    1c22:	25ff      	movs	r5, #255	; 0xff
    1c24:	e739      	b.n	1a9a <__aeabi_fmul+0x92>
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	000033b0 	.word	0x000033b0
    1c2c:	f7ffffff 	.word	0xf7ffffff

00001c30 <__aeabi_fsub>:
    1c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c32:	024a      	lsls	r2, r1, #9
    1c34:	004e      	lsls	r6, r1, #1
    1c36:	0243      	lsls	r3, r0, #9
    1c38:	0044      	lsls	r4, r0, #1
    1c3a:	0e24      	lsrs	r4, r4, #24
    1c3c:	0fc5      	lsrs	r5, r0, #31
    1c3e:	099b      	lsrs	r3, r3, #6
    1c40:	0e36      	lsrs	r6, r6, #24
    1c42:	0fc9      	lsrs	r1, r1, #31
    1c44:	0992      	lsrs	r2, r2, #6
    1c46:	2eff      	cmp	r6, #255	; 0xff
    1c48:	d100      	bne.n	1c4c <__aeabi_fsub+0x1c>
    1c4a:	e083      	b.n	1d54 <__aeabi_fsub+0x124>
    1c4c:	2001      	movs	r0, #1
    1c4e:	4041      	eors	r1, r0
    1c50:	1ba0      	subs	r0, r4, r6
    1c52:	42a9      	cmp	r1, r5
    1c54:	d05c      	beq.n	1d10 <__aeabi_fsub+0xe0>
    1c56:	2800      	cmp	r0, #0
    1c58:	dc00      	bgt.n	1c5c <__aeabi_fsub+0x2c>
    1c5a:	e095      	b.n	1d88 <__aeabi_fsub+0x158>
    1c5c:	2e00      	cmp	r6, #0
    1c5e:	d11c      	bne.n	1c9a <__aeabi_fsub+0x6a>
    1c60:	2a00      	cmp	r2, #0
    1c62:	d000      	beq.n	1c66 <__aeabi_fsub+0x36>
    1c64:	e081      	b.n	1d6a <__aeabi_fsub+0x13a>
    1c66:	075a      	lsls	r2, r3, #29
    1c68:	d004      	beq.n	1c74 <__aeabi_fsub+0x44>
    1c6a:	220f      	movs	r2, #15
    1c6c:	401a      	ands	r2, r3
    1c6e:	2a04      	cmp	r2, #4
    1c70:	d000      	beq.n	1c74 <__aeabi_fsub+0x44>
    1c72:	3304      	adds	r3, #4
    1c74:	015a      	lsls	r2, r3, #5
    1c76:	d53b      	bpl.n	1cf0 <__aeabi_fsub+0xc0>
    1c78:	3401      	adds	r4, #1
    1c7a:	2cff      	cmp	r4, #255	; 0xff
    1c7c:	d100      	bne.n	1c80 <__aeabi_fsub+0x50>
    1c7e:	e091      	b.n	1da4 <__aeabi_fsub+0x174>
    1c80:	2001      	movs	r0, #1
    1c82:	019b      	lsls	r3, r3, #6
    1c84:	0a5b      	lsrs	r3, r3, #9
    1c86:	b2e4      	uxtb	r4, r4
    1c88:	4005      	ands	r5, r0
    1c8a:	025b      	lsls	r3, r3, #9
    1c8c:	05e4      	lsls	r4, r4, #23
    1c8e:	0a5b      	lsrs	r3, r3, #9
    1c90:	07ed      	lsls	r5, r5, #31
    1c92:	4323      	orrs	r3, r4
    1c94:	432b      	orrs	r3, r5
    1c96:	0018      	movs	r0, r3
    1c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c9a:	2cff      	cmp	r4, #255	; 0xff
    1c9c:	d0e3      	beq.n	1c66 <__aeabi_fsub+0x36>
    1c9e:	2180      	movs	r1, #128	; 0x80
    1ca0:	04c9      	lsls	r1, r1, #19
    1ca2:	430a      	orrs	r2, r1
    1ca4:	281b      	cmp	r0, #27
    1ca6:	dd00      	ble.n	1caa <__aeabi_fsub+0x7a>
    1ca8:	e090      	b.n	1dcc <__aeabi_fsub+0x19c>
    1caa:	0016      	movs	r6, r2
    1cac:	2120      	movs	r1, #32
    1cae:	40c6      	lsrs	r6, r0
    1cb0:	1a08      	subs	r0, r1, r0
    1cb2:	4082      	lsls	r2, r0
    1cb4:	1e51      	subs	r1, r2, #1
    1cb6:	418a      	sbcs	r2, r1
    1cb8:	4332      	orrs	r2, r6
    1cba:	1a9b      	subs	r3, r3, r2
    1cbc:	015a      	lsls	r2, r3, #5
    1cbe:	d515      	bpl.n	1cec <__aeabi_fsub+0xbc>
    1cc0:	019b      	lsls	r3, r3, #6
    1cc2:	099e      	lsrs	r6, r3, #6
    1cc4:	0030      	movs	r0, r6
    1cc6:	f001 f94d 	bl	2f64 <__clzsi2>
    1cca:	3805      	subs	r0, #5
    1ccc:	4086      	lsls	r6, r0
    1cce:	4284      	cmp	r4, r0
    1cd0:	dc6c      	bgt.n	1dac <__aeabi_fsub+0x17c>
    1cd2:	1b04      	subs	r4, r0, r4
    1cd4:	0033      	movs	r3, r6
    1cd6:	2020      	movs	r0, #32
    1cd8:	3401      	adds	r4, #1
    1cda:	40e3      	lsrs	r3, r4
    1cdc:	1b04      	subs	r4, r0, r4
    1cde:	40a6      	lsls	r6, r4
    1ce0:	1e72      	subs	r2, r6, #1
    1ce2:	4196      	sbcs	r6, r2
    1ce4:	2400      	movs	r4, #0
    1ce6:	4333      	orrs	r3, r6
    1ce8:	e7bd      	b.n	1c66 <__aeabi_fsub+0x36>
    1cea:	000d      	movs	r5, r1
    1cec:	075a      	lsls	r2, r3, #29
    1cee:	d1bc      	bne.n	1c6a <__aeabi_fsub+0x3a>
    1cf0:	08df      	lsrs	r7, r3, #3
    1cf2:	2301      	movs	r3, #1
    1cf4:	401d      	ands	r5, r3
    1cf6:	2cff      	cmp	r4, #255	; 0xff
    1cf8:	d133      	bne.n	1d62 <__aeabi_fsub+0x132>
    1cfa:	2f00      	cmp	r7, #0
    1cfc:	d100      	bne.n	1d00 <__aeabi_fsub+0xd0>
    1cfe:	e090      	b.n	1e22 <__aeabi_fsub+0x1f2>
    1d00:	2280      	movs	r2, #128	; 0x80
    1d02:	03d2      	lsls	r2, r2, #15
    1d04:	0013      	movs	r3, r2
    1d06:	433b      	orrs	r3, r7
    1d08:	025b      	lsls	r3, r3, #9
    1d0a:	0a5b      	lsrs	r3, r3, #9
    1d0c:	24ff      	movs	r4, #255	; 0xff
    1d0e:	e7bc      	b.n	1c8a <__aeabi_fsub+0x5a>
    1d10:	2800      	cmp	r0, #0
    1d12:	dd4f      	ble.n	1db4 <__aeabi_fsub+0x184>
    1d14:	2e00      	cmp	r6, #0
    1d16:	d02e      	beq.n	1d76 <__aeabi_fsub+0x146>
    1d18:	2cff      	cmp	r4, #255	; 0xff
    1d1a:	d0a4      	beq.n	1c66 <__aeabi_fsub+0x36>
    1d1c:	2580      	movs	r5, #128	; 0x80
    1d1e:	04ed      	lsls	r5, r5, #19
    1d20:	432a      	orrs	r2, r5
    1d22:	281b      	cmp	r0, #27
    1d24:	dd00      	ble.n	1d28 <__aeabi_fsub+0xf8>
    1d26:	e097      	b.n	1e58 <__aeabi_fsub+0x228>
    1d28:	0016      	movs	r6, r2
    1d2a:	2520      	movs	r5, #32
    1d2c:	40c6      	lsrs	r6, r0
    1d2e:	1a28      	subs	r0, r5, r0
    1d30:	4082      	lsls	r2, r0
    1d32:	1e50      	subs	r0, r2, #1
    1d34:	4182      	sbcs	r2, r0
    1d36:	4332      	orrs	r2, r6
    1d38:	189b      	adds	r3, r3, r2
    1d3a:	015a      	lsls	r2, r3, #5
    1d3c:	d5d5      	bpl.n	1cea <__aeabi_fsub+0xba>
    1d3e:	3401      	adds	r4, #1
    1d40:	2cff      	cmp	r4, #255	; 0xff
    1d42:	d06d      	beq.n	1e20 <__aeabi_fsub+0x1f0>
    1d44:	2201      	movs	r2, #1
    1d46:	487b      	ldr	r0, [pc, #492]	; (1f34 <__aeabi_fsub+0x304>)
    1d48:	401a      	ands	r2, r3
    1d4a:	085b      	lsrs	r3, r3, #1
    1d4c:	4003      	ands	r3, r0
    1d4e:	4313      	orrs	r3, r2
    1d50:	000d      	movs	r5, r1
    1d52:	e788      	b.n	1c66 <__aeabi_fsub+0x36>
    1d54:	2a00      	cmp	r2, #0
    1d56:	d000      	beq.n	1d5a <__aeabi_fsub+0x12a>
    1d58:	e77a      	b.n	1c50 <__aeabi_fsub+0x20>
    1d5a:	e777      	b.n	1c4c <__aeabi_fsub+0x1c>
    1d5c:	1e03      	subs	r3, r0, #0
    1d5e:	d1c5      	bne.n	1cec <__aeabi_fsub+0xbc>
    1d60:	2500      	movs	r5, #0
    1d62:	027b      	lsls	r3, r7, #9
    1d64:	0a5b      	lsrs	r3, r3, #9
    1d66:	b2e4      	uxtb	r4, r4
    1d68:	e78f      	b.n	1c8a <__aeabi_fsub+0x5a>
    1d6a:	3801      	subs	r0, #1
    1d6c:	2800      	cmp	r0, #0
    1d6e:	d0a4      	beq.n	1cba <__aeabi_fsub+0x8a>
    1d70:	2cff      	cmp	r4, #255	; 0xff
    1d72:	d197      	bne.n	1ca4 <__aeabi_fsub+0x74>
    1d74:	e777      	b.n	1c66 <__aeabi_fsub+0x36>
    1d76:	2a00      	cmp	r2, #0
    1d78:	d100      	bne.n	1d7c <__aeabi_fsub+0x14c>
    1d7a:	e774      	b.n	1c66 <__aeabi_fsub+0x36>
    1d7c:	3801      	subs	r0, #1
    1d7e:	2800      	cmp	r0, #0
    1d80:	d0da      	beq.n	1d38 <__aeabi_fsub+0x108>
    1d82:	2cff      	cmp	r4, #255	; 0xff
    1d84:	d1cd      	bne.n	1d22 <__aeabi_fsub+0xf2>
    1d86:	e76e      	b.n	1c66 <__aeabi_fsub+0x36>
    1d88:	2800      	cmp	r0, #0
    1d8a:	d121      	bne.n	1dd0 <__aeabi_fsub+0x1a0>
    1d8c:	1c60      	adds	r0, r4, #1
    1d8e:	b2c0      	uxtb	r0, r0
    1d90:	2801      	cmp	r0, #1
    1d92:	dd58      	ble.n	1e46 <__aeabi_fsub+0x216>
    1d94:	2780      	movs	r7, #128	; 0x80
    1d96:	1a9e      	subs	r6, r3, r2
    1d98:	04ff      	lsls	r7, r7, #19
    1d9a:	4037      	ands	r7, r6
    1d9c:	d02f      	beq.n	1dfe <__aeabi_fsub+0x1ce>
    1d9e:	1ad6      	subs	r6, r2, r3
    1da0:	000d      	movs	r5, r1
    1da2:	e78f      	b.n	1cc4 <__aeabi_fsub+0x94>
    1da4:	2301      	movs	r3, #1
    1da6:	401d      	ands	r5, r3
    1da8:	2300      	movs	r3, #0
    1daa:	e76e      	b.n	1c8a <__aeabi_fsub+0x5a>
    1dac:	4b62      	ldr	r3, [pc, #392]	; (1f38 <__aeabi_fsub+0x308>)
    1dae:	1a24      	subs	r4, r4, r0
    1db0:	4033      	ands	r3, r6
    1db2:	e758      	b.n	1c66 <__aeabi_fsub+0x36>
    1db4:	2800      	cmp	r0, #0
    1db6:	d151      	bne.n	1e5c <__aeabi_fsub+0x22c>
    1db8:	1c60      	adds	r0, r4, #1
    1dba:	b2c6      	uxtb	r6, r0
    1dbc:	2e01      	cmp	r6, #1
    1dbe:	dd33      	ble.n	1e28 <__aeabi_fsub+0x1f8>
    1dc0:	28ff      	cmp	r0, #255	; 0xff
    1dc2:	d02d      	beq.n	1e20 <__aeabi_fsub+0x1f0>
    1dc4:	189b      	adds	r3, r3, r2
    1dc6:	085b      	lsrs	r3, r3, #1
    1dc8:	0004      	movs	r4, r0
    1dca:	e74c      	b.n	1c66 <__aeabi_fsub+0x36>
    1dcc:	2201      	movs	r2, #1
    1dce:	e774      	b.n	1cba <__aeabi_fsub+0x8a>
    1dd0:	2c00      	cmp	r4, #0
    1dd2:	d01a      	beq.n	1e0a <__aeabi_fsub+0x1da>
    1dd4:	2eff      	cmp	r6, #255	; 0xff
    1dd6:	d01f      	beq.n	1e18 <__aeabi_fsub+0x1e8>
    1dd8:	2480      	movs	r4, #128	; 0x80
    1dda:	04e4      	lsls	r4, r4, #19
    1ddc:	4240      	negs	r0, r0
    1dde:	4323      	orrs	r3, r4
    1de0:	281b      	cmp	r0, #27
    1de2:	dd00      	ble.n	1de6 <__aeabi_fsub+0x1b6>
    1de4:	e096      	b.n	1f14 <__aeabi_fsub+0x2e4>
    1de6:	001d      	movs	r5, r3
    1de8:	2420      	movs	r4, #32
    1dea:	40c5      	lsrs	r5, r0
    1dec:	1a20      	subs	r0, r4, r0
    1dee:	4083      	lsls	r3, r0
    1df0:	1e58      	subs	r0, r3, #1
    1df2:	4183      	sbcs	r3, r0
    1df4:	432b      	orrs	r3, r5
    1df6:	1ad3      	subs	r3, r2, r3
    1df8:	0034      	movs	r4, r6
    1dfa:	000d      	movs	r5, r1
    1dfc:	e75e      	b.n	1cbc <__aeabi_fsub+0x8c>
    1dfe:	2e00      	cmp	r6, #0
    1e00:	d000      	beq.n	1e04 <__aeabi_fsub+0x1d4>
    1e02:	e75f      	b.n	1cc4 <__aeabi_fsub+0x94>
    1e04:	2500      	movs	r5, #0
    1e06:	2400      	movs	r4, #0
    1e08:	e7ab      	b.n	1d62 <__aeabi_fsub+0x132>
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d044      	beq.n	1e98 <__aeabi_fsub+0x268>
    1e0e:	43c0      	mvns	r0, r0
    1e10:	2800      	cmp	r0, #0
    1e12:	d0f0      	beq.n	1df6 <__aeabi_fsub+0x1c6>
    1e14:	2eff      	cmp	r6, #255	; 0xff
    1e16:	d1e3      	bne.n	1de0 <__aeabi_fsub+0x1b0>
    1e18:	0013      	movs	r3, r2
    1e1a:	24ff      	movs	r4, #255	; 0xff
    1e1c:	000d      	movs	r5, r1
    1e1e:	e722      	b.n	1c66 <__aeabi_fsub+0x36>
    1e20:	000d      	movs	r5, r1
    1e22:	24ff      	movs	r4, #255	; 0xff
    1e24:	2300      	movs	r3, #0
    1e26:	e730      	b.n	1c8a <__aeabi_fsub+0x5a>
    1e28:	2c00      	cmp	r4, #0
    1e2a:	d15d      	bne.n	1ee8 <__aeabi_fsub+0x2b8>
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d07d      	beq.n	1f2c <__aeabi_fsub+0x2fc>
    1e30:	2a00      	cmp	r2, #0
    1e32:	d100      	bne.n	1e36 <__aeabi_fsub+0x206>
    1e34:	e717      	b.n	1c66 <__aeabi_fsub+0x36>
    1e36:	189b      	adds	r3, r3, r2
    1e38:	015a      	lsls	r2, r3, #5
    1e3a:	d400      	bmi.n	1e3e <__aeabi_fsub+0x20e>
    1e3c:	e756      	b.n	1cec <__aeabi_fsub+0xbc>
    1e3e:	4a3e      	ldr	r2, [pc, #248]	; (1f38 <__aeabi_fsub+0x308>)
    1e40:	0004      	movs	r4, r0
    1e42:	4013      	ands	r3, r2
    1e44:	e70f      	b.n	1c66 <__aeabi_fsub+0x36>
    1e46:	2c00      	cmp	r4, #0
    1e48:	d11e      	bne.n	1e88 <__aeabi_fsub+0x258>
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d12f      	bne.n	1eae <__aeabi_fsub+0x27e>
    1e4e:	2a00      	cmp	r2, #0
    1e50:	d065      	beq.n	1f1e <__aeabi_fsub+0x2ee>
    1e52:	0013      	movs	r3, r2
    1e54:	000d      	movs	r5, r1
    1e56:	e706      	b.n	1c66 <__aeabi_fsub+0x36>
    1e58:	2201      	movs	r2, #1
    1e5a:	e76d      	b.n	1d38 <__aeabi_fsub+0x108>
    1e5c:	2c00      	cmp	r4, #0
    1e5e:	d11f      	bne.n	1ea0 <__aeabi_fsub+0x270>
    1e60:	2b00      	cmp	r3, #0
    1e62:	d059      	beq.n	1f18 <__aeabi_fsub+0x2e8>
    1e64:	43c0      	mvns	r0, r0
    1e66:	2800      	cmp	r0, #0
    1e68:	d00b      	beq.n	1e82 <__aeabi_fsub+0x252>
    1e6a:	2eff      	cmp	r6, #255	; 0xff
    1e6c:	d04f      	beq.n	1f0e <__aeabi_fsub+0x2de>
    1e6e:	281b      	cmp	r0, #27
    1e70:	dc5e      	bgt.n	1f30 <__aeabi_fsub+0x300>
    1e72:	001d      	movs	r5, r3
    1e74:	2420      	movs	r4, #32
    1e76:	40c5      	lsrs	r5, r0
    1e78:	1a20      	subs	r0, r4, r0
    1e7a:	4083      	lsls	r3, r0
    1e7c:	1e58      	subs	r0, r3, #1
    1e7e:	4183      	sbcs	r3, r0
    1e80:	432b      	orrs	r3, r5
    1e82:	189b      	adds	r3, r3, r2
    1e84:	0034      	movs	r4, r6
    1e86:	e758      	b.n	1d3a <__aeabi_fsub+0x10a>
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d11c      	bne.n	1ec6 <__aeabi_fsub+0x296>
    1e8c:	2a00      	cmp	r2, #0
    1e8e:	d049      	beq.n	1f24 <__aeabi_fsub+0x2f4>
    1e90:	0013      	movs	r3, r2
    1e92:	000d      	movs	r5, r1
    1e94:	24ff      	movs	r4, #255	; 0xff
    1e96:	e6e6      	b.n	1c66 <__aeabi_fsub+0x36>
    1e98:	0013      	movs	r3, r2
    1e9a:	0034      	movs	r4, r6
    1e9c:	000d      	movs	r5, r1
    1e9e:	e6e2      	b.n	1c66 <__aeabi_fsub+0x36>
    1ea0:	2eff      	cmp	r6, #255	; 0xff
    1ea2:	d034      	beq.n	1f0e <__aeabi_fsub+0x2de>
    1ea4:	2480      	movs	r4, #128	; 0x80
    1ea6:	04e4      	lsls	r4, r4, #19
    1ea8:	4240      	negs	r0, r0
    1eaa:	4323      	orrs	r3, r4
    1eac:	e7df      	b.n	1e6e <__aeabi_fsub+0x23e>
    1eae:	2a00      	cmp	r2, #0
    1eb0:	d100      	bne.n	1eb4 <__aeabi_fsub+0x284>
    1eb2:	e6d8      	b.n	1c66 <__aeabi_fsub+0x36>
    1eb4:	2780      	movs	r7, #128	; 0x80
    1eb6:	1a98      	subs	r0, r3, r2
    1eb8:	04ff      	lsls	r7, r7, #19
    1eba:	4007      	ands	r7, r0
    1ebc:	d100      	bne.n	1ec0 <__aeabi_fsub+0x290>
    1ebe:	e74d      	b.n	1d5c <__aeabi_fsub+0x12c>
    1ec0:	1ad3      	subs	r3, r2, r3
    1ec2:	000d      	movs	r5, r1
    1ec4:	e6cf      	b.n	1c66 <__aeabi_fsub+0x36>
    1ec6:	24ff      	movs	r4, #255	; 0xff
    1ec8:	2a00      	cmp	r2, #0
    1eca:	d100      	bne.n	1ece <__aeabi_fsub+0x29e>
    1ecc:	e6cb      	b.n	1c66 <__aeabi_fsub+0x36>
    1ece:	2080      	movs	r0, #128	; 0x80
    1ed0:	08db      	lsrs	r3, r3, #3
    1ed2:	03c0      	lsls	r0, r0, #15
    1ed4:	4203      	tst	r3, r0
    1ed6:	d004      	beq.n	1ee2 <__aeabi_fsub+0x2b2>
    1ed8:	08d2      	lsrs	r2, r2, #3
    1eda:	4202      	tst	r2, r0
    1edc:	d101      	bne.n	1ee2 <__aeabi_fsub+0x2b2>
    1ede:	0013      	movs	r3, r2
    1ee0:	000d      	movs	r5, r1
    1ee2:	00db      	lsls	r3, r3, #3
    1ee4:	24ff      	movs	r4, #255	; 0xff
    1ee6:	e6be      	b.n	1c66 <__aeabi_fsub+0x36>
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d010      	beq.n	1f0e <__aeabi_fsub+0x2de>
    1eec:	24ff      	movs	r4, #255	; 0xff
    1eee:	2a00      	cmp	r2, #0
    1ef0:	d100      	bne.n	1ef4 <__aeabi_fsub+0x2c4>
    1ef2:	e6b8      	b.n	1c66 <__aeabi_fsub+0x36>
    1ef4:	2080      	movs	r0, #128	; 0x80
    1ef6:	08db      	lsrs	r3, r3, #3
    1ef8:	03c0      	lsls	r0, r0, #15
    1efa:	4203      	tst	r3, r0
    1efc:	d003      	beq.n	1f06 <__aeabi_fsub+0x2d6>
    1efe:	08d2      	lsrs	r2, r2, #3
    1f00:	4202      	tst	r2, r0
    1f02:	d100      	bne.n	1f06 <__aeabi_fsub+0x2d6>
    1f04:	0013      	movs	r3, r2
    1f06:	00db      	lsls	r3, r3, #3
    1f08:	000d      	movs	r5, r1
    1f0a:	24ff      	movs	r4, #255	; 0xff
    1f0c:	e6ab      	b.n	1c66 <__aeabi_fsub+0x36>
    1f0e:	0013      	movs	r3, r2
    1f10:	24ff      	movs	r4, #255	; 0xff
    1f12:	e6a8      	b.n	1c66 <__aeabi_fsub+0x36>
    1f14:	2301      	movs	r3, #1
    1f16:	e76e      	b.n	1df6 <__aeabi_fsub+0x1c6>
    1f18:	0013      	movs	r3, r2
    1f1a:	0034      	movs	r4, r6
    1f1c:	e6a3      	b.n	1c66 <__aeabi_fsub+0x36>
    1f1e:	2700      	movs	r7, #0
    1f20:	2500      	movs	r5, #0
    1f22:	e71e      	b.n	1d62 <__aeabi_fsub+0x132>
    1f24:	2780      	movs	r7, #128	; 0x80
    1f26:	2500      	movs	r5, #0
    1f28:	03ff      	lsls	r7, r7, #15
    1f2a:	e6e9      	b.n	1d00 <__aeabi_fsub+0xd0>
    1f2c:	0013      	movs	r3, r2
    1f2e:	e69a      	b.n	1c66 <__aeabi_fsub+0x36>
    1f30:	2301      	movs	r3, #1
    1f32:	e7a6      	b.n	1e82 <__aeabi_fsub+0x252>
    1f34:	7dffffff 	.word	0x7dffffff
    1f38:	fbffffff 	.word	0xfbffffff

00001f3c <__aeabi_ui2f>:
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	1e04      	subs	r4, r0, #0
    1f40:	d028      	beq.n	1f94 <__aeabi_ui2f+0x58>
    1f42:	f001 f80f 	bl	2f64 <__clzsi2>
    1f46:	239e      	movs	r3, #158	; 0x9e
    1f48:	1a1b      	subs	r3, r3, r0
    1f4a:	2b96      	cmp	r3, #150	; 0x96
    1f4c:	dc0a      	bgt.n	1f64 <__aeabi_ui2f+0x28>
    1f4e:	2296      	movs	r2, #150	; 0x96
    1f50:	1ad2      	subs	r2, r2, r3
    1f52:	4094      	lsls	r4, r2
    1f54:	0262      	lsls	r2, r4, #9
    1f56:	0a52      	lsrs	r2, r2, #9
    1f58:	b2d8      	uxtb	r0, r3
    1f5a:	0252      	lsls	r2, r2, #9
    1f5c:	0a52      	lsrs	r2, r2, #9
    1f5e:	05c0      	lsls	r0, r0, #23
    1f60:	4310      	orrs	r0, r2
    1f62:	bd70      	pop	{r4, r5, r6, pc}
    1f64:	2b99      	cmp	r3, #153	; 0x99
    1f66:	dc18      	bgt.n	1f9a <__aeabi_ui2f+0x5e>
    1f68:	2299      	movs	r2, #153	; 0x99
    1f6a:	1ad2      	subs	r2, r2, r3
    1f6c:	4094      	lsls	r4, r2
    1f6e:	4a11      	ldr	r2, [pc, #68]	; (1fb4 <__aeabi_ui2f+0x78>)
    1f70:	4022      	ands	r2, r4
    1f72:	0761      	lsls	r1, r4, #29
    1f74:	d004      	beq.n	1f80 <__aeabi_ui2f+0x44>
    1f76:	210f      	movs	r1, #15
    1f78:	400c      	ands	r4, r1
    1f7a:	2c04      	cmp	r4, #4
    1f7c:	d000      	beq.n	1f80 <__aeabi_ui2f+0x44>
    1f7e:	3204      	adds	r2, #4
    1f80:	0151      	lsls	r1, r2, #5
    1f82:	d503      	bpl.n	1f8c <__aeabi_ui2f+0x50>
    1f84:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <__aeabi_ui2f+0x78>)
    1f86:	401a      	ands	r2, r3
    1f88:	239f      	movs	r3, #159	; 0x9f
    1f8a:	1a1b      	subs	r3, r3, r0
    1f8c:	0192      	lsls	r2, r2, #6
    1f8e:	0a52      	lsrs	r2, r2, #9
    1f90:	b2d8      	uxtb	r0, r3
    1f92:	e7e2      	b.n	1f5a <__aeabi_ui2f+0x1e>
    1f94:	2000      	movs	r0, #0
    1f96:	2200      	movs	r2, #0
    1f98:	e7df      	b.n	1f5a <__aeabi_ui2f+0x1e>
    1f9a:	2205      	movs	r2, #5
    1f9c:	0025      	movs	r5, r4
    1f9e:	1a12      	subs	r2, r2, r0
    1fa0:	21b9      	movs	r1, #185	; 0xb9
    1fa2:	40d5      	lsrs	r5, r2
    1fa4:	0022      	movs	r2, r4
    1fa6:	1ac9      	subs	r1, r1, r3
    1fa8:	408a      	lsls	r2, r1
    1faa:	1e54      	subs	r4, r2, #1
    1fac:	41a2      	sbcs	r2, r4
    1fae:	002c      	movs	r4, r5
    1fb0:	4314      	orrs	r4, r2
    1fb2:	e7dc      	b.n	1f6e <__aeabi_ui2f+0x32>
    1fb4:	fbffffff 	.word	0xfbffffff

00001fb8 <__aeabi_dadd>:
    1fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fba:	4656      	mov	r6, sl
    1fbc:	465f      	mov	r7, fp
    1fbe:	464d      	mov	r5, r9
    1fc0:	4644      	mov	r4, r8
    1fc2:	b4f0      	push	{r4, r5, r6, r7}
    1fc4:	000f      	movs	r7, r1
    1fc6:	0ffd      	lsrs	r5, r7, #31
    1fc8:	46aa      	mov	sl, r5
    1fca:	0309      	lsls	r1, r1, #12
    1fcc:	007c      	lsls	r4, r7, #1
    1fce:	002e      	movs	r6, r5
    1fd0:	005f      	lsls	r7, r3, #1
    1fd2:	0f45      	lsrs	r5, r0, #29
    1fd4:	0a49      	lsrs	r1, r1, #9
    1fd6:	0d7f      	lsrs	r7, r7, #21
    1fd8:	4329      	orrs	r1, r5
    1fda:	00c5      	lsls	r5, r0, #3
    1fdc:	0318      	lsls	r0, r3, #12
    1fde:	46bc      	mov	ip, r7
    1fe0:	0a40      	lsrs	r0, r0, #9
    1fe2:	0f57      	lsrs	r7, r2, #29
    1fe4:	0d64      	lsrs	r4, r4, #21
    1fe6:	0fdb      	lsrs	r3, r3, #31
    1fe8:	4338      	orrs	r0, r7
    1fea:	00d2      	lsls	r2, r2, #3
    1fec:	459a      	cmp	sl, r3
    1fee:	d100      	bne.n	1ff2 <__aeabi_dadd+0x3a>
    1ff0:	e0aa      	b.n	2148 <STACK_SIZE+0x148>
    1ff2:	4666      	mov	r6, ip
    1ff4:	1ba6      	subs	r6, r4, r6
    1ff6:	2e00      	cmp	r6, #0
    1ff8:	dc00      	bgt.n	1ffc <__aeabi_dadd+0x44>
    1ffa:	e0ff      	b.n	21fc <STACK_SIZE+0x1fc>
    1ffc:	4663      	mov	r3, ip
    1ffe:	2b00      	cmp	r3, #0
    2000:	d139      	bne.n	2076 <STACK_SIZE+0x76>
    2002:	0003      	movs	r3, r0
    2004:	4313      	orrs	r3, r2
    2006:	d000      	beq.n	200a <STACK_SIZE+0xa>
    2008:	e0d9      	b.n	21be <STACK_SIZE+0x1be>
    200a:	076b      	lsls	r3, r5, #29
    200c:	d009      	beq.n	2022 <STACK_SIZE+0x22>
    200e:	230f      	movs	r3, #15
    2010:	402b      	ands	r3, r5
    2012:	2b04      	cmp	r3, #4
    2014:	d005      	beq.n	2022 <STACK_SIZE+0x22>
    2016:	1d2b      	adds	r3, r5, #4
    2018:	42ab      	cmp	r3, r5
    201a:	41ad      	sbcs	r5, r5
    201c:	426d      	negs	r5, r5
    201e:	1949      	adds	r1, r1, r5
    2020:	001d      	movs	r5, r3
    2022:	020b      	lsls	r3, r1, #8
    2024:	d400      	bmi.n	2028 <STACK_SIZE+0x28>
    2026:	e082      	b.n	212e <STACK_SIZE+0x12e>
    2028:	4bca      	ldr	r3, [pc, #808]	; (2354 <STACK_SIZE+0x354>)
    202a:	3401      	adds	r4, #1
    202c:	429c      	cmp	r4, r3
    202e:	d100      	bne.n	2032 <STACK_SIZE+0x32>
    2030:	e0fe      	b.n	2230 <STACK_SIZE+0x230>
    2032:	000a      	movs	r2, r1
    2034:	4656      	mov	r6, sl
    2036:	4bc8      	ldr	r3, [pc, #800]	; (2358 <STACK_SIZE+0x358>)
    2038:	08ed      	lsrs	r5, r5, #3
    203a:	401a      	ands	r2, r3
    203c:	0750      	lsls	r0, r2, #29
    203e:	0564      	lsls	r4, r4, #21
    2040:	0252      	lsls	r2, r2, #9
    2042:	4305      	orrs	r5, r0
    2044:	0b12      	lsrs	r2, r2, #12
    2046:	0d64      	lsrs	r4, r4, #21
    2048:	2100      	movs	r1, #0
    204a:	0312      	lsls	r2, r2, #12
    204c:	0d0b      	lsrs	r3, r1, #20
    204e:	051b      	lsls	r3, r3, #20
    2050:	0564      	lsls	r4, r4, #21
    2052:	0b12      	lsrs	r2, r2, #12
    2054:	431a      	orrs	r2, r3
    2056:	0863      	lsrs	r3, r4, #1
    2058:	4cc0      	ldr	r4, [pc, #768]	; (235c <STACK_SIZE+0x35c>)
    205a:	07f6      	lsls	r6, r6, #31
    205c:	4014      	ands	r4, r2
    205e:	431c      	orrs	r4, r3
    2060:	0064      	lsls	r4, r4, #1
    2062:	0864      	lsrs	r4, r4, #1
    2064:	4334      	orrs	r4, r6
    2066:	0028      	movs	r0, r5
    2068:	0021      	movs	r1, r4
    206a:	bc3c      	pop	{r2, r3, r4, r5}
    206c:	4690      	mov	r8, r2
    206e:	4699      	mov	r9, r3
    2070:	46a2      	mov	sl, r4
    2072:	46ab      	mov	fp, r5
    2074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2076:	4bb7      	ldr	r3, [pc, #732]	; (2354 <STACK_SIZE+0x354>)
    2078:	429c      	cmp	r4, r3
    207a:	d0c6      	beq.n	200a <STACK_SIZE+0xa>
    207c:	2380      	movs	r3, #128	; 0x80
    207e:	041b      	lsls	r3, r3, #16
    2080:	4318      	orrs	r0, r3
    2082:	2e38      	cmp	r6, #56	; 0x38
    2084:	dd00      	ble.n	2088 <STACK_SIZE+0x88>
    2086:	e0eb      	b.n	2260 <STACK_SIZE+0x260>
    2088:	2e1f      	cmp	r6, #31
    208a:	dd00      	ble.n	208e <STACK_SIZE+0x8e>
    208c:	e11e      	b.n	22cc <STACK_SIZE+0x2cc>
    208e:	2320      	movs	r3, #32
    2090:	1b9b      	subs	r3, r3, r6
    2092:	469c      	mov	ip, r3
    2094:	0003      	movs	r3, r0
    2096:	4667      	mov	r7, ip
    2098:	40bb      	lsls	r3, r7
    209a:	4698      	mov	r8, r3
    209c:	0013      	movs	r3, r2
    209e:	4647      	mov	r7, r8
    20a0:	40f3      	lsrs	r3, r6
    20a2:	433b      	orrs	r3, r7
    20a4:	4667      	mov	r7, ip
    20a6:	40ba      	lsls	r2, r7
    20a8:	1e57      	subs	r7, r2, #1
    20aa:	41ba      	sbcs	r2, r7
    20ac:	4313      	orrs	r3, r2
    20ae:	0002      	movs	r2, r0
    20b0:	40f2      	lsrs	r2, r6
    20b2:	1aeb      	subs	r3, r5, r3
    20b4:	429d      	cmp	r5, r3
    20b6:	41b6      	sbcs	r6, r6
    20b8:	001d      	movs	r5, r3
    20ba:	1a8a      	subs	r2, r1, r2
    20bc:	4276      	negs	r6, r6
    20be:	1b91      	subs	r1, r2, r6
    20c0:	020b      	lsls	r3, r1, #8
    20c2:	d531      	bpl.n	2128 <STACK_SIZE+0x128>
    20c4:	024a      	lsls	r2, r1, #9
    20c6:	0a56      	lsrs	r6, r2, #9
    20c8:	2e00      	cmp	r6, #0
    20ca:	d100      	bne.n	20ce <STACK_SIZE+0xce>
    20cc:	e0b4      	b.n	2238 <STACK_SIZE+0x238>
    20ce:	0030      	movs	r0, r6
    20d0:	f000 ff48 	bl	2f64 <__clzsi2>
    20d4:	0003      	movs	r3, r0
    20d6:	3b08      	subs	r3, #8
    20d8:	2b1f      	cmp	r3, #31
    20da:	dd00      	ble.n	20de <STACK_SIZE+0xde>
    20dc:	e0b5      	b.n	224a <STACK_SIZE+0x24a>
    20de:	2220      	movs	r2, #32
    20e0:	0029      	movs	r1, r5
    20e2:	1ad2      	subs	r2, r2, r3
    20e4:	40d1      	lsrs	r1, r2
    20e6:	409e      	lsls	r6, r3
    20e8:	000a      	movs	r2, r1
    20ea:	409d      	lsls	r5, r3
    20ec:	4332      	orrs	r2, r6
    20ee:	429c      	cmp	r4, r3
    20f0:	dd00      	ble.n	20f4 <STACK_SIZE+0xf4>
    20f2:	e0b1      	b.n	2258 <STACK_SIZE+0x258>
    20f4:	1b1c      	subs	r4, r3, r4
    20f6:	1c63      	adds	r3, r4, #1
    20f8:	2b1f      	cmp	r3, #31
    20fa:	dd00      	ble.n	20fe <STACK_SIZE+0xfe>
    20fc:	e0d5      	b.n	22aa <STACK_SIZE+0x2aa>
    20fe:	2120      	movs	r1, #32
    2100:	0014      	movs	r4, r2
    2102:	0028      	movs	r0, r5
    2104:	1ac9      	subs	r1, r1, r3
    2106:	408c      	lsls	r4, r1
    2108:	40d8      	lsrs	r0, r3
    210a:	408d      	lsls	r5, r1
    210c:	4304      	orrs	r4, r0
    210e:	40da      	lsrs	r2, r3
    2110:	1e68      	subs	r0, r5, #1
    2112:	4185      	sbcs	r5, r0
    2114:	0011      	movs	r1, r2
    2116:	4325      	orrs	r5, r4
    2118:	2400      	movs	r4, #0
    211a:	e776      	b.n	200a <STACK_SIZE+0xa>
    211c:	4641      	mov	r1, r8
    211e:	4331      	orrs	r1, r6
    2120:	d100      	bne.n	2124 <STACK_SIZE+0x124>
    2122:	e234      	b.n	258e <STACK_SIZE+0x58e>
    2124:	0031      	movs	r1, r6
    2126:	4645      	mov	r5, r8
    2128:	076b      	lsls	r3, r5, #29
    212a:	d000      	beq.n	212e <STACK_SIZE+0x12e>
    212c:	e76f      	b.n	200e <STACK_SIZE+0xe>
    212e:	4656      	mov	r6, sl
    2130:	0748      	lsls	r0, r1, #29
    2132:	08ed      	lsrs	r5, r5, #3
    2134:	08c9      	lsrs	r1, r1, #3
    2136:	4305      	orrs	r5, r0
    2138:	4b86      	ldr	r3, [pc, #536]	; (2354 <STACK_SIZE+0x354>)
    213a:	429c      	cmp	r4, r3
    213c:	d035      	beq.n	21aa <STACK_SIZE+0x1aa>
    213e:	030a      	lsls	r2, r1, #12
    2140:	0564      	lsls	r4, r4, #21
    2142:	0b12      	lsrs	r2, r2, #12
    2144:	0d64      	lsrs	r4, r4, #21
    2146:	e77f      	b.n	2048 <STACK_SIZE+0x48>
    2148:	4663      	mov	r3, ip
    214a:	1ae3      	subs	r3, r4, r3
    214c:	469b      	mov	fp, r3
    214e:	2b00      	cmp	r3, #0
    2150:	dc00      	bgt.n	2154 <STACK_SIZE+0x154>
    2152:	e08b      	b.n	226c <STACK_SIZE+0x26c>
    2154:	4667      	mov	r7, ip
    2156:	2f00      	cmp	r7, #0
    2158:	d03c      	beq.n	21d4 <STACK_SIZE+0x1d4>
    215a:	4f7e      	ldr	r7, [pc, #504]	; (2354 <STACK_SIZE+0x354>)
    215c:	42bc      	cmp	r4, r7
    215e:	d100      	bne.n	2162 <STACK_SIZE+0x162>
    2160:	e753      	b.n	200a <STACK_SIZE+0xa>
    2162:	2780      	movs	r7, #128	; 0x80
    2164:	043f      	lsls	r7, r7, #16
    2166:	4338      	orrs	r0, r7
    2168:	465b      	mov	r3, fp
    216a:	2b38      	cmp	r3, #56	; 0x38
    216c:	dc00      	bgt.n	2170 <STACK_SIZE+0x170>
    216e:	e0f7      	b.n	2360 <STACK_SIZE+0x360>
    2170:	4302      	orrs	r2, r0
    2172:	1e50      	subs	r0, r2, #1
    2174:	4182      	sbcs	r2, r0
    2176:	2000      	movs	r0, #0
    2178:	b2d2      	uxtb	r2, r2
    217a:	1953      	adds	r3, r2, r5
    217c:	1842      	adds	r2, r0, r1
    217e:	42ab      	cmp	r3, r5
    2180:	4189      	sbcs	r1, r1
    2182:	001d      	movs	r5, r3
    2184:	4249      	negs	r1, r1
    2186:	1889      	adds	r1, r1, r2
    2188:	020b      	lsls	r3, r1, #8
    218a:	d5cd      	bpl.n	2128 <STACK_SIZE+0x128>
    218c:	4b71      	ldr	r3, [pc, #452]	; (2354 <STACK_SIZE+0x354>)
    218e:	3401      	adds	r4, #1
    2190:	429c      	cmp	r4, r3
    2192:	d100      	bne.n	2196 <STACK_SIZE+0x196>
    2194:	e13d      	b.n	2412 <STACK_SIZE+0x412>
    2196:	2001      	movs	r0, #1
    2198:	4a6f      	ldr	r2, [pc, #444]	; (2358 <STACK_SIZE+0x358>)
    219a:	086b      	lsrs	r3, r5, #1
    219c:	400a      	ands	r2, r1
    219e:	4028      	ands	r0, r5
    21a0:	4318      	orrs	r0, r3
    21a2:	07d5      	lsls	r5, r2, #31
    21a4:	4305      	orrs	r5, r0
    21a6:	0851      	lsrs	r1, r2, #1
    21a8:	e72f      	b.n	200a <STACK_SIZE+0xa>
    21aa:	002b      	movs	r3, r5
    21ac:	430b      	orrs	r3, r1
    21ae:	d100      	bne.n	21b2 <STACK_SIZE+0x1b2>
    21b0:	e1cb      	b.n	254a <STACK_SIZE+0x54a>
    21b2:	2380      	movs	r3, #128	; 0x80
    21b4:	031b      	lsls	r3, r3, #12
    21b6:	430b      	orrs	r3, r1
    21b8:	031a      	lsls	r2, r3, #12
    21ba:	0b12      	lsrs	r2, r2, #12
    21bc:	e744      	b.n	2048 <STACK_SIZE+0x48>
    21be:	3e01      	subs	r6, #1
    21c0:	2e00      	cmp	r6, #0
    21c2:	d16d      	bne.n	22a0 <STACK_SIZE+0x2a0>
    21c4:	1aae      	subs	r6, r5, r2
    21c6:	42b5      	cmp	r5, r6
    21c8:	419b      	sbcs	r3, r3
    21ca:	1a09      	subs	r1, r1, r0
    21cc:	425b      	negs	r3, r3
    21ce:	1ac9      	subs	r1, r1, r3
    21d0:	0035      	movs	r5, r6
    21d2:	e775      	b.n	20c0 <STACK_SIZE+0xc0>
    21d4:	0007      	movs	r7, r0
    21d6:	4317      	orrs	r7, r2
    21d8:	d100      	bne.n	21dc <STACK_SIZE+0x1dc>
    21da:	e716      	b.n	200a <STACK_SIZE+0xa>
    21dc:	2301      	movs	r3, #1
    21de:	425b      	negs	r3, r3
    21e0:	469c      	mov	ip, r3
    21e2:	44e3      	add	fp, ip
    21e4:	465b      	mov	r3, fp
    21e6:	2b00      	cmp	r3, #0
    21e8:	d000      	beq.n	21ec <STACK_SIZE+0x1ec>
    21ea:	e0e0      	b.n	23ae <STACK_SIZE+0x3ae>
    21ec:	18aa      	adds	r2, r5, r2
    21ee:	42aa      	cmp	r2, r5
    21f0:	419b      	sbcs	r3, r3
    21f2:	1809      	adds	r1, r1, r0
    21f4:	425b      	negs	r3, r3
    21f6:	1859      	adds	r1, r3, r1
    21f8:	0015      	movs	r5, r2
    21fa:	e7c5      	b.n	2188 <STACK_SIZE+0x188>
    21fc:	2e00      	cmp	r6, #0
    21fe:	d175      	bne.n	22ec <STACK_SIZE+0x2ec>
    2200:	1c66      	adds	r6, r4, #1
    2202:	0576      	lsls	r6, r6, #21
    2204:	0d76      	lsrs	r6, r6, #21
    2206:	2e01      	cmp	r6, #1
    2208:	dc00      	bgt.n	220c <STACK_SIZE+0x20c>
    220a:	e0f3      	b.n	23f4 <STACK_SIZE+0x3f4>
    220c:	1aae      	subs	r6, r5, r2
    220e:	46b0      	mov	r8, r6
    2210:	4545      	cmp	r5, r8
    2212:	41bf      	sbcs	r7, r7
    2214:	1a0e      	subs	r6, r1, r0
    2216:	427f      	negs	r7, r7
    2218:	1bf6      	subs	r6, r6, r7
    221a:	0237      	lsls	r7, r6, #8
    221c:	d400      	bmi.n	2220 <STACK_SIZE+0x220>
    221e:	e08f      	b.n	2340 <STACK_SIZE+0x340>
    2220:	1b55      	subs	r5, r2, r5
    2222:	42aa      	cmp	r2, r5
    2224:	41b6      	sbcs	r6, r6
    2226:	1a41      	subs	r1, r0, r1
    2228:	4276      	negs	r6, r6
    222a:	1b8e      	subs	r6, r1, r6
    222c:	469a      	mov	sl, r3
    222e:	e74b      	b.n	20c8 <STACK_SIZE+0xc8>
    2230:	4656      	mov	r6, sl
    2232:	2200      	movs	r2, #0
    2234:	2500      	movs	r5, #0
    2236:	e707      	b.n	2048 <STACK_SIZE+0x48>
    2238:	0028      	movs	r0, r5
    223a:	f000 fe93 	bl	2f64 <__clzsi2>
    223e:	3020      	adds	r0, #32
    2240:	0003      	movs	r3, r0
    2242:	3b08      	subs	r3, #8
    2244:	2b1f      	cmp	r3, #31
    2246:	dc00      	bgt.n	224a <STACK_SIZE+0x24a>
    2248:	e749      	b.n	20de <STACK_SIZE+0xde>
    224a:	002a      	movs	r2, r5
    224c:	3828      	subs	r0, #40	; 0x28
    224e:	4082      	lsls	r2, r0
    2250:	2500      	movs	r5, #0
    2252:	429c      	cmp	r4, r3
    2254:	dc00      	bgt.n	2258 <STACK_SIZE+0x258>
    2256:	e74d      	b.n	20f4 <STACK_SIZE+0xf4>
    2258:	493f      	ldr	r1, [pc, #252]	; (2358 <STACK_SIZE+0x358>)
    225a:	1ae4      	subs	r4, r4, r3
    225c:	4011      	ands	r1, r2
    225e:	e6d4      	b.n	200a <STACK_SIZE+0xa>
    2260:	4302      	orrs	r2, r0
    2262:	1e50      	subs	r0, r2, #1
    2264:	4182      	sbcs	r2, r0
    2266:	b2d3      	uxtb	r3, r2
    2268:	2200      	movs	r2, #0
    226a:	e722      	b.n	20b2 <STACK_SIZE+0xb2>
    226c:	2b00      	cmp	r3, #0
    226e:	d000      	beq.n	2272 <STACK_SIZE+0x272>
    2270:	e0f3      	b.n	245a <STACK_SIZE+0x45a>
    2272:	1c63      	adds	r3, r4, #1
    2274:	469c      	mov	ip, r3
    2276:	055b      	lsls	r3, r3, #21
    2278:	0d5b      	lsrs	r3, r3, #21
    227a:	2b01      	cmp	r3, #1
    227c:	dc00      	bgt.n	2280 <STACK_SIZE+0x280>
    227e:	e09f      	b.n	23c0 <STACK_SIZE+0x3c0>
    2280:	4b34      	ldr	r3, [pc, #208]	; (2354 <STACK_SIZE+0x354>)
    2282:	459c      	cmp	ip, r3
    2284:	d100      	bne.n	2288 <STACK_SIZE+0x288>
    2286:	e0c3      	b.n	2410 <STACK_SIZE+0x410>
    2288:	18aa      	adds	r2, r5, r2
    228a:	1809      	adds	r1, r1, r0
    228c:	42aa      	cmp	r2, r5
    228e:	4180      	sbcs	r0, r0
    2290:	4240      	negs	r0, r0
    2292:	1841      	adds	r1, r0, r1
    2294:	07cd      	lsls	r5, r1, #31
    2296:	0852      	lsrs	r2, r2, #1
    2298:	4315      	orrs	r5, r2
    229a:	0849      	lsrs	r1, r1, #1
    229c:	4664      	mov	r4, ip
    229e:	e6b4      	b.n	200a <STACK_SIZE+0xa>
    22a0:	4b2c      	ldr	r3, [pc, #176]	; (2354 <STACK_SIZE+0x354>)
    22a2:	429c      	cmp	r4, r3
    22a4:	d000      	beq.n	22a8 <STACK_SIZE+0x2a8>
    22a6:	e6ec      	b.n	2082 <STACK_SIZE+0x82>
    22a8:	e6af      	b.n	200a <STACK_SIZE+0xa>
    22aa:	0011      	movs	r1, r2
    22ac:	3c1f      	subs	r4, #31
    22ae:	40e1      	lsrs	r1, r4
    22b0:	000c      	movs	r4, r1
    22b2:	2b20      	cmp	r3, #32
    22b4:	d100      	bne.n	22b8 <STACK_SIZE+0x2b8>
    22b6:	e07f      	b.n	23b8 <STACK_SIZE+0x3b8>
    22b8:	2140      	movs	r1, #64	; 0x40
    22ba:	1acb      	subs	r3, r1, r3
    22bc:	409a      	lsls	r2, r3
    22be:	4315      	orrs	r5, r2
    22c0:	1e6a      	subs	r2, r5, #1
    22c2:	4195      	sbcs	r5, r2
    22c4:	2100      	movs	r1, #0
    22c6:	4325      	orrs	r5, r4
    22c8:	2400      	movs	r4, #0
    22ca:	e72d      	b.n	2128 <STACK_SIZE+0x128>
    22cc:	0033      	movs	r3, r6
    22ce:	0007      	movs	r7, r0
    22d0:	3b20      	subs	r3, #32
    22d2:	40df      	lsrs	r7, r3
    22d4:	003b      	movs	r3, r7
    22d6:	2e20      	cmp	r6, #32
    22d8:	d070      	beq.n	23bc <STACK_SIZE+0x3bc>
    22da:	2740      	movs	r7, #64	; 0x40
    22dc:	1bbe      	subs	r6, r7, r6
    22de:	40b0      	lsls	r0, r6
    22e0:	4302      	orrs	r2, r0
    22e2:	1e50      	subs	r0, r2, #1
    22e4:	4182      	sbcs	r2, r0
    22e6:	4313      	orrs	r3, r2
    22e8:	2200      	movs	r2, #0
    22ea:	e6e2      	b.n	20b2 <STACK_SIZE+0xb2>
    22ec:	2c00      	cmp	r4, #0
    22ee:	d04f      	beq.n	2390 <STACK_SIZE+0x390>
    22f0:	4c18      	ldr	r4, [pc, #96]	; (2354 <STACK_SIZE+0x354>)
    22f2:	45a4      	cmp	ip, r4
    22f4:	d100      	bne.n	22f8 <STACK_SIZE+0x2f8>
    22f6:	e0ab      	b.n	2450 <STACK_SIZE+0x450>
    22f8:	2480      	movs	r4, #128	; 0x80
    22fa:	0424      	lsls	r4, r4, #16
    22fc:	4276      	negs	r6, r6
    22fe:	4321      	orrs	r1, r4
    2300:	2e38      	cmp	r6, #56	; 0x38
    2302:	dd00      	ble.n	2306 <STACK_SIZE+0x306>
    2304:	e0df      	b.n	24c6 <STACK_SIZE+0x4c6>
    2306:	2e1f      	cmp	r6, #31
    2308:	dd00      	ble.n	230c <STACK_SIZE+0x30c>
    230a:	e143      	b.n	2594 <STACK_SIZE+0x594>
    230c:	2720      	movs	r7, #32
    230e:	1bbc      	subs	r4, r7, r6
    2310:	46a1      	mov	r9, r4
    2312:	000c      	movs	r4, r1
    2314:	464f      	mov	r7, r9
    2316:	40bc      	lsls	r4, r7
    2318:	46a0      	mov	r8, r4
    231a:	002c      	movs	r4, r5
    231c:	4647      	mov	r7, r8
    231e:	40f4      	lsrs	r4, r6
    2320:	433c      	orrs	r4, r7
    2322:	464f      	mov	r7, r9
    2324:	40bd      	lsls	r5, r7
    2326:	1e6f      	subs	r7, r5, #1
    2328:	41bd      	sbcs	r5, r7
    232a:	40f1      	lsrs	r1, r6
    232c:	432c      	orrs	r4, r5
    232e:	1b15      	subs	r5, r2, r4
    2330:	42aa      	cmp	r2, r5
    2332:	4192      	sbcs	r2, r2
    2334:	1a41      	subs	r1, r0, r1
    2336:	4252      	negs	r2, r2
    2338:	1a89      	subs	r1, r1, r2
    233a:	4664      	mov	r4, ip
    233c:	469a      	mov	sl, r3
    233e:	e6bf      	b.n	20c0 <STACK_SIZE+0xc0>
    2340:	4641      	mov	r1, r8
    2342:	4645      	mov	r5, r8
    2344:	4331      	orrs	r1, r6
    2346:	d000      	beq.n	234a <STACK_SIZE+0x34a>
    2348:	e6be      	b.n	20c8 <STACK_SIZE+0xc8>
    234a:	2600      	movs	r6, #0
    234c:	2400      	movs	r4, #0
    234e:	2500      	movs	r5, #0
    2350:	e6f2      	b.n	2138 <STACK_SIZE+0x138>
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	000007ff 	.word	0x000007ff
    2358:	ff7fffff 	.word	0xff7fffff
    235c:	800fffff 	.word	0x800fffff
    2360:	2b1f      	cmp	r3, #31
    2362:	dc59      	bgt.n	2418 <STACK_SIZE+0x418>
    2364:	2720      	movs	r7, #32
    2366:	1aff      	subs	r7, r7, r3
    2368:	46bc      	mov	ip, r7
    236a:	0007      	movs	r7, r0
    236c:	4663      	mov	r3, ip
    236e:	409f      	lsls	r7, r3
    2370:	465b      	mov	r3, fp
    2372:	46b9      	mov	r9, r7
    2374:	0017      	movs	r7, r2
    2376:	40df      	lsrs	r7, r3
    2378:	46b8      	mov	r8, r7
    237a:	464f      	mov	r7, r9
    237c:	4643      	mov	r3, r8
    237e:	431f      	orrs	r7, r3
    2380:	4663      	mov	r3, ip
    2382:	409a      	lsls	r2, r3
    2384:	1e53      	subs	r3, r2, #1
    2386:	419a      	sbcs	r2, r3
    2388:	465b      	mov	r3, fp
    238a:	433a      	orrs	r2, r7
    238c:	40d8      	lsrs	r0, r3
    238e:	e6f4      	b.n	217a <STACK_SIZE+0x17a>
    2390:	000c      	movs	r4, r1
    2392:	432c      	orrs	r4, r5
    2394:	d05c      	beq.n	2450 <STACK_SIZE+0x450>
    2396:	43f6      	mvns	r6, r6
    2398:	2e00      	cmp	r6, #0
    239a:	d155      	bne.n	2448 <STACK_SIZE+0x448>
    239c:	1b55      	subs	r5, r2, r5
    239e:	42aa      	cmp	r2, r5
    23a0:	41a4      	sbcs	r4, r4
    23a2:	1a41      	subs	r1, r0, r1
    23a4:	4264      	negs	r4, r4
    23a6:	1b09      	subs	r1, r1, r4
    23a8:	469a      	mov	sl, r3
    23aa:	4664      	mov	r4, ip
    23ac:	e688      	b.n	20c0 <STACK_SIZE+0xc0>
    23ae:	4f96      	ldr	r7, [pc, #600]	; (2608 <STACK_SIZE+0x608>)
    23b0:	42bc      	cmp	r4, r7
    23b2:	d000      	beq.n	23b6 <STACK_SIZE+0x3b6>
    23b4:	e6d8      	b.n	2168 <STACK_SIZE+0x168>
    23b6:	e628      	b.n	200a <STACK_SIZE+0xa>
    23b8:	2200      	movs	r2, #0
    23ba:	e780      	b.n	22be <STACK_SIZE+0x2be>
    23bc:	2000      	movs	r0, #0
    23be:	e78f      	b.n	22e0 <STACK_SIZE+0x2e0>
    23c0:	000b      	movs	r3, r1
    23c2:	432b      	orrs	r3, r5
    23c4:	2c00      	cmp	r4, #0
    23c6:	d000      	beq.n	23ca <STACK_SIZE+0x3ca>
    23c8:	e0c2      	b.n	2550 <STACK_SIZE+0x550>
    23ca:	2b00      	cmp	r3, #0
    23cc:	d100      	bne.n	23d0 <STACK_SIZE+0x3d0>
    23ce:	e101      	b.n	25d4 <STACK_SIZE+0x5d4>
    23d0:	0003      	movs	r3, r0
    23d2:	4313      	orrs	r3, r2
    23d4:	d100      	bne.n	23d8 <STACK_SIZE+0x3d8>
    23d6:	e618      	b.n	200a <STACK_SIZE+0xa>
    23d8:	18ab      	adds	r3, r5, r2
    23da:	42ab      	cmp	r3, r5
    23dc:	41b6      	sbcs	r6, r6
    23de:	1809      	adds	r1, r1, r0
    23e0:	4276      	negs	r6, r6
    23e2:	1871      	adds	r1, r6, r1
    23e4:	020a      	lsls	r2, r1, #8
    23e6:	d400      	bmi.n	23ea <STACK_SIZE+0x3ea>
    23e8:	e109      	b.n	25fe <STACK_SIZE+0x5fe>
    23ea:	4a88      	ldr	r2, [pc, #544]	; (260c <STACK_SIZE+0x60c>)
    23ec:	001d      	movs	r5, r3
    23ee:	4011      	ands	r1, r2
    23f0:	4664      	mov	r4, ip
    23f2:	e60a      	b.n	200a <STACK_SIZE+0xa>
    23f4:	2c00      	cmp	r4, #0
    23f6:	d15b      	bne.n	24b0 <STACK_SIZE+0x4b0>
    23f8:	000e      	movs	r6, r1
    23fa:	432e      	orrs	r6, r5
    23fc:	d000      	beq.n	2400 <STACK_SIZE+0x400>
    23fe:	e08a      	b.n	2516 <STACK_SIZE+0x516>
    2400:	0001      	movs	r1, r0
    2402:	4311      	orrs	r1, r2
    2404:	d100      	bne.n	2408 <STACK_SIZE+0x408>
    2406:	e0c2      	b.n	258e <STACK_SIZE+0x58e>
    2408:	0001      	movs	r1, r0
    240a:	0015      	movs	r5, r2
    240c:	469a      	mov	sl, r3
    240e:	e5fc      	b.n	200a <STACK_SIZE+0xa>
    2410:	4664      	mov	r4, ip
    2412:	2100      	movs	r1, #0
    2414:	2500      	movs	r5, #0
    2416:	e68f      	b.n	2138 <STACK_SIZE+0x138>
    2418:	2320      	movs	r3, #32
    241a:	425b      	negs	r3, r3
    241c:	469c      	mov	ip, r3
    241e:	44dc      	add	ip, fp
    2420:	4663      	mov	r3, ip
    2422:	0007      	movs	r7, r0
    2424:	40df      	lsrs	r7, r3
    2426:	465b      	mov	r3, fp
    2428:	46bc      	mov	ip, r7
    242a:	2b20      	cmp	r3, #32
    242c:	d100      	bne.n	2430 <STACK_SIZE+0x430>
    242e:	e0ac      	b.n	258a <STACK_SIZE+0x58a>
    2430:	2340      	movs	r3, #64	; 0x40
    2432:	465f      	mov	r7, fp
    2434:	1bdb      	subs	r3, r3, r7
    2436:	4098      	lsls	r0, r3
    2438:	4302      	orrs	r2, r0
    243a:	1e50      	subs	r0, r2, #1
    243c:	4182      	sbcs	r2, r0
    243e:	4663      	mov	r3, ip
    2440:	4313      	orrs	r3, r2
    2442:	001a      	movs	r2, r3
    2444:	2000      	movs	r0, #0
    2446:	e698      	b.n	217a <STACK_SIZE+0x17a>
    2448:	4c6f      	ldr	r4, [pc, #444]	; (2608 <STACK_SIZE+0x608>)
    244a:	45a4      	cmp	ip, r4
    244c:	d000      	beq.n	2450 <STACK_SIZE+0x450>
    244e:	e757      	b.n	2300 <STACK_SIZE+0x300>
    2450:	0001      	movs	r1, r0
    2452:	0015      	movs	r5, r2
    2454:	4664      	mov	r4, ip
    2456:	469a      	mov	sl, r3
    2458:	e5d7      	b.n	200a <STACK_SIZE+0xa>
    245a:	2c00      	cmp	r4, #0
    245c:	d139      	bne.n	24d2 <STACK_SIZE+0x4d2>
    245e:	000c      	movs	r4, r1
    2460:	432c      	orrs	r4, r5
    2462:	d06e      	beq.n	2542 <STACK_SIZE+0x542>
    2464:	43db      	mvns	r3, r3
    2466:	2b00      	cmp	r3, #0
    2468:	d01a      	beq.n	24a0 <STACK_SIZE+0x4a0>
    246a:	4c67      	ldr	r4, [pc, #412]	; (2608 <STACK_SIZE+0x608>)
    246c:	45a4      	cmp	ip, r4
    246e:	d068      	beq.n	2542 <STACK_SIZE+0x542>
    2470:	2b38      	cmp	r3, #56	; 0x38
    2472:	dd00      	ble.n	2476 <STACK_SIZE+0x476>
    2474:	e0a4      	b.n	25c0 <STACK_SIZE+0x5c0>
    2476:	2b1f      	cmp	r3, #31
    2478:	dd00      	ble.n	247c <STACK_SIZE+0x47c>
    247a:	e0ae      	b.n	25da <STACK_SIZE+0x5da>
    247c:	2420      	movs	r4, #32
    247e:	000f      	movs	r7, r1
    2480:	1ae4      	subs	r4, r4, r3
    2482:	40a7      	lsls	r7, r4
    2484:	46b9      	mov	r9, r7
    2486:	002f      	movs	r7, r5
    2488:	40df      	lsrs	r7, r3
    248a:	46b8      	mov	r8, r7
    248c:	46a3      	mov	fp, r4
    248e:	464f      	mov	r7, r9
    2490:	4644      	mov	r4, r8
    2492:	4327      	orrs	r7, r4
    2494:	465c      	mov	r4, fp
    2496:	40a5      	lsls	r5, r4
    2498:	1e6c      	subs	r4, r5, #1
    249a:	41a5      	sbcs	r5, r4
    249c:	40d9      	lsrs	r1, r3
    249e:	433d      	orrs	r5, r7
    24a0:	18ad      	adds	r5, r5, r2
    24a2:	4295      	cmp	r5, r2
    24a4:	419b      	sbcs	r3, r3
    24a6:	1809      	adds	r1, r1, r0
    24a8:	425b      	negs	r3, r3
    24aa:	1859      	adds	r1, r3, r1
    24ac:	4664      	mov	r4, ip
    24ae:	e66b      	b.n	2188 <STACK_SIZE+0x188>
    24b0:	000c      	movs	r4, r1
    24b2:	432c      	orrs	r4, r5
    24b4:	d115      	bne.n	24e2 <STACK_SIZE+0x4e2>
    24b6:	0001      	movs	r1, r0
    24b8:	4311      	orrs	r1, r2
    24ba:	d07b      	beq.n	25b4 <STACK_SIZE+0x5b4>
    24bc:	0001      	movs	r1, r0
    24be:	0015      	movs	r5, r2
    24c0:	469a      	mov	sl, r3
    24c2:	4c51      	ldr	r4, [pc, #324]	; (2608 <STACK_SIZE+0x608>)
    24c4:	e5a1      	b.n	200a <STACK_SIZE+0xa>
    24c6:	430d      	orrs	r5, r1
    24c8:	1e69      	subs	r1, r5, #1
    24ca:	418d      	sbcs	r5, r1
    24cc:	2100      	movs	r1, #0
    24ce:	b2ec      	uxtb	r4, r5
    24d0:	e72d      	b.n	232e <STACK_SIZE+0x32e>
    24d2:	4c4d      	ldr	r4, [pc, #308]	; (2608 <STACK_SIZE+0x608>)
    24d4:	45a4      	cmp	ip, r4
    24d6:	d034      	beq.n	2542 <STACK_SIZE+0x542>
    24d8:	2480      	movs	r4, #128	; 0x80
    24da:	0424      	lsls	r4, r4, #16
    24dc:	425b      	negs	r3, r3
    24de:	4321      	orrs	r1, r4
    24e0:	e7c6      	b.n	2470 <STACK_SIZE+0x470>
    24e2:	0004      	movs	r4, r0
    24e4:	4314      	orrs	r4, r2
    24e6:	d04e      	beq.n	2586 <STACK_SIZE+0x586>
    24e8:	08ed      	lsrs	r5, r5, #3
    24ea:	074c      	lsls	r4, r1, #29
    24ec:	432c      	orrs	r4, r5
    24ee:	2580      	movs	r5, #128	; 0x80
    24f0:	08c9      	lsrs	r1, r1, #3
    24f2:	032d      	lsls	r5, r5, #12
    24f4:	4229      	tst	r1, r5
    24f6:	d008      	beq.n	250a <STACK_SIZE+0x50a>
    24f8:	08c6      	lsrs	r6, r0, #3
    24fa:	422e      	tst	r6, r5
    24fc:	d105      	bne.n	250a <STACK_SIZE+0x50a>
    24fe:	08d2      	lsrs	r2, r2, #3
    2500:	0741      	lsls	r1, r0, #29
    2502:	4311      	orrs	r1, r2
    2504:	000c      	movs	r4, r1
    2506:	469a      	mov	sl, r3
    2508:	0031      	movs	r1, r6
    250a:	0f62      	lsrs	r2, r4, #29
    250c:	00c9      	lsls	r1, r1, #3
    250e:	00e5      	lsls	r5, r4, #3
    2510:	4311      	orrs	r1, r2
    2512:	4c3d      	ldr	r4, [pc, #244]	; (2608 <STACK_SIZE+0x608>)
    2514:	e579      	b.n	200a <STACK_SIZE+0xa>
    2516:	0006      	movs	r6, r0
    2518:	4316      	orrs	r6, r2
    251a:	d100      	bne.n	251e <STACK_SIZE+0x51e>
    251c:	e575      	b.n	200a <STACK_SIZE+0xa>
    251e:	1aae      	subs	r6, r5, r2
    2520:	46b0      	mov	r8, r6
    2522:	4545      	cmp	r5, r8
    2524:	41bf      	sbcs	r7, r7
    2526:	1a0e      	subs	r6, r1, r0
    2528:	427f      	negs	r7, r7
    252a:	1bf6      	subs	r6, r6, r7
    252c:	0237      	lsls	r7, r6, #8
    252e:	d400      	bmi.n	2532 <STACK_SIZE+0x532>
    2530:	e5f4      	b.n	211c <STACK_SIZE+0x11c>
    2532:	1b55      	subs	r5, r2, r5
    2534:	42aa      	cmp	r2, r5
    2536:	41b6      	sbcs	r6, r6
    2538:	1a41      	subs	r1, r0, r1
    253a:	4276      	negs	r6, r6
    253c:	1b89      	subs	r1, r1, r6
    253e:	469a      	mov	sl, r3
    2540:	e563      	b.n	200a <STACK_SIZE+0xa>
    2542:	0001      	movs	r1, r0
    2544:	0015      	movs	r5, r2
    2546:	4664      	mov	r4, ip
    2548:	e55f      	b.n	200a <STACK_SIZE+0xa>
    254a:	2200      	movs	r2, #0
    254c:	2500      	movs	r5, #0
    254e:	e57b      	b.n	2048 <STACK_SIZE+0x48>
    2550:	2b00      	cmp	r3, #0
    2552:	d03b      	beq.n	25cc <STACK_SIZE+0x5cc>
    2554:	0003      	movs	r3, r0
    2556:	4313      	orrs	r3, r2
    2558:	d015      	beq.n	2586 <STACK_SIZE+0x586>
    255a:	08ed      	lsrs	r5, r5, #3
    255c:	074b      	lsls	r3, r1, #29
    255e:	432b      	orrs	r3, r5
    2560:	2580      	movs	r5, #128	; 0x80
    2562:	08c9      	lsrs	r1, r1, #3
    2564:	032d      	lsls	r5, r5, #12
    2566:	4229      	tst	r1, r5
    2568:	d007      	beq.n	257a <STACK_SIZE+0x57a>
    256a:	08c4      	lsrs	r4, r0, #3
    256c:	422c      	tst	r4, r5
    256e:	d104      	bne.n	257a <STACK_SIZE+0x57a>
    2570:	0741      	lsls	r1, r0, #29
    2572:	000b      	movs	r3, r1
    2574:	0021      	movs	r1, r4
    2576:	08d2      	lsrs	r2, r2, #3
    2578:	4313      	orrs	r3, r2
    257a:	00c9      	lsls	r1, r1, #3
    257c:	0f5a      	lsrs	r2, r3, #29
    257e:	4311      	orrs	r1, r2
    2580:	00dd      	lsls	r5, r3, #3
    2582:	4c21      	ldr	r4, [pc, #132]	; (2608 <STACK_SIZE+0x608>)
    2584:	e541      	b.n	200a <STACK_SIZE+0xa>
    2586:	4c20      	ldr	r4, [pc, #128]	; (2608 <STACK_SIZE+0x608>)
    2588:	e53f      	b.n	200a <STACK_SIZE+0xa>
    258a:	2000      	movs	r0, #0
    258c:	e754      	b.n	2438 <STACK_SIZE+0x438>
    258e:	2600      	movs	r6, #0
    2590:	2500      	movs	r5, #0
    2592:	e5d1      	b.n	2138 <STACK_SIZE+0x138>
    2594:	0034      	movs	r4, r6
    2596:	000f      	movs	r7, r1
    2598:	3c20      	subs	r4, #32
    259a:	40e7      	lsrs	r7, r4
    259c:	003c      	movs	r4, r7
    259e:	2e20      	cmp	r6, #32
    25a0:	d02b      	beq.n	25fa <STACK_SIZE+0x5fa>
    25a2:	2740      	movs	r7, #64	; 0x40
    25a4:	1bbe      	subs	r6, r7, r6
    25a6:	40b1      	lsls	r1, r6
    25a8:	430d      	orrs	r5, r1
    25aa:	1e69      	subs	r1, r5, #1
    25ac:	418d      	sbcs	r5, r1
    25ae:	2100      	movs	r1, #0
    25b0:	432c      	orrs	r4, r5
    25b2:	e6bc      	b.n	232e <STACK_SIZE+0x32e>
    25b4:	2180      	movs	r1, #128	; 0x80
    25b6:	2600      	movs	r6, #0
    25b8:	0309      	lsls	r1, r1, #12
    25ba:	4c13      	ldr	r4, [pc, #76]	; (2608 <STACK_SIZE+0x608>)
    25bc:	2500      	movs	r5, #0
    25be:	e5bb      	b.n	2138 <STACK_SIZE+0x138>
    25c0:	430d      	orrs	r5, r1
    25c2:	1e69      	subs	r1, r5, #1
    25c4:	418d      	sbcs	r5, r1
    25c6:	2100      	movs	r1, #0
    25c8:	b2ed      	uxtb	r5, r5
    25ca:	e769      	b.n	24a0 <STACK_SIZE+0x4a0>
    25cc:	0001      	movs	r1, r0
    25ce:	0015      	movs	r5, r2
    25d0:	4c0d      	ldr	r4, [pc, #52]	; (2608 <STACK_SIZE+0x608>)
    25d2:	e51a      	b.n	200a <STACK_SIZE+0xa>
    25d4:	0001      	movs	r1, r0
    25d6:	0015      	movs	r5, r2
    25d8:	e517      	b.n	200a <STACK_SIZE+0xa>
    25da:	001c      	movs	r4, r3
    25dc:	000f      	movs	r7, r1
    25de:	3c20      	subs	r4, #32
    25e0:	40e7      	lsrs	r7, r4
    25e2:	003c      	movs	r4, r7
    25e4:	2b20      	cmp	r3, #32
    25e6:	d00c      	beq.n	2602 <STACK_SIZE+0x602>
    25e8:	2740      	movs	r7, #64	; 0x40
    25ea:	1afb      	subs	r3, r7, r3
    25ec:	4099      	lsls	r1, r3
    25ee:	430d      	orrs	r5, r1
    25f0:	1e69      	subs	r1, r5, #1
    25f2:	418d      	sbcs	r5, r1
    25f4:	2100      	movs	r1, #0
    25f6:	4325      	orrs	r5, r4
    25f8:	e752      	b.n	24a0 <STACK_SIZE+0x4a0>
    25fa:	2100      	movs	r1, #0
    25fc:	e7d4      	b.n	25a8 <STACK_SIZE+0x5a8>
    25fe:	001d      	movs	r5, r3
    2600:	e592      	b.n	2128 <STACK_SIZE+0x128>
    2602:	2100      	movs	r1, #0
    2604:	e7f3      	b.n	25ee <STACK_SIZE+0x5ee>
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	000007ff 	.word	0x000007ff
    260c:	ff7fffff 	.word	0xff7fffff

00002610 <__eqdf2>:
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	465f      	mov	r7, fp
    2614:	4656      	mov	r6, sl
    2616:	464d      	mov	r5, r9
    2618:	4644      	mov	r4, r8
    261a:	b4f0      	push	{r4, r5, r6, r7}
    261c:	031f      	lsls	r7, r3, #12
    261e:	005c      	lsls	r4, r3, #1
    2620:	0fdb      	lsrs	r3, r3, #31
    2622:	469a      	mov	sl, r3
    2624:	4b19      	ldr	r3, [pc, #100]	; (268c <__eqdf2+0x7c>)
    2626:	030e      	lsls	r6, r1, #12
    2628:	004d      	lsls	r5, r1, #1
    262a:	0fc9      	lsrs	r1, r1, #31
    262c:	4680      	mov	r8, r0
    262e:	0b36      	lsrs	r6, r6, #12
    2630:	0d6d      	lsrs	r5, r5, #21
    2632:	468b      	mov	fp, r1
    2634:	4691      	mov	r9, r2
    2636:	0b3f      	lsrs	r7, r7, #12
    2638:	0d64      	lsrs	r4, r4, #21
    263a:	429d      	cmp	r5, r3
    263c:	d019      	beq.n	2672 <__eqdf2+0x62>
    263e:	4b13      	ldr	r3, [pc, #76]	; (268c <__eqdf2+0x7c>)
    2640:	429c      	cmp	r4, r3
    2642:	d01b      	beq.n	267c <__eqdf2+0x6c>
    2644:	2301      	movs	r3, #1
    2646:	42a5      	cmp	r5, r4
    2648:	d006      	beq.n	2658 <__eqdf2+0x48>
    264a:	0018      	movs	r0, r3
    264c:	bc3c      	pop	{r2, r3, r4, r5}
    264e:	4690      	mov	r8, r2
    2650:	4699      	mov	r9, r3
    2652:	46a2      	mov	sl, r4
    2654:	46ab      	mov	fp, r5
    2656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2658:	42be      	cmp	r6, r7
    265a:	d1f6      	bne.n	264a <__eqdf2+0x3a>
    265c:	45c8      	cmp	r8, r9
    265e:	d1f4      	bne.n	264a <__eqdf2+0x3a>
    2660:	45d3      	cmp	fp, sl
    2662:	d010      	beq.n	2686 <__eqdf2+0x76>
    2664:	2d00      	cmp	r5, #0
    2666:	d1f0      	bne.n	264a <__eqdf2+0x3a>
    2668:	4330      	orrs	r0, r6
    266a:	0003      	movs	r3, r0
    266c:	1e5a      	subs	r2, r3, #1
    266e:	4193      	sbcs	r3, r2
    2670:	e7eb      	b.n	264a <__eqdf2+0x3a>
    2672:	0031      	movs	r1, r6
    2674:	2301      	movs	r3, #1
    2676:	4301      	orrs	r1, r0
    2678:	d1e7      	bne.n	264a <__eqdf2+0x3a>
    267a:	e7e0      	b.n	263e <__eqdf2+0x2e>
    267c:	433a      	orrs	r2, r7
    267e:	2301      	movs	r3, #1
    2680:	2a00      	cmp	r2, #0
    2682:	d1e2      	bne.n	264a <__eqdf2+0x3a>
    2684:	e7de      	b.n	2644 <__eqdf2+0x34>
    2686:	2300      	movs	r3, #0
    2688:	e7df      	b.n	264a <__eqdf2+0x3a>
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	000007ff 	.word	0x000007ff

00002690 <__gedf2>:
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	465f      	mov	r7, fp
    2694:	4644      	mov	r4, r8
    2696:	4656      	mov	r6, sl
    2698:	464d      	mov	r5, r9
    269a:	b4f0      	push	{r4, r5, r6, r7}
    269c:	031f      	lsls	r7, r3, #12
    269e:	0b3c      	lsrs	r4, r7, #12
    26a0:	4f2c      	ldr	r7, [pc, #176]	; (2754 <__gedf2+0xc4>)
    26a2:	030e      	lsls	r6, r1, #12
    26a4:	004d      	lsls	r5, r1, #1
    26a6:	46a3      	mov	fp, r4
    26a8:	005c      	lsls	r4, r3, #1
    26aa:	4684      	mov	ip, r0
    26ac:	0b36      	lsrs	r6, r6, #12
    26ae:	0d6d      	lsrs	r5, r5, #21
    26b0:	0fc9      	lsrs	r1, r1, #31
    26b2:	4690      	mov	r8, r2
    26b4:	0d64      	lsrs	r4, r4, #21
    26b6:	0fdb      	lsrs	r3, r3, #31
    26b8:	42bd      	cmp	r5, r7
    26ba:	d02b      	beq.n	2714 <__gedf2+0x84>
    26bc:	4f25      	ldr	r7, [pc, #148]	; (2754 <__gedf2+0xc4>)
    26be:	42bc      	cmp	r4, r7
    26c0:	d02e      	beq.n	2720 <__gedf2+0x90>
    26c2:	2d00      	cmp	r5, #0
    26c4:	d10e      	bne.n	26e4 <__gedf2+0x54>
    26c6:	4330      	orrs	r0, r6
    26c8:	0007      	movs	r7, r0
    26ca:	4681      	mov	r9, r0
    26cc:	4278      	negs	r0, r7
    26ce:	4178      	adcs	r0, r7
    26d0:	2c00      	cmp	r4, #0
    26d2:	d117      	bne.n	2704 <__gedf2+0x74>
    26d4:	465f      	mov	r7, fp
    26d6:	433a      	orrs	r2, r7
    26d8:	d114      	bne.n	2704 <__gedf2+0x74>
    26da:	464b      	mov	r3, r9
    26dc:	2000      	movs	r0, #0
    26de:	2b00      	cmp	r3, #0
    26e0:	d00a      	beq.n	26f8 <__gedf2+0x68>
    26e2:	e006      	b.n	26f2 <__gedf2+0x62>
    26e4:	2c00      	cmp	r4, #0
    26e6:	d102      	bne.n	26ee <__gedf2+0x5e>
    26e8:	4658      	mov	r0, fp
    26ea:	4302      	orrs	r2, r0
    26ec:	d001      	beq.n	26f2 <__gedf2+0x62>
    26ee:	4299      	cmp	r1, r3
    26f0:	d01a      	beq.n	2728 <__gedf2+0x98>
    26f2:	2301      	movs	r3, #1
    26f4:	4248      	negs	r0, r1
    26f6:	4318      	orrs	r0, r3
    26f8:	bc3c      	pop	{r2, r3, r4, r5}
    26fa:	4690      	mov	r8, r2
    26fc:	4699      	mov	r9, r3
    26fe:	46a2      	mov	sl, r4
    2700:	46ab      	mov	fp, r5
    2702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2704:	2800      	cmp	r0, #0
    2706:	d0f2      	beq.n	26ee <__gedf2+0x5e>
    2708:	4258      	negs	r0, r3
    270a:	4158      	adcs	r0, r3
    270c:	2201      	movs	r2, #1
    270e:	4240      	negs	r0, r0
    2710:	4310      	orrs	r0, r2
    2712:	e7f1      	b.n	26f8 <__gedf2+0x68>
    2714:	0037      	movs	r7, r6
    2716:	4307      	orrs	r7, r0
    2718:	d0d0      	beq.n	26bc <__gedf2+0x2c>
    271a:	2002      	movs	r0, #2
    271c:	4240      	negs	r0, r0
    271e:	e7eb      	b.n	26f8 <__gedf2+0x68>
    2720:	465f      	mov	r7, fp
    2722:	4317      	orrs	r7, r2
    2724:	d0cd      	beq.n	26c2 <__gedf2+0x32>
    2726:	e7f8      	b.n	271a <__gedf2+0x8a>
    2728:	42a5      	cmp	r5, r4
    272a:	dce2      	bgt.n	26f2 <__gedf2+0x62>
    272c:	db05      	blt.n	273a <__gedf2+0xaa>
    272e:	455e      	cmp	r6, fp
    2730:	d8df      	bhi.n	26f2 <__gedf2+0x62>
    2732:	d008      	beq.n	2746 <__gedf2+0xb6>
    2734:	2000      	movs	r0, #0
    2736:	455e      	cmp	r6, fp
    2738:	d2de      	bcs.n	26f8 <__gedf2+0x68>
    273a:	4248      	negs	r0, r1
    273c:	4148      	adcs	r0, r1
    273e:	2301      	movs	r3, #1
    2740:	4240      	negs	r0, r0
    2742:	4318      	orrs	r0, r3
    2744:	e7d8      	b.n	26f8 <__gedf2+0x68>
    2746:	45c4      	cmp	ip, r8
    2748:	d8d3      	bhi.n	26f2 <__gedf2+0x62>
    274a:	2000      	movs	r0, #0
    274c:	45c4      	cmp	ip, r8
    274e:	d3f4      	bcc.n	273a <__gedf2+0xaa>
    2750:	e7d2      	b.n	26f8 <__gedf2+0x68>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	000007ff 	.word	0x000007ff

00002758 <__ledf2>:
    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	465f      	mov	r7, fp
    275c:	464d      	mov	r5, r9
    275e:	4644      	mov	r4, r8
    2760:	4656      	mov	r6, sl
    2762:	b4f0      	push	{r4, r5, r6, r7}
    2764:	031c      	lsls	r4, r3, #12
    2766:	0b24      	lsrs	r4, r4, #12
    2768:	46a4      	mov	ip, r4
    276a:	4c2f      	ldr	r4, [pc, #188]	; (2828 <__ledf2+0xd0>)
    276c:	030f      	lsls	r7, r1, #12
    276e:	004d      	lsls	r5, r1, #1
    2770:	005e      	lsls	r6, r3, #1
    2772:	0fc9      	lsrs	r1, r1, #31
    2774:	4680      	mov	r8, r0
    2776:	0b3f      	lsrs	r7, r7, #12
    2778:	0d6d      	lsrs	r5, r5, #21
    277a:	468b      	mov	fp, r1
    277c:	4691      	mov	r9, r2
    277e:	0d76      	lsrs	r6, r6, #21
    2780:	0fdb      	lsrs	r3, r3, #31
    2782:	42a5      	cmp	r5, r4
    2784:	d020      	beq.n	27c8 <__ledf2+0x70>
    2786:	4c28      	ldr	r4, [pc, #160]	; (2828 <__ledf2+0xd0>)
    2788:	42a6      	cmp	r6, r4
    278a:	d022      	beq.n	27d2 <__ledf2+0x7a>
    278c:	2d00      	cmp	r5, #0
    278e:	d112      	bne.n	27b6 <__ledf2+0x5e>
    2790:	4338      	orrs	r0, r7
    2792:	4244      	negs	r4, r0
    2794:	4144      	adcs	r4, r0
    2796:	2e00      	cmp	r6, #0
    2798:	d020      	beq.n	27dc <__ledf2+0x84>
    279a:	2c00      	cmp	r4, #0
    279c:	d00d      	beq.n	27ba <__ledf2+0x62>
    279e:	425c      	negs	r4, r3
    27a0:	4163      	adcs	r3, r4
    27a2:	2401      	movs	r4, #1
    27a4:	425b      	negs	r3, r3
    27a6:	431c      	orrs	r4, r3
    27a8:	0020      	movs	r0, r4
    27aa:	bc3c      	pop	{r2, r3, r4, r5}
    27ac:	4690      	mov	r8, r2
    27ae:	4699      	mov	r9, r3
    27b0:	46a2      	mov	sl, r4
    27b2:	46ab      	mov	fp, r5
    27b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27b6:	2e00      	cmp	r6, #0
    27b8:	d017      	beq.n	27ea <__ledf2+0x92>
    27ba:	455b      	cmp	r3, fp
    27bc:	d019      	beq.n	27f2 <__ledf2+0x9a>
    27be:	465b      	mov	r3, fp
    27c0:	425c      	negs	r4, r3
    27c2:	2301      	movs	r3, #1
    27c4:	431c      	orrs	r4, r3
    27c6:	e7ef      	b.n	27a8 <__ledf2+0x50>
    27c8:	0039      	movs	r1, r7
    27ca:	2402      	movs	r4, #2
    27cc:	4301      	orrs	r1, r0
    27ce:	d1eb      	bne.n	27a8 <__ledf2+0x50>
    27d0:	e7d9      	b.n	2786 <__ledf2+0x2e>
    27d2:	4661      	mov	r1, ip
    27d4:	2402      	movs	r4, #2
    27d6:	4311      	orrs	r1, r2
    27d8:	d1e6      	bne.n	27a8 <__ledf2+0x50>
    27da:	e7d7      	b.n	278c <__ledf2+0x34>
    27dc:	4661      	mov	r1, ip
    27de:	430a      	orrs	r2, r1
    27e0:	d1db      	bne.n	279a <__ledf2+0x42>
    27e2:	2400      	movs	r4, #0
    27e4:	2800      	cmp	r0, #0
    27e6:	d0df      	beq.n	27a8 <__ledf2+0x50>
    27e8:	e7e9      	b.n	27be <__ledf2+0x66>
    27ea:	4661      	mov	r1, ip
    27ec:	430a      	orrs	r2, r1
    27ee:	d1e4      	bne.n	27ba <__ledf2+0x62>
    27f0:	e7e5      	b.n	27be <__ledf2+0x66>
    27f2:	42b5      	cmp	r5, r6
    27f4:	dd03      	ble.n	27fe <__ledf2+0xa6>
    27f6:	2201      	movs	r2, #1
    27f8:	425c      	negs	r4, r3
    27fa:	4314      	orrs	r4, r2
    27fc:	e7d4      	b.n	27a8 <__ledf2+0x50>
    27fe:	42b5      	cmp	r5, r6
    2800:	dbcd      	blt.n	279e <__ledf2+0x46>
    2802:	4567      	cmp	r7, ip
    2804:	d8db      	bhi.n	27be <__ledf2+0x66>
    2806:	d009      	beq.n	281c <__ledf2+0xc4>
    2808:	2400      	movs	r4, #0
    280a:	4567      	cmp	r7, ip
    280c:	d2cc      	bcs.n	27a8 <__ledf2+0x50>
    280e:	4659      	mov	r1, fp
    2810:	424c      	negs	r4, r1
    2812:	4161      	adcs	r1, r4
    2814:	2401      	movs	r4, #1
    2816:	4249      	negs	r1, r1
    2818:	430c      	orrs	r4, r1
    281a:	e7c5      	b.n	27a8 <__ledf2+0x50>
    281c:	45c8      	cmp	r8, r9
    281e:	d8ce      	bhi.n	27be <__ledf2+0x66>
    2820:	2400      	movs	r4, #0
    2822:	45c8      	cmp	r8, r9
    2824:	d3f3      	bcc.n	280e <__ledf2+0xb6>
    2826:	e7bf      	b.n	27a8 <__ledf2+0x50>
    2828:	000007ff 	.word	0x000007ff

0000282c <__aeabi_dmul>:
    282c:	b5f0      	push	{r4, r5, r6, r7, lr}
    282e:	465f      	mov	r7, fp
    2830:	4656      	mov	r6, sl
    2832:	464d      	mov	r5, r9
    2834:	4644      	mov	r4, r8
    2836:	b4f0      	push	{r4, r5, r6, r7}
    2838:	030d      	lsls	r5, r1, #12
    283a:	4699      	mov	r9, r3
    283c:	004e      	lsls	r6, r1, #1
    283e:	0b2b      	lsrs	r3, r5, #12
    2840:	b087      	sub	sp, #28
    2842:	0007      	movs	r7, r0
    2844:	4692      	mov	sl, r2
    2846:	4680      	mov	r8, r0
    2848:	469b      	mov	fp, r3
    284a:	0d76      	lsrs	r6, r6, #21
    284c:	0fcc      	lsrs	r4, r1, #31
    284e:	2e00      	cmp	r6, #0
    2850:	d069      	beq.n	2926 <__aeabi_dmul+0xfa>
    2852:	4b6d      	ldr	r3, [pc, #436]	; (2a08 <__aeabi_dmul+0x1dc>)
    2854:	429e      	cmp	r6, r3
    2856:	d035      	beq.n	28c4 <__aeabi_dmul+0x98>
    2858:	465b      	mov	r3, fp
    285a:	2280      	movs	r2, #128	; 0x80
    285c:	00dd      	lsls	r5, r3, #3
    285e:	0412      	lsls	r2, r2, #16
    2860:	0f43      	lsrs	r3, r0, #29
    2862:	4313      	orrs	r3, r2
    2864:	432b      	orrs	r3, r5
    2866:	469b      	mov	fp, r3
    2868:	00c3      	lsls	r3, r0, #3
    286a:	4698      	mov	r8, r3
    286c:	4b67      	ldr	r3, [pc, #412]	; (2a0c <__aeabi_dmul+0x1e0>)
    286e:	2700      	movs	r7, #0
    2870:	469c      	mov	ip, r3
    2872:	2300      	movs	r3, #0
    2874:	4466      	add	r6, ip
    2876:	9301      	str	r3, [sp, #4]
    2878:	464a      	mov	r2, r9
    287a:	0315      	lsls	r5, r2, #12
    287c:	0050      	lsls	r0, r2, #1
    287e:	0fd2      	lsrs	r2, r2, #31
    2880:	4653      	mov	r3, sl
    2882:	0b2d      	lsrs	r5, r5, #12
    2884:	0d40      	lsrs	r0, r0, #21
    2886:	4691      	mov	r9, r2
    2888:	d100      	bne.n	288c <__aeabi_dmul+0x60>
    288a:	e076      	b.n	297a <__aeabi_dmul+0x14e>
    288c:	4a5e      	ldr	r2, [pc, #376]	; (2a08 <__aeabi_dmul+0x1dc>)
    288e:	4290      	cmp	r0, r2
    2890:	d06c      	beq.n	296c <__aeabi_dmul+0x140>
    2892:	2280      	movs	r2, #128	; 0x80
    2894:	0f5b      	lsrs	r3, r3, #29
    2896:	0412      	lsls	r2, r2, #16
    2898:	4313      	orrs	r3, r2
    289a:	4a5c      	ldr	r2, [pc, #368]	; (2a0c <__aeabi_dmul+0x1e0>)
    289c:	00ed      	lsls	r5, r5, #3
    289e:	4694      	mov	ip, r2
    28a0:	431d      	orrs	r5, r3
    28a2:	4653      	mov	r3, sl
    28a4:	2200      	movs	r2, #0
    28a6:	00db      	lsls	r3, r3, #3
    28a8:	4460      	add	r0, ip
    28aa:	4649      	mov	r1, r9
    28ac:	1836      	adds	r6, r6, r0
    28ae:	1c70      	adds	r0, r6, #1
    28b0:	4061      	eors	r1, r4
    28b2:	9002      	str	r0, [sp, #8]
    28b4:	4317      	orrs	r7, r2
    28b6:	2f0f      	cmp	r7, #15
    28b8:	d900      	bls.n	28bc <__aeabi_dmul+0x90>
    28ba:	e0af      	b.n	2a1c <__aeabi_dmul+0x1f0>
    28bc:	4854      	ldr	r0, [pc, #336]	; (2a10 <__aeabi_dmul+0x1e4>)
    28be:	00bf      	lsls	r7, r7, #2
    28c0:	59c7      	ldr	r7, [r0, r7]
    28c2:	46bf      	mov	pc, r7
    28c4:	465b      	mov	r3, fp
    28c6:	431f      	orrs	r7, r3
    28c8:	d000      	beq.n	28cc <__aeabi_dmul+0xa0>
    28ca:	e088      	b.n	29de <__aeabi_dmul+0x1b2>
    28cc:	2300      	movs	r3, #0
    28ce:	469b      	mov	fp, r3
    28d0:	4698      	mov	r8, r3
    28d2:	3302      	adds	r3, #2
    28d4:	2708      	movs	r7, #8
    28d6:	9301      	str	r3, [sp, #4]
    28d8:	e7ce      	b.n	2878 <__aeabi_dmul+0x4c>
    28da:	4649      	mov	r1, r9
    28dc:	2a02      	cmp	r2, #2
    28de:	d06a      	beq.n	29b6 <__aeabi_dmul+0x18a>
    28e0:	2a03      	cmp	r2, #3
    28e2:	d100      	bne.n	28e6 <__aeabi_dmul+0xba>
    28e4:	e209      	b.n	2cfa <__aeabi_dmul+0x4ce>
    28e6:	2a01      	cmp	r2, #1
    28e8:	d000      	beq.n	28ec <__aeabi_dmul+0xc0>
    28ea:	e1bb      	b.n	2c64 <__aeabi_dmul+0x438>
    28ec:	4011      	ands	r1, r2
    28ee:	2200      	movs	r2, #0
    28f0:	2300      	movs	r3, #0
    28f2:	2500      	movs	r5, #0
    28f4:	4690      	mov	r8, r2
    28f6:	b2cc      	uxtb	r4, r1
    28f8:	2100      	movs	r1, #0
    28fa:	032d      	lsls	r5, r5, #12
    28fc:	0d0a      	lsrs	r2, r1, #20
    28fe:	0512      	lsls	r2, r2, #20
    2900:	0b2d      	lsrs	r5, r5, #12
    2902:	4315      	orrs	r5, r2
    2904:	4a43      	ldr	r2, [pc, #268]	; (2a14 <__aeabi_dmul+0x1e8>)
    2906:	051b      	lsls	r3, r3, #20
    2908:	4015      	ands	r5, r2
    290a:	431d      	orrs	r5, r3
    290c:	006d      	lsls	r5, r5, #1
    290e:	07e4      	lsls	r4, r4, #31
    2910:	086d      	lsrs	r5, r5, #1
    2912:	4325      	orrs	r5, r4
    2914:	4640      	mov	r0, r8
    2916:	0029      	movs	r1, r5
    2918:	b007      	add	sp, #28
    291a:	bc3c      	pop	{r2, r3, r4, r5}
    291c:	4690      	mov	r8, r2
    291e:	4699      	mov	r9, r3
    2920:	46a2      	mov	sl, r4
    2922:	46ab      	mov	fp, r5
    2924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2926:	4303      	orrs	r3, r0
    2928:	d052      	beq.n	29d0 <__aeabi_dmul+0x1a4>
    292a:	465b      	mov	r3, fp
    292c:	2b00      	cmp	r3, #0
    292e:	d100      	bne.n	2932 <__aeabi_dmul+0x106>
    2930:	e18a      	b.n	2c48 <__aeabi_dmul+0x41c>
    2932:	4658      	mov	r0, fp
    2934:	f000 fb16 	bl	2f64 <__clzsi2>
    2938:	0003      	movs	r3, r0
    293a:	3b0b      	subs	r3, #11
    293c:	2b1c      	cmp	r3, #28
    293e:	dd00      	ble.n	2942 <__aeabi_dmul+0x116>
    2940:	e17b      	b.n	2c3a <__aeabi_dmul+0x40e>
    2942:	221d      	movs	r2, #29
    2944:	1ad3      	subs	r3, r2, r3
    2946:	003a      	movs	r2, r7
    2948:	0001      	movs	r1, r0
    294a:	465d      	mov	r5, fp
    294c:	40da      	lsrs	r2, r3
    294e:	3908      	subs	r1, #8
    2950:	408d      	lsls	r5, r1
    2952:	0013      	movs	r3, r2
    2954:	408f      	lsls	r7, r1
    2956:	432b      	orrs	r3, r5
    2958:	469b      	mov	fp, r3
    295a:	46b8      	mov	r8, r7
    295c:	4b2e      	ldr	r3, [pc, #184]	; (2a18 <__aeabi_dmul+0x1ec>)
    295e:	2700      	movs	r7, #0
    2960:	469c      	mov	ip, r3
    2962:	2300      	movs	r3, #0
    2964:	4460      	add	r0, ip
    2966:	4246      	negs	r6, r0
    2968:	9301      	str	r3, [sp, #4]
    296a:	e785      	b.n	2878 <__aeabi_dmul+0x4c>
    296c:	4652      	mov	r2, sl
    296e:	432a      	orrs	r2, r5
    2970:	d12c      	bne.n	29cc <__aeabi_dmul+0x1a0>
    2972:	2500      	movs	r5, #0
    2974:	2300      	movs	r3, #0
    2976:	2202      	movs	r2, #2
    2978:	e797      	b.n	28aa <__aeabi_dmul+0x7e>
    297a:	4652      	mov	r2, sl
    297c:	432a      	orrs	r2, r5
    297e:	d021      	beq.n	29c4 <__aeabi_dmul+0x198>
    2980:	2d00      	cmp	r5, #0
    2982:	d100      	bne.n	2986 <__aeabi_dmul+0x15a>
    2984:	e154      	b.n	2c30 <__aeabi_dmul+0x404>
    2986:	0028      	movs	r0, r5
    2988:	f000 faec 	bl	2f64 <__clzsi2>
    298c:	0003      	movs	r3, r0
    298e:	3b0b      	subs	r3, #11
    2990:	2b1c      	cmp	r3, #28
    2992:	dd00      	ble.n	2996 <__aeabi_dmul+0x16a>
    2994:	e146      	b.n	2c24 <__aeabi_dmul+0x3f8>
    2996:	211d      	movs	r1, #29
    2998:	1acb      	subs	r3, r1, r3
    299a:	4651      	mov	r1, sl
    299c:	0002      	movs	r2, r0
    299e:	40d9      	lsrs	r1, r3
    29a0:	4653      	mov	r3, sl
    29a2:	3a08      	subs	r2, #8
    29a4:	4095      	lsls	r5, r2
    29a6:	4093      	lsls	r3, r2
    29a8:	430d      	orrs	r5, r1
    29aa:	4a1b      	ldr	r2, [pc, #108]	; (2a18 <__aeabi_dmul+0x1ec>)
    29ac:	4694      	mov	ip, r2
    29ae:	4460      	add	r0, ip
    29b0:	4240      	negs	r0, r0
    29b2:	2200      	movs	r2, #0
    29b4:	e779      	b.n	28aa <__aeabi_dmul+0x7e>
    29b6:	2401      	movs	r4, #1
    29b8:	2200      	movs	r2, #0
    29ba:	400c      	ands	r4, r1
    29bc:	4b12      	ldr	r3, [pc, #72]	; (2a08 <__aeabi_dmul+0x1dc>)
    29be:	2500      	movs	r5, #0
    29c0:	4690      	mov	r8, r2
    29c2:	e799      	b.n	28f8 <__aeabi_dmul+0xcc>
    29c4:	2500      	movs	r5, #0
    29c6:	2300      	movs	r3, #0
    29c8:	2201      	movs	r2, #1
    29ca:	e76e      	b.n	28aa <__aeabi_dmul+0x7e>
    29cc:	2203      	movs	r2, #3
    29ce:	e76c      	b.n	28aa <__aeabi_dmul+0x7e>
    29d0:	2300      	movs	r3, #0
    29d2:	469b      	mov	fp, r3
    29d4:	4698      	mov	r8, r3
    29d6:	3301      	adds	r3, #1
    29d8:	2704      	movs	r7, #4
    29da:	9301      	str	r3, [sp, #4]
    29dc:	e74c      	b.n	2878 <__aeabi_dmul+0x4c>
    29de:	2303      	movs	r3, #3
    29e0:	270c      	movs	r7, #12
    29e2:	9301      	str	r3, [sp, #4]
    29e4:	e748      	b.n	2878 <__aeabi_dmul+0x4c>
    29e6:	2300      	movs	r3, #0
    29e8:	2580      	movs	r5, #128	; 0x80
    29ea:	4698      	mov	r8, r3
    29ec:	2400      	movs	r4, #0
    29ee:	032d      	lsls	r5, r5, #12
    29f0:	4b05      	ldr	r3, [pc, #20]	; (2a08 <__aeabi_dmul+0x1dc>)
    29f2:	e781      	b.n	28f8 <__aeabi_dmul+0xcc>
    29f4:	465d      	mov	r5, fp
    29f6:	4643      	mov	r3, r8
    29f8:	9a01      	ldr	r2, [sp, #4]
    29fa:	e76f      	b.n	28dc <__aeabi_dmul+0xb0>
    29fc:	465d      	mov	r5, fp
    29fe:	4643      	mov	r3, r8
    2a00:	0021      	movs	r1, r4
    2a02:	9a01      	ldr	r2, [sp, #4]
    2a04:	e76a      	b.n	28dc <__aeabi_dmul+0xb0>
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	000007ff 	.word	0x000007ff
    2a0c:	fffffc01 	.word	0xfffffc01
    2a10:	000033f0 	.word	0x000033f0
    2a14:	800fffff 	.word	0x800fffff
    2a18:	000003f3 	.word	0x000003f3
    2a1c:	4642      	mov	r2, r8
    2a1e:	0c12      	lsrs	r2, r2, #16
    2a20:	4691      	mov	r9, r2
    2a22:	0c1a      	lsrs	r2, r3, #16
    2a24:	4694      	mov	ip, r2
    2a26:	4642      	mov	r2, r8
    2a28:	0417      	lsls	r7, r2, #16
    2a2a:	464a      	mov	r2, r9
    2a2c:	041b      	lsls	r3, r3, #16
    2a2e:	0c1b      	lsrs	r3, r3, #16
    2a30:	435a      	muls	r2, r3
    2a32:	4660      	mov	r0, ip
    2a34:	4690      	mov	r8, r2
    2a36:	464a      	mov	r2, r9
    2a38:	4342      	muls	r2, r0
    2a3a:	0010      	movs	r0, r2
    2a3c:	9203      	str	r2, [sp, #12]
    2a3e:	4662      	mov	r2, ip
    2a40:	001c      	movs	r4, r3
    2a42:	0c3f      	lsrs	r7, r7, #16
    2a44:	437a      	muls	r2, r7
    2a46:	437c      	muls	r4, r7
    2a48:	4442      	add	r2, r8
    2a4a:	9201      	str	r2, [sp, #4]
    2a4c:	0c22      	lsrs	r2, r4, #16
    2a4e:	4692      	mov	sl, r2
    2a50:	9a01      	ldr	r2, [sp, #4]
    2a52:	4452      	add	r2, sl
    2a54:	4590      	cmp	r8, r2
    2a56:	d906      	bls.n	2a66 <__aeabi_dmul+0x23a>
    2a58:	4682      	mov	sl, r0
    2a5a:	2080      	movs	r0, #128	; 0x80
    2a5c:	0240      	lsls	r0, r0, #9
    2a5e:	4680      	mov	r8, r0
    2a60:	44c2      	add	sl, r8
    2a62:	4650      	mov	r0, sl
    2a64:	9003      	str	r0, [sp, #12]
    2a66:	0c10      	lsrs	r0, r2, #16
    2a68:	9004      	str	r0, [sp, #16]
    2a6a:	4648      	mov	r0, r9
    2a6c:	0424      	lsls	r4, r4, #16
    2a6e:	0c24      	lsrs	r4, r4, #16
    2a70:	0412      	lsls	r2, r2, #16
    2a72:	1912      	adds	r2, r2, r4
    2a74:	9205      	str	r2, [sp, #20]
    2a76:	0c2a      	lsrs	r2, r5, #16
    2a78:	042d      	lsls	r5, r5, #16
    2a7a:	0c2d      	lsrs	r5, r5, #16
    2a7c:	4368      	muls	r0, r5
    2a7e:	002c      	movs	r4, r5
    2a80:	4682      	mov	sl, r0
    2a82:	4648      	mov	r0, r9
    2a84:	437c      	muls	r4, r7
    2a86:	4350      	muls	r0, r2
    2a88:	4681      	mov	r9, r0
    2a8a:	0c20      	lsrs	r0, r4, #16
    2a8c:	4680      	mov	r8, r0
    2a8e:	4357      	muls	r7, r2
    2a90:	4457      	add	r7, sl
    2a92:	4447      	add	r7, r8
    2a94:	45ba      	cmp	sl, r7
    2a96:	d903      	bls.n	2aa0 <__aeabi_dmul+0x274>
    2a98:	2080      	movs	r0, #128	; 0x80
    2a9a:	0240      	lsls	r0, r0, #9
    2a9c:	4680      	mov	r8, r0
    2a9e:	44c1      	add	r9, r8
    2aa0:	0c38      	lsrs	r0, r7, #16
    2aa2:	043f      	lsls	r7, r7, #16
    2aa4:	46b8      	mov	r8, r7
    2aa6:	4448      	add	r0, r9
    2aa8:	0424      	lsls	r4, r4, #16
    2aaa:	0c24      	lsrs	r4, r4, #16
    2aac:	9001      	str	r0, [sp, #4]
    2aae:	9804      	ldr	r0, [sp, #16]
    2ab0:	44a0      	add	r8, r4
    2ab2:	4440      	add	r0, r8
    2ab4:	9004      	str	r0, [sp, #16]
    2ab6:	4658      	mov	r0, fp
    2ab8:	0c00      	lsrs	r0, r0, #16
    2aba:	4681      	mov	r9, r0
    2abc:	4658      	mov	r0, fp
    2abe:	0404      	lsls	r4, r0, #16
    2ac0:	0c20      	lsrs	r0, r4, #16
    2ac2:	4682      	mov	sl, r0
    2ac4:	0007      	movs	r7, r0
    2ac6:	4648      	mov	r0, r9
    2ac8:	435f      	muls	r7, r3
    2aca:	464c      	mov	r4, r9
    2acc:	4343      	muls	r3, r0
    2ace:	4660      	mov	r0, ip
    2ad0:	4360      	muls	r0, r4
    2ad2:	4664      	mov	r4, ip
    2ad4:	4683      	mov	fp, r0
    2ad6:	4650      	mov	r0, sl
    2ad8:	4344      	muls	r4, r0
    2ada:	0c38      	lsrs	r0, r7, #16
    2adc:	4684      	mov	ip, r0
    2ade:	18e4      	adds	r4, r4, r3
    2ae0:	4464      	add	r4, ip
    2ae2:	42a3      	cmp	r3, r4
    2ae4:	d903      	bls.n	2aee <__aeabi_dmul+0x2c2>
    2ae6:	2380      	movs	r3, #128	; 0x80
    2ae8:	025b      	lsls	r3, r3, #9
    2aea:	469c      	mov	ip, r3
    2aec:	44e3      	add	fp, ip
    2aee:	4648      	mov	r0, r9
    2af0:	043f      	lsls	r7, r7, #16
    2af2:	0c23      	lsrs	r3, r4, #16
    2af4:	0c3f      	lsrs	r7, r7, #16
    2af6:	0424      	lsls	r4, r4, #16
    2af8:	19e4      	adds	r4, r4, r7
    2afa:	4657      	mov	r7, sl
    2afc:	4368      	muls	r0, r5
    2afe:	436f      	muls	r7, r5
    2b00:	4684      	mov	ip, r0
    2b02:	464d      	mov	r5, r9
    2b04:	4650      	mov	r0, sl
    2b06:	4355      	muls	r5, r2
    2b08:	4342      	muls	r2, r0
    2b0a:	0c38      	lsrs	r0, r7, #16
    2b0c:	4681      	mov	r9, r0
    2b0e:	4462      	add	r2, ip
    2b10:	444a      	add	r2, r9
    2b12:	445b      	add	r3, fp
    2b14:	4594      	cmp	ip, r2
    2b16:	d903      	bls.n	2b20 <__aeabi_dmul+0x2f4>
    2b18:	2080      	movs	r0, #128	; 0x80
    2b1a:	0240      	lsls	r0, r0, #9
    2b1c:	4684      	mov	ip, r0
    2b1e:	4465      	add	r5, ip
    2b20:	9803      	ldr	r0, [sp, #12]
    2b22:	043f      	lsls	r7, r7, #16
    2b24:	4683      	mov	fp, r0
    2b26:	9804      	ldr	r0, [sp, #16]
    2b28:	0c3f      	lsrs	r7, r7, #16
    2b2a:	4684      	mov	ip, r0
    2b2c:	44e3      	add	fp, ip
    2b2e:	45c3      	cmp	fp, r8
    2b30:	4180      	sbcs	r0, r0
    2b32:	4240      	negs	r0, r0
    2b34:	4682      	mov	sl, r0
    2b36:	0410      	lsls	r0, r2, #16
    2b38:	4684      	mov	ip, r0
    2b3a:	9801      	ldr	r0, [sp, #4]
    2b3c:	4467      	add	r7, ip
    2b3e:	4684      	mov	ip, r0
    2b40:	4467      	add	r7, ip
    2b42:	44a3      	add	fp, r4
    2b44:	46bc      	mov	ip, r7
    2b46:	45a3      	cmp	fp, r4
    2b48:	41a4      	sbcs	r4, r4
    2b4a:	4699      	mov	r9, r3
    2b4c:	44d4      	add	ip, sl
    2b4e:	4264      	negs	r4, r4
    2b50:	4287      	cmp	r7, r0
    2b52:	41bf      	sbcs	r7, r7
    2b54:	45d4      	cmp	ip, sl
    2b56:	4180      	sbcs	r0, r0
    2b58:	44e1      	add	r9, ip
    2b5a:	46a0      	mov	r8, r4
    2b5c:	4599      	cmp	r9, r3
    2b5e:	419b      	sbcs	r3, r3
    2b60:	427f      	negs	r7, r7
    2b62:	4240      	negs	r0, r0
    2b64:	44c8      	add	r8, r9
    2b66:	4307      	orrs	r7, r0
    2b68:	0c12      	lsrs	r2, r2, #16
    2b6a:	18ba      	adds	r2, r7, r2
    2b6c:	45a0      	cmp	r8, r4
    2b6e:	41a4      	sbcs	r4, r4
    2b70:	425f      	negs	r7, r3
    2b72:	003b      	movs	r3, r7
    2b74:	4264      	negs	r4, r4
    2b76:	4323      	orrs	r3, r4
    2b78:	18d7      	adds	r7, r2, r3
    2b7a:	4643      	mov	r3, r8
    2b7c:	197d      	adds	r5, r7, r5
    2b7e:	0ddb      	lsrs	r3, r3, #23
    2b80:	026d      	lsls	r5, r5, #9
    2b82:	431d      	orrs	r5, r3
    2b84:	465b      	mov	r3, fp
    2b86:	025a      	lsls	r2, r3, #9
    2b88:	9b05      	ldr	r3, [sp, #20]
    2b8a:	431a      	orrs	r2, r3
    2b8c:	1e53      	subs	r3, r2, #1
    2b8e:	419a      	sbcs	r2, r3
    2b90:	465b      	mov	r3, fp
    2b92:	0ddb      	lsrs	r3, r3, #23
    2b94:	431a      	orrs	r2, r3
    2b96:	4643      	mov	r3, r8
    2b98:	025b      	lsls	r3, r3, #9
    2b9a:	4313      	orrs	r3, r2
    2b9c:	01ea      	lsls	r2, r5, #7
    2b9e:	d507      	bpl.n	2bb0 <__aeabi_dmul+0x384>
    2ba0:	2201      	movs	r2, #1
    2ba2:	085c      	lsrs	r4, r3, #1
    2ba4:	4013      	ands	r3, r2
    2ba6:	4323      	orrs	r3, r4
    2ba8:	07ea      	lsls	r2, r5, #31
    2baa:	9e02      	ldr	r6, [sp, #8]
    2bac:	4313      	orrs	r3, r2
    2bae:	086d      	lsrs	r5, r5, #1
    2bb0:	4a57      	ldr	r2, [pc, #348]	; (2d10 <__aeabi_dmul+0x4e4>)
    2bb2:	18b2      	adds	r2, r6, r2
    2bb4:	2a00      	cmp	r2, #0
    2bb6:	dd4b      	ble.n	2c50 <__aeabi_dmul+0x424>
    2bb8:	0758      	lsls	r0, r3, #29
    2bba:	d009      	beq.n	2bd0 <__aeabi_dmul+0x3a4>
    2bbc:	200f      	movs	r0, #15
    2bbe:	4018      	ands	r0, r3
    2bc0:	2804      	cmp	r0, #4
    2bc2:	d005      	beq.n	2bd0 <__aeabi_dmul+0x3a4>
    2bc4:	1d18      	adds	r0, r3, #4
    2bc6:	4298      	cmp	r0, r3
    2bc8:	419b      	sbcs	r3, r3
    2bca:	425b      	negs	r3, r3
    2bcc:	18ed      	adds	r5, r5, r3
    2bce:	0003      	movs	r3, r0
    2bd0:	01e8      	lsls	r0, r5, #7
    2bd2:	d504      	bpl.n	2bde <__aeabi_dmul+0x3b2>
    2bd4:	4a4f      	ldr	r2, [pc, #316]	; (2d14 <__aeabi_dmul+0x4e8>)
    2bd6:	4015      	ands	r5, r2
    2bd8:	2280      	movs	r2, #128	; 0x80
    2bda:	00d2      	lsls	r2, r2, #3
    2bdc:	18b2      	adds	r2, r6, r2
    2bde:	484e      	ldr	r0, [pc, #312]	; (2d18 <__aeabi_dmul+0x4ec>)
    2be0:	4282      	cmp	r2, r0
    2be2:	dd00      	ble.n	2be6 <__aeabi_dmul+0x3ba>
    2be4:	e6e7      	b.n	29b6 <__aeabi_dmul+0x18a>
    2be6:	2401      	movs	r4, #1
    2be8:	08db      	lsrs	r3, r3, #3
    2bea:	0768      	lsls	r0, r5, #29
    2bec:	4318      	orrs	r0, r3
    2bee:	026d      	lsls	r5, r5, #9
    2bf0:	0553      	lsls	r3, r2, #21
    2bf2:	4680      	mov	r8, r0
    2bf4:	0b2d      	lsrs	r5, r5, #12
    2bf6:	0d5b      	lsrs	r3, r3, #21
    2bf8:	400c      	ands	r4, r1
    2bfa:	e67d      	b.n	28f8 <__aeabi_dmul+0xcc>
    2bfc:	2280      	movs	r2, #128	; 0x80
    2bfe:	4659      	mov	r1, fp
    2c00:	0312      	lsls	r2, r2, #12
    2c02:	4211      	tst	r1, r2
    2c04:	d008      	beq.n	2c18 <__aeabi_dmul+0x3ec>
    2c06:	4215      	tst	r5, r2
    2c08:	d106      	bne.n	2c18 <__aeabi_dmul+0x3ec>
    2c0a:	4315      	orrs	r5, r2
    2c0c:	032d      	lsls	r5, r5, #12
    2c0e:	4698      	mov	r8, r3
    2c10:	0b2d      	lsrs	r5, r5, #12
    2c12:	464c      	mov	r4, r9
    2c14:	4b41      	ldr	r3, [pc, #260]	; (2d1c <__aeabi_dmul+0x4f0>)
    2c16:	e66f      	b.n	28f8 <__aeabi_dmul+0xcc>
    2c18:	465d      	mov	r5, fp
    2c1a:	4315      	orrs	r5, r2
    2c1c:	032d      	lsls	r5, r5, #12
    2c1e:	0b2d      	lsrs	r5, r5, #12
    2c20:	4b3e      	ldr	r3, [pc, #248]	; (2d1c <__aeabi_dmul+0x4f0>)
    2c22:	e669      	b.n	28f8 <__aeabi_dmul+0xcc>
    2c24:	0003      	movs	r3, r0
    2c26:	4655      	mov	r5, sl
    2c28:	3b28      	subs	r3, #40	; 0x28
    2c2a:	409d      	lsls	r5, r3
    2c2c:	2300      	movs	r3, #0
    2c2e:	e6bc      	b.n	29aa <__aeabi_dmul+0x17e>
    2c30:	4650      	mov	r0, sl
    2c32:	f000 f997 	bl	2f64 <__clzsi2>
    2c36:	3020      	adds	r0, #32
    2c38:	e6a8      	b.n	298c <__aeabi_dmul+0x160>
    2c3a:	0003      	movs	r3, r0
    2c3c:	3b28      	subs	r3, #40	; 0x28
    2c3e:	409f      	lsls	r7, r3
    2c40:	2300      	movs	r3, #0
    2c42:	46bb      	mov	fp, r7
    2c44:	4698      	mov	r8, r3
    2c46:	e689      	b.n	295c <__aeabi_dmul+0x130>
    2c48:	f000 f98c 	bl	2f64 <__clzsi2>
    2c4c:	3020      	adds	r0, #32
    2c4e:	e673      	b.n	2938 <__aeabi_dmul+0x10c>
    2c50:	2401      	movs	r4, #1
    2c52:	1aa6      	subs	r6, r4, r2
    2c54:	2e38      	cmp	r6, #56	; 0x38
    2c56:	dd07      	ble.n	2c68 <__aeabi_dmul+0x43c>
    2c58:	2200      	movs	r2, #0
    2c5a:	400c      	ands	r4, r1
    2c5c:	2300      	movs	r3, #0
    2c5e:	2500      	movs	r5, #0
    2c60:	4690      	mov	r8, r2
    2c62:	e649      	b.n	28f8 <__aeabi_dmul+0xcc>
    2c64:	9e02      	ldr	r6, [sp, #8]
    2c66:	e7a3      	b.n	2bb0 <__aeabi_dmul+0x384>
    2c68:	2e1f      	cmp	r6, #31
    2c6a:	dc20      	bgt.n	2cae <__aeabi_dmul+0x482>
    2c6c:	2220      	movs	r2, #32
    2c6e:	002c      	movs	r4, r5
    2c70:	0018      	movs	r0, r3
    2c72:	1b92      	subs	r2, r2, r6
    2c74:	40f0      	lsrs	r0, r6
    2c76:	4094      	lsls	r4, r2
    2c78:	4093      	lsls	r3, r2
    2c7a:	4304      	orrs	r4, r0
    2c7c:	1e58      	subs	r0, r3, #1
    2c7e:	4183      	sbcs	r3, r0
    2c80:	431c      	orrs	r4, r3
    2c82:	40f5      	lsrs	r5, r6
    2c84:	0763      	lsls	r3, r4, #29
    2c86:	d009      	beq.n	2c9c <__aeabi_dmul+0x470>
    2c88:	230f      	movs	r3, #15
    2c8a:	4023      	ands	r3, r4
    2c8c:	2b04      	cmp	r3, #4
    2c8e:	d005      	beq.n	2c9c <__aeabi_dmul+0x470>
    2c90:	0023      	movs	r3, r4
    2c92:	1d1c      	adds	r4, r3, #4
    2c94:	429c      	cmp	r4, r3
    2c96:	4192      	sbcs	r2, r2
    2c98:	4252      	negs	r2, r2
    2c9a:	18ad      	adds	r5, r5, r2
    2c9c:	022b      	lsls	r3, r5, #8
    2c9e:	d51f      	bpl.n	2ce0 <__aeabi_dmul+0x4b4>
    2ca0:	2401      	movs	r4, #1
    2ca2:	2200      	movs	r2, #0
    2ca4:	400c      	ands	r4, r1
    2ca6:	2301      	movs	r3, #1
    2ca8:	2500      	movs	r5, #0
    2caa:	4690      	mov	r8, r2
    2cac:	e624      	b.n	28f8 <__aeabi_dmul+0xcc>
    2cae:	201f      	movs	r0, #31
    2cb0:	002c      	movs	r4, r5
    2cb2:	4240      	negs	r0, r0
    2cb4:	1a82      	subs	r2, r0, r2
    2cb6:	40d4      	lsrs	r4, r2
    2cb8:	2e20      	cmp	r6, #32
    2cba:	d01c      	beq.n	2cf6 <__aeabi_dmul+0x4ca>
    2cbc:	2240      	movs	r2, #64	; 0x40
    2cbe:	1b96      	subs	r6, r2, r6
    2cc0:	40b5      	lsls	r5, r6
    2cc2:	432b      	orrs	r3, r5
    2cc4:	1e58      	subs	r0, r3, #1
    2cc6:	4183      	sbcs	r3, r0
    2cc8:	2007      	movs	r0, #7
    2cca:	4323      	orrs	r3, r4
    2ccc:	4018      	ands	r0, r3
    2cce:	2500      	movs	r5, #0
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d009      	beq.n	2ce8 <__aeabi_dmul+0x4bc>
    2cd4:	220f      	movs	r2, #15
    2cd6:	2500      	movs	r5, #0
    2cd8:	401a      	ands	r2, r3
    2cda:	001c      	movs	r4, r3
    2cdc:	2a04      	cmp	r2, #4
    2cde:	d1d8      	bne.n	2c92 <__aeabi_dmul+0x466>
    2ce0:	0023      	movs	r3, r4
    2ce2:	0768      	lsls	r0, r5, #29
    2ce4:	026d      	lsls	r5, r5, #9
    2ce6:	0b2d      	lsrs	r5, r5, #12
    2ce8:	2401      	movs	r4, #1
    2cea:	08db      	lsrs	r3, r3, #3
    2cec:	4303      	orrs	r3, r0
    2cee:	4698      	mov	r8, r3
    2cf0:	400c      	ands	r4, r1
    2cf2:	2300      	movs	r3, #0
    2cf4:	e600      	b.n	28f8 <__aeabi_dmul+0xcc>
    2cf6:	2500      	movs	r5, #0
    2cf8:	e7e3      	b.n	2cc2 <__aeabi_dmul+0x496>
    2cfa:	2280      	movs	r2, #128	; 0x80
    2cfc:	2401      	movs	r4, #1
    2cfe:	0312      	lsls	r2, r2, #12
    2d00:	4315      	orrs	r5, r2
    2d02:	032d      	lsls	r5, r5, #12
    2d04:	4698      	mov	r8, r3
    2d06:	0b2d      	lsrs	r5, r5, #12
    2d08:	400c      	ands	r4, r1
    2d0a:	4b04      	ldr	r3, [pc, #16]	; (2d1c <__aeabi_dmul+0x4f0>)
    2d0c:	e5f4      	b.n	28f8 <__aeabi_dmul+0xcc>
    2d0e:	46c0      	nop			; (mov r8, r8)
    2d10:	000003ff 	.word	0x000003ff
    2d14:	feffffff 	.word	0xfeffffff
    2d18:	000007fe 	.word	0x000007fe
    2d1c:	000007ff 	.word	0x000007ff

00002d20 <__aeabi_i2d>:
    2d20:	b570      	push	{r4, r5, r6, lr}
    2d22:	2800      	cmp	r0, #0
    2d24:	d030      	beq.n	2d88 <__aeabi_i2d+0x68>
    2d26:	17c3      	asrs	r3, r0, #31
    2d28:	18c4      	adds	r4, r0, r3
    2d2a:	405c      	eors	r4, r3
    2d2c:	0fc5      	lsrs	r5, r0, #31
    2d2e:	0020      	movs	r0, r4
    2d30:	f000 f918 	bl	2f64 <__clzsi2>
    2d34:	4b17      	ldr	r3, [pc, #92]	; (2d94 <__aeabi_i2d+0x74>)
    2d36:	4a18      	ldr	r2, [pc, #96]	; (2d98 <__aeabi_i2d+0x78>)
    2d38:	1a1b      	subs	r3, r3, r0
    2d3a:	1ad2      	subs	r2, r2, r3
    2d3c:	2a1f      	cmp	r2, #31
    2d3e:	dd18      	ble.n	2d72 <__aeabi_i2d+0x52>
    2d40:	4a16      	ldr	r2, [pc, #88]	; (2d9c <__aeabi_i2d+0x7c>)
    2d42:	1ad2      	subs	r2, r2, r3
    2d44:	4094      	lsls	r4, r2
    2d46:	2200      	movs	r2, #0
    2d48:	0324      	lsls	r4, r4, #12
    2d4a:	055b      	lsls	r3, r3, #21
    2d4c:	0b24      	lsrs	r4, r4, #12
    2d4e:	0d5b      	lsrs	r3, r3, #21
    2d50:	2100      	movs	r1, #0
    2d52:	0010      	movs	r0, r2
    2d54:	0324      	lsls	r4, r4, #12
    2d56:	0d0a      	lsrs	r2, r1, #20
    2d58:	0512      	lsls	r2, r2, #20
    2d5a:	0b24      	lsrs	r4, r4, #12
    2d5c:	4314      	orrs	r4, r2
    2d5e:	4a10      	ldr	r2, [pc, #64]	; (2da0 <__aeabi_i2d+0x80>)
    2d60:	051b      	lsls	r3, r3, #20
    2d62:	4014      	ands	r4, r2
    2d64:	431c      	orrs	r4, r3
    2d66:	0064      	lsls	r4, r4, #1
    2d68:	07ed      	lsls	r5, r5, #31
    2d6a:	0864      	lsrs	r4, r4, #1
    2d6c:	432c      	orrs	r4, r5
    2d6e:	0021      	movs	r1, r4
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	0021      	movs	r1, r4
    2d74:	4091      	lsls	r1, r2
    2d76:	000a      	movs	r2, r1
    2d78:	210b      	movs	r1, #11
    2d7a:	1a08      	subs	r0, r1, r0
    2d7c:	40c4      	lsrs	r4, r0
    2d7e:	055b      	lsls	r3, r3, #21
    2d80:	0324      	lsls	r4, r4, #12
    2d82:	0b24      	lsrs	r4, r4, #12
    2d84:	0d5b      	lsrs	r3, r3, #21
    2d86:	e7e3      	b.n	2d50 <__aeabi_i2d+0x30>
    2d88:	2500      	movs	r5, #0
    2d8a:	2300      	movs	r3, #0
    2d8c:	2400      	movs	r4, #0
    2d8e:	2200      	movs	r2, #0
    2d90:	e7de      	b.n	2d50 <__aeabi_i2d+0x30>
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	0000041e 	.word	0x0000041e
    2d98:	00000433 	.word	0x00000433
    2d9c:	00000413 	.word	0x00000413
    2da0:	800fffff 	.word	0x800fffff

00002da4 <__aeabi_f2d>:
    2da4:	0042      	lsls	r2, r0, #1
    2da6:	0e12      	lsrs	r2, r2, #24
    2da8:	1c51      	adds	r1, r2, #1
    2daa:	0243      	lsls	r3, r0, #9
    2dac:	b2c9      	uxtb	r1, r1
    2dae:	b570      	push	{r4, r5, r6, lr}
    2db0:	0a5d      	lsrs	r5, r3, #9
    2db2:	0fc4      	lsrs	r4, r0, #31
    2db4:	2901      	cmp	r1, #1
    2db6:	dd15      	ble.n	2de4 <__aeabi_f2d+0x40>
    2db8:	21e0      	movs	r1, #224	; 0xe0
    2dba:	0089      	lsls	r1, r1, #2
    2dbc:	468c      	mov	ip, r1
    2dbe:	076d      	lsls	r5, r5, #29
    2dc0:	0b1b      	lsrs	r3, r3, #12
    2dc2:	4462      	add	r2, ip
    2dc4:	2100      	movs	r1, #0
    2dc6:	0028      	movs	r0, r5
    2dc8:	0d0d      	lsrs	r5, r1, #20
    2dca:	052d      	lsls	r5, r5, #20
    2dcc:	432b      	orrs	r3, r5
    2dce:	4d1c      	ldr	r5, [pc, #112]	; (2e40 <__aeabi_f2d+0x9c>)
    2dd0:	0552      	lsls	r2, r2, #21
    2dd2:	402b      	ands	r3, r5
    2dd4:	0852      	lsrs	r2, r2, #1
    2dd6:	4313      	orrs	r3, r2
    2dd8:	005b      	lsls	r3, r3, #1
    2dda:	07e4      	lsls	r4, r4, #31
    2ddc:	085b      	lsrs	r3, r3, #1
    2dde:	4323      	orrs	r3, r4
    2de0:	0019      	movs	r1, r3
    2de2:	bd70      	pop	{r4, r5, r6, pc}
    2de4:	2a00      	cmp	r2, #0
    2de6:	d115      	bne.n	2e14 <__aeabi_f2d+0x70>
    2de8:	2d00      	cmp	r5, #0
    2dea:	d01f      	beq.n	2e2c <__aeabi_f2d+0x88>
    2dec:	0028      	movs	r0, r5
    2dee:	f000 f8b9 	bl	2f64 <__clzsi2>
    2df2:	280a      	cmp	r0, #10
    2df4:	dc1d      	bgt.n	2e32 <__aeabi_f2d+0x8e>
    2df6:	230b      	movs	r3, #11
    2df8:	002a      	movs	r2, r5
    2dfa:	1a1b      	subs	r3, r3, r0
    2dfc:	40da      	lsrs	r2, r3
    2dfe:	0013      	movs	r3, r2
    2e00:	0002      	movs	r2, r0
    2e02:	3215      	adds	r2, #21
    2e04:	4095      	lsls	r5, r2
    2e06:	4a0f      	ldr	r2, [pc, #60]	; (2e44 <__aeabi_f2d+0xa0>)
    2e08:	031b      	lsls	r3, r3, #12
    2e0a:	1a12      	subs	r2, r2, r0
    2e0c:	0552      	lsls	r2, r2, #21
    2e0e:	0b1b      	lsrs	r3, r3, #12
    2e10:	0d52      	lsrs	r2, r2, #21
    2e12:	e7d7      	b.n	2dc4 <__aeabi_f2d+0x20>
    2e14:	2d00      	cmp	r5, #0
    2e16:	d006      	beq.n	2e26 <__aeabi_f2d+0x82>
    2e18:	2280      	movs	r2, #128	; 0x80
    2e1a:	0b1b      	lsrs	r3, r3, #12
    2e1c:	0312      	lsls	r2, r2, #12
    2e1e:	4313      	orrs	r3, r2
    2e20:	076d      	lsls	r5, r5, #29
    2e22:	4a09      	ldr	r2, [pc, #36]	; (2e48 <__aeabi_f2d+0xa4>)
    2e24:	e7ce      	b.n	2dc4 <__aeabi_f2d+0x20>
    2e26:	4a08      	ldr	r2, [pc, #32]	; (2e48 <__aeabi_f2d+0xa4>)
    2e28:	2300      	movs	r3, #0
    2e2a:	e7cb      	b.n	2dc4 <__aeabi_f2d+0x20>
    2e2c:	2200      	movs	r2, #0
    2e2e:	2300      	movs	r3, #0
    2e30:	e7c8      	b.n	2dc4 <__aeabi_f2d+0x20>
    2e32:	0003      	movs	r3, r0
    2e34:	3b0b      	subs	r3, #11
    2e36:	409d      	lsls	r5, r3
    2e38:	002b      	movs	r3, r5
    2e3a:	2500      	movs	r5, #0
    2e3c:	e7e3      	b.n	2e06 <__aeabi_f2d+0x62>
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	800fffff 	.word	0x800fffff
    2e44:	00000389 	.word	0x00000389
    2e48:	000007ff 	.word	0x000007ff

00002e4c <__aeabi_d2f>:
    2e4c:	004b      	lsls	r3, r1, #1
    2e4e:	b570      	push	{r4, r5, r6, lr}
    2e50:	0d5e      	lsrs	r6, r3, #21
    2e52:	030c      	lsls	r4, r1, #12
    2e54:	1c75      	adds	r5, r6, #1
    2e56:	0a64      	lsrs	r4, r4, #9
    2e58:	0f42      	lsrs	r2, r0, #29
    2e5a:	056d      	lsls	r5, r5, #21
    2e5c:	4322      	orrs	r2, r4
    2e5e:	0fc9      	lsrs	r1, r1, #31
    2e60:	00c4      	lsls	r4, r0, #3
    2e62:	0d6d      	lsrs	r5, r5, #21
    2e64:	2d01      	cmp	r5, #1
    2e66:	dd2a      	ble.n	2ebe <__aeabi_d2f+0x72>
    2e68:	4b3b      	ldr	r3, [pc, #236]	; (2f58 <__aeabi_d2f+0x10c>)
    2e6a:	18f3      	adds	r3, r6, r3
    2e6c:	2bfe      	cmp	r3, #254	; 0xfe
    2e6e:	dc1a      	bgt.n	2ea6 <__aeabi_d2f+0x5a>
    2e70:	2b00      	cmp	r3, #0
    2e72:	dd42      	ble.n	2efa <__aeabi_d2f+0xae>
    2e74:	0180      	lsls	r0, r0, #6
    2e76:	1e45      	subs	r5, r0, #1
    2e78:	41a8      	sbcs	r0, r5
    2e7a:	00d2      	lsls	r2, r2, #3
    2e7c:	4310      	orrs	r0, r2
    2e7e:	0f62      	lsrs	r2, r4, #29
    2e80:	4302      	orrs	r2, r0
    2e82:	0750      	lsls	r0, r2, #29
    2e84:	d004      	beq.n	2e90 <__aeabi_d2f+0x44>
    2e86:	200f      	movs	r0, #15
    2e88:	4010      	ands	r0, r2
    2e8a:	2804      	cmp	r0, #4
    2e8c:	d000      	beq.n	2e90 <__aeabi_d2f+0x44>
    2e8e:	3204      	adds	r2, #4
    2e90:	2080      	movs	r0, #128	; 0x80
    2e92:	04c0      	lsls	r0, r0, #19
    2e94:	4010      	ands	r0, r2
    2e96:	d021      	beq.n	2edc <__aeabi_d2f+0x90>
    2e98:	3301      	adds	r3, #1
    2e9a:	2bff      	cmp	r3, #255	; 0xff
    2e9c:	d003      	beq.n	2ea6 <__aeabi_d2f+0x5a>
    2e9e:	0192      	lsls	r2, r2, #6
    2ea0:	0a52      	lsrs	r2, r2, #9
    2ea2:	b2db      	uxtb	r3, r3
    2ea4:	e001      	b.n	2eaa <__aeabi_d2f+0x5e>
    2ea6:	23ff      	movs	r3, #255	; 0xff
    2ea8:	2200      	movs	r2, #0
    2eaa:	0252      	lsls	r2, r2, #9
    2eac:	0a52      	lsrs	r2, r2, #9
    2eae:	05db      	lsls	r3, r3, #23
    2eb0:	4313      	orrs	r3, r2
    2eb2:	005b      	lsls	r3, r3, #1
    2eb4:	07c9      	lsls	r1, r1, #31
    2eb6:	085b      	lsrs	r3, r3, #1
    2eb8:	430b      	orrs	r3, r1
    2eba:	0018      	movs	r0, r3
    2ebc:	bd70      	pop	{r4, r5, r6, pc}
    2ebe:	2e00      	cmp	r6, #0
    2ec0:	d007      	beq.n	2ed2 <__aeabi_d2f+0x86>
    2ec2:	4314      	orrs	r4, r2
    2ec4:	d0ef      	beq.n	2ea6 <__aeabi_d2f+0x5a>
    2ec6:	2080      	movs	r0, #128	; 0x80
    2ec8:	00d2      	lsls	r2, r2, #3
    2eca:	0480      	lsls	r0, r0, #18
    2ecc:	4302      	orrs	r2, r0
    2ece:	23ff      	movs	r3, #255	; 0xff
    2ed0:	e7d7      	b.n	2e82 <__aeabi_d2f+0x36>
    2ed2:	4322      	orrs	r2, r4
    2ed4:	2300      	movs	r3, #0
    2ed6:	2a00      	cmp	r2, #0
    2ed8:	d003      	beq.n	2ee2 <__aeabi_d2f+0x96>
    2eda:	2205      	movs	r2, #5
    2edc:	08d2      	lsrs	r2, r2, #3
    2ede:	2bff      	cmp	r3, #255	; 0xff
    2ee0:	d003      	beq.n	2eea <__aeabi_d2f+0x9e>
    2ee2:	0252      	lsls	r2, r2, #9
    2ee4:	0a52      	lsrs	r2, r2, #9
    2ee6:	b2db      	uxtb	r3, r3
    2ee8:	e7df      	b.n	2eaa <__aeabi_d2f+0x5e>
    2eea:	2a00      	cmp	r2, #0
    2eec:	d032      	beq.n	2f54 <__aeabi_d2f+0x108>
    2eee:	2080      	movs	r0, #128	; 0x80
    2ef0:	03c0      	lsls	r0, r0, #15
    2ef2:	4302      	orrs	r2, r0
    2ef4:	0252      	lsls	r2, r2, #9
    2ef6:	0a52      	lsrs	r2, r2, #9
    2ef8:	e7d7      	b.n	2eaa <__aeabi_d2f+0x5e>
    2efa:	0018      	movs	r0, r3
    2efc:	3017      	adds	r0, #23
    2efe:	db14      	blt.n	2f2a <__aeabi_d2f+0xde>
    2f00:	2080      	movs	r0, #128	; 0x80
    2f02:	0400      	lsls	r0, r0, #16
    2f04:	4302      	orrs	r2, r0
    2f06:	201e      	movs	r0, #30
    2f08:	1ac0      	subs	r0, r0, r3
    2f0a:	281f      	cmp	r0, #31
    2f0c:	dc0f      	bgt.n	2f2e <__aeabi_d2f+0xe2>
    2f0e:	0025      	movs	r5, r4
    2f10:	4b12      	ldr	r3, [pc, #72]	; (2f5c <__aeabi_d2f+0x110>)
    2f12:	18f3      	adds	r3, r6, r3
    2f14:	409d      	lsls	r5, r3
    2f16:	1e6e      	subs	r6, r5, #1
    2f18:	41b5      	sbcs	r5, r6
    2f1a:	409a      	lsls	r2, r3
    2f1c:	002b      	movs	r3, r5
    2f1e:	4313      	orrs	r3, r2
    2f20:	0022      	movs	r2, r4
    2f22:	40c2      	lsrs	r2, r0
    2f24:	431a      	orrs	r2, r3
    2f26:	2300      	movs	r3, #0
    2f28:	e7ab      	b.n	2e82 <__aeabi_d2f+0x36>
    2f2a:	2300      	movs	r3, #0
    2f2c:	e7d5      	b.n	2eda <__aeabi_d2f+0x8e>
    2f2e:	2502      	movs	r5, #2
    2f30:	426d      	negs	r5, r5
    2f32:	1aeb      	subs	r3, r5, r3
    2f34:	0015      	movs	r5, r2
    2f36:	40dd      	lsrs	r5, r3
    2f38:	2820      	cmp	r0, #32
    2f3a:	d009      	beq.n	2f50 <__aeabi_d2f+0x104>
    2f3c:	4b08      	ldr	r3, [pc, #32]	; (2f60 <__aeabi_d2f+0x114>)
    2f3e:	18f3      	adds	r3, r6, r3
    2f40:	409a      	lsls	r2, r3
    2f42:	4314      	orrs	r4, r2
    2f44:	1e62      	subs	r2, r4, #1
    2f46:	4194      	sbcs	r4, r2
    2f48:	0022      	movs	r2, r4
    2f4a:	2300      	movs	r3, #0
    2f4c:	432a      	orrs	r2, r5
    2f4e:	e798      	b.n	2e82 <__aeabi_d2f+0x36>
    2f50:	2200      	movs	r2, #0
    2f52:	e7f6      	b.n	2f42 <__aeabi_d2f+0xf6>
    2f54:	2200      	movs	r2, #0
    2f56:	e7a8      	b.n	2eaa <__aeabi_d2f+0x5e>
    2f58:	fffffc80 	.word	0xfffffc80
    2f5c:	fffffc82 	.word	0xfffffc82
    2f60:	fffffca2 	.word	0xfffffca2

00002f64 <__clzsi2>:
    2f64:	211c      	movs	r1, #28
    2f66:	2301      	movs	r3, #1
    2f68:	041b      	lsls	r3, r3, #16
    2f6a:	4298      	cmp	r0, r3
    2f6c:	d301      	bcc.n	2f72 <__clzsi2+0xe>
    2f6e:	0c00      	lsrs	r0, r0, #16
    2f70:	3910      	subs	r1, #16
    2f72:	0a1b      	lsrs	r3, r3, #8
    2f74:	4298      	cmp	r0, r3
    2f76:	d301      	bcc.n	2f7c <__clzsi2+0x18>
    2f78:	0a00      	lsrs	r0, r0, #8
    2f7a:	3908      	subs	r1, #8
    2f7c:	091b      	lsrs	r3, r3, #4
    2f7e:	4298      	cmp	r0, r3
    2f80:	d301      	bcc.n	2f86 <__clzsi2+0x22>
    2f82:	0900      	lsrs	r0, r0, #4
    2f84:	3904      	subs	r1, #4
    2f86:	a202      	add	r2, pc, #8	; (adr r2, 2f90 <__clzsi2+0x2c>)
    2f88:	5c10      	ldrb	r0, [r2, r0]
    2f8a:	1840      	adds	r0, r0, r1
    2f8c:	4770      	bx	lr
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	02020304 	.word	0x02020304
    2f94:	01010101 	.word	0x01010101
	...

00002fa0 <__libc_init_array>:
    2fa0:	b570      	push	{r4, r5, r6, lr}
    2fa2:	4e0d      	ldr	r6, [pc, #52]	; (2fd8 <__libc_init_array+0x38>)
    2fa4:	4d0d      	ldr	r5, [pc, #52]	; (2fdc <__libc_init_array+0x3c>)
    2fa6:	2400      	movs	r4, #0
    2fa8:	1bad      	subs	r5, r5, r6
    2faa:	10ad      	asrs	r5, r5, #2
    2fac:	d005      	beq.n	2fba <__libc_init_array+0x1a>
    2fae:	00a3      	lsls	r3, r4, #2
    2fb0:	58f3      	ldr	r3, [r6, r3]
    2fb2:	3401      	adds	r4, #1
    2fb4:	4798      	blx	r3
    2fb6:	42a5      	cmp	r5, r4
    2fb8:	d1f9      	bne.n	2fae <__libc_init_array+0xe>
    2fba:	f000 fa3d 	bl	3438 <_init>
    2fbe:	4e08      	ldr	r6, [pc, #32]	; (2fe0 <__libc_init_array+0x40>)
    2fc0:	4d08      	ldr	r5, [pc, #32]	; (2fe4 <__libc_init_array+0x44>)
    2fc2:	2400      	movs	r4, #0
    2fc4:	1bad      	subs	r5, r5, r6
    2fc6:	10ad      	asrs	r5, r5, #2
    2fc8:	d005      	beq.n	2fd6 <__libc_init_array+0x36>
    2fca:	00a3      	lsls	r3, r4, #2
    2fcc:	58f3      	ldr	r3, [r6, r3]
    2fce:	3401      	adds	r4, #1
    2fd0:	4798      	blx	r3
    2fd2:	42a5      	cmp	r5, r4
    2fd4:	d1f9      	bne.n	2fca <__libc_init_array+0x2a>
    2fd6:	bd70      	pop	{r4, r5, r6, pc}
    2fd8:	00003444 	.word	0x00003444
    2fdc:	00003444 	.word	0x00003444
    2fe0:	00003444 	.word	0x00003444
    2fe4:	0000344c 	.word	0x0000344c

00002fe8 <memset>:
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	0783      	lsls	r3, r0, #30
    2fec:	d03f      	beq.n	306e <memset+0x86>
    2fee:	1e54      	subs	r4, r2, #1
    2ff0:	2a00      	cmp	r2, #0
    2ff2:	d03b      	beq.n	306c <memset+0x84>
    2ff4:	b2ce      	uxtb	r6, r1
    2ff6:	0003      	movs	r3, r0
    2ff8:	2503      	movs	r5, #3
    2ffa:	e003      	b.n	3004 <memset+0x1c>
    2ffc:	1e62      	subs	r2, r4, #1
    2ffe:	2c00      	cmp	r4, #0
    3000:	d034      	beq.n	306c <memset+0x84>
    3002:	0014      	movs	r4, r2
    3004:	3301      	adds	r3, #1
    3006:	1e5a      	subs	r2, r3, #1
    3008:	7016      	strb	r6, [r2, #0]
    300a:	422b      	tst	r3, r5
    300c:	d1f6      	bne.n	2ffc <memset+0x14>
    300e:	2c03      	cmp	r4, #3
    3010:	d924      	bls.n	305c <memset+0x74>
    3012:	25ff      	movs	r5, #255	; 0xff
    3014:	400d      	ands	r5, r1
    3016:	022a      	lsls	r2, r5, #8
    3018:	4315      	orrs	r5, r2
    301a:	042a      	lsls	r2, r5, #16
    301c:	4315      	orrs	r5, r2
    301e:	2c0f      	cmp	r4, #15
    3020:	d911      	bls.n	3046 <memset+0x5e>
    3022:	0026      	movs	r6, r4
    3024:	3e10      	subs	r6, #16
    3026:	0936      	lsrs	r6, r6, #4
    3028:	3601      	adds	r6, #1
    302a:	0136      	lsls	r6, r6, #4
    302c:	001a      	movs	r2, r3
    302e:	199b      	adds	r3, r3, r6
    3030:	6015      	str	r5, [r2, #0]
    3032:	6055      	str	r5, [r2, #4]
    3034:	6095      	str	r5, [r2, #8]
    3036:	60d5      	str	r5, [r2, #12]
    3038:	3210      	adds	r2, #16
    303a:	4293      	cmp	r3, r2
    303c:	d1f8      	bne.n	3030 <memset+0x48>
    303e:	220f      	movs	r2, #15
    3040:	4014      	ands	r4, r2
    3042:	2c03      	cmp	r4, #3
    3044:	d90a      	bls.n	305c <memset+0x74>
    3046:	1f26      	subs	r6, r4, #4
    3048:	08b6      	lsrs	r6, r6, #2
    304a:	3601      	adds	r6, #1
    304c:	00b6      	lsls	r6, r6, #2
    304e:	001a      	movs	r2, r3
    3050:	199b      	adds	r3, r3, r6
    3052:	c220      	stmia	r2!, {r5}
    3054:	4293      	cmp	r3, r2
    3056:	d1fc      	bne.n	3052 <memset+0x6a>
    3058:	2203      	movs	r2, #3
    305a:	4014      	ands	r4, r2
    305c:	2c00      	cmp	r4, #0
    305e:	d005      	beq.n	306c <memset+0x84>
    3060:	b2c9      	uxtb	r1, r1
    3062:	191c      	adds	r4, r3, r4
    3064:	7019      	strb	r1, [r3, #0]
    3066:	3301      	adds	r3, #1
    3068:	429c      	cmp	r4, r3
    306a:	d1fb      	bne.n	3064 <memset+0x7c>
    306c:	bd70      	pop	{r4, r5, r6, pc}
    306e:	0014      	movs	r4, r2
    3070:	0003      	movs	r3, r0
    3072:	e7cc      	b.n	300e <memset+0x26>

00003074 <register_fini>:
    3074:	4b03      	ldr	r3, [pc, #12]	; (3084 <register_fini+0x10>)
    3076:	b510      	push	{r4, lr}
    3078:	2b00      	cmp	r3, #0
    307a:	d002      	beq.n	3082 <register_fini+0xe>
    307c:	4802      	ldr	r0, [pc, #8]	; (3088 <register_fini+0x14>)
    307e:	f000 f805 	bl	308c <atexit>
    3082:	bd10      	pop	{r4, pc}
    3084:	00000000 	.word	0x00000000
    3088:	0000309d 	.word	0x0000309d

0000308c <atexit>:
    308c:	b510      	push	{r4, lr}
    308e:	0001      	movs	r1, r0
    3090:	2300      	movs	r3, #0
    3092:	2200      	movs	r2, #0
    3094:	2000      	movs	r0, #0
    3096:	f000 f81b 	bl	30d0 <__register_exitproc>
    309a:	bd10      	pop	{r4, pc}

0000309c <__libc_fini_array>:
    309c:	b570      	push	{r4, r5, r6, lr}
    309e:	4b09      	ldr	r3, [pc, #36]	; (30c4 <__libc_fini_array+0x28>)
    30a0:	4c09      	ldr	r4, [pc, #36]	; (30c8 <__libc_fini_array+0x2c>)
    30a2:	1ae4      	subs	r4, r4, r3
    30a4:	10a4      	asrs	r4, r4, #2
    30a6:	d009      	beq.n	30bc <__libc_fini_array+0x20>
    30a8:	4a08      	ldr	r2, [pc, #32]	; (30cc <__libc_fini_array+0x30>)
    30aa:	18a5      	adds	r5, r4, r2
    30ac:	00ad      	lsls	r5, r5, #2
    30ae:	18ed      	adds	r5, r5, r3
    30b0:	682b      	ldr	r3, [r5, #0]
    30b2:	3c01      	subs	r4, #1
    30b4:	4798      	blx	r3
    30b6:	3d04      	subs	r5, #4
    30b8:	2c00      	cmp	r4, #0
    30ba:	d1f9      	bne.n	30b0 <__libc_fini_array+0x14>
    30bc:	f000 f9c6 	bl	344c <_fini>
    30c0:	bd70      	pop	{r4, r5, r6, pc}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	00003458 	.word	0x00003458
    30c8:	0000345c 	.word	0x0000345c
    30cc:	3fffffff 	.word	0x3fffffff

000030d0 <__register_exitproc>:
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30d2:	4644      	mov	r4, r8
    30d4:	465f      	mov	r7, fp
    30d6:	4656      	mov	r6, sl
    30d8:	464d      	mov	r5, r9
    30da:	469b      	mov	fp, r3
    30dc:	4b2f      	ldr	r3, [pc, #188]	; (319c <__register_exitproc+0xcc>)
    30de:	b4f0      	push	{r4, r5, r6, r7}
    30e0:	681c      	ldr	r4, [r3, #0]
    30e2:	23a4      	movs	r3, #164	; 0xa4
    30e4:	005b      	lsls	r3, r3, #1
    30e6:	0005      	movs	r5, r0
    30e8:	58e0      	ldr	r0, [r4, r3]
    30ea:	000e      	movs	r6, r1
    30ec:	4690      	mov	r8, r2
    30ee:	2800      	cmp	r0, #0
    30f0:	d04b      	beq.n	318a <__register_exitproc+0xba>
    30f2:	6843      	ldr	r3, [r0, #4]
    30f4:	2b1f      	cmp	r3, #31
    30f6:	dc0d      	bgt.n	3114 <__register_exitproc+0x44>
    30f8:	1c5c      	adds	r4, r3, #1
    30fa:	2d00      	cmp	r5, #0
    30fc:	d121      	bne.n	3142 <__register_exitproc+0x72>
    30fe:	3302      	adds	r3, #2
    3100:	009b      	lsls	r3, r3, #2
    3102:	6044      	str	r4, [r0, #4]
    3104:	501e      	str	r6, [r3, r0]
    3106:	2000      	movs	r0, #0
    3108:	bc3c      	pop	{r2, r3, r4, r5}
    310a:	4690      	mov	r8, r2
    310c:	4699      	mov	r9, r3
    310e:	46a2      	mov	sl, r4
    3110:	46ab      	mov	fp, r5
    3112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3114:	4b22      	ldr	r3, [pc, #136]	; (31a0 <__register_exitproc+0xd0>)
    3116:	2b00      	cmp	r3, #0
    3118:	d03c      	beq.n	3194 <__register_exitproc+0xc4>
    311a:	20c8      	movs	r0, #200	; 0xc8
    311c:	0040      	lsls	r0, r0, #1
    311e:	e000      	b.n	3122 <__register_exitproc+0x52>
    3120:	bf00      	nop
    3122:	2800      	cmp	r0, #0
    3124:	d036      	beq.n	3194 <__register_exitproc+0xc4>
    3126:	22a4      	movs	r2, #164	; 0xa4
    3128:	2300      	movs	r3, #0
    312a:	0052      	lsls	r2, r2, #1
    312c:	58a1      	ldr	r1, [r4, r2]
    312e:	6043      	str	r3, [r0, #4]
    3130:	6001      	str	r1, [r0, #0]
    3132:	50a0      	str	r0, [r4, r2]
    3134:	3240      	adds	r2, #64	; 0x40
    3136:	5083      	str	r3, [r0, r2]
    3138:	3204      	adds	r2, #4
    313a:	5083      	str	r3, [r0, r2]
    313c:	2401      	movs	r4, #1
    313e:	2d00      	cmp	r5, #0
    3140:	d0dd      	beq.n	30fe <__register_exitproc+0x2e>
    3142:	009a      	lsls	r2, r3, #2
    3144:	4691      	mov	r9, r2
    3146:	4481      	add	r9, r0
    3148:	4642      	mov	r2, r8
    314a:	2188      	movs	r1, #136	; 0x88
    314c:	464f      	mov	r7, r9
    314e:	507a      	str	r2, [r7, r1]
    3150:	22c4      	movs	r2, #196	; 0xc4
    3152:	0052      	lsls	r2, r2, #1
    3154:	4690      	mov	r8, r2
    3156:	4480      	add	r8, r0
    3158:	4642      	mov	r2, r8
    315a:	3987      	subs	r1, #135	; 0x87
    315c:	4099      	lsls	r1, r3
    315e:	6812      	ldr	r2, [r2, #0]
    3160:	468a      	mov	sl, r1
    3162:	430a      	orrs	r2, r1
    3164:	4694      	mov	ip, r2
    3166:	4642      	mov	r2, r8
    3168:	4661      	mov	r1, ip
    316a:	6011      	str	r1, [r2, #0]
    316c:	2284      	movs	r2, #132	; 0x84
    316e:	4649      	mov	r1, r9
    3170:	465f      	mov	r7, fp
    3172:	0052      	lsls	r2, r2, #1
    3174:	508f      	str	r7, [r1, r2]
    3176:	2d02      	cmp	r5, #2
    3178:	d1c1      	bne.n	30fe <__register_exitproc+0x2e>
    317a:	0002      	movs	r2, r0
    317c:	4655      	mov	r5, sl
    317e:	328d      	adds	r2, #141	; 0x8d
    3180:	32ff      	adds	r2, #255	; 0xff
    3182:	6811      	ldr	r1, [r2, #0]
    3184:	430d      	orrs	r5, r1
    3186:	6015      	str	r5, [r2, #0]
    3188:	e7b9      	b.n	30fe <__register_exitproc+0x2e>
    318a:	0020      	movs	r0, r4
    318c:	304d      	adds	r0, #77	; 0x4d
    318e:	30ff      	adds	r0, #255	; 0xff
    3190:	50e0      	str	r0, [r4, r3]
    3192:	e7ae      	b.n	30f2 <__register_exitproc+0x22>
    3194:	2001      	movs	r0, #1
    3196:	4240      	negs	r0, r0
    3198:	e7b6      	b.n	3108 <__register_exitproc+0x38>
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	00003434 	.word	0x00003434
    31a0:	00000000 	.word	0x00000000

000031a4 <spi2MOSI>:
    31a4:	0c000002 00000000                       ........

000031ac <spi2SCK>:
    31ac:	0e000002 00000000                       ........

000031b4 <spi2MISO>:
    31b4:	0d000002 00000000                       ........

000031bc <lookupTable.12361>:
    31bc:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    31cc:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    31dc:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    31ec:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    31fc:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    320c:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    321c:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    322c:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    323c:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    324c:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    325c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    326c:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    327c:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    328c:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    329c:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    32ac:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    32bc:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    32cc:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    32dc:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    32ec:	000f048e                                ....

000032f0 <senseBatPin>:
    32f0:	06000000 00000006                       ........

000032f8 <senseAPin>:
    32f8:	03010001 0000000b                       ........

00003300 <senseBPin>:
    3300:	02010001 0000000a                       ........

00003308 <senseCPin>:
    3308:	03000000 00000001                       ........

00003310 <senseDPin>:
    3310:	02000000 00000000                       ........

00003318 <analogAccelPin>:
    3318:	07000000 00000007                       ........

00003320 <spi2MOSI>:
    3320:	0c000002 00000000                       ........

00003328 <spi2SCK>:
    3328:	0e000002 00000000 00001926 0000184a     ........&...J...
    3338:	00001908 000018e0 00001908 000018d4     ................
    3348:	00001908 000018e0 0000184a 0000184a     ........J...J...
    3358:	000018d4 000018e0 0000198c 0000198c     ................
    3368:	0000198c 0000190e 0000184a 0000184a     ........J...J...
    3378:	000018f4 000018de 000018f4 000018d4     ................
    3388:	000018f4 000018de 0000184a 0000184a     ........J...J...
    3398:	000018d4 000018de 0000198c 0000198c     ................
    33a8:	0000198c 00001998 00001b24 00001a82     ........$.......
    33b8:	00001a82 00001a80 00001b16 00001b16     ................
    33c8:	00001b0c 00001a80 00001b16 00001b0c     ................
    33d8:	00001b16 00001a80 00001b1c 00001b1c     ................
    33e8:	00001b1c 00001ba6 00002a1c 000028dc     .........*...(..
    33f8:	000028dc 000028da 000029f4 000029f4     .(...(...)...)..
    3408:	000029e6 000028da 000029f4 000029e6     .)...(...)...)..
    3418:	000029f4 000028da 000029fc 000029fc     .)...(...)...)..
    3428:	000029fc 00002bfc 00000043              .)...+..C...

00003434 <_global_impure_ptr>:
    3434:	20000010                                ... 

00003438 <_init>:
    3438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    343e:	bc08      	pop	{r3}
    3440:	469e      	mov	lr, r3
    3442:	4770      	bx	lr

00003444 <__init_array_start>:
    3444:	00003075 	.word	0x00003075

00003448 <__frame_dummy_init_array_entry>:
    3448:	000000dd                                ....

0000344c <_fini>:
    344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3452:	bc08      	pop	{r3}
    3454:	469e      	mov	lr, r3
    3456:	4770      	bx	lr

00003458 <__fini_array_start>:
    3458:	000000b5 	.word	0x000000b5
