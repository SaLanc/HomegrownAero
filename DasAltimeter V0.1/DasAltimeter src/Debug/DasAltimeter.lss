
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002998  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002998  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002de0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002f90  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ae91  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021f8  00000000  00000000  0003b34a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001af2  00000000  00000000  0003d542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000368  00000000  00000000  0003f034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ba8  00000000  00000000  0003f39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000156b2  00000000  00000000  0003ff44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000086be  00000000  00000000  000555f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007242e  00000000  00000000  0005dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a18  00000000  00000000  000d00e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f15 	.word	0x00000f15
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000fb5 	.word	0x00000fb5
      90:	0000101d 	.word	0x0000101d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002998 	.word	0x00002998

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002998 	.word	0x00002998
     10c:	00002998 	.word	0x00002998
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00002998 	.word	0x00002998
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000025bd 	.word	0x000025bd
     1d0:	00000a19 	.word	0x00000a19

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a18      	lsrs	r0, r3, #8
     218:	b2c1      	uxtb	r1, r0
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	000016e9 	.word	0x000016e9
     23c:	20000460 	.word	0x20000460
     240:	00000ee5 	.word	0x00000ee5

00000244 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     244:	2380      	movs	r3, #128	; 0x80


    return bytesSent;
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     248:	4f14      	ldr	r7, [pc, #80]	; (29c <AT25SEreadSample+0x58>)
     24a:	02db      	lsls	r3, r3, #11
     24c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     24e:	4d14      	ldr	r5, [pc, #80]	; (2a0 <AT25SEreadSample+0x5c>)


    return bytesSent;
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     250:	0004      	movs	r4, r0
     252:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     254:	2001      	movs	r0, #1
     256:	617b      	str	r3, [r7, #20]
     258:	2103      	movs	r1, #3
     25a:	47a8      	blx	r5
     25c:	4e11      	ldr	r6, [pc, #68]	; (2a4 <AT25SEreadSample+0x60>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     25e:	2100      	movs	r1, #0
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     260:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     262:	2001      	movs	r0, #1
     264:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     266:	2100      	movs	r1, #0

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     268:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     26a:	2001      	movs	r0, #1
     26c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     26e:	0021      	movs	r1, r4
void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     270:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     272:	2001      	movs	r0, #1
     274:	47a8      	blx	r5
     276:	9b00      	ldr	r3, [sp, #0]
     278:	9c01      	ldr	r4, [sp, #4]
     27a:	7030      	strb	r0, [r6, #0]
     27c:	18e3      	adds	r3, r4, r3
     27e:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     280:	9b00      	ldr	r3, [sp, #0]
     282:	429c      	cmp	r4, r3
     284:	d005      	beq.n	292 <AT25SEreadSample+0x4e>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a8      	blx	r5
     28c:	7020      	strb	r0, [r4, #0]
     28e:	3401      	adds	r4, #1
     290:	e7f6      	b.n	280 <AT25SEreadSample+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     292:	2380      	movs	r3, #128	; 0x80
     294:	02db      	lsls	r3, r3, #11
     296:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

     298:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	41004400 	.word	0x41004400
     2a0:	000016e9 	.word	0x000016e9
     2a4:	20000460 	.word	0x20000460

000002a8 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a8:	2280      	movs	r2, #128	; 0x80
     2aa:	4b28      	ldr	r3, [pc, #160]	; (34c <readMS5803AdcResults+0xa4>)
     2ac:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b0:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2b2:	2300      	movs	r3, #0
     2b4:	4d26      	ldr	r5, [pc, #152]	; (350 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     2b6:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2b8:	9300      	str	r3, [sp, #0]
     2ba:	786b      	ldrb	r3, [r5, #1]
     2bc:	7828      	ldrb	r0, [r5, #0]
     2be:	78aa      	ldrb	r2, [r5, #2]
     2c0:	021b      	lsls	r3, r3, #8
     2c2:	4303      	orrs	r3, r0
     2c4:	0412      	lsls	r2, r2, #16
     2c6:	0019      	movs	r1, r3
     2c8:	0013      	movs	r3, r2
     2ca:	430b      	orrs	r3, r1
     2cc:	79a9      	ldrb	r1, [r5, #6]
     2ce:	796f      	ldrb	r7, [r5, #5]
     2d0:	79ec      	ldrb	r4, [r5, #7]
     2d2:	0209      	lsls	r1, r1, #8
     2d4:	4339      	orrs	r1, r7
     2d6:	0424      	lsls	r4, r4, #16
     2d8:	0008      	movs	r0, r1
     2da:	0021      	movs	r1, r4
     2dc:	7a2c      	ldrb	r4, [r5, #8]
     2de:	78ea      	ldrb	r2, [r5, #3]
     2e0:	7a6f      	ldrb	r7, [r5, #9]
     2e2:	4301      	orrs	r1, r0
     2e4:	0624      	lsls	r4, r4, #24
     2e6:	430c      	orrs	r4, r1
     2e8:	0612      	lsls	r2, r2, #24
     2ea:	431a      	orrs	r2, r3
     2ec:	0020      	movs	r0, r4
     2ee:	792b      	ldrb	r3, [r5, #4]
     2f0:	0039      	movs	r1, r7
     2f2:	4e18      	ldr	r6, [pc, #96]	; (354 <readMS5803AdcResults+0xac>)
     2f4:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2f6:	7aeb      	ldrb	r3, [r5, #11]
     2f8:	7aa9      	ldrb	r1, [r5, #10]
     2fa:	021b      	lsls	r3, r3, #8
     2fc:	430b      	orrs	r3, r1
     2fe:	001a      	movs	r2, r3
     300:	7b2b      	ldrb	r3, [r5, #12]
     302:	4e15      	ldr	r6, [pc, #84]	; (358 <readMS5803AdcResults+0xb0>)
     304:	041b      	lsls	r3, r3, #16
     306:	4313      	orrs	r3, r2
     308:	7b6a      	ldrb	r2, [r5, #13]
     30a:	7bad      	ldrb	r5, [r5, #14]
     30c:	0612      	lsls	r2, r2, #24
     30e:	431a      	orrs	r2, r3
     310:	0039      	movs	r1, r7
     312:	002b      	movs	r3, r5
     314:	0020      	movs	r0, r4
     316:	9203      	str	r2, [sp, #12]
     318:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     31a:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     31c:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     31e:	002b      	movs	r3, r5
     320:	0039      	movs	r1, r7
     322:	0020      	movs	r0, r4
     324:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     326:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     328:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     32a:	002b      	movs	r3, r5
     32c:	0020      	movs	r0, r4
     32e:	0039      	movs	r1, r7
     330:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     332:	2280      	movs	r2, #128	; 0x80
     334:	4b05      	ldr	r3, [pc, #20]	; (34c <readMS5803AdcResults+0xa4>)
     336:	0212      	lsls	r2, r2, #8
     338:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     33a:	9b04      	ldr	r3, [sp, #16]
     33c:	9a05      	ldr	r2, [sp, #20]
     33e:	041b      	lsls	r3, r3, #16
     340:	0215      	lsls	r5, r2, #8
     342:	431d      	orrs	r5, r3
     344:	4328      	orrs	r0, r5
}
     346:	b007      	add	sp, #28
     348:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	41004400 	.word	0x41004400
     350:	000027c0 	.word	0x000027c0
     354:	00000c09 	.word	0x00000c09
     358:	00000c75 	.word	0x00000c75

0000035c <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     35e:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     360:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     362:	8803      	ldrh	r3, [r0, #0]
     364:	aa04      	add	r2, sp, #16
     366:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     368:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     36a:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     36c:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     36e:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     370:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     372:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     374:	88c3      	ldrh	r3, [r0, #6]
     376:	9401      	str	r4, [sp, #4]
     378:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     37a:	8903      	ldrh	r3, [r0, #8]
     37c:	aa07      	add	r2, sp, #28
     37e:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     380:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     382:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     384:	8941      	ldrh	r1, [r0, #10]
     386:	a804      	add	r0, sp, #16
     388:	181b      	adds	r3, r3, r0
     38a:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     38c:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     38e:	693a      	ldr	r2, [r7, #16]
     390:	0236      	lsls	r6, r6, #8
     392:	8818      	ldrh	r0, [r3, #0]
     394:	1b96      	subs	r6, r2, r6
     396:	17f2      	asrs	r2, r6, #31
     398:	4c2a      	ldr	r4, [pc, #168]	; (444 <ConvertPressureTemperature+0xe8>)
     39a:	9203      	str	r2, [sp, #12]
     39c:	17f3      	asrs	r3, r6, #31
     39e:	0032      	movs	r2, r6
     3a0:	b280      	uxth	r0, r0
     3a2:	2100      	movs	r1, #0
     3a4:	47a0      	blx	r4
     3a6:	23fa      	movs	r3, #250	; 0xfa
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3ac:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     3ae:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3b0:	b29b      	uxth	r3, r3
     3b2:	9302      	str	r3, [sp, #8]
     3b4:	9b01      	ldr	r3, [sp, #4]
     3b6:	0032      	movs	r2, r6
     3b8:	8818      	ldrh	r0, [r3, #0]
     3ba:	2100      	movs	r1, #0
     3bc:	17f3      	asrs	r3, r6, #31
     3be:	b280      	uxth	r0, r0
     3c0:	47a0      	blx	r4
     3c2:	064b      	lsls	r3, r1, #25
     3c4:	09c4      	lsrs	r4, r0, #7
     3c6:	431c      	orrs	r4, r3
     3c8:	2300      	movs	r3, #0
     3ca:	11cd      	asrs	r5, r1, #7
     3cc:	9902      	ldr	r1, [sp, #8]
     3ce:	040a      	lsls	r2, r1, #16
     3d0:	1912      	adds	r2, r2, r4
     3d2:	416b      	adcs	r3, r5
     3d4:	9208      	str	r2, [sp, #32]
     3d6:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     3d8:	ab04      	add	r3, sp, #16
     3da:	889c      	ldrh	r4, [r3, #4]
     3dc:	8918      	ldrh	r0, [r3, #8]
     3de:	0032      	movs	r2, r6
     3e0:	9b03      	ldr	r3, [sp, #12]
     3e2:	4d18      	ldr	r5, [pc, #96]	; (444 <ConvertPressureTemperature+0xe8>)
     3e4:	b280      	uxth	r0, r0
     3e6:	2100      	movs	r1, #0
     3e8:	47a8      	blx	r5
     3ea:	060b      	lsls	r3, r1, #24
     3ec:	0a05      	lsrs	r5, r0, #8
     3ee:	431d      	orrs	r5, r3
     3f0:	2300      	movs	r3, #0
     3f2:	b2a4      	uxth	r4, r4
     3f4:	120e      	asrs	r6, r1, #8
     3f6:	03e2      	lsls	r2, r4, #15
     3f8:	1952      	adds	r2, r2, r5
     3fa:	4173      	adcs	r3, r6
     3fc:	920a      	str	r2, [sp, #40]	; 0x28
     3fe:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     404:	9c08      	ldr	r4, [sp, #32]
     406:	9d09      	ldr	r5, [sp, #36]	; 0x24
     408:	4e0e      	ldr	r6, [pc, #56]	; (444 <ConvertPressureTemperature+0xe8>)
     40a:	68f8      	ldr	r0, [r7, #12]
     40c:	2100      	movs	r1, #0
     40e:	47b0      	blx	r6
     410:	2300      	movs	r3, #0
     412:	17ce      	asrs	r6, r1, #31
     414:	02f6      	lsls	r6, r6, #11
     416:	0af2      	lsrs	r2, r6, #11
     418:	1880      	adds	r0, r0, r2
     41a:	4159      	adcs	r1, r3
     41c:	02ce      	lsls	r6, r1, #11
     41e:	0d42      	lsrs	r2, r0, #21
     420:	4332      	orrs	r2, r6
     422:	154b      	asrs	r3, r1, #21
     424:	1b12      	subs	r2, r2, r4
     426:	41ab      	sbcs	r3, r5
     428:	2100      	movs	r1, #0
     42a:	17dc      	asrs	r4, r3, #31
     42c:	0464      	lsls	r4, r4, #17
     42e:	0c60      	lsrs	r0, r4, #17
     430:	1812      	adds	r2, r2, r0
     432:	414b      	adcs	r3, r1
     434:	0011      	movs	r1, r2
     436:	045b      	lsls	r3, r3, #17
     438:	0bca      	lsrs	r2, r1, #15
     43a:	431a      	orrs	r2, r3
     43c:	61fa      	str	r2, [r7, #28]
}
     43e:	b00d      	add	sp, #52	; 0x34
     440:	bdf0      	pop	{r4, r5, r6, r7, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	00001729 	.word	0x00001729

00000448 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     448:	220a      	movs	r2, #10
     44a:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     44c:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     44e:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     450:	4c0e      	ldr	r4, [pc, #56]	; (48c <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     452:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     454:	42a2      	cmp	r2, r4
     456:	d901      	bls.n	45c <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     458:	4b0d      	ldr	r3, [pc, #52]	; (490 <pascalToCent+0x48>)
     45a:	e015      	b.n	488 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     45c:	1aa3      	subs	r3, r4, r2
     45e:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     460:	2b4b      	cmp	r3, #75	; 0x4b
     462:	d901      	bls.n	468 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     464:	4b0b      	ldr	r3, [pc, #44]	; (494 <pascalToCent+0x4c>)
     466:	e00f      	b.n	488 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     468:	4d0b      	ldr	r5, [pc, #44]	; (498 <pascalToCent+0x50>)
     46a:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     46c:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     46e:	3301      	adds	r3, #1
     470:	009b      	lsls	r3, r3, #2
     472:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     474:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     476:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     478:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     47a:	1aa4      	subs	r4, r4, r2
     47c:	691a      	ldr	r2, [r3, #16]
     47e:	1a52      	subs	r2, r2, r1
     480:	0013      	movs	r3, r2
     482:	4363      	muls	r3, r4
     484:	0a9b      	lsrs	r3, r3, #10
     486:	185b      	adds	r3, r3, r1
     488:	6203      	str	r3, [r0, #32]
        }
    }
}
     48a:	bd70      	pop	{r4, r5, r6, pc}
     48c:	000199cc 	.word	0x000199cc
     490:	ffff8d20 	.word	0xffff8d20
     494:	000f048e 	.word	0x000f048e
     498:	000027c0 	.word	0x000027c0

0000049c <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     49c:	b5f0      	push	{r4, r5, r6, r7, lr}
     49e:	27a2      	movs	r7, #162	; 0xa2
     4a0:	b087      	sub	sp, #28
     4a2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     4a4:	2096      	movs	r0, #150	; 0x96
     4a6:	4c2b      	ldr	r4, [pc, #172]	; (554 <readMS5803Coefficients+0xb8>)
     4a8:	0080      	lsls	r0, r0, #2
     4aa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     4ac:	2096      	movs	r0, #150	; 0x96
     4ae:	0080      	lsls	r0, r0, #2
     4b0:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4b2:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     4b4:	4c28      	ldr	r4, [pc, #160]	; (558 <readMS5803Coefficients+0xbc>)
     4b6:	4b29      	ldr	r3, [pc, #164]	; (55c <readMS5803Coefficients+0xc0>)
     4b8:	0212      	lsls	r2, r2, #8
     4ba:	615a      	str	r2, [r3, #20]
     4bc:	7863      	ldrb	r3, [r4, #1]
     4be:	7820      	ldrb	r0, [r4, #0]
     4c0:	78a2      	ldrb	r2, [r4, #2]
     4c2:	021b      	lsls	r3, r3, #8
     4c4:	4303      	orrs	r3, r0
     4c6:	0412      	lsls	r2, r2, #16
     4c8:	0019      	movs	r1, r3
     4ca:	0013      	movs	r3, r2
     4cc:	430b      	orrs	r3, r1
     4ce:	79a1      	ldrb	r1, [r4, #6]
     4d0:	7966      	ldrb	r6, [r4, #5]
     4d2:	0209      	lsls	r1, r1, #8
     4d4:	4331      	orrs	r1, r6
     4d6:	0008      	movs	r0, r1
     4d8:	79e1      	ldrb	r1, [r4, #7]
     4da:	78e2      	ldrb	r2, [r4, #3]
     4dc:	0409      	lsls	r1, r1, #16
     4de:	4301      	orrs	r1, r0
     4e0:	7a20      	ldrb	r0, [r4, #8]
     4e2:	7a66      	ldrb	r6, [r4, #9]
     4e4:	0612      	lsls	r2, r2, #24
     4e6:	0600      	lsls	r0, r0, #24
     4e8:	4308      	orrs	r0, r1
     4ea:	431a      	orrs	r2, r3
     4ec:	9700      	str	r7, [sp, #0]
     4ee:	7923      	ldrb	r3, [r4, #4]
     4f0:	0031      	movs	r1, r6
     4f2:	4d1b      	ldr	r5, [pc, #108]	; (560 <readMS5803Coefficients+0xc4>)
     4f4:	9003      	str	r0, [sp, #12]
     4f6:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4f8:	7ae3      	ldrb	r3, [r4, #11]
     4fa:	0020      	movs	r0, r4
     4fc:	7aa1      	ldrb	r1, [r4, #10]
     4fe:	7b24      	ldrb	r4, [r4, #12]
     500:	021b      	lsls	r3, r3, #8
     502:	430b      	orrs	r3, r1
     504:	0424      	lsls	r4, r4, #16
     506:	001a      	movs	r2, r3
     508:	0023      	movs	r3, r4
     50a:	7b44      	ldrb	r4, [r0, #13]
     50c:	7b85      	ldrb	r5, [r0, #14]
     50e:	4313      	orrs	r3, r2
     510:	0624      	lsls	r4, r4, #24
     512:	431c      	orrs	r4, r3
     514:	0022      	movs	r2, r4
     516:	002b      	movs	r3, r5
     518:	9404      	str	r4, [sp, #16]
     51a:	0031      	movs	r1, r6
     51c:	4c11      	ldr	r4, [pc, #68]	; (564 <readMS5803Coefficients+0xc8>)
     51e:	9803      	ldr	r0, [sp, #12]
     520:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     522:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     524:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     526:	9a04      	ldr	r2, [sp, #16]
     528:	9803      	ldr	r0, [sp, #12]
     52a:	0031      	movs	r1, r6
     52c:	4c0d      	ldr	r4, [pc, #52]	; (564 <readMS5803Coefficients+0xc8>)
     52e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     530:	2280      	movs	r2, #128	; 0x80
     532:	4b0a      	ldr	r3, [pc, #40]	; (55c <readMS5803Coefficients+0xc0>)
     534:	0212      	lsls	r2, r2, #8
     536:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     538:	9b05      	ldr	r3, [sp, #20]
     53a:	021d      	lsls	r5, r3, #8
     53c:	9b02      	ldr	r3, [sp, #8]
     53e:	4328      	orrs	r0, r5
     540:	8018      	strh	r0, [r3, #0]
     542:	1cbb      	adds	r3, r7, #2
     544:	b2df      	uxtb	r7, r3
     546:	9b02      	ldr	r3, [sp, #8]
     548:	3302      	adds	r3, #2
     54a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     54c:	2fae      	cmp	r7, #174	; 0xae
     54e:	d1a9      	bne.n	4a4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     550:	b007      	add	sp, #28
     552:	bdf0      	pop	{r4, r5, r6, r7, pc}
     554:	00000eb5 	.word	0x00000eb5
     558:	000027c0 	.word	0x000027c0
     55c:	41004400 	.word	0x41004400
     560:	00000c09 	.word	0x00000c09
     564:	00000c75 	.word	0x00000c75

00000568 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     56a:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     56c:	231e      	movs	r3, #30
     56e:	491a      	ldr	r1, [pc, #104]	; (5d8 <initMS5803Barometer+0x70>)
     570:	4d1a      	ldr	r5, [pc, #104]	; (5dc <initMS5803Barometer+0x74>)
     572:	0236      	lsls	r6, r6, #8
     574:	616e      	str	r6, [r5, #20]
     576:	9300      	str	r3, [sp, #0]
     578:	784b      	ldrb	r3, [r1, #1]
     57a:	780a      	ldrb	r2, [r1, #0]
     57c:	021b      	lsls	r3, r3, #8
     57e:	4313      	orrs	r3, r2
     580:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     582:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     584:	0412      	lsls	r2, r2, #16
     586:	0018      	movs	r0, r3
     588:	0013      	movs	r3, r2
     58a:	78ca      	ldrb	r2, [r1, #3]
     58c:	4303      	orrs	r3, r0
     58e:	0612      	lsls	r2, r2, #24
     590:	1d4f      	adds	r7, r1, #5
     592:	431a      	orrs	r2, r3
     594:	7948      	ldrb	r0, [r1, #5]
     596:	790b      	ldrb	r3, [r1, #4]
     598:	7989      	ldrb	r1, [r1, #6]
     59a:	0209      	lsls	r1, r1, #8
     59c:	4301      	orrs	r1, r0
     59e:	78b8      	ldrb	r0, [r7, #2]
     5a0:	0400      	lsls	r0, r0, #16
     5a2:	4301      	orrs	r1, r0
     5a4:	78f8      	ldrb	r0, [r7, #3]
     5a6:	0600      	lsls	r0, r0, #24
     5a8:	4308      	orrs	r0, r1
     5aa:	7939      	ldrb	r1, [r7, #4]
     5ac:	4f0c      	ldr	r7, [pc, #48]	; (5e0 <initMS5803Barometer+0x78>)
     5ae:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5b0:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     5b2:	20c8      	movs	r0, #200	; 0xc8
     5b4:	4b0b      	ldr	r3, [pc, #44]	; (5e4 <initMS5803Barometer+0x7c>)
     5b6:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     5b8:	0020      	movs	r0, r4
     5ba:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <initMS5803Barometer+0x80>)
     5bc:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     5be:	23fa      	movs	r3, #250	; 0xfa
     5c0:	011b      	lsls	r3, r3, #4
     5c2:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <initMS5803Barometer+0x84>)
     5c6:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     5c8:	4b09      	ldr	r3, [pc, #36]	; (5f0 <initMS5803Barometer+0x88>)
     5ca:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     5cc:	4b09      	ldr	r3, [pc, #36]	; (5f4 <initMS5803Barometer+0x8c>)
     5ce:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     5d0:	23fa      	movs	r3, #250	; 0xfa
     5d2:	00db      	lsls	r3, r3, #3
     5d4:	6163      	str	r3, [r4, #20]




}
     5d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5d8:	000027c0 	.word	0x000027c0
     5dc:	41004400 	.word	0x41004400
     5e0:	00000c09 	.word	0x00000c09
     5e4:	00000ee5 	.word	0x00000ee5
     5e8:	0000049d 	.word	0x0000049d
     5ec:	00002710 	.word	0x00002710
     5f0:	0041c9fe 	.word	0x0041c9fe
     5f4:	007ffae4 	.word	0x007ffae4

000005f8 <init>:
#include "math.h"




void init() {
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     5fa:	4bbf      	ldr	r3, [pc, #764]	; (8f8 <init+0x300>)
#include "math.h"




void init() {
     5fc:	b085      	sub	sp, #20
    SystemInit();
     5fe:	4798      	blx	r3
    GclkInit();
     600:	4bbe      	ldr	r3, [pc, #760]	; (8fc <init+0x304>)
     602:	4798      	blx	r3
    RtcInit();
     604:	4bbe      	ldr	r3, [pc, #760]	; (900 <init+0x308>)
     606:	4798      	blx	r3
    delayInit();
     608:	4bbe      	ldr	r3, [pc, #760]	; (904 <init+0x30c>)
     60a:	4798      	blx	r3
    adcInit();
     60c:	4bbe      	ldr	r3, [pc, #760]	; (908 <init+0x310>)
     60e:	4798      	blx	r3
    dmaInit();
     610:	4bbe      	ldr	r3, [pc, #760]	; (90c <init+0x314>)
     612:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     614:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     616:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     618:	4bbd      	ldr	r3, [pc, #756]	; (910 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     61a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     61c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     61e:	5858      	ldr	r0, [r3, r1]
     620:	4abc      	ldr	r2, [pc, #752]	; (914 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     622:	2401      	movs	r4, #1
     624:	4002      	ands	r2, r0
     626:	505a      	str	r2, [r3, r1]
     628:	4bbb      	ldr	r3, [pc, #748]	; (918 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     62a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     62c:	0019      	movs	r1, r3
     62e:	3154      	adds	r1, #84	; 0x54
     630:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     632:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     634:	43a2      	bics	r2, r4
     636:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     638:	2280      	movs	r2, #128	; 0x80
     63a:	0352      	lsls	r2, r2, #13
     63c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     63e:	220f      	movs	r2, #15
     640:	3033      	adds	r0, #51	; 0x33
     642:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     646:	4391      	bics	r1, r2
     648:	4321      	orrs	r1, r4
     64a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     64c:	7cc1      	ldrb	r1, [r0, #19]
     64e:	36c3      	adds	r6, #195	; 0xc3
     650:	4321      	orrs	r1, r4
     652:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     654:	0019      	movs	r1, r3
     656:	31b1      	adds	r1, #177	; 0xb1
     658:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     65a:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     65c:	4010      	ands	r0, r2
     65e:	4328      	orrs	r0, r5
     660:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     662:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     664:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     666:	4320      	orrs	r0, r4
     668:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     66a:	7808      	ldrb	r0, [r1, #0]
     66c:	4010      	ands	r0, r2
     66e:	4328      	orrs	r0, r5
     670:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     672:	7830      	ldrb	r0, [r6, #0]
     674:	4320      	orrs	r0, r4
     676:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     678:	7d30      	ldrb	r0, [r6, #20]
     67a:	43a0      	bics	r0, r4
     67c:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     67e:	2080      	movs	r0, #128	; 0x80
     680:	0400      	lsls	r0, r0, #16
     682:	9703      	str	r7, [sp, #12]
     684:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     686:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     688:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     68a:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     68c:	4390      	bics	r0, r2
     68e:	4320      	orrs	r0, r4
     690:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     692:	20c2      	movs	r0, #194	; 0xc2
     694:	4684      	mov	ip, r0
     696:	449c      	add	ip, r3
     698:	4660      	mov	r0, ip
     69a:	4667      	mov	r7, ip
     69c:	7800      	ldrb	r0, [r0, #0]
     69e:	4320      	orrs	r0, r4
     6a0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6a2:	7808      	ldrb	r0, [r1, #0]
     6a4:	4390      	bics	r0, r2
     6a6:	4320      	orrs	r0, r4
     6a8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6aa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ac:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b0:	4321      	orrs	r1, r4
     6b2:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b4:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6b6:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b8:	43a1      	bics	r1, r4
     6ba:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6bc:	2180      	movs	r1, #128	; 0x80
     6be:	9803      	ldr	r0, [sp, #12]
     6c0:	03c9      	lsls	r1, r1, #15
     6c2:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c4:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6c6:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c8:	3031      	adds	r0, #49	; 0x31
     6ca:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6cc:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6ce:	4011      	ands	r1, r2
     6d0:	430d      	orrs	r5, r1
     6d2:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d4:	001d      	movs	r5, r3
     6d6:	3543      	adds	r5, #67	; 0x43
     6d8:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6da:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6dc:	4321      	orrs	r1, r4
     6de:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e0:	7da9      	ldrb	r1, [r5, #22]
     6e2:	3505      	adds	r5, #5
     6e4:	43a1      	bics	r1, r4
     6e6:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e8:	2180      	movs	r1, #128	; 0x80
     6ea:	0489      	lsls	r1, r1, #18
     6ec:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ee:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6f0:	7801      	ldrb	r1, [r0, #0]
     6f2:	4391      	bics	r1, r2
     6f4:	4321      	orrs	r1, r4
     6f6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7c41      	ldrb	r1, [r0, #17]
     6fa:	3011      	adds	r0, #17
     6fc:	4321      	orrs	r1, r4
     6fe:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	7d81      	ldrb	r1, [r0, #22]
     702:	43a1      	bics	r1, r4
     704:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     706:	2180      	movs	r1, #128	; 0x80
     708:	0449      	lsls	r1, r1, #17
     70a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     70c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     70e:	7829      	ldrb	r1, [r5, #0]
     710:	43a1      	bics	r1, r4
     712:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     714:	2180      	movs	r1, #128	; 0x80
     716:	0049      	lsls	r1, r1, #1
     718:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71a:	7831      	ldrb	r1, [r6, #0]
     71c:	43a1      	bics	r1, r4
     71e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     720:	2180      	movs	r1, #128	; 0x80
     722:	0089      	lsls	r1, r1, #2
     724:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     726:	0019      	movs	r1, r3
     728:	314b      	adds	r1, #75	; 0x4b
     72a:	7808      	ldrb	r0, [r1, #0]
     72c:	43a0      	bics	r0, r4
     72e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     730:	7808      	ldrb	r0, [r1, #0]
     732:	4338      	orrs	r0, r7
     734:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     736:	2080      	movs	r0, #128	; 0x80
     738:	0100      	lsls	r0, r0, #4
     73a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     73c:	4877      	ldr	r0, [pc, #476]	; (91c <init+0x324>)
     73e:	371e      	adds	r7, #30
     740:	7800      	ldrb	r0, [r0, #0]
     742:	4010      	ands	r0, r2
     744:	4338      	orrs	r0, r7
     746:	4f75      	ldr	r7, [pc, #468]	; (91c <init+0x324>)
     748:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     74a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     74c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     74e:	4320      	orrs	r0, r4
     750:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     752:	0018      	movs	r0, r3
     754:	3034      	adds	r0, #52	; 0x34
     756:	7801      	ldrb	r1, [r0, #0]
     758:	4011      	ands	r1, r2
     75a:	4339      	orrs	r1, r7
     75c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     75e:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     760:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     762:	4321      	orrs	r1, r4
     764:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     766:	4666      	mov	r6, ip
     768:	7801      	ldrb	r1, [r0, #0]
     76a:	4391      	bics	r1, r2
     76c:	4331      	orrs	r1, r6
     76e:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     774:	4321      	orrs	r1, r4
     776:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     778:	7801      	ldrb	r1, [r0, #0]
     77a:	001e      	movs	r6, r3
     77c:	43a1      	bics	r1, r4
     77e:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     780:	2180      	movs	r1, #128	; 0x80
     782:	9803      	ldr	r0, [sp, #12]
     784:	00c9      	lsls	r1, r1, #3
     786:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     788:	0018      	movs	r0, r3
     78a:	3098      	adds	r0, #152	; 0x98
     78c:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	78a8      	ldrb	r0, [r5, #2]
     790:	3651      	adds	r6, #81	; 0x51
     792:	43a0      	bics	r0, r4
     794:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     796:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     798:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	7a29      	ldrb	r1, [r5, #8]
     79c:	43a1      	bics	r1, r4
     79e:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2180      	movs	r1, #128	; 0x80
     7a2:	0249      	lsls	r1, r1, #9
     7a4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a6:	7831      	ldrb	r1, [r6, #0]
     7a8:	43a1      	bics	r1, r4
     7aa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ac:	2180      	movs	r1, #128	; 0x80
     7ae:	0289      	lsls	r1, r1, #10
     7b0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	0019      	movs	r1, r3
     7b4:	3153      	adds	r1, #83	; 0x53
     7b6:	7808      	ldrb	r0, [r1, #0]
     7b8:	43a0      	bics	r0, r4
     7ba:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7bc:	7808      	ldrb	r0, [r1, #0]
     7be:	4338      	orrs	r0, r7
     7c0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c2:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7c4:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c6:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7c8:	0300      	lsls	r0, r0, #12
     7ca:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7cc:	9703      	str	r7, [sp, #12]
     7ce:	7838      	ldrb	r0, [r7, #0]
     7d0:	2720      	movs	r7, #32
     7d2:	4010      	ands	r0, r2
     7d4:	4338      	orrs	r0, r7
     7d6:	9f03      	ldr	r7, [sp, #12]
     7d8:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7dc:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7de:	4320      	orrs	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e2:	0018      	movs	r0, r3
     7e4:	3038      	adds	r0, #56	; 0x38
     7e6:	7801      	ldrb	r1, [r0, #0]
     7e8:	4011      	ands	r1, r2
     7ea:	4339      	orrs	r1, r7
     7ec:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ee:	7831      	ldrb	r1, [r6, #0]
     7f0:	4321      	orrs	r1, r4
     7f2:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f4:	4666      	mov	r6, ip
     7f6:	7801      	ldrb	r1, [r0, #0]
     7f8:	4391      	bics	r1, r2
     7fa:	4331      	orrs	r1, r6
     7fc:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     802:	4321      	orrs	r1, r4
     804:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     806:	7981      	ldrb	r1, [r0, #6]
     808:	43a1      	bics	r1, r4
     80a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	02c9      	lsls	r1, r1, #11
     810:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     812:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	7801      	ldrb	r1, [r0, #0]
     816:	43a1      	bics	r1, r4
     818:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81a:	2180      	movs	r1, #128	; 0x80
     81c:	0149      	lsls	r1, r1, #5
     81e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	7881      	ldrb	r1, [r0, #2]
     822:	43a1      	bics	r1, r4
     824:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     826:	2180      	movs	r1, #128	; 0x80
     828:	01c9      	lsls	r1, r1, #7
     82a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     82c:	0019      	movs	r1, r3
     82e:	314d      	adds	r1, #77	; 0x4d
     830:	7808      	ldrb	r0, [r1, #0]
     832:	43a0      	bics	r0, r4
     834:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     836:	7808      	ldrb	r0, [r1, #0]
     838:	4330      	orrs	r0, r6
     83a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     83c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     840:	0189      	lsls	r1, r1, #6
     842:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     844:	304f      	adds	r0, #79	; 0x4f
     846:	7801      	ldrb	r1, [r0, #0]
     848:	43a1      	bics	r1, r4
     84a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84c:	2180      	movs	r1, #128	; 0x80
     84e:	0209      	lsls	r1, r1, #8
     850:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     852:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     854:	0019      	movs	r1, r3
     856:	3155      	adds	r1, #85	; 0x55
     858:	7808      	ldrb	r0, [r1, #0]
     85a:	43a0      	bics	r0, r4
     85c:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     85e:	2080      	movs	r0, #128	; 0x80
     860:	0380      	lsls	r0, r0, #14
     862:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     864:	2040      	movs	r0, #64	; 0x40
     866:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     868:	7848      	ldrb	r0, [r1, #1]
     86a:	43a0      	bics	r0, r4
     86c:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     86e:	2080      	movs	r0, #128	; 0x80
     870:	03c0      	lsls	r0, r0, #15
     872:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     874:	0018      	movs	r0, r3
     876:	303b      	adds	r0, #59	; 0x3b
     878:	7805      	ldrb	r5, [r0, #0]
     87a:	4395      	bics	r5, r2
     87c:	4335      	orrs	r5, r6
     87e:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     880:	784d      	ldrb	r5, [r1, #1]
     882:	4325      	orrs	r5, r4
     884:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	788d      	ldrb	r5, [r1, #2]
     888:	43a5      	bics	r5, r4
     88a:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     88c:	788d      	ldrb	r5, [r1, #2]
     88e:	4335      	orrs	r5, r6
     890:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     892:	2580      	movs	r5, #128	; 0x80
     894:	042d      	lsls	r5, r5, #16
     896:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     898:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     89a:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     89c:	4e20      	ldr	r6, [pc, #128]	; (920 <init+0x328>)
     89e:	401a      	ands	r2, r3
     8a0:	433a      	orrs	r2, r7
     8a2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a4:	788b      	ldrb	r3, [r1, #2]
     8a6:	2204      	movs	r2, #4
     8a8:	4323      	orrs	r3, r4
     8aa:	708b      	strb	r3, [r1, #2]
     8ac:	2000      	movs	r0, #0
     8ae:	2103      	movs	r1, #3
     8b0:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     8b2:	002b      	movs	r3, r5
     8b4:	002a      	movs	r2, r5
     8b6:	0028      	movs	r0, r5
     8b8:	4f1a      	ldr	r7, [pc, #104]	; (924 <init+0x32c>)
     8ba:	9501      	str	r5, [sp, #4]
     8bc:	9500      	str	r5, [sp, #0]
     8be:	2103      	movs	r1, #3
     8c0:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     8c2:	0020      	movs	r0, r4
     8c4:	2204      	movs	r2, #4
     8c6:	2103      	movs	r1, #3
     8c8:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     8ca:	002b      	movs	r3, r5
     8cc:	002a      	movs	r2, r5
     8ce:	0020      	movs	r0, r4
     8d0:	9501      	str	r5, [sp, #4]
     8d2:	9500      	str	r5, [sp, #0]
     8d4:	2103      	movs	r1, #3
     8d6:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     8d8:	2208      	movs	r2, #8
     8da:	2104      	movs	r1, #4
     8dc:	2003      	movs	r0, #3
     8de:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     8e0:	0021      	movs	r1, r4
     8e2:	002a      	movs	r2, r5
     8e4:	2003      	movs	r0, #3
     8e6:	4b10      	ldr	r3, [pc, #64]	; (928 <init+0x330>)
     8e8:	4c10      	ldr	r4, [pc, #64]	; (92c <init+0x334>)
     8ea:	47a0      	blx	r4

    TC4Init();
     8ec:	4b10      	ldr	r3, [pc, #64]	; (930 <init+0x338>)
     8ee:	4798      	blx	r3
    TC5Init();
     8f0:	4b10      	ldr	r3, [pc, #64]	; (934 <init+0x33c>)
     8f2:	4798      	blx	r3
}
     8f4:	b005      	add	sp, #20
     8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f8:	000001d5 	.word	0x000001d5
     8fc:	00000cfd 	.word	0x00000cfd
     900:	00000d95 	.word	0x00000d95
     904:	00000e95 	.word	0x00000e95
     908:	00000b25 	.word	0x00000b25
     90c:	00001035 	.word	0x00001035
     910:	e000e100 	.word	0xe000e100
     914:	ff00ffff 	.word	0xff00ffff
     918:	41004400 	.word	0x41004400
     91c:	41004435 	.word	0x41004435
     920:	000015dd 	.word	0x000015dd
     924:	00001641 	.word	0x00001641
     928:	0000f972 	.word	0x0000f972
     92c:	000016a5 	.word	0x000016a5
     930:	00000f65 	.word	0x00000f65
     934:	00000fcd 	.word	0x00000fcd

00000938 <startUp>:

void startUp(Altimeter *my_altimeter) {
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	0004      	movs	r4, r0


    beep(400);
     93c:	20c8      	movs	r0, #200	; 0xc8

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     93e:	b089      	sub	sp, #36	; 0x24


    beep(400);
     940:	0040      	lsls	r0, r0, #1
     942:	4f2a      	ldr	r7, [pc, #168]	; (9ec <startUp+0xb4>)
     944:	47b8      	blx	r7

    u32_t startupTime = millis();
     946:	4e2a      	ldr	r6, [pc, #168]	; (9f0 <startUp+0xb8>)
     948:	47b0      	blx	r6

    sampleTick(my_altimeter);
     94a:	4d2a      	ldr	r5, [pc, #168]	; (9f4 <startUp+0xbc>)
void startUp(Altimeter *my_altimeter) {


    beep(400);

    u32_t startupTime = millis();
     94c:	9000      	str	r0, [sp, #0]

    sampleTick(my_altimeter);
     94e:	0020      	movs	r0, r4
     950:	47a8      	blx	r5
    flight(my_altimeter);
     952:	4b29      	ldr	r3, [pc, #164]	; (9f8 <startUp+0xc0>)
     954:	0020      	movs	r0, r4
     956:	4798      	blx	r3
     958:	4b27      	ldr	r3, [pc, #156]	; (9f8 <startUp+0xc0>)
     95a:	9301      	str	r3, [sp, #4]

    while((millis() - startupTime) < 1000) {
     95c:	47b0      	blx	r6
     95e:	9b00      	ldr	r3, [sp, #0]
     960:	1ac0      	subs	r0, r0, r3
     962:	4b26      	ldr	r3, [pc, #152]	; (9fc <startUp+0xc4>)
     964:	4298      	cmp	r0, r3
     966:	d823      	bhi.n	9b0 <startUp+0x78>


        usartDataOut(USART3,'T');
     968:	2154      	movs	r1, #84	; 0x54
     96a:	2003      	movs	r0, #3
     96c:	4b24      	ldr	r3, [pc, #144]	; (a00 <startUp+0xc8>)
     96e:	4798      	blx	r3
        delay_ms(40);
     970:	4b24      	ldr	r3, [pc, #144]	; (a04 <startUp+0xcc>)
     972:	2028      	movs	r0, #40	; 0x28
     974:	4798      	blx	r3
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     976:	4b24      	ldr	r3, [pc, #144]	; (a08 <startUp+0xd0>)
     978:	7e1b      	ldrb	r3, [r3, #24]
     97a:	075b      	lsls	r3, r3, #29
     97c:	d5ee      	bpl.n	95c <startUp+0x24>
            u8_t data1 = usartDataIn(USART3);
     97e:	2003      	movs	r0, #3
     980:	4b22      	ldr	r3, [pc, #136]	; (a0c <startUp+0xd4>)
     982:	4798      	blx	r3
            if (data1 == 0x41) {
     984:	2841      	cmp	r0, #65	; 0x41
     986:	d1e9      	bne.n	95c <startUp+0x24>

                u8_t bytesToSend = 23;
                u8_t data[23] = {0};
     988:	2217      	movs	r2, #23
     98a:	2100      	movs	r1, #0
     98c:	4b20      	ldr	r3, [pc, #128]	; (a10 <startUp+0xd8>)
     98e:	a802      	add	r0, sp, #8
     990:	4798      	blx	r3

                AT25SEreadSample(my_altimeter->myFlashMemory.currentAddress, bytesToSend, data);
     992:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     994:	aa02      	add	r2, sp, #8
     996:	b2d8      	uxtb	r0, r3
     998:	2117      	movs	r1, #23
     99a:	4b1e      	ldr	r3, [pc, #120]	; (a14 <startUp+0xdc>)
     99c:	4798      	blx	r3
     99e:	2600      	movs	r6, #0

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
                    usartDataOut(USART3, data[dataByte]);
     9a0:	ab02      	add	r3, sp, #8
     9a2:	5d99      	ldrb	r1, [r3, r6]
     9a4:	2003      	movs	r0, #3
     9a6:	4b16      	ldr	r3, [pc, #88]	; (a00 <startUp+0xc8>)
     9a8:	3601      	adds	r6, #1
     9aa:	4798      	blx	r3
                u8_t bytesToSend = 23;
                u8_t data[23] = {0};

                AT25SEreadSample(my_altimeter->myFlashMemory.currentAddress, bytesToSend, data);

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
     9ac:	2e17      	cmp	r6, #23
     9ae:	d1f7      	bne.n	9a0 <startUp+0x68>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     9b0:	0020      	movs	r0, r4
     9b2:	47a8      	blx	r5
    flight(my_altimeter);
     9b4:	9b01      	ldr	r3, [sp, #4]
     9b6:	0020      	movs	r0, r4
     9b8:	4798      	blx	r3

    beep(300);
     9ba:	2096      	movs	r0, #150	; 0x96
     9bc:	0040      	lsls	r0, r0, #1
     9be:	47b8      	blx	r7
    delay_ms(80);
     9c0:	4c10      	ldr	r4, [pc, #64]	; (a04 <startUp+0xcc>)
     9c2:	2050      	movs	r0, #80	; 0x50
     9c4:	47a0      	blx	r4
    beep(300);
     9c6:	2096      	movs	r0, #150	; 0x96
     9c8:	0040      	lsls	r0, r0, #1
     9ca:	47b8      	blx	r7
    delay_ms(250);
     9cc:	20fa      	movs	r0, #250	; 0xfa
     9ce:	47a0      	blx	r4
    beep(300);
     9d0:	2096      	movs	r0, #150	; 0x96
     9d2:	0040      	lsls	r0, r0, #1
     9d4:	47b8      	blx	r7
    delay_ms(80);
     9d6:	2050      	movs	r0, #80	; 0x50
     9d8:	47a0      	blx	r4
    beep(300);
     9da:	2096      	movs	r0, #150	; 0x96
     9dc:	0040      	lsls	r0, r0, #1
     9de:	47b8      	blx	r7
    delay_ms(500);
     9e0:	20fa      	movs	r0, #250	; 0xfa
     9e2:	0040      	lsls	r0, r0, #1
     9e4:	47a0      	blx	r4


}
     9e6:	b009      	add	sp, #36	; 0x24
     9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	00000cc9 	.word	0x00000cc9
     9f0:	00000f31 	.word	0x00000f31
     9f4:	00001239 	.word	0x00001239
     9f8:	00001095 	.word	0x00001095
     9fc:	000003e7 	.word	0x000003e7
     a00:	00001701 	.word	0x00001701
     a04:	00000ee5 	.word	0x00000ee5
     a08:	42001400 	.word	0x42001400
     a0c:	00001719 	.word	0x00001719
     a10:	00002605 	.word	0x00002605
     a14:	00000245 	.word	0x00000245

00000a18 <main>:



int main(void) {
     a18:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a1a:	2500      	movs	r5, #0

}



int main(void) {
     a1c:	4c25      	ldr	r4, [pc, #148]	; (ab4 <main+0x9c>)

    init();
     a1e:	4b26      	ldr	r3, [pc, #152]	; (ab8 <main+0xa0>)

}



int main(void) {
     a20:	44a5      	add	sp, r4

    init();
     a22:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a24:	ac03      	add	r4, sp, #12
    initMS5803Barometer(&my_altimeter.myBarometer);
     a26:	4b25      	ldr	r3, [pc, #148]	; (abc <main+0xa4>)
     a28:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a2a:	7025      	strb	r5, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     a2c:	4798      	blx	r3
    IMUinit();
     a2e:	4b24      	ldr	r3, [pc, #144]	; (ac0 <main+0xa8>)
     a30:	4798      	blx	r3

    sampleTick(&my_altimeter);
     a32:	0020      	movs	r0, r4
     a34:	4e23      	ldr	r6, [pc, #140]	; (ac4 <main+0xac>)
     a36:	47b0      	blx	r6


    startUp(&my_altimeter);
     a38:	0020      	movs	r0, r4
     a3a:	4b23      	ldr	r3, [pc, #140]	; (ac8 <main+0xb0>)
     a3c:	4798      	blx	r3


    u32_t time = 0;
    u32_t lastTime = 0;
    my_altimeter.myFlashMemory.currentAddress = 0x00000100;
     a3e:	2380      	movs	r3, #128	; 0x80
     a40:	005b      	lsls	r3, r3, #1
     a42:	67e3      	str	r3, [r4, #124]	; 0x7c

    AT25SFErace4KBlock(my_altimeter.myFlashMemory.currentAddress);
     a44:	0028      	movs	r0, r5
     a46:	4b21      	ldr	r3, [pc, #132]	; (acc <main+0xb4>)
     a48:	4798      	blx	r3
    //logSensors(&my_altimeter);
    delay_ms(5);
     a4a:	2005      	movs	r0, #5
     a4c:	4b20      	ldr	r3, [pc, #128]	; (ad0 <main+0xb8>)
     a4e:	4798      	blx	r3
     a50:	9601      	str	r6, [sp, #4]



    while (1) {
        time = millis();
     a52:	4b20      	ldr	r3, [pc, #128]	; (ad4 <main+0xbc>)
     a54:	4798      	blx	r3



        if (takeSample) {
     a56:	4e20      	ldr	r6, [pc, #128]	; (ad8 <main+0xc0>)
     a58:	7833      	ldrb	r3, [r6, #0]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d006      	beq.n	a6c <main+0x54>
            sampleTick(&my_altimeter);
     a5e:	0020      	movs	r0, r4
     a60:	9b01      	ldr	r3, [sp, #4]
     a62:	4798      	blx	r3
            flight(&my_altimeter);
     a64:	0020      	movs	r0, r4
     a66:	4b1d      	ldr	r3, [pc, #116]	; (adc <main+0xc4>)
     a68:	4798      	blx	r3
            takeSample = false;
     a6a:	7035      	strb	r5, [r6, #0]

        }


        if (writeLog) {
     a6c:	4b1c      	ldr	r3, [pc, #112]	; (ae0 <main+0xc8>)
     a6e:	781a      	ldrb	r2, [r3, #0]
     a70:	2a00      	cmp	r2, #0
     a72:	d0ee      	beq.n	a52 <main+0x3a>
            writeLog = false;
     a74:	701d      	strb	r5, [r3, #0]

            if (my_altimeter.myFlashMemory.pageReady) {
     a76:	4b1b      	ldr	r3, [pc, #108]	; (ae4 <main+0xcc>)
     a78:	5ce2      	ldrb	r2, [r4, r3]
     a7a:	2a00      	cmp	r2, #0
     a7c:	d107      	bne.n	a8e <main+0x76>
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
                }
            }

            //  beep();
            logSensors(&my_altimeter);
     a7e:	4b1a      	ldr	r3, [pc, #104]	; (ae8 <main+0xd0>)
     a80:	0020      	movs	r0, r4
     a82:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	4b19      	ldr	r3, [pc, #100]	; (aec <main+0xd4>)
     a88:	0352      	lsls	r2, r2, #13
     a8a:	61da      	str	r2, [r3, #28]
     a8c:	e7e1      	b.n	a52 <main+0x3a>
            writeLog = false;

            if (my_altimeter.myFlashMemory.pageReady) {
                my_altimeter.myFlashMemory.pageReady = false;

                beep(400);
     a8e:	20c8      	movs	r0, #200	; 0xc8
     a90:	2784      	movs	r7, #132	; 0x84

        if (writeLog) {
            writeLog = false;

            if (my_altimeter.myFlashMemory.pageReady) {
                my_altimeter.myFlashMemory.pageReady = false;
     a92:	54e5      	strb	r5, [r4, r3]

                beep(400);
     a94:	0040      	lsls	r0, r0, #1
     a96:	4b16      	ldr	r3, [pc, #88]	; (af0 <main+0xd8>)
     a98:	4798      	blx	r3
     a9a:	37ff      	adds	r7, #255	; 0xff
     a9c:	ab02      	add	r3, sp, #8
     a9e:	ae23      	add	r6, sp, #140	; 0x8c
     aa0:	18ff      	adds	r7, r7, r3
                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
     aa2:	7831      	ldrb	r1, [r6, #0]
     aa4:	2003      	movs	r0, #3
     aa6:	4b13      	ldr	r3, [pc, #76]	; (af4 <main+0xdc>)
     aa8:	3601      	adds	r6, #1
     aaa:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
                my_altimeter.myFlashMemory.pageReady = false;

                beep(400);
                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
     aac:	42be      	cmp	r6, r7
     aae:	d1f8      	bne.n	aa2 <main+0x8a>
     ab0:	e7e5      	b.n	a7e <main+0x66>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	fffffd5c 	.word	0xfffffd5c
     ab8:	000005f9 	.word	0x000005f9
     abc:	00000569 	.word	0x00000569
     ac0:	00000af9 	.word	0x00000af9
     ac4:	00001239 	.word	0x00001239
     ac8:	00000939 	.word	0x00000939
     acc:	000001e5 	.word	0x000001e5
     ad0:	00000ee5 	.word	0x00000ee5
     ad4:	00000f31 	.word	0x00000f31
     ad8:	20000463 	.word	0x20000463
     adc:	00001095 	.word	0x00001095
     ae0:	20000461 	.word	0x20000461
     ae4:	0000027f 	.word	0x0000027f
     ae8:	00001131 	.word	0x00001131
     aec:	41004400 	.word	0x41004400
     af0:	00000cc9 	.word	0x00000cc9
     af4:	00001701 	.word	0x00001701

00000af8 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     af8:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     afa:	4c08      	ldr	r4, [pc, #32]	; (b1c <IMUinit+0x24>)
     afc:	2580      	movs	r5, #128	; 0x80
     afe:	0023      	movs	r3, r4
     b00:	00ed      	lsls	r5, r5, #3
     b02:	3394      	adds	r3, #148	; 0x94
     b04:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b06:	4e06      	ldr	r6, [pc, #24]	; (b20 <IMUinit+0x28>)
     b08:	210f      	movs	r1, #15
     b0a:	2000      	movs	r0, #0
     b0c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b0e:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b10:	210c      	movs	r1, #12
     b12:	2000      	movs	r0, #0
     b14:	47b0      	blx	r6
     b16:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b18:	bd70      	pop	{r4, r5, r6, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	41004400 	.word	0x41004400
     b20:	000016e9 	.word	0x000016e9

00000b24 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b24:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b26:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b28:	4a10      	ldr	r2, [pc, #64]	; (b6c <adcInit+0x48>)
     b2a:	0249      	lsls	r1, r1, #9
     b2c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b2e:	4810      	ldr	r0, [pc, #64]	; (b70 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b30:	430b      	orrs	r3, r1
     b32:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b34:	23e0      	movs	r3, #224	; 0xe0
     b36:	490f      	ldr	r1, [pc, #60]	; (b74 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b38:	4a0f      	ldr	r2, [pc, #60]	; (b78 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b3a:	00db      	lsls	r3, r3, #3
     b3c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b3e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     b40:	4a0e      	ldr	r2, [pc, #56]	; (b7c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     b42:	6812      	ldr	r2, [r2, #0]
     b44:	0150      	lsls	r0, r2, #5
     b46:	4018      	ands	r0, r3
     b48:	4b0d      	ldr	r3, [pc, #52]	; (b80 <adcInit+0x5c>)
     b4a:	0154      	lsls	r4, r2, #5
     b4c:	681a      	ldr	r2, [r3, #0]
     b4e:	0ed3      	lsrs	r3, r2, #27
     b50:	4323      	orrs	r3, r4
     b52:	b2da      	uxtb	r2, r3
     b54:	0003      	movs	r3, r0
     b56:	4313      	orrs	r3, r2
     b58:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     b5a:	2302      	movs	r3, #2
     b5c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     b5e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     b60:	7e4b      	ldrb	r3, [r1, #25]
     b62:	b25b      	sxtb	r3, r3
     b64:	2b00      	cmp	r3, #0
     b66:	dbfb      	blt.n	b60 <adcInit+0x3c>
}
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	40000400 	.word	0x40000400
     b70:	0000401e 	.word	0x0000401e
     b74:	42004000 	.word	0x42004000
     b78:	40000c00 	.word	0x40000c00
     b7c:	00806024 	.word	0x00806024
     b80:	00806020 	.word	0x00806020

00000b84 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     b84:	2202      	movs	r2, #2
     b86:	4b05      	ldr	r3, [pc, #20]	; (b9c <adcSample+0x18>)
     b88:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     b8a:	3a01      	subs	r2, #1
     b8c:	7e19      	ldrb	r1, [r3, #24]
     b8e:	4211      	tst	r1, r2
     b90:	d0fc      	beq.n	b8c <adcSample+0x8>
    return ADC->RESULT.reg;
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <adcSample+0x18>)
     b94:	8b58      	ldrh	r0, [r3, #26]
     b96:	b280      	uxth	r0, r0
}
     b98:	4770      	bx	lr
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	42004000 	.word	0x42004000

00000ba0 <adc_read>:


u16_t adc_read(Pin p) {
     ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ba2:	2501      	movs	r5, #1
     ba4:	0c02      	lsrs	r2, r0, #16
     ba6:	b2d4      	uxtb	r4, r2
     ba8:	9000      	str	r0, [sp, #0]
     baa:	0e00      	lsrs	r0, r0, #24
     bac:	9101      	str	r1, [sp, #4]
     bae:	0842      	lsrs	r2, r0, #1
     bb0:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     bb2:	4911      	ldr	r1, [pc, #68]	; (bf8 <adc_read+0x58>)
     bb4:	18d2      	adds	r2, r2, r3
     bb6:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     bb8:	4228      	tst	r0, r5
     bba:	d005      	beq.n	bc8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     bbc:	210f      	movs	r1, #15
     bbe:	7814      	ldrb	r4, [r2, #0]
     bc0:	4021      	ands	r1, r4
     bc2:	2410      	movs	r4, #16
     bc4:	4321      	orrs	r1, r4
     bc6:	e003      	b.n	bd0 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     bc8:	240f      	movs	r4, #15
     bca:	7811      	ldrb	r1, [r2, #0]
     bcc:	43a1      	bics	r1, r4
     bce:	4329      	orrs	r1, r5
     bd0:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     bd2:	2101      	movs	r1, #1
     bd4:	4a09      	ldr	r2, [pc, #36]	; (bfc <adc_read+0x5c>)
     bd6:	18c3      	adds	r3, r0, r3
     bd8:	189b      	adds	r3, r3, r2
     bda:	781a      	ldrb	r2, [r3, #0]
     bdc:	430a      	orrs	r2, r1
     bde:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     be0:	466b      	mov	r3, sp
     be2:	791a      	ldrb	r2, [r3, #4]
     be4:	231f      	movs	r3, #31
     be6:	4013      	ands	r3, r2
     be8:	22c0      	movs	r2, #192	; 0xc0
     bea:	0152      	lsls	r2, r2, #5
     bec:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     bee:	4a04      	ldr	r2, [pc, #16]	; (c00 <adc_read+0x60>)
     bf0:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <adc_read+0x64>)
     bf4:	4798      	blx	r3
     bf6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     bf8:	41004430 	.word	0x41004430
     bfc:	41004440 	.word	0x41004440
     c00:	42004000 	.word	0x42004000
     c04:	00000b85 	.word	0x00000b85

00000c08 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c08:	0c01      	lsrs	r1, r0, #16
     c0a:	0c13      	lsrs	r3, r2, #16
     c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0e:	b2cd      	uxtb	r5, r1
     c10:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c12:	2301      	movs	r3, #1
     c14:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c16:	0e12      	lsrs	r2, r2, #24
     c18:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c1a:	0e00      	lsrs	r0, r0, #24
     c1c:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c1e:	001a      	movs	r2, r3
     c20:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c22:	0030      	movs	r0, r6
     c24:	4e11      	ldr	r6, [pc, #68]	; (c6c <byteOut+0x64>)
     c26:	01c9      	lsls	r1, r1, #7
     c28:	b087      	sub	sp, #28
     c2a:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c2c:	4e10      	ldr	r6, [pc, #64]	; (c70 <byteOut+0x68>)
     c2e:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c30:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c32:	19ae      	adds	r6, r5, r6
     c34:	7824      	ldrb	r4, [r4, #0]
     c36:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c38:	4e0c      	ldr	r6, [pc, #48]	; (c6c <byteOut+0x64>)
     c3a:	46b4      	mov	ip, r6
     c3c:	44ac      	add	ip, r5
     c3e:	4666      	mov	r6, ip
     c40:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     c42:	b266      	sxtb	r6, r4
     c44:	2e00      	cmp	r6, #0
     c46:	da05      	bge.n	c54 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c48:	4e09      	ldr	r6, [pc, #36]	; (c70 <byteOut+0x68>)
     c4a:	46b4      	mov	ip, r6
     c4c:	448c      	add	ip, r1
     c4e:	4666      	mov	r6, ip
     c50:	6032      	str	r2, [r6, #0]
     c52:	e000      	b.n	c56 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c54:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c56:	9e01      	ldr	r6, [sp, #4]
     c58:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     c5a:	0064      	lsls	r4, r4, #1
     c5c:	b2db      	uxtb	r3, r3
     c5e:	6030      	str	r0, [r6, #0]
     c60:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     c62:	2b00      	cmp	r3, #0
     c64:	d1e8      	bne.n	c38 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     c66:	b007      	add	sp, #28
     c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	41004414 	.word	0x41004414
     c70:	41004418 	.word	0x41004418

00000c74 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c76:	2501      	movs	r5, #1
     c78:	b085      	sub	sp, #20
     c7a:	9103      	str	r1, [sp, #12]
     c7c:	0011      	movs	r1, r2
     c7e:	0c06      	lsrs	r6, r0, #16
     c80:	9301      	str	r3, [sp, #4]
     c82:	b2f3      	uxtb	r3, r6
     c84:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c86:	0e09      	lsrs	r1, r1, #24
     c88:	0c14      	lsrs	r4, r2, #16
     c8a:	9002      	str	r0, [sp, #8]
     c8c:	9200      	str	r2, [sp, #0]
     c8e:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c90:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c92:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     c94:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c96:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c98:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c9a:	4c0a      	ldr	r4, [pc, #40]	; (cc4 <byteIn+0x50>)
     c9c:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c9e:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca0:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ca2:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca4:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ca6:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     ca8:	0040      	lsls	r0, r0, #1
     caa:	402c      	ands	r4, r5
     cac:	1e67      	subs	r7, r4, #1
     cae:	41bc      	sbcs	r4, r7
     cb0:	3901      	subs	r1, #1
     cb2:	4304      	orrs	r4, r0
     cb4:	b2c9      	uxtb	r1, r1
     cb6:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cb8:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     cba:	2900      	cmp	r1, #0
     cbc:	d1f2      	bne.n	ca4 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     cbe:	b005      	add	sp, #20
     cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	41004400 	.word	0x41004400

00000cc8 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     cca:	2380      	movs	r3, #128	; 0x80
     ccc:	2780      	movs	r7, #128	; 0x80
     cce:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     cd0:	2500      	movs	r5, #0
     cd2:	4c08      	ldr	r4, [pc, #32]	; (cf4 <beep+0x2c>)
     cd4:	035b      	lsls	r3, r3, #13
     cd6:	61e3      	str	r3, [r4, #28]
     cd8:	03bf      	lsls	r7, r7, #14
     cda:	42b5      	cmp	r5, r6
     cdc:	d006      	beq.n	cec <beep+0x24>
     cde:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     ce0:	207a      	movs	r0, #122	; 0x7a
     ce2:	4b05      	ldr	r3, [pc, #20]	; (cf8 <beep+0x30>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     ce4:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     ce6:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     ce8:	b2ad      	uxth	r5, r5
     cea:	e7f6      	b.n	cda <beep+0x12>
     cec:	2380      	movs	r3, #128	; 0x80
     cee:	035b      	lsls	r3, r3, #13
     cf0:	61e3      	str	r3, [r4, #28]
        delay_us(122);
    }
    pinToggle(LedPin);


}
     cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cf4:	41004400 	.word	0x41004400
     cf8:	00000eb5 	.word	0x00000eb5

00000cfc <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cfc:	23c2      	movs	r3, #194	; 0xc2
     cfe:	4a1a      	ldr	r2, [pc, #104]	; (d68 <GclkInit+0x6c>)
     d00:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d02:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d04:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d06:	2302      	movs	r3, #2
     d08:	4818      	ldr	r0, [pc, #96]	; (d6c <GclkInit+0x70>)
     d0a:	6841      	ldr	r1, [r0, #4]
     d0c:	4319      	orrs	r1, r3
     d0e:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     d10:	4917      	ldr	r1, [pc, #92]	; (d70 <GclkInit+0x74>)
     d12:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     d14:	68d1      	ldr	r1, [r2, #12]
     d16:	4219      	tst	r1, r3
     d18:	d0fc      	beq.n	d14 <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d1a:	4b16      	ldr	r3, [pc, #88]	; (d74 <GclkInit+0x78>)
     d1c:	6819      	ldr	r1, [r3, #0]
     d1e:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d20:	293f      	cmp	r1, #63	; 0x3f
     d22:	d100      	bne.n	d26 <GclkInit+0x2a>
        coarse = 0x1f;
     d24:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d26:	4b14      	ldr	r3, [pc, #80]	; (d78 <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d28:	4814      	ldr	r0, [pc, #80]	; (d7c <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	059b      	lsls	r3, r3, #22
     d2e:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d30:	4283      	cmp	r3, r0
     d32:	d100      	bne.n	d36 <GclkInit+0x3a>
        fine = 0x1ff;
     d34:	4b12      	ldr	r3, [pc, #72]	; (d80 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d36:	4813      	ldr	r0, [pc, #76]	; (d84 <GclkInit+0x88>)
     d38:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d3a:	2010      	movs	r0, #16
     d3c:	68d4      	ldr	r4, [r2, #12]
     d3e:	4204      	tst	r4, r0
     d40:	d0fc      	beq.n	d3c <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d42:	0289      	lsls	r1, r1, #10
     d44:	430b      	orrs	r3, r1
     d46:	4908      	ldr	r1, [pc, #32]	; (d68 <GclkInit+0x6c>)
     d48:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d4a:	2310      	movs	r3, #16
     d4c:	68d1      	ldr	r1, [r2, #12]
     d4e:	4219      	tst	r1, r3
     d50:	d0fc      	beq.n	d4c <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d52:	4a0d      	ldr	r2, [pc, #52]	; (d88 <GclkInit+0x8c>)
     d54:	4b04      	ldr	r3, [pc, #16]	; (d68 <GclkInit+0x6c>)
     d56:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d58:	2280      	movs	r2, #128	; 0x80
     d5a:	4b0c      	ldr	r3, [pc, #48]	; (d8c <GclkInit+0x90>)
     d5c:	0052      	lsls	r2, r2, #1
     d5e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d60:	4a0b      	ldr	r2, [pc, #44]	; (d90 <GclkInit+0x94>)
     d62:	605a      	str	r2, [r3, #4]
}
     d64:	bd10      	pop	{r4, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	40000800 	.word	0x40000800
     d6c:	41004000 	.word	0x41004000
     d70:	0000060e 	.word	0x0000060e
     d74:	00806024 	.word	0x00806024
     d78:	00806028 	.word	0x00806028
     d7c:	000003ff 	.word	0x000003ff
     d80:	000001ff 	.word	0x000001ff
     d84:	00000522 	.word	0x00000522
     d88:	000005a2 	.word	0x000005a2
     d8c:	40000c00 	.word	0x40000c00
     d90:	00010700 	.word	0x00010700

00000d94 <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d94:	4b27      	ldr	r3, [pc, #156]	; (e34 <RtcInit+0xa0>)
     d96:	4a28      	ldr	r2, [pc, #160]	; (e38 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d98:	4828      	ldr	r0, [pc, #160]	; (e3c <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d9a:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     d9c:	4a28      	ldr	r2, [pc, #160]	; (e40 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d9e:	6999      	ldr	r1, [r3, #24]
     da0:	6812      	ldr	r2, [r2, #0]
     da2:	4001      	ands	r1, r0
     da4:	04d2      	lsls	r2, r2, #19
     da6:	0e52      	lsrs	r2, r2, #25
     da8:	0412      	lsls	r2, r2, #16
     daa:	4311      	orrs	r1, r2
     dac:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     dae:	4925      	ldr	r1, [pc, #148]	; (e44 <RtcInit+0xb0>)
     db0:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     db2:	6999      	ldr	r1, [r3, #24]
     db4:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     db6:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     db8:	4302      	orrs	r2, r0
     dba:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     dbc:	699a      	ldr	r2, [r3, #24]
     dbe:	430a      	orrs	r2, r1
     dc0:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     dc2:	2204      	movs	r2, #4
     dc4:	68d9      	ldr	r1, [r3, #12]
     dc6:	4211      	tst	r1, r2
     dc8:	d0fc      	beq.n	dc4 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     dca:	2281      	movs	r2, #129	; 0x81
     dcc:	4b1e      	ldr	r3, [pc, #120]	; (e48 <RtcInit+0xb4>)
     dce:	0052      	lsls	r2, r2, #1
     dd0:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     dd2:	4a1e      	ldr	r2, [pc, #120]	; (e4c <RtcInit+0xb8>)
     dd4:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     dd6:	785a      	ldrb	r2, [r3, #1]
     dd8:	b252      	sxtb	r2, r2
     dda:	2a00      	cmp	r2, #0
     ddc:	dbfb      	blt.n	dd6 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     dde:	4a1c      	ldr	r2, [pc, #112]	; (e50 <RtcInit+0xbc>)
     de0:	4b19      	ldr	r3, [pc, #100]	; (e48 <RtcInit+0xb4>)
     de2:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     de4:	2204      	movs	r2, #4
     de6:	4b1b      	ldr	r3, [pc, #108]	; (e54 <RtcInit+0xc0>)
     de8:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dea:	7a9a      	ldrb	r2, [r3, #10]
     dec:	4919      	ldr	r1, [pc, #100]	; (e54 <RtcInit+0xc0>)
     dee:	09d2      	lsrs	r2, r2, #7
     df0:	d1fb      	bne.n	dea <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     df2:	20a0      	movs	r0, #160	; 0xa0
     df4:	880a      	ldrh	r2, [r1, #0]
     df6:	00c0      	lsls	r0, r0, #3
     df8:	4302      	orrs	r2, r0
     dfa:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dfc:	7a9a      	ldrb	r2, [r3, #10]
     dfe:	09d2      	lsrs	r2, r2, #7
     e00:	d1fc      	bne.n	dfc <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e02:	4915      	ldr	r1, [pc, #84]	; (e58 <RtcInit+0xc4>)
     e04:	4a13      	ldr	r2, [pc, #76]	; (e54 <RtcInit+0xc0>)
     e06:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e08:	7a99      	ldrb	r1, [r3, #10]
     e0a:	4a12      	ldr	r2, [pc, #72]	; (e54 <RtcInit+0xc0>)
     e0c:	09c9      	lsrs	r1, r1, #7
     e0e:	d1fb      	bne.n	e08 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e10:	8851      	ldrh	r1, [r2, #2]
     e12:	4812      	ldr	r0, [pc, #72]	; (e5c <RtcInit+0xc8>)
     e14:	4301      	orrs	r1, r0
     e16:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e18:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e1a:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e1c:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e1e:	8811      	ldrh	r1, [r2, #0]
     e20:	4301      	orrs	r1, r0
     e22:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e24:	7a9a      	ldrb	r2, [r3, #10]
     e26:	09d2      	lsrs	r2, r2, #7
     e28:	d1fc      	bne.n	e24 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e2a:	4b0d      	ldr	r3, [pc, #52]	; (e60 <RtcInit+0xcc>)
     e2c:	3208      	adds	r2, #8
     e2e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e30:	4770      	bx	lr
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	40000800 	.word	0x40000800
     e38:	00000606 	.word	0x00000606
     e3c:	ff80ffff 	.word	0xff80ffff
     e40:	00806024 	.word	0x00806024
     e44:	00000604 	.word	0x00000604
     e48:	40000c00 	.word	0x40000c00
     e4c:	00230002 	.word	0x00230002
     e50:	00004204 	.word	0x00004204
     e54:	40001400 	.word	0x40001400
     e58:	000003e6 	.word	0x000003e6
     e5c:	00004010 	.word	0x00004010
     e60:	e000e100 	.word	0xe000e100

00000e64 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e64:	230f      	movs	r3, #15
     e66:	4018      	ands	r0, r3
     e68:	4b08      	ldr	r3, [pc, #32]	; (e8c <gclkEnable+0x28>)
     e6a:	0212      	lsls	r2, r2, #8
     e6c:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e6e:	23f8      	movs	r3, #248	; 0xf8
     e70:	0209      	lsls	r1, r1, #8
     e72:	015b      	lsls	r3, r3, #5
     e74:	4019      	ands	r1, r3
     e76:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e78:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e7a:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e7c:	4c04      	ldr	r4, [pc, #16]	; (e90 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e7e:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e80:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e82:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e84:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e86:	6060      	str	r0, [r4, #4]
}
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00ffff00 	.word	0x00ffff00
     e90:	40000c00 	.word	0x40000c00

00000e94 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <delayInit+0x14>)
     e96:	4a05      	ldr	r2, [pc, #20]	; (eac <delayInit+0x18>)
     e98:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     e9a:	2230      	movs	r2, #48	; 0x30
     e9c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e9e:	4b04      	ldr	r3, [pc, #16]	; (eb0 <delayInit+0x1c>)
     ea0:	3a2b      	subs	r2, #43	; 0x2b
     ea2:	601a      	str	r2, [r3, #0]
}
     ea4:	4770      	bx	lr
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	20000004 	.word	0x20000004
     eac:	0000bb80 	.word	0x0000bb80
     eb0:	e000e010 	.word	0xe000e010

00000eb4 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     eb4:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     eb8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     eba:	4b08      	ldr	r3, [pc, #32]	; (edc <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ebc:	4a08      	ldr	r2, [pc, #32]	; (ee0 <delay_us+0x2c>)
     ebe:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ec0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     ec2:	3801      	subs	r0, #1
     ec4:	d308      	bcc.n	ed8 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ec6:	2b00      	cmp	r3, #0
     ec8:	d0fb      	beq.n	ec2 <delay_us+0xe>
     eca:	4e05      	ldr	r6, [pc, #20]	; (ee0 <delay_us+0x2c>)
        SysTick->LOAD = n;
     ecc:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ece:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed0:	6835      	ldr	r5, [r6, #0]
     ed2:	4225      	tst	r5, r4
     ed4:	d0fc      	beq.n	ed0 <delay_us+0x1c>
     ed6:	e7f4      	b.n	ec2 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     ed8:	bd70      	pop	{r4, r5, r6, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	20000004 	.word	0x20000004
     ee0:	e000e010 	.word	0xe000e010

00000ee4 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ee4:	b570      	push	{r4, r5, r6, lr}
     ee6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ee8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     eea:	4b08      	ldr	r3, [pc, #32]	; (f0c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <delay_ms+0x2c>)
     eee:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ef0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     ef2:	3801      	subs	r0, #1
     ef4:	d308      	bcc.n	f08 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ef6:	2b00      	cmp	r3, #0
     ef8:	d0fb      	beq.n	ef2 <delay_ms+0xe>
     efa:	4e05      	ldr	r6, [pc, #20]	; (f10 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     efc:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     efe:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f00:	6835      	ldr	r5, [r6, #0]
     f02:	4225      	tst	r5, r4
     f04:	d0fc      	beq.n	f00 <delay_ms+0x1c>
     f06:	e7f4      	b.n	ef2 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f08:	bd70      	pop	{r4, r5, r6, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	20000004 	.word	0x20000004
     f10:	e000e010 	.word	0xe000e010

00000f14 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f14:	21fa      	movs	r1, #250	; 0xfa
     f16:	4a04      	ldr	r2, [pc, #16]	; (f28 <RTC_Handler+0x14>)
     f18:	0089      	lsls	r1, r1, #2
     f1a:	6813      	ldr	r3, [r2, #0]
     f1c:	185b      	adds	r3, r3, r1
     f1e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f20:	22ff      	movs	r2, #255	; 0xff
     f22:	4b02      	ldr	r3, [pc, #8]	; (f2c <RTC_Handler+0x18>)
     f24:	721a      	strb	r2, [r3, #8]
}
     f26:	4770      	bx	lr
     f28:	2000045c 	.word	0x2000045c
     f2c:	40001400 	.word	0x40001400

00000f30 <millis>:

uint32_t millis(void) {
     f30:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f32:	f3ef 8110 	mrs	r1, PRIMASK
     f36:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f38:	4a08      	ldr	r2, [pc, #32]	; (f5c <millis+0x2c>)
     f3a:	4d09      	ldr	r5, [pc, #36]	; (f60 <millis+0x30>)
     f3c:	8a10      	ldrh	r0, [r2, #16]
     f3e:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f40:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f42:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f44:	09e4      	lsrs	r4, r4, #7
     f46:	d004      	beq.n	f52 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f48:	8a13      	ldrh	r3, [r2, #16]
     f4a:	22fa      	movs	r2, #250	; 0xfa
     f4c:	6828      	ldr	r0, [r5, #0]
     f4e:	0092      	lsls	r2, r2, #2
     f50:	1880      	adds	r0, r0, r2
     f52:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f54:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f58:	bd30      	pop	{r4, r5, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	40001400 	.word	0x40001400
     f60:	2000045c 	.word	0x2000045c

00000f64 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f64:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f66:	4a0d      	ldr	r2, [pc, #52]	; (f9c <TC4Init+0x38>)
     f68:	4b0d      	ldr	r3, [pc, #52]	; (fa0 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f6a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f6c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f6e:	4a0d      	ldr	r2, [pc, #52]	; (fa4 <TC4Init+0x40>)
     f70:	6a13      	ldr	r3, [r2, #32]
     f72:	430b      	orrs	r3, r1
     f74:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f76:	4b0c      	ldr	r3, [pc, #48]	; (fa8 <TC4Init+0x44>)
     f78:	4a0c      	ldr	r2, [pc, #48]	; (fac <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f7a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f7c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     f7e:	2241      	movs	r2, #65	; 0x41
     f80:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f82:	3a40      	subs	r2, #64	; 0x40
     f84:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f86:	32ff      	adds	r2, #255	; 0xff
     f88:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f8a:	881a      	ldrh	r2, [r3, #0]
     f8c:	430a      	orrs	r2, r1
     f8e:	801a      	strh	r2, [r3, #0]
     f90:	2280      	movs	r2, #128	; 0x80
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <TC4Init+0x4c>)
     f94:	0312      	lsls	r2, r2, #12
     f96:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     f98:	4770      	bx	lr
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	0000421c 	.word	0x0000421c
     fa0:	40000c00 	.word	0x40000c00
     fa4:	40000400 	.word	0x40000400
     fa8:	42003000 	.word	0x42003000
     fac:	00000904 	.word	0x00000904
     fb0:	e000e100 	.word	0xe000e100

00000fb4 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fb4:	22ff      	movs	r2, #255	; 0xff
     fb6:	4b03      	ldr	r3, [pc, #12]	; (fc4 <TC4_Handler+0x10>)
     fb8:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     fba:	4b03      	ldr	r3, [pc, #12]	; (fc8 <TC4_Handler+0x14>)
     fbc:	3afe      	subs	r2, #254	; 0xfe
     fbe:	701a      	strb	r2, [r3, #0]
}
     fc0:	4770      	bx	lr
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	42003000 	.word	0x42003000
     fc8:	20000463 	.word	0x20000463

00000fcc <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fcc:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fce:	4a0d      	ldr	r2, [pc, #52]	; (1004 <TC5Init+0x38>)
     fd0:	4b0d      	ldr	r3, [pc, #52]	; (1008 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fd2:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fd4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fd6:	4a0d      	ldr	r2, [pc, #52]	; (100c <TC5Init+0x40>)
     fd8:	6a13      	ldr	r3, [r2, #32]
     fda:	430b      	orrs	r3, r1
     fdc:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fde:	4b0c      	ldr	r3, [pc, #48]	; (1010 <TC5Init+0x44>)
     fe0:	4a0c      	ldr	r2, [pc, #48]	; (1014 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fe2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fe4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
							
    TC5->COUNT8.PER.reg = 0x20;
     fe6:	2220      	movs	r2, #32
     fe8:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     fea:	3a1f      	subs	r2, #31
     fec:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     fee:	32ff      	adds	r2, #255	; 0xff
     ff0:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ff2:	881a      	ldrh	r2, [r3, #0]
     ff4:	430a      	orrs	r2, r1
     ff6:	801a      	strh	r2, [r3, #0]
     ff8:	2280      	movs	r2, #128	; 0x80
     ffa:	4b07      	ldr	r3, [pc, #28]	; (1018 <TC5Init+0x4c>)
     ffc:	0352      	lsls	r2, r2, #13
     ffe:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1000:	4770      	bx	lr
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	0000421c 	.word	0x0000421c
    1008:	40000c00 	.word	0x40000c00
    100c:	40000400 	.word	0x40000400
    1010:	42003400 	.word	0x42003400
    1014:	00000e04 	.word	0x00000e04
    1018:	e000e100 	.word	0xe000e100

0000101c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    101c:	22ff      	movs	r2, #255	; 0xff
    101e:	4b03      	ldr	r3, [pc, #12]	; (102c <TC5_Handler+0x10>)
    1020:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1022:	4b03      	ldr	r3, [pc, #12]	; (1030 <TC5_Handler+0x14>)
    1024:	3afe      	subs	r2, #254	; 0xfe
    1026:	701a      	strb	r2, [r3, #0]
    1028:	4770      	bx	lr
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	42003400 	.word	0x42003400
    1030:	20000461 	.word	0x20000461

00001034 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    1034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    1036:	27c0      	movs	r7, #192	; 0xc0
    1038:	4d10      	ldr	r5, [pc, #64]	; (107c <dmaInit+0x48>)
    103a:	003a      	movs	r2, r7
    103c:	4e10      	ldr	r6, [pc, #64]	; (1080 <dmaInit+0x4c>)
    103e:	0028      	movs	r0, r5
    1040:	2100      	movs	r1, #0
    1042:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    1044:	4c0f      	ldr	r4, [pc, #60]	; (1084 <dmaInit+0x50>)
    1046:	003a      	movs	r2, r7
    1048:	2100      	movs	r1, #0
    104a:	0020      	movs	r0, r4
    104c:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    104e:	2120      	movs	r1, #32
    1050:	4b0d      	ldr	r3, [pc, #52]	; (1088 <dmaInit+0x54>)
    1052:	695a      	ldr	r2, [r3, #20]
    1054:	430a      	orrs	r2, r1
    1056:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1058:	69da      	ldr	r2, [r3, #28]
    105a:	3910      	subs	r1, #16
    105c:	430a      	orrs	r2, r1
    105e:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <dmaInit+0x58>)
    1062:	390e      	subs	r1, #14
    1064:	881a      	ldrh	r2, [r3, #0]
    1066:	438a      	bics	r2, r1
    1068:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    106a:	881a      	ldrh	r2, [r3, #0]
    106c:	3901      	subs	r1, #1
    106e:	430a      	orrs	r2, r1
    1070:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1072:	4a07      	ldr	r2, [pc, #28]	; (1090 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1074:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1076:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1078:	801a      	strh	r2, [r3, #0]
}
    107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    107c:	20000530 	.word	0x20000530
    1080:	00002605 	.word	0x00002605
    1084:	20000470 	.word	0x20000470
    1088:	40000400 	.word	0x40000400
    108c:	41004800 	.word	0x41004800
    1090:	00000f02 	.word	0x00000f02

00001094 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1096:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1098:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    109a:	2b00      	cmp	r3, #0
    109c:	d13b      	bne.n	1116 <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    109e:	4d1e      	ldr	r5, [pc, #120]	; (1118 <flight+0x84>)
    10a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    10a2:	47a8      	blx	r5
    10a4:	4e1d      	ldr	r6, [pc, #116]	; (111c <flight+0x88>)
    10a6:	2200      	movs	r2, #0
    10a8:	4b1d      	ldr	r3, [pc, #116]	; (1120 <flight+0x8c>)
    10aa:	47b0      	blx	r6
    10ac:	9000      	str	r0, [sp, #0]
    10ae:	9101      	str	r1, [sp, #4]
    10b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    10b2:	47a8      	blx	r5
    10b4:	2200      	movs	r2, #0
    10b6:	4b1a      	ldr	r3, [pc, #104]	; (1120 <flight+0x8c>)
    10b8:	47b0      	blx	r6
    10ba:	4e1a      	ldr	r6, [pc, #104]	; (1124 <flight+0x90>)
    10bc:	0002      	movs	r2, r0
    10be:	000b      	movs	r3, r1
    10c0:	9800      	ldr	r0, [sp, #0]
    10c2:	9901      	ldr	r1, [sp, #4]
    10c4:	47b0      	blx	r6
    10c6:	4b18      	ldr	r3, [pc, #96]	; (1128 <flight+0x94>)
    10c8:	4798      	blx	r3
    10ca:	63e0      	str	r0, [r4, #60]	; 0x3c

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    10cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    10ce:	47a8      	blx	r5
    10d0:	2200      	movs	r2, #0
    10d2:	4b13      	ldr	r3, [pc, #76]	; (1120 <flight+0x8c>)
    10d4:	4e11      	ldr	r6, [pc, #68]	; (111c <flight+0x88>)
    10d6:	47b0      	blx	r6
    10d8:	0006      	movs	r6, r0
    10da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    10dc:	000f      	movs	r7, r1
    10de:	47a8      	blx	r5
    10e0:	4d0e      	ldr	r5, [pc, #56]	; (111c <flight+0x88>)
    10e2:	2200      	movs	r2, #0
    10e4:	4b0e      	ldr	r3, [pc, #56]	; (1120 <flight+0x8c>)
    10e6:	47a8      	blx	r5
    10e8:	4d0e      	ldr	r5, [pc, #56]	; (1124 <flight+0x90>)
    10ea:	0002      	movs	r2, r0
    10ec:	000b      	movs	r3, r1
    10ee:	0030      	movs	r0, r6
    10f0:	0039      	movs	r1, r7
    10f2:	47a8      	blx	r5
    10f4:	4b0c      	ldr	r3, [pc, #48]	; (1128 <flight+0x94>)
    10f6:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10f8:	4d0c      	ldr	r5, [pc, #48]	; (112c <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    10fa:	6320      	str	r0, [r4, #48]	; 0x30

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10fc:	47a8      	blx	r5
    10fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1100:	1ac0      	subs	r0, r0, r3
    1102:	23fa      	movs	r3, #250	; 0xfa
    1104:	00db      	lsls	r3, r3, #3
    1106:	4298      	cmp	r0, r3
    1108:	d905      	bls.n	1116 <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    110a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    110c:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    110e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1110:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myIMU.offsetBufferTime = millis();
    1112:	47a8      	blx	r5
    1114:	6360      	str	r0, [r4, #52]	; 0x34

        break;
    }


    1116:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1118:	000023c1 	.word	0x000023c1
    111c:	00001dd9 	.word	0x00001dd9
    1120:	3fe00000 	.word	0x3fe00000
    1124:	00001781 	.word	0x00001781
    1128:	00002469 	.word	0x00002469
    112c:	00000f31 	.word	0x00000f31

00001130 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    1130:	b5f0      	push	{r4, r5, r6, r7, lr}
    1132:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    1134:	466a      	mov	r2, sp
    1136:	2341      	movs	r3, #65	; 0x41
    1138:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    113a:	23a3      	movs	r3, #163	; 0xa3
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    113c:	4669      	mov	r1, sp
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    113e:	009b      	lsls	r3, r3, #2
    1140:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1142:	2480      	movs	r4, #128	; 0x80
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1144:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1146:	0a1a      	lsrs	r2, r3, #8
    1148:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    114a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    114c:	0e1b      	lsrs	r3, r3, #24
    114e:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1150:	6a43      	ldr	r3, [r0, #36]	; 0x24


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1152:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1154:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1156:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1158:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    115a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    115c:	0e1b      	lsrs	r3, r3, #24
    115e:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1160:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1162:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1164:	335c      	adds	r3, #92	; 0x5c
    1166:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1168:	34ff      	adds	r4, #255	; 0xff
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    116a:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    116c:	0a1b      	lsrs	r3, r3, #8
    116e:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1170:	0003      	movs	r3, r0
    1172:	3360      	adds	r3, #96	; 0x60
    1174:	881b      	ldrh	r3, [r3, #0]
    1176:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1178:	0a1b      	lsrs	r3, r3, #8
    117a:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    117c:	0003      	movs	r3, r0
    117e:	3364      	adds	r3, #100	; 0x64
    1180:	881b      	ldrh	r3, [r3, #0]
    1182:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1184:	0a1b      	lsrs	r3, r3, #8
    1186:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1188:	0003      	movs	r3, r0
    118a:	3368      	adds	r3, #104	; 0x68
    118c:	881b      	ldrh	r3, [r3, #0]
    118e:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1190:	0a1b      	lsrs	r3, r3, #8
    1192:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1194:	0003      	movs	r3, r0
    1196:	336c      	adds	r3, #108	; 0x6c
    1198:	881b      	ldrh	r3, [r3, #0]
    119a:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    119c:	0a1b      	lsrs	r3, r3, #8
    119e:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    11a0:	0003      	movs	r3, r0
    11a2:	3370      	adds	r3, #112	; 0x70
    11a4:	881b      	ldrh	r3, [r3, #0]
    11a6:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    11a8:	0a1b      	lsrs	r3, r3, #8
    11aa:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    11ac:	0003      	movs	r3, r0
    11ae:	3374      	adds	r3, #116	; 0x74
    11b0:	881b      	ldrh	r3, [r3, #0]
    11b2:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    11b4:	0a1b      	lsrs	r3, r3, #8
    11b6:	758b      	strb	r3, [r1, #22]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11b8:	5d02      	ldrb	r2, [r0, r4]
    11ba:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    11bc:	2ae8      	cmp	r2, #232	; 0xe8
    11be:	dd2b      	ble.n	1218 <logSensors+0xe8>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    11c0:	18d1      	adds	r1, r2, r3
    11c2:	29fe      	cmp	r1, #254	; 0xfe
    11c4:	dc08      	bgt.n	11d8 <logSensors+0xa8>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11c6:	466d      	mov	r5, sp
    11c8:	1841      	adds	r1, r0, r1
    11ca:	5ced      	ldrb	r5, [r5, r3]
    11cc:	3181      	adds	r1, #129	; 0x81
    11ce:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    11d0:	3301      	adds	r3, #1
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11d2:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    11d4:	b2db      	uxtb	r3, r3
    11d6:	e7f3      	b.n	11c0 <logSensors+0x90>
    11d8:	0002      	movs	r2, r0
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    11da:	2500      	movs	r5, #0
    11dc:	4915      	ldr	r1, [pc, #84]	; (1234 <logSensors+0x104>)
    11de:	3281      	adds	r2, #129	; 0x81
    11e0:	32ff      	adds	r2, #255	; 0xff
    11e2:	1841      	adds	r1, r0, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    11e4:	7817      	ldrb	r7, [r2, #0]
    11e6:	1e56      	subs	r6, r2, #1
    11e8:	3eff      	subs	r6, #255	; 0xff
    11ea:	7037      	strb	r7, [r6, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    11ec:	7015      	strb	r5, [r2, #0]
    11ee:	3201      	adds	r2, #1
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
    11f0:	4291      	cmp	r1, r2
    11f2:	d1f7      	bne.n	11e4 <logSensors+0xb4>
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }

        my_altimeter->myFlashMemory.pageReady = true;
    11f4:	2101      	movs	r1, #1
    11f6:	4a0f      	ldr	r2, [pc, #60]	; (1234 <logSensors+0x104>)
    11f8:	5481      	strb	r1, [r0, r2]

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    11fa:	2200      	movs	r2, #0
    11fc:	b2d5      	uxtb	r5, r2
    11fe:	1959      	adds	r1, r3, r5
    1200:	b2c9      	uxtb	r1, r1
    1202:	2917      	cmp	r1, #23
    1204:	d813      	bhi.n	122e <logSensors+0xfe>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[dataByte];
    1206:	0011      	movs	r1, r2
    1208:	466e      	mov	r6, sp
    120a:	3181      	adds	r1, #129	; 0x81
    120c:	5cb6      	ldrb	r6, [r6, r2]
    120e:	31ff      	adds	r1, #255	; 0xff
    1210:	5446      	strb	r6, [r0, r1]
    1212:	3201      	adds	r2, #1
            bytesWritten++;
			
            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
    1214:	5505      	strb	r5, [r0, r4]
    1216:	e7f1      	b.n	11fc <logSensors+0xcc>
        }
    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1218:	466d      	mov	r5, sp
    121a:	1899      	adds	r1, r3, r2
    121c:	5ced      	ldrb	r5, [r5, r3]
    121e:	3181      	adds	r1, #129	; 0x81
    1220:	31ff      	adds	r1, #255	; 0xff
    1222:	3301      	adds	r3, #1
    1224:	5445      	strb	r5, [r0, r1]
            bytesWritten++;
			
            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
        }
    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1226:	2b18      	cmp	r3, #24
    1228:	d1f6      	bne.n	1218 <logSensors+0xe8>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    122a:	3218      	adds	r2, #24
    122c:	5502      	strb	r2, [r0, r4]
//       for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
//           usartDataOut(USART3, dataToSend[dataByte]);
//       }
//u8_t bytesSent = AT25SEWritePage(my_altimeter->currentAddress,bytesToSend,dataToSend);

}
    122e:	b007      	add	sp, #28
    1230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	0000027f 	.word	0x0000027f

00001238 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1238:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    123a:	4bd1      	ldr	r3, [pc, #836]	; (1580 <sampleTick+0x348>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    123c:	b087      	sub	sp, #28
    123e:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    1240:	4798      	blx	r3
    1242:	23a3      	movs	r3, #163	; 0xa3

    my_altimeter->batV = adc_read(senseBatPin);
    1244:	4dcf      	ldr	r5, [pc, #828]	; (1584 <sampleTick+0x34c>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    1246:	009b      	lsls	r3, r3, #2
    1248:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    124a:	786b      	ldrb	r3, [r5, #1]
    124c:	7829      	ldrb	r1, [r5, #0]
    124e:	78a8      	ldrb	r0, [r5, #2]
    1250:	021b      	lsls	r3, r3, #8
    1252:	430b      	orrs	r3, r1
    1254:	0400      	lsls	r0, r0, #16
    1256:	001a      	movs	r2, r3
    1258:	0003      	movs	r3, r0
    125a:	78e8      	ldrb	r0, [r5, #3]
    125c:	4313      	orrs	r3, r2
    125e:	0600      	lsls	r0, r0, #24
    1260:	4ec9      	ldr	r6, [pc, #804]	; (1588 <sampleTick+0x350>)
    1262:	7929      	ldrb	r1, [r5, #4]
    1264:	4318      	orrs	r0, r3
    1266:	47b0      	blx	r6
    1268:	23a0      	movs	r3, #160	; 0xa0
    126a:	009b      	lsls	r3, r3, #2
    126c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    126e:	79ab      	ldrb	r3, [r5, #6]
    1270:	7969      	ldrb	r1, [r5, #5]
    1272:	79e8      	ldrb	r0, [r5, #7]
    1274:	021b      	lsls	r3, r3, #8
    1276:	430b      	orrs	r3, r1
    1278:	0400      	lsls	r0, r0, #16
    127a:	001a      	movs	r2, r3
    127c:	0003      	movs	r3, r0
    127e:	7a28      	ldrb	r0, [r5, #8]
    1280:	4313      	orrs	r3, r2
    1282:	0600      	lsls	r0, r0, #24
    1284:	7a69      	ldrb	r1, [r5, #9]
    1286:	4318      	orrs	r0, r3
    1288:	47b0      	blx	r6
    128a:	4bc0      	ldr	r3, [pc, #768]	; (158c <sampleTick+0x354>)
    my_altimeter->senseB = adc_read(senseBPin);
    128c:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    128e:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    1290:	7aeb      	ldrb	r3, [r5, #11]
    1292:	7b28      	ldrb	r0, [r5, #12]
    1294:	021b      	lsls	r3, r3, #8
    1296:	430b      	orrs	r3, r1
    1298:	0400      	lsls	r0, r0, #16
    129a:	001a      	movs	r2, r3
    129c:	0003      	movs	r3, r0
    129e:	7b68      	ldrb	r0, [r5, #13]
    12a0:	4313      	orrs	r3, r2
    12a2:	0600      	lsls	r0, r0, #24
    12a4:	7ba9      	ldrb	r1, [r5, #14]
    12a6:	4318      	orrs	r0, r3
    12a8:	47b0      	blx	r6
    12aa:	23a1      	movs	r3, #161	; 0xa1
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    12b0:	7c2b      	ldrb	r3, [r5, #16]
    12b2:	7be9      	ldrb	r1, [r5, #15]
    12b4:	7c68      	ldrb	r0, [r5, #17]
    12b6:	021b      	lsls	r3, r3, #8
    12b8:	430b      	orrs	r3, r1
    12ba:	0400      	lsls	r0, r0, #16
    12bc:	001a      	movs	r2, r3
    12be:	0003      	movs	r3, r0
    12c0:	7ca8      	ldrb	r0, [r5, #18]
    12c2:	4313      	orrs	r3, r2
    12c4:	0600      	lsls	r0, r0, #24
    12c6:	7ce9      	ldrb	r1, [r5, #19]
    12c8:	4318      	orrs	r0, r3
    12ca:	47b0      	blx	r6
    12cc:	4bb0      	ldr	r3, [pc, #704]	; (1590 <sampleTick+0x358>)
    my_altimeter->senseD = adc_read(senseDPin);
    12ce:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    12d0:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    12d2:	7d6b      	ldrb	r3, [r5, #21]
    12d4:	7da8      	ldrb	r0, [r5, #22]
    12d6:	021b      	lsls	r3, r3, #8
    12d8:	430b      	orrs	r3, r1
    12da:	0400      	lsls	r0, r0, #16
    12dc:	001a      	movs	r2, r3
    12de:	0003      	movs	r3, r0
    12e0:	7de8      	ldrb	r0, [r5, #23]
    12e2:	4313      	orrs	r3, r2
    12e4:	0600      	lsls	r0, r0, #24
    12e6:	7e29      	ldrb	r1, [r5, #24]
    12e8:	4318      	orrs	r0, r3
    12ea:	47b0      	blx	r6
    12ec:	23a2      	movs	r3, #162	; 0xa2
    12ee:	009b      	lsls	r3, r3, #2
    12f0:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    12f2:	7eab      	ldrb	r3, [r5, #26]
    12f4:	7e69      	ldrb	r1, [r5, #25]
    12f6:	7ee8      	ldrb	r0, [r5, #27]
    12f8:	021b      	lsls	r3, r3, #8
    12fa:	430b      	orrs	r3, r1
    12fc:	0400      	lsls	r0, r0, #16
    12fe:	001a      	movs	r2, r3
    1300:	0003      	movs	r3, r0
    1302:	7f28      	ldrb	r0, [r5, #28]
    1304:	4313      	orrs	r3, r2
    1306:	0600      	lsls	r0, r0, #24
    1308:	7f69      	ldrb	r1, [r5, #29]
    130a:	4318      	orrs	r0, r3
    130c:	47b0      	blx	r6
    130e:	0023      	movs	r3, r4
    1310:	3374      	adds	r3, #116	; 0x74
    1312:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1314:	4b9f      	ldr	r3, [pc, #636]	; (1594 <sampleTick+0x35c>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1316:	2780      	movs	r7, #128	; 0x80
    1318:	18c0      	adds	r0, r0, r3
    131a:	4b9f      	ldr	r3, [pc, #636]	; (1598 <sampleTick+0x360>)
    131c:	4798      	blx	r3
    131e:	4a9f      	ldr	r2, [pc, #636]	; (159c <sampleTick+0x364>)
    1320:	4e9f      	ldr	r6, [pc, #636]	; (15a0 <sampleTick+0x368>)
    1322:	4ba0      	ldr	r3, [pc, #640]	; (15a4 <sampleTick+0x36c>)
    1324:	47b0      	blx	r6
    1326:	4ba0      	ldr	r3, [pc, #640]	; (15a8 <sampleTick+0x370>)
    1328:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    132a:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    132c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    132e:	023f      	lsls	r7, r7, #8
    1330:	6463      	str	r3, [r4, #68]	; 0x44
    1332:	4b9e      	ldr	r3, [pc, #632]	; (15ac <sampleTick+0x374>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1334:	67a0      	str	r0, [r4, #120]	; 0x78
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1336:	002e      	movs	r6, r5
    1338:	615f      	str	r7, [r3, #20]
    133a:	9200      	str	r2, [sp, #0]
    133c:	7fea      	ldrb	r2, [r5, #31]
    133e:	7fa8      	ldrb	r0, [r5, #30]
    1340:	0212      	lsls	r2, r2, #8
    1342:	4302      	orrs	r2, r0
    1344:	0011      	movs	r1, r2
    1346:	002b      	movs	r3, r5
    1348:	361e      	adds	r6, #30
    134a:	78b2      	ldrb	r2, [r6, #2]
    134c:	3323      	adds	r3, #35	; 0x23
    134e:	0412      	lsls	r2, r2, #16
    1350:	430a      	orrs	r2, r1
    1352:	78f1      	ldrb	r1, [r6, #3]
    1354:	7818      	ldrb	r0, [r3, #0]
    1356:	0609      	lsls	r1, r1, #24
    1358:	4311      	orrs	r1, r2
    135a:	7932      	ldrb	r2, [r6, #4]
    135c:	789d      	ldrb	r5, [r3, #2]
    135e:	9204      	str	r2, [sp, #16]
    1360:	785a      	ldrb	r2, [r3, #1]
    1362:	042d      	lsls	r5, r5, #16
    1364:	0212      	lsls	r2, r2, #8
    1366:	4302      	orrs	r2, r0
    1368:	9103      	str	r1, [sp, #12]
    136a:	0011      	movs	r1, r2
    136c:	002a      	movs	r2, r5
    136e:	78dd      	ldrb	r5, [r3, #3]
    1370:	791b      	ldrb	r3, [r3, #4]
    1372:	430a      	orrs	r2, r1
    1374:	062d      	lsls	r5, r5, #24
    1376:	4315      	orrs	r5, r2
    1378:	9305      	str	r3, [sp, #20]
    137a:	9a03      	ldr	r2, [sp, #12]
    137c:	9905      	ldr	r1, [sp, #20]
    137e:	9b04      	ldr	r3, [sp, #16]
    1380:	0028      	movs	r0, r5
    1382:	4e8b      	ldr	r6, [pc, #556]	; (15b0 <sampleTick+0x378>)
    1384:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    1386:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1388:	4b88      	ldr	r3, [pc, #544]	; (15ac <sampleTick+0x374>)
    138a:	0040      	lsls	r0, r0, #1
    138c:	619f      	str	r7, [r3, #24]
    138e:	4b89      	ldr	r3, [pc, #548]	; (15b4 <sampleTick+0x37c>)
    1390:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1392:	4b89      	ldr	r3, [pc, #548]	; (15b8 <sampleTick+0x380>)
    1394:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1396:	4b85      	ldr	r3, [pc, #532]	; (15ac <sampleTick+0x374>)
    1398:	6160      	str	r0, [r4, #20]
    139a:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    139c:	2342      	movs	r3, #66	; 0x42
    139e:	9a03      	ldr	r2, [sp, #12]
    13a0:	9300      	str	r3, [sp, #0]
    13a2:	0028      	movs	r0, r5
    13a4:	9b04      	ldr	r3, [sp, #16]
    13a6:	9905      	ldr	r1, [sp, #20]
    13a8:	47b0      	blx	r6
    13aa:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13ac:	4b7f      	ldr	r3, [pc, #508]	; (15ac <sampleTick+0x374>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13ae:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13b0:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13b2:	4b82      	ldr	r3, [pc, #520]	; (15bc <sampleTick+0x384>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    13b4:	4f82      	ldr	r7, [pc, #520]	; (15c0 <sampleTick+0x388>)
    13b6:	601a      	str	r2, [r3, #0]
    13b8:	2182      	movs	r1, #130	; 0x82
    13ba:	2000      	movs	r0, #0
    13bc:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13be:	21ff      	movs	r1, #255	; 0xff
    13c0:	2000      	movs	r0, #0
    13c2:	47b8      	blx	r7
    13c4:	0023      	movs	r3, r4
    13c6:	335c      	adds	r3, #92	; 0x5c
    13c8:	8018      	strh	r0, [r3, #0]
    13ca:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13cc:	21ff      	movs	r1, #255	; 0xff
    13ce:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13d0:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13d2:	47b8      	blx	r7
    13d4:	9b03      	ldr	r3, [sp, #12]
    13d6:	0200      	lsls	r0, r0, #8
    13d8:	4305      	orrs	r5, r0
    13da:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13dc:	21ff      	movs	r1, #255	; 0xff
    13de:	0026      	movs	r6, r4
    13e0:	2000      	movs	r0, #0
    13e2:	47b8      	blx	r7
    13e4:	3660      	adds	r6, #96	; 0x60
    13e6:	8030      	strh	r0, [r6, #0]
    13e8:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13ea:	21ff      	movs	r1, #255	; 0xff
    13ec:	2000      	movs	r0, #0
    13ee:	47b8      	blx	r7
    13f0:	0200      	lsls	r0, r0, #8
    13f2:	4305      	orrs	r5, r0
    13f4:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13f6:	21ff      	movs	r1, #255	; 0xff
    13f8:	2000      	movs	r0, #0
    13fa:	47b8      	blx	r7
    13fc:	466b      	mov	r3, sp
    13fe:	0025      	movs	r5, r4
    1400:	9004      	str	r0, [sp, #16]
    1402:	8a1b      	ldrh	r3, [r3, #16]
    1404:	3564      	adds	r5, #100	; 0x64
    1406:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1408:	21ff      	movs	r1, #255	; 0xff
    140a:	2000      	movs	r0, #0
    140c:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    140e:	2280      	movs	r2, #128	; 0x80
    1410:	9b04      	ldr	r3, [sp, #16]
    1412:	0200      	lsls	r0, r0, #8
    1414:	4303      	orrs	r3, r0
    1416:	802b      	strh	r3, [r5, #0]
    1418:	4b6a      	ldr	r3, [pc, #424]	; (15c4 <sampleTick+0x38c>)
    141a:	00d2      	lsls	r2, r2, #3
    141c:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    141e:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1420:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    1422:	2000      	movs	r0, #0
    1424:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1426:	2300      	movs	r3, #0
    1428:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    142a:	2102      	movs	r1, #2
    142c:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    142e:	0021      	movs	r1, r4
    1430:	1112      	asrs	r2, r2, #4
    1432:	1100      	asrs	r0, r0, #4
    1434:	315e      	adds	r1, #94	; 0x5e
    1436:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1438:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    143a:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    143c:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    143e:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1440:	4b55      	ldr	r3, [pc, #340]	; (1598 <sampleTick+0x360>)
    1442:	4798      	blx	r3
    1444:	23fe      	movs	r3, #254	; 0xfe
    1446:	4d56      	ldr	r5, [pc, #344]	; (15a0 <sampleTick+0x368>)
    1448:	2200      	movs	r2, #0
    144a:	059b      	lsls	r3, r3, #22
    144c:	47a8      	blx	r5
    144e:	4b56      	ldr	r3, [pc, #344]	; (15a8 <sampleTick+0x370>)
    1450:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1452:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1454:	6420      	str	r0, [r4, #64]	; 0x40
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1456:	2000      	movs	r0, #0
    1458:	5e18      	ldrsh	r0, [r3, r0]
    145a:	4b4f      	ldr	r3, [pc, #316]	; (1598 <sampleTick+0x360>)
    145c:	4798      	blx	r3
    145e:	23fe      	movs	r3, #254	; 0xfe
    1460:	2200      	movs	r2, #0
    1462:	059b      	lsls	r3, r3, #22
    1464:	47a8      	blx	r5
    1466:	4b50      	ldr	r3, [pc, #320]	; (15a8 <sampleTick+0x370>)
    1468:	4798      	blx	r3
    146a:	64a0      	str	r0, [r4, #72]	; 0x48
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    146c:	2306      	movs	r3, #6
    146e:	5ef0      	ldrsh	r0, [r6, r3]
    1470:	4b49      	ldr	r3, [pc, #292]	; (1598 <sampleTick+0x360>)
    1472:	4798      	blx	r3
    1474:	23fe      	movs	r3, #254	; 0xfe
    1476:	2200      	movs	r2, #0
    1478:	059b      	lsls	r3, r3, #22
    147a:	47a8      	blx	r5
    147c:	4b4a      	ldr	r3, [pc, #296]	; (15a8 <sampleTick+0x370>)
    147e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1480:	2280      	movs	r2, #128	; 0x80
    1482:	4b4a      	ldr	r3, [pc, #296]	; (15ac <sampleTick+0x374>)
    1484:	00d2      	lsls	r2, r2, #3
    1486:	64e0      	str	r0, [r4, #76]	; 0x4c


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1488:	2182      	movs	r1, #130	; 0x82
    148a:	615a      	str	r2, [r3, #20]
    148c:	2000      	movs	r0, #0
    148e:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1490:	21ff      	movs	r1, #255	; 0xff
    1492:	2000      	movs	r0, #0
    1494:	47b8      	blx	r7
    1496:	0023      	movs	r3, r4
    1498:	3368      	adds	r3, #104	; 0x68
    149a:	8018      	strh	r0, [r3, #0]
    149c:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    149e:	21ff      	movs	r1, #255	; 0xff
    14a0:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    14a2:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14a4:	47b8      	blx	r7
    14a6:	9b03      	ldr	r3, [sp, #12]
    14a8:	0200      	lsls	r0, r0, #8
    14aa:	4305      	orrs	r5, r0
    14ac:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    14ae:	21ff      	movs	r1, #255	; 0xff
    14b0:	2000      	movs	r0, #0
    14b2:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14b4:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    14b6:	81b0      	strh	r0, [r6, #12]
    14b8:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14ba:	2000      	movs	r0, #0
    14bc:	47b8      	blx	r7
    14be:	0200      	lsls	r0, r0, #8
    14c0:	4305      	orrs	r5, r0
    14c2:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    14c4:	21ff      	movs	r1, #255	; 0xff
    14c6:	2000      	movs	r0, #0
    14c8:	47b8      	blx	r7
    14ca:	466b      	mov	r3, sp
    14cc:	0025      	movs	r5, r4
    14ce:	9004      	str	r0, [sp, #16]
    14d0:	8a1b      	ldrh	r3, [r3, #16]
    14d2:	3570      	adds	r5, #112	; 0x70
    14d4:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14d6:	21ff      	movs	r1, #255	; 0xff
    14d8:	2000      	movs	r0, #0
    14da:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	9f04      	ldr	r7, [sp, #16]
    14e0:	0200      	lsls	r0, r0, #8
    14e2:	4b32      	ldr	r3, [pc, #200]	; (15ac <sampleTick+0x374>)
    14e4:	4307      	orrs	r7, r0
    14e6:	00d2      	lsls	r2, r2, #3
    14e8:	802f      	strh	r7, [r5, #0]
    14ea:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    14ec:	9b03      	ldr	r3, [sp, #12]
    14ee:	2000      	movs	r0, #0
    14f0:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    14f2:	230c      	movs	r3, #12
    14f4:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    14f6:	2100      	movs	r1, #0
    14f8:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    14fa:	0021      	movs	r1, r4
    14fc:	1112      	asrs	r2, r2, #4
    14fe:	1100      	asrs	r0, r0, #4
    1500:	316a      	adds	r1, #106	; 0x6a
    1502:	111b      	asrs	r3, r3, #4
    1504:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1506:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1508:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    150a:	4b23      	ldr	r3, [pc, #140]	; (1598 <sampleTick+0x360>)
    150c:	4798      	blx	r3
    150e:	23fe      	movs	r3, #254	; 0xfe
    1510:	4f23      	ldr	r7, [pc, #140]	; (15a0 <sampleTick+0x368>)
    1512:	2200      	movs	r2, #0
    1514:	059b      	lsls	r3, r3, #22
    1516:	47b8      	blx	r7
    1518:	4b23      	ldr	r3, [pc, #140]	; (15a8 <sampleTick+0x370>)
    151a:	4798      	blx	r3
    151c:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    151e:	230e      	movs	r3, #14
    1520:	5ef0      	ldrsh	r0, [r6, r3]
    1522:	4b1d      	ldr	r3, [pc, #116]	; (1598 <sampleTick+0x360>)
    1524:	4798      	blx	r3
    1526:	23fe      	movs	r3, #254	; 0xfe
    1528:	2200      	movs	r2, #0
    152a:	059b      	lsls	r3, r3, #22
    152c:	47b8      	blx	r7
    152e:	4b1e      	ldr	r3, [pc, #120]	; (15a8 <sampleTick+0x370>)
    1530:	4798      	blx	r3
    1532:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1534:	2302      	movs	r3, #2
    1536:	5ee8      	ldrsh	r0, [r5, r3]
    1538:	4b17      	ldr	r3, [pc, #92]	; (1598 <sampleTick+0x360>)
    153a:	4798      	blx	r3
    153c:	23fe      	movs	r3, #254	; 0xfe
    153e:	2200      	movs	r2, #0
    1540:	059b      	lsls	r3, r3, #22
    1542:	47b8      	blx	r7
    1544:	4b18      	ldr	r3, [pc, #96]	; (15a8 <sampleTick+0x370>)
    1546:	4798      	blx	r3
    1548:	65a0      	str	r0, [r4, #88]	; 0x58

    delay_us(800);
    154a:	20c8      	movs	r0, #200	; 0xc8
    154c:	4b19      	ldr	r3, [pc, #100]	; (15b4 <sampleTick+0x37c>)
    154e:	0080      	lsls	r0, r0, #2
    1550:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1552:	4b19      	ldr	r3, [pc, #100]	; (15b8 <sampleTick+0x380>)
    1554:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1556:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1558:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    155a:	4b1b      	ldr	r3, [pc, #108]	; (15c8 <sampleTick+0x390>)
    155c:	0028      	movs	r0, r5
    155e:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1560:	0028      	movs	r0, r5
    1562:	4b1a      	ldr	r3, [pc, #104]	; (15cc <sampleTick+0x394>)
    1564:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1566:	4b1a      	ldr	r3, [pc, #104]	; (15d0 <sampleTick+0x398>)
    1568:	6a60      	ldr	r0, [r4, #36]	; 0x24
    156a:	4798      	blx	r3
    156c:	4a19      	ldr	r2, [pc, #100]	; (15d4 <sampleTick+0x39c>)
    156e:	4b1a      	ldr	r3, [pc, #104]	; (15d8 <sampleTick+0x3a0>)
    1570:	4d0b      	ldr	r5, [pc, #44]	; (15a0 <sampleTick+0x368>)
    1572:	47a8      	blx	r5
    1574:	4b0c      	ldr	r3, [pc, #48]	; (15a8 <sampleTick+0x370>)
    1576:	4798      	blx	r3
    1578:	62a0      	str	r0, [r4, #40]	; 0x28


}
    157a:	b007      	add	sp, #28
    157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	00000f31 	.word	0x00000f31
    1584:	00002904 	.word	0x00002904
    1588:	00000ba1 	.word	0x00000ba1
    158c:	00000282 	.word	0x00000282
    1590:	00000286 	.word	0x00000286
    1594:	fffff0c4 	.word	0xfffff0c4
    1598:	000022cd 	.word	0x000022cd
    159c:	02de00d2 	.word	0x02de00d2
    15a0:	00001dd9 	.word	0x00001dd9
    15a4:	bf8f8a09 	.word	0xbf8f8a09
    15a8:	00002469 	.word	0x00002469
    15ac:	41004400 	.word	0x41004400
    15b0:	00000c09 	.word	0x00000c09
    15b4:	00000eb5 	.word	0x00000eb5
    15b8:	000002a9 	.word	0x000002a9
    15bc:	41004494 	.word	0x41004494
    15c0:	000016e9 	.word	0x000016e9
    15c4:	41004498 	.word	0x41004498
    15c8:	0000035d 	.word	0x0000035d
    15cc:	00000449 	.word	0x00000449
    15d0:	00002351 	.word	0x00002351
    15d4:	e9f6a93f 	.word	0xe9f6a93f
    15d8:	3fa0cc78 	.word	0x3fa0cc78

000015dc <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15e0:	2301      	movs	r3, #1
    15e2:	1ca6      	adds	r6, r4, #2
    15e4:	40b3      	lsls	r3, r6
    15e6:	480d      	ldr	r0, [pc, #52]	; (161c <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15e8:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15ea:	6a01      	ldr	r1, [r0, #32]
    15ec:	430b      	orrs	r3, r1
    15ee:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    15f0:	2d00      	cmp	r5, #0
    15f2:	d003      	beq.n	15fc <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    15f4:	2107      	movs	r1, #7
    15f6:	0028      	movs	r0, r5
    15f8:	4b09      	ldr	r3, [pc, #36]	; (1620 <sercomClockEnable+0x44>)
    15fa:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    15fc:	22f0      	movs	r2, #240	; 0xf0
    15fe:	2080      	movs	r0, #128	; 0x80
    1600:	0229      	lsls	r1, r5, #8
    1602:	0112      	lsls	r2, r2, #4
    1604:	4011      	ands	r1, r2
    1606:	01c0      	lsls	r0, r0, #7
    1608:	4301      	orrs	r1, r0
    160a:	0020      	movs	r0, r4
    160c:	3014      	adds	r0, #20
    160e:	223f      	movs	r2, #63	; 0x3f
    1610:	0003      	movs	r3, r0
    1612:	4013      	ands	r3, r2
    1614:	4319      	orrs	r1, r3
    1616:	4b03      	ldr	r3, [pc, #12]	; (1624 <sercomClockEnable+0x48>)
    1618:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    161a:	bd70      	pop	{r4, r5, r6, pc}
    161c:	40000400 	.word	0x40000400
    1620:	00000e65 	.word	0x00000e65
    1624:	40000c00 	.word	0x40000c00

00001628 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <sercomReset+0x14>)
    162a:	0280      	lsls	r0, r0, #10
    162c:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    162e:	2301      	movs	r3, #1
    1630:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1632:	6802      	ldr	r2, [r0, #0]
    1634:	421a      	tst	r2, r3
    1636:	d1fc      	bne.n	1632 <sercomReset+0xa>
}
    1638:	4770      	bx	lr
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	42000800 	.word	0x42000800

00001640 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1642:	0004      	movs	r4, r0
    1644:	9300      	str	r3, [sp, #0]
    1646:	ab08      	add	r3, sp, #32
    1648:	781b      	ldrb	r3, [r3, #0]
    164a:	000e      	movs	r6, r1
    164c:	9301      	str	r3, [sp, #4]
    164e:	ab09      	add	r3, sp, #36	; 0x24
    1650:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1652:	4b12      	ldr	r3, [pc, #72]	; (169c <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1654:	0015      	movs	r5, r2

    sercomReset(id);
    1656:	4798      	blx	r3
    1658:	4b11      	ldr	r3, [pc, #68]	; (16a0 <sercomSpiMasterInit+0x60>)
    165a:	02a4      	lsls	r4, r4, #10
    165c:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    165e:	2380      	movs	r3, #128	; 0x80
    1660:	029b      	lsls	r3, r3, #10
    1662:	6063      	str	r3, [r4, #4]
    1664:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1666:	21c0      	movs	r1, #192	; 0xc0
    1668:	042d      	lsls	r5, r5, #16
    166a:	029b      	lsls	r3, r3, #10
    166c:	402b      	ands	r3, r5
    166e:	250e      	movs	r5, #14
    1670:	0536      	lsls	r6, r6, #20
    1672:	0389      	lsls	r1, r1, #14
    1674:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1676:	9e00      	ldr	r6, [sp, #0]
    1678:	431d      	orrs	r5, r3
    167a:	1e73      	subs	r3, r6, #1
    167c:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    167e:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1680:	0772      	lsls	r2, r6, #29
    1682:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1684:	432a      	orrs	r2, r5
    1686:	1e59      	subs	r1, r3, #1
    1688:	418b      	sbcs	r3, r1
    168a:	0016      	movs	r6, r2
    168c:	071b      	lsls	r3, r3, #28
    168e:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1690:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1692:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1694:	69e3      	ldr	r3, [r4, #28]
    1696:	075b      	lsls	r3, r3, #29
    1698:	d4fc      	bmi.n	1694 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    169a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    169c:	00001629 	.word	0x00001629
    16a0:	42000800 	.word	0x42000800

000016a4 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a6:	0007      	movs	r7, r0
    16a8:	001e      	movs	r6, r3
    sercomReset(id);
    16aa:	4b0c      	ldr	r3, [pc, #48]	; (16dc <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    16ac:	000d      	movs	r5, r1
    16ae:	0014      	movs	r4, r2
    sercomReset(id);
    16b0:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    16b2:	4b0b      	ldr	r3, [pc, #44]	; (16e0 <sercomUartInit+0x3c>)
    16b4:	02b8      	lsls	r0, r7, #10
    16b6:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    16b8:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16ba:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    16bc:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    16be:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16c0:	0529      	lsls	r1, r5, #20
    16c2:	0392      	lsls	r2, r2, #14
    16c4:	4011      	ands	r1, r2
    16c6:	4a07      	ldr	r2, [pc, #28]	; (16e4 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    16c8:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    16ca:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16cc:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    16ce:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16d0:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    16d2:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16d4:	4023      	ands	r3, r4
    16d6:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    16d8:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    16da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16dc:	00001629 	.word	0x00001629
    16e0:	42000800 	.word	0x42000800
    16e4:	40000006 	.word	0x40000006

000016e8 <spiDataTransfer>:
    16e8:	4b04      	ldr	r3, [pc, #16]	; (16fc <spiDataTransfer+0x14>)
    16ea:	0280      	lsls	r0, r0, #10
    16ec:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    16ee:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    16f0:	7e03      	ldrb	r3, [r0, #24]
    16f2:	075b      	lsls	r3, r3, #29
    16f4:	d5fc      	bpl.n	16f0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    16f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16f8:	b2c0      	uxtb	r0, r0
}
    16fa:	4770      	bx	lr
    16fc:	42000800 	.word	0x42000800

00001700 <usartDataOut>:
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <usartDataOut+0x14>)
    1702:	0280      	lsls	r0, r0, #10
    1704:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1706:	b289      	uxth	r1, r1
    1708:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    170a:	7e03      	ldrb	r3, [r0, #24]
    170c:	07db      	lsls	r3, r3, #31
    170e:	d5fc      	bpl.n	170a <usartDataOut+0xa>
}
    1710:	4770      	bx	lr
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	42000800 	.word	0x42000800

00001718 <usartDataIn>:
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <usartDataIn+0xc>)
    171a:	0280      	lsls	r0, r0, #10
    171c:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    171e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1720:	b2c0      	uxtb	r0, r0
    1722:	4770      	bx	lr
    1724:	42000800 	.word	0x42000800

00001728 <__aeabi_lmul>:
    1728:	b5f0      	push	{r4, r5, r6, r7, lr}
    172a:	464f      	mov	r7, r9
    172c:	4646      	mov	r6, r8
    172e:	b4c0      	push	{r6, r7}
    1730:	0416      	lsls	r6, r2, #16
    1732:	0c36      	lsrs	r6, r6, #16
    1734:	4699      	mov	r9, r3
    1736:	0033      	movs	r3, r6
    1738:	0405      	lsls	r5, r0, #16
    173a:	0c2c      	lsrs	r4, r5, #16
    173c:	0c07      	lsrs	r7, r0, #16
    173e:	0c15      	lsrs	r5, r2, #16
    1740:	4363      	muls	r3, r4
    1742:	437e      	muls	r6, r7
    1744:	436f      	muls	r7, r5
    1746:	4365      	muls	r5, r4
    1748:	0c1c      	lsrs	r4, r3, #16
    174a:	19ad      	adds	r5, r5, r6
    174c:	1964      	adds	r4, r4, r5
    174e:	469c      	mov	ip, r3
    1750:	42a6      	cmp	r6, r4
    1752:	d903      	bls.n	175c <__aeabi_lmul+0x34>
    1754:	2380      	movs	r3, #128	; 0x80
    1756:	025b      	lsls	r3, r3, #9
    1758:	4698      	mov	r8, r3
    175a:	4447      	add	r7, r8
    175c:	4663      	mov	r3, ip
    175e:	0c25      	lsrs	r5, r4, #16
    1760:	19ef      	adds	r7, r5, r7
    1762:	041d      	lsls	r5, r3, #16
    1764:	464b      	mov	r3, r9
    1766:	434a      	muls	r2, r1
    1768:	4343      	muls	r3, r0
    176a:	0c2d      	lsrs	r5, r5, #16
    176c:	0424      	lsls	r4, r4, #16
    176e:	1964      	adds	r4, r4, r5
    1770:	1899      	adds	r1, r3, r2
    1772:	19c9      	adds	r1, r1, r7
    1774:	0020      	movs	r0, r4
    1776:	bc0c      	pop	{r2, r3}
    1778:	4690      	mov	r8, r2
    177a:	4699      	mov	r9, r3
    177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    177e:	46c0      	nop			; (mov r8, r8)

00001780 <__aeabi_dadd>:
    1780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1782:	4656      	mov	r6, sl
    1784:	465f      	mov	r7, fp
    1786:	464d      	mov	r5, r9
    1788:	4644      	mov	r4, r8
    178a:	b4f0      	push	{r4, r5, r6, r7}
    178c:	000f      	movs	r7, r1
    178e:	0ffd      	lsrs	r5, r7, #31
    1790:	46aa      	mov	sl, r5
    1792:	0309      	lsls	r1, r1, #12
    1794:	007c      	lsls	r4, r7, #1
    1796:	002e      	movs	r6, r5
    1798:	005f      	lsls	r7, r3, #1
    179a:	0f45      	lsrs	r5, r0, #29
    179c:	0a49      	lsrs	r1, r1, #9
    179e:	0d7f      	lsrs	r7, r7, #21
    17a0:	4329      	orrs	r1, r5
    17a2:	00c5      	lsls	r5, r0, #3
    17a4:	0318      	lsls	r0, r3, #12
    17a6:	46bc      	mov	ip, r7
    17a8:	0a40      	lsrs	r0, r0, #9
    17aa:	0f57      	lsrs	r7, r2, #29
    17ac:	0d64      	lsrs	r4, r4, #21
    17ae:	0fdb      	lsrs	r3, r3, #31
    17b0:	4338      	orrs	r0, r7
    17b2:	00d2      	lsls	r2, r2, #3
    17b4:	459a      	cmp	sl, r3
    17b6:	d100      	bne.n	17ba <__aeabi_dadd+0x3a>
    17b8:	e0aa      	b.n	1910 <__aeabi_dadd+0x190>
    17ba:	4666      	mov	r6, ip
    17bc:	1ba6      	subs	r6, r4, r6
    17be:	2e00      	cmp	r6, #0
    17c0:	dc00      	bgt.n	17c4 <__aeabi_dadd+0x44>
    17c2:	e0ff      	b.n	19c4 <__aeabi_dadd+0x244>
    17c4:	4663      	mov	r3, ip
    17c6:	2b00      	cmp	r3, #0
    17c8:	d139      	bne.n	183e <__aeabi_dadd+0xbe>
    17ca:	0003      	movs	r3, r0
    17cc:	4313      	orrs	r3, r2
    17ce:	d000      	beq.n	17d2 <__aeabi_dadd+0x52>
    17d0:	e0d9      	b.n	1986 <__aeabi_dadd+0x206>
    17d2:	076b      	lsls	r3, r5, #29
    17d4:	d009      	beq.n	17ea <__aeabi_dadd+0x6a>
    17d6:	230f      	movs	r3, #15
    17d8:	402b      	ands	r3, r5
    17da:	2b04      	cmp	r3, #4
    17dc:	d005      	beq.n	17ea <__aeabi_dadd+0x6a>
    17de:	1d2b      	adds	r3, r5, #4
    17e0:	42ab      	cmp	r3, r5
    17e2:	41ad      	sbcs	r5, r5
    17e4:	426d      	negs	r5, r5
    17e6:	1949      	adds	r1, r1, r5
    17e8:	001d      	movs	r5, r3
    17ea:	020b      	lsls	r3, r1, #8
    17ec:	d400      	bmi.n	17f0 <__aeabi_dadd+0x70>
    17ee:	e082      	b.n	18f6 <__aeabi_dadd+0x176>
    17f0:	4bca      	ldr	r3, [pc, #808]	; (1b1c <__aeabi_dadd+0x39c>)
    17f2:	3401      	adds	r4, #1
    17f4:	429c      	cmp	r4, r3
    17f6:	d100      	bne.n	17fa <__aeabi_dadd+0x7a>
    17f8:	e0fe      	b.n	19f8 <__aeabi_dadd+0x278>
    17fa:	000a      	movs	r2, r1
    17fc:	4656      	mov	r6, sl
    17fe:	4bc8      	ldr	r3, [pc, #800]	; (1b20 <__aeabi_dadd+0x3a0>)
    1800:	08ed      	lsrs	r5, r5, #3
    1802:	401a      	ands	r2, r3
    1804:	0750      	lsls	r0, r2, #29
    1806:	0564      	lsls	r4, r4, #21
    1808:	0252      	lsls	r2, r2, #9
    180a:	4305      	orrs	r5, r0
    180c:	0b12      	lsrs	r2, r2, #12
    180e:	0d64      	lsrs	r4, r4, #21
    1810:	2100      	movs	r1, #0
    1812:	0312      	lsls	r2, r2, #12
    1814:	0d0b      	lsrs	r3, r1, #20
    1816:	051b      	lsls	r3, r3, #20
    1818:	0564      	lsls	r4, r4, #21
    181a:	0b12      	lsrs	r2, r2, #12
    181c:	431a      	orrs	r2, r3
    181e:	0863      	lsrs	r3, r4, #1
    1820:	4cc0      	ldr	r4, [pc, #768]	; (1b24 <__aeabi_dadd+0x3a4>)
    1822:	07f6      	lsls	r6, r6, #31
    1824:	4014      	ands	r4, r2
    1826:	431c      	orrs	r4, r3
    1828:	0064      	lsls	r4, r4, #1
    182a:	0864      	lsrs	r4, r4, #1
    182c:	4334      	orrs	r4, r6
    182e:	0028      	movs	r0, r5
    1830:	0021      	movs	r1, r4
    1832:	bc3c      	pop	{r2, r3, r4, r5}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	46a2      	mov	sl, r4
    183a:	46ab      	mov	fp, r5
    183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    183e:	4bb7      	ldr	r3, [pc, #732]	; (1b1c <__aeabi_dadd+0x39c>)
    1840:	429c      	cmp	r4, r3
    1842:	d0c6      	beq.n	17d2 <__aeabi_dadd+0x52>
    1844:	2380      	movs	r3, #128	; 0x80
    1846:	041b      	lsls	r3, r3, #16
    1848:	4318      	orrs	r0, r3
    184a:	2e38      	cmp	r6, #56	; 0x38
    184c:	dd00      	ble.n	1850 <__aeabi_dadd+0xd0>
    184e:	e0eb      	b.n	1a28 <__aeabi_dadd+0x2a8>
    1850:	2e1f      	cmp	r6, #31
    1852:	dd00      	ble.n	1856 <__aeabi_dadd+0xd6>
    1854:	e11e      	b.n	1a94 <__aeabi_dadd+0x314>
    1856:	2320      	movs	r3, #32
    1858:	1b9b      	subs	r3, r3, r6
    185a:	469c      	mov	ip, r3
    185c:	0003      	movs	r3, r0
    185e:	4667      	mov	r7, ip
    1860:	40bb      	lsls	r3, r7
    1862:	4698      	mov	r8, r3
    1864:	0013      	movs	r3, r2
    1866:	4647      	mov	r7, r8
    1868:	40f3      	lsrs	r3, r6
    186a:	433b      	orrs	r3, r7
    186c:	4667      	mov	r7, ip
    186e:	40ba      	lsls	r2, r7
    1870:	1e57      	subs	r7, r2, #1
    1872:	41ba      	sbcs	r2, r7
    1874:	4313      	orrs	r3, r2
    1876:	0002      	movs	r2, r0
    1878:	40f2      	lsrs	r2, r6
    187a:	1aeb      	subs	r3, r5, r3
    187c:	429d      	cmp	r5, r3
    187e:	41b6      	sbcs	r6, r6
    1880:	001d      	movs	r5, r3
    1882:	1a8a      	subs	r2, r1, r2
    1884:	4276      	negs	r6, r6
    1886:	1b91      	subs	r1, r2, r6
    1888:	020b      	lsls	r3, r1, #8
    188a:	d531      	bpl.n	18f0 <__aeabi_dadd+0x170>
    188c:	024a      	lsls	r2, r1, #9
    188e:	0a56      	lsrs	r6, r2, #9
    1890:	2e00      	cmp	r6, #0
    1892:	d100      	bne.n	1896 <__aeabi_dadd+0x116>
    1894:	e0b4      	b.n	1a00 <__aeabi_dadd+0x280>
    1896:	0030      	movs	r0, r6
    1898:	f000 fe72 	bl	2580 <__clzsi2>
    189c:	0003      	movs	r3, r0
    189e:	3b08      	subs	r3, #8
    18a0:	2b1f      	cmp	r3, #31
    18a2:	dd00      	ble.n	18a6 <__aeabi_dadd+0x126>
    18a4:	e0b5      	b.n	1a12 <__aeabi_dadd+0x292>
    18a6:	2220      	movs	r2, #32
    18a8:	0029      	movs	r1, r5
    18aa:	1ad2      	subs	r2, r2, r3
    18ac:	40d1      	lsrs	r1, r2
    18ae:	409e      	lsls	r6, r3
    18b0:	000a      	movs	r2, r1
    18b2:	409d      	lsls	r5, r3
    18b4:	4332      	orrs	r2, r6
    18b6:	429c      	cmp	r4, r3
    18b8:	dd00      	ble.n	18bc <__aeabi_dadd+0x13c>
    18ba:	e0b1      	b.n	1a20 <__aeabi_dadd+0x2a0>
    18bc:	1b1c      	subs	r4, r3, r4
    18be:	1c63      	adds	r3, r4, #1
    18c0:	2b1f      	cmp	r3, #31
    18c2:	dd00      	ble.n	18c6 <__aeabi_dadd+0x146>
    18c4:	e0d5      	b.n	1a72 <__aeabi_dadd+0x2f2>
    18c6:	2120      	movs	r1, #32
    18c8:	0014      	movs	r4, r2
    18ca:	0028      	movs	r0, r5
    18cc:	1ac9      	subs	r1, r1, r3
    18ce:	408c      	lsls	r4, r1
    18d0:	40d8      	lsrs	r0, r3
    18d2:	408d      	lsls	r5, r1
    18d4:	4304      	orrs	r4, r0
    18d6:	40da      	lsrs	r2, r3
    18d8:	1e68      	subs	r0, r5, #1
    18da:	4185      	sbcs	r5, r0
    18dc:	0011      	movs	r1, r2
    18de:	4325      	orrs	r5, r4
    18e0:	2400      	movs	r4, #0
    18e2:	e776      	b.n	17d2 <__aeabi_dadd+0x52>
    18e4:	4641      	mov	r1, r8
    18e6:	4331      	orrs	r1, r6
    18e8:	d100      	bne.n	18ec <__aeabi_dadd+0x16c>
    18ea:	e234      	b.n	1d56 <__aeabi_dadd+0x5d6>
    18ec:	0031      	movs	r1, r6
    18ee:	4645      	mov	r5, r8
    18f0:	076b      	lsls	r3, r5, #29
    18f2:	d000      	beq.n	18f6 <__aeabi_dadd+0x176>
    18f4:	e76f      	b.n	17d6 <__aeabi_dadd+0x56>
    18f6:	4656      	mov	r6, sl
    18f8:	0748      	lsls	r0, r1, #29
    18fa:	08ed      	lsrs	r5, r5, #3
    18fc:	08c9      	lsrs	r1, r1, #3
    18fe:	4305      	orrs	r5, r0
    1900:	4b86      	ldr	r3, [pc, #536]	; (1b1c <__aeabi_dadd+0x39c>)
    1902:	429c      	cmp	r4, r3
    1904:	d035      	beq.n	1972 <__aeabi_dadd+0x1f2>
    1906:	030a      	lsls	r2, r1, #12
    1908:	0564      	lsls	r4, r4, #21
    190a:	0b12      	lsrs	r2, r2, #12
    190c:	0d64      	lsrs	r4, r4, #21
    190e:	e77f      	b.n	1810 <__aeabi_dadd+0x90>
    1910:	4663      	mov	r3, ip
    1912:	1ae3      	subs	r3, r4, r3
    1914:	469b      	mov	fp, r3
    1916:	2b00      	cmp	r3, #0
    1918:	dc00      	bgt.n	191c <__aeabi_dadd+0x19c>
    191a:	e08b      	b.n	1a34 <__aeabi_dadd+0x2b4>
    191c:	4667      	mov	r7, ip
    191e:	2f00      	cmp	r7, #0
    1920:	d03c      	beq.n	199c <__aeabi_dadd+0x21c>
    1922:	4f7e      	ldr	r7, [pc, #504]	; (1b1c <__aeabi_dadd+0x39c>)
    1924:	42bc      	cmp	r4, r7
    1926:	d100      	bne.n	192a <__aeabi_dadd+0x1aa>
    1928:	e753      	b.n	17d2 <__aeabi_dadd+0x52>
    192a:	2780      	movs	r7, #128	; 0x80
    192c:	043f      	lsls	r7, r7, #16
    192e:	4338      	orrs	r0, r7
    1930:	465b      	mov	r3, fp
    1932:	2b38      	cmp	r3, #56	; 0x38
    1934:	dc00      	bgt.n	1938 <__aeabi_dadd+0x1b8>
    1936:	e0f7      	b.n	1b28 <__aeabi_dadd+0x3a8>
    1938:	4302      	orrs	r2, r0
    193a:	1e50      	subs	r0, r2, #1
    193c:	4182      	sbcs	r2, r0
    193e:	2000      	movs	r0, #0
    1940:	b2d2      	uxtb	r2, r2
    1942:	1953      	adds	r3, r2, r5
    1944:	1842      	adds	r2, r0, r1
    1946:	42ab      	cmp	r3, r5
    1948:	4189      	sbcs	r1, r1
    194a:	001d      	movs	r5, r3
    194c:	4249      	negs	r1, r1
    194e:	1889      	adds	r1, r1, r2
    1950:	020b      	lsls	r3, r1, #8
    1952:	d5cd      	bpl.n	18f0 <__aeabi_dadd+0x170>
    1954:	4b71      	ldr	r3, [pc, #452]	; (1b1c <__aeabi_dadd+0x39c>)
    1956:	3401      	adds	r4, #1
    1958:	429c      	cmp	r4, r3
    195a:	d100      	bne.n	195e <__aeabi_dadd+0x1de>
    195c:	e13d      	b.n	1bda <__aeabi_dadd+0x45a>
    195e:	2001      	movs	r0, #1
    1960:	4a6f      	ldr	r2, [pc, #444]	; (1b20 <__aeabi_dadd+0x3a0>)
    1962:	086b      	lsrs	r3, r5, #1
    1964:	400a      	ands	r2, r1
    1966:	4028      	ands	r0, r5
    1968:	4318      	orrs	r0, r3
    196a:	07d5      	lsls	r5, r2, #31
    196c:	4305      	orrs	r5, r0
    196e:	0851      	lsrs	r1, r2, #1
    1970:	e72f      	b.n	17d2 <__aeabi_dadd+0x52>
    1972:	002b      	movs	r3, r5
    1974:	430b      	orrs	r3, r1
    1976:	d100      	bne.n	197a <__aeabi_dadd+0x1fa>
    1978:	e1cb      	b.n	1d12 <__aeabi_dadd+0x592>
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	031b      	lsls	r3, r3, #12
    197e:	430b      	orrs	r3, r1
    1980:	031a      	lsls	r2, r3, #12
    1982:	0b12      	lsrs	r2, r2, #12
    1984:	e744      	b.n	1810 <__aeabi_dadd+0x90>
    1986:	3e01      	subs	r6, #1
    1988:	2e00      	cmp	r6, #0
    198a:	d16d      	bne.n	1a68 <__aeabi_dadd+0x2e8>
    198c:	1aae      	subs	r6, r5, r2
    198e:	42b5      	cmp	r5, r6
    1990:	419b      	sbcs	r3, r3
    1992:	1a09      	subs	r1, r1, r0
    1994:	425b      	negs	r3, r3
    1996:	1ac9      	subs	r1, r1, r3
    1998:	0035      	movs	r5, r6
    199a:	e775      	b.n	1888 <__aeabi_dadd+0x108>
    199c:	0007      	movs	r7, r0
    199e:	4317      	orrs	r7, r2
    19a0:	d100      	bne.n	19a4 <__aeabi_dadd+0x224>
    19a2:	e716      	b.n	17d2 <__aeabi_dadd+0x52>
    19a4:	2301      	movs	r3, #1
    19a6:	425b      	negs	r3, r3
    19a8:	469c      	mov	ip, r3
    19aa:	44e3      	add	fp, ip
    19ac:	465b      	mov	r3, fp
    19ae:	2b00      	cmp	r3, #0
    19b0:	d000      	beq.n	19b4 <__aeabi_dadd+0x234>
    19b2:	e0e0      	b.n	1b76 <__aeabi_dadd+0x3f6>
    19b4:	18aa      	adds	r2, r5, r2
    19b6:	42aa      	cmp	r2, r5
    19b8:	419b      	sbcs	r3, r3
    19ba:	1809      	adds	r1, r1, r0
    19bc:	425b      	negs	r3, r3
    19be:	1859      	adds	r1, r3, r1
    19c0:	0015      	movs	r5, r2
    19c2:	e7c5      	b.n	1950 <__aeabi_dadd+0x1d0>
    19c4:	2e00      	cmp	r6, #0
    19c6:	d175      	bne.n	1ab4 <__aeabi_dadd+0x334>
    19c8:	1c66      	adds	r6, r4, #1
    19ca:	0576      	lsls	r6, r6, #21
    19cc:	0d76      	lsrs	r6, r6, #21
    19ce:	2e01      	cmp	r6, #1
    19d0:	dc00      	bgt.n	19d4 <__aeabi_dadd+0x254>
    19d2:	e0f3      	b.n	1bbc <__aeabi_dadd+0x43c>
    19d4:	1aae      	subs	r6, r5, r2
    19d6:	46b0      	mov	r8, r6
    19d8:	4545      	cmp	r5, r8
    19da:	41bf      	sbcs	r7, r7
    19dc:	1a0e      	subs	r6, r1, r0
    19de:	427f      	negs	r7, r7
    19e0:	1bf6      	subs	r6, r6, r7
    19e2:	0237      	lsls	r7, r6, #8
    19e4:	d400      	bmi.n	19e8 <__aeabi_dadd+0x268>
    19e6:	e08f      	b.n	1b08 <__aeabi_dadd+0x388>
    19e8:	1b55      	subs	r5, r2, r5
    19ea:	42aa      	cmp	r2, r5
    19ec:	41b6      	sbcs	r6, r6
    19ee:	1a41      	subs	r1, r0, r1
    19f0:	4276      	negs	r6, r6
    19f2:	1b8e      	subs	r6, r1, r6
    19f4:	469a      	mov	sl, r3
    19f6:	e74b      	b.n	1890 <__aeabi_dadd+0x110>
    19f8:	4656      	mov	r6, sl
    19fa:	2200      	movs	r2, #0
    19fc:	2500      	movs	r5, #0
    19fe:	e707      	b.n	1810 <__aeabi_dadd+0x90>
    1a00:	0028      	movs	r0, r5
    1a02:	f000 fdbd 	bl	2580 <__clzsi2>
    1a06:	3020      	adds	r0, #32
    1a08:	0003      	movs	r3, r0
    1a0a:	3b08      	subs	r3, #8
    1a0c:	2b1f      	cmp	r3, #31
    1a0e:	dc00      	bgt.n	1a12 <__aeabi_dadd+0x292>
    1a10:	e749      	b.n	18a6 <__aeabi_dadd+0x126>
    1a12:	002a      	movs	r2, r5
    1a14:	3828      	subs	r0, #40	; 0x28
    1a16:	4082      	lsls	r2, r0
    1a18:	2500      	movs	r5, #0
    1a1a:	429c      	cmp	r4, r3
    1a1c:	dc00      	bgt.n	1a20 <__aeabi_dadd+0x2a0>
    1a1e:	e74d      	b.n	18bc <__aeabi_dadd+0x13c>
    1a20:	493f      	ldr	r1, [pc, #252]	; (1b20 <__aeabi_dadd+0x3a0>)
    1a22:	1ae4      	subs	r4, r4, r3
    1a24:	4011      	ands	r1, r2
    1a26:	e6d4      	b.n	17d2 <__aeabi_dadd+0x52>
    1a28:	4302      	orrs	r2, r0
    1a2a:	1e50      	subs	r0, r2, #1
    1a2c:	4182      	sbcs	r2, r0
    1a2e:	b2d3      	uxtb	r3, r2
    1a30:	2200      	movs	r2, #0
    1a32:	e722      	b.n	187a <__aeabi_dadd+0xfa>
    1a34:	2b00      	cmp	r3, #0
    1a36:	d000      	beq.n	1a3a <__aeabi_dadd+0x2ba>
    1a38:	e0f3      	b.n	1c22 <__aeabi_dadd+0x4a2>
    1a3a:	1c63      	adds	r3, r4, #1
    1a3c:	469c      	mov	ip, r3
    1a3e:	055b      	lsls	r3, r3, #21
    1a40:	0d5b      	lsrs	r3, r3, #21
    1a42:	2b01      	cmp	r3, #1
    1a44:	dc00      	bgt.n	1a48 <__aeabi_dadd+0x2c8>
    1a46:	e09f      	b.n	1b88 <__aeabi_dadd+0x408>
    1a48:	4b34      	ldr	r3, [pc, #208]	; (1b1c <__aeabi_dadd+0x39c>)
    1a4a:	459c      	cmp	ip, r3
    1a4c:	d100      	bne.n	1a50 <__aeabi_dadd+0x2d0>
    1a4e:	e0c3      	b.n	1bd8 <__aeabi_dadd+0x458>
    1a50:	18aa      	adds	r2, r5, r2
    1a52:	1809      	adds	r1, r1, r0
    1a54:	42aa      	cmp	r2, r5
    1a56:	4180      	sbcs	r0, r0
    1a58:	4240      	negs	r0, r0
    1a5a:	1841      	adds	r1, r0, r1
    1a5c:	07cd      	lsls	r5, r1, #31
    1a5e:	0852      	lsrs	r2, r2, #1
    1a60:	4315      	orrs	r5, r2
    1a62:	0849      	lsrs	r1, r1, #1
    1a64:	4664      	mov	r4, ip
    1a66:	e6b4      	b.n	17d2 <__aeabi_dadd+0x52>
    1a68:	4b2c      	ldr	r3, [pc, #176]	; (1b1c <__aeabi_dadd+0x39c>)
    1a6a:	429c      	cmp	r4, r3
    1a6c:	d000      	beq.n	1a70 <__aeabi_dadd+0x2f0>
    1a6e:	e6ec      	b.n	184a <__aeabi_dadd+0xca>
    1a70:	e6af      	b.n	17d2 <__aeabi_dadd+0x52>
    1a72:	0011      	movs	r1, r2
    1a74:	3c1f      	subs	r4, #31
    1a76:	40e1      	lsrs	r1, r4
    1a78:	000c      	movs	r4, r1
    1a7a:	2b20      	cmp	r3, #32
    1a7c:	d100      	bne.n	1a80 <__aeabi_dadd+0x300>
    1a7e:	e07f      	b.n	1b80 <__aeabi_dadd+0x400>
    1a80:	2140      	movs	r1, #64	; 0x40
    1a82:	1acb      	subs	r3, r1, r3
    1a84:	409a      	lsls	r2, r3
    1a86:	4315      	orrs	r5, r2
    1a88:	1e6a      	subs	r2, r5, #1
    1a8a:	4195      	sbcs	r5, r2
    1a8c:	2100      	movs	r1, #0
    1a8e:	4325      	orrs	r5, r4
    1a90:	2400      	movs	r4, #0
    1a92:	e72d      	b.n	18f0 <__aeabi_dadd+0x170>
    1a94:	0033      	movs	r3, r6
    1a96:	0007      	movs	r7, r0
    1a98:	3b20      	subs	r3, #32
    1a9a:	40df      	lsrs	r7, r3
    1a9c:	003b      	movs	r3, r7
    1a9e:	2e20      	cmp	r6, #32
    1aa0:	d070      	beq.n	1b84 <__aeabi_dadd+0x404>
    1aa2:	2740      	movs	r7, #64	; 0x40
    1aa4:	1bbe      	subs	r6, r7, r6
    1aa6:	40b0      	lsls	r0, r6
    1aa8:	4302      	orrs	r2, r0
    1aaa:	1e50      	subs	r0, r2, #1
    1aac:	4182      	sbcs	r2, r0
    1aae:	4313      	orrs	r3, r2
    1ab0:	2200      	movs	r2, #0
    1ab2:	e6e2      	b.n	187a <__aeabi_dadd+0xfa>
    1ab4:	2c00      	cmp	r4, #0
    1ab6:	d04f      	beq.n	1b58 <__aeabi_dadd+0x3d8>
    1ab8:	4c18      	ldr	r4, [pc, #96]	; (1b1c <__aeabi_dadd+0x39c>)
    1aba:	45a4      	cmp	ip, r4
    1abc:	d100      	bne.n	1ac0 <__aeabi_dadd+0x340>
    1abe:	e0ab      	b.n	1c18 <__aeabi_dadd+0x498>
    1ac0:	2480      	movs	r4, #128	; 0x80
    1ac2:	0424      	lsls	r4, r4, #16
    1ac4:	4276      	negs	r6, r6
    1ac6:	4321      	orrs	r1, r4
    1ac8:	2e38      	cmp	r6, #56	; 0x38
    1aca:	dd00      	ble.n	1ace <__aeabi_dadd+0x34e>
    1acc:	e0df      	b.n	1c8e <__aeabi_dadd+0x50e>
    1ace:	2e1f      	cmp	r6, #31
    1ad0:	dd00      	ble.n	1ad4 <__aeabi_dadd+0x354>
    1ad2:	e143      	b.n	1d5c <__aeabi_dadd+0x5dc>
    1ad4:	2720      	movs	r7, #32
    1ad6:	1bbc      	subs	r4, r7, r6
    1ad8:	46a1      	mov	r9, r4
    1ada:	000c      	movs	r4, r1
    1adc:	464f      	mov	r7, r9
    1ade:	40bc      	lsls	r4, r7
    1ae0:	46a0      	mov	r8, r4
    1ae2:	002c      	movs	r4, r5
    1ae4:	4647      	mov	r7, r8
    1ae6:	40f4      	lsrs	r4, r6
    1ae8:	433c      	orrs	r4, r7
    1aea:	464f      	mov	r7, r9
    1aec:	40bd      	lsls	r5, r7
    1aee:	1e6f      	subs	r7, r5, #1
    1af0:	41bd      	sbcs	r5, r7
    1af2:	40f1      	lsrs	r1, r6
    1af4:	432c      	orrs	r4, r5
    1af6:	1b15      	subs	r5, r2, r4
    1af8:	42aa      	cmp	r2, r5
    1afa:	4192      	sbcs	r2, r2
    1afc:	1a41      	subs	r1, r0, r1
    1afe:	4252      	negs	r2, r2
    1b00:	1a89      	subs	r1, r1, r2
    1b02:	4664      	mov	r4, ip
    1b04:	469a      	mov	sl, r3
    1b06:	e6bf      	b.n	1888 <__aeabi_dadd+0x108>
    1b08:	4641      	mov	r1, r8
    1b0a:	4645      	mov	r5, r8
    1b0c:	4331      	orrs	r1, r6
    1b0e:	d000      	beq.n	1b12 <__aeabi_dadd+0x392>
    1b10:	e6be      	b.n	1890 <__aeabi_dadd+0x110>
    1b12:	2600      	movs	r6, #0
    1b14:	2400      	movs	r4, #0
    1b16:	2500      	movs	r5, #0
    1b18:	e6f2      	b.n	1900 <__aeabi_dadd+0x180>
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	000007ff 	.word	0x000007ff
    1b20:	ff7fffff 	.word	0xff7fffff
    1b24:	800fffff 	.word	0x800fffff
    1b28:	2b1f      	cmp	r3, #31
    1b2a:	dc59      	bgt.n	1be0 <__aeabi_dadd+0x460>
    1b2c:	2720      	movs	r7, #32
    1b2e:	1aff      	subs	r7, r7, r3
    1b30:	46bc      	mov	ip, r7
    1b32:	0007      	movs	r7, r0
    1b34:	4663      	mov	r3, ip
    1b36:	409f      	lsls	r7, r3
    1b38:	465b      	mov	r3, fp
    1b3a:	46b9      	mov	r9, r7
    1b3c:	0017      	movs	r7, r2
    1b3e:	40df      	lsrs	r7, r3
    1b40:	46b8      	mov	r8, r7
    1b42:	464f      	mov	r7, r9
    1b44:	4643      	mov	r3, r8
    1b46:	431f      	orrs	r7, r3
    1b48:	4663      	mov	r3, ip
    1b4a:	409a      	lsls	r2, r3
    1b4c:	1e53      	subs	r3, r2, #1
    1b4e:	419a      	sbcs	r2, r3
    1b50:	465b      	mov	r3, fp
    1b52:	433a      	orrs	r2, r7
    1b54:	40d8      	lsrs	r0, r3
    1b56:	e6f4      	b.n	1942 <__aeabi_dadd+0x1c2>
    1b58:	000c      	movs	r4, r1
    1b5a:	432c      	orrs	r4, r5
    1b5c:	d05c      	beq.n	1c18 <__aeabi_dadd+0x498>
    1b5e:	43f6      	mvns	r6, r6
    1b60:	2e00      	cmp	r6, #0
    1b62:	d155      	bne.n	1c10 <__aeabi_dadd+0x490>
    1b64:	1b55      	subs	r5, r2, r5
    1b66:	42aa      	cmp	r2, r5
    1b68:	41a4      	sbcs	r4, r4
    1b6a:	1a41      	subs	r1, r0, r1
    1b6c:	4264      	negs	r4, r4
    1b6e:	1b09      	subs	r1, r1, r4
    1b70:	469a      	mov	sl, r3
    1b72:	4664      	mov	r4, ip
    1b74:	e688      	b.n	1888 <__aeabi_dadd+0x108>
    1b76:	4f96      	ldr	r7, [pc, #600]	; (1dd0 <__aeabi_dadd+0x650>)
    1b78:	42bc      	cmp	r4, r7
    1b7a:	d000      	beq.n	1b7e <__aeabi_dadd+0x3fe>
    1b7c:	e6d8      	b.n	1930 <__aeabi_dadd+0x1b0>
    1b7e:	e628      	b.n	17d2 <__aeabi_dadd+0x52>
    1b80:	2200      	movs	r2, #0
    1b82:	e780      	b.n	1a86 <__aeabi_dadd+0x306>
    1b84:	2000      	movs	r0, #0
    1b86:	e78f      	b.n	1aa8 <__aeabi_dadd+0x328>
    1b88:	000b      	movs	r3, r1
    1b8a:	432b      	orrs	r3, r5
    1b8c:	2c00      	cmp	r4, #0
    1b8e:	d000      	beq.n	1b92 <__aeabi_dadd+0x412>
    1b90:	e0c2      	b.n	1d18 <__aeabi_dadd+0x598>
    1b92:	2b00      	cmp	r3, #0
    1b94:	d100      	bne.n	1b98 <__aeabi_dadd+0x418>
    1b96:	e101      	b.n	1d9c <__aeabi_dadd+0x61c>
    1b98:	0003      	movs	r3, r0
    1b9a:	4313      	orrs	r3, r2
    1b9c:	d100      	bne.n	1ba0 <__aeabi_dadd+0x420>
    1b9e:	e618      	b.n	17d2 <__aeabi_dadd+0x52>
    1ba0:	18ab      	adds	r3, r5, r2
    1ba2:	42ab      	cmp	r3, r5
    1ba4:	41b6      	sbcs	r6, r6
    1ba6:	1809      	adds	r1, r1, r0
    1ba8:	4276      	negs	r6, r6
    1baa:	1871      	adds	r1, r6, r1
    1bac:	020a      	lsls	r2, r1, #8
    1bae:	d400      	bmi.n	1bb2 <__aeabi_dadd+0x432>
    1bb0:	e109      	b.n	1dc6 <__aeabi_dadd+0x646>
    1bb2:	4a88      	ldr	r2, [pc, #544]	; (1dd4 <__aeabi_dadd+0x654>)
    1bb4:	001d      	movs	r5, r3
    1bb6:	4011      	ands	r1, r2
    1bb8:	4664      	mov	r4, ip
    1bba:	e60a      	b.n	17d2 <__aeabi_dadd+0x52>
    1bbc:	2c00      	cmp	r4, #0
    1bbe:	d15b      	bne.n	1c78 <__aeabi_dadd+0x4f8>
    1bc0:	000e      	movs	r6, r1
    1bc2:	432e      	orrs	r6, r5
    1bc4:	d000      	beq.n	1bc8 <__aeabi_dadd+0x448>
    1bc6:	e08a      	b.n	1cde <__aeabi_dadd+0x55e>
    1bc8:	0001      	movs	r1, r0
    1bca:	4311      	orrs	r1, r2
    1bcc:	d100      	bne.n	1bd0 <__aeabi_dadd+0x450>
    1bce:	e0c2      	b.n	1d56 <__aeabi_dadd+0x5d6>
    1bd0:	0001      	movs	r1, r0
    1bd2:	0015      	movs	r5, r2
    1bd4:	469a      	mov	sl, r3
    1bd6:	e5fc      	b.n	17d2 <__aeabi_dadd+0x52>
    1bd8:	4664      	mov	r4, ip
    1bda:	2100      	movs	r1, #0
    1bdc:	2500      	movs	r5, #0
    1bde:	e68f      	b.n	1900 <__aeabi_dadd+0x180>
    1be0:	2320      	movs	r3, #32
    1be2:	425b      	negs	r3, r3
    1be4:	469c      	mov	ip, r3
    1be6:	44dc      	add	ip, fp
    1be8:	4663      	mov	r3, ip
    1bea:	0007      	movs	r7, r0
    1bec:	40df      	lsrs	r7, r3
    1bee:	465b      	mov	r3, fp
    1bf0:	46bc      	mov	ip, r7
    1bf2:	2b20      	cmp	r3, #32
    1bf4:	d100      	bne.n	1bf8 <__aeabi_dadd+0x478>
    1bf6:	e0ac      	b.n	1d52 <__aeabi_dadd+0x5d2>
    1bf8:	2340      	movs	r3, #64	; 0x40
    1bfa:	465f      	mov	r7, fp
    1bfc:	1bdb      	subs	r3, r3, r7
    1bfe:	4098      	lsls	r0, r3
    1c00:	4302      	orrs	r2, r0
    1c02:	1e50      	subs	r0, r2, #1
    1c04:	4182      	sbcs	r2, r0
    1c06:	4663      	mov	r3, ip
    1c08:	4313      	orrs	r3, r2
    1c0a:	001a      	movs	r2, r3
    1c0c:	2000      	movs	r0, #0
    1c0e:	e698      	b.n	1942 <__aeabi_dadd+0x1c2>
    1c10:	4c6f      	ldr	r4, [pc, #444]	; (1dd0 <__aeabi_dadd+0x650>)
    1c12:	45a4      	cmp	ip, r4
    1c14:	d000      	beq.n	1c18 <__aeabi_dadd+0x498>
    1c16:	e757      	b.n	1ac8 <__aeabi_dadd+0x348>
    1c18:	0001      	movs	r1, r0
    1c1a:	0015      	movs	r5, r2
    1c1c:	4664      	mov	r4, ip
    1c1e:	469a      	mov	sl, r3
    1c20:	e5d7      	b.n	17d2 <__aeabi_dadd+0x52>
    1c22:	2c00      	cmp	r4, #0
    1c24:	d139      	bne.n	1c9a <__aeabi_dadd+0x51a>
    1c26:	000c      	movs	r4, r1
    1c28:	432c      	orrs	r4, r5
    1c2a:	d06e      	beq.n	1d0a <__aeabi_dadd+0x58a>
    1c2c:	43db      	mvns	r3, r3
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d01a      	beq.n	1c68 <__aeabi_dadd+0x4e8>
    1c32:	4c67      	ldr	r4, [pc, #412]	; (1dd0 <__aeabi_dadd+0x650>)
    1c34:	45a4      	cmp	ip, r4
    1c36:	d068      	beq.n	1d0a <__aeabi_dadd+0x58a>
    1c38:	2b38      	cmp	r3, #56	; 0x38
    1c3a:	dd00      	ble.n	1c3e <__aeabi_dadd+0x4be>
    1c3c:	e0a4      	b.n	1d88 <__aeabi_dadd+0x608>
    1c3e:	2b1f      	cmp	r3, #31
    1c40:	dd00      	ble.n	1c44 <__aeabi_dadd+0x4c4>
    1c42:	e0ae      	b.n	1da2 <__aeabi_dadd+0x622>
    1c44:	2420      	movs	r4, #32
    1c46:	000f      	movs	r7, r1
    1c48:	1ae4      	subs	r4, r4, r3
    1c4a:	40a7      	lsls	r7, r4
    1c4c:	46b9      	mov	r9, r7
    1c4e:	002f      	movs	r7, r5
    1c50:	40df      	lsrs	r7, r3
    1c52:	46b8      	mov	r8, r7
    1c54:	46a3      	mov	fp, r4
    1c56:	464f      	mov	r7, r9
    1c58:	4644      	mov	r4, r8
    1c5a:	4327      	orrs	r7, r4
    1c5c:	465c      	mov	r4, fp
    1c5e:	40a5      	lsls	r5, r4
    1c60:	1e6c      	subs	r4, r5, #1
    1c62:	41a5      	sbcs	r5, r4
    1c64:	40d9      	lsrs	r1, r3
    1c66:	433d      	orrs	r5, r7
    1c68:	18ad      	adds	r5, r5, r2
    1c6a:	4295      	cmp	r5, r2
    1c6c:	419b      	sbcs	r3, r3
    1c6e:	1809      	adds	r1, r1, r0
    1c70:	425b      	negs	r3, r3
    1c72:	1859      	adds	r1, r3, r1
    1c74:	4664      	mov	r4, ip
    1c76:	e66b      	b.n	1950 <__aeabi_dadd+0x1d0>
    1c78:	000c      	movs	r4, r1
    1c7a:	432c      	orrs	r4, r5
    1c7c:	d115      	bne.n	1caa <__aeabi_dadd+0x52a>
    1c7e:	0001      	movs	r1, r0
    1c80:	4311      	orrs	r1, r2
    1c82:	d07b      	beq.n	1d7c <__aeabi_dadd+0x5fc>
    1c84:	0001      	movs	r1, r0
    1c86:	0015      	movs	r5, r2
    1c88:	469a      	mov	sl, r3
    1c8a:	4c51      	ldr	r4, [pc, #324]	; (1dd0 <__aeabi_dadd+0x650>)
    1c8c:	e5a1      	b.n	17d2 <__aeabi_dadd+0x52>
    1c8e:	430d      	orrs	r5, r1
    1c90:	1e69      	subs	r1, r5, #1
    1c92:	418d      	sbcs	r5, r1
    1c94:	2100      	movs	r1, #0
    1c96:	b2ec      	uxtb	r4, r5
    1c98:	e72d      	b.n	1af6 <__aeabi_dadd+0x376>
    1c9a:	4c4d      	ldr	r4, [pc, #308]	; (1dd0 <__aeabi_dadd+0x650>)
    1c9c:	45a4      	cmp	ip, r4
    1c9e:	d034      	beq.n	1d0a <__aeabi_dadd+0x58a>
    1ca0:	2480      	movs	r4, #128	; 0x80
    1ca2:	0424      	lsls	r4, r4, #16
    1ca4:	425b      	negs	r3, r3
    1ca6:	4321      	orrs	r1, r4
    1ca8:	e7c6      	b.n	1c38 <__aeabi_dadd+0x4b8>
    1caa:	0004      	movs	r4, r0
    1cac:	4314      	orrs	r4, r2
    1cae:	d04e      	beq.n	1d4e <__aeabi_dadd+0x5ce>
    1cb0:	08ed      	lsrs	r5, r5, #3
    1cb2:	074c      	lsls	r4, r1, #29
    1cb4:	432c      	orrs	r4, r5
    1cb6:	2580      	movs	r5, #128	; 0x80
    1cb8:	08c9      	lsrs	r1, r1, #3
    1cba:	032d      	lsls	r5, r5, #12
    1cbc:	4229      	tst	r1, r5
    1cbe:	d008      	beq.n	1cd2 <__aeabi_dadd+0x552>
    1cc0:	08c6      	lsrs	r6, r0, #3
    1cc2:	422e      	tst	r6, r5
    1cc4:	d105      	bne.n	1cd2 <__aeabi_dadd+0x552>
    1cc6:	08d2      	lsrs	r2, r2, #3
    1cc8:	0741      	lsls	r1, r0, #29
    1cca:	4311      	orrs	r1, r2
    1ccc:	000c      	movs	r4, r1
    1cce:	469a      	mov	sl, r3
    1cd0:	0031      	movs	r1, r6
    1cd2:	0f62      	lsrs	r2, r4, #29
    1cd4:	00c9      	lsls	r1, r1, #3
    1cd6:	00e5      	lsls	r5, r4, #3
    1cd8:	4311      	orrs	r1, r2
    1cda:	4c3d      	ldr	r4, [pc, #244]	; (1dd0 <__aeabi_dadd+0x650>)
    1cdc:	e579      	b.n	17d2 <__aeabi_dadd+0x52>
    1cde:	0006      	movs	r6, r0
    1ce0:	4316      	orrs	r6, r2
    1ce2:	d100      	bne.n	1ce6 <__aeabi_dadd+0x566>
    1ce4:	e575      	b.n	17d2 <__aeabi_dadd+0x52>
    1ce6:	1aae      	subs	r6, r5, r2
    1ce8:	46b0      	mov	r8, r6
    1cea:	4545      	cmp	r5, r8
    1cec:	41bf      	sbcs	r7, r7
    1cee:	1a0e      	subs	r6, r1, r0
    1cf0:	427f      	negs	r7, r7
    1cf2:	1bf6      	subs	r6, r6, r7
    1cf4:	0237      	lsls	r7, r6, #8
    1cf6:	d400      	bmi.n	1cfa <__aeabi_dadd+0x57a>
    1cf8:	e5f4      	b.n	18e4 <__aeabi_dadd+0x164>
    1cfa:	1b55      	subs	r5, r2, r5
    1cfc:	42aa      	cmp	r2, r5
    1cfe:	41b6      	sbcs	r6, r6
    1d00:	1a41      	subs	r1, r0, r1
    1d02:	4276      	negs	r6, r6
    1d04:	1b89      	subs	r1, r1, r6
    1d06:	469a      	mov	sl, r3
    1d08:	e563      	b.n	17d2 <__aeabi_dadd+0x52>
    1d0a:	0001      	movs	r1, r0
    1d0c:	0015      	movs	r5, r2
    1d0e:	4664      	mov	r4, ip
    1d10:	e55f      	b.n	17d2 <__aeabi_dadd+0x52>
    1d12:	2200      	movs	r2, #0
    1d14:	2500      	movs	r5, #0
    1d16:	e57b      	b.n	1810 <__aeabi_dadd+0x90>
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d03b      	beq.n	1d94 <__aeabi_dadd+0x614>
    1d1c:	0003      	movs	r3, r0
    1d1e:	4313      	orrs	r3, r2
    1d20:	d015      	beq.n	1d4e <__aeabi_dadd+0x5ce>
    1d22:	08ed      	lsrs	r5, r5, #3
    1d24:	074b      	lsls	r3, r1, #29
    1d26:	432b      	orrs	r3, r5
    1d28:	2580      	movs	r5, #128	; 0x80
    1d2a:	08c9      	lsrs	r1, r1, #3
    1d2c:	032d      	lsls	r5, r5, #12
    1d2e:	4229      	tst	r1, r5
    1d30:	d007      	beq.n	1d42 <__aeabi_dadd+0x5c2>
    1d32:	08c4      	lsrs	r4, r0, #3
    1d34:	422c      	tst	r4, r5
    1d36:	d104      	bne.n	1d42 <__aeabi_dadd+0x5c2>
    1d38:	0741      	lsls	r1, r0, #29
    1d3a:	000b      	movs	r3, r1
    1d3c:	0021      	movs	r1, r4
    1d3e:	08d2      	lsrs	r2, r2, #3
    1d40:	4313      	orrs	r3, r2
    1d42:	00c9      	lsls	r1, r1, #3
    1d44:	0f5a      	lsrs	r2, r3, #29
    1d46:	4311      	orrs	r1, r2
    1d48:	00dd      	lsls	r5, r3, #3
    1d4a:	4c21      	ldr	r4, [pc, #132]	; (1dd0 <__aeabi_dadd+0x650>)
    1d4c:	e541      	b.n	17d2 <__aeabi_dadd+0x52>
    1d4e:	4c20      	ldr	r4, [pc, #128]	; (1dd0 <__aeabi_dadd+0x650>)
    1d50:	e53f      	b.n	17d2 <__aeabi_dadd+0x52>
    1d52:	2000      	movs	r0, #0
    1d54:	e754      	b.n	1c00 <__aeabi_dadd+0x480>
    1d56:	2600      	movs	r6, #0
    1d58:	2500      	movs	r5, #0
    1d5a:	e5d1      	b.n	1900 <__aeabi_dadd+0x180>
    1d5c:	0034      	movs	r4, r6
    1d5e:	000f      	movs	r7, r1
    1d60:	3c20      	subs	r4, #32
    1d62:	40e7      	lsrs	r7, r4
    1d64:	003c      	movs	r4, r7
    1d66:	2e20      	cmp	r6, #32
    1d68:	d02b      	beq.n	1dc2 <__aeabi_dadd+0x642>
    1d6a:	2740      	movs	r7, #64	; 0x40
    1d6c:	1bbe      	subs	r6, r7, r6
    1d6e:	40b1      	lsls	r1, r6
    1d70:	430d      	orrs	r5, r1
    1d72:	1e69      	subs	r1, r5, #1
    1d74:	418d      	sbcs	r5, r1
    1d76:	2100      	movs	r1, #0
    1d78:	432c      	orrs	r4, r5
    1d7a:	e6bc      	b.n	1af6 <__aeabi_dadd+0x376>
    1d7c:	2180      	movs	r1, #128	; 0x80
    1d7e:	2600      	movs	r6, #0
    1d80:	0309      	lsls	r1, r1, #12
    1d82:	4c13      	ldr	r4, [pc, #76]	; (1dd0 <__aeabi_dadd+0x650>)
    1d84:	2500      	movs	r5, #0
    1d86:	e5bb      	b.n	1900 <__aeabi_dadd+0x180>
    1d88:	430d      	orrs	r5, r1
    1d8a:	1e69      	subs	r1, r5, #1
    1d8c:	418d      	sbcs	r5, r1
    1d8e:	2100      	movs	r1, #0
    1d90:	b2ed      	uxtb	r5, r5
    1d92:	e769      	b.n	1c68 <__aeabi_dadd+0x4e8>
    1d94:	0001      	movs	r1, r0
    1d96:	0015      	movs	r5, r2
    1d98:	4c0d      	ldr	r4, [pc, #52]	; (1dd0 <__aeabi_dadd+0x650>)
    1d9a:	e51a      	b.n	17d2 <__aeabi_dadd+0x52>
    1d9c:	0001      	movs	r1, r0
    1d9e:	0015      	movs	r5, r2
    1da0:	e517      	b.n	17d2 <__aeabi_dadd+0x52>
    1da2:	001c      	movs	r4, r3
    1da4:	000f      	movs	r7, r1
    1da6:	3c20      	subs	r4, #32
    1da8:	40e7      	lsrs	r7, r4
    1daa:	003c      	movs	r4, r7
    1dac:	2b20      	cmp	r3, #32
    1dae:	d00c      	beq.n	1dca <__aeabi_dadd+0x64a>
    1db0:	2740      	movs	r7, #64	; 0x40
    1db2:	1afb      	subs	r3, r7, r3
    1db4:	4099      	lsls	r1, r3
    1db6:	430d      	orrs	r5, r1
    1db8:	1e69      	subs	r1, r5, #1
    1dba:	418d      	sbcs	r5, r1
    1dbc:	2100      	movs	r1, #0
    1dbe:	4325      	orrs	r5, r4
    1dc0:	e752      	b.n	1c68 <__aeabi_dadd+0x4e8>
    1dc2:	2100      	movs	r1, #0
    1dc4:	e7d4      	b.n	1d70 <__aeabi_dadd+0x5f0>
    1dc6:	001d      	movs	r5, r3
    1dc8:	e592      	b.n	18f0 <__aeabi_dadd+0x170>
    1dca:	2100      	movs	r1, #0
    1dcc:	e7f3      	b.n	1db6 <__aeabi_dadd+0x636>
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	000007ff 	.word	0x000007ff
    1dd4:	ff7fffff 	.word	0xff7fffff

00001dd8 <__aeabi_dmul>:
    1dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dda:	465f      	mov	r7, fp
    1ddc:	4656      	mov	r6, sl
    1dde:	464d      	mov	r5, r9
    1de0:	4644      	mov	r4, r8
    1de2:	b4f0      	push	{r4, r5, r6, r7}
    1de4:	030d      	lsls	r5, r1, #12
    1de6:	4699      	mov	r9, r3
    1de8:	004e      	lsls	r6, r1, #1
    1dea:	0b2b      	lsrs	r3, r5, #12
    1dec:	b087      	sub	sp, #28
    1dee:	0007      	movs	r7, r0
    1df0:	4692      	mov	sl, r2
    1df2:	4680      	mov	r8, r0
    1df4:	469b      	mov	fp, r3
    1df6:	0d76      	lsrs	r6, r6, #21
    1df8:	0fcc      	lsrs	r4, r1, #31
    1dfa:	2e00      	cmp	r6, #0
    1dfc:	d069      	beq.n	1ed2 <__aeabi_dmul+0xfa>
    1dfe:	4b6d      	ldr	r3, [pc, #436]	; (1fb4 <__aeabi_dmul+0x1dc>)
    1e00:	429e      	cmp	r6, r3
    1e02:	d035      	beq.n	1e70 <__aeabi_dmul+0x98>
    1e04:	465b      	mov	r3, fp
    1e06:	2280      	movs	r2, #128	; 0x80
    1e08:	00dd      	lsls	r5, r3, #3
    1e0a:	0412      	lsls	r2, r2, #16
    1e0c:	0f43      	lsrs	r3, r0, #29
    1e0e:	4313      	orrs	r3, r2
    1e10:	432b      	orrs	r3, r5
    1e12:	469b      	mov	fp, r3
    1e14:	00c3      	lsls	r3, r0, #3
    1e16:	4698      	mov	r8, r3
    1e18:	4b67      	ldr	r3, [pc, #412]	; (1fb8 <__aeabi_dmul+0x1e0>)
    1e1a:	2700      	movs	r7, #0
    1e1c:	469c      	mov	ip, r3
    1e1e:	2300      	movs	r3, #0
    1e20:	4466      	add	r6, ip
    1e22:	9301      	str	r3, [sp, #4]
    1e24:	464a      	mov	r2, r9
    1e26:	0315      	lsls	r5, r2, #12
    1e28:	0050      	lsls	r0, r2, #1
    1e2a:	0fd2      	lsrs	r2, r2, #31
    1e2c:	4653      	mov	r3, sl
    1e2e:	0b2d      	lsrs	r5, r5, #12
    1e30:	0d40      	lsrs	r0, r0, #21
    1e32:	4691      	mov	r9, r2
    1e34:	d100      	bne.n	1e38 <__aeabi_dmul+0x60>
    1e36:	e076      	b.n	1f26 <__aeabi_dmul+0x14e>
    1e38:	4a5e      	ldr	r2, [pc, #376]	; (1fb4 <__aeabi_dmul+0x1dc>)
    1e3a:	4290      	cmp	r0, r2
    1e3c:	d06c      	beq.n	1f18 <__aeabi_dmul+0x140>
    1e3e:	2280      	movs	r2, #128	; 0x80
    1e40:	0f5b      	lsrs	r3, r3, #29
    1e42:	0412      	lsls	r2, r2, #16
    1e44:	4313      	orrs	r3, r2
    1e46:	4a5c      	ldr	r2, [pc, #368]	; (1fb8 <__aeabi_dmul+0x1e0>)
    1e48:	00ed      	lsls	r5, r5, #3
    1e4a:	4694      	mov	ip, r2
    1e4c:	431d      	orrs	r5, r3
    1e4e:	4653      	mov	r3, sl
    1e50:	2200      	movs	r2, #0
    1e52:	00db      	lsls	r3, r3, #3
    1e54:	4460      	add	r0, ip
    1e56:	4649      	mov	r1, r9
    1e58:	1836      	adds	r6, r6, r0
    1e5a:	1c70      	adds	r0, r6, #1
    1e5c:	4061      	eors	r1, r4
    1e5e:	9002      	str	r0, [sp, #8]
    1e60:	4317      	orrs	r7, r2
    1e62:	2f0f      	cmp	r7, #15
    1e64:	d900      	bls.n	1e68 <__aeabi_dmul+0x90>
    1e66:	e0af      	b.n	1fc8 <__aeabi_dmul+0x1f0>
    1e68:	4854      	ldr	r0, [pc, #336]	; (1fbc <__aeabi_dmul+0x1e4>)
    1e6a:	00bf      	lsls	r7, r7, #2
    1e6c:	59c7      	ldr	r7, [r0, r7]
    1e6e:	46bf      	mov	pc, r7
    1e70:	465b      	mov	r3, fp
    1e72:	431f      	orrs	r7, r3
    1e74:	d000      	beq.n	1e78 <__aeabi_dmul+0xa0>
    1e76:	e088      	b.n	1f8a <__aeabi_dmul+0x1b2>
    1e78:	2300      	movs	r3, #0
    1e7a:	469b      	mov	fp, r3
    1e7c:	4698      	mov	r8, r3
    1e7e:	3302      	adds	r3, #2
    1e80:	2708      	movs	r7, #8
    1e82:	9301      	str	r3, [sp, #4]
    1e84:	e7ce      	b.n	1e24 <__aeabi_dmul+0x4c>
    1e86:	4649      	mov	r1, r9
    1e88:	2a02      	cmp	r2, #2
    1e8a:	d06a      	beq.n	1f62 <__aeabi_dmul+0x18a>
    1e8c:	2a03      	cmp	r2, #3
    1e8e:	d100      	bne.n	1e92 <__aeabi_dmul+0xba>
    1e90:	e209      	b.n	22a6 <STACK_SIZE+0x2a6>
    1e92:	2a01      	cmp	r2, #1
    1e94:	d000      	beq.n	1e98 <__aeabi_dmul+0xc0>
    1e96:	e1bb      	b.n	2210 <STACK_SIZE+0x210>
    1e98:	4011      	ands	r1, r2
    1e9a:	2200      	movs	r2, #0
    1e9c:	2300      	movs	r3, #0
    1e9e:	2500      	movs	r5, #0
    1ea0:	4690      	mov	r8, r2
    1ea2:	b2cc      	uxtb	r4, r1
    1ea4:	2100      	movs	r1, #0
    1ea6:	032d      	lsls	r5, r5, #12
    1ea8:	0d0a      	lsrs	r2, r1, #20
    1eaa:	0512      	lsls	r2, r2, #20
    1eac:	0b2d      	lsrs	r5, r5, #12
    1eae:	4315      	orrs	r5, r2
    1eb0:	4a43      	ldr	r2, [pc, #268]	; (1fc0 <__aeabi_dmul+0x1e8>)
    1eb2:	051b      	lsls	r3, r3, #20
    1eb4:	4015      	ands	r5, r2
    1eb6:	431d      	orrs	r5, r3
    1eb8:	006d      	lsls	r5, r5, #1
    1eba:	07e4      	lsls	r4, r4, #31
    1ebc:	086d      	lsrs	r5, r5, #1
    1ebe:	4325      	orrs	r5, r4
    1ec0:	4640      	mov	r0, r8
    1ec2:	0029      	movs	r1, r5
    1ec4:	b007      	add	sp, #28
    1ec6:	bc3c      	pop	{r2, r3, r4, r5}
    1ec8:	4690      	mov	r8, r2
    1eca:	4699      	mov	r9, r3
    1ecc:	46a2      	mov	sl, r4
    1ece:	46ab      	mov	fp, r5
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	4303      	orrs	r3, r0
    1ed4:	d052      	beq.n	1f7c <__aeabi_dmul+0x1a4>
    1ed6:	465b      	mov	r3, fp
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d100      	bne.n	1ede <__aeabi_dmul+0x106>
    1edc:	e18a      	b.n	21f4 <STACK_SIZE+0x1f4>
    1ede:	4658      	mov	r0, fp
    1ee0:	f000 fb4e 	bl	2580 <__clzsi2>
    1ee4:	0003      	movs	r3, r0
    1ee6:	3b0b      	subs	r3, #11
    1ee8:	2b1c      	cmp	r3, #28
    1eea:	dd00      	ble.n	1eee <__aeabi_dmul+0x116>
    1eec:	e17b      	b.n	21e6 <STACK_SIZE+0x1e6>
    1eee:	221d      	movs	r2, #29
    1ef0:	1ad3      	subs	r3, r2, r3
    1ef2:	003a      	movs	r2, r7
    1ef4:	0001      	movs	r1, r0
    1ef6:	465d      	mov	r5, fp
    1ef8:	40da      	lsrs	r2, r3
    1efa:	3908      	subs	r1, #8
    1efc:	408d      	lsls	r5, r1
    1efe:	0013      	movs	r3, r2
    1f00:	408f      	lsls	r7, r1
    1f02:	432b      	orrs	r3, r5
    1f04:	469b      	mov	fp, r3
    1f06:	46b8      	mov	r8, r7
    1f08:	4b2e      	ldr	r3, [pc, #184]	; (1fc4 <__aeabi_dmul+0x1ec>)
    1f0a:	2700      	movs	r7, #0
    1f0c:	469c      	mov	ip, r3
    1f0e:	2300      	movs	r3, #0
    1f10:	4460      	add	r0, ip
    1f12:	4246      	negs	r6, r0
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	e785      	b.n	1e24 <__aeabi_dmul+0x4c>
    1f18:	4652      	mov	r2, sl
    1f1a:	432a      	orrs	r2, r5
    1f1c:	d12c      	bne.n	1f78 <__aeabi_dmul+0x1a0>
    1f1e:	2500      	movs	r5, #0
    1f20:	2300      	movs	r3, #0
    1f22:	2202      	movs	r2, #2
    1f24:	e797      	b.n	1e56 <__aeabi_dmul+0x7e>
    1f26:	4652      	mov	r2, sl
    1f28:	432a      	orrs	r2, r5
    1f2a:	d021      	beq.n	1f70 <__aeabi_dmul+0x198>
    1f2c:	2d00      	cmp	r5, #0
    1f2e:	d100      	bne.n	1f32 <__aeabi_dmul+0x15a>
    1f30:	e154      	b.n	21dc <STACK_SIZE+0x1dc>
    1f32:	0028      	movs	r0, r5
    1f34:	f000 fb24 	bl	2580 <__clzsi2>
    1f38:	0003      	movs	r3, r0
    1f3a:	3b0b      	subs	r3, #11
    1f3c:	2b1c      	cmp	r3, #28
    1f3e:	dd00      	ble.n	1f42 <__aeabi_dmul+0x16a>
    1f40:	e146      	b.n	21d0 <STACK_SIZE+0x1d0>
    1f42:	211d      	movs	r1, #29
    1f44:	1acb      	subs	r3, r1, r3
    1f46:	4651      	mov	r1, sl
    1f48:	0002      	movs	r2, r0
    1f4a:	40d9      	lsrs	r1, r3
    1f4c:	4653      	mov	r3, sl
    1f4e:	3a08      	subs	r2, #8
    1f50:	4095      	lsls	r5, r2
    1f52:	4093      	lsls	r3, r2
    1f54:	430d      	orrs	r5, r1
    1f56:	4a1b      	ldr	r2, [pc, #108]	; (1fc4 <__aeabi_dmul+0x1ec>)
    1f58:	4694      	mov	ip, r2
    1f5a:	4460      	add	r0, ip
    1f5c:	4240      	negs	r0, r0
    1f5e:	2200      	movs	r2, #0
    1f60:	e779      	b.n	1e56 <__aeabi_dmul+0x7e>
    1f62:	2401      	movs	r4, #1
    1f64:	2200      	movs	r2, #0
    1f66:	400c      	ands	r4, r1
    1f68:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <__aeabi_dmul+0x1dc>)
    1f6a:	2500      	movs	r5, #0
    1f6c:	4690      	mov	r8, r2
    1f6e:	e799      	b.n	1ea4 <__aeabi_dmul+0xcc>
    1f70:	2500      	movs	r5, #0
    1f72:	2300      	movs	r3, #0
    1f74:	2201      	movs	r2, #1
    1f76:	e76e      	b.n	1e56 <__aeabi_dmul+0x7e>
    1f78:	2203      	movs	r2, #3
    1f7a:	e76c      	b.n	1e56 <__aeabi_dmul+0x7e>
    1f7c:	2300      	movs	r3, #0
    1f7e:	469b      	mov	fp, r3
    1f80:	4698      	mov	r8, r3
    1f82:	3301      	adds	r3, #1
    1f84:	2704      	movs	r7, #4
    1f86:	9301      	str	r3, [sp, #4]
    1f88:	e74c      	b.n	1e24 <__aeabi_dmul+0x4c>
    1f8a:	2303      	movs	r3, #3
    1f8c:	270c      	movs	r7, #12
    1f8e:	9301      	str	r3, [sp, #4]
    1f90:	e748      	b.n	1e24 <__aeabi_dmul+0x4c>
    1f92:	2300      	movs	r3, #0
    1f94:	2580      	movs	r5, #128	; 0x80
    1f96:	4698      	mov	r8, r3
    1f98:	2400      	movs	r4, #0
    1f9a:	032d      	lsls	r5, r5, #12
    1f9c:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <__aeabi_dmul+0x1dc>)
    1f9e:	e781      	b.n	1ea4 <__aeabi_dmul+0xcc>
    1fa0:	465d      	mov	r5, fp
    1fa2:	4643      	mov	r3, r8
    1fa4:	9a01      	ldr	r2, [sp, #4]
    1fa6:	e76f      	b.n	1e88 <__aeabi_dmul+0xb0>
    1fa8:	465d      	mov	r5, fp
    1faa:	4643      	mov	r3, r8
    1fac:	0021      	movs	r1, r4
    1fae:	9a01      	ldr	r2, [sp, #4]
    1fb0:	e76a      	b.n	1e88 <__aeabi_dmul+0xb0>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	000007ff 	.word	0x000007ff
    1fb8:	fffffc01 	.word	0xfffffc01
    1fbc:	0000292c 	.word	0x0000292c
    1fc0:	800fffff 	.word	0x800fffff
    1fc4:	000003f3 	.word	0x000003f3
    1fc8:	4642      	mov	r2, r8
    1fca:	0c12      	lsrs	r2, r2, #16
    1fcc:	4691      	mov	r9, r2
    1fce:	0c1a      	lsrs	r2, r3, #16
    1fd0:	4694      	mov	ip, r2
    1fd2:	4642      	mov	r2, r8
    1fd4:	0417      	lsls	r7, r2, #16
    1fd6:	464a      	mov	r2, r9
    1fd8:	041b      	lsls	r3, r3, #16
    1fda:	0c1b      	lsrs	r3, r3, #16
    1fdc:	435a      	muls	r2, r3
    1fde:	4660      	mov	r0, ip
    1fe0:	4690      	mov	r8, r2
    1fe2:	464a      	mov	r2, r9
    1fe4:	4342      	muls	r2, r0
    1fe6:	0010      	movs	r0, r2
    1fe8:	9203      	str	r2, [sp, #12]
    1fea:	4662      	mov	r2, ip
    1fec:	001c      	movs	r4, r3
    1fee:	0c3f      	lsrs	r7, r7, #16
    1ff0:	437a      	muls	r2, r7
    1ff2:	437c      	muls	r4, r7
    1ff4:	4442      	add	r2, r8
    1ff6:	9201      	str	r2, [sp, #4]
    1ff8:	0c22      	lsrs	r2, r4, #16
    1ffa:	4692      	mov	sl, r2
    1ffc:	9a01      	ldr	r2, [sp, #4]
    1ffe:	4452      	add	r2, sl
    2000:	4590      	cmp	r8, r2
    2002:	d906      	bls.n	2012 <STACK_SIZE+0x12>
    2004:	4682      	mov	sl, r0
    2006:	2080      	movs	r0, #128	; 0x80
    2008:	0240      	lsls	r0, r0, #9
    200a:	4680      	mov	r8, r0
    200c:	44c2      	add	sl, r8
    200e:	4650      	mov	r0, sl
    2010:	9003      	str	r0, [sp, #12]
    2012:	0c10      	lsrs	r0, r2, #16
    2014:	9004      	str	r0, [sp, #16]
    2016:	4648      	mov	r0, r9
    2018:	0424      	lsls	r4, r4, #16
    201a:	0c24      	lsrs	r4, r4, #16
    201c:	0412      	lsls	r2, r2, #16
    201e:	1912      	adds	r2, r2, r4
    2020:	9205      	str	r2, [sp, #20]
    2022:	0c2a      	lsrs	r2, r5, #16
    2024:	042d      	lsls	r5, r5, #16
    2026:	0c2d      	lsrs	r5, r5, #16
    2028:	4368      	muls	r0, r5
    202a:	002c      	movs	r4, r5
    202c:	4682      	mov	sl, r0
    202e:	4648      	mov	r0, r9
    2030:	437c      	muls	r4, r7
    2032:	4350      	muls	r0, r2
    2034:	4681      	mov	r9, r0
    2036:	0c20      	lsrs	r0, r4, #16
    2038:	4680      	mov	r8, r0
    203a:	4357      	muls	r7, r2
    203c:	4457      	add	r7, sl
    203e:	4447      	add	r7, r8
    2040:	45ba      	cmp	sl, r7
    2042:	d903      	bls.n	204c <STACK_SIZE+0x4c>
    2044:	2080      	movs	r0, #128	; 0x80
    2046:	0240      	lsls	r0, r0, #9
    2048:	4680      	mov	r8, r0
    204a:	44c1      	add	r9, r8
    204c:	0c38      	lsrs	r0, r7, #16
    204e:	043f      	lsls	r7, r7, #16
    2050:	46b8      	mov	r8, r7
    2052:	4448      	add	r0, r9
    2054:	0424      	lsls	r4, r4, #16
    2056:	0c24      	lsrs	r4, r4, #16
    2058:	9001      	str	r0, [sp, #4]
    205a:	9804      	ldr	r0, [sp, #16]
    205c:	44a0      	add	r8, r4
    205e:	4440      	add	r0, r8
    2060:	9004      	str	r0, [sp, #16]
    2062:	4658      	mov	r0, fp
    2064:	0c00      	lsrs	r0, r0, #16
    2066:	4681      	mov	r9, r0
    2068:	4658      	mov	r0, fp
    206a:	0404      	lsls	r4, r0, #16
    206c:	0c20      	lsrs	r0, r4, #16
    206e:	4682      	mov	sl, r0
    2070:	0007      	movs	r7, r0
    2072:	4648      	mov	r0, r9
    2074:	435f      	muls	r7, r3
    2076:	464c      	mov	r4, r9
    2078:	4343      	muls	r3, r0
    207a:	4660      	mov	r0, ip
    207c:	4360      	muls	r0, r4
    207e:	4664      	mov	r4, ip
    2080:	4683      	mov	fp, r0
    2082:	4650      	mov	r0, sl
    2084:	4344      	muls	r4, r0
    2086:	0c38      	lsrs	r0, r7, #16
    2088:	4684      	mov	ip, r0
    208a:	18e4      	adds	r4, r4, r3
    208c:	4464      	add	r4, ip
    208e:	42a3      	cmp	r3, r4
    2090:	d903      	bls.n	209a <STACK_SIZE+0x9a>
    2092:	2380      	movs	r3, #128	; 0x80
    2094:	025b      	lsls	r3, r3, #9
    2096:	469c      	mov	ip, r3
    2098:	44e3      	add	fp, ip
    209a:	4648      	mov	r0, r9
    209c:	043f      	lsls	r7, r7, #16
    209e:	0c23      	lsrs	r3, r4, #16
    20a0:	0c3f      	lsrs	r7, r7, #16
    20a2:	0424      	lsls	r4, r4, #16
    20a4:	19e4      	adds	r4, r4, r7
    20a6:	4657      	mov	r7, sl
    20a8:	4368      	muls	r0, r5
    20aa:	436f      	muls	r7, r5
    20ac:	4684      	mov	ip, r0
    20ae:	464d      	mov	r5, r9
    20b0:	4650      	mov	r0, sl
    20b2:	4355      	muls	r5, r2
    20b4:	4342      	muls	r2, r0
    20b6:	0c38      	lsrs	r0, r7, #16
    20b8:	4681      	mov	r9, r0
    20ba:	4462      	add	r2, ip
    20bc:	444a      	add	r2, r9
    20be:	445b      	add	r3, fp
    20c0:	4594      	cmp	ip, r2
    20c2:	d903      	bls.n	20cc <STACK_SIZE+0xcc>
    20c4:	2080      	movs	r0, #128	; 0x80
    20c6:	0240      	lsls	r0, r0, #9
    20c8:	4684      	mov	ip, r0
    20ca:	4465      	add	r5, ip
    20cc:	9803      	ldr	r0, [sp, #12]
    20ce:	043f      	lsls	r7, r7, #16
    20d0:	4683      	mov	fp, r0
    20d2:	9804      	ldr	r0, [sp, #16]
    20d4:	0c3f      	lsrs	r7, r7, #16
    20d6:	4684      	mov	ip, r0
    20d8:	44e3      	add	fp, ip
    20da:	45c3      	cmp	fp, r8
    20dc:	4180      	sbcs	r0, r0
    20de:	4240      	negs	r0, r0
    20e0:	4682      	mov	sl, r0
    20e2:	0410      	lsls	r0, r2, #16
    20e4:	4684      	mov	ip, r0
    20e6:	9801      	ldr	r0, [sp, #4]
    20e8:	4467      	add	r7, ip
    20ea:	4684      	mov	ip, r0
    20ec:	4467      	add	r7, ip
    20ee:	44a3      	add	fp, r4
    20f0:	46bc      	mov	ip, r7
    20f2:	45a3      	cmp	fp, r4
    20f4:	41a4      	sbcs	r4, r4
    20f6:	4699      	mov	r9, r3
    20f8:	44d4      	add	ip, sl
    20fa:	4264      	negs	r4, r4
    20fc:	4287      	cmp	r7, r0
    20fe:	41bf      	sbcs	r7, r7
    2100:	45d4      	cmp	ip, sl
    2102:	4180      	sbcs	r0, r0
    2104:	44e1      	add	r9, ip
    2106:	46a0      	mov	r8, r4
    2108:	4599      	cmp	r9, r3
    210a:	419b      	sbcs	r3, r3
    210c:	427f      	negs	r7, r7
    210e:	4240      	negs	r0, r0
    2110:	44c8      	add	r8, r9
    2112:	4307      	orrs	r7, r0
    2114:	0c12      	lsrs	r2, r2, #16
    2116:	18ba      	adds	r2, r7, r2
    2118:	45a0      	cmp	r8, r4
    211a:	41a4      	sbcs	r4, r4
    211c:	425f      	negs	r7, r3
    211e:	003b      	movs	r3, r7
    2120:	4264      	negs	r4, r4
    2122:	4323      	orrs	r3, r4
    2124:	18d7      	adds	r7, r2, r3
    2126:	4643      	mov	r3, r8
    2128:	197d      	adds	r5, r7, r5
    212a:	0ddb      	lsrs	r3, r3, #23
    212c:	026d      	lsls	r5, r5, #9
    212e:	431d      	orrs	r5, r3
    2130:	465b      	mov	r3, fp
    2132:	025a      	lsls	r2, r3, #9
    2134:	9b05      	ldr	r3, [sp, #20]
    2136:	431a      	orrs	r2, r3
    2138:	1e53      	subs	r3, r2, #1
    213a:	419a      	sbcs	r2, r3
    213c:	465b      	mov	r3, fp
    213e:	0ddb      	lsrs	r3, r3, #23
    2140:	431a      	orrs	r2, r3
    2142:	4643      	mov	r3, r8
    2144:	025b      	lsls	r3, r3, #9
    2146:	4313      	orrs	r3, r2
    2148:	01ea      	lsls	r2, r5, #7
    214a:	d507      	bpl.n	215c <STACK_SIZE+0x15c>
    214c:	2201      	movs	r2, #1
    214e:	085c      	lsrs	r4, r3, #1
    2150:	4013      	ands	r3, r2
    2152:	4323      	orrs	r3, r4
    2154:	07ea      	lsls	r2, r5, #31
    2156:	9e02      	ldr	r6, [sp, #8]
    2158:	4313      	orrs	r3, r2
    215a:	086d      	lsrs	r5, r5, #1
    215c:	4a57      	ldr	r2, [pc, #348]	; (22bc <STACK_SIZE+0x2bc>)
    215e:	18b2      	adds	r2, r6, r2
    2160:	2a00      	cmp	r2, #0
    2162:	dd4b      	ble.n	21fc <STACK_SIZE+0x1fc>
    2164:	0758      	lsls	r0, r3, #29
    2166:	d009      	beq.n	217c <STACK_SIZE+0x17c>
    2168:	200f      	movs	r0, #15
    216a:	4018      	ands	r0, r3
    216c:	2804      	cmp	r0, #4
    216e:	d005      	beq.n	217c <STACK_SIZE+0x17c>
    2170:	1d18      	adds	r0, r3, #4
    2172:	4298      	cmp	r0, r3
    2174:	419b      	sbcs	r3, r3
    2176:	425b      	negs	r3, r3
    2178:	18ed      	adds	r5, r5, r3
    217a:	0003      	movs	r3, r0
    217c:	01e8      	lsls	r0, r5, #7
    217e:	d504      	bpl.n	218a <STACK_SIZE+0x18a>
    2180:	4a4f      	ldr	r2, [pc, #316]	; (22c0 <STACK_SIZE+0x2c0>)
    2182:	4015      	ands	r5, r2
    2184:	2280      	movs	r2, #128	; 0x80
    2186:	00d2      	lsls	r2, r2, #3
    2188:	18b2      	adds	r2, r6, r2
    218a:	484e      	ldr	r0, [pc, #312]	; (22c4 <STACK_SIZE+0x2c4>)
    218c:	4282      	cmp	r2, r0
    218e:	dd00      	ble.n	2192 <STACK_SIZE+0x192>
    2190:	e6e7      	b.n	1f62 <__aeabi_dmul+0x18a>
    2192:	2401      	movs	r4, #1
    2194:	08db      	lsrs	r3, r3, #3
    2196:	0768      	lsls	r0, r5, #29
    2198:	4318      	orrs	r0, r3
    219a:	026d      	lsls	r5, r5, #9
    219c:	0553      	lsls	r3, r2, #21
    219e:	4680      	mov	r8, r0
    21a0:	0b2d      	lsrs	r5, r5, #12
    21a2:	0d5b      	lsrs	r3, r3, #21
    21a4:	400c      	ands	r4, r1
    21a6:	e67d      	b.n	1ea4 <__aeabi_dmul+0xcc>
    21a8:	2280      	movs	r2, #128	; 0x80
    21aa:	4659      	mov	r1, fp
    21ac:	0312      	lsls	r2, r2, #12
    21ae:	4211      	tst	r1, r2
    21b0:	d008      	beq.n	21c4 <STACK_SIZE+0x1c4>
    21b2:	4215      	tst	r5, r2
    21b4:	d106      	bne.n	21c4 <STACK_SIZE+0x1c4>
    21b6:	4315      	orrs	r5, r2
    21b8:	032d      	lsls	r5, r5, #12
    21ba:	4698      	mov	r8, r3
    21bc:	0b2d      	lsrs	r5, r5, #12
    21be:	464c      	mov	r4, r9
    21c0:	4b41      	ldr	r3, [pc, #260]	; (22c8 <STACK_SIZE+0x2c8>)
    21c2:	e66f      	b.n	1ea4 <__aeabi_dmul+0xcc>
    21c4:	465d      	mov	r5, fp
    21c6:	4315      	orrs	r5, r2
    21c8:	032d      	lsls	r5, r5, #12
    21ca:	0b2d      	lsrs	r5, r5, #12
    21cc:	4b3e      	ldr	r3, [pc, #248]	; (22c8 <STACK_SIZE+0x2c8>)
    21ce:	e669      	b.n	1ea4 <__aeabi_dmul+0xcc>
    21d0:	0003      	movs	r3, r0
    21d2:	4655      	mov	r5, sl
    21d4:	3b28      	subs	r3, #40	; 0x28
    21d6:	409d      	lsls	r5, r3
    21d8:	2300      	movs	r3, #0
    21da:	e6bc      	b.n	1f56 <__aeabi_dmul+0x17e>
    21dc:	4650      	mov	r0, sl
    21de:	f000 f9cf 	bl	2580 <__clzsi2>
    21e2:	3020      	adds	r0, #32
    21e4:	e6a8      	b.n	1f38 <__aeabi_dmul+0x160>
    21e6:	0003      	movs	r3, r0
    21e8:	3b28      	subs	r3, #40	; 0x28
    21ea:	409f      	lsls	r7, r3
    21ec:	2300      	movs	r3, #0
    21ee:	46bb      	mov	fp, r7
    21f0:	4698      	mov	r8, r3
    21f2:	e689      	b.n	1f08 <__aeabi_dmul+0x130>
    21f4:	f000 f9c4 	bl	2580 <__clzsi2>
    21f8:	3020      	adds	r0, #32
    21fa:	e673      	b.n	1ee4 <__aeabi_dmul+0x10c>
    21fc:	2401      	movs	r4, #1
    21fe:	1aa6      	subs	r6, r4, r2
    2200:	2e38      	cmp	r6, #56	; 0x38
    2202:	dd07      	ble.n	2214 <STACK_SIZE+0x214>
    2204:	2200      	movs	r2, #0
    2206:	400c      	ands	r4, r1
    2208:	2300      	movs	r3, #0
    220a:	2500      	movs	r5, #0
    220c:	4690      	mov	r8, r2
    220e:	e649      	b.n	1ea4 <__aeabi_dmul+0xcc>
    2210:	9e02      	ldr	r6, [sp, #8]
    2212:	e7a3      	b.n	215c <STACK_SIZE+0x15c>
    2214:	2e1f      	cmp	r6, #31
    2216:	dc20      	bgt.n	225a <STACK_SIZE+0x25a>
    2218:	2220      	movs	r2, #32
    221a:	002c      	movs	r4, r5
    221c:	0018      	movs	r0, r3
    221e:	1b92      	subs	r2, r2, r6
    2220:	40f0      	lsrs	r0, r6
    2222:	4094      	lsls	r4, r2
    2224:	4093      	lsls	r3, r2
    2226:	4304      	orrs	r4, r0
    2228:	1e58      	subs	r0, r3, #1
    222a:	4183      	sbcs	r3, r0
    222c:	431c      	orrs	r4, r3
    222e:	40f5      	lsrs	r5, r6
    2230:	0763      	lsls	r3, r4, #29
    2232:	d009      	beq.n	2248 <STACK_SIZE+0x248>
    2234:	230f      	movs	r3, #15
    2236:	4023      	ands	r3, r4
    2238:	2b04      	cmp	r3, #4
    223a:	d005      	beq.n	2248 <STACK_SIZE+0x248>
    223c:	0023      	movs	r3, r4
    223e:	1d1c      	adds	r4, r3, #4
    2240:	429c      	cmp	r4, r3
    2242:	4192      	sbcs	r2, r2
    2244:	4252      	negs	r2, r2
    2246:	18ad      	adds	r5, r5, r2
    2248:	022b      	lsls	r3, r5, #8
    224a:	d51f      	bpl.n	228c <STACK_SIZE+0x28c>
    224c:	2401      	movs	r4, #1
    224e:	2200      	movs	r2, #0
    2250:	400c      	ands	r4, r1
    2252:	2301      	movs	r3, #1
    2254:	2500      	movs	r5, #0
    2256:	4690      	mov	r8, r2
    2258:	e624      	b.n	1ea4 <__aeabi_dmul+0xcc>
    225a:	201f      	movs	r0, #31
    225c:	002c      	movs	r4, r5
    225e:	4240      	negs	r0, r0
    2260:	1a82      	subs	r2, r0, r2
    2262:	40d4      	lsrs	r4, r2
    2264:	2e20      	cmp	r6, #32
    2266:	d01c      	beq.n	22a2 <STACK_SIZE+0x2a2>
    2268:	2240      	movs	r2, #64	; 0x40
    226a:	1b96      	subs	r6, r2, r6
    226c:	40b5      	lsls	r5, r6
    226e:	432b      	orrs	r3, r5
    2270:	1e58      	subs	r0, r3, #1
    2272:	4183      	sbcs	r3, r0
    2274:	2007      	movs	r0, #7
    2276:	4323      	orrs	r3, r4
    2278:	4018      	ands	r0, r3
    227a:	2500      	movs	r5, #0
    227c:	2800      	cmp	r0, #0
    227e:	d009      	beq.n	2294 <STACK_SIZE+0x294>
    2280:	220f      	movs	r2, #15
    2282:	2500      	movs	r5, #0
    2284:	401a      	ands	r2, r3
    2286:	001c      	movs	r4, r3
    2288:	2a04      	cmp	r2, #4
    228a:	d1d8      	bne.n	223e <STACK_SIZE+0x23e>
    228c:	0023      	movs	r3, r4
    228e:	0768      	lsls	r0, r5, #29
    2290:	026d      	lsls	r5, r5, #9
    2292:	0b2d      	lsrs	r5, r5, #12
    2294:	2401      	movs	r4, #1
    2296:	08db      	lsrs	r3, r3, #3
    2298:	4303      	orrs	r3, r0
    229a:	4698      	mov	r8, r3
    229c:	400c      	ands	r4, r1
    229e:	2300      	movs	r3, #0
    22a0:	e600      	b.n	1ea4 <__aeabi_dmul+0xcc>
    22a2:	2500      	movs	r5, #0
    22a4:	e7e3      	b.n	226e <STACK_SIZE+0x26e>
    22a6:	2280      	movs	r2, #128	; 0x80
    22a8:	2401      	movs	r4, #1
    22aa:	0312      	lsls	r2, r2, #12
    22ac:	4315      	orrs	r5, r2
    22ae:	032d      	lsls	r5, r5, #12
    22b0:	4698      	mov	r8, r3
    22b2:	0b2d      	lsrs	r5, r5, #12
    22b4:	400c      	ands	r4, r1
    22b6:	4b04      	ldr	r3, [pc, #16]	; (22c8 <STACK_SIZE+0x2c8>)
    22b8:	e5f4      	b.n	1ea4 <__aeabi_dmul+0xcc>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	000003ff 	.word	0x000003ff
    22c0:	feffffff 	.word	0xfeffffff
    22c4:	000007fe 	.word	0x000007fe
    22c8:	000007ff 	.word	0x000007ff

000022cc <__aeabi_i2d>:
    22cc:	b570      	push	{r4, r5, r6, lr}
    22ce:	2800      	cmp	r0, #0
    22d0:	d030      	beq.n	2334 <__aeabi_i2d+0x68>
    22d2:	17c3      	asrs	r3, r0, #31
    22d4:	18c4      	adds	r4, r0, r3
    22d6:	405c      	eors	r4, r3
    22d8:	0fc5      	lsrs	r5, r0, #31
    22da:	0020      	movs	r0, r4
    22dc:	f000 f950 	bl	2580 <__clzsi2>
    22e0:	4b17      	ldr	r3, [pc, #92]	; (2340 <__aeabi_i2d+0x74>)
    22e2:	4a18      	ldr	r2, [pc, #96]	; (2344 <__aeabi_i2d+0x78>)
    22e4:	1a1b      	subs	r3, r3, r0
    22e6:	1ad2      	subs	r2, r2, r3
    22e8:	2a1f      	cmp	r2, #31
    22ea:	dd18      	ble.n	231e <__aeabi_i2d+0x52>
    22ec:	4a16      	ldr	r2, [pc, #88]	; (2348 <__aeabi_i2d+0x7c>)
    22ee:	1ad2      	subs	r2, r2, r3
    22f0:	4094      	lsls	r4, r2
    22f2:	2200      	movs	r2, #0
    22f4:	0324      	lsls	r4, r4, #12
    22f6:	055b      	lsls	r3, r3, #21
    22f8:	0b24      	lsrs	r4, r4, #12
    22fa:	0d5b      	lsrs	r3, r3, #21
    22fc:	2100      	movs	r1, #0
    22fe:	0010      	movs	r0, r2
    2300:	0324      	lsls	r4, r4, #12
    2302:	0d0a      	lsrs	r2, r1, #20
    2304:	0512      	lsls	r2, r2, #20
    2306:	0b24      	lsrs	r4, r4, #12
    2308:	4314      	orrs	r4, r2
    230a:	4a10      	ldr	r2, [pc, #64]	; (234c <__aeabi_i2d+0x80>)
    230c:	051b      	lsls	r3, r3, #20
    230e:	4014      	ands	r4, r2
    2310:	431c      	orrs	r4, r3
    2312:	0064      	lsls	r4, r4, #1
    2314:	07ed      	lsls	r5, r5, #31
    2316:	0864      	lsrs	r4, r4, #1
    2318:	432c      	orrs	r4, r5
    231a:	0021      	movs	r1, r4
    231c:	bd70      	pop	{r4, r5, r6, pc}
    231e:	0021      	movs	r1, r4
    2320:	4091      	lsls	r1, r2
    2322:	000a      	movs	r2, r1
    2324:	210b      	movs	r1, #11
    2326:	1a08      	subs	r0, r1, r0
    2328:	40c4      	lsrs	r4, r0
    232a:	055b      	lsls	r3, r3, #21
    232c:	0324      	lsls	r4, r4, #12
    232e:	0b24      	lsrs	r4, r4, #12
    2330:	0d5b      	lsrs	r3, r3, #21
    2332:	e7e3      	b.n	22fc <__aeabi_i2d+0x30>
    2334:	2500      	movs	r5, #0
    2336:	2300      	movs	r3, #0
    2338:	2400      	movs	r4, #0
    233a:	2200      	movs	r2, #0
    233c:	e7de      	b.n	22fc <__aeabi_i2d+0x30>
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	0000041e 	.word	0x0000041e
    2344:	00000433 	.word	0x00000433
    2348:	00000413 	.word	0x00000413
    234c:	800fffff 	.word	0x800fffff

00002350 <__aeabi_ui2d>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	1e05      	subs	r5, r0, #0
    2354:	d028      	beq.n	23a8 <__aeabi_ui2d+0x58>
    2356:	f000 f913 	bl	2580 <__clzsi2>
    235a:	4b15      	ldr	r3, [pc, #84]	; (23b0 <__aeabi_ui2d+0x60>)
    235c:	4a15      	ldr	r2, [pc, #84]	; (23b4 <__aeabi_ui2d+0x64>)
    235e:	1a1b      	subs	r3, r3, r0
    2360:	1ad2      	subs	r2, r2, r3
    2362:	2a1f      	cmp	r2, #31
    2364:	dd16      	ble.n	2394 <__aeabi_ui2d+0x44>
    2366:	002c      	movs	r4, r5
    2368:	4a13      	ldr	r2, [pc, #76]	; (23b8 <__aeabi_ui2d+0x68>)
    236a:	2500      	movs	r5, #0
    236c:	1ad2      	subs	r2, r2, r3
    236e:	4094      	lsls	r4, r2
    2370:	055a      	lsls	r2, r3, #21
    2372:	0324      	lsls	r4, r4, #12
    2374:	0b24      	lsrs	r4, r4, #12
    2376:	0d52      	lsrs	r2, r2, #21
    2378:	2100      	movs	r1, #0
    237a:	0324      	lsls	r4, r4, #12
    237c:	0d0b      	lsrs	r3, r1, #20
    237e:	0b24      	lsrs	r4, r4, #12
    2380:	051b      	lsls	r3, r3, #20
    2382:	4323      	orrs	r3, r4
    2384:	4c0d      	ldr	r4, [pc, #52]	; (23bc <__aeabi_ui2d+0x6c>)
    2386:	0512      	lsls	r2, r2, #20
    2388:	4023      	ands	r3, r4
    238a:	4313      	orrs	r3, r2
    238c:	005b      	lsls	r3, r3, #1
    238e:	0028      	movs	r0, r5
    2390:	0859      	lsrs	r1, r3, #1
    2392:	bd70      	pop	{r4, r5, r6, pc}
    2394:	210b      	movs	r1, #11
    2396:	002c      	movs	r4, r5
    2398:	1a08      	subs	r0, r1, r0
    239a:	40c4      	lsrs	r4, r0
    239c:	4095      	lsls	r5, r2
    239e:	0324      	lsls	r4, r4, #12
    23a0:	055a      	lsls	r2, r3, #21
    23a2:	0b24      	lsrs	r4, r4, #12
    23a4:	0d52      	lsrs	r2, r2, #21
    23a6:	e7e7      	b.n	2378 <__aeabi_ui2d+0x28>
    23a8:	2200      	movs	r2, #0
    23aa:	2400      	movs	r4, #0
    23ac:	e7e4      	b.n	2378 <__aeabi_ui2d+0x28>
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	0000041e 	.word	0x0000041e
    23b4:	00000433 	.word	0x00000433
    23b8:	00000413 	.word	0x00000413
    23bc:	800fffff 	.word	0x800fffff

000023c0 <__aeabi_f2d>:
    23c0:	0042      	lsls	r2, r0, #1
    23c2:	0e12      	lsrs	r2, r2, #24
    23c4:	1c51      	adds	r1, r2, #1
    23c6:	0243      	lsls	r3, r0, #9
    23c8:	b2c9      	uxtb	r1, r1
    23ca:	b570      	push	{r4, r5, r6, lr}
    23cc:	0a5d      	lsrs	r5, r3, #9
    23ce:	0fc4      	lsrs	r4, r0, #31
    23d0:	2901      	cmp	r1, #1
    23d2:	dd15      	ble.n	2400 <__aeabi_f2d+0x40>
    23d4:	21e0      	movs	r1, #224	; 0xe0
    23d6:	0089      	lsls	r1, r1, #2
    23d8:	468c      	mov	ip, r1
    23da:	076d      	lsls	r5, r5, #29
    23dc:	0b1b      	lsrs	r3, r3, #12
    23de:	4462      	add	r2, ip
    23e0:	2100      	movs	r1, #0
    23e2:	0028      	movs	r0, r5
    23e4:	0d0d      	lsrs	r5, r1, #20
    23e6:	052d      	lsls	r5, r5, #20
    23e8:	432b      	orrs	r3, r5
    23ea:	4d1c      	ldr	r5, [pc, #112]	; (245c <__aeabi_f2d+0x9c>)
    23ec:	0552      	lsls	r2, r2, #21
    23ee:	402b      	ands	r3, r5
    23f0:	0852      	lsrs	r2, r2, #1
    23f2:	4313      	orrs	r3, r2
    23f4:	005b      	lsls	r3, r3, #1
    23f6:	07e4      	lsls	r4, r4, #31
    23f8:	085b      	lsrs	r3, r3, #1
    23fa:	4323      	orrs	r3, r4
    23fc:	0019      	movs	r1, r3
    23fe:	bd70      	pop	{r4, r5, r6, pc}
    2400:	2a00      	cmp	r2, #0
    2402:	d115      	bne.n	2430 <__aeabi_f2d+0x70>
    2404:	2d00      	cmp	r5, #0
    2406:	d01f      	beq.n	2448 <__aeabi_f2d+0x88>
    2408:	0028      	movs	r0, r5
    240a:	f000 f8b9 	bl	2580 <__clzsi2>
    240e:	280a      	cmp	r0, #10
    2410:	dc1d      	bgt.n	244e <__aeabi_f2d+0x8e>
    2412:	230b      	movs	r3, #11
    2414:	002a      	movs	r2, r5
    2416:	1a1b      	subs	r3, r3, r0
    2418:	40da      	lsrs	r2, r3
    241a:	0013      	movs	r3, r2
    241c:	0002      	movs	r2, r0
    241e:	3215      	adds	r2, #21
    2420:	4095      	lsls	r5, r2
    2422:	4a0f      	ldr	r2, [pc, #60]	; (2460 <__aeabi_f2d+0xa0>)
    2424:	031b      	lsls	r3, r3, #12
    2426:	1a12      	subs	r2, r2, r0
    2428:	0552      	lsls	r2, r2, #21
    242a:	0b1b      	lsrs	r3, r3, #12
    242c:	0d52      	lsrs	r2, r2, #21
    242e:	e7d7      	b.n	23e0 <__aeabi_f2d+0x20>
    2430:	2d00      	cmp	r5, #0
    2432:	d006      	beq.n	2442 <__aeabi_f2d+0x82>
    2434:	2280      	movs	r2, #128	; 0x80
    2436:	0b1b      	lsrs	r3, r3, #12
    2438:	0312      	lsls	r2, r2, #12
    243a:	4313      	orrs	r3, r2
    243c:	076d      	lsls	r5, r5, #29
    243e:	4a09      	ldr	r2, [pc, #36]	; (2464 <__aeabi_f2d+0xa4>)
    2440:	e7ce      	b.n	23e0 <__aeabi_f2d+0x20>
    2442:	4a08      	ldr	r2, [pc, #32]	; (2464 <__aeabi_f2d+0xa4>)
    2444:	2300      	movs	r3, #0
    2446:	e7cb      	b.n	23e0 <__aeabi_f2d+0x20>
    2448:	2200      	movs	r2, #0
    244a:	2300      	movs	r3, #0
    244c:	e7c8      	b.n	23e0 <__aeabi_f2d+0x20>
    244e:	0003      	movs	r3, r0
    2450:	3b0b      	subs	r3, #11
    2452:	409d      	lsls	r5, r3
    2454:	002b      	movs	r3, r5
    2456:	2500      	movs	r5, #0
    2458:	e7e3      	b.n	2422 <__aeabi_f2d+0x62>
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	800fffff 	.word	0x800fffff
    2460:	00000389 	.word	0x00000389
    2464:	000007ff 	.word	0x000007ff

00002468 <__aeabi_d2f>:
    2468:	004b      	lsls	r3, r1, #1
    246a:	b570      	push	{r4, r5, r6, lr}
    246c:	0d5e      	lsrs	r6, r3, #21
    246e:	030c      	lsls	r4, r1, #12
    2470:	1c75      	adds	r5, r6, #1
    2472:	0a64      	lsrs	r4, r4, #9
    2474:	0f42      	lsrs	r2, r0, #29
    2476:	056d      	lsls	r5, r5, #21
    2478:	4322      	orrs	r2, r4
    247a:	0fc9      	lsrs	r1, r1, #31
    247c:	00c4      	lsls	r4, r0, #3
    247e:	0d6d      	lsrs	r5, r5, #21
    2480:	2d01      	cmp	r5, #1
    2482:	dd2a      	ble.n	24da <__aeabi_d2f+0x72>
    2484:	4b3b      	ldr	r3, [pc, #236]	; (2574 <__aeabi_d2f+0x10c>)
    2486:	18f3      	adds	r3, r6, r3
    2488:	2bfe      	cmp	r3, #254	; 0xfe
    248a:	dc1a      	bgt.n	24c2 <__aeabi_d2f+0x5a>
    248c:	2b00      	cmp	r3, #0
    248e:	dd42      	ble.n	2516 <__aeabi_d2f+0xae>
    2490:	0180      	lsls	r0, r0, #6
    2492:	1e45      	subs	r5, r0, #1
    2494:	41a8      	sbcs	r0, r5
    2496:	00d2      	lsls	r2, r2, #3
    2498:	4310      	orrs	r0, r2
    249a:	0f62      	lsrs	r2, r4, #29
    249c:	4302      	orrs	r2, r0
    249e:	0750      	lsls	r0, r2, #29
    24a0:	d004      	beq.n	24ac <__aeabi_d2f+0x44>
    24a2:	200f      	movs	r0, #15
    24a4:	4010      	ands	r0, r2
    24a6:	2804      	cmp	r0, #4
    24a8:	d000      	beq.n	24ac <__aeabi_d2f+0x44>
    24aa:	3204      	adds	r2, #4
    24ac:	2080      	movs	r0, #128	; 0x80
    24ae:	04c0      	lsls	r0, r0, #19
    24b0:	4010      	ands	r0, r2
    24b2:	d021      	beq.n	24f8 <__aeabi_d2f+0x90>
    24b4:	3301      	adds	r3, #1
    24b6:	2bff      	cmp	r3, #255	; 0xff
    24b8:	d003      	beq.n	24c2 <__aeabi_d2f+0x5a>
    24ba:	0192      	lsls	r2, r2, #6
    24bc:	0a52      	lsrs	r2, r2, #9
    24be:	b2db      	uxtb	r3, r3
    24c0:	e001      	b.n	24c6 <__aeabi_d2f+0x5e>
    24c2:	23ff      	movs	r3, #255	; 0xff
    24c4:	2200      	movs	r2, #0
    24c6:	0252      	lsls	r2, r2, #9
    24c8:	0a52      	lsrs	r2, r2, #9
    24ca:	05db      	lsls	r3, r3, #23
    24cc:	4313      	orrs	r3, r2
    24ce:	005b      	lsls	r3, r3, #1
    24d0:	07c9      	lsls	r1, r1, #31
    24d2:	085b      	lsrs	r3, r3, #1
    24d4:	430b      	orrs	r3, r1
    24d6:	0018      	movs	r0, r3
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	2e00      	cmp	r6, #0
    24dc:	d007      	beq.n	24ee <__aeabi_d2f+0x86>
    24de:	4314      	orrs	r4, r2
    24e0:	d0ef      	beq.n	24c2 <__aeabi_d2f+0x5a>
    24e2:	2080      	movs	r0, #128	; 0x80
    24e4:	00d2      	lsls	r2, r2, #3
    24e6:	0480      	lsls	r0, r0, #18
    24e8:	4302      	orrs	r2, r0
    24ea:	23ff      	movs	r3, #255	; 0xff
    24ec:	e7d7      	b.n	249e <__aeabi_d2f+0x36>
    24ee:	4322      	orrs	r2, r4
    24f0:	2300      	movs	r3, #0
    24f2:	2a00      	cmp	r2, #0
    24f4:	d003      	beq.n	24fe <__aeabi_d2f+0x96>
    24f6:	2205      	movs	r2, #5
    24f8:	08d2      	lsrs	r2, r2, #3
    24fa:	2bff      	cmp	r3, #255	; 0xff
    24fc:	d003      	beq.n	2506 <__aeabi_d2f+0x9e>
    24fe:	0252      	lsls	r2, r2, #9
    2500:	0a52      	lsrs	r2, r2, #9
    2502:	b2db      	uxtb	r3, r3
    2504:	e7df      	b.n	24c6 <__aeabi_d2f+0x5e>
    2506:	2a00      	cmp	r2, #0
    2508:	d032      	beq.n	2570 <__aeabi_d2f+0x108>
    250a:	2080      	movs	r0, #128	; 0x80
    250c:	03c0      	lsls	r0, r0, #15
    250e:	4302      	orrs	r2, r0
    2510:	0252      	lsls	r2, r2, #9
    2512:	0a52      	lsrs	r2, r2, #9
    2514:	e7d7      	b.n	24c6 <__aeabi_d2f+0x5e>
    2516:	0018      	movs	r0, r3
    2518:	3017      	adds	r0, #23
    251a:	db14      	blt.n	2546 <__aeabi_d2f+0xde>
    251c:	2080      	movs	r0, #128	; 0x80
    251e:	0400      	lsls	r0, r0, #16
    2520:	4302      	orrs	r2, r0
    2522:	201e      	movs	r0, #30
    2524:	1ac0      	subs	r0, r0, r3
    2526:	281f      	cmp	r0, #31
    2528:	dc0f      	bgt.n	254a <__aeabi_d2f+0xe2>
    252a:	0025      	movs	r5, r4
    252c:	4b12      	ldr	r3, [pc, #72]	; (2578 <__aeabi_d2f+0x110>)
    252e:	18f3      	adds	r3, r6, r3
    2530:	409d      	lsls	r5, r3
    2532:	1e6e      	subs	r6, r5, #1
    2534:	41b5      	sbcs	r5, r6
    2536:	409a      	lsls	r2, r3
    2538:	002b      	movs	r3, r5
    253a:	4313      	orrs	r3, r2
    253c:	0022      	movs	r2, r4
    253e:	40c2      	lsrs	r2, r0
    2540:	431a      	orrs	r2, r3
    2542:	2300      	movs	r3, #0
    2544:	e7ab      	b.n	249e <__aeabi_d2f+0x36>
    2546:	2300      	movs	r3, #0
    2548:	e7d5      	b.n	24f6 <__aeabi_d2f+0x8e>
    254a:	2502      	movs	r5, #2
    254c:	426d      	negs	r5, r5
    254e:	1aeb      	subs	r3, r5, r3
    2550:	0015      	movs	r5, r2
    2552:	40dd      	lsrs	r5, r3
    2554:	2820      	cmp	r0, #32
    2556:	d009      	beq.n	256c <__aeabi_d2f+0x104>
    2558:	4b08      	ldr	r3, [pc, #32]	; (257c <__aeabi_d2f+0x114>)
    255a:	18f3      	adds	r3, r6, r3
    255c:	409a      	lsls	r2, r3
    255e:	4314      	orrs	r4, r2
    2560:	1e62      	subs	r2, r4, #1
    2562:	4194      	sbcs	r4, r2
    2564:	0022      	movs	r2, r4
    2566:	2300      	movs	r3, #0
    2568:	432a      	orrs	r2, r5
    256a:	e798      	b.n	249e <__aeabi_d2f+0x36>
    256c:	2200      	movs	r2, #0
    256e:	e7f6      	b.n	255e <__aeabi_d2f+0xf6>
    2570:	2200      	movs	r2, #0
    2572:	e7a8      	b.n	24c6 <__aeabi_d2f+0x5e>
    2574:	fffffc80 	.word	0xfffffc80
    2578:	fffffc82 	.word	0xfffffc82
    257c:	fffffca2 	.word	0xfffffca2

00002580 <__clzsi2>:
    2580:	211c      	movs	r1, #28
    2582:	2301      	movs	r3, #1
    2584:	041b      	lsls	r3, r3, #16
    2586:	4298      	cmp	r0, r3
    2588:	d301      	bcc.n	258e <__clzsi2+0xe>
    258a:	0c00      	lsrs	r0, r0, #16
    258c:	3910      	subs	r1, #16
    258e:	0a1b      	lsrs	r3, r3, #8
    2590:	4298      	cmp	r0, r3
    2592:	d301      	bcc.n	2598 <__clzsi2+0x18>
    2594:	0a00      	lsrs	r0, r0, #8
    2596:	3908      	subs	r1, #8
    2598:	091b      	lsrs	r3, r3, #4
    259a:	4298      	cmp	r0, r3
    259c:	d301      	bcc.n	25a2 <__clzsi2+0x22>
    259e:	0900      	lsrs	r0, r0, #4
    25a0:	3904      	subs	r1, #4
    25a2:	a202      	add	r2, pc, #8	; (adr r2, 25ac <__clzsi2+0x2c>)
    25a4:	5c10      	ldrb	r0, [r2, r0]
    25a6:	1840      	adds	r0, r0, r1
    25a8:	4770      	bx	lr
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	02020304 	.word	0x02020304
    25b0:	01010101 	.word	0x01010101
	...

000025bc <__libc_init_array>:
    25bc:	b570      	push	{r4, r5, r6, lr}
    25be:	4e0d      	ldr	r6, [pc, #52]	; (25f4 <__libc_init_array+0x38>)
    25c0:	4d0d      	ldr	r5, [pc, #52]	; (25f8 <__libc_init_array+0x3c>)
    25c2:	2400      	movs	r4, #0
    25c4:	1bad      	subs	r5, r5, r6
    25c6:	10ad      	asrs	r5, r5, #2
    25c8:	d005      	beq.n	25d6 <__libc_init_array+0x1a>
    25ca:	00a3      	lsls	r3, r4, #2
    25cc:	58f3      	ldr	r3, [r6, r3]
    25ce:	3401      	adds	r4, #1
    25d0:	4798      	blx	r3
    25d2:	42a5      	cmp	r5, r4
    25d4:	d1f9      	bne.n	25ca <__libc_init_array+0xe>
    25d6:	f000 f9cd 	bl	2974 <_init>
    25da:	4e08      	ldr	r6, [pc, #32]	; (25fc <__libc_init_array+0x40>)
    25dc:	4d08      	ldr	r5, [pc, #32]	; (2600 <__libc_init_array+0x44>)
    25de:	2400      	movs	r4, #0
    25e0:	1bad      	subs	r5, r5, r6
    25e2:	10ad      	asrs	r5, r5, #2
    25e4:	d005      	beq.n	25f2 <__libc_init_array+0x36>
    25e6:	00a3      	lsls	r3, r4, #2
    25e8:	58f3      	ldr	r3, [r6, r3]
    25ea:	3401      	adds	r4, #1
    25ec:	4798      	blx	r3
    25ee:	42a5      	cmp	r5, r4
    25f0:	d1f9      	bne.n	25e6 <__libc_init_array+0x2a>
    25f2:	bd70      	pop	{r4, r5, r6, pc}
    25f4:	00002980 	.word	0x00002980
    25f8:	00002980 	.word	0x00002980
    25fc:	00002980 	.word	0x00002980
    2600:	00002988 	.word	0x00002988

00002604 <memset>:
    2604:	b570      	push	{r4, r5, r6, lr}
    2606:	0783      	lsls	r3, r0, #30
    2608:	d03f      	beq.n	268a <memset+0x86>
    260a:	1e54      	subs	r4, r2, #1
    260c:	2a00      	cmp	r2, #0
    260e:	d03b      	beq.n	2688 <memset+0x84>
    2610:	b2ce      	uxtb	r6, r1
    2612:	0003      	movs	r3, r0
    2614:	2503      	movs	r5, #3
    2616:	e003      	b.n	2620 <memset+0x1c>
    2618:	1e62      	subs	r2, r4, #1
    261a:	2c00      	cmp	r4, #0
    261c:	d034      	beq.n	2688 <memset+0x84>
    261e:	0014      	movs	r4, r2
    2620:	3301      	adds	r3, #1
    2622:	1e5a      	subs	r2, r3, #1
    2624:	7016      	strb	r6, [r2, #0]
    2626:	422b      	tst	r3, r5
    2628:	d1f6      	bne.n	2618 <memset+0x14>
    262a:	2c03      	cmp	r4, #3
    262c:	d924      	bls.n	2678 <memset+0x74>
    262e:	25ff      	movs	r5, #255	; 0xff
    2630:	400d      	ands	r5, r1
    2632:	022a      	lsls	r2, r5, #8
    2634:	4315      	orrs	r5, r2
    2636:	042a      	lsls	r2, r5, #16
    2638:	4315      	orrs	r5, r2
    263a:	2c0f      	cmp	r4, #15
    263c:	d911      	bls.n	2662 <memset+0x5e>
    263e:	0026      	movs	r6, r4
    2640:	3e10      	subs	r6, #16
    2642:	0936      	lsrs	r6, r6, #4
    2644:	3601      	adds	r6, #1
    2646:	0136      	lsls	r6, r6, #4
    2648:	001a      	movs	r2, r3
    264a:	199b      	adds	r3, r3, r6
    264c:	6015      	str	r5, [r2, #0]
    264e:	6055      	str	r5, [r2, #4]
    2650:	6095      	str	r5, [r2, #8]
    2652:	60d5      	str	r5, [r2, #12]
    2654:	3210      	adds	r2, #16
    2656:	4293      	cmp	r3, r2
    2658:	d1f8      	bne.n	264c <memset+0x48>
    265a:	220f      	movs	r2, #15
    265c:	4014      	ands	r4, r2
    265e:	2c03      	cmp	r4, #3
    2660:	d90a      	bls.n	2678 <memset+0x74>
    2662:	1f26      	subs	r6, r4, #4
    2664:	08b6      	lsrs	r6, r6, #2
    2666:	3601      	adds	r6, #1
    2668:	00b6      	lsls	r6, r6, #2
    266a:	001a      	movs	r2, r3
    266c:	199b      	adds	r3, r3, r6
    266e:	c220      	stmia	r2!, {r5}
    2670:	4293      	cmp	r3, r2
    2672:	d1fc      	bne.n	266e <memset+0x6a>
    2674:	2203      	movs	r2, #3
    2676:	4014      	ands	r4, r2
    2678:	2c00      	cmp	r4, #0
    267a:	d005      	beq.n	2688 <memset+0x84>
    267c:	b2c9      	uxtb	r1, r1
    267e:	191c      	adds	r4, r3, r4
    2680:	7019      	strb	r1, [r3, #0]
    2682:	3301      	adds	r3, #1
    2684:	429c      	cmp	r4, r3
    2686:	d1fb      	bne.n	2680 <memset+0x7c>
    2688:	bd70      	pop	{r4, r5, r6, pc}
    268a:	0014      	movs	r4, r2
    268c:	0003      	movs	r3, r0
    268e:	e7cc      	b.n	262a <memset+0x26>

00002690 <register_fini>:
    2690:	4b03      	ldr	r3, [pc, #12]	; (26a0 <register_fini+0x10>)
    2692:	b510      	push	{r4, lr}
    2694:	2b00      	cmp	r3, #0
    2696:	d002      	beq.n	269e <register_fini+0xe>
    2698:	4802      	ldr	r0, [pc, #8]	; (26a4 <register_fini+0x14>)
    269a:	f000 f805 	bl	26a8 <atexit>
    269e:	bd10      	pop	{r4, pc}
    26a0:	00000000 	.word	0x00000000
    26a4:	000026b9 	.word	0x000026b9

000026a8 <atexit>:
    26a8:	b510      	push	{r4, lr}
    26aa:	0001      	movs	r1, r0
    26ac:	2300      	movs	r3, #0
    26ae:	2200      	movs	r2, #0
    26b0:	2000      	movs	r0, #0
    26b2:	f000 f81b 	bl	26ec <__register_exitproc>
    26b6:	bd10      	pop	{r4, pc}

000026b8 <__libc_fini_array>:
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	4b09      	ldr	r3, [pc, #36]	; (26e0 <__libc_fini_array+0x28>)
    26bc:	4c09      	ldr	r4, [pc, #36]	; (26e4 <__libc_fini_array+0x2c>)
    26be:	1ae4      	subs	r4, r4, r3
    26c0:	10a4      	asrs	r4, r4, #2
    26c2:	d009      	beq.n	26d8 <__libc_fini_array+0x20>
    26c4:	4a08      	ldr	r2, [pc, #32]	; (26e8 <__libc_fini_array+0x30>)
    26c6:	18a5      	adds	r5, r4, r2
    26c8:	00ad      	lsls	r5, r5, #2
    26ca:	18ed      	adds	r5, r5, r3
    26cc:	682b      	ldr	r3, [r5, #0]
    26ce:	3c01      	subs	r4, #1
    26d0:	4798      	blx	r3
    26d2:	3d04      	subs	r5, #4
    26d4:	2c00      	cmp	r4, #0
    26d6:	d1f9      	bne.n	26cc <__libc_fini_array+0x14>
    26d8:	f000 f956 	bl	2988 <_fini>
    26dc:	bd70      	pop	{r4, r5, r6, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	00002994 	.word	0x00002994
    26e4:	00002998 	.word	0x00002998
    26e8:	3fffffff 	.word	0x3fffffff

000026ec <__register_exitproc>:
    26ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ee:	4644      	mov	r4, r8
    26f0:	465f      	mov	r7, fp
    26f2:	4656      	mov	r6, sl
    26f4:	464d      	mov	r5, r9
    26f6:	469b      	mov	fp, r3
    26f8:	4b2f      	ldr	r3, [pc, #188]	; (27b8 <__register_exitproc+0xcc>)
    26fa:	b4f0      	push	{r4, r5, r6, r7}
    26fc:	681c      	ldr	r4, [r3, #0]
    26fe:	23a4      	movs	r3, #164	; 0xa4
    2700:	005b      	lsls	r3, r3, #1
    2702:	0005      	movs	r5, r0
    2704:	58e0      	ldr	r0, [r4, r3]
    2706:	000e      	movs	r6, r1
    2708:	4690      	mov	r8, r2
    270a:	2800      	cmp	r0, #0
    270c:	d04b      	beq.n	27a6 <__register_exitproc+0xba>
    270e:	6843      	ldr	r3, [r0, #4]
    2710:	2b1f      	cmp	r3, #31
    2712:	dc0d      	bgt.n	2730 <__register_exitproc+0x44>
    2714:	1c5c      	adds	r4, r3, #1
    2716:	2d00      	cmp	r5, #0
    2718:	d121      	bne.n	275e <__register_exitproc+0x72>
    271a:	3302      	adds	r3, #2
    271c:	009b      	lsls	r3, r3, #2
    271e:	6044      	str	r4, [r0, #4]
    2720:	501e      	str	r6, [r3, r0]
    2722:	2000      	movs	r0, #0
    2724:	bc3c      	pop	{r2, r3, r4, r5}
    2726:	4690      	mov	r8, r2
    2728:	4699      	mov	r9, r3
    272a:	46a2      	mov	sl, r4
    272c:	46ab      	mov	fp, r5
    272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2730:	4b22      	ldr	r3, [pc, #136]	; (27bc <__register_exitproc+0xd0>)
    2732:	2b00      	cmp	r3, #0
    2734:	d03c      	beq.n	27b0 <__register_exitproc+0xc4>
    2736:	20c8      	movs	r0, #200	; 0xc8
    2738:	0040      	lsls	r0, r0, #1
    273a:	e000      	b.n	273e <__register_exitproc+0x52>
    273c:	bf00      	nop
    273e:	2800      	cmp	r0, #0
    2740:	d036      	beq.n	27b0 <__register_exitproc+0xc4>
    2742:	22a4      	movs	r2, #164	; 0xa4
    2744:	2300      	movs	r3, #0
    2746:	0052      	lsls	r2, r2, #1
    2748:	58a1      	ldr	r1, [r4, r2]
    274a:	6043      	str	r3, [r0, #4]
    274c:	6001      	str	r1, [r0, #0]
    274e:	50a0      	str	r0, [r4, r2]
    2750:	3240      	adds	r2, #64	; 0x40
    2752:	5083      	str	r3, [r0, r2]
    2754:	3204      	adds	r2, #4
    2756:	5083      	str	r3, [r0, r2]
    2758:	2401      	movs	r4, #1
    275a:	2d00      	cmp	r5, #0
    275c:	d0dd      	beq.n	271a <__register_exitproc+0x2e>
    275e:	009a      	lsls	r2, r3, #2
    2760:	4691      	mov	r9, r2
    2762:	4481      	add	r9, r0
    2764:	4642      	mov	r2, r8
    2766:	2188      	movs	r1, #136	; 0x88
    2768:	464f      	mov	r7, r9
    276a:	507a      	str	r2, [r7, r1]
    276c:	22c4      	movs	r2, #196	; 0xc4
    276e:	0052      	lsls	r2, r2, #1
    2770:	4690      	mov	r8, r2
    2772:	4480      	add	r8, r0
    2774:	4642      	mov	r2, r8
    2776:	3987      	subs	r1, #135	; 0x87
    2778:	4099      	lsls	r1, r3
    277a:	6812      	ldr	r2, [r2, #0]
    277c:	468a      	mov	sl, r1
    277e:	430a      	orrs	r2, r1
    2780:	4694      	mov	ip, r2
    2782:	4642      	mov	r2, r8
    2784:	4661      	mov	r1, ip
    2786:	6011      	str	r1, [r2, #0]
    2788:	2284      	movs	r2, #132	; 0x84
    278a:	4649      	mov	r1, r9
    278c:	465f      	mov	r7, fp
    278e:	0052      	lsls	r2, r2, #1
    2790:	508f      	str	r7, [r1, r2]
    2792:	2d02      	cmp	r5, #2
    2794:	d1c1      	bne.n	271a <__register_exitproc+0x2e>
    2796:	0002      	movs	r2, r0
    2798:	4655      	mov	r5, sl
    279a:	328d      	adds	r2, #141	; 0x8d
    279c:	32ff      	adds	r2, #255	; 0xff
    279e:	6811      	ldr	r1, [r2, #0]
    27a0:	430d      	orrs	r5, r1
    27a2:	6015      	str	r5, [r2, #0]
    27a4:	e7b9      	b.n	271a <__register_exitproc+0x2e>
    27a6:	0020      	movs	r0, r4
    27a8:	304d      	adds	r0, #77	; 0x4d
    27aa:	30ff      	adds	r0, #255	; 0xff
    27ac:	50e0      	str	r0, [r4, r3]
    27ae:	e7ae      	b.n	270e <__register_exitproc+0x22>
    27b0:	2001      	movs	r0, #1
    27b2:	4240      	negs	r0, r0
    27b4:	e7b6      	b.n	2724 <__register_exitproc+0x38>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	00002970 	.word	0x00002970
    27bc:	00000000 	.word	0x00000000

000027c0 <spi2MOSI>:
    27c0:	0c000002 00000200                                .....

000027c5 <spi2SCK>:
    27c5:	0e000002 00000200                                .....

000027ca <spi2MISO>:
    27ca:	0d000002 8d200000                                ......

000027d0 <lookupTable.12440>:
    27d0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    27e0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    27f0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2800:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2810:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    2820:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    2830:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    2840:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    2850:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    2860:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    2870:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2880:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2890:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    28a0:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    28b0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    28c0:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    28d0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    28e0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    28f0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2900:	000f048e                                ....

00002904 <senseBatPin>:
    2904:	06000000 01000106                                .....

00002909 <senseAPin>:
    2909:	03010001 0100010b                                .....

0000290e <senseBPin>:
    290e:	02010001 0000000a                                .....

00002913 <senseCPin>:
    2913:	03000000 00000001                                .....

00002918 <senseDPin>:
    2918:	02000000 00000000                                .....

0000291d <analogAccelPin>:
    291d:	07000000 00000207                                .....

00002922 <spi2MOSI>:
    2922:	0c000002 00000200                                .....

00002927 <spi2SCK>:
    2927:	0e000002 001fc800 001e8800 001e8800     ................
    2937:	001e8600 001fa000 001fa000 001f9200     ................
    2947:	001e8600 001fa000 001f9200 001fa000     ................
    2957:	001e8600 001fa800 001fa800 001fa800     ................
    2967:	0021a800 00004300 00001000                       ..!..C...

00002970 <_global_impure_ptr>:
    2970:	20000010                                ... 

00002974 <_init>:
    2974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	bcf8      	pop	{r3, r4, r5, r6, r7}
    297a:	bc08      	pop	{r3}
    297c:	469e      	mov	lr, r3
    297e:	4770      	bx	lr

00002980 <__init_array_start>:
    2980:	00002691 	.word	0x00002691

00002984 <__frame_dummy_init_array_entry>:
    2984:	000000dd                                ....

00002988 <_fini>:
    2988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    298e:	bc08      	pop	{r3}
    2990:	469e      	mov	lr, r3
    2992:	4770      	bx	lr

00002994 <__fini_array_start>:
    2994:	000000b5 	.word	0x000000b5
