
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000279c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000279c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002be0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002d90  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019fff  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f2f  00000000  00000000  0003a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001689  00000000  00000000  0003c3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000330  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ac8  00000000  00000000  0003dda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015193  00000000  00000000  0003e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007c4f  00000000  00000000  000539fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000723e5  00000000  00000000  0005b64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000097c  00000000  00000000  000cda30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_32K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
      2c:	00000115 	.word	0x00000115
	...
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
      40:	00000115 	.word	0x00000115
    pinHigh(cs_mem);

    delay_ms(300);
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000d5d 	.word	0x00000d5d
}
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000dfd 	.word	0x00000dfd
      90:	00000e65 	.word	0x00000e65
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000279c 	.word	0x0000279c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000279c 	.word	0x0000279c
     10c:	0000279c 	.word	0x0000279c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000279c 	.word	0x0000279c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000023c1 	.word	0x000023c1
     1d0:	000008f5 	.word	0x000008f5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <readMS5803AdcResults>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2280      	movs	r2, #128	; 0x80
     1e6:	4b28      	ldr	r3, [pc, #160]	; (288 <readMS5803AdcResults+0xa4>)
     1e8:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     1ea:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ec:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     1ee:	2300      	movs	r3, #0
     1f0:	4d26      	ldr	r5, [pc, #152]	; (28c <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     1f2:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     1f4:	9300      	str	r3, [sp, #0]
     1f6:	786b      	ldrb	r3, [r5, #1]
     1f8:	7828      	ldrb	r0, [r5, #0]
     1fa:	78aa      	ldrb	r2, [r5, #2]
     1fc:	021b      	lsls	r3, r3, #8
     1fe:	4303      	orrs	r3, r0
     200:	0412      	lsls	r2, r2, #16
     202:	0019      	movs	r1, r3
     204:	0013      	movs	r3, r2
     206:	430b      	orrs	r3, r1
     208:	79a9      	ldrb	r1, [r5, #6]
     20a:	796f      	ldrb	r7, [r5, #5]
     20c:	79ec      	ldrb	r4, [r5, #7]
     20e:	0209      	lsls	r1, r1, #8
     210:	4339      	orrs	r1, r7
     212:	0424      	lsls	r4, r4, #16
     214:	0008      	movs	r0, r1
     216:	0021      	movs	r1, r4
     218:	7a2c      	ldrb	r4, [r5, #8]
     21a:	78ea      	ldrb	r2, [r5, #3]
     21c:	7a6f      	ldrb	r7, [r5, #9]
     21e:	4301      	orrs	r1, r0
     220:	0624      	lsls	r4, r4, #24
     222:	430c      	orrs	r4, r1
     224:	0612      	lsls	r2, r2, #24
     226:	431a      	orrs	r2, r3
     228:	0020      	movs	r0, r4
     22a:	792b      	ldrb	r3, [r5, #4]
     22c:	0039      	movs	r1, r7
     22e:	4e18      	ldr	r6, [pc, #96]	; (290 <readMS5803AdcResults+0xac>)
     230:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     232:	7aeb      	ldrb	r3, [r5, #11]
     234:	7aa9      	ldrb	r1, [r5, #10]
     236:	021b      	lsls	r3, r3, #8
     238:	430b      	orrs	r3, r1
     23a:	001a      	movs	r2, r3
     23c:	7b2b      	ldrb	r3, [r5, #12]
     23e:	4e15      	ldr	r6, [pc, #84]	; (294 <readMS5803AdcResults+0xb0>)
     240:	041b      	lsls	r3, r3, #16
     242:	4313      	orrs	r3, r2
     244:	7b6a      	ldrb	r2, [r5, #13]
     246:	7bad      	ldrb	r5, [r5, #14]
     248:	0612      	lsls	r2, r2, #24
     24a:	431a      	orrs	r2, r3
     24c:	0039      	movs	r1, r7
     24e:	002b      	movs	r3, r5
     250:	0020      	movs	r0, r4
     252:	9203      	str	r2, [sp, #12]
     254:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     256:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     258:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     25a:	002b      	movs	r3, r5
     25c:	0039      	movs	r1, r7
     25e:	0020      	movs	r0, r4
     260:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     262:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     264:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     266:	002b      	movs	r3, r5
     268:	0020      	movs	r0, r4
     26a:	0039      	movs	r1, r7
     26c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26e:	2280      	movs	r2, #128	; 0x80
     270:	4b05      	ldr	r3, [pc, #20]	; (288 <readMS5803AdcResults+0xa4>)
     272:	0212      	lsls	r2, r2, #8
     274:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     276:	9b04      	ldr	r3, [sp, #16]
     278:	9a05      	ldr	r2, [sp, #20]
     27a:	041b      	lsls	r3, r3, #16
     27c:	0215      	lsls	r5, r2, #8
     27e:	431d      	orrs	r5, r3
     280:	4328      	orrs	r0, r5
}
     282:	b007      	add	sp, #28
     284:	bdf0      	pop	{r4, r5, r6, r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	41004400 	.word	0x41004400
     28c:	000025c4 	.word	0x000025c4
     290:	00000a85 	.word	0x00000a85
     294:	00000af1 	.word	0x00000af1

00000298 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     298:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     29a:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     29c:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     29e:	8803      	ldrh	r3, [r0, #0]
     2a0:	aa04      	add	r2, sp, #16
     2a2:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2a4:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2a6:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2a8:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     2aa:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2ac:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     2ae:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2b0:	88c3      	ldrh	r3, [r0, #6]
     2b2:	9401      	str	r4, [sp, #4]
     2b4:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     2b6:	8903      	ldrh	r3, [r0, #8]
     2b8:	aa07      	add	r2, sp, #28
     2ba:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     2bc:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     2be:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     2c0:	8941      	ldrh	r1, [r0, #10]
     2c2:	a804      	add	r0, sp, #16
     2c4:	181b      	adds	r3, r3, r0
     2c6:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     2c8:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2ca:	693a      	ldr	r2, [r7, #16]
     2cc:	0236      	lsls	r6, r6, #8
     2ce:	8818      	ldrh	r0, [r3, #0]
     2d0:	1b96      	subs	r6, r2, r6
     2d2:	17f2      	asrs	r2, r6, #31
     2d4:	4c2a      	ldr	r4, [pc, #168]	; (380 <ConvertPressureTemperature+0xe8>)
     2d6:	9203      	str	r2, [sp, #12]
     2d8:	17f3      	asrs	r3, r6, #31
     2da:	0032      	movs	r2, r6
     2dc:	b280      	uxth	r0, r0
     2de:	2100      	movs	r1, #0
     2e0:	47a0      	blx	r4
     2e2:	23fa      	movs	r3, #250	; 0xfa
     2e4:	00db      	lsls	r3, r3, #3
     2e6:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2e8:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2ea:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2ec:	b29b      	uxth	r3, r3
     2ee:	9302      	str	r3, [sp, #8]
     2f0:	9b01      	ldr	r3, [sp, #4]
     2f2:	0032      	movs	r2, r6
     2f4:	8818      	ldrh	r0, [r3, #0]
     2f6:	2100      	movs	r1, #0
     2f8:	17f3      	asrs	r3, r6, #31
     2fa:	b280      	uxth	r0, r0
     2fc:	47a0      	blx	r4
     2fe:	064b      	lsls	r3, r1, #25
     300:	09c4      	lsrs	r4, r0, #7
     302:	431c      	orrs	r4, r3
     304:	2300      	movs	r3, #0
     306:	11cd      	asrs	r5, r1, #7
     308:	9902      	ldr	r1, [sp, #8]
     30a:	040a      	lsls	r2, r1, #16
     30c:	1912      	adds	r2, r2, r4
     30e:	416b      	adcs	r3, r5
     310:	9208      	str	r2, [sp, #32]
     312:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     314:	ab04      	add	r3, sp, #16
     316:	889c      	ldrh	r4, [r3, #4]
     318:	8918      	ldrh	r0, [r3, #8]
     31a:	0032      	movs	r2, r6
     31c:	9b03      	ldr	r3, [sp, #12]
     31e:	4d18      	ldr	r5, [pc, #96]	; (380 <ConvertPressureTemperature+0xe8>)
     320:	b280      	uxth	r0, r0
     322:	2100      	movs	r1, #0
     324:	47a8      	blx	r5
     326:	060b      	lsls	r3, r1, #24
     328:	0a05      	lsrs	r5, r0, #8
     32a:	431d      	orrs	r5, r3
     32c:	2300      	movs	r3, #0
     32e:	b2a4      	uxth	r4, r4
     330:	120e      	asrs	r6, r1, #8
     332:	03e2      	lsls	r2, r4, #15
     334:	1952      	adds	r2, r2, r5
     336:	4173      	adcs	r3, r6
     338:	920a      	str	r2, [sp, #40]	; 0x28
     33a:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     340:	9c08      	ldr	r4, [sp, #32]
     342:	9d09      	ldr	r5, [sp, #36]	; 0x24
     344:	4e0e      	ldr	r6, [pc, #56]	; (380 <ConvertPressureTemperature+0xe8>)
     346:	68f8      	ldr	r0, [r7, #12]
     348:	2100      	movs	r1, #0
     34a:	47b0      	blx	r6
     34c:	2300      	movs	r3, #0
     34e:	17ce      	asrs	r6, r1, #31
     350:	02f6      	lsls	r6, r6, #11
     352:	0af2      	lsrs	r2, r6, #11
     354:	1880      	adds	r0, r0, r2
     356:	4159      	adcs	r1, r3
     358:	02ce      	lsls	r6, r1, #11
     35a:	0d42      	lsrs	r2, r0, #21
     35c:	4332      	orrs	r2, r6
     35e:	154b      	asrs	r3, r1, #21
     360:	1b12      	subs	r2, r2, r4
     362:	41ab      	sbcs	r3, r5
     364:	2100      	movs	r1, #0
     366:	17dc      	asrs	r4, r3, #31
     368:	0464      	lsls	r4, r4, #17
     36a:	0c60      	lsrs	r0, r4, #17
     36c:	1812      	adds	r2, r2, r0
     36e:	414b      	adcs	r3, r1
     370:	0011      	movs	r1, r2
     372:	045b      	lsls	r3, r3, #17
     374:	0bca      	lsrs	r2, r1, #15
     376:	431a      	orrs	r2, r3
     378:	61fa      	str	r2, [r7, #28]
}
     37a:	b00d      	add	sp, #52	; 0x34
     37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	0000152d 	.word	0x0000152d

00000384 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     384:	220a      	movs	r2, #10
     386:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     388:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     38a:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     38c:	4c0e      	ldr	r4, [pc, #56]	; (3c8 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     38e:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     390:	42a2      	cmp	r2, r4
     392:	d901      	bls.n	398 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     394:	4b0d      	ldr	r3, [pc, #52]	; (3cc <pascalToCent+0x48>)
     396:	e015      	b.n	3c4 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     398:	1aa3      	subs	r3, r4, r2
     39a:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     39c:	2b4b      	cmp	r3, #75	; 0x4b
     39e:	d901      	bls.n	3a4 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     3a0:	4b0b      	ldr	r3, [pc, #44]	; (3d0 <pascalToCent+0x4c>)
     3a2:	e00f      	b.n	3c4 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     3a4:	4d0b      	ldr	r5, [pc, #44]	; (3d4 <pascalToCent+0x50>)
     3a6:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3a8:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     3aa:	3301      	adds	r3, #1
     3ac:	009b      	lsls	r3, r3, #2
     3ae:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     3b0:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3b2:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     3b4:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3b6:	1aa4      	subs	r4, r4, r2
     3b8:	691a      	ldr	r2, [r3, #16]
     3ba:	1a52      	subs	r2, r2, r1
     3bc:	0013      	movs	r3, r2
     3be:	4363      	muls	r3, r4
     3c0:	0a9b      	lsrs	r3, r3, #10
     3c2:	185b      	adds	r3, r3, r1
     3c4:	6203      	str	r3, [r0, #32]
        }
    }
}
     3c6:	bd70      	pop	{r4, r5, r6, pc}
     3c8:	000199cc 	.word	0x000199cc
     3cc:	ffff8d20 	.word	0xffff8d20
     3d0:	000f048e 	.word	0x000f048e
     3d4:	000025c4 	.word	0x000025c4

000003d8 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	27a2      	movs	r7, #162	; 0xa2
     3dc:	b087      	sub	sp, #28
     3de:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     3e0:	2096      	movs	r0, #150	; 0x96
     3e2:	4c2b      	ldr	r4, [pc, #172]	; (490 <readMS5803Coefficients+0xb8>)
     3e4:	0080      	lsls	r0, r0, #2
     3e6:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     3e8:	2096      	movs	r0, #150	; 0x96
     3ea:	0080      	lsls	r0, r0, #2
     3ec:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ee:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     3f0:	4c28      	ldr	r4, [pc, #160]	; (494 <readMS5803Coefficients+0xbc>)
     3f2:	4b29      	ldr	r3, [pc, #164]	; (498 <readMS5803Coefficients+0xc0>)
     3f4:	0212      	lsls	r2, r2, #8
     3f6:	615a      	str	r2, [r3, #20]
     3f8:	7863      	ldrb	r3, [r4, #1]
     3fa:	7820      	ldrb	r0, [r4, #0]
     3fc:	78a2      	ldrb	r2, [r4, #2]
     3fe:	021b      	lsls	r3, r3, #8
     400:	4303      	orrs	r3, r0
     402:	0412      	lsls	r2, r2, #16
     404:	0019      	movs	r1, r3
     406:	0013      	movs	r3, r2
     408:	430b      	orrs	r3, r1
     40a:	79a1      	ldrb	r1, [r4, #6]
     40c:	7966      	ldrb	r6, [r4, #5]
     40e:	0209      	lsls	r1, r1, #8
     410:	4331      	orrs	r1, r6
     412:	0008      	movs	r0, r1
     414:	79e1      	ldrb	r1, [r4, #7]
     416:	78e2      	ldrb	r2, [r4, #3]
     418:	0409      	lsls	r1, r1, #16
     41a:	4301      	orrs	r1, r0
     41c:	7a20      	ldrb	r0, [r4, #8]
     41e:	7a66      	ldrb	r6, [r4, #9]
     420:	0612      	lsls	r2, r2, #24
     422:	0600      	lsls	r0, r0, #24
     424:	4308      	orrs	r0, r1
     426:	431a      	orrs	r2, r3
     428:	9700      	str	r7, [sp, #0]
     42a:	7923      	ldrb	r3, [r4, #4]
     42c:	0031      	movs	r1, r6
     42e:	4d1b      	ldr	r5, [pc, #108]	; (49c <readMS5803Coefficients+0xc4>)
     430:	9003      	str	r0, [sp, #12]
     432:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     434:	7ae3      	ldrb	r3, [r4, #11]
     436:	0020      	movs	r0, r4
     438:	7aa1      	ldrb	r1, [r4, #10]
     43a:	7b24      	ldrb	r4, [r4, #12]
     43c:	021b      	lsls	r3, r3, #8
     43e:	430b      	orrs	r3, r1
     440:	0424      	lsls	r4, r4, #16
     442:	001a      	movs	r2, r3
     444:	0023      	movs	r3, r4
     446:	7b44      	ldrb	r4, [r0, #13]
     448:	7b85      	ldrb	r5, [r0, #14]
     44a:	4313      	orrs	r3, r2
     44c:	0624      	lsls	r4, r4, #24
     44e:	431c      	orrs	r4, r3
     450:	0022      	movs	r2, r4
     452:	002b      	movs	r3, r5
     454:	9404      	str	r4, [sp, #16]
     456:	0031      	movs	r1, r6
     458:	4c11      	ldr	r4, [pc, #68]	; (4a0 <readMS5803Coefficients+0xc8>)
     45a:	9803      	ldr	r0, [sp, #12]
     45c:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     45e:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     460:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     462:	9a04      	ldr	r2, [sp, #16]
     464:	9803      	ldr	r0, [sp, #12]
     466:	0031      	movs	r1, r6
     468:	4c0d      	ldr	r4, [pc, #52]	; (4a0 <readMS5803Coefficients+0xc8>)
     46a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     46c:	2280      	movs	r2, #128	; 0x80
     46e:	4b0a      	ldr	r3, [pc, #40]	; (498 <readMS5803Coefficients+0xc0>)
     470:	0212      	lsls	r2, r2, #8
     472:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     474:	9b05      	ldr	r3, [sp, #20]
     476:	021d      	lsls	r5, r3, #8
     478:	9b02      	ldr	r3, [sp, #8]
     47a:	4328      	orrs	r0, r5
     47c:	8018      	strh	r0, [r3, #0]
     47e:	1cbb      	adds	r3, r7, #2
     480:	b2df      	uxtb	r7, r3
     482:	9b02      	ldr	r3, [sp, #8]
     484:	3302      	adds	r3, #2
     486:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     488:	2fae      	cmp	r7, #174	; 0xae
     48a:	d1a9      	bne.n	3e0 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     48c:	b007      	add	sp, #28
     48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     490:	00000cfd 	.word	0x00000cfd
     494:	000025c4 	.word	0x000025c4
     498:	41004400 	.word	0x41004400
     49c:	00000a85 	.word	0x00000a85
     4a0:	00000af1 	.word	0x00000af1

000004a4 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4a6:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     4a8:	231e      	movs	r3, #30
     4aa:	491a      	ldr	r1, [pc, #104]	; (514 <initMS5803Barometer+0x70>)
     4ac:	4d1a      	ldr	r5, [pc, #104]	; (518 <initMS5803Barometer+0x74>)
     4ae:	0236      	lsls	r6, r6, #8
     4b0:	616e      	str	r6, [r5, #20]
     4b2:	9300      	str	r3, [sp, #0]
     4b4:	784b      	ldrb	r3, [r1, #1]
     4b6:	780a      	ldrb	r2, [r1, #0]
     4b8:	021b      	lsls	r3, r3, #8
     4ba:	4313      	orrs	r3, r2
     4bc:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     4be:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     4c0:	0412      	lsls	r2, r2, #16
     4c2:	0018      	movs	r0, r3
     4c4:	0013      	movs	r3, r2
     4c6:	78ca      	ldrb	r2, [r1, #3]
     4c8:	4303      	orrs	r3, r0
     4ca:	0612      	lsls	r2, r2, #24
     4cc:	1d4f      	adds	r7, r1, #5
     4ce:	431a      	orrs	r2, r3
     4d0:	7948      	ldrb	r0, [r1, #5]
     4d2:	790b      	ldrb	r3, [r1, #4]
     4d4:	7989      	ldrb	r1, [r1, #6]
     4d6:	0209      	lsls	r1, r1, #8
     4d8:	4301      	orrs	r1, r0
     4da:	78b8      	ldrb	r0, [r7, #2]
     4dc:	0400      	lsls	r0, r0, #16
     4de:	4301      	orrs	r1, r0
     4e0:	78f8      	ldrb	r0, [r7, #3]
     4e2:	0600      	lsls	r0, r0, #24
     4e4:	4308      	orrs	r0, r1
     4e6:	7939      	ldrb	r1, [r7, #4]
     4e8:	4f0c      	ldr	r7, [pc, #48]	; (51c <initMS5803Barometer+0x78>)
     4ea:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4ec:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     4ee:	20c8      	movs	r0, #200	; 0xc8
     4f0:	4b0b      	ldr	r3, [pc, #44]	; (520 <initMS5803Barometer+0x7c>)
     4f2:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     4f4:	0020      	movs	r0, r4
     4f6:	4b0b      	ldr	r3, [pc, #44]	; (524 <initMS5803Barometer+0x80>)
     4f8:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     4fa:	23fa      	movs	r3, #250	; 0xfa
     4fc:	011b      	lsls	r3, r3, #4
     4fe:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     500:	4b09      	ldr	r3, [pc, #36]	; (528 <initMS5803Barometer+0x84>)
     502:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     504:	4b09      	ldr	r3, [pc, #36]	; (52c <initMS5803Barometer+0x88>)
     506:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     508:	4b09      	ldr	r3, [pc, #36]	; (530 <initMS5803Barometer+0x8c>)
     50a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     50c:	23fa      	movs	r3, #250	; 0xfa
     50e:	00db      	lsls	r3, r3, #3
     510:	6163      	str	r3, [r4, #20]




}
     512:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     514:	000025c4 	.word	0x000025c4
     518:	41004400 	.word	0x41004400
     51c:	00000a85 	.word	0x00000a85
     520:	00000d2d 	.word	0x00000d2d
     524:	000003d9 	.word	0x000003d9
     528:	00002710 	.word	0x00002710
     52c:	0041c9fe 	.word	0x0041c9fe
     530:	007ffae4 	.word	0x007ffae4

00000534 <init>:
#include "math.h"




void init() {
     534:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     536:	4bbf      	ldr	r3, [pc, #764]	; (834 <init+0x300>)
#include "math.h"




void init() {
     538:	b085      	sub	sp, #20
    SystemInit();
     53a:	4798      	blx	r3
    GclkInit();
     53c:	4bbe      	ldr	r3, [pc, #760]	; (838 <init+0x304>)
     53e:	4798      	blx	r3
    RtcInit();
     540:	4bbe      	ldr	r3, [pc, #760]	; (83c <init+0x308>)
     542:	4798      	blx	r3
    delayInit();
     544:	4bbe      	ldr	r3, [pc, #760]	; (840 <init+0x30c>)
     546:	4798      	blx	r3
    adcInit();
     548:	4bbe      	ldr	r3, [pc, #760]	; (844 <init+0x310>)
     54a:	4798      	blx	r3
    dmaInit();
     54c:	4bbe      	ldr	r3, [pc, #760]	; (848 <init+0x314>)
     54e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     550:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     552:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     554:	4bbd      	ldr	r3, [pc, #756]	; (84c <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     556:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     558:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     55a:	5858      	ldr	r0, [r3, r1]
     55c:	4abc      	ldr	r2, [pc, #752]	; (850 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     55e:	2401      	movs	r4, #1
     560:	4002      	ands	r2, r0
     562:	505a      	str	r2, [r3, r1]
     564:	4bbb      	ldr	r3, [pc, #748]	; (854 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     566:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     568:	0019      	movs	r1, r3
     56a:	3154      	adds	r1, #84	; 0x54
     56c:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     56e:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     570:	43a2      	bics	r2, r4
     572:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     574:	2280      	movs	r2, #128	; 0x80
     576:	0352      	lsls	r2, r2, #13
     578:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     57a:	220f      	movs	r2, #15
     57c:	3033      	adds	r0, #51	; 0x33
     57e:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     580:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     582:	4391      	bics	r1, r2
     584:	4321      	orrs	r1, r4
     586:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     588:	7cc1      	ldrb	r1, [r0, #19]
     58a:	36c3      	adds	r6, #195	; 0xc3
     58c:	4321      	orrs	r1, r4
     58e:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     590:	0019      	movs	r1, r3
     592:	31b1      	adds	r1, #177	; 0xb1
     594:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     596:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     598:	4010      	ands	r0, r2
     59a:	4328      	orrs	r0, r5
     59c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     59e:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5a0:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5a2:	4320      	orrs	r0, r4
     5a4:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5a6:	7808      	ldrb	r0, [r1, #0]
     5a8:	4010      	ands	r0, r2
     5aa:	4328      	orrs	r0, r5
     5ac:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	4320      	orrs	r0, r4
     5b2:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5b4:	7d30      	ldrb	r0, [r6, #20]
     5b6:	43a0      	bics	r0, r4
     5b8:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ba:	2080      	movs	r0, #128	; 0x80
     5bc:	0400      	lsls	r0, r0, #16
     5be:	9703      	str	r7, [sp, #12]
     5c0:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5c2:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5c4:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5c6:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5c8:	4390      	bics	r0, r2
     5ca:	4320      	orrs	r0, r4
     5cc:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ce:	20c2      	movs	r0, #194	; 0xc2
     5d0:	4684      	mov	ip, r0
     5d2:	449c      	add	ip, r3
     5d4:	4660      	mov	r0, ip
     5d6:	4667      	mov	r7, ip
     5d8:	7800      	ldrb	r0, [r0, #0]
     5da:	4320      	orrs	r0, r4
     5dc:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     5de:	7808      	ldrb	r0, [r1, #0]
     5e0:	4390      	bics	r0, r2
     5e2:	4320      	orrs	r0, r4
     5e4:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e6:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ea:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ec:	4321      	orrs	r1, r4
     5ee:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f0:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5f2:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f4:	43a1      	bics	r1, r4
     5f6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5f8:	2180      	movs	r1, #128	; 0x80
     5fa:	9803      	ldr	r0, [sp, #12]
     5fc:	03c9      	lsls	r1, r1, #15
     5fe:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     600:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     604:	3031      	adds	r0, #49	; 0x31
     606:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     608:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     60a:	4011      	ands	r1, r2
     60c:	430d      	orrs	r5, r1
     60e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     610:	001d      	movs	r5, r3
     612:	3543      	adds	r5, #67	; 0x43
     614:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     616:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     618:	4321      	orrs	r1, r4
     61a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     61c:	7da9      	ldrb	r1, [r5, #22]
     61e:	3505      	adds	r5, #5
     620:	43a1      	bics	r1, r4
     622:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     624:	2180      	movs	r1, #128	; 0x80
     626:	0489      	lsls	r1, r1, #18
     628:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     62a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     62c:	7801      	ldrb	r1, [r0, #0]
     62e:	4391      	bics	r1, r2
     630:	4321      	orrs	r1, r4
     632:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     634:	7c41      	ldrb	r1, [r0, #17]
     636:	3011      	adds	r0, #17
     638:	4321      	orrs	r1, r4
     63a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63c:	7d81      	ldrb	r1, [r0, #22]
     63e:	43a1      	bics	r1, r4
     640:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     642:	2180      	movs	r1, #128	; 0x80
     644:	0449      	lsls	r1, r1, #17
     646:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     648:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	7829      	ldrb	r1, [r5, #0]
     64c:	43a1      	bics	r1, r4
     64e:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     650:	2180      	movs	r1, #128	; 0x80
     652:	0049      	lsls	r1, r1, #1
     654:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     656:	7831      	ldrb	r1, [r6, #0]
     658:	43a1      	bics	r1, r4
     65a:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     65c:	2180      	movs	r1, #128	; 0x80
     65e:	0089      	lsls	r1, r1, #2
     660:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	0019      	movs	r1, r3
     664:	314b      	adds	r1, #75	; 0x4b
     666:	7808      	ldrb	r0, [r1, #0]
     668:	43a0      	bics	r0, r4
     66a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66c:	7808      	ldrb	r0, [r1, #0]
     66e:	4338      	orrs	r0, r7
     670:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     672:	2080      	movs	r0, #128	; 0x80
     674:	0100      	lsls	r0, r0, #4
     676:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     678:	4877      	ldr	r0, [pc, #476]	; (858 <init+0x324>)
     67a:	371e      	adds	r7, #30
     67c:	7800      	ldrb	r0, [r0, #0]
     67e:	4010      	ands	r0, r2
     680:	4338      	orrs	r0, r7
     682:	4f75      	ldr	r7, [pc, #468]	; (858 <init+0x324>)
     684:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     688:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68a:	4320      	orrs	r0, r4
     68c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     68e:	0018      	movs	r0, r3
     690:	3034      	adds	r0, #52	; 0x34
     692:	7801      	ldrb	r1, [r0, #0]
     694:	4011      	ands	r1, r2
     696:	4339      	orrs	r1, r7
     698:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     69a:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     69c:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     69e:	4321      	orrs	r1, r4
     6a0:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6a2:	4666      	mov	r6, ip
     6a4:	7801      	ldrb	r1, [r0, #0]
     6a6:	4391      	bics	r1, r2
     6a8:	4331      	orrs	r1, r6
     6aa:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ac:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b0:	4321      	orrs	r1, r4
     6b2:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b4:	7801      	ldrb	r1, [r0, #0]
     6b6:	001e      	movs	r6, r3
     6b8:	43a1      	bics	r1, r4
     6ba:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6bc:	2180      	movs	r1, #128	; 0x80
     6be:	9803      	ldr	r0, [sp, #12]
     6c0:	00c9      	lsls	r1, r1, #3
     6c2:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6c4:	0018      	movs	r0, r3
     6c6:	3098      	adds	r0, #152	; 0x98
     6c8:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	78a8      	ldrb	r0, [r5, #2]
     6cc:	3651      	adds	r6, #81	; 0x51
     6ce:	43a0      	bics	r0, r4
     6d0:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d2:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6d4:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d6:	7a29      	ldrb	r1, [r5, #8]
     6d8:	43a1      	bics	r1, r4
     6da:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6dc:	2180      	movs	r1, #128	; 0x80
     6de:	0249      	lsls	r1, r1, #9
     6e0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e2:	7831      	ldrb	r1, [r6, #0]
     6e4:	43a1      	bics	r1, r4
     6e6:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e8:	2180      	movs	r1, #128	; 0x80
     6ea:	0289      	lsls	r1, r1, #10
     6ec:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ee:	0019      	movs	r1, r3
     6f0:	3153      	adds	r1, #83	; 0x53
     6f2:	7808      	ldrb	r0, [r1, #0]
     6f4:	43a0      	bics	r0, r4
     6f6:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6f8:	7808      	ldrb	r0, [r1, #0]
     6fa:	4338      	orrs	r0, r7
     6fc:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fe:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     700:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     702:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     704:	0300      	lsls	r0, r0, #12
     706:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     708:	9703      	str	r7, [sp, #12]
     70a:	7838      	ldrb	r0, [r7, #0]
     70c:	2720      	movs	r7, #32
     70e:	4010      	ands	r0, r2
     710:	4338      	orrs	r0, r7
     712:	9f03      	ldr	r7, [sp, #12]
     714:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     716:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     718:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     71a:	4320      	orrs	r0, r4
     71c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     71e:	0018      	movs	r0, r3
     720:	3038      	adds	r0, #56	; 0x38
     722:	7801      	ldrb	r1, [r0, #0]
     724:	4011      	ands	r1, r2
     726:	4339      	orrs	r1, r7
     728:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     72a:	7831      	ldrb	r1, [r6, #0]
     72c:	4321      	orrs	r1, r4
     72e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     730:	4666      	mov	r6, ip
     732:	7801      	ldrb	r1, [r0, #0]
     734:	4391      	bics	r1, r2
     736:	4331      	orrs	r1, r6
     738:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     73a:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73c:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     73e:	4321      	orrs	r1, r4
     740:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	7981      	ldrb	r1, [r0, #6]
     744:	43a1      	bics	r1, r4
     746:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     748:	2180      	movs	r1, #128	; 0x80
     74a:	02c9      	lsls	r1, r1, #11
     74c:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     74e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     750:	7801      	ldrb	r1, [r0, #0]
     752:	43a1      	bics	r1, r4
     754:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     756:	2180      	movs	r1, #128	; 0x80
     758:	0149      	lsls	r1, r1, #5
     75a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75c:	7881      	ldrb	r1, [r0, #2]
     75e:	43a1      	bics	r1, r4
     760:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     762:	2180      	movs	r1, #128	; 0x80
     764:	01c9      	lsls	r1, r1, #7
     766:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     768:	0019      	movs	r1, r3
     76a:	314d      	adds	r1, #77	; 0x4d
     76c:	7808      	ldrb	r0, [r1, #0]
     76e:	43a0      	bics	r0, r4
     770:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     772:	7808      	ldrb	r0, [r1, #0]
     774:	4330      	orrs	r0, r6
     776:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     778:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77a:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     77c:	0189      	lsls	r1, r1, #6
     77e:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     780:	304f      	adds	r0, #79	; 0x4f
     782:	7801      	ldrb	r1, [r0, #0]
     784:	43a1      	bics	r1, r4
     786:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2180      	movs	r1, #128	; 0x80
     78a:	0209      	lsls	r1, r1, #8
     78c:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     78e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	0019      	movs	r1, r3
     792:	3155      	adds	r1, #85	; 0x55
     794:	7808      	ldrb	r0, [r1, #0]
     796:	43a0      	bics	r0, r4
     798:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     79a:	2080      	movs	r0, #128	; 0x80
     79c:	0380      	lsls	r0, r0, #14
     79e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     7a0:	2040      	movs	r0, #64	; 0x40
     7a2:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a4:	7848      	ldrb	r0, [r1, #1]
     7a6:	43a0      	bics	r0, r4
     7a8:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	2080      	movs	r0, #128	; 0x80
     7ac:	03c0      	lsls	r0, r0, #15
     7ae:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7b0:	0018      	movs	r0, r3
     7b2:	303b      	adds	r0, #59	; 0x3b
     7b4:	7805      	ldrb	r5, [r0, #0]
     7b6:	4395      	bics	r5, r2
     7b8:	4335      	orrs	r5, r6
     7ba:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7bc:	784d      	ldrb	r5, [r1, #1]
     7be:	4325      	orrs	r5, r4
     7c0:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c2:	788d      	ldrb	r5, [r1, #2]
     7c4:	43a5      	bics	r5, r4
     7c6:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7c8:	788d      	ldrb	r5, [r1, #2]
     7ca:	4335      	orrs	r5, r6
     7cc:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7ce:	2580      	movs	r5, #128	; 0x80
     7d0:	042d      	lsls	r5, r5, #16
     7d2:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     7d4:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d6:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     7d8:	4e20      	ldr	r6, [pc, #128]	; (85c <init+0x328>)
     7da:	401a      	ands	r2, r3
     7dc:	433a      	orrs	r2, r7
     7de:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e0:	788b      	ldrb	r3, [r1, #2]
     7e2:	2204      	movs	r2, #4
     7e4:	4323      	orrs	r3, r4
     7e6:	708b      	strb	r3, [r1, #2]
     7e8:	2000      	movs	r0, #0
     7ea:	2103      	movs	r1, #3
     7ec:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     7ee:	002b      	movs	r3, r5
     7f0:	002a      	movs	r2, r5
     7f2:	0028      	movs	r0, r5
     7f4:	4f1a      	ldr	r7, [pc, #104]	; (860 <init+0x32c>)
     7f6:	9501      	str	r5, [sp, #4]
     7f8:	9500      	str	r5, [sp, #0]
     7fa:	2103      	movs	r1, #3
     7fc:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     7fe:	0020      	movs	r0, r4
     800:	2204      	movs	r2, #4
     802:	2103      	movs	r1, #3
     804:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     806:	002b      	movs	r3, r5
     808:	002a      	movs	r2, r5
     80a:	0020      	movs	r0, r4
     80c:	9501      	str	r5, [sp, #4]
     80e:	9500      	str	r5, [sp, #0]
     810:	2103      	movs	r1, #3
     812:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     814:	2208      	movs	r2, #8
     816:	2104      	movs	r1, #4
     818:	2003      	movs	r0, #3
     81a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     81c:	0021      	movs	r1, r4
     81e:	002a      	movs	r2, r5
     820:	2003      	movs	r0, #3
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <init+0x330>)
     824:	4c10      	ldr	r4, [pc, #64]	; (868 <init+0x334>)
     826:	47a0      	blx	r4

    TC4Init();
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <init+0x338>)
     82a:	4798      	blx	r3
    TC5Init();
     82c:	4b10      	ldr	r3, [pc, #64]	; (870 <init+0x33c>)
     82e:	4798      	blx	r3
}
     830:	b005      	add	sp, #20
     832:	bdf0      	pop	{r4, r5, r6, r7, pc}
     834:	000001d5 	.word	0x000001d5
     838:	00000b45 	.word	0x00000b45
     83c:	00000bdd 	.word	0x00000bdd
     840:	00000cdd 	.word	0x00000cdd
     844:	000009a1 	.word	0x000009a1
     848:	00000e7d 	.word	0x00000e7d
     84c:	e000e100 	.word	0xe000e100
     850:	ff00ffff 	.word	0xff00ffff
     854:	41004400 	.word	0x41004400
     858:	41004435 	.word	0x41004435
     85c:	000013e1 	.word	0x000013e1
     860:	00001445 	.word	0x00001445
     864:	0000f972 	.word	0x0000f972
     868:	000014a9 	.word	0x000014a9
     86c:	00000dad 	.word	0x00000dad
     870:	00000e15 	.word	0x00000e15

00000874 <startUp>:

void startUp(Altimeter *my_altimeter) {
     874:	b5f0      	push	{r4, r5, r6, r7, lr}

    u32_t startupTime = millis();
     876:	4f16      	ldr	r7, [pc, #88]	; (8d0 <startUp+0x5c>)

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     878:	b085      	sub	sp, #20
     87a:	0004      	movs	r4, r0

    u32_t startupTime = millis();
     87c:	47b8      	blx	r7

    sampleTick(my_altimeter);
     87e:	4e15      	ldr	r6, [pc, #84]	; (8d4 <startUp+0x60>)
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {

    u32_t startupTime = millis();
     880:	9001      	str	r0, [sp, #4]

    sampleTick(my_altimeter);
     882:	0020      	movs	r0, r4
     884:	47b0      	blx	r6
    //flight(my_altimeter);

    delay_ms(1000);
     886:	20fa      	movs	r0, #250	; 0xfa
     888:	4d13      	ldr	r5, [pc, #76]	; (8d8 <startUp+0x64>)
     88a:	0080      	lsls	r0, r0, #2
     88c:	47a8      	blx	r5
    while((millis() - startupTime) < 10000) {
     88e:	47b8      	blx	r7
     890:	9b01      	ldr	r3, [sp, #4]
     892:	1ac0      	subs	r0, r0, r3
     894:	4b11      	ldr	r3, [pc, #68]	; (8dc <startUp+0x68>)
     896:	4298      	cmp	r0, r3
     898:	d813      	bhi.n	8c2 <startUp+0x4e>


        usartDataOut(USART3,'T');
     89a:	4b11      	ldr	r3, [pc, #68]	; (8e0 <startUp+0x6c>)
     89c:	2154      	movs	r1, #84	; 0x54
     89e:	2003      	movs	r0, #3
     8a0:	4798      	blx	r3
        delay_ms(40);
     8a2:	2028      	movs	r0, #40	; 0x28
     8a4:	47a8      	blx	r5
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     8a6:	4b0f      	ldr	r3, [pc, #60]	; (8e4 <startUp+0x70>)
     8a8:	7e1b      	ldrb	r3, [r3, #24]
     8aa:	075b      	lsls	r3, r3, #29
     8ac:	d5ef      	bpl.n	88e <startUp+0x1a>
            volatile data1 = usartDataIn(USART3);
     8ae:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <startUp+0x74>)
     8b0:	2003      	movs	r0, #3
     8b2:	4798      	blx	r3
     8b4:	9003      	str	r0, [sp, #12]
            if (data1 == 0x41) {
     8b6:	9b03      	ldr	r3, [sp, #12]
     8b8:	2b41      	cmp	r3, #65	; 0x41
     8ba:	d1e8      	bne.n	88e <startUp+0x1a>
                logSensors(my_altimeter);
     8bc:	0020      	movs	r0, r4
     8be:	4b0b      	ldr	r3, [pc, #44]	; (8ec <startUp+0x78>)
     8c0:	4798      	blx	r3
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     8c2:	0020      	movs	r0, r4
     8c4:	47b0      	blx	r6
    flight(my_altimeter);
     8c6:	0020      	movs	r0, r4
     8c8:	4b09      	ldr	r3, [pc, #36]	; (8f0 <startUp+0x7c>)
     8ca:	4798      	blx	r3



}
     8cc:	b005      	add	sp, #20
     8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8d0:	00000d79 	.word	0x00000d79
     8d4:	00001041 	.word	0x00001041
     8d8:	00000d2d 	.word	0x00000d2d
     8dc:	0000270f 	.word	0x0000270f
     8e0:	00001505 	.word	0x00001505
     8e4:	42001400 	.word	0x42001400
     8e8:	0000151d 	.word	0x0000151d
     8ec:	00000f79 	.word	0x00000f79
     8f0:	00000edd 	.word	0x00000edd

000008f4 <main>:



int main(void) {
     8f4:	b570      	push	{r4, r5, r6, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8f6:	2500      	movs	r5, #0

}



int main(void) {
     8f8:	b0a6      	sub	sp, #152	; 0x98

    init();
     8fa:	4b13      	ldr	r3, [pc, #76]	; (948 <main+0x54>)
     8fc:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8fe:	ac01      	add	r4, sp, #4

    initMS5803Barometer(&my_altimeter.myBarometer);
     900:	4b12      	ldr	r3, [pc, #72]	; (94c <main+0x58>)
     902:	a803      	add	r0, sp, #12
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     904:	7025      	strb	r5, [r4, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     906:	4798      	blx	r3
    IMUinit();
     908:	4b11      	ldr	r3, [pc, #68]	; (950 <main+0x5c>)
     90a:	4798      	blx	r3

    startUp(&my_altimeter);
     90c:	0020      	movs	r0, r4
     90e:	4b11      	ldr	r3, [pc, #68]	; (954 <main+0x60>)
     910:	4798      	blx	r3


    u32_t time = 0;
    u32_t lastTime = 0;
    my_altimeter.currentAddress = 0x00;
     912:	6065      	str	r5, [r4, #4]




    while (1) {
        time = millis();
     914:	4b10      	ldr	r3, [pc, #64]	; (958 <main+0x64>)
     916:	4798      	blx	r3



        if (takeSample) {
     918:	4e10      	ldr	r6, [pc, #64]	; (95c <main+0x68>)
     91a:	7833      	ldrb	r3, [r6, #0]
     91c:	2b00      	cmp	r3, #0
     91e:	d009      	beq.n	934 <main+0x40>
            sampleTick(&my_altimeter);
     920:	0020      	movs	r0, r4
     922:	4b0f      	ldr	r3, [pc, #60]	; (960 <main+0x6c>)
     924:	4798      	blx	r3
            flight(&my_altimeter);
     926:	0020      	movs	r0, r4
     928:	4b0e      	ldr	r3, [pc, #56]	; (964 <main+0x70>)
     92a:	4798      	blx	r3
            takeSample = false;


            //logSensors(&my_altimeter);
            delay_ms(50);
     92c:	2032      	movs	r0, #50	; 0x32
     92e:	4b0e      	ldr	r3, [pc, #56]	; (968 <main+0x74>)


        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     930:	7035      	strb	r5, [r6, #0]


            //logSensors(&my_altimeter);
            delay_ms(50);
     932:	4798      	blx	r3

        }


        if (writeLog) {
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <main+0x78>)
     936:	781a      	ldrb	r2, [r3, #0]
     938:	2a00      	cmp	r2, #0
     93a:	d0eb      	beq.n	914 <main+0x20>
            writeLog = false;
     93c:	701d      	strb	r5, [r3, #0]

            logSensors(&my_altimeter);
     93e:	0020      	movs	r0, r4
     940:	4b0b      	ldr	r3, [pc, #44]	; (970 <main+0x7c>)
     942:	4798      	blx	r3
     944:	e7e6      	b.n	914 <main+0x20>
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000535 	.word	0x00000535
     94c:	000004a5 	.word	0x000004a5
     950:	00000975 	.word	0x00000975
     954:	00000875 	.word	0x00000875
     958:	00000d79 	.word	0x00000d79
     95c:	20000462 	.word	0x20000462
     960:	00001041 	.word	0x00001041
     964:	00000edd 	.word	0x00000edd
     968:	00000d2d 	.word	0x00000d2d
     96c:	20000460 	.word	0x20000460
     970:	00000f79 	.word	0x00000f79

00000974 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     974:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     976:	4c08      	ldr	r4, [pc, #32]	; (998 <IMUinit+0x24>)
     978:	2580      	movs	r5, #128	; 0x80
     97a:	0023      	movs	r3, r4
     97c:	00ed      	lsls	r5, r5, #3
     97e:	3394      	adds	r3, #148	; 0x94
     980:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     982:	4e06      	ldr	r6, [pc, #24]	; (99c <IMUinit+0x28>)
     984:	210f      	movs	r1, #15
     986:	2000      	movs	r0, #0
     988:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     98a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     98c:	210c      	movs	r1, #12
     98e:	2000      	movs	r0, #0
     990:	47b0      	blx	r6
     992:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     994:	bd70      	pop	{r4, r5, r6, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	41004400 	.word	0x41004400
     99c:	000014ed 	.word	0x000014ed

000009a0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     9a0:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     9a2:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     9a4:	4a10      	ldr	r2, [pc, #64]	; (9e8 <adcInit+0x48>)
     9a6:	0249      	lsls	r1, r1, #9
     9a8:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     9aa:	4810      	ldr	r0, [pc, #64]	; (9ec <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     9ac:	430b      	orrs	r3, r1
     9ae:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     9b0:	23e0      	movs	r3, #224	; 0xe0
     9b2:	490f      	ldr	r1, [pc, #60]	; (9f0 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     9b4:	4a0f      	ldr	r2, [pc, #60]	; (9f4 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     9b6:	00db      	lsls	r3, r3, #3
     9b8:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     9ba:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     9bc:	4a0e      	ldr	r2, [pc, #56]	; (9f8 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     9be:	6812      	ldr	r2, [r2, #0]
     9c0:	0150      	lsls	r0, r2, #5
     9c2:	4018      	ands	r0, r3
     9c4:	4b0d      	ldr	r3, [pc, #52]	; (9fc <adcInit+0x5c>)
     9c6:	0154      	lsls	r4, r2, #5
     9c8:	681a      	ldr	r2, [r3, #0]
     9ca:	0ed3      	lsrs	r3, r2, #27
     9cc:	4323      	orrs	r3, r4
     9ce:	b2da      	uxtb	r2, r3
     9d0:	0003      	movs	r3, r0
     9d2:	4313      	orrs	r3, r2
     9d4:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     9d6:	2302      	movs	r3, #2
     9d8:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     9da:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     9dc:	7e4b      	ldrb	r3, [r1, #25]
     9de:	b25b      	sxtb	r3, r3
     9e0:	2b00      	cmp	r3, #0
     9e2:	dbfb      	blt.n	9dc <adcInit+0x3c>
}
     9e4:	bd10      	pop	{r4, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	40000400 	.word	0x40000400
     9ec:	0000401e 	.word	0x0000401e
     9f0:	42004000 	.word	0x42004000
     9f4:	40000c00 	.word	0x40000c00
     9f8:	00806024 	.word	0x00806024
     9fc:	00806020 	.word	0x00806020

00000a00 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     a00:	2202      	movs	r2, #2
     a02:	4b05      	ldr	r3, [pc, #20]	; (a18 <adcSample+0x18>)
     a04:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     a06:	3a01      	subs	r2, #1
     a08:	7e19      	ldrb	r1, [r3, #24]
     a0a:	4211      	tst	r1, r2
     a0c:	d0fc      	beq.n	a08 <adcSample+0x8>
    return ADC->RESULT.reg;
     a0e:	4b02      	ldr	r3, [pc, #8]	; (a18 <adcSample+0x18>)
     a10:	8b58      	ldrh	r0, [r3, #26]
     a12:	b280      	uxth	r0, r0
}
     a14:	4770      	bx	lr
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	42004000 	.word	0x42004000

00000a1c <adc_read>:


u16_t adc_read(Pin p) {
     a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     a1e:	2501      	movs	r5, #1
     a20:	0c02      	lsrs	r2, r0, #16
     a22:	b2d4      	uxtb	r4, r2
     a24:	9000      	str	r0, [sp, #0]
     a26:	0e00      	lsrs	r0, r0, #24
     a28:	9101      	str	r1, [sp, #4]
     a2a:	0842      	lsrs	r2, r0, #1
     a2c:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     a2e:	4911      	ldr	r1, [pc, #68]	; (a74 <adc_read+0x58>)
     a30:	18d2      	adds	r2, r2, r3
     a32:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     a34:	4228      	tst	r0, r5
     a36:	d005      	beq.n	a44 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     a38:	210f      	movs	r1, #15
     a3a:	7814      	ldrb	r4, [r2, #0]
     a3c:	4021      	ands	r1, r4
     a3e:	2410      	movs	r4, #16
     a40:	4321      	orrs	r1, r4
     a42:	e003      	b.n	a4c <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     a44:	240f      	movs	r4, #15
     a46:	7811      	ldrb	r1, [r2, #0]
     a48:	43a1      	bics	r1, r4
     a4a:	4329      	orrs	r1, r5
     a4c:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a4e:	2101      	movs	r1, #1
     a50:	4a09      	ldr	r2, [pc, #36]	; (a78 <adc_read+0x5c>)
     a52:	18c3      	adds	r3, r0, r3
     a54:	189b      	adds	r3, r3, r2
     a56:	781a      	ldrb	r2, [r3, #0]
     a58:	430a      	orrs	r2, r1
     a5a:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     a5c:	466b      	mov	r3, sp
     a5e:	791a      	ldrb	r2, [r3, #4]
     a60:	231f      	movs	r3, #31
     a62:	4013      	ands	r3, r2
     a64:	22c0      	movs	r2, #192	; 0xc0
     a66:	0152      	lsls	r2, r2, #5
     a68:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     a6a:	4a04      	ldr	r2, [pc, #16]	; (a7c <adc_read+0x60>)
     a6c:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     a6e:	4b04      	ldr	r3, [pc, #16]	; (a80 <adc_read+0x64>)
     a70:	4798      	blx	r3
     a72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     a74:	41004430 	.word	0x41004430
     a78:	41004440 	.word	0x41004440
     a7c:	42004000 	.word	0x42004000
     a80:	00000a01 	.word	0x00000a01

00000a84 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     a84:	0c01      	lsrs	r1, r0, #16
     a86:	0c13      	lsrs	r3, r2, #16
     a88:	b5f0      	push	{r4, r5, r6, r7, lr}
     a8a:	b2cd      	uxtb	r5, r1
     a8c:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a8e:	2301      	movs	r3, #1
     a90:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a92:	0e12      	lsrs	r2, r2, #24
     a94:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a96:	0e00      	lsrs	r0, r0, #24
     a98:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a9a:	001a      	movs	r2, r3
     a9c:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a9e:	0030      	movs	r0, r6
     aa0:	4e11      	ldr	r6, [pc, #68]	; (ae8 <byteOut+0x64>)
     aa2:	01c9      	lsls	r1, r1, #7
     aa4:	b087      	sub	sp, #28
     aa6:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aa8:	4e10      	ldr	r6, [pc, #64]	; (aec <byteOut+0x68>)
     aaa:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     aac:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aae:	19ae      	adds	r6, r5, r6
     ab0:	7824      	ldrb	r4, [r4, #0]
     ab2:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ab4:	4e0c      	ldr	r6, [pc, #48]	; (ae8 <byteOut+0x64>)
     ab6:	46b4      	mov	ip, r6
     ab8:	44ac      	add	ip, r5
     aba:	4666      	mov	r6, ip
     abc:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     abe:	b266      	sxtb	r6, r4
     ac0:	2e00      	cmp	r6, #0
     ac2:	da05      	bge.n	ad0 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ac4:	4e09      	ldr	r6, [pc, #36]	; (aec <byteOut+0x68>)
     ac6:	46b4      	mov	ip, r6
     ac8:	448c      	add	ip, r1
     aca:	4666      	mov	r6, ip
     acc:	6032      	str	r2, [r6, #0]
     ace:	e000      	b.n	ad2 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ad0:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ad2:	9e01      	ldr	r6, [sp, #4]
     ad4:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     ad6:	0064      	lsls	r4, r4, #1
     ad8:	b2db      	uxtb	r3, r3
     ada:	6030      	str	r0, [r6, #0]
     adc:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     ade:	2b00      	cmp	r3, #0
     ae0:	d1e8      	bne.n	ab4 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     ae2:	b007      	add	sp, #28
     ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	41004414 	.word	0x41004414
     aec:	41004418 	.word	0x41004418

00000af0 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     af0:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     af2:	2501      	movs	r5, #1
     af4:	b085      	sub	sp, #20
     af6:	9103      	str	r1, [sp, #12]
     af8:	0011      	movs	r1, r2
     afa:	0c06      	lsrs	r6, r0, #16
     afc:	9301      	str	r3, [sp, #4]
     afe:	b2f3      	uxtb	r3, r6
     b00:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b02:	0e09      	lsrs	r1, r1, #24
     b04:	0c14      	lsrs	r4, r2, #16
     b06:	9002      	str	r0, [sp, #8]
     b08:	9200      	str	r2, [sp, #0]
     b0a:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b0c:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b0e:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     b10:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b12:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b14:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b16:	4c0a      	ldr	r4, [pc, #40]	; (b40 <byteIn+0x50>)
     b18:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b1a:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b1c:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b1e:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b20:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b22:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     b24:	0040      	lsls	r0, r0, #1
     b26:	402c      	ands	r4, r5
     b28:	1e67      	subs	r7, r4, #1
     b2a:	41bc      	sbcs	r4, r7
     b2c:	3901      	subs	r1, #1
     b2e:	4304      	orrs	r4, r0
     b30:	b2c9      	uxtb	r1, r1
     b32:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b34:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     b36:	2900      	cmp	r1, #0
     b38:	d1f2      	bne.n	b20 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     b3a:	b005      	add	sp, #20
     b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	41004400 	.word	0x41004400

00000b44 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     b44:	23c2      	movs	r3, #194	; 0xc2
     b46:	4a1a      	ldr	r2, [pc, #104]	; (bb0 <GclkInit+0x6c>)
     b48:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     b4a:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     b4c:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     b4e:	2302      	movs	r3, #2
     b50:	4818      	ldr	r0, [pc, #96]	; (bb4 <GclkInit+0x70>)
     b52:	6841      	ldr	r1, [r0, #4]
     b54:	4319      	orrs	r1, r3
     b56:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     b58:	4917      	ldr	r1, [pc, #92]	; (bb8 <GclkInit+0x74>)
     b5a:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     b5c:	68d1      	ldr	r1, [r2, #12]
     b5e:	4219      	tst	r1, r3
     b60:	d0fc      	beq.n	b5c <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     b62:	4b16      	ldr	r3, [pc, #88]	; (bbc <GclkInit+0x78>)
     b64:	6819      	ldr	r1, [r3, #0]
     b66:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     b68:	293f      	cmp	r1, #63	; 0x3f
     b6a:	d100      	bne.n	b6e <GclkInit+0x2a>
        coarse = 0x1f;
     b6c:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     b6e:	4b14      	ldr	r3, [pc, #80]	; (bc0 <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     b70:	4814      	ldr	r0, [pc, #80]	; (bc4 <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	059b      	lsls	r3, r3, #22
     b76:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     b78:	4283      	cmp	r3, r0
     b7a:	d100      	bne.n	b7e <GclkInit+0x3a>
        fine = 0x1ff;
     b7c:	4b12      	ldr	r3, [pc, #72]	; (bc8 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     b7e:	4813      	ldr	r0, [pc, #76]	; (bcc <GclkInit+0x88>)
     b80:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     b82:	2010      	movs	r0, #16
     b84:	68d4      	ldr	r4, [r2, #12]
     b86:	4204      	tst	r4, r0
     b88:	d0fc      	beq.n	b84 <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     b8a:	0289      	lsls	r1, r1, #10
     b8c:	430b      	orrs	r3, r1
     b8e:	4908      	ldr	r1, [pc, #32]	; (bb0 <GclkInit+0x6c>)
     b90:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     b92:	2310      	movs	r3, #16
     b94:	68d1      	ldr	r1, [r2, #12]
     b96:	4219      	tst	r1, r3
     b98:	d0fc      	beq.n	b94 <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     b9a:	4a0d      	ldr	r2, [pc, #52]	; (bd0 <GclkInit+0x8c>)
     b9c:	4b04      	ldr	r3, [pc, #16]	; (bb0 <GclkInit+0x6c>)
     b9e:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     ba0:	2280      	movs	r2, #128	; 0x80
     ba2:	4b0c      	ldr	r3, [pc, #48]	; (bd4 <GclkInit+0x90>)
     ba4:	0052      	lsls	r2, r2, #1
     ba6:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     ba8:	4a0b      	ldr	r2, [pc, #44]	; (bd8 <GclkInit+0x94>)
     baa:	605a      	str	r2, [r3, #4]
}
     bac:	bd10      	pop	{r4, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	40000800 	.word	0x40000800
     bb4:	41004000 	.word	0x41004000
     bb8:	0000060e 	.word	0x0000060e
     bbc:	00806024 	.word	0x00806024
     bc0:	00806028 	.word	0x00806028
     bc4:	000003ff 	.word	0x000003ff
     bc8:	000001ff 	.word	0x000001ff
     bcc:	00000522 	.word	0x00000522
     bd0:	000005a2 	.word	0x000005a2
     bd4:	40000c00 	.word	0x40000c00
     bd8:	00010700 	.word	0x00010700

00000bdc <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     bdc:	4b27      	ldr	r3, [pc, #156]	; (c7c <RtcInit+0xa0>)
     bde:	4a28      	ldr	r2, [pc, #160]	; (c80 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     be0:	4828      	ldr	r0, [pc, #160]	; (c84 <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     be2:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     be4:	4a28      	ldr	r2, [pc, #160]	; (c88 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     be6:	6999      	ldr	r1, [r3, #24]
     be8:	6812      	ldr	r2, [r2, #0]
     bea:	4001      	ands	r1, r0
     bec:	04d2      	lsls	r2, r2, #19
     bee:	0e52      	lsrs	r2, r2, #25
     bf0:	0412      	lsls	r2, r2, #16
     bf2:	4311      	orrs	r1, r2
     bf4:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     bf6:	4925      	ldr	r1, [pc, #148]	; (c8c <RtcInit+0xb0>)
     bf8:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     bfa:	6999      	ldr	r1, [r3, #24]
     bfc:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     bfe:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     c00:	4302      	orrs	r2, r0
     c02:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     c04:	699a      	ldr	r2, [r3, #24]
     c06:	430a      	orrs	r2, r1
     c08:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     c0a:	2204      	movs	r2, #4
     c0c:	68d9      	ldr	r1, [r3, #12]
     c0e:	4211      	tst	r1, r2
     c10:	d0fc      	beq.n	c0c <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     c12:	2281      	movs	r2, #129	; 0x81
     c14:	4b1e      	ldr	r3, [pc, #120]	; (c90 <RtcInit+0xb4>)
     c16:	0052      	lsls	r2, r2, #1
     c18:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     c1a:	4a1e      	ldr	r2, [pc, #120]	; (c94 <RtcInit+0xb8>)
     c1c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     c1e:	785a      	ldrb	r2, [r3, #1]
     c20:	b252      	sxtb	r2, r2
     c22:	2a00      	cmp	r2, #0
     c24:	dbfb      	blt.n	c1e <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     c26:	4a1c      	ldr	r2, [pc, #112]	; (c98 <RtcInit+0xbc>)
     c28:	4b19      	ldr	r3, [pc, #100]	; (c90 <RtcInit+0xb4>)
     c2a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     c2c:	2204      	movs	r2, #4
     c2e:	4b1b      	ldr	r3, [pc, #108]	; (c9c <RtcInit+0xc0>)
     c30:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     c32:	7a9a      	ldrb	r2, [r3, #10]
     c34:	4919      	ldr	r1, [pc, #100]	; (c9c <RtcInit+0xc0>)
     c36:	09d2      	lsrs	r2, r2, #7
     c38:	d1fb      	bne.n	c32 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     c3a:	20a0      	movs	r0, #160	; 0xa0
     c3c:	880a      	ldrh	r2, [r1, #0]
     c3e:	00c0      	lsls	r0, r0, #3
     c40:	4302      	orrs	r2, r0
     c42:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     c44:	7a9a      	ldrb	r2, [r3, #10]
     c46:	09d2      	lsrs	r2, r2, #7
     c48:	d1fc      	bne.n	c44 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     c4a:	4915      	ldr	r1, [pc, #84]	; (ca0 <RtcInit+0xc4>)
     c4c:	4a13      	ldr	r2, [pc, #76]	; (c9c <RtcInit+0xc0>)
     c4e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     c50:	7a99      	ldrb	r1, [r3, #10]
     c52:	4a12      	ldr	r2, [pc, #72]	; (c9c <RtcInit+0xc0>)
     c54:	09c9      	lsrs	r1, r1, #7
     c56:	d1fb      	bne.n	c50 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     c58:	8851      	ldrh	r1, [r2, #2]
     c5a:	4812      	ldr	r0, [pc, #72]	; (ca4 <RtcInit+0xc8>)
     c5c:	4301      	orrs	r1, r0
     c5e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     c60:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     c62:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     c64:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     c66:	8811      	ldrh	r1, [r2, #0]
     c68:	4301      	orrs	r1, r0
     c6a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     c6c:	7a9a      	ldrb	r2, [r3, #10]
     c6e:	09d2      	lsrs	r2, r2, #7
     c70:	d1fc      	bne.n	c6c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <RtcInit+0xcc>)
     c74:	3208      	adds	r2, #8
     c76:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     c78:	4770      	bx	lr
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	40000800 	.word	0x40000800
     c80:	00000606 	.word	0x00000606
     c84:	ff80ffff 	.word	0xff80ffff
     c88:	00806024 	.word	0x00806024
     c8c:	00000604 	.word	0x00000604
     c90:	40000c00 	.word	0x40000c00
     c94:	00230002 	.word	0x00230002
     c98:	00004204 	.word	0x00004204
     c9c:	40001400 	.word	0x40001400
     ca0:	000003e6 	.word	0x000003e6
     ca4:	00004010 	.word	0x00004010
     ca8:	e000e100 	.word	0xe000e100

00000cac <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     cac:	230f      	movs	r3, #15
     cae:	4018      	ands	r0, r3
     cb0:	4b08      	ldr	r3, [pc, #32]	; (cd4 <gclkEnable+0x28>)
     cb2:	0212      	lsls	r2, r2, #8
     cb4:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     cb6:	23f8      	movs	r3, #248	; 0xf8
     cb8:	0209      	lsls	r1, r1, #8
     cba:	015b      	lsls	r3, r3, #5
     cbc:	4019      	ands	r1, r3
     cbe:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     cc0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     cc2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     cc4:	4c04      	ldr	r4, [pc, #16]	; (cd8 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     cc6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     cc8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     cca:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ccc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     cce:	6060      	str	r0, [r4, #4]
}
     cd0:	bd10      	pop	{r4, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00ffff00 	.word	0x00ffff00
     cd8:	40000c00 	.word	0x40000c00

00000cdc <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     cdc:	4b04      	ldr	r3, [pc, #16]	; (cf0 <delayInit+0x14>)
     cde:	4a05      	ldr	r2, [pc, #20]	; (cf4 <delayInit+0x18>)
     ce0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     ce2:	2230      	movs	r2, #48	; 0x30
     ce4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <delayInit+0x1c>)
     ce8:	3a2b      	subs	r2, #43	; 0x2b
     cea:	601a      	str	r2, [r3, #0]
}
     cec:	4770      	bx	lr
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	20000004 	.word	0x20000004
     cf4:	0000bb80 	.word	0x0000bb80
     cf8:	e000e010 	.word	0xe000e010

00000cfc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     cfc:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     cfe:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     d00:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     d02:	4b08      	ldr	r3, [pc, #32]	; (d24 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     d04:	4a08      	ldr	r2, [pc, #32]	; (d28 <delay_us+0x2c>)
     d06:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d08:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     d0a:	3801      	subs	r0, #1
     d0c:	d308      	bcc.n	d20 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     d0e:	2b00      	cmp	r3, #0
     d10:	d0fb      	beq.n	d0a <delay_us+0xe>
     d12:	4e05      	ldr	r6, [pc, #20]	; (d28 <delay_us+0x2c>)
        SysTick->LOAD = n;
     d14:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     d16:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d18:	6835      	ldr	r5, [r6, #0]
     d1a:	4225      	tst	r5, r4
     d1c:	d0fc      	beq.n	d18 <delay_us+0x1c>
     d1e:	e7f4      	b.n	d0a <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     d20:	bd70      	pop	{r4, r5, r6, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	20000004 	.word	0x20000004
     d28:	e000e010 	.word	0xe000e010

00000d2c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     d2c:	b570      	push	{r4, r5, r6, lr}
     d2e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     d30:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     d32:	4b08      	ldr	r3, [pc, #32]	; (d54 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     d34:	4a08      	ldr	r2, [pc, #32]	; (d58 <delay_ms+0x2c>)
     d36:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d38:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     d3a:	3801      	subs	r0, #1
     d3c:	d308      	bcc.n	d50 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     d3e:	2b00      	cmp	r3, #0
     d40:	d0fb      	beq.n	d3a <delay_ms+0xe>
     d42:	4e05      	ldr	r6, [pc, #20]	; (d58 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     d44:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     d46:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d48:	6835      	ldr	r5, [r6, #0]
     d4a:	4225      	tst	r5, r4
     d4c:	d0fc      	beq.n	d48 <delay_ms+0x1c>
     d4e:	e7f4      	b.n	d3a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	20000004 	.word	0x20000004
     d58:	e000e010 	.word	0xe000e010

00000d5c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     d5c:	21fa      	movs	r1, #250	; 0xfa
     d5e:	4a04      	ldr	r2, [pc, #16]	; (d70 <RTC_Handler+0x14>)
     d60:	0089      	lsls	r1, r1, #2
     d62:	6813      	ldr	r3, [r2, #0]
     d64:	185b      	adds	r3, r3, r1
     d66:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     d68:	22ff      	movs	r2, #255	; 0xff
     d6a:	4b02      	ldr	r3, [pc, #8]	; (d74 <RTC_Handler+0x18>)
     d6c:	721a      	strb	r2, [r3, #8]
}
     d6e:	4770      	bx	lr
     d70:	2000045c 	.word	0x2000045c
     d74:	40001400 	.word	0x40001400

00000d78 <millis>:

uint32_t millis(void) {
     d78:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     d7a:	f3ef 8110 	mrs	r1, PRIMASK
     d7e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     d80:	4a08      	ldr	r2, [pc, #32]	; (da4 <millis+0x2c>)
     d82:	4d09      	ldr	r5, [pc, #36]	; (da8 <millis+0x30>)
     d84:	8a10      	ldrh	r0, [r2, #16]
     d86:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     d88:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     d8a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     d8c:	09e4      	lsrs	r4, r4, #7
     d8e:	d004      	beq.n	d9a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     d90:	8a13      	ldrh	r3, [r2, #16]
     d92:	22fa      	movs	r2, #250	; 0xfa
     d94:	6828      	ldr	r0, [r5, #0]
     d96:	0092      	lsls	r2, r2, #2
     d98:	1880      	adds	r0, r0, r2
     d9a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     d9c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     da0:	bd30      	pop	{r4, r5, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	40001400 	.word	0x40001400
     da8:	2000045c 	.word	0x2000045c

00000dac <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     dac:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     dae:	4a0d      	ldr	r2, [pc, #52]	; (de4 <TC4Init+0x38>)
     db0:	4b0d      	ldr	r3, [pc, #52]	; (de8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     db2:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     db4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     db6:	4a0d      	ldr	r2, [pc, #52]	; (dec <TC4Init+0x40>)
     db8:	6a13      	ldr	r3, [r2, #32]
     dba:	430b      	orrs	r3, r1
     dbc:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     dbe:	4b0c      	ldr	r3, [pc, #48]	; (df0 <TC4Init+0x44>)
     dc0:	4a0c      	ldr	r2, [pc, #48]	; (df4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     dc2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     dc4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     dc6:	2241      	movs	r2, #65	; 0x41
     dc8:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     dca:	3a40      	subs	r2, #64	; 0x40
     dcc:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     dce:	32ff      	adds	r2, #255	; 0xff
     dd0:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     dd2:	881a      	ldrh	r2, [r3, #0]
     dd4:	430a      	orrs	r2, r1
     dd6:	801a      	strh	r2, [r3, #0]
     dd8:	2280      	movs	r2, #128	; 0x80
     dda:	4b07      	ldr	r3, [pc, #28]	; (df8 <TC4Init+0x4c>)
     ddc:	0312      	lsls	r2, r2, #12
     dde:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     de0:	4770      	bx	lr
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	0000421c 	.word	0x0000421c
     de8:	40000c00 	.word	0x40000c00
     dec:	40000400 	.word	0x40000400
     df0:	42003000 	.word	0x42003000
     df4:	00000904 	.word	0x00000904
     df8:	e000e100 	.word	0xe000e100

00000dfc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     dfc:	22ff      	movs	r2, #255	; 0xff
     dfe:	4b03      	ldr	r3, [pc, #12]	; (e0c <TC4_Handler+0x10>)
     e00:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     e02:	4b03      	ldr	r3, [pc, #12]	; (e10 <TC4_Handler+0x14>)
     e04:	3afe      	subs	r2, #254	; 0xfe
     e06:	701a      	strb	r2, [r3, #0]
}
     e08:	4770      	bx	lr
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	42003000 	.word	0x42003000
     e10:	20000462 	.word	0x20000462

00000e14 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     e14:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     e16:	4a0d      	ldr	r2, [pc, #52]	; (e4c <TC5Init+0x38>)
     e18:	4b0d      	ldr	r3, [pc, #52]	; (e50 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     e1a:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     e1c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     e1e:	4a0d      	ldr	r2, [pc, #52]	; (e54 <TC5Init+0x40>)
     e20:	6a13      	ldr	r3, [r2, #32]
     e22:	430b      	orrs	r3, r1
     e24:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e26:	4b0c      	ldr	r3, [pc, #48]	; (e58 <TC5Init+0x44>)
     e28:	4a0c      	ldr	r2, [pc, #48]	; (e5c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e2a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e2c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
     e2e:	2280      	movs	r2, #128	; 0x80
     e30:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e32:	3a7f      	subs	r2, #127	; 0x7f
     e34:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e36:	32ff      	adds	r2, #255	; 0xff
     e38:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e3a:	881a      	ldrh	r2, [r3, #0]
     e3c:	430a      	orrs	r2, r1
     e3e:	801a      	strh	r2, [r3, #0]
     e40:	2280      	movs	r2, #128	; 0x80
     e42:	4b07      	ldr	r3, [pc, #28]	; (e60 <TC5Init+0x4c>)
     e44:	0352      	lsls	r2, r2, #13
     e46:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     e48:	4770      	bx	lr
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	0000421c 	.word	0x0000421c
     e50:	40000c00 	.word	0x40000c00
     e54:	40000400 	.word	0x40000400
     e58:	42003400 	.word	0x42003400
     e5c:	00000e04 	.word	0x00000e04
     e60:	e000e100 	.word	0xe000e100

00000e64 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     e64:	22ff      	movs	r2, #255	; 0xff
     e66:	4b03      	ldr	r3, [pc, #12]	; (e74 <TC5_Handler+0x10>)
     e68:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     e6a:	4b03      	ldr	r3, [pc, #12]	; (e78 <TC5_Handler+0x14>)
     e6c:	3afe      	subs	r2, #254	; 0xfe
     e6e:	701a      	strb	r2, [r3, #0]
     e70:	4770      	bx	lr
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	42003400 	.word	0x42003400
     e78:	20000460 	.word	0x20000460

00000e7c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     e7e:	27c0      	movs	r7, #192	; 0xc0
     e80:	4d10      	ldr	r5, [pc, #64]	; (ec4 <dmaInit+0x48>)
     e82:	003a      	movs	r2, r7
     e84:	4e10      	ldr	r6, [pc, #64]	; (ec8 <dmaInit+0x4c>)
     e86:	0028      	movs	r0, r5
     e88:	2100      	movs	r1, #0
     e8a:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     e8c:	4c0f      	ldr	r4, [pc, #60]	; (ecc <dmaInit+0x50>)
     e8e:	003a      	movs	r2, r7
     e90:	2100      	movs	r1, #0
     e92:	0020      	movs	r0, r4
     e94:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     e96:	2120      	movs	r1, #32
     e98:	4b0d      	ldr	r3, [pc, #52]	; (ed0 <dmaInit+0x54>)
     e9a:	695a      	ldr	r2, [r3, #20]
     e9c:	430a      	orrs	r2, r1
     e9e:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     ea0:	69da      	ldr	r2, [r3, #28]
     ea2:	3910      	subs	r1, #16
     ea4:	430a      	orrs	r2, r1
     ea6:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     ea8:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <dmaInit+0x58>)
     eaa:	390e      	subs	r1, #14
     eac:	881a      	ldrh	r2, [r3, #0]
     eae:	438a      	bics	r2, r1
     eb0:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     eb2:	881a      	ldrh	r2, [r3, #0]
     eb4:	3901      	subs	r1, #1
     eb6:	430a      	orrs	r2, r1
     eb8:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     eba:	4a07      	ldr	r2, [pc, #28]	; (ed8 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     ebc:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     ebe:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     ec0:	801a      	strh	r2, [r3, #0]
}
     ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ec4:	20000530 	.word	0x20000530
     ec8:	00002409 	.word	0x00002409
     ecc:	20000470 	.word	0x20000470
     ed0:	40000400 	.word	0x40000400
     ed4:	41004800 	.word	0x41004800
     ed8:	00000f02 	.word	0x00000f02

00000edc <flight>:

void flight(Altimeter *my_altimeter) {



    switch(my_altimeter->myFlightState) {
     edc:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     ee0:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
     ee2:	2b00      	cmp	r3, #0
     ee4:	d13b      	bne.n	f5e <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     ee6:	4d1e      	ldr	r5, [pc, #120]	; (f60 <flight+0x84>)
     ee8:	6c00      	ldr	r0, [r0, #64]	; 0x40
     eea:	47a8      	blx	r5
     eec:	4e1d      	ldr	r6, [pc, #116]	; (f64 <flight+0x88>)
     eee:	2200      	movs	r2, #0
     ef0:	4b1d      	ldr	r3, [pc, #116]	; (f68 <flight+0x8c>)
     ef2:	47b0      	blx	r6
     ef4:	9000      	str	r0, [sp, #0]
     ef6:	9101      	str	r1, [sp, #4]
     ef8:	6d20      	ldr	r0, [r4, #80]	; 0x50
     efa:	47a8      	blx	r5
     efc:	2200      	movs	r2, #0
     efe:	4b1a      	ldr	r3, [pc, #104]	; (f68 <flight+0x8c>)
     f00:	47b0      	blx	r6
     f02:	4e1a      	ldr	r6, [pc, #104]	; (f6c <flight+0x90>)
     f04:	0002      	movs	r2, r0
     f06:	000b      	movs	r3, r1
     f08:	9800      	ldr	r0, [sp, #0]
     f0a:	9901      	ldr	r1, [sp, #4]
     f0c:	47b0      	blx	r6
     f0e:	4b18      	ldr	r3, [pc, #96]	; (f70 <flight+0x94>)
     f10:	4798      	blx	r3
     f12:	6420      	str	r0, [r4, #64]	; 0x40

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
     f14:	6b60      	ldr	r0, [r4, #52]	; 0x34
     f16:	47a8      	blx	r5
     f18:	2200      	movs	r2, #0
     f1a:	4b13      	ldr	r3, [pc, #76]	; (f68 <flight+0x8c>)
     f1c:	4e11      	ldr	r6, [pc, #68]	; (f64 <flight+0x88>)
     f1e:	47b0      	blx	r6
     f20:	0006      	movs	r6, r0
     f22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     f24:	000f      	movs	r7, r1
     f26:	47a8      	blx	r5
     f28:	4d0e      	ldr	r5, [pc, #56]	; (f64 <flight+0x88>)
     f2a:	2200      	movs	r2, #0
     f2c:	4b0e      	ldr	r3, [pc, #56]	; (f68 <flight+0x8c>)
     f2e:	47a8      	blx	r5
     f30:	4d0e      	ldr	r5, [pc, #56]	; (f6c <flight+0x90>)
     f32:	0002      	movs	r2, r0
     f34:	000b      	movs	r3, r1
     f36:	0030      	movs	r0, r6
     f38:	0039      	movs	r1, r7
     f3a:	47a8      	blx	r5
     f3c:	4b0c      	ldr	r3, [pc, #48]	; (f70 <flight+0x94>)
     f3e:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     f40:	4d0c      	ldr	r5, [pc, #48]	; (f74 <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
     f42:	6360      	str	r0, [r4, #52]	; 0x34

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     f44:	47a8      	blx	r5
     f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     f48:	1ac0      	subs	r0, r0, r3
     f4a:	23fa      	movs	r3, #250	; 0xfa
     f4c:	00db      	lsls	r3, r3, #3
     f4e:	4298      	cmp	r0, r3
     f50:	d905      	bls.n	f5e <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
     f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
     f54:	6323      	str	r3, [r4, #48]	; 0x30
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
     f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
     f58:	63e3      	str	r3, [r4, #60]	; 0x3c
            my_altimeter->myIMU.offsetBufferTime = millis();
     f5a:	47a8      	blx	r5
     f5c:	63a0      	str	r0, [r4, #56]	; 0x38

        break;
    }


     f5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     f60:	000021c5 	.word	0x000021c5
     f64:	00001bdd 	.word	0x00001bdd
     f68:	3fe00000 	.word	0x3fe00000
     f6c:	00001585 	.word	0x00001585
     f70:	0000226d 	.word	0x0000226d
     f74:	00000d79 	.word	0x00000d79

00000f78 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
     f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f7a:	0005      	movs	r5, r0

    usartDataOut(USART3,SENSOR_LOG);
    usartDataOut(USART3,my_altimeter->sampleTick >> 0);
     f7c:	002e      	movs	r6, r5
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 8);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 16);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 24);
	
    usartDataOut(USART3,my_altimeter->myIMU.accelXRaw >> 0);
    usartDataOut(USART3,my_altimeter->myIMU.accelYRaw >> 8);
     f7e:	002f      	movs	r7, r5



void logSensors(Altimeter *my_altimeter) {

    usartDataOut(USART3,SENSOR_LOG);
     f80:	4c2e      	ldr	r4, [pc, #184]	; (103c <logSensors+0xc4>)
    usartDataOut(USART3,my_altimeter->sampleTick >> 0);
     f82:	368c      	adds	r6, #140	; 0x8c



void logSensors(Altimeter *my_altimeter) {

    usartDataOut(USART3,SENSOR_LOG);
     f84:	2141      	movs	r1, #65	; 0x41
     f86:	2003      	movs	r0, #3
     f88:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->sampleTick >> 0);
     f8a:	7831      	ldrb	r1, [r6, #0]
     f8c:	2003      	movs	r0, #3
     f8e:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->sampleTick >> 8);
     f90:	6833      	ldr	r3, [r6, #0]
     f92:	2003      	movs	r0, #3
     f94:	0a19      	lsrs	r1, r3, #8
     f96:	b2c9      	uxtb	r1, r1
     f98:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->sampleTick >> 16);
     f9a:	6833      	ldr	r3, [r6, #0]
     f9c:	2003      	movs	r0, #3
     f9e:	0c19      	lsrs	r1, r3, #16
     fa0:	b2c9      	uxtb	r1, r1
     fa2:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->sampleTick >> 24);
     fa4:	6831      	ldr	r1, [r6, #0]
     fa6:	2003      	movs	r0, #3
     fa8:	0e09      	lsrs	r1, r1, #24
     faa:	47a0      	blx	r4
	
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 0);
     fac:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fae:	2003      	movs	r0, #3
     fb0:	b2d9      	uxtb	r1, r3
     fb2:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 8);
     fb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fb6:	2003      	movs	r0, #3
     fb8:	0a19      	lsrs	r1, r3, #8
     fba:	b2c9      	uxtb	r1, r1
     fbc:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 16);
     fbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fc0:	2003      	movs	r0, #3
     fc2:	0c19      	lsrs	r1, r3, #16
     fc4:	b2c9      	uxtb	r1, r1
     fc6:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 24);
     fc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	
    usartDataOut(USART3,my_altimeter->myIMU.accelXRaw >> 0);
     fca:	3e2c      	subs	r6, #44	; 0x2c
    usartDataOut(USART3,my_altimeter->sampleTick >> 24);
	
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 0);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 8);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 16);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 24);
     fcc:	0e19      	lsrs	r1, r3, #24
     fce:	2003      	movs	r0, #3
     fd0:	47a0      	blx	r4
	
    usartDataOut(USART3,my_altimeter->myIMU.accelXRaw >> 0);
    usartDataOut(USART3,my_altimeter->myIMU.accelYRaw >> 8);
     fd2:	3764      	adds	r7, #100	; 0x64
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 0);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 8);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 16);
    usartDataOut(USART3,my_altimeter->myBarometer.heightCm >> 24);
	
    usartDataOut(USART3,my_altimeter->myIMU.accelXRaw >> 0);
     fd4:	7831      	ldrb	r1, [r6, #0]
     fd6:	2003      	movs	r0, #3
     fd8:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.accelYRaw >> 8);
     fda:	8839      	ldrh	r1, [r7, #0]
     fdc:	2003      	movs	r0, #3
     fde:	0a09      	lsrs	r1, r1, #8
     fe0:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.accelYRaw >> 0);
     fe2:	7839      	ldrb	r1, [r7, #0]
     fe4:	2003      	movs	r0, #3
     fe6:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.accelXRaw >> 8);
     fe8:	8831      	ldrh	r1, [r6, #0]
     fea:	2003      	movs	r0, #3
     fec:	0a09      	lsrs	r1, r1, #8
     fee:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.accelZRaw >> 0);
     ff0:	7a31      	ldrb	r1, [r6, #8]
     ff2:	2003      	movs	r0, #3
     ff4:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.accelZRaw >> 8);
     ff6:	8931      	ldrh	r1, [r6, #8]
     ff8:	2003      	movs	r0, #3
     ffa:	0a09      	lsrs	r1, r1, #8
     ffc:	47a0      	blx	r4
	
    usartDataOut(USART3,my_altimeter->myIMU.gyroXRaw >> 0);
     ffe:	7b31      	ldrb	r1, [r6, #12]
    1000:	2003      	movs	r0, #3
    1002:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.gyroXRaw >> 8);
    1004:	89b1      	ldrh	r1, [r6, #12]
    1006:	2003      	movs	r0, #3
    1008:	0a09      	lsrs	r1, r1, #8
    100a:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.gyroYRaw >> 0);
    100c:	7c31      	ldrb	r1, [r6, #16]
    100e:	2003      	movs	r0, #3
    1010:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.gyroYRaw >> 8);
    1012:	8a31      	ldrh	r1, [r6, #16]
    1014:	2003      	movs	r0, #3
    1016:	0a09      	lsrs	r1, r1, #8
    1018:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.gyroZRaw >> 0);
    101a:	7d31      	ldrb	r1, [r6, #20]
    101c:	2003      	movs	r0, #3
    101e:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myIMU.gyroZRaw >> 8);
    1020:	8ab1      	ldrh	r1, [r6, #20]

    usartDataOut(USART3,my_altimeter->myAnalogAccelerometer.analogRaw >> 0);
    1022:	3578      	adds	r5, #120	; 0x78
    usartDataOut(USART3,my_altimeter->myIMU.gyroXRaw >> 0);
    usartDataOut(USART3,my_altimeter->myIMU.gyroXRaw >> 8);
    usartDataOut(USART3,my_altimeter->myIMU.gyroYRaw >> 0);
    usartDataOut(USART3,my_altimeter->myIMU.gyroYRaw >> 8);
    usartDataOut(USART3,my_altimeter->myIMU.gyroZRaw >> 0);
    usartDataOut(USART3,my_altimeter->myIMU.gyroZRaw >> 8);
    1024:	0a09      	lsrs	r1, r1, #8
    1026:	2003      	movs	r0, #3
    1028:	47a0      	blx	r4

    usartDataOut(USART3,my_altimeter->myAnalogAccelerometer.analogRaw >> 0);
    102a:	7829      	ldrb	r1, [r5, #0]
    102c:	2003      	movs	r0, #3
    102e:	47a0      	blx	r4
    usartDataOut(USART3,my_altimeter->myAnalogAccelerometer.analogRaw >> 8);
    1030:	8829      	ldrh	r1, [r5, #0]
    1032:	2003      	movs	r0, #3
    1034:	0a09      	lsrs	r1, r1, #8
    1036:	47a0      	blx	r4


}
    1038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	00001505 	.word	0x00001505

00001040 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1040:	b5f0      	push	{r4, r5, r6, r7, lr}
    1042:	0004      	movs	r4, r0
    1044:	b087      	sub	sp, #28

    my_altimeter->sampleTick = millis();
    1046:	4bd1      	ldr	r3, [pc, #836]	; (138c <sampleTick+0x34c>)
    1048:	4798      	blx	r3
    104a:	0023      	movs	r3, r4

    my_altimeter->batV = adc_read(senseBatPin);
    104c:	4dd0      	ldr	r5, [pc, #832]	; (1390 <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    104e:	338c      	adds	r3, #140	; 0x8c
    1050:	6018      	str	r0, [r3, #0]

    my_altimeter->batV = adc_read(senseBatPin);
    1052:	786b      	ldrb	r3, [r5, #1]
    1054:	7829      	ldrb	r1, [r5, #0]
    1056:	78a8      	ldrb	r0, [r5, #2]
    1058:	021b      	lsls	r3, r3, #8
    105a:	430b      	orrs	r3, r1
    105c:	0400      	lsls	r0, r0, #16
    105e:	001a      	movs	r2, r3
    1060:	0003      	movs	r3, r0
    1062:	78e8      	ldrb	r0, [r5, #3]
    1064:	4313      	orrs	r3, r2
    1066:	0600      	lsls	r0, r0, #24
    1068:	4eca      	ldr	r6, [pc, #808]	; (1394 <sampleTick+0x354>)
    106a:	7929      	ldrb	r1, [r5, #4]
    106c:	4318      	orrs	r0, r3
    106e:	47b0      	blx	r6
    1070:	0023      	movs	r3, r4
    1072:	3380      	adds	r3, #128	; 0x80
    1074:	8018      	strh	r0, [r3, #0]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1076:	79ab      	ldrb	r3, [r5, #6]
    1078:	7969      	ldrb	r1, [r5, #5]
    107a:	79e8      	ldrb	r0, [r5, #7]
    107c:	021b      	lsls	r3, r3, #8
    107e:	430b      	orrs	r3, r1
    1080:	0400      	lsls	r0, r0, #16
    1082:	001a      	movs	r2, r3
    1084:	0003      	movs	r3, r0
    1086:	7a28      	ldrb	r0, [r5, #8]
    1088:	4313      	orrs	r3, r2
    108a:	0600      	lsls	r0, r0, #24
    108c:	7a69      	ldrb	r1, [r5, #9]
    108e:	4318      	orrs	r0, r3
    1090:	47b0      	blx	r6
    1092:	0023      	movs	r3, r4
    1094:	3382      	adds	r3, #130	; 0x82
    1096:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    1098:	7aeb      	ldrb	r3, [r5, #11]
    109a:	7aa9      	ldrb	r1, [r5, #10]
    109c:	7b28      	ldrb	r0, [r5, #12]
    109e:	021b      	lsls	r3, r3, #8
    10a0:	430b      	orrs	r3, r1
    10a2:	0400      	lsls	r0, r0, #16
    10a4:	001a      	movs	r2, r3
    10a6:	0003      	movs	r3, r0
    10a8:	7b68      	ldrb	r0, [r5, #13]
    10aa:	4313      	orrs	r3, r2
    10ac:	0600      	lsls	r0, r0, #24
    10ae:	7ba9      	ldrb	r1, [r5, #14]
    10b0:	4318      	orrs	r0, r3
    10b2:	47b0      	blx	r6
    10b4:	0023      	movs	r3, r4
    10b6:	3384      	adds	r3, #132	; 0x84
    10b8:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseC = adc_read(senseCPin);
    10ba:	7c2b      	ldrb	r3, [r5, #16]
    10bc:	7be9      	ldrb	r1, [r5, #15]
    10be:	7c68      	ldrb	r0, [r5, #17]
    10c0:	021b      	lsls	r3, r3, #8
    10c2:	430b      	orrs	r3, r1
    10c4:	0400      	lsls	r0, r0, #16
    10c6:	001a      	movs	r2, r3
    10c8:	0003      	movs	r3, r0
    10ca:	7ca8      	ldrb	r0, [r5, #18]
    10cc:	4313      	orrs	r3, r2
    10ce:	0600      	lsls	r0, r0, #24
    10d0:	7ce9      	ldrb	r1, [r5, #19]
    10d2:	4318      	orrs	r0, r3
    10d4:	47b0      	blx	r6
    10d6:	0023      	movs	r3, r4
    10d8:	3386      	adds	r3, #134	; 0x86
    10da:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseD = adc_read(senseDPin);
    10dc:	7d6b      	ldrb	r3, [r5, #21]
    10de:	7d29      	ldrb	r1, [r5, #20]
    10e0:	7da8      	ldrb	r0, [r5, #22]
    10e2:	021b      	lsls	r3, r3, #8
    10e4:	430b      	orrs	r3, r1
    10e6:	0400      	lsls	r0, r0, #16
    10e8:	001a      	movs	r2, r3
    10ea:	0003      	movs	r3, r0
    10ec:	7de8      	ldrb	r0, [r5, #23]
    10ee:	4313      	orrs	r3, r2
    10f0:	0600      	lsls	r0, r0, #24
    10f2:	7e29      	ldrb	r1, [r5, #24]
    10f4:	4318      	orrs	r0, r3
    10f6:	47b0      	blx	r6
    10f8:	0023      	movs	r3, r4
    10fa:	3388      	adds	r3, #136	; 0x88
    10fc:	8018      	strh	r0, [r3, #0]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    10fe:	7eab      	ldrb	r3, [r5, #26]
    1100:	7e69      	ldrb	r1, [r5, #25]
    1102:	7ee8      	ldrb	r0, [r5, #27]
    1104:	021b      	lsls	r3, r3, #8
    1106:	430b      	orrs	r3, r1
    1108:	0400      	lsls	r0, r0, #16
    110a:	001a      	movs	r2, r3
    110c:	0003      	movs	r3, r0
    110e:	7f28      	ldrb	r0, [r5, #28]
    1110:	4313      	orrs	r3, r2
    1112:	0600      	lsls	r0, r0, #24
    1114:	7f69      	ldrb	r1, [r5, #29]
    1116:	4318      	orrs	r0, r3
    1118:	47b0      	blx	r6
    111a:	0023      	movs	r3, r4
    111c:	3378      	adds	r3, #120	; 0x78
    111e:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1120:	4b9d      	ldr	r3, [pc, #628]	; (1398 <sampleTick+0x358>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1122:	2780      	movs	r7, #128	; 0x80
    1124:	18c0      	adds	r0, r0, r3
    1126:	4b9d      	ldr	r3, [pc, #628]	; (139c <sampleTick+0x35c>)
    1128:	4798      	blx	r3
    112a:	4a9d      	ldr	r2, [pc, #628]	; (13a0 <sampleTick+0x360>)
    112c:	4e9d      	ldr	r6, [pc, #628]	; (13a4 <sampleTick+0x364>)
    112e:	4b9e      	ldr	r3, [pc, #632]	; (13a8 <sampleTick+0x368>)
    1130:	47b0      	blx	r6
    1132:	4b9e      	ldr	r3, [pc, #632]	; (13ac <sampleTick+0x36c>)
    1134:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1136:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1138:	6c63      	ldr	r3, [r4, #68]	; 0x44
    113a:	023f      	lsls	r7, r7, #8
    113c:	64a3      	str	r3, [r4, #72]	; 0x48
    113e:	4b9c      	ldr	r3, [pc, #624]	; (13b0 <sampleTick+0x370>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1140:	67e0      	str	r0, [r4, #124]	; 0x7c
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1142:	002e      	movs	r6, r5
    1144:	615f      	str	r7, [r3, #20]
    1146:	9200      	str	r2, [sp, #0]
    1148:	7fea      	ldrb	r2, [r5, #31]
    114a:	7fa8      	ldrb	r0, [r5, #30]
    114c:	0212      	lsls	r2, r2, #8
    114e:	4302      	orrs	r2, r0
    1150:	0011      	movs	r1, r2
    1152:	002b      	movs	r3, r5
    1154:	361e      	adds	r6, #30
    1156:	78b2      	ldrb	r2, [r6, #2]
    1158:	3323      	adds	r3, #35	; 0x23
    115a:	0412      	lsls	r2, r2, #16
    115c:	430a      	orrs	r2, r1
    115e:	78f1      	ldrb	r1, [r6, #3]
    1160:	7818      	ldrb	r0, [r3, #0]
    1162:	0609      	lsls	r1, r1, #24
    1164:	4311      	orrs	r1, r2
    1166:	7932      	ldrb	r2, [r6, #4]
    1168:	789d      	ldrb	r5, [r3, #2]
    116a:	9204      	str	r2, [sp, #16]
    116c:	785a      	ldrb	r2, [r3, #1]
    116e:	042d      	lsls	r5, r5, #16
    1170:	0212      	lsls	r2, r2, #8
    1172:	4302      	orrs	r2, r0
    1174:	9103      	str	r1, [sp, #12]
    1176:	0011      	movs	r1, r2
    1178:	002a      	movs	r2, r5
    117a:	78dd      	ldrb	r5, [r3, #3]
    117c:	791b      	ldrb	r3, [r3, #4]
    117e:	430a      	orrs	r2, r1
    1180:	062d      	lsls	r5, r5, #24
    1182:	4315      	orrs	r5, r2
    1184:	9305      	str	r3, [sp, #20]
    1186:	9a03      	ldr	r2, [sp, #12]
    1188:	9905      	ldr	r1, [sp, #20]
    118a:	9b04      	ldr	r3, [sp, #16]
    118c:	0028      	movs	r0, r5
    118e:	4e89      	ldr	r6, [pc, #548]	; (13b4 <sampleTick+0x374>)
    1190:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    1192:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1194:	4b86      	ldr	r3, [pc, #536]	; (13b0 <sampleTick+0x370>)
    1196:	0040      	lsls	r0, r0, #1
    1198:	619f      	str	r7, [r3, #24]
    119a:	4b87      	ldr	r3, [pc, #540]	; (13b8 <sampleTick+0x378>)
    119c:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    119e:	4b87      	ldr	r3, [pc, #540]	; (13bc <sampleTick+0x37c>)
    11a0:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    11a2:	4b83      	ldr	r3, [pc, #524]	; (13b0 <sampleTick+0x370>)
    11a4:	61a0      	str	r0, [r4, #24]
    11a6:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    11a8:	2342      	movs	r3, #66	; 0x42
    11aa:	9a03      	ldr	r2, [sp, #12]
    11ac:	9300      	str	r3, [sp, #0]
    11ae:	0028      	movs	r0, r5
    11b0:	9b04      	ldr	r3, [sp, #16]
    11b2:	9905      	ldr	r1, [sp, #20]
    11b4:	47b0      	blx	r6
    11b6:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    11b8:	4b7d      	ldr	r3, [pc, #500]	; (13b0 <sampleTick+0x370>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    11ba:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    11bc:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    11be:	4b80      	ldr	r3, [pc, #512]	; (13c0 <sampleTick+0x380>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    11c0:	4f80      	ldr	r7, [pc, #512]	; (13c4 <sampleTick+0x384>)
    11c2:	601a      	str	r2, [r3, #0]
    11c4:	2182      	movs	r1, #130	; 0x82
    11c6:	2000      	movs	r0, #0
    11c8:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    11ca:	21ff      	movs	r1, #255	; 0xff
    11cc:	2000      	movs	r0, #0
    11ce:	47b8      	blx	r7
    11d0:	0023      	movs	r3, r4
    11d2:	3360      	adds	r3, #96	; 0x60
    11d4:	8018      	strh	r0, [r3, #0]
    11d6:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    11d8:	21ff      	movs	r1, #255	; 0xff
    11da:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    11dc:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    11de:	47b8      	blx	r7
    11e0:	9b03      	ldr	r3, [sp, #12]
    11e2:	0200      	lsls	r0, r0, #8
    11e4:	4305      	orrs	r5, r0
    11e6:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    11e8:	21ff      	movs	r1, #255	; 0xff
    11ea:	0026      	movs	r6, r4
    11ec:	2000      	movs	r0, #0
    11ee:	47b8      	blx	r7
    11f0:	3664      	adds	r6, #100	; 0x64
    11f2:	8030      	strh	r0, [r6, #0]
    11f4:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    11f6:	21ff      	movs	r1, #255	; 0xff
    11f8:	2000      	movs	r0, #0
    11fa:	47b8      	blx	r7
    11fc:	0200      	lsls	r0, r0, #8
    11fe:	4305      	orrs	r5, r0
    1200:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1202:	21ff      	movs	r1, #255	; 0xff
    1204:	2000      	movs	r0, #0
    1206:	47b8      	blx	r7
    1208:	466b      	mov	r3, sp
    120a:	0025      	movs	r5, r4
    120c:	9004      	str	r0, [sp, #16]
    120e:	8a1b      	ldrh	r3, [r3, #16]
    1210:	3568      	adds	r5, #104	; 0x68
    1212:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1214:	21ff      	movs	r1, #255	; 0xff
    1216:	2000      	movs	r0, #0
    1218:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    121a:	2280      	movs	r2, #128	; 0x80
    121c:	9b04      	ldr	r3, [sp, #16]
    121e:	0200      	lsls	r0, r0, #8
    1220:	4303      	orrs	r3, r0
    1222:	802b      	strh	r3, [r5, #0]
    1224:	4b68      	ldr	r3, [pc, #416]	; (13c8 <sampleTick+0x388>)
    1226:	00d2      	lsls	r2, r2, #3
    1228:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    122a:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    122c:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    122e:	2000      	movs	r0, #0
    1230:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1232:	2300      	movs	r3, #0
    1234:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1236:	2102      	movs	r1, #2
    1238:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    123a:	0021      	movs	r1, r4
    123c:	1112      	asrs	r2, r2, #4
    123e:	1100      	asrs	r0, r0, #4
    1240:	3162      	adds	r1, #98	; 0x62
    1242:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1244:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1246:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1248:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    124a:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    124c:	4b53      	ldr	r3, [pc, #332]	; (139c <sampleTick+0x35c>)
    124e:	4798      	blx	r3
    1250:	23fe      	movs	r3, #254	; 0xfe
    1252:	4d54      	ldr	r5, [pc, #336]	; (13a4 <sampleTick+0x364>)
    1254:	2200      	movs	r2, #0
    1256:	059b      	lsls	r3, r3, #22
    1258:	47a8      	blx	r5
    125a:	4b54      	ldr	r3, [pc, #336]	; (13ac <sampleTick+0x36c>)
    125c:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    125e:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1260:	6460      	str	r0, [r4, #68]	; 0x44
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1262:	2000      	movs	r0, #0
    1264:	5e18      	ldrsh	r0, [r3, r0]
    1266:	4b4d      	ldr	r3, [pc, #308]	; (139c <sampleTick+0x35c>)
    1268:	4798      	blx	r3
    126a:	23fe      	movs	r3, #254	; 0xfe
    126c:	2200      	movs	r2, #0
    126e:	059b      	lsls	r3, r3, #22
    1270:	47a8      	blx	r5
    1272:	4b4e      	ldr	r3, [pc, #312]	; (13ac <sampleTick+0x36c>)
    1274:	4798      	blx	r3
    1276:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1278:	2306      	movs	r3, #6
    127a:	5ef0      	ldrsh	r0, [r6, r3]
    127c:	4b47      	ldr	r3, [pc, #284]	; (139c <sampleTick+0x35c>)
    127e:	4798      	blx	r3
    1280:	23fe      	movs	r3, #254	; 0xfe
    1282:	2200      	movs	r2, #0
    1284:	059b      	lsls	r3, r3, #22
    1286:	47a8      	blx	r5
    1288:	4b48      	ldr	r3, [pc, #288]	; (13ac <sampleTick+0x36c>)
    128a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    128c:	2280      	movs	r2, #128	; 0x80
    128e:	4b48      	ldr	r3, [pc, #288]	; (13b0 <sampleTick+0x370>)
    1290:	00d2      	lsls	r2, r2, #3
    1292:	6520      	str	r0, [r4, #80]	; 0x50


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1294:	2182      	movs	r1, #130	; 0x82
    1296:	615a      	str	r2, [r3, #20]
    1298:	2000      	movs	r0, #0
    129a:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    129c:	21ff      	movs	r1, #255	; 0xff
    129e:	2000      	movs	r0, #0
    12a0:	47b8      	blx	r7
    12a2:	0023      	movs	r3, r4
    12a4:	336c      	adds	r3, #108	; 0x6c
    12a6:	8018      	strh	r0, [r3, #0]
    12a8:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12aa:	21ff      	movs	r1, #255	; 0xff
    12ac:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    12ae:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12b0:	47b8      	blx	r7
    12b2:	9b03      	ldr	r3, [sp, #12]
    12b4:	0200      	lsls	r0, r0, #8
    12b6:	4305      	orrs	r5, r0
    12b8:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    12ba:	21ff      	movs	r1, #255	; 0xff
    12bc:	2000      	movs	r0, #0
    12be:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12c0:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    12c2:	81b0      	strh	r0, [r6, #12]
    12c4:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12c6:	2000      	movs	r0, #0
    12c8:	47b8      	blx	r7
    12ca:	0200      	lsls	r0, r0, #8
    12cc:	4305      	orrs	r5, r0
    12ce:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    12d0:	21ff      	movs	r1, #255	; 0xff
    12d2:	2000      	movs	r0, #0
    12d4:	47b8      	blx	r7
    12d6:	466b      	mov	r3, sp
    12d8:	0025      	movs	r5, r4
    12da:	9004      	str	r0, [sp, #16]
    12dc:	8a1b      	ldrh	r3, [r3, #16]
    12de:	3574      	adds	r5, #116	; 0x74
    12e0:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12e2:	21ff      	movs	r1, #255	; 0xff
    12e4:	2000      	movs	r0, #0
    12e6:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12e8:	2280      	movs	r2, #128	; 0x80
    12ea:	9f04      	ldr	r7, [sp, #16]
    12ec:	0200      	lsls	r0, r0, #8
    12ee:	4b30      	ldr	r3, [pc, #192]	; (13b0 <sampleTick+0x370>)
    12f0:	4307      	orrs	r7, r0
    12f2:	00d2      	lsls	r2, r2, #3
    12f4:	802f      	strh	r7, [r5, #0]
    12f6:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    12f8:	9b03      	ldr	r3, [sp, #12]
    12fa:	2000      	movs	r0, #0
    12fc:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    12fe:	230c      	movs	r3, #12
    1300:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    1302:	2100      	movs	r1, #0
    1304:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1306:	0021      	movs	r1, r4
    1308:	1112      	asrs	r2, r2, #4
    130a:	1100      	asrs	r0, r0, #4
    130c:	316e      	adds	r1, #110	; 0x6e
    130e:	111b      	asrs	r3, r3, #4
    1310:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1312:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1314:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1316:	4b21      	ldr	r3, [pc, #132]	; (139c <sampleTick+0x35c>)
    1318:	4798      	blx	r3
    131a:	23fe      	movs	r3, #254	; 0xfe
    131c:	4f21      	ldr	r7, [pc, #132]	; (13a4 <sampleTick+0x364>)
    131e:	2200      	movs	r2, #0
    1320:	059b      	lsls	r3, r3, #22
    1322:	47b8      	blx	r7
    1324:	4b21      	ldr	r3, [pc, #132]	; (13ac <sampleTick+0x36c>)
    1326:	4798      	blx	r3
    1328:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    132a:	230e      	movs	r3, #14
    132c:	5ef0      	ldrsh	r0, [r6, r3]
    132e:	4b1b      	ldr	r3, [pc, #108]	; (139c <sampleTick+0x35c>)
    1330:	4798      	blx	r3
    1332:	23fe      	movs	r3, #254	; 0xfe
    1334:	2200      	movs	r2, #0
    1336:	059b      	lsls	r3, r3, #22
    1338:	47b8      	blx	r7
    133a:	4b1c      	ldr	r3, [pc, #112]	; (13ac <sampleTick+0x36c>)
    133c:	4798      	blx	r3
    133e:	65a0      	str	r0, [r4, #88]	; 0x58
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1340:	2302      	movs	r3, #2
    1342:	5ee8      	ldrsh	r0, [r5, r3]
    1344:	4b15      	ldr	r3, [pc, #84]	; (139c <sampleTick+0x35c>)
    1346:	4798      	blx	r3
    1348:	23fe      	movs	r3, #254	; 0xfe
    134a:	2200      	movs	r2, #0
    134c:	059b      	lsls	r3, r3, #22
    134e:	47b8      	blx	r7
    1350:	4b16      	ldr	r3, [pc, #88]	; (13ac <sampleTick+0x36c>)
    1352:	4798      	blx	r3
    1354:	65e0      	str	r0, [r4, #92]	; 0x5c

    delay_us(800);
    1356:	20c8      	movs	r0, #200	; 0xc8
    1358:	4b17      	ldr	r3, [pc, #92]	; (13b8 <sampleTick+0x378>)
    135a:	0080      	lsls	r0, r0, #2
    135c:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    135e:	0025      	movs	r5, r4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1360:	4b16      	ldr	r3, [pc, #88]	; (13bc <sampleTick+0x37c>)
    1362:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1364:	3508      	adds	r5, #8
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1366:	6160      	str	r0, [r4, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1368:	4b18      	ldr	r3, [pc, #96]	; (13cc <sampleTick+0x38c>)
    136a:	0028      	movs	r0, r5
    136c:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    136e:	0028      	movs	r0, r5
    1370:	4b17      	ldr	r3, [pc, #92]	; (13d0 <sampleTick+0x390>)
    1372:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1374:	4b17      	ldr	r3, [pc, #92]	; (13d4 <sampleTick+0x394>)
    1376:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1378:	4798      	blx	r3
    137a:	4a17      	ldr	r2, [pc, #92]	; (13d8 <sampleTick+0x398>)
    137c:	4b17      	ldr	r3, [pc, #92]	; (13dc <sampleTick+0x39c>)
    137e:	4d09      	ldr	r5, [pc, #36]	; (13a4 <sampleTick+0x364>)
    1380:	47a8      	blx	r5
    1382:	4b0a      	ldr	r3, [pc, #40]	; (13ac <sampleTick+0x36c>)
    1384:	4798      	blx	r3
    1386:	62e0      	str	r0, [r4, #44]	; 0x2c


}
    1388:	b007      	add	sp, #28
    138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    138c:	00000d79 	.word	0x00000d79
    1390:	00002708 	.word	0x00002708
    1394:	00000a1d 	.word	0x00000a1d
    1398:	fffff0c4 	.word	0xfffff0c4
    139c:	000020d1 	.word	0x000020d1
    13a0:	02de00d2 	.word	0x02de00d2
    13a4:	00001bdd 	.word	0x00001bdd
    13a8:	bf8f8a09 	.word	0xbf8f8a09
    13ac:	0000226d 	.word	0x0000226d
    13b0:	41004400 	.word	0x41004400
    13b4:	00000a85 	.word	0x00000a85
    13b8:	00000cfd 	.word	0x00000cfd
    13bc:	000001e5 	.word	0x000001e5
    13c0:	41004494 	.word	0x41004494
    13c4:	000014ed 	.word	0x000014ed
    13c8:	41004498 	.word	0x41004498
    13cc:	00000299 	.word	0x00000299
    13d0:	00000385 	.word	0x00000385
    13d4:	00002155 	.word	0x00002155
    13d8:	e9f6a93f 	.word	0xe9f6a93f
    13dc:	3fa0cc78 	.word	0x3fa0cc78

000013e0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    13e0:	b570      	push	{r4, r5, r6, lr}
    13e2:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    13e4:	2301      	movs	r3, #1
    13e6:	1ca6      	adds	r6, r4, #2
    13e8:	40b3      	lsls	r3, r6
    13ea:	480d      	ldr	r0, [pc, #52]	; (1420 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    13ec:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    13ee:	6a01      	ldr	r1, [r0, #32]
    13f0:	430b      	orrs	r3, r1
    13f2:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    13f4:	2d00      	cmp	r5, #0
    13f6:	d003      	beq.n	1400 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    13f8:	2107      	movs	r1, #7
    13fa:	0028      	movs	r0, r5
    13fc:	4b09      	ldr	r3, [pc, #36]	; (1424 <sercomClockEnable+0x44>)
    13fe:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1400:	22f0      	movs	r2, #240	; 0xf0
    1402:	2080      	movs	r0, #128	; 0x80
    1404:	0229      	lsls	r1, r5, #8
    1406:	0112      	lsls	r2, r2, #4
    1408:	4011      	ands	r1, r2
    140a:	01c0      	lsls	r0, r0, #7
    140c:	4301      	orrs	r1, r0
    140e:	0020      	movs	r0, r4
    1410:	3014      	adds	r0, #20
    1412:	223f      	movs	r2, #63	; 0x3f
    1414:	0003      	movs	r3, r0
    1416:	4013      	ands	r3, r2
    1418:	4319      	orrs	r1, r3
    141a:	4b03      	ldr	r3, [pc, #12]	; (1428 <sercomClockEnable+0x48>)
    141c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    141e:	bd70      	pop	{r4, r5, r6, pc}
    1420:	40000400 	.word	0x40000400
    1424:	00000cad 	.word	0x00000cad
    1428:	40000c00 	.word	0x40000c00

0000142c <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    142c:	4b04      	ldr	r3, [pc, #16]	; (1440 <sercomReset+0x14>)
    142e:	0280      	lsls	r0, r0, #10
    1430:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1432:	2301      	movs	r3, #1
    1434:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1436:	6802      	ldr	r2, [r0, #0]
    1438:	421a      	tst	r2, r3
    143a:	d1fc      	bne.n	1436 <sercomReset+0xa>
}
    143c:	4770      	bx	lr
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	42000800 	.word	0x42000800

00001444 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1446:	0004      	movs	r4, r0
    1448:	9300      	str	r3, [sp, #0]
    144a:	ab08      	add	r3, sp, #32
    144c:	781b      	ldrb	r3, [r3, #0]
    144e:	000e      	movs	r6, r1
    1450:	9301      	str	r3, [sp, #4]
    1452:	ab09      	add	r3, sp, #36	; 0x24
    1454:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1456:	4b12      	ldr	r3, [pc, #72]	; (14a0 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1458:	0015      	movs	r5, r2

    sercomReset(id);
    145a:	4798      	blx	r3
    145c:	4b11      	ldr	r3, [pc, #68]	; (14a4 <sercomSpiMasterInit+0x60>)
    145e:	02a4      	lsls	r4, r4, #10
    1460:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1462:	2380      	movs	r3, #128	; 0x80
    1464:	029b      	lsls	r3, r3, #10
    1466:	6063      	str	r3, [r4, #4]
    1468:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    146a:	21c0      	movs	r1, #192	; 0xc0
    146c:	042d      	lsls	r5, r5, #16
    146e:	029b      	lsls	r3, r3, #10
    1470:	402b      	ands	r3, r5
    1472:	250e      	movs	r5, #14
    1474:	0536      	lsls	r6, r6, #20
    1476:	0389      	lsls	r1, r1, #14
    1478:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    147a:	9e00      	ldr	r6, [sp, #0]
    147c:	431d      	orrs	r5, r3
    147e:	1e73      	subs	r3, r6, #1
    1480:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1482:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1484:	0772      	lsls	r2, r6, #29
    1486:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1488:	432a      	orrs	r2, r5
    148a:	1e59      	subs	r1, r3, #1
    148c:	418b      	sbcs	r3, r1
    148e:	0016      	movs	r6, r2
    1490:	071b      	lsls	r3, r3, #28
    1492:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1494:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1496:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1498:	69e3      	ldr	r3, [r4, #28]
    149a:	075b      	lsls	r3, r3, #29
    149c:	d4fc      	bmi.n	1498 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    149e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14a0:	0000142d 	.word	0x0000142d
    14a4:	42000800 	.word	0x42000800

000014a8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    14a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14aa:	0007      	movs	r7, r0
    14ac:	001e      	movs	r6, r3
    sercomReset(id);
    14ae:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    14b0:	000d      	movs	r5, r1
    14b2:	0014      	movs	r4, r2
    sercomReset(id);
    14b4:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    14b6:	4b0b      	ldr	r3, [pc, #44]	; (14e4 <sercomUartInit+0x3c>)
    14b8:	02b8      	lsls	r0, r7, #10
    14ba:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    14bc:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14be:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    14c0:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    14c2:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14c4:	0529      	lsls	r1, r5, #20
    14c6:	0392      	lsls	r2, r2, #14
    14c8:	4011      	ands	r1, r2
    14ca:	4a07      	ldr	r2, [pc, #28]	; (14e8 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    14cc:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    14ce:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14d0:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    14d2:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14d4:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    14d6:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14d8:	4023      	ands	r3, r4
    14da:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    14dc:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    14de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e0:	0000142d 	.word	0x0000142d
    14e4:	42000800 	.word	0x42000800
    14e8:	40000006 	.word	0x40000006

000014ec <spiDataTransfer>:
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <spiDataTransfer+0x14>)
    14ee:	0280      	lsls	r0, r0, #10
    14f0:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    14f2:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    14f4:	7e03      	ldrb	r3, [r0, #24]
    14f6:	075b      	lsls	r3, r3, #29
    14f8:	d5fc      	bpl.n	14f4 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    14fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    14fc:	b2c0      	uxtb	r0, r0
}
    14fe:	4770      	bx	lr
    1500:	42000800 	.word	0x42000800

00001504 <usartDataOut>:
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <usartDataOut+0x14>)
    1506:	0280      	lsls	r0, r0, #10
    1508:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    150a:	b289      	uxth	r1, r1
    150c:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    150e:	7e03      	ldrb	r3, [r0, #24]
    1510:	07db      	lsls	r3, r3, #31
    1512:	d5fc      	bpl.n	150e <usartDataOut+0xa>
}
    1514:	4770      	bx	lr
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	42000800 	.word	0x42000800

0000151c <usartDataIn>:
    151c:	4b02      	ldr	r3, [pc, #8]	; (1528 <usartDataIn+0xc>)
    151e:	0280      	lsls	r0, r0, #10
    1520:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1522:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1524:	b2c0      	uxtb	r0, r0
    1526:	4770      	bx	lr
    1528:	42000800 	.word	0x42000800

0000152c <__aeabi_lmul>:
    152c:	b5f0      	push	{r4, r5, r6, r7, lr}
    152e:	464f      	mov	r7, r9
    1530:	4646      	mov	r6, r8
    1532:	b4c0      	push	{r6, r7}
    1534:	0416      	lsls	r6, r2, #16
    1536:	0c36      	lsrs	r6, r6, #16
    1538:	4699      	mov	r9, r3
    153a:	0033      	movs	r3, r6
    153c:	0405      	lsls	r5, r0, #16
    153e:	0c2c      	lsrs	r4, r5, #16
    1540:	0c07      	lsrs	r7, r0, #16
    1542:	0c15      	lsrs	r5, r2, #16
    1544:	4363      	muls	r3, r4
    1546:	437e      	muls	r6, r7
    1548:	436f      	muls	r7, r5
    154a:	4365      	muls	r5, r4
    154c:	0c1c      	lsrs	r4, r3, #16
    154e:	19ad      	adds	r5, r5, r6
    1550:	1964      	adds	r4, r4, r5
    1552:	469c      	mov	ip, r3
    1554:	42a6      	cmp	r6, r4
    1556:	d903      	bls.n	1560 <__aeabi_lmul+0x34>
    1558:	2380      	movs	r3, #128	; 0x80
    155a:	025b      	lsls	r3, r3, #9
    155c:	4698      	mov	r8, r3
    155e:	4447      	add	r7, r8
    1560:	4663      	mov	r3, ip
    1562:	0c25      	lsrs	r5, r4, #16
    1564:	19ef      	adds	r7, r5, r7
    1566:	041d      	lsls	r5, r3, #16
    1568:	464b      	mov	r3, r9
    156a:	434a      	muls	r2, r1
    156c:	4343      	muls	r3, r0
    156e:	0c2d      	lsrs	r5, r5, #16
    1570:	0424      	lsls	r4, r4, #16
    1572:	1964      	adds	r4, r4, r5
    1574:	1899      	adds	r1, r3, r2
    1576:	19c9      	adds	r1, r1, r7
    1578:	0020      	movs	r0, r4
    157a:	bc0c      	pop	{r2, r3}
    157c:	4690      	mov	r8, r2
    157e:	4699      	mov	r9, r3
    1580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1582:	46c0      	nop			; (mov r8, r8)

00001584 <__aeabi_dadd>:
    1584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1586:	4656      	mov	r6, sl
    1588:	465f      	mov	r7, fp
    158a:	464d      	mov	r5, r9
    158c:	4644      	mov	r4, r8
    158e:	b4f0      	push	{r4, r5, r6, r7}
    1590:	000f      	movs	r7, r1
    1592:	0ffd      	lsrs	r5, r7, #31
    1594:	46aa      	mov	sl, r5
    1596:	0309      	lsls	r1, r1, #12
    1598:	007c      	lsls	r4, r7, #1
    159a:	002e      	movs	r6, r5
    159c:	005f      	lsls	r7, r3, #1
    159e:	0f45      	lsrs	r5, r0, #29
    15a0:	0a49      	lsrs	r1, r1, #9
    15a2:	0d7f      	lsrs	r7, r7, #21
    15a4:	4329      	orrs	r1, r5
    15a6:	00c5      	lsls	r5, r0, #3
    15a8:	0318      	lsls	r0, r3, #12
    15aa:	46bc      	mov	ip, r7
    15ac:	0a40      	lsrs	r0, r0, #9
    15ae:	0f57      	lsrs	r7, r2, #29
    15b0:	0d64      	lsrs	r4, r4, #21
    15b2:	0fdb      	lsrs	r3, r3, #31
    15b4:	4338      	orrs	r0, r7
    15b6:	00d2      	lsls	r2, r2, #3
    15b8:	459a      	cmp	sl, r3
    15ba:	d100      	bne.n	15be <__aeabi_dadd+0x3a>
    15bc:	e0aa      	b.n	1714 <__aeabi_dadd+0x190>
    15be:	4666      	mov	r6, ip
    15c0:	1ba6      	subs	r6, r4, r6
    15c2:	2e00      	cmp	r6, #0
    15c4:	dc00      	bgt.n	15c8 <__aeabi_dadd+0x44>
    15c6:	e0ff      	b.n	17c8 <__aeabi_dadd+0x244>
    15c8:	4663      	mov	r3, ip
    15ca:	2b00      	cmp	r3, #0
    15cc:	d139      	bne.n	1642 <__aeabi_dadd+0xbe>
    15ce:	0003      	movs	r3, r0
    15d0:	4313      	orrs	r3, r2
    15d2:	d000      	beq.n	15d6 <__aeabi_dadd+0x52>
    15d4:	e0d9      	b.n	178a <__aeabi_dadd+0x206>
    15d6:	076b      	lsls	r3, r5, #29
    15d8:	d009      	beq.n	15ee <__aeabi_dadd+0x6a>
    15da:	230f      	movs	r3, #15
    15dc:	402b      	ands	r3, r5
    15de:	2b04      	cmp	r3, #4
    15e0:	d005      	beq.n	15ee <__aeabi_dadd+0x6a>
    15e2:	1d2b      	adds	r3, r5, #4
    15e4:	42ab      	cmp	r3, r5
    15e6:	41ad      	sbcs	r5, r5
    15e8:	426d      	negs	r5, r5
    15ea:	1949      	adds	r1, r1, r5
    15ec:	001d      	movs	r5, r3
    15ee:	020b      	lsls	r3, r1, #8
    15f0:	d400      	bmi.n	15f4 <__aeabi_dadd+0x70>
    15f2:	e082      	b.n	16fa <__aeabi_dadd+0x176>
    15f4:	4bca      	ldr	r3, [pc, #808]	; (1920 <__aeabi_dadd+0x39c>)
    15f6:	3401      	adds	r4, #1
    15f8:	429c      	cmp	r4, r3
    15fa:	d100      	bne.n	15fe <__aeabi_dadd+0x7a>
    15fc:	e0fe      	b.n	17fc <__aeabi_dadd+0x278>
    15fe:	000a      	movs	r2, r1
    1600:	4656      	mov	r6, sl
    1602:	4bc8      	ldr	r3, [pc, #800]	; (1924 <__aeabi_dadd+0x3a0>)
    1604:	08ed      	lsrs	r5, r5, #3
    1606:	401a      	ands	r2, r3
    1608:	0750      	lsls	r0, r2, #29
    160a:	0564      	lsls	r4, r4, #21
    160c:	0252      	lsls	r2, r2, #9
    160e:	4305      	orrs	r5, r0
    1610:	0b12      	lsrs	r2, r2, #12
    1612:	0d64      	lsrs	r4, r4, #21
    1614:	2100      	movs	r1, #0
    1616:	0312      	lsls	r2, r2, #12
    1618:	0d0b      	lsrs	r3, r1, #20
    161a:	051b      	lsls	r3, r3, #20
    161c:	0564      	lsls	r4, r4, #21
    161e:	0b12      	lsrs	r2, r2, #12
    1620:	431a      	orrs	r2, r3
    1622:	0863      	lsrs	r3, r4, #1
    1624:	4cc0      	ldr	r4, [pc, #768]	; (1928 <__aeabi_dadd+0x3a4>)
    1626:	07f6      	lsls	r6, r6, #31
    1628:	4014      	ands	r4, r2
    162a:	431c      	orrs	r4, r3
    162c:	0064      	lsls	r4, r4, #1
    162e:	0864      	lsrs	r4, r4, #1
    1630:	4334      	orrs	r4, r6
    1632:	0028      	movs	r0, r5
    1634:	0021      	movs	r1, r4
    1636:	bc3c      	pop	{r2, r3, r4, r5}
    1638:	4690      	mov	r8, r2
    163a:	4699      	mov	r9, r3
    163c:	46a2      	mov	sl, r4
    163e:	46ab      	mov	fp, r5
    1640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1642:	4bb7      	ldr	r3, [pc, #732]	; (1920 <__aeabi_dadd+0x39c>)
    1644:	429c      	cmp	r4, r3
    1646:	d0c6      	beq.n	15d6 <__aeabi_dadd+0x52>
    1648:	2380      	movs	r3, #128	; 0x80
    164a:	041b      	lsls	r3, r3, #16
    164c:	4318      	orrs	r0, r3
    164e:	2e38      	cmp	r6, #56	; 0x38
    1650:	dd00      	ble.n	1654 <__aeabi_dadd+0xd0>
    1652:	e0eb      	b.n	182c <__aeabi_dadd+0x2a8>
    1654:	2e1f      	cmp	r6, #31
    1656:	dd00      	ble.n	165a <__aeabi_dadd+0xd6>
    1658:	e11e      	b.n	1898 <__aeabi_dadd+0x314>
    165a:	2320      	movs	r3, #32
    165c:	1b9b      	subs	r3, r3, r6
    165e:	469c      	mov	ip, r3
    1660:	0003      	movs	r3, r0
    1662:	4667      	mov	r7, ip
    1664:	40bb      	lsls	r3, r7
    1666:	4698      	mov	r8, r3
    1668:	0013      	movs	r3, r2
    166a:	4647      	mov	r7, r8
    166c:	40f3      	lsrs	r3, r6
    166e:	433b      	orrs	r3, r7
    1670:	4667      	mov	r7, ip
    1672:	40ba      	lsls	r2, r7
    1674:	1e57      	subs	r7, r2, #1
    1676:	41ba      	sbcs	r2, r7
    1678:	4313      	orrs	r3, r2
    167a:	0002      	movs	r2, r0
    167c:	40f2      	lsrs	r2, r6
    167e:	1aeb      	subs	r3, r5, r3
    1680:	429d      	cmp	r5, r3
    1682:	41b6      	sbcs	r6, r6
    1684:	001d      	movs	r5, r3
    1686:	1a8a      	subs	r2, r1, r2
    1688:	4276      	negs	r6, r6
    168a:	1b91      	subs	r1, r2, r6
    168c:	020b      	lsls	r3, r1, #8
    168e:	d531      	bpl.n	16f4 <__aeabi_dadd+0x170>
    1690:	024a      	lsls	r2, r1, #9
    1692:	0a56      	lsrs	r6, r2, #9
    1694:	2e00      	cmp	r6, #0
    1696:	d100      	bne.n	169a <__aeabi_dadd+0x116>
    1698:	e0b4      	b.n	1804 <__aeabi_dadd+0x280>
    169a:	0030      	movs	r0, r6
    169c:	f000 fe72 	bl	2384 <__clzsi2>
    16a0:	0003      	movs	r3, r0
    16a2:	3b08      	subs	r3, #8
    16a4:	2b1f      	cmp	r3, #31
    16a6:	dd00      	ble.n	16aa <__aeabi_dadd+0x126>
    16a8:	e0b5      	b.n	1816 <__aeabi_dadd+0x292>
    16aa:	2220      	movs	r2, #32
    16ac:	0029      	movs	r1, r5
    16ae:	1ad2      	subs	r2, r2, r3
    16b0:	40d1      	lsrs	r1, r2
    16b2:	409e      	lsls	r6, r3
    16b4:	000a      	movs	r2, r1
    16b6:	409d      	lsls	r5, r3
    16b8:	4332      	orrs	r2, r6
    16ba:	429c      	cmp	r4, r3
    16bc:	dd00      	ble.n	16c0 <__aeabi_dadd+0x13c>
    16be:	e0b1      	b.n	1824 <__aeabi_dadd+0x2a0>
    16c0:	1b1c      	subs	r4, r3, r4
    16c2:	1c63      	adds	r3, r4, #1
    16c4:	2b1f      	cmp	r3, #31
    16c6:	dd00      	ble.n	16ca <__aeabi_dadd+0x146>
    16c8:	e0d5      	b.n	1876 <__aeabi_dadd+0x2f2>
    16ca:	2120      	movs	r1, #32
    16cc:	0014      	movs	r4, r2
    16ce:	0028      	movs	r0, r5
    16d0:	1ac9      	subs	r1, r1, r3
    16d2:	408c      	lsls	r4, r1
    16d4:	40d8      	lsrs	r0, r3
    16d6:	408d      	lsls	r5, r1
    16d8:	4304      	orrs	r4, r0
    16da:	40da      	lsrs	r2, r3
    16dc:	1e68      	subs	r0, r5, #1
    16de:	4185      	sbcs	r5, r0
    16e0:	0011      	movs	r1, r2
    16e2:	4325      	orrs	r5, r4
    16e4:	2400      	movs	r4, #0
    16e6:	e776      	b.n	15d6 <__aeabi_dadd+0x52>
    16e8:	4641      	mov	r1, r8
    16ea:	4331      	orrs	r1, r6
    16ec:	d100      	bne.n	16f0 <__aeabi_dadd+0x16c>
    16ee:	e234      	b.n	1b5a <__aeabi_dadd+0x5d6>
    16f0:	0031      	movs	r1, r6
    16f2:	4645      	mov	r5, r8
    16f4:	076b      	lsls	r3, r5, #29
    16f6:	d000      	beq.n	16fa <__aeabi_dadd+0x176>
    16f8:	e76f      	b.n	15da <__aeabi_dadd+0x56>
    16fa:	4656      	mov	r6, sl
    16fc:	0748      	lsls	r0, r1, #29
    16fe:	08ed      	lsrs	r5, r5, #3
    1700:	08c9      	lsrs	r1, r1, #3
    1702:	4305      	orrs	r5, r0
    1704:	4b86      	ldr	r3, [pc, #536]	; (1920 <__aeabi_dadd+0x39c>)
    1706:	429c      	cmp	r4, r3
    1708:	d035      	beq.n	1776 <__aeabi_dadd+0x1f2>
    170a:	030a      	lsls	r2, r1, #12
    170c:	0564      	lsls	r4, r4, #21
    170e:	0b12      	lsrs	r2, r2, #12
    1710:	0d64      	lsrs	r4, r4, #21
    1712:	e77f      	b.n	1614 <__aeabi_dadd+0x90>
    1714:	4663      	mov	r3, ip
    1716:	1ae3      	subs	r3, r4, r3
    1718:	469b      	mov	fp, r3
    171a:	2b00      	cmp	r3, #0
    171c:	dc00      	bgt.n	1720 <__aeabi_dadd+0x19c>
    171e:	e08b      	b.n	1838 <__aeabi_dadd+0x2b4>
    1720:	4667      	mov	r7, ip
    1722:	2f00      	cmp	r7, #0
    1724:	d03c      	beq.n	17a0 <__aeabi_dadd+0x21c>
    1726:	4f7e      	ldr	r7, [pc, #504]	; (1920 <__aeabi_dadd+0x39c>)
    1728:	42bc      	cmp	r4, r7
    172a:	d100      	bne.n	172e <__aeabi_dadd+0x1aa>
    172c:	e753      	b.n	15d6 <__aeabi_dadd+0x52>
    172e:	2780      	movs	r7, #128	; 0x80
    1730:	043f      	lsls	r7, r7, #16
    1732:	4338      	orrs	r0, r7
    1734:	465b      	mov	r3, fp
    1736:	2b38      	cmp	r3, #56	; 0x38
    1738:	dc00      	bgt.n	173c <__aeabi_dadd+0x1b8>
    173a:	e0f7      	b.n	192c <__aeabi_dadd+0x3a8>
    173c:	4302      	orrs	r2, r0
    173e:	1e50      	subs	r0, r2, #1
    1740:	4182      	sbcs	r2, r0
    1742:	2000      	movs	r0, #0
    1744:	b2d2      	uxtb	r2, r2
    1746:	1953      	adds	r3, r2, r5
    1748:	1842      	adds	r2, r0, r1
    174a:	42ab      	cmp	r3, r5
    174c:	4189      	sbcs	r1, r1
    174e:	001d      	movs	r5, r3
    1750:	4249      	negs	r1, r1
    1752:	1889      	adds	r1, r1, r2
    1754:	020b      	lsls	r3, r1, #8
    1756:	d5cd      	bpl.n	16f4 <__aeabi_dadd+0x170>
    1758:	4b71      	ldr	r3, [pc, #452]	; (1920 <__aeabi_dadd+0x39c>)
    175a:	3401      	adds	r4, #1
    175c:	429c      	cmp	r4, r3
    175e:	d100      	bne.n	1762 <__aeabi_dadd+0x1de>
    1760:	e13d      	b.n	19de <__aeabi_dadd+0x45a>
    1762:	2001      	movs	r0, #1
    1764:	4a6f      	ldr	r2, [pc, #444]	; (1924 <__aeabi_dadd+0x3a0>)
    1766:	086b      	lsrs	r3, r5, #1
    1768:	400a      	ands	r2, r1
    176a:	4028      	ands	r0, r5
    176c:	4318      	orrs	r0, r3
    176e:	07d5      	lsls	r5, r2, #31
    1770:	4305      	orrs	r5, r0
    1772:	0851      	lsrs	r1, r2, #1
    1774:	e72f      	b.n	15d6 <__aeabi_dadd+0x52>
    1776:	002b      	movs	r3, r5
    1778:	430b      	orrs	r3, r1
    177a:	d100      	bne.n	177e <__aeabi_dadd+0x1fa>
    177c:	e1cb      	b.n	1b16 <__aeabi_dadd+0x592>
    177e:	2380      	movs	r3, #128	; 0x80
    1780:	031b      	lsls	r3, r3, #12
    1782:	430b      	orrs	r3, r1
    1784:	031a      	lsls	r2, r3, #12
    1786:	0b12      	lsrs	r2, r2, #12
    1788:	e744      	b.n	1614 <__aeabi_dadd+0x90>
    178a:	3e01      	subs	r6, #1
    178c:	2e00      	cmp	r6, #0
    178e:	d16d      	bne.n	186c <__aeabi_dadd+0x2e8>
    1790:	1aae      	subs	r6, r5, r2
    1792:	42b5      	cmp	r5, r6
    1794:	419b      	sbcs	r3, r3
    1796:	1a09      	subs	r1, r1, r0
    1798:	425b      	negs	r3, r3
    179a:	1ac9      	subs	r1, r1, r3
    179c:	0035      	movs	r5, r6
    179e:	e775      	b.n	168c <__aeabi_dadd+0x108>
    17a0:	0007      	movs	r7, r0
    17a2:	4317      	orrs	r7, r2
    17a4:	d100      	bne.n	17a8 <__aeabi_dadd+0x224>
    17a6:	e716      	b.n	15d6 <__aeabi_dadd+0x52>
    17a8:	2301      	movs	r3, #1
    17aa:	425b      	negs	r3, r3
    17ac:	469c      	mov	ip, r3
    17ae:	44e3      	add	fp, ip
    17b0:	465b      	mov	r3, fp
    17b2:	2b00      	cmp	r3, #0
    17b4:	d000      	beq.n	17b8 <__aeabi_dadd+0x234>
    17b6:	e0e0      	b.n	197a <__aeabi_dadd+0x3f6>
    17b8:	18aa      	adds	r2, r5, r2
    17ba:	42aa      	cmp	r2, r5
    17bc:	419b      	sbcs	r3, r3
    17be:	1809      	adds	r1, r1, r0
    17c0:	425b      	negs	r3, r3
    17c2:	1859      	adds	r1, r3, r1
    17c4:	0015      	movs	r5, r2
    17c6:	e7c5      	b.n	1754 <__aeabi_dadd+0x1d0>
    17c8:	2e00      	cmp	r6, #0
    17ca:	d175      	bne.n	18b8 <__aeabi_dadd+0x334>
    17cc:	1c66      	adds	r6, r4, #1
    17ce:	0576      	lsls	r6, r6, #21
    17d0:	0d76      	lsrs	r6, r6, #21
    17d2:	2e01      	cmp	r6, #1
    17d4:	dc00      	bgt.n	17d8 <__aeabi_dadd+0x254>
    17d6:	e0f3      	b.n	19c0 <__aeabi_dadd+0x43c>
    17d8:	1aae      	subs	r6, r5, r2
    17da:	46b0      	mov	r8, r6
    17dc:	4545      	cmp	r5, r8
    17de:	41bf      	sbcs	r7, r7
    17e0:	1a0e      	subs	r6, r1, r0
    17e2:	427f      	negs	r7, r7
    17e4:	1bf6      	subs	r6, r6, r7
    17e6:	0237      	lsls	r7, r6, #8
    17e8:	d400      	bmi.n	17ec <__aeabi_dadd+0x268>
    17ea:	e08f      	b.n	190c <__aeabi_dadd+0x388>
    17ec:	1b55      	subs	r5, r2, r5
    17ee:	42aa      	cmp	r2, r5
    17f0:	41b6      	sbcs	r6, r6
    17f2:	1a41      	subs	r1, r0, r1
    17f4:	4276      	negs	r6, r6
    17f6:	1b8e      	subs	r6, r1, r6
    17f8:	469a      	mov	sl, r3
    17fa:	e74b      	b.n	1694 <__aeabi_dadd+0x110>
    17fc:	4656      	mov	r6, sl
    17fe:	2200      	movs	r2, #0
    1800:	2500      	movs	r5, #0
    1802:	e707      	b.n	1614 <__aeabi_dadd+0x90>
    1804:	0028      	movs	r0, r5
    1806:	f000 fdbd 	bl	2384 <__clzsi2>
    180a:	3020      	adds	r0, #32
    180c:	0003      	movs	r3, r0
    180e:	3b08      	subs	r3, #8
    1810:	2b1f      	cmp	r3, #31
    1812:	dc00      	bgt.n	1816 <__aeabi_dadd+0x292>
    1814:	e749      	b.n	16aa <__aeabi_dadd+0x126>
    1816:	002a      	movs	r2, r5
    1818:	3828      	subs	r0, #40	; 0x28
    181a:	4082      	lsls	r2, r0
    181c:	2500      	movs	r5, #0
    181e:	429c      	cmp	r4, r3
    1820:	dc00      	bgt.n	1824 <__aeabi_dadd+0x2a0>
    1822:	e74d      	b.n	16c0 <__aeabi_dadd+0x13c>
    1824:	493f      	ldr	r1, [pc, #252]	; (1924 <__aeabi_dadd+0x3a0>)
    1826:	1ae4      	subs	r4, r4, r3
    1828:	4011      	ands	r1, r2
    182a:	e6d4      	b.n	15d6 <__aeabi_dadd+0x52>
    182c:	4302      	orrs	r2, r0
    182e:	1e50      	subs	r0, r2, #1
    1830:	4182      	sbcs	r2, r0
    1832:	b2d3      	uxtb	r3, r2
    1834:	2200      	movs	r2, #0
    1836:	e722      	b.n	167e <__aeabi_dadd+0xfa>
    1838:	2b00      	cmp	r3, #0
    183a:	d000      	beq.n	183e <__aeabi_dadd+0x2ba>
    183c:	e0f3      	b.n	1a26 <__aeabi_dadd+0x4a2>
    183e:	1c63      	adds	r3, r4, #1
    1840:	469c      	mov	ip, r3
    1842:	055b      	lsls	r3, r3, #21
    1844:	0d5b      	lsrs	r3, r3, #21
    1846:	2b01      	cmp	r3, #1
    1848:	dc00      	bgt.n	184c <__aeabi_dadd+0x2c8>
    184a:	e09f      	b.n	198c <__aeabi_dadd+0x408>
    184c:	4b34      	ldr	r3, [pc, #208]	; (1920 <__aeabi_dadd+0x39c>)
    184e:	459c      	cmp	ip, r3
    1850:	d100      	bne.n	1854 <__aeabi_dadd+0x2d0>
    1852:	e0c3      	b.n	19dc <__aeabi_dadd+0x458>
    1854:	18aa      	adds	r2, r5, r2
    1856:	1809      	adds	r1, r1, r0
    1858:	42aa      	cmp	r2, r5
    185a:	4180      	sbcs	r0, r0
    185c:	4240      	negs	r0, r0
    185e:	1841      	adds	r1, r0, r1
    1860:	07cd      	lsls	r5, r1, #31
    1862:	0852      	lsrs	r2, r2, #1
    1864:	4315      	orrs	r5, r2
    1866:	0849      	lsrs	r1, r1, #1
    1868:	4664      	mov	r4, ip
    186a:	e6b4      	b.n	15d6 <__aeabi_dadd+0x52>
    186c:	4b2c      	ldr	r3, [pc, #176]	; (1920 <__aeabi_dadd+0x39c>)
    186e:	429c      	cmp	r4, r3
    1870:	d000      	beq.n	1874 <__aeabi_dadd+0x2f0>
    1872:	e6ec      	b.n	164e <__aeabi_dadd+0xca>
    1874:	e6af      	b.n	15d6 <__aeabi_dadd+0x52>
    1876:	0011      	movs	r1, r2
    1878:	3c1f      	subs	r4, #31
    187a:	40e1      	lsrs	r1, r4
    187c:	000c      	movs	r4, r1
    187e:	2b20      	cmp	r3, #32
    1880:	d100      	bne.n	1884 <__aeabi_dadd+0x300>
    1882:	e07f      	b.n	1984 <__aeabi_dadd+0x400>
    1884:	2140      	movs	r1, #64	; 0x40
    1886:	1acb      	subs	r3, r1, r3
    1888:	409a      	lsls	r2, r3
    188a:	4315      	orrs	r5, r2
    188c:	1e6a      	subs	r2, r5, #1
    188e:	4195      	sbcs	r5, r2
    1890:	2100      	movs	r1, #0
    1892:	4325      	orrs	r5, r4
    1894:	2400      	movs	r4, #0
    1896:	e72d      	b.n	16f4 <__aeabi_dadd+0x170>
    1898:	0033      	movs	r3, r6
    189a:	0007      	movs	r7, r0
    189c:	3b20      	subs	r3, #32
    189e:	40df      	lsrs	r7, r3
    18a0:	003b      	movs	r3, r7
    18a2:	2e20      	cmp	r6, #32
    18a4:	d070      	beq.n	1988 <__aeabi_dadd+0x404>
    18a6:	2740      	movs	r7, #64	; 0x40
    18a8:	1bbe      	subs	r6, r7, r6
    18aa:	40b0      	lsls	r0, r6
    18ac:	4302      	orrs	r2, r0
    18ae:	1e50      	subs	r0, r2, #1
    18b0:	4182      	sbcs	r2, r0
    18b2:	4313      	orrs	r3, r2
    18b4:	2200      	movs	r2, #0
    18b6:	e6e2      	b.n	167e <__aeabi_dadd+0xfa>
    18b8:	2c00      	cmp	r4, #0
    18ba:	d04f      	beq.n	195c <__aeabi_dadd+0x3d8>
    18bc:	4c18      	ldr	r4, [pc, #96]	; (1920 <__aeabi_dadd+0x39c>)
    18be:	45a4      	cmp	ip, r4
    18c0:	d100      	bne.n	18c4 <__aeabi_dadd+0x340>
    18c2:	e0ab      	b.n	1a1c <__aeabi_dadd+0x498>
    18c4:	2480      	movs	r4, #128	; 0x80
    18c6:	0424      	lsls	r4, r4, #16
    18c8:	4276      	negs	r6, r6
    18ca:	4321      	orrs	r1, r4
    18cc:	2e38      	cmp	r6, #56	; 0x38
    18ce:	dd00      	ble.n	18d2 <__aeabi_dadd+0x34e>
    18d0:	e0df      	b.n	1a92 <__aeabi_dadd+0x50e>
    18d2:	2e1f      	cmp	r6, #31
    18d4:	dd00      	ble.n	18d8 <__aeabi_dadd+0x354>
    18d6:	e143      	b.n	1b60 <__aeabi_dadd+0x5dc>
    18d8:	2720      	movs	r7, #32
    18da:	1bbc      	subs	r4, r7, r6
    18dc:	46a1      	mov	r9, r4
    18de:	000c      	movs	r4, r1
    18e0:	464f      	mov	r7, r9
    18e2:	40bc      	lsls	r4, r7
    18e4:	46a0      	mov	r8, r4
    18e6:	002c      	movs	r4, r5
    18e8:	4647      	mov	r7, r8
    18ea:	40f4      	lsrs	r4, r6
    18ec:	433c      	orrs	r4, r7
    18ee:	464f      	mov	r7, r9
    18f0:	40bd      	lsls	r5, r7
    18f2:	1e6f      	subs	r7, r5, #1
    18f4:	41bd      	sbcs	r5, r7
    18f6:	40f1      	lsrs	r1, r6
    18f8:	432c      	orrs	r4, r5
    18fa:	1b15      	subs	r5, r2, r4
    18fc:	42aa      	cmp	r2, r5
    18fe:	4192      	sbcs	r2, r2
    1900:	1a41      	subs	r1, r0, r1
    1902:	4252      	negs	r2, r2
    1904:	1a89      	subs	r1, r1, r2
    1906:	4664      	mov	r4, ip
    1908:	469a      	mov	sl, r3
    190a:	e6bf      	b.n	168c <__aeabi_dadd+0x108>
    190c:	4641      	mov	r1, r8
    190e:	4645      	mov	r5, r8
    1910:	4331      	orrs	r1, r6
    1912:	d000      	beq.n	1916 <__aeabi_dadd+0x392>
    1914:	e6be      	b.n	1694 <__aeabi_dadd+0x110>
    1916:	2600      	movs	r6, #0
    1918:	2400      	movs	r4, #0
    191a:	2500      	movs	r5, #0
    191c:	e6f2      	b.n	1704 <__aeabi_dadd+0x180>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	000007ff 	.word	0x000007ff
    1924:	ff7fffff 	.word	0xff7fffff
    1928:	800fffff 	.word	0x800fffff
    192c:	2b1f      	cmp	r3, #31
    192e:	dc59      	bgt.n	19e4 <__aeabi_dadd+0x460>
    1930:	2720      	movs	r7, #32
    1932:	1aff      	subs	r7, r7, r3
    1934:	46bc      	mov	ip, r7
    1936:	0007      	movs	r7, r0
    1938:	4663      	mov	r3, ip
    193a:	409f      	lsls	r7, r3
    193c:	465b      	mov	r3, fp
    193e:	46b9      	mov	r9, r7
    1940:	0017      	movs	r7, r2
    1942:	40df      	lsrs	r7, r3
    1944:	46b8      	mov	r8, r7
    1946:	464f      	mov	r7, r9
    1948:	4643      	mov	r3, r8
    194a:	431f      	orrs	r7, r3
    194c:	4663      	mov	r3, ip
    194e:	409a      	lsls	r2, r3
    1950:	1e53      	subs	r3, r2, #1
    1952:	419a      	sbcs	r2, r3
    1954:	465b      	mov	r3, fp
    1956:	433a      	orrs	r2, r7
    1958:	40d8      	lsrs	r0, r3
    195a:	e6f4      	b.n	1746 <__aeabi_dadd+0x1c2>
    195c:	000c      	movs	r4, r1
    195e:	432c      	orrs	r4, r5
    1960:	d05c      	beq.n	1a1c <__aeabi_dadd+0x498>
    1962:	43f6      	mvns	r6, r6
    1964:	2e00      	cmp	r6, #0
    1966:	d155      	bne.n	1a14 <__aeabi_dadd+0x490>
    1968:	1b55      	subs	r5, r2, r5
    196a:	42aa      	cmp	r2, r5
    196c:	41a4      	sbcs	r4, r4
    196e:	1a41      	subs	r1, r0, r1
    1970:	4264      	negs	r4, r4
    1972:	1b09      	subs	r1, r1, r4
    1974:	469a      	mov	sl, r3
    1976:	4664      	mov	r4, ip
    1978:	e688      	b.n	168c <__aeabi_dadd+0x108>
    197a:	4f96      	ldr	r7, [pc, #600]	; (1bd4 <__aeabi_dadd+0x650>)
    197c:	42bc      	cmp	r4, r7
    197e:	d000      	beq.n	1982 <__aeabi_dadd+0x3fe>
    1980:	e6d8      	b.n	1734 <__aeabi_dadd+0x1b0>
    1982:	e628      	b.n	15d6 <__aeabi_dadd+0x52>
    1984:	2200      	movs	r2, #0
    1986:	e780      	b.n	188a <__aeabi_dadd+0x306>
    1988:	2000      	movs	r0, #0
    198a:	e78f      	b.n	18ac <__aeabi_dadd+0x328>
    198c:	000b      	movs	r3, r1
    198e:	432b      	orrs	r3, r5
    1990:	2c00      	cmp	r4, #0
    1992:	d000      	beq.n	1996 <__aeabi_dadd+0x412>
    1994:	e0c2      	b.n	1b1c <__aeabi_dadd+0x598>
    1996:	2b00      	cmp	r3, #0
    1998:	d100      	bne.n	199c <__aeabi_dadd+0x418>
    199a:	e101      	b.n	1ba0 <__aeabi_dadd+0x61c>
    199c:	0003      	movs	r3, r0
    199e:	4313      	orrs	r3, r2
    19a0:	d100      	bne.n	19a4 <__aeabi_dadd+0x420>
    19a2:	e618      	b.n	15d6 <__aeabi_dadd+0x52>
    19a4:	18ab      	adds	r3, r5, r2
    19a6:	42ab      	cmp	r3, r5
    19a8:	41b6      	sbcs	r6, r6
    19aa:	1809      	adds	r1, r1, r0
    19ac:	4276      	negs	r6, r6
    19ae:	1871      	adds	r1, r6, r1
    19b0:	020a      	lsls	r2, r1, #8
    19b2:	d400      	bmi.n	19b6 <__aeabi_dadd+0x432>
    19b4:	e109      	b.n	1bca <__aeabi_dadd+0x646>
    19b6:	4a88      	ldr	r2, [pc, #544]	; (1bd8 <__aeabi_dadd+0x654>)
    19b8:	001d      	movs	r5, r3
    19ba:	4011      	ands	r1, r2
    19bc:	4664      	mov	r4, ip
    19be:	e60a      	b.n	15d6 <__aeabi_dadd+0x52>
    19c0:	2c00      	cmp	r4, #0
    19c2:	d15b      	bne.n	1a7c <__aeabi_dadd+0x4f8>
    19c4:	000e      	movs	r6, r1
    19c6:	432e      	orrs	r6, r5
    19c8:	d000      	beq.n	19cc <__aeabi_dadd+0x448>
    19ca:	e08a      	b.n	1ae2 <__aeabi_dadd+0x55e>
    19cc:	0001      	movs	r1, r0
    19ce:	4311      	orrs	r1, r2
    19d0:	d100      	bne.n	19d4 <__aeabi_dadd+0x450>
    19d2:	e0c2      	b.n	1b5a <__aeabi_dadd+0x5d6>
    19d4:	0001      	movs	r1, r0
    19d6:	0015      	movs	r5, r2
    19d8:	469a      	mov	sl, r3
    19da:	e5fc      	b.n	15d6 <__aeabi_dadd+0x52>
    19dc:	4664      	mov	r4, ip
    19de:	2100      	movs	r1, #0
    19e0:	2500      	movs	r5, #0
    19e2:	e68f      	b.n	1704 <__aeabi_dadd+0x180>
    19e4:	2320      	movs	r3, #32
    19e6:	425b      	negs	r3, r3
    19e8:	469c      	mov	ip, r3
    19ea:	44dc      	add	ip, fp
    19ec:	4663      	mov	r3, ip
    19ee:	0007      	movs	r7, r0
    19f0:	40df      	lsrs	r7, r3
    19f2:	465b      	mov	r3, fp
    19f4:	46bc      	mov	ip, r7
    19f6:	2b20      	cmp	r3, #32
    19f8:	d100      	bne.n	19fc <__aeabi_dadd+0x478>
    19fa:	e0ac      	b.n	1b56 <__aeabi_dadd+0x5d2>
    19fc:	2340      	movs	r3, #64	; 0x40
    19fe:	465f      	mov	r7, fp
    1a00:	1bdb      	subs	r3, r3, r7
    1a02:	4098      	lsls	r0, r3
    1a04:	4302      	orrs	r2, r0
    1a06:	1e50      	subs	r0, r2, #1
    1a08:	4182      	sbcs	r2, r0
    1a0a:	4663      	mov	r3, ip
    1a0c:	4313      	orrs	r3, r2
    1a0e:	001a      	movs	r2, r3
    1a10:	2000      	movs	r0, #0
    1a12:	e698      	b.n	1746 <__aeabi_dadd+0x1c2>
    1a14:	4c6f      	ldr	r4, [pc, #444]	; (1bd4 <__aeabi_dadd+0x650>)
    1a16:	45a4      	cmp	ip, r4
    1a18:	d000      	beq.n	1a1c <__aeabi_dadd+0x498>
    1a1a:	e757      	b.n	18cc <__aeabi_dadd+0x348>
    1a1c:	0001      	movs	r1, r0
    1a1e:	0015      	movs	r5, r2
    1a20:	4664      	mov	r4, ip
    1a22:	469a      	mov	sl, r3
    1a24:	e5d7      	b.n	15d6 <__aeabi_dadd+0x52>
    1a26:	2c00      	cmp	r4, #0
    1a28:	d139      	bne.n	1a9e <__aeabi_dadd+0x51a>
    1a2a:	000c      	movs	r4, r1
    1a2c:	432c      	orrs	r4, r5
    1a2e:	d06e      	beq.n	1b0e <__aeabi_dadd+0x58a>
    1a30:	43db      	mvns	r3, r3
    1a32:	2b00      	cmp	r3, #0
    1a34:	d01a      	beq.n	1a6c <__aeabi_dadd+0x4e8>
    1a36:	4c67      	ldr	r4, [pc, #412]	; (1bd4 <__aeabi_dadd+0x650>)
    1a38:	45a4      	cmp	ip, r4
    1a3a:	d068      	beq.n	1b0e <__aeabi_dadd+0x58a>
    1a3c:	2b38      	cmp	r3, #56	; 0x38
    1a3e:	dd00      	ble.n	1a42 <__aeabi_dadd+0x4be>
    1a40:	e0a4      	b.n	1b8c <__aeabi_dadd+0x608>
    1a42:	2b1f      	cmp	r3, #31
    1a44:	dd00      	ble.n	1a48 <__aeabi_dadd+0x4c4>
    1a46:	e0ae      	b.n	1ba6 <__aeabi_dadd+0x622>
    1a48:	2420      	movs	r4, #32
    1a4a:	000f      	movs	r7, r1
    1a4c:	1ae4      	subs	r4, r4, r3
    1a4e:	40a7      	lsls	r7, r4
    1a50:	46b9      	mov	r9, r7
    1a52:	002f      	movs	r7, r5
    1a54:	40df      	lsrs	r7, r3
    1a56:	46b8      	mov	r8, r7
    1a58:	46a3      	mov	fp, r4
    1a5a:	464f      	mov	r7, r9
    1a5c:	4644      	mov	r4, r8
    1a5e:	4327      	orrs	r7, r4
    1a60:	465c      	mov	r4, fp
    1a62:	40a5      	lsls	r5, r4
    1a64:	1e6c      	subs	r4, r5, #1
    1a66:	41a5      	sbcs	r5, r4
    1a68:	40d9      	lsrs	r1, r3
    1a6a:	433d      	orrs	r5, r7
    1a6c:	18ad      	adds	r5, r5, r2
    1a6e:	4295      	cmp	r5, r2
    1a70:	419b      	sbcs	r3, r3
    1a72:	1809      	adds	r1, r1, r0
    1a74:	425b      	negs	r3, r3
    1a76:	1859      	adds	r1, r3, r1
    1a78:	4664      	mov	r4, ip
    1a7a:	e66b      	b.n	1754 <__aeabi_dadd+0x1d0>
    1a7c:	000c      	movs	r4, r1
    1a7e:	432c      	orrs	r4, r5
    1a80:	d115      	bne.n	1aae <__aeabi_dadd+0x52a>
    1a82:	0001      	movs	r1, r0
    1a84:	4311      	orrs	r1, r2
    1a86:	d07b      	beq.n	1b80 <__aeabi_dadd+0x5fc>
    1a88:	0001      	movs	r1, r0
    1a8a:	0015      	movs	r5, r2
    1a8c:	469a      	mov	sl, r3
    1a8e:	4c51      	ldr	r4, [pc, #324]	; (1bd4 <__aeabi_dadd+0x650>)
    1a90:	e5a1      	b.n	15d6 <__aeabi_dadd+0x52>
    1a92:	430d      	orrs	r5, r1
    1a94:	1e69      	subs	r1, r5, #1
    1a96:	418d      	sbcs	r5, r1
    1a98:	2100      	movs	r1, #0
    1a9a:	b2ec      	uxtb	r4, r5
    1a9c:	e72d      	b.n	18fa <__aeabi_dadd+0x376>
    1a9e:	4c4d      	ldr	r4, [pc, #308]	; (1bd4 <__aeabi_dadd+0x650>)
    1aa0:	45a4      	cmp	ip, r4
    1aa2:	d034      	beq.n	1b0e <__aeabi_dadd+0x58a>
    1aa4:	2480      	movs	r4, #128	; 0x80
    1aa6:	0424      	lsls	r4, r4, #16
    1aa8:	425b      	negs	r3, r3
    1aaa:	4321      	orrs	r1, r4
    1aac:	e7c6      	b.n	1a3c <__aeabi_dadd+0x4b8>
    1aae:	0004      	movs	r4, r0
    1ab0:	4314      	orrs	r4, r2
    1ab2:	d04e      	beq.n	1b52 <__aeabi_dadd+0x5ce>
    1ab4:	08ed      	lsrs	r5, r5, #3
    1ab6:	074c      	lsls	r4, r1, #29
    1ab8:	432c      	orrs	r4, r5
    1aba:	2580      	movs	r5, #128	; 0x80
    1abc:	08c9      	lsrs	r1, r1, #3
    1abe:	032d      	lsls	r5, r5, #12
    1ac0:	4229      	tst	r1, r5
    1ac2:	d008      	beq.n	1ad6 <__aeabi_dadd+0x552>
    1ac4:	08c6      	lsrs	r6, r0, #3
    1ac6:	422e      	tst	r6, r5
    1ac8:	d105      	bne.n	1ad6 <__aeabi_dadd+0x552>
    1aca:	08d2      	lsrs	r2, r2, #3
    1acc:	0741      	lsls	r1, r0, #29
    1ace:	4311      	orrs	r1, r2
    1ad0:	000c      	movs	r4, r1
    1ad2:	469a      	mov	sl, r3
    1ad4:	0031      	movs	r1, r6
    1ad6:	0f62      	lsrs	r2, r4, #29
    1ad8:	00c9      	lsls	r1, r1, #3
    1ada:	00e5      	lsls	r5, r4, #3
    1adc:	4311      	orrs	r1, r2
    1ade:	4c3d      	ldr	r4, [pc, #244]	; (1bd4 <__aeabi_dadd+0x650>)
    1ae0:	e579      	b.n	15d6 <__aeabi_dadd+0x52>
    1ae2:	0006      	movs	r6, r0
    1ae4:	4316      	orrs	r6, r2
    1ae6:	d100      	bne.n	1aea <__aeabi_dadd+0x566>
    1ae8:	e575      	b.n	15d6 <__aeabi_dadd+0x52>
    1aea:	1aae      	subs	r6, r5, r2
    1aec:	46b0      	mov	r8, r6
    1aee:	4545      	cmp	r5, r8
    1af0:	41bf      	sbcs	r7, r7
    1af2:	1a0e      	subs	r6, r1, r0
    1af4:	427f      	negs	r7, r7
    1af6:	1bf6      	subs	r6, r6, r7
    1af8:	0237      	lsls	r7, r6, #8
    1afa:	d400      	bmi.n	1afe <__aeabi_dadd+0x57a>
    1afc:	e5f4      	b.n	16e8 <__aeabi_dadd+0x164>
    1afe:	1b55      	subs	r5, r2, r5
    1b00:	42aa      	cmp	r2, r5
    1b02:	41b6      	sbcs	r6, r6
    1b04:	1a41      	subs	r1, r0, r1
    1b06:	4276      	negs	r6, r6
    1b08:	1b89      	subs	r1, r1, r6
    1b0a:	469a      	mov	sl, r3
    1b0c:	e563      	b.n	15d6 <__aeabi_dadd+0x52>
    1b0e:	0001      	movs	r1, r0
    1b10:	0015      	movs	r5, r2
    1b12:	4664      	mov	r4, ip
    1b14:	e55f      	b.n	15d6 <__aeabi_dadd+0x52>
    1b16:	2200      	movs	r2, #0
    1b18:	2500      	movs	r5, #0
    1b1a:	e57b      	b.n	1614 <__aeabi_dadd+0x90>
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d03b      	beq.n	1b98 <__aeabi_dadd+0x614>
    1b20:	0003      	movs	r3, r0
    1b22:	4313      	orrs	r3, r2
    1b24:	d015      	beq.n	1b52 <__aeabi_dadd+0x5ce>
    1b26:	08ed      	lsrs	r5, r5, #3
    1b28:	074b      	lsls	r3, r1, #29
    1b2a:	432b      	orrs	r3, r5
    1b2c:	2580      	movs	r5, #128	; 0x80
    1b2e:	08c9      	lsrs	r1, r1, #3
    1b30:	032d      	lsls	r5, r5, #12
    1b32:	4229      	tst	r1, r5
    1b34:	d007      	beq.n	1b46 <__aeabi_dadd+0x5c2>
    1b36:	08c4      	lsrs	r4, r0, #3
    1b38:	422c      	tst	r4, r5
    1b3a:	d104      	bne.n	1b46 <__aeabi_dadd+0x5c2>
    1b3c:	0741      	lsls	r1, r0, #29
    1b3e:	000b      	movs	r3, r1
    1b40:	0021      	movs	r1, r4
    1b42:	08d2      	lsrs	r2, r2, #3
    1b44:	4313      	orrs	r3, r2
    1b46:	00c9      	lsls	r1, r1, #3
    1b48:	0f5a      	lsrs	r2, r3, #29
    1b4a:	4311      	orrs	r1, r2
    1b4c:	00dd      	lsls	r5, r3, #3
    1b4e:	4c21      	ldr	r4, [pc, #132]	; (1bd4 <__aeabi_dadd+0x650>)
    1b50:	e541      	b.n	15d6 <__aeabi_dadd+0x52>
    1b52:	4c20      	ldr	r4, [pc, #128]	; (1bd4 <__aeabi_dadd+0x650>)
    1b54:	e53f      	b.n	15d6 <__aeabi_dadd+0x52>
    1b56:	2000      	movs	r0, #0
    1b58:	e754      	b.n	1a04 <__aeabi_dadd+0x480>
    1b5a:	2600      	movs	r6, #0
    1b5c:	2500      	movs	r5, #0
    1b5e:	e5d1      	b.n	1704 <__aeabi_dadd+0x180>
    1b60:	0034      	movs	r4, r6
    1b62:	000f      	movs	r7, r1
    1b64:	3c20      	subs	r4, #32
    1b66:	40e7      	lsrs	r7, r4
    1b68:	003c      	movs	r4, r7
    1b6a:	2e20      	cmp	r6, #32
    1b6c:	d02b      	beq.n	1bc6 <__aeabi_dadd+0x642>
    1b6e:	2740      	movs	r7, #64	; 0x40
    1b70:	1bbe      	subs	r6, r7, r6
    1b72:	40b1      	lsls	r1, r6
    1b74:	430d      	orrs	r5, r1
    1b76:	1e69      	subs	r1, r5, #1
    1b78:	418d      	sbcs	r5, r1
    1b7a:	2100      	movs	r1, #0
    1b7c:	432c      	orrs	r4, r5
    1b7e:	e6bc      	b.n	18fa <__aeabi_dadd+0x376>
    1b80:	2180      	movs	r1, #128	; 0x80
    1b82:	2600      	movs	r6, #0
    1b84:	0309      	lsls	r1, r1, #12
    1b86:	4c13      	ldr	r4, [pc, #76]	; (1bd4 <__aeabi_dadd+0x650>)
    1b88:	2500      	movs	r5, #0
    1b8a:	e5bb      	b.n	1704 <__aeabi_dadd+0x180>
    1b8c:	430d      	orrs	r5, r1
    1b8e:	1e69      	subs	r1, r5, #1
    1b90:	418d      	sbcs	r5, r1
    1b92:	2100      	movs	r1, #0
    1b94:	b2ed      	uxtb	r5, r5
    1b96:	e769      	b.n	1a6c <__aeabi_dadd+0x4e8>
    1b98:	0001      	movs	r1, r0
    1b9a:	0015      	movs	r5, r2
    1b9c:	4c0d      	ldr	r4, [pc, #52]	; (1bd4 <__aeabi_dadd+0x650>)
    1b9e:	e51a      	b.n	15d6 <__aeabi_dadd+0x52>
    1ba0:	0001      	movs	r1, r0
    1ba2:	0015      	movs	r5, r2
    1ba4:	e517      	b.n	15d6 <__aeabi_dadd+0x52>
    1ba6:	001c      	movs	r4, r3
    1ba8:	000f      	movs	r7, r1
    1baa:	3c20      	subs	r4, #32
    1bac:	40e7      	lsrs	r7, r4
    1bae:	003c      	movs	r4, r7
    1bb0:	2b20      	cmp	r3, #32
    1bb2:	d00c      	beq.n	1bce <__aeabi_dadd+0x64a>
    1bb4:	2740      	movs	r7, #64	; 0x40
    1bb6:	1afb      	subs	r3, r7, r3
    1bb8:	4099      	lsls	r1, r3
    1bba:	430d      	orrs	r5, r1
    1bbc:	1e69      	subs	r1, r5, #1
    1bbe:	418d      	sbcs	r5, r1
    1bc0:	2100      	movs	r1, #0
    1bc2:	4325      	orrs	r5, r4
    1bc4:	e752      	b.n	1a6c <__aeabi_dadd+0x4e8>
    1bc6:	2100      	movs	r1, #0
    1bc8:	e7d4      	b.n	1b74 <__aeabi_dadd+0x5f0>
    1bca:	001d      	movs	r5, r3
    1bcc:	e592      	b.n	16f4 <__aeabi_dadd+0x170>
    1bce:	2100      	movs	r1, #0
    1bd0:	e7f3      	b.n	1bba <__aeabi_dadd+0x636>
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	000007ff 	.word	0x000007ff
    1bd8:	ff7fffff 	.word	0xff7fffff

00001bdc <__aeabi_dmul>:
    1bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bde:	465f      	mov	r7, fp
    1be0:	4656      	mov	r6, sl
    1be2:	464d      	mov	r5, r9
    1be4:	4644      	mov	r4, r8
    1be6:	b4f0      	push	{r4, r5, r6, r7}
    1be8:	030d      	lsls	r5, r1, #12
    1bea:	4699      	mov	r9, r3
    1bec:	004e      	lsls	r6, r1, #1
    1bee:	0b2b      	lsrs	r3, r5, #12
    1bf0:	b087      	sub	sp, #28
    1bf2:	0007      	movs	r7, r0
    1bf4:	4692      	mov	sl, r2
    1bf6:	4680      	mov	r8, r0
    1bf8:	469b      	mov	fp, r3
    1bfa:	0d76      	lsrs	r6, r6, #21
    1bfc:	0fcc      	lsrs	r4, r1, #31
    1bfe:	2e00      	cmp	r6, #0
    1c00:	d069      	beq.n	1cd6 <__aeabi_dmul+0xfa>
    1c02:	4b6d      	ldr	r3, [pc, #436]	; (1db8 <__aeabi_dmul+0x1dc>)
    1c04:	429e      	cmp	r6, r3
    1c06:	d035      	beq.n	1c74 <__aeabi_dmul+0x98>
    1c08:	465b      	mov	r3, fp
    1c0a:	2280      	movs	r2, #128	; 0x80
    1c0c:	00dd      	lsls	r5, r3, #3
    1c0e:	0412      	lsls	r2, r2, #16
    1c10:	0f43      	lsrs	r3, r0, #29
    1c12:	4313      	orrs	r3, r2
    1c14:	432b      	orrs	r3, r5
    1c16:	469b      	mov	fp, r3
    1c18:	00c3      	lsls	r3, r0, #3
    1c1a:	4698      	mov	r8, r3
    1c1c:	4b67      	ldr	r3, [pc, #412]	; (1dbc <__aeabi_dmul+0x1e0>)
    1c1e:	2700      	movs	r7, #0
    1c20:	469c      	mov	ip, r3
    1c22:	2300      	movs	r3, #0
    1c24:	4466      	add	r6, ip
    1c26:	9301      	str	r3, [sp, #4]
    1c28:	464a      	mov	r2, r9
    1c2a:	0315      	lsls	r5, r2, #12
    1c2c:	0050      	lsls	r0, r2, #1
    1c2e:	0fd2      	lsrs	r2, r2, #31
    1c30:	4653      	mov	r3, sl
    1c32:	0b2d      	lsrs	r5, r5, #12
    1c34:	0d40      	lsrs	r0, r0, #21
    1c36:	4691      	mov	r9, r2
    1c38:	d100      	bne.n	1c3c <__aeabi_dmul+0x60>
    1c3a:	e076      	b.n	1d2a <__aeabi_dmul+0x14e>
    1c3c:	4a5e      	ldr	r2, [pc, #376]	; (1db8 <__aeabi_dmul+0x1dc>)
    1c3e:	4290      	cmp	r0, r2
    1c40:	d06c      	beq.n	1d1c <__aeabi_dmul+0x140>
    1c42:	2280      	movs	r2, #128	; 0x80
    1c44:	0f5b      	lsrs	r3, r3, #29
    1c46:	0412      	lsls	r2, r2, #16
    1c48:	4313      	orrs	r3, r2
    1c4a:	4a5c      	ldr	r2, [pc, #368]	; (1dbc <__aeabi_dmul+0x1e0>)
    1c4c:	00ed      	lsls	r5, r5, #3
    1c4e:	4694      	mov	ip, r2
    1c50:	431d      	orrs	r5, r3
    1c52:	4653      	mov	r3, sl
    1c54:	2200      	movs	r2, #0
    1c56:	00db      	lsls	r3, r3, #3
    1c58:	4460      	add	r0, ip
    1c5a:	4649      	mov	r1, r9
    1c5c:	1836      	adds	r6, r6, r0
    1c5e:	1c70      	adds	r0, r6, #1
    1c60:	4061      	eors	r1, r4
    1c62:	9002      	str	r0, [sp, #8]
    1c64:	4317      	orrs	r7, r2
    1c66:	2f0f      	cmp	r7, #15
    1c68:	d900      	bls.n	1c6c <__aeabi_dmul+0x90>
    1c6a:	e0af      	b.n	1dcc <__aeabi_dmul+0x1f0>
    1c6c:	4854      	ldr	r0, [pc, #336]	; (1dc0 <__aeabi_dmul+0x1e4>)
    1c6e:	00bf      	lsls	r7, r7, #2
    1c70:	59c7      	ldr	r7, [r0, r7]
    1c72:	46bf      	mov	pc, r7
    1c74:	465b      	mov	r3, fp
    1c76:	431f      	orrs	r7, r3
    1c78:	d000      	beq.n	1c7c <__aeabi_dmul+0xa0>
    1c7a:	e088      	b.n	1d8e <__aeabi_dmul+0x1b2>
    1c7c:	2300      	movs	r3, #0
    1c7e:	469b      	mov	fp, r3
    1c80:	4698      	mov	r8, r3
    1c82:	3302      	adds	r3, #2
    1c84:	2708      	movs	r7, #8
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	e7ce      	b.n	1c28 <__aeabi_dmul+0x4c>
    1c8a:	4649      	mov	r1, r9
    1c8c:	2a02      	cmp	r2, #2
    1c8e:	d06a      	beq.n	1d66 <__aeabi_dmul+0x18a>
    1c90:	2a03      	cmp	r2, #3
    1c92:	d100      	bne.n	1c96 <__aeabi_dmul+0xba>
    1c94:	e209      	b.n	20aa <STACK_SIZE+0xaa>
    1c96:	2a01      	cmp	r2, #1
    1c98:	d000      	beq.n	1c9c <__aeabi_dmul+0xc0>
    1c9a:	e1bb      	b.n	2014 <STACK_SIZE+0x14>
    1c9c:	4011      	ands	r1, r2
    1c9e:	2200      	movs	r2, #0
    1ca0:	2300      	movs	r3, #0
    1ca2:	2500      	movs	r5, #0
    1ca4:	4690      	mov	r8, r2
    1ca6:	b2cc      	uxtb	r4, r1
    1ca8:	2100      	movs	r1, #0
    1caa:	032d      	lsls	r5, r5, #12
    1cac:	0d0a      	lsrs	r2, r1, #20
    1cae:	0512      	lsls	r2, r2, #20
    1cb0:	0b2d      	lsrs	r5, r5, #12
    1cb2:	4315      	orrs	r5, r2
    1cb4:	4a43      	ldr	r2, [pc, #268]	; (1dc4 <__aeabi_dmul+0x1e8>)
    1cb6:	051b      	lsls	r3, r3, #20
    1cb8:	4015      	ands	r5, r2
    1cba:	431d      	orrs	r5, r3
    1cbc:	006d      	lsls	r5, r5, #1
    1cbe:	07e4      	lsls	r4, r4, #31
    1cc0:	086d      	lsrs	r5, r5, #1
    1cc2:	4325      	orrs	r5, r4
    1cc4:	4640      	mov	r0, r8
    1cc6:	0029      	movs	r1, r5
    1cc8:	b007      	add	sp, #28
    1cca:	bc3c      	pop	{r2, r3, r4, r5}
    1ccc:	4690      	mov	r8, r2
    1cce:	4699      	mov	r9, r3
    1cd0:	46a2      	mov	sl, r4
    1cd2:	46ab      	mov	fp, r5
    1cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cd6:	4303      	orrs	r3, r0
    1cd8:	d052      	beq.n	1d80 <__aeabi_dmul+0x1a4>
    1cda:	465b      	mov	r3, fp
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d100      	bne.n	1ce2 <__aeabi_dmul+0x106>
    1ce0:	e18a      	b.n	1ff8 <__aeabi_dmul+0x41c>
    1ce2:	4658      	mov	r0, fp
    1ce4:	f000 fb4e 	bl	2384 <__clzsi2>
    1ce8:	0003      	movs	r3, r0
    1cea:	3b0b      	subs	r3, #11
    1cec:	2b1c      	cmp	r3, #28
    1cee:	dd00      	ble.n	1cf2 <__aeabi_dmul+0x116>
    1cf0:	e17b      	b.n	1fea <__aeabi_dmul+0x40e>
    1cf2:	221d      	movs	r2, #29
    1cf4:	1ad3      	subs	r3, r2, r3
    1cf6:	003a      	movs	r2, r7
    1cf8:	0001      	movs	r1, r0
    1cfa:	465d      	mov	r5, fp
    1cfc:	40da      	lsrs	r2, r3
    1cfe:	3908      	subs	r1, #8
    1d00:	408d      	lsls	r5, r1
    1d02:	0013      	movs	r3, r2
    1d04:	408f      	lsls	r7, r1
    1d06:	432b      	orrs	r3, r5
    1d08:	469b      	mov	fp, r3
    1d0a:	46b8      	mov	r8, r7
    1d0c:	4b2e      	ldr	r3, [pc, #184]	; (1dc8 <__aeabi_dmul+0x1ec>)
    1d0e:	2700      	movs	r7, #0
    1d10:	469c      	mov	ip, r3
    1d12:	2300      	movs	r3, #0
    1d14:	4460      	add	r0, ip
    1d16:	4246      	negs	r6, r0
    1d18:	9301      	str	r3, [sp, #4]
    1d1a:	e785      	b.n	1c28 <__aeabi_dmul+0x4c>
    1d1c:	4652      	mov	r2, sl
    1d1e:	432a      	orrs	r2, r5
    1d20:	d12c      	bne.n	1d7c <__aeabi_dmul+0x1a0>
    1d22:	2500      	movs	r5, #0
    1d24:	2300      	movs	r3, #0
    1d26:	2202      	movs	r2, #2
    1d28:	e797      	b.n	1c5a <__aeabi_dmul+0x7e>
    1d2a:	4652      	mov	r2, sl
    1d2c:	432a      	orrs	r2, r5
    1d2e:	d021      	beq.n	1d74 <__aeabi_dmul+0x198>
    1d30:	2d00      	cmp	r5, #0
    1d32:	d100      	bne.n	1d36 <__aeabi_dmul+0x15a>
    1d34:	e154      	b.n	1fe0 <__aeabi_dmul+0x404>
    1d36:	0028      	movs	r0, r5
    1d38:	f000 fb24 	bl	2384 <__clzsi2>
    1d3c:	0003      	movs	r3, r0
    1d3e:	3b0b      	subs	r3, #11
    1d40:	2b1c      	cmp	r3, #28
    1d42:	dd00      	ble.n	1d46 <__aeabi_dmul+0x16a>
    1d44:	e146      	b.n	1fd4 <__aeabi_dmul+0x3f8>
    1d46:	211d      	movs	r1, #29
    1d48:	1acb      	subs	r3, r1, r3
    1d4a:	4651      	mov	r1, sl
    1d4c:	0002      	movs	r2, r0
    1d4e:	40d9      	lsrs	r1, r3
    1d50:	4653      	mov	r3, sl
    1d52:	3a08      	subs	r2, #8
    1d54:	4095      	lsls	r5, r2
    1d56:	4093      	lsls	r3, r2
    1d58:	430d      	orrs	r5, r1
    1d5a:	4a1b      	ldr	r2, [pc, #108]	; (1dc8 <__aeabi_dmul+0x1ec>)
    1d5c:	4694      	mov	ip, r2
    1d5e:	4460      	add	r0, ip
    1d60:	4240      	negs	r0, r0
    1d62:	2200      	movs	r2, #0
    1d64:	e779      	b.n	1c5a <__aeabi_dmul+0x7e>
    1d66:	2401      	movs	r4, #1
    1d68:	2200      	movs	r2, #0
    1d6a:	400c      	ands	r4, r1
    1d6c:	4b12      	ldr	r3, [pc, #72]	; (1db8 <__aeabi_dmul+0x1dc>)
    1d6e:	2500      	movs	r5, #0
    1d70:	4690      	mov	r8, r2
    1d72:	e799      	b.n	1ca8 <__aeabi_dmul+0xcc>
    1d74:	2500      	movs	r5, #0
    1d76:	2300      	movs	r3, #0
    1d78:	2201      	movs	r2, #1
    1d7a:	e76e      	b.n	1c5a <__aeabi_dmul+0x7e>
    1d7c:	2203      	movs	r2, #3
    1d7e:	e76c      	b.n	1c5a <__aeabi_dmul+0x7e>
    1d80:	2300      	movs	r3, #0
    1d82:	469b      	mov	fp, r3
    1d84:	4698      	mov	r8, r3
    1d86:	3301      	adds	r3, #1
    1d88:	2704      	movs	r7, #4
    1d8a:	9301      	str	r3, [sp, #4]
    1d8c:	e74c      	b.n	1c28 <__aeabi_dmul+0x4c>
    1d8e:	2303      	movs	r3, #3
    1d90:	270c      	movs	r7, #12
    1d92:	9301      	str	r3, [sp, #4]
    1d94:	e748      	b.n	1c28 <__aeabi_dmul+0x4c>
    1d96:	2300      	movs	r3, #0
    1d98:	2580      	movs	r5, #128	; 0x80
    1d9a:	4698      	mov	r8, r3
    1d9c:	2400      	movs	r4, #0
    1d9e:	032d      	lsls	r5, r5, #12
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <__aeabi_dmul+0x1dc>)
    1da2:	e781      	b.n	1ca8 <__aeabi_dmul+0xcc>
    1da4:	465d      	mov	r5, fp
    1da6:	4643      	mov	r3, r8
    1da8:	9a01      	ldr	r2, [sp, #4]
    1daa:	e76f      	b.n	1c8c <__aeabi_dmul+0xb0>
    1dac:	465d      	mov	r5, fp
    1dae:	4643      	mov	r3, r8
    1db0:	0021      	movs	r1, r4
    1db2:	9a01      	ldr	r2, [sp, #4]
    1db4:	e76a      	b.n	1c8c <__aeabi_dmul+0xb0>
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	000007ff 	.word	0x000007ff
    1dbc:	fffffc01 	.word	0xfffffc01
    1dc0:	00002730 	.word	0x00002730
    1dc4:	800fffff 	.word	0x800fffff
    1dc8:	000003f3 	.word	0x000003f3
    1dcc:	4642      	mov	r2, r8
    1dce:	0c12      	lsrs	r2, r2, #16
    1dd0:	4691      	mov	r9, r2
    1dd2:	0c1a      	lsrs	r2, r3, #16
    1dd4:	4694      	mov	ip, r2
    1dd6:	4642      	mov	r2, r8
    1dd8:	0417      	lsls	r7, r2, #16
    1dda:	464a      	mov	r2, r9
    1ddc:	041b      	lsls	r3, r3, #16
    1dde:	0c1b      	lsrs	r3, r3, #16
    1de0:	435a      	muls	r2, r3
    1de2:	4660      	mov	r0, ip
    1de4:	4690      	mov	r8, r2
    1de6:	464a      	mov	r2, r9
    1de8:	4342      	muls	r2, r0
    1dea:	0010      	movs	r0, r2
    1dec:	9203      	str	r2, [sp, #12]
    1dee:	4662      	mov	r2, ip
    1df0:	001c      	movs	r4, r3
    1df2:	0c3f      	lsrs	r7, r7, #16
    1df4:	437a      	muls	r2, r7
    1df6:	437c      	muls	r4, r7
    1df8:	4442      	add	r2, r8
    1dfa:	9201      	str	r2, [sp, #4]
    1dfc:	0c22      	lsrs	r2, r4, #16
    1dfe:	4692      	mov	sl, r2
    1e00:	9a01      	ldr	r2, [sp, #4]
    1e02:	4452      	add	r2, sl
    1e04:	4590      	cmp	r8, r2
    1e06:	d906      	bls.n	1e16 <__aeabi_dmul+0x23a>
    1e08:	4682      	mov	sl, r0
    1e0a:	2080      	movs	r0, #128	; 0x80
    1e0c:	0240      	lsls	r0, r0, #9
    1e0e:	4680      	mov	r8, r0
    1e10:	44c2      	add	sl, r8
    1e12:	4650      	mov	r0, sl
    1e14:	9003      	str	r0, [sp, #12]
    1e16:	0c10      	lsrs	r0, r2, #16
    1e18:	9004      	str	r0, [sp, #16]
    1e1a:	4648      	mov	r0, r9
    1e1c:	0424      	lsls	r4, r4, #16
    1e1e:	0c24      	lsrs	r4, r4, #16
    1e20:	0412      	lsls	r2, r2, #16
    1e22:	1912      	adds	r2, r2, r4
    1e24:	9205      	str	r2, [sp, #20]
    1e26:	0c2a      	lsrs	r2, r5, #16
    1e28:	042d      	lsls	r5, r5, #16
    1e2a:	0c2d      	lsrs	r5, r5, #16
    1e2c:	4368      	muls	r0, r5
    1e2e:	002c      	movs	r4, r5
    1e30:	4682      	mov	sl, r0
    1e32:	4648      	mov	r0, r9
    1e34:	437c      	muls	r4, r7
    1e36:	4350      	muls	r0, r2
    1e38:	4681      	mov	r9, r0
    1e3a:	0c20      	lsrs	r0, r4, #16
    1e3c:	4680      	mov	r8, r0
    1e3e:	4357      	muls	r7, r2
    1e40:	4457      	add	r7, sl
    1e42:	4447      	add	r7, r8
    1e44:	45ba      	cmp	sl, r7
    1e46:	d903      	bls.n	1e50 <__aeabi_dmul+0x274>
    1e48:	2080      	movs	r0, #128	; 0x80
    1e4a:	0240      	lsls	r0, r0, #9
    1e4c:	4680      	mov	r8, r0
    1e4e:	44c1      	add	r9, r8
    1e50:	0c38      	lsrs	r0, r7, #16
    1e52:	043f      	lsls	r7, r7, #16
    1e54:	46b8      	mov	r8, r7
    1e56:	4448      	add	r0, r9
    1e58:	0424      	lsls	r4, r4, #16
    1e5a:	0c24      	lsrs	r4, r4, #16
    1e5c:	9001      	str	r0, [sp, #4]
    1e5e:	9804      	ldr	r0, [sp, #16]
    1e60:	44a0      	add	r8, r4
    1e62:	4440      	add	r0, r8
    1e64:	9004      	str	r0, [sp, #16]
    1e66:	4658      	mov	r0, fp
    1e68:	0c00      	lsrs	r0, r0, #16
    1e6a:	4681      	mov	r9, r0
    1e6c:	4658      	mov	r0, fp
    1e6e:	0404      	lsls	r4, r0, #16
    1e70:	0c20      	lsrs	r0, r4, #16
    1e72:	4682      	mov	sl, r0
    1e74:	0007      	movs	r7, r0
    1e76:	4648      	mov	r0, r9
    1e78:	435f      	muls	r7, r3
    1e7a:	464c      	mov	r4, r9
    1e7c:	4343      	muls	r3, r0
    1e7e:	4660      	mov	r0, ip
    1e80:	4360      	muls	r0, r4
    1e82:	4664      	mov	r4, ip
    1e84:	4683      	mov	fp, r0
    1e86:	4650      	mov	r0, sl
    1e88:	4344      	muls	r4, r0
    1e8a:	0c38      	lsrs	r0, r7, #16
    1e8c:	4684      	mov	ip, r0
    1e8e:	18e4      	adds	r4, r4, r3
    1e90:	4464      	add	r4, ip
    1e92:	42a3      	cmp	r3, r4
    1e94:	d903      	bls.n	1e9e <__aeabi_dmul+0x2c2>
    1e96:	2380      	movs	r3, #128	; 0x80
    1e98:	025b      	lsls	r3, r3, #9
    1e9a:	469c      	mov	ip, r3
    1e9c:	44e3      	add	fp, ip
    1e9e:	4648      	mov	r0, r9
    1ea0:	043f      	lsls	r7, r7, #16
    1ea2:	0c23      	lsrs	r3, r4, #16
    1ea4:	0c3f      	lsrs	r7, r7, #16
    1ea6:	0424      	lsls	r4, r4, #16
    1ea8:	19e4      	adds	r4, r4, r7
    1eaa:	4657      	mov	r7, sl
    1eac:	4368      	muls	r0, r5
    1eae:	436f      	muls	r7, r5
    1eb0:	4684      	mov	ip, r0
    1eb2:	464d      	mov	r5, r9
    1eb4:	4650      	mov	r0, sl
    1eb6:	4355      	muls	r5, r2
    1eb8:	4342      	muls	r2, r0
    1eba:	0c38      	lsrs	r0, r7, #16
    1ebc:	4681      	mov	r9, r0
    1ebe:	4462      	add	r2, ip
    1ec0:	444a      	add	r2, r9
    1ec2:	445b      	add	r3, fp
    1ec4:	4594      	cmp	ip, r2
    1ec6:	d903      	bls.n	1ed0 <__aeabi_dmul+0x2f4>
    1ec8:	2080      	movs	r0, #128	; 0x80
    1eca:	0240      	lsls	r0, r0, #9
    1ecc:	4684      	mov	ip, r0
    1ece:	4465      	add	r5, ip
    1ed0:	9803      	ldr	r0, [sp, #12]
    1ed2:	043f      	lsls	r7, r7, #16
    1ed4:	4683      	mov	fp, r0
    1ed6:	9804      	ldr	r0, [sp, #16]
    1ed8:	0c3f      	lsrs	r7, r7, #16
    1eda:	4684      	mov	ip, r0
    1edc:	44e3      	add	fp, ip
    1ede:	45c3      	cmp	fp, r8
    1ee0:	4180      	sbcs	r0, r0
    1ee2:	4240      	negs	r0, r0
    1ee4:	4682      	mov	sl, r0
    1ee6:	0410      	lsls	r0, r2, #16
    1ee8:	4684      	mov	ip, r0
    1eea:	9801      	ldr	r0, [sp, #4]
    1eec:	4467      	add	r7, ip
    1eee:	4684      	mov	ip, r0
    1ef0:	4467      	add	r7, ip
    1ef2:	44a3      	add	fp, r4
    1ef4:	46bc      	mov	ip, r7
    1ef6:	45a3      	cmp	fp, r4
    1ef8:	41a4      	sbcs	r4, r4
    1efa:	4699      	mov	r9, r3
    1efc:	44d4      	add	ip, sl
    1efe:	4264      	negs	r4, r4
    1f00:	4287      	cmp	r7, r0
    1f02:	41bf      	sbcs	r7, r7
    1f04:	45d4      	cmp	ip, sl
    1f06:	4180      	sbcs	r0, r0
    1f08:	44e1      	add	r9, ip
    1f0a:	46a0      	mov	r8, r4
    1f0c:	4599      	cmp	r9, r3
    1f0e:	419b      	sbcs	r3, r3
    1f10:	427f      	negs	r7, r7
    1f12:	4240      	negs	r0, r0
    1f14:	44c8      	add	r8, r9
    1f16:	4307      	orrs	r7, r0
    1f18:	0c12      	lsrs	r2, r2, #16
    1f1a:	18ba      	adds	r2, r7, r2
    1f1c:	45a0      	cmp	r8, r4
    1f1e:	41a4      	sbcs	r4, r4
    1f20:	425f      	negs	r7, r3
    1f22:	003b      	movs	r3, r7
    1f24:	4264      	negs	r4, r4
    1f26:	4323      	orrs	r3, r4
    1f28:	18d7      	adds	r7, r2, r3
    1f2a:	4643      	mov	r3, r8
    1f2c:	197d      	adds	r5, r7, r5
    1f2e:	0ddb      	lsrs	r3, r3, #23
    1f30:	026d      	lsls	r5, r5, #9
    1f32:	431d      	orrs	r5, r3
    1f34:	465b      	mov	r3, fp
    1f36:	025a      	lsls	r2, r3, #9
    1f38:	9b05      	ldr	r3, [sp, #20]
    1f3a:	431a      	orrs	r2, r3
    1f3c:	1e53      	subs	r3, r2, #1
    1f3e:	419a      	sbcs	r2, r3
    1f40:	465b      	mov	r3, fp
    1f42:	0ddb      	lsrs	r3, r3, #23
    1f44:	431a      	orrs	r2, r3
    1f46:	4643      	mov	r3, r8
    1f48:	025b      	lsls	r3, r3, #9
    1f4a:	4313      	orrs	r3, r2
    1f4c:	01ea      	lsls	r2, r5, #7
    1f4e:	d507      	bpl.n	1f60 <__aeabi_dmul+0x384>
    1f50:	2201      	movs	r2, #1
    1f52:	085c      	lsrs	r4, r3, #1
    1f54:	4013      	ands	r3, r2
    1f56:	4323      	orrs	r3, r4
    1f58:	07ea      	lsls	r2, r5, #31
    1f5a:	9e02      	ldr	r6, [sp, #8]
    1f5c:	4313      	orrs	r3, r2
    1f5e:	086d      	lsrs	r5, r5, #1
    1f60:	4a57      	ldr	r2, [pc, #348]	; (20c0 <STACK_SIZE+0xc0>)
    1f62:	18b2      	adds	r2, r6, r2
    1f64:	2a00      	cmp	r2, #0
    1f66:	dd4b      	ble.n	2000 <STACK_SIZE>
    1f68:	0758      	lsls	r0, r3, #29
    1f6a:	d009      	beq.n	1f80 <__aeabi_dmul+0x3a4>
    1f6c:	200f      	movs	r0, #15
    1f6e:	4018      	ands	r0, r3
    1f70:	2804      	cmp	r0, #4
    1f72:	d005      	beq.n	1f80 <__aeabi_dmul+0x3a4>
    1f74:	1d18      	adds	r0, r3, #4
    1f76:	4298      	cmp	r0, r3
    1f78:	419b      	sbcs	r3, r3
    1f7a:	425b      	negs	r3, r3
    1f7c:	18ed      	adds	r5, r5, r3
    1f7e:	0003      	movs	r3, r0
    1f80:	01e8      	lsls	r0, r5, #7
    1f82:	d504      	bpl.n	1f8e <__aeabi_dmul+0x3b2>
    1f84:	4a4f      	ldr	r2, [pc, #316]	; (20c4 <STACK_SIZE+0xc4>)
    1f86:	4015      	ands	r5, r2
    1f88:	2280      	movs	r2, #128	; 0x80
    1f8a:	00d2      	lsls	r2, r2, #3
    1f8c:	18b2      	adds	r2, r6, r2
    1f8e:	484e      	ldr	r0, [pc, #312]	; (20c8 <STACK_SIZE+0xc8>)
    1f90:	4282      	cmp	r2, r0
    1f92:	dd00      	ble.n	1f96 <__aeabi_dmul+0x3ba>
    1f94:	e6e7      	b.n	1d66 <__aeabi_dmul+0x18a>
    1f96:	2401      	movs	r4, #1
    1f98:	08db      	lsrs	r3, r3, #3
    1f9a:	0768      	lsls	r0, r5, #29
    1f9c:	4318      	orrs	r0, r3
    1f9e:	026d      	lsls	r5, r5, #9
    1fa0:	0553      	lsls	r3, r2, #21
    1fa2:	4680      	mov	r8, r0
    1fa4:	0b2d      	lsrs	r5, r5, #12
    1fa6:	0d5b      	lsrs	r3, r3, #21
    1fa8:	400c      	ands	r4, r1
    1faa:	e67d      	b.n	1ca8 <__aeabi_dmul+0xcc>
    1fac:	2280      	movs	r2, #128	; 0x80
    1fae:	4659      	mov	r1, fp
    1fb0:	0312      	lsls	r2, r2, #12
    1fb2:	4211      	tst	r1, r2
    1fb4:	d008      	beq.n	1fc8 <__aeabi_dmul+0x3ec>
    1fb6:	4215      	tst	r5, r2
    1fb8:	d106      	bne.n	1fc8 <__aeabi_dmul+0x3ec>
    1fba:	4315      	orrs	r5, r2
    1fbc:	032d      	lsls	r5, r5, #12
    1fbe:	4698      	mov	r8, r3
    1fc0:	0b2d      	lsrs	r5, r5, #12
    1fc2:	464c      	mov	r4, r9
    1fc4:	4b41      	ldr	r3, [pc, #260]	; (20cc <STACK_SIZE+0xcc>)
    1fc6:	e66f      	b.n	1ca8 <__aeabi_dmul+0xcc>
    1fc8:	465d      	mov	r5, fp
    1fca:	4315      	orrs	r5, r2
    1fcc:	032d      	lsls	r5, r5, #12
    1fce:	0b2d      	lsrs	r5, r5, #12
    1fd0:	4b3e      	ldr	r3, [pc, #248]	; (20cc <STACK_SIZE+0xcc>)
    1fd2:	e669      	b.n	1ca8 <__aeabi_dmul+0xcc>
    1fd4:	0003      	movs	r3, r0
    1fd6:	4655      	mov	r5, sl
    1fd8:	3b28      	subs	r3, #40	; 0x28
    1fda:	409d      	lsls	r5, r3
    1fdc:	2300      	movs	r3, #0
    1fde:	e6bc      	b.n	1d5a <__aeabi_dmul+0x17e>
    1fe0:	4650      	mov	r0, sl
    1fe2:	f000 f9cf 	bl	2384 <__clzsi2>
    1fe6:	3020      	adds	r0, #32
    1fe8:	e6a8      	b.n	1d3c <__aeabi_dmul+0x160>
    1fea:	0003      	movs	r3, r0
    1fec:	3b28      	subs	r3, #40	; 0x28
    1fee:	409f      	lsls	r7, r3
    1ff0:	2300      	movs	r3, #0
    1ff2:	46bb      	mov	fp, r7
    1ff4:	4698      	mov	r8, r3
    1ff6:	e689      	b.n	1d0c <__aeabi_dmul+0x130>
    1ff8:	f000 f9c4 	bl	2384 <__clzsi2>
    1ffc:	3020      	adds	r0, #32
    1ffe:	e673      	b.n	1ce8 <__aeabi_dmul+0x10c>
    2000:	2401      	movs	r4, #1
    2002:	1aa6      	subs	r6, r4, r2
    2004:	2e38      	cmp	r6, #56	; 0x38
    2006:	dd07      	ble.n	2018 <STACK_SIZE+0x18>
    2008:	2200      	movs	r2, #0
    200a:	400c      	ands	r4, r1
    200c:	2300      	movs	r3, #0
    200e:	2500      	movs	r5, #0
    2010:	4690      	mov	r8, r2
    2012:	e649      	b.n	1ca8 <__aeabi_dmul+0xcc>
    2014:	9e02      	ldr	r6, [sp, #8]
    2016:	e7a3      	b.n	1f60 <__aeabi_dmul+0x384>
    2018:	2e1f      	cmp	r6, #31
    201a:	dc20      	bgt.n	205e <STACK_SIZE+0x5e>
    201c:	2220      	movs	r2, #32
    201e:	002c      	movs	r4, r5
    2020:	0018      	movs	r0, r3
    2022:	1b92      	subs	r2, r2, r6
    2024:	40f0      	lsrs	r0, r6
    2026:	4094      	lsls	r4, r2
    2028:	4093      	lsls	r3, r2
    202a:	4304      	orrs	r4, r0
    202c:	1e58      	subs	r0, r3, #1
    202e:	4183      	sbcs	r3, r0
    2030:	431c      	orrs	r4, r3
    2032:	40f5      	lsrs	r5, r6
    2034:	0763      	lsls	r3, r4, #29
    2036:	d009      	beq.n	204c <STACK_SIZE+0x4c>
    2038:	230f      	movs	r3, #15
    203a:	4023      	ands	r3, r4
    203c:	2b04      	cmp	r3, #4
    203e:	d005      	beq.n	204c <STACK_SIZE+0x4c>
    2040:	0023      	movs	r3, r4
    2042:	1d1c      	adds	r4, r3, #4
    2044:	429c      	cmp	r4, r3
    2046:	4192      	sbcs	r2, r2
    2048:	4252      	negs	r2, r2
    204a:	18ad      	adds	r5, r5, r2
    204c:	022b      	lsls	r3, r5, #8
    204e:	d51f      	bpl.n	2090 <STACK_SIZE+0x90>
    2050:	2401      	movs	r4, #1
    2052:	2200      	movs	r2, #0
    2054:	400c      	ands	r4, r1
    2056:	2301      	movs	r3, #1
    2058:	2500      	movs	r5, #0
    205a:	4690      	mov	r8, r2
    205c:	e624      	b.n	1ca8 <__aeabi_dmul+0xcc>
    205e:	201f      	movs	r0, #31
    2060:	002c      	movs	r4, r5
    2062:	4240      	negs	r0, r0
    2064:	1a82      	subs	r2, r0, r2
    2066:	40d4      	lsrs	r4, r2
    2068:	2e20      	cmp	r6, #32
    206a:	d01c      	beq.n	20a6 <STACK_SIZE+0xa6>
    206c:	2240      	movs	r2, #64	; 0x40
    206e:	1b96      	subs	r6, r2, r6
    2070:	40b5      	lsls	r5, r6
    2072:	432b      	orrs	r3, r5
    2074:	1e58      	subs	r0, r3, #1
    2076:	4183      	sbcs	r3, r0
    2078:	2007      	movs	r0, #7
    207a:	4323      	orrs	r3, r4
    207c:	4018      	ands	r0, r3
    207e:	2500      	movs	r5, #0
    2080:	2800      	cmp	r0, #0
    2082:	d009      	beq.n	2098 <STACK_SIZE+0x98>
    2084:	220f      	movs	r2, #15
    2086:	2500      	movs	r5, #0
    2088:	401a      	ands	r2, r3
    208a:	001c      	movs	r4, r3
    208c:	2a04      	cmp	r2, #4
    208e:	d1d8      	bne.n	2042 <STACK_SIZE+0x42>
    2090:	0023      	movs	r3, r4
    2092:	0768      	lsls	r0, r5, #29
    2094:	026d      	lsls	r5, r5, #9
    2096:	0b2d      	lsrs	r5, r5, #12
    2098:	2401      	movs	r4, #1
    209a:	08db      	lsrs	r3, r3, #3
    209c:	4303      	orrs	r3, r0
    209e:	4698      	mov	r8, r3
    20a0:	400c      	ands	r4, r1
    20a2:	2300      	movs	r3, #0
    20a4:	e600      	b.n	1ca8 <__aeabi_dmul+0xcc>
    20a6:	2500      	movs	r5, #0
    20a8:	e7e3      	b.n	2072 <STACK_SIZE+0x72>
    20aa:	2280      	movs	r2, #128	; 0x80
    20ac:	2401      	movs	r4, #1
    20ae:	0312      	lsls	r2, r2, #12
    20b0:	4315      	orrs	r5, r2
    20b2:	032d      	lsls	r5, r5, #12
    20b4:	4698      	mov	r8, r3
    20b6:	0b2d      	lsrs	r5, r5, #12
    20b8:	400c      	ands	r4, r1
    20ba:	4b04      	ldr	r3, [pc, #16]	; (20cc <STACK_SIZE+0xcc>)
    20bc:	e5f4      	b.n	1ca8 <__aeabi_dmul+0xcc>
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	000003ff 	.word	0x000003ff
    20c4:	feffffff 	.word	0xfeffffff
    20c8:	000007fe 	.word	0x000007fe
    20cc:	000007ff 	.word	0x000007ff

000020d0 <__aeabi_i2d>:
    20d0:	b570      	push	{r4, r5, r6, lr}
    20d2:	2800      	cmp	r0, #0
    20d4:	d030      	beq.n	2138 <__aeabi_i2d+0x68>
    20d6:	17c3      	asrs	r3, r0, #31
    20d8:	18c4      	adds	r4, r0, r3
    20da:	405c      	eors	r4, r3
    20dc:	0fc5      	lsrs	r5, r0, #31
    20de:	0020      	movs	r0, r4
    20e0:	f000 f950 	bl	2384 <__clzsi2>
    20e4:	4b17      	ldr	r3, [pc, #92]	; (2144 <__aeabi_i2d+0x74>)
    20e6:	4a18      	ldr	r2, [pc, #96]	; (2148 <__aeabi_i2d+0x78>)
    20e8:	1a1b      	subs	r3, r3, r0
    20ea:	1ad2      	subs	r2, r2, r3
    20ec:	2a1f      	cmp	r2, #31
    20ee:	dd18      	ble.n	2122 <__aeabi_i2d+0x52>
    20f0:	4a16      	ldr	r2, [pc, #88]	; (214c <__aeabi_i2d+0x7c>)
    20f2:	1ad2      	subs	r2, r2, r3
    20f4:	4094      	lsls	r4, r2
    20f6:	2200      	movs	r2, #0
    20f8:	0324      	lsls	r4, r4, #12
    20fa:	055b      	lsls	r3, r3, #21
    20fc:	0b24      	lsrs	r4, r4, #12
    20fe:	0d5b      	lsrs	r3, r3, #21
    2100:	2100      	movs	r1, #0
    2102:	0010      	movs	r0, r2
    2104:	0324      	lsls	r4, r4, #12
    2106:	0d0a      	lsrs	r2, r1, #20
    2108:	0512      	lsls	r2, r2, #20
    210a:	0b24      	lsrs	r4, r4, #12
    210c:	4314      	orrs	r4, r2
    210e:	4a10      	ldr	r2, [pc, #64]	; (2150 <__aeabi_i2d+0x80>)
    2110:	051b      	lsls	r3, r3, #20
    2112:	4014      	ands	r4, r2
    2114:	431c      	orrs	r4, r3
    2116:	0064      	lsls	r4, r4, #1
    2118:	07ed      	lsls	r5, r5, #31
    211a:	0864      	lsrs	r4, r4, #1
    211c:	432c      	orrs	r4, r5
    211e:	0021      	movs	r1, r4
    2120:	bd70      	pop	{r4, r5, r6, pc}
    2122:	0021      	movs	r1, r4
    2124:	4091      	lsls	r1, r2
    2126:	000a      	movs	r2, r1
    2128:	210b      	movs	r1, #11
    212a:	1a08      	subs	r0, r1, r0
    212c:	40c4      	lsrs	r4, r0
    212e:	055b      	lsls	r3, r3, #21
    2130:	0324      	lsls	r4, r4, #12
    2132:	0b24      	lsrs	r4, r4, #12
    2134:	0d5b      	lsrs	r3, r3, #21
    2136:	e7e3      	b.n	2100 <__aeabi_i2d+0x30>
    2138:	2500      	movs	r5, #0
    213a:	2300      	movs	r3, #0
    213c:	2400      	movs	r4, #0
    213e:	2200      	movs	r2, #0
    2140:	e7de      	b.n	2100 <__aeabi_i2d+0x30>
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	0000041e 	.word	0x0000041e
    2148:	00000433 	.word	0x00000433
    214c:	00000413 	.word	0x00000413
    2150:	800fffff 	.word	0x800fffff

00002154 <__aeabi_ui2d>:
    2154:	b570      	push	{r4, r5, r6, lr}
    2156:	1e05      	subs	r5, r0, #0
    2158:	d028      	beq.n	21ac <__aeabi_ui2d+0x58>
    215a:	f000 f913 	bl	2384 <__clzsi2>
    215e:	4b15      	ldr	r3, [pc, #84]	; (21b4 <__aeabi_ui2d+0x60>)
    2160:	4a15      	ldr	r2, [pc, #84]	; (21b8 <__aeabi_ui2d+0x64>)
    2162:	1a1b      	subs	r3, r3, r0
    2164:	1ad2      	subs	r2, r2, r3
    2166:	2a1f      	cmp	r2, #31
    2168:	dd16      	ble.n	2198 <__aeabi_ui2d+0x44>
    216a:	002c      	movs	r4, r5
    216c:	4a13      	ldr	r2, [pc, #76]	; (21bc <__aeabi_ui2d+0x68>)
    216e:	2500      	movs	r5, #0
    2170:	1ad2      	subs	r2, r2, r3
    2172:	4094      	lsls	r4, r2
    2174:	055a      	lsls	r2, r3, #21
    2176:	0324      	lsls	r4, r4, #12
    2178:	0b24      	lsrs	r4, r4, #12
    217a:	0d52      	lsrs	r2, r2, #21
    217c:	2100      	movs	r1, #0
    217e:	0324      	lsls	r4, r4, #12
    2180:	0d0b      	lsrs	r3, r1, #20
    2182:	0b24      	lsrs	r4, r4, #12
    2184:	051b      	lsls	r3, r3, #20
    2186:	4323      	orrs	r3, r4
    2188:	4c0d      	ldr	r4, [pc, #52]	; (21c0 <__aeabi_ui2d+0x6c>)
    218a:	0512      	lsls	r2, r2, #20
    218c:	4023      	ands	r3, r4
    218e:	4313      	orrs	r3, r2
    2190:	005b      	lsls	r3, r3, #1
    2192:	0028      	movs	r0, r5
    2194:	0859      	lsrs	r1, r3, #1
    2196:	bd70      	pop	{r4, r5, r6, pc}
    2198:	210b      	movs	r1, #11
    219a:	002c      	movs	r4, r5
    219c:	1a08      	subs	r0, r1, r0
    219e:	40c4      	lsrs	r4, r0
    21a0:	4095      	lsls	r5, r2
    21a2:	0324      	lsls	r4, r4, #12
    21a4:	055a      	lsls	r2, r3, #21
    21a6:	0b24      	lsrs	r4, r4, #12
    21a8:	0d52      	lsrs	r2, r2, #21
    21aa:	e7e7      	b.n	217c <__aeabi_ui2d+0x28>
    21ac:	2200      	movs	r2, #0
    21ae:	2400      	movs	r4, #0
    21b0:	e7e4      	b.n	217c <__aeabi_ui2d+0x28>
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	0000041e 	.word	0x0000041e
    21b8:	00000433 	.word	0x00000433
    21bc:	00000413 	.word	0x00000413
    21c0:	800fffff 	.word	0x800fffff

000021c4 <__aeabi_f2d>:
    21c4:	0042      	lsls	r2, r0, #1
    21c6:	0e12      	lsrs	r2, r2, #24
    21c8:	1c51      	adds	r1, r2, #1
    21ca:	0243      	lsls	r3, r0, #9
    21cc:	b2c9      	uxtb	r1, r1
    21ce:	b570      	push	{r4, r5, r6, lr}
    21d0:	0a5d      	lsrs	r5, r3, #9
    21d2:	0fc4      	lsrs	r4, r0, #31
    21d4:	2901      	cmp	r1, #1
    21d6:	dd15      	ble.n	2204 <__aeabi_f2d+0x40>
    21d8:	21e0      	movs	r1, #224	; 0xe0
    21da:	0089      	lsls	r1, r1, #2
    21dc:	468c      	mov	ip, r1
    21de:	076d      	lsls	r5, r5, #29
    21e0:	0b1b      	lsrs	r3, r3, #12
    21e2:	4462      	add	r2, ip
    21e4:	2100      	movs	r1, #0
    21e6:	0028      	movs	r0, r5
    21e8:	0d0d      	lsrs	r5, r1, #20
    21ea:	052d      	lsls	r5, r5, #20
    21ec:	432b      	orrs	r3, r5
    21ee:	4d1c      	ldr	r5, [pc, #112]	; (2260 <__aeabi_f2d+0x9c>)
    21f0:	0552      	lsls	r2, r2, #21
    21f2:	402b      	ands	r3, r5
    21f4:	0852      	lsrs	r2, r2, #1
    21f6:	4313      	orrs	r3, r2
    21f8:	005b      	lsls	r3, r3, #1
    21fa:	07e4      	lsls	r4, r4, #31
    21fc:	085b      	lsrs	r3, r3, #1
    21fe:	4323      	orrs	r3, r4
    2200:	0019      	movs	r1, r3
    2202:	bd70      	pop	{r4, r5, r6, pc}
    2204:	2a00      	cmp	r2, #0
    2206:	d115      	bne.n	2234 <__aeabi_f2d+0x70>
    2208:	2d00      	cmp	r5, #0
    220a:	d01f      	beq.n	224c <__aeabi_f2d+0x88>
    220c:	0028      	movs	r0, r5
    220e:	f000 f8b9 	bl	2384 <__clzsi2>
    2212:	280a      	cmp	r0, #10
    2214:	dc1d      	bgt.n	2252 <__aeabi_f2d+0x8e>
    2216:	230b      	movs	r3, #11
    2218:	002a      	movs	r2, r5
    221a:	1a1b      	subs	r3, r3, r0
    221c:	40da      	lsrs	r2, r3
    221e:	0013      	movs	r3, r2
    2220:	0002      	movs	r2, r0
    2222:	3215      	adds	r2, #21
    2224:	4095      	lsls	r5, r2
    2226:	4a0f      	ldr	r2, [pc, #60]	; (2264 <__aeabi_f2d+0xa0>)
    2228:	031b      	lsls	r3, r3, #12
    222a:	1a12      	subs	r2, r2, r0
    222c:	0552      	lsls	r2, r2, #21
    222e:	0b1b      	lsrs	r3, r3, #12
    2230:	0d52      	lsrs	r2, r2, #21
    2232:	e7d7      	b.n	21e4 <__aeabi_f2d+0x20>
    2234:	2d00      	cmp	r5, #0
    2236:	d006      	beq.n	2246 <__aeabi_f2d+0x82>
    2238:	2280      	movs	r2, #128	; 0x80
    223a:	0b1b      	lsrs	r3, r3, #12
    223c:	0312      	lsls	r2, r2, #12
    223e:	4313      	orrs	r3, r2
    2240:	076d      	lsls	r5, r5, #29
    2242:	4a09      	ldr	r2, [pc, #36]	; (2268 <__aeabi_f2d+0xa4>)
    2244:	e7ce      	b.n	21e4 <__aeabi_f2d+0x20>
    2246:	4a08      	ldr	r2, [pc, #32]	; (2268 <__aeabi_f2d+0xa4>)
    2248:	2300      	movs	r3, #0
    224a:	e7cb      	b.n	21e4 <__aeabi_f2d+0x20>
    224c:	2200      	movs	r2, #0
    224e:	2300      	movs	r3, #0
    2250:	e7c8      	b.n	21e4 <__aeabi_f2d+0x20>
    2252:	0003      	movs	r3, r0
    2254:	3b0b      	subs	r3, #11
    2256:	409d      	lsls	r5, r3
    2258:	002b      	movs	r3, r5
    225a:	2500      	movs	r5, #0
    225c:	e7e3      	b.n	2226 <__aeabi_f2d+0x62>
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	800fffff 	.word	0x800fffff
    2264:	00000389 	.word	0x00000389
    2268:	000007ff 	.word	0x000007ff

0000226c <__aeabi_d2f>:
    226c:	004b      	lsls	r3, r1, #1
    226e:	b570      	push	{r4, r5, r6, lr}
    2270:	0d5e      	lsrs	r6, r3, #21
    2272:	030c      	lsls	r4, r1, #12
    2274:	1c75      	adds	r5, r6, #1
    2276:	0a64      	lsrs	r4, r4, #9
    2278:	0f42      	lsrs	r2, r0, #29
    227a:	056d      	lsls	r5, r5, #21
    227c:	4322      	orrs	r2, r4
    227e:	0fc9      	lsrs	r1, r1, #31
    2280:	00c4      	lsls	r4, r0, #3
    2282:	0d6d      	lsrs	r5, r5, #21
    2284:	2d01      	cmp	r5, #1
    2286:	dd2a      	ble.n	22de <__aeabi_d2f+0x72>
    2288:	4b3b      	ldr	r3, [pc, #236]	; (2378 <__aeabi_d2f+0x10c>)
    228a:	18f3      	adds	r3, r6, r3
    228c:	2bfe      	cmp	r3, #254	; 0xfe
    228e:	dc1a      	bgt.n	22c6 <__aeabi_d2f+0x5a>
    2290:	2b00      	cmp	r3, #0
    2292:	dd42      	ble.n	231a <__aeabi_d2f+0xae>
    2294:	0180      	lsls	r0, r0, #6
    2296:	1e45      	subs	r5, r0, #1
    2298:	41a8      	sbcs	r0, r5
    229a:	00d2      	lsls	r2, r2, #3
    229c:	4310      	orrs	r0, r2
    229e:	0f62      	lsrs	r2, r4, #29
    22a0:	4302      	orrs	r2, r0
    22a2:	0750      	lsls	r0, r2, #29
    22a4:	d004      	beq.n	22b0 <__aeabi_d2f+0x44>
    22a6:	200f      	movs	r0, #15
    22a8:	4010      	ands	r0, r2
    22aa:	2804      	cmp	r0, #4
    22ac:	d000      	beq.n	22b0 <__aeabi_d2f+0x44>
    22ae:	3204      	adds	r2, #4
    22b0:	2080      	movs	r0, #128	; 0x80
    22b2:	04c0      	lsls	r0, r0, #19
    22b4:	4010      	ands	r0, r2
    22b6:	d021      	beq.n	22fc <__aeabi_d2f+0x90>
    22b8:	3301      	adds	r3, #1
    22ba:	2bff      	cmp	r3, #255	; 0xff
    22bc:	d003      	beq.n	22c6 <__aeabi_d2f+0x5a>
    22be:	0192      	lsls	r2, r2, #6
    22c0:	0a52      	lsrs	r2, r2, #9
    22c2:	b2db      	uxtb	r3, r3
    22c4:	e001      	b.n	22ca <__aeabi_d2f+0x5e>
    22c6:	23ff      	movs	r3, #255	; 0xff
    22c8:	2200      	movs	r2, #0
    22ca:	0252      	lsls	r2, r2, #9
    22cc:	0a52      	lsrs	r2, r2, #9
    22ce:	05db      	lsls	r3, r3, #23
    22d0:	4313      	orrs	r3, r2
    22d2:	005b      	lsls	r3, r3, #1
    22d4:	07c9      	lsls	r1, r1, #31
    22d6:	085b      	lsrs	r3, r3, #1
    22d8:	430b      	orrs	r3, r1
    22da:	0018      	movs	r0, r3
    22dc:	bd70      	pop	{r4, r5, r6, pc}
    22de:	2e00      	cmp	r6, #0
    22e0:	d007      	beq.n	22f2 <__aeabi_d2f+0x86>
    22e2:	4314      	orrs	r4, r2
    22e4:	d0ef      	beq.n	22c6 <__aeabi_d2f+0x5a>
    22e6:	2080      	movs	r0, #128	; 0x80
    22e8:	00d2      	lsls	r2, r2, #3
    22ea:	0480      	lsls	r0, r0, #18
    22ec:	4302      	orrs	r2, r0
    22ee:	23ff      	movs	r3, #255	; 0xff
    22f0:	e7d7      	b.n	22a2 <__aeabi_d2f+0x36>
    22f2:	4322      	orrs	r2, r4
    22f4:	2300      	movs	r3, #0
    22f6:	2a00      	cmp	r2, #0
    22f8:	d003      	beq.n	2302 <__aeabi_d2f+0x96>
    22fa:	2205      	movs	r2, #5
    22fc:	08d2      	lsrs	r2, r2, #3
    22fe:	2bff      	cmp	r3, #255	; 0xff
    2300:	d003      	beq.n	230a <__aeabi_d2f+0x9e>
    2302:	0252      	lsls	r2, r2, #9
    2304:	0a52      	lsrs	r2, r2, #9
    2306:	b2db      	uxtb	r3, r3
    2308:	e7df      	b.n	22ca <__aeabi_d2f+0x5e>
    230a:	2a00      	cmp	r2, #0
    230c:	d032      	beq.n	2374 <__aeabi_d2f+0x108>
    230e:	2080      	movs	r0, #128	; 0x80
    2310:	03c0      	lsls	r0, r0, #15
    2312:	4302      	orrs	r2, r0
    2314:	0252      	lsls	r2, r2, #9
    2316:	0a52      	lsrs	r2, r2, #9
    2318:	e7d7      	b.n	22ca <__aeabi_d2f+0x5e>
    231a:	0018      	movs	r0, r3
    231c:	3017      	adds	r0, #23
    231e:	db14      	blt.n	234a <__aeabi_d2f+0xde>
    2320:	2080      	movs	r0, #128	; 0x80
    2322:	0400      	lsls	r0, r0, #16
    2324:	4302      	orrs	r2, r0
    2326:	201e      	movs	r0, #30
    2328:	1ac0      	subs	r0, r0, r3
    232a:	281f      	cmp	r0, #31
    232c:	dc0f      	bgt.n	234e <__aeabi_d2f+0xe2>
    232e:	0025      	movs	r5, r4
    2330:	4b12      	ldr	r3, [pc, #72]	; (237c <__aeabi_d2f+0x110>)
    2332:	18f3      	adds	r3, r6, r3
    2334:	409d      	lsls	r5, r3
    2336:	1e6e      	subs	r6, r5, #1
    2338:	41b5      	sbcs	r5, r6
    233a:	409a      	lsls	r2, r3
    233c:	002b      	movs	r3, r5
    233e:	4313      	orrs	r3, r2
    2340:	0022      	movs	r2, r4
    2342:	40c2      	lsrs	r2, r0
    2344:	431a      	orrs	r2, r3
    2346:	2300      	movs	r3, #0
    2348:	e7ab      	b.n	22a2 <__aeabi_d2f+0x36>
    234a:	2300      	movs	r3, #0
    234c:	e7d5      	b.n	22fa <__aeabi_d2f+0x8e>
    234e:	2502      	movs	r5, #2
    2350:	426d      	negs	r5, r5
    2352:	1aeb      	subs	r3, r5, r3
    2354:	0015      	movs	r5, r2
    2356:	40dd      	lsrs	r5, r3
    2358:	2820      	cmp	r0, #32
    235a:	d009      	beq.n	2370 <__aeabi_d2f+0x104>
    235c:	4b08      	ldr	r3, [pc, #32]	; (2380 <__aeabi_d2f+0x114>)
    235e:	18f3      	adds	r3, r6, r3
    2360:	409a      	lsls	r2, r3
    2362:	4314      	orrs	r4, r2
    2364:	1e62      	subs	r2, r4, #1
    2366:	4194      	sbcs	r4, r2
    2368:	0022      	movs	r2, r4
    236a:	2300      	movs	r3, #0
    236c:	432a      	orrs	r2, r5
    236e:	e798      	b.n	22a2 <__aeabi_d2f+0x36>
    2370:	2200      	movs	r2, #0
    2372:	e7f6      	b.n	2362 <__aeabi_d2f+0xf6>
    2374:	2200      	movs	r2, #0
    2376:	e7a8      	b.n	22ca <__aeabi_d2f+0x5e>
    2378:	fffffc80 	.word	0xfffffc80
    237c:	fffffc82 	.word	0xfffffc82
    2380:	fffffca2 	.word	0xfffffca2

00002384 <__clzsi2>:
    2384:	211c      	movs	r1, #28
    2386:	2301      	movs	r3, #1
    2388:	041b      	lsls	r3, r3, #16
    238a:	4298      	cmp	r0, r3
    238c:	d301      	bcc.n	2392 <__clzsi2+0xe>
    238e:	0c00      	lsrs	r0, r0, #16
    2390:	3910      	subs	r1, #16
    2392:	0a1b      	lsrs	r3, r3, #8
    2394:	4298      	cmp	r0, r3
    2396:	d301      	bcc.n	239c <__clzsi2+0x18>
    2398:	0a00      	lsrs	r0, r0, #8
    239a:	3908      	subs	r1, #8
    239c:	091b      	lsrs	r3, r3, #4
    239e:	4298      	cmp	r0, r3
    23a0:	d301      	bcc.n	23a6 <__clzsi2+0x22>
    23a2:	0900      	lsrs	r0, r0, #4
    23a4:	3904      	subs	r1, #4
    23a6:	a202      	add	r2, pc, #8	; (adr r2, 23b0 <__clzsi2+0x2c>)
    23a8:	5c10      	ldrb	r0, [r2, r0]
    23aa:	1840      	adds	r0, r0, r1
    23ac:	4770      	bx	lr
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	02020304 	.word	0x02020304
    23b4:	01010101 	.word	0x01010101
	...

000023c0 <__libc_init_array>:
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	4e0d      	ldr	r6, [pc, #52]	; (23f8 <__libc_init_array+0x38>)
    23c4:	4d0d      	ldr	r5, [pc, #52]	; (23fc <__libc_init_array+0x3c>)
    23c6:	2400      	movs	r4, #0
    23c8:	1bad      	subs	r5, r5, r6
    23ca:	10ad      	asrs	r5, r5, #2
    23cc:	d005      	beq.n	23da <__libc_init_array+0x1a>
    23ce:	00a3      	lsls	r3, r4, #2
    23d0:	58f3      	ldr	r3, [r6, r3]
    23d2:	3401      	adds	r4, #1
    23d4:	4798      	blx	r3
    23d6:	42a5      	cmp	r5, r4
    23d8:	d1f9      	bne.n	23ce <__libc_init_array+0xe>
    23da:	f000 f9cd 	bl	2778 <_init>
    23de:	4e08      	ldr	r6, [pc, #32]	; (2400 <__libc_init_array+0x40>)
    23e0:	4d08      	ldr	r5, [pc, #32]	; (2404 <__libc_init_array+0x44>)
    23e2:	2400      	movs	r4, #0
    23e4:	1bad      	subs	r5, r5, r6
    23e6:	10ad      	asrs	r5, r5, #2
    23e8:	d005      	beq.n	23f6 <__libc_init_array+0x36>
    23ea:	00a3      	lsls	r3, r4, #2
    23ec:	58f3      	ldr	r3, [r6, r3]
    23ee:	3401      	adds	r4, #1
    23f0:	4798      	blx	r3
    23f2:	42a5      	cmp	r5, r4
    23f4:	d1f9      	bne.n	23ea <__libc_init_array+0x2a>
    23f6:	bd70      	pop	{r4, r5, r6, pc}
    23f8:	00002784 	.word	0x00002784
    23fc:	00002784 	.word	0x00002784
    2400:	00002784 	.word	0x00002784
    2404:	0000278c 	.word	0x0000278c

00002408 <memset>:
    2408:	b570      	push	{r4, r5, r6, lr}
    240a:	0783      	lsls	r3, r0, #30
    240c:	d03f      	beq.n	248e <memset+0x86>
    240e:	1e54      	subs	r4, r2, #1
    2410:	2a00      	cmp	r2, #0
    2412:	d03b      	beq.n	248c <memset+0x84>
    2414:	b2ce      	uxtb	r6, r1
    2416:	0003      	movs	r3, r0
    2418:	2503      	movs	r5, #3
    241a:	e003      	b.n	2424 <memset+0x1c>
    241c:	1e62      	subs	r2, r4, #1
    241e:	2c00      	cmp	r4, #0
    2420:	d034      	beq.n	248c <memset+0x84>
    2422:	0014      	movs	r4, r2
    2424:	3301      	adds	r3, #1
    2426:	1e5a      	subs	r2, r3, #1
    2428:	7016      	strb	r6, [r2, #0]
    242a:	422b      	tst	r3, r5
    242c:	d1f6      	bne.n	241c <memset+0x14>
    242e:	2c03      	cmp	r4, #3
    2430:	d924      	bls.n	247c <memset+0x74>
    2432:	25ff      	movs	r5, #255	; 0xff
    2434:	400d      	ands	r5, r1
    2436:	022a      	lsls	r2, r5, #8
    2438:	4315      	orrs	r5, r2
    243a:	042a      	lsls	r2, r5, #16
    243c:	4315      	orrs	r5, r2
    243e:	2c0f      	cmp	r4, #15
    2440:	d911      	bls.n	2466 <memset+0x5e>
    2442:	0026      	movs	r6, r4
    2444:	3e10      	subs	r6, #16
    2446:	0936      	lsrs	r6, r6, #4
    2448:	3601      	adds	r6, #1
    244a:	0136      	lsls	r6, r6, #4
    244c:	001a      	movs	r2, r3
    244e:	199b      	adds	r3, r3, r6
    2450:	6015      	str	r5, [r2, #0]
    2452:	6055      	str	r5, [r2, #4]
    2454:	6095      	str	r5, [r2, #8]
    2456:	60d5      	str	r5, [r2, #12]
    2458:	3210      	adds	r2, #16
    245a:	4293      	cmp	r3, r2
    245c:	d1f8      	bne.n	2450 <memset+0x48>
    245e:	220f      	movs	r2, #15
    2460:	4014      	ands	r4, r2
    2462:	2c03      	cmp	r4, #3
    2464:	d90a      	bls.n	247c <memset+0x74>
    2466:	1f26      	subs	r6, r4, #4
    2468:	08b6      	lsrs	r6, r6, #2
    246a:	3601      	adds	r6, #1
    246c:	00b6      	lsls	r6, r6, #2
    246e:	001a      	movs	r2, r3
    2470:	199b      	adds	r3, r3, r6
    2472:	c220      	stmia	r2!, {r5}
    2474:	4293      	cmp	r3, r2
    2476:	d1fc      	bne.n	2472 <memset+0x6a>
    2478:	2203      	movs	r2, #3
    247a:	4014      	ands	r4, r2
    247c:	2c00      	cmp	r4, #0
    247e:	d005      	beq.n	248c <memset+0x84>
    2480:	b2c9      	uxtb	r1, r1
    2482:	191c      	adds	r4, r3, r4
    2484:	7019      	strb	r1, [r3, #0]
    2486:	3301      	adds	r3, #1
    2488:	429c      	cmp	r4, r3
    248a:	d1fb      	bne.n	2484 <memset+0x7c>
    248c:	bd70      	pop	{r4, r5, r6, pc}
    248e:	0014      	movs	r4, r2
    2490:	0003      	movs	r3, r0
    2492:	e7cc      	b.n	242e <memset+0x26>

00002494 <register_fini>:
    2494:	4b03      	ldr	r3, [pc, #12]	; (24a4 <register_fini+0x10>)
    2496:	b510      	push	{r4, lr}
    2498:	2b00      	cmp	r3, #0
    249a:	d002      	beq.n	24a2 <register_fini+0xe>
    249c:	4802      	ldr	r0, [pc, #8]	; (24a8 <register_fini+0x14>)
    249e:	f000 f805 	bl	24ac <atexit>
    24a2:	bd10      	pop	{r4, pc}
    24a4:	00000000 	.word	0x00000000
    24a8:	000024bd 	.word	0x000024bd

000024ac <atexit>:
    24ac:	b510      	push	{r4, lr}
    24ae:	0001      	movs	r1, r0
    24b0:	2300      	movs	r3, #0
    24b2:	2200      	movs	r2, #0
    24b4:	2000      	movs	r0, #0
    24b6:	f000 f81b 	bl	24f0 <__register_exitproc>
    24ba:	bd10      	pop	{r4, pc}

000024bc <__libc_fini_array>:
    24bc:	b570      	push	{r4, r5, r6, lr}
    24be:	4b09      	ldr	r3, [pc, #36]	; (24e4 <__libc_fini_array+0x28>)
    24c0:	4c09      	ldr	r4, [pc, #36]	; (24e8 <__libc_fini_array+0x2c>)
    24c2:	1ae4      	subs	r4, r4, r3
    24c4:	10a4      	asrs	r4, r4, #2
    24c6:	d009      	beq.n	24dc <__libc_fini_array+0x20>
    24c8:	4a08      	ldr	r2, [pc, #32]	; (24ec <__libc_fini_array+0x30>)
    24ca:	18a5      	adds	r5, r4, r2
    24cc:	00ad      	lsls	r5, r5, #2
    24ce:	18ed      	adds	r5, r5, r3
    24d0:	682b      	ldr	r3, [r5, #0]
    24d2:	3c01      	subs	r4, #1
    24d4:	4798      	blx	r3
    24d6:	3d04      	subs	r5, #4
    24d8:	2c00      	cmp	r4, #0
    24da:	d1f9      	bne.n	24d0 <__libc_fini_array+0x14>
    24dc:	f000 f956 	bl	278c <_fini>
    24e0:	bd70      	pop	{r4, r5, r6, pc}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	00002798 	.word	0x00002798
    24e8:	0000279c 	.word	0x0000279c
    24ec:	3fffffff 	.word	0x3fffffff

000024f0 <__register_exitproc>:
    24f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24f2:	4644      	mov	r4, r8
    24f4:	465f      	mov	r7, fp
    24f6:	4656      	mov	r6, sl
    24f8:	464d      	mov	r5, r9
    24fa:	469b      	mov	fp, r3
    24fc:	4b2f      	ldr	r3, [pc, #188]	; (25bc <__register_exitproc+0xcc>)
    24fe:	b4f0      	push	{r4, r5, r6, r7}
    2500:	681c      	ldr	r4, [r3, #0]
    2502:	23a4      	movs	r3, #164	; 0xa4
    2504:	005b      	lsls	r3, r3, #1
    2506:	0005      	movs	r5, r0
    2508:	58e0      	ldr	r0, [r4, r3]
    250a:	000e      	movs	r6, r1
    250c:	4690      	mov	r8, r2
    250e:	2800      	cmp	r0, #0
    2510:	d04b      	beq.n	25aa <__register_exitproc+0xba>
    2512:	6843      	ldr	r3, [r0, #4]
    2514:	2b1f      	cmp	r3, #31
    2516:	dc0d      	bgt.n	2534 <__register_exitproc+0x44>
    2518:	1c5c      	adds	r4, r3, #1
    251a:	2d00      	cmp	r5, #0
    251c:	d121      	bne.n	2562 <__register_exitproc+0x72>
    251e:	3302      	adds	r3, #2
    2520:	009b      	lsls	r3, r3, #2
    2522:	6044      	str	r4, [r0, #4]
    2524:	501e      	str	r6, [r3, r0]
    2526:	2000      	movs	r0, #0
    2528:	bc3c      	pop	{r2, r3, r4, r5}
    252a:	4690      	mov	r8, r2
    252c:	4699      	mov	r9, r3
    252e:	46a2      	mov	sl, r4
    2530:	46ab      	mov	fp, r5
    2532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2534:	4b22      	ldr	r3, [pc, #136]	; (25c0 <__register_exitproc+0xd0>)
    2536:	2b00      	cmp	r3, #0
    2538:	d03c      	beq.n	25b4 <__register_exitproc+0xc4>
    253a:	20c8      	movs	r0, #200	; 0xc8
    253c:	0040      	lsls	r0, r0, #1
    253e:	e000      	b.n	2542 <__register_exitproc+0x52>
    2540:	bf00      	nop
    2542:	2800      	cmp	r0, #0
    2544:	d036      	beq.n	25b4 <__register_exitproc+0xc4>
    2546:	22a4      	movs	r2, #164	; 0xa4
    2548:	2300      	movs	r3, #0
    254a:	0052      	lsls	r2, r2, #1
    254c:	58a1      	ldr	r1, [r4, r2]
    254e:	6043      	str	r3, [r0, #4]
    2550:	6001      	str	r1, [r0, #0]
    2552:	50a0      	str	r0, [r4, r2]
    2554:	3240      	adds	r2, #64	; 0x40
    2556:	5083      	str	r3, [r0, r2]
    2558:	3204      	adds	r2, #4
    255a:	5083      	str	r3, [r0, r2]
    255c:	2401      	movs	r4, #1
    255e:	2d00      	cmp	r5, #0
    2560:	d0dd      	beq.n	251e <__register_exitproc+0x2e>
    2562:	009a      	lsls	r2, r3, #2
    2564:	4691      	mov	r9, r2
    2566:	4481      	add	r9, r0
    2568:	4642      	mov	r2, r8
    256a:	2188      	movs	r1, #136	; 0x88
    256c:	464f      	mov	r7, r9
    256e:	507a      	str	r2, [r7, r1]
    2570:	22c4      	movs	r2, #196	; 0xc4
    2572:	0052      	lsls	r2, r2, #1
    2574:	4690      	mov	r8, r2
    2576:	4480      	add	r8, r0
    2578:	4642      	mov	r2, r8
    257a:	3987      	subs	r1, #135	; 0x87
    257c:	4099      	lsls	r1, r3
    257e:	6812      	ldr	r2, [r2, #0]
    2580:	468a      	mov	sl, r1
    2582:	430a      	orrs	r2, r1
    2584:	4694      	mov	ip, r2
    2586:	4642      	mov	r2, r8
    2588:	4661      	mov	r1, ip
    258a:	6011      	str	r1, [r2, #0]
    258c:	2284      	movs	r2, #132	; 0x84
    258e:	4649      	mov	r1, r9
    2590:	465f      	mov	r7, fp
    2592:	0052      	lsls	r2, r2, #1
    2594:	508f      	str	r7, [r1, r2]
    2596:	2d02      	cmp	r5, #2
    2598:	d1c1      	bne.n	251e <__register_exitproc+0x2e>
    259a:	0002      	movs	r2, r0
    259c:	4655      	mov	r5, sl
    259e:	328d      	adds	r2, #141	; 0x8d
    25a0:	32ff      	adds	r2, #255	; 0xff
    25a2:	6811      	ldr	r1, [r2, #0]
    25a4:	430d      	orrs	r5, r1
    25a6:	6015      	str	r5, [r2, #0]
    25a8:	e7b9      	b.n	251e <__register_exitproc+0x2e>
    25aa:	0020      	movs	r0, r4
    25ac:	304d      	adds	r0, #77	; 0x4d
    25ae:	30ff      	adds	r0, #255	; 0xff
    25b0:	50e0      	str	r0, [r4, r3]
    25b2:	e7ae      	b.n	2512 <__register_exitproc+0x22>
    25b4:	2001      	movs	r0, #1
    25b6:	4240      	negs	r0, r0
    25b8:	e7b6      	b.n	2528 <__register_exitproc+0x38>
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	00002774 	.word	0x00002774
    25c0:	00000000 	.word	0x00000000

000025c4 <spi2MOSI>:
    25c4:	0c000002 00000200                                .....

000025c9 <spi2SCK>:
    25c9:	0e000002 00000200                                .....

000025ce <spi2MISO>:
    25ce:	0d000002 8d200000                                ......

000025d4 <lookupTable.12363>:
    25d4:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    25e4:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    25f4:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2604:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2614:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    2624:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    2634:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    2644:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    2654:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    2664:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    2674:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2684:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2694:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    26a4:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    26b4:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    26c4:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    26d4:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    26e4:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    26f4:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2704:	000f048e                                ....

00002708 <senseBatPin>:
    2708:	06000000 01000106                                .....

0000270d <senseAPin>:
    270d:	03010001 0100010b                                .....

00002712 <senseBPin>:
    2712:	02010001 0000000a                                .....

00002717 <senseCPin>:
    2717:	03000000 00000001                                .....

0000271c <senseDPin>:
    271c:	02000000 00000000                                .....

00002721 <analogAccelPin>:
    2721:	07000000 00000207                                .....

00002726 <spi2MOSI>:
    2726:	0c000002 00000200                                .....

0000272b <spi2SCK>:
    272b:	0e000002 001dcc00 001c8c00 001c8c00     ................
    273b:	001c8a00 001da400 001da400 001d9600     ................
    274b:	001c8a00 001da400 001d9600 001da400     ................
    275b:	001c8a00 001dac00 001dac00 001dac00     ................
    276b:	001fac00 00004300 00001000                       .....C...

00002774 <_global_impure_ptr>:
    2774:	20000010                                ... 

00002778 <_init>:
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    277a:	46c0      	nop			; (mov r8, r8)
    277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    277e:	bc08      	pop	{r3}
    2780:	469e      	mov	lr, r3
    2782:	4770      	bx	lr

00002784 <__init_array_start>:
    2784:	00002495 	.word	0x00002495

00002788 <__frame_dummy_init_array_entry>:
    2788:	000000dd                                ....

0000278c <_fini>:
    278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2792:	bc08      	pop	{r3}
    2794:	469e      	mov	lr, r3
    2796:	4770      	bx	lr

00002798 <__fini_array_start>:
    2798:	000000b5 	.word	0x000000b5
