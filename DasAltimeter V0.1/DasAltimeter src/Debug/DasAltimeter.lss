
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066d4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  000066d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006b90  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006d40  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f8e9  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002869  00000000  00000000  0003fe0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000027df  00000000  00000000  00042677  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000430  00000000  00000000  00044e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d80  00000000  00000000  00045286  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016363  00000000  00000000  00046006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009bfc  00000000  00000000  0005c369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000728a1  00000000  00000000  00065f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000114c  00000000  00000000  000d8808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000fc5 	.word	0x00000fc5
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001065 	.word	0x00001065
      90:	000010cd 	.word	0x000010cd
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	000066d4 	.word	0x000066d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	000066d4 	.word	0x000066d4
     10c:	000066d4 	.word	0x000066d4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000066d4 	.word	0x000066d4
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000625d 	.word	0x0000625d
     1d0:	00000a89 	.word	0x00000a89

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	000026f9 	.word	0x000026f9
     21c:	200004d0 	.word	0x200004d0

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000026f9 	.word	0x000026f9
     250:	200004d0 	.word	0x200004d0

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	000026f9 	.word	0x000026f9
     2c8:	200004d0 	.word	0x200004d0

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000026f9 	.word	0x000026f9
     33c:	200004d0 	.word	0x200004d0

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	000026f9 	.word	0x000026f9
     3ac:	200004d0 	.word	0x200004d0

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	000026f9 	.word	0x000026f9
     418:	200004d0 	.word	0x200004d0

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	0212      	lsls	r2, r2, #8
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	00006460 	.word	0x00006460
     4c8:	00000cbd 	.word	0x00000cbd
     4cc:	00000d29 	.word	0x00000d29

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4d2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4d6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4d8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4da:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4dc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4de:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     4e0:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     4e2:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	8905      	ldrh	r5, [r0, #8]
     4e6:	6903      	ldr	r3, [r0, #16]
     4e8:	022d      	lsls	r5, r5, #8
     4ea:	1b5b      	subs	r3, r3, r5
     4ec:	2500      	movs	r5, #0
     4ee:	9302      	str	r3, [sp, #8]
     4f0:	17db      	asrs	r3, r3, #31
     4f2:	9303      	str	r3, [sp, #12]
     4f4:	8940      	ldrh	r0, [r0, #10]
     4f6:	4f1f      	ldr	r7, [pc, #124]	; (574 <ConvertPressureTemperature+0xa4>)
     4f8:	9a02      	ldr	r2, [sp, #8]
     4fa:	0029      	movs	r1, r5
     4fc:	47b8      	blx	r7
     4fe:	23fa      	movs	r3, #250	; 0xfa
     500:	0249      	lsls	r1, r1, #9
     502:	0dc0      	lsrs	r0, r0, #23
     504:	4308      	orrs	r0, r1
     506:	00db      	lsls	r3, r3, #3
     508:	18c0      	adds	r0, r0, r3
     50a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	9b03      	ldr	r3, [sp, #12]
     510:	0030      	movs	r0, r6
     512:	0029      	movs	r1, r5
     514:	47b8      	blx	r7
     516:	060b      	lsls	r3, r1, #24
     518:	120f      	asrs	r7, r1, #8
     51a:	0a06      	lsrs	r6, r0, #8
     51c:	9900      	ldr	r1, [sp, #0]
     51e:	431e      	orrs	r6, r3
     520:	03ca      	lsls	r2, r1, #15
     522:	002b      	movs	r3, r5
     524:	0030      	movs	r0, r6
     526:	0039      	movs	r1, r7
     528:	4e12      	ldr	r6, [pc, #72]	; (574 <ConvertPressureTemperature+0xa4>)
     52a:	1880      	adds	r0, r0, r2
     52c:	4159      	adcs	r1, r3
     52e:	68e2      	ldr	r2, [r4, #12]
     530:	47b0      	blx	r6
     532:	02cb      	lsls	r3, r1, #11
     534:	0d42      	lsrs	r2, r0, #21
     536:	431a      	orrs	r2, r3
     538:	154b      	asrs	r3, r1, #21
     53a:	9200      	str	r2, [sp, #0]
     53c:	9301      	str	r3, [sp, #4]
     53e:	9a02      	ldr	r2, [sp, #8]
     540:	9b03      	ldr	r3, [sp, #12]
     542:	4e0c      	ldr	r6, [pc, #48]	; (574 <ConvertPressureTemperature+0xa4>)
     544:	9805      	ldr	r0, [sp, #20]
     546:	0029      	movs	r1, r5
     548:	47b0      	blx	r6
     54a:	064b      	lsls	r3, r1, #25
     54c:	09c6      	lsrs	r6, r0, #7
     54e:	431e      	orrs	r6, r3
     550:	002b      	movs	r3, r5
     552:	11cf      	asrs	r7, r1, #7
     554:	9904      	ldr	r1, [sp, #16]
     556:	040a      	lsls	r2, r1, #16
     558:	1992      	adds	r2, r2, r6
     55a:	417b      	adcs	r3, r7
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a80      	subs	r0, r0, r2
     562:	4199      	sbcs	r1, r3
     564:	000a      	movs	r2, r1
     566:	0453      	lsls	r3, r2, #17
     568:	0bc2      	lsrs	r2, r0, #15
     56a:	431a      	orrs	r2, r3
     56c:	61e2      	str	r2, [r4, #28]

}
     56e:	b007      	add	sp, #28
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	00003b35 	.word	0x00003b35

00000578 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     578:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     57c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57e:	69c0      	ldr	r0, [r0, #28]
     580:	4798      	blx	r3
     582:	4d0e      	ldr	r5, [pc, #56]	; (5bc <paToFeetNOAA+0x44>)
     584:	2200      	movs	r2, #0
     586:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <paToFeetNOAA+0x48>)
     588:	47a8      	blx	r5
     58a:	2200      	movs	r2, #0
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <paToFeetNOAA+0x4c>)
     58e:	47a8      	blx	r5
     590:	4a0d      	ldr	r2, [pc, #52]	; (5c8 <paToFeetNOAA+0x50>)
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <paToFeetNOAA+0x54>)
     594:	4d0e      	ldr	r5, [pc, #56]	; (5d0 <paToFeetNOAA+0x58>)
     596:	47a8      	blx	r5
     598:	4d0e      	ldr	r5, [pc, #56]	; (5d4 <paToFeetNOAA+0x5c>)
     59a:	0002      	movs	r2, r0
     59c:	000b      	movs	r3, r1
     59e:	2000      	movs	r0, #0
     5a0:	490d      	ldr	r1, [pc, #52]	; (5d8 <paToFeetNOAA+0x60>)
     5a2:	47a8      	blx	r5
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <paToFeetNOAA+0x64>)
     5a6:	4d0e      	ldr	r5, [pc, #56]	; (5e0 <paToFeetNOAA+0x68>)
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <paToFeetNOAA+0x6c>)
     5aa:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ae:	62a0      	str	r0, [r4, #40]	; 0x28
     5b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5b2:	4798      	blx	r3
     5b4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	00005e49 	.word	0x00005e49
     5bc:	000049b9 	.word	0x000049b9
     5c0:	40240000 	.word	0x40240000
     5c4:	408faa00 	.word	0x408faa00
     5c8:	e279dd3c 	.word	0xe279dd3c
     5cc:	3fc85b39 	.word	0x3fc85b39
     5d0:	00002825 	.word	0x00002825
     5d4:	000056f5 	.word	0x000056f5
     5d8:	3ff00000 	.word	0x3ff00000
     5dc:	9999999a 	.word	0x9999999a
     5e0:	00005201 	.word	0x00005201
     5e4:	4101beb3 	.word	0x4101beb3
     5e8:	00003bbd 	.word	0x00003bbd

000005ec <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	27a2      	movs	r7, #162	; 0xa2
     5f0:	b087      	sub	sp, #28
     5f2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5f4:	2096      	movs	r0, #150	; 0x96
     5f6:	4c2b      	ldr	r4, [pc, #172]	; (6a4 <readMS5803Coefficients+0xb8>)
     5f8:	0080      	lsls	r0, r0, #2
     5fa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5fc:	2096      	movs	r0, #150	; 0x96
     5fe:	0080      	lsls	r0, r0, #2
     600:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     604:	4c28      	ldr	r4, [pc, #160]	; (6a8 <readMS5803Coefficients+0xbc>)
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <readMS5803Coefficients+0xc0>)
     608:	0212      	lsls	r2, r2, #8
     60a:	615a      	str	r2, [r3, #20]
     60c:	7863      	ldrb	r3, [r4, #1]
     60e:	7820      	ldrb	r0, [r4, #0]
     610:	78a2      	ldrb	r2, [r4, #2]
     612:	021b      	lsls	r3, r3, #8
     614:	4303      	orrs	r3, r0
     616:	0412      	lsls	r2, r2, #16
     618:	0019      	movs	r1, r3
     61a:	0013      	movs	r3, r2
     61c:	430b      	orrs	r3, r1
     61e:	79a1      	ldrb	r1, [r4, #6]
     620:	7966      	ldrb	r6, [r4, #5]
     622:	0209      	lsls	r1, r1, #8
     624:	4331      	orrs	r1, r6
     626:	0008      	movs	r0, r1
     628:	79e1      	ldrb	r1, [r4, #7]
     62a:	78e2      	ldrb	r2, [r4, #3]
     62c:	0409      	lsls	r1, r1, #16
     62e:	4301      	orrs	r1, r0
     630:	7a20      	ldrb	r0, [r4, #8]
     632:	7a66      	ldrb	r6, [r4, #9]
     634:	0612      	lsls	r2, r2, #24
     636:	0600      	lsls	r0, r0, #24
     638:	4308      	orrs	r0, r1
     63a:	431a      	orrs	r2, r3
     63c:	9700      	str	r7, [sp, #0]
     63e:	7923      	ldrb	r3, [r4, #4]
     640:	0031      	movs	r1, r6
     642:	4d1b      	ldr	r5, [pc, #108]	; (6b0 <readMS5803Coefficients+0xc4>)
     644:	9003      	str	r0, [sp, #12]
     646:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	0020      	movs	r0, r4
     64c:	7aa1      	ldrb	r1, [r4, #10]
     64e:	7b24      	ldrb	r4, [r4, #12]
     650:	021b      	lsls	r3, r3, #8
     652:	430b      	orrs	r3, r1
     654:	0424      	lsls	r4, r4, #16
     656:	001a      	movs	r2, r3
     658:	0023      	movs	r3, r4
     65a:	7b44      	ldrb	r4, [r0, #13]
     65c:	7b85      	ldrb	r5, [r0, #14]
     65e:	4313      	orrs	r3, r2
     660:	0624      	lsls	r4, r4, #24
     662:	431c      	orrs	r4, r3
     664:	0022      	movs	r2, r4
     666:	002b      	movs	r3, r5
     668:	9404      	str	r4, [sp, #16]
     66a:	0031      	movs	r1, r6
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <readMS5803Coefficients+0xc8>)
     66e:	9803      	ldr	r0, [sp, #12]
     670:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     672:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     674:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     676:	9a04      	ldr	r2, [sp, #16]
     678:	9803      	ldr	r0, [sp, #12]
     67a:	0031      	movs	r1, r6
     67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <readMS5803Coefficients+0xc8>)
     67e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	2280      	movs	r2, #128	; 0x80
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <readMS5803Coefficients+0xc0>)
     684:	0212      	lsls	r2, r2, #8
     686:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     688:	9b05      	ldr	r3, [sp, #20]
     68a:	021d      	lsls	r5, r3, #8
     68c:	9b02      	ldr	r3, [sp, #8]
     68e:	4328      	orrs	r0, r5
     690:	8018      	strh	r0, [r3, #0]
     692:	1cbb      	adds	r3, r7, #2
     694:	b2df      	uxtb	r7, r3
     696:	9b02      	ldr	r3, [sp, #8]
     698:	3302      	adds	r3, #2
     69a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     69c:	2fae      	cmp	r7, #174	; 0xae
     69e:	d1a9      	bne.n	5f4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6a0:	b007      	add	sp, #28
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	00000f65 	.word	0x00000f65
     6a8:	00006460 	.word	0x00006460
     6ac:	41004400 	.word	0x41004400
     6b0:	00000cbd 	.word	0x00000cbd
     6b4:	00000d29 	.word	0x00000d29

000006b8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6bc:	231e      	movs	r3, #30
     6be:	491a      	ldr	r1, [pc, #104]	; (728 <initMS5803Barometer+0x70>)
     6c0:	4d1a      	ldr	r5, [pc, #104]	; (72c <initMS5803Barometer+0x74>)
     6c2:	0236      	lsls	r6, r6, #8
     6c4:	616e      	str	r6, [r5, #20]
     6c6:	9300      	str	r3, [sp, #0]
     6c8:	784b      	ldrb	r3, [r1, #1]
     6ca:	780a      	ldrb	r2, [r1, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	4313      	orrs	r3, r2
     6d0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6d2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d4:	0412      	lsls	r2, r2, #16
     6d6:	0018      	movs	r0, r3
     6d8:	0013      	movs	r3, r2
     6da:	78ca      	ldrb	r2, [r1, #3]
     6dc:	4303      	orrs	r3, r0
     6de:	0612      	lsls	r2, r2, #24
     6e0:	1d4f      	adds	r7, r1, #5
     6e2:	431a      	orrs	r2, r3
     6e4:	7948      	ldrb	r0, [r1, #5]
     6e6:	790b      	ldrb	r3, [r1, #4]
     6e8:	7989      	ldrb	r1, [r1, #6]
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	4301      	orrs	r1, r0
     6ee:	78b8      	ldrb	r0, [r7, #2]
     6f0:	0400      	lsls	r0, r0, #16
     6f2:	4301      	orrs	r1, r0
     6f4:	78f8      	ldrb	r0, [r7, #3]
     6f6:	0600      	lsls	r0, r0, #24
     6f8:	4308      	orrs	r0, r1
     6fa:	7939      	ldrb	r1, [r7, #4]
     6fc:	4f0c      	ldr	r7, [pc, #48]	; (730 <initMS5803Barometer+0x78>)
     6fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     700:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     702:	20c8      	movs	r0, #200	; 0xc8
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <initMS5803Barometer+0x7c>)
     706:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     708:	0020      	movs	r0, r4
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <initMS5803Barometer+0x80>)
     70c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     70e:	23fa      	movs	r3, #250	; 0xfa
     710:	011b      	lsls	r3, r3, #4
     712:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <initMS5803Barometer+0x84>)
     716:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <initMS5803Barometer+0x88>)
     71a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     71c:	4b09      	ldr	r3, [pc, #36]	; (744 <initMS5803Barometer+0x8c>)
     71e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     720:	23fa      	movs	r3, #250	; 0xfa
     722:	00db      	lsls	r3, r3, #3
     724:	6163      	str	r3, [r4, #20]




}
     726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     728:	00006460 	.word	0x00006460
     72c:	41004400 	.word	0x41004400
     730:	00000cbd 	.word	0x00000cbd
     734:	00000f95 	.word	0x00000f95
     738:	000005ed 	.word	0x000005ed
     73c:	00002710 	.word	0x00002710
     740:	0041c9fe 	.word	0x0041c9fe
     744:	007ffae4 	.word	0x007ffae4

00000748 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     748:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     74a:	4bc0      	ldr	r3, [pc, #768]	; (a4c <init+0x304>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74c:	b085      	sub	sp, #20
    SystemInit();
     74e:	4798      	blx	r3
    GclkInit();
     750:	4bbf      	ldr	r3, [pc, #764]	; (a50 <init+0x308>)
     752:	4798      	blx	r3
    RtcInit();
     754:	4bbf      	ldr	r3, [pc, #764]	; (a54 <init+0x30c>)
     756:	4798      	blx	r3
    delayInit();
     758:	4bbf      	ldr	r3, [pc, #764]	; (a58 <init+0x310>)
     75a:	4798      	blx	r3
    adcInit();
     75c:	4bbf      	ldr	r3, [pc, #764]	; (a5c <init+0x314>)
     75e:	4798      	blx	r3
    dmaInit();
     760:	4bbf      	ldr	r3, [pc, #764]	; (a60 <init+0x318>)
     762:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     764:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     766:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     768:	4bbe      	ldr	r3, [pc, #760]	; (a64 <init+0x31c>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     76c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76e:	5858      	ldr	r0, [r3, r1]
     770:	4abd      	ldr	r2, [pc, #756]	; (a68 <init+0x320>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	2401      	movs	r4, #1
     774:	4002      	ands	r2, r0
     776:	505a      	str	r2, [r3, r1]
     778:	4bbc      	ldr	r3, [pc, #752]	; (a6c <init+0x324>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     77a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77c:	0019      	movs	r1, r3
     77e:	3154      	adds	r1, #84	; 0x54
     780:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     782:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	43a2      	bics	r2, r4
     786:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2280      	movs	r2, #128	; 0x80
     78a:	0352      	lsls	r2, r2, #13
     78c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     78e:	220f      	movs	r2, #15
     790:	3033      	adds	r0, #51	; 0x33
     792:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     794:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     796:	4391      	bics	r1, r2
     798:	4321      	orrs	r1, r4
     79a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	7cc1      	ldrb	r1, [r0, #19]
     79e:	36c3      	adds	r6, #195	; 0xc3
     7a0:	4321      	orrs	r1, r4
     7a2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7a4:	0019      	movs	r1, r3
     7a6:	31b1      	adds	r1, #177	; 0xb1
     7a8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ac:	4010      	ands	r0, r2
     7ae:	4328      	orrs	r0, r5
     7b0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b6:	4320      	orrs	r0, r4
     7b8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ba:	7808      	ldrb	r0, [r1, #0]
     7bc:	4010      	ands	r0, r2
     7be:	4328      	orrs	r0, r5
     7c0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7830      	ldrb	r0, [r6, #0]
     7c4:	4320      	orrs	r0, r4
     7c6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	7d30      	ldrb	r0, [r6, #20]
     7ca:	43a0      	bics	r0, r4
     7cc:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ce:	2080      	movs	r0, #128	; 0x80
     7d0:	0400      	lsls	r0, r0, #16
     7d2:	9703      	str	r7, [sp, #12]
     7d4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7d6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7d8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7da:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7dc:	4390      	bics	r0, r2
     7de:	4320      	orrs	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	20c2      	movs	r0, #194	; 0xc2
     7e4:	4684      	mov	ip, r0
     7e6:	449c      	add	ip, r3
     7e8:	4660      	mov	r0, ip
     7ea:	4667      	mov	r7, ip
     7ec:	7800      	ldrb	r0, [r0, #0]
     7ee:	4320      	orrs	r0, r4
     7f0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f2:	7808      	ldrb	r0, [r1, #0]
     7f4:	4390      	bics	r0, r2
     7f6:	4320      	orrs	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     806:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	43a1      	bics	r1, r4
     80a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	9803      	ldr	r0, [sp, #12]
     810:	03c9      	lsls	r1, r1, #15
     812:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     814:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     816:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     818:	3031      	adds	r0, #49	; 0x31
     81a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     81e:	4011      	ands	r1, r2
     820:	430d      	orrs	r5, r1
     822:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	001d      	movs	r5, r3
     826:	3543      	adds	r5, #67	; 0x43
     828:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     82a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	4321      	orrs	r1, r4
     82e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	7da9      	ldrb	r1, [r5, #22]
     832:	3505      	adds	r5, #5
     834:	43a1      	bics	r1, r4
     836:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0489      	lsls	r1, r1, #18
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     840:	7801      	ldrb	r1, [r0, #0]
     842:	4391      	bics	r1, r2
     844:	4321      	orrs	r1, r4
     846:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     848:	7c41      	ldrb	r1, [r0, #17]
     84a:	3011      	adds	r0, #17
     84c:	4321      	orrs	r1, r4
     84e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7d81      	ldrb	r1, [r0, #22]
     852:	43a1      	bics	r1, r4
     854:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     856:	2180      	movs	r1, #128	; 0x80
     858:	0449      	lsls	r1, r1, #17
     85a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     85e:	7829      	ldrb	r1, [r5, #0]
     860:	43a1      	bics	r1, r4
     862:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     864:	2180      	movs	r1, #128	; 0x80
     866:	0049      	lsls	r1, r1, #1
     868:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	7831      	ldrb	r1, [r6, #0]
     86c:	43a1      	bics	r1, r4
     86e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2180      	movs	r1, #128	; 0x80
     872:	0089      	lsls	r1, r1, #2
     874:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     876:	0019      	movs	r1, r3
     878:	314b      	adds	r1, #75	; 0x4b
     87a:	7808      	ldrb	r0, [r1, #0]
     87c:	43a0      	bics	r0, r4
     87e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     880:	7808      	ldrb	r0, [r1, #0]
     882:	4338      	orrs	r0, r7
     884:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     886:	2080      	movs	r0, #128	; 0x80
     888:	0100      	lsls	r0, r0, #4
     88a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88c:	4878      	ldr	r0, [pc, #480]	; (a70 <init+0x328>)
     88e:	371e      	adds	r7, #30
     890:	7800      	ldrb	r0, [r0, #0]
     892:	4010      	ands	r0, r2
     894:	4338      	orrs	r0, r7
     896:	4f76      	ldr	r7, [pc, #472]	; (a70 <init+0x328>)
     898:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     89c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89e:	4320      	orrs	r0, r4
     8a0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a2:	0018      	movs	r0, r3
     8a4:	3034      	adds	r0, #52	; 0x34
     8a6:	7801      	ldrb	r1, [r0, #0]
     8a8:	4011      	ands	r1, r2
     8aa:	4339      	orrs	r1, r7
     8ac:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ae:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8b0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b2:	4321      	orrs	r1, r4
     8b4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	4666      	mov	r6, ip
     8b8:	7801      	ldrb	r1, [r0, #0]
     8ba:	4391      	bics	r1, r2
     8bc:	4331      	orrs	r1, r6
     8be:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c4:	4321      	orrs	r1, r4
     8c6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7801      	ldrb	r1, [r0, #0]
     8ca:	001e      	movs	r6, r3
     8cc:	43a1      	bics	r1, r4
     8ce:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d0:	2180      	movs	r1, #128	; 0x80
     8d2:	9803      	ldr	r0, [sp, #12]
     8d4:	00c9      	lsls	r1, r1, #3
     8d6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8d8:	0018      	movs	r0, r3
     8da:	3098      	adds	r0, #152	; 0x98
     8dc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	78a8      	ldrb	r0, [r5, #2]
     8e0:	3651      	adds	r6, #81	; 0x51
     8e2:	43a0      	bics	r0, r4
     8e4:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8e8:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	7a29      	ldrb	r1, [r5, #8]
     8ec:	43a1      	bics	r1, r4
     8ee:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0249      	lsls	r1, r1, #9
     8f4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f6:	7831      	ldrb	r1, [r6, #0]
     8f8:	43a1      	bics	r1, r4
     8fa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	0289      	lsls	r1, r1, #10
     900:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	0019      	movs	r1, r3
     904:	3153      	adds	r1, #83	; 0x53
     906:	7808      	ldrb	r0, [r1, #0]
     908:	43a0      	bics	r0, r4
     90a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90c:	7808      	ldrb	r0, [r1, #0]
     90e:	4338      	orrs	r0, r7
     910:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     914:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     916:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     918:	0300      	lsls	r0, r0, #12
     91a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     91c:	9703      	str	r7, [sp, #12]
     91e:	7838      	ldrb	r0, [r7, #0]
     920:	2720      	movs	r7, #32
     922:	4010      	ands	r0, r2
     924:	4338      	orrs	r0, r7
     926:	9f03      	ldr	r7, [sp, #12]
     928:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     92c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	4320      	orrs	r0, r4
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	0018      	movs	r0, r3
     934:	3038      	adds	r0, #56	; 0x38
     936:	7801      	ldrb	r1, [r0, #0]
     938:	4011      	ands	r1, r2
     93a:	4339      	orrs	r1, r7
     93c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     93e:	7831      	ldrb	r1, [r6, #0]
     940:	4321      	orrs	r1, r4
     942:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     944:	4666      	mov	r6, ip
     946:	7801      	ldrb	r1, [r0, #0]
     948:	4391      	bics	r1, r2
     94a:	4331      	orrs	r1, r6
     94c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     950:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     952:	4321      	orrs	r1, r4
     954:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     956:	7981      	ldrb	r1, [r0, #6]
     958:	43a1      	bics	r1, r4
     95a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     95c:	2180      	movs	r1, #128	; 0x80
     95e:	02c9      	lsls	r1, r1, #11
     960:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     962:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     964:	7801      	ldrb	r1, [r0, #0]
     966:	43a1      	bics	r1, r4
     968:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     96a:	2180      	movs	r1, #128	; 0x80
     96c:	0149      	lsls	r1, r1, #5
     96e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	7881      	ldrb	r1, [r0, #2]
     972:	43a1      	bics	r1, r4
     974:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     976:	2180      	movs	r1, #128	; 0x80
     978:	01c9      	lsls	r1, r1, #7
     97a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     97c:	0019      	movs	r1, r3
     97e:	314d      	adds	r1, #77	; 0x4d
     980:	7808      	ldrb	r0, [r1, #0]
     982:	43a0      	bics	r0, r4
     984:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     986:	7808      	ldrb	r0, [r1, #0]
     988:	4330      	orrs	r0, r6
     98a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     98c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     98e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     990:	0189      	lsls	r1, r1, #6
     992:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	304f      	adds	r0, #79	; 0x4f
     996:	7801      	ldrb	r1, [r0, #0]
     998:	43a1      	bics	r1, r4
     99a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99c:	2180      	movs	r1, #128	; 0x80
     99e:	0209      	lsls	r1, r1, #8
     9a0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a4:	0019      	movs	r1, r3
     9a6:	3155      	adds	r1, #85	; 0x55
     9a8:	7808      	ldrb	r0, [r1, #0]
     9aa:	43a0      	bics	r0, r4
     9ac:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ae:	2080      	movs	r0, #128	; 0x80
     9b0:	0380      	lsls	r0, r0, #14
     9b2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9b4:	2040      	movs	r0, #64	; 0x40
     9b6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b8:	7848      	ldrb	r0, [r1, #1]
     9ba:	43a0      	bics	r0, r4
     9bc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9be:	2080      	movs	r0, #128	; 0x80
     9c0:	03c0      	lsls	r0, r0, #15
     9c2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9c4:	0018      	movs	r0, r3
     9c6:	303b      	adds	r0, #59	; 0x3b
     9c8:	7805      	ldrb	r5, [r0, #0]
     9ca:	4395      	bics	r5, r2
     9cc:	4335      	orrs	r5, r6
     9ce:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9d0:	784d      	ldrb	r5, [r1, #1]
     9d2:	4325      	orrs	r5, r4
     9d4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d6:	788d      	ldrb	r5, [r1, #2]
     9d8:	43a5      	bics	r5, r4
     9da:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9dc:	788d      	ldrb	r5, [r1, #2]
     9de:	4335      	orrs	r5, r6
     9e0:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9e2:	2580      	movs	r5, #128	; 0x80
     9e4:	042d      	lsls	r5, r5, #16
     9e6:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9e8:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9ea:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     9ec:	4e21      	ldr	r6, [pc, #132]	; (a74 <init+0x32c>)
     9ee:	401a      	ands	r2, r3
     9f0:	433a      	orrs	r2, r7
     9f2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f4:	788b      	ldrb	r3, [r1, #2]
     9f6:	2204      	movs	r2, #4
     9f8:	4323      	orrs	r3, r4
     9fa:	708b      	strb	r3, [r1, #2]
     9fc:	2000      	movs	r0, #0
     9fe:	2103      	movs	r1, #3
     a00:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a02:	002b      	movs	r3, r5
     a04:	002a      	movs	r2, r5
     a06:	0028      	movs	r0, r5
     a08:	4f1b      	ldr	r7, [pc, #108]	; (a78 <init+0x330>)
     a0a:	9501      	str	r5, [sp, #4]
     a0c:	9500      	str	r5, [sp, #0]
     a0e:	2103      	movs	r1, #3
     a10:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a12:	0020      	movs	r0, r4
     a14:	2204      	movs	r2, #4
     a16:	2103      	movs	r1, #3
     a18:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a1a:	002b      	movs	r3, r5
     a1c:	002a      	movs	r2, r5
     a1e:	0020      	movs	r0, r4
     a20:	9501      	str	r5, [sp, #4]
     a22:	9500      	str	r5, [sp, #0]
     a24:	2103      	movs	r1, #3
     a26:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a28:	2208      	movs	r2, #8
     a2a:	2104      	movs	r1, #4
     a2c:	2003      	movs	r0, #3
     a2e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     a30:	2396      	movs	r3, #150	; 0x96
     a32:	0021      	movs	r1, r4
     a34:	002a      	movs	r2, r5
     a36:	2003      	movs	r0, #3
     a38:	01db      	lsls	r3, r3, #7
     a3a:	4c10      	ldr	r4, [pc, #64]	; (a7c <init+0x334>)
     a3c:	47a0      	blx	r4

    TC4Init();
     a3e:	4b10      	ldr	r3, [pc, #64]	; (a80 <init+0x338>)
     a40:	4798      	blx	r3
    TC5Init();
     a42:	4b10      	ldr	r3, [pc, #64]	; (a84 <init+0x33c>)
     a44:	4798      	blx	r3
}
     a46:	b005      	add	sp, #20
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	000001d5 	.word	0x000001d5
     a50:	00000df1 	.word	0x00000df1
     a54:	00000e79 	.word	0x00000e79
     a58:	00000f45 	.word	0x00000f45
     a5c:	00000bd9 	.word	0x00000bd9
     a60:	000010e5 	.word	0x000010e5
     a64:	e000e100 	.word	0xe000e100
     a68:	ff00ffff 	.word	0xff00ffff
     a6c:	41004400 	.word	0x41004400
     a70:	41004435 	.word	0x41004435
     a74:	000025e9 	.word	0x000025e9
     a78:	0000264d 	.word	0x0000264d
     a7c:	000026b1 	.word	0x000026b1
     a80:	00001015 	.word	0x00001015
     a84:	0000107d 	.word	0x0000107d

00000a88 <main>:


int main(void) {
     a88:	b510      	push	{r4, lr}
     a8a:	4c1b      	ldr	r4, [pc, #108]	; (af8 <main+0x70>)

    init();
     a8c:	4b1b      	ldr	r3, [pc, #108]	; (afc <main+0x74>)
    TC4Init();
    TC5Init();
}


int main(void) {
     a8e:	44a5      	add	sp, r4

    init();
     a90:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a92:	2400      	movs	r4, #0
     a94:	466b      	mov	r3, sp

    initMS5803Barometer(&my_altimeter.myBarometer);
     a96:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a98:	701c      	strb	r4, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <main+0x78>)
     a9c:	4798      	blx	r3
    IMUinit();
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <main+0x7c>)
     aa0:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     aa2:	2384      	movs	r3, #132	; 0x84
     aa4:	466a      	mov	r2, sp
     aa6:	009b      	lsls	r3, r3, #2
     aa8:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     aaa:	4b17      	ldr	r3, [pc, #92]	; (b08 <main+0x80>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     aac:	a814      	add	r0, sp, #80	; 0x50

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     aae:	54d4      	strb	r4, [r2, r3]

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <main+0x84>)
     ab2:	4798      	blx	r3

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     ab4:	4b16      	ldr	r3, [pc, #88]	; (b10 <main+0x88>)
     ab6:	9835      	ldr	r0, [sp, #212]	; 0xd4
     ab8:	4798      	blx	r3
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     aba:	4b16      	ldr	r3, [pc, #88]	; (b14 <main+0x8c>)
    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     abc:	902e      	str	r0, [sp, #184]	; 0xb8
     abe:	912f      	str	r1, [sp, #188]	; 0xbc
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ac0:	980e      	ldr	r0, [sp, #56]	; 0x38
     ac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ac4:	4798      	blx	r3

    my_altimeter.StartupTick = millis();
     ac6:	4b14      	ldr	r3, [pc, #80]	; (b18 <main+0x90>)
    my_altimeter.myFlashMemory.pageReady = false;

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ac8:	9010      	str	r0, [sp, #64]	; 0x40

    my_altimeter.StartupTick = millis();
     aca:	4798      	blx	r3
     acc:	23ca      	movs	r3, #202	; 0xca
     ace:	466a      	mov	r2, sp
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	50d0      	str	r0, [r2, r3]

	beep(400);
     ad4:	20c8      	movs	r0, #200	; 0xc8
     ad6:	4b11      	ldr	r3, [pc, #68]	; (b1c <main+0x94>)
     ad8:	0040      	lsls	r0, r0, #1
     ada:	4798      	blx	r3



    while (1) {

        if (takeSample()) {
     adc:	4b10      	ldr	r3, [pc, #64]	; (b20 <main+0x98>)
     ade:	4798      	blx	r3
     ae0:	2800      	cmp	r0, #0
     ae2:	d0fb      	beq.n	adc <main+0x54>
            sampleTick(&my_altimeter);
     ae4:	4668      	mov	r0, sp
     ae6:	4b0f      	ldr	r3, [pc, #60]	; (b24 <main+0x9c>)
     ae8:	4798      	blx	r3
            flight(&my_altimeter);
     aea:	4668      	mov	r0, sp
     aec:	4b0e      	ldr	r3, [pc, #56]	; (b28 <main+0xa0>)
     aee:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     af0:	4668      	mov	r0, sp
     af2:	4b0e      	ldr	r3, [pc, #56]	; (b2c <main+0xa4>)
     af4:	4798      	blx	r3
     af6:	e7f1      	b.n	adc <main+0x54>
     af8:	fffffcc0 	.word	0xfffffcc0
     afc:	00000749 	.word	0x00000749
     b00:	000006b9 	.word	0x000006b9
     b04:	00000b31 	.word	0x00000b31
     b08:	00000311 	.word	0x00000311
     b0c:	00001359 	.word	0x00001359
     b10:	00005f3d 	.word	0x00005f3d
     b14:	00003bbd 	.word	0x00003bbd
     b18:	00000fe1 	.word	0x00000fe1
     b1c:	00000d7d 	.word	0x00000d7d
     b20:	000021d9 	.word	0x000021d9
     b24:	000021f1 	.word	0x000021f1
     b28:	00001145 	.word	0x00001145
     b2c:	00001bfd 	.word	0x00001bfd

00000b30 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b30:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b32:	4c08      	ldr	r4, [pc, #32]	; (b54 <IMUinit+0x24>)
     b34:	2580      	movs	r5, #128	; 0x80
     b36:	0023      	movs	r3, r4
     b38:	00ed      	lsls	r5, r5, #3
     b3a:	3394      	adds	r3, #148	; 0x94
     b3c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b3e:	4e06      	ldr	r6, [pc, #24]	; (b58 <IMUinit+0x28>)
     b40:	210f      	movs	r1, #15
     b42:	2000      	movs	r0, #0
     b44:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b46:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b48:	210c      	movs	r1, #12
     b4a:	2000      	movs	r0, #0
     b4c:	47b0      	blx	r6
     b4e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b50:	bd70      	pop	{r4, r5, r6, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	41004400 	.word	0x41004400
     b58:	000026f9 	.word	0x000026f9

00000b5c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b5c:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b5e:	4b09      	ldr	r3, [pc, #36]	; (b84 <USARTconnectionAvaliable+0x28>)
     b60:	7e1c      	ldrb	r4, [r3, #24]
     b62:	0764      	lsls	r4, r4, #29
     b64:	0fe4      	lsrs	r4, r4, #31
     b66:	2c01      	cmp	r4, #1
     b68:	d001      	beq.n	b6e <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b6a:	2000      	movs	r0, #0
     b6c:	e009      	b.n	b82 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     b6e:	2003      	movs	r0, #3
     b70:	4b05      	ldr	r3, [pc, #20]	; (b88 <USARTconnectionAvaliable+0x2c>)
     b72:	4798      	blx	r3
     b74:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     b76:	2948      	cmp	r1, #72	; 0x48
     b78:	d1f7      	bne.n	b6a <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b7a:	2003      	movs	r0, #3
     b7c:	4b03      	ldr	r3, [pc, #12]	; (b8c <USARTconnectionAvaliable+0x30>)
     b7e:	4798      	blx	r3
            return true;
     b80:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     b82:	bd10      	pop	{r4, pc}
     b84:	42001400 	.word	0x42001400
     b88:	00002729 	.word	0x00002729
     b8c:	00002711 	.word	0x00002711

00000b90 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b92:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b94:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b96:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b98:	1a09      	subs	r1, r1, r0
     b9a:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b9c:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b9e:	b28b      	uxth	r3, r1
     ba0:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ba2:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ba4:	a902      	add	r1, sp, #8
     ba6:	0028      	movs	r0, r5
     ba8:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sendTheasePagesToComputer+0x40>)
     baa:	4798      	blx	r3
     bac:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     bae:	ab02      	add	r3, sp, #8
     bb0:	5d99      	ldrb	r1, [r3, r6]
     bb2:	2003      	movs	r0, #3
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <sendTheasePagesToComputer+0x44>)
     bb6:	3601      	adds	r6, #1
     bb8:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bba:	42be      	cmp	r6, r7
     bbc:	d1f7      	bne.n	bae <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bbe:	3401      	adds	r4, #1
     bc0:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bc2:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bc4:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bc6:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bc8:	42a3      	cmp	r3, r4
     bca:	d2eb      	bcs.n	ba4 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     bcc:	b043      	add	sp, #268	; 0x10c
     bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd0:	000003b1 	.word	0x000003b1
     bd4:	00002711 	.word	0x00002711

00000bd8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bd8:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     bda:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bdc:	4a10      	ldr	r2, [pc, #64]	; (c20 <adcInit+0x48>)
     bde:	0249      	lsls	r1, r1, #9
     be0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     be2:	4810      	ldr	r0, [pc, #64]	; (c24 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     be4:	430b      	orrs	r3, r1
     be6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     be8:	23e0      	movs	r3, #224	; 0xe0
     bea:	490f      	ldr	r1, [pc, #60]	; (c28 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bec:	4a0f      	ldr	r2, [pc, #60]	; (c2c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bee:	00db      	lsls	r3, r3, #3
     bf0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bf2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bf4:	4a0e      	ldr	r2, [pc, #56]	; (c30 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bf6:	6812      	ldr	r2, [r2, #0]
     bf8:	0150      	lsls	r0, r2, #5
     bfa:	4018      	ands	r0, r3
     bfc:	4b0d      	ldr	r3, [pc, #52]	; (c34 <adcInit+0x5c>)
     bfe:	0154      	lsls	r4, r2, #5
     c00:	681a      	ldr	r2, [r3, #0]
     c02:	0ed3      	lsrs	r3, r2, #27
     c04:	4323      	orrs	r3, r4
     c06:	b2da      	uxtb	r2, r3
     c08:	0003      	movs	r3, r0
     c0a:	4313      	orrs	r3, r2
     c0c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c0e:	2302      	movs	r3, #2
     c10:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c12:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c14:	7e4b      	ldrb	r3, [r1, #25]
     c16:	b25b      	sxtb	r3, r3
     c18:	2b00      	cmp	r3, #0
     c1a:	dbfb      	blt.n	c14 <adcInit+0x3c>
}
     c1c:	bd10      	pop	{r4, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	40000400 	.word	0x40000400
     c24:	0000401e 	.word	0x0000401e
     c28:	42004000 	.word	0x42004000
     c2c:	40000c00 	.word	0x40000c00
     c30:	00806024 	.word	0x00806024
     c34:	00806020 	.word	0x00806020

00000c38 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c38:	2202      	movs	r2, #2
     c3a:	4b05      	ldr	r3, [pc, #20]	; (c50 <adcSample+0x18>)
     c3c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c3e:	3a01      	subs	r2, #1
     c40:	7e19      	ldrb	r1, [r3, #24]
     c42:	4211      	tst	r1, r2
     c44:	d0fc      	beq.n	c40 <adcSample+0x8>
    return ADC->RESULT.reg;
     c46:	4b02      	ldr	r3, [pc, #8]	; (c50 <adcSample+0x18>)
     c48:	8b58      	ldrh	r0, [r3, #26]
     c4a:	b280      	uxth	r0, r0
}
     c4c:	4770      	bx	lr
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	42004000 	.word	0x42004000

00000c54 <adc_read>:


u16_t adc_read(Pin p) {
     c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c56:	2501      	movs	r5, #1
     c58:	0c02      	lsrs	r2, r0, #16
     c5a:	b2d4      	uxtb	r4, r2
     c5c:	9000      	str	r0, [sp, #0]
     c5e:	0e00      	lsrs	r0, r0, #24
     c60:	9101      	str	r1, [sp, #4]
     c62:	0842      	lsrs	r2, r0, #1
     c64:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c66:	4911      	ldr	r1, [pc, #68]	; (cac <adc_read+0x58>)
     c68:	18d2      	adds	r2, r2, r3
     c6a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c6c:	4228      	tst	r0, r5
     c6e:	d005      	beq.n	c7c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c70:	210f      	movs	r1, #15
     c72:	7814      	ldrb	r4, [r2, #0]
     c74:	4021      	ands	r1, r4
     c76:	2410      	movs	r4, #16
     c78:	4321      	orrs	r1, r4
     c7a:	e003      	b.n	c84 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c7c:	240f      	movs	r4, #15
     c7e:	7811      	ldrb	r1, [r2, #0]
     c80:	43a1      	bics	r1, r4
     c82:	4329      	orrs	r1, r5
     c84:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c86:	2101      	movs	r1, #1
     c88:	4a09      	ldr	r2, [pc, #36]	; (cb0 <adc_read+0x5c>)
     c8a:	18c3      	adds	r3, r0, r3
     c8c:	189b      	adds	r3, r3, r2
     c8e:	781a      	ldrb	r2, [r3, #0]
     c90:	430a      	orrs	r2, r1
     c92:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c94:	466b      	mov	r3, sp
     c96:	791a      	ldrb	r2, [r3, #4]
     c98:	231f      	movs	r3, #31
     c9a:	4013      	ands	r3, r2
     c9c:	22c0      	movs	r2, #192	; 0xc0
     c9e:	0152      	lsls	r2, r2, #5
     ca0:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     ca2:	4a04      	ldr	r2, [pc, #16]	; (cb4 <adc_read+0x60>)
     ca4:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <adc_read+0x64>)
     ca8:	4798      	blx	r3
     caa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     cac:	41004430 	.word	0x41004430
     cb0:	41004440 	.word	0x41004440
     cb4:	42004000 	.word	0x42004000
     cb8:	00000c39 	.word	0x00000c39

00000cbc <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     cbc:	0c01      	lsrs	r1, r0, #16
     cbe:	0c13      	lsrs	r3, r2, #16
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc2:	b2cd      	uxtb	r5, r1
     cc4:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc6:	2301      	movs	r3, #1
     cc8:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cca:	0e12      	lsrs	r2, r2, #24
     ccc:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cce:	0e00      	lsrs	r0, r0, #24
     cd0:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd2:	001a      	movs	r2, r3
     cd4:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd6:	0030      	movs	r0, r6
     cd8:	4e11      	ldr	r6, [pc, #68]	; (d20 <byteOut+0x64>)
     cda:	01c9      	lsls	r1, r1, #7
     cdc:	b087      	sub	sp, #28
     cde:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce0:	4e10      	ldr	r6, [pc, #64]	; (d24 <byteOut+0x68>)
     ce2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce6:	19ae      	adds	r6, r5, r6
     ce8:	7824      	ldrb	r4, [r4, #0]
     cea:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cec:	4e0c      	ldr	r6, [pc, #48]	; (d20 <byteOut+0x64>)
     cee:	46b4      	mov	ip, r6
     cf0:	44ac      	add	ip, r5
     cf2:	4666      	mov	r6, ip
     cf4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cf6:	b266      	sxtb	r6, r4
     cf8:	2e00      	cmp	r6, #0
     cfa:	da05      	bge.n	d08 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cfc:	4e09      	ldr	r6, [pc, #36]	; (d24 <byteOut+0x68>)
     cfe:	46b4      	mov	ip, r6
     d00:	448c      	add	ip, r1
     d02:	4666      	mov	r6, ip
     d04:	6032      	str	r2, [r6, #0]
     d06:	e000      	b.n	d0a <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d08:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d0a:	9e01      	ldr	r6, [sp, #4]
     d0c:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d0e:	0064      	lsls	r4, r4, #1
     d10:	b2db      	uxtb	r3, r3
     d12:	6030      	str	r0, [r6, #0]
     d14:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d16:	2b00      	cmp	r3, #0
     d18:	d1e8      	bne.n	cec <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d1a:	b007      	add	sp, #28
     d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	41004414 	.word	0x41004414
     d24:	41004418 	.word	0x41004418

00000d28 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d28:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d2a:	2501      	movs	r5, #1
     d2c:	b085      	sub	sp, #20
     d2e:	9103      	str	r1, [sp, #12]
     d30:	0011      	movs	r1, r2
     d32:	0c06      	lsrs	r6, r0, #16
     d34:	9301      	str	r3, [sp, #4]
     d36:	b2f3      	uxtb	r3, r6
     d38:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d3a:	0e09      	lsrs	r1, r1, #24
     d3c:	0c14      	lsrs	r4, r2, #16
     d3e:	9002      	str	r0, [sp, #8]
     d40:	9200      	str	r2, [sp, #0]
     d42:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d44:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d46:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d48:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d4c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4e:	4c0a      	ldr	r4, [pc, #40]	; (d78 <byteIn+0x50>)
     d50:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d52:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d54:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d56:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d58:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d5a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d5c:	0040      	lsls	r0, r0, #1
     d5e:	402c      	ands	r4, r5
     d60:	1e67      	subs	r7, r4, #1
     d62:	41bc      	sbcs	r4, r7
     d64:	3901      	subs	r1, #1
     d66:	4304      	orrs	r4, r0
     d68:	b2c9      	uxtb	r1, r1
     d6a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d6c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d6e:	2900      	cmp	r1, #0
     d70:	d1f2      	bne.n	d58 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d72:	b005      	add	sp, #20
     d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	41004400 	.word	0x41004400

00000d7c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d7e:	2380      	movs	r3, #128	; 0x80
     d80:	2780      	movs	r7, #128	; 0x80
     d82:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d84:	2500      	movs	r5, #0
     d86:	4c0a      	ldr	r4, [pc, #40]	; (db0 <beep+0x34>)
     d88:	035b      	lsls	r3, r3, #13
     d8a:	61e3      	str	r3, [r4, #28]
     d8c:	03bf      	lsls	r7, r7, #14
     d8e:	42b5      	cmp	r5, r6
     d90:	d006      	beq.n	da0 <beep+0x24>
     d92:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d94:	207a      	movs	r0, #122	; 0x7a
     d96:	4b07      	ldr	r3, [pc, #28]	; (db4 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d98:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d9a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d9c:	b2ad      	uxth	r5, r5
     d9e:	e7f6      	b.n	d8e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da0:	2380      	movs	r3, #128	; 0x80
     da2:	039b      	lsls	r3, r3, #14
     da4:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	035b      	lsls	r3, r3, #13
     daa:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	41004400 	.word	0x41004400
     db4:	00000f65 	.word	0x00000f65

00000db8 <startupJingle>:

void startupJingle(){
     db8:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dba:	2696      	movs	r6, #150	; 0x96
     dbc:	0076      	lsls	r6, r6, #1
     dbe:	4d0a      	ldr	r5, [pc, #40]	; (de8 <startupJingle+0x30>)
     dc0:	0030      	movs	r0, r6
     dc2:	47a8      	blx	r5
    delay_ms(80);
     dc4:	4c09      	ldr	r4, [pc, #36]	; (dec <startupJingle+0x34>)
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
    beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
    delay_ms(250);
     dce:	20fa      	movs	r0, #250	; 0xfa
     dd0:	47a0      	blx	r4
    beep(300);
     dd2:	0030      	movs	r0, r6
     dd4:	47a8      	blx	r5
    delay_ms(80);
     dd6:	2050      	movs	r0, #80	; 0x50
     dd8:	47a0      	blx	r4
    beep(300);
     dda:	0030      	movs	r0, r6
     ddc:	47a8      	blx	r5
    delay_ms(500);
     dde:	20fa      	movs	r0, #250	; 0xfa
     de0:	0040      	lsls	r0, r0, #1
     de2:	47a0      	blx	r4
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	00000d7d 	.word	0x00000d7d
     dec:	00000f95 	.word	0x00000f95

00000df0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     df4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df6:	4916      	ldr	r1, [pc, #88]	; (e50 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df8:	4a16      	ldr	r2, [pc, #88]	; (e54 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dfe:	6853      	ldr	r3, [r2, #4]
     e00:	4303      	orrs	r3, r0
     e02:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e04:	4b14      	ldr	r3, [pc, #80]	; (e58 <GclkInit+0x68>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e0a:	2a3f      	cmp	r2, #63	; 0x3f
     e0c:	d100      	bne.n	e10 <GclkInit+0x20>
        coarse = 0x1f;
     e0e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e12:	4813      	ldr	r0, [pc, #76]	; (e60 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	059b      	lsls	r3, r3, #22
     e18:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e1a:	4283      	cmp	r3, r0
     e1c:	d100      	bne.n	e20 <GclkInit+0x30>
        fine = 0x1ff;
     e1e:	4b11      	ldr	r3, [pc, #68]	; (e64 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e20:	4811      	ldr	r0, [pc, #68]	; (e68 <GclkInit+0x78>)
     e22:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e24:	2010      	movs	r0, #16
     e26:	68cc      	ldr	r4, [r1, #12]
     e28:	4204      	tst	r4, r0
     e2a:	d0fc      	beq.n	e26 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e2c:	0292      	lsls	r2, r2, #10
     e2e:	4313      	orrs	r3, r2
     e30:	4a07      	ldr	r2, [pc, #28]	; (e50 <GclkInit+0x60>)
     e32:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e34:	2310      	movs	r3, #16
     e36:	68ca      	ldr	r2, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e3c:	4a0b      	ldr	r2, [pc, #44]	; (e6c <GclkInit+0x7c>)
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <GclkInit+0x60>)
     e40:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e42:	2280      	movs	r2, #128	; 0x80
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <GclkInit+0x80>)
     e46:	0052      	lsls	r2, r2, #1
     e48:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e4a:	4a0a      	ldr	r2, [pc, #40]	; (e74 <GclkInit+0x84>)
     e4c:	605a      	str	r2, [r3, #4]
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	40000800 	.word	0x40000800
     e54:	41004000 	.word	0x41004000
     e58:	00806024 	.word	0x00806024
     e5c:	00806028 	.word	0x00806028
     e60:	000003ff 	.word	0x000003ff
     e64:	000001ff 	.word	0x000001ff
     e68:	00000522 	.word	0x00000522
     e6c:	000005a2 	.word	0x000005a2
     e70:	40000c00 	.word	0x40000c00
     e74:	00010700 	.word	0x00010700

00000e78 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e78:	4a1d      	ldr	r2, [pc, #116]	; (ef0 <RtcInit+0x78>)
     e7a:	4b1e      	ldr	r3, [pc, #120]	; (ef4 <RtcInit+0x7c>)
     e7c:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e7e:	2202      	movs	r2, #2
     e80:	68d9      	ldr	r1, [r3, #12]
     e82:	4211      	tst	r1, r2
     e84:	d0fc      	beq.n	e80 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e86:	2281      	movs	r2, #129	; 0x81
     e88:	4b1b      	ldr	r3, [pc, #108]	; (ef8 <RtcInit+0x80>)
     e8a:	0052      	lsls	r2, r2, #1
     e8c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e8e:	4a1b      	ldr	r2, [pc, #108]	; (efc <RtcInit+0x84>)
     e90:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e92:	785a      	ldrb	r2, [r3, #1]
     e94:	b252      	sxtb	r2, r2
     e96:	2a00      	cmp	r2, #0
     e98:	dbfb      	blt.n	e92 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e9a:	4a19      	ldr	r2, [pc, #100]	; (f00 <RtcInit+0x88>)
     e9c:	4b16      	ldr	r3, [pc, #88]	; (ef8 <RtcInit+0x80>)
     e9e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ea0:	2204      	movs	r2, #4
     ea2:	4b18      	ldr	r3, [pc, #96]	; (f04 <RtcInit+0x8c>)
     ea4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ea6:	7a9a      	ldrb	r2, [r3, #10]
     ea8:	4916      	ldr	r1, [pc, #88]	; (f04 <RtcInit+0x8c>)
     eaa:	09d2      	lsrs	r2, r2, #7
     eac:	d1fb      	bne.n	ea6 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     eae:	20a0      	movs	r0, #160	; 0xa0
     eb0:	880a      	ldrh	r2, [r1, #0]
     eb2:	00c0      	lsls	r0, r0, #3
     eb4:	4302      	orrs	r2, r0
     eb6:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eb8:	7a9a      	ldrb	r2, [r3, #10]
     eba:	09d2      	lsrs	r2, r2, #7
     ebc:	d1fc      	bne.n	eb8 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     ebe:	4912      	ldr	r1, [pc, #72]	; (f08 <RtcInit+0x90>)
     ec0:	4a10      	ldr	r2, [pc, #64]	; (f04 <RtcInit+0x8c>)
     ec2:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ec4:	7a99      	ldrb	r1, [r3, #10]
     ec6:	4a0f      	ldr	r2, [pc, #60]	; (f04 <RtcInit+0x8c>)
     ec8:	09c9      	lsrs	r1, r1, #7
     eca:	d1fb      	bne.n	ec4 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ecc:	8851      	ldrh	r1, [r2, #2]
     ece:	480f      	ldr	r0, [pc, #60]	; (f0c <RtcInit+0x94>)
     ed0:	4301      	orrs	r1, r0
     ed2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ed4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ed6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ed8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eda:	8811      	ldrh	r1, [r2, #0]
     edc:	4301      	orrs	r1, r0
     ede:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ee0:	7a9a      	ldrb	r2, [r3, #10]
     ee2:	09d2      	lsrs	r2, r2, #7
     ee4:	d1fc      	bne.n	ee0 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ee6:	4b0a      	ldr	r3, [pc, #40]	; (f10 <RtcInit+0x98>)
     ee8:	3208      	adds	r2, #8
     eea:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     eec:	4770      	bx	lr
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	0000060e 	.word	0x0000060e
     ef4:	40000800 	.word	0x40000800
     ef8:	40000c00 	.word	0x40000c00
     efc:	00230002 	.word	0x00230002
     f00:	00004204 	.word	0x00004204
     f04:	40001400 	.word	0x40001400
     f08:	000003e6 	.word	0x000003e6
     f0c:	00004010 	.word	0x00004010
     f10:	e000e100 	.word	0xe000e100

00000f14 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f14:	230f      	movs	r3, #15
     f16:	4018      	ands	r0, r3
     f18:	4b08      	ldr	r3, [pc, #32]	; (f3c <gclkEnable+0x28>)
     f1a:	0212      	lsls	r2, r2, #8
     f1c:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f1e:	23f8      	movs	r3, #248	; 0xf8
     f20:	0209      	lsls	r1, r1, #8
     f22:	015b      	lsls	r3, r3, #5
     f24:	4019      	ands	r1, r3
     f26:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f28:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f2a:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f2c:	4c04      	ldr	r4, [pc, #16]	; (f40 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f2e:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f30:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f32:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f34:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f36:	6060      	str	r0, [r4, #4]
}
     f38:	bd10      	pop	{r4, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00ffff00 	.word	0x00ffff00
     f40:	40000c00 	.word	0x40000c00

00000f44 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f44:	4b04      	ldr	r3, [pc, #16]	; (f58 <delayInit+0x14>)
     f46:	4a05      	ldr	r2, [pc, #20]	; (f5c <delayInit+0x18>)
     f48:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f4a:	2230      	movs	r2, #48	; 0x30
     f4c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f4e:	4b04      	ldr	r3, [pc, #16]	; (f60 <delayInit+0x1c>)
     f50:	3a2b      	subs	r2, #43	; 0x2b
     f52:	601a      	str	r2, [r3, #0]
}
     f54:	4770      	bx	lr
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	20000004 	.word	0x20000004
     f5c:	0000bb80 	.word	0x0000bb80
     f60:	e000e010 	.word	0xe000e010

00000f64 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f64:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f66:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f68:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f6a:	4b08      	ldr	r3, [pc, #32]	; (f8c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f6c:	4a08      	ldr	r2, [pc, #32]	; (f90 <delay_us+0x2c>)
     f6e:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f70:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f72:	3801      	subs	r0, #1
     f74:	d308      	bcc.n	f88 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f76:	2b00      	cmp	r3, #0
     f78:	d0fb      	beq.n	f72 <delay_us+0xe>
     f7a:	4e05      	ldr	r6, [pc, #20]	; (f90 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f7c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f7e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f80:	6835      	ldr	r5, [r6, #0]
     f82:	4225      	tst	r5, r4
     f84:	d0fc      	beq.n	f80 <delay_us+0x1c>
     f86:	e7f4      	b.n	f72 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f88:	bd70      	pop	{r4, r5, r6, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000004 	.word	0x20000004
     f90:	e000e010 	.word	0xe000e010

00000f94 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f94:	b570      	push	{r4, r5, r6, lr}
     f96:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f98:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f9a:	4b08      	ldr	r3, [pc, #32]	; (fbc <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f9c:	4a08      	ldr	r2, [pc, #32]	; (fc0 <delay_ms+0x2c>)
     f9e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fa2:	3801      	subs	r0, #1
     fa4:	d308      	bcc.n	fb8 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fa6:	2b00      	cmp	r3, #0
     fa8:	d0fb      	beq.n	fa2 <delay_ms+0xe>
     faa:	4e05      	ldr	r6, [pc, #20]	; (fc0 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fac:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fae:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb0:	6835      	ldr	r5, [r6, #0]
     fb2:	4225      	tst	r5, r4
     fb4:	d0fc      	beq.n	fb0 <delay_ms+0x1c>
     fb6:	e7f4      	b.n	fa2 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fb8:	bd70      	pop	{r4, r5, r6, pc}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	20000004 	.word	0x20000004
     fc0:	e000e010 	.word	0xe000e010

00000fc4 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     fc4:	21fa      	movs	r1, #250	; 0xfa
     fc6:	4a04      	ldr	r2, [pc, #16]	; (fd8 <RTC_Handler+0x14>)
     fc8:	0089      	lsls	r1, r1, #2
     fca:	6813      	ldr	r3, [r2, #0]
     fcc:	185b      	adds	r3, r3, r1
     fce:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     fd0:	22ff      	movs	r2, #255	; 0xff
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <RTC_Handler+0x18>)
     fd4:	721a      	strb	r2, [r3, #8]
}
     fd6:	4770      	bx	lr
     fd8:	200004cc 	.word	0x200004cc
     fdc:	40001400 	.word	0x40001400

00000fe0 <millis>:

uint32_t millis(void) {
     fe0:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     fe2:	f3ef 8110 	mrs	r1, PRIMASK
     fe6:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fe8:	4a08      	ldr	r2, [pc, #32]	; (100c <millis+0x2c>)
     fea:	4d09      	ldr	r5, [pc, #36]	; (1010 <millis+0x30>)
     fec:	8a10      	ldrh	r0, [r2, #16]
     fee:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ff0:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     ff2:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ff4:	09e4      	lsrs	r4, r4, #7
     ff6:	d004      	beq.n	1002 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     ff8:	8a13      	ldrh	r3, [r2, #16]
     ffa:	22fa      	movs	r2, #250	; 0xfa
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	0092      	lsls	r2, r2, #2
    1000:	1880      	adds	r0, r0, r2
    1002:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1004:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1008:	bd30      	pop	{r4, r5, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	40001400 	.word	0x40001400
    1010:	200004cc 	.word	0x200004cc

00001014 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1014:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1016:	4a0d      	ldr	r2, [pc, #52]	; (104c <TC4Init+0x38>)
    1018:	4b0d      	ldr	r3, [pc, #52]	; (1050 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    101a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    101c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    101e:	4a0d      	ldr	r2, [pc, #52]	; (1054 <TC4Init+0x40>)
    1020:	6a13      	ldr	r3, [r2, #32]
    1022:	430b      	orrs	r3, r1
    1024:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <TC4Init+0x44>)
    1028:	4a0c      	ldr	r2, [pc, #48]	; (105c <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    102a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    102c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    102e:	2241      	movs	r2, #65	; 0x41
    1030:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1032:	3a40      	subs	r2, #64	; 0x40
    1034:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1036:	32ff      	adds	r2, #255	; 0xff
    1038:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    103a:	881a      	ldrh	r2, [r3, #0]
    103c:	430a      	orrs	r2, r1
    103e:	801a      	strh	r2, [r3, #0]
    1040:	2280      	movs	r2, #128	; 0x80
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <TC4Init+0x4c>)
    1044:	0312      	lsls	r2, r2, #12
    1046:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1048:	4770      	bx	lr
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	0000421c 	.word	0x0000421c
    1050:	40000c00 	.word	0x40000c00
    1054:	40000400 	.word	0x40000400
    1058:	42003000 	.word	0x42003000
    105c:	00000904 	.word	0x00000904
    1060:	e000e100 	.word	0xe000e100

00001064 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1064:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1066:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1068:	4b02      	ldr	r3, [pc, #8]	; (1074 <TC4_Handler+0x10>)
    106a:	739a      	strb	r2, [r3, #14]
    pullSample();
    106c:	4b02      	ldr	r3, [pc, #8]	; (1078 <TC4_Handler+0x14>)
    106e:	4798      	blx	r3
}
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	42003000 	.word	0x42003000
    1078:	000021e5 	.word	0x000021e5

0000107c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    107c:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    107e:	4a0d      	ldr	r2, [pc, #52]	; (10b4 <TC5Init+0x38>)
    1080:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1082:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1084:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1086:	4a0d      	ldr	r2, [pc, #52]	; (10bc <TC5Init+0x40>)
    1088:	6a13      	ldr	r3, [r2, #32]
    108a:	430b      	orrs	r3, r1
    108c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    108e:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <TC5Init+0x44>)
    1090:	4a0c      	ldr	r2, [pc, #48]	; (10c4 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1092:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1094:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1096:	2220      	movs	r2, #32
    1098:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    109a:	3a1f      	subs	r2, #31
    109c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    109e:	32ff      	adds	r2, #255	; 0xff
    10a0:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10a2:	881a      	ldrh	r2, [r3, #0]
    10a4:	430a      	orrs	r2, r1
    10a6:	801a      	strh	r2, [r3, #0]
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	4b07      	ldr	r3, [pc, #28]	; (10c8 <TC5Init+0x4c>)
    10ac:	0352      	lsls	r2, r2, #13
    10ae:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10b0:	4770      	bx	lr
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	0000421c 	.word	0x0000421c
    10b8:	40000c00 	.word	0x40000c00
    10bc:	40000400 	.word	0x40000400
    10c0:	42003400 	.word	0x42003400
    10c4:	00000d04 	.word	0x00000d04
    10c8:	e000e100 	.word	0xe000e100

000010cc <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    10cc:	22ff      	movs	r2, #255	; 0xff
    10ce:	4b03      	ldr	r3, [pc, #12]	; (10dc <TC5_Handler+0x10>)
    10d0:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <TC5_Handler+0x14>)
    10d4:	3afe      	subs	r2, #254	; 0xfe
    10d6:	701a      	strb	r2, [r3, #0]
}
    10d8:	4770      	bx	lr
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	42003400 	.word	0x42003400
    10e0:	200004d1 	.word	0x200004d1

000010e4 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10e6:	27c0      	movs	r7, #192	; 0xc0
    10e8:	4d10      	ldr	r5, [pc, #64]	; (112c <dmaInit+0x48>)
    10ea:	003a      	movs	r2, r7
    10ec:	4e10      	ldr	r6, [pc, #64]	; (1130 <dmaInit+0x4c>)
    10ee:	0028      	movs	r0, r5
    10f0:	2100      	movs	r1, #0
    10f2:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    10f4:	4c0f      	ldr	r4, [pc, #60]	; (1134 <dmaInit+0x50>)
    10f6:	003a      	movs	r2, r7
    10f8:	2100      	movs	r1, #0
    10fa:	0020      	movs	r0, r4
    10fc:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    10fe:	2120      	movs	r1, #32
    1100:	4b0d      	ldr	r3, [pc, #52]	; (1138 <dmaInit+0x54>)
    1102:	695a      	ldr	r2, [r3, #20]
    1104:	430a      	orrs	r2, r1
    1106:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1108:	69da      	ldr	r2, [r3, #28]
    110a:	3910      	subs	r1, #16
    110c:	430a      	orrs	r2, r1
    110e:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1110:	4b0a      	ldr	r3, [pc, #40]	; (113c <dmaInit+0x58>)
    1112:	390e      	subs	r1, #14
    1114:	881a      	ldrh	r2, [r3, #0]
    1116:	438a      	bics	r2, r1
    1118:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    111a:	881a      	ldrh	r2, [r3, #0]
    111c:	3901      	subs	r1, #1
    111e:	430a      	orrs	r2, r1
    1120:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1122:	4a07      	ldr	r2, [pc, #28]	; (1140 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1124:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1126:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1128:	801a      	strh	r2, [r3, #0]
}
    112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    112c:	200005a0 	.word	0x200005a0
    1130:	000062a5 	.word	0x000062a5
    1134:	200004e0 	.word	0x200004e0
    1138:	40000400 	.word	0x40000400
    113c:	41004800 	.word	0x41004800
    1140:	00000f02 	.word	0x00000f02

00001144 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1146:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1148:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    114a:	2b00      	cmp	r3, #0
    114c:	d003      	beq.n	1156 <flight+0x12>
    114e:	2b02      	cmp	r3, #2
    1150:	d100      	bne.n	1154 <flight+0x10>
    1152:	e083      	b.n	125c <flight+0x118>
    1154:	e0c8      	b.n	12e8 <flight+0x1a4>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    1156:	0005      	movs	r5, r0
    1158:	35c0      	adds	r5, #192	; 0xc0
    115a:	6828      	ldr	r0, [r5, #0]
    115c:	6869      	ldr	r1, [r5, #4]
    115e:	4a63      	ldr	r2, [pc, #396]	; (12ec <flight+0x1a8>)
    1160:	4e63      	ldr	r6, [pc, #396]	; (12f0 <flight+0x1ac>)
    1162:	9501      	str	r5, [sp, #4]
    1164:	4b63      	ldr	r3, [pc, #396]	; (12f4 <flight+0x1b0>)
    1166:	47b0      	blx	r6
    1168:	0023      	movs	r3, r4
    116a:	33d4      	adds	r3, #212	; 0xd4
    116c:	0006      	movs	r6, r0
    116e:	6818      	ldr	r0, [r3, #0]
    1170:	4b61      	ldr	r3, [pc, #388]	; (12f8 <flight+0x1b4>)
    1172:	000f      	movs	r7, r1
    1174:	4798      	blx	r3
    1176:	4d5e      	ldr	r5, [pc, #376]	; (12f0 <flight+0x1ac>)
    1178:	4a5c      	ldr	r2, [pc, #368]	; (12ec <flight+0x1a8>)
    117a:	4b60      	ldr	r3, [pc, #384]	; (12fc <flight+0x1b8>)
    117c:	47a8      	blx	r5
    117e:	4d60      	ldr	r5, [pc, #384]	; (1300 <flight+0x1bc>)
    1180:	0002      	movs	r2, r0
    1182:	000b      	movs	r3, r1
    1184:	0030      	movs	r0, r6
    1186:	0039      	movs	r1, r7
    1188:	47a8      	blx	r5
    118a:	9b01      	ldr	r3, [sp, #4]
    118c:	6018      	str	r0, [r3, #0]
    118e:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    1190:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1192:	4b5c      	ldr	r3, [pc, #368]	; (1304 <flight+0x1c0>)
    1194:	4798      	blx	r3
    1196:	4d56      	ldr	r5, [pc, #344]	; (12f0 <flight+0x1ac>)
    1198:	2200      	movs	r2, #0
    119a:	4b5b      	ldr	r3, [pc, #364]	; (1308 <flight+0x1c4>)
    119c:	47a8      	blx	r5
    119e:	2200      	movs	r2, #0
    11a0:	0006      	movs	r6, r0
    11a2:	000f      	movs	r7, r1
    11a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    11a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    11a8:	4b57      	ldr	r3, [pc, #348]	; (1308 <flight+0x1c4>)
    11aa:	47a8      	blx	r5
    11ac:	4d54      	ldr	r5, [pc, #336]	; (1300 <flight+0x1bc>)
    11ae:	0002      	movs	r2, r0
    11b0:	000b      	movs	r3, r1
    11b2:	0030      	movs	r0, r6
    11b4:	0039      	movs	r1, r7
    11b6:	47a8      	blx	r5
    11b8:	4b54      	ldr	r3, [pc, #336]	; (130c <flight+0x1c8>)
    11ba:	4798      	blx	r3
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11bc:	4b51      	ldr	r3, [pc, #324]	; (1304 <flight+0x1c0>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    11be:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    11c2:	4798      	blx	r3
    11c4:	4d4a      	ldr	r5, [pc, #296]	; (12f0 <flight+0x1ac>)
    11c6:	4a49      	ldr	r2, [pc, #292]	; (12ec <flight+0x1a8>)
    11c8:	4b4a      	ldr	r3, [pc, #296]	; (12f4 <flight+0x1b0>)
    11ca:	47a8      	blx	r5
    11cc:	4b4d      	ldr	r3, [pc, #308]	; (1304 <flight+0x1c0>)
    11ce:	0006      	movs	r6, r0
    11d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    11d2:	000f      	movs	r7, r1
    11d4:	4798      	blx	r3
    11d6:	4a45      	ldr	r2, [pc, #276]	; (12ec <flight+0x1a8>)
    11d8:	4b48      	ldr	r3, [pc, #288]	; (12fc <flight+0x1b8>)
    11da:	47a8      	blx	r5
    11dc:	4d48      	ldr	r5, [pc, #288]	; (1300 <flight+0x1bc>)
    11de:	0002      	movs	r2, r0
    11e0:	000b      	movs	r3, r1
    11e2:	0030      	movs	r0, r6
    11e4:	0039      	movs	r1, r7
    11e6:	47a8      	blx	r5
    11e8:	4b48      	ldr	r3, [pc, #288]	; (130c <flight+0x1c8>)
    11ea:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11ec:	0027      	movs	r7, r4
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11ee:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11f0:	4e47      	ldr	r6, [pc, #284]	; (1310 <flight+0x1cc>)
    11f2:	47b0      	blx	r6
    11f4:	37b0      	adds	r7, #176	; 0xb0
    11f6:	683b      	ldr	r3, [r7, #0]
    11f8:	1ac0      	subs	r0, r0, r3
    11fa:	4b46      	ldr	r3, [pc, #280]	; (1314 <flight+0x1d0>)
    11fc:	4298      	cmp	r0, r3
    11fe:	d90c      	bls.n	121a <flight+0xd6>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1200:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1202:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1204:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1206:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1208:	6811      	ldr	r1, [r2, #0]
    120a:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    120c:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    120e:	0023      	movs	r3, r4
    1210:	33b8      	adds	r3, #184	; 0xb8
    1212:	6019      	str	r1, [r3, #0]
    1214:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1216:	47b0      	blx	r6
    1218:	6038      	str	r0, [r7, #0]
        }

        //logSensors(my_altimeter);


        if ((millis() - my_altimeter->StartupTick) > 10000) {
    121a:	47b0      	blx	r6
    121c:	23ca      	movs	r3, #202	; 0xca
    121e:	009b      	lsls	r3, r3, #2
    1220:	58e3      	ldr	r3, [r4, r3]
    1222:	1ac0      	subs	r0, r0, r3
    1224:	4b3c      	ldr	r3, [pc, #240]	; (1318 <flight+0x1d4>)
    1226:	4298      	cmp	r0, r3
    1228:	d90a      	bls.n	1240 <flight+0xfc>
            findNewFlightStart(my_altimeter);
    122a:	0020      	movs	r0, r4
    122c:	4b3b      	ldr	r3, [pc, #236]	; (131c <flight+0x1d8>)
    122e:	4798      	blx	r3
            logFlight(my_altimeter);
    1230:	0020      	movs	r0, r4
    1232:	4b3b      	ldr	r3, [pc, #236]	; (1320 <flight+0x1dc>)
    1234:	4798      	blx	r3
            startupJingle();
    1236:	4b3b      	ldr	r3, [pc, #236]	; (1324 <flight+0x1e0>)
    1238:	4798      	blx	r3
            my_altimeter->myFlightState = flightPad;
    123a:	2302      	movs	r3, #2
    123c:	7023      	strb	r3, [r4, #0]
            break;
    123e:	e053      	b.n	12e8 <flight+0x1a4>
        }

        attemptConnection(my_altimeter);
    1240:	0020      	movs	r0, r4
    1242:	4b39      	ldr	r3, [pc, #228]	; (1328 <flight+0x1e4>)
    1244:	4798      	blx	r3



        if (my_altimeter->myVoltages.batFloat < 3.5) {
    1246:	23c6      	movs	r3, #198	; 0xc6
    1248:	009b      	lsls	r3, r3, #2
    124a:	58e0      	ldr	r0, [r4, r3]
    124c:	4937      	ldr	r1, [pc, #220]	; (132c <flight+0x1e8>)
    124e:	4b38      	ldr	r3, [pc, #224]	; (1330 <flight+0x1ec>)
    1250:	4798      	blx	r3
    1252:	2800      	cmp	r0, #0
    1254:	d048      	beq.n	12e8 <flight+0x1a4>
            my_altimeter->myFlightState = flightIdle;
    1256:	2301      	movs	r3, #1
    1258:	7023      	strb	r3, [r4, #0]
    125a:	e02b      	b.n	12b4 <flight+0x170>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
    125c:	4b35      	ldr	r3, [pc, #212]	; (1334 <flight+0x1f0>)
    125e:	781a      	ldrb	r2, [r3, #0]
    1260:	2a00      	cmp	r2, #0
    1262:	d018      	beq.n	1296 <flight+0x152>
            writeLog = false;
    1264:	2500      	movs	r5, #0
    1266:	701d      	strb	r5, [r3, #0]



            logSensors(my_altimeter);
    1268:	4b33      	ldr	r3, [pc, #204]	; (1338 <flight+0x1f4>)
    126a:	4798      	blx	r3

            if (my_altimeter->myFlashMemory.pageReady) {
    126c:	4b33      	ldr	r3, [pc, #204]	; (133c <flight+0x1f8>)
    126e:	5ce2      	ldrb	r2, [r4, r3]
    1270:	42aa      	cmp	r2, r5
    1272:	d010      	beq.n	1296 <flight+0x152>
    1274:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    1276:	54e5      	strb	r5, [r4, r3]

                pinToggle(LedPin);

                //AT25SFHoldTillReady();
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    1278:	0021      	movs	r1, r4
    127a:	0025      	movs	r5, r4
    127c:	4b30      	ldr	r3, [pc, #192]	; (1340 <flight+0x1fc>)
    127e:	0352      	lsls	r2, r2, #13
    1280:	61da      	str	r2, [r3, #28]
    1282:	35fc      	adds	r5, #252	; 0xfc
    1284:	3111      	adds	r1, #17
    1286:	4b2f      	ldr	r3, [pc, #188]	; (1344 <flight+0x200>)
    1288:	31ff      	adds	r1, #255	; 0xff
    128a:	68e8      	ldr	r0, [r5, #12]
    128c:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    128e:	68eb      	ldr	r3, [r5, #12]
    1290:	3301      	adds	r3, #1
    1292:	33ff      	adds	r3, #255	; 0xff
    1294:	60eb      	str	r3, [r5, #12]


            }
        }

        if (my_altimeter->myVoltages.batFloat < 3.5) {
    1296:	23c6      	movs	r3, #198	; 0xc6
    1298:	009b      	lsls	r3, r3, #2
    129a:	58e0      	ldr	r0, [r4, r3]
    129c:	4923      	ldr	r1, [pc, #140]	; (132c <flight+0x1e8>)
    129e:	4b24      	ldr	r3, [pc, #144]	; (1330 <flight+0x1ec>)
    12a0:	4798      	blx	r3
    12a2:	2800      	cmp	r0, #0
    12a4:	d020      	beq.n	12e8 <flight+0x1a4>
            my_altimeter->myFlightState = flightIdle;
    12a6:	2301      	movs	r3, #1
    12a8:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    12aa:	4b27      	ldr	r3, [pc, #156]	; (1348 <flight+0x204>)
    12ac:	4798      	blx	r3
            writeFlightEndAddress(my_altimeter);
    12ae:	0020      	movs	r0, r4
    12b0:	4b26      	ldr	r3, [pc, #152]	; (134c <flight+0x208>)
    12b2:	4798      	blx	r3
            delay_ms(80);
    12b4:	4c26      	ldr	r4, [pc, #152]	; (1350 <flight+0x20c>)
    12b6:	2050      	movs	r0, #80	; 0x50
    12b8:	47a0      	blx	r4
            beep(300);
    12ba:	2096      	movs	r0, #150	; 0x96
    12bc:	4d25      	ldr	r5, [pc, #148]	; (1354 <flight+0x210>)
    12be:	0040      	lsls	r0, r0, #1
    12c0:	47a8      	blx	r5
            delay_ms(80);
    12c2:	2050      	movs	r0, #80	; 0x50
    12c4:	47a0      	blx	r4
            beep(300);
    12c6:	2096      	movs	r0, #150	; 0x96
    12c8:	0040      	lsls	r0, r0, #1
    12ca:	47a8      	blx	r5
            delay_ms(80);
    12cc:	2050      	movs	r0, #80	; 0x50
    12ce:	47a0      	blx	r4
            beep(300);
    12d0:	2096      	movs	r0, #150	; 0x96
    12d2:	0040      	lsls	r0, r0, #1
    12d4:	47a8      	blx	r5
            delay_ms(80);
    12d6:	2050      	movs	r0, #80	; 0x50
    12d8:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	4b18      	ldr	r3, [pc, #96]	; (1340 <flight+0x1fc>)
    12de:	0392      	lsls	r2, r2, #14
    12e0:	615a      	str	r2, [r3, #20]
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	0352      	lsls	r2, r2, #13
    12e6:	615a      	str	r2, [r3, #20]

        break;
    }


}
    12e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	9999999a 	.word	0x9999999a
    12f0:	00005201 	.word	0x00005201
    12f4:	3fe99999 	.word	0x3fe99999
    12f8:	00005f3d 	.word	0x00005f3d
    12fc:	3fc99999 	.word	0x3fc99999
    1300:	00004361 	.word	0x00004361
    1304:	00005ecd 	.word	0x00005ecd
    1308:	3fe00000 	.word	0x3fe00000
    130c:	00003bbd 	.word	0x00003bbd
    1310:	00000fe1 	.word	0x00000fe1
    1314:	00000bb8 	.word	0x00000bb8
    1318:	00002710 	.word	0x00002710
    131c:	00002125 	.word	0x00002125
    1320:	00001f39 	.word	0x00001f39
    1324:	00000db9 	.word	0x00000db9
    1328:	00002739 	.word	0x00002739
    132c:	40600000 	.word	0x40600000
    1330:	00003ae5 	.word	0x00003ae5
    1334:	200004d1 	.word	0x200004d1
    1338:	00001f99 	.word	0x00001f99
    133c:	00000311 	.word	0x00000311
    1340:	41004400 	.word	0x41004400
    1344:	000002cd 	.word	0x000002cd
    1348:	000001e5 	.word	0x000001e5
    134c:	000020f1 	.word	0x000020f1
    1350:	00000f95 	.word	0x00000f95
    1354:	00000d7d 	.word	0x00000d7d

00001358 <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1358:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    135a:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    135c:	4cdb      	ldr	r4, [pc, #876]	; (16cc <computeKalmanGains+0x374>)
    135e:	4adc      	ldr	r2, [pc, #880]	; (16d0 <computeKalmanGains+0x378>)
    1360:	4bdc      	ldr	r3, [pc, #880]	; (16d4 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1362:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1364:	60a2      	str	r2, [r4, #8]
    1366:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    1368:	62a2      	str	r2, [r4, #40]	; 0x28
    136a:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    136c:	4ada      	ldr	r2, [pc, #872]	; (16d8 <computeKalmanGains+0x380>)
    136e:	4bdb      	ldr	r3, [pc, #876]	; (16dc <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1370:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1372:	6122      	str	r2, [r4, #16]
    1374:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1376:	48d6      	ldr	r0, [pc, #856]	; (16d0 <computeKalmanGains+0x378>)
    1378:	49d9      	ldr	r1, [pc, #868]	; (16e0 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    137a:	2200      	movs	r2, #0
    137c:	ae4c      	add	r6, sp, #304	; 0x130
    137e:	ab40      	add	r3, sp, #256	; 0x100
    1380:	1977      	adds	r7, r6, r5
    1382:	18ee      	adds	r6, r5, r3
    1384:	4bd7      	ldr	r3, [pc, #860]	; (16e4 <computeKalmanGains+0x38c>)
    1386:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1388:	6038      	str	r0, [r7, #0]
    138a:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    138c:	6032      	str	r2, [r6, #0]
    138e:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1390:	60b8      	str	r0, [r7, #8]
    1392:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    1394:	60b2      	str	r2, [r6, #8]
    1396:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    1398:	2d30      	cmp	r5, #48	; 0x30
    139a:	d1ee      	bne.n	137a <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    139c:	6822      	ldr	r2, [r4, #0]
    139e:	6863      	ldr	r3, [r4, #4]
    13a0:	921a      	str	r2, [sp, #104]	; 0x68
    13a2:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    13a4:	69a2      	ldr	r2, [r4, #24]
    13a6:	69e3      	ldr	r3, [r4, #28]
    13a8:	921c      	str	r2, [sp, #112]	; 0x70
    13aa:	931d      	str	r3, [sp, #116]	; 0x74
    13ac:	6a22      	ldr	r2, [r4, #32]
    13ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13b0:	921e      	str	r2, [sp, #120]	; 0x78
    13b2:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    13b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    13b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13b8:	9220      	str	r2, [sp, #128]	; 0x80
    13ba:	9321      	str	r3, [sp, #132]	; 0x84
    13bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    13be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13c0:	9222      	str	r2, [sp, #136]	; 0x88
    13c2:	9323      	str	r3, [sp, #140]	; 0x8c
    13c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13c8:	9224      	str	r2, [sp, #144]	; 0x90
    13ca:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    13cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    13ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    13d0:	9238      	str	r2, [sp, #224]	; 0xe0
    13d2:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    13d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    13d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    13d8:	923a      	str	r2, [sp, #232]	; 0xe8
    13da:	933b      	str	r3, [sp, #236]	; 0xec
    13dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    13de:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    13e0:	933c      	str	r3, [sp, #240]	; 0xf0
    13e2:	943d      	str	r4, [sp, #244]	; 0xf4
    13e4:	2300      	movs	r3, #0
    13e6:	4cc0      	ldr	r4, [pc, #768]	; (16e8 <computeKalmanGains+0x390>)
    13e8:	9302      	str	r3, [sp, #8]
    13ea:	9403      	str	r4, [sp, #12]
    13ec:	2300      	movs	r3, #0
    13ee:	2400      	movs	r4, #0
    13f0:	9312      	str	r3, [sp, #72]	; 0x48
    13f2:	9413      	str	r4, [sp, #76]	; 0x4c
    13f4:	9310      	str	r3, [sp, #64]	; 0x40
    13f6:	9411      	str	r4, [sp, #68]	; 0x44
    13f8:	9304      	str	r3, [sp, #16]
    13fa:	9405      	str	r4, [sp, #20]
    13fc:	2300      	movs	r3, #0
    13fe:	4cba      	ldr	r4, [pc, #744]	; (16e8 <computeKalmanGains+0x390>)
    1400:	930e      	str	r3, [sp, #56]	; 0x38
    1402:	940f      	str	r4, [sp, #60]	; 0x3c
    1404:	2300      	movs	r3, #0
    1406:	2400      	movs	r4, #0
    1408:	9308      	str	r3, [sp, #32]
    140a:	9409      	str	r4, [sp, #36]	; 0x24
    140c:	930c      	str	r3, [sp, #48]	; 0x30
    140e:	940d      	str	r4, [sp, #52]	; 0x34
    1410:	930a      	str	r3, [sp, #40]	; 0x28
    1412:	940b      	str	r4, [sp, #44]	; 0x2c
    1414:	2480      	movs	r4, #128	; 0x80
    1416:	2300      	movs	r3, #0
    1418:	05e4      	lsls	r4, r4, #23
    141a:	9306      	str	r3, [sp, #24]
    141c:	9407      	str	r4, [sp, #28]
    141e:	2300      	movs	r3, #0
    1420:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1422:	4db2      	ldr	r5, [pc, #712]	; (16ec <computeKalmanGains+0x394>)
    1424:	9a06      	ldr	r2, [sp, #24]
    1426:	9b07      	ldr	r3, [sp, #28]
    1428:	981a      	ldr	r0, [sp, #104]	; 0x68
    142a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    142c:	47a8      	blx	r5
    142e:	4aa8      	ldr	r2, [pc, #672]	; (16d0 <computeKalmanGains+0x378>)
    1430:	0006      	movs	r6, r0
    1432:	000f      	movs	r7, r1
    1434:	9808      	ldr	r0, [sp, #32]
    1436:	9909      	ldr	r1, [sp, #36]	; 0x24
    1438:	4ba6      	ldr	r3, [pc, #664]	; (16d4 <computeKalmanGains+0x37c>)
    143a:	47a8      	blx	r5
    143c:	4cac      	ldr	r4, [pc, #688]	; (16f0 <computeKalmanGains+0x398>)
    143e:	0002      	movs	r2, r0
    1440:	000b      	movs	r3, r1
    1442:	0030      	movs	r0, r6
    1444:	0039      	movs	r1, r7
    1446:	47a0      	blx	r4
    1448:	4aa3      	ldr	r2, [pc, #652]	; (16d8 <computeKalmanGains+0x380>)
    144a:	0006      	movs	r6, r0
    144c:	000f      	movs	r7, r1
    144e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1450:	9911      	ldr	r1, [sp, #68]	; 0x44
    1452:	4ba2      	ldr	r3, [pc, #648]	; (16dc <computeKalmanGains+0x384>)
    1454:	47a8      	blx	r5
    1456:	0002      	movs	r2, r0
    1458:	000b      	movs	r3, r1
    145a:	0030      	movs	r0, r6
    145c:	0039      	movs	r1, r7
    145e:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1464:	9016      	str	r0, [sp, #88]	; 0x58
    1466:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1468:	981a      	ldr	r0, [sp, #104]	; 0x68
    146a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    146c:	47a8      	blx	r5
    146e:	4a98      	ldr	r2, [pc, #608]	; (16d0 <computeKalmanGains+0x378>)
    1470:	0006      	movs	r6, r0
    1472:	000f      	movs	r7, r1
    1474:	980e      	ldr	r0, [sp, #56]	; 0x38
    1476:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1478:	4b96      	ldr	r3, [pc, #600]	; (16d4 <computeKalmanGains+0x37c>)
    147a:	47a8      	blx	r5
    147c:	0002      	movs	r2, r0
    147e:	000b      	movs	r3, r1
    1480:	0030      	movs	r0, r6
    1482:	0039      	movs	r1, r7
    1484:	47a0      	blx	r4
    1486:	4a94      	ldr	r2, [pc, #592]	; (16d8 <computeKalmanGains+0x380>)
    1488:	0006      	movs	r6, r0
    148a:	000f      	movs	r7, r1
    148c:	9812      	ldr	r0, [sp, #72]	; 0x48
    148e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1490:	4b92      	ldr	r3, [pc, #584]	; (16dc <computeKalmanGains+0x384>)
    1492:	47a8      	blx	r5
    1494:	0002      	movs	r2, r0
    1496:	000b      	movs	r3, r1
    1498:	0030      	movs	r0, r6
    149a:	0039      	movs	r1, r7
    149c:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    149e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14a2:	9000      	str	r0, [sp, #0]
    14a4:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14a6:	981a      	ldr	r0, [sp, #104]	; 0x68
    14a8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14aa:	47a8      	blx	r5
    14ac:	4a88      	ldr	r2, [pc, #544]	; (16d0 <computeKalmanGains+0x378>)
    14ae:	0006      	movs	r6, r0
    14b0:	000f      	movs	r7, r1
    14b2:	9804      	ldr	r0, [sp, #16]
    14b4:	9905      	ldr	r1, [sp, #20]
    14b6:	4b87      	ldr	r3, [pc, #540]	; (16d4 <computeKalmanGains+0x37c>)
    14b8:	47a8      	blx	r5
    14ba:	0002      	movs	r2, r0
    14bc:	000b      	movs	r3, r1
    14be:	0030      	movs	r0, r6
    14c0:	0039      	movs	r1, r7
    14c2:	47a0      	blx	r4
    14c4:	4a84      	ldr	r2, [pc, #528]	; (16d8 <computeKalmanGains+0x380>)
    14c6:	0006      	movs	r6, r0
    14c8:	000f      	movs	r7, r1
    14ca:	9802      	ldr	r0, [sp, #8]
    14cc:	9903      	ldr	r1, [sp, #12]
    14ce:	4b83      	ldr	r3, [pc, #524]	; (16dc <computeKalmanGains+0x384>)
    14d0:	47a8      	blx	r5
    14d2:	0002      	movs	r2, r0
    14d4:	000b      	movs	r3, r1
    14d6:	0030      	movs	r0, r6
    14d8:	0039      	movs	r1, r7
    14da:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14dc:	9a06      	ldr	r2, [sp, #24]
    14de:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14e0:	9014      	str	r0, [sp, #80]	; 0x50
    14e2:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14e4:	981c      	ldr	r0, [sp, #112]	; 0x70
    14e6:	991d      	ldr	r1, [sp, #116]	; 0x74
    14e8:	47a8      	blx	r5
    14ea:	9a08      	ldr	r2, [sp, #32]
    14ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14ee:	0006      	movs	r6, r0
    14f0:	000f      	movs	r7, r1
    14f2:	981e      	ldr	r0, [sp, #120]	; 0x78
    14f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    14f6:	47a8      	blx	r5
    14f8:	0002      	movs	r2, r0
    14fa:	000b      	movs	r3, r1
    14fc:	0030      	movs	r0, r6
    14fe:	0039      	movs	r1, r7
    1500:	47a0      	blx	r4
    1502:	4a73      	ldr	r2, [pc, #460]	; (16d0 <computeKalmanGains+0x378>)
    1504:	0006      	movs	r6, r0
    1506:	000f      	movs	r7, r1
    1508:	9810      	ldr	r0, [sp, #64]	; 0x40
    150a:	9911      	ldr	r1, [sp, #68]	; 0x44
    150c:	4b71      	ldr	r3, [pc, #452]	; (16d4 <computeKalmanGains+0x37c>)
    150e:	47a8      	blx	r5
    1510:	0002      	movs	r2, r0
    1512:	000b      	movs	r3, r1
    1514:	0030      	movs	r0, r6
    1516:	0039      	movs	r1, r7
    1518:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    151a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    151c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    151e:	9018      	str	r0, [sp, #96]	; 0x60
    1520:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1522:	981c      	ldr	r0, [sp, #112]	; 0x70
    1524:	991d      	ldr	r1, [sp, #116]	; 0x74
    1526:	47a8      	blx	r5
    1528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    152a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    152c:	0006      	movs	r6, r0
    152e:	000f      	movs	r7, r1
    1530:	981e      	ldr	r0, [sp, #120]	; 0x78
    1532:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1534:	47a8      	blx	r5
    1536:	0002      	movs	r2, r0
    1538:	000b      	movs	r3, r1
    153a:	0030      	movs	r0, r6
    153c:	0039      	movs	r1, r7
    153e:	47a0      	blx	r4
    1540:	4a63      	ldr	r2, [pc, #396]	; (16d0 <computeKalmanGains+0x378>)
    1542:	0006      	movs	r6, r0
    1544:	000f      	movs	r7, r1
    1546:	9812      	ldr	r0, [sp, #72]	; 0x48
    1548:	9913      	ldr	r1, [sp, #76]	; 0x4c
    154a:	4b62      	ldr	r3, [pc, #392]	; (16d4 <computeKalmanGains+0x37c>)
    154c:	47a8      	blx	r5
    154e:	0002      	movs	r2, r0
    1550:	000b      	movs	r3, r1
    1552:	0030      	movs	r0, r6
    1554:	0039      	movs	r1, r7
    1556:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    155a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    155c:	9026      	str	r0, [sp, #152]	; 0x98
    155e:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1560:	981c      	ldr	r0, [sp, #112]	; 0x70
    1562:	991d      	ldr	r1, [sp, #116]	; 0x74
    1564:	47a8      	blx	r5
    1566:	9a04      	ldr	r2, [sp, #16]
    1568:	9b05      	ldr	r3, [sp, #20]
    156a:	0006      	movs	r6, r0
    156c:	000f      	movs	r7, r1
    156e:	981e      	ldr	r0, [sp, #120]	; 0x78
    1570:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1572:	47a8      	blx	r5
    1574:	0002      	movs	r2, r0
    1576:	000b      	movs	r3, r1
    1578:	0030      	movs	r0, r6
    157a:	0039      	movs	r1, r7
    157c:	47a0      	blx	r4
    157e:	4a54      	ldr	r2, [pc, #336]	; (16d0 <computeKalmanGains+0x378>)
    1580:	0006      	movs	r6, r0
    1582:	000f      	movs	r7, r1
    1584:	9802      	ldr	r0, [sp, #8]
    1586:	9903      	ldr	r1, [sp, #12]
    1588:	4b52      	ldr	r3, [pc, #328]	; (16d4 <computeKalmanGains+0x37c>)
    158a:	47a8      	blx	r5
    158c:	0002      	movs	r2, r0
    158e:	000b      	movs	r3, r1
    1590:	0030      	movs	r0, r6
    1592:	0039      	movs	r1, r7
    1594:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1596:	9a06      	ldr	r2, [sp, #24]
    1598:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    159a:	9028      	str	r0, [sp, #160]	; 0xa0
    159c:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    159e:	9820      	ldr	r0, [sp, #128]	; 0x80
    15a0:	9921      	ldr	r1, [sp, #132]	; 0x84
    15a2:	47a8      	blx	r5
    15a4:	9a08      	ldr	r2, [sp, #32]
    15a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15a8:	0006      	movs	r6, r0
    15aa:	000f      	movs	r7, r1
    15ac:	9822      	ldr	r0, [sp, #136]	; 0x88
    15ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15b0:	47a8      	blx	r5
    15b2:	0002      	movs	r2, r0
    15b4:	000b      	movs	r3, r1
    15b6:	0030      	movs	r0, r6
    15b8:	0039      	movs	r1, r7
    15ba:	47a0      	blx	r4
    15bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    15be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    15c0:	0006      	movs	r6, r0
    15c2:	000f      	movs	r7, r1
    15c4:	9824      	ldr	r0, [sp, #144]	; 0x90
    15c6:	9925      	ldr	r1, [sp, #148]	; 0x94
    15c8:	47a8      	blx	r5
    15ca:	0002      	movs	r2, r0
    15cc:	000b      	movs	r3, r1
    15ce:	0030      	movs	r0, r6
    15d0:	0039      	movs	r1, r7
    15d2:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15d8:	9010      	str	r0, [sp, #64]	; 0x40
    15da:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15dc:	9820      	ldr	r0, [sp, #128]	; 0x80
    15de:	9921      	ldr	r1, [sp, #132]	; 0x84
    15e0:	47a8      	blx	r5
    15e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    15e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    15e6:	0006      	movs	r6, r0
    15e8:	000f      	movs	r7, r1
    15ea:	9822      	ldr	r0, [sp, #136]	; 0x88
    15ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15ee:	47a8      	blx	r5
    15f0:	0002      	movs	r2, r0
    15f2:	000b      	movs	r3, r1
    15f4:	0030      	movs	r0, r6
    15f6:	0039      	movs	r1, r7
    15f8:	47a0      	blx	r4
    15fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    15fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    15fe:	0006      	movs	r6, r0
    1600:	000f      	movs	r7, r1
    1602:	9824      	ldr	r0, [sp, #144]	; 0x90
    1604:	9925      	ldr	r1, [sp, #148]	; 0x94
    1606:	47a8      	blx	r5
    1608:	0002      	movs	r2, r0
    160a:	000b      	movs	r3, r1
    160c:	0030      	movs	r0, r6
    160e:	0039      	movs	r1, r7
    1610:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1616:	9006      	str	r0, [sp, #24]
    1618:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    161a:	9820      	ldr	r0, [sp, #128]	; 0x80
    161c:	9921      	ldr	r1, [sp, #132]	; 0x84
    161e:	47a8      	blx	r5
    1620:	9a04      	ldr	r2, [sp, #16]
    1622:	9b05      	ldr	r3, [sp, #20]
    1624:	0006      	movs	r6, r0
    1626:	000f      	movs	r7, r1
    1628:	9822      	ldr	r0, [sp, #136]	; 0x88
    162a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    162c:	47a8      	blx	r5
    162e:	0002      	movs	r2, r0
    1630:	000b      	movs	r3, r1
    1632:	0030      	movs	r0, r6
    1634:	0039      	movs	r1, r7
    1636:	47a0      	blx	r4
    1638:	9a02      	ldr	r2, [sp, #8]
    163a:	9b03      	ldr	r3, [sp, #12]
    163c:	0006      	movs	r6, r0
    163e:	000f      	movs	r7, r1
    1640:	9824      	ldr	r0, [sp, #144]	; 0x90
    1642:	9925      	ldr	r1, [sp, #148]	; 0x94
    1644:	47a8      	blx	r5
    1646:	0002      	movs	r2, r0
    1648:	000b      	movs	r3, r1
    164a:	0030      	movs	r0, r6
    164c:	0039      	movs	r1, r7
    164e:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1650:	4a1f      	ldr	r2, [pc, #124]	; (16d0 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1652:	9002      	str	r0, [sp, #8]
    1654:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1656:	9800      	ldr	r0, [sp, #0]
    1658:	9901      	ldr	r1, [sp, #4]
    165a:	4b1e      	ldr	r3, [pc, #120]	; (16d4 <computeKalmanGains+0x37c>)
    165c:	47a8      	blx	r5
    165e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1662:	47a0      	blx	r4
    1664:	4a1c      	ldr	r2, [pc, #112]	; (16d8 <computeKalmanGains+0x380>)
    1666:	0006      	movs	r6, r0
    1668:	000f      	movs	r7, r1
    166a:	9814      	ldr	r0, [sp, #80]	; 0x50
    166c:	9915      	ldr	r1, [sp, #84]	; 0x54
    166e:	4b1b      	ldr	r3, [pc, #108]	; (16dc <computeKalmanGains+0x384>)
    1670:	47a8      	blx	r5
    1672:	0002      	movs	r2, r0
    1674:	000b      	movs	r3, r1
    1676:	0030      	movs	r0, r6
    1678:	0039      	movs	r1, r7
    167a:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    167c:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    167e:	9008      	str	r0, [sp, #32]
    1680:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1682:	9816      	ldr	r0, [sp, #88]	; 0x58
    1684:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1686:	2300      	movs	r3, #0
    1688:	47a8      	blx	r5
    168a:	0006      	movs	r6, r0
    168c:	000f      	movs	r7, r1
    168e:	0002      	movs	r2, r0
    1690:	000b      	movs	r3, r1
    1692:	9800      	ldr	r0, [sp, #0]
    1694:	9901      	ldr	r1, [sp, #4]
    1696:	47a0      	blx	r4
    1698:	4a0d      	ldr	r2, [pc, #52]	; (16d0 <computeKalmanGains+0x378>)
    169a:	9004      	str	r0, [sp, #16]
    169c:	9105      	str	r1, [sp, #20]
    169e:	9814      	ldr	r0, [sp, #80]	; 0x50
    16a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    16a2:	4b0c      	ldr	r3, [pc, #48]	; (16d4 <computeKalmanGains+0x37c>)
    16a4:	47a8      	blx	r5
    16a6:	0002      	movs	r2, r0
    16a8:	000b      	movs	r3, r1
    16aa:	9804      	ldr	r0, [sp, #16]
    16ac:	9905      	ldr	r1, [sp, #20]
    16ae:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16b0:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16b2:	9030      	str	r0, [sp, #192]	; 0xc0
    16b4:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16b6:	9800      	ldr	r0, [sp, #0]
    16b8:	9901      	ldr	r1, [sp, #4]
    16ba:	2300      	movs	r3, #0
    16bc:	47a8      	blx	r5
    16be:	0032      	movs	r2, r6
    16c0:	003b      	movs	r3, r7
    16c2:	47a0      	blx	r4
    16c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    16c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    16c8:	47a0      	blx	r4
    16ca:	e013      	b.n	16f4 <computeKalmanGains+0x39c>
    16cc:	20000010 	.word	0x20000010
    16d0:	d2f1a9fc 	.word	0xd2f1a9fc
    16d4:	3f80624d 	.word	0x3f80624d
    16d8:	a0b5ed8d 	.word	0xa0b5ed8d
    16dc:	3f00c6f7 	.word	0x3f00c6f7
    16e0:	3f50624d 	.word	0x3f50624d
    16e4:	3ff00000 	.word	0x3ff00000
    16e8:	40220000 	.word	0x40220000
    16ec:	00005201 	.word	0x00005201
    16f0:	00004361 	.word	0x00004361
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16f4:	4ada      	ldr	r2, [pc, #872]	; (1a60 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16f6:	9114      	str	r1, [sp, #80]	; 0x50
    16f8:	9004      	str	r0, [sp, #16]
    16fa:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16fc:	4bd9      	ldr	r3, [pc, #868]	; (1a64 <computeKalmanGains+0x70c>)
    16fe:	9826      	ldr	r0, [sp, #152]	; 0x98
    1700:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1702:	47a8      	blx	r5
    1704:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1706:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1708:	47a0      	blx	r4
    170a:	4ad7      	ldr	r2, [pc, #860]	; (1a68 <computeKalmanGains+0x710>)
    170c:	0006      	movs	r6, r0
    170e:	000f      	movs	r7, r1
    1710:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1712:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1714:	4bd5      	ldr	r3, [pc, #852]	; (1a6c <computeKalmanGains+0x714>)
    1716:	47a8      	blx	r5
    1718:	0002      	movs	r2, r0
    171a:	000b      	movs	r3, r1
    171c:	0030      	movs	r0, r6
    171e:	0039      	movs	r1, r7
    1720:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1722:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1724:	902a      	str	r0, [sp, #168]	; 0xa8
    1726:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1728:	9818      	ldr	r0, [sp, #96]	; 0x60
    172a:	9919      	ldr	r1, [sp, #100]	; 0x64
    172c:	2300      	movs	r3, #0
    172e:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1730:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1732:	9032      	str	r0, [sp, #200]	; 0xc8
    1734:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1736:	9826      	ldr	r0, [sp, #152]	; 0x98
    1738:	9927      	ldr	r1, [sp, #156]	; 0x9c
    173a:	2300      	movs	r3, #0
    173c:	47a8      	blx	r5
    173e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1740:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1742:	47a0      	blx	r4
    1744:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1746:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1748:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    174a:	4ac5      	ldr	r2, [pc, #788]	; (1a60 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    174c:	902c      	str	r0, [sp, #176]	; 0xb0
    174e:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1750:	9806      	ldr	r0, [sp, #24]
    1752:	9907      	ldr	r1, [sp, #28]
    1754:	4bc3      	ldr	r3, [pc, #780]	; (1a64 <computeKalmanGains+0x70c>)
    1756:	47a8      	blx	r5
    1758:	9a10      	ldr	r2, [sp, #64]	; 0x40
    175a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    175c:	47a0      	blx	r4
    175e:	4ac2      	ldr	r2, [pc, #776]	; (1a68 <computeKalmanGains+0x710>)
    1760:	0006      	movs	r6, r0
    1762:	000f      	movs	r7, r1
    1764:	9802      	ldr	r0, [sp, #8]
    1766:	9903      	ldr	r1, [sp, #12]
    1768:	4bc0      	ldr	r3, [pc, #768]	; (1a6c <computeKalmanGains+0x714>)
    176a:	47a8      	blx	r5
    176c:	0002      	movs	r2, r0
    176e:	000b      	movs	r3, r1
    1770:	0030      	movs	r0, r6
    1772:	0039      	movs	r1, r7
    1774:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1776:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1778:	9000      	str	r0, [sp, #0]
    177a:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    177c:	9810      	ldr	r0, [sp, #64]	; 0x40
    177e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1780:	2300      	movs	r3, #0
    1782:	47a8      	blx	r5
    1784:	0006      	movs	r6, r0
    1786:	000f      	movs	r7, r1
    1788:	0002      	movs	r2, r0
    178a:	000b      	movs	r3, r1
    178c:	9806      	ldr	r0, [sp, #24]
    178e:	9907      	ldr	r1, [sp, #28]
    1790:	47a0      	blx	r4
    1792:	4ab3      	ldr	r2, [pc, #716]	; (1a60 <computeKalmanGains+0x708>)
    1794:	900a      	str	r0, [sp, #40]	; 0x28
    1796:	910b      	str	r1, [sp, #44]	; 0x2c
    1798:	9802      	ldr	r0, [sp, #8]
    179a:	9903      	ldr	r1, [sp, #12]
    179c:	4bb1      	ldr	r3, [pc, #708]	; (1a64 <computeKalmanGains+0x70c>)
    179e:	47a8      	blx	r5
    17a0:	0002      	movs	r2, r0
    17a2:	000b      	movs	r3, r1
    17a4:	980a      	ldr	r0, [sp, #40]	; 0x28
    17a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17a8:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17aa:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17ac:	9012      	str	r0, [sp, #72]	; 0x48
    17ae:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17b0:	9806      	ldr	r0, [sp, #24]
    17b2:	9907      	ldr	r1, [sp, #28]
    17b4:	2300      	movs	r3, #0
    17b6:	47a8      	blx	r5
    17b8:	0032      	movs	r2, r6
    17ba:	003b      	movs	r3, r7
    17bc:	47a0      	blx	r4
    17be:	9a02      	ldr	r2, [sp, #8]
    17c0:	9b03      	ldr	r3, [sp, #12]
    17c2:	47a0      	blx	r4
    17c4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    17c6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    17c8:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17ca:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    17cc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ce:	9002      	str	r0, [sp, #8]
    17d0:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17d2:	9808      	ldr	r0, [sp, #32]
    17d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    17d6:	47a0      	blx	r4
    17d8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    17da:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    17dc:	900a      	str	r0, [sp, #40]	; 0x28
    17de:	910b      	str	r1, [sp, #44]	; 0x2c
    17e0:	9802      	ldr	r0, [sp, #8]
    17e2:	9903      	ldr	r1, [sp, #12]
    17e4:	47a0      	blx	r4
    17e6:	9a00      	ldr	r2, [sp, #0]
    17e8:	9b01      	ldr	r3, [sp, #4]
    17ea:	900c      	str	r0, [sp, #48]	; 0x30
    17ec:	910d      	str	r1, [sp, #52]	; 0x34
    17ee:	9804      	ldr	r0, [sp, #16]
    17f0:	9916      	ldr	r1, [sp, #88]	; 0x58
    17f2:	47a8      	blx	r5
    17f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    17f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    17f8:	900e      	str	r0, [sp, #56]	; 0x38
    17fa:	910f      	str	r1, [sp, #60]	; 0x3c
    17fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    17fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1800:	47a8      	blx	r5
    1802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1806:	4e9a      	ldr	r6, [pc, #616]	; (1a70 <computeKalmanGains+0x718>)
    1808:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    180a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    180c:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    180e:	9006      	str	r0, [sp, #24]
    1810:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1812:	9808      	ldr	r0, [sp, #32]
    1814:	9909      	ldr	r1, [sp, #36]	; 0x24
    1816:	47a8      	blx	r5
    1818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    181a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    181c:	47b0      	blx	r6
    181e:	9a06      	ldr	r2, [sp, #24]
    1820:	9b07      	ldr	r3, [sp, #28]
    1822:	4e94      	ldr	r6, [pc, #592]	; (1a74 <computeKalmanGains+0x71c>)
    1824:	47b0      	blx	r6
    1826:	0002      	movs	r2, r0
    1828:	000b      	movs	r3, r1
    182a:	9240      	str	r2, [sp, #256]	; 0x100
    182c:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    182e:	2280      	movs	r2, #128	; 0x80
    1830:	0612      	lsls	r2, r2, #24
    1832:	4694      	mov	ip, r2
    1834:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1836:	9a04      	ldr	r2, [sp, #16]
    1838:	4463      	add	r3, ip
    183a:	932f      	str	r3, [sp, #188]	; 0xbc
    183c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    183e:	9034      	str	r0, [sp, #208]	; 0xd0
    1840:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1842:	9808      	ldr	r0, [sp, #32]
    1844:	9909      	ldr	r1, [sp, #36]	; 0x24
    1846:	47a8      	blx	r5
    1848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    184a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    184c:	0006      	movs	r6, r0
    184e:	000f      	movs	r7, r1
    1850:	9804      	ldr	r0, [sp, #16]
    1852:	9916      	ldr	r1, [sp, #88]	; 0x58
    1854:	47a8      	blx	r5
    1856:	0002      	movs	r2, r0
    1858:	000b      	movs	r3, r1
    185a:	0030      	movs	r0, r6
    185c:	0039      	movs	r1, r7
    185e:	47a0      	blx	r4
    1860:	9a06      	ldr	r2, [sp, #24]
    1862:	9b07      	ldr	r3, [sp, #28]
    1864:	4e83      	ldr	r6, [pc, #524]	; (1a74 <computeKalmanGains+0x71c>)
    1866:	47b0      	blx	r6
    1868:	0002      	movs	r2, r0
    186a:	000b      	movs	r3, r1
    186c:	900e      	str	r0, [sp, #56]	; 0x38
    186e:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1870:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1872:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1874:	9242      	str	r2, [sp, #264]	; 0x108
    1876:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    187a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    187c:	47a8      	blx	r5
    187e:	9a00      	ldr	r2, [sp, #0]
    1880:	9b01      	ldr	r3, [sp, #4]
    1882:	0006      	movs	r6, r0
    1884:	000f      	movs	r7, r1
    1886:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1888:	992d      	ldr	r1, [sp, #180]	; 0xb4
    188a:	47a8      	blx	r5
    188c:	0002      	movs	r2, r0
    188e:	000b      	movs	r3, r1
    1890:	0030      	movs	r0, r6
    1892:	0039      	movs	r1, r7
    1894:	4e76      	ldr	r6, [pc, #472]	; (1a70 <computeKalmanGains+0x718>)
    1896:	47b0      	blx	r6
    1898:	9a06      	ldr	r2, [sp, #24]
    189a:	9b07      	ldr	r3, [sp, #28]
    189c:	4e75      	ldr	r6, [pc, #468]	; (1a74 <computeKalmanGains+0x71c>)
    189e:	47b0      	blx	r6
    18a0:	0002      	movs	r2, r0
    18a2:	000b      	movs	r3, r1
    18a4:	913e      	str	r1, [sp, #248]	; 0xf8
    18a6:	9244      	str	r2, [sp, #272]	; 0x110
    18a8:	9345      	str	r3, [sp, #276]	; 0x114
    18aa:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18ac:	9a04      	ldr	r2, [sp, #16]
    18ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18b0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18b2:	992b      	ldr	r1, [sp, #172]	; 0xac
    18b4:	47a8      	blx	r5
    18b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18ba:	0006      	movs	r6, r0
    18bc:	000f      	movs	r7, r1
    18be:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18c0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18c2:	47a8      	blx	r5
    18c4:	0002      	movs	r2, r0
    18c6:	000b      	movs	r3, r1
    18c8:	0030      	movs	r0, r6
    18ca:	0039      	movs	r1, r7
    18cc:	47a0      	blx	r4
    18ce:	9a06      	ldr	r2, [sp, #24]
    18d0:	9b07      	ldr	r3, [sp, #28]
    18d2:	4e68      	ldr	r6, [pc, #416]	; (1a74 <computeKalmanGains+0x71c>)
    18d4:	47b0      	blx	r6
    18d6:	0002      	movs	r2, r0
    18d8:	000b      	movs	r3, r1
    18da:	9010      	str	r0, [sp, #64]	; 0x40
    18dc:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    18de:	9800      	ldr	r0, [sp, #0]
    18e0:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18e2:	9246      	str	r2, [sp, #280]	; 0x118
    18e4:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    18e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18ea:	47a8      	blx	r5
    18ec:	9a02      	ldr	r2, [sp, #8]
    18ee:	9b03      	ldr	r3, [sp, #12]
    18f0:	0006      	movs	r6, r0
    18f2:	000f      	movs	r7, r1
    18f4:	9800      	ldr	r0, [sp, #0]
    18f6:	9901      	ldr	r1, [sp, #4]
    18f8:	47a8      	blx	r5
    18fa:	0002      	movs	r2, r0
    18fc:	000b      	movs	r3, r1
    18fe:	0030      	movs	r0, r6
    1900:	0039      	movs	r1, r7
    1902:	4e5b      	ldr	r6, [pc, #364]	; (1a70 <computeKalmanGains+0x718>)
    1904:	47b0      	blx	r6
    1906:	9a06      	ldr	r2, [sp, #24]
    1908:	9b07      	ldr	r3, [sp, #28]
    190a:	4e5a      	ldr	r6, [pc, #360]	; (1a74 <computeKalmanGains+0x71c>)
    190c:	47b0      	blx	r6
    190e:	0002      	movs	r2, r0
    1910:	000b      	movs	r3, r1
    1912:	9014      	str	r0, [sp, #80]	; 0x50
    1914:	9115      	str	r1, [sp, #84]	; 0x54
    1916:	9248      	str	r2, [sp, #288]	; 0x120
    1918:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    191a:	9800      	ldr	r0, [sp, #0]
    191c:	9901      	ldr	r1, [sp, #4]
    191e:	9a04      	ldr	r2, [sp, #16]
    1920:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1922:	47a8      	blx	r5
    1924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1928:	0006      	movs	r6, r0
    192a:	000f      	movs	r7, r1
    192c:	9802      	ldr	r0, [sp, #8]
    192e:	9903      	ldr	r1, [sp, #12]
    1930:	47a8      	blx	r5
    1932:	0002      	movs	r2, r0
    1934:	000b      	movs	r3, r1
    1936:	0030      	movs	r0, r6
    1938:	0039      	movs	r1, r7
    193a:	47a0      	blx	r4
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	9b07      	ldr	r3, [sp, #28]
    1940:	4e4c      	ldr	r6, [pc, #304]	; (1a74 <computeKalmanGains+0x71c>)
    1942:	47b0      	blx	r6
    1944:	0002      	movs	r2, r0
    1946:	000b      	movs	r3, r1
    1948:	9036      	str	r0, [sp, #216]	; 0xd8
    194a:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    194c:	4e48      	ldr	r6, [pc, #288]	; (1a70 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    194e:	924a      	str	r2, [sp, #296]	; 0x128
    1950:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1952:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1954:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1956:	2000      	movs	r0, #0
    1958:	4947      	ldr	r1, [pc, #284]	; (1a78 <computeKalmanGains+0x720>)
    195a:	47b0      	blx	r6
    195c:	0002      	movs	r2, r0
    195e:	000b      	movs	r3, r1
    1960:	900c      	str	r0, [sp, #48]	; 0x30
    1962:	910d      	str	r1, [sp, #52]	; 0x34
    1964:	9808      	ldr	r0, [sp, #32]
    1966:	9909      	ldr	r1, [sp, #36]	; 0x24
    1968:	47a8      	blx	r5
    196a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    196c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    196e:	0006      	movs	r6, r0
    1970:	000f      	movs	r7, r1
    1972:	9800      	ldr	r0, [sp, #0]
    1974:	9901      	ldr	r1, [sp, #4]
    1976:	47a8      	blx	r5
    1978:	0002      	movs	r2, r0
    197a:	000b      	movs	r3, r1
    197c:	0030      	movs	r0, r6
    197e:	0039      	movs	r1, r7
    1980:	4e3b      	ldr	r6, [pc, #236]	; (1a70 <computeKalmanGains+0x718>)
    1982:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1986:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1988:	9006      	str	r0, [sp, #24]
    198a:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    198c:	9830      	ldr	r0, [sp, #192]	; 0xc0
    198e:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1990:	47a8      	blx	r5
    1992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1996:	0006      	movs	r6, r0
    1998:	000f      	movs	r7, r1
    199a:	9812      	ldr	r0, [sp, #72]	; 0x48
    199c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    199e:	47a8      	blx	r5
    19a0:	0002      	movs	r2, r0
    19a2:	000b      	movs	r3, r1
    19a4:	0030      	movs	r0, r6
    19a6:	0039      	movs	r1, r7
    19a8:	4e31      	ldr	r6, [pc, #196]	; (1a70 <computeKalmanGains+0x718>)
    19aa:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19b0:	900a      	str	r0, [sp, #40]	; 0x28
    19b2:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19b4:	9804      	ldr	r0, [sp, #16]
    19b6:	9916      	ldr	r1, [sp, #88]	; 0x58
    19b8:	47a8      	blx	r5
    19ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19be:	0006      	movs	r6, r0
    19c0:	000f      	movs	r7, r1
    19c2:	9802      	ldr	r0, [sp, #8]
    19c4:	9903      	ldr	r1, [sp, #12]
    19c6:	47a8      	blx	r5
    19c8:	0002      	movs	r2, r0
    19ca:	000b      	movs	r3, r1
    19cc:	0030      	movs	r0, r6
    19ce:	0039      	movs	r1, r7
    19d0:	4e27      	ldr	r6, [pc, #156]	; (1a70 <computeKalmanGains+0x718>)
    19d2:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19d4:	2280      	movs	r2, #128	; 0x80
    19d6:	0612      	lsls	r2, r2, #24
    19d8:	4694      	mov	ip, r2
    19da:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    19dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    19de:	4463      	add	r3, ip
    19e0:	932f      	str	r3, [sp, #188]	; 0xbc
    19e2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19e4:	900c      	str	r0, [sp, #48]	; 0x30
    19e6:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19e8:	9808      	ldr	r0, [sp, #32]
    19ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    19ec:	47a8      	blx	r5
    19ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    19f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    19f2:	47a0      	blx	r4
    19f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    19f8:	0006      	movs	r6, r0
    19fa:	000f      	movs	r7, r1
    19fc:	9800      	ldr	r0, [sp, #0]
    19fe:	9901      	ldr	r1, [sp, #4]
    1a00:	47a8      	blx	r5
    1a02:	0002      	movs	r2, r0
    1a04:	000b      	movs	r3, r1
    1a06:	0030      	movs	r0, r6
    1a08:	0039      	movs	r1, r7
    1a0a:	4e19      	ldr	r6, [pc, #100]	; (1a70 <computeKalmanGains+0x718>)
    1a0c:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a0e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a10:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a12:	9008      	str	r0, [sp, #32]
    1a14:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a16:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a18:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a1a:	47a0      	blx	r4
    1a1c:	4a10      	ldr	r2, [pc, #64]	; (1a60 <computeKalmanGains+0x708>)
    1a1e:	0006      	movs	r6, r0
    1a20:	000f      	movs	r7, r1
    1a22:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a24:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a26:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <computeKalmanGains+0x70c>)
    1a28:	47a8      	blx	r5
    1a2a:	0002      	movs	r2, r0
    1a2c:	000b      	movs	r3, r1
    1a2e:	0030      	movs	r0, r6
    1a30:	0039      	movs	r1, r7
    1a32:	47a0      	blx	r4
    1a34:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a36:	0006      	movs	r6, r0
    1a38:	000f      	movs	r7, r1
    1a3a:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a3c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a3e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a40:	47a8      	blx	r5
    1a42:	0002      	movs	r2, r0
    1a44:	000b      	movs	r3, r1
    1a46:	0030      	movs	r0, r6
    1a48:	0039      	movs	r1, r7
    1a4a:	47a0      	blx	r4
    1a4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a50:	0006      	movs	r6, r0
    1a52:	000f      	movs	r7, r1
    1a54:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a56:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a58:	47a8      	blx	r5
    1a5a:	0002      	movs	r2, r0
    1a5c:	000b      	movs	r3, r1
    1a5e:	e00d      	b.n	1a7c <computeKalmanGains+0x724>
    1a60:	d2f1a9fc 	.word	0xd2f1a9fc
    1a64:	3f80624d 	.word	0x3f80624d
    1a68:	a0b5ed8d 	.word	0xa0b5ed8d
    1a6c:	3f00c6f7 	.word	0x3f00c6f7
    1a70:	000056f5 	.word	0x000056f5
    1a74:	000049b9 	.word	0x000049b9
    1a78:	3ff00000 	.word	0x3ff00000
    1a7c:	0030      	movs	r0, r6
    1a7e:	0039      	movs	r1, r7
    1a80:	4e58      	ldr	r6, [pc, #352]	; (1be4 <computeKalmanGains+0x88c>)
    1a82:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a84:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a86:	900e      	str	r0, [sp, #56]	; 0x38
    1a88:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a8c:	9804      	ldr	r0, [sp, #16]
    1a8e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a90:	47a8      	blx	r5
    1a92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1a94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1a96:	47a0      	blx	r4
    1a98:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a9c:	0006      	movs	r6, r0
    1a9e:	000f      	movs	r7, r1
    1aa0:	9802      	ldr	r0, [sp, #8]
    1aa2:	9903      	ldr	r1, [sp, #12]
    1aa4:	47a8      	blx	r5
    1aa6:	4c4f      	ldr	r4, [pc, #316]	; (1be4 <computeKalmanGains+0x88c>)
    1aa8:	0002      	movs	r2, r0
    1aaa:	000b      	movs	r3, r1
    1aac:	0030      	movs	r0, r6
    1aae:	0039      	movs	r1, r7
    1ab0:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ab2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ab4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ab6:	9004      	str	r0, [sp, #16]
    1ab8:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1aba:	2000      	movs	r0, #0
    1abc:	494a      	ldr	r1, [pc, #296]	; (1be8 <computeKalmanGains+0x890>)
    1abe:	47a0      	blx	r4
    1ac0:	0002      	movs	r2, r0
    1ac2:	000b      	movs	r3, r1
    1ac4:	9016      	str	r0, [sp, #88]	; 0x58
    1ac6:	9117      	str	r1, [sp, #92]	; 0x5c
    1ac8:	9800      	ldr	r0, [sp, #0]
    1aca:	9901      	ldr	r1, [sp, #4]
    1acc:	47a8      	blx	r5
    1ace:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ad2:	0006      	movs	r6, r0
    1ad4:	000f      	movs	r7, r1
    1ad6:	9800      	ldr	r0, [sp, #0]
    1ad8:	9901      	ldr	r1, [sp, #4]
    1ada:	47a8      	blx	r5
    1adc:	0002      	movs	r2, r0
    1ade:	000b      	movs	r3, r1
    1ae0:	0030      	movs	r0, r6
    1ae2:	0039      	movs	r1, r7
    1ae4:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1ae6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1aea:	9010      	str	r0, [sp, #64]	; 0x40
    1aec:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1aee:	9812      	ldr	r0, [sp, #72]	; 0x48
    1af0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1af2:	47a8      	blx	r5
    1af4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1af8:	0006      	movs	r6, r0
    1afa:	000f      	movs	r7, r1
    1afc:	9812      	ldr	r0, [sp, #72]	; 0x48
    1afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b00:	47a8      	blx	r5
    1b02:	0002      	movs	r2, r0
    1b04:	000b      	movs	r3, r1
    1b06:	0030      	movs	r0, r6
    1b08:	0039      	movs	r1, r7
    1b0a:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b10:	9012      	str	r0, [sp, #72]	; 0x48
    1b12:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b14:	9802      	ldr	r0, [sp, #8]
    1b16:	9903      	ldr	r1, [sp, #12]
    1b18:	47a8      	blx	r5
    1b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b1e:	0006      	movs	r6, r0
    1b20:	000f      	movs	r7, r1
    1b22:	9802      	ldr	r0, [sp, #8]
    1b24:	9903      	ldr	r1, [sp, #12]
    1b26:	47a8      	blx	r5
    1b28:	000b      	movs	r3, r1
    1b2a:	0002      	movs	r2, r0
    1b2c:	0039      	movs	r1, r7
    1b2e:	0030      	movs	r0, r6
    1b30:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b32:	2400      	movs	r4, #0
    1b34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b36:	9002      	str	r0, [sp, #8]
    1b38:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b3a:	3301      	adds	r3, #1
    1b3c:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b3e:	ab40      	add	r3, sp, #256	; 0x100
    1b40:	9326      	str	r3, [sp, #152]	; 0x98
    1b42:	4b28      	ldr	r3, [pc, #160]	; (1be4 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b44:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b46:	9328      	str	r3, [sp, #160]	; 0xa0
    1b48:	ab4c      	add	r3, sp, #304	; 0x130
    1b4a:	191b      	adds	r3, r3, r4
    1b4c:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b4e:	2300      	movs	r3, #0
    1b50:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b52:	9b00      	ldr	r3, [sp, #0]
    1b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b56:	18e3      	adds	r3, r4, r3
    1b58:	18d3      	adds	r3, r2, r3
    1b5a:	681a      	ldr	r2, [r3, #0]
    1b5c:	685b      	ldr	r3, [r3, #4]
    1b5e:	9218      	str	r2, [sp, #96]	; 0x60
    1b60:	9319      	str	r3, [sp, #100]	; 0x64
    1b62:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b64:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b66:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1b68:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1b6a:	681e      	ldr	r6, [r3, #0]
    1b6c:	685f      	ldr	r7, [r3, #4]
    1b6e:	0032      	movs	r2, r6
    1b70:	003b      	movs	r3, r7
    1b72:	47a8      	blx	r5
    1b74:	0032      	movs	r2, r6
    1b76:	003b      	movs	r3, r7
    1b78:	4d1c      	ldr	r5, [pc, #112]	; (1bec <computeKalmanGains+0x894>)
    1b7a:	47a8      	blx	r5
    1b7c:	4b1c      	ldr	r3, [pc, #112]	; (1bf0 <computeKalmanGains+0x898>)
    1b7e:	4a1d      	ldr	r2, [pc, #116]	; (1bf4 <computeKalmanGains+0x89c>)
    1b80:	4e1d      	ldr	r6, [pc, #116]	; (1bf8 <computeKalmanGains+0x8a0>)
    1b82:	47b0      	blx	r6
                    notdone++;
    1b84:	1e43      	subs	r3, r0, #1
    1b86:	4198      	sbcs	r0, r3
    1b88:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1b8a:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1b8c:	181b      	adds	r3, r3, r0
    1b8e:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1b90:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b94:	c10c      	stmia	r1!, {r2, r3}
    1b96:	9b00      	ldr	r3, [sp, #0]
    1b98:	9116      	str	r1, [sp, #88]	; 0x58
    1b9a:	3308      	adds	r3, #8
    1b9c:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1b9e:	2b10      	cmp	r3, #16
    1ba0:	d1d7      	bne.n	1b52 <computeKalmanGains+0x7fa>
    1ba2:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1ba4:	2c30      	cmp	r4, #48	; 0x30
    1ba6:	d1cf      	bne.n	1b48 <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1baa:	2b00      	cmp	r3, #0
    1bac:	d001      	beq.n	1bb2 <computeKalmanGains+0x85a>
    1bae:	f7ff fc38 	bl	1422 <computeKalmanGains+0xca>
    1bb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bb4:	2b63      	cmp	r3, #99	; 0x63
    1bb6:	dc01      	bgt.n	1bbc <computeKalmanGains+0x864>
    1bb8:	f7ff fc33 	bl	1422 <computeKalmanGains+0xca>
    1bbc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1bbe:	aa42      	add	r2, sp, #264	; 0x108
    1bc0:	0019      	movs	r1, r3
    1bc2:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1bc4:	0010      	movs	r0, r2
    1bc6:	3808      	subs	r0, #8
    1bc8:	6804      	ldr	r4, [r0, #0]
    1bca:	6845      	ldr	r5, [r0, #4]
    1bcc:	601c      	str	r4, [r3, #0]
    1bce:	605d      	str	r5, [r3, #4]
    1bd0:	6814      	ldr	r4, [r2, #0]
    1bd2:	6855      	ldr	r5, [r2, #4]
    1bd4:	609c      	str	r4, [r3, #8]
    1bd6:	60dd      	str	r5, [r3, #12]
    1bd8:	3310      	adds	r3, #16
    1bda:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1bdc:	4299      	cmp	r1, r3
    1bde:	d1f1      	bne.n	1bc4 <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1be0:	b059      	add	sp, #356	; 0x164
    1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be4:	000056f5 	.word	0x000056f5
    1be8:	3ff00000 	.word	0x3ff00000
    1bec:	000049b9 	.word	0x000049b9
    1bf0:	3ee4f8b5 	.word	0x3ee4f8b5
    1bf4:	88e368f1 	.word	0x88e368f1
    1bf8:	00003a99 	.word	0x00003a99

00001bfc <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1bfc:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c00:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c02:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c04:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c06:	6818      	ldr	r0, [r3, #0]
    1c08:	4b96      	ldr	r3, [pc, #600]	; (1e64 <computeKalmanStates+0x268>)
    1c0a:	4798      	blx	r3
    1c0c:	003b      	movs	r3, r7
    1c0e:	33b8      	adds	r3, #184	; 0xb8
    1c10:	681a      	ldr	r2, [r3, #0]
    1c12:	685b      	ldr	r3, [r3, #4]
    1c14:	4c94      	ldr	r4, [pc, #592]	; (1e68 <computeKalmanStates+0x26c>)
    1c16:	47a0      	blx	r4
    1c18:	4a94      	ldr	r2, [pc, #592]	; (1e6c <computeKalmanStates+0x270>)
    1c1a:	4b95      	ldr	r3, [pc, #596]	; (1e70 <computeKalmanStates+0x274>)
    1c1c:	4d95      	ldr	r5, [pc, #596]	; (1e74 <computeKalmanStates+0x278>)
    1c1e:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c24:	003d      	movs	r5, r7
    1c26:	3580      	adds	r5, #128	; 0x80

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c28:	9200      	str	r2, [sp, #0]
    1c2a:	9301      	str	r3, [sp, #4]
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c2c:	9002      	str	r0, [sp, #8]
    1c2e:	9103      	str	r1, [sp, #12]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c30:	6828      	ldr	r0, [r5, #0]
    1c32:	6869      	ldr	r1, [r5, #4]
    1c34:	2200      	movs	r2, #0
    1c36:	2300      	movs	r3, #0
    1c38:	4e8f      	ldr	r6, [pc, #572]	; (1e78 <computeKalmanStates+0x27c>)
    1c3a:	47b0      	blx	r6
    1c3c:	2800      	cmp	r0, #0
    1c3e:	d003      	beq.n	1c48 <computeKalmanStates+0x4c>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1c40:	9a00      	ldr	r2, [sp, #0]
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	602a      	str	r2, [r5, #0]
    1c46:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c48:	9800      	ldr	r0, [sp, #0]
    1c4a:	9901      	ldr	r1, [sp, #4]
    1c4c:	003b      	movs	r3, r7
    1c4e:	3398      	adds	r3, #152	; 0x98
    1c50:	930a      	str	r3, [sp, #40]	; 0x28
    1c52:	681a      	ldr	r2, [r3, #0]
    1c54:	685b      	ldr	r3, [r3, #4]
    1c56:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c58:	003b      	movs	r3, r7
    1c5a:	33a8      	adds	r3, #168	; 0xa8
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c5c:	9006      	str	r0, [sp, #24]
    1c5e:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c60:	9802      	ldr	r0, [sp, #8]
    1c62:	9903      	ldr	r1, [sp, #12]
    1c64:	930c      	str	r3, [sp, #48]	; 0x30
    1c66:	681a      	ldr	r2, [r3, #0]
    1c68:	685b      	ldr	r3, [r3, #4]
    1c6a:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c6c:	003b      	movs	r3, r7
    1c6e:	3380      	adds	r3, #128	; 0x80
    1c70:	930d      	str	r3, [sp, #52]	; 0x34
    1c72:	685c      	ldr	r4, [r3, #4]
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	9300      	str	r3, [sp, #0]
    1c78:	9401      	str	r4, [sp, #4]
    1c7a:	003b      	movs	r3, r7
    1c7c:	3388      	adds	r3, #136	; 0x88
    1c7e:	930e      	str	r3, [sp, #56]	; 0x38
    1c80:	685c      	ldr	r4, [r3, #4]
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	9302      	str	r3, [sp, #8]
    1c86:	9403      	str	r4, [sp, #12]
    1c88:	003b      	movs	r3, r7
    1c8a:	3390      	adds	r3, #144	; 0x90
    1c8c:	930f      	str	r3, [sp, #60]	; 0x3c
    1c8e:	685c      	ldr	r4, [r3, #4]
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	9304      	str	r3, [sp, #16]
    1c94:	9405      	str	r4, [sp, #20]
    1c96:	4b79      	ldr	r3, [pc, #484]	; (1e7c <computeKalmanStates+0x280>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c98:	9008      	str	r0, [sp, #32]
    1c9a:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c9c:	681a      	ldr	r2, [r3, #0]
    1c9e:	685b      	ldr	r3, [r3, #4]
    1ca0:	9800      	ldr	r0, [sp, #0]
    1ca2:	9901      	ldr	r1, [sp, #4]
    1ca4:	4c73      	ldr	r4, [pc, #460]	; (1e74 <computeKalmanStates+0x278>)
    1ca6:	47a0      	blx	r4
    1ca8:	4b74      	ldr	r3, [pc, #464]	; (1e7c <computeKalmanStates+0x280>)
    1caa:	4e72      	ldr	r6, [pc, #456]	; (1e74 <computeKalmanStates+0x278>)
    1cac:	689a      	ldr	r2, [r3, #8]
    1cae:	68db      	ldr	r3, [r3, #12]
    1cb0:	0004      	movs	r4, r0
    1cb2:	000d      	movs	r5, r1
    1cb4:	9802      	ldr	r0, [sp, #8]
    1cb6:	9903      	ldr	r1, [sp, #12]
    1cb8:	47b0      	blx	r6
    1cba:	0002      	movs	r2, r0
    1cbc:	000b      	movs	r3, r1
    1cbe:	0020      	movs	r0, r4
    1cc0:	0029      	movs	r1, r5
    1cc2:	4c6f      	ldr	r4, [pc, #444]	; (1e80 <computeKalmanStates+0x284>)
    1cc4:	47a0      	blx	r4
    1cc6:	4b6d      	ldr	r3, [pc, #436]	; (1e7c <computeKalmanStates+0x280>)
    1cc8:	0004      	movs	r4, r0
    1cca:	691a      	ldr	r2, [r3, #16]
    1ccc:	695b      	ldr	r3, [r3, #20]
    1cce:	000d      	movs	r5, r1
    1cd0:	9804      	ldr	r0, [sp, #16]
    1cd2:	9905      	ldr	r1, [sp, #20]
    1cd4:	47b0      	blx	r6
    1cd6:	0002      	movs	r2, r0
    1cd8:	000b      	movs	r3, r1
    1cda:	0020      	movs	r0, r4
    1cdc:	0029      	movs	r1, r5
    1cde:	4c68      	ldr	r4, [pc, #416]	; (1e80 <computeKalmanStates+0x284>)
    1ce0:	47a0      	blx	r4
    1ce2:	0003      	movs	r3, r0
    1ce4:	000c      	movs	r4, r1
    1ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ce8:	9010      	str	r0, [sp, #64]	; 0x40
    1cea:	9111      	str	r1, [sp, #68]	; 0x44
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1cf0:	4b62      	ldr	r3, [pc, #392]	; (1e7c <computeKalmanStates+0x280>)
    1cf2:	699a      	ldr	r2, [r3, #24]
    1cf4:	69db      	ldr	r3, [r3, #28]
    1cf6:	9800      	ldr	r0, [sp, #0]
    1cf8:	9901      	ldr	r1, [sp, #4]
    1cfa:	47b0      	blx	r6
    1cfc:	4b5f      	ldr	r3, [pc, #380]	; (1e7c <computeKalmanStates+0x280>)
    1cfe:	0004      	movs	r4, r0
    1d00:	6a1a      	ldr	r2, [r3, #32]
    1d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d04:	000d      	movs	r5, r1
    1d06:	9802      	ldr	r0, [sp, #8]
    1d08:	9903      	ldr	r1, [sp, #12]
    1d0a:	47b0      	blx	r6
    1d0c:	0002      	movs	r2, r0
    1d0e:	000b      	movs	r3, r1
    1d10:	0020      	movs	r0, r4
    1d12:	0029      	movs	r1, r5
    1d14:	4c5a      	ldr	r4, [pc, #360]	; (1e80 <computeKalmanStates+0x284>)
    1d16:	47a0      	blx	r4
    1d18:	4b58      	ldr	r3, [pc, #352]	; (1e7c <computeKalmanStates+0x280>)
    1d1a:	0004      	movs	r4, r0
    1d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d20:	000d      	movs	r5, r1
    1d22:	9804      	ldr	r0, [sp, #16]
    1d24:	9905      	ldr	r1, [sp, #20]
    1d26:	47b0      	blx	r6
    1d28:	0002      	movs	r2, r0
    1d2a:	000b      	movs	r3, r1
    1d2c:	0020      	movs	r0, r4
    1d2e:	0029      	movs	r1, r5
    1d30:	4c53      	ldr	r4, [pc, #332]	; (1e80 <computeKalmanStates+0x284>)
    1d32:	47a0      	blx	r4
    1d34:	003b      	movs	r3, r7
    1d36:	900a      	str	r0, [sp, #40]	; 0x28
    1d38:	910b      	str	r1, [sp, #44]	; 0x2c
    1d3a:	000a      	movs	r2, r1
    1d3c:	0001      	movs	r1, r0
    1d3e:	33a0      	adds	r3, #160	; 0xa0
    1d40:	6019      	str	r1, [r3, #0]
    1d42:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d44:	9800      	ldr	r0, [sp, #0]
    1d46:	9901      	ldr	r1, [sp, #4]
    1d48:	4b4c      	ldr	r3, [pc, #304]	; (1e7c <computeKalmanStates+0x280>)
    1d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d4e:	47b0      	blx	r6
    1d50:	4b4a      	ldr	r3, [pc, #296]	; (1e7c <computeKalmanStates+0x280>)
    1d52:	0004      	movs	r4, r0
    1d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d58:	000d      	movs	r5, r1
    1d5a:	9802      	ldr	r0, [sp, #8]
    1d5c:	9903      	ldr	r1, [sp, #12]
    1d5e:	47b0      	blx	r6
    1d60:	0002      	movs	r2, r0
    1d62:	000b      	movs	r3, r1
    1d64:	0020      	movs	r0, r4
    1d66:	0029      	movs	r1, r5
    1d68:	4c45      	ldr	r4, [pc, #276]	; (1e80 <computeKalmanStates+0x284>)
    1d6a:	47a0      	blx	r4
    1d6c:	4b43      	ldr	r3, [pc, #268]	; (1e7c <computeKalmanStates+0x280>)
    1d6e:	0004      	movs	r4, r0
    1d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d74:	000d      	movs	r5, r1
    1d76:	9804      	ldr	r0, [sp, #16]
    1d78:	9905      	ldr	r1, [sp, #20]
    1d7a:	47b0      	blx	r6
    1d7c:	0002      	movs	r2, r0
    1d7e:	000b      	movs	r3, r1
    1d80:	0020      	movs	r0, r4
    1d82:	0029      	movs	r1, r5
    1d84:	4c3e      	ldr	r4, [pc, #248]	; (1e80 <computeKalmanStates+0x284>)
    1d86:	47a0      	blx	r4
    1d88:	0003      	movs	r3, r0
    1d8a:	000c      	movs	r4, r1
    1d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d8e:	9000      	str	r0, [sp, #0]
    1d90:	9101      	str	r1, [sp, #4]
    1d92:	6013      	str	r3, [r2, #0]
    1d94:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d9a:	9806      	ldr	r0, [sp, #24]
    1d9c:	9907      	ldr	r1, [sp, #28]
    1d9e:	47b0      	blx	r6
    1da0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1da4:	4c36      	ldr	r4, [pc, #216]	; (1e80 <computeKalmanStates+0x284>)
    1da6:	47a0      	blx	r4
    1da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1dac:	0004      	movs	r4, r0
    1dae:	000d      	movs	r5, r1
    1db0:	9808      	ldr	r0, [sp, #32]
    1db2:	9909      	ldr	r1, [sp, #36]	; 0x24
    1db4:	47b0      	blx	r6
    1db6:	0002      	movs	r2, r0
    1db8:	000b      	movs	r3, r1
    1dba:	0020      	movs	r0, r4
    1dbc:	0029      	movs	r1, r5
    1dbe:	4c30      	ldr	r4, [pc, #192]	; (1e80 <computeKalmanStates+0x284>)
    1dc0:	47a0      	blx	r4
    1dc2:	0003      	movs	r3, r0
    1dc4:	000c      	movs	r4, r1
    1dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1dc8:	9002      	str	r0, [sp, #8]
    1dca:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1dcc:	9806      	ldr	r0, [sp, #24]
    1dce:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1dd0:	6013      	str	r3, [r2, #0]
    1dd2:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1dd8:	47b0      	blx	r6
    1dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dde:	4c28      	ldr	r4, [pc, #160]	; (1e80 <computeKalmanStates+0x284>)
    1de0:	47a0      	blx	r4
    1de2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1de6:	0004      	movs	r4, r0
    1de8:	000d      	movs	r5, r1
    1dea:	9808      	ldr	r0, [sp, #32]
    1dec:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dee:	47b0      	blx	r6
    1df0:	0002      	movs	r2, r0
    1df2:	000b      	movs	r3, r1
    1df4:	0020      	movs	r0, r4
    1df6:	0029      	movs	r1, r5
    1df8:	4c21      	ldr	r4, [pc, #132]	; (1e80 <computeKalmanStates+0x284>)
    1dfa:	47a0      	blx	r4
    1dfc:	0005      	movs	r5, r0
    1dfe:	000e      	movs	r6, r1
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e00:	9806      	ldr	r0, [sp, #24]
    1e02:	9907      	ldr	r1, [sp, #28]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e06:	4c1b      	ldr	r4, [pc, #108]	; (1e74 <computeKalmanStates+0x278>)

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e08:	601d      	str	r5, [r3, #0]
    1e0a:	605e      	str	r6, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e10:	47a0      	blx	r4
    1e12:	9a00      	ldr	r2, [sp, #0]
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	4c1a      	ldr	r4, [pc, #104]	; (1e80 <computeKalmanStates+0x284>)
    1e18:	47a0      	blx	r4
    1e1a:	9000      	str	r0, [sp, #0]
    1e1c:	9101      	str	r1, [sp, #4]
    1e1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    1e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1e22:	9808      	ldr	r0, [sp, #32]
    1e24:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e26:	4c13      	ldr	r4, [pc, #76]	; (1e74 <computeKalmanStates+0x278>)
    1e28:	47a0      	blx	r4
    1e2a:	4c15      	ldr	r4, [pc, #84]	; (1e80 <computeKalmanStates+0x284>)
    1e2c:	0002      	movs	r2, r0
    1e2e:	000b      	movs	r3, r1
    1e30:	9800      	ldr	r0, [sp, #0]
    1e32:	9901      	ldr	r1, [sp, #4]
    1e34:	47a0      	blx	r4
    1e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    1e38:	4c12      	ldr	r4, [pc, #72]	; (1e84 <computeKalmanStates+0x288>)
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e3a:	6018      	str	r0, [r3, #0]
    1e3c:	6059      	str	r1, [r3, #4]

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    1e3e:	47a0      	blx	r4
    1e40:	23cc      	movs	r3, #204	; 0xcc
    1e42:	009b      	lsls	r3, r3, #2
    1e44:	50f8      	str	r0, [r7, r3]
    my_altimeter->Velocity = my_altimeter->myKalmanFilter.est[1];
    1e46:	0031      	movs	r1, r6
    1e48:	0028      	movs	r0, r5
    1e4a:	47a0      	blx	r4
    1e4c:	23ce      	movs	r3, #206	; 0xce
    1e4e:	009b      	lsls	r3, r3, #2
    1e50:	50f8      	str	r0, [r7, r3]
    my_altimeter->Altitude = my_altimeter->myKalmanFilter.est[0];
    1e52:	4b0d      	ldr	r3, [pc, #52]	; (1e88 <computeKalmanStates+0x28c>)
    1e54:	9802      	ldr	r0, [sp, #8]
    1e56:	9903      	ldr	r1, [sp, #12]
    1e58:	4798      	blx	r3
    1e5a:	23cd      	movs	r3, #205	; 0xcd
    1e5c:	009b      	lsls	r3, r3, #2
    1e5e:	50f8      	str	r0, [r7, r3]


}
    1e60:	b013      	add	sp, #76	; 0x4c
    1e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e64:	00005f3d 	.word	0x00005f3d
    1e68:	000056f5 	.word	0x000056f5
    1e6c:	33daf8df 	.word	0x33daf8df
    1e70:	4040164b 	.word	0x4040164b
    1e74:	00005201 	.word	0x00005201
    1e78:	00003a65 	.word	0x00003a65
    1e7c:	20000010 	.word	0x20000010
    1e80:	00004361 	.word	0x00004361
    1e84:	00005fe5 	.word	0x00005fe5
    1e88:	00003bbd 	.word	0x00003bbd

00001e8c <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1e8e:	2684      	movs	r6, #132	; 0x84
    1e90:	00b6      	lsls	r6, r6, #2
    1e92:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e94:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1e96:	194b      	adds	r3, r1, r5
    1e98:	2bfe      	cmp	r3, #254	; 0xfe
    1e9a:	dc03      	bgt.n	1ea4 <makePage+0x18>
    1e9c:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e9e:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1ea0:	1947      	adds	r7, r0, r5
    1ea2:	e034      	b.n	1f0e <makePage+0x82>
    1ea4:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1ea6:	195c      	adds	r4, r3, r5
    1ea8:	b2de      	uxtb	r6, r3
    1eaa:	2cfe      	cmp	r4, #254	; 0xfe
    1eac:	dc08      	bgt.n	1ec0 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1eae:	9a00      	ldr	r2, [sp, #0]
    1eb0:	4f1f      	ldr	r7, [pc, #124]	; (1f30 <makePage+0xa4>)
    1eb2:	5cd6      	ldrb	r6, [r2, r3]
    1eb4:	1904      	adds	r4, r0, r4
    1eb6:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eb8:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1eba:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1ebc:	b29b      	uxth	r3, r3
    1ebe:	e7f2      	b.n	1ea6 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1ec0:	2384      	movs	r3, #132	; 0x84
    1ec2:	2500      	movs	r5, #0
    1ec4:	009b      	lsls	r3, r3, #2
    1ec6:	54c5      	strb	r5, [r0, r3]
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <makePage+0xa4>)
    1eca:	18c4      	adds	r4, r0, r3
    1ecc:	4b19      	ldr	r3, [pc, #100]	; (1f34 <makePage+0xa8>)
    1ece:	18c3      	adds	r3, r0, r3
    1ed0:	9301      	str	r3, [sp, #4]
    1ed2:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1ed4:	781f      	ldrb	r7, [r3, #0]
    1ed6:	46bc      	mov	ip, r7
    1ed8:	4662      	mov	r2, ip
    1eda:	1e9f      	subs	r7, r3, #2
    1edc:	3fff      	subs	r7, #255	; 0xff
    1ede:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ee0:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1ee2:	701d      	strb	r5, [r3, #0]
    1ee4:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ee6:	4293      	cmp	r3, r2
    1ee8:	d1f4      	bne.n	1ed4 <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1eea:	2584      	movs	r5, #132	; 0x84
    1eec:	0033      	movs	r3, r6
    1eee:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d208      	bcs.n	1f06 <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ef4:	9a00      	ldr	r2, [sp, #0]
    1ef6:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1ef8:	3301      	adds	r3, #1
    1efa:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1efc:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1efe:	1b9f      	subs	r7, r3, r6
    1f00:	5547      	strb	r7, [r0, r5]
    1f02:	3401      	adds	r4, #1
    1f04:	e7f4      	b.n	1ef0 <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1f06:	2201      	movs	r2, #1
    1f08:	4b0a      	ldr	r3, [pc, #40]	; (1f34 <makePage+0xa8>)
    1f0a:	54c2      	strb	r2, [r0, r3]
    1f0c:	e00f      	b.n	1f2e <makePage+0xa2>
    1f0e:	1c5c      	adds	r4, r3, #1
    1f10:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f12:	428b      	cmp	r3, r1
    1f14:	d80b      	bhi.n	1f2e <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1f16:	9a00      	ldr	r2, [sp, #0]
    1f18:	5cd2      	ldrb	r2, [r2, r3]
    1f1a:	18fb      	adds	r3, r7, r3
    1f1c:	4694      	mov	ip, r2
    1f1e:	4a04      	ldr	r2, [pc, #16]	; (1f30 <makePage+0xa4>)
    1f20:	189b      	adds	r3, r3, r2
    1f22:	4662      	mov	r2, ip
    1f24:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1f26:	192b      	adds	r3, r5, r4
    1f28:	5583      	strb	r3, [r0, r6]
    1f2a:	0023      	movs	r3, r4
    1f2c:	e7ef      	b.n	1f0e <makePage+0x82>
        }

    }
}
    1f2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f30:	00000211 	.word	0x00000211
    1f34:	00000311 	.word	0x00000311

00001f38 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f3a:	2346      	movs	r3, #70	; 0x46
    1f3c:	466a      	mov	r2, sp
    1f3e:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1f40:	7a03      	ldrb	r3, [r0, #8]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f42:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1f44:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1f46:	0003      	movs	r3, r0
    1f48:	33b0      	adds	r3, #176	; 0xb0
    1f4a:	681b      	ldr	r3, [r3, #0]
    1f4c:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f4e:	0a1a      	lsrs	r2, r3, #8
    1f50:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f52:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1f54:	0e1b      	lsrs	r3, r3, #24
    1f56:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f58:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f5a:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f5c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f5e:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f60:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f62:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1f64:	0e1b      	lsrs	r3, r3, #24
    1f66:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f68:	6c83      	ldr	r3, [r0, #72]	; 0x48
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f6a:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f6c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f6e:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f70:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f72:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f74:	0e1b      	lsrs	r3, r3, #24
    1f76:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f78:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f7a:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f7c:	33e4      	adds	r3, #228	; 0xe4
    1f7e:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f80:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1f82:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    1f84:	0a1b      	lsrs	r3, r3, #8
    1f86:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1f88:	2110      	movs	r1, #16
    1f8a:	4b02      	ldr	r3, [pc, #8]	; (1f94 <logFlight+0x5c>)
    1f8c:	4798      	blx	r3
}
    1f8e:	b005      	add	sp, #20
    1f90:	bd00      	pop	{pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	00001e8d 	.word	0x00001e8d

00001f98 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9a:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f9c:	466a      	mov	r2, sp
    1f9e:	2341      	movs	r3, #65	; 0x41
    1fa0:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1fa2:	23c9      	movs	r3, #201	; 0xc9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1fa4:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	58c3      	ldr	r3, [r0, r3]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
}

void logSensors(Altimeter *my_altimeter) {
    1faa:	0004      	movs	r4, r0

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1fac:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1fae:	0a1a      	lsrs	r2, r3, #8
    1fb0:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fb2:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1fb4:	0e1b      	lsrs	r3, r3, #24
    1fb6:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->Altitude >> 0;
    1fb8:	23cd      	movs	r3, #205	; 0xcd
    1fba:	009b      	lsls	r3, r3, #2
    1fbc:	58c3      	ldr	r3, [r0, r3]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1fbe:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    1fc0:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    1fc2:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->Altitude >> 8;
    1fc4:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->Altitude >> 16;
    1fc6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->Altitude >> 24;
    1fc8:	0e1b      	lsrs	r3, r3, #24
    1fca:	720b      	strb	r3, [r1, #8]

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    1fcc:	23cc      	movs	r3, #204	; 0xcc
    1fce:	009b      	lsls	r3, r3, #2
    1fd0:	58c7      	ldr	r7, [r0, r3]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    1fd2:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    1fd4:	4e24      	ldr	r6, [pc, #144]	; (2068 <STACK_SIZE+0x68>)
    1fd6:	1c38      	adds	r0, r7, #0
    1fd8:	47b0      	blx	r6
    1fda:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    1fdc:	4b23      	ldr	r3, [pc, #140]	; (206c <STACK_SIZE+0x6c>)
    1fde:	0028      	movs	r0, r5
    1fe0:	4798      	blx	r3
    1fe2:	4b23      	ldr	r3, [pc, #140]	; (2070 <STACK_SIZE+0x70>)
    1fe4:	1c01      	adds	r1, r0, #0
    1fe6:	1c38      	adds	r0, r7, #0
    1fe8:	4798      	blx	r3
    1fea:	4922      	ldr	r1, [pc, #136]	; (2074 <STACK_SIZE+0x74>)
    1fec:	4f22      	ldr	r7, [pc, #136]	; (2078 <STACK_SIZE+0x78>)
    1fee:	47b8      	blx	r7
    1ff0:	4b22      	ldr	r3, [pc, #136]	; (207c <STACK_SIZE+0x7c>)
    1ff2:	4798      	blx	r3

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    1ff4:	466a      	mov	r2, sp
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;
    1ff6:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    1ff8:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    1ffa:	0a1b      	lsrs	r3, r3, #8
    1ffc:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    1ffe:	23ce      	movs	r3, #206	; 0xce
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2000:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2002:	009b      	lsls	r3, r3, #2

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    2004:	122d      	asrs	r5, r5, #8
    2006:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2008:	58e5      	ldr	r5, [r4, r3]
    200a:	1c28      	adds	r0, r5, #0
    200c:	47b0      	blx	r6
    200e:	b206      	sxth	r6, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2010:	4b16      	ldr	r3, [pc, #88]	; (206c <STACK_SIZE+0x6c>)
    2012:	0030      	movs	r0, r6
    2014:	4798      	blx	r3
    2016:	4b16      	ldr	r3, [pc, #88]	; (2070 <STACK_SIZE+0x70>)
    2018:	1c01      	adds	r1, r0, #0
    201a:	1c28      	adds	r0, r5, #0
    201c:	4798      	blx	r3
    201e:	4915      	ldr	r1, [pc, #84]	; (2074 <STACK_SIZE+0x74>)
    2020:	47b8      	blx	r7
    2022:	4b16      	ldr	r3, [pc, #88]	; (207c <STACK_SIZE+0x7c>)
    2024:	4798      	blx	r3

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    2026:	466a      	mov	r2, sp
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2028:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    202a:	73d3      	strb	r3, [r2, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    202c:	0a1b      	lsrs	r3, r3, #8
    202e:	7413      	strb	r3, [r2, #16]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;



    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    2030:	0023      	movs	r3, r4


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    2032:	7356      	strb	r6, [r2, #13]
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    2034:	1236      	asrs	r6, r6, #8
    2036:	7396      	strb	r6, [r2, #14]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;



    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    2038:	33f4      	adds	r3, #244	; 0xf4
    203a:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    203c:	2117      	movs	r1, #23
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;



    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    203e:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    2040:	0a1b      	lsrs	r3, r3, #8
    2042:	7493      	strb	r3, [r2, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    2044:	0023      	movs	r3, r4
    2046:	33f8      	adds	r3, #248	; 0xf8
    2048:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    204a:	0020      	movs	r0, r4



    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    204c:	74d3      	strb	r3, [r2, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    204e:	0a1b      	lsrs	r3, r3, #8
    2050:	7513      	strb	r3, [r2, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    2052:	0023      	movs	r3, r4
    2054:	33fe      	adds	r3, #254	; 0xfe
    2056:	885b      	ldrh	r3, [r3, #2]
    2058:	7553      	strb	r3, [r2, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    205a:	0a1b      	lsrs	r3, r3, #8
    205c:	7593      	strb	r3, [r2, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    205e:	4b08      	ldr	r3, [pc, #32]	; (2080 <STACK_SIZE+0x80>)
    2060:	4798      	blx	r3
}
    2062:	b007      	add	sp, #28
    2064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	0000428d 	.word	0x0000428d
    206c:	000042d1 	.word	0x000042d1
    2070:	00003f81 	.word	0x00003f81
    2074:	447a0000 	.word	0x447a0000
    2078:	00003d59 	.word	0x00003d59
    207c:	00003b8d 	.word	0x00003b8d
    2080:	00001e8d 	.word	0x00001e8d

00002084 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2084:	2306      	movs	r3, #6
    makePage(my_altimeter, bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2086:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2088:	4358      	muls	r0, r3
    208a:	ac01      	add	r4, sp, #4
    208c:	3001      	adds	r0, #1
    208e:	30ff      	adds	r0, #255	; 0xff
    2090:	0022      	movs	r2, r4
    2092:	2103      	movs	r1, #3
    2094:	4b04      	ldr	r3, [pc, #16]	; (20a8 <getFlightStartAddress+0x24>)
    2096:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2098:	7860      	ldrb	r0, [r4, #1]
    209a:	78a3      	ldrb	r3, [r4, #2]
    209c:	0200      	lsls	r0, r0, #8
    209e:	041b      	lsls	r3, r3, #16
    20a0:	4318      	orrs	r0, r3
    20a2:	7823      	ldrb	r3, [r4, #0]
    20a4:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    20a6:	bd16      	pop	{r1, r2, r4, pc}
    20a8:	00000341 	.word	0x00000341

000020ac <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    20ac:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    20ae:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    20b0:	4358      	muls	r0, r3
    20b2:	ac01      	add	r4, sp, #4
    20b4:	3004      	adds	r0, #4
    20b6:	30ff      	adds	r0, #255	; 0xff
    20b8:	0022      	movs	r2, r4
    20ba:	2103      	movs	r1, #3
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <FindFlightEndingAddress+0x24>)
    20be:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    20c0:	7860      	ldrb	r0, [r4, #1]
    20c2:	78a3      	ldrb	r3, [r4, #2]
    20c4:	0200      	lsls	r0, r0, #8
    20c6:	041b      	lsls	r3, r3, #16
    20c8:	4318      	orrs	r0, r3
    20ca:	7823      	ldrb	r3, [r4, #0]
    20cc:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    20ce:	bd16      	pop	{r1, r2, r4, pc}
    20d0:	00000341 	.word	0x00000341

000020d4 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    20d4:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    20d6:	4b04      	ldr	r3, [pc, #16]	; (20e8 <isFlightLogged+0x14>)
    20d8:	4798      	blx	r3
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    20dc:	18c0      	adds	r0, r0, r3
    20de:	1e43      	subs	r3, r0, #1
    20e0:	4198      	sbcs	r0, r3
    20e2:	b2c0      	uxtb	r0, r0
    20e4:	bd10      	pop	{r4, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	00002085 	.word	0x00002085
    20ec:	ff000001 	.word	0xff000001

000020f0 <writeFlightEndAddress>:



void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    20f0:	0003      	movs	r3, r0
    }
}



void writeFlightEndAddress(Altimeter *my_altimeter) {
    20f2:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    20f4:	33fc      	adds	r3, #252	; 0xfc
    20f6:	68db      	ldr	r3, [r3, #12]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    20f8:	aa01      	add	r2, sp, #4
    20fa:	7013      	strb	r3, [r2, #0]
    20fc:	0a19      	lsrs	r1, r3, #8
    20fe:	0c1b      	lsrs	r3, r3, #16
    2100:	7051      	strb	r1, [r2, #1]
    2102:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2104:	7a03      	ldrb	r3, [r0, #8]
    2106:	2006      	movs	r0, #6
    2108:	4358      	muls	r0, r3
    210a:	3004      	adds	r0, #4
    210c:	30ff      	adds	r0, #255	; 0xff
    210e:	2103      	movs	r1, #3
    2110:	4b02      	ldr	r3, [pc, #8]	; (211c <writeFlightEndAddress+0x2c>)
    2112:	4798      	blx	r3
    delay_ms(10);
    2114:	200a      	movs	r0, #10
    2116:	4b02      	ldr	r3, [pc, #8]	; (2120 <writeFlightEndAddress+0x30>)
    2118:	4798      	blx	r3

}
    211a:	bd07      	pop	{r0, r1, r2, pc}
    211c:	00000255 	.word	0x00000255
    2120:	00000f95 	.word	0x00000f95

00002124 <findNewFlightStart>:




void findNewFlightStart(Altimeter *my_altimeter) {
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2126:	2400      	movs	r4, #0
}




void findNewFlightStart(Altimeter *my_altimeter) {
    2128:	b085      	sub	sp, #20
    212a:	9001      	str	r0, [sp, #4]

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {
    212c:	0020      	movs	r0, r4
    212e:	4b24      	ldr	r3, [pc, #144]	; (21c0 <findNewFlightStart+0x9c>)
    2130:	4798      	blx	r3
    2132:	2800      	cmp	r0, #0
    2134:	d13d      	bne.n	21b2 <findNewFlightStart+0x8e>
    2136:	9f01      	ldr	r7, [sp, #4]
    2138:	ad03      	add	r5, sp, #12
    213a:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    213c:	2c00      	cmp	r4, #0
    213e:	d016      	beq.n	216e <findNewFlightStart+0x4a>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2140:	1e60      	subs	r0, r4, #1
    2142:	4b20      	ldr	r3, [pc, #128]	; (21c4 <findNewFlightStart+0xa0>)
    2144:	b2c0      	uxtb	r0, r0
    2146:	4798      	blx	r3
                delay_ms(5);
    2148:	4b1f      	ldr	r3, [pc, #124]	; (21c8 <findNewFlightStart+0xa4>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    214a:	0006      	movs	r6, r0
                delay_ms(5);
    214c:	2005      	movs	r0, #5
    214e:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2150:	2006      	movs	r0, #6
    2152:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2154:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2156:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;
    2158:	60fe      	str	r6, [r7, #12]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    215a:	702e      	strb	r6, [r5, #0]
    215c:	706b      	strb	r3, [r5, #1]
    215e:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2160:	30ff      	adds	r0, #255	; 0xff
    2162:	002a      	movs	r2, r5
    2164:	2103      	movs	r1, #3
    2166:	4b19      	ldr	r3, [pc, #100]	; (21cc <findNewFlightStart+0xa8>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2168:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    216a:	4798      	blx	r3
    216c:	e00f      	b.n	218e <findNewFlightStart+0x6a>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    216e:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2170:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2172:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2174:	0040      	lsls	r0, r0, #1
    2176:	4b15      	ldr	r3, [pc, #84]	; (21cc <findNewFlightStart+0xa8>)
    2178:	002a      	movs	r2, r5
    217a:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    217c:	702c      	strb	r4, [r5, #0]
    217e:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2180:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    2182:	2380      	movs	r3, #128	; 0x80
    2184:	015b      	lsls	r3, r3, #5
    2186:	60fb      	str	r3, [r7, #12]
                beep(1500);
    2188:	4811      	ldr	r0, [pc, #68]	; (21d0 <findNewFlightStart+0xac>)
    218a:	4b12      	ldr	r3, [pc, #72]	; (21d4 <findNewFlightStart+0xb0>)
    218c:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    218e:	9b01      	ldr	r3, [sp, #4]
    2190:	721c      	strb	r4, [r3, #8]

            while (flightNumbToCheck > 0) {
                beep(500);
    2192:	20fa      	movs	r0, #250	; 0xfa
    2194:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2196:	2c00      	cmp	r4, #0
    2198:	d008      	beq.n	21ac <findNewFlightStart+0x88>
                beep(500);
    219a:	4b0e      	ldr	r3, [pc, #56]	; (21d4 <findNewFlightStart+0xb0>)
    219c:	4798      	blx	r3
                delay_ms(500);
    219e:	20fa      	movs	r0, #250	; 0xfa
    21a0:	4b09      	ldr	r3, [pc, #36]	; (21c8 <findNewFlightStart+0xa4>)
    21a2:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    21a4:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    21a6:	4798      	blx	r3
                --flightNumbToCheck;
    21a8:	b2e4      	uxtb	r4, r4
    21aa:	e7f2      	b.n	2192 <findNewFlightStart+0x6e>
            }
            delay_ms(500);
    21ac:	4b06      	ldr	r3, [pc, #24]	; (21c8 <findNewFlightStart+0xa4>)
    21ae:	4798      	blx	r3
            break;
    21b0:	e003      	b.n	21ba <findNewFlightStart+0x96>



void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    21b2:	3401      	adds	r4, #1
    21b4:	b2e4      	uxtb	r4, r4
    21b6:	2c14      	cmp	r4, #20
    21b8:	d1b8      	bne.n	212c <findNewFlightStart+0x8>
            }
            delay_ms(500);
            break;
        }
    }
}
    21ba:	b005      	add	sp, #20
    21bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	000020d5 	.word	0x000020d5
    21c4:	000020ad 	.word	0x000020ad
    21c8:	00000f95 	.word	0x00000f95
    21cc:	00000255 	.word	0x00000255
    21d0:	000005dc 	.word	0x000005dc
    21d4:	00000d7d 	.word	0x00000d7d

000021d8 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    21d8:	4b01      	ldr	r3, [pc, #4]	; (21e0 <takeSample+0x8>)
    21da:	7818      	ldrb	r0, [r3, #0]
}
    21dc:	4770      	bx	lr
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	200004d3 	.word	0x200004d3

000021e4 <pullSample>:

void pullSample() {
    SampleBool = true;
    21e4:	2201      	movs	r2, #1
    21e6:	4b01      	ldr	r3, [pc, #4]	; (21ec <pullSample+0x8>)
    21e8:	701a      	strb	r2, [r3, #0]
}
    21ea:	4770      	bx	lr
    21ec:	200004d3 	.word	0x200004d3

000021f0 <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21f0:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    21f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21f4:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    21f6:	0004      	movs	r4, r0
    SampleBool = false;
    21f8:	4be3      	ldr	r3, [pc, #908]	; (2588 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    21fa:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    21fc:	4ee3      	ldr	r6, [pc, #908]	; (258c <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    21fe:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2200:	47b0      	blx	r6
    2202:	00ad      	lsls	r5, r5, #2
    2204:	5963      	ldr	r3, [r4, r5]
    2206:	1ac0      	subs	r0, r0, r3
    2208:	23cb      	movs	r3, #203	; 0xcb
    220a:	009b      	lsls	r3, r3, #2
    220c:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    220e:	47b0      	blx	r6
    2210:	5160      	str	r0, [r4, r5]

    my_altimeter->myVoltages.batV = adc_read(senseBatPin);
    2212:	4ddf      	ldr	r5, [pc, #892]	; (2590 <sampleTick+0x3a0>)
    2214:	4edf      	ldr	r6, [pc, #892]	; (2594 <sampleTick+0x3a4>)
    2216:	786b      	ldrb	r3, [r5, #1]
    2218:	7829      	ldrb	r1, [r5, #0]
    221a:	78a8      	ldrb	r0, [r5, #2]
    221c:	021b      	lsls	r3, r3, #8
    221e:	430b      	orrs	r3, r1
    2220:	0400      	lsls	r0, r0, #16
    2222:	001a      	movs	r2, r3
    2224:	0003      	movs	r3, r0
    2226:	78e8      	ldrb	r0, [r5, #3]
    2228:	4313      	orrs	r3, r2
    222a:	0600      	lsls	r0, r0, #24
    222c:	7929      	ldrb	r1, [r5, #4]
    222e:	4318      	orrs	r0, r3
    2230:	47b0      	blx	r6
    2232:	23c5      	movs	r3, #197	; 0xc5
    2234:	009b      	lsls	r3, r3, #2
    2236:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;
    2238:	4bd7      	ldr	r3, [pc, #860]	; (2598 <sampleTick+0x3a8>)
    223a:	4798      	blx	r3
    223c:	4ad7      	ldr	r2, [pc, #860]	; (259c <sampleTick+0x3ac>)
    223e:	4fd8      	ldr	r7, [pc, #864]	; (25a0 <sampleTick+0x3b0>)
    2240:	4bd8      	ldr	r3, [pc, #864]	; (25a4 <sampleTick+0x3b4>)
    2242:	47b8      	blx	r7
    2244:	4bd8      	ldr	r3, [pc, #864]	; (25a8 <sampleTick+0x3b8>)
    2246:	4798      	blx	r3
    2248:	23c6      	movs	r3, #198	; 0xc6
    224a:	009b      	lsls	r3, r3, #2
    224c:	50e0      	str	r0, [r4, r3]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    224e:	79ab      	ldrb	r3, [r5, #6]
    2250:	7969      	ldrb	r1, [r5, #5]
    2252:	79e8      	ldrb	r0, [r5, #7]
    2254:	021b      	lsls	r3, r3, #8
    2256:	430b      	orrs	r3, r1
    2258:	0400      	lsls	r0, r0, #16
    225a:	001a      	movs	r2, r3
    225c:	0003      	movs	r3, r0
    225e:	7a28      	ldrb	r0, [r5, #8]
    2260:	4313      	orrs	r3, r2
    2262:	0600      	lsls	r0, r0, #24
    2264:	7a69      	ldrb	r1, [r5, #9]
    2266:	4318      	orrs	r0, r3
    2268:	47b0      	blx	r6
    226a:	23c7      	movs	r3, #199	; 0xc7
    226c:	009b      	lsls	r3, r3, #2
    226e:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    2270:	7aeb      	ldrb	r3, [r5, #11]
    2272:	7aa9      	ldrb	r1, [r5, #10]
    2274:	7b28      	ldrb	r0, [r5, #12]
    2276:	021b      	lsls	r3, r3, #8
    2278:	430b      	orrs	r3, r1
    227a:	0400      	lsls	r0, r0, #16
    227c:	001a      	movs	r2, r3
    227e:	0003      	movs	r3, r0
    2280:	7b68      	ldrb	r0, [r5, #13]
    2282:	4313      	orrs	r3, r2
    2284:	0600      	lsls	r0, r0, #24
    2286:	7ba9      	ldrb	r1, [r5, #14]
    2288:	4318      	orrs	r0, r3
    228a:	47b0      	blx	r6
    228c:	4bc7      	ldr	r3, [pc, #796]	; (25ac <sampleTick+0x3bc>)
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    228e:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    2290:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    2292:	7c2b      	ldrb	r3, [r5, #16]
    2294:	7c68      	ldrb	r0, [r5, #17]
    2296:	021b      	lsls	r3, r3, #8
    2298:	430b      	orrs	r3, r1
    229a:	0400      	lsls	r0, r0, #16
    229c:	001a      	movs	r2, r3
    229e:	0003      	movs	r3, r0
    22a0:	7ca8      	ldrb	r0, [r5, #18]
    22a2:	4313      	orrs	r3, r2
    22a4:	0600      	lsls	r0, r0, #24
    22a6:	7ce9      	ldrb	r1, [r5, #19]
    22a8:	4318      	orrs	r0, r3
    22aa:	47b0      	blx	r6
    22ac:	23c8      	movs	r3, #200	; 0xc8
    22ae:	009b      	lsls	r3, r3, #2
    22b0:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    22b2:	7d6b      	ldrb	r3, [r5, #21]
    22b4:	7d29      	ldrb	r1, [r5, #20]
    22b6:	7da8      	ldrb	r0, [r5, #22]
    22b8:	021b      	lsls	r3, r3, #8
    22ba:	430b      	orrs	r3, r1
    22bc:	0400      	lsls	r0, r0, #16
    22be:	001a      	movs	r2, r3
    22c0:	0003      	movs	r3, r0
    22c2:	7de8      	ldrb	r0, [r5, #23]
    22c4:	4313      	orrs	r3, r2
    22c6:	0600      	lsls	r0, r0, #24
    22c8:	7e29      	ldrb	r1, [r5, #24]
    22ca:	4318      	orrs	r0, r3
    22cc:	47b0      	blx	r6
    22ce:	4bb8      	ldr	r3, [pc, #736]	; (25b0 <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22d0:	7e69      	ldrb	r1, [r5, #25]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    22d2:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    22d4:	7eab      	ldrb	r3, [r5, #26]
    22d6:	7ee8      	ldrb	r0, [r5, #27]
    22d8:	021b      	lsls	r3, r3, #8
    22da:	430b      	orrs	r3, r1
    22dc:	0400      	lsls	r0, r0, #16
    22de:	001a      	movs	r2, r3
    22e0:	0003      	movs	r3, r0
    22e2:	7f28      	ldrb	r0, [r5, #28]
    22e4:	4313      	orrs	r3, r2
    22e6:	0600      	lsls	r0, r0, #24
    22e8:	7f69      	ldrb	r1, [r5, #29]
    22ea:	4318      	orrs	r0, r3
    22ec:	47b0      	blx	r6
    22ee:	0023      	movs	r3, r4
    22f0:	33fe      	adds	r3, #254	; 0xfe
    22f2:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    22f4:	4baf      	ldr	r3, [pc, #700]	; (25b4 <sampleTick+0x3c4>)
    22f6:	0026      	movs	r6, r4
    22f8:	18c0      	adds	r0, r0, r3
    22fa:	4ba7      	ldr	r3, [pc, #668]	; (2598 <sampleTick+0x3a8>)
    22fc:	4798      	blx	r3
    22fe:	4aae      	ldr	r2, [pc, #696]	; (25b8 <sampleTick+0x3c8>)
    2300:	4fa7      	ldr	r7, [pc, #668]	; (25a0 <sampleTick+0x3b0>)
    2302:	4bae      	ldr	r3, [pc, #696]	; (25bc <sampleTick+0x3cc>)
    2304:	47b8      	blx	r7
    2306:	4ba8      	ldr	r3, [pc, #672]	; (25a8 <sampleTick+0x3b8>)
    2308:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    230a:	0022      	movs	r2, r4
    230c:	0023      	movs	r3, r4
    230e:	32c8      	adds	r2, #200	; 0xc8
    2310:	9204      	str	r2, [sp, #16]
    2312:	6812      	ldr	r2, [r2, #0]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2314:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2316:	33cc      	adds	r3, #204	; 0xcc
    2318:	2780      	movs	r7, #128	; 0x80
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    231a:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    231c:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    231e:	2250      	movs	r2, #80	; 0x50
    2320:	4ba7      	ldr	r3, [pc, #668]	; (25c0 <sampleTick+0x3d0>)
    2322:	023f      	lsls	r7, r7, #8
    2324:	615f      	str	r7, [r3, #20]
    2326:	002e      	movs	r6, r5
    2328:	9200      	str	r2, [sp, #0]
    232a:	7fea      	ldrb	r2, [r5, #31]
    232c:	7fa8      	ldrb	r0, [r5, #30]
    232e:	0212      	lsls	r2, r2, #8
    2330:	4302      	orrs	r2, r0
    2332:	0011      	movs	r1, r2
    2334:	002b      	movs	r3, r5
    2336:	361e      	adds	r6, #30
    2338:	78b2      	ldrb	r2, [r6, #2]
    233a:	3323      	adds	r3, #35	; 0x23
    233c:	0412      	lsls	r2, r2, #16
    233e:	430a      	orrs	r2, r1
    2340:	78f1      	ldrb	r1, [r6, #3]
    2342:	7818      	ldrb	r0, [r3, #0]
    2344:	0609      	lsls	r1, r1, #24
    2346:	4311      	orrs	r1, r2
    2348:	7932      	ldrb	r2, [r6, #4]
    234a:	789d      	ldrb	r5, [r3, #2]
    234c:	9203      	str	r2, [sp, #12]
    234e:	785a      	ldrb	r2, [r3, #1]
    2350:	042d      	lsls	r5, r5, #16
    2352:	0212      	lsls	r2, r2, #8
    2354:	4302      	orrs	r2, r0
    2356:	9102      	str	r1, [sp, #8]
    2358:	0011      	movs	r1, r2
    235a:	002a      	movs	r2, r5
    235c:	78dd      	ldrb	r5, [r3, #3]
    235e:	791b      	ldrb	r3, [r3, #4]
    2360:	430a      	orrs	r2, r1
    2362:	062d      	lsls	r5, r5, #24
    2364:	4315      	orrs	r5, r2
    2366:	9305      	str	r3, [sp, #20]
    2368:	9a02      	ldr	r2, [sp, #8]
    236a:	9905      	ldr	r1, [sp, #20]
    236c:	9b03      	ldr	r3, [sp, #12]
    236e:	0028      	movs	r0, r5
    2370:	4e94      	ldr	r6, [pc, #592]	; (25c4 <sampleTick+0x3d4>)
    2372:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    2374:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2376:	4b92      	ldr	r3, [pc, #584]	; (25c0 <sampleTick+0x3d0>)
    2378:	0040      	lsls	r0, r0, #1
    237a:	619f      	str	r7, [r3, #24]
    237c:	4b92      	ldr	r3, [pc, #584]	; (25c8 <sampleTick+0x3d8>)
    237e:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    2380:	4b92      	ldr	r3, [pc, #584]	; (25cc <sampleTick+0x3dc>)
    2382:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2384:	4b8e      	ldr	r3, [pc, #568]	; (25c0 <sampleTick+0x3d0>)
    2386:	6220      	str	r0, [r4, #32]
    2388:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    238a:	2346      	movs	r3, #70	; 0x46
    238c:	9a02      	ldr	r2, [sp, #8]
    238e:	9300      	str	r3, [sp, #0]
    2390:	0028      	movs	r0, r5
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	9905      	ldr	r1, [sp, #20]
    2396:	47b0      	blx	r6
    2398:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    239a:	4b89      	ldr	r3, [pc, #548]	; (25c0 <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    239c:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    239e:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23a0:	4b8b      	ldr	r3, [pc, #556]	; (25d0 <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    23a2:	4e8c      	ldr	r6, [pc, #560]	; (25d4 <sampleTick+0x3e4>)
    23a4:	601a      	str	r2, [r3, #0]
    23a6:	2182      	movs	r1, #130	; 0x82
    23a8:	2000      	movs	r0, #0
    23aa:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23ac:	21ff      	movs	r1, #255	; 0xff
    23ae:	2000      	movs	r0, #0
    23b0:	47b0      	blx	r6
    23b2:	0023      	movs	r3, r4
    23b4:	33e4      	adds	r3, #228	; 0xe4
    23b6:	8018      	strh	r0, [r3, #0]
    23b8:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ba:	21ff      	movs	r1, #255	; 0xff
    23bc:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23be:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23c0:	47b0      	blx	r6
    23c2:	9b02      	ldr	r3, [sp, #8]
    23c4:	0200      	lsls	r0, r0, #8
    23c6:	4305      	orrs	r5, r0
    23c8:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23ca:	21ff      	movs	r1, #255	; 0xff
    23cc:	2000      	movs	r0, #0
    23ce:	47b0      	blx	r6
    23d0:	0023      	movs	r3, r4
    23d2:	33e8      	adds	r3, #232	; 0xe8
    23d4:	8018      	strh	r0, [r3, #0]
    23d6:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23d8:	21ff      	movs	r1, #255	; 0xff
    23da:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23dc:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23de:	47b0      	blx	r6
    23e0:	9b03      	ldr	r3, [sp, #12]
    23e2:	0200      	lsls	r0, r0, #8
    23e4:	4305      	orrs	r5, r0
    23e6:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23e8:	21ff      	movs	r1, #255	; 0xff
    23ea:	0025      	movs	r5, r4
    23ec:	2000      	movs	r0, #0
    23ee:	47b0      	blx	r6
    23f0:	35ec      	adds	r5, #236	; 0xec
    23f2:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23f4:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23f6:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23f8:	2000      	movs	r0, #0
    23fa:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23fc:	2280      	movs	r2, #128	; 0x80
    23fe:	0200      	lsls	r0, r0, #8
    2400:	4b75      	ldr	r3, [pc, #468]	; (25d8 <sampleTick+0x3e8>)
    2402:	4307      	orrs	r7, r0
    2404:	00d2      	lsls	r2, r2, #3
    2406:	802f      	strh	r7, [r5, #0]
    2408:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    240a:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    240c:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    240e:	2000      	movs	r0, #0
    2410:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2412:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2414:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2416:	2200      	movs	r2, #0
    2418:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    241a:	2102      	movs	r1, #2
    241c:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    241e:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2420:	37ee      	adds	r7, #238	; 0xee
    2422:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2424:	1100      	asrs	r0, r0, #4
    2426:	31e6      	adds	r1, #230	; 0xe6
    2428:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    242a:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    242c:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    242e:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    2430:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    2432:	4b59      	ldr	r3, [pc, #356]	; (2598 <sampleTick+0x3a8>)
    2434:	4798      	blx	r3
    2436:	23fe      	movs	r3, #254	; 0xfe
    2438:	2200      	movs	r2, #0
    243a:	4d59      	ldr	r5, [pc, #356]	; (25a0 <sampleTick+0x3b0>)
    243c:	059b      	lsls	r3, r3, #22
    243e:	47a8      	blx	r5
    2440:	4b59      	ldr	r3, [pc, #356]	; (25a8 <sampleTick+0x3b8>)
    2442:	4798      	blx	r3
    2444:	9b04      	ldr	r3, [sp, #16]
    2446:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2448:	0023      	movs	r3, r4
    244a:	33d0      	adds	r3, #208	; 0xd0
    244c:	9303      	str	r3, [sp, #12]
    244e:	9b02      	ldr	r3, [sp, #8]
    2450:	2000      	movs	r0, #0
    2452:	5e18      	ldrsh	r0, [r3, r0]
    2454:	4b50      	ldr	r3, [pc, #320]	; (2598 <sampleTick+0x3a8>)
    2456:	4798      	blx	r3
    2458:	23fe      	movs	r3, #254	; 0xfe
    245a:	2200      	movs	r2, #0
    245c:	059b      	lsls	r3, r3, #22
    245e:	47a8      	blx	r5
    2460:	4b51      	ldr	r3, [pc, #324]	; (25a8 <sampleTick+0x3b8>)
    2462:	4798      	blx	r3
    2464:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    2466:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    2468:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    246a:	2300      	movs	r3, #0
    246c:	5ef8      	ldrsh	r0, [r7, r3]
    246e:	4b4a      	ldr	r3, [pc, #296]	; (2598 <sampleTick+0x3a8>)
    2470:	4798      	blx	r3
    2472:	23fe      	movs	r3, #254	; 0xfe
    2474:	2200      	movs	r2, #0
    2476:	4f4a      	ldr	r7, [pc, #296]	; (25a0 <sampleTick+0x3b0>)
    2478:	059b      	lsls	r3, r3, #22
    247a:	47b8      	blx	r7
    247c:	4b4a      	ldr	r3, [pc, #296]	; (25a8 <sampleTick+0x3b8>)
    247e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2480:	2280      	movs	r2, #128	; 0x80
    2482:	4b4f      	ldr	r3, [pc, #316]	; (25c0 <sampleTick+0x3d0>)
    2484:	00d2      	lsls	r2, r2, #3
    2486:	35d4      	adds	r5, #212	; 0xd4
    2488:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    248a:	2182      	movs	r1, #130	; 0x82
    248c:	615a      	str	r2, [r3, #20]
    248e:	2000      	movs	r0, #0
    2490:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2492:	21ff      	movs	r1, #255	; 0xff
    2494:	2000      	movs	r0, #0
    2496:	47b0      	blx	r6
    2498:	0023      	movs	r3, r4
    249a:	33f0      	adds	r3, #240	; 0xf0
    249c:	8018      	strh	r0, [r3, #0]
    249e:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24a0:	21ff      	movs	r1, #255	; 0xff
    24a2:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    24a4:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24a6:	47b0      	blx	r6
    24a8:	9b02      	ldr	r3, [sp, #8]
    24aa:	0200      	lsls	r0, r0, #8
    24ac:	4305      	orrs	r5, r0
    24ae:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24b0:	21ff      	movs	r1, #255	; 0xff
    24b2:	2000      	movs	r0, #0
    24b4:	47b0      	blx	r6
    24b6:	0023      	movs	r3, r4
    24b8:	33f4      	adds	r3, #244	; 0xf4
    24ba:	8018      	strh	r0, [r3, #0]
    24bc:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24be:	21ff      	movs	r1, #255	; 0xff
    24c0:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24c2:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24c4:	47b0      	blx	r6
    24c6:	9b03      	ldr	r3, [sp, #12]
    24c8:	0200      	lsls	r0, r0, #8
    24ca:	4305      	orrs	r5, r0
    24cc:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ce:	21ff      	movs	r1, #255	; 0xff
    24d0:	0025      	movs	r5, r4
    24d2:	2000      	movs	r0, #0
    24d4:	47b0      	blx	r6
    24d6:	35f8      	adds	r5, #248	; 0xf8
    24d8:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24da:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24dc:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24de:	2000      	movs	r0, #0
    24e0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24e2:	2280      	movs	r2, #128	; 0x80
    24e4:	0200      	lsls	r0, r0, #8
    24e6:	4b36      	ldr	r3, [pc, #216]	; (25c0 <sampleTick+0x3d0>)
    24e8:	4307      	orrs	r7, r0
    24ea:	00d2      	lsls	r2, r2, #3
    24ec:	802f      	strh	r7, [r5, #0]
    24ee:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24f0:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    24f2:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    24f4:	2000      	movs	r0, #0
    24f6:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24f8:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    24fa:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    24fc:	2200      	movs	r2, #0
    24fe:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    2500:	2100      	movs	r1, #0
    2502:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2504:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2506:	36f6      	adds	r6, #246	; 0xf6
    2508:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    250a:	1100      	asrs	r0, r0, #4
    250c:	31f2      	adds	r1, #242	; 0xf2
    250e:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2510:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2512:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2514:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    2516:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    2518:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    251a:	4b1f      	ldr	r3, [pc, #124]	; (2598 <sampleTick+0x3a8>)
    251c:	4798      	blx	r3
    251e:	23fe      	movs	r3, #254	; 0xfe
    2520:	2200      	movs	r2, #0
    2522:	4f1f      	ldr	r7, [pc, #124]	; (25a0 <sampleTick+0x3b0>)
    2524:	059b      	lsls	r3, r3, #22
    2526:	47b8      	blx	r7
    2528:	4b1f      	ldr	r3, [pc, #124]	; (25a8 <sampleTick+0x3b8>)
    252a:	4798      	blx	r3
    252c:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    252e:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2530:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    2532:	2300      	movs	r3, #0
    2534:	5ef0      	ldrsh	r0, [r6, r3]
    2536:	4b18      	ldr	r3, [pc, #96]	; (2598 <sampleTick+0x3a8>)
    2538:	4798      	blx	r3
    253a:	23fe      	movs	r3, #254	; 0xfe
    253c:	2200      	movs	r2, #0
    253e:	4e18      	ldr	r6, [pc, #96]	; (25a0 <sampleTick+0x3b0>)
    2540:	059b      	lsls	r3, r3, #22
    2542:	47b0      	blx	r6
    2544:	4b18      	ldr	r3, [pc, #96]	; (25a8 <sampleTick+0x3b8>)
    2546:	4798      	blx	r3
    2548:	37dc      	adds	r7, #220	; 0xdc
    254a:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    254c:	2302      	movs	r3, #2
    254e:	5ee8      	ldrsh	r0, [r5, r3]
    2550:	4b11      	ldr	r3, [pc, #68]	; (2598 <sampleTick+0x3a8>)
    2552:	4798      	blx	r3
    2554:	23fe      	movs	r3, #254	; 0xfe
    2556:	2200      	movs	r2, #0
    2558:	4d11      	ldr	r5, [pc, #68]	; (25a0 <sampleTick+0x3b0>)
    255a:	059b      	lsls	r3, r3, #22
    255c:	47a8      	blx	r5
    255e:	0026      	movs	r6, r4
    2560:	4b11      	ldr	r3, [pc, #68]	; (25a8 <sampleTick+0x3b8>)
    2562:	4798      	blx	r3
    2564:	36e0      	adds	r6, #224	; 0xe0
    2566:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    2568:	4b1c      	ldr	r3, [pc, #112]	; (25dc <sampleTick+0x3ec>)
    256a:	2005      	movs	r0, #5
    256c:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    256e:	4b17      	ldr	r3, [pc, #92]	; (25cc <sampleTick+0x3dc>)
    2570:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    2572:	3410      	adds	r4, #16
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    2574:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    2576:	4b1a      	ldr	r3, [pc, #104]	; (25e0 <sampleTick+0x3f0>)
    2578:	0020      	movs	r0, r4
    257a:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    257c:	0020      	movs	r0, r4
    257e:	4b19      	ldr	r3, [pc, #100]	; (25e4 <sampleTick+0x3f4>)
    2580:	4798      	blx	r3


}
    2582:	b007      	add	sp, #28
    2584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	200004d3 	.word	0x200004d3
    258c:	00000fe1 	.word	0x00000fe1
    2590:	000065a4 	.word	0x000065a4
    2594:	00000c55 	.word	0x00000c55
    2598:	00005e49 	.word	0x00005e49
    259c:	77318fc5 	.word	0x77318fc5
    25a0:	00005201 	.word	0x00005201
    25a4:	3f5f212d 	.word	0x3f5f212d
    25a8:	00005fe5 	.word	0x00005fe5
    25ac:	0000031e 	.word	0x0000031e
    25b0:	00000322 	.word	0x00000322
    25b4:	fffff0c4 	.word	0xfffff0c4
    25b8:	02de00d2 	.word	0x02de00d2
    25bc:	bf8f8a09 	.word	0xbf8f8a09
    25c0:	41004400 	.word	0x41004400
    25c4:	00000cbd 	.word	0x00000cbd
    25c8:	00000f65 	.word	0x00000f65
    25cc:	0000041d 	.word	0x0000041d
    25d0:	41004494 	.word	0x41004494
    25d4:	000026f9 	.word	0x000026f9
    25d8:	41004498 	.word	0x41004498
    25dc:	00000f95 	.word	0x00000f95
    25e0:	000004d1 	.word	0x000004d1
    25e4:	00000579 	.word	0x00000579

000025e8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25e8:	b570      	push	{r4, r5, r6, lr}
    25ea:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25ec:	2301      	movs	r3, #1
    25ee:	1ca6      	adds	r6, r4, #2
    25f0:	40b3      	lsls	r3, r6
    25f2:	480d      	ldr	r0, [pc, #52]	; (2628 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25f4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25f6:	6a01      	ldr	r1, [r0, #32]
    25f8:	430b      	orrs	r3, r1
    25fa:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    25fc:	2d00      	cmp	r5, #0
    25fe:	d003      	beq.n	2608 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2600:	2107      	movs	r1, #7
    2602:	0028      	movs	r0, r5
    2604:	4b09      	ldr	r3, [pc, #36]	; (262c <sercomClockEnable+0x44>)
    2606:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2608:	22f0      	movs	r2, #240	; 0xf0
    260a:	2080      	movs	r0, #128	; 0x80
    260c:	0229      	lsls	r1, r5, #8
    260e:	0112      	lsls	r2, r2, #4
    2610:	4011      	ands	r1, r2
    2612:	01c0      	lsls	r0, r0, #7
    2614:	4301      	orrs	r1, r0
    2616:	0020      	movs	r0, r4
    2618:	3014      	adds	r0, #20
    261a:	223f      	movs	r2, #63	; 0x3f
    261c:	0003      	movs	r3, r0
    261e:	4013      	ands	r3, r2
    2620:	4319      	orrs	r1, r3
    2622:	4b03      	ldr	r3, [pc, #12]	; (2630 <sercomClockEnable+0x48>)
    2624:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2626:	bd70      	pop	{r4, r5, r6, pc}
    2628:	40000400 	.word	0x40000400
    262c:	00000f15 	.word	0x00000f15
    2630:	40000c00 	.word	0x40000c00

00002634 <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2634:	4b04      	ldr	r3, [pc, #16]	; (2648 <sercomReset+0x14>)
    2636:	0280      	lsls	r0, r0, #10
    2638:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    263a:	2301      	movs	r3, #1
    263c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    263e:	6802      	ldr	r2, [r0, #0]
    2640:	421a      	tst	r2, r3
    2642:	d1fc      	bne.n	263e <sercomReset+0xa>
}
    2644:	4770      	bx	lr
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	42000800 	.word	0x42000800

0000264c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    264c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    264e:	0004      	movs	r4, r0
    2650:	9300      	str	r3, [sp, #0]
    2652:	ab08      	add	r3, sp, #32
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	000e      	movs	r6, r1
    2658:	9301      	str	r3, [sp, #4]
    265a:	ab09      	add	r3, sp, #36	; 0x24
    265c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    265e:	4b12      	ldr	r3, [pc, #72]	; (26a8 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2660:	0015      	movs	r5, r2

    sercomReset(id);
    2662:	4798      	blx	r3
    2664:	4b11      	ldr	r3, [pc, #68]	; (26ac <sercomSpiMasterInit+0x60>)
    2666:	02a4      	lsls	r4, r4, #10
    2668:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    266a:	2380      	movs	r3, #128	; 0x80
    266c:	029b      	lsls	r3, r3, #10
    266e:	6063      	str	r3, [r4, #4]
    2670:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2672:	21c0      	movs	r1, #192	; 0xc0
    2674:	042d      	lsls	r5, r5, #16
    2676:	029b      	lsls	r3, r3, #10
    2678:	402b      	ands	r3, r5
    267a:	250e      	movs	r5, #14
    267c:	0536      	lsls	r6, r6, #20
    267e:	0389      	lsls	r1, r1, #14
    2680:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2682:	9e00      	ldr	r6, [sp, #0]
    2684:	431d      	orrs	r5, r3
    2686:	1e73      	subs	r3, r6, #1
    2688:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    268a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    268c:	0772      	lsls	r2, r6, #29
    268e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2690:	432a      	orrs	r2, r5
    2692:	1e59      	subs	r1, r3, #1
    2694:	418b      	sbcs	r3, r1
    2696:	0016      	movs	r6, r2
    2698:	071b      	lsls	r3, r3, #28
    269a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    269c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    269e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    26a0:	69e3      	ldr	r3, [r4, #28]
    26a2:	075b      	lsls	r3, r3, #29
    26a4:	d4fc      	bmi.n	26a0 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    26a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    26a8:	00002635 	.word	0x00002635
    26ac:	42000800 	.word	0x42000800

000026b0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    26b0:	b570      	push	{r4, r5, r6, lr}
    26b2:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    26b4:	4b0c      	ldr	r3, [pc, #48]	; (26e8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    26b6:	000d      	movs	r5, r1
    26b8:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    26ba:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26bc:	4b0b      	ldr	r3, [pc, #44]	; (26ec <sercomUartInit+0x3c>)
    26be:	02b0      	lsls	r0, r6, #10
    26c0:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26c2:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c4:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26c6:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26ca:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    26cc:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26ce:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d0:	0392      	lsls	r2, r2, #14
    26d2:	4011      	ands	r1, r2
    26d4:	4a07      	ldr	r2, [pc, #28]	; (26f4 <sercomUartInit+0x44>)
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26d6:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d8:	0424      	lsls	r4, r4, #16
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26da:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26dc:	4311      	orrs	r1, r2
    26de:	4023      	ands	r3, r4
    26e0:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    26e2:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    26e4:	bd70      	pop	{r4, r5, r6, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	00002635 	.word	0x00002635
    26ec:	42000800 	.word	0x42000800
    26f0:	ffffb15b 	.word	0xffffb15b
    26f4:	40000006 	.word	0x40000006

000026f8 <spiDataTransfer>:
    26f8:	4b04      	ldr	r3, [pc, #16]	; (270c <spiDataTransfer+0x14>)
    26fa:	0280      	lsls	r0, r0, #10
    26fc:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    26fe:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2700:	7e03      	ldrb	r3, [r0, #24]
    2702:	075b      	lsls	r3, r3, #29
    2704:	d5fc      	bpl.n	2700 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2706:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2708:	b2c0      	uxtb	r0, r0
}
    270a:	4770      	bx	lr
    270c:	42000800 	.word	0x42000800

00002710 <usartDataOut>:
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <usartDataOut+0x14>)
    2712:	0280      	lsls	r0, r0, #10
    2714:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2716:	b289      	uxth	r1, r1
    2718:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    271a:	7e03      	ldrb	r3, [r0, #24]
    271c:	07db      	lsls	r3, r3, #31
    271e:	d5fc      	bpl.n	271a <usartDataOut+0xa>
}
    2720:	4770      	bx	lr
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	42000800 	.word	0x42000800

00002728 <usartDataIn>:
    2728:	4b02      	ldr	r3, [pc, #8]	; (2734 <usartDataIn+0xc>)
    272a:	0280      	lsls	r0, r0, #10
    272c:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    272e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2730:	b2c0      	uxtb	r0, r0
}
    2732:	4770      	bx	lr
    2734:	42000800 	.word	0x42000800

00002738 <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    273a:	4b2f      	ldr	r3, [pc, #188]	; (27f8 <attemptConnection+0xc0>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    273c:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    273e:	4798      	blx	r3
    2740:	2800      	cmp	r0, #0
    2742:	d057      	beq.n	27f4 <attemptConnection+0xbc>

        my_altimeter->myFlightState = flightIdle;
    2744:	2301      	movs	r3, #1

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2746:	4a2d      	ldr	r2, [pc, #180]	; (27fc <attemptConnection+0xc4>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightIdle;
    2748:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    274a:	7e13      	ldrb	r3, [r2, #24]
    274c:	4e2b      	ldr	r6, [pc, #172]	; (27fc <attemptConnection+0xc4>)
    274e:	075b      	lsls	r3, r3, #29
    2750:	d5fb      	bpl.n	274a <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2752:	2003      	movs	r0, #3
    2754:	4d2a      	ldr	r5, [pc, #168]	; (2800 <attemptConnection+0xc8>)
    2756:	47a8      	blx	r5
    2758:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    275a:	2c4c      	cmp	r4, #76	; 0x4c
    275c:	d13c      	bne.n	27d8 <attemptConnection+0xa0>
    275e:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2760:	0020      	movs	r0, r4
    2762:	4b28      	ldr	r3, [pc, #160]	; (2804 <attemptConnection+0xcc>)
    2764:	4798      	blx	r3
    2766:	2800      	cmp	r0, #0
    2768:	d005      	beq.n	2776 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    276a:	0021      	movs	r1, r4
    276c:	3130      	adds	r1, #48	; 0x30
    276e:	b2c9      	uxtb	r1, r1
    2770:	2003      	movs	r0, #3
    2772:	4b25      	ldr	r3, [pc, #148]	; (2808 <attemptConnection+0xd0>)
    2774:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2776:	3401      	adds	r4, #1
    2778:	b2e4      	uxtb	r4, r4
    277a:	2c0b      	cmp	r4, #11
    277c:	d1f0      	bne.n	2760 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    277e:	210f      	movs	r1, #15
    2780:	2003      	movs	r0, #3
    2782:	4c21      	ldr	r4, [pc, #132]	; (2808 <attemptConnection+0xd0>)
    2784:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2786:	7e33      	ldrb	r3, [r6, #24]
    2788:	075b      	lsls	r3, r3, #29
    278a:	d5fc      	bpl.n	2786 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    278c:	2003      	movs	r0, #3
    278e:	47a8      	blx	r5
    2790:	3830      	subs	r0, #48	; 0x30
    2792:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2794:	0028      	movs	r0, r5
    2796:	4b1d      	ldr	r3, [pc, #116]	; (280c <attemptConnection+0xd4>)
    2798:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    279a:	4b1d      	ldr	r3, [pc, #116]	; (2810 <attemptConnection+0xd8>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    279c:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    279e:	0028      	movs	r0, r5
    27a0:	4798      	blx	r3
    27a2:	1e46      	subs	r6, r0, #1
    27a4:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    27a6:	1bf5      	subs	r5, r6, r7
    27a8:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    27aa:	b2e9      	uxtb	r1, r5
    27ac:	2003      	movs	r0, #3
    27ae:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    27b0:	b2a9      	uxth	r1, r5
    27b2:	0a09      	lsrs	r1, r1, #8
    27b4:	2003      	movs	r0, #3
    27b6:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    27b8:	b2f1      	uxtb	r1, r6
    27ba:	2003      	movs	r0, #3
    27bc:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    27be:	0a31      	lsrs	r1, r6, #8
    27c0:	b2c9      	uxtb	r1, r1
    27c2:	2003      	movs	r0, #3
    27c4:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    27c6:	0c31      	lsrs	r1, r6, #16
    27c8:	b2c9      	uxtb	r1, r1
    27ca:	2003      	movs	r0, #3
    27cc:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    27ce:	0031      	movs	r1, r6
    27d0:	0038      	movs	r0, r7
    27d2:	4b10      	ldr	r3, [pc, #64]	; (2814 <attemptConnection+0xdc>)
    27d4:	4798      	blx	r3
    27d6:	e00d      	b.n	27f4 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    27d8:	2845      	cmp	r0, #69	; 0x45
    27da:	d10b      	bne.n	27f4 <attemptConnection+0xbc>
            AT25SFChipErase();
    27dc:	4b0e      	ldr	r3, [pc, #56]	; (2818 <attemptConnection+0xe0>)
    27de:	4798      	blx	r3

            AT25SFHoldTillReady();
    27e0:	4b0e      	ldr	r3, [pc, #56]	; (281c <attemptConnection+0xe4>)
    27e2:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    27e4:	2003      	movs	r0, #3
    27e6:	4b08      	ldr	r3, [pc, #32]	; (2808 <attemptConnection+0xd0>)
    27e8:	0021      	movs	r1, r4
    27ea:	4798      	blx	r3
            beep(400);
    27ec:	20c8      	movs	r0, #200	; 0xc8
    27ee:	4b0c      	ldr	r3, [pc, #48]	; (2820 <attemptConnection+0xe8>)
    27f0:	0040      	lsls	r0, r0, #1
    27f2:	4798      	blx	r3


        }
    }

}
    27f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	00000b5d 	.word	0x00000b5d
    27fc:	42001400 	.word	0x42001400
    2800:	00002729 	.word	0x00002729
    2804:	000020d5 	.word	0x000020d5
    2808:	00002711 	.word	0x00002711
    280c:	00002085 	.word	0x00002085
    2810:	000020ad 	.word	0x000020ad
    2814:	00000b91 	.word	0x00000b91
    2818:	00000221 	.word	0x00000221
    281c:	000001e5 	.word	0x000001e5
    2820:	00000d7d 	.word	0x00000d7d

00002824 <pow>:
    2824:	b5f0      	push	{r4, r5, r6, r7, lr}
    2826:	465f      	mov	r7, fp
    2828:	464d      	mov	r5, r9
    282a:	4656      	mov	r6, sl
    282c:	4644      	mov	r4, r8
    282e:	b4f0      	push	{r4, r5, r6, r7}
    2830:	b091      	sub	sp, #68	; 0x44
    2832:	001f      	movs	r7, r3
    2834:	0004      	movs	r4, r0
    2836:	000d      	movs	r5, r1
    2838:	0016      	movs	r6, r2
    283a:	f000 f9af 	bl	2b9c <__ieee754_pow>
    283e:	4bcf      	ldr	r3, [pc, #828]	; (2b7c <pow+0x358>)
    2840:	9002      	str	r0, [sp, #8]
    2842:	9103      	str	r1, [sp, #12]
    2844:	469b      	mov	fp, r3
    2846:	781b      	ldrb	r3, [r3, #0]
    2848:	b25b      	sxtb	r3, r3
    284a:	4699      	mov	r9, r3
    284c:	3301      	adds	r3, #1
    284e:	d04f      	beq.n	28f0 <pow+0xcc>
    2850:	0032      	movs	r2, r6
    2852:	003b      	movs	r3, r7
    2854:	0030      	movs	r0, r6
    2856:	0039      	movs	r1, r7
    2858:	f003 faa0 	bl	5d9c <__aeabi_dcmpun>
    285c:	9000      	str	r0, [sp, #0]
    285e:	2800      	cmp	r0, #0
    2860:	d146      	bne.n	28f0 <pow+0xcc>
    2862:	0022      	movs	r2, r4
    2864:	002b      	movs	r3, r5
    2866:	0020      	movs	r0, r4
    2868:	0029      	movs	r1, r5
    286a:	f003 fa97 	bl	5d9c <__aeabi_dcmpun>
    286e:	2200      	movs	r2, #0
    2870:	4682      	mov	sl, r0
    2872:	2800      	cmp	r0, #0
    2874:	d134      	bne.n	28e0 <pow+0xbc>
    2876:	2300      	movs	r3, #0
    2878:	0020      	movs	r0, r4
    287a:	0029      	movs	r1, r5
    287c:	f001 f8f2 	bl	3a64 <__aeabi_dcmpeq>
    2880:	2800      	cmp	r0, #0
    2882:	d03a      	beq.n	28fa <pow+0xd6>
    2884:	2200      	movs	r2, #0
    2886:	2300      	movs	r3, #0
    2888:	0030      	movs	r0, r6
    288a:	0039      	movs	r1, r7
    288c:	f001 f8ea 	bl	3a64 <__aeabi_dcmpeq>
    2890:	9005      	str	r0, [sp, #20]
    2892:	2800      	cmp	r0, #0
    2894:	d100      	bne.n	2898 <pow+0x74>
    2896:	e074      	b.n	2982 <pow+0x15e>
    2898:	ab06      	add	r3, sp, #24
    289a:	4698      	mov	r8, r3
    289c:	2301      	movs	r3, #1
    289e:	4642      	mov	r2, r8
    28a0:	9306      	str	r3, [sp, #24]
    28a2:	4bb7      	ldr	r3, [pc, #732]	; (2b80 <pow+0x35c>)
    28a4:	6053      	str	r3, [r2, #4]
    28a6:	4643      	mov	r3, r8
    28a8:	4652      	mov	r2, sl
    28aa:	609c      	str	r4, [r3, #8]
    28ac:	60dd      	str	r5, [r3, #12]
    28ae:	621a      	str	r2, [r3, #32]
    28b0:	611e      	str	r6, [r3, #16]
    28b2:	615f      	str	r7, [r3, #20]
    28b4:	4642      	mov	r2, r8
    28b6:	2300      	movs	r3, #0
    28b8:	2400      	movs	r4, #0
    28ba:	6193      	str	r3, [r2, #24]
    28bc:	61d4      	str	r4, [r2, #28]
    28be:	464b      	mov	r3, r9
    28c0:	2b00      	cmp	r3, #0
    28c2:	d100      	bne.n	28c6 <pow+0xa2>
    28c4:	e094      	b.n	29f0 <pow+0x1cc>
    28c6:	2300      	movs	r3, #0
    28c8:	4cae      	ldr	r4, [pc, #696]	; (2b84 <pow+0x360>)
    28ca:	9300      	str	r3, [sp, #0]
    28cc:	9401      	str	r4, [sp, #4]
    28ce:	9800      	ldr	r0, [sp, #0]
    28d0:	9901      	ldr	r1, [sp, #4]
    28d2:	b011      	add	sp, #68	; 0x44
    28d4:	bc3c      	pop	{r2, r3, r4, r5}
    28d6:	4690      	mov	r8, r2
    28d8:	4699      	mov	r9, r3
    28da:	46a2      	mov	sl, r4
    28dc:	46ab      	mov	fp, r5
    28de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28e0:	2300      	movs	r3, #0
    28e2:	0030      	movs	r0, r6
    28e4:	0039      	movs	r1, r7
    28e6:	f001 f8bd 	bl	3a64 <__aeabi_dcmpeq>
    28ea:	2800      	cmp	r0, #0
    28ec:	d000      	beq.n	28f0 <pow+0xcc>
    28ee:	e0eb      	b.n	2ac8 <pow+0x2a4>
    28f0:	9b02      	ldr	r3, [sp, #8]
    28f2:	9c03      	ldr	r4, [sp, #12]
    28f4:	9300      	str	r3, [sp, #0]
    28f6:	9401      	str	r4, [sp, #4]
    28f8:	e7e9      	b.n	28ce <pow+0xaa>
    28fa:	9802      	ldr	r0, [sp, #8]
    28fc:	9903      	ldr	r1, [sp, #12]
    28fe:	f000 ff7d 	bl	37fc <finite>
    2902:	4681      	mov	r9, r0
    2904:	2800      	cmp	r0, #0
    2906:	d100      	bne.n	290a <pow+0xe6>
    2908:	e086      	b.n	2a18 <pow+0x1f4>
    290a:	9802      	ldr	r0, [sp, #8]
    290c:	9903      	ldr	r1, [sp, #12]
    290e:	2200      	movs	r2, #0
    2910:	2300      	movs	r3, #0
    2912:	f001 f8a7 	bl	3a64 <__aeabi_dcmpeq>
    2916:	2800      	cmp	r0, #0
    2918:	d0ea      	beq.n	28f0 <pow+0xcc>
    291a:	0020      	movs	r0, r4
    291c:	0029      	movs	r1, r5
    291e:	f000 ff6d 	bl	37fc <finite>
    2922:	9a02      	ldr	r2, [sp, #8]
    2924:	9b03      	ldr	r3, [sp, #12]
    2926:	9200      	str	r2, [sp, #0]
    2928:	9301      	str	r3, [sp, #4]
    292a:	2800      	cmp	r0, #0
    292c:	d0cf      	beq.n	28ce <pow+0xaa>
    292e:	0030      	movs	r0, r6
    2930:	0039      	movs	r1, r7
    2932:	f000 ff63 	bl	37fc <finite>
    2936:	9a02      	ldr	r2, [sp, #8]
    2938:	9b03      	ldr	r3, [sp, #12]
    293a:	9200      	str	r2, [sp, #0]
    293c:	9301      	str	r3, [sp, #4]
    293e:	2800      	cmp	r0, #0
    2940:	d0c5      	beq.n	28ce <pow+0xaa>
    2942:	ab06      	add	r3, sp, #24
    2944:	4698      	mov	r8, r3
    2946:	2304      	movs	r3, #4
    2948:	4642      	mov	r2, r8
    294a:	9306      	str	r3, [sp, #24]
    294c:	4b8c      	ldr	r3, [pc, #560]	; (2b80 <pow+0x35c>)
    294e:	6094      	str	r4, [r2, #8]
    2950:	60d5      	str	r5, [r2, #12]
    2952:	6053      	str	r3, [r2, #4]
    2954:	2300      	movs	r3, #0
    2956:	2400      	movs	r4, #0
    2958:	6213      	str	r3, [r2, #32]
    295a:	2300      	movs	r3, #0
    295c:	6193      	str	r3, [r2, #24]
    295e:	61d4      	str	r4, [r2, #28]
    2960:	465b      	mov	r3, fp
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	6116      	str	r6, [r2, #16]
    2966:	6157      	str	r7, [r2, #20]
    2968:	b25b      	sxtb	r3, r3
    296a:	2b02      	cmp	r3, #2
    296c:	d004      	beq.n	2978 <pow+0x154>
    296e:	4640      	mov	r0, r8
    2970:	f000 ff4e 	bl	3810 <matherr>
    2974:	2800      	cmp	r0, #0
    2976:	d140      	bne.n	29fa <pow+0x1d6>
    2978:	f003 fc6a 	bl	6250 <__errno>
    297c:	2322      	movs	r3, #34	; 0x22
    297e:	6003      	str	r3, [r0, #0]
    2980:	e03b      	b.n	29fa <pow+0x1d6>
    2982:	0030      	movs	r0, r6
    2984:	0039      	movs	r1, r7
    2986:	f000 ff39 	bl	37fc <finite>
    298a:	9a02      	ldr	r2, [sp, #8]
    298c:	9b03      	ldr	r3, [sp, #12]
    298e:	9200      	str	r2, [sp, #0]
    2990:	9301      	str	r3, [sp, #4]
    2992:	2800      	cmp	r0, #0
    2994:	d09b      	beq.n	28ce <pow+0xaa>
    2996:	2200      	movs	r2, #0
    2998:	2300      	movs	r3, #0
    299a:	0030      	movs	r0, r6
    299c:	0039      	movs	r1, r7
    299e:	f001 f867 	bl	3a70 <__aeabi_dcmplt>
    29a2:	2800      	cmp	r0, #0
    29a4:	d100      	bne.n	29a8 <pow+0x184>
    29a6:	e792      	b.n	28ce <pow+0xaa>
    29a8:	ab06      	add	r3, sp, #24
    29aa:	4698      	mov	r8, r3
    29ac:	2301      	movs	r3, #1
    29ae:	4642      	mov	r2, r8
    29b0:	9306      	str	r3, [sp, #24]
    29b2:	4b73      	ldr	r3, [pc, #460]	; (2b80 <pow+0x35c>)
    29b4:	6053      	str	r3, [r2, #4]
    29b6:	4643      	mov	r3, r8
    29b8:	9a05      	ldr	r2, [sp, #20]
    29ba:	609c      	str	r4, [r3, #8]
    29bc:	60dd      	str	r5, [r3, #12]
    29be:	621a      	str	r2, [r3, #32]
    29c0:	611e      	str	r6, [r3, #16]
    29c2:	615f      	str	r7, [r3, #20]
    29c4:	465b      	mov	r3, fp
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	b25b      	sxtb	r3, r3
    29ca:	2b00      	cmp	r3, #0
    29cc:	d00b      	beq.n	29e6 <pow+0x1c2>
    29ce:	2000      	movs	r0, #0
    29d0:	4642      	mov	r2, r8
    29d2:	496d      	ldr	r1, [pc, #436]	; (2b88 <pow+0x364>)
    29d4:	6190      	str	r0, [r2, #24]
    29d6:	61d1      	str	r1, [r2, #28]
    29d8:	2b02      	cmp	r3, #2
    29da:	d109      	bne.n	29f0 <pow+0x1cc>
    29dc:	f003 fc38 	bl	6250 <__errno>
    29e0:	2321      	movs	r3, #33	; 0x21
    29e2:	6003      	str	r3, [r0, #0]
    29e4:	e009      	b.n	29fa <pow+0x1d6>
    29e6:	4642      	mov	r2, r8
    29e8:	2300      	movs	r3, #0
    29ea:	2400      	movs	r4, #0
    29ec:	6193      	str	r3, [r2, #24]
    29ee:	61d4      	str	r4, [r2, #28]
    29f0:	4640      	mov	r0, r8
    29f2:	f000 ff0d 	bl	3810 <matherr>
    29f6:	2800      	cmp	r0, #0
    29f8:	d0f0      	beq.n	29dc <pow+0x1b8>
    29fa:	4643      	mov	r3, r8
    29fc:	6a1b      	ldr	r3, [r3, #32]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d004      	beq.n	2a0c <pow+0x1e8>
    2a02:	f003 fc25 	bl	6250 <__errno>
    2a06:	4643      	mov	r3, r8
    2a08:	6a1b      	ldr	r3, [r3, #32]
    2a0a:	6003      	str	r3, [r0, #0]
    2a0c:	4643      	mov	r3, r8
    2a0e:	69dc      	ldr	r4, [r3, #28]
    2a10:	699b      	ldr	r3, [r3, #24]
    2a12:	9300      	str	r3, [sp, #0]
    2a14:	9401      	str	r4, [sp, #4]
    2a16:	e75a      	b.n	28ce <pow+0xaa>
    2a18:	0020      	movs	r0, r4
    2a1a:	0029      	movs	r1, r5
    2a1c:	f000 feee 	bl	37fc <finite>
    2a20:	2800      	cmp	r0, #0
    2a22:	d100      	bne.n	2a26 <pow+0x202>
    2a24:	e771      	b.n	290a <pow+0xe6>
    2a26:	0030      	movs	r0, r6
    2a28:	0039      	movs	r1, r7
    2a2a:	f000 fee7 	bl	37fc <finite>
    2a2e:	2800      	cmp	r0, #0
    2a30:	d100      	bne.n	2a34 <pow+0x210>
    2a32:	e76a      	b.n	290a <pow+0xe6>
    2a34:	9802      	ldr	r0, [sp, #8]
    2a36:	9903      	ldr	r1, [sp, #12]
    2a38:	000b      	movs	r3, r1
    2a3a:	0002      	movs	r2, r0
    2a3c:	f003 f9ae 	bl	5d9c <__aeabi_dcmpun>
    2a40:	ab06      	add	r3, sp, #24
    2a42:	4698      	mov	r8, r3
    2a44:	2800      	cmp	r0, #0
    2a46:	d17a      	bne.n	2b3e <pow+0x31a>
    2a48:	2303      	movs	r3, #3
    2a4a:	4642      	mov	r2, r8
    2a4c:	9306      	str	r3, [sp, #24]
    2a4e:	4b4c      	ldr	r3, [pc, #304]	; (2b80 <pow+0x35c>)
    2a50:	6210      	str	r0, [r2, #32]
    2a52:	6053      	str	r3, [r2, #4]
    2a54:	465b      	mov	r3, fp
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	6094      	str	r4, [r2, #8]
    2a5a:	60d5      	str	r5, [r2, #12]
    2a5c:	b25b      	sxtb	r3, r3
    2a5e:	6116      	str	r6, [r2, #16]
    2a60:	6157      	str	r7, [r2, #20]
    2a62:	4699      	mov	r9, r3
    2a64:	2b00      	cmp	r3, #0
    2a66:	d148      	bne.n	2afa <pow+0x2d6>
    2a68:	22e0      	movs	r2, #224	; 0xe0
    2a6a:	4641      	mov	r1, r8
    2a6c:	4b47      	ldr	r3, [pc, #284]	; (2b8c <pow+0x368>)
    2a6e:	0612      	lsls	r2, r2, #24
    2a70:	618a      	str	r2, [r1, #24]
    2a72:	61cb      	str	r3, [r1, #28]
    2a74:	0020      	movs	r0, r4
    2a76:	2200      	movs	r2, #0
    2a78:	2300      	movs	r3, #0
    2a7a:	0029      	movs	r1, r5
    2a7c:	f000 fff8 	bl	3a70 <__aeabi_dcmplt>
    2a80:	2800      	cmp	r0, #0
    2a82:	d100      	bne.n	2a86 <pow+0x262>
    2a84:	e773      	b.n	296e <pow+0x14a>
    2a86:	2200      	movs	r2, #0
    2a88:	4b41      	ldr	r3, [pc, #260]	; (2b90 <pow+0x36c>)
    2a8a:	0030      	movs	r0, r6
    2a8c:	0039      	movs	r1, r7
    2a8e:	f002 fbb7 	bl	5200 <__aeabi_dmul>
    2a92:	0004      	movs	r4, r0
    2a94:	000d      	movs	r5, r1
    2a96:	f000 fec3 	bl	3820 <rint>
    2a9a:	0002      	movs	r2, r0
    2a9c:	000b      	movs	r3, r1
    2a9e:	0020      	movs	r0, r4
    2aa0:	0029      	movs	r1, r5
    2aa2:	f000 ffdf 	bl	3a64 <__aeabi_dcmpeq>
    2aa6:	2800      	cmp	r0, #0
    2aa8:	d105      	bne.n	2ab6 <pow+0x292>
    2aaa:	22e0      	movs	r2, #224	; 0xe0
    2aac:	4b39      	ldr	r3, [pc, #228]	; (2b94 <pow+0x370>)
    2aae:	0612      	lsls	r2, r2, #24
    2ab0:	4641      	mov	r1, r8
    2ab2:	618a      	str	r2, [r1, #24]
    2ab4:	61cb      	str	r3, [r1, #28]
    2ab6:	465b      	mov	r3, fp
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	b25b      	sxtb	r3, r3
    2abc:	4699      	mov	r9, r3
    2abe:	464b      	mov	r3, r9
    2ac0:	2b02      	cmp	r3, #2
    2ac2:	d000      	beq.n	2ac6 <pow+0x2a2>
    2ac4:	e753      	b.n	296e <pow+0x14a>
    2ac6:	e757      	b.n	2978 <pow+0x154>
    2ac8:	ab06      	add	r3, sp, #24
    2aca:	4698      	mov	r8, r3
    2acc:	2301      	movs	r3, #1
    2ace:	4642      	mov	r2, r8
    2ad0:	9306      	str	r3, [sp, #24]
    2ad2:	4b2b      	ldr	r3, [pc, #172]	; (2b80 <pow+0x35c>)
    2ad4:	6053      	str	r3, [r2, #4]
    2ad6:	4643      	mov	r3, r8
    2ad8:	609c      	str	r4, [r3, #8]
    2ada:	60dd      	str	r5, [r3, #12]
    2adc:	2400      	movs	r4, #0
    2ade:	9a00      	ldr	r2, [sp, #0]
    2ae0:	4d28      	ldr	r5, [pc, #160]	; (2b84 <pow+0x360>)
    2ae2:	621a      	str	r2, [r3, #32]
    2ae4:	611e      	str	r6, [r3, #16]
    2ae6:	615f      	str	r7, [r3, #20]
    2ae8:	619c      	str	r4, [r3, #24]
    2aea:	61dd      	str	r5, [r3, #28]
    2aec:	464b      	mov	r3, r9
    2aee:	9400      	str	r4, [sp, #0]
    2af0:	9501      	str	r5, [sp, #4]
    2af2:	2b02      	cmp	r3, #2
    2af4:	d000      	beq.n	2af8 <pow+0x2d4>
    2af6:	e77b      	b.n	29f0 <pow+0x1cc>
    2af8:	e6e9      	b.n	28ce <pow+0xaa>
    2afa:	2200      	movs	r2, #0
    2afc:	4641      	mov	r1, r8
    2afe:	4b26      	ldr	r3, [pc, #152]	; (2b98 <pow+0x374>)
    2b00:	0020      	movs	r0, r4
    2b02:	618a      	str	r2, [r1, #24]
    2b04:	61cb      	str	r3, [r1, #28]
    2b06:	2200      	movs	r2, #0
    2b08:	2300      	movs	r3, #0
    2b0a:	0029      	movs	r1, r5
    2b0c:	f000 ffb0 	bl	3a70 <__aeabi_dcmplt>
    2b10:	2800      	cmp	r0, #0
    2b12:	d0d4      	beq.n	2abe <pow+0x29a>
    2b14:	2200      	movs	r2, #0
    2b16:	4b1e      	ldr	r3, [pc, #120]	; (2b90 <pow+0x36c>)
    2b18:	0030      	movs	r0, r6
    2b1a:	0039      	movs	r1, r7
    2b1c:	f002 fb70 	bl	5200 <__aeabi_dmul>
    2b20:	0004      	movs	r4, r0
    2b22:	000d      	movs	r5, r1
    2b24:	f000 fe7c 	bl	3820 <rint>
    2b28:	0002      	movs	r2, r0
    2b2a:	000b      	movs	r3, r1
    2b2c:	0020      	movs	r0, r4
    2b2e:	0029      	movs	r1, r5
    2b30:	f000 ff98 	bl	3a64 <__aeabi_dcmpeq>
    2b34:	2800      	cmp	r0, #0
    2b36:	d1be      	bne.n	2ab6 <pow+0x292>
    2b38:	2200      	movs	r2, #0
    2b3a:	4b13      	ldr	r3, [pc, #76]	; (2b88 <pow+0x364>)
    2b3c:	e7b8      	b.n	2ab0 <pow+0x28c>
    2b3e:	2301      	movs	r3, #1
    2b40:	4642      	mov	r2, r8
    2b42:	9306      	str	r3, [sp, #24]
    2b44:	4b0e      	ldr	r3, [pc, #56]	; (2b80 <pow+0x35c>)
    2b46:	6053      	str	r3, [r2, #4]
    2b48:	4643      	mov	r3, r8
    2b4a:	464a      	mov	r2, r9
    2b4c:	609c      	str	r4, [r3, #8]
    2b4e:	60dd      	str	r5, [r3, #12]
    2b50:	621a      	str	r2, [r3, #32]
    2b52:	611e      	str	r6, [r3, #16]
    2b54:	615f      	str	r7, [r3, #20]
    2b56:	2400      	movs	r4, #0
    2b58:	465b      	mov	r3, fp
    2b5a:	571c      	ldrsb	r4, [r3, r4]
    2b5c:	2c00      	cmp	r4, #0
    2b5e:	d100      	bne.n	2b62 <pow+0x33e>
    2b60:	e741      	b.n	29e6 <pow+0x1c2>
    2b62:	2300      	movs	r3, #0
    2b64:	2200      	movs	r2, #0
    2b66:	0019      	movs	r1, r3
    2b68:	0010      	movs	r0, r2
    2b6a:	f001 ff25 	bl	49b8 <__aeabi_ddiv>
    2b6e:	4643      	mov	r3, r8
    2b70:	6198      	str	r0, [r3, #24]
    2b72:	61d9      	str	r1, [r3, #28]
    2b74:	2c02      	cmp	r4, #2
    2b76:	d100      	bne.n	2b7a <pow+0x356>
    2b78:	e730      	b.n	29dc <pow+0x1b8>
    2b7a:	e739      	b.n	29f0 <pow+0x1cc>
    2b7c:	20000070 	.word	0x20000070
    2b80:	000065cc 	.word	0x000065cc
    2b84:	3ff00000 	.word	0x3ff00000
    2b88:	fff00000 	.word	0xfff00000
    2b8c:	47efffff 	.word	0x47efffff
    2b90:	3fe00000 	.word	0x3fe00000
    2b94:	c7efffff 	.word	0xc7efffff
    2b98:	7ff00000 	.word	0x7ff00000

00002b9c <__ieee754_pow>:
    2b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9e:	4656      	mov	r6, sl
    2ba0:	464d      	mov	r5, r9
    2ba2:	4644      	mov	r4, r8
    2ba4:	465f      	mov	r7, fp
    2ba6:	b4f0      	push	{r4, r5, r6, r7}
    2ba8:	001c      	movs	r4, r3
    2baa:	0013      	movs	r3, r2
    2bac:	0067      	lsls	r7, r4, #1
    2bae:	b091      	sub	sp, #68	; 0x44
    2bb0:	087f      	lsrs	r7, r7, #1
    2bb2:	9300      	str	r3, [sp, #0]
    2bb4:	9401      	str	r4, [sp, #4]
    2bb6:	0006      	movs	r6, r0
    2bb8:	000d      	movs	r5, r1
    2bba:	4680      	mov	r8, r0
    2bbc:	4689      	mov	r9, r1
    2bbe:	46a2      	mov	sl, r4
    2bc0:	433b      	orrs	r3, r7
    2bc2:	d032      	beq.n	2c2a <__ieee754_pow+0x8e>
    2bc4:	4b6e      	ldr	r3, [pc, #440]	; (2d80 <__ieee754_pow+0x1e4>)
    2bc6:	006c      	lsls	r4, r5, #1
    2bc8:	0864      	lsrs	r4, r4, #1
    2bca:	429c      	cmp	r4, r3
    2bcc:	dc29      	bgt.n	2c22 <__ieee754_pow+0x86>
    2bce:	d026      	beq.n	2c1e <__ieee754_pow+0x82>
    2bd0:	429f      	cmp	r7, r3
    2bd2:	dc26      	bgt.n	2c22 <__ieee754_pow+0x86>
    2bd4:	4b6a      	ldr	r3, [pc, #424]	; (2d80 <__ieee754_pow+0x1e4>)
    2bd6:	429f      	cmp	r7, r3
    2bd8:	d100      	bne.n	2bdc <__ieee754_pow+0x40>
    2bda:	e089      	b.n	2cf0 <__ieee754_pow+0x154>
    2bdc:	2300      	movs	r3, #0
    2bde:	469b      	mov	fp, r3
    2be0:	464b      	mov	r3, r9
    2be2:	2b00      	cmp	r3, #0
    2be4:	da00      	bge.n	2be8 <__ieee754_pow+0x4c>
    2be6:	e087      	b.n	2cf8 <__ieee754_pow+0x15c>
    2be8:	2a00      	cmp	r2, #0
    2bea:	d12f      	bne.n	2c4c <__ieee754_pow+0xb0>
    2bec:	4b64      	ldr	r3, [pc, #400]	; (2d80 <__ieee754_pow+0x1e4>)
    2bee:	429f      	cmp	r7, r3
    2bf0:	d100      	bne.n	2bf4 <__ieee754_pow+0x58>
    2bf2:	e09f      	b.n	2d34 <__ieee754_pow+0x198>
    2bf4:	4b63      	ldr	r3, [pc, #396]	; (2d84 <__ieee754_pow+0x1e8>)
    2bf6:	429f      	cmp	r7, r3
    2bf8:	d05d      	beq.n	2cb6 <__ieee754_pow+0x11a>
    2bfa:	2380      	movs	r3, #128	; 0x80
    2bfc:	05db      	lsls	r3, r3, #23
    2bfe:	459a      	cmp	sl, r3
    2c00:	d101      	bne.n	2c06 <__ieee754_pow+0x6a>
    2c02:	f000 fbc1 	bl	3388 <__ieee754_pow+0x7ec>
    2c06:	4b60      	ldr	r3, [pc, #384]	; (2d88 <__ieee754_pow+0x1ec>)
    2c08:	459a      	cmp	sl, r3
    2c0a:	d11f      	bne.n	2c4c <__ieee754_pow+0xb0>
    2c0c:	464b      	mov	r3, r9
    2c0e:	2b00      	cmp	r3, #0
    2c10:	db1c      	blt.n	2c4c <__ieee754_pow+0xb0>
    2c12:	0030      	movs	r0, r6
    2c14:	0029      	movs	r1, r5
    2c16:	f000 fcf7 	bl	3608 <__ieee754_sqrt>
    2c1a:	0006      	movs	r6, r0
    2c1c:	e007      	b.n	2c2e <__ieee754_pow+0x92>
    2c1e:	2800      	cmp	r0, #0
    2c20:	d00d      	beq.n	2c3e <__ieee754_pow+0xa2>
    2c22:	4b5a      	ldr	r3, [pc, #360]	; (2d8c <__ieee754_pow+0x1f0>)
    2c24:	18e0      	adds	r0, r4, r3
    2c26:	4330      	orrs	r0, r6
    2c28:	d10b      	bne.n	2c42 <__ieee754_pow+0xa6>
    2c2a:	2600      	movs	r6, #0
    2c2c:	4955      	ldr	r1, [pc, #340]	; (2d84 <__ieee754_pow+0x1e8>)
    2c2e:	0030      	movs	r0, r6
    2c30:	b011      	add	sp, #68	; 0x44
    2c32:	bc3c      	pop	{r2, r3, r4, r5}
    2c34:	4690      	mov	r8, r2
    2c36:	4699      	mov	r9, r3
    2c38:	46a2      	mov	sl, r4
    2c3a:	46ab      	mov	fp, r5
    2c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c3e:	42a7      	cmp	r7, r4
    2c40:	ddc8      	ble.n	2bd4 <__ieee754_pow+0x38>
    2c42:	4853      	ldr	r0, [pc, #332]	; (2d90 <__ieee754_pow+0x1f4>)
    2c44:	f000 fde6 	bl	3814 <nan>
    2c48:	0006      	movs	r6, r0
    2c4a:	e7f0      	b.n	2c2e <__ieee754_pow+0x92>
    2c4c:	0030      	movs	r0, r6
    2c4e:	0029      	movs	r1, r5
    2c50:	f000 fdd0 	bl	37f4 <fabs>
    2c54:	4643      	mov	r3, r8
    2c56:	2b00      	cmp	r3, #0
    2c58:	d01d      	beq.n	2c96 <__ieee754_pow+0xfa>
    2c5a:	0feb      	lsrs	r3, r5, #31
    2c5c:	3b01      	subs	r3, #1
    2c5e:	4698      	mov	r8, r3
    2c60:	465b      	mov	r3, fp
    2c62:	4642      	mov	r2, r8
    2c64:	4313      	orrs	r3, r2
    2c66:	d079      	beq.n	2d5c <__ieee754_pow+0x1c0>
    2c68:	4b4a      	ldr	r3, [pc, #296]	; (2d94 <__ieee754_pow+0x1f8>)
    2c6a:	429f      	cmp	r7, r3
    2c6c:	dc00      	bgt.n	2c70 <__ieee754_pow+0xd4>
    2c6e:	e09f      	b.n	2db0 <__ieee754_pow+0x214>
    2c70:	4b49      	ldr	r3, [pc, #292]	; (2d98 <__ieee754_pow+0x1fc>)
    2c72:	429f      	cmp	r7, r3
    2c74:	dc01      	bgt.n	2c7a <__ieee754_pow+0xde>
    2c76:	f000 fbce 	bl	3416 <__ieee754_pow+0x87a>
    2c7a:	4b48      	ldr	r3, [pc, #288]	; (2d9c <__ieee754_pow+0x200>)
    2c7c:	429c      	cmp	r4, r3
    2c7e:	dd79      	ble.n	2d74 <__ieee754_pow+0x1d8>
    2c80:	4653      	mov	r3, sl
    2c82:	2b00      	cmp	r3, #0
    2c84:	dd79      	ble.n	2d7a <__ieee754_pow+0x1de>
    2c86:	4a46      	ldr	r2, [pc, #280]	; (2da0 <__ieee754_pow+0x204>)
    2c88:	4b46      	ldr	r3, [pc, #280]	; (2da4 <__ieee754_pow+0x208>)
    2c8a:	0010      	movs	r0, r2
    2c8c:	0019      	movs	r1, r3
    2c8e:	f002 fab7 	bl	5200 <__aeabi_dmul>
    2c92:	0006      	movs	r6, r0
    2c94:	e7cb      	b.n	2c2e <__ieee754_pow+0x92>
    2c96:	2c00      	cmp	r4, #0
    2c98:	d004      	beq.n	2ca4 <__ieee754_pow+0x108>
    2c9a:	4a3a      	ldr	r2, [pc, #232]	; (2d84 <__ieee754_pow+0x1e8>)
    2c9c:	00ab      	lsls	r3, r5, #2
    2c9e:	089b      	lsrs	r3, r3, #2
    2ca0:	4293      	cmp	r3, r2
    2ca2:	d1da      	bne.n	2c5a <__ieee754_pow+0xbe>
    2ca4:	4653      	mov	r3, sl
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	da00      	bge.n	2cac <__ieee754_pow+0x110>
    2caa:	e3ad      	b.n	3408 <__ieee754_pow+0x86c>
    2cac:	464b      	mov	r3, r9
    2cae:	2b00      	cmp	r3, #0
    2cb0:	db0d      	blt.n	2cce <__ieee754_pow+0x132>
    2cb2:	0006      	movs	r6, r0
    2cb4:	e7bb      	b.n	2c2e <__ieee754_pow+0x92>
    2cb6:	4653      	mov	r3, sl
    2cb8:	0029      	movs	r1, r5
    2cba:	2b00      	cmp	r3, #0
    2cbc:	dab7      	bge.n	2c2e <__ieee754_pow+0x92>
    2cbe:	0032      	movs	r2, r6
    2cc0:	002b      	movs	r3, r5
    2cc2:	2000      	movs	r0, #0
    2cc4:	492f      	ldr	r1, [pc, #188]	; (2d84 <__ieee754_pow+0x1e8>)
    2cc6:	f001 fe77 	bl	49b8 <__aeabi_ddiv>
    2cca:	0006      	movs	r6, r0
    2ccc:	e7af      	b.n	2c2e <__ieee754_pow+0x92>
    2cce:	4b2f      	ldr	r3, [pc, #188]	; (2d8c <__ieee754_pow+0x1f0>)
    2cd0:	469c      	mov	ip, r3
    2cd2:	465b      	mov	r3, fp
    2cd4:	4464      	add	r4, ip
    2cd6:	431c      	orrs	r4, r3
    2cd8:	d101      	bne.n	2cde <__ieee754_pow+0x142>
    2cda:	f000 fc2b 	bl	3534 <__ieee754_pow+0x998>
    2cde:	465b      	mov	r3, fp
    2ce0:	0006      	movs	r6, r0
    2ce2:	2b01      	cmp	r3, #1
    2ce4:	d1a3      	bne.n	2c2e <__ieee754_pow+0x92>
    2ce6:	2380      	movs	r3, #128	; 0x80
    2ce8:	061b      	lsls	r3, r3, #24
    2cea:	469c      	mov	ip, r3
    2cec:	4461      	add	r1, ip
    2cee:	e79e      	b.n	2c2e <__ieee754_pow+0x92>
    2cf0:	2a00      	cmp	r2, #0
    2cf2:	d100      	bne.n	2cf6 <__ieee754_pow+0x15a>
    2cf4:	e772      	b.n	2bdc <__ieee754_pow+0x40>
    2cf6:	e794      	b.n	2c22 <__ieee754_pow+0x86>
    2cf8:	4b2b      	ldr	r3, [pc, #172]	; (2da8 <__ieee754_pow+0x20c>)
    2cfa:	429f      	cmp	r7, r3
    2cfc:	dc2b      	bgt.n	2d56 <__ieee754_pow+0x1ba>
    2cfe:	4b27      	ldr	r3, [pc, #156]	; (2d9c <__ieee754_pow+0x200>)
    2d00:	429f      	cmp	r7, r3
    2d02:	dc00      	bgt.n	2d06 <__ieee754_pow+0x16a>
    2d04:	e770      	b.n	2be8 <__ieee754_pow+0x4c>
    2d06:	4929      	ldr	r1, [pc, #164]	; (2dac <__ieee754_pow+0x210>)
    2d08:	153b      	asrs	r3, r7, #20
    2d0a:	468c      	mov	ip, r1
    2d0c:	4463      	add	r3, ip
    2d0e:	2b14      	cmp	r3, #20
    2d10:	dc01      	bgt.n	2d16 <__ieee754_pow+0x17a>
    2d12:	f000 fbf2 	bl	34fa <__ieee754_pow+0x95e>
    2d16:	2134      	movs	r1, #52	; 0x34
    2d18:	1acb      	subs	r3, r1, r3
    2d1a:	9900      	ldr	r1, [sp, #0]
    2d1c:	40d9      	lsrs	r1, r3
    2d1e:	0008      	movs	r0, r1
    2d20:	4098      	lsls	r0, r3
    2d22:	4282      	cmp	r2, r0
    2d24:	d000      	beq.n	2d28 <__ieee754_pow+0x18c>
    2d26:	e75f      	b.n	2be8 <__ieee754_pow+0x4c>
    2d28:	2301      	movs	r3, #1
    2d2a:	4019      	ands	r1, r3
    2d2c:	3301      	adds	r3, #1
    2d2e:	1a5b      	subs	r3, r3, r1
    2d30:	469b      	mov	fp, r3
    2d32:	e759      	b.n	2be8 <__ieee754_pow+0x4c>
    2d34:	4b15      	ldr	r3, [pc, #84]	; (2d8c <__ieee754_pow+0x1f0>)
    2d36:	18e0      	adds	r0, r4, r3
    2d38:	4306      	orrs	r6, r0
    2d3a:	d100      	bne.n	2d3e <__ieee754_pow+0x1a2>
    2d3c:	e775      	b.n	2c2a <__ieee754_pow+0x8e>
    2d3e:	4b17      	ldr	r3, [pc, #92]	; (2d9c <__ieee754_pow+0x200>)
    2d40:	429c      	cmp	r4, r3
    2d42:	dc00      	bgt.n	2d46 <__ieee754_pow+0x1aa>
    2d44:	e351      	b.n	33ea <__ieee754_pow+0x84e>
    2d46:	4653      	mov	r3, sl
    2d48:	2b00      	cmp	r3, #0
    2d4a:	db16      	blt.n	2d7a <__ieee754_pow+0x1de>
    2d4c:	9b00      	ldr	r3, [sp, #0]
    2d4e:	9c01      	ldr	r4, [sp, #4]
    2d50:	001e      	movs	r6, r3
    2d52:	0021      	movs	r1, r4
    2d54:	e76b      	b.n	2c2e <__ieee754_pow+0x92>
    2d56:	2302      	movs	r3, #2
    2d58:	469b      	mov	fp, r3
    2d5a:	e745      	b.n	2be8 <__ieee754_pow+0x4c>
    2d5c:	0032      	movs	r2, r6
    2d5e:	002b      	movs	r3, r5
    2d60:	0030      	movs	r0, r6
    2d62:	0029      	movs	r1, r5
    2d64:	f002 fcc6 	bl	56f4 <__aeabi_dsub>
    2d68:	0002      	movs	r2, r0
    2d6a:	000b      	movs	r3, r1
    2d6c:	f001 fe24 	bl	49b8 <__aeabi_ddiv>
    2d70:	0006      	movs	r6, r0
    2d72:	e75c      	b.n	2c2e <__ieee754_pow+0x92>
    2d74:	4653      	mov	r3, sl
    2d76:	2b00      	cmp	r3, #0
    2d78:	db85      	blt.n	2c86 <__ieee754_pow+0xea>
    2d7a:	2600      	movs	r6, #0
    2d7c:	2100      	movs	r1, #0
    2d7e:	e756      	b.n	2c2e <__ieee754_pow+0x92>
    2d80:	7ff00000 	.word	0x7ff00000
    2d84:	3ff00000 	.word	0x3ff00000
    2d88:	3fe00000 	.word	0x3fe00000
    2d8c:	c0100000 	.word	0xc0100000
    2d90:	000065d0 	.word	0x000065d0
    2d94:	41e00000 	.word	0x41e00000
    2d98:	43f00000 	.word	0x43f00000
    2d9c:	3fefffff 	.word	0x3fefffff
    2da0:	8800759c 	.word	0x8800759c
    2da4:	7e37e43c 	.word	0x7e37e43c
    2da8:	433fffff 	.word	0x433fffff
    2dac:	fffffc01 	.word	0xfffffc01
    2db0:	4be8      	ldr	r3, [pc, #928]	; (3154 <__ieee754_pow+0x5b8>)
    2db2:	2200      	movs	r2, #0
    2db4:	429c      	cmp	r4, r3
    2db6:	dc06      	bgt.n	2dc6 <__ieee754_pow+0x22a>
    2db8:	2200      	movs	r2, #0
    2dba:	4be7      	ldr	r3, [pc, #924]	; (3158 <__ieee754_pow+0x5bc>)
    2dbc:	f002 fa20 	bl	5200 <__aeabi_dmul>
    2dc0:	2235      	movs	r2, #53	; 0x35
    2dc2:	000c      	movs	r4, r1
    2dc4:	4252      	negs	r2, r2
    2dc6:	4de5      	ldr	r5, [pc, #916]	; (315c <__ieee754_pow+0x5c0>)
    2dc8:	1523      	asrs	r3, r4, #20
    2dca:	46ac      	mov	ip, r5
    2dcc:	4463      	add	r3, ip
    2dce:	4699      	mov	r9, r3
    2dd0:	0324      	lsls	r4, r4, #12
    2dd2:	4de3      	ldr	r5, [pc, #908]	; (3160 <__ieee754_pow+0x5c4>)
    2dd4:	4be3      	ldr	r3, [pc, #908]	; (3164 <__ieee754_pow+0x5c8>)
    2dd6:	0b24      	lsrs	r4, r4, #12
    2dd8:	4491      	add	r9, r2
    2dda:	4325      	orrs	r5, r4
    2ddc:	429c      	cmp	r4, r3
    2dde:	dd09      	ble.n	2df4 <__ieee754_pow+0x258>
    2de0:	4be1      	ldr	r3, [pc, #900]	; (3168 <__ieee754_pow+0x5cc>)
    2de2:	429c      	cmp	r4, r3
    2de4:	dc00      	bgt.n	2de8 <__ieee754_pow+0x24c>
    2de6:	e3a9      	b.n	353c <__ieee754_pow+0x9a0>
    2de8:	2301      	movs	r3, #1
    2dea:	469c      	mov	ip, r3
    2dec:	4bdf      	ldr	r3, [pc, #892]	; (316c <__ieee754_pow+0x5d0>)
    2dee:	44e1      	add	r9, ip
    2df0:	469c      	mov	ip, r3
    2df2:	4465      	add	r5, ip
    2df4:	2300      	movs	r3, #0
    2df6:	2400      	movs	r4, #0
    2df8:	2200      	movs	r2, #0
    2dfa:	9308      	str	r3, [sp, #32]
    2dfc:	9409      	str	r4, [sp, #36]	; 0x24
    2dfe:	930c      	str	r3, [sp, #48]	; 0x30
    2e00:	940d      	str	r4, [sp, #52]	; 0x34
    2e02:	2400      	movs	r4, #0
    2e04:	4bd6      	ldr	r3, [pc, #856]	; (3160 <__ieee754_pow+0x5c4>)
    2e06:	9206      	str	r2, [sp, #24]
    2e08:	9307      	str	r3, [sp, #28]
    2e0a:	9a06      	ldr	r2, [sp, #24]
    2e0c:	9b07      	ldr	r3, [sp, #28]
    2e0e:	0029      	movs	r1, r5
    2e10:	900a      	str	r0, [sp, #40]	; 0x28
    2e12:	910b      	str	r1, [sp, #44]	; 0x2c
    2e14:	f002 fc6e 	bl	56f4 <__aeabi_dsub>
    2e18:	9a06      	ldr	r2, [sp, #24]
    2e1a:	9b07      	ldr	r3, [sp, #28]
    2e1c:	0006      	movs	r6, r0
    2e1e:	000f      	movs	r7, r1
    2e20:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e24:	f001 fa9c 	bl	4360 <__aeabi_dadd>
    2e28:	0002      	movs	r2, r0
    2e2a:	000b      	movs	r3, r1
    2e2c:	2000      	movs	r0, #0
    2e2e:	49cc      	ldr	r1, [pc, #816]	; (3160 <__ieee754_pow+0x5c4>)
    2e30:	f001 fdc2 	bl	49b8 <__aeabi_ddiv>
    2e34:	000a      	movs	r2, r1
    2e36:	0001      	movs	r1, r0
    2e38:	0013      	movs	r3, r2
    2e3a:	910e      	str	r1, [sp, #56]	; 0x38
    2e3c:	920f      	str	r2, [sp, #60]	; 0x3c
    2e3e:	0002      	movs	r2, r0
    2e40:	0039      	movs	r1, r7
    2e42:	0030      	movs	r0, r6
    2e44:	f002 f9dc 	bl	5200 <__aeabi_dmul>
    2e48:	000a      	movs	r2, r1
    2e4a:	0001      	movs	r1, r0
    2e4c:	2080      	movs	r0, #128	; 0x80
    2e4e:	9104      	str	r1, [sp, #16]
    2e50:	9205      	str	r2, [sp, #20]
    2e52:	0013      	movs	r3, r2
    2e54:	2200      	movs	r2, #0
    2e56:	2180      	movs	r1, #128	; 0x80
    2e58:	0300      	lsls	r0, r0, #12
    2e5a:	4684      	mov	ip, r0
    2e5c:	9202      	str	r2, [sp, #8]
    2e5e:	9303      	str	r3, [sp, #12]
    2e60:	2200      	movs	r2, #0
    2e62:	0589      	lsls	r1, r1, #22
    2e64:	106d      	asrs	r5, r5, #1
    2e66:	430d      	orrs	r5, r1
    2e68:	4465      	add	r5, ip
    2e6a:	192b      	adds	r3, r5, r4
    2e6c:	9802      	ldr	r0, [sp, #8]
    2e6e:	9903      	ldr	r1, [sp, #12]
    2e70:	0014      	movs	r4, r2
    2e72:	001d      	movs	r5, r3
    2e74:	f002 f9c4 	bl	5200 <__aeabi_dmul>
    2e78:	0002      	movs	r2, r0
    2e7a:	000b      	movs	r3, r1
    2e7c:	0030      	movs	r0, r6
    2e7e:	0039      	movs	r1, r7
    2e80:	f002 fc38 	bl	56f4 <__aeabi_dsub>
    2e84:	9a06      	ldr	r2, [sp, #24]
    2e86:	9b07      	ldr	r3, [sp, #28]
    2e88:	0006      	movs	r6, r0
    2e8a:	000f      	movs	r7, r1
    2e8c:	0020      	movs	r0, r4
    2e8e:	0029      	movs	r1, r5
    2e90:	f002 fc30 	bl	56f4 <__aeabi_dsub>
    2e94:	0002      	movs	r2, r0
    2e96:	000b      	movs	r3, r1
    2e98:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e9c:	f002 fc2a 	bl	56f4 <__aeabi_dsub>
    2ea0:	9a02      	ldr	r2, [sp, #8]
    2ea2:	9b03      	ldr	r3, [sp, #12]
    2ea4:	f002 f9ac 	bl	5200 <__aeabi_dmul>
    2ea8:	0002      	movs	r2, r0
    2eaa:	000b      	movs	r3, r1
    2eac:	0030      	movs	r0, r6
    2eae:	0039      	movs	r1, r7
    2eb0:	f002 fc20 	bl	56f4 <__aeabi_dsub>
    2eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2eb8:	f002 f9a2 	bl	5200 <__aeabi_dmul>
    2ebc:	9d04      	ldr	r5, [sp, #16]
    2ebe:	9e05      	ldr	r6, [sp, #20]
    2ec0:	9006      	str	r0, [sp, #24]
    2ec2:	9107      	str	r1, [sp, #28]
    2ec4:	002a      	movs	r2, r5
    2ec6:	0033      	movs	r3, r6
    2ec8:	0028      	movs	r0, r5
    2eca:	0031      	movs	r1, r6
    2ecc:	f002 f998 	bl	5200 <__aeabi_dmul>
    2ed0:	0006      	movs	r6, r0
    2ed2:	000f      	movs	r7, r1
    2ed4:	4aa6      	ldr	r2, [pc, #664]	; (3170 <__ieee754_pow+0x5d4>)
    2ed6:	4ba7      	ldr	r3, [pc, #668]	; (3174 <__ieee754_pow+0x5d8>)
    2ed8:	f002 f992 	bl	5200 <__aeabi_dmul>
    2edc:	4aa6      	ldr	r2, [pc, #664]	; (3178 <__ieee754_pow+0x5dc>)
    2ede:	4ba7      	ldr	r3, [pc, #668]	; (317c <__ieee754_pow+0x5e0>)
    2ee0:	f001 fa3e 	bl	4360 <__aeabi_dadd>
    2ee4:	0032      	movs	r2, r6
    2ee6:	003b      	movs	r3, r7
    2ee8:	f002 f98a 	bl	5200 <__aeabi_dmul>
    2eec:	4aa4      	ldr	r2, [pc, #656]	; (3180 <__ieee754_pow+0x5e4>)
    2eee:	4ba5      	ldr	r3, [pc, #660]	; (3184 <__ieee754_pow+0x5e8>)
    2ef0:	f001 fa36 	bl	4360 <__aeabi_dadd>
    2ef4:	0032      	movs	r2, r6
    2ef6:	003b      	movs	r3, r7
    2ef8:	f002 f982 	bl	5200 <__aeabi_dmul>
    2efc:	4aa2      	ldr	r2, [pc, #648]	; (3188 <__ieee754_pow+0x5ec>)
    2efe:	4ba3      	ldr	r3, [pc, #652]	; (318c <__ieee754_pow+0x5f0>)
    2f00:	f001 fa2e 	bl	4360 <__aeabi_dadd>
    2f04:	0032      	movs	r2, r6
    2f06:	003b      	movs	r3, r7
    2f08:	f002 f97a 	bl	5200 <__aeabi_dmul>
    2f0c:	4aa0      	ldr	r2, [pc, #640]	; (3190 <__ieee754_pow+0x5f4>)
    2f0e:	4ba1      	ldr	r3, [pc, #644]	; (3194 <__ieee754_pow+0x5f8>)
    2f10:	f001 fa26 	bl	4360 <__aeabi_dadd>
    2f14:	0032      	movs	r2, r6
    2f16:	003b      	movs	r3, r7
    2f18:	f002 f972 	bl	5200 <__aeabi_dmul>
    2f1c:	4a9e      	ldr	r2, [pc, #632]	; (3198 <__ieee754_pow+0x5fc>)
    2f1e:	4b9f      	ldr	r3, [pc, #636]	; (319c <__ieee754_pow+0x600>)
    2f20:	f001 fa1e 	bl	4360 <__aeabi_dadd>
    2f24:	0032      	movs	r2, r6
    2f26:	0004      	movs	r4, r0
    2f28:	000d      	movs	r5, r1
    2f2a:	003b      	movs	r3, r7
    2f2c:	0030      	movs	r0, r6
    2f2e:	0039      	movs	r1, r7
    2f30:	f002 f966 	bl	5200 <__aeabi_dmul>
    2f34:	0002      	movs	r2, r0
    2f36:	000b      	movs	r3, r1
    2f38:	0020      	movs	r0, r4
    2f3a:	0029      	movs	r1, r5
    2f3c:	f002 f960 	bl	5200 <__aeabi_dmul>
    2f40:	9e02      	ldr	r6, [sp, #8]
    2f42:	9f03      	ldr	r7, [sp, #12]
    2f44:	0004      	movs	r4, r0
    2f46:	000d      	movs	r5, r1
    2f48:	9804      	ldr	r0, [sp, #16]
    2f4a:	9905      	ldr	r1, [sp, #20]
    2f4c:	0032      	movs	r2, r6
    2f4e:	003b      	movs	r3, r7
    2f50:	f001 fa06 	bl	4360 <__aeabi_dadd>
    2f54:	9a06      	ldr	r2, [sp, #24]
    2f56:	9b07      	ldr	r3, [sp, #28]
    2f58:	f002 f952 	bl	5200 <__aeabi_dmul>
    2f5c:	0022      	movs	r2, r4
    2f5e:	002b      	movs	r3, r5
    2f60:	f001 f9fe 	bl	4360 <__aeabi_dadd>
    2f64:	0032      	movs	r2, r6
    2f66:	900a      	str	r0, [sp, #40]	; 0x28
    2f68:	910b      	str	r1, [sp, #44]	; 0x2c
    2f6a:	003b      	movs	r3, r7
    2f6c:	0030      	movs	r0, r6
    2f6e:	0039      	movs	r1, r7
    2f70:	9602      	str	r6, [sp, #8]
    2f72:	9703      	str	r7, [sp, #12]
    2f74:	f002 f944 	bl	5200 <__aeabi_dmul>
    2f78:	2200      	movs	r2, #0
    2f7a:	4b89      	ldr	r3, [pc, #548]	; (31a0 <__ieee754_pow+0x604>)
    2f7c:	0004      	movs	r4, r0
    2f7e:	000d      	movs	r5, r1
    2f80:	f001 f9ee 	bl	4360 <__aeabi_dadd>
    2f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f88:	f001 f9ea 	bl	4360 <__aeabi_dadd>
    2f8c:	2600      	movs	r6, #0
    2f8e:	000f      	movs	r7, r1
    2f90:	0032      	movs	r2, r6
    2f92:	000b      	movs	r3, r1
    2f94:	9802      	ldr	r0, [sp, #8]
    2f96:	9903      	ldr	r1, [sp, #12]
    2f98:	f002 f932 	bl	5200 <__aeabi_dmul>
    2f9c:	2200      	movs	r2, #0
    2f9e:	9002      	str	r0, [sp, #8]
    2fa0:	9103      	str	r1, [sp, #12]
    2fa2:	4b7f      	ldr	r3, [pc, #508]	; (31a0 <__ieee754_pow+0x604>)
    2fa4:	0030      	movs	r0, r6
    2fa6:	0039      	movs	r1, r7
    2fa8:	f002 fba4 	bl	56f4 <__aeabi_dsub>
    2fac:	0022      	movs	r2, r4
    2fae:	002b      	movs	r3, r5
    2fb0:	f002 fba0 	bl	56f4 <__aeabi_dsub>
    2fb4:	0002      	movs	r2, r0
    2fb6:	000b      	movs	r3, r1
    2fb8:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fbc:	f002 fb9a 	bl	56f4 <__aeabi_dsub>
    2fc0:	9a04      	ldr	r2, [sp, #16]
    2fc2:	9b05      	ldr	r3, [sp, #20]
    2fc4:	f002 f91c 	bl	5200 <__aeabi_dmul>
    2fc8:	0032      	movs	r2, r6
    2fca:	0004      	movs	r4, r0
    2fcc:	000d      	movs	r5, r1
    2fce:	9806      	ldr	r0, [sp, #24]
    2fd0:	9907      	ldr	r1, [sp, #28]
    2fd2:	003b      	movs	r3, r7
    2fd4:	f002 f914 	bl	5200 <__aeabi_dmul>
    2fd8:	0002      	movs	r2, r0
    2fda:	000b      	movs	r3, r1
    2fdc:	0020      	movs	r0, r4
    2fde:	0029      	movs	r1, r5
    2fe0:	f001 f9be 	bl	4360 <__aeabi_dadd>
    2fe4:	0004      	movs	r4, r0
    2fe6:	000d      	movs	r5, r1
    2fe8:	0002      	movs	r2, r0
    2fea:	000b      	movs	r3, r1
    2fec:	9802      	ldr	r0, [sp, #8]
    2fee:	9903      	ldr	r1, [sp, #12]
    2ff0:	f001 f9b6 	bl	4360 <__aeabi_dadd>
    2ff4:	2600      	movs	r6, #0
    2ff6:	22e0      	movs	r2, #224	; 0xe0
    2ff8:	4b6a      	ldr	r3, [pc, #424]	; (31a4 <__ieee754_pow+0x608>)
    2ffa:	0612      	lsls	r2, r2, #24
    2ffc:	0030      	movs	r0, r6
    2ffe:	000f      	movs	r7, r1
    3000:	f002 f8fe 	bl	5200 <__aeabi_dmul>
    3004:	9a02      	ldr	r2, [sp, #8]
    3006:	9b03      	ldr	r3, [sp, #12]
    3008:	9004      	str	r0, [sp, #16]
    300a:	9105      	str	r1, [sp, #20]
    300c:	0030      	movs	r0, r6
    300e:	0039      	movs	r1, r7
    3010:	f002 fb70 	bl	56f4 <__aeabi_dsub>
    3014:	0002      	movs	r2, r0
    3016:	000b      	movs	r3, r1
    3018:	0020      	movs	r0, r4
    301a:	0029      	movs	r1, r5
    301c:	f002 fb6a 	bl	56f4 <__aeabi_dsub>
    3020:	4a61      	ldr	r2, [pc, #388]	; (31a8 <__ieee754_pow+0x60c>)
    3022:	4b60      	ldr	r3, [pc, #384]	; (31a4 <__ieee754_pow+0x608>)
    3024:	f002 f8ec 	bl	5200 <__aeabi_dmul>
    3028:	4a60      	ldr	r2, [pc, #384]	; (31ac <__ieee754_pow+0x610>)
    302a:	0004      	movs	r4, r0
    302c:	000d      	movs	r5, r1
    302e:	4b60      	ldr	r3, [pc, #384]	; (31b0 <__ieee754_pow+0x614>)
    3030:	0030      	movs	r0, r6
    3032:	0039      	movs	r1, r7
    3034:	f002 f8e4 	bl	5200 <__aeabi_dmul>
    3038:	0002      	movs	r2, r0
    303a:	000b      	movs	r3, r1
    303c:	0020      	movs	r0, r4
    303e:	0029      	movs	r1, r5
    3040:	f001 f98e 	bl	4360 <__aeabi_dadd>
    3044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3048:	f001 f98a 	bl	4360 <__aeabi_dadd>
    304c:	0006      	movs	r6, r0
    304e:	4648      	mov	r0, r9
    3050:	000f      	movs	r7, r1
    3052:	f002 fef9 	bl	5e48 <__aeabi_i2d>
    3056:	0004      	movs	r4, r0
    3058:	000d      	movs	r5, r1
    305a:	9804      	ldr	r0, [sp, #16]
    305c:	9905      	ldr	r1, [sp, #20]
    305e:	0032      	movs	r2, r6
    3060:	003b      	movs	r3, r7
    3062:	f001 f97d 	bl	4360 <__aeabi_dadd>
    3066:	9a08      	ldr	r2, [sp, #32]
    3068:	9b09      	ldr	r3, [sp, #36]	; 0x24
    306a:	f001 f979 	bl	4360 <__aeabi_dadd>
    306e:	0022      	movs	r2, r4
    3070:	002b      	movs	r3, r5
    3072:	f001 f975 	bl	4360 <__aeabi_dadd>
    3076:	2000      	movs	r0, #0
    3078:	0022      	movs	r2, r4
    307a:	002b      	movs	r3, r5
    307c:	9002      	str	r0, [sp, #8]
    307e:	9103      	str	r1, [sp, #12]
    3080:	f002 fb38 	bl	56f4 <__aeabi_dsub>
    3084:	9a08      	ldr	r2, [sp, #32]
    3086:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3088:	f002 fb34 	bl	56f4 <__aeabi_dsub>
    308c:	9a04      	ldr	r2, [sp, #16]
    308e:	9b05      	ldr	r3, [sp, #20]
    3090:	f002 fb30 	bl	56f4 <__aeabi_dsub>
    3094:	0002      	movs	r2, r0
    3096:	000b      	movs	r3, r1
    3098:	0030      	movs	r0, r6
    309a:	0039      	movs	r1, r7
    309c:	f002 fb2a 	bl	56f4 <__aeabi_dsub>
    30a0:	9004      	str	r0, [sp, #16]
    30a2:	9105      	str	r1, [sp, #20]
    30a4:	465b      	mov	r3, fp
    30a6:	4642      	mov	r2, r8
    30a8:	3b01      	subs	r3, #1
    30aa:	4313      	orrs	r3, r2
    30ac:	d100      	bne.n	30b0 <__ieee754_pow+0x514>
    30ae:	e197      	b.n	33e0 <__ieee754_pow+0x844>
    30b0:	2300      	movs	r3, #0
    30b2:	4c2b      	ldr	r4, [pc, #172]	; (3160 <__ieee754_pow+0x5c4>)
    30b4:	9306      	str	r3, [sp, #24]
    30b6:	9407      	str	r4, [sp, #28]
    30b8:	9800      	ldr	r0, [sp, #0]
    30ba:	9901      	ldr	r1, [sp, #4]
    30bc:	2600      	movs	r6, #0
    30be:	000b      	movs	r3, r1
    30c0:	0032      	movs	r2, r6
    30c2:	000f      	movs	r7, r1
    30c4:	f002 fb16 	bl	56f4 <__aeabi_dsub>
    30c8:	9a02      	ldr	r2, [sp, #8]
    30ca:	9b03      	ldr	r3, [sp, #12]
    30cc:	f002 f898 	bl	5200 <__aeabi_dmul>
    30d0:	9a00      	ldr	r2, [sp, #0]
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	0004      	movs	r4, r0
    30d6:	000d      	movs	r5, r1
    30d8:	9804      	ldr	r0, [sp, #16]
    30da:	9905      	ldr	r1, [sp, #20]
    30dc:	f002 f890 	bl	5200 <__aeabi_dmul>
    30e0:	0002      	movs	r2, r0
    30e2:	000b      	movs	r3, r1
    30e4:	0020      	movs	r0, r4
    30e6:	0029      	movs	r1, r5
    30e8:	f001 f93a 	bl	4360 <__aeabi_dadd>
    30ec:	0004      	movs	r4, r0
    30ee:	000d      	movs	r5, r1
    30f0:	9802      	ldr	r0, [sp, #8]
    30f2:	9903      	ldr	r1, [sp, #12]
    30f4:	003b      	movs	r3, r7
    30f6:	0032      	movs	r2, r6
    30f8:	9404      	str	r4, [sp, #16]
    30fa:	9505      	str	r5, [sp, #20]
    30fc:	f002 f880 	bl	5200 <__aeabi_dmul>
    3100:	9000      	str	r0, [sp, #0]
    3102:	9101      	str	r1, [sp, #4]
    3104:	000b      	movs	r3, r1
    3106:	0002      	movs	r2, r0
    3108:	0029      	movs	r1, r5
    310a:	0020      	movs	r0, r4
    310c:	f001 f928 	bl	4360 <__aeabi_dadd>
    3110:	4b28      	ldr	r3, [pc, #160]	; (31b4 <__ieee754_pow+0x618>)
    3112:	4681      	mov	r9, r0
    3114:	1e0f      	subs	r7, r1, #0
    3116:	468a      	mov	sl, r1
    3118:	429f      	cmp	r7, r3
    311a:	dc00      	bgt.n	311e <__ieee754_pow+0x582>
    311c:	e13c      	b.n	3398 <__ieee754_pow+0x7fc>
    311e:	4b26      	ldr	r3, [pc, #152]	; (31b8 <__ieee754_pow+0x61c>)
    3120:	18cb      	adds	r3, r1, r3
    3122:	4303      	orrs	r3, r0
    3124:	d000      	beq.n	3128 <__ieee754_pow+0x58c>
    3126:	e1db      	b.n	34e0 <__ieee754_pow+0x944>
    3128:	9804      	ldr	r0, [sp, #16]
    312a:	9905      	ldr	r1, [sp, #20]
    312c:	4a23      	ldr	r2, [pc, #140]	; (31bc <__ieee754_pow+0x620>)
    312e:	4b24      	ldr	r3, [pc, #144]	; (31c0 <__ieee754_pow+0x624>)
    3130:	f001 f916 	bl	4360 <__aeabi_dadd>
    3134:	9a00      	ldr	r2, [sp, #0]
    3136:	9b01      	ldr	r3, [sp, #4]
    3138:	0004      	movs	r4, r0
    313a:	000d      	movs	r5, r1
    313c:	4648      	mov	r0, r9
    313e:	0039      	movs	r1, r7
    3140:	f002 fad8 	bl	56f4 <__aeabi_dsub>
    3144:	0002      	movs	r2, r0
    3146:	000b      	movs	r3, r1
    3148:	0020      	movs	r0, r4
    314a:	0029      	movs	r1, r5
    314c:	f000 fca4 	bl	3a98 <__aeabi_dcmpgt>
    3150:	003e      	movs	r6, r7
    3152:	e037      	b.n	31c4 <__ieee754_pow+0x628>
    3154:	000fffff 	.word	0x000fffff
    3158:	43400000 	.word	0x43400000
    315c:	fffffc01 	.word	0xfffffc01
    3160:	3ff00000 	.word	0x3ff00000
    3164:	0003988e 	.word	0x0003988e
    3168:	000bb679 	.word	0x000bb679
    316c:	fff00000 	.word	0xfff00000
    3170:	4a454eef 	.word	0x4a454eef
    3174:	3fca7e28 	.word	0x3fca7e28
    3178:	93c9db65 	.word	0x93c9db65
    317c:	3fcd864a 	.word	0x3fcd864a
    3180:	a91d4101 	.word	0xa91d4101
    3184:	3fd17460 	.word	0x3fd17460
    3188:	518f264d 	.word	0x518f264d
    318c:	3fd55555 	.word	0x3fd55555
    3190:	db6fabff 	.word	0xdb6fabff
    3194:	3fdb6db6 	.word	0x3fdb6db6
    3198:	33333303 	.word	0x33333303
    319c:	3fe33333 	.word	0x3fe33333
    31a0:	40080000 	.word	0x40080000
    31a4:	3feec709 	.word	0x3feec709
    31a8:	dc3a03fd 	.word	0xdc3a03fd
    31ac:	145b01f5 	.word	0x145b01f5
    31b0:	be3e2fe0 	.word	0xbe3e2fe0
    31b4:	408fffff 	.word	0x408fffff
    31b8:	bf700000 	.word	0xbf700000
    31bc:	652b82fe 	.word	0x652b82fe
    31c0:	3c971547 	.word	0x3c971547
    31c4:	2800      	cmp	r0, #0
    31c6:	d000      	beq.n	31ca <__ieee754_pow+0x62e>
    31c8:	e18a      	b.n	34e0 <__ieee754_pow+0x944>
    31ca:	2280      	movs	r2, #128	; 0x80
    31cc:	4be7      	ldr	r3, [pc, #924]	; (356c <__ieee754_pow+0x9d0>)
    31ce:	0352      	lsls	r2, r2, #13
    31d0:	469c      	mov	ip, r3
    31d2:	0013      	movs	r3, r2
    31d4:	1536      	asrs	r6, r6, #20
    31d6:	4466      	add	r6, ip
    31d8:	4133      	asrs	r3, r6
    31da:	49e5      	ldr	r1, [pc, #916]	; (3570 <__ieee754_pow+0x9d4>)
    31dc:	19db      	adds	r3, r3, r7
    31de:	005e      	lsls	r6, r3, #1
    31e0:	001c      	movs	r4, r3
    31e2:	031b      	lsls	r3, r3, #12
    31e4:	468c      	mov	ip, r1
    31e6:	0b1b      	lsrs	r3, r3, #12
    31e8:	4313      	orrs	r3, r2
    31ea:	2214      	movs	r2, #20
    31ec:	0d76      	lsrs	r6, r6, #21
    31ee:	4fe1      	ldr	r7, [pc, #900]	; (3574 <__ieee754_pow+0x9d8>)
    31f0:	4466      	add	r6, ip
    31f2:	4137      	asrs	r7, r6
    31f4:	1b96      	subs	r6, r2, r6
    31f6:	4133      	asrs	r3, r6
    31f8:	4698      	mov	r8, r3
    31fa:	4653      	mov	r3, sl
    31fc:	43bc      	bics	r4, r7
    31fe:	2000      	movs	r0, #0
    3200:	0021      	movs	r1, r4
    3202:	2b00      	cmp	r3, #0
    3204:	da00      	bge.n	3208 <__ieee754_pow+0x66c>
    3206:	e1a9      	b.n	355c <__ieee754_pow+0x9c0>
    3208:	0002      	movs	r2, r0
    320a:	000b      	movs	r3, r1
    320c:	9800      	ldr	r0, [sp, #0]
    320e:	9901      	ldr	r1, [sp, #4]
    3210:	f002 fa70 	bl	56f4 <__aeabi_dsub>
    3214:	000b      	movs	r3, r1
    3216:	9000      	str	r0, [sp, #0]
    3218:	9101      	str	r1, [sp, #4]
    321a:	0002      	movs	r2, r0
    321c:	9804      	ldr	r0, [sp, #16]
    321e:	9905      	ldr	r1, [sp, #20]
    3220:	f001 f89e 	bl	4360 <__aeabi_dadd>
    3224:	4643      	mov	r3, r8
    3226:	051b      	lsls	r3, r3, #20
    3228:	4699      	mov	r9, r3
    322a:	2000      	movs	r0, #0
    322c:	2200      	movs	r2, #0
    322e:	4bd2      	ldr	r3, [pc, #840]	; (3578 <__ieee754_pow+0x9dc>)
    3230:	0006      	movs	r6, r0
    3232:	000f      	movs	r7, r1
    3234:	f001 ffe4 	bl	5200 <__aeabi_dmul>
    3238:	9a00      	ldr	r2, [sp, #0]
    323a:	9b01      	ldr	r3, [sp, #4]
    323c:	9002      	str	r0, [sp, #8]
    323e:	9103      	str	r1, [sp, #12]
    3240:	0030      	movs	r0, r6
    3242:	0039      	movs	r1, r7
    3244:	f002 fa56 	bl	56f4 <__aeabi_dsub>
    3248:	0002      	movs	r2, r0
    324a:	000b      	movs	r3, r1
    324c:	9804      	ldr	r0, [sp, #16]
    324e:	9905      	ldr	r1, [sp, #20]
    3250:	f002 fa50 	bl	56f4 <__aeabi_dsub>
    3254:	4ac9      	ldr	r2, [pc, #804]	; (357c <__ieee754_pow+0x9e0>)
    3256:	4bca      	ldr	r3, [pc, #808]	; (3580 <__ieee754_pow+0x9e4>)
    3258:	f001 ffd2 	bl	5200 <__aeabi_dmul>
    325c:	4ac9      	ldr	r2, [pc, #804]	; (3584 <__ieee754_pow+0x9e8>)
    325e:	0004      	movs	r4, r0
    3260:	000d      	movs	r5, r1
    3262:	4bc9      	ldr	r3, [pc, #804]	; (3588 <__ieee754_pow+0x9ec>)
    3264:	0030      	movs	r0, r6
    3266:	0039      	movs	r1, r7
    3268:	f001 ffca 	bl	5200 <__aeabi_dmul>
    326c:	0002      	movs	r2, r0
    326e:	000b      	movs	r3, r1
    3270:	0020      	movs	r0, r4
    3272:	0029      	movs	r1, r5
    3274:	f001 f874 	bl	4360 <__aeabi_dadd>
    3278:	0004      	movs	r4, r0
    327a:	000d      	movs	r5, r1
    327c:	0002      	movs	r2, r0
    327e:	000b      	movs	r3, r1
    3280:	9802      	ldr	r0, [sp, #8]
    3282:	9903      	ldr	r1, [sp, #12]
    3284:	f001 f86c 	bl	4360 <__aeabi_dadd>
    3288:	9a02      	ldr	r2, [sp, #8]
    328a:	9b03      	ldr	r3, [sp, #12]
    328c:	0006      	movs	r6, r0
    328e:	000f      	movs	r7, r1
    3290:	f002 fa30 	bl	56f4 <__aeabi_dsub>
    3294:	0002      	movs	r2, r0
    3296:	000b      	movs	r3, r1
    3298:	0020      	movs	r0, r4
    329a:	0029      	movs	r1, r5
    329c:	f002 fa2a 	bl	56f4 <__aeabi_dsub>
    32a0:	0032      	movs	r2, r6
    32a2:	9000      	str	r0, [sp, #0]
    32a4:	9101      	str	r1, [sp, #4]
    32a6:	003b      	movs	r3, r7
    32a8:	0030      	movs	r0, r6
    32aa:	0039      	movs	r1, r7
    32ac:	f001 ffa8 	bl	5200 <__aeabi_dmul>
    32b0:	0004      	movs	r4, r0
    32b2:	000d      	movs	r5, r1
    32b4:	4ab5      	ldr	r2, [pc, #724]	; (358c <__ieee754_pow+0x9f0>)
    32b6:	4bb6      	ldr	r3, [pc, #728]	; (3590 <__ieee754_pow+0x9f4>)
    32b8:	f001 ffa2 	bl	5200 <__aeabi_dmul>
    32bc:	4ab5      	ldr	r2, [pc, #724]	; (3594 <__ieee754_pow+0x9f8>)
    32be:	4bb6      	ldr	r3, [pc, #728]	; (3598 <__ieee754_pow+0x9fc>)
    32c0:	f002 fa18 	bl	56f4 <__aeabi_dsub>
    32c4:	0022      	movs	r2, r4
    32c6:	002b      	movs	r3, r5
    32c8:	f001 ff9a 	bl	5200 <__aeabi_dmul>
    32cc:	4ab3      	ldr	r2, [pc, #716]	; (359c <__ieee754_pow+0xa00>)
    32ce:	4bb4      	ldr	r3, [pc, #720]	; (35a0 <__ieee754_pow+0xa04>)
    32d0:	f001 f846 	bl	4360 <__aeabi_dadd>
    32d4:	0022      	movs	r2, r4
    32d6:	002b      	movs	r3, r5
    32d8:	f001 ff92 	bl	5200 <__aeabi_dmul>
    32dc:	4ab1      	ldr	r2, [pc, #708]	; (35a4 <__ieee754_pow+0xa08>)
    32de:	4bb2      	ldr	r3, [pc, #712]	; (35a8 <__ieee754_pow+0xa0c>)
    32e0:	f002 fa08 	bl	56f4 <__aeabi_dsub>
    32e4:	0022      	movs	r2, r4
    32e6:	002b      	movs	r3, r5
    32e8:	f001 ff8a 	bl	5200 <__aeabi_dmul>
    32ec:	4aaf      	ldr	r2, [pc, #700]	; (35ac <__ieee754_pow+0xa10>)
    32ee:	4bb0      	ldr	r3, [pc, #704]	; (35b0 <__ieee754_pow+0xa14>)
    32f0:	f001 f836 	bl	4360 <__aeabi_dadd>
    32f4:	0022      	movs	r2, r4
    32f6:	002b      	movs	r3, r5
    32f8:	f001 ff82 	bl	5200 <__aeabi_dmul>
    32fc:	0002      	movs	r2, r0
    32fe:	000b      	movs	r3, r1
    3300:	0030      	movs	r0, r6
    3302:	0039      	movs	r1, r7
    3304:	f002 f9f6 	bl	56f4 <__aeabi_dsub>
    3308:	0004      	movs	r4, r0
    330a:	000d      	movs	r5, r1
    330c:	0002      	movs	r2, r0
    330e:	000b      	movs	r3, r1
    3310:	0030      	movs	r0, r6
    3312:	0039      	movs	r1, r7
    3314:	f001 ff74 	bl	5200 <__aeabi_dmul>
    3318:	2380      	movs	r3, #128	; 0x80
    331a:	9002      	str	r0, [sp, #8]
    331c:	9103      	str	r1, [sp, #12]
    331e:	2200      	movs	r2, #0
    3320:	05db      	lsls	r3, r3, #23
    3322:	0020      	movs	r0, r4
    3324:	0029      	movs	r1, r5
    3326:	f002 f9e5 	bl	56f4 <__aeabi_dsub>
    332a:	0002      	movs	r2, r0
    332c:	000b      	movs	r3, r1
    332e:	9802      	ldr	r0, [sp, #8]
    3330:	9903      	ldr	r1, [sp, #12]
    3332:	f001 fb41 	bl	49b8 <__aeabi_ddiv>
    3336:	9a00      	ldr	r2, [sp, #0]
    3338:	9b01      	ldr	r3, [sp, #4]
    333a:	0004      	movs	r4, r0
    333c:	000d      	movs	r5, r1
    333e:	0030      	movs	r0, r6
    3340:	0039      	movs	r1, r7
    3342:	f001 ff5d 	bl	5200 <__aeabi_dmul>
    3346:	9a00      	ldr	r2, [sp, #0]
    3348:	9b01      	ldr	r3, [sp, #4]
    334a:	f001 f809 	bl	4360 <__aeabi_dadd>
    334e:	0002      	movs	r2, r0
    3350:	000b      	movs	r3, r1
    3352:	0020      	movs	r0, r4
    3354:	0029      	movs	r1, r5
    3356:	f002 f9cd 	bl	56f4 <__aeabi_dsub>
    335a:	0032      	movs	r2, r6
    335c:	003b      	movs	r3, r7
    335e:	f002 f9c9 	bl	56f4 <__aeabi_dsub>
    3362:	0002      	movs	r2, r0
    3364:	000b      	movs	r3, r1
    3366:	2000      	movs	r0, #0
    3368:	4992      	ldr	r1, [pc, #584]	; (35b4 <__ieee754_pow+0xa18>)
    336a:	f002 f9c3 	bl	56f4 <__aeabi_dsub>
    336e:	464b      	mov	r3, r9
    3370:	185b      	adds	r3, r3, r1
    3372:	151a      	asrs	r2, r3, #20
    3374:	2a00      	cmp	r2, #0
    3376:	dc00      	bgt.n	337a <__ieee754_pow+0x7de>
    3378:	e0f4      	b.n	3564 <__ieee754_pow+0x9c8>
    337a:	0019      	movs	r1, r3
    337c:	9a06      	ldr	r2, [sp, #24]
    337e:	9b07      	ldr	r3, [sp, #28]
    3380:	f001 ff3e 	bl	5200 <__aeabi_dmul>
    3384:	0006      	movs	r6, r0
    3386:	e452      	b.n	2c2e <__ieee754_pow+0x92>
    3388:	0032      	movs	r2, r6
    338a:	0030      	movs	r0, r6
    338c:	002b      	movs	r3, r5
    338e:	0029      	movs	r1, r5
    3390:	f001 ff36 	bl	5200 <__aeabi_dmul>
    3394:	0006      	movs	r6, r0
    3396:	e44a      	b.n	2c2e <__ieee754_pow+0x92>
    3398:	4b87      	ldr	r3, [pc, #540]	; (35b8 <__ieee754_pow+0xa1c>)
    339a:	004e      	lsls	r6, r1, #1
    339c:	0876      	lsrs	r6, r6, #1
    339e:	429e      	cmp	r6, r3
    33a0:	dc00      	bgt.n	33a4 <__ieee754_pow+0x808>
    33a2:	e0bf      	b.n	3524 <__ieee754_pow+0x988>
    33a4:	4b85      	ldr	r3, [pc, #532]	; (35bc <__ieee754_pow+0xa20>)
    33a6:	18cb      	adds	r3, r1, r3
    33a8:	4303      	orrs	r3, r0
    33aa:	d10c      	bne.n	33c6 <__ieee754_pow+0x82a>
    33ac:	9a00      	ldr	r2, [sp, #0]
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	f002 f9a0 	bl	56f4 <__aeabi_dsub>
    33b4:	0002      	movs	r2, r0
    33b6:	000b      	movs	r3, r1
    33b8:	9804      	ldr	r0, [sp, #16]
    33ba:	9905      	ldr	r1, [sp, #20]
    33bc:	f000 fb62 	bl	3a84 <__aeabi_dcmple>
    33c0:	2800      	cmp	r0, #0
    33c2:	d100      	bne.n	33c6 <__ieee754_pow+0x82a>
    33c4:	e701      	b.n	31ca <__ieee754_pow+0x62e>
    33c6:	9806      	ldr	r0, [sp, #24]
    33c8:	9907      	ldr	r1, [sp, #28]
    33ca:	4a7d      	ldr	r2, [pc, #500]	; (35c0 <__ieee754_pow+0xa24>)
    33cc:	4b7d      	ldr	r3, [pc, #500]	; (35c4 <__ieee754_pow+0xa28>)
    33ce:	f001 ff17 	bl	5200 <__aeabi_dmul>
    33d2:	4a7b      	ldr	r2, [pc, #492]	; (35c0 <__ieee754_pow+0xa24>)
    33d4:	4b7b      	ldr	r3, [pc, #492]	; (35c4 <__ieee754_pow+0xa28>)
    33d6:	f001 ff13 	bl	5200 <__aeabi_dmul>
    33da:	0006      	movs	r6, r0
    33dc:	f7ff fc27 	bl	2c2e <__ieee754_pow+0x92>
    33e0:	2300      	movs	r3, #0
    33e2:	4c79      	ldr	r4, [pc, #484]	; (35c8 <__ieee754_pow+0xa2c>)
    33e4:	9306      	str	r3, [sp, #24]
    33e6:	9407      	str	r4, [sp, #28]
    33e8:	e666      	b.n	30b8 <__ieee754_pow+0x51c>
    33ea:	4653      	mov	r3, sl
    33ec:	2b00      	cmp	r3, #0
    33ee:	db00      	blt.n	33f2 <__ieee754_pow+0x856>
    33f0:	e4c3      	b.n	2d7a <__ieee754_pow+0x1de>
    33f2:	9b00      	ldr	r3, [sp, #0]
    33f4:	9c01      	ldr	r4, [sp, #4]
    33f6:	2280      	movs	r2, #128	; 0x80
    33f8:	0612      	lsls	r2, r2, #24
    33fa:	001e      	movs	r6, r3
    33fc:	4694      	mov	ip, r2
    33fe:	0023      	movs	r3, r4
    3400:	4463      	add	r3, ip
    3402:	0019      	movs	r1, r3
    3404:	f7ff fc13 	bl	2c2e <__ieee754_pow+0x92>
    3408:	0002      	movs	r2, r0
    340a:	000b      	movs	r3, r1
    340c:	2000      	movs	r0, #0
    340e:	4969      	ldr	r1, [pc, #420]	; (35b4 <__ieee754_pow+0xa18>)
    3410:	f001 fad2 	bl	49b8 <__aeabi_ddiv>
    3414:	e44a      	b.n	2cac <__ieee754_pow+0x110>
    3416:	4b6d      	ldr	r3, [pc, #436]	; (35cc <__ieee754_pow+0xa30>)
    3418:	429c      	cmp	r4, r3
    341a:	dc00      	bgt.n	341e <__ieee754_pow+0x882>
    341c:	e4aa      	b.n	2d74 <__ieee754_pow+0x1d8>
    341e:	4b65      	ldr	r3, [pc, #404]	; (35b4 <__ieee754_pow+0xa18>)
    3420:	429c      	cmp	r4, r3
    3422:	dd01      	ble.n	3428 <__ieee754_pow+0x88c>
    3424:	f7ff fc2c 	bl	2c80 <__ieee754_pow+0xe4>
    3428:	2200      	movs	r2, #0
    342a:	4b62      	ldr	r3, [pc, #392]	; (35b4 <__ieee754_pow+0xa18>)
    342c:	f002 f962 	bl	56f4 <__aeabi_dsub>
    3430:	22c0      	movs	r2, #192	; 0xc0
    3432:	4b67      	ldr	r3, [pc, #412]	; (35d0 <__ieee754_pow+0xa34>)
    3434:	05d2      	lsls	r2, r2, #23
    3436:	0004      	movs	r4, r0
    3438:	000d      	movs	r5, r1
    343a:	f001 fee1 	bl	5200 <__aeabi_dmul>
    343e:	4a65      	ldr	r2, [pc, #404]	; (35d4 <__ieee754_pow+0xa38>)
    3440:	0006      	movs	r6, r0
    3442:	000f      	movs	r7, r1
    3444:	4b64      	ldr	r3, [pc, #400]	; (35d8 <__ieee754_pow+0xa3c>)
    3446:	0020      	movs	r0, r4
    3448:	0029      	movs	r1, r5
    344a:	f001 fed9 	bl	5200 <__aeabi_dmul>
    344e:	2200      	movs	r2, #0
    3450:	9002      	str	r0, [sp, #8]
    3452:	9103      	str	r1, [sp, #12]
    3454:	4b61      	ldr	r3, [pc, #388]	; (35dc <__ieee754_pow+0xa40>)
    3456:	0020      	movs	r0, r4
    3458:	0029      	movs	r1, r5
    345a:	f001 fed1 	bl	5200 <__aeabi_dmul>
    345e:	0002      	movs	r2, r0
    3460:	000b      	movs	r3, r1
    3462:	485f      	ldr	r0, [pc, #380]	; (35e0 <__ieee754_pow+0xa44>)
    3464:	495f      	ldr	r1, [pc, #380]	; (35e4 <__ieee754_pow+0xa48>)
    3466:	f002 f945 	bl	56f4 <__aeabi_dsub>
    346a:	0022      	movs	r2, r4
    346c:	002b      	movs	r3, r5
    346e:	f001 fec7 	bl	5200 <__aeabi_dmul>
    3472:	0002      	movs	r2, r0
    3474:	000b      	movs	r3, r1
    3476:	2000      	movs	r0, #0
    3478:	495b      	ldr	r1, [pc, #364]	; (35e8 <__ieee754_pow+0xa4c>)
    347a:	f002 f93b 	bl	56f4 <__aeabi_dsub>
    347e:	0022      	movs	r2, r4
    3480:	9004      	str	r0, [sp, #16]
    3482:	9105      	str	r1, [sp, #20]
    3484:	002b      	movs	r3, r5
    3486:	0020      	movs	r0, r4
    3488:	0029      	movs	r1, r5
    348a:	f001 feb9 	bl	5200 <__aeabi_dmul>
    348e:	0002      	movs	r2, r0
    3490:	000b      	movs	r3, r1
    3492:	9804      	ldr	r0, [sp, #16]
    3494:	9905      	ldr	r1, [sp, #20]
    3496:	f001 feb3 	bl	5200 <__aeabi_dmul>
    349a:	4a54      	ldr	r2, [pc, #336]	; (35ec <__ieee754_pow+0xa50>)
    349c:	4b4c      	ldr	r3, [pc, #304]	; (35d0 <__ieee754_pow+0xa34>)
    349e:	f001 feaf 	bl	5200 <__aeabi_dmul>
    34a2:	0002      	movs	r2, r0
    34a4:	000b      	movs	r3, r1
    34a6:	9802      	ldr	r0, [sp, #8]
    34a8:	9903      	ldr	r1, [sp, #12]
    34aa:	f002 f923 	bl	56f4 <__aeabi_dsub>
    34ae:	0002      	movs	r2, r0
    34b0:	000b      	movs	r3, r1
    34b2:	0004      	movs	r4, r0
    34b4:	000d      	movs	r5, r1
    34b6:	0030      	movs	r0, r6
    34b8:	0039      	movs	r1, r7
    34ba:	f000 ff51 	bl	4360 <__aeabi_dadd>
    34be:	2200      	movs	r2, #0
    34c0:	0010      	movs	r0, r2
    34c2:	003b      	movs	r3, r7
    34c4:	0032      	movs	r2, r6
    34c6:	9002      	str	r0, [sp, #8]
    34c8:	9103      	str	r1, [sp, #12]
    34ca:	f002 f913 	bl	56f4 <__aeabi_dsub>
    34ce:	0002      	movs	r2, r0
    34d0:	000b      	movs	r3, r1
    34d2:	0020      	movs	r0, r4
    34d4:	0029      	movs	r1, r5
    34d6:	f002 f90d 	bl	56f4 <__aeabi_dsub>
    34da:	9004      	str	r0, [sp, #16]
    34dc:	9105      	str	r1, [sp, #20]
    34de:	e5e1      	b.n	30a4 <__ieee754_pow+0x508>
    34e0:	4a43      	ldr	r2, [pc, #268]	; (35f0 <__ieee754_pow+0xa54>)
    34e2:	4b44      	ldr	r3, [pc, #272]	; (35f4 <__ieee754_pow+0xa58>)
    34e4:	9806      	ldr	r0, [sp, #24]
    34e6:	9907      	ldr	r1, [sp, #28]
    34e8:	f001 fe8a 	bl	5200 <__aeabi_dmul>
    34ec:	4a40      	ldr	r2, [pc, #256]	; (35f0 <__ieee754_pow+0xa54>)
    34ee:	4b41      	ldr	r3, [pc, #260]	; (35f4 <__ieee754_pow+0xa58>)
    34f0:	f001 fe86 	bl	5200 <__aeabi_dmul>
    34f4:	0006      	movs	r6, r0
    34f6:	f7ff fb9a 	bl	2c2e <__ieee754_pow+0x92>
    34fa:	2a00      	cmp	r2, #0
    34fc:	d001      	beq.n	3502 <__ieee754_pow+0x966>
    34fe:	f7ff fba5 	bl	2c4c <__ieee754_pow+0xb0>
    3502:	3214      	adds	r2, #20
    3504:	1ad3      	subs	r3, r2, r3
    3506:	003a      	movs	r2, r7
    3508:	411a      	asrs	r2, r3
    350a:	0011      	movs	r1, r2
    350c:	4099      	lsls	r1, r3
    350e:	428f      	cmp	r7, r1
    3510:	d001      	beq.n	3516 <__ieee754_pow+0x97a>
    3512:	f7ff fb6f 	bl	2bf4 <__ieee754_pow+0x58>
    3516:	2301      	movs	r3, #1
    3518:	4013      	ands	r3, r2
    351a:	2202      	movs	r2, #2
    351c:	1ad3      	subs	r3, r2, r3
    351e:	469b      	mov	fp, r3
    3520:	f7ff fb68 	bl	2bf4 <__ieee754_pow+0x58>
    3524:	4b30      	ldr	r3, [pc, #192]	; (35e8 <__ieee754_pow+0xa4c>)
    3526:	429e      	cmp	r6, r3
    3528:	dd00      	ble.n	352c <__ieee754_pow+0x990>
    352a:	e64e      	b.n	31ca <__ieee754_pow+0x62e>
    352c:	2300      	movs	r3, #0
    352e:	4699      	mov	r9, r3
    3530:	4698      	mov	r8, r3
    3532:	e67a      	b.n	322a <__ieee754_pow+0x68e>
    3534:	0002      	movs	r2, r0
    3536:	000b      	movs	r3, r1
    3538:	f7ff fc14 	bl	2d64 <__ieee754_pow+0x1c8>
    353c:	2380      	movs	r3, #128	; 0x80
    353e:	4c2e      	ldr	r4, [pc, #184]	; (35f8 <__ieee754_pow+0xa5c>)
    3540:	05db      	lsls	r3, r3, #23
    3542:	9308      	str	r3, [sp, #32]
    3544:	9409      	str	r4, [sp, #36]	; 0x24
    3546:	4b2d      	ldr	r3, [pc, #180]	; (35fc <__ieee754_pow+0xa60>)
    3548:	4c2d      	ldr	r4, [pc, #180]	; (3600 <__ieee754_pow+0xa64>)
    354a:	2200      	movs	r2, #0
    354c:	930c      	str	r3, [sp, #48]	; 0x30
    354e:	940d      	str	r4, [sp, #52]	; 0x34
    3550:	2480      	movs	r4, #128	; 0x80
    3552:	4b2c      	ldr	r3, [pc, #176]	; (3604 <__ieee754_pow+0xa68>)
    3554:	02e4      	lsls	r4, r4, #11
    3556:	9206      	str	r2, [sp, #24]
    3558:	9307      	str	r3, [sp, #28]
    355a:	e456      	b.n	2e0a <__ieee754_pow+0x26e>
    355c:	4643      	mov	r3, r8
    355e:	425b      	negs	r3, r3
    3560:	4698      	mov	r8, r3
    3562:	e651      	b.n	3208 <__ieee754_pow+0x66c>
    3564:	4642      	mov	r2, r8
    3566:	f000 f9fd 	bl	3964 <scalbn>
    356a:	e707      	b.n	337c <__ieee754_pow+0x7e0>
    356c:	fffffc02 	.word	0xfffffc02
    3570:	fffffc01 	.word	0xfffffc01
    3574:	000fffff 	.word	0x000fffff
    3578:	3fe62e43 	.word	0x3fe62e43
    357c:	fefa39ef 	.word	0xfefa39ef
    3580:	3fe62e42 	.word	0x3fe62e42
    3584:	0ca86c39 	.word	0x0ca86c39
    3588:	be205c61 	.word	0xbe205c61
    358c:	72bea4d0 	.word	0x72bea4d0
    3590:	3e663769 	.word	0x3e663769
    3594:	c5d26bf1 	.word	0xc5d26bf1
    3598:	3ebbbd41 	.word	0x3ebbbd41
    359c:	af25de2c 	.word	0xaf25de2c
    35a0:	3f11566a 	.word	0x3f11566a
    35a4:	16bebd93 	.word	0x16bebd93
    35a8:	3f66c16c 	.word	0x3f66c16c
    35ac:	5555553e 	.word	0x5555553e
    35b0:	3fc55555 	.word	0x3fc55555
    35b4:	3ff00000 	.word	0x3ff00000
    35b8:	4090cbff 	.word	0x4090cbff
    35bc:	3f6f3400 	.word	0x3f6f3400
    35c0:	c2f8f359 	.word	0xc2f8f359
    35c4:	01a56e1f 	.word	0x01a56e1f
    35c8:	bff00000 	.word	0xbff00000
    35cc:	3feffffe 	.word	0x3feffffe
    35d0:	3ff71547 	.word	0x3ff71547
    35d4:	f85ddf44 	.word	0xf85ddf44
    35d8:	3e54ae0b 	.word	0x3e54ae0b
    35dc:	3fd00000 	.word	0x3fd00000
    35e0:	55555555 	.word	0x55555555
    35e4:	3fd55555 	.word	0x3fd55555
    35e8:	3fe00000 	.word	0x3fe00000
    35ec:	652b82fe 	.word	0x652b82fe
    35f0:	8800759c 	.word	0x8800759c
    35f4:	7e37e43c 	.word	0x7e37e43c
    35f8:	3fe2b803 	.word	0x3fe2b803
    35fc:	43cfd006 	.word	0x43cfd006
    3600:	3e4cfdeb 	.word	0x3e4cfdeb
    3604:	3ff80000 	.word	0x3ff80000

00003608 <__ieee754_sqrt>:
    3608:	b5f0      	push	{r4, r5, r6, r7, lr}
    360a:	4656      	mov	r6, sl
    360c:	464d      	mov	r5, r9
    360e:	4644      	mov	r4, r8
    3610:	465f      	mov	r7, fp
    3612:	4b75      	ldr	r3, [pc, #468]	; (37e8 <__ieee754_sqrt+0x1e0>)
    3614:	b4f0      	push	{r4, r5, r6, r7}
    3616:	000a      	movs	r2, r1
    3618:	000d      	movs	r5, r1
    361a:	0019      	movs	r1, r3
    361c:	b083      	sub	sp, #12
    361e:	0006      	movs	r6, r0
    3620:	0004      	movs	r4, r0
    3622:	4029      	ands	r1, r5
    3624:	4299      	cmp	r1, r3
    3626:	d100      	bne.n	362a <__ieee754_sqrt+0x22>
    3628:	e0ba      	b.n	37a0 <__ieee754_sqrt+0x198>
    362a:	2d00      	cmp	r5, #0
    362c:	dc00      	bgt.n	3630 <__ieee754_sqrt+0x28>
    362e:	e094      	b.n	375a <__ieee754_sqrt+0x152>
    3630:	152d      	asrs	r5, r5, #20
    3632:	d100      	bne.n	3636 <__ieee754_sqrt+0x2e>
    3634:	e0a3      	b.n	377e <__ieee754_sqrt+0x176>
    3636:	4b6d      	ldr	r3, [pc, #436]	; (37ec <__ieee754_sqrt+0x1e4>)
    3638:	0312      	lsls	r2, r2, #12
    363a:	469c      	mov	ip, r3
    363c:	2380      	movs	r3, #128	; 0x80
    363e:	0b12      	lsrs	r2, r2, #12
    3640:	035b      	lsls	r3, r3, #13
    3642:	4465      	add	r5, ip
    3644:	431a      	orrs	r2, r3
    3646:	07eb      	lsls	r3, r5, #31
    3648:	d500      	bpl.n	364c <__ieee754_sqrt+0x44>
    364a:	e081      	b.n	3750 <__ieee754_sqrt+0x148>
    364c:	106b      	asrs	r3, r5, #1
    364e:	4698      	mov	r8, r3
    3650:	0fe3      	lsrs	r3, r4, #31
    3652:	189b      	adds	r3, r3, r2
    3654:	189b      	adds	r3, r3, r2
    3656:	2280      	movs	r2, #128	; 0x80
    3658:	2116      	movs	r1, #22
    365a:	2600      	movs	r6, #0
    365c:	2700      	movs	r7, #0
    365e:	0064      	lsls	r4, r4, #1
    3660:	0392      	lsls	r2, r2, #14
    3662:	18b8      	adds	r0, r7, r2
    3664:	4298      	cmp	r0, r3
    3666:	dc02      	bgt.n	366e <__ieee754_sqrt+0x66>
    3668:	1887      	adds	r7, r0, r2
    366a:	1a1b      	subs	r3, r3, r0
    366c:	18b6      	adds	r6, r6, r2
    366e:	0fe0      	lsrs	r0, r4, #31
    3670:	005b      	lsls	r3, r3, #1
    3672:	3901      	subs	r1, #1
    3674:	181b      	adds	r3, r3, r0
    3676:	0064      	lsls	r4, r4, #1
    3678:	0852      	lsrs	r2, r2, #1
    367a:	2900      	cmp	r1, #0
    367c:	d1f1      	bne.n	3662 <__ieee754_sqrt+0x5a>
    367e:	2200      	movs	r2, #0
    3680:	9201      	str	r2, [sp, #4]
    3682:	4694      	mov	ip, r2
    3684:	2280      	movs	r2, #128	; 0x80
    3686:	0612      	lsls	r2, r2, #24
    3688:	2020      	movs	r0, #32
    368a:	4691      	mov	r9, r2
    368c:	e009      	b.n	36a2 <__ieee754_sqrt+0x9a>
    368e:	429f      	cmp	r7, r3
    3690:	d041      	beq.n	3716 <__ieee754_sqrt+0x10e>
    3692:	0fe1      	lsrs	r1, r4, #31
    3694:	18c9      	adds	r1, r1, r3
    3696:	3801      	subs	r0, #1
    3698:	18cb      	adds	r3, r1, r3
    369a:	0064      	lsls	r4, r4, #1
    369c:	0852      	lsrs	r2, r2, #1
    369e:	2800      	cmp	r0, #0
    36a0:	d01e      	beq.n	36e0 <__ieee754_sqrt+0xd8>
    36a2:	4661      	mov	r1, ip
    36a4:	1851      	adds	r1, r2, r1
    36a6:	429f      	cmp	r7, r3
    36a8:	daf1      	bge.n	368e <__ieee754_sqrt+0x86>
    36aa:	188d      	adds	r5, r1, r2
    36ac:	46ac      	mov	ip, r5
    36ae:	0fcd      	lsrs	r5, r1, #31
    36b0:	07ed      	lsls	r5, r5, #31
    36b2:	46ba      	mov	sl, r7
    36b4:	454d      	cmp	r5, r9
    36b6:	d039      	beq.n	372c <__ieee754_sqrt+0x124>
    36b8:	1bdb      	subs	r3, r3, r7
    36ba:	428c      	cmp	r4, r1
    36bc:	41bf      	sbcs	r7, r7
    36be:	427f      	negs	r7, r7
    36c0:	1bdb      	subs	r3, r3, r7
    36c2:	1a64      	subs	r4, r4, r1
    36c4:	9901      	ldr	r1, [sp, #4]
    36c6:	3801      	subs	r0, #1
    36c8:	468b      	mov	fp, r1
    36ca:	4493      	add	fp, r2
    36cc:	4659      	mov	r1, fp
    36ce:	9101      	str	r1, [sp, #4]
    36d0:	0fe1      	lsrs	r1, r4, #31
    36d2:	18c9      	adds	r1, r1, r3
    36d4:	4657      	mov	r7, sl
    36d6:	18cb      	adds	r3, r1, r3
    36d8:	0064      	lsls	r4, r4, #1
    36da:	0852      	lsrs	r2, r2, #1
    36dc:	2800      	cmp	r0, #0
    36de:	d1e0      	bne.n	36a2 <__ieee754_sqrt+0x9a>
    36e0:	4323      	orrs	r3, r4
    36e2:	d12b      	bne.n	373c <__ieee754_sqrt+0x134>
    36e4:	9b01      	ldr	r3, [sp, #4]
    36e6:	085b      	lsrs	r3, r3, #1
    36e8:	4941      	ldr	r1, [pc, #260]	; (37f0 <__ieee754_sqrt+0x1e8>)
    36ea:	1072      	asrs	r2, r6, #1
    36ec:	468c      	mov	ip, r1
    36ee:	4462      	add	r2, ip
    36f0:	07f1      	lsls	r1, r6, #31
    36f2:	d502      	bpl.n	36fa <__ieee754_sqrt+0xf2>
    36f4:	2180      	movs	r1, #128	; 0x80
    36f6:	0609      	lsls	r1, r1, #24
    36f8:	430b      	orrs	r3, r1
    36fa:	4641      	mov	r1, r8
    36fc:	0509      	lsls	r1, r1, #20
    36fe:	188d      	adds	r5, r1, r2
    3700:	001e      	movs	r6, r3
    3702:	002f      	movs	r7, r5
    3704:	0030      	movs	r0, r6
    3706:	0039      	movs	r1, r7
    3708:	b003      	add	sp, #12
    370a:	bc3c      	pop	{r2, r3, r4, r5}
    370c:	4690      	mov	r8, r2
    370e:	4699      	mov	r9, r3
    3710:	46a2      	mov	sl, r4
    3712:	46ab      	mov	fp, r5
    3714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3716:	42a1      	cmp	r1, r4
    3718:	d80e      	bhi.n	3738 <__ieee754_sqrt+0x130>
    371a:	188d      	adds	r5, r1, r2
    371c:	46ac      	mov	ip, r5
    371e:	0fcd      	lsrs	r5, r1, #31
    3720:	07ed      	lsls	r5, r5, #31
    3722:	454d      	cmp	r5, r9
    3724:	d048      	beq.n	37b8 <__ieee754_sqrt+0x1b0>
    3726:	469a      	mov	sl, r3
    3728:	2300      	movs	r3, #0
    372a:	e7ca      	b.n	36c2 <__ieee754_sqrt+0xba>
    372c:	4665      	mov	r5, ip
    372e:	2d00      	cmp	r5, #0
    3730:	dbc2      	blt.n	36b8 <__ieee754_sqrt+0xb0>
    3732:	1c7d      	adds	r5, r7, #1
    3734:	46aa      	mov	sl, r5
    3736:	e7bf      	b.n	36b8 <__ieee754_sqrt+0xb0>
    3738:	003b      	movs	r3, r7
    373a:	e7aa      	b.n	3692 <__ieee754_sqrt+0x8a>
    373c:	9b01      	ldr	r3, [sp, #4]
    373e:	3301      	adds	r3, #1
    3740:	d03e      	beq.n	37c0 <__ieee754_sqrt+0x1b8>
    3742:	9a01      	ldr	r2, [sp, #4]
    3744:	2301      	movs	r3, #1
    3746:	4694      	mov	ip, r2
    3748:	4013      	ands	r3, r2
    374a:	4463      	add	r3, ip
    374c:	085b      	lsrs	r3, r3, #1
    374e:	e7cb      	b.n	36e8 <__ieee754_sqrt+0xe0>
    3750:	0fe3      	lsrs	r3, r4, #31
    3752:	0052      	lsls	r2, r2, #1
    3754:	189a      	adds	r2, r3, r2
    3756:	0064      	lsls	r4, r4, #1
    3758:	e778      	b.n	364c <__ieee754_sqrt+0x44>
    375a:	006b      	lsls	r3, r5, #1
    375c:	085b      	lsrs	r3, r3, #1
    375e:	4303      	orrs	r3, r0
    3760:	002f      	movs	r7, r5
    3762:	2b00      	cmp	r3, #0
    3764:	d0ce      	beq.n	3704 <__ieee754_sqrt+0xfc>
    3766:	2500      	movs	r5, #0
    3768:	2a00      	cmp	r2, #0
    376a:	d131      	bne.n	37d0 <__ieee754_sqrt+0x1c8>
    376c:	0ae2      	lsrs	r2, r4, #11
    376e:	3d15      	subs	r5, #21
    3770:	0564      	lsls	r4, r4, #21
    3772:	2a00      	cmp	r2, #0
    3774:	d0fa      	beq.n	376c <__ieee754_sqrt+0x164>
    3776:	2380      	movs	r3, #128	; 0x80
    3778:	035b      	lsls	r3, r3, #13
    377a:	421a      	tst	r2, r3
    377c:	d123      	bne.n	37c6 <__ieee754_sqrt+0x1be>
    377e:	2080      	movs	r0, #128	; 0x80
    3780:	2300      	movs	r3, #0
    3782:	0340      	lsls	r0, r0, #13
    3784:	e000      	b.n	3788 <__ieee754_sqrt+0x180>
    3786:	000b      	movs	r3, r1
    3788:	0052      	lsls	r2, r2, #1
    378a:	1c59      	adds	r1, r3, #1
    378c:	4202      	tst	r2, r0
    378e:	d0fa      	beq.n	3786 <__ieee754_sqrt+0x17e>
    3790:	2020      	movs	r0, #32
    3792:	1a40      	subs	r0, r0, r1
    3794:	1aed      	subs	r5, r5, r3
    3796:	0023      	movs	r3, r4
    3798:	40c3      	lsrs	r3, r0
    379a:	408c      	lsls	r4, r1
    379c:	431a      	orrs	r2, r3
    379e:	e74a      	b.n	3636 <__ieee754_sqrt+0x2e>
    37a0:	0002      	movs	r2, r0
    37a2:	002b      	movs	r3, r5
    37a4:	0029      	movs	r1, r5
    37a6:	f001 fd2b 	bl	5200 <__aeabi_dmul>
    37aa:	0032      	movs	r2, r6
    37ac:	002b      	movs	r3, r5
    37ae:	f000 fdd7 	bl	4360 <__aeabi_dadd>
    37b2:	0006      	movs	r6, r0
    37b4:	000f      	movs	r7, r1
    37b6:	e7a5      	b.n	3704 <__ieee754_sqrt+0xfc>
    37b8:	4665      	mov	r5, ip
    37ba:	2d00      	cmp	r5, #0
    37bc:	dab9      	bge.n	3732 <__ieee754_sqrt+0x12a>
    37be:	e7b2      	b.n	3726 <__ieee754_sqrt+0x11e>
    37c0:	3601      	adds	r6, #1
    37c2:	2300      	movs	r3, #0
    37c4:	e790      	b.n	36e8 <__ieee754_sqrt+0xe0>
    37c6:	2301      	movs	r3, #1
    37c8:	2020      	movs	r0, #32
    37ca:	425b      	negs	r3, r3
    37cc:	2100      	movs	r1, #0
    37ce:	e7e1      	b.n	3794 <__ieee754_sqrt+0x18c>
    37d0:	003b      	movs	r3, r7
    37d2:	0002      	movs	r2, r0
    37d4:	0039      	movs	r1, r7
    37d6:	f001 ff8d 	bl	56f4 <__aeabi_dsub>
    37da:	0002      	movs	r2, r0
    37dc:	000b      	movs	r3, r1
    37de:	f001 f8eb 	bl	49b8 <__aeabi_ddiv>
    37e2:	0006      	movs	r6, r0
    37e4:	000f      	movs	r7, r1
    37e6:	e78d      	b.n	3704 <__ieee754_sqrt+0xfc>
    37e8:	7ff00000 	.word	0x7ff00000
    37ec:	fffffc01 	.word	0xfffffc01
    37f0:	3fe00000 	.word	0x3fe00000

000037f4 <fabs>:
    37f4:	0049      	lsls	r1, r1, #1
    37f6:	084b      	lsrs	r3, r1, #1
    37f8:	0019      	movs	r1, r3
    37fa:	4770      	bx	lr

000037fc <finite>:
    37fc:	4b03      	ldr	r3, [pc, #12]	; (380c <finite+0x10>)
    37fe:	0048      	lsls	r0, r1, #1
    3800:	469c      	mov	ip, r3
    3802:	0840      	lsrs	r0, r0, #1
    3804:	4460      	add	r0, ip
    3806:	0fc0      	lsrs	r0, r0, #31
    3808:	4770      	bx	lr
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	80100000 	.word	0x80100000

00003810 <matherr>:
    3810:	2000      	movs	r0, #0
    3812:	4770      	bx	lr

00003814 <nan>:
    3814:	2000      	movs	r0, #0
    3816:	4901      	ldr	r1, [pc, #4]	; (381c <nan+0x8>)
    3818:	4770      	bx	lr
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	7ff80000 	.word	0x7ff80000

00003820 <rint>:
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	4647      	mov	r7, r8
    3824:	b480      	push	{r7}
    3826:	0fcb      	lsrs	r3, r1, #31
    3828:	4698      	mov	r8, r3
    382a:	4c4a      	ldr	r4, [pc, #296]	; (3954 <rint+0x134>)
    382c:	004b      	lsls	r3, r1, #1
    382e:	0d5b      	lsrs	r3, r3, #21
    3830:	191e      	adds	r6, r3, r4
    3832:	b082      	sub	sp, #8
    3834:	0007      	movs	r7, r0
    3836:	000a      	movs	r2, r1
    3838:	2e13      	cmp	r6, #19
    383a:	dc35      	bgt.n	38a8 <rint+0x88>
    383c:	2e00      	cmp	r6, #0
    383e:	db57      	blt.n	38f0 <rint+0xd0>
    3840:	4b45      	ldr	r3, [pc, #276]	; (3958 <rint+0x138>)
    3842:	0004      	movs	r4, r0
    3844:	4133      	asrs	r3, r6
    3846:	001f      	movs	r7, r3
    3848:	400f      	ands	r7, r1
    384a:	4307      	orrs	r7, r0
    384c:	000d      	movs	r5, r1
    384e:	2f00      	cmp	r7, #0
    3850:	d024      	beq.n	389c <rint+0x7c>
    3852:	085b      	lsrs	r3, r3, #1
    3854:	001c      	movs	r4, r3
    3856:	400c      	ands	r4, r1
    3858:	4320      	orrs	r0, r4
    385a:	2700      	movs	r7, #0
    385c:	2800      	cmp	r0, #0
    385e:	d007      	beq.n	3870 <rint+0x50>
    3860:	2e13      	cmp	r6, #19
    3862:	d100      	bne.n	3866 <rint+0x46>
    3864:	e072      	b.n	394c <rint+0x12c>
    3866:	2280      	movs	r2, #128	; 0x80
    3868:	02d2      	lsls	r2, r2, #11
    386a:	4132      	asrs	r2, r6
    386c:	4399      	bics	r1, r3
    386e:	430a      	orrs	r2, r1
    3870:	4643      	mov	r3, r8
    3872:	00de      	lsls	r6, r3, #3
    3874:	4b39      	ldr	r3, [pc, #228]	; (395c <rint+0x13c>)
    3876:	0011      	movs	r1, r2
    3878:	199e      	adds	r6, r3, r6
    387a:	6834      	ldr	r4, [r6, #0]
    387c:	6875      	ldr	r5, [r6, #4]
    387e:	0038      	movs	r0, r7
    3880:	0022      	movs	r2, r4
    3882:	002b      	movs	r3, r5
    3884:	f000 fd6c 	bl	4360 <__aeabi_dadd>
    3888:	9000      	str	r0, [sp, #0]
    388a:	9101      	str	r1, [sp, #4]
    388c:	9800      	ldr	r0, [sp, #0]
    388e:	9901      	ldr	r1, [sp, #4]
    3890:	0022      	movs	r2, r4
    3892:	002b      	movs	r3, r5
    3894:	f001 ff2e 	bl	56f4 <__aeabi_dsub>
    3898:	0004      	movs	r4, r0
    389a:	000d      	movs	r5, r1
    389c:	0020      	movs	r0, r4
    389e:	0029      	movs	r1, r5
    38a0:	b002      	add	sp, #8
    38a2:	bc04      	pop	{r2}
    38a4:	4690      	mov	r8, r2
    38a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a8:	2e33      	cmp	r6, #51	; 0x33
    38aa:	dd0c      	ble.n	38c6 <rint+0xa6>
    38ac:	2380      	movs	r3, #128	; 0x80
    38ae:	0004      	movs	r4, r0
    38b0:	000d      	movs	r5, r1
    38b2:	00db      	lsls	r3, r3, #3
    38b4:	429e      	cmp	r6, r3
    38b6:	d1f1      	bne.n	389c <rint+0x7c>
    38b8:	0002      	movs	r2, r0
    38ba:	000b      	movs	r3, r1
    38bc:	f000 fd50 	bl	4360 <__aeabi_dadd>
    38c0:	0004      	movs	r4, r0
    38c2:	000d      	movs	r5, r1
    38c4:	e7ea      	b.n	389c <rint+0x7c>
    38c6:	4c26      	ldr	r4, [pc, #152]	; (3960 <rint+0x140>)
    38c8:	000d      	movs	r5, r1
    38ca:	46a4      	mov	ip, r4
    38cc:	2401      	movs	r4, #1
    38ce:	4463      	add	r3, ip
    38d0:	4264      	negs	r4, r4
    38d2:	40dc      	lsrs	r4, r3
    38d4:	46a4      	mov	ip, r4
    38d6:	4661      	mov	r1, ip
    38d8:	0004      	movs	r4, r0
    38da:	4201      	tst	r1, r0
    38dc:	d0de      	beq.n	389c <rint+0x7c>
    38de:	0849      	lsrs	r1, r1, #1
    38e0:	4201      	tst	r1, r0
    38e2:	d0c5      	beq.n	3870 <rint+0x50>
    38e4:	2780      	movs	r7, #128	; 0x80
    38e6:	05ff      	lsls	r7, r7, #23
    38e8:	411f      	asrs	r7, r3
    38ea:	4388      	bics	r0, r1
    38ec:	4307      	orrs	r7, r0
    38ee:	e7bf      	b.n	3870 <rint+0x50>
    38f0:	004b      	lsls	r3, r1, #1
    38f2:	085b      	lsrs	r3, r3, #1
    38f4:	4303      	orrs	r3, r0
    38f6:	0004      	movs	r4, r0
    38f8:	000d      	movs	r5, r1
    38fa:	2b00      	cmp	r3, #0
    38fc:	d0ce      	beq.n	389c <rint+0x7c>
    38fe:	030b      	lsls	r3, r1, #12
    3900:	0b1b      	lsrs	r3, r3, #12
    3902:	4303      	orrs	r3, r0
    3904:	425a      	negs	r2, r3
    3906:	4313      	orrs	r3, r2
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	0b1b      	lsrs	r3, r3, #12
    390c:	0312      	lsls	r2, r2, #12
    390e:	4013      	ands	r3, r2
    3910:	0c4a      	lsrs	r2, r1, #17
    3912:	0452      	lsls	r2, r2, #17
    3914:	4313      	orrs	r3, r2
    3916:	0019      	movs	r1, r3
    3918:	4643      	mov	r3, r8
    391a:	4a10      	ldr	r2, [pc, #64]	; (395c <rint+0x13c>)
    391c:	00db      	lsls	r3, r3, #3
    391e:	18d3      	adds	r3, r2, r3
    3920:	681c      	ldr	r4, [r3, #0]
    3922:	685d      	ldr	r5, [r3, #4]
    3924:	0022      	movs	r2, r4
    3926:	002b      	movs	r3, r5
    3928:	f000 fd1a 	bl	4360 <__aeabi_dadd>
    392c:	9000      	str	r0, [sp, #0]
    392e:	9101      	str	r1, [sp, #4]
    3930:	9800      	ldr	r0, [sp, #0]
    3932:	9901      	ldr	r1, [sp, #4]
    3934:	0022      	movs	r2, r4
    3936:	002b      	movs	r3, r5
    3938:	f001 fedc 	bl	56f4 <__aeabi_dsub>
    393c:	4642      	mov	r2, r8
    393e:	004b      	lsls	r3, r1, #1
    3940:	085b      	lsrs	r3, r3, #1
    3942:	07d6      	lsls	r6, r2, #31
    3944:	4333      	orrs	r3, r6
    3946:	0004      	movs	r4, r0
    3948:	001d      	movs	r5, r3
    394a:	e7a7      	b.n	389c <rint+0x7c>
    394c:	2780      	movs	r7, #128	; 0x80
    394e:	063f      	lsls	r7, r7, #24
    3950:	e789      	b.n	3866 <rint+0x46>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	fffffc01 	.word	0xfffffc01
    3958:	000fffff 	.word	0x000fffff
    395c:	000065d8 	.word	0x000065d8
    3960:	fffffbed 	.word	0xfffffbed

00003964 <scalbn>:
    3964:	004b      	lsls	r3, r1, #1
    3966:	b570      	push	{r4, r5, r6, lr}
    3968:	0d5b      	lsrs	r3, r3, #21
    396a:	0014      	movs	r4, r2
    396c:	000a      	movs	r2, r1
    396e:	2b00      	cmp	r3, #0
    3970:	d11a      	bne.n	39a8 <scalbn+0x44>
    3972:	004b      	lsls	r3, r1, #1
    3974:	085b      	lsrs	r3, r3, #1
    3976:	4303      	orrs	r3, r0
    3978:	d015      	beq.n	39a6 <scalbn+0x42>
    397a:	2200      	movs	r2, #0
    397c:	4b22      	ldr	r3, [pc, #136]	; (3a08 <scalbn+0xa4>)
    397e:	f001 fc3f 	bl	5200 <__aeabi_dmul>
    3982:	4b22      	ldr	r3, [pc, #136]	; (3a0c <scalbn+0xa8>)
    3984:	000a      	movs	r2, r1
    3986:	429c      	cmp	r4, r3
    3988:	db22      	blt.n	39d0 <scalbn+0x6c>
    398a:	004b      	lsls	r3, r1, #1
    398c:	0d5b      	lsrs	r3, r3, #21
    398e:	3b36      	subs	r3, #54	; 0x36
    3990:	4d1f      	ldr	r5, [pc, #124]	; (3a10 <scalbn+0xac>)
    3992:	18e3      	adds	r3, r4, r3
    3994:	42ab      	cmp	r3, r5
    3996:	dc20      	bgt.n	39da <scalbn+0x76>
    3998:	2b00      	cmp	r3, #0
    399a:	dd0d      	ble.n	39b8 <scalbn+0x54>
    399c:	4c1d      	ldr	r4, [pc, #116]	; (3a14 <scalbn+0xb0>)
    399e:	051b      	lsls	r3, r3, #20
    39a0:	4022      	ands	r2, r4
    39a2:	431a      	orrs	r2, r3
    39a4:	0011      	movs	r1, r2
    39a6:	bd70      	pop	{r4, r5, r6, pc}
    39a8:	4d1b      	ldr	r5, [pc, #108]	; (3a18 <scalbn+0xb4>)
    39aa:	42ab      	cmp	r3, r5
    39ac:	d1f0      	bne.n	3990 <scalbn+0x2c>
    39ae:	0002      	movs	r2, r0
    39b0:	000b      	movs	r3, r1
    39b2:	f000 fcd5 	bl	4360 <__aeabi_dadd>
    39b6:	e7f6      	b.n	39a6 <scalbn+0x42>
    39b8:	001d      	movs	r5, r3
    39ba:	3535      	adds	r5, #53	; 0x35
    39bc:	da18      	bge.n	39f0 <scalbn+0x8c>
    39be:	4b17      	ldr	r3, [pc, #92]	; (3a1c <scalbn+0xb8>)
    39c0:	0002      	movs	r2, r0
    39c2:	429c      	cmp	r4, r3
    39c4:	dc0a      	bgt.n	39dc <scalbn+0x78>
    39c6:	000b      	movs	r3, r1
    39c8:	4815      	ldr	r0, [pc, #84]	; (3a20 <scalbn+0xbc>)
    39ca:	4916      	ldr	r1, [pc, #88]	; (3a24 <scalbn+0xc0>)
    39cc:	f000 f832 	bl	3a34 <copysign>
    39d0:	4a13      	ldr	r2, [pc, #76]	; (3a20 <scalbn+0xbc>)
    39d2:	4b14      	ldr	r3, [pc, #80]	; (3a24 <scalbn+0xc0>)
    39d4:	f001 fc14 	bl	5200 <__aeabi_dmul>
    39d8:	e7e5      	b.n	39a6 <scalbn+0x42>
    39da:	0002      	movs	r2, r0
    39dc:	000b      	movs	r3, r1
    39de:	4812      	ldr	r0, [pc, #72]	; (3a28 <scalbn+0xc4>)
    39e0:	4912      	ldr	r1, [pc, #72]	; (3a2c <scalbn+0xc8>)
    39e2:	f000 f827 	bl	3a34 <copysign>
    39e6:	4a10      	ldr	r2, [pc, #64]	; (3a28 <scalbn+0xc4>)
    39e8:	4b10      	ldr	r3, [pc, #64]	; (3a2c <scalbn+0xc8>)
    39ea:	f001 fc09 	bl	5200 <__aeabi_dmul>
    39ee:	e7da      	b.n	39a6 <scalbn+0x42>
    39f0:	4c08      	ldr	r4, [pc, #32]	; (3a14 <scalbn+0xb0>)
    39f2:	3336      	adds	r3, #54	; 0x36
    39f4:	4022      	ands	r2, r4
    39f6:	051b      	lsls	r3, r3, #20
    39f8:	4313      	orrs	r3, r2
    39fa:	0019      	movs	r1, r3
    39fc:	2200      	movs	r2, #0
    39fe:	4b0c      	ldr	r3, [pc, #48]	; (3a30 <scalbn+0xcc>)
    3a00:	f001 fbfe 	bl	5200 <__aeabi_dmul>
    3a04:	e7cf      	b.n	39a6 <scalbn+0x42>
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	43500000 	.word	0x43500000
    3a0c:	ffff3cb0 	.word	0xffff3cb0
    3a10:	000007fe 	.word	0x000007fe
    3a14:	800fffff 	.word	0x800fffff
    3a18:	000007ff 	.word	0x000007ff
    3a1c:	0000c350 	.word	0x0000c350
    3a20:	c2f8f359 	.word	0xc2f8f359
    3a24:	01a56e1f 	.word	0x01a56e1f
    3a28:	8800759c 	.word	0x8800759c
    3a2c:	7e37e43c 	.word	0x7e37e43c
    3a30:	3c900000 	.word	0x3c900000

00003a34 <copysign>:
    3a34:	b530      	push	{r4, r5, lr}
    3a36:	004a      	lsls	r2, r1, #1
    3a38:	0fdb      	lsrs	r3, r3, #31
    3a3a:	07db      	lsls	r3, r3, #31
    3a3c:	0852      	lsrs	r2, r2, #1
    3a3e:	431a      	orrs	r2, r3
    3a40:	0011      	movs	r1, r2
    3a42:	bd30      	pop	{r4, r5, pc}

00003a44 <__aeabi_cdrcmple>:
    3a44:	4684      	mov	ip, r0
    3a46:	1c10      	adds	r0, r2, #0
    3a48:	4662      	mov	r2, ip
    3a4a:	468c      	mov	ip, r1
    3a4c:	1c19      	adds	r1, r3, #0
    3a4e:	4663      	mov	r3, ip
    3a50:	e000      	b.n	3a54 <__aeabi_cdcmpeq>
    3a52:	46c0      	nop			; (mov r8, r8)

00003a54 <__aeabi_cdcmpeq>:
    3a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a56:	f001 fb69 	bl	512c <__ledf2>
    3a5a:	2800      	cmp	r0, #0
    3a5c:	d401      	bmi.n	3a62 <__aeabi_cdcmpeq+0xe>
    3a5e:	2100      	movs	r1, #0
    3a60:	42c8      	cmn	r0, r1
    3a62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a64 <__aeabi_dcmpeq>:
    3a64:	b510      	push	{r4, lr}
    3a66:	f001 fabd 	bl	4fe4 <__eqdf2>
    3a6a:	4240      	negs	r0, r0
    3a6c:	3001      	adds	r0, #1
    3a6e:	bd10      	pop	{r4, pc}

00003a70 <__aeabi_dcmplt>:
    3a70:	b510      	push	{r4, lr}
    3a72:	f001 fb5b 	bl	512c <__ledf2>
    3a76:	2800      	cmp	r0, #0
    3a78:	db01      	blt.n	3a7e <__aeabi_dcmplt+0xe>
    3a7a:	2000      	movs	r0, #0
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	2001      	movs	r0, #1
    3a80:	bd10      	pop	{r4, pc}
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <__aeabi_dcmple>:
    3a84:	b510      	push	{r4, lr}
    3a86:	f001 fb51 	bl	512c <__ledf2>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	dd01      	ble.n	3a92 <__aeabi_dcmple+0xe>
    3a8e:	2000      	movs	r0, #0
    3a90:	bd10      	pop	{r4, pc}
    3a92:	2001      	movs	r0, #1
    3a94:	bd10      	pop	{r4, pc}
    3a96:	46c0      	nop			; (mov r8, r8)

00003a98 <__aeabi_dcmpgt>:
    3a98:	b510      	push	{r4, lr}
    3a9a:	f001 fae3 	bl	5064 <__gedf2>
    3a9e:	2800      	cmp	r0, #0
    3aa0:	dc01      	bgt.n	3aa6 <__aeabi_dcmpgt+0xe>
    3aa2:	2000      	movs	r0, #0
    3aa4:	bd10      	pop	{r4, pc}
    3aa6:	2001      	movs	r0, #1
    3aa8:	bd10      	pop	{r4, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)

00003aac <__aeabi_dcmpge>:
    3aac:	b510      	push	{r4, lr}
    3aae:	f001 fad9 	bl	5064 <__gedf2>
    3ab2:	2800      	cmp	r0, #0
    3ab4:	da01      	bge.n	3aba <__aeabi_dcmpge+0xe>
    3ab6:	2000      	movs	r0, #0
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	2001      	movs	r0, #1
    3abc:	bd10      	pop	{r4, pc}
    3abe:	46c0      	nop			; (mov r8, r8)

00003ac0 <__aeabi_cfrcmple>:
    3ac0:	4684      	mov	ip, r0
    3ac2:	1c08      	adds	r0, r1, #0
    3ac4:	4661      	mov	r1, ip
    3ac6:	e7ff      	b.n	3ac8 <__aeabi_cfcmpeq>

00003ac8 <__aeabi_cfcmpeq>:
    3ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3aca:	f000 f901 	bl	3cd0 <__lesf2>
    3ace:	2800      	cmp	r0, #0
    3ad0:	d401      	bmi.n	3ad6 <__aeabi_cfcmpeq+0xe>
    3ad2:	2100      	movs	r1, #0
    3ad4:	42c8      	cmn	r0, r1
    3ad6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ad8 <__aeabi_fcmpeq>:
    3ad8:	b510      	push	{r4, lr}
    3ada:	f000 f88d 	bl	3bf8 <__eqsf2>
    3ade:	4240      	negs	r0, r0
    3ae0:	3001      	adds	r0, #1
    3ae2:	bd10      	pop	{r4, pc}

00003ae4 <__aeabi_fcmplt>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	f000 f8f3 	bl	3cd0 <__lesf2>
    3aea:	2800      	cmp	r0, #0
    3aec:	db01      	blt.n	3af2 <__aeabi_fcmplt+0xe>
    3aee:	2000      	movs	r0, #0
    3af0:	bd10      	pop	{r4, pc}
    3af2:	2001      	movs	r0, #1
    3af4:	bd10      	pop	{r4, pc}
    3af6:	46c0      	nop			; (mov r8, r8)

00003af8 <__aeabi_fcmple>:
    3af8:	b510      	push	{r4, lr}
    3afa:	f000 f8e9 	bl	3cd0 <__lesf2>
    3afe:	2800      	cmp	r0, #0
    3b00:	dd01      	ble.n	3b06 <__aeabi_fcmple+0xe>
    3b02:	2000      	movs	r0, #0
    3b04:	bd10      	pop	{r4, pc}
    3b06:	2001      	movs	r0, #1
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__aeabi_fcmpgt>:
    3b0c:	b510      	push	{r4, lr}
    3b0e:	f000 f89b 	bl	3c48 <__gesf2>
    3b12:	2800      	cmp	r0, #0
    3b14:	dc01      	bgt.n	3b1a <__aeabi_fcmpgt+0xe>
    3b16:	2000      	movs	r0, #0
    3b18:	bd10      	pop	{r4, pc}
    3b1a:	2001      	movs	r0, #1
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)

00003b20 <__aeabi_fcmpge>:
    3b20:	b510      	push	{r4, lr}
    3b22:	f000 f891 	bl	3c48 <__gesf2>
    3b26:	2800      	cmp	r0, #0
    3b28:	da01      	bge.n	3b2e <__aeabi_fcmpge+0xe>
    3b2a:	2000      	movs	r0, #0
    3b2c:	bd10      	pop	{r4, pc}
    3b2e:	2001      	movs	r0, #1
    3b30:	bd10      	pop	{r4, pc}
    3b32:	46c0      	nop			; (mov r8, r8)

00003b34 <__aeabi_lmul>:
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	464f      	mov	r7, r9
    3b38:	4646      	mov	r6, r8
    3b3a:	b4c0      	push	{r6, r7}
    3b3c:	0416      	lsls	r6, r2, #16
    3b3e:	0c36      	lsrs	r6, r6, #16
    3b40:	4699      	mov	r9, r3
    3b42:	0033      	movs	r3, r6
    3b44:	0405      	lsls	r5, r0, #16
    3b46:	0c2c      	lsrs	r4, r5, #16
    3b48:	0c07      	lsrs	r7, r0, #16
    3b4a:	0c15      	lsrs	r5, r2, #16
    3b4c:	4363      	muls	r3, r4
    3b4e:	437e      	muls	r6, r7
    3b50:	436f      	muls	r7, r5
    3b52:	4365      	muls	r5, r4
    3b54:	0c1c      	lsrs	r4, r3, #16
    3b56:	19ad      	adds	r5, r5, r6
    3b58:	1964      	adds	r4, r4, r5
    3b5a:	469c      	mov	ip, r3
    3b5c:	42a6      	cmp	r6, r4
    3b5e:	d903      	bls.n	3b68 <__aeabi_lmul+0x34>
    3b60:	2380      	movs	r3, #128	; 0x80
    3b62:	025b      	lsls	r3, r3, #9
    3b64:	4698      	mov	r8, r3
    3b66:	4447      	add	r7, r8
    3b68:	4663      	mov	r3, ip
    3b6a:	0c25      	lsrs	r5, r4, #16
    3b6c:	19ef      	adds	r7, r5, r7
    3b6e:	041d      	lsls	r5, r3, #16
    3b70:	464b      	mov	r3, r9
    3b72:	434a      	muls	r2, r1
    3b74:	4343      	muls	r3, r0
    3b76:	0c2d      	lsrs	r5, r5, #16
    3b78:	0424      	lsls	r4, r4, #16
    3b7a:	1964      	adds	r4, r4, r5
    3b7c:	1899      	adds	r1, r3, r2
    3b7e:	19c9      	adds	r1, r1, r7
    3b80:	0020      	movs	r0, r4
    3b82:	bc0c      	pop	{r2, r3}
    3b84:	4690      	mov	r8, r2
    3b86:	4699      	mov	r9, r3
    3b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)

00003b8c <__aeabi_f2uiz>:
    3b8c:	219e      	movs	r1, #158	; 0x9e
    3b8e:	b510      	push	{r4, lr}
    3b90:	05c9      	lsls	r1, r1, #23
    3b92:	1c04      	adds	r4, r0, #0
    3b94:	f7ff ffc4 	bl	3b20 <__aeabi_fcmpge>
    3b98:	2800      	cmp	r0, #0
    3b9a:	d103      	bne.n	3ba4 <__aeabi_f2uiz+0x18>
    3b9c:	1c20      	adds	r0, r4, #0
    3b9e:	f000 fb75 	bl	428c <__aeabi_f2iz>
    3ba2:	bd10      	pop	{r4, pc}
    3ba4:	219e      	movs	r1, #158	; 0x9e
    3ba6:	1c20      	adds	r0, r4, #0
    3ba8:	05c9      	lsls	r1, r1, #23
    3baa:	f000 f9e9 	bl	3f80 <__aeabi_fsub>
    3bae:	f000 fb6d 	bl	428c <__aeabi_f2iz>
    3bb2:	2380      	movs	r3, #128	; 0x80
    3bb4:	061b      	lsls	r3, r3, #24
    3bb6:	469c      	mov	ip, r3
    3bb8:	4460      	add	r0, ip
    3bba:	e7f2      	b.n	3ba2 <__aeabi_f2uiz+0x16>

00003bbc <__aeabi_d2uiz>:
    3bbc:	b570      	push	{r4, r5, r6, lr}
    3bbe:	2200      	movs	r2, #0
    3bc0:	4b0c      	ldr	r3, [pc, #48]	; (3bf4 <__aeabi_d2uiz+0x38>)
    3bc2:	0004      	movs	r4, r0
    3bc4:	000d      	movs	r5, r1
    3bc6:	f7ff ff71 	bl	3aac <__aeabi_dcmpge>
    3bca:	2800      	cmp	r0, #0
    3bcc:	d104      	bne.n	3bd8 <__aeabi_d2uiz+0x1c>
    3bce:	0020      	movs	r0, r4
    3bd0:	0029      	movs	r1, r5
    3bd2:	f002 f903 	bl	5ddc <__aeabi_d2iz>
    3bd6:	bd70      	pop	{r4, r5, r6, pc}
    3bd8:	4b06      	ldr	r3, [pc, #24]	; (3bf4 <__aeabi_d2uiz+0x38>)
    3bda:	2200      	movs	r2, #0
    3bdc:	0020      	movs	r0, r4
    3bde:	0029      	movs	r1, r5
    3be0:	f001 fd88 	bl	56f4 <__aeabi_dsub>
    3be4:	f002 f8fa 	bl	5ddc <__aeabi_d2iz>
    3be8:	2380      	movs	r3, #128	; 0x80
    3bea:	061b      	lsls	r3, r3, #24
    3bec:	469c      	mov	ip, r3
    3bee:	4460      	add	r0, ip
    3bf0:	e7f1      	b.n	3bd6 <__aeabi_d2uiz+0x1a>
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	41e00000 	.word	0x41e00000

00003bf8 <__eqsf2>:
    3bf8:	0243      	lsls	r3, r0, #9
    3bfa:	b570      	push	{r4, r5, r6, lr}
    3bfc:	0042      	lsls	r2, r0, #1
    3bfe:	004c      	lsls	r4, r1, #1
    3c00:	0a5d      	lsrs	r5, r3, #9
    3c02:	0fc3      	lsrs	r3, r0, #31
    3c04:	0248      	lsls	r0, r1, #9
    3c06:	0e12      	lsrs	r2, r2, #24
    3c08:	0a46      	lsrs	r6, r0, #9
    3c0a:	0e24      	lsrs	r4, r4, #24
    3c0c:	0fc9      	lsrs	r1, r1, #31
    3c0e:	2aff      	cmp	r2, #255	; 0xff
    3c10:	d00f      	beq.n	3c32 <__eqsf2+0x3a>
    3c12:	2cff      	cmp	r4, #255	; 0xff
    3c14:	d011      	beq.n	3c3a <__eqsf2+0x42>
    3c16:	2001      	movs	r0, #1
    3c18:	42a2      	cmp	r2, r4
    3c1a:	d000      	beq.n	3c1e <__eqsf2+0x26>
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	42b5      	cmp	r5, r6
    3c20:	d1fc      	bne.n	3c1c <__eqsf2+0x24>
    3c22:	428b      	cmp	r3, r1
    3c24:	d00d      	beq.n	3c42 <__eqsf2+0x4a>
    3c26:	2a00      	cmp	r2, #0
    3c28:	d1f8      	bne.n	3c1c <__eqsf2+0x24>
    3c2a:	0028      	movs	r0, r5
    3c2c:	1e43      	subs	r3, r0, #1
    3c2e:	4198      	sbcs	r0, r3
    3c30:	e7f4      	b.n	3c1c <__eqsf2+0x24>
    3c32:	2001      	movs	r0, #1
    3c34:	2d00      	cmp	r5, #0
    3c36:	d1f1      	bne.n	3c1c <__eqsf2+0x24>
    3c38:	e7eb      	b.n	3c12 <__eqsf2+0x1a>
    3c3a:	2001      	movs	r0, #1
    3c3c:	2e00      	cmp	r6, #0
    3c3e:	d1ed      	bne.n	3c1c <__eqsf2+0x24>
    3c40:	e7e9      	b.n	3c16 <__eqsf2+0x1e>
    3c42:	2000      	movs	r0, #0
    3c44:	e7ea      	b.n	3c1c <__eqsf2+0x24>
    3c46:	46c0      	nop			; (mov r8, r8)

00003c48 <__gesf2>:
    3c48:	0243      	lsls	r3, r0, #9
    3c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4c:	0042      	lsls	r2, r0, #1
    3c4e:	0a5d      	lsrs	r5, r3, #9
    3c50:	0fc3      	lsrs	r3, r0, #31
    3c52:	0248      	lsls	r0, r1, #9
    3c54:	0a44      	lsrs	r4, r0, #9
    3c56:	0048      	lsls	r0, r1, #1
    3c58:	0e12      	lsrs	r2, r2, #24
    3c5a:	0e00      	lsrs	r0, r0, #24
    3c5c:	0fc9      	lsrs	r1, r1, #31
    3c5e:	2aff      	cmp	r2, #255	; 0xff
    3c60:	d01f      	beq.n	3ca2 <__gesf2+0x5a>
    3c62:	28ff      	cmp	r0, #255	; 0xff
    3c64:	d022      	beq.n	3cac <__gesf2+0x64>
    3c66:	2a00      	cmp	r2, #0
    3c68:	d109      	bne.n	3c7e <__gesf2+0x36>
    3c6a:	426e      	negs	r6, r5
    3c6c:	416e      	adcs	r6, r5
    3c6e:	2800      	cmp	r0, #0
    3c70:	d10f      	bne.n	3c92 <__gesf2+0x4a>
    3c72:	2c00      	cmp	r4, #0
    3c74:	d10d      	bne.n	3c92 <__gesf2+0x4a>
    3c76:	2000      	movs	r0, #0
    3c78:	2d00      	cmp	r5, #0
    3c7a:	d009      	beq.n	3c90 <__gesf2+0x48>
    3c7c:	e005      	b.n	3c8a <__gesf2+0x42>
    3c7e:	2800      	cmp	r0, #0
    3c80:	d101      	bne.n	3c86 <__gesf2+0x3e>
    3c82:	2c00      	cmp	r4, #0
    3c84:	d001      	beq.n	3c8a <__gesf2+0x42>
    3c86:	428b      	cmp	r3, r1
    3c88:	d013      	beq.n	3cb2 <__gesf2+0x6a>
    3c8a:	4258      	negs	r0, r3
    3c8c:	2301      	movs	r3, #1
    3c8e:	4318      	orrs	r0, r3
    3c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c92:	2e00      	cmp	r6, #0
    3c94:	d0f7      	beq.n	3c86 <__gesf2+0x3e>
    3c96:	4248      	negs	r0, r1
    3c98:	4141      	adcs	r1, r0
    3c9a:	2001      	movs	r0, #1
    3c9c:	4249      	negs	r1, r1
    3c9e:	4308      	orrs	r0, r1
    3ca0:	e7f6      	b.n	3c90 <__gesf2+0x48>
    3ca2:	2d00      	cmp	r5, #0
    3ca4:	d0dd      	beq.n	3c62 <__gesf2+0x1a>
    3ca6:	2002      	movs	r0, #2
    3ca8:	4240      	negs	r0, r0
    3caa:	e7f1      	b.n	3c90 <__gesf2+0x48>
    3cac:	2c00      	cmp	r4, #0
    3cae:	d0da      	beq.n	3c66 <__gesf2+0x1e>
    3cb0:	e7f9      	b.n	3ca6 <__gesf2+0x5e>
    3cb2:	4282      	cmp	r2, r0
    3cb4:	dce9      	bgt.n	3c8a <__gesf2+0x42>
    3cb6:	db04      	blt.n	3cc2 <__gesf2+0x7a>
    3cb8:	42a5      	cmp	r5, r4
    3cba:	d8e6      	bhi.n	3c8a <__gesf2+0x42>
    3cbc:	2000      	movs	r0, #0
    3cbe:	42a5      	cmp	r5, r4
    3cc0:	d2e6      	bcs.n	3c90 <__gesf2+0x48>
    3cc2:	4258      	negs	r0, r3
    3cc4:	4143      	adcs	r3, r0
    3cc6:	2001      	movs	r0, #1
    3cc8:	425b      	negs	r3, r3
    3cca:	4318      	orrs	r0, r3
    3ccc:	e7e0      	b.n	3c90 <__gesf2+0x48>
    3cce:	46c0      	nop			; (mov r8, r8)

00003cd0 <__lesf2>:
    3cd0:	0243      	lsls	r3, r0, #9
    3cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd4:	0042      	lsls	r2, r0, #1
    3cd6:	004c      	lsls	r4, r1, #1
    3cd8:	0a5e      	lsrs	r6, r3, #9
    3cda:	0fc3      	lsrs	r3, r0, #31
    3cdc:	0248      	lsls	r0, r1, #9
    3cde:	0e12      	lsrs	r2, r2, #24
    3ce0:	0a45      	lsrs	r5, r0, #9
    3ce2:	0e24      	lsrs	r4, r4, #24
    3ce4:	0fc9      	lsrs	r1, r1, #31
    3ce6:	2aff      	cmp	r2, #255	; 0xff
    3ce8:	d017      	beq.n	3d1a <__lesf2+0x4a>
    3cea:	2cff      	cmp	r4, #255	; 0xff
    3cec:	d019      	beq.n	3d22 <__lesf2+0x52>
    3cee:	2a00      	cmp	r2, #0
    3cf0:	d10b      	bne.n	3d0a <__lesf2+0x3a>
    3cf2:	4270      	negs	r0, r6
    3cf4:	4170      	adcs	r0, r6
    3cf6:	2c00      	cmp	r4, #0
    3cf8:	d017      	beq.n	3d2a <__lesf2+0x5a>
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d007      	beq.n	3d0e <__lesf2+0x3e>
    3cfe:	4248      	negs	r0, r1
    3d00:	4141      	adcs	r1, r0
    3d02:	2001      	movs	r0, #1
    3d04:	4249      	negs	r1, r1
    3d06:	4308      	orrs	r0, r1
    3d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d0a:	2c00      	cmp	r4, #0
    3d0c:	d013      	beq.n	3d36 <__lesf2+0x66>
    3d0e:	428b      	cmp	r3, r1
    3d10:	d014      	beq.n	3d3c <__lesf2+0x6c>
    3d12:	4258      	negs	r0, r3
    3d14:	2301      	movs	r3, #1
    3d16:	4318      	orrs	r0, r3
    3d18:	e7f6      	b.n	3d08 <__lesf2+0x38>
    3d1a:	2002      	movs	r0, #2
    3d1c:	2e00      	cmp	r6, #0
    3d1e:	d1f3      	bne.n	3d08 <__lesf2+0x38>
    3d20:	e7e3      	b.n	3cea <__lesf2+0x1a>
    3d22:	2002      	movs	r0, #2
    3d24:	2d00      	cmp	r5, #0
    3d26:	d1ef      	bne.n	3d08 <__lesf2+0x38>
    3d28:	e7e1      	b.n	3cee <__lesf2+0x1e>
    3d2a:	2d00      	cmp	r5, #0
    3d2c:	d1e5      	bne.n	3cfa <__lesf2+0x2a>
    3d2e:	2000      	movs	r0, #0
    3d30:	2e00      	cmp	r6, #0
    3d32:	d0e9      	beq.n	3d08 <__lesf2+0x38>
    3d34:	e7ed      	b.n	3d12 <__lesf2+0x42>
    3d36:	2d00      	cmp	r5, #0
    3d38:	d1e9      	bne.n	3d0e <__lesf2+0x3e>
    3d3a:	e7ea      	b.n	3d12 <__lesf2+0x42>
    3d3c:	42a2      	cmp	r2, r4
    3d3e:	dce8      	bgt.n	3d12 <__lesf2+0x42>
    3d40:	db04      	blt.n	3d4c <__lesf2+0x7c>
    3d42:	42ae      	cmp	r6, r5
    3d44:	d8e5      	bhi.n	3d12 <__lesf2+0x42>
    3d46:	2000      	movs	r0, #0
    3d48:	42ae      	cmp	r6, r5
    3d4a:	d2dd      	bcs.n	3d08 <__lesf2+0x38>
    3d4c:	4258      	negs	r0, r3
    3d4e:	4143      	adcs	r3, r0
    3d50:	2001      	movs	r0, #1
    3d52:	425b      	negs	r3, r3
    3d54:	4318      	orrs	r0, r3
    3d56:	e7d7      	b.n	3d08 <__lesf2+0x38>

00003d58 <__aeabi_fmul>:
    3d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d5a:	4657      	mov	r7, sl
    3d5c:	464e      	mov	r6, r9
    3d5e:	4645      	mov	r5, r8
    3d60:	0043      	lsls	r3, r0, #1
    3d62:	b4e0      	push	{r5, r6, r7}
    3d64:	0246      	lsls	r6, r0, #9
    3d66:	4688      	mov	r8, r1
    3d68:	0a76      	lsrs	r6, r6, #9
    3d6a:	0e1f      	lsrs	r7, r3, #24
    3d6c:	0fc4      	lsrs	r4, r0, #31
    3d6e:	2f00      	cmp	r7, #0
    3d70:	d047      	beq.n	3e02 <__aeabi_fmul+0xaa>
    3d72:	2fff      	cmp	r7, #255	; 0xff
    3d74:	d025      	beq.n	3dc2 <__aeabi_fmul+0x6a>
    3d76:	2300      	movs	r3, #0
    3d78:	2580      	movs	r5, #128	; 0x80
    3d7a:	469a      	mov	sl, r3
    3d7c:	4699      	mov	r9, r3
    3d7e:	00f6      	lsls	r6, r6, #3
    3d80:	04ed      	lsls	r5, r5, #19
    3d82:	432e      	orrs	r6, r5
    3d84:	3f7f      	subs	r7, #127	; 0x7f
    3d86:	4643      	mov	r3, r8
    3d88:	4642      	mov	r2, r8
    3d8a:	025d      	lsls	r5, r3, #9
    3d8c:	0fd2      	lsrs	r2, r2, #31
    3d8e:	005b      	lsls	r3, r3, #1
    3d90:	0a6d      	lsrs	r5, r5, #9
    3d92:	0e1b      	lsrs	r3, r3, #24
    3d94:	4690      	mov	r8, r2
    3d96:	d040      	beq.n	3e1a <__aeabi_fmul+0xc2>
    3d98:	2bff      	cmp	r3, #255	; 0xff
    3d9a:	d039      	beq.n	3e10 <__aeabi_fmul+0xb8>
    3d9c:	2280      	movs	r2, #128	; 0x80
    3d9e:	2000      	movs	r0, #0
    3da0:	00ed      	lsls	r5, r5, #3
    3da2:	04d2      	lsls	r2, r2, #19
    3da4:	4315      	orrs	r5, r2
    3da6:	3b7f      	subs	r3, #127	; 0x7f
    3da8:	18fb      	adds	r3, r7, r3
    3daa:	4642      	mov	r2, r8
    3dac:	4657      	mov	r7, sl
    3dae:	1c59      	adds	r1, r3, #1
    3db0:	4062      	eors	r2, r4
    3db2:	468c      	mov	ip, r1
    3db4:	4307      	orrs	r7, r0
    3db6:	2f0f      	cmp	r7, #15
    3db8:	d85c      	bhi.n	3e74 <__aeabi_fmul+0x11c>
    3dba:	496f      	ldr	r1, [pc, #444]	; (3f78 <__aeabi_fmul+0x220>)
    3dbc:	00bf      	lsls	r7, r7, #2
    3dbe:	59c9      	ldr	r1, [r1, r7]
    3dc0:	468f      	mov	pc, r1
    3dc2:	2e00      	cmp	r6, #0
    3dc4:	d145      	bne.n	3e52 <__aeabi_fmul+0xfa>
    3dc6:	2308      	movs	r3, #8
    3dc8:	469a      	mov	sl, r3
    3dca:	3b06      	subs	r3, #6
    3dcc:	4699      	mov	r9, r3
    3dce:	e7da      	b.n	3d86 <__aeabi_fmul+0x2e>
    3dd0:	4642      	mov	r2, r8
    3dd2:	2802      	cmp	r0, #2
    3dd4:	d02d      	beq.n	3e32 <__aeabi_fmul+0xda>
    3dd6:	2803      	cmp	r0, #3
    3dd8:	d100      	bne.n	3ddc <__aeabi_fmul+0x84>
    3dda:	e0c3      	b.n	3f64 <__aeabi_fmul+0x20c>
    3ddc:	2801      	cmp	r0, #1
    3dde:	d000      	beq.n	3de2 <__aeabi_fmul+0x8a>
    3de0:	e0a2      	b.n	3f28 <__aeabi_fmul+0x1d0>
    3de2:	2500      	movs	r5, #0
    3de4:	2600      	movs	r6, #0
    3de6:	4002      	ands	r2, r0
    3de8:	b2d4      	uxtb	r4, r2
    3dea:	0276      	lsls	r6, r6, #9
    3dec:	05ed      	lsls	r5, r5, #23
    3dee:	0a76      	lsrs	r6, r6, #9
    3df0:	432e      	orrs	r6, r5
    3df2:	07e4      	lsls	r4, r4, #31
    3df4:	4326      	orrs	r6, r4
    3df6:	0030      	movs	r0, r6
    3df8:	bc1c      	pop	{r2, r3, r4}
    3dfa:	4690      	mov	r8, r2
    3dfc:	4699      	mov	r9, r3
    3dfe:	46a2      	mov	sl, r4
    3e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e02:	2e00      	cmp	r6, #0
    3e04:	d11a      	bne.n	3e3c <__aeabi_fmul+0xe4>
    3e06:	2304      	movs	r3, #4
    3e08:	469a      	mov	sl, r3
    3e0a:	3b03      	subs	r3, #3
    3e0c:	4699      	mov	r9, r3
    3e0e:	e7ba      	b.n	3d86 <__aeabi_fmul+0x2e>
    3e10:	002a      	movs	r2, r5
    3e12:	1e51      	subs	r1, r2, #1
    3e14:	418a      	sbcs	r2, r1
    3e16:	1c90      	adds	r0, r2, #2
    3e18:	e7c6      	b.n	3da8 <__aeabi_fmul+0x50>
    3e1a:	2001      	movs	r0, #1
    3e1c:	2d00      	cmp	r5, #0
    3e1e:	d0c3      	beq.n	3da8 <__aeabi_fmul+0x50>
    3e20:	0028      	movs	r0, r5
    3e22:	f002 f9f7 	bl	6214 <__clzsi2>
    3e26:	1f43      	subs	r3, r0, #5
    3e28:	3076      	adds	r0, #118	; 0x76
    3e2a:	409d      	lsls	r5, r3
    3e2c:	4243      	negs	r3, r0
    3e2e:	2000      	movs	r0, #0
    3e30:	e7ba      	b.n	3da8 <__aeabi_fmul+0x50>
    3e32:	2401      	movs	r4, #1
    3e34:	25ff      	movs	r5, #255	; 0xff
    3e36:	4014      	ands	r4, r2
    3e38:	2600      	movs	r6, #0
    3e3a:	e7d6      	b.n	3dea <__aeabi_fmul+0x92>
    3e3c:	0030      	movs	r0, r6
    3e3e:	f002 f9e9 	bl	6214 <__clzsi2>
    3e42:	1f43      	subs	r3, r0, #5
    3e44:	409e      	lsls	r6, r3
    3e46:	2300      	movs	r3, #0
    3e48:	3076      	adds	r0, #118	; 0x76
    3e4a:	4247      	negs	r7, r0
    3e4c:	469a      	mov	sl, r3
    3e4e:	4699      	mov	r9, r3
    3e50:	e799      	b.n	3d86 <__aeabi_fmul+0x2e>
    3e52:	230c      	movs	r3, #12
    3e54:	469a      	mov	sl, r3
    3e56:	3b09      	subs	r3, #9
    3e58:	4699      	mov	r9, r3
    3e5a:	e794      	b.n	3d86 <__aeabi_fmul+0x2e>
    3e5c:	2680      	movs	r6, #128	; 0x80
    3e5e:	2400      	movs	r4, #0
    3e60:	03f6      	lsls	r6, r6, #15
    3e62:	25ff      	movs	r5, #255	; 0xff
    3e64:	e7c1      	b.n	3dea <__aeabi_fmul+0x92>
    3e66:	0035      	movs	r5, r6
    3e68:	4648      	mov	r0, r9
    3e6a:	e7b2      	b.n	3dd2 <__aeabi_fmul+0x7a>
    3e6c:	0035      	movs	r5, r6
    3e6e:	0022      	movs	r2, r4
    3e70:	4648      	mov	r0, r9
    3e72:	e7ae      	b.n	3dd2 <__aeabi_fmul+0x7a>
    3e74:	0429      	lsls	r1, r5, #16
    3e76:	0c09      	lsrs	r1, r1, #16
    3e78:	0008      	movs	r0, r1
    3e7a:	0c37      	lsrs	r7, r6, #16
    3e7c:	0436      	lsls	r6, r6, #16
    3e7e:	0c36      	lsrs	r6, r6, #16
    3e80:	0c2c      	lsrs	r4, r5, #16
    3e82:	4379      	muls	r1, r7
    3e84:	4370      	muls	r0, r6
    3e86:	4367      	muls	r7, r4
    3e88:	4374      	muls	r4, r6
    3e8a:	0c06      	lsrs	r6, r0, #16
    3e8c:	1864      	adds	r4, r4, r1
    3e8e:	1936      	adds	r6, r6, r4
    3e90:	42b1      	cmp	r1, r6
    3e92:	d903      	bls.n	3e9c <__aeabi_fmul+0x144>
    3e94:	2180      	movs	r1, #128	; 0x80
    3e96:	0249      	lsls	r1, r1, #9
    3e98:	4688      	mov	r8, r1
    3e9a:	4447      	add	r7, r8
    3e9c:	0400      	lsls	r0, r0, #16
    3e9e:	0c00      	lsrs	r0, r0, #16
    3ea0:	0431      	lsls	r1, r6, #16
    3ea2:	1809      	adds	r1, r1, r0
    3ea4:	018d      	lsls	r5, r1, #6
    3ea6:	1e68      	subs	r0, r5, #1
    3ea8:	4185      	sbcs	r5, r0
    3eaa:	0e89      	lsrs	r1, r1, #26
    3eac:	4329      	orrs	r1, r5
    3eae:	0c35      	lsrs	r5, r6, #16
    3eb0:	19ed      	adds	r5, r5, r7
    3eb2:	01ad      	lsls	r5, r5, #6
    3eb4:	430d      	orrs	r5, r1
    3eb6:	0129      	lsls	r1, r5, #4
    3eb8:	d504      	bpl.n	3ec4 <__aeabi_fmul+0x16c>
    3eba:	2301      	movs	r3, #1
    3ebc:	0869      	lsrs	r1, r5, #1
    3ebe:	401d      	ands	r5, r3
    3ec0:	4663      	mov	r3, ip
    3ec2:	430d      	orrs	r5, r1
    3ec4:	0019      	movs	r1, r3
    3ec6:	317f      	adds	r1, #127	; 0x7f
    3ec8:	2900      	cmp	r1, #0
    3eca:	dd25      	ble.n	3f18 <__aeabi_fmul+0x1c0>
    3ecc:	0768      	lsls	r0, r5, #29
    3ece:	d004      	beq.n	3eda <__aeabi_fmul+0x182>
    3ed0:	200f      	movs	r0, #15
    3ed2:	4028      	ands	r0, r5
    3ed4:	2804      	cmp	r0, #4
    3ed6:	d000      	beq.n	3eda <__aeabi_fmul+0x182>
    3ed8:	3504      	adds	r5, #4
    3eda:	0128      	lsls	r0, r5, #4
    3edc:	d503      	bpl.n	3ee6 <__aeabi_fmul+0x18e>
    3ede:	4927      	ldr	r1, [pc, #156]	; (3f7c <__aeabi_fmul+0x224>)
    3ee0:	3380      	adds	r3, #128	; 0x80
    3ee2:	400d      	ands	r5, r1
    3ee4:	0019      	movs	r1, r3
    3ee6:	29fe      	cmp	r1, #254	; 0xfe
    3ee8:	dca3      	bgt.n	3e32 <__aeabi_fmul+0xda>
    3eea:	2401      	movs	r4, #1
    3eec:	01ad      	lsls	r5, r5, #6
    3eee:	0a6e      	lsrs	r6, r5, #9
    3ef0:	4014      	ands	r4, r2
    3ef2:	b2cd      	uxtb	r5, r1
    3ef4:	e779      	b.n	3dea <__aeabi_fmul+0x92>
    3ef6:	2080      	movs	r0, #128	; 0x80
    3ef8:	03c0      	lsls	r0, r0, #15
    3efa:	4206      	tst	r6, r0
    3efc:	d007      	beq.n	3f0e <__aeabi_fmul+0x1b6>
    3efe:	4205      	tst	r5, r0
    3f00:	d105      	bne.n	3f0e <__aeabi_fmul+0x1b6>
    3f02:	4328      	orrs	r0, r5
    3f04:	0246      	lsls	r6, r0, #9
    3f06:	0a76      	lsrs	r6, r6, #9
    3f08:	4644      	mov	r4, r8
    3f0a:	25ff      	movs	r5, #255	; 0xff
    3f0c:	e76d      	b.n	3dea <__aeabi_fmul+0x92>
    3f0e:	4306      	orrs	r6, r0
    3f10:	0276      	lsls	r6, r6, #9
    3f12:	0a76      	lsrs	r6, r6, #9
    3f14:	25ff      	movs	r5, #255	; 0xff
    3f16:	e768      	b.n	3dea <__aeabi_fmul+0x92>
    3f18:	2401      	movs	r4, #1
    3f1a:	1a61      	subs	r1, r4, r1
    3f1c:	291b      	cmp	r1, #27
    3f1e:	dd05      	ble.n	3f2c <__aeabi_fmul+0x1d4>
    3f20:	4014      	ands	r4, r2
    3f22:	2500      	movs	r5, #0
    3f24:	2600      	movs	r6, #0
    3f26:	e760      	b.n	3dea <__aeabi_fmul+0x92>
    3f28:	4663      	mov	r3, ip
    3f2a:	e7cb      	b.n	3ec4 <__aeabi_fmul+0x16c>
    3f2c:	002e      	movs	r6, r5
    3f2e:	2320      	movs	r3, #32
    3f30:	40ce      	lsrs	r6, r1
    3f32:	1a59      	subs	r1, r3, r1
    3f34:	408d      	lsls	r5, r1
    3f36:	1e6b      	subs	r3, r5, #1
    3f38:	419d      	sbcs	r5, r3
    3f3a:	432e      	orrs	r6, r5
    3f3c:	0773      	lsls	r3, r6, #29
    3f3e:	d004      	beq.n	3f4a <__aeabi_fmul+0x1f2>
    3f40:	230f      	movs	r3, #15
    3f42:	4033      	ands	r3, r6
    3f44:	2b04      	cmp	r3, #4
    3f46:	d000      	beq.n	3f4a <__aeabi_fmul+0x1f2>
    3f48:	3604      	adds	r6, #4
    3f4a:	0173      	lsls	r3, r6, #5
    3f4c:	d504      	bpl.n	3f58 <__aeabi_fmul+0x200>
    3f4e:	2401      	movs	r4, #1
    3f50:	2501      	movs	r5, #1
    3f52:	4014      	ands	r4, r2
    3f54:	2600      	movs	r6, #0
    3f56:	e748      	b.n	3dea <__aeabi_fmul+0x92>
    3f58:	2401      	movs	r4, #1
    3f5a:	01b6      	lsls	r6, r6, #6
    3f5c:	0a76      	lsrs	r6, r6, #9
    3f5e:	4014      	ands	r4, r2
    3f60:	2500      	movs	r5, #0
    3f62:	e742      	b.n	3dea <__aeabi_fmul+0x92>
    3f64:	2680      	movs	r6, #128	; 0x80
    3f66:	2401      	movs	r4, #1
    3f68:	03f6      	lsls	r6, r6, #15
    3f6a:	432e      	orrs	r6, r5
    3f6c:	0276      	lsls	r6, r6, #9
    3f6e:	0a76      	lsrs	r6, r6, #9
    3f70:	4014      	ands	r4, r2
    3f72:	25ff      	movs	r5, #255	; 0xff
    3f74:	e739      	b.n	3dea <__aeabi_fmul+0x92>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	000065e8 	.word	0x000065e8
    3f7c:	f7ffffff 	.word	0xf7ffffff

00003f80 <__aeabi_fsub>:
    3f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f82:	024a      	lsls	r2, r1, #9
    3f84:	004e      	lsls	r6, r1, #1
    3f86:	0243      	lsls	r3, r0, #9
    3f88:	0044      	lsls	r4, r0, #1
    3f8a:	0e24      	lsrs	r4, r4, #24
    3f8c:	0fc5      	lsrs	r5, r0, #31
    3f8e:	099b      	lsrs	r3, r3, #6
    3f90:	0e36      	lsrs	r6, r6, #24
    3f92:	0fc9      	lsrs	r1, r1, #31
    3f94:	0992      	lsrs	r2, r2, #6
    3f96:	2eff      	cmp	r6, #255	; 0xff
    3f98:	d100      	bne.n	3f9c <__aeabi_fsub+0x1c>
    3f9a:	e083      	b.n	40a4 <__aeabi_fsub+0x124>
    3f9c:	2001      	movs	r0, #1
    3f9e:	4041      	eors	r1, r0
    3fa0:	1ba0      	subs	r0, r4, r6
    3fa2:	42a9      	cmp	r1, r5
    3fa4:	d05c      	beq.n	4060 <__aeabi_fsub+0xe0>
    3fa6:	2800      	cmp	r0, #0
    3fa8:	dc00      	bgt.n	3fac <__aeabi_fsub+0x2c>
    3faa:	e095      	b.n	40d8 <__aeabi_fsub+0x158>
    3fac:	2e00      	cmp	r6, #0
    3fae:	d11c      	bne.n	3fea <__aeabi_fsub+0x6a>
    3fb0:	2a00      	cmp	r2, #0
    3fb2:	d000      	beq.n	3fb6 <__aeabi_fsub+0x36>
    3fb4:	e081      	b.n	40ba <__aeabi_fsub+0x13a>
    3fb6:	075a      	lsls	r2, r3, #29
    3fb8:	d004      	beq.n	3fc4 <__aeabi_fsub+0x44>
    3fba:	220f      	movs	r2, #15
    3fbc:	401a      	ands	r2, r3
    3fbe:	2a04      	cmp	r2, #4
    3fc0:	d000      	beq.n	3fc4 <__aeabi_fsub+0x44>
    3fc2:	3304      	adds	r3, #4
    3fc4:	015a      	lsls	r2, r3, #5
    3fc6:	d53b      	bpl.n	4040 <__aeabi_fsub+0xc0>
    3fc8:	3401      	adds	r4, #1
    3fca:	2cff      	cmp	r4, #255	; 0xff
    3fcc:	d100      	bne.n	3fd0 <__aeabi_fsub+0x50>
    3fce:	e091      	b.n	40f4 <__aeabi_fsub+0x174>
    3fd0:	2001      	movs	r0, #1
    3fd2:	019b      	lsls	r3, r3, #6
    3fd4:	0a5b      	lsrs	r3, r3, #9
    3fd6:	b2e4      	uxtb	r4, r4
    3fd8:	4005      	ands	r5, r0
    3fda:	025b      	lsls	r3, r3, #9
    3fdc:	05e4      	lsls	r4, r4, #23
    3fde:	0a5b      	lsrs	r3, r3, #9
    3fe0:	07ed      	lsls	r5, r5, #31
    3fe2:	4323      	orrs	r3, r4
    3fe4:	432b      	orrs	r3, r5
    3fe6:	0018      	movs	r0, r3
    3fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fea:	2cff      	cmp	r4, #255	; 0xff
    3fec:	d0e3      	beq.n	3fb6 <__aeabi_fsub+0x36>
    3fee:	2180      	movs	r1, #128	; 0x80
    3ff0:	04c9      	lsls	r1, r1, #19
    3ff2:	430a      	orrs	r2, r1
    3ff4:	281b      	cmp	r0, #27
    3ff6:	dd00      	ble.n	3ffa <__aeabi_fsub+0x7a>
    3ff8:	e090      	b.n	411c <__aeabi_fsub+0x19c>
    3ffa:	0016      	movs	r6, r2
    3ffc:	2120      	movs	r1, #32
    3ffe:	40c6      	lsrs	r6, r0
    4000:	1a08      	subs	r0, r1, r0
    4002:	4082      	lsls	r2, r0
    4004:	1e51      	subs	r1, r2, #1
    4006:	418a      	sbcs	r2, r1
    4008:	4332      	orrs	r2, r6
    400a:	1a9b      	subs	r3, r3, r2
    400c:	015a      	lsls	r2, r3, #5
    400e:	d515      	bpl.n	403c <__aeabi_fsub+0xbc>
    4010:	019b      	lsls	r3, r3, #6
    4012:	099e      	lsrs	r6, r3, #6
    4014:	0030      	movs	r0, r6
    4016:	f002 f8fd 	bl	6214 <__clzsi2>
    401a:	3805      	subs	r0, #5
    401c:	4086      	lsls	r6, r0
    401e:	4284      	cmp	r4, r0
    4020:	dc6c      	bgt.n	40fc <__aeabi_fsub+0x17c>
    4022:	1b04      	subs	r4, r0, r4
    4024:	0033      	movs	r3, r6
    4026:	2020      	movs	r0, #32
    4028:	3401      	adds	r4, #1
    402a:	40e3      	lsrs	r3, r4
    402c:	1b04      	subs	r4, r0, r4
    402e:	40a6      	lsls	r6, r4
    4030:	1e72      	subs	r2, r6, #1
    4032:	4196      	sbcs	r6, r2
    4034:	2400      	movs	r4, #0
    4036:	4333      	orrs	r3, r6
    4038:	e7bd      	b.n	3fb6 <__aeabi_fsub+0x36>
    403a:	000d      	movs	r5, r1
    403c:	075a      	lsls	r2, r3, #29
    403e:	d1bc      	bne.n	3fba <__aeabi_fsub+0x3a>
    4040:	08df      	lsrs	r7, r3, #3
    4042:	2301      	movs	r3, #1
    4044:	401d      	ands	r5, r3
    4046:	2cff      	cmp	r4, #255	; 0xff
    4048:	d133      	bne.n	40b2 <__aeabi_fsub+0x132>
    404a:	2f00      	cmp	r7, #0
    404c:	d100      	bne.n	4050 <__aeabi_fsub+0xd0>
    404e:	e090      	b.n	4172 <__aeabi_fsub+0x1f2>
    4050:	2280      	movs	r2, #128	; 0x80
    4052:	03d2      	lsls	r2, r2, #15
    4054:	0013      	movs	r3, r2
    4056:	433b      	orrs	r3, r7
    4058:	025b      	lsls	r3, r3, #9
    405a:	0a5b      	lsrs	r3, r3, #9
    405c:	24ff      	movs	r4, #255	; 0xff
    405e:	e7bc      	b.n	3fda <__aeabi_fsub+0x5a>
    4060:	2800      	cmp	r0, #0
    4062:	dd4f      	ble.n	4104 <__aeabi_fsub+0x184>
    4064:	2e00      	cmp	r6, #0
    4066:	d02e      	beq.n	40c6 <__aeabi_fsub+0x146>
    4068:	2cff      	cmp	r4, #255	; 0xff
    406a:	d0a4      	beq.n	3fb6 <__aeabi_fsub+0x36>
    406c:	2580      	movs	r5, #128	; 0x80
    406e:	04ed      	lsls	r5, r5, #19
    4070:	432a      	orrs	r2, r5
    4072:	281b      	cmp	r0, #27
    4074:	dd00      	ble.n	4078 <__aeabi_fsub+0xf8>
    4076:	e097      	b.n	41a8 <__aeabi_fsub+0x228>
    4078:	0016      	movs	r6, r2
    407a:	2520      	movs	r5, #32
    407c:	40c6      	lsrs	r6, r0
    407e:	1a28      	subs	r0, r5, r0
    4080:	4082      	lsls	r2, r0
    4082:	1e50      	subs	r0, r2, #1
    4084:	4182      	sbcs	r2, r0
    4086:	4332      	orrs	r2, r6
    4088:	189b      	adds	r3, r3, r2
    408a:	015a      	lsls	r2, r3, #5
    408c:	d5d5      	bpl.n	403a <__aeabi_fsub+0xba>
    408e:	3401      	adds	r4, #1
    4090:	2cff      	cmp	r4, #255	; 0xff
    4092:	d06d      	beq.n	4170 <__aeabi_fsub+0x1f0>
    4094:	2201      	movs	r2, #1
    4096:	487b      	ldr	r0, [pc, #492]	; (4284 <__aeabi_fsub+0x304>)
    4098:	401a      	ands	r2, r3
    409a:	085b      	lsrs	r3, r3, #1
    409c:	4003      	ands	r3, r0
    409e:	4313      	orrs	r3, r2
    40a0:	000d      	movs	r5, r1
    40a2:	e788      	b.n	3fb6 <__aeabi_fsub+0x36>
    40a4:	2a00      	cmp	r2, #0
    40a6:	d000      	beq.n	40aa <__aeabi_fsub+0x12a>
    40a8:	e77a      	b.n	3fa0 <__aeabi_fsub+0x20>
    40aa:	e777      	b.n	3f9c <__aeabi_fsub+0x1c>
    40ac:	1e03      	subs	r3, r0, #0
    40ae:	d1c5      	bne.n	403c <__aeabi_fsub+0xbc>
    40b0:	2500      	movs	r5, #0
    40b2:	027b      	lsls	r3, r7, #9
    40b4:	0a5b      	lsrs	r3, r3, #9
    40b6:	b2e4      	uxtb	r4, r4
    40b8:	e78f      	b.n	3fda <__aeabi_fsub+0x5a>
    40ba:	3801      	subs	r0, #1
    40bc:	2800      	cmp	r0, #0
    40be:	d0a4      	beq.n	400a <__aeabi_fsub+0x8a>
    40c0:	2cff      	cmp	r4, #255	; 0xff
    40c2:	d197      	bne.n	3ff4 <__aeabi_fsub+0x74>
    40c4:	e777      	b.n	3fb6 <__aeabi_fsub+0x36>
    40c6:	2a00      	cmp	r2, #0
    40c8:	d100      	bne.n	40cc <__aeabi_fsub+0x14c>
    40ca:	e774      	b.n	3fb6 <__aeabi_fsub+0x36>
    40cc:	3801      	subs	r0, #1
    40ce:	2800      	cmp	r0, #0
    40d0:	d0da      	beq.n	4088 <__aeabi_fsub+0x108>
    40d2:	2cff      	cmp	r4, #255	; 0xff
    40d4:	d1cd      	bne.n	4072 <__aeabi_fsub+0xf2>
    40d6:	e76e      	b.n	3fb6 <__aeabi_fsub+0x36>
    40d8:	2800      	cmp	r0, #0
    40da:	d121      	bne.n	4120 <__aeabi_fsub+0x1a0>
    40dc:	1c60      	adds	r0, r4, #1
    40de:	b2c0      	uxtb	r0, r0
    40e0:	2801      	cmp	r0, #1
    40e2:	dd58      	ble.n	4196 <__aeabi_fsub+0x216>
    40e4:	2780      	movs	r7, #128	; 0x80
    40e6:	1a9e      	subs	r6, r3, r2
    40e8:	04ff      	lsls	r7, r7, #19
    40ea:	4037      	ands	r7, r6
    40ec:	d02f      	beq.n	414e <__aeabi_fsub+0x1ce>
    40ee:	1ad6      	subs	r6, r2, r3
    40f0:	000d      	movs	r5, r1
    40f2:	e78f      	b.n	4014 <__aeabi_fsub+0x94>
    40f4:	2301      	movs	r3, #1
    40f6:	401d      	ands	r5, r3
    40f8:	2300      	movs	r3, #0
    40fa:	e76e      	b.n	3fda <__aeabi_fsub+0x5a>
    40fc:	4b62      	ldr	r3, [pc, #392]	; (4288 <__aeabi_fsub+0x308>)
    40fe:	1a24      	subs	r4, r4, r0
    4100:	4033      	ands	r3, r6
    4102:	e758      	b.n	3fb6 <__aeabi_fsub+0x36>
    4104:	2800      	cmp	r0, #0
    4106:	d151      	bne.n	41ac <__aeabi_fsub+0x22c>
    4108:	1c60      	adds	r0, r4, #1
    410a:	b2c6      	uxtb	r6, r0
    410c:	2e01      	cmp	r6, #1
    410e:	dd33      	ble.n	4178 <__aeabi_fsub+0x1f8>
    4110:	28ff      	cmp	r0, #255	; 0xff
    4112:	d02d      	beq.n	4170 <__aeabi_fsub+0x1f0>
    4114:	189b      	adds	r3, r3, r2
    4116:	085b      	lsrs	r3, r3, #1
    4118:	0004      	movs	r4, r0
    411a:	e74c      	b.n	3fb6 <__aeabi_fsub+0x36>
    411c:	2201      	movs	r2, #1
    411e:	e774      	b.n	400a <__aeabi_fsub+0x8a>
    4120:	2c00      	cmp	r4, #0
    4122:	d01a      	beq.n	415a <__aeabi_fsub+0x1da>
    4124:	2eff      	cmp	r6, #255	; 0xff
    4126:	d01f      	beq.n	4168 <__aeabi_fsub+0x1e8>
    4128:	2480      	movs	r4, #128	; 0x80
    412a:	04e4      	lsls	r4, r4, #19
    412c:	4240      	negs	r0, r0
    412e:	4323      	orrs	r3, r4
    4130:	281b      	cmp	r0, #27
    4132:	dd00      	ble.n	4136 <__aeabi_fsub+0x1b6>
    4134:	e096      	b.n	4264 <__aeabi_fsub+0x2e4>
    4136:	001d      	movs	r5, r3
    4138:	2420      	movs	r4, #32
    413a:	40c5      	lsrs	r5, r0
    413c:	1a20      	subs	r0, r4, r0
    413e:	4083      	lsls	r3, r0
    4140:	1e58      	subs	r0, r3, #1
    4142:	4183      	sbcs	r3, r0
    4144:	432b      	orrs	r3, r5
    4146:	1ad3      	subs	r3, r2, r3
    4148:	0034      	movs	r4, r6
    414a:	000d      	movs	r5, r1
    414c:	e75e      	b.n	400c <__aeabi_fsub+0x8c>
    414e:	2e00      	cmp	r6, #0
    4150:	d000      	beq.n	4154 <__aeabi_fsub+0x1d4>
    4152:	e75f      	b.n	4014 <__aeabi_fsub+0x94>
    4154:	2500      	movs	r5, #0
    4156:	2400      	movs	r4, #0
    4158:	e7ab      	b.n	40b2 <__aeabi_fsub+0x132>
    415a:	2b00      	cmp	r3, #0
    415c:	d044      	beq.n	41e8 <__aeabi_fsub+0x268>
    415e:	43c0      	mvns	r0, r0
    4160:	2800      	cmp	r0, #0
    4162:	d0f0      	beq.n	4146 <__aeabi_fsub+0x1c6>
    4164:	2eff      	cmp	r6, #255	; 0xff
    4166:	d1e3      	bne.n	4130 <__aeabi_fsub+0x1b0>
    4168:	0013      	movs	r3, r2
    416a:	24ff      	movs	r4, #255	; 0xff
    416c:	000d      	movs	r5, r1
    416e:	e722      	b.n	3fb6 <__aeabi_fsub+0x36>
    4170:	000d      	movs	r5, r1
    4172:	24ff      	movs	r4, #255	; 0xff
    4174:	2300      	movs	r3, #0
    4176:	e730      	b.n	3fda <__aeabi_fsub+0x5a>
    4178:	2c00      	cmp	r4, #0
    417a:	d15d      	bne.n	4238 <__aeabi_fsub+0x2b8>
    417c:	2b00      	cmp	r3, #0
    417e:	d07d      	beq.n	427c <__aeabi_fsub+0x2fc>
    4180:	2a00      	cmp	r2, #0
    4182:	d100      	bne.n	4186 <__aeabi_fsub+0x206>
    4184:	e717      	b.n	3fb6 <__aeabi_fsub+0x36>
    4186:	189b      	adds	r3, r3, r2
    4188:	015a      	lsls	r2, r3, #5
    418a:	d400      	bmi.n	418e <__aeabi_fsub+0x20e>
    418c:	e756      	b.n	403c <__aeabi_fsub+0xbc>
    418e:	4a3e      	ldr	r2, [pc, #248]	; (4288 <__aeabi_fsub+0x308>)
    4190:	0004      	movs	r4, r0
    4192:	4013      	ands	r3, r2
    4194:	e70f      	b.n	3fb6 <__aeabi_fsub+0x36>
    4196:	2c00      	cmp	r4, #0
    4198:	d11e      	bne.n	41d8 <__aeabi_fsub+0x258>
    419a:	2b00      	cmp	r3, #0
    419c:	d12f      	bne.n	41fe <__aeabi_fsub+0x27e>
    419e:	2a00      	cmp	r2, #0
    41a0:	d065      	beq.n	426e <__aeabi_fsub+0x2ee>
    41a2:	0013      	movs	r3, r2
    41a4:	000d      	movs	r5, r1
    41a6:	e706      	b.n	3fb6 <__aeabi_fsub+0x36>
    41a8:	2201      	movs	r2, #1
    41aa:	e76d      	b.n	4088 <__aeabi_fsub+0x108>
    41ac:	2c00      	cmp	r4, #0
    41ae:	d11f      	bne.n	41f0 <__aeabi_fsub+0x270>
    41b0:	2b00      	cmp	r3, #0
    41b2:	d059      	beq.n	4268 <__aeabi_fsub+0x2e8>
    41b4:	43c0      	mvns	r0, r0
    41b6:	2800      	cmp	r0, #0
    41b8:	d00b      	beq.n	41d2 <__aeabi_fsub+0x252>
    41ba:	2eff      	cmp	r6, #255	; 0xff
    41bc:	d04f      	beq.n	425e <__aeabi_fsub+0x2de>
    41be:	281b      	cmp	r0, #27
    41c0:	dc5e      	bgt.n	4280 <__aeabi_fsub+0x300>
    41c2:	001d      	movs	r5, r3
    41c4:	2420      	movs	r4, #32
    41c6:	40c5      	lsrs	r5, r0
    41c8:	1a20      	subs	r0, r4, r0
    41ca:	4083      	lsls	r3, r0
    41cc:	1e58      	subs	r0, r3, #1
    41ce:	4183      	sbcs	r3, r0
    41d0:	432b      	orrs	r3, r5
    41d2:	189b      	adds	r3, r3, r2
    41d4:	0034      	movs	r4, r6
    41d6:	e758      	b.n	408a <__aeabi_fsub+0x10a>
    41d8:	2b00      	cmp	r3, #0
    41da:	d11c      	bne.n	4216 <__aeabi_fsub+0x296>
    41dc:	2a00      	cmp	r2, #0
    41de:	d049      	beq.n	4274 <__aeabi_fsub+0x2f4>
    41e0:	0013      	movs	r3, r2
    41e2:	000d      	movs	r5, r1
    41e4:	24ff      	movs	r4, #255	; 0xff
    41e6:	e6e6      	b.n	3fb6 <__aeabi_fsub+0x36>
    41e8:	0013      	movs	r3, r2
    41ea:	0034      	movs	r4, r6
    41ec:	000d      	movs	r5, r1
    41ee:	e6e2      	b.n	3fb6 <__aeabi_fsub+0x36>
    41f0:	2eff      	cmp	r6, #255	; 0xff
    41f2:	d034      	beq.n	425e <__aeabi_fsub+0x2de>
    41f4:	2480      	movs	r4, #128	; 0x80
    41f6:	04e4      	lsls	r4, r4, #19
    41f8:	4240      	negs	r0, r0
    41fa:	4323      	orrs	r3, r4
    41fc:	e7df      	b.n	41be <__aeabi_fsub+0x23e>
    41fe:	2a00      	cmp	r2, #0
    4200:	d100      	bne.n	4204 <__aeabi_fsub+0x284>
    4202:	e6d8      	b.n	3fb6 <__aeabi_fsub+0x36>
    4204:	2780      	movs	r7, #128	; 0x80
    4206:	1a98      	subs	r0, r3, r2
    4208:	04ff      	lsls	r7, r7, #19
    420a:	4007      	ands	r7, r0
    420c:	d100      	bne.n	4210 <__aeabi_fsub+0x290>
    420e:	e74d      	b.n	40ac <__aeabi_fsub+0x12c>
    4210:	1ad3      	subs	r3, r2, r3
    4212:	000d      	movs	r5, r1
    4214:	e6cf      	b.n	3fb6 <__aeabi_fsub+0x36>
    4216:	24ff      	movs	r4, #255	; 0xff
    4218:	2a00      	cmp	r2, #0
    421a:	d100      	bne.n	421e <__aeabi_fsub+0x29e>
    421c:	e6cb      	b.n	3fb6 <__aeabi_fsub+0x36>
    421e:	2080      	movs	r0, #128	; 0x80
    4220:	08db      	lsrs	r3, r3, #3
    4222:	03c0      	lsls	r0, r0, #15
    4224:	4203      	tst	r3, r0
    4226:	d004      	beq.n	4232 <__aeabi_fsub+0x2b2>
    4228:	08d2      	lsrs	r2, r2, #3
    422a:	4202      	tst	r2, r0
    422c:	d101      	bne.n	4232 <__aeabi_fsub+0x2b2>
    422e:	0013      	movs	r3, r2
    4230:	000d      	movs	r5, r1
    4232:	00db      	lsls	r3, r3, #3
    4234:	24ff      	movs	r4, #255	; 0xff
    4236:	e6be      	b.n	3fb6 <__aeabi_fsub+0x36>
    4238:	2b00      	cmp	r3, #0
    423a:	d010      	beq.n	425e <__aeabi_fsub+0x2de>
    423c:	24ff      	movs	r4, #255	; 0xff
    423e:	2a00      	cmp	r2, #0
    4240:	d100      	bne.n	4244 <__aeabi_fsub+0x2c4>
    4242:	e6b8      	b.n	3fb6 <__aeabi_fsub+0x36>
    4244:	2080      	movs	r0, #128	; 0x80
    4246:	08db      	lsrs	r3, r3, #3
    4248:	03c0      	lsls	r0, r0, #15
    424a:	4203      	tst	r3, r0
    424c:	d003      	beq.n	4256 <__aeabi_fsub+0x2d6>
    424e:	08d2      	lsrs	r2, r2, #3
    4250:	4202      	tst	r2, r0
    4252:	d100      	bne.n	4256 <__aeabi_fsub+0x2d6>
    4254:	0013      	movs	r3, r2
    4256:	00db      	lsls	r3, r3, #3
    4258:	000d      	movs	r5, r1
    425a:	24ff      	movs	r4, #255	; 0xff
    425c:	e6ab      	b.n	3fb6 <__aeabi_fsub+0x36>
    425e:	0013      	movs	r3, r2
    4260:	24ff      	movs	r4, #255	; 0xff
    4262:	e6a8      	b.n	3fb6 <__aeabi_fsub+0x36>
    4264:	2301      	movs	r3, #1
    4266:	e76e      	b.n	4146 <__aeabi_fsub+0x1c6>
    4268:	0013      	movs	r3, r2
    426a:	0034      	movs	r4, r6
    426c:	e6a3      	b.n	3fb6 <__aeabi_fsub+0x36>
    426e:	2700      	movs	r7, #0
    4270:	2500      	movs	r5, #0
    4272:	e71e      	b.n	40b2 <__aeabi_fsub+0x132>
    4274:	2780      	movs	r7, #128	; 0x80
    4276:	2500      	movs	r5, #0
    4278:	03ff      	lsls	r7, r7, #15
    427a:	e6e9      	b.n	4050 <__aeabi_fsub+0xd0>
    427c:	0013      	movs	r3, r2
    427e:	e69a      	b.n	3fb6 <__aeabi_fsub+0x36>
    4280:	2301      	movs	r3, #1
    4282:	e7a6      	b.n	41d2 <__aeabi_fsub+0x252>
    4284:	7dffffff 	.word	0x7dffffff
    4288:	fbffffff 	.word	0xfbffffff

0000428c <__aeabi_f2iz>:
    428c:	0243      	lsls	r3, r0, #9
    428e:	0a59      	lsrs	r1, r3, #9
    4290:	0043      	lsls	r3, r0, #1
    4292:	0fc2      	lsrs	r2, r0, #31
    4294:	0e1b      	lsrs	r3, r3, #24
    4296:	2000      	movs	r0, #0
    4298:	2b7e      	cmp	r3, #126	; 0x7e
    429a:	dd0e      	ble.n	42ba <__aeabi_f2iz+0x2e>
    429c:	2b9d      	cmp	r3, #157	; 0x9d
    429e:	dc0d      	bgt.n	42bc <__aeabi_f2iz+0x30>
    42a0:	2080      	movs	r0, #128	; 0x80
    42a2:	0400      	lsls	r0, r0, #16
    42a4:	4301      	orrs	r1, r0
    42a6:	2b95      	cmp	r3, #149	; 0x95
    42a8:	dc0b      	bgt.n	42c2 <__aeabi_f2iz+0x36>
    42aa:	2096      	movs	r0, #150	; 0x96
    42ac:	1ac3      	subs	r3, r0, r3
    42ae:	40d9      	lsrs	r1, r3
    42b0:	000b      	movs	r3, r1
    42b2:	4258      	negs	r0, r3
    42b4:	2a00      	cmp	r2, #0
    42b6:	d100      	bne.n	42ba <__aeabi_f2iz+0x2e>
    42b8:	0018      	movs	r0, r3
    42ba:	4770      	bx	lr
    42bc:	4b03      	ldr	r3, [pc, #12]	; (42cc <__aeabi_f2iz+0x40>)
    42be:	18d0      	adds	r0, r2, r3
    42c0:	e7fb      	b.n	42ba <__aeabi_f2iz+0x2e>
    42c2:	3b96      	subs	r3, #150	; 0x96
    42c4:	4099      	lsls	r1, r3
    42c6:	000b      	movs	r3, r1
    42c8:	e7f3      	b.n	42b2 <__aeabi_f2iz+0x26>
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	7fffffff 	.word	0x7fffffff

000042d0 <__aeabi_i2f>:
    42d0:	b570      	push	{r4, r5, r6, lr}
    42d2:	2800      	cmp	r0, #0
    42d4:	d030      	beq.n	4338 <__aeabi_i2f+0x68>
    42d6:	17c3      	asrs	r3, r0, #31
    42d8:	18c5      	adds	r5, r0, r3
    42da:	405d      	eors	r5, r3
    42dc:	0fc4      	lsrs	r4, r0, #31
    42de:	0028      	movs	r0, r5
    42e0:	f001 ff98 	bl	6214 <__clzsi2>
    42e4:	239e      	movs	r3, #158	; 0x9e
    42e6:	1a1b      	subs	r3, r3, r0
    42e8:	2b96      	cmp	r3, #150	; 0x96
    42ea:	dc0d      	bgt.n	4308 <__aeabi_i2f+0x38>
    42ec:	2296      	movs	r2, #150	; 0x96
    42ee:	1ad2      	subs	r2, r2, r3
    42f0:	4095      	lsls	r5, r2
    42f2:	026a      	lsls	r2, r5, #9
    42f4:	0a52      	lsrs	r2, r2, #9
    42f6:	b2d8      	uxtb	r0, r3
    42f8:	0252      	lsls	r2, r2, #9
    42fa:	05c0      	lsls	r0, r0, #23
    42fc:	0a52      	lsrs	r2, r2, #9
    42fe:	07e4      	lsls	r4, r4, #31
    4300:	4302      	orrs	r2, r0
    4302:	4322      	orrs	r2, r4
    4304:	0010      	movs	r0, r2
    4306:	bd70      	pop	{r4, r5, r6, pc}
    4308:	2b99      	cmp	r3, #153	; 0x99
    430a:	dc19      	bgt.n	4340 <__aeabi_i2f+0x70>
    430c:	2299      	movs	r2, #153	; 0x99
    430e:	1ad2      	subs	r2, r2, r3
    4310:	4095      	lsls	r5, r2
    4312:	4a12      	ldr	r2, [pc, #72]	; (435c <__aeabi_i2f+0x8c>)
    4314:	402a      	ands	r2, r5
    4316:	0769      	lsls	r1, r5, #29
    4318:	d004      	beq.n	4324 <__aeabi_i2f+0x54>
    431a:	210f      	movs	r1, #15
    431c:	400d      	ands	r5, r1
    431e:	2d04      	cmp	r5, #4
    4320:	d000      	beq.n	4324 <__aeabi_i2f+0x54>
    4322:	3204      	adds	r2, #4
    4324:	0151      	lsls	r1, r2, #5
    4326:	d503      	bpl.n	4330 <__aeabi_i2f+0x60>
    4328:	4b0c      	ldr	r3, [pc, #48]	; (435c <__aeabi_i2f+0x8c>)
    432a:	401a      	ands	r2, r3
    432c:	239f      	movs	r3, #159	; 0x9f
    432e:	1a1b      	subs	r3, r3, r0
    4330:	0192      	lsls	r2, r2, #6
    4332:	0a52      	lsrs	r2, r2, #9
    4334:	b2d8      	uxtb	r0, r3
    4336:	e7df      	b.n	42f8 <__aeabi_i2f+0x28>
    4338:	2400      	movs	r4, #0
    433a:	2000      	movs	r0, #0
    433c:	2200      	movs	r2, #0
    433e:	e7db      	b.n	42f8 <__aeabi_i2f+0x28>
    4340:	2205      	movs	r2, #5
    4342:	002e      	movs	r6, r5
    4344:	1a12      	subs	r2, r2, r0
    4346:	21b9      	movs	r1, #185	; 0xb9
    4348:	40d6      	lsrs	r6, r2
    434a:	002a      	movs	r2, r5
    434c:	1ac9      	subs	r1, r1, r3
    434e:	408a      	lsls	r2, r1
    4350:	1e55      	subs	r5, r2, #1
    4352:	41aa      	sbcs	r2, r5
    4354:	0035      	movs	r5, r6
    4356:	4315      	orrs	r5, r2
    4358:	e7db      	b.n	4312 <__aeabi_i2f+0x42>
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	fbffffff 	.word	0xfbffffff

00004360 <__aeabi_dadd>:
    4360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4362:	4656      	mov	r6, sl
    4364:	465f      	mov	r7, fp
    4366:	464d      	mov	r5, r9
    4368:	4644      	mov	r4, r8
    436a:	b4f0      	push	{r4, r5, r6, r7}
    436c:	000f      	movs	r7, r1
    436e:	0ffd      	lsrs	r5, r7, #31
    4370:	46aa      	mov	sl, r5
    4372:	0309      	lsls	r1, r1, #12
    4374:	007c      	lsls	r4, r7, #1
    4376:	002e      	movs	r6, r5
    4378:	005f      	lsls	r7, r3, #1
    437a:	0f45      	lsrs	r5, r0, #29
    437c:	0a49      	lsrs	r1, r1, #9
    437e:	0d7f      	lsrs	r7, r7, #21
    4380:	4329      	orrs	r1, r5
    4382:	00c5      	lsls	r5, r0, #3
    4384:	0318      	lsls	r0, r3, #12
    4386:	46bc      	mov	ip, r7
    4388:	0a40      	lsrs	r0, r0, #9
    438a:	0f57      	lsrs	r7, r2, #29
    438c:	0d64      	lsrs	r4, r4, #21
    438e:	0fdb      	lsrs	r3, r3, #31
    4390:	4338      	orrs	r0, r7
    4392:	00d2      	lsls	r2, r2, #3
    4394:	459a      	cmp	sl, r3
    4396:	d100      	bne.n	439a <__aeabi_dadd+0x3a>
    4398:	e0aa      	b.n	44f0 <__aeabi_dadd+0x190>
    439a:	4666      	mov	r6, ip
    439c:	1ba6      	subs	r6, r4, r6
    439e:	2e00      	cmp	r6, #0
    43a0:	dc00      	bgt.n	43a4 <__aeabi_dadd+0x44>
    43a2:	e0ff      	b.n	45a4 <__aeabi_dadd+0x244>
    43a4:	4663      	mov	r3, ip
    43a6:	2b00      	cmp	r3, #0
    43a8:	d139      	bne.n	441e <__aeabi_dadd+0xbe>
    43aa:	0003      	movs	r3, r0
    43ac:	4313      	orrs	r3, r2
    43ae:	d000      	beq.n	43b2 <__aeabi_dadd+0x52>
    43b0:	e0d9      	b.n	4566 <__aeabi_dadd+0x206>
    43b2:	076b      	lsls	r3, r5, #29
    43b4:	d009      	beq.n	43ca <__aeabi_dadd+0x6a>
    43b6:	230f      	movs	r3, #15
    43b8:	402b      	ands	r3, r5
    43ba:	2b04      	cmp	r3, #4
    43bc:	d005      	beq.n	43ca <__aeabi_dadd+0x6a>
    43be:	1d2b      	adds	r3, r5, #4
    43c0:	42ab      	cmp	r3, r5
    43c2:	41ad      	sbcs	r5, r5
    43c4:	426d      	negs	r5, r5
    43c6:	1949      	adds	r1, r1, r5
    43c8:	001d      	movs	r5, r3
    43ca:	020b      	lsls	r3, r1, #8
    43cc:	d400      	bmi.n	43d0 <__aeabi_dadd+0x70>
    43ce:	e082      	b.n	44d6 <__aeabi_dadd+0x176>
    43d0:	4bca      	ldr	r3, [pc, #808]	; (46fc <__aeabi_dadd+0x39c>)
    43d2:	3401      	adds	r4, #1
    43d4:	429c      	cmp	r4, r3
    43d6:	d100      	bne.n	43da <__aeabi_dadd+0x7a>
    43d8:	e0fe      	b.n	45d8 <__aeabi_dadd+0x278>
    43da:	000a      	movs	r2, r1
    43dc:	4656      	mov	r6, sl
    43de:	4bc8      	ldr	r3, [pc, #800]	; (4700 <__aeabi_dadd+0x3a0>)
    43e0:	08ed      	lsrs	r5, r5, #3
    43e2:	401a      	ands	r2, r3
    43e4:	0750      	lsls	r0, r2, #29
    43e6:	0564      	lsls	r4, r4, #21
    43e8:	0252      	lsls	r2, r2, #9
    43ea:	4305      	orrs	r5, r0
    43ec:	0b12      	lsrs	r2, r2, #12
    43ee:	0d64      	lsrs	r4, r4, #21
    43f0:	2100      	movs	r1, #0
    43f2:	0312      	lsls	r2, r2, #12
    43f4:	0d0b      	lsrs	r3, r1, #20
    43f6:	051b      	lsls	r3, r3, #20
    43f8:	0564      	lsls	r4, r4, #21
    43fa:	0b12      	lsrs	r2, r2, #12
    43fc:	431a      	orrs	r2, r3
    43fe:	0863      	lsrs	r3, r4, #1
    4400:	4cc0      	ldr	r4, [pc, #768]	; (4704 <__aeabi_dadd+0x3a4>)
    4402:	07f6      	lsls	r6, r6, #31
    4404:	4014      	ands	r4, r2
    4406:	431c      	orrs	r4, r3
    4408:	0064      	lsls	r4, r4, #1
    440a:	0864      	lsrs	r4, r4, #1
    440c:	4334      	orrs	r4, r6
    440e:	0028      	movs	r0, r5
    4410:	0021      	movs	r1, r4
    4412:	bc3c      	pop	{r2, r3, r4, r5}
    4414:	4690      	mov	r8, r2
    4416:	4699      	mov	r9, r3
    4418:	46a2      	mov	sl, r4
    441a:	46ab      	mov	fp, r5
    441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    441e:	4bb7      	ldr	r3, [pc, #732]	; (46fc <__aeabi_dadd+0x39c>)
    4420:	429c      	cmp	r4, r3
    4422:	d0c6      	beq.n	43b2 <__aeabi_dadd+0x52>
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	041b      	lsls	r3, r3, #16
    4428:	4318      	orrs	r0, r3
    442a:	2e38      	cmp	r6, #56	; 0x38
    442c:	dd00      	ble.n	4430 <__aeabi_dadd+0xd0>
    442e:	e0eb      	b.n	4608 <__aeabi_dadd+0x2a8>
    4430:	2e1f      	cmp	r6, #31
    4432:	dd00      	ble.n	4436 <__aeabi_dadd+0xd6>
    4434:	e11e      	b.n	4674 <__aeabi_dadd+0x314>
    4436:	2320      	movs	r3, #32
    4438:	1b9b      	subs	r3, r3, r6
    443a:	469c      	mov	ip, r3
    443c:	0003      	movs	r3, r0
    443e:	4667      	mov	r7, ip
    4440:	40bb      	lsls	r3, r7
    4442:	4698      	mov	r8, r3
    4444:	0013      	movs	r3, r2
    4446:	4647      	mov	r7, r8
    4448:	40f3      	lsrs	r3, r6
    444a:	433b      	orrs	r3, r7
    444c:	4667      	mov	r7, ip
    444e:	40ba      	lsls	r2, r7
    4450:	1e57      	subs	r7, r2, #1
    4452:	41ba      	sbcs	r2, r7
    4454:	4313      	orrs	r3, r2
    4456:	0002      	movs	r2, r0
    4458:	40f2      	lsrs	r2, r6
    445a:	1aeb      	subs	r3, r5, r3
    445c:	429d      	cmp	r5, r3
    445e:	41b6      	sbcs	r6, r6
    4460:	001d      	movs	r5, r3
    4462:	1a8a      	subs	r2, r1, r2
    4464:	4276      	negs	r6, r6
    4466:	1b91      	subs	r1, r2, r6
    4468:	020b      	lsls	r3, r1, #8
    446a:	d531      	bpl.n	44d0 <__aeabi_dadd+0x170>
    446c:	024a      	lsls	r2, r1, #9
    446e:	0a56      	lsrs	r6, r2, #9
    4470:	2e00      	cmp	r6, #0
    4472:	d100      	bne.n	4476 <__aeabi_dadd+0x116>
    4474:	e0b4      	b.n	45e0 <__aeabi_dadd+0x280>
    4476:	0030      	movs	r0, r6
    4478:	f001 fecc 	bl	6214 <__clzsi2>
    447c:	0003      	movs	r3, r0
    447e:	3b08      	subs	r3, #8
    4480:	2b1f      	cmp	r3, #31
    4482:	dd00      	ble.n	4486 <__aeabi_dadd+0x126>
    4484:	e0b5      	b.n	45f2 <__aeabi_dadd+0x292>
    4486:	2220      	movs	r2, #32
    4488:	0029      	movs	r1, r5
    448a:	1ad2      	subs	r2, r2, r3
    448c:	40d1      	lsrs	r1, r2
    448e:	409e      	lsls	r6, r3
    4490:	000a      	movs	r2, r1
    4492:	409d      	lsls	r5, r3
    4494:	4332      	orrs	r2, r6
    4496:	429c      	cmp	r4, r3
    4498:	dd00      	ble.n	449c <__aeabi_dadd+0x13c>
    449a:	e0b1      	b.n	4600 <__aeabi_dadd+0x2a0>
    449c:	1b1c      	subs	r4, r3, r4
    449e:	1c63      	adds	r3, r4, #1
    44a0:	2b1f      	cmp	r3, #31
    44a2:	dd00      	ble.n	44a6 <__aeabi_dadd+0x146>
    44a4:	e0d5      	b.n	4652 <__aeabi_dadd+0x2f2>
    44a6:	2120      	movs	r1, #32
    44a8:	0014      	movs	r4, r2
    44aa:	0028      	movs	r0, r5
    44ac:	1ac9      	subs	r1, r1, r3
    44ae:	408c      	lsls	r4, r1
    44b0:	40d8      	lsrs	r0, r3
    44b2:	408d      	lsls	r5, r1
    44b4:	4304      	orrs	r4, r0
    44b6:	40da      	lsrs	r2, r3
    44b8:	1e68      	subs	r0, r5, #1
    44ba:	4185      	sbcs	r5, r0
    44bc:	0011      	movs	r1, r2
    44be:	4325      	orrs	r5, r4
    44c0:	2400      	movs	r4, #0
    44c2:	e776      	b.n	43b2 <__aeabi_dadd+0x52>
    44c4:	4641      	mov	r1, r8
    44c6:	4331      	orrs	r1, r6
    44c8:	d100      	bne.n	44cc <__aeabi_dadd+0x16c>
    44ca:	e234      	b.n	4936 <__aeabi_dadd+0x5d6>
    44cc:	0031      	movs	r1, r6
    44ce:	4645      	mov	r5, r8
    44d0:	076b      	lsls	r3, r5, #29
    44d2:	d000      	beq.n	44d6 <__aeabi_dadd+0x176>
    44d4:	e76f      	b.n	43b6 <__aeabi_dadd+0x56>
    44d6:	4656      	mov	r6, sl
    44d8:	0748      	lsls	r0, r1, #29
    44da:	08ed      	lsrs	r5, r5, #3
    44dc:	08c9      	lsrs	r1, r1, #3
    44de:	4305      	orrs	r5, r0
    44e0:	4b86      	ldr	r3, [pc, #536]	; (46fc <__aeabi_dadd+0x39c>)
    44e2:	429c      	cmp	r4, r3
    44e4:	d035      	beq.n	4552 <__aeabi_dadd+0x1f2>
    44e6:	030a      	lsls	r2, r1, #12
    44e8:	0564      	lsls	r4, r4, #21
    44ea:	0b12      	lsrs	r2, r2, #12
    44ec:	0d64      	lsrs	r4, r4, #21
    44ee:	e77f      	b.n	43f0 <__aeabi_dadd+0x90>
    44f0:	4663      	mov	r3, ip
    44f2:	1ae3      	subs	r3, r4, r3
    44f4:	469b      	mov	fp, r3
    44f6:	2b00      	cmp	r3, #0
    44f8:	dc00      	bgt.n	44fc <__aeabi_dadd+0x19c>
    44fa:	e08b      	b.n	4614 <__aeabi_dadd+0x2b4>
    44fc:	4667      	mov	r7, ip
    44fe:	2f00      	cmp	r7, #0
    4500:	d03c      	beq.n	457c <__aeabi_dadd+0x21c>
    4502:	4f7e      	ldr	r7, [pc, #504]	; (46fc <__aeabi_dadd+0x39c>)
    4504:	42bc      	cmp	r4, r7
    4506:	d100      	bne.n	450a <__aeabi_dadd+0x1aa>
    4508:	e753      	b.n	43b2 <__aeabi_dadd+0x52>
    450a:	2780      	movs	r7, #128	; 0x80
    450c:	043f      	lsls	r7, r7, #16
    450e:	4338      	orrs	r0, r7
    4510:	465b      	mov	r3, fp
    4512:	2b38      	cmp	r3, #56	; 0x38
    4514:	dc00      	bgt.n	4518 <__aeabi_dadd+0x1b8>
    4516:	e0f7      	b.n	4708 <__aeabi_dadd+0x3a8>
    4518:	4302      	orrs	r2, r0
    451a:	1e50      	subs	r0, r2, #1
    451c:	4182      	sbcs	r2, r0
    451e:	2000      	movs	r0, #0
    4520:	b2d2      	uxtb	r2, r2
    4522:	1953      	adds	r3, r2, r5
    4524:	1842      	adds	r2, r0, r1
    4526:	42ab      	cmp	r3, r5
    4528:	4189      	sbcs	r1, r1
    452a:	001d      	movs	r5, r3
    452c:	4249      	negs	r1, r1
    452e:	1889      	adds	r1, r1, r2
    4530:	020b      	lsls	r3, r1, #8
    4532:	d5cd      	bpl.n	44d0 <__aeabi_dadd+0x170>
    4534:	4b71      	ldr	r3, [pc, #452]	; (46fc <__aeabi_dadd+0x39c>)
    4536:	3401      	adds	r4, #1
    4538:	429c      	cmp	r4, r3
    453a:	d100      	bne.n	453e <__aeabi_dadd+0x1de>
    453c:	e13d      	b.n	47ba <__aeabi_dadd+0x45a>
    453e:	2001      	movs	r0, #1
    4540:	4a6f      	ldr	r2, [pc, #444]	; (4700 <__aeabi_dadd+0x3a0>)
    4542:	086b      	lsrs	r3, r5, #1
    4544:	400a      	ands	r2, r1
    4546:	4028      	ands	r0, r5
    4548:	4318      	orrs	r0, r3
    454a:	07d5      	lsls	r5, r2, #31
    454c:	4305      	orrs	r5, r0
    454e:	0851      	lsrs	r1, r2, #1
    4550:	e72f      	b.n	43b2 <__aeabi_dadd+0x52>
    4552:	002b      	movs	r3, r5
    4554:	430b      	orrs	r3, r1
    4556:	d100      	bne.n	455a <__aeabi_dadd+0x1fa>
    4558:	e1cb      	b.n	48f2 <__aeabi_dadd+0x592>
    455a:	2380      	movs	r3, #128	; 0x80
    455c:	031b      	lsls	r3, r3, #12
    455e:	430b      	orrs	r3, r1
    4560:	031a      	lsls	r2, r3, #12
    4562:	0b12      	lsrs	r2, r2, #12
    4564:	e744      	b.n	43f0 <__aeabi_dadd+0x90>
    4566:	3e01      	subs	r6, #1
    4568:	2e00      	cmp	r6, #0
    456a:	d16d      	bne.n	4648 <__aeabi_dadd+0x2e8>
    456c:	1aae      	subs	r6, r5, r2
    456e:	42b5      	cmp	r5, r6
    4570:	419b      	sbcs	r3, r3
    4572:	1a09      	subs	r1, r1, r0
    4574:	425b      	negs	r3, r3
    4576:	1ac9      	subs	r1, r1, r3
    4578:	0035      	movs	r5, r6
    457a:	e775      	b.n	4468 <__aeabi_dadd+0x108>
    457c:	0007      	movs	r7, r0
    457e:	4317      	orrs	r7, r2
    4580:	d100      	bne.n	4584 <__aeabi_dadd+0x224>
    4582:	e716      	b.n	43b2 <__aeabi_dadd+0x52>
    4584:	2301      	movs	r3, #1
    4586:	425b      	negs	r3, r3
    4588:	469c      	mov	ip, r3
    458a:	44e3      	add	fp, ip
    458c:	465b      	mov	r3, fp
    458e:	2b00      	cmp	r3, #0
    4590:	d000      	beq.n	4594 <__aeabi_dadd+0x234>
    4592:	e0e0      	b.n	4756 <__aeabi_dadd+0x3f6>
    4594:	18aa      	adds	r2, r5, r2
    4596:	42aa      	cmp	r2, r5
    4598:	419b      	sbcs	r3, r3
    459a:	1809      	adds	r1, r1, r0
    459c:	425b      	negs	r3, r3
    459e:	1859      	adds	r1, r3, r1
    45a0:	0015      	movs	r5, r2
    45a2:	e7c5      	b.n	4530 <__aeabi_dadd+0x1d0>
    45a4:	2e00      	cmp	r6, #0
    45a6:	d175      	bne.n	4694 <__aeabi_dadd+0x334>
    45a8:	1c66      	adds	r6, r4, #1
    45aa:	0576      	lsls	r6, r6, #21
    45ac:	0d76      	lsrs	r6, r6, #21
    45ae:	2e01      	cmp	r6, #1
    45b0:	dc00      	bgt.n	45b4 <__aeabi_dadd+0x254>
    45b2:	e0f3      	b.n	479c <__aeabi_dadd+0x43c>
    45b4:	1aae      	subs	r6, r5, r2
    45b6:	46b0      	mov	r8, r6
    45b8:	4545      	cmp	r5, r8
    45ba:	41bf      	sbcs	r7, r7
    45bc:	1a0e      	subs	r6, r1, r0
    45be:	427f      	negs	r7, r7
    45c0:	1bf6      	subs	r6, r6, r7
    45c2:	0237      	lsls	r7, r6, #8
    45c4:	d400      	bmi.n	45c8 <__aeabi_dadd+0x268>
    45c6:	e08f      	b.n	46e8 <__aeabi_dadd+0x388>
    45c8:	1b55      	subs	r5, r2, r5
    45ca:	42aa      	cmp	r2, r5
    45cc:	41b6      	sbcs	r6, r6
    45ce:	1a41      	subs	r1, r0, r1
    45d0:	4276      	negs	r6, r6
    45d2:	1b8e      	subs	r6, r1, r6
    45d4:	469a      	mov	sl, r3
    45d6:	e74b      	b.n	4470 <__aeabi_dadd+0x110>
    45d8:	4656      	mov	r6, sl
    45da:	2200      	movs	r2, #0
    45dc:	2500      	movs	r5, #0
    45de:	e707      	b.n	43f0 <__aeabi_dadd+0x90>
    45e0:	0028      	movs	r0, r5
    45e2:	f001 fe17 	bl	6214 <__clzsi2>
    45e6:	3020      	adds	r0, #32
    45e8:	0003      	movs	r3, r0
    45ea:	3b08      	subs	r3, #8
    45ec:	2b1f      	cmp	r3, #31
    45ee:	dc00      	bgt.n	45f2 <__aeabi_dadd+0x292>
    45f0:	e749      	b.n	4486 <__aeabi_dadd+0x126>
    45f2:	002a      	movs	r2, r5
    45f4:	3828      	subs	r0, #40	; 0x28
    45f6:	4082      	lsls	r2, r0
    45f8:	2500      	movs	r5, #0
    45fa:	429c      	cmp	r4, r3
    45fc:	dc00      	bgt.n	4600 <__aeabi_dadd+0x2a0>
    45fe:	e74d      	b.n	449c <__aeabi_dadd+0x13c>
    4600:	493f      	ldr	r1, [pc, #252]	; (4700 <__aeabi_dadd+0x3a0>)
    4602:	1ae4      	subs	r4, r4, r3
    4604:	4011      	ands	r1, r2
    4606:	e6d4      	b.n	43b2 <__aeabi_dadd+0x52>
    4608:	4302      	orrs	r2, r0
    460a:	1e50      	subs	r0, r2, #1
    460c:	4182      	sbcs	r2, r0
    460e:	b2d3      	uxtb	r3, r2
    4610:	2200      	movs	r2, #0
    4612:	e722      	b.n	445a <__aeabi_dadd+0xfa>
    4614:	2b00      	cmp	r3, #0
    4616:	d000      	beq.n	461a <__aeabi_dadd+0x2ba>
    4618:	e0f3      	b.n	4802 <__aeabi_dadd+0x4a2>
    461a:	1c63      	adds	r3, r4, #1
    461c:	469c      	mov	ip, r3
    461e:	055b      	lsls	r3, r3, #21
    4620:	0d5b      	lsrs	r3, r3, #21
    4622:	2b01      	cmp	r3, #1
    4624:	dc00      	bgt.n	4628 <__aeabi_dadd+0x2c8>
    4626:	e09f      	b.n	4768 <__aeabi_dadd+0x408>
    4628:	4b34      	ldr	r3, [pc, #208]	; (46fc <__aeabi_dadd+0x39c>)
    462a:	459c      	cmp	ip, r3
    462c:	d100      	bne.n	4630 <__aeabi_dadd+0x2d0>
    462e:	e0c3      	b.n	47b8 <__aeabi_dadd+0x458>
    4630:	18aa      	adds	r2, r5, r2
    4632:	1809      	adds	r1, r1, r0
    4634:	42aa      	cmp	r2, r5
    4636:	4180      	sbcs	r0, r0
    4638:	4240      	negs	r0, r0
    463a:	1841      	adds	r1, r0, r1
    463c:	07cd      	lsls	r5, r1, #31
    463e:	0852      	lsrs	r2, r2, #1
    4640:	4315      	orrs	r5, r2
    4642:	0849      	lsrs	r1, r1, #1
    4644:	4664      	mov	r4, ip
    4646:	e6b4      	b.n	43b2 <__aeabi_dadd+0x52>
    4648:	4b2c      	ldr	r3, [pc, #176]	; (46fc <__aeabi_dadd+0x39c>)
    464a:	429c      	cmp	r4, r3
    464c:	d000      	beq.n	4650 <__aeabi_dadd+0x2f0>
    464e:	e6ec      	b.n	442a <__aeabi_dadd+0xca>
    4650:	e6af      	b.n	43b2 <__aeabi_dadd+0x52>
    4652:	0011      	movs	r1, r2
    4654:	3c1f      	subs	r4, #31
    4656:	40e1      	lsrs	r1, r4
    4658:	000c      	movs	r4, r1
    465a:	2b20      	cmp	r3, #32
    465c:	d100      	bne.n	4660 <__aeabi_dadd+0x300>
    465e:	e07f      	b.n	4760 <__aeabi_dadd+0x400>
    4660:	2140      	movs	r1, #64	; 0x40
    4662:	1acb      	subs	r3, r1, r3
    4664:	409a      	lsls	r2, r3
    4666:	4315      	orrs	r5, r2
    4668:	1e6a      	subs	r2, r5, #1
    466a:	4195      	sbcs	r5, r2
    466c:	2100      	movs	r1, #0
    466e:	4325      	orrs	r5, r4
    4670:	2400      	movs	r4, #0
    4672:	e72d      	b.n	44d0 <__aeabi_dadd+0x170>
    4674:	0033      	movs	r3, r6
    4676:	0007      	movs	r7, r0
    4678:	3b20      	subs	r3, #32
    467a:	40df      	lsrs	r7, r3
    467c:	003b      	movs	r3, r7
    467e:	2e20      	cmp	r6, #32
    4680:	d070      	beq.n	4764 <__aeabi_dadd+0x404>
    4682:	2740      	movs	r7, #64	; 0x40
    4684:	1bbe      	subs	r6, r7, r6
    4686:	40b0      	lsls	r0, r6
    4688:	4302      	orrs	r2, r0
    468a:	1e50      	subs	r0, r2, #1
    468c:	4182      	sbcs	r2, r0
    468e:	4313      	orrs	r3, r2
    4690:	2200      	movs	r2, #0
    4692:	e6e2      	b.n	445a <__aeabi_dadd+0xfa>
    4694:	2c00      	cmp	r4, #0
    4696:	d04f      	beq.n	4738 <__aeabi_dadd+0x3d8>
    4698:	4c18      	ldr	r4, [pc, #96]	; (46fc <__aeabi_dadd+0x39c>)
    469a:	45a4      	cmp	ip, r4
    469c:	d100      	bne.n	46a0 <__aeabi_dadd+0x340>
    469e:	e0ab      	b.n	47f8 <__aeabi_dadd+0x498>
    46a0:	2480      	movs	r4, #128	; 0x80
    46a2:	0424      	lsls	r4, r4, #16
    46a4:	4276      	negs	r6, r6
    46a6:	4321      	orrs	r1, r4
    46a8:	2e38      	cmp	r6, #56	; 0x38
    46aa:	dd00      	ble.n	46ae <__aeabi_dadd+0x34e>
    46ac:	e0df      	b.n	486e <__aeabi_dadd+0x50e>
    46ae:	2e1f      	cmp	r6, #31
    46b0:	dd00      	ble.n	46b4 <__aeabi_dadd+0x354>
    46b2:	e143      	b.n	493c <__aeabi_dadd+0x5dc>
    46b4:	2720      	movs	r7, #32
    46b6:	1bbc      	subs	r4, r7, r6
    46b8:	46a1      	mov	r9, r4
    46ba:	000c      	movs	r4, r1
    46bc:	464f      	mov	r7, r9
    46be:	40bc      	lsls	r4, r7
    46c0:	46a0      	mov	r8, r4
    46c2:	002c      	movs	r4, r5
    46c4:	4647      	mov	r7, r8
    46c6:	40f4      	lsrs	r4, r6
    46c8:	433c      	orrs	r4, r7
    46ca:	464f      	mov	r7, r9
    46cc:	40bd      	lsls	r5, r7
    46ce:	1e6f      	subs	r7, r5, #1
    46d0:	41bd      	sbcs	r5, r7
    46d2:	40f1      	lsrs	r1, r6
    46d4:	432c      	orrs	r4, r5
    46d6:	1b15      	subs	r5, r2, r4
    46d8:	42aa      	cmp	r2, r5
    46da:	4192      	sbcs	r2, r2
    46dc:	1a41      	subs	r1, r0, r1
    46de:	4252      	negs	r2, r2
    46e0:	1a89      	subs	r1, r1, r2
    46e2:	4664      	mov	r4, ip
    46e4:	469a      	mov	sl, r3
    46e6:	e6bf      	b.n	4468 <__aeabi_dadd+0x108>
    46e8:	4641      	mov	r1, r8
    46ea:	4645      	mov	r5, r8
    46ec:	4331      	orrs	r1, r6
    46ee:	d000      	beq.n	46f2 <__aeabi_dadd+0x392>
    46f0:	e6be      	b.n	4470 <__aeabi_dadd+0x110>
    46f2:	2600      	movs	r6, #0
    46f4:	2400      	movs	r4, #0
    46f6:	2500      	movs	r5, #0
    46f8:	e6f2      	b.n	44e0 <__aeabi_dadd+0x180>
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	000007ff 	.word	0x000007ff
    4700:	ff7fffff 	.word	0xff7fffff
    4704:	800fffff 	.word	0x800fffff
    4708:	2b1f      	cmp	r3, #31
    470a:	dc59      	bgt.n	47c0 <__aeabi_dadd+0x460>
    470c:	2720      	movs	r7, #32
    470e:	1aff      	subs	r7, r7, r3
    4710:	46bc      	mov	ip, r7
    4712:	0007      	movs	r7, r0
    4714:	4663      	mov	r3, ip
    4716:	409f      	lsls	r7, r3
    4718:	465b      	mov	r3, fp
    471a:	46b9      	mov	r9, r7
    471c:	0017      	movs	r7, r2
    471e:	40df      	lsrs	r7, r3
    4720:	46b8      	mov	r8, r7
    4722:	464f      	mov	r7, r9
    4724:	4643      	mov	r3, r8
    4726:	431f      	orrs	r7, r3
    4728:	4663      	mov	r3, ip
    472a:	409a      	lsls	r2, r3
    472c:	1e53      	subs	r3, r2, #1
    472e:	419a      	sbcs	r2, r3
    4730:	465b      	mov	r3, fp
    4732:	433a      	orrs	r2, r7
    4734:	40d8      	lsrs	r0, r3
    4736:	e6f4      	b.n	4522 <__aeabi_dadd+0x1c2>
    4738:	000c      	movs	r4, r1
    473a:	432c      	orrs	r4, r5
    473c:	d05c      	beq.n	47f8 <__aeabi_dadd+0x498>
    473e:	43f6      	mvns	r6, r6
    4740:	2e00      	cmp	r6, #0
    4742:	d155      	bne.n	47f0 <__aeabi_dadd+0x490>
    4744:	1b55      	subs	r5, r2, r5
    4746:	42aa      	cmp	r2, r5
    4748:	41a4      	sbcs	r4, r4
    474a:	1a41      	subs	r1, r0, r1
    474c:	4264      	negs	r4, r4
    474e:	1b09      	subs	r1, r1, r4
    4750:	469a      	mov	sl, r3
    4752:	4664      	mov	r4, ip
    4754:	e688      	b.n	4468 <__aeabi_dadd+0x108>
    4756:	4f96      	ldr	r7, [pc, #600]	; (49b0 <__aeabi_dadd+0x650>)
    4758:	42bc      	cmp	r4, r7
    475a:	d000      	beq.n	475e <__aeabi_dadd+0x3fe>
    475c:	e6d8      	b.n	4510 <__aeabi_dadd+0x1b0>
    475e:	e628      	b.n	43b2 <__aeabi_dadd+0x52>
    4760:	2200      	movs	r2, #0
    4762:	e780      	b.n	4666 <__aeabi_dadd+0x306>
    4764:	2000      	movs	r0, #0
    4766:	e78f      	b.n	4688 <__aeabi_dadd+0x328>
    4768:	000b      	movs	r3, r1
    476a:	432b      	orrs	r3, r5
    476c:	2c00      	cmp	r4, #0
    476e:	d000      	beq.n	4772 <__aeabi_dadd+0x412>
    4770:	e0c2      	b.n	48f8 <__aeabi_dadd+0x598>
    4772:	2b00      	cmp	r3, #0
    4774:	d100      	bne.n	4778 <__aeabi_dadd+0x418>
    4776:	e101      	b.n	497c <__aeabi_dadd+0x61c>
    4778:	0003      	movs	r3, r0
    477a:	4313      	orrs	r3, r2
    477c:	d100      	bne.n	4780 <__aeabi_dadd+0x420>
    477e:	e618      	b.n	43b2 <__aeabi_dadd+0x52>
    4780:	18ab      	adds	r3, r5, r2
    4782:	42ab      	cmp	r3, r5
    4784:	41b6      	sbcs	r6, r6
    4786:	1809      	adds	r1, r1, r0
    4788:	4276      	negs	r6, r6
    478a:	1871      	adds	r1, r6, r1
    478c:	020a      	lsls	r2, r1, #8
    478e:	d400      	bmi.n	4792 <__aeabi_dadd+0x432>
    4790:	e109      	b.n	49a6 <__aeabi_dadd+0x646>
    4792:	4a88      	ldr	r2, [pc, #544]	; (49b4 <__aeabi_dadd+0x654>)
    4794:	001d      	movs	r5, r3
    4796:	4011      	ands	r1, r2
    4798:	4664      	mov	r4, ip
    479a:	e60a      	b.n	43b2 <__aeabi_dadd+0x52>
    479c:	2c00      	cmp	r4, #0
    479e:	d15b      	bne.n	4858 <__aeabi_dadd+0x4f8>
    47a0:	000e      	movs	r6, r1
    47a2:	432e      	orrs	r6, r5
    47a4:	d000      	beq.n	47a8 <__aeabi_dadd+0x448>
    47a6:	e08a      	b.n	48be <__aeabi_dadd+0x55e>
    47a8:	0001      	movs	r1, r0
    47aa:	4311      	orrs	r1, r2
    47ac:	d100      	bne.n	47b0 <__aeabi_dadd+0x450>
    47ae:	e0c2      	b.n	4936 <__aeabi_dadd+0x5d6>
    47b0:	0001      	movs	r1, r0
    47b2:	0015      	movs	r5, r2
    47b4:	469a      	mov	sl, r3
    47b6:	e5fc      	b.n	43b2 <__aeabi_dadd+0x52>
    47b8:	4664      	mov	r4, ip
    47ba:	2100      	movs	r1, #0
    47bc:	2500      	movs	r5, #0
    47be:	e68f      	b.n	44e0 <__aeabi_dadd+0x180>
    47c0:	2320      	movs	r3, #32
    47c2:	425b      	negs	r3, r3
    47c4:	469c      	mov	ip, r3
    47c6:	44dc      	add	ip, fp
    47c8:	4663      	mov	r3, ip
    47ca:	0007      	movs	r7, r0
    47cc:	40df      	lsrs	r7, r3
    47ce:	465b      	mov	r3, fp
    47d0:	46bc      	mov	ip, r7
    47d2:	2b20      	cmp	r3, #32
    47d4:	d100      	bne.n	47d8 <__aeabi_dadd+0x478>
    47d6:	e0ac      	b.n	4932 <__aeabi_dadd+0x5d2>
    47d8:	2340      	movs	r3, #64	; 0x40
    47da:	465f      	mov	r7, fp
    47dc:	1bdb      	subs	r3, r3, r7
    47de:	4098      	lsls	r0, r3
    47e0:	4302      	orrs	r2, r0
    47e2:	1e50      	subs	r0, r2, #1
    47e4:	4182      	sbcs	r2, r0
    47e6:	4663      	mov	r3, ip
    47e8:	4313      	orrs	r3, r2
    47ea:	001a      	movs	r2, r3
    47ec:	2000      	movs	r0, #0
    47ee:	e698      	b.n	4522 <__aeabi_dadd+0x1c2>
    47f0:	4c6f      	ldr	r4, [pc, #444]	; (49b0 <__aeabi_dadd+0x650>)
    47f2:	45a4      	cmp	ip, r4
    47f4:	d000      	beq.n	47f8 <__aeabi_dadd+0x498>
    47f6:	e757      	b.n	46a8 <__aeabi_dadd+0x348>
    47f8:	0001      	movs	r1, r0
    47fa:	0015      	movs	r5, r2
    47fc:	4664      	mov	r4, ip
    47fe:	469a      	mov	sl, r3
    4800:	e5d7      	b.n	43b2 <__aeabi_dadd+0x52>
    4802:	2c00      	cmp	r4, #0
    4804:	d139      	bne.n	487a <__aeabi_dadd+0x51a>
    4806:	000c      	movs	r4, r1
    4808:	432c      	orrs	r4, r5
    480a:	d06e      	beq.n	48ea <__aeabi_dadd+0x58a>
    480c:	43db      	mvns	r3, r3
    480e:	2b00      	cmp	r3, #0
    4810:	d01a      	beq.n	4848 <__aeabi_dadd+0x4e8>
    4812:	4c67      	ldr	r4, [pc, #412]	; (49b0 <__aeabi_dadd+0x650>)
    4814:	45a4      	cmp	ip, r4
    4816:	d068      	beq.n	48ea <__aeabi_dadd+0x58a>
    4818:	2b38      	cmp	r3, #56	; 0x38
    481a:	dd00      	ble.n	481e <__aeabi_dadd+0x4be>
    481c:	e0a4      	b.n	4968 <__aeabi_dadd+0x608>
    481e:	2b1f      	cmp	r3, #31
    4820:	dd00      	ble.n	4824 <__aeabi_dadd+0x4c4>
    4822:	e0ae      	b.n	4982 <__aeabi_dadd+0x622>
    4824:	2420      	movs	r4, #32
    4826:	000f      	movs	r7, r1
    4828:	1ae4      	subs	r4, r4, r3
    482a:	40a7      	lsls	r7, r4
    482c:	46b9      	mov	r9, r7
    482e:	002f      	movs	r7, r5
    4830:	40df      	lsrs	r7, r3
    4832:	46b8      	mov	r8, r7
    4834:	46a3      	mov	fp, r4
    4836:	464f      	mov	r7, r9
    4838:	4644      	mov	r4, r8
    483a:	4327      	orrs	r7, r4
    483c:	465c      	mov	r4, fp
    483e:	40a5      	lsls	r5, r4
    4840:	1e6c      	subs	r4, r5, #1
    4842:	41a5      	sbcs	r5, r4
    4844:	40d9      	lsrs	r1, r3
    4846:	433d      	orrs	r5, r7
    4848:	18ad      	adds	r5, r5, r2
    484a:	4295      	cmp	r5, r2
    484c:	419b      	sbcs	r3, r3
    484e:	1809      	adds	r1, r1, r0
    4850:	425b      	negs	r3, r3
    4852:	1859      	adds	r1, r3, r1
    4854:	4664      	mov	r4, ip
    4856:	e66b      	b.n	4530 <__aeabi_dadd+0x1d0>
    4858:	000c      	movs	r4, r1
    485a:	432c      	orrs	r4, r5
    485c:	d115      	bne.n	488a <__aeabi_dadd+0x52a>
    485e:	0001      	movs	r1, r0
    4860:	4311      	orrs	r1, r2
    4862:	d07b      	beq.n	495c <__aeabi_dadd+0x5fc>
    4864:	0001      	movs	r1, r0
    4866:	0015      	movs	r5, r2
    4868:	469a      	mov	sl, r3
    486a:	4c51      	ldr	r4, [pc, #324]	; (49b0 <__aeabi_dadd+0x650>)
    486c:	e5a1      	b.n	43b2 <__aeabi_dadd+0x52>
    486e:	430d      	orrs	r5, r1
    4870:	1e69      	subs	r1, r5, #1
    4872:	418d      	sbcs	r5, r1
    4874:	2100      	movs	r1, #0
    4876:	b2ec      	uxtb	r4, r5
    4878:	e72d      	b.n	46d6 <__aeabi_dadd+0x376>
    487a:	4c4d      	ldr	r4, [pc, #308]	; (49b0 <__aeabi_dadd+0x650>)
    487c:	45a4      	cmp	ip, r4
    487e:	d034      	beq.n	48ea <__aeabi_dadd+0x58a>
    4880:	2480      	movs	r4, #128	; 0x80
    4882:	0424      	lsls	r4, r4, #16
    4884:	425b      	negs	r3, r3
    4886:	4321      	orrs	r1, r4
    4888:	e7c6      	b.n	4818 <__aeabi_dadd+0x4b8>
    488a:	0004      	movs	r4, r0
    488c:	4314      	orrs	r4, r2
    488e:	d04e      	beq.n	492e <__aeabi_dadd+0x5ce>
    4890:	08ed      	lsrs	r5, r5, #3
    4892:	074c      	lsls	r4, r1, #29
    4894:	432c      	orrs	r4, r5
    4896:	2580      	movs	r5, #128	; 0x80
    4898:	08c9      	lsrs	r1, r1, #3
    489a:	032d      	lsls	r5, r5, #12
    489c:	4229      	tst	r1, r5
    489e:	d008      	beq.n	48b2 <__aeabi_dadd+0x552>
    48a0:	08c6      	lsrs	r6, r0, #3
    48a2:	422e      	tst	r6, r5
    48a4:	d105      	bne.n	48b2 <__aeabi_dadd+0x552>
    48a6:	08d2      	lsrs	r2, r2, #3
    48a8:	0741      	lsls	r1, r0, #29
    48aa:	4311      	orrs	r1, r2
    48ac:	000c      	movs	r4, r1
    48ae:	469a      	mov	sl, r3
    48b0:	0031      	movs	r1, r6
    48b2:	0f62      	lsrs	r2, r4, #29
    48b4:	00c9      	lsls	r1, r1, #3
    48b6:	00e5      	lsls	r5, r4, #3
    48b8:	4311      	orrs	r1, r2
    48ba:	4c3d      	ldr	r4, [pc, #244]	; (49b0 <__aeabi_dadd+0x650>)
    48bc:	e579      	b.n	43b2 <__aeabi_dadd+0x52>
    48be:	0006      	movs	r6, r0
    48c0:	4316      	orrs	r6, r2
    48c2:	d100      	bne.n	48c6 <__aeabi_dadd+0x566>
    48c4:	e575      	b.n	43b2 <__aeabi_dadd+0x52>
    48c6:	1aae      	subs	r6, r5, r2
    48c8:	46b0      	mov	r8, r6
    48ca:	4545      	cmp	r5, r8
    48cc:	41bf      	sbcs	r7, r7
    48ce:	1a0e      	subs	r6, r1, r0
    48d0:	427f      	negs	r7, r7
    48d2:	1bf6      	subs	r6, r6, r7
    48d4:	0237      	lsls	r7, r6, #8
    48d6:	d400      	bmi.n	48da <__aeabi_dadd+0x57a>
    48d8:	e5f4      	b.n	44c4 <__aeabi_dadd+0x164>
    48da:	1b55      	subs	r5, r2, r5
    48dc:	42aa      	cmp	r2, r5
    48de:	41b6      	sbcs	r6, r6
    48e0:	1a41      	subs	r1, r0, r1
    48e2:	4276      	negs	r6, r6
    48e4:	1b89      	subs	r1, r1, r6
    48e6:	469a      	mov	sl, r3
    48e8:	e563      	b.n	43b2 <__aeabi_dadd+0x52>
    48ea:	0001      	movs	r1, r0
    48ec:	0015      	movs	r5, r2
    48ee:	4664      	mov	r4, ip
    48f0:	e55f      	b.n	43b2 <__aeabi_dadd+0x52>
    48f2:	2200      	movs	r2, #0
    48f4:	2500      	movs	r5, #0
    48f6:	e57b      	b.n	43f0 <__aeabi_dadd+0x90>
    48f8:	2b00      	cmp	r3, #0
    48fa:	d03b      	beq.n	4974 <__aeabi_dadd+0x614>
    48fc:	0003      	movs	r3, r0
    48fe:	4313      	orrs	r3, r2
    4900:	d015      	beq.n	492e <__aeabi_dadd+0x5ce>
    4902:	08ed      	lsrs	r5, r5, #3
    4904:	074b      	lsls	r3, r1, #29
    4906:	432b      	orrs	r3, r5
    4908:	2580      	movs	r5, #128	; 0x80
    490a:	08c9      	lsrs	r1, r1, #3
    490c:	032d      	lsls	r5, r5, #12
    490e:	4229      	tst	r1, r5
    4910:	d007      	beq.n	4922 <__aeabi_dadd+0x5c2>
    4912:	08c4      	lsrs	r4, r0, #3
    4914:	422c      	tst	r4, r5
    4916:	d104      	bne.n	4922 <__aeabi_dadd+0x5c2>
    4918:	0741      	lsls	r1, r0, #29
    491a:	000b      	movs	r3, r1
    491c:	0021      	movs	r1, r4
    491e:	08d2      	lsrs	r2, r2, #3
    4920:	4313      	orrs	r3, r2
    4922:	00c9      	lsls	r1, r1, #3
    4924:	0f5a      	lsrs	r2, r3, #29
    4926:	4311      	orrs	r1, r2
    4928:	00dd      	lsls	r5, r3, #3
    492a:	4c21      	ldr	r4, [pc, #132]	; (49b0 <__aeabi_dadd+0x650>)
    492c:	e541      	b.n	43b2 <__aeabi_dadd+0x52>
    492e:	4c20      	ldr	r4, [pc, #128]	; (49b0 <__aeabi_dadd+0x650>)
    4930:	e53f      	b.n	43b2 <__aeabi_dadd+0x52>
    4932:	2000      	movs	r0, #0
    4934:	e754      	b.n	47e0 <__aeabi_dadd+0x480>
    4936:	2600      	movs	r6, #0
    4938:	2500      	movs	r5, #0
    493a:	e5d1      	b.n	44e0 <__aeabi_dadd+0x180>
    493c:	0034      	movs	r4, r6
    493e:	000f      	movs	r7, r1
    4940:	3c20      	subs	r4, #32
    4942:	40e7      	lsrs	r7, r4
    4944:	003c      	movs	r4, r7
    4946:	2e20      	cmp	r6, #32
    4948:	d02b      	beq.n	49a2 <__aeabi_dadd+0x642>
    494a:	2740      	movs	r7, #64	; 0x40
    494c:	1bbe      	subs	r6, r7, r6
    494e:	40b1      	lsls	r1, r6
    4950:	430d      	orrs	r5, r1
    4952:	1e69      	subs	r1, r5, #1
    4954:	418d      	sbcs	r5, r1
    4956:	2100      	movs	r1, #0
    4958:	432c      	orrs	r4, r5
    495a:	e6bc      	b.n	46d6 <__aeabi_dadd+0x376>
    495c:	2180      	movs	r1, #128	; 0x80
    495e:	2600      	movs	r6, #0
    4960:	0309      	lsls	r1, r1, #12
    4962:	4c13      	ldr	r4, [pc, #76]	; (49b0 <__aeabi_dadd+0x650>)
    4964:	2500      	movs	r5, #0
    4966:	e5bb      	b.n	44e0 <__aeabi_dadd+0x180>
    4968:	430d      	orrs	r5, r1
    496a:	1e69      	subs	r1, r5, #1
    496c:	418d      	sbcs	r5, r1
    496e:	2100      	movs	r1, #0
    4970:	b2ed      	uxtb	r5, r5
    4972:	e769      	b.n	4848 <__aeabi_dadd+0x4e8>
    4974:	0001      	movs	r1, r0
    4976:	0015      	movs	r5, r2
    4978:	4c0d      	ldr	r4, [pc, #52]	; (49b0 <__aeabi_dadd+0x650>)
    497a:	e51a      	b.n	43b2 <__aeabi_dadd+0x52>
    497c:	0001      	movs	r1, r0
    497e:	0015      	movs	r5, r2
    4980:	e517      	b.n	43b2 <__aeabi_dadd+0x52>
    4982:	001c      	movs	r4, r3
    4984:	000f      	movs	r7, r1
    4986:	3c20      	subs	r4, #32
    4988:	40e7      	lsrs	r7, r4
    498a:	003c      	movs	r4, r7
    498c:	2b20      	cmp	r3, #32
    498e:	d00c      	beq.n	49aa <__aeabi_dadd+0x64a>
    4990:	2740      	movs	r7, #64	; 0x40
    4992:	1afb      	subs	r3, r7, r3
    4994:	4099      	lsls	r1, r3
    4996:	430d      	orrs	r5, r1
    4998:	1e69      	subs	r1, r5, #1
    499a:	418d      	sbcs	r5, r1
    499c:	2100      	movs	r1, #0
    499e:	4325      	orrs	r5, r4
    49a0:	e752      	b.n	4848 <__aeabi_dadd+0x4e8>
    49a2:	2100      	movs	r1, #0
    49a4:	e7d4      	b.n	4950 <__aeabi_dadd+0x5f0>
    49a6:	001d      	movs	r5, r3
    49a8:	e592      	b.n	44d0 <__aeabi_dadd+0x170>
    49aa:	2100      	movs	r1, #0
    49ac:	e7f3      	b.n	4996 <__aeabi_dadd+0x636>
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	000007ff 	.word	0x000007ff
    49b4:	ff7fffff 	.word	0xff7fffff

000049b8 <__aeabi_ddiv>:
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	4656      	mov	r6, sl
    49bc:	464d      	mov	r5, r9
    49be:	4644      	mov	r4, r8
    49c0:	465f      	mov	r7, fp
    49c2:	b4f0      	push	{r4, r5, r6, r7}
    49c4:	001d      	movs	r5, r3
    49c6:	030e      	lsls	r6, r1, #12
    49c8:	004c      	lsls	r4, r1, #1
    49ca:	0fcb      	lsrs	r3, r1, #31
    49cc:	b087      	sub	sp, #28
    49ce:	0007      	movs	r7, r0
    49d0:	4692      	mov	sl, r2
    49d2:	4681      	mov	r9, r0
    49d4:	0b36      	lsrs	r6, r6, #12
    49d6:	0d64      	lsrs	r4, r4, #21
    49d8:	4698      	mov	r8, r3
    49da:	d06a      	beq.n	4ab2 <__aeabi_ddiv+0xfa>
    49dc:	4b6d      	ldr	r3, [pc, #436]	; (4b94 <__aeabi_ddiv+0x1dc>)
    49de:	429c      	cmp	r4, r3
    49e0:	d035      	beq.n	4a4e <__aeabi_ddiv+0x96>
    49e2:	2280      	movs	r2, #128	; 0x80
    49e4:	0f43      	lsrs	r3, r0, #29
    49e6:	0412      	lsls	r2, r2, #16
    49e8:	4313      	orrs	r3, r2
    49ea:	00f6      	lsls	r6, r6, #3
    49ec:	431e      	orrs	r6, r3
    49ee:	00c3      	lsls	r3, r0, #3
    49f0:	4699      	mov	r9, r3
    49f2:	4b69      	ldr	r3, [pc, #420]	; (4b98 <__aeabi_ddiv+0x1e0>)
    49f4:	2700      	movs	r7, #0
    49f6:	469c      	mov	ip, r3
    49f8:	2300      	movs	r3, #0
    49fa:	4464      	add	r4, ip
    49fc:	9302      	str	r3, [sp, #8]
    49fe:	032b      	lsls	r3, r5, #12
    4a00:	0068      	lsls	r0, r5, #1
    4a02:	0b1b      	lsrs	r3, r3, #12
    4a04:	0fed      	lsrs	r5, r5, #31
    4a06:	4651      	mov	r1, sl
    4a08:	469b      	mov	fp, r3
    4a0a:	0d40      	lsrs	r0, r0, #21
    4a0c:	9500      	str	r5, [sp, #0]
    4a0e:	d100      	bne.n	4a12 <__aeabi_ddiv+0x5a>
    4a10:	e078      	b.n	4b04 <__aeabi_ddiv+0x14c>
    4a12:	4b60      	ldr	r3, [pc, #384]	; (4b94 <__aeabi_ddiv+0x1dc>)
    4a14:	4298      	cmp	r0, r3
    4a16:	d06c      	beq.n	4af2 <__aeabi_ddiv+0x13a>
    4a18:	465b      	mov	r3, fp
    4a1a:	00da      	lsls	r2, r3, #3
    4a1c:	0f4b      	lsrs	r3, r1, #29
    4a1e:	2180      	movs	r1, #128	; 0x80
    4a20:	0409      	lsls	r1, r1, #16
    4a22:	430b      	orrs	r3, r1
    4a24:	4313      	orrs	r3, r2
    4a26:	469b      	mov	fp, r3
    4a28:	4653      	mov	r3, sl
    4a2a:	00d9      	lsls	r1, r3, #3
    4a2c:	4b5a      	ldr	r3, [pc, #360]	; (4b98 <__aeabi_ddiv+0x1e0>)
    4a2e:	469c      	mov	ip, r3
    4a30:	2300      	movs	r3, #0
    4a32:	4460      	add	r0, ip
    4a34:	4642      	mov	r2, r8
    4a36:	1a20      	subs	r0, r4, r0
    4a38:	406a      	eors	r2, r5
    4a3a:	4692      	mov	sl, r2
    4a3c:	9001      	str	r0, [sp, #4]
    4a3e:	431f      	orrs	r7, r3
    4a40:	2f0f      	cmp	r7, #15
    4a42:	d900      	bls.n	4a46 <__aeabi_ddiv+0x8e>
    4a44:	e0b0      	b.n	4ba8 <__aeabi_ddiv+0x1f0>
    4a46:	4855      	ldr	r0, [pc, #340]	; (4b9c <__aeabi_ddiv+0x1e4>)
    4a48:	00bf      	lsls	r7, r7, #2
    4a4a:	59c0      	ldr	r0, [r0, r7]
    4a4c:	4687      	mov	pc, r0
    4a4e:	4337      	orrs	r7, r6
    4a50:	d000      	beq.n	4a54 <__aeabi_ddiv+0x9c>
    4a52:	e088      	b.n	4b66 <__aeabi_ddiv+0x1ae>
    4a54:	2300      	movs	r3, #0
    4a56:	4699      	mov	r9, r3
    4a58:	3302      	adds	r3, #2
    4a5a:	2708      	movs	r7, #8
    4a5c:	2600      	movs	r6, #0
    4a5e:	9302      	str	r3, [sp, #8]
    4a60:	e7cd      	b.n	49fe <__aeabi_ddiv+0x46>
    4a62:	4643      	mov	r3, r8
    4a64:	46b3      	mov	fp, r6
    4a66:	4649      	mov	r1, r9
    4a68:	9300      	str	r3, [sp, #0]
    4a6a:	9b02      	ldr	r3, [sp, #8]
    4a6c:	9a00      	ldr	r2, [sp, #0]
    4a6e:	4692      	mov	sl, r2
    4a70:	2b02      	cmp	r3, #2
    4a72:	d000      	beq.n	4a76 <__aeabi_ddiv+0xbe>
    4a74:	e1bf      	b.n	4df6 <__aeabi_ddiv+0x43e>
    4a76:	2100      	movs	r1, #0
    4a78:	4653      	mov	r3, sl
    4a7a:	2201      	movs	r2, #1
    4a7c:	2600      	movs	r6, #0
    4a7e:	4689      	mov	r9, r1
    4a80:	401a      	ands	r2, r3
    4a82:	4b44      	ldr	r3, [pc, #272]	; (4b94 <__aeabi_ddiv+0x1dc>)
    4a84:	2100      	movs	r1, #0
    4a86:	0336      	lsls	r6, r6, #12
    4a88:	0d0c      	lsrs	r4, r1, #20
    4a8a:	0524      	lsls	r4, r4, #20
    4a8c:	0b36      	lsrs	r6, r6, #12
    4a8e:	4326      	orrs	r6, r4
    4a90:	4c43      	ldr	r4, [pc, #268]	; (4ba0 <__aeabi_ddiv+0x1e8>)
    4a92:	051b      	lsls	r3, r3, #20
    4a94:	4026      	ands	r6, r4
    4a96:	431e      	orrs	r6, r3
    4a98:	0076      	lsls	r6, r6, #1
    4a9a:	07d2      	lsls	r2, r2, #31
    4a9c:	0876      	lsrs	r6, r6, #1
    4a9e:	4316      	orrs	r6, r2
    4aa0:	4648      	mov	r0, r9
    4aa2:	0031      	movs	r1, r6
    4aa4:	b007      	add	sp, #28
    4aa6:	bc3c      	pop	{r2, r3, r4, r5}
    4aa8:	4690      	mov	r8, r2
    4aaa:	4699      	mov	r9, r3
    4aac:	46a2      	mov	sl, r4
    4aae:	46ab      	mov	fp, r5
    4ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ab2:	0033      	movs	r3, r6
    4ab4:	4303      	orrs	r3, r0
    4ab6:	d04f      	beq.n	4b58 <__aeabi_ddiv+0x1a0>
    4ab8:	2e00      	cmp	r6, #0
    4aba:	d100      	bne.n	4abe <__aeabi_ddiv+0x106>
    4abc:	e1bc      	b.n	4e38 <__aeabi_ddiv+0x480>
    4abe:	0030      	movs	r0, r6
    4ac0:	f001 fba8 	bl	6214 <__clzsi2>
    4ac4:	0003      	movs	r3, r0
    4ac6:	3b0b      	subs	r3, #11
    4ac8:	2b1c      	cmp	r3, #28
    4aca:	dd00      	ble.n	4ace <__aeabi_ddiv+0x116>
    4acc:	e1ad      	b.n	4e2a <__aeabi_ddiv+0x472>
    4ace:	221d      	movs	r2, #29
    4ad0:	0001      	movs	r1, r0
    4ad2:	1ad3      	subs	r3, r2, r3
    4ad4:	3908      	subs	r1, #8
    4ad6:	003a      	movs	r2, r7
    4ad8:	408f      	lsls	r7, r1
    4ada:	408e      	lsls	r6, r1
    4adc:	40da      	lsrs	r2, r3
    4ade:	46b9      	mov	r9, r7
    4ae0:	4316      	orrs	r6, r2
    4ae2:	4b30      	ldr	r3, [pc, #192]	; (4ba4 <__aeabi_ddiv+0x1ec>)
    4ae4:	2700      	movs	r7, #0
    4ae6:	469c      	mov	ip, r3
    4ae8:	2300      	movs	r3, #0
    4aea:	4460      	add	r0, ip
    4aec:	4244      	negs	r4, r0
    4aee:	9302      	str	r3, [sp, #8]
    4af0:	e785      	b.n	49fe <__aeabi_ddiv+0x46>
    4af2:	4653      	mov	r3, sl
    4af4:	465a      	mov	r2, fp
    4af6:	4313      	orrs	r3, r2
    4af8:	d12c      	bne.n	4b54 <__aeabi_ddiv+0x19c>
    4afa:	2300      	movs	r3, #0
    4afc:	2100      	movs	r1, #0
    4afe:	469b      	mov	fp, r3
    4b00:	3302      	adds	r3, #2
    4b02:	e797      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b04:	430b      	orrs	r3, r1
    4b06:	d020      	beq.n	4b4a <__aeabi_ddiv+0x192>
    4b08:	465b      	mov	r3, fp
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d100      	bne.n	4b10 <__aeabi_ddiv+0x158>
    4b0e:	e19e      	b.n	4e4e <__aeabi_ddiv+0x496>
    4b10:	4658      	mov	r0, fp
    4b12:	f001 fb7f 	bl	6214 <__clzsi2>
    4b16:	0003      	movs	r3, r0
    4b18:	3b0b      	subs	r3, #11
    4b1a:	2b1c      	cmp	r3, #28
    4b1c:	dd00      	ble.n	4b20 <__aeabi_ddiv+0x168>
    4b1e:	e18f      	b.n	4e40 <__aeabi_ddiv+0x488>
    4b20:	0002      	movs	r2, r0
    4b22:	4659      	mov	r1, fp
    4b24:	3a08      	subs	r2, #8
    4b26:	4091      	lsls	r1, r2
    4b28:	468b      	mov	fp, r1
    4b2a:	211d      	movs	r1, #29
    4b2c:	1acb      	subs	r3, r1, r3
    4b2e:	4651      	mov	r1, sl
    4b30:	40d9      	lsrs	r1, r3
    4b32:	000b      	movs	r3, r1
    4b34:	4659      	mov	r1, fp
    4b36:	430b      	orrs	r3, r1
    4b38:	4651      	mov	r1, sl
    4b3a:	469b      	mov	fp, r3
    4b3c:	4091      	lsls	r1, r2
    4b3e:	4b19      	ldr	r3, [pc, #100]	; (4ba4 <__aeabi_ddiv+0x1ec>)
    4b40:	469c      	mov	ip, r3
    4b42:	4460      	add	r0, ip
    4b44:	4240      	negs	r0, r0
    4b46:	2300      	movs	r3, #0
    4b48:	e774      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b4a:	2300      	movs	r3, #0
    4b4c:	2100      	movs	r1, #0
    4b4e:	469b      	mov	fp, r3
    4b50:	3301      	adds	r3, #1
    4b52:	e76f      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b54:	2303      	movs	r3, #3
    4b56:	e76d      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b58:	2300      	movs	r3, #0
    4b5a:	4699      	mov	r9, r3
    4b5c:	3301      	adds	r3, #1
    4b5e:	2704      	movs	r7, #4
    4b60:	2600      	movs	r6, #0
    4b62:	9302      	str	r3, [sp, #8]
    4b64:	e74b      	b.n	49fe <__aeabi_ddiv+0x46>
    4b66:	2303      	movs	r3, #3
    4b68:	270c      	movs	r7, #12
    4b6a:	9302      	str	r3, [sp, #8]
    4b6c:	e747      	b.n	49fe <__aeabi_ddiv+0x46>
    4b6e:	2201      	movs	r2, #1
    4b70:	1ad5      	subs	r5, r2, r3
    4b72:	2d38      	cmp	r5, #56	; 0x38
    4b74:	dc00      	bgt.n	4b78 <__aeabi_ddiv+0x1c0>
    4b76:	e1b0      	b.n	4eda <__aeabi_ddiv+0x522>
    4b78:	4653      	mov	r3, sl
    4b7a:	401a      	ands	r2, r3
    4b7c:	2100      	movs	r1, #0
    4b7e:	2300      	movs	r3, #0
    4b80:	2600      	movs	r6, #0
    4b82:	4689      	mov	r9, r1
    4b84:	e77e      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4b86:	2300      	movs	r3, #0
    4b88:	2680      	movs	r6, #128	; 0x80
    4b8a:	4699      	mov	r9, r3
    4b8c:	2200      	movs	r2, #0
    4b8e:	0336      	lsls	r6, r6, #12
    4b90:	4b00      	ldr	r3, [pc, #0]	; (4b94 <__aeabi_ddiv+0x1dc>)
    4b92:	e777      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4b94:	000007ff 	.word	0x000007ff
    4b98:	fffffc01 	.word	0xfffffc01
    4b9c:	00006628 	.word	0x00006628
    4ba0:	800fffff 	.word	0x800fffff
    4ba4:	000003f3 	.word	0x000003f3
    4ba8:	455e      	cmp	r6, fp
    4baa:	d900      	bls.n	4bae <__aeabi_ddiv+0x1f6>
    4bac:	e172      	b.n	4e94 <__aeabi_ddiv+0x4dc>
    4bae:	d100      	bne.n	4bb2 <__aeabi_ddiv+0x1fa>
    4bb0:	e16d      	b.n	4e8e <__aeabi_ddiv+0x4d6>
    4bb2:	9b01      	ldr	r3, [sp, #4]
    4bb4:	464d      	mov	r5, r9
    4bb6:	3b01      	subs	r3, #1
    4bb8:	9301      	str	r3, [sp, #4]
    4bba:	2300      	movs	r3, #0
    4bbc:	0034      	movs	r4, r6
    4bbe:	9302      	str	r3, [sp, #8]
    4bc0:	465b      	mov	r3, fp
    4bc2:	021e      	lsls	r6, r3, #8
    4bc4:	0e0b      	lsrs	r3, r1, #24
    4bc6:	431e      	orrs	r6, r3
    4bc8:	020b      	lsls	r3, r1, #8
    4bca:	9303      	str	r3, [sp, #12]
    4bcc:	0c33      	lsrs	r3, r6, #16
    4bce:	4699      	mov	r9, r3
    4bd0:	0433      	lsls	r3, r6, #16
    4bd2:	0c1b      	lsrs	r3, r3, #16
    4bd4:	4649      	mov	r1, r9
    4bd6:	0020      	movs	r0, r4
    4bd8:	9300      	str	r3, [sp, #0]
    4bda:	f001 fa8f 	bl	60fc <__aeabi_uidiv>
    4bde:	9b00      	ldr	r3, [sp, #0]
    4be0:	0037      	movs	r7, r6
    4be2:	4343      	muls	r3, r0
    4be4:	0006      	movs	r6, r0
    4be6:	4649      	mov	r1, r9
    4be8:	0020      	movs	r0, r4
    4bea:	4698      	mov	r8, r3
    4bec:	f001 fb0c 	bl	6208 <__aeabi_uidivmod>
    4bf0:	0c2c      	lsrs	r4, r5, #16
    4bf2:	0409      	lsls	r1, r1, #16
    4bf4:	430c      	orrs	r4, r1
    4bf6:	45a0      	cmp	r8, r4
    4bf8:	d909      	bls.n	4c0e <__aeabi_ddiv+0x256>
    4bfa:	19e4      	adds	r4, r4, r7
    4bfc:	1e73      	subs	r3, r6, #1
    4bfe:	42a7      	cmp	r7, r4
    4c00:	d900      	bls.n	4c04 <__aeabi_ddiv+0x24c>
    4c02:	e15c      	b.n	4ebe <__aeabi_ddiv+0x506>
    4c04:	45a0      	cmp	r8, r4
    4c06:	d800      	bhi.n	4c0a <__aeabi_ddiv+0x252>
    4c08:	e159      	b.n	4ebe <__aeabi_ddiv+0x506>
    4c0a:	3e02      	subs	r6, #2
    4c0c:	19e4      	adds	r4, r4, r7
    4c0e:	4643      	mov	r3, r8
    4c10:	1ae4      	subs	r4, r4, r3
    4c12:	4649      	mov	r1, r9
    4c14:	0020      	movs	r0, r4
    4c16:	f001 fa71 	bl	60fc <__aeabi_uidiv>
    4c1a:	0003      	movs	r3, r0
    4c1c:	9a00      	ldr	r2, [sp, #0]
    4c1e:	4680      	mov	r8, r0
    4c20:	4353      	muls	r3, r2
    4c22:	4649      	mov	r1, r9
    4c24:	0020      	movs	r0, r4
    4c26:	469b      	mov	fp, r3
    4c28:	f001 faee 	bl	6208 <__aeabi_uidivmod>
    4c2c:	042a      	lsls	r2, r5, #16
    4c2e:	0409      	lsls	r1, r1, #16
    4c30:	0c12      	lsrs	r2, r2, #16
    4c32:	430a      	orrs	r2, r1
    4c34:	4593      	cmp	fp, r2
    4c36:	d90d      	bls.n	4c54 <__aeabi_ddiv+0x29c>
    4c38:	4643      	mov	r3, r8
    4c3a:	19d2      	adds	r2, r2, r7
    4c3c:	3b01      	subs	r3, #1
    4c3e:	4297      	cmp	r7, r2
    4c40:	d900      	bls.n	4c44 <__aeabi_ddiv+0x28c>
    4c42:	e13a      	b.n	4eba <__aeabi_ddiv+0x502>
    4c44:	4593      	cmp	fp, r2
    4c46:	d800      	bhi.n	4c4a <__aeabi_ddiv+0x292>
    4c48:	e137      	b.n	4eba <__aeabi_ddiv+0x502>
    4c4a:	2302      	movs	r3, #2
    4c4c:	425b      	negs	r3, r3
    4c4e:	469c      	mov	ip, r3
    4c50:	19d2      	adds	r2, r2, r7
    4c52:	44e0      	add	r8, ip
    4c54:	465b      	mov	r3, fp
    4c56:	1ad2      	subs	r2, r2, r3
    4c58:	4643      	mov	r3, r8
    4c5a:	0436      	lsls	r6, r6, #16
    4c5c:	4333      	orrs	r3, r6
    4c5e:	469b      	mov	fp, r3
    4c60:	9903      	ldr	r1, [sp, #12]
    4c62:	0c18      	lsrs	r0, r3, #16
    4c64:	0c0b      	lsrs	r3, r1, #16
    4c66:	001d      	movs	r5, r3
    4c68:	9305      	str	r3, [sp, #20]
    4c6a:	0409      	lsls	r1, r1, #16
    4c6c:	465b      	mov	r3, fp
    4c6e:	0c09      	lsrs	r1, r1, #16
    4c70:	000c      	movs	r4, r1
    4c72:	041b      	lsls	r3, r3, #16
    4c74:	0c1b      	lsrs	r3, r3, #16
    4c76:	4344      	muls	r4, r0
    4c78:	9104      	str	r1, [sp, #16]
    4c7a:	4359      	muls	r1, r3
    4c7c:	436b      	muls	r3, r5
    4c7e:	4368      	muls	r0, r5
    4c80:	191b      	adds	r3, r3, r4
    4c82:	0c0d      	lsrs	r5, r1, #16
    4c84:	18eb      	adds	r3, r5, r3
    4c86:	429c      	cmp	r4, r3
    4c88:	d903      	bls.n	4c92 <__aeabi_ddiv+0x2da>
    4c8a:	2480      	movs	r4, #128	; 0x80
    4c8c:	0264      	lsls	r4, r4, #9
    4c8e:	46a4      	mov	ip, r4
    4c90:	4460      	add	r0, ip
    4c92:	0c1c      	lsrs	r4, r3, #16
    4c94:	0409      	lsls	r1, r1, #16
    4c96:	041b      	lsls	r3, r3, #16
    4c98:	0c09      	lsrs	r1, r1, #16
    4c9a:	1820      	adds	r0, r4, r0
    4c9c:	185d      	adds	r5, r3, r1
    4c9e:	4282      	cmp	r2, r0
    4ca0:	d200      	bcs.n	4ca4 <__aeabi_ddiv+0x2ec>
    4ca2:	e0de      	b.n	4e62 <__aeabi_ddiv+0x4aa>
    4ca4:	d100      	bne.n	4ca8 <__aeabi_ddiv+0x2f0>
    4ca6:	e0d7      	b.n	4e58 <__aeabi_ddiv+0x4a0>
    4ca8:	1a16      	subs	r6, r2, r0
    4caa:	9b02      	ldr	r3, [sp, #8]
    4cac:	469c      	mov	ip, r3
    4cae:	1b5d      	subs	r5, r3, r5
    4cb0:	45ac      	cmp	ip, r5
    4cb2:	419b      	sbcs	r3, r3
    4cb4:	425b      	negs	r3, r3
    4cb6:	1af6      	subs	r6, r6, r3
    4cb8:	42b7      	cmp	r7, r6
    4cba:	d100      	bne.n	4cbe <__aeabi_ddiv+0x306>
    4cbc:	e106      	b.n	4ecc <__aeabi_ddiv+0x514>
    4cbe:	4649      	mov	r1, r9
    4cc0:	0030      	movs	r0, r6
    4cc2:	f001 fa1b 	bl	60fc <__aeabi_uidiv>
    4cc6:	9b00      	ldr	r3, [sp, #0]
    4cc8:	0004      	movs	r4, r0
    4cca:	4343      	muls	r3, r0
    4ccc:	4649      	mov	r1, r9
    4cce:	0030      	movs	r0, r6
    4cd0:	4698      	mov	r8, r3
    4cd2:	f001 fa99 	bl	6208 <__aeabi_uidivmod>
    4cd6:	0c2e      	lsrs	r6, r5, #16
    4cd8:	0409      	lsls	r1, r1, #16
    4cda:	430e      	orrs	r6, r1
    4cdc:	45b0      	cmp	r8, r6
    4cde:	d909      	bls.n	4cf4 <__aeabi_ddiv+0x33c>
    4ce0:	19f6      	adds	r6, r6, r7
    4ce2:	1e63      	subs	r3, r4, #1
    4ce4:	42b7      	cmp	r7, r6
    4ce6:	d900      	bls.n	4cea <__aeabi_ddiv+0x332>
    4ce8:	e0f3      	b.n	4ed2 <__aeabi_ddiv+0x51a>
    4cea:	45b0      	cmp	r8, r6
    4cec:	d800      	bhi.n	4cf0 <__aeabi_ddiv+0x338>
    4cee:	e0f0      	b.n	4ed2 <__aeabi_ddiv+0x51a>
    4cf0:	3c02      	subs	r4, #2
    4cf2:	19f6      	adds	r6, r6, r7
    4cf4:	4643      	mov	r3, r8
    4cf6:	1af3      	subs	r3, r6, r3
    4cf8:	4649      	mov	r1, r9
    4cfa:	0018      	movs	r0, r3
    4cfc:	9302      	str	r3, [sp, #8]
    4cfe:	f001 f9fd 	bl	60fc <__aeabi_uidiv>
    4d02:	9b00      	ldr	r3, [sp, #0]
    4d04:	0006      	movs	r6, r0
    4d06:	4343      	muls	r3, r0
    4d08:	4649      	mov	r1, r9
    4d0a:	9802      	ldr	r0, [sp, #8]
    4d0c:	4698      	mov	r8, r3
    4d0e:	f001 fa7b 	bl	6208 <__aeabi_uidivmod>
    4d12:	042d      	lsls	r5, r5, #16
    4d14:	0409      	lsls	r1, r1, #16
    4d16:	0c2d      	lsrs	r5, r5, #16
    4d18:	430d      	orrs	r5, r1
    4d1a:	45a8      	cmp	r8, r5
    4d1c:	d909      	bls.n	4d32 <__aeabi_ddiv+0x37a>
    4d1e:	19ed      	adds	r5, r5, r7
    4d20:	1e73      	subs	r3, r6, #1
    4d22:	42af      	cmp	r7, r5
    4d24:	d900      	bls.n	4d28 <__aeabi_ddiv+0x370>
    4d26:	e0d6      	b.n	4ed6 <__aeabi_ddiv+0x51e>
    4d28:	45a8      	cmp	r8, r5
    4d2a:	d800      	bhi.n	4d2e <__aeabi_ddiv+0x376>
    4d2c:	e0d3      	b.n	4ed6 <__aeabi_ddiv+0x51e>
    4d2e:	3e02      	subs	r6, #2
    4d30:	19ed      	adds	r5, r5, r7
    4d32:	0424      	lsls	r4, r4, #16
    4d34:	0021      	movs	r1, r4
    4d36:	4643      	mov	r3, r8
    4d38:	4331      	orrs	r1, r6
    4d3a:	9e04      	ldr	r6, [sp, #16]
    4d3c:	9a05      	ldr	r2, [sp, #20]
    4d3e:	0030      	movs	r0, r6
    4d40:	1aed      	subs	r5, r5, r3
    4d42:	040b      	lsls	r3, r1, #16
    4d44:	0c0c      	lsrs	r4, r1, #16
    4d46:	0c1b      	lsrs	r3, r3, #16
    4d48:	4358      	muls	r0, r3
    4d4a:	4366      	muls	r6, r4
    4d4c:	4353      	muls	r3, r2
    4d4e:	4354      	muls	r4, r2
    4d50:	199a      	adds	r2, r3, r6
    4d52:	0c03      	lsrs	r3, r0, #16
    4d54:	189b      	adds	r3, r3, r2
    4d56:	429e      	cmp	r6, r3
    4d58:	d903      	bls.n	4d62 <__aeabi_ddiv+0x3aa>
    4d5a:	2280      	movs	r2, #128	; 0x80
    4d5c:	0252      	lsls	r2, r2, #9
    4d5e:	4694      	mov	ip, r2
    4d60:	4464      	add	r4, ip
    4d62:	0c1a      	lsrs	r2, r3, #16
    4d64:	0400      	lsls	r0, r0, #16
    4d66:	041b      	lsls	r3, r3, #16
    4d68:	0c00      	lsrs	r0, r0, #16
    4d6a:	1914      	adds	r4, r2, r4
    4d6c:	181b      	adds	r3, r3, r0
    4d6e:	42a5      	cmp	r5, r4
    4d70:	d350      	bcc.n	4e14 <__aeabi_ddiv+0x45c>
    4d72:	d04d      	beq.n	4e10 <__aeabi_ddiv+0x458>
    4d74:	2301      	movs	r3, #1
    4d76:	4319      	orrs	r1, r3
    4d78:	4a96      	ldr	r2, [pc, #600]	; (4fd4 <__aeabi_ddiv+0x61c>)
    4d7a:	9b01      	ldr	r3, [sp, #4]
    4d7c:	4694      	mov	ip, r2
    4d7e:	4463      	add	r3, ip
    4d80:	2b00      	cmp	r3, #0
    4d82:	dc00      	bgt.n	4d86 <__aeabi_ddiv+0x3ce>
    4d84:	e6f3      	b.n	4b6e <__aeabi_ddiv+0x1b6>
    4d86:	074a      	lsls	r2, r1, #29
    4d88:	d009      	beq.n	4d9e <__aeabi_ddiv+0x3e6>
    4d8a:	220f      	movs	r2, #15
    4d8c:	400a      	ands	r2, r1
    4d8e:	2a04      	cmp	r2, #4
    4d90:	d005      	beq.n	4d9e <__aeabi_ddiv+0x3e6>
    4d92:	1d0a      	adds	r2, r1, #4
    4d94:	428a      	cmp	r2, r1
    4d96:	4189      	sbcs	r1, r1
    4d98:	4249      	negs	r1, r1
    4d9a:	448b      	add	fp, r1
    4d9c:	0011      	movs	r1, r2
    4d9e:	465a      	mov	r2, fp
    4da0:	01d2      	lsls	r2, r2, #7
    4da2:	d508      	bpl.n	4db6 <__aeabi_ddiv+0x3fe>
    4da4:	465a      	mov	r2, fp
    4da6:	4b8c      	ldr	r3, [pc, #560]	; (4fd8 <__aeabi_ddiv+0x620>)
    4da8:	401a      	ands	r2, r3
    4daa:	4693      	mov	fp, r2
    4dac:	2280      	movs	r2, #128	; 0x80
    4dae:	00d2      	lsls	r2, r2, #3
    4db0:	4694      	mov	ip, r2
    4db2:	9b01      	ldr	r3, [sp, #4]
    4db4:	4463      	add	r3, ip
    4db6:	4a89      	ldr	r2, [pc, #548]	; (4fdc <__aeabi_ddiv+0x624>)
    4db8:	4293      	cmp	r3, r2
    4dba:	dd00      	ble.n	4dbe <__aeabi_ddiv+0x406>
    4dbc:	e65b      	b.n	4a76 <__aeabi_ddiv+0xbe>
    4dbe:	465a      	mov	r2, fp
    4dc0:	08c9      	lsrs	r1, r1, #3
    4dc2:	0750      	lsls	r0, r2, #29
    4dc4:	4308      	orrs	r0, r1
    4dc6:	0256      	lsls	r6, r2, #9
    4dc8:	4651      	mov	r1, sl
    4dca:	2201      	movs	r2, #1
    4dcc:	055b      	lsls	r3, r3, #21
    4dce:	4681      	mov	r9, r0
    4dd0:	0b36      	lsrs	r6, r6, #12
    4dd2:	0d5b      	lsrs	r3, r3, #21
    4dd4:	400a      	ands	r2, r1
    4dd6:	e655      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4dd8:	2380      	movs	r3, #128	; 0x80
    4dda:	031b      	lsls	r3, r3, #12
    4ddc:	421e      	tst	r6, r3
    4dde:	d011      	beq.n	4e04 <__aeabi_ddiv+0x44c>
    4de0:	465a      	mov	r2, fp
    4de2:	421a      	tst	r2, r3
    4de4:	d10e      	bne.n	4e04 <__aeabi_ddiv+0x44c>
    4de6:	465e      	mov	r6, fp
    4de8:	431e      	orrs	r6, r3
    4dea:	0336      	lsls	r6, r6, #12
    4dec:	0b36      	lsrs	r6, r6, #12
    4dee:	002a      	movs	r2, r5
    4df0:	4689      	mov	r9, r1
    4df2:	4b7b      	ldr	r3, [pc, #492]	; (4fe0 <__aeabi_ddiv+0x628>)
    4df4:	e646      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4df6:	2b03      	cmp	r3, #3
    4df8:	d100      	bne.n	4dfc <__aeabi_ddiv+0x444>
    4dfa:	e0e1      	b.n	4fc0 <__aeabi_ddiv+0x608>
    4dfc:	2b01      	cmp	r3, #1
    4dfe:	d1bb      	bne.n	4d78 <__aeabi_ddiv+0x3c0>
    4e00:	401a      	ands	r2, r3
    4e02:	e6bb      	b.n	4b7c <__aeabi_ddiv+0x1c4>
    4e04:	431e      	orrs	r6, r3
    4e06:	0336      	lsls	r6, r6, #12
    4e08:	0b36      	lsrs	r6, r6, #12
    4e0a:	4642      	mov	r2, r8
    4e0c:	4b74      	ldr	r3, [pc, #464]	; (4fe0 <__aeabi_ddiv+0x628>)
    4e0e:	e639      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4e10:	2b00      	cmp	r3, #0
    4e12:	d0b1      	beq.n	4d78 <__aeabi_ddiv+0x3c0>
    4e14:	197d      	adds	r5, r7, r5
    4e16:	1e4a      	subs	r2, r1, #1
    4e18:	42af      	cmp	r7, r5
    4e1a:	d952      	bls.n	4ec2 <__aeabi_ddiv+0x50a>
    4e1c:	0011      	movs	r1, r2
    4e1e:	42a5      	cmp	r5, r4
    4e20:	d1a8      	bne.n	4d74 <__aeabi_ddiv+0x3bc>
    4e22:	9a03      	ldr	r2, [sp, #12]
    4e24:	429a      	cmp	r2, r3
    4e26:	d1a5      	bne.n	4d74 <__aeabi_ddiv+0x3bc>
    4e28:	e7a6      	b.n	4d78 <__aeabi_ddiv+0x3c0>
    4e2a:	0003      	movs	r3, r0
    4e2c:	003e      	movs	r6, r7
    4e2e:	3b28      	subs	r3, #40	; 0x28
    4e30:	409e      	lsls	r6, r3
    4e32:	2300      	movs	r3, #0
    4e34:	4699      	mov	r9, r3
    4e36:	e654      	b.n	4ae2 <__aeabi_ddiv+0x12a>
    4e38:	f001 f9ec 	bl	6214 <__clzsi2>
    4e3c:	3020      	adds	r0, #32
    4e3e:	e641      	b.n	4ac4 <__aeabi_ddiv+0x10c>
    4e40:	0003      	movs	r3, r0
    4e42:	4652      	mov	r2, sl
    4e44:	3b28      	subs	r3, #40	; 0x28
    4e46:	409a      	lsls	r2, r3
    4e48:	2100      	movs	r1, #0
    4e4a:	4693      	mov	fp, r2
    4e4c:	e677      	b.n	4b3e <__aeabi_ddiv+0x186>
    4e4e:	4650      	mov	r0, sl
    4e50:	f001 f9e0 	bl	6214 <__clzsi2>
    4e54:	3020      	adds	r0, #32
    4e56:	e65e      	b.n	4b16 <__aeabi_ddiv+0x15e>
    4e58:	9b02      	ldr	r3, [sp, #8]
    4e5a:	2600      	movs	r6, #0
    4e5c:	42ab      	cmp	r3, r5
    4e5e:	d300      	bcc.n	4e62 <__aeabi_ddiv+0x4aa>
    4e60:	e723      	b.n	4caa <__aeabi_ddiv+0x2f2>
    4e62:	9e03      	ldr	r6, [sp, #12]
    4e64:	9902      	ldr	r1, [sp, #8]
    4e66:	46b4      	mov	ip, r6
    4e68:	4461      	add	r1, ip
    4e6a:	4688      	mov	r8, r1
    4e6c:	45b0      	cmp	r8, r6
    4e6e:	41b6      	sbcs	r6, r6
    4e70:	465b      	mov	r3, fp
    4e72:	4276      	negs	r6, r6
    4e74:	19f6      	adds	r6, r6, r7
    4e76:	18b2      	adds	r2, r6, r2
    4e78:	3b01      	subs	r3, #1
    4e7a:	9102      	str	r1, [sp, #8]
    4e7c:	4297      	cmp	r7, r2
    4e7e:	d213      	bcs.n	4ea8 <__aeabi_ddiv+0x4f0>
    4e80:	4290      	cmp	r0, r2
    4e82:	d84f      	bhi.n	4f24 <__aeabi_ddiv+0x56c>
    4e84:	d100      	bne.n	4e88 <__aeabi_ddiv+0x4d0>
    4e86:	e08e      	b.n	4fa6 <__aeabi_ddiv+0x5ee>
    4e88:	1a16      	subs	r6, r2, r0
    4e8a:	469b      	mov	fp, r3
    4e8c:	e70d      	b.n	4caa <__aeabi_ddiv+0x2f2>
    4e8e:	4589      	cmp	r9, r1
    4e90:	d200      	bcs.n	4e94 <__aeabi_ddiv+0x4dc>
    4e92:	e68e      	b.n	4bb2 <__aeabi_ddiv+0x1fa>
    4e94:	0874      	lsrs	r4, r6, #1
    4e96:	464b      	mov	r3, r9
    4e98:	07f6      	lsls	r6, r6, #31
    4e9a:	0035      	movs	r5, r6
    4e9c:	085b      	lsrs	r3, r3, #1
    4e9e:	431d      	orrs	r5, r3
    4ea0:	464b      	mov	r3, r9
    4ea2:	07db      	lsls	r3, r3, #31
    4ea4:	9302      	str	r3, [sp, #8]
    4ea6:	e68b      	b.n	4bc0 <__aeabi_ddiv+0x208>
    4ea8:	4297      	cmp	r7, r2
    4eaa:	d1ed      	bne.n	4e88 <__aeabi_ddiv+0x4d0>
    4eac:	9903      	ldr	r1, [sp, #12]
    4eae:	9c02      	ldr	r4, [sp, #8]
    4eb0:	42a1      	cmp	r1, r4
    4eb2:	d9e5      	bls.n	4e80 <__aeabi_ddiv+0x4c8>
    4eb4:	1a3e      	subs	r6, r7, r0
    4eb6:	469b      	mov	fp, r3
    4eb8:	e6f7      	b.n	4caa <__aeabi_ddiv+0x2f2>
    4eba:	4698      	mov	r8, r3
    4ebc:	e6ca      	b.n	4c54 <__aeabi_ddiv+0x29c>
    4ebe:	001e      	movs	r6, r3
    4ec0:	e6a5      	b.n	4c0e <__aeabi_ddiv+0x256>
    4ec2:	42ac      	cmp	r4, r5
    4ec4:	d83e      	bhi.n	4f44 <__aeabi_ddiv+0x58c>
    4ec6:	d074      	beq.n	4fb2 <__aeabi_ddiv+0x5fa>
    4ec8:	0011      	movs	r1, r2
    4eca:	e753      	b.n	4d74 <__aeabi_ddiv+0x3bc>
    4ecc:	2101      	movs	r1, #1
    4ece:	4249      	negs	r1, r1
    4ed0:	e752      	b.n	4d78 <__aeabi_ddiv+0x3c0>
    4ed2:	001c      	movs	r4, r3
    4ed4:	e70e      	b.n	4cf4 <__aeabi_ddiv+0x33c>
    4ed6:	001e      	movs	r6, r3
    4ed8:	e72b      	b.n	4d32 <__aeabi_ddiv+0x37a>
    4eda:	2d1f      	cmp	r5, #31
    4edc:	dc3c      	bgt.n	4f58 <__aeabi_ddiv+0x5a0>
    4ede:	2320      	movs	r3, #32
    4ee0:	000a      	movs	r2, r1
    4ee2:	4658      	mov	r0, fp
    4ee4:	1b5b      	subs	r3, r3, r5
    4ee6:	4098      	lsls	r0, r3
    4ee8:	40ea      	lsrs	r2, r5
    4eea:	4099      	lsls	r1, r3
    4eec:	4302      	orrs	r2, r0
    4eee:	1e48      	subs	r0, r1, #1
    4ef0:	4181      	sbcs	r1, r0
    4ef2:	465e      	mov	r6, fp
    4ef4:	4311      	orrs	r1, r2
    4ef6:	40ee      	lsrs	r6, r5
    4ef8:	074b      	lsls	r3, r1, #29
    4efa:	d009      	beq.n	4f10 <__aeabi_ddiv+0x558>
    4efc:	230f      	movs	r3, #15
    4efe:	400b      	ands	r3, r1
    4f00:	2b04      	cmp	r3, #4
    4f02:	d005      	beq.n	4f10 <__aeabi_ddiv+0x558>
    4f04:	000b      	movs	r3, r1
    4f06:	1d19      	adds	r1, r3, #4
    4f08:	4299      	cmp	r1, r3
    4f0a:	419b      	sbcs	r3, r3
    4f0c:	425b      	negs	r3, r3
    4f0e:	18f6      	adds	r6, r6, r3
    4f10:	0233      	lsls	r3, r6, #8
    4f12:	d53c      	bpl.n	4f8e <__aeabi_ddiv+0x5d6>
    4f14:	4653      	mov	r3, sl
    4f16:	2201      	movs	r2, #1
    4f18:	2100      	movs	r1, #0
    4f1a:	401a      	ands	r2, r3
    4f1c:	2600      	movs	r6, #0
    4f1e:	2301      	movs	r3, #1
    4f20:	4689      	mov	r9, r1
    4f22:	e5af      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4f24:	2302      	movs	r3, #2
    4f26:	425b      	negs	r3, r3
    4f28:	469c      	mov	ip, r3
    4f2a:	9c03      	ldr	r4, [sp, #12]
    4f2c:	44e3      	add	fp, ip
    4f2e:	46a4      	mov	ip, r4
    4f30:	9b02      	ldr	r3, [sp, #8]
    4f32:	4463      	add	r3, ip
    4f34:	4698      	mov	r8, r3
    4f36:	45a0      	cmp	r8, r4
    4f38:	41b6      	sbcs	r6, r6
    4f3a:	4276      	negs	r6, r6
    4f3c:	19f6      	adds	r6, r6, r7
    4f3e:	9302      	str	r3, [sp, #8]
    4f40:	18b2      	adds	r2, r6, r2
    4f42:	e6b1      	b.n	4ca8 <__aeabi_ddiv+0x2f0>
    4f44:	9803      	ldr	r0, [sp, #12]
    4f46:	1e8a      	subs	r2, r1, #2
    4f48:	0041      	lsls	r1, r0, #1
    4f4a:	4281      	cmp	r1, r0
    4f4c:	41b6      	sbcs	r6, r6
    4f4e:	4276      	negs	r6, r6
    4f50:	19f6      	adds	r6, r6, r7
    4f52:	19ad      	adds	r5, r5, r6
    4f54:	9103      	str	r1, [sp, #12]
    4f56:	e761      	b.n	4e1c <__aeabi_ddiv+0x464>
    4f58:	221f      	movs	r2, #31
    4f5a:	4252      	negs	r2, r2
    4f5c:	1ad3      	subs	r3, r2, r3
    4f5e:	465a      	mov	r2, fp
    4f60:	40da      	lsrs	r2, r3
    4f62:	0013      	movs	r3, r2
    4f64:	2d20      	cmp	r5, #32
    4f66:	d029      	beq.n	4fbc <__aeabi_ddiv+0x604>
    4f68:	2240      	movs	r2, #64	; 0x40
    4f6a:	4658      	mov	r0, fp
    4f6c:	1b55      	subs	r5, r2, r5
    4f6e:	40a8      	lsls	r0, r5
    4f70:	4301      	orrs	r1, r0
    4f72:	1e48      	subs	r0, r1, #1
    4f74:	4181      	sbcs	r1, r0
    4f76:	2007      	movs	r0, #7
    4f78:	430b      	orrs	r3, r1
    4f7a:	4018      	ands	r0, r3
    4f7c:	2600      	movs	r6, #0
    4f7e:	2800      	cmp	r0, #0
    4f80:	d009      	beq.n	4f96 <__aeabi_ddiv+0x5de>
    4f82:	220f      	movs	r2, #15
    4f84:	2600      	movs	r6, #0
    4f86:	401a      	ands	r2, r3
    4f88:	0019      	movs	r1, r3
    4f8a:	2a04      	cmp	r2, #4
    4f8c:	d1bb      	bne.n	4f06 <__aeabi_ddiv+0x54e>
    4f8e:	000b      	movs	r3, r1
    4f90:	0770      	lsls	r0, r6, #29
    4f92:	0276      	lsls	r6, r6, #9
    4f94:	0b36      	lsrs	r6, r6, #12
    4f96:	08db      	lsrs	r3, r3, #3
    4f98:	4303      	orrs	r3, r0
    4f9a:	4699      	mov	r9, r3
    4f9c:	2201      	movs	r2, #1
    4f9e:	4653      	mov	r3, sl
    4fa0:	401a      	ands	r2, r3
    4fa2:	2300      	movs	r3, #0
    4fa4:	e56e      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4fa6:	9902      	ldr	r1, [sp, #8]
    4fa8:	428d      	cmp	r5, r1
    4faa:	d8bb      	bhi.n	4f24 <__aeabi_ddiv+0x56c>
    4fac:	469b      	mov	fp, r3
    4fae:	2600      	movs	r6, #0
    4fb0:	e67b      	b.n	4caa <__aeabi_ddiv+0x2f2>
    4fb2:	9803      	ldr	r0, [sp, #12]
    4fb4:	4298      	cmp	r0, r3
    4fb6:	d3c5      	bcc.n	4f44 <__aeabi_ddiv+0x58c>
    4fb8:	0011      	movs	r1, r2
    4fba:	e732      	b.n	4e22 <__aeabi_ddiv+0x46a>
    4fbc:	2000      	movs	r0, #0
    4fbe:	e7d7      	b.n	4f70 <__aeabi_ddiv+0x5b8>
    4fc0:	2680      	movs	r6, #128	; 0x80
    4fc2:	465b      	mov	r3, fp
    4fc4:	0336      	lsls	r6, r6, #12
    4fc6:	431e      	orrs	r6, r3
    4fc8:	0336      	lsls	r6, r6, #12
    4fca:	0b36      	lsrs	r6, r6, #12
    4fcc:	9a00      	ldr	r2, [sp, #0]
    4fce:	4689      	mov	r9, r1
    4fd0:	4b03      	ldr	r3, [pc, #12]	; (4fe0 <__aeabi_ddiv+0x628>)
    4fd2:	e557      	b.n	4a84 <__aeabi_ddiv+0xcc>
    4fd4:	000003ff 	.word	0x000003ff
    4fd8:	feffffff 	.word	0xfeffffff
    4fdc:	000007fe 	.word	0x000007fe
    4fe0:	000007ff 	.word	0x000007ff

00004fe4 <__eqdf2>:
    4fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fe6:	465f      	mov	r7, fp
    4fe8:	4656      	mov	r6, sl
    4fea:	464d      	mov	r5, r9
    4fec:	4644      	mov	r4, r8
    4fee:	b4f0      	push	{r4, r5, r6, r7}
    4ff0:	031f      	lsls	r7, r3, #12
    4ff2:	005c      	lsls	r4, r3, #1
    4ff4:	0fdb      	lsrs	r3, r3, #31
    4ff6:	469a      	mov	sl, r3
    4ff8:	4b19      	ldr	r3, [pc, #100]	; (5060 <__eqdf2+0x7c>)
    4ffa:	030e      	lsls	r6, r1, #12
    4ffc:	004d      	lsls	r5, r1, #1
    4ffe:	0fc9      	lsrs	r1, r1, #31
    5000:	4680      	mov	r8, r0
    5002:	0b36      	lsrs	r6, r6, #12
    5004:	0d6d      	lsrs	r5, r5, #21
    5006:	468b      	mov	fp, r1
    5008:	4691      	mov	r9, r2
    500a:	0b3f      	lsrs	r7, r7, #12
    500c:	0d64      	lsrs	r4, r4, #21
    500e:	429d      	cmp	r5, r3
    5010:	d019      	beq.n	5046 <__eqdf2+0x62>
    5012:	4b13      	ldr	r3, [pc, #76]	; (5060 <__eqdf2+0x7c>)
    5014:	429c      	cmp	r4, r3
    5016:	d01b      	beq.n	5050 <__eqdf2+0x6c>
    5018:	2301      	movs	r3, #1
    501a:	42a5      	cmp	r5, r4
    501c:	d006      	beq.n	502c <__eqdf2+0x48>
    501e:	0018      	movs	r0, r3
    5020:	bc3c      	pop	{r2, r3, r4, r5}
    5022:	4690      	mov	r8, r2
    5024:	4699      	mov	r9, r3
    5026:	46a2      	mov	sl, r4
    5028:	46ab      	mov	fp, r5
    502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    502c:	42be      	cmp	r6, r7
    502e:	d1f6      	bne.n	501e <__eqdf2+0x3a>
    5030:	45c8      	cmp	r8, r9
    5032:	d1f4      	bne.n	501e <__eqdf2+0x3a>
    5034:	45d3      	cmp	fp, sl
    5036:	d010      	beq.n	505a <__eqdf2+0x76>
    5038:	2d00      	cmp	r5, #0
    503a:	d1f0      	bne.n	501e <__eqdf2+0x3a>
    503c:	4330      	orrs	r0, r6
    503e:	0003      	movs	r3, r0
    5040:	1e5a      	subs	r2, r3, #1
    5042:	4193      	sbcs	r3, r2
    5044:	e7eb      	b.n	501e <__eqdf2+0x3a>
    5046:	0031      	movs	r1, r6
    5048:	2301      	movs	r3, #1
    504a:	4301      	orrs	r1, r0
    504c:	d1e7      	bne.n	501e <__eqdf2+0x3a>
    504e:	e7e0      	b.n	5012 <__eqdf2+0x2e>
    5050:	433a      	orrs	r2, r7
    5052:	2301      	movs	r3, #1
    5054:	2a00      	cmp	r2, #0
    5056:	d1e2      	bne.n	501e <__eqdf2+0x3a>
    5058:	e7de      	b.n	5018 <__eqdf2+0x34>
    505a:	2300      	movs	r3, #0
    505c:	e7df      	b.n	501e <__eqdf2+0x3a>
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	000007ff 	.word	0x000007ff

00005064 <__gedf2>:
    5064:	b5f0      	push	{r4, r5, r6, r7, lr}
    5066:	465f      	mov	r7, fp
    5068:	4644      	mov	r4, r8
    506a:	4656      	mov	r6, sl
    506c:	464d      	mov	r5, r9
    506e:	b4f0      	push	{r4, r5, r6, r7}
    5070:	031f      	lsls	r7, r3, #12
    5072:	0b3c      	lsrs	r4, r7, #12
    5074:	4f2c      	ldr	r7, [pc, #176]	; (5128 <__gedf2+0xc4>)
    5076:	030e      	lsls	r6, r1, #12
    5078:	004d      	lsls	r5, r1, #1
    507a:	46a3      	mov	fp, r4
    507c:	005c      	lsls	r4, r3, #1
    507e:	4684      	mov	ip, r0
    5080:	0b36      	lsrs	r6, r6, #12
    5082:	0d6d      	lsrs	r5, r5, #21
    5084:	0fc9      	lsrs	r1, r1, #31
    5086:	4690      	mov	r8, r2
    5088:	0d64      	lsrs	r4, r4, #21
    508a:	0fdb      	lsrs	r3, r3, #31
    508c:	42bd      	cmp	r5, r7
    508e:	d02b      	beq.n	50e8 <__gedf2+0x84>
    5090:	4f25      	ldr	r7, [pc, #148]	; (5128 <__gedf2+0xc4>)
    5092:	42bc      	cmp	r4, r7
    5094:	d02e      	beq.n	50f4 <__gedf2+0x90>
    5096:	2d00      	cmp	r5, #0
    5098:	d10e      	bne.n	50b8 <__gedf2+0x54>
    509a:	4330      	orrs	r0, r6
    509c:	0007      	movs	r7, r0
    509e:	4681      	mov	r9, r0
    50a0:	4278      	negs	r0, r7
    50a2:	4178      	adcs	r0, r7
    50a4:	2c00      	cmp	r4, #0
    50a6:	d117      	bne.n	50d8 <__gedf2+0x74>
    50a8:	465f      	mov	r7, fp
    50aa:	433a      	orrs	r2, r7
    50ac:	d114      	bne.n	50d8 <__gedf2+0x74>
    50ae:	464b      	mov	r3, r9
    50b0:	2000      	movs	r0, #0
    50b2:	2b00      	cmp	r3, #0
    50b4:	d00a      	beq.n	50cc <__gedf2+0x68>
    50b6:	e006      	b.n	50c6 <__gedf2+0x62>
    50b8:	2c00      	cmp	r4, #0
    50ba:	d102      	bne.n	50c2 <__gedf2+0x5e>
    50bc:	4658      	mov	r0, fp
    50be:	4302      	orrs	r2, r0
    50c0:	d001      	beq.n	50c6 <__gedf2+0x62>
    50c2:	4299      	cmp	r1, r3
    50c4:	d01a      	beq.n	50fc <__gedf2+0x98>
    50c6:	2301      	movs	r3, #1
    50c8:	4248      	negs	r0, r1
    50ca:	4318      	orrs	r0, r3
    50cc:	bc3c      	pop	{r2, r3, r4, r5}
    50ce:	4690      	mov	r8, r2
    50d0:	4699      	mov	r9, r3
    50d2:	46a2      	mov	sl, r4
    50d4:	46ab      	mov	fp, r5
    50d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50d8:	2800      	cmp	r0, #0
    50da:	d0f2      	beq.n	50c2 <__gedf2+0x5e>
    50dc:	4258      	negs	r0, r3
    50de:	4158      	adcs	r0, r3
    50e0:	2201      	movs	r2, #1
    50e2:	4240      	negs	r0, r0
    50e4:	4310      	orrs	r0, r2
    50e6:	e7f1      	b.n	50cc <__gedf2+0x68>
    50e8:	0037      	movs	r7, r6
    50ea:	4307      	orrs	r7, r0
    50ec:	d0d0      	beq.n	5090 <__gedf2+0x2c>
    50ee:	2002      	movs	r0, #2
    50f0:	4240      	negs	r0, r0
    50f2:	e7eb      	b.n	50cc <__gedf2+0x68>
    50f4:	465f      	mov	r7, fp
    50f6:	4317      	orrs	r7, r2
    50f8:	d0cd      	beq.n	5096 <__gedf2+0x32>
    50fa:	e7f8      	b.n	50ee <__gedf2+0x8a>
    50fc:	42a5      	cmp	r5, r4
    50fe:	dce2      	bgt.n	50c6 <__gedf2+0x62>
    5100:	db05      	blt.n	510e <__gedf2+0xaa>
    5102:	455e      	cmp	r6, fp
    5104:	d8df      	bhi.n	50c6 <__gedf2+0x62>
    5106:	d008      	beq.n	511a <__gedf2+0xb6>
    5108:	2000      	movs	r0, #0
    510a:	455e      	cmp	r6, fp
    510c:	d2de      	bcs.n	50cc <__gedf2+0x68>
    510e:	4248      	negs	r0, r1
    5110:	4148      	adcs	r0, r1
    5112:	2301      	movs	r3, #1
    5114:	4240      	negs	r0, r0
    5116:	4318      	orrs	r0, r3
    5118:	e7d8      	b.n	50cc <__gedf2+0x68>
    511a:	45c4      	cmp	ip, r8
    511c:	d8d3      	bhi.n	50c6 <__gedf2+0x62>
    511e:	2000      	movs	r0, #0
    5120:	45c4      	cmp	ip, r8
    5122:	d3f4      	bcc.n	510e <__gedf2+0xaa>
    5124:	e7d2      	b.n	50cc <__gedf2+0x68>
    5126:	46c0      	nop			; (mov r8, r8)
    5128:	000007ff 	.word	0x000007ff

0000512c <__ledf2>:
    512c:	b5f0      	push	{r4, r5, r6, r7, lr}
    512e:	465f      	mov	r7, fp
    5130:	464d      	mov	r5, r9
    5132:	4644      	mov	r4, r8
    5134:	4656      	mov	r6, sl
    5136:	b4f0      	push	{r4, r5, r6, r7}
    5138:	031c      	lsls	r4, r3, #12
    513a:	0b24      	lsrs	r4, r4, #12
    513c:	46a4      	mov	ip, r4
    513e:	4c2f      	ldr	r4, [pc, #188]	; (51fc <__ledf2+0xd0>)
    5140:	030f      	lsls	r7, r1, #12
    5142:	004d      	lsls	r5, r1, #1
    5144:	005e      	lsls	r6, r3, #1
    5146:	0fc9      	lsrs	r1, r1, #31
    5148:	4680      	mov	r8, r0
    514a:	0b3f      	lsrs	r7, r7, #12
    514c:	0d6d      	lsrs	r5, r5, #21
    514e:	468b      	mov	fp, r1
    5150:	4691      	mov	r9, r2
    5152:	0d76      	lsrs	r6, r6, #21
    5154:	0fdb      	lsrs	r3, r3, #31
    5156:	42a5      	cmp	r5, r4
    5158:	d020      	beq.n	519c <__ledf2+0x70>
    515a:	4c28      	ldr	r4, [pc, #160]	; (51fc <__ledf2+0xd0>)
    515c:	42a6      	cmp	r6, r4
    515e:	d022      	beq.n	51a6 <__ledf2+0x7a>
    5160:	2d00      	cmp	r5, #0
    5162:	d112      	bne.n	518a <__ledf2+0x5e>
    5164:	4338      	orrs	r0, r7
    5166:	4244      	negs	r4, r0
    5168:	4144      	adcs	r4, r0
    516a:	2e00      	cmp	r6, #0
    516c:	d020      	beq.n	51b0 <__ledf2+0x84>
    516e:	2c00      	cmp	r4, #0
    5170:	d00d      	beq.n	518e <__ledf2+0x62>
    5172:	425c      	negs	r4, r3
    5174:	4163      	adcs	r3, r4
    5176:	2401      	movs	r4, #1
    5178:	425b      	negs	r3, r3
    517a:	431c      	orrs	r4, r3
    517c:	0020      	movs	r0, r4
    517e:	bc3c      	pop	{r2, r3, r4, r5}
    5180:	4690      	mov	r8, r2
    5182:	4699      	mov	r9, r3
    5184:	46a2      	mov	sl, r4
    5186:	46ab      	mov	fp, r5
    5188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    518a:	2e00      	cmp	r6, #0
    518c:	d017      	beq.n	51be <__ledf2+0x92>
    518e:	455b      	cmp	r3, fp
    5190:	d019      	beq.n	51c6 <__ledf2+0x9a>
    5192:	465b      	mov	r3, fp
    5194:	425c      	negs	r4, r3
    5196:	2301      	movs	r3, #1
    5198:	431c      	orrs	r4, r3
    519a:	e7ef      	b.n	517c <__ledf2+0x50>
    519c:	0039      	movs	r1, r7
    519e:	2402      	movs	r4, #2
    51a0:	4301      	orrs	r1, r0
    51a2:	d1eb      	bne.n	517c <__ledf2+0x50>
    51a4:	e7d9      	b.n	515a <__ledf2+0x2e>
    51a6:	4661      	mov	r1, ip
    51a8:	2402      	movs	r4, #2
    51aa:	4311      	orrs	r1, r2
    51ac:	d1e6      	bne.n	517c <__ledf2+0x50>
    51ae:	e7d7      	b.n	5160 <__ledf2+0x34>
    51b0:	4661      	mov	r1, ip
    51b2:	430a      	orrs	r2, r1
    51b4:	d1db      	bne.n	516e <__ledf2+0x42>
    51b6:	2400      	movs	r4, #0
    51b8:	2800      	cmp	r0, #0
    51ba:	d0df      	beq.n	517c <__ledf2+0x50>
    51bc:	e7e9      	b.n	5192 <__ledf2+0x66>
    51be:	4661      	mov	r1, ip
    51c0:	430a      	orrs	r2, r1
    51c2:	d1e4      	bne.n	518e <__ledf2+0x62>
    51c4:	e7e5      	b.n	5192 <__ledf2+0x66>
    51c6:	42b5      	cmp	r5, r6
    51c8:	dd03      	ble.n	51d2 <__ledf2+0xa6>
    51ca:	2201      	movs	r2, #1
    51cc:	425c      	negs	r4, r3
    51ce:	4314      	orrs	r4, r2
    51d0:	e7d4      	b.n	517c <__ledf2+0x50>
    51d2:	42b5      	cmp	r5, r6
    51d4:	dbcd      	blt.n	5172 <__ledf2+0x46>
    51d6:	4567      	cmp	r7, ip
    51d8:	d8db      	bhi.n	5192 <__ledf2+0x66>
    51da:	d009      	beq.n	51f0 <__ledf2+0xc4>
    51dc:	2400      	movs	r4, #0
    51de:	4567      	cmp	r7, ip
    51e0:	d2cc      	bcs.n	517c <__ledf2+0x50>
    51e2:	4659      	mov	r1, fp
    51e4:	424c      	negs	r4, r1
    51e6:	4161      	adcs	r1, r4
    51e8:	2401      	movs	r4, #1
    51ea:	4249      	negs	r1, r1
    51ec:	430c      	orrs	r4, r1
    51ee:	e7c5      	b.n	517c <__ledf2+0x50>
    51f0:	45c8      	cmp	r8, r9
    51f2:	d8ce      	bhi.n	5192 <__ledf2+0x66>
    51f4:	2400      	movs	r4, #0
    51f6:	45c8      	cmp	r8, r9
    51f8:	d3f3      	bcc.n	51e2 <__ledf2+0xb6>
    51fa:	e7bf      	b.n	517c <__ledf2+0x50>
    51fc:	000007ff 	.word	0x000007ff

00005200 <__aeabi_dmul>:
    5200:	b5f0      	push	{r4, r5, r6, r7, lr}
    5202:	465f      	mov	r7, fp
    5204:	4656      	mov	r6, sl
    5206:	464d      	mov	r5, r9
    5208:	4644      	mov	r4, r8
    520a:	b4f0      	push	{r4, r5, r6, r7}
    520c:	030d      	lsls	r5, r1, #12
    520e:	4699      	mov	r9, r3
    5210:	004e      	lsls	r6, r1, #1
    5212:	0b2b      	lsrs	r3, r5, #12
    5214:	b087      	sub	sp, #28
    5216:	0007      	movs	r7, r0
    5218:	4692      	mov	sl, r2
    521a:	4680      	mov	r8, r0
    521c:	469b      	mov	fp, r3
    521e:	0d76      	lsrs	r6, r6, #21
    5220:	0fcc      	lsrs	r4, r1, #31
    5222:	2e00      	cmp	r6, #0
    5224:	d069      	beq.n	52fa <__aeabi_dmul+0xfa>
    5226:	4b6d      	ldr	r3, [pc, #436]	; (53dc <__aeabi_dmul+0x1dc>)
    5228:	429e      	cmp	r6, r3
    522a:	d035      	beq.n	5298 <__aeabi_dmul+0x98>
    522c:	465b      	mov	r3, fp
    522e:	2280      	movs	r2, #128	; 0x80
    5230:	00dd      	lsls	r5, r3, #3
    5232:	0412      	lsls	r2, r2, #16
    5234:	0f43      	lsrs	r3, r0, #29
    5236:	4313      	orrs	r3, r2
    5238:	432b      	orrs	r3, r5
    523a:	469b      	mov	fp, r3
    523c:	00c3      	lsls	r3, r0, #3
    523e:	4698      	mov	r8, r3
    5240:	4b67      	ldr	r3, [pc, #412]	; (53e0 <__aeabi_dmul+0x1e0>)
    5242:	2700      	movs	r7, #0
    5244:	469c      	mov	ip, r3
    5246:	2300      	movs	r3, #0
    5248:	4466      	add	r6, ip
    524a:	9301      	str	r3, [sp, #4]
    524c:	464a      	mov	r2, r9
    524e:	0315      	lsls	r5, r2, #12
    5250:	0050      	lsls	r0, r2, #1
    5252:	0fd2      	lsrs	r2, r2, #31
    5254:	4653      	mov	r3, sl
    5256:	0b2d      	lsrs	r5, r5, #12
    5258:	0d40      	lsrs	r0, r0, #21
    525a:	4691      	mov	r9, r2
    525c:	d100      	bne.n	5260 <__aeabi_dmul+0x60>
    525e:	e076      	b.n	534e <__aeabi_dmul+0x14e>
    5260:	4a5e      	ldr	r2, [pc, #376]	; (53dc <__aeabi_dmul+0x1dc>)
    5262:	4290      	cmp	r0, r2
    5264:	d06c      	beq.n	5340 <__aeabi_dmul+0x140>
    5266:	2280      	movs	r2, #128	; 0x80
    5268:	0f5b      	lsrs	r3, r3, #29
    526a:	0412      	lsls	r2, r2, #16
    526c:	4313      	orrs	r3, r2
    526e:	4a5c      	ldr	r2, [pc, #368]	; (53e0 <__aeabi_dmul+0x1e0>)
    5270:	00ed      	lsls	r5, r5, #3
    5272:	4694      	mov	ip, r2
    5274:	431d      	orrs	r5, r3
    5276:	4653      	mov	r3, sl
    5278:	2200      	movs	r2, #0
    527a:	00db      	lsls	r3, r3, #3
    527c:	4460      	add	r0, ip
    527e:	4649      	mov	r1, r9
    5280:	1836      	adds	r6, r6, r0
    5282:	1c70      	adds	r0, r6, #1
    5284:	4061      	eors	r1, r4
    5286:	9002      	str	r0, [sp, #8]
    5288:	4317      	orrs	r7, r2
    528a:	2f0f      	cmp	r7, #15
    528c:	d900      	bls.n	5290 <__aeabi_dmul+0x90>
    528e:	e0af      	b.n	53f0 <__aeabi_dmul+0x1f0>
    5290:	4854      	ldr	r0, [pc, #336]	; (53e4 <__aeabi_dmul+0x1e4>)
    5292:	00bf      	lsls	r7, r7, #2
    5294:	59c7      	ldr	r7, [r0, r7]
    5296:	46bf      	mov	pc, r7
    5298:	465b      	mov	r3, fp
    529a:	431f      	orrs	r7, r3
    529c:	d000      	beq.n	52a0 <__aeabi_dmul+0xa0>
    529e:	e088      	b.n	53b2 <__aeabi_dmul+0x1b2>
    52a0:	2300      	movs	r3, #0
    52a2:	469b      	mov	fp, r3
    52a4:	4698      	mov	r8, r3
    52a6:	3302      	adds	r3, #2
    52a8:	2708      	movs	r7, #8
    52aa:	9301      	str	r3, [sp, #4]
    52ac:	e7ce      	b.n	524c <__aeabi_dmul+0x4c>
    52ae:	4649      	mov	r1, r9
    52b0:	2a02      	cmp	r2, #2
    52b2:	d06a      	beq.n	538a <__aeabi_dmul+0x18a>
    52b4:	2a03      	cmp	r2, #3
    52b6:	d100      	bne.n	52ba <__aeabi_dmul+0xba>
    52b8:	e209      	b.n	56ce <__aeabi_dmul+0x4ce>
    52ba:	2a01      	cmp	r2, #1
    52bc:	d000      	beq.n	52c0 <__aeabi_dmul+0xc0>
    52be:	e1bb      	b.n	5638 <__aeabi_dmul+0x438>
    52c0:	4011      	ands	r1, r2
    52c2:	2200      	movs	r2, #0
    52c4:	2300      	movs	r3, #0
    52c6:	2500      	movs	r5, #0
    52c8:	4690      	mov	r8, r2
    52ca:	b2cc      	uxtb	r4, r1
    52cc:	2100      	movs	r1, #0
    52ce:	032d      	lsls	r5, r5, #12
    52d0:	0d0a      	lsrs	r2, r1, #20
    52d2:	0512      	lsls	r2, r2, #20
    52d4:	0b2d      	lsrs	r5, r5, #12
    52d6:	4315      	orrs	r5, r2
    52d8:	4a43      	ldr	r2, [pc, #268]	; (53e8 <__aeabi_dmul+0x1e8>)
    52da:	051b      	lsls	r3, r3, #20
    52dc:	4015      	ands	r5, r2
    52de:	431d      	orrs	r5, r3
    52e0:	006d      	lsls	r5, r5, #1
    52e2:	07e4      	lsls	r4, r4, #31
    52e4:	086d      	lsrs	r5, r5, #1
    52e6:	4325      	orrs	r5, r4
    52e8:	4640      	mov	r0, r8
    52ea:	0029      	movs	r1, r5
    52ec:	b007      	add	sp, #28
    52ee:	bc3c      	pop	{r2, r3, r4, r5}
    52f0:	4690      	mov	r8, r2
    52f2:	4699      	mov	r9, r3
    52f4:	46a2      	mov	sl, r4
    52f6:	46ab      	mov	fp, r5
    52f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52fa:	4303      	orrs	r3, r0
    52fc:	d052      	beq.n	53a4 <__aeabi_dmul+0x1a4>
    52fe:	465b      	mov	r3, fp
    5300:	2b00      	cmp	r3, #0
    5302:	d100      	bne.n	5306 <__aeabi_dmul+0x106>
    5304:	e18a      	b.n	561c <__aeabi_dmul+0x41c>
    5306:	4658      	mov	r0, fp
    5308:	f000 ff84 	bl	6214 <__clzsi2>
    530c:	0003      	movs	r3, r0
    530e:	3b0b      	subs	r3, #11
    5310:	2b1c      	cmp	r3, #28
    5312:	dd00      	ble.n	5316 <__aeabi_dmul+0x116>
    5314:	e17b      	b.n	560e <__aeabi_dmul+0x40e>
    5316:	221d      	movs	r2, #29
    5318:	1ad3      	subs	r3, r2, r3
    531a:	003a      	movs	r2, r7
    531c:	0001      	movs	r1, r0
    531e:	465d      	mov	r5, fp
    5320:	40da      	lsrs	r2, r3
    5322:	3908      	subs	r1, #8
    5324:	408d      	lsls	r5, r1
    5326:	0013      	movs	r3, r2
    5328:	408f      	lsls	r7, r1
    532a:	432b      	orrs	r3, r5
    532c:	469b      	mov	fp, r3
    532e:	46b8      	mov	r8, r7
    5330:	4b2e      	ldr	r3, [pc, #184]	; (53ec <__aeabi_dmul+0x1ec>)
    5332:	2700      	movs	r7, #0
    5334:	469c      	mov	ip, r3
    5336:	2300      	movs	r3, #0
    5338:	4460      	add	r0, ip
    533a:	4246      	negs	r6, r0
    533c:	9301      	str	r3, [sp, #4]
    533e:	e785      	b.n	524c <__aeabi_dmul+0x4c>
    5340:	4652      	mov	r2, sl
    5342:	432a      	orrs	r2, r5
    5344:	d12c      	bne.n	53a0 <__aeabi_dmul+0x1a0>
    5346:	2500      	movs	r5, #0
    5348:	2300      	movs	r3, #0
    534a:	2202      	movs	r2, #2
    534c:	e797      	b.n	527e <__aeabi_dmul+0x7e>
    534e:	4652      	mov	r2, sl
    5350:	432a      	orrs	r2, r5
    5352:	d021      	beq.n	5398 <__aeabi_dmul+0x198>
    5354:	2d00      	cmp	r5, #0
    5356:	d100      	bne.n	535a <__aeabi_dmul+0x15a>
    5358:	e154      	b.n	5604 <__aeabi_dmul+0x404>
    535a:	0028      	movs	r0, r5
    535c:	f000 ff5a 	bl	6214 <__clzsi2>
    5360:	0003      	movs	r3, r0
    5362:	3b0b      	subs	r3, #11
    5364:	2b1c      	cmp	r3, #28
    5366:	dd00      	ble.n	536a <__aeabi_dmul+0x16a>
    5368:	e146      	b.n	55f8 <__aeabi_dmul+0x3f8>
    536a:	211d      	movs	r1, #29
    536c:	1acb      	subs	r3, r1, r3
    536e:	4651      	mov	r1, sl
    5370:	0002      	movs	r2, r0
    5372:	40d9      	lsrs	r1, r3
    5374:	4653      	mov	r3, sl
    5376:	3a08      	subs	r2, #8
    5378:	4095      	lsls	r5, r2
    537a:	4093      	lsls	r3, r2
    537c:	430d      	orrs	r5, r1
    537e:	4a1b      	ldr	r2, [pc, #108]	; (53ec <__aeabi_dmul+0x1ec>)
    5380:	4694      	mov	ip, r2
    5382:	4460      	add	r0, ip
    5384:	4240      	negs	r0, r0
    5386:	2200      	movs	r2, #0
    5388:	e779      	b.n	527e <__aeabi_dmul+0x7e>
    538a:	2401      	movs	r4, #1
    538c:	2200      	movs	r2, #0
    538e:	400c      	ands	r4, r1
    5390:	4b12      	ldr	r3, [pc, #72]	; (53dc <__aeabi_dmul+0x1dc>)
    5392:	2500      	movs	r5, #0
    5394:	4690      	mov	r8, r2
    5396:	e799      	b.n	52cc <__aeabi_dmul+0xcc>
    5398:	2500      	movs	r5, #0
    539a:	2300      	movs	r3, #0
    539c:	2201      	movs	r2, #1
    539e:	e76e      	b.n	527e <__aeabi_dmul+0x7e>
    53a0:	2203      	movs	r2, #3
    53a2:	e76c      	b.n	527e <__aeabi_dmul+0x7e>
    53a4:	2300      	movs	r3, #0
    53a6:	469b      	mov	fp, r3
    53a8:	4698      	mov	r8, r3
    53aa:	3301      	adds	r3, #1
    53ac:	2704      	movs	r7, #4
    53ae:	9301      	str	r3, [sp, #4]
    53b0:	e74c      	b.n	524c <__aeabi_dmul+0x4c>
    53b2:	2303      	movs	r3, #3
    53b4:	270c      	movs	r7, #12
    53b6:	9301      	str	r3, [sp, #4]
    53b8:	e748      	b.n	524c <__aeabi_dmul+0x4c>
    53ba:	2300      	movs	r3, #0
    53bc:	2580      	movs	r5, #128	; 0x80
    53be:	4698      	mov	r8, r3
    53c0:	2400      	movs	r4, #0
    53c2:	032d      	lsls	r5, r5, #12
    53c4:	4b05      	ldr	r3, [pc, #20]	; (53dc <__aeabi_dmul+0x1dc>)
    53c6:	e781      	b.n	52cc <__aeabi_dmul+0xcc>
    53c8:	465d      	mov	r5, fp
    53ca:	4643      	mov	r3, r8
    53cc:	9a01      	ldr	r2, [sp, #4]
    53ce:	e76f      	b.n	52b0 <__aeabi_dmul+0xb0>
    53d0:	465d      	mov	r5, fp
    53d2:	4643      	mov	r3, r8
    53d4:	0021      	movs	r1, r4
    53d6:	9a01      	ldr	r2, [sp, #4]
    53d8:	e76a      	b.n	52b0 <__aeabi_dmul+0xb0>
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	000007ff 	.word	0x000007ff
    53e0:	fffffc01 	.word	0xfffffc01
    53e4:	00006668 	.word	0x00006668
    53e8:	800fffff 	.word	0x800fffff
    53ec:	000003f3 	.word	0x000003f3
    53f0:	4642      	mov	r2, r8
    53f2:	0c12      	lsrs	r2, r2, #16
    53f4:	4691      	mov	r9, r2
    53f6:	0c1a      	lsrs	r2, r3, #16
    53f8:	4694      	mov	ip, r2
    53fa:	4642      	mov	r2, r8
    53fc:	0417      	lsls	r7, r2, #16
    53fe:	464a      	mov	r2, r9
    5400:	041b      	lsls	r3, r3, #16
    5402:	0c1b      	lsrs	r3, r3, #16
    5404:	435a      	muls	r2, r3
    5406:	4660      	mov	r0, ip
    5408:	4690      	mov	r8, r2
    540a:	464a      	mov	r2, r9
    540c:	4342      	muls	r2, r0
    540e:	0010      	movs	r0, r2
    5410:	9203      	str	r2, [sp, #12]
    5412:	4662      	mov	r2, ip
    5414:	001c      	movs	r4, r3
    5416:	0c3f      	lsrs	r7, r7, #16
    5418:	437a      	muls	r2, r7
    541a:	437c      	muls	r4, r7
    541c:	4442      	add	r2, r8
    541e:	9201      	str	r2, [sp, #4]
    5420:	0c22      	lsrs	r2, r4, #16
    5422:	4692      	mov	sl, r2
    5424:	9a01      	ldr	r2, [sp, #4]
    5426:	4452      	add	r2, sl
    5428:	4590      	cmp	r8, r2
    542a:	d906      	bls.n	543a <__aeabi_dmul+0x23a>
    542c:	4682      	mov	sl, r0
    542e:	2080      	movs	r0, #128	; 0x80
    5430:	0240      	lsls	r0, r0, #9
    5432:	4680      	mov	r8, r0
    5434:	44c2      	add	sl, r8
    5436:	4650      	mov	r0, sl
    5438:	9003      	str	r0, [sp, #12]
    543a:	0c10      	lsrs	r0, r2, #16
    543c:	9004      	str	r0, [sp, #16]
    543e:	4648      	mov	r0, r9
    5440:	0424      	lsls	r4, r4, #16
    5442:	0c24      	lsrs	r4, r4, #16
    5444:	0412      	lsls	r2, r2, #16
    5446:	1912      	adds	r2, r2, r4
    5448:	9205      	str	r2, [sp, #20]
    544a:	0c2a      	lsrs	r2, r5, #16
    544c:	042d      	lsls	r5, r5, #16
    544e:	0c2d      	lsrs	r5, r5, #16
    5450:	4368      	muls	r0, r5
    5452:	002c      	movs	r4, r5
    5454:	4682      	mov	sl, r0
    5456:	4648      	mov	r0, r9
    5458:	437c      	muls	r4, r7
    545a:	4350      	muls	r0, r2
    545c:	4681      	mov	r9, r0
    545e:	0c20      	lsrs	r0, r4, #16
    5460:	4680      	mov	r8, r0
    5462:	4357      	muls	r7, r2
    5464:	4457      	add	r7, sl
    5466:	4447      	add	r7, r8
    5468:	45ba      	cmp	sl, r7
    546a:	d903      	bls.n	5474 <__aeabi_dmul+0x274>
    546c:	2080      	movs	r0, #128	; 0x80
    546e:	0240      	lsls	r0, r0, #9
    5470:	4680      	mov	r8, r0
    5472:	44c1      	add	r9, r8
    5474:	0c38      	lsrs	r0, r7, #16
    5476:	043f      	lsls	r7, r7, #16
    5478:	46b8      	mov	r8, r7
    547a:	4448      	add	r0, r9
    547c:	0424      	lsls	r4, r4, #16
    547e:	0c24      	lsrs	r4, r4, #16
    5480:	9001      	str	r0, [sp, #4]
    5482:	9804      	ldr	r0, [sp, #16]
    5484:	44a0      	add	r8, r4
    5486:	4440      	add	r0, r8
    5488:	9004      	str	r0, [sp, #16]
    548a:	4658      	mov	r0, fp
    548c:	0c00      	lsrs	r0, r0, #16
    548e:	4681      	mov	r9, r0
    5490:	4658      	mov	r0, fp
    5492:	0404      	lsls	r4, r0, #16
    5494:	0c20      	lsrs	r0, r4, #16
    5496:	4682      	mov	sl, r0
    5498:	0007      	movs	r7, r0
    549a:	4648      	mov	r0, r9
    549c:	435f      	muls	r7, r3
    549e:	464c      	mov	r4, r9
    54a0:	4343      	muls	r3, r0
    54a2:	4660      	mov	r0, ip
    54a4:	4360      	muls	r0, r4
    54a6:	4664      	mov	r4, ip
    54a8:	4683      	mov	fp, r0
    54aa:	4650      	mov	r0, sl
    54ac:	4344      	muls	r4, r0
    54ae:	0c38      	lsrs	r0, r7, #16
    54b0:	4684      	mov	ip, r0
    54b2:	18e4      	adds	r4, r4, r3
    54b4:	4464      	add	r4, ip
    54b6:	42a3      	cmp	r3, r4
    54b8:	d903      	bls.n	54c2 <__aeabi_dmul+0x2c2>
    54ba:	2380      	movs	r3, #128	; 0x80
    54bc:	025b      	lsls	r3, r3, #9
    54be:	469c      	mov	ip, r3
    54c0:	44e3      	add	fp, ip
    54c2:	4648      	mov	r0, r9
    54c4:	043f      	lsls	r7, r7, #16
    54c6:	0c23      	lsrs	r3, r4, #16
    54c8:	0c3f      	lsrs	r7, r7, #16
    54ca:	0424      	lsls	r4, r4, #16
    54cc:	19e4      	adds	r4, r4, r7
    54ce:	4657      	mov	r7, sl
    54d0:	4368      	muls	r0, r5
    54d2:	436f      	muls	r7, r5
    54d4:	4684      	mov	ip, r0
    54d6:	464d      	mov	r5, r9
    54d8:	4650      	mov	r0, sl
    54da:	4355      	muls	r5, r2
    54dc:	4342      	muls	r2, r0
    54de:	0c38      	lsrs	r0, r7, #16
    54e0:	4681      	mov	r9, r0
    54e2:	4462      	add	r2, ip
    54e4:	444a      	add	r2, r9
    54e6:	445b      	add	r3, fp
    54e8:	4594      	cmp	ip, r2
    54ea:	d903      	bls.n	54f4 <__aeabi_dmul+0x2f4>
    54ec:	2080      	movs	r0, #128	; 0x80
    54ee:	0240      	lsls	r0, r0, #9
    54f0:	4684      	mov	ip, r0
    54f2:	4465      	add	r5, ip
    54f4:	9803      	ldr	r0, [sp, #12]
    54f6:	043f      	lsls	r7, r7, #16
    54f8:	4683      	mov	fp, r0
    54fa:	9804      	ldr	r0, [sp, #16]
    54fc:	0c3f      	lsrs	r7, r7, #16
    54fe:	4684      	mov	ip, r0
    5500:	44e3      	add	fp, ip
    5502:	45c3      	cmp	fp, r8
    5504:	4180      	sbcs	r0, r0
    5506:	4240      	negs	r0, r0
    5508:	4682      	mov	sl, r0
    550a:	0410      	lsls	r0, r2, #16
    550c:	4684      	mov	ip, r0
    550e:	9801      	ldr	r0, [sp, #4]
    5510:	4467      	add	r7, ip
    5512:	4684      	mov	ip, r0
    5514:	4467      	add	r7, ip
    5516:	44a3      	add	fp, r4
    5518:	46bc      	mov	ip, r7
    551a:	45a3      	cmp	fp, r4
    551c:	41a4      	sbcs	r4, r4
    551e:	4699      	mov	r9, r3
    5520:	44d4      	add	ip, sl
    5522:	4264      	negs	r4, r4
    5524:	4287      	cmp	r7, r0
    5526:	41bf      	sbcs	r7, r7
    5528:	45d4      	cmp	ip, sl
    552a:	4180      	sbcs	r0, r0
    552c:	44e1      	add	r9, ip
    552e:	46a0      	mov	r8, r4
    5530:	4599      	cmp	r9, r3
    5532:	419b      	sbcs	r3, r3
    5534:	427f      	negs	r7, r7
    5536:	4240      	negs	r0, r0
    5538:	44c8      	add	r8, r9
    553a:	4307      	orrs	r7, r0
    553c:	0c12      	lsrs	r2, r2, #16
    553e:	18ba      	adds	r2, r7, r2
    5540:	45a0      	cmp	r8, r4
    5542:	41a4      	sbcs	r4, r4
    5544:	425f      	negs	r7, r3
    5546:	003b      	movs	r3, r7
    5548:	4264      	negs	r4, r4
    554a:	4323      	orrs	r3, r4
    554c:	18d7      	adds	r7, r2, r3
    554e:	4643      	mov	r3, r8
    5550:	197d      	adds	r5, r7, r5
    5552:	0ddb      	lsrs	r3, r3, #23
    5554:	026d      	lsls	r5, r5, #9
    5556:	431d      	orrs	r5, r3
    5558:	465b      	mov	r3, fp
    555a:	025a      	lsls	r2, r3, #9
    555c:	9b05      	ldr	r3, [sp, #20]
    555e:	431a      	orrs	r2, r3
    5560:	1e53      	subs	r3, r2, #1
    5562:	419a      	sbcs	r2, r3
    5564:	465b      	mov	r3, fp
    5566:	0ddb      	lsrs	r3, r3, #23
    5568:	431a      	orrs	r2, r3
    556a:	4643      	mov	r3, r8
    556c:	025b      	lsls	r3, r3, #9
    556e:	4313      	orrs	r3, r2
    5570:	01ea      	lsls	r2, r5, #7
    5572:	d507      	bpl.n	5584 <__aeabi_dmul+0x384>
    5574:	2201      	movs	r2, #1
    5576:	085c      	lsrs	r4, r3, #1
    5578:	4013      	ands	r3, r2
    557a:	4323      	orrs	r3, r4
    557c:	07ea      	lsls	r2, r5, #31
    557e:	9e02      	ldr	r6, [sp, #8]
    5580:	4313      	orrs	r3, r2
    5582:	086d      	lsrs	r5, r5, #1
    5584:	4a57      	ldr	r2, [pc, #348]	; (56e4 <__aeabi_dmul+0x4e4>)
    5586:	18b2      	adds	r2, r6, r2
    5588:	2a00      	cmp	r2, #0
    558a:	dd4b      	ble.n	5624 <__aeabi_dmul+0x424>
    558c:	0758      	lsls	r0, r3, #29
    558e:	d009      	beq.n	55a4 <__aeabi_dmul+0x3a4>
    5590:	200f      	movs	r0, #15
    5592:	4018      	ands	r0, r3
    5594:	2804      	cmp	r0, #4
    5596:	d005      	beq.n	55a4 <__aeabi_dmul+0x3a4>
    5598:	1d18      	adds	r0, r3, #4
    559a:	4298      	cmp	r0, r3
    559c:	419b      	sbcs	r3, r3
    559e:	425b      	negs	r3, r3
    55a0:	18ed      	adds	r5, r5, r3
    55a2:	0003      	movs	r3, r0
    55a4:	01e8      	lsls	r0, r5, #7
    55a6:	d504      	bpl.n	55b2 <__aeabi_dmul+0x3b2>
    55a8:	4a4f      	ldr	r2, [pc, #316]	; (56e8 <__aeabi_dmul+0x4e8>)
    55aa:	4015      	ands	r5, r2
    55ac:	2280      	movs	r2, #128	; 0x80
    55ae:	00d2      	lsls	r2, r2, #3
    55b0:	18b2      	adds	r2, r6, r2
    55b2:	484e      	ldr	r0, [pc, #312]	; (56ec <__aeabi_dmul+0x4ec>)
    55b4:	4282      	cmp	r2, r0
    55b6:	dd00      	ble.n	55ba <__aeabi_dmul+0x3ba>
    55b8:	e6e7      	b.n	538a <__aeabi_dmul+0x18a>
    55ba:	2401      	movs	r4, #1
    55bc:	08db      	lsrs	r3, r3, #3
    55be:	0768      	lsls	r0, r5, #29
    55c0:	4318      	orrs	r0, r3
    55c2:	026d      	lsls	r5, r5, #9
    55c4:	0553      	lsls	r3, r2, #21
    55c6:	4680      	mov	r8, r0
    55c8:	0b2d      	lsrs	r5, r5, #12
    55ca:	0d5b      	lsrs	r3, r3, #21
    55cc:	400c      	ands	r4, r1
    55ce:	e67d      	b.n	52cc <__aeabi_dmul+0xcc>
    55d0:	2280      	movs	r2, #128	; 0x80
    55d2:	4659      	mov	r1, fp
    55d4:	0312      	lsls	r2, r2, #12
    55d6:	4211      	tst	r1, r2
    55d8:	d008      	beq.n	55ec <__aeabi_dmul+0x3ec>
    55da:	4215      	tst	r5, r2
    55dc:	d106      	bne.n	55ec <__aeabi_dmul+0x3ec>
    55de:	4315      	orrs	r5, r2
    55e0:	032d      	lsls	r5, r5, #12
    55e2:	4698      	mov	r8, r3
    55e4:	0b2d      	lsrs	r5, r5, #12
    55e6:	464c      	mov	r4, r9
    55e8:	4b41      	ldr	r3, [pc, #260]	; (56f0 <__aeabi_dmul+0x4f0>)
    55ea:	e66f      	b.n	52cc <__aeabi_dmul+0xcc>
    55ec:	465d      	mov	r5, fp
    55ee:	4315      	orrs	r5, r2
    55f0:	032d      	lsls	r5, r5, #12
    55f2:	0b2d      	lsrs	r5, r5, #12
    55f4:	4b3e      	ldr	r3, [pc, #248]	; (56f0 <__aeabi_dmul+0x4f0>)
    55f6:	e669      	b.n	52cc <__aeabi_dmul+0xcc>
    55f8:	0003      	movs	r3, r0
    55fa:	4655      	mov	r5, sl
    55fc:	3b28      	subs	r3, #40	; 0x28
    55fe:	409d      	lsls	r5, r3
    5600:	2300      	movs	r3, #0
    5602:	e6bc      	b.n	537e <__aeabi_dmul+0x17e>
    5604:	4650      	mov	r0, sl
    5606:	f000 fe05 	bl	6214 <__clzsi2>
    560a:	3020      	adds	r0, #32
    560c:	e6a8      	b.n	5360 <__aeabi_dmul+0x160>
    560e:	0003      	movs	r3, r0
    5610:	3b28      	subs	r3, #40	; 0x28
    5612:	409f      	lsls	r7, r3
    5614:	2300      	movs	r3, #0
    5616:	46bb      	mov	fp, r7
    5618:	4698      	mov	r8, r3
    561a:	e689      	b.n	5330 <__aeabi_dmul+0x130>
    561c:	f000 fdfa 	bl	6214 <__clzsi2>
    5620:	3020      	adds	r0, #32
    5622:	e673      	b.n	530c <__aeabi_dmul+0x10c>
    5624:	2401      	movs	r4, #1
    5626:	1aa6      	subs	r6, r4, r2
    5628:	2e38      	cmp	r6, #56	; 0x38
    562a:	dd07      	ble.n	563c <__aeabi_dmul+0x43c>
    562c:	2200      	movs	r2, #0
    562e:	400c      	ands	r4, r1
    5630:	2300      	movs	r3, #0
    5632:	2500      	movs	r5, #0
    5634:	4690      	mov	r8, r2
    5636:	e649      	b.n	52cc <__aeabi_dmul+0xcc>
    5638:	9e02      	ldr	r6, [sp, #8]
    563a:	e7a3      	b.n	5584 <__aeabi_dmul+0x384>
    563c:	2e1f      	cmp	r6, #31
    563e:	dc20      	bgt.n	5682 <__aeabi_dmul+0x482>
    5640:	2220      	movs	r2, #32
    5642:	002c      	movs	r4, r5
    5644:	0018      	movs	r0, r3
    5646:	1b92      	subs	r2, r2, r6
    5648:	40f0      	lsrs	r0, r6
    564a:	4094      	lsls	r4, r2
    564c:	4093      	lsls	r3, r2
    564e:	4304      	orrs	r4, r0
    5650:	1e58      	subs	r0, r3, #1
    5652:	4183      	sbcs	r3, r0
    5654:	431c      	orrs	r4, r3
    5656:	40f5      	lsrs	r5, r6
    5658:	0763      	lsls	r3, r4, #29
    565a:	d009      	beq.n	5670 <__aeabi_dmul+0x470>
    565c:	230f      	movs	r3, #15
    565e:	4023      	ands	r3, r4
    5660:	2b04      	cmp	r3, #4
    5662:	d005      	beq.n	5670 <__aeabi_dmul+0x470>
    5664:	0023      	movs	r3, r4
    5666:	1d1c      	adds	r4, r3, #4
    5668:	429c      	cmp	r4, r3
    566a:	4192      	sbcs	r2, r2
    566c:	4252      	negs	r2, r2
    566e:	18ad      	adds	r5, r5, r2
    5670:	022b      	lsls	r3, r5, #8
    5672:	d51f      	bpl.n	56b4 <__aeabi_dmul+0x4b4>
    5674:	2401      	movs	r4, #1
    5676:	2200      	movs	r2, #0
    5678:	400c      	ands	r4, r1
    567a:	2301      	movs	r3, #1
    567c:	2500      	movs	r5, #0
    567e:	4690      	mov	r8, r2
    5680:	e624      	b.n	52cc <__aeabi_dmul+0xcc>
    5682:	201f      	movs	r0, #31
    5684:	002c      	movs	r4, r5
    5686:	4240      	negs	r0, r0
    5688:	1a82      	subs	r2, r0, r2
    568a:	40d4      	lsrs	r4, r2
    568c:	2e20      	cmp	r6, #32
    568e:	d01c      	beq.n	56ca <__aeabi_dmul+0x4ca>
    5690:	2240      	movs	r2, #64	; 0x40
    5692:	1b96      	subs	r6, r2, r6
    5694:	40b5      	lsls	r5, r6
    5696:	432b      	orrs	r3, r5
    5698:	1e58      	subs	r0, r3, #1
    569a:	4183      	sbcs	r3, r0
    569c:	2007      	movs	r0, #7
    569e:	4323      	orrs	r3, r4
    56a0:	4018      	ands	r0, r3
    56a2:	2500      	movs	r5, #0
    56a4:	2800      	cmp	r0, #0
    56a6:	d009      	beq.n	56bc <__aeabi_dmul+0x4bc>
    56a8:	220f      	movs	r2, #15
    56aa:	2500      	movs	r5, #0
    56ac:	401a      	ands	r2, r3
    56ae:	001c      	movs	r4, r3
    56b0:	2a04      	cmp	r2, #4
    56b2:	d1d8      	bne.n	5666 <__aeabi_dmul+0x466>
    56b4:	0023      	movs	r3, r4
    56b6:	0768      	lsls	r0, r5, #29
    56b8:	026d      	lsls	r5, r5, #9
    56ba:	0b2d      	lsrs	r5, r5, #12
    56bc:	2401      	movs	r4, #1
    56be:	08db      	lsrs	r3, r3, #3
    56c0:	4303      	orrs	r3, r0
    56c2:	4698      	mov	r8, r3
    56c4:	400c      	ands	r4, r1
    56c6:	2300      	movs	r3, #0
    56c8:	e600      	b.n	52cc <__aeabi_dmul+0xcc>
    56ca:	2500      	movs	r5, #0
    56cc:	e7e3      	b.n	5696 <__aeabi_dmul+0x496>
    56ce:	2280      	movs	r2, #128	; 0x80
    56d0:	2401      	movs	r4, #1
    56d2:	0312      	lsls	r2, r2, #12
    56d4:	4315      	orrs	r5, r2
    56d6:	032d      	lsls	r5, r5, #12
    56d8:	4698      	mov	r8, r3
    56da:	0b2d      	lsrs	r5, r5, #12
    56dc:	400c      	ands	r4, r1
    56de:	4b04      	ldr	r3, [pc, #16]	; (56f0 <__aeabi_dmul+0x4f0>)
    56e0:	e5f4      	b.n	52cc <__aeabi_dmul+0xcc>
    56e2:	46c0      	nop			; (mov r8, r8)
    56e4:	000003ff 	.word	0x000003ff
    56e8:	feffffff 	.word	0xfeffffff
    56ec:	000007fe 	.word	0x000007fe
    56f0:	000007ff 	.word	0x000007ff

000056f4 <__aeabi_dsub>:
    56f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56f6:	4657      	mov	r7, sl
    56f8:	464e      	mov	r6, r9
    56fa:	4645      	mov	r5, r8
    56fc:	b4e0      	push	{r5, r6, r7}
    56fe:	000e      	movs	r6, r1
    5700:	0011      	movs	r1, r2
    5702:	0ff2      	lsrs	r2, r6, #31
    5704:	4692      	mov	sl, r2
    5706:	00c5      	lsls	r5, r0, #3
    5708:	0f42      	lsrs	r2, r0, #29
    570a:	0318      	lsls	r0, r3, #12
    570c:	0337      	lsls	r7, r6, #12
    570e:	0074      	lsls	r4, r6, #1
    5710:	0a40      	lsrs	r0, r0, #9
    5712:	0f4e      	lsrs	r6, r1, #29
    5714:	0a7f      	lsrs	r7, r7, #9
    5716:	4330      	orrs	r0, r6
    5718:	4ecf      	ldr	r6, [pc, #828]	; (5a58 <__aeabi_dsub+0x364>)
    571a:	4317      	orrs	r7, r2
    571c:	005a      	lsls	r2, r3, #1
    571e:	0d64      	lsrs	r4, r4, #21
    5720:	0d52      	lsrs	r2, r2, #21
    5722:	0fdb      	lsrs	r3, r3, #31
    5724:	00c9      	lsls	r1, r1, #3
    5726:	42b2      	cmp	r2, r6
    5728:	d100      	bne.n	572c <__aeabi_dsub+0x38>
    572a:	e0e5      	b.n	58f8 <__aeabi_dsub+0x204>
    572c:	2601      	movs	r6, #1
    572e:	4073      	eors	r3, r6
    5730:	1aa6      	subs	r6, r4, r2
    5732:	46b4      	mov	ip, r6
    5734:	4553      	cmp	r3, sl
    5736:	d100      	bne.n	573a <__aeabi_dsub+0x46>
    5738:	e0af      	b.n	589a <__aeabi_dsub+0x1a6>
    573a:	2e00      	cmp	r6, #0
    573c:	dc00      	bgt.n	5740 <__aeabi_dsub+0x4c>
    573e:	e10d      	b.n	595c <__aeabi_dsub+0x268>
    5740:	2a00      	cmp	r2, #0
    5742:	d13a      	bne.n	57ba <__aeabi_dsub+0xc6>
    5744:	0003      	movs	r3, r0
    5746:	430b      	orrs	r3, r1
    5748:	d000      	beq.n	574c <__aeabi_dsub+0x58>
    574a:	e0e4      	b.n	5916 <__aeabi_dsub+0x222>
    574c:	076b      	lsls	r3, r5, #29
    574e:	d009      	beq.n	5764 <__aeabi_dsub+0x70>
    5750:	230f      	movs	r3, #15
    5752:	402b      	ands	r3, r5
    5754:	2b04      	cmp	r3, #4
    5756:	d005      	beq.n	5764 <__aeabi_dsub+0x70>
    5758:	1d2b      	adds	r3, r5, #4
    575a:	42ab      	cmp	r3, r5
    575c:	41ad      	sbcs	r5, r5
    575e:	426d      	negs	r5, r5
    5760:	197f      	adds	r7, r7, r5
    5762:	001d      	movs	r5, r3
    5764:	023b      	lsls	r3, r7, #8
    5766:	d400      	bmi.n	576a <__aeabi_dsub+0x76>
    5768:	e088      	b.n	587c <__aeabi_dsub+0x188>
    576a:	4bbb      	ldr	r3, [pc, #748]	; (5a58 <__aeabi_dsub+0x364>)
    576c:	3401      	adds	r4, #1
    576e:	429c      	cmp	r4, r3
    5770:	d100      	bne.n	5774 <__aeabi_dsub+0x80>
    5772:	e110      	b.n	5996 <__aeabi_dsub+0x2a2>
    5774:	003a      	movs	r2, r7
    5776:	4bb9      	ldr	r3, [pc, #740]	; (5a5c <__aeabi_dsub+0x368>)
    5778:	4651      	mov	r1, sl
    577a:	401a      	ands	r2, r3
    577c:	2301      	movs	r3, #1
    577e:	0750      	lsls	r0, r2, #29
    5780:	08ed      	lsrs	r5, r5, #3
    5782:	0252      	lsls	r2, r2, #9
    5784:	0564      	lsls	r4, r4, #21
    5786:	4305      	orrs	r5, r0
    5788:	0b12      	lsrs	r2, r2, #12
    578a:	0d64      	lsrs	r4, r4, #21
    578c:	400b      	ands	r3, r1
    578e:	2100      	movs	r1, #0
    5790:	0028      	movs	r0, r5
    5792:	0312      	lsls	r2, r2, #12
    5794:	0d0d      	lsrs	r5, r1, #20
    5796:	0b12      	lsrs	r2, r2, #12
    5798:	0564      	lsls	r4, r4, #21
    579a:	052d      	lsls	r5, r5, #20
    579c:	4315      	orrs	r5, r2
    579e:	0862      	lsrs	r2, r4, #1
    57a0:	4caf      	ldr	r4, [pc, #700]	; (5a60 <__aeabi_dsub+0x36c>)
    57a2:	07db      	lsls	r3, r3, #31
    57a4:	402c      	ands	r4, r5
    57a6:	4314      	orrs	r4, r2
    57a8:	0064      	lsls	r4, r4, #1
    57aa:	0864      	lsrs	r4, r4, #1
    57ac:	431c      	orrs	r4, r3
    57ae:	0021      	movs	r1, r4
    57b0:	bc1c      	pop	{r2, r3, r4}
    57b2:	4690      	mov	r8, r2
    57b4:	4699      	mov	r9, r3
    57b6:	46a2      	mov	sl, r4
    57b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57ba:	4ba7      	ldr	r3, [pc, #668]	; (5a58 <__aeabi_dsub+0x364>)
    57bc:	429c      	cmp	r4, r3
    57be:	d0c5      	beq.n	574c <__aeabi_dsub+0x58>
    57c0:	2380      	movs	r3, #128	; 0x80
    57c2:	041b      	lsls	r3, r3, #16
    57c4:	4318      	orrs	r0, r3
    57c6:	4663      	mov	r3, ip
    57c8:	2b38      	cmp	r3, #56	; 0x38
    57ca:	dd00      	ble.n	57ce <__aeabi_dsub+0xda>
    57cc:	e0fd      	b.n	59ca <__aeabi_dsub+0x2d6>
    57ce:	2b1f      	cmp	r3, #31
    57d0:	dd00      	ble.n	57d4 <__aeabi_dsub+0xe0>
    57d2:	e130      	b.n	5a36 <__aeabi_dsub+0x342>
    57d4:	4662      	mov	r2, ip
    57d6:	2320      	movs	r3, #32
    57d8:	1a9b      	subs	r3, r3, r2
    57da:	0002      	movs	r2, r0
    57dc:	409a      	lsls	r2, r3
    57de:	4666      	mov	r6, ip
    57e0:	4690      	mov	r8, r2
    57e2:	000a      	movs	r2, r1
    57e4:	4099      	lsls	r1, r3
    57e6:	40f2      	lsrs	r2, r6
    57e8:	4646      	mov	r6, r8
    57ea:	1e4b      	subs	r3, r1, #1
    57ec:	4199      	sbcs	r1, r3
    57ee:	4332      	orrs	r2, r6
    57f0:	4311      	orrs	r1, r2
    57f2:	4663      	mov	r3, ip
    57f4:	0002      	movs	r2, r0
    57f6:	40da      	lsrs	r2, r3
    57f8:	1a69      	subs	r1, r5, r1
    57fa:	428d      	cmp	r5, r1
    57fc:	419b      	sbcs	r3, r3
    57fe:	000d      	movs	r5, r1
    5800:	1aba      	subs	r2, r7, r2
    5802:	425b      	negs	r3, r3
    5804:	1ad7      	subs	r7, r2, r3
    5806:	023b      	lsls	r3, r7, #8
    5808:	d535      	bpl.n	5876 <__aeabi_dsub+0x182>
    580a:	027a      	lsls	r2, r7, #9
    580c:	0a53      	lsrs	r3, r2, #9
    580e:	4698      	mov	r8, r3
    5810:	4643      	mov	r3, r8
    5812:	2b00      	cmp	r3, #0
    5814:	d100      	bne.n	5818 <__aeabi_dsub+0x124>
    5816:	e0c4      	b.n	59a2 <__aeabi_dsub+0x2ae>
    5818:	4640      	mov	r0, r8
    581a:	f000 fcfb 	bl	6214 <__clzsi2>
    581e:	0003      	movs	r3, r0
    5820:	3b08      	subs	r3, #8
    5822:	2b1f      	cmp	r3, #31
    5824:	dd00      	ble.n	5828 <__aeabi_dsub+0x134>
    5826:	e0c5      	b.n	59b4 <__aeabi_dsub+0x2c0>
    5828:	2220      	movs	r2, #32
    582a:	0029      	movs	r1, r5
    582c:	1ad2      	subs	r2, r2, r3
    582e:	4647      	mov	r7, r8
    5830:	40d1      	lsrs	r1, r2
    5832:	409f      	lsls	r7, r3
    5834:	000a      	movs	r2, r1
    5836:	409d      	lsls	r5, r3
    5838:	433a      	orrs	r2, r7
    583a:	429c      	cmp	r4, r3
    583c:	dd00      	ble.n	5840 <__aeabi_dsub+0x14c>
    583e:	e0c0      	b.n	59c2 <__aeabi_dsub+0x2ce>
    5840:	1b1c      	subs	r4, r3, r4
    5842:	1c63      	adds	r3, r4, #1
    5844:	2b1f      	cmp	r3, #31
    5846:	dd00      	ble.n	584a <__aeabi_dsub+0x156>
    5848:	e0e4      	b.n	5a14 <__aeabi_dsub+0x320>
    584a:	2120      	movs	r1, #32
    584c:	0014      	movs	r4, r2
    584e:	0028      	movs	r0, r5
    5850:	1ac9      	subs	r1, r1, r3
    5852:	40d8      	lsrs	r0, r3
    5854:	408c      	lsls	r4, r1
    5856:	408d      	lsls	r5, r1
    5858:	4304      	orrs	r4, r0
    585a:	40da      	lsrs	r2, r3
    585c:	1e68      	subs	r0, r5, #1
    585e:	4185      	sbcs	r5, r0
    5860:	0017      	movs	r7, r2
    5862:	4325      	orrs	r5, r4
    5864:	2400      	movs	r4, #0
    5866:	e771      	b.n	574c <__aeabi_dsub+0x58>
    5868:	4642      	mov	r2, r8
    586a:	4663      	mov	r3, ip
    586c:	431a      	orrs	r2, r3
    586e:	d100      	bne.n	5872 <__aeabi_dsub+0x17e>
    5870:	e24c      	b.n	5d0c <__aeabi_dsub+0x618>
    5872:	4667      	mov	r7, ip
    5874:	4645      	mov	r5, r8
    5876:	076b      	lsls	r3, r5, #29
    5878:	d000      	beq.n	587c <__aeabi_dsub+0x188>
    587a:	e769      	b.n	5750 <__aeabi_dsub+0x5c>
    587c:	2301      	movs	r3, #1
    587e:	4651      	mov	r1, sl
    5880:	0778      	lsls	r0, r7, #29
    5882:	08ed      	lsrs	r5, r5, #3
    5884:	08fa      	lsrs	r2, r7, #3
    5886:	400b      	ands	r3, r1
    5888:	4305      	orrs	r5, r0
    588a:	4973      	ldr	r1, [pc, #460]	; (5a58 <__aeabi_dsub+0x364>)
    588c:	428c      	cmp	r4, r1
    588e:	d038      	beq.n	5902 <__aeabi_dsub+0x20e>
    5890:	0312      	lsls	r2, r2, #12
    5892:	0564      	lsls	r4, r4, #21
    5894:	0b12      	lsrs	r2, r2, #12
    5896:	0d64      	lsrs	r4, r4, #21
    5898:	e779      	b.n	578e <__aeabi_dsub+0x9a>
    589a:	2e00      	cmp	r6, #0
    589c:	dc00      	bgt.n	58a0 <__aeabi_dsub+0x1ac>
    589e:	e09a      	b.n	59d6 <__aeabi_dsub+0x2e2>
    58a0:	2a00      	cmp	r2, #0
    58a2:	d047      	beq.n	5934 <__aeabi_dsub+0x240>
    58a4:	4a6c      	ldr	r2, [pc, #432]	; (5a58 <__aeabi_dsub+0x364>)
    58a6:	4294      	cmp	r4, r2
    58a8:	d100      	bne.n	58ac <__aeabi_dsub+0x1b8>
    58aa:	e74f      	b.n	574c <__aeabi_dsub+0x58>
    58ac:	2280      	movs	r2, #128	; 0x80
    58ae:	0412      	lsls	r2, r2, #16
    58b0:	4310      	orrs	r0, r2
    58b2:	4662      	mov	r2, ip
    58b4:	2a38      	cmp	r2, #56	; 0x38
    58b6:	dc00      	bgt.n	58ba <__aeabi_dsub+0x1c6>
    58b8:	e108      	b.n	5acc <__aeabi_dsub+0x3d8>
    58ba:	4301      	orrs	r1, r0
    58bc:	1e48      	subs	r0, r1, #1
    58be:	4181      	sbcs	r1, r0
    58c0:	2200      	movs	r2, #0
    58c2:	b2c9      	uxtb	r1, r1
    58c4:	1949      	adds	r1, r1, r5
    58c6:	19d2      	adds	r2, r2, r7
    58c8:	42a9      	cmp	r1, r5
    58ca:	41bf      	sbcs	r7, r7
    58cc:	000d      	movs	r5, r1
    58ce:	427f      	negs	r7, r7
    58d0:	18bf      	adds	r7, r7, r2
    58d2:	023a      	lsls	r2, r7, #8
    58d4:	d400      	bmi.n	58d8 <__aeabi_dsub+0x1e4>
    58d6:	e142      	b.n	5b5e <__aeabi_dsub+0x46a>
    58d8:	4a5f      	ldr	r2, [pc, #380]	; (5a58 <__aeabi_dsub+0x364>)
    58da:	3401      	adds	r4, #1
    58dc:	4294      	cmp	r4, r2
    58de:	d100      	bne.n	58e2 <__aeabi_dsub+0x1ee>
    58e0:	e14e      	b.n	5b80 <__aeabi_dsub+0x48c>
    58e2:	2001      	movs	r0, #1
    58e4:	4a5d      	ldr	r2, [pc, #372]	; (5a5c <__aeabi_dsub+0x368>)
    58e6:	0869      	lsrs	r1, r5, #1
    58e8:	403a      	ands	r2, r7
    58ea:	4028      	ands	r0, r5
    58ec:	4308      	orrs	r0, r1
    58ee:	07d5      	lsls	r5, r2, #31
    58f0:	4305      	orrs	r5, r0
    58f2:	0857      	lsrs	r7, r2, #1
    58f4:	469a      	mov	sl, r3
    58f6:	e729      	b.n	574c <__aeabi_dsub+0x58>
    58f8:	0006      	movs	r6, r0
    58fa:	430e      	orrs	r6, r1
    58fc:	d000      	beq.n	5900 <__aeabi_dsub+0x20c>
    58fe:	e717      	b.n	5730 <__aeabi_dsub+0x3c>
    5900:	e714      	b.n	572c <__aeabi_dsub+0x38>
    5902:	0029      	movs	r1, r5
    5904:	4311      	orrs	r1, r2
    5906:	d100      	bne.n	590a <__aeabi_dsub+0x216>
    5908:	e1f9      	b.n	5cfe <__aeabi_dsub+0x60a>
    590a:	2180      	movs	r1, #128	; 0x80
    590c:	0309      	lsls	r1, r1, #12
    590e:	430a      	orrs	r2, r1
    5910:	0312      	lsls	r2, r2, #12
    5912:	0b12      	lsrs	r2, r2, #12
    5914:	e73b      	b.n	578e <__aeabi_dsub+0x9a>
    5916:	2301      	movs	r3, #1
    5918:	425b      	negs	r3, r3
    591a:	4698      	mov	r8, r3
    591c:	44c4      	add	ip, r8
    591e:	4663      	mov	r3, ip
    5920:	2b00      	cmp	r3, #0
    5922:	d172      	bne.n	5a0a <__aeabi_dsub+0x316>
    5924:	1a69      	subs	r1, r5, r1
    5926:	428d      	cmp	r5, r1
    5928:	419b      	sbcs	r3, r3
    592a:	1a3f      	subs	r7, r7, r0
    592c:	425b      	negs	r3, r3
    592e:	1aff      	subs	r7, r7, r3
    5930:	000d      	movs	r5, r1
    5932:	e768      	b.n	5806 <__aeabi_dsub+0x112>
    5934:	0002      	movs	r2, r0
    5936:	430a      	orrs	r2, r1
    5938:	d100      	bne.n	593c <__aeabi_dsub+0x248>
    593a:	e707      	b.n	574c <__aeabi_dsub+0x58>
    593c:	2201      	movs	r2, #1
    593e:	4252      	negs	r2, r2
    5940:	4690      	mov	r8, r2
    5942:	44c4      	add	ip, r8
    5944:	4662      	mov	r2, ip
    5946:	2a00      	cmp	r2, #0
    5948:	d000      	beq.n	594c <__aeabi_dsub+0x258>
    594a:	e0e6      	b.n	5b1a <__aeabi_dsub+0x426>
    594c:	1869      	adds	r1, r5, r1
    594e:	42a9      	cmp	r1, r5
    5950:	41b6      	sbcs	r6, r6
    5952:	183f      	adds	r7, r7, r0
    5954:	4276      	negs	r6, r6
    5956:	19f7      	adds	r7, r6, r7
    5958:	000d      	movs	r5, r1
    595a:	e7ba      	b.n	58d2 <__aeabi_dsub+0x1de>
    595c:	2e00      	cmp	r6, #0
    595e:	d000      	beq.n	5962 <__aeabi_dsub+0x26e>
    5960:	e080      	b.n	5a64 <__aeabi_dsub+0x370>
    5962:	1c62      	adds	r2, r4, #1
    5964:	0552      	lsls	r2, r2, #21
    5966:	0d52      	lsrs	r2, r2, #21
    5968:	2a01      	cmp	r2, #1
    596a:	dc00      	bgt.n	596e <__aeabi_dsub+0x27a>
    596c:	e0f9      	b.n	5b62 <__aeabi_dsub+0x46e>
    596e:	1a6a      	subs	r2, r5, r1
    5970:	4691      	mov	r9, r2
    5972:	454d      	cmp	r5, r9
    5974:	41b6      	sbcs	r6, r6
    5976:	1a3a      	subs	r2, r7, r0
    5978:	4276      	negs	r6, r6
    597a:	1b92      	subs	r2, r2, r6
    597c:	4690      	mov	r8, r2
    597e:	0212      	lsls	r2, r2, #8
    5980:	d400      	bmi.n	5984 <__aeabi_dsub+0x290>
    5982:	e099      	b.n	5ab8 <__aeabi_dsub+0x3c4>
    5984:	1b4d      	subs	r5, r1, r5
    5986:	42a9      	cmp	r1, r5
    5988:	4189      	sbcs	r1, r1
    598a:	1bc7      	subs	r7, r0, r7
    598c:	4249      	negs	r1, r1
    598e:	1a7a      	subs	r2, r7, r1
    5990:	4690      	mov	r8, r2
    5992:	469a      	mov	sl, r3
    5994:	e73c      	b.n	5810 <__aeabi_dsub+0x11c>
    5996:	4652      	mov	r2, sl
    5998:	2301      	movs	r3, #1
    599a:	2500      	movs	r5, #0
    599c:	4013      	ands	r3, r2
    599e:	2200      	movs	r2, #0
    59a0:	e6f5      	b.n	578e <__aeabi_dsub+0x9a>
    59a2:	0028      	movs	r0, r5
    59a4:	f000 fc36 	bl	6214 <__clzsi2>
    59a8:	3020      	adds	r0, #32
    59aa:	0003      	movs	r3, r0
    59ac:	3b08      	subs	r3, #8
    59ae:	2b1f      	cmp	r3, #31
    59b0:	dc00      	bgt.n	59b4 <__aeabi_dsub+0x2c0>
    59b2:	e739      	b.n	5828 <__aeabi_dsub+0x134>
    59b4:	002a      	movs	r2, r5
    59b6:	3828      	subs	r0, #40	; 0x28
    59b8:	4082      	lsls	r2, r0
    59ba:	2500      	movs	r5, #0
    59bc:	429c      	cmp	r4, r3
    59be:	dc00      	bgt.n	59c2 <__aeabi_dsub+0x2ce>
    59c0:	e73e      	b.n	5840 <__aeabi_dsub+0x14c>
    59c2:	4f26      	ldr	r7, [pc, #152]	; (5a5c <__aeabi_dsub+0x368>)
    59c4:	1ae4      	subs	r4, r4, r3
    59c6:	4017      	ands	r7, r2
    59c8:	e6c0      	b.n	574c <__aeabi_dsub+0x58>
    59ca:	4301      	orrs	r1, r0
    59cc:	1e48      	subs	r0, r1, #1
    59ce:	4181      	sbcs	r1, r0
    59d0:	2200      	movs	r2, #0
    59d2:	b2c9      	uxtb	r1, r1
    59d4:	e710      	b.n	57f8 <__aeabi_dsub+0x104>
    59d6:	2e00      	cmp	r6, #0
    59d8:	d000      	beq.n	59dc <__aeabi_dsub+0x2e8>
    59da:	e0f1      	b.n	5bc0 <__aeabi_dsub+0x4cc>
    59dc:	1c62      	adds	r2, r4, #1
    59de:	4694      	mov	ip, r2
    59e0:	0552      	lsls	r2, r2, #21
    59e2:	0d52      	lsrs	r2, r2, #21
    59e4:	2a01      	cmp	r2, #1
    59e6:	dc00      	bgt.n	59ea <__aeabi_dsub+0x2f6>
    59e8:	e0a0      	b.n	5b2c <__aeabi_dsub+0x438>
    59ea:	4a1b      	ldr	r2, [pc, #108]	; (5a58 <__aeabi_dsub+0x364>)
    59ec:	4594      	cmp	ip, r2
    59ee:	d100      	bne.n	59f2 <__aeabi_dsub+0x2fe>
    59f0:	e0c5      	b.n	5b7e <__aeabi_dsub+0x48a>
    59f2:	1869      	adds	r1, r5, r1
    59f4:	42a9      	cmp	r1, r5
    59f6:	4192      	sbcs	r2, r2
    59f8:	183f      	adds	r7, r7, r0
    59fa:	4252      	negs	r2, r2
    59fc:	19d2      	adds	r2, r2, r7
    59fe:	0849      	lsrs	r1, r1, #1
    5a00:	07d5      	lsls	r5, r2, #31
    5a02:	430d      	orrs	r5, r1
    5a04:	0857      	lsrs	r7, r2, #1
    5a06:	4664      	mov	r4, ip
    5a08:	e6a0      	b.n	574c <__aeabi_dsub+0x58>
    5a0a:	4b13      	ldr	r3, [pc, #76]	; (5a58 <__aeabi_dsub+0x364>)
    5a0c:	429c      	cmp	r4, r3
    5a0e:	d000      	beq.n	5a12 <__aeabi_dsub+0x31e>
    5a10:	e6d9      	b.n	57c6 <__aeabi_dsub+0xd2>
    5a12:	e69b      	b.n	574c <__aeabi_dsub+0x58>
    5a14:	0011      	movs	r1, r2
    5a16:	3c1f      	subs	r4, #31
    5a18:	40e1      	lsrs	r1, r4
    5a1a:	000c      	movs	r4, r1
    5a1c:	2b20      	cmp	r3, #32
    5a1e:	d100      	bne.n	5a22 <__aeabi_dsub+0x32e>
    5a20:	e080      	b.n	5b24 <__aeabi_dsub+0x430>
    5a22:	2140      	movs	r1, #64	; 0x40
    5a24:	1acb      	subs	r3, r1, r3
    5a26:	409a      	lsls	r2, r3
    5a28:	4315      	orrs	r5, r2
    5a2a:	1e6a      	subs	r2, r5, #1
    5a2c:	4195      	sbcs	r5, r2
    5a2e:	2700      	movs	r7, #0
    5a30:	4325      	orrs	r5, r4
    5a32:	2400      	movs	r4, #0
    5a34:	e71f      	b.n	5876 <__aeabi_dsub+0x182>
    5a36:	4663      	mov	r3, ip
    5a38:	0002      	movs	r2, r0
    5a3a:	3b20      	subs	r3, #32
    5a3c:	40da      	lsrs	r2, r3
    5a3e:	4663      	mov	r3, ip
    5a40:	2b20      	cmp	r3, #32
    5a42:	d071      	beq.n	5b28 <__aeabi_dsub+0x434>
    5a44:	2340      	movs	r3, #64	; 0x40
    5a46:	4666      	mov	r6, ip
    5a48:	1b9b      	subs	r3, r3, r6
    5a4a:	4098      	lsls	r0, r3
    5a4c:	4301      	orrs	r1, r0
    5a4e:	1e48      	subs	r0, r1, #1
    5a50:	4181      	sbcs	r1, r0
    5a52:	4311      	orrs	r1, r2
    5a54:	2200      	movs	r2, #0
    5a56:	e6cf      	b.n	57f8 <__aeabi_dsub+0x104>
    5a58:	000007ff 	.word	0x000007ff
    5a5c:	ff7fffff 	.word	0xff7fffff
    5a60:	800fffff 	.word	0x800fffff
    5a64:	2c00      	cmp	r4, #0
    5a66:	d048      	beq.n	5afa <__aeabi_dsub+0x406>
    5a68:	4cca      	ldr	r4, [pc, #808]	; (5d94 <__aeabi_dsub+0x6a0>)
    5a6a:	42a2      	cmp	r2, r4
    5a6c:	d100      	bne.n	5a70 <__aeabi_dsub+0x37c>
    5a6e:	e0a2      	b.n	5bb6 <__aeabi_dsub+0x4c2>
    5a70:	4274      	negs	r4, r6
    5a72:	46a1      	mov	r9, r4
    5a74:	2480      	movs	r4, #128	; 0x80
    5a76:	0424      	lsls	r4, r4, #16
    5a78:	4327      	orrs	r7, r4
    5a7a:	464c      	mov	r4, r9
    5a7c:	2c38      	cmp	r4, #56	; 0x38
    5a7e:	dd00      	ble.n	5a82 <__aeabi_dsub+0x38e>
    5a80:	e0db      	b.n	5c3a <__aeabi_dsub+0x546>
    5a82:	2c1f      	cmp	r4, #31
    5a84:	dd00      	ble.n	5a88 <__aeabi_dsub+0x394>
    5a86:	e144      	b.n	5d12 <__aeabi_dsub+0x61e>
    5a88:	464e      	mov	r6, r9
    5a8a:	2420      	movs	r4, #32
    5a8c:	1ba4      	subs	r4, r4, r6
    5a8e:	003e      	movs	r6, r7
    5a90:	40a6      	lsls	r6, r4
    5a92:	46a2      	mov	sl, r4
    5a94:	46b0      	mov	r8, r6
    5a96:	464c      	mov	r4, r9
    5a98:	002e      	movs	r6, r5
    5a9a:	40e6      	lsrs	r6, r4
    5a9c:	46b4      	mov	ip, r6
    5a9e:	4646      	mov	r6, r8
    5aa0:	4664      	mov	r4, ip
    5aa2:	4326      	orrs	r6, r4
    5aa4:	4654      	mov	r4, sl
    5aa6:	40a5      	lsls	r5, r4
    5aa8:	1e6c      	subs	r4, r5, #1
    5aaa:	41a5      	sbcs	r5, r4
    5aac:	0034      	movs	r4, r6
    5aae:	432c      	orrs	r4, r5
    5ab0:	464d      	mov	r5, r9
    5ab2:	40ef      	lsrs	r7, r5
    5ab4:	1b0d      	subs	r5, r1, r4
    5ab6:	e028      	b.n	5b0a <__aeabi_dsub+0x416>
    5ab8:	464a      	mov	r2, r9
    5aba:	4643      	mov	r3, r8
    5abc:	464d      	mov	r5, r9
    5abe:	431a      	orrs	r2, r3
    5ac0:	d000      	beq.n	5ac4 <__aeabi_dsub+0x3d0>
    5ac2:	e6a5      	b.n	5810 <__aeabi_dsub+0x11c>
    5ac4:	2300      	movs	r3, #0
    5ac6:	2400      	movs	r4, #0
    5ac8:	2500      	movs	r5, #0
    5aca:	e6de      	b.n	588a <__aeabi_dsub+0x196>
    5acc:	2a1f      	cmp	r2, #31
    5ace:	dc5a      	bgt.n	5b86 <__aeabi_dsub+0x492>
    5ad0:	4666      	mov	r6, ip
    5ad2:	2220      	movs	r2, #32
    5ad4:	1b92      	subs	r2, r2, r6
    5ad6:	0006      	movs	r6, r0
    5ad8:	4096      	lsls	r6, r2
    5ada:	4691      	mov	r9, r2
    5adc:	46b0      	mov	r8, r6
    5ade:	4662      	mov	r2, ip
    5ae0:	000e      	movs	r6, r1
    5ae2:	40d6      	lsrs	r6, r2
    5ae4:	4642      	mov	r2, r8
    5ae6:	4316      	orrs	r6, r2
    5ae8:	464a      	mov	r2, r9
    5aea:	4091      	lsls	r1, r2
    5aec:	1e4a      	subs	r2, r1, #1
    5aee:	4191      	sbcs	r1, r2
    5af0:	0002      	movs	r2, r0
    5af2:	4660      	mov	r0, ip
    5af4:	4331      	orrs	r1, r6
    5af6:	40c2      	lsrs	r2, r0
    5af8:	e6e4      	b.n	58c4 <__aeabi_dsub+0x1d0>
    5afa:	003c      	movs	r4, r7
    5afc:	432c      	orrs	r4, r5
    5afe:	d05a      	beq.n	5bb6 <__aeabi_dsub+0x4c2>
    5b00:	43f4      	mvns	r4, r6
    5b02:	46a1      	mov	r9, r4
    5b04:	2c00      	cmp	r4, #0
    5b06:	d152      	bne.n	5bae <__aeabi_dsub+0x4ba>
    5b08:	1b4d      	subs	r5, r1, r5
    5b0a:	42a9      	cmp	r1, r5
    5b0c:	4189      	sbcs	r1, r1
    5b0e:	1bc7      	subs	r7, r0, r7
    5b10:	4249      	negs	r1, r1
    5b12:	1a7f      	subs	r7, r7, r1
    5b14:	0014      	movs	r4, r2
    5b16:	469a      	mov	sl, r3
    5b18:	e675      	b.n	5806 <__aeabi_dsub+0x112>
    5b1a:	4a9e      	ldr	r2, [pc, #632]	; (5d94 <__aeabi_dsub+0x6a0>)
    5b1c:	4294      	cmp	r4, r2
    5b1e:	d000      	beq.n	5b22 <__aeabi_dsub+0x42e>
    5b20:	e6c7      	b.n	58b2 <__aeabi_dsub+0x1be>
    5b22:	e613      	b.n	574c <__aeabi_dsub+0x58>
    5b24:	2200      	movs	r2, #0
    5b26:	e77f      	b.n	5a28 <__aeabi_dsub+0x334>
    5b28:	2000      	movs	r0, #0
    5b2a:	e78f      	b.n	5a4c <__aeabi_dsub+0x358>
    5b2c:	2c00      	cmp	r4, #0
    5b2e:	d000      	beq.n	5b32 <__aeabi_dsub+0x43e>
    5b30:	e0c8      	b.n	5cc4 <__aeabi_dsub+0x5d0>
    5b32:	003b      	movs	r3, r7
    5b34:	432b      	orrs	r3, r5
    5b36:	d100      	bne.n	5b3a <__aeabi_dsub+0x446>
    5b38:	e10f      	b.n	5d5a <__aeabi_dsub+0x666>
    5b3a:	0003      	movs	r3, r0
    5b3c:	430b      	orrs	r3, r1
    5b3e:	d100      	bne.n	5b42 <__aeabi_dsub+0x44e>
    5b40:	e604      	b.n	574c <__aeabi_dsub+0x58>
    5b42:	1869      	adds	r1, r5, r1
    5b44:	42a9      	cmp	r1, r5
    5b46:	419b      	sbcs	r3, r3
    5b48:	183f      	adds	r7, r7, r0
    5b4a:	425b      	negs	r3, r3
    5b4c:	19df      	adds	r7, r3, r7
    5b4e:	023b      	lsls	r3, r7, #8
    5b50:	d400      	bmi.n	5b54 <__aeabi_dsub+0x460>
    5b52:	e11a      	b.n	5d8a <__aeabi_dsub+0x696>
    5b54:	4b90      	ldr	r3, [pc, #576]	; (5d98 <__aeabi_dsub+0x6a4>)
    5b56:	000d      	movs	r5, r1
    5b58:	401f      	ands	r7, r3
    5b5a:	4664      	mov	r4, ip
    5b5c:	e5f6      	b.n	574c <__aeabi_dsub+0x58>
    5b5e:	469a      	mov	sl, r3
    5b60:	e689      	b.n	5876 <__aeabi_dsub+0x182>
    5b62:	003a      	movs	r2, r7
    5b64:	432a      	orrs	r2, r5
    5b66:	2c00      	cmp	r4, #0
    5b68:	d15c      	bne.n	5c24 <__aeabi_dsub+0x530>
    5b6a:	2a00      	cmp	r2, #0
    5b6c:	d175      	bne.n	5c5a <__aeabi_dsub+0x566>
    5b6e:	0002      	movs	r2, r0
    5b70:	430a      	orrs	r2, r1
    5b72:	d100      	bne.n	5b76 <__aeabi_dsub+0x482>
    5b74:	e0ca      	b.n	5d0c <__aeabi_dsub+0x618>
    5b76:	0007      	movs	r7, r0
    5b78:	000d      	movs	r5, r1
    5b7a:	469a      	mov	sl, r3
    5b7c:	e5e6      	b.n	574c <__aeabi_dsub+0x58>
    5b7e:	4664      	mov	r4, ip
    5b80:	2200      	movs	r2, #0
    5b82:	2500      	movs	r5, #0
    5b84:	e681      	b.n	588a <__aeabi_dsub+0x196>
    5b86:	4662      	mov	r2, ip
    5b88:	0006      	movs	r6, r0
    5b8a:	3a20      	subs	r2, #32
    5b8c:	40d6      	lsrs	r6, r2
    5b8e:	4662      	mov	r2, ip
    5b90:	46b0      	mov	r8, r6
    5b92:	2a20      	cmp	r2, #32
    5b94:	d100      	bne.n	5b98 <__aeabi_dsub+0x4a4>
    5b96:	e0b7      	b.n	5d08 <__aeabi_dsub+0x614>
    5b98:	2240      	movs	r2, #64	; 0x40
    5b9a:	4666      	mov	r6, ip
    5b9c:	1b92      	subs	r2, r2, r6
    5b9e:	4090      	lsls	r0, r2
    5ba0:	4301      	orrs	r1, r0
    5ba2:	4642      	mov	r2, r8
    5ba4:	1e48      	subs	r0, r1, #1
    5ba6:	4181      	sbcs	r1, r0
    5ba8:	4311      	orrs	r1, r2
    5baa:	2200      	movs	r2, #0
    5bac:	e68a      	b.n	58c4 <__aeabi_dsub+0x1d0>
    5bae:	4c79      	ldr	r4, [pc, #484]	; (5d94 <__aeabi_dsub+0x6a0>)
    5bb0:	42a2      	cmp	r2, r4
    5bb2:	d000      	beq.n	5bb6 <__aeabi_dsub+0x4c2>
    5bb4:	e761      	b.n	5a7a <__aeabi_dsub+0x386>
    5bb6:	0007      	movs	r7, r0
    5bb8:	000d      	movs	r5, r1
    5bba:	0014      	movs	r4, r2
    5bbc:	469a      	mov	sl, r3
    5bbe:	e5c5      	b.n	574c <__aeabi_dsub+0x58>
    5bc0:	2c00      	cmp	r4, #0
    5bc2:	d141      	bne.n	5c48 <__aeabi_dsub+0x554>
    5bc4:	003c      	movs	r4, r7
    5bc6:	432c      	orrs	r4, r5
    5bc8:	d078      	beq.n	5cbc <__aeabi_dsub+0x5c8>
    5bca:	43f4      	mvns	r4, r6
    5bcc:	46a1      	mov	r9, r4
    5bce:	2c00      	cmp	r4, #0
    5bd0:	d020      	beq.n	5c14 <__aeabi_dsub+0x520>
    5bd2:	4c70      	ldr	r4, [pc, #448]	; (5d94 <__aeabi_dsub+0x6a0>)
    5bd4:	42a2      	cmp	r2, r4
    5bd6:	d071      	beq.n	5cbc <__aeabi_dsub+0x5c8>
    5bd8:	464c      	mov	r4, r9
    5bda:	2c38      	cmp	r4, #56	; 0x38
    5bdc:	dd00      	ble.n	5be0 <__aeabi_dsub+0x4ec>
    5bde:	e0b2      	b.n	5d46 <__aeabi_dsub+0x652>
    5be0:	2c1f      	cmp	r4, #31
    5be2:	dd00      	ble.n	5be6 <__aeabi_dsub+0x4f2>
    5be4:	e0bc      	b.n	5d60 <__aeabi_dsub+0x66c>
    5be6:	2620      	movs	r6, #32
    5be8:	1b34      	subs	r4, r6, r4
    5bea:	46a2      	mov	sl, r4
    5bec:	003c      	movs	r4, r7
    5bee:	4656      	mov	r6, sl
    5bf0:	40b4      	lsls	r4, r6
    5bf2:	464e      	mov	r6, r9
    5bf4:	46a0      	mov	r8, r4
    5bf6:	002c      	movs	r4, r5
    5bf8:	40f4      	lsrs	r4, r6
    5bfa:	46a4      	mov	ip, r4
    5bfc:	4644      	mov	r4, r8
    5bfe:	4666      	mov	r6, ip
    5c00:	4334      	orrs	r4, r6
    5c02:	46a4      	mov	ip, r4
    5c04:	4654      	mov	r4, sl
    5c06:	40a5      	lsls	r5, r4
    5c08:	4664      	mov	r4, ip
    5c0a:	1e6e      	subs	r6, r5, #1
    5c0c:	41b5      	sbcs	r5, r6
    5c0e:	4325      	orrs	r5, r4
    5c10:	464c      	mov	r4, r9
    5c12:	40e7      	lsrs	r7, r4
    5c14:	186d      	adds	r5, r5, r1
    5c16:	428d      	cmp	r5, r1
    5c18:	4189      	sbcs	r1, r1
    5c1a:	183f      	adds	r7, r7, r0
    5c1c:	4249      	negs	r1, r1
    5c1e:	19cf      	adds	r7, r1, r7
    5c20:	0014      	movs	r4, r2
    5c22:	e656      	b.n	58d2 <__aeabi_dsub+0x1de>
    5c24:	2a00      	cmp	r2, #0
    5c26:	d12f      	bne.n	5c88 <__aeabi_dsub+0x594>
    5c28:	0002      	movs	r2, r0
    5c2a:	430a      	orrs	r2, r1
    5c2c:	d100      	bne.n	5c30 <__aeabi_dsub+0x53c>
    5c2e:	e084      	b.n	5d3a <__aeabi_dsub+0x646>
    5c30:	0007      	movs	r7, r0
    5c32:	000d      	movs	r5, r1
    5c34:	469a      	mov	sl, r3
    5c36:	4c57      	ldr	r4, [pc, #348]	; (5d94 <__aeabi_dsub+0x6a0>)
    5c38:	e588      	b.n	574c <__aeabi_dsub+0x58>
    5c3a:	433d      	orrs	r5, r7
    5c3c:	1e6f      	subs	r7, r5, #1
    5c3e:	41bd      	sbcs	r5, r7
    5c40:	b2ec      	uxtb	r4, r5
    5c42:	2700      	movs	r7, #0
    5c44:	1b0d      	subs	r5, r1, r4
    5c46:	e760      	b.n	5b0a <__aeabi_dsub+0x416>
    5c48:	4c52      	ldr	r4, [pc, #328]	; (5d94 <__aeabi_dsub+0x6a0>)
    5c4a:	42a2      	cmp	r2, r4
    5c4c:	d036      	beq.n	5cbc <__aeabi_dsub+0x5c8>
    5c4e:	4274      	negs	r4, r6
    5c50:	2680      	movs	r6, #128	; 0x80
    5c52:	0436      	lsls	r6, r6, #16
    5c54:	46a1      	mov	r9, r4
    5c56:	4337      	orrs	r7, r6
    5c58:	e7be      	b.n	5bd8 <__aeabi_dsub+0x4e4>
    5c5a:	0002      	movs	r2, r0
    5c5c:	430a      	orrs	r2, r1
    5c5e:	d100      	bne.n	5c62 <__aeabi_dsub+0x56e>
    5c60:	e574      	b.n	574c <__aeabi_dsub+0x58>
    5c62:	1a6a      	subs	r2, r5, r1
    5c64:	4690      	mov	r8, r2
    5c66:	4545      	cmp	r5, r8
    5c68:	41b6      	sbcs	r6, r6
    5c6a:	1a3a      	subs	r2, r7, r0
    5c6c:	4276      	negs	r6, r6
    5c6e:	1b92      	subs	r2, r2, r6
    5c70:	4694      	mov	ip, r2
    5c72:	0212      	lsls	r2, r2, #8
    5c74:	d400      	bmi.n	5c78 <__aeabi_dsub+0x584>
    5c76:	e5f7      	b.n	5868 <__aeabi_dsub+0x174>
    5c78:	1b4d      	subs	r5, r1, r5
    5c7a:	42a9      	cmp	r1, r5
    5c7c:	4189      	sbcs	r1, r1
    5c7e:	1bc7      	subs	r7, r0, r7
    5c80:	4249      	negs	r1, r1
    5c82:	1a7f      	subs	r7, r7, r1
    5c84:	469a      	mov	sl, r3
    5c86:	e561      	b.n	574c <__aeabi_dsub+0x58>
    5c88:	0002      	movs	r2, r0
    5c8a:	430a      	orrs	r2, r1
    5c8c:	d03a      	beq.n	5d04 <__aeabi_dsub+0x610>
    5c8e:	08ed      	lsrs	r5, r5, #3
    5c90:	077c      	lsls	r4, r7, #29
    5c92:	432c      	orrs	r4, r5
    5c94:	2580      	movs	r5, #128	; 0x80
    5c96:	08fa      	lsrs	r2, r7, #3
    5c98:	032d      	lsls	r5, r5, #12
    5c9a:	422a      	tst	r2, r5
    5c9c:	d008      	beq.n	5cb0 <__aeabi_dsub+0x5bc>
    5c9e:	08c7      	lsrs	r7, r0, #3
    5ca0:	422f      	tst	r7, r5
    5ca2:	d105      	bne.n	5cb0 <__aeabi_dsub+0x5bc>
    5ca4:	0745      	lsls	r5, r0, #29
    5ca6:	002c      	movs	r4, r5
    5ca8:	003a      	movs	r2, r7
    5caa:	469a      	mov	sl, r3
    5cac:	08c9      	lsrs	r1, r1, #3
    5cae:	430c      	orrs	r4, r1
    5cb0:	0f67      	lsrs	r7, r4, #29
    5cb2:	00d2      	lsls	r2, r2, #3
    5cb4:	00e5      	lsls	r5, r4, #3
    5cb6:	4317      	orrs	r7, r2
    5cb8:	4c36      	ldr	r4, [pc, #216]	; (5d94 <__aeabi_dsub+0x6a0>)
    5cba:	e547      	b.n	574c <__aeabi_dsub+0x58>
    5cbc:	0007      	movs	r7, r0
    5cbe:	000d      	movs	r5, r1
    5cc0:	0014      	movs	r4, r2
    5cc2:	e543      	b.n	574c <__aeabi_dsub+0x58>
    5cc4:	003a      	movs	r2, r7
    5cc6:	432a      	orrs	r2, r5
    5cc8:	d043      	beq.n	5d52 <__aeabi_dsub+0x65e>
    5cca:	0002      	movs	r2, r0
    5ccc:	430a      	orrs	r2, r1
    5cce:	d019      	beq.n	5d04 <__aeabi_dsub+0x610>
    5cd0:	08ed      	lsrs	r5, r5, #3
    5cd2:	077c      	lsls	r4, r7, #29
    5cd4:	432c      	orrs	r4, r5
    5cd6:	2580      	movs	r5, #128	; 0x80
    5cd8:	08fa      	lsrs	r2, r7, #3
    5cda:	032d      	lsls	r5, r5, #12
    5cdc:	422a      	tst	r2, r5
    5cde:	d007      	beq.n	5cf0 <__aeabi_dsub+0x5fc>
    5ce0:	08c6      	lsrs	r6, r0, #3
    5ce2:	422e      	tst	r6, r5
    5ce4:	d104      	bne.n	5cf0 <__aeabi_dsub+0x5fc>
    5ce6:	0747      	lsls	r7, r0, #29
    5ce8:	003c      	movs	r4, r7
    5cea:	0032      	movs	r2, r6
    5cec:	08c9      	lsrs	r1, r1, #3
    5cee:	430c      	orrs	r4, r1
    5cf0:	00d7      	lsls	r7, r2, #3
    5cf2:	0f62      	lsrs	r2, r4, #29
    5cf4:	00e5      	lsls	r5, r4, #3
    5cf6:	4317      	orrs	r7, r2
    5cf8:	469a      	mov	sl, r3
    5cfa:	4c26      	ldr	r4, [pc, #152]	; (5d94 <__aeabi_dsub+0x6a0>)
    5cfc:	e526      	b.n	574c <__aeabi_dsub+0x58>
    5cfe:	2200      	movs	r2, #0
    5d00:	2500      	movs	r5, #0
    5d02:	e544      	b.n	578e <__aeabi_dsub+0x9a>
    5d04:	4c23      	ldr	r4, [pc, #140]	; (5d94 <__aeabi_dsub+0x6a0>)
    5d06:	e521      	b.n	574c <__aeabi_dsub+0x58>
    5d08:	2000      	movs	r0, #0
    5d0a:	e749      	b.n	5ba0 <__aeabi_dsub+0x4ac>
    5d0c:	2300      	movs	r3, #0
    5d0e:	2500      	movs	r5, #0
    5d10:	e5bb      	b.n	588a <__aeabi_dsub+0x196>
    5d12:	464c      	mov	r4, r9
    5d14:	003e      	movs	r6, r7
    5d16:	3c20      	subs	r4, #32
    5d18:	40e6      	lsrs	r6, r4
    5d1a:	464c      	mov	r4, r9
    5d1c:	46b4      	mov	ip, r6
    5d1e:	2c20      	cmp	r4, #32
    5d20:	d031      	beq.n	5d86 <__aeabi_dsub+0x692>
    5d22:	2440      	movs	r4, #64	; 0x40
    5d24:	464e      	mov	r6, r9
    5d26:	1ba6      	subs	r6, r4, r6
    5d28:	40b7      	lsls	r7, r6
    5d2a:	433d      	orrs	r5, r7
    5d2c:	1e6c      	subs	r4, r5, #1
    5d2e:	41a5      	sbcs	r5, r4
    5d30:	4664      	mov	r4, ip
    5d32:	432c      	orrs	r4, r5
    5d34:	2700      	movs	r7, #0
    5d36:	1b0d      	subs	r5, r1, r4
    5d38:	e6e7      	b.n	5b0a <__aeabi_dsub+0x416>
    5d3a:	2280      	movs	r2, #128	; 0x80
    5d3c:	2300      	movs	r3, #0
    5d3e:	0312      	lsls	r2, r2, #12
    5d40:	4c14      	ldr	r4, [pc, #80]	; (5d94 <__aeabi_dsub+0x6a0>)
    5d42:	2500      	movs	r5, #0
    5d44:	e5a1      	b.n	588a <__aeabi_dsub+0x196>
    5d46:	433d      	orrs	r5, r7
    5d48:	1e6f      	subs	r7, r5, #1
    5d4a:	41bd      	sbcs	r5, r7
    5d4c:	2700      	movs	r7, #0
    5d4e:	b2ed      	uxtb	r5, r5
    5d50:	e760      	b.n	5c14 <__aeabi_dsub+0x520>
    5d52:	0007      	movs	r7, r0
    5d54:	000d      	movs	r5, r1
    5d56:	4c0f      	ldr	r4, [pc, #60]	; (5d94 <__aeabi_dsub+0x6a0>)
    5d58:	e4f8      	b.n	574c <__aeabi_dsub+0x58>
    5d5a:	0007      	movs	r7, r0
    5d5c:	000d      	movs	r5, r1
    5d5e:	e4f5      	b.n	574c <__aeabi_dsub+0x58>
    5d60:	464e      	mov	r6, r9
    5d62:	003c      	movs	r4, r7
    5d64:	3e20      	subs	r6, #32
    5d66:	40f4      	lsrs	r4, r6
    5d68:	46a0      	mov	r8, r4
    5d6a:	464c      	mov	r4, r9
    5d6c:	2c20      	cmp	r4, #32
    5d6e:	d00e      	beq.n	5d8e <__aeabi_dsub+0x69a>
    5d70:	2440      	movs	r4, #64	; 0x40
    5d72:	464e      	mov	r6, r9
    5d74:	1ba4      	subs	r4, r4, r6
    5d76:	40a7      	lsls	r7, r4
    5d78:	433d      	orrs	r5, r7
    5d7a:	1e6f      	subs	r7, r5, #1
    5d7c:	41bd      	sbcs	r5, r7
    5d7e:	4644      	mov	r4, r8
    5d80:	2700      	movs	r7, #0
    5d82:	4325      	orrs	r5, r4
    5d84:	e746      	b.n	5c14 <__aeabi_dsub+0x520>
    5d86:	2700      	movs	r7, #0
    5d88:	e7cf      	b.n	5d2a <__aeabi_dsub+0x636>
    5d8a:	000d      	movs	r5, r1
    5d8c:	e573      	b.n	5876 <__aeabi_dsub+0x182>
    5d8e:	2700      	movs	r7, #0
    5d90:	e7f2      	b.n	5d78 <__aeabi_dsub+0x684>
    5d92:	46c0      	nop			; (mov r8, r8)
    5d94:	000007ff 	.word	0x000007ff
    5d98:	ff7fffff 	.word	0xff7fffff

00005d9c <__aeabi_dcmpun>:
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	4e0e      	ldr	r6, [pc, #56]	; (5dd8 <__aeabi_dcmpun+0x3c>)
    5da0:	030c      	lsls	r4, r1, #12
    5da2:	031d      	lsls	r5, r3, #12
    5da4:	0049      	lsls	r1, r1, #1
    5da6:	005b      	lsls	r3, r3, #1
    5da8:	0b24      	lsrs	r4, r4, #12
    5daa:	0d49      	lsrs	r1, r1, #21
    5dac:	0b2d      	lsrs	r5, r5, #12
    5dae:	0d5b      	lsrs	r3, r3, #21
    5db0:	42b1      	cmp	r1, r6
    5db2:	d004      	beq.n	5dbe <__aeabi_dcmpun+0x22>
    5db4:	4908      	ldr	r1, [pc, #32]	; (5dd8 <__aeabi_dcmpun+0x3c>)
    5db6:	2000      	movs	r0, #0
    5db8:	428b      	cmp	r3, r1
    5dba:	d008      	beq.n	5dce <__aeabi_dcmpun+0x32>
    5dbc:	bd70      	pop	{r4, r5, r6, pc}
    5dbe:	4304      	orrs	r4, r0
    5dc0:	2001      	movs	r0, #1
    5dc2:	2c00      	cmp	r4, #0
    5dc4:	d1fa      	bne.n	5dbc <__aeabi_dcmpun+0x20>
    5dc6:	4904      	ldr	r1, [pc, #16]	; (5dd8 <__aeabi_dcmpun+0x3c>)
    5dc8:	2000      	movs	r0, #0
    5dca:	428b      	cmp	r3, r1
    5dcc:	d1f6      	bne.n	5dbc <__aeabi_dcmpun+0x20>
    5dce:	4315      	orrs	r5, r2
    5dd0:	0028      	movs	r0, r5
    5dd2:	1e45      	subs	r5, r0, #1
    5dd4:	41a8      	sbcs	r0, r5
    5dd6:	e7f1      	b.n	5dbc <__aeabi_dcmpun+0x20>
    5dd8:	000007ff 	.word	0x000007ff

00005ddc <__aeabi_d2iz>:
    5ddc:	030b      	lsls	r3, r1, #12
    5dde:	b530      	push	{r4, r5, lr}
    5de0:	4d13      	ldr	r5, [pc, #76]	; (5e30 <__aeabi_d2iz+0x54>)
    5de2:	0b1a      	lsrs	r2, r3, #12
    5de4:	004b      	lsls	r3, r1, #1
    5de6:	0d5b      	lsrs	r3, r3, #21
    5de8:	0fc9      	lsrs	r1, r1, #31
    5dea:	2400      	movs	r4, #0
    5dec:	42ab      	cmp	r3, r5
    5dee:	dd11      	ble.n	5e14 <__aeabi_d2iz+0x38>
    5df0:	4c10      	ldr	r4, [pc, #64]	; (5e34 <__aeabi_d2iz+0x58>)
    5df2:	42a3      	cmp	r3, r4
    5df4:	dc10      	bgt.n	5e18 <__aeabi_d2iz+0x3c>
    5df6:	2480      	movs	r4, #128	; 0x80
    5df8:	0364      	lsls	r4, r4, #13
    5dfa:	4322      	orrs	r2, r4
    5dfc:	4c0e      	ldr	r4, [pc, #56]	; (5e38 <__aeabi_d2iz+0x5c>)
    5dfe:	1ae4      	subs	r4, r4, r3
    5e00:	2c1f      	cmp	r4, #31
    5e02:	dd0c      	ble.n	5e1e <__aeabi_d2iz+0x42>
    5e04:	480d      	ldr	r0, [pc, #52]	; (5e3c <__aeabi_d2iz+0x60>)
    5e06:	1ac3      	subs	r3, r0, r3
    5e08:	40da      	lsrs	r2, r3
    5e0a:	0013      	movs	r3, r2
    5e0c:	425c      	negs	r4, r3
    5e0e:	2900      	cmp	r1, #0
    5e10:	d100      	bne.n	5e14 <__aeabi_d2iz+0x38>
    5e12:	001c      	movs	r4, r3
    5e14:	0020      	movs	r0, r4
    5e16:	bd30      	pop	{r4, r5, pc}
    5e18:	4b09      	ldr	r3, [pc, #36]	; (5e40 <__aeabi_d2iz+0x64>)
    5e1a:	18cc      	adds	r4, r1, r3
    5e1c:	e7fa      	b.n	5e14 <__aeabi_d2iz+0x38>
    5e1e:	40e0      	lsrs	r0, r4
    5e20:	4c08      	ldr	r4, [pc, #32]	; (5e44 <__aeabi_d2iz+0x68>)
    5e22:	46a4      	mov	ip, r4
    5e24:	4463      	add	r3, ip
    5e26:	409a      	lsls	r2, r3
    5e28:	0013      	movs	r3, r2
    5e2a:	4303      	orrs	r3, r0
    5e2c:	e7ee      	b.n	5e0c <__aeabi_d2iz+0x30>
    5e2e:	46c0      	nop			; (mov r8, r8)
    5e30:	000003fe 	.word	0x000003fe
    5e34:	0000041d 	.word	0x0000041d
    5e38:	00000433 	.word	0x00000433
    5e3c:	00000413 	.word	0x00000413
    5e40:	7fffffff 	.word	0x7fffffff
    5e44:	fffffbed 	.word	0xfffffbed

00005e48 <__aeabi_i2d>:
    5e48:	b570      	push	{r4, r5, r6, lr}
    5e4a:	2800      	cmp	r0, #0
    5e4c:	d030      	beq.n	5eb0 <__aeabi_i2d+0x68>
    5e4e:	17c3      	asrs	r3, r0, #31
    5e50:	18c4      	adds	r4, r0, r3
    5e52:	405c      	eors	r4, r3
    5e54:	0fc5      	lsrs	r5, r0, #31
    5e56:	0020      	movs	r0, r4
    5e58:	f000 f9dc 	bl	6214 <__clzsi2>
    5e5c:	4b17      	ldr	r3, [pc, #92]	; (5ebc <__aeabi_i2d+0x74>)
    5e5e:	4a18      	ldr	r2, [pc, #96]	; (5ec0 <__aeabi_i2d+0x78>)
    5e60:	1a1b      	subs	r3, r3, r0
    5e62:	1ad2      	subs	r2, r2, r3
    5e64:	2a1f      	cmp	r2, #31
    5e66:	dd18      	ble.n	5e9a <__aeabi_i2d+0x52>
    5e68:	4a16      	ldr	r2, [pc, #88]	; (5ec4 <__aeabi_i2d+0x7c>)
    5e6a:	1ad2      	subs	r2, r2, r3
    5e6c:	4094      	lsls	r4, r2
    5e6e:	2200      	movs	r2, #0
    5e70:	0324      	lsls	r4, r4, #12
    5e72:	055b      	lsls	r3, r3, #21
    5e74:	0b24      	lsrs	r4, r4, #12
    5e76:	0d5b      	lsrs	r3, r3, #21
    5e78:	2100      	movs	r1, #0
    5e7a:	0010      	movs	r0, r2
    5e7c:	0324      	lsls	r4, r4, #12
    5e7e:	0d0a      	lsrs	r2, r1, #20
    5e80:	0512      	lsls	r2, r2, #20
    5e82:	0b24      	lsrs	r4, r4, #12
    5e84:	4314      	orrs	r4, r2
    5e86:	4a10      	ldr	r2, [pc, #64]	; (5ec8 <__aeabi_i2d+0x80>)
    5e88:	051b      	lsls	r3, r3, #20
    5e8a:	4014      	ands	r4, r2
    5e8c:	431c      	orrs	r4, r3
    5e8e:	0064      	lsls	r4, r4, #1
    5e90:	07ed      	lsls	r5, r5, #31
    5e92:	0864      	lsrs	r4, r4, #1
    5e94:	432c      	orrs	r4, r5
    5e96:	0021      	movs	r1, r4
    5e98:	bd70      	pop	{r4, r5, r6, pc}
    5e9a:	0021      	movs	r1, r4
    5e9c:	4091      	lsls	r1, r2
    5e9e:	000a      	movs	r2, r1
    5ea0:	210b      	movs	r1, #11
    5ea2:	1a08      	subs	r0, r1, r0
    5ea4:	40c4      	lsrs	r4, r0
    5ea6:	055b      	lsls	r3, r3, #21
    5ea8:	0324      	lsls	r4, r4, #12
    5eaa:	0b24      	lsrs	r4, r4, #12
    5eac:	0d5b      	lsrs	r3, r3, #21
    5eae:	e7e3      	b.n	5e78 <__aeabi_i2d+0x30>
    5eb0:	2500      	movs	r5, #0
    5eb2:	2300      	movs	r3, #0
    5eb4:	2400      	movs	r4, #0
    5eb6:	2200      	movs	r2, #0
    5eb8:	e7de      	b.n	5e78 <__aeabi_i2d+0x30>
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	0000041e 	.word	0x0000041e
    5ec0:	00000433 	.word	0x00000433
    5ec4:	00000413 	.word	0x00000413
    5ec8:	800fffff 	.word	0x800fffff

00005ecc <__aeabi_ui2d>:
    5ecc:	b570      	push	{r4, r5, r6, lr}
    5ece:	1e05      	subs	r5, r0, #0
    5ed0:	d028      	beq.n	5f24 <__aeabi_ui2d+0x58>
    5ed2:	f000 f99f 	bl	6214 <__clzsi2>
    5ed6:	4b15      	ldr	r3, [pc, #84]	; (5f2c <__aeabi_ui2d+0x60>)
    5ed8:	4a15      	ldr	r2, [pc, #84]	; (5f30 <__aeabi_ui2d+0x64>)
    5eda:	1a1b      	subs	r3, r3, r0
    5edc:	1ad2      	subs	r2, r2, r3
    5ede:	2a1f      	cmp	r2, #31
    5ee0:	dd16      	ble.n	5f10 <__aeabi_ui2d+0x44>
    5ee2:	002c      	movs	r4, r5
    5ee4:	4a13      	ldr	r2, [pc, #76]	; (5f34 <__aeabi_ui2d+0x68>)
    5ee6:	2500      	movs	r5, #0
    5ee8:	1ad2      	subs	r2, r2, r3
    5eea:	4094      	lsls	r4, r2
    5eec:	055a      	lsls	r2, r3, #21
    5eee:	0324      	lsls	r4, r4, #12
    5ef0:	0b24      	lsrs	r4, r4, #12
    5ef2:	0d52      	lsrs	r2, r2, #21
    5ef4:	2100      	movs	r1, #0
    5ef6:	0324      	lsls	r4, r4, #12
    5ef8:	0d0b      	lsrs	r3, r1, #20
    5efa:	0b24      	lsrs	r4, r4, #12
    5efc:	051b      	lsls	r3, r3, #20
    5efe:	4323      	orrs	r3, r4
    5f00:	4c0d      	ldr	r4, [pc, #52]	; (5f38 <__aeabi_ui2d+0x6c>)
    5f02:	0512      	lsls	r2, r2, #20
    5f04:	4023      	ands	r3, r4
    5f06:	4313      	orrs	r3, r2
    5f08:	005b      	lsls	r3, r3, #1
    5f0a:	0028      	movs	r0, r5
    5f0c:	0859      	lsrs	r1, r3, #1
    5f0e:	bd70      	pop	{r4, r5, r6, pc}
    5f10:	210b      	movs	r1, #11
    5f12:	002c      	movs	r4, r5
    5f14:	1a08      	subs	r0, r1, r0
    5f16:	40c4      	lsrs	r4, r0
    5f18:	4095      	lsls	r5, r2
    5f1a:	0324      	lsls	r4, r4, #12
    5f1c:	055a      	lsls	r2, r3, #21
    5f1e:	0b24      	lsrs	r4, r4, #12
    5f20:	0d52      	lsrs	r2, r2, #21
    5f22:	e7e7      	b.n	5ef4 <__aeabi_ui2d+0x28>
    5f24:	2200      	movs	r2, #0
    5f26:	2400      	movs	r4, #0
    5f28:	e7e4      	b.n	5ef4 <__aeabi_ui2d+0x28>
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	0000041e 	.word	0x0000041e
    5f30:	00000433 	.word	0x00000433
    5f34:	00000413 	.word	0x00000413
    5f38:	800fffff 	.word	0x800fffff

00005f3c <__aeabi_f2d>:
    5f3c:	0042      	lsls	r2, r0, #1
    5f3e:	0e12      	lsrs	r2, r2, #24
    5f40:	1c51      	adds	r1, r2, #1
    5f42:	0243      	lsls	r3, r0, #9
    5f44:	b2c9      	uxtb	r1, r1
    5f46:	b570      	push	{r4, r5, r6, lr}
    5f48:	0a5d      	lsrs	r5, r3, #9
    5f4a:	0fc4      	lsrs	r4, r0, #31
    5f4c:	2901      	cmp	r1, #1
    5f4e:	dd15      	ble.n	5f7c <__aeabi_f2d+0x40>
    5f50:	21e0      	movs	r1, #224	; 0xe0
    5f52:	0089      	lsls	r1, r1, #2
    5f54:	468c      	mov	ip, r1
    5f56:	076d      	lsls	r5, r5, #29
    5f58:	0b1b      	lsrs	r3, r3, #12
    5f5a:	4462      	add	r2, ip
    5f5c:	2100      	movs	r1, #0
    5f5e:	0028      	movs	r0, r5
    5f60:	0d0d      	lsrs	r5, r1, #20
    5f62:	052d      	lsls	r5, r5, #20
    5f64:	432b      	orrs	r3, r5
    5f66:	4d1c      	ldr	r5, [pc, #112]	; (5fd8 <__aeabi_f2d+0x9c>)
    5f68:	0552      	lsls	r2, r2, #21
    5f6a:	402b      	ands	r3, r5
    5f6c:	0852      	lsrs	r2, r2, #1
    5f6e:	4313      	orrs	r3, r2
    5f70:	005b      	lsls	r3, r3, #1
    5f72:	07e4      	lsls	r4, r4, #31
    5f74:	085b      	lsrs	r3, r3, #1
    5f76:	4323      	orrs	r3, r4
    5f78:	0019      	movs	r1, r3
    5f7a:	bd70      	pop	{r4, r5, r6, pc}
    5f7c:	2a00      	cmp	r2, #0
    5f7e:	d115      	bne.n	5fac <__aeabi_f2d+0x70>
    5f80:	2d00      	cmp	r5, #0
    5f82:	d01f      	beq.n	5fc4 <__aeabi_f2d+0x88>
    5f84:	0028      	movs	r0, r5
    5f86:	f000 f945 	bl	6214 <__clzsi2>
    5f8a:	280a      	cmp	r0, #10
    5f8c:	dc1d      	bgt.n	5fca <__aeabi_f2d+0x8e>
    5f8e:	230b      	movs	r3, #11
    5f90:	002a      	movs	r2, r5
    5f92:	1a1b      	subs	r3, r3, r0
    5f94:	40da      	lsrs	r2, r3
    5f96:	0013      	movs	r3, r2
    5f98:	0002      	movs	r2, r0
    5f9a:	3215      	adds	r2, #21
    5f9c:	4095      	lsls	r5, r2
    5f9e:	4a0f      	ldr	r2, [pc, #60]	; (5fdc <__aeabi_f2d+0xa0>)
    5fa0:	031b      	lsls	r3, r3, #12
    5fa2:	1a12      	subs	r2, r2, r0
    5fa4:	0552      	lsls	r2, r2, #21
    5fa6:	0b1b      	lsrs	r3, r3, #12
    5fa8:	0d52      	lsrs	r2, r2, #21
    5faa:	e7d7      	b.n	5f5c <__aeabi_f2d+0x20>
    5fac:	2d00      	cmp	r5, #0
    5fae:	d006      	beq.n	5fbe <__aeabi_f2d+0x82>
    5fb0:	2280      	movs	r2, #128	; 0x80
    5fb2:	0b1b      	lsrs	r3, r3, #12
    5fb4:	0312      	lsls	r2, r2, #12
    5fb6:	4313      	orrs	r3, r2
    5fb8:	076d      	lsls	r5, r5, #29
    5fba:	4a09      	ldr	r2, [pc, #36]	; (5fe0 <__aeabi_f2d+0xa4>)
    5fbc:	e7ce      	b.n	5f5c <__aeabi_f2d+0x20>
    5fbe:	4a08      	ldr	r2, [pc, #32]	; (5fe0 <__aeabi_f2d+0xa4>)
    5fc0:	2300      	movs	r3, #0
    5fc2:	e7cb      	b.n	5f5c <__aeabi_f2d+0x20>
    5fc4:	2200      	movs	r2, #0
    5fc6:	2300      	movs	r3, #0
    5fc8:	e7c8      	b.n	5f5c <__aeabi_f2d+0x20>
    5fca:	0003      	movs	r3, r0
    5fcc:	3b0b      	subs	r3, #11
    5fce:	409d      	lsls	r5, r3
    5fd0:	002b      	movs	r3, r5
    5fd2:	2500      	movs	r5, #0
    5fd4:	e7e3      	b.n	5f9e <__aeabi_f2d+0x62>
    5fd6:	46c0      	nop			; (mov r8, r8)
    5fd8:	800fffff 	.word	0x800fffff
    5fdc:	00000389 	.word	0x00000389
    5fe0:	000007ff 	.word	0x000007ff

00005fe4 <__aeabi_d2f>:
    5fe4:	004b      	lsls	r3, r1, #1
    5fe6:	b570      	push	{r4, r5, r6, lr}
    5fe8:	0d5e      	lsrs	r6, r3, #21
    5fea:	030c      	lsls	r4, r1, #12
    5fec:	1c75      	adds	r5, r6, #1
    5fee:	0a64      	lsrs	r4, r4, #9
    5ff0:	0f42      	lsrs	r2, r0, #29
    5ff2:	056d      	lsls	r5, r5, #21
    5ff4:	4322      	orrs	r2, r4
    5ff6:	0fc9      	lsrs	r1, r1, #31
    5ff8:	00c4      	lsls	r4, r0, #3
    5ffa:	0d6d      	lsrs	r5, r5, #21
    5ffc:	2d01      	cmp	r5, #1
    5ffe:	dd2a      	ble.n	6056 <__aeabi_d2f+0x72>
    6000:	4b3b      	ldr	r3, [pc, #236]	; (60f0 <__aeabi_d2f+0x10c>)
    6002:	18f3      	adds	r3, r6, r3
    6004:	2bfe      	cmp	r3, #254	; 0xfe
    6006:	dc1a      	bgt.n	603e <__aeabi_d2f+0x5a>
    6008:	2b00      	cmp	r3, #0
    600a:	dd42      	ble.n	6092 <__aeabi_d2f+0xae>
    600c:	0180      	lsls	r0, r0, #6
    600e:	1e45      	subs	r5, r0, #1
    6010:	41a8      	sbcs	r0, r5
    6012:	00d2      	lsls	r2, r2, #3
    6014:	4310      	orrs	r0, r2
    6016:	0f62      	lsrs	r2, r4, #29
    6018:	4302      	orrs	r2, r0
    601a:	0750      	lsls	r0, r2, #29
    601c:	d004      	beq.n	6028 <__aeabi_d2f+0x44>
    601e:	200f      	movs	r0, #15
    6020:	4010      	ands	r0, r2
    6022:	2804      	cmp	r0, #4
    6024:	d000      	beq.n	6028 <__aeabi_d2f+0x44>
    6026:	3204      	adds	r2, #4
    6028:	2080      	movs	r0, #128	; 0x80
    602a:	04c0      	lsls	r0, r0, #19
    602c:	4010      	ands	r0, r2
    602e:	d021      	beq.n	6074 <__aeabi_d2f+0x90>
    6030:	3301      	adds	r3, #1
    6032:	2bff      	cmp	r3, #255	; 0xff
    6034:	d003      	beq.n	603e <__aeabi_d2f+0x5a>
    6036:	0192      	lsls	r2, r2, #6
    6038:	0a52      	lsrs	r2, r2, #9
    603a:	b2db      	uxtb	r3, r3
    603c:	e001      	b.n	6042 <__aeabi_d2f+0x5e>
    603e:	23ff      	movs	r3, #255	; 0xff
    6040:	2200      	movs	r2, #0
    6042:	0252      	lsls	r2, r2, #9
    6044:	0a52      	lsrs	r2, r2, #9
    6046:	05db      	lsls	r3, r3, #23
    6048:	4313      	orrs	r3, r2
    604a:	005b      	lsls	r3, r3, #1
    604c:	07c9      	lsls	r1, r1, #31
    604e:	085b      	lsrs	r3, r3, #1
    6050:	430b      	orrs	r3, r1
    6052:	0018      	movs	r0, r3
    6054:	bd70      	pop	{r4, r5, r6, pc}
    6056:	2e00      	cmp	r6, #0
    6058:	d007      	beq.n	606a <__aeabi_d2f+0x86>
    605a:	4314      	orrs	r4, r2
    605c:	d0ef      	beq.n	603e <__aeabi_d2f+0x5a>
    605e:	2080      	movs	r0, #128	; 0x80
    6060:	00d2      	lsls	r2, r2, #3
    6062:	0480      	lsls	r0, r0, #18
    6064:	4302      	orrs	r2, r0
    6066:	23ff      	movs	r3, #255	; 0xff
    6068:	e7d7      	b.n	601a <__aeabi_d2f+0x36>
    606a:	4322      	orrs	r2, r4
    606c:	2300      	movs	r3, #0
    606e:	2a00      	cmp	r2, #0
    6070:	d003      	beq.n	607a <__aeabi_d2f+0x96>
    6072:	2205      	movs	r2, #5
    6074:	08d2      	lsrs	r2, r2, #3
    6076:	2bff      	cmp	r3, #255	; 0xff
    6078:	d003      	beq.n	6082 <__aeabi_d2f+0x9e>
    607a:	0252      	lsls	r2, r2, #9
    607c:	0a52      	lsrs	r2, r2, #9
    607e:	b2db      	uxtb	r3, r3
    6080:	e7df      	b.n	6042 <__aeabi_d2f+0x5e>
    6082:	2a00      	cmp	r2, #0
    6084:	d032      	beq.n	60ec <__aeabi_d2f+0x108>
    6086:	2080      	movs	r0, #128	; 0x80
    6088:	03c0      	lsls	r0, r0, #15
    608a:	4302      	orrs	r2, r0
    608c:	0252      	lsls	r2, r2, #9
    608e:	0a52      	lsrs	r2, r2, #9
    6090:	e7d7      	b.n	6042 <__aeabi_d2f+0x5e>
    6092:	0018      	movs	r0, r3
    6094:	3017      	adds	r0, #23
    6096:	db14      	blt.n	60c2 <__aeabi_d2f+0xde>
    6098:	2080      	movs	r0, #128	; 0x80
    609a:	0400      	lsls	r0, r0, #16
    609c:	4302      	orrs	r2, r0
    609e:	201e      	movs	r0, #30
    60a0:	1ac0      	subs	r0, r0, r3
    60a2:	281f      	cmp	r0, #31
    60a4:	dc0f      	bgt.n	60c6 <__aeabi_d2f+0xe2>
    60a6:	0025      	movs	r5, r4
    60a8:	4b12      	ldr	r3, [pc, #72]	; (60f4 <__aeabi_d2f+0x110>)
    60aa:	18f3      	adds	r3, r6, r3
    60ac:	409d      	lsls	r5, r3
    60ae:	1e6e      	subs	r6, r5, #1
    60b0:	41b5      	sbcs	r5, r6
    60b2:	409a      	lsls	r2, r3
    60b4:	002b      	movs	r3, r5
    60b6:	4313      	orrs	r3, r2
    60b8:	0022      	movs	r2, r4
    60ba:	40c2      	lsrs	r2, r0
    60bc:	431a      	orrs	r2, r3
    60be:	2300      	movs	r3, #0
    60c0:	e7ab      	b.n	601a <__aeabi_d2f+0x36>
    60c2:	2300      	movs	r3, #0
    60c4:	e7d5      	b.n	6072 <__aeabi_d2f+0x8e>
    60c6:	2502      	movs	r5, #2
    60c8:	426d      	negs	r5, r5
    60ca:	1aeb      	subs	r3, r5, r3
    60cc:	0015      	movs	r5, r2
    60ce:	40dd      	lsrs	r5, r3
    60d0:	2820      	cmp	r0, #32
    60d2:	d009      	beq.n	60e8 <__aeabi_d2f+0x104>
    60d4:	4b08      	ldr	r3, [pc, #32]	; (60f8 <__aeabi_d2f+0x114>)
    60d6:	18f3      	adds	r3, r6, r3
    60d8:	409a      	lsls	r2, r3
    60da:	4314      	orrs	r4, r2
    60dc:	1e62      	subs	r2, r4, #1
    60de:	4194      	sbcs	r4, r2
    60e0:	0022      	movs	r2, r4
    60e2:	2300      	movs	r3, #0
    60e4:	432a      	orrs	r2, r5
    60e6:	e798      	b.n	601a <__aeabi_d2f+0x36>
    60e8:	2200      	movs	r2, #0
    60ea:	e7f6      	b.n	60da <__aeabi_d2f+0xf6>
    60ec:	2200      	movs	r2, #0
    60ee:	e7a8      	b.n	6042 <__aeabi_d2f+0x5e>
    60f0:	fffffc80 	.word	0xfffffc80
    60f4:	fffffc82 	.word	0xfffffc82
    60f8:	fffffca2 	.word	0xfffffca2

000060fc <__aeabi_uidiv>:
    60fc:	2200      	movs	r2, #0
    60fe:	0843      	lsrs	r3, r0, #1
    6100:	428b      	cmp	r3, r1
    6102:	d374      	bcc.n	61ee <__aeabi_uidiv+0xf2>
    6104:	0903      	lsrs	r3, r0, #4
    6106:	428b      	cmp	r3, r1
    6108:	d35f      	bcc.n	61ca <__aeabi_uidiv+0xce>
    610a:	0a03      	lsrs	r3, r0, #8
    610c:	428b      	cmp	r3, r1
    610e:	d344      	bcc.n	619a <__aeabi_uidiv+0x9e>
    6110:	0b03      	lsrs	r3, r0, #12
    6112:	428b      	cmp	r3, r1
    6114:	d328      	bcc.n	6168 <__aeabi_uidiv+0x6c>
    6116:	0c03      	lsrs	r3, r0, #16
    6118:	428b      	cmp	r3, r1
    611a:	d30d      	bcc.n	6138 <__aeabi_uidiv+0x3c>
    611c:	22ff      	movs	r2, #255	; 0xff
    611e:	0209      	lsls	r1, r1, #8
    6120:	ba12      	rev	r2, r2
    6122:	0c03      	lsrs	r3, r0, #16
    6124:	428b      	cmp	r3, r1
    6126:	d302      	bcc.n	612e <__aeabi_uidiv+0x32>
    6128:	1212      	asrs	r2, r2, #8
    612a:	0209      	lsls	r1, r1, #8
    612c:	d065      	beq.n	61fa <__aeabi_uidiv+0xfe>
    612e:	0b03      	lsrs	r3, r0, #12
    6130:	428b      	cmp	r3, r1
    6132:	d319      	bcc.n	6168 <__aeabi_uidiv+0x6c>
    6134:	e000      	b.n	6138 <__aeabi_uidiv+0x3c>
    6136:	0a09      	lsrs	r1, r1, #8
    6138:	0bc3      	lsrs	r3, r0, #15
    613a:	428b      	cmp	r3, r1
    613c:	d301      	bcc.n	6142 <__aeabi_uidiv+0x46>
    613e:	03cb      	lsls	r3, r1, #15
    6140:	1ac0      	subs	r0, r0, r3
    6142:	4152      	adcs	r2, r2
    6144:	0b83      	lsrs	r3, r0, #14
    6146:	428b      	cmp	r3, r1
    6148:	d301      	bcc.n	614e <__aeabi_uidiv+0x52>
    614a:	038b      	lsls	r3, r1, #14
    614c:	1ac0      	subs	r0, r0, r3
    614e:	4152      	adcs	r2, r2
    6150:	0b43      	lsrs	r3, r0, #13
    6152:	428b      	cmp	r3, r1
    6154:	d301      	bcc.n	615a <__aeabi_uidiv+0x5e>
    6156:	034b      	lsls	r3, r1, #13
    6158:	1ac0      	subs	r0, r0, r3
    615a:	4152      	adcs	r2, r2
    615c:	0b03      	lsrs	r3, r0, #12
    615e:	428b      	cmp	r3, r1
    6160:	d301      	bcc.n	6166 <__aeabi_uidiv+0x6a>
    6162:	030b      	lsls	r3, r1, #12
    6164:	1ac0      	subs	r0, r0, r3
    6166:	4152      	adcs	r2, r2
    6168:	0ac3      	lsrs	r3, r0, #11
    616a:	428b      	cmp	r3, r1
    616c:	d301      	bcc.n	6172 <__aeabi_uidiv+0x76>
    616e:	02cb      	lsls	r3, r1, #11
    6170:	1ac0      	subs	r0, r0, r3
    6172:	4152      	adcs	r2, r2
    6174:	0a83      	lsrs	r3, r0, #10
    6176:	428b      	cmp	r3, r1
    6178:	d301      	bcc.n	617e <__aeabi_uidiv+0x82>
    617a:	028b      	lsls	r3, r1, #10
    617c:	1ac0      	subs	r0, r0, r3
    617e:	4152      	adcs	r2, r2
    6180:	0a43      	lsrs	r3, r0, #9
    6182:	428b      	cmp	r3, r1
    6184:	d301      	bcc.n	618a <__aeabi_uidiv+0x8e>
    6186:	024b      	lsls	r3, r1, #9
    6188:	1ac0      	subs	r0, r0, r3
    618a:	4152      	adcs	r2, r2
    618c:	0a03      	lsrs	r3, r0, #8
    618e:	428b      	cmp	r3, r1
    6190:	d301      	bcc.n	6196 <__aeabi_uidiv+0x9a>
    6192:	020b      	lsls	r3, r1, #8
    6194:	1ac0      	subs	r0, r0, r3
    6196:	4152      	adcs	r2, r2
    6198:	d2cd      	bcs.n	6136 <__aeabi_uidiv+0x3a>
    619a:	09c3      	lsrs	r3, r0, #7
    619c:	428b      	cmp	r3, r1
    619e:	d301      	bcc.n	61a4 <__aeabi_uidiv+0xa8>
    61a0:	01cb      	lsls	r3, r1, #7
    61a2:	1ac0      	subs	r0, r0, r3
    61a4:	4152      	adcs	r2, r2
    61a6:	0983      	lsrs	r3, r0, #6
    61a8:	428b      	cmp	r3, r1
    61aa:	d301      	bcc.n	61b0 <__aeabi_uidiv+0xb4>
    61ac:	018b      	lsls	r3, r1, #6
    61ae:	1ac0      	subs	r0, r0, r3
    61b0:	4152      	adcs	r2, r2
    61b2:	0943      	lsrs	r3, r0, #5
    61b4:	428b      	cmp	r3, r1
    61b6:	d301      	bcc.n	61bc <__aeabi_uidiv+0xc0>
    61b8:	014b      	lsls	r3, r1, #5
    61ba:	1ac0      	subs	r0, r0, r3
    61bc:	4152      	adcs	r2, r2
    61be:	0903      	lsrs	r3, r0, #4
    61c0:	428b      	cmp	r3, r1
    61c2:	d301      	bcc.n	61c8 <__aeabi_uidiv+0xcc>
    61c4:	010b      	lsls	r3, r1, #4
    61c6:	1ac0      	subs	r0, r0, r3
    61c8:	4152      	adcs	r2, r2
    61ca:	08c3      	lsrs	r3, r0, #3
    61cc:	428b      	cmp	r3, r1
    61ce:	d301      	bcc.n	61d4 <__aeabi_uidiv+0xd8>
    61d0:	00cb      	lsls	r3, r1, #3
    61d2:	1ac0      	subs	r0, r0, r3
    61d4:	4152      	adcs	r2, r2
    61d6:	0883      	lsrs	r3, r0, #2
    61d8:	428b      	cmp	r3, r1
    61da:	d301      	bcc.n	61e0 <__aeabi_uidiv+0xe4>
    61dc:	008b      	lsls	r3, r1, #2
    61de:	1ac0      	subs	r0, r0, r3
    61e0:	4152      	adcs	r2, r2
    61e2:	0843      	lsrs	r3, r0, #1
    61e4:	428b      	cmp	r3, r1
    61e6:	d301      	bcc.n	61ec <__aeabi_uidiv+0xf0>
    61e8:	004b      	lsls	r3, r1, #1
    61ea:	1ac0      	subs	r0, r0, r3
    61ec:	4152      	adcs	r2, r2
    61ee:	1a41      	subs	r1, r0, r1
    61f0:	d200      	bcs.n	61f4 <__aeabi_uidiv+0xf8>
    61f2:	4601      	mov	r1, r0
    61f4:	4152      	adcs	r2, r2
    61f6:	4610      	mov	r0, r2
    61f8:	4770      	bx	lr
    61fa:	e7ff      	b.n	61fc <__aeabi_uidiv+0x100>
    61fc:	b501      	push	{r0, lr}
    61fe:	2000      	movs	r0, #0
    6200:	f000 f806 	bl	6210 <__aeabi_idiv0>
    6204:	bd02      	pop	{r1, pc}
    6206:	46c0      	nop			; (mov r8, r8)

00006208 <__aeabi_uidivmod>:
    6208:	2900      	cmp	r1, #0
    620a:	d0f7      	beq.n	61fc <__aeabi_uidiv+0x100>
    620c:	e776      	b.n	60fc <__aeabi_uidiv>
    620e:	4770      	bx	lr

00006210 <__aeabi_idiv0>:
    6210:	4770      	bx	lr
    6212:	46c0      	nop			; (mov r8, r8)

00006214 <__clzsi2>:
    6214:	211c      	movs	r1, #28
    6216:	2301      	movs	r3, #1
    6218:	041b      	lsls	r3, r3, #16
    621a:	4298      	cmp	r0, r3
    621c:	d301      	bcc.n	6222 <__clzsi2+0xe>
    621e:	0c00      	lsrs	r0, r0, #16
    6220:	3910      	subs	r1, #16
    6222:	0a1b      	lsrs	r3, r3, #8
    6224:	4298      	cmp	r0, r3
    6226:	d301      	bcc.n	622c <__clzsi2+0x18>
    6228:	0a00      	lsrs	r0, r0, #8
    622a:	3908      	subs	r1, #8
    622c:	091b      	lsrs	r3, r3, #4
    622e:	4298      	cmp	r0, r3
    6230:	d301      	bcc.n	6236 <__clzsi2+0x22>
    6232:	0900      	lsrs	r0, r0, #4
    6234:	3904      	subs	r1, #4
    6236:	a202      	add	r2, pc, #8	; (adr r2, 6240 <__clzsi2+0x2c>)
    6238:	5c10      	ldrb	r0, [r2, r0]
    623a:	1840      	adds	r0, r0, r1
    623c:	4770      	bx	lr
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	02020304 	.word	0x02020304
    6244:	01010101 	.word	0x01010101
	...

00006250 <__errno>:
    6250:	4b01      	ldr	r3, [pc, #4]	; (6258 <__errno+0x8>)
    6252:	6818      	ldr	r0, [r3, #0]
    6254:	4770      	bx	lr
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	200004a0 	.word	0x200004a0

0000625c <__libc_init_array>:
    625c:	b570      	push	{r4, r5, r6, lr}
    625e:	4e0d      	ldr	r6, [pc, #52]	; (6294 <__libc_init_array+0x38>)
    6260:	4d0d      	ldr	r5, [pc, #52]	; (6298 <__libc_init_array+0x3c>)
    6262:	2400      	movs	r4, #0
    6264:	1bad      	subs	r5, r5, r6
    6266:	10ad      	asrs	r5, r5, #2
    6268:	d005      	beq.n	6276 <__libc_init_array+0x1a>
    626a:	00a3      	lsls	r3, r4, #2
    626c:	58f3      	ldr	r3, [r6, r3]
    626e:	3401      	adds	r4, #1
    6270:	4798      	blx	r3
    6272:	42a5      	cmp	r5, r4
    6274:	d1f9      	bne.n	626a <__libc_init_array+0xe>
    6276:	f000 fa1b 	bl	66b0 <_init>
    627a:	4e08      	ldr	r6, [pc, #32]	; (629c <__libc_init_array+0x40>)
    627c:	4d08      	ldr	r5, [pc, #32]	; (62a0 <__libc_init_array+0x44>)
    627e:	2400      	movs	r4, #0
    6280:	1bad      	subs	r5, r5, r6
    6282:	10ad      	asrs	r5, r5, #2
    6284:	d005      	beq.n	6292 <__libc_init_array+0x36>
    6286:	00a3      	lsls	r3, r4, #2
    6288:	58f3      	ldr	r3, [r6, r3]
    628a:	3401      	adds	r4, #1
    628c:	4798      	blx	r3
    628e:	42a5      	cmp	r5, r4
    6290:	d1f9      	bne.n	6286 <__libc_init_array+0x2a>
    6292:	bd70      	pop	{r4, r5, r6, pc}
    6294:	000066bc 	.word	0x000066bc
    6298:	000066bc 	.word	0x000066bc
    629c:	000066bc 	.word	0x000066bc
    62a0:	000066c4 	.word	0x000066c4

000062a4 <memset>:
    62a4:	b570      	push	{r4, r5, r6, lr}
    62a6:	0783      	lsls	r3, r0, #30
    62a8:	d03f      	beq.n	632a <memset+0x86>
    62aa:	1e54      	subs	r4, r2, #1
    62ac:	2a00      	cmp	r2, #0
    62ae:	d03b      	beq.n	6328 <memset+0x84>
    62b0:	b2ce      	uxtb	r6, r1
    62b2:	0003      	movs	r3, r0
    62b4:	2503      	movs	r5, #3
    62b6:	e003      	b.n	62c0 <memset+0x1c>
    62b8:	1e62      	subs	r2, r4, #1
    62ba:	2c00      	cmp	r4, #0
    62bc:	d034      	beq.n	6328 <memset+0x84>
    62be:	0014      	movs	r4, r2
    62c0:	3301      	adds	r3, #1
    62c2:	1e5a      	subs	r2, r3, #1
    62c4:	7016      	strb	r6, [r2, #0]
    62c6:	422b      	tst	r3, r5
    62c8:	d1f6      	bne.n	62b8 <memset+0x14>
    62ca:	2c03      	cmp	r4, #3
    62cc:	d924      	bls.n	6318 <memset+0x74>
    62ce:	25ff      	movs	r5, #255	; 0xff
    62d0:	400d      	ands	r5, r1
    62d2:	022a      	lsls	r2, r5, #8
    62d4:	4315      	orrs	r5, r2
    62d6:	042a      	lsls	r2, r5, #16
    62d8:	4315      	orrs	r5, r2
    62da:	2c0f      	cmp	r4, #15
    62dc:	d911      	bls.n	6302 <memset+0x5e>
    62de:	0026      	movs	r6, r4
    62e0:	3e10      	subs	r6, #16
    62e2:	0936      	lsrs	r6, r6, #4
    62e4:	3601      	adds	r6, #1
    62e6:	0136      	lsls	r6, r6, #4
    62e8:	001a      	movs	r2, r3
    62ea:	199b      	adds	r3, r3, r6
    62ec:	6015      	str	r5, [r2, #0]
    62ee:	6055      	str	r5, [r2, #4]
    62f0:	6095      	str	r5, [r2, #8]
    62f2:	60d5      	str	r5, [r2, #12]
    62f4:	3210      	adds	r2, #16
    62f6:	4293      	cmp	r3, r2
    62f8:	d1f8      	bne.n	62ec <memset+0x48>
    62fa:	220f      	movs	r2, #15
    62fc:	4014      	ands	r4, r2
    62fe:	2c03      	cmp	r4, #3
    6300:	d90a      	bls.n	6318 <memset+0x74>
    6302:	1f26      	subs	r6, r4, #4
    6304:	08b6      	lsrs	r6, r6, #2
    6306:	3601      	adds	r6, #1
    6308:	00b6      	lsls	r6, r6, #2
    630a:	001a      	movs	r2, r3
    630c:	199b      	adds	r3, r3, r6
    630e:	c220      	stmia	r2!, {r5}
    6310:	4293      	cmp	r3, r2
    6312:	d1fc      	bne.n	630e <memset+0x6a>
    6314:	2203      	movs	r2, #3
    6316:	4014      	ands	r4, r2
    6318:	2c00      	cmp	r4, #0
    631a:	d005      	beq.n	6328 <memset+0x84>
    631c:	b2c9      	uxtb	r1, r1
    631e:	191c      	adds	r4, r3, r4
    6320:	7019      	strb	r1, [r3, #0]
    6322:	3301      	adds	r3, #1
    6324:	429c      	cmp	r4, r3
    6326:	d1fb      	bne.n	6320 <memset+0x7c>
    6328:	bd70      	pop	{r4, r5, r6, pc}
    632a:	0014      	movs	r4, r2
    632c:	0003      	movs	r3, r0
    632e:	e7cc      	b.n	62ca <memset+0x26>

00006330 <register_fini>:
    6330:	4b03      	ldr	r3, [pc, #12]	; (6340 <register_fini+0x10>)
    6332:	b510      	push	{r4, lr}
    6334:	2b00      	cmp	r3, #0
    6336:	d002      	beq.n	633e <register_fini+0xe>
    6338:	4802      	ldr	r0, [pc, #8]	; (6344 <register_fini+0x14>)
    633a:	f000 f805 	bl	6348 <atexit>
    633e:	bd10      	pop	{r4, pc}
    6340:	00000000 	.word	0x00000000
    6344:	00006359 	.word	0x00006359

00006348 <atexit>:
    6348:	b510      	push	{r4, lr}
    634a:	0001      	movs	r1, r0
    634c:	2300      	movs	r3, #0
    634e:	2200      	movs	r2, #0
    6350:	2000      	movs	r0, #0
    6352:	f000 f81b 	bl	638c <__register_exitproc>
    6356:	bd10      	pop	{r4, pc}

00006358 <__libc_fini_array>:
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	4b09      	ldr	r3, [pc, #36]	; (6380 <__libc_fini_array+0x28>)
    635c:	4c09      	ldr	r4, [pc, #36]	; (6384 <__libc_fini_array+0x2c>)
    635e:	1ae4      	subs	r4, r4, r3
    6360:	10a4      	asrs	r4, r4, #2
    6362:	d009      	beq.n	6378 <__libc_fini_array+0x20>
    6364:	4a08      	ldr	r2, [pc, #32]	; (6388 <__libc_fini_array+0x30>)
    6366:	18a5      	adds	r5, r4, r2
    6368:	00ad      	lsls	r5, r5, #2
    636a:	18ed      	adds	r5, r5, r3
    636c:	682b      	ldr	r3, [r5, #0]
    636e:	3c01      	subs	r4, #1
    6370:	4798      	blx	r3
    6372:	3d04      	subs	r5, #4
    6374:	2c00      	cmp	r4, #0
    6376:	d1f9      	bne.n	636c <__libc_fini_array+0x14>
    6378:	f000 f9a4 	bl	66c4 <_fini>
    637c:	bd70      	pop	{r4, r5, r6, pc}
    637e:	46c0      	nop			; (mov r8, r8)
    6380:	000066d0 	.word	0x000066d0
    6384:	000066d4 	.word	0x000066d4
    6388:	3fffffff 	.word	0x3fffffff

0000638c <__register_exitproc>:
    638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    638e:	4644      	mov	r4, r8
    6390:	465f      	mov	r7, fp
    6392:	4656      	mov	r6, sl
    6394:	464d      	mov	r5, r9
    6396:	469b      	mov	fp, r3
    6398:	4b2f      	ldr	r3, [pc, #188]	; (6458 <__register_exitproc+0xcc>)
    639a:	b4f0      	push	{r4, r5, r6, r7}
    639c:	681c      	ldr	r4, [r3, #0]
    639e:	23a4      	movs	r3, #164	; 0xa4
    63a0:	005b      	lsls	r3, r3, #1
    63a2:	0005      	movs	r5, r0
    63a4:	58e0      	ldr	r0, [r4, r3]
    63a6:	000e      	movs	r6, r1
    63a8:	4690      	mov	r8, r2
    63aa:	2800      	cmp	r0, #0
    63ac:	d04b      	beq.n	6446 <__register_exitproc+0xba>
    63ae:	6843      	ldr	r3, [r0, #4]
    63b0:	2b1f      	cmp	r3, #31
    63b2:	dc0d      	bgt.n	63d0 <__register_exitproc+0x44>
    63b4:	1c5c      	adds	r4, r3, #1
    63b6:	2d00      	cmp	r5, #0
    63b8:	d121      	bne.n	63fe <__register_exitproc+0x72>
    63ba:	3302      	adds	r3, #2
    63bc:	009b      	lsls	r3, r3, #2
    63be:	6044      	str	r4, [r0, #4]
    63c0:	501e      	str	r6, [r3, r0]
    63c2:	2000      	movs	r0, #0
    63c4:	bc3c      	pop	{r2, r3, r4, r5}
    63c6:	4690      	mov	r8, r2
    63c8:	4699      	mov	r9, r3
    63ca:	46a2      	mov	sl, r4
    63cc:	46ab      	mov	fp, r5
    63ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63d0:	4b22      	ldr	r3, [pc, #136]	; (645c <__register_exitproc+0xd0>)
    63d2:	2b00      	cmp	r3, #0
    63d4:	d03c      	beq.n	6450 <__register_exitproc+0xc4>
    63d6:	20c8      	movs	r0, #200	; 0xc8
    63d8:	0040      	lsls	r0, r0, #1
    63da:	e000      	b.n	63de <__register_exitproc+0x52>
    63dc:	bf00      	nop
    63de:	2800      	cmp	r0, #0
    63e0:	d036      	beq.n	6450 <__register_exitproc+0xc4>
    63e2:	22a4      	movs	r2, #164	; 0xa4
    63e4:	2300      	movs	r3, #0
    63e6:	0052      	lsls	r2, r2, #1
    63e8:	58a1      	ldr	r1, [r4, r2]
    63ea:	6043      	str	r3, [r0, #4]
    63ec:	6001      	str	r1, [r0, #0]
    63ee:	50a0      	str	r0, [r4, r2]
    63f0:	3240      	adds	r2, #64	; 0x40
    63f2:	5083      	str	r3, [r0, r2]
    63f4:	3204      	adds	r2, #4
    63f6:	5083      	str	r3, [r0, r2]
    63f8:	2401      	movs	r4, #1
    63fa:	2d00      	cmp	r5, #0
    63fc:	d0dd      	beq.n	63ba <__register_exitproc+0x2e>
    63fe:	009a      	lsls	r2, r3, #2
    6400:	4691      	mov	r9, r2
    6402:	4481      	add	r9, r0
    6404:	4642      	mov	r2, r8
    6406:	2188      	movs	r1, #136	; 0x88
    6408:	464f      	mov	r7, r9
    640a:	507a      	str	r2, [r7, r1]
    640c:	22c4      	movs	r2, #196	; 0xc4
    640e:	0052      	lsls	r2, r2, #1
    6410:	4690      	mov	r8, r2
    6412:	4480      	add	r8, r0
    6414:	4642      	mov	r2, r8
    6416:	3987      	subs	r1, #135	; 0x87
    6418:	4099      	lsls	r1, r3
    641a:	6812      	ldr	r2, [r2, #0]
    641c:	468a      	mov	sl, r1
    641e:	430a      	orrs	r2, r1
    6420:	4694      	mov	ip, r2
    6422:	4642      	mov	r2, r8
    6424:	4661      	mov	r1, ip
    6426:	6011      	str	r1, [r2, #0]
    6428:	2284      	movs	r2, #132	; 0x84
    642a:	4649      	mov	r1, r9
    642c:	465f      	mov	r7, fp
    642e:	0052      	lsls	r2, r2, #1
    6430:	508f      	str	r7, [r1, r2]
    6432:	2d02      	cmp	r5, #2
    6434:	d1c1      	bne.n	63ba <__register_exitproc+0x2e>
    6436:	0002      	movs	r2, r0
    6438:	4655      	mov	r5, sl
    643a:	328d      	adds	r2, #141	; 0x8d
    643c:	32ff      	adds	r2, #255	; 0xff
    643e:	6811      	ldr	r1, [r2, #0]
    6440:	430d      	orrs	r5, r1
    6442:	6015      	str	r5, [r2, #0]
    6444:	e7b9      	b.n	63ba <__register_exitproc+0x2e>
    6446:	0020      	movs	r0, r4
    6448:	304d      	adds	r0, #77	; 0x4d
    644a:	30ff      	adds	r0, #255	; 0xff
    644c:	50e0      	str	r0, [r4, r3]
    644e:	e7ae      	b.n	63ae <__register_exitproc+0x22>
    6450:	2001      	movs	r0, #1
    6452:	4240      	negs	r0, r0
    6454:	e7b6      	b.n	63c4 <__register_exitproc+0x38>
    6456:	46c0      	nop			; (mov r8, r8)
    6458:	000066ac 	.word	0x000066ac
    645c:	00000000 	.word	0x00000000

00006460 <spi2MOSI>:
    6460:	0c000002 00000200                                .....

00006465 <spi2SCK>:
    6465:	0e000002 00000200                                .....

0000646a <spi2MISO>:
    646a:	0d000002 8d200000                                ......

00006470 <lookupTable.12500>:
    6470:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    6480:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    6490:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    64a0:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    64b0:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    64c0:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    64d0:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    64e0:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    64f0:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    6500:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    6510:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    6520:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    6530:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    6540:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    6550:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    6560:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    6570:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    6580:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    6590:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    65a0:	000f048e                                ....

000065a4 <senseBatPin>:
    65a4:	06000000 01000106                                .....

000065a9 <senseAPin>:
    65a9:	03010001 0100010b                                .....

000065ae <senseBPin>:
    65ae:	02010001 0000000a                                .....

000065b3 <senseCPin>:
    65b3:	03000000 00000001                                .....

000065b8 <senseDPin>:
    65b8:	02000000 00000000                                .....

000065bd <analogAccelPin>:
    65bd:	07000000 00000207                                .....

000065c2 <spi2MOSI>:
    65c2:	0c000002 00000200                                .....

000065c7 <spi2SCK>:
    65c7:	0e000002 776f7000 00000000 00000000     .....pow........
	...

000065d8 <TWO52>:
    65d8:	00000000 43300000 00000000 c3300000     ......0C......0.
    65e8:	00003e74 00003dd2 00003dd2 00003dd0     t>...=...=...=..
    65f8:	00003e66 00003e66 00003e5c 00003dd0     f>..f>..\>...=..
    6608:	00003e66 00003e5c 00003e66 00003dd0     f>..\>..f>...=..
    6618:	00003e6c 00003e6c 00003e6c 00003ef6     l>..l>..l>...>..
    6628:	00004ba8 00004a76 00004b7c 00004a6c     .K..vJ..|K..lJ..
    6638:	00004b7c 00004b86 00004b7c 00004a6c     |K...K..|K..lJ..
    6648:	00004a76 00004a76 00004b86 00004a6c     vJ..vJ...K..lJ..
    6658:	00004a62 00004a62 00004a62 00004dd8     bJ..bJ..bJ...M..
    6668:	000053f0 000052b0 000052b0 000052ae     .S...R...R...R..
    6678:	000053c8 000053c8 000053ba 000052ae     .S...S...S...R..
    6688:	000053c8 000053ba 000053c8 000052ae     .S...S...S...R..
    6698:	000053d0 000053d0 000053d0 000055d0     .S...S...S...U..
    66a8:	00000043                                C...

000066ac <_global_impure_ptr>:
    66ac:	20000078                                x.. 

000066b0 <_init>:
    66b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66b6:	bc08      	pop	{r3}
    66b8:	469e      	mov	lr, r3
    66ba:	4770      	bx	lr

000066bc <__init_array_start>:
    66bc:	00006331 	.word	0x00006331

000066c0 <__frame_dummy_init_array_entry>:
    66c0:	000000dd                                ....

000066c4 <_fini>:
    66c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66ca:	bc08      	pop	{r3}
    66cc:	469e      	mov	lr, r3
    66ce:	4770      	bx	lr

000066d0 <__fini_array_start>:
    66d0:	000000b5 	.word	0x000000b5
