
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000025a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  000029f0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00002b90  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00013b76  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001819  00000000  00000000  0003402f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000167c  00000000  00000000  00035848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000280  00000000  00000000  00036ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002c0  00000000  00000000  00037144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001418b  00000000  00000000  00037404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005d11  00000000  00000000  0004b58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071d24  00000000  00000000  000512a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000898  00000000  00000000  000c2fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e0 	.word	0x200025e0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	000008d5 	.word	0x000008d5
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000025a8 	.word	0x000025a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000025a8 	.word	0x000025a8
     10c:	000025a8 	.word	0x000025a8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	000025a8 	.word	0x000025a8
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e0 	.word	0x200005e0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	0000214d 	.word	0x0000214d
     20c:	000003f9 	.word	0x000003f9

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b66      	ldr	r3, [pc, #408]	; (3c8 <init+0x1a8>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b66      	ldr	r3, [pc, #408]	; (3cc <init+0x1ac>)
     234:	4798      	blx	r3
    RtcInit();
     236:	4b66      	ldr	r3, [pc, #408]	; (3d0 <init+0x1b0>)
     238:	4798      	blx	r3
    delayInit();
     23a:	4b66      	ldr	r3, [pc, #408]	; (3d4 <init+0x1b4>)
     23c:	4798      	blx	r3
    adcInit();
     23e:	4b66      	ldr	r3, [pc, #408]	; (3d8 <init+0x1b8>)
     240:	4798      	blx	r3
    dmaInit();
     242:	4b66      	ldr	r3, [pc, #408]	; (3dc <init+0x1bc>)
     244:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     246:	4b66      	ldr	r3, [pc, #408]	; (3e0 <init+0x1c0>)
     248:	2240      	movs	r2, #64	; 0x40
     24a:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     24c:	21c1      	movs	r1, #193	; 0xc1
     24e:	0089      	lsls	r1, r1, #2
     250:	5858      	ldr	r0, [r3, r1]
     252:	4a64      	ldr	r2, [pc, #400]	; (3e4 <init+0x1c4>)
     254:	4002      	ands	r2, r0
     256:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     258:	4b63      	ldr	r3, [pc, #396]	; (3e8 <init+0x1c8>)
     25a:	2054      	movs	r0, #84	; 0x54
     25c:	5c19      	ldrb	r1, [r3, r0]
     25e:	2201      	movs	r2, #1
     260:	4391      	bics	r1, r2
     262:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     264:	2180      	movs	r1, #128	; 0x80
     266:	0349      	lsls	r1, r1, #13
     268:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     26a:	2433      	movs	r4, #51	; 0x33
     26c:	5d18      	ldrb	r0, [r3, r4]
     26e:	210f      	movs	r1, #15
     270:	4689      	mov	r9, r1
     272:	4388      	bics	r0, r1
     274:	2101      	movs	r1, #1
     276:	4308      	orrs	r0, r1
     278:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     27a:	3413      	adds	r4, #19
     27c:	5d18      	ldrb	r0, [r3, r4]
     27e:	4308      	orrs	r0, r1
     280:	5518      	strb	r0, [r3, r4]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     282:	3c12      	subs	r4, #18
     284:	5d18      	ldrb	r0, [r3, r4]
     286:	464d      	mov	r5, r9
     288:	43a8      	bics	r0, r5
     28a:	4308      	orrs	r0, r1
     28c:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     28e:	2048      	movs	r0, #72	; 0x48
     290:	5c1d      	ldrb	r5, [r3, r0]
     292:	430d      	orrs	r5, r1
     294:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     296:	2658      	movs	r6, #88	; 0x58
     298:	5d9d      	ldrb	r5, [r3, r6]
     29a:	4395      	bics	r5, r2
     29c:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     29e:	2580      	movs	r5, #128	; 0x80
     2a0:	046d      	lsls	r5, r5, #17
     2a2:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a4:	615d      	str	r5, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a6:	5c1d      	ldrb	r5, [r3, r0]
     2a8:	4395      	bics	r5, r2
     2aa:	541d      	strb	r5, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ac:	2580      	movs	r5, #128	; 0x80
     2ae:	006d      	lsls	r5, r5, #1
     2b0:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b2:	3db7      	subs	r5, #183	; 0xb7
     2b4:	46ac      	mov	ip, r5
     2b6:	5d5d      	ldrb	r5, [r3, r5]
     2b8:	4395      	bics	r5, r2
     2ba:	4666      	mov	r6, ip
     2bc:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2be:	2580      	movs	r5, #128	; 0x80
     2c0:	00ad      	lsls	r5, r5, #2
     2c2:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2c4:	3db6      	subs	r5, #182	; 0xb6
     2c6:	3dff      	subs	r5, #255	; 0xff
     2c8:	5d5e      	ldrb	r6, [r3, r5]
     2ca:	4396      	bics	r6, r2
     2cc:	555e      	strb	r6, [r3, r5]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2ce:	5d5f      	ldrb	r7, [r3, r5]
     2d0:	2602      	movs	r6, #2
     2d2:	4337      	orrs	r7, r6
     2d4:	555f      	strb	r7, [r3, r5]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2d6:	2780      	movs	r7, #128	; 0x80
     2d8:	013f      	lsls	r7, r7, #4
     2da:	605f      	str	r7, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2dc:	2735      	movs	r7, #53	; 0x35
     2de:	46bb      	mov	fp, r7
     2e0:	5ddf      	ldrb	r7, [r3, r7]
     2e2:	360d      	adds	r6, #13
     2e4:	46b2      	mov	sl, r6
     2e6:	4037      	ands	r7, r6
     2e8:	2620      	movs	r6, #32
     2ea:	46b0      	mov	r8, r6
     2ec:	4646      	mov	r6, r8
     2ee:	4337      	orrs	r7, r6
     2f0:	465e      	mov	r6, fp
     2f2:	559f      	strb	r7, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f4:	5d5f      	ldrb	r7, [r3, r5]
     2f6:	430f      	orrs	r7, r1
     2f8:	555f      	strb	r7, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2fa:	5d1d      	ldrb	r5, [r3, r4]
     2fc:	4656      	mov	r6, sl
     2fe:	4035      	ands	r5, r6
     300:	4646      	mov	r6, r8
     302:	4335      	orrs	r5, r6
     304:	551d      	strb	r5, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     306:	4665      	mov	r5, ip
     308:	5d5d      	ldrb	r5, [r3, r5]
     30a:	430d      	orrs	r5, r1
     30c:	4666      	mov	r6, ip
     30e:	559d      	strb	r5, [r3, r6]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     310:	5d1d      	ldrb	r5, [r3, r4]
     312:	464e      	mov	r6, r9
     314:	43b5      	bics	r5, r6
     316:	3e0d      	subs	r6, #13
     318:	4335      	orrs	r5, r6
     31a:	551d      	strb	r5, [r3, r4]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     31c:	5c1c      	ldrb	r4, [r3, r0]
     31e:	4321      	orrs	r1, r4
     320:	5419      	strb	r1, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     322:	3082      	adds	r0, #130	; 0x82
     324:	5c19      	ldrb	r1, [r3, r0]
     326:	4391      	bics	r1, r2
     328:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     32a:	2180      	movs	r1, #128	; 0x80
     32c:	00c9      	lsls	r1, r1, #3
     32e:	3842      	subs	r0, #66	; 0x42
     330:	5019      	str	r1, [r3, r0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     332:	3010      	adds	r0, #16
     334:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     336:	244a      	movs	r4, #74	; 0x4a
     338:	5d18      	ldrb	r0, [r3, r4]
     33a:	4390      	bics	r0, r2
     33c:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     33e:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     340:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     342:	204c      	movs	r0, #76	; 0x4c
     344:	5c19      	ldrb	r1, [r3, r0]
     346:	4391      	bics	r1, r2
     348:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     34a:	2180      	movs	r1, #128	; 0x80
     34c:	0149      	lsls	r1, r1, #5
     34e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     350:	3002      	adds	r0, #2
     352:	5c19      	ldrb	r1, [r3, r0]
     354:	4391      	bics	r1, r2
     356:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     358:	2180      	movs	r1, #128	; 0x80
     35a:	01c9      	lsls	r1, r1, #7
     35c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     35e:	214d      	movs	r1, #77	; 0x4d
     360:	5c58      	ldrb	r0, [r3, r1]
     362:	4390      	bics	r0, r2
     364:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     366:	5c58      	ldrb	r0, [r3, r1]
     368:	4306      	orrs	r6, r0
     36a:	545e      	strb	r6, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     36c:	2180      	movs	r1, #128	; 0x80
     36e:	0189      	lsls	r1, r1, #6
     370:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     372:	214f      	movs	r1, #79	; 0x4f
     374:	5c58      	ldrb	r0, [r3, r1]
     376:	4390      	bics	r0, r2
     378:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     37a:	2080      	movs	r0, #128	; 0x80
     37c:	0200      	lsls	r0, r0, #8
     37e:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     380:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     382:	5c58      	ldrb	r0, [r3, r1]
     384:	4390      	bics	r0, r2
     386:	5458      	strb	r0, [r3, r1]
     388:	3106      	adds	r1, #6
     38a:	5c58      	ldrb	r0, [r3, r1]
     38c:	4390      	bics	r0, r2
     38e:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     390:	2280      	movs	r2, #128	; 0x80
     392:	0392      	lsls	r2, r2, #14
     394:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     396:	5c5a      	ldrb	r2, [r3, r1]
     398:	b2d2      	uxtb	r2, r2
     39a:	545a      	strb	r2, [r3, r1]
    pinCfg(buzzerPin);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     39c:	2204      	movs	r2, #4
     39e:	3952      	subs	r1, #82	; 0x52
     3a0:	2000      	movs	r0, #0
     3a2:	4b12      	ldr	r3, [pc, #72]	; (3ec <init+0x1cc>)
     3a4:	4798      	blx	r3
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     3a6:	2300      	movs	r3, #0
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	9300      	str	r3, [sp, #0]
     3ac:	2200      	movs	r2, #0
     3ae:	2103      	movs	r1, #3
     3b0:	2000      	movs	r0, #0
     3b2:	4c0f      	ldr	r4, [pc, #60]	; (3f0 <init+0x1d0>)
     3b4:	47a0      	blx	r4

    IMUinit();
     3b6:	4b0f      	ldr	r3, [pc, #60]	; (3f4 <init+0x1d4>)
     3b8:	4798      	blx	r3
}
     3ba:	b003      	add	sp, #12
     3bc:	bc3c      	pop	{r2, r3, r4, r5}
     3be:	4690      	mov	r8, r2
     3c0:	4699      	mov	r9, r3
     3c2:	46a2      	mov	sl, r4
     3c4:	46ab      	mov	fp, r5
     3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c8:	00000211 	.word	0x00000211
     3cc:	00000711 	.word	0x00000711
     3d0:	000007a1 	.word	0x000007a1
     3d4:	0000085d 	.word	0x0000085d
     3d8:	00000569 	.word	0x00000569
     3dc:	0000092d 	.word	0x0000092d
     3e0:	e000e100 	.word	0xe000e100
     3e4:	ff00ffff 	.word	0xff00ffff
     3e8:	41004400 	.word	0x41004400
     3ec:	00000f99 	.word	0x00000f99
     3f0:	00001001 	.word	0x00001001
     3f4:	00000541 	.word	0x00000541

000003f8 <main>:


int main(void) {
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fa:	465f      	mov	r7, fp
     3fc:	4656      	mov	r6, sl
     3fe:	4645      	mov	r5, r8
     400:	b4e0      	push	{r5, r6, r7}
     402:	b09e      	sub	sp, #120	; 0x78

    init();
     404:	4b3f      	ldr	r3, [pc, #252]	; (504 <main+0x10c>)
     406:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     408:	a805      	add	r0, sp, #20
     40a:	4b3f      	ldr	r3, [pc, #252]	; (508 <main+0x110>)
     40c:	4798      	blx	r3
    volatile float averageAccel;
    volatile float averageAlt;
    volatile float baseAltitude;


    delay_ms(300);
     40e:	2096      	movs	r0, #150	; 0x96
     410:	0040      	lsls	r0, r0, #1
     412:	4b3e      	ldr	r3, [pc, #248]	; (50c <main+0x114>)
     414:	4798      	blx	r3
     416:	24c8      	movs	r4, #200	; 0xc8
     418:	0064      	lsls	r4, r4, #1

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     41a:	4f3d      	ldr	r7, [pc, #244]	; (510 <main+0x118>)

        baseAltitude -= baseAltitude / 50;
     41c:	4e3d      	ldr	r6, [pc, #244]	; (514 <main+0x11c>)


    delay_ms(300);

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     41e:	a805      	add	r0, sp, #20
     420:	47b8      	blx	r7

        baseAltitude -= baseAltitude / 50;
     422:	9802      	ldr	r0, [sp, #8]
     424:	9d02      	ldr	r5, [sp, #8]
     426:	493c      	ldr	r1, [pc, #240]	; (518 <main+0x120>)
     428:	47b0      	blx	r6
     42a:	1c01      	adds	r1, r0, #0
     42c:	1c28      	adds	r0, r5, #0
     42e:	4b3b      	ldr	r3, [pc, #236]	; (51c <main+0x124>)
     430:	4798      	blx	r3
     432:	9002      	str	r0, [sp, #8]
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
     434:	9d02      	ldr	r5, [sp, #8]
     436:	4938      	ldr	r1, [pc, #224]	; (518 <main+0x120>)
     438:	980e      	ldr	r0, [sp, #56]	; 0x38
     43a:	47b0      	blx	r6
     43c:	1c29      	adds	r1, r5, #0
     43e:	4b38      	ldr	r3, [pc, #224]	; (520 <main+0x128>)
     440:	4798      	blx	r3
     442:	9002      	str	r0, [sp, #8]
        delay_us(150);
     444:	2096      	movs	r0, #150	; 0x96
     446:	4b37      	ldr	r3, [pc, #220]	; (524 <main+0x12c>)
     448:	4798      	blx	r3
     44a:	3c01      	subs	r4, #1
     44c:	b2a4      	uxth	r4, r4
    volatile float baseAltitude;


    delay_ms(300);

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
     44e:	2c00      	cmp	r4, #0
     450:	d1e5      	bne.n	41e <main+0x26>
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
        delay_us(150);

    }

    averageAlt = baseAltitude;
     452:	9b02      	ldr	r3, [sp, #8]
     454:	9303      	str	r3, [sp, #12]

    u32_t time = 0;
    u32_t lastTime = 0;
     456:	2300      	movs	r3, #0
     458:	469a      	mov	sl, r3
    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);


    u8_t counter = 0;
     45a:	4698      	mov	r8, r3

    u32_t time = 0;
    u32_t lastTime = 0;

    while (1) {
        time = millis();
     45c:	4b32      	ldr	r3, [pc, #200]	; (528 <main+0x130>)
     45e:	469b      	mov	fp, r3
     460:	47d8      	blx	fp
     462:	9001      	str	r0, [sp, #4]
        counter++;
     464:	4643      	mov	r3, r8
     466:	3301      	adds	r3, #1
     468:	b2db      	uxtb	r3, r3
     46a:	4698      	mov	r8, r3
        sampleTick(&my_altimeter);
     46c:	a805      	add	r0, sp, #20
     46e:	4b28      	ldr	r3, [pc, #160]	; (510 <main+0x118>)
     470:	4798      	blx	r3

        averageAlt -= averageAlt / 20;
     472:	9803      	ldr	r0, [sp, #12]
     474:	9e03      	ldr	r6, [sp, #12]
     476:	4c27      	ldr	r4, [pc, #156]	; (514 <main+0x11c>)
     478:	492c      	ldr	r1, [pc, #176]	; (52c <main+0x134>)
     47a:	47a0      	blx	r4
     47c:	1c01      	adds	r1, r0, #0
     47e:	4d27      	ldr	r5, [pc, #156]	; (51c <main+0x124>)
     480:	1c30      	adds	r0, r6, #0
     482:	47a8      	blx	r5
     484:	9003      	str	r0, [sp, #12]
        averageAlt += my_altimeter.myBarometer.heightFeet / 20;
     486:	9f03      	ldr	r7, [sp, #12]
     488:	4928      	ldr	r1, [pc, #160]	; (52c <main+0x134>)
     48a:	980e      	ldr	r0, [sp, #56]	; 0x38
     48c:	47a0      	blx	r4
     48e:	4e24      	ldr	r6, [pc, #144]	; (520 <main+0x128>)
     490:	1c39      	adds	r1, r7, #0
     492:	47b0      	blx	r6
     494:	9003      	str	r0, [sp, #12]

        averageAccel -= averageAccel / 10;
     496:	9804      	ldr	r0, [sp, #16]
     498:	9f04      	ldr	r7, [sp, #16]
     49a:	4925      	ldr	r1, [pc, #148]	; (530 <main+0x138>)
     49c:	47a0      	blx	r4
     49e:	1c01      	adds	r1, r0, #0
     4a0:	1c38      	adds	r0, r7, #0
     4a2:	47a8      	blx	r5
     4a4:	9004      	str	r0, [sp, #16]
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;
     4a6:	9f04      	ldr	r7, [sp, #16]
     4a8:	4921      	ldr	r1, [pc, #132]	; (530 <main+0x138>)
     4aa:	981c      	ldr	r0, [sp, #112]	; 0x70
     4ac:	47a0      	blx	r4
     4ae:	1c39      	adds	r1, r7, #0
     4b0:	47b0      	blx	r6
     4b2:	9004      	str	r0, [sp, #16]




        if (abs(averageAlt - baseAltitude) > 20) {
     4b4:	9803      	ldr	r0, [sp, #12]
     4b6:	9902      	ldr	r1, [sp, #8]
     4b8:	47a8      	blx	r5
     4ba:	4b1e      	ldr	r3, [pc, #120]	; (534 <main+0x13c>)
     4bc:	4798      	blx	r3
     4be:	17c3      	asrs	r3, r0, #31
     4c0:	18c0      	adds	r0, r0, r3
     4c2:	4058      	eors	r0, r3
     4c4:	2814      	cmp	r0, #20
     4c6:	dd0b      	ble.n	4e0 <main+0xe8>
     4c8:	24c8      	movs	r4, #200	; 0xc8
            for (u16_t buzz = 0; buzz < 200; ++buzz) {
                delay_us(150);
     4ca:	4f16      	ldr	r7, [pc, #88]	; (524 <main+0x12c>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     4cc:	4e1a      	ldr	r6, [pc, #104]	; (538 <main+0x140>)
     4ce:	2580      	movs	r5, #128	; 0x80
     4d0:	03ad      	lsls	r5, r5, #14
     4d2:	2096      	movs	r0, #150	; 0x96
     4d4:	47b8      	blx	r7
     4d6:	61f5      	str	r5, [r6, #28]
     4d8:	3c01      	subs	r4, #1
     4da:	b2a4      	uxth	r4, r4




        if (abs(averageAlt - baseAltitude) > 20) {
            for (u16_t buzz = 0; buzz < 200; ++buzz) {
     4dc:	2c00      	cmp	r4, #0
     4de:	d1f8      	bne.n	4d2 <main+0xda>
                delay_us(150);
                pinToggle(buzzerPin);
            }
        }

        if ((time - lastTime) > 10000) {
     4e0:	9901      	ldr	r1, [sp, #4]
     4e2:	4652      	mov	r2, sl
     4e4:	1a8b      	subs	r3, r1, r2
     4e6:	4a15      	ldr	r2, [pc, #84]	; (53c <main+0x144>)
     4e8:	4293      	cmp	r3, r2
     4ea:	d904      	bls.n	4f6 <main+0xfe>
     4ec:	2280      	movs	r2, #128	; 0x80
     4ee:	0352      	lsls	r2, r2, #13
     4f0:	4b11      	ldr	r3, [pc, #68]	; (538 <main+0x140>)
     4f2:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);


            lastTime = time;
     4f4:	468a      	mov	sl, r1
        }


        if (counter == 100) {
     4f6:	4643      	mov	r3, r8
     4f8:	2b64      	cmp	r3, #100	; 0x64
     4fa:	d1b1      	bne.n	460 <main+0x68>
            //  pinToggle(LedPin);


            counter = -1;
     4fc:	339b      	adds	r3, #155	; 0x9b
     4fe:	4698      	mov	r8, r3
     500:	e7ae      	b.n	460 <main+0x68>
     502:	46c0      	nop			; (mov r8, r8)
     504:	00000221 	.word	0x00000221
     508:	00000bf1 	.word	0x00000bf1
     50c:	000008a9 	.word	0x000008a9
     510:	00000c5d 	.word	0x00000c5d
     514:	000013d9 	.word	0x000013d9
     518:	42480000 	.word	0x42480000
     51c:	0000160d 	.word	0x0000160d
     520:	000010ed 	.word	0x000010ed
     524:	0000087d 	.word	0x0000087d
     528:	000008f5 	.word	0x000008f5
     52c:	41a00000 	.word	0x41a00000
     530:	41200000 	.word	0x41200000
     534:	00001919 	.word	0x00001919
     538:	41004400 	.word	0x41004400
     53c:	00002710 	.word	0x00002710

00000540 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     540:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     542:	4c07      	ldr	r4, [pc, #28]	; (560 <IMUinit+0x20>)
     544:	2580      	movs	r5, #128	; 0x80
     546:	00ed      	lsls	r5, r5, #3
     548:	2394      	movs	r3, #148	; 0x94
     54a:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     54c:	210f      	movs	r1, #15
     54e:	2000      	movs	r0, #0
     550:	4e04      	ldr	r6, [pc, #16]	; (564 <IMUinit+0x24>)
     552:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     554:	210c      	movs	r1, #12
     556:	2000      	movs	r0, #0
     558:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     55a:	2398      	movs	r3, #152	; 0x98
     55c:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     55e:	bd70      	pop	{r4, r5, r6, pc}
     560:	41004400 	.word	0x41004400
     564:	00001079 	.word	0x00001079

00000568 <adcInit>:


#include <util.h>

void adcInit() {
     568:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     56a:	4a12      	ldr	r2, [pc, #72]	; (5b4 <adcInit+0x4c>)
     56c:	6a13      	ldr	r3, [r2, #32]
     56e:	2180      	movs	r1, #128	; 0x80
     570:	0249      	lsls	r1, r1, #9
     572:	430b      	orrs	r3, r1
     574:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     576:	4910      	ldr	r1, [pc, #64]	; (5b8 <adcInit+0x50>)
     578:	22e0      	movs	r2, #224	; 0xe0
     57a:	00d2      	lsls	r2, r2, #3
     57c:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     57e:	480f      	ldr	r0, [pc, #60]	; (5bc <adcInit+0x54>)
     580:	4b0f      	ldr	r3, [pc, #60]	; (5c0 <adcInit+0x58>)
     582:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     584:	4b0f      	ldr	r3, [pc, #60]	; (5c4 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     586:	681b      	ldr	r3, [r3, #0]
     588:	015b      	lsls	r3, r3, #5
     58a:	4013      	ands	r3, r2
     58c:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     58e:	4b0e      	ldr	r3, [pc, #56]	; (5c8 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     590:	685a      	ldr	r2, [r3, #4]
     592:	0154      	lsls	r4, r2, #5
     594:	681a      	ldr	r2, [r3, #0]
     596:	0ed3      	lsrs	r3, r2, #27
     598:	4323      	orrs	r3, r4
     59a:	22ff      	movs	r2, #255	; 0xff
     59c:	4013      	ands	r3, r2
     59e:	4303      	orrs	r3, r0
     5a0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     5a2:	2302      	movs	r3, #2
     5a4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     5a6:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     5a8:	000a      	movs	r2, r1
     5aa:	7e53      	ldrb	r3, [r2, #25]
     5ac:	b25b      	sxtb	r3, r3
     5ae:	2b00      	cmp	r3, #0
     5b0:	dbfb      	blt.n	5aa <adcInit+0x42>
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	40000400 	.word	0x40000400
     5b8:	42004000 	.word	0x42004000
     5bc:	0000401e 	.word	0x0000401e
     5c0:	40000c00 	.word	0x40000c00
     5c4:	00806024 	.word	0x00806024
     5c8:	00806020 	.word	0x00806020

000005cc <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     5cc:	2202      	movs	r2, #2
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <adcSample+0x18>)
     5d0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     5d2:	0019      	movs	r1, r3
     5d4:	3a01      	subs	r2, #1
     5d6:	7e0b      	ldrb	r3, [r1, #24]
     5d8:	4213      	tst	r3, r2
     5da:	d0fc      	beq.n	5d6 <adcSample+0xa>
    return ADC->RESULT.reg;
     5dc:	4b01      	ldr	r3, [pc, #4]	; (5e4 <adcSample+0x18>)
     5de:	8b58      	ldrh	r0, [r3, #26]
     5e0:	b280      	uxth	r0, r0
}
     5e2:	4770      	bx	lr
     5e4:	42004000 	.word	0x42004000

000005e8 <adc_read>:


u16_t adc_read(Pin p) {
     5e8:	b530      	push	{r4, r5, lr}
     5ea:	b083      	sub	sp, #12
     5ec:	0c03      	lsrs	r3, r0, #16
     5ee:	0002      	movs	r2, r0
     5f0:	9000      	str	r0, [sp, #0]
     5f2:	9101      	str	r1, [sp, #4]
     5f4:	b2c9      	uxtb	r1, r1
     5f6:	b2db      	uxtb	r3, r3
     5f8:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     5fa:	07c2      	lsls	r2, r0, #31
     5fc:	d50c      	bpl.n	618 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5fe:	0842      	lsrs	r2, r0, #1
     600:	01dc      	lsls	r4, r3, #7
     602:	1912      	adds	r2, r2, r4
     604:	4c14      	ldr	r4, [pc, #80]	; (658 <adc_read+0x70>)
     606:	46a4      	mov	ip, r4
     608:	4462      	add	r2, ip
     60a:	7814      	ldrb	r4, [r2, #0]
     60c:	250f      	movs	r5, #15
     60e:	402c      	ands	r4, r5
     610:	2510      	movs	r5, #16
     612:	432c      	orrs	r4, r5
     614:	7014      	strb	r4, [r2, #0]
     616:	e00b      	b.n	630 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     618:	0842      	lsrs	r2, r0, #1
     61a:	01dc      	lsls	r4, r3, #7
     61c:	1912      	adds	r2, r2, r4
     61e:	4c0e      	ldr	r4, [pc, #56]	; (658 <adc_read+0x70>)
     620:	46a4      	mov	ip, r4
     622:	4462      	add	r2, ip
     624:	7814      	ldrb	r4, [r2, #0]
     626:	250f      	movs	r5, #15
     628:	43ac      	bics	r4, r5
     62a:	2501      	movs	r5, #1
     62c:	432c      	orrs	r4, r5
     62e:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     630:	01db      	lsls	r3, r3, #7
     632:	18c0      	adds	r0, r0, r3
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <adc_read+0x74>)
     636:	469c      	mov	ip, r3
     638:	4460      	add	r0, ip
     63a:	7802      	ldrb	r2, [r0, #0]
     63c:	2301      	movs	r3, #1
     63e:	4313      	orrs	r3, r2
     640:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     642:	231f      	movs	r3, #31
     644:	4019      	ands	r1, r3
     646:	23c0      	movs	r3, #192	; 0xc0
     648:	015b      	lsls	r3, r3, #5
     64a:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     64c:	4b04      	ldr	r3, [pc, #16]	; (660 <adc_read+0x78>)
     64e:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     650:	4b04      	ldr	r3, [pc, #16]	; (664 <adc_read+0x7c>)
     652:	4798      	blx	r3
     654:	b003      	add	sp, #12
     656:	bd30      	pop	{r4, r5, pc}
     658:	41004430 	.word	0x41004430
     65c:	41004440 	.word	0x41004440
     660:	42004000 	.word	0x42004000
     664:	000005cd 	.word	0x000005cd

00000668 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
     66a:	b085      	sub	sp, #20
     66c:	0c03      	lsrs	r3, r0, #16
     66e:	0c14      	lsrs	r4, r2, #16
     670:	a90a      	add	r1, sp, #40	; 0x28
     672:	7809      	ldrb	r1, [r1, #0]
     674:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     676:	b2dc      	uxtb	r4, r3
     678:	0e00      	lsrs	r0, r0, #24
     67a:	2701      	movs	r7, #1
     67c:	003d      	movs	r5, r7
     67e:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	0e12      	lsrs	r2, r2, #24
     682:	4097      	lsls	r7, r2
     684:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     686:	01e0      	lsls	r0, r4, #7
     688:	4a0a      	ldr	r2, [pc, #40]	; (6b4 <byteOut+0x4c>)
     68a:	4694      	mov	ip, r2
     68c:	4460      	add	r0, ip
     68e:	01f4      	lsls	r4, r6, #7
     690:	4464      	add	r4, ip
     692:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     694:	b24a      	sxtb	r2, r1
     696:	2a00      	cmp	r2, #0
     698:	da01      	bge.n	69e <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     69a:	61a7      	str	r7, [r4, #24]
     69c:	e000      	b.n	6a0 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69e:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6a0:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     6a2:	0049      	lsls	r1, r1, #1
     6a4:	b2c9      	uxtb	r1, r1
     6a6:	3b01      	subs	r3, #1
     6a8:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     6aa:	2b00      	cmp	r3, #0
     6ac:	d1f1      	bne.n	692 <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     6ae:	b005      	add	sp, #20
     6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	41004400 	.word	0x41004400

000006b8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ba:	b085      	sub	sp, #20
     6bc:	0c04      	lsrs	r4, r0, #16
     6be:	9002      	str	r0, [sp, #8]
     6c0:	9103      	str	r1, [sp, #12]
     6c2:	0c11      	lsrs	r1, r2, #16
     6c4:	0017      	movs	r7, r2
     6c6:	9200      	str	r2, [sp, #0]
     6c8:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ca:	b2e4      	uxtb	r4, r4
     6cc:	0e05      	lsrs	r5, r0, #24
     6ce:	2601      	movs	r6, #1
     6d0:	0033      	movs	r3, r6
     6d2:	40ab      	lsls	r3, r5
     6d4:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6d6:	b2ca      	uxtb	r2, r1
     6d8:	0e3f      	lsrs	r7, r7, #24
     6da:	40be      	lsls	r6, r7
     6dc:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     6de:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e0:	01e4      	lsls	r4, r4, #7
     6e2:	4b0a      	ldr	r3, [pc, #40]	; (70c <byteIn+0x54>)
     6e4:	469c      	mov	ip, r3
     6e6:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6e8:	01d2      	lsls	r2, r2, #7
     6ea:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ec:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6ee:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     6f0:	4033      	ands	r3, r6
     6f2:	1e5f      	subs	r7, r3, #1
     6f4:	41bb      	sbcs	r3, r7
     6f6:	0040      	lsls	r0, r0, #1
     6f8:	4303      	orrs	r3, r0
     6fa:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6fc:	61a5      	str	r5, [r4, #24]
     6fe:	3901      	subs	r1, #1
     700:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     702:	2900      	cmp	r1, #0
     704:	d1f2      	bne.n	6ec <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     706:	b005      	add	sp, #20
     708:	bdf0      	pop	{r4, r5, r6, r7, pc}
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	41004400 	.word	0x41004400

00000710 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     710:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     712:	22c2      	movs	r2, #194	; 0xc2
     714:	00d2      	lsls	r2, r2, #3
     716:	4b18      	ldr	r3, [pc, #96]	; (778 <GclkInit+0x68>)
     718:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     71a:	4a18      	ldr	r2, [pc, #96]	; (77c <GclkInit+0x6c>)
     71c:	6851      	ldr	r1, [r2, #4]
     71e:	2302      	movs	r3, #2
     720:	430b      	orrs	r3, r1
     722:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     724:	4b16      	ldr	r3, [pc, #88]	; (780 <GclkInit+0x70>)
     726:	681c      	ldr	r4, [r3, #0]
     728:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     72a:	2c3f      	cmp	r4, #63	; 0x3f
     72c:	d100      	bne.n	730 <GclkInit+0x20>
        coarse = 0x1f;
     72e:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     730:	4b14      	ldr	r3, [pc, #80]	; (784 <GclkInit+0x74>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     732:	6818      	ldr	r0, [r3, #0]
     734:	0580      	lsls	r0, r0, #22
     736:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     738:	4b13      	ldr	r3, [pc, #76]	; (788 <GclkInit+0x78>)
     73a:	4298      	cmp	r0, r3
     73c:	d100      	bne.n	740 <GclkInit+0x30>
        fine = 0x1ff;
     73e:	4813      	ldr	r0, [pc, #76]	; (78c <GclkInit+0x7c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     740:	4a13      	ldr	r2, [pc, #76]	; (790 <GclkInit+0x80>)
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <GclkInit+0x68>)
     744:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     746:	0019      	movs	r1, r3
     748:	2210      	movs	r2, #16
     74a:	68cb      	ldr	r3, [r1, #12]
     74c:	421a      	tst	r2, r3
     74e:	d0fc      	beq.n	74a <GclkInit+0x3a>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     750:	02a4      	lsls	r4, r4, #10
     752:	4320      	orrs	r0, r4
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <GclkInit+0x68>)
     756:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     758:	0019      	movs	r1, r3
     75a:	2210      	movs	r2, #16
     75c:	68cb      	ldr	r3, [r1, #12]
     75e:	421a      	tst	r2, r3
     760:	d0fc      	beq.n	75c <GclkInit+0x4c>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     762:	4a0c      	ldr	r2, [pc, #48]	; (794 <GclkInit+0x84>)
     764:	4b04      	ldr	r3, [pc, #16]	; (778 <GclkInit+0x68>)
     766:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     768:	4b0b      	ldr	r3, [pc, #44]	; (798 <GclkInit+0x88>)
     76a:	2280      	movs	r2, #128	; 0x80
     76c:	0052      	lsls	r2, r2, #1
     76e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     770:	4a0a      	ldr	r2, [pc, #40]	; (79c <GclkInit+0x8c>)
     772:	605a      	str	r2, [r3, #4]
}
     774:	bd10      	pop	{r4, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	40000800 	.word	0x40000800
     77c:	41004000 	.word	0x41004000
     780:	00806024 	.word	0x00806024
     784:	00806028 	.word	0x00806028
     788:	000003ff 	.word	0x000003ff
     78c:	000001ff 	.word	0x000001ff
     790:	00000522 	.word	0x00000522
     794:	000005a2 	.word	0x000005a2
     798:	40000c00 	.word	0x40000c00
     79c:	00010700 	.word	0x00010700

000007a0 <RtcInit>:

void RtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     7a0:	4b1b      	ldr	r3, [pc, #108]	; (810 <RtcInit+0x70>)
     7a2:	2281      	movs	r2, #129	; 0x81
     7a4:	0052      	lsls	r2, r2, #1
     7a6:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     7a8:	4a1a      	ldr	r2, [pc, #104]	; (814 <RtcInit+0x74>)
     7aa:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     7ac:	001a      	movs	r2, r3
     7ae:	7853      	ldrb	r3, [r2, #1]
     7b0:	b25b      	sxtb	r3, r3
     7b2:	2b00      	cmp	r3, #0
     7b4:	dbfb      	blt.n	7ae <RtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     7b6:	4a18      	ldr	r2, [pc, #96]	; (818 <RtcInit+0x78>)
     7b8:	4b15      	ldr	r3, [pc, #84]	; (810 <RtcInit+0x70>)
     7ba:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     7bc:	2204      	movs	r2, #4
     7be:	4b17      	ldr	r3, [pc, #92]	; (81c <RtcInit+0x7c>)
     7c0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     7c2:	001a      	movs	r2, r3
     7c4:	7a93      	ldrb	r3, [r2, #10]
     7c6:	09db      	lsrs	r3, r3, #7
     7c8:	d1fc      	bne.n	7c4 <RtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     7ca:	4a14      	ldr	r2, [pc, #80]	; (81c <RtcInit+0x7c>)
     7cc:	8811      	ldrh	r1, [r2, #0]
     7ce:	23a0      	movs	r3, #160	; 0xa0
     7d0:	00db      	lsls	r3, r3, #3
     7d2:	430b      	orrs	r3, r1
     7d4:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     7d6:	7a93      	ldrb	r3, [r2, #10]
     7d8:	09db      	lsrs	r3, r3, #7
     7da:	d1fc      	bne.n	7d6 <RtcInit+0x36>

    RTC->MODE1.PER.reg = 998;
     7dc:	4a10      	ldr	r2, [pc, #64]	; (820 <RtcInit+0x80>)
     7de:	4b0f      	ldr	r3, [pc, #60]	; (81c <RtcInit+0x7c>)
     7e0:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     7e2:	001a      	movs	r2, r3
     7e4:	7a93      	ldrb	r3, [r2, #10]
     7e6:	09db      	lsrs	r3, r3, #7
     7e8:	d1fc      	bne.n	7e4 <RtcInit+0x44>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     7ea:	4b0c      	ldr	r3, [pc, #48]	; (81c <RtcInit+0x7c>)
     7ec:	8859      	ldrh	r1, [r3, #2]
     7ee:	4a0d      	ldr	r2, [pc, #52]	; (824 <RtcInit+0x84>)
     7f0:	430a      	orrs	r2, r1
     7f2:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     7f4:	2280      	movs	r2, #128	; 0x80
     7f6:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     7f8:	8819      	ldrh	r1, [r3, #0]
     7fa:	2202      	movs	r2, #2
     7fc:	430a      	orrs	r2, r1
     7fe:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     800:	001a      	movs	r2, r3
     802:	7a93      	ldrb	r3, [r2, #10]
     804:	09db      	lsrs	r3, r3, #7
     806:	d1fc      	bne.n	802 <RtcInit+0x62>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     808:	2208      	movs	r2, #8
     80a:	4b07      	ldr	r3, [pc, #28]	; (828 <RtcInit+0x88>)
     80c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     80e:	4770      	bx	lr
     810:	40000c00 	.word	0x40000c00
     814:	00230002 	.word	0x00230002
     818:	00004204 	.word	0x00004204
     81c:	40001400 	.word	0x40001400
     820:	000003e6 	.word	0x000003e6
     824:	00004010 	.word	0x00004010
     828:	e000e100 	.word	0xe000e100

0000082c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     82c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     82e:	230f      	movs	r3, #15
     830:	4018      	ands	r0, r3
     832:	0212      	lsls	r2, r2, #8
     834:	4b07      	ldr	r3, [pc, #28]	; (854 <gclkEnable+0x28>)
     836:	401a      	ands	r2, r3
     838:	4302      	orrs	r2, r0
     83a:	4c07      	ldr	r4, [pc, #28]	; (858 <gclkEnable+0x2c>)
     83c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     83e:	0209      	lsls	r1, r1, #8
     840:	23f8      	movs	r3, #248	; 0xf8
     842:	015b      	lsls	r3, r3, #5
     844:	4019      	ands	r1, r3
     846:	2380      	movs	r3, #128	; 0x80
     848:	025b      	lsls	r3, r3, #9
     84a:	4319      	orrs	r1, r3
     84c:	4308      	orrs	r0, r1
     84e:	6060      	str	r0, [r4, #4]
}
     850:	bd10      	pop	{r4, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	00ffff00 	.word	0x00ffff00
     858:	40000c00 	.word	0x40000c00

0000085c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     85c:	4b04      	ldr	r3, [pc, #16]	; (870 <delayInit+0x14>)
     85e:	4a05      	ldr	r2, [pc, #20]	; (874 <delayInit+0x18>)
     860:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     862:	2230      	movs	r2, #48	; 0x30
     864:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     866:	3a2b      	subs	r2, #43	; 0x2b
     868:	4b03      	ldr	r3, [pc, #12]	; (878 <delayInit+0x1c>)
     86a:	601a      	str	r2, [r3, #0]
}
     86c:	4770      	bx	lr
     86e:	46c0      	nop			; (mov r8, r8)
     870:	20000004 	.word	0x20000004
     874:	0000bb80 	.word	0x0000bb80
     878:	e000e010 	.word	0xe000e010

0000087c <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     87c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     87e:	4b08      	ldr	r3, [pc, #32]	; (8a0 <delay_us+0x24>)
     880:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     882:	4a08      	ldr	r2, [pc, #32]	; (8a4 <delay_us+0x28>)
        SysTick->VAL = 0;
     884:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     886:	2180      	movs	r1, #128	; 0x80
     888:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     88a:	e006      	b.n	89a <delay_us+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     88c:	2c00      	cmp	r4, #0
     88e:	d004      	beq.n	89a <delay_us+0x1e>
        SysTick->LOAD = n;
     890:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     892:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     894:	6813      	ldr	r3, [r2, #0]
     896:	420b      	tst	r3, r1
     898:	d0fc      	beq.n	894 <delay_us+0x18>
     89a:	3801      	subs	r0, #1
     89c:	d2f6      	bcs.n	88c <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     89e:	bd30      	pop	{r4, r5, pc}
     8a0:	20000004 	.word	0x20000004
     8a4:	e000e010 	.word	0xe000e010

000008a8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     8a8:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <delay_ms+0x24>)
     8ac:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     8ae:	4a08      	ldr	r2, [pc, #32]	; (8d0 <delay_ms+0x28>)
        SysTick->VAL = 0;
     8b0:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8b2:	2180      	movs	r1, #128	; 0x80
     8b4:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     8b6:	e006      	b.n	8c6 <delay_ms+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     8b8:	2c00      	cmp	r4, #0
     8ba:	d004      	beq.n	8c6 <delay_ms+0x1e>
        SysTick->LOAD = n;
     8bc:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     8be:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8c0:	6813      	ldr	r3, [r2, #0]
     8c2:	420b      	tst	r3, r1
     8c4:	d0fc      	beq.n	8c0 <delay_ms+0x18>
     8c6:	3801      	subs	r0, #1
     8c8:	d2f6      	bcs.n	8b8 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     8ca:	bd30      	pop	{r4, r5, pc}
     8cc:	20000004 	.word	0x20000004
     8d0:	e000e010 	.word	0xe000e010

000008d4 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     8d4:	4a05      	ldr	r2, [pc, #20]	; (8ec <RTC_Handler+0x18>)
     8d6:	6813      	ldr	r3, [r2, #0]
     8d8:	21fa      	movs	r1, #250	; 0xfa
     8da:	0089      	lsls	r1, r1, #2
     8dc:	468c      	mov	ip, r1
     8de:	4463      	add	r3, ip
     8e0:	6013      	str	r3, [r2, #0]

    RTC->MODE1.INTFLAG.reg = 0xFF;
     8e2:	22ff      	movs	r2, #255	; 0xff
     8e4:	4b02      	ldr	r3, [pc, #8]	; (8f0 <RTC_Handler+0x1c>)
     8e6:	721a      	strb	r2, [r3, #8]
}
     8e8:	4770      	bx	lr
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	2000045c 	.word	0x2000045c
     8f0:	40001400 	.word	0x40001400

000008f4 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     8f4:	f3ef 8110 	mrs	r1, PRIMASK
     8f8:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     8fa:	4a0a      	ldr	r2, [pc, #40]	; (924 <millis+0x30>)
     8fc:	8a10      	ldrh	r0, [r2, #16]
     8fe:	b280      	uxth	r0, r0
     900:	4b09      	ldr	r3, [pc, #36]	; (928 <millis+0x34>)
     902:	681b      	ldr	r3, [r3, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     904:	7a12      	ldrb	r2, [r2, #8]
     906:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     908:	18c0      	adds	r0, r0, r3
    if (RTC->MODE1.INTFLAG.bit.OVF)
     90a:	2a00      	cmp	r2, #0
     90c:	d007      	beq.n	91e <millis+0x2a>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <millis+0x30>)
     910:	8a1a      	ldrh	r2, [r3, #16]
     912:	4b05      	ldr	r3, [pc, #20]	; (928 <millis+0x34>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	20fa      	movs	r0, #250	; 0xfa
     918:	0080      	lsls	r0, r0, #2
     91a:	1818      	adds	r0, r3, r0
     91c:	1810      	adds	r0, r2, r0
    ATOMIC_SECTION_LEAVE
     91e:	f381 8810 	msr	PRIMASK, r1
    return ms;
     922:	4770      	bx	lr
     924:	40001400 	.word	0x40001400
     928:	2000045c 	.word	0x2000045c

0000092c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     92c:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     92e:	4d11      	ldr	r5, [pc, #68]	; (974 <dmaInit+0x48>)
     930:	22c0      	movs	r2, #192	; 0xc0
     932:	2100      	movs	r1, #0
     934:	0028      	movs	r0, r5
     936:	4e10      	ldr	r6, [pc, #64]	; (978 <dmaInit+0x4c>)
     938:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     93a:	4c10      	ldr	r4, [pc, #64]	; (97c <dmaInit+0x50>)
     93c:	22c0      	movs	r2, #192	; 0xc0
     93e:	2100      	movs	r1, #0
     940:	0020      	movs	r0, r4
     942:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     944:	4b0e      	ldr	r3, [pc, #56]	; (980 <dmaInit+0x54>)
     946:	6959      	ldr	r1, [r3, #20]
     948:	2220      	movs	r2, #32
     94a:	430a      	orrs	r2, r1
     94c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     94e:	69d9      	ldr	r1, [r3, #28]
     950:	2210      	movs	r2, #16
     952:	430a      	orrs	r2, r1
     954:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <dmaInit+0x58>)
     958:	881a      	ldrh	r2, [r3, #0]
     95a:	2102      	movs	r1, #2
     95c:	438a      	bics	r2, r1
     95e:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     960:	8819      	ldrh	r1, [r3, #0]
     962:	2201      	movs	r2, #1
     964:	430a      	orrs	r2, r1
     966:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     968:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     96a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     96c:	4a06      	ldr	r2, [pc, #24]	; (988 <dmaInit+0x5c>)
     96e:	801a      	strh	r2, [r3, #0]
}
     970:	bd70      	pop	{r4, r5, r6, pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	20000520 	.word	0x20000520
     978:	00002195 	.word	0x00002195
     97c:	20000460 	.word	0x20000460
     980:	40000400 	.word	0x40000400
     984:	41004800 	.word	0x41004800
     988:	00000f02 	.word	0x00000f02

0000098c <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
     98e:	464f      	mov	r7, r9
     990:	4646      	mov	r6, r8
     992:	b4c0      	push	{r6, r7}
     994:	b083      	sub	sp, #12
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     996:	4e16      	ldr	r6, [pc, #88]	; (9f0 <readMS5803AdcResults+0x64>)
     998:	2380      	movs	r3, #128	; 0x80
     99a:	021b      	lsls	r3, r3, #8
     99c:	4699      	mov	r9, r3
     99e:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     9a0:	4c14      	ldr	r4, [pc, #80]	; (9f4 <readMS5803AdcResults+0x68>)
     9a2:	2300      	movs	r3, #0
     9a4:	9300      	str	r3, [sp, #0]
     9a6:	6822      	ldr	r2, [r4, #0]
     9a8:	6863      	ldr	r3, [r4, #4]
     9aa:	68a0      	ldr	r0, [r4, #8]
     9ac:	68e1      	ldr	r1, [r4, #12]
     9ae:	4d12      	ldr	r5, [pc, #72]	; (9f8 <readMS5803AdcResults+0x6c>)
     9b0:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     9b2:	6922      	ldr	r2, [r4, #16]
     9b4:	6963      	ldr	r3, [r4, #20]
     9b6:	68a0      	ldr	r0, [r4, #8]
     9b8:	68e1      	ldr	r1, [r4, #12]
     9ba:	4f10      	ldr	r7, [pc, #64]	; (9fc <readMS5803AdcResults+0x70>)
     9bc:	47b8      	blx	r7
     9be:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     9c0:	6922      	ldr	r2, [r4, #16]
     9c2:	6963      	ldr	r3, [r4, #20]
     9c4:	68a0      	ldr	r0, [r4, #8]
     9c6:	68e1      	ldr	r1, [r4, #12]
     9c8:	47b8      	blx	r7
     9ca:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     9cc:	6922      	ldr	r2, [r4, #16]
     9ce:	6963      	ldr	r3, [r4, #20]
     9d0:	68a0      	ldr	r0, [r4, #8]
     9d2:	68e1      	ldr	r1, [r4, #12]
     9d4:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9d6:	464b      	mov	r3, r9
     9d8:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     9da:	4643      	mov	r3, r8
     9dc:	041e      	lsls	r6, r3, #16
     9de:	022d      	lsls	r5, r5, #8
     9e0:	4335      	orrs	r5, r6
     9e2:	4328      	orrs	r0, r5
}
     9e4:	b003      	add	sp, #12
     9e6:	bc0c      	pop	{r2, r3}
     9e8:	4690      	mov	r8, r2
     9ea:	4699      	mov	r9, r3
     9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	41004400 	.word	0x41004400
     9f4:	00002350 	.word	0x00002350
     9f8:	00000669 	.word	0x00000669
     9fc:	000006b9 	.word	0x000006b9

00000a00 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	464f      	mov	r7, r9
     a04:	4646      	mov	r6, r8
     a06:	b4c0      	push	{r6, r7}
     a08:	b08b      	sub	sp, #44	; 0x2c
     a0a:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     a0c:	8803      	ldrh	r3, [r0, #0]
     a0e:	251e      	movs	r5, #30
     a10:	aa02      	add	r2, sp, #8
     a12:	4694      	mov	ip, r2
     a14:	4465      	add	r5, ip
     a16:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     a18:	8843      	ldrh	r3, [r0, #2]
     a1a:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     a1c:	8883      	ldrh	r3, [r0, #4]
     a1e:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     a20:	88c3      	ldrh	r3, [r0, #6]
     a22:	ae08      	add	r6, sp, #32
     a24:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     a26:	8903      	ldrh	r3, [r0, #8]
     a28:	2216      	movs	r2, #22
     a2a:	4462      	add	r2, ip
     a2c:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     a2e:	8941      	ldrh	r1, [r0, #10]
     a30:	ab07      	add	r3, sp, #28
     a32:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     a34:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     a36:	0224      	lsls	r4, r4, #8
     a38:	6902      	ldr	r2, [r0, #16]
     a3a:	1b14      	subs	r4, r2, r4
     a3c:	17e2      	asrs	r2, r4, #31
     a3e:	0011      	movs	r1, r2
     a40:	8818      	ldrh	r0, [r3, #0]
     a42:	b280      	uxth	r0, r0
     a44:	4b2b      	ldr	r3, [pc, #172]	; (af4 <ConvertPressureTemperature+0xf4>)
     a46:	4699      	mov	r9, r3
     a48:	0022      	movs	r2, r4
     a4a:	9101      	str	r1, [sp, #4]
     a4c:	000b      	movs	r3, r1
     a4e:	2100      	movs	r1, #0
     a50:	47c8      	blx	r9
     a52:	23fa      	movs	r3, #250	; 0xfa
     a54:	00db      	lsls	r3, r3, #3
     a56:	469c      	mov	ip, r3
     a58:	4461      	add	r1, ip
     a5a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     a5c:	ab02      	add	r3, sp, #8
     a5e:	8b9b      	ldrh	r3, [r3, #28]
     a60:	b29b      	uxth	r3, r3
     a62:	4698      	mov	r8, r3
     a64:	8830      	ldrh	r0, [r6, #0]
     a66:	b280      	uxth	r0, r0
     a68:	0022      	movs	r2, r4
     a6a:	9b01      	ldr	r3, [sp, #4]
     a6c:	2100      	movs	r1, #0
     a6e:	47c8      	blx	r9
     a70:	064e      	lsls	r6, r1, #25
     a72:	09c2      	lsrs	r2, r0, #7
     a74:	4332      	orrs	r2, r6
     a76:	11cb      	asrs	r3, r1, #7
     a78:	2100      	movs	r1, #0
     a7a:	4646      	mov	r6, r8
     a7c:	0430      	lsls	r0, r6, #16
     a7e:	1812      	adds	r2, r2, r0
     a80:	414b      	adcs	r3, r1
     a82:	9204      	str	r2, [sp, #16]
     a84:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     a86:	882d      	ldrh	r5, [r5, #0]
     a88:	b2ad      	uxth	r5, r5
     a8a:	aa02      	add	r2, sp, #8
     a8c:	8b50      	ldrh	r0, [r2, #26]
     a8e:	b280      	uxth	r0, r0
     a90:	0022      	movs	r2, r4
     a92:	9b01      	ldr	r3, [sp, #4]
     a94:	2100      	movs	r1, #0
     a96:	47c8      	blx	r9
     a98:	060c      	lsls	r4, r1, #24
     a9a:	0a02      	lsrs	r2, r0, #8
     a9c:	4322      	orrs	r2, r4
     a9e:	120b      	asrs	r3, r1, #8
     aa0:	2100      	movs	r1, #0
     aa2:	03e8      	lsls	r0, r5, #15
     aa4:	1812      	adds	r2, r2, r0
     aa6:	414b      	adcs	r3, r1
     aa8:	9202      	str	r2, [sp, #8]
     aaa:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     aac:	9a02      	ldr	r2, [sp, #8]
     aae:	9b03      	ldr	r3, [sp, #12]
     ab0:	9c04      	ldr	r4, [sp, #16]
     ab2:	9d05      	ldr	r5, [sp, #20]
     ab4:	68f8      	ldr	r0, [r7, #12]
     ab6:	2100      	movs	r1, #0
     ab8:	47c8      	blx	r9
     aba:	17ce      	asrs	r6, r1, #31
     abc:	02f6      	lsls	r6, r6, #11
     abe:	0af2      	lsrs	r2, r6, #11
     ac0:	2300      	movs	r3, #0
     ac2:	1880      	adds	r0, r0, r2
     ac4:	4159      	adcs	r1, r3
     ac6:	02ce      	lsls	r6, r1, #11
     ac8:	0d42      	lsrs	r2, r0, #21
     aca:	4332      	orrs	r2, r6
     acc:	154b      	asrs	r3, r1, #21
     ace:	1b12      	subs	r2, r2, r4
     ad0:	41ab      	sbcs	r3, r5
     ad2:	17dc      	asrs	r4, r3, #31
     ad4:	0464      	lsls	r4, r4, #17
     ad6:	0c60      	lsrs	r0, r4, #17
     ad8:	2100      	movs	r1, #0
     ada:	1812      	adds	r2, r2, r0
     adc:	414b      	adcs	r3, r1
     ade:	0011      	movs	r1, r2
     ae0:	045b      	lsls	r3, r3, #17
     ae2:	0bca      	lsrs	r2, r1, #15
     ae4:	431a      	orrs	r2, r3
     ae6:	61fa      	str	r2, [r7, #28]
}
     ae8:	b00b      	add	sp, #44	; 0x2c
     aea:	bc0c      	pop	{r2, r3}
     aec:	4690      	mov	r8, r2
     aee:	4699      	mov	r9, r3
     af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	00001095 	.word	0x00001095

00000af8 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     af8:	b570      	push	{r4, r5, r6, lr}
     afa:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     afc:	69c2      	ldr	r2, [r0, #28]
     afe:	0093      	lsls	r3, r2, #2
     b00:	189b      	adds	r3, r3, r2
     b02:	005b      	lsls	r3, r3, #1
     b04:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     b06:	4a11      	ldr	r2, [pc, #68]	; (b4c <pascalToCent+0x54>)
     b08:	4293      	cmp	r3, r2
     b0a:	d902      	bls.n	b12 <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     b0c:	4b10      	ldr	r3, [pc, #64]	; (b50 <pascalToCent+0x58>)
     b0e:	6203      	str	r3, [r0, #32]
     b10:	e01a      	b.n	b48 <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     b12:	4a0e      	ldr	r2, [pc, #56]	; (b4c <pascalToCent+0x54>)
     b14:	1ad2      	subs	r2, r2, r3
     b16:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     b18:	2a4b      	cmp	r2, #75	; 0x4b
     b1a:	dd02      	ble.n	b22 <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     b1c:	4b0d      	ldr	r3, [pc, #52]	; (b54 <pascalToCent+0x5c>)
     b1e:	6203      	str	r3, [r0, #32]
     b20:	e012      	b.n	b48 <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     b22:	4d0d      	ldr	r5, [pc, #52]	; (b58 <pascalToCent+0x60>)
     b24:	0091      	lsls	r1, r2, #2
     b26:	1869      	adds	r1, r5, r1
     b28:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     b2a:	0296      	lsls	r6, r2, #10
     b2c:	4907      	ldr	r1, [pc, #28]	; (b4c <pascalToCent+0x54>)
     b2e:	1b89      	subs	r1, r1, r6
     b30:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     b32:	3201      	adds	r2, #1
     b34:	0092      	lsls	r2, r2, #2
     b36:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     b38:	6992      	ldr	r2, [r2, #24]
     b3a:	1a12      	subs	r2, r2, r0
     b3c:	4353      	muls	r3, r2
     b3e:	0a9b      	lsrs	r3, r3, #10
     b40:	1818      	adds	r0, r3, r0
     b42:	4b06      	ldr	r3, [pc, #24]	; (b5c <pascalToCent+0x64>)
     b44:	4798      	blx	r3
     b46:	6220      	str	r0, [r4, #32]
        }
    }
}
     b48:	bd70      	pop	{r4, r5, r6, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	000199cc 	.word	0x000199cc
     b50:	c6e5c000 	.word	0xc6e5c000
     b54:	497048e0 	.word	0x497048e0
     b58:	00002350 	.word	0x00002350
     b5c:	0000195d 	.word	0x0000195d

00000b60 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     b60:	b5f0      	push	{r4, r5, r6, r7, lr}
     b62:	465f      	mov	r7, fp
     b64:	4656      	mov	r6, sl
     b66:	464d      	mov	r5, r9
     b68:	4644      	mov	r4, r8
     b6a:	b4f0      	push	{r4, r5, r6, r7}
     b6c:	b083      	sub	sp, #12
     b6e:	0007      	movs	r7, r0
     b70:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     b72:	4b1a      	ldr	r3, [pc, #104]	; (bdc <readMS5803Coefficients+0x7c>)
     b74:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     b76:	4c1a      	ldr	r4, [pc, #104]	; (be0 <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     b78:	2596      	movs	r5, #150	; 0x96
     b7a:	00ad      	lsls	r5, r5, #2
     b7c:	0028      	movs	r0, r5
     b7e:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     b80:	0028      	movs	r0, r5
     b82:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b84:	2380      	movs	r3, #128	; 0x80
     b86:	021b      	lsls	r3, r3, #8
     b88:	4699      	mov	r9, r3
     b8a:	4a16      	ldr	r2, [pc, #88]	; (be4 <readMS5803Coefficients+0x84>)
     b8c:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     b8e:	9600      	str	r6, [sp, #0]
     b90:	6822      	ldr	r2, [r4, #0]
     b92:	6863      	ldr	r3, [r4, #4]
     b94:	68a0      	ldr	r0, [r4, #8]
     b96:	68e1      	ldr	r1, [r4, #12]
     b98:	4d13      	ldr	r5, [pc, #76]	; (be8 <readMS5803Coefficients+0x88>)
     b9a:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     b9c:	6922      	ldr	r2, [r4, #16]
     b9e:	6963      	ldr	r3, [r4, #20]
     ba0:	68a0      	ldr	r0, [r4, #8]
     ba2:	68e1      	ldr	r1, [r4, #12]
     ba4:	4d11      	ldr	r5, [pc, #68]	; (bec <readMS5803Coefficients+0x8c>)
     ba6:	47a8      	blx	r5
     ba8:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     baa:	6922      	ldr	r2, [r4, #16]
     bac:	6963      	ldr	r3, [r4, #20]
     bae:	68a0      	ldr	r0, [r4, #8]
     bb0:	68e1      	ldr	r1, [r4, #12]
     bb2:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bb4:	464b      	mov	r3, r9
     bb6:	4a0b      	ldr	r2, [pc, #44]	; (be4 <readMS5803Coefficients+0x84>)
     bb8:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     bba:	4643      	mov	r3, r8
     bbc:	021d      	lsls	r5, r3, #8
     bbe:	4328      	orrs	r0, r5
     bc0:	8038      	strh	r0, [r7, #0]
     bc2:	3602      	adds	r6, #2
     bc4:	b2f6      	uxtb	r6, r6
     bc6:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     bc8:	2eae      	cmp	r6, #174	; 0xae
     bca:	d1d5      	bne.n	b78 <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     bcc:	b003      	add	sp, #12
     bce:	bc3c      	pop	{r2, r3, r4, r5}
     bd0:	4690      	mov	r8, r2
     bd2:	4699      	mov	r9, r3
     bd4:	46a2      	mov	sl, r4
     bd6:	46ab      	mov	fp, r5
     bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	0000087d 	.word	0x0000087d
     be0:	00002350 	.word	0x00002350
     be4:	41004400 	.word	0x41004400
     be8:	00000669 	.word	0x00000669
     bec:	000006b9 	.word	0x000006b9

00000bf0 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	b083      	sub	sp, #12
     bf4:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bf6:	4d10      	ldr	r5, [pc, #64]	; (c38 <initMS5803Barometer+0x48>)
     bf8:	2680      	movs	r6, #128	; 0x80
     bfa:	0236      	lsls	r6, r6, #8
     bfc:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     bfe:	490f      	ldr	r1, [pc, #60]	; (c3c <initMS5803Barometer+0x4c>)
     c00:	231e      	movs	r3, #30
     c02:	9300      	str	r3, [sp, #0]
     c04:	680a      	ldr	r2, [r1, #0]
     c06:	684b      	ldr	r3, [r1, #4]
     c08:	6888      	ldr	r0, [r1, #8]
     c0a:	68c9      	ldr	r1, [r1, #12]
     c0c:	4f0c      	ldr	r7, [pc, #48]	; (c40 <initMS5803Barometer+0x50>)
     c0e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c10:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     c12:	20c8      	movs	r0, #200	; 0xc8
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <initMS5803Barometer+0x54>)
     c16:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     c18:	0020      	movs	r0, r4
     c1a:	4b0b      	ldr	r3, [pc, #44]	; (c48 <initMS5803Barometer+0x58>)
     c1c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     c1e:	4b0b      	ldr	r3, [pc, #44]	; (c4c <initMS5803Barometer+0x5c>)
     c20:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <initMS5803Barometer+0x60>)
     c24:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <initMS5803Barometer+0x64>)
     c28:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <initMS5803Barometer+0x68>)
     c2c:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     c2e:	23fa      	movs	r3, #250	; 0xfa
     c30:	00db      	lsls	r3, r3, #3
     c32:	6163      	str	r3, [r4, #20]




}
     c34:	b003      	add	sp, #12
     c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c38:	41004400 	.word	0x41004400
     c3c:	00002350 	.word	0x00002350
     c40:	00000669 	.word	0x00000669
     c44:	000008a9 	.word	0x000008a9
     c48:	00000b61 	.word	0x00000b61
     c4c:	457a0000 	.word	0x457a0000
     c50:	00002710 	.word	0x00002710
     c54:	0041c9fe 	.word	0x0041c9fe
     c58:	007ffae4 	.word	0x007ffae4

00000c5c <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c5e:	465f      	mov	r7, fp
     c60:	4656      	mov	r6, sl
     c62:	464d      	mov	r5, r9
     c64:	4644      	mov	r4, r8
     c66:	b4f0      	push	{r4, r5, r6, r7}
     c68:	b083      	sub	sp, #12
     c6a:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     c6c:	4db4      	ldr	r5, [pc, #720]	; (f40 <sampleTick+0x2e4>)
     c6e:	6828      	ldr	r0, [r5, #0]
     c70:	6869      	ldr	r1, [r5, #4]
     c72:	4fb4      	ldr	r7, [pc, #720]	; (f44 <sampleTick+0x2e8>)
     c74:	47b8      	blx	r7
     c76:	4eb4      	ldr	r6, [pc, #720]	; (f48 <sampleTick+0x2ec>)
     c78:	47b0      	blx	r6
     c7a:	4bb4      	ldr	r3, [pc, #720]	; (f4c <sampleTick+0x2f0>)
     c7c:	4699      	mov	r9, r3
     c7e:	4ab4      	ldr	r2, [pc, #720]	; (f50 <sampleTick+0x2f4>)
     c80:	4bb4      	ldr	r3, [pc, #720]	; (f54 <sampleTick+0x2f8>)
     c82:	47c8      	blx	r9
     c84:	4bb4      	ldr	r3, [pc, #720]	; (f58 <sampleTick+0x2fc>)
     c86:	4698      	mov	r8, r3
     c88:	4798      	blx	r3
     c8a:	6620      	str	r0, [r4, #96]	; 0x60

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
     c8c:	68a8      	ldr	r0, [r5, #8]
     c8e:	68e9      	ldr	r1, [r5, #12]
     c90:	47b8      	blx	r7
     c92:	2358      	movs	r3, #88	; 0x58
     c94:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
     c96:	4bb1      	ldr	r3, [pc, #708]	; (f5c <sampleTick+0x300>)
     c98:	469c      	mov	ip, r3
     c9a:	4460      	add	r0, ip
     c9c:	47b0      	blx	r6
     c9e:	4ab0      	ldr	r2, [pc, #704]	; (f60 <sampleTick+0x304>)
     ca0:	4bb0      	ldr	r3, [pc, #704]	; (f64 <sampleTick+0x308>)
     ca2:	47c8      	blx	r9
     ca4:	47c0      	blx	r8
     ca6:	65e0      	str	r0, [r4, #92]	; 0x5c
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca8:	4eaf      	ldr	r6, [pc, #700]	; (f68 <sampleTick+0x30c>)
     caa:	2380      	movs	r3, #128	; 0x80
     cac:	021b      	lsls	r3, r3, #8
     cae:	6173      	str	r3, [r6, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
     cb0:	2350      	movs	r3, #80	; 0x50
     cb2:	9300      	str	r3, [sp, #0]
     cb4:	692a      	ldr	r2, [r5, #16]
     cb6:	696b      	ldr	r3, [r5, #20]
     cb8:	69a8      	ldr	r0, [r5, #24]
     cba:	69e9      	ldr	r1, [r5, #28]
     cbc:	4fab      	ldr	r7, [pc, #684]	; (f6c <sampleTick+0x310>)
     cbe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc0:	2380      	movs	r3, #128	; 0x80
     cc2:	021b      	lsls	r3, r3, #8
     cc4:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     cc6:	2002      	movs	r0, #2
     cc8:	4ba9      	ldr	r3, [pc, #676]	; (f70 <sampleTick+0x314>)
     cca:	469a      	mov	sl, r3
     ccc:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     cce:	4ba9      	ldr	r3, [pc, #676]	; (f74 <sampleTick+0x318>)
     cd0:	4798      	blx	r3
     cd2:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd4:	2380      	movs	r3, #128	; 0x80
     cd6:	021b      	lsls	r3, r3, #8
     cd8:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
     cda:	2342      	movs	r3, #66	; 0x42
     cdc:	9300      	str	r3, [sp, #0]
     cde:	692a      	ldr	r2, [r5, #16]
     ce0:	696b      	ldr	r3, [r5, #20]
     ce2:	69a8      	ldr	r0, [r5, #24]
     ce4:	69e9      	ldr	r1, [r5, #28]
     ce6:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce8:	2380      	movs	r3, #128	; 0x80
     cea:	021b      	lsls	r3, r3, #8
     cec:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     cee:	2002      	movs	r0, #2
     cf0:	47d0      	blx	sl
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     cf2:	4ba0      	ldr	r3, [pc, #640]	; (f74 <sampleTick+0x318>)
     cf4:	4798      	blx	r3
     cf6:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     cf8:	0020      	movs	r0, r4
     cfa:	4b9f      	ldr	r3, [pc, #636]	; (f78 <sampleTick+0x31c>)
     cfc:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     cfe:	0020      	movs	r0, r4
     d00:	4b9e      	ldr	r3, [pc, #632]	; (f7c <sampleTick+0x320>)
     d02:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     d04:	6a20      	ldr	r0, [r4, #32]
     d06:	4b9e      	ldr	r3, [pc, #632]	; (f80 <sampleTick+0x324>)
     d08:	4798      	blx	r3
     d0a:	4a9e      	ldr	r2, [pc, #632]	; (f84 <sampleTick+0x328>)
     d0c:	4b9e      	ldr	r3, [pc, #632]	; (f88 <sampleTick+0x32c>)
     d0e:	47c8      	blx	r9
     d10:	47c0      	blx	r8
     d12:	6260      	str	r0, [r4, #36]	; 0x24
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d14:	2380      	movs	r3, #128	; 0x80
     d16:	00db      	lsls	r3, r3, #3
     d18:	469b      	mov	fp, r3
     d1a:	2394      	movs	r3, #148	; 0x94
     d1c:	465a      	mov	r2, fp
     d1e:	50f2      	str	r2, [r6, r3]

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     d20:	2182      	movs	r1, #130	; 0x82
     d22:	2000      	movs	r0, #0
     d24:	4d99      	ldr	r5, [pc, #612]	; (f8c <sampleTick+0x330>)
     d26:	47a8      	blx	r5
    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
     d28:	21ff      	movs	r1, #255	; 0xff
     d2a:	2000      	movs	r0, #0
     d2c:	47a8      	blx	r5
     d2e:	2341      	movs	r3, #65	; 0x41
     d30:	4698      	mov	r8, r3
     d32:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
     d34:	21ff      	movs	r1, #255	; 0xff
     d36:	2000      	movs	r0, #0
     d38:	47a8      	blx	r5
     d3a:	2340      	movs	r3, #64	; 0x40
     d3c:	469a      	mov	sl, r3
     d3e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
     d40:	21ff      	movs	r1, #255	; 0xff
     d42:	2000      	movs	r0, #0
     d44:	47a8      	blx	r5
     d46:	2745      	movs	r7, #69	; 0x45
     d48:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
     d4a:	21ff      	movs	r1, #255	; 0xff
     d4c:	2000      	movs	r0, #0
     d4e:	47a8      	blx	r5
     d50:	2344      	movs	r3, #68	; 0x44
     d52:	4699      	mov	r9, r3
     d54:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
     d56:	21ff      	movs	r1, #255	; 0xff
     d58:	2000      	movs	r0, #0
     d5a:	47a8      	blx	r5
     d5c:	2349      	movs	r3, #73	; 0x49
     d5e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
     d60:	21ff      	movs	r1, #255	; 0xff
     d62:	2000      	movs	r0, #0
     d64:	47a8      	blx	r5
     d66:	2348      	movs	r3, #72	; 0x48
     d68:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d6a:	2298      	movs	r2, #152	; 0x98
     d6c:	4659      	mov	r1, fp
     d6e:	50b1      	str	r1, [r6, r2]
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
     d70:	4652      	mov	r2, sl
     d72:	5ca0      	ldrb	r0, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
     d74:	464a      	mov	r2, r9
     d76:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
     d78:	5ce2      	ldrb	r2, [r4, r3]

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
     d7a:	0203      	lsls	r3, r0, #8
     d7c:	4645      	mov	r5, r8
     d7e:	5d65      	ldrb	r5, [r4, r5]
     d80:	431d      	orrs	r5, r3
     d82:	b22d      	sxth	r5, r5
     d84:	2342      	movs	r3, #66	; 0x42
     d86:	52e5      	strh	r5, [r4, r3]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
     d88:	020b      	lsls	r3, r1, #8
     d8a:	5de6      	ldrb	r6, [r4, r7]
     d8c:	4333      	orrs	r3, r6
     d8e:	b21e      	sxth	r6, r3
     d90:	2346      	movs	r3, #70	; 0x46
     d92:	52e6      	strh	r6, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
     d94:	0213      	lsls	r3, r2, #8
     d96:	3704      	adds	r7, #4
     d98:	5de7      	ldrb	r7, [r4, r7]
     d9a:	433b      	orrs	r3, r7
     d9c:	b21b      	sxth	r3, r3
     d9e:	274a      	movs	r7, #74	; 0x4a
     da0:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
     da2:	2801      	cmp	r0, #1
     da4:	d009      	beq.n	dba <sampleTick+0x15e>
        if (negativeX) {
     da6:	b240      	sxtb	r0, r0
     da8:	2800      	cmp	r0, #0
     daa:	da03      	bge.n	db4 <sampleTick+0x158>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     dac:	112d      	asrs	r5, r5, #4
     dae:	2042      	movs	r0, #66	; 0x42
     db0:	5225      	strh	r5, [r4, r0]
     db2:	e002      	b.n	dba <sampleTick+0x15e>
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     db4:	112d      	asrs	r5, r5, #4
     db6:	2042      	movs	r0, #66	; 0x42
     db8:	5225      	strh	r5, [r4, r0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
     dba:	2901      	cmp	r1, #1
     dbc:	d009      	beq.n	dd2 <sampleTick+0x176>
        if (negativeY) {
     dbe:	b249      	sxtb	r1, r1
     dc0:	2900      	cmp	r1, #0
     dc2:	da03      	bge.n	dcc <sampleTick+0x170>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     dc4:	1136      	asrs	r6, r6, #4
     dc6:	2146      	movs	r1, #70	; 0x46
     dc8:	5266      	strh	r6, [r4, r1]
     dca:	e002      	b.n	dd2 <sampleTick+0x176>
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     dcc:	1136      	asrs	r6, r6, #4
     dce:	2146      	movs	r1, #70	; 0x46
     dd0:	5266      	strh	r6, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
     dd2:	2a01      	cmp	r2, #1
     dd4:	d009      	beq.n	dea <sampleTick+0x18e>
        if (negativeZ) {
     dd6:	b252      	sxtb	r2, r2
     dd8:	2a00      	cmp	r2, #0
     dda:	da03      	bge.n	de4 <sampleTick+0x188>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     ddc:	111b      	asrs	r3, r3, #4
     dde:	224a      	movs	r2, #74	; 0x4a
     de0:	52a3      	strh	r3, [r4, r2]
     de2:	e002      	b.n	dea <sampleTick+0x18e>
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     de4:	111b      	asrs	r3, r3, #4
     de6:	224a      	movs	r2, #74	; 0x4a
     de8:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
     dea:	2342      	movs	r3, #66	; 0x42
     dec:	5ee0      	ldrsh	r0, [r4, r3]
     dee:	4f56      	ldr	r7, [pc, #344]	; (f48 <sampleTick+0x2ec>)
     df0:	47b8      	blx	r7
     df2:	4e56      	ldr	r6, [pc, #344]	; (f4c <sampleTick+0x2f0>)
     df4:	4a66      	ldr	r2, [pc, #408]	; (f90 <sampleTick+0x334>)
     df6:	4b67      	ldr	r3, [pc, #412]	; (f94 <sampleTick+0x338>)
     df8:	47b0      	blx	r6
     dfa:	4d57      	ldr	r5, [pc, #348]	; (f58 <sampleTick+0x2fc>)
     dfc:	47a8      	blx	r5
     dfe:	62a0      	str	r0, [r4, #40]	; 0x28
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
     e00:	2346      	movs	r3, #70	; 0x46
     e02:	5ee0      	ldrsh	r0, [r4, r3]
     e04:	47b8      	blx	r7
     e06:	4a62      	ldr	r2, [pc, #392]	; (f90 <sampleTick+0x334>)
     e08:	4b62      	ldr	r3, [pc, #392]	; (f94 <sampleTick+0x338>)
     e0a:	47b0      	blx	r6
     e0c:	47a8      	blx	r5
     e0e:	62e0      	str	r0, [r4, #44]	; 0x2c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
     e10:	234a      	movs	r3, #74	; 0x4a
     e12:	5ee0      	ldrsh	r0, [r4, r3]
     e14:	47b8      	blx	r7
     e16:	4a5e      	ldr	r2, [pc, #376]	; (f90 <sampleTick+0x334>)
     e18:	4b5e      	ldr	r3, [pc, #376]	; (f94 <sampleTick+0x338>)
     e1a:	47b0      	blx	r6
     e1c:	47a8      	blx	r5
     e1e:	6320      	str	r0, [r4, #48]	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e20:	4b51      	ldr	r3, [pc, #324]	; (f68 <sampleTick+0x30c>)
     e22:	469a      	mov	sl, r3
     e24:	2380      	movs	r3, #128	; 0x80
     e26:	00db      	lsls	r3, r3, #3
     e28:	469b      	mov	fp, r3
     e2a:	4653      	mov	r3, sl
     e2c:	465a      	mov	r2, fp
     e2e:	615a      	str	r2, [r3, #20]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     e30:	2182      	movs	r1, #130	; 0x82
     e32:	2000      	movs	r0, #0
     e34:	4d55      	ldr	r5, [pc, #340]	; (f8c <sampleTick+0x330>)
     e36:	47a8      	blx	r5
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
     e38:	21ff      	movs	r1, #255	; 0xff
     e3a:	2000      	movs	r0, #0
     e3c:	47a8      	blx	r5
     e3e:	274d      	movs	r7, #77	; 0x4d
     e40:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
     e42:	21ff      	movs	r1, #255	; 0xff
     e44:	2000      	movs	r0, #0
     e46:	47a8      	blx	r5
     e48:	234c      	movs	r3, #76	; 0x4c
     e4a:	4699      	mov	r9, r3
     e4c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
     e4e:	21ff      	movs	r1, #255	; 0xff
     e50:	2000      	movs	r0, #0
     e52:	47a8      	blx	r5
     e54:	2651      	movs	r6, #81	; 0x51
     e56:	55a0      	strb	r0, [r4, r6]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
     e58:	21ff      	movs	r1, #255	; 0xff
     e5a:	2000      	movs	r0, #0
     e5c:	47a8      	blx	r5
     e5e:	2350      	movs	r3, #80	; 0x50
     e60:	4698      	mov	r8, r3
     e62:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
     e64:	21ff      	movs	r1, #255	; 0xff
     e66:	2000      	movs	r0, #0
     e68:	47a8      	blx	r5
     e6a:	2355      	movs	r3, #85	; 0x55
     e6c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
     e6e:	21ff      	movs	r1, #255	; 0xff
     e70:	2000      	movs	r0, #0
     e72:	47a8      	blx	r5
     e74:	2354      	movs	r3, #84	; 0x54
     e76:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e78:	4652      	mov	r2, sl
     e7a:	4659      	mov	r1, fp
     e7c:	6191      	str	r1, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
     e7e:	464a      	mov	r2, r9
     e80:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
     e82:	4642      	mov	r2, r8
     e84:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;
     e86:	5ce5      	ldrb	r5, [r4, r3]
     e88:	b26b      	sxtb	r3, r5
     e8a:	469c      	mov	ip, r3

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
     e8c:	020b      	lsls	r3, r1, #8
     e8e:	5de7      	ldrb	r7, [r4, r7]
     e90:	431f      	orrs	r7, r3
     e92:	b23f      	sxth	r7, r7
     e94:	234e      	movs	r3, #78	; 0x4e
     e96:	52e7      	strh	r7, [r4, r3]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
     e98:	0213      	lsls	r3, r2, #8
     e9a:	5da0      	ldrb	r0, [r4, r6]
     e9c:	4318      	orrs	r0, r3
     e9e:	b200      	sxth	r0, r0
     ea0:	2352      	movs	r3, #82	; 0x52
     ea2:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
     ea4:	022b      	lsls	r3, r5, #8
     ea6:	3604      	adds	r6, #4
     ea8:	5da6      	ldrb	r6, [r4, r6]
     eaa:	4333      	orrs	r3, r6
     eac:	b21b      	sxth	r3, r3
     eae:	2656      	movs	r6, #86	; 0x56
     eb0:	53a3      	strh	r3, [r4, r6]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
     eb2:	2901      	cmp	r1, #1
     eb4:	d009      	beq.n	eca <sampleTick+0x26e>
        if (negativeXgyro) {
     eb6:	b249      	sxtb	r1, r1
     eb8:	2900      	cmp	r1, #0
     eba:	da03      	bge.n	ec4 <sampleTick+0x268>
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
     ebc:	113f      	asrs	r7, r7, #4
     ebe:	214e      	movs	r1, #78	; 0x4e
     ec0:	5267      	strh	r7, [r4, r1]
     ec2:	e002      	b.n	eca <sampleTick+0x26e>
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
     ec4:	113f      	asrs	r7, r7, #4
     ec6:	214e      	movs	r1, #78	; 0x4e
     ec8:	5267      	strh	r7, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
     eca:	2a01      	cmp	r2, #1
     ecc:	d009      	beq.n	ee2 <sampleTick+0x286>
        if (negativeYgyro) {
     ece:	b252      	sxtb	r2, r2
     ed0:	2a00      	cmp	r2, #0
     ed2:	da03      	bge.n	edc <sampleTick+0x280>
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
     ed4:	1100      	asrs	r0, r0, #4
     ed6:	2252      	movs	r2, #82	; 0x52
     ed8:	52a0      	strh	r0, [r4, r2]
     eda:	e002      	b.n	ee2 <sampleTick+0x286>
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
     edc:	1100      	asrs	r0, r0, #4
     ede:	2252      	movs	r2, #82	; 0x52
     ee0:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
     ee2:	2d01      	cmp	r5, #1
     ee4:	d009      	beq.n	efa <sampleTick+0x29e>
        if (negativeZgyro) {
     ee6:	4662      	mov	r2, ip
     ee8:	2a00      	cmp	r2, #0
     eea:	da03      	bge.n	ef4 <sampleTick+0x298>
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
     eec:	111b      	asrs	r3, r3, #4
     eee:	2256      	movs	r2, #86	; 0x56
     ef0:	52a3      	strh	r3, [r4, r2]
     ef2:	e002      	b.n	efa <sampleTick+0x29e>
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
     ef4:	111b      	asrs	r3, r3, #4
     ef6:	2256      	movs	r2, #86	; 0x56
     ef8:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
     efa:	234e      	movs	r3, #78	; 0x4e
     efc:	5ee0      	ldrsh	r0, [r4, r3]
     efe:	4f12      	ldr	r7, [pc, #72]	; (f48 <sampleTick+0x2ec>)
     f00:	47b8      	blx	r7
     f02:	4e12      	ldr	r6, [pc, #72]	; (f4c <sampleTick+0x2f0>)
     f04:	4a22      	ldr	r2, [pc, #136]	; (f90 <sampleTick+0x334>)
     f06:	4b23      	ldr	r3, [pc, #140]	; (f94 <sampleTick+0x338>)
     f08:	47b0      	blx	r6
     f0a:	4d13      	ldr	r5, [pc, #76]	; (f58 <sampleTick+0x2fc>)
     f0c:	47a8      	blx	r5
     f0e:	6360      	str	r0, [r4, #52]	; 0x34
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
     f10:	2352      	movs	r3, #82	; 0x52
     f12:	5ee0      	ldrsh	r0, [r4, r3]
     f14:	47b8      	blx	r7
     f16:	4a1e      	ldr	r2, [pc, #120]	; (f90 <sampleTick+0x334>)
     f18:	4b1e      	ldr	r3, [pc, #120]	; (f94 <sampleTick+0x338>)
     f1a:	47b0      	blx	r6
     f1c:	47a8      	blx	r5
     f1e:	63a0      	str	r0, [r4, #56]	; 0x38
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
     f20:	2356      	movs	r3, #86	; 0x56
     f22:	5ee0      	ldrsh	r0, [r4, r3]
     f24:	47b8      	blx	r7
     f26:	4a1a      	ldr	r2, [pc, #104]	; (f90 <sampleTick+0x334>)
     f28:	4b1a      	ldr	r3, [pc, #104]	; (f94 <sampleTick+0x338>)
     f2a:	47b0      	blx	r6
     f2c:	47a8      	blx	r5
     f2e:	63e0      	str	r0, [r4, #60]	; 0x3c


}
     f30:	b003      	add	sp, #12
     f32:	bc3c      	pop	{r2, r3, r4, r5}
     f34:	4690      	mov	r8, r2
     f36:	4699      	mov	r9, r3
     f38:	46a2      	mov	sl, r4
     f3a:	46ab      	mov	fp, r5
     f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	0000249c 	.word	0x0000249c
     f44:	000005e9 	.word	0x000005e9
     f48:	00001ecd 	.word	0x00001ecd
     f4c:	000019d9 	.word	0x000019d9
     f50:	eaa2a0a9 	.word	0xeaa2a0a9
     f54:	3f5f3a57 	.word	0x3f5f3a57
     f58:	00001ff9 	.word	0x00001ff9
     f5c:	fffff0da 	.word	0xfffff0da
     f60:	367a0f91 	.word	0x367a0f91
     f64:	bf973eab 	.word	0xbf973eab
     f68:	41004400 	.word	0x41004400
     f6c:	00000669 	.word	0x00000669
     f70:	000008a9 	.word	0x000008a9
     f74:	0000098d 	.word	0x0000098d
     f78:	00000a01 	.word	0x00000a01
     f7c:	00000af9 	.word	0x00000af9
     f80:	00001f51 	.word	0x00001f51
     f84:	e9f6a93f 	.word	0xe9f6a93f
     f88:	3fa0cc78 	.word	0x3fa0cc78
     f8c:	00001079 	.word	0x00001079
     f90:	e94ee393 	.word	0xe94ee393
     f94:	3f7ffd60 	.word	0x3f7ffd60

00000f98 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	0004      	movs	r4, r0
     f9c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     f9e:	480e      	ldr	r0, [pc, #56]	; (fd8 <sercomClockEnable+0x40>)
     fa0:	6a01      	ldr	r1, [r0, #32]
     fa2:	1ca6      	adds	r6, r4, #2
     fa4:	2301      	movs	r3, #1
     fa6:	40b3      	lsls	r3, r6
     fa8:	430b      	orrs	r3, r1
     faa:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     fac:	2d00      	cmp	r5, #0
     fae:	d003      	beq.n	fb8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     fb0:	2107      	movs	r1, #7
     fb2:	0028      	movs	r0, r5
     fb4:	4b09      	ldr	r3, [pc, #36]	; (fdc <sercomClockEnable+0x44>)
     fb6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     fb8:	0229      	lsls	r1, r5, #8
     fba:	23f0      	movs	r3, #240	; 0xf0
     fbc:	011b      	lsls	r3, r3, #4
     fbe:	4019      	ands	r1, r3
     fc0:	2380      	movs	r3, #128	; 0x80
     fc2:	01db      	lsls	r3, r3, #7
     fc4:	4319      	orrs	r1, r3
     fc6:	0023      	movs	r3, r4
     fc8:	3314      	adds	r3, #20
     fca:	243f      	movs	r4, #63	; 0x3f
     fcc:	401c      	ands	r4, r3
     fce:	430c      	orrs	r4, r1
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <sercomClockEnable+0x48>)
     fd2:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     fd4:	bd70      	pop	{r4, r5, r6, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	40000400 	.word	0x40000400
     fdc:	0000082d 	.word	0x0000082d
     fe0:	40000c00 	.word	0x40000c00

00000fe4 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
     fe4:	0280      	lsls	r0, r0, #10
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <sercomReset+0x18>)
     fe8:	469c      	mov	ip, r3
     fea:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     fec:	2301      	movs	r3, #1
     fee:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     ff0:	2201      	movs	r2, #1
     ff2:	6803      	ldr	r3, [r0, #0]
     ff4:	421a      	tst	r2, r3
     ff6:	d1fc      	bne.n	ff2 <sercomReset+0xe>
}
     ff8:	4770      	bx	lr
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	42000800 	.word	0x42000800

00001000 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1002:	464f      	mov	r7, r9
    1004:	4646      	mov	r6, r8
    1006:	b4c0      	push	{r6, r7}
    1008:	0006      	movs	r6, r0
    100a:	4688      	mov	r8, r1
    100c:	0017      	movs	r7, r2
    100e:	001d      	movs	r5, r3
    1010:	ab08      	add	r3, sp, #32
    1012:	781c      	ldrb	r4, [r3, #0]
    1014:	ab09      	add	r3, sp, #36	; 0x24
    1016:	781b      	ldrb	r3, [r3, #0]
    1018:	4699      	mov	r9, r3
		
    sercomReset(id);
    101a:	4b15      	ldr	r3, [pc, #84]	; (1070 <sercomSpiMasterInit+0x70>)
    101c:	4798      	blx	r3
    101e:	02b0      	lsls	r0, r6, #10
    1020:	4b14      	ldr	r3, [pc, #80]	; (1074 <sercomSpiMasterInit+0x74>)
    1022:	469c      	mov	ip, r3
    1024:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1026:	2380      	movs	r3, #128	; 0x80
    1028:	029b      	lsls	r3, r3, #10
    102a:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
    102c:	464b      	mov	r3, r9
    102e:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1030:	4643      	mov	r3, r8
    1032:	0519      	lsls	r1, r3, #20
    1034:	23c0      	movs	r3, #192	; 0xc0
    1036:	039b      	lsls	r3, r3, #14
    1038:	4019      	ands	r1, r3
    103a:	000e      	movs	r6, r1
    103c:	0439      	lsls	r1, r7, #16
    103e:	23c0      	movs	r3, #192	; 0xc0
    1040:	029b      	lsls	r3, r3, #10
    1042:	4019      	ands	r1, r3
    1044:	230e      	movs	r3, #14
    1046:	000a      	movs	r2, r1
    1048:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    104a:	1e6b      	subs	r3, r5, #1
    104c:	419d      	sbcs	r5, r3
    104e:	076d      	lsls	r5, r5, #29
    1050:	0031      	movs	r1, r6
    1052:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1054:	1e63      	subs	r3, r4, #1
    1056:	419c      	sbcs	r4, r3
    1058:	0722      	lsls	r2, r4, #28
    105a:	002c      	movs	r4, r5
    105c:	430c      	orrs	r4, r1
    105e:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1060:	6004      	str	r4, [r0, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1062:	69c3      	ldr	r3, [r0, #28]
    1064:	075b      	lsls	r3, r3, #29
    1066:	d4fc      	bmi.n	1062 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1068:	bc0c      	pop	{r2, r3}
    106a:	4690      	mov	r8, r2
    106c:	4699      	mov	r9, r3
    106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1070:	00000fe5 	.word	0x00000fe5
    1074:	42000800 	.word	0x42000800

00001078 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1078:	0280      	lsls	r0, r0, #10
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <spiDataTransfer+0x18>)
    107c:	469c      	mov	ip, r3
    107e:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1080:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1082:	7e03      	ldrb	r3, [r0, #24]
    1084:	075b      	lsls	r3, r3, #29
    1086:	d5fc      	bpl.n	1082 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
    1088:	6a80      	ldr	r0, [r0, #40]	; 0x28
    108a:	b2c0      	uxtb	r0, r0
}
    108c:	4770      	bx	lr
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	42000800 	.word	0x42000800

00001094 <__aeabi_lmul>:
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	464f      	mov	r7, r9
    1098:	4646      	mov	r6, r8
    109a:	b4c0      	push	{r6, r7}
    109c:	0416      	lsls	r6, r2, #16
    109e:	0c36      	lsrs	r6, r6, #16
    10a0:	4699      	mov	r9, r3
    10a2:	0033      	movs	r3, r6
    10a4:	0405      	lsls	r5, r0, #16
    10a6:	0c2c      	lsrs	r4, r5, #16
    10a8:	0c07      	lsrs	r7, r0, #16
    10aa:	0c15      	lsrs	r5, r2, #16
    10ac:	4363      	muls	r3, r4
    10ae:	437e      	muls	r6, r7
    10b0:	436f      	muls	r7, r5
    10b2:	4365      	muls	r5, r4
    10b4:	0c1c      	lsrs	r4, r3, #16
    10b6:	19ad      	adds	r5, r5, r6
    10b8:	1964      	adds	r4, r4, r5
    10ba:	469c      	mov	ip, r3
    10bc:	42a6      	cmp	r6, r4
    10be:	d903      	bls.n	10c8 <__aeabi_lmul+0x34>
    10c0:	2380      	movs	r3, #128	; 0x80
    10c2:	025b      	lsls	r3, r3, #9
    10c4:	4698      	mov	r8, r3
    10c6:	4447      	add	r7, r8
    10c8:	4663      	mov	r3, ip
    10ca:	0c25      	lsrs	r5, r4, #16
    10cc:	19ef      	adds	r7, r5, r7
    10ce:	041d      	lsls	r5, r3, #16
    10d0:	464b      	mov	r3, r9
    10d2:	434a      	muls	r2, r1
    10d4:	4343      	muls	r3, r0
    10d6:	0c2d      	lsrs	r5, r5, #16
    10d8:	0424      	lsls	r4, r4, #16
    10da:	1964      	adds	r4, r4, r5
    10dc:	1899      	adds	r1, r3, r2
    10de:	19c9      	adds	r1, r1, r7
    10e0:	0020      	movs	r0, r4
    10e2:	bc0c      	pop	{r2, r3}
    10e4:	4690      	mov	r8, r2
    10e6:	4699      	mov	r9, r3
    10e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ea:	46c0      	nop			; (mov r8, r8)

000010ec <__aeabi_fadd>:
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ee:	024a      	lsls	r2, r1, #9
    10f0:	0243      	lsls	r3, r0, #9
    10f2:	0044      	lsls	r4, r0, #1
    10f4:	004e      	lsls	r6, r1, #1
    10f6:	0fc5      	lsrs	r5, r0, #31
    10f8:	0e24      	lsrs	r4, r4, #24
    10fa:	0028      	movs	r0, r5
    10fc:	099b      	lsrs	r3, r3, #6
    10fe:	0e36      	lsrs	r6, r6, #24
    1100:	0fc9      	lsrs	r1, r1, #31
    1102:	0992      	lsrs	r2, r2, #6
    1104:	428d      	cmp	r5, r1
    1106:	d059      	beq.n	11bc <__aeabi_fadd+0xd0>
    1108:	1ba0      	subs	r0, r4, r6
    110a:	2800      	cmp	r0, #0
    110c:	dc00      	bgt.n	1110 <__aeabi_fadd+0x24>
    110e:	e08d      	b.n	122c <__aeabi_fadd+0x140>
    1110:	2e00      	cmp	r6, #0
    1112:	d11a      	bne.n	114a <__aeabi_fadd+0x5e>
    1114:	2a00      	cmp	r2, #0
    1116:	d000      	beq.n	111a <__aeabi_fadd+0x2e>
    1118:	e079      	b.n	120e <__aeabi_fadd+0x122>
    111a:	075a      	lsls	r2, r3, #29
    111c:	d004      	beq.n	1128 <__aeabi_fadd+0x3c>
    111e:	220f      	movs	r2, #15
    1120:	401a      	ands	r2, r3
    1122:	2a04      	cmp	r2, #4
    1124:	d000      	beq.n	1128 <__aeabi_fadd+0x3c>
    1126:	3304      	adds	r3, #4
    1128:	015a      	lsls	r2, r3, #5
    112a:	d538      	bpl.n	119e <__aeabi_fadd+0xb2>
    112c:	3401      	adds	r4, #1
    112e:	2cff      	cmp	r4, #255	; 0xff
    1130:	d100      	bne.n	1134 <__aeabi_fadd+0x48>
    1132:	e089      	b.n	1248 <__aeabi_fadd+0x15c>
    1134:	0028      	movs	r0, r5
    1136:	019b      	lsls	r3, r3, #6
    1138:	0a5b      	lsrs	r3, r3, #9
    113a:	b2e4      	uxtb	r4, r4
    113c:	025b      	lsls	r3, r3, #9
    113e:	05e4      	lsls	r4, r4, #23
    1140:	0a5b      	lsrs	r3, r3, #9
    1142:	4323      	orrs	r3, r4
    1144:	07c0      	lsls	r0, r0, #31
    1146:	4318      	orrs	r0, r3
    1148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    114a:	2cff      	cmp	r4, #255	; 0xff
    114c:	d0e5      	beq.n	111a <__aeabi_fadd+0x2e>
    114e:	2180      	movs	r1, #128	; 0x80
    1150:	04c9      	lsls	r1, r1, #19
    1152:	430a      	orrs	r2, r1
    1154:	281b      	cmp	r0, #27
    1156:	dd00      	ble.n	115a <__aeabi_fadd+0x6e>
    1158:	e089      	b.n	126e <__aeabi_fadd+0x182>
    115a:	0016      	movs	r6, r2
    115c:	2120      	movs	r1, #32
    115e:	40c6      	lsrs	r6, r0
    1160:	1a08      	subs	r0, r1, r0
    1162:	4082      	lsls	r2, r0
    1164:	1e51      	subs	r1, r2, #1
    1166:	418a      	sbcs	r2, r1
    1168:	4332      	orrs	r2, r6
    116a:	1a9b      	subs	r3, r3, r2
    116c:	015a      	lsls	r2, r3, #5
    116e:	d514      	bpl.n	119a <__aeabi_fadd+0xae>
    1170:	019b      	lsls	r3, r3, #6
    1172:	099e      	lsrs	r6, r3, #6
    1174:	0030      	movs	r0, r6
    1176:	f000 ffcb 	bl	2110 <__clzsi2>
    117a:	3805      	subs	r0, #5
    117c:	4086      	lsls	r6, r0
    117e:	4284      	cmp	r4, r0
    1180:	dc65      	bgt.n	124e <__aeabi_fadd+0x162>
    1182:	1b04      	subs	r4, r0, r4
    1184:	0033      	movs	r3, r6
    1186:	2020      	movs	r0, #32
    1188:	3401      	adds	r4, #1
    118a:	40e3      	lsrs	r3, r4
    118c:	1b04      	subs	r4, r0, r4
    118e:	40a6      	lsls	r6, r4
    1190:	1e72      	subs	r2, r6, #1
    1192:	4196      	sbcs	r6, r2
    1194:	2400      	movs	r4, #0
    1196:	4333      	orrs	r3, r6
    1198:	e7bf      	b.n	111a <__aeabi_fadd+0x2e>
    119a:	075a      	lsls	r2, r3, #29
    119c:	d1bf      	bne.n	111e <__aeabi_fadd+0x32>
    119e:	08df      	lsrs	r7, r3, #3
    11a0:	0028      	movs	r0, r5
    11a2:	2cff      	cmp	r4, #255	; 0xff
    11a4:	d12f      	bne.n	1206 <__aeabi_fadd+0x11a>
    11a6:	2f00      	cmp	r7, #0
    11a8:	d100      	bne.n	11ac <__aeabi_fadd+0xc0>
    11aa:	e087      	b.n	12bc <__aeabi_fadd+0x1d0>
    11ac:	2280      	movs	r2, #128	; 0x80
    11ae:	03d2      	lsls	r2, r2, #15
    11b0:	0013      	movs	r3, r2
    11b2:	433b      	orrs	r3, r7
    11b4:	025b      	lsls	r3, r3, #9
    11b6:	0a5b      	lsrs	r3, r3, #9
    11b8:	24ff      	movs	r4, #255	; 0xff
    11ba:	e7bf      	b.n	113c <__aeabi_fadd+0x50>
    11bc:	1ba1      	subs	r1, r4, r6
    11be:	2900      	cmp	r1, #0
    11c0:	dd49      	ble.n	1256 <__aeabi_fadd+0x16a>
    11c2:	2e00      	cmp	r6, #0
    11c4:	d029      	beq.n	121a <__aeabi_fadd+0x12e>
    11c6:	2cff      	cmp	r4, #255	; 0xff
    11c8:	d0a7      	beq.n	111a <__aeabi_fadd+0x2e>
    11ca:	2680      	movs	r6, #128	; 0x80
    11cc:	04f6      	lsls	r6, r6, #19
    11ce:	4332      	orrs	r2, r6
    11d0:	291b      	cmp	r1, #27
    11d2:	dd00      	ble.n	11d6 <__aeabi_fadd+0xea>
    11d4:	e08d      	b.n	12f2 <__aeabi_fadd+0x206>
    11d6:	0017      	movs	r7, r2
    11d8:	2620      	movs	r6, #32
    11da:	40cf      	lsrs	r7, r1
    11dc:	1a71      	subs	r1, r6, r1
    11de:	408a      	lsls	r2, r1
    11e0:	1e51      	subs	r1, r2, #1
    11e2:	418a      	sbcs	r2, r1
    11e4:	433a      	orrs	r2, r7
    11e6:	189b      	adds	r3, r3, r2
    11e8:	015a      	lsls	r2, r3, #5
    11ea:	d5d6      	bpl.n	119a <__aeabi_fadd+0xae>
    11ec:	3401      	adds	r4, #1
    11ee:	2cff      	cmp	r4, #255	; 0xff
    11f0:	d064      	beq.n	12bc <__aeabi_fadd+0x1d0>
    11f2:	2201      	movs	r2, #1
    11f4:	4976      	ldr	r1, [pc, #472]	; (13d0 <__aeabi_fadd+0x2e4>)
    11f6:	401a      	ands	r2, r3
    11f8:	085b      	lsrs	r3, r3, #1
    11fa:	400b      	ands	r3, r1
    11fc:	4313      	orrs	r3, r2
    11fe:	e78c      	b.n	111a <__aeabi_fadd+0x2e>
    1200:	1e03      	subs	r3, r0, #0
    1202:	d1ca      	bne.n	119a <__aeabi_fadd+0xae>
    1204:	2000      	movs	r0, #0
    1206:	027b      	lsls	r3, r7, #9
    1208:	0a5b      	lsrs	r3, r3, #9
    120a:	b2e4      	uxtb	r4, r4
    120c:	e796      	b.n	113c <__aeabi_fadd+0x50>
    120e:	3801      	subs	r0, #1
    1210:	2800      	cmp	r0, #0
    1212:	d0aa      	beq.n	116a <__aeabi_fadd+0x7e>
    1214:	2cff      	cmp	r4, #255	; 0xff
    1216:	d19d      	bne.n	1154 <__aeabi_fadd+0x68>
    1218:	e77f      	b.n	111a <__aeabi_fadd+0x2e>
    121a:	2a00      	cmp	r2, #0
    121c:	d100      	bne.n	1220 <__aeabi_fadd+0x134>
    121e:	e77c      	b.n	111a <__aeabi_fadd+0x2e>
    1220:	3901      	subs	r1, #1
    1222:	2900      	cmp	r1, #0
    1224:	d0df      	beq.n	11e6 <__aeabi_fadd+0xfa>
    1226:	2cff      	cmp	r4, #255	; 0xff
    1228:	d1d2      	bne.n	11d0 <__aeabi_fadd+0xe4>
    122a:	e776      	b.n	111a <__aeabi_fadd+0x2e>
    122c:	2800      	cmp	r0, #0
    122e:	d120      	bne.n	1272 <__aeabi_fadd+0x186>
    1230:	1c60      	adds	r0, r4, #1
    1232:	b2c0      	uxtb	r0, r0
    1234:	2801      	cmp	r0, #1
    1236:	dd53      	ble.n	12e0 <__aeabi_fadd+0x1f4>
    1238:	2780      	movs	r7, #128	; 0x80
    123a:	1a9e      	subs	r6, r3, r2
    123c:	04ff      	lsls	r7, r7, #19
    123e:	4037      	ands	r7, r6
    1240:	d02f      	beq.n	12a2 <__aeabi_fadd+0x1b6>
    1242:	1ad6      	subs	r6, r2, r3
    1244:	000d      	movs	r5, r1
    1246:	e795      	b.n	1174 <__aeabi_fadd+0x88>
    1248:	0028      	movs	r0, r5
    124a:	2300      	movs	r3, #0
    124c:	e776      	b.n	113c <__aeabi_fadd+0x50>
    124e:	4b61      	ldr	r3, [pc, #388]	; (13d4 <__aeabi_fadd+0x2e8>)
    1250:	1a24      	subs	r4, r4, r0
    1252:	4033      	ands	r3, r6
    1254:	e761      	b.n	111a <__aeabi_fadd+0x2e>
    1256:	2900      	cmp	r1, #0
    1258:	d14d      	bne.n	12f6 <__aeabi_fadd+0x20a>
    125a:	1c61      	adds	r1, r4, #1
    125c:	b2ce      	uxtb	r6, r1
    125e:	2e01      	cmp	r6, #1
    1260:	dd2f      	ble.n	12c2 <__aeabi_fadd+0x1d6>
    1262:	29ff      	cmp	r1, #255	; 0xff
    1264:	d02a      	beq.n	12bc <__aeabi_fadd+0x1d0>
    1266:	189b      	adds	r3, r3, r2
    1268:	085b      	lsrs	r3, r3, #1
    126a:	000c      	movs	r4, r1
    126c:	e755      	b.n	111a <__aeabi_fadd+0x2e>
    126e:	2201      	movs	r2, #1
    1270:	e77b      	b.n	116a <__aeabi_fadd+0x7e>
    1272:	2c00      	cmp	r4, #0
    1274:	d11b      	bne.n	12ae <__aeabi_fadd+0x1c2>
    1276:	2b00      	cmp	r3, #0
    1278:	d05b      	beq.n	1332 <__aeabi_fadd+0x246>
    127a:	43c0      	mvns	r0, r0
    127c:	2800      	cmp	r0, #0
    127e:	d00c      	beq.n	129a <__aeabi_fadd+0x1ae>
    1280:	2eff      	cmp	r6, #255	; 0xff
    1282:	d07e      	beq.n	1382 <__aeabi_fadd+0x296>
    1284:	281b      	cmp	r0, #27
    1286:	dd00      	ble.n	128a <__aeabi_fadd+0x19e>
    1288:	e092      	b.n	13b0 <__aeabi_fadd+0x2c4>
    128a:	001d      	movs	r5, r3
    128c:	2420      	movs	r4, #32
    128e:	40c5      	lsrs	r5, r0
    1290:	1a20      	subs	r0, r4, r0
    1292:	4083      	lsls	r3, r0
    1294:	1e58      	subs	r0, r3, #1
    1296:	4183      	sbcs	r3, r0
    1298:	432b      	orrs	r3, r5
    129a:	1ad3      	subs	r3, r2, r3
    129c:	0034      	movs	r4, r6
    129e:	000d      	movs	r5, r1
    12a0:	e764      	b.n	116c <__aeabi_fadd+0x80>
    12a2:	2e00      	cmp	r6, #0
    12a4:	d000      	beq.n	12a8 <__aeabi_fadd+0x1bc>
    12a6:	e765      	b.n	1174 <__aeabi_fadd+0x88>
    12a8:	2000      	movs	r0, #0
    12aa:	2400      	movs	r4, #0
    12ac:	e7ab      	b.n	1206 <__aeabi_fadd+0x11a>
    12ae:	2eff      	cmp	r6, #255	; 0xff
    12b0:	d067      	beq.n	1382 <__aeabi_fadd+0x296>
    12b2:	2480      	movs	r4, #128	; 0x80
    12b4:	04e4      	lsls	r4, r4, #19
    12b6:	4240      	negs	r0, r0
    12b8:	4323      	orrs	r3, r4
    12ba:	e7e3      	b.n	1284 <__aeabi_fadd+0x198>
    12bc:	24ff      	movs	r4, #255	; 0xff
    12be:	2300      	movs	r3, #0
    12c0:	e73c      	b.n	113c <__aeabi_fadd+0x50>
    12c2:	2c00      	cmp	r4, #0
    12c4:	d161      	bne.n	138a <__aeabi_fadd+0x29e>
    12c6:	2b00      	cmp	r3, #0
    12c8:	d07e      	beq.n	13c8 <__aeabi_fadd+0x2dc>
    12ca:	2a00      	cmp	r2, #0
    12cc:	d100      	bne.n	12d0 <__aeabi_fadd+0x1e4>
    12ce:	e724      	b.n	111a <__aeabi_fadd+0x2e>
    12d0:	189b      	adds	r3, r3, r2
    12d2:	015a      	lsls	r2, r3, #5
    12d4:	d400      	bmi.n	12d8 <__aeabi_fadd+0x1ec>
    12d6:	e760      	b.n	119a <__aeabi_fadd+0xae>
    12d8:	4a3e      	ldr	r2, [pc, #248]	; (13d4 <__aeabi_fadd+0x2e8>)
    12da:	000c      	movs	r4, r1
    12dc:	4013      	ands	r3, r2
    12de:	e71c      	b.n	111a <__aeabi_fadd+0x2e>
    12e0:	2c00      	cmp	r4, #0
    12e2:	d11e      	bne.n	1322 <__aeabi_fadd+0x236>
    12e4:	2b00      	cmp	r3, #0
    12e6:	d12f      	bne.n	1348 <__aeabi_fadd+0x25c>
    12e8:	2a00      	cmp	r2, #0
    12ea:	d066      	beq.n	13ba <__aeabi_fadd+0x2ce>
    12ec:	0013      	movs	r3, r2
    12ee:	000d      	movs	r5, r1
    12f0:	e713      	b.n	111a <__aeabi_fadd+0x2e>
    12f2:	2201      	movs	r2, #1
    12f4:	e777      	b.n	11e6 <__aeabi_fadd+0xfa>
    12f6:	2c00      	cmp	r4, #0
    12f8:	d11f      	bne.n	133a <__aeabi_fadd+0x24e>
    12fa:	2b00      	cmp	r3, #0
    12fc:	d05a      	beq.n	13b4 <__aeabi_fadd+0x2c8>
    12fe:	43c9      	mvns	r1, r1
    1300:	2900      	cmp	r1, #0
    1302:	d00b      	beq.n	131c <__aeabi_fadd+0x230>
    1304:	2eff      	cmp	r6, #255	; 0xff
    1306:	d050      	beq.n	13aa <__aeabi_fadd+0x2be>
    1308:	291b      	cmp	r1, #27
    130a:	dc5f      	bgt.n	13cc <__aeabi_fadd+0x2e0>
    130c:	001f      	movs	r7, r3
    130e:	2420      	movs	r4, #32
    1310:	40cf      	lsrs	r7, r1
    1312:	1a61      	subs	r1, r4, r1
    1314:	408b      	lsls	r3, r1
    1316:	1e59      	subs	r1, r3, #1
    1318:	418b      	sbcs	r3, r1
    131a:	433b      	orrs	r3, r7
    131c:	189b      	adds	r3, r3, r2
    131e:	0034      	movs	r4, r6
    1320:	e762      	b.n	11e8 <__aeabi_fadd+0xfc>
    1322:	2b00      	cmp	r3, #0
    1324:	d11c      	bne.n	1360 <__aeabi_fadd+0x274>
    1326:	2a00      	cmp	r2, #0
    1328:	d04a      	beq.n	13c0 <__aeabi_fadd+0x2d4>
    132a:	0013      	movs	r3, r2
    132c:	000d      	movs	r5, r1
    132e:	24ff      	movs	r4, #255	; 0xff
    1330:	e6f3      	b.n	111a <__aeabi_fadd+0x2e>
    1332:	0013      	movs	r3, r2
    1334:	0034      	movs	r4, r6
    1336:	000d      	movs	r5, r1
    1338:	e6ef      	b.n	111a <__aeabi_fadd+0x2e>
    133a:	2eff      	cmp	r6, #255	; 0xff
    133c:	d035      	beq.n	13aa <__aeabi_fadd+0x2be>
    133e:	2480      	movs	r4, #128	; 0x80
    1340:	04e4      	lsls	r4, r4, #19
    1342:	4249      	negs	r1, r1
    1344:	4323      	orrs	r3, r4
    1346:	e7df      	b.n	1308 <__aeabi_fadd+0x21c>
    1348:	2a00      	cmp	r2, #0
    134a:	d100      	bne.n	134e <__aeabi_fadd+0x262>
    134c:	e6e5      	b.n	111a <__aeabi_fadd+0x2e>
    134e:	2780      	movs	r7, #128	; 0x80
    1350:	1a98      	subs	r0, r3, r2
    1352:	04ff      	lsls	r7, r7, #19
    1354:	4007      	ands	r7, r0
    1356:	d100      	bne.n	135a <__aeabi_fadd+0x26e>
    1358:	e752      	b.n	1200 <__aeabi_fadd+0x114>
    135a:	1ad3      	subs	r3, r2, r3
    135c:	000d      	movs	r5, r1
    135e:	e6dc      	b.n	111a <__aeabi_fadd+0x2e>
    1360:	24ff      	movs	r4, #255	; 0xff
    1362:	2a00      	cmp	r2, #0
    1364:	d100      	bne.n	1368 <__aeabi_fadd+0x27c>
    1366:	e6d8      	b.n	111a <__aeabi_fadd+0x2e>
    1368:	2080      	movs	r0, #128	; 0x80
    136a:	08db      	lsrs	r3, r3, #3
    136c:	03c0      	lsls	r0, r0, #15
    136e:	4203      	tst	r3, r0
    1370:	d004      	beq.n	137c <__aeabi_fadd+0x290>
    1372:	08d2      	lsrs	r2, r2, #3
    1374:	4202      	tst	r2, r0
    1376:	d101      	bne.n	137c <__aeabi_fadd+0x290>
    1378:	0013      	movs	r3, r2
    137a:	000d      	movs	r5, r1
    137c:	00db      	lsls	r3, r3, #3
    137e:	24ff      	movs	r4, #255	; 0xff
    1380:	e6cb      	b.n	111a <__aeabi_fadd+0x2e>
    1382:	0013      	movs	r3, r2
    1384:	24ff      	movs	r4, #255	; 0xff
    1386:	000d      	movs	r5, r1
    1388:	e6c7      	b.n	111a <__aeabi_fadd+0x2e>
    138a:	2b00      	cmp	r3, #0
    138c:	d00d      	beq.n	13aa <__aeabi_fadd+0x2be>
    138e:	24ff      	movs	r4, #255	; 0xff
    1390:	2a00      	cmp	r2, #0
    1392:	d100      	bne.n	1396 <__aeabi_fadd+0x2aa>
    1394:	e6c1      	b.n	111a <__aeabi_fadd+0x2e>
    1396:	2180      	movs	r1, #128	; 0x80
    1398:	08db      	lsrs	r3, r3, #3
    139a:	03c9      	lsls	r1, r1, #15
    139c:	420b      	tst	r3, r1
    139e:	d0ed      	beq.n	137c <__aeabi_fadd+0x290>
    13a0:	08d2      	lsrs	r2, r2, #3
    13a2:	420a      	tst	r2, r1
    13a4:	d1ea      	bne.n	137c <__aeabi_fadd+0x290>
    13a6:	0013      	movs	r3, r2
    13a8:	e7e8      	b.n	137c <__aeabi_fadd+0x290>
    13aa:	0013      	movs	r3, r2
    13ac:	24ff      	movs	r4, #255	; 0xff
    13ae:	e6b4      	b.n	111a <__aeabi_fadd+0x2e>
    13b0:	2301      	movs	r3, #1
    13b2:	e772      	b.n	129a <__aeabi_fadd+0x1ae>
    13b4:	0013      	movs	r3, r2
    13b6:	0034      	movs	r4, r6
    13b8:	e6af      	b.n	111a <__aeabi_fadd+0x2e>
    13ba:	2700      	movs	r7, #0
    13bc:	2000      	movs	r0, #0
    13be:	e722      	b.n	1206 <__aeabi_fadd+0x11a>
    13c0:	2780      	movs	r7, #128	; 0x80
    13c2:	2000      	movs	r0, #0
    13c4:	03ff      	lsls	r7, r7, #15
    13c6:	e6f1      	b.n	11ac <__aeabi_fadd+0xc0>
    13c8:	0013      	movs	r3, r2
    13ca:	e6a6      	b.n	111a <__aeabi_fadd+0x2e>
    13cc:	2301      	movs	r3, #1
    13ce:	e7a5      	b.n	131c <__aeabi_fadd+0x230>
    13d0:	7dffffff 	.word	0x7dffffff
    13d4:	fbffffff 	.word	0xfbffffff

000013d8 <__aeabi_fdiv>:
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	4656      	mov	r6, sl
    13dc:	4644      	mov	r4, r8
    13de:	465f      	mov	r7, fp
    13e0:	464d      	mov	r5, r9
    13e2:	b4f0      	push	{r4, r5, r6, r7}
    13e4:	0244      	lsls	r4, r0, #9
    13e6:	0046      	lsls	r6, r0, #1
    13e8:	0fc7      	lsrs	r7, r0, #31
    13ea:	b083      	sub	sp, #12
    13ec:	4688      	mov	r8, r1
    13ee:	0a65      	lsrs	r5, r4, #9
    13f0:	0e36      	lsrs	r6, r6, #24
    13f2:	46ba      	mov	sl, r7
    13f4:	d03d      	beq.n	1472 <__aeabi_fdiv+0x9a>
    13f6:	2eff      	cmp	r6, #255	; 0xff
    13f8:	d022      	beq.n	1440 <__aeabi_fdiv+0x68>
    13fa:	2300      	movs	r3, #0
    13fc:	00ec      	lsls	r4, r5, #3
    13fe:	2580      	movs	r5, #128	; 0x80
    1400:	4699      	mov	r9, r3
    1402:	469b      	mov	fp, r3
    1404:	04ed      	lsls	r5, r5, #19
    1406:	4325      	orrs	r5, r4
    1408:	3e7f      	subs	r6, #127	; 0x7f
    140a:	4643      	mov	r3, r8
    140c:	025c      	lsls	r4, r3, #9
    140e:	0058      	lsls	r0, r3, #1
    1410:	0fdb      	lsrs	r3, r3, #31
    1412:	0a64      	lsrs	r4, r4, #9
    1414:	0e00      	lsrs	r0, r0, #24
    1416:	4698      	mov	r8, r3
    1418:	d036      	beq.n	1488 <__aeabi_fdiv+0xb0>
    141a:	28ff      	cmp	r0, #255	; 0xff
    141c:	d030      	beq.n	1480 <__aeabi_fdiv+0xa8>
    141e:	2380      	movs	r3, #128	; 0x80
    1420:	2100      	movs	r1, #0
    1422:	00e4      	lsls	r4, r4, #3
    1424:	04db      	lsls	r3, r3, #19
    1426:	431c      	orrs	r4, r3
    1428:	387f      	subs	r0, #127	; 0x7f
    142a:	1a30      	subs	r0, r6, r0
    142c:	9001      	str	r0, [sp, #4]
    142e:	4648      	mov	r0, r9
    1430:	4642      	mov	r2, r8
    1432:	4308      	orrs	r0, r1
    1434:	4e72      	ldr	r6, [pc, #456]	; (1600 <__aeabi_fdiv+0x228>)
    1436:	0080      	lsls	r0, r0, #2
    1438:	5830      	ldr	r0, [r6, r0]
    143a:	407a      	eors	r2, r7
    143c:	0013      	movs	r3, r2
    143e:	4687      	mov	pc, r0
    1440:	2d00      	cmp	r5, #0
    1442:	d144      	bne.n	14ce <__aeabi_fdiv+0xf6>
    1444:	2308      	movs	r3, #8
    1446:	4699      	mov	r9, r3
    1448:	3b06      	subs	r3, #6
    144a:	469b      	mov	fp, r3
    144c:	e7dd      	b.n	140a <__aeabi_fdiv+0x32>
    144e:	2201      	movs	r2, #1
    1450:	20ff      	movs	r0, #255	; 0xff
    1452:	2400      	movs	r4, #0
    1454:	401a      	ands	r2, r3
    1456:	0264      	lsls	r4, r4, #9
    1458:	05c3      	lsls	r3, r0, #23
    145a:	0a64      	lsrs	r4, r4, #9
    145c:	07d2      	lsls	r2, r2, #31
    145e:	431c      	orrs	r4, r3
    1460:	4314      	orrs	r4, r2
    1462:	0020      	movs	r0, r4
    1464:	b003      	add	sp, #12
    1466:	bc3c      	pop	{r2, r3, r4, r5}
    1468:	4690      	mov	r8, r2
    146a:	4699      	mov	r9, r3
    146c:	46a2      	mov	sl, r4
    146e:	46ab      	mov	fp, r5
    1470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1472:	2d00      	cmp	r5, #0
    1474:	d120      	bne.n	14b8 <__aeabi_fdiv+0xe0>
    1476:	2304      	movs	r3, #4
    1478:	4699      	mov	r9, r3
    147a:	3b03      	subs	r3, #3
    147c:	469b      	mov	fp, r3
    147e:	e7c4      	b.n	140a <__aeabi_fdiv+0x32>
    1480:	2c00      	cmp	r4, #0
    1482:	d117      	bne.n	14b4 <__aeabi_fdiv+0xdc>
    1484:	2102      	movs	r1, #2
    1486:	e002      	b.n	148e <__aeabi_fdiv+0xb6>
    1488:	2c00      	cmp	r4, #0
    148a:	d10a      	bne.n	14a2 <__aeabi_fdiv+0xca>
    148c:	2101      	movs	r1, #1
    148e:	1a32      	subs	r2, r6, r0
    1490:	9201      	str	r2, [sp, #4]
    1492:	464a      	mov	r2, r9
    1494:	4643      	mov	r3, r8
    1496:	430a      	orrs	r2, r1
    1498:	485a      	ldr	r0, [pc, #360]	; (1604 <__aeabi_fdiv+0x22c>)
    149a:	0092      	lsls	r2, r2, #2
    149c:	5882      	ldr	r2, [r0, r2]
    149e:	407b      	eors	r3, r7
    14a0:	4697      	mov	pc, r2
    14a2:	0020      	movs	r0, r4
    14a4:	f000 fe34 	bl	2110 <__clzsi2>
    14a8:	1f43      	subs	r3, r0, #5
    14aa:	3076      	adds	r0, #118	; 0x76
    14ac:	409c      	lsls	r4, r3
    14ae:	4240      	negs	r0, r0
    14b0:	2100      	movs	r1, #0
    14b2:	e7ba      	b.n	142a <__aeabi_fdiv+0x52>
    14b4:	2103      	movs	r1, #3
    14b6:	e7b8      	b.n	142a <__aeabi_fdiv+0x52>
    14b8:	0028      	movs	r0, r5
    14ba:	f000 fe29 	bl	2110 <__clzsi2>
    14be:	1f43      	subs	r3, r0, #5
    14c0:	409d      	lsls	r5, r3
    14c2:	2300      	movs	r3, #0
    14c4:	3076      	adds	r0, #118	; 0x76
    14c6:	4246      	negs	r6, r0
    14c8:	4699      	mov	r9, r3
    14ca:	469b      	mov	fp, r3
    14cc:	e79d      	b.n	140a <__aeabi_fdiv+0x32>
    14ce:	230c      	movs	r3, #12
    14d0:	4699      	mov	r9, r3
    14d2:	3b09      	subs	r3, #9
    14d4:	469b      	mov	fp, r3
    14d6:	e798      	b.n	140a <__aeabi_fdiv+0x32>
    14d8:	2480      	movs	r4, #128	; 0x80
    14da:	2200      	movs	r2, #0
    14dc:	03e4      	lsls	r4, r4, #15
    14de:	20ff      	movs	r0, #255	; 0xff
    14e0:	e7b9      	b.n	1456 <__aeabi_fdiv+0x7e>
    14e2:	2400      	movs	r4, #0
    14e4:	46c2      	mov	sl, r8
    14e6:	468b      	mov	fp, r1
    14e8:	465a      	mov	r2, fp
    14ea:	4653      	mov	r3, sl
    14ec:	2a02      	cmp	r2, #2
    14ee:	d0ae      	beq.n	144e <__aeabi_fdiv+0x76>
    14f0:	2a03      	cmp	r2, #3
    14f2:	d07d      	beq.n	15f0 <__aeabi_fdiv+0x218>
    14f4:	2a01      	cmp	r2, #1
    14f6:	d131      	bne.n	155c <__aeabi_fdiv+0x184>
    14f8:	2201      	movs	r2, #1
    14fa:	2000      	movs	r0, #0
    14fc:	401a      	ands	r2, r3
    14fe:	2400      	movs	r4, #0
    1500:	e7a9      	b.n	1456 <__aeabi_fdiv+0x7e>
    1502:	2201      	movs	r2, #1
    1504:	1a10      	subs	r0, r2, r0
    1506:	281b      	cmp	r0, #27
    1508:	dd56      	ble.n	15b8 <__aeabi_fdiv+0x1e0>
    150a:	401a      	ands	r2, r3
    150c:	2000      	movs	r0, #0
    150e:	2400      	movs	r4, #0
    1510:	e7a1      	b.n	1456 <__aeabi_fdiv+0x7e>
    1512:	2380      	movs	r3, #128	; 0x80
    1514:	03db      	lsls	r3, r3, #15
    1516:	421d      	tst	r5, r3
    1518:	d14b      	bne.n	15b2 <__aeabi_fdiv+0x1da>
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	03db      	lsls	r3, r3, #15
    151e:	432b      	orrs	r3, r5
    1520:	025c      	lsls	r4, r3, #9
    1522:	0a64      	lsrs	r4, r4, #9
    1524:	003a      	movs	r2, r7
    1526:	20ff      	movs	r0, #255	; 0xff
    1528:	e795      	b.n	1456 <__aeabi_fdiv+0x7e>
    152a:	016d      	lsls	r5, r5, #5
    152c:	0160      	lsls	r0, r4, #5
    152e:	4285      	cmp	r5, r0
    1530:	d230      	bcs.n	1594 <__aeabi_fdiv+0x1bc>
    1532:	9a01      	ldr	r2, [sp, #4]
    1534:	2400      	movs	r4, #0
    1536:	3a01      	subs	r2, #1
    1538:	9201      	str	r2, [sp, #4]
    153a:	221b      	movs	r2, #27
    153c:	2701      	movs	r7, #1
    153e:	0029      	movs	r1, r5
    1540:	0064      	lsls	r4, r4, #1
    1542:	006d      	lsls	r5, r5, #1
    1544:	2900      	cmp	r1, #0
    1546:	db01      	blt.n	154c <__aeabi_fdiv+0x174>
    1548:	42a8      	cmp	r0, r5
    154a:	d801      	bhi.n	1550 <__aeabi_fdiv+0x178>
    154c:	1a2d      	subs	r5, r5, r0
    154e:	433c      	orrs	r4, r7
    1550:	3a01      	subs	r2, #1
    1552:	2a00      	cmp	r2, #0
    1554:	d1f3      	bne.n	153e <__aeabi_fdiv+0x166>
    1556:	1e6a      	subs	r2, r5, #1
    1558:	4195      	sbcs	r5, r2
    155a:	432c      	orrs	r4, r5
    155c:	9801      	ldr	r0, [sp, #4]
    155e:	307f      	adds	r0, #127	; 0x7f
    1560:	2800      	cmp	r0, #0
    1562:	ddce      	ble.n	1502 <__aeabi_fdiv+0x12a>
    1564:	0762      	lsls	r2, r4, #29
    1566:	d004      	beq.n	1572 <__aeabi_fdiv+0x19a>
    1568:	220f      	movs	r2, #15
    156a:	4022      	ands	r2, r4
    156c:	2a04      	cmp	r2, #4
    156e:	d000      	beq.n	1572 <__aeabi_fdiv+0x19a>
    1570:	3404      	adds	r4, #4
    1572:	0122      	lsls	r2, r4, #4
    1574:	d503      	bpl.n	157e <__aeabi_fdiv+0x1a6>
    1576:	4a24      	ldr	r2, [pc, #144]	; (1608 <__aeabi_fdiv+0x230>)
    1578:	9801      	ldr	r0, [sp, #4]
    157a:	4014      	ands	r4, r2
    157c:	3080      	adds	r0, #128	; 0x80
    157e:	28fe      	cmp	r0, #254	; 0xfe
    1580:	dd00      	ble.n	1584 <__aeabi_fdiv+0x1ac>
    1582:	e764      	b.n	144e <__aeabi_fdiv+0x76>
    1584:	2201      	movs	r2, #1
    1586:	01a4      	lsls	r4, r4, #6
    1588:	0a64      	lsrs	r4, r4, #9
    158a:	b2c0      	uxtb	r0, r0
    158c:	401a      	ands	r2, r3
    158e:	e762      	b.n	1456 <__aeabi_fdiv+0x7e>
    1590:	002c      	movs	r4, r5
    1592:	e7a9      	b.n	14e8 <__aeabi_fdiv+0x110>
    1594:	1a2d      	subs	r5, r5, r0
    1596:	221a      	movs	r2, #26
    1598:	2401      	movs	r4, #1
    159a:	e7cf      	b.n	153c <__aeabi_fdiv+0x164>
    159c:	026b      	lsls	r3, r5, #9
    159e:	d5bc      	bpl.n	151a <__aeabi_fdiv+0x142>
    15a0:	2400      	movs	r4, #0
    15a2:	2380      	movs	r3, #128	; 0x80
    15a4:	03db      	lsls	r3, r3, #15
    15a6:	431c      	orrs	r4, r3
    15a8:	0264      	lsls	r4, r4, #9
    15aa:	0a64      	lsrs	r4, r4, #9
    15ac:	4642      	mov	r2, r8
    15ae:	20ff      	movs	r0, #255	; 0xff
    15b0:	e751      	b.n	1456 <__aeabi_fdiv+0x7e>
    15b2:	421c      	tst	r4, r3
    15b4:	d1b3      	bne.n	151e <__aeabi_fdiv+0x146>
    15b6:	e7f4      	b.n	15a2 <__aeabi_fdiv+0x1ca>
    15b8:	0021      	movs	r1, r4
    15ba:	2220      	movs	r2, #32
    15bc:	40c1      	lsrs	r1, r0
    15be:	1a10      	subs	r0, r2, r0
    15c0:	4084      	lsls	r4, r0
    15c2:	1e62      	subs	r2, r4, #1
    15c4:	4194      	sbcs	r4, r2
    15c6:	430c      	orrs	r4, r1
    15c8:	0762      	lsls	r2, r4, #29
    15ca:	d004      	beq.n	15d6 <__aeabi_fdiv+0x1fe>
    15cc:	220f      	movs	r2, #15
    15ce:	4022      	ands	r2, r4
    15d0:	2a04      	cmp	r2, #4
    15d2:	d000      	beq.n	15d6 <__aeabi_fdiv+0x1fe>
    15d4:	3404      	adds	r4, #4
    15d6:	0162      	lsls	r2, r4, #5
    15d8:	d504      	bpl.n	15e4 <__aeabi_fdiv+0x20c>
    15da:	2201      	movs	r2, #1
    15dc:	2001      	movs	r0, #1
    15de:	401a      	ands	r2, r3
    15e0:	2400      	movs	r4, #0
    15e2:	e738      	b.n	1456 <__aeabi_fdiv+0x7e>
    15e4:	2201      	movs	r2, #1
    15e6:	01a4      	lsls	r4, r4, #6
    15e8:	0a64      	lsrs	r4, r4, #9
    15ea:	401a      	ands	r2, r3
    15ec:	2000      	movs	r0, #0
    15ee:	e732      	b.n	1456 <__aeabi_fdiv+0x7e>
    15f0:	2380      	movs	r3, #128	; 0x80
    15f2:	03db      	lsls	r3, r3, #15
    15f4:	431c      	orrs	r4, r3
    15f6:	0264      	lsls	r4, r4, #9
    15f8:	0a64      	lsrs	r4, r4, #9
    15fa:	4652      	mov	r2, sl
    15fc:	20ff      	movs	r0, #255	; 0xff
    15fe:	e72a      	b.n	1456 <__aeabi_fdiv+0x7e>
    1600:	000024bc 	.word	0x000024bc
    1604:	000024fc 	.word	0x000024fc
    1608:	f7ffffff 	.word	0xf7ffffff

0000160c <__aeabi_fsub>:
    160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    160e:	024a      	lsls	r2, r1, #9
    1610:	004e      	lsls	r6, r1, #1
    1612:	0243      	lsls	r3, r0, #9
    1614:	0044      	lsls	r4, r0, #1
    1616:	0e24      	lsrs	r4, r4, #24
    1618:	0fc5      	lsrs	r5, r0, #31
    161a:	099b      	lsrs	r3, r3, #6
    161c:	0e36      	lsrs	r6, r6, #24
    161e:	0fc9      	lsrs	r1, r1, #31
    1620:	0992      	lsrs	r2, r2, #6
    1622:	2eff      	cmp	r6, #255	; 0xff
    1624:	d100      	bne.n	1628 <__aeabi_fsub+0x1c>
    1626:	e083      	b.n	1730 <__aeabi_fsub+0x124>
    1628:	2001      	movs	r0, #1
    162a:	4041      	eors	r1, r0
    162c:	1ba0      	subs	r0, r4, r6
    162e:	42a9      	cmp	r1, r5
    1630:	d05c      	beq.n	16ec <__aeabi_fsub+0xe0>
    1632:	2800      	cmp	r0, #0
    1634:	dc00      	bgt.n	1638 <__aeabi_fsub+0x2c>
    1636:	e095      	b.n	1764 <__aeabi_fsub+0x158>
    1638:	2e00      	cmp	r6, #0
    163a:	d11c      	bne.n	1676 <__aeabi_fsub+0x6a>
    163c:	2a00      	cmp	r2, #0
    163e:	d000      	beq.n	1642 <__aeabi_fsub+0x36>
    1640:	e081      	b.n	1746 <__aeabi_fsub+0x13a>
    1642:	075a      	lsls	r2, r3, #29
    1644:	d004      	beq.n	1650 <__aeabi_fsub+0x44>
    1646:	220f      	movs	r2, #15
    1648:	401a      	ands	r2, r3
    164a:	2a04      	cmp	r2, #4
    164c:	d000      	beq.n	1650 <__aeabi_fsub+0x44>
    164e:	3304      	adds	r3, #4
    1650:	015a      	lsls	r2, r3, #5
    1652:	d53b      	bpl.n	16cc <__aeabi_fsub+0xc0>
    1654:	3401      	adds	r4, #1
    1656:	2cff      	cmp	r4, #255	; 0xff
    1658:	d100      	bne.n	165c <__aeabi_fsub+0x50>
    165a:	e091      	b.n	1780 <__aeabi_fsub+0x174>
    165c:	2001      	movs	r0, #1
    165e:	019b      	lsls	r3, r3, #6
    1660:	0a5b      	lsrs	r3, r3, #9
    1662:	b2e4      	uxtb	r4, r4
    1664:	4005      	ands	r5, r0
    1666:	025b      	lsls	r3, r3, #9
    1668:	05e4      	lsls	r4, r4, #23
    166a:	0a5b      	lsrs	r3, r3, #9
    166c:	07ed      	lsls	r5, r5, #31
    166e:	4323      	orrs	r3, r4
    1670:	432b      	orrs	r3, r5
    1672:	0018      	movs	r0, r3
    1674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1676:	2cff      	cmp	r4, #255	; 0xff
    1678:	d0e3      	beq.n	1642 <__aeabi_fsub+0x36>
    167a:	2180      	movs	r1, #128	; 0x80
    167c:	04c9      	lsls	r1, r1, #19
    167e:	430a      	orrs	r2, r1
    1680:	281b      	cmp	r0, #27
    1682:	dd00      	ble.n	1686 <__aeabi_fsub+0x7a>
    1684:	e090      	b.n	17a8 <__aeabi_fsub+0x19c>
    1686:	0016      	movs	r6, r2
    1688:	2120      	movs	r1, #32
    168a:	40c6      	lsrs	r6, r0
    168c:	1a08      	subs	r0, r1, r0
    168e:	4082      	lsls	r2, r0
    1690:	1e51      	subs	r1, r2, #1
    1692:	418a      	sbcs	r2, r1
    1694:	4332      	orrs	r2, r6
    1696:	1a9b      	subs	r3, r3, r2
    1698:	015a      	lsls	r2, r3, #5
    169a:	d515      	bpl.n	16c8 <__aeabi_fsub+0xbc>
    169c:	019b      	lsls	r3, r3, #6
    169e:	099e      	lsrs	r6, r3, #6
    16a0:	0030      	movs	r0, r6
    16a2:	f000 fd35 	bl	2110 <__clzsi2>
    16a6:	3805      	subs	r0, #5
    16a8:	4086      	lsls	r6, r0
    16aa:	4284      	cmp	r4, r0
    16ac:	dc6c      	bgt.n	1788 <__aeabi_fsub+0x17c>
    16ae:	1b04      	subs	r4, r0, r4
    16b0:	0033      	movs	r3, r6
    16b2:	2020      	movs	r0, #32
    16b4:	3401      	adds	r4, #1
    16b6:	40e3      	lsrs	r3, r4
    16b8:	1b04      	subs	r4, r0, r4
    16ba:	40a6      	lsls	r6, r4
    16bc:	1e72      	subs	r2, r6, #1
    16be:	4196      	sbcs	r6, r2
    16c0:	2400      	movs	r4, #0
    16c2:	4333      	orrs	r3, r6
    16c4:	e7bd      	b.n	1642 <__aeabi_fsub+0x36>
    16c6:	000d      	movs	r5, r1
    16c8:	075a      	lsls	r2, r3, #29
    16ca:	d1bc      	bne.n	1646 <__aeabi_fsub+0x3a>
    16cc:	08df      	lsrs	r7, r3, #3
    16ce:	2301      	movs	r3, #1
    16d0:	401d      	ands	r5, r3
    16d2:	2cff      	cmp	r4, #255	; 0xff
    16d4:	d133      	bne.n	173e <__aeabi_fsub+0x132>
    16d6:	2f00      	cmp	r7, #0
    16d8:	d100      	bne.n	16dc <__aeabi_fsub+0xd0>
    16da:	e090      	b.n	17fe <__aeabi_fsub+0x1f2>
    16dc:	2280      	movs	r2, #128	; 0x80
    16de:	03d2      	lsls	r2, r2, #15
    16e0:	0013      	movs	r3, r2
    16e2:	433b      	orrs	r3, r7
    16e4:	025b      	lsls	r3, r3, #9
    16e6:	0a5b      	lsrs	r3, r3, #9
    16e8:	24ff      	movs	r4, #255	; 0xff
    16ea:	e7bc      	b.n	1666 <__aeabi_fsub+0x5a>
    16ec:	2800      	cmp	r0, #0
    16ee:	dd4f      	ble.n	1790 <__aeabi_fsub+0x184>
    16f0:	2e00      	cmp	r6, #0
    16f2:	d02e      	beq.n	1752 <__aeabi_fsub+0x146>
    16f4:	2cff      	cmp	r4, #255	; 0xff
    16f6:	d0a4      	beq.n	1642 <__aeabi_fsub+0x36>
    16f8:	2580      	movs	r5, #128	; 0x80
    16fa:	04ed      	lsls	r5, r5, #19
    16fc:	432a      	orrs	r2, r5
    16fe:	281b      	cmp	r0, #27
    1700:	dd00      	ble.n	1704 <__aeabi_fsub+0xf8>
    1702:	e097      	b.n	1834 <__aeabi_fsub+0x228>
    1704:	0016      	movs	r6, r2
    1706:	2520      	movs	r5, #32
    1708:	40c6      	lsrs	r6, r0
    170a:	1a28      	subs	r0, r5, r0
    170c:	4082      	lsls	r2, r0
    170e:	1e50      	subs	r0, r2, #1
    1710:	4182      	sbcs	r2, r0
    1712:	4332      	orrs	r2, r6
    1714:	189b      	adds	r3, r3, r2
    1716:	015a      	lsls	r2, r3, #5
    1718:	d5d5      	bpl.n	16c6 <__aeabi_fsub+0xba>
    171a:	3401      	adds	r4, #1
    171c:	2cff      	cmp	r4, #255	; 0xff
    171e:	d06d      	beq.n	17fc <__aeabi_fsub+0x1f0>
    1720:	2201      	movs	r2, #1
    1722:	487b      	ldr	r0, [pc, #492]	; (1910 <__aeabi_fsub+0x304>)
    1724:	401a      	ands	r2, r3
    1726:	085b      	lsrs	r3, r3, #1
    1728:	4003      	ands	r3, r0
    172a:	4313      	orrs	r3, r2
    172c:	000d      	movs	r5, r1
    172e:	e788      	b.n	1642 <__aeabi_fsub+0x36>
    1730:	2a00      	cmp	r2, #0
    1732:	d000      	beq.n	1736 <__aeabi_fsub+0x12a>
    1734:	e77a      	b.n	162c <__aeabi_fsub+0x20>
    1736:	e777      	b.n	1628 <__aeabi_fsub+0x1c>
    1738:	1e03      	subs	r3, r0, #0
    173a:	d1c5      	bne.n	16c8 <__aeabi_fsub+0xbc>
    173c:	2500      	movs	r5, #0
    173e:	027b      	lsls	r3, r7, #9
    1740:	0a5b      	lsrs	r3, r3, #9
    1742:	b2e4      	uxtb	r4, r4
    1744:	e78f      	b.n	1666 <__aeabi_fsub+0x5a>
    1746:	3801      	subs	r0, #1
    1748:	2800      	cmp	r0, #0
    174a:	d0a4      	beq.n	1696 <__aeabi_fsub+0x8a>
    174c:	2cff      	cmp	r4, #255	; 0xff
    174e:	d197      	bne.n	1680 <__aeabi_fsub+0x74>
    1750:	e777      	b.n	1642 <__aeabi_fsub+0x36>
    1752:	2a00      	cmp	r2, #0
    1754:	d100      	bne.n	1758 <__aeabi_fsub+0x14c>
    1756:	e774      	b.n	1642 <__aeabi_fsub+0x36>
    1758:	3801      	subs	r0, #1
    175a:	2800      	cmp	r0, #0
    175c:	d0da      	beq.n	1714 <__aeabi_fsub+0x108>
    175e:	2cff      	cmp	r4, #255	; 0xff
    1760:	d1cd      	bne.n	16fe <__aeabi_fsub+0xf2>
    1762:	e76e      	b.n	1642 <__aeabi_fsub+0x36>
    1764:	2800      	cmp	r0, #0
    1766:	d121      	bne.n	17ac <__aeabi_fsub+0x1a0>
    1768:	1c60      	adds	r0, r4, #1
    176a:	b2c0      	uxtb	r0, r0
    176c:	2801      	cmp	r0, #1
    176e:	dd58      	ble.n	1822 <__aeabi_fsub+0x216>
    1770:	2780      	movs	r7, #128	; 0x80
    1772:	1a9e      	subs	r6, r3, r2
    1774:	04ff      	lsls	r7, r7, #19
    1776:	4037      	ands	r7, r6
    1778:	d02f      	beq.n	17da <__aeabi_fsub+0x1ce>
    177a:	1ad6      	subs	r6, r2, r3
    177c:	000d      	movs	r5, r1
    177e:	e78f      	b.n	16a0 <__aeabi_fsub+0x94>
    1780:	2301      	movs	r3, #1
    1782:	401d      	ands	r5, r3
    1784:	2300      	movs	r3, #0
    1786:	e76e      	b.n	1666 <__aeabi_fsub+0x5a>
    1788:	4b62      	ldr	r3, [pc, #392]	; (1914 <__aeabi_fsub+0x308>)
    178a:	1a24      	subs	r4, r4, r0
    178c:	4033      	ands	r3, r6
    178e:	e758      	b.n	1642 <__aeabi_fsub+0x36>
    1790:	2800      	cmp	r0, #0
    1792:	d151      	bne.n	1838 <__aeabi_fsub+0x22c>
    1794:	1c60      	adds	r0, r4, #1
    1796:	b2c6      	uxtb	r6, r0
    1798:	2e01      	cmp	r6, #1
    179a:	dd33      	ble.n	1804 <__aeabi_fsub+0x1f8>
    179c:	28ff      	cmp	r0, #255	; 0xff
    179e:	d02d      	beq.n	17fc <__aeabi_fsub+0x1f0>
    17a0:	189b      	adds	r3, r3, r2
    17a2:	085b      	lsrs	r3, r3, #1
    17a4:	0004      	movs	r4, r0
    17a6:	e74c      	b.n	1642 <__aeabi_fsub+0x36>
    17a8:	2201      	movs	r2, #1
    17aa:	e774      	b.n	1696 <__aeabi_fsub+0x8a>
    17ac:	2c00      	cmp	r4, #0
    17ae:	d01a      	beq.n	17e6 <__aeabi_fsub+0x1da>
    17b0:	2eff      	cmp	r6, #255	; 0xff
    17b2:	d01f      	beq.n	17f4 <__aeabi_fsub+0x1e8>
    17b4:	2480      	movs	r4, #128	; 0x80
    17b6:	04e4      	lsls	r4, r4, #19
    17b8:	4240      	negs	r0, r0
    17ba:	4323      	orrs	r3, r4
    17bc:	281b      	cmp	r0, #27
    17be:	dd00      	ble.n	17c2 <__aeabi_fsub+0x1b6>
    17c0:	e096      	b.n	18f0 <__aeabi_fsub+0x2e4>
    17c2:	001d      	movs	r5, r3
    17c4:	2420      	movs	r4, #32
    17c6:	40c5      	lsrs	r5, r0
    17c8:	1a20      	subs	r0, r4, r0
    17ca:	4083      	lsls	r3, r0
    17cc:	1e58      	subs	r0, r3, #1
    17ce:	4183      	sbcs	r3, r0
    17d0:	432b      	orrs	r3, r5
    17d2:	1ad3      	subs	r3, r2, r3
    17d4:	0034      	movs	r4, r6
    17d6:	000d      	movs	r5, r1
    17d8:	e75e      	b.n	1698 <__aeabi_fsub+0x8c>
    17da:	2e00      	cmp	r6, #0
    17dc:	d000      	beq.n	17e0 <__aeabi_fsub+0x1d4>
    17de:	e75f      	b.n	16a0 <__aeabi_fsub+0x94>
    17e0:	2500      	movs	r5, #0
    17e2:	2400      	movs	r4, #0
    17e4:	e7ab      	b.n	173e <__aeabi_fsub+0x132>
    17e6:	2b00      	cmp	r3, #0
    17e8:	d044      	beq.n	1874 <__aeabi_fsub+0x268>
    17ea:	43c0      	mvns	r0, r0
    17ec:	2800      	cmp	r0, #0
    17ee:	d0f0      	beq.n	17d2 <__aeabi_fsub+0x1c6>
    17f0:	2eff      	cmp	r6, #255	; 0xff
    17f2:	d1e3      	bne.n	17bc <__aeabi_fsub+0x1b0>
    17f4:	0013      	movs	r3, r2
    17f6:	24ff      	movs	r4, #255	; 0xff
    17f8:	000d      	movs	r5, r1
    17fa:	e722      	b.n	1642 <__aeabi_fsub+0x36>
    17fc:	000d      	movs	r5, r1
    17fe:	24ff      	movs	r4, #255	; 0xff
    1800:	2300      	movs	r3, #0
    1802:	e730      	b.n	1666 <__aeabi_fsub+0x5a>
    1804:	2c00      	cmp	r4, #0
    1806:	d15d      	bne.n	18c4 <__aeabi_fsub+0x2b8>
    1808:	2b00      	cmp	r3, #0
    180a:	d07d      	beq.n	1908 <__aeabi_fsub+0x2fc>
    180c:	2a00      	cmp	r2, #0
    180e:	d100      	bne.n	1812 <__aeabi_fsub+0x206>
    1810:	e717      	b.n	1642 <__aeabi_fsub+0x36>
    1812:	189b      	adds	r3, r3, r2
    1814:	015a      	lsls	r2, r3, #5
    1816:	d400      	bmi.n	181a <__aeabi_fsub+0x20e>
    1818:	e756      	b.n	16c8 <__aeabi_fsub+0xbc>
    181a:	4a3e      	ldr	r2, [pc, #248]	; (1914 <__aeabi_fsub+0x308>)
    181c:	0004      	movs	r4, r0
    181e:	4013      	ands	r3, r2
    1820:	e70f      	b.n	1642 <__aeabi_fsub+0x36>
    1822:	2c00      	cmp	r4, #0
    1824:	d11e      	bne.n	1864 <__aeabi_fsub+0x258>
    1826:	2b00      	cmp	r3, #0
    1828:	d12f      	bne.n	188a <__aeabi_fsub+0x27e>
    182a:	2a00      	cmp	r2, #0
    182c:	d065      	beq.n	18fa <__aeabi_fsub+0x2ee>
    182e:	0013      	movs	r3, r2
    1830:	000d      	movs	r5, r1
    1832:	e706      	b.n	1642 <__aeabi_fsub+0x36>
    1834:	2201      	movs	r2, #1
    1836:	e76d      	b.n	1714 <__aeabi_fsub+0x108>
    1838:	2c00      	cmp	r4, #0
    183a:	d11f      	bne.n	187c <__aeabi_fsub+0x270>
    183c:	2b00      	cmp	r3, #0
    183e:	d059      	beq.n	18f4 <__aeabi_fsub+0x2e8>
    1840:	43c0      	mvns	r0, r0
    1842:	2800      	cmp	r0, #0
    1844:	d00b      	beq.n	185e <__aeabi_fsub+0x252>
    1846:	2eff      	cmp	r6, #255	; 0xff
    1848:	d04f      	beq.n	18ea <__aeabi_fsub+0x2de>
    184a:	281b      	cmp	r0, #27
    184c:	dc5e      	bgt.n	190c <__aeabi_fsub+0x300>
    184e:	001d      	movs	r5, r3
    1850:	2420      	movs	r4, #32
    1852:	40c5      	lsrs	r5, r0
    1854:	1a20      	subs	r0, r4, r0
    1856:	4083      	lsls	r3, r0
    1858:	1e58      	subs	r0, r3, #1
    185a:	4183      	sbcs	r3, r0
    185c:	432b      	orrs	r3, r5
    185e:	189b      	adds	r3, r3, r2
    1860:	0034      	movs	r4, r6
    1862:	e758      	b.n	1716 <__aeabi_fsub+0x10a>
    1864:	2b00      	cmp	r3, #0
    1866:	d11c      	bne.n	18a2 <__aeabi_fsub+0x296>
    1868:	2a00      	cmp	r2, #0
    186a:	d049      	beq.n	1900 <__aeabi_fsub+0x2f4>
    186c:	0013      	movs	r3, r2
    186e:	000d      	movs	r5, r1
    1870:	24ff      	movs	r4, #255	; 0xff
    1872:	e6e6      	b.n	1642 <__aeabi_fsub+0x36>
    1874:	0013      	movs	r3, r2
    1876:	0034      	movs	r4, r6
    1878:	000d      	movs	r5, r1
    187a:	e6e2      	b.n	1642 <__aeabi_fsub+0x36>
    187c:	2eff      	cmp	r6, #255	; 0xff
    187e:	d034      	beq.n	18ea <__aeabi_fsub+0x2de>
    1880:	2480      	movs	r4, #128	; 0x80
    1882:	04e4      	lsls	r4, r4, #19
    1884:	4240      	negs	r0, r0
    1886:	4323      	orrs	r3, r4
    1888:	e7df      	b.n	184a <__aeabi_fsub+0x23e>
    188a:	2a00      	cmp	r2, #0
    188c:	d100      	bne.n	1890 <__aeabi_fsub+0x284>
    188e:	e6d8      	b.n	1642 <__aeabi_fsub+0x36>
    1890:	2780      	movs	r7, #128	; 0x80
    1892:	1a98      	subs	r0, r3, r2
    1894:	04ff      	lsls	r7, r7, #19
    1896:	4007      	ands	r7, r0
    1898:	d100      	bne.n	189c <__aeabi_fsub+0x290>
    189a:	e74d      	b.n	1738 <__aeabi_fsub+0x12c>
    189c:	1ad3      	subs	r3, r2, r3
    189e:	000d      	movs	r5, r1
    18a0:	e6cf      	b.n	1642 <__aeabi_fsub+0x36>
    18a2:	24ff      	movs	r4, #255	; 0xff
    18a4:	2a00      	cmp	r2, #0
    18a6:	d100      	bne.n	18aa <__aeabi_fsub+0x29e>
    18a8:	e6cb      	b.n	1642 <__aeabi_fsub+0x36>
    18aa:	2080      	movs	r0, #128	; 0x80
    18ac:	08db      	lsrs	r3, r3, #3
    18ae:	03c0      	lsls	r0, r0, #15
    18b0:	4203      	tst	r3, r0
    18b2:	d004      	beq.n	18be <__aeabi_fsub+0x2b2>
    18b4:	08d2      	lsrs	r2, r2, #3
    18b6:	4202      	tst	r2, r0
    18b8:	d101      	bne.n	18be <__aeabi_fsub+0x2b2>
    18ba:	0013      	movs	r3, r2
    18bc:	000d      	movs	r5, r1
    18be:	00db      	lsls	r3, r3, #3
    18c0:	24ff      	movs	r4, #255	; 0xff
    18c2:	e6be      	b.n	1642 <__aeabi_fsub+0x36>
    18c4:	2b00      	cmp	r3, #0
    18c6:	d010      	beq.n	18ea <__aeabi_fsub+0x2de>
    18c8:	24ff      	movs	r4, #255	; 0xff
    18ca:	2a00      	cmp	r2, #0
    18cc:	d100      	bne.n	18d0 <__aeabi_fsub+0x2c4>
    18ce:	e6b8      	b.n	1642 <__aeabi_fsub+0x36>
    18d0:	2080      	movs	r0, #128	; 0x80
    18d2:	08db      	lsrs	r3, r3, #3
    18d4:	03c0      	lsls	r0, r0, #15
    18d6:	4203      	tst	r3, r0
    18d8:	d003      	beq.n	18e2 <__aeabi_fsub+0x2d6>
    18da:	08d2      	lsrs	r2, r2, #3
    18dc:	4202      	tst	r2, r0
    18de:	d100      	bne.n	18e2 <__aeabi_fsub+0x2d6>
    18e0:	0013      	movs	r3, r2
    18e2:	00db      	lsls	r3, r3, #3
    18e4:	000d      	movs	r5, r1
    18e6:	24ff      	movs	r4, #255	; 0xff
    18e8:	e6ab      	b.n	1642 <__aeabi_fsub+0x36>
    18ea:	0013      	movs	r3, r2
    18ec:	24ff      	movs	r4, #255	; 0xff
    18ee:	e6a8      	b.n	1642 <__aeabi_fsub+0x36>
    18f0:	2301      	movs	r3, #1
    18f2:	e76e      	b.n	17d2 <__aeabi_fsub+0x1c6>
    18f4:	0013      	movs	r3, r2
    18f6:	0034      	movs	r4, r6
    18f8:	e6a3      	b.n	1642 <__aeabi_fsub+0x36>
    18fa:	2700      	movs	r7, #0
    18fc:	2500      	movs	r5, #0
    18fe:	e71e      	b.n	173e <__aeabi_fsub+0x132>
    1900:	2780      	movs	r7, #128	; 0x80
    1902:	2500      	movs	r5, #0
    1904:	03ff      	lsls	r7, r7, #15
    1906:	e6e9      	b.n	16dc <__aeabi_fsub+0xd0>
    1908:	0013      	movs	r3, r2
    190a:	e69a      	b.n	1642 <__aeabi_fsub+0x36>
    190c:	2301      	movs	r3, #1
    190e:	e7a6      	b.n	185e <__aeabi_fsub+0x252>
    1910:	7dffffff 	.word	0x7dffffff
    1914:	fbffffff 	.word	0xfbffffff

00001918 <__aeabi_f2iz>:
    1918:	0243      	lsls	r3, r0, #9
    191a:	0a59      	lsrs	r1, r3, #9
    191c:	0043      	lsls	r3, r0, #1
    191e:	0fc2      	lsrs	r2, r0, #31
    1920:	0e1b      	lsrs	r3, r3, #24
    1922:	2000      	movs	r0, #0
    1924:	2b7e      	cmp	r3, #126	; 0x7e
    1926:	dd0e      	ble.n	1946 <__aeabi_f2iz+0x2e>
    1928:	2b9d      	cmp	r3, #157	; 0x9d
    192a:	dc0d      	bgt.n	1948 <__aeabi_f2iz+0x30>
    192c:	2080      	movs	r0, #128	; 0x80
    192e:	0400      	lsls	r0, r0, #16
    1930:	4301      	orrs	r1, r0
    1932:	2b95      	cmp	r3, #149	; 0x95
    1934:	dc0b      	bgt.n	194e <__aeabi_f2iz+0x36>
    1936:	2096      	movs	r0, #150	; 0x96
    1938:	1ac3      	subs	r3, r0, r3
    193a:	40d9      	lsrs	r1, r3
    193c:	000b      	movs	r3, r1
    193e:	4258      	negs	r0, r3
    1940:	2a00      	cmp	r2, #0
    1942:	d100      	bne.n	1946 <__aeabi_f2iz+0x2e>
    1944:	0018      	movs	r0, r3
    1946:	4770      	bx	lr
    1948:	4b03      	ldr	r3, [pc, #12]	; (1958 <__aeabi_f2iz+0x40>)
    194a:	18d0      	adds	r0, r2, r3
    194c:	e7fb      	b.n	1946 <__aeabi_f2iz+0x2e>
    194e:	3b96      	subs	r3, #150	; 0x96
    1950:	4099      	lsls	r1, r3
    1952:	000b      	movs	r3, r1
    1954:	e7f3      	b.n	193e <__aeabi_f2iz+0x26>
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	7fffffff 	.word	0x7fffffff

0000195c <__aeabi_ui2f>:
    195c:	b570      	push	{r4, r5, r6, lr}
    195e:	1e04      	subs	r4, r0, #0
    1960:	d028      	beq.n	19b4 <__aeabi_ui2f+0x58>
    1962:	f000 fbd5 	bl	2110 <__clzsi2>
    1966:	239e      	movs	r3, #158	; 0x9e
    1968:	1a1b      	subs	r3, r3, r0
    196a:	2b96      	cmp	r3, #150	; 0x96
    196c:	dc0a      	bgt.n	1984 <__aeabi_ui2f+0x28>
    196e:	2296      	movs	r2, #150	; 0x96
    1970:	1ad2      	subs	r2, r2, r3
    1972:	4094      	lsls	r4, r2
    1974:	0262      	lsls	r2, r4, #9
    1976:	0a52      	lsrs	r2, r2, #9
    1978:	b2d8      	uxtb	r0, r3
    197a:	0252      	lsls	r2, r2, #9
    197c:	0a52      	lsrs	r2, r2, #9
    197e:	05c0      	lsls	r0, r0, #23
    1980:	4310      	orrs	r0, r2
    1982:	bd70      	pop	{r4, r5, r6, pc}
    1984:	2b99      	cmp	r3, #153	; 0x99
    1986:	dc18      	bgt.n	19ba <__aeabi_ui2f+0x5e>
    1988:	2299      	movs	r2, #153	; 0x99
    198a:	1ad2      	subs	r2, r2, r3
    198c:	4094      	lsls	r4, r2
    198e:	4a11      	ldr	r2, [pc, #68]	; (19d4 <__aeabi_ui2f+0x78>)
    1990:	4022      	ands	r2, r4
    1992:	0761      	lsls	r1, r4, #29
    1994:	d004      	beq.n	19a0 <__aeabi_ui2f+0x44>
    1996:	210f      	movs	r1, #15
    1998:	400c      	ands	r4, r1
    199a:	2c04      	cmp	r4, #4
    199c:	d000      	beq.n	19a0 <__aeabi_ui2f+0x44>
    199e:	3204      	adds	r2, #4
    19a0:	0151      	lsls	r1, r2, #5
    19a2:	d503      	bpl.n	19ac <__aeabi_ui2f+0x50>
    19a4:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <__aeabi_ui2f+0x78>)
    19a6:	401a      	ands	r2, r3
    19a8:	239f      	movs	r3, #159	; 0x9f
    19aa:	1a1b      	subs	r3, r3, r0
    19ac:	0192      	lsls	r2, r2, #6
    19ae:	0a52      	lsrs	r2, r2, #9
    19b0:	b2d8      	uxtb	r0, r3
    19b2:	e7e2      	b.n	197a <__aeabi_ui2f+0x1e>
    19b4:	2000      	movs	r0, #0
    19b6:	2200      	movs	r2, #0
    19b8:	e7df      	b.n	197a <__aeabi_ui2f+0x1e>
    19ba:	2205      	movs	r2, #5
    19bc:	0025      	movs	r5, r4
    19be:	1a12      	subs	r2, r2, r0
    19c0:	21b9      	movs	r1, #185	; 0xb9
    19c2:	40d5      	lsrs	r5, r2
    19c4:	0022      	movs	r2, r4
    19c6:	1ac9      	subs	r1, r1, r3
    19c8:	408a      	lsls	r2, r1
    19ca:	1e54      	subs	r4, r2, #1
    19cc:	41a2      	sbcs	r2, r4
    19ce:	002c      	movs	r4, r5
    19d0:	4314      	orrs	r4, r2
    19d2:	e7dc      	b.n	198e <__aeabi_ui2f+0x32>
    19d4:	fbffffff 	.word	0xfbffffff

000019d8 <__aeabi_dmul>:
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	465f      	mov	r7, fp
    19dc:	4656      	mov	r6, sl
    19de:	464d      	mov	r5, r9
    19e0:	4644      	mov	r4, r8
    19e2:	b4f0      	push	{r4, r5, r6, r7}
    19e4:	030d      	lsls	r5, r1, #12
    19e6:	4699      	mov	r9, r3
    19e8:	004e      	lsls	r6, r1, #1
    19ea:	0b2b      	lsrs	r3, r5, #12
    19ec:	b087      	sub	sp, #28
    19ee:	0007      	movs	r7, r0
    19f0:	4692      	mov	sl, r2
    19f2:	4680      	mov	r8, r0
    19f4:	469b      	mov	fp, r3
    19f6:	0d76      	lsrs	r6, r6, #21
    19f8:	0fcc      	lsrs	r4, r1, #31
    19fa:	2e00      	cmp	r6, #0
    19fc:	d069      	beq.n	1ad2 <__aeabi_dmul+0xfa>
    19fe:	4b6d      	ldr	r3, [pc, #436]	; (1bb4 <__aeabi_dmul+0x1dc>)
    1a00:	429e      	cmp	r6, r3
    1a02:	d035      	beq.n	1a70 <__aeabi_dmul+0x98>
    1a04:	465b      	mov	r3, fp
    1a06:	2280      	movs	r2, #128	; 0x80
    1a08:	00dd      	lsls	r5, r3, #3
    1a0a:	0412      	lsls	r2, r2, #16
    1a0c:	0f43      	lsrs	r3, r0, #29
    1a0e:	4313      	orrs	r3, r2
    1a10:	432b      	orrs	r3, r5
    1a12:	469b      	mov	fp, r3
    1a14:	00c3      	lsls	r3, r0, #3
    1a16:	4698      	mov	r8, r3
    1a18:	4b67      	ldr	r3, [pc, #412]	; (1bb8 <__aeabi_dmul+0x1e0>)
    1a1a:	2700      	movs	r7, #0
    1a1c:	469c      	mov	ip, r3
    1a1e:	2300      	movs	r3, #0
    1a20:	4466      	add	r6, ip
    1a22:	9301      	str	r3, [sp, #4]
    1a24:	464a      	mov	r2, r9
    1a26:	0315      	lsls	r5, r2, #12
    1a28:	0050      	lsls	r0, r2, #1
    1a2a:	0fd2      	lsrs	r2, r2, #31
    1a2c:	4653      	mov	r3, sl
    1a2e:	0b2d      	lsrs	r5, r5, #12
    1a30:	0d40      	lsrs	r0, r0, #21
    1a32:	4691      	mov	r9, r2
    1a34:	d100      	bne.n	1a38 <__aeabi_dmul+0x60>
    1a36:	e076      	b.n	1b26 <__aeabi_dmul+0x14e>
    1a38:	4a5e      	ldr	r2, [pc, #376]	; (1bb4 <__aeabi_dmul+0x1dc>)
    1a3a:	4290      	cmp	r0, r2
    1a3c:	d06c      	beq.n	1b18 <__aeabi_dmul+0x140>
    1a3e:	2280      	movs	r2, #128	; 0x80
    1a40:	0f5b      	lsrs	r3, r3, #29
    1a42:	0412      	lsls	r2, r2, #16
    1a44:	4313      	orrs	r3, r2
    1a46:	4a5c      	ldr	r2, [pc, #368]	; (1bb8 <__aeabi_dmul+0x1e0>)
    1a48:	00ed      	lsls	r5, r5, #3
    1a4a:	4694      	mov	ip, r2
    1a4c:	431d      	orrs	r5, r3
    1a4e:	4653      	mov	r3, sl
    1a50:	2200      	movs	r2, #0
    1a52:	00db      	lsls	r3, r3, #3
    1a54:	4460      	add	r0, ip
    1a56:	4649      	mov	r1, r9
    1a58:	1836      	adds	r6, r6, r0
    1a5a:	1c70      	adds	r0, r6, #1
    1a5c:	4061      	eors	r1, r4
    1a5e:	9002      	str	r0, [sp, #8]
    1a60:	4317      	orrs	r7, r2
    1a62:	2f0f      	cmp	r7, #15
    1a64:	d900      	bls.n	1a68 <__aeabi_dmul+0x90>
    1a66:	e0af      	b.n	1bc8 <__aeabi_dmul+0x1f0>
    1a68:	4854      	ldr	r0, [pc, #336]	; (1bbc <__aeabi_dmul+0x1e4>)
    1a6a:	00bf      	lsls	r7, r7, #2
    1a6c:	59c7      	ldr	r7, [r0, r7]
    1a6e:	46bf      	mov	pc, r7
    1a70:	465b      	mov	r3, fp
    1a72:	431f      	orrs	r7, r3
    1a74:	d000      	beq.n	1a78 <__aeabi_dmul+0xa0>
    1a76:	e088      	b.n	1b8a <__aeabi_dmul+0x1b2>
    1a78:	2300      	movs	r3, #0
    1a7a:	469b      	mov	fp, r3
    1a7c:	4698      	mov	r8, r3
    1a7e:	3302      	adds	r3, #2
    1a80:	2708      	movs	r7, #8
    1a82:	9301      	str	r3, [sp, #4]
    1a84:	e7ce      	b.n	1a24 <__aeabi_dmul+0x4c>
    1a86:	4649      	mov	r1, r9
    1a88:	2a02      	cmp	r2, #2
    1a8a:	d06a      	beq.n	1b62 <__aeabi_dmul+0x18a>
    1a8c:	2a03      	cmp	r2, #3
    1a8e:	d100      	bne.n	1a92 <__aeabi_dmul+0xba>
    1a90:	e209      	b.n	1ea6 <__aeabi_dmul+0x4ce>
    1a92:	2a01      	cmp	r2, #1
    1a94:	d000      	beq.n	1a98 <__aeabi_dmul+0xc0>
    1a96:	e1bb      	b.n	1e10 <__aeabi_dmul+0x438>
    1a98:	4011      	ands	r1, r2
    1a9a:	2200      	movs	r2, #0
    1a9c:	2300      	movs	r3, #0
    1a9e:	2500      	movs	r5, #0
    1aa0:	4690      	mov	r8, r2
    1aa2:	b2cc      	uxtb	r4, r1
    1aa4:	2100      	movs	r1, #0
    1aa6:	032d      	lsls	r5, r5, #12
    1aa8:	0d0a      	lsrs	r2, r1, #20
    1aaa:	0512      	lsls	r2, r2, #20
    1aac:	0b2d      	lsrs	r5, r5, #12
    1aae:	4315      	orrs	r5, r2
    1ab0:	4a43      	ldr	r2, [pc, #268]	; (1bc0 <__aeabi_dmul+0x1e8>)
    1ab2:	051b      	lsls	r3, r3, #20
    1ab4:	4015      	ands	r5, r2
    1ab6:	431d      	orrs	r5, r3
    1ab8:	006d      	lsls	r5, r5, #1
    1aba:	07e4      	lsls	r4, r4, #31
    1abc:	086d      	lsrs	r5, r5, #1
    1abe:	4325      	orrs	r5, r4
    1ac0:	4640      	mov	r0, r8
    1ac2:	0029      	movs	r1, r5
    1ac4:	b007      	add	sp, #28
    1ac6:	bc3c      	pop	{r2, r3, r4, r5}
    1ac8:	4690      	mov	r8, r2
    1aca:	4699      	mov	r9, r3
    1acc:	46a2      	mov	sl, r4
    1ace:	46ab      	mov	fp, r5
    1ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ad2:	4303      	orrs	r3, r0
    1ad4:	d052      	beq.n	1b7c <__aeabi_dmul+0x1a4>
    1ad6:	465b      	mov	r3, fp
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d100      	bne.n	1ade <__aeabi_dmul+0x106>
    1adc:	e18a      	b.n	1df4 <__aeabi_dmul+0x41c>
    1ade:	4658      	mov	r0, fp
    1ae0:	f000 fb16 	bl	2110 <__clzsi2>
    1ae4:	0003      	movs	r3, r0
    1ae6:	3b0b      	subs	r3, #11
    1ae8:	2b1c      	cmp	r3, #28
    1aea:	dd00      	ble.n	1aee <__aeabi_dmul+0x116>
    1aec:	e17b      	b.n	1de6 <__aeabi_dmul+0x40e>
    1aee:	221d      	movs	r2, #29
    1af0:	1ad3      	subs	r3, r2, r3
    1af2:	003a      	movs	r2, r7
    1af4:	0001      	movs	r1, r0
    1af6:	465d      	mov	r5, fp
    1af8:	40da      	lsrs	r2, r3
    1afa:	3908      	subs	r1, #8
    1afc:	408d      	lsls	r5, r1
    1afe:	0013      	movs	r3, r2
    1b00:	408f      	lsls	r7, r1
    1b02:	432b      	orrs	r3, r5
    1b04:	469b      	mov	fp, r3
    1b06:	46b8      	mov	r8, r7
    1b08:	4b2e      	ldr	r3, [pc, #184]	; (1bc4 <__aeabi_dmul+0x1ec>)
    1b0a:	2700      	movs	r7, #0
    1b0c:	469c      	mov	ip, r3
    1b0e:	2300      	movs	r3, #0
    1b10:	4460      	add	r0, ip
    1b12:	4246      	negs	r6, r0
    1b14:	9301      	str	r3, [sp, #4]
    1b16:	e785      	b.n	1a24 <__aeabi_dmul+0x4c>
    1b18:	4652      	mov	r2, sl
    1b1a:	432a      	orrs	r2, r5
    1b1c:	d12c      	bne.n	1b78 <__aeabi_dmul+0x1a0>
    1b1e:	2500      	movs	r5, #0
    1b20:	2300      	movs	r3, #0
    1b22:	2202      	movs	r2, #2
    1b24:	e797      	b.n	1a56 <__aeabi_dmul+0x7e>
    1b26:	4652      	mov	r2, sl
    1b28:	432a      	orrs	r2, r5
    1b2a:	d021      	beq.n	1b70 <__aeabi_dmul+0x198>
    1b2c:	2d00      	cmp	r5, #0
    1b2e:	d100      	bne.n	1b32 <__aeabi_dmul+0x15a>
    1b30:	e154      	b.n	1ddc <__aeabi_dmul+0x404>
    1b32:	0028      	movs	r0, r5
    1b34:	f000 faec 	bl	2110 <__clzsi2>
    1b38:	0003      	movs	r3, r0
    1b3a:	3b0b      	subs	r3, #11
    1b3c:	2b1c      	cmp	r3, #28
    1b3e:	dd00      	ble.n	1b42 <__aeabi_dmul+0x16a>
    1b40:	e146      	b.n	1dd0 <__aeabi_dmul+0x3f8>
    1b42:	211d      	movs	r1, #29
    1b44:	1acb      	subs	r3, r1, r3
    1b46:	4651      	mov	r1, sl
    1b48:	0002      	movs	r2, r0
    1b4a:	40d9      	lsrs	r1, r3
    1b4c:	4653      	mov	r3, sl
    1b4e:	3a08      	subs	r2, #8
    1b50:	4095      	lsls	r5, r2
    1b52:	4093      	lsls	r3, r2
    1b54:	430d      	orrs	r5, r1
    1b56:	4a1b      	ldr	r2, [pc, #108]	; (1bc4 <__aeabi_dmul+0x1ec>)
    1b58:	4694      	mov	ip, r2
    1b5a:	4460      	add	r0, ip
    1b5c:	4240      	negs	r0, r0
    1b5e:	2200      	movs	r2, #0
    1b60:	e779      	b.n	1a56 <__aeabi_dmul+0x7e>
    1b62:	2401      	movs	r4, #1
    1b64:	2200      	movs	r2, #0
    1b66:	400c      	ands	r4, r1
    1b68:	4b12      	ldr	r3, [pc, #72]	; (1bb4 <__aeabi_dmul+0x1dc>)
    1b6a:	2500      	movs	r5, #0
    1b6c:	4690      	mov	r8, r2
    1b6e:	e799      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1b70:	2500      	movs	r5, #0
    1b72:	2300      	movs	r3, #0
    1b74:	2201      	movs	r2, #1
    1b76:	e76e      	b.n	1a56 <__aeabi_dmul+0x7e>
    1b78:	2203      	movs	r2, #3
    1b7a:	e76c      	b.n	1a56 <__aeabi_dmul+0x7e>
    1b7c:	2300      	movs	r3, #0
    1b7e:	469b      	mov	fp, r3
    1b80:	4698      	mov	r8, r3
    1b82:	3301      	adds	r3, #1
    1b84:	2704      	movs	r7, #4
    1b86:	9301      	str	r3, [sp, #4]
    1b88:	e74c      	b.n	1a24 <__aeabi_dmul+0x4c>
    1b8a:	2303      	movs	r3, #3
    1b8c:	270c      	movs	r7, #12
    1b8e:	9301      	str	r3, [sp, #4]
    1b90:	e748      	b.n	1a24 <__aeabi_dmul+0x4c>
    1b92:	2300      	movs	r3, #0
    1b94:	2580      	movs	r5, #128	; 0x80
    1b96:	4698      	mov	r8, r3
    1b98:	2400      	movs	r4, #0
    1b9a:	032d      	lsls	r5, r5, #12
    1b9c:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <__aeabi_dmul+0x1dc>)
    1b9e:	e781      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1ba0:	465d      	mov	r5, fp
    1ba2:	4643      	mov	r3, r8
    1ba4:	9a01      	ldr	r2, [sp, #4]
    1ba6:	e76f      	b.n	1a88 <__aeabi_dmul+0xb0>
    1ba8:	465d      	mov	r5, fp
    1baa:	4643      	mov	r3, r8
    1bac:	0021      	movs	r1, r4
    1bae:	9a01      	ldr	r2, [sp, #4]
    1bb0:	e76a      	b.n	1a88 <__aeabi_dmul+0xb0>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	000007ff 	.word	0x000007ff
    1bb8:	fffffc01 	.word	0xfffffc01
    1bbc:	0000253c 	.word	0x0000253c
    1bc0:	800fffff 	.word	0x800fffff
    1bc4:	000003f3 	.word	0x000003f3
    1bc8:	4642      	mov	r2, r8
    1bca:	0c12      	lsrs	r2, r2, #16
    1bcc:	4691      	mov	r9, r2
    1bce:	0c1a      	lsrs	r2, r3, #16
    1bd0:	4694      	mov	ip, r2
    1bd2:	4642      	mov	r2, r8
    1bd4:	0417      	lsls	r7, r2, #16
    1bd6:	464a      	mov	r2, r9
    1bd8:	041b      	lsls	r3, r3, #16
    1bda:	0c1b      	lsrs	r3, r3, #16
    1bdc:	435a      	muls	r2, r3
    1bde:	4660      	mov	r0, ip
    1be0:	4690      	mov	r8, r2
    1be2:	464a      	mov	r2, r9
    1be4:	4342      	muls	r2, r0
    1be6:	0010      	movs	r0, r2
    1be8:	9203      	str	r2, [sp, #12]
    1bea:	4662      	mov	r2, ip
    1bec:	001c      	movs	r4, r3
    1bee:	0c3f      	lsrs	r7, r7, #16
    1bf0:	437a      	muls	r2, r7
    1bf2:	437c      	muls	r4, r7
    1bf4:	4442      	add	r2, r8
    1bf6:	9201      	str	r2, [sp, #4]
    1bf8:	0c22      	lsrs	r2, r4, #16
    1bfa:	4692      	mov	sl, r2
    1bfc:	9a01      	ldr	r2, [sp, #4]
    1bfe:	4452      	add	r2, sl
    1c00:	4590      	cmp	r8, r2
    1c02:	d906      	bls.n	1c12 <__aeabi_dmul+0x23a>
    1c04:	4682      	mov	sl, r0
    1c06:	2080      	movs	r0, #128	; 0x80
    1c08:	0240      	lsls	r0, r0, #9
    1c0a:	4680      	mov	r8, r0
    1c0c:	44c2      	add	sl, r8
    1c0e:	4650      	mov	r0, sl
    1c10:	9003      	str	r0, [sp, #12]
    1c12:	0c10      	lsrs	r0, r2, #16
    1c14:	9004      	str	r0, [sp, #16]
    1c16:	4648      	mov	r0, r9
    1c18:	0424      	lsls	r4, r4, #16
    1c1a:	0c24      	lsrs	r4, r4, #16
    1c1c:	0412      	lsls	r2, r2, #16
    1c1e:	1912      	adds	r2, r2, r4
    1c20:	9205      	str	r2, [sp, #20]
    1c22:	0c2a      	lsrs	r2, r5, #16
    1c24:	042d      	lsls	r5, r5, #16
    1c26:	0c2d      	lsrs	r5, r5, #16
    1c28:	4368      	muls	r0, r5
    1c2a:	002c      	movs	r4, r5
    1c2c:	4682      	mov	sl, r0
    1c2e:	4648      	mov	r0, r9
    1c30:	437c      	muls	r4, r7
    1c32:	4350      	muls	r0, r2
    1c34:	4681      	mov	r9, r0
    1c36:	0c20      	lsrs	r0, r4, #16
    1c38:	4680      	mov	r8, r0
    1c3a:	4357      	muls	r7, r2
    1c3c:	4457      	add	r7, sl
    1c3e:	4447      	add	r7, r8
    1c40:	45ba      	cmp	sl, r7
    1c42:	d903      	bls.n	1c4c <__aeabi_dmul+0x274>
    1c44:	2080      	movs	r0, #128	; 0x80
    1c46:	0240      	lsls	r0, r0, #9
    1c48:	4680      	mov	r8, r0
    1c4a:	44c1      	add	r9, r8
    1c4c:	0c38      	lsrs	r0, r7, #16
    1c4e:	043f      	lsls	r7, r7, #16
    1c50:	46b8      	mov	r8, r7
    1c52:	4448      	add	r0, r9
    1c54:	0424      	lsls	r4, r4, #16
    1c56:	0c24      	lsrs	r4, r4, #16
    1c58:	9001      	str	r0, [sp, #4]
    1c5a:	9804      	ldr	r0, [sp, #16]
    1c5c:	44a0      	add	r8, r4
    1c5e:	4440      	add	r0, r8
    1c60:	9004      	str	r0, [sp, #16]
    1c62:	4658      	mov	r0, fp
    1c64:	0c00      	lsrs	r0, r0, #16
    1c66:	4681      	mov	r9, r0
    1c68:	4658      	mov	r0, fp
    1c6a:	0404      	lsls	r4, r0, #16
    1c6c:	0c20      	lsrs	r0, r4, #16
    1c6e:	4682      	mov	sl, r0
    1c70:	0007      	movs	r7, r0
    1c72:	4648      	mov	r0, r9
    1c74:	435f      	muls	r7, r3
    1c76:	464c      	mov	r4, r9
    1c78:	4343      	muls	r3, r0
    1c7a:	4660      	mov	r0, ip
    1c7c:	4360      	muls	r0, r4
    1c7e:	4664      	mov	r4, ip
    1c80:	4683      	mov	fp, r0
    1c82:	4650      	mov	r0, sl
    1c84:	4344      	muls	r4, r0
    1c86:	0c38      	lsrs	r0, r7, #16
    1c88:	4684      	mov	ip, r0
    1c8a:	18e4      	adds	r4, r4, r3
    1c8c:	4464      	add	r4, ip
    1c8e:	42a3      	cmp	r3, r4
    1c90:	d903      	bls.n	1c9a <__aeabi_dmul+0x2c2>
    1c92:	2380      	movs	r3, #128	; 0x80
    1c94:	025b      	lsls	r3, r3, #9
    1c96:	469c      	mov	ip, r3
    1c98:	44e3      	add	fp, ip
    1c9a:	4648      	mov	r0, r9
    1c9c:	043f      	lsls	r7, r7, #16
    1c9e:	0c23      	lsrs	r3, r4, #16
    1ca0:	0c3f      	lsrs	r7, r7, #16
    1ca2:	0424      	lsls	r4, r4, #16
    1ca4:	19e4      	adds	r4, r4, r7
    1ca6:	4657      	mov	r7, sl
    1ca8:	4368      	muls	r0, r5
    1caa:	436f      	muls	r7, r5
    1cac:	4684      	mov	ip, r0
    1cae:	464d      	mov	r5, r9
    1cb0:	4650      	mov	r0, sl
    1cb2:	4355      	muls	r5, r2
    1cb4:	4342      	muls	r2, r0
    1cb6:	0c38      	lsrs	r0, r7, #16
    1cb8:	4681      	mov	r9, r0
    1cba:	4462      	add	r2, ip
    1cbc:	444a      	add	r2, r9
    1cbe:	445b      	add	r3, fp
    1cc0:	4594      	cmp	ip, r2
    1cc2:	d903      	bls.n	1ccc <__aeabi_dmul+0x2f4>
    1cc4:	2080      	movs	r0, #128	; 0x80
    1cc6:	0240      	lsls	r0, r0, #9
    1cc8:	4684      	mov	ip, r0
    1cca:	4465      	add	r5, ip
    1ccc:	9803      	ldr	r0, [sp, #12]
    1cce:	043f      	lsls	r7, r7, #16
    1cd0:	4683      	mov	fp, r0
    1cd2:	9804      	ldr	r0, [sp, #16]
    1cd4:	0c3f      	lsrs	r7, r7, #16
    1cd6:	4684      	mov	ip, r0
    1cd8:	44e3      	add	fp, ip
    1cda:	45c3      	cmp	fp, r8
    1cdc:	4180      	sbcs	r0, r0
    1cde:	4240      	negs	r0, r0
    1ce0:	4682      	mov	sl, r0
    1ce2:	0410      	lsls	r0, r2, #16
    1ce4:	4684      	mov	ip, r0
    1ce6:	9801      	ldr	r0, [sp, #4]
    1ce8:	4467      	add	r7, ip
    1cea:	4684      	mov	ip, r0
    1cec:	4467      	add	r7, ip
    1cee:	44a3      	add	fp, r4
    1cf0:	46bc      	mov	ip, r7
    1cf2:	45a3      	cmp	fp, r4
    1cf4:	41a4      	sbcs	r4, r4
    1cf6:	4699      	mov	r9, r3
    1cf8:	44d4      	add	ip, sl
    1cfa:	4264      	negs	r4, r4
    1cfc:	4287      	cmp	r7, r0
    1cfe:	41bf      	sbcs	r7, r7
    1d00:	45d4      	cmp	ip, sl
    1d02:	4180      	sbcs	r0, r0
    1d04:	44e1      	add	r9, ip
    1d06:	46a0      	mov	r8, r4
    1d08:	4599      	cmp	r9, r3
    1d0a:	419b      	sbcs	r3, r3
    1d0c:	427f      	negs	r7, r7
    1d0e:	4240      	negs	r0, r0
    1d10:	44c8      	add	r8, r9
    1d12:	4307      	orrs	r7, r0
    1d14:	0c12      	lsrs	r2, r2, #16
    1d16:	18ba      	adds	r2, r7, r2
    1d18:	45a0      	cmp	r8, r4
    1d1a:	41a4      	sbcs	r4, r4
    1d1c:	425f      	negs	r7, r3
    1d1e:	003b      	movs	r3, r7
    1d20:	4264      	negs	r4, r4
    1d22:	4323      	orrs	r3, r4
    1d24:	18d7      	adds	r7, r2, r3
    1d26:	4643      	mov	r3, r8
    1d28:	197d      	adds	r5, r7, r5
    1d2a:	0ddb      	lsrs	r3, r3, #23
    1d2c:	026d      	lsls	r5, r5, #9
    1d2e:	431d      	orrs	r5, r3
    1d30:	465b      	mov	r3, fp
    1d32:	025a      	lsls	r2, r3, #9
    1d34:	9b05      	ldr	r3, [sp, #20]
    1d36:	431a      	orrs	r2, r3
    1d38:	1e53      	subs	r3, r2, #1
    1d3a:	419a      	sbcs	r2, r3
    1d3c:	465b      	mov	r3, fp
    1d3e:	0ddb      	lsrs	r3, r3, #23
    1d40:	431a      	orrs	r2, r3
    1d42:	4643      	mov	r3, r8
    1d44:	025b      	lsls	r3, r3, #9
    1d46:	4313      	orrs	r3, r2
    1d48:	01ea      	lsls	r2, r5, #7
    1d4a:	d507      	bpl.n	1d5c <__aeabi_dmul+0x384>
    1d4c:	2201      	movs	r2, #1
    1d4e:	085c      	lsrs	r4, r3, #1
    1d50:	4013      	ands	r3, r2
    1d52:	4323      	orrs	r3, r4
    1d54:	07ea      	lsls	r2, r5, #31
    1d56:	9e02      	ldr	r6, [sp, #8]
    1d58:	4313      	orrs	r3, r2
    1d5a:	086d      	lsrs	r5, r5, #1
    1d5c:	4a57      	ldr	r2, [pc, #348]	; (1ebc <__aeabi_dmul+0x4e4>)
    1d5e:	18b2      	adds	r2, r6, r2
    1d60:	2a00      	cmp	r2, #0
    1d62:	dd4b      	ble.n	1dfc <__aeabi_dmul+0x424>
    1d64:	0758      	lsls	r0, r3, #29
    1d66:	d009      	beq.n	1d7c <__aeabi_dmul+0x3a4>
    1d68:	200f      	movs	r0, #15
    1d6a:	4018      	ands	r0, r3
    1d6c:	2804      	cmp	r0, #4
    1d6e:	d005      	beq.n	1d7c <__aeabi_dmul+0x3a4>
    1d70:	1d18      	adds	r0, r3, #4
    1d72:	4298      	cmp	r0, r3
    1d74:	419b      	sbcs	r3, r3
    1d76:	425b      	negs	r3, r3
    1d78:	18ed      	adds	r5, r5, r3
    1d7a:	0003      	movs	r3, r0
    1d7c:	01e8      	lsls	r0, r5, #7
    1d7e:	d504      	bpl.n	1d8a <__aeabi_dmul+0x3b2>
    1d80:	4a4f      	ldr	r2, [pc, #316]	; (1ec0 <__aeabi_dmul+0x4e8>)
    1d82:	4015      	ands	r5, r2
    1d84:	2280      	movs	r2, #128	; 0x80
    1d86:	00d2      	lsls	r2, r2, #3
    1d88:	18b2      	adds	r2, r6, r2
    1d8a:	484e      	ldr	r0, [pc, #312]	; (1ec4 <__aeabi_dmul+0x4ec>)
    1d8c:	4282      	cmp	r2, r0
    1d8e:	dd00      	ble.n	1d92 <__aeabi_dmul+0x3ba>
    1d90:	e6e7      	b.n	1b62 <__aeabi_dmul+0x18a>
    1d92:	2401      	movs	r4, #1
    1d94:	08db      	lsrs	r3, r3, #3
    1d96:	0768      	lsls	r0, r5, #29
    1d98:	4318      	orrs	r0, r3
    1d9a:	026d      	lsls	r5, r5, #9
    1d9c:	0553      	lsls	r3, r2, #21
    1d9e:	4680      	mov	r8, r0
    1da0:	0b2d      	lsrs	r5, r5, #12
    1da2:	0d5b      	lsrs	r3, r3, #21
    1da4:	400c      	ands	r4, r1
    1da6:	e67d      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1da8:	2280      	movs	r2, #128	; 0x80
    1daa:	4659      	mov	r1, fp
    1dac:	0312      	lsls	r2, r2, #12
    1dae:	4211      	tst	r1, r2
    1db0:	d008      	beq.n	1dc4 <__aeabi_dmul+0x3ec>
    1db2:	4215      	tst	r5, r2
    1db4:	d106      	bne.n	1dc4 <__aeabi_dmul+0x3ec>
    1db6:	4315      	orrs	r5, r2
    1db8:	032d      	lsls	r5, r5, #12
    1dba:	4698      	mov	r8, r3
    1dbc:	0b2d      	lsrs	r5, r5, #12
    1dbe:	464c      	mov	r4, r9
    1dc0:	4b41      	ldr	r3, [pc, #260]	; (1ec8 <__aeabi_dmul+0x4f0>)
    1dc2:	e66f      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1dc4:	465d      	mov	r5, fp
    1dc6:	4315      	orrs	r5, r2
    1dc8:	032d      	lsls	r5, r5, #12
    1dca:	0b2d      	lsrs	r5, r5, #12
    1dcc:	4b3e      	ldr	r3, [pc, #248]	; (1ec8 <__aeabi_dmul+0x4f0>)
    1dce:	e669      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1dd0:	0003      	movs	r3, r0
    1dd2:	4655      	mov	r5, sl
    1dd4:	3b28      	subs	r3, #40	; 0x28
    1dd6:	409d      	lsls	r5, r3
    1dd8:	2300      	movs	r3, #0
    1dda:	e6bc      	b.n	1b56 <__aeabi_dmul+0x17e>
    1ddc:	4650      	mov	r0, sl
    1dde:	f000 f997 	bl	2110 <__clzsi2>
    1de2:	3020      	adds	r0, #32
    1de4:	e6a8      	b.n	1b38 <__aeabi_dmul+0x160>
    1de6:	0003      	movs	r3, r0
    1de8:	3b28      	subs	r3, #40	; 0x28
    1dea:	409f      	lsls	r7, r3
    1dec:	2300      	movs	r3, #0
    1dee:	46bb      	mov	fp, r7
    1df0:	4698      	mov	r8, r3
    1df2:	e689      	b.n	1b08 <__aeabi_dmul+0x130>
    1df4:	f000 f98c 	bl	2110 <__clzsi2>
    1df8:	3020      	adds	r0, #32
    1dfa:	e673      	b.n	1ae4 <__aeabi_dmul+0x10c>
    1dfc:	2401      	movs	r4, #1
    1dfe:	1aa6      	subs	r6, r4, r2
    1e00:	2e38      	cmp	r6, #56	; 0x38
    1e02:	dd07      	ble.n	1e14 <__aeabi_dmul+0x43c>
    1e04:	2200      	movs	r2, #0
    1e06:	400c      	ands	r4, r1
    1e08:	2300      	movs	r3, #0
    1e0a:	2500      	movs	r5, #0
    1e0c:	4690      	mov	r8, r2
    1e0e:	e649      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1e10:	9e02      	ldr	r6, [sp, #8]
    1e12:	e7a3      	b.n	1d5c <__aeabi_dmul+0x384>
    1e14:	2e1f      	cmp	r6, #31
    1e16:	dc20      	bgt.n	1e5a <__aeabi_dmul+0x482>
    1e18:	2220      	movs	r2, #32
    1e1a:	002c      	movs	r4, r5
    1e1c:	0018      	movs	r0, r3
    1e1e:	1b92      	subs	r2, r2, r6
    1e20:	40f0      	lsrs	r0, r6
    1e22:	4094      	lsls	r4, r2
    1e24:	4093      	lsls	r3, r2
    1e26:	4304      	orrs	r4, r0
    1e28:	1e58      	subs	r0, r3, #1
    1e2a:	4183      	sbcs	r3, r0
    1e2c:	431c      	orrs	r4, r3
    1e2e:	40f5      	lsrs	r5, r6
    1e30:	0763      	lsls	r3, r4, #29
    1e32:	d009      	beq.n	1e48 <__aeabi_dmul+0x470>
    1e34:	230f      	movs	r3, #15
    1e36:	4023      	ands	r3, r4
    1e38:	2b04      	cmp	r3, #4
    1e3a:	d005      	beq.n	1e48 <__aeabi_dmul+0x470>
    1e3c:	0023      	movs	r3, r4
    1e3e:	1d1c      	adds	r4, r3, #4
    1e40:	429c      	cmp	r4, r3
    1e42:	4192      	sbcs	r2, r2
    1e44:	4252      	negs	r2, r2
    1e46:	18ad      	adds	r5, r5, r2
    1e48:	022b      	lsls	r3, r5, #8
    1e4a:	d51f      	bpl.n	1e8c <__aeabi_dmul+0x4b4>
    1e4c:	2401      	movs	r4, #1
    1e4e:	2200      	movs	r2, #0
    1e50:	400c      	ands	r4, r1
    1e52:	2301      	movs	r3, #1
    1e54:	2500      	movs	r5, #0
    1e56:	4690      	mov	r8, r2
    1e58:	e624      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1e5a:	201f      	movs	r0, #31
    1e5c:	002c      	movs	r4, r5
    1e5e:	4240      	negs	r0, r0
    1e60:	1a82      	subs	r2, r0, r2
    1e62:	40d4      	lsrs	r4, r2
    1e64:	2e20      	cmp	r6, #32
    1e66:	d01c      	beq.n	1ea2 <__aeabi_dmul+0x4ca>
    1e68:	2240      	movs	r2, #64	; 0x40
    1e6a:	1b96      	subs	r6, r2, r6
    1e6c:	40b5      	lsls	r5, r6
    1e6e:	432b      	orrs	r3, r5
    1e70:	1e58      	subs	r0, r3, #1
    1e72:	4183      	sbcs	r3, r0
    1e74:	2007      	movs	r0, #7
    1e76:	4323      	orrs	r3, r4
    1e78:	4018      	ands	r0, r3
    1e7a:	2500      	movs	r5, #0
    1e7c:	2800      	cmp	r0, #0
    1e7e:	d009      	beq.n	1e94 <__aeabi_dmul+0x4bc>
    1e80:	220f      	movs	r2, #15
    1e82:	2500      	movs	r5, #0
    1e84:	401a      	ands	r2, r3
    1e86:	001c      	movs	r4, r3
    1e88:	2a04      	cmp	r2, #4
    1e8a:	d1d8      	bne.n	1e3e <__aeabi_dmul+0x466>
    1e8c:	0023      	movs	r3, r4
    1e8e:	0768      	lsls	r0, r5, #29
    1e90:	026d      	lsls	r5, r5, #9
    1e92:	0b2d      	lsrs	r5, r5, #12
    1e94:	2401      	movs	r4, #1
    1e96:	08db      	lsrs	r3, r3, #3
    1e98:	4303      	orrs	r3, r0
    1e9a:	4698      	mov	r8, r3
    1e9c:	400c      	ands	r4, r1
    1e9e:	2300      	movs	r3, #0
    1ea0:	e600      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1ea2:	2500      	movs	r5, #0
    1ea4:	e7e3      	b.n	1e6e <__aeabi_dmul+0x496>
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	2401      	movs	r4, #1
    1eaa:	0312      	lsls	r2, r2, #12
    1eac:	4315      	orrs	r5, r2
    1eae:	032d      	lsls	r5, r5, #12
    1eb0:	4698      	mov	r8, r3
    1eb2:	0b2d      	lsrs	r5, r5, #12
    1eb4:	400c      	ands	r4, r1
    1eb6:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <__aeabi_dmul+0x4f0>)
    1eb8:	e5f4      	b.n	1aa4 <__aeabi_dmul+0xcc>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	000003ff 	.word	0x000003ff
    1ec0:	feffffff 	.word	0xfeffffff
    1ec4:	000007fe 	.word	0x000007fe
    1ec8:	000007ff 	.word	0x000007ff

00001ecc <__aeabi_i2d>:
    1ecc:	b570      	push	{r4, r5, r6, lr}
    1ece:	2800      	cmp	r0, #0
    1ed0:	d030      	beq.n	1f34 <__aeabi_i2d+0x68>
    1ed2:	17c3      	asrs	r3, r0, #31
    1ed4:	18c4      	adds	r4, r0, r3
    1ed6:	405c      	eors	r4, r3
    1ed8:	0fc5      	lsrs	r5, r0, #31
    1eda:	0020      	movs	r0, r4
    1edc:	f000 f918 	bl	2110 <__clzsi2>
    1ee0:	4b17      	ldr	r3, [pc, #92]	; (1f40 <__aeabi_i2d+0x74>)
    1ee2:	4a18      	ldr	r2, [pc, #96]	; (1f44 <__aeabi_i2d+0x78>)
    1ee4:	1a1b      	subs	r3, r3, r0
    1ee6:	1ad2      	subs	r2, r2, r3
    1ee8:	2a1f      	cmp	r2, #31
    1eea:	dd18      	ble.n	1f1e <__aeabi_i2d+0x52>
    1eec:	4a16      	ldr	r2, [pc, #88]	; (1f48 <__aeabi_i2d+0x7c>)
    1eee:	1ad2      	subs	r2, r2, r3
    1ef0:	4094      	lsls	r4, r2
    1ef2:	2200      	movs	r2, #0
    1ef4:	0324      	lsls	r4, r4, #12
    1ef6:	055b      	lsls	r3, r3, #21
    1ef8:	0b24      	lsrs	r4, r4, #12
    1efa:	0d5b      	lsrs	r3, r3, #21
    1efc:	2100      	movs	r1, #0
    1efe:	0010      	movs	r0, r2
    1f00:	0324      	lsls	r4, r4, #12
    1f02:	0d0a      	lsrs	r2, r1, #20
    1f04:	0512      	lsls	r2, r2, #20
    1f06:	0b24      	lsrs	r4, r4, #12
    1f08:	4314      	orrs	r4, r2
    1f0a:	4a10      	ldr	r2, [pc, #64]	; (1f4c <__aeabi_i2d+0x80>)
    1f0c:	051b      	lsls	r3, r3, #20
    1f0e:	4014      	ands	r4, r2
    1f10:	431c      	orrs	r4, r3
    1f12:	0064      	lsls	r4, r4, #1
    1f14:	07ed      	lsls	r5, r5, #31
    1f16:	0864      	lsrs	r4, r4, #1
    1f18:	432c      	orrs	r4, r5
    1f1a:	0021      	movs	r1, r4
    1f1c:	bd70      	pop	{r4, r5, r6, pc}
    1f1e:	0021      	movs	r1, r4
    1f20:	4091      	lsls	r1, r2
    1f22:	000a      	movs	r2, r1
    1f24:	210b      	movs	r1, #11
    1f26:	1a08      	subs	r0, r1, r0
    1f28:	40c4      	lsrs	r4, r0
    1f2a:	055b      	lsls	r3, r3, #21
    1f2c:	0324      	lsls	r4, r4, #12
    1f2e:	0b24      	lsrs	r4, r4, #12
    1f30:	0d5b      	lsrs	r3, r3, #21
    1f32:	e7e3      	b.n	1efc <__aeabi_i2d+0x30>
    1f34:	2500      	movs	r5, #0
    1f36:	2300      	movs	r3, #0
    1f38:	2400      	movs	r4, #0
    1f3a:	2200      	movs	r2, #0
    1f3c:	e7de      	b.n	1efc <__aeabi_i2d+0x30>
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	0000041e 	.word	0x0000041e
    1f44:	00000433 	.word	0x00000433
    1f48:	00000413 	.word	0x00000413
    1f4c:	800fffff 	.word	0x800fffff

00001f50 <__aeabi_f2d>:
    1f50:	0042      	lsls	r2, r0, #1
    1f52:	0e12      	lsrs	r2, r2, #24
    1f54:	1c51      	adds	r1, r2, #1
    1f56:	0243      	lsls	r3, r0, #9
    1f58:	b2c9      	uxtb	r1, r1
    1f5a:	b570      	push	{r4, r5, r6, lr}
    1f5c:	0a5d      	lsrs	r5, r3, #9
    1f5e:	0fc4      	lsrs	r4, r0, #31
    1f60:	2901      	cmp	r1, #1
    1f62:	dd15      	ble.n	1f90 <__aeabi_f2d+0x40>
    1f64:	21e0      	movs	r1, #224	; 0xe0
    1f66:	0089      	lsls	r1, r1, #2
    1f68:	468c      	mov	ip, r1
    1f6a:	076d      	lsls	r5, r5, #29
    1f6c:	0b1b      	lsrs	r3, r3, #12
    1f6e:	4462      	add	r2, ip
    1f70:	2100      	movs	r1, #0
    1f72:	0028      	movs	r0, r5
    1f74:	0d0d      	lsrs	r5, r1, #20
    1f76:	052d      	lsls	r5, r5, #20
    1f78:	432b      	orrs	r3, r5
    1f7a:	4d1c      	ldr	r5, [pc, #112]	; (1fec <__aeabi_f2d+0x9c>)
    1f7c:	0552      	lsls	r2, r2, #21
    1f7e:	402b      	ands	r3, r5
    1f80:	0852      	lsrs	r2, r2, #1
    1f82:	4313      	orrs	r3, r2
    1f84:	005b      	lsls	r3, r3, #1
    1f86:	07e4      	lsls	r4, r4, #31
    1f88:	085b      	lsrs	r3, r3, #1
    1f8a:	4323      	orrs	r3, r4
    1f8c:	0019      	movs	r1, r3
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
    1f90:	2a00      	cmp	r2, #0
    1f92:	d115      	bne.n	1fc0 <__aeabi_f2d+0x70>
    1f94:	2d00      	cmp	r5, #0
    1f96:	d01f      	beq.n	1fd8 <__aeabi_f2d+0x88>
    1f98:	0028      	movs	r0, r5
    1f9a:	f000 f8b9 	bl	2110 <__clzsi2>
    1f9e:	280a      	cmp	r0, #10
    1fa0:	dc1d      	bgt.n	1fde <__aeabi_f2d+0x8e>
    1fa2:	230b      	movs	r3, #11
    1fa4:	002a      	movs	r2, r5
    1fa6:	1a1b      	subs	r3, r3, r0
    1fa8:	40da      	lsrs	r2, r3
    1faa:	0013      	movs	r3, r2
    1fac:	0002      	movs	r2, r0
    1fae:	3215      	adds	r2, #21
    1fb0:	4095      	lsls	r5, r2
    1fb2:	4a0f      	ldr	r2, [pc, #60]	; (1ff0 <__aeabi_f2d+0xa0>)
    1fb4:	031b      	lsls	r3, r3, #12
    1fb6:	1a12      	subs	r2, r2, r0
    1fb8:	0552      	lsls	r2, r2, #21
    1fba:	0b1b      	lsrs	r3, r3, #12
    1fbc:	0d52      	lsrs	r2, r2, #21
    1fbe:	e7d7      	b.n	1f70 <__aeabi_f2d+0x20>
    1fc0:	2d00      	cmp	r5, #0
    1fc2:	d006      	beq.n	1fd2 <__aeabi_f2d+0x82>
    1fc4:	2280      	movs	r2, #128	; 0x80
    1fc6:	0b1b      	lsrs	r3, r3, #12
    1fc8:	0312      	lsls	r2, r2, #12
    1fca:	4313      	orrs	r3, r2
    1fcc:	076d      	lsls	r5, r5, #29
    1fce:	4a09      	ldr	r2, [pc, #36]	; (1ff4 <__aeabi_f2d+0xa4>)
    1fd0:	e7ce      	b.n	1f70 <__aeabi_f2d+0x20>
    1fd2:	4a08      	ldr	r2, [pc, #32]	; (1ff4 <__aeabi_f2d+0xa4>)
    1fd4:	2300      	movs	r3, #0
    1fd6:	e7cb      	b.n	1f70 <__aeabi_f2d+0x20>
    1fd8:	2200      	movs	r2, #0
    1fda:	2300      	movs	r3, #0
    1fdc:	e7c8      	b.n	1f70 <__aeabi_f2d+0x20>
    1fde:	0003      	movs	r3, r0
    1fe0:	3b0b      	subs	r3, #11
    1fe2:	409d      	lsls	r5, r3
    1fe4:	002b      	movs	r3, r5
    1fe6:	2500      	movs	r5, #0
    1fe8:	e7e3      	b.n	1fb2 <__aeabi_f2d+0x62>
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	800fffff 	.word	0x800fffff
    1ff0:	00000389 	.word	0x00000389
    1ff4:	000007ff 	.word	0x000007ff

00001ff8 <__aeabi_d2f>:
    1ff8:	004b      	lsls	r3, r1, #1
    1ffa:	b570      	push	{r4, r5, r6, lr}
    1ffc:	0d5e      	lsrs	r6, r3, #21
    1ffe:	030c      	lsls	r4, r1, #12
    2000:	1c75      	adds	r5, r6, #1
    2002:	0a64      	lsrs	r4, r4, #9
    2004:	0f42      	lsrs	r2, r0, #29
    2006:	056d      	lsls	r5, r5, #21
    2008:	4322      	orrs	r2, r4
    200a:	0fc9      	lsrs	r1, r1, #31
    200c:	00c4      	lsls	r4, r0, #3
    200e:	0d6d      	lsrs	r5, r5, #21
    2010:	2d01      	cmp	r5, #1
    2012:	dd2a      	ble.n	206a <STACK_SIZE+0x6a>
    2014:	4b3b      	ldr	r3, [pc, #236]	; (2104 <STACK_SIZE+0x104>)
    2016:	18f3      	adds	r3, r6, r3
    2018:	2bfe      	cmp	r3, #254	; 0xfe
    201a:	dc1a      	bgt.n	2052 <STACK_SIZE+0x52>
    201c:	2b00      	cmp	r3, #0
    201e:	dd42      	ble.n	20a6 <STACK_SIZE+0xa6>
    2020:	0180      	lsls	r0, r0, #6
    2022:	1e45      	subs	r5, r0, #1
    2024:	41a8      	sbcs	r0, r5
    2026:	00d2      	lsls	r2, r2, #3
    2028:	4310      	orrs	r0, r2
    202a:	0f62      	lsrs	r2, r4, #29
    202c:	4302      	orrs	r2, r0
    202e:	0750      	lsls	r0, r2, #29
    2030:	d004      	beq.n	203c <STACK_SIZE+0x3c>
    2032:	200f      	movs	r0, #15
    2034:	4010      	ands	r0, r2
    2036:	2804      	cmp	r0, #4
    2038:	d000      	beq.n	203c <STACK_SIZE+0x3c>
    203a:	3204      	adds	r2, #4
    203c:	2080      	movs	r0, #128	; 0x80
    203e:	04c0      	lsls	r0, r0, #19
    2040:	4010      	ands	r0, r2
    2042:	d021      	beq.n	2088 <STACK_SIZE+0x88>
    2044:	3301      	adds	r3, #1
    2046:	2bff      	cmp	r3, #255	; 0xff
    2048:	d003      	beq.n	2052 <STACK_SIZE+0x52>
    204a:	0192      	lsls	r2, r2, #6
    204c:	0a52      	lsrs	r2, r2, #9
    204e:	b2db      	uxtb	r3, r3
    2050:	e001      	b.n	2056 <STACK_SIZE+0x56>
    2052:	23ff      	movs	r3, #255	; 0xff
    2054:	2200      	movs	r2, #0
    2056:	0252      	lsls	r2, r2, #9
    2058:	0a52      	lsrs	r2, r2, #9
    205a:	05db      	lsls	r3, r3, #23
    205c:	4313      	orrs	r3, r2
    205e:	005b      	lsls	r3, r3, #1
    2060:	07c9      	lsls	r1, r1, #31
    2062:	085b      	lsrs	r3, r3, #1
    2064:	430b      	orrs	r3, r1
    2066:	0018      	movs	r0, r3
    2068:	bd70      	pop	{r4, r5, r6, pc}
    206a:	2e00      	cmp	r6, #0
    206c:	d007      	beq.n	207e <STACK_SIZE+0x7e>
    206e:	4314      	orrs	r4, r2
    2070:	d0ef      	beq.n	2052 <STACK_SIZE+0x52>
    2072:	2080      	movs	r0, #128	; 0x80
    2074:	00d2      	lsls	r2, r2, #3
    2076:	0480      	lsls	r0, r0, #18
    2078:	4302      	orrs	r2, r0
    207a:	23ff      	movs	r3, #255	; 0xff
    207c:	e7d7      	b.n	202e <STACK_SIZE+0x2e>
    207e:	4322      	orrs	r2, r4
    2080:	2300      	movs	r3, #0
    2082:	2a00      	cmp	r2, #0
    2084:	d003      	beq.n	208e <STACK_SIZE+0x8e>
    2086:	2205      	movs	r2, #5
    2088:	08d2      	lsrs	r2, r2, #3
    208a:	2bff      	cmp	r3, #255	; 0xff
    208c:	d003      	beq.n	2096 <STACK_SIZE+0x96>
    208e:	0252      	lsls	r2, r2, #9
    2090:	0a52      	lsrs	r2, r2, #9
    2092:	b2db      	uxtb	r3, r3
    2094:	e7df      	b.n	2056 <STACK_SIZE+0x56>
    2096:	2a00      	cmp	r2, #0
    2098:	d032      	beq.n	2100 <STACK_SIZE+0x100>
    209a:	2080      	movs	r0, #128	; 0x80
    209c:	03c0      	lsls	r0, r0, #15
    209e:	4302      	orrs	r2, r0
    20a0:	0252      	lsls	r2, r2, #9
    20a2:	0a52      	lsrs	r2, r2, #9
    20a4:	e7d7      	b.n	2056 <STACK_SIZE+0x56>
    20a6:	0018      	movs	r0, r3
    20a8:	3017      	adds	r0, #23
    20aa:	db14      	blt.n	20d6 <STACK_SIZE+0xd6>
    20ac:	2080      	movs	r0, #128	; 0x80
    20ae:	0400      	lsls	r0, r0, #16
    20b0:	4302      	orrs	r2, r0
    20b2:	201e      	movs	r0, #30
    20b4:	1ac0      	subs	r0, r0, r3
    20b6:	281f      	cmp	r0, #31
    20b8:	dc0f      	bgt.n	20da <STACK_SIZE+0xda>
    20ba:	0025      	movs	r5, r4
    20bc:	4b12      	ldr	r3, [pc, #72]	; (2108 <STACK_SIZE+0x108>)
    20be:	18f3      	adds	r3, r6, r3
    20c0:	409d      	lsls	r5, r3
    20c2:	1e6e      	subs	r6, r5, #1
    20c4:	41b5      	sbcs	r5, r6
    20c6:	409a      	lsls	r2, r3
    20c8:	002b      	movs	r3, r5
    20ca:	4313      	orrs	r3, r2
    20cc:	0022      	movs	r2, r4
    20ce:	40c2      	lsrs	r2, r0
    20d0:	431a      	orrs	r2, r3
    20d2:	2300      	movs	r3, #0
    20d4:	e7ab      	b.n	202e <STACK_SIZE+0x2e>
    20d6:	2300      	movs	r3, #0
    20d8:	e7d5      	b.n	2086 <STACK_SIZE+0x86>
    20da:	2502      	movs	r5, #2
    20dc:	426d      	negs	r5, r5
    20de:	1aeb      	subs	r3, r5, r3
    20e0:	0015      	movs	r5, r2
    20e2:	40dd      	lsrs	r5, r3
    20e4:	2820      	cmp	r0, #32
    20e6:	d009      	beq.n	20fc <STACK_SIZE+0xfc>
    20e8:	4b08      	ldr	r3, [pc, #32]	; (210c <STACK_SIZE+0x10c>)
    20ea:	18f3      	adds	r3, r6, r3
    20ec:	409a      	lsls	r2, r3
    20ee:	4314      	orrs	r4, r2
    20f0:	1e62      	subs	r2, r4, #1
    20f2:	4194      	sbcs	r4, r2
    20f4:	0022      	movs	r2, r4
    20f6:	2300      	movs	r3, #0
    20f8:	432a      	orrs	r2, r5
    20fa:	e798      	b.n	202e <STACK_SIZE+0x2e>
    20fc:	2200      	movs	r2, #0
    20fe:	e7f6      	b.n	20ee <STACK_SIZE+0xee>
    2100:	2200      	movs	r2, #0
    2102:	e7a8      	b.n	2056 <STACK_SIZE+0x56>
    2104:	fffffc80 	.word	0xfffffc80
    2108:	fffffc82 	.word	0xfffffc82
    210c:	fffffca2 	.word	0xfffffca2

00002110 <__clzsi2>:
    2110:	211c      	movs	r1, #28
    2112:	2301      	movs	r3, #1
    2114:	041b      	lsls	r3, r3, #16
    2116:	4298      	cmp	r0, r3
    2118:	d301      	bcc.n	211e <__clzsi2+0xe>
    211a:	0c00      	lsrs	r0, r0, #16
    211c:	3910      	subs	r1, #16
    211e:	0a1b      	lsrs	r3, r3, #8
    2120:	4298      	cmp	r0, r3
    2122:	d301      	bcc.n	2128 <__clzsi2+0x18>
    2124:	0a00      	lsrs	r0, r0, #8
    2126:	3908      	subs	r1, #8
    2128:	091b      	lsrs	r3, r3, #4
    212a:	4298      	cmp	r0, r3
    212c:	d301      	bcc.n	2132 <__clzsi2+0x22>
    212e:	0900      	lsrs	r0, r0, #4
    2130:	3904      	subs	r1, #4
    2132:	a202      	add	r2, pc, #8	; (adr r2, 213c <__clzsi2+0x2c>)
    2134:	5c10      	ldrb	r0, [r2, r0]
    2136:	1840      	adds	r0, r0, r1
    2138:	4770      	bx	lr
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	02020304 	.word	0x02020304
    2140:	01010101 	.word	0x01010101
	...

0000214c <__libc_init_array>:
    214c:	b570      	push	{r4, r5, r6, lr}
    214e:	4e0d      	ldr	r6, [pc, #52]	; (2184 <__libc_init_array+0x38>)
    2150:	4d0d      	ldr	r5, [pc, #52]	; (2188 <__libc_init_array+0x3c>)
    2152:	2400      	movs	r4, #0
    2154:	1bad      	subs	r5, r5, r6
    2156:	10ad      	asrs	r5, r5, #2
    2158:	d005      	beq.n	2166 <__libc_init_array+0x1a>
    215a:	00a3      	lsls	r3, r4, #2
    215c:	58f3      	ldr	r3, [r6, r3]
    215e:	3401      	adds	r4, #1
    2160:	4798      	blx	r3
    2162:	42a5      	cmp	r5, r4
    2164:	d1f9      	bne.n	215a <__libc_init_array+0xe>
    2166:	f000 fa0d 	bl	2584 <_init>
    216a:	4e08      	ldr	r6, [pc, #32]	; (218c <__libc_init_array+0x40>)
    216c:	4d08      	ldr	r5, [pc, #32]	; (2190 <__libc_init_array+0x44>)
    216e:	2400      	movs	r4, #0
    2170:	1bad      	subs	r5, r5, r6
    2172:	10ad      	asrs	r5, r5, #2
    2174:	d005      	beq.n	2182 <__libc_init_array+0x36>
    2176:	00a3      	lsls	r3, r4, #2
    2178:	58f3      	ldr	r3, [r6, r3]
    217a:	3401      	adds	r4, #1
    217c:	4798      	blx	r3
    217e:	42a5      	cmp	r5, r4
    2180:	d1f9      	bne.n	2176 <__libc_init_array+0x2a>
    2182:	bd70      	pop	{r4, r5, r6, pc}
    2184:	00002590 	.word	0x00002590
    2188:	00002590 	.word	0x00002590
    218c:	00002590 	.word	0x00002590
    2190:	00002598 	.word	0x00002598

00002194 <memset>:
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	0783      	lsls	r3, r0, #30
    2198:	d03f      	beq.n	221a <memset+0x86>
    219a:	1e54      	subs	r4, r2, #1
    219c:	2a00      	cmp	r2, #0
    219e:	d03b      	beq.n	2218 <memset+0x84>
    21a0:	b2ce      	uxtb	r6, r1
    21a2:	0003      	movs	r3, r0
    21a4:	2503      	movs	r5, #3
    21a6:	e003      	b.n	21b0 <memset+0x1c>
    21a8:	1e62      	subs	r2, r4, #1
    21aa:	2c00      	cmp	r4, #0
    21ac:	d034      	beq.n	2218 <memset+0x84>
    21ae:	0014      	movs	r4, r2
    21b0:	3301      	adds	r3, #1
    21b2:	1e5a      	subs	r2, r3, #1
    21b4:	7016      	strb	r6, [r2, #0]
    21b6:	422b      	tst	r3, r5
    21b8:	d1f6      	bne.n	21a8 <memset+0x14>
    21ba:	2c03      	cmp	r4, #3
    21bc:	d924      	bls.n	2208 <memset+0x74>
    21be:	25ff      	movs	r5, #255	; 0xff
    21c0:	400d      	ands	r5, r1
    21c2:	022a      	lsls	r2, r5, #8
    21c4:	4315      	orrs	r5, r2
    21c6:	042a      	lsls	r2, r5, #16
    21c8:	4315      	orrs	r5, r2
    21ca:	2c0f      	cmp	r4, #15
    21cc:	d911      	bls.n	21f2 <memset+0x5e>
    21ce:	0026      	movs	r6, r4
    21d0:	3e10      	subs	r6, #16
    21d2:	0936      	lsrs	r6, r6, #4
    21d4:	3601      	adds	r6, #1
    21d6:	0136      	lsls	r6, r6, #4
    21d8:	001a      	movs	r2, r3
    21da:	199b      	adds	r3, r3, r6
    21dc:	6015      	str	r5, [r2, #0]
    21de:	6055      	str	r5, [r2, #4]
    21e0:	6095      	str	r5, [r2, #8]
    21e2:	60d5      	str	r5, [r2, #12]
    21e4:	3210      	adds	r2, #16
    21e6:	4293      	cmp	r3, r2
    21e8:	d1f8      	bne.n	21dc <memset+0x48>
    21ea:	220f      	movs	r2, #15
    21ec:	4014      	ands	r4, r2
    21ee:	2c03      	cmp	r4, #3
    21f0:	d90a      	bls.n	2208 <memset+0x74>
    21f2:	1f26      	subs	r6, r4, #4
    21f4:	08b6      	lsrs	r6, r6, #2
    21f6:	3601      	adds	r6, #1
    21f8:	00b6      	lsls	r6, r6, #2
    21fa:	001a      	movs	r2, r3
    21fc:	199b      	adds	r3, r3, r6
    21fe:	c220      	stmia	r2!, {r5}
    2200:	4293      	cmp	r3, r2
    2202:	d1fc      	bne.n	21fe <memset+0x6a>
    2204:	2203      	movs	r2, #3
    2206:	4014      	ands	r4, r2
    2208:	2c00      	cmp	r4, #0
    220a:	d005      	beq.n	2218 <memset+0x84>
    220c:	b2c9      	uxtb	r1, r1
    220e:	191c      	adds	r4, r3, r4
    2210:	7019      	strb	r1, [r3, #0]
    2212:	3301      	adds	r3, #1
    2214:	429c      	cmp	r4, r3
    2216:	d1fb      	bne.n	2210 <memset+0x7c>
    2218:	bd70      	pop	{r4, r5, r6, pc}
    221a:	0014      	movs	r4, r2
    221c:	0003      	movs	r3, r0
    221e:	e7cc      	b.n	21ba <memset+0x26>

00002220 <register_fini>:
    2220:	4b03      	ldr	r3, [pc, #12]	; (2230 <register_fini+0x10>)
    2222:	b510      	push	{r4, lr}
    2224:	2b00      	cmp	r3, #0
    2226:	d002      	beq.n	222e <register_fini+0xe>
    2228:	4802      	ldr	r0, [pc, #8]	; (2234 <register_fini+0x14>)
    222a:	f000 f805 	bl	2238 <atexit>
    222e:	bd10      	pop	{r4, pc}
    2230:	00000000 	.word	0x00000000
    2234:	00002249 	.word	0x00002249

00002238 <atexit>:
    2238:	b510      	push	{r4, lr}
    223a:	0001      	movs	r1, r0
    223c:	2300      	movs	r3, #0
    223e:	2200      	movs	r2, #0
    2240:	2000      	movs	r0, #0
    2242:	f000 f81b 	bl	227c <__register_exitproc>
    2246:	bd10      	pop	{r4, pc}

00002248 <__libc_fini_array>:
    2248:	b570      	push	{r4, r5, r6, lr}
    224a:	4b09      	ldr	r3, [pc, #36]	; (2270 <__libc_fini_array+0x28>)
    224c:	4c09      	ldr	r4, [pc, #36]	; (2274 <__libc_fini_array+0x2c>)
    224e:	1ae4      	subs	r4, r4, r3
    2250:	10a4      	asrs	r4, r4, #2
    2252:	d009      	beq.n	2268 <__libc_fini_array+0x20>
    2254:	4a08      	ldr	r2, [pc, #32]	; (2278 <__libc_fini_array+0x30>)
    2256:	18a5      	adds	r5, r4, r2
    2258:	00ad      	lsls	r5, r5, #2
    225a:	18ed      	adds	r5, r5, r3
    225c:	682b      	ldr	r3, [r5, #0]
    225e:	3c01      	subs	r4, #1
    2260:	4798      	blx	r3
    2262:	3d04      	subs	r5, #4
    2264:	2c00      	cmp	r4, #0
    2266:	d1f9      	bne.n	225c <__libc_fini_array+0x14>
    2268:	f000 f996 	bl	2598 <_fini>
    226c:	bd70      	pop	{r4, r5, r6, pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	000025a4 	.word	0x000025a4
    2274:	000025a8 	.word	0x000025a8
    2278:	3fffffff 	.word	0x3fffffff

0000227c <__register_exitproc>:
    227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    227e:	4644      	mov	r4, r8
    2280:	465f      	mov	r7, fp
    2282:	4656      	mov	r6, sl
    2284:	464d      	mov	r5, r9
    2286:	469b      	mov	fp, r3
    2288:	4b2f      	ldr	r3, [pc, #188]	; (2348 <__register_exitproc+0xcc>)
    228a:	b4f0      	push	{r4, r5, r6, r7}
    228c:	681c      	ldr	r4, [r3, #0]
    228e:	23a4      	movs	r3, #164	; 0xa4
    2290:	005b      	lsls	r3, r3, #1
    2292:	0005      	movs	r5, r0
    2294:	58e0      	ldr	r0, [r4, r3]
    2296:	000e      	movs	r6, r1
    2298:	4690      	mov	r8, r2
    229a:	2800      	cmp	r0, #0
    229c:	d04b      	beq.n	2336 <__register_exitproc+0xba>
    229e:	6843      	ldr	r3, [r0, #4]
    22a0:	2b1f      	cmp	r3, #31
    22a2:	dc0d      	bgt.n	22c0 <__register_exitproc+0x44>
    22a4:	1c5c      	adds	r4, r3, #1
    22a6:	2d00      	cmp	r5, #0
    22a8:	d121      	bne.n	22ee <__register_exitproc+0x72>
    22aa:	3302      	adds	r3, #2
    22ac:	009b      	lsls	r3, r3, #2
    22ae:	6044      	str	r4, [r0, #4]
    22b0:	501e      	str	r6, [r3, r0]
    22b2:	2000      	movs	r0, #0
    22b4:	bc3c      	pop	{r2, r3, r4, r5}
    22b6:	4690      	mov	r8, r2
    22b8:	4699      	mov	r9, r3
    22ba:	46a2      	mov	sl, r4
    22bc:	46ab      	mov	fp, r5
    22be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c0:	4b22      	ldr	r3, [pc, #136]	; (234c <__register_exitproc+0xd0>)
    22c2:	2b00      	cmp	r3, #0
    22c4:	d03c      	beq.n	2340 <__register_exitproc+0xc4>
    22c6:	20c8      	movs	r0, #200	; 0xc8
    22c8:	0040      	lsls	r0, r0, #1
    22ca:	e000      	b.n	22ce <__register_exitproc+0x52>
    22cc:	bf00      	nop
    22ce:	2800      	cmp	r0, #0
    22d0:	d036      	beq.n	2340 <__register_exitproc+0xc4>
    22d2:	22a4      	movs	r2, #164	; 0xa4
    22d4:	2300      	movs	r3, #0
    22d6:	0052      	lsls	r2, r2, #1
    22d8:	58a1      	ldr	r1, [r4, r2]
    22da:	6043      	str	r3, [r0, #4]
    22dc:	6001      	str	r1, [r0, #0]
    22de:	50a0      	str	r0, [r4, r2]
    22e0:	3240      	adds	r2, #64	; 0x40
    22e2:	5083      	str	r3, [r0, r2]
    22e4:	3204      	adds	r2, #4
    22e6:	5083      	str	r3, [r0, r2]
    22e8:	2401      	movs	r4, #1
    22ea:	2d00      	cmp	r5, #0
    22ec:	d0dd      	beq.n	22aa <__register_exitproc+0x2e>
    22ee:	009a      	lsls	r2, r3, #2
    22f0:	4691      	mov	r9, r2
    22f2:	4481      	add	r9, r0
    22f4:	4642      	mov	r2, r8
    22f6:	2188      	movs	r1, #136	; 0x88
    22f8:	464f      	mov	r7, r9
    22fa:	507a      	str	r2, [r7, r1]
    22fc:	22c4      	movs	r2, #196	; 0xc4
    22fe:	0052      	lsls	r2, r2, #1
    2300:	4690      	mov	r8, r2
    2302:	4480      	add	r8, r0
    2304:	4642      	mov	r2, r8
    2306:	3987      	subs	r1, #135	; 0x87
    2308:	4099      	lsls	r1, r3
    230a:	6812      	ldr	r2, [r2, #0]
    230c:	468a      	mov	sl, r1
    230e:	430a      	orrs	r2, r1
    2310:	4694      	mov	ip, r2
    2312:	4642      	mov	r2, r8
    2314:	4661      	mov	r1, ip
    2316:	6011      	str	r1, [r2, #0]
    2318:	2284      	movs	r2, #132	; 0x84
    231a:	4649      	mov	r1, r9
    231c:	465f      	mov	r7, fp
    231e:	0052      	lsls	r2, r2, #1
    2320:	508f      	str	r7, [r1, r2]
    2322:	2d02      	cmp	r5, #2
    2324:	d1c1      	bne.n	22aa <__register_exitproc+0x2e>
    2326:	0002      	movs	r2, r0
    2328:	4655      	mov	r5, sl
    232a:	328d      	adds	r2, #141	; 0x8d
    232c:	32ff      	adds	r2, #255	; 0xff
    232e:	6811      	ldr	r1, [r2, #0]
    2330:	430d      	orrs	r5, r1
    2332:	6015      	str	r5, [r2, #0]
    2334:	e7b9      	b.n	22aa <__register_exitproc+0x2e>
    2336:	0020      	movs	r0, r4
    2338:	304d      	adds	r0, #77	; 0x4d
    233a:	30ff      	adds	r0, #255	; 0xff
    233c:	50e0      	str	r0, [r4, r3]
    233e:	e7ae      	b.n	229e <__register_exitproc+0x22>
    2340:	2001      	movs	r0, #1
    2342:	4240      	negs	r0, r0
    2344:	e7b6      	b.n	22b4 <__register_exitproc+0x38>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	00002580 	.word	0x00002580
    234c:	00000000 	.word	0x00000000

00002350 <spi2MOSI>:
    2350:	0c000002 00000000                       ........

00002358 <spi2SCK>:
    2358:	0e000002 00000000                       ........

00002360 <spi2MISO>:
    2360:	0d000002 00000000                       ........

00002368 <lookupTable.12309>:
    2368:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    2378:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    2388:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2398:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    23a8:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    23b8:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    23c8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    23d8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    23e8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    23f8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    2408:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2418:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2428:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    2438:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    2448:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    2458:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    2468:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    2478:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    2488:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2498:	000f048e                                ....

0000249c <senseBatPin>:
    249c:	06000000 00000006                       ........

000024a4 <analogAccelPin>:
    24a4:	07000000 00000007                       ........

000024ac <spi2MOSI>:
    24ac:	0c000002 00000000                       ........

000024b4 <spi2SCK>:
    24b4:	0e000002 00000000 0000152a 0000144e     ........*...N...
    24c4:	0000150c 000014e4 0000150c 000014d8     ................
    24d4:	0000150c 000014e4 0000144e 0000144e     ........N...N...
    24e4:	000014d8 000014e4 00001590 00001590     ................
    24f4:	00001590 00001512 0000144e 0000144e     ........N...N...
    2504:	000014f8 000014e2 000014f8 000014d8     ................
    2514:	000014f8 000014e2 0000144e 0000144e     ........N...N...
    2524:	000014d8 000014e2 00001590 00001590     ................
    2534:	00001590 0000159c 00001bc8 00001a88     ................
    2544:	00001a88 00001a86 00001ba0 00001ba0     ................
    2554:	00001b92 00001a86 00001ba0 00001b92     ................
    2564:	00001ba0 00001a86 00001ba8 00001ba8     ................
    2574:	00001ba8 00001da8 00000043              ........C...

00002580 <_global_impure_ptr>:
    2580:	20000010                                ... 

00002584 <_init>:
    2584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	bcf8      	pop	{r3, r4, r5, r6, r7}
    258a:	bc08      	pop	{r3}
    258c:	469e      	mov	lr, r3
    258e:	4770      	bx	lr

00002590 <__init_array_start>:
    2590:	00002221 	.word	0x00002221

00002594 <__frame_dummy_init_array_entry>:
    2594:	000000dd                                ....

00002598 <_fini>:
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    259e:	bc08      	pop	{r3}
    25a0:	469e      	mov	lr, r3
    25a2:	4770      	bx	lr

000025a4 <__fini_array_start>:
    25a4:	000000b5 	.word	0x000000b5
