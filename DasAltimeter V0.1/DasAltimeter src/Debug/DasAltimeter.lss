
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000280c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002c50  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002e00  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021ca4  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ea  00000000  00000000  0004215d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001b01  00000000  00000000  00044a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000348  00000000  00000000  00046548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c60  00000000  00000000  00046890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015630  00000000  00000000  000474f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008159  00000000  00000000  0005cb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072f1b  00000000  00000000  00064c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009ec  00000000  00000000  000d7b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	f0 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	05 0e 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	a9 0e 00 00 11 0f 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000280c 	.word	0x0000280c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000280c 	.word	0x0000280c
     10c:	0000280c 	.word	0x0000280c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	0000280c 	.word	0x0000280c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000242d 	.word	0x0000242d
     1d0:	00000935 	.word	0x00000935

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a19      	lsrs	r1, r3, #8
     218:	b2c9      	uxtb	r1, r1
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	000015b9 	.word	0x000015b9
     23c:	20000460 	.word	0x20000460
     240:	00000dd9 	.word	0x00000dd9

00000244 <AT25SEWritePage>:

    return bytesSent;
}


u8_t AT25SEWritePage(u8_t startingAddress, u8_t len, u8_t *data) {
     244:	b5f0      	push	{r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     246:	2480      	movs	r4, #128	; 0x80
     248:	4f18      	ldr	r7, [pc, #96]	; (2ac <AT25SEWritePage+0x68>)
     24a:	b085      	sub	sp, #20
     24c:	02e4      	lsls	r4, r4, #11
     24e:	9203      	str	r2, [sp, #12]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     250:	4d17      	ldr	r5, [pc, #92]	; (2b0 <AT25SEWritePage+0x6c>)
u8_t AT25SEWritePage(u8_t startingAddress, u8_t len, u8_t *data) {
     252:	9002      	str	r0, [sp, #8]
     254:	9101      	str	r1, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     256:	2001      	movs	r0, #1
     258:	617c      	str	r4, [r7, #20]
     25a:	2106      	movs	r1, #6
     25c:	47a8      	blx	r5
     25e:	4e15      	ldr	r6, [pc, #84]	; (2b4 <AT25SEWritePage+0x70>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     260:	2102      	movs	r1, #2
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     262:	7030      	strb	r0, [r6, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     264:	61bc      	str	r4, [r7, #24]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     266:	2001      	movs	r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     268:	617c      	str	r4, [r7, #20]
     26a:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     26c:	2100      	movs	r1, #0
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     26e:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     270:	2001      	movs	r0, #1
     272:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     274:	2100      	movs	r1, #0
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     276:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     278:	2001      	movs	r0, #1
     27a:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     27c:	9902      	ldr	r1, [sp, #8]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     27e:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     280:	2001      	movs	r0, #1
     282:	47a8      	blx	r5
     284:	9c03      	ldr	r4, [sp, #12]
     286:	9b01      	ldr	r3, [sp, #4]
     288:	7030      	strb	r0, [r6, #0]
     28a:	18e3      	adds	r3, r4, r3
     28c:	9302      	str	r3, [sp, #8]

    for (u8_t pos = 0; pos < len; ++pos) {
     28e:	9b02      	ldr	r3, [sp, #8]
     290:	429c      	cmp	r4, r3
     292:	d105      	bne.n	2a0 <AT25SEWritePage+0x5c>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     294:	2380      	movs	r3, #128	; 0x80
     296:	02db      	lsls	r3, r3, #11
     298:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     29a:	9801      	ldr	r0, [sp, #4]
     29c:	b005      	add	sp, #20
     29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     2a0:	7821      	ldrb	r1, [r4, #0]
     2a2:	2001      	movs	r0, #1
     2a4:	47a8      	blx	r5
     2a6:	3401      	adds	r4, #1
     2a8:	7030      	strb	r0, [r6, #0]
     2aa:	e7f0      	b.n	28e <AT25SEWritePage+0x4a>
     2ac:	41004400 	.word	0x41004400
     2b0:	000015b9 	.word	0x000015b9
     2b4:	20000460 	.word	0x20000460

000002b8 <readMS5803AdcResults>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b8:	2380      	movs	r3, #128	; 0x80
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     2ba:	b5f0      	push	{r4, r5, r6, r7, lr}
     2bc:	4f24      	ldr	r7, [pc, #144]	; (350 <readMS5803AdcResults+0x98>)
     2be:	021b      	lsls	r3, r3, #8
     2c0:	617b      	str	r3, [r7, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2c2:	2300      	movs	r3, #0
     2c4:	4d23      	ldr	r5, [pc, #140]	; (354 <readMS5803AdcResults+0x9c>)
u32_t readMS5803AdcResults() {
     2c6:	b087      	sub	sp, #28
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2c8:	79a9      	ldrb	r1, [r5, #6]
     2ca:	796c      	ldrb	r4, [r5, #5]
     2cc:	9300      	str	r3, [sp, #0]
     2ce:	786b      	ldrb	r3, [r5, #1]
     2d0:	782a      	ldrb	r2, [r5, #0]
     2d2:	0209      	lsls	r1, r1, #8
     2d4:	4321      	orrs	r1, r4
     2d6:	021b      	lsls	r3, r3, #8
     2d8:	79ec      	ldrb	r4, [r5, #7]
     2da:	4313      	orrs	r3, r2
     2dc:	78aa      	ldrb	r2, [r5, #2]
     2de:	0424      	lsls	r4, r4, #16
     2e0:	4321      	orrs	r1, r4
     2e2:	0412      	lsls	r2, r2, #16
     2e4:	7a2c      	ldrb	r4, [r5, #8]
     2e6:	4313      	orrs	r3, r2
     2e8:	78ea      	ldrb	r2, [r5, #3]
     2ea:	0624      	lsls	r4, r4, #24
     2ec:	430c      	orrs	r4, r1
     2ee:	0612      	lsls	r2, r2, #24
     2f0:	7a69      	ldrb	r1, [r5, #9]
     2f2:	431a      	orrs	r2, r3
     2f4:	0020      	movs	r0, r4
     2f6:	792b      	ldrb	r3, [r5, #4]
     2f8:	4e17      	ldr	r6, [pc, #92]	; (358 <readMS5803AdcResults+0xa0>)
     2fa:	9102      	str	r1, [sp, #8]
     2fc:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2fe:	7aeb      	ldrb	r3, [r5, #11]
     300:	7aaa      	ldrb	r2, [r5, #10]
     302:	021b      	lsls	r3, r3, #8
     304:	431a      	orrs	r2, r3
     306:	7b2b      	ldrb	r3, [r5, #12]
     308:	4e14      	ldr	r6, [pc, #80]	; (35c <readMS5803AdcResults+0xa4>)
     30a:	041b      	lsls	r3, r3, #16
     30c:	4313      	orrs	r3, r2
     30e:	7b6a      	ldrb	r2, [r5, #13]
     310:	7bad      	ldrb	r5, [r5, #14]
     312:	0612      	lsls	r2, r2, #24
     314:	431a      	orrs	r2, r3
     316:	9902      	ldr	r1, [sp, #8]
     318:	002b      	movs	r3, r5
     31a:	0020      	movs	r0, r4
     31c:	9203      	str	r2, [sp, #12]
     31e:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     320:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     322:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     324:	002b      	movs	r3, r5
     326:	9902      	ldr	r1, [sp, #8]
     328:	0020      	movs	r0, r4
     32a:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     32c:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     32e:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     330:	002b      	movs	r3, r5
     332:	0020      	movs	r0, r4
     334:	9902      	ldr	r1, [sp, #8]
     336:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     338:	2380      	movs	r3, #128	; 0x80
     33a:	021b      	lsls	r3, r3, #8
     33c:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     33e:	9b04      	ldr	r3, [sp, #16]
     340:	9a05      	ldr	r2, [sp, #20]
     342:	041b      	lsls	r3, r3, #16
     344:	0215      	lsls	r5, r2, #8
     346:	431d      	orrs	r5, r3
     348:	4328      	orrs	r0, r5
    return _receive;
}
     34a:	b007      	add	sp, #28
     34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	41004400 	.word	0x41004400
     354:	00002638 	.word	0x00002638
     358:	00000b41 	.word	0x00000b41
     35c:	00000bad 	.word	0x00000bad

00000360 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     362:	240a      	movs	r4, #10
void ConvertPressureTemperature(Barometer *my_barometer) {
     364:	b08b      	sub	sp, #44	; 0x2c
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     366:	8803      	ldrh	r3, [r0, #0]
     368:	aa02      	add	r2, sp, #8
     36a:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     36c:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     36e:	18a4      	adds	r4, r4, r2
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     370:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     372:	8883      	ldrh	r3, [r0, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     374:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     376:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     378:	88c3      	ldrh	r3, [r0, #6]
void ConvertPressureTemperature(Barometer *my_barometer) {
     37a:	0006      	movs	r6, r0
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     37c:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     37e:	8902      	ldrh	r2, [r0, #8]
     380:	ab05      	add	r3, sp, #20
     382:	801a      	strh	r2, [r3, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     384:	220e      	movs	r2, #14
     386:	8941      	ldrh	r1, [r0, #10]
     388:	a802      	add	r0, sp, #8
     38a:	1812      	adds	r2, r2, r0
     38c:	8011      	strh	r1, [r2, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     38e:	881b      	ldrh	r3, [r3, #0]
     390:	6931      	ldr	r1, [r6, #16]
     392:	021b      	lsls	r3, r3, #8
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     394:	8810      	ldrh	r0, [r2, #0]
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     396:	1acb      	subs	r3, r1, r3
     398:	9300      	str	r3, [sp, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     39a:	17db      	asrs	r3, r3, #31
     39c:	9301      	str	r3, [sp, #4]
     39e:	9a00      	ldr	r2, [sp, #0]
     3a0:	4f29      	ldr	r7, [pc, #164]	; (448 <ConvertPressureTemperature+0xe8>)
     3a2:	b280      	uxth	r0, r0
     3a4:	2100      	movs	r1, #0
     3a6:	47b8      	blx	r7
     3a8:	23fa      	movs	r3, #250	; 0xfa
     3aa:	00db      	lsls	r3, r3, #3
     3ac:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3ae:	882b      	ldrh	r3, [r5, #0]
     3b0:	8820      	ldrh	r0, [r4, #0]
     3b2:	b29b      	uxth	r3, r3
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     3b4:	6171      	str	r1, [r6, #20]
    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3b6:	001f      	movs	r7, r3
     3b8:	9a00      	ldr	r2, [sp, #0]
     3ba:	9b01      	ldr	r3, [sp, #4]
     3bc:	4c22      	ldr	r4, [pc, #136]	; (448 <ConvertPressureTemperature+0xe8>)
     3be:	b280      	uxth	r0, r0
     3c0:	2100      	movs	r1, #0
     3c2:	47a0      	blx	r4
     3c4:	064b      	lsls	r3, r1, #25
     3c6:	09c4      	lsrs	r4, r0, #7
     3c8:	431c      	orrs	r4, r3
     3ca:	2300      	movs	r3, #0
     3cc:	11cd      	asrs	r5, r1, #7
     3ce:	043a      	lsls	r2, r7, #16
     3d0:	1912      	adds	r2, r2, r4
     3d2:	416b      	adcs	r3, r5
     3d4:	9206      	str	r2, [sp, #24]
     3d6:	9307      	str	r3, [sp, #28]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     3d8:	ab02      	add	r3, sp, #8
     3da:	889c      	ldrh	r4, [r3, #4]
     3dc:	8918      	ldrh	r0, [r3, #8]
     3de:	9a00      	ldr	r2, [sp, #0]
     3e0:	9b01      	ldr	r3, [sp, #4]
     3e2:	4d19      	ldr	r5, [pc, #100]	; (448 <ConvertPressureTemperature+0xe8>)
     3e4:	b280      	uxth	r0, r0
     3e6:	2100      	movs	r1, #0
     3e8:	47a8      	blx	r5
     3ea:	060d      	lsls	r5, r1, #24
     3ec:	120b      	asrs	r3, r1, #8
     3ee:	2100      	movs	r1, #0
     3f0:	b2a4      	uxth	r4, r4
     3f2:	0a02      	lsrs	r2, r0, #8
     3f4:	432a      	orrs	r2, r5
     3f6:	03e0      	lsls	r0, r4, #15
     3f8:	1812      	adds	r2, r2, r0
     3fa:	414b      	adcs	r3, r1
     3fc:	9208      	str	r2, [sp, #32]
     3fe:	9309      	str	r3, [sp, #36]	; 0x24
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     400:	9a08      	ldr	r2, [sp, #32]
     402:	9b09      	ldr	r3, [sp, #36]	; 0x24
     404:	9c06      	ldr	r4, [sp, #24]
     406:	9d07      	ldr	r5, [sp, #28]
     408:	4f0f      	ldr	r7, [pc, #60]	; (448 <ConvertPressureTemperature+0xe8>)
     40a:	68f0      	ldr	r0, [r6, #12]
     40c:	47b8      	blx	r7
     40e:	17cb      	asrs	r3, r1, #31
     410:	02db      	lsls	r3, r3, #11
     412:	469c      	mov	ip, r3
     414:	4667      	mov	r7, ip
     416:	2300      	movs	r3, #0
     418:	0afa      	lsrs	r2, r7, #11
     41a:	1880      	adds	r0, r0, r2
     41c:	4159      	adcs	r1, r3
     41e:	02cb      	lsls	r3, r1, #11
     420:	469c      	mov	ip, r3
     422:	4667      	mov	r7, ip
     424:	0d42      	lsrs	r2, r0, #21
     426:	433a      	orrs	r2, r7
     428:	154b      	asrs	r3, r1, #21
     42a:	1b12      	subs	r2, r2, r4
     42c:	41ab      	sbcs	r3, r5
     42e:	2100      	movs	r1, #0
     430:	17dc      	asrs	r4, r3, #31
     432:	0464      	lsls	r4, r4, #17
     434:	0c60      	lsrs	r0, r4, #17
     436:	1812      	adds	r2, r2, r0
     438:	414b      	adcs	r3, r1
     43a:	0011      	movs	r1, r2
     43c:	045b      	lsls	r3, r3, #17
     43e:	0bca      	lsrs	r2, r1, #15
     440:	431a      	orrs	r2, r3
     442:	61f2      	str	r2, [r6, #28]
}
     444:	b00b      	add	sp, #44	; 0x2c
     446:	bdf0      	pop	{r4, r5, r6, r7, pc}
     448:	000015d1 	.word	0x000015d1

0000044c <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     44c:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     44e:	240a      	movs	r4, #10
     450:	69c3      	ldr	r3, [r0, #28]

    if (my_barometer->pressurePa > PA_INIT)
     452:	4d0f      	ldr	r5, [pc, #60]	; (490 <pascalToCent+0x44>)
    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     454:	435c      	muls	r4, r3
     456:	6184      	str	r4, [r0, #24]
    if (my_barometer->pressurePa > PA_INIT)
     458:	42ac      	cmp	r4, r5
     45a:	d902      	bls.n	462 <pascalToCent+0x16>
        my_barometer->heightCm = lookupTable[0];
     45c:	4b0d      	ldr	r3, [pc, #52]	; (494 <pascalToCent+0x48>)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     45e:	6203      	str	r3, [r0, #32]
        }
    }
}
     460:	bd70      	pop	{r4, r5, r6, pc}
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     462:	1b2b      	subs	r3, r5, r4
     464:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     466:	2b4b      	cmp	r3, #75	; 0x4b
     468:	d901      	bls.n	46e <pascalToCent+0x22>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     46a:	4b0b      	ldr	r3, [pc, #44]	; (498 <pascalToCent+0x4c>)
     46c:	e7f7      	b.n	45e <pascalToCent+0x12>
            const int32_t z1 = lookupTable[inx];
     46e:	4e0b      	ldr	r6, [pc, #44]	; (49c <pascalToCent+0x50>)
     470:	009a      	lsls	r2, r3, #2
     472:	18b2      	adds	r2, r6, r2
     474:	6911      	ldr	r1, [r2, #16]
            const int32_t pa1 = PA_INIT - (inx << 10);
     476:	029a      	lsls	r2, r3, #10
     478:	1aad      	subs	r5, r5, r2
            const int32_t z2 = lookupTable[inx + 1];
     47a:	1c5a      	adds	r2, r3, #1
     47c:	0092      	lsls	r2, r2, #2
     47e:	18b2      	adds	r2, r6, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     480:	6913      	ldr	r3, [r2, #16]
     482:	1b2c      	subs	r4, r5, r4
     484:	1a5b      	subs	r3, r3, r1
     486:	4363      	muls	r3, r4
     488:	0a9b      	lsrs	r3, r3, #10
     48a:	185b      	adds	r3, r3, r1
     48c:	e7e7      	b.n	45e <pascalToCent+0x12>
     48e:	46c0      	nop			; (mov r8, r8)
     490:	000199cc 	.word	0x000199cc
     494:	ffff8d20 	.word	0xffff8d20
     498:	000f048e 	.word	0x000f048e
     49c:	00002638 	.word	0x00002638

000004a0 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a2:	27a2      	movs	r7, #162	; 0xa2
     4a4:	b087      	sub	sp, #28
     4a6:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     4a8:	2096      	movs	r0, #150	; 0x96
     4aa:	4c28      	ldr	r4, [pc, #160]	; (54c <readMS5803Coefficients+0xac>)
     4ac:	0080      	lsls	r0, r0, #2
     4ae:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     4b0:	2096      	movs	r0, #150	; 0x96
     4b2:	0080      	lsls	r0, r0, #2
     4b4:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4b6:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     4b8:	4c25      	ldr	r4, [pc, #148]	; (550 <readMS5803Coefficients+0xb0>)
     4ba:	4b26      	ldr	r3, [pc, #152]	; (554 <readMS5803Coefficients+0xb4>)
     4bc:	0212      	lsls	r2, r2, #8
     4be:	615a      	str	r2, [r3, #20]
     4c0:	7863      	ldrb	r3, [r4, #1]
     4c2:	7822      	ldrb	r2, [r4, #0]
     4c4:	79a1      	ldrb	r1, [r4, #6]
     4c6:	7966      	ldrb	r6, [r4, #5]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	4313      	orrs	r3, r2
     4cc:	0209      	lsls	r1, r1, #8
     4ce:	78a2      	ldrb	r2, [r4, #2]
     4d0:	430e      	orrs	r6, r1
     4d2:	79e1      	ldrb	r1, [r4, #7]
     4d4:	0412      	lsls	r2, r2, #16
     4d6:	4313      	orrs	r3, r2
     4d8:	7a20      	ldrb	r0, [r4, #8]
     4da:	78e2      	ldrb	r2, [r4, #3]
     4dc:	0409      	lsls	r1, r1, #16
     4de:	4331      	orrs	r1, r6
     4e0:	7a66      	ldrb	r6, [r4, #9]
     4e2:	0612      	lsls	r2, r2, #24
     4e4:	0600      	lsls	r0, r0, #24
     4e6:	4308      	orrs	r0, r1
     4e8:	431a      	orrs	r2, r3
     4ea:	9700      	str	r7, [sp, #0]
     4ec:	7923      	ldrb	r3, [r4, #4]
     4ee:	0031      	movs	r1, r6
     4f0:	4d19      	ldr	r5, [pc, #100]	; (558 <readMS5803Coefficients+0xb8>)
     4f2:	9003      	str	r0, [sp, #12]
     4f4:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4f6:	0022      	movs	r2, r4
     4f8:	7ad3      	ldrb	r3, [r2, #11]
     4fa:	7aa4      	ldrb	r4, [r4, #10]
     4fc:	021b      	lsls	r3, r3, #8
     4fe:	4323      	orrs	r3, r4
     500:	7b14      	ldrb	r4, [r2, #12]
     502:	7b95      	ldrb	r5, [r2, #14]
     504:	0424      	lsls	r4, r4, #16
     506:	4323      	orrs	r3, r4
     508:	7b54      	ldrb	r4, [r2, #13]
     50a:	0031      	movs	r1, r6
     50c:	0624      	lsls	r4, r4, #24
     50e:	431c      	orrs	r4, r3
     510:	0022      	movs	r2, r4
     512:	002b      	movs	r3, r5
     514:	9404      	str	r4, [sp, #16]
     516:	9803      	ldr	r0, [sp, #12]
     518:	4c10      	ldr	r4, [pc, #64]	; (55c <readMS5803Coefficients+0xbc>)
     51a:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     51c:	002b      	movs	r3, r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     51e:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     520:	9a04      	ldr	r2, [sp, #16]
     522:	9803      	ldr	r0, [sp, #12]
     524:	0031      	movs	r1, r6
     526:	4c0d      	ldr	r4, [pc, #52]	; (55c <readMS5803Coefficients+0xbc>)
     528:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     52a:	2280      	movs	r2, #128	; 0x80
     52c:	4b09      	ldr	r3, [pc, #36]	; (554 <readMS5803Coefficients+0xb4>)
     52e:	0212      	lsls	r2, r2, #8
     530:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     532:	9b05      	ldr	r3, [sp, #20]
     534:	3702      	adds	r7, #2
     536:	021d      	lsls	r5, r3, #8
     538:	9b02      	ldr	r3, [sp, #8]
     53a:	4328      	orrs	r0, r5
     53c:	8018      	strh	r0, [r3, #0]
     53e:	b2ff      	uxtb	r7, r7
     540:	3302      	adds	r3, #2
     542:	9302      	str	r3, [sp, #8]
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     544:	2fae      	cmp	r7, #174	; 0xae
     546:	d1af      	bne.n	4a8 <readMS5803Coefficients+0x8>
    }

}
     548:	b007      	add	sp, #28
     54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54c:	00000dad 	.word	0x00000dad
     550:	00002638 	.word	0x00002638
     554:	41004400 	.word	0x41004400
     558:	00000b41 	.word	0x00000b41
     55c:	00000bad 	.word	0x00000bad

00000560 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     562:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     564:	231e      	movs	r3, #30
void initMS5803Barometer(Barometer *my_barometer) {
     566:	0004      	movs	r4, r0
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     568:	4918      	ldr	r1, [pc, #96]	; (5cc <initMS5803Barometer+0x6c>)
     56a:	4d19      	ldr	r5, [pc, #100]	; (5d0 <initMS5803Barometer+0x70>)
     56c:	0236      	lsls	r6, r6, #8
     56e:	616e      	str	r6, [r5, #20]
     570:	9300      	str	r3, [sp, #0]
     572:	784b      	ldrb	r3, [r1, #1]
     574:	780a      	ldrb	r2, [r1, #0]
     576:	021b      	lsls	r3, r3, #8
     578:	4313      	orrs	r3, r2
     57a:	788a      	ldrb	r2, [r1, #2]
     57c:	1d4f      	adds	r7, r1, #5
     57e:	0412      	lsls	r2, r2, #16
     580:	4313      	orrs	r3, r2
     582:	78ca      	ldrb	r2, [r1, #3]
     584:	7948      	ldrb	r0, [r1, #5]
     586:	0612      	lsls	r2, r2, #24
     588:	431a      	orrs	r2, r3
     58a:	790b      	ldrb	r3, [r1, #4]
     58c:	7989      	ldrb	r1, [r1, #6]
     58e:	0209      	lsls	r1, r1, #8
     590:	4301      	orrs	r1, r0
     592:	78b8      	ldrb	r0, [r7, #2]
     594:	0400      	lsls	r0, r0, #16
     596:	4301      	orrs	r1, r0
     598:	78f8      	ldrb	r0, [r7, #3]
     59a:	0600      	lsls	r0, r0, #24
     59c:	4308      	orrs	r0, r1
     59e:	7939      	ldrb	r1, [r7, #4]
     5a0:	4f0c      	ldr	r7, [pc, #48]	; (5d4 <initMS5803Barometer+0x74>)
     5a2:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5a4:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     5a6:	20c8      	movs	r0, #200	; 0xc8
     5a8:	4b0b      	ldr	r3, [pc, #44]	; (5d8 <initMS5803Barometer+0x78>)
     5aa:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     5ac:	0020      	movs	r0, r4
     5ae:	4b0b      	ldr	r3, [pc, #44]	; (5dc <initMS5803Barometer+0x7c>)
     5b0:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     5b2:	23fa      	movs	r3, #250	; 0xfa
     5b4:	011b      	lsls	r3, r3, #4
     5b6:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     5b8:	4b09      	ldr	r3, [pc, #36]	; (5e0 <initMS5803Barometer+0x80>)
     5ba:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     5bc:	4b09      	ldr	r3, [pc, #36]	; (5e4 <initMS5803Barometer+0x84>)
     5be:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     5c0:	4b09      	ldr	r3, [pc, #36]	; (5e8 <initMS5803Barometer+0x88>)
     5c2:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     5c4:	23fa      	movs	r3, #250	; 0xfa
     5c6:	00db      	lsls	r3, r3, #3
     5c8:	6163      	str	r3, [r4, #20]




}
     5ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5cc:	00002638 	.word	0x00002638
     5d0:	41004400 	.word	0x41004400
     5d4:	00000b41 	.word	0x00000b41
     5d8:	00000dd9 	.word	0x00000dd9
     5dc:	000004a1 	.word	0x000004a1
     5e0:	00002710 	.word	0x00002710
     5e4:	0041c9fe 	.word	0x0041c9fe
     5e8:	007ffae4 	.word	0x007ffae4

000005ec <init>:
#include "math.h"




void init() {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     5ee:	4bc1      	ldr	r3, [pc, #772]	; (8f4 <init+0x308>)
void init() {
     5f0:	b085      	sub	sp, #20
    SystemInit();
     5f2:	4798      	blx	r3
    GclkInit();
     5f4:	4bc0      	ldr	r3, [pc, #768]	; (8f8 <init+0x30c>)
     5f6:	4798      	blx	r3
    RtcInit();
     5f8:	4bc0      	ldr	r3, [pc, #768]	; (8fc <init+0x310>)
     5fa:	4798      	blx	r3
    delayInit();
     5fc:	4bc0      	ldr	r3, [pc, #768]	; (900 <init+0x314>)
     5fe:	4798      	blx	r3
    adcInit();
     600:	4bc0      	ldr	r3, [pc, #768]	; (904 <init+0x318>)
     602:	4798      	blx	r3
    dmaInit();
     604:	4bc0      	ldr	r3, [pc, #768]	; (908 <init+0x31c>)
     606:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     608:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     60a:	21c1      	movs	r1, #193	; 0xc1
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     60c:	4bbf      	ldr	r3, [pc, #764]	; (90c <init+0x320>)
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     60e:	0089      	lsls	r1, r1, #2
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     610:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     612:	585a      	ldr	r2, [r3, r1]
     614:	48be      	ldr	r0, [pc, #760]	; (910 <init+0x324>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     616:	2401      	movs	r4, #1
     618:	4002      	ands	r2, r0
     61a:	505a      	str	r2, [r3, r1]
     61c:	4bbd      	ldr	r3, [pc, #756]	; (914 <init+0x328>)
     61e:	0019      	movs	r1, r3
     620:	3154      	adds	r1, #84	; 0x54
     622:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     624:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     626:	43a2      	bics	r2, r4
     628:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     62a:	2280      	movs	r2, #128	; 0x80
     62c:	0352      	lsls	r2, r2, #13
     62e:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     630:	220f      	movs	r2, #15
     632:	3033      	adds	r0, #51	; 0x33
     634:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     636:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     638:	4391      	bics	r1, r2
     63a:	4321      	orrs	r1, r4
     63c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     63e:	7cc1      	ldrb	r1, [r0, #19]
     640:	36c3      	adds	r6, #195	; 0xc3
     642:	4321      	orrs	r1, r4
     644:	74c1      	strb	r1, [r0, #19]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     646:	0019      	movs	r1, r3
     648:	2010      	movs	r0, #16
     64a:	31b1      	adds	r1, #177	; 0xb1
     64c:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     64e:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     650:	4015      	ands	r5, r2
     652:	4305      	orrs	r5, r0
     654:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     656:	7835      	ldrb	r5, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     658:	3788      	adds	r7, #136	; 0x88
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65a:	4325      	orrs	r5, r4
     65c:	7035      	strb	r5, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     65e:	780d      	ldrb	r5, [r1, #0]
     660:	4015      	ands	r5, r2
     662:	4305      	orrs	r5, r0
     664:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     666:	7835      	ldrb	r5, [r6, #0]
     668:	4325      	orrs	r5, r4
     66a:	7035      	strb	r5, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	7d35      	ldrb	r5, [r6, #20]
     66e:	43a5      	bics	r5, r4
     670:	7535      	strb	r5, [r6, #20]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     672:	2580      	movs	r5, #128	; 0x80
     674:	042d      	lsls	r5, r5, #16
     676:	9703      	str	r7, [sp, #12]
     678:	603d      	str	r5, [r7, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     67a:	60fd      	str	r5, [r7, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     67c:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     67e:	003e      	movs	r6, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     680:	4395      	bics	r5, r2
     682:	4325      	orrs	r5, r4
     684:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	25c2      	movs	r5, #194	; 0xc2
     688:	46ac      	mov	ip, r5
     68a:	449c      	add	ip, r3
     68c:	4665      	mov	r5, ip
     68e:	4667      	mov	r7, ip
     690:	782d      	ldrb	r5, [r5, #0]
     692:	4325      	orrs	r5, r4
     694:	703d      	strb	r5, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     696:	780d      	ldrb	r5, [r1, #0]
     698:	4395      	bics	r5, r2
     69a:	4325      	orrs	r5, r4
     69c:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69e:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a0:	7839      	ldrb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	35d6      	adds	r5, #214	; 0xd6
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a4:	4321      	orrs	r1, r4
     6a6:	7039      	strb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a8:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6aa:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ac:	43a1      	bics	r1, r4
     6ae:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b0:	2180      	movs	r1, #128	; 0x80
     6b2:	9d03      	ldr	r5, [sp, #12]
     6b4:	03c9      	lsls	r1, r1, #15
     6b6:	6029      	str	r1, [r5, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6b8:	60f1      	str	r1, [r6, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6ba:	0019      	movs	r1, r3
     6bc:	3131      	adds	r1, #49	; 0x31
     6be:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c0:	3e3f      	subs	r6, #63	; 0x3f
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c2:	4015      	ands	r5, r2
     6c4:	4328      	orrs	r0, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	001d      	movs	r5, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ca:	3543      	adds	r5, #67	; 0x43
     6cc:	7828      	ldrb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ce:	46bc      	mov	ip, r7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d0:	4320      	orrs	r0, r4
     6d2:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d4:	7da8      	ldrb	r0, [r5, #22]
     6d6:	3505      	adds	r5, #5
     6d8:	43a0      	bics	r0, r4
     6da:	7468      	strb	r0, [r5, #17]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	0480      	lsls	r0, r0, #18
     6e0:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e2:	6158      	str	r0, [r3, #20]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6e4:	7808      	ldrb	r0, [r1, #0]
     6e6:	4390      	bics	r0, r2
     6e8:	4320      	orrs	r0, r4
     6ea:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ec:	0018      	movs	r0, r3
     6ee:	3042      	adds	r0, #66	; 0x42
     6f0:	7801      	ldrb	r1, [r0, #0]
     6f2:	4321      	orrs	r1, r4
     6f4:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f6:	7d81      	ldrb	r1, [r0, #22]
     6f8:	43a1      	bics	r1, r4
     6fa:	7581      	strb	r1, [r0, #22]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6fc:	2180      	movs	r1, #128	; 0x80
     6fe:	0449      	lsls	r1, r1, #17
     700:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     702:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     704:	7829      	ldrb	r1, [r5, #0]
     706:	43a1      	bics	r1, r4
     708:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70a:	2180      	movs	r1, #128	; 0x80
     70c:	0049      	lsls	r1, r1, #1
     70e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     710:	7831      	ldrb	r1, [r6, #0]
     712:	43a1      	bics	r1, r4
     714:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     716:	2180      	movs	r1, #128	; 0x80
     718:	0089      	lsls	r1, r1, #2
     71a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71c:	0019      	movs	r1, r3
     71e:	314b      	adds	r1, #75	; 0x4b
     720:	7808      	ldrb	r0, [r1, #0]
     722:	43a0      	bics	r0, r4
     724:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     726:	7808      	ldrb	r0, [r1, #0]
     728:	4338      	orrs	r0, r7
     72a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     72c:	2080      	movs	r0, #128	; 0x80
     72e:	0100      	lsls	r0, r0, #4
     730:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     732:	4879      	ldr	r0, [pc, #484]	; (918 <init+0x32c>)
     734:	371e      	adds	r7, #30
     736:	7800      	ldrb	r0, [r0, #0]
     738:	4010      	ands	r0, r2
     73a:	4338      	orrs	r0, r7
     73c:	4f76      	ldr	r7, [pc, #472]	; (918 <init+0x32c>)
     73e:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     740:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     742:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	4320      	orrs	r0, r4
     746:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     748:	0018      	movs	r0, r3
     74a:	3034      	adds	r0, #52	; 0x34
     74c:	7801      	ldrb	r1, [r0, #0]
     74e:	4011      	ands	r1, r2
     750:	4339      	orrs	r1, r7
     752:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     754:	7831      	ldrb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     756:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     758:	4321      	orrs	r1, r4
     75a:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     75c:	4666      	mov	r6, ip
     75e:	7801      	ldrb	r1, [r0, #0]
     760:	4391      	bics	r1, r2
     762:	4331      	orrs	r1, r6
     764:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     766:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     768:	3096      	adds	r0, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76a:	4321      	orrs	r1, r4
     76c:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76e:	7801      	ldrb	r1, [r0, #0]
     770:	001e      	movs	r6, r3
     772:	43a1      	bics	r1, r4
     774:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     776:	2180      	movs	r1, #128	; 0x80
     778:	9803      	ldr	r0, [sp, #12]
     77a:	00c9      	lsls	r1, r1, #3
     77c:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     77e:	0018      	movs	r0, r3
     780:	3098      	adds	r0, #152	; 0x98
     782:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	78a8      	ldrb	r0, [r5, #2]
     786:	3651      	adds	r6, #81	; 0x51
     788:	43a0      	bics	r0, r4
     78a:	70a8      	strb	r0, [r5, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     78e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	7a29      	ldrb	r1, [r5, #8]
     792:	43a1      	bics	r1, r4
     794:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     796:	2180      	movs	r1, #128	; 0x80
     798:	0249      	lsls	r1, r1, #9
     79a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	7831      	ldrb	r1, [r6, #0]
     79e:	43a1      	bics	r1, r4
     7a0:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a2:	2180      	movs	r1, #128	; 0x80
     7a4:	0289      	lsls	r1, r1, #10
     7a6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	0019      	movs	r1, r3
     7aa:	3153      	adds	r1, #83	; 0x53
     7ac:	7808      	ldrb	r0, [r1, #0]
     7ae:	43a0      	bics	r0, r4
     7b0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7b2:	7808      	ldrb	r0, [r1, #0]
     7b4:	4338      	orrs	r0, r7
     7b6:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b8:	001f      	movs	r7, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7ba:	2080      	movs	r0, #128	; 0x80
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7bc:	3739      	adds	r7, #57	; 0x39
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7be:	0300      	lsls	r0, r0, #12
     7c0:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c2:	9703      	str	r7, [sp, #12]
     7c4:	7838      	ldrb	r0, [r7, #0]
     7c6:	2720      	movs	r7, #32
     7c8:	4010      	ands	r0, r2
     7ca:	4338      	orrs	r0, r7
     7cc:	9f03      	ldr	r7, [sp, #12]
     7ce:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d0:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d2:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d4:	4320      	orrs	r0, r4
     7d6:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d8:	0018      	movs	r0, r3
     7da:	3038      	adds	r0, #56	; 0x38
     7dc:	7801      	ldrb	r1, [r0, #0]
     7de:	4011      	ands	r1, r2
     7e0:	4339      	orrs	r1, r7
     7e2:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e4:	7831      	ldrb	r1, [r6, #0]
     7e6:	4321      	orrs	r1, r4
     7e8:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7ea:	4666      	mov	r6, ip
     7ec:	7801      	ldrb	r1, [r0, #0]
     7ee:	4391      	bics	r1, r2
     7f0:	4331      	orrs	r1, r6
     7f2:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f4:	7a29      	ldrb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f6:	3014      	adds	r0, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f8:	4321      	orrs	r1, r4
     7fa:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fc:	7981      	ldrb	r1, [r0, #6]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7fe:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	43a1      	bics	r1, r4
     802:	7181      	strb	r1, [r0, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     804:	2180      	movs	r1, #128	; 0x80
     806:	02c9      	lsls	r1, r1, #11
     808:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     80a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80c:	7801      	ldrb	r1, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     80e:	353b      	adds	r5, #59	; 0x3b
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     810:	43a1      	bics	r1, r4
     812:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2180      	movs	r1, #128	; 0x80
     816:	0149      	lsls	r1, r1, #5
     818:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	7881      	ldrb	r1, [r0, #2]
     81c:	43a1      	bics	r1, r4
     81e:	7081      	strb	r1, [r0, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     820:	2180      	movs	r1, #128	; 0x80
     822:	01c9      	lsls	r1, r1, #7
     824:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	0019      	movs	r1, r3
     828:	314d      	adds	r1, #77	; 0x4d
     82a:	7808      	ldrb	r0, [r1, #0]
     82c:	43a0      	bics	r0, r4
     82e:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     830:	7808      	ldrb	r0, [r1, #0]
     832:	4330      	orrs	r0, r6
     834:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     836:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     838:	0018      	movs	r0, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     83a:	0189      	lsls	r1, r1, #6
     83c:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	304f      	adds	r0, #79	; 0x4f
     840:	7801      	ldrb	r1, [r0, #0]
     842:	43a1      	bics	r1, r4
     844:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     846:	2180      	movs	r1, #128	; 0x80
     848:	0209      	lsls	r1, r1, #8
     84a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     84c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84e:	0019      	movs	r1, r3
     850:	3155      	adds	r1, #85	; 0x55
     852:	7808      	ldrb	r0, [r1, #0]
     854:	43a0      	bics	r0, r4
     856:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     858:	2080      	movs	r0, #128	; 0x80
     85a:	0380      	lsls	r0, r0, #14
     85c:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     85e:	2040      	movs	r0, #64	; 0x40
     860:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     862:	7848      	ldrb	r0, [r1, #1]
     864:	43a0      	bics	r0, r4
     866:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     868:	2080      	movs	r0, #128	; 0x80
     86a:	03c0      	lsls	r0, r0, #15
     86c:	6098      	str	r0, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     86e:	7828      	ldrb	r0, [r5, #0]
     870:	4390      	bics	r0, r2
     872:	4330      	orrs	r0, r6
     874:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     876:	7848      	ldrb	r0, [r1, #1]
     878:	4320      	orrs	r0, r4
     87a:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87c:	0018      	movs	r0, r3
     87e:	3057      	adds	r0, #87	; 0x57
     880:	7801      	ldrb	r1, [r0, #0]
     882:	43a1      	bics	r1, r4
     884:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     886:	7801      	ldrb	r1, [r0, #0]
     888:	4331      	orrs	r1, r6
     88a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     88c:	2180      	movs	r1, #128	; 0x80
     88e:	0409      	lsls	r1, r1, #16
     890:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     892:	782b      	ldrb	r3, [r5, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     894:	4e21      	ldr	r6, [pc, #132]	; (91c <init+0x330>)
     896:	401a      	ands	r2, r3
     898:	433a      	orrs	r2, r7
     89a:	702a      	strb	r2, [r5, #0]
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     89c:	2500      	movs	r5, #0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89e:	7803      	ldrb	r3, [r0, #0]
    sercomClockEnable(SPI0, 3, 4);
     8a0:	2204      	movs	r2, #4
     8a2:	4323      	orrs	r3, r4
     8a4:	7003      	strb	r3, [r0, #0]
     8a6:	2103      	movs	r1, #3
     8a8:	2000      	movs	r0, #0
     8aa:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     8ac:	002b      	movs	r3, r5
     8ae:	002a      	movs	r2, r5
     8b0:	0028      	movs	r0, r5
     8b2:	4f1b      	ldr	r7, [pc, #108]	; (920 <init+0x334>)
     8b4:	9501      	str	r5, [sp, #4]
     8b6:	9500      	str	r5, [sp, #0]
     8b8:	2103      	movs	r1, #3
     8ba:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     8bc:	0020      	movs	r0, r4
     8be:	2204      	movs	r2, #4
     8c0:	2103      	movs	r1, #3
     8c2:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     8c4:	002b      	movs	r3, r5
     8c6:	002a      	movs	r2, r5
     8c8:	0020      	movs	r0, r4
     8ca:	9501      	str	r5, [sp, #4]
     8cc:	9500      	str	r5, [sp, #0]
     8ce:	2103      	movs	r1, #3
     8d0:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     8d2:	2208      	movs	r2, #8
     8d4:	2104      	movs	r1, #4
     8d6:	2003      	movs	r0, #3
     8d8:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     8da:	0021      	movs	r1, r4
     8dc:	002a      	movs	r2, r5
     8de:	2003      	movs	r0, #3
     8e0:	4b10      	ldr	r3, [pc, #64]	; (924 <init+0x338>)
     8e2:	4c11      	ldr	r4, [pc, #68]	; (928 <init+0x33c>)
     8e4:	47a0      	blx	r4

    TC4Init();
     8e6:	4b11      	ldr	r3, [pc, #68]	; (92c <init+0x340>)
     8e8:	4798      	blx	r3
    TC5Init();
     8ea:	4b11      	ldr	r3, [pc, #68]	; (930 <init+0x344>)
     8ec:	4798      	blx	r3
}
     8ee:	b005      	add	sp, #20
     8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	000001d5 	.word	0x000001d5
     8f8:	00000c01 	.word	0x00000c01
     8fc:	00000c95 	.word	0x00000c95
     900:	00000d8d 	.word	0x00000d8d
     904:	00000a61 	.word	0x00000a61
     908:	00000f29 	.word	0x00000f29
     90c:	e000e100 	.word	0xe000e100
     910:	ff00ffff 	.word	0xff00ffff
     914:	41004400 	.word	0x41004400
     918:	41004435 	.word	0x41004435
     91c:	000014b1 	.word	0x000014b1
     920:	00001511 	.word	0x00001511
     924:	0000f972 	.word	0x0000f972
     928:	00001575 	.word	0x00001575
     92c:	00000e59 	.word	0x00000e59
     930:	00000ec1 	.word	0x00000ec1

00000934 <main>:

}



int main(void) {
     934:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     936:	2600      	movs	r6, #0
int main(void) {
     938:	4c30      	ldr	r4, [pc, #192]	; (9fc <main+0xc8>)
    init();
     93a:	4b31      	ldr	r3, [pc, #196]	; (a00 <main+0xcc>)
int main(void) {
     93c:	44a5      	add	sp, r4
    init();
     93e:	4798      	blx	r3
    my_altimeter.myFlightState = flightStatrup;
     940:	ac03      	add	r4, sp, #12
    initMS5803Barometer(&my_altimeter.myBarometer);
     942:	4b30      	ldr	r3, [pc, #192]	; (a04 <main+0xd0>)
     944:	a804      	add	r0, sp, #16
    my_altimeter.myFlightState = flightStatrup;
     946:	7026      	strb	r6, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     948:	4798      	blx	r3
    IMUinit();
     94a:	4b2f      	ldr	r3, [pc, #188]	; (a08 <main+0xd4>)
     94c:	4798      	blx	r3

    sampleTick(&my_altimeter);
     94e:	0020      	movs	r0, r4
     950:	4b2e      	ldr	r3, [pc, #184]	; (a0c <main+0xd8>)
     952:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     954:	2380      	movs	r3, #128	; 0x80
     956:	33ff      	adds	r3, #255	; 0xff
     958:	54e6      	strb	r6, [r4, r3]

    /* this looks for a USART connection	 */
    //startUp(&my_altimeter);


    my_altimeter.myFlashMemory.currentAddress = 0x00000100;
     95a:	3b7f      	subs	r3, #127	; 0x7f
    my_altimeter.myFlashMemory.pageLocation = 0x00;

    AT25SFErace4KBlock(my_altimeter.myFlashMemory.currentAddress);
     95c:	0030      	movs	r0, r6
    my_altimeter.myFlashMemory.currentAddress = 0x00000100;
     95e:	67e3      	str	r3, [r4, #124]	; 0x7c
    AT25SFErace4KBlock(my_altimeter.myFlashMemory.currentAddress);
     960:	4b2b      	ldr	r3, [pc, #172]	; (a10 <main+0xdc>)
     962:	4798      	blx	r3

    //logSensors(&my_altimeter);
    delay_ms(5);
     964:	2005      	movs	r0, #5
     966:	4d2b      	ldr	r5, [pc, #172]	; (a14 <main+0xe0>)
     968:	47a8      	blx	r5

    u8_t pagesWritten = 0;
     96a:	9601      	str	r6, [sp, #4]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     96c:	2680      	movs	r6, #128	; 0x80
     96e:	0376      	lsls	r6, r6, #13



    while (1) {

        if (takeSample) {
     970:	4f29      	ldr	r7, [pc, #164]	; (a18 <main+0xe4>)
     972:	783b      	ldrb	r3, [r7, #0]
     974:	2b00      	cmp	r3, #0
     976:	d007      	beq.n	988 <main+0x54>
            sampleTick(&my_altimeter);
     978:	0020      	movs	r0, r4
     97a:	4b24      	ldr	r3, [pc, #144]	; (a0c <main+0xd8>)
     97c:	4798      	blx	r3
            flight(&my_altimeter);
     97e:	4b27      	ldr	r3, [pc, #156]	; (a1c <main+0xe8>)
     980:	0020      	movs	r0, r4
     982:	4798      	blx	r3
            takeSample = false;
     984:	2300      	movs	r3, #0
     986:	703b      	strb	r3, [r7, #0]

        }


        if (writeLog) {
     988:	4b25      	ldr	r3, [pc, #148]	; (a20 <main+0xec>)
     98a:	781a      	ldrb	r2, [r3, #0]
     98c:	2a00      	cmp	r2, #0
     98e:	d0ef      	beq.n	970 <main+0x3c>
            writeLog = false;
     990:	2200      	movs	r2, #0
     992:	701a      	strb	r2, [r3, #0]

            if (my_altimeter.myFlashMemory.pageReady) {
     994:	4b23      	ldr	r3, [pc, #140]	; (a24 <main+0xf0>)
     996:	5ce2      	ldrb	r2, [r4, r3]
     998:	2a00      	cmp	r2, #0
     99a:	d01c      	beq.n	9d6 <main+0xa2>
                my_altimeter.myFlashMemory.pageReady = false;
     99c:	2200      	movs	r2, #0
     99e:	4f22      	ldr	r7, [pc, #136]	; (a28 <main+0xf4>)
     9a0:	54e2      	strb	r2, [r4, r3]

                pinToggle(LedPin);
                delay_ms(80);
     9a2:	2050      	movs	r0, #80	; 0x50
     9a4:	61fe      	str	r6, [r7, #28]
     9a6:	47a8      	blx	r5
     9a8:	61fe      	str	r6, [r7, #28]
                u16_t logLen = 0xFF;
                //usartDataOut(USART3, 'T');
                //usartDataOut(USART3, logLen >> 0);
                //usartDataOut(USART3, logLen >> 8);

                if (pagesWritten <= 10) {
     9aa:	9b01      	ldr	r3, [sp, #4]
     9ac:	2b0a      	cmp	r3, #10
     9ae:	d816      	bhi.n	9de <main+0xaa>
     9b0:	27ff      	movs	r7, #255	; 0xff


                    for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
                        //usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
                        u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,logLen,my_altimeter.myFlashMemory.pageToWrite);
     9b2:	237c      	movs	r3, #124	; 0x7c
     9b4:	3f01      	subs	r7, #1
     9b6:	18e3      	adds	r3, r4, r3
     9b8:	7818      	ldrb	r0, [r3, #0]
     9ba:	aa23      	add	r2, sp, #140	; 0x8c
     9bc:	21ff      	movs	r1, #255	; 0xff
     9be:	4b1b      	ldr	r3, [pc, #108]	; (a2c <main+0xf8>)
     9c0:	b2ff      	uxtb	r7, r7
     9c2:	4798      	blx	r3
                    for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
     9c4:	2f00      	cmp	r7, #0
     9c6:	d1f4      	bne.n	9b2 <main+0x7e>
                    }
                    pagesWritten++;
     9c8:	9b01      	ldr	r3, [sp, #4]
     9ca:	3301      	adds	r3, #1
     9cc:	b2db      	uxtb	r3, r3
     9ce:	9301      	str	r3, [sp, #4]
                    pinToggle(LedPin);
                    delay_ms(80);

                }

                my_altimeter.myFlashMemory.currentAddress = my_altimeter.myFlashMemory.currentAddress + 0xFF;
     9d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     9d2:	33ff      	adds	r3, #255	; 0xff
     9d4:	67e3      	str	r3, [r4, #124]	; 0x7c

            }


            logSensors(&my_altimeter);
     9d6:	0020      	movs	r0, r4
     9d8:	4b15      	ldr	r3, [pc, #84]	; (a30 <main+0xfc>)
     9da:	4798      	blx	r3
     9dc:	e7c8      	b.n	970 <main+0x3c>
                    delay_ms(80);
     9de:	2050      	movs	r0, #80	; 0x50
     9e0:	47a8      	blx	r5
     9e2:	61fe      	str	r6, [r7, #28]
                    delay_ms(80);
     9e4:	2050      	movs	r0, #80	; 0x50
     9e6:	47a8      	blx	r5
     9e8:	61fe      	str	r6, [r7, #28]
                    delay_ms(80);
     9ea:	2050      	movs	r0, #80	; 0x50
     9ec:	47a8      	blx	r5
     9ee:	61fe      	str	r6, [r7, #28]
                    delay_ms(80);
     9f0:	2050      	movs	r0, #80	; 0x50
     9f2:	47a8      	blx	r5
     9f4:	61fe      	str	r6, [r7, #28]
                    delay_ms(80);
     9f6:	2050      	movs	r0, #80	; 0x50
     9f8:	47a8      	blx	r5
     9fa:	e7e9      	b.n	9d0 <main+0x9c>
     9fc:	fffffd5c 	.word	0xfffffd5c
     a00:	000005ed 	.word	0x000005ed
     a04:	00000561 	.word	0x00000561
     a08:	00000a35 	.word	0x00000a35
     a0c:	0000112d 	.word	0x0000112d
     a10:	000001e5 	.word	0x000001e5
     a14:	00000dd9 	.word	0x00000dd9
     a18:	20000463 	.word	0x20000463
     a1c:	00000f89 	.word	0x00000f89
     a20:	20000461 	.word	0x20000461
     a24:	0000027f 	.word	0x0000027f
     a28:	41004400 	.word	0x41004400
     a2c:	00000245 	.word	0x00000245
     a30:	00001025 	.word	0x00001025

00000a34 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a34:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a36:	4c08      	ldr	r4, [pc, #32]	; (a58 <IMUinit+0x24>)
     a38:	2580      	movs	r5, #128	; 0x80
     a3a:	0023      	movs	r3, r4
     a3c:	00ed      	lsls	r5, r5, #3
     a3e:	3394      	adds	r3, #148	; 0x94
     a40:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a42:	4e06      	ldr	r6, [pc, #24]	; (a5c <IMUinit+0x28>)
     a44:	210f      	movs	r1, #15
     a46:	2000      	movs	r0, #0
     a48:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a4a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a4c:	210c      	movs	r1, #12
     a4e:	2000      	movs	r0, #0
     a50:	47b0      	blx	r6
     a52:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a54:	bd70      	pop	{r4, r5, r6, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	41004400 	.word	0x41004400
     a5c:	000015b9 	.word	0x000015b9

00000a60 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a60:	2380      	movs	r3, #128	; 0x80
     a62:	4a10      	ldr	r2, [pc, #64]	; (aa4 <adcInit+0x44>)
     a64:	025b      	lsls	r3, r3, #9
     a66:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a68:	480f      	ldr	r0, [pc, #60]	; (aa8 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a6a:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a6c:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a6e:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a70:	4b0e      	ldr	r3, [pc, #56]	; (aac <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a72:	4a0f      	ldr	r2, [pc, #60]	; (ab0 <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a74:	00c9      	lsls	r1, r1, #3
     a76:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a78:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     a7a:	4a0e      	ldr	r2, [pc, #56]	; (ab4 <adcInit+0x54>)
     a7c:	6810      	ldr	r0, [r2, #0]
     a7e:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     a80:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     a82:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     a84:	4a0c      	ldr	r2, [pc, #48]	; (ab8 <adcInit+0x58>)
     a86:	6812      	ldr	r2, [r2, #0]
     a88:	0ed2      	lsrs	r2, r2, #27
     a8a:	4302      	orrs	r2, r0
     a8c:	b2d2      	uxtb	r2, r2
        ) |
     a8e:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     a90:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     a92:	2202      	movs	r2, #2
     a94:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     a96:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     a98:	7e5a      	ldrb	r2, [r3, #25]
     a9a:	b252      	sxtb	r2, r2
     a9c:	2a00      	cmp	r2, #0
     a9e:	dbfb      	blt.n	a98 <adcInit+0x38>
}
     aa0:	4770      	bx	lr
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	40000400 	.word	0x40000400
     aa8:	0000401e 	.word	0x0000401e
     aac:	42004000 	.word	0x42004000
     ab0:	40000c00 	.word	0x40000c00
     ab4:	00806024 	.word	0x00806024
     ab8:	00806020 	.word	0x00806020

00000abc <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     abc:	2202      	movs	r2, #2
     abe:	4b04      	ldr	r3, [pc, #16]	; (ad0 <adcSample+0x14>)
     ac0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     ac2:	3a01      	subs	r2, #1
     ac4:	7e19      	ldrb	r1, [r3, #24]
     ac6:	4211      	tst	r1, r2
     ac8:	d0fc      	beq.n	ac4 <adcSample+0x8>
    return ADC->RESULT.reg;
     aca:	8b58      	ldrh	r0, [r3, #26]
     acc:	b280      	uxth	r0, r0
}
     ace:	4770      	bx	lr
     ad0:	42004000 	.word	0x42004000

00000ad4 <adc_read>:


u16_t adc_read(Pin p) {
     ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     ad6:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     ad8:	2101      	movs	r1, #1
     ada:	0c02      	lsrs	r2, r0, #16
     adc:	9000      	str	r0, [sp, #0]
     ade:	b2d2      	uxtb	r2, r2
     ae0:	0e00      	lsrs	r0, r0, #24
     ae2:	0843      	lsrs	r3, r0, #1
     ae4:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ae6:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     ae8:	4208      	tst	r0, r1
     aea:	d01a      	beq.n	b22 <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     aec:	240f      	movs	r4, #15
     aee:	4910      	ldr	r1, [pc, #64]	; (b30 <adc_read+0x5c>)
     af0:	185b      	adds	r3, r3, r1
     af2:	7819      	ldrb	r1, [r3, #0]
     af4:	400c      	ands	r4, r1
     af6:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     af8:	4321      	orrs	r1, r4
     afa:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     afc:	4b0d      	ldr	r3, [pc, #52]	; (b34 <adc_read+0x60>)
     afe:	1880      	adds	r0, r0, r2
     b00:	18c0      	adds	r0, r0, r3
     b02:	2301      	movs	r3, #1
     b04:	7802      	ldrb	r2, [r0, #0]
     b06:	4313      	orrs	r3, r2
     b08:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b0a:	466b      	mov	r3, sp
     b0c:	221f      	movs	r2, #31
     b0e:	791b      	ldrb	r3, [r3, #4]
     b10:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b12:	23c0      	movs	r3, #192	; 0xc0
     b14:	015b      	lsls	r3, r3, #5
     b16:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b18:	4a07      	ldr	r2, [pc, #28]	; (b38 <adc_read+0x64>)
     b1a:	6113      	str	r3, [r2, #16]

    return adcSample();
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <adc_read+0x68>)
     b1e:	4798      	blx	r3
     b20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b22:	250f      	movs	r5, #15
     b24:	4c02      	ldr	r4, [pc, #8]	; (b30 <adc_read+0x5c>)
     b26:	191b      	adds	r3, r3, r4
     b28:	781c      	ldrb	r4, [r3, #0]
     b2a:	43ac      	bics	r4, r5
     b2c:	e7e4      	b.n	af8 <adc_read+0x24>
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	41004430 	.word	0x41004430
     b34:	41004440 	.word	0x41004440
     b38:	42004000 	.word	0x42004000
     b3c:	00000abd 	.word	0x00000abd

00000b40 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b40:	0c01      	lsrs	r1, r0, #16
     b42:	0c13      	lsrs	r3, r2, #16
     b44:	b5f0      	push	{r4, r5, r6, r7, lr}
     b46:	b2cd      	uxtb	r5, r1
     b48:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b4a:	2301      	movs	r3, #1
     b4c:	001e      	movs	r6, r3
     b4e:	0e12      	lsrs	r2, r2, #24
     b50:	4093      	lsls	r3, r2
     b52:	0e00      	lsrs	r0, r0, #24
     b54:	4086      	lsls	r6, r0
     b56:	001a      	movs	r2, r3
     b58:	2308      	movs	r3, #8
     b5a:	0030      	movs	r0, r6
     b5c:	4e11      	ldr	r6, [pc, #68]	; (ba4 <byteOut+0x64>)
     b5e:	01c9      	lsls	r1, r1, #7
     b60:	b087      	sub	sp, #28
     b62:	198f      	adds	r7, r1, r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b64:	4e10      	ldr	r6, [pc, #64]	; (ba8 <byteOut+0x68>)
     b66:	ac0c      	add	r4, sp, #48	; 0x30
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b68:	01ed      	lsls	r5, r5, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b6a:	19ae      	adds	r6, r5, r6
     b6c:	7824      	ldrb	r4, [r4, #0]
     b6e:	9601      	str	r6, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b70:	4e0c      	ldr	r6, [pc, #48]	; (ba4 <byteOut+0x64>)
     b72:	46b4      	mov	ip, r6
     b74:	44ac      	add	ip, r5
     b76:	4666      	mov	r6, ip
     b78:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     b7a:	b266      	sxtb	r6, r4
     b7c:	2e00      	cmp	r6, #0
     b7e:	da0e      	bge.n	b9e <byteOut+0x5e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b80:	4e09      	ldr	r6, [pc, #36]	; (ba8 <byteOut+0x68>)
     b82:	46b4      	mov	ip, r6
     b84:	448c      	add	ip, r1
     b86:	4666      	mov	r6, ip
     b88:	6032      	str	r2, [r6, #0]
     b8a:	9e01      	ldr	r6, [sp, #4]
     b8c:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     b8e:	0064      	lsls	r4, r4, #1
     b90:	b2db      	uxtb	r3, r3
     b92:	6030      	str	r0, [r6, #0]
     b94:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i<8; ++i) {
     b96:	2b00      	cmp	r3, #0
     b98:	d1ea      	bne.n	b70 <byteOut+0x30>
	}
}
     b9a:	b007      	add	sp, #28
     b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b9e:	603a      	str	r2, [r7, #0]
     ba0:	e7f3      	b.n	b8a <byteOut+0x4a>
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	41004414 	.word	0x41004414
     ba8:	41004418 	.word	0x41004418

00000bac <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	2501      	movs	r5, #1
     bb0:	b085      	sub	sp, #20
     bb2:	0c06      	lsrs	r6, r0, #16
     bb4:	9301      	str	r3, [sp, #4]
     bb6:	b2f3      	uxtb	r3, r6
     bb8:	002e      	movs	r6, r5
     bba:	9103      	str	r1, [sp, #12]
     bbc:	0011      	movs	r1, r2
     bbe:	0c14      	lsrs	r4, r2, #16
     bc0:	9200      	str	r2, [sp, #0]
     bc2:	0e02      	lsrs	r2, r0, #24
     bc4:	9002      	str	r0, [sp, #8]
     bc6:	4096      	lsls	r6, r2
	uint8_t byte = 0x00;
     bc8:	2000      	movs	r0, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bca:	b2e2      	uxtb	r2, r4
     bcc:	2408      	movs	r4, #8
     bce:	0e09      	lsrs	r1, r1, #24
     bd0:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bd2:	490a      	ldr	r1, [pc, #40]	; (bfc <byteIn+0x50>)
     bd4:	01db      	lsls	r3, r3, #7
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bd6:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bd8:	185b      	adds	r3, r3, r1
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bda:	1852      	adds	r2, r2, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bdc:	615e      	str	r6, [r3, #20]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bde:	6a11      	ldr	r1, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     be0:	0040      	lsls	r0, r0, #1
     be2:	4029      	ands	r1, r5
     be4:	1e4f      	subs	r7, r1, #1
     be6:	41b9      	sbcs	r1, r7
     be8:	3c01      	subs	r4, #1
     bea:	4308      	orrs	r0, r1
     bec:	b2e4      	uxtb	r4, r4
     bee:	b2c0      	uxtb	r0, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf0:	619e      	str	r6, [r3, #24]
	for (uint8_t i = 0; i<8; ++i) {
     bf2:	2c00      	cmp	r4, #0
     bf4:	d1f2      	bne.n	bdc <byteIn+0x30>
		pinHigh(SCK_PIN);
	}
	return byte;
     bf6:	b005      	add	sp, #20
     bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	41004400 	.word	0x41004400

00000c00 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c00:	22c2      	movs	r2, #194	; 0xc2
     c02:	4b19      	ldr	r3, [pc, #100]	; (c68 <GclkInit+0x68>)
     c04:	00d2      	lsls	r2, r2, #3
void GclkInit() {
     c06:	b510      	push	{r4, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c08:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c0a:	2202      	movs	r2, #2
     c0c:	4817      	ldr	r0, [pc, #92]	; (c6c <GclkInit+0x6c>)
     c0e:	6841      	ldr	r1, [r0, #4]
     c10:	4311      	orrs	r1, r2
     c12:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     c14:	4916      	ldr	r1, [pc, #88]	; (c70 <GclkInit+0x70>)
     c16:	8299      	strh	r1, [r3, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     c18:	68d9      	ldr	r1, [r3, #12]
     c1a:	4211      	tst	r1, r2
     c1c:	d0fc      	beq.n	c18 <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c1e:	4a15      	ldr	r2, [pc, #84]	; (c74 <GclkInit+0x74>)
     c20:	6812      	ldr	r2, [r2, #0]
     c22:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     c24:	2a3f      	cmp	r2, #63	; 0x3f
     c26:	d100      	bne.n	c2a <GclkInit+0x2a>
        coarse = 0x1f;
     c28:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c2a:	4913      	ldr	r1, [pc, #76]	; (c78 <GclkInit+0x78>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c2c:	4813      	ldr	r0, [pc, #76]	; (c7c <GclkInit+0x7c>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c2e:	6809      	ldr	r1, [r1, #0]
     c30:	0589      	lsls	r1, r1, #22
     c32:	0d89      	lsrs	r1, r1, #22
    if (fine == 0x3ff) {
     c34:	4281      	cmp	r1, r0
     c36:	d100      	bne.n	c3a <GclkInit+0x3a>
        fine = 0x1ff;
     c38:	4911      	ldr	r1, [pc, #68]	; (c80 <GclkInit+0x80>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c3a:	4812      	ldr	r0, [pc, #72]	; (c84 <GclkInit+0x84>)
     c3c:	8498      	strh	r0, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c3e:	2010      	movs	r0, #16
     c40:	68dc      	ldr	r4, [r3, #12]
     c42:	4204      	tst	r4, r0
     c44:	d0fc      	beq.n	c40 <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     c46:	0292      	lsls	r2, r2, #10
     c48:	430a      	orrs	r2, r1
     c4a:	629a      	str	r2, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c4c:	2210      	movs	r2, #16
     c4e:	68d9      	ldr	r1, [r3, #12]
     c50:	4211      	tst	r1, r2
     c52:	d0fc      	beq.n	c4e <GclkInit+0x4e>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     c54:	4a0c      	ldr	r2, [pc, #48]	; (c88 <GclkInit+0x88>)
     c56:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c58:	2280      	movs	r2, #128	; 0x80
     c5a:	4b0c      	ldr	r3, [pc, #48]	; (c8c <GclkInit+0x8c>)
     c5c:	0052      	lsls	r2, r2, #1
     c5e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     c60:	4a0b      	ldr	r2, [pc, #44]	; (c90 <GclkInit+0x90>)
     c62:	605a      	str	r2, [r3, #4]
}
     c64:	bd10      	pop	{r4, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	40000800 	.word	0x40000800
     c6c:	41004000 	.word	0x41004000
     c70:	0000060e 	.word	0x0000060e
     c74:	00806024 	.word	0x00806024
     c78:	00806028 	.word	0x00806028
     c7c:	000003ff 	.word	0x000003ff
     c80:	000001ff 	.word	0x000001ff
     c84:	00000522 	.word	0x00000522
     c88:	000005a2 	.word	0x000005a2
     c8c:	40000c00 	.word	0x40000c00
     c90:	00010700 	.word	0x00010700

00000c94 <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     c94:	4b25      	ldr	r3, [pc, #148]	; (d2c <RtcInit+0x98>)
     c96:	4a26      	ldr	r2, [pc, #152]	; (d30 <RtcInit+0x9c>)
void RtcInit() {
     c98:	b510      	push	{r4, lr}
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     c9a:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     c9c:	4a25      	ldr	r2, [pc, #148]	; (d34 <RtcInit+0xa0>)
    SYSCTRL->OSC32K.bit.CALIB =
     c9e:	6998      	ldr	r0, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ca0:	6812      	ldr	r2, [r2, #0]
    SYSCTRL->OSC32K.bit.CALIB =
     ca2:	4c25      	ldr	r4, [pc, #148]	; (d38 <RtcInit+0xa4>)
     ca4:	04d2      	lsls	r2, r2, #19
     ca6:	0e52      	lsrs	r2, r2, #25
     ca8:	0412      	lsls	r2, r2, #16
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     caa:	4924      	ldr	r1, [pc, #144]	; (d3c <RtcInit+0xa8>)
    SYSCTRL->OSC32K.bit.CALIB =
     cac:	4020      	ands	r0, r4
     cae:	4310      	orrs	r0, r2
     cb0:	6198      	str	r0, [r3, #24]
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     cb2:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     cb4:	6999      	ldr	r1, [r3, #24]
     cb6:	4021      	ands	r1, r4
     cb8:	430a      	orrs	r2, r1
     cba:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     cbc:	2202      	movs	r2, #2
     cbe:	6999      	ldr	r1, [r3, #24]
     cc0:	430a      	orrs	r2, r1
     cc2:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     cc4:	2204      	movs	r2, #4
     cc6:	68d9      	ldr	r1, [r3, #12]
     cc8:	4211      	tst	r1, r2
     cca:	d0fc      	beq.n	cc6 <RtcInit+0x32>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ccc:	2281      	movs	r2, #129	; 0x81
     cce:	4b1c      	ldr	r3, [pc, #112]	; (d40 <RtcInit+0xac>)
     cd0:	0052      	lsls	r2, r2, #1
     cd2:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     cd4:	4a1b      	ldr	r2, [pc, #108]	; (d44 <RtcInit+0xb0>)
     cd6:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     cd8:	785a      	ldrb	r2, [r3, #1]
     cda:	b252      	sxtb	r2, r2
     cdc:	2a00      	cmp	r2, #0
     cde:	dbfb      	blt.n	cd8 <RtcInit+0x44>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ce0:	4a19      	ldr	r2, [pc, #100]	; (d48 <RtcInit+0xb4>)
     ce2:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ce4:	2204      	movs	r2, #4
     ce6:	4b19      	ldr	r3, [pc, #100]	; (d4c <RtcInit+0xb8>)
     ce8:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cea:	7a9a      	ldrb	r2, [r3, #10]
     cec:	09d2      	lsrs	r2, r2, #7
     cee:	d1fc      	bne.n	cea <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     cf0:	22a0      	movs	r2, #160	; 0xa0
     cf2:	8819      	ldrh	r1, [r3, #0]
     cf4:	00d2      	lsls	r2, r2, #3
     cf6:	430a      	orrs	r2, r1
     cf8:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cfa:	7a9a      	ldrb	r2, [r3, #10]
     cfc:	09d2      	lsrs	r2, r2, #7
     cfe:	d1fc      	bne.n	cfa <RtcInit+0x66>

    RTC->MODE1.PER.reg = 998;
     d00:	4a13      	ldr	r2, [pc, #76]	; (d50 <RtcInit+0xbc>)
     d02:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d04:	7a9a      	ldrb	r2, [r3, #10]
     d06:	09d2      	lsrs	r2, r2, #7
     d08:	d1fc      	bne.n	d04 <RtcInit+0x70>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d0a:	8859      	ldrh	r1, [r3, #2]
     d0c:	4a11      	ldr	r2, [pc, #68]	; (d54 <RtcInit+0xc0>)
     d0e:	430a      	orrs	r2, r1
     d10:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d12:	2280      	movs	r2, #128	; 0x80
     d14:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d16:	8819      	ldrh	r1, [r3, #0]
     d18:	3a7e      	subs	r2, #126	; 0x7e
     d1a:	430a      	orrs	r2, r1
     d1c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d1e:	7a9a      	ldrb	r2, [r3, #10]
     d20:	09d2      	lsrs	r2, r2, #7
     d22:	d1fc      	bne.n	d1e <RtcInit+0x8a>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d24:	4b0c      	ldr	r3, [pc, #48]	; (d58 <RtcInit+0xc4>)
     d26:	3208      	adds	r2, #8
     d28:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d2a:	bd10      	pop	{r4, pc}
     d2c:	40000800 	.word	0x40000800
     d30:	00000606 	.word	0x00000606
     d34:	00806024 	.word	0x00806024
     d38:	ff80ffff 	.word	0xff80ffff
     d3c:	00000604 	.word	0x00000604
     d40:	40000c00 	.word	0x40000c00
     d44:	00230002 	.word	0x00230002
     d48:	00004204 	.word	0x00004204
     d4c:	40001400 	.word	0x40001400
     d50:	000003e6 	.word	0x000003e6
     d54:	00004010 	.word	0x00004010
     d58:	e000e100 	.word	0xe000e100

00000d5c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d5c:	230f      	movs	r3, #15
     d5e:	4003      	ands	r3, r0
     d60:	4808      	ldr	r0, [pc, #32]	; (d84 <gclkEnable+0x28>)
     d62:	0212      	lsls	r2, r2, #8
     d64:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d66:	20f8      	movs	r0, #248	; 0xf8
     d68:	0209      	lsls	r1, r1, #8
     d6a:	0140      	lsls	r0, r0, #5
     d6c:	4001      	ands	r1, r0
     d6e:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
     d70:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d72:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d74:	4c04      	ldr	r4, [pc, #16]	; (d88 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d76:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d78:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d7a:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d7c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d7e:	6060      	str	r0, [r4, #4]
}
     d80:	bd10      	pop	{r4, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	00ffff00 	.word	0x00ffff00
     d88:	40000c00 	.word	0x40000c00

00000d8c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     d8c:	4b04      	ldr	r3, [pc, #16]	; (da0 <delayInit+0x14>)
     d8e:	4a05      	ldr	r2, [pc, #20]	; (da4 <delayInit+0x18>)
     d90:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     d92:	2230      	movs	r2, #48	; 0x30
     d94:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     d96:	4b04      	ldr	r3, [pc, #16]	; (da8 <delayInit+0x1c>)
     d98:	3a2b      	subs	r2, #43	; 0x2b
     d9a:	601a      	str	r2, [r3, #0]
}
     d9c:	4770      	bx	lr
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	20000004 	.word	0x20000004
     da4:	0000bb80 	.word	0x0000bb80
     da8:	e000e010 	.word	0xe000e010

00000dac <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     dac:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dae:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     db0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     db2:	4b07      	ldr	r3, [pc, #28]	; (dd0 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     db4:	0264      	lsls	r4, r4, #9
     db6:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <delay_us+0x28>)
    while (n--) {
     dba:	3801      	subs	r0, #1
     dbc:	d200      	bcs.n	dc0 <delay_us+0x14>
    }
}
     dbe:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     dc0:	2a00      	cmp	r2, #0
     dc2:	d0fa      	beq.n	dba <delay_us+0xe>
        SysTick->LOAD = n;
     dc4:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     dc6:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dc8:	681d      	ldr	r5, [r3, #0]
     dca:	4225      	tst	r5, r4
     dcc:	d0fc      	beq.n	dc8 <delay_us+0x1c>
     dce:	e7f4      	b.n	dba <delay_us+0xe>
     dd0:	20000004 	.word	0x20000004
     dd4:	e000e010 	.word	0xe000e010

00000dd8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     dd8:	b530      	push	{r4, r5, lr}
     dda:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     ddc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     dde:	4b07      	ldr	r3, [pc, #28]	; (dfc <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     de0:	0264      	lsls	r4, r4, #9
     de2:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <delay_ms+0x28>)
    while (n--) {
     de6:	3801      	subs	r0, #1
     de8:	d200      	bcs.n	dec <delay_ms+0x14>
    }
}
     dea:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     dec:	2a00      	cmp	r2, #0
     dee:	d0fa      	beq.n	de6 <delay_ms+0xe>
        SysTick->LOAD = n;
     df0:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     df2:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     df4:	681d      	ldr	r5, [r3, #0]
     df6:	4225      	tst	r5, r4
     df8:	d0fc      	beq.n	df4 <delay_ms+0x1c>
     dfa:	e7f4      	b.n	de6 <delay_ms+0xe>
     dfc:	20000004 	.word	0x20000004
     e00:	e000e010 	.word	0xe000e010

00000e04 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e04:	21fa      	movs	r1, #250	; 0xfa
     e06:	4a04      	ldr	r2, [pc, #16]	; (e18 <RTC_Handler+0x14>)
     e08:	0089      	lsls	r1, r1, #2
     e0a:	6813      	ldr	r3, [r2, #0]
     e0c:	185b      	adds	r3, r3, r1
     e0e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e10:	22ff      	movs	r2, #255	; 0xff
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <RTC_Handler+0x18>)
     e14:	721a      	strb	r2, [r3, #8]
}
     e16:	4770      	bx	lr
     e18:	2000045c 	.word	0x2000045c
     e1c:	40001400 	.word	0x40001400

00000e20 <millis>:

uint32_t millis(void) {
     e20:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e22:	f3ef 8110 	mrs	r1, PRIMASK
     e26:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e28:	4b09      	ldr	r3, [pc, #36]	; (e50 <millis+0x30>)
     e2a:	4c0a      	ldr	r4, [pc, #40]	; (e54 <millis+0x34>)
     e2c:	8a18      	ldrh	r0, [r3, #16]
     e2e:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e30:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e32:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e34:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e36:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e38:	2a00      	cmp	r2, #0
     e3a:	d005      	beq.n	e48 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e3c:	22fa      	movs	r2, #250	; 0xfa
     e3e:	8a1b      	ldrh	r3, [r3, #16]
     e40:	6820      	ldr	r0, [r4, #0]
     e42:	0092      	lsls	r2, r2, #2
     e44:	1880      	adds	r0, r0, r2
     e46:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     e48:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e4c:	bd30      	pop	{r4, r5, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	40001400 	.word	0x40001400
     e54:	2000045c 	.word	0x2000045c

00000e58 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e58:	4a0d      	ldr	r2, [pc, #52]	; (e90 <TC4Init+0x38>)
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <TC4Init+0x3c>)
     e5c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e5e:	2380      	movs	r3, #128	; 0x80
     e60:	4a0d      	ldr	r2, [pc, #52]	; (e98 <TC4Init+0x40>)
     e62:	015b      	lsls	r3, r3, #5
     e64:	6a11      	ldr	r1, [r2, #32]
     e66:	430b      	orrs	r3, r1
     e68:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e6a:	4b0c      	ldr	r3, [pc, #48]	; (e9c <TC4Init+0x44>)
     e6c:	4a0c      	ldr	r2, [pc, #48]	; (ea0 <TC4Init+0x48>)
     e6e:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     e70:	2241      	movs	r2, #65	; 0x41
     e72:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e74:	3a40      	subs	r2, #64	; 0x40
     e76:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e78:	32ff      	adds	r2, #255	; 0xff
     e7a:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e7c:	8819      	ldrh	r1, [r3, #0]
     e7e:	3afe      	subs	r2, #254	; 0xfe
     e80:	430a      	orrs	r2, r1
     e82:	801a      	strh	r2, [r3, #0]
     e84:	2280      	movs	r2, #128	; 0x80
     e86:	4b07      	ldr	r3, [pc, #28]	; (ea4 <TC4Init+0x4c>)
     e88:	0312      	lsls	r2, r2, #12
     e8a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     e8c:	4770      	bx	lr
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	0000421c 	.word	0x0000421c
     e94:	40000c00 	.word	0x40000c00
     e98:	40000400 	.word	0x40000400
     e9c:	42003000 	.word	0x42003000
     ea0:	00000904 	.word	0x00000904
     ea4:	e000e100 	.word	0xe000e100

00000ea8 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     ea8:	22ff      	movs	r2, #255	; 0xff
     eaa:	4b03      	ldr	r3, [pc, #12]	; (eb8 <TC4_Handler+0x10>)
     eac:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     eae:	4b03      	ldr	r3, [pc, #12]	; (ebc <TC4_Handler+0x14>)
     eb0:	3afe      	subs	r2, #254	; 0xfe
     eb2:	701a      	strb	r2, [r3, #0]
}
     eb4:	4770      	bx	lr
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	42003000 	.word	0x42003000
     ebc:	20000463 	.word	0x20000463

00000ec0 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     ec0:	4a0d      	ldr	r2, [pc, #52]	; (ef8 <TC5Init+0x38>)
     ec2:	4b0e      	ldr	r3, [pc, #56]	; (efc <TC5Init+0x3c>)
     ec4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     ec6:	2380      	movs	r3, #128	; 0x80
     ec8:	4a0d      	ldr	r2, [pc, #52]	; (f00 <TC5Init+0x40>)
     eca:	019b      	lsls	r3, r3, #6
     ecc:	6a11      	ldr	r1, [r2, #32]
     ece:	430b      	orrs	r3, r1
     ed0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ed2:	4b0c      	ldr	r3, [pc, #48]	; (f04 <TC5Init+0x44>)
     ed4:	4a0c      	ldr	r2, [pc, #48]	; (f08 <TC5Init+0x48>)
     ed6:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
							
    TC5->COUNT8.PER.reg = 0x20;
     ed8:	2220      	movs	r2, #32
     eda:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     edc:	3a1f      	subs	r2, #31
     ede:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ee0:	32ff      	adds	r2, #255	; 0xff
     ee2:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ee4:	8819      	ldrh	r1, [r3, #0]
     ee6:	3afe      	subs	r2, #254	; 0xfe
     ee8:	430a      	orrs	r2, r1
     eea:	801a      	strh	r2, [r3, #0]
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	4b07      	ldr	r3, [pc, #28]	; (f0c <TC5Init+0x4c>)
     ef0:	0352      	lsls	r2, r2, #13
     ef2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     ef4:	4770      	bx	lr
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	0000421c 	.word	0x0000421c
     efc:	40000c00 	.word	0x40000c00
     f00:	40000400 	.word	0x40000400
     f04:	42003400 	.word	0x42003400
     f08:	00000e04 	.word	0x00000e04
     f0c:	e000e100 	.word	0xe000e100

00000f10 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f10:	22ff      	movs	r2, #255	; 0xff
     f12:	4b03      	ldr	r3, [pc, #12]	; (f20 <TC5_Handler+0x10>)
     f14:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <TC5_Handler+0x14>)
     f18:	3afe      	subs	r2, #254	; 0xfe
     f1a:	701a      	strb	r2, [r3, #0]
     f1c:	4770      	bx	lr
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	42003400 	.word	0x42003400
     f24:	20000461 	.word	0x20000461

00000f28 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f2a:	27c0      	movs	r7, #192	; 0xc0
     f2c:	4d10      	ldr	r5, [pc, #64]	; (f70 <dmaInit+0x48>)
     f2e:	003a      	movs	r2, r7
     f30:	4e10      	ldr	r6, [pc, #64]	; (f74 <dmaInit+0x4c>)
     f32:	0028      	movs	r0, r5
     f34:	2100      	movs	r1, #0
     f36:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f38:	4c0f      	ldr	r4, [pc, #60]	; (f78 <dmaInit+0x50>)
     f3a:	003a      	movs	r2, r7
     f3c:	2100      	movs	r1, #0
     f3e:	0020      	movs	r0, r4
     f40:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f42:	2220      	movs	r2, #32
     f44:	4b0d      	ldr	r3, [pc, #52]	; (f7c <dmaInit+0x54>)
     f46:	6959      	ldr	r1, [r3, #20]
     f48:	430a      	orrs	r2, r1
     f4a:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f4c:	2210      	movs	r2, #16
     f4e:	69d9      	ldr	r1, [r3, #28]
     f50:	430a      	orrs	r2, r1

	DMAC->CTRL.bit.DMAENABLE = 0;
     f52:	2102      	movs	r1, #2
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f54:	61da      	str	r2, [r3, #28]
	DMAC->CTRL.bit.DMAENABLE = 0;
     f56:	4b0a      	ldr	r3, [pc, #40]	; (f80 <dmaInit+0x58>)
     f58:	881a      	ldrh	r2, [r3, #0]
     f5a:	438a      	bics	r2, r1
     f5c:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     f5e:	2201      	movs	r2, #1
     f60:	8819      	ldrh	r1, [r3, #0]
     f62:	430a      	orrs	r2, r1
     f64:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f66:	4a07      	ldr	r2, [pc, #28]	; (f84 <dmaInit+0x5c>)
	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     f68:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     f6a:	639c      	str	r4, [r3, #56]	; 0x38
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f6c:	801a      	strh	r2, [r3, #0]
}
     f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f70:	20000530 	.word	0x20000530
     f74:	00002475 	.word	0x00002475
     f78:	20000470 	.word	0x20000470
     f7c:	40000400 	.word	0x40000400
     f80:	41004800 	.word	0x41004800
     f84:	00000f02 	.word	0x00000f02

00000f88 <flight>:

void flight(Altimeter *my_altimeter) {



    switch(my_altimeter->myFlightState) {
     f88:	7803      	ldrb	r3, [r0, #0]
void flight(Altimeter *my_altimeter) {
     f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     f8c:	0004      	movs	r4, r0
    switch(my_altimeter->myFlightState) {
     f8e:	2b00      	cmp	r3, #0
     f90:	d13b      	bne.n	100a <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     f92:	4d1e      	ldr	r5, [pc, #120]	; (100c <flight+0x84>)
     f94:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     f96:	47a8      	blx	r5
     f98:	4e1d      	ldr	r6, [pc, #116]	; (1010 <flight+0x88>)
     f9a:	2200      	movs	r2, #0
     f9c:	4b1d      	ldr	r3, [pc, #116]	; (1014 <flight+0x8c>)
     f9e:	47b0      	blx	r6
     fa0:	9000      	str	r0, [sp, #0]
     fa2:	9101      	str	r1, [sp, #4]
     fa4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     fa6:	47a8      	blx	r5
     fa8:	2200      	movs	r2, #0
     faa:	4b1a      	ldr	r3, [pc, #104]	; (1014 <flight+0x8c>)
     fac:	47b0      	blx	r6
     fae:	4e1a      	ldr	r6, [pc, #104]	; (1018 <flight+0x90>)
     fb0:	0002      	movs	r2, r0
     fb2:	000b      	movs	r3, r1
     fb4:	9800      	ldr	r0, [sp, #0]
     fb6:	9901      	ldr	r1, [sp, #4]
     fb8:	47b0      	blx	r6
     fba:	4b18      	ldr	r3, [pc, #96]	; (101c <flight+0x94>)
     fbc:	4798      	blx	r3
     fbe:	63e0      	str	r0, [r4, #60]	; 0x3c

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
     fc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
     fc2:	47a8      	blx	r5
     fc4:	2200      	movs	r2, #0
     fc6:	4b13      	ldr	r3, [pc, #76]	; (1014 <flight+0x8c>)
     fc8:	4e11      	ldr	r6, [pc, #68]	; (1010 <flight+0x88>)
     fca:	47b0      	blx	r6
     fcc:	0006      	movs	r6, r0
     fce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     fd0:	000f      	movs	r7, r1
     fd2:	47a8      	blx	r5
     fd4:	4d0e      	ldr	r5, [pc, #56]	; (1010 <flight+0x88>)
     fd6:	2200      	movs	r2, #0
     fd8:	4b0e      	ldr	r3, [pc, #56]	; (1014 <flight+0x8c>)
     fda:	47a8      	blx	r5
     fdc:	4d0e      	ldr	r5, [pc, #56]	; (1018 <flight+0x90>)
     fde:	0002      	movs	r2, r0
     fe0:	000b      	movs	r3, r1
     fe2:	0030      	movs	r0, r6
     fe4:	0039      	movs	r1, r7
     fe6:	47a8      	blx	r5
     fe8:	4b0c      	ldr	r3, [pc, #48]	; (101c <flight+0x94>)
     fea:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     fec:	4d0c      	ldr	r5, [pc, #48]	; (1020 <flight+0x98>)
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
     fee:	6320      	str	r0, [r4, #48]	; 0x30
        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     ff0:	47a8      	blx	r5
     ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ff4:	1ac0      	subs	r0, r0, r3
     ff6:	23fa      	movs	r3, #250	; 0xfa
     ff8:	00db      	lsls	r3, r3, #3
     ffa:	4298      	cmp	r0, r3
     ffc:	d905      	bls.n	100a <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
     ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1000:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1004:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myIMU.offsetBufferTime = millis();
    1006:	47a8      	blx	r5
    1008:	6360      	str	r0, [r4, #52]	; 0x34

        break;
    }


    100a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    100c:	00002239 	.word	0x00002239
    1010:	00001c45 	.word	0x00001c45
    1014:	3fe00000 	.word	0x3fe00000
    1018:	00001625 	.word	0x00001625
    101c:	000022dd 	.word	0x000022dd
    1020:	00000e21 	.word	0x00000e21

00001024 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    1024:	b5f0      	push	{r4, r5, r6, r7, lr}
    1026:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    1028:	466a      	mov	r2, sp
    102a:	2341      	movs	r3, #65	; 0x41
    102c:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    102e:	23a3      	movs	r3, #163	; 0xa3
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1030:	4669      	mov	r1, sp
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1032:	009b      	lsls	r3, r3, #2
    1034:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1036:	2480      	movs	r4, #128	; 0x80
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1038:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    103a:	0a1a      	lsrs	r2, r3, #8
    103c:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    103e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1040:	0e1b      	lsrs	r3, r3, #24
    1042:	710b      	strb	r3, [r1, #4]
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1044:	6a43      	ldr	r3, [r0, #36]	; 0x24
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1046:	70ca      	strb	r2, [r1, #3]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1048:	0a1a      	lsrs	r2, r3, #8
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    104a:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    104c:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    104e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1050:	0e1b      	lsrs	r3, r3, #24
    1052:	720b      	strb	r3, [r1, #8]
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1054:	0003      	movs	r3, r0
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1056:	71ca      	strb	r2, [r1, #7]
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1058:	335c      	adds	r3, #92	; 0x5c
    105a:	881b      	ldrh	r3, [r3, #0]
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    105c:	34ff      	adds	r4, #255	; 0xff
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    105e:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1060:	0a1b      	lsrs	r3, r3, #8
    1062:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1064:	0003      	movs	r3, r0
    1066:	3360      	adds	r3, #96	; 0x60
    1068:	881b      	ldrh	r3, [r3, #0]
    106a:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    106c:	0a1b      	lsrs	r3, r3, #8
    106e:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1070:	0003      	movs	r3, r0
    1072:	3364      	adds	r3, #100	; 0x64
    1074:	881b      	ldrh	r3, [r3, #0]
    1076:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1078:	0a1b      	lsrs	r3, r3, #8
    107a:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    107c:	0003      	movs	r3, r0
    107e:	3368      	adds	r3, #104	; 0x68
    1080:	881b      	ldrh	r3, [r3, #0]
    1082:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1084:	0a1b      	lsrs	r3, r3, #8
    1086:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1088:	0003      	movs	r3, r0
    108a:	336c      	adds	r3, #108	; 0x6c
    108c:	881b      	ldrh	r3, [r3, #0]
    108e:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1090:	0a1b      	lsrs	r3, r3, #8
    1092:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1094:	0003      	movs	r3, r0
    1096:	3370      	adds	r3, #112	; 0x70
    1098:	881b      	ldrh	r3, [r3, #0]
    109a:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    109c:	0a1b      	lsrs	r3, r3, #8
    109e:	750b      	strb	r3, [r1, #20]
    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    10a0:	0003      	movs	r3, r0
    10a2:	3374      	adds	r3, #116	; 0x74
    10a4:	881b      	ldrh	r3, [r3, #0]
    10a6:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    10a8:	0a1b      	lsrs	r3, r3, #8
    10aa:	758b      	strb	r3, [r1, #22]
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    10ac:	5d02      	ldrb	r2, [r0, r4]
    10ae:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    10b0:	2ae8      	cmp	r2, #232	; 0xe8
    10b2:	dd2d      	ble.n	1110 <logSensors+0xec>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    10b4:	18d1      	adds	r1, r2, r3
    10b6:	29fe      	cmp	r1, #254	; 0xfe
    10b8:	dd18      	ble.n	10ec <logSensors+0xc8>
    10ba:	0002      	movs	r2, r0
        }


        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    10bc:	2500      	movs	r5, #0
    10be:	491a      	ldr	r1, [pc, #104]	; (1128 <logSensors+0x104>)
    10c0:	3281      	adds	r2, #129	; 0x81
    10c2:	32ff      	adds	r2, #255	; 0xff
    10c4:	1841      	adds	r1, r0, r1
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    10c6:	7817      	ldrb	r7, [r2, #0]
    10c8:	1e56      	subs	r6, r2, #1
    10ca:	3eff      	subs	r6, #255	; 0xff
    10cc:	7037      	strb	r7, [r6, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    10ce:	7015      	strb	r5, [r2, #0]
    10d0:	3201      	adds	r2, #1
        for(u8_t i = 0; i < 0xFF; ++i) {
    10d2:	428a      	cmp	r2, r1
    10d4:	d1f7      	bne.n	10c6 <logSensors+0xa2>
    10d6:	2200      	movs	r2, #0
    10d8:	b2d5      	uxtb	r5, r2
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    10da:	1959      	adds	r1, r3, r5
    10dc:	b2c9      	uxtb	r1, r1
    10de:	2917      	cmp	r1, #23
    10e0:	d90d      	bls.n	10fe <logSensors+0xda>
            bytesWritten++;

            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
        }

        my_altimeter->myFlashMemory.pageReady = true;
    10e2:	2201      	movs	r2, #1
    10e4:	4b10      	ldr	r3, [pc, #64]	; (1128 <logSensors+0x104>)
    10e6:	54c2      	strb	r2, [r0, r3]

    }

//u8_t bytesSent = AT25SEWritePage(my_altimeter->currentAddress,bytesToSend,dataToSend);

}
    10e8:	b007      	add	sp, #28
    10ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    10ec:	466d      	mov	r5, sp
    10ee:	1841      	adds	r1, r0, r1
    10f0:	5ced      	ldrb	r5, [r5, r3]
    10f2:	3181      	adds	r1, #129	; 0x81
    10f4:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    10f6:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    10f8:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    10fa:	b2db      	uxtb	r3, r3
    10fc:	e7da      	b.n	10b4 <logSensors+0x90>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[dataByte];
    10fe:	0011      	movs	r1, r2
    1100:	466e      	mov	r6, sp
    1102:	3181      	adds	r1, #129	; 0x81
    1104:	5cb6      	ldrb	r6, [r6, r2]
    1106:	31ff      	adds	r1, #255	; 0xff
    1108:	5446      	strb	r6, [r0, r1]
    110a:	3201      	adds	r2, #1
            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
    110c:	5505      	strb	r5, [r0, r4]
    110e:	e7e3      	b.n	10d8 <logSensors+0xb4>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1110:	466d      	mov	r5, sp
    1112:	18d1      	adds	r1, r2, r3
    1114:	5ced      	ldrb	r5, [r5, r3]
    1116:	3181      	adds	r1, #129	; 0x81
    1118:	31ff      	adds	r1, #255	; 0xff
    111a:	3301      	adds	r3, #1
    111c:	5445      	strb	r5, [r0, r1]
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    111e:	2b18      	cmp	r3, #24
    1120:	d1f6      	bne.n	1110 <logSensors+0xec>
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    1122:	3218      	adds	r2, #24
    1124:	5502      	strb	r2, [r0, r4]
}
    1126:	e7df      	b.n	10e8 <logSensors+0xc4>
    1128:	0000027f 	.word	0x0000027f

0000112c <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    112c:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    112e:	4bc9      	ldr	r3, [pc, #804]	; (1454 <sampleTick+0x328>)
void sampleTick(Altimeter *my_altimeter) {
    1130:	b087      	sub	sp, #28
    1132:	0004      	movs	r4, r0
    my_altimeter->sampleTick = millis();
    1134:	4798      	blx	r3
    1136:	23a3      	movs	r3, #163	; 0xa3

    my_altimeter->batV = adc_read(senseBatPin);
    1138:	4dc7      	ldr	r5, [pc, #796]	; (1458 <sampleTick+0x32c>)
    my_altimeter->sampleTick = millis();
    113a:	009b      	lsls	r3, r3, #2
    113c:	50e0      	str	r0, [r4, r3]
    my_altimeter->batV = adc_read(senseBatPin);
    113e:	786b      	ldrb	r3, [r5, #1]
    1140:	7828      	ldrb	r0, [r5, #0]
    1142:	021b      	lsls	r3, r3, #8
    1144:	4303      	orrs	r3, r0
    1146:	78a8      	ldrb	r0, [r5, #2]
    1148:	4ec4      	ldr	r6, [pc, #784]	; (145c <sampleTick+0x330>)
    114a:	0400      	lsls	r0, r0, #16
    114c:	4303      	orrs	r3, r0
    114e:	78e8      	ldrb	r0, [r5, #3]
    1150:	7929      	ldrb	r1, [r5, #4]
    1152:	0600      	lsls	r0, r0, #24
    1154:	4318      	orrs	r0, r3
    1156:	47b0      	blx	r6
    1158:	23a0      	movs	r3, #160	; 0xa0
    115a:	009b      	lsls	r3, r3, #2
    115c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    115e:	79ab      	ldrb	r3, [r5, #6]
    1160:	7968      	ldrb	r0, [r5, #5]
    1162:	021b      	lsls	r3, r3, #8
    1164:	4303      	orrs	r3, r0
    1166:	79e8      	ldrb	r0, [r5, #7]
    1168:	7a69      	ldrb	r1, [r5, #9]
    116a:	0400      	lsls	r0, r0, #16
    116c:	4303      	orrs	r3, r0
    116e:	7a28      	ldrb	r0, [r5, #8]
    1170:	0600      	lsls	r0, r0, #24
    1172:	4318      	orrs	r0, r3
    1174:	47b0      	blx	r6
    1176:	4bba      	ldr	r3, [pc, #744]	; (1460 <sampleTick+0x334>)
    my_altimeter->senseB = adc_read(senseBPin);
    1178:	7ba9      	ldrb	r1, [r5, #14]
    my_altimeter->senseA = adc_read(senseAPin);
    117a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    117c:	7aeb      	ldrb	r3, [r5, #11]
    117e:	7aa8      	ldrb	r0, [r5, #10]
    1180:	021b      	lsls	r3, r3, #8
    1182:	4303      	orrs	r3, r0
    1184:	7b28      	ldrb	r0, [r5, #12]
    1186:	0400      	lsls	r0, r0, #16
    1188:	4303      	orrs	r3, r0
    118a:	7b68      	ldrb	r0, [r5, #13]
    118c:	0600      	lsls	r0, r0, #24
    118e:	4318      	orrs	r0, r3
    1190:	47b0      	blx	r6
    1192:	23a1      	movs	r3, #161	; 0xa1
    1194:	009b      	lsls	r3, r3, #2
    1196:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    1198:	7c2b      	ldrb	r3, [r5, #16]
    119a:	7be8      	ldrb	r0, [r5, #15]
    119c:	021b      	lsls	r3, r3, #8
    119e:	4303      	orrs	r3, r0
    11a0:	7c68      	ldrb	r0, [r5, #17]
    11a2:	7ce9      	ldrb	r1, [r5, #19]
    11a4:	0400      	lsls	r0, r0, #16
    11a6:	4303      	orrs	r3, r0
    11a8:	7ca8      	ldrb	r0, [r5, #18]
    11aa:	0600      	lsls	r0, r0, #24
    11ac:	4318      	orrs	r0, r3
    11ae:	47b0      	blx	r6
    11b0:	4bac      	ldr	r3, [pc, #688]	; (1464 <sampleTick+0x338>)
    my_altimeter->senseD = adc_read(senseDPin);
    11b2:	7e29      	ldrb	r1, [r5, #24]
    my_altimeter->senseC = adc_read(senseCPin);
    11b4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    11b6:	7d6b      	ldrb	r3, [r5, #21]
    11b8:	7d28      	ldrb	r0, [r5, #20]
    11ba:	021b      	lsls	r3, r3, #8
    11bc:	4303      	orrs	r3, r0
    11be:	7da8      	ldrb	r0, [r5, #22]
    11c0:	0400      	lsls	r0, r0, #16
    11c2:	4303      	orrs	r3, r0
    11c4:	7de8      	ldrb	r0, [r5, #23]
    11c6:	0600      	lsls	r0, r0, #24
    11c8:	4318      	orrs	r0, r3
    11ca:	47b0      	blx	r6
    11cc:	23a2      	movs	r3, #162	; 0xa2
    11ce:	009b      	lsls	r3, r3, #2
    11d0:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    11d2:	7eab      	ldrb	r3, [r5, #26]
    11d4:	7e68      	ldrb	r0, [r5, #25]
    11d6:	021b      	lsls	r3, r3, #8
    11d8:	4303      	orrs	r3, r0
    11da:	7ee8      	ldrb	r0, [r5, #27]
    11dc:	7f69      	ldrb	r1, [r5, #29]
    11de:	0400      	lsls	r0, r0, #16
    11e0:	4303      	orrs	r3, r0
    11e2:	7f28      	ldrb	r0, [r5, #28]
    11e4:	0600      	lsls	r0, r0, #24
    11e6:	4318      	orrs	r0, r3
    11e8:	47b0      	blx	r6
    11ea:	0023      	movs	r3, r4
    11ec:	3374      	adds	r3, #116	; 0x74
    11ee:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    11f0:	4b9d      	ldr	r3, [pc, #628]	; (1468 <sampleTick+0x33c>)
    11f2:	18c0      	adds	r0, r0, r3
    11f4:	4b9d      	ldr	r3, [pc, #628]	; (146c <sampleTick+0x340>)
    11f6:	4798      	blx	r3
    11f8:	4a9d      	ldr	r2, [pc, #628]	; (1470 <sampleTick+0x344>)
    11fa:	4e9e      	ldr	r6, [pc, #632]	; (1474 <sampleTick+0x348>)
    11fc:	4b9e      	ldr	r3, [pc, #632]	; (1478 <sampleTick+0x34c>)
    11fe:	47b0      	blx	r6
    1200:	4b9e      	ldr	r3, [pc, #632]	; (147c <sampleTick+0x350>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1202:	2680      	movs	r6, #128	; 0x80
    1204:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1206:	2250      	movs	r2, #80	; 0x50
    1208:	0029      	movs	r1, r5
    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    120a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    120c:	0236      	lsls	r6, r6, #8
    120e:	6463      	str	r3, [r4, #68]	; 0x44
    1210:	4b9b      	ldr	r3, [pc, #620]	; (1480 <sampleTick+0x354>)
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1212:	67a0      	str	r0, [r4, #120]	; 0x78
    1214:	615e      	str	r6, [r3, #20]
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1216:	002b      	movs	r3, r5
    1218:	9200      	str	r2, [sp, #0]
    121a:	7fea      	ldrb	r2, [r5, #31]
    121c:	7fa8      	ldrb	r0, [r5, #30]
    121e:	311e      	adds	r1, #30
    1220:	0212      	lsls	r2, r2, #8
    1222:	4310      	orrs	r0, r2
    1224:	788a      	ldrb	r2, [r1, #2]
    1226:	3323      	adds	r3, #35	; 0x23
    1228:	0412      	lsls	r2, r2, #16
    122a:	4302      	orrs	r2, r0
    122c:	78c8      	ldrb	r0, [r1, #3]
    122e:	781d      	ldrb	r5, [r3, #0]
    1230:	0600      	lsls	r0, r0, #24
    1232:	4310      	orrs	r0, r2
    1234:	790a      	ldrb	r2, [r1, #4]
    1236:	791f      	ldrb	r7, [r3, #4]
    1238:	9204      	str	r2, [sp, #16]
    123a:	785a      	ldrb	r2, [r3, #1]
    123c:	0039      	movs	r1, r7
    123e:	0212      	lsls	r2, r2, #8
    1240:	432a      	orrs	r2, r5
    1242:	789d      	ldrb	r5, [r3, #2]
    1244:	9003      	str	r0, [sp, #12]
    1246:	042d      	lsls	r5, r5, #16
    1248:	432a      	orrs	r2, r5
    124a:	78dd      	ldrb	r5, [r3, #3]
    124c:	9b04      	ldr	r3, [sp, #16]
    124e:	062d      	lsls	r5, r5, #24
    1250:	4315      	orrs	r5, r2
    1252:	9505      	str	r5, [sp, #20]
    1254:	0002      	movs	r2, r0
    1256:	0028      	movs	r0, r5
    1258:	4d8a      	ldr	r5, [pc, #552]	; (1484 <sampleTick+0x358>)
    125a:	47a8      	blx	r5
    pinHigh(cs_baro);
    delay_us(500);
    125c:	20fa      	movs	r0, #250	; 0xfa
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    125e:	4b88      	ldr	r3, [pc, #544]	; (1480 <sampleTick+0x354>)
    1260:	0040      	lsls	r0, r0, #1
    1262:	619e      	str	r6, [r3, #24]
    1264:	4b88      	ldr	r3, [pc, #544]	; (1488 <sampleTick+0x35c>)
    1266:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1268:	4b88      	ldr	r3, [pc, #544]	; (148c <sampleTick+0x360>)
    126a:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    126c:	4b84      	ldr	r3, [pc, #528]	; (1480 <sampleTick+0x354>)
    126e:	6160      	str	r0, [r4, #20]
    1270:	615e      	str	r6, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1272:	2342      	movs	r3, #66	; 0x42
    1274:	9a03      	ldr	r2, [sp, #12]
    1276:	9300      	str	r3, [sp, #0]
    1278:	9805      	ldr	r0, [sp, #20]
    127a:	9b04      	ldr	r3, [sp, #16]
    127c:	0039      	movs	r1, r7
    127e:	4d81      	ldr	r5, [pc, #516]	; (1484 <sampleTick+0x358>)
    1280:	47a8      	blx	r5
    1282:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1284:	4b7e      	ldr	r3, [pc, #504]	; (1480 <sampleTick+0x354>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1286:	00d2      	lsls	r2, r2, #3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1288:	619e      	str	r6, [r3, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    128a:	4b81      	ldr	r3, [pc, #516]	; (1490 <sampleTick+0x364>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    128c:	4f81      	ldr	r7, [pc, #516]	; (1494 <sampleTick+0x368>)
    128e:	601a      	str	r2, [r3, #0]
    1290:	2182      	movs	r1, #130	; 0x82
    1292:	2000      	movs	r0, #0
    1294:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1296:	21ff      	movs	r1, #255	; 0xff
    1298:	2000      	movs	r0, #0
    129a:	47b8      	blx	r7
    129c:	0023      	movs	r3, r4
    129e:	335c      	adds	r3, #92	; 0x5c
    12a0:	8018      	strh	r0, [r3, #0]
    12a2:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12a4:	21ff      	movs	r1, #255	; 0xff
    12a6:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    12a8:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12aa:	47b8      	blx	r7
    12ac:	9b03      	ldr	r3, [sp, #12]
    12ae:	0200      	lsls	r0, r0, #8
    12b0:	4305      	orrs	r5, r0
    12b2:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    12b4:	21ff      	movs	r1, #255	; 0xff
    12b6:	0026      	movs	r6, r4
    12b8:	2000      	movs	r0, #0
    12ba:	47b8      	blx	r7
    12bc:	3660      	adds	r6, #96	; 0x60
    12be:	8030      	strh	r0, [r6, #0]
    12c0:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12c2:	21ff      	movs	r1, #255	; 0xff
    12c4:	2000      	movs	r0, #0
    12c6:	47b8      	blx	r7
    12c8:	0200      	lsls	r0, r0, #8
    12ca:	4305      	orrs	r5, r0
    12cc:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    12ce:	21ff      	movs	r1, #255	; 0xff
    12d0:	2000      	movs	r0, #0
    12d2:	47b8      	blx	r7
    12d4:	0023      	movs	r3, r4
    12d6:	3364      	adds	r3, #100	; 0x64
    12d8:	8018      	strh	r0, [r3, #0]
    12da:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12dc:	21ff      	movs	r1, #255	; 0xff
    12de:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    12e0:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12e2:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	0200      	lsls	r0, r0, #8
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	4305      	orrs	r5, r0
    12ec:	b22d      	sxth	r5, r5
    12ee:	801d      	strh	r5, [r3, #0]
    12f0:	4b69      	ldr	r3, [pc, #420]	; (1498 <sampleTick+0x36c>)
    12f2:	00d2      	lsls	r2, r2, #3
    12f4:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    12f6:	9b03      	ldr	r3, [sp, #12]
    12f8:	112d      	asrs	r5, r5, #4
    12fa:	2000      	movs	r0, #0
    12fc:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    12fe:	2200      	movs	r2, #0
    1300:	5eb3      	ldrsh	r3, [r6, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    1302:	0022      	movs	r2, r4
    1304:	3266      	adds	r2, #102	; 0x66
    1306:	9203      	str	r2, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1308:	1100      	asrs	r0, r0, #4
    130a:	3a08      	subs	r2, #8
    130c:	111b      	asrs	r3, r3, #4
    130e:	8010      	strh	r0, [r2, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1310:	8073      	strh	r3, [r6, #2]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1312:	9b03      	ldr	r3, [sp, #12]
    1314:	801d      	strh	r5, [r3, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1316:	4b55      	ldr	r3, [pc, #340]	; (146c <sampleTick+0x340>)
    1318:	4798      	blx	r3
    131a:	23fe      	movs	r3, #254	; 0xfe
    131c:	4d55      	ldr	r5, [pc, #340]	; (1474 <sampleTick+0x348>)
    131e:	2200      	movs	r2, #0
    1320:	059b      	lsls	r3, r3, #22
    1322:	47a8      	blx	r5
    1324:	4b55      	ldr	r3, [pc, #340]	; (147c <sampleTick+0x350>)
    1326:	4798      	blx	r3
    1328:	6420      	str	r0, [r4, #64]	; 0x40
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    132a:	2302      	movs	r3, #2
    132c:	5ef0      	ldrsh	r0, [r6, r3]
    132e:	4b4f      	ldr	r3, [pc, #316]	; (146c <sampleTick+0x340>)
    1330:	4798      	blx	r3
    1332:	23fe      	movs	r3, #254	; 0xfe
    1334:	2200      	movs	r2, #0
    1336:	059b      	lsls	r3, r3, #22
    1338:	47a8      	blx	r5
    133a:	4b50      	ldr	r3, [pc, #320]	; (147c <sampleTick+0x350>)
    133c:	4798      	blx	r3
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    133e:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1340:	64a0      	str	r0, [r4, #72]	; 0x48
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1342:	2000      	movs	r0, #0
    1344:	5e18      	ldrsh	r0, [r3, r0]
    1346:	4b49      	ldr	r3, [pc, #292]	; (146c <sampleTick+0x340>)
    1348:	4798      	blx	r3
    134a:	23fe      	movs	r3, #254	; 0xfe
    134c:	2200      	movs	r2, #0
    134e:	059b      	lsls	r3, r3, #22
    1350:	47a8      	blx	r5
    1352:	4b4a      	ldr	r3, [pc, #296]	; (147c <sampleTick+0x350>)
    1354:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1356:	2280      	movs	r2, #128	; 0x80
    1358:	4b49      	ldr	r3, [pc, #292]	; (1480 <sampleTick+0x354>)
    135a:	00d2      	lsls	r2, r2, #3
    135c:	64e0      	str	r0, [r4, #76]	; 0x4c


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    135e:	2182      	movs	r1, #130	; 0x82
    1360:	615a      	str	r2, [r3, #20]
    1362:	2000      	movs	r0, #0
    1364:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1366:	21ff      	movs	r1, #255	; 0xff
    1368:	2000      	movs	r0, #0
    136a:	47b8      	blx	r7
    136c:	0023      	movs	r3, r4
    136e:	3368      	adds	r3, #104	; 0x68
    1370:	8018      	strh	r0, [r3, #0]
    1372:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1374:	21ff      	movs	r1, #255	; 0xff
    1376:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1378:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    137a:	47b8      	blx	r7
    137c:	9b03      	ldr	r3, [sp, #12]
    137e:	0200      	lsls	r0, r0, #8
    1380:	4305      	orrs	r5, r0
    1382:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1384:	21ff      	movs	r1, #255	; 0xff
    1386:	2000      	movs	r0, #0
    1388:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    138a:	21ff      	movs	r1, #255	; 0xff
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    138c:	81b0      	strh	r0, [r6, #12]
    138e:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1390:	2000      	movs	r0, #0
    1392:	47b8      	blx	r7
    1394:	0200      	lsls	r0, r0, #8
    1396:	4305      	orrs	r5, r0
    1398:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    139a:	21ff      	movs	r1, #255	; 0xff
    139c:	2000      	movs	r0, #0
    139e:	47b8      	blx	r7
    13a0:	0023      	movs	r3, r4
    13a2:	3370      	adds	r3, #112	; 0x70
    13a4:	8018      	strh	r0, [r3, #0]
    13a6:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13a8:	21ff      	movs	r1, #255	; 0xff
    13aa:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13ac:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13ae:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	0200      	lsls	r0, r0, #8
    13b4:	9b04      	ldr	r3, [sp, #16]
    13b6:	4305      	orrs	r5, r0
    13b8:	b22d      	sxth	r5, r5
    13ba:	801d      	strh	r5, [r3, #0]
    13bc:	4b30      	ldr	r3, [pc, #192]	; (1480 <sampleTick+0x354>)
    13be:	00d2      	lsls	r2, r2, #3
    13c0:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    13c2:	9b03      	ldr	r3, [sp, #12]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    13c4:	0027      	movs	r7, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    13c6:	2000      	movs	r0, #0
    13c8:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    13ca:	220c      	movs	r2, #12
    13cc:	5eb3      	ldrsh	r3, [r6, r2]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    13ce:	0022      	movs	r2, r4
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    13d0:	376e      	adds	r7, #110	; 0x6e
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    13d2:	326a      	adds	r2, #106	; 0x6a
    13d4:	1100      	asrs	r0, r0, #4
    13d6:	111b      	asrs	r3, r3, #4
    13d8:	112d      	asrs	r5, r5, #4
    13da:	8010      	strh	r0, [r2, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    13dc:	803b      	strh	r3, [r7, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    13de:	8275      	strh	r5, [r6, #18]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    13e0:	4b22      	ldr	r3, [pc, #136]	; (146c <sampleTick+0x340>)
    13e2:	4798      	blx	r3
    13e4:	23fe      	movs	r3, #254	; 0xfe
    13e6:	4d23      	ldr	r5, [pc, #140]	; (1474 <sampleTick+0x348>)
    13e8:	2200      	movs	r2, #0
    13ea:	059b      	lsls	r3, r3, #22
    13ec:	47a8      	blx	r5
    13ee:	4b23      	ldr	r3, [pc, #140]	; (147c <sampleTick+0x350>)
    13f0:	4798      	blx	r3
    13f2:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    13f4:	2300      	movs	r3, #0
    13f6:	5ef8      	ldrsh	r0, [r7, r3]
    13f8:	4b1c      	ldr	r3, [pc, #112]	; (146c <sampleTick+0x340>)
    13fa:	4798      	blx	r3
    13fc:	23fe      	movs	r3, #254	; 0xfe
    13fe:	2200      	movs	r2, #0
    1400:	059b      	lsls	r3, r3, #22
    1402:	47a8      	blx	r5
    1404:	4b1d      	ldr	r3, [pc, #116]	; (147c <sampleTick+0x350>)
    1406:	4798      	blx	r3
    1408:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    140a:	2312      	movs	r3, #18
    140c:	5ef0      	ldrsh	r0, [r6, r3]
    140e:	4b17      	ldr	r3, [pc, #92]	; (146c <sampleTick+0x340>)
    1410:	4798      	blx	r3
    1412:	23fe      	movs	r3, #254	; 0xfe
    1414:	2200      	movs	r2, #0
    1416:	059b      	lsls	r3, r3, #22
    1418:	47a8      	blx	r5
    141a:	4b18      	ldr	r3, [pc, #96]	; (147c <sampleTick+0x350>)
    141c:	4798      	blx	r3
    141e:	65a0      	str	r0, [r4, #88]	; 0x58

    delay_us(800);
    1420:	20c8      	movs	r0, #200	; 0xc8
    1422:	4b19      	ldr	r3, [pc, #100]	; (1488 <sampleTick+0x35c>)
    1424:	0080      	lsls	r0, r0, #2
    1426:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1428:	4b18      	ldr	r3, [pc, #96]	; (148c <sampleTick+0x360>)
    142a:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    142c:	1d25      	adds	r5, r4, #4
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    142e:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1430:	4b1a      	ldr	r3, [pc, #104]	; (149c <sampleTick+0x370>)
    1432:	0028      	movs	r0, r5
    1434:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1436:	0028      	movs	r0, r5
    1438:	4b19      	ldr	r3, [pc, #100]	; (14a0 <sampleTick+0x374>)
    143a:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    143c:	4b19      	ldr	r3, [pc, #100]	; (14a4 <sampleTick+0x378>)
    143e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1440:	4798      	blx	r3
    1442:	4a19      	ldr	r2, [pc, #100]	; (14a8 <sampleTick+0x37c>)
    1444:	4b19      	ldr	r3, [pc, #100]	; (14ac <sampleTick+0x380>)
    1446:	4d0b      	ldr	r5, [pc, #44]	; (1474 <sampleTick+0x348>)
    1448:	47a8      	blx	r5
    144a:	4b0c      	ldr	r3, [pc, #48]	; (147c <sampleTick+0x350>)
    144c:	4798      	blx	r3
    144e:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1450:	b007      	add	sp, #28
    1452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1454:	00000e21 	.word	0x00000e21
    1458:	0000277c 	.word	0x0000277c
    145c:	00000ad5 	.word	0x00000ad5
    1460:	00000282 	.word	0x00000282
    1464:	00000286 	.word	0x00000286
    1468:	fffff0c4 	.word	0xfffff0c4
    146c:	00002145 	.word	0x00002145
    1470:	02de00d2 	.word	0x02de00d2
    1474:	00001c45 	.word	0x00001c45
    1478:	bf8f8a09 	.word	0xbf8f8a09
    147c:	000022dd 	.word	0x000022dd
    1480:	41004400 	.word	0x41004400
    1484:	00000b41 	.word	0x00000b41
    1488:	00000dad 	.word	0x00000dad
    148c:	000002b9 	.word	0x000002b9
    1490:	41004494 	.word	0x41004494
    1494:	000015b9 	.word	0x000015b9
    1498:	41004498 	.word	0x41004498
    149c:	00000361 	.word	0x00000361
    14a0:	0000044d 	.word	0x0000044d
    14a4:	000021c9 	.word	0x000021c9
    14a8:	e9f6a93f 	.word	0xe9f6a93f
    14ac:	3fa0cc78 	.word	0x3fa0cc78

000014b0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    14b0:	b570      	push	{r4, r5, r6, lr}
    14b2:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    14b4:	2301      	movs	r3, #1
    14b6:	1cae      	adds	r6, r5, #2
    14b8:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    14ba:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    14bc:	490b      	ldr	r1, [pc, #44]	; (14ec <sercomClockEnable+0x3c>)
    14be:	6a08      	ldr	r0, [r1, #32]
    14c0:	4303      	orrs	r3, r0
    14c2:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    14c4:	2c00      	cmp	r4, #0
    14c6:	d003      	beq.n	14d0 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    14c8:	2107      	movs	r1, #7
    14ca:	0020      	movs	r0, r4
    14cc:	4b08      	ldr	r3, [pc, #32]	; (14f0 <sercomClockEnable+0x40>)
    14ce:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    14d0:	23f0      	movs	r3, #240	; 0xf0
    14d2:	0224      	lsls	r4, r4, #8
    14d4:	011b      	lsls	r3, r3, #4
    14d6:	401c      	ands	r4, r3
    14d8:	2380      	movs	r3, #128	; 0x80
    14da:	01db      	lsls	r3, r3, #7
    14dc:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    14de:	233f      	movs	r3, #63	; 0x3f
    14e0:	3514      	adds	r5, #20
    14e2:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    14e4:	4b03      	ldr	r3, [pc, #12]	; (14f4 <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    14e6:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    14e8:	805d      	strh	r5, [r3, #2]
}
    14ea:	bd70      	pop	{r4, r5, r6, pc}
    14ec:	40000400 	.word	0x40000400
    14f0:	00000d5d 	.word	0x00000d5d
    14f4:	40000c00 	.word	0x40000c00

000014f8 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    14f8:	4b04      	ldr	r3, [pc, #16]	; (150c <sercomReset+0x14>)
    14fa:	0280      	lsls	r0, r0, #10
    14fc:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    14fe:	2301      	movs	r3, #1
    1500:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1502:	6802      	ldr	r2, [r0, #0]
    1504:	421a      	tst	r2, r3
    1506:	d1fc      	bne.n	1502 <sercomReset+0xa>
}
    1508:	4770      	bx	lr
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	42000800 	.word	0x42000800

00001510 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1512:	0004      	movs	r4, r0
    1514:	9300      	str	r3, [sp, #0]
    1516:	ab08      	add	r3, sp, #32
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	0016      	movs	r6, r2
    151c:	9301      	str	r3, [sp, #4]
    151e:	ab09      	add	r3, sp, #36	; 0x24
    1520:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1522:	4b12      	ldr	r3, [pc, #72]	; (156c <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1524:	000d      	movs	r5, r1
    sercomReset(id);
    1526:	4798      	blx	r3
    1528:	4b11      	ldr	r3, [pc, #68]	; (1570 <sercomSpiMasterInit+0x60>)
    152a:	02a4      	lsls	r4, r4, #10
    152c:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	029b      	lsls	r3, r3, #10
    1532:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1534:	23c0      	movs	r3, #192	; 0xc0
    1536:	052d      	lsls	r5, r5, #20
    1538:	039b      	lsls	r3, r3, #14
    153a:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    153c:	23c0      	movs	r3, #192	; 0xc0
    153e:	0436      	lsls	r6, r6, #16
    1540:	029b      	lsls	r3, r3, #10
    1542:	401e      	ands	r6, r3
    1544:	230e      	movs	r3, #14
    1546:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1548:	9b00      	ldr	r3, [sp, #0]
    154a:	4335      	orrs	r5, r6
    154c:	1e5a      	subs	r2, r3, #1
    154e:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1550:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1552:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1554:	1e51      	subs	r1, r2, #1
    1556:	418a      	sbcs	r2, r1
    1558:	431d      	orrs	r5, r3
    155a:	0712      	lsls	r2, r2, #28
    155c:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    155e:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    1560:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1562:	69e3      	ldr	r3, [r4, #28]
    1564:	075b      	lsls	r3, r3, #29
    1566:	d4fc      	bmi.n	1562 <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    1568:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000014f9 	.word	0x000014f9
    1570:	42000800 	.word	0x42000800

00001574 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1576:	0007      	movs	r7, r0
    1578:	001e      	movs	r6, r3
    sercomReset(id);
    157a:	4b0c      	ldr	r3, [pc, #48]	; (15ac <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    157c:	000d      	movs	r5, r1
    157e:	0014      	movs	r4, r2
    sercomReset(id);
    1580:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    1582:	4b0b      	ldr	r3, [pc, #44]	; (15b0 <sercomUartInit+0x3c>)
    1584:	02b8      	lsls	r0, r7, #10
    1586:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1588:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    158a:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    158c:	6003      	str	r3, [r0, #0]
        = SERCOM_USART_CTRLB_RXEN
    158e:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1590:	0392      	lsls	r2, r2, #14
    1592:	052d      	lsls	r5, r5, #20
    1594:	4015      	ands	r5, r2
    1596:	4a07      	ldr	r2, [pc, #28]	; (15b4 <sercomUartInit+0x40>)
        = SERCOM_USART_CTRLB_RXEN
    1598:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    159a:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    159c:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    159e:	401c      	ands	r4, r3
    sercom(id)->USART.BAUD.reg = baud;
    15a0:	b2b6      	uxth	r6, r6
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15a2:	4322      	orrs	r2, r4
    sercom(id)->USART.BAUD.reg = baud;
    15a4:	8186      	strh	r6, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    15a6:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    15a8:	6002      	str	r2, [r0, #0]
}
    15aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ac:	000014f9 	.word	0x000014f9
    15b0:	42000800 	.word	0x42000800
    15b4:	40000006 	.word	0x40000006

000015b8 <spiDataTransfer>:
    15b8:	4b04      	ldr	r3, [pc, #16]	; (15cc <spiDataTransfer+0x14>)
    15ba:	0280      	lsls	r0, r0, #10
    15bc:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    15be:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    15c0:	7e03      	ldrb	r3, [r0, #24]
    15c2:	075b      	lsls	r3, r3, #29
    15c4:	d5fc      	bpl.n	15c0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    15c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    15c8:	b2c0      	uxtb	r0, r0
}
    15ca:	4770      	bx	lr
    15cc:	42000800 	.word	0x42000800

000015d0 <__aeabi_lmul>:
    15d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15d2:	46ce      	mov	lr, r9
    15d4:	4647      	mov	r7, r8
    15d6:	0415      	lsls	r5, r2, #16
    15d8:	0c2d      	lsrs	r5, r5, #16
    15da:	002e      	movs	r6, r5
    15dc:	b580      	push	{r7, lr}
    15de:	0407      	lsls	r7, r0, #16
    15e0:	0c14      	lsrs	r4, r2, #16
    15e2:	0c3f      	lsrs	r7, r7, #16
    15e4:	4699      	mov	r9, r3
    15e6:	0c03      	lsrs	r3, r0, #16
    15e8:	437e      	muls	r6, r7
    15ea:	435d      	muls	r5, r3
    15ec:	4367      	muls	r7, r4
    15ee:	4363      	muls	r3, r4
    15f0:	197f      	adds	r7, r7, r5
    15f2:	0c34      	lsrs	r4, r6, #16
    15f4:	19e4      	adds	r4, r4, r7
    15f6:	469c      	mov	ip, r3
    15f8:	42a5      	cmp	r5, r4
    15fa:	d903      	bls.n	1604 <__aeabi_lmul+0x34>
    15fc:	2380      	movs	r3, #128	; 0x80
    15fe:	025b      	lsls	r3, r3, #9
    1600:	4698      	mov	r8, r3
    1602:	44c4      	add	ip, r8
    1604:	464b      	mov	r3, r9
    1606:	4351      	muls	r1, r2
    1608:	4343      	muls	r3, r0
    160a:	0436      	lsls	r6, r6, #16
    160c:	0c36      	lsrs	r6, r6, #16
    160e:	0c25      	lsrs	r5, r4, #16
    1610:	0424      	lsls	r4, r4, #16
    1612:	4465      	add	r5, ip
    1614:	19a4      	adds	r4, r4, r6
    1616:	1859      	adds	r1, r3, r1
    1618:	1949      	adds	r1, r1, r5
    161a:	0020      	movs	r0, r4
    161c:	bc0c      	pop	{r2, r3}
    161e:	4690      	mov	r8, r2
    1620:	4699      	mov	r9, r3
    1622:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001624 <__aeabi_dadd>:
    1624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1626:	4645      	mov	r5, r8
    1628:	46de      	mov	lr, fp
    162a:	4657      	mov	r7, sl
    162c:	464e      	mov	r6, r9
    162e:	030c      	lsls	r4, r1, #12
    1630:	b5e0      	push	{r5, r6, r7, lr}
    1632:	004e      	lsls	r6, r1, #1
    1634:	0fc9      	lsrs	r1, r1, #31
    1636:	4688      	mov	r8, r1
    1638:	000d      	movs	r5, r1
    163a:	0a61      	lsrs	r1, r4, #9
    163c:	0f44      	lsrs	r4, r0, #29
    163e:	430c      	orrs	r4, r1
    1640:	00c7      	lsls	r7, r0, #3
    1642:	0319      	lsls	r1, r3, #12
    1644:	0058      	lsls	r0, r3, #1
    1646:	0fdb      	lsrs	r3, r3, #31
    1648:	469b      	mov	fp, r3
    164a:	0a4b      	lsrs	r3, r1, #9
    164c:	0f51      	lsrs	r1, r2, #29
    164e:	430b      	orrs	r3, r1
    1650:	0d76      	lsrs	r6, r6, #21
    1652:	0d40      	lsrs	r0, r0, #21
    1654:	0019      	movs	r1, r3
    1656:	00d2      	lsls	r2, r2, #3
    1658:	45d8      	cmp	r8, fp
    165a:	d100      	bne.n	165e <__aeabi_dadd+0x3a>
    165c:	e0ae      	b.n	17bc <__aeabi_dadd+0x198>
    165e:	1a35      	subs	r5, r6, r0
    1660:	2d00      	cmp	r5, #0
    1662:	dc00      	bgt.n	1666 <__aeabi_dadd+0x42>
    1664:	e0f6      	b.n	1854 <__aeabi_dadd+0x230>
    1666:	2800      	cmp	r0, #0
    1668:	d10f      	bne.n	168a <__aeabi_dadd+0x66>
    166a:	4313      	orrs	r3, r2
    166c:	d100      	bne.n	1670 <__aeabi_dadd+0x4c>
    166e:	e0db      	b.n	1828 <__aeabi_dadd+0x204>
    1670:	1e6b      	subs	r3, r5, #1
    1672:	2b00      	cmp	r3, #0
    1674:	d000      	beq.n	1678 <__aeabi_dadd+0x54>
    1676:	e137      	b.n	18e8 <__aeabi_dadd+0x2c4>
    1678:	1aba      	subs	r2, r7, r2
    167a:	4297      	cmp	r7, r2
    167c:	41bf      	sbcs	r7, r7
    167e:	1a64      	subs	r4, r4, r1
    1680:	427f      	negs	r7, r7
    1682:	1be4      	subs	r4, r4, r7
    1684:	2601      	movs	r6, #1
    1686:	0017      	movs	r7, r2
    1688:	e024      	b.n	16d4 <__aeabi_dadd+0xb0>
    168a:	4bc6      	ldr	r3, [pc, #792]	; (19a4 <__aeabi_dadd+0x380>)
    168c:	429e      	cmp	r6, r3
    168e:	d04d      	beq.n	172c <__aeabi_dadd+0x108>
    1690:	2380      	movs	r3, #128	; 0x80
    1692:	041b      	lsls	r3, r3, #16
    1694:	4319      	orrs	r1, r3
    1696:	2d38      	cmp	r5, #56	; 0x38
    1698:	dd00      	ble.n	169c <__aeabi_dadd+0x78>
    169a:	e107      	b.n	18ac <__aeabi_dadd+0x288>
    169c:	2d1f      	cmp	r5, #31
    169e:	dd00      	ble.n	16a2 <__aeabi_dadd+0x7e>
    16a0:	e138      	b.n	1914 <__aeabi_dadd+0x2f0>
    16a2:	2020      	movs	r0, #32
    16a4:	1b43      	subs	r3, r0, r5
    16a6:	469a      	mov	sl, r3
    16a8:	000b      	movs	r3, r1
    16aa:	4650      	mov	r0, sl
    16ac:	4083      	lsls	r3, r0
    16ae:	4699      	mov	r9, r3
    16b0:	0013      	movs	r3, r2
    16b2:	4648      	mov	r0, r9
    16b4:	40eb      	lsrs	r3, r5
    16b6:	4318      	orrs	r0, r3
    16b8:	0003      	movs	r3, r0
    16ba:	4650      	mov	r0, sl
    16bc:	4082      	lsls	r2, r0
    16be:	1e50      	subs	r0, r2, #1
    16c0:	4182      	sbcs	r2, r0
    16c2:	40e9      	lsrs	r1, r5
    16c4:	431a      	orrs	r2, r3
    16c6:	1aba      	subs	r2, r7, r2
    16c8:	1a61      	subs	r1, r4, r1
    16ca:	4297      	cmp	r7, r2
    16cc:	41a4      	sbcs	r4, r4
    16ce:	0017      	movs	r7, r2
    16d0:	4264      	negs	r4, r4
    16d2:	1b0c      	subs	r4, r1, r4
    16d4:	0223      	lsls	r3, r4, #8
    16d6:	d562      	bpl.n	179e <__aeabi_dadd+0x17a>
    16d8:	0264      	lsls	r4, r4, #9
    16da:	0a65      	lsrs	r5, r4, #9
    16dc:	2d00      	cmp	r5, #0
    16de:	d100      	bne.n	16e2 <__aeabi_dadd+0xbe>
    16e0:	e0df      	b.n	18a2 <__aeabi_dadd+0x27e>
    16e2:	0028      	movs	r0, r5
    16e4:	f000 fe84 	bl	23f0 <__clzsi2>
    16e8:	0003      	movs	r3, r0
    16ea:	3b08      	subs	r3, #8
    16ec:	2b1f      	cmp	r3, #31
    16ee:	dd00      	ble.n	16f2 <__aeabi_dadd+0xce>
    16f0:	e0d2      	b.n	1898 <__aeabi_dadd+0x274>
    16f2:	2220      	movs	r2, #32
    16f4:	003c      	movs	r4, r7
    16f6:	1ad2      	subs	r2, r2, r3
    16f8:	409d      	lsls	r5, r3
    16fa:	40d4      	lsrs	r4, r2
    16fc:	409f      	lsls	r7, r3
    16fe:	4325      	orrs	r5, r4
    1700:	429e      	cmp	r6, r3
    1702:	dd00      	ble.n	1706 <__aeabi_dadd+0xe2>
    1704:	e0c4      	b.n	1890 <__aeabi_dadd+0x26c>
    1706:	1b9e      	subs	r6, r3, r6
    1708:	1c73      	adds	r3, r6, #1
    170a:	2b1f      	cmp	r3, #31
    170c:	dd00      	ble.n	1710 <__aeabi_dadd+0xec>
    170e:	e0f1      	b.n	18f4 <__aeabi_dadd+0x2d0>
    1710:	2220      	movs	r2, #32
    1712:	0038      	movs	r0, r7
    1714:	0029      	movs	r1, r5
    1716:	1ad2      	subs	r2, r2, r3
    1718:	40d8      	lsrs	r0, r3
    171a:	4091      	lsls	r1, r2
    171c:	4097      	lsls	r7, r2
    171e:	002c      	movs	r4, r5
    1720:	4301      	orrs	r1, r0
    1722:	1e78      	subs	r0, r7, #1
    1724:	4187      	sbcs	r7, r0
    1726:	40dc      	lsrs	r4, r3
    1728:	2600      	movs	r6, #0
    172a:	430f      	orrs	r7, r1
    172c:	077b      	lsls	r3, r7, #29
    172e:	d009      	beq.n	1744 <__aeabi_dadd+0x120>
    1730:	230f      	movs	r3, #15
    1732:	403b      	ands	r3, r7
    1734:	2b04      	cmp	r3, #4
    1736:	d005      	beq.n	1744 <__aeabi_dadd+0x120>
    1738:	1d3b      	adds	r3, r7, #4
    173a:	42bb      	cmp	r3, r7
    173c:	41bf      	sbcs	r7, r7
    173e:	427f      	negs	r7, r7
    1740:	19e4      	adds	r4, r4, r7
    1742:	001f      	movs	r7, r3
    1744:	0223      	lsls	r3, r4, #8
    1746:	d52c      	bpl.n	17a2 <__aeabi_dadd+0x17e>
    1748:	4b96      	ldr	r3, [pc, #600]	; (19a4 <__aeabi_dadd+0x380>)
    174a:	3601      	adds	r6, #1
    174c:	429e      	cmp	r6, r3
    174e:	d100      	bne.n	1752 <__aeabi_dadd+0x12e>
    1750:	e09a      	b.n	1888 <__aeabi_dadd+0x264>
    1752:	4645      	mov	r5, r8
    1754:	4b94      	ldr	r3, [pc, #592]	; (19a8 <__aeabi_dadd+0x384>)
    1756:	08ff      	lsrs	r7, r7, #3
    1758:	401c      	ands	r4, r3
    175a:	0760      	lsls	r0, r4, #29
    175c:	0576      	lsls	r6, r6, #21
    175e:	0264      	lsls	r4, r4, #9
    1760:	4307      	orrs	r7, r0
    1762:	0b24      	lsrs	r4, r4, #12
    1764:	0d76      	lsrs	r6, r6, #21
    1766:	2100      	movs	r1, #0
    1768:	0324      	lsls	r4, r4, #12
    176a:	0b23      	lsrs	r3, r4, #12
    176c:	0d0c      	lsrs	r4, r1, #20
    176e:	4a8f      	ldr	r2, [pc, #572]	; (19ac <__aeabi_dadd+0x388>)
    1770:	0524      	lsls	r4, r4, #20
    1772:	431c      	orrs	r4, r3
    1774:	4014      	ands	r4, r2
    1776:	0533      	lsls	r3, r6, #20
    1778:	4323      	orrs	r3, r4
    177a:	005b      	lsls	r3, r3, #1
    177c:	07ed      	lsls	r5, r5, #31
    177e:	085b      	lsrs	r3, r3, #1
    1780:	432b      	orrs	r3, r5
    1782:	0038      	movs	r0, r7
    1784:	0019      	movs	r1, r3
    1786:	bc3c      	pop	{r2, r3, r4, r5}
    1788:	4690      	mov	r8, r2
    178a:	4699      	mov	r9, r3
    178c:	46a2      	mov	sl, r4
    178e:	46ab      	mov	fp, r5
    1790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1792:	4664      	mov	r4, ip
    1794:	4304      	orrs	r4, r0
    1796:	d100      	bne.n	179a <__aeabi_dadd+0x176>
    1798:	e211      	b.n	1bbe <__aeabi_dadd+0x59a>
    179a:	0004      	movs	r4, r0
    179c:	4667      	mov	r7, ip
    179e:	077b      	lsls	r3, r7, #29
    17a0:	d1c6      	bne.n	1730 <__aeabi_dadd+0x10c>
    17a2:	4645      	mov	r5, r8
    17a4:	0760      	lsls	r0, r4, #29
    17a6:	08ff      	lsrs	r7, r7, #3
    17a8:	4307      	orrs	r7, r0
    17aa:	08e4      	lsrs	r4, r4, #3
    17ac:	4b7d      	ldr	r3, [pc, #500]	; (19a4 <__aeabi_dadd+0x380>)
    17ae:	429e      	cmp	r6, r3
    17b0:	d030      	beq.n	1814 <__aeabi_dadd+0x1f0>
    17b2:	0324      	lsls	r4, r4, #12
    17b4:	0576      	lsls	r6, r6, #21
    17b6:	0b24      	lsrs	r4, r4, #12
    17b8:	0d76      	lsrs	r6, r6, #21
    17ba:	e7d4      	b.n	1766 <__aeabi_dadd+0x142>
    17bc:	1a33      	subs	r3, r6, r0
    17be:	469a      	mov	sl, r3
    17c0:	2b00      	cmp	r3, #0
    17c2:	dd78      	ble.n	18b6 <__aeabi_dadd+0x292>
    17c4:	2800      	cmp	r0, #0
    17c6:	d031      	beq.n	182c <__aeabi_dadd+0x208>
    17c8:	4876      	ldr	r0, [pc, #472]	; (19a4 <__aeabi_dadd+0x380>)
    17ca:	4286      	cmp	r6, r0
    17cc:	d0ae      	beq.n	172c <__aeabi_dadd+0x108>
    17ce:	2080      	movs	r0, #128	; 0x80
    17d0:	0400      	lsls	r0, r0, #16
    17d2:	4301      	orrs	r1, r0
    17d4:	4653      	mov	r3, sl
    17d6:	2b38      	cmp	r3, #56	; 0x38
    17d8:	dc00      	bgt.n	17dc <__aeabi_dadd+0x1b8>
    17da:	e0e9      	b.n	19b0 <__aeabi_dadd+0x38c>
    17dc:	430a      	orrs	r2, r1
    17de:	1e51      	subs	r1, r2, #1
    17e0:	418a      	sbcs	r2, r1
    17e2:	2100      	movs	r1, #0
    17e4:	19d2      	adds	r2, r2, r7
    17e6:	42ba      	cmp	r2, r7
    17e8:	41bf      	sbcs	r7, r7
    17ea:	1909      	adds	r1, r1, r4
    17ec:	427c      	negs	r4, r7
    17ee:	0017      	movs	r7, r2
    17f0:	190c      	adds	r4, r1, r4
    17f2:	0223      	lsls	r3, r4, #8
    17f4:	d5d3      	bpl.n	179e <__aeabi_dadd+0x17a>
    17f6:	4b6b      	ldr	r3, [pc, #428]	; (19a4 <__aeabi_dadd+0x380>)
    17f8:	3601      	adds	r6, #1
    17fa:	429e      	cmp	r6, r3
    17fc:	d100      	bne.n	1800 <__aeabi_dadd+0x1dc>
    17fe:	e13a      	b.n	1a76 <__aeabi_dadd+0x452>
    1800:	2001      	movs	r0, #1
    1802:	4b69      	ldr	r3, [pc, #420]	; (19a8 <__aeabi_dadd+0x384>)
    1804:	401c      	ands	r4, r3
    1806:	087b      	lsrs	r3, r7, #1
    1808:	4007      	ands	r7, r0
    180a:	431f      	orrs	r7, r3
    180c:	07e0      	lsls	r0, r4, #31
    180e:	4307      	orrs	r7, r0
    1810:	0864      	lsrs	r4, r4, #1
    1812:	e78b      	b.n	172c <__aeabi_dadd+0x108>
    1814:	0023      	movs	r3, r4
    1816:	433b      	orrs	r3, r7
    1818:	d100      	bne.n	181c <__aeabi_dadd+0x1f8>
    181a:	e1cb      	b.n	1bb4 <__aeabi_dadd+0x590>
    181c:	2280      	movs	r2, #128	; 0x80
    181e:	0312      	lsls	r2, r2, #12
    1820:	4314      	orrs	r4, r2
    1822:	0324      	lsls	r4, r4, #12
    1824:	0b24      	lsrs	r4, r4, #12
    1826:	e79e      	b.n	1766 <__aeabi_dadd+0x142>
    1828:	002e      	movs	r6, r5
    182a:	e77f      	b.n	172c <__aeabi_dadd+0x108>
    182c:	0008      	movs	r0, r1
    182e:	4310      	orrs	r0, r2
    1830:	d100      	bne.n	1834 <__aeabi_dadd+0x210>
    1832:	e0b4      	b.n	199e <__aeabi_dadd+0x37a>
    1834:	1e58      	subs	r0, r3, #1
    1836:	2800      	cmp	r0, #0
    1838:	d000      	beq.n	183c <__aeabi_dadd+0x218>
    183a:	e0de      	b.n	19fa <__aeabi_dadd+0x3d6>
    183c:	18ba      	adds	r2, r7, r2
    183e:	42ba      	cmp	r2, r7
    1840:	419b      	sbcs	r3, r3
    1842:	1864      	adds	r4, r4, r1
    1844:	425b      	negs	r3, r3
    1846:	18e4      	adds	r4, r4, r3
    1848:	0017      	movs	r7, r2
    184a:	2601      	movs	r6, #1
    184c:	0223      	lsls	r3, r4, #8
    184e:	d5a6      	bpl.n	179e <__aeabi_dadd+0x17a>
    1850:	2602      	movs	r6, #2
    1852:	e7d5      	b.n	1800 <__aeabi_dadd+0x1dc>
    1854:	2d00      	cmp	r5, #0
    1856:	d16e      	bne.n	1936 <__aeabi_dadd+0x312>
    1858:	1c70      	adds	r0, r6, #1
    185a:	0540      	lsls	r0, r0, #21
    185c:	0d40      	lsrs	r0, r0, #21
    185e:	2801      	cmp	r0, #1
    1860:	dc00      	bgt.n	1864 <__aeabi_dadd+0x240>
    1862:	e0f9      	b.n	1a58 <__aeabi_dadd+0x434>
    1864:	1ab8      	subs	r0, r7, r2
    1866:	4684      	mov	ip, r0
    1868:	4287      	cmp	r7, r0
    186a:	4180      	sbcs	r0, r0
    186c:	1ae5      	subs	r5, r4, r3
    186e:	4240      	negs	r0, r0
    1870:	1a2d      	subs	r5, r5, r0
    1872:	0228      	lsls	r0, r5, #8
    1874:	d400      	bmi.n	1878 <__aeabi_dadd+0x254>
    1876:	e089      	b.n	198c <__aeabi_dadd+0x368>
    1878:	1bd7      	subs	r7, r2, r7
    187a:	42ba      	cmp	r2, r7
    187c:	4192      	sbcs	r2, r2
    187e:	1b1c      	subs	r4, r3, r4
    1880:	4252      	negs	r2, r2
    1882:	1aa5      	subs	r5, r4, r2
    1884:	46d8      	mov	r8, fp
    1886:	e729      	b.n	16dc <__aeabi_dadd+0xb8>
    1888:	4645      	mov	r5, r8
    188a:	2400      	movs	r4, #0
    188c:	2700      	movs	r7, #0
    188e:	e76a      	b.n	1766 <__aeabi_dadd+0x142>
    1890:	4c45      	ldr	r4, [pc, #276]	; (19a8 <__aeabi_dadd+0x384>)
    1892:	1af6      	subs	r6, r6, r3
    1894:	402c      	ands	r4, r5
    1896:	e749      	b.n	172c <__aeabi_dadd+0x108>
    1898:	003d      	movs	r5, r7
    189a:	3828      	subs	r0, #40	; 0x28
    189c:	4085      	lsls	r5, r0
    189e:	2700      	movs	r7, #0
    18a0:	e72e      	b.n	1700 <__aeabi_dadd+0xdc>
    18a2:	0038      	movs	r0, r7
    18a4:	f000 fda4 	bl	23f0 <__clzsi2>
    18a8:	3020      	adds	r0, #32
    18aa:	e71d      	b.n	16e8 <__aeabi_dadd+0xc4>
    18ac:	430a      	orrs	r2, r1
    18ae:	1e51      	subs	r1, r2, #1
    18b0:	418a      	sbcs	r2, r1
    18b2:	2100      	movs	r1, #0
    18b4:	e707      	b.n	16c6 <__aeabi_dadd+0xa2>
    18b6:	2b00      	cmp	r3, #0
    18b8:	d000      	beq.n	18bc <__aeabi_dadd+0x298>
    18ba:	e0f3      	b.n	1aa4 <__aeabi_dadd+0x480>
    18bc:	1c70      	adds	r0, r6, #1
    18be:	0543      	lsls	r3, r0, #21
    18c0:	0d5b      	lsrs	r3, r3, #21
    18c2:	2b01      	cmp	r3, #1
    18c4:	dc00      	bgt.n	18c8 <__aeabi_dadd+0x2a4>
    18c6:	e0ad      	b.n	1a24 <__aeabi_dadd+0x400>
    18c8:	4b36      	ldr	r3, [pc, #216]	; (19a4 <__aeabi_dadd+0x380>)
    18ca:	4298      	cmp	r0, r3
    18cc:	d100      	bne.n	18d0 <__aeabi_dadd+0x2ac>
    18ce:	e0d1      	b.n	1a74 <__aeabi_dadd+0x450>
    18d0:	18ba      	adds	r2, r7, r2
    18d2:	42ba      	cmp	r2, r7
    18d4:	41bf      	sbcs	r7, r7
    18d6:	1864      	adds	r4, r4, r1
    18d8:	427f      	negs	r7, r7
    18da:	19e4      	adds	r4, r4, r7
    18dc:	07e7      	lsls	r7, r4, #31
    18de:	0852      	lsrs	r2, r2, #1
    18e0:	4317      	orrs	r7, r2
    18e2:	0864      	lsrs	r4, r4, #1
    18e4:	0006      	movs	r6, r0
    18e6:	e721      	b.n	172c <__aeabi_dadd+0x108>
    18e8:	482e      	ldr	r0, [pc, #184]	; (19a4 <__aeabi_dadd+0x380>)
    18ea:	4285      	cmp	r5, r0
    18ec:	d100      	bne.n	18f0 <__aeabi_dadd+0x2cc>
    18ee:	e093      	b.n	1a18 <__aeabi_dadd+0x3f4>
    18f0:	001d      	movs	r5, r3
    18f2:	e6d0      	b.n	1696 <__aeabi_dadd+0x72>
    18f4:	0029      	movs	r1, r5
    18f6:	3e1f      	subs	r6, #31
    18f8:	40f1      	lsrs	r1, r6
    18fa:	2b20      	cmp	r3, #32
    18fc:	d100      	bne.n	1900 <__aeabi_dadd+0x2dc>
    18fe:	e08d      	b.n	1a1c <__aeabi_dadd+0x3f8>
    1900:	2240      	movs	r2, #64	; 0x40
    1902:	1ad3      	subs	r3, r2, r3
    1904:	409d      	lsls	r5, r3
    1906:	432f      	orrs	r7, r5
    1908:	1e7d      	subs	r5, r7, #1
    190a:	41af      	sbcs	r7, r5
    190c:	2400      	movs	r4, #0
    190e:	430f      	orrs	r7, r1
    1910:	2600      	movs	r6, #0
    1912:	e744      	b.n	179e <__aeabi_dadd+0x17a>
    1914:	002b      	movs	r3, r5
    1916:	0008      	movs	r0, r1
    1918:	3b20      	subs	r3, #32
    191a:	40d8      	lsrs	r0, r3
    191c:	0003      	movs	r3, r0
    191e:	2d20      	cmp	r5, #32
    1920:	d100      	bne.n	1924 <__aeabi_dadd+0x300>
    1922:	e07d      	b.n	1a20 <__aeabi_dadd+0x3fc>
    1924:	2040      	movs	r0, #64	; 0x40
    1926:	1b45      	subs	r5, r0, r5
    1928:	40a9      	lsls	r1, r5
    192a:	430a      	orrs	r2, r1
    192c:	1e51      	subs	r1, r2, #1
    192e:	418a      	sbcs	r2, r1
    1930:	2100      	movs	r1, #0
    1932:	431a      	orrs	r2, r3
    1934:	e6c7      	b.n	16c6 <__aeabi_dadd+0xa2>
    1936:	2e00      	cmp	r6, #0
    1938:	d050      	beq.n	19dc <__aeabi_dadd+0x3b8>
    193a:	4e1a      	ldr	r6, [pc, #104]	; (19a4 <__aeabi_dadd+0x380>)
    193c:	42b0      	cmp	r0, r6
    193e:	d057      	beq.n	19f0 <__aeabi_dadd+0x3cc>
    1940:	2680      	movs	r6, #128	; 0x80
    1942:	426b      	negs	r3, r5
    1944:	4699      	mov	r9, r3
    1946:	0436      	lsls	r6, r6, #16
    1948:	4334      	orrs	r4, r6
    194a:	464b      	mov	r3, r9
    194c:	2b38      	cmp	r3, #56	; 0x38
    194e:	dd00      	ble.n	1952 <__aeabi_dadd+0x32e>
    1950:	e0d6      	b.n	1b00 <__aeabi_dadd+0x4dc>
    1952:	2b1f      	cmp	r3, #31
    1954:	dd00      	ble.n	1958 <__aeabi_dadd+0x334>
    1956:	e135      	b.n	1bc4 <__aeabi_dadd+0x5a0>
    1958:	2620      	movs	r6, #32
    195a:	1af5      	subs	r5, r6, r3
    195c:	0026      	movs	r6, r4
    195e:	40ae      	lsls	r6, r5
    1960:	46b2      	mov	sl, r6
    1962:	003e      	movs	r6, r7
    1964:	40de      	lsrs	r6, r3
    1966:	46ac      	mov	ip, r5
    1968:	0035      	movs	r5, r6
    196a:	4656      	mov	r6, sl
    196c:	432e      	orrs	r6, r5
    196e:	4665      	mov	r5, ip
    1970:	40af      	lsls	r7, r5
    1972:	1e7d      	subs	r5, r7, #1
    1974:	41af      	sbcs	r7, r5
    1976:	40dc      	lsrs	r4, r3
    1978:	4337      	orrs	r7, r6
    197a:	1bd7      	subs	r7, r2, r7
    197c:	42ba      	cmp	r2, r7
    197e:	4192      	sbcs	r2, r2
    1980:	1b0c      	subs	r4, r1, r4
    1982:	4252      	negs	r2, r2
    1984:	1aa4      	subs	r4, r4, r2
    1986:	0006      	movs	r6, r0
    1988:	46d8      	mov	r8, fp
    198a:	e6a3      	b.n	16d4 <__aeabi_dadd+0xb0>
    198c:	4664      	mov	r4, ip
    198e:	4667      	mov	r7, ip
    1990:	432c      	orrs	r4, r5
    1992:	d000      	beq.n	1996 <__aeabi_dadd+0x372>
    1994:	e6a2      	b.n	16dc <__aeabi_dadd+0xb8>
    1996:	2500      	movs	r5, #0
    1998:	2600      	movs	r6, #0
    199a:	2700      	movs	r7, #0
    199c:	e706      	b.n	17ac <__aeabi_dadd+0x188>
    199e:	001e      	movs	r6, r3
    19a0:	e6c4      	b.n	172c <__aeabi_dadd+0x108>
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	000007ff 	.word	0x000007ff
    19a8:	ff7fffff 	.word	0xff7fffff
    19ac:	800fffff 	.word	0x800fffff
    19b0:	2b1f      	cmp	r3, #31
    19b2:	dc63      	bgt.n	1a7c <__aeabi_dadd+0x458>
    19b4:	2020      	movs	r0, #32
    19b6:	1ac3      	subs	r3, r0, r3
    19b8:	0008      	movs	r0, r1
    19ba:	4098      	lsls	r0, r3
    19bc:	469c      	mov	ip, r3
    19be:	4683      	mov	fp, r0
    19c0:	4653      	mov	r3, sl
    19c2:	0010      	movs	r0, r2
    19c4:	40d8      	lsrs	r0, r3
    19c6:	0003      	movs	r3, r0
    19c8:	4658      	mov	r0, fp
    19ca:	4318      	orrs	r0, r3
    19cc:	4663      	mov	r3, ip
    19ce:	409a      	lsls	r2, r3
    19d0:	1e53      	subs	r3, r2, #1
    19d2:	419a      	sbcs	r2, r3
    19d4:	4653      	mov	r3, sl
    19d6:	4302      	orrs	r2, r0
    19d8:	40d9      	lsrs	r1, r3
    19da:	e703      	b.n	17e4 <__aeabi_dadd+0x1c0>
    19dc:	0026      	movs	r6, r4
    19de:	433e      	orrs	r6, r7
    19e0:	d006      	beq.n	19f0 <__aeabi_dadd+0x3cc>
    19e2:	43eb      	mvns	r3, r5
    19e4:	4699      	mov	r9, r3
    19e6:	2b00      	cmp	r3, #0
    19e8:	d0c7      	beq.n	197a <__aeabi_dadd+0x356>
    19ea:	4e94      	ldr	r6, [pc, #592]	; (1c3c <__aeabi_dadd+0x618>)
    19ec:	42b0      	cmp	r0, r6
    19ee:	d1ac      	bne.n	194a <__aeabi_dadd+0x326>
    19f0:	000c      	movs	r4, r1
    19f2:	0017      	movs	r7, r2
    19f4:	0006      	movs	r6, r0
    19f6:	46d8      	mov	r8, fp
    19f8:	e698      	b.n	172c <__aeabi_dadd+0x108>
    19fa:	4b90      	ldr	r3, [pc, #576]	; (1c3c <__aeabi_dadd+0x618>)
    19fc:	459a      	cmp	sl, r3
    19fe:	d00b      	beq.n	1a18 <__aeabi_dadd+0x3f4>
    1a00:	4682      	mov	sl, r0
    1a02:	e6e7      	b.n	17d4 <__aeabi_dadd+0x1b0>
    1a04:	2800      	cmp	r0, #0
    1a06:	d000      	beq.n	1a0a <__aeabi_dadd+0x3e6>
    1a08:	e09e      	b.n	1b48 <__aeabi_dadd+0x524>
    1a0a:	0018      	movs	r0, r3
    1a0c:	4310      	orrs	r0, r2
    1a0e:	d100      	bne.n	1a12 <__aeabi_dadd+0x3ee>
    1a10:	e0e9      	b.n	1be6 <__aeabi_dadd+0x5c2>
    1a12:	001c      	movs	r4, r3
    1a14:	0017      	movs	r7, r2
    1a16:	46d8      	mov	r8, fp
    1a18:	4e88      	ldr	r6, [pc, #544]	; (1c3c <__aeabi_dadd+0x618>)
    1a1a:	e687      	b.n	172c <__aeabi_dadd+0x108>
    1a1c:	2500      	movs	r5, #0
    1a1e:	e772      	b.n	1906 <__aeabi_dadd+0x2e2>
    1a20:	2100      	movs	r1, #0
    1a22:	e782      	b.n	192a <__aeabi_dadd+0x306>
    1a24:	0023      	movs	r3, r4
    1a26:	433b      	orrs	r3, r7
    1a28:	2e00      	cmp	r6, #0
    1a2a:	d000      	beq.n	1a2e <__aeabi_dadd+0x40a>
    1a2c:	e0ab      	b.n	1b86 <__aeabi_dadd+0x562>
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d100      	bne.n	1a34 <__aeabi_dadd+0x410>
    1a32:	e0e7      	b.n	1c04 <__aeabi_dadd+0x5e0>
    1a34:	000b      	movs	r3, r1
    1a36:	4313      	orrs	r3, r2
    1a38:	d100      	bne.n	1a3c <__aeabi_dadd+0x418>
    1a3a:	e677      	b.n	172c <__aeabi_dadd+0x108>
    1a3c:	18ba      	adds	r2, r7, r2
    1a3e:	42ba      	cmp	r2, r7
    1a40:	41bf      	sbcs	r7, r7
    1a42:	1864      	adds	r4, r4, r1
    1a44:	427f      	negs	r7, r7
    1a46:	19e4      	adds	r4, r4, r7
    1a48:	0223      	lsls	r3, r4, #8
    1a4a:	d400      	bmi.n	1a4e <__aeabi_dadd+0x42a>
    1a4c:	e0f2      	b.n	1c34 <__aeabi_dadd+0x610>
    1a4e:	4b7c      	ldr	r3, [pc, #496]	; (1c40 <__aeabi_dadd+0x61c>)
    1a50:	0017      	movs	r7, r2
    1a52:	401c      	ands	r4, r3
    1a54:	0006      	movs	r6, r0
    1a56:	e669      	b.n	172c <__aeabi_dadd+0x108>
    1a58:	0020      	movs	r0, r4
    1a5a:	4338      	orrs	r0, r7
    1a5c:	2e00      	cmp	r6, #0
    1a5e:	d1d1      	bne.n	1a04 <__aeabi_dadd+0x3e0>
    1a60:	2800      	cmp	r0, #0
    1a62:	d15b      	bne.n	1b1c <__aeabi_dadd+0x4f8>
    1a64:	001c      	movs	r4, r3
    1a66:	4314      	orrs	r4, r2
    1a68:	d100      	bne.n	1a6c <__aeabi_dadd+0x448>
    1a6a:	e0a8      	b.n	1bbe <__aeabi_dadd+0x59a>
    1a6c:	001c      	movs	r4, r3
    1a6e:	0017      	movs	r7, r2
    1a70:	46d8      	mov	r8, fp
    1a72:	e65b      	b.n	172c <__aeabi_dadd+0x108>
    1a74:	0006      	movs	r6, r0
    1a76:	2400      	movs	r4, #0
    1a78:	2700      	movs	r7, #0
    1a7a:	e697      	b.n	17ac <__aeabi_dadd+0x188>
    1a7c:	4650      	mov	r0, sl
    1a7e:	000b      	movs	r3, r1
    1a80:	3820      	subs	r0, #32
    1a82:	40c3      	lsrs	r3, r0
    1a84:	4699      	mov	r9, r3
    1a86:	4653      	mov	r3, sl
    1a88:	2b20      	cmp	r3, #32
    1a8a:	d100      	bne.n	1a8e <__aeabi_dadd+0x46a>
    1a8c:	e095      	b.n	1bba <__aeabi_dadd+0x596>
    1a8e:	2340      	movs	r3, #64	; 0x40
    1a90:	4650      	mov	r0, sl
    1a92:	1a1b      	subs	r3, r3, r0
    1a94:	4099      	lsls	r1, r3
    1a96:	430a      	orrs	r2, r1
    1a98:	1e51      	subs	r1, r2, #1
    1a9a:	418a      	sbcs	r2, r1
    1a9c:	464b      	mov	r3, r9
    1a9e:	2100      	movs	r1, #0
    1aa0:	431a      	orrs	r2, r3
    1aa2:	e69f      	b.n	17e4 <__aeabi_dadd+0x1c0>
    1aa4:	2e00      	cmp	r6, #0
    1aa6:	d130      	bne.n	1b0a <__aeabi_dadd+0x4e6>
    1aa8:	0026      	movs	r6, r4
    1aaa:	433e      	orrs	r6, r7
    1aac:	d067      	beq.n	1b7e <__aeabi_dadd+0x55a>
    1aae:	43db      	mvns	r3, r3
    1ab0:	469a      	mov	sl, r3
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d01c      	beq.n	1af0 <__aeabi_dadd+0x4cc>
    1ab6:	4e61      	ldr	r6, [pc, #388]	; (1c3c <__aeabi_dadd+0x618>)
    1ab8:	42b0      	cmp	r0, r6
    1aba:	d060      	beq.n	1b7e <__aeabi_dadd+0x55a>
    1abc:	4653      	mov	r3, sl
    1abe:	2b38      	cmp	r3, #56	; 0x38
    1ac0:	dd00      	ble.n	1ac4 <__aeabi_dadd+0x4a0>
    1ac2:	e096      	b.n	1bf2 <__aeabi_dadd+0x5ce>
    1ac4:	2b1f      	cmp	r3, #31
    1ac6:	dd00      	ble.n	1aca <__aeabi_dadd+0x4a6>
    1ac8:	e09f      	b.n	1c0a <__aeabi_dadd+0x5e6>
    1aca:	2620      	movs	r6, #32
    1acc:	1af3      	subs	r3, r6, r3
    1ace:	0026      	movs	r6, r4
    1ad0:	409e      	lsls	r6, r3
    1ad2:	469c      	mov	ip, r3
    1ad4:	46b3      	mov	fp, r6
    1ad6:	4653      	mov	r3, sl
    1ad8:	003e      	movs	r6, r7
    1ada:	40de      	lsrs	r6, r3
    1adc:	0033      	movs	r3, r6
    1ade:	465e      	mov	r6, fp
    1ae0:	431e      	orrs	r6, r3
    1ae2:	4663      	mov	r3, ip
    1ae4:	409f      	lsls	r7, r3
    1ae6:	1e7b      	subs	r3, r7, #1
    1ae8:	419f      	sbcs	r7, r3
    1aea:	4653      	mov	r3, sl
    1aec:	40dc      	lsrs	r4, r3
    1aee:	4337      	orrs	r7, r6
    1af0:	18bf      	adds	r7, r7, r2
    1af2:	4297      	cmp	r7, r2
    1af4:	4192      	sbcs	r2, r2
    1af6:	1864      	adds	r4, r4, r1
    1af8:	4252      	negs	r2, r2
    1afa:	18a4      	adds	r4, r4, r2
    1afc:	0006      	movs	r6, r0
    1afe:	e678      	b.n	17f2 <__aeabi_dadd+0x1ce>
    1b00:	4327      	orrs	r7, r4
    1b02:	1e7c      	subs	r4, r7, #1
    1b04:	41a7      	sbcs	r7, r4
    1b06:	2400      	movs	r4, #0
    1b08:	e737      	b.n	197a <__aeabi_dadd+0x356>
    1b0a:	4e4c      	ldr	r6, [pc, #304]	; (1c3c <__aeabi_dadd+0x618>)
    1b0c:	42b0      	cmp	r0, r6
    1b0e:	d036      	beq.n	1b7e <__aeabi_dadd+0x55a>
    1b10:	2680      	movs	r6, #128	; 0x80
    1b12:	425b      	negs	r3, r3
    1b14:	0436      	lsls	r6, r6, #16
    1b16:	469a      	mov	sl, r3
    1b18:	4334      	orrs	r4, r6
    1b1a:	e7cf      	b.n	1abc <__aeabi_dadd+0x498>
    1b1c:	0018      	movs	r0, r3
    1b1e:	4310      	orrs	r0, r2
    1b20:	d100      	bne.n	1b24 <__aeabi_dadd+0x500>
    1b22:	e603      	b.n	172c <__aeabi_dadd+0x108>
    1b24:	1ab8      	subs	r0, r7, r2
    1b26:	4684      	mov	ip, r0
    1b28:	4567      	cmp	r7, ip
    1b2a:	41ad      	sbcs	r5, r5
    1b2c:	1ae0      	subs	r0, r4, r3
    1b2e:	426d      	negs	r5, r5
    1b30:	1b40      	subs	r0, r0, r5
    1b32:	0205      	lsls	r5, r0, #8
    1b34:	d400      	bmi.n	1b38 <__aeabi_dadd+0x514>
    1b36:	e62c      	b.n	1792 <__aeabi_dadd+0x16e>
    1b38:	1bd7      	subs	r7, r2, r7
    1b3a:	42ba      	cmp	r2, r7
    1b3c:	4192      	sbcs	r2, r2
    1b3e:	1b1c      	subs	r4, r3, r4
    1b40:	4252      	negs	r2, r2
    1b42:	1aa4      	subs	r4, r4, r2
    1b44:	46d8      	mov	r8, fp
    1b46:	e5f1      	b.n	172c <__aeabi_dadd+0x108>
    1b48:	0018      	movs	r0, r3
    1b4a:	4310      	orrs	r0, r2
    1b4c:	d100      	bne.n	1b50 <__aeabi_dadd+0x52c>
    1b4e:	e763      	b.n	1a18 <__aeabi_dadd+0x3f4>
    1b50:	08f8      	lsrs	r0, r7, #3
    1b52:	0767      	lsls	r7, r4, #29
    1b54:	4307      	orrs	r7, r0
    1b56:	2080      	movs	r0, #128	; 0x80
    1b58:	08e4      	lsrs	r4, r4, #3
    1b5a:	0300      	lsls	r0, r0, #12
    1b5c:	4204      	tst	r4, r0
    1b5e:	d008      	beq.n	1b72 <__aeabi_dadd+0x54e>
    1b60:	08dd      	lsrs	r5, r3, #3
    1b62:	4205      	tst	r5, r0
    1b64:	d105      	bne.n	1b72 <__aeabi_dadd+0x54e>
    1b66:	08d2      	lsrs	r2, r2, #3
    1b68:	0759      	lsls	r1, r3, #29
    1b6a:	4311      	orrs	r1, r2
    1b6c:	000f      	movs	r7, r1
    1b6e:	002c      	movs	r4, r5
    1b70:	46d8      	mov	r8, fp
    1b72:	0f7b      	lsrs	r3, r7, #29
    1b74:	00e4      	lsls	r4, r4, #3
    1b76:	431c      	orrs	r4, r3
    1b78:	00ff      	lsls	r7, r7, #3
    1b7a:	4e30      	ldr	r6, [pc, #192]	; (1c3c <__aeabi_dadd+0x618>)
    1b7c:	e5d6      	b.n	172c <__aeabi_dadd+0x108>
    1b7e:	000c      	movs	r4, r1
    1b80:	0017      	movs	r7, r2
    1b82:	0006      	movs	r6, r0
    1b84:	e5d2      	b.n	172c <__aeabi_dadd+0x108>
    1b86:	2b00      	cmp	r3, #0
    1b88:	d038      	beq.n	1bfc <__aeabi_dadd+0x5d8>
    1b8a:	000b      	movs	r3, r1
    1b8c:	4313      	orrs	r3, r2
    1b8e:	d100      	bne.n	1b92 <__aeabi_dadd+0x56e>
    1b90:	e742      	b.n	1a18 <__aeabi_dadd+0x3f4>
    1b92:	08f8      	lsrs	r0, r7, #3
    1b94:	0767      	lsls	r7, r4, #29
    1b96:	4307      	orrs	r7, r0
    1b98:	2080      	movs	r0, #128	; 0x80
    1b9a:	08e4      	lsrs	r4, r4, #3
    1b9c:	0300      	lsls	r0, r0, #12
    1b9e:	4204      	tst	r4, r0
    1ba0:	d0e7      	beq.n	1b72 <__aeabi_dadd+0x54e>
    1ba2:	08cb      	lsrs	r3, r1, #3
    1ba4:	4203      	tst	r3, r0
    1ba6:	d1e4      	bne.n	1b72 <__aeabi_dadd+0x54e>
    1ba8:	08d2      	lsrs	r2, r2, #3
    1baa:	0749      	lsls	r1, r1, #29
    1bac:	4311      	orrs	r1, r2
    1bae:	000f      	movs	r7, r1
    1bb0:	001c      	movs	r4, r3
    1bb2:	e7de      	b.n	1b72 <__aeabi_dadd+0x54e>
    1bb4:	2700      	movs	r7, #0
    1bb6:	2400      	movs	r4, #0
    1bb8:	e5d5      	b.n	1766 <__aeabi_dadd+0x142>
    1bba:	2100      	movs	r1, #0
    1bbc:	e76b      	b.n	1a96 <__aeabi_dadd+0x472>
    1bbe:	2500      	movs	r5, #0
    1bc0:	2700      	movs	r7, #0
    1bc2:	e5f3      	b.n	17ac <__aeabi_dadd+0x188>
    1bc4:	464e      	mov	r6, r9
    1bc6:	0025      	movs	r5, r4
    1bc8:	3e20      	subs	r6, #32
    1bca:	40f5      	lsrs	r5, r6
    1bcc:	464b      	mov	r3, r9
    1bce:	002e      	movs	r6, r5
    1bd0:	2b20      	cmp	r3, #32
    1bd2:	d02d      	beq.n	1c30 <__aeabi_dadd+0x60c>
    1bd4:	2540      	movs	r5, #64	; 0x40
    1bd6:	1aed      	subs	r5, r5, r3
    1bd8:	40ac      	lsls	r4, r5
    1bda:	4327      	orrs	r7, r4
    1bdc:	1e7c      	subs	r4, r7, #1
    1bde:	41a7      	sbcs	r7, r4
    1be0:	2400      	movs	r4, #0
    1be2:	4337      	orrs	r7, r6
    1be4:	e6c9      	b.n	197a <__aeabi_dadd+0x356>
    1be6:	2480      	movs	r4, #128	; 0x80
    1be8:	2500      	movs	r5, #0
    1bea:	0324      	lsls	r4, r4, #12
    1bec:	4e13      	ldr	r6, [pc, #76]	; (1c3c <__aeabi_dadd+0x618>)
    1bee:	2700      	movs	r7, #0
    1bf0:	e5dc      	b.n	17ac <__aeabi_dadd+0x188>
    1bf2:	4327      	orrs	r7, r4
    1bf4:	1e7c      	subs	r4, r7, #1
    1bf6:	41a7      	sbcs	r7, r4
    1bf8:	2400      	movs	r4, #0
    1bfa:	e779      	b.n	1af0 <__aeabi_dadd+0x4cc>
    1bfc:	000c      	movs	r4, r1
    1bfe:	0017      	movs	r7, r2
    1c00:	4e0e      	ldr	r6, [pc, #56]	; (1c3c <__aeabi_dadd+0x618>)
    1c02:	e593      	b.n	172c <__aeabi_dadd+0x108>
    1c04:	000c      	movs	r4, r1
    1c06:	0017      	movs	r7, r2
    1c08:	e590      	b.n	172c <__aeabi_dadd+0x108>
    1c0a:	4656      	mov	r6, sl
    1c0c:	0023      	movs	r3, r4
    1c0e:	3e20      	subs	r6, #32
    1c10:	40f3      	lsrs	r3, r6
    1c12:	4699      	mov	r9, r3
    1c14:	4653      	mov	r3, sl
    1c16:	2b20      	cmp	r3, #32
    1c18:	d00e      	beq.n	1c38 <__aeabi_dadd+0x614>
    1c1a:	2340      	movs	r3, #64	; 0x40
    1c1c:	4656      	mov	r6, sl
    1c1e:	1b9b      	subs	r3, r3, r6
    1c20:	409c      	lsls	r4, r3
    1c22:	4327      	orrs	r7, r4
    1c24:	1e7c      	subs	r4, r7, #1
    1c26:	41a7      	sbcs	r7, r4
    1c28:	464b      	mov	r3, r9
    1c2a:	2400      	movs	r4, #0
    1c2c:	431f      	orrs	r7, r3
    1c2e:	e75f      	b.n	1af0 <__aeabi_dadd+0x4cc>
    1c30:	2400      	movs	r4, #0
    1c32:	e7d2      	b.n	1bda <__aeabi_dadd+0x5b6>
    1c34:	0017      	movs	r7, r2
    1c36:	e5b2      	b.n	179e <__aeabi_dadd+0x17a>
    1c38:	2400      	movs	r4, #0
    1c3a:	e7f2      	b.n	1c22 <__aeabi_dadd+0x5fe>
    1c3c:	000007ff 	.word	0x000007ff
    1c40:	ff7fffff 	.word	0xff7fffff

00001c44 <__aeabi_dmul>:
    1c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c46:	4657      	mov	r7, sl
    1c48:	4645      	mov	r5, r8
    1c4a:	46de      	mov	lr, fp
    1c4c:	464e      	mov	r6, r9
    1c4e:	b5e0      	push	{r5, r6, r7, lr}
    1c50:	030c      	lsls	r4, r1, #12
    1c52:	4698      	mov	r8, r3
    1c54:	004e      	lsls	r6, r1, #1
    1c56:	0b23      	lsrs	r3, r4, #12
    1c58:	b087      	sub	sp, #28
    1c5a:	0007      	movs	r7, r0
    1c5c:	4692      	mov	sl, r2
    1c5e:	469b      	mov	fp, r3
    1c60:	0d76      	lsrs	r6, r6, #21
    1c62:	0fcd      	lsrs	r5, r1, #31
    1c64:	2e00      	cmp	r6, #0
    1c66:	d06b      	beq.n	1d40 <__aeabi_dmul+0xfc>
    1c68:	4b6d      	ldr	r3, [pc, #436]	; (1e20 <__aeabi_dmul+0x1dc>)
    1c6a:	429e      	cmp	r6, r3
    1c6c:	d035      	beq.n	1cda <__aeabi_dmul+0x96>
    1c6e:	2480      	movs	r4, #128	; 0x80
    1c70:	465b      	mov	r3, fp
    1c72:	0f42      	lsrs	r2, r0, #29
    1c74:	0424      	lsls	r4, r4, #16
    1c76:	00db      	lsls	r3, r3, #3
    1c78:	4314      	orrs	r4, r2
    1c7a:	431c      	orrs	r4, r3
    1c7c:	00c3      	lsls	r3, r0, #3
    1c7e:	4699      	mov	r9, r3
    1c80:	4b68      	ldr	r3, [pc, #416]	; (1e24 <__aeabi_dmul+0x1e0>)
    1c82:	46a3      	mov	fp, r4
    1c84:	469c      	mov	ip, r3
    1c86:	2300      	movs	r3, #0
    1c88:	2700      	movs	r7, #0
    1c8a:	4466      	add	r6, ip
    1c8c:	9302      	str	r3, [sp, #8]
    1c8e:	4643      	mov	r3, r8
    1c90:	031c      	lsls	r4, r3, #12
    1c92:	005a      	lsls	r2, r3, #1
    1c94:	0fdb      	lsrs	r3, r3, #31
    1c96:	4650      	mov	r0, sl
    1c98:	0b24      	lsrs	r4, r4, #12
    1c9a:	0d52      	lsrs	r2, r2, #21
    1c9c:	4698      	mov	r8, r3
    1c9e:	d100      	bne.n	1ca2 <__aeabi_dmul+0x5e>
    1ca0:	e076      	b.n	1d90 <__aeabi_dmul+0x14c>
    1ca2:	4b5f      	ldr	r3, [pc, #380]	; (1e20 <__aeabi_dmul+0x1dc>)
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d06d      	beq.n	1d84 <__aeabi_dmul+0x140>
    1ca8:	2380      	movs	r3, #128	; 0x80
    1caa:	0f41      	lsrs	r1, r0, #29
    1cac:	041b      	lsls	r3, r3, #16
    1cae:	430b      	orrs	r3, r1
    1cb0:	495c      	ldr	r1, [pc, #368]	; (1e24 <__aeabi_dmul+0x1e0>)
    1cb2:	00e4      	lsls	r4, r4, #3
    1cb4:	468c      	mov	ip, r1
    1cb6:	431c      	orrs	r4, r3
    1cb8:	00c3      	lsls	r3, r0, #3
    1cba:	2000      	movs	r0, #0
    1cbc:	4462      	add	r2, ip
    1cbe:	4641      	mov	r1, r8
    1cc0:	18b6      	adds	r6, r6, r2
    1cc2:	4069      	eors	r1, r5
    1cc4:	1c72      	adds	r2, r6, #1
    1cc6:	9101      	str	r1, [sp, #4]
    1cc8:	4694      	mov	ip, r2
    1cca:	4307      	orrs	r7, r0
    1ccc:	2f0f      	cmp	r7, #15
    1cce:	d900      	bls.n	1cd2 <__aeabi_dmul+0x8e>
    1cd0:	e0b0      	b.n	1e34 <__aeabi_dmul+0x1f0>
    1cd2:	4a55      	ldr	r2, [pc, #340]	; (1e28 <__aeabi_dmul+0x1e4>)
    1cd4:	00bf      	lsls	r7, r7, #2
    1cd6:	59d2      	ldr	r2, [r2, r7]
    1cd8:	4697      	mov	pc, r2
    1cda:	465b      	mov	r3, fp
    1cdc:	4303      	orrs	r3, r0
    1cde:	4699      	mov	r9, r3
    1ce0:	d000      	beq.n	1ce4 <__aeabi_dmul+0xa0>
    1ce2:	e087      	b.n	1df4 <__aeabi_dmul+0x1b0>
    1ce4:	2300      	movs	r3, #0
    1ce6:	469b      	mov	fp, r3
    1ce8:	3302      	adds	r3, #2
    1cea:	2708      	movs	r7, #8
    1cec:	9302      	str	r3, [sp, #8]
    1cee:	e7ce      	b.n	1c8e <__aeabi_dmul+0x4a>
    1cf0:	4642      	mov	r2, r8
    1cf2:	9201      	str	r2, [sp, #4]
    1cf4:	2802      	cmp	r0, #2
    1cf6:	d067      	beq.n	1dc8 <__aeabi_dmul+0x184>
    1cf8:	2803      	cmp	r0, #3
    1cfa:	d100      	bne.n	1cfe <__aeabi_dmul+0xba>
    1cfc:	e20e      	b.n	211c <STACK_SIZE+0x11c>
    1cfe:	2801      	cmp	r0, #1
    1d00:	d000      	beq.n	1d04 <__aeabi_dmul+0xc0>
    1d02:	e162      	b.n	1fca <__aeabi_dmul+0x386>
    1d04:	2300      	movs	r3, #0
    1d06:	2400      	movs	r4, #0
    1d08:	2200      	movs	r2, #0
    1d0a:	4699      	mov	r9, r3
    1d0c:	9901      	ldr	r1, [sp, #4]
    1d0e:	4001      	ands	r1, r0
    1d10:	b2cd      	uxtb	r5, r1
    1d12:	2100      	movs	r1, #0
    1d14:	0312      	lsls	r2, r2, #12
    1d16:	0d0b      	lsrs	r3, r1, #20
    1d18:	0b12      	lsrs	r2, r2, #12
    1d1a:	051b      	lsls	r3, r3, #20
    1d1c:	4313      	orrs	r3, r2
    1d1e:	4a43      	ldr	r2, [pc, #268]	; (1e2c <__aeabi_dmul+0x1e8>)
    1d20:	0524      	lsls	r4, r4, #20
    1d22:	4013      	ands	r3, r2
    1d24:	431c      	orrs	r4, r3
    1d26:	0064      	lsls	r4, r4, #1
    1d28:	07ed      	lsls	r5, r5, #31
    1d2a:	0864      	lsrs	r4, r4, #1
    1d2c:	432c      	orrs	r4, r5
    1d2e:	4648      	mov	r0, r9
    1d30:	0021      	movs	r1, r4
    1d32:	b007      	add	sp, #28
    1d34:	bc3c      	pop	{r2, r3, r4, r5}
    1d36:	4690      	mov	r8, r2
    1d38:	4699      	mov	r9, r3
    1d3a:	46a2      	mov	sl, r4
    1d3c:	46ab      	mov	fp, r5
    1d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d40:	4303      	orrs	r3, r0
    1d42:	4699      	mov	r9, r3
    1d44:	d04f      	beq.n	1de6 <__aeabi_dmul+0x1a2>
    1d46:	465b      	mov	r3, fp
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d100      	bne.n	1d4e <__aeabi_dmul+0x10a>
    1d4c:	e189      	b.n	2062 <STACK_SIZE+0x62>
    1d4e:	4658      	mov	r0, fp
    1d50:	f000 fb4e 	bl	23f0 <__clzsi2>
    1d54:	0003      	movs	r3, r0
    1d56:	3b0b      	subs	r3, #11
    1d58:	2b1c      	cmp	r3, #28
    1d5a:	dd00      	ble.n	1d5e <__aeabi_dmul+0x11a>
    1d5c:	e17a      	b.n	2054 <STACK_SIZE+0x54>
    1d5e:	221d      	movs	r2, #29
    1d60:	1ad3      	subs	r3, r2, r3
    1d62:	003a      	movs	r2, r7
    1d64:	0001      	movs	r1, r0
    1d66:	465c      	mov	r4, fp
    1d68:	40da      	lsrs	r2, r3
    1d6a:	3908      	subs	r1, #8
    1d6c:	408c      	lsls	r4, r1
    1d6e:	0013      	movs	r3, r2
    1d70:	408f      	lsls	r7, r1
    1d72:	4323      	orrs	r3, r4
    1d74:	469b      	mov	fp, r3
    1d76:	46b9      	mov	r9, r7
    1d78:	2300      	movs	r3, #0
    1d7a:	4e2d      	ldr	r6, [pc, #180]	; (1e30 <__aeabi_dmul+0x1ec>)
    1d7c:	2700      	movs	r7, #0
    1d7e:	1a36      	subs	r6, r6, r0
    1d80:	9302      	str	r3, [sp, #8]
    1d82:	e784      	b.n	1c8e <__aeabi_dmul+0x4a>
    1d84:	4653      	mov	r3, sl
    1d86:	4323      	orrs	r3, r4
    1d88:	d12a      	bne.n	1de0 <__aeabi_dmul+0x19c>
    1d8a:	2400      	movs	r4, #0
    1d8c:	2002      	movs	r0, #2
    1d8e:	e796      	b.n	1cbe <__aeabi_dmul+0x7a>
    1d90:	4653      	mov	r3, sl
    1d92:	4323      	orrs	r3, r4
    1d94:	d020      	beq.n	1dd8 <__aeabi_dmul+0x194>
    1d96:	2c00      	cmp	r4, #0
    1d98:	d100      	bne.n	1d9c <__aeabi_dmul+0x158>
    1d9a:	e157      	b.n	204c <STACK_SIZE+0x4c>
    1d9c:	0020      	movs	r0, r4
    1d9e:	f000 fb27 	bl	23f0 <__clzsi2>
    1da2:	0003      	movs	r3, r0
    1da4:	3b0b      	subs	r3, #11
    1da6:	2b1c      	cmp	r3, #28
    1da8:	dd00      	ble.n	1dac <__aeabi_dmul+0x168>
    1daa:	e149      	b.n	2040 <STACK_SIZE+0x40>
    1dac:	211d      	movs	r1, #29
    1dae:	1acb      	subs	r3, r1, r3
    1db0:	4651      	mov	r1, sl
    1db2:	0002      	movs	r2, r0
    1db4:	40d9      	lsrs	r1, r3
    1db6:	4653      	mov	r3, sl
    1db8:	3a08      	subs	r2, #8
    1dba:	4094      	lsls	r4, r2
    1dbc:	4093      	lsls	r3, r2
    1dbe:	430c      	orrs	r4, r1
    1dc0:	4a1b      	ldr	r2, [pc, #108]	; (1e30 <__aeabi_dmul+0x1ec>)
    1dc2:	1a12      	subs	r2, r2, r0
    1dc4:	2000      	movs	r0, #0
    1dc6:	e77a      	b.n	1cbe <__aeabi_dmul+0x7a>
    1dc8:	2501      	movs	r5, #1
    1dca:	9b01      	ldr	r3, [sp, #4]
    1dcc:	4c14      	ldr	r4, [pc, #80]	; (1e20 <__aeabi_dmul+0x1dc>)
    1dce:	401d      	ands	r5, r3
    1dd0:	2300      	movs	r3, #0
    1dd2:	2200      	movs	r2, #0
    1dd4:	4699      	mov	r9, r3
    1dd6:	e79c      	b.n	1d12 <__aeabi_dmul+0xce>
    1dd8:	2400      	movs	r4, #0
    1dda:	2200      	movs	r2, #0
    1ddc:	2001      	movs	r0, #1
    1dde:	e76e      	b.n	1cbe <__aeabi_dmul+0x7a>
    1de0:	4653      	mov	r3, sl
    1de2:	2003      	movs	r0, #3
    1de4:	e76b      	b.n	1cbe <__aeabi_dmul+0x7a>
    1de6:	2300      	movs	r3, #0
    1de8:	469b      	mov	fp, r3
    1dea:	3301      	adds	r3, #1
    1dec:	2704      	movs	r7, #4
    1dee:	2600      	movs	r6, #0
    1df0:	9302      	str	r3, [sp, #8]
    1df2:	e74c      	b.n	1c8e <__aeabi_dmul+0x4a>
    1df4:	2303      	movs	r3, #3
    1df6:	4681      	mov	r9, r0
    1df8:	270c      	movs	r7, #12
    1dfa:	9302      	str	r3, [sp, #8]
    1dfc:	e747      	b.n	1c8e <__aeabi_dmul+0x4a>
    1dfe:	2280      	movs	r2, #128	; 0x80
    1e00:	2300      	movs	r3, #0
    1e02:	2500      	movs	r5, #0
    1e04:	0312      	lsls	r2, r2, #12
    1e06:	4699      	mov	r9, r3
    1e08:	4c05      	ldr	r4, [pc, #20]	; (1e20 <__aeabi_dmul+0x1dc>)
    1e0a:	e782      	b.n	1d12 <__aeabi_dmul+0xce>
    1e0c:	465c      	mov	r4, fp
    1e0e:	464b      	mov	r3, r9
    1e10:	9802      	ldr	r0, [sp, #8]
    1e12:	e76f      	b.n	1cf4 <__aeabi_dmul+0xb0>
    1e14:	465c      	mov	r4, fp
    1e16:	464b      	mov	r3, r9
    1e18:	9501      	str	r5, [sp, #4]
    1e1a:	9802      	ldr	r0, [sp, #8]
    1e1c:	e76a      	b.n	1cf4 <__aeabi_dmul+0xb0>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	000007ff 	.word	0x000007ff
    1e24:	fffffc01 	.word	0xfffffc01
    1e28:	000027a4 	.word	0x000027a4
    1e2c:	800fffff 	.word	0x800fffff
    1e30:	fffffc0d 	.word	0xfffffc0d
    1e34:	464a      	mov	r2, r9
    1e36:	4649      	mov	r1, r9
    1e38:	0c17      	lsrs	r7, r2, #16
    1e3a:	0c1a      	lsrs	r2, r3, #16
    1e3c:	041b      	lsls	r3, r3, #16
    1e3e:	0c1b      	lsrs	r3, r3, #16
    1e40:	0408      	lsls	r0, r1, #16
    1e42:	0019      	movs	r1, r3
    1e44:	0c00      	lsrs	r0, r0, #16
    1e46:	4341      	muls	r1, r0
    1e48:	0015      	movs	r5, r2
    1e4a:	4688      	mov	r8, r1
    1e4c:	0019      	movs	r1, r3
    1e4e:	437d      	muls	r5, r7
    1e50:	4379      	muls	r1, r7
    1e52:	9503      	str	r5, [sp, #12]
    1e54:	4689      	mov	r9, r1
    1e56:	0029      	movs	r1, r5
    1e58:	0015      	movs	r5, r2
    1e5a:	4345      	muls	r5, r0
    1e5c:	444d      	add	r5, r9
    1e5e:	9502      	str	r5, [sp, #8]
    1e60:	4645      	mov	r5, r8
    1e62:	0c2d      	lsrs	r5, r5, #16
    1e64:	46aa      	mov	sl, r5
    1e66:	9d02      	ldr	r5, [sp, #8]
    1e68:	4455      	add	r5, sl
    1e6a:	45a9      	cmp	r9, r5
    1e6c:	d906      	bls.n	1e7c <__aeabi_dmul+0x238>
    1e6e:	468a      	mov	sl, r1
    1e70:	2180      	movs	r1, #128	; 0x80
    1e72:	0249      	lsls	r1, r1, #9
    1e74:	4689      	mov	r9, r1
    1e76:	44ca      	add	sl, r9
    1e78:	4651      	mov	r1, sl
    1e7a:	9103      	str	r1, [sp, #12]
    1e7c:	0c29      	lsrs	r1, r5, #16
    1e7e:	9104      	str	r1, [sp, #16]
    1e80:	4641      	mov	r1, r8
    1e82:	0409      	lsls	r1, r1, #16
    1e84:	042d      	lsls	r5, r5, #16
    1e86:	0c09      	lsrs	r1, r1, #16
    1e88:	4688      	mov	r8, r1
    1e8a:	0029      	movs	r1, r5
    1e8c:	0c25      	lsrs	r5, r4, #16
    1e8e:	0424      	lsls	r4, r4, #16
    1e90:	4441      	add	r1, r8
    1e92:	0c24      	lsrs	r4, r4, #16
    1e94:	9105      	str	r1, [sp, #20]
    1e96:	0021      	movs	r1, r4
    1e98:	4341      	muls	r1, r0
    1e9a:	4688      	mov	r8, r1
    1e9c:	0021      	movs	r1, r4
    1e9e:	4379      	muls	r1, r7
    1ea0:	468a      	mov	sl, r1
    1ea2:	4368      	muls	r0, r5
    1ea4:	4641      	mov	r1, r8
    1ea6:	4450      	add	r0, sl
    1ea8:	4681      	mov	r9, r0
    1eaa:	0c08      	lsrs	r0, r1, #16
    1eac:	4448      	add	r0, r9
    1eae:	436f      	muls	r7, r5
    1eb0:	4582      	cmp	sl, r0
    1eb2:	d903      	bls.n	1ebc <__aeabi_dmul+0x278>
    1eb4:	2180      	movs	r1, #128	; 0x80
    1eb6:	0249      	lsls	r1, r1, #9
    1eb8:	4689      	mov	r9, r1
    1eba:	444f      	add	r7, r9
    1ebc:	0c01      	lsrs	r1, r0, #16
    1ebe:	4689      	mov	r9, r1
    1ec0:	0039      	movs	r1, r7
    1ec2:	4449      	add	r1, r9
    1ec4:	9102      	str	r1, [sp, #8]
    1ec6:	4641      	mov	r1, r8
    1ec8:	040f      	lsls	r7, r1, #16
    1eca:	9904      	ldr	r1, [sp, #16]
    1ecc:	0c3f      	lsrs	r7, r7, #16
    1ece:	4688      	mov	r8, r1
    1ed0:	0400      	lsls	r0, r0, #16
    1ed2:	19c0      	adds	r0, r0, r7
    1ed4:	4480      	add	r8, r0
    1ed6:	4641      	mov	r1, r8
    1ed8:	9104      	str	r1, [sp, #16]
    1eda:	4659      	mov	r1, fp
    1edc:	0c0f      	lsrs	r7, r1, #16
    1ede:	0409      	lsls	r1, r1, #16
    1ee0:	0c09      	lsrs	r1, r1, #16
    1ee2:	4688      	mov	r8, r1
    1ee4:	4359      	muls	r1, r3
    1ee6:	468a      	mov	sl, r1
    1ee8:	0039      	movs	r1, r7
    1eea:	4351      	muls	r1, r2
    1eec:	4689      	mov	r9, r1
    1eee:	4641      	mov	r1, r8
    1ef0:	434a      	muls	r2, r1
    1ef2:	4651      	mov	r1, sl
    1ef4:	0c09      	lsrs	r1, r1, #16
    1ef6:	468b      	mov	fp, r1
    1ef8:	437b      	muls	r3, r7
    1efa:	18d2      	adds	r2, r2, r3
    1efc:	445a      	add	r2, fp
    1efe:	4293      	cmp	r3, r2
    1f00:	d903      	bls.n	1f0a <__aeabi_dmul+0x2c6>
    1f02:	2380      	movs	r3, #128	; 0x80
    1f04:	025b      	lsls	r3, r3, #9
    1f06:	469b      	mov	fp, r3
    1f08:	44d9      	add	r9, fp
    1f0a:	4651      	mov	r1, sl
    1f0c:	0409      	lsls	r1, r1, #16
    1f0e:	0c09      	lsrs	r1, r1, #16
    1f10:	468a      	mov	sl, r1
    1f12:	4641      	mov	r1, r8
    1f14:	4361      	muls	r1, r4
    1f16:	437c      	muls	r4, r7
    1f18:	0c13      	lsrs	r3, r2, #16
    1f1a:	0412      	lsls	r2, r2, #16
    1f1c:	444b      	add	r3, r9
    1f1e:	4452      	add	r2, sl
    1f20:	46a1      	mov	r9, r4
    1f22:	468a      	mov	sl, r1
    1f24:	003c      	movs	r4, r7
    1f26:	4641      	mov	r1, r8
    1f28:	436c      	muls	r4, r5
    1f2a:	434d      	muls	r5, r1
    1f2c:	4651      	mov	r1, sl
    1f2e:	444d      	add	r5, r9
    1f30:	0c0f      	lsrs	r7, r1, #16
    1f32:	197d      	adds	r5, r7, r5
    1f34:	45a9      	cmp	r9, r5
    1f36:	d903      	bls.n	1f40 <__aeabi_dmul+0x2fc>
    1f38:	2180      	movs	r1, #128	; 0x80
    1f3a:	0249      	lsls	r1, r1, #9
    1f3c:	4688      	mov	r8, r1
    1f3e:	4444      	add	r4, r8
    1f40:	9f04      	ldr	r7, [sp, #16]
    1f42:	9903      	ldr	r1, [sp, #12]
    1f44:	46b8      	mov	r8, r7
    1f46:	4441      	add	r1, r8
    1f48:	468b      	mov	fp, r1
    1f4a:	4583      	cmp	fp, r0
    1f4c:	4180      	sbcs	r0, r0
    1f4e:	4241      	negs	r1, r0
    1f50:	4688      	mov	r8, r1
    1f52:	4651      	mov	r1, sl
    1f54:	0408      	lsls	r0, r1, #16
    1f56:	042f      	lsls	r7, r5, #16
    1f58:	0c00      	lsrs	r0, r0, #16
    1f5a:	183f      	adds	r7, r7, r0
    1f5c:	4658      	mov	r0, fp
    1f5e:	9902      	ldr	r1, [sp, #8]
    1f60:	1810      	adds	r0, r2, r0
    1f62:	4689      	mov	r9, r1
    1f64:	4290      	cmp	r0, r2
    1f66:	4192      	sbcs	r2, r2
    1f68:	444f      	add	r7, r9
    1f6a:	46ba      	mov	sl, r7
    1f6c:	4252      	negs	r2, r2
    1f6e:	4699      	mov	r9, r3
    1f70:	4693      	mov	fp, r2
    1f72:	44c2      	add	sl, r8
    1f74:	44d1      	add	r9, sl
    1f76:	44cb      	add	fp, r9
    1f78:	428f      	cmp	r7, r1
    1f7a:	41bf      	sbcs	r7, r7
    1f7c:	45c2      	cmp	sl, r8
    1f7e:	4189      	sbcs	r1, r1
    1f80:	4599      	cmp	r9, r3
    1f82:	419b      	sbcs	r3, r3
    1f84:	4593      	cmp	fp, r2
    1f86:	4192      	sbcs	r2, r2
    1f88:	427f      	negs	r7, r7
    1f8a:	4249      	negs	r1, r1
    1f8c:	0c2d      	lsrs	r5, r5, #16
    1f8e:	4252      	negs	r2, r2
    1f90:	430f      	orrs	r7, r1
    1f92:	425b      	negs	r3, r3
    1f94:	4313      	orrs	r3, r2
    1f96:	197f      	adds	r7, r7, r5
    1f98:	18ff      	adds	r7, r7, r3
    1f9a:	465b      	mov	r3, fp
    1f9c:	193c      	adds	r4, r7, r4
    1f9e:	0ddb      	lsrs	r3, r3, #23
    1fa0:	9a05      	ldr	r2, [sp, #20]
    1fa2:	0264      	lsls	r4, r4, #9
    1fa4:	431c      	orrs	r4, r3
    1fa6:	0243      	lsls	r3, r0, #9
    1fa8:	4313      	orrs	r3, r2
    1faa:	1e5d      	subs	r5, r3, #1
    1fac:	41ab      	sbcs	r3, r5
    1fae:	465a      	mov	r2, fp
    1fb0:	0dc0      	lsrs	r0, r0, #23
    1fb2:	4303      	orrs	r3, r0
    1fb4:	0252      	lsls	r2, r2, #9
    1fb6:	4313      	orrs	r3, r2
    1fb8:	01e2      	lsls	r2, r4, #7
    1fba:	d556      	bpl.n	206a <STACK_SIZE+0x6a>
    1fbc:	2001      	movs	r0, #1
    1fbe:	085a      	lsrs	r2, r3, #1
    1fc0:	4003      	ands	r3, r0
    1fc2:	4313      	orrs	r3, r2
    1fc4:	07e2      	lsls	r2, r4, #31
    1fc6:	4313      	orrs	r3, r2
    1fc8:	0864      	lsrs	r4, r4, #1
    1fca:	485a      	ldr	r0, [pc, #360]	; (2134 <STACK_SIZE+0x134>)
    1fcc:	4460      	add	r0, ip
    1fce:	2800      	cmp	r0, #0
    1fd0:	dd4d      	ble.n	206e <STACK_SIZE+0x6e>
    1fd2:	075a      	lsls	r2, r3, #29
    1fd4:	d009      	beq.n	1fea <__aeabi_dmul+0x3a6>
    1fd6:	220f      	movs	r2, #15
    1fd8:	401a      	ands	r2, r3
    1fda:	2a04      	cmp	r2, #4
    1fdc:	d005      	beq.n	1fea <__aeabi_dmul+0x3a6>
    1fde:	1d1a      	adds	r2, r3, #4
    1fe0:	429a      	cmp	r2, r3
    1fe2:	419b      	sbcs	r3, r3
    1fe4:	425b      	negs	r3, r3
    1fe6:	18e4      	adds	r4, r4, r3
    1fe8:	0013      	movs	r3, r2
    1fea:	01e2      	lsls	r2, r4, #7
    1fec:	d504      	bpl.n	1ff8 <__aeabi_dmul+0x3b4>
    1fee:	2080      	movs	r0, #128	; 0x80
    1ff0:	4a51      	ldr	r2, [pc, #324]	; (2138 <STACK_SIZE+0x138>)
    1ff2:	00c0      	lsls	r0, r0, #3
    1ff4:	4014      	ands	r4, r2
    1ff6:	4460      	add	r0, ip
    1ff8:	4a50      	ldr	r2, [pc, #320]	; (213c <STACK_SIZE+0x13c>)
    1ffa:	4290      	cmp	r0, r2
    1ffc:	dd00      	ble.n	2000 <STACK_SIZE>
    1ffe:	e6e3      	b.n	1dc8 <__aeabi_dmul+0x184>
    2000:	2501      	movs	r5, #1
    2002:	08db      	lsrs	r3, r3, #3
    2004:	0762      	lsls	r2, r4, #29
    2006:	431a      	orrs	r2, r3
    2008:	0264      	lsls	r4, r4, #9
    200a:	9b01      	ldr	r3, [sp, #4]
    200c:	4691      	mov	r9, r2
    200e:	0b22      	lsrs	r2, r4, #12
    2010:	0544      	lsls	r4, r0, #21
    2012:	0d64      	lsrs	r4, r4, #21
    2014:	401d      	ands	r5, r3
    2016:	e67c      	b.n	1d12 <__aeabi_dmul+0xce>
    2018:	2280      	movs	r2, #128	; 0x80
    201a:	4659      	mov	r1, fp
    201c:	0312      	lsls	r2, r2, #12
    201e:	4211      	tst	r1, r2
    2020:	d008      	beq.n	2034 <STACK_SIZE+0x34>
    2022:	4214      	tst	r4, r2
    2024:	d106      	bne.n	2034 <STACK_SIZE+0x34>
    2026:	4322      	orrs	r2, r4
    2028:	0312      	lsls	r2, r2, #12
    202a:	0b12      	lsrs	r2, r2, #12
    202c:	4645      	mov	r5, r8
    202e:	4699      	mov	r9, r3
    2030:	4c43      	ldr	r4, [pc, #268]	; (2140 <STACK_SIZE+0x140>)
    2032:	e66e      	b.n	1d12 <__aeabi_dmul+0xce>
    2034:	465b      	mov	r3, fp
    2036:	431a      	orrs	r2, r3
    2038:	0312      	lsls	r2, r2, #12
    203a:	0b12      	lsrs	r2, r2, #12
    203c:	4c40      	ldr	r4, [pc, #256]	; (2140 <STACK_SIZE+0x140>)
    203e:	e668      	b.n	1d12 <__aeabi_dmul+0xce>
    2040:	0003      	movs	r3, r0
    2042:	4654      	mov	r4, sl
    2044:	3b28      	subs	r3, #40	; 0x28
    2046:	409c      	lsls	r4, r3
    2048:	2300      	movs	r3, #0
    204a:	e6b9      	b.n	1dc0 <__aeabi_dmul+0x17c>
    204c:	f000 f9d0 	bl	23f0 <__clzsi2>
    2050:	3020      	adds	r0, #32
    2052:	e6a6      	b.n	1da2 <__aeabi_dmul+0x15e>
    2054:	0003      	movs	r3, r0
    2056:	3b28      	subs	r3, #40	; 0x28
    2058:	409f      	lsls	r7, r3
    205a:	2300      	movs	r3, #0
    205c:	46bb      	mov	fp, r7
    205e:	4699      	mov	r9, r3
    2060:	e68a      	b.n	1d78 <__aeabi_dmul+0x134>
    2062:	f000 f9c5 	bl	23f0 <__clzsi2>
    2066:	3020      	adds	r0, #32
    2068:	e674      	b.n	1d54 <__aeabi_dmul+0x110>
    206a:	46b4      	mov	ip, r6
    206c:	e7ad      	b.n	1fca <__aeabi_dmul+0x386>
    206e:	2501      	movs	r5, #1
    2070:	1a2a      	subs	r2, r5, r0
    2072:	2a38      	cmp	r2, #56	; 0x38
    2074:	dd06      	ble.n	2084 <STACK_SIZE+0x84>
    2076:	9b01      	ldr	r3, [sp, #4]
    2078:	2400      	movs	r4, #0
    207a:	401d      	ands	r5, r3
    207c:	2300      	movs	r3, #0
    207e:	2200      	movs	r2, #0
    2080:	4699      	mov	r9, r3
    2082:	e646      	b.n	1d12 <__aeabi_dmul+0xce>
    2084:	2a1f      	cmp	r2, #31
    2086:	dc21      	bgt.n	20cc <STACK_SIZE+0xcc>
    2088:	2520      	movs	r5, #32
    208a:	0020      	movs	r0, r4
    208c:	1aad      	subs	r5, r5, r2
    208e:	001e      	movs	r6, r3
    2090:	40ab      	lsls	r3, r5
    2092:	40a8      	lsls	r0, r5
    2094:	40d6      	lsrs	r6, r2
    2096:	1e5d      	subs	r5, r3, #1
    2098:	41ab      	sbcs	r3, r5
    209a:	4330      	orrs	r0, r6
    209c:	4318      	orrs	r0, r3
    209e:	40d4      	lsrs	r4, r2
    20a0:	0743      	lsls	r3, r0, #29
    20a2:	d009      	beq.n	20b8 <STACK_SIZE+0xb8>
    20a4:	230f      	movs	r3, #15
    20a6:	4003      	ands	r3, r0
    20a8:	2b04      	cmp	r3, #4
    20aa:	d005      	beq.n	20b8 <STACK_SIZE+0xb8>
    20ac:	0003      	movs	r3, r0
    20ae:	1d18      	adds	r0, r3, #4
    20b0:	4298      	cmp	r0, r3
    20b2:	419b      	sbcs	r3, r3
    20b4:	425b      	negs	r3, r3
    20b6:	18e4      	adds	r4, r4, r3
    20b8:	0223      	lsls	r3, r4, #8
    20ba:	d521      	bpl.n	2100 <STACK_SIZE+0x100>
    20bc:	2501      	movs	r5, #1
    20be:	9b01      	ldr	r3, [sp, #4]
    20c0:	2401      	movs	r4, #1
    20c2:	401d      	ands	r5, r3
    20c4:	2300      	movs	r3, #0
    20c6:	2200      	movs	r2, #0
    20c8:	4699      	mov	r9, r3
    20ca:	e622      	b.n	1d12 <__aeabi_dmul+0xce>
    20cc:	251f      	movs	r5, #31
    20ce:	0021      	movs	r1, r4
    20d0:	426d      	negs	r5, r5
    20d2:	1a28      	subs	r0, r5, r0
    20d4:	40c1      	lsrs	r1, r0
    20d6:	0008      	movs	r0, r1
    20d8:	2a20      	cmp	r2, #32
    20da:	d01d      	beq.n	2118 <STACK_SIZE+0x118>
    20dc:	355f      	adds	r5, #95	; 0x5f
    20de:	1aaa      	subs	r2, r5, r2
    20e0:	4094      	lsls	r4, r2
    20e2:	4323      	orrs	r3, r4
    20e4:	1e5c      	subs	r4, r3, #1
    20e6:	41a3      	sbcs	r3, r4
    20e8:	2507      	movs	r5, #7
    20ea:	4303      	orrs	r3, r0
    20ec:	401d      	ands	r5, r3
    20ee:	2200      	movs	r2, #0
    20f0:	2d00      	cmp	r5, #0
    20f2:	d009      	beq.n	2108 <STACK_SIZE+0x108>
    20f4:	220f      	movs	r2, #15
    20f6:	2400      	movs	r4, #0
    20f8:	401a      	ands	r2, r3
    20fa:	0018      	movs	r0, r3
    20fc:	2a04      	cmp	r2, #4
    20fe:	d1d6      	bne.n	20ae <STACK_SIZE+0xae>
    2100:	0003      	movs	r3, r0
    2102:	0765      	lsls	r5, r4, #29
    2104:	0264      	lsls	r4, r4, #9
    2106:	0b22      	lsrs	r2, r4, #12
    2108:	08db      	lsrs	r3, r3, #3
    210a:	432b      	orrs	r3, r5
    210c:	2501      	movs	r5, #1
    210e:	4699      	mov	r9, r3
    2110:	9b01      	ldr	r3, [sp, #4]
    2112:	2400      	movs	r4, #0
    2114:	401d      	ands	r5, r3
    2116:	e5fc      	b.n	1d12 <__aeabi_dmul+0xce>
    2118:	2400      	movs	r4, #0
    211a:	e7e2      	b.n	20e2 <STACK_SIZE+0xe2>
    211c:	2280      	movs	r2, #128	; 0x80
    211e:	2501      	movs	r5, #1
    2120:	0312      	lsls	r2, r2, #12
    2122:	4322      	orrs	r2, r4
    2124:	9901      	ldr	r1, [sp, #4]
    2126:	0312      	lsls	r2, r2, #12
    2128:	0b12      	lsrs	r2, r2, #12
    212a:	400d      	ands	r5, r1
    212c:	4699      	mov	r9, r3
    212e:	4c04      	ldr	r4, [pc, #16]	; (2140 <STACK_SIZE+0x140>)
    2130:	e5ef      	b.n	1d12 <__aeabi_dmul+0xce>
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	000003ff 	.word	0x000003ff
    2138:	feffffff 	.word	0xfeffffff
    213c:	000007fe 	.word	0x000007fe
    2140:	000007ff 	.word	0x000007ff

00002144 <__aeabi_i2d>:
    2144:	b570      	push	{r4, r5, r6, lr}
    2146:	2800      	cmp	r0, #0
    2148:	d030      	beq.n	21ac <__aeabi_i2d+0x68>
    214a:	17c3      	asrs	r3, r0, #31
    214c:	18c4      	adds	r4, r0, r3
    214e:	405c      	eors	r4, r3
    2150:	0fc5      	lsrs	r5, r0, #31
    2152:	0020      	movs	r0, r4
    2154:	f000 f94c 	bl	23f0 <__clzsi2>
    2158:	4b17      	ldr	r3, [pc, #92]	; (21b8 <__aeabi_i2d+0x74>)
    215a:	4a18      	ldr	r2, [pc, #96]	; (21bc <__aeabi_i2d+0x78>)
    215c:	1a1b      	subs	r3, r3, r0
    215e:	1ad2      	subs	r2, r2, r3
    2160:	2a1f      	cmp	r2, #31
    2162:	dd18      	ble.n	2196 <__aeabi_i2d+0x52>
    2164:	4a16      	ldr	r2, [pc, #88]	; (21c0 <__aeabi_i2d+0x7c>)
    2166:	1ad2      	subs	r2, r2, r3
    2168:	4094      	lsls	r4, r2
    216a:	2200      	movs	r2, #0
    216c:	0324      	lsls	r4, r4, #12
    216e:	055b      	lsls	r3, r3, #21
    2170:	0b24      	lsrs	r4, r4, #12
    2172:	0d5b      	lsrs	r3, r3, #21
    2174:	2100      	movs	r1, #0
    2176:	0010      	movs	r0, r2
    2178:	0324      	lsls	r4, r4, #12
    217a:	0d0a      	lsrs	r2, r1, #20
    217c:	0b24      	lsrs	r4, r4, #12
    217e:	0512      	lsls	r2, r2, #20
    2180:	4322      	orrs	r2, r4
    2182:	4c10      	ldr	r4, [pc, #64]	; (21c4 <__aeabi_i2d+0x80>)
    2184:	051b      	lsls	r3, r3, #20
    2186:	4022      	ands	r2, r4
    2188:	4313      	orrs	r3, r2
    218a:	005b      	lsls	r3, r3, #1
    218c:	07ed      	lsls	r5, r5, #31
    218e:	085b      	lsrs	r3, r3, #1
    2190:	432b      	orrs	r3, r5
    2192:	0019      	movs	r1, r3
    2194:	bd70      	pop	{r4, r5, r6, pc}
    2196:	0021      	movs	r1, r4
    2198:	4091      	lsls	r1, r2
    219a:	000a      	movs	r2, r1
    219c:	210b      	movs	r1, #11
    219e:	1a08      	subs	r0, r1, r0
    21a0:	40c4      	lsrs	r4, r0
    21a2:	055b      	lsls	r3, r3, #21
    21a4:	0324      	lsls	r4, r4, #12
    21a6:	0b24      	lsrs	r4, r4, #12
    21a8:	0d5b      	lsrs	r3, r3, #21
    21aa:	e7e3      	b.n	2174 <__aeabi_i2d+0x30>
    21ac:	2500      	movs	r5, #0
    21ae:	2300      	movs	r3, #0
    21b0:	2400      	movs	r4, #0
    21b2:	2200      	movs	r2, #0
    21b4:	e7de      	b.n	2174 <__aeabi_i2d+0x30>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	0000041e 	.word	0x0000041e
    21bc:	00000433 	.word	0x00000433
    21c0:	00000413 	.word	0x00000413
    21c4:	800fffff 	.word	0x800fffff

000021c8 <__aeabi_ui2d>:
    21c8:	b510      	push	{r4, lr}
    21ca:	1e04      	subs	r4, r0, #0
    21cc:	d028      	beq.n	2220 <__aeabi_ui2d+0x58>
    21ce:	f000 f90f 	bl	23f0 <__clzsi2>
    21d2:	4b15      	ldr	r3, [pc, #84]	; (2228 <__aeabi_ui2d+0x60>)
    21d4:	4a15      	ldr	r2, [pc, #84]	; (222c <__aeabi_ui2d+0x64>)
    21d6:	1a1b      	subs	r3, r3, r0
    21d8:	1ad2      	subs	r2, r2, r3
    21da:	2a1f      	cmp	r2, #31
    21dc:	dd15      	ble.n	220a <__aeabi_ui2d+0x42>
    21de:	4a14      	ldr	r2, [pc, #80]	; (2230 <__aeabi_ui2d+0x68>)
    21e0:	1ad2      	subs	r2, r2, r3
    21e2:	4094      	lsls	r4, r2
    21e4:	2200      	movs	r2, #0
    21e6:	0324      	lsls	r4, r4, #12
    21e8:	055b      	lsls	r3, r3, #21
    21ea:	0b24      	lsrs	r4, r4, #12
    21ec:	0d5b      	lsrs	r3, r3, #21
    21ee:	2100      	movs	r1, #0
    21f0:	0010      	movs	r0, r2
    21f2:	0324      	lsls	r4, r4, #12
    21f4:	0d0a      	lsrs	r2, r1, #20
    21f6:	0b24      	lsrs	r4, r4, #12
    21f8:	0512      	lsls	r2, r2, #20
    21fa:	4322      	orrs	r2, r4
    21fc:	4c0d      	ldr	r4, [pc, #52]	; (2234 <__aeabi_ui2d+0x6c>)
    21fe:	051b      	lsls	r3, r3, #20
    2200:	4022      	ands	r2, r4
    2202:	4313      	orrs	r3, r2
    2204:	005b      	lsls	r3, r3, #1
    2206:	0859      	lsrs	r1, r3, #1
    2208:	bd10      	pop	{r4, pc}
    220a:	0021      	movs	r1, r4
    220c:	4091      	lsls	r1, r2
    220e:	000a      	movs	r2, r1
    2210:	210b      	movs	r1, #11
    2212:	1a08      	subs	r0, r1, r0
    2214:	40c4      	lsrs	r4, r0
    2216:	055b      	lsls	r3, r3, #21
    2218:	0324      	lsls	r4, r4, #12
    221a:	0b24      	lsrs	r4, r4, #12
    221c:	0d5b      	lsrs	r3, r3, #21
    221e:	e7e6      	b.n	21ee <__aeabi_ui2d+0x26>
    2220:	2300      	movs	r3, #0
    2222:	2400      	movs	r4, #0
    2224:	2200      	movs	r2, #0
    2226:	e7e2      	b.n	21ee <__aeabi_ui2d+0x26>
    2228:	0000041e 	.word	0x0000041e
    222c:	00000433 	.word	0x00000433
    2230:	00000413 	.word	0x00000413
    2234:	800fffff 	.word	0x800fffff

00002238 <__aeabi_f2d>:
    2238:	0041      	lsls	r1, r0, #1
    223a:	0e09      	lsrs	r1, r1, #24
    223c:	1c4b      	adds	r3, r1, #1
    223e:	b570      	push	{r4, r5, r6, lr}
    2240:	b2db      	uxtb	r3, r3
    2242:	0246      	lsls	r6, r0, #9
    2244:	0a75      	lsrs	r5, r6, #9
    2246:	0fc4      	lsrs	r4, r0, #31
    2248:	2b01      	cmp	r3, #1
    224a:	dd14      	ble.n	2276 <__aeabi_f2d+0x3e>
    224c:	23e0      	movs	r3, #224	; 0xe0
    224e:	009b      	lsls	r3, r3, #2
    2250:	076d      	lsls	r5, r5, #29
    2252:	0b36      	lsrs	r6, r6, #12
    2254:	18cb      	adds	r3, r1, r3
    2256:	2100      	movs	r1, #0
    2258:	0d0a      	lsrs	r2, r1, #20
    225a:	0028      	movs	r0, r5
    225c:	0512      	lsls	r2, r2, #20
    225e:	4d1c      	ldr	r5, [pc, #112]	; (22d0 <__aeabi_f2d+0x98>)
    2260:	4332      	orrs	r2, r6
    2262:	055b      	lsls	r3, r3, #21
    2264:	402a      	ands	r2, r5
    2266:	085b      	lsrs	r3, r3, #1
    2268:	4313      	orrs	r3, r2
    226a:	005b      	lsls	r3, r3, #1
    226c:	07e4      	lsls	r4, r4, #31
    226e:	085b      	lsrs	r3, r3, #1
    2270:	4323      	orrs	r3, r4
    2272:	0019      	movs	r1, r3
    2274:	bd70      	pop	{r4, r5, r6, pc}
    2276:	2900      	cmp	r1, #0
    2278:	d114      	bne.n	22a4 <__aeabi_f2d+0x6c>
    227a:	2d00      	cmp	r5, #0
    227c:	d01e      	beq.n	22bc <__aeabi_f2d+0x84>
    227e:	0028      	movs	r0, r5
    2280:	f000 f8b6 	bl	23f0 <__clzsi2>
    2284:	280a      	cmp	r0, #10
    2286:	dc1c      	bgt.n	22c2 <__aeabi_f2d+0x8a>
    2288:	230b      	movs	r3, #11
    228a:	002a      	movs	r2, r5
    228c:	1a1b      	subs	r3, r3, r0
    228e:	40da      	lsrs	r2, r3
    2290:	0003      	movs	r3, r0
    2292:	3315      	adds	r3, #21
    2294:	409d      	lsls	r5, r3
    2296:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <__aeabi_f2d+0x9c>)
    2298:	0312      	lsls	r2, r2, #12
    229a:	1a1b      	subs	r3, r3, r0
    229c:	055b      	lsls	r3, r3, #21
    229e:	0b16      	lsrs	r6, r2, #12
    22a0:	0d5b      	lsrs	r3, r3, #21
    22a2:	e7d8      	b.n	2256 <__aeabi_f2d+0x1e>
    22a4:	2d00      	cmp	r5, #0
    22a6:	d006      	beq.n	22b6 <__aeabi_f2d+0x7e>
    22a8:	0b32      	lsrs	r2, r6, #12
    22aa:	2680      	movs	r6, #128	; 0x80
    22ac:	0336      	lsls	r6, r6, #12
    22ae:	076d      	lsls	r5, r5, #29
    22b0:	4316      	orrs	r6, r2
    22b2:	4b09      	ldr	r3, [pc, #36]	; (22d8 <__aeabi_f2d+0xa0>)
    22b4:	e7cf      	b.n	2256 <__aeabi_f2d+0x1e>
    22b6:	4b08      	ldr	r3, [pc, #32]	; (22d8 <__aeabi_f2d+0xa0>)
    22b8:	2600      	movs	r6, #0
    22ba:	e7cc      	b.n	2256 <__aeabi_f2d+0x1e>
    22bc:	2300      	movs	r3, #0
    22be:	2600      	movs	r6, #0
    22c0:	e7c9      	b.n	2256 <__aeabi_f2d+0x1e>
    22c2:	0003      	movs	r3, r0
    22c4:	002a      	movs	r2, r5
    22c6:	3b0b      	subs	r3, #11
    22c8:	409a      	lsls	r2, r3
    22ca:	2500      	movs	r5, #0
    22cc:	e7e3      	b.n	2296 <__aeabi_f2d+0x5e>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	800fffff 	.word	0x800fffff
    22d4:	00000389 	.word	0x00000389
    22d8:	000007ff 	.word	0x000007ff

000022dc <__aeabi_d2f>:
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22de:	004c      	lsls	r4, r1, #1
    22e0:	0d64      	lsrs	r4, r4, #21
    22e2:	030b      	lsls	r3, r1, #12
    22e4:	1c62      	adds	r2, r4, #1
    22e6:	0f45      	lsrs	r5, r0, #29
    22e8:	0a5b      	lsrs	r3, r3, #9
    22ea:	0552      	lsls	r2, r2, #21
    22ec:	432b      	orrs	r3, r5
    22ee:	0fc9      	lsrs	r1, r1, #31
    22f0:	00c5      	lsls	r5, r0, #3
    22f2:	0d52      	lsrs	r2, r2, #21
    22f4:	2a01      	cmp	r2, #1
    22f6:	dd28      	ble.n	234a <__aeabi_d2f+0x6e>
    22f8:	4a3a      	ldr	r2, [pc, #232]	; (23e4 <__aeabi_d2f+0x108>)
    22fa:	18a6      	adds	r6, r4, r2
    22fc:	2efe      	cmp	r6, #254	; 0xfe
    22fe:	dc1b      	bgt.n	2338 <__aeabi_d2f+0x5c>
    2300:	2e00      	cmp	r6, #0
    2302:	dd3e      	ble.n	2382 <__aeabi_d2f+0xa6>
    2304:	0180      	lsls	r0, r0, #6
    2306:	0002      	movs	r2, r0
    2308:	1e50      	subs	r0, r2, #1
    230a:	4182      	sbcs	r2, r0
    230c:	0f6d      	lsrs	r5, r5, #29
    230e:	432a      	orrs	r2, r5
    2310:	00db      	lsls	r3, r3, #3
    2312:	4313      	orrs	r3, r2
    2314:	075a      	lsls	r2, r3, #29
    2316:	d004      	beq.n	2322 <__aeabi_d2f+0x46>
    2318:	220f      	movs	r2, #15
    231a:	401a      	ands	r2, r3
    231c:	2a04      	cmp	r2, #4
    231e:	d000      	beq.n	2322 <__aeabi_d2f+0x46>
    2320:	3304      	adds	r3, #4
    2322:	2280      	movs	r2, #128	; 0x80
    2324:	04d2      	lsls	r2, r2, #19
    2326:	401a      	ands	r2, r3
    2328:	d05a      	beq.n	23e0 <__aeabi_d2f+0x104>
    232a:	3601      	adds	r6, #1
    232c:	2eff      	cmp	r6, #255	; 0xff
    232e:	d003      	beq.n	2338 <__aeabi_d2f+0x5c>
    2330:	019b      	lsls	r3, r3, #6
    2332:	0a5b      	lsrs	r3, r3, #9
    2334:	b2f4      	uxtb	r4, r6
    2336:	e001      	b.n	233c <__aeabi_d2f+0x60>
    2338:	24ff      	movs	r4, #255	; 0xff
    233a:	2300      	movs	r3, #0
    233c:	0258      	lsls	r0, r3, #9
    233e:	05e4      	lsls	r4, r4, #23
    2340:	0a40      	lsrs	r0, r0, #9
    2342:	07c9      	lsls	r1, r1, #31
    2344:	4320      	orrs	r0, r4
    2346:	4308      	orrs	r0, r1
    2348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    234a:	2c00      	cmp	r4, #0
    234c:	d007      	beq.n	235e <__aeabi_d2f+0x82>
    234e:	431d      	orrs	r5, r3
    2350:	d0f2      	beq.n	2338 <__aeabi_d2f+0x5c>
    2352:	2080      	movs	r0, #128	; 0x80
    2354:	00db      	lsls	r3, r3, #3
    2356:	0480      	lsls	r0, r0, #18
    2358:	4303      	orrs	r3, r0
    235a:	26ff      	movs	r6, #255	; 0xff
    235c:	e7da      	b.n	2314 <__aeabi_d2f+0x38>
    235e:	432b      	orrs	r3, r5
    2360:	d003      	beq.n	236a <__aeabi_d2f+0x8e>
    2362:	2305      	movs	r3, #5
    2364:	08db      	lsrs	r3, r3, #3
    2366:	2cff      	cmp	r4, #255	; 0xff
    2368:	d003      	beq.n	2372 <__aeabi_d2f+0x96>
    236a:	025b      	lsls	r3, r3, #9
    236c:	0a5b      	lsrs	r3, r3, #9
    236e:	b2e4      	uxtb	r4, r4
    2370:	e7e4      	b.n	233c <__aeabi_d2f+0x60>
    2372:	2b00      	cmp	r3, #0
    2374:	d032      	beq.n	23dc <__aeabi_d2f+0x100>
    2376:	2080      	movs	r0, #128	; 0x80
    2378:	03c0      	lsls	r0, r0, #15
    237a:	4303      	orrs	r3, r0
    237c:	025b      	lsls	r3, r3, #9
    237e:	0a5b      	lsrs	r3, r3, #9
    2380:	e7dc      	b.n	233c <__aeabi_d2f+0x60>
    2382:	0032      	movs	r2, r6
    2384:	3217      	adds	r2, #23
    2386:	db14      	blt.n	23b2 <__aeabi_d2f+0xd6>
    2388:	2280      	movs	r2, #128	; 0x80
    238a:	271e      	movs	r7, #30
    238c:	0412      	lsls	r2, r2, #16
    238e:	4313      	orrs	r3, r2
    2390:	1bbf      	subs	r7, r7, r6
    2392:	2f1f      	cmp	r7, #31
    2394:	dc0f      	bgt.n	23b6 <__aeabi_d2f+0xda>
    2396:	4a14      	ldr	r2, [pc, #80]	; (23e8 <__aeabi_d2f+0x10c>)
    2398:	4694      	mov	ip, r2
    239a:	4464      	add	r4, ip
    239c:	002a      	movs	r2, r5
    239e:	40a5      	lsls	r5, r4
    23a0:	002e      	movs	r6, r5
    23a2:	40a3      	lsls	r3, r4
    23a4:	1e75      	subs	r5, r6, #1
    23a6:	41ae      	sbcs	r6, r5
    23a8:	40fa      	lsrs	r2, r7
    23aa:	4333      	orrs	r3, r6
    23ac:	4313      	orrs	r3, r2
    23ae:	2600      	movs	r6, #0
    23b0:	e7b0      	b.n	2314 <__aeabi_d2f+0x38>
    23b2:	2400      	movs	r4, #0
    23b4:	e7d5      	b.n	2362 <__aeabi_d2f+0x86>
    23b6:	2202      	movs	r2, #2
    23b8:	4252      	negs	r2, r2
    23ba:	1b96      	subs	r6, r2, r6
    23bc:	001a      	movs	r2, r3
    23be:	40f2      	lsrs	r2, r6
    23c0:	2f20      	cmp	r7, #32
    23c2:	d009      	beq.n	23d8 <__aeabi_d2f+0xfc>
    23c4:	4809      	ldr	r0, [pc, #36]	; (23ec <__aeabi_d2f+0x110>)
    23c6:	4684      	mov	ip, r0
    23c8:	4464      	add	r4, ip
    23ca:	40a3      	lsls	r3, r4
    23cc:	432b      	orrs	r3, r5
    23ce:	1e5d      	subs	r5, r3, #1
    23d0:	41ab      	sbcs	r3, r5
    23d2:	2600      	movs	r6, #0
    23d4:	4313      	orrs	r3, r2
    23d6:	e79d      	b.n	2314 <__aeabi_d2f+0x38>
    23d8:	2300      	movs	r3, #0
    23da:	e7f7      	b.n	23cc <__aeabi_d2f+0xf0>
    23dc:	2300      	movs	r3, #0
    23de:	e7ad      	b.n	233c <__aeabi_d2f+0x60>
    23e0:	0034      	movs	r4, r6
    23e2:	e7bf      	b.n	2364 <__aeabi_d2f+0x88>
    23e4:	fffffc80 	.word	0xfffffc80
    23e8:	fffffc82 	.word	0xfffffc82
    23ec:	fffffca2 	.word	0xfffffca2

000023f0 <__clzsi2>:
    23f0:	211c      	movs	r1, #28
    23f2:	2301      	movs	r3, #1
    23f4:	041b      	lsls	r3, r3, #16
    23f6:	4298      	cmp	r0, r3
    23f8:	d301      	bcc.n	23fe <__clzsi2+0xe>
    23fa:	0c00      	lsrs	r0, r0, #16
    23fc:	3910      	subs	r1, #16
    23fe:	0a1b      	lsrs	r3, r3, #8
    2400:	4298      	cmp	r0, r3
    2402:	d301      	bcc.n	2408 <__clzsi2+0x18>
    2404:	0a00      	lsrs	r0, r0, #8
    2406:	3908      	subs	r1, #8
    2408:	091b      	lsrs	r3, r3, #4
    240a:	4298      	cmp	r0, r3
    240c:	d301      	bcc.n	2412 <__clzsi2+0x22>
    240e:	0900      	lsrs	r0, r0, #4
    2410:	3904      	subs	r1, #4
    2412:	a202      	add	r2, pc, #8	; (adr r2, 241c <__clzsi2+0x2c>)
    2414:	5c10      	ldrb	r0, [r2, r0]
    2416:	1840      	adds	r0, r0, r1
    2418:	4770      	bx	lr
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	02020304 	.word	0x02020304
    2420:	01010101 	.word	0x01010101
	...

0000242c <__libc_init_array>:
    242c:	b570      	push	{r4, r5, r6, lr}
    242e:	4e0d      	ldr	r6, [pc, #52]	; (2464 <__libc_init_array+0x38>)
    2430:	4d0d      	ldr	r5, [pc, #52]	; (2468 <__libc_init_array+0x3c>)
    2432:	2400      	movs	r4, #0
    2434:	1bad      	subs	r5, r5, r6
    2436:	10ad      	asrs	r5, r5, #2
    2438:	d005      	beq.n	2446 <__libc_init_array+0x1a>
    243a:	00a3      	lsls	r3, r4, #2
    243c:	58f3      	ldr	r3, [r6, r3]
    243e:	3401      	adds	r4, #1
    2440:	4798      	blx	r3
    2442:	42a5      	cmp	r5, r4
    2444:	d1f9      	bne.n	243a <__libc_init_array+0xe>
    2446:	f000 f9cf 	bl	27e8 <_init>
    244a:	4e08      	ldr	r6, [pc, #32]	; (246c <__libc_init_array+0x40>)
    244c:	4d08      	ldr	r5, [pc, #32]	; (2470 <__libc_init_array+0x44>)
    244e:	2400      	movs	r4, #0
    2450:	1bad      	subs	r5, r5, r6
    2452:	10ad      	asrs	r5, r5, #2
    2454:	d005      	beq.n	2462 <__libc_init_array+0x36>
    2456:	00a3      	lsls	r3, r4, #2
    2458:	58f3      	ldr	r3, [r6, r3]
    245a:	3401      	adds	r4, #1
    245c:	4798      	blx	r3
    245e:	42a5      	cmp	r5, r4
    2460:	d1f9      	bne.n	2456 <__libc_init_array+0x2a>
    2462:	bd70      	pop	{r4, r5, r6, pc}
    2464:	000027f4 	.word	0x000027f4
    2468:	000027f4 	.word	0x000027f4
    246c:	000027f4 	.word	0x000027f4
    2470:	000027fc 	.word	0x000027fc

00002474 <memset>:
    2474:	b5f0      	push	{r4, r5, r6, r7, lr}
    2476:	0783      	lsls	r3, r0, #30
    2478:	d043      	beq.n	2502 <memset+0x8e>
    247a:	1e54      	subs	r4, r2, #1
    247c:	2a00      	cmp	r2, #0
    247e:	d03f      	beq.n	2500 <memset+0x8c>
    2480:	b2ce      	uxtb	r6, r1
    2482:	0002      	movs	r2, r0
    2484:	2503      	movs	r5, #3
    2486:	e002      	b.n	248e <memset+0x1a>
    2488:	001a      	movs	r2, r3
    248a:	3c01      	subs	r4, #1
    248c:	d338      	bcc.n	2500 <memset+0x8c>
    248e:	1c53      	adds	r3, r2, #1
    2490:	7016      	strb	r6, [r2, #0]
    2492:	422b      	tst	r3, r5
    2494:	d1f8      	bne.n	2488 <memset+0x14>
    2496:	2c03      	cmp	r4, #3
    2498:	d92a      	bls.n	24f0 <memset+0x7c>
    249a:	22ff      	movs	r2, #255	; 0xff
    249c:	400a      	ands	r2, r1
    249e:	0215      	lsls	r5, r2, #8
    24a0:	4315      	orrs	r5, r2
    24a2:	042a      	lsls	r2, r5, #16
    24a4:	4315      	orrs	r5, r2
    24a6:	2c0f      	cmp	r4, #15
    24a8:	d914      	bls.n	24d4 <memset+0x60>
    24aa:	0027      	movs	r7, r4
    24ac:	001a      	movs	r2, r3
    24ae:	3f10      	subs	r7, #16
    24b0:	093e      	lsrs	r6, r7, #4
    24b2:	3601      	adds	r6, #1
    24b4:	0136      	lsls	r6, r6, #4
    24b6:	199e      	adds	r6, r3, r6
    24b8:	6015      	str	r5, [r2, #0]
    24ba:	6055      	str	r5, [r2, #4]
    24bc:	6095      	str	r5, [r2, #8]
    24be:	60d5      	str	r5, [r2, #12]
    24c0:	3210      	adds	r2, #16
    24c2:	4296      	cmp	r6, r2
    24c4:	d1f8      	bne.n	24b8 <memset+0x44>
    24c6:	220f      	movs	r2, #15
    24c8:	4397      	bics	r7, r2
    24ca:	3710      	adds	r7, #16
    24cc:	19db      	adds	r3, r3, r7
    24ce:	4014      	ands	r4, r2
    24d0:	2c03      	cmp	r4, #3
    24d2:	d90d      	bls.n	24f0 <memset+0x7c>
    24d4:	001a      	movs	r2, r3
    24d6:	1f27      	subs	r7, r4, #4
    24d8:	08be      	lsrs	r6, r7, #2
    24da:	3601      	adds	r6, #1
    24dc:	00b6      	lsls	r6, r6, #2
    24de:	199e      	adds	r6, r3, r6
    24e0:	c220      	stmia	r2!, {r5}
    24e2:	42b2      	cmp	r2, r6
    24e4:	d1fc      	bne.n	24e0 <memset+0x6c>
    24e6:	2203      	movs	r2, #3
    24e8:	4397      	bics	r7, r2
    24ea:	3704      	adds	r7, #4
    24ec:	19db      	adds	r3, r3, r7
    24ee:	4014      	ands	r4, r2
    24f0:	2c00      	cmp	r4, #0
    24f2:	d005      	beq.n	2500 <memset+0x8c>
    24f4:	b2c9      	uxtb	r1, r1
    24f6:	191c      	adds	r4, r3, r4
    24f8:	7019      	strb	r1, [r3, #0]
    24fa:	3301      	adds	r3, #1
    24fc:	429c      	cmp	r4, r3
    24fe:	d1fb      	bne.n	24f8 <memset+0x84>
    2500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2502:	0014      	movs	r4, r2
    2504:	0003      	movs	r3, r0
    2506:	e7c6      	b.n	2496 <memset+0x22>

00002508 <register_fini>:
    2508:	4b03      	ldr	r3, [pc, #12]	; (2518 <register_fini+0x10>)
    250a:	b510      	push	{r4, lr}
    250c:	2b00      	cmp	r3, #0
    250e:	d002      	beq.n	2516 <register_fini+0xe>
    2510:	4802      	ldr	r0, [pc, #8]	; (251c <register_fini+0x14>)
    2512:	f000 f805 	bl	2520 <atexit>
    2516:	bd10      	pop	{r4, pc}
    2518:	00000000 	.word	0x00000000
    251c:	00002531 	.word	0x00002531

00002520 <atexit>:
    2520:	b510      	push	{r4, lr}
    2522:	0001      	movs	r1, r0
    2524:	2300      	movs	r3, #0
    2526:	2200      	movs	r2, #0
    2528:	2000      	movs	r0, #0
    252a:	f000 f81b 	bl	2564 <__register_exitproc>
    252e:	bd10      	pop	{r4, pc}

00002530 <__libc_fini_array>:
    2530:	b570      	push	{r4, r5, r6, lr}
    2532:	4b09      	ldr	r3, [pc, #36]	; (2558 <__libc_fini_array+0x28>)
    2534:	4c09      	ldr	r4, [pc, #36]	; (255c <__libc_fini_array+0x2c>)
    2536:	1ae4      	subs	r4, r4, r3
    2538:	10a4      	asrs	r4, r4, #2
    253a:	d009      	beq.n	2550 <__libc_fini_array+0x20>
    253c:	4a08      	ldr	r2, [pc, #32]	; (2560 <__libc_fini_array+0x30>)
    253e:	18a5      	adds	r5, r4, r2
    2540:	00ad      	lsls	r5, r5, #2
    2542:	18ed      	adds	r5, r5, r3
    2544:	682b      	ldr	r3, [r5, #0]
    2546:	3c01      	subs	r4, #1
    2548:	4798      	blx	r3
    254a:	3d04      	subs	r5, #4
    254c:	2c00      	cmp	r4, #0
    254e:	d1f9      	bne.n	2544 <__libc_fini_array+0x14>
    2550:	f000 f954 	bl	27fc <_fini>
    2554:	bd70      	pop	{r4, r5, r6, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	00002808 	.word	0x00002808
    255c:	0000280c 	.word	0x0000280c
    2560:	3fffffff 	.word	0x3fffffff

00002564 <__register_exitproc>:
    2564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2566:	46de      	mov	lr, fp
    2568:	469b      	mov	fp, r3
    256a:	4b31      	ldr	r3, [pc, #196]	; (2630 <__register_exitproc+0xcc>)
    256c:	4645      	mov	r5, r8
    256e:	681c      	ldr	r4, [r3, #0]
    2570:	23a4      	movs	r3, #164	; 0xa4
    2572:	464e      	mov	r6, r9
    2574:	4657      	mov	r7, sl
    2576:	005b      	lsls	r3, r3, #1
    2578:	b5e0      	push	{r5, r6, r7, lr}
    257a:	0005      	movs	r5, r0
    257c:	58e0      	ldr	r0, [r4, r3]
    257e:	000e      	movs	r6, r1
    2580:	4690      	mov	r8, r2
    2582:	2800      	cmp	r0, #0
    2584:	d04b      	beq.n	261e <__register_exitproc+0xba>
    2586:	6843      	ldr	r3, [r0, #4]
    2588:	2b1f      	cmp	r3, #31
    258a:	dc0d      	bgt.n	25a8 <__register_exitproc+0x44>
    258c:	1c5c      	adds	r4, r3, #1
    258e:	2d00      	cmp	r5, #0
    2590:	d121      	bne.n	25d6 <__register_exitproc+0x72>
    2592:	3302      	adds	r3, #2
    2594:	009b      	lsls	r3, r3, #2
    2596:	6044      	str	r4, [r0, #4]
    2598:	501e      	str	r6, [r3, r0]
    259a:	2000      	movs	r0, #0
    259c:	bc3c      	pop	{r2, r3, r4, r5}
    259e:	4690      	mov	r8, r2
    25a0:	4699      	mov	r9, r3
    25a2:	46a2      	mov	sl, r4
    25a4:	46ab      	mov	fp, r5
    25a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25a8:	4b22      	ldr	r3, [pc, #136]	; (2634 <__register_exitproc+0xd0>)
    25aa:	2b00      	cmp	r3, #0
    25ac:	d03c      	beq.n	2628 <__register_exitproc+0xc4>
    25ae:	20c8      	movs	r0, #200	; 0xc8
    25b0:	0040      	lsls	r0, r0, #1
    25b2:	e000      	b.n	25b6 <__register_exitproc+0x52>
    25b4:	bf00      	nop
    25b6:	2800      	cmp	r0, #0
    25b8:	d036      	beq.n	2628 <__register_exitproc+0xc4>
    25ba:	22a4      	movs	r2, #164	; 0xa4
    25bc:	2300      	movs	r3, #0
    25be:	0052      	lsls	r2, r2, #1
    25c0:	58a1      	ldr	r1, [r4, r2]
    25c2:	6043      	str	r3, [r0, #4]
    25c4:	6001      	str	r1, [r0, #0]
    25c6:	50a0      	str	r0, [r4, r2]
    25c8:	3240      	adds	r2, #64	; 0x40
    25ca:	5083      	str	r3, [r0, r2]
    25cc:	3204      	adds	r2, #4
    25ce:	5083      	str	r3, [r0, r2]
    25d0:	2401      	movs	r4, #1
    25d2:	2d00      	cmp	r5, #0
    25d4:	d0dd      	beq.n	2592 <__register_exitproc+0x2e>
    25d6:	009a      	lsls	r2, r3, #2
    25d8:	4691      	mov	r9, r2
    25da:	4481      	add	r9, r0
    25dc:	4642      	mov	r2, r8
    25de:	2188      	movs	r1, #136	; 0x88
    25e0:	464f      	mov	r7, r9
    25e2:	507a      	str	r2, [r7, r1]
    25e4:	22c4      	movs	r2, #196	; 0xc4
    25e6:	0052      	lsls	r2, r2, #1
    25e8:	4690      	mov	r8, r2
    25ea:	4480      	add	r8, r0
    25ec:	4642      	mov	r2, r8
    25ee:	3987      	subs	r1, #135	; 0x87
    25f0:	4099      	lsls	r1, r3
    25f2:	6812      	ldr	r2, [r2, #0]
    25f4:	468a      	mov	sl, r1
    25f6:	430a      	orrs	r2, r1
    25f8:	4694      	mov	ip, r2
    25fa:	4642      	mov	r2, r8
    25fc:	4661      	mov	r1, ip
    25fe:	6011      	str	r1, [r2, #0]
    2600:	2284      	movs	r2, #132	; 0x84
    2602:	4649      	mov	r1, r9
    2604:	465f      	mov	r7, fp
    2606:	0052      	lsls	r2, r2, #1
    2608:	508f      	str	r7, [r1, r2]
    260a:	2d02      	cmp	r5, #2
    260c:	d1c1      	bne.n	2592 <__register_exitproc+0x2e>
    260e:	0002      	movs	r2, r0
    2610:	4655      	mov	r5, sl
    2612:	328d      	adds	r2, #141	; 0x8d
    2614:	32ff      	adds	r2, #255	; 0xff
    2616:	6811      	ldr	r1, [r2, #0]
    2618:	430d      	orrs	r5, r1
    261a:	6015      	str	r5, [r2, #0]
    261c:	e7b9      	b.n	2592 <__register_exitproc+0x2e>
    261e:	0020      	movs	r0, r4
    2620:	304d      	adds	r0, #77	; 0x4d
    2622:	30ff      	adds	r0, #255	; 0xff
    2624:	50e0      	str	r0, [r4, r3]
    2626:	e7ae      	b.n	2586 <__register_exitproc+0x22>
    2628:	2001      	movs	r0, #1
    262a:	4240      	negs	r0, r0
    262c:	e7b6      	b.n	259c <__register_exitproc+0x38>
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	000027e4 	.word	0x000027e4
    2634:	00000000 	.word	0x00000000

00002638 <spi2MOSI>:
    2638:	0c000002 00000200                                .....

0000263d <spi2SCK>:
    263d:	0e000002 00000200                                .....

00002642 <spi2MISO>:
    2642:	0d000002 8d200000                                ......

00002648 <lookupTable.12443>:
    2648:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    2658:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    2668:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2678:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2688:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    2698:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    26a8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    26b8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    26c8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    26d8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    26e8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    26f8:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2708:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    2718:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    2728:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    2738:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    2748:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    2758:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    2768:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2778:	000f048e                                ....

0000277c <senseBatPin>:
    277c:	06000000 01000106                                .....

00002781 <senseAPin>:
    2781:	03010001 0100010b                                .....

00002786 <senseBPin>:
    2786:	02010001 0000000a                                .....

0000278b <senseCPin>:
    278b:	03000000 00000001                                .....

00002790 <senseDPin>:
    2790:	02000000 00000000                                .....

00002795 <analogAccelPin>:
    2795:	07000000 00000207                                .....

0000279a <spi2MOSI>:
    279a:	0c000002 00000200                                .....

0000279f <spi2SCK>:
    279f:	0e000002 001e3400 001cf400 001cf400     .....4..........
    27af:	001cf000 001e0c00 001e0c00 001dfe00     ................
    27bf:	001cf000 001e0c00 001dfe00 001e0c00     ................
    27cf:	001cf000 001e1400 001e1400 001e1400     ................
    27df:	00201800 00001000                                .. ..

000027e4 <_global_impure_ptr>:
    27e4:	20000010                                ... 

000027e8 <_init>:
    27e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27ee:	bc08      	pop	{r3}
    27f0:	469e      	mov	lr, r3
    27f2:	4770      	bx	lr

000027f4 <__init_array_start>:
    27f4:	00002509 	.word	0x00002509

000027f8 <__frame_dummy_init_array_entry>:
    27f8:	000000dd                                ....

000027fc <_fini>:
    27fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2802:	bc08      	pop	{r3}
    2804:	469e      	mov	lr, r3
    2806:	4770      	bx	lr

00002808 <__fini_array_start>:
    2808:	000000b5 	.word	0x000000b5
