
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002008  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002008  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  00002450  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  000025f0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   000119dc  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001571  00000000  00000000  00031e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001495  00000000  00000000  00033406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000248  00000000  00000000  0003489b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000280  00000000  00000000  00034ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013cfa  00000000  00000000  00034d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000053f2  00000000  00000000  00048a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071949  00000000  00000000  0004de4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000810  00000000  00000000  000bf798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e0 	.word	0x200025e0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002008 	.word	0x00002008

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002008 	.word	0x00002008
     10c:	00002008 	.word	0x00002008
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	00002008 	.word	0x00002008
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e0 	.word	0x200005e0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001bad 	.word	0x00001bad
     20c:	000003ed 	.word	0x000003ed

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b65      	ldr	r3, [pc, #404]	; (3c4 <init+0x1a4>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b65      	ldr	r3, [pc, #404]	; (3c8 <init+0x1a8>)
     234:	4798      	blx	r3
    delayInit();
     236:	4b65      	ldr	r3, [pc, #404]	; (3cc <init+0x1ac>)
     238:	4798      	blx	r3
    adcInit();
     23a:	4b65      	ldr	r3, [pc, #404]	; (3d0 <init+0x1b0>)
     23c:	4798      	blx	r3
    dmaInit();
     23e:	4b65      	ldr	r3, [pc, #404]	; (3d4 <init+0x1b4>)
     240:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     242:	4b65      	ldr	r3, [pc, #404]	; (3d8 <init+0x1b8>)
     244:	2240      	movs	r2, #64	; 0x40
     246:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     248:	21c1      	movs	r1, #193	; 0xc1
     24a:	0089      	lsls	r1, r1, #2
     24c:	5858      	ldr	r0, [r3, r1]
     24e:	4a63      	ldr	r2, [pc, #396]	; (3dc <init+0x1bc>)
     250:	4002      	ands	r2, r0
     252:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     254:	4b62      	ldr	r3, [pc, #392]	; (3e0 <init+0x1c0>)
     256:	2054      	movs	r0, #84	; 0x54
     258:	5c19      	ldrb	r1, [r3, r0]
     25a:	2201      	movs	r2, #1
     25c:	4391      	bics	r1, r2
     25e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     260:	2180      	movs	r1, #128	; 0x80
     262:	0349      	lsls	r1, r1, #13
     264:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     266:	2433      	movs	r4, #51	; 0x33
     268:	5d18      	ldrb	r0, [r3, r4]
     26a:	210f      	movs	r1, #15
     26c:	4689      	mov	r9, r1
     26e:	4388      	bics	r0, r1
     270:	2101      	movs	r1, #1
     272:	4308      	orrs	r0, r1
     274:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     276:	3413      	adds	r4, #19
     278:	5d18      	ldrb	r0, [r3, r4]
     27a:	4308      	orrs	r0, r1
     27c:	5518      	strb	r0, [r3, r4]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     27e:	3c12      	subs	r4, #18
     280:	5d18      	ldrb	r0, [r3, r4]
     282:	464d      	mov	r5, r9
     284:	43a8      	bics	r0, r5
     286:	4308      	orrs	r0, r1
     288:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     28a:	2048      	movs	r0, #72	; 0x48
     28c:	5c1d      	ldrb	r5, [r3, r0]
     28e:	430d      	orrs	r5, r1
     290:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     292:	2658      	movs	r6, #88	; 0x58
     294:	5d9d      	ldrb	r5, [r3, r6]
     296:	4395      	bics	r5, r2
     298:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     29a:	2580      	movs	r5, #128	; 0x80
     29c:	046d      	lsls	r5, r5, #17
     29e:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a0:	615d      	str	r5, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a2:	5c1d      	ldrb	r5, [r3, r0]
     2a4:	4395      	bics	r5, r2
     2a6:	541d      	strb	r5, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2a8:	2580      	movs	r5, #128	; 0x80
     2aa:	006d      	lsls	r5, r5, #1
     2ac:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2ae:	3db7      	subs	r5, #183	; 0xb7
     2b0:	46ac      	mov	ip, r5
     2b2:	5d5d      	ldrb	r5, [r3, r5]
     2b4:	4395      	bics	r5, r2
     2b6:	4666      	mov	r6, ip
     2b8:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ba:	2580      	movs	r5, #128	; 0x80
     2bc:	00ad      	lsls	r5, r5, #2
     2be:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2c0:	3db6      	subs	r5, #182	; 0xb6
     2c2:	3dff      	subs	r5, #255	; 0xff
     2c4:	5d5e      	ldrb	r6, [r3, r5]
     2c6:	4396      	bics	r6, r2
     2c8:	555e      	strb	r6, [r3, r5]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2ca:	5d5f      	ldrb	r7, [r3, r5]
     2cc:	2602      	movs	r6, #2
     2ce:	4337      	orrs	r7, r6
     2d0:	555f      	strb	r7, [r3, r5]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2d2:	2780      	movs	r7, #128	; 0x80
     2d4:	013f      	lsls	r7, r7, #4
     2d6:	605f      	str	r7, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d8:	2735      	movs	r7, #53	; 0x35
     2da:	46bb      	mov	fp, r7
     2dc:	5ddf      	ldrb	r7, [r3, r7]
     2de:	360d      	adds	r6, #13
     2e0:	46b2      	mov	sl, r6
     2e2:	4037      	ands	r7, r6
     2e4:	2620      	movs	r6, #32
     2e6:	46b0      	mov	r8, r6
     2e8:	4646      	mov	r6, r8
     2ea:	4337      	orrs	r7, r6
     2ec:	465e      	mov	r6, fp
     2ee:	559f      	strb	r7, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f0:	5d5f      	ldrb	r7, [r3, r5]
     2f2:	430f      	orrs	r7, r1
     2f4:	555f      	strb	r7, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2f6:	5d1d      	ldrb	r5, [r3, r4]
     2f8:	4656      	mov	r6, sl
     2fa:	4035      	ands	r5, r6
     2fc:	4646      	mov	r6, r8
     2fe:	4335      	orrs	r5, r6
     300:	551d      	strb	r5, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     302:	4665      	mov	r5, ip
     304:	5d5d      	ldrb	r5, [r3, r5]
     306:	430d      	orrs	r5, r1
     308:	4666      	mov	r6, ip
     30a:	559d      	strb	r5, [r3, r6]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     30c:	5d1d      	ldrb	r5, [r3, r4]
     30e:	464e      	mov	r6, r9
     310:	43b5      	bics	r5, r6
     312:	3e0d      	subs	r6, #13
     314:	4335      	orrs	r5, r6
     316:	551d      	strb	r5, [r3, r4]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     318:	5c1c      	ldrb	r4, [r3, r0]
     31a:	4321      	orrs	r1, r4
     31c:	5419      	strb	r1, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     31e:	3082      	adds	r0, #130	; 0x82
     320:	5c19      	ldrb	r1, [r3, r0]
     322:	4391      	bics	r1, r2
     324:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     326:	2180      	movs	r1, #128	; 0x80
     328:	00c9      	lsls	r1, r1, #3
     32a:	3842      	subs	r0, #66	; 0x42
     32c:	5019      	str	r1, [r3, r0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32e:	3010      	adds	r0, #16
     330:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     332:	244a      	movs	r4, #74	; 0x4a
     334:	5d18      	ldrb	r0, [r3, r4]
     336:	4390      	bics	r0, r2
     338:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     33a:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     33c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     33e:	204c      	movs	r0, #76	; 0x4c
     340:	5c19      	ldrb	r1, [r3, r0]
     342:	4391      	bics	r1, r2
     344:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     346:	2180      	movs	r1, #128	; 0x80
     348:	0149      	lsls	r1, r1, #5
     34a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     34c:	3002      	adds	r0, #2
     34e:	5c19      	ldrb	r1, [r3, r0]
     350:	4391      	bics	r1, r2
     352:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     354:	2180      	movs	r1, #128	; 0x80
     356:	01c9      	lsls	r1, r1, #7
     358:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     35a:	214d      	movs	r1, #77	; 0x4d
     35c:	5c58      	ldrb	r0, [r3, r1]
     35e:	4390      	bics	r0, r2
     360:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     362:	5c58      	ldrb	r0, [r3, r1]
     364:	4306      	orrs	r6, r0
     366:	545e      	strb	r6, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     368:	2180      	movs	r1, #128	; 0x80
     36a:	0189      	lsls	r1, r1, #6
     36c:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     36e:	214f      	movs	r1, #79	; 0x4f
     370:	5c58      	ldrb	r0, [r3, r1]
     372:	4390      	bics	r0, r2
     374:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     376:	2080      	movs	r0, #128	; 0x80
     378:	0200      	lsls	r0, r0, #8
     37a:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     37c:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     37e:	5c58      	ldrb	r0, [r3, r1]
     380:	4390      	bics	r0, r2
     382:	5458      	strb	r0, [r3, r1]
     384:	3107      	adds	r1, #7
     386:	5c58      	ldrb	r0, [r3, r1]
     388:	4390      	bics	r0, r2
     38a:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     38c:	2280      	movs	r2, #128	; 0x80
     38e:	03d2      	lsls	r2, r2, #15
     390:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     392:	5c58      	ldrb	r0, [r3, r1]
     394:	2240      	movs	r2, #64	; 0x40
     396:	4302      	orrs	r2, r0
     398:	545a      	strb	r2, [r3, r1]
    pinCfg(buzzerPin);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 32);
     39a:	2220      	movs	r2, #32
     39c:	3953      	subs	r1, #83	; 0x53
     39e:	2000      	movs	r0, #0
     3a0:	4b10      	ldr	r3, [pc, #64]	; (3e4 <init+0x1c4>)
     3a2:	4798      	blx	r3
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     3a4:	2300      	movs	r3, #0
     3a6:	9301      	str	r3, [sp, #4]
     3a8:	9300      	str	r3, [sp, #0]
     3aa:	2200      	movs	r2, #0
     3ac:	2103      	movs	r1, #3
     3ae:	2000      	movs	r0, #0
     3b0:	4c0d      	ldr	r4, [pc, #52]	; (3e8 <init+0x1c8>)
     3b2:	47a0      	blx	r4

}
     3b4:	b003      	add	sp, #12
     3b6:	bc3c      	pop	{r2, r3, r4, r5}
     3b8:	4690      	mov	r8, r2
     3ba:	4699      	mov	r9, r3
     3bc:	46a2      	mov	sl, r4
     3be:	46ab      	mov	fp, r5
     3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	00000211 	.word	0x00000211
     3c8:	0000070d 	.word	0x0000070d
     3cc:	000007dd 	.word	0x000007dd
     3d0:	00000565 	.word	0x00000565
     3d4:	00000855 	.word	0x00000855
     3d8:	e000e100 	.word	0xe000e100
     3dc:	ff00ffff 	.word	0xff00ffff
     3e0:	41004400 	.word	0x41004400
     3e4:	00000cb9 	.word	0x00000cb9
     3e8:	00000d21 	.word	0x00000d21

000003ec <main>:


int main(void) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ee:	b0a5      	sub	sp, #148	; 0x94

    init();
     3f0:	4b49      	ldr	r3, [pc, #292]	; (518 <main+0x12c>)
     3f2:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     3f4:	a809      	add	r0, sp, #36	; 0x24
     3f6:	4b49      	ldr	r3, [pc, #292]	; (51c <main+0x130>)
     3f8:	4798      	blx	r3


    volatile long counter = 0;
     3fa:	2300      	movs	r3, #0
     3fc:	9308      	str	r3, [sp, #32]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3fe:	4c48      	ldr	r4, [pc, #288]	; (520 <main+0x134>)
     400:	2580      	movs	r5, #128	; 0x80
     402:	00ed      	lsls	r5, r5, #3
     404:	3394      	adds	r3, #148	; 0x94
     406:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x0F);
     408:	218f      	movs	r1, #143	; 0x8f
     40a:	2000      	movs	r0, #0
     40c:	4e45      	ldr	r6, [pc, #276]	; (524 <main+0x138>)
     40e:	47b0      	blx	r6
    volatile u8_t _byte1 = spiDataTransfer(SPI0,dummy_Tx);
     410:	21ff      	movs	r1, #255	; 0xff
     412:	2000      	movs	r0, #0
     414:	47b0      	blx	r6
     416:	230f      	movs	r3, #15
     418:	446b      	add	r3, sp
     41a:	7018      	strb	r0, [r3, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     41c:	2398      	movs	r3, #152	; 0x98
     41e:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

    delay_ms(300);
     420:	2096      	movs	r0, #150	; 0x96
     422:	0040      	lsls	r0, r0, #1
     424:	4b40      	ldr	r3, [pc, #256]	; (528 <main+0x13c>)
     426:	4798      	blx	r3
    volatile int16_t accelZ;
	


    while (1) {
        counter++;
     428:	9b08      	ldr	r3, [sp, #32]
     42a:	3301      	adds	r3, #1
     42c:	9308      	str	r3, [sp, #32]
        sampleTick(&my_altimeter);
     42e:	a809      	add	r0, sp, #36	; 0x24
     430:	4b3e      	ldr	r3, [pc, #248]	; (52c <main+0x140>)
     432:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     434:	4d3a      	ldr	r5, [pc, #232]	; (520 <main+0x134>)
     436:	2680      	movs	r6, #128	; 0x80
     438:	00f6      	lsls	r6, r6, #3
     43a:	2394      	movs	r3, #148	; 0x94
     43c:	50ee      	str	r6, [r5, r3]




        pinLow(cs_accel);
        dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x06);
     43e:	2186      	movs	r1, #134	; 0x86
     440:	2000      	movs	r0, #0
     442:	4f38      	ldr	r7, [pc, #224]	; (524 <main+0x138>)
     444:	47b8      	blx	r7
        volatile u8_t _byte1 = spiDataTransfer(SPI0,dummy_Tx);
     446:	21ff      	movs	r1, #255	; 0xff
     448:	2000      	movs	r0, #0
     44a:	47b8      	blx	r7
     44c:	466b      	mov	r3, sp
     44e:	1d9c      	adds	r4, r3, #6
     450:	7198      	strb	r0, [r3, #6]
        volatile u8_t _byte2 = spiDataTransfer(SPI0,dummy_Tx);
     452:	21ff      	movs	r1, #255	; 0xff
     454:	2000      	movs	r0, #0
     456:	47b8      	blx	r7
     458:	466b      	mov	r3, sp
     45a:	1dda      	adds	r2, r3, #7
     45c:	71d8      	strb	r0, [r3, #7]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     45e:	2398      	movs	r3, #152	; 0x98
     460:	50ee      	str	r6, [r5, r3]
        pinHigh(cs_accel);

        bool negativeZ = (_byte2 & (1<<7)) != 0;
     462:	7813      	ldrb	r3, [r2, #0]
     464:	b2d9      	uxtb	r1, r3

        accelZ = (_byte2 << 8) | _byte1;
     466:	7813      	ldrb	r3, [r2, #0]
     468:	7820      	ldrb	r0, [r4, #0]
     46a:	021b      	lsls	r3, r3, #8
     46c:	4303      	orrs	r3, r0
     46e:	b21b      	sxth	r3, r3
     470:	a803      	add	r0, sp, #12
     472:	8003      	strh	r3, [r0, #0]

        if (_byte2 != 1) {
     474:	7813      	ldrb	r3, [r2, #0]
     476:	2b01      	cmp	r3, #1
     478:	d00f      	beq.n	49a <main+0xae>
            if (negativeZ) {
     47a:	b24b      	sxtb	r3, r1
     47c:	2b00      	cmp	r3, #0
     47e:	da07      	bge.n	490 <main+0xa4>
				
                accelZ = accelZ | ~((1 << 16) - 1);
     480:	8803      	ldrh	r3, [r0, #0]
     482:	b21b      	sxth	r3, r3
     484:	8003      	strh	r3, [r0, #0]
                accelZ = accelZ >> 4;
     486:	8803      	ldrh	r3, [r0, #0]
     488:	b21b      	sxth	r3, r3
     48a:	111b      	asrs	r3, r3, #4
     48c:	8003      	strh	r3, [r0, #0]
     48e:	e004      	b.n	49a <main+0xae>

            } else {
                accelZ = accelZ >> 4;
     490:	aa03      	add	r2, sp, #12
     492:	8813      	ldrh	r3, [r2, #0]
     494:	b21b      	sxth	r3, r3
     496:	111b      	asrs	r3, r3, #4
     498:	8013      	strh	r3, [r2, #0]
            }
        }

        volatile float accelZF = accelZ * .000976;
     49a:	ab03      	add	r3, sp, #12
     49c:	8818      	ldrh	r0, [r3, #0]
     49e:	b200      	sxth	r0, r0
     4a0:	4e23      	ldr	r6, [pc, #140]	; (530 <main+0x144>)
     4a2:	47b0      	blx	r6
     4a4:	4d23      	ldr	r5, [pc, #140]	; (534 <main+0x148>)
     4a6:	4a24      	ldr	r2, [pc, #144]	; (538 <main+0x14c>)
     4a8:	4b24      	ldr	r3, [pc, #144]	; (53c <main+0x150>)
     4aa:	47a8      	blx	r5
     4ac:	4c24      	ldr	r4, [pc, #144]	; (540 <main+0x154>)
     4ae:	47a0      	blx	r4
     4b0:	9002      	str	r0, [sp, #8]



        analogSample = adc_read(analogAccelPin);
     4b2:	4b24      	ldr	r3, [pc, #144]	; (544 <main+0x158>)
     4b4:	6818      	ldr	r0, [r3, #0]
     4b6:	6859      	ldr	r1, [r3, #4]
     4b8:	4b23      	ldr	r3, [pc, #140]	; (548 <main+0x15c>)
     4ba:	4798      	blx	r3
     4bc:	2316      	movs	r3, #22
     4be:	446b      	add	r3, sp
     4c0:	8018      	strh	r0, [r3, #0]
        accelX = (analogSample - 3878) * -0.0227;
     4c2:	8818      	ldrh	r0, [r3, #0]
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <main+0x160>)
     4c6:	469c      	mov	ip, r3
     4c8:	4460      	add	r0, ip
     4ca:	47b0      	blx	r6
     4cc:	4a20      	ldr	r2, [pc, #128]	; (550 <main+0x164>)
     4ce:	4b21      	ldr	r3, [pc, #132]	; (554 <main+0x168>)
     4d0:	47a8      	blx	r5
     4d2:	47a0      	blx	r4
     4d4:	9004      	str	r0, [sp, #16]

        averageAccel = averageAccel + accelX;
     4d6:	9807      	ldr	r0, [sp, #28]
     4d8:	9904      	ldr	r1, [sp, #16]
     4da:	4c1f      	ldr	r4, [pc, #124]	; (558 <main+0x16c>)
     4dc:	47a0      	blx	r4
     4de:	9007      	str	r0, [sp, #28]
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     4e0:	9806      	ldr	r0, [sp, #24]
     4e2:	9912      	ldr	r1, [sp, #72]	; 0x48
     4e4:	47a0      	blx	r4
     4e6:	9006      	str	r0, [sp, #24]

        if (counter == 100) {
     4e8:	9b08      	ldr	r3, [sp, #32]
     4ea:	2b64      	cmp	r3, #100	; 0x64
     4ec:	d19c      	bne.n	428 <main+0x3c>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     4ee:	2280      	movs	r2, #128	; 0x80
     4f0:	0352      	lsls	r2, r2, #13
     4f2:	4b0b      	ldr	r3, [pc, #44]	; (520 <main+0x134>)
     4f4:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);

            averageAccel = averageAccel / 100;
     4f6:	9807      	ldr	r0, [sp, #28]
     4f8:	4c18      	ldr	r4, [pc, #96]	; (55c <main+0x170>)
     4fa:	4919      	ldr	r1, [pc, #100]	; (560 <main+0x174>)
     4fc:	47a0      	blx	r4
     4fe:	9007      	str	r0, [sp, #28]
            averageAlt = averageAlt / 100;
     500:	9806      	ldr	r0, [sp, #24]
     502:	4917      	ldr	r1, [pc, #92]	; (560 <main+0x174>)
     504:	47a0      	blx	r4
     506:	9006      	str	r0, [sp, #24]
            counter = -1;
     508:	2301      	movs	r3, #1
     50a:	425b      	negs	r3, r3
     50c:	9308      	str	r3, [sp, #32]

            averageAccel = 0;
     50e:	2300      	movs	r3, #0
     510:	9307      	str	r3, [sp, #28]
            averageAlt = 0;
     512:	9306      	str	r3, [sp, #24]
     514:	e788      	b.n	428 <main+0x3c>
     516:	46c0      	nop			; (mov r8, r8)
     518:	00000221 	.word	0x00000221
     51c:	00000b19 	.word	0x00000b19
     520:	41004400 	.word	0x41004400
     524:	00000d99 	.word	0x00000d99
     528:	00000829 	.word	0x00000829
     52c:	00000b85 	.word	0x00000b85
     530:	0000192d 	.word	0x0000192d
     534:	00001439 	.word	0x00001439
     538:	0a5accd5 	.word	0x0a5accd5
     53c:	3f4ffb48 	.word	0x3f4ffb48
     540:	00001a59 	.word	0x00001a59
     544:	00001db0 	.word	0x00001db0
     548:	000005e5 	.word	0x000005e5
     54c:	fffff0da 	.word	0xfffff0da
     550:	367a0f91 	.word	0x367a0f91
     554:	bf973eab 	.word	0xbf973eab
     558:	00000e0d 	.word	0x00000e0d
     55c:	000010f9 	.word	0x000010f9
     560:	42c80000 	.word	0x42c80000

00000564 <adcInit>:


#include <util.h>

void adcInit() {
     564:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     566:	4a12      	ldr	r2, [pc, #72]	; (5b0 <adcInit+0x4c>)
     568:	6a13      	ldr	r3, [r2, #32]
     56a:	2180      	movs	r1, #128	; 0x80
     56c:	0249      	lsls	r1, r1, #9
     56e:	430b      	orrs	r3, r1
     570:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     572:	4910      	ldr	r1, [pc, #64]	; (5b4 <adcInit+0x50>)
     574:	22e0      	movs	r2, #224	; 0xe0
     576:	00d2      	lsls	r2, r2, #3
     578:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     57a:	480f      	ldr	r0, [pc, #60]	; (5b8 <adcInit+0x54>)
     57c:	4b0f      	ldr	r3, [pc, #60]	; (5bc <adcInit+0x58>)
     57e:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     580:	4b0f      	ldr	r3, [pc, #60]	; (5c0 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     582:	681b      	ldr	r3, [r3, #0]
     584:	015b      	lsls	r3, r3, #5
     586:	4013      	ands	r3, r2
     588:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     58a:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     58c:	685a      	ldr	r2, [r3, #4]
     58e:	0154      	lsls	r4, r2, #5
     590:	681a      	ldr	r2, [r3, #0]
     592:	0ed3      	lsrs	r3, r2, #27
     594:	4323      	orrs	r3, r4
     596:	22ff      	movs	r2, #255	; 0xff
     598:	4013      	ands	r3, r2
     59a:	4303      	orrs	r3, r0
     59c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     59e:	2302      	movs	r3, #2
     5a0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     5a2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     5a4:	000a      	movs	r2, r1
     5a6:	7e53      	ldrb	r3, [r2, #25]
     5a8:	b25b      	sxtb	r3, r3
     5aa:	2b00      	cmp	r3, #0
     5ac:	dbfb      	blt.n	5a6 <adcInit+0x42>
}
     5ae:	bd10      	pop	{r4, pc}
     5b0:	40000400 	.word	0x40000400
     5b4:	42004000 	.word	0x42004000
     5b8:	0000401e 	.word	0x0000401e
     5bc:	40000c00 	.word	0x40000c00
     5c0:	00806024 	.word	0x00806024
     5c4:	00806020 	.word	0x00806020

000005c8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     5c8:	2202      	movs	r2, #2
     5ca:	4b05      	ldr	r3, [pc, #20]	; (5e0 <adcSample+0x18>)
     5cc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     5ce:	0019      	movs	r1, r3
     5d0:	3a01      	subs	r2, #1
     5d2:	7e0b      	ldrb	r3, [r1, #24]
     5d4:	4213      	tst	r3, r2
     5d6:	d0fc      	beq.n	5d2 <adcSample+0xa>
    return ADC->RESULT.reg;
     5d8:	4b01      	ldr	r3, [pc, #4]	; (5e0 <adcSample+0x18>)
     5da:	8b58      	ldrh	r0, [r3, #26]
     5dc:	b280      	uxth	r0, r0
}
     5de:	4770      	bx	lr
     5e0:	42004000 	.word	0x42004000

000005e4 <adc_read>:


u16_t adc_read(Pin p) {
     5e4:	b530      	push	{r4, r5, lr}
     5e6:	b083      	sub	sp, #12
     5e8:	0c03      	lsrs	r3, r0, #16
     5ea:	0002      	movs	r2, r0
     5ec:	9000      	str	r0, [sp, #0]
     5ee:	9101      	str	r1, [sp, #4]
     5f0:	b2c9      	uxtb	r1, r1
     5f2:	b2db      	uxtb	r3, r3
     5f4:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     5f6:	07c2      	lsls	r2, r0, #31
     5f8:	d50c      	bpl.n	614 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5fa:	0842      	lsrs	r2, r0, #1
     5fc:	01dc      	lsls	r4, r3, #7
     5fe:	1912      	adds	r2, r2, r4
     600:	4c14      	ldr	r4, [pc, #80]	; (654 <adc_read+0x70>)
     602:	46a4      	mov	ip, r4
     604:	4462      	add	r2, ip
     606:	7814      	ldrb	r4, [r2, #0]
     608:	250f      	movs	r5, #15
     60a:	402c      	ands	r4, r5
     60c:	2510      	movs	r5, #16
     60e:	432c      	orrs	r4, r5
     610:	7014      	strb	r4, [r2, #0]
     612:	e00b      	b.n	62c <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     614:	0842      	lsrs	r2, r0, #1
     616:	01dc      	lsls	r4, r3, #7
     618:	1912      	adds	r2, r2, r4
     61a:	4c0e      	ldr	r4, [pc, #56]	; (654 <adc_read+0x70>)
     61c:	46a4      	mov	ip, r4
     61e:	4462      	add	r2, ip
     620:	7814      	ldrb	r4, [r2, #0]
     622:	250f      	movs	r5, #15
     624:	43ac      	bics	r4, r5
     626:	2501      	movs	r5, #1
     628:	432c      	orrs	r4, r5
     62a:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     62c:	01db      	lsls	r3, r3, #7
     62e:	18c0      	adds	r0, r0, r3
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <adc_read+0x74>)
     632:	469c      	mov	ip, r3
     634:	4460      	add	r0, ip
     636:	7802      	ldrb	r2, [r0, #0]
     638:	2301      	movs	r3, #1
     63a:	4313      	orrs	r3, r2
     63c:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     63e:	231f      	movs	r3, #31
     640:	4019      	ands	r1, r3
     642:	23c0      	movs	r3, #192	; 0xc0
     644:	015b      	lsls	r3, r3, #5
     646:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     648:	4b04      	ldr	r3, [pc, #16]	; (65c <adc_read+0x78>)
     64a:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     64c:	4b04      	ldr	r3, [pc, #16]	; (660 <adc_read+0x7c>)
     64e:	4798      	blx	r3
     650:	b003      	add	sp, #12
     652:	bd30      	pop	{r4, r5, pc}
     654:	41004430 	.word	0x41004430
     658:	41004440 	.word	0x41004440
     65c:	42004000 	.word	0x42004000
     660:	000005c9 	.word	0x000005c9

00000664 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	b085      	sub	sp, #20
     668:	0c03      	lsrs	r3, r0, #16
     66a:	0c14      	lsrs	r4, r2, #16
     66c:	a90a      	add	r1, sp, #40	; 0x28
     66e:	7809      	ldrb	r1, [r1, #0]
     670:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     672:	b2dc      	uxtb	r4, r3
     674:	0e00      	lsrs	r0, r0, #24
     676:	2701      	movs	r7, #1
     678:	003d      	movs	r5, r7
     67a:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     67c:	0e12      	lsrs	r2, r2, #24
     67e:	4097      	lsls	r7, r2
     680:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     682:	01e0      	lsls	r0, r4, #7
     684:	4a0a      	ldr	r2, [pc, #40]	; (6b0 <byteOut+0x4c>)
     686:	4694      	mov	ip, r2
     688:	4460      	add	r0, ip
     68a:	01f4      	lsls	r4, r6, #7
     68c:	4464      	add	r4, ip
     68e:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     690:	b24a      	sxtb	r2, r1
     692:	2a00      	cmp	r2, #0
     694:	da01      	bge.n	69a <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     696:	61a7      	str	r7, [r4, #24]
     698:	e000      	b.n	69c <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69a:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     69c:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     69e:	0049      	lsls	r1, r1, #1
     6a0:	b2c9      	uxtb	r1, r1
     6a2:	3b01      	subs	r3, #1
     6a4:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     6a6:	2b00      	cmp	r3, #0
     6a8:	d1f1      	bne.n	68e <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     6aa:	b005      	add	sp, #20
     6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	41004400 	.word	0x41004400

000006b4 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	b085      	sub	sp, #20
     6b8:	0c04      	lsrs	r4, r0, #16
     6ba:	9002      	str	r0, [sp, #8]
     6bc:	9103      	str	r1, [sp, #12]
     6be:	0c11      	lsrs	r1, r2, #16
     6c0:	0017      	movs	r7, r2
     6c2:	9200      	str	r2, [sp, #0]
     6c4:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6c6:	b2e4      	uxtb	r4, r4
     6c8:	0e05      	lsrs	r5, r0, #24
     6ca:	2601      	movs	r6, #1
     6cc:	0033      	movs	r3, r6
     6ce:	40ab      	lsls	r3, r5
     6d0:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6d2:	b2ca      	uxtb	r2, r1
     6d4:	0e3f      	lsrs	r7, r7, #24
     6d6:	40be      	lsls	r6, r7
     6d8:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     6da:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6dc:	01e4      	lsls	r4, r4, #7
     6de:	4b0a      	ldr	r3, [pc, #40]	; (708 <byteIn+0x54>)
     6e0:	469c      	mov	ip, r3
     6e2:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6e4:	01d2      	lsls	r2, r2, #7
     6e6:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e8:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6ea:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     6ec:	4033      	ands	r3, r6
     6ee:	1e5f      	subs	r7, r3, #1
     6f0:	41bb      	sbcs	r3, r7
     6f2:	0040      	lsls	r0, r0, #1
     6f4:	4303      	orrs	r3, r0
     6f6:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6f8:	61a5      	str	r5, [r4, #24]
     6fa:	3901      	subs	r1, #1
     6fc:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     6fe:	2900      	cmp	r1, #0
     700:	d1f2      	bne.n	6e8 <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     702:	b005      	add	sp, #20
     704:	bdf0      	pop	{r4, r5, r6, r7, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	41004400 	.word	0x41004400

0000070c <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     70c:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     70e:	4a1c      	ldr	r2, [pc, #112]	; (780 <GclkInit+0x74>)
     710:	23c2      	movs	r3, #194	; 0xc2
     712:	00db      	lsls	r3, r3, #3
     714:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     716:	491b      	ldr	r1, [pc, #108]	; (784 <GclkInit+0x78>)
     718:	6848      	ldr	r0, [r1, #4]
     71a:	2302      	movs	r3, #2
     71c:	4303      	orrs	r3, r0
     71e:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     720:	4b19      	ldr	r3, [pc, #100]	; (788 <GclkInit+0x7c>)
     722:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     724:	0011      	movs	r1, r2
     726:	2202      	movs	r2, #2
     728:	68cb      	ldr	r3, [r1, #12]
     72a:	421a      	tst	r2, r3
     72c:	d0fc      	beq.n	728 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     72e:	4b17      	ldr	r3, [pc, #92]	; (78c <GclkInit+0x80>)
     730:	681c      	ldr	r4, [r3, #0]
     732:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     734:	2c3f      	cmp	r4, #63	; 0x3f
     736:	d100      	bne.n	73a <GclkInit+0x2e>
        coarse = 0x1f;
     738:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     73a:	4b15      	ldr	r3, [pc, #84]	; (790 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     73c:	6818      	ldr	r0, [r3, #0]
     73e:	0580      	lsls	r0, r0, #22
     740:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     742:	4b14      	ldr	r3, [pc, #80]	; (794 <GclkInit+0x88>)
     744:	4298      	cmp	r0, r3
     746:	d100      	bne.n	74a <GclkInit+0x3e>
        fine = 0x1ff;
     748:	4813      	ldr	r0, [pc, #76]	; (798 <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     74a:	4a14      	ldr	r2, [pc, #80]	; (79c <GclkInit+0x90>)
     74c:	4b0c      	ldr	r3, [pc, #48]	; (780 <GclkInit+0x74>)
     74e:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     750:	0019      	movs	r1, r3
     752:	2210      	movs	r2, #16
     754:	68cb      	ldr	r3, [r1, #12]
     756:	421a      	tst	r2, r3
     758:	d0fc      	beq.n	754 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     75a:	02a4      	lsls	r4, r4, #10
     75c:	4320      	orrs	r0, r4
     75e:	4b08      	ldr	r3, [pc, #32]	; (780 <GclkInit+0x74>)
     760:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     762:	0019      	movs	r1, r3
     764:	2210      	movs	r2, #16
     766:	68cb      	ldr	r3, [r1, #12]
     768:	421a      	tst	r2, r3
     76a:	d0fc      	beq.n	766 <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     76c:	4a0c      	ldr	r2, [pc, #48]	; (7a0 <GclkInit+0x94>)
     76e:	4b04      	ldr	r3, [pc, #16]	; (780 <GclkInit+0x74>)
     770:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     772:	4b0c      	ldr	r3, [pc, #48]	; (7a4 <GclkInit+0x98>)
     774:	2280      	movs	r2, #128	; 0x80
     776:	0052      	lsls	r2, r2, #1
     778:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     77a:	4a0b      	ldr	r2, [pc, #44]	; (7a8 <GclkInit+0x9c>)
     77c:	605a      	str	r2, [r3, #4]
}
     77e:	bd10      	pop	{r4, pc}
     780:	40000800 	.word	0x40000800
     784:	41004000 	.word	0x41004000
     788:	0000060e 	.word	0x0000060e
     78c:	00806024 	.word	0x00806024
     790:	00806028 	.word	0x00806028
     794:	000003ff 	.word	0x000003ff
     798:	000001ff 	.word	0x000001ff
     79c:	00000522 	.word	0x00000522
     7a0:	000005a2 	.word	0x000005a2
     7a4:	40000c00 	.word	0x40000c00
     7a8:	00010700 	.word	0x00010700

000007ac <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     7ac:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     7ae:	230f      	movs	r3, #15
     7b0:	4018      	ands	r0, r3
     7b2:	0212      	lsls	r2, r2, #8
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <gclkEnable+0x28>)
     7b6:	401a      	ands	r2, r3
     7b8:	4302      	orrs	r2, r0
     7ba:	4c07      	ldr	r4, [pc, #28]	; (7d8 <gclkEnable+0x2c>)
     7bc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     7be:	0209      	lsls	r1, r1, #8
     7c0:	23f8      	movs	r3, #248	; 0xf8
     7c2:	015b      	lsls	r3, r3, #5
     7c4:	4019      	ands	r1, r3
     7c6:	2380      	movs	r3, #128	; 0x80
     7c8:	025b      	lsls	r3, r3, #9
     7ca:	4319      	orrs	r1, r3
     7cc:	4308      	orrs	r0, r1
     7ce:	6060      	str	r0, [r4, #4]
}
     7d0:	bd10      	pop	{r4, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00ffff00 	.word	0x00ffff00
     7d8:	40000c00 	.word	0x40000c00

000007dc <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <delayInit+0x14>)
     7de:	4a05      	ldr	r2, [pc, #20]	; (7f4 <delayInit+0x18>)
     7e0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     7e2:	2230      	movs	r2, #48	; 0x30
     7e4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7e6:	3a2b      	subs	r2, #43	; 0x2b
     7e8:	4b03      	ldr	r3, [pc, #12]	; (7f8 <delayInit+0x1c>)
     7ea:	601a      	str	r2, [r3, #0]
}
     7ec:	4770      	bx	lr
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	20000004 	.word	0x20000004
     7f4:	0000bb80 	.word	0x0000bb80
     7f8:	e000e010 	.word	0xe000e010

000007fc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     7fc:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     7fe:	4b08      	ldr	r3, [pc, #32]	; (820 <delay_us+0x24>)
     800:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     802:	4a08      	ldr	r2, [pc, #32]	; (824 <delay_us+0x28>)
		SysTick->VAL = 0;
     804:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     806:	2180      	movs	r1, #128	; 0x80
     808:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     80a:	e006      	b.n	81a <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     80c:	2c00      	cmp	r4, #0
     80e:	d004      	beq.n	81a <delay_us+0x1e>
		SysTick->LOAD = n;
     810:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     812:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     814:	6813      	ldr	r3, [r2, #0]
     816:	420b      	tst	r3, r1
     818:	d0fc      	beq.n	814 <delay_us+0x18>
     81a:	3801      	subs	r0, #1
     81c:	d2f6      	bcs.n	80c <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     81e:	bd30      	pop	{r4, r5, pc}
     820:	20000004 	.word	0x20000004
     824:	e000e010 	.word	0xe000e010

00000828 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     828:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     82a:	4b08      	ldr	r3, [pc, #32]	; (84c <delay_ms+0x24>)
     82c:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     82e:	4a08      	ldr	r2, [pc, #32]	; (850 <delay_ms+0x28>)
		SysTick->VAL = 0;
     830:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     832:	2180      	movs	r1, #128	; 0x80
     834:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     836:	e006      	b.n	846 <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     838:	2c00      	cmp	r4, #0
     83a:	d004      	beq.n	846 <delay_ms+0x1e>
		SysTick->LOAD = n;
     83c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     83e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     840:	6813      	ldr	r3, [r2, #0]
     842:	420b      	tst	r3, r1
     844:	d0fc      	beq.n	840 <delay_ms+0x18>
     846:	3801      	subs	r0, #1
     848:	d2f6      	bcs.n	838 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     84a:	bd30      	pop	{r4, r5, pc}
     84c:	20000004 	.word	0x20000004
     850:	e000e010 	.word	0xe000e010

00000854 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     854:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     856:	4d11      	ldr	r5, [pc, #68]	; (89c <dmaInit+0x48>)
     858:	22c0      	movs	r2, #192	; 0xc0
     85a:	2100      	movs	r1, #0
     85c:	0028      	movs	r0, r5
     85e:	4e10      	ldr	r6, [pc, #64]	; (8a0 <dmaInit+0x4c>)
     860:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     862:	4c10      	ldr	r4, [pc, #64]	; (8a4 <dmaInit+0x50>)
     864:	22c0      	movs	r2, #192	; 0xc0
     866:	2100      	movs	r1, #0
     868:	0020      	movs	r0, r4
     86a:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     86c:	4b0e      	ldr	r3, [pc, #56]	; (8a8 <dmaInit+0x54>)
     86e:	6959      	ldr	r1, [r3, #20]
     870:	2220      	movs	r2, #32
     872:	430a      	orrs	r2, r1
     874:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     876:	69d9      	ldr	r1, [r3, #28]
     878:	2210      	movs	r2, #16
     87a:	430a      	orrs	r2, r1
     87c:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     87e:	4b0b      	ldr	r3, [pc, #44]	; (8ac <dmaInit+0x58>)
     880:	881a      	ldrh	r2, [r3, #0]
     882:	2102      	movs	r1, #2
     884:	438a      	bics	r2, r1
     886:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     888:	8819      	ldrh	r1, [r3, #0]
     88a:	2201      	movs	r2, #1
     88c:	430a      	orrs	r2, r1
     88e:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     890:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     892:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     894:	4a06      	ldr	r2, [pc, #24]	; (8b0 <dmaInit+0x5c>)
     896:	801a      	strh	r2, [r3, #0]
}
     898:	bd70      	pop	{r4, r5, r6, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	20000520 	.word	0x20000520
     8a0:	00001bf5 	.word	0x00001bf5
     8a4:	20000460 	.word	0x20000460
     8a8:	40000400 	.word	0x40000400
     8ac:	41004800 	.word	0x41004800
     8b0:	00000f02 	.word	0x00000f02

000008b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	464f      	mov	r7, r9
     8b8:	4646      	mov	r6, r8
     8ba:	b4c0      	push	{r6, r7}
     8bc:	b083      	sub	sp, #12
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     8be:	4e16      	ldr	r6, [pc, #88]	; (918 <readMS5803AdcResults+0x64>)
     8c0:	2380      	movs	r3, #128	; 0x80
     8c2:	021b      	lsls	r3, r3, #8
     8c4:	4699      	mov	r9, r3
     8c6:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     8c8:	4c14      	ldr	r4, [pc, #80]	; (91c <readMS5803AdcResults+0x68>)
     8ca:	2300      	movs	r3, #0
     8cc:	9300      	str	r3, [sp, #0]
     8ce:	6822      	ldr	r2, [r4, #0]
     8d0:	6863      	ldr	r3, [r4, #4]
     8d2:	68a0      	ldr	r0, [r4, #8]
     8d4:	68e1      	ldr	r1, [r4, #12]
     8d6:	4d12      	ldr	r5, [pc, #72]	; (920 <readMS5803AdcResults+0x6c>)
     8d8:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     8da:	6922      	ldr	r2, [r4, #16]
     8dc:	6963      	ldr	r3, [r4, #20]
     8de:	68a0      	ldr	r0, [r4, #8]
     8e0:	68e1      	ldr	r1, [r4, #12]
     8e2:	4f10      	ldr	r7, [pc, #64]	; (924 <readMS5803AdcResults+0x70>)
     8e4:	47b8      	blx	r7
     8e6:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     8e8:	6922      	ldr	r2, [r4, #16]
     8ea:	6963      	ldr	r3, [r4, #20]
     8ec:	68a0      	ldr	r0, [r4, #8]
     8ee:	68e1      	ldr	r1, [r4, #12]
     8f0:	47b8      	blx	r7
     8f2:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     8f4:	6922      	ldr	r2, [r4, #16]
     8f6:	6963      	ldr	r3, [r4, #20]
     8f8:	68a0      	ldr	r0, [r4, #8]
     8fa:	68e1      	ldr	r1, [r4, #12]
     8fc:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8fe:	464b      	mov	r3, r9
     900:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     902:	4643      	mov	r3, r8
     904:	041e      	lsls	r6, r3, #16
     906:	022d      	lsls	r5, r5, #8
     908:	4335      	orrs	r5, r6
     90a:	4328      	orrs	r0, r5
}
     90c:	b003      	add	sp, #12
     90e:	bc0c      	pop	{r2, r3}
     910:	4690      	mov	r8, r2
     912:	4699      	mov	r9, r3
     914:	bdf0      	pop	{r4, r5, r6, r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	41004400 	.word	0x41004400
     91c:	00001db8 	.word	0x00001db8
     920:	00000665 	.word	0x00000665
     924:	000006b5 	.word	0x000006b5

00000928 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     928:	b5f0      	push	{r4, r5, r6, r7, lr}
     92a:	464f      	mov	r7, r9
     92c:	4646      	mov	r6, r8
     92e:	b4c0      	push	{r6, r7}
     930:	b08b      	sub	sp, #44	; 0x2c
     932:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     934:	8803      	ldrh	r3, [r0, #0]
     936:	251e      	movs	r5, #30
     938:	aa02      	add	r2, sp, #8
     93a:	4694      	mov	ip, r2
     93c:	4465      	add	r5, ip
     93e:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     940:	8843      	ldrh	r3, [r0, #2]
     942:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     944:	8883      	ldrh	r3, [r0, #4]
     946:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     948:	88c3      	ldrh	r3, [r0, #6]
     94a:	ae08      	add	r6, sp, #32
     94c:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     94e:	8903      	ldrh	r3, [r0, #8]
     950:	2216      	movs	r2, #22
     952:	4462      	add	r2, ip
     954:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     956:	8941      	ldrh	r1, [r0, #10]
     958:	ab07      	add	r3, sp, #28
     95a:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     95c:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     95e:	0224      	lsls	r4, r4, #8
     960:	6902      	ldr	r2, [r0, #16]
     962:	1b14      	subs	r4, r2, r4
     964:	17e2      	asrs	r2, r4, #31
     966:	0011      	movs	r1, r2
     968:	8818      	ldrh	r0, [r3, #0]
     96a:	b280      	uxth	r0, r0
     96c:	4b2b      	ldr	r3, [pc, #172]	; (a1c <ConvertPressureTemperature+0xf4>)
     96e:	4699      	mov	r9, r3
     970:	0022      	movs	r2, r4
     972:	9101      	str	r1, [sp, #4]
     974:	000b      	movs	r3, r1
     976:	2100      	movs	r1, #0
     978:	47c8      	blx	r9
     97a:	23fa      	movs	r3, #250	; 0xfa
     97c:	00db      	lsls	r3, r3, #3
     97e:	469c      	mov	ip, r3
     980:	4461      	add	r1, ip
     982:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     984:	ab02      	add	r3, sp, #8
     986:	8b9b      	ldrh	r3, [r3, #28]
     988:	b29b      	uxth	r3, r3
     98a:	4698      	mov	r8, r3
     98c:	8830      	ldrh	r0, [r6, #0]
     98e:	b280      	uxth	r0, r0
     990:	0022      	movs	r2, r4
     992:	9b01      	ldr	r3, [sp, #4]
     994:	2100      	movs	r1, #0
     996:	47c8      	blx	r9
     998:	064e      	lsls	r6, r1, #25
     99a:	09c2      	lsrs	r2, r0, #7
     99c:	4332      	orrs	r2, r6
     99e:	11cb      	asrs	r3, r1, #7
     9a0:	2100      	movs	r1, #0
     9a2:	4646      	mov	r6, r8
     9a4:	0430      	lsls	r0, r6, #16
     9a6:	1812      	adds	r2, r2, r0
     9a8:	414b      	adcs	r3, r1
     9aa:	9204      	str	r2, [sp, #16]
     9ac:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     9ae:	882d      	ldrh	r5, [r5, #0]
     9b0:	b2ad      	uxth	r5, r5
     9b2:	aa02      	add	r2, sp, #8
     9b4:	8b50      	ldrh	r0, [r2, #26]
     9b6:	b280      	uxth	r0, r0
     9b8:	0022      	movs	r2, r4
     9ba:	9b01      	ldr	r3, [sp, #4]
     9bc:	2100      	movs	r1, #0
     9be:	47c8      	blx	r9
     9c0:	060c      	lsls	r4, r1, #24
     9c2:	0a02      	lsrs	r2, r0, #8
     9c4:	4322      	orrs	r2, r4
     9c6:	120b      	asrs	r3, r1, #8
     9c8:	2100      	movs	r1, #0
     9ca:	03e8      	lsls	r0, r5, #15
     9cc:	1812      	adds	r2, r2, r0
     9ce:	414b      	adcs	r3, r1
     9d0:	9202      	str	r2, [sp, #8]
     9d2:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     9d4:	9a02      	ldr	r2, [sp, #8]
     9d6:	9b03      	ldr	r3, [sp, #12]
     9d8:	9c04      	ldr	r4, [sp, #16]
     9da:	9d05      	ldr	r5, [sp, #20]
     9dc:	68f8      	ldr	r0, [r7, #12]
     9de:	2100      	movs	r1, #0
     9e0:	47c8      	blx	r9
     9e2:	17ce      	asrs	r6, r1, #31
     9e4:	02f6      	lsls	r6, r6, #11
     9e6:	0af2      	lsrs	r2, r6, #11
     9e8:	2300      	movs	r3, #0
     9ea:	1880      	adds	r0, r0, r2
     9ec:	4159      	adcs	r1, r3
     9ee:	02ce      	lsls	r6, r1, #11
     9f0:	0d42      	lsrs	r2, r0, #21
     9f2:	4332      	orrs	r2, r6
     9f4:	154b      	asrs	r3, r1, #21
     9f6:	1b12      	subs	r2, r2, r4
     9f8:	41ab      	sbcs	r3, r5
     9fa:	17dc      	asrs	r4, r3, #31
     9fc:	0464      	lsls	r4, r4, #17
     9fe:	0c60      	lsrs	r0, r4, #17
     a00:	2100      	movs	r1, #0
     a02:	1812      	adds	r2, r2, r0
     a04:	414b      	adcs	r3, r1
     a06:	0011      	movs	r1, r2
     a08:	045b      	lsls	r3, r3, #17
     a0a:	0bca      	lsrs	r2, r1, #15
     a0c:	431a      	orrs	r2, r3
     a0e:	61fa      	str	r2, [r7, #28]
}
     a10:	b00b      	add	sp, #44	; 0x2c
     a12:	bc0c      	pop	{r2, r3}
     a14:	4690      	mov	r8, r2
     a16:	4699      	mov	r9, r3
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000db5 	.word	0x00000db5

00000a20 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     a20:	b570      	push	{r4, r5, r6, lr}
     a22:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     a24:	69c2      	ldr	r2, [r0, #28]
     a26:	0093      	lsls	r3, r2, #2
     a28:	189b      	adds	r3, r3, r2
     a2a:	005b      	lsls	r3, r3, #1
     a2c:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     a2e:	4a11      	ldr	r2, [pc, #68]	; (a74 <pascalToCent+0x54>)
     a30:	4293      	cmp	r3, r2
     a32:	d902      	bls.n	a3a <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <pascalToCent+0x58>)
     a36:	6203      	str	r3, [r0, #32]
     a38:	e01a      	b.n	a70 <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     a3a:	4a0e      	ldr	r2, [pc, #56]	; (a74 <pascalToCent+0x54>)
     a3c:	1ad2      	subs	r2, r2, r3
     a3e:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     a40:	2a4b      	cmp	r2, #75	; 0x4b
     a42:	dd02      	ble.n	a4a <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     a44:	4b0d      	ldr	r3, [pc, #52]	; (a7c <pascalToCent+0x5c>)
     a46:	6203      	str	r3, [r0, #32]
     a48:	e012      	b.n	a70 <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     a4a:	4d0d      	ldr	r5, [pc, #52]	; (a80 <pascalToCent+0x60>)
     a4c:	0091      	lsls	r1, r2, #2
     a4e:	1869      	adds	r1, r5, r1
     a50:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     a52:	0296      	lsls	r6, r2, #10
     a54:	4907      	ldr	r1, [pc, #28]	; (a74 <pascalToCent+0x54>)
     a56:	1b89      	subs	r1, r1, r6
     a58:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     a5a:	3201      	adds	r2, #1
     a5c:	0092      	lsls	r2, r2, #2
     a5e:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     a60:	6992      	ldr	r2, [r2, #24]
     a62:	1a12      	subs	r2, r2, r0
     a64:	4353      	muls	r3, r2
     a66:	0a9b      	lsrs	r3, r3, #10
     a68:	1818      	adds	r0, r3, r0
     a6a:	4b06      	ldr	r3, [pc, #24]	; (a84 <pascalToCent+0x64>)
     a6c:	4798      	blx	r3
     a6e:	6220      	str	r0, [r4, #32]
        }
    }
}
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	000199cc 	.word	0x000199cc
     a78:	c6e5c000 	.word	0xc6e5c000
     a7c:	497048e0 	.word	0x497048e0
     a80:	00001db8 	.word	0x00001db8
     a84:	000013bd 	.word	0x000013bd

00000a88 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     a88:	b5f0      	push	{r4, r5, r6, r7, lr}
     a8a:	465f      	mov	r7, fp
     a8c:	4656      	mov	r6, sl
     a8e:	464d      	mov	r5, r9
     a90:	4644      	mov	r4, r8
     a92:	b4f0      	push	{r4, r5, r6, r7}
     a94:	b083      	sub	sp, #12
     a96:	0007      	movs	r7, r0
     a98:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     a9a:	4b1a      	ldr	r3, [pc, #104]	; (b04 <readMS5803Coefficients+0x7c>)
     a9c:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     a9e:	4c1a      	ldr	r4, [pc, #104]	; (b08 <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     aa0:	2596      	movs	r5, #150	; 0x96
     aa2:	00ad      	lsls	r5, r5, #2
     aa4:	0028      	movs	r0, r5
     aa6:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     aa8:	0028      	movs	r0, r5
     aaa:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     aac:	2380      	movs	r3, #128	; 0x80
     aae:	021b      	lsls	r3, r3, #8
     ab0:	4699      	mov	r9, r3
     ab2:	4a16      	ldr	r2, [pc, #88]	; (b0c <readMS5803Coefficients+0x84>)
     ab4:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     ab6:	9600      	str	r6, [sp, #0]
     ab8:	6822      	ldr	r2, [r4, #0]
     aba:	6863      	ldr	r3, [r4, #4]
     abc:	68a0      	ldr	r0, [r4, #8]
     abe:	68e1      	ldr	r1, [r4, #12]
     ac0:	4d13      	ldr	r5, [pc, #76]	; (b10 <readMS5803Coefficients+0x88>)
     ac2:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     ac4:	6922      	ldr	r2, [r4, #16]
     ac6:	6963      	ldr	r3, [r4, #20]
     ac8:	68a0      	ldr	r0, [r4, #8]
     aca:	68e1      	ldr	r1, [r4, #12]
     acc:	4d11      	ldr	r5, [pc, #68]	; (b14 <readMS5803Coefficients+0x8c>)
     ace:	47a8      	blx	r5
     ad0:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     ad2:	6922      	ldr	r2, [r4, #16]
     ad4:	6963      	ldr	r3, [r4, #20]
     ad6:	68a0      	ldr	r0, [r4, #8]
     ad8:	68e1      	ldr	r1, [r4, #12]
     ada:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     adc:	464b      	mov	r3, r9
     ade:	4a0b      	ldr	r2, [pc, #44]	; (b0c <readMS5803Coefficients+0x84>)
     ae0:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     ae2:	4643      	mov	r3, r8
     ae4:	021d      	lsls	r5, r3, #8
     ae6:	4328      	orrs	r0, r5
     ae8:	8038      	strh	r0, [r7, #0]
     aea:	3602      	adds	r6, #2
     aec:	b2f6      	uxtb	r6, r6
     aee:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     af0:	2eae      	cmp	r6, #174	; 0xae
     af2:	d1d5      	bne.n	aa0 <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     af4:	b003      	add	sp, #12
     af6:	bc3c      	pop	{r2, r3, r4, r5}
     af8:	4690      	mov	r8, r2
     afa:	4699      	mov	r9, r3
     afc:	46a2      	mov	sl, r4
     afe:	46ab      	mov	fp, r5
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	000007fd 	.word	0x000007fd
     b08:	00001db8 	.word	0x00001db8
     b0c:	41004400 	.word	0x41004400
     b10:	00000665 	.word	0x00000665
     b14:	000006b5 	.word	0x000006b5

00000b18 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     b18:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1a:	b083      	sub	sp, #12
     b1c:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b1e:	4d10      	ldr	r5, [pc, #64]	; (b60 <initMS5803Barometer+0x48>)
     b20:	2680      	movs	r6, #128	; 0x80
     b22:	0236      	lsls	r6, r6, #8
     b24:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     b26:	490f      	ldr	r1, [pc, #60]	; (b64 <initMS5803Barometer+0x4c>)
     b28:	231e      	movs	r3, #30
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	680a      	ldr	r2, [r1, #0]
     b2e:	684b      	ldr	r3, [r1, #4]
     b30:	6888      	ldr	r0, [r1, #8]
     b32:	68c9      	ldr	r1, [r1, #12]
     b34:	4f0c      	ldr	r7, [pc, #48]	; (b68 <initMS5803Barometer+0x50>)
     b36:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b38:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     b3a:	20c8      	movs	r0, #200	; 0xc8
     b3c:	4b0b      	ldr	r3, [pc, #44]	; (b6c <initMS5803Barometer+0x54>)
     b3e:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     b40:	0020      	movs	r0, r4
     b42:	4b0b      	ldr	r3, [pc, #44]	; (b70 <initMS5803Barometer+0x58>)
     b44:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     b46:	4b0b      	ldr	r3, [pc, #44]	; (b74 <initMS5803Barometer+0x5c>)
     b48:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     b4a:	4b0b      	ldr	r3, [pc, #44]	; (b78 <initMS5803Barometer+0x60>)
     b4c:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     b4e:	4b0b      	ldr	r3, [pc, #44]	; (b7c <initMS5803Barometer+0x64>)
     b50:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     b52:	4b0b      	ldr	r3, [pc, #44]	; (b80 <initMS5803Barometer+0x68>)
     b54:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     b56:	23fa      	movs	r3, #250	; 0xfa
     b58:	00db      	lsls	r3, r3, #3
     b5a:	6163      	str	r3, [r4, #20]




}
     b5c:	b003      	add	sp, #12
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b60:	41004400 	.word	0x41004400
     b64:	00001db8 	.word	0x00001db8
     b68:	00000665 	.word	0x00000665
     b6c:	00000829 	.word	0x00000829
     b70:	00000a89 	.word	0x00000a89
     b74:	457a0000 	.word	0x457a0000
     b78:	00002710 	.word	0x00002710
     b7c:	0041c9fe 	.word	0x0041c9fe
     b80:	007ffae4 	.word	0x007ffae4

00000b84 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     b84:	b5f0      	push	{r4, r5, r6, r7, lr}
     b86:	465f      	mov	r7, fp
     b88:	4656      	mov	r6, sl
     b8a:	464d      	mov	r5, r9
     b8c:	4644      	mov	r4, r8
     b8e:	b4f0      	push	{r4, r5, r6, r7}
     b90:	b083      	sub	sp, #12
     b92:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     b94:	4d34      	ldr	r5, [pc, #208]	; (c68 <sampleTick+0xe4>)
     b96:	6828      	ldr	r0, [r5, #0]
     b98:	6869      	ldr	r1, [r5, #4]
     b9a:	4b34      	ldr	r3, [pc, #208]	; (c6c <sampleTick+0xe8>)
     b9c:	4798      	blx	r3
     b9e:	4b34      	ldr	r3, [pc, #208]	; (c70 <sampleTick+0xec>)
     ba0:	4798      	blx	r3
     ba2:	4b34      	ldr	r3, [pc, #208]	; (c74 <sampleTick+0xf0>)
     ba4:	4698      	mov	r8, r3
     ba6:	4a34      	ldr	r2, [pc, #208]	; (c78 <sampleTick+0xf4>)
     ba8:	4b34      	ldr	r3, [pc, #208]	; (c7c <sampleTick+0xf8>)
     baa:	47c0      	blx	r8
     bac:	4b34      	ldr	r3, [pc, #208]	; (c80 <sampleTick+0xfc>)
     bae:	4798      	blx	r3
     bb0:	66a0      	str	r0, [r4, #104]	; 0x68
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bb2:	2780      	movs	r7, #128	; 0x80
     bb4:	023f      	lsls	r7, r7, #8
     bb6:	4b33      	ldr	r3, [pc, #204]	; (c84 <sampleTick+0x100>)
     bb8:	615f      	str	r7, [r3, #20]
    uint8_t dummy_rx;


    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
     bba:	2350      	movs	r3, #80	; 0x50
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	68aa      	ldr	r2, [r5, #8]
     bc0:	68eb      	ldr	r3, [r5, #12]
     bc2:	6928      	ldr	r0, [r5, #16]
     bc4:	6969      	ldr	r1, [r5, #20]
     bc6:	4e30      	ldr	r6, [pc, #192]	; (c88 <sampleTick+0x104>)
     bc8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bca:	4b2e      	ldr	r3, [pc, #184]	; (c84 <sampleTick+0x100>)
     bcc:	619f      	str	r7, [r3, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     bce:	2002      	movs	r0, #2
     bd0:	4b2e      	ldr	r3, [pc, #184]	; (c8c <sampleTick+0x108>)
     bd2:	469a      	mov	sl, r3
     bd4:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     bd6:	4b2e      	ldr	r3, [pc, #184]	; (c90 <sampleTick+0x10c>)
     bd8:	4699      	mov	r9, r3
     bda:	4798      	blx	r3
     bdc:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bde:	4b29      	ldr	r3, [pc, #164]	; (c84 <sampleTick+0x100>)
     be0:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
     be2:	2342      	movs	r3, #66	; 0x42
     be4:	9300      	str	r3, [sp, #0]
     be6:	68aa      	ldr	r2, [r5, #8]
     be8:	68eb      	ldr	r3, [r5, #12]
     bea:	6928      	ldr	r0, [r5, #16]
     bec:	6969      	ldr	r1, [r5, #20]
     bee:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf0:	4b24      	ldr	r3, [pc, #144]	; (c84 <sampleTick+0x100>)
     bf2:	619f      	str	r7, [r3, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     bf4:	2002      	movs	r0, #2
     bf6:	47d0      	blx	sl
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     bf8:	47c8      	blx	r9
     bfa:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     bfc:	0020      	movs	r0, r4
     bfe:	4b25      	ldr	r3, [pc, #148]	; (c94 <sampleTick+0x110>)
     c00:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     c02:	0020      	movs	r0, r4
     c04:	4b24      	ldr	r3, [pc, #144]	; (c98 <sampleTick+0x114>)
     c06:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     c08:	6a20      	ldr	r0, [r4, #32]
     c0a:	4b24      	ldr	r3, [pc, #144]	; (c9c <sampleTick+0x118>)
     c0c:	4798      	blx	r3
     c0e:	4a24      	ldr	r2, [pc, #144]	; (ca0 <sampleTick+0x11c>)
     c10:	4b24      	ldr	r3, [pc, #144]	; (ca4 <sampleTick+0x120>)
     c12:	47c0      	blx	r8
     c14:	4b1a      	ldr	r3, [pc, #104]	; (c80 <sampleTick+0xfc>)
     c16:	4798      	blx	r3
     c18:	6260      	str	r0, [r4, #36]	; 0x24




    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     c1a:	2351      	movs	r3, #81	; 0x51
     c1c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     c1e:	b243      	sxtb	r3, r0
     c20:	2b00      	cmp	r3, #0
     c22:	da09      	bge.n	c38 <sampleTick+0xb4>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     c24:	2350      	movs	r3, #80	; 0x50
     c26:	5ce3      	ldrb	r3, [r4, r3]
     c28:	4a1f      	ldr	r2, [pc, #124]	; (ca8 <sampleTick+0x124>)
     c2a:	4313      	orrs	r3, r2
     c2c:	0200      	lsls	r0, r0, #8
     c2e:	4318      	orrs	r0, r3
     c30:	4b1e      	ldr	r3, [pc, #120]	; (cac <sampleTick+0x128>)
     c32:	4798      	blx	r3
     c34:	6320      	str	r0, [r4, #48]	; 0x30
     c36:	e006      	b.n	c46 <sampleTick+0xc2>
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     c38:	0200      	lsls	r0, r0, #8
     c3a:	2350      	movs	r3, #80	; 0x50
     c3c:	5ce3      	ldrb	r3, [r4, r3]
     c3e:	18c0      	adds	r0, r0, r3
     c40:	4b1a      	ldr	r3, [pc, #104]	; (cac <sampleTick+0x128>)
     c42:	4798      	blx	r3
     c44:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     c46:	6b20      	ldr	r0, [r4, #48]	; 0x30
     c48:	4b14      	ldr	r3, [pc, #80]	; (c9c <sampleTick+0x118>)
     c4a:	4798      	blx	r3
     c4c:	4a18      	ldr	r2, [pc, #96]	; (cb0 <sampleTick+0x12c>)
     c4e:	4b19      	ldr	r3, [pc, #100]	; (cb4 <sampleTick+0x130>)
     c50:	4d08      	ldr	r5, [pc, #32]	; (c74 <sampleTick+0xf0>)
     c52:	47a8      	blx	r5
     c54:	4b0a      	ldr	r3, [pc, #40]	; (c80 <sampleTick+0xfc>)
     c56:	4798      	blx	r3
     c58:	6320      	str	r0, [r4, #48]	; 0x30





}
     c5a:	b003      	add	sp, #12
     c5c:	bc3c      	pop	{r2, r3, r4, r5}
     c5e:	4690      	mov	r8, r2
     c60:	4699      	mov	r9, r3
     c62:	46a2      	mov	sl, r4
     c64:	46ab      	mov	fp, r5
     c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c68:	00001f04 	.word	0x00001f04
     c6c:	000005e5 	.word	0x000005e5
     c70:	0000192d 	.word	0x0000192d
     c74:	00001439 	.word	0x00001439
     c78:	eaa2a0a9 	.word	0xeaa2a0a9
     c7c:	3f5f3a57 	.word	0x3f5f3a57
     c80:	00001a59 	.word	0x00001a59
     c84:	41004400 	.word	0x41004400
     c88:	00000665 	.word	0x00000665
     c8c:	00000829 	.word	0x00000829
     c90:	000008b5 	.word	0x000008b5
     c94:	00000929 	.word	0x00000929
     c98:	00000a21 	.word	0x00000a21
     c9c:	000019b1 	.word	0x000019b1
     ca0:	e9f6a93f 	.word	0xe9f6a93f
     ca4:	3fa0cc78 	.word	0x3fa0cc78
     ca8:	ffff0000 	.word	0xffff0000
     cac:	0000132d 	.word	0x0000132d
     cb0:	d52535ef 	.word	0xd52535ef
     cb4:	3f0fff4e 	.word	0x3f0fff4e

00000cb8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	0004      	movs	r4, r0
     cbc:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     cbe:	480e      	ldr	r0, [pc, #56]	; (cf8 <sercomClockEnable+0x40>)
     cc0:	6a01      	ldr	r1, [r0, #32]
     cc2:	1ca6      	adds	r6, r4, #2
     cc4:	2301      	movs	r3, #1
     cc6:	40b3      	lsls	r3, r6
     cc8:	430b      	orrs	r3, r1
     cca:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     ccc:	2d00      	cmp	r5, #0
     cce:	d003      	beq.n	cd8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     cd0:	2107      	movs	r1, #7
     cd2:	0028      	movs	r0, r5
     cd4:	4b09      	ldr	r3, [pc, #36]	; (cfc <sercomClockEnable+0x44>)
     cd6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cd8:	0229      	lsls	r1, r5, #8
     cda:	23f0      	movs	r3, #240	; 0xf0
     cdc:	011b      	lsls	r3, r3, #4
     cde:	4019      	ands	r1, r3
     ce0:	2380      	movs	r3, #128	; 0x80
     ce2:	01db      	lsls	r3, r3, #7
     ce4:	4319      	orrs	r1, r3
     ce6:	0023      	movs	r3, r4
     ce8:	3314      	adds	r3, #20
     cea:	243f      	movs	r4, #63	; 0x3f
     cec:	401c      	ands	r4, r3
     cee:	430c      	orrs	r4, r1
     cf0:	4b03      	ldr	r3, [pc, #12]	; (d00 <sercomClockEnable+0x48>)
     cf2:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     cf4:	bd70      	pop	{r4, r5, r6, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	40000400 	.word	0x40000400
     cfc:	000007ad 	.word	0x000007ad
     d00:	40000c00 	.word	0x40000c00

00000d04 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     d04:	0280      	lsls	r0, r0, #10
     d06:	4b05      	ldr	r3, [pc, #20]	; (d1c <sercomReset+0x18>)
     d08:	469c      	mov	ip, r3
     d0a:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     d0c:	2301      	movs	r3, #1
     d0e:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     d10:	2201      	movs	r2, #1
     d12:	6803      	ldr	r3, [r0, #0]
     d14:	421a      	tst	r2, r3
     d16:	d1fc      	bne.n	d12 <sercomReset+0xe>
}
     d18:	4770      	bx	lr
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	42000800 	.word	0x42000800

00000d20 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d22:	464f      	mov	r7, r9
     d24:	4646      	mov	r6, r8
     d26:	b4c0      	push	{r6, r7}
     d28:	0006      	movs	r6, r0
     d2a:	4688      	mov	r8, r1
     d2c:	0017      	movs	r7, r2
     d2e:	001d      	movs	r5, r3
     d30:	ab08      	add	r3, sp, #32
     d32:	781c      	ldrb	r4, [r3, #0]
     d34:	ab09      	add	r3, sp, #36	; 0x24
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	4699      	mov	r9, r3
		
    sercomReset(id);
     d3a:	4b15      	ldr	r3, [pc, #84]	; (d90 <sercomSpiMasterInit+0x70>)
     d3c:	4798      	blx	r3
     d3e:	02b0      	lsls	r0, r6, #10
     d40:	4b14      	ldr	r3, [pc, #80]	; (d94 <sercomSpiMasterInit+0x74>)
     d42:	469c      	mov	ip, r3
     d44:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	029b      	lsls	r3, r3, #10
     d4a:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     d4c:	464b      	mov	r3, r9
     d4e:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     d50:	4643      	mov	r3, r8
     d52:	0519      	lsls	r1, r3, #20
     d54:	23c0      	movs	r3, #192	; 0xc0
     d56:	039b      	lsls	r3, r3, #14
     d58:	4019      	ands	r1, r3
     d5a:	000e      	movs	r6, r1
     d5c:	0439      	lsls	r1, r7, #16
     d5e:	23c0      	movs	r3, #192	; 0xc0
     d60:	029b      	lsls	r3, r3, #10
     d62:	4019      	ands	r1, r3
     d64:	230e      	movs	r3, #14
     d66:	000a      	movs	r2, r1
     d68:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     d6a:	1e6b      	subs	r3, r5, #1
     d6c:	419d      	sbcs	r5, r3
     d6e:	076d      	lsls	r5, r5, #29
     d70:	0031      	movs	r1, r6
     d72:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     d74:	1e63      	subs	r3, r4, #1
     d76:	419c      	sbcs	r4, r3
     d78:	0722      	lsls	r2, r4, #28
     d7a:	002c      	movs	r4, r5
     d7c:	430c      	orrs	r4, r1
     d7e:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     d80:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     d82:	69c3      	ldr	r3, [r0, #28]
     d84:	075b      	lsls	r3, r3, #29
     d86:	d4fc      	bmi.n	d82 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     d88:	bc0c      	pop	{r2, r3}
     d8a:	4690      	mov	r8, r2
     d8c:	4699      	mov	r9, r3
     d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d90:	00000d05 	.word	0x00000d05
     d94:	42000800 	.word	0x42000800

00000d98 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     d98:	0280      	lsls	r0, r0, #10
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <spiDataTransfer+0x18>)
     d9c:	469c      	mov	ip, r3
     d9e:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     da0:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     da2:	7e03      	ldrb	r3, [r0, #24]
     da4:	075b      	lsls	r3, r3, #29
     da6:	d5fc      	bpl.n	da2 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     da8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     daa:	b2c0      	uxtb	r0, r0
}
     dac:	4770      	bx	lr
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	42000800 	.word	0x42000800

00000db4 <__aeabi_lmul>:
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
     db6:	464f      	mov	r7, r9
     db8:	4646      	mov	r6, r8
     dba:	b4c0      	push	{r6, r7}
     dbc:	0416      	lsls	r6, r2, #16
     dbe:	0c36      	lsrs	r6, r6, #16
     dc0:	4699      	mov	r9, r3
     dc2:	0033      	movs	r3, r6
     dc4:	0405      	lsls	r5, r0, #16
     dc6:	0c2c      	lsrs	r4, r5, #16
     dc8:	0c07      	lsrs	r7, r0, #16
     dca:	0c15      	lsrs	r5, r2, #16
     dcc:	4363      	muls	r3, r4
     dce:	437e      	muls	r6, r7
     dd0:	436f      	muls	r7, r5
     dd2:	4365      	muls	r5, r4
     dd4:	0c1c      	lsrs	r4, r3, #16
     dd6:	19ad      	adds	r5, r5, r6
     dd8:	1964      	adds	r4, r4, r5
     dda:	469c      	mov	ip, r3
     ddc:	42a6      	cmp	r6, r4
     dde:	d903      	bls.n	de8 <__aeabi_lmul+0x34>
     de0:	2380      	movs	r3, #128	; 0x80
     de2:	025b      	lsls	r3, r3, #9
     de4:	4698      	mov	r8, r3
     de6:	4447      	add	r7, r8
     de8:	4663      	mov	r3, ip
     dea:	0c25      	lsrs	r5, r4, #16
     dec:	19ef      	adds	r7, r5, r7
     dee:	041d      	lsls	r5, r3, #16
     df0:	464b      	mov	r3, r9
     df2:	434a      	muls	r2, r1
     df4:	4343      	muls	r3, r0
     df6:	0c2d      	lsrs	r5, r5, #16
     df8:	0424      	lsls	r4, r4, #16
     dfa:	1964      	adds	r4, r4, r5
     dfc:	1899      	adds	r1, r3, r2
     dfe:	19c9      	adds	r1, r1, r7
     e00:	0020      	movs	r0, r4
     e02:	bc0c      	pop	{r2, r3}
     e04:	4690      	mov	r8, r2
     e06:	4699      	mov	r9, r3
     e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e0a:	46c0      	nop			; (mov r8, r8)

00000e0c <__aeabi_fadd>:
     e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e0e:	024a      	lsls	r2, r1, #9
     e10:	0243      	lsls	r3, r0, #9
     e12:	0044      	lsls	r4, r0, #1
     e14:	004e      	lsls	r6, r1, #1
     e16:	0fc5      	lsrs	r5, r0, #31
     e18:	0e24      	lsrs	r4, r4, #24
     e1a:	0028      	movs	r0, r5
     e1c:	099b      	lsrs	r3, r3, #6
     e1e:	0e36      	lsrs	r6, r6, #24
     e20:	0fc9      	lsrs	r1, r1, #31
     e22:	0992      	lsrs	r2, r2, #6
     e24:	428d      	cmp	r5, r1
     e26:	d059      	beq.n	edc <__aeabi_fadd+0xd0>
     e28:	1ba0      	subs	r0, r4, r6
     e2a:	2800      	cmp	r0, #0
     e2c:	dc00      	bgt.n	e30 <__aeabi_fadd+0x24>
     e2e:	e08d      	b.n	f4c <__aeabi_fadd+0x140>
     e30:	2e00      	cmp	r6, #0
     e32:	d11a      	bne.n	e6a <__aeabi_fadd+0x5e>
     e34:	2a00      	cmp	r2, #0
     e36:	d000      	beq.n	e3a <__aeabi_fadd+0x2e>
     e38:	e079      	b.n	f2e <__aeabi_fadd+0x122>
     e3a:	075a      	lsls	r2, r3, #29
     e3c:	d004      	beq.n	e48 <__aeabi_fadd+0x3c>
     e3e:	220f      	movs	r2, #15
     e40:	401a      	ands	r2, r3
     e42:	2a04      	cmp	r2, #4
     e44:	d000      	beq.n	e48 <__aeabi_fadd+0x3c>
     e46:	3304      	adds	r3, #4
     e48:	015a      	lsls	r2, r3, #5
     e4a:	d538      	bpl.n	ebe <__aeabi_fadd+0xb2>
     e4c:	3401      	adds	r4, #1
     e4e:	2cff      	cmp	r4, #255	; 0xff
     e50:	d100      	bne.n	e54 <__aeabi_fadd+0x48>
     e52:	e089      	b.n	f68 <__aeabi_fadd+0x15c>
     e54:	0028      	movs	r0, r5
     e56:	019b      	lsls	r3, r3, #6
     e58:	0a5b      	lsrs	r3, r3, #9
     e5a:	b2e4      	uxtb	r4, r4
     e5c:	025b      	lsls	r3, r3, #9
     e5e:	05e4      	lsls	r4, r4, #23
     e60:	0a5b      	lsrs	r3, r3, #9
     e62:	4323      	orrs	r3, r4
     e64:	07c0      	lsls	r0, r0, #31
     e66:	4318      	orrs	r0, r3
     e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e6a:	2cff      	cmp	r4, #255	; 0xff
     e6c:	d0e5      	beq.n	e3a <__aeabi_fadd+0x2e>
     e6e:	2180      	movs	r1, #128	; 0x80
     e70:	04c9      	lsls	r1, r1, #19
     e72:	430a      	orrs	r2, r1
     e74:	281b      	cmp	r0, #27
     e76:	dd00      	ble.n	e7a <__aeabi_fadd+0x6e>
     e78:	e089      	b.n	f8e <__aeabi_fadd+0x182>
     e7a:	0016      	movs	r6, r2
     e7c:	2120      	movs	r1, #32
     e7e:	40c6      	lsrs	r6, r0
     e80:	1a08      	subs	r0, r1, r0
     e82:	4082      	lsls	r2, r0
     e84:	1e51      	subs	r1, r2, #1
     e86:	418a      	sbcs	r2, r1
     e88:	4332      	orrs	r2, r6
     e8a:	1a9b      	subs	r3, r3, r2
     e8c:	015a      	lsls	r2, r3, #5
     e8e:	d514      	bpl.n	eba <__aeabi_fadd+0xae>
     e90:	019b      	lsls	r3, r3, #6
     e92:	099e      	lsrs	r6, r3, #6
     e94:	0030      	movs	r0, r6
     e96:	f000 fe6b 	bl	1b70 <__clzsi2>
     e9a:	3805      	subs	r0, #5
     e9c:	4086      	lsls	r6, r0
     e9e:	4284      	cmp	r4, r0
     ea0:	dc65      	bgt.n	f6e <__aeabi_fadd+0x162>
     ea2:	1b04      	subs	r4, r0, r4
     ea4:	0033      	movs	r3, r6
     ea6:	2020      	movs	r0, #32
     ea8:	3401      	adds	r4, #1
     eaa:	40e3      	lsrs	r3, r4
     eac:	1b04      	subs	r4, r0, r4
     eae:	40a6      	lsls	r6, r4
     eb0:	1e72      	subs	r2, r6, #1
     eb2:	4196      	sbcs	r6, r2
     eb4:	2400      	movs	r4, #0
     eb6:	4333      	orrs	r3, r6
     eb8:	e7bf      	b.n	e3a <__aeabi_fadd+0x2e>
     eba:	075a      	lsls	r2, r3, #29
     ebc:	d1bf      	bne.n	e3e <__aeabi_fadd+0x32>
     ebe:	08df      	lsrs	r7, r3, #3
     ec0:	0028      	movs	r0, r5
     ec2:	2cff      	cmp	r4, #255	; 0xff
     ec4:	d12f      	bne.n	f26 <__aeabi_fadd+0x11a>
     ec6:	2f00      	cmp	r7, #0
     ec8:	d100      	bne.n	ecc <__aeabi_fadd+0xc0>
     eca:	e087      	b.n	fdc <__aeabi_fadd+0x1d0>
     ecc:	2280      	movs	r2, #128	; 0x80
     ece:	03d2      	lsls	r2, r2, #15
     ed0:	0013      	movs	r3, r2
     ed2:	433b      	orrs	r3, r7
     ed4:	025b      	lsls	r3, r3, #9
     ed6:	0a5b      	lsrs	r3, r3, #9
     ed8:	24ff      	movs	r4, #255	; 0xff
     eda:	e7bf      	b.n	e5c <__aeabi_fadd+0x50>
     edc:	1ba1      	subs	r1, r4, r6
     ede:	2900      	cmp	r1, #0
     ee0:	dd49      	ble.n	f76 <__aeabi_fadd+0x16a>
     ee2:	2e00      	cmp	r6, #0
     ee4:	d029      	beq.n	f3a <__aeabi_fadd+0x12e>
     ee6:	2cff      	cmp	r4, #255	; 0xff
     ee8:	d0a7      	beq.n	e3a <__aeabi_fadd+0x2e>
     eea:	2680      	movs	r6, #128	; 0x80
     eec:	04f6      	lsls	r6, r6, #19
     eee:	4332      	orrs	r2, r6
     ef0:	291b      	cmp	r1, #27
     ef2:	dd00      	ble.n	ef6 <__aeabi_fadd+0xea>
     ef4:	e08d      	b.n	1012 <__aeabi_fadd+0x206>
     ef6:	0017      	movs	r7, r2
     ef8:	2620      	movs	r6, #32
     efa:	40cf      	lsrs	r7, r1
     efc:	1a71      	subs	r1, r6, r1
     efe:	408a      	lsls	r2, r1
     f00:	1e51      	subs	r1, r2, #1
     f02:	418a      	sbcs	r2, r1
     f04:	433a      	orrs	r2, r7
     f06:	189b      	adds	r3, r3, r2
     f08:	015a      	lsls	r2, r3, #5
     f0a:	d5d6      	bpl.n	eba <__aeabi_fadd+0xae>
     f0c:	3401      	adds	r4, #1
     f0e:	2cff      	cmp	r4, #255	; 0xff
     f10:	d064      	beq.n	fdc <__aeabi_fadd+0x1d0>
     f12:	2201      	movs	r2, #1
     f14:	4976      	ldr	r1, [pc, #472]	; (10f0 <__aeabi_fadd+0x2e4>)
     f16:	401a      	ands	r2, r3
     f18:	085b      	lsrs	r3, r3, #1
     f1a:	400b      	ands	r3, r1
     f1c:	4313      	orrs	r3, r2
     f1e:	e78c      	b.n	e3a <__aeabi_fadd+0x2e>
     f20:	1e03      	subs	r3, r0, #0
     f22:	d1ca      	bne.n	eba <__aeabi_fadd+0xae>
     f24:	2000      	movs	r0, #0
     f26:	027b      	lsls	r3, r7, #9
     f28:	0a5b      	lsrs	r3, r3, #9
     f2a:	b2e4      	uxtb	r4, r4
     f2c:	e796      	b.n	e5c <__aeabi_fadd+0x50>
     f2e:	3801      	subs	r0, #1
     f30:	2800      	cmp	r0, #0
     f32:	d0aa      	beq.n	e8a <__aeabi_fadd+0x7e>
     f34:	2cff      	cmp	r4, #255	; 0xff
     f36:	d19d      	bne.n	e74 <__aeabi_fadd+0x68>
     f38:	e77f      	b.n	e3a <__aeabi_fadd+0x2e>
     f3a:	2a00      	cmp	r2, #0
     f3c:	d100      	bne.n	f40 <__aeabi_fadd+0x134>
     f3e:	e77c      	b.n	e3a <__aeabi_fadd+0x2e>
     f40:	3901      	subs	r1, #1
     f42:	2900      	cmp	r1, #0
     f44:	d0df      	beq.n	f06 <__aeabi_fadd+0xfa>
     f46:	2cff      	cmp	r4, #255	; 0xff
     f48:	d1d2      	bne.n	ef0 <__aeabi_fadd+0xe4>
     f4a:	e776      	b.n	e3a <__aeabi_fadd+0x2e>
     f4c:	2800      	cmp	r0, #0
     f4e:	d120      	bne.n	f92 <__aeabi_fadd+0x186>
     f50:	1c60      	adds	r0, r4, #1
     f52:	b2c0      	uxtb	r0, r0
     f54:	2801      	cmp	r0, #1
     f56:	dd53      	ble.n	1000 <__aeabi_fadd+0x1f4>
     f58:	2780      	movs	r7, #128	; 0x80
     f5a:	1a9e      	subs	r6, r3, r2
     f5c:	04ff      	lsls	r7, r7, #19
     f5e:	4037      	ands	r7, r6
     f60:	d02f      	beq.n	fc2 <__aeabi_fadd+0x1b6>
     f62:	1ad6      	subs	r6, r2, r3
     f64:	000d      	movs	r5, r1
     f66:	e795      	b.n	e94 <__aeabi_fadd+0x88>
     f68:	0028      	movs	r0, r5
     f6a:	2300      	movs	r3, #0
     f6c:	e776      	b.n	e5c <__aeabi_fadd+0x50>
     f6e:	4b61      	ldr	r3, [pc, #388]	; (10f4 <__aeabi_fadd+0x2e8>)
     f70:	1a24      	subs	r4, r4, r0
     f72:	4033      	ands	r3, r6
     f74:	e761      	b.n	e3a <__aeabi_fadd+0x2e>
     f76:	2900      	cmp	r1, #0
     f78:	d14d      	bne.n	1016 <__aeabi_fadd+0x20a>
     f7a:	1c61      	adds	r1, r4, #1
     f7c:	b2ce      	uxtb	r6, r1
     f7e:	2e01      	cmp	r6, #1
     f80:	dd2f      	ble.n	fe2 <__aeabi_fadd+0x1d6>
     f82:	29ff      	cmp	r1, #255	; 0xff
     f84:	d02a      	beq.n	fdc <__aeabi_fadd+0x1d0>
     f86:	189b      	adds	r3, r3, r2
     f88:	085b      	lsrs	r3, r3, #1
     f8a:	000c      	movs	r4, r1
     f8c:	e755      	b.n	e3a <__aeabi_fadd+0x2e>
     f8e:	2201      	movs	r2, #1
     f90:	e77b      	b.n	e8a <__aeabi_fadd+0x7e>
     f92:	2c00      	cmp	r4, #0
     f94:	d11b      	bne.n	fce <__aeabi_fadd+0x1c2>
     f96:	2b00      	cmp	r3, #0
     f98:	d05b      	beq.n	1052 <__aeabi_fadd+0x246>
     f9a:	43c0      	mvns	r0, r0
     f9c:	2800      	cmp	r0, #0
     f9e:	d00c      	beq.n	fba <__aeabi_fadd+0x1ae>
     fa0:	2eff      	cmp	r6, #255	; 0xff
     fa2:	d07e      	beq.n	10a2 <__aeabi_fadd+0x296>
     fa4:	281b      	cmp	r0, #27
     fa6:	dd00      	ble.n	faa <__aeabi_fadd+0x19e>
     fa8:	e092      	b.n	10d0 <__aeabi_fadd+0x2c4>
     faa:	001d      	movs	r5, r3
     fac:	2420      	movs	r4, #32
     fae:	40c5      	lsrs	r5, r0
     fb0:	1a20      	subs	r0, r4, r0
     fb2:	4083      	lsls	r3, r0
     fb4:	1e58      	subs	r0, r3, #1
     fb6:	4183      	sbcs	r3, r0
     fb8:	432b      	orrs	r3, r5
     fba:	1ad3      	subs	r3, r2, r3
     fbc:	0034      	movs	r4, r6
     fbe:	000d      	movs	r5, r1
     fc0:	e764      	b.n	e8c <__aeabi_fadd+0x80>
     fc2:	2e00      	cmp	r6, #0
     fc4:	d000      	beq.n	fc8 <__aeabi_fadd+0x1bc>
     fc6:	e765      	b.n	e94 <__aeabi_fadd+0x88>
     fc8:	2000      	movs	r0, #0
     fca:	2400      	movs	r4, #0
     fcc:	e7ab      	b.n	f26 <__aeabi_fadd+0x11a>
     fce:	2eff      	cmp	r6, #255	; 0xff
     fd0:	d067      	beq.n	10a2 <__aeabi_fadd+0x296>
     fd2:	2480      	movs	r4, #128	; 0x80
     fd4:	04e4      	lsls	r4, r4, #19
     fd6:	4240      	negs	r0, r0
     fd8:	4323      	orrs	r3, r4
     fda:	e7e3      	b.n	fa4 <__aeabi_fadd+0x198>
     fdc:	24ff      	movs	r4, #255	; 0xff
     fde:	2300      	movs	r3, #0
     fe0:	e73c      	b.n	e5c <__aeabi_fadd+0x50>
     fe2:	2c00      	cmp	r4, #0
     fe4:	d161      	bne.n	10aa <__aeabi_fadd+0x29e>
     fe6:	2b00      	cmp	r3, #0
     fe8:	d07e      	beq.n	10e8 <__aeabi_fadd+0x2dc>
     fea:	2a00      	cmp	r2, #0
     fec:	d100      	bne.n	ff0 <__aeabi_fadd+0x1e4>
     fee:	e724      	b.n	e3a <__aeabi_fadd+0x2e>
     ff0:	189b      	adds	r3, r3, r2
     ff2:	015a      	lsls	r2, r3, #5
     ff4:	d400      	bmi.n	ff8 <__aeabi_fadd+0x1ec>
     ff6:	e760      	b.n	eba <__aeabi_fadd+0xae>
     ff8:	4a3e      	ldr	r2, [pc, #248]	; (10f4 <__aeabi_fadd+0x2e8>)
     ffa:	000c      	movs	r4, r1
     ffc:	4013      	ands	r3, r2
     ffe:	e71c      	b.n	e3a <__aeabi_fadd+0x2e>
    1000:	2c00      	cmp	r4, #0
    1002:	d11e      	bne.n	1042 <__aeabi_fadd+0x236>
    1004:	2b00      	cmp	r3, #0
    1006:	d12f      	bne.n	1068 <__aeabi_fadd+0x25c>
    1008:	2a00      	cmp	r2, #0
    100a:	d066      	beq.n	10da <__aeabi_fadd+0x2ce>
    100c:	0013      	movs	r3, r2
    100e:	000d      	movs	r5, r1
    1010:	e713      	b.n	e3a <__aeabi_fadd+0x2e>
    1012:	2201      	movs	r2, #1
    1014:	e777      	b.n	f06 <__aeabi_fadd+0xfa>
    1016:	2c00      	cmp	r4, #0
    1018:	d11f      	bne.n	105a <__aeabi_fadd+0x24e>
    101a:	2b00      	cmp	r3, #0
    101c:	d05a      	beq.n	10d4 <__aeabi_fadd+0x2c8>
    101e:	43c9      	mvns	r1, r1
    1020:	2900      	cmp	r1, #0
    1022:	d00b      	beq.n	103c <__aeabi_fadd+0x230>
    1024:	2eff      	cmp	r6, #255	; 0xff
    1026:	d050      	beq.n	10ca <__aeabi_fadd+0x2be>
    1028:	291b      	cmp	r1, #27
    102a:	dc5f      	bgt.n	10ec <__aeabi_fadd+0x2e0>
    102c:	001f      	movs	r7, r3
    102e:	2420      	movs	r4, #32
    1030:	40cf      	lsrs	r7, r1
    1032:	1a61      	subs	r1, r4, r1
    1034:	408b      	lsls	r3, r1
    1036:	1e59      	subs	r1, r3, #1
    1038:	418b      	sbcs	r3, r1
    103a:	433b      	orrs	r3, r7
    103c:	189b      	adds	r3, r3, r2
    103e:	0034      	movs	r4, r6
    1040:	e762      	b.n	f08 <__aeabi_fadd+0xfc>
    1042:	2b00      	cmp	r3, #0
    1044:	d11c      	bne.n	1080 <__aeabi_fadd+0x274>
    1046:	2a00      	cmp	r2, #0
    1048:	d04a      	beq.n	10e0 <__aeabi_fadd+0x2d4>
    104a:	0013      	movs	r3, r2
    104c:	000d      	movs	r5, r1
    104e:	24ff      	movs	r4, #255	; 0xff
    1050:	e6f3      	b.n	e3a <__aeabi_fadd+0x2e>
    1052:	0013      	movs	r3, r2
    1054:	0034      	movs	r4, r6
    1056:	000d      	movs	r5, r1
    1058:	e6ef      	b.n	e3a <__aeabi_fadd+0x2e>
    105a:	2eff      	cmp	r6, #255	; 0xff
    105c:	d035      	beq.n	10ca <__aeabi_fadd+0x2be>
    105e:	2480      	movs	r4, #128	; 0x80
    1060:	04e4      	lsls	r4, r4, #19
    1062:	4249      	negs	r1, r1
    1064:	4323      	orrs	r3, r4
    1066:	e7df      	b.n	1028 <__aeabi_fadd+0x21c>
    1068:	2a00      	cmp	r2, #0
    106a:	d100      	bne.n	106e <__aeabi_fadd+0x262>
    106c:	e6e5      	b.n	e3a <__aeabi_fadd+0x2e>
    106e:	2780      	movs	r7, #128	; 0x80
    1070:	1a98      	subs	r0, r3, r2
    1072:	04ff      	lsls	r7, r7, #19
    1074:	4007      	ands	r7, r0
    1076:	d100      	bne.n	107a <__aeabi_fadd+0x26e>
    1078:	e752      	b.n	f20 <__aeabi_fadd+0x114>
    107a:	1ad3      	subs	r3, r2, r3
    107c:	000d      	movs	r5, r1
    107e:	e6dc      	b.n	e3a <__aeabi_fadd+0x2e>
    1080:	24ff      	movs	r4, #255	; 0xff
    1082:	2a00      	cmp	r2, #0
    1084:	d100      	bne.n	1088 <__aeabi_fadd+0x27c>
    1086:	e6d8      	b.n	e3a <__aeabi_fadd+0x2e>
    1088:	2080      	movs	r0, #128	; 0x80
    108a:	08db      	lsrs	r3, r3, #3
    108c:	03c0      	lsls	r0, r0, #15
    108e:	4203      	tst	r3, r0
    1090:	d004      	beq.n	109c <__aeabi_fadd+0x290>
    1092:	08d2      	lsrs	r2, r2, #3
    1094:	4202      	tst	r2, r0
    1096:	d101      	bne.n	109c <__aeabi_fadd+0x290>
    1098:	0013      	movs	r3, r2
    109a:	000d      	movs	r5, r1
    109c:	00db      	lsls	r3, r3, #3
    109e:	24ff      	movs	r4, #255	; 0xff
    10a0:	e6cb      	b.n	e3a <__aeabi_fadd+0x2e>
    10a2:	0013      	movs	r3, r2
    10a4:	24ff      	movs	r4, #255	; 0xff
    10a6:	000d      	movs	r5, r1
    10a8:	e6c7      	b.n	e3a <__aeabi_fadd+0x2e>
    10aa:	2b00      	cmp	r3, #0
    10ac:	d00d      	beq.n	10ca <__aeabi_fadd+0x2be>
    10ae:	24ff      	movs	r4, #255	; 0xff
    10b0:	2a00      	cmp	r2, #0
    10b2:	d100      	bne.n	10b6 <__aeabi_fadd+0x2aa>
    10b4:	e6c1      	b.n	e3a <__aeabi_fadd+0x2e>
    10b6:	2180      	movs	r1, #128	; 0x80
    10b8:	08db      	lsrs	r3, r3, #3
    10ba:	03c9      	lsls	r1, r1, #15
    10bc:	420b      	tst	r3, r1
    10be:	d0ed      	beq.n	109c <__aeabi_fadd+0x290>
    10c0:	08d2      	lsrs	r2, r2, #3
    10c2:	420a      	tst	r2, r1
    10c4:	d1ea      	bne.n	109c <__aeabi_fadd+0x290>
    10c6:	0013      	movs	r3, r2
    10c8:	e7e8      	b.n	109c <__aeabi_fadd+0x290>
    10ca:	0013      	movs	r3, r2
    10cc:	24ff      	movs	r4, #255	; 0xff
    10ce:	e6b4      	b.n	e3a <__aeabi_fadd+0x2e>
    10d0:	2301      	movs	r3, #1
    10d2:	e772      	b.n	fba <__aeabi_fadd+0x1ae>
    10d4:	0013      	movs	r3, r2
    10d6:	0034      	movs	r4, r6
    10d8:	e6af      	b.n	e3a <__aeabi_fadd+0x2e>
    10da:	2700      	movs	r7, #0
    10dc:	2000      	movs	r0, #0
    10de:	e722      	b.n	f26 <__aeabi_fadd+0x11a>
    10e0:	2780      	movs	r7, #128	; 0x80
    10e2:	2000      	movs	r0, #0
    10e4:	03ff      	lsls	r7, r7, #15
    10e6:	e6f1      	b.n	ecc <__aeabi_fadd+0xc0>
    10e8:	0013      	movs	r3, r2
    10ea:	e6a6      	b.n	e3a <__aeabi_fadd+0x2e>
    10ec:	2301      	movs	r3, #1
    10ee:	e7a5      	b.n	103c <__aeabi_fadd+0x230>
    10f0:	7dffffff 	.word	0x7dffffff
    10f4:	fbffffff 	.word	0xfbffffff

000010f8 <__aeabi_fdiv>:
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	4656      	mov	r6, sl
    10fc:	4644      	mov	r4, r8
    10fe:	465f      	mov	r7, fp
    1100:	464d      	mov	r5, r9
    1102:	b4f0      	push	{r4, r5, r6, r7}
    1104:	0244      	lsls	r4, r0, #9
    1106:	0046      	lsls	r6, r0, #1
    1108:	0fc7      	lsrs	r7, r0, #31
    110a:	b083      	sub	sp, #12
    110c:	4688      	mov	r8, r1
    110e:	0a65      	lsrs	r5, r4, #9
    1110:	0e36      	lsrs	r6, r6, #24
    1112:	46ba      	mov	sl, r7
    1114:	d03d      	beq.n	1192 <__aeabi_fdiv+0x9a>
    1116:	2eff      	cmp	r6, #255	; 0xff
    1118:	d022      	beq.n	1160 <__aeabi_fdiv+0x68>
    111a:	2300      	movs	r3, #0
    111c:	00ec      	lsls	r4, r5, #3
    111e:	2580      	movs	r5, #128	; 0x80
    1120:	4699      	mov	r9, r3
    1122:	469b      	mov	fp, r3
    1124:	04ed      	lsls	r5, r5, #19
    1126:	4325      	orrs	r5, r4
    1128:	3e7f      	subs	r6, #127	; 0x7f
    112a:	4643      	mov	r3, r8
    112c:	025c      	lsls	r4, r3, #9
    112e:	0058      	lsls	r0, r3, #1
    1130:	0fdb      	lsrs	r3, r3, #31
    1132:	0a64      	lsrs	r4, r4, #9
    1134:	0e00      	lsrs	r0, r0, #24
    1136:	4698      	mov	r8, r3
    1138:	d036      	beq.n	11a8 <__aeabi_fdiv+0xb0>
    113a:	28ff      	cmp	r0, #255	; 0xff
    113c:	d030      	beq.n	11a0 <__aeabi_fdiv+0xa8>
    113e:	2380      	movs	r3, #128	; 0x80
    1140:	2100      	movs	r1, #0
    1142:	00e4      	lsls	r4, r4, #3
    1144:	04db      	lsls	r3, r3, #19
    1146:	431c      	orrs	r4, r3
    1148:	387f      	subs	r0, #127	; 0x7f
    114a:	1a30      	subs	r0, r6, r0
    114c:	9001      	str	r0, [sp, #4]
    114e:	4648      	mov	r0, r9
    1150:	4642      	mov	r2, r8
    1152:	4308      	orrs	r0, r1
    1154:	4e72      	ldr	r6, [pc, #456]	; (1320 <__aeabi_fdiv+0x228>)
    1156:	0080      	lsls	r0, r0, #2
    1158:	5830      	ldr	r0, [r6, r0]
    115a:	407a      	eors	r2, r7
    115c:	0013      	movs	r3, r2
    115e:	4687      	mov	pc, r0
    1160:	2d00      	cmp	r5, #0
    1162:	d144      	bne.n	11ee <__aeabi_fdiv+0xf6>
    1164:	2308      	movs	r3, #8
    1166:	4699      	mov	r9, r3
    1168:	3b06      	subs	r3, #6
    116a:	469b      	mov	fp, r3
    116c:	e7dd      	b.n	112a <__aeabi_fdiv+0x32>
    116e:	2201      	movs	r2, #1
    1170:	20ff      	movs	r0, #255	; 0xff
    1172:	2400      	movs	r4, #0
    1174:	401a      	ands	r2, r3
    1176:	0264      	lsls	r4, r4, #9
    1178:	05c3      	lsls	r3, r0, #23
    117a:	0a64      	lsrs	r4, r4, #9
    117c:	07d2      	lsls	r2, r2, #31
    117e:	431c      	orrs	r4, r3
    1180:	4314      	orrs	r4, r2
    1182:	0020      	movs	r0, r4
    1184:	b003      	add	sp, #12
    1186:	bc3c      	pop	{r2, r3, r4, r5}
    1188:	4690      	mov	r8, r2
    118a:	4699      	mov	r9, r3
    118c:	46a2      	mov	sl, r4
    118e:	46ab      	mov	fp, r5
    1190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1192:	2d00      	cmp	r5, #0
    1194:	d120      	bne.n	11d8 <__aeabi_fdiv+0xe0>
    1196:	2304      	movs	r3, #4
    1198:	4699      	mov	r9, r3
    119a:	3b03      	subs	r3, #3
    119c:	469b      	mov	fp, r3
    119e:	e7c4      	b.n	112a <__aeabi_fdiv+0x32>
    11a0:	2c00      	cmp	r4, #0
    11a2:	d117      	bne.n	11d4 <__aeabi_fdiv+0xdc>
    11a4:	2102      	movs	r1, #2
    11a6:	e002      	b.n	11ae <__aeabi_fdiv+0xb6>
    11a8:	2c00      	cmp	r4, #0
    11aa:	d10a      	bne.n	11c2 <__aeabi_fdiv+0xca>
    11ac:	2101      	movs	r1, #1
    11ae:	1a32      	subs	r2, r6, r0
    11b0:	9201      	str	r2, [sp, #4]
    11b2:	464a      	mov	r2, r9
    11b4:	4643      	mov	r3, r8
    11b6:	430a      	orrs	r2, r1
    11b8:	485a      	ldr	r0, [pc, #360]	; (1324 <__aeabi_fdiv+0x22c>)
    11ba:	0092      	lsls	r2, r2, #2
    11bc:	5882      	ldr	r2, [r0, r2]
    11be:	407b      	eors	r3, r7
    11c0:	4697      	mov	pc, r2
    11c2:	0020      	movs	r0, r4
    11c4:	f000 fcd4 	bl	1b70 <__clzsi2>
    11c8:	1f43      	subs	r3, r0, #5
    11ca:	3076      	adds	r0, #118	; 0x76
    11cc:	409c      	lsls	r4, r3
    11ce:	4240      	negs	r0, r0
    11d0:	2100      	movs	r1, #0
    11d2:	e7ba      	b.n	114a <__aeabi_fdiv+0x52>
    11d4:	2103      	movs	r1, #3
    11d6:	e7b8      	b.n	114a <__aeabi_fdiv+0x52>
    11d8:	0028      	movs	r0, r5
    11da:	f000 fcc9 	bl	1b70 <__clzsi2>
    11de:	1f43      	subs	r3, r0, #5
    11e0:	409d      	lsls	r5, r3
    11e2:	2300      	movs	r3, #0
    11e4:	3076      	adds	r0, #118	; 0x76
    11e6:	4246      	negs	r6, r0
    11e8:	4699      	mov	r9, r3
    11ea:	469b      	mov	fp, r3
    11ec:	e79d      	b.n	112a <__aeabi_fdiv+0x32>
    11ee:	230c      	movs	r3, #12
    11f0:	4699      	mov	r9, r3
    11f2:	3b09      	subs	r3, #9
    11f4:	469b      	mov	fp, r3
    11f6:	e798      	b.n	112a <__aeabi_fdiv+0x32>
    11f8:	2480      	movs	r4, #128	; 0x80
    11fa:	2200      	movs	r2, #0
    11fc:	03e4      	lsls	r4, r4, #15
    11fe:	20ff      	movs	r0, #255	; 0xff
    1200:	e7b9      	b.n	1176 <__aeabi_fdiv+0x7e>
    1202:	2400      	movs	r4, #0
    1204:	46c2      	mov	sl, r8
    1206:	468b      	mov	fp, r1
    1208:	465a      	mov	r2, fp
    120a:	4653      	mov	r3, sl
    120c:	2a02      	cmp	r2, #2
    120e:	d0ae      	beq.n	116e <__aeabi_fdiv+0x76>
    1210:	2a03      	cmp	r2, #3
    1212:	d07d      	beq.n	1310 <__aeabi_fdiv+0x218>
    1214:	2a01      	cmp	r2, #1
    1216:	d131      	bne.n	127c <__aeabi_fdiv+0x184>
    1218:	2201      	movs	r2, #1
    121a:	2000      	movs	r0, #0
    121c:	401a      	ands	r2, r3
    121e:	2400      	movs	r4, #0
    1220:	e7a9      	b.n	1176 <__aeabi_fdiv+0x7e>
    1222:	2201      	movs	r2, #1
    1224:	1a10      	subs	r0, r2, r0
    1226:	281b      	cmp	r0, #27
    1228:	dd56      	ble.n	12d8 <__aeabi_fdiv+0x1e0>
    122a:	401a      	ands	r2, r3
    122c:	2000      	movs	r0, #0
    122e:	2400      	movs	r4, #0
    1230:	e7a1      	b.n	1176 <__aeabi_fdiv+0x7e>
    1232:	2380      	movs	r3, #128	; 0x80
    1234:	03db      	lsls	r3, r3, #15
    1236:	421d      	tst	r5, r3
    1238:	d14b      	bne.n	12d2 <__aeabi_fdiv+0x1da>
    123a:	2380      	movs	r3, #128	; 0x80
    123c:	03db      	lsls	r3, r3, #15
    123e:	432b      	orrs	r3, r5
    1240:	025c      	lsls	r4, r3, #9
    1242:	0a64      	lsrs	r4, r4, #9
    1244:	003a      	movs	r2, r7
    1246:	20ff      	movs	r0, #255	; 0xff
    1248:	e795      	b.n	1176 <__aeabi_fdiv+0x7e>
    124a:	016d      	lsls	r5, r5, #5
    124c:	0160      	lsls	r0, r4, #5
    124e:	4285      	cmp	r5, r0
    1250:	d230      	bcs.n	12b4 <__aeabi_fdiv+0x1bc>
    1252:	9a01      	ldr	r2, [sp, #4]
    1254:	2400      	movs	r4, #0
    1256:	3a01      	subs	r2, #1
    1258:	9201      	str	r2, [sp, #4]
    125a:	221b      	movs	r2, #27
    125c:	2701      	movs	r7, #1
    125e:	0029      	movs	r1, r5
    1260:	0064      	lsls	r4, r4, #1
    1262:	006d      	lsls	r5, r5, #1
    1264:	2900      	cmp	r1, #0
    1266:	db01      	blt.n	126c <__aeabi_fdiv+0x174>
    1268:	42a8      	cmp	r0, r5
    126a:	d801      	bhi.n	1270 <__aeabi_fdiv+0x178>
    126c:	1a2d      	subs	r5, r5, r0
    126e:	433c      	orrs	r4, r7
    1270:	3a01      	subs	r2, #1
    1272:	2a00      	cmp	r2, #0
    1274:	d1f3      	bne.n	125e <__aeabi_fdiv+0x166>
    1276:	1e6a      	subs	r2, r5, #1
    1278:	4195      	sbcs	r5, r2
    127a:	432c      	orrs	r4, r5
    127c:	9801      	ldr	r0, [sp, #4]
    127e:	307f      	adds	r0, #127	; 0x7f
    1280:	2800      	cmp	r0, #0
    1282:	ddce      	ble.n	1222 <__aeabi_fdiv+0x12a>
    1284:	0762      	lsls	r2, r4, #29
    1286:	d004      	beq.n	1292 <__aeabi_fdiv+0x19a>
    1288:	220f      	movs	r2, #15
    128a:	4022      	ands	r2, r4
    128c:	2a04      	cmp	r2, #4
    128e:	d000      	beq.n	1292 <__aeabi_fdiv+0x19a>
    1290:	3404      	adds	r4, #4
    1292:	0122      	lsls	r2, r4, #4
    1294:	d503      	bpl.n	129e <__aeabi_fdiv+0x1a6>
    1296:	4a24      	ldr	r2, [pc, #144]	; (1328 <__aeabi_fdiv+0x230>)
    1298:	9801      	ldr	r0, [sp, #4]
    129a:	4014      	ands	r4, r2
    129c:	3080      	adds	r0, #128	; 0x80
    129e:	28fe      	cmp	r0, #254	; 0xfe
    12a0:	dd00      	ble.n	12a4 <__aeabi_fdiv+0x1ac>
    12a2:	e764      	b.n	116e <__aeabi_fdiv+0x76>
    12a4:	2201      	movs	r2, #1
    12a6:	01a4      	lsls	r4, r4, #6
    12a8:	0a64      	lsrs	r4, r4, #9
    12aa:	b2c0      	uxtb	r0, r0
    12ac:	401a      	ands	r2, r3
    12ae:	e762      	b.n	1176 <__aeabi_fdiv+0x7e>
    12b0:	002c      	movs	r4, r5
    12b2:	e7a9      	b.n	1208 <__aeabi_fdiv+0x110>
    12b4:	1a2d      	subs	r5, r5, r0
    12b6:	221a      	movs	r2, #26
    12b8:	2401      	movs	r4, #1
    12ba:	e7cf      	b.n	125c <__aeabi_fdiv+0x164>
    12bc:	026b      	lsls	r3, r5, #9
    12be:	d5bc      	bpl.n	123a <__aeabi_fdiv+0x142>
    12c0:	2400      	movs	r4, #0
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	03db      	lsls	r3, r3, #15
    12c6:	431c      	orrs	r4, r3
    12c8:	0264      	lsls	r4, r4, #9
    12ca:	0a64      	lsrs	r4, r4, #9
    12cc:	4642      	mov	r2, r8
    12ce:	20ff      	movs	r0, #255	; 0xff
    12d0:	e751      	b.n	1176 <__aeabi_fdiv+0x7e>
    12d2:	421c      	tst	r4, r3
    12d4:	d1b3      	bne.n	123e <__aeabi_fdiv+0x146>
    12d6:	e7f4      	b.n	12c2 <__aeabi_fdiv+0x1ca>
    12d8:	0021      	movs	r1, r4
    12da:	2220      	movs	r2, #32
    12dc:	40c1      	lsrs	r1, r0
    12de:	1a10      	subs	r0, r2, r0
    12e0:	4084      	lsls	r4, r0
    12e2:	1e62      	subs	r2, r4, #1
    12e4:	4194      	sbcs	r4, r2
    12e6:	430c      	orrs	r4, r1
    12e8:	0762      	lsls	r2, r4, #29
    12ea:	d004      	beq.n	12f6 <__aeabi_fdiv+0x1fe>
    12ec:	220f      	movs	r2, #15
    12ee:	4022      	ands	r2, r4
    12f0:	2a04      	cmp	r2, #4
    12f2:	d000      	beq.n	12f6 <__aeabi_fdiv+0x1fe>
    12f4:	3404      	adds	r4, #4
    12f6:	0162      	lsls	r2, r4, #5
    12f8:	d504      	bpl.n	1304 <__aeabi_fdiv+0x20c>
    12fa:	2201      	movs	r2, #1
    12fc:	2001      	movs	r0, #1
    12fe:	401a      	ands	r2, r3
    1300:	2400      	movs	r4, #0
    1302:	e738      	b.n	1176 <__aeabi_fdiv+0x7e>
    1304:	2201      	movs	r2, #1
    1306:	01a4      	lsls	r4, r4, #6
    1308:	0a64      	lsrs	r4, r4, #9
    130a:	401a      	ands	r2, r3
    130c:	2000      	movs	r0, #0
    130e:	e732      	b.n	1176 <__aeabi_fdiv+0x7e>
    1310:	2380      	movs	r3, #128	; 0x80
    1312:	03db      	lsls	r3, r3, #15
    1314:	431c      	orrs	r4, r3
    1316:	0264      	lsls	r4, r4, #9
    1318:	0a64      	lsrs	r4, r4, #9
    131a:	4652      	mov	r2, sl
    131c:	20ff      	movs	r0, #255	; 0xff
    131e:	e72a      	b.n	1176 <__aeabi_fdiv+0x7e>
    1320:	00001f1c 	.word	0x00001f1c
    1324:	00001f5c 	.word	0x00001f5c
    1328:	f7ffffff 	.word	0xf7ffffff

0000132c <__aeabi_i2f>:
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	2800      	cmp	r0, #0
    1330:	d030      	beq.n	1394 <__aeabi_i2f+0x68>
    1332:	17c3      	asrs	r3, r0, #31
    1334:	18c5      	adds	r5, r0, r3
    1336:	405d      	eors	r5, r3
    1338:	0fc4      	lsrs	r4, r0, #31
    133a:	0028      	movs	r0, r5
    133c:	f000 fc18 	bl	1b70 <__clzsi2>
    1340:	239e      	movs	r3, #158	; 0x9e
    1342:	1a1b      	subs	r3, r3, r0
    1344:	2b96      	cmp	r3, #150	; 0x96
    1346:	dc0d      	bgt.n	1364 <__aeabi_i2f+0x38>
    1348:	2296      	movs	r2, #150	; 0x96
    134a:	1ad2      	subs	r2, r2, r3
    134c:	4095      	lsls	r5, r2
    134e:	026a      	lsls	r2, r5, #9
    1350:	0a52      	lsrs	r2, r2, #9
    1352:	b2d8      	uxtb	r0, r3
    1354:	0252      	lsls	r2, r2, #9
    1356:	05c0      	lsls	r0, r0, #23
    1358:	0a52      	lsrs	r2, r2, #9
    135a:	07e4      	lsls	r4, r4, #31
    135c:	4302      	orrs	r2, r0
    135e:	4322      	orrs	r2, r4
    1360:	0010      	movs	r0, r2
    1362:	bd70      	pop	{r4, r5, r6, pc}
    1364:	2b99      	cmp	r3, #153	; 0x99
    1366:	dc19      	bgt.n	139c <__aeabi_i2f+0x70>
    1368:	2299      	movs	r2, #153	; 0x99
    136a:	1ad2      	subs	r2, r2, r3
    136c:	4095      	lsls	r5, r2
    136e:	4a12      	ldr	r2, [pc, #72]	; (13b8 <__aeabi_i2f+0x8c>)
    1370:	402a      	ands	r2, r5
    1372:	0769      	lsls	r1, r5, #29
    1374:	d004      	beq.n	1380 <__aeabi_i2f+0x54>
    1376:	210f      	movs	r1, #15
    1378:	400d      	ands	r5, r1
    137a:	2d04      	cmp	r5, #4
    137c:	d000      	beq.n	1380 <__aeabi_i2f+0x54>
    137e:	3204      	adds	r2, #4
    1380:	0151      	lsls	r1, r2, #5
    1382:	d503      	bpl.n	138c <__aeabi_i2f+0x60>
    1384:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <__aeabi_i2f+0x8c>)
    1386:	401a      	ands	r2, r3
    1388:	239f      	movs	r3, #159	; 0x9f
    138a:	1a1b      	subs	r3, r3, r0
    138c:	0192      	lsls	r2, r2, #6
    138e:	0a52      	lsrs	r2, r2, #9
    1390:	b2d8      	uxtb	r0, r3
    1392:	e7df      	b.n	1354 <__aeabi_i2f+0x28>
    1394:	2400      	movs	r4, #0
    1396:	2000      	movs	r0, #0
    1398:	2200      	movs	r2, #0
    139a:	e7db      	b.n	1354 <__aeabi_i2f+0x28>
    139c:	2205      	movs	r2, #5
    139e:	002e      	movs	r6, r5
    13a0:	1a12      	subs	r2, r2, r0
    13a2:	21b9      	movs	r1, #185	; 0xb9
    13a4:	40d6      	lsrs	r6, r2
    13a6:	002a      	movs	r2, r5
    13a8:	1ac9      	subs	r1, r1, r3
    13aa:	408a      	lsls	r2, r1
    13ac:	1e55      	subs	r5, r2, #1
    13ae:	41aa      	sbcs	r2, r5
    13b0:	0035      	movs	r5, r6
    13b2:	4315      	orrs	r5, r2
    13b4:	e7db      	b.n	136e <__aeabi_i2f+0x42>
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	fbffffff 	.word	0xfbffffff

000013bc <__aeabi_ui2f>:
    13bc:	b570      	push	{r4, r5, r6, lr}
    13be:	1e04      	subs	r4, r0, #0
    13c0:	d028      	beq.n	1414 <__aeabi_ui2f+0x58>
    13c2:	f000 fbd5 	bl	1b70 <__clzsi2>
    13c6:	239e      	movs	r3, #158	; 0x9e
    13c8:	1a1b      	subs	r3, r3, r0
    13ca:	2b96      	cmp	r3, #150	; 0x96
    13cc:	dc0a      	bgt.n	13e4 <__aeabi_ui2f+0x28>
    13ce:	2296      	movs	r2, #150	; 0x96
    13d0:	1ad2      	subs	r2, r2, r3
    13d2:	4094      	lsls	r4, r2
    13d4:	0262      	lsls	r2, r4, #9
    13d6:	0a52      	lsrs	r2, r2, #9
    13d8:	b2d8      	uxtb	r0, r3
    13da:	0252      	lsls	r2, r2, #9
    13dc:	0a52      	lsrs	r2, r2, #9
    13de:	05c0      	lsls	r0, r0, #23
    13e0:	4310      	orrs	r0, r2
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	2b99      	cmp	r3, #153	; 0x99
    13e6:	dc18      	bgt.n	141a <__aeabi_ui2f+0x5e>
    13e8:	2299      	movs	r2, #153	; 0x99
    13ea:	1ad2      	subs	r2, r2, r3
    13ec:	4094      	lsls	r4, r2
    13ee:	4a11      	ldr	r2, [pc, #68]	; (1434 <__aeabi_ui2f+0x78>)
    13f0:	4022      	ands	r2, r4
    13f2:	0761      	lsls	r1, r4, #29
    13f4:	d004      	beq.n	1400 <__aeabi_ui2f+0x44>
    13f6:	210f      	movs	r1, #15
    13f8:	400c      	ands	r4, r1
    13fa:	2c04      	cmp	r4, #4
    13fc:	d000      	beq.n	1400 <__aeabi_ui2f+0x44>
    13fe:	3204      	adds	r2, #4
    1400:	0151      	lsls	r1, r2, #5
    1402:	d503      	bpl.n	140c <__aeabi_ui2f+0x50>
    1404:	4b0b      	ldr	r3, [pc, #44]	; (1434 <__aeabi_ui2f+0x78>)
    1406:	401a      	ands	r2, r3
    1408:	239f      	movs	r3, #159	; 0x9f
    140a:	1a1b      	subs	r3, r3, r0
    140c:	0192      	lsls	r2, r2, #6
    140e:	0a52      	lsrs	r2, r2, #9
    1410:	b2d8      	uxtb	r0, r3
    1412:	e7e2      	b.n	13da <__aeabi_ui2f+0x1e>
    1414:	2000      	movs	r0, #0
    1416:	2200      	movs	r2, #0
    1418:	e7df      	b.n	13da <__aeabi_ui2f+0x1e>
    141a:	2205      	movs	r2, #5
    141c:	0025      	movs	r5, r4
    141e:	1a12      	subs	r2, r2, r0
    1420:	21b9      	movs	r1, #185	; 0xb9
    1422:	40d5      	lsrs	r5, r2
    1424:	0022      	movs	r2, r4
    1426:	1ac9      	subs	r1, r1, r3
    1428:	408a      	lsls	r2, r1
    142a:	1e54      	subs	r4, r2, #1
    142c:	41a2      	sbcs	r2, r4
    142e:	002c      	movs	r4, r5
    1430:	4314      	orrs	r4, r2
    1432:	e7dc      	b.n	13ee <__aeabi_ui2f+0x32>
    1434:	fbffffff 	.word	0xfbffffff

00001438 <__aeabi_dmul>:
    1438:	b5f0      	push	{r4, r5, r6, r7, lr}
    143a:	465f      	mov	r7, fp
    143c:	4656      	mov	r6, sl
    143e:	464d      	mov	r5, r9
    1440:	4644      	mov	r4, r8
    1442:	b4f0      	push	{r4, r5, r6, r7}
    1444:	030d      	lsls	r5, r1, #12
    1446:	4699      	mov	r9, r3
    1448:	004e      	lsls	r6, r1, #1
    144a:	0b2b      	lsrs	r3, r5, #12
    144c:	b087      	sub	sp, #28
    144e:	0007      	movs	r7, r0
    1450:	4692      	mov	sl, r2
    1452:	4680      	mov	r8, r0
    1454:	469b      	mov	fp, r3
    1456:	0d76      	lsrs	r6, r6, #21
    1458:	0fcc      	lsrs	r4, r1, #31
    145a:	2e00      	cmp	r6, #0
    145c:	d069      	beq.n	1532 <__aeabi_dmul+0xfa>
    145e:	4b6d      	ldr	r3, [pc, #436]	; (1614 <__aeabi_dmul+0x1dc>)
    1460:	429e      	cmp	r6, r3
    1462:	d035      	beq.n	14d0 <__aeabi_dmul+0x98>
    1464:	465b      	mov	r3, fp
    1466:	2280      	movs	r2, #128	; 0x80
    1468:	00dd      	lsls	r5, r3, #3
    146a:	0412      	lsls	r2, r2, #16
    146c:	0f43      	lsrs	r3, r0, #29
    146e:	4313      	orrs	r3, r2
    1470:	432b      	orrs	r3, r5
    1472:	469b      	mov	fp, r3
    1474:	00c3      	lsls	r3, r0, #3
    1476:	4698      	mov	r8, r3
    1478:	4b67      	ldr	r3, [pc, #412]	; (1618 <__aeabi_dmul+0x1e0>)
    147a:	2700      	movs	r7, #0
    147c:	469c      	mov	ip, r3
    147e:	2300      	movs	r3, #0
    1480:	4466      	add	r6, ip
    1482:	9301      	str	r3, [sp, #4]
    1484:	464a      	mov	r2, r9
    1486:	0315      	lsls	r5, r2, #12
    1488:	0050      	lsls	r0, r2, #1
    148a:	0fd2      	lsrs	r2, r2, #31
    148c:	4653      	mov	r3, sl
    148e:	0b2d      	lsrs	r5, r5, #12
    1490:	0d40      	lsrs	r0, r0, #21
    1492:	4691      	mov	r9, r2
    1494:	d100      	bne.n	1498 <__aeabi_dmul+0x60>
    1496:	e076      	b.n	1586 <__aeabi_dmul+0x14e>
    1498:	4a5e      	ldr	r2, [pc, #376]	; (1614 <__aeabi_dmul+0x1dc>)
    149a:	4290      	cmp	r0, r2
    149c:	d06c      	beq.n	1578 <__aeabi_dmul+0x140>
    149e:	2280      	movs	r2, #128	; 0x80
    14a0:	0f5b      	lsrs	r3, r3, #29
    14a2:	0412      	lsls	r2, r2, #16
    14a4:	4313      	orrs	r3, r2
    14a6:	4a5c      	ldr	r2, [pc, #368]	; (1618 <__aeabi_dmul+0x1e0>)
    14a8:	00ed      	lsls	r5, r5, #3
    14aa:	4694      	mov	ip, r2
    14ac:	431d      	orrs	r5, r3
    14ae:	4653      	mov	r3, sl
    14b0:	2200      	movs	r2, #0
    14b2:	00db      	lsls	r3, r3, #3
    14b4:	4460      	add	r0, ip
    14b6:	4649      	mov	r1, r9
    14b8:	1836      	adds	r6, r6, r0
    14ba:	1c70      	adds	r0, r6, #1
    14bc:	4061      	eors	r1, r4
    14be:	9002      	str	r0, [sp, #8]
    14c0:	4317      	orrs	r7, r2
    14c2:	2f0f      	cmp	r7, #15
    14c4:	d900      	bls.n	14c8 <__aeabi_dmul+0x90>
    14c6:	e0af      	b.n	1628 <__aeabi_dmul+0x1f0>
    14c8:	4854      	ldr	r0, [pc, #336]	; (161c <__aeabi_dmul+0x1e4>)
    14ca:	00bf      	lsls	r7, r7, #2
    14cc:	59c7      	ldr	r7, [r0, r7]
    14ce:	46bf      	mov	pc, r7
    14d0:	465b      	mov	r3, fp
    14d2:	431f      	orrs	r7, r3
    14d4:	d000      	beq.n	14d8 <__aeabi_dmul+0xa0>
    14d6:	e088      	b.n	15ea <__aeabi_dmul+0x1b2>
    14d8:	2300      	movs	r3, #0
    14da:	469b      	mov	fp, r3
    14dc:	4698      	mov	r8, r3
    14de:	3302      	adds	r3, #2
    14e0:	2708      	movs	r7, #8
    14e2:	9301      	str	r3, [sp, #4]
    14e4:	e7ce      	b.n	1484 <__aeabi_dmul+0x4c>
    14e6:	4649      	mov	r1, r9
    14e8:	2a02      	cmp	r2, #2
    14ea:	d06a      	beq.n	15c2 <__aeabi_dmul+0x18a>
    14ec:	2a03      	cmp	r2, #3
    14ee:	d100      	bne.n	14f2 <__aeabi_dmul+0xba>
    14f0:	e209      	b.n	1906 <__aeabi_dmul+0x4ce>
    14f2:	2a01      	cmp	r2, #1
    14f4:	d000      	beq.n	14f8 <__aeabi_dmul+0xc0>
    14f6:	e1bb      	b.n	1870 <__aeabi_dmul+0x438>
    14f8:	4011      	ands	r1, r2
    14fa:	2200      	movs	r2, #0
    14fc:	2300      	movs	r3, #0
    14fe:	2500      	movs	r5, #0
    1500:	4690      	mov	r8, r2
    1502:	b2cc      	uxtb	r4, r1
    1504:	2100      	movs	r1, #0
    1506:	032d      	lsls	r5, r5, #12
    1508:	0d0a      	lsrs	r2, r1, #20
    150a:	0512      	lsls	r2, r2, #20
    150c:	0b2d      	lsrs	r5, r5, #12
    150e:	4315      	orrs	r5, r2
    1510:	4a43      	ldr	r2, [pc, #268]	; (1620 <__aeabi_dmul+0x1e8>)
    1512:	051b      	lsls	r3, r3, #20
    1514:	4015      	ands	r5, r2
    1516:	431d      	orrs	r5, r3
    1518:	006d      	lsls	r5, r5, #1
    151a:	07e4      	lsls	r4, r4, #31
    151c:	086d      	lsrs	r5, r5, #1
    151e:	4325      	orrs	r5, r4
    1520:	4640      	mov	r0, r8
    1522:	0029      	movs	r1, r5
    1524:	b007      	add	sp, #28
    1526:	bc3c      	pop	{r2, r3, r4, r5}
    1528:	4690      	mov	r8, r2
    152a:	4699      	mov	r9, r3
    152c:	46a2      	mov	sl, r4
    152e:	46ab      	mov	fp, r5
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1532:	4303      	orrs	r3, r0
    1534:	d052      	beq.n	15dc <__aeabi_dmul+0x1a4>
    1536:	465b      	mov	r3, fp
    1538:	2b00      	cmp	r3, #0
    153a:	d100      	bne.n	153e <__aeabi_dmul+0x106>
    153c:	e18a      	b.n	1854 <__aeabi_dmul+0x41c>
    153e:	4658      	mov	r0, fp
    1540:	f000 fb16 	bl	1b70 <__clzsi2>
    1544:	0003      	movs	r3, r0
    1546:	3b0b      	subs	r3, #11
    1548:	2b1c      	cmp	r3, #28
    154a:	dd00      	ble.n	154e <__aeabi_dmul+0x116>
    154c:	e17b      	b.n	1846 <__aeabi_dmul+0x40e>
    154e:	221d      	movs	r2, #29
    1550:	1ad3      	subs	r3, r2, r3
    1552:	003a      	movs	r2, r7
    1554:	0001      	movs	r1, r0
    1556:	465d      	mov	r5, fp
    1558:	40da      	lsrs	r2, r3
    155a:	3908      	subs	r1, #8
    155c:	408d      	lsls	r5, r1
    155e:	0013      	movs	r3, r2
    1560:	408f      	lsls	r7, r1
    1562:	432b      	orrs	r3, r5
    1564:	469b      	mov	fp, r3
    1566:	46b8      	mov	r8, r7
    1568:	4b2e      	ldr	r3, [pc, #184]	; (1624 <__aeabi_dmul+0x1ec>)
    156a:	2700      	movs	r7, #0
    156c:	469c      	mov	ip, r3
    156e:	2300      	movs	r3, #0
    1570:	4460      	add	r0, ip
    1572:	4246      	negs	r6, r0
    1574:	9301      	str	r3, [sp, #4]
    1576:	e785      	b.n	1484 <__aeabi_dmul+0x4c>
    1578:	4652      	mov	r2, sl
    157a:	432a      	orrs	r2, r5
    157c:	d12c      	bne.n	15d8 <__aeabi_dmul+0x1a0>
    157e:	2500      	movs	r5, #0
    1580:	2300      	movs	r3, #0
    1582:	2202      	movs	r2, #2
    1584:	e797      	b.n	14b6 <__aeabi_dmul+0x7e>
    1586:	4652      	mov	r2, sl
    1588:	432a      	orrs	r2, r5
    158a:	d021      	beq.n	15d0 <__aeabi_dmul+0x198>
    158c:	2d00      	cmp	r5, #0
    158e:	d100      	bne.n	1592 <__aeabi_dmul+0x15a>
    1590:	e154      	b.n	183c <__aeabi_dmul+0x404>
    1592:	0028      	movs	r0, r5
    1594:	f000 faec 	bl	1b70 <__clzsi2>
    1598:	0003      	movs	r3, r0
    159a:	3b0b      	subs	r3, #11
    159c:	2b1c      	cmp	r3, #28
    159e:	dd00      	ble.n	15a2 <__aeabi_dmul+0x16a>
    15a0:	e146      	b.n	1830 <__aeabi_dmul+0x3f8>
    15a2:	211d      	movs	r1, #29
    15a4:	1acb      	subs	r3, r1, r3
    15a6:	4651      	mov	r1, sl
    15a8:	0002      	movs	r2, r0
    15aa:	40d9      	lsrs	r1, r3
    15ac:	4653      	mov	r3, sl
    15ae:	3a08      	subs	r2, #8
    15b0:	4095      	lsls	r5, r2
    15b2:	4093      	lsls	r3, r2
    15b4:	430d      	orrs	r5, r1
    15b6:	4a1b      	ldr	r2, [pc, #108]	; (1624 <__aeabi_dmul+0x1ec>)
    15b8:	4694      	mov	ip, r2
    15ba:	4460      	add	r0, ip
    15bc:	4240      	negs	r0, r0
    15be:	2200      	movs	r2, #0
    15c0:	e779      	b.n	14b6 <__aeabi_dmul+0x7e>
    15c2:	2401      	movs	r4, #1
    15c4:	2200      	movs	r2, #0
    15c6:	400c      	ands	r4, r1
    15c8:	4b12      	ldr	r3, [pc, #72]	; (1614 <__aeabi_dmul+0x1dc>)
    15ca:	2500      	movs	r5, #0
    15cc:	4690      	mov	r8, r2
    15ce:	e799      	b.n	1504 <__aeabi_dmul+0xcc>
    15d0:	2500      	movs	r5, #0
    15d2:	2300      	movs	r3, #0
    15d4:	2201      	movs	r2, #1
    15d6:	e76e      	b.n	14b6 <__aeabi_dmul+0x7e>
    15d8:	2203      	movs	r2, #3
    15da:	e76c      	b.n	14b6 <__aeabi_dmul+0x7e>
    15dc:	2300      	movs	r3, #0
    15de:	469b      	mov	fp, r3
    15e0:	4698      	mov	r8, r3
    15e2:	3301      	adds	r3, #1
    15e4:	2704      	movs	r7, #4
    15e6:	9301      	str	r3, [sp, #4]
    15e8:	e74c      	b.n	1484 <__aeabi_dmul+0x4c>
    15ea:	2303      	movs	r3, #3
    15ec:	270c      	movs	r7, #12
    15ee:	9301      	str	r3, [sp, #4]
    15f0:	e748      	b.n	1484 <__aeabi_dmul+0x4c>
    15f2:	2300      	movs	r3, #0
    15f4:	2580      	movs	r5, #128	; 0x80
    15f6:	4698      	mov	r8, r3
    15f8:	2400      	movs	r4, #0
    15fa:	032d      	lsls	r5, r5, #12
    15fc:	4b05      	ldr	r3, [pc, #20]	; (1614 <__aeabi_dmul+0x1dc>)
    15fe:	e781      	b.n	1504 <__aeabi_dmul+0xcc>
    1600:	465d      	mov	r5, fp
    1602:	4643      	mov	r3, r8
    1604:	9a01      	ldr	r2, [sp, #4]
    1606:	e76f      	b.n	14e8 <__aeabi_dmul+0xb0>
    1608:	465d      	mov	r5, fp
    160a:	4643      	mov	r3, r8
    160c:	0021      	movs	r1, r4
    160e:	9a01      	ldr	r2, [sp, #4]
    1610:	e76a      	b.n	14e8 <__aeabi_dmul+0xb0>
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	000007ff 	.word	0x000007ff
    1618:	fffffc01 	.word	0xfffffc01
    161c:	00001f9c 	.word	0x00001f9c
    1620:	800fffff 	.word	0x800fffff
    1624:	000003f3 	.word	0x000003f3
    1628:	4642      	mov	r2, r8
    162a:	0c12      	lsrs	r2, r2, #16
    162c:	4691      	mov	r9, r2
    162e:	0c1a      	lsrs	r2, r3, #16
    1630:	4694      	mov	ip, r2
    1632:	4642      	mov	r2, r8
    1634:	0417      	lsls	r7, r2, #16
    1636:	464a      	mov	r2, r9
    1638:	041b      	lsls	r3, r3, #16
    163a:	0c1b      	lsrs	r3, r3, #16
    163c:	435a      	muls	r2, r3
    163e:	4660      	mov	r0, ip
    1640:	4690      	mov	r8, r2
    1642:	464a      	mov	r2, r9
    1644:	4342      	muls	r2, r0
    1646:	0010      	movs	r0, r2
    1648:	9203      	str	r2, [sp, #12]
    164a:	4662      	mov	r2, ip
    164c:	001c      	movs	r4, r3
    164e:	0c3f      	lsrs	r7, r7, #16
    1650:	437a      	muls	r2, r7
    1652:	437c      	muls	r4, r7
    1654:	4442      	add	r2, r8
    1656:	9201      	str	r2, [sp, #4]
    1658:	0c22      	lsrs	r2, r4, #16
    165a:	4692      	mov	sl, r2
    165c:	9a01      	ldr	r2, [sp, #4]
    165e:	4452      	add	r2, sl
    1660:	4590      	cmp	r8, r2
    1662:	d906      	bls.n	1672 <__aeabi_dmul+0x23a>
    1664:	4682      	mov	sl, r0
    1666:	2080      	movs	r0, #128	; 0x80
    1668:	0240      	lsls	r0, r0, #9
    166a:	4680      	mov	r8, r0
    166c:	44c2      	add	sl, r8
    166e:	4650      	mov	r0, sl
    1670:	9003      	str	r0, [sp, #12]
    1672:	0c10      	lsrs	r0, r2, #16
    1674:	9004      	str	r0, [sp, #16]
    1676:	4648      	mov	r0, r9
    1678:	0424      	lsls	r4, r4, #16
    167a:	0c24      	lsrs	r4, r4, #16
    167c:	0412      	lsls	r2, r2, #16
    167e:	1912      	adds	r2, r2, r4
    1680:	9205      	str	r2, [sp, #20]
    1682:	0c2a      	lsrs	r2, r5, #16
    1684:	042d      	lsls	r5, r5, #16
    1686:	0c2d      	lsrs	r5, r5, #16
    1688:	4368      	muls	r0, r5
    168a:	002c      	movs	r4, r5
    168c:	4682      	mov	sl, r0
    168e:	4648      	mov	r0, r9
    1690:	437c      	muls	r4, r7
    1692:	4350      	muls	r0, r2
    1694:	4681      	mov	r9, r0
    1696:	0c20      	lsrs	r0, r4, #16
    1698:	4680      	mov	r8, r0
    169a:	4357      	muls	r7, r2
    169c:	4457      	add	r7, sl
    169e:	4447      	add	r7, r8
    16a0:	45ba      	cmp	sl, r7
    16a2:	d903      	bls.n	16ac <__aeabi_dmul+0x274>
    16a4:	2080      	movs	r0, #128	; 0x80
    16a6:	0240      	lsls	r0, r0, #9
    16a8:	4680      	mov	r8, r0
    16aa:	44c1      	add	r9, r8
    16ac:	0c38      	lsrs	r0, r7, #16
    16ae:	043f      	lsls	r7, r7, #16
    16b0:	46b8      	mov	r8, r7
    16b2:	4448      	add	r0, r9
    16b4:	0424      	lsls	r4, r4, #16
    16b6:	0c24      	lsrs	r4, r4, #16
    16b8:	9001      	str	r0, [sp, #4]
    16ba:	9804      	ldr	r0, [sp, #16]
    16bc:	44a0      	add	r8, r4
    16be:	4440      	add	r0, r8
    16c0:	9004      	str	r0, [sp, #16]
    16c2:	4658      	mov	r0, fp
    16c4:	0c00      	lsrs	r0, r0, #16
    16c6:	4681      	mov	r9, r0
    16c8:	4658      	mov	r0, fp
    16ca:	0404      	lsls	r4, r0, #16
    16cc:	0c20      	lsrs	r0, r4, #16
    16ce:	4682      	mov	sl, r0
    16d0:	0007      	movs	r7, r0
    16d2:	4648      	mov	r0, r9
    16d4:	435f      	muls	r7, r3
    16d6:	464c      	mov	r4, r9
    16d8:	4343      	muls	r3, r0
    16da:	4660      	mov	r0, ip
    16dc:	4360      	muls	r0, r4
    16de:	4664      	mov	r4, ip
    16e0:	4683      	mov	fp, r0
    16e2:	4650      	mov	r0, sl
    16e4:	4344      	muls	r4, r0
    16e6:	0c38      	lsrs	r0, r7, #16
    16e8:	4684      	mov	ip, r0
    16ea:	18e4      	adds	r4, r4, r3
    16ec:	4464      	add	r4, ip
    16ee:	42a3      	cmp	r3, r4
    16f0:	d903      	bls.n	16fa <__aeabi_dmul+0x2c2>
    16f2:	2380      	movs	r3, #128	; 0x80
    16f4:	025b      	lsls	r3, r3, #9
    16f6:	469c      	mov	ip, r3
    16f8:	44e3      	add	fp, ip
    16fa:	4648      	mov	r0, r9
    16fc:	043f      	lsls	r7, r7, #16
    16fe:	0c23      	lsrs	r3, r4, #16
    1700:	0c3f      	lsrs	r7, r7, #16
    1702:	0424      	lsls	r4, r4, #16
    1704:	19e4      	adds	r4, r4, r7
    1706:	4657      	mov	r7, sl
    1708:	4368      	muls	r0, r5
    170a:	436f      	muls	r7, r5
    170c:	4684      	mov	ip, r0
    170e:	464d      	mov	r5, r9
    1710:	4650      	mov	r0, sl
    1712:	4355      	muls	r5, r2
    1714:	4342      	muls	r2, r0
    1716:	0c38      	lsrs	r0, r7, #16
    1718:	4681      	mov	r9, r0
    171a:	4462      	add	r2, ip
    171c:	444a      	add	r2, r9
    171e:	445b      	add	r3, fp
    1720:	4594      	cmp	ip, r2
    1722:	d903      	bls.n	172c <__aeabi_dmul+0x2f4>
    1724:	2080      	movs	r0, #128	; 0x80
    1726:	0240      	lsls	r0, r0, #9
    1728:	4684      	mov	ip, r0
    172a:	4465      	add	r5, ip
    172c:	9803      	ldr	r0, [sp, #12]
    172e:	043f      	lsls	r7, r7, #16
    1730:	4683      	mov	fp, r0
    1732:	9804      	ldr	r0, [sp, #16]
    1734:	0c3f      	lsrs	r7, r7, #16
    1736:	4684      	mov	ip, r0
    1738:	44e3      	add	fp, ip
    173a:	45c3      	cmp	fp, r8
    173c:	4180      	sbcs	r0, r0
    173e:	4240      	negs	r0, r0
    1740:	4682      	mov	sl, r0
    1742:	0410      	lsls	r0, r2, #16
    1744:	4684      	mov	ip, r0
    1746:	9801      	ldr	r0, [sp, #4]
    1748:	4467      	add	r7, ip
    174a:	4684      	mov	ip, r0
    174c:	4467      	add	r7, ip
    174e:	44a3      	add	fp, r4
    1750:	46bc      	mov	ip, r7
    1752:	45a3      	cmp	fp, r4
    1754:	41a4      	sbcs	r4, r4
    1756:	4699      	mov	r9, r3
    1758:	44d4      	add	ip, sl
    175a:	4264      	negs	r4, r4
    175c:	4287      	cmp	r7, r0
    175e:	41bf      	sbcs	r7, r7
    1760:	45d4      	cmp	ip, sl
    1762:	4180      	sbcs	r0, r0
    1764:	44e1      	add	r9, ip
    1766:	46a0      	mov	r8, r4
    1768:	4599      	cmp	r9, r3
    176a:	419b      	sbcs	r3, r3
    176c:	427f      	negs	r7, r7
    176e:	4240      	negs	r0, r0
    1770:	44c8      	add	r8, r9
    1772:	4307      	orrs	r7, r0
    1774:	0c12      	lsrs	r2, r2, #16
    1776:	18ba      	adds	r2, r7, r2
    1778:	45a0      	cmp	r8, r4
    177a:	41a4      	sbcs	r4, r4
    177c:	425f      	negs	r7, r3
    177e:	003b      	movs	r3, r7
    1780:	4264      	negs	r4, r4
    1782:	4323      	orrs	r3, r4
    1784:	18d7      	adds	r7, r2, r3
    1786:	4643      	mov	r3, r8
    1788:	197d      	adds	r5, r7, r5
    178a:	0ddb      	lsrs	r3, r3, #23
    178c:	026d      	lsls	r5, r5, #9
    178e:	431d      	orrs	r5, r3
    1790:	465b      	mov	r3, fp
    1792:	025a      	lsls	r2, r3, #9
    1794:	9b05      	ldr	r3, [sp, #20]
    1796:	431a      	orrs	r2, r3
    1798:	1e53      	subs	r3, r2, #1
    179a:	419a      	sbcs	r2, r3
    179c:	465b      	mov	r3, fp
    179e:	0ddb      	lsrs	r3, r3, #23
    17a0:	431a      	orrs	r2, r3
    17a2:	4643      	mov	r3, r8
    17a4:	025b      	lsls	r3, r3, #9
    17a6:	4313      	orrs	r3, r2
    17a8:	01ea      	lsls	r2, r5, #7
    17aa:	d507      	bpl.n	17bc <__aeabi_dmul+0x384>
    17ac:	2201      	movs	r2, #1
    17ae:	085c      	lsrs	r4, r3, #1
    17b0:	4013      	ands	r3, r2
    17b2:	4323      	orrs	r3, r4
    17b4:	07ea      	lsls	r2, r5, #31
    17b6:	9e02      	ldr	r6, [sp, #8]
    17b8:	4313      	orrs	r3, r2
    17ba:	086d      	lsrs	r5, r5, #1
    17bc:	4a57      	ldr	r2, [pc, #348]	; (191c <__aeabi_dmul+0x4e4>)
    17be:	18b2      	adds	r2, r6, r2
    17c0:	2a00      	cmp	r2, #0
    17c2:	dd4b      	ble.n	185c <__aeabi_dmul+0x424>
    17c4:	0758      	lsls	r0, r3, #29
    17c6:	d009      	beq.n	17dc <__aeabi_dmul+0x3a4>
    17c8:	200f      	movs	r0, #15
    17ca:	4018      	ands	r0, r3
    17cc:	2804      	cmp	r0, #4
    17ce:	d005      	beq.n	17dc <__aeabi_dmul+0x3a4>
    17d0:	1d18      	adds	r0, r3, #4
    17d2:	4298      	cmp	r0, r3
    17d4:	419b      	sbcs	r3, r3
    17d6:	425b      	negs	r3, r3
    17d8:	18ed      	adds	r5, r5, r3
    17da:	0003      	movs	r3, r0
    17dc:	01e8      	lsls	r0, r5, #7
    17de:	d504      	bpl.n	17ea <__aeabi_dmul+0x3b2>
    17e0:	4a4f      	ldr	r2, [pc, #316]	; (1920 <__aeabi_dmul+0x4e8>)
    17e2:	4015      	ands	r5, r2
    17e4:	2280      	movs	r2, #128	; 0x80
    17e6:	00d2      	lsls	r2, r2, #3
    17e8:	18b2      	adds	r2, r6, r2
    17ea:	484e      	ldr	r0, [pc, #312]	; (1924 <__aeabi_dmul+0x4ec>)
    17ec:	4282      	cmp	r2, r0
    17ee:	dd00      	ble.n	17f2 <__aeabi_dmul+0x3ba>
    17f0:	e6e7      	b.n	15c2 <__aeabi_dmul+0x18a>
    17f2:	2401      	movs	r4, #1
    17f4:	08db      	lsrs	r3, r3, #3
    17f6:	0768      	lsls	r0, r5, #29
    17f8:	4318      	orrs	r0, r3
    17fa:	026d      	lsls	r5, r5, #9
    17fc:	0553      	lsls	r3, r2, #21
    17fe:	4680      	mov	r8, r0
    1800:	0b2d      	lsrs	r5, r5, #12
    1802:	0d5b      	lsrs	r3, r3, #21
    1804:	400c      	ands	r4, r1
    1806:	e67d      	b.n	1504 <__aeabi_dmul+0xcc>
    1808:	2280      	movs	r2, #128	; 0x80
    180a:	4659      	mov	r1, fp
    180c:	0312      	lsls	r2, r2, #12
    180e:	4211      	tst	r1, r2
    1810:	d008      	beq.n	1824 <__aeabi_dmul+0x3ec>
    1812:	4215      	tst	r5, r2
    1814:	d106      	bne.n	1824 <__aeabi_dmul+0x3ec>
    1816:	4315      	orrs	r5, r2
    1818:	032d      	lsls	r5, r5, #12
    181a:	4698      	mov	r8, r3
    181c:	0b2d      	lsrs	r5, r5, #12
    181e:	464c      	mov	r4, r9
    1820:	4b41      	ldr	r3, [pc, #260]	; (1928 <__aeabi_dmul+0x4f0>)
    1822:	e66f      	b.n	1504 <__aeabi_dmul+0xcc>
    1824:	465d      	mov	r5, fp
    1826:	4315      	orrs	r5, r2
    1828:	032d      	lsls	r5, r5, #12
    182a:	0b2d      	lsrs	r5, r5, #12
    182c:	4b3e      	ldr	r3, [pc, #248]	; (1928 <__aeabi_dmul+0x4f0>)
    182e:	e669      	b.n	1504 <__aeabi_dmul+0xcc>
    1830:	0003      	movs	r3, r0
    1832:	4655      	mov	r5, sl
    1834:	3b28      	subs	r3, #40	; 0x28
    1836:	409d      	lsls	r5, r3
    1838:	2300      	movs	r3, #0
    183a:	e6bc      	b.n	15b6 <__aeabi_dmul+0x17e>
    183c:	4650      	mov	r0, sl
    183e:	f000 f997 	bl	1b70 <__clzsi2>
    1842:	3020      	adds	r0, #32
    1844:	e6a8      	b.n	1598 <__aeabi_dmul+0x160>
    1846:	0003      	movs	r3, r0
    1848:	3b28      	subs	r3, #40	; 0x28
    184a:	409f      	lsls	r7, r3
    184c:	2300      	movs	r3, #0
    184e:	46bb      	mov	fp, r7
    1850:	4698      	mov	r8, r3
    1852:	e689      	b.n	1568 <__aeabi_dmul+0x130>
    1854:	f000 f98c 	bl	1b70 <__clzsi2>
    1858:	3020      	adds	r0, #32
    185a:	e673      	b.n	1544 <__aeabi_dmul+0x10c>
    185c:	2401      	movs	r4, #1
    185e:	1aa6      	subs	r6, r4, r2
    1860:	2e38      	cmp	r6, #56	; 0x38
    1862:	dd07      	ble.n	1874 <__aeabi_dmul+0x43c>
    1864:	2200      	movs	r2, #0
    1866:	400c      	ands	r4, r1
    1868:	2300      	movs	r3, #0
    186a:	2500      	movs	r5, #0
    186c:	4690      	mov	r8, r2
    186e:	e649      	b.n	1504 <__aeabi_dmul+0xcc>
    1870:	9e02      	ldr	r6, [sp, #8]
    1872:	e7a3      	b.n	17bc <__aeabi_dmul+0x384>
    1874:	2e1f      	cmp	r6, #31
    1876:	dc20      	bgt.n	18ba <__aeabi_dmul+0x482>
    1878:	2220      	movs	r2, #32
    187a:	002c      	movs	r4, r5
    187c:	0018      	movs	r0, r3
    187e:	1b92      	subs	r2, r2, r6
    1880:	40f0      	lsrs	r0, r6
    1882:	4094      	lsls	r4, r2
    1884:	4093      	lsls	r3, r2
    1886:	4304      	orrs	r4, r0
    1888:	1e58      	subs	r0, r3, #1
    188a:	4183      	sbcs	r3, r0
    188c:	431c      	orrs	r4, r3
    188e:	40f5      	lsrs	r5, r6
    1890:	0763      	lsls	r3, r4, #29
    1892:	d009      	beq.n	18a8 <__aeabi_dmul+0x470>
    1894:	230f      	movs	r3, #15
    1896:	4023      	ands	r3, r4
    1898:	2b04      	cmp	r3, #4
    189a:	d005      	beq.n	18a8 <__aeabi_dmul+0x470>
    189c:	0023      	movs	r3, r4
    189e:	1d1c      	adds	r4, r3, #4
    18a0:	429c      	cmp	r4, r3
    18a2:	4192      	sbcs	r2, r2
    18a4:	4252      	negs	r2, r2
    18a6:	18ad      	adds	r5, r5, r2
    18a8:	022b      	lsls	r3, r5, #8
    18aa:	d51f      	bpl.n	18ec <__aeabi_dmul+0x4b4>
    18ac:	2401      	movs	r4, #1
    18ae:	2200      	movs	r2, #0
    18b0:	400c      	ands	r4, r1
    18b2:	2301      	movs	r3, #1
    18b4:	2500      	movs	r5, #0
    18b6:	4690      	mov	r8, r2
    18b8:	e624      	b.n	1504 <__aeabi_dmul+0xcc>
    18ba:	201f      	movs	r0, #31
    18bc:	002c      	movs	r4, r5
    18be:	4240      	negs	r0, r0
    18c0:	1a82      	subs	r2, r0, r2
    18c2:	40d4      	lsrs	r4, r2
    18c4:	2e20      	cmp	r6, #32
    18c6:	d01c      	beq.n	1902 <__aeabi_dmul+0x4ca>
    18c8:	2240      	movs	r2, #64	; 0x40
    18ca:	1b96      	subs	r6, r2, r6
    18cc:	40b5      	lsls	r5, r6
    18ce:	432b      	orrs	r3, r5
    18d0:	1e58      	subs	r0, r3, #1
    18d2:	4183      	sbcs	r3, r0
    18d4:	2007      	movs	r0, #7
    18d6:	4323      	orrs	r3, r4
    18d8:	4018      	ands	r0, r3
    18da:	2500      	movs	r5, #0
    18dc:	2800      	cmp	r0, #0
    18de:	d009      	beq.n	18f4 <__aeabi_dmul+0x4bc>
    18e0:	220f      	movs	r2, #15
    18e2:	2500      	movs	r5, #0
    18e4:	401a      	ands	r2, r3
    18e6:	001c      	movs	r4, r3
    18e8:	2a04      	cmp	r2, #4
    18ea:	d1d8      	bne.n	189e <__aeabi_dmul+0x466>
    18ec:	0023      	movs	r3, r4
    18ee:	0768      	lsls	r0, r5, #29
    18f0:	026d      	lsls	r5, r5, #9
    18f2:	0b2d      	lsrs	r5, r5, #12
    18f4:	2401      	movs	r4, #1
    18f6:	08db      	lsrs	r3, r3, #3
    18f8:	4303      	orrs	r3, r0
    18fa:	4698      	mov	r8, r3
    18fc:	400c      	ands	r4, r1
    18fe:	2300      	movs	r3, #0
    1900:	e600      	b.n	1504 <__aeabi_dmul+0xcc>
    1902:	2500      	movs	r5, #0
    1904:	e7e3      	b.n	18ce <__aeabi_dmul+0x496>
    1906:	2280      	movs	r2, #128	; 0x80
    1908:	2401      	movs	r4, #1
    190a:	0312      	lsls	r2, r2, #12
    190c:	4315      	orrs	r5, r2
    190e:	032d      	lsls	r5, r5, #12
    1910:	4698      	mov	r8, r3
    1912:	0b2d      	lsrs	r5, r5, #12
    1914:	400c      	ands	r4, r1
    1916:	4b04      	ldr	r3, [pc, #16]	; (1928 <__aeabi_dmul+0x4f0>)
    1918:	e5f4      	b.n	1504 <__aeabi_dmul+0xcc>
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	000003ff 	.word	0x000003ff
    1920:	feffffff 	.word	0xfeffffff
    1924:	000007fe 	.word	0x000007fe
    1928:	000007ff 	.word	0x000007ff

0000192c <__aeabi_i2d>:
    192c:	b570      	push	{r4, r5, r6, lr}
    192e:	2800      	cmp	r0, #0
    1930:	d030      	beq.n	1994 <__aeabi_i2d+0x68>
    1932:	17c3      	asrs	r3, r0, #31
    1934:	18c4      	adds	r4, r0, r3
    1936:	405c      	eors	r4, r3
    1938:	0fc5      	lsrs	r5, r0, #31
    193a:	0020      	movs	r0, r4
    193c:	f000 f918 	bl	1b70 <__clzsi2>
    1940:	4b17      	ldr	r3, [pc, #92]	; (19a0 <__aeabi_i2d+0x74>)
    1942:	4a18      	ldr	r2, [pc, #96]	; (19a4 <__aeabi_i2d+0x78>)
    1944:	1a1b      	subs	r3, r3, r0
    1946:	1ad2      	subs	r2, r2, r3
    1948:	2a1f      	cmp	r2, #31
    194a:	dd18      	ble.n	197e <__aeabi_i2d+0x52>
    194c:	4a16      	ldr	r2, [pc, #88]	; (19a8 <__aeabi_i2d+0x7c>)
    194e:	1ad2      	subs	r2, r2, r3
    1950:	4094      	lsls	r4, r2
    1952:	2200      	movs	r2, #0
    1954:	0324      	lsls	r4, r4, #12
    1956:	055b      	lsls	r3, r3, #21
    1958:	0b24      	lsrs	r4, r4, #12
    195a:	0d5b      	lsrs	r3, r3, #21
    195c:	2100      	movs	r1, #0
    195e:	0010      	movs	r0, r2
    1960:	0324      	lsls	r4, r4, #12
    1962:	0d0a      	lsrs	r2, r1, #20
    1964:	0512      	lsls	r2, r2, #20
    1966:	0b24      	lsrs	r4, r4, #12
    1968:	4314      	orrs	r4, r2
    196a:	4a10      	ldr	r2, [pc, #64]	; (19ac <__aeabi_i2d+0x80>)
    196c:	051b      	lsls	r3, r3, #20
    196e:	4014      	ands	r4, r2
    1970:	431c      	orrs	r4, r3
    1972:	0064      	lsls	r4, r4, #1
    1974:	07ed      	lsls	r5, r5, #31
    1976:	0864      	lsrs	r4, r4, #1
    1978:	432c      	orrs	r4, r5
    197a:	0021      	movs	r1, r4
    197c:	bd70      	pop	{r4, r5, r6, pc}
    197e:	0021      	movs	r1, r4
    1980:	4091      	lsls	r1, r2
    1982:	000a      	movs	r2, r1
    1984:	210b      	movs	r1, #11
    1986:	1a08      	subs	r0, r1, r0
    1988:	40c4      	lsrs	r4, r0
    198a:	055b      	lsls	r3, r3, #21
    198c:	0324      	lsls	r4, r4, #12
    198e:	0b24      	lsrs	r4, r4, #12
    1990:	0d5b      	lsrs	r3, r3, #21
    1992:	e7e3      	b.n	195c <__aeabi_i2d+0x30>
    1994:	2500      	movs	r5, #0
    1996:	2300      	movs	r3, #0
    1998:	2400      	movs	r4, #0
    199a:	2200      	movs	r2, #0
    199c:	e7de      	b.n	195c <__aeabi_i2d+0x30>
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	0000041e 	.word	0x0000041e
    19a4:	00000433 	.word	0x00000433
    19a8:	00000413 	.word	0x00000413
    19ac:	800fffff 	.word	0x800fffff

000019b0 <__aeabi_f2d>:
    19b0:	0042      	lsls	r2, r0, #1
    19b2:	0e12      	lsrs	r2, r2, #24
    19b4:	1c51      	adds	r1, r2, #1
    19b6:	0243      	lsls	r3, r0, #9
    19b8:	b2c9      	uxtb	r1, r1
    19ba:	b570      	push	{r4, r5, r6, lr}
    19bc:	0a5d      	lsrs	r5, r3, #9
    19be:	0fc4      	lsrs	r4, r0, #31
    19c0:	2901      	cmp	r1, #1
    19c2:	dd15      	ble.n	19f0 <__aeabi_f2d+0x40>
    19c4:	21e0      	movs	r1, #224	; 0xe0
    19c6:	0089      	lsls	r1, r1, #2
    19c8:	468c      	mov	ip, r1
    19ca:	076d      	lsls	r5, r5, #29
    19cc:	0b1b      	lsrs	r3, r3, #12
    19ce:	4462      	add	r2, ip
    19d0:	2100      	movs	r1, #0
    19d2:	0028      	movs	r0, r5
    19d4:	0d0d      	lsrs	r5, r1, #20
    19d6:	052d      	lsls	r5, r5, #20
    19d8:	432b      	orrs	r3, r5
    19da:	4d1c      	ldr	r5, [pc, #112]	; (1a4c <__aeabi_f2d+0x9c>)
    19dc:	0552      	lsls	r2, r2, #21
    19de:	402b      	ands	r3, r5
    19e0:	0852      	lsrs	r2, r2, #1
    19e2:	4313      	orrs	r3, r2
    19e4:	005b      	lsls	r3, r3, #1
    19e6:	07e4      	lsls	r4, r4, #31
    19e8:	085b      	lsrs	r3, r3, #1
    19ea:	4323      	orrs	r3, r4
    19ec:	0019      	movs	r1, r3
    19ee:	bd70      	pop	{r4, r5, r6, pc}
    19f0:	2a00      	cmp	r2, #0
    19f2:	d115      	bne.n	1a20 <__aeabi_f2d+0x70>
    19f4:	2d00      	cmp	r5, #0
    19f6:	d01f      	beq.n	1a38 <__aeabi_f2d+0x88>
    19f8:	0028      	movs	r0, r5
    19fa:	f000 f8b9 	bl	1b70 <__clzsi2>
    19fe:	280a      	cmp	r0, #10
    1a00:	dc1d      	bgt.n	1a3e <__aeabi_f2d+0x8e>
    1a02:	230b      	movs	r3, #11
    1a04:	002a      	movs	r2, r5
    1a06:	1a1b      	subs	r3, r3, r0
    1a08:	40da      	lsrs	r2, r3
    1a0a:	0013      	movs	r3, r2
    1a0c:	0002      	movs	r2, r0
    1a0e:	3215      	adds	r2, #21
    1a10:	4095      	lsls	r5, r2
    1a12:	4a0f      	ldr	r2, [pc, #60]	; (1a50 <__aeabi_f2d+0xa0>)
    1a14:	031b      	lsls	r3, r3, #12
    1a16:	1a12      	subs	r2, r2, r0
    1a18:	0552      	lsls	r2, r2, #21
    1a1a:	0b1b      	lsrs	r3, r3, #12
    1a1c:	0d52      	lsrs	r2, r2, #21
    1a1e:	e7d7      	b.n	19d0 <__aeabi_f2d+0x20>
    1a20:	2d00      	cmp	r5, #0
    1a22:	d006      	beq.n	1a32 <__aeabi_f2d+0x82>
    1a24:	2280      	movs	r2, #128	; 0x80
    1a26:	0b1b      	lsrs	r3, r3, #12
    1a28:	0312      	lsls	r2, r2, #12
    1a2a:	4313      	orrs	r3, r2
    1a2c:	076d      	lsls	r5, r5, #29
    1a2e:	4a09      	ldr	r2, [pc, #36]	; (1a54 <__aeabi_f2d+0xa4>)
    1a30:	e7ce      	b.n	19d0 <__aeabi_f2d+0x20>
    1a32:	4a08      	ldr	r2, [pc, #32]	; (1a54 <__aeabi_f2d+0xa4>)
    1a34:	2300      	movs	r3, #0
    1a36:	e7cb      	b.n	19d0 <__aeabi_f2d+0x20>
    1a38:	2200      	movs	r2, #0
    1a3a:	2300      	movs	r3, #0
    1a3c:	e7c8      	b.n	19d0 <__aeabi_f2d+0x20>
    1a3e:	0003      	movs	r3, r0
    1a40:	3b0b      	subs	r3, #11
    1a42:	409d      	lsls	r5, r3
    1a44:	002b      	movs	r3, r5
    1a46:	2500      	movs	r5, #0
    1a48:	e7e3      	b.n	1a12 <__aeabi_f2d+0x62>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	800fffff 	.word	0x800fffff
    1a50:	00000389 	.word	0x00000389
    1a54:	000007ff 	.word	0x000007ff

00001a58 <__aeabi_d2f>:
    1a58:	004b      	lsls	r3, r1, #1
    1a5a:	b570      	push	{r4, r5, r6, lr}
    1a5c:	0d5e      	lsrs	r6, r3, #21
    1a5e:	030c      	lsls	r4, r1, #12
    1a60:	1c75      	adds	r5, r6, #1
    1a62:	0a64      	lsrs	r4, r4, #9
    1a64:	0f42      	lsrs	r2, r0, #29
    1a66:	056d      	lsls	r5, r5, #21
    1a68:	4322      	orrs	r2, r4
    1a6a:	0fc9      	lsrs	r1, r1, #31
    1a6c:	00c4      	lsls	r4, r0, #3
    1a6e:	0d6d      	lsrs	r5, r5, #21
    1a70:	2d01      	cmp	r5, #1
    1a72:	dd2a      	ble.n	1aca <__aeabi_d2f+0x72>
    1a74:	4b3b      	ldr	r3, [pc, #236]	; (1b64 <__aeabi_d2f+0x10c>)
    1a76:	18f3      	adds	r3, r6, r3
    1a78:	2bfe      	cmp	r3, #254	; 0xfe
    1a7a:	dc1a      	bgt.n	1ab2 <__aeabi_d2f+0x5a>
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	dd42      	ble.n	1b06 <__aeabi_d2f+0xae>
    1a80:	0180      	lsls	r0, r0, #6
    1a82:	1e45      	subs	r5, r0, #1
    1a84:	41a8      	sbcs	r0, r5
    1a86:	00d2      	lsls	r2, r2, #3
    1a88:	4310      	orrs	r0, r2
    1a8a:	0f62      	lsrs	r2, r4, #29
    1a8c:	4302      	orrs	r2, r0
    1a8e:	0750      	lsls	r0, r2, #29
    1a90:	d004      	beq.n	1a9c <__aeabi_d2f+0x44>
    1a92:	200f      	movs	r0, #15
    1a94:	4010      	ands	r0, r2
    1a96:	2804      	cmp	r0, #4
    1a98:	d000      	beq.n	1a9c <__aeabi_d2f+0x44>
    1a9a:	3204      	adds	r2, #4
    1a9c:	2080      	movs	r0, #128	; 0x80
    1a9e:	04c0      	lsls	r0, r0, #19
    1aa0:	4010      	ands	r0, r2
    1aa2:	d021      	beq.n	1ae8 <__aeabi_d2f+0x90>
    1aa4:	3301      	adds	r3, #1
    1aa6:	2bff      	cmp	r3, #255	; 0xff
    1aa8:	d003      	beq.n	1ab2 <__aeabi_d2f+0x5a>
    1aaa:	0192      	lsls	r2, r2, #6
    1aac:	0a52      	lsrs	r2, r2, #9
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	e001      	b.n	1ab6 <__aeabi_d2f+0x5e>
    1ab2:	23ff      	movs	r3, #255	; 0xff
    1ab4:	2200      	movs	r2, #0
    1ab6:	0252      	lsls	r2, r2, #9
    1ab8:	0a52      	lsrs	r2, r2, #9
    1aba:	05db      	lsls	r3, r3, #23
    1abc:	4313      	orrs	r3, r2
    1abe:	005b      	lsls	r3, r3, #1
    1ac0:	07c9      	lsls	r1, r1, #31
    1ac2:	085b      	lsrs	r3, r3, #1
    1ac4:	430b      	orrs	r3, r1
    1ac6:	0018      	movs	r0, r3
    1ac8:	bd70      	pop	{r4, r5, r6, pc}
    1aca:	2e00      	cmp	r6, #0
    1acc:	d007      	beq.n	1ade <__aeabi_d2f+0x86>
    1ace:	4314      	orrs	r4, r2
    1ad0:	d0ef      	beq.n	1ab2 <__aeabi_d2f+0x5a>
    1ad2:	2080      	movs	r0, #128	; 0x80
    1ad4:	00d2      	lsls	r2, r2, #3
    1ad6:	0480      	lsls	r0, r0, #18
    1ad8:	4302      	orrs	r2, r0
    1ada:	23ff      	movs	r3, #255	; 0xff
    1adc:	e7d7      	b.n	1a8e <__aeabi_d2f+0x36>
    1ade:	4322      	orrs	r2, r4
    1ae0:	2300      	movs	r3, #0
    1ae2:	2a00      	cmp	r2, #0
    1ae4:	d003      	beq.n	1aee <__aeabi_d2f+0x96>
    1ae6:	2205      	movs	r2, #5
    1ae8:	08d2      	lsrs	r2, r2, #3
    1aea:	2bff      	cmp	r3, #255	; 0xff
    1aec:	d003      	beq.n	1af6 <__aeabi_d2f+0x9e>
    1aee:	0252      	lsls	r2, r2, #9
    1af0:	0a52      	lsrs	r2, r2, #9
    1af2:	b2db      	uxtb	r3, r3
    1af4:	e7df      	b.n	1ab6 <__aeabi_d2f+0x5e>
    1af6:	2a00      	cmp	r2, #0
    1af8:	d032      	beq.n	1b60 <__aeabi_d2f+0x108>
    1afa:	2080      	movs	r0, #128	; 0x80
    1afc:	03c0      	lsls	r0, r0, #15
    1afe:	4302      	orrs	r2, r0
    1b00:	0252      	lsls	r2, r2, #9
    1b02:	0a52      	lsrs	r2, r2, #9
    1b04:	e7d7      	b.n	1ab6 <__aeabi_d2f+0x5e>
    1b06:	0018      	movs	r0, r3
    1b08:	3017      	adds	r0, #23
    1b0a:	db14      	blt.n	1b36 <__aeabi_d2f+0xde>
    1b0c:	2080      	movs	r0, #128	; 0x80
    1b0e:	0400      	lsls	r0, r0, #16
    1b10:	4302      	orrs	r2, r0
    1b12:	201e      	movs	r0, #30
    1b14:	1ac0      	subs	r0, r0, r3
    1b16:	281f      	cmp	r0, #31
    1b18:	dc0f      	bgt.n	1b3a <__aeabi_d2f+0xe2>
    1b1a:	0025      	movs	r5, r4
    1b1c:	4b12      	ldr	r3, [pc, #72]	; (1b68 <__aeabi_d2f+0x110>)
    1b1e:	18f3      	adds	r3, r6, r3
    1b20:	409d      	lsls	r5, r3
    1b22:	1e6e      	subs	r6, r5, #1
    1b24:	41b5      	sbcs	r5, r6
    1b26:	409a      	lsls	r2, r3
    1b28:	002b      	movs	r3, r5
    1b2a:	4313      	orrs	r3, r2
    1b2c:	0022      	movs	r2, r4
    1b2e:	40c2      	lsrs	r2, r0
    1b30:	431a      	orrs	r2, r3
    1b32:	2300      	movs	r3, #0
    1b34:	e7ab      	b.n	1a8e <__aeabi_d2f+0x36>
    1b36:	2300      	movs	r3, #0
    1b38:	e7d5      	b.n	1ae6 <__aeabi_d2f+0x8e>
    1b3a:	2502      	movs	r5, #2
    1b3c:	426d      	negs	r5, r5
    1b3e:	1aeb      	subs	r3, r5, r3
    1b40:	0015      	movs	r5, r2
    1b42:	40dd      	lsrs	r5, r3
    1b44:	2820      	cmp	r0, #32
    1b46:	d009      	beq.n	1b5c <__aeabi_d2f+0x104>
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <__aeabi_d2f+0x114>)
    1b4a:	18f3      	adds	r3, r6, r3
    1b4c:	409a      	lsls	r2, r3
    1b4e:	4314      	orrs	r4, r2
    1b50:	1e62      	subs	r2, r4, #1
    1b52:	4194      	sbcs	r4, r2
    1b54:	0022      	movs	r2, r4
    1b56:	2300      	movs	r3, #0
    1b58:	432a      	orrs	r2, r5
    1b5a:	e798      	b.n	1a8e <__aeabi_d2f+0x36>
    1b5c:	2200      	movs	r2, #0
    1b5e:	e7f6      	b.n	1b4e <__aeabi_d2f+0xf6>
    1b60:	2200      	movs	r2, #0
    1b62:	e7a8      	b.n	1ab6 <__aeabi_d2f+0x5e>
    1b64:	fffffc80 	.word	0xfffffc80
    1b68:	fffffc82 	.word	0xfffffc82
    1b6c:	fffffca2 	.word	0xfffffca2

00001b70 <__clzsi2>:
    1b70:	211c      	movs	r1, #28
    1b72:	2301      	movs	r3, #1
    1b74:	041b      	lsls	r3, r3, #16
    1b76:	4298      	cmp	r0, r3
    1b78:	d301      	bcc.n	1b7e <__clzsi2+0xe>
    1b7a:	0c00      	lsrs	r0, r0, #16
    1b7c:	3910      	subs	r1, #16
    1b7e:	0a1b      	lsrs	r3, r3, #8
    1b80:	4298      	cmp	r0, r3
    1b82:	d301      	bcc.n	1b88 <__clzsi2+0x18>
    1b84:	0a00      	lsrs	r0, r0, #8
    1b86:	3908      	subs	r1, #8
    1b88:	091b      	lsrs	r3, r3, #4
    1b8a:	4298      	cmp	r0, r3
    1b8c:	d301      	bcc.n	1b92 <__clzsi2+0x22>
    1b8e:	0900      	lsrs	r0, r0, #4
    1b90:	3904      	subs	r1, #4
    1b92:	a202      	add	r2, pc, #8	; (adr r2, 1b9c <__clzsi2+0x2c>)
    1b94:	5c10      	ldrb	r0, [r2, r0]
    1b96:	1840      	adds	r0, r0, r1
    1b98:	4770      	bx	lr
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	02020304 	.word	0x02020304
    1ba0:	01010101 	.word	0x01010101
	...

00001bac <__libc_init_array>:
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	4e0d      	ldr	r6, [pc, #52]	; (1be4 <__libc_init_array+0x38>)
    1bb0:	4d0d      	ldr	r5, [pc, #52]	; (1be8 <__libc_init_array+0x3c>)
    1bb2:	2400      	movs	r4, #0
    1bb4:	1bad      	subs	r5, r5, r6
    1bb6:	10ad      	asrs	r5, r5, #2
    1bb8:	d005      	beq.n	1bc6 <__libc_init_array+0x1a>
    1bba:	00a3      	lsls	r3, r4, #2
    1bbc:	58f3      	ldr	r3, [r6, r3]
    1bbe:	3401      	adds	r4, #1
    1bc0:	4798      	blx	r3
    1bc2:	42a5      	cmp	r5, r4
    1bc4:	d1f9      	bne.n	1bba <__libc_init_array+0xe>
    1bc6:	f000 fa0d 	bl	1fe4 <_init>
    1bca:	4e08      	ldr	r6, [pc, #32]	; (1bec <__libc_init_array+0x40>)
    1bcc:	4d08      	ldr	r5, [pc, #32]	; (1bf0 <__libc_init_array+0x44>)
    1bce:	2400      	movs	r4, #0
    1bd0:	1bad      	subs	r5, r5, r6
    1bd2:	10ad      	asrs	r5, r5, #2
    1bd4:	d005      	beq.n	1be2 <__libc_init_array+0x36>
    1bd6:	00a3      	lsls	r3, r4, #2
    1bd8:	58f3      	ldr	r3, [r6, r3]
    1bda:	3401      	adds	r4, #1
    1bdc:	4798      	blx	r3
    1bde:	42a5      	cmp	r5, r4
    1be0:	d1f9      	bne.n	1bd6 <__libc_init_array+0x2a>
    1be2:	bd70      	pop	{r4, r5, r6, pc}
    1be4:	00001ff0 	.word	0x00001ff0
    1be8:	00001ff0 	.word	0x00001ff0
    1bec:	00001ff0 	.word	0x00001ff0
    1bf0:	00001ff8 	.word	0x00001ff8

00001bf4 <memset>:
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	0783      	lsls	r3, r0, #30
    1bf8:	d03f      	beq.n	1c7a <memset+0x86>
    1bfa:	1e54      	subs	r4, r2, #1
    1bfc:	2a00      	cmp	r2, #0
    1bfe:	d03b      	beq.n	1c78 <memset+0x84>
    1c00:	b2ce      	uxtb	r6, r1
    1c02:	0003      	movs	r3, r0
    1c04:	2503      	movs	r5, #3
    1c06:	e003      	b.n	1c10 <memset+0x1c>
    1c08:	1e62      	subs	r2, r4, #1
    1c0a:	2c00      	cmp	r4, #0
    1c0c:	d034      	beq.n	1c78 <memset+0x84>
    1c0e:	0014      	movs	r4, r2
    1c10:	3301      	adds	r3, #1
    1c12:	1e5a      	subs	r2, r3, #1
    1c14:	7016      	strb	r6, [r2, #0]
    1c16:	422b      	tst	r3, r5
    1c18:	d1f6      	bne.n	1c08 <memset+0x14>
    1c1a:	2c03      	cmp	r4, #3
    1c1c:	d924      	bls.n	1c68 <memset+0x74>
    1c1e:	25ff      	movs	r5, #255	; 0xff
    1c20:	400d      	ands	r5, r1
    1c22:	022a      	lsls	r2, r5, #8
    1c24:	4315      	orrs	r5, r2
    1c26:	042a      	lsls	r2, r5, #16
    1c28:	4315      	orrs	r5, r2
    1c2a:	2c0f      	cmp	r4, #15
    1c2c:	d911      	bls.n	1c52 <memset+0x5e>
    1c2e:	0026      	movs	r6, r4
    1c30:	3e10      	subs	r6, #16
    1c32:	0936      	lsrs	r6, r6, #4
    1c34:	3601      	adds	r6, #1
    1c36:	0136      	lsls	r6, r6, #4
    1c38:	001a      	movs	r2, r3
    1c3a:	199b      	adds	r3, r3, r6
    1c3c:	6015      	str	r5, [r2, #0]
    1c3e:	6055      	str	r5, [r2, #4]
    1c40:	6095      	str	r5, [r2, #8]
    1c42:	60d5      	str	r5, [r2, #12]
    1c44:	3210      	adds	r2, #16
    1c46:	4293      	cmp	r3, r2
    1c48:	d1f8      	bne.n	1c3c <memset+0x48>
    1c4a:	220f      	movs	r2, #15
    1c4c:	4014      	ands	r4, r2
    1c4e:	2c03      	cmp	r4, #3
    1c50:	d90a      	bls.n	1c68 <memset+0x74>
    1c52:	1f26      	subs	r6, r4, #4
    1c54:	08b6      	lsrs	r6, r6, #2
    1c56:	3601      	adds	r6, #1
    1c58:	00b6      	lsls	r6, r6, #2
    1c5a:	001a      	movs	r2, r3
    1c5c:	199b      	adds	r3, r3, r6
    1c5e:	c220      	stmia	r2!, {r5}
    1c60:	4293      	cmp	r3, r2
    1c62:	d1fc      	bne.n	1c5e <memset+0x6a>
    1c64:	2203      	movs	r2, #3
    1c66:	4014      	ands	r4, r2
    1c68:	2c00      	cmp	r4, #0
    1c6a:	d005      	beq.n	1c78 <memset+0x84>
    1c6c:	b2c9      	uxtb	r1, r1
    1c6e:	191c      	adds	r4, r3, r4
    1c70:	7019      	strb	r1, [r3, #0]
    1c72:	3301      	adds	r3, #1
    1c74:	429c      	cmp	r4, r3
    1c76:	d1fb      	bne.n	1c70 <memset+0x7c>
    1c78:	bd70      	pop	{r4, r5, r6, pc}
    1c7a:	0014      	movs	r4, r2
    1c7c:	0003      	movs	r3, r0
    1c7e:	e7cc      	b.n	1c1a <memset+0x26>

00001c80 <register_fini>:
    1c80:	4b03      	ldr	r3, [pc, #12]	; (1c90 <register_fini+0x10>)
    1c82:	b510      	push	{r4, lr}
    1c84:	2b00      	cmp	r3, #0
    1c86:	d002      	beq.n	1c8e <register_fini+0xe>
    1c88:	4802      	ldr	r0, [pc, #8]	; (1c94 <register_fini+0x14>)
    1c8a:	f000 f805 	bl	1c98 <atexit>
    1c8e:	bd10      	pop	{r4, pc}
    1c90:	00000000 	.word	0x00000000
    1c94:	00001ca9 	.word	0x00001ca9

00001c98 <atexit>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	0001      	movs	r1, r0
    1c9c:	2300      	movs	r3, #0
    1c9e:	2200      	movs	r2, #0
    1ca0:	2000      	movs	r0, #0
    1ca2:	f000 f81b 	bl	1cdc <__register_exitproc>
    1ca6:	bd10      	pop	{r4, pc}

00001ca8 <__libc_fini_array>:
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	4b09      	ldr	r3, [pc, #36]	; (1cd0 <__libc_fini_array+0x28>)
    1cac:	4c09      	ldr	r4, [pc, #36]	; (1cd4 <__libc_fini_array+0x2c>)
    1cae:	1ae4      	subs	r4, r4, r3
    1cb0:	10a4      	asrs	r4, r4, #2
    1cb2:	d009      	beq.n	1cc8 <__libc_fini_array+0x20>
    1cb4:	4a08      	ldr	r2, [pc, #32]	; (1cd8 <__libc_fini_array+0x30>)
    1cb6:	18a5      	adds	r5, r4, r2
    1cb8:	00ad      	lsls	r5, r5, #2
    1cba:	18ed      	adds	r5, r5, r3
    1cbc:	682b      	ldr	r3, [r5, #0]
    1cbe:	3c01      	subs	r4, #1
    1cc0:	4798      	blx	r3
    1cc2:	3d04      	subs	r5, #4
    1cc4:	2c00      	cmp	r4, #0
    1cc6:	d1f9      	bne.n	1cbc <__libc_fini_array+0x14>
    1cc8:	f000 f996 	bl	1ff8 <_fini>
    1ccc:	bd70      	pop	{r4, r5, r6, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	00002004 	.word	0x00002004
    1cd4:	00002008 	.word	0x00002008
    1cd8:	3fffffff 	.word	0x3fffffff

00001cdc <__register_exitproc>:
    1cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cde:	4644      	mov	r4, r8
    1ce0:	465f      	mov	r7, fp
    1ce2:	4656      	mov	r6, sl
    1ce4:	464d      	mov	r5, r9
    1ce6:	469b      	mov	fp, r3
    1ce8:	4b2f      	ldr	r3, [pc, #188]	; (1da8 <__register_exitproc+0xcc>)
    1cea:	b4f0      	push	{r4, r5, r6, r7}
    1cec:	681c      	ldr	r4, [r3, #0]
    1cee:	23a4      	movs	r3, #164	; 0xa4
    1cf0:	005b      	lsls	r3, r3, #1
    1cf2:	0005      	movs	r5, r0
    1cf4:	58e0      	ldr	r0, [r4, r3]
    1cf6:	000e      	movs	r6, r1
    1cf8:	4690      	mov	r8, r2
    1cfa:	2800      	cmp	r0, #0
    1cfc:	d04b      	beq.n	1d96 <__register_exitproc+0xba>
    1cfe:	6843      	ldr	r3, [r0, #4]
    1d00:	2b1f      	cmp	r3, #31
    1d02:	dc0d      	bgt.n	1d20 <__register_exitproc+0x44>
    1d04:	1c5c      	adds	r4, r3, #1
    1d06:	2d00      	cmp	r5, #0
    1d08:	d121      	bne.n	1d4e <__register_exitproc+0x72>
    1d0a:	3302      	adds	r3, #2
    1d0c:	009b      	lsls	r3, r3, #2
    1d0e:	6044      	str	r4, [r0, #4]
    1d10:	501e      	str	r6, [r3, r0]
    1d12:	2000      	movs	r0, #0
    1d14:	bc3c      	pop	{r2, r3, r4, r5}
    1d16:	4690      	mov	r8, r2
    1d18:	4699      	mov	r9, r3
    1d1a:	46a2      	mov	sl, r4
    1d1c:	46ab      	mov	fp, r5
    1d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d20:	4b22      	ldr	r3, [pc, #136]	; (1dac <__register_exitproc+0xd0>)
    1d22:	2b00      	cmp	r3, #0
    1d24:	d03c      	beq.n	1da0 <__register_exitproc+0xc4>
    1d26:	20c8      	movs	r0, #200	; 0xc8
    1d28:	0040      	lsls	r0, r0, #1
    1d2a:	e000      	b.n	1d2e <__register_exitproc+0x52>
    1d2c:	bf00      	nop
    1d2e:	2800      	cmp	r0, #0
    1d30:	d036      	beq.n	1da0 <__register_exitproc+0xc4>
    1d32:	22a4      	movs	r2, #164	; 0xa4
    1d34:	2300      	movs	r3, #0
    1d36:	0052      	lsls	r2, r2, #1
    1d38:	58a1      	ldr	r1, [r4, r2]
    1d3a:	6043      	str	r3, [r0, #4]
    1d3c:	6001      	str	r1, [r0, #0]
    1d3e:	50a0      	str	r0, [r4, r2]
    1d40:	3240      	adds	r2, #64	; 0x40
    1d42:	5083      	str	r3, [r0, r2]
    1d44:	3204      	adds	r2, #4
    1d46:	5083      	str	r3, [r0, r2]
    1d48:	2401      	movs	r4, #1
    1d4a:	2d00      	cmp	r5, #0
    1d4c:	d0dd      	beq.n	1d0a <__register_exitproc+0x2e>
    1d4e:	009a      	lsls	r2, r3, #2
    1d50:	4691      	mov	r9, r2
    1d52:	4481      	add	r9, r0
    1d54:	4642      	mov	r2, r8
    1d56:	2188      	movs	r1, #136	; 0x88
    1d58:	464f      	mov	r7, r9
    1d5a:	507a      	str	r2, [r7, r1]
    1d5c:	22c4      	movs	r2, #196	; 0xc4
    1d5e:	0052      	lsls	r2, r2, #1
    1d60:	4690      	mov	r8, r2
    1d62:	4480      	add	r8, r0
    1d64:	4642      	mov	r2, r8
    1d66:	3987      	subs	r1, #135	; 0x87
    1d68:	4099      	lsls	r1, r3
    1d6a:	6812      	ldr	r2, [r2, #0]
    1d6c:	468a      	mov	sl, r1
    1d6e:	430a      	orrs	r2, r1
    1d70:	4694      	mov	ip, r2
    1d72:	4642      	mov	r2, r8
    1d74:	4661      	mov	r1, ip
    1d76:	6011      	str	r1, [r2, #0]
    1d78:	2284      	movs	r2, #132	; 0x84
    1d7a:	4649      	mov	r1, r9
    1d7c:	465f      	mov	r7, fp
    1d7e:	0052      	lsls	r2, r2, #1
    1d80:	508f      	str	r7, [r1, r2]
    1d82:	2d02      	cmp	r5, #2
    1d84:	d1c1      	bne.n	1d0a <__register_exitproc+0x2e>
    1d86:	0002      	movs	r2, r0
    1d88:	4655      	mov	r5, sl
    1d8a:	328d      	adds	r2, #141	; 0x8d
    1d8c:	32ff      	adds	r2, #255	; 0xff
    1d8e:	6811      	ldr	r1, [r2, #0]
    1d90:	430d      	orrs	r5, r1
    1d92:	6015      	str	r5, [r2, #0]
    1d94:	e7b9      	b.n	1d0a <__register_exitproc+0x2e>
    1d96:	0020      	movs	r0, r4
    1d98:	304d      	adds	r0, #77	; 0x4d
    1d9a:	30ff      	adds	r0, #255	; 0xff
    1d9c:	50e0      	str	r0, [r4, r3]
    1d9e:	e7ae      	b.n	1cfe <__register_exitproc+0x22>
    1da0:	2001      	movs	r0, #1
    1da2:	4240      	negs	r0, r0
    1da4:	e7b6      	b.n	1d14 <__register_exitproc+0x38>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001fe0 	.word	0x00001fe0
    1dac:	00000000 	.word	0x00000000

00001db0 <analogAccelPin>:
    1db0:	07000000 00000007                       ........

00001db8 <spi2MOSI>:
    1db8:	0c000002 00000000                       ........

00001dc0 <spi2SCK>:
    1dc0:	0e000002 00000000                       ........

00001dc8 <spi2MISO>:
    1dc8:	0d000002 00000000                       ........

00001dd0 <lookupTable.12302>:
    1dd0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1de0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1df0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1e00:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1e10:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1e20:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1e30:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1e40:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1e50:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1e60:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1e70:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1e80:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1e90:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1ea0:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1eb0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1ec0:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1ed0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1ee0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1ef0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1f00:	000f048e                                ....

00001f04 <senseBatPin>:
    1f04:	06000000 00000006                       ........

00001f0c <spi2MOSI>:
    1f0c:	0c000002 00000000                       ........

00001f14 <spi2SCK>:
    1f14:	0e000002 00000000 0000124a 0000116e     ........J...n...
    1f24:	0000122c 00001204 0000122c 000011f8     ,.......,.......
    1f34:	0000122c 00001204 0000116e 0000116e     ,.......n...n...
    1f44:	000011f8 00001204 000012b0 000012b0     ................
    1f54:	000012b0 00001232 0000116e 0000116e     ....2...n...n...
    1f64:	00001218 00001202 00001218 000011f8     ................
    1f74:	00001218 00001202 0000116e 0000116e     ........n...n...
    1f84:	000011f8 00001202 000012b0 000012b0     ................
    1f94:	000012b0 000012bc 00001628 000014e8     ........(.......
    1fa4:	000014e8 000014e6 00001600 00001600     ................
    1fb4:	000015f2 000014e6 00001600 000015f2     ................
    1fc4:	00001600 000014e6 00001608 00001608     ................
    1fd4:	00001608 00001808 00000043              ........C...

00001fe0 <_global_impure_ptr>:
    1fe0:	20000010                                ... 

00001fe4 <_init>:
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fea:	bc08      	pop	{r3}
    1fec:	469e      	mov	lr, r3
    1fee:	4770      	bx	lr

00001ff0 <__init_array_start>:
    1ff0:	00001c81 	.word	0x00001c81

00001ff4 <__frame_dummy_init_array_entry>:
    1ff4:	000000dd                                ....

00001ff8 <_fini>:
    1ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ffe:	bc08      	pop	{r3}
    2000:	469e      	mov	lr, r3
    2002:	4770      	bx	lr

00002004 <__fini_array_start>:
    2004:	000000b5 	.word	0x000000b5
