
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000287c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000287c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002cc0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002e70  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   000231ad  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002be5  00000000  00000000  00043666  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001aa4  00000000  00000000  0004624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000370  00000000  00000000  00047cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cd0  00000000  00000000  0004805f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015b27  00000000  00000000  00048d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008a85  00000000  00000000  0005e856  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072f70  00000000  00000000  000672db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a38  00000000  00000000  000da24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	f0 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	49 0e 00 00 15 01 00 00 15 01 00 00 15 01 00 00     I...............
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	ed 0e 00 00 55 0f 00 00 00 00 00 00 00 00 00 00     ....U...........
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000287c 	.word	0x0000287c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000287c 	.word	0x0000287c
     10c:	0000287c 	.word	0x0000287c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	0000287c 	.word	0x0000287c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000249d 	.word	0x0000249d
     1d0:	000009a1 	.word	0x000009a1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SEreadPage>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e8:	4f16      	ldr	r7, [pc, #88]	; (244 <AT25SEreadPage+0x60>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1ee:	4c16      	ldr	r4, [pc, #88]	; (248 <AT25SEreadPage+0x64>)
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     1f0:	9101      	str	r1, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f2:	2001      	movs	r0, #1
     1f4:	617b      	str	r3, [r7, #20]
     1f6:	210b      	movs	r1, #11
     1f8:	47a0      	blx	r4
     1fa:	4d14      	ldr	r5, [pc, #80]	; (24c <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     1fc:	0c31      	lsrs	r1, r6, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     200:	b2c9      	uxtb	r1, r1
     202:	2001      	movs	r0, #1
     204:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     206:	0a31      	lsrs	r1, r6, #8
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     208:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     20a:	b2c9      	uxtb	r1, r1
     20c:	2001      	movs	r0, #1
     20e:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     210:	b2f1      	uxtb	r1, r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     212:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     214:	2001      	movs	r0, #1
     216:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     218:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     21a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21c:	2001      	movs	r0, #1
     21e:	47a0      	blx	r4
     220:	9e01      	ldr	r6, [sp, #4]
     222:	7028      	strb	r0, [r5, #0]
     224:	0033      	movs	r3, r6
     226:	33ff      	adds	r3, #255	; 0xff
     228:	9301      	str	r3, [sp, #4]


    for (u8_t pos = 0; pos < 255; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     22a:	7829      	ldrb	r1, [r5, #0]
     22c:	2001      	movs	r0, #1
     22e:	47a0      	blx	r4
    for (u8_t pos = 0; pos < 255; ++pos) {
     230:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     232:	7030      	strb	r0, [r6, #0]
     234:	3601      	adds	r6, #1
    for (u8_t pos = 0; pos < 255; ++pos) {
     236:	429e      	cmp	r6, r3
     238:	d1f7      	bne.n	22a <AT25SEreadPage+0x46>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     23a:	2380      	movs	r3, #128	; 0x80
     23c:	02db      	lsls	r3, r3, #11
     23e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

     240:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	41004400 	.word	0x41004400
     248:	00001601 	.word	0x00001601
     24c:	20000460 	.word	0x20000460

00000250 <readMS5803AdcResults>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     250:	2380      	movs	r3, #128	; 0x80
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     252:	b5f0      	push	{r4, r5, r6, r7, lr}
     254:	4f24      	ldr	r7, [pc, #144]	; (2e8 <readMS5803AdcResults+0x98>)
     256:	021b      	lsls	r3, r3, #8
     258:	617b      	str	r3, [r7, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     25a:	2300      	movs	r3, #0
     25c:	4d23      	ldr	r5, [pc, #140]	; (2ec <readMS5803AdcResults+0x9c>)
u32_t readMS5803AdcResults() {
     25e:	b087      	sub	sp, #28
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     260:	79a9      	ldrb	r1, [r5, #6]
     262:	796c      	ldrb	r4, [r5, #5]
     264:	9300      	str	r3, [sp, #0]
     266:	786b      	ldrb	r3, [r5, #1]
     268:	782a      	ldrb	r2, [r5, #0]
     26a:	0209      	lsls	r1, r1, #8
     26c:	4321      	orrs	r1, r4
     26e:	021b      	lsls	r3, r3, #8
     270:	79ec      	ldrb	r4, [r5, #7]
     272:	4313      	orrs	r3, r2
     274:	78aa      	ldrb	r2, [r5, #2]
     276:	0424      	lsls	r4, r4, #16
     278:	4321      	orrs	r1, r4
     27a:	0412      	lsls	r2, r2, #16
     27c:	7a2c      	ldrb	r4, [r5, #8]
     27e:	4313      	orrs	r3, r2
     280:	78ea      	ldrb	r2, [r5, #3]
     282:	0624      	lsls	r4, r4, #24
     284:	430c      	orrs	r4, r1
     286:	0612      	lsls	r2, r2, #24
     288:	7a69      	ldrb	r1, [r5, #9]
     28a:	431a      	orrs	r2, r3
     28c:	0020      	movs	r0, r4
     28e:	792b      	ldrb	r3, [r5, #4]
     290:	4e17      	ldr	r6, [pc, #92]	; (2f0 <readMS5803AdcResults+0xa0>)
     292:	9102      	str	r1, [sp, #8]
     294:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     296:	7aeb      	ldrb	r3, [r5, #11]
     298:	7aaa      	ldrb	r2, [r5, #10]
     29a:	021b      	lsls	r3, r3, #8
     29c:	431a      	orrs	r2, r3
     29e:	7b2b      	ldrb	r3, [r5, #12]
     2a0:	4e14      	ldr	r6, [pc, #80]	; (2f4 <readMS5803AdcResults+0xa4>)
     2a2:	041b      	lsls	r3, r3, #16
     2a4:	4313      	orrs	r3, r2
     2a6:	7b6a      	ldrb	r2, [r5, #13]
     2a8:	7bad      	ldrb	r5, [r5, #14]
     2aa:	0612      	lsls	r2, r2, #24
     2ac:	431a      	orrs	r2, r3
     2ae:	9902      	ldr	r1, [sp, #8]
     2b0:	002b      	movs	r3, r5
     2b2:	0020      	movs	r0, r4
     2b4:	9203      	str	r2, [sp, #12]
     2b6:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2b8:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2ba:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2bc:	002b      	movs	r3, r5
     2be:	9902      	ldr	r1, [sp, #8]
     2c0:	0020      	movs	r0, r4
     2c2:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2c4:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2c6:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2c8:	002b      	movs	r3, r5
     2ca:	0020      	movs	r0, r4
     2cc:	9902      	ldr	r1, [sp, #8]
     2ce:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2d0:	2380      	movs	r3, #128	; 0x80
     2d2:	021b      	lsls	r3, r3, #8
     2d4:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     2d6:	9b04      	ldr	r3, [sp, #16]
     2d8:	9a05      	ldr	r2, [sp, #20]
     2da:	041b      	lsls	r3, r3, #16
     2dc:	0215      	lsls	r5, r2, #8
     2de:	431d      	orrs	r5, r3
     2e0:	4328      	orrs	r0, r5
    return _receive;
}
     2e2:	b007      	add	sp, #28
     2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	41004400 	.word	0x41004400
     2ec:	000026a8 	.word	0x000026a8
     2f0:	00000b91 	.word	0x00000b91
     2f4:	00000bfd 	.word	0x00000bfd

000002f8 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2fa:	240a      	movs	r4, #10
void ConvertPressureTemperature(Barometer *my_barometer) {
     2fc:	b08b      	sub	sp, #44	; 0x2c
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     2fe:	8803      	ldrh	r3, [r0, #0]
     300:	aa02      	add	r2, sp, #8
     302:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     304:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     306:	18a4      	adds	r4, r4, r2
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     308:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     30a:	8883      	ldrh	r3, [r0, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     30c:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     30e:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     310:	88c3      	ldrh	r3, [r0, #6]
void ConvertPressureTemperature(Barometer *my_barometer) {
     312:	0006      	movs	r6, r0
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     314:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     316:	8902      	ldrh	r2, [r0, #8]
     318:	ab05      	add	r3, sp, #20
     31a:	801a      	strh	r2, [r3, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     31c:	220e      	movs	r2, #14
     31e:	8941      	ldrh	r1, [r0, #10]
     320:	a802      	add	r0, sp, #8
     322:	1812      	adds	r2, r2, r0
     324:	8011      	strh	r1, [r2, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     326:	881b      	ldrh	r3, [r3, #0]
     328:	6931      	ldr	r1, [r6, #16]
     32a:	021b      	lsls	r3, r3, #8
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     32c:	8810      	ldrh	r0, [r2, #0]
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     32e:	1acb      	subs	r3, r1, r3
     330:	9300      	str	r3, [sp, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     332:	17db      	asrs	r3, r3, #31
     334:	9301      	str	r3, [sp, #4]
     336:	9a00      	ldr	r2, [sp, #0]
     338:	4f29      	ldr	r7, [pc, #164]	; (3e0 <ConvertPressureTemperature+0xe8>)
     33a:	b280      	uxth	r0, r0
     33c:	2100      	movs	r1, #0
     33e:	47b8      	blx	r7
     340:	23fa      	movs	r3, #250	; 0xfa
     342:	00db      	lsls	r3, r3, #3
     344:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     346:	882b      	ldrh	r3, [r5, #0]
     348:	8820      	ldrh	r0, [r4, #0]
     34a:	b29b      	uxth	r3, r3
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     34c:	6171      	str	r1, [r6, #20]
    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     34e:	001f      	movs	r7, r3
     350:	9a00      	ldr	r2, [sp, #0]
     352:	9b01      	ldr	r3, [sp, #4]
     354:	4c22      	ldr	r4, [pc, #136]	; (3e0 <ConvertPressureTemperature+0xe8>)
     356:	b280      	uxth	r0, r0
     358:	2100      	movs	r1, #0
     35a:	47a0      	blx	r4
     35c:	064b      	lsls	r3, r1, #25
     35e:	09c4      	lsrs	r4, r0, #7
     360:	431c      	orrs	r4, r3
     362:	2300      	movs	r3, #0
     364:	11cd      	asrs	r5, r1, #7
     366:	043a      	lsls	r2, r7, #16
     368:	1912      	adds	r2, r2, r4
     36a:	416b      	adcs	r3, r5
     36c:	9206      	str	r2, [sp, #24]
     36e:	9307      	str	r3, [sp, #28]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     370:	ab02      	add	r3, sp, #8
     372:	889c      	ldrh	r4, [r3, #4]
     374:	8918      	ldrh	r0, [r3, #8]
     376:	9a00      	ldr	r2, [sp, #0]
     378:	9b01      	ldr	r3, [sp, #4]
     37a:	4d19      	ldr	r5, [pc, #100]	; (3e0 <ConvertPressureTemperature+0xe8>)
     37c:	b280      	uxth	r0, r0
     37e:	2100      	movs	r1, #0
     380:	47a8      	blx	r5
     382:	060d      	lsls	r5, r1, #24
     384:	120b      	asrs	r3, r1, #8
     386:	2100      	movs	r1, #0
     388:	b2a4      	uxth	r4, r4
     38a:	0a02      	lsrs	r2, r0, #8
     38c:	432a      	orrs	r2, r5
     38e:	03e0      	lsls	r0, r4, #15
     390:	1812      	adds	r2, r2, r0
     392:	414b      	adcs	r3, r1
     394:	9208      	str	r2, [sp, #32]
     396:	9309      	str	r3, [sp, #36]	; 0x24
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     398:	9a08      	ldr	r2, [sp, #32]
     39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     39c:	9c06      	ldr	r4, [sp, #24]
     39e:	9d07      	ldr	r5, [sp, #28]
     3a0:	4f0f      	ldr	r7, [pc, #60]	; (3e0 <ConvertPressureTemperature+0xe8>)
     3a2:	68f0      	ldr	r0, [r6, #12]
     3a4:	47b8      	blx	r7
     3a6:	17cb      	asrs	r3, r1, #31
     3a8:	02db      	lsls	r3, r3, #11
     3aa:	469c      	mov	ip, r3
     3ac:	4667      	mov	r7, ip
     3ae:	2300      	movs	r3, #0
     3b0:	0afa      	lsrs	r2, r7, #11
     3b2:	1880      	adds	r0, r0, r2
     3b4:	4159      	adcs	r1, r3
     3b6:	02cb      	lsls	r3, r1, #11
     3b8:	469c      	mov	ip, r3
     3ba:	4667      	mov	r7, ip
     3bc:	0d42      	lsrs	r2, r0, #21
     3be:	433a      	orrs	r2, r7
     3c0:	154b      	asrs	r3, r1, #21
     3c2:	1b12      	subs	r2, r2, r4
     3c4:	41ab      	sbcs	r3, r5
     3c6:	2100      	movs	r1, #0
     3c8:	17dc      	asrs	r4, r3, #31
     3ca:	0464      	lsls	r4, r4, #17
     3cc:	0c60      	lsrs	r0, r4, #17
     3ce:	1812      	adds	r2, r2, r0
     3d0:	414b      	adcs	r3, r1
     3d2:	0011      	movs	r1, r2
     3d4:	045b      	lsls	r3, r3, #17
     3d6:	0bca      	lsrs	r2, r1, #15
     3d8:	431a      	orrs	r2, r3
     3da:	61f2      	str	r2, [r6, #28]
}
     3dc:	b00b      	add	sp, #44	; 0x2c
     3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3e0:	00001641 	.word	0x00001641

000003e4 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     3e4:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3e6:	240a      	movs	r4, #10
     3e8:	69c3      	ldr	r3, [r0, #28]

    if (my_barometer->pressurePa > PA_INIT)
     3ea:	4d0f      	ldr	r5, [pc, #60]	; (428 <pascalToCent+0x44>)
    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3ec:	435c      	muls	r4, r3
     3ee:	6184      	str	r4, [r0, #24]
    if (my_barometer->pressurePa > PA_INIT)
     3f0:	42ac      	cmp	r4, r5
     3f2:	d902      	bls.n	3fa <pascalToCent+0x16>
        my_barometer->heightCm = lookupTable[0];
     3f4:	4b0d      	ldr	r3, [pc, #52]	; (42c <pascalToCent+0x48>)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3f6:	6203      	str	r3, [r0, #32]
        }
    }
}
     3f8:	bd70      	pop	{r4, r5, r6, pc}
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     3fa:	1b2b      	subs	r3, r5, r4
     3fc:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     3fe:	2b4b      	cmp	r3, #75	; 0x4b
     400:	d901      	bls.n	406 <pascalToCent+0x22>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     402:	4b0b      	ldr	r3, [pc, #44]	; (430 <pascalToCent+0x4c>)
     404:	e7f7      	b.n	3f6 <pascalToCent+0x12>
            const int32_t z1 = lookupTable[inx];
     406:	4e0b      	ldr	r6, [pc, #44]	; (434 <pascalToCent+0x50>)
     408:	009a      	lsls	r2, r3, #2
     40a:	18b2      	adds	r2, r6, r2
     40c:	6911      	ldr	r1, [r2, #16]
            const int32_t pa1 = PA_INIT - (inx << 10);
     40e:	029a      	lsls	r2, r3, #10
     410:	1aad      	subs	r5, r5, r2
            const int32_t z2 = lookupTable[inx + 1];
     412:	1c5a      	adds	r2, r3, #1
     414:	0092      	lsls	r2, r2, #2
     416:	18b2      	adds	r2, r6, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     418:	6913      	ldr	r3, [r2, #16]
     41a:	1b2c      	subs	r4, r5, r4
     41c:	1a5b      	subs	r3, r3, r1
     41e:	4363      	muls	r3, r4
     420:	0a9b      	lsrs	r3, r3, #10
     422:	185b      	adds	r3, r3, r1
     424:	e7e7      	b.n	3f6 <pascalToCent+0x12>
     426:	46c0      	nop			; (mov r8, r8)
     428:	000199cc 	.word	0x000199cc
     42c:	ffff8d20 	.word	0xffff8d20
     430:	000f048e 	.word	0x000f048e
     434:	000026a8 	.word	0x000026a8

00000438 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     438:	b5f0      	push	{r4, r5, r6, r7, lr}
     43a:	27a2      	movs	r7, #162	; 0xa2
     43c:	b087      	sub	sp, #28
     43e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     440:	2096      	movs	r0, #150	; 0x96
     442:	4c28      	ldr	r4, [pc, #160]	; (4e4 <readMS5803Coefficients+0xac>)
     444:	0080      	lsls	r0, r0, #2
     446:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     448:	2096      	movs	r0, #150	; 0x96
     44a:	0080      	lsls	r0, r0, #2
     44c:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     44e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     450:	4c25      	ldr	r4, [pc, #148]	; (4e8 <readMS5803Coefficients+0xb0>)
     452:	4b26      	ldr	r3, [pc, #152]	; (4ec <readMS5803Coefficients+0xb4>)
     454:	0212      	lsls	r2, r2, #8
     456:	615a      	str	r2, [r3, #20]
     458:	7863      	ldrb	r3, [r4, #1]
     45a:	7822      	ldrb	r2, [r4, #0]
     45c:	79a1      	ldrb	r1, [r4, #6]
     45e:	7966      	ldrb	r6, [r4, #5]
     460:	021b      	lsls	r3, r3, #8
     462:	4313      	orrs	r3, r2
     464:	0209      	lsls	r1, r1, #8
     466:	78a2      	ldrb	r2, [r4, #2]
     468:	430e      	orrs	r6, r1
     46a:	79e1      	ldrb	r1, [r4, #7]
     46c:	0412      	lsls	r2, r2, #16
     46e:	4313      	orrs	r3, r2
     470:	7a20      	ldrb	r0, [r4, #8]
     472:	78e2      	ldrb	r2, [r4, #3]
     474:	0409      	lsls	r1, r1, #16
     476:	4331      	orrs	r1, r6
     478:	7a66      	ldrb	r6, [r4, #9]
     47a:	0612      	lsls	r2, r2, #24
     47c:	0600      	lsls	r0, r0, #24
     47e:	4308      	orrs	r0, r1
     480:	431a      	orrs	r2, r3
     482:	9700      	str	r7, [sp, #0]
     484:	7923      	ldrb	r3, [r4, #4]
     486:	0031      	movs	r1, r6
     488:	4d19      	ldr	r5, [pc, #100]	; (4f0 <readMS5803Coefficients+0xb8>)
     48a:	9003      	str	r0, [sp, #12]
     48c:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     48e:	0022      	movs	r2, r4
     490:	7ad3      	ldrb	r3, [r2, #11]
     492:	7aa4      	ldrb	r4, [r4, #10]
     494:	021b      	lsls	r3, r3, #8
     496:	4323      	orrs	r3, r4
     498:	7b14      	ldrb	r4, [r2, #12]
     49a:	7b95      	ldrb	r5, [r2, #14]
     49c:	0424      	lsls	r4, r4, #16
     49e:	4323      	orrs	r3, r4
     4a0:	7b54      	ldrb	r4, [r2, #13]
     4a2:	0031      	movs	r1, r6
     4a4:	0624      	lsls	r4, r4, #24
     4a6:	431c      	orrs	r4, r3
     4a8:	0022      	movs	r2, r4
     4aa:	002b      	movs	r3, r5
     4ac:	9404      	str	r4, [sp, #16]
     4ae:	9803      	ldr	r0, [sp, #12]
     4b0:	4c10      	ldr	r4, [pc, #64]	; (4f4 <readMS5803Coefficients+0xbc>)
     4b2:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b4:	002b      	movs	r3, r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4b6:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b8:	9a04      	ldr	r2, [sp, #16]
     4ba:	9803      	ldr	r0, [sp, #12]
     4bc:	0031      	movs	r1, r6
     4be:	4c0d      	ldr	r4, [pc, #52]	; (4f4 <readMS5803Coefficients+0xbc>)
     4c0:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4c2:	2280      	movs	r2, #128	; 0x80
     4c4:	4b09      	ldr	r3, [pc, #36]	; (4ec <readMS5803Coefficients+0xb4>)
     4c6:	0212      	lsls	r2, r2, #8
     4c8:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     4ca:	9b05      	ldr	r3, [sp, #20]
     4cc:	3702      	adds	r7, #2
     4ce:	021d      	lsls	r5, r3, #8
     4d0:	9b02      	ldr	r3, [sp, #8]
     4d2:	4328      	orrs	r0, r5
     4d4:	8018      	strh	r0, [r3, #0]
     4d6:	b2ff      	uxtb	r7, r7
     4d8:	3302      	adds	r3, #2
     4da:	9302      	str	r3, [sp, #8]
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     4dc:	2fae      	cmp	r7, #174	; 0xae
     4de:	d1af      	bne.n	440 <readMS5803Coefficients+0x8>
    }

}
     4e0:	b007      	add	sp, #28
     4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4e4:	00000df1 	.word	0x00000df1
     4e8:	000026a8 	.word	0x000026a8
     4ec:	41004400 	.word	0x41004400
     4f0:	00000b91 	.word	0x00000b91
     4f4:	00000bfd 	.word	0x00000bfd

000004f8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4fa:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     4fc:	231e      	movs	r3, #30
void initMS5803Barometer(Barometer *my_barometer) {
     4fe:	0004      	movs	r4, r0
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     500:	4918      	ldr	r1, [pc, #96]	; (564 <initMS5803Barometer+0x6c>)
     502:	4d19      	ldr	r5, [pc, #100]	; (568 <initMS5803Barometer+0x70>)
     504:	0236      	lsls	r6, r6, #8
     506:	616e      	str	r6, [r5, #20]
     508:	9300      	str	r3, [sp, #0]
     50a:	784b      	ldrb	r3, [r1, #1]
     50c:	780a      	ldrb	r2, [r1, #0]
     50e:	021b      	lsls	r3, r3, #8
     510:	4313      	orrs	r3, r2
     512:	788a      	ldrb	r2, [r1, #2]
     514:	1d4f      	adds	r7, r1, #5
     516:	0412      	lsls	r2, r2, #16
     518:	4313      	orrs	r3, r2
     51a:	78ca      	ldrb	r2, [r1, #3]
     51c:	7948      	ldrb	r0, [r1, #5]
     51e:	0612      	lsls	r2, r2, #24
     520:	431a      	orrs	r2, r3
     522:	790b      	ldrb	r3, [r1, #4]
     524:	7989      	ldrb	r1, [r1, #6]
     526:	0209      	lsls	r1, r1, #8
     528:	4301      	orrs	r1, r0
     52a:	78b8      	ldrb	r0, [r7, #2]
     52c:	0400      	lsls	r0, r0, #16
     52e:	4301      	orrs	r1, r0
     530:	78f8      	ldrb	r0, [r7, #3]
     532:	0600      	lsls	r0, r0, #24
     534:	4308      	orrs	r0, r1
     536:	7939      	ldrb	r1, [r7, #4]
     538:	4f0c      	ldr	r7, [pc, #48]	; (56c <initMS5803Barometer+0x74>)
     53a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     53c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     53e:	20c8      	movs	r0, #200	; 0xc8
     540:	4b0b      	ldr	r3, [pc, #44]	; (570 <initMS5803Barometer+0x78>)
     542:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     544:	0020      	movs	r0, r4
     546:	4b0b      	ldr	r3, [pc, #44]	; (574 <initMS5803Barometer+0x7c>)
     548:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     54a:	23fa      	movs	r3, #250	; 0xfa
     54c:	011b      	lsls	r3, r3, #4
     54e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     550:	4b09      	ldr	r3, [pc, #36]	; (578 <initMS5803Barometer+0x80>)
     552:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     554:	4b09      	ldr	r3, [pc, #36]	; (57c <initMS5803Barometer+0x84>)
     556:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     558:	4b09      	ldr	r3, [pc, #36]	; (580 <initMS5803Barometer+0x88>)
     55a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     55c:	23fa      	movs	r3, #250	; 0xfa
     55e:	00db      	lsls	r3, r3, #3
     560:	6163      	str	r3, [r4, #20]




}
     562:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     564:	000026a8 	.word	0x000026a8
     568:	41004400 	.word	0x41004400
     56c:	00000b91 	.word	0x00000b91
     570:	00000e1d 	.word	0x00000e1d
     574:	00000439 	.word	0x00000439
     578:	00002710 	.word	0x00002710
     57c:	0041c9fe 	.word	0x0041c9fe
     580:	007ffae4 	.word	0x007ffae4

00000584 <init>:
#include "math.h"




void init() {
     584:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     586:	4bc1      	ldr	r3, [pc, #772]	; (88c <init+0x308>)
void init() {
     588:	b085      	sub	sp, #20
    SystemInit();
     58a:	4798      	blx	r3
    GclkInit();
     58c:	4bc0      	ldr	r3, [pc, #768]	; (890 <init+0x30c>)
     58e:	4798      	blx	r3
    RtcInit();
     590:	4bc0      	ldr	r3, [pc, #768]	; (894 <init+0x310>)
     592:	4798      	blx	r3
    delayInit();
     594:	4bc0      	ldr	r3, [pc, #768]	; (898 <init+0x314>)
     596:	4798      	blx	r3
    adcInit();
     598:	4bc0      	ldr	r3, [pc, #768]	; (89c <init+0x318>)
     59a:	4798      	blx	r3
    dmaInit();
     59c:	4bc0      	ldr	r3, [pc, #768]	; (8a0 <init+0x31c>)
     59e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5a0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5a2:	21c1      	movs	r1, #193	; 0xc1
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5a4:	4bbf      	ldr	r3, [pc, #764]	; (8a4 <init+0x320>)
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5a6:	0089      	lsls	r1, r1, #2
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5a8:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5aa:	585a      	ldr	r2, [r3, r1]
     5ac:	48be      	ldr	r0, [pc, #760]	; (8a8 <init+0x324>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ae:	2401      	movs	r4, #1
     5b0:	4002      	ands	r2, r0
     5b2:	505a      	str	r2, [r3, r1]
     5b4:	4bbd      	ldr	r3, [pc, #756]	; (8ac <init+0x328>)
     5b6:	0019      	movs	r1, r3
     5b8:	3154      	adds	r1, #84	; 0x54
     5ba:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5bc:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5be:	43a2      	bics	r2, r4
     5c0:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5c2:	2280      	movs	r2, #128	; 0x80
     5c4:	0352      	lsls	r2, r2, #13
     5c6:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5c8:	220f      	movs	r2, #15
     5ca:	3033      	adds	r0, #51	; 0x33
     5cc:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ce:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d0:	4391      	bics	r1, r2
     5d2:	4321      	orrs	r1, r4
     5d4:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5d6:	7cc1      	ldrb	r1, [r0, #19]
     5d8:	36c3      	adds	r6, #195	; 0xc3
     5da:	4321      	orrs	r1, r4
     5dc:	74c1      	strb	r1, [r0, #19]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5de:	0019      	movs	r1, r3
     5e0:	2010      	movs	r0, #16
     5e2:	31b1      	adds	r1, #177	; 0xb1
     5e4:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e6:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5e8:	4015      	ands	r5, r2
     5ea:	4305      	orrs	r5, r0
     5ec:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ee:	7835      	ldrb	r5, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5f0:	3788      	adds	r7, #136	; 0x88
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f2:	4325      	orrs	r5, r4
     5f4:	7035      	strb	r5, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5f6:	780d      	ldrb	r5, [r1, #0]
     5f8:	4015      	ands	r5, r2
     5fa:	4305      	orrs	r5, r0
     5fc:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fe:	7835      	ldrb	r5, [r6, #0]
     600:	4325      	orrs	r5, r4
     602:	7035      	strb	r5, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     604:	7d35      	ldrb	r5, [r6, #20]
     606:	43a5      	bics	r5, r4
     608:	7535      	strb	r5, [r6, #20]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     60a:	2580      	movs	r5, #128	; 0x80
     60c:	042d      	lsls	r5, r5, #16
     60e:	9703      	str	r7, [sp, #12]
     610:	603d      	str	r5, [r7, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     612:	60fd      	str	r5, [r7, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     614:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     616:	003e      	movs	r6, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     618:	4395      	bics	r5, r2
     61a:	4325      	orrs	r5, r4
     61c:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61e:	25c2      	movs	r5, #194	; 0xc2
     620:	46ac      	mov	ip, r5
     622:	449c      	add	ip, r3
     624:	4665      	mov	r5, ip
     626:	4667      	mov	r7, ip
     628:	782d      	ldrb	r5, [r5, #0]
     62a:	4325      	orrs	r5, r4
     62c:	703d      	strb	r5, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     62e:	780d      	ldrb	r5, [r1, #0]
     630:	4395      	bics	r5, r2
     632:	4325      	orrs	r5, r4
     634:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     636:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     638:	7839      	ldrb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63a:	35d6      	adds	r5, #214	; 0xd6
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     63c:	4321      	orrs	r1, r4
     63e:	7039      	strb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     640:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     642:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	43a1      	bics	r1, r4
     646:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     648:	2180      	movs	r1, #128	; 0x80
     64a:	9d03      	ldr	r5, [sp, #12]
     64c:	03c9      	lsls	r1, r1, #15
     64e:	6029      	str	r1, [r5, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     650:	60f1      	str	r1, [r6, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     652:	0019      	movs	r1, r3
     654:	3131      	adds	r1, #49	; 0x31
     656:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     658:	3e3f      	subs	r6, #63	; 0x3f
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     65a:	4015      	ands	r5, r2
     65c:	4328      	orrs	r0, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65e:	001d      	movs	r5, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     660:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     662:	3543      	adds	r5, #67	; 0x43
     664:	7828      	ldrb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     666:	46bc      	mov	ip, r7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     668:	4320      	orrs	r0, r4
     66a:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	7da8      	ldrb	r0, [r5, #22]
     66e:	3505      	adds	r5, #5
     670:	43a0      	bics	r0, r4
     672:	7468      	strb	r0, [r5, #17]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     674:	2080      	movs	r0, #128	; 0x80
     676:	0480      	lsls	r0, r0, #18
     678:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     67a:	6158      	str	r0, [r3, #20]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     67c:	7808      	ldrb	r0, [r1, #0]
     67e:	4390      	bics	r0, r2
     680:	4320      	orrs	r0, r4
     682:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     684:	0018      	movs	r0, r3
     686:	3042      	adds	r0, #66	; 0x42
     688:	7801      	ldrb	r1, [r0, #0]
     68a:	4321      	orrs	r1, r4
     68c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68e:	7d81      	ldrb	r1, [r0, #22]
     690:	43a1      	bics	r1, r4
     692:	7581      	strb	r1, [r0, #22]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	0449      	lsls	r1, r1, #17
     698:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69a:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	7829      	ldrb	r1, [r5, #0]
     69e:	43a1      	bics	r1, r4
     6a0:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a2:	2180      	movs	r1, #128	; 0x80
     6a4:	0049      	lsls	r1, r1, #1
     6a6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a8:	7831      	ldrb	r1, [r6, #0]
     6aa:	43a1      	bics	r1, r4
     6ac:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ae:	2180      	movs	r1, #128	; 0x80
     6b0:	0089      	lsls	r1, r1, #2
     6b2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b4:	0019      	movs	r1, r3
     6b6:	314b      	adds	r1, #75	; 0x4b
     6b8:	7808      	ldrb	r0, [r1, #0]
     6ba:	43a0      	bics	r0, r4
     6bc:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6be:	7808      	ldrb	r0, [r1, #0]
     6c0:	4338      	orrs	r0, r7
     6c2:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6c4:	2080      	movs	r0, #128	; 0x80
     6c6:	0100      	lsls	r0, r0, #4
     6c8:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ca:	4879      	ldr	r0, [pc, #484]	; (8b0 <init+0x32c>)
     6cc:	371e      	adds	r7, #30
     6ce:	7800      	ldrb	r0, [r0, #0]
     6d0:	4010      	ands	r0, r2
     6d2:	4338      	orrs	r0, r7
     6d4:	4f76      	ldr	r7, [pc, #472]	; (8b0 <init+0x32c>)
     6d6:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d8:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6da:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6dc:	4320      	orrs	r0, r4
     6de:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6e0:	0018      	movs	r0, r3
     6e2:	3034      	adds	r0, #52	; 0x34
     6e4:	7801      	ldrb	r1, [r0, #0]
     6e6:	4011      	ands	r1, r2
     6e8:	4339      	orrs	r1, r7
     6ea:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ec:	7831      	ldrb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ee:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f0:	4321      	orrs	r1, r4
     6f2:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f4:	4666      	mov	r6, ip
     6f6:	7801      	ldrb	r1, [r0, #0]
     6f8:	4391      	bics	r1, r2
     6fa:	4331      	orrs	r1, r6
     6fc:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	3096      	adds	r0, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     702:	4321      	orrs	r1, r4
     704:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     706:	7801      	ldrb	r1, [r0, #0]
     708:	001e      	movs	r6, r3
     70a:	43a1      	bics	r1, r4
     70c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70e:	2180      	movs	r1, #128	; 0x80
     710:	9803      	ldr	r0, [sp, #12]
     712:	00c9      	lsls	r1, r1, #3
     714:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     716:	0018      	movs	r0, r3
     718:	3098      	adds	r0, #152	; 0x98
     71a:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71c:	78a8      	ldrb	r0, [r5, #2]
     71e:	3651      	adds	r6, #81	; 0x51
     720:	43a0      	bics	r0, r4
     722:	70a8      	strb	r0, [r5, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     724:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     726:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     728:	7a29      	ldrb	r1, [r5, #8]
     72a:	43a1      	bics	r1, r4
     72c:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72e:	2180      	movs	r1, #128	; 0x80
     730:	0249      	lsls	r1, r1, #9
     732:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     734:	7831      	ldrb	r1, [r6, #0]
     736:	43a1      	bics	r1, r4
     738:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73a:	2180      	movs	r1, #128	; 0x80
     73c:	0289      	lsls	r1, r1, #10
     73e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     740:	0019      	movs	r1, r3
     742:	3153      	adds	r1, #83	; 0x53
     744:	7808      	ldrb	r0, [r1, #0]
     746:	43a0      	bics	r0, r4
     748:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74a:	7808      	ldrb	r0, [r1, #0]
     74c:	4338      	orrs	r0, r7
     74e:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     750:	001f      	movs	r7, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2080      	movs	r0, #128	; 0x80
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     754:	3739      	adds	r7, #57	; 0x39
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     756:	0300      	lsls	r0, r0, #12
     758:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75a:	9703      	str	r7, [sp, #12]
     75c:	7838      	ldrb	r0, [r7, #0]
     75e:	2720      	movs	r7, #32
     760:	4010      	ands	r0, r2
     762:	4338      	orrs	r0, r7
     764:	9f03      	ldr	r7, [sp, #12]
     766:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     768:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76a:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	4320      	orrs	r0, r4
     76e:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     770:	0018      	movs	r0, r3
     772:	3038      	adds	r0, #56	; 0x38
     774:	7801      	ldrb	r1, [r0, #0]
     776:	4011      	ands	r1, r2
     778:	4339      	orrs	r1, r7
     77a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77c:	7831      	ldrb	r1, [r6, #0]
     77e:	4321      	orrs	r1, r4
     780:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	4666      	mov	r6, ip
     784:	7801      	ldrb	r1, [r0, #0]
     786:	4391      	bics	r1, r2
     788:	4331      	orrs	r1, r6
     78a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78c:	7a29      	ldrb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	3014      	adds	r0, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     790:	4321      	orrs	r1, r4
     792:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	7981      	ldrb	r1, [r0, #6]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     796:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     798:	43a1      	bics	r1, r4
     79a:	7181      	strb	r1, [r0, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     79c:	2180      	movs	r1, #128	; 0x80
     79e:	02c9      	lsls	r1, r1, #11
     7a0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a4:	7801      	ldrb	r1, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7a6:	353b      	adds	r5, #59	; 0x3b
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	43a1      	bics	r1, r4
     7aa:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ac:	2180      	movs	r1, #128	; 0x80
     7ae:	0149      	lsls	r1, r1, #5
     7b0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	7881      	ldrb	r1, [r0, #2]
     7b4:	43a1      	bics	r1, r4
     7b6:	7081      	strb	r1, [r0, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	01c9      	lsls	r1, r1, #7
     7bc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7be:	0019      	movs	r1, r3
     7c0:	314d      	adds	r1, #77	; 0x4d
     7c2:	7808      	ldrb	r0, [r1, #0]
     7c4:	43a0      	bics	r0, r4
     7c6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7c8:	7808      	ldrb	r0, [r1, #0]
     7ca:	4330      	orrs	r0, r6
     7cc:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7ce:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	0018      	movs	r0, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7d2:	0189      	lsls	r1, r1, #6
     7d4:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d6:	304f      	adds	r0, #79	; 0x4f
     7d8:	7801      	ldrb	r1, [r0, #0]
     7da:	43a1      	bics	r1, r4
     7dc:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7de:	2180      	movs	r1, #128	; 0x80
     7e0:	0209      	lsls	r1, r1, #8
     7e2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7e4:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e6:	0019      	movs	r1, r3
     7e8:	3155      	adds	r1, #85	; 0x55
     7ea:	7808      	ldrb	r0, [r1, #0]
     7ec:	43a0      	bics	r0, r4
     7ee:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f0:	2080      	movs	r0, #128	; 0x80
     7f2:	0380      	lsls	r0, r0, #14
     7f4:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     7f6:	2040      	movs	r0, #64	; 0x40
     7f8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	7848      	ldrb	r0, [r1, #1]
     7fc:	43a0      	bics	r0, r4
     7fe:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     800:	2080      	movs	r0, #128	; 0x80
     802:	03c0      	lsls	r0, r0, #15
     804:	6098      	str	r0, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     806:	7828      	ldrb	r0, [r5, #0]
     808:	4390      	bics	r0, r2
     80a:	4330      	orrs	r0, r6
     80c:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	7848      	ldrb	r0, [r1, #1]
     810:	4320      	orrs	r0, r4
     812:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	0018      	movs	r0, r3
     816:	3057      	adds	r0, #87	; 0x57
     818:	7801      	ldrb	r1, [r0, #0]
     81a:	43a1      	bics	r1, r4
     81c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     81e:	7801      	ldrb	r1, [r0, #0]
     820:	4331      	orrs	r1, r6
     822:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     824:	2180      	movs	r1, #128	; 0x80
     826:	0409      	lsls	r1, r1, #16
     828:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82a:	782b      	ldrb	r3, [r5, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     82c:	4e21      	ldr	r6, [pc, #132]	; (8b4 <init+0x330>)
     82e:	401a      	ands	r2, r3
     830:	433a      	orrs	r2, r7
     832:	702a      	strb	r2, [r5, #0]
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     834:	2500      	movs	r5, #0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     836:	7803      	ldrb	r3, [r0, #0]
    sercomClockEnable(SPI0, 3, 4);
     838:	2204      	movs	r2, #4
     83a:	4323      	orrs	r3, r4
     83c:	7003      	strb	r3, [r0, #0]
     83e:	2103      	movs	r1, #3
     840:	2000      	movs	r0, #0
     842:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     844:	002b      	movs	r3, r5
     846:	002a      	movs	r2, r5
     848:	0028      	movs	r0, r5
     84a:	4f1b      	ldr	r7, [pc, #108]	; (8b8 <init+0x334>)
     84c:	9501      	str	r5, [sp, #4]
     84e:	9500      	str	r5, [sp, #0]
     850:	2103      	movs	r1, #3
     852:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     854:	0020      	movs	r0, r4
     856:	2204      	movs	r2, #4
     858:	2103      	movs	r1, #3
     85a:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     85c:	002b      	movs	r3, r5
     85e:	002a      	movs	r2, r5
     860:	0020      	movs	r0, r4
     862:	9501      	str	r5, [sp, #4]
     864:	9500      	str	r5, [sp, #0]
     866:	2103      	movs	r1, #3
     868:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     86a:	2208      	movs	r2, #8
     86c:	2104      	movs	r1, #4
     86e:	2003      	movs	r0, #3
     870:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     872:	0021      	movs	r1, r4
     874:	002a      	movs	r2, r5
     876:	2003      	movs	r0, #3
     878:	4b10      	ldr	r3, [pc, #64]	; (8bc <init+0x338>)
     87a:	4c11      	ldr	r4, [pc, #68]	; (8c0 <init+0x33c>)
     87c:	47a0      	blx	r4

    TC4Init();
     87e:	4b11      	ldr	r3, [pc, #68]	; (8c4 <init+0x340>)
     880:	4798      	blx	r3
    TC5Init();
     882:	4b11      	ldr	r3, [pc, #68]	; (8c8 <init+0x344>)
     884:	4798      	blx	r3
}
     886:	b005      	add	sp, #20
     888:	bdf0      	pop	{r4, r5, r6, r7, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	000001d5 	.word	0x000001d5
     890:	00000c89 	.word	0x00000c89
     894:	00000d0d 	.word	0x00000d0d
     898:	00000dd1 	.word	0x00000dd1
     89c:	00000ab1 	.word	0x00000ab1
     8a0:	00000f6d 	.word	0x00000f6d
     8a4:	e000e100 	.word	0xe000e100
     8a8:	ff00ffff 	.word	0xff00ffff
     8ac:	41004400 	.word	0x41004400
     8b0:	41004435 	.word	0x41004435
     8b4:	000014f9 	.word	0x000014f9
     8b8:	00001559 	.word	0x00001559
     8bc:	0000f2e4 	.word	0x0000f2e4
     8c0:	000015bd 	.word	0x000015bd
     8c4:	00000e9d 	.word	0x00000e9d
     8c8:	00000f05 	.word	0x00000f05

000008cc <startUp>:

void startUp(Altimeter *my_altimeter) {
     8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ce:	0007      	movs	r7, r0


    beep(400);
     8d0:	20c8      	movs	r0, #200	; 0xc8
void startUp(Altimeter *my_altimeter) {
     8d2:	b0c3      	sub	sp, #268	; 0x10c
    beep(400);
     8d4:	0040      	lsls	r0, r0, #1
     8d6:	4c28      	ldr	r4, [pc, #160]	; (978 <startUp+0xac>)
     8d8:	47a0      	blx	r4

    u32_t startupTime = millis();
     8da:	4d28      	ldr	r5, [pc, #160]	; (97c <startUp+0xb0>)
     8dc:	47a8      	blx	r5
     8de:	0006      	movs	r6, r0

    while((millis() - startupTime) < 10000) {
     8e0:	47a8      	blx	r5
     8e2:	4b27      	ldr	r3, [pc, #156]	; (980 <startUp+0xb4>)
     8e4:	1b80      	subs	r0, r0, r6
     8e6:	4298      	cmp	r0, r3
     8e8:	d827      	bhi.n	93a <startUp+0x6e>

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     8ea:	4b26      	ldr	r3, [pc, #152]	; (984 <startUp+0xb8>)
     8ec:	7e1b      	ldrb	r3, [r3, #24]
     8ee:	075b      	lsls	r3, r3, #29
     8f0:	d5f6      	bpl.n	8e0 <startUp+0x14>
            u8_t data1 = usartDataIn(USART3);
     8f2:	2003      	movs	r0, #3
     8f4:	4b24      	ldr	r3, [pc, #144]	; (988 <startUp+0xbc>)
     8f6:	4798      	blx	r3
            if (data1 == 0x41) {
     8f8:	2841      	cmp	r0, #65	; 0x41
     8fa:	d1f1      	bne.n	8e0 <startUp+0x14>

                usartDataOut(USART3, 'T');
     8fc:	2154      	movs	r1, #84	; 0x54
     8fe:	383e      	subs	r0, #62	; 0x3e
     900:	4b22      	ldr	r3, [pc, #136]	; (98c <startUp+0xc0>)
     902:	4798      	blx	r3

                u8_t pagesToSend = 20;
                usartDataOut(USART3, pagesToSend);
     904:	4b21      	ldr	r3, [pc, #132]	; (98c <startUp+0xc0>)
     906:	2114      	movs	r1, #20
     908:	2003      	movs	r0, #3
     90a:	4798      	blx	r3
     90c:	23a8      	movs	r3, #168	; 0xa8


                u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;
     90e:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
     910:	015b      	lsls	r3, r3, #5
     912:	18eb      	adds	r3, r5, r3
     914:	9301      	str	r3, [sp, #4]

                for (u8_t page = 0; page <= pagesToSend; ++page) {

                    u8_t data[255];
                    AT25SEreadPage(addressToSend, data);
     916:	a902      	add	r1, sp, #8
     918:	0028      	movs	r0, r5
     91a:	4b1d      	ldr	r3, [pc, #116]	; (990 <startUp+0xc4>)
     91c:	4798      	blx	r3
     91e:	2600      	movs	r6, #0

                    for (u8_t dataByte = 0; dataByte < 255; ++dataByte) {
                        usartDataOut(USART3, data[dataByte]);
     920:	ab02      	add	r3, sp, #8
     922:	5cf1      	ldrb	r1, [r6, r3]
     924:	2003      	movs	r0, #3
     926:	4b19      	ldr	r3, [pc, #100]	; (98c <startUp+0xc0>)
     928:	3601      	adds	r6, #1
     92a:	4798      	blx	r3
                    for (u8_t dataByte = 0; dataByte < 255; ++dataByte) {
     92c:	2eff      	cmp	r6, #255	; 0xff
     92e:	d1f7      	bne.n	920 <startUp+0x54>
                    }

                    addressToSend = addressToSend + 0x100;
     930:	3501      	adds	r5, #1
                for (u8_t page = 0; page <= pagesToSend; ++page) {
     932:	9b01      	ldr	r3, [sp, #4]
                    addressToSend = addressToSend + 0x100;
     934:	35ff      	adds	r5, #255	; 0xff
                for (u8_t page = 0; page <= pagesToSend; ++page) {
     936:	429d      	cmp	r5, r3
     938:	d1ed      	bne.n	916 <startUp+0x4a>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     93a:	0038      	movs	r0, r7
     93c:	4b15      	ldr	r3, [pc, #84]	; (994 <startUp+0xc8>)
     93e:	4798      	blx	r3
    flight(my_altimeter);
     940:	4b15      	ldr	r3, [pc, #84]	; (998 <startUp+0xcc>)
     942:	0038      	movs	r0, r7
     944:	4798      	blx	r3

    beep(300);
     946:	2096      	movs	r0, #150	; 0x96
     948:	0040      	lsls	r0, r0, #1
     94a:	47a0      	blx	r4
    delay_ms(80);
     94c:	4d13      	ldr	r5, [pc, #76]	; (99c <startUp+0xd0>)
     94e:	2050      	movs	r0, #80	; 0x50
     950:	47a8      	blx	r5
    beep(300);
     952:	2096      	movs	r0, #150	; 0x96
     954:	0040      	lsls	r0, r0, #1
     956:	47a0      	blx	r4
    delay_ms(250);
     958:	20fa      	movs	r0, #250	; 0xfa
     95a:	47a8      	blx	r5
    beep(300);
     95c:	2096      	movs	r0, #150	; 0x96
     95e:	0040      	lsls	r0, r0, #1
     960:	47a0      	blx	r4
    delay_ms(80);
     962:	2050      	movs	r0, #80	; 0x50
     964:	47a8      	blx	r5
    beep(300);
     966:	2096      	movs	r0, #150	; 0x96
     968:	0040      	lsls	r0, r0, #1
     96a:	47a0      	blx	r4
    delay_ms(500);
     96c:	20fa      	movs	r0, #250	; 0xfa
     96e:	0040      	lsls	r0, r0, #1
     970:	47a8      	blx	r5


}
     972:	b043      	add	sp, #268	; 0x10c
     974:	bdf0      	pop	{r4, r5, r6, r7, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	00000c51 	.word	0x00000c51
     97c:	00000e65 	.word	0x00000e65
     980:	0000270f 	.word	0x0000270f
     984:	42001400 	.word	0x42001400
     988:	00001631 	.word	0x00001631
     98c:	00001619 	.word	0x00001619
     990:	000001e5 	.word	0x000001e5
     994:	00001175 	.word	0x00001175
     998:	00000fcd 	.word	0x00000fcd
     99c:	00000e1d 	.word	0x00000e1d

000009a0 <main>:



int main(void) {
     9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a2:	4c2b      	ldr	r4, [pc, #172]	; (a50 <main+0xb0>)

    init();
     9a4:	4b2b      	ldr	r3, [pc, #172]	; (a54 <main+0xb4>)
int main(void) {
     9a6:	44a5      	add	sp, r4

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     9a8:	2400      	movs	r4, #0
    init();
     9aa:	4798      	blx	r3
    my_altimeter.myFlightState = flightStatrup;
     9ac:	ab02      	add	r3, sp, #8
     9ae:	711c      	strb	r4, [r3, #4]
    initMS5803Barometer(&my_altimeter.myBarometer);
     9b0:	a804      	add	r0, sp, #16
     9b2:	4b29      	ldr	r3, [pc, #164]	; (a58 <main+0xb8>)
     9b4:	4798      	blx	r3
    IMUinit();
     9b6:	4b29      	ldr	r3, [pc, #164]	; (a5c <main+0xbc>)
     9b8:	4798      	blx	r3

    sampleTick(&my_altimeter);
     9ba:	a803      	add	r0, sp, #12
     9bc:	4b28      	ldr	r3, [pc, #160]	; (a60 <main+0xc0>)
     9be:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     9c0:	2380      	movs	r3, #128	; 0x80
     9c2:	aa03      	add	r2, sp, #12
     9c4:	33ff      	adds	r3, #255	; 0xff
     9c6:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x000500;
     9c8:	23a0      	movs	r3, #160	; 0xa0
     9ca:	00db      	lsls	r3, r3, #3


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     9cc:	0010      	movs	r0, r2
    my_altimeter.myFlashMemory.currentAddress = 0x000500;
     9ce:	9322      	str	r3, [sp, #136]	; 0x88
    startUp(&my_altimeter);
     9d0:	4b24      	ldr	r3, [pc, #144]	; (a64 <main+0xc4>)
     9d2:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     9d4:	2780      	movs	r7, #128	; 0x80

    //AT25SFErace4KBlock(0x000000);

    delay_ms(5);
     9d6:	2005      	movs	r0, #5
     9d8:	4d23      	ldr	r5, [pc, #140]	; (a68 <main+0xc8>)
     9da:	47a8      	blx	r5
     9dc:	037f      	lsls	r7, r7, #13



    while (1) {

        if (takeSample) {
     9de:	4e23      	ldr	r6, [pc, #140]	; (a6c <main+0xcc>)
     9e0:	7833      	ldrb	r3, [r6, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d007      	beq.n	9f6 <main+0x56>
            sampleTick(&my_altimeter);
     9e6:	a803      	add	r0, sp, #12
     9e8:	4b1d      	ldr	r3, [pc, #116]	; (a60 <main+0xc0>)
     9ea:	4798      	blx	r3
            flight(&my_altimeter);
     9ec:	4b20      	ldr	r3, [pc, #128]	; (a70 <main+0xd0>)
     9ee:	a803      	add	r0, sp, #12
     9f0:	4798      	blx	r3
            takeSample = false;
     9f2:	2300      	movs	r3, #0
     9f4:	7033      	strb	r3, [r6, #0]

        }


        if (writeLog) {
     9f6:	4b1f      	ldr	r3, [pc, #124]	; (a74 <main+0xd4>)
     9f8:	781a      	ldrb	r2, [r3, #0]
     9fa:	2a00      	cmp	r2, #0
     9fc:	d0ef      	beq.n	9de <main+0x3e>
            writeLog = false;
     9fe:	2200      	movs	r2, #0
            logSensors(&my_altimeter);
     a00:	a803      	add	r0, sp, #12
            writeLog = false;
     a02:	701a      	strb	r2, [r3, #0]
            logSensors(&my_altimeter);
     a04:	4b1c      	ldr	r3, [pc, #112]	; (a78 <main+0xd8>)
     a06:	4798      	blx	r3


            if (my_altimeter.myFlashMemory.pageReady) {
     a08:	4b1c      	ldr	r3, [pc, #112]	; (a7c <main+0xdc>)
     a0a:	aa03      	add	r2, sp, #12
     a0c:	5cd2      	ldrb	r2, [r2, r3]
     a0e:	2a00      	cmp	r2, #0
     a10:	d0e5      	beq.n	9de <main+0x3e>
                my_altimeter.myFlashMemory.pageReady = false;
     a12:	2100      	movs	r1, #0
     a14:	4e1a      	ldr	r6, [pc, #104]	; (a80 <main+0xe0>)
     a16:	aa03      	add	r2, sp, #12
     a18:	54d1      	strb	r1, [r2, r3]
     a1a:	61f7      	str	r7, [r6, #28]

                pinToggle(LedPin);


                if (pagesWritten <= 20) {
     a1c:	2c14      	cmp	r4, #20
     a1e:	d807      	bhi.n	a30 <main+0x90>

                    //u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
                    my_altimeter.myFlashMemory.currentAddress = my_altimeter.myFlashMemory.currentAddress + 0x100;
     a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
                    pagesWritten++;
     a22:	3401      	adds	r4, #1
                    my_altimeter.myFlashMemory.currentAddress = my_altimeter.myFlashMemory.currentAddress + 0x100;
     a24:	9301      	str	r3, [sp, #4]
     a26:	3301      	adds	r3, #1
     a28:	33ff      	adds	r3, #255	; 0xff
     a2a:	9322      	str	r3, [sp, #136]	; 0x88
                    pagesWritten++;
     a2c:	b2e4      	uxtb	r4, r4
     a2e:	e7d6      	b.n	9de <main+0x3e>

                } else {
                    delay_ms(80);
     a30:	2050      	movs	r0, #80	; 0x50
     a32:	47a8      	blx	r5
     a34:	61f7      	str	r7, [r6, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     a36:	2050      	movs	r0, #80	; 0x50
     a38:	47a8      	blx	r5
     a3a:	61f7      	str	r7, [r6, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     a3c:	2050      	movs	r0, #80	; 0x50
     a3e:	47a8      	blx	r5
     a40:	61f7      	str	r7, [r6, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     a42:	2050      	movs	r0, #80	; 0x50
     a44:	47a8      	blx	r5
     a46:	61f7      	str	r7, [r6, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     a48:	2050      	movs	r0, #80	; 0x50
     a4a:	47a8      	blx	r5
     a4c:	e7c7      	b.n	9de <main+0x3e>
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	fffffd5c 	.word	0xfffffd5c
     a54:	00000585 	.word	0x00000585
     a58:	000004f9 	.word	0x000004f9
     a5c:	00000a85 	.word	0x00000a85
     a60:	00001175 	.word	0x00001175
     a64:	000008cd 	.word	0x000008cd
     a68:	00000e1d 	.word	0x00000e1d
     a6c:	20000463 	.word	0x20000463
     a70:	00000fcd 	.word	0x00000fcd
     a74:	20000461 	.word	0x20000461
     a78:	00001069 	.word	0x00001069
     a7c:	0000027f 	.word	0x0000027f
     a80:	41004400 	.word	0x41004400

00000a84 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a84:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a86:	4c08      	ldr	r4, [pc, #32]	; (aa8 <IMUinit+0x24>)
     a88:	2580      	movs	r5, #128	; 0x80
     a8a:	0023      	movs	r3, r4
     a8c:	00ed      	lsls	r5, r5, #3
     a8e:	3394      	adds	r3, #148	; 0x94
     a90:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a92:	4e06      	ldr	r6, [pc, #24]	; (aac <IMUinit+0x28>)
     a94:	210f      	movs	r1, #15
     a96:	2000      	movs	r0, #0
     a98:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a9a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a9c:	210c      	movs	r1, #12
     a9e:	2000      	movs	r0, #0
     aa0:	47b0      	blx	r6
     aa2:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     aa4:	bd70      	pop	{r4, r5, r6, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	41004400 	.word	0x41004400
     aac:	00001601 	.word	0x00001601

00000ab0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ab0:	2380      	movs	r3, #128	; 0x80
     ab2:	4a10      	ldr	r2, [pc, #64]	; (af4 <adcInit+0x44>)
     ab4:	025b      	lsls	r3, r3, #9
     ab6:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ab8:	480f      	ldr	r0, [pc, #60]	; (af8 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     aba:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     abc:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     abe:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ac0:	4b0e      	ldr	r3, [pc, #56]	; (afc <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ac2:	4a0f      	ldr	r2, [pc, #60]	; (b00 <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ac4:	00c9      	lsls	r1, r1, #3
     ac6:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ac8:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     aca:	4a0e      	ldr	r2, [pc, #56]	; (b04 <adcInit+0x54>)
     acc:	6810      	ldr	r0, [r2, #0]
     ace:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     ad0:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     ad2:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     ad4:	4a0c      	ldr	r2, [pc, #48]	; (b08 <adcInit+0x58>)
     ad6:	6812      	ldr	r2, [r2, #0]
     ad8:	0ed2      	lsrs	r2, r2, #27
     ada:	4302      	orrs	r2, r0
     adc:	b2d2      	uxtb	r2, r2
        ) |
     ade:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     ae0:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     ae2:	2202      	movs	r2, #2
     ae4:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     ae6:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ae8:	7e5a      	ldrb	r2, [r3, #25]
     aea:	b252      	sxtb	r2, r2
     aec:	2a00      	cmp	r2, #0
     aee:	dbfb      	blt.n	ae8 <adcInit+0x38>
}
     af0:	4770      	bx	lr
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	40000400 	.word	0x40000400
     af8:	0000401e 	.word	0x0000401e
     afc:	42004000 	.word	0x42004000
     b00:	40000c00 	.word	0x40000c00
     b04:	00806024 	.word	0x00806024
     b08:	00806020 	.word	0x00806020

00000b0c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     b0c:	2202      	movs	r2, #2
     b0e:	4b04      	ldr	r3, [pc, #16]	; (b20 <adcSample+0x14>)
     b10:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     b12:	3a01      	subs	r2, #1
     b14:	7e19      	ldrb	r1, [r3, #24]
     b16:	4211      	tst	r1, r2
     b18:	d0fc      	beq.n	b14 <adcSample+0x8>
    return ADC->RESULT.reg;
     b1a:	8b58      	ldrh	r0, [r3, #26]
     b1c:	b280      	uxth	r0, r0
}
     b1e:	4770      	bx	lr
     b20:	42004000 	.word	0x42004000

00000b24 <adc_read>:


u16_t adc_read(Pin p) {
     b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
     b26:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     b28:	2101      	movs	r1, #1
     b2a:	0c02      	lsrs	r2, r0, #16
     b2c:	9000      	str	r0, [sp, #0]
     b2e:	b2d2      	uxtb	r2, r2
     b30:	0e00      	lsrs	r0, r0, #24
     b32:	0843      	lsrs	r3, r0, #1
     b34:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b36:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     b38:	4208      	tst	r0, r1
     b3a:	d01a      	beq.n	b72 <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b3c:	240f      	movs	r4, #15
     b3e:	4910      	ldr	r1, [pc, #64]	; (b80 <adc_read+0x5c>)
     b40:	185b      	adds	r3, r3, r1
     b42:	7819      	ldrb	r1, [r3, #0]
     b44:	400c      	ands	r4, r1
     b46:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b48:	4321      	orrs	r1, r4
     b4a:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b4c:	4b0d      	ldr	r3, [pc, #52]	; (b84 <adc_read+0x60>)
     b4e:	1880      	adds	r0, r0, r2
     b50:	18c0      	adds	r0, r0, r3
     b52:	2301      	movs	r3, #1
     b54:	7802      	ldrb	r2, [r0, #0]
     b56:	4313      	orrs	r3, r2
     b58:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b5a:	466b      	mov	r3, sp
     b5c:	221f      	movs	r2, #31
     b5e:	791b      	ldrb	r3, [r3, #4]
     b60:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b62:	23c0      	movs	r3, #192	; 0xc0
     b64:	015b      	lsls	r3, r3, #5
     b66:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b68:	4a07      	ldr	r2, [pc, #28]	; (b88 <adc_read+0x64>)
     b6a:	6113      	str	r3, [r2, #16]

    return adcSample();
     b6c:	4b07      	ldr	r3, [pc, #28]	; (b8c <adc_read+0x68>)
     b6e:	4798      	blx	r3
     b70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b72:	250f      	movs	r5, #15
     b74:	4c02      	ldr	r4, [pc, #8]	; (b80 <adc_read+0x5c>)
     b76:	191b      	adds	r3, r3, r4
     b78:	781c      	ldrb	r4, [r3, #0]
     b7a:	43ac      	bics	r4, r5
     b7c:	e7e4      	b.n	b48 <adc_read+0x24>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	41004430 	.word	0x41004430
     b84:	41004440 	.word	0x41004440
     b88:	42004000 	.word	0x42004000
     b8c:	00000b0d 	.word	0x00000b0d

00000b90 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b90:	0c01      	lsrs	r1, r0, #16
     b92:	0c13      	lsrs	r3, r2, #16
     b94:	b5f0      	push	{r4, r5, r6, r7, lr}
     b96:	b2cd      	uxtb	r5, r1
     b98:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b9a:	2301      	movs	r3, #1
     b9c:	001e      	movs	r6, r3
     b9e:	0e12      	lsrs	r2, r2, #24
     ba0:	4093      	lsls	r3, r2
     ba2:	0e00      	lsrs	r0, r0, #24
     ba4:	4086      	lsls	r6, r0
     ba6:	001a      	movs	r2, r3
     ba8:	2308      	movs	r3, #8
     baa:	0030      	movs	r0, r6
     bac:	4e11      	ldr	r6, [pc, #68]	; (bf4 <byteOut+0x64>)
     bae:	01c9      	lsls	r1, r1, #7
     bb0:	b087      	sub	sp, #28
     bb2:	198f      	adds	r7, r1, r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bb4:	4e10      	ldr	r6, [pc, #64]	; (bf8 <byteOut+0x68>)
     bb6:	ac0c      	add	r4, sp, #48	; 0x30
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bb8:	01ed      	lsls	r5, r5, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bba:	19ae      	adds	r6, r5, r6
     bbc:	7824      	ldrb	r4, [r4, #0]
     bbe:	9601      	str	r6, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc0:	4e0c      	ldr	r6, [pc, #48]	; (bf4 <byteOut+0x64>)
     bc2:	46b4      	mov	ip, r6
     bc4:	44ac      	add	ip, r5
     bc6:	4666      	mov	r6, ip
     bc8:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     bca:	b266      	sxtb	r6, r4
     bcc:	2e00      	cmp	r6, #0
     bce:	da0e      	bge.n	bee <byteOut+0x5e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd0:	4e09      	ldr	r6, [pc, #36]	; (bf8 <byteOut+0x68>)
     bd2:	46b4      	mov	ip, r6
     bd4:	448c      	add	ip, r1
     bd6:	4666      	mov	r6, ip
     bd8:	6032      	str	r2, [r6, #0]
     bda:	9e01      	ldr	r6, [sp, #4]
     bdc:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     bde:	0064      	lsls	r4, r4, #1
     be0:	b2db      	uxtb	r3, r3
     be2:	6030      	str	r0, [r6, #0]
     be4:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i<8; ++i) {
     be6:	2b00      	cmp	r3, #0
     be8:	d1ea      	bne.n	bc0 <byteOut+0x30>
	}
}
     bea:	b007      	add	sp, #28
     bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bee:	603a      	str	r2, [r7, #0]
     bf0:	e7f3      	b.n	bda <byteOut+0x4a>
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	41004414 	.word	0x41004414
     bf8:	41004418 	.word	0x41004418

00000bfc <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfe:	2501      	movs	r5, #1
     c00:	b085      	sub	sp, #20
     c02:	0c06      	lsrs	r6, r0, #16
     c04:	9301      	str	r3, [sp, #4]
     c06:	b2f3      	uxtb	r3, r6
     c08:	002e      	movs	r6, r5
     c0a:	9103      	str	r1, [sp, #12]
     c0c:	0011      	movs	r1, r2
     c0e:	0c14      	lsrs	r4, r2, #16
     c10:	9200      	str	r2, [sp, #0]
     c12:	0e02      	lsrs	r2, r0, #24
     c14:	9002      	str	r0, [sp, #8]
     c16:	4096      	lsls	r6, r2
	uint8_t byte = 0x00;
     c18:	2000      	movs	r0, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c1a:	b2e2      	uxtb	r2, r4
     c1c:	2408      	movs	r4, #8
     c1e:	0e09      	lsrs	r1, r1, #24
     c20:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c22:	490a      	ldr	r1, [pc, #40]	; (c4c <byteIn+0x50>)
     c24:	01db      	lsls	r3, r3, #7
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c26:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c28:	185b      	adds	r3, r3, r1
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c2a:	1852      	adds	r2, r2, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c2c:	615e      	str	r6, [r3, #20]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c2e:	6a11      	ldr	r1, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c30:	0040      	lsls	r0, r0, #1
     c32:	4029      	ands	r1, r5
     c34:	1e4f      	subs	r7, r1, #1
     c36:	41b9      	sbcs	r1, r7
     c38:	3c01      	subs	r4, #1
     c3a:	4308      	orrs	r0, r1
     c3c:	b2e4      	uxtb	r4, r4
     c3e:	b2c0      	uxtb	r0, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c40:	619e      	str	r6, [r3, #24]
	for (uint8_t i = 0; i<8; ++i) {
     c42:	2c00      	cmp	r4, #0
     c44:	d1f2      	bne.n	c2c <byteIn+0x30>
		pinHigh(SCK_PIN);
	}
	return byte;
     c46:	b005      	add	sp, #20
     c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	41004400 	.word	0x41004400

00000c50 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c52:	2380      	movs	r3, #128	; 0x80
     c54:	2680      	movs	r6, #128	; 0x80
     c56:	0007      	movs	r7, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c58:	2500      	movs	r5, #0
     c5a:	4c09      	ldr	r4, [pc, #36]	; (c80 <beep+0x30>)
     c5c:	035b      	lsls	r3, r3, #13
     c5e:	61e3      	str	r3, [r4, #28]
     c60:	03b6      	lsls	r6, r6, #14
     c62:	42bd      	cmp	r5, r7
     c64:	d104      	bne.n	c70 <beep+0x20>
     c66:	2380      	movs	r3, #128	; 0x80
     c68:	035b      	lsls	r3, r3, #13
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c6a:	6166      	str	r6, [r4, #20]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c6c:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c70:	61e6      	str	r6, [r4, #28]
        delay_us(122);
     c72:	207a      	movs	r0, #122	; 0x7a
     c74:	4b03      	ldr	r3, [pc, #12]	; (c84 <beep+0x34>)
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c76:	3501      	adds	r5, #1
        delay_us(122);
     c78:	4798      	blx	r3
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c7a:	b2ad      	uxth	r5, r5
     c7c:	e7f1      	b.n	c62 <beep+0x12>
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	41004400 	.word	0x41004400
     c84:	00000df1 	.word	0x00000df1

00000c88 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c88:	23c2      	movs	r3, #194	; 0xc2
     c8a:	4a16      	ldr	r2, [pc, #88]	; (ce4 <GclkInit+0x5c>)
     c8c:	00db      	lsls	r3, r3, #3
void GclkInit() {
     c8e:	b510      	push	{r4, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c90:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c92:	2302      	movs	r3, #2
     c94:	4914      	ldr	r1, [pc, #80]	; (ce8 <GclkInit+0x60>)
     c96:	6848      	ldr	r0, [r1, #4]
     c98:	4303      	orrs	r3, r0
     c9a:	604b      	str	r3, [r1, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c9c:	4b13      	ldr	r3, [pc, #76]	; (cec <GclkInit+0x64>)
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     ca2:	2b3f      	cmp	r3, #63	; 0x3f
     ca4:	d100      	bne.n	ca8 <GclkInit+0x20>
        coarse = 0x1f;
     ca6:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     ca8:	4911      	ldr	r1, [pc, #68]	; (cf0 <GclkInit+0x68>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     caa:	4812      	ldr	r0, [pc, #72]	; (cf4 <GclkInit+0x6c>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     cac:	6809      	ldr	r1, [r1, #0]
     cae:	0589      	lsls	r1, r1, #22
     cb0:	0d89      	lsrs	r1, r1, #22
    if (fine == 0x3ff) {
     cb2:	4281      	cmp	r1, r0
     cb4:	d100      	bne.n	cb8 <GclkInit+0x30>
        fine = 0x1ff;
     cb6:	4910      	ldr	r1, [pc, #64]	; (cf8 <GclkInit+0x70>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     cb8:	4810      	ldr	r0, [pc, #64]	; (cfc <GclkInit+0x74>)
     cba:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cbc:	2010      	movs	r0, #16
     cbe:	68d4      	ldr	r4, [r2, #12]
     cc0:	4204      	tst	r4, r0
     cc2:	d0fc      	beq.n	cbe <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     cc4:	029b      	lsls	r3, r3, #10
     cc6:	430b      	orrs	r3, r1
     cc8:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cca:	2310      	movs	r3, #16
     ccc:	68d1      	ldr	r1, [r2, #12]
     cce:	4219      	tst	r1, r3
     cd0:	d0fc      	beq.n	ccc <GclkInit+0x44>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     cd2:	4b0b      	ldr	r3, [pc, #44]	; (d00 <GclkInit+0x78>)
     cd4:	8493      	strh	r3, [r2, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     cd6:	2280      	movs	r2, #128	; 0x80
     cd8:	4b0a      	ldr	r3, [pc, #40]	; (d04 <GclkInit+0x7c>)
     cda:	0052      	lsls	r2, r2, #1
     cdc:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     cde:	4a0a      	ldr	r2, [pc, #40]	; (d08 <GclkInit+0x80>)
     ce0:	605a      	str	r2, [r3, #4]
}
     ce2:	bd10      	pop	{r4, pc}
     ce4:	40000800 	.word	0x40000800
     ce8:	41004000 	.word	0x41004000
     cec:	00806024 	.word	0x00806024
     cf0:	00806028 	.word	0x00806028
     cf4:	000003ff 	.word	0x000003ff
     cf8:	000001ff 	.word	0x000001ff
     cfc:	00000522 	.word	0x00000522
     d00:	000005a2 	.word	0x000005a2
     d04:	40000c00 	.word	0x40000c00
     d08:	00010700 	.word	0x00010700

00000d0c <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     d0c:	4a1b      	ldr	r2, [pc, #108]	; (d7c <RtcInit+0x70>)
     d0e:	4b1c      	ldr	r3, [pc, #112]	; (d80 <RtcInit+0x74>)
     d10:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     d12:	2202      	movs	r2, #2
     d14:	68d9      	ldr	r1, [r3, #12]
     d16:	4211      	tst	r1, r2
     d18:	d0fc      	beq.n	d14 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     d1a:	2281      	movs	r2, #129	; 0x81
     d1c:	4b19      	ldr	r3, [pc, #100]	; (d84 <RtcInit+0x78>)
     d1e:	0052      	lsls	r2, r2, #1
     d20:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     d22:	4a19      	ldr	r2, [pc, #100]	; (d88 <RtcInit+0x7c>)
     d24:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     d26:	785a      	ldrb	r2, [r3, #1]
     d28:	b252      	sxtb	r2, r2
     d2a:	2a00      	cmp	r2, #0
     d2c:	dbfb      	blt.n	d26 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     d2e:	4a17      	ldr	r2, [pc, #92]	; (d8c <RtcInit+0x80>)
     d30:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     d32:	2204      	movs	r2, #4
     d34:	4b16      	ldr	r3, [pc, #88]	; (d90 <RtcInit+0x84>)
     d36:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d38:	7a9a      	ldrb	r2, [r3, #10]
     d3a:	09d2      	lsrs	r2, r2, #7
     d3c:	d1fc      	bne.n	d38 <RtcInit+0x2c>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     d3e:	22a0      	movs	r2, #160	; 0xa0
     d40:	8819      	ldrh	r1, [r3, #0]
     d42:	00d2      	lsls	r2, r2, #3
     d44:	430a      	orrs	r2, r1
     d46:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d48:	7a9a      	ldrb	r2, [r3, #10]
     d4a:	09d2      	lsrs	r2, r2, #7
     d4c:	d1fc      	bne.n	d48 <RtcInit+0x3c>

    RTC->MODE1.PER.reg = 998;
     d4e:	4a11      	ldr	r2, [pc, #68]	; (d94 <RtcInit+0x88>)
     d50:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d52:	7a9a      	ldrb	r2, [r3, #10]
     d54:	09d2      	lsrs	r2, r2, #7
     d56:	d1fc      	bne.n	d52 <RtcInit+0x46>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d58:	8859      	ldrh	r1, [r3, #2]
     d5a:	4a0f      	ldr	r2, [pc, #60]	; (d98 <RtcInit+0x8c>)
     d5c:	430a      	orrs	r2, r1
     d5e:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d60:	2280      	movs	r2, #128	; 0x80
     d62:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d64:	8819      	ldrh	r1, [r3, #0]
     d66:	3a7e      	subs	r2, #126	; 0x7e
     d68:	430a      	orrs	r2, r1
     d6a:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d6c:	7a9a      	ldrb	r2, [r3, #10]
     d6e:	09d2      	lsrs	r2, r2, #7
     d70:	d1fc      	bne.n	d6c <RtcInit+0x60>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d72:	4b0a      	ldr	r3, [pc, #40]	; (d9c <RtcInit+0x90>)
     d74:	3208      	adds	r2, #8
     d76:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d78:	4770      	bx	lr
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	0000060e 	.word	0x0000060e
     d80:	40000800 	.word	0x40000800
     d84:	40000c00 	.word	0x40000c00
     d88:	00230002 	.word	0x00230002
     d8c:	00004204 	.word	0x00004204
     d90:	40001400 	.word	0x40001400
     d94:	000003e6 	.word	0x000003e6
     d98:	00004010 	.word	0x00004010
     d9c:	e000e100 	.word	0xe000e100

00000da0 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     da0:	230f      	movs	r3, #15
     da2:	4003      	ands	r3, r0
     da4:	4808      	ldr	r0, [pc, #32]	; (dc8 <gclkEnable+0x28>)
     da6:	0212      	lsls	r2, r2, #8
     da8:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     daa:	20f8      	movs	r0, #248	; 0xf8
     dac:	0209      	lsls	r1, r1, #8
     dae:	0140      	lsls	r0, r0, #5
     db0:	4001      	ands	r1, r0
     db2:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
     db4:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     db6:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     db8:	4c04      	ldr	r4, [pc, #16]	; (dcc <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dba:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     dbc:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dbe:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     dc0:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dc2:	6060      	str	r0, [r4, #4]
}
     dc4:	bd10      	pop	{r4, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	00ffff00 	.word	0x00ffff00
     dcc:	40000c00 	.word	0x40000c00

00000dd0 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     dd0:	4b04      	ldr	r3, [pc, #16]	; (de4 <delayInit+0x14>)
     dd2:	4a05      	ldr	r2, [pc, #20]	; (de8 <delayInit+0x18>)
     dd4:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     dd6:	2230      	movs	r2, #48	; 0x30
     dd8:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delayInit+0x1c>)
     ddc:	3a2b      	subs	r2, #43	; 0x2b
     dde:	601a      	str	r2, [r3, #0]
}
     de0:	4770      	bx	lr
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	20000004 	.word	0x20000004
     de8:	0000bb80 	.word	0x0000bb80
     dec:	e000e010 	.word	0xe000e010

00000df0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     df0:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     df2:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     df4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     df6:	4b07      	ldr	r3, [pc, #28]	; (e14 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     df8:	0264      	lsls	r4, r4, #9
     dfa:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
     dfc:	4b06      	ldr	r3, [pc, #24]	; (e18 <delay_us+0x28>)
    while (n--) {
     dfe:	3801      	subs	r0, #1
     e00:	d200      	bcs.n	e04 <delay_us+0x14>
    }
}
     e02:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     e04:	2a00      	cmp	r2, #0
     e06:	d0fa      	beq.n	dfe <delay_us+0xe>
        SysTick->LOAD = n;
     e08:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     e0a:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e0c:	681d      	ldr	r5, [r3, #0]
     e0e:	4225      	tst	r5, r4
     e10:	d0fc      	beq.n	e0c <delay_us+0x1c>
     e12:	e7f4      	b.n	dfe <delay_us+0xe>
     e14:	20000004 	.word	0x20000004
     e18:	e000e010 	.word	0xe000e010

00000e1c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     e1c:	b530      	push	{r4, r5, lr}
     e1e:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     e20:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     e22:	4b07      	ldr	r3, [pc, #28]	; (e40 <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e24:	0264      	lsls	r4, r4, #9
     e26:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
     e28:	4b06      	ldr	r3, [pc, #24]	; (e44 <delay_ms+0x28>)
    while (n--) {
     e2a:	3801      	subs	r0, #1
     e2c:	d200      	bcs.n	e30 <delay_ms+0x14>
    }
}
     e2e:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     e30:	2a00      	cmp	r2, #0
     e32:	d0fa      	beq.n	e2a <delay_ms+0xe>
        SysTick->LOAD = n;
     e34:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     e36:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e38:	681d      	ldr	r5, [r3, #0]
     e3a:	4225      	tst	r5, r4
     e3c:	d0fc      	beq.n	e38 <delay_ms+0x1c>
     e3e:	e7f4      	b.n	e2a <delay_ms+0xe>
     e40:	20000004 	.word	0x20000004
     e44:	e000e010 	.word	0xe000e010

00000e48 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e48:	21fa      	movs	r1, #250	; 0xfa
     e4a:	4a04      	ldr	r2, [pc, #16]	; (e5c <RTC_Handler+0x14>)
     e4c:	0089      	lsls	r1, r1, #2
     e4e:	6813      	ldr	r3, [r2, #0]
     e50:	185b      	adds	r3, r3, r1
     e52:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e54:	22ff      	movs	r2, #255	; 0xff
     e56:	4b02      	ldr	r3, [pc, #8]	; (e60 <RTC_Handler+0x18>)
     e58:	721a      	strb	r2, [r3, #8]
}
     e5a:	4770      	bx	lr
     e5c:	2000045c 	.word	0x2000045c
     e60:	40001400 	.word	0x40001400

00000e64 <millis>:

uint32_t millis(void) {
     e64:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e66:	f3ef 8110 	mrs	r1, PRIMASK
     e6a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e6c:	4b09      	ldr	r3, [pc, #36]	; (e94 <millis+0x30>)
     e6e:	4c0a      	ldr	r4, [pc, #40]	; (e98 <millis+0x34>)
     e70:	8a18      	ldrh	r0, [r3, #16]
     e72:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e74:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e76:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e78:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e7a:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e7c:	2a00      	cmp	r2, #0
     e7e:	d005      	beq.n	e8c <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e80:	22fa      	movs	r2, #250	; 0xfa
     e82:	8a1b      	ldrh	r3, [r3, #16]
     e84:	6820      	ldr	r0, [r4, #0]
     e86:	0092      	lsls	r2, r2, #2
     e88:	1880      	adds	r0, r0, r2
     e8a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     e8c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e90:	bd30      	pop	{r4, r5, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	40001400 	.word	0x40001400
     e98:	2000045c 	.word	0x2000045c

00000e9c <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e9c:	4a0d      	ldr	r2, [pc, #52]	; (ed4 <TC4Init+0x38>)
     e9e:	4b0e      	ldr	r3, [pc, #56]	; (ed8 <TC4Init+0x3c>)
     ea0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ea2:	2380      	movs	r3, #128	; 0x80
     ea4:	4a0d      	ldr	r2, [pc, #52]	; (edc <TC4Init+0x40>)
     ea6:	015b      	lsls	r3, r3, #5
     ea8:	6a11      	ldr	r1, [r2, #32]
     eaa:	430b      	orrs	r3, r1
     eac:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     eae:	4b0c      	ldr	r3, [pc, #48]	; (ee0 <TC4Init+0x44>)
     eb0:	4a0c      	ldr	r2, [pc, #48]	; (ee4 <TC4Init+0x48>)
     eb2:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     eb4:	2241      	movs	r2, #65	; 0x41
     eb6:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     eb8:	3a40      	subs	r2, #64	; 0x40
     eba:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ebc:	32ff      	adds	r2, #255	; 0xff
     ebe:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ec0:	8819      	ldrh	r1, [r3, #0]
     ec2:	3afe      	subs	r2, #254	; 0xfe
     ec4:	430a      	orrs	r2, r1
     ec6:	801a      	strh	r2, [r3, #0]
     ec8:	2280      	movs	r2, #128	; 0x80
     eca:	4b07      	ldr	r3, [pc, #28]	; (ee8 <TC4Init+0x4c>)
     ecc:	0312      	lsls	r2, r2, #12
     ece:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     ed0:	4770      	bx	lr
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	0000421c 	.word	0x0000421c
     ed8:	40000c00 	.word	0x40000c00
     edc:	40000400 	.word	0x40000400
     ee0:	42003000 	.word	0x42003000
     ee4:	00000904 	.word	0x00000904
     ee8:	e000e100 	.word	0xe000e100

00000eec <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     eec:	22ff      	movs	r2, #255	; 0xff
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <TC4_Handler+0x10>)
     ef0:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     ef2:	4b03      	ldr	r3, [pc, #12]	; (f00 <TC4_Handler+0x14>)
     ef4:	3afe      	subs	r2, #254	; 0xfe
     ef6:	701a      	strb	r2, [r3, #0]
}
     ef8:	4770      	bx	lr
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	42003000 	.word	0x42003000
     f00:	20000463 	.word	0x20000463

00000f04 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f04:	4a0d      	ldr	r2, [pc, #52]	; (f3c <TC5Init+0x38>)
     f06:	4b0e      	ldr	r3, [pc, #56]	; (f40 <TC5Init+0x3c>)
     f08:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	4a0d      	ldr	r2, [pc, #52]	; (f44 <TC5Init+0x40>)
     f0e:	019b      	lsls	r3, r3, #6
     f10:	6a11      	ldr	r1, [r2, #32]
     f12:	430b      	orrs	r3, r1
     f14:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f16:	4b0c      	ldr	r3, [pc, #48]	; (f48 <TC5Init+0x44>)
     f18:	4a0c      	ldr	r2, [pc, #48]	; (f4c <TC5Init+0x48>)
     f1a:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
     f1c:	2220      	movs	r2, #32
     f1e:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f20:	3a1f      	subs	r2, #31
     f22:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f24:	32ff      	adds	r2, #255	; 0xff
     f26:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f28:	8819      	ldrh	r1, [r3, #0]
     f2a:	3afe      	subs	r2, #254	; 0xfe
     f2c:	430a      	orrs	r2, r1
     f2e:	801a      	strh	r2, [r3, #0]
     f30:	2280      	movs	r2, #128	; 0x80
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <TC5Init+0x4c>)
     f34:	0352      	lsls	r2, r2, #13
     f36:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     f38:	4770      	bx	lr
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	0000421c 	.word	0x0000421c
     f40:	40000c00 	.word	0x40000c00
     f44:	40000400 	.word	0x40000400
     f48:	42003400 	.word	0x42003400
     f4c:	00000d04 	.word	0x00000d04
     f50:	e000e100 	.word	0xe000e100

00000f54 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f54:	22ff      	movs	r2, #255	; 0xff
     f56:	4b03      	ldr	r3, [pc, #12]	; (f64 <TC5_Handler+0x10>)
     f58:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     f5a:	4b03      	ldr	r3, [pc, #12]	; (f68 <TC5_Handler+0x14>)
     f5c:	3afe      	subs	r2, #254	; 0xfe
     f5e:	701a      	strb	r2, [r3, #0]
     f60:	4770      	bx	lr
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	42003400 	.word	0x42003400
     f68:	20000461 	.word	0x20000461

00000f6c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f6e:	27c0      	movs	r7, #192	; 0xc0
     f70:	4d10      	ldr	r5, [pc, #64]	; (fb4 <dmaInit+0x48>)
     f72:	003a      	movs	r2, r7
     f74:	4e10      	ldr	r6, [pc, #64]	; (fb8 <dmaInit+0x4c>)
     f76:	0028      	movs	r0, r5
     f78:	2100      	movs	r1, #0
     f7a:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f7c:	4c0f      	ldr	r4, [pc, #60]	; (fbc <dmaInit+0x50>)
     f7e:	003a      	movs	r2, r7
     f80:	2100      	movs	r1, #0
     f82:	0020      	movs	r0, r4
     f84:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f86:	2220      	movs	r2, #32
     f88:	4b0d      	ldr	r3, [pc, #52]	; (fc0 <dmaInit+0x54>)
     f8a:	6959      	ldr	r1, [r3, #20]
     f8c:	430a      	orrs	r2, r1
     f8e:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f90:	2210      	movs	r2, #16
     f92:	69d9      	ldr	r1, [r3, #28]
     f94:	430a      	orrs	r2, r1

	DMAC->CTRL.bit.DMAENABLE = 0;
     f96:	2102      	movs	r1, #2
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f98:	61da      	str	r2, [r3, #28]
	DMAC->CTRL.bit.DMAENABLE = 0;
     f9a:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <dmaInit+0x58>)
     f9c:	881a      	ldrh	r2, [r3, #0]
     f9e:	438a      	bics	r2, r1
     fa0:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     fa2:	2201      	movs	r2, #1
     fa4:	8819      	ldrh	r1, [r3, #0]
     fa6:	430a      	orrs	r2, r1
     fa8:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     faa:	4a07      	ldr	r2, [pc, #28]	; (fc8 <dmaInit+0x5c>)
	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     fac:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     fae:	639c      	str	r4, [r3, #56]	; 0x38
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     fb0:	801a      	strh	r2, [r3, #0]
}
     fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fb4:	20000530 	.word	0x20000530
     fb8:	000024e5 	.word	0x000024e5
     fbc:	20000470 	.word	0x20000470
     fc0:	40000400 	.word	0x40000400
     fc4:	41004800 	.word	0x41004800
     fc8:	00000f02 	.word	0x00000f02

00000fcc <flight>:

void flight(Altimeter *my_altimeter) {



    switch(my_altimeter->myFlightState) {
     fcc:	7803      	ldrb	r3, [r0, #0]
void flight(Altimeter *my_altimeter) {
     fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     fd0:	0004      	movs	r4, r0
    switch(my_altimeter->myFlightState) {
     fd2:	2b00      	cmp	r3, #0
     fd4:	d13b      	bne.n	104e <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     fd6:	4d1e      	ldr	r5, [pc, #120]	; (1050 <flight+0x84>)
     fd8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     fda:	47a8      	blx	r5
     fdc:	4e1d      	ldr	r6, [pc, #116]	; (1054 <flight+0x88>)
     fde:	2200      	movs	r2, #0
     fe0:	4b1d      	ldr	r3, [pc, #116]	; (1058 <flight+0x8c>)
     fe2:	47b0      	blx	r6
     fe4:	9000      	str	r0, [sp, #0]
     fe6:	9101      	str	r1, [sp, #4]
     fe8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     fea:	47a8      	blx	r5
     fec:	2200      	movs	r2, #0
     fee:	4b1a      	ldr	r3, [pc, #104]	; (1058 <flight+0x8c>)
     ff0:	47b0      	blx	r6
     ff2:	4e1a      	ldr	r6, [pc, #104]	; (105c <flight+0x90>)
     ff4:	0002      	movs	r2, r0
     ff6:	000b      	movs	r3, r1
     ff8:	9800      	ldr	r0, [sp, #0]
     ffa:	9901      	ldr	r1, [sp, #4]
     ffc:	47b0      	blx	r6
     ffe:	4b18      	ldr	r3, [pc, #96]	; (1060 <flight+0x94>)
    1000:	4798      	blx	r3
    1002:	63e0      	str	r0, [r4, #60]	; 0x3c

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    1004:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1006:	47a8      	blx	r5
    1008:	2200      	movs	r2, #0
    100a:	4b13      	ldr	r3, [pc, #76]	; (1058 <flight+0x8c>)
    100c:	4e11      	ldr	r6, [pc, #68]	; (1054 <flight+0x88>)
    100e:	47b0      	blx	r6
    1010:	0006      	movs	r6, r0
    1012:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1014:	000f      	movs	r7, r1
    1016:	47a8      	blx	r5
    1018:	4d0e      	ldr	r5, [pc, #56]	; (1054 <flight+0x88>)
    101a:	2200      	movs	r2, #0
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <flight+0x8c>)
    101e:	47a8      	blx	r5
    1020:	4d0e      	ldr	r5, [pc, #56]	; (105c <flight+0x90>)
    1022:	0002      	movs	r2, r0
    1024:	000b      	movs	r3, r1
    1026:	0030      	movs	r0, r6
    1028:	0039      	movs	r1, r7
    102a:	47a8      	blx	r5
    102c:	4b0c      	ldr	r3, [pc, #48]	; (1060 <flight+0x94>)
    102e:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1030:	4d0c      	ldr	r5, [pc, #48]	; (1064 <flight+0x98>)
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    1032:	6320      	str	r0, [r4, #48]	; 0x30
        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1034:	47a8      	blx	r5
    1036:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1038:	1ac0      	subs	r0, r0, r3
    103a:	23fa      	movs	r3, #250	; 0xfa
    103c:	00db      	lsls	r3, r3, #3
    103e:	4298      	cmp	r0, r3
    1040:	d905      	bls.n	104e <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1042:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1044:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1048:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myIMU.offsetBufferTime = millis();
    104a:	47a8      	blx	r5
    104c:	6360      	str	r0, [r4, #52]	; 0x34

        break;
    }


    104e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1050:	000022a9 	.word	0x000022a9
    1054:	00001cb5 	.word	0x00001cb5
    1058:	3fe00000 	.word	0x3fe00000
    105c:	00001695 	.word	0x00001695
    1060:	0000234d 	.word	0x0000234d
    1064:	00000e65 	.word	0x00000e65

00001068 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    1068:	b5f0      	push	{r4, r5, r6, r7, lr}
    106a:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    106c:	466a      	mov	r2, sp
    106e:	2341      	movs	r3, #65	; 0x41
    1070:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1072:	23a3      	movs	r3, #163	; 0xa3
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1074:	4669      	mov	r1, sp
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1076:	009b      	lsls	r3, r3, #2
    1078:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    107a:	2480      	movs	r4, #128	; 0x80
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    107c:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    107e:	0a1a      	lsrs	r2, r3, #8
    1080:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1082:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1084:	0e1b      	lsrs	r3, r3, #24
    1086:	710b      	strb	r3, [r1, #4]
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1088:	6a43      	ldr	r3, [r0, #36]	; 0x24
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    108a:	70ca      	strb	r2, [r1, #3]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    108c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    108e:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1090:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1092:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1094:	0e1b      	lsrs	r3, r3, #24
    1096:	720b      	strb	r3, [r1, #8]
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1098:	0003      	movs	r3, r0
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    109a:	71ca      	strb	r2, [r1, #7]
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    109c:	335c      	adds	r3, #92	; 0x5c
    109e:	881b      	ldrh	r3, [r3, #0]
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    10a0:	34ff      	adds	r4, #255	; 0xff
    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    10a2:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    10a4:	0a1b      	lsrs	r3, r3, #8
    10a6:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    10a8:	0003      	movs	r3, r0
    10aa:	3360      	adds	r3, #96	; 0x60
    10ac:	881b      	ldrh	r3, [r3, #0]
    10ae:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    10b0:	0a1b      	lsrs	r3, r3, #8
    10b2:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    10b4:	0003      	movs	r3, r0
    10b6:	3364      	adds	r3, #100	; 0x64
    10b8:	881b      	ldrh	r3, [r3, #0]
    10ba:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    10bc:	0a1b      	lsrs	r3, r3, #8
    10be:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    10c0:	0003      	movs	r3, r0
    10c2:	3368      	adds	r3, #104	; 0x68
    10c4:	881b      	ldrh	r3, [r3, #0]
    10c6:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    10c8:	0a1b      	lsrs	r3, r3, #8
    10ca:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    10cc:	0003      	movs	r3, r0
    10ce:	336c      	adds	r3, #108	; 0x6c
    10d0:	881b      	ldrh	r3, [r3, #0]
    10d2:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    10d4:	0a1b      	lsrs	r3, r3, #8
    10d6:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    10d8:	0003      	movs	r3, r0
    10da:	3370      	adds	r3, #112	; 0x70
    10dc:	881b      	ldrh	r3, [r3, #0]
    10de:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    10e0:	0a1b      	lsrs	r3, r3, #8
    10e2:	750b      	strb	r3, [r1, #20]
    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    10e4:	0003      	movs	r3, r0
    10e6:	3374      	adds	r3, #116	; 0x74
    10e8:	881b      	ldrh	r3, [r3, #0]
    10ea:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    10ec:	0a1b      	lsrs	r3, r3, #8
    10ee:	758b      	strb	r3, [r1, #22]
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    10f0:	5d02      	ldrb	r2, [r0, r4]
    10f2:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    10f4:	2ae8      	cmp	r2, #232	; 0xe8
    10f6:	dd2f      	ble.n	1158 <logSensors+0xf0>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    10f8:	18d1      	adds	r1, r2, r3
    10fa:	29fe      	cmp	r1, #254	; 0xfe
    10fc:	dd17      	ble.n	112e <logSensors+0xc6>
    10fe:	0002      	movs	r2, r0
        }


        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1100:	2500      	movs	r5, #0
    1102:	491b      	ldr	r1, [pc, #108]	; (1170 <logSensors+0x108>)
    1104:	3281      	adds	r2, #129	; 0x81
    1106:	32ff      	adds	r2, #255	; 0xff
    1108:	1841      	adds	r1, r0, r1
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    110a:	7817      	ldrb	r7, [r2, #0]
    110c:	1e56      	subs	r6, r2, #1
    110e:	3eff      	subs	r6, #255	; 0xff
    1110:	7037      	strb	r7, [r6, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1112:	7015      	strb	r5, [r2, #0]
    1114:	3201      	adds	r2, #1
        for(u8_t i = 0; i < 0xFF; ++i) {
    1116:	428a      	cmp	r2, r1
    1118:	d1f7      	bne.n	110a <logSensors+0xa2>
    111a:	001a      	movs	r2, r3
    111c:	2100      	movs	r1, #0
    111e:	1c4d      	adds	r5, r1, #1
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1120:	2a17      	cmp	r2, #23
    1122:	d90d      	bls.n	1140 <logSensors+0xd8>
            bytesWritten++;

            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1124:	2201      	movs	r2, #1
    1126:	4b12      	ldr	r3, [pc, #72]	; (1170 <logSensors+0x108>)
    1128:	54c2      	strb	r2, [r0, r3]
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;

    }
}
    112a:	b007      	add	sp, #28
    112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    112e:	466d      	mov	r5, sp
    1130:	1841      	adds	r1, r0, r1
    1132:	5ced      	ldrb	r5, [r5, r3]
    1134:	3181      	adds	r1, #129	; 0x81
    1136:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    1138:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    113a:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    113c:	b2db      	uxtb	r3, r3
    113e:	e7db      	b.n	10f8 <logSensors+0x90>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    1140:	466f      	mov	r7, sp
    1142:	195e      	adds	r6, r3, r5
    1144:	3e01      	subs	r6, #1
    1146:	3181      	adds	r1, #129	; 0x81
    1148:	5dbe      	ldrb	r6, [r7, r6]
    114a:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    114c:	3201      	adds	r2, #1
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    114e:	5446      	strb	r6, [r0, r1]
            bytesWritten++;
    1150:	b2d2      	uxtb	r2, r2
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
    1152:	5505      	strb	r5, [r0, r4]
    1154:	0029      	movs	r1, r5
    1156:	e7e2      	b.n	111e <logSensors+0xb6>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1158:	466d      	mov	r5, sp
    115a:	18d1      	adds	r1, r2, r3
    115c:	5ced      	ldrb	r5, [r5, r3]
    115e:	3181      	adds	r1, #129	; 0x81
    1160:	31ff      	adds	r1, #255	; 0xff
    1162:	3301      	adds	r3, #1
    1164:	5445      	strb	r5, [r0, r1]
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1166:	2b18      	cmp	r3, #24
    1168:	d1f6      	bne.n	1158 <logSensors+0xf0>
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    116a:	3218      	adds	r2, #24
    116c:	5502      	strb	r2, [r0, r4]
}
    116e:	e7dc      	b.n	112a <logSensors+0xc2>
    1170:	0000027f 	.word	0x0000027f

00001174 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1174:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    1176:	4bc9      	ldr	r3, [pc, #804]	; (149c <sampleTick+0x328>)
void sampleTick(Altimeter *my_altimeter) {
    1178:	b087      	sub	sp, #28
    117a:	0004      	movs	r4, r0
    my_altimeter->sampleTick = millis();
    117c:	4798      	blx	r3
    117e:	23a3      	movs	r3, #163	; 0xa3

    my_altimeter->batV = adc_read(senseBatPin);
    1180:	4dc7      	ldr	r5, [pc, #796]	; (14a0 <sampleTick+0x32c>)
    my_altimeter->sampleTick = millis();
    1182:	009b      	lsls	r3, r3, #2
    1184:	50e0      	str	r0, [r4, r3]
    my_altimeter->batV = adc_read(senseBatPin);
    1186:	786b      	ldrb	r3, [r5, #1]
    1188:	7828      	ldrb	r0, [r5, #0]
    118a:	021b      	lsls	r3, r3, #8
    118c:	4303      	orrs	r3, r0
    118e:	78a8      	ldrb	r0, [r5, #2]
    1190:	4ec4      	ldr	r6, [pc, #784]	; (14a4 <sampleTick+0x330>)
    1192:	0400      	lsls	r0, r0, #16
    1194:	4303      	orrs	r3, r0
    1196:	78e8      	ldrb	r0, [r5, #3]
    1198:	7929      	ldrb	r1, [r5, #4]
    119a:	0600      	lsls	r0, r0, #24
    119c:	4318      	orrs	r0, r3
    119e:	47b0      	blx	r6
    11a0:	23a0      	movs	r3, #160	; 0xa0
    11a2:	009b      	lsls	r3, r3, #2
    11a4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    11a6:	79ab      	ldrb	r3, [r5, #6]
    11a8:	7968      	ldrb	r0, [r5, #5]
    11aa:	021b      	lsls	r3, r3, #8
    11ac:	4303      	orrs	r3, r0
    11ae:	79e8      	ldrb	r0, [r5, #7]
    11b0:	7a69      	ldrb	r1, [r5, #9]
    11b2:	0400      	lsls	r0, r0, #16
    11b4:	4303      	orrs	r3, r0
    11b6:	7a28      	ldrb	r0, [r5, #8]
    11b8:	0600      	lsls	r0, r0, #24
    11ba:	4318      	orrs	r0, r3
    11bc:	47b0      	blx	r6
    11be:	4bba      	ldr	r3, [pc, #744]	; (14a8 <sampleTick+0x334>)
    my_altimeter->senseB = adc_read(senseBPin);
    11c0:	7ba9      	ldrb	r1, [r5, #14]
    my_altimeter->senseA = adc_read(senseAPin);
    11c2:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    11c4:	7aeb      	ldrb	r3, [r5, #11]
    11c6:	7aa8      	ldrb	r0, [r5, #10]
    11c8:	021b      	lsls	r3, r3, #8
    11ca:	4303      	orrs	r3, r0
    11cc:	7b28      	ldrb	r0, [r5, #12]
    11ce:	0400      	lsls	r0, r0, #16
    11d0:	4303      	orrs	r3, r0
    11d2:	7b68      	ldrb	r0, [r5, #13]
    11d4:	0600      	lsls	r0, r0, #24
    11d6:	4318      	orrs	r0, r3
    11d8:	47b0      	blx	r6
    11da:	23a1      	movs	r3, #161	; 0xa1
    11dc:	009b      	lsls	r3, r3, #2
    11de:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    11e0:	7c2b      	ldrb	r3, [r5, #16]
    11e2:	7be8      	ldrb	r0, [r5, #15]
    11e4:	021b      	lsls	r3, r3, #8
    11e6:	4303      	orrs	r3, r0
    11e8:	7c68      	ldrb	r0, [r5, #17]
    11ea:	7ce9      	ldrb	r1, [r5, #19]
    11ec:	0400      	lsls	r0, r0, #16
    11ee:	4303      	orrs	r3, r0
    11f0:	7ca8      	ldrb	r0, [r5, #18]
    11f2:	0600      	lsls	r0, r0, #24
    11f4:	4318      	orrs	r0, r3
    11f6:	47b0      	blx	r6
    11f8:	4bac      	ldr	r3, [pc, #688]	; (14ac <sampleTick+0x338>)
    my_altimeter->senseD = adc_read(senseDPin);
    11fa:	7e29      	ldrb	r1, [r5, #24]
    my_altimeter->senseC = adc_read(senseCPin);
    11fc:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    11fe:	7d6b      	ldrb	r3, [r5, #21]
    1200:	7d28      	ldrb	r0, [r5, #20]
    1202:	021b      	lsls	r3, r3, #8
    1204:	4303      	orrs	r3, r0
    1206:	7da8      	ldrb	r0, [r5, #22]
    1208:	0400      	lsls	r0, r0, #16
    120a:	4303      	orrs	r3, r0
    120c:	7de8      	ldrb	r0, [r5, #23]
    120e:	0600      	lsls	r0, r0, #24
    1210:	4318      	orrs	r0, r3
    1212:	47b0      	blx	r6
    1214:	23a2      	movs	r3, #162	; 0xa2
    1216:	009b      	lsls	r3, r3, #2
    1218:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    121a:	7eab      	ldrb	r3, [r5, #26]
    121c:	7e68      	ldrb	r0, [r5, #25]
    121e:	021b      	lsls	r3, r3, #8
    1220:	4303      	orrs	r3, r0
    1222:	7ee8      	ldrb	r0, [r5, #27]
    1224:	7f69      	ldrb	r1, [r5, #29]
    1226:	0400      	lsls	r0, r0, #16
    1228:	4303      	orrs	r3, r0
    122a:	7f28      	ldrb	r0, [r5, #28]
    122c:	0600      	lsls	r0, r0, #24
    122e:	4318      	orrs	r0, r3
    1230:	47b0      	blx	r6
    1232:	0023      	movs	r3, r4
    1234:	3374      	adds	r3, #116	; 0x74
    1236:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1238:	4b9d      	ldr	r3, [pc, #628]	; (14b0 <sampleTick+0x33c>)
    123a:	18c0      	adds	r0, r0, r3
    123c:	4b9d      	ldr	r3, [pc, #628]	; (14b4 <sampleTick+0x340>)
    123e:	4798      	blx	r3
    1240:	4a9d      	ldr	r2, [pc, #628]	; (14b8 <sampleTick+0x344>)
    1242:	4e9e      	ldr	r6, [pc, #632]	; (14bc <sampleTick+0x348>)
    1244:	4b9e      	ldr	r3, [pc, #632]	; (14c0 <sampleTick+0x34c>)
    1246:	47b0      	blx	r6
    1248:	4b9e      	ldr	r3, [pc, #632]	; (14c4 <sampleTick+0x350>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    124a:	2680      	movs	r6, #128	; 0x80
    124c:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    124e:	2250      	movs	r2, #80	; 0x50
    1250:	0029      	movs	r1, r5
    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1252:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1254:	0236      	lsls	r6, r6, #8
    1256:	6463      	str	r3, [r4, #68]	; 0x44
    1258:	4b9b      	ldr	r3, [pc, #620]	; (14c8 <sampleTick+0x354>)
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    125a:	67a0      	str	r0, [r4, #120]	; 0x78
    125c:	615e      	str	r6, [r3, #20]
    byteOut(spi2SCK,spi2MOSI, 0x50);
    125e:	002b      	movs	r3, r5
    1260:	9200      	str	r2, [sp, #0]
    1262:	7fea      	ldrb	r2, [r5, #31]
    1264:	7fa8      	ldrb	r0, [r5, #30]
    1266:	311e      	adds	r1, #30
    1268:	0212      	lsls	r2, r2, #8
    126a:	4310      	orrs	r0, r2
    126c:	788a      	ldrb	r2, [r1, #2]
    126e:	3323      	adds	r3, #35	; 0x23
    1270:	0412      	lsls	r2, r2, #16
    1272:	4302      	orrs	r2, r0
    1274:	78c8      	ldrb	r0, [r1, #3]
    1276:	781d      	ldrb	r5, [r3, #0]
    1278:	0600      	lsls	r0, r0, #24
    127a:	4310      	orrs	r0, r2
    127c:	790a      	ldrb	r2, [r1, #4]
    127e:	791f      	ldrb	r7, [r3, #4]
    1280:	9204      	str	r2, [sp, #16]
    1282:	785a      	ldrb	r2, [r3, #1]
    1284:	0039      	movs	r1, r7
    1286:	0212      	lsls	r2, r2, #8
    1288:	432a      	orrs	r2, r5
    128a:	789d      	ldrb	r5, [r3, #2]
    128c:	9003      	str	r0, [sp, #12]
    128e:	042d      	lsls	r5, r5, #16
    1290:	432a      	orrs	r2, r5
    1292:	78dd      	ldrb	r5, [r3, #3]
    1294:	9b04      	ldr	r3, [sp, #16]
    1296:	062d      	lsls	r5, r5, #24
    1298:	4315      	orrs	r5, r2
    129a:	9505      	str	r5, [sp, #20]
    129c:	0002      	movs	r2, r0
    129e:	0028      	movs	r0, r5
    12a0:	4d8a      	ldr	r5, [pc, #552]	; (14cc <sampleTick+0x358>)
    12a2:	47a8      	blx	r5
    pinHigh(cs_baro);
    delay_us(500);
    12a4:	20fa      	movs	r0, #250	; 0xfa
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12a6:	4b88      	ldr	r3, [pc, #544]	; (14c8 <sampleTick+0x354>)
    12a8:	0040      	lsls	r0, r0, #1
    12aa:	619e      	str	r6, [r3, #24]
    12ac:	4b88      	ldr	r3, [pc, #544]	; (14d0 <sampleTick+0x35c>)
    12ae:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    12b0:	4b88      	ldr	r3, [pc, #544]	; (14d4 <sampleTick+0x360>)
    12b2:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12b4:	4b84      	ldr	r3, [pc, #528]	; (14c8 <sampleTick+0x354>)
    12b6:	6160      	str	r0, [r4, #20]
    12b8:	615e      	str	r6, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    12ba:	2342      	movs	r3, #66	; 0x42
    12bc:	9a03      	ldr	r2, [sp, #12]
    12be:	9300      	str	r3, [sp, #0]
    12c0:	9805      	ldr	r0, [sp, #20]
    12c2:	9b04      	ldr	r3, [sp, #16]
    12c4:	0039      	movs	r1, r7
    12c6:	4d81      	ldr	r5, [pc, #516]	; (14cc <sampleTick+0x358>)
    12c8:	47a8      	blx	r5
    12ca:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12cc:	4b7e      	ldr	r3, [pc, #504]	; (14c8 <sampleTick+0x354>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12ce:	00d2      	lsls	r2, r2, #3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12d0:	619e      	str	r6, [r3, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12d2:	4b81      	ldr	r3, [pc, #516]	; (14d8 <sampleTick+0x364>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    12d4:	4f81      	ldr	r7, [pc, #516]	; (14dc <sampleTick+0x368>)
    12d6:	601a      	str	r2, [r3, #0]
    12d8:	2182      	movs	r1, #130	; 0x82
    12da:	2000      	movs	r0, #0
    12dc:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    12de:	21ff      	movs	r1, #255	; 0xff
    12e0:	2000      	movs	r0, #0
    12e2:	47b8      	blx	r7
    12e4:	0023      	movs	r3, r4
    12e6:	335c      	adds	r3, #92	; 0x5c
    12e8:	8018      	strh	r0, [r3, #0]
    12ea:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12ec:	21ff      	movs	r1, #255	; 0xff
    12ee:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    12f0:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    12f2:	47b8      	blx	r7
    12f4:	9b03      	ldr	r3, [sp, #12]
    12f6:	0200      	lsls	r0, r0, #8
    12f8:	4305      	orrs	r5, r0
    12fa:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    12fc:	21ff      	movs	r1, #255	; 0xff
    12fe:	0026      	movs	r6, r4
    1300:	2000      	movs	r0, #0
    1302:	47b8      	blx	r7
    1304:	3660      	adds	r6, #96	; 0x60
    1306:	8030      	strh	r0, [r6, #0]
    1308:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    130a:	21ff      	movs	r1, #255	; 0xff
    130c:	2000      	movs	r0, #0
    130e:	47b8      	blx	r7
    1310:	0200      	lsls	r0, r0, #8
    1312:	4305      	orrs	r5, r0
    1314:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1316:	21ff      	movs	r1, #255	; 0xff
    1318:	2000      	movs	r0, #0
    131a:	47b8      	blx	r7
    131c:	0023      	movs	r3, r4
    131e:	3364      	adds	r3, #100	; 0x64
    1320:	8018      	strh	r0, [r3, #0]
    1322:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1324:	21ff      	movs	r1, #255	; 0xff
    1326:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1328:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    132a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    132c:	2280      	movs	r2, #128	; 0x80
    132e:	0200      	lsls	r0, r0, #8
    1330:	9b04      	ldr	r3, [sp, #16]
    1332:	4305      	orrs	r5, r0
    1334:	b22d      	sxth	r5, r5
    1336:	801d      	strh	r5, [r3, #0]
    1338:	4b69      	ldr	r3, [pc, #420]	; (14e0 <sampleTick+0x36c>)
    133a:	00d2      	lsls	r2, r2, #3
    133c:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    133e:	9b03      	ldr	r3, [sp, #12]
    1340:	112d      	asrs	r5, r5, #4
    1342:	2000      	movs	r0, #0
    1344:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1346:	2200      	movs	r2, #0
    1348:	5eb3      	ldrsh	r3, [r6, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    134a:	0022      	movs	r2, r4
    134c:	3266      	adds	r2, #102	; 0x66
    134e:	9203      	str	r2, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1350:	1100      	asrs	r0, r0, #4
    1352:	3a08      	subs	r2, #8
    1354:	111b      	asrs	r3, r3, #4
    1356:	8010      	strh	r0, [r2, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1358:	8073      	strh	r3, [r6, #2]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    135a:	9b03      	ldr	r3, [sp, #12]
    135c:	801d      	strh	r5, [r3, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    135e:	4b55      	ldr	r3, [pc, #340]	; (14b4 <sampleTick+0x340>)
    1360:	4798      	blx	r3
    1362:	23fe      	movs	r3, #254	; 0xfe
    1364:	4d55      	ldr	r5, [pc, #340]	; (14bc <sampleTick+0x348>)
    1366:	2200      	movs	r2, #0
    1368:	059b      	lsls	r3, r3, #22
    136a:	47a8      	blx	r5
    136c:	4b55      	ldr	r3, [pc, #340]	; (14c4 <sampleTick+0x350>)
    136e:	4798      	blx	r3
    1370:	6420      	str	r0, [r4, #64]	; 0x40
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1372:	2302      	movs	r3, #2
    1374:	5ef0      	ldrsh	r0, [r6, r3]
    1376:	4b4f      	ldr	r3, [pc, #316]	; (14b4 <sampleTick+0x340>)
    1378:	4798      	blx	r3
    137a:	23fe      	movs	r3, #254	; 0xfe
    137c:	2200      	movs	r2, #0
    137e:	059b      	lsls	r3, r3, #22
    1380:	47a8      	blx	r5
    1382:	4b50      	ldr	r3, [pc, #320]	; (14c4 <sampleTick+0x350>)
    1384:	4798      	blx	r3
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1386:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1388:	64a0      	str	r0, [r4, #72]	; 0x48
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    138a:	2000      	movs	r0, #0
    138c:	5e18      	ldrsh	r0, [r3, r0]
    138e:	4b49      	ldr	r3, [pc, #292]	; (14b4 <sampleTick+0x340>)
    1390:	4798      	blx	r3
    1392:	23fe      	movs	r3, #254	; 0xfe
    1394:	2200      	movs	r2, #0
    1396:	059b      	lsls	r3, r3, #22
    1398:	47a8      	blx	r5
    139a:	4b4a      	ldr	r3, [pc, #296]	; (14c4 <sampleTick+0x350>)
    139c:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    139e:	2280      	movs	r2, #128	; 0x80
    13a0:	4b49      	ldr	r3, [pc, #292]	; (14c8 <sampleTick+0x354>)
    13a2:	00d2      	lsls	r2, r2, #3
    13a4:	64e0      	str	r0, [r4, #76]	; 0x4c


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    13a6:	2182      	movs	r1, #130	; 0x82
    13a8:	615a      	str	r2, [r3, #20]
    13aa:	2000      	movs	r0, #0
    13ac:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13ae:	21ff      	movs	r1, #255	; 0xff
    13b0:	2000      	movs	r0, #0
    13b2:	47b8      	blx	r7
    13b4:	0023      	movs	r3, r4
    13b6:	3368      	adds	r3, #104	; 0x68
    13b8:	8018      	strh	r0, [r3, #0]
    13ba:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13bc:	21ff      	movs	r1, #255	; 0xff
    13be:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13c0:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13c2:	47b8      	blx	r7
    13c4:	9b03      	ldr	r3, [sp, #12]
    13c6:	0200      	lsls	r0, r0, #8
    13c8:	4305      	orrs	r5, r0
    13ca:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13cc:	21ff      	movs	r1, #255	; 0xff
    13ce:	2000      	movs	r0, #0
    13d0:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13d2:	21ff      	movs	r1, #255	; 0xff
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13d4:	81b0      	strh	r0, [r6, #12]
    13d6:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13d8:	2000      	movs	r0, #0
    13da:	47b8      	blx	r7
    13dc:	0200      	lsls	r0, r0, #8
    13de:	4305      	orrs	r5, r0
    13e0:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13e2:	21ff      	movs	r1, #255	; 0xff
    13e4:	2000      	movs	r0, #0
    13e6:	47b8      	blx	r7
    13e8:	0023      	movs	r3, r4
    13ea:	3370      	adds	r3, #112	; 0x70
    13ec:	8018      	strh	r0, [r3, #0]
    13ee:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13f0:	21ff      	movs	r1, #255	; 0xff
    13f2:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13f4:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13f6:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13f8:	2280      	movs	r2, #128	; 0x80
    13fa:	0200      	lsls	r0, r0, #8
    13fc:	9b04      	ldr	r3, [sp, #16]
    13fe:	4305      	orrs	r5, r0
    1400:	b22d      	sxth	r5, r5
    1402:	801d      	strh	r5, [r3, #0]
    1404:	4b30      	ldr	r3, [pc, #192]	; (14c8 <sampleTick+0x354>)
    1406:	00d2      	lsls	r2, r2, #3
    1408:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    140a:	9b03      	ldr	r3, [sp, #12]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    140c:	0027      	movs	r7, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    140e:	2000      	movs	r0, #0
    1410:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    1412:	220c      	movs	r2, #12
    1414:	5eb3      	ldrsh	r3, [r6, r2]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1416:	0022      	movs	r2, r4
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    1418:	376e      	adds	r7, #110	; 0x6e
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    141a:	326a      	adds	r2, #106	; 0x6a
    141c:	1100      	asrs	r0, r0, #4
    141e:	111b      	asrs	r3, r3, #4
    1420:	112d      	asrs	r5, r5, #4
    1422:	8010      	strh	r0, [r2, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1424:	803b      	strh	r3, [r7, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1426:	8275      	strh	r5, [r6, #18]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1428:	4b22      	ldr	r3, [pc, #136]	; (14b4 <sampleTick+0x340>)
    142a:	4798      	blx	r3
    142c:	23fe      	movs	r3, #254	; 0xfe
    142e:	4d23      	ldr	r5, [pc, #140]	; (14bc <sampleTick+0x348>)
    1430:	2200      	movs	r2, #0
    1432:	059b      	lsls	r3, r3, #22
    1434:	47a8      	blx	r5
    1436:	4b23      	ldr	r3, [pc, #140]	; (14c4 <sampleTick+0x350>)
    1438:	4798      	blx	r3
    143a:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    143c:	2300      	movs	r3, #0
    143e:	5ef8      	ldrsh	r0, [r7, r3]
    1440:	4b1c      	ldr	r3, [pc, #112]	; (14b4 <sampleTick+0x340>)
    1442:	4798      	blx	r3
    1444:	23fe      	movs	r3, #254	; 0xfe
    1446:	2200      	movs	r2, #0
    1448:	059b      	lsls	r3, r3, #22
    144a:	47a8      	blx	r5
    144c:	4b1d      	ldr	r3, [pc, #116]	; (14c4 <sampleTick+0x350>)
    144e:	4798      	blx	r3
    1450:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1452:	2312      	movs	r3, #18
    1454:	5ef0      	ldrsh	r0, [r6, r3]
    1456:	4b17      	ldr	r3, [pc, #92]	; (14b4 <sampleTick+0x340>)
    1458:	4798      	blx	r3
    145a:	23fe      	movs	r3, #254	; 0xfe
    145c:	2200      	movs	r2, #0
    145e:	059b      	lsls	r3, r3, #22
    1460:	47a8      	blx	r5
    1462:	4b18      	ldr	r3, [pc, #96]	; (14c4 <sampleTick+0x350>)
    1464:	4798      	blx	r3
    1466:	65a0      	str	r0, [r4, #88]	; 0x58

    delay_us(800);
    1468:	20c8      	movs	r0, #200	; 0xc8
    146a:	4b19      	ldr	r3, [pc, #100]	; (14d0 <sampleTick+0x35c>)
    146c:	0080      	lsls	r0, r0, #2
    146e:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1470:	4b18      	ldr	r3, [pc, #96]	; (14d4 <sampleTick+0x360>)
    1472:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1474:	1d25      	adds	r5, r4, #4
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1476:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1478:	4b1a      	ldr	r3, [pc, #104]	; (14e4 <sampleTick+0x370>)
    147a:	0028      	movs	r0, r5
    147c:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    147e:	0028      	movs	r0, r5
    1480:	4b19      	ldr	r3, [pc, #100]	; (14e8 <sampleTick+0x374>)
    1482:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1484:	4b19      	ldr	r3, [pc, #100]	; (14ec <sampleTick+0x378>)
    1486:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1488:	4798      	blx	r3
    148a:	4a19      	ldr	r2, [pc, #100]	; (14f0 <sampleTick+0x37c>)
    148c:	4b19      	ldr	r3, [pc, #100]	; (14f4 <sampleTick+0x380>)
    148e:	4d0b      	ldr	r5, [pc, #44]	; (14bc <sampleTick+0x348>)
    1490:	47a8      	blx	r5
    1492:	4b0c      	ldr	r3, [pc, #48]	; (14c4 <sampleTick+0x350>)
    1494:	4798      	blx	r3
    1496:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1498:	b007      	add	sp, #28
    149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    149c:	00000e65 	.word	0x00000e65
    14a0:	000027ec 	.word	0x000027ec
    14a4:	00000b25 	.word	0x00000b25
    14a8:	00000282 	.word	0x00000282
    14ac:	00000286 	.word	0x00000286
    14b0:	fffff0c4 	.word	0xfffff0c4
    14b4:	000021b5 	.word	0x000021b5
    14b8:	02de00d2 	.word	0x02de00d2
    14bc:	00001cb5 	.word	0x00001cb5
    14c0:	bf8f8a09 	.word	0xbf8f8a09
    14c4:	0000234d 	.word	0x0000234d
    14c8:	41004400 	.word	0x41004400
    14cc:	00000b91 	.word	0x00000b91
    14d0:	00000df1 	.word	0x00000df1
    14d4:	00000251 	.word	0x00000251
    14d8:	41004494 	.word	0x41004494
    14dc:	00001601 	.word	0x00001601
    14e0:	41004498 	.word	0x41004498
    14e4:	000002f9 	.word	0x000002f9
    14e8:	000003e5 	.word	0x000003e5
    14ec:	00002239 	.word	0x00002239
    14f0:	e9f6a93f 	.word	0xe9f6a93f
    14f4:	3fa0cc78 	.word	0x3fa0cc78

000014f8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    14f8:	b570      	push	{r4, r5, r6, lr}
    14fa:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    14fc:	2301      	movs	r3, #1
    14fe:	1cae      	adds	r6, r5, #2
    1500:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1502:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1504:	490b      	ldr	r1, [pc, #44]	; (1534 <sercomClockEnable+0x3c>)
    1506:	6a08      	ldr	r0, [r1, #32]
    1508:	4303      	orrs	r3, r0
    150a:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    150c:	2c00      	cmp	r4, #0
    150e:	d003      	beq.n	1518 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1510:	2107      	movs	r1, #7
    1512:	0020      	movs	r0, r4
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <sercomClockEnable+0x40>)
    1516:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    1518:	23f0      	movs	r3, #240	; 0xf0
    151a:	0224      	lsls	r4, r4, #8
    151c:	011b      	lsls	r3, r3, #4
    151e:	401c      	ands	r4, r3
    1520:	2380      	movs	r3, #128	; 0x80
    1522:	01db      	lsls	r3, r3, #7
    1524:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    1526:	233f      	movs	r3, #63	; 0x3f
    1528:	3514      	adds	r5, #20
    152a:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    152c:	4b03      	ldr	r3, [pc, #12]	; (153c <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    152e:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1530:	805d      	strh	r5, [r3, #2]
}
    1532:	bd70      	pop	{r4, r5, r6, pc}
    1534:	40000400 	.word	0x40000400
    1538:	00000da1 	.word	0x00000da1
    153c:	40000c00 	.word	0x40000c00

00001540 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <sercomReset+0x14>)
    1542:	0280      	lsls	r0, r0, #10
    1544:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1546:	2301      	movs	r3, #1
    1548:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    154a:	6802      	ldr	r2, [r0, #0]
    154c:	421a      	tst	r2, r3
    154e:	d1fc      	bne.n	154a <sercomReset+0xa>
}
    1550:	4770      	bx	lr
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	42000800 	.word	0x42000800

00001558 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    155a:	0004      	movs	r4, r0
    155c:	9300      	str	r3, [sp, #0]
    155e:	ab08      	add	r3, sp, #32
    1560:	781b      	ldrb	r3, [r3, #0]
    1562:	0016      	movs	r6, r2
    1564:	9301      	str	r3, [sp, #4]
    1566:	ab09      	add	r3, sp, #36	; 0x24
    1568:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    156a:	4b12      	ldr	r3, [pc, #72]	; (15b4 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    156c:	000d      	movs	r5, r1
    sercomReset(id);
    156e:	4798      	blx	r3
    1570:	4b11      	ldr	r3, [pc, #68]	; (15b8 <sercomSpiMasterInit+0x60>)
    1572:	02a4      	lsls	r4, r4, #10
    1574:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1576:	2380      	movs	r3, #128	; 0x80
    1578:	029b      	lsls	r3, r3, #10
    157a:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    157c:	23c0      	movs	r3, #192	; 0xc0
    157e:	052d      	lsls	r5, r5, #20
    1580:	039b      	lsls	r3, r3, #14
    1582:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    1584:	23c0      	movs	r3, #192	; 0xc0
    1586:	0436      	lsls	r6, r6, #16
    1588:	029b      	lsls	r3, r3, #10
    158a:	401e      	ands	r6, r3
    158c:	230e      	movs	r3, #14
    158e:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1590:	9b00      	ldr	r3, [sp, #0]
    1592:	4335      	orrs	r5, r6
    1594:	1e5a      	subs	r2, r3, #1
    1596:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1598:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    159a:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    159c:	1e51      	subs	r1, r2, #1
    159e:	418a      	sbcs	r2, r1
    15a0:	431d      	orrs	r5, r3
    15a2:	0712      	lsls	r2, r2, #28
    15a4:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    15a6:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    15a8:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    15aa:	69e3      	ldr	r3, [r4, #28]
    15ac:	075b      	lsls	r3, r3, #29
    15ae:	d4fc      	bmi.n	15aa <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    15b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	00001541 	.word	0x00001541
    15b8:	42000800 	.word	0x42000800

000015bc <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    15bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15be:	0007      	movs	r7, r0
    15c0:	001e      	movs	r6, r3
    sercomReset(id);
    15c2:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    15c4:	000d      	movs	r5, r1
    15c6:	0014      	movs	r4, r2
    sercomReset(id);
    15c8:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    15ca:	4b0b      	ldr	r3, [pc, #44]	; (15f8 <sercomUartInit+0x3c>)
    15cc:	02b8      	lsls	r0, r7, #10
    15ce:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    15d0:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15d2:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    15d4:	6003      	str	r3, [r0, #0]
        = SERCOM_USART_CTRLB_RXEN
    15d6:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15d8:	0392      	lsls	r2, r2, #14
    15da:	052d      	lsls	r5, r5, #20
    15dc:	4015      	ands	r5, r2
    15de:	4a07      	ldr	r2, [pc, #28]	; (15fc <sercomUartInit+0x40>)
        = SERCOM_USART_CTRLB_RXEN
    15e0:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    15e2:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15e4:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    15e6:	401c      	ands	r4, r3
    sercom(id)->USART.BAUD.reg = baud;
    15e8:	b2b6      	uxth	r6, r6
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15ea:	4322      	orrs	r2, r4
    sercom(id)->USART.BAUD.reg = baud;
    15ec:	8186      	strh	r6, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    15ee:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    15f0:	6002      	str	r2, [r0, #0]
}
    15f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15f4:	00001541 	.word	0x00001541
    15f8:	42000800 	.word	0x42000800
    15fc:	40000006 	.word	0x40000006

00001600 <spiDataTransfer>:
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <spiDataTransfer+0x14>)
    1602:	0280      	lsls	r0, r0, #10
    1604:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1606:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1608:	7e03      	ldrb	r3, [r0, #24]
    160a:	075b      	lsls	r3, r3, #29
    160c:	d5fc      	bpl.n	1608 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    160e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1610:	b2c0      	uxtb	r0, r0
}
    1612:	4770      	bx	lr
    1614:	42000800 	.word	0x42000800

00001618 <usartDataOut>:
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <usartDataOut+0x14>)
    161a:	0280      	lsls	r0, r0, #10
    161c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    161e:	b289      	uxth	r1, r1
    1620:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    1622:	7e03      	ldrb	r3, [r0, #24]
    1624:	07db      	lsls	r3, r3, #31
    1626:	d5fc      	bpl.n	1622 <usartDataOut+0xa>
}
    1628:	4770      	bx	lr
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	42000800 	.word	0x42000800

00001630 <usartDataIn>:
    1630:	4b02      	ldr	r3, [pc, #8]	; (163c <usartDataIn+0xc>)
    1632:	0280      	lsls	r0, r0, #10
    1634:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1636:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1638:	b2c0      	uxtb	r0, r0
    163a:	4770      	bx	lr
    163c:	42000800 	.word	0x42000800

00001640 <__aeabi_lmul>:
    1640:	b5f0      	push	{r4, r5, r6, r7, lr}
    1642:	46ce      	mov	lr, r9
    1644:	4647      	mov	r7, r8
    1646:	0415      	lsls	r5, r2, #16
    1648:	0c2d      	lsrs	r5, r5, #16
    164a:	002e      	movs	r6, r5
    164c:	b580      	push	{r7, lr}
    164e:	0407      	lsls	r7, r0, #16
    1650:	0c14      	lsrs	r4, r2, #16
    1652:	0c3f      	lsrs	r7, r7, #16
    1654:	4699      	mov	r9, r3
    1656:	0c03      	lsrs	r3, r0, #16
    1658:	437e      	muls	r6, r7
    165a:	435d      	muls	r5, r3
    165c:	4367      	muls	r7, r4
    165e:	4363      	muls	r3, r4
    1660:	197f      	adds	r7, r7, r5
    1662:	0c34      	lsrs	r4, r6, #16
    1664:	19e4      	adds	r4, r4, r7
    1666:	469c      	mov	ip, r3
    1668:	42a5      	cmp	r5, r4
    166a:	d903      	bls.n	1674 <__aeabi_lmul+0x34>
    166c:	2380      	movs	r3, #128	; 0x80
    166e:	025b      	lsls	r3, r3, #9
    1670:	4698      	mov	r8, r3
    1672:	44c4      	add	ip, r8
    1674:	464b      	mov	r3, r9
    1676:	4351      	muls	r1, r2
    1678:	4343      	muls	r3, r0
    167a:	0436      	lsls	r6, r6, #16
    167c:	0c36      	lsrs	r6, r6, #16
    167e:	0c25      	lsrs	r5, r4, #16
    1680:	0424      	lsls	r4, r4, #16
    1682:	4465      	add	r5, ip
    1684:	19a4      	adds	r4, r4, r6
    1686:	1859      	adds	r1, r3, r1
    1688:	1949      	adds	r1, r1, r5
    168a:	0020      	movs	r0, r4
    168c:	bc0c      	pop	{r2, r3}
    168e:	4690      	mov	r8, r2
    1690:	4699      	mov	r9, r3
    1692:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001694 <__aeabi_dadd>:
    1694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1696:	4645      	mov	r5, r8
    1698:	46de      	mov	lr, fp
    169a:	4657      	mov	r7, sl
    169c:	464e      	mov	r6, r9
    169e:	030c      	lsls	r4, r1, #12
    16a0:	b5e0      	push	{r5, r6, r7, lr}
    16a2:	004e      	lsls	r6, r1, #1
    16a4:	0fc9      	lsrs	r1, r1, #31
    16a6:	4688      	mov	r8, r1
    16a8:	000d      	movs	r5, r1
    16aa:	0a61      	lsrs	r1, r4, #9
    16ac:	0f44      	lsrs	r4, r0, #29
    16ae:	430c      	orrs	r4, r1
    16b0:	00c7      	lsls	r7, r0, #3
    16b2:	0319      	lsls	r1, r3, #12
    16b4:	0058      	lsls	r0, r3, #1
    16b6:	0fdb      	lsrs	r3, r3, #31
    16b8:	469b      	mov	fp, r3
    16ba:	0a4b      	lsrs	r3, r1, #9
    16bc:	0f51      	lsrs	r1, r2, #29
    16be:	430b      	orrs	r3, r1
    16c0:	0d76      	lsrs	r6, r6, #21
    16c2:	0d40      	lsrs	r0, r0, #21
    16c4:	0019      	movs	r1, r3
    16c6:	00d2      	lsls	r2, r2, #3
    16c8:	45d8      	cmp	r8, fp
    16ca:	d100      	bne.n	16ce <__aeabi_dadd+0x3a>
    16cc:	e0ae      	b.n	182c <__aeabi_dadd+0x198>
    16ce:	1a35      	subs	r5, r6, r0
    16d0:	2d00      	cmp	r5, #0
    16d2:	dc00      	bgt.n	16d6 <__aeabi_dadd+0x42>
    16d4:	e0f6      	b.n	18c4 <__aeabi_dadd+0x230>
    16d6:	2800      	cmp	r0, #0
    16d8:	d10f      	bne.n	16fa <__aeabi_dadd+0x66>
    16da:	4313      	orrs	r3, r2
    16dc:	d100      	bne.n	16e0 <__aeabi_dadd+0x4c>
    16de:	e0db      	b.n	1898 <__aeabi_dadd+0x204>
    16e0:	1e6b      	subs	r3, r5, #1
    16e2:	2b00      	cmp	r3, #0
    16e4:	d000      	beq.n	16e8 <__aeabi_dadd+0x54>
    16e6:	e137      	b.n	1958 <__aeabi_dadd+0x2c4>
    16e8:	1aba      	subs	r2, r7, r2
    16ea:	4297      	cmp	r7, r2
    16ec:	41bf      	sbcs	r7, r7
    16ee:	1a64      	subs	r4, r4, r1
    16f0:	427f      	negs	r7, r7
    16f2:	1be4      	subs	r4, r4, r7
    16f4:	2601      	movs	r6, #1
    16f6:	0017      	movs	r7, r2
    16f8:	e024      	b.n	1744 <__aeabi_dadd+0xb0>
    16fa:	4bc6      	ldr	r3, [pc, #792]	; (1a14 <__aeabi_dadd+0x380>)
    16fc:	429e      	cmp	r6, r3
    16fe:	d04d      	beq.n	179c <__aeabi_dadd+0x108>
    1700:	2380      	movs	r3, #128	; 0x80
    1702:	041b      	lsls	r3, r3, #16
    1704:	4319      	orrs	r1, r3
    1706:	2d38      	cmp	r5, #56	; 0x38
    1708:	dd00      	ble.n	170c <__aeabi_dadd+0x78>
    170a:	e107      	b.n	191c <__aeabi_dadd+0x288>
    170c:	2d1f      	cmp	r5, #31
    170e:	dd00      	ble.n	1712 <__aeabi_dadd+0x7e>
    1710:	e138      	b.n	1984 <__aeabi_dadd+0x2f0>
    1712:	2020      	movs	r0, #32
    1714:	1b43      	subs	r3, r0, r5
    1716:	469a      	mov	sl, r3
    1718:	000b      	movs	r3, r1
    171a:	4650      	mov	r0, sl
    171c:	4083      	lsls	r3, r0
    171e:	4699      	mov	r9, r3
    1720:	0013      	movs	r3, r2
    1722:	4648      	mov	r0, r9
    1724:	40eb      	lsrs	r3, r5
    1726:	4318      	orrs	r0, r3
    1728:	0003      	movs	r3, r0
    172a:	4650      	mov	r0, sl
    172c:	4082      	lsls	r2, r0
    172e:	1e50      	subs	r0, r2, #1
    1730:	4182      	sbcs	r2, r0
    1732:	40e9      	lsrs	r1, r5
    1734:	431a      	orrs	r2, r3
    1736:	1aba      	subs	r2, r7, r2
    1738:	1a61      	subs	r1, r4, r1
    173a:	4297      	cmp	r7, r2
    173c:	41a4      	sbcs	r4, r4
    173e:	0017      	movs	r7, r2
    1740:	4264      	negs	r4, r4
    1742:	1b0c      	subs	r4, r1, r4
    1744:	0223      	lsls	r3, r4, #8
    1746:	d562      	bpl.n	180e <__aeabi_dadd+0x17a>
    1748:	0264      	lsls	r4, r4, #9
    174a:	0a65      	lsrs	r5, r4, #9
    174c:	2d00      	cmp	r5, #0
    174e:	d100      	bne.n	1752 <__aeabi_dadd+0xbe>
    1750:	e0df      	b.n	1912 <__aeabi_dadd+0x27e>
    1752:	0028      	movs	r0, r5
    1754:	f000 fe84 	bl	2460 <__clzsi2>
    1758:	0003      	movs	r3, r0
    175a:	3b08      	subs	r3, #8
    175c:	2b1f      	cmp	r3, #31
    175e:	dd00      	ble.n	1762 <__aeabi_dadd+0xce>
    1760:	e0d2      	b.n	1908 <__aeabi_dadd+0x274>
    1762:	2220      	movs	r2, #32
    1764:	003c      	movs	r4, r7
    1766:	1ad2      	subs	r2, r2, r3
    1768:	409d      	lsls	r5, r3
    176a:	40d4      	lsrs	r4, r2
    176c:	409f      	lsls	r7, r3
    176e:	4325      	orrs	r5, r4
    1770:	429e      	cmp	r6, r3
    1772:	dd00      	ble.n	1776 <__aeabi_dadd+0xe2>
    1774:	e0c4      	b.n	1900 <__aeabi_dadd+0x26c>
    1776:	1b9e      	subs	r6, r3, r6
    1778:	1c73      	adds	r3, r6, #1
    177a:	2b1f      	cmp	r3, #31
    177c:	dd00      	ble.n	1780 <__aeabi_dadd+0xec>
    177e:	e0f1      	b.n	1964 <__aeabi_dadd+0x2d0>
    1780:	2220      	movs	r2, #32
    1782:	0038      	movs	r0, r7
    1784:	0029      	movs	r1, r5
    1786:	1ad2      	subs	r2, r2, r3
    1788:	40d8      	lsrs	r0, r3
    178a:	4091      	lsls	r1, r2
    178c:	4097      	lsls	r7, r2
    178e:	002c      	movs	r4, r5
    1790:	4301      	orrs	r1, r0
    1792:	1e78      	subs	r0, r7, #1
    1794:	4187      	sbcs	r7, r0
    1796:	40dc      	lsrs	r4, r3
    1798:	2600      	movs	r6, #0
    179a:	430f      	orrs	r7, r1
    179c:	077b      	lsls	r3, r7, #29
    179e:	d009      	beq.n	17b4 <__aeabi_dadd+0x120>
    17a0:	230f      	movs	r3, #15
    17a2:	403b      	ands	r3, r7
    17a4:	2b04      	cmp	r3, #4
    17a6:	d005      	beq.n	17b4 <__aeabi_dadd+0x120>
    17a8:	1d3b      	adds	r3, r7, #4
    17aa:	42bb      	cmp	r3, r7
    17ac:	41bf      	sbcs	r7, r7
    17ae:	427f      	negs	r7, r7
    17b0:	19e4      	adds	r4, r4, r7
    17b2:	001f      	movs	r7, r3
    17b4:	0223      	lsls	r3, r4, #8
    17b6:	d52c      	bpl.n	1812 <__aeabi_dadd+0x17e>
    17b8:	4b96      	ldr	r3, [pc, #600]	; (1a14 <__aeabi_dadd+0x380>)
    17ba:	3601      	adds	r6, #1
    17bc:	429e      	cmp	r6, r3
    17be:	d100      	bne.n	17c2 <__aeabi_dadd+0x12e>
    17c0:	e09a      	b.n	18f8 <__aeabi_dadd+0x264>
    17c2:	4645      	mov	r5, r8
    17c4:	4b94      	ldr	r3, [pc, #592]	; (1a18 <__aeabi_dadd+0x384>)
    17c6:	08ff      	lsrs	r7, r7, #3
    17c8:	401c      	ands	r4, r3
    17ca:	0760      	lsls	r0, r4, #29
    17cc:	0576      	lsls	r6, r6, #21
    17ce:	0264      	lsls	r4, r4, #9
    17d0:	4307      	orrs	r7, r0
    17d2:	0b24      	lsrs	r4, r4, #12
    17d4:	0d76      	lsrs	r6, r6, #21
    17d6:	2100      	movs	r1, #0
    17d8:	0324      	lsls	r4, r4, #12
    17da:	0b23      	lsrs	r3, r4, #12
    17dc:	0d0c      	lsrs	r4, r1, #20
    17de:	4a8f      	ldr	r2, [pc, #572]	; (1a1c <__aeabi_dadd+0x388>)
    17e0:	0524      	lsls	r4, r4, #20
    17e2:	431c      	orrs	r4, r3
    17e4:	4014      	ands	r4, r2
    17e6:	0533      	lsls	r3, r6, #20
    17e8:	4323      	orrs	r3, r4
    17ea:	005b      	lsls	r3, r3, #1
    17ec:	07ed      	lsls	r5, r5, #31
    17ee:	085b      	lsrs	r3, r3, #1
    17f0:	432b      	orrs	r3, r5
    17f2:	0038      	movs	r0, r7
    17f4:	0019      	movs	r1, r3
    17f6:	bc3c      	pop	{r2, r3, r4, r5}
    17f8:	4690      	mov	r8, r2
    17fa:	4699      	mov	r9, r3
    17fc:	46a2      	mov	sl, r4
    17fe:	46ab      	mov	fp, r5
    1800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1802:	4664      	mov	r4, ip
    1804:	4304      	orrs	r4, r0
    1806:	d100      	bne.n	180a <__aeabi_dadd+0x176>
    1808:	e211      	b.n	1c2e <__aeabi_dadd+0x59a>
    180a:	0004      	movs	r4, r0
    180c:	4667      	mov	r7, ip
    180e:	077b      	lsls	r3, r7, #29
    1810:	d1c6      	bne.n	17a0 <__aeabi_dadd+0x10c>
    1812:	4645      	mov	r5, r8
    1814:	0760      	lsls	r0, r4, #29
    1816:	08ff      	lsrs	r7, r7, #3
    1818:	4307      	orrs	r7, r0
    181a:	08e4      	lsrs	r4, r4, #3
    181c:	4b7d      	ldr	r3, [pc, #500]	; (1a14 <__aeabi_dadd+0x380>)
    181e:	429e      	cmp	r6, r3
    1820:	d030      	beq.n	1884 <__aeabi_dadd+0x1f0>
    1822:	0324      	lsls	r4, r4, #12
    1824:	0576      	lsls	r6, r6, #21
    1826:	0b24      	lsrs	r4, r4, #12
    1828:	0d76      	lsrs	r6, r6, #21
    182a:	e7d4      	b.n	17d6 <__aeabi_dadd+0x142>
    182c:	1a33      	subs	r3, r6, r0
    182e:	469a      	mov	sl, r3
    1830:	2b00      	cmp	r3, #0
    1832:	dd78      	ble.n	1926 <__aeabi_dadd+0x292>
    1834:	2800      	cmp	r0, #0
    1836:	d031      	beq.n	189c <__aeabi_dadd+0x208>
    1838:	4876      	ldr	r0, [pc, #472]	; (1a14 <__aeabi_dadd+0x380>)
    183a:	4286      	cmp	r6, r0
    183c:	d0ae      	beq.n	179c <__aeabi_dadd+0x108>
    183e:	2080      	movs	r0, #128	; 0x80
    1840:	0400      	lsls	r0, r0, #16
    1842:	4301      	orrs	r1, r0
    1844:	4653      	mov	r3, sl
    1846:	2b38      	cmp	r3, #56	; 0x38
    1848:	dc00      	bgt.n	184c <__aeabi_dadd+0x1b8>
    184a:	e0e9      	b.n	1a20 <__aeabi_dadd+0x38c>
    184c:	430a      	orrs	r2, r1
    184e:	1e51      	subs	r1, r2, #1
    1850:	418a      	sbcs	r2, r1
    1852:	2100      	movs	r1, #0
    1854:	19d2      	adds	r2, r2, r7
    1856:	42ba      	cmp	r2, r7
    1858:	41bf      	sbcs	r7, r7
    185a:	1909      	adds	r1, r1, r4
    185c:	427c      	negs	r4, r7
    185e:	0017      	movs	r7, r2
    1860:	190c      	adds	r4, r1, r4
    1862:	0223      	lsls	r3, r4, #8
    1864:	d5d3      	bpl.n	180e <__aeabi_dadd+0x17a>
    1866:	4b6b      	ldr	r3, [pc, #428]	; (1a14 <__aeabi_dadd+0x380>)
    1868:	3601      	adds	r6, #1
    186a:	429e      	cmp	r6, r3
    186c:	d100      	bne.n	1870 <__aeabi_dadd+0x1dc>
    186e:	e13a      	b.n	1ae6 <__aeabi_dadd+0x452>
    1870:	2001      	movs	r0, #1
    1872:	4b69      	ldr	r3, [pc, #420]	; (1a18 <__aeabi_dadd+0x384>)
    1874:	401c      	ands	r4, r3
    1876:	087b      	lsrs	r3, r7, #1
    1878:	4007      	ands	r7, r0
    187a:	431f      	orrs	r7, r3
    187c:	07e0      	lsls	r0, r4, #31
    187e:	4307      	orrs	r7, r0
    1880:	0864      	lsrs	r4, r4, #1
    1882:	e78b      	b.n	179c <__aeabi_dadd+0x108>
    1884:	0023      	movs	r3, r4
    1886:	433b      	orrs	r3, r7
    1888:	d100      	bne.n	188c <__aeabi_dadd+0x1f8>
    188a:	e1cb      	b.n	1c24 <__aeabi_dadd+0x590>
    188c:	2280      	movs	r2, #128	; 0x80
    188e:	0312      	lsls	r2, r2, #12
    1890:	4314      	orrs	r4, r2
    1892:	0324      	lsls	r4, r4, #12
    1894:	0b24      	lsrs	r4, r4, #12
    1896:	e79e      	b.n	17d6 <__aeabi_dadd+0x142>
    1898:	002e      	movs	r6, r5
    189a:	e77f      	b.n	179c <__aeabi_dadd+0x108>
    189c:	0008      	movs	r0, r1
    189e:	4310      	orrs	r0, r2
    18a0:	d100      	bne.n	18a4 <__aeabi_dadd+0x210>
    18a2:	e0b4      	b.n	1a0e <__aeabi_dadd+0x37a>
    18a4:	1e58      	subs	r0, r3, #1
    18a6:	2800      	cmp	r0, #0
    18a8:	d000      	beq.n	18ac <__aeabi_dadd+0x218>
    18aa:	e0de      	b.n	1a6a <__aeabi_dadd+0x3d6>
    18ac:	18ba      	adds	r2, r7, r2
    18ae:	42ba      	cmp	r2, r7
    18b0:	419b      	sbcs	r3, r3
    18b2:	1864      	adds	r4, r4, r1
    18b4:	425b      	negs	r3, r3
    18b6:	18e4      	adds	r4, r4, r3
    18b8:	0017      	movs	r7, r2
    18ba:	2601      	movs	r6, #1
    18bc:	0223      	lsls	r3, r4, #8
    18be:	d5a6      	bpl.n	180e <__aeabi_dadd+0x17a>
    18c0:	2602      	movs	r6, #2
    18c2:	e7d5      	b.n	1870 <__aeabi_dadd+0x1dc>
    18c4:	2d00      	cmp	r5, #0
    18c6:	d16e      	bne.n	19a6 <__aeabi_dadd+0x312>
    18c8:	1c70      	adds	r0, r6, #1
    18ca:	0540      	lsls	r0, r0, #21
    18cc:	0d40      	lsrs	r0, r0, #21
    18ce:	2801      	cmp	r0, #1
    18d0:	dc00      	bgt.n	18d4 <__aeabi_dadd+0x240>
    18d2:	e0f9      	b.n	1ac8 <__aeabi_dadd+0x434>
    18d4:	1ab8      	subs	r0, r7, r2
    18d6:	4684      	mov	ip, r0
    18d8:	4287      	cmp	r7, r0
    18da:	4180      	sbcs	r0, r0
    18dc:	1ae5      	subs	r5, r4, r3
    18de:	4240      	negs	r0, r0
    18e0:	1a2d      	subs	r5, r5, r0
    18e2:	0228      	lsls	r0, r5, #8
    18e4:	d400      	bmi.n	18e8 <__aeabi_dadd+0x254>
    18e6:	e089      	b.n	19fc <__aeabi_dadd+0x368>
    18e8:	1bd7      	subs	r7, r2, r7
    18ea:	42ba      	cmp	r2, r7
    18ec:	4192      	sbcs	r2, r2
    18ee:	1b1c      	subs	r4, r3, r4
    18f0:	4252      	negs	r2, r2
    18f2:	1aa5      	subs	r5, r4, r2
    18f4:	46d8      	mov	r8, fp
    18f6:	e729      	b.n	174c <__aeabi_dadd+0xb8>
    18f8:	4645      	mov	r5, r8
    18fa:	2400      	movs	r4, #0
    18fc:	2700      	movs	r7, #0
    18fe:	e76a      	b.n	17d6 <__aeabi_dadd+0x142>
    1900:	4c45      	ldr	r4, [pc, #276]	; (1a18 <__aeabi_dadd+0x384>)
    1902:	1af6      	subs	r6, r6, r3
    1904:	402c      	ands	r4, r5
    1906:	e749      	b.n	179c <__aeabi_dadd+0x108>
    1908:	003d      	movs	r5, r7
    190a:	3828      	subs	r0, #40	; 0x28
    190c:	4085      	lsls	r5, r0
    190e:	2700      	movs	r7, #0
    1910:	e72e      	b.n	1770 <__aeabi_dadd+0xdc>
    1912:	0038      	movs	r0, r7
    1914:	f000 fda4 	bl	2460 <__clzsi2>
    1918:	3020      	adds	r0, #32
    191a:	e71d      	b.n	1758 <__aeabi_dadd+0xc4>
    191c:	430a      	orrs	r2, r1
    191e:	1e51      	subs	r1, r2, #1
    1920:	418a      	sbcs	r2, r1
    1922:	2100      	movs	r1, #0
    1924:	e707      	b.n	1736 <__aeabi_dadd+0xa2>
    1926:	2b00      	cmp	r3, #0
    1928:	d000      	beq.n	192c <__aeabi_dadd+0x298>
    192a:	e0f3      	b.n	1b14 <__aeabi_dadd+0x480>
    192c:	1c70      	adds	r0, r6, #1
    192e:	0543      	lsls	r3, r0, #21
    1930:	0d5b      	lsrs	r3, r3, #21
    1932:	2b01      	cmp	r3, #1
    1934:	dc00      	bgt.n	1938 <__aeabi_dadd+0x2a4>
    1936:	e0ad      	b.n	1a94 <__aeabi_dadd+0x400>
    1938:	4b36      	ldr	r3, [pc, #216]	; (1a14 <__aeabi_dadd+0x380>)
    193a:	4298      	cmp	r0, r3
    193c:	d100      	bne.n	1940 <__aeabi_dadd+0x2ac>
    193e:	e0d1      	b.n	1ae4 <__aeabi_dadd+0x450>
    1940:	18ba      	adds	r2, r7, r2
    1942:	42ba      	cmp	r2, r7
    1944:	41bf      	sbcs	r7, r7
    1946:	1864      	adds	r4, r4, r1
    1948:	427f      	negs	r7, r7
    194a:	19e4      	adds	r4, r4, r7
    194c:	07e7      	lsls	r7, r4, #31
    194e:	0852      	lsrs	r2, r2, #1
    1950:	4317      	orrs	r7, r2
    1952:	0864      	lsrs	r4, r4, #1
    1954:	0006      	movs	r6, r0
    1956:	e721      	b.n	179c <__aeabi_dadd+0x108>
    1958:	482e      	ldr	r0, [pc, #184]	; (1a14 <__aeabi_dadd+0x380>)
    195a:	4285      	cmp	r5, r0
    195c:	d100      	bne.n	1960 <__aeabi_dadd+0x2cc>
    195e:	e093      	b.n	1a88 <__aeabi_dadd+0x3f4>
    1960:	001d      	movs	r5, r3
    1962:	e6d0      	b.n	1706 <__aeabi_dadd+0x72>
    1964:	0029      	movs	r1, r5
    1966:	3e1f      	subs	r6, #31
    1968:	40f1      	lsrs	r1, r6
    196a:	2b20      	cmp	r3, #32
    196c:	d100      	bne.n	1970 <__aeabi_dadd+0x2dc>
    196e:	e08d      	b.n	1a8c <__aeabi_dadd+0x3f8>
    1970:	2240      	movs	r2, #64	; 0x40
    1972:	1ad3      	subs	r3, r2, r3
    1974:	409d      	lsls	r5, r3
    1976:	432f      	orrs	r7, r5
    1978:	1e7d      	subs	r5, r7, #1
    197a:	41af      	sbcs	r7, r5
    197c:	2400      	movs	r4, #0
    197e:	430f      	orrs	r7, r1
    1980:	2600      	movs	r6, #0
    1982:	e744      	b.n	180e <__aeabi_dadd+0x17a>
    1984:	002b      	movs	r3, r5
    1986:	0008      	movs	r0, r1
    1988:	3b20      	subs	r3, #32
    198a:	40d8      	lsrs	r0, r3
    198c:	0003      	movs	r3, r0
    198e:	2d20      	cmp	r5, #32
    1990:	d100      	bne.n	1994 <__aeabi_dadd+0x300>
    1992:	e07d      	b.n	1a90 <__aeabi_dadd+0x3fc>
    1994:	2040      	movs	r0, #64	; 0x40
    1996:	1b45      	subs	r5, r0, r5
    1998:	40a9      	lsls	r1, r5
    199a:	430a      	orrs	r2, r1
    199c:	1e51      	subs	r1, r2, #1
    199e:	418a      	sbcs	r2, r1
    19a0:	2100      	movs	r1, #0
    19a2:	431a      	orrs	r2, r3
    19a4:	e6c7      	b.n	1736 <__aeabi_dadd+0xa2>
    19a6:	2e00      	cmp	r6, #0
    19a8:	d050      	beq.n	1a4c <__aeabi_dadd+0x3b8>
    19aa:	4e1a      	ldr	r6, [pc, #104]	; (1a14 <__aeabi_dadd+0x380>)
    19ac:	42b0      	cmp	r0, r6
    19ae:	d057      	beq.n	1a60 <__aeabi_dadd+0x3cc>
    19b0:	2680      	movs	r6, #128	; 0x80
    19b2:	426b      	negs	r3, r5
    19b4:	4699      	mov	r9, r3
    19b6:	0436      	lsls	r6, r6, #16
    19b8:	4334      	orrs	r4, r6
    19ba:	464b      	mov	r3, r9
    19bc:	2b38      	cmp	r3, #56	; 0x38
    19be:	dd00      	ble.n	19c2 <__aeabi_dadd+0x32e>
    19c0:	e0d6      	b.n	1b70 <__aeabi_dadd+0x4dc>
    19c2:	2b1f      	cmp	r3, #31
    19c4:	dd00      	ble.n	19c8 <__aeabi_dadd+0x334>
    19c6:	e135      	b.n	1c34 <__aeabi_dadd+0x5a0>
    19c8:	2620      	movs	r6, #32
    19ca:	1af5      	subs	r5, r6, r3
    19cc:	0026      	movs	r6, r4
    19ce:	40ae      	lsls	r6, r5
    19d0:	46b2      	mov	sl, r6
    19d2:	003e      	movs	r6, r7
    19d4:	40de      	lsrs	r6, r3
    19d6:	46ac      	mov	ip, r5
    19d8:	0035      	movs	r5, r6
    19da:	4656      	mov	r6, sl
    19dc:	432e      	orrs	r6, r5
    19de:	4665      	mov	r5, ip
    19e0:	40af      	lsls	r7, r5
    19e2:	1e7d      	subs	r5, r7, #1
    19e4:	41af      	sbcs	r7, r5
    19e6:	40dc      	lsrs	r4, r3
    19e8:	4337      	orrs	r7, r6
    19ea:	1bd7      	subs	r7, r2, r7
    19ec:	42ba      	cmp	r2, r7
    19ee:	4192      	sbcs	r2, r2
    19f0:	1b0c      	subs	r4, r1, r4
    19f2:	4252      	negs	r2, r2
    19f4:	1aa4      	subs	r4, r4, r2
    19f6:	0006      	movs	r6, r0
    19f8:	46d8      	mov	r8, fp
    19fa:	e6a3      	b.n	1744 <__aeabi_dadd+0xb0>
    19fc:	4664      	mov	r4, ip
    19fe:	4667      	mov	r7, ip
    1a00:	432c      	orrs	r4, r5
    1a02:	d000      	beq.n	1a06 <__aeabi_dadd+0x372>
    1a04:	e6a2      	b.n	174c <__aeabi_dadd+0xb8>
    1a06:	2500      	movs	r5, #0
    1a08:	2600      	movs	r6, #0
    1a0a:	2700      	movs	r7, #0
    1a0c:	e706      	b.n	181c <__aeabi_dadd+0x188>
    1a0e:	001e      	movs	r6, r3
    1a10:	e6c4      	b.n	179c <__aeabi_dadd+0x108>
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	000007ff 	.word	0x000007ff
    1a18:	ff7fffff 	.word	0xff7fffff
    1a1c:	800fffff 	.word	0x800fffff
    1a20:	2b1f      	cmp	r3, #31
    1a22:	dc63      	bgt.n	1aec <__aeabi_dadd+0x458>
    1a24:	2020      	movs	r0, #32
    1a26:	1ac3      	subs	r3, r0, r3
    1a28:	0008      	movs	r0, r1
    1a2a:	4098      	lsls	r0, r3
    1a2c:	469c      	mov	ip, r3
    1a2e:	4683      	mov	fp, r0
    1a30:	4653      	mov	r3, sl
    1a32:	0010      	movs	r0, r2
    1a34:	40d8      	lsrs	r0, r3
    1a36:	0003      	movs	r3, r0
    1a38:	4658      	mov	r0, fp
    1a3a:	4318      	orrs	r0, r3
    1a3c:	4663      	mov	r3, ip
    1a3e:	409a      	lsls	r2, r3
    1a40:	1e53      	subs	r3, r2, #1
    1a42:	419a      	sbcs	r2, r3
    1a44:	4653      	mov	r3, sl
    1a46:	4302      	orrs	r2, r0
    1a48:	40d9      	lsrs	r1, r3
    1a4a:	e703      	b.n	1854 <__aeabi_dadd+0x1c0>
    1a4c:	0026      	movs	r6, r4
    1a4e:	433e      	orrs	r6, r7
    1a50:	d006      	beq.n	1a60 <__aeabi_dadd+0x3cc>
    1a52:	43eb      	mvns	r3, r5
    1a54:	4699      	mov	r9, r3
    1a56:	2b00      	cmp	r3, #0
    1a58:	d0c7      	beq.n	19ea <__aeabi_dadd+0x356>
    1a5a:	4e94      	ldr	r6, [pc, #592]	; (1cac <__aeabi_dadd+0x618>)
    1a5c:	42b0      	cmp	r0, r6
    1a5e:	d1ac      	bne.n	19ba <__aeabi_dadd+0x326>
    1a60:	000c      	movs	r4, r1
    1a62:	0017      	movs	r7, r2
    1a64:	0006      	movs	r6, r0
    1a66:	46d8      	mov	r8, fp
    1a68:	e698      	b.n	179c <__aeabi_dadd+0x108>
    1a6a:	4b90      	ldr	r3, [pc, #576]	; (1cac <__aeabi_dadd+0x618>)
    1a6c:	459a      	cmp	sl, r3
    1a6e:	d00b      	beq.n	1a88 <__aeabi_dadd+0x3f4>
    1a70:	4682      	mov	sl, r0
    1a72:	e6e7      	b.n	1844 <__aeabi_dadd+0x1b0>
    1a74:	2800      	cmp	r0, #0
    1a76:	d000      	beq.n	1a7a <__aeabi_dadd+0x3e6>
    1a78:	e09e      	b.n	1bb8 <__aeabi_dadd+0x524>
    1a7a:	0018      	movs	r0, r3
    1a7c:	4310      	orrs	r0, r2
    1a7e:	d100      	bne.n	1a82 <__aeabi_dadd+0x3ee>
    1a80:	e0e9      	b.n	1c56 <__aeabi_dadd+0x5c2>
    1a82:	001c      	movs	r4, r3
    1a84:	0017      	movs	r7, r2
    1a86:	46d8      	mov	r8, fp
    1a88:	4e88      	ldr	r6, [pc, #544]	; (1cac <__aeabi_dadd+0x618>)
    1a8a:	e687      	b.n	179c <__aeabi_dadd+0x108>
    1a8c:	2500      	movs	r5, #0
    1a8e:	e772      	b.n	1976 <__aeabi_dadd+0x2e2>
    1a90:	2100      	movs	r1, #0
    1a92:	e782      	b.n	199a <__aeabi_dadd+0x306>
    1a94:	0023      	movs	r3, r4
    1a96:	433b      	orrs	r3, r7
    1a98:	2e00      	cmp	r6, #0
    1a9a:	d000      	beq.n	1a9e <__aeabi_dadd+0x40a>
    1a9c:	e0ab      	b.n	1bf6 <__aeabi_dadd+0x562>
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d100      	bne.n	1aa4 <__aeabi_dadd+0x410>
    1aa2:	e0e7      	b.n	1c74 <__aeabi_dadd+0x5e0>
    1aa4:	000b      	movs	r3, r1
    1aa6:	4313      	orrs	r3, r2
    1aa8:	d100      	bne.n	1aac <__aeabi_dadd+0x418>
    1aaa:	e677      	b.n	179c <__aeabi_dadd+0x108>
    1aac:	18ba      	adds	r2, r7, r2
    1aae:	42ba      	cmp	r2, r7
    1ab0:	41bf      	sbcs	r7, r7
    1ab2:	1864      	adds	r4, r4, r1
    1ab4:	427f      	negs	r7, r7
    1ab6:	19e4      	adds	r4, r4, r7
    1ab8:	0223      	lsls	r3, r4, #8
    1aba:	d400      	bmi.n	1abe <__aeabi_dadd+0x42a>
    1abc:	e0f2      	b.n	1ca4 <__aeabi_dadd+0x610>
    1abe:	4b7c      	ldr	r3, [pc, #496]	; (1cb0 <__aeabi_dadd+0x61c>)
    1ac0:	0017      	movs	r7, r2
    1ac2:	401c      	ands	r4, r3
    1ac4:	0006      	movs	r6, r0
    1ac6:	e669      	b.n	179c <__aeabi_dadd+0x108>
    1ac8:	0020      	movs	r0, r4
    1aca:	4338      	orrs	r0, r7
    1acc:	2e00      	cmp	r6, #0
    1ace:	d1d1      	bne.n	1a74 <__aeabi_dadd+0x3e0>
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d15b      	bne.n	1b8c <__aeabi_dadd+0x4f8>
    1ad4:	001c      	movs	r4, r3
    1ad6:	4314      	orrs	r4, r2
    1ad8:	d100      	bne.n	1adc <__aeabi_dadd+0x448>
    1ada:	e0a8      	b.n	1c2e <__aeabi_dadd+0x59a>
    1adc:	001c      	movs	r4, r3
    1ade:	0017      	movs	r7, r2
    1ae0:	46d8      	mov	r8, fp
    1ae2:	e65b      	b.n	179c <__aeabi_dadd+0x108>
    1ae4:	0006      	movs	r6, r0
    1ae6:	2400      	movs	r4, #0
    1ae8:	2700      	movs	r7, #0
    1aea:	e697      	b.n	181c <__aeabi_dadd+0x188>
    1aec:	4650      	mov	r0, sl
    1aee:	000b      	movs	r3, r1
    1af0:	3820      	subs	r0, #32
    1af2:	40c3      	lsrs	r3, r0
    1af4:	4699      	mov	r9, r3
    1af6:	4653      	mov	r3, sl
    1af8:	2b20      	cmp	r3, #32
    1afa:	d100      	bne.n	1afe <__aeabi_dadd+0x46a>
    1afc:	e095      	b.n	1c2a <__aeabi_dadd+0x596>
    1afe:	2340      	movs	r3, #64	; 0x40
    1b00:	4650      	mov	r0, sl
    1b02:	1a1b      	subs	r3, r3, r0
    1b04:	4099      	lsls	r1, r3
    1b06:	430a      	orrs	r2, r1
    1b08:	1e51      	subs	r1, r2, #1
    1b0a:	418a      	sbcs	r2, r1
    1b0c:	464b      	mov	r3, r9
    1b0e:	2100      	movs	r1, #0
    1b10:	431a      	orrs	r2, r3
    1b12:	e69f      	b.n	1854 <__aeabi_dadd+0x1c0>
    1b14:	2e00      	cmp	r6, #0
    1b16:	d130      	bne.n	1b7a <__aeabi_dadd+0x4e6>
    1b18:	0026      	movs	r6, r4
    1b1a:	433e      	orrs	r6, r7
    1b1c:	d067      	beq.n	1bee <__aeabi_dadd+0x55a>
    1b1e:	43db      	mvns	r3, r3
    1b20:	469a      	mov	sl, r3
    1b22:	2b00      	cmp	r3, #0
    1b24:	d01c      	beq.n	1b60 <__aeabi_dadd+0x4cc>
    1b26:	4e61      	ldr	r6, [pc, #388]	; (1cac <__aeabi_dadd+0x618>)
    1b28:	42b0      	cmp	r0, r6
    1b2a:	d060      	beq.n	1bee <__aeabi_dadd+0x55a>
    1b2c:	4653      	mov	r3, sl
    1b2e:	2b38      	cmp	r3, #56	; 0x38
    1b30:	dd00      	ble.n	1b34 <__aeabi_dadd+0x4a0>
    1b32:	e096      	b.n	1c62 <__aeabi_dadd+0x5ce>
    1b34:	2b1f      	cmp	r3, #31
    1b36:	dd00      	ble.n	1b3a <__aeabi_dadd+0x4a6>
    1b38:	e09f      	b.n	1c7a <__aeabi_dadd+0x5e6>
    1b3a:	2620      	movs	r6, #32
    1b3c:	1af3      	subs	r3, r6, r3
    1b3e:	0026      	movs	r6, r4
    1b40:	409e      	lsls	r6, r3
    1b42:	469c      	mov	ip, r3
    1b44:	46b3      	mov	fp, r6
    1b46:	4653      	mov	r3, sl
    1b48:	003e      	movs	r6, r7
    1b4a:	40de      	lsrs	r6, r3
    1b4c:	0033      	movs	r3, r6
    1b4e:	465e      	mov	r6, fp
    1b50:	431e      	orrs	r6, r3
    1b52:	4663      	mov	r3, ip
    1b54:	409f      	lsls	r7, r3
    1b56:	1e7b      	subs	r3, r7, #1
    1b58:	419f      	sbcs	r7, r3
    1b5a:	4653      	mov	r3, sl
    1b5c:	40dc      	lsrs	r4, r3
    1b5e:	4337      	orrs	r7, r6
    1b60:	18bf      	adds	r7, r7, r2
    1b62:	4297      	cmp	r7, r2
    1b64:	4192      	sbcs	r2, r2
    1b66:	1864      	adds	r4, r4, r1
    1b68:	4252      	negs	r2, r2
    1b6a:	18a4      	adds	r4, r4, r2
    1b6c:	0006      	movs	r6, r0
    1b6e:	e678      	b.n	1862 <__aeabi_dadd+0x1ce>
    1b70:	4327      	orrs	r7, r4
    1b72:	1e7c      	subs	r4, r7, #1
    1b74:	41a7      	sbcs	r7, r4
    1b76:	2400      	movs	r4, #0
    1b78:	e737      	b.n	19ea <__aeabi_dadd+0x356>
    1b7a:	4e4c      	ldr	r6, [pc, #304]	; (1cac <__aeabi_dadd+0x618>)
    1b7c:	42b0      	cmp	r0, r6
    1b7e:	d036      	beq.n	1bee <__aeabi_dadd+0x55a>
    1b80:	2680      	movs	r6, #128	; 0x80
    1b82:	425b      	negs	r3, r3
    1b84:	0436      	lsls	r6, r6, #16
    1b86:	469a      	mov	sl, r3
    1b88:	4334      	orrs	r4, r6
    1b8a:	e7cf      	b.n	1b2c <__aeabi_dadd+0x498>
    1b8c:	0018      	movs	r0, r3
    1b8e:	4310      	orrs	r0, r2
    1b90:	d100      	bne.n	1b94 <__aeabi_dadd+0x500>
    1b92:	e603      	b.n	179c <__aeabi_dadd+0x108>
    1b94:	1ab8      	subs	r0, r7, r2
    1b96:	4684      	mov	ip, r0
    1b98:	4567      	cmp	r7, ip
    1b9a:	41ad      	sbcs	r5, r5
    1b9c:	1ae0      	subs	r0, r4, r3
    1b9e:	426d      	negs	r5, r5
    1ba0:	1b40      	subs	r0, r0, r5
    1ba2:	0205      	lsls	r5, r0, #8
    1ba4:	d400      	bmi.n	1ba8 <__aeabi_dadd+0x514>
    1ba6:	e62c      	b.n	1802 <__aeabi_dadd+0x16e>
    1ba8:	1bd7      	subs	r7, r2, r7
    1baa:	42ba      	cmp	r2, r7
    1bac:	4192      	sbcs	r2, r2
    1bae:	1b1c      	subs	r4, r3, r4
    1bb0:	4252      	negs	r2, r2
    1bb2:	1aa4      	subs	r4, r4, r2
    1bb4:	46d8      	mov	r8, fp
    1bb6:	e5f1      	b.n	179c <__aeabi_dadd+0x108>
    1bb8:	0018      	movs	r0, r3
    1bba:	4310      	orrs	r0, r2
    1bbc:	d100      	bne.n	1bc0 <__aeabi_dadd+0x52c>
    1bbe:	e763      	b.n	1a88 <__aeabi_dadd+0x3f4>
    1bc0:	08f8      	lsrs	r0, r7, #3
    1bc2:	0767      	lsls	r7, r4, #29
    1bc4:	4307      	orrs	r7, r0
    1bc6:	2080      	movs	r0, #128	; 0x80
    1bc8:	08e4      	lsrs	r4, r4, #3
    1bca:	0300      	lsls	r0, r0, #12
    1bcc:	4204      	tst	r4, r0
    1bce:	d008      	beq.n	1be2 <__aeabi_dadd+0x54e>
    1bd0:	08dd      	lsrs	r5, r3, #3
    1bd2:	4205      	tst	r5, r0
    1bd4:	d105      	bne.n	1be2 <__aeabi_dadd+0x54e>
    1bd6:	08d2      	lsrs	r2, r2, #3
    1bd8:	0759      	lsls	r1, r3, #29
    1bda:	4311      	orrs	r1, r2
    1bdc:	000f      	movs	r7, r1
    1bde:	002c      	movs	r4, r5
    1be0:	46d8      	mov	r8, fp
    1be2:	0f7b      	lsrs	r3, r7, #29
    1be4:	00e4      	lsls	r4, r4, #3
    1be6:	431c      	orrs	r4, r3
    1be8:	00ff      	lsls	r7, r7, #3
    1bea:	4e30      	ldr	r6, [pc, #192]	; (1cac <__aeabi_dadd+0x618>)
    1bec:	e5d6      	b.n	179c <__aeabi_dadd+0x108>
    1bee:	000c      	movs	r4, r1
    1bf0:	0017      	movs	r7, r2
    1bf2:	0006      	movs	r6, r0
    1bf4:	e5d2      	b.n	179c <__aeabi_dadd+0x108>
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d038      	beq.n	1c6c <__aeabi_dadd+0x5d8>
    1bfa:	000b      	movs	r3, r1
    1bfc:	4313      	orrs	r3, r2
    1bfe:	d100      	bne.n	1c02 <__aeabi_dadd+0x56e>
    1c00:	e742      	b.n	1a88 <__aeabi_dadd+0x3f4>
    1c02:	08f8      	lsrs	r0, r7, #3
    1c04:	0767      	lsls	r7, r4, #29
    1c06:	4307      	orrs	r7, r0
    1c08:	2080      	movs	r0, #128	; 0x80
    1c0a:	08e4      	lsrs	r4, r4, #3
    1c0c:	0300      	lsls	r0, r0, #12
    1c0e:	4204      	tst	r4, r0
    1c10:	d0e7      	beq.n	1be2 <__aeabi_dadd+0x54e>
    1c12:	08cb      	lsrs	r3, r1, #3
    1c14:	4203      	tst	r3, r0
    1c16:	d1e4      	bne.n	1be2 <__aeabi_dadd+0x54e>
    1c18:	08d2      	lsrs	r2, r2, #3
    1c1a:	0749      	lsls	r1, r1, #29
    1c1c:	4311      	orrs	r1, r2
    1c1e:	000f      	movs	r7, r1
    1c20:	001c      	movs	r4, r3
    1c22:	e7de      	b.n	1be2 <__aeabi_dadd+0x54e>
    1c24:	2700      	movs	r7, #0
    1c26:	2400      	movs	r4, #0
    1c28:	e5d5      	b.n	17d6 <__aeabi_dadd+0x142>
    1c2a:	2100      	movs	r1, #0
    1c2c:	e76b      	b.n	1b06 <__aeabi_dadd+0x472>
    1c2e:	2500      	movs	r5, #0
    1c30:	2700      	movs	r7, #0
    1c32:	e5f3      	b.n	181c <__aeabi_dadd+0x188>
    1c34:	464e      	mov	r6, r9
    1c36:	0025      	movs	r5, r4
    1c38:	3e20      	subs	r6, #32
    1c3a:	40f5      	lsrs	r5, r6
    1c3c:	464b      	mov	r3, r9
    1c3e:	002e      	movs	r6, r5
    1c40:	2b20      	cmp	r3, #32
    1c42:	d02d      	beq.n	1ca0 <__aeabi_dadd+0x60c>
    1c44:	2540      	movs	r5, #64	; 0x40
    1c46:	1aed      	subs	r5, r5, r3
    1c48:	40ac      	lsls	r4, r5
    1c4a:	4327      	orrs	r7, r4
    1c4c:	1e7c      	subs	r4, r7, #1
    1c4e:	41a7      	sbcs	r7, r4
    1c50:	2400      	movs	r4, #0
    1c52:	4337      	orrs	r7, r6
    1c54:	e6c9      	b.n	19ea <__aeabi_dadd+0x356>
    1c56:	2480      	movs	r4, #128	; 0x80
    1c58:	2500      	movs	r5, #0
    1c5a:	0324      	lsls	r4, r4, #12
    1c5c:	4e13      	ldr	r6, [pc, #76]	; (1cac <__aeabi_dadd+0x618>)
    1c5e:	2700      	movs	r7, #0
    1c60:	e5dc      	b.n	181c <__aeabi_dadd+0x188>
    1c62:	4327      	orrs	r7, r4
    1c64:	1e7c      	subs	r4, r7, #1
    1c66:	41a7      	sbcs	r7, r4
    1c68:	2400      	movs	r4, #0
    1c6a:	e779      	b.n	1b60 <__aeabi_dadd+0x4cc>
    1c6c:	000c      	movs	r4, r1
    1c6e:	0017      	movs	r7, r2
    1c70:	4e0e      	ldr	r6, [pc, #56]	; (1cac <__aeabi_dadd+0x618>)
    1c72:	e593      	b.n	179c <__aeabi_dadd+0x108>
    1c74:	000c      	movs	r4, r1
    1c76:	0017      	movs	r7, r2
    1c78:	e590      	b.n	179c <__aeabi_dadd+0x108>
    1c7a:	4656      	mov	r6, sl
    1c7c:	0023      	movs	r3, r4
    1c7e:	3e20      	subs	r6, #32
    1c80:	40f3      	lsrs	r3, r6
    1c82:	4699      	mov	r9, r3
    1c84:	4653      	mov	r3, sl
    1c86:	2b20      	cmp	r3, #32
    1c88:	d00e      	beq.n	1ca8 <__aeabi_dadd+0x614>
    1c8a:	2340      	movs	r3, #64	; 0x40
    1c8c:	4656      	mov	r6, sl
    1c8e:	1b9b      	subs	r3, r3, r6
    1c90:	409c      	lsls	r4, r3
    1c92:	4327      	orrs	r7, r4
    1c94:	1e7c      	subs	r4, r7, #1
    1c96:	41a7      	sbcs	r7, r4
    1c98:	464b      	mov	r3, r9
    1c9a:	2400      	movs	r4, #0
    1c9c:	431f      	orrs	r7, r3
    1c9e:	e75f      	b.n	1b60 <__aeabi_dadd+0x4cc>
    1ca0:	2400      	movs	r4, #0
    1ca2:	e7d2      	b.n	1c4a <__aeabi_dadd+0x5b6>
    1ca4:	0017      	movs	r7, r2
    1ca6:	e5b2      	b.n	180e <__aeabi_dadd+0x17a>
    1ca8:	2400      	movs	r4, #0
    1caa:	e7f2      	b.n	1c92 <__aeabi_dadd+0x5fe>
    1cac:	000007ff 	.word	0x000007ff
    1cb0:	ff7fffff 	.word	0xff7fffff

00001cb4 <__aeabi_dmul>:
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	4657      	mov	r7, sl
    1cb8:	4645      	mov	r5, r8
    1cba:	46de      	mov	lr, fp
    1cbc:	464e      	mov	r6, r9
    1cbe:	b5e0      	push	{r5, r6, r7, lr}
    1cc0:	030c      	lsls	r4, r1, #12
    1cc2:	4698      	mov	r8, r3
    1cc4:	004e      	lsls	r6, r1, #1
    1cc6:	0b23      	lsrs	r3, r4, #12
    1cc8:	b087      	sub	sp, #28
    1cca:	0007      	movs	r7, r0
    1ccc:	4692      	mov	sl, r2
    1cce:	469b      	mov	fp, r3
    1cd0:	0d76      	lsrs	r6, r6, #21
    1cd2:	0fcd      	lsrs	r5, r1, #31
    1cd4:	2e00      	cmp	r6, #0
    1cd6:	d06b      	beq.n	1db0 <__aeabi_dmul+0xfc>
    1cd8:	4b6d      	ldr	r3, [pc, #436]	; (1e90 <__aeabi_dmul+0x1dc>)
    1cda:	429e      	cmp	r6, r3
    1cdc:	d035      	beq.n	1d4a <__aeabi_dmul+0x96>
    1cde:	2480      	movs	r4, #128	; 0x80
    1ce0:	465b      	mov	r3, fp
    1ce2:	0f42      	lsrs	r2, r0, #29
    1ce4:	0424      	lsls	r4, r4, #16
    1ce6:	00db      	lsls	r3, r3, #3
    1ce8:	4314      	orrs	r4, r2
    1cea:	431c      	orrs	r4, r3
    1cec:	00c3      	lsls	r3, r0, #3
    1cee:	4699      	mov	r9, r3
    1cf0:	4b68      	ldr	r3, [pc, #416]	; (1e94 <__aeabi_dmul+0x1e0>)
    1cf2:	46a3      	mov	fp, r4
    1cf4:	469c      	mov	ip, r3
    1cf6:	2300      	movs	r3, #0
    1cf8:	2700      	movs	r7, #0
    1cfa:	4466      	add	r6, ip
    1cfc:	9302      	str	r3, [sp, #8]
    1cfe:	4643      	mov	r3, r8
    1d00:	031c      	lsls	r4, r3, #12
    1d02:	005a      	lsls	r2, r3, #1
    1d04:	0fdb      	lsrs	r3, r3, #31
    1d06:	4650      	mov	r0, sl
    1d08:	0b24      	lsrs	r4, r4, #12
    1d0a:	0d52      	lsrs	r2, r2, #21
    1d0c:	4698      	mov	r8, r3
    1d0e:	d100      	bne.n	1d12 <__aeabi_dmul+0x5e>
    1d10:	e076      	b.n	1e00 <__aeabi_dmul+0x14c>
    1d12:	4b5f      	ldr	r3, [pc, #380]	; (1e90 <__aeabi_dmul+0x1dc>)
    1d14:	429a      	cmp	r2, r3
    1d16:	d06d      	beq.n	1df4 <__aeabi_dmul+0x140>
    1d18:	2380      	movs	r3, #128	; 0x80
    1d1a:	0f41      	lsrs	r1, r0, #29
    1d1c:	041b      	lsls	r3, r3, #16
    1d1e:	430b      	orrs	r3, r1
    1d20:	495c      	ldr	r1, [pc, #368]	; (1e94 <__aeabi_dmul+0x1e0>)
    1d22:	00e4      	lsls	r4, r4, #3
    1d24:	468c      	mov	ip, r1
    1d26:	431c      	orrs	r4, r3
    1d28:	00c3      	lsls	r3, r0, #3
    1d2a:	2000      	movs	r0, #0
    1d2c:	4462      	add	r2, ip
    1d2e:	4641      	mov	r1, r8
    1d30:	18b6      	adds	r6, r6, r2
    1d32:	4069      	eors	r1, r5
    1d34:	1c72      	adds	r2, r6, #1
    1d36:	9101      	str	r1, [sp, #4]
    1d38:	4694      	mov	ip, r2
    1d3a:	4307      	orrs	r7, r0
    1d3c:	2f0f      	cmp	r7, #15
    1d3e:	d900      	bls.n	1d42 <__aeabi_dmul+0x8e>
    1d40:	e0b0      	b.n	1ea4 <__aeabi_dmul+0x1f0>
    1d42:	4a55      	ldr	r2, [pc, #340]	; (1e98 <__aeabi_dmul+0x1e4>)
    1d44:	00bf      	lsls	r7, r7, #2
    1d46:	59d2      	ldr	r2, [r2, r7]
    1d48:	4697      	mov	pc, r2
    1d4a:	465b      	mov	r3, fp
    1d4c:	4303      	orrs	r3, r0
    1d4e:	4699      	mov	r9, r3
    1d50:	d000      	beq.n	1d54 <__aeabi_dmul+0xa0>
    1d52:	e087      	b.n	1e64 <__aeabi_dmul+0x1b0>
    1d54:	2300      	movs	r3, #0
    1d56:	469b      	mov	fp, r3
    1d58:	3302      	adds	r3, #2
    1d5a:	2708      	movs	r7, #8
    1d5c:	9302      	str	r3, [sp, #8]
    1d5e:	e7ce      	b.n	1cfe <__aeabi_dmul+0x4a>
    1d60:	4642      	mov	r2, r8
    1d62:	9201      	str	r2, [sp, #4]
    1d64:	2802      	cmp	r0, #2
    1d66:	d067      	beq.n	1e38 <__aeabi_dmul+0x184>
    1d68:	2803      	cmp	r0, #3
    1d6a:	d100      	bne.n	1d6e <__aeabi_dmul+0xba>
    1d6c:	e20e      	b.n	218c <STACK_SIZE+0x18c>
    1d6e:	2801      	cmp	r0, #1
    1d70:	d000      	beq.n	1d74 <__aeabi_dmul+0xc0>
    1d72:	e162      	b.n	203a <STACK_SIZE+0x3a>
    1d74:	2300      	movs	r3, #0
    1d76:	2400      	movs	r4, #0
    1d78:	2200      	movs	r2, #0
    1d7a:	4699      	mov	r9, r3
    1d7c:	9901      	ldr	r1, [sp, #4]
    1d7e:	4001      	ands	r1, r0
    1d80:	b2cd      	uxtb	r5, r1
    1d82:	2100      	movs	r1, #0
    1d84:	0312      	lsls	r2, r2, #12
    1d86:	0d0b      	lsrs	r3, r1, #20
    1d88:	0b12      	lsrs	r2, r2, #12
    1d8a:	051b      	lsls	r3, r3, #20
    1d8c:	4313      	orrs	r3, r2
    1d8e:	4a43      	ldr	r2, [pc, #268]	; (1e9c <__aeabi_dmul+0x1e8>)
    1d90:	0524      	lsls	r4, r4, #20
    1d92:	4013      	ands	r3, r2
    1d94:	431c      	orrs	r4, r3
    1d96:	0064      	lsls	r4, r4, #1
    1d98:	07ed      	lsls	r5, r5, #31
    1d9a:	0864      	lsrs	r4, r4, #1
    1d9c:	432c      	orrs	r4, r5
    1d9e:	4648      	mov	r0, r9
    1da0:	0021      	movs	r1, r4
    1da2:	b007      	add	sp, #28
    1da4:	bc3c      	pop	{r2, r3, r4, r5}
    1da6:	4690      	mov	r8, r2
    1da8:	4699      	mov	r9, r3
    1daa:	46a2      	mov	sl, r4
    1dac:	46ab      	mov	fp, r5
    1dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db0:	4303      	orrs	r3, r0
    1db2:	4699      	mov	r9, r3
    1db4:	d04f      	beq.n	1e56 <__aeabi_dmul+0x1a2>
    1db6:	465b      	mov	r3, fp
    1db8:	2b00      	cmp	r3, #0
    1dba:	d100      	bne.n	1dbe <__aeabi_dmul+0x10a>
    1dbc:	e189      	b.n	20d2 <STACK_SIZE+0xd2>
    1dbe:	4658      	mov	r0, fp
    1dc0:	f000 fb4e 	bl	2460 <__clzsi2>
    1dc4:	0003      	movs	r3, r0
    1dc6:	3b0b      	subs	r3, #11
    1dc8:	2b1c      	cmp	r3, #28
    1dca:	dd00      	ble.n	1dce <__aeabi_dmul+0x11a>
    1dcc:	e17a      	b.n	20c4 <STACK_SIZE+0xc4>
    1dce:	221d      	movs	r2, #29
    1dd0:	1ad3      	subs	r3, r2, r3
    1dd2:	003a      	movs	r2, r7
    1dd4:	0001      	movs	r1, r0
    1dd6:	465c      	mov	r4, fp
    1dd8:	40da      	lsrs	r2, r3
    1dda:	3908      	subs	r1, #8
    1ddc:	408c      	lsls	r4, r1
    1dde:	0013      	movs	r3, r2
    1de0:	408f      	lsls	r7, r1
    1de2:	4323      	orrs	r3, r4
    1de4:	469b      	mov	fp, r3
    1de6:	46b9      	mov	r9, r7
    1de8:	2300      	movs	r3, #0
    1dea:	4e2d      	ldr	r6, [pc, #180]	; (1ea0 <__aeabi_dmul+0x1ec>)
    1dec:	2700      	movs	r7, #0
    1dee:	1a36      	subs	r6, r6, r0
    1df0:	9302      	str	r3, [sp, #8]
    1df2:	e784      	b.n	1cfe <__aeabi_dmul+0x4a>
    1df4:	4653      	mov	r3, sl
    1df6:	4323      	orrs	r3, r4
    1df8:	d12a      	bne.n	1e50 <__aeabi_dmul+0x19c>
    1dfa:	2400      	movs	r4, #0
    1dfc:	2002      	movs	r0, #2
    1dfe:	e796      	b.n	1d2e <__aeabi_dmul+0x7a>
    1e00:	4653      	mov	r3, sl
    1e02:	4323      	orrs	r3, r4
    1e04:	d020      	beq.n	1e48 <__aeabi_dmul+0x194>
    1e06:	2c00      	cmp	r4, #0
    1e08:	d100      	bne.n	1e0c <__aeabi_dmul+0x158>
    1e0a:	e157      	b.n	20bc <STACK_SIZE+0xbc>
    1e0c:	0020      	movs	r0, r4
    1e0e:	f000 fb27 	bl	2460 <__clzsi2>
    1e12:	0003      	movs	r3, r0
    1e14:	3b0b      	subs	r3, #11
    1e16:	2b1c      	cmp	r3, #28
    1e18:	dd00      	ble.n	1e1c <__aeabi_dmul+0x168>
    1e1a:	e149      	b.n	20b0 <STACK_SIZE+0xb0>
    1e1c:	211d      	movs	r1, #29
    1e1e:	1acb      	subs	r3, r1, r3
    1e20:	4651      	mov	r1, sl
    1e22:	0002      	movs	r2, r0
    1e24:	40d9      	lsrs	r1, r3
    1e26:	4653      	mov	r3, sl
    1e28:	3a08      	subs	r2, #8
    1e2a:	4094      	lsls	r4, r2
    1e2c:	4093      	lsls	r3, r2
    1e2e:	430c      	orrs	r4, r1
    1e30:	4a1b      	ldr	r2, [pc, #108]	; (1ea0 <__aeabi_dmul+0x1ec>)
    1e32:	1a12      	subs	r2, r2, r0
    1e34:	2000      	movs	r0, #0
    1e36:	e77a      	b.n	1d2e <__aeabi_dmul+0x7a>
    1e38:	2501      	movs	r5, #1
    1e3a:	9b01      	ldr	r3, [sp, #4]
    1e3c:	4c14      	ldr	r4, [pc, #80]	; (1e90 <__aeabi_dmul+0x1dc>)
    1e3e:	401d      	ands	r5, r3
    1e40:	2300      	movs	r3, #0
    1e42:	2200      	movs	r2, #0
    1e44:	4699      	mov	r9, r3
    1e46:	e79c      	b.n	1d82 <__aeabi_dmul+0xce>
    1e48:	2400      	movs	r4, #0
    1e4a:	2200      	movs	r2, #0
    1e4c:	2001      	movs	r0, #1
    1e4e:	e76e      	b.n	1d2e <__aeabi_dmul+0x7a>
    1e50:	4653      	mov	r3, sl
    1e52:	2003      	movs	r0, #3
    1e54:	e76b      	b.n	1d2e <__aeabi_dmul+0x7a>
    1e56:	2300      	movs	r3, #0
    1e58:	469b      	mov	fp, r3
    1e5a:	3301      	adds	r3, #1
    1e5c:	2704      	movs	r7, #4
    1e5e:	2600      	movs	r6, #0
    1e60:	9302      	str	r3, [sp, #8]
    1e62:	e74c      	b.n	1cfe <__aeabi_dmul+0x4a>
    1e64:	2303      	movs	r3, #3
    1e66:	4681      	mov	r9, r0
    1e68:	270c      	movs	r7, #12
    1e6a:	9302      	str	r3, [sp, #8]
    1e6c:	e747      	b.n	1cfe <__aeabi_dmul+0x4a>
    1e6e:	2280      	movs	r2, #128	; 0x80
    1e70:	2300      	movs	r3, #0
    1e72:	2500      	movs	r5, #0
    1e74:	0312      	lsls	r2, r2, #12
    1e76:	4699      	mov	r9, r3
    1e78:	4c05      	ldr	r4, [pc, #20]	; (1e90 <__aeabi_dmul+0x1dc>)
    1e7a:	e782      	b.n	1d82 <__aeabi_dmul+0xce>
    1e7c:	465c      	mov	r4, fp
    1e7e:	464b      	mov	r3, r9
    1e80:	9802      	ldr	r0, [sp, #8]
    1e82:	e76f      	b.n	1d64 <__aeabi_dmul+0xb0>
    1e84:	465c      	mov	r4, fp
    1e86:	464b      	mov	r3, r9
    1e88:	9501      	str	r5, [sp, #4]
    1e8a:	9802      	ldr	r0, [sp, #8]
    1e8c:	e76a      	b.n	1d64 <__aeabi_dmul+0xb0>
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	000007ff 	.word	0x000007ff
    1e94:	fffffc01 	.word	0xfffffc01
    1e98:	00002814 	.word	0x00002814
    1e9c:	800fffff 	.word	0x800fffff
    1ea0:	fffffc0d 	.word	0xfffffc0d
    1ea4:	464a      	mov	r2, r9
    1ea6:	4649      	mov	r1, r9
    1ea8:	0c17      	lsrs	r7, r2, #16
    1eaa:	0c1a      	lsrs	r2, r3, #16
    1eac:	041b      	lsls	r3, r3, #16
    1eae:	0c1b      	lsrs	r3, r3, #16
    1eb0:	0408      	lsls	r0, r1, #16
    1eb2:	0019      	movs	r1, r3
    1eb4:	0c00      	lsrs	r0, r0, #16
    1eb6:	4341      	muls	r1, r0
    1eb8:	0015      	movs	r5, r2
    1eba:	4688      	mov	r8, r1
    1ebc:	0019      	movs	r1, r3
    1ebe:	437d      	muls	r5, r7
    1ec0:	4379      	muls	r1, r7
    1ec2:	9503      	str	r5, [sp, #12]
    1ec4:	4689      	mov	r9, r1
    1ec6:	0029      	movs	r1, r5
    1ec8:	0015      	movs	r5, r2
    1eca:	4345      	muls	r5, r0
    1ecc:	444d      	add	r5, r9
    1ece:	9502      	str	r5, [sp, #8]
    1ed0:	4645      	mov	r5, r8
    1ed2:	0c2d      	lsrs	r5, r5, #16
    1ed4:	46aa      	mov	sl, r5
    1ed6:	9d02      	ldr	r5, [sp, #8]
    1ed8:	4455      	add	r5, sl
    1eda:	45a9      	cmp	r9, r5
    1edc:	d906      	bls.n	1eec <__aeabi_dmul+0x238>
    1ede:	468a      	mov	sl, r1
    1ee0:	2180      	movs	r1, #128	; 0x80
    1ee2:	0249      	lsls	r1, r1, #9
    1ee4:	4689      	mov	r9, r1
    1ee6:	44ca      	add	sl, r9
    1ee8:	4651      	mov	r1, sl
    1eea:	9103      	str	r1, [sp, #12]
    1eec:	0c29      	lsrs	r1, r5, #16
    1eee:	9104      	str	r1, [sp, #16]
    1ef0:	4641      	mov	r1, r8
    1ef2:	0409      	lsls	r1, r1, #16
    1ef4:	042d      	lsls	r5, r5, #16
    1ef6:	0c09      	lsrs	r1, r1, #16
    1ef8:	4688      	mov	r8, r1
    1efa:	0029      	movs	r1, r5
    1efc:	0c25      	lsrs	r5, r4, #16
    1efe:	0424      	lsls	r4, r4, #16
    1f00:	4441      	add	r1, r8
    1f02:	0c24      	lsrs	r4, r4, #16
    1f04:	9105      	str	r1, [sp, #20]
    1f06:	0021      	movs	r1, r4
    1f08:	4341      	muls	r1, r0
    1f0a:	4688      	mov	r8, r1
    1f0c:	0021      	movs	r1, r4
    1f0e:	4379      	muls	r1, r7
    1f10:	468a      	mov	sl, r1
    1f12:	4368      	muls	r0, r5
    1f14:	4641      	mov	r1, r8
    1f16:	4450      	add	r0, sl
    1f18:	4681      	mov	r9, r0
    1f1a:	0c08      	lsrs	r0, r1, #16
    1f1c:	4448      	add	r0, r9
    1f1e:	436f      	muls	r7, r5
    1f20:	4582      	cmp	sl, r0
    1f22:	d903      	bls.n	1f2c <__aeabi_dmul+0x278>
    1f24:	2180      	movs	r1, #128	; 0x80
    1f26:	0249      	lsls	r1, r1, #9
    1f28:	4689      	mov	r9, r1
    1f2a:	444f      	add	r7, r9
    1f2c:	0c01      	lsrs	r1, r0, #16
    1f2e:	4689      	mov	r9, r1
    1f30:	0039      	movs	r1, r7
    1f32:	4449      	add	r1, r9
    1f34:	9102      	str	r1, [sp, #8]
    1f36:	4641      	mov	r1, r8
    1f38:	040f      	lsls	r7, r1, #16
    1f3a:	9904      	ldr	r1, [sp, #16]
    1f3c:	0c3f      	lsrs	r7, r7, #16
    1f3e:	4688      	mov	r8, r1
    1f40:	0400      	lsls	r0, r0, #16
    1f42:	19c0      	adds	r0, r0, r7
    1f44:	4480      	add	r8, r0
    1f46:	4641      	mov	r1, r8
    1f48:	9104      	str	r1, [sp, #16]
    1f4a:	4659      	mov	r1, fp
    1f4c:	0c0f      	lsrs	r7, r1, #16
    1f4e:	0409      	lsls	r1, r1, #16
    1f50:	0c09      	lsrs	r1, r1, #16
    1f52:	4688      	mov	r8, r1
    1f54:	4359      	muls	r1, r3
    1f56:	468a      	mov	sl, r1
    1f58:	0039      	movs	r1, r7
    1f5a:	4351      	muls	r1, r2
    1f5c:	4689      	mov	r9, r1
    1f5e:	4641      	mov	r1, r8
    1f60:	434a      	muls	r2, r1
    1f62:	4651      	mov	r1, sl
    1f64:	0c09      	lsrs	r1, r1, #16
    1f66:	468b      	mov	fp, r1
    1f68:	437b      	muls	r3, r7
    1f6a:	18d2      	adds	r2, r2, r3
    1f6c:	445a      	add	r2, fp
    1f6e:	4293      	cmp	r3, r2
    1f70:	d903      	bls.n	1f7a <__aeabi_dmul+0x2c6>
    1f72:	2380      	movs	r3, #128	; 0x80
    1f74:	025b      	lsls	r3, r3, #9
    1f76:	469b      	mov	fp, r3
    1f78:	44d9      	add	r9, fp
    1f7a:	4651      	mov	r1, sl
    1f7c:	0409      	lsls	r1, r1, #16
    1f7e:	0c09      	lsrs	r1, r1, #16
    1f80:	468a      	mov	sl, r1
    1f82:	4641      	mov	r1, r8
    1f84:	4361      	muls	r1, r4
    1f86:	437c      	muls	r4, r7
    1f88:	0c13      	lsrs	r3, r2, #16
    1f8a:	0412      	lsls	r2, r2, #16
    1f8c:	444b      	add	r3, r9
    1f8e:	4452      	add	r2, sl
    1f90:	46a1      	mov	r9, r4
    1f92:	468a      	mov	sl, r1
    1f94:	003c      	movs	r4, r7
    1f96:	4641      	mov	r1, r8
    1f98:	436c      	muls	r4, r5
    1f9a:	434d      	muls	r5, r1
    1f9c:	4651      	mov	r1, sl
    1f9e:	444d      	add	r5, r9
    1fa0:	0c0f      	lsrs	r7, r1, #16
    1fa2:	197d      	adds	r5, r7, r5
    1fa4:	45a9      	cmp	r9, r5
    1fa6:	d903      	bls.n	1fb0 <__aeabi_dmul+0x2fc>
    1fa8:	2180      	movs	r1, #128	; 0x80
    1faa:	0249      	lsls	r1, r1, #9
    1fac:	4688      	mov	r8, r1
    1fae:	4444      	add	r4, r8
    1fb0:	9f04      	ldr	r7, [sp, #16]
    1fb2:	9903      	ldr	r1, [sp, #12]
    1fb4:	46b8      	mov	r8, r7
    1fb6:	4441      	add	r1, r8
    1fb8:	468b      	mov	fp, r1
    1fba:	4583      	cmp	fp, r0
    1fbc:	4180      	sbcs	r0, r0
    1fbe:	4241      	negs	r1, r0
    1fc0:	4688      	mov	r8, r1
    1fc2:	4651      	mov	r1, sl
    1fc4:	0408      	lsls	r0, r1, #16
    1fc6:	042f      	lsls	r7, r5, #16
    1fc8:	0c00      	lsrs	r0, r0, #16
    1fca:	183f      	adds	r7, r7, r0
    1fcc:	4658      	mov	r0, fp
    1fce:	9902      	ldr	r1, [sp, #8]
    1fd0:	1810      	adds	r0, r2, r0
    1fd2:	4689      	mov	r9, r1
    1fd4:	4290      	cmp	r0, r2
    1fd6:	4192      	sbcs	r2, r2
    1fd8:	444f      	add	r7, r9
    1fda:	46ba      	mov	sl, r7
    1fdc:	4252      	negs	r2, r2
    1fde:	4699      	mov	r9, r3
    1fe0:	4693      	mov	fp, r2
    1fe2:	44c2      	add	sl, r8
    1fe4:	44d1      	add	r9, sl
    1fe6:	44cb      	add	fp, r9
    1fe8:	428f      	cmp	r7, r1
    1fea:	41bf      	sbcs	r7, r7
    1fec:	45c2      	cmp	sl, r8
    1fee:	4189      	sbcs	r1, r1
    1ff0:	4599      	cmp	r9, r3
    1ff2:	419b      	sbcs	r3, r3
    1ff4:	4593      	cmp	fp, r2
    1ff6:	4192      	sbcs	r2, r2
    1ff8:	427f      	negs	r7, r7
    1ffa:	4249      	negs	r1, r1
    1ffc:	0c2d      	lsrs	r5, r5, #16
    1ffe:	4252      	negs	r2, r2
    2000:	430f      	orrs	r7, r1
    2002:	425b      	negs	r3, r3
    2004:	4313      	orrs	r3, r2
    2006:	197f      	adds	r7, r7, r5
    2008:	18ff      	adds	r7, r7, r3
    200a:	465b      	mov	r3, fp
    200c:	193c      	adds	r4, r7, r4
    200e:	0ddb      	lsrs	r3, r3, #23
    2010:	9a05      	ldr	r2, [sp, #20]
    2012:	0264      	lsls	r4, r4, #9
    2014:	431c      	orrs	r4, r3
    2016:	0243      	lsls	r3, r0, #9
    2018:	4313      	orrs	r3, r2
    201a:	1e5d      	subs	r5, r3, #1
    201c:	41ab      	sbcs	r3, r5
    201e:	465a      	mov	r2, fp
    2020:	0dc0      	lsrs	r0, r0, #23
    2022:	4303      	orrs	r3, r0
    2024:	0252      	lsls	r2, r2, #9
    2026:	4313      	orrs	r3, r2
    2028:	01e2      	lsls	r2, r4, #7
    202a:	d556      	bpl.n	20da <STACK_SIZE+0xda>
    202c:	2001      	movs	r0, #1
    202e:	085a      	lsrs	r2, r3, #1
    2030:	4003      	ands	r3, r0
    2032:	4313      	orrs	r3, r2
    2034:	07e2      	lsls	r2, r4, #31
    2036:	4313      	orrs	r3, r2
    2038:	0864      	lsrs	r4, r4, #1
    203a:	485a      	ldr	r0, [pc, #360]	; (21a4 <STACK_SIZE+0x1a4>)
    203c:	4460      	add	r0, ip
    203e:	2800      	cmp	r0, #0
    2040:	dd4d      	ble.n	20de <STACK_SIZE+0xde>
    2042:	075a      	lsls	r2, r3, #29
    2044:	d009      	beq.n	205a <STACK_SIZE+0x5a>
    2046:	220f      	movs	r2, #15
    2048:	401a      	ands	r2, r3
    204a:	2a04      	cmp	r2, #4
    204c:	d005      	beq.n	205a <STACK_SIZE+0x5a>
    204e:	1d1a      	adds	r2, r3, #4
    2050:	429a      	cmp	r2, r3
    2052:	419b      	sbcs	r3, r3
    2054:	425b      	negs	r3, r3
    2056:	18e4      	adds	r4, r4, r3
    2058:	0013      	movs	r3, r2
    205a:	01e2      	lsls	r2, r4, #7
    205c:	d504      	bpl.n	2068 <STACK_SIZE+0x68>
    205e:	2080      	movs	r0, #128	; 0x80
    2060:	4a51      	ldr	r2, [pc, #324]	; (21a8 <STACK_SIZE+0x1a8>)
    2062:	00c0      	lsls	r0, r0, #3
    2064:	4014      	ands	r4, r2
    2066:	4460      	add	r0, ip
    2068:	4a50      	ldr	r2, [pc, #320]	; (21ac <STACK_SIZE+0x1ac>)
    206a:	4290      	cmp	r0, r2
    206c:	dd00      	ble.n	2070 <STACK_SIZE+0x70>
    206e:	e6e3      	b.n	1e38 <__aeabi_dmul+0x184>
    2070:	2501      	movs	r5, #1
    2072:	08db      	lsrs	r3, r3, #3
    2074:	0762      	lsls	r2, r4, #29
    2076:	431a      	orrs	r2, r3
    2078:	0264      	lsls	r4, r4, #9
    207a:	9b01      	ldr	r3, [sp, #4]
    207c:	4691      	mov	r9, r2
    207e:	0b22      	lsrs	r2, r4, #12
    2080:	0544      	lsls	r4, r0, #21
    2082:	0d64      	lsrs	r4, r4, #21
    2084:	401d      	ands	r5, r3
    2086:	e67c      	b.n	1d82 <__aeabi_dmul+0xce>
    2088:	2280      	movs	r2, #128	; 0x80
    208a:	4659      	mov	r1, fp
    208c:	0312      	lsls	r2, r2, #12
    208e:	4211      	tst	r1, r2
    2090:	d008      	beq.n	20a4 <STACK_SIZE+0xa4>
    2092:	4214      	tst	r4, r2
    2094:	d106      	bne.n	20a4 <STACK_SIZE+0xa4>
    2096:	4322      	orrs	r2, r4
    2098:	0312      	lsls	r2, r2, #12
    209a:	0b12      	lsrs	r2, r2, #12
    209c:	4645      	mov	r5, r8
    209e:	4699      	mov	r9, r3
    20a0:	4c43      	ldr	r4, [pc, #268]	; (21b0 <STACK_SIZE+0x1b0>)
    20a2:	e66e      	b.n	1d82 <__aeabi_dmul+0xce>
    20a4:	465b      	mov	r3, fp
    20a6:	431a      	orrs	r2, r3
    20a8:	0312      	lsls	r2, r2, #12
    20aa:	0b12      	lsrs	r2, r2, #12
    20ac:	4c40      	ldr	r4, [pc, #256]	; (21b0 <STACK_SIZE+0x1b0>)
    20ae:	e668      	b.n	1d82 <__aeabi_dmul+0xce>
    20b0:	0003      	movs	r3, r0
    20b2:	4654      	mov	r4, sl
    20b4:	3b28      	subs	r3, #40	; 0x28
    20b6:	409c      	lsls	r4, r3
    20b8:	2300      	movs	r3, #0
    20ba:	e6b9      	b.n	1e30 <__aeabi_dmul+0x17c>
    20bc:	f000 f9d0 	bl	2460 <__clzsi2>
    20c0:	3020      	adds	r0, #32
    20c2:	e6a6      	b.n	1e12 <__aeabi_dmul+0x15e>
    20c4:	0003      	movs	r3, r0
    20c6:	3b28      	subs	r3, #40	; 0x28
    20c8:	409f      	lsls	r7, r3
    20ca:	2300      	movs	r3, #0
    20cc:	46bb      	mov	fp, r7
    20ce:	4699      	mov	r9, r3
    20d0:	e68a      	b.n	1de8 <__aeabi_dmul+0x134>
    20d2:	f000 f9c5 	bl	2460 <__clzsi2>
    20d6:	3020      	adds	r0, #32
    20d8:	e674      	b.n	1dc4 <__aeabi_dmul+0x110>
    20da:	46b4      	mov	ip, r6
    20dc:	e7ad      	b.n	203a <STACK_SIZE+0x3a>
    20de:	2501      	movs	r5, #1
    20e0:	1a2a      	subs	r2, r5, r0
    20e2:	2a38      	cmp	r2, #56	; 0x38
    20e4:	dd06      	ble.n	20f4 <STACK_SIZE+0xf4>
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	2400      	movs	r4, #0
    20ea:	401d      	ands	r5, r3
    20ec:	2300      	movs	r3, #0
    20ee:	2200      	movs	r2, #0
    20f0:	4699      	mov	r9, r3
    20f2:	e646      	b.n	1d82 <__aeabi_dmul+0xce>
    20f4:	2a1f      	cmp	r2, #31
    20f6:	dc21      	bgt.n	213c <STACK_SIZE+0x13c>
    20f8:	2520      	movs	r5, #32
    20fa:	0020      	movs	r0, r4
    20fc:	1aad      	subs	r5, r5, r2
    20fe:	001e      	movs	r6, r3
    2100:	40ab      	lsls	r3, r5
    2102:	40a8      	lsls	r0, r5
    2104:	40d6      	lsrs	r6, r2
    2106:	1e5d      	subs	r5, r3, #1
    2108:	41ab      	sbcs	r3, r5
    210a:	4330      	orrs	r0, r6
    210c:	4318      	orrs	r0, r3
    210e:	40d4      	lsrs	r4, r2
    2110:	0743      	lsls	r3, r0, #29
    2112:	d009      	beq.n	2128 <STACK_SIZE+0x128>
    2114:	230f      	movs	r3, #15
    2116:	4003      	ands	r3, r0
    2118:	2b04      	cmp	r3, #4
    211a:	d005      	beq.n	2128 <STACK_SIZE+0x128>
    211c:	0003      	movs	r3, r0
    211e:	1d18      	adds	r0, r3, #4
    2120:	4298      	cmp	r0, r3
    2122:	419b      	sbcs	r3, r3
    2124:	425b      	negs	r3, r3
    2126:	18e4      	adds	r4, r4, r3
    2128:	0223      	lsls	r3, r4, #8
    212a:	d521      	bpl.n	2170 <STACK_SIZE+0x170>
    212c:	2501      	movs	r5, #1
    212e:	9b01      	ldr	r3, [sp, #4]
    2130:	2401      	movs	r4, #1
    2132:	401d      	ands	r5, r3
    2134:	2300      	movs	r3, #0
    2136:	2200      	movs	r2, #0
    2138:	4699      	mov	r9, r3
    213a:	e622      	b.n	1d82 <__aeabi_dmul+0xce>
    213c:	251f      	movs	r5, #31
    213e:	0021      	movs	r1, r4
    2140:	426d      	negs	r5, r5
    2142:	1a28      	subs	r0, r5, r0
    2144:	40c1      	lsrs	r1, r0
    2146:	0008      	movs	r0, r1
    2148:	2a20      	cmp	r2, #32
    214a:	d01d      	beq.n	2188 <STACK_SIZE+0x188>
    214c:	355f      	adds	r5, #95	; 0x5f
    214e:	1aaa      	subs	r2, r5, r2
    2150:	4094      	lsls	r4, r2
    2152:	4323      	orrs	r3, r4
    2154:	1e5c      	subs	r4, r3, #1
    2156:	41a3      	sbcs	r3, r4
    2158:	2507      	movs	r5, #7
    215a:	4303      	orrs	r3, r0
    215c:	401d      	ands	r5, r3
    215e:	2200      	movs	r2, #0
    2160:	2d00      	cmp	r5, #0
    2162:	d009      	beq.n	2178 <STACK_SIZE+0x178>
    2164:	220f      	movs	r2, #15
    2166:	2400      	movs	r4, #0
    2168:	401a      	ands	r2, r3
    216a:	0018      	movs	r0, r3
    216c:	2a04      	cmp	r2, #4
    216e:	d1d6      	bne.n	211e <STACK_SIZE+0x11e>
    2170:	0003      	movs	r3, r0
    2172:	0765      	lsls	r5, r4, #29
    2174:	0264      	lsls	r4, r4, #9
    2176:	0b22      	lsrs	r2, r4, #12
    2178:	08db      	lsrs	r3, r3, #3
    217a:	432b      	orrs	r3, r5
    217c:	2501      	movs	r5, #1
    217e:	4699      	mov	r9, r3
    2180:	9b01      	ldr	r3, [sp, #4]
    2182:	2400      	movs	r4, #0
    2184:	401d      	ands	r5, r3
    2186:	e5fc      	b.n	1d82 <__aeabi_dmul+0xce>
    2188:	2400      	movs	r4, #0
    218a:	e7e2      	b.n	2152 <STACK_SIZE+0x152>
    218c:	2280      	movs	r2, #128	; 0x80
    218e:	2501      	movs	r5, #1
    2190:	0312      	lsls	r2, r2, #12
    2192:	4322      	orrs	r2, r4
    2194:	9901      	ldr	r1, [sp, #4]
    2196:	0312      	lsls	r2, r2, #12
    2198:	0b12      	lsrs	r2, r2, #12
    219a:	400d      	ands	r5, r1
    219c:	4699      	mov	r9, r3
    219e:	4c04      	ldr	r4, [pc, #16]	; (21b0 <STACK_SIZE+0x1b0>)
    21a0:	e5ef      	b.n	1d82 <__aeabi_dmul+0xce>
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	000003ff 	.word	0x000003ff
    21a8:	feffffff 	.word	0xfeffffff
    21ac:	000007fe 	.word	0x000007fe
    21b0:	000007ff 	.word	0x000007ff

000021b4 <__aeabi_i2d>:
    21b4:	b570      	push	{r4, r5, r6, lr}
    21b6:	2800      	cmp	r0, #0
    21b8:	d030      	beq.n	221c <__aeabi_i2d+0x68>
    21ba:	17c3      	asrs	r3, r0, #31
    21bc:	18c4      	adds	r4, r0, r3
    21be:	405c      	eors	r4, r3
    21c0:	0fc5      	lsrs	r5, r0, #31
    21c2:	0020      	movs	r0, r4
    21c4:	f000 f94c 	bl	2460 <__clzsi2>
    21c8:	4b17      	ldr	r3, [pc, #92]	; (2228 <__aeabi_i2d+0x74>)
    21ca:	4a18      	ldr	r2, [pc, #96]	; (222c <__aeabi_i2d+0x78>)
    21cc:	1a1b      	subs	r3, r3, r0
    21ce:	1ad2      	subs	r2, r2, r3
    21d0:	2a1f      	cmp	r2, #31
    21d2:	dd18      	ble.n	2206 <__aeabi_i2d+0x52>
    21d4:	4a16      	ldr	r2, [pc, #88]	; (2230 <__aeabi_i2d+0x7c>)
    21d6:	1ad2      	subs	r2, r2, r3
    21d8:	4094      	lsls	r4, r2
    21da:	2200      	movs	r2, #0
    21dc:	0324      	lsls	r4, r4, #12
    21de:	055b      	lsls	r3, r3, #21
    21e0:	0b24      	lsrs	r4, r4, #12
    21e2:	0d5b      	lsrs	r3, r3, #21
    21e4:	2100      	movs	r1, #0
    21e6:	0010      	movs	r0, r2
    21e8:	0324      	lsls	r4, r4, #12
    21ea:	0d0a      	lsrs	r2, r1, #20
    21ec:	0b24      	lsrs	r4, r4, #12
    21ee:	0512      	lsls	r2, r2, #20
    21f0:	4322      	orrs	r2, r4
    21f2:	4c10      	ldr	r4, [pc, #64]	; (2234 <__aeabi_i2d+0x80>)
    21f4:	051b      	lsls	r3, r3, #20
    21f6:	4022      	ands	r2, r4
    21f8:	4313      	orrs	r3, r2
    21fa:	005b      	lsls	r3, r3, #1
    21fc:	07ed      	lsls	r5, r5, #31
    21fe:	085b      	lsrs	r3, r3, #1
    2200:	432b      	orrs	r3, r5
    2202:	0019      	movs	r1, r3
    2204:	bd70      	pop	{r4, r5, r6, pc}
    2206:	0021      	movs	r1, r4
    2208:	4091      	lsls	r1, r2
    220a:	000a      	movs	r2, r1
    220c:	210b      	movs	r1, #11
    220e:	1a08      	subs	r0, r1, r0
    2210:	40c4      	lsrs	r4, r0
    2212:	055b      	lsls	r3, r3, #21
    2214:	0324      	lsls	r4, r4, #12
    2216:	0b24      	lsrs	r4, r4, #12
    2218:	0d5b      	lsrs	r3, r3, #21
    221a:	e7e3      	b.n	21e4 <__aeabi_i2d+0x30>
    221c:	2500      	movs	r5, #0
    221e:	2300      	movs	r3, #0
    2220:	2400      	movs	r4, #0
    2222:	2200      	movs	r2, #0
    2224:	e7de      	b.n	21e4 <__aeabi_i2d+0x30>
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	0000041e 	.word	0x0000041e
    222c:	00000433 	.word	0x00000433
    2230:	00000413 	.word	0x00000413
    2234:	800fffff 	.word	0x800fffff

00002238 <__aeabi_ui2d>:
    2238:	b510      	push	{r4, lr}
    223a:	1e04      	subs	r4, r0, #0
    223c:	d028      	beq.n	2290 <__aeabi_ui2d+0x58>
    223e:	f000 f90f 	bl	2460 <__clzsi2>
    2242:	4b15      	ldr	r3, [pc, #84]	; (2298 <__aeabi_ui2d+0x60>)
    2244:	4a15      	ldr	r2, [pc, #84]	; (229c <__aeabi_ui2d+0x64>)
    2246:	1a1b      	subs	r3, r3, r0
    2248:	1ad2      	subs	r2, r2, r3
    224a:	2a1f      	cmp	r2, #31
    224c:	dd15      	ble.n	227a <__aeabi_ui2d+0x42>
    224e:	4a14      	ldr	r2, [pc, #80]	; (22a0 <__aeabi_ui2d+0x68>)
    2250:	1ad2      	subs	r2, r2, r3
    2252:	4094      	lsls	r4, r2
    2254:	2200      	movs	r2, #0
    2256:	0324      	lsls	r4, r4, #12
    2258:	055b      	lsls	r3, r3, #21
    225a:	0b24      	lsrs	r4, r4, #12
    225c:	0d5b      	lsrs	r3, r3, #21
    225e:	2100      	movs	r1, #0
    2260:	0010      	movs	r0, r2
    2262:	0324      	lsls	r4, r4, #12
    2264:	0d0a      	lsrs	r2, r1, #20
    2266:	0b24      	lsrs	r4, r4, #12
    2268:	0512      	lsls	r2, r2, #20
    226a:	4322      	orrs	r2, r4
    226c:	4c0d      	ldr	r4, [pc, #52]	; (22a4 <__aeabi_ui2d+0x6c>)
    226e:	051b      	lsls	r3, r3, #20
    2270:	4022      	ands	r2, r4
    2272:	4313      	orrs	r3, r2
    2274:	005b      	lsls	r3, r3, #1
    2276:	0859      	lsrs	r1, r3, #1
    2278:	bd10      	pop	{r4, pc}
    227a:	0021      	movs	r1, r4
    227c:	4091      	lsls	r1, r2
    227e:	000a      	movs	r2, r1
    2280:	210b      	movs	r1, #11
    2282:	1a08      	subs	r0, r1, r0
    2284:	40c4      	lsrs	r4, r0
    2286:	055b      	lsls	r3, r3, #21
    2288:	0324      	lsls	r4, r4, #12
    228a:	0b24      	lsrs	r4, r4, #12
    228c:	0d5b      	lsrs	r3, r3, #21
    228e:	e7e6      	b.n	225e <__aeabi_ui2d+0x26>
    2290:	2300      	movs	r3, #0
    2292:	2400      	movs	r4, #0
    2294:	2200      	movs	r2, #0
    2296:	e7e2      	b.n	225e <__aeabi_ui2d+0x26>
    2298:	0000041e 	.word	0x0000041e
    229c:	00000433 	.word	0x00000433
    22a0:	00000413 	.word	0x00000413
    22a4:	800fffff 	.word	0x800fffff

000022a8 <__aeabi_f2d>:
    22a8:	0041      	lsls	r1, r0, #1
    22aa:	0e09      	lsrs	r1, r1, #24
    22ac:	1c4b      	adds	r3, r1, #1
    22ae:	b570      	push	{r4, r5, r6, lr}
    22b0:	b2db      	uxtb	r3, r3
    22b2:	0246      	lsls	r6, r0, #9
    22b4:	0a75      	lsrs	r5, r6, #9
    22b6:	0fc4      	lsrs	r4, r0, #31
    22b8:	2b01      	cmp	r3, #1
    22ba:	dd14      	ble.n	22e6 <__aeabi_f2d+0x3e>
    22bc:	23e0      	movs	r3, #224	; 0xe0
    22be:	009b      	lsls	r3, r3, #2
    22c0:	076d      	lsls	r5, r5, #29
    22c2:	0b36      	lsrs	r6, r6, #12
    22c4:	18cb      	adds	r3, r1, r3
    22c6:	2100      	movs	r1, #0
    22c8:	0d0a      	lsrs	r2, r1, #20
    22ca:	0028      	movs	r0, r5
    22cc:	0512      	lsls	r2, r2, #20
    22ce:	4d1c      	ldr	r5, [pc, #112]	; (2340 <__aeabi_f2d+0x98>)
    22d0:	4332      	orrs	r2, r6
    22d2:	055b      	lsls	r3, r3, #21
    22d4:	402a      	ands	r2, r5
    22d6:	085b      	lsrs	r3, r3, #1
    22d8:	4313      	orrs	r3, r2
    22da:	005b      	lsls	r3, r3, #1
    22dc:	07e4      	lsls	r4, r4, #31
    22de:	085b      	lsrs	r3, r3, #1
    22e0:	4323      	orrs	r3, r4
    22e2:	0019      	movs	r1, r3
    22e4:	bd70      	pop	{r4, r5, r6, pc}
    22e6:	2900      	cmp	r1, #0
    22e8:	d114      	bne.n	2314 <__aeabi_f2d+0x6c>
    22ea:	2d00      	cmp	r5, #0
    22ec:	d01e      	beq.n	232c <__aeabi_f2d+0x84>
    22ee:	0028      	movs	r0, r5
    22f0:	f000 f8b6 	bl	2460 <__clzsi2>
    22f4:	280a      	cmp	r0, #10
    22f6:	dc1c      	bgt.n	2332 <__aeabi_f2d+0x8a>
    22f8:	230b      	movs	r3, #11
    22fa:	002a      	movs	r2, r5
    22fc:	1a1b      	subs	r3, r3, r0
    22fe:	40da      	lsrs	r2, r3
    2300:	0003      	movs	r3, r0
    2302:	3315      	adds	r3, #21
    2304:	409d      	lsls	r5, r3
    2306:	4b0f      	ldr	r3, [pc, #60]	; (2344 <__aeabi_f2d+0x9c>)
    2308:	0312      	lsls	r2, r2, #12
    230a:	1a1b      	subs	r3, r3, r0
    230c:	055b      	lsls	r3, r3, #21
    230e:	0b16      	lsrs	r6, r2, #12
    2310:	0d5b      	lsrs	r3, r3, #21
    2312:	e7d8      	b.n	22c6 <__aeabi_f2d+0x1e>
    2314:	2d00      	cmp	r5, #0
    2316:	d006      	beq.n	2326 <__aeabi_f2d+0x7e>
    2318:	0b32      	lsrs	r2, r6, #12
    231a:	2680      	movs	r6, #128	; 0x80
    231c:	0336      	lsls	r6, r6, #12
    231e:	076d      	lsls	r5, r5, #29
    2320:	4316      	orrs	r6, r2
    2322:	4b09      	ldr	r3, [pc, #36]	; (2348 <__aeabi_f2d+0xa0>)
    2324:	e7cf      	b.n	22c6 <__aeabi_f2d+0x1e>
    2326:	4b08      	ldr	r3, [pc, #32]	; (2348 <__aeabi_f2d+0xa0>)
    2328:	2600      	movs	r6, #0
    232a:	e7cc      	b.n	22c6 <__aeabi_f2d+0x1e>
    232c:	2300      	movs	r3, #0
    232e:	2600      	movs	r6, #0
    2330:	e7c9      	b.n	22c6 <__aeabi_f2d+0x1e>
    2332:	0003      	movs	r3, r0
    2334:	002a      	movs	r2, r5
    2336:	3b0b      	subs	r3, #11
    2338:	409a      	lsls	r2, r3
    233a:	2500      	movs	r5, #0
    233c:	e7e3      	b.n	2306 <__aeabi_f2d+0x5e>
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	800fffff 	.word	0x800fffff
    2344:	00000389 	.word	0x00000389
    2348:	000007ff 	.word	0x000007ff

0000234c <__aeabi_d2f>:
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
    234e:	004c      	lsls	r4, r1, #1
    2350:	0d64      	lsrs	r4, r4, #21
    2352:	030b      	lsls	r3, r1, #12
    2354:	1c62      	adds	r2, r4, #1
    2356:	0f45      	lsrs	r5, r0, #29
    2358:	0a5b      	lsrs	r3, r3, #9
    235a:	0552      	lsls	r2, r2, #21
    235c:	432b      	orrs	r3, r5
    235e:	0fc9      	lsrs	r1, r1, #31
    2360:	00c5      	lsls	r5, r0, #3
    2362:	0d52      	lsrs	r2, r2, #21
    2364:	2a01      	cmp	r2, #1
    2366:	dd28      	ble.n	23ba <__aeabi_d2f+0x6e>
    2368:	4a3a      	ldr	r2, [pc, #232]	; (2454 <__aeabi_d2f+0x108>)
    236a:	18a6      	adds	r6, r4, r2
    236c:	2efe      	cmp	r6, #254	; 0xfe
    236e:	dc1b      	bgt.n	23a8 <__aeabi_d2f+0x5c>
    2370:	2e00      	cmp	r6, #0
    2372:	dd3e      	ble.n	23f2 <__aeabi_d2f+0xa6>
    2374:	0180      	lsls	r0, r0, #6
    2376:	0002      	movs	r2, r0
    2378:	1e50      	subs	r0, r2, #1
    237a:	4182      	sbcs	r2, r0
    237c:	0f6d      	lsrs	r5, r5, #29
    237e:	432a      	orrs	r2, r5
    2380:	00db      	lsls	r3, r3, #3
    2382:	4313      	orrs	r3, r2
    2384:	075a      	lsls	r2, r3, #29
    2386:	d004      	beq.n	2392 <__aeabi_d2f+0x46>
    2388:	220f      	movs	r2, #15
    238a:	401a      	ands	r2, r3
    238c:	2a04      	cmp	r2, #4
    238e:	d000      	beq.n	2392 <__aeabi_d2f+0x46>
    2390:	3304      	adds	r3, #4
    2392:	2280      	movs	r2, #128	; 0x80
    2394:	04d2      	lsls	r2, r2, #19
    2396:	401a      	ands	r2, r3
    2398:	d05a      	beq.n	2450 <__aeabi_d2f+0x104>
    239a:	3601      	adds	r6, #1
    239c:	2eff      	cmp	r6, #255	; 0xff
    239e:	d003      	beq.n	23a8 <__aeabi_d2f+0x5c>
    23a0:	019b      	lsls	r3, r3, #6
    23a2:	0a5b      	lsrs	r3, r3, #9
    23a4:	b2f4      	uxtb	r4, r6
    23a6:	e001      	b.n	23ac <__aeabi_d2f+0x60>
    23a8:	24ff      	movs	r4, #255	; 0xff
    23aa:	2300      	movs	r3, #0
    23ac:	0258      	lsls	r0, r3, #9
    23ae:	05e4      	lsls	r4, r4, #23
    23b0:	0a40      	lsrs	r0, r0, #9
    23b2:	07c9      	lsls	r1, r1, #31
    23b4:	4320      	orrs	r0, r4
    23b6:	4308      	orrs	r0, r1
    23b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ba:	2c00      	cmp	r4, #0
    23bc:	d007      	beq.n	23ce <__aeabi_d2f+0x82>
    23be:	431d      	orrs	r5, r3
    23c0:	d0f2      	beq.n	23a8 <__aeabi_d2f+0x5c>
    23c2:	2080      	movs	r0, #128	; 0x80
    23c4:	00db      	lsls	r3, r3, #3
    23c6:	0480      	lsls	r0, r0, #18
    23c8:	4303      	orrs	r3, r0
    23ca:	26ff      	movs	r6, #255	; 0xff
    23cc:	e7da      	b.n	2384 <__aeabi_d2f+0x38>
    23ce:	432b      	orrs	r3, r5
    23d0:	d003      	beq.n	23da <__aeabi_d2f+0x8e>
    23d2:	2305      	movs	r3, #5
    23d4:	08db      	lsrs	r3, r3, #3
    23d6:	2cff      	cmp	r4, #255	; 0xff
    23d8:	d003      	beq.n	23e2 <__aeabi_d2f+0x96>
    23da:	025b      	lsls	r3, r3, #9
    23dc:	0a5b      	lsrs	r3, r3, #9
    23de:	b2e4      	uxtb	r4, r4
    23e0:	e7e4      	b.n	23ac <__aeabi_d2f+0x60>
    23e2:	2b00      	cmp	r3, #0
    23e4:	d032      	beq.n	244c <__aeabi_d2f+0x100>
    23e6:	2080      	movs	r0, #128	; 0x80
    23e8:	03c0      	lsls	r0, r0, #15
    23ea:	4303      	orrs	r3, r0
    23ec:	025b      	lsls	r3, r3, #9
    23ee:	0a5b      	lsrs	r3, r3, #9
    23f0:	e7dc      	b.n	23ac <__aeabi_d2f+0x60>
    23f2:	0032      	movs	r2, r6
    23f4:	3217      	adds	r2, #23
    23f6:	db14      	blt.n	2422 <__aeabi_d2f+0xd6>
    23f8:	2280      	movs	r2, #128	; 0x80
    23fa:	271e      	movs	r7, #30
    23fc:	0412      	lsls	r2, r2, #16
    23fe:	4313      	orrs	r3, r2
    2400:	1bbf      	subs	r7, r7, r6
    2402:	2f1f      	cmp	r7, #31
    2404:	dc0f      	bgt.n	2426 <__aeabi_d2f+0xda>
    2406:	4a14      	ldr	r2, [pc, #80]	; (2458 <__aeabi_d2f+0x10c>)
    2408:	4694      	mov	ip, r2
    240a:	4464      	add	r4, ip
    240c:	002a      	movs	r2, r5
    240e:	40a5      	lsls	r5, r4
    2410:	002e      	movs	r6, r5
    2412:	40a3      	lsls	r3, r4
    2414:	1e75      	subs	r5, r6, #1
    2416:	41ae      	sbcs	r6, r5
    2418:	40fa      	lsrs	r2, r7
    241a:	4333      	orrs	r3, r6
    241c:	4313      	orrs	r3, r2
    241e:	2600      	movs	r6, #0
    2420:	e7b0      	b.n	2384 <__aeabi_d2f+0x38>
    2422:	2400      	movs	r4, #0
    2424:	e7d5      	b.n	23d2 <__aeabi_d2f+0x86>
    2426:	2202      	movs	r2, #2
    2428:	4252      	negs	r2, r2
    242a:	1b96      	subs	r6, r2, r6
    242c:	001a      	movs	r2, r3
    242e:	40f2      	lsrs	r2, r6
    2430:	2f20      	cmp	r7, #32
    2432:	d009      	beq.n	2448 <__aeabi_d2f+0xfc>
    2434:	4809      	ldr	r0, [pc, #36]	; (245c <__aeabi_d2f+0x110>)
    2436:	4684      	mov	ip, r0
    2438:	4464      	add	r4, ip
    243a:	40a3      	lsls	r3, r4
    243c:	432b      	orrs	r3, r5
    243e:	1e5d      	subs	r5, r3, #1
    2440:	41ab      	sbcs	r3, r5
    2442:	2600      	movs	r6, #0
    2444:	4313      	orrs	r3, r2
    2446:	e79d      	b.n	2384 <__aeabi_d2f+0x38>
    2448:	2300      	movs	r3, #0
    244a:	e7f7      	b.n	243c <__aeabi_d2f+0xf0>
    244c:	2300      	movs	r3, #0
    244e:	e7ad      	b.n	23ac <__aeabi_d2f+0x60>
    2450:	0034      	movs	r4, r6
    2452:	e7bf      	b.n	23d4 <__aeabi_d2f+0x88>
    2454:	fffffc80 	.word	0xfffffc80
    2458:	fffffc82 	.word	0xfffffc82
    245c:	fffffca2 	.word	0xfffffca2

00002460 <__clzsi2>:
    2460:	211c      	movs	r1, #28
    2462:	2301      	movs	r3, #1
    2464:	041b      	lsls	r3, r3, #16
    2466:	4298      	cmp	r0, r3
    2468:	d301      	bcc.n	246e <__clzsi2+0xe>
    246a:	0c00      	lsrs	r0, r0, #16
    246c:	3910      	subs	r1, #16
    246e:	0a1b      	lsrs	r3, r3, #8
    2470:	4298      	cmp	r0, r3
    2472:	d301      	bcc.n	2478 <__clzsi2+0x18>
    2474:	0a00      	lsrs	r0, r0, #8
    2476:	3908      	subs	r1, #8
    2478:	091b      	lsrs	r3, r3, #4
    247a:	4298      	cmp	r0, r3
    247c:	d301      	bcc.n	2482 <__clzsi2+0x22>
    247e:	0900      	lsrs	r0, r0, #4
    2480:	3904      	subs	r1, #4
    2482:	a202      	add	r2, pc, #8	; (adr r2, 248c <__clzsi2+0x2c>)
    2484:	5c10      	ldrb	r0, [r2, r0]
    2486:	1840      	adds	r0, r0, r1
    2488:	4770      	bx	lr
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	02020304 	.word	0x02020304
    2490:	01010101 	.word	0x01010101
	...

0000249c <__libc_init_array>:
    249c:	b570      	push	{r4, r5, r6, lr}
    249e:	4e0d      	ldr	r6, [pc, #52]	; (24d4 <__libc_init_array+0x38>)
    24a0:	4d0d      	ldr	r5, [pc, #52]	; (24d8 <__libc_init_array+0x3c>)
    24a2:	2400      	movs	r4, #0
    24a4:	1bad      	subs	r5, r5, r6
    24a6:	10ad      	asrs	r5, r5, #2
    24a8:	d005      	beq.n	24b6 <__libc_init_array+0x1a>
    24aa:	00a3      	lsls	r3, r4, #2
    24ac:	58f3      	ldr	r3, [r6, r3]
    24ae:	3401      	adds	r4, #1
    24b0:	4798      	blx	r3
    24b2:	42a5      	cmp	r5, r4
    24b4:	d1f9      	bne.n	24aa <__libc_init_array+0xe>
    24b6:	f000 f9cf 	bl	2858 <_init>
    24ba:	4e08      	ldr	r6, [pc, #32]	; (24dc <__libc_init_array+0x40>)
    24bc:	4d08      	ldr	r5, [pc, #32]	; (24e0 <__libc_init_array+0x44>)
    24be:	2400      	movs	r4, #0
    24c0:	1bad      	subs	r5, r5, r6
    24c2:	10ad      	asrs	r5, r5, #2
    24c4:	d005      	beq.n	24d2 <__libc_init_array+0x36>
    24c6:	00a3      	lsls	r3, r4, #2
    24c8:	58f3      	ldr	r3, [r6, r3]
    24ca:	3401      	adds	r4, #1
    24cc:	4798      	blx	r3
    24ce:	42a5      	cmp	r5, r4
    24d0:	d1f9      	bne.n	24c6 <__libc_init_array+0x2a>
    24d2:	bd70      	pop	{r4, r5, r6, pc}
    24d4:	00002864 	.word	0x00002864
    24d8:	00002864 	.word	0x00002864
    24dc:	00002864 	.word	0x00002864
    24e0:	0000286c 	.word	0x0000286c

000024e4 <memset>:
    24e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24e6:	0783      	lsls	r3, r0, #30
    24e8:	d043      	beq.n	2572 <memset+0x8e>
    24ea:	1e54      	subs	r4, r2, #1
    24ec:	2a00      	cmp	r2, #0
    24ee:	d03f      	beq.n	2570 <memset+0x8c>
    24f0:	b2ce      	uxtb	r6, r1
    24f2:	0002      	movs	r2, r0
    24f4:	2503      	movs	r5, #3
    24f6:	e002      	b.n	24fe <memset+0x1a>
    24f8:	001a      	movs	r2, r3
    24fa:	3c01      	subs	r4, #1
    24fc:	d338      	bcc.n	2570 <memset+0x8c>
    24fe:	1c53      	adds	r3, r2, #1
    2500:	7016      	strb	r6, [r2, #0]
    2502:	422b      	tst	r3, r5
    2504:	d1f8      	bne.n	24f8 <memset+0x14>
    2506:	2c03      	cmp	r4, #3
    2508:	d92a      	bls.n	2560 <memset+0x7c>
    250a:	22ff      	movs	r2, #255	; 0xff
    250c:	400a      	ands	r2, r1
    250e:	0215      	lsls	r5, r2, #8
    2510:	4315      	orrs	r5, r2
    2512:	042a      	lsls	r2, r5, #16
    2514:	4315      	orrs	r5, r2
    2516:	2c0f      	cmp	r4, #15
    2518:	d914      	bls.n	2544 <memset+0x60>
    251a:	0027      	movs	r7, r4
    251c:	001a      	movs	r2, r3
    251e:	3f10      	subs	r7, #16
    2520:	093e      	lsrs	r6, r7, #4
    2522:	3601      	adds	r6, #1
    2524:	0136      	lsls	r6, r6, #4
    2526:	199e      	adds	r6, r3, r6
    2528:	6015      	str	r5, [r2, #0]
    252a:	6055      	str	r5, [r2, #4]
    252c:	6095      	str	r5, [r2, #8]
    252e:	60d5      	str	r5, [r2, #12]
    2530:	3210      	adds	r2, #16
    2532:	4296      	cmp	r6, r2
    2534:	d1f8      	bne.n	2528 <memset+0x44>
    2536:	220f      	movs	r2, #15
    2538:	4397      	bics	r7, r2
    253a:	3710      	adds	r7, #16
    253c:	19db      	adds	r3, r3, r7
    253e:	4014      	ands	r4, r2
    2540:	2c03      	cmp	r4, #3
    2542:	d90d      	bls.n	2560 <memset+0x7c>
    2544:	001a      	movs	r2, r3
    2546:	1f27      	subs	r7, r4, #4
    2548:	08be      	lsrs	r6, r7, #2
    254a:	3601      	adds	r6, #1
    254c:	00b6      	lsls	r6, r6, #2
    254e:	199e      	adds	r6, r3, r6
    2550:	c220      	stmia	r2!, {r5}
    2552:	42b2      	cmp	r2, r6
    2554:	d1fc      	bne.n	2550 <memset+0x6c>
    2556:	2203      	movs	r2, #3
    2558:	4397      	bics	r7, r2
    255a:	3704      	adds	r7, #4
    255c:	19db      	adds	r3, r3, r7
    255e:	4014      	ands	r4, r2
    2560:	2c00      	cmp	r4, #0
    2562:	d005      	beq.n	2570 <memset+0x8c>
    2564:	b2c9      	uxtb	r1, r1
    2566:	191c      	adds	r4, r3, r4
    2568:	7019      	strb	r1, [r3, #0]
    256a:	3301      	adds	r3, #1
    256c:	429c      	cmp	r4, r3
    256e:	d1fb      	bne.n	2568 <memset+0x84>
    2570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2572:	0014      	movs	r4, r2
    2574:	0003      	movs	r3, r0
    2576:	e7c6      	b.n	2506 <memset+0x22>

00002578 <register_fini>:
    2578:	4b03      	ldr	r3, [pc, #12]	; (2588 <register_fini+0x10>)
    257a:	b510      	push	{r4, lr}
    257c:	2b00      	cmp	r3, #0
    257e:	d002      	beq.n	2586 <register_fini+0xe>
    2580:	4802      	ldr	r0, [pc, #8]	; (258c <register_fini+0x14>)
    2582:	f000 f805 	bl	2590 <atexit>
    2586:	bd10      	pop	{r4, pc}
    2588:	00000000 	.word	0x00000000
    258c:	000025a1 	.word	0x000025a1

00002590 <atexit>:
    2590:	b510      	push	{r4, lr}
    2592:	0001      	movs	r1, r0
    2594:	2300      	movs	r3, #0
    2596:	2200      	movs	r2, #0
    2598:	2000      	movs	r0, #0
    259a:	f000 f81b 	bl	25d4 <__register_exitproc>
    259e:	bd10      	pop	{r4, pc}

000025a0 <__libc_fini_array>:
    25a0:	b570      	push	{r4, r5, r6, lr}
    25a2:	4b09      	ldr	r3, [pc, #36]	; (25c8 <__libc_fini_array+0x28>)
    25a4:	4c09      	ldr	r4, [pc, #36]	; (25cc <__libc_fini_array+0x2c>)
    25a6:	1ae4      	subs	r4, r4, r3
    25a8:	10a4      	asrs	r4, r4, #2
    25aa:	d009      	beq.n	25c0 <__libc_fini_array+0x20>
    25ac:	4a08      	ldr	r2, [pc, #32]	; (25d0 <__libc_fini_array+0x30>)
    25ae:	18a5      	adds	r5, r4, r2
    25b0:	00ad      	lsls	r5, r5, #2
    25b2:	18ed      	adds	r5, r5, r3
    25b4:	682b      	ldr	r3, [r5, #0]
    25b6:	3c01      	subs	r4, #1
    25b8:	4798      	blx	r3
    25ba:	3d04      	subs	r5, #4
    25bc:	2c00      	cmp	r4, #0
    25be:	d1f9      	bne.n	25b4 <__libc_fini_array+0x14>
    25c0:	f000 f954 	bl	286c <_fini>
    25c4:	bd70      	pop	{r4, r5, r6, pc}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	00002878 	.word	0x00002878
    25cc:	0000287c 	.word	0x0000287c
    25d0:	3fffffff 	.word	0x3fffffff

000025d4 <__register_exitproc>:
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25d6:	46de      	mov	lr, fp
    25d8:	469b      	mov	fp, r3
    25da:	4b31      	ldr	r3, [pc, #196]	; (26a0 <__register_exitproc+0xcc>)
    25dc:	4645      	mov	r5, r8
    25de:	681c      	ldr	r4, [r3, #0]
    25e0:	23a4      	movs	r3, #164	; 0xa4
    25e2:	464e      	mov	r6, r9
    25e4:	4657      	mov	r7, sl
    25e6:	005b      	lsls	r3, r3, #1
    25e8:	b5e0      	push	{r5, r6, r7, lr}
    25ea:	0005      	movs	r5, r0
    25ec:	58e0      	ldr	r0, [r4, r3]
    25ee:	000e      	movs	r6, r1
    25f0:	4690      	mov	r8, r2
    25f2:	2800      	cmp	r0, #0
    25f4:	d04b      	beq.n	268e <__register_exitproc+0xba>
    25f6:	6843      	ldr	r3, [r0, #4]
    25f8:	2b1f      	cmp	r3, #31
    25fa:	dc0d      	bgt.n	2618 <__register_exitproc+0x44>
    25fc:	1c5c      	adds	r4, r3, #1
    25fe:	2d00      	cmp	r5, #0
    2600:	d121      	bne.n	2646 <__register_exitproc+0x72>
    2602:	3302      	adds	r3, #2
    2604:	009b      	lsls	r3, r3, #2
    2606:	6044      	str	r4, [r0, #4]
    2608:	501e      	str	r6, [r3, r0]
    260a:	2000      	movs	r0, #0
    260c:	bc3c      	pop	{r2, r3, r4, r5}
    260e:	4690      	mov	r8, r2
    2610:	4699      	mov	r9, r3
    2612:	46a2      	mov	sl, r4
    2614:	46ab      	mov	fp, r5
    2616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2618:	4b22      	ldr	r3, [pc, #136]	; (26a4 <__register_exitproc+0xd0>)
    261a:	2b00      	cmp	r3, #0
    261c:	d03c      	beq.n	2698 <__register_exitproc+0xc4>
    261e:	20c8      	movs	r0, #200	; 0xc8
    2620:	0040      	lsls	r0, r0, #1
    2622:	e000      	b.n	2626 <__register_exitproc+0x52>
    2624:	bf00      	nop
    2626:	2800      	cmp	r0, #0
    2628:	d036      	beq.n	2698 <__register_exitproc+0xc4>
    262a:	22a4      	movs	r2, #164	; 0xa4
    262c:	2300      	movs	r3, #0
    262e:	0052      	lsls	r2, r2, #1
    2630:	58a1      	ldr	r1, [r4, r2]
    2632:	6043      	str	r3, [r0, #4]
    2634:	6001      	str	r1, [r0, #0]
    2636:	50a0      	str	r0, [r4, r2]
    2638:	3240      	adds	r2, #64	; 0x40
    263a:	5083      	str	r3, [r0, r2]
    263c:	3204      	adds	r2, #4
    263e:	5083      	str	r3, [r0, r2]
    2640:	2401      	movs	r4, #1
    2642:	2d00      	cmp	r5, #0
    2644:	d0dd      	beq.n	2602 <__register_exitproc+0x2e>
    2646:	009a      	lsls	r2, r3, #2
    2648:	4691      	mov	r9, r2
    264a:	4481      	add	r9, r0
    264c:	4642      	mov	r2, r8
    264e:	2188      	movs	r1, #136	; 0x88
    2650:	464f      	mov	r7, r9
    2652:	507a      	str	r2, [r7, r1]
    2654:	22c4      	movs	r2, #196	; 0xc4
    2656:	0052      	lsls	r2, r2, #1
    2658:	4690      	mov	r8, r2
    265a:	4480      	add	r8, r0
    265c:	4642      	mov	r2, r8
    265e:	3987      	subs	r1, #135	; 0x87
    2660:	4099      	lsls	r1, r3
    2662:	6812      	ldr	r2, [r2, #0]
    2664:	468a      	mov	sl, r1
    2666:	430a      	orrs	r2, r1
    2668:	4694      	mov	ip, r2
    266a:	4642      	mov	r2, r8
    266c:	4661      	mov	r1, ip
    266e:	6011      	str	r1, [r2, #0]
    2670:	2284      	movs	r2, #132	; 0x84
    2672:	4649      	mov	r1, r9
    2674:	465f      	mov	r7, fp
    2676:	0052      	lsls	r2, r2, #1
    2678:	508f      	str	r7, [r1, r2]
    267a:	2d02      	cmp	r5, #2
    267c:	d1c1      	bne.n	2602 <__register_exitproc+0x2e>
    267e:	0002      	movs	r2, r0
    2680:	4655      	mov	r5, sl
    2682:	328d      	adds	r2, #141	; 0x8d
    2684:	32ff      	adds	r2, #255	; 0xff
    2686:	6811      	ldr	r1, [r2, #0]
    2688:	430d      	orrs	r5, r1
    268a:	6015      	str	r5, [r2, #0]
    268c:	e7b9      	b.n	2602 <__register_exitproc+0x2e>
    268e:	0020      	movs	r0, r4
    2690:	304d      	adds	r0, #77	; 0x4d
    2692:	30ff      	adds	r0, #255	; 0xff
    2694:	50e0      	str	r0, [r4, r3]
    2696:	e7ae      	b.n	25f6 <__register_exitproc+0x22>
    2698:	2001      	movs	r0, #1
    269a:	4240      	negs	r0, r0
    269c:	e7b6      	b.n	260c <__register_exitproc+0x38>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002854 	.word	0x00002854
    26a4:	00000000 	.word	0x00000000

000026a8 <spi2MOSI>:
    26a8:	0c000002 00000200                                .....

000026ad <spi2SCK>:
    26ad:	0e000002 00000200                                .....

000026b2 <spi2MISO>:
    26b2:	0d000002 8d200000                                ......

000026b8 <lookupTable.12446>:
    26b8:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    26c8:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    26d8:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    26e8:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    26f8:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    2708:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    2718:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    2728:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    2738:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    2748:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    2758:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2768:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2778:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    2788:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    2798:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    27a8:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    27b8:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    27c8:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    27d8:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    27e8:	000f048e                                ....

000027ec <senseBatPin>:
    27ec:	06000000 01000106                                .....

000027f1 <senseAPin>:
    27f1:	03010001 0100010b                                .....

000027f6 <senseBPin>:
    27f6:	02010001 0000000a                                .....

000027fb <senseCPin>:
    27fb:	03000000 00000001                                .....

00002800 <senseDPin>:
    2800:	02000000 00000000                                .....

00002805 <analogAccelPin>:
    2805:	07000000 00000207                                .....

0000280a <spi2MOSI>:
    280a:	0c000002 00000200                                .....

0000280f <spi2SCK>:
    280f:	0e000002 001ea400 001d6400 001d6400     .........d...d..
    281f:	001d6000 001e7c00 001e7c00 001e6e00     .`...|...|...n..
    282f:	001d6000 001e7c00 001e6e00 001e7c00     .`...|...n...|..
    283f:	001d6000 001e8400 001e8400 001e8400     .`..............
    284f:	00208800 00001000                                .. ..

00002854 <_global_impure_ptr>:
    2854:	20000010                                ... 

00002858 <_init>:
    2858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    285e:	bc08      	pop	{r3}
    2860:	469e      	mov	lr, r3
    2862:	4770      	bx	lr

00002864 <__init_array_start>:
    2864:	00002579 	.word	0x00002579

00002868 <__frame_dummy_init_array_entry>:
    2868:	000000dd                                ....

0000286c <_fini>:
    286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2872:	bc08      	pop	{r3}
    2874:	469e      	mov	lr, r3
    2876:	4770      	bx	lr

00002878 <__fini_array_start>:
    2878:	000000b5 	.word	0x000000b5
