
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006964  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006964  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006e20  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006fd0  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002276c  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002910  00000000  00000000  00042c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000286f  00000000  00000000  000455a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000438  00000000  00000000  00047e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000da8  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016369  00000000  00000000  00048ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009cac  00000000  00000000  0005f359  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000728e7  00000000  00000000  00069005  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000116c  00000000  00000000  000db8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001021 	.word	0x00001021
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010c1 	.word	0x000010c1
      90:	00001129 	.word	0x00001129
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	00006964 	.word	0x00006964

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	00006964 	.word	0x00006964
     10c:	00006964 	.word	0x00006964
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006964 	.word	0x00006964
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000064f1 	.word	0x000064f1
     1d0:	00000ab1 	.word	0x00000ab1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	00002979 	.word	0x00002979
     21c:	200004d0 	.word	0x200004d0

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00002979 	.word	0x00002979
     250:	200004d0 	.word	0x200004d0

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	00002979 	.word	0x00002979
     2c8:	200004d0 	.word	0x200004d0

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	00002979 	.word	0x00002979
     33c:	200004d0 	.word	0x200004d0

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	00002979 	.word	0x00002979
     3ac:	200004d0 	.word	0x200004d0

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	00002979 	.word	0x00002979
     418:	200004d0 	.word	0x200004d0

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	0212      	lsls	r2, r2, #8
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	000066f4 	.word	0x000066f4
     4c8:	00000d19 	.word	0x00000d19
     4cc:	00000d85 	.word	0x00000d85

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4d2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4d6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4d8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4da:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4dc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4de:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     4e0:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     4e2:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	8905      	ldrh	r5, [r0, #8]
     4e6:	6903      	ldr	r3, [r0, #16]
     4e8:	022d      	lsls	r5, r5, #8
     4ea:	1b5b      	subs	r3, r3, r5
     4ec:	2500      	movs	r5, #0
     4ee:	9302      	str	r3, [sp, #8]
     4f0:	17db      	asrs	r3, r3, #31
     4f2:	9303      	str	r3, [sp, #12]
     4f4:	8940      	ldrh	r0, [r0, #10]
     4f6:	4f1f      	ldr	r7, [pc, #124]	; (574 <ConvertPressureTemperature+0xa4>)
     4f8:	9a02      	ldr	r2, [sp, #8]
     4fa:	0029      	movs	r1, r5
     4fc:	47b8      	blx	r7
     4fe:	23fa      	movs	r3, #250	; 0xfa
     500:	0249      	lsls	r1, r1, #9
     502:	0dc0      	lsrs	r0, r0, #23
     504:	4308      	orrs	r0, r1
     506:	00db      	lsls	r3, r3, #3
     508:	18c0      	adds	r0, r0, r3
     50a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	9b03      	ldr	r3, [sp, #12]
     510:	0030      	movs	r0, r6
     512:	0029      	movs	r1, r5
     514:	47b8      	blx	r7
     516:	060b      	lsls	r3, r1, #24
     518:	120f      	asrs	r7, r1, #8
     51a:	0a06      	lsrs	r6, r0, #8
     51c:	9900      	ldr	r1, [sp, #0]
     51e:	431e      	orrs	r6, r3
     520:	03ca      	lsls	r2, r1, #15
     522:	002b      	movs	r3, r5
     524:	0030      	movs	r0, r6
     526:	0039      	movs	r1, r7
     528:	4e12      	ldr	r6, [pc, #72]	; (574 <ConvertPressureTemperature+0xa4>)
     52a:	1880      	adds	r0, r0, r2
     52c:	4159      	adcs	r1, r3
     52e:	68e2      	ldr	r2, [r4, #12]
     530:	47b0      	blx	r6
     532:	02cb      	lsls	r3, r1, #11
     534:	0d42      	lsrs	r2, r0, #21
     536:	431a      	orrs	r2, r3
     538:	154b      	asrs	r3, r1, #21
     53a:	9200      	str	r2, [sp, #0]
     53c:	9301      	str	r3, [sp, #4]
     53e:	9a02      	ldr	r2, [sp, #8]
     540:	9b03      	ldr	r3, [sp, #12]
     542:	4e0c      	ldr	r6, [pc, #48]	; (574 <ConvertPressureTemperature+0xa4>)
     544:	9805      	ldr	r0, [sp, #20]
     546:	0029      	movs	r1, r5
     548:	47b0      	blx	r6
     54a:	064b      	lsls	r3, r1, #25
     54c:	09c6      	lsrs	r6, r0, #7
     54e:	431e      	orrs	r6, r3
     550:	002b      	movs	r3, r5
     552:	11cf      	asrs	r7, r1, #7
     554:	9904      	ldr	r1, [sp, #16]
     556:	040a      	lsls	r2, r1, #16
     558:	1992      	adds	r2, r2, r6
     55a:	417b      	adcs	r3, r7
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a80      	subs	r0, r0, r2
     562:	4199      	sbcs	r1, r3
     564:	000a      	movs	r2, r1
     566:	0453      	lsls	r3, r2, #17
     568:	0bc2      	lsrs	r2, r0, #15
     56a:	431a      	orrs	r2, r3
     56c:	61e2      	str	r2, [r4, #28]

}
     56e:	b007      	add	sp, #28
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	00003dc9 	.word	0x00003dc9

00000578 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     578:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     57c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57e:	69c0      	ldr	r0, [r0, #28]
     580:	4798      	blx	r3
     582:	4d0e      	ldr	r5, [pc, #56]	; (5bc <paToFeetNOAA+0x44>)
     584:	2200      	movs	r2, #0
     586:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <paToFeetNOAA+0x48>)
     588:	47a8      	blx	r5
     58a:	2200      	movs	r2, #0
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <paToFeetNOAA+0x4c>)
     58e:	47a8      	blx	r5
     590:	4a0d      	ldr	r2, [pc, #52]	; (5c8 <paToFeetNOAA+0x50>)
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <paToFeetNOAA+0x54>)
     594:	4d0e      	ldr	r5, [pc, #56]	; (5d0 <paToFeetNOAA+0x58>)
     596:	47a8      	blx	r5
     598:	4d0e      	ldr	r5, [pc, #56]	; (5d4 <paToFeetNOAA+0x5c>)
     59a:	0002      	movs	r2, r0
     59c:	000b      	movs	r3, r1
     59e:	2000      	movs	r0, #0
     5a0:	490d      	ldr	r1, [pc, #52]	; (5d8 <paToFeetNOAA+0x60>)
     5a2:	47a8      	blx	r5
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <paToFeetNOAA+0x64>)
     5a6:	4d0e      	ldr	r5, [pc, #56]	; (5e0 <paToFeetNOAA+0x68>)
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <paToFeetNOAA+0x6c>)
     5aa:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ae:	62a0      	str	r0, [r4, #40]	; 0x28
     5b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5b2:	4798      	blx	r3
     5b4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	000060dd 	.word	0x000060dd
     5bc:	00004c4d 	.word	0x00004c4d
     5c0:	40240000 	.word	0x40240000
     5c4:	408faa00 	.word	0x408faa00
     5c8:	e279dd3c 	.word	0xe279dd3c
     5cc:	3fc85b39 	.word	0x3fc85b39
     5d0:	00002aa5 	.word	0x00002aa5
     5d4:	00005989 	.word	0x00005989
     5d8:	3ff00000 	.word	0x3ff00000
     5dc:	9999999a 	.word	0x9999999a
     5e0:	00005495 	.word	0x00005495
     5e4:	4101beb3 	.word	0x4101beb3
     5e8:	00003e51 	.word	0x00003e51

000005ec <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	27a2      	movs	r7, #162	; 0xa2
     5f0:	b087      	sub	sp, #28
     5f2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5f4:	2096      	movs	r0, #150	; 0x96
     5f6:	4c2b      	ldr	r4, [pc, #172]	; (6a4 <readMS5803Coefficients+0xb8>)
     5f8:	0080      	lsls	r0, r0, #2
     5fa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5fc:	2096      	movs	r0, #150	; 0x96
     5fe:	0080      	lsls	r0, r0, #2
     600:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     604:	4c28      	ldr	r4, [pc, #160]	; (6a8 <readMS5803Coefficients+0xbc>)
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <readMS5803Coefficients+0xc0>)
     608:	0212      	lsls	r2, r2, #8
     60a:	615a      	str	r2, [r3, #20]
     60c:	7863      	ldrb	r3, [r4, #1]
     60e:	7820      	ldrb	r0, [r4, #0]
     610:	78a2      	ldrb	r2, [r4, #2]
     612:	021b      	lsls	r3, r3, #8
     614:	4303      	orrs	r3, r0
     616:	0412      	lsls	r2, r2, #16
     618:	0019      	movs	r1, r3
     61a:	0013      	movs	r3, r2
     61c:	430b      	orrs	r3, r1
     61e:	79a1      	ldrb	r1, [r4, #6]
     620:	7966      	ldrb	r6, [r4, #5]
     622:	0209      	lsls	r1, r1, #8
     624:	4331      	orrs	r1, r6
     626:	0008      	movs	r0, r1
     628:	79e1      	ldrb	r1, [r4, #7]
     62a:	78e2      	ldrb	r2, [r4, #3]
     62c:	0409      	lsls	r1, r1, #16
     62e:	4301      	orrs	r1, r0
     630:	7a20      	ldrb	r0, [r4, #8]
     632:	7a66      	ldrb	r6, [r4, #9]
     634:	0612      	lsls	r2, r2, #24
     636:	0600      	lsls	r0, r0, #24
     638:	4308      	orrs	r0, r1
     63a:	431a      	orrs	r2, r3
     63c:	9700      	str	r7, [sp, #0]
     63e:	7923      	ldrb	r3, [r4, #4]
     640:	0031      	movs	r1, r6
     642:	4d1b      	ldr	r5, [pc, #108]	; (6b0 <readMS5803Coefficients+0xc4>)
     644:	9003      	str	r0, [sp, #12]
     646:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	0020      	movs	r0, r4
     64c:	7aa1      	ldrb	r1, [r4, #10]
     64e:	7b24      	ldrb	r4, [r4, #12]
     650:	021b      	lsls	r3, r3, #8
     652:	430b      	orrs	r3, r1
     654:	0424      	lsls	r4, r4, #16
     656:	001a      	movs	r2, r3
     658:	0023      	movs	r3, r4
     65a:	7b44      	ldrb	r4, [r0, #13]
     65c:	7b85      	ldrb	r5, [r0, #14]
     65e:	4313      	orrs	r3, r2
     660:	0624      	lsls	r4, r4, #24
     662:	431c      	orrs	r4, r3
     664:	0022      	movs	r2, r4
     666:	002b      	movs	r3, r5
     668:	9404      	str	r4, [sp, #16]
     66a:	0031      	movs	r1, r6
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <readMS5803Coefficients+0xc8>)
     66e:	9803      	ldr	r0, [sp, #12]
     670:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     672:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     674:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     676:	9a04      	ldr	r2, [sp, #16]
     678:	9803      	ldr	r0, [sp, #12]
     67a:	0031      	movs	r1, r6
     67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <readMS5803Coefficients+0xc8>)
     67e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	2280      	movs	r2, #128	; 0x80
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <readMS5803Coefficients+0xc0>)
     684:	0212      	lsls	r2, r2, #8
     686:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     688:	9b05      	ldr	r3, [sp, #20]
     68a:	021d      	lsls	r5, r3, #8
     68c:	9b02      	ldr	r3, [sp, #8]
     68e:	4328      	orrs	r0, r5
     690:	8018      	strh	r0, [r3, #0]
     692:	1cbb      	adds	r3, r7, #2
     694:	b2df      	uxtb	r7, r3
     696:	9b02      	ldr	r3, [sp, #8]
     698:	3302      	adds	r3, #2
     69a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     69c:	2fae      	cmp	r7, #174	; 0xae
     69e:	d1a9      	bne.n	5f4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6a0:	b007      	add	sp, #28
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	00000fc1 	.word	0x00000fc1
     6a8:	000066f4 	.word	0x000066f4
     6ac:	41004400 	.word	0x41004400
     6b0:	00000d19 	.word	0x00000d19
     6b4:	00000d85 	.word	0x00000d85

000006b8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6bc:	231e      	movs	r3, #30
     6be:	491a      	ldr	r1, [pc, #104]	; (728 <initMS5803Barometer+0x70>)
     6c0:	4d1a      	ldr	r5, [pc, #104]	; (72c <initMS5803Barometer+0x74>)
     6c2:	0236      	lsls	r6, r6, #8
     6c4:	616e      	str	r6, [r5, #20]
     6c6:	9300      	str	r3, [sp, #0]
     6c8:	784b      	ldrb	r3, [r1, #1]
     6ca:	780a      	ldrb	r2, [r1, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	4313      	orrs	r3, r2
     6d0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6d2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d4:	0412      	lsls	r2, r2, #16
     6d6:	0018      	movs	r0, r3
     6d8:	0013      	movs	r3, r2
     6da:	78ca      	ldrb	r2, [r1, #3]
     6dc:	4303      	orrs	r3, r0
     6de:	0612      	lsls	r2, r2, #24
     6e0:	1d4f      	adds	r7, r1, #5
     6e2:	431a      	orrs	r2, r3
     6e4:	7948      	ldrb	r0, [r1, #5]
     6e6:	790b      	ldrb	r3, [r1, #4]
     6e8:	7989      	ldrb	r1, [r1, #6]
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	4301      	orrs	r1, r0
     6ee:	78b8      	ldrb	r0, [r7, #2]
     6f0:	0400      	lsls	r0, r0, #16
     6f2:	4301      	orrs	r1, r0
     6f4:	78f8      	ldrb	r0, [r7, #3]
     6f6:	0600      	lsls	r0, r0, #24
     6f8:	4308      	orrs	r0, r1
     6fa:	7939      	ldrb	r1, [r7, #4]
     6fc:	4f0c      	ldr	r7, [pc, #48]	; (730 <initMS5803Barometer+0x78>)
     6fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     700:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     702:	20c8      	movs	r0, #200	; 0xc8
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <initMS5803Barometer+0x7c>)
     706:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     708:	0020      	movs	r0, r4
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <initMS5803Barometer+0x80>)
     70c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     70e:	23fa      	movs	r3, #250	; 0xfa
     710:	011b      	lsls	r3, r3, #4
     712:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <initMS5803Barometer+0x84>)
     716:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <initMS5803Barometer+0x88>)
     71a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     71c:	4b09      	ldr	r3, [pc, #36]	; (744 <initMS5803Barometer+0x8c>)
     71e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     720:	23fa      	movs	r3, #250	; 0xfa
     722:	00db      	lsls	r3, r3, #3
     724:	6163      	str	r3, [r4, #20]




}
     726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     728:	000066f4 	.word	0x000066f4
     72c:	41004400 	.word	0x41004400
     730:	00000d19 	.word	0x00000d19
     734:	00000ff1 	.word	0x00000ff1
     738:	000005ed 	.word	0x000005ed
     73c:	00002710 	.word	0x00002710
     740:	0041c9fe 	.word	0x0041c9fe
     744:	007ffae4 	.word	0x007ffae4

00000748 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     748:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     74c:	4ac7      	ldr	r2, [pc, #796]	; (a6c <init+0x324>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     750:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     752:	2401      	movs	r4, #1
     754:	438b      	bics	r3, r1
     756:	391c      	subs	r1, #28
     758:	430b      	orrs	r3, r1
     75a:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     75c:	4ac4      	ldr	r2, [pc, #784]	; (a70 <init+0x328>)
     75e:	3106      	adds	r1, #6
     760:	6993      	ldr	r3, [r2, #24]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     762:	2610      	movs	r6, #16
     764:	430b      	orrs	r3, r1
     766:	6193      	str	r3, [r2, #24]

    SystemInit();
     768:	4bc2      	ldr	r3, [pc, #776]	; (a74 <init+0x32c>)
     76a:	4798      	blx	r3
    GclkInit();
     76c:	4bc2      	ldr	r3, [pc, #776]	; (a78 <init+0x330>)
     76e:	4798      	blx	r3
    RtcInit();
     770:	4bc2      	ldr	r3, [pc, #776]	; (a7c <init+0x334>)
     772:	4798      	blx	r3
    delayInit();
     774:	4bc2      	ldr	r3, [pc, #776]	; (a80 <init+0x338>)
     776:	4798      	blx	r3
    adcInit();
     778:	4bc2      	ldr	r3, [pc, #776]	; (a84 <init+0x33c>)
     77a:	4798      	blx	r3
    dmaInit();
     77c:	4bc2      	ldr	r3, [pc, #776]	; (a88 <init+0x340>)
     77e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     780:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     782:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     784:	4bc1      	ldr	r3, [pc, #772]	; (a8c <init+0x344>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     786:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     788:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78a:	5858      	ldr	r0, [r3, r1]
     78c:	4ac0      	ldr	r2, [pc, #768]	; (a90 <init+0x348>)
     78e:	4002      	ands	r2, r0
     790:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     792:	4bc0      	ldr	r3, [pc, #768]	; (a94 <init+0x34c>)
     794:	0019      	movs	r1, r3
     796:	3154      	adds	r1, #84	; 0x54
     798:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     79a:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	0352      	lsls	r2, r2, #13
     7a4:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7a6:	220f      	movs	r2, #15
     7a8:	3033      	adds	r0, #51	; 0x33
     7aa:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ac:	001d      	movs	r5, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7ae:	4391      	bics	r1, r2
     7b0:	4321      	orrs	r1, r4
     7b2:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	7cc1      	ldrb	r1, [r0, #19]
     7b6:	35c3      	adds	r5, #195	; 0xc3
     7b8:	4321      	orrs	r1, r4
     7ba:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7bc:	0019      	movs	r1, r3
     7be:	31b1      	adds	r1, #177	; 0xb1
     7c0:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c2:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c4:	4010      	ands	r0, r2
     7c6:	4330      	orrs	r0, r6
     7c8:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ca:	7828      	ldrb	r0, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7cc:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ce:	4320      	orrs	r0, r4
     7d0:	7028      	strb	r0, [r5, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d2:	7808      	ldrb	r0, [r1, #0]
     7d4:	4010      	ands	r0, r2
     7d6:	4330      	orrs	r0, r6
     7d8:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	7828      	ldrb	r0, [r5, #0]
     7dc:	4320      	orrs	r0, r4
     7de:	7028      	strb	r0, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e0:	7d28      	ldrb	r0, [r5, #20]
     7e2:	43a0      	bics	r0, r4
     7e4:	7528      	strb	r0, [r5, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e6:	2080      	movs	r0, #128	; 0x80
     7e8:	0400      	lsls	r0, r0, #16
     7ea:	9703      	str	r7, [sp, #12]
     7ec:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7ee:	2094      	movs	r0, #148	; 0x94
     7f0:	4684      	mov	ip, r0
     7f2:	2580      	movs	r5, #128	; 0x80
     7f4:	449c      	add	ip, r3
     7f6:	4660      	mov	r0, ip
     7f8:	042d      	lsls	r5, r5, #16
     7fa:	6005      	str	r5, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	001d      	movs	r5, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7fe:	7808      	ldrb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	35c2      	adds	r5, #194	; 0xc2

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     802:	4390      	bics	r0, r2
     804:	4320      	orrs	r0, r4
     806:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     808:	7828      	ldrb	r0, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     80a:	2702      	movs	r7, #2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80c:	4320      	orrs	r0, r4
     80e:	7028      	strb	r0, [r5, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	7808      	ldrb	r0, [r1, #0]
     812:	4390      	bics	r0, r2
     814:	4320      	orrs	r0, r4
     816:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     818:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81a:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	4321      	orrs	r1, r4
     820:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     822:	7801      	ldrb	r1, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	3d7f      	subs	r5, #127	; 0x7f
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	43a1      	bics	r1, r4
     828:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82a:	2180      	movs	r1, #128	; 0x80
     82c:	9803      	ldr	r0, [sp, #12]
     82e:	03c9      	lsls	r1, r1, #15
     830:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     832:	2080      	movs	r0, #128	; 0x80
     834:	4661      	mov	r1, ip
     836:	03c0      	lsls	r0, r0, #15
     838:	6008      	str	r0, [r1, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     83a:	0018      	movs	r0, r3
     83c:	3031      	adds	r0, #49	; 0x31
     83e:	7801      	ldrb	r1, [r0, #0]
     840:	4011      	ands	r1, r2
     842:	430e      	orrs	r6, r1
     844:	7006      	strb	r6, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     846:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     848:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84a:	4321      	orrs	r1, r4
     84c:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84e:	7da9      	ldrb	r1, [r5, #22]
     850:	3505      	adds	r5, #5
     852:	43a1      	bics	r1, r4
     854:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     856:	2180      	movs	r1, #128	; 0x80
     858:	0489      	lsls	r1, r1, #18
     85a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85c:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     85e:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     860:	3649      	adds	r6, #73	; 0x49

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     862:	4391      	bics	r1, r2
     864:	4321      	orrs	r1, r4
     866:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     868:	7c41      	ldrb	r1, [r0, #17]
     86a:	3011      	adds	r0, #17
     86c:	4321      	orrs	r1, r4
     86e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     870:	7d81      	ldrb	r1, [r0, #22]
     872:	43a1      	bics	r1, r4
     874:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     876:	2180      	movs	r1, #128	; 0x80
     878:	0449      	lsls	r1, r1, #17
     87a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     87c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87e:	7829      	ldrb	r1, [r5, #0]
     880:	43a1      	bics	r1, r4
     882:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     884:	2180      	movs	r1, #128	; 0x80
     886:	0049      	lsls	r1, r1, #1
     888:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88a:	7831      	ldrb	r1, [r6, #0]
     88c:	43a1      	bics	r1, r4
     88e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     890:	2180      	movs	r1, #128	; 0x80
     892:	0089      	lsls	r1, r1, #2
     894:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     896:	0019      	movs	r1, r3
     898:	314b      	adds	r1, #75	; 0x4b
     89a:	7808      	ldrb	r0, [r1, #0]
     89c:	43a0      	bics	r0, r4
     89e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8a0:	7808      	ldrb	r0, [r1, #0]
     8a2:	4338      	orrs	r0, r7
     8a4:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a6:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a8:	371e      	adds	r7, #30
     8aa:	46bc      	mov	ip, r7


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8ac:	0100      	lsls	r0, r0, #4
     8ae:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8b0:	4879      	ldr	r0, [pc, #484]	; (a98 <init+0x350>)
     8b2:	7800      	ldrb	r0, [r0, #0]
     8b4:	4010      	ands	r0, r2
     8b6:	4338      	orrs	r0, r7
     8b8:	4f77      	ldr	r7, [pc, #476]	; (a98 <init+0x350>)
     8ba:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8bc:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8be:	4667      	mov	r7, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c0:	4320      	orrs	r0, r4
     8c2:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8c4:	0018      	movs	r0, r3
     8c6:	3034      	adds	r0, #52	; 0x34
     8c8:	7801      	ldrb	r1, [r0, #0]
     8ca:	4011      	ands	r1, r2
     8cc:	4339      	orrs	r1, r7
     8ce:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d0:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d2:	3f1e      	subs	r7, #30
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d4:	4321      	orrs	r1, r4
     8d6:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d8:	2602      	movs	r6, #2
     8da:	7801      	ldrb	r1, [r0, #0]
     8dc:	4391      	bics	r1, r2
     8de:	4331      	orrs	r1, r6
     8e0:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e2:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e4:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e6:	4321      	orrs	r1, r4
     8e8:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	7801      	ldrb	r1, [r0, #0]
     8ec:	001e      	movs	r6, r3
     8ee:	43a1      	bics	r1, r4
     8f0:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f2:	2180      	movs	r1, #128	; 0x80
     8f4:	9803      	ldr	r0, [sp, #12]
     8f6:	00c9      	lsls	r1, r1, #3
     8f8:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8fa:	0018      	movs	r0, r3
     8fc:	3098      	adds	r0, #152	; 0x98
     8fe:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     900:	78a8      	ldrb	r0, [r5, #2]
     902:	3651      	adds	r6, #81	; 0x51
     904:	43a0      	bics	r0, r4
     906:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     908:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     90a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     90c:	7a29      	ldrb	r1, [r5, #8]
     90e:	43a1      	bics	r1, r4
     910:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     912:	2180      	movs	r1, #128	; 0x80
     914:	0249      	lsls	r1, r1, #9
     916:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     918:	7831      	ldrb	r1, [r6, #0]
     91a:	43a1      	bics	r1, r4
     91c:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91e:	2180      	movs	r1, #128	; 0x80
     920:	0289      	lsls	r1, r1, #10
     922:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     924:	0019      	movs	r1, r3
     926:	3153      	adds	r1, #83	; 0x53
     928:	7808      	ldrb	r0, [r1, #0]
     92a:	43a0      	bics	r0, r4
     92c:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     92e:	7808      	ldrb	r0, [r1, #0]
     930:	4338      	orrs	r0, r7
     932:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     934:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     936:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     938:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     93a:	0300      	lsls	r0, r0, #12
     93c:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     93e:	9703      	str	r7, [sp, #12]
     940:	7838      	ldrb	r0, [r7, #0]
     942:	4667      	mov	r7, ip
     944:	4010      	ands	r0, r2
     946:	4338      	orrs	r0, r7
     948:	9f03      	ldr	r7, [sp, #12]
     94a:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94c:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94e:	4667      	mov	r7, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     950:	4320      	orrs	r0, r4
     952:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     954:	0018      	movs	r0, r3
     956:	3038      	adds	r0, #56	; 0x38
     958:	7801      	ldrb	r1, [r0, #0]
     95a:	4011      	ands	r1, r2
     95c:	4339      	orrs	r1, r7
     95e:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     960:	7831      	ldrb	r1, [r6, #0]
     962:	4321      	orrs	r1, r4
     964:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     966:	2602      	movs	r6, #2
     968:	7801      	ldrb	r1, [r0, #0]
     96a:	4391      	bics	r1, r2
     96c:	4331      	orrs	r1, r6
     96e:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     970:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     972:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     974:	4321      	orrs	r1, r4
     976:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     978:	7981      	ldrb	r1, [r0, #6]
     97a:	43a1      	bics	r1, r4
     97c:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     97e:	2180      	movs	r1, #128	; 0x80
     980:	02c9      	lsls	r1, r1, #11
     982:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     984:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     986:	7801      	ldrb	r1, [r0, #0]
     988:	43a1      	bics	r1, r4
     98a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98c:	2180      	movs	r1, #128	; 0x80
     98e:	0149      	lsls	r1, r1, #5
     990:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     992:	7881      	ldrb	r1, [r0, #2]
     994:	43a1      	bics	r1, r4
     996:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     998:	2180      	movs	r1, #128	; 0x80
     99a:	01c9      	lsls	r1, r1, #7
     99c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     99e:	0019      	movs	r1, r3
     9a0:	314d      	adds	r1, #77	; 0x4d
     9a2:	7808      	ldrb	r0, [r1, #0]
     9a4:	43a0      	bics	r0, r4
     9a6:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9a8:	7808      	ldrb	r0, [r1, #0]
     9aa:	4330      	orrs	r0, r6
     9ac:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9ae:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b0:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9b2:	0189      	lsls	r1, r1, #6
     9b4:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b6:	304f      	adds	r0, #79	; 0x4f
     9b8:	7801      	ldrb	r1, [r0, #0]
     9ba:	43a1      	bics	r1, r4
     9bc:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9be:	2180      	movs	r1, #128	; 0x80
     9c0:	0209      	lsls	r1, r1, #8
     9c2:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9c4:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c6:	0019      	movs	r1, r3
     9c8:	3155      	adds	r1, #85	; 0x55
     9ca:	7808      	ldrb	r0, [r1, #0]
     9cc:	43a0      	bics	r0, r4
     9ce:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9d0:	2080      	movs	r0, #128	; 0x80
     9d2:	0380      	lsls	r0, r0, #14
     9d4:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9d6:	2040      	movs	r0, #64	; 0x40
     9d8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9da:	7848      	ldrb	r0, [r1, #1]
     9dc:	43a0      	bics	r0, r4
     9de:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9e0:	2080      	movs	r0, #128	; 0x80
     9e2:	03c0      	lsls	r0, r0, #15
     9e4:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9e6:	0018      	movs	r0, r3
     9e8:	303b      	adds	r0, #59	; 0x3b
     9ea:	7805      	ldrb	r5, [r0, #0]
     9ec:	4395      	bics	r5, r2
     9ee:	4335      	orrs	r5, r6
     9f0:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f2:	784d      	ldrb	r5, [r1, #1]
     9f4:	4325      	orrs	r5, r4
     9f6:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9f8:	788d      	ldrb	r5, [r1, #2]
     9fa:	43a5      	bics	r5, r4
     9fc:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9fe:	788d      	ldrb	r5, [r1, #2]
     a00:	4335      	orrs	r5, r6
     a02:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     a04:	2580      	movs	r5, #128	; 0x80
     a06:	042d      	lsls	r5, r5, #16
     a08:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a0a:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a0c:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     a0e:	4e23      	ldr	r6, [pc, #140]	; (a9c <init+0x354>)
     a10:	401a      	ands	r2, r3
     a12:	433a      	orrs	r2, r7
     a14:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a16:	788b      	ldrb	r3, [r1, #2]
     a18:	2204      	movs	r2, #4
     a1a:	4323      	orrs	r3, r4
     a1c:	708b      	strb	r3, [r1, #2]
     a1e:	2000      	movs	r0, #0
     a20:	2103      	movs	r1, #3
     a22:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a24:	002b      	movs	r3, r5
     a26:	002a      	movs	r2, r5
     a28:	0028      	movs	r0, r5
     a2a:	4f1d      	ldr	r7, [pc, #116]	; (aa0 <init+0x358>)
     a2c:	9501      	str	r5, [sp, #4]
     a2e:	9500      	str	r5, [sp, #0]
     a30:	2103      	movs	r1, #3
     a32:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a34:	0020      	movs	r0, r4
     a36:	2204      	movs	r2, #4
     a38:	2103      	movs	r1, #3
     a3a:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a3c:	002b      	movs	r3, r5
     a3e:	002a      	movs	r2, r5
     a40:	0020      	movs	r0, r4
     a42:	9501      	str	r5, [sp, #4]
     a44:	9500      	str	r5, [sp, #0]
     a46:	2103      	movs	r1, #3
     a48:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a4a:	2208      	movs	r2, #8
     a4c:	2104      	movs	r1, #4
     a4e:	2003      	movs	r0, #3
     a50:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     a52:	2396      	movs	r3, #150	; 0x96
     a54:	0021      	movs	r1, r4
     a56:	002a      	movs	r2, r5
     a58:	2003      	movs	r0, #3
     a5a:	01db      	lsls	r3, r3, #7
     a5c:	4c11      	ldr	r4, [pc, #68]	; (aa4 <init+0x35c>)
     a5e:	47a0      	blx	r4

    TC4Init();
     a60:	4b11      	ldr	r3, [pc, #68]	; (aa8 <init+0x360>)
     a62:	4798      	blx	r3
    TC5Init();
     a64:	4b11      	ldr	r3, [pc, #68]	; (aac <init+0x364>)
     a66:	4798      	blx	r3
}
     a68:	b005      	add	sp, #20
     a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a6c:	41004000 	.word	0x41004000
     a70:	40000400 	.word	0x40000400
     a74:	000001d5 	.word	0x000001d5
     a78:	00000e4d 	.word	0x00000e4d
     a7c:	00000ed5 	.word	0x00000ed5
     a80:	00000fa1 	.word	0x00000fa1
     a84:	00000c35 	.word	0x00000c35
     a88:	00001141 	.word	0x00001141
     a8c:	e000e100 	.word	0xe000e100
     a90:	ff00ffff 	.word	0xff00ffff
     a94:	41004400 	.word	0x41004400
     a98:	41004435 	.word	0x41004435
     a9c:	00002869 	.word	0x00002869
     aa0:	000028cd 	.word	0x000028cd
     aa4:	00002931 	.word	0x00002931
     aa8:	00001071 	.word	0x00001071
     aac:	000010d9 	.word	0x000010d9

00000ab0 <main>:


int main(void) {
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	4c26      	ldr	r4, [pc, #152]	; (b4c <main+0x9c>)

    init();
     ab4:	4b26      	ldr	r3, [pc, #152]	; (b50 <main+0xa0>)
    TC4Init();
    TC5Init();
}


int main(void) {
     ab6:	44a5      	add	sp, r4

    init();
     ab8:	4798      	blx	r3

    delay_ms(500);
     aba:	20fa      	movs	r0, #250	; 0xfa


    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     abc:	2400      	movs	r4, #0

int main(void) {

    init();

    delay_ms(500);
     abe:	0040      	lsls	r0, r0, #1
     ac0:	4b24      	ldr	r3, [pc, #144]	; (b54 <main+0xa4>)
     ac2:	4798      	blx	r3


    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ac4:	ab02      	add	r3, sp, #8
     ac6:	701c      	strb	r4, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     ac8:	a806      	add	r0, sp, #24
     aca:	4b23      	ldr	r3, [pc, #140]	; (b58 <main+0xa8>)
     acc:	4798      	blx	r3
    IMUinit();
     ace:	4b23      	ldr	r3, [pc, #140]	; (b5c <main+0xac>)
     ad0:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     ad2:	2384      	movs	r3, #132	; 0x84
     ad4:	aa02      	add	r2, sp, #8
     ad6:	009b      	lsls	r3, r3, #2
     ad8:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     ada:	4b21      	ldr	r3, [pc, #132]	; (b60 <main+0xb0>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     adc:	a816      	add	r0, sp, #88	; 0x58

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     ade:	54d4      	strb	r4, [r2, r3]

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     ae0:	4b20      	ldr	r3, [pc, #128]	; (b64 <main+0xb4>)
     ae2:	4798      	blx	r3

    sampleTick(&my_altimeter);
     ae4:	a802      	add	r0, sp, #8
     ae6:	4c20      	ldr	r4, [pc, #128]	; (b68 <main+0xb8>)
     ae8:	47a0      	blx	r4

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     aea:	4b20      	ldr	r3, [pc, #128]	; (b6c <main+0xbc>)
     aec:	9837      	ldr	r0, [sp, #220]	; 0xdc
     aee:	4798      	blx	r3
    my_altimeter.myIMU.gravityOffsetBuffer = my_altimeter.myIMU.gravityOffset;
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     af0:	4b1f      	ldr	r3, [pc, #124]	; (b70 <main+0xc0>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    sampleTick(&my_altimeter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     af2:	9030      	str	r0, [sp, #192]	; 0xc0
     af4:	9131      	str	r1, [sp, #196]	; 0xc4
    my_altimeter.myIMU.gravityOffsetBuffer = my_altimeter.myIMU.gravityOffset;
     af6:	9032      	str	r0, [sp, #200]	; 0xc8
     af8:	9133      	str	r1, [sp, #204]	; 0xcc
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     afa:	9810      	ldr	r0, [sp, #64]	; 0x40
     afc:	9911      	ldr	r1, [sp, #68]	; 0x44
     afe:	4798      	blx	r3
     b00:	9012      	str	r0, [sp, #72]	; 0x48
    my_altimeter.myBarometer.groundOffsetBuffer = my_altimeter.myBarometer.groundOffset;
     b02:	9013      	str	r0, [sp, #76]	; 0x4c


	

    beep(400);
     b04:	20c8      	movs	r0, #200	; 0xc8
     b06:	4d1b      	ldr	r5, [pc, #108]	; (b74 <main+0xc4>)
     b08:	0040      	lsls	r0, r0, #1
     b0a:	47a8      	blx	r5

    my_altimeter.StartupTick = millis();
     b0c:	4b1a      	ldr	r3, [pc, #104]	; (b78 <main+0xc8>)
     b0e:	4798      	blx	r3
     b10:	23ca      	movs	r3, #202	; 0xca
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
	
    while (1) {

        if (takeSample()) {
			if (my_altimeter.Altitude > 1000000)
     b12:	26cd      	movs	r6, #205	; 0xcd

	

    beep(400);

    my_altimeter.StartupTick = millis();
     b14:	009b      	lsls	r3, r3, #2
     b16:	aa02      	add	r2, sp, #8
     b18:	50d0      	str	r0, [r2, r3]
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
     b1a:	902e      	str	r0, [sp, #184]	; 0xb8
	
    while (1) {

        if (takeSample()) {
			if (my_altimeter.Altitude > 1000000)
     b1c:	00b6      	lsls	r6, r6, #2
    my_altimeter.StartupTick = millis();
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
	
    while (1) {

        if (takeSample()) {
     b1e:	4b17      	ldr	r3, [pc, #92]	; (b7c <main+0xcc>)
     b20:	4798      	blx	r3
     b22:	2800      	cmp	r0, #0
     b24:	d0fb      	beq.n	b1e <main+0x6e>
			if (my_altimeter.Altitude > 1000000)
     b26:	ab02      	add	r3, sp, #8
     b28:	599b      	ldr	r3, [r3, r6]
     b2a:	9301      	str	r3, [sp, #4]
     b2c:	9a01      	ldr	r2, [sp, #4]
     b2e:	4b14      	ldr	r3, [pc, #80]	; (b80 <main+0xd0>)
     b30:	429a      	cmp	r2, r3
     b32:	d902      	bls.n	b3a <main+0x8a>
			{
				    beep(400);
     b34:	20c8      	movs	r0, #200	; 0xc8
     b36:	0040      	lsls	r0, r0, #1
     b38:	47a8      	blx	r5

			}
            sampleTick(&my_altimeter);
     b3a:	a802      	add	r0, sp, #8
     b3c:	47a0      	blx	r4
            flight(&my_altimeter);
     b3e:	a802      	add	r0, sp, #8
     b40:	4b10      	ldr	r3, [pc, #64]	; (b84 <main+0xd4>)
     b42:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     b44:	a802      	add	r0, sp, #8
     b46:	4b10      	ldr	r3, [pc, #64]	; (b88 <main+0xd8>)
     b48:	4798      	blx	r3
     b4a:	e7e8      	b.n	b1e <main+0x6e>
     b4c:	fffffcb8 	.word	0xfffffcb8
     b50:	00000749 	.word	0x00000749
     b54:	00000ff1 	.word	0x00000ff1
     b58:	000006b9 	.word	0x000006b9
     b5c:	00000b8d 	.word	0x00000b8d
     b60:	00000311 	.word	0x00000311
     b64:	00001591 	.word	0x00001591
     b68:	00002471 	.word	0x00002471
     b6c:	000061d1 	.word	0x000061d1
     b70:	00003e51 	.word	0x00003e51
     b74:	00000dd9 	.word	0x00000dd9
     b78:	0000103d 	.word	0x0000103d
     b7c:	00002459 	.word	0x00002459
     b80:	000f4240 	.word	0x000f4240
     b84:	000011a1 	.word	0x000011a1
     b88:	00001e35 	.word	0x00001e35

00000b8c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b8c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b8e:	4c08      	ldr	r4, [pc, #32]	; (bb0 <IMUinit+0x24>)
     b90:	2580      	movs	r5, #128	; 0x80
     b92:	0023      	movs	r3, r4
     b94:	00ed      	lsls	r5, r5, #3
     b96:	3394      	adds	r3, #148	; 0x94
     b98:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b9a:	4e06      	ldr	r6, [pc, #24]	; (bb4 <IMUinit+0x28>)
     b9c:	210f      	movs	r1, #15
     b9e:	2000      	movs	r0, #0
     ba0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ba2:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     ba4:	210c      	movs	r1, #12
     ba6:	2000      	movs	r0, #0
     ba8:	47b0      	blx	r6
     baa:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	41004400 	.word	0x41004400
     bb4:	00002979 	.word	0x00002979

00000bb8 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     bb8:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     bba:	4b09      	ldr	r3, [pc, #36]	; (be0 <USARTconnectionAvaliable+0x28>)
     bbc:	7e1c      	ldrb	r4, [r3, #24]
     bbe:	0764      	lsls	r4, r4, #29
     bc0:	0fe4      	lsrs	r4, r4, #31
     bc2:	2c01      	cmp	r4, #1
     bc4:	d001      	beq.n	bca <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     bc6:	2000      	movs	r0, #0
     bc8:	e009      	b.n	bde <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     bca:	2003      	movs	r0, #3
     bcc:	4b05      	ldr	r3, [pc, #20]	; (be4 <USARTconnectionAvaliable+0x2c>)
     bce:	4798      	blx	r3
     bd0:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     bd2:	2948      	cmp	r1, #72	; 0x48
     bd4:	d1f7      	bne.n	bc6 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     bd6:	2003      	movs	r0, #3
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <USARTconnectionAvaliable+0x30>)
     bda:	4798      	blx	r3
            return true;
     bdc:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     bde:	bd10      	pop	{r4, pc}
     be0:	42001400 	.word	0x42001400
     be4:	000029a9 	.word	0x000029a9
     be8:	00002991 	.word	0x00002991

00000bec <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bee:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bf0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bf2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bf4:	1a09      	subs	r1, r1, r0
     bf6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bf8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bfa:	b28b      	uxth	r3, r1
     bfc:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bfe:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     c00:	a902      	add	r1, sp, #8
     c02:	0028      	movs	r0, r5
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <sendTheasePagesToComputer+0x40>)
     c06:	4798      	blx	r3
     c08:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     c0a:	ab02      	add	r3, sp, #8
     c0c:	5d99      	ldrb	r1, [r3, r6]
     c0e:	2003      	movs	r0, #3
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <sendTheasePagesToComputer+0x44>)
     c12:	3601      	adds	r6, #1
     c14:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     c16:	42be      	cmp	r6, r7
     c18:	d1f7      	bne.n	c0a <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     c1a:	3401      	adds	r4, #1
     c1c:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     c1e:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     c20:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     c22:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     c24:	42a3      	cmp	r3, r4
     c26:	d2eb      	bcs.n	c00 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     c28:	b043      	add	sp, #268	; 0x10c
     c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2c:	000003b1 	.word	0x000003b1
     c30:	00002991 	.word	0x00002991

00000c34 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c34:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c36:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c38:	4a10      	ldr	r2, [pc, #64]	; (c7c <adcInit+0x48>)
     c3a:	0249      	lsls	r1, r1, #9
     c3c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c3e:	4810      	ldr	r0, [pc, #64]	; (c80 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c40:	430b      	orrs	r3, r1
     c42:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c44:	23e0      	movs	r3, #224	; 0xe0
     c46:	490f      	ldr	r1, [pc, #60]	; (c84 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c48:	4a0f      	ldr	r2, [pc, #60]	; (c88 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c4a:	00db      	lsls	r3, r3, #3
     c4c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c4e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c50:	4a0e      	ldr	r2, [pc, #56]	; (c8c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c52:	6812      	ldr	r2, [r2, #0]
     c54:	0150      	lsls	r0, r2, #5
     c56:	4018      	ands	r0, r3
     c58:	4b0d      	ldr	r3, [pc, #52]	; (c90 <adcInit+0x5c>)
     c5a:	0154      	lsls	r4, r2, #5
     c5c:	681a      	ldr	r2, [r3, #0]
     c5e:	0ed3      	lsrs	r3, r2, #27
     c60:	4323      	orrs	r3, r4
     c62:	b2da      	uxtb	r2, r3
     c64:	0003      	movs	r3, r0
     c66:	4313      	orrs	r3, r2
     c68:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c6a:	2302      	movs	r3, #2
     c6c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c6e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c70:	7e4b      	ldrb	r3, [r1, #25]
     c72:	b25b      	sxtb	r3, r3
     c74:	2b00      	cmp	r3, #0
     c76:	dbfb      	blt.n	c70 <adcInit+0x3c>
}
     c78:	bd10      	pop	{r4, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	40000400 	.word	0x40000400
     c80:	0000401e 	.word	0x0000401e
     c84:	42004000 	.word	0x42004000
     c88:	40000c00 	.word	0x40000c00
     c8c:	00806024 	.word	0x00806024
     c90:	00806020 	.word	0x00806020

00000c94 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c94:	2202      	movs	r2, #2
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <adcSample+0x18>)
     c98:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c9a:	3a01      	subs	r2, #1
     c9c:	7e19      	ldrb	r1, [r3, #24]
     c9e:	4211      	tst	r1, r2
     ca0:	d0fc      	beq.n	c9c <adcSample+0x8>
    return ADC->RESULT.reg;
     ca2:	4b02      	ldr	r3, [pc, #8]	; (cac <adcSample+0x18>)
     ca4:	8b58      	ldrh	r0, [r3, #26]
     ca6:	b280      	uxth	r0, r0
}
     ca8:	4770      	bx	lr
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	42004000 	.word	0x42004000

00000cb0 <adc_read>:


u16_t adc_read(Pin p) {
     cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cb2:	2501      	movs	r5, #1
     cb4:	0c02      	lsrs	r2, r0, #16
     cb6:	b2d4      	uxtb	r4, r2
     cb8:	9000      	str	r0, [sp, #0]
     cba:	0e00      	lsrs	r0, r0, #24
     cbc:	9101      	str	r1, [sp, #4]
     cbe:	0842      	lsrs	r2, r0, #1
     cc0:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cc2:	4911      	ldr	r1, [pc, #68]	; (d08 <adc_read+0x58>)
     cc4:	18d2      	adds	r2, r2, r3
     cc6:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cc8:	4228      	tst	r0, r5
     cca:	d005      	beq.n	cd8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ccc:	210f      	movs	r1, #15
     cce:	7814      	ldrb	r4, [r2, #0]
     cd0:	4021      	ands	r1, r4
     cd2:	2410      	movs	r4, #16
     cd4:	4321      	orrs	r1, r4
     cd6:	e003      	b.n	ce0 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     cd8:	240f      	movs	r4, #15
     cda:	7811      	ldrb	r1, [r2, #0]
     cdc:	43a1      	bics	r1, r4
     cde:	4329      	orrs	r1, r5
     ce0:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     ce2:	2101      	movs	r1, #1
     ce4:	4a09      	ldr	r2, [pc, #36]	; (d0c <adc_read+0x5c>)
     ce6:	18c3      	adds	r3, r0, r3
     ce8:	189b      	adds	r3, r3, r2
     cea:	781a      	ldrb	r2, [r3, #0]
     cec:	430a      	orrs	r2, r1
     cee:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     cf0:	466b      	mov	r3, sp
     cf2:	791a      	ldrb	r2, [r3, #4]
     cf4:	231f      	movs	r3, #31
     cf6:	4013      	ands	r3, r2
     cf8:	22c0      	movs	r2, #192	; 0xc0
     cfa:	0152      	lsls	r2, r2, #5
     cfc:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     cfe:	4a04      	ldr	r2, [pc, #16]	; (d10 <adc_read+0x60>)
     d00:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d02:	4b04      	ldr	r3, [pc, #16]	; (d14 <adc_read+0x64>)
     d04:	4798      	blx	r3
     d06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d08:	41004430 	.word	0x41004430
     d0c:	41004440 	.word	0x41004440
     d10:	42004000 	.word	0x42004000
     d14:	00000c95 	.word	0x00000c95

00000d18 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     d18:	0c01      	lsrs	r1, r0, #16
     d1a:	0c13      	lsrs	r3, r2, #16
     d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1e:	b2cd      	uxtb	r5, r1
     d20:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d22:	2301      	movs	r3, #1
     d24:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d26:	0e12      	lsrs	r2, r2, #24
     d28:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d2a:	0e00      	lsrs	r0, r0, #24
     d2c:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d2e:	001a      	movs	r2, r3
     d30:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d32:	0030      	movs	r0, r6
     d34:	4e11      	ldr	r6, [pc, #68]	; (d7c <byteOut+0x64>)
     d36:	01c9      	lsls	r1, r1, #7
     d38:	b087      	sub	sp, #28
     d3a:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d3c:	4e10      	ldr	r6, [pc, #64]	; (d80 <byteOut+0x68>)
     d3e:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d40:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d42:	19ae      	adds	r6, r5, r6
     d44:	7824      	ldrb	r4, [r4, #0]
     d46:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d48:	4e0c      	ldr	r6, [pc, #48]	; (d7c <byteOut+0x64>)
     d4a:	46b4      	mov	ip, r6
     d4c:	44ac      	add	ip, r5
     d4e:	4666      	mov	r6, ip
     d50:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     d52:	b266      	sxtb	r6, r4
     d54:	2e00      	cmp	r6, #0
     d56:	da05      	bge.n	d64 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d58:	4e09      	ldr	r6, [pc, #36]	; (d80 <byteOut+0x68>)
     d5a:	46b4      	mov	ip, r6
     d5c:	448c      	add	ip, r1
     d5e:	4666      	mov	r6, ip
     d60:	6032      	str	r2, [r6, #0]
     d62:	e000      	b.n	d66 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d64:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d66:	9e01      	ldr	r6, [sp, #4]
     d68:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d6a:	0064      	lsls	r4, r4, #1
     d6c:	b2db      	uxtb	r3, r3
     d6e:	6030      	str	r0, [r6, #0]
     d70:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d72:	2b00      	cmp	r3, #0
     d74:	d1e8      	bne.n	d48 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d76:	b007      	add	sp, #28
     d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	41004414 	.word	0x41004414
     d80:	41004418 	.word	0x41004418

00000d84 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d86:	2501      	movs	r5, #1
     d88:	b085      	sub	sp, #20
     d8a:	9103      	str	r1, [sp, #12]
     d8c:	0011      	movs	r1, r2
     d8e:	0c06      	lsrs	r6, r0, #16
     d90:	9301      	str	r3, [sp, #4]
     d92:	b2f3      	uxtb	r3, r6
     d94:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d96:	0e09      	lsrs	r1, r1, #24
     d98:	0c14      	lsrs	r4, r2, #16
     d9a:	9002      	str	r0, [sp, #8]
     d9c:	9200      	str	r2, [sp, #0]
     d9e:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da0:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     da2:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     da4:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da6:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     da8:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     daa:	4c0a      	ldr	r4, [pc, #40]	; (dd4 <byteIn+0x50>)
     dac:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     dae:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     db0:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     db2:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     db4:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     db6:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     db8:	0040      	lsls	r0, r0, #1
     dba:	402c      	ands	r4, r5
     dbc:	1e67      	subs	r7, r4, #1
     dbe:	41bc      	sbcs	r4, r7
     dc0:	3901      	subs	r1, #1
     dc2:	4304      	orrs	r4, r0
     dc4:	b2c9      	uxtb	r1, r1
     dc6:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dc8:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     dca:	2900      	cmp	r1, #0
     dcc:	d1f2      	bne.n	db4 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     dce:	b005      	add	sp, #20
     dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	41004400 	.word	0x41004400

00000dd8 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	2780      	movs	r7, #128	; 0x80
     dde:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     de0:	2500      	movs	r5, #0
     de2:	4c0a      	ldr	r4, [pc, #40]	; (e0c <beep+0x34>)
     de4:	035b      	lsls	r3, r3, #13
     de6:	61e3      	str	r3, [r4, #28]
     de8:	03bf      	lsls	r7, r7, #14
     dea:	42b5      	cmp	r5, r6
     dec:	d006      	beq.n	dfc <beep+0x24>
     dee:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     df0:	207a      	movs	r0, #122	; 0x7a
     df2:	4b07      	ldr	r3, [pc, #28]	; (e10 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     df4:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     df6:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     df8:	b2ad      	uxth	r5, r5
     dfa:	e7f6      	b.n	dea <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dfc:	2380      	movs	r3, #128	; 0x80
     dfe:	039b      	lsls	r3, r3, #14
     e00:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e02:	2380      	movs	r3, #128	; 0x80
     e04:	035b      	lsls	r3, r3, #13
     e06:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	41004400 	.word	0x41004400
     e10:	00000fc1 	.word	0x00000fc1

00000e14 <startupJingle>:

void startupJingle(){
     e14:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e16:	2696      	movs	r6, #150	; 0x96
     e18:	0076      	lsls	r6, r6, #1
     e1a:	4d0a      	ldr	r5, [pc, #40]	; (e44 <startupJingle+0x30>)
     e1c:	0030      	movs	r0, r6
     e1e:	47a8      	blx	r5
    delay_ms(80);
     e20:	4c09      	ldr	r4, [pc, #36]	; (e48 <startupJingle+0x34>)
     e22:	2050      	movs	r0, #80	; 0x50
     e24:	47a0      	blx	r4
    beep(300);
     e26:	0030      	movs	r0, r6
     e28:	47a8      	blx	r5
    delay_ms(250);
     e2a:	20fa      	movs	r0, #250	; 0xfa
     e2c:	47a0      	blx	r4
    beep(300);
     e2e:	0030      	movs	r0, r6
     e30:	47a8      	blx	r5
    delay_ms(80);
     e32:	2050      	movs	r0, #80	; 0x50
     e34:	47a0      	blx	r4
    beep(300);
     e36:	0030      	movs	r0, r6
     e38:	47a8      	blx	r5
    delay_ms(500);
     e3a:	20fa      	movs	r0, #250	; 0xfa
     e3c:	0040      	lsls	r0, r0, #1
     e3e:	47a0      	blx	r4
}
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00000dd9 	.word	0x00000dd9
     e48:	00000ff1 	.word	0x00000ff1

00000e4c <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e4c:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e4e:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e50:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e52:	4916      	ldr	r1, [pc, #88]	; (eac <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e54:	4a16      	ldr	r2, [pc, #88]	; (eb0 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e56:	00db      	lsls	r3, r3, #3
     e58:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e5a:	6853      	ldr	r3, [r2, #4]
     e5c:	4303      	orrs	r3, r0
     e5e:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e60:	4b14      	ldr	r3, [pc, #80]	; (eb4 <GclkInit+0x68>)
     e62:	681a      	ldr	r2, [r3, #0]
     e64:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e66:	2a3f      	cmp	r2, #63	; 0x3f
     e68:	d100      	bne.n	e6c <GclkInit+0x20>
        coarse = 0x1f;
     e6a:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e6c:	4b12      	ldr	r3, [pc, #72]	; (eb8 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e6e:	4813      	ldr	r0, [pc, #76]	; (ebc <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e70:	681b      	ldr	r3, [r3, #0]
     e72:	059b      	lsls	r3, r3, #22
     e74:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e76:	4283      	cmp	r3, r0
     e78:	d100      	bne.n	e7c <GclkInit+0x30>
        fine = 0x1ff;
     e7a:	4b11      	ldr	r3, [pc, #68]	; (ec0 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e7c:	4811      	ldr	r0, [pc, #68]	; (ec4 <GclkInit+0x78>)
     e7e:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e80:	2010      	movs	r0, #16
     e82:	68cc      	ldr	r4, [r1, #12]
     e84:	4204      	tst	r4, r0
     e86:	d0fc      	beq.n	e82 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e88:	0292      	lsls	r2, r2, #10
     e8a:	4313      	orrs	r3, r2
     e8c:	4a07      	ldr	r2, [pc, #28]	; (eac <GclkInit+0x60>)
     e8e:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e90:	2310      	movs	r3, #16
     e92:	68ca      	ldr	r2, [r1, #12]
     e94:	421a      	tst	r2, r3
     e96:	d0fc      	beq.n	e92 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e98:	4a0b      	ldr	r2, [pc, #44]	; (ec8 <GclkInit+0x7c>)
     e9a:	4b04      	ldr	r3, [pc, #16]	; (eac <GclkInit+0x60>)
     e9c:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e9e:	2280      	movs	r2, #128	; 0x80
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <GclkInit+0x80>)
     ea2:	0052      	lsls	r2, r2, #1
     ea4:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     ea6:	4a0a      	ldr	r2, [pc, #40]	; (ed0 <GclkInit+0x84>)
     ea8:	605a      	str	r2, [r3, #4]
}
     eaa:	bd10      	pop	{r4, pc}
     eac:	40000800 	.word	0x40000800
     eb0:	41004000 	.word	0x41004000
     eb4:	00806024 	.word	0x00806024
     eb8:	00806028 	.word	0x00806028
     ebc:	000003ff 	.word	0x000003ff
     ec0:	000001ff 	.word	0x000001ff
     ec4:	00000522 	.word	0x00000522
     ec8:	000005a2 	.word	0x000005a2
     ecc:	40000c00 	.word	0x40000c00
     ed0:	00010700 	.word	0x00010700

00000ed4 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     ed4:	4a1d      	ldr	r2, [pc, #116]	; (f4c <RtcInit+0x78>)
     ed6:	4b1e      	ldr	r3, [pc, #120]	; (f50 <RtcInit+0x7c>)
     ed8:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     eda:	2202      	movs	r2, #2
     edc:	68d9      	ldr	r1, [r3, #12]
     ede:	4211      	tst	r1, r2
     ee0:	d0fc      	beq.n	edc <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ee2:	2281      	movs	r2, #129	; 0x81
     ee4:	4b1b      	ldr	r3, [pc, #108]	; (f54 <RtcInit+0x80>)
     ee6:	0052      	lsls	r2, r2, #1
     ee8:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     eea:	4a1b      	ldr	r2, [pc, #108]	; (f58 <RtcInit+0x84>)
     eec:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     eee:	785a      	ldrb	r2, [r3, #1]
     ef0:	b252      	sxtb	r2, r2
     ef2:	2a00      	cmp	r2, #0
     ef4:	dbfb      	blt.n	eee <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ef6:	4a19      	ldr	r2, [pc, #100]	; (f5c <RtcInit+0x88>)
     ef8:	4b16      	ldr	r3, [pc, #88]	; (f54 <RtcInit+0x80>)
     efa:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     efc:	2204      	movs	r2, #4
     efe:	4b18      	ldr	r3, [pc, #96]	; (f60 <RtcInit+0x8c>)
     f00:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f02:	7a9a      	ldrb	r2, [r3, #10]
     f04:	4916      	ldr	r1, [pc, #88]	; (f60 <RtcInit+0x8c>)
     f06:	09d2      	lsrs	r2, r2, #7
     f08:	d1fb      	bne.n	f02 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f0a:	20a0      	movs	r0, #160	; 0xa0
     f0c:	880a      	ldrh	r2, [r1, #0]
     f0e:	00c0      	lsls	r0, r0, #3
     f10:	4302      	orrs	r2, r0
     f12:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f14:	7a9a      	ldrb	r2, [r3, #10]
     f16:	09d2      	lsrs	r2, r2, #7
     f18:	d1fc      	bne.n	f14 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     f1a:	4912      	ldr	r1, [pc, #72]	; (f64 <RtcInit+0x90>)
     f1c:	4a10      	ldr	r2, [pc, #64]	; (f60 <RtcInit+0x8c>)
     f1e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f20:	7a99      	ldrb	r1, [r3, #10]
     f22:	4a0f      	ldr	r2, [pc, #60]	; (f60 <RtcInit+0x8c>)
     f24:	09c9      	lsrs	r1, r1, #7
     f26:	d1fb      	bne.n	f20 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f28:	8851      	ldrh	r1, [r2, #2]
     f2a:	480f      	ldr	r0, [pc, #60]	; (f68 <RtcInit+0x94>)
     f2c:	4301      	orrs	r1, r0
     f2e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f30:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f32:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f34:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f36:	8811      	ldrh	r1, [r2, #0]
     f38:	4301      	orrs	r1, r0
     f3a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f3c:	7a9a      	ldrb	r2, [r3, #10]
     f3e:	09d2      	lsrs	r2, r2, #7
     f40:	d1fc      	bne.n	f3c <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f42:	4b0a      	ldr	r3, [pc, #40]	; (f6c <RtcInit+0x98>)
     f44:	3208      	adds	r2, #8
     f46:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f48:	4770      	bx	lr
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	0000060e 	.word	0x0000060e
     f50:	40000800 	.word	0x40000800
     f54:	40000c00 	.word	0x40000c00
     f58:	00230002 	.word	0x00230002
     f5c:	00004204 	.word	0x00004204
     f60:	40001400 	.word	0x40001400
     f64:	000003e6 	.word	0x000003e6
     f68:	00004010 	.word	0x00004010
     f6c:	e000e100 	.word	0xe000e100

00000f70 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f70:	230f      	movs	r3, #15
     f72:	4018      	ands	r0, r3
     f74:	4b08      	ldr	r3, [pc, #32]	; (f98 <gclkEnable+0x28>)
     f76:	0212      	lsls	r2, r2, #8
     f78:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f7a:	23f8      	movs	r3, #248	; 0xf8
     f7c:	0209      	lsls	r1, r1, #8
     f7e:	015b      	lsls	r3, r3, #5
     f80:	4019      	ands	r1, r3
     f82:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f84:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f86:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f88:	4c04      	ldr	r4, [pc, #16]	; (f9c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f8a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f8c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f8e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f90:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f92:	6060      	str	r0, [r4, #4]
}
     f94:	bd10      	pop	{r4, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00ffff00 	.word	0x00ffff00
     f9c:	40000c00 	.word	0x40000c00

00000fa0 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <delayInit+0x14>)
     fa2:	4a05      	ldr	r2, [pc, #20]	; (fb8 <delayInit+0x18>)
     fa4:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     fa6:	2230      	movs	r2, #48	; 0x30
     fa8:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <delayInit+0x1c>)
     fac:	3a2b      	subs	r2, #43	; 0x2b
     fae:	601a      	str	r2, [r3, #0]
}
     fb0:	4770      	bx	lr
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	20000004 	.word	0x20000004
     fb8:	0000bb80 	.word	0x0000bb80
     fbc:	e000e010 	.word	0xe000e010

00000fc0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     fc0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fc2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fc4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     fc6:	4b08      	ldr	r3, [pc, #32]	; (fe8 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fc8:	4a08      	ldr	r2, [pc, #32]	; (fec <delay_us+0x2c>)
     fca:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fcc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fce:	3801      	subs	r0, #1
     fd0:	d308      	bcc.n	fe4 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fd2:	2b00      	cmp	r3, #0
     fd4:	d0fb      	beq.n	fce <delay_us+0xe>
     fd6:	4e05      	ldr	r6, [pc, #20]	; (fec <delay_us+0x2c>)
        SysTick->LOAD = n;
     fd8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fda:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fdc:	6835      	ldr	r5, [r6, #0]
     fde:	4225      	tst	r5, r4
     fe0:	d0fc      	beq.n	fdc <delay_us+0x1c>
     fe2:	e7f4      	b.n	fce <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fe4:	bd70      	pop	{r4, r5, r6, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	20000004 	.word	0x20000004
     fec:	e000e010 	.word	0xe000e010

00000ff0 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ff4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     ff6:	4b08      	ldr	r3, [pc, #32]	; (1018 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ff8:	4a08      	ldr	r2, [pc, #32]	; (101c <delay_ms+0x2c>)
     ffa:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ffc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     ffe:	3801      	subs	r0, #1
    1000:	d308      	bcc.n	1014 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1002:	2b00      	cmp	r3, #0
    1004:	d0fb      	beq.n	ffe <delay_ms+0xe>
    1006:	4e05      	ldr	r6, [pc, #20]	; (101c <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1008:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    100a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    100c:	6835      	ldr	r5, [r6, #0]
    100e:	4225      	tst	r5, r4
    1010:	d0fc      	beq.n	100c <delay_ms+0x1c>
    1012:	e7f4      	b.n	ffe <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	20000004 	.word	0x20000004
    101c:	e000e010 	.word	0xe000e010

00001020 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1020:	21fa      	movs	r1, #250	; 0xfa
    1022:	4a04      	ldr	r2, [pc, #16]	; (1034 <RTC_Handler+0x14>)
    1024:	0089      	lsls	r1, r1, #2
    1026:	6813      	ldr	r3, [r2, #0]
    1028:	185b      	adds	r3, r3, r1
    102a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    102c:	22ff      	movs	r2, #255	; 0xff
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <RTC_Handler+0x18>)
    1030:	721a      	strb	r2, [r3, #8]
}
    1032:	4770      	bx	lr
    1034:	200004cc 	.word	0x200004cc
    1038:	40001400 	.word	0x40001400

0000103c <millis>:

uint32_t millis(void) {
    103c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    103e:	f3ef 8110 	mrs	r1, PRIMASK
    1042:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1044:	4a08      	ldr	r2, [pc, #32]	; (1068 <millis+0x2c>)
    1046:	4d09      	ldr	r5, [pc, #36]	; (106c <millis+0x30>)
    1048:	8a10      	ldrh	r0, [r2, #16]
    104a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    104c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    104e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1050:	09e4      	lsrs	r4, r4, #7
    1052:	d004      	beq.n	105e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1054:	8a13      	ldrh	r3, [r2, #16]
    1056:	22fa      	movs	r2, #250	; 0xfa
    1058:	6828      	ldr	r0, [r5, #0]
    105a:	0092      	lsls	r2, r2, #2
    105c:	1880      	adds	r0, r0, r2
    105e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1060:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1064:	bd30      	pop	{r4, r5, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	40001400 	.word	0x40001400
    106c:	200004cc 	.word	0x200004cc

00001070 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1070:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1072:	4a0d      	ldr	r2, [pc, #52]	; (10a8 <TC4Init+0x38>)
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1076:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1078:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    107a:	4a0d      	ldr	r2, [pc, #52]	; (10b0 <TC4Init+0x40>)
    107c:	6a13      	ldr	r3, [r2, #32]
    107e:	430b      	orrs	r3, r1
    1080:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1082:	4b0c      	ldr	r3, [pc, #48]	; (10b4 <TC4Init+0x44>)
    1084:	4a0c      	ldr	r2, [pc, #48]	; (10b8 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1086:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1088:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    108a:	2241      	movs	r2, #65	; 0x41
    108c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    108e:	3a40      	subs	r2, #64	; 0x40
    1090:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1092:	32ff      	adds	r2, #255	; 0xff
    1094:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1096:	881a      	ldrh	r2, [r3, #0]
    1098:	430a      	orrs	r2, r1
    109a:	801a      	strh	r2, [r3, #0]
    109c:	2280      	movs	r2, #128	; 0x80
    109e:	4b07      	ldr	r3, [pc, #28]	; (10bc <TC4Init+0x4c>)
    10a0:	0312      	lsls	r2, r2, #12
    10a2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10a4:	4770      	bx	lr
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	0000421c 	.word	0x0000421c
    10ac:	40000c00 	.word	0x40000c00
    10b0:	40000400 	.word	0x40000400
    10b4:	42003000 	.word	0x42003000
    10b8:	00000904 	.word	0x00000904
    10bc:	e000e100 	.word	0xe000e100

000010c0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10c0:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10c2:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10c4:	4b02      	ldr	r3, [pc, #8]	; (10d0 <TC4_Handler+0x10>)
    10c6:	739a      	strb	r2, [r3, #14]
    pullSample();
    10c8:	4b02      	ldr	r3, [pc, #8]	; (10d4 <TC4_Handler+0x14>)
    10ca:	4798      	blx	r3
}
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	42003000 	.word	0x42003000
    10d4:	00002465 	.word	0x00002465

000010d8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10d8:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10da:	4a0d      	ldr	r2, [pc, #52]	; (1110 <TC5Init+0x38>)
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10de:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10e0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <TC5Init+0x40>)
    10e4:	6a13      	ldr	r3, [r2, #32]
    10e6:	430b      	orrs	r3, r1
    10e8:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10ea:	4b0c      	ldr	r3, [pc, #48]	; (111c <TC5Init+0x44>)
    10ec:	4a0c      	ldr	r2, [pc, #48]	; (1120 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ee:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10f0:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    10f2:	2220      	movs	r2, #32
    10f4:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10f6:	3a1f      	subs	r2, #31
    10f8:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10fa:	32ff      	adds	r2, #255	; 0xff
    10fc:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10fe:	881a      	ldrh	r2, [r3, #0]
    1100:	430a      	orrs	r2, r1
    1102:	801a      	strh	r2, [r3, #0]
    1104:	2280      	movs	r2, #128	; 0x80
    1106:	4b07      	ldr	r3, [pc, #28]	; (1124 <TC5Init+0x4c>)
    1108:	0352      	lsls	r2, r2, #13
    110a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	0000421c 	.word	0x0000421c
    1114:	40000c00 	.word	0x40000c00
    1118:	40000400 	.word	0x40000400
    111c:	42003400 	.word	0x42003400
    1120:	00000d04 	.word	0x00000d04
    1124:	e000e100 	.word	0xe000e100

00001128 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1128:	22ff      	movs	r2, #255	; 0xff
    112a:	4b03      	ldr	r3, [pc, #12]	; (1138 <TC5_Handler+0x10>)
    112c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    112e:	4b03      	ldr	r3, [pc, #12]	; (113c <TC5_Handler+0x14>)
    1130:	3afe      	subs	r2, #254	; 0xfe
    1132:	701a      	strb	r2, [r3, #0]
}
    1134:	4770      	bx	lr
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	42003400 	.word	0x42003400
    113c:	200004d1 	.word	0x200004d1

00001140 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    1140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    1142:	27c0      	movs	r7, #192	; 0xc0
    1144:	4d10      	ldr	r5, [pc, #64]	; (1188 <dmaInit+0x48>)
    1146:	003a      	movs	r2, r7
    1148:	4e10      	ldr	r6, [pc, #64]	; (118c <dmaInit+0x4c>)
    114a:	0028      	movs	r0, r5
    114c:	2100      	movs	r1, #0
    114e:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    1150:	4c0f      	ldr	r4, [pc, #60]	; (1190 <dmaInit+0x50>)
    1152:	003a      	movs	r2, r7
    1154:	2100      	movs	r1, #0
    1156:	0020      	movs	r0, r4
    1158:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    115a:	2120      	movs	r1, #32
    115c:	4b0d      	ldr	r3, [pc, #52]	; (1194 <dmaInit+0x54>)
    115e:	695a      	ldr	r2, [r3, #20]
    1160:	430a      	orrs	r2, r1
    1162:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1164:	69da      	ldr	r2, [r3, #28]
    1166:	3910      	subs	r1, #16
    1168:	430a      	orrs	r2, r1
    116a:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    116c:	4b0a      	ldr	r3, [pc, #40]	; (1198 <dmaInit+0x58>)
    116e:	390e      	subs	r1, #14
    1170:	881a      	ldrh	r2, [r3, #0]
    1172:	438a      	bics	r2, r1
    1174:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    1176:	881a      	ldrh	r2, [r3, #0]
    1178:	3901      	subs	r1, #1
    117a:	430a      	orrs	r2, r1
    117c:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    117e:	4a07      	ldr	r2, [pc, #28]	; (119c <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1180:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1182:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1184:	801a      	strh	r2, [r3, #0]
}
    1186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1188:	200005a0 	.word	0x200005a0
    118c:	00006539 	.word	0x00006539
    1190:	200004e0 	.word	0x200004e0
    1194:	40000400 	.word	0x40000400
    1198:	41004800 	.word	0x41004800
    119c:	00000f02 	.word	0x00000f02

000011a0 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    11a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a2:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    11a4:	7800      	ldrb	r0, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    11a6:	b085      	sub	sp, #20



    switch(my_altimeter->myFlightState) {
    11a8:	280a      	cmp	r0, #10
    11aa:	d900      	bls.n	11ae <flight+0xe>
    11ac:	e1ab      	b.n	1506 <flight+0x366>
    11ae:	f002 fd89 	bl	3cc4 <__gnu_thumb1_case_uhi>
    11b2:	000b      	.short	0x000b
    11b4:	00a2008f 	.word	0x00a2008f
    11b8:	01aa0127 	.word	0x01aa0127
    11bc:	015c01aa 	.word	0x015c01aa
    11c0:	01aa01aa 	.word	0x01aa01aa
    11c4:	016301aa 	.word	0x016301aa
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    11c8:	0025      	movs	r5, r4
    11ca:	35c0      	adds	r5, #192	; 0xc0
    11cc:	6828      	ldr	r0, [r5, #0]
    11ce:	6869      	ldr	r1, [r5, #4]
    11d0:	4ace      	ldr	r2, [pc, #824]	; (150c <flight+0x36c>)
    11d2:	4ecf      	ldr	r6, [pc, #828]	; (1510 <flight+0x370>)
    11d4:	9501      	str	r5, [sp, #4]
    11d6:	4bcf      	ldr	r3, [pc, #828]	; (1514 <flight+0x374>)
    11d8:	47b0      	blx	r6
    11da:	0023      	movs	r3, r4
    11dc:	33d4      	adds	r3, #212	; 0xd4
    11de:	0006      	movs	r6, r0
    11e0:	6818      	ldr	r0, [r3, #0]
    11e2:	4bcd      	ldr	r3, [pc, #820]	; (1518 <flight+0x378>)
    11e4:	000f      	movs	r7, r1
    11e6:	4798      	blx	r3
    11e8:	4dc9      	ldr	r5, [pc, #804]	; (1510 <flight+0x370>)
    11ea:	4ac8      	ldr	r2, [pc, #800]	; (150c <flight+0x36c>)
    11ec:	4bcb      	ldr	r3, [pc, #812]	; (151c <flight+0x37c>)
    11ee:	47a8      	blx	r5
    11f0:	4dcb      	ldr	r5, [pc, #812]	; (1520 <flight+0x380>)
    11f2:	0002      	movs	r2, r0
    11f4:	000b      	movs	r3, r1
    11f6:	0030      	movs	r0, r6
    11f8:	0039      	movs	r1, r7
    11fa:	47a8      	blx	r5
    11fc:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    11fe:	4ec9      	ldr	r6, [pc, #804]	; (1524 <flight+0x384>)


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    1200:	6018      	str	r0, [r3, #0]
    1202:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    1204:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1206:	47b0      	blx	r6
    1208:	4dc1      	ldr	r5, [pc, #772]	; (1510 <flight+0x370>)
    120a:	2200      	movs	r2, #0
    120c:	4bc6      	ldr	r3, [pc, #792]	; (1528 <flight+0x388>)
    120e:	47a8      	blx	r5
    1210:	23cd      	movs	r3, #205	; 0xcd
    1212:	009b      	lsls	r3, r3, #2
    1214:	9002      	str	r0, [sp, #8]
    1216:	9103      	str	r1, [sp, #12]
    1218:	58e0      	ldr	r0, [r4, r3]
    121a:	47b0      	blx	r6
    121c:	2200      	movs	r2, #0
    121e:	4bc2      	ldr	r3, [pc, #776]	; (1528 <flight+0x388>)
    1220:	47a8      	blx	r5
    1222:	4dbf      	ldr	r5, [pc, #764]	; (1520 <flight+0x380>)
    1224:	0002      	movs	r2, r0
    1226:	000b      	movs	r3, r1
    1228:	9802      	ldr	r0, [sp, #8]
    122a:	9903      	ldr	r1, [sp, #12]
    122c:	47a8      	blx	r5
    122e:	4fbf      	ldr	r7, [pc, #764]	; (152c <flight+0x38c>)
    1230:	47b8      	blx	r7
    1232:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    1234:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1236:	47b0      	blx	r6
    1238:	4ab4      	ldr	r2, [pc, #720]	; (150c <flight+0x36c>)
    123a:	4bb6      	ldr	r3, [pc, #728]	; (1514 <flight+0x374>)
    123c:	4db4      	ldr	r5, [pc, #720]	; (1510 <flight+0x370>)
    123e:	47a8      	blx	r5
    1240:	9002      	str	r0, [sp, #8]
    1242:	9103      	str	r1, [sp, #12]
    1244:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1246:	47b0      	blx	r6
    1248:	4ab0      	ldr	r2, [pc, #704]	; (150c <flight+0x36c>)
    124a:	4bb4      	ldr	r3, [pc, #720]	; (151c <flight+0x37c>)
    124c:	47a8      	blx	r5
    124e:	000b      	movs	r3, r1
    1250:	0002      	movs	r2, r0
    1252:	9802      	ldr	r0, [sp, #8]
    1254:	9903      	ldr	r1, [sp, #12]
    1256:	4db2      	ldr	r5, [pc, #712]	; (1520 <flight+0x380>)
    1258:	47a8      	blx	r5
    125a:	47b8      	blx	r7

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    125c:	0027      	movs	r7, r4
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    125e:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1260:	4eb3      	ldr	r6, [pc, #716]	; (1530 <flight+0x390>)
    1262:	47b0      	blx	r6
    1264:	37b0      	adds	r7, #176	; 0xb0
    1266:	683b      	ldr	r3, [r7, #0]
    1268:	1ac0      	subs	r0, r0, r3
    126a:	23fa      	movs	r3, #250	; 0xfa
    126c:	00db      	lsls	r3, r3, #3
    126e:	4298      	cmp	r0, r3
    1270:	d90c      	bls.n	128c <flight+0xec>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1272:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1274:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1276:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1278:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    127a:	6811      	ldr	r1, [r2, #0]
    127c:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    127e:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1280:	0023      	movs	r3, r4
    1282:	33b8      	adds	r3, #184	; 0xb8
    1284:	6019      	str	r1, [r3, #0]
    1286:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1288:	47b0      	blx	r6
    128a:	6038      	str	r0, [r7, #0]
        }

        //logSensors(my_altimeter);


        if ((millis() - my_altimeter->StartupTick) > 10000) {
    128c:	47b0      	blx	r6
    128e:	23ca      	movs	r3, #202	; 0xca
    1290:	009b      	lsls	r3, r3, #2
    1292:	58e3      	ldr	r3, [r4, r3]
    1294:	1ac0      	subs	r0, r0, r3
    1296:	4ba7      	ldr	r3, [pc, #668]	; (1534 <flight+0x394>)
    1298:	4298      	cmp	r0, r3
    129a:	d90a      	bls.n	12b2 <flight+0x112>
            findNewFlightStart(my_altimeter);
    129c:	0020      	movs	r0, r4
    129e:	4ba6      	ldr	r3, [pc, #664]	; (1538 <flight+0x398>)
    12a0:	4798      	blx	r3
            logFlight(my_altimeter);
    12a2:	0020      	movs	r0, r4
    12a4:	4ba5      	ldr	r3, [pc, #660]	; (153c <flight+0x39c>)
    12a6:	4798      	blx	r3
            startupJingle();
    12a8:	4ba5      	ldr	r3, [pc, #660]	; (1540 <flight+0x3a0>)
    12aa:	4798      	blx	r3
			//my_altimeter->myFlightState = flightTest;
            my_altimeter->myFlightState = flightPad;
    12ac:	2302      	movs	r3, #2
    12ae:	7023      	strb	r3, [r4, #0]
            break;
    12b0:	e129      	b.n	1506 <flight+0x366>
        }

        attemptConnection(my_altimeter);
    12b2:	0020      	movs	r0, r4
    12b4:	4ba3      	ldr	r3, [pc, #652]	; (1544 <flight+0x3a4>)
    12b6:	4798      	blx	r3



        if (my_altimeter->myVoltages.batFloat < 3.5) {
    12b8:	23c6      	movs	r3, #198	; 0xc6
    12ba:	009b      	lsls	r3, r3, #2
    12bc:	58e0      	ldr	r0, [r4, r3]
    12be:	49a2      	ldr	r1, [pc, #648]	; (1548 <flight+0x3a8>)
    12c0:	4ba2      	ldr	r3, [pc, #648]	; (154c <flight+0x3ac>)
    12c2:	4798      	blx	r3
    12c4:	2800      	cmp	r0, #0
    12c6:	d100      	bne.n	12ca <flight+0x12a>
    12c8:	e11d      	b.n	1506 <flight+0x366>
            my_altimeter->myFlightState = flightIdle;
    12ca:	2301      	movs	r3, #1
    12cc:	7023      	strb	r3, [r4, #0]
    12ce:	e100      	b.n	14d2 <flight+0x332>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12d0:	4b9f      	ldr	r3, [pc, #636]	; (1550 <flight+0x3b0>)
    12d2:	7e1b      	ldrb	r3, [r3, #24]
    12d4:	075b      	lsls	r3, r3, #29
    12d6:	d400      	bmi.n	12da <flight+0x13a>
    12d8:	e115      	b.n	1506 <flight+0x366>
            u8_t possibleReset = usartDataIn(USART3);
    12da:	2003      	movs	r0, #3
    12dc:	4b9d      	ldr	r3, [pc, #628]	; (1554 <flight+0x3b4>)
    12de:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12e0:	2852      	cmp	r0, #82	; 0x52
    12e2:	d000      	beq.n	12e6 <flight+0x146>
    12e4:	e10f      	b.n	1506 <flight+0x366>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    12e6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12ea:	4a9b      	ldr	r2, [pc, #620]	; (1558 <flight+0x3b8>)
    12ec:	4b9b      	ldr	r3, [pc, #620]	; (155c <flight+0x3bc>)
    12ee:	60da      	str	r2, [r3, #12]
    12f0:	f3bf 8f4f 	dsb	sy
    12f4:	e7fe      	b.n	12f4 <flight+0x154>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    12f6:	0025      	movs	r5, r4
    12f8:	35c0      	adds	r5, #192	; 0xc0
    12fa:	6828      	ldr	r0, [r5, #0]
    12fc:	6869      	ldr	r1, [r5, #4]
    12fe:	4a83      	ldr	r2, [pc, #524]	; (150c <flight+0x36c>)
    1300:	4e83      	ldr	r6, [pc, #524]	; (1510 <flight+0x370>)
    1302:	9501      	str	r5, [sp, #4]
    1304:	4b83      	ldr	r3, [pc, #524]	; (1514 <flight+0x374>)
    1306:	47b0      	blx	r6
    1308:	0023      	movs	r3, r4
    130a:	33d4      	adds	r3, #212	; 0xd4
    130c:	0006      	movs	r6, r0
    130e:	6818      	ldr	r0, [r3, #0]
    1310:	4b81      	ldr	r3, [pc, #516]	; (1518 <flight+0x378>)
    1312:	000f      	movs	r7, r1
    1314:	4798      	blx	r3
    1316:	4d7e      	ldr	r5, [pc, #504]	; (1510 <flight+0x370>)
    1318:	4a7c      	ldr	r2, [pc, #496]	; (150c <flight+0x36c>)
    131a:	4b80      	ldr	r3, [pc, #512]	; (151c <flight+0x37c>)
    131c:	47a8      	blx	r5
    131e:	4d80      	ldr	r5, [pc, #512]	; (1520 <flight+0x380>)
    1320:	0002      	movs	r2, r0
    1322:	000b      	movs	r3, r1
    1324:	0030      	movs	r0, r6
    1326:	0039      	movs	r1, r7
    1328:	47a8      	blx	r5
    132a:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    132c:	4e7d      	ldr	r6, [pc, #500]	; (1524 <flight+0x384>)
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    132e:	6018      	str	r0, [r3, #0]
    1330:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    1332:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1334:	47b0      	blx	r6
    1336:	4d76      	ldr	r5, [pc, #472]	; (1510 <flight+0x370>)
    1338:	2200      	movs	r2, #0
    133a:	4b7b      	ldr	r3, [pc, #492]	; (1528 <flight+0x388>)
    133c:	47a8      	blx	r5
    133e:	23cd      	movs	r3, #205	; 0xcd
    1340:	009b      	lsls	r3, r3, #2
    1342:	9002      	str	r0, [sp, #8]
    1344:	9103      	str	r1, [sp, #12]
    1346:	58e0      	ldr	r0, [r4, r3]
    1348:	47b0      	blx	r6
    134a:	2200      	movs	r2, #0
    134c:	4b76      	ldr	r3, [pc, #472]	; (1528 <flight+0x388>)
    134e:	47a8      	blx	r5
    1350:	4d73      	ldr	r5, [pc, #460]	; (1520 <flight+0x380>)
    1352:	0002      	movs	r2, r0
    1354:	000b      	movs	r3, r1
    1356:	9802      	ldr	r0, [sp, #8]
    1358:	9903      	ldr	r1, [sp, #12]
    135a:	47a8      	blx	r5
    135c:	4f73      	ldr	r7, [pc, #460]	; (152c <flight+0x38c>)
    135e:	47b8      	blx	r7
    1360:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    1362:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1364:	47b0      	blx	r6
    1366:	4a69      	ldr	r2, [pc, #420]	; (150c <flight+0x36c>)
    1368:	4b6a      	ldr	r3, [pc, #424]	; (1514 <flight+0x374>)
    136a:	4d69      	ldr	r5, [pc, #420]	; (1510 <flight+0x370>)
    136c:	47a8      	blx	r5
    136e:	9002      	str	r0, [sp, #8]
    1370:	9103      	str	r1, [sp, #12]
    1372:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1374:	47b0      	blx	r6
    1376:	4a65      	ldr	r2, [pc, #404]	; (150c <flight+0x36c>)
    1378:	4b68      	ldr	r3, [pc, #416]	; (151c <flight+0x37c>)
    137a:	47a8      	blx	r5
    137c:	0002      	movs	r2, r0
    137e:	000b      	movs	r3, r1
    1380:	9802      	ldr	r0, [sp, #8]
    1382:	9903      	ldr	r1, [sp, #12]
    1384:	4d66      	ldr	r5, [pc, #408]	; (1520 <flight+0x380>)
    1386:	47a8      	blx	r5
    1388:	47b8      	blx	r7

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    138a:	0026      	movs	r6, r4
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    138c:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    138e:	4f68      	ldr	r7, [pc, #416]	; (1530 <flight+0x390>)
    1390:	47b8      	blx	r7
    1392:	36b0      	adds	r6, #176	; 0xb0
    1394:	6833      	ldr	r3, [r6, #0]
    1396:	4a60      	ldr	r2, [pc, #384]	; (1518 <flight+0x378>)
    1398:	1ac0      	subs	r0, r0, r3
    139a:	23fa      	movs	r3, #250	; 0xfa
    139c:	00db      	lsls	r3, r3, #3
    139e:	4298      	cmp	r0, r3
    13a0:	d90c      	bls.n	13bc <flight+0x21c>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    13a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13a4:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    13a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    13a8:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    13aa:	9b01      	ldr	r3, [sp, #4]
    13ac:	34b8      	adds	r4, #184	; 0xb8
    13ae:	681a      	ldr	r2, [r3, #0]
    13b0:	685b      	ldr	r3, [r3, #4]
    13b2:	6022      	str	r2, [r4, #0]
    13b4:	6063      	str	r3, [r4, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    13b6:	47b8      	blx	r7
    13b8:	6030      	str	r0, [r6, #0]
            break;
    13ba:	e0a4      	b.n	1506 <flight+0x366>
        }

        if (writeLog) {
    13bc:	4b68      	ldr	r3, [pc, #416]	; (1560 <flight+0x3c0>)
    13be:	7819      	ldrb	r1, [r3, #0]
    13c0:	2900      	cmp	r1, #0
    13c2:	d005      	beq.n	13d0 <flight+0x230>
            writeLog = false;
    13c4:	2100      	movs	r1, #0
    13c6:	7019      	strb	r1, [r3, #0]
    13c8:	2180      	movs	r1, #128	; 0x80
    13ca:	4b66      	ldr	r3, [pc, #408]	; (1564 <flight+0x3c4>)
    13cc:	0349      	lsls	r1, r1, #13
    13ce:	61d9      	str	r1, [r3, #28]
            //logSensors(my_altimeter);
            pinToggle(LedPin);
        }

        if ((my_altimeter->Velocity > 0.1) && ((my_altimeter->Altitude - my_altimeter->myBarometer.groundOffset) > 6)) {
    13d0:	23ce      	movs	r3, #206	; 0xce
    13d2:	009b      	lsls	r3, r3, #2
    13d4:	58e0      	ldr	r0, [r4, r3]
    13d6:	4790      	blx	r2
    13d8:	4a4c      	ldr	r2, [pc, #304]	; (150c <flight+0x36c>)
    13da:	4b63      	ldr	r3, [pc, #396]	; (1568 <flight+0x3c8>)
    13dc:	4d63      	ldr	r5, [pc, #396]	; (156c <flight+0x3cc>)
    13de:	47a8      	blx	r5
    13e0:	2800      	cmp	r0, #0
    13e2:	d067      	beq.n	14b4 <flight+0x314>
    13e4:	23cd      	movs	r3, #205	; 0xcd
    13e6:	009b      	lsls	r3, r3, #2
    13e8:	58e3      	ldr	r3, [r4, r3]
    13ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13ec:	1a9b      	subs	r3, r3, r2
    13ee:	2b06      	cmp	r3, #6
    13f0:	d960      	bls.n	14b4 <flight+0x314>
            my_altimeter->myFlightState = flightBoost;
    13f2:	2303      	movs	r3, #3
            logEvent(my_altimeter, 'L');
    13f4:	214c      	movs	r1, #76	; 0x4c
            //logSensors(my_altimeter);
            pinToggle(LedPin);
        }

        if ((my_altimeter->Velocity > 0.1) && ((my_altimeter->Altitude - my_altimeter->myBarometer.groundOffset) > 6)) {
            my_altimeter->myFlightState = flightBoost;
    13f6:	7023      	strb	r3, [r4, #0]
            logEvent(my_altimeter, 'L');
    13f8:	0020      	movs	r0, r4
    13fa:	4b5d      	ldr	r3, [pc, #372]	; (1570 <flight+0x3d0>)
    13fc:	4798      	blx	r3
    13fe:	e059      	b.n	14b4 <flight+0x314>
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
    1400:	4b57      	ldr	r3, [pc, #348]	; (1560 <flight+0x3c0>)
    1402:	781a      	ldrb	r2, [r3, #0]
    1404:	2a00      	cmp	r2, #0
    1406:	d019      	beq.n	143c <flight+0x29c>
            writeLog = false;
    1408:	2500      	movs	r5, #0
            logSensors(my_altimeter);
    140a:	0020      	movs	r0, r4
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
            writeLog = false;
    140c:	701d      	strb	r5, [r3, #0]
            logSensors(my_altimeter);
    140e:	4b59      	ldr	r3, [pc, #356]	; (1574 <flight+0x3d4>)
    1410:	4798      	blx	r3
            if (my_altimeter->myFlashMemory.pageReady) {
    1412:	4b59      	ldr	r3, [pc, #356]	; (1578 <flight+0x3d8>)
    1414:	5ce2      	ldrb	r2, [r4, r3]
    1416:	42aa      	cmp	r2, r5
    1418:	d010      	beq.n	143c <flight+0x29c>
    141a:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    141c:	54e5      	strb	r5, [r4, r3]
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    141e:	0021      	movs	r1, r4
    1420:	0025      	movs	r5, r4
    1422:	4b50      	ldr	r3, [pc, #320]	; (1564 <flight+0x3c4>)
    1424:	0352      	lsls	r2, r2, #13
    1426:	61da      	str	r2, [r3, #28]
    1428:	35fc      	adds	r5, #252	; 0xfc
    142a:	3111      	adds	r1, #17
    142c:	4b53      	ldr	r3, [pc, #332]	; (157c <flight+0x3dc>)
    142e:	31ff      	adds	r1, #255	; 0xff
    1430:	68e8      	ldr	r0, [r5, #12]
    1432:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    1434:	68eb      	ldr	r3, [r5, #12]
    1436:	3301      	adds	r3, #1
    1438:	33ff      	adds	r3, #255	; 0xff
    143a:	60eb      	str	r3, [r5, #12]
            }
        }


        if (my_altimeter->Velocity < 0) {
    143c:	23ce      	movs	r3, #206	; 0xce
    143e:	009b      	lsls	r3, r3, #2
    1440:	4d42      	ldr	r5, [pc, #264]	; (154c <flight+0x3ac>)
    1442:	2100      	movs	r1, #0
    1444:	58e0      	ldr	r0, [r4, r3]
    1446:	47a8      	blx	r5
    1448:	2800      	cmp	r0, #0
    144a:	d008      	beq.n	145e <flight+0x2be>
            my_altimeter->myFlightState = flightDrogue;
    144c:	2306      	movs	r3, #6
            logEvent(my_altimeter, 'A');
    144e:	0020      	movs	r0, r4
            }
        }


        if (my_altimeter->Velocity < 0) {
            my_altimeter->myFlightState = flightDrogue;
    1450:	7023      	strb	r3, [r4, #0]
            logEvent(my_altimeter, 'A');
    1452:	2141      	movs	r1, #65	; 0x41
    1454:	4b46      	ldr	r3, [pc, #280]	; (1570 <flight+0x3d0>)
    1456:	4798      	blx	r3
            beep(100);
    1458:	2064      	movs	r0, #100	; 0x64
    145a:	4b49      	ldr	r3, [pc, #292]	; (1580 <flight+0x3e0>)
    145c:	4798      	blx	r3

        }

        if (my_altimeter->myVoltages.batFloat < 3.5) {
    145e:	23c6      	movs	r3, #198	; 0xc6
    1460:	009b      	lsls	r3, r3, #2
    1462:	4939      	ldr	r1, [pc, #228]	; (1548 <flight+0x3a8>)
    1464:	58e0      	ldr	r0, [r4, r3]
    1466:	47a8      	blx	r5
    1468:	e02a      	b.n	14c0 <flight+0x320>

        break;
    case flightDrogue:


        if (my_altimeter->myFlashMemory.pageReady) {
    146a:	4b43      	ldr	r3, [pc, #268]	; (1578 <flight+0x3d8>)
    146c:	5ce2      	ldrb	r2, [r4, r3]
    146e:	2a00      	cmp	r2, #0
    1470:	d020      	beq.n	14b4 <flight+0x314>
            my_altimeter->myFlashMemory.pageReady = false;
    1472:	2200      	movs	r2, #0
    1474:	54e2      	strb	r2, [r4, r3]
    1476:	e00d      	b.n	1494 <flight+0x2f4>


        break;
    case flightTest:

        if (writeLog) {
    1478:	4b39      	ldr	r3, [pc, #228]	; (1560 <flight+0x3c0>)
    147a:	781a      	ldrb	r2, [r3, #0]
    147c:	2a00      	cmp	r2, #0
    147e:	d019      	beq.n	14b4 <flight+0x314>
            writeLog = false;
    1480:	2500      	movs	r5, #0
            logSensors(my_altimeter);
    1482:	0020      	movs	r0, r4

        break;
    case flightTest:

        if (writeLog) {
            writeLog = false;
    1484:	701d      	strb	r5, [r3, #0]
            logSensors(my_altimeter);
    1486:	4b3b      	ldr	r3, [pc, #236]	; (1574 <flight+0x3d4>)
    1488:	4798      	blx	r3
            if (my_altimeter->myFlashMemory.pageReady) {
    148a:	4b3b      	ldr	r3, [pc, #236]	; (1578 <flight+0x3d8>)
    148c:	5ce2      	ldrb	r2, [r4, r3]
    148e:	42aa      	cmp	r2, r5
    1490:	d010      	beq.n	14b4 <flight+0x314>
                my_altimeter->myFlashMemory.pageReady = false;
    1492:	54e5      	strb	r5, [r4, r3]
    1494:	2280      	movs	r2, #128	; 0x80
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    1496:	0025      	movs	r5, r4
    1498:	0021      	movs	r1, r4
    149a:	4b32      	ldr	r3, [pc, #200]	; (1564 <flight+0x3c4>)
    149c:	0352      	lsls	r2, r2, #13
    149e:	61da      	str	r2, [r3, #28]
    14a0:	35fc      	adds	r5, #252	; 0xfc
    14a2:	3111      	adds	r1, #17
    14a4:	4b35      	ldr	r3, [pc, #212]	; (157c <flight+0x3dc>)
    14a6:	31ff      	adds	r1, #255	; 0xff
    14a8:	68e8      	ldr	r0, [r5, #12]
    14aa:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    14ac:	68eb      	ldr	r3, [r5, #12]
    14ae:	3301      	adds	r3, #1
    14b0:	33ff      	adds	r3, #255	; 0xff
    14b2:	60eb      	str	r3, [r5, #12]
            }
        }
        if (my_altimeter->myVoltages.batFloat < 3.5) {
    14b4:	23c6      	movs	r3, #198	; 0xc6
    14b6:	009b      	lsls	r3, r3, #2
    14b8:	58e0      	ldr	r0, [r4, r3]
    14ba:	4923      	ldr	r1, [pc, #140]	; (1548 <flight+0x3a8>)
    14bc:	4b23      	ldr	r3, [pc, #140]	; (154c <flight+0x3ac>)
    14be:	4798      	blx	r3
    14c0:	2800      	cmp	r0, #0
    14c2:	d020      	beq.n	1506 <flight+0x366>
            my_altimeter->myFlightState = flightIdle;
    14c4:	2301      	movs	r3, #1
    14c6:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    14c8:	4b2e      	ldr	r3, [pc, #184]	; (1584 <flight+0x3e4>)
    14ca:	4798      	blx	r3
            writeFlightEndAddress(my_altimeter);
    14cc:	0020      	movs	r0, r4
    14ce:	4b2e      	ldr	r3, [pc, #184]	; (1588 <flight+0x3e8>)
    14d0:	4798      	blx	r3
            delay_ms(80);
    14d2:	4c2e      	ldr	r4, [pc, #184]	; (158c <flight+0x3ec>)
    14d4:	2050      	movs	r0, #80	; 0x50
    14d6:	47a0      	blx	r4
            beep(300);
    14d8:	2096      	movs	r0, #150	; 0x96
    14da:	4d29      	ldr	r5, [pc, #164]	; (1580 <flight+0x3e0>)
    14dc:	0040      	lsls	r0, r0, #1
    14de:	47a8      	blx	r5
            delay_ms(80);
    14e0:	2050      	movs	r0, #80	; 0x50
    14e2:	47a0      	blx	r4
            beep(300);
    14e4:	2096      	movs	r0, #150	; 0x96
    14e6:	0040      	lsls	r0, r0, #1
    14e8:	47a8      	blx	r5
            delay_ms(80);
    14ea:	2050      	movs	r0, #80	; 0x50
    14ec:	47a0      	blx	r4
            beep(300);
    14ee:	2096      	movs	r0, #150	; 0x96
    14f0:	0040      	lsls	r0, r0, #1
    14f2:	47a8      	blx	r5
            delay_ms(80);
    14f4:	2050      	movs	r0, #80	; 0x50
    14f6:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    14f8:	2280      	movs	r2, #128	; 0x80
    14fa:	4b1a      	ldr	r3, [pc, #104]	; (1564 <flight+0x3c4>)
    14fc:	0392      	lsls	r2, r2, #14
    14fe:	615a      	str	r2, [r3, #20]
    1500:	2280      	movs	r2, #128	; 0x80
    1502:	0352      	lsls	r2, r2, #13
    1504:	615a      	str	r2, [r3, #20]

        break;
    }


}
    1506:	b005      	add	sp, #20
    1508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	9999999a 	.word	0x9999999a
    1510:	00005495 	.word	0x00005495
    1514:	3fe99999 	.word	0x3fe99999
    1518:	000061d1 	.word	0x000061d1
    151c:	3fc99999 	.word	0x3fc99999
    1520:	000045f5 	.word	0x000045f5
    1524:	00006161 	.word	0x00006161
    1528:	3fe00000 	.word	0x3fe00000
    152c:	00003e51 	.word	0x00003e51
    1530:	0000103d 	.word	0x0000103d
    1534:	00002710 	.word	0x00002710
    1538:	000023a5 	.word	0x000023a5
    153c:	00002171 	.word	0x00002171
    1540:	00000e15 	.word	0x00000e15
    1544:	000029b9 	.word	0x000029b9
    1548:	40600000 	.word	0x40600000
    154c:	00003d79 	.word	0x00003d79
    1550:	42001400 	.word	0x42001400
    1554:	000029a9 	.word	0x000029a9
    1558:	05fa0004 	.word	0x05fa0004
    155c:	e000ed00 	.word	0xe000ed00
    1560:	200004d1 	.word	0x200004d1
    1564:	41004400 	.word	0x41004400
    1568:	3fb99999 	.word	0x3fb99999
    156c:	00003d2d 	.word	0x00003d2d
    1570:	000021d1 	.word	0x000021d1
    1574:	0000221d 	.word	0x0000221d
    1578:	00000311 	.word	0x00000311
    157c:	000002cd 	.word	0x000002cd
    1580:	00000dd9 	.word	0x00000dd9
    1584:	000001e5 	.word	0x000001e5
    1588:	00002371 	.word	0x00002371
    158c:	00000ff1 	.word	0x00000ff1

00001590 <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1590:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1592:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1594:	4cdb      	ldr	r4, [pc, #876]	; (1904 <computeKalmanGains+0x374>)
    1596:	4adc      	ldr	r2, [pc, #880]	; (1908 <computeKalmanGains+0x378>)
    1598:	4bdc      	ldr	r3, [pc, #880]	; (190c <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    159a:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    159c:	60a2      	str	r2, [r4, #8]
    159e:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    15a0:	62a2      	str	r2, [r4, #40]	; 0x28
    15a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    15a4:	4ada      	ldr	r2, [pc, #872]	; (1910 <computeKalmanGains+0x380>)
    15a6:	4bdb      	ldr	r3, [pc, #876]	; (1914 <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    15a8:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    15aa:	6122      	str	r2, [r4, #16]
    15ac:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15ae:	48d6      	ldr	r0, [pc, #856]	; (1908 <computeKalmanGains+0x378>)
    15b0:	49d9      	ldr	r1, [pc, #868]	; (1918 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    15b2:	2200      	movs	r2, #0
    15b4:	ae4c      	add	r6, sp, #304	; 0x130
    15b6:	ab40      	add	r3, sp, #256	; 0x100
    15b8:	1977      	adds	r7, r6, r5
    15ba:	18ee      	adds	r6, r5, r3
    15bc:	4bd7      	ldr	r3, [pc, #860]	; (191c <computeKalmanGains+0x38c>)
    15be:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15c0:	6038      	str	r0, [r7, #0]
    15c2:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    15c4:	6032      	str	r2, [r6, #0]
    15c6:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15c8:	60b8      	str	r0, [r7, #8]
    15ca:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    15cc:	60b2      	str	r2, [r6, #8]
    15ce:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    15d0:	2d30      	cmp	r5, #48	; 0x30
    15d2:	d1ee      	bne.n	15b2 <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    15d4:	6822      	ldr	r2, [r4, #0]
    15d6:	6863      	ldr	r3, [r4, #4]
    15d8:	921a      	str	r2, [sp, #104]	; 0x68
    15da:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15dc:	69a2      	ldr	r2, [r4, #24]
    15de:	69e3      	ldr	r3, [r4, #28]
    15e0:	921c      	str	r2, [sp, #112]	; 0x70
    15e2:	931d      	str	r3, [sp, #116]	; 0x74
    15e4:	6a22      	ldr	r2, [r4, #32]
    15e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15e8:	921e      	str	r2, [sp, #120]	; 0x78
    15ea:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
    15ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    15f0:	9220      	str	r2, [sp, #128]	; 0x80
    15f2:	9321      	str	r3, [sp, #132]	; 0x84
    15f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    15f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    15f8:	9222      	str	r2, [sp, #136]	; 0x88
    15fa:	9323      	str	r3, [sp, #140]	; 0x8c
    15fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    15fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1600:	9224      	str	r2, [sp, #144]	; 0x90
    1602:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1604:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1606:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1608:	9238      	str	r2, [sp, #224]	; 0xe0
    160a:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    160c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    160e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1610:	923a      	str	r2, [sp, #232]	; 0xe8
    1612:	933b      	str	r3, [sp, #236]	; 0xec
    1614:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1616:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    1618:	933c      	str	r3, [sp, #240]	; 0xf0
    161a:	943d      	str	r4, [sp, #244]	; 0xf4
    161c:	2300      	movs	r3, #0
    161e:	4cc0      	ldr	r4, [pc, #768]	; (1920 <computeKalmanGains+0x390>)
    1620:	9302      	str	r3, [sp, #8]
    1622:	9403      	str	r4, [sp, #12]
    1624:	2300      	movs	r3, #0
    1626:	2400      	movs	r4, #0
    1628:	9312      	str	r3, [sp, #72]	; 0x48
    162a:	9413      	str	r4, [sp, #76]	; 0x4c
    162c:	9310      	str	r3, [sp, #64]	; 0x40
    162e:	9411      	str	r4, [sp, #68]	; 0x44
    1630:	9304      	str	r3, [sp, #16]
    1632:	9405      	str	r4, [sp, #20]
    1634:	2300      	movs	r3, #0
    1636:	4cba      	ldr	r4, [pc, #744]	; (1920 <computeKalmanGains+0x390>)
    1638:	930e      	str	r3, [sp, #56]	; 0x38
    163a:	940f      	str	r4, [sp, #60]	; 0x3c
    163c:	2300      	movs	r3, #0
    163e:	2400      	movs	r4, #0
    1640:	9308      	str	r3, [sp, #32]
    1642:	9409      	str	r4, [sp, #36]	; 0x24
    1644:	930c      	str	r3, [sp, #48]	; 0x30
    1646:	940d      	str	r4, [sp, #52]	; 0x34
    1648:	930a      	str	r3, [sp, #40]	; 0x28
    164a:	940b      	str	r4, [sp, #44]	; 0x2c
    164c:	2480      	movs	r4, #128	; 0x80
    164e:	2300      	movs	r3, #0
    1650:	05e4      	lsls	r4, r4, #23
    1652:	9306      	str	r3, [sp, #24]
    1654:	9407      	str	r4, [sp, #28]
    1656:	2300      	movs	r3, #0
    1658:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    165a:	4db2      	ldr	r5, [pc, #712]	; (1924 <computeKalmanGains+0x394>)
    165c:	9a06      	ldr	r2, [sp, #24]
    165e:	9b07      	ldr	r3, [sp, #28]
    1660:	981a      	ldr	r0, [sp, #104]	; 0x68
    1662:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1664:	47a8      	blx	r5
    1666:	4aa8      	ldr	r2, [pc, #672]	; (1908 <computeKalmanGains+0x378>)
    1668:	0006      	movs	r6, r0
    166a:	000f      	movs	r7, r1
    166c:	9808      	ldr	r0, [sp, #32]
    166e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1670:	4ba6      	ldr	r3, [pc, #664]	; (190c <computeKalmanGains+0x37c>)
    1672:	47a8      	blx	r5
    1674:	4cac      	ldr	r4, [pc, #688]	; (1928 <computeKalmanGains+0x398>)
    1676:	0002      	movs	r2, r0
    1678:	000b      	movs	r3, r1
    167a:	0030      	movs	r0, r6
    167c:	0039      	movs	r1, r7
    167e:	47a0      	blx	r4
    1680:	4aa3      	ldr	r2, [pc, #652]	; (1910 <computeKalmanGains+0x380>)
    1682:	0006      	movs	r6, r0
    1684:	000f      	movs	r7, r1
    1686:	9810      	ldr	r0, [sp, #64]	; 0x40
    1688:	9911      	ldr	r1, [sp, #68]	; 0x44
    168a:	4ba2      	ldr	r3, [pc, #648]	; (1914 <computeKalmanGains+0x384>)
    168c:	47a8      	blx	r5
    168e:	0002      	movs	r2, r0
    1690:	000b      	movs	r3, r1
    1692:	0030      	movs	r0, r6
    1694:	0039      	movs	r1, r7
    1696:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    169a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    169c:	9016      	str	r0, [sp, #88]	; 0x58
    169e:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16a0:	981a      	ldr	r0, [sp, #104]	; 0x68
    16a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    16a4:	47a8      	blx	r5
    16a6:	4a98      	ldr	r2, [pc, #608]	; (1908 <computeKalmanGains+0x378>)
    16a8:	0006      	movs	r6, r0
    16aa:	000f      	movs	r7, r1
    16ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    16ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
    16b0:	4b96      	ldr	r3, [pc, #600]	; (190c <computeKalmanGains+0x37c>)
    16b2:	47a8      	blx	r5
    16b4:	0002      	movs	r2, r0
    16b6:	000b      	movs	r3, r1
    16b8:	0030      	movs	r0, r6
    16ba:	0039      	movs	r1, r7
    16bc:	47a0      	blx	r4
    16be:	4a94      	ldr	r2, [pc, #592]	; (1910 <computeKalmanGains+0x380>)
    16c0:	0006      	movs	r6, r0
    16c2:	000f      	movs	r7, r1
    16c4:	9812      	ldr	r0, [sp, #72]	; 0x48
    16c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    16c8:	4b92      	ldr	r3, [pc, #584]	; (1914 <computeKalmanGains+0x384>)
    16ca:	47a8      	blx	r5
    16cc:	0002      	movs	r2, r0
    16ce:	000b      	movs	r3, r1
    16d0:	0030      	movs	r0, r6
    16d2:	0039      	movs	r1, r7
    16d4:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16da:	9000      	str	r0, [sp, #0]
    16dc:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16de:	981a      	ldr	r0, [sp, #104]	; 0x68
    16e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    16e2:	47a8      	blx	r5
    16e4:	4a88      	ldr	r2, [pc, #544]	; (1908 <computeKalmanGains+0x378>)
    16e6:	0006      	movs	r6, r0
    16e8:	000f      	movs	r7, r1
    16ea:	9804      	ldr	r0, [sp, #16]
    16ec:	9905      	ldr	r1, [sp, #20]
    16ee:	4b87      	ldr	r3, [pc, #540]	; (190c <computeKalmanGains+0x37c>)
    16f0:	47a8      	blx	r5
    16f2:	0002      	movs	r2, r0
    16f4:	000b      	movs	r3, r1
    16f6:	0030      	movs	r0, r6
    16f8:	0039      	movs	r1, r7
    16fa:	47a0      	blx	r4
    16fc:	4a84      	ldr	r2, [pc, #528]	; (1910 <computeKalmanGains+0x380>)
    16fe:	0006      	movs	r6, r0
    1700:	000f      	movs	r7, r1
    1702:	9802      	ldr	r0, [sp, #8]
    1704:	9903      	ldr	r1, [sp, #12]
    1706:	4b83      	ldr	r3, [pc, #524]	; (1914 <computeKalmanGains+0x384>)
    1708:	47a8      	blx	r5
    170a:	0002      	movs	r2, r0
    170c:	000b      	movs	r3, r1
    170e:	0030      	movs	r0, r6
    1710:	0039      	movs	r1, r7
    1712:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1714:	9a06      	ldr	r2, [sp, #24]
    1716:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1718:	9014      	str	r0, [sp, #80]	; 0x50
    171a:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    171c:	981c      	ldr	r0, [sp, #112]	; 0x70
    171e:	991d      	ldr	r1, [sp, #116]	; 0x74
    1720:	47a8      	blx	r5
    1722:	9a08      	ldr	r2, [sp, #32]
    1724:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1726:	0006      	movs	r6, r0
    1728:	000f      	movs	r7, r1
    172a:	981e      	ldr	r0, [sp, #120]	; 0x78
    172c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    172e:	47a8      	blx	r5
    1730:	0002      	movs	r2, r0
    1732:	000b      	movs	r3, r1
    1734:	0030      	movs	r0, r6
    1736:	0039      	movs	r1, r7
    1738:	47a0      	blx	r4
    173a:	4a73      	ldr	r2, [pc, #460]	; (1908 <computeKalmanGains+0x378>)
    173c:	0006      	movs	r6, r0
    173e:	000f      	movs	r7, r1
    1740:	9810      	ldr	r0, [sp, #64]	; 0x40
    1742:	9911      	ldr	r1, [sp, #68]	; 0x44
    1744:	4b71      	ldr	r3, [pc, #452]	; (190c <computeKalmanGains+0x37c>)
    1746:	47a8      	blx	r5
    1748:	0002      	movs	r2, r0
    174a:	000b      	movs	r3, r1
    174c:	0030      	movs	r0, r6
    174e:	0039      	movs	r1, r7
    1750:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1756:	9018      	str	r0, [sp, #96]	; 0x60
    1758:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    175a:	981c      	ldr	r0, [sp, #112]	; 0x70
    175c:	991d      	ldr	r1, [sp, #116]	; 0x74
    175e:	47a8      	blx	r5
    1760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1764:	0006      	movs	r6, r0
    1766:	000f      	movs	r7, r1
    1768:	981e      	ldr	r0, [sp, #120]	; 0x78
    176a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    176c:	47a8      	blx	r5
    176e:	0002      	movs	r2, r0
    1770:	000b      	movs	r3, r1
    1772:	0030      	movs	r0, r6
    1774:	0039      	movs	r1, r7
    1776:	47a0      	blx	r4
    1778:	4a63      	ldr	r2, [pc, #396]	; (1908 <computeKalmanGains+0x378>)
    177a:	0006      	movs	r6, r0
    177c:	000f      	movs	r7, r1
    177e:	9812      	ldr	r0, [sp, #72]	; 0x48
    1780:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1782:	4b62      	ldr	r3, [pc, #392]	; (190c <computeKalmanGains+0x37c>)
    1784:	47a8      	blx	r5
    1786:	0002      	movs	r2, r0
    1788:	000b      	movs	r3, r1
    178a:	0030      	movs	r0, r6
    178c:	0039      	movs	r1, r7
    178e:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1792:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1794:	9026      	str	r0, [sp, #152]	; 0x98
    1796:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1798:	981c      	ldr	r0, [sp, #112]	; 0x70
    179a:	991d      	ldr	r1, [sp, #116]	; 0x74
    179c:	47a8      	blx	r5
    179e:	9a04      	ldr	r2, [sp, #16]
    17a0:	9b05      	ldr	r3, [sp, #20]
    17a2:	0006      	movs	r6, r0
    17a4:	000f      	movs	r7, r1
    17a6:	981e      	ldr	r0, [sp, #120]	; 0x78
    17a8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    17aa:	47a8      	blx	r5
    17ac:	0002      	movs	r2, r0
    17ae:	000b      	movs	r3, r1
    17b0:	0030      	movs	r0, r6
    17b2:	0039      	movs	r1, r7
    17b4:	47a0      	blx	r4
    17b6:	4a54      	ldr	r2, [pc, #336]	; (1908 <computeKalmanGains+0x378>)
    17b8:	0006      	movs	r6, r0
    17ba:	000f      	movs	r7, r1
    17bc:	9802      	ldr	r0, [sp, #8]
    17be:	9903      	ldr	r1, [sp, #12]
    17c0:	4b52      	ldr	r3, [pc, #328]	; (190c <computeKalmanGains+0x37c>)
    17c2:	47a8      	blx	r5
    17c4:	0002      	movs	r2, r0
    17c6:	000b      	movs	r3, r1
    17c8:	0030      	movs	r0, r6
    17ca:	0039      	movs	r1, r7
    17cc:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17ce:	9a06      	ldr	r2, [sp, #24]
    17d0:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    17d2:	9028      	str	r0, [sp, #160]	; 0xa0
    17d4:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17d6:	9820      	ldr	r0, [sp, #128]	; 0x80
    17d8:	9921      	ldr	r1, [sp, #132]	; 0x84
    17da:	47a8      	blx	r5
    17dc:	9a08      	ldr	r2, [sp, #32]
    17de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17e0:	0006      	movs	r6, r0
    17e2:	000f      	movs	r7, r1
    17e4:	9822      	ldr	r0, [sp, #136]	; 0x88
    17e6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    17e8:	47a8      	blx	r5
    17ea:	0002      	movs	r2, r0
    17ec:	000b      	movs	r3, r1
    17ee:	0030      	movs	r0, r6
    17f0:	0039      	movs	r1, r7
    17f2:	47a0      	blx	r4
    17f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    17f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    17f8:	0006      	movs	r6, r0
    17fa:	000f      	movs	r7, r1
    17fc:	9824      	ldr	r0, [sp, #144]	; 0x90
    17fe:	9925      	ldr	r1, [sp, #148]	; 0x94
    1800:	47a8      	blx	r5
    1802:	0002      	movs	r2, r0
    1804:	000b      	movs	r3, r1
    1806:	0030      	movs	r0, r6
    1808:	0039      	movs	r1, r7
    180a:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    180c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    180e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1810:	9010      	str	r0, [sp, #64]	; 0x40
    1812:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1814:	9820      	ldr	r0, [sp, #128]	; 0x80
    1816:	9921      	ldr	r1, [sp, #132]	; 0x84
    1818:	47a8      	blx	r5
    181a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    181c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    181e:	0006      	movs	r6, r0
    1820:	000f      	movs	r7, r1
    1822:	9822      	ldr	r0, [sp, #136]	; 0x88
    1824:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1826:	47a8      	blx	r5
    1828:	0002      	movs	r2, r0
    182a:	000b      	movs	r3, r1
    182c:	0030      	movs	r0, r6
    182e:	0039      	movs	r1, r7
    1830:	47a0      	blx	r4
    1832:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1836:	0006      	movs	r6, r0
    1838:	000f      	movs	r7, r1
    183a:	9824      	ldr	r0, [sp, #144]	; 0x90
    183c:	9925      	ldr	r1, [sp, #148]	; 0x94
    183e:	47a8      	blx	r5
    1840:	0002      	movs	r2, r0
    1842:	000b      	movs	r3, r1
    1844:	0030      	movs	r0, r6
    1846:	0039      	movs	r1, r7
    1848:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    184a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    184c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    184e:	9006      	str	r0, [sp, #24]
    1850:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1852:	9820      	ldr	r0, [sp, #128]	; 0x80
    1854:	9921      	ldr	r1, [sp, #132]	; 0x84
    1856:	47a8      	blx	r5
    1858:	9a04      	ldr	r2, [sp, #16]
    185a:	9b05      	ldr	r3, [sp, #20]
    185c:	0006      	movs	r6, r0
    185e:	000f      	movs	r7, r1
    1860:	9822      	ldr	r0, [sp, #136]	; 0x88
    1862:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1864:	47a8      	blx	r5
    1866:	0002      	movs	r2, r0
    1868:	000b      	movs	r3, r1
    186a:	0030      	movs	r0, r6
    186c:	0039      	movs	r1, r7
    186e:	47a0      	blx	r4
    1870:	9a02      	ldr	r2, [sp, #8]
    1872:	9b03      	ldr	r3, [sp, #12]
    1874:	0006      	movs	r6, r0
    1876:	000f      	movs	r7, r1
    1878:	9824      	ldr	r0, [sp, #144]	; 0x90
    187a:	9925      	ldr	r1, [sp, #148]	; 0x94
    187c:	47a8      	blx	r5
    187e:	0002      	movs	r2, r0
    1880:	000b      	movs	r3, r1
    1882:	0030      	movs	r0, r6
    1884:	0039      	movs	r1, r7
    1886:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1888:	4a1f      	ldr	r2, [pc, #124]	; (1908 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    188a:	9002      	str	r0, [sp, #8]
    188c:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    188e:	9800      	ldr	r0, [sp, #0]
    1890:	9901      	ldr	r1, [sp, #4]
    1892:	4b1e      	ldr	r3, [pc, #120]	; (190c <computeKalmanGains+0x37c>)
    1894:	47a8      	blx	r5
    1896:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    189a:	47a0      	blx	r4
    189c:	4a1c      	ldr	r2, [pc, #112]	; (1910 <computeKalmanGains+0x380>)
    189e:	0006      	movs	r6, r0
    18a0:	000f      	movs	r7, r1
    18a2:	9814      	ldr	r0, [sp, #80]	; 0x50
    18a4:	9915      	ldr	r1, [sp, #84]	; 0x54
    18a6:	4b1b      	ldr	r3, [pc, #108]	; (1914 <computeKalmanGains+0x384>)
    18a8:	47a8      	blx	r5
    18aa:	0002      	movs	r2, r0
    18ac:	000b      	movs	r3, r1
    18ae:	0030      	movs	r0, r6
    18b0:	0039      	movs	r1, r7
    18b2:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18b4:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    18b6:	9008      	str	r0, [sp, #32]
    18b8:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18ba:	9816      	ldr	r0, [sp, #88]	; 0x58
    18bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    18be:	2300      	movs	r3, #0
    18c0:	47a8      	blx	r5
    18c2:	0006      	movs	r6, r0
    18c4:	000f      	movs	r7, r1
    18c6:	0002      	movs	r2, r0
    18c8:	000b      	movs	r3, r1
    18ca:	9800      	ldr	r0, [sp, #0]
    18cc:	9901      	ldr	r1, [sp, #4]
    18ce:	47a0      	blx	r4
    18d0:	4a0d      	ldr	r2, [pc, #52]	; (1908 <computeKalmanGains+0x378>)
    18d2:	9004      	str	r0, [sp, #16]
    18d4:	9105      	str	r1, [sp, #20]
    18d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    18d8:	9915      	ldr	r1, [sp, #84]	; 0x54
    18da:	4b0c      	ldr	r3, [pc, #48]	; (190c <computeKalmanGains+0x37c>)
    18dc:	47a8      	blx	r5
    18de:	0002      	movs	r2, r0
    18e0:	000b      	movs	r3, r1
    18e2:	9804      	ldr	r0, [sp, #16]
    18e4:	9905      	ldr	r1, [sp, #20]
    18e6:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    18e8:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18ea:	9030      	str	r0, [sp, #192]	; 0xc0
    18ec:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    18ee:	9800      	ldr	r0, [sp, #0]
    18f0:	9901      	ldr	r1, [sp, #4]
    18f2:	2300      	movs	r3, #0
    18f4:	47a8      	blx	r5
    18f6:	0032      	movs	r2, r6
    18f8:	003b      	movs	r3, r7
    18fa:	47a0      	blx	r4
    18fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    18fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1900:	47a0      	blx	r4
    1902:	e013      	b.n	192c <computeKalmanGains+0x39c>
    1904:	20000010 	.word	0x20000010
    1908:	d2f1a9fc 	.word	0xd2f1a9fc
    190c:	3f80624d 	.word	0x3f80624d
    1910:	a0b5ed8d 	.word	0xa0b5ed8d
    1914:	3f00c6f7 	.word	0x3f00c6f7
    1918:	3f50624d 	.word	0x3f50624d
    191c:	3ff00000 	.word	0x3ff00000
    1920:	40220000 	.word	0x40220000
    1924:	00005495 	.word	0x00005495
    1928:	000045f5 	.word	0x000045f5
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    192c:	4ada      	ldr	r2, [pc, #872]	; (1c98 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    192e:	9114      	str	r1, [sp, #80]	; 0x50
    1930:	9004      	str	r0, [sp, #16]
    1932:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1934:	4bd9      	ldr	r3, [pc, #868]	; (1c9c <computeKalmanGains+0x70c>)
    1936:	9826      	ldr	r0, [sp, #152]	; 0x98
    1938:	9927      	ldr	r1, [sp, #156]	; 0x9c
    193a:	47a8      	blx	r5
    193c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    193e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1940:	47a0      	blx	r4
    1942:	4ad7      	ldr	r2, [pc, #860]	; (1ca0 <computeKalmanGains+0x710>)
    1944:	0006      	movs	r6, r0
    1946:	000f      	movs	r7, r1
    1948:	9828      	ldr	r0, [sp, #160]	; 0xa0
    194a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    194c:	4bd5      	ldr	r3, [pc, #852]	; (1ca4 <computeKalmanGains+0x714>)
    194e:	47a8      	blx	r5
    1950:	0002      	movs	r2, r0
    1952:	000b      	movs	r3, r1
    1954:	0030      	movs	r0, r6
    1956:	0039      	movs	r1, r7
    1958:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    195a:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    195c:	902a      	str	r0, [sp, #168]	; 0xa8
    195e:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1960:	9818      	ldr	r0, [sp, #96]	; 0x60
    1962:	9919      	ldr	r1, [sp, #100]	; 0x64
    1964:	2300      	movs	r3, #0
    1966:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1968:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    196a:	9032      	str	r0, [sp, #200]	; 0xc8
    196c:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    196e:	9826      	ldr	r0, [sp, #152]	; 0x98
    1970:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1972:	2300      	movs	r3, #0
    1974:	47a8      	blx	r5
    1976:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1978:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    197a:	47a0      	blx	r4
    197c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    197e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1980:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1982:	4ac5      	ldr	r2, [pc, #788]	; (1c98 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1984:	902c      	str	r0, [sp, #176]	; 0xb0
    1986:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1988:	9806      	ldr	r0, [sp, #24]
    198a:	9907      	ldr	r1, [sp, #28]
    198c:	4bc3      	ldr	r3, [pc, #780]	; (1c9c <computeKalmanGains+0x70c>)
    198e:	47a8      	blx	r5
    1990:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1992:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1994:	47a0      	blx	r4
    1996:	4ac2      	ldr	r2, [pc, #776]	; (1ca0 <computeKalmanGains+0x710>)
    1998:	0006      	movs	r6, r0
    199a:	000f      	movs	r7, r1
    199c:	9802      	ldr	r0, [sp, #8]
    199e:	9903      	ldr	r1, [sp, #12]
    19a0:	4bc0      	ldr	r3, [pc, #768]	; (1ca4 <computeKalmanGains+0x714>)
    19a2:	47a8      	blx	r5
    19a4:	0002      	movs	r2, r0
    19a6:	000b      	movs	r3, r1
    19a8:	0030      	movs	r0, r6
    19aa:	0039      	movs	r1, r7
    19ac:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19ae:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    19b0:	9000      	str	r0, [sp, #0]
    19b2:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19b4:	9810      	ldr	r0, [sp, #64]	; 0x40
    19b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    19b8:	2300      	movs	r3, #0
    19ba:	47a8      	blx	r5
    19bc:	0006      	movs	r6, r0
    19be:	000f      	movs	r7, r1
    19c0:	0002      	movs	r2, r0
    19c2:	000b      	movs	r3, r1
    19c4:	9806      	ldr	r0, [sp, #24]
    19c6:	9907      	ldr	r1, [sp, #28]
    19c8:	47a0      	blx	r4
    19ca:	4ab3      	ldr	r2, [pc, #716]	; (1c98 <computeKalmanGains+0x708>)
    19cc:	900a      	str	r0, [sp, #40]	; 0x28
    19ce:	910b      	str	r1, [sp, #44]	; 0x2c
    19d0:	9802      	ldr	r0, [sp, #8]
    19d2:	9903      	ldr	r1, [sp, #12]
    19d4:	4bb1      	ldr	r3, [pc, #708]	; (1c9c <computeKalmanGains+0x70c>)
    19d6:	47a8      	blx	r5
    19d8:	0002      	movs	r2, r0
    19da:	000b      	movs	r3, r1
    19dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    19de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    19e0:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    19e2:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19e4:	9012      	str	r0, [sp, #72]	; 0x48
    19e6:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    19e8:	9806      	ldr	r0, [sp, #24]
    19ea:	9907      	ldr	r1, [sp, #28]
    19ec:	2300      	movs	r3, #0
    19ee:	47a8      	blx	r5
    19f0:	0032      	movs	r2, r6
    19f2:	003b      	movs	r3, r7
    19f4:	47a0      	blx	r4
    19f6:	9a02      	ldr	r2, [sp, #8]
    19f8:	9b03      	ldr	r3, [sp, #12]
    19fa:	47a0      	blx	r4
    19fc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    19fe:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1a00:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a02:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1a04:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1a06:	9002      	str	r0, [sp, #8]
    1a08:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a0a:	9808      	ldr	r0, [sp, #32]
    1a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a0e:	47a0      	blx	r4
    1a10:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1a12:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    1a14:	900a      	str	r0, [sp, #40]	; 0x28
    1a16:	910b      	str	r1, [sp, #44]	; 0x2c
    1a18:	9802      	ldr	r0, [sp, #8]
    1a1a:	9903      	ldr	r1, [sp, #12]
    1a1c:	47a0      	blx	r4
    1a1e:	9a00      	ldr	r2, [sp, #0]
    1a20:	9b01      	ldr	r3, [sp, #4]
    1a22:	900c      	str	r0, [sp, #48]	; 0x30
    1a24:	910d      	str	r1, [sp, #52]	; 0x34
    1a26:	9804      	ldr	r0, [sp, #16]
    1a28:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a2a:	47a8      	blx	r5
    1a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a30:	900e      	str	r0, [sp, #56]	; 0x38
    1a32:	910f      	str	r1, [sp, #60]	; 0x3c
    1a34:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a38:	47a8      	blx	r5
    1a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a3e:	4e9a      	ldr	r6, [pc, #616]	; (1ca8 <computeKalmanGains+0x718>)
    1a40:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a46:	9006      	str	r0, [sp, #24]
    1a48:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a4a:	9808      	ldr	r0, [sp, #32]
    1a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a4e:	47a8      	blx	r5
    1a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a54:	47b0      	blx	r6
    1a56:	9a06      	ldr	r2, [sp, #24]
    1a58:	9b07      	ldr	r3, [sp, #28]
    1a5a:	4e94      	ldr	r6, [pc, #592]	; (1cac <computeKalmanGains+0x71c>)
    1a5c:	47b0      	blx	r6
    1a5e:	0002      	movs	r2, r0
    1a60:	000b      	movs	r3, r1
    1a62:	9240      	str	r2, [sp, #256]	; 0x100
    1a64:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a66:	2280      	movs	r2, #128	; 0x80
    1a68:	0612      	lsls	r2, r2, #24
    1a6a:	4694      	mov	ip, r2
    1a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1a6e:	9a04      	ldr	r2, [sp, #16]
    1a70:	4463      	add	r3, ip
    1a72:	932f      	str	r3, [sp, #188]	; 0xbc
    1a74:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a76:	9034      	str	r0, [sp, #208]	; 0xd0
    1a78:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a7a:	9808      	ldr	r0, [sp, #32]
    1a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a7e:	47a8      	blx	r5
    1a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a84:	0006      	movs	r6, r0
    1a86:	000f      	movs	r7, r1
    1a88:	9804      	ldr	r0, [sp, #16]
    1a8a:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a8c:	47a8      	blx	r5
    1a8e:	0002      	movs	r2, r0
    1a90:	000b      	movs	r3, r1
    1a92:	0030      	movs	r0, r6
    1a94:	0039      	movs	r1, r7
    1a96:	47a0      	blx	r4
    1a98:	9a06      	ldr	r2, [sp, #24]
    1a9a:	9b07      	ldr	r3, [sp, #28]
    1a9c:	4e83      	ldr	r6, [pc, #524]	; (1cac <computeKalmanGains+0x71c>)
    1a9e:	47b0      	blx	r6
    1aa0:	0002      	movs	r2, r0
    1aa2:	000b      	movs	r3, r1
    1aa4:	900e      	str	r0, [sp, #56]	; 0x38
    1aa6:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1aa8:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1aaa:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1aac:	9242      	str	r2, [sp, #264]	; 0x108
    1aae:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ab4:	47a8      	blx	r5
    1ab6:	9a00      	ldr	r2, [sp, #0]
    1ab8:	9b01      	ldr	r3, [sp, #4]
    1aba:	0006      	movs	r6, r0
    1abc:	000f      	movs	r7, r1
    1abe:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1ac0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1ac2:	47a8      	blx	r5
    1ac4:	0002      	movs	r2, r0
    1ac6:	000b      	movs	r3, r1
    1ac8:	0030      	movs	r0, r6
    1aca:	0039      	movs	r1, r7
    1acc:	4e76      	ldr	r6, [pc, #472]	; (1ca8 <computeKalmanGains+0x718>)
    1ace:	47b0      	blx	r6
    1ad0:	9a06      	ldr	r2, [sp, #24]
    1ad2:	9b07      	ldr	r3, [sp, #28]
    1ad4:	4e75      	ldr	r6, [pc, #468]	; (1cac <computeKalmanGains+0x71c>)
    1ad6:	47b0      	blx	r6
    1ad8:	0002      	movs	r2, r0
    1ada:	000b      	movs	r3, r1
    1adc:	913e      	str	r1, [sp, #248]	; 0xf8
    1ade:	9244      	str	r2, [sp, #272]	; 0x110
    1ae0:	9345      	str	r3, [sp, #276]	; 0x114
    1ae2:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1ae4:	9a04      	ldr	r2, [sp, #16]
    1ae6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ae8:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1aea:	992b      	ldr	r1, [sp, #172]	; 0xac
    1aec:	47a8      	blx	r5
    1aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1af2:	0006      	movs	r6, r0
    1af4:	000f      	movs	r7, r1
    1af6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1af8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1afa:	47a8      	blx	r5
    1afc:	0002      	movs	r2, r0
    1afe:	000b      	movs	r3, r1
    1b00:	0030      	movs	r0, r6
    1b02:	0039      	movs	r1, r7
    1b04:	47a0      	blx	r4
    1b06:	9a06      	ldr	r2, [sp, #24]
    1b08:	9b07      	ldr	r3, [sp, #28]
    1b0a:	4e68      	ldr	r6, [pc, #416]	; (1cac <computeKalmanGains+0x71c>)
    1b0c:	47b0      	blx	r6
    1b0e:	0002      	movs	r2, r0
    1b10:	000b      	movs	r3, r1
    1b12:	9010      	str	r0, [sp, #64]	; 0x40
    1b14:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1b16:	9800      	ldr	r0, [sp, #0]
    1b18:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1b1a:	9246      	str	r2, [sp, #280]	; 0x118
    1b1c:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b22:	47a8      	blx	r5
    1b24:	9a02      	ldr	r2, [sp, #8]
    1b26:	9b03      	ldr	r3, [sp, #12]
    1b28:	0006      	movs	r6, r0
    1b2a:	000f      	movs	r7, r1
    1b2c:	9800      	ldr	r0, [sp, #0]
    1b2e:	9901      	ldr	r1, [sp, #4]
    1b30:	47a8      	blx	r5
    1b32:	0002      	movs	r2, r0
    1b34:	000b      	movs	r3, r1
    1b36:	0030      	movs	r0, r6
    1b38:	0039      	movs	r1, r7
    1b3a:	4e5b      	ldr	r6, [pc, #364]	; (1ca8 <computeKalmanGains+0x718>)
    1b3c:	47b0      	blx	r6
    1b3e:	9a06      	ldr	r2, [sp, #24]
    1b40:	9b07      	ldr	r3, [sp, #28]
    1b42:	4e5a      	ldr	r6, [pc, #360]	; (1cac <computeKalmanGains+0x71c>)
    1b44:	47b0      	blx	r6
    1b46:	0002      	movs	r2, r0
    1b48:	000b      	movs	r3, r1
    1b4a:	9014      	str	r0, [sp, #80]	; 0x50
    1b4c:	9115      	str	r1, [sp, #84]	; 0x54
    1b4e:	9248      	str	r2, [sp, #288]	; 0x120
    1b50:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1b52:	9800      	ldr	r0, [sp, #0]
    1b54:	9901      	ldr	r1, [sp, #4]
    1b56:	9a04      	ldr	r2, [sp, #16]
    1b58:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1b5a:	47a8      	blx	r5
    1b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b60:	0006      	movs	r6, r0
    1b62:	000f      	movs	r7, r1
    1b64:	9802      	ldr	r0, [sp, #8]
    1b66:	9903      	ldr	r1, [sp, #12]
    1b68:	47a8      	blx	r5
    1b6a:	0002      	movs	r2, r0
    1b6c:	000b      	movs	r3, r1
    1b6e:	0030      	movs	r0, r6
    1b70:	0039      	movs	r1, r7
    1b72:	47a0      	blx	r4
    1b74:	9a06      	ldr	r2, [sp, #24]
    1b76:	9b07      	ldr	r3, [sp, #28]
    1b78:	4e4c      	ldr	r6, [pc, #304]	; (1cac <computeKalmanGains+0x71c>)
    1b7a:	47b0      	blx	r6
    1b7c:	0002      	movs	r2, r0
    1b7e:	000b      	movs	r3, r1
    1b80:	9036      	str	r0, [sp, #216]	; 0xd8
    1b82:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b84:	4e48      	ldr	r6, [pc, #288]	; (1ca8 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1b86:	924a      	str	r2, [sp, #296]	; 0x128
    1b88:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b8a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1b8c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1b8e:	2000      	movs	r0, #0
    1b90:	4947      	ldr	r1, [pc, #284]	; (1cb0 <computeKalmanGains+0x720>)
    1b92:	47b0      	blx	r6
    1b94:	0002      	movs	r2, r0
    1b96:	000b      	movs	r3, r1
    1b98:	900c      	str	r0, [sp, #48]	; 0x30
    1b9a:	910d      	str	r1, [sp, #52]	; 0x34
    1b9c:	9808      	ldr	r0, [sp, #32]
    1b9e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ba0:	47a8      	blx	r5
    1ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ba6:	0006      	movs	r6, r0
    1ba8:	000f      	movs	r7, r1
    1baa:	9800      	ldr	r0, [sp, #0]
    1bac:	9901      	ldr	r1, [sp, #4]
    1bae:	47a8      	blx	r5
    1bb0:	0002      	movs	r2, r0
    1bb2:	000b      	movs	r3, r1
    1bb4:	0030      	movs	r0, r6
    1bb6:	0039      	movs	r1, r7
    1bb8:	4e3b      	ldr	r6, [pc, #236]	; (1ca8 <computeKalmanGains+0x718>)
    1bba:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1bc0:	9006      	str	r0, [sp, #24]
    1bc2:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1bc4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1bc6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1bc8:	47a8      	blx	r5
    1bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bce:	0006      	movs	r6, r0
    1bd0:	000f      	movs	r7, r1
    1bd2:	9812      	ldr	r0, [sp, #72]	; 0x48
    1bd4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1bd6:	47a8      	blx	r5
    1bd8:	0002      	movs	r2, r0
    1bda:	000b      	movs	r3, r1
    1bdc:	0030      	movs	r0, r6
    1bde:	0039      	movs	r1, r7
    1be0:	4e31      	ldr	r6, [pc, #196]	; (1ca8 <computeKalmanGains+0x718>)
    1be2:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1be8:	900a      	str	r0, [sp, #40]	; 0x28
    1bea:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1bec:	9804      	ldr	r0, [sp, #16]
    1bee:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bf0:	47a8      	blx	r5
    1bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bf6:	0006      	movs	r6, r0
    1bf8:	000f      	movs	r7, r1
    1bfa:	9802      	ldr	r0, [sp, #8]
    1bfc:	9903      	ldr	r1, [sp, #12]
    1bfe:	47a8      	blx	r5
    1c00:	0002      	movs	r2, r0
    1c02:	000b      	movs	r3, r1
    1c04:	0030      	movs	r0, r6
    1c06:	0039      	movs	r1, r7
    1c08:	4e27      	ldr	r6, [pc, #156]	; (1ca8 <computeKalmanGains+0x718>)
    1c0a:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c0c:	2280      	movs	r2, #128	; 0x80
    1c0e:	0612      	lsls	r2, r2, #24
    1c10:	4694      	mov	ip, r2
    1c12:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    1c14:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c16:	4463      	add	r3, ip
    1c18:	932f      	str	r3, [sp, #188]	; 0xbc
    1c1a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1c1c:	900c      	str	r0, [sp, #48]	; 0x30
    1c1e:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c20:	9808      	ldr	r0, [sp, #32]
    1c22:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c24:	47a8      	blx	r5
    1c26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1c28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1c2a:	47a0      	blx	r4
    1c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1c30:	0006      	movs	r6, r0
    1c32:	000f      	movs	r7, r1
    1c34:	9800      	ldr	r0, [sp, #0]
    1c36:	9901      	ldr	r1, [sp, #4]
    1c38:	47a8      	blx	r5
    1c3a:	0002      	movs	r2, r0
    1c3c:	000b      	movs	r3, r1
    1c3e:	0030      	movs	r0, r6
    1c40:	0039      	movs	r1, r7
    1c42:	4e19      	ldr	r6, [pc, #100]	; (1ca8 <computeKalmanGains+0x718>)
    1c44:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c46:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1c48:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c4a:	9008      	str	r0, [sp, #32]
    1c4c:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c4e:	9826      	ldr	r0, [sp, #152]	; 0x98
    1c50:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1c52:	47a0      	blx	r4
    1c54:	4a10      	ldr	r2, [pc, #64]	; (1c98 <computeKalmanGains+0x708>)
    1c56:	0006      	movs	r6, r0
    1c58:	000f      	movs	r7, r1
    1c5a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1c5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1c5e:	4b0f      	ldr	r3, [pc, #60]	; (1c9c <computeKalmanGains+0x70c>)
    1c60:	47a8      	blx	r5
    1c62:	0002      	movs	r2, r0
    1c64:	000b      	movs	r3, r1
    1c66:	0030      	movs	r0, r6
    1c68:	0039      	movs	r1, r7
    1c6a:	47a0      	blx	r4
    1c6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c6e:	0006      	movs	r6, r0
    1c70:	000f      	movs	r7, r1
    1c72:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1c74:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1c76:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1c78:	47a8      	blx	r5
    1c7a:	0002      	movs	r2, r0
    1c7c:	000b      	movs	r3, r1
    1c7e:	0030      	movs	r0, r6
    1c80:	0039      	movs	r1, r7
    1c82:	47a0      	blx	r4
    1c84:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1c88:	0006      	movs	r6, r0
    1c8a:	000f      	movs	r7, r1
    1c8c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1c8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1c90:	47a8      	blx	r5
    1c92:	0002      	movs	r2, r0
    1c94:	000b      	movs	r3, r1
    1c96:	e00d      	b.n	1cb4 <computeKalmanGains+0x724>
    1c98:	d2f1a9fc 	.word	0xd2f1a9fc
    1c9c:	3f80624d 	.word	0x3f80624d
    1ca0:	a0b5ed8d 	.word	0xa0b5ed8d
    1ca4:	3f00c6f7 	.word	0x3f00c6f7
    1ca8:	00005989 	.word	0x00005989
    1cac:	00004c4d 	.word	0x00004c4d
    1cb0:	3ff00000 	.word	0x3ff00000
    1cb4:	0030      	movs	r0, r6
    1cb6:	0039      	movs	r1, r7
    1cb8:	4e58      	ldr	r6, [pc, #352]	; (1e1c <computeKalmanGains+0x88c>)
    1cba:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cbc:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1cbe:	900e      	str	r0, [sp, #56]	; 0x38
    1cc0:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cc2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1cc4:	9804      	ldr	r0, [sp, #16]
    1cc6:	9916      	ldr	r1, [sp, #88]	; 0x58
    1cc8:	47a8      	blx	r5
    1cca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ccc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1cce:	47a0      	blx	r4
    1cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1cd4:	0006      	movs	r6, r0
    1cd6:	000f      	movs	r7, r1
    1cd8:	9802      	ldr	r0, [sp, #8]
    1cda:	9903      	ldr	r1, [sp, #12]
    1cdc:	47a8      	blx	r5
    1cde:	4c4f      	ldr	r4, [pc, #316]	; (1e1c <computeKalmanGains+0x88c>)
    1ce0:	0002      	movs	r2, r0
    1ce2:	000b      	movs	r3, r1
    1ce4:	0030      	movs	r0, r6
    1ce6:	0039      	movs	r1, r7
    1ce8:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1cea:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cec:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cee:	9004      	str	r0, [sp, #16]
    1cf0:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1cf2:	2000      	movs	r0, #0
    1cf4:	494a      	ldr	r1, [pc, #296]	; (1e20 <computeKalmanGains+0x890>)
    1cf6:	47a0      	blx	r4
    1cf8:	0002      	movs	r2, r0
    1cfa:	000b      	movs	r3, r1
    1cfc:	9016      	str	r0, [sp, #88]	; 0x58
    1cfe:	9117      	str	r1, [sp, #92]	; 0x5c
    1d00:	9800      	ldr	r0, [sp, #0]
    1d02:	9901      	ldr	r1, [sp, #4]
    1d04:	47a8      	blx	r5
    1d06:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d0a:	0006      	movs	r6, r0
    1d0c:	000f      	movs	r7, r1
    1d0e:	9800      	ldr	r0, [sp, #0]
    1d10:	9901      	ldr	r1, [sp, #4]
    1d12:	47a8      	blx	r5
    1d14:	0002      	movs	r2, r0
    1d16:	000b      	movs	r3, r1
    1d18:	0030      	movs	r0, r6
    1d1a:	0039      	movs	r1, r7
    1d1c:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1d22:	9010      	str	r0, [sp, #64]	; 0x40
    1d24:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d26:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d28:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d2a:	47a8      	blx	r5
    1d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d30:	0006      	movs	r6, r0
    1d32:	000f      	movs	r7, r1
    1d34:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d36:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d38:	47a8      	blx	r5
    1d3a:	0002      	movs	r2, r0
    1d3c:	000b      	movs	r3, r1
    1d3e:	0030      	movs	r0, r6
    1d40:	0039      	movs	r1, r7
    1d42:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d44:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d48:	9012      	str	r0, [sp, #72]	; 0x48
    1d4a:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d4c:	9802      	ldr	r0, [sp, #8]
    1d4e:	9903      	ldr	r1, [sp, #12]
    1d50:	47a8      	blx	r5
    1d52:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d56:	0006      	movs	r6, r0
    1d58:	000f      	movs	r7, r1
    1d5a:	9802      	ldr	r0, [sp, #8]
    1d5c:	9903      	ldr	r1, [sp, #12]
    1d5e:	47a8      	blx	r5
    1d60:	000b      	movs	r3, r1
    1d62:	0002      	movs	r2, r0
    1d64:	0039      	movs	r1, r7
    1d66:	0030      	movs	r0, r6
    1d68:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1d6a:	2400      	movs	r4, #0
    1d6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d6e:	9002      	str	r0, [sp, #8]
    1d70:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1d72:	3301      	adds	r3, #1
    1d74:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d76:	ab40      	add	r3, sp, #256	; 0x100
    1d78:	9326      	str	r3, [sp, #152]	; 0x98
    1d7a:	4b28      	ldr	r3, [pc, #160]	; (1e1c <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1d7c:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d7e:	9328      	str	r3, [sp, #160]	; 0xa0
    1d80:	ab4c      	add	r3, sp, #304	; 0x130
    1d82:	191b      	adds	r3, r3, r4
    1d84:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d86:	2300      	movs	r3, #0
    1d88:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d8a:	9b00      	ldr	r3, [sp, #0]
    1d8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1d8e:	18e3      	adds	r3, r4, r3
    1d90:	18d3      	adds	r3, r2, r3
    1d92:	681a      	ldr	r2, [r3, #0]
    1d94:	685b      	ldr	r3, [r3, #4]
    1d96:	9218      	str	r2, [sp, #96]	; 0x60
    1d98:	9319      	str	r3, [sp, #100]	; 0x64
    1d9a:	9818      	ldr	r0, [sp, #96]	; 0x60
    1d9c:	9919      	ldr	r1, [sp, #100]	; 0x64
    1d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1da0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1da2:	681e      	ldr	r6, [r3, #0]
    1da4:	685f      	ldr	r7, [r3, #4]
    1da6:	0032      	movs	r2, r6
    1da8:	003b      	movs	r3, r7
    1daa:	47a8      	blx	r5
    1dac:	0032      	movs	r2, r6
    1dae:	003b      	movs	r3, r7
    1db0:	4d1c      	ldr	r5, [pc, #112]	; (1e24 <computeKalmanGains+0x894>)
    1db2:	47a8      	blx	r5
    1db4:	4b1c      	ldr	r3, [pc, #112]	; (1e28 <computeKalmanGains+0x898>)
    1db6:	4a1d      	ldr	r2, [pc, #116]	; (1e2c <computeKalmanGains+0x89c>)
    1db8:	4e1d      	ldr	r6, [pc, #116]	; (1e30 <computeKalmanGains+0x8a0>)
    1dba:	47b0      	blx	r6
                    notdone++;
    1dbc:	1e43      	subs	r3, r0, #1
    1dbe:	4198      	sbcs	r0, r3
    1dc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1dc2:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1dc4:	181b      	adds	r3, r3, r0
    1dc6:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1dc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1dcc:	c10c      	stmia	r1!, {r2, r3}
    1dce:	9b00      	ldr	r3, [sp, #0]
    1dd0:	9116      	str	r1, [sp, #88]	; 0x58
    1dd2:	3308      	adds	r3, #8
    1dd4:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1dd6:	2b10      	cmp	r3, #16
    1dd8:	d1d7      	bne.n	1d8a <computeKalmanGains+0x7fa>
    1dda:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1ddc:	2c30      	cmp	r4, #48	; 0x30
    1dde:	d1cf      	bne.n	1d80 <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1de0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1de2:	2b00      	cmp	r3, #0
    1de4:	d001      	beq.n	1dea <computeKalmanGains+0x85a>
    1de6:	f7ff fc38 	bl	165a <computeKalmanGains+0xca>
    1dea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dec:	2b63      	cmp	r3, #99	; 0x63
    1dee:	dc01      	bgt.n	1df4 <computeKalmanGains+0x864>
    1df0:	f7ff fc33 	bl	165a <computeKalmanGains+0xca>
    1df4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1df6:	aa42      	add	r2, sp, #264	; 0x108
    1df8:	0019      	movs	r1, r3
    1dfa:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1dfc:	0010      	movs	r0, r2
    1dfe:	3808      	subs	r0, #8
    1e00:	6804      	ldr	r4, [r0, #0]
    1e02:	6845      	ldr	r5, [r0, #4]
    1e04:	601c      	str	r4, [r3, #0]
    1e06:	605d      	str	r5, [r3, #4]
    1e08:	6814      	ldr	r4, [r2, #0]
    1e0a:	6855      	ldr	r5, [r2, #4]
    1e0c:	609c      	str	r4, [r3, #8]
    1e0e:	60dd      	str	r5, [r3, #12]
    1e10:	3310      	adds	r3, #16
    1e12:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1e14:	4299      	cmp	r1, r3
    1e16:	d1f1      	bne.n	1dfc <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1e18:	b059      	add	sp, #356	; 0x164
    1e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e1c:	00005989 	.word	0x00005989
    1e20:	3ff00000 	.word	0x3ff00000
    1e24:	00004c4d 	.word	0x00004c4d
    1e28:	3ee4f8b5 	.word	0x3ee4f8b5
    1e2c:	88e368f1 	.word	0x88e368f1
    1e30:	00003d2d 	.word	0x00003d2d

00001e34 <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e34:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1e36:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e38:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e3a:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1e3c:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e3e:	6818      	ldr	r0, [r3, #0]
    1e40:	4b96      	ldr	r3, [pc, #600]	; (209c <STACK_SIZE+0x9c>)
    1e42:	4798      	blx	r3
    1e44:	003b      	movs	r3, r7
    1e46:	33b8      	adds	r3, #184	; 0xb8
    1e48:	681a      	ldr	r2, [r3, #0]
    1e4a:	685b      	ldr	r3, [r3, #4]
    1e4c:	4c94      	ldr	r4, [pc, #592]	; (20a0 <STACK_SIZE+0xa0>)
    1e4e:	47a0      	blx	r4
    1e50:	4a94      	ldr	r2, [pc, #592]	; (20a4 <STACK_SIZE+0xa4>)
    1e52:	4b95      	ldr	r3, [pc, #596]	; (20a8 <STACK_SIZE+0xa8>)
    1e54:	4d95      	ldr	r5, [pc, #596]	; (20ac <STACK_SIZE+0xac>)
    1e56:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1e5c:	003d      	movs	r5, r7
    1e5e:	3580      	adds	r5, #128	; 0x80

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1e60:	9200      	str	r2, [sp, #0]
    1e62:	9301      	str	r3, [sp, #4]
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e64:	9002      	str	r0, [sp, #8]
    1e66:	9103      	str	r1, [sp, #12]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1e68:	6828      	ldr	r0, [r5, #0]
    1e6a:	6869      	ldr	r1, [r5, #4]
    1e6c:	2200      	movs	r2, #0
    1e6e:	2300      	movs	r3, #0
    1e70:	4e8f      	ldr	r6, [pc, #572]	; (20b0 <STACK_SIZE+0xb0>)
    1e72:	47b0      	blx	r6
    1e74:	2800      	cmp	r0, #0
    1e76:	d003      	beq.n	1e80 <computeKalmanStates+0x4c>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1e78:	9a00      	ldr	r2, [sp, #0]
    1e7a:	9b01      	ldr	r3, [sp, #4]
    1e7c:	602a      	str	r2, [r5, #0]
    1e7e:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1e80:	9800      	ldr	r0, [sp, #0]
    1e82:	9901      	ldr	r1, [sp, #4]
    1e84:	003b      	movs	r3, r7
    1e86:	3398      	adds	r3, #152	; 0x98
    1e88:	930a      	str	r3, [sp, #40]	; 0x28
    1e8a:	681a      	ldr	r2, [r3, #0]
    1e8c:	685b      	ldr	r3, [r3, #4]
    1e8e:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1e90:	003b      	movs	r3, r7
    1e92:	33a8      	adds	r3, #168	; 0xa8
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1e94:	9006      	str	r0, [sp, #24]
    1e96:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1e98:	9802      	ldr	r0, [sp, #8]
    1e9a:	9903      	ldr	r1, [sp, #12]
    1e9c:	930c      	str	r3, [sp, #48]	; 0x30
    1e9e:	681a      	ldr	r2, [r3, #0]
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1ea4:	003b      	movs	r3, r7
    1ea6:	3380      	adds	r3, #128	; 0x80
    1ea8:	930d      	str	r3, [sp, #52]	; 0x34
    1eaa:	685c      	ldr	r4, [r3, #4]
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	9300      	str	r3, [sp, #0]
    1eb0:	9401      	str	r4, [sp, #4]
    1eb2:	003b      	movs	r3, r7
    1eb4:	3388      	adds	r3, #136	; 0x88
    1eb6:	930e      	str	r3, [sp, #56]	; 0x38
    1eb8:	685c      	ldr	r4, [r3, #4]
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	9302      	str	r3, [sp, #8]
    1ebe:	9403      	str	r4, [sp, #12]
    1ec0:	003b      	movs	r3, r7
    1ec2:	3390      	adds	r3, #144	; 0x90
    1ec4:	930f      	str	r3, [sp, #60]	; 0x3c
    1ec6:	685c      	ldr	r4, [r3, #4]
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	9304      	str	r3, [sp, #16]
    1ecc:	9405      	str	r4, [sp, #20]
    1ece:	4b79      	ldr	r3, [pc, #484]	; (20b4 <STACK_SIZE+0xb4>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1ed0:	9008      	str	r0, [sp, #32]
    1ed2:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1ed4:	681a      	ldr	r2, [r3, #0]
    1ed6:	685b      	ldr	r3, [r3, #4]
    1ed8:	9800      	ldr	r0, [sp, #0]
    1eda:	9901      	ldr	r1, [sp, #4]
    1edc:	4c73      	ldr	r4, [pc, #460]	; (20ac <STACK_SIZE+0xac>)
    1ede:	47a0      	blx	r4
    1ee0:	4b74      	ldr	r3, [pc, #464]	; (20b4 <STACK_SIZE+0xb4>)
    1ee2:	4e72      	ldr	r6, [pc, #456]	; (20ac <STACK_SIZE+0xac>)
    1ee4:	689a      	ldr	r2, [r3, #8]
    1ee6:	68db      	ldr	r3, [r3, #12]
    1ee8:	0004      	movs	r4, r0
    1eea:	000d      	movs	r5, r1
    1eec:	9802      	ldr	r0, [sp, #8]
    1eee:	9903      	ldr	r1, [sp, #12]
    1ef0:	47b0      	blx	r6
    1ef2:	0002      	movs	r2, r0
    1ef4:	000b      	movs	r3, r1
    1ef6:	0020      	movs	r0, r4
    1ef8:	0029      	movs	r1, r5
    1efa:	4c6f      	ldr	r4, [pc, #444]	; (20b8 <STACK_SIZE+0xb8>)
    1efc:	47a0      	blx	r4
    1efe:	4b6d      	ldr	r3, [pc, #436]	; (20b4 <STACK_SIZE+0xb4>)
    1f00:	0004      	movs	r4, r0
    1f02:	691a      	ldr	r2, [r3, #16]
    1f04:	695b      	ldr	r3, [r3, #20]
    1f06:	000d      	movs	r5, r1
    1f08:	9804      	ldr	r0, [sp, #16]
    1f0a:	9905      	ldr	r1, [sp, #20]
    1f0c:	47b0      	blx	r6
    1f0e:	0002      	movs	r2, r0
    1f10:	000b      	movs	r3, r1
    1f12:	0020      	movs	r0, r4
    1f14:	0029      	movs	r1, r5
    1f16:	4c68      	ldr	r4, [pc, #416]	; (20b8 <STACK_SIZE+0xb8>)
    1f18:	47a0      	blx	r4
    1f1a:	0003      	movs	r3, r0
    1f1c:	000c      	movs	r4, r1
    1f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1f20:	9010      	str	r0, [sp, #64]	; 0x40
    1f22:	9111      	str	r1, [sp, #68]	; 0x44
    1f24:	6013      	str	r3, [r2, #0]
    1f26:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1f28:	4b62      	ldr	r3, [pc, #392]	; (20b4 <STACK_SIZE+0xb4>)
    1f2a:	699a      	ldr	r2, [r3, #24]
    1f2c:	69db      	ldr	r3, [r3, #28]
    1f2e:	9800      	ldr	r0, [sp, #0]
    1f30:	9901      	ldr	r1, [sp, #4]
    1f32:	47b0      	blx	r6
    1f34:	4b5f      	ldr	r3, [pc, #380]	; (20b4 <STACK_SIZE+0xb4>)
    1f36:	0004      	movs	r4, r0
    1f38:	6a1a      	ldr	r2, [r3, #32]
    1f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f3c:	000d      	movs	r5, r1
    1f3e:	9802      	ldr	r0, [sp, #8]
    1f40:	9903      	ldr	r1, [sp, #12]
    1f42:	47b0      	blx	r6
    1f44:	0002      	movs	r2, r0
    1f46:	000b      	movs	r3, r1
    1f48:	0020      	movs	r0, r4
    1f4a:	0029      	movs	r1, r5
    1f4c:	4c5a      	ldr	r4, [pc, #360]	; (20b8 <STACK_SIZE+0xb8>)
    1f4e:	47a0      	blx	r4
    1f50:	4b58      	ldr	r3, [pc, #352]	; (20b4 <STACK_SIZE+0xb4>)
    1f52:	0004      	movs	r4, r0
    1f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f58:	000d      	movs	r5, r1
    1f5a:	9804      	ldr	r0, [sp, #16]
    1f5c:	9905      	ldr	r1, [sp, #20]
    1f5e:	47b0      	blx	r6
    1f60:	0002      	movs	r2, r0
    1f62:	000b      	movs	r3, r1
    1f64:	0020      	movs	r0, r4
    1f66:	0029      	movs	r1, r5
    1f68:	4c53      	ldr	r4, [pc, #332]	; (20b8 <STACK_SIZE+0xb8>)
    1f6a:	47a0      	blx	r4
    1f6c:	003b      	movs	r3, r7
    1f6e:	900a      	str	r0, [sp, #40]	; 0x28
    1f70:	910b      	str	r1, [sp, #44]	; 0x2c
    1f72:	000a      	movs	r2, r1
    1f74:	0001      	movs	r1, r0
    1f76:	33a0      	adds	r3, #160	; 0xa0
    1f78:	6019      	str	r1, [r3, #0]
    1f7a:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1f7c:	9800      	ldr	r0, [sp, #0]
    1f7e:	9901      	ldr	r1, [sp, #4]
    1f80:	4b4c      	ldr	r3, [pc, #304]	; (20b4 <STACK_SIZE+0xb4>)
    1f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f86:	47b0      	blx	r6
    1f88:	4b4a      	ldr	r3, [pc, #296]	; (20b4 <STACK_SIZE+0xb4>)
    1f8a:	0004      	movs	r4, r0
    1f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f90:	000d      	movs	r5, r1
    1f92:	9802      	ldr	r0, [sp, #8]
    1f94:	9903      	ldr	r1, [sp, #12]
    1f96:	47b0      	blx	r6
    1f98:	0002      	movs	r2, r0
    1f9a:	000b      	movs	r3, r1
    1f9c:	0020      	movs	r0, r4
    1f9e:	0029      	movs	r1, r5
    1fa0:	4c45      	ldr	r4, [pc, #276]	; (20b8 <STACK_SIZE+0xb8>)
    1fa2:	47a0      	blx	r4
    1fa4:	4b43      	ldr	r3, [pc, #268]	; (20b4 <STACK_SIZE+0xb4>)
    1fa6:	0004      	movs	r4, r0
    1fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1fac:	000d      	movs	r5, r1
    1fae:	9804      	ldr	r0, [sp, #16]
    1fb0:	9905      	ldr	r1, [sp, #20]
    1fb2:	47b0      	blx	r6
    1fb4:	0002      	movs	r2, r0
    1fb6:	000b      	movs	r3, r1
    1fb8:	0020      	movs	r0, r4
    1fba:	0029      	movs	r1, r5
    1fbc:	4c3e      	ldr	r4, [pc, #248]	; (20b8 <STACK_SIZE+0xb8>)
    1fbe:	47a0      	blx	r4
    1fc0:	0003      	movs	r3, r0
    1fc2:	000c      	movs	r4, r1
    1fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1fc6:	9000      	str	r0, [sp, #0]
    1fc8:	9101      	str	r1, [sp, #4]
    1fca:	6013      	str	r3, [r2, #0]
    1fcc:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1fce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fd2:	9806      	ldr	r0, [sp, #24]
    1fd4:	9907      	ldr	r1, [sp, #28]
    1fd6:	47b0      	blx	r6
    1fd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1fdc:	4c36      	ldr	r4, [pc, #216]	; (20b8 <STACK_SIZE+0xb8>)
    1fde:	47a0      	blx	r4
    1fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1fe4:	0004      	movs	r4, r0
    1fe6:	000d      	movs	r5, r1
    1fe8:	9808      	ldr	r0, [sp, #32]
    1fea:	9909      	ldr	r1, [sp, #36]	; 0x24
    1fec:	47b0      	blx	r6
    1fee:	0002      	movs	r2, r0
    1ff0:	000b      	movs	r3, r1
    1ff2:	0020      	movs	r0, r4
    1ff4:	0029      	movs	r1, r5
    1ff6:	4c30      	ldr	r4, [pc, #192]	; (20b8 <STACK_SIZE+0xb8>)
    1ff8:	47a0      	blx	r4
    1ffa:	0003      	movs	r3, r0
    1ffc:	000c      	movs	r4, r1
    1ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2000:	9002      	str	r0, [sp, #8]
    2002:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    2004:	9806      	ldr	r0, [sp, #24]
    2006:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    2008:	6013      	str	r3, [r2, #0]
    200a:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    200c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    200e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2010:	47b0      	blx	r6
    2012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2016:	4c28      	ldr	r4, [pc, #160]	; (20b8 <STACK_SIZE+0xb8>)
    2018:	47a0      	blx	r4
    201a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    201e:	0004      	movs	r4, r0
    2020:	000d      	movs	r5, r1
    2022:	9808      	ldr	r0, [sp, #32]
    2024:	9909      	ldr	r1, [sp, #36]	; 0x24
    2026:	47b0      	blx	r6
    2028:	0002      	movs	r2, r0
    202a:	000b      	movs	r3, r1
    202c:	0020      	movs	r0, r4
    202e:	0029      	movs	r1, r5
    2030:	4c21      	ldr	r4, [pc, #132]	; (20b8 <STACK_SIZE+0xb8>)
    2032:	47a0      	blx	r4
    2034:	0005      	movs	r5, r0
    2036:	000e      	movs	r6, r1
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    2038:	9806      	ldr	r0, [sp, #24]
    203a:	9907      	ldr	r1, [sp, #28]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    203c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    203e:	4c1b      	ldr	r4, [pc, #108]	; (20ac <STACK_SIZE+0xac>)

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    2040:	601d      	str	r5, [r3, #0]
    2042:	605e      	str	r6, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    2044:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    2046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2048:	47a0      	blx	r4
    204a:	9a00      	ldr	r2, [sp, #0]
    204c:	9b01      	ldr	r3, [sp, #4]
    204e:	4c1a      	ldr	r4, [pc, #104]	; (20b8 <STACK_SIZE+0xb8>)
    2050:	47a0      	blx	r4
    2052:	9000      	str	r0, [sp, #0]
    2054:	9101      	str	r1, [sp, #4]
    2056:	6fba      	ldr	r2, [r7, #120]	; 0x78
    2058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    205a:	9808      	ldr	r0, [sp, #32]
    205c:	9909      	ldr	r1, [sp, #36]	; 0x24
    205e:	4c13      	ldr	r4, [pc, #76]	; (20ac <STACK_SIZE+0xac>)
    2060:	47a0      	blx	r4
    2062:	4c15      	ldr	r4, [pc, #84]	; (20b8 <STACK_SIZE+0xb8>)
    2064:	0002      	movs	r2, r0
    2066:	000b      	movs	r3, r1
    2068:	9800      	ldr	r0, [sp, #0]
    206a:	9901      	ldr	r1, [sp, #4]
    206c:	47a0      	blx	r4
    206e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    2070:	4c12      	ldr	r4, [pc, #72]	; (20bc <STACK_SIZE+0xbc>)
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    2072:	6018      	str	r0, [r3, #0]
    2074:	6059      	str	r1, [r3, #4]

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    2076:	47a0      	blx	r4
    2078:	23cc      	movs	r3, #204	; 0xcc
    207a:	009b      	lsls	r3, r3, #2
    207c:	50f8      	str	r0, [r7, r3]
    my_altimeter->Velocity = my_altimeter->myKalmanFilter.est[1];
    207e:	0031      	movs	r1, r6
    2080:	0028      	movs	r0, r5
    2082:	47a0      	blx	r4
    2084:	23ce      	movs	r3, #206	; 0xce
    2086:	009b      	lsls	r3, r3, #2
    2088:	50f8      	str	r0, [r7, r3]
    my_altimeter->Altitude = my_altimeter->myKalmanFilter.est[0];
    208a:	4b0d      	ldr	r3, [pc, #52]	; (20c0 <STACK_SIZE+0xc0>)
    208c:	9802      	ldr	r0, [sp, #8]
    208e:	9903      	ldr	r1, [sp, #12]
    2090:	4798      	blx	r3
    2092:	23cd      	movs	r3, #205	; 0xcd
    2094:	009b      	lsls	r3, r3, #2
    2096:	50f8      	str	r0, [r7, r3]


}
    2098:	b013      	add	sp, #76	; 0x4c
    209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    209c:	000061d1 	.word	0x000061d1
    20a0:	00005989 	.word	0x00005989
    20a4:	33daf8df 	.word	0x33daf8df
    20a8:	4040164b 	.word	0x4040164b
    20ac:	00005495 	.word	0x00005495
    20b0:	00003cf9 	.word	0x00003cf9
    20b4:	20000010 	.word	0x20000010
    20b8:	000045f5 	.word	0x000045f5
    20bc:	00006279 	.word	0x00006279
    20c0:	00003e51 	.word	0x00003e51

000020c4 <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    20c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    20c6:	2684      	movs	r6, #132	; 0x84
    20c8:	00b6      	lsls	r6, r6, #2
    20ca:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    20cc:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    20ce:	194b      	adds	r3, r1, r5
    20d0:	2bfe      	cmp	r3, #254	; 0xfe
    20d2:	dc03      	bgt.n	20dc <makePage+0x18>
    20d4:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    20d6:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20d8:	1947      	adds	r7, r0, r5
    20da:	e034      	b.n	2146 <makePage+0x82>
    20dc:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20de:	195c      	adds	r4, r3, r5
    20e0:	b2de      	uxtb	r6, r3
    20e2:	2cfe      	cmp	r4, #254	; 0xfe
    20e4:	dc08      	bgt.n	20f8 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20e6:	9a00      	ldr	r2, [sp, #0]
    20e8:	4f1f      	ldr	r7, [pc, #124]	; (2168 <makePage+0xa4>)
    20ea:	5cd6      	ldrb	r6, [r2, r3]
    20ec:	1904      	adds	r4, r0, r4
    20ee:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20f0:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20f2:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20f4:	b29b      	uxth	r3, r3
    20f6:	e7f2      	b.n	20de <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    20f8:	2384      	movs	r3, #132	; 0x84
    20fa:	2500      	movs	r5, #0
    20fc:	009b      	lsls	r3, r3, #2
    20fe:	54c5      	strb	r5, [r0, r3]
    2100:	4b19      	ldr	r3, [pc, #100]	; (2168 <makePage+0xa4>)
    2102:	18c4      	adds	r4, r0, r3
    2104:	4b19      	ldr	r3, [pc, #100]	; (216c <makePage+0xa8>)
    2106:	18c3      	adds	r3, r0, r3
    2108:	9301      	str	r3, [sp, #4]
    210a:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    210c:	781f      	ldrb	r7, [r3, #0]
    210e:	46bc      	mov	ip, r7
    2110:	4662      	mov	r2, ip
    2112:	1e9f      	subs	r7, r3, #2
    2114:	3fff      	subs	r7, #255	; 0xff
    2116:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2118:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    211a:	701d      	strb	r5, [r3, #0]
    211c:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    211e:	4293      	cmp	r3, r2
    2120:	d1f4      	bne.n	210c <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    2122:	2584      	movs	r5, #132	; 0x84
    2124:	0033      	movs	r3, r6
    2126:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2128:	428b      	cmp	r3, r1
    212a:	d208      	bcs.n	213e <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    212c:	9a00      	ldr	r2, [sp, #0]
    212e:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    2130:	3301      	adds	r3, #1
    2132:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    2134:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    2136:	1b9f      	subs	r7, r3, r6
    2138:	5547      	strb	r7, [r0, r5]
    213a:	3401      	adds	r4, #1
    213c:	e7f4      	b.n	2128 <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    213e:	2201      	movs	r2, #1
    2140:	4b0a      	ldr	r3, [pc, #40]	; (216c <makePage+0xa8>)
    2142:	54c2      	strb	r2, [r0, r3]
    2144:	e00f      	b.n	2166 <makePage+0xa2>
    2146:	1c5c      	adds	r4, r3, #1
    2148:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    214a:	428b      	cmp	r3, r1
    214c:	d80b      	bhi.n	2166 <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    214e:	9a00      	ldr	r2, [sp, #0]
    2150:	5cd2      	ldrb	r2, [r2, r3]
    2152:	18fb      	adds	r3, r7, r3
    2154:	4694      	mov	ip, r2
    2156:	4a04      	ldr	r2, [pc, #16]	; (2168 <makePage+0xa4>)
    2158:	189b      	adds	r3, r3, r2
    215a:	4662      	mov	r2, ip
    215c:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    215e:	192b      	adds	r3, r5, r4
    2160:	5583      	strb	r3, [r0, r6]
    2162:	0023      	movs	r3, r4
    2164:	e7ef      	b.n	2146 <makePage+0x82>
        }

    }
}
    2166:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2168:	00000211 	.word	0x00000211
    216c:	00000311 	.word	0x00000311

00002170 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    2170:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2172:	2346      	movs	r3, #70	; 0x46
    2174:	466a      	mov	r2, sp
    2176:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    2178:	7a03      	ldrb	r3, [r0, #8]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    217a:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    217c:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    217e:	0003      	movs	r3, r0
    2180:	33b0      	adds	r3, #176	; 0xb0
    2182:	681b      	ldr	r3, [r3, #0]
    2184:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    2186:	0a1a      	lsrs	r2, r3, #8
    2188:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    218a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    218c:	0e1b      	lsrs	r3, r3, #24
    218e:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    2190:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    2192:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    2194:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    2196:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    2198:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    219a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    219c:	0e1b      	lsrs	r3, r3, #24
    219e:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    21a0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    21a2:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    21a4:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    21a6:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    21a8:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    21aa:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    21ac:	0e1b      	lsrs	r3, r3, #24
    21ae:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    21b0:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    21b2:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    21b4:	33e4      	adds	r3, #228	; 0xe4
    21b6:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    21b8:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    21ba:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    21bc:	0a1b      	lsrs	r3, r3, #8
    21be:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    21c0:	2110      	movs	r1, #16
    21c2:	4b02      	ldr	r3, [pc, #8]	; (21cc <logFlight+0x5c>)
    21c4:	4798      	blx	r3
}
    21c6:	b005      	add	sp, #20
    21c8:	bd00      	pop	{pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	000020c5 	.word	0x000020c5

000021d0 <logEvent>:

void logEvent(Altimeter *my_altimeter, u8_t eventType) {
    21d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    21d2:	2345      	movs	r3, #69	; 0x45
    21d4:	aa01      	add	r2, sp, #4
    21d6:	7013      	strb	r3, [r2, #0]
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    21d8:	23c9      	movs	r3, #201	; 0xc9
    21da:	009b      	lsls	r3, r3, #2
    21dc:	58c3      	ldr	r3, [r0, r3]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    21de:	7051      	strb	r1, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    21e0:	0a19      	lsrs	r1, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    21e2:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    21e4:	70d1      	strb	r1, [r2, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    21e6:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = my_altimeter->sampleTick >> 24;
    21e8:	0e1b      	lsrs	r3, r3, #24
    21ea:	7153      	strb	r3, [r2, #5]

    dataToSend[6] = my_altimeter->Altitude >> 0;
    21ec:	23cd      	movs	r3, #205	; 0xcd
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	58c3      	ldr	r3, [r0, r3]

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    21f2:	7111      	strb	r1, [r2, #4]
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    21f4:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    21f6:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = my_altimeter->Altitude >> 8;
    21f8:	71d1      	strb	r1, [r2, #7]
    dataToSend[8] = my_altimeter->Altitude >> 16;
    21fa:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = my_altimeter->Altitude >> 24;
    21fc:	0e1b      	lsrs	r3, r3, #24
    21fe:	7253      	strb	r3, [r2, #9]

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    2200:	23c5      	movs	r3, #197	; 0xc5
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    2202:	7211      	strb	r1, [r2, #8]
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    2204:	009b      	lsls	r3, r3, #2
    2206:	5ac3      	ldrh	r3, [r0, r3]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2208:	210c      	movs	r1, #12
    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    220a:	7293      	strb	r3, [r2, #10]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;
    220c:	0a1b      	lsrs	r3, r3, #8
    220e:	72d3      	strb	r3, [r2, #11]

    makePage(my_altimeter, bytesToSend, dataToSend);
    2210:	4b01      	ldr	r3, [pc, #4]	; (2218 <logEvent+0x48>)
    2212:	4798      	blx	r3

}
    2214:	b005      	add	sp, #20
    2216:	bd00      	pop	{pc}
    2218:	000020c5 	.word	0x000020c5

0000221c <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    221c:	b5f0      	push	{r4, r5, r6, r7, lr}
    221e:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    2220:	466a      	mov	r2, sp
    2222:	2353      	movs	r3, #83	; 0x53
    2224:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2226:	23c9      	movs	r3, #201	; 0xc9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    2228:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    222a:	009b      	lsls	r3, r3, #2
    222c:	58c3      	ldr	r3, [r0, r3]

    makePage(my_altimeter, bytesToSend, dataToSend);

}

void logSensors(Altimeter *my_altimeter) {
    222e:	0004      	movs	r4, r0

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2230:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    2232:	0a1a      	lsrs	r2, r3, #8
    2234:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    2236:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    2238:	0e1b      	lsrs	r3, r3, #24
    223a:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->Altitude >> 0;
    223c:	23cd      	movs	r3, #205	; 0xcd
    223e:	009b      	lsls	r3, r3, #2
    2240:	58c3      	ldr	r3, [r0, r3]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    2242:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2244:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    2246:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2248:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->Altitude >> 16;
    224a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->Altitude >> 24;
    224c:	0e1b      	lsrs	r3, r3, #24
    224e:	720b      	strb	r3, [r1, #8]

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    2250:	23cc      	movs	r3, #204	; 0xcc
    2252:	009b      	lsls	r3, r3, #2
    2254:	58c7      	ldr	r7, [r0, r3]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    2256:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    2258:	4e23      	ldr	r6, [pc, #140]	; (22e8 <logSensors+0xcc>)
    225a:	1c38      	adds	r0, r7, #0
    225c:	47b0      	blx	r6
    225e:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    2260:	4b22      	ldr	r3, [pc, #136]	; (22ec <logSensors+0xd0>)
    2262:	0028      	movs	r0, r5
    2264:	4798      	blx	r3
    2266:	4b22      	ldr	r3, [pc, #136]	; (22f0 <logSensors+0xd4>)
    2268:	1c01      	adds	r1, r0, #0
    226a:	1c38      	adds	r0, r7, #0
    226c:	4798      	blx	r3
    226e:	4921      	ldr	r1, [pc, #132]	; (22f4 <logSensors+0xd8>)
    2270:	4f21      	ldr	r7, [pc, #132]	; (22f8 <logSensors+0xdc>)
    2272:	47b8      	blx	r7
    2274:	4b21      	ldr	r3, [pc, #132]	; (22fc <logSensors+0xe0>)
    2276:	4798      	blx	r3

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2278:	466a      	mov	r2, sp
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;
    227a:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    227c:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    227e:	0a1b      	lsrs	r3, r3, #8
    2280:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2282:	23ce      	movs	r3, #206	; 0xce
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2284:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2286:	009b      	lsls	r3, r3, #2

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    2288:	122d      	asrs	r5, r5, #8
    228a:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    228c:	58e5      	ldr	r5, [r4, r3]
    228e:	1c28      	adds	r0, r5, #0
    2290:	47b0      	blx	r6
    2292:	b206      	sxth	r6, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2294:	4b15      	ldr	r3, [pc, #84]	; (22ec <logSensors+0xd0>)
    2296:	0030      	movs	r0, r6
    2298:	4798      	blx	r3
    229a:	4b15      	ldr	r3, [pc, #84]	; (22f0 <logSensors+0xd4>)
    229c:	1c01      	adds	r1, r0, #0
    229e:	1c28      	adds	r0, r5, #0
    22a0:	4798      	blx	r3
    22a2:	4914      	ldr	r1, [pc, #80]	; (22f4 <logSensors+0xd8>)
    22a4:	47b8      	blx	r7
    22a6:	4b15      	ldr	r3, [pc, #84]	; (22fc <logSensors+0xe0>)
    22a8:	4798      	blx	r3

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    22aa:	466a      	mov	r2, sp
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    22ac:	4669      	mov	r1, sp
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    22ae:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    22b0:	73d3      	strb	r3, [r2, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    22b2:	0a1b      	lsrs	r3, r3, #8
    22b4:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    22b6:	6b63      	ldr	r3, [r4, #52]	; 0x34


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    22b8:	7356      	strb	r6, [r2, #13]
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    22ba:	1236      	asrs	r6, r6, #8
    22bc:	7396      	strb	r6, [r2, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    22be:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    22c0:	0a1a      	lsrs	r2, r3, #8
    22c2:	748a      	strb	r2, [r1, #18]
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    22c4:	0c1a      	lsrs	r2, r3, #16
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    22c6:	0e1b      	lsrs	r3, r3, #24
    22c8:	750b      	strb	r3, [r1, #20]

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22ca:	0023      	movs	r3, r4
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    22cc:	74ca      	strb	r2, [r1, #19]

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22ce:	33ec      	adds	r3, #236	; 0xec
    22d0:	881b      	ldrh	r3, [r3, #0]
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    22d2:	466a      	mov	r2, sp

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22d4:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myIMU.accelZRaw >> 8;
    22d6:	0a1b      	lsrs	r3, r3, #8
    22d8:	758b      	strb	r3, [r1, #22]


    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    22da:	0020      	movs	r0, r4
    22dc:	2117      	movs	r1, #23
    22de:	4b08      	ldr	r3, [pc, #32]	; (2300 <logSensors+0xe4>)
    22e0:	4798      	blx	r3
}
    22e2:	b007      	add	sp, #28
    22e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00004521 	.word	0x00004521
    22ec:	00004565 	.word	0x00004565
    22f0:	00004215 	.word	0x00004215
    22f4:	447a0000 	.word	0x447a0000
    22f8:	00003fed 	.word	0x00003fed
    22fc:	00003e21 	.word	0x00003e21
    2300:	000020c5 	.word	0x000020c5

00002304 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2304:	2306      	movs	r3, #6
    makePage(my_altimeter, bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2306:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2308:	4358      	muls	r0, r3
    230a:	ac01      	add	r4, sp, #4
    230c:	3001      	adds	r0, #1
    230e:	30ff      	adds	r0, #255	; 0xff
    2310:	0022      	movs	r2, r4
    2312:	2103      	movs	r1, #3
    2314:	4b04      	ldr	r3, [pc, #16]	; (2328 <getFlightStartAddress+0x24>)
    2316:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2318:	7860      	ldrb	r0, [r4, #1]
    231a:	78a3      	ldrb	r3, [r4, #2]
    231c:	0200      	lsls	r0, r0, #8
    231e:	041b      	lsls	r3, r3, #16
    2320:	4318      	orrs	r0, r3
    2322:	7823      	ldrb	r3, [r4, #0]
    2324:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2326:	bd16      	pop	{r1, r2, r4, pc}
    2328:	00000341 	.word	0x00000341

0000232c <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    232c:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    232e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2330:	4358      	muls	r0, r3
    2332:	ac01      	add	r4, sp, #4
    2334:	3004      	adds	r0, #4
    2336:	30ff      	adds	r0, #255	; 0xff
    2338:	0022      	movs	r2, r4
    233a:	2103      	movs	r1, #3
    233c:	4b04      	ldr	r3, [pc, #16]	; (2350 <FindFlightEndingAddress+0x24>)
    233e:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2340:	7860      	ldrb	r0, [r4, #1]
    2342:	78a3      	ldrb	r3, [r4, #2]
    2344:	0200      	lsls	r0, r0, #8
    2346:	041b      	lsls	r3, r3, #16
    2348:	4318      	orrs	r0, r3
    234a:	7823      	ldrb	r3, [r4, #0]
    234c:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    234e:	bd16      	pop	{r1, r2, r4, pc}
    2350:	00000341 	.word	0x00000341

00002354 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2354:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2356:	4b04      	ldr	r3, [pc, #16]	; (2368 <isFlightLogged+0x14>)
    2358:	4798      	blx	r3
    235a:	4b04      	ldr	r3, [pc, #16]	; (236c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    235c:	18c0      	adds	r0, r0, r3
    235e:	1e43      	subs	r3, r0, #1
    2360:	4198      	sbcs	r0, r3
    2362:	b2c0      	uxtb	r0, r0
    2364:	bd10      	pop	{r4, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00002305 	.word	0x00002305
    236c:	ff000001 	.word	0xff000001

00002370 <writeFlightEndAddress>:



void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    2370:	0003      	movs	r3, r0
    }
}



void writeFlightEndAddress(Altimeter *my_altimeter) {
    2372:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    2374:	33fc      	adds	r3, #252	; 0xfc
    2376:	68db      	ldr	r3, [r3, #12]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2378:	aa01      	add	r2, sp, #4
    237a:	7013      	strb	r3, [r2, #0]
    237c:	0a19      	lsrs	r1, r3, #8
    237e:	0c1b      	lsrs	r3, r3, #16
    2380:	7051      	strb	r1, [r2, #1]
    2382:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2384:	7a03      	ldrb	r3, [r0, #8]
    2386:	2006      	movs	r0, #6
    2388:	4358      	muls	r0, r3
    238a:	3004      	adds	r0, #4
    238c:	30ff      	adds	r0, #255	; 0xff
    238e:	2103      	movs	r1, #3
    2390:	4b02      	ldr	r3, [pc, #8]	; (239c <writeFlightEndAddress+0x2c>)
    2392:	4798      	blx	r3
    delay_ms(10);
    2394:	200a      	movs	r0, #10
    2396:	4b02      	ldr	r3, [pc, #8]	; (23a0 <writeFlightEndAddress+0x30>)
    2398:	4798      	blx	r3

}
    239a:	bd07      	pop	{r0, r1, r2, pc}
    239c:	00000255 	.word	0x00000255
    23a0:	00000ff1 	.word	0x00000ff1

000023a4 <findNewFlightStart>:




void findNewFlightStart(Altimeter *my_altimeter) {
    23a4:	b5f0      	push	{r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    23a6:	2400      	movs	r4, #0
}




void findNewFlightStart(Altimeter *my_altimeter) {
    23a8:	b085      	sub	sp, #20
    23aa:	9001      	str	r0, [sp, #4]

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {
    23ac:	0020      	movs	r0, r4
    23ae:	4b24      	ldr	r3, [pc, #144]	; (2440 <findNewFlightStart+0x9c>)
    23b0:	4798      	blx	r3
    23b2:	2800      	cmp	r0, #0
    23b4:	d13d      	bne.n	2432 <findNewFlightStart+0x8e>
    23b6:	9f01      	ldr	r7, [sp, #4]
    23b8:	ad03      	add	r5, sp, #12
    23ba:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    23bc:	2c00      	cmp	r4, #0
    23be:	d016      	beq.n	23ee <findNewFlightStart+0x4a>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    23c0:	1e60      	subs	r0, r4, #1
    23c2:	4b20      	ldr	r3, [pc, #128]	; (2444 <findNewFlightStart+0xa0>)
    23c4:	b2c0      	uxtb	r0, r0
    23c6:	4798      	blx	r3
                delay_ms(5);
    23c8:	4b1f      	ldr	r3, [pc, #124]	; (2448 <findNewFlightStart+0xa4>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    23ca:	0006      	movs	r6, r0
                delay_ms(5);
    23cc:	2005      	movs	r0, #5
    23ce:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23d0:	2006      	movs	r0, #6
    23d2:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23d4:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23d6:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;
    23d8:	60fe      	str	r6, [r7, #12]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23da:	702e      	strb	r6, [r5, #0]
    23dc:	706b      	strb	r3, [r5, #1]
    23de:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23e0:	30ff      	adds	r0, #255	; 0xff
    23e2:	002a      	movs	r2, r5
    23e4:	2103      	movs	r1, #3
    23e6:	4b19      	ldr	r3, [pc, #100]	; (244c <findNewFlightStart+0xa8>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23e8:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23ea:	4798      	blx	r3
    23ec:	e00f      	b.n	240e <findNewFlightStart+0x6a>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23ee:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    23f0:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23f2:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    23f4:	0040      	lsls	r0, r0, #1
    23f6:	4b15      	ldr	r3, [pc, #84]	; (244c <findNewFlightStart+0xa8>)
    23f8:	002a      	movs	r2, r5
    23fa:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23fc:	702c      	strb	r4, [r5, #0]
    23fe:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2400:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    2402:	2380      	movs	r3, #128	; 0x80
    2404:	015b      	lsls	r3, r3, #5
    2406:	60fb      	str	r3, [r7, #12]
                beep(1500);
    2408:	4811      	ldr	r0, [pc, #68]	; (2450 <findNewFlightStart+0xac>)
    240a:	4b12      	ldr	r3, [pc, #72]	; (2454 <findNewFlightStart+0xb0>)
    240c:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	721c      	strb	r4, [r3, #8]

            while (flightNumbToCheck > 0) {
                beep(500);
    2412:	20fa      	movs	r0, #250	; 0xfa
    2414:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2416:	2c00      	cmp	r4, #0
    2418:	d008      	beq.n	242c <findNewFlightStart+0x88>
                beep(500);
    241a:	4b0e      	ldr	r3, [pc, #56]	; (2454 <findNewFlightStart+0xb0>)
    241c:	4798      	blx	r3
                delay_ms(500);
    241e:	20fa      	movs	r0, #250	; 0xfa
    2420:	4b09      	ldr	r3, [pc, #36]	; (2448 <findNewFlightStart+0xa4>)
    2422:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2424:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2426:	4798      	blx	r3
                --flightNumbToCheck;
    2428:	b2e4      	uxtb	r4, r4
    242a:	e7f2      	b.n	2412 <findNewFlightStart+0x6e>
            }
            delay_ms(500);
    242c:	4b06      	ldr	r3, [pc, #24]	; (2448 <findNewFlightStart+0xa4>)
    242e:	4798      	blx	r3
            break;
    2430:	e003      	b.n	243a <findNewFlightStart+0x96>



void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2432:	3401      	adds	r4, #1
    2434:	b2e4      	uxtb	r4, r4
    2436:	2c14      	cmp	r4, #20
    2438:	d1b8      	bne.n	23ac <findNewFlightStart+0x8>
            }
            delay_ms(500);
            break;
        }
    }
}
    243a:	b005      	add	sp, #20
    243c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	00002355 	.word	0x00002355
    2444:	0000232d 	.word	0x0000232d
    2448:	00000ff1 	.word	0x00000ff1
    244c:	00000255 	.word	0x00000255
    2450:	000005dc 	.word	0x000005dc
    2454:	00000dd9 	.word	0x00000dd9

00002458 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2458:	4b01      	ldr	r3, [pc, #4]	; (2460 <takeSample+0x8>)
    245a:	7818      	ldrb	r0, [r3, #0]
}
    245c:	4770      	bx	lr
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	200004d3 	.word	0x200004d3

00002464 <pullSample>:

void pullSample() {
    SampleBool = true;
    2464:	2201      	movs	r2, #1
    2466:	4b01      	ldr	r3, [pc, #4]	; (246c <pullSample+0x8>)
    2468:	701a      	strb	r2, [r3, #0]
}
    246a:	4770      	bx	lr
    246c:	200004d3 	.word	0x200004d3

00002470 <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    2470:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    2472:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2474:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    2476:	0004      	movs	r4, r0
    SampleBool = false;
    2478:	4be3      	ldr	r3, [pc, #908]	; (2808 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    247a:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    247c:	4ee3      	ldr	r6, [pc, #908]	; (280c <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    247e:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2480:	47b0      	blx	r6
    2482:	00ad      	lsls	r5, r5, #2
    2484:	5963      	ldr	r3, [r4, r5]
    2486:	1ac0      	subs	r0, r0, r3
    2488:	23cb      	movs	r3, #203	; 0xcb
    248a:	009b      	lsls	r3, r3, #2
    248c:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    248e:	47b0      	blx	r6
    2490:	5160      	str	r0, [r4, r5]

    my_altimeter->myVoltages.batV = adc_read(senseBatPin);
    2492:	4ddf      	ldr	r5, [pc, #892]	; (2810 <sampleTick+0x3a0>)
    2494:	4edf      	ldr	r6, [pc, #892]	; (2814 <sampleTick+0x3a4>)
    2496:	786b      	ldrb	r3, [r5, #1]
    2498:	7829      	ldrb	r1, [r5, #0]
    249a:	78a8      	ldrb	r0, [r5, #2]
    249c:	021b      	lsls	r3, r3, #8
    249e:	430b      	orrs	r3, r1
    24a0:	0400      	lsls	r0, r0, #16
    24a2:	001a      	movs	r2, r3
    24a4:	0003      	movs	r3, r0
    24a6:	78e8      	ldrb	r0, [r5, #3]
    24a8:	4313      	orrs	r3, r2
    24aa:	0600      	lsls	r0, r0, #24
    24ac:	7929      	ldrb	r1, [r5, #4]
    24ae:	4318      	orrs	r0, r3
    24b0:	47b0      	blx	r6
    24b2:	23c5      	movs	r3, #197	; 0xc5
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;
    24b8:	4bd7      	ldr	r3, [pc, #860]	; (2818 <sampleTick+0x3a8>)
    24ba:	4798      	blx	r3
    24bc:	4ad7      	ldr	r2, [pc, #860]	; (281c <sampleTick+0x3ac>)
    24be:	4fd8      	ldr	r7, [pc, #864]	; (2820 <sampleTick+0x3b0>)
    24c0:	4bd8      	ldr	r3, [pc, #864]	; (2824 <sampleTick+0x3b4>)
    24c2:	47b8      	blx	r7
    24c4:	4bd8      	ldr	r3, [pc, #864]	; (2828 <sampleTick+0x3b8>)
    24c6:	4798      	blx	r3
    24c8:	23c6      	movs	r3, #198	; 0xc6
    24ca:	009b      	lsls	r3, r3, #2
    24cc:	50e0      	str	r0, [r4, r3]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    24ce:	79ab      	ldrb	r3, [r5, #6]
    24d0:	7969      	ldrb	r1, [r5, #5]
    24d2:	79e8      	ldrb	r0, [r5, #7]
    24d4:	021b      	lsls	r3, r3, #8
    24d6:	430b      	orrs	r3, r1
    24d8:	0400      	lsls	r0, r0, #16
    24da:	001a      	movs	r2, r3
    24dc:	0003      	movs	r3, r0
    24de:	7a28      	ldrb	r0, [r5, #8]
    24e0:	4313      	orrs	r3, r2
    24e2:	0600      	lsls	r0, r0, #24
    24e4:	7a69      	ldrb	r1, [r5, #9]
    24e6:	4318      	orrs	r0, r3
    24e8:	47b0      	blx	r6
    24ea:	23c7      	movs	r3, #199	; 0xc7
    24ec:	009b      	lsls	r3, r3, #2
    24ee:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    24f0:	7aeb      	ldrb	r3, [r5, #11]
    24f2:	7aa9      	ldrb	r1, [r5, #10]
    24f4:	7b28      	ldrb	r0, [r5, #12]
    24f6:	021b      	lsls	r3, r3, #8
    24f8:	430b      	orrs	r3, r1
    24fa:	0400      	lsls	r0, r0, #16
    24fc:	001a      	movs	r2, r3
    24fe:	0003      	movs	r3, r0
    2500:	7b68      	ldrb	r0, [r5, #13]
    2502:	4313      	orrs	r3, r2
    2504:	0600      	lsls	r0, r0, #24
    2506:	7ba9      	ldrb	r1, [r5, #14]
    2508:	4318      	orrs	r0, r3
    250a:	47b0      	blx	r6
    250c:	4bc7      	ldr	r3, [pc, #796]	; (282c <sampleTick+0x3bc>)
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    250e:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    2510:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    2512:	7c2b      	ldrb	r3, [r5, #16]
    2514:	7c68      	ldrb	r0, [r5, #17]
    2516:	021b      	lsls	r3, r3, #8
    2518:	430b      	orrs	r3, r1
    251a:	0400      	lsls	r0, r0, #16
    251c:	001a      	movs	r2, r3
    251e:	0003      	movs	r3, r0
    2520:	7ca8      	ldrb	r0, [r5, #18]
    2522:	4313      	orrs	r3, r2
    2524:	0600      	lsls	r0, r0, #24
    2526:	7ce9      	ldrb	r1, [r5, #19]
    2528:	4318      	orrs	r0, r3
    252a:	47b0      	blx	r6
    252c:	23c8      	movs	r3, #200	; 0xc8
    252e:	009b      	lsls	r3, r3, #2
    2530:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    2532:	7d6b      	ldrb	r3, [r5, #21]
    2534:	7d29      	ldrb	r1, [r5, #20]
    2536:	7da8      	ldrb	r0, [r5, #22]
    2538:	021b      	lsls	r3, r3, #8
    253a:	430b      	orrs	r3, r1
    253c:	0400      	lsls	r0, r0, #16
    253e:	001a      	movs	r2, r3
    2540:	0003      	movs	r3, r0
    2542:	7de8      	ldrb	r0, [r5, #23]
    2544:	4313      	orrs	r3, r2
    2546:	0600      	lsls	r0, r0, #24
    2548:	7e29      	ldrb	r1, [r5, #24]
    254a:	4318      	orrs	r0, r3
    254c:	47b0      	blx	r6
    254e:	4bb8      	ldr	r3, [pc, #736]	; (2830 <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    2550:	7e69      	ldrb	r1, [r5, #25]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    2552:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    2554:	7eab      	ldrb	r3, [r5, #26]
    2556:	7ee8      	ldrb	r0, [r5, #27]
    2558:	021b      	lsls	r3, r3, #8
    255a:	430b      	orrs	r3, r1
    255c:	0400      	lsls	r0, r0, #16
    255e:	001a      	movs	r2, r3
    2560:	0003      	movs	r3, r0
    2562:	7f28      	ldrb	r0, [r5, #28]
    2564:	4313      	orrs	r3, r2
    2566:	0600      	lsls	r0, r0, #24
    2568:	7f69      	ldrb	r1, [r5, #29]
    256a:	4318      	orrs	r0, r3
    256c:	47b0      	blx	r6
    256e:	0023      	movs	r3, r4
    2570:	33fe      	adds	r3, #254	; 0xfe
    2572:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2574:	4baf      	ldr	r3, [pc, #700]	; (2834 <sampleTick+0x3c4>)
    2576:	0026      	movs	r6, r4
    2578:	18c0      	adds	r0, r0, r3
    257a:	4ba7      	ldr	r3, [pc, #668]	; (2818 <sampleTick+0x3a8>)
    257c:	4798      	blx	r3
    257e:	4aae      	ldr	r2, [pc, #696]	; (2838 <sampleTick+0x3c8>)
    2580:	4fa7      	ldr	r7, [pc, #668]	; (2820 <sampleTick+0x3b0>)
    2582:	4bae      	ldr	r3, [pc, #696]	; (283c <sampleTick+0x3cc>)
    2584:	47b8      	blx	r7
    2586:	4ba8      	ldr	r3, [pc, #672]	; (2828 <sampleTick+0x3b8>)
    2588:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    258a:	0022      	movs	r2, r4
    258c:	0023      	movs	r3, r4
    258e:	32c8      	adds	r2, #200	; 0xc8
    2590:	9204      	str	r2, [sp, #16]
    2592:	6812      	ldr	r2, [r2, #0]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2594:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2596:	33cc      	adds	r3, #204	; 0xcc
    2598:	2780      	movs	r7, #128	; 0x80
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    259a:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    259c:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    259e:	2250      	movs	r2, #80	; 0x50
    25a0:	4ba7      	ldr	r3, [pc, #668]	; (2840 <sampleTick+0x3d0>)
    25a2:	023f      	lsls	r7, r7, #8
    25a4:	615f      	str	r7, [r3, #20]
    25a6:	002e      	movs	r6, r5
    25a8:	9200      	str	r2, [sp, #0]
    25aa:	7fea      	ldrb	r2, [r5, #31]
    25ac:	7fa8      	ldrb	r0, [r5, #30]
    25ae:	0212      	lsls	r2, r2, #8
    25b0:	4302      	orrs	r2, r0
    25b2:	0011      	movs	r1, r2
    25b4:	002b      	movs	r3, r5
    25b6:	361e      	adds	r6, #30
    25b8:	78b2      	ldrb	r2, [r6, #2]
    25ba:	3323      	adds	r3, #35	; 0x23
    25bc:	0412      	lsls	r2, r2, #16
    25be:	430a      	orrs	r2, r1
    25c0:	78f1      	ldrb	r1, [r6, #3]
    25c2:	7818      	ldrb	r0, [r3, #0]
    25c4:	0609      	lsls	r1, r1, #24
    25c6:	4311      	orrs	r1, r2
    25c8:	7932      	ldrb	r2, [r6, #4]
    25ca:	789d      	ldrb	r5, [r3, #2]
    25cc:	9203      	str	r2, [sp, #12]
    25ce:	785a      	ldrb	r2, [r3, #1]
    25d0:	042d      	lsls	r5, r5, #16
    25d2:	0212      	lsls	r2, r2, #8
    25d4:	4302      	orrs	r2, r0
    25d6:	9102      	str	r1, [sp, #8]
    25d8:	0011      	movs	r1, r2
    25da:	002a      	movs	r2, r5
    25dc:	78dd      	ldrb	r5, [r3, #3]
    25de:	791b      	ldrb	r3, [r3, #4]
    25e0:	430a      	orrs	r2, r1
    25e2:	062d      	lsls	r5, r5, #24
    25e4:	4315      	orrs	r5, r2
    25e6:	9305      	str	r3, [sp, #20]
    25e8:	9a02      	ldr	r2, [sp, #8]
    25ea:	9905      	ldr	r1, [sp, #20]
    25ec:	9b03      	ldr	r3, [sp, #12]
    25ee:	0028      	movs	r0, r5
    25f0:	4e94      	ldr	r6, [pc, #592]	; (2844 <sampleTick+0x3d4>)
    25f2:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    25f4:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25f6:	4b92      	ldr	r3, [pc, #584]	; (2840 <sampleTick+0x3d0>)
    25f8:	0040      	lsls	r0, r0, #1
    25fa:	619f      	str	r7, [r3, #24]
    25fc:	4b92      	ldr	r3, [pc, #584]	; (2848 <sampleTick+0x3d8>)
    25fe:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    2600:	4b92      	ldr	r3, [pc, #584]	; (284c <sampleTick+0x3dc>)
    2602:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2604:	4b8e      	ldr	r3, [pc, #568]	; (2840 <sampleTick+0x3d0>)
    2606:	6220      	str	r0, [r4, #32]
    2608:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    260a:	2346      	movs	r3, #70	; 0x46
    260c:	9a02      	ldr	r2, [sp, #8]
    260e:	9300      	str	r3, [sp, #0]
    2610:	0028      	movs	r0, r5
    2612:	9b03      	ldr	r3, [sp, #12]
    2614:	9905      	ldr	r1, [sp, #20]
    2616:	47b0      	blx	r6
    2618:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    261a:	4b89      	ldr	r3, [pc, #548]	; (2840 <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    261c:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    261e:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2620:	4b8b      	ldr	r3, [pc, #556]	; (2850 <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2622:	4e8c      	ldr	r6, [pc, #560]	; (2854 <sampleTick+0x3e4>)
    2624:	601a      	str	r2, [r3, #0]
    2626:	2182      	movs	r1, #130	; 0x82
    2628:	2000      	movs	r0, #0
    262a:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    262c:	21ff      	movs	r1, #255	; 0xff
    262e:	2000      	movs	r0, #0
    2630:	47b0      	blx	r6
    2632:	0023      	movs	r3, r4
    2634:	33e4      	adds	r3, #228	; 0xe4
    2636:	8018      	strh	r0, [r3, #0]
    2638:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    263a:	21ff      	movs	r1, #255	; 0xff
    263c:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    263e:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2640:	47b0      	blx	r6
    2642:	9b02      	ldr	r3, [sp, #8]
    2644:	0200      	lsls	r0, r0, #8
    2646:	4305      	orrs	r5, r0
    2648:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    264a:	21ff      	movs	r1, #255	; 0xff
    264c:	2000      	movs	r0, #0
    264e:	47b0      	blx	r6
    2650:	0023      	movs	r3, r4
    2652:	33e8      	adds	r3, #232	; 0xe8
    2654:	8018      	strh	r0, [r3, #0]
    2656:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2658:	21ff      	movs	r1, #255	; 0xff
    265a:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    265c:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    265e:	47b0      	blx	r6
    2660:	9b03      	ldr	r3, [sp, #12]
    2662:	0200      	lsls	r0, r0, #8
    2664:	4305      	orrs	r5, r0
    2666:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2668:	21ff      	movs	r1, #255	; 0xff
    266a:	0025      	movs	r5, r4
    266c:	2000      	movs	r0, #0
    266e:	47b0      	blx	r6
    2670:	35ec      	adds	r5, #236	; 0xec
    2672:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2674:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2676:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2678:	2000      	movs	r0, #0
    267a:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    267c:	2280      	movs	r2, #128	; 0x80
    267e:	0200      	lsls	r0, r0, #8
    2680:	4b75      	ldr	r3, [pc, #468]	; (2858 <sampleTick+0x3e8>)
    2682:	4307      	orrs	r7, r0
    2684:	00d2      	lsls	r2, r2, #3
    2686:	802f      	strh	r7, [r5, #0]
    2688:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    268a:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    268c:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    268e:	2000      	movs	r0, #0
    2690:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2692:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2694:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2696:	2200      	movs	r2, #0
    2698:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    269a:	2102      	movs	r1, #2
    269c:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    269e:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    26a0:	37ee      	adds	r7, #238	; 0xee
    26a2:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    26a4:	1100      	asrs	r0, r0, #4
    26a6:	31e6      	adds	r1, #230	; 0xe6
    26a8:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    26aa:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    26ac:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    26ae:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    26b0:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    26b2:	4b59      	ldr	r3, [pc, #356]	; (2818 <sampleTick+0x3a8>)
    26b4:	4798      	blx	r3
    26b6:	23fe      	movs	r3, #254	; 0xfe
    26b8:	2200      	movs	r2, #0
    26ba:	4d59      	ldr	r5, [pc, #356]	; (2820 <sampleTick+0x3b0>)
    26bc:	059b      	lsls	r3, r3, #22
    26be:	47a8      	blx	r5
    26c0:	4b59      	ldr	r3, [pc, #356]	; (2828 <sampleTick+0x3b8>)
    26c2:	4798      	blx	r3
    26c4:	9b04      	ldr	r3, [sp, #16]
    26c6:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    26c8:	0023      	movs	r3, r4
    26ca:	33d0      	adds	r3, #208	; 0xd0
    26cc:	9303      	str	r3, [sp, #12]
    26ce:	9b02      	ldr	r3, [sp, #8]
    26d0:	2000      	movs	r0, #0
    26d2:	5e18      	ldrsh	r0, [r3, r0]
    26d4:	4b50      	ldr	r3, [pc, #320]	; (2818 <sampleTick+0x3a8>)
    26d6:	4798      	blx	r3
    26d8:	23fe      	movs	r3, #254	; 0xfe
    26da:	2200      	movs	r2, #0
    26dc:	059b      	lsls	r3, r3, #22
    26de:	47a8      	blx	r5
    26e0:	4b51      	ldr	r3, [pc, #324]	; (2828 <sampleTick+0x3b8>)
    26e2:	4798      	blx	r3
    26e4:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = -my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    26e6:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    26e8:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = -my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    26ea:	2300      	movs	r3, #0
    26ec:	5ef8      	ldrsh	r0, [r7, r3]
    26ee:	4b4a      	ldr	r3, [pc, #296]	; (2818 <sampleTick+0x3a8>)
    26f0:	4240      	negs	r0, r0
    26f2:	4798      	blx	r3
    26f4:	23fe      	movs	r3, #254	; 0xfe
    26f6:	2200      	movs	r2, #0
    26f8:	4f49      	ldr	r7, [pc, #292]	; (2820 <sampleTick+0x3b0>)
    26fa:	059b      	lsls	r3, r3, #22
    26fc:	47b8      	blx	r7
    26fe:	4b4a      	ldr	r3, [pc, #296]	; (2828 <sampleTick+0x3b8>)
    2700:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2702:	2280      	movs	r2, #128	; 0x80
    2704:	4b4e      	ldr	r3, [pc, #312]	; (2840 <sampleTick+0x3d0>)
    2706:	00d2      	lsls	r2, r2, #3
    2708:	35d4      	adds	r5, #212	; 0xd4
    270a:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    270c:	2182      	movs	r1, #130	; 0x82
    270e:	615a      	str	r2, [r3, #20]
    2710:	2000      	movs	r0, #0
    2712:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2714:	21ff      	movs	r1, #255	; 0xff
    2716:	2000      	movs	r0, #0
    2718:	47b0      	blx	r6
    271a:	0023      	movs	r3, r4
    271c:	33f0      	adds	r3, #240	; 0xf0
    271e:	8018      	strh	r0, [r3, #0]
    2720:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2722:	21ff      	movs	r1, #255	; 0xff
    2724:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2726:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2728:	47b0      	blx	r6
    272a:	9b02      	ldr	r3, [sp, #8]
    272c:	0200      	lsls	r0, r0, #8
    272e:	4305      	orrs	r5, r0
    2730:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2732:	21ff      	movs	r1, #255	; 0xff
    2734:	2000      	movs	r0, #0
    2736:	47b0      	blx	r6
    2738:	0023      	movs	r3, r4
    273a:	33f4      	adds	r3, #244	; 0xf4
    273c:	8018      	strh	r0, [r3, #0]
    273e:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2740:	21ff      	movs	r1, #255	; 0xff
    2742:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2744:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2746:	47b0      	blx	r6
    2748:	9b03      	ldr	r3, [sp, #12]
    274a:	0200      	lsls	r0, r0, #8
    274c:	4305      	orrs	r5, r0
    274e:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2750:	21ff      	movs	r1, #255	; 0xff
    2752:	0025      	movs	r5, r4
    2754:	2000      	movs	r0, #0
    2756:	47b0      	blx	r6
    2758:	35f8      	adds	r5, #248	; 0xf8
    275a:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    275c:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    275e:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2760:	2000      	movs	r0, #0
    2762:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2764:	2280      	movs	r2, #128	; 0x80
    2766:	0200      	lsls	r0, r0, #8
    2768:	4b35      	ldr	r3, [pc, #212]	; (2840 <sampleTick+0x3d0>)
    276a:	4307      	orrs	r7, r0
    276c:	00d2      	lsls	r2, r2, #3
    276e:	802f      	strh	r7, [r5, #0]
    2770:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    2772:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2774:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    2776:	2000      	movs	r0, #0
    2778:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    277a:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    277c:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    277e:	2200      	movs	r2, #0
    2780:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    2782:	2100      	movs	r1, #0
    2784:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2786:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2788:	36f6      	adds	r6, #246	; 0xf6
    278a:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    278c:	1100      	asrs	r0, r0, #4
    278e:	31f2      	adds	r1, #242	; 0xf2
    2790:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2792:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2794:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2796:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    2798:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    279a:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    279c:	4b1e      	ldr	r3, [pc, #120]	; (2818 <sampleTick+0x3a8>)
    279e:	4798      	blx	r3
    27a0:	23fe      	movs	r3, #254	; 0xfe
    27a2:	2200      	movs	r2, #0
    27a4:	4f1e      	ldr	r7, [pc, #120]	; (2820 <sampleTick+0x3b0>)
    27a6:	059b      	lsls	r3, r3, #22
    27a8:	47b8      	blx	r7
    27aa:	4b1f      	ldr	r3, [pc, #124]	; (2828 <sampleTick+0x3b8>)
    27ac:	4798      	blx	r3
    27ae:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    27b0:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    27b2:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    27b4:	2300      	movs	r3, #0
    27b6:	5ef0      	ldrsh	r0, [r6, r3]
    27b8:	4b17      	ldr	r3, [pc, #92]	; (2818 <sampleTick+0x3a8>)
    27ba:	4798      	blx	r3
    27bc:	23fe      	movs	r3, #254	; 0xfe
    27be:	2200      	movs	r2, #0
    27c0:	4e17      	ldr	r6, [pc, #92]	; (2820 <sampleTick+0x3b0>)
    27c2:	059b      	lsls	r3, r3, #22
    27c4:	47b0      	blx	r6
    27c6:	4b18      	ldr	r3, [pc, #96]	; (2828 <sampleTick+0x3b8>)
    27c8:	4798      	blx	r3
    27ca:	37dc      	adds	r7, #220	; 0xdc
    27cc:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    27ce:	2302      	movs	r3, #2
    27d0:	5ee8      	ldrsh	r0, [r5, r3]
    27d2:	4b11      	ldr	r3, [pc, #68]	; (2818 <sampleTick+0x3a8>)
    27d4:	4798      	blx	r3
    27d6:	23fe      	movs	r3, #254	; 0xfe
    27d8:	2200      	movs	r2, #0
    27da:	4d11      	ldr	r5, [pc, #68]	; (2820 <sampleTick+0x3b0>)
    27dc:	059b      	lsls	r3, r3, #22
    27de:	47a8      	blx	r5
    27e0:	0026      	movs	r6, r4
    27e2:	4b11      	ldr	r3, [pc, #68]	; (2828 <sampleTick+0x3b8>)
    27e4:	4798      	blx	r3
    27e6:	36e0      	adds	r6, #224	; 0xe0
    27e8:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    27ea:	4b1c      	ldr	r3, [pc, #112]	; (285c <sampleTick+0x3ec>)
    27ec:	2005      	movs	r0, #5
    27ee:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    27f0:	4b16      	ldr	r3, [pc, #88]	; (284c <sampleTick+0x3dc>)
    27f2:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    27f4:	3410      	adds	r4, #16
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    27f6:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    27f8:	4b19      	ldr	r3, [pc, #100]	; (2860 <sampleTick+0x3f0>)
    27fa:	0020      	movs	r0, r4
    27fc:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    27fe:	0020      	movs	r0, r4
    2800:	4b18      	ldr	r3, [pc, #96]	; (2864 <sampleTick+0x3f4>)
    2802:	4798      	blx	r3


}
    2804:	b007      	add	sp, #28
    2806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2808:	200004d3 	.word	0x200004d3
    280c:	0000103d 	.word	0x0000103d
    2810:	00006838 	.word	0x00006838
    2814:	00000cb1 	.word	0x00000cb1
    2818:	000060dd 	.word	0x000060dd
    281c:	77318fc5 	.word	0x77318fc5
    2820:	00005495 	.word	0x00005495
    2824:	3f5f212d 	.word	0x3f5f212d
    2828:	00006279 	.word	0x00006279
    282c:	0000031e 	.word	0x0000031e
    2830:	00000322 	.word	0x00000322
    2834:	fffff0c4 	.word	0xfffff0c4
    2838:	02de00d2 	.word	0x02de00d2
    283c:	bf8f8a09 	.word	0xbf8f8a09
    2840:	41004400 	.word	0x41004400
    2844:	00000d19 	.word	0x00000d19
    2848:	00000fc1 	.word	0x00000fc1
    284c:	0000041d 	.word	0x0000041d
    2850:	41004494 	.word	0x41004494
    2854:	00002979 	.word	0x00002979
    2858:	41004498 	.word	0x41004498
    285c:	00000ff1 	.word	0x00000ff1
    2860:	000004d1 	.word	0x000004d1
    2864:	00000579 	.word	0x00000579

00002868 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    286c:	2301      	movs	r3, #1
    286e:	1ca6      	adds	r6, r4, #2
    2870:	40b3      	lsls	r3, r6
    2872:	480d      	ldr	r0, [pc, #52]	; (28a8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2874:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2876:	6a01      	ldr	r1, [r0, #32]
    2878:	430b      	orrs	r3, r1
    287a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    287c:	2d00      	cmp	r5, #0
    287e:	d003      	beq.n	2888 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2880:	2107      	movs	r1, #7
    2882:	0028      	movs	r0, r5
    2884:	4b09      	ldr	r3, [pc, #36]	; (28ac <sercomClockEnable+0x44>)
    2886:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2888:	22f0      	movs	r2, #240	; 0xf0
    288a:	2080      	movs	r0, #128	; 0x80
    288c:	0229      	lsls	r1, r5, #8
    288e:	0112      	lsls	r2, r2, #4
    2890:	4011      	ands	r1, r2
    2892:	01c0      	lsls	r0, r0, #7
    2894:	4301      	orrs	r1, r0
    2896:	0020      	movs	r0, r4
    2898:	3014      	adds	r0, #20
    289a:	223f      	movs	r2, #63	; 0x3f
    289c:	0003      	movs	r3, r0
    289e:	4013      	ands	r3, r2
    28a0:	4319      	orrs	r1, r3
    28a2:	4b03      	ldr	r3, [pc, #12]	; (28b0 <sercomClockEnable+0x48>)
    28a4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    28a6:	bd70      	pop	{r4, r5, r6, pc}
    28a8:	40000400 	.word	0x40000400
    28ac:	00000f71 	.word	0x00000f71
    28b0:	40000c00 	.word	0x40000c00

000028b4 <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    28b4:	4b04      	ldr	r3, [pc, #16]	; (28c8 <sercomReset+0x14>)
    28b6:	0280      	lsls	r0, r0, #10
    28b8:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    28ba:	2301      	movs	r3, #1
    28bc:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    28be:	6802      	ldr	r2, [r0, #0]
    28c0:	421a      	tst	r2, r3
    28c2:	d1fc      	bne.n	28be <sercomReset+0xa>
}
    28c4:	4770      	bx	lr
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	42000800 	.word	0x42000800

000028cc <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    28cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ce:	0004      	movs	r4, r0
    28d0:	9300      	str	r3, [sp, #0]
    28d2:	ab08      	add	r3, sp, #32
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	000e      	movs	r6, r1
    28d8:	9301      	str	r3, [sp, #4]
    28da:	ab09      	add	r3, sp, #36	; 0x24
    28dc:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    28de:	4b12      	ldr	r3, [pc, #72]	; (2928 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    28e0:	0015      	movs	r5, r2

    sercomReset(id);
    28e2:	4798      	blx	r3
    28e4:	4b11      	ldr	r3, [pc, #68]	; (292c <sercomSpiMasterInit+0x60>)
    28e6:	02a4      	lsls	r4, r4, #10
    28e8:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    28ea:	2380      	movs	r3, #128	; 0x80
    28ec:	029b      	lsls	r3, r3, #10
    28ee:	6063      	str	r3, [r4, #4]
    28f0:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    28f2:	21c0      	movs	r1, #192	; 0xc0
    28f4:	042d      	lsls	r5, r5, #16
    28f6:	029b      	lsls	r3, r3, #10
    28f8:	402b      	ands	r3, r5
    28fa:	250e      	movs	r5, #14
    28fc:	0536      	lsls	r6, r6, #20
    28fe:	0389      	lsls	r1, r1, #14
    2900:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2902:	9e00      	ldr	r6, [sp, #0]
    2904:	431d      	orrs	r5, r3
    2906:	1e73      	subs	r3, r6, #1
    2908:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    290a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    290c:	0772      	lsls	r2, r6, #29
    290e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2910:	432a      	orrs	r2, r5
    2912:	1e59      	subs	r1, r3, #1
    2914:	418b      	sbcs	r3, r1
    2916:	0016      	movs	r6, r2
    2918:	071b      	lsls	r3, r3, #28
    291a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    291c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    291e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2920:	69e3      	ldr	r3, [r4, #28]
    2922:	075b      	lsls	r3, r3, #29
    2924:	d4fc      	bmi.n	2920 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2926:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2928:	000028b5 	.word	0x000028b5
    292c:	42000800 	.word	0x42000800

00002930 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2930:	b570      	push	{r4, r5, r6, lr}
    2932:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    2934:	4b0c      	ldr	r3, [pc, #48]	; (2968 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2936:	000d      	movs	r5, r1
    2938:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    293a:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    293c:	4b0b      	ldr	r3, [pc, #44]	; (296c <sercomUartInit+0x3c>)
    293e:	02b0      	lsls	r0, r6, #10
    2940:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2942:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2944:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2946:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2948:	4b09      	ldr	r3, [pc, #36]	; (2970 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    294a:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    294c:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    294e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2950:	0392      	lsls	r2, r2, #14
    2952:	4011      	ands	r1, r2
    2954:	4a07      	ldr	r2, [pc, #28]	; (2974 <sercomUartInit+0x44>)
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2956:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2958:	0424      	lsls	r4, r4, #16
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    295a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    295c:	4311      	orrs	r1, r2
    295e:	4023      	ands	r3, r4
    2960:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2962:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2964:	bd70      	pop	{r4, r5, r6, pc}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	000028b5 	.word	0x000028b5
    296c:	42000800 	.word	0x42000800
    2970:	ffffb15b 	.word	0xffffb15b
    2974:	40000006 	.word	0x40000006

00002978 <spiDataTransfer>:
    2978:	4b04      	ldr	r3, [pc, #16]	; (298c <spiDataTransfer+0x14>)
    297a:	0280      	lsls	r0, r0, #10
    297c:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    297e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2980:	7e03      	ldrb	r3, [r0, #24]
    2982:	075b      	lsls	r3, r3, #29
    2984:	d5fc      	bpl.n	2980 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2986:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2988:	b2c0      	uxtb	r0, r0
}
    298a:	4770      	bx	lr
    298c:	42000800 	.word	0x42000800

00002990 <usartDataOut>:
    2990:	4b04      	ldr	r3, [pc, #16]	; (29a4 <usartDataOut+0x14>)
    2992:	0280      	lsls	r0, r0, #10
    2994:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2996:	b289      	uxth	r1, r1
    2998:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    299a:	7e03      	ldrb	r3, [r0, #24]
    299c:	07db      	lsls	r3, r3, #31
    299e:	d5fc      	bpl.n	299a <usartDataOut+0xa>
}
    29a0:	4770      	bx	lr
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	42000800 	.word	0x42000800

000029a8 <usartDataIn>:
    29a8:	4b02      	ldr	r3, [pc, #8]	; (29b4 <usartDataIn+0xc>)
    29aa:	0280      	lsls	r0, r0, #10
    29ac:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    29ae:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    29b0:	b2c0      	uxtb	r0, r0
}
    29b2:	4770      	bx	lr
    29b4:	42000800 	.word	0x42000800

000029b8 <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    29ba:	4b2f      	ldr	r3, [pc, #188]	; (2a78 <attemptConnection+0xc0>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    29bc:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    29be:	4798      	blx	r3
    29c0:	2800      	cmp	r0, #0
    29c2:	d057      	beq.n	2a74 <attemptConnection+0xbc>

        my_altimeter->myFlightState = flightIdle;
    29c4:	2301      	movs	r3, #1

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    29c6:	4a2d      	ldr	r2, [pc, #180]	; (2a7c <attemptConnection+0xc4>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightIdle;
    29c8:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    29ca:	7e13      	ldrb	r3, [r2, #24]
    29cc:	4e2b      	ldr	r6, [pc, #172]	; (2a7c <attemptConnection+0xc4>)
    29ce:	075b      	lsls	r3, r3, #29
    29d0:	d5fb      	bpl.n	29ca <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    29d2:	2003      	movs	r0, #3
    29d4:	4d2a      	ldr	r5, [pc, #168]	; (2a80 <attemptConnection+0xc8>)
    29d6:	47a8      	blx	r5
    29d8:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    29da:	2c4c      	cmp	r4, #76	; 0x4c
    29dc:	d13c      	bne.n	2a58 <attemptConnection+0xa0>
    29de:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    29e0:	0020      	movs	r0, r4
    29e2:	4b28      	ldr	r3, [pc, #160]	; (2a84 <attemptConnection+0xcc>)
    29e4:	4798      	blx	r3
    29e6:	2800      	cmp	r0, #0
    29e8:	d005      	beq.n	29f6 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    29ea:	0021      	movs	r1, r4
    29ec:	3130      	adds	r1, #48	; 0x30
    29ee:	b2c9      	uxtb	r1, r1
    29f0:	2003      	movs	r0, #3
    29f2:	4b25      	ldr	r3, [pc, #148]	; (2a88 <attemptConnection+0xd0>)
    29f4:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    29f6:	3401      	adds	r4, #1
    29f8:	b2e4      	uxtb	r4, r4
    29fa:	2c0b      	cmp	r4, #11
    29fc:	d1f0      	bne.n	29e0 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    29fe:	210f      	movs	r1, #15
    2a00:	2003      	movs	r0, #3
    2a02:	4c21      	ldr	r4, [pc, #132]	; (2a88 <attemptConnection+0xd0>)
    2a04:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2a06:	7e33      	ldrb	r3, [r6, #24]
    2a08:	075b      	lsls	r3, r3, #29
    2a0a:	d5fc      	bpl.n	2a06 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2a0c:	2003      	movs	r0, #3
    2a0e:	47a8      	blx	r5
    2a10:	3830      	subs	r0, #48	; 0x30
    2a12:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2a14:	0028      	movs	r0, r5
    2a16:	4b1d      	ldr	r3, [pc, #116]	; (2a8c <attemptConnection+0xd4>)
    2a18:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2a1a:	4b1d      	ldr	r3, [pc, #116]	; (2a90 <attemptConnection+0xd8>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2a1c:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2a1e:	0028      	movs	r0, r5
    2a20:	4798      	blx	r3
    2a22:	1e46      	subs	r6, r0, #1
    2a24:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2a26:	1bf5      	subs	r5, r6, r7
    2a28:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2a2a:	b2e9      	uxtb	r1, r5
    2a2c:	2003      	movs	r0, #3
    2a2e:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2a30:	b2a9      	uxth	r1, r5
    2a32:	0a09      	lsrs	r1, r1, #8
    2a34:	2003      	movs	r0, #3
    2a36:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2a38:	b2f1      	uxtb	r1, r6
    2a3a:	2003      	movs	r0, #3
    2a3c:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2a3e:	0a31      	lsrs	r1, r6, #8
    2a40:	b2c9      	uxtb	r1, r1
    2a42:	2003      	movs	r0, #3
    2a44:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2a46:	0c31      	lsrs	r1, r6, #16
    2a48:	b2c9      	uxtb	r1, r1
    2a4a:	2003      	movs	r0, #3
    2a4c:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2a4e:	0031      	movs	r1, r6
    2a50:	0038      	movs	r0, r7
    2a52:	4b10      	ldr	r3, [pc, #64]	; (2a94 <attemptConnection+0xdc>)
    2a54:	4798      	blx	r3
    2a56:	e00d      	b.n	2a74 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2a58:	2845      	cmp	r0, #69	; 0x45
    2a5a:	d10b      	bne.n	2a74 <attemptConnection+0xbc>
            AT25SFChipErase();
    2a5c:	4b0e      	ldr	r3, [pc, #56]	; (2a98 <attemptConnection+0xe0>)
    2a5e:	4798      	blx	r3

            AT25SFHoldTillReady();
    2a60:	4b0e      	ldr	r3, [pc, #56]	; (2a9c <attemptConnection+0xe4>)
    2a62:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    2a64:	2003      	movs	r0, #3
    2a66:	4b08      	ldr	r3, [pc, #32]	; (2a88 <attemptConnection+0xd0>)
    2a68:	0021      	movs	r1, r4
    2a6a:	4798      	blx	r3
            beep(400);
    2a6c:	20c8      	movs	r0, #200	; 0xc8
    2a6e:	4b0c      	ldr	r3, [pc, #48]	; (2aa0 <attemptConnection+0xe8>)
    2a70:	0040      	lsls	r0, r0, #1
    2a72:	4798      	blx	r3


        }
    }

}
    2a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	00000bb9 	.word	0x00000bb9
    2a7c:	42001400 	.word	0x42001400
    2a80:	000029a9 	.word	0x000029a9
    2a84:	00002355 	.word	0x00002355
    2a88:	00002991 	.word	0x00002991
    2a8c:	00002305 	.word	0x00002305
    2a90:	0000232d 	.word	0x0000232d
    2a94:	00000bed 	.word	0x00000bed
    2a98:	00000221 	.word	0x00000221
    2a9c:	000001e5 	.word	0x000001e5
    2aa0:	00000dd9 	.word	0x00000dd9

00002aa4 <pow>:
    2aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa6:	465f      	mov	r7, fp
    2aa8:	464d      	mov	r5, r9
    2aaa:	4656      	mov	r6, sl
    2aac:	4644      	mov	r4, r8
    2aae:	b4f0      	push	{r4, r5, r6, r7}
    2ab0:	b091      	sub	sp, #68	; 0x44
    2ab2:	001f      	movs	r7, r3
    2ab4:	0004      	movs	r4, r0
    2ab6:	000d      	movs	r5, r1
    2ab8:	0016      	movs	r6, r2
    2aba:	f000 f9af 	bl	2e1c <__ieee754_pow>
    2abe:	4bcf      	ldr	r3, [pc, #828]	; (2dfc <pow+0x358>)
    2ac0:	9002      	str	r0, [sp, #8]
    2ac2:	9103      	str	r1, [sp, #12]
    2ac4:	469b      	mov	fp, r3
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	b25b      	sxtb	r3, r3
    2aca:	4699      	mov	r9, r3
    2acc:	3301      	adds	r3, #1
    2ace:	d04f      	beq.n	2b70 <pow+0xcc>
    2ad0:	0032      	movs	r2, r6
    2ad2:	003b      	movs	r3, r7
    2ad4:	0030      	movs	r0, r6
    2ad6:	0039      	movs	r1, r7
    2ad8:	f003 faaa 	bl	6030 <__aeabi_dcmpun>
    2adc:	9000      	str	r0, [sp, #0]
    2ade:	2800      	cmp	r0, #0
    2ae0:	d146      	bne.n	2b70 <pow+0xcc>
    2ae2:	0022      	movs	r2, r4
    2ae4:	002b      	movs	r3, r5
    2ae6:	0020      	movs	r0, r4
    2ae8:	0029      	movs	r1, r5
    2aea:	f003 faa1 	bl	6030 <__aeabi_dcmpun>
    2aee:	2200      	movs	r2, #0
    2af0:	4682      	mov	sl, r0
    2af2:	2800      	cmp	r0, #0
    2af4:	d134      	bne.n	2b60 <pow+0xbc>
    2af6:	2300      	movs	r3, #0
    2af8:	0020      	movs	r0, r4
    2afa:	0029      	movs	r1, r5
    2afc:	f001 f8fc 	bl	3cf8 <__aeabi_dcmpeq>
    2b00:	2800      	cmp	r0, #0
    2b02:	d03a      	beq.n	2b7a <pow+0xd6>
    2b04:	2200      	movs	r2, #0
    2b06:	2300      	movs	r3, #0
    2b08:	0030      	movs	r0, r6
    2b0a:	0039      	movs	r1, r7
    2b0c:	f001 f8f4 	bl	3cf8 <__aeabi_dcmpeq>
    2b10:	9005      	str	r0, [sp, #20]
    2b12:	2800      	cmp	r0, #0
    2b14:	d100      	bne.n	2b18 <pow+0x74>
    2b16:	e074      	b.n	2c02 <pow+0x15e>
    2b18:	ab06      	add	r3, sp, #24
    2b1a:	4698      	mov	r8, r3
    2b1c:	2301      	movs	r3, #1
    2b1e:	4642      	mov	r2, r8
    2b20:	9306      	str	r3, [sp, #24]
    2b22:	4bb7      	ldr	r3, [pc, #732]	; (2e00 <pow+0x35c>)
    2b24:	6053      	str	r3, [r2, #4]
    2b26:	4643      	mov	r3, r8
    2b28:	4652      	mov	r2, sl
    2b2a:	609c      	str	r4, [r3, #8]
    2b2c:	60dd      	str	r5, [r3, #12]
    2b2e:	621a      	str	r2, [r3, #32]
    2b30:	611e      	str	r6, [r3, #16]
    2b32:	615f      	str	r7, [r3, #20]
    2b34:	4642      	mov	r2, r8
    2b36:	2300      	movs	r3, #0
    2b38:	2400      	movs	r4, #0
    2b3a:	6193      	str	r3, [r2, #24]
    2b3c:	61d4      	str	r4, [r2, #28]
    2b3e:	464b      	mov	r3, r9
    2b40:	2b00      	cmp	r3, #0
    2b42:	d100      	bne.n	2b46 <pow+0xa2>
    2b44:	e094      	b.n	2c70 <pow+0x1cc>
    2b46:	2300      	movs	r3, #0
    2b48:	4cae      	ldr	r4, [pc, #696]	; (2e04 <pow+0x360>)
    2b4a:	9300      	str	r3, [sp, #0]
    2b4c:	9401      	str	r4, [sp, #4]
    2b4e:	9800      	ldr	r0, [sp, #0]
    2b50:	9901      	ldr	r1, [sp, #4]
    2b52:	b011      	add	sp, #68	; 0x44
    2b54:	bc3c      	pop	{r2, r3, r4, r5}
    2b56:	4690      	mov	r8, r2
    2b58:	4699      	mov	r9, r3
    2b5a:	46a2      	mov	sl, r4
    2b5c:	46ab      	mov	fp, r5
    2b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b60:	2300      	movs	r3, #0
    2b62:	0030      	movs	r0, r6
    2b64:	0039      	movs	r1, r7
    2b66:	f001 f8c7 	bl	3cf8 <__aeabi_dcmpeq>
    2b6a:	2800      	cmp	r0, #0
    2b6c:	d000      	beq.n	2b70 <pow+0xcc>
    2b6e:	e0eb      	b.n	2d48 <pow+0x2a4>
    2b70:	9b02      	ldr	r3, [sp, #8]
    2b72:	9c03      	ldr	r4, [sp, #12]
    2b74:	9300      	str	r3, [sp, #0]
    2b76:	9401      	str	r4, [sp, #4]
    2b78:	e7e9      	b.n	2b4e <pow+0xaa>
    2b7a:	9802      	ldr	r0, [sp, #8]
    2b7c:	9903      	ldr	r1, [sp, #12]
    2b7e:	f000 ff7d 	bl	3a7c <finite>
    2b82:	4681      	mov	r9, r0
    2b84:	2800      	cmp	r0, #0
    2b86:	d100      	bne.n	2b8a <pow+0xe6>
    2b88:	e086      	b.n	2c98 <pow+0x1f4>
    2b8a:	9802      	ldr	r0, [sp, #8]
    2b8c:	9903      	ldr	r1, [sp, #12]
    2b8e:	2200      	movs	r2, #0
    2b90:	2300      	movs	r3, #0
    2b92:	f001 f8b1 	bl	3cf8 <__aeabi_dcmpeq>
    2b96:	2800      	cmp	r0, #0
    2b98:	d0ea      	beq.n	2b70 <pow+0xcc>
    2b9a:	0020      	movs	r0, r4
    2b9c:	0029      	movs	r1, r5
    2b9e:	f000 ff6d 	bl	3a7c <finite>
    2ba2:	9a02      	ldr	r2, [sp, #8]
    2ba4:	9b03      	ldr	r3, [sp, #12]
    2ba6:	9200      	str	r2, [sp, #0]
    2ba8:	9301      	str	r3, [sp, #4]
    2baa:	2800      	cmp	r0, #0
    2bac:	d0cf      	beq.n	2b4e <pow+0xaa>
    2bae:	0030      	movs	r0, r6
    2bb0:	0039      	movs	r1, r7
    2bb2:	f000 ff63 	bl	3a7c <finite>
    2bb6:	9a02      	ldr	r2, [sp, #8]
    2bb8:	9b03      	ldr	r3, [sp, #12]
    2bba:	9200      	str	r2, [sp, #0]
    2bbc:	9301      	str	r3, [sp, #4]
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d0c5      	beq.n	2b4e <pow+0xaa>
    2bc2:	ab06      	add	r3, sp, #24
    2bc4:	4698      	mov	r8, r3
    2bc6:	2304      	movs	r3, #4
    2bc8:	4642      	mov	r2, r8
    2bca:	9306      	str	r3, [sp, #24]
    2bcc:	4b8c      	ldr	r3, [pc, #560]	; (2e00 <pow+0x35c>)
    2bce:	6094      	str	r4, [r2, #8]
    2bd0:	60d5      	str	r5, [r2, #12]
    2bd2:	6053      	str	r3, [r2, #4]
    2bd4:	2300      	movs	r3, #0
    2bd6:	2400      	movs	r4, #0
    2bd8:	6213      	str	r3, [r2, #32]
    2bda:	2300      	movs	r3, #0
    2bdc:	6193      	str	r3, [r2, #24]
    2bde:	61d4      	str	r4, [r2, #28]
    2be0:	465b      	mov	r3, fp
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	6116      	str	r6, [r2, #16]
    2be6:	6157      	str	r7, [r2, #20]
    2be8:	b25b      	sxtb	r3, r3
    2bea:	2b02      	cmp	r3, #2
    2bec:	d004      	beq.n	2bf8 <pow+0x154>
    2bee:	4640      	mov	r0, r8
    2bf0:	f000 ff4e 	bl	3a90 <matherr>
    2bf4:	2800      	cmp	r0, #0
    2bf6:	d140      	bne.n	2c7a <pow+0x1d6>
    2bf8:	f003 fc74 	bl	64e4 <__errno>
    2bfc:	2322      	movs	r3, #34	; 0x22
    2bfe:	6003      	str	r3, [r0, #0]
    2c00:	e03b      	b.n	2c7a <pow+0x1d6>
    2c02:	0030      	movs	r0, r6
    2c04:	0039      	movs	r1, r7
    2c06:	f000 ff39 	bl	3a7c <finite>
    2c0a:	9a02      	ldr	r2, [sp, #8]
    2c0c:	9b03      	ldr	r3, [sp, #12]
    2c0e:	9200      	str	r2, [sp, #0]
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	2800      	cmp	r0, #0
    2c14:	d09b      	beq.n	2b4e <pow+0xaa>
    2c16:	2200      	movs	r2, #0
    2c18:	2300      	movs	r3, #0
    2c1a:	0030      	movs	r0, r6
    2c1c:	0039      	movs	r1, r7
    2c1e:	f001 f871 	bl	3d04 <__aeabi_dcmplt>
    2c22:	2800      	cmp	r0, #0
    2c24:	d100      	bne.n	2c28 <pow+0x184>
    2c26:	e792      	b.n	2b4e <pow+0xaa>
    2c28:	ab06      	add	r3, sp, #24
    2c2a:	4698      	mov	r8, r3
    2c2c:	2301      	movs	r3, #1
    2c2e:	4642      	mov	r2, r8
    2c30:	9306      	str	r3, [sp, #24]
    2c32:	4b73      	ldr	r3, [pc, #460]	; (2e00 <pow+0x35c>)
    2c34:	6053      	str	r3, [r2, #4]
    2c36:	4643      	mov	r3, r8
    2c38:	9a05      	ldr	r2, [sp, #20]
    2c3a:	609c      	str	r4, [r3, #8]
    2c3c:	60dd      	str	r5, [r3, #12]
    2c3e:	621a      	str	r2, [r3, #32]
    2c40:	611e      	str	r6, [r3, #16]
    2c42:	615f      	str	r7, [r3, #20]
    2c44:	465b      	mov	r3, fp
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	b25b      	sxtb	r3, r3
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d00b      	beq.n	2c66 <pow+0x1c2>
    2c4e:	2000      	movs	r0, #0
    2c50:	4642      	mov	r2, r8
    2c52:	496d      	ldr	r1, [pc, #436]	; (2e08 <pow+0x364>)
    2c54:	6190      	str	r0, [r2, #24]
    2c56:	61d1      	str	r1, [r2, #28]
    2c58:	2b02      	cmp	r3, #2
    2c5a:	d109      	bne.n	2c70 <pow+0x1cc>
    2c5c:	f003 fc42 	bl	64e4 <__errno>
    2c60:	2321      	movs	r3, #33	; 0x21
    2c62:	6003      	str	r3, [r0, #0]
    2c64:	e009      	b.n	2c7a <pow+0x1d6>
    2c66:	4642      	mov	r2, r8
    2c68:	2300      	movs	r3, #0
    2c6a:	2400      	movs	r4, #0
    2c6c:	6193      	str	r3, [r2, #24]
    2c6e:	61d4      	str	r4, [r2, #28]
    2c70:	4640      	mov	r0, r8
    2c72:	f000 ff0d 	bl	3a90 <matherr>
    2c76:	2800      	cmp	r0, #0
    2c78:	d0f0      	beq.n	2c5c <pow+0x1b8>
    2c7a:	4643      	mov	r3, r8
    2c7c:	6a1b      	ldr	r3, [r3, #32]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d004      	beq.n	2c8c <pow+0x1e8>
    2c82:	f003 fc2f 	bl	64e4 <__errno>
    2c86:	4643      	mov	r3, r8
    2c88:	6a1b      	ldr	r3, [r3, #32]
    2c8a:	6003      	str	r3, [r0, #0]
    2c8c:	4643      	mov	r3, r8
    2c8e:	69dc      	ldr	r4, [r3, #28]
    2c90:	699b      	ldr	r3, [r3, #24]
    2c92:	9300      	str	r3, [sp, #0]
    2c94:	9401      	str	r4, [sp, #4]
    2c96:	e75a      	b.n	2b4e <pow+0xaa>
    2c98:	0020      	movs	r0, r4
    2c9a:	0029      	movs	r1, r5
    2c9c:	f000 feee 	bl	3a7c <finite>
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d100      	bne.n	2ca6 <pow+0x202>
    2ca4:	e771      	b.n	2b8a <pow+0xe6>
    2ca6:	0030      	movs	r0, r6
    2ca8:	0039      	movs	r1, r7
    2caa:	f000 fee7 	bl	3a7c <finite>
    2cae:	2800      	cmp	r0, #0
    2cb0:	d100      	bne.n	2cb4 <pow+0x210>
    2cb2:	e76a      	b.n	2b8a <pow+0xe6>
    2cb4:	9802      	ldr	r0, [sp, #8]
    2cb6:	9903      	ldr	r1, [sp, #12]
    2cb8:	000b      	movs	r3, r1
    2cba:	0002      	movs	r2, r0
    2cbc:	f003 f9b8 	bl	6030 <__aeabi_dcmpun>
    2cc0:	ab06      	add	r3, sp, #24
    2cc2:	4698      	mov	r8, r3
    2cc4:	2800      	cmp	r0, #0
    2cc6:	d17a      	bne.n	2dbe <pow+0x31a>
    2cc8:	2303      	movs	r3, #3
    2cca:	4642      	mov	r2, r8
    2ccc:	9306      	str	r3, [sp, #24]
    2cce:	4b4c      	ldr	r3, [pc, #304]	; (2e00 <pow+0x35c>)
    2cd0:	6210      	str	r0, [r2, #32]
    2cd2:	6053      	str	r3, [r2, #4]
    2cd4:	465b      	mov	r3, fp
    2cd6:	781b      	ldrb	r3, [r3, #0]
    2cd8:	6094      	str	r4, [r2, #8]
    2cda:	60d5      	str	r5, [r2, #12]
    2cdc:	b25b      	sxtb	r3, r3
    2cde:	6116      	str	r6, [r2, #16]
    2ce0:	6157      	str	r7, [r2, #20]
    2ce2:	4699      	mov	r9, r3
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d148      	bne.n	2d7a <pow+0x2d6>
    2ce8:	22e0      	movs	r2, #224	; 0xe0
    2cea:	4641      	mov	r1, r8
    2cec:	4b47      	ldr	r3, [pc, #284]	; (2e0c <pow+0x368>)
    2cee:	0612      	lsls	r2, r2, #24
    2cf0:	618a      	str	r2, [r1, #24]
    2cf2:	61cb      	str	r3, [r1, #28]
    2cf4:	0020      	movs	r0, r4
    2cf6:	2200      	movs	r2, #0
    2cf8:	2300      	movs	r3, #0
    2cfa:	0029      	movs	r1, r5
    2cfc:	f001 f802 	bl	3d04 <__aeabi_dcmplt>
    2d00:	2800      	cmp	r0, #0
    2d02:	d100      	bne.n	2d06 <pow+0x262>
    2d04:	e773      	b.n	2bee <pow+0x14a>
    2d06:	2200      	movs	r2, #0
    2d08:	4b41      	ldr	r3, [pc, #260]	; (2e10 <pow+0x36c>)
    2d0a:	0030      	movs	r0, r6
    2d0c:	0039      	movs	r1, r7
    2d0e:	f002 fbc1 	bl	5494 <__aeabi_dmul>
    2d12:	0004      	movs	r4, r0
    2d14:	000d      	movs	r5, r1
    2d16:	f000 fec3 	bl	3aa0 <rint>
    2d1a:	0002      	movs	r2, r0
    2d1c:	000b      	movs	r3, r1
    2d1e:	0020      	movs	r0, r4
    2d20:	0029      	movs	r1, r5
    2d22:	f000 ffe9 	bl	3cf8 <__aeabi_dcmpeq>
    2d26:	2800      	cmp	r0, #0
    2d28:	d105      	bne.n	2d36 <pow+0x292>
    2d2a:	22e0      	movs	r2, #224	; 0xe0
    2d2c:	4b39      	ldr	r3, [pc, #228]	; (2e14 <pow+0x370>)
    2d2e:	0612      	lsls	r2, r2, #24
    2d30:	4641      	mov	r1, r8
    2d32:	618a      	str	r2, [r1, #24]
    2d34:	61cb      	str	r3, [r1, #28]
    2d36:	465b      	mov	r3, fp
    2d38:	781b      	ldrb	r3, [r3, #0]
    2d3a:	b25b      	sxtb	r3, r3
    2d3c:	4699      	mov	r9, r3
    2d3e:	464b      	mov	r3, r9
    2d40:	2b02      	cmp	r3, #2
    2d42:	d000      	beq.n	2d46 <pow+0x2a2>
    2d44:	e753      	b.n	2bee <pow+0x14a>
    2d46:	e757      	b.n	2bf8 <pow+0x154>
    2d48:	ab06      	add	r3, sp, #24
    2d4a:	4698      	mov	r8, r3
    2d4c:	2301      	movs	r3, #1
    2d4e:	4642      	mov	r2, r8
    2d50:	9306      	str	r3, [sp, #24]
    2d52:	4b2b      	ldr	r3, [pc, #172]	; (2e00 <pow+0x35c>)
    2d54:	6053      	str	r3, [r2, #4]
    2d56:	4643      	mov	r3, r8
    2d58:	609c      	str	r4, [r3, #8]
    2d5a:	60dd      	str	r5, [r3, #12]
    2d5c:	2400      	movs	r4, #0
    2d5e:	9a00      	ldr	r2, [sp, #0]
    2d60:	4d28      	ldr	r5, [pc, #160]	; (2e04 <pow+0x360>)
    2d62:	621a      	str	r2, [r3, #32]
    2d64:	611e      	str	r6, [r3, #16]
    2d66:	615f      	str	r7, [r3, #20]
    2d68:	619c      	str	r4, [r3, #24]
    2d6a:	61dd      	str	r5, [r3, #28]
    2d6c:	464b      	mov	r3, r9
    2d6e:	9400      	str	r4, [sp, #0]
    2d70:	9501      	str	r5, [sp, #4]
    2d72:	2b02      	cmp	r3, #2
    2d74:	d000      	beq.n	2d78 <pow+0x2d4>
    2d76:	e77b      	b.n	2c70 <pow+0x1cc>
    2d78:	e6e9      	b.n	2b4e <pow+0xaa>
    2d7a:	2200      	movs	r2, #0
    2d7c:	4641      	mov	r1, r8
    2d7e:	4b26      	ldr	r3, [pc, #152]	; (2e18 <pow+0x374>)
    2d80:	0020      	movs	r0, r4
    2d82:	618a      	str	r2, [r1, #24]
    2d84:	61cb      	str	r3, [r1, #28]
    2d86:	2200      	movs	r2, #0
    2d88:	2300      	movs	r3, #0
    2d8a:	0029      	movs	r1, r5
    2d8c:	f000 ffba 	bl	3d04 <__aeabi_dcmplt>
    2d90:	2800      	cmp	r0, #0
    2d92:	d0d4      	beq.n	2d3e <pow+0x29a>
    2d94:	2200      	movs	r2, #0
    2d96:	4b1e      	ldr	r3, [pc, #120]	; (2e10 <pow+0x36c>)
    2d98:	0030      	movs	r0, r6
    2d9a:	0039      	movs	r1, r7
    2d9c:	f002 fb7a 	bl	5494 <__aeabi_dmul>
    2da0:	0004      	movs	r4, r0
    2da2:	000d      	movs	r5, r1
    2da4:	f000 fe7c 	bl	3aa0 <rint>
    2da8:	0002      	movs	r2, r0
    2daa:	000b      	movs	r3, r1
    2dac:	0020      	movs	r0, r4
    2dae:	0029      	movs	r1, r5
    2db0:	f000 ffa2 	bl	3cf8 <__aeabi_dcmpeq>
    2db4:	2800      	cmp	r0, #0
    2db6:	d1be      	bne.n	2d36 <pow+0x292>
    2db8:	2200      	movs	r2, #0
    2dba:	4b13      	ldr	r3, [pc, #76]	; (2e08 <pow+0x364>)
    2dbc:	e7b8      	b.n	2d30 <pow+0x28c>
    2dbe:	2301      	movs	r3, #1
    2dc0:	4642      	mov	r2, r8
    2dc2:	9306      	str	r3, [sp, #24]
    2dc4:	4b0e      	ldr	r3, [pc, #56]	; (2e00 <pow+0x35c>)
    2dc6:	6053      	str	r3, [r2, #4]
    2dc8:	4643      	mov	r3, r8
    2dca:	464a      	mov	r2, r9
    2dcc:	609c      	str	r4, [r3, #8]
    2dce:	60dd      	str	r5, [r3, #12]
    2dd0:	621a      	str	r2, [r3, #32]
    2dd2:	611e      	str	r6, [r3, #16]
    2dd4:	615f      	str	r7, [r3, #20]
    2dd6:	2400      	movs	r4, #0
    2dd8:	465b      	mov	r3, fp
    2dda:	571c      	ldrsb	r4, [r3, r4]
    2ddc:	2c00      	cmp	r4, #0
    2dde:	d100      	bne.n	2de2 <pow+0x33e>
    2de0:	e741      	b.n	2c66 <pow+0x1c2>
    2de2:	2300      	movs	r3, #0
    2de4:	2200      	movs	r2, #0
    2de6:	0019      	movs	r1, r3
    2de8:	0010      	movs	r0, r2
    2dea:	f001 ff2f 	bl	4c4c <__aeabi_ddiv>
    2dee:	4643      	mov	r3, r8
    2df0:	6198      	str	r0, [r3, #24]
    2df2:	61d9      	str	r1, [r3, #28]
    2df4:	2c02      	cmp	r4, #2
    2df6:	d100      	bne.n	2dfa <pow+0x356>
    2df8:	e730      	b.n	2c5c <pow+0x1b8>
    2dfa:	e739      	b.n	2c70 <pow+0x1cc>
    2dfc:	20000070 	.word	0x20000070
    2e00:	00006860 	.word	0x00006860
    2e04:	3ff00000 	.word	0x3ff00000
    2e08:	fff00000 	.word	0xfff00000
    2e0c:	47efffff 	.word	0x47efffff
    2e10:	3fe00000 	.word	0x3fe00000
    2e14:	c7efffff 	.word	0xc7efffff
    2e18:	7ff00000 	.word	0x7ff00000

00002e1c <__ieee754_pow>:
    2e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1e:	4656      	mov	r6, sl
    2e20:	464d      	mov	r5, r9
    2e22:	4644      	mov	r4, r8
    2e24:	465f      	mov	r7, fp
    2e26:	b4f0      	push	{r4, r5, r6, r7}
    2e28:	001c      	movs	r4, r3
    2e2a:	0013      	movs	r3, r2
    2e2c:	0067      	lsls	r7, r4, #1
    2e2e:	b091      	sub	sp, #68	; 0x44
    2e30:	087f      	lsrs	r7, r7, #1
    2e32:	9300      	str	r3, [sp, #0]
    2e34:	9401      	str	r4, [sp, #4]
    2e36:	0006      	movs	r6, r0
    2e38:	000d      	movs	r5, r1
    2e3a:	4680      	mov	r8, r0
    2e3c:	4689      	mov	r9, r1
    2e3e:	46a2      	mov	sl, r4
    2e40:	433b      	orrs	r3, r7
    2e42:	d032      	beq.n	2eaa <__ieee754_pow+0x8e>
    2e44:	4b6e      	ldr	r3, [pc, #440]	; (3000 <__ieee754_pow+0x1e4>)
    2e46:	006c      	lsls	r4, r5, #1
    2e48:	0864      	lsrs	r4, r4, #1
    2e4a:	429c      	cmp	r4, r3
    2e4c:	dc29      	bgt.n	2ea2 <__ieee754_pow+0x86>
    2e4e:	d026      	beq.n	2e9e <__ieee754_pow+0x82>
    2e50:	429f      	cmp	r7, r3
    2e52:	dc26      	bgt.n	2ea2 <__ieee754_pow+0x86>
    2e54:	4b6a      	ldr	r3, [pc, #424]	; (3000 <__ieee754_pow+0x1e4>)
    2e56:	429f      	cmp	r7, r3
    2e58:	d100      	bne.n	2e5c <__ieee754_pow+0x40>
    2e5a:	e089      	b.n	2f70 <__ieee754_pow+0x154>
    2e5c:	2300      	movs	r3, #0
    2e5e:	469b      	mov	fp, r3
    2e60:	464b      	mov	r3, r9
    2e62:	2b00      	cmp	r3, #0
    2e64:	da00      	bge.n	2e68 <__ieee754_pow+0x4c>
    2e66:	e087      	b.n	2f78 <__ieee754_pow+0x15c>
    2e68:	2a00      	cmp	r2, #0
    2e6a:	d12f      	bne.n	2ecc <__ieee754_pow+0xb0>
    2e6c:	4b64      	ldr	r3, [pc, #400]	; (3000 <__ieee754_pow+0x1e4>)
    2e6e:	429f      	cmp	r7, r3
    2e70:	d100      	bne.n	2e74 <__ieee754_pow+0x58>
    2e72:	e09f      	b.n	2fb4 <__ieee754_pow+0x198>
    2e74:	4b63      	ldr	r3, [pc, #396]	; (3004 <__ieee754_pow+0x1e8>)
    2e76:	429f      	cmp	r7, r3
    2e78:	d05d      	beq.n	2f36 <__ieee754_pow+0x11a>
    2e7a:	2380      	movs	r3, #128	; 0x80
    2e7c:	05db      	lsls	r3, r3, #23
    2e7e:	459a      	cmp	sl, r3
    2e80:	d101      	bne.n	2e86 <__ieee754_pow+0x6a>
    2e82:	f000 fbc1 	bl	3608 <__ieee754_pow+0x7ec>
    2e86:	4b60      	ldr	r3, [pc, #384]	; (3008 <__ieee754_pow+0x1ec>)
    2e88:	459a      	cmp	sl, r3
    2e8a:	d11f      	bne.n	2ecc <__ieee754_pow+0xb0>
    2e8c:	464b      	mov	r3, r9
    2e8e:	2b00      	cmp	r3, #0
    2e90:	db1c      	blt.n	2ecc <__ieee754_pow+0xb0>
    2e92:	0030      	movs	r0, r6
    2e94:	0029      	movs	r1, r5
    2e96:	f000 fcf7 	bl	3888 <__ieee754_sqrt>
    2e9a:	0006      	movs	r6, r0
    2e9c:	e007      	b.n	2eae <__ieee754_pow+0x92>
    2e9e:	2800      	cmp	r0, #0
    2ea0:	d00d      	beq.n	2ebe <__ieee754_pow+0xa2>
    2ea2:	4b5a      	ldr	r3, [pc, #360]	; (300c <__ieee754_pow+0x1f0>)
    2ea4:	18e0      	adds	r0, r4, r3
    2ea6:	4330      	orrs	r0, r6
    2ea8:	d10b      	bne.n	2ec2 <__ieee754_pow+0xa6>
    2eaa:	2600      	movs	r6, #0
    2eac:	4955      	ldr	r1, [pc, #340]	; (3004 <__ieee754_pow+0x1e8>)
    2eae:	0030      	movs	r0, r6
    2eb0:	b011      	add	sp, #68	; 0x44
    2eb2:	bc3c      	pop	{r2, r3, r4, r5}
    2eb4:	4690      	mov	r8, r2
    2eb6:	4699      	mov	r9, r3
    2eb8:	46a2      	mov	sl, r4
    2eba:	46ab      	mov	fp, r5
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebe:	42a7      	cmp	r7, r4
    2ec0:	ddc8      	ble.n	2e54 <__ieee754_pow+0x38>
    2ec2:	4853      	ldr	r0, [pc, #332]	; (3010 <__ieee754_pow+0x1f4>)
    2ec4:	f000 fde6 	bl	3a94 <nan>
    2ec8:	0006      	movs	r6, r0
    2eca:	e7f0      	b.n	2eae <__ieee754_pow+0x92>
    2ecc:	0030      	movs	r0, r6
    2ece:	0029      	movs	r1, r5
    2ed0:	f000 fdd0 	bl	3a74 <fabs>
    2ed4:	4643      	mov	r3, r8
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d01d      	beq.n	2f16 <__ieee754_pow+0xfa>
    2eda:	0feb      	lsrs	r3, r5, #31
    2edc:	3b01      	subs	r3, #1
    2ede:	4698      	mov	r8, r3
    2ee0:	465b      	mov	r3, fp
    2ee2:	4642      	mov	r2, r8
    2ee4:	4313      	orrs	r3, r2
    2ee6:	d079      	beq.n	2fdc <__ieee754_pow+0x1c0>
    2ee8:	4b4a      	ldr	r3, [pc, #296]	; (3014 <__ieee754_pow+0x1f8>)
    2eea:	429f      	cmp	r7, r3
    2eec:	dc00      	bgt.n	2ef0 <__ieee754_pow+0xd4>
    2eee:	e09f      	b.n	3030 <__ieee754_pow+0x214>
    2ef0:	4b49      	ldr	r3, [pc, #292]	; (3018 <__ieee754_pow+0x1fc>)
    2ef2:	429f      	cmp	r7, r3
    2ef4:	dc01      	bgt.n	2efa <__ieee754_pow+0xde>
    2ef6:	f000 fbce 	bl	3696 <__ieee754_pow+0x87a>
    2efa:	4b48      	ldr	r3, [pc, #288]	; (301c <__ieee754_pow+0x200>)
    2efc:	429c      	cmp	r4, r3
    2efe:	dd79      	ble.n	2ff4 <__ieee754_pow+0x1d8>
    2f00:	4653      	mov	r3, sl
    2f02:	2b00      	cmp	r3, #0
    2f04:	dd79      	ble.n	2ffa <__ieee754_pow+0x1de>
    2f06:	4a46      	ldr	r2, [pc, #280]	; (3020 <__ieee754_pow+0x204>)
    2f08:	4b46      	ldr	r3, [pc, #280]	; (3024 <__ieee754_pow+0x208>)
    2f0a:	0010      	movs	r0, r2
    2f0c:	0019      	movs	r1, r3
    2f0e:	f002 fac1 	bl	5494 <__aeabi_dmul>
    2f12:	0006      	movs	r6, r0
    2f14:	e7cb      	b.n	2eae <__ieee754_pow+0x92>
    2f16:	2c00      	cmp	r4, #0
    2f18:	d004      	beq.n	2f24 <__ieee754_pow+0x108>
    2f1a:	4a3a      	ldr	r2, [pc, #232]	; (3004 <__ieee754_pow+0x1e8>)
    2f1c:	00ab      	lsls	r3, r5, #2
    2f1e:	089b      	lsrs	r3, r3, #2
    2f20:	4293      	cmp	r3, r2
    2f22:	d1da      	bne.n	2eda <__ieee754_pow+0xbe>
    2f24:	4653      	mov	r3, sl
    2f26:	2b00      	cmp	r3, #0
    2f28:	da00      	bge.n	2f2c <__ieee754_pow+0x110>
    2f2a:	e3ad      	b.n	3688 <__ieee754_pow+0x86c>
    2f2c:	464b      	mov	r3, r9
    2f2e:	2b00      	cmp	r3, #0
    2f30:	db0d      	blt.n	2f4e <__ieee754_pow+0x132>
    2f32:	0006      	movs	r6, r0
    2f34:	e7bb      	b.n	2eae <__ieee754_pow+0x92>
    2f36:	4653      	mov	r3, sl
    2f38:	0029      	movs	r1, r5
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	dab7      	bge.n	2eae <__ieee754_pow+0x92>
    2f3e:	0032      	movs	r2, r6
    2f40:	002b      	movs	r3, r5
    2f42:	2000      	movs	r0, #0
    2f44:	492f      	ldr	r1, [pc, #188]	; (3004 <__ieee754_pow+0x1e8>)
    2f46:	f001 fe81 	bl	4c4c <__aeabi_ddiv>
    2f4a:	0006      	movs	r6, r0
    2f4c:	e7af      	b.n	2eae <__ieee754_pow+0x92>
    2f4e:	4b2f      	ldr	r3, [pc, #188]	; (300c <__ieee754_pow+0x1f0>)
    2f50:	469c      	mov	ip, r3
    2f52:	465b      	mov	r3, fp
    2f54:	4464      	add	r4, ip
    2f56:	431c      	orrs	r4, r3
    2f58:	d101      	bne.n	2f5e <__ieee754_pow+0x142>
    2f5a:	f000 fc2b 	bl	37b4 <__ieee754_pow+0x998>
    2f5e:	465b      	mov	r3, fp
    2f60:	0006      	movs	r6, r0
    2f62:	2b01      	cmp	r3, #1
    2f64:	d1a3      	bne.n	2eae <__ieee754_pow+0x92>
    2f66:	2380      	movs	r3, #128	; 0x80
    2f68:	061b      	lsls	r3, r3, #24
    2f6a:	469c      	mov	ip, r3
    2f6c:	4461      	add	r1, ip
    2f6e:	e79e      	b.n	2eae <__ieee754_pow+0x92>
    2f70:	2a00      	cmp	r2, #0
    2f72:	d100      	bne.n	2f76 <__ieee754_pow+0x15a>
    2f74:	e772      	b.n	2e5c <__ieee754_pow+0x40>
    2f76:	e794      	b.n	2ea2 <__ieee754_pow+0x86>
    2f78:	4b2b      	ldr	r3, [pc, #172]	; (3028 <__ieee754_pow+0x20c>)
    2f7a:	429f      	cmp	r7, r3
    2f7c:	dc2b      	bgt.n	2fd6 <__ieee754_pow+0x1ba>
    2f7e:	4b27      	ldr	r3, [pc, #156]	; (301c <__ieee754_pow+0x200>)
    2f80:	429f      	cmp	r7, r3
    2f82:	dc00      	bgt.n	2f86 <__ieee754_pow+0x16a>
    2f84:	e770      	b.n	2e68 <__ieee754_pow+0x4c>
    2f86:	4929      	ldr	r1, [pc, #164]	; (302c <__ieee754_pow+0x210>)
    2f88:	153b      	asrs	r3, r7, #20
    2f8a:	468c      	mov	ip, r1
    2f8c:	4463      	add	r3, ip
    2f8e:	2b14      	cmp	r3, #20
    2f90:	dc01      	bgt.n	2f96 <__ieee754_pow+0x17a>
    2f92:	f000 fbf2 	bl	377a <__ieee754_pow+0x95e>
    2f96:	2134      	movs	r1, #52	; 0x34
    2f98:	1acb      	subs	r3, r1, r3
    2f9a:	9900      	ldr	r1, [sp, #0]
    2f9c:	40d9      	lsrs	r1, r3
    2f9e:	0008      	movs	r0, r1
    2fa0:	4098      	lsls	r0, r3
    2fa2:	4282      	cmp	r2, r0
    2fa4:	d000      	beq.n	2fa8 <__ieee754_pow+0x18c>
    2fa6:	e75f      	b.n	2e68 <__ieee754_pow+0x4c>
    2fa8:	2301      	movs	r3, #1
    2faa:	4019      	ands	r1, r3
    2fac:	3301      	adds	r3, #1
    2fae:	1a5b      	subs	r3, r3, r1
    2fb0:	469b      	mov	fp, r3
    2fb2:	e759      	b.n	2e68 <__ieee754_pow+0x4c>
    2fb4:	4b15      	ldr	r3, [pc, #84]	; (300c <__ieee754_pow+0x1f0>)
    2fb6:	18e0      	adds	r0, r4, r3
    2fb8:	4306      	orrs	r6, r0
    2fba:	d100      	bne.n	2fbe <__ieee754_pow+0x1a2>
    2fbc:	e775      	b.n	2eaa <__ieee754_pow+0x8e>
    2fbe:	4b17      	ldr	r3, [pc, #92]	; (301c <__ieee754_pow+0x200>)
    2fc0:	429c      	cmp	r4, r3
    2fc2:	dc00      	bgt.n	2fc6 <__ieee754_pow+0x1aa>
    2fc4:	e351      	b.n	366a <__ieee754_pow+0x84e>
    2fc6:	4653      	mov	r3, sl
    2fc8:	2b00      	cmp	r3, #0
    2fca:	db16      	blt.n	2ffa <__ieee754_pow+0x1de>
    2fcc:	9b00      	ldr	r3, [sp, #0]
    2fce:	9c01      	ldr	r4, [sp, #4]
    2fd0:	001e      	movs	r6, r3
    2fd2:	0021      	movs	r1, r4
    2fd4:	e76b      	b.n	2eae <__ieee754_pow+0x92>
    2fd6:	2302      	movs	r3, #2
    2fd8:	469b      	mov	fp, r3
    2fda:	e745      	b.n	2e68 <__ieee754_pow+0x4c>
    2fdc:	0032      	movs	r2, r6
    2fde:	002b      	movs	r3, r5
    2fe0:	0030      	movs	r0, r6
    2fe2:	0029      	movs	r1, r5
    2fe4:	f002 fcd0 	bl	5988 <__aeabi_dsub>
    2fe8:	0002      	movs	r2, r0
    2fea:	000b      	movs	r3, r1
    2fec:	f001 fe2e 	bl	4c4c <__aeabi_ddiv>
    2ff0:	0006      	movs	r6, r0
    2ff2:	e75c      	b.n	2eae <__ieee754_pow+0x92>
    2ff4:	4653      	mov	r3, sl
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	db85      	blt.n	2f06 <__ieee754_pow+0xea>
    2ffa:	2600      	movs	r6, #0
    2ffc:	2100      	movs	r1, #0
    2ffe:	e756      	b.n	2eae <__ieee754_pow+0x92>
    3000:	7ff00000 	.word	0x7ff00000
    3004:	3ff00000 	.word	0x3ff00000
    3008:	3fe00000 	.word	0x3fe00000
    300c:	c0100000 	.word	0xc0100000
    3010:	00006864 	.word	0x00006864
    3014:	41e00000 	.word	0x41e00000
    3018:	43f00000 	.word	0x43f00000
    301c:	3fefffff 	.word	0x3fefffff
    3020:	8800759c 	.word	0x8800759c
    3024:	7e37e43c 	.word	0x7e37e43c
    3028:	433fffff 	.word	0x433fffff
    302c:	fffffc01 	.word	0xfffffc01
    3030:	4be8      	ldr	r3, [pc, #928]	; (33d4 <__ieee754_pow+0x5b8>)
    3032:	2200      	movs	r2, #0
    3034:	429c      	cmp	r4, r3
    3036:	dc06      	bgt.n	3046 <__ieee754_pow+0x22a>
    3038:	2200      	movs	r2, #0
    303a:	4be7      	ldr	r3, [pc, #924]	; (33d8 <__ieee754_pow+0x5bc>)
    303c:	f002 fa2a 	bl	5494 <__aeabi_dmul>
    3040:	2235      	movs	r2, #53	; 0x35
    3042:	000c      	movs	r4, r1
    3044:	4252      	negs	r2, r2
    3046:	4de5      	ldr	r5, [pc, #916]	; (33dc <__ieee754_pow+0x5c0>)
    3048:	1523      	asrs	r3, r4, #20
    304a:	46ac      	mov	ip, r5
    304c:	4463      	add	r3, ip
    304e:	4699      	mov	r9, r3
    3050:	0324      	lsls	r4, r4, #12
    3052:	4de3      	ldr	r5, [pc, #908]	; (33e0 <__ieee754_pow+0x5c4>)
    3054:	4be3      	ldr	r3, [pc, #908]	; (33e4 <__ieee754_pow+0x5c8>)
    3056:	0b24      	lsrs	r4, r4, #12
    3058:	4491      	add	r9, r2
    305a:	4325      	orrs	r5, r4
    305c:	429c      	cmp	r4, r3
    305e:	dd09      	ble.n	3074 <__ieee754_pow+0x258>
    3060:	4be1      	ldr	r3, [pc, #900]	; (33e8 <__ieee754_pow+0x5cc>)
    3062:	429c      	cmp	r4, r3
    3064:	dc00      	bgt.n	3068 <__ieee754_pow+0x24c>
    3066:	e3a9      	b.n	37bc <__ieee754_pow+0x9a0>
    3068:	2301      	movs	r3, #1
    306a:	469c      	mov	ip, r3
    306c:	4bdf      	ldr	r3, [pc, #892]	; (33ec <__ieee754_pow+0x5d0>)
    306e:	44e1      	add	r9, ip
    3070:	469c      	mov	ip, r3
    3072:	4465      	add	r5, ip
    3074:	2300      	movs	r3, #0
    3076:	2400      	movs	r4, #0
    3078:	2200      	movs	r2, #0
    307a:	9308      	str	r3, [sp, #32]
    307c:	9409      	str	r4, [sp, #36]	; 0x24
    307e:	930c      	str	r3, [sp, #48]	; 0x30
    3080:	940d      	str	r4, [sp, #52]	; 0x34
    3082:	2400      	movs	r4, #0
    3084:	4bd6      	ldr	r3, [pc, #856]	; (33e0 <__ieee754_pow+0x5c4>)
    3086:	9206      	str	r2, [sp, #24]
    3088:	9307      	str	r3, [sp, #28]
    308a:	9a06      	ldr	r2, [sp, #24]
    308c:	9b07      	ldr	r3, [sp, #28]
    308e:	0029      	movs	r1, r5
    3090:	900a      	str	r0, [sp, #40]	; 0x28
    3092:	910b      	str	r1, [sp, #44]	; 0x2c
    3094:	f002 fc78 	bl	5988 <__aeabi_dsub>
    3098:	9a06      	ldr	r2, [sp, #24]
    309a:	9b07      	ldr	r3, [sp, #28]
    309c:	0006      	movs	r6, r0
    309e:	000f      	movs	r7, r1
    30a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    30a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    30a4:	f001 faa6 	bl	45f4 <__aeabi_dadd>
    30a8:	0002      	movs	r2, r0
    30aa:	000b      	movs	r3, r1
    30ac:	2000      	movs	r0, #0
    30ae:	49cc      	ldr	r1, [pc, #816]	; (33e0 <__ieee754_pow+0x5c4>)
    30b0:	f001 fdcc 	bl	4c4c <__aeabi_ddiv>
    30b4:	000a      	movs	r2, r1
    30b6:	0001      	movs	r1, r0
    30b8:	0013      	movs	r3, r2
    30ba:	910e      	str	r1, [sp, #56]	; 0x38
    30bc:	920f      	str	r2, [sp, #60]	; 0x3c
    30be:	0002      	movs	r2, r0
    30c0:	0039      	movs	r1, r7
    30c2:	0030      	movs	r0, r6
    30c4:	f002 f9e6 	bl	5494 <__aeabi_dmul>
    30c8:	000a      	movs	r2, r1
    30ca:	0001      	movs	r1, r0
    30cc:	2080      	movs	r0, #128	; 0x80
    30ce:	9104      	str	r1, [sp, #16]
    30d0:	9205      	str	r2, [sp, #20]
    30d2:	0013      	movs	r3, r2
    30d4:	2200      	movs	r2, #0
    30d6:	2180      	movs	r1, #128	; 0x80
    30d8:	0300      	lsls	r0, r0, #12
    30da:	4684      	mov	ip, r0
    30dc:	9202      	str	r2, [sp, #8]
    30de:	9303      	str	r3, [sp, #12]
    30e0:	2200      	movs	r2, #0
    30e2:	0589      	lsls	r1, r1, #22
    30e4:	106d      	asrs	r5, r5, #1
    30e6:	430d      	orrs	r5, r1
    30e8:	4465      	add	r5, ip
    30ea:	192b      	adds	r3, r5, r4
    30ec:	9802      	ldr	r0, [sp, #8]
    30ee:	9903      	ldr	r1, [sp, #12]
    30f0:	0014      	movs	r4, r2
    30f2:	001d      	movs	r5, r3
    30f4:	f002 f9ce 	bl	5494 <__aeabi_dmul>
    30f8:	0002      	movs	r2, r0
    30fa:	000b      	movs	r3, r1
    30fc:	0030      	movs	r0, r6
    30fe:	0039      	movs	r1, r7
    3100:	f002 fc42 	bl	5988 <__aeabi_dsub>
    3104:	9a06      	ldr	r2, [sp, #24]
    3106:	9b07      	ldr	r3, [sp, #28]
    3108:	0006      	movs	r6, r0
    310a:	000f      	movs	r7, r1
    310c:	0020      	movs	r0, r4
    310e:	0029      	movs	r1, r5
    3110:	f002 fc3a 	bl	5988 <__aeabi_dsub>
    3114:	0002      	movs	r2, r0
    3116:	000b      	movs	r3, r1
    3118:	980a      	ldr	r0, [sp, #40]	; 0x28
    311a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    311c:	f002 fc34 	bl	5988 <__aeabi_dsub>
    3120:	9a02      	ldr	r2, [sp, #8]
    3122:	9b03      	ldr	r3, [sp, #12]
    3124:	f002 f9b6 	bl	5494 <__aeabi_dmul>
    3128:	0002      	movs	r2, r0
    312a:	000b      	movs	r3, r1
    312c:	0030      	movs	r0, r6
    312e:	0039      	movs	r1, r7
    3130:	f002 fc2a 	bl	5988 <__aeabi_dsub>
    3134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3138:	f002 f9ac 	bl	5494 <__aeabi_dmul>
    313c:	9d04      	ldr	r5, [sp, #16]
    313e:	9e05      	ldr	r6, [sp, #20]
    3140:	9006      	str	r0, [sp, #24]
    3142:	9107      	str	r1, [sp, #28]
    3144:	002a      	movs	r2, r5
    3146:	0033      	movs	r3, r6
    3148:	0028      	movs	r0, r5
    314a:	0031      	movs	r1, r6
    314c:	f002 f9a2 	bl	5494 <__aeabi_dmul>
    3150:	0006      	movs	r6, r0
    3152:	000f      	movs	r7, r1
    3154:	4aa6      	ldr	r2, [pc, #664]	; (33f0 <__ieee754_pow+0x5d4>)
    3156:	4ba7      	ldr	r3, [pc, #668]	; (33f4 <__ieee754_pow+0x5d8>)
    3158:	f002 f99c 	bl	5494 <__aeabi_dmul>
    315c:	4aa6      	ldr	r2, [pc, #664]	; (33f8 <__ieee754_pow+0x5dc>)
    315e:	4ba7      	ldr	r3, [pc, #668]	; (33fc <__ieee754_pow+0x5e0>)
    3160:	f001 fa48 	bl	45f4 <__aeabi_dadd>
    3164:	0032      	movs	r2, r6
    3166:	003b      	movs	r3, r7
    3168:	f002 f994 	bl	5494 <__aeabi_dmul>
    316c:	4aa4      	ldr	r2, [pc, #656]	; (3400 <__ieee754_pow+0x5e4>)
    316e:	4ba5      	ldr	r3, [pc, #660]	; (3404 <__ieee754_pow+0x5e8>)
    3170:	f001 fa40 	bl	45f4 <__aeabi_dadd>
    3174:	0032      	movs	r2, r6
    3176:	003b      	movs	r3, r7
    3178:	f002 f98c 	bl	5494 <__aeabi_dmul>
    317c:	4aa2      	ldr	r2, [pc, #648]	; (3408 <__ieee754_pow+0x5ec>)
    317e:	4ba3      	ldr	r3, [pc, #652]	; (340c <__ieee754_pow+0x5f0>)
    3180:	f001 fa38 	bl	45f4 <__aeabi_dadd>
    3184:	0032      	movs	r2, r6
    3186:	003b      	movs	r3, r7
    3188:	f002 f984 	bl	5494 <__aeabi_dmul>
    318c:	4aa0      	ldr	r2, [pc, #640]	; (3410 <__ieee754_pow+0x5f4>)
    318e:	4ba1      	ldr	r3, [pc, #644]	; (3414 <__ieee754_pow+0x5f8>)
    3190:	f001 fa30 	bl	45f4 <__aeabi_dadd>
    3194:	0032      	movs	r2, r6
    3196:	003b      	movs	r3, r7
    3198:	f002 f97c 	bl	5494 <__aeabi_dmul>
    319c:	4a9e      	ldr	r2, [pc, #632]	; (3418 <__ieee754_pow+0x5fc>)
    319e:	4b9f      	ldr	r3, [pc, #636]	; (341c <__ieee754_pow+0x600>)
    31a0:	f001 fa28 	bl	45f4 <__aeabi_dadd>
    31a4:	0032      	movs	r2, r6
    31a6:	0004      	movs	r4, r0
    31a8:	000d      	movs	r5, r1
    31aa:	003b      	movs	r3, r7
    31ac:	0030      	movs	r0, r6
    31ae:	0039      	movs	r1, r7
    31b0:	f002 f970 	bl	5494 <__aeabi_dmul>
    31b4:	0002      	movs	r2, r0
    31b6:	000b      	movs	r3, r1
    31b8:	0020      	movs	r0, r4
    31ba:	0029      	movs	r1, r5
    31bc:	f002 f96a 	bl	5494 <__aeabi_dmul>
    31c0:	9e02      	ldr	r6, [sp, #8]
    31c2:	9f03      	ldr	r7, [sp, #12]
    31c4:	0004      	movs	r4, r0
    31c6:	000d      	movs	r5, r1
    31c8:	9804      	ldr	r0, [sp, #16]
    31ca:	9905      	ldr	r1, [sp, #20]
    31cc:	0032      	movs	r2, r6
    31ce:	003b      	movs	r3, r7
    31d0:	f001 fa10 	bl	45f4 <__aeabi_dadd>
    31d4:	9a06      	ldr	r2, [sp, #24]
    31d6:	9b07      	ldr	r3, [sp, #28]
    31d8:	f002 f95c 	bl	5494 <__aeabi_dmul>
    31dc:	0022      	movs	r2, r4
    31de:	002b      	movs	r3, r5
    31e0:	f001 fa08 	bl	45f4 <__aeabi_dadd>
    31e4:	0032      	movs	r2, r6
    31e6:	900a      	str	r0, [sp, #40]	; 0x28
    31e8:	910b      	str	r1, [sp, #44]	; 0x2c
    31ea:	003b      	movs	r3, r7
    31ec:	0030      	movs	r0, r6
    31ee:	0039      	movs	r1, r7
    31f0:	9602      	str	r6, [sp, #8]
    31f2:	9703      	str	r7, [sp, #12]
    31f4:	f002 f94e 	bl	5494 <__aeabi_dmul>
    31f8:	2200      	movs	r2, #0
    31fa:	4b89      	ldr	r3, [pc, #548]	; (3420 <__ieee754_pow+0x604>)
    31fc:	0004      	movs	r4, r0
    31fe:	000d      	movs	r5, r1
    3200:	f001 f9f8 	bl	45f4 <__aeabi_dadd>
    3204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3208:	f001 f9f4 	bl	45f4 <__aeabi_dadd>
    320c:	2600      	movs	r6, #0
    320e:	000f      	movs	r7, r1
    3210:	0032      	movs	r2, r6
    3212:	000b      	movs	r3, r1
    3214:	9802      	ldr	r0, [sp, #8]
    3216:	9903      	ldr	r1, [sp, #12]
    3218:	f002 f93c 	bl	5494 <__aeabi_dmul>
    321c:	2200      	movs	r2, #0
    321e:	9002      	str	r0, [sp, #8]
    3220:	9103      	str	r1, [sp, #12]
    3222:	4b7f      	ldr	r3, [pc, #508]	; (3420 <__ieee754_pow+0x604>)
    3224:	0030      	movs	r0, r6
    3226:	0039      	movs	r1, r7
    3228:	f002 fbae 	bl	5988 <__aeabi_dsub>
    322c:	0022      	movs	r2, r4
    322e:	002b      	movs	r3, r5
    3230:	f002 fbaa 	bl	5988 <__aeabi_dsub>
    3234:	0002      	movs	r2, r0
    3236:	000b      	movs	r3, r1
    3238:	980a      	ldr	r0, [sp, #40]	; 0x28
    323a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    323c:	f002 fba4 	bl	5988 <__aeabi_dsub>
    3240:	9a04      	ldr	r2, [sp, #16]
    3242:	9b05      	ldr	r3, [sp, #20]
    3244:	f002 f926 	bl	5494 <__aeabi_dmul>
    3248:	0032      	movs	r2, r6
    324a:	0004      	movs	r4, r0
    324c:	000d      	movs	r5, r1
    324e:	9806      	ldr	r0, [sp, #24]
    3250:	9907      	ldr	r1, [sp, #28]
    3252:	003b      	movs	r3, r7
    3254:	f002 f91e 	bl	5494 <__aeabi_dmul>
    3258:	0002      	movs	r2, r0
    325a:	000b      	movs	r3, r1
    325c:	0020      	movs	r0, r4
    325e:	0029      	movs	r1, r5
    3260:	f001 f9c8 	bl	45f4 <__aeabi_dadd>
    3264:	0004      	movs	r4, r0
    3266:	000d      	movs	r5, r1
    3268:	0002      	movs	r2, r0
    326a:	000b      	movs	r3, r1
    326c:	9802      	ldr	r0, [sp, #8]
    326e:	9903      	ldr	r1, [sp, #12]
    3270:	f001 f9c0 	bl	45f4 <__aeabi_dadd>
    3274:	2600      	movs	r6, #0
    3276:	22e0      	movs	r2, #224	; 0xe0
    3278:	4b6a      	ldr	r3, [pc, #424]	; (3424 <__ieee754_pow+0x608>)
    327a:	0612      	lsls	r2, r2, #24
    327c:	0030      	movs	r0, r6
    327e:	000f      	movs	r7, r1
    3280:	f002 f908 	bl	5494 <__aeabi_dmul>
    3284:	9a02      	ldr	r2, [sp, #8]
    3286:	9b03      	ldr	r3, [sp, #12]
    3288:	9004      	str	r0, [sp, #16]
    328a:	9105      	str	r1, [sp, #20]
    328c:	0030      	movs	r0, r6
    328e:	0039      	movs	r1, r7
    3290:	f002 fb7a 	bl	5988 <__aeabi_dsub>
    3294:	0002      	movs	r2, r0
    3296:	000b      	movs	r3, r1
    3298:	0020      	movs	r0, r4
    329a:	0029      	movs	r1, r5
    329c:	f002 fb74 	bl	5988 <__aeabi_dsub>
    32a0:	4a61      	ldr	r2, [pc, #388]	; (3428 <__ieee754_pow+0x60c>)
    32a2:	4b60      	ldr	r3, [pc, #384]	; (3424 <__ieee754_pow+0x608>)
    32a4:	f002 f8f6 	bl	5494 <__aeabi_dmul>
    32a8:	4a60      	ldr	r2, [pc, #384]	; (342c <__ieee754_pow+0x610>)
    32aa:	0004      	movs	r4, r0
    32ac:	000d      	movs	r5, r1
    32ae:	4b60      	ldr	r3, [pc, #384]	; (3430 <__ieee754_pow+0x614>)
    32b0:	0030      	movs	r0, r6
    32b2:	0039      	movs	r1, r7
    32b4:	f002 f8ee 	bl	5494 <__aeabi_dmul>
    32b8:	0002      	movs	r2, r0
    32ba:	000b      	movs	r3, r1
    32bc:	0020      	movs	r0, r4
    32be:	0029      	movs	r1, r5
    32c0:	f001 f998 	bl	45f4 <__aeabi_dadd>
    32c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    32c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    32c8:	f001 f994 	bl	45f4 <__aeabi_dadd>
    32cc:	0006      	movs	r6, r0
    32ce:	4648      	mov	r0, r9
    32d0:	000f      	movs	r7, r1
    32d2:	f002 ff03 	bl	60dc <__aeabi_i2d>
    32d6:	0004      	movs	r4, r0
    32d8:	000d      	movs	r5, r1
    32da:	9804      	ldr	r0, [sp, #16]
    32dc:	9905      	ldr	r1, [sp, #20]
    32de:	0032      	movs	r2, r6
    32e0:	003b      	movs	r3, r7
    32e2:	f001 f987 	bl	45f4 <__aeabi_dadd>
    32e6:	9a08      	ldr	r2, [sp, #32]
    32e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32ea:	f001 f983 	bl	45f4 <__aeabi_dadd>
    32ee:	0022      	movs	r2, r4
    32f0:	002b      	movs	r3, r5
    32f2:	f001 f97f 	bl	45f4 <__aeabi_dadd>
    32f6:	2000      	movs	r0, #0
    32f8:	0022      	movs	r2, r4
    32fa:	002b      	movs	r3, r5
    32fc:	9002      	str	r0, [sp, #8]
    32fe:	9103      	str	r1, [sp, #12]
    3300:	f002 fb42 	bl	5988 <__aeabi_dsub>
    3304:	9a08      	ldr	r2, [sp, #32]
    3306:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3308:	f002 fb3e 	bl	5988 <__aeabi_dsub>
    330c:	9a04      	ldr	r2, [sp, #16]
    330e:	9b05      	ldr	r3, [sp, #20]
    3310:	f002 fb3a 	bl	5988 <__aeabi_dsub>
    3314:	0002      	movs	r2, r0
    3316:	000b      	movs	r3, r1
    3318:	0030      	movs	r0, r6
    331a:	0039      	movs	r1, r7
    331c:	f002 fb34 	bl	5988 <__aeabi_dsub>
    3320:	9004      	str	r0, [sp, #16]
    3322:	9105      	str	r1, [sp, #20]
    3324:	465b      	mov	r3, fp
    3326:	4642      	mov	r2, r8
    3328:	3b01      	subs	r3, #1
    332a:	4313      	orrs	r3, r2
    332c:	d100      	bne.n	3330 <__ieee754_pow+0x514>
    332e:	e197      	b.n	3660 <__ieee754_pow+0x844>
    3330:	2300      	movs	r3, #0
    3332:	4c2b      	ldr	r4, [pc, #172]	; (33e0 <__ieee754_pow+0x5c4>)
    3334:	9306      	str	r3, [sp, #24]
    3336:	9407      	str	r4, [sp, #28]
    3338:	9800      	ldr	r0, [sp, #0]
    333a:	9901      	ldr	r1, [sp, #4]
    333c:	2600      	movs	r6, #0
    333e:	000b      	movs	r3, r1
    3340:	0032      	movs	r2, r6
    3342:	000f      	movs	r7, r1
    3344:	f002 fb20 	bl	5988 <__aeabi_dsub>
    3348:	9a02      	ldr	r2, [sp, #8]
    334a:	9b03      	ldr	r3, [sp, #12]
    334c:	f002 f8a2 	bl	5494 <__aeabi_dmul>
    3350:	9a00      	ldr	r2, [sp, #0]
    3352:	9b01      	ldr	r3, [sp, #4]
    3354:	0004      	movs	r4, r0
    3356:	000d      	movs	r5, r1
    3358:	9804      	ldr	r0, [sp, #16]
    335a:	9905      	ldr	r1, [sp, #20]
    335c:	f002 f89a 	bl	5494 <__aeabi_dmul>
    3360:	0002      	movs	r2, r0
    3362:	000b      	movs	r3, r1
    3364:	0020      	movs	r0, r4
    3366:	0029      	movs	r1, r5
    3368:	f001 f944 	bl	45f4 <__aeabi_dadd>
    336c:	0004      	movs	r4, r0
    336e:	000d      	movs	r5, r1
    3370:	9802      	ldr	r0, [sp, #8]
    3372:	9903      	ldr	r1, [sp, #12]
    3374:	003b      	movs	r3, r7
    3376:	0032      	movs	r2, r6
    3378:	9404      	str	r4, [sp, #16]
    337a:	9505      	str	r5, [sp, #20]
    337c:	f002 f88a 	bl	5494 <__aeabi_dmul>
    3380:	9000      	str	r0, [sp, #0]
    3382:	9101      	str	r1, [sp, #4]
    3384:	000b      	movs	r3, r1
    3386:	0002      	movs	r2, r0
    3388:	0029      	movs	r1, r5
    338a:	0020      	movs	r0, r4
    338c:	f001 f932 	bl	45f4 <__aeabi_dadd>
    3390:	4b28      	ldr	r3, [pc, #160]	; (3434 <__ieee754_pow+0x618>)
    3392:	4681      	mov	r9, r0
    3394:	1e0f      	subs	r7, r1, #0
    3396:	468a      	mov	sl, r1
    3398:	429f      	cmp	r7, r3
    339a:	dc00      	bgt.n	339e <__ieee754_pow+0x582>
    339c:	e13c      	b.n	3618 <__ieee754_pow+0x7fc>
    339e:	4b26      	ldr	r3, [pc, #152]	; (3438 <__ieee754_pow+0x61c>)
    33a0:	18cb      	adds	r3, r1, r3
    33a2:	4303      	orrs	r3, r0
    33a4:	d000      	beq.n	33a8 <__ieee754_pow+0x58c>
    33a6:	e1db      	b.n	3760 <__ieee754_pow+0x944>
    33a8:	9804      	ldr	r0, [sp, #16]
    33aa:	9905      	ldr	r1, [sp, #20]
    33ac:	4a23      	ldr	r2, [pc, #140]	; (343c <__ieee754_pow+0x620>)
    33ae:	4b24      	ldr	r3, [pc, #144]	; (3440 <__ieee754_pow+0x624>)
    33b0:	f001 f920 	bl	45f4 <__aeabi_dadd>
    33b4:	9a00      	ldr	r2, [sp, #0]
    33b6:	9b01      	ldr	r3, [sp, #4]
    33b8:	0004      	movs	r4, r0
    33ba:	000d      	movs	r5, r1
    33bc:	4648      	mov	r0, r9
    33be:	0039      	movs	r1, r7
    33c0:	f002 fae2 	bl	5988 <__aeabi_dsub>
    33c4:	0002      	movs	r2, r0
    33c6:	000b      	movs	r3, r1
    33c8:	0020      	movs	r0, r4
    33ca:	0029      	movs	r1, r5
    33cc:	f000 fcae 	bl	3d2c <__aeabi_dcmpgt>
    33d0:	003e      	movs	r6, r7
    33d2:	e037      	b.n	3444 <__ieee754_pow+0x628>
    33d4:	000fffff 	.word	0x000fffff
    33d8:	43400000 	.word	0x43400000
    33dc:	fffffc01 	.word	0xfffffc01
    33e0:	3ff00000 	.word	0x3ff00000
    33e4:	0003988e 	.word	0x0003988e
    33e8:	000bb679 	.word	0x000bb679
    33ec:	fff00000 	.word	0xfff00000
    33f0:	4a454eef 	.word	0x4a454eef
    33f4:	3fca7e28 	.word	0x3fca7e28
    33f8:	93c9db65 	.word	0x93c9db65
    33fc:	3fcd864a 	.word	0x3fcd864a
    3400:	a91d4101 	.word	0xa91d4101
    3404:	3fd17460 	.word	0x3fd17460
    3408:	518f264d 	.word	0x518f264d
    340c:	3fd55555 	.word	0x3fd55555
    3410:	db6fabff 	.word	0xdb6fabff
    3414:	3fdb6db6 	.word	0x3fdb6db6
    3418:	33333303 	.word	0x33333303
    341c:	3fe33333 	.word	0x3fe33333
    3420:	40080000 	.word	0x40080000
    3424:	3feec709 	.word	0x3feec709
    3428:	dc3a03fd 	.word	0xdc3a03fd
    342c:	145b01f5 	.word	0x145b01f5
    3430:	be3e2fe0 	.word	0xbe3e2fe0
    3434:	408fffff 	.word	0x408fffff
    3438:	bf700000 	.word	0xbf700000
    343c:	652b82fe 	.word	0x652b82fe
    3440:	3c971547 	.word	0x3c971547
    3444:	2800      	cmp	r0, #0
    3446:	d000      	beq.n	344a <__ieee754_pow+0x62e>
    3448:	e18a      	b.n	3760 <__ieee754_pow+0x944>
    344a:	2280      	movs	r2, #128	; 0x80
    344c:	4be7      	ldr	r3, [pc, #924]	; (37ec <__ieee754_pow+0x9d0>)
    344e:	0352      	lsls	r2, r2, #13
    3450:	469c      	mov	ip, r3
    3452:	0013      	movs	r3, r2
    3454:	1536      	asrs	r6, r6, #20
    3456:	4466      	add	r6, ip
    3458:	4133      	asrs	r3, r6
    345a:	49e5      	ldr	r1, [pc, #916]	; (37f0 <__ieee754_pow+0x9d4>)
    345c:	19db      	adds	r3, r3, r7
    345e:	005e      	lsls	r6, r3, #1
    3460:	001c      	movs	r4, r3
    3462:	031b      	lsls	r3, r3, #12
    3464:	468c      	mov	ip, r1
    3466:	0b1b      	lsrs	r3, r3, #12
    3468:	4313      	orrs	r3, r2
    346a:	2214      	movs	r2, #20
    346c:	0d76      	lsrs	r6, r6, #21
    346e:	4fe1      	ldr	r7, [pc, #900]	; (37f4 <__ieee754_pow+0x9d8>)
    3470:	4466      	add	r6, ip
    3472:	4137      	asrs	r7, r6
    3474:	1b96      	subs	r6, r2, r6
    3476:	4133      	asrs	r3, r6
    3478:	4698      	mov	r8, r3
    347a:	4653      	mov	r3, sl
    347c:	43bc      	bics	r4, r7
    347e:	2000      	movs	r0, #0
    3480:	0021      	movs	r1, r4
    3482:	2b00      	cmp	r3, #0
    3484:	da00      	bge.n	3488 <__ieee754_pow+0x66c>
    3486:	e1a9      	b.n	37dc <__ieee754_pow+0x9c0>
    3488:	0002      	movs	r2, r0
    348a:	000b      	movs	r3, r1
    348c:	9800      	ldr	r0, [sp, #0]
    348e:	9901      	ldr	r1, [sp, #4]
    3490:	f002 fa7a 	bl	5988 <__aeabi_dsub>
    3494:	000b      	movs	r3, r1
    3496:	9000      	str	r0, [sp, #0]
    3498:	9101      	str	r1, [sp, #4]
    349a:	0002      	movs	r2, r0
    349c:	9804      	ldr	r0, [sp, #16]
    349e:	9905      	ldr	r1, [sp, #20]
    34a0:	f001 f8a8 	bl	45f4 <__aeabi_dadd>
    34a4:	4643      	mov	r3, r8
    34a6:	051b      	lsls	r3, r3, #20
    34a8:	4699      	mov	r9, r3
    34aa:	2000      	movs	r0, #0
    34ac:	2200      	movs	r2, #0
    34ae:	4bd2      	ldr	r3, [pc, #840]	; (37f8 <__ieee754_pow+0x9dc>)
    34b0:	0006      	movs	r6, r0
    34b2:	000f      	movs	r7, r1
    34b4:	f001 ffee 	bl	5494 <__aeabi_dmul>
    34b8:	9a00      	ldr	r2, [sp, #0]
    34ba:	9b01      	ldr	r3, [sp, #4]
    34bc:	9002      	str	r0, [sp, #8]
    34be:	9103      	str	r1, [sp, #12]
    34c0:	0030      	movs	r0, r6
    34c2:	0039      	movs	r1, r7
    34c4:	f002 fa60 	bl	5988 <__aeabi_dsub>
    34c8:	0002      	movs	r2, r0
    34ca:	000b      	movs	r3, r1
    34cc:	9804      	ldr	r0, [sp, #16]
    34ce:	9905      	ldr	r1, [sp, #20]
    34d0:	f002 fa5a 	bl	5988 <__aeabi_dsub>
    34d4:	4ac9      	ldr	r2, [pc, #804]	; (37fc <__ieee754_pow+0x9e0>)
    34d6:	4bca      	ldr	r3, [pc, #808]	; (3800 <__ieee754_pow+0x9e4>)
    34d8:	f001 ffdc 	bl	5494 <__aeabi_dmul>
    34dc:	4ac9      	ldr	r2, [pc, #804]	; (3804 <__ieee754_pow+0x9e8>)
    34de:	0004      	movs	r4, r0
    34e0:	000d      	movs	r5, r1
    34e2:	4bc9      	ldr	r3, [pc, #804]	; (3808 <__ieee754_pow+0x9ec>)
    34e4:	0030      	movs	r0, r6
    34e6:	0039      	movs	r1, r7
    34e8:	f001 ffd4 	bl	5494 <__aeabi_dmul>
    34ec:	0002      	movs	r2, r0
    34ee:	000b      	movs	r3, r1
    34f0:	0020      	movs	r0, r4
    34f2:	0029      	movs	r1, r5
    34f4:	f001 f87e 	bl	45f4 <__aeabi_dadd>
    34f8:	0004      	movs	r4, r0
    34fa:	000d      	movs	r5, r1
    34fc:	0002      	movs	r2, r0
    34fe:	000b      	movs	r3, r1
    3500:	9802      	ldr	r0, [sp, #8]
    3502:	9903      	ldr	r1, [sp, #12]
    3504:	f001 f876 	bl	45f4 <__aeabi_dadd>
    3508:	9a02      	ldr	r2, [sp, #8]
    350a:	9b03      	ldr	r3, [sp, #12]
    350c:	0006      	movs	r6, r0
    350e:	000f      	movs	r7, r1
    3510:	f002 fa3a 	bl	5988 <__aeabi_dsub>
    3514:	0002      	movs	r2, r0
    3516:	000b      	movs	r3, r1
    3518:	0020      	movs	r0, r4
    351a:	0029      	movs	r1, r5
    351c:	f002 fa34 	bl	5988 <__aeabi_dsub>
    3520:	0032      	movs	r2, r6
    3522:	9000      	str	r0, [sp, #0]
    3524:	9101      	str	r1, [sp, #4]
    3526:	003b      	movs	r3, r7
    3528:	0030      	movs	r0, r6
    352a:	0039      	movs	r1, r7
    352c:	f001 ffb2 	bl	5494 <__aeabi_dmul>
    3530:	0004      	movs	r4, r0
    3532:	000d      	movs	r5, r1
    3534:	4ab5      	ldr	r2, [pc, #724]	; (380c <__ieee754_pow+0x9f0>)
    3536:	4bb6      	ldr	r3, [pc, #728]	; (3810 <__ieee754_pow+0x9f4>)
    3538:	f001 ffac 	bl	5494 <__aeabi_dmul>
    353c:	4ab5      	ldr	r2, [pc, #724]	; (3814 <__ieee754_pow+0x9f8>)
    353e:	4bb6      	ldr	r3, [pc, #728]	; (3818 <__ieee754_pow+0x9fc>)
    3540:	f002 fa22 	bl	5988 <__aeabi_dsub>
    3544:	0022      	movs	r2, r4
    3546:	002b      	movs	r3, r5
    3548:	f001 ffa4 	bl	5494 <__aeabi_dmul>
    354c:	4ab3      	ldr	r2, [pc, #716]	; (381c <__ieee754_pow+0xa00>)
    354e:	4bb4      	ldr	r3, [pc, #720]	; (3820 <__ieee754_pow+0xa04>)
    3550:	f001 f850 	bl	45f4 <__aeabi_dadd>
    3554:	0022      	movs	r2, r4
    3556:	002b      	movs	r3, r5
    3558:	f001 ff9c 	bl	5494 <__aeabi_dmul>
    355c:	4ab1      	ldr	r2, [pc, #708]	; (3824 <__ieee754_pow+0xa08>)
    355e:	4bb2      	ldr	r3, [pc, #712]	; (3828 <__ieee754_pow+0xa0c>)
    3560:	f002 fa12 	bl	5988 <__aeabi_dsub>
    3564:	0022      	movs	r2, r4
    3566:	002b      	movs	r3, r5
    3568:	f001 ff94 	bl	5494 <__aeabi_dmul>
    356c:	4aaf      	ldr	r2, [pc, #700]	; (382c <__ieee754_pow+0xa10>)
    356e:	4bb0      	ldr	r3, [pc, #704]	; (3830 <__ieee754_pow+0xa14>)
    3570:	f001 f840 	bl	45f4 <__aeabi_dadd>
    3574:	0022      	movs	r2, r4
    3576:	002b      	movs	r3, r5
    3578:	f001 ff8c 	bl	5494 <__aeabi_dmul>
    357c:	0002      	movs	r2, r0
    357e:	000b      	movs	r3, r1
    3580:	0030      	movs	r0, r6
    3582:	0039      	movs	r1, r7
    3584:	f002 fa00 	bl	5988 <__aeabi_dsub>
    3588:	0004      	movs	r4, r0
    358a:	000d      	movs	r5, r1
    358c:	0002      	movs	r2, r0
    358e:	000b      	movs	r3, r1
    3590:	0030      	movs	r0, r6
    3592:	0039      	movs	r1, r7
    3594:	f001 ff7e 	bl	5494 <__aeabi_dmul>
    3598:	2380      	movs	r3, #128	; 0x80
    359a:	9002      	str	r0, [sp, #8]
    359c:	9103      	str	r1, [sp, #12]
    359e:	2200      	movs	r2, #0
    35a0:	05db      	lsls	r3, r3, #23
    35a2:	0020      	movs	r0, r4
    35a4:	0029      	movs	r1, r5
    35a6:	f002 f9ef 	bl	5988 <__aeabi_dsub>
    35aa:	0002      	movs	r2, r0
    35ac:	000b      	movs	r3, r1
    35ae:	9802      	ldr	r0, [sp, #8]
    35b0:	9903      	ldr	r1, [sp, #12]
    35b2:	f001 fb4b 	bl	4c4c <__aeabi_ddiv>
    35b6:	9a00      	ldr	r2, [sp, #0]
    35b8:	9b01      	ldr	r3, [sp, #4]
    35ba:	0004      	movs	r4, r0
    35bc:	000d      	movs	r5, r1
    35be:	0030      	movs	r0, r6
    35c0:	0039      	movs	r1, r7
    35c2:	f001 ff67 	bl	5494 <__aeabi_dmul>
    35c6:	9a00      	ldr	r2, [sp, #0]
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	f001 f813 	bl	45f4 <__aeabi_dadd>
    35ce:	0002      	movs	r2, r0
    35d0:	000b      	movs	r3, r1
    35d2:	0020      	movs	r0, r4
    35d4:	0029      	movs	r1, r5
    35d6:	f002 f9d7 	bl	5988 <__aeabi_dsub>
    35da:	0032      	movs	r2, r6
    35dc:	003b      	movs	r3, r7
    35de:	f002 f9d3 	bl	5988 <__aeabi_dsub>
    35e2:	0002      	movs	r2, r0
    35e4:	000b      	movs	r3, r1
    35e6:	2000      	movs	r0, #0
    35e8:	4992      	ldr	r1, [pc, #584]	; (3834 <__ieee754_pow+0xa18>)
    35ea:	f002 f9cd 	bl	5988 <__aeabi_dsub>
    35ee:	464b      	mov	r3, r9
    35f0:	185b      	adds	r3, r3, r1
    35f2:	151a      	asrs	r2, r3, #20
    35f4:	2a00      	cmp	r2, #0
    35f6:	dc00      	bgt.n	35fa <__ieee754_pow+0x7de>
    35f8:	e0f4      	b.n	37e4 <__ieee754_pow+0x9c8>
    35fa:	0019      	movs	r1, r3
    35fc:	9a06      	ldr	r2, [sp, #24]
    35fe:	9b07      	ldr	r3, [sp, #28]
    3600:	f001 ff48 	bl	5494 <__aeabi_dmul>
    3604:	0006      	movs	r6, r0
    3606:	e452      	b.n	2eae <__ieee754_pow+0x92>
    3608:	0032      	movs	r2, r6
    360a:	0030      	movs	r0, r6
    360c:	002b      	movs	r3, r5
    360e:	0029      	movs	r1, r5
    3610:	f001 ff40 	bl	5494 <__aeabi_dmul>
    3614:	0006      	movs	r6, r0
    3616:	e44a      	b.n	2eae <__ieee754_pow+0x92>
    3618:	4b87      	ldr	r3, [pc, #540]	; (3838 <__ieee754_pow+0xa1c>)
    361a:	004e      	lsls	r6, r1, #1
    361c:	0876      	lsrs	r6, r6, #1
    361e:	429e      	cmp	r6, r3
    3620:	dc00      	bgt.n	3624 <__ieee754_pow+0x808>
    3622:	e0bf      	b.n	37a4 <__ieee754_pow+0x988>
    3624:	4b85      	ldr	r3, [pc, #532]	; (383c <__ieee754_pow+0xa20>)
    3626:	18cb      	adds	r3, r1, r3
    3628:	4303      	orrs	r3, r0
    362a:	d10c      	bne.n	3646 <__ieee754_pow+0x82a>
    362c:	9a00      	ldr	r2, [sp, #0]
    362e:	9b01      	ldr	r3, [sp, #4]
    3630:	f002 f9aa 	bl	5988 <__aeabi_dsub>
    3634:	0002      	movs	r2, r0
    3636:	000b      	movs	r3, r1
    3638:	9804      	ldr	r0, [sp, #16]
    363a:	9905      	ldr	r1, [sp, #20]
    363c:	f000 fb6c 	bl	3d18 <__aeabi_dcmple>
    3640:	2800      	cmp	r0, #0
    3642:	d100      	bne.n	3646 <__ieee754_pow+0x82a>
    3644:	e701      	b.n	344a <__ieee754_pow+0x62e>
    3646:	9806      	ldr	r0, [sp, #24]
    3648:	9907      	ldr	r1, [sp, #28]
    364a:	4a7d      	ldr	r2, [pc, #500]	; (3840 <__ieee754_pow+0xa24>)
    364c:	4b7d      	ldr	r3, [pc, #500]	; (3844 <__ieee754_pow+0xa28>)
    364e:	f001 ff21 	bl	5494 <__aeabi_dmul>
    3652:	4a7b      	ldr	r2, [pc, #492]	; (3840 <__ieee754_pow+0xa24>)
    3654:	4b7b      	ldr	r3, [pc, #492]	; (3844 <__ieee754_pow+0xa28>)
    3656:	f001 ff1d 	bl	5494 <__aeabi_dmul>
    365a:	0006      	movs	r6, r0
    365c:	f7ff fc27 	bl	2eae <__ieee754_pow+0x92>
    3660:	2300      	movs	r3, #0
    3662:	4c79      	ldr	r4, [pc, #484]	; (3848 <__ieee754_pow+0xa2c>)
    3664:	9306      	str	r3, [sp, #24]
    3666:	9407      	str	r4, [sp, #28]
    3668:	e666      	b.n	3338 <__ieee754_pow+0x51c>
    366a:	4653      	mov	r3, sl
    366c:	2b00      	cmp	r3, #0
    366e:	db00      	blt.n	3672 <__ieee754_pow+0x856>
    3670:	e4c3      	b.n	2ffa <__ieee754_pow+0x1de>
    3672:	9b00      	ldr	r3, [sp, #0]
    3674:	9c01      	ldr	r4, [sp, #4]
    3676:	2280      	movs	r2, #128	; 0x80
    3678:	0612      	lsls	r2, r2, #24
    367a:	001e      	movs	r6, r3
    367c:	4694      	mov	ip, r2
    367e:	0023      	movs	r3, r4
    3680:	4463      	add	r3, ip
    3682:	0019      	movs	r1, r3
    3684:	f7ff fc13 	bl	2eae <__ieee754_pow+0x92>
    3688:	0002      	movs	r2, r0
    368a:	000b      	movs	r3, r1
    368c:	2000      	movs	r0, #0
    368e:	4969      	ldr	r1, [pc, #420]	; (3834 <__ieee754_pow+0xa18>)
    3690:	f001 fadc 	bl	4c4c <__aeabi_ddiv>
    3694:	e44a      	b.n	2f2c <__ieee754_pow+0x110>
    3696:	4b6d      	ldr	r3, [pc, #436]	; (384c <__ieee754_pow+0xa30>)
    3698:	429c      	cmp	r4, r3
    369a:	dc00      	bgt.n	369e <__ieee754_pow+0x882>
    369c:	e4aa      	b.n	2ff4 <__ieee754_pow+0x1d8>
    369e:	4b65      	ldr	r3, [pc, #404]	; (3834 <__ieee754_pow+0xa18>)
    36a0:	429c      	cmp	r4, r3
    36a2:	dd01      	ble.n	36a8 <__ieee754_pow+0x88c>
    36a4:	f7ff fc2c 	bl	2f00 <__ieee754_pow+0xe4>
    36a8:	2200      	movs	r2, #0
    36aa:	4b62      	ldr	r3, [pc, #392]	; (3834 <__ieee754_pow+0xa18>)
    36ac:	f002 f96c 	bl	5988 <__aeabi_dsub>
    36b0:	22c0      	movs	r2, #192	; 0xc0
    36b2:	4b67      	ldr	r3, [pc, #412]	; (3850 <__ieee754_pow+0xa34>)
    36b4:	05d2      	lsls	r2, r2, #23
    36b6:	0004      	movs	r4, r0
    36b8:	000d      	movs	r5, r1
    36ba:	f001 feeb 	bl	5494 <__aeabi_dmul>
    36be:	4a65      	ldr	r2, [pc, #404]	; (3854 <__ieee754_pow+0xa38>)
    36c0:	0006      	movs	r6, r0
    36c2:	000f      	movs	r7, r1
    36c4:	4b64      	ldr	r3, [pc, #400]	; (3858 <__ieee754_pow+0xa3c>)
    36c6:	0020      	movs	r0, r4
    36c8:	0029      	movs	r1, r5
    36ca:	f001 fee3 	bl	5494 <__aeabi_dmul>
    36ce:	2200      	movs	r2, #0
    36d0:	9002      	str	r0, [sp, #8]
    36d2:	9103      	str	r1, [sp, #12]
    36d4:	4b61      	ldr	r3, [pc, #388]	; (385c <__ieee754_pow+0xa40>)
    36d6:	0020      	movs	r0, r4
    36d8:	0029      	movs	r1, r5
    36da:	f001 fedb 	bl	5494 <__aeabi_dmul>
    36de:	0002      	movs	r2, r0
    36e0:	000b      	movs	r3, r1
    36e2:	485f      	ldr	r0, [pc, #380]	; (3860 <__ieee754_pow+0xa44>)
    36e4:	495f      	ldr	r1, [pc, #380]	; (3864 <__ieee754_pow+0xa48>)
    36e6:	f002 f94f 	bl	5988 <__aeabi_dsub>
    36ea:	0022      	movs	r2, r4
    36ec:	002b      	movs	r3, r5
    36ee:	f001 fed1 	bl	5494 <__aeabi_dmul>
    36f2:	0002      	movs	r2, r0
    36f4:	000b      	movs	r3, r1
    36f6:	2000      	movs	r0, #0
    36f8:	495b      	ldr	r1, [pc, #364]	; (3868 <__ieee754_pow+0xa4c>)
    36fa:	f002 f945 	bl	5988 <__aeabi_dsub>
    36fe:	0022      	movs	r2, r4
    3700:	9004      	str	r0, [sp, #16]
    3702:	9105      	str	r1, [sp, #20]
    3704:	002b      	movs	r3, r5
    3706:	0020      	movs	r0, r4
    3708:	0029      	movs	r1, r5
    370a:	f001 fec3 	bl	5494 <__aeabi_dmul>
    370e:	0002      	movs	r2, r0
    3710:	000b      	movs	r3, r1
    3712:	9804      	ldr	r0, [sp, #16]
    3714:	9905      	ldr	r1, [sp, #20]
    3716:	f001 febd 	bl	5494 <__aeabi_dmul>
    371a:	4a54      	ldr	r2, [pc, #336]	; (386c <__ieee754_pow+0xa50>)
    371c:	4b4c      	ldr	r3, [pc, #304]	; (3850 <__ieee754_pow+0xa34>)
    371e:	f001 feb9 	bl	5494 <__aeabi_dmul>
    3722:	0002      	movs	r2, r0
    3724:	000b      	movs	r3, r1
    3726:	9802      	ldr	r0, [sp, #8]
    3728:	9903      	ldr	r1, [sp, #12]
    372a:	f002 f92d 	bl	5988 <__aeabi_dsub>
    372e:	0002      	movs	r2, r0
    3730:	000b      	movs	r3, r1
    3732:	0004      	movs	r4, r0
    3734:	000d      	movs	r5, r1
    3736:	0030      	movs	r0, r6
    3738:	0039      	movs	r1, r7
    373a:	f000 ff5b 	bl	45f4 <__aeabi_dadd>
    373e:	2200      	movs	r2, #0
    3740:	0010      	movs	r0, r2
    3742:	003b      	movs	r3, r7
    3744:	0032      	movs	r2, r6
    3746:	9002      	str	r0, [sp, #8]
    3748:	9103      	str	r1, [sp, #12]
    374a:	f002 f91d 	bl	5988 <__aeabi_dsub>
    374e:	0002      	movs	r2, r0
    3750:	000b      	movs	r3, r1
    3752:	0020      	movs	r0, r4
    3754:	0029      	movs	r1, r5
    3756:	f002 f917 	bl	5988 <__aeabi_dsub>
    375a:	9004      	str	r0, [sp, #16]
    375c:	9105      	str	r1, [sp, #20]
    375e:	e5e1      	b.n	3324 <__ieee754_pow+0x508>
    3760:	4a43      	ldr	r2, [pc, #268]	; (3870 <__ieee754_pow+0xa54>)
    3762:	4b44      	ldr	r3, [pc, #272]	; (3874 <__ieee754_pow+0xa58>)
    3764:	9806      	ldr	r0, [sp, #24]
    3766:	9907      	ldr	r1, [sp, #28]
    3768:	f001 fe94 	bl	5494 <__aeabi_dmul>
    376c:	4a40      	ldr	r2, [pc, #256]	; (3870 <__ieee754_pow+0xa54>)
    376e:	4b41      	ldr	r3, [pc, #260]	; (3874 <__ieee754_pow+0xa58>)
    3770:	f001 fe90 	bl	5494 <__aeabi_dmul>
    3774:	0006      	movs	r6, r0
    3776:	f7ff fb9a 	bl	2eae <__ieee754_pow+0x92>
    377a:	2a00      	cmp	r2, #0
    377c:	d001      	beq.n	3782 <__ieee754_pow+0x966>
    377e:	f7ff fba5 	bl	2ecc <__ieee754_pow+0xb0>
    3782:	3214      	adds	r2, #20
    3784:	1ad3      	subs	r3, r2, r3
    3786:	003a      	movs	r2, r7
    3788:	411a      	asrs	r2, r3
    378a:	0011      	movs	r1, r2
    378c:	4099      	lsls	r1, r3
    378e:	428f      	cmp	r7, r1
    3790:	d001      	beq.n	3796 <__ieee754_pow+0x97a>
    3792:	f7ff fb6f 	bl	2e74 <__ieee754_pow+0x58>
    3796:	2301      	movs	r3, #1
    3798:	4013      	ands	r3, r2
    379a:	2202      	movs	r2, #2
    379c:	1ad3      	subs	r3, r2, r3
    379e:	469b      	mov	fp, r3
    37a0:	f7ff fb68 	bl	2e74 <__ieee754_pow+0x58>
    37a4:	4b30      	ldr	r3, [pc, #192]	; (3868 <__ieee754_pow+0xa4c>)
    37a6:	429e      	cmp	r6, r3
    37a8:	dd00      	ble.n	37ac <__ieee754_pow+0x990>
    37aa:	e64e      	b.n	344a <__ieee754_pow+0x62e>
    37ac:	2300      	movs	r3, #0
    37ae:	4699      	mov	r9, r3
    37b0:	4698      	mov	r8, r3
    37b2:	e67a      	b.n	34aa <__ieee754_pow+0x68e>
    37b4:	0002      	movs	r2, r0
    37b6:	000b      	movs	r3, r1
    37b8:	f7ff fc14 	bl	2fe4 <__ieee754_pow+0x1c8>
    37bc:	2380      	movs	r3, #128	; 0x80
    37be:	4c2e      	ldr	r4, [pc, #184]	; (3878 <__ieee754_pow+0xa5c>)
    37c0:	05db      	lsls	r3, r3, #23
    37c2:	9308      	str	r3, [sp, #32]
    37c4:	9409      	str	r4, [sp, #36]	; 0x24
    37c6:	4b2d      	ldr	r3, [pc, #180]	; (387c <__ieee754_pow+0xa60>)
    37c8:	4c2d      	ldr	r4, [pc, #180]	; (3880 <__ieee754_pow+0xa64>)
    37ca:	2200      	movs	r2, #0
    37cc:	930c      	str	r3, [sp, #48]	; 0x30
    37ce:	940d      	str	r4, [sp, #52]	; 0x34
    37d0:	2480      	movs	r4, #128	; 0x80
    37d2:	4b2c      	ldr	r3, [pc, #176]	; (3884 <__ieee754_pow+0xa68>)
    37d4:	02e4      	lsls	r4, r4, #11
    37d6:	9206      	str	r2, [sp, #24]
    37d8:	9307      	str	r3, [sp, #28]
    37da:	e456      	b.n	308a <__ieee754_pow+0x26e>
    37dc:	4643      	mov	r3, r8
    37de:	425b      	negs	r3, r3
    37e0:	4698      	mov	r8, r3
    37e2:	e651      	b.n	3488 <__ieee754_pow+0x66c>
    37e4:	4642      	mov	r2, r8
    37e6:	f000 f9fd 	bl	3be4 <scalbn>
    37ea:	e707      	b.n	35fc <__ieee754_pow+0x7e0>
    37ec:	fffffc02 	.word	0xfffffc02
    37f0:	fffffc01 	.word	0xfffffc01
    37f4:	000fffff 	.word	0x000fffff
    37f8:	3fe62e43 	.word	0x3fe62e43
    37fc:	fefa39ef 	.word	0xfefa39ef
    3800:	3fe62e42 	.word	0x3fe62e42
    3804:	0ca86c39 	.word	0x0ca86c39
    3808:	be205c61 	.word	0xbe205c61
    380c:	72bea4d0 	.word	0x72bea4d0
    3810:	3e663769 	.word	0x3e663769
    3814:	c5d26bf1 	.word	0xc5d26bf1
    3818:	3ebbbd41 	.word	0x3ebbbd41
    381c:	af25de2c 	.word	0xaf25de2c
    3820:	3f11566a 	.word	0x3f11566a
    3824:	16bebd93 	.word	0x16bebd93
    3828:	3f66c16c 	.word	0x3f66c16c
    382c:	5555553e 	.word	0x5555553e
    3830:	3fc55555 	.word	0x3fc55555
    3834:	3ff00000 	.word	0x3ff00000
    3838:	4090cbff 	.word	0x4090cbff
    383c:	3f6f3400 	.word	0x3f6f3400
    3840:	c2f8f359 	.word	0xc2f8f359
    3844:	01a56e1f 	.word	0x01a56e1f
    3848:	bff00000 	.word	0xbff00000
    384c:	3feffffe 	.word	0x3feffffe
    3850:	3ff71547 	.word	0x3ff71547
    3854:	f85ddf44 	.word	0xf85ddf44
    3858:	3e54ae0b 	.word	0x3e54ae0b
    385c:	3fd00000 	.word	0x3fd00000
    3860:	55555555 	.word	0x55555555
    3864:	3fd55555 	.word	0x3fd55555
    3868:	3fe00000 	.word	0x3fe00000
    386c:	652b82fe 	.word	0x652b82fe
    3870:	8800759c 	.word	0x8800759c
    3874:	7e37e43c 	.word	0x7e37e43c
    3878:	3fe2b803 	.word	0x3fe2b803
    387c:	43cfd006 	.word	0x43cfd006
    3880:	3e4cfdeb 	.word	0x3e4cfdeb
    3884:	3ff80000 	.word	0x3ff80000

00003888 <__ieee754_sqrt>:
    3888:	b5f0      	push	{r4, r5, r6, r7, lr}
    388a:	4656      	mov	r6, sl
    388c:	464d      	mov	r5, r9
    388e:	4644      	mov	r4, r8
    3890:	465f      	mov	r7, fp
    3892:	4b75      	ldr	r3, [pc, #468]	; (3a68 <__ieee754_sqrt+0x1e0>)
    3894:	b4f0      	push	{r4, r5, r6, r7}
    3896:	000a      	movs	r2, r1
    3898:	000d      	movs	r5, r1
    389a:	0019      	movs	r1, r3
    389c:	b083      	sub	sp, #12
    389e:	0006      	movs	r6, r0
    38a0:	0004      	movs	r4, r0
    38a2:	4029      	ands	r1, r5
    38a4:	4299      	cmp	r1, r3
    38a6:	d100      	bne.n	38aa <__ieee754_sqrt+0x22>
    38a8:	e0ba      	b.n	3a20 <__ieee754_sqrt+0x198>
    38aa:	2d00      	cmp	r5, #0
    38ac:	dc00      	bgt.n	38b0 <__ieee754_sqrt+0x28>
    38ae:	e094      	b.n	39da <__ieee754_sqrt+0x152>
    38b0:	152d      	asrs	r5, r5, #20
    38b2:	d100      	bne.n	38b6 <__ieee754_sqrt+0x2e>
    38b4:	e0a3      	b.n	39fe <__ieee754_sqrt+0x176>
    38b6:	4b6d      	ldr	r3, [pc, #436]	; (3a6c <__ieee754_sqrt+0x1e4>)
    38b8:	0312      	lsls	r2, r2, #12
    38ba:	469c      	mov	ip, r3
    38bc:	2380      	movs	r3, #128	; 0x80
    38be:	0b12      	lsrs	r2, r2, #12
    38c0:	035b      	lsls	r3, r3, #13
    38c2:	4465      	add	r5, ip
    38c4:	431a      	orrs	r2, r3
    38c6:	07eb      	lsls	r3, r5, #31
    38c8:	d500      	bpl.n	38cc <__ieee754_sqrt+0x44>
    38ca:	e081      	b.n	39d0 <__ieee754_sqrt+0x148>
    38cc:	106b      	asrs	r3, r5, #1
    38ce:	4698      	mov	r8, r3
    38d0:	0fe3      	lsrs	r3, r4, #31
    38d2:	189b      	adds	r3, r3, r2
    38d4:	189b      	adds	r3, r3, r2
    38d6:	2280      	movs	r2, #128	; 0x80
    38d8:	2116      	movs	r1, #22
    38da:	2600      	movs	r6, #0
    38dc:	2700      	movs	r7, #0
    38de:	0064      	lsls	r4, r4, #1
    38e0:	0392      	lsls	r2, r2, #14
    38e2:	18b8      	adds	r0, r7, r2
    38e4:	4298      	cmp	r0, r3
    38e6:	dc02      	bgt.n	38ee <__ieee754_sqrt+0x66>
    38e8:	1887      	adds	r7, r0, r2
    38ea:	1a1b      	subs	r3, r3, r0
    38ec:	18b6      	adds	r6, r6, r2
    38ee:	0fe0      	lsrs	r0, r4, #31
    38f0:	005b      	lsls	r3, r3, #1
    38f2:	3901      	subs	r1, #1
    38f4:	181b      	adds	r3, r3, r0
    38f6:	0064      	lsls	r4, r4, #1
    38f8:	0852      	lsrs	r2, r2, #1
    38fa:	2900      	cmp	r1, #0
    38fc:	d1f1      	bne.n	38e2 <__ieee754_sqrt+0x5a>
    38fe:	2200      	movs	r2, #0
    3900:	9201      	str	r2, [sp, #4]
    3902:	4694      	mov	ip, r2
    3904:	2280      	movs	r2, #128	; 0x80
    3906:	0612      	lsls	r2, r2, #24
    3908:	2020      	movs	r0, #32
    390a:	4691      	mov	r9, r2
    390c:	e009      	b.n	3922 <__ieee754_sqrt+0x9a>
    390e:	429f      	cmp	r7, r3
    3910:	d041      	beq.n	3996 <__ieee754_sqrt+0x10e>
    3912:	0fe1      	lsrs	r1, r4, #31
    3914:	18c9      	adds	r1, r1, r3
    3916:	3801      	subs	r0, #1
    3918:	18cb      	adds	r3, r1, r3
    391a:	0064      	lsls	r4, r4, #1
    391c:	0852      	lsrs	r2, r2, #1
    391e:	2800      	cmp	r0, #0
    3920:	d01e      	beq.n	3960 <__ieee754_sqrt+0xd8>
    3922:	4661      	mov	r1, ip
    3924:	1851      	adds	r1, r2, r1
    3926:	429f      	cmp	r7, r3
    3928:	daf1      	bge.n	390e <__ieee754_sqrt+0x86>
    392a:	188d      	adds	r5, r1, r2
    392c:	46ac      	mov	ip, r5
    392e:	0fcd      	lsrs	r5, r1, #31
    3930:	07ed      	lsls	r5, r5, #31
    3932:	46ba      	mov	sl, r7
    3934:	454d      	cmp	r5, r9
    3936:	d039      	beq.n	39ac <__ieee754_sqrt+0x124>
    3938:	1bdb      	subs	r3, r3, r7
    393a:	428c      	cmp	r4, r1
    393c:	41bf      	sbcs	r7, r7
    393e:	427f      	negs	r7, r7
    3940:	1bdb      	subs	r3, r3, r7
    3942:	1a64      	subs	r4, r4, r1
    3944:	9901      	ldr	r1, [sp, #4]
    3946:	3801      	subs	r0, #1
    3948:	468b      	mov	fp, r1
    394a:	4493      	add	fp, r2
    394c:	4659      	mov	r1, fp
    394e:	9101      	str	r1, [sp, #4]
    3950:	0fe1      	lsrs	r1, r4, #31
    3952:	18c9      	adds	r1, r1, r3
    3954:	4657      	mov	r7, sl
    3956:	18cb      	adds	r3, r1, r3
    3958:	0064      	lsls	r4, r4, #1
    395a:	0852      	lsrs	r2, r2, #1
    395c:	2800      	cmp	r0, #0
    395e:	d1e0      	bne.n	3922 <__ieee754_sqrt+0x9a>
    3960:	4323      	orrs	r3, r4
    3962:	d12b      	bne.n	39bc <__ieee754_sqrt+0x134>
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	085b      	lsrs	r3, r3, #1
    3968:	4941      	ldr	r1, [pc, #260]	; (3a70 <__ieee754_sqrt+0x1e8>)
    396a:	1072      	asrs	r2, r6, #1
    396c:	468c      	mov	ip, r1
    396e:	4462      	add	r2, ip
    3970:	07f1      	lsls	r1, r6, #31
    3972:	d502      	bpl.n	397a <__ieee754_sqrt+0xf2>
    3974:	2180      	movs	r1, #128	; 0x80
    3976:	0609      	lsls	r1, r1, #24
    3978:	430b      	orrs	r3, r1
    397a:	4641      	mov	r1, r8
    397c:	0509      	lsls	r1, r1, #20
    397e:	188d      	adds	r5, r1, r2
    3980:	001e      	movs	r6, r3
    3982:	002f      	movs	r7, r5
    3984:	0030      	movs	r0, r6
    3986:	0039      	movs	r1, r7
    3988:	b003      	add	sp, #12
    398a:	bc3c      	pop	{r2, r3, r4, r5}
    398c:	4690      	mov	r8, r2
    398e:	4699      	mov	r9, r3
    3990:	46a2      	mov	sl, r4
    3992:	46ab      	mov	fp, r5
    3994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3996:	42a1      	cmp	r1, r4
    3998:	d80e      	bhi.n	39b8 <__ieee754_sqrt+0x130>
    399a:	188d      	adds	r5, r1, r2
    399c:	46ac      	mov	ip, r5
    399e:	0fcd      	lsrs	r5, r1, #31
    39a0:	07ed      	lsls	r5, r5, #31
    39a2:	454d      	cmp	r5, r9
    39a4:	d048      	beq.n	3a38 <__ieee754_sqrt+0x1b0>
    39a6:	469a      	mov	sl, r3
    39a8:	2300      	movs	r3, #0
    39aa:	e7ca      	b.n	3942 <__ieee754_sqrt+0xba>
    39ac:	4665      	mov	r5, ip
    39ae:	2d00      	cmp	r5, #0
    39b0:	dbc2      	blt.n	3938 <__ieee754_sqrt+0xb0>
    39b2:	1c7d      	adds	r5, r7, #1
    39b4:	46aa      	mov	sl, r5
    39b6:	e7bf      	b.n	3938 <__ieee754_sqrt+0xb0>
    39b8:	003b      	movs	r3, r7
    39ba:	e7aa      	b.n	3912 <__ieee754_sqrt+0x8a>
    39bc:	9b01      	ldr	r3, [sp, #4]
    39be:	3301      	adds	r3, #1
    39c0:	d03e      	beq.n	3a40 <__ieee754_sqrt+0x1b8>
    39c2:	9a01      	ldr	r2, [sp, #4]
    39c4:	2301      	movs	r3, #1
    39c6:	4694      	mov	ip, r2
    39c8:	4013      	ands	r3, r2
    39ca:	4463      	add	r3, ip
    39cc:	085b      	lsrs	r3, r3, #1
    39ce:	e7cb      	b.n	3968 <__ieee754_sqrt+0xe0>
    39d0:	0fe3      	lsrs	r3, r4, #31
    39d2:	0052      	lsls	r2, r2, #1
    39d4:	189a      	adds	r2, r3, r2
    39d6:	0064      	lsls	r4, r4, #1
    39d8:	e778      	b.n	38cc <__ieee754_sqrt+0x44>
    39da:	006b      	lsls	r3, r5, #1
    39dc:	085b      	lsrs	r3, r3, #1
    39de:	4303      	orrs	r3, r0
    39e0:	002f      	movs	r7, r5
    39e2:	2b00      	cmp	r3, #0
    39e4:	d0ce      	beq.n	3984 <__ieee754_sqrt+0xfc>
    39e6:	2500      	movs	r5, #0
    39e8:	2a00      	cmp	r2, #0
    39ea:	d131      	bne.n	3a50 <__ieee754_sqrt+0x1c8>
    39ec:	0ae2      	lsrs	r2, r4, #11
    39ee:	3d15      	subs	r5, #21
    39f0:	0564      	lsls	r4, r4, #21
    39f2:	2a00      	cmp	r2, #0
    39f4:	d0fa      	beq.n	39ec <__ieee754_sqrt+0x164>
    39f6:	2380      	movs	r3, #128	; 0x80
    39f8:	035b      	lsls	r3, r3, #13
    39fa:	421a      	tst	r2, r3
    39fc:	d123      	bne.n	3a46 <__ieee754_sqrt+0x1be>
    39fe:	2080      	movs	r0, #128	; 0x80
    3a00:	2300      	movs	r3, #0
    3a02:	0340      	lsls	r0, r0, #13
    3a04:	e000      	b.n	3a08 <__ieee754_sqrt+0x180>
    3a06:	000b      	movs	r3, r1
    3a08:	0052      	lsls	r2, r2, #1
    3a0a:	1c59      	adds	r1, r3, #1
    3a0c:	4202      	tst	r2, r0
    3a0e:	d0fa      	beq.n	3a06 <__ieee754_sqrt+0x17e>
    3a10:	2020      	movs	r0, #32
    3a12:	1a40      	subs	r0, r0, r1
    3a14:	1aed      	subs	r5, r5, r3
    3a16:	0023      	movs	r3, r4
    3a18:	40c3      	lsrs	r3, r0
    3a1a:	408c      	lsls	r4, r1
    3a1c:	431a      	orrs	r2, r3
    3a1e:	e74a      	b.n	38b6 <__ieee754_sqrt+0x2e>
    3a20:	0002      	movs	r2, r0
    3a22:	002b      	movs	r3, r5
    3a24:	0029      	movs	r1, r5
    3a26:	f001 fd35 	bl	5494 <__aeabi_dmul>
    3a2a:	0032      	movs	r2, r6
    3a2c:	002b      	movs	r3, r5
    3a2e:	f000 fde1 	bl	45f4 <__aeabi_dadd>
    3a32:	0006      	movs	r6, r0
    3a34:	000f      	movs	r7, r1
    3a36:	e7a5      	b.n	3984 <__ieee754_sqrt+0xfc>
    3a38:	4665      	mov	r5, ip
    3a3a:	2d00      	cmp	r5, #0
    3a3c:	dab9      	bge.n	39b2 <__ieee754_sqrt+0x12a>
    3a3e:	e7b2      	b.n	39a6 <__ieee754_sqrt+0x11e>
    3a40:	3601      	adds	r6, #1
    3a42:	2300      	movs	r3, #0
    3a44:	e790      	b.n	3968 <__ieee754_sqrt+0xe0>
    3a46:	2301      	movs	r3, #1
    3a48:	2020      	movs	r0, #32
    3a4a:	425b      	negs	r3, r3
    3a4c:	2100      	movs	r1, #0
    3a4e:	e7e1      	b.n	3a14 <__ieee754_sqrt+0x18c>
    3a50:	003b      	movs	r3, r7
    3a52:	0002      	movs	r2, r0
    3a54:	0039      	movs	r1, r7
    3a56:	f001 ff97 	bl	5988 <__aeabi_dsub>
    3a5a:	0002      	movs	r2, r0
    3a5c:	000b      	movs	r3, r1
    3a5e:	f001 f8f5 	bl	4c4c <__aeabi_ddiv>
    3a62:	0006      	movs	r6, r0
    3a64:	000f      	movs	r7, r1
    3a66:	e78d      	b.n	3984 <__ieee754_sqrt+0xfc>
    3a68:	7ff00000 	.word	0x7ff00000
    3a6c:	fffffc01 	.word	0xfffffc01
    3a70:	3fe00000 	.word	0x3fe00000

00003a74 <fabs>:
    3a74:	0049      	lsls	r1, r1, #1
    3a76:	084b      	lsrs	r3, r1, #1
    3a78:	0019      	movs	r1, r3
    3a7a:	4770      	bx	lr

00003a7c <finite>:
    3a7c:	4b03      	ldr	r3, [pc, #12]	; (3a8c <finite+0x10>)
    3a7e:	0048      	lsls	r0, r1, #1
    3a80:	469c      	mov	ip, r3
    3a82:	0840      	lsrs	r0, r0, #1
    3a84:	4460      	add	r0, ip
    3a86:	0fc0      	lsrs	r0, r0, #31
    3a88:	4770      	bx	lr
    3a8a:	46c0      	nop			; (mov r8, r8)
    3a8c:	80100000 	.word	0x80100000

00003a90 <matherr>:
    3a90:	2000      	movs	r0, #0
    3a92:	4770      	bx	lr

00003a94 <nan>:
    3a94:	2000      	movs	r0, #0
    3a96:	4901      	ldr	r1, [pc, #4]	; (3a9c <nan+0x8>)
    3a98:	4770      	bx	lr
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	7ff80000 	.word	0x7ff80000

00003aa0 <rint>:
    3aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa2:	4647      	mov	r7, r8
    3aa4:	b480      	push	{r7}
    3aa6:	0fcb      	lsrs	r3, r1, #31
    3aa8:	4698      	mov	r8, r3
    3aaa:	4c4a      	ldr	r4, [pc, #296]	; (3bd4 <rint+0x134>)
    3aac:	004b      	lsls	r3, r1, #1
    3aae:	0d5b      	lsrs	r3, r3, #21
    3ab0:	191e      	adds	r6, r3, r4
    3ab2:	b082      	sub	sp, #8
    3ab4:	0007      	movs	r7, r0
    3ab6:	000a      	movs	r2, r1
    3ab8:	2e13      	cmp	r6, #19
    3aba:	dc35      	bgt.n	3b28 <rint+0x88>
    3abc:	2e00      	cmp	r6, #0
    3abe:	db57      	blt.n	3b70 <rint+0xd0>
    3ac0:	4b45      	ldr	r3, [pc, #276]	; (3bd8 <rint+0x138>)
    3ac2:	0004      	movs	r4, r0
    3ac4:	4133      	asrs	r3, r6
    3ac6:	001f      	movs	r7, r3
    3ac8:	400f      	ands	r7, r1
    3aca:	4307      	orrs	r7, r0
    3acc:	000d      	movs	r5, r1
    3ace:	2f00      	cmp	r7, #0
    3ad0:	d024      	beq.n	3b1c <rint+0x7c>
    3ad2:	085b      	lsrs	r3, r3, #1
    3ad4:	001c      	movs	r4, r3
    3ad6:	400c      	ands	r4, r1
    3ad8:	4320      	orrs	r0, r4
    3ada:	2700      	movs	r7, #0
    3adc:	2800      	cmp	r0, #0
    3ade:	d007      	beq.n	3af0 <rint+0x50>
    3ae0:	2e13      	cmp	r6, #19
    3ae2:	d100      	bne.n	3ae6 <rint+0x46>
    3ae4:	e072      	b.n	3bcc <rint+0x12c>
    3ae6:	2280      	movs	r2, #128	; 0x80
    3ae8:	02d2      	lsls	r2, r2, #11
    3aea:	4132      	asrs	r2, r6
    3aec:	4399      	bics	r1, r3
    3aee:	430a      	orrs	r2, r1
    3af0:	4643      	mov	r3, r8
    3af2:	00de      	lsls	r6, r3, #3
    3af4:	4b39      	ldr	r3, [pc, #228]	; (3bdc <rint+0x13c>)
    3af6:	0011      	movs	r1, r2
    3af8:	199e      	adds	r6, r3, r6
    3afa:	6834      	ldr	r4, [r6, #0]
    3afc:	6875      	ldr	r5, [r6, #4]
    3afe:	0038      	movs	r0, r7
    3b00:	0022      	movs	r2, r4
    3b02:	002b      	movs	r3, r5
    3b04:	f000 fd76 	bl	45f4 <__aeabi_dadd>
    3b08:	9000      	str	r0, [sp, #0]
    3b0a:	9101      	str	r1, [sp, #4]
    3b0c:	9800      	ldr	r0, [sp, #0]
    3b0e:	9901      	ldr	r1, [sp, #4]
    3b10:	0022      	movs	r2, r4
    3b12:	002b      	movs	r3, r5
    3b14:	f001 ff38 	bl	5988 <__aeabi_dsub>
    3b18:	0004      	movs	r4, r0
    3b1a:	000d      	movs	r5, r1
    3b1c:	0020      	movs	r0, r4
    3b1e:	0029      	movs	r1, r5
    3b20:	b002      	add	sp, #8
    3b22:	bc04      	pop	{r2}
    3b24:	4690      	mov	r8, r2
    3b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b28:	2e33      	cmp	r6, #51	; 0x33
    3b2a:	dd0c      	ble.n	3b46 <rint+0xa6>
    3b2c:	2380      	movs	r3, #128	; 0x80
    3b2e:	0004      	movs	r4, r0
    3b30:	000d      	movs	r5, r1
    3b32:	00db      	lsls	r3, r3, #3
    3b34:	429e      	cmp	r6, r3
    3b36:	d1f1      	bne.n	3b1c <rint+0x7c>
    3b38:	0002      	movs	r2, r0
    3b3a:	000b      	movs	r3, r1
    3b3c:	f000 fd5a 	bl	45f4 <__aeabi_dadd>
    3b40:	0004      	movs	r4, r0
    3b42:	000d      	movs	r5, r1
    3b44:	e7ea      	b.n	3b1c <rint+0x7c>
    3b46:	4c26      	ldr	r4, [pc, #152]	; (3be0 <rint+0x140>)
    3b48:	000d      	movs	r5, r1
    3b4a:	46a4      	mov	ip, r4
    3b4c:	2401      	movs	r4, #1
    3b4e:	4463      	add	r3, ip
    3b50:	4264      	negs	r4, r4
    3b52:	40dc      	lsrs	r4, r3
    3b54:	46a4      	mov	ip, r4
    3b56:	4661      	mov	r1, ip
    3b58:	0004      	movs	r4, r0
    3b5a:	4201      	tst	r1, r0
    3b5c:	d0de      	beq.n	3b1c <rint+0x7c>
    3b5e:	0849      	lsrs	r1, r1, #1
    3b60:	4201      	tst	r1, r0
    3b62:	d0c5      	beq.n	3af0 <rint+0x50>
    3b64:	2780      	movs	r7, #128	; 0x80
    3b66:	05ff      	lsls	r7, r7, #23
    3b68:	411f      	asrs	r7, r3
    3b6a:	4388      	bics	r0, r1
    3b6c:	4307      	orrs	r7, r0
    3b6e:	e7bf      	b.n	3af0 <rint+0x50>
    3b70:	004b      	lsls	r3, r1, #1
    3b72:	085b      	lsrs	r3, r3, #1
    3b74:	4303      	orrs	r3, r0
    3b76:	0004      	movs	r4, r0
    3b78:	000d      	movs	r5, r1
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d0ce      	beq.n	3b1c <rint+0x7c>
    3b7e:	030b      	lsls	r3, r1, #12
    3b80:	0b1b      	lsrs	r3, r3, #12
    3b82:	4303      	orrs	r3, r0
    3b84:	425a      	negs	r2, r3
    3b86:	4313      	orrs	r3, r2
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	0b1b      	lsrs	r3, r3, #12
    3b8c:	0312      	lsls	r2, r2, #12
    3b8e:	4013      	ands	r3, r2
    3b90:	0c4a      	lsrs	r2, r1, #17
    3b92:	0452      	lsls	r2, r2, #17
    3b94:	4313      	orrs	r3, r2
    3b96:	0019      	movs	r1, r3
    3b98:	4643      	mov	r3, r8
    3b9a:	4a10      	ldr	r2, [pc, #64]	; (3bdc <rint+0x13c>)
    3b9c:	00db      	lsls	r3, r3, #3
    3b9e:	18d3      	adds	r3, r2, r3
    3ba0:	681c      	ldr	r4, [r3, #0]
    3ba2:	685d      	ldr	r5, [r3, #4]
    3ba4:	0022      	movs	r2, r4
    3ba6:	002b      	movs	r3, r5
    3ba8:	f000 fd24 	bl	45f4 <__aeabi_dadd>
    3bac:	9000      	str	r0, [sp, #0]
    3bae:	9101      	str	r1, [sp, #4]
    3bb0:	9800      	ldr	r0, [sp, #0]
    3bb2:	9901      	ldr	r1, [sp, #4]
    3bb4:	0022      	movs	r2, r4
    3bb6:	002b      	movs	r3, r5
    3bb8:	f001 fee6 	bl	5988 <__aeabi_dsub>
    3bbc:	4642      	mov	r2, r8
    3bbe:	004b      	lsls	r3, r1, #1
    3bc0:	085b      	lsrs	r3, r3, #1
    3bc2:	07d6      	lsls	r6, r2, #31
    3bc4:	4333      	orrs	r3, r6
    3bc6:	0004      	movs	r4, r0
    3bc8:	001d      	movs	r5, r3
    3bca:	e7a7      	b.n	3b1c <rint+0x7c>
    3bcc:	2780      	movs	r7, #128	; 0x80
    3bce:	063f      	lsls	r7, r7, #24
    3bd0:	e789      	b.n	3ae6 <rint+0x46>
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	fffffc01 	.word	0xfffffc01
    3bd8:	000fffff 	.word	0x000fffff
    3bdc:	00006868 	.word	0x00006868
    3be0:	fffffbed 	.word	0xfffffbed

00003be4 <scalbn>:
    3be4:	004b      	lsls	r3, r1, #1
    3be6:	b570      	push	{r4, r5, r6, lr}
    3be8:	0d5b      	lsrs	r3, r3, #21
    3bea:	0014      	movs	r4, r2
    3bec:	000a      	movs	r2, r1
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d11a      	bne.n	3c28 <scalbn+0x44>
    3bf2:	004b      	lsls	r3, r1, #1
    3bf4:	085b      	lsrs	r3, r3, #1
    3bf6:	4303      	orrs	r3, r0
    3bf8:	d015      	beq.n	3c26 <scalbn+0x42>
    3bfa:	2200      	movs	r2, #0
    3bfc:	4b22      	ldr	r3, [pc, #136]	; (3c88 <scalbn+0xa4>)
    3bfe:	f001 fc49 	bl	5494 <__aeabi_dmul>
    3c02:	4b22      	ldr	r3, [pc, #136]	; (3c8c <scalbn+0xa8>)
    3c04:	000a      	movs	r2, r1
    3c06:	429c      	cmp	r4, r3
    3c08:	db22      	blt.n	3c50 <scalbn+0x6c>
    3c0a:	004b      	lsls	r3, r1, #1
    3c0c:	0d5b      	lsrs	r3, r3, #21
    3c0e:	3b36      	subs	r3, #54	; 0x36
    3c10:	4d1f      	ldr	r5, [pc, #124]	; (3c90 <scalbn+0xac>)
    3c12:	18e3      	adds	r3, r4, r3
    3c14:	42ab      	cmp	r3, r5
    3c16:	dc20      	bgt.n	3c5a <scalbn+0x76>
    3c18:	2b00      	cmp	r3, #0
    3c1a:	dd0d      	ble.n	3c38 <scalbn+0x54>
    3c1c:	4c1d      	ldr	r4, [pc, #116]	; (3c94 <scalbn+0xb0>)
    3c1e:	051b      	lsls	r3, r3, #20
    3c20:	4022      	ands	r2, r4
    3c22:	431a      	orrs	r2, r3
    3c24:	0011      	movs	r1, r2
    3c26:	bd70      	pop	{r4, r5, r6, pc}
    3c28:	4d1b      	ldr	r5, [pc, #108]	; (3c98 <scalbn+0xb4>)
    3c2a:	42ab      	cmp	r3, r5
    3c2c:	d1f0      	bne.n	3c10 <scalbn+0x2c>
    3c2e:	0002      	movs	r2, r0
    3c30:	000b      	movs	r3, r1
    3c32:	f000 fcdf 	bl	45f4 <__aeabi_dadd>
    3c36:	e7f6      	b.n	3c26 <scalbn+0x42>
    3c38:	001d      	movs	r5, r3
    3c3a:	3535      	adds	r5, #53	; 0x35
    3c3c:	da18      	bge.n	3c70 <scalbn+0x8c>
    3c3e:	4b17      	ldr	r3, [pc, #92]	; (3c9c <scalbn+0xb8>)
    3c40:	0002      	movs	r2, r0
    3c42:	429c      	cmp	r4, r3
    3c44:	dc0a      	bgt.n	3c5c <scalbn+0x78>
    3c46:	000b      	movs	r3, r1
    3c48:	4815      	ldr	r0, [pc, #84]	; (3ca0 <scalbn+0xbc>)
    3c4a:	4916      	ldr	r1, [pc, #88]	; (3ca4 <scalbn+0xc0>)
    3c4c:	f000 f832 	bl	3cb4 <copysign>
    3c50:	4a13      	ldr	r2, [pc, #76]	; (3ca0 <scalbn+0xbc>)
    3c52:	4b14      	ldr	r3, [pc, #80]	; (3ca4 <scalbn+0xc0>)
    3c54:	f001 fc1e 	bl	5494 <__aeabi_dmul>
    3c58:	e7e5      	b.n	3c26 <scalbn+0x42>
    3c5a:	0002      	movs	r2, r0
    3c5c:	000b      	movs	r3, r1
    3c5e:	4812      	ldr	r0, [pc, #72]	; (3ca8 <scalbn+0xc4>)
    3c60:	4912      	ldr	r1, [pc, #72]	; (3cac <scalbn+0xc8>)
    3c62:	f000 f827 	bl	3cb4 <copysign>
    3c66:	4a10      	ldr	r2, [pc, #64]	; (3ca8 <scalbn+0xc4>)
    3c68:	4b10      	ldr	r3, [pc, #64]	; (3cac <scalbn+0xc8>)
    3c6a:	f001 fc13 	bl	5494 <__aeabi_dmul>
    3c6e:	e7da      	b.n	3c26 <scalbn+0x42>
    3c70:	4c08      	ldr	r4, [pc, #32]	; (3c94 <scalbn+0xb0>)
    3c72:	3336      	adds	r3, #54	; 0x36
    3c74:	4022      	ands	r2, r4
    3c76:	051b      	lsls	r3, r3, #20
    3c78:	4313      	orrs	r3, r2
    3c7a:	0019      	movs	r1, r3
    3c7c:	2200      	movs	r2, #0
    3c7e:	4b0c      	ldr	r3, [pc, #48]	; (3cb0 <scalbn+0xcc>)
    3c80:	f001 fc08 	bl	5494 <__aeabi_dmul>
    3c84:	e7cf      	b.n	3c26 <scalbn+0x42>
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	43500000 	.word	0x43500000
    3c8c:	ffff3cb0 	.word	0xffff3cb0
    3c90:	000007fe 	.word	0x000007fe
    3c94:	800fffff 	.word	0x800fffff
    3c98:	000007ff 	.word	0x000007ff
    3c9c:	0000c350 	.word	0x0000c350
    3ca0:	c2f8f359 	.word	0xc2f8f359
    3ca4:	01a56e1f 	.word	0x01a56e1f
    3ca8:	8800759c 	.word	0x8800759c
    3cac:	7e37e43c 	.word	0x7e37e43c
    3cb0:	3c900000 	.word	0x3c900000

00003cb4 <copysign>:
    3cb4:	b530      	push	{r4, r5, lr}
    3cb6:	004a      	lsls	r2, r1, #1
    3cb8:	0fdb      	lsrs	r3, r3, #31
    3cba:	07db      	lsls	r3, r3, #31
    3cbc:	0852      	lsrs	r2, r2, #1
    3cbe:	431a      	orrs	r2, r3
    3cc0:	0011      	movs	r1, r2
    3cc2:	bd30      	pop	{r4, r5, pc}

00003cc4 <__gnu_thumb1_case_uhi>:
    3cc4:	b403      	push	{r0, r1}
    3cc6:	4671      	mov	r1, lr
    3cc8:	0849      	lsrs	r1, r1, #1
    3cca:	0040      	lsls	r0, r0, #1
    3ccc:	0049      	lsls	r1, r1, #1
    3cce:	5a09      	ldrh	r1, [r1, r0]
    3cd0:	0049      	lsls	r1, r1, #1
    3cd2:	448e      	add	lr, r1
    3cd4:	bc03      	pop	{r0, r1}
    3cd6:	4770      	bx	lr

00003cd8 <__aeabi_cdrcmple>:
    3cd8:	4684      	mov	ip, r0
    3cda:	1c10      	adds	r0, r2, #0
    3cdc:	4662      	mov	r2, ip
    3cde:	468c      	mov	ip, r1
    3ce0:	1c19      	adds	r1, r3, #0
    3ce2:	4663      	mov	r3, ip
    3ce4:	e000      	b.n	3ce8 <__aeabi_cdcmpeq>
    3ce6:	46c0      	nop			; (mov r8, r8)

00003ce8 <__aeabi_cdcmpeq>:
    3ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3cea:	f001 fb69 	bl	53c0 <__ledf2>
    3cee:	2800      	cmp	r0, #0
    3cf0:	d401      	bmi.n	3cf6 <__aeabi_cdcmpeq+0xe>
    3cf2:	2100      	movs	r1, #0
    3cf4:	42c8      	cmn	r0, r1
    3cf6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003cf8 <__aeabi_dcmpeq>:
    3cf8:	b510      	push	{r4, lr}
    3cfa:	f001 fabd 	bl	5278 <__eqdf2>
    3cfe:	4240      	negs	r0, r0
    3d00:	3001      	adds	r0, #1
    3d02:	bd10      	pop	{r4, pc}

00003d04 <__aeabi_dcmplt>:
    3d04:	b510      	push	{r4, lr}
    3d06:	f001 fb5b 	bl	53c0 <__ledf2>
    3d0a:	2800      	cmp	r0, #0
    3d0c:	db01      	blt.n	3d12 <__aeabi_dcmplt+0xe>
    3d0e:	2000      	movs	r0, #0
    3d10:	bd10      	pop	{r4, pc}
    3d12:	2001      	movs	r0, #1
    3d14:	bd10      	pop	{r4, pc}
    3d16:	46c0      	nop			; (mov r8, r8)

00003d18 <__aeabi_dcmple>:
    3d18:	b510      	push	{r4, lr}
    3d1a:	f001 fb51 	bl	53c0 <__ledf2>
    3d1e:	2800      	cmp	r0, #0
    3d20:	dd01      	ble.n	3d26 <__aeabi_dcmple+0xe>
    3d22:	2000      	movs	r0, #0
    3d24:	bd10      	pop	{r4, pc}
    3d26:	2001      	movs	r0, #1
    3d28:	bd10      	pop	{r4, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)

00003d2c <__aeabi_dcmpgt>:
    3d2c:	b510      	push	{r4, lr}
    3d2e:	f001 fae3 	bl	52f8 <__gedf2>
    3d32:	2800      	cmp	r0, #0
    3d34:	dc01      	bgt.n	3d3a <__aeabi_dcmpgt+0xe>
    3d36:	2000      	movs	r0, #0
    3d38:	bd10      	pop	{r4, pc}
    3d3a:	2001      	movs	r0, #1
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)

00003d40 <__aeabi_dcmpge>:
    3d40:	b510      	push	{r4, lr}
    3d42:	f001 fad9 	bl	52f8 <__gedf2>
    3d46:	2800      	cmp	r0, #0
    3d48:	da01      	bge.n	3d4e <__aeabi_dcmpge+0xe>
    3d4a:	2000      	movs	r0, #0
    3d4c:	bd10      	pop	{r4, pc}
    3d4e:	2001      	movs	r0, #1
    3d50:	bd10      	pop	{r4, pc}
    3d52:	46c0      	nop			; (mov r8, r8)

00003d54 <__aeabi_cfrcmple>:
    3d54:	4684      	mov	ip, r0
    3d56:	1c08      	adds	r0, r1, #0
    3d58:	4661      	mov	r1, ip
    3d5a:	e7ff      	b.n	3d5c <__aeabi_cfcmpeq>

00003d5c <__aeabi_cfcmpeq>:
    3d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3d5e:	f000 f901 	bl	3f64 <__lesf2>
    3d62:	2800      	cmp	r0, #0
    3d64:	d401      	bmi.n	3d6a <__aeabi_cfcmpeq+0xe>
    3d66:	2100      	movs	r1, #0
    3d68:	42c8      	cmn	r0, r1
    3d6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003d6c <__aeabi_fcmpeq>:
    3d6c:	b510      	push	{r4, lr}
    3d6e:	f000 f88d 	bl	3e8c <__eqsf2>
    3d72:	4240      	negs	r0, r0
    3d74:	3001      	adds	r0, #1
    3d76:	bd10      	pop	{r4, pc}

00003d78 <__aeabi_fcmplt>:
    3d78:	b510      	push	{r4, lr}
    3d7a:	f000 f8f3 	bl	3f64 <__lesf2>
    3d7e:	2800      	cmp	r0, #0
    3d80:	db01      	blt.n	3d86 <__aeabi_fcmplt+0xe>
    3d82:	2000      	movs	r0, #0
    3d84:	bd10      	pop	{r4, pc}
    3d86:	2001      	movs	r0, #1
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)

00003d8c <__aeabi_fcmple>:
    3d8c:	b510      	push	{r4, lr}
    3d8e:	f000 f8e9 	bl	3f64 <__lesf2>
    3d92:	2800      	cmp	r0, #0
    3d94:	dd01      	ble.n	3d9a <__aeabi_fcmple+0xe>
    3d96:	2000      	movs	r0, #0
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	2001      	movs	r0, #1
    3d9c:	bd10      	pop	{r4, pc}
    3d9e:	46c0      	nop			; (mov r8, r8)

00003da0 <__aeabi_fcmpgt>:
    3da0:	b510      	push	{r4, lr}
    3da2:	f000 f89b 	bl	3edc <__gesf2>
    3da6:	2800      	cmp	r0, #0
    3da8:	dc01      	bgt.n	3dae <__aeabi_fcmpgt+0xe>
    3daa:	2000      	movs	r0, #0
    3dac:	bd10      	pop	{r4, pc}
    3dae:	2001      	movs	r0, #1
    3db0:	bd10      	pop	{r4, pc}
    3db2:	46c0      	nop			; (mov r8, r8)

00003db4 <__aeabi_fcmpge>:
    3db4:	b510      	push	{r4, lr}
    3db6:	f000 f891 	bl	3edc <__gesf2>
    3dba:	2800      	cmp	r0, #0
    3dbc:	da01      	bge.n	3dc2 <__aeabi_fcmpge+0xe>
    3dbe:	2000      	movs	r0, #0
    3dc0:	bd10      	pop	{r4, pc}
    3dc2:	2001      	movs	r0, #1
    3dc4:	bd10      	pop	{r4, pc}
    3dc6:	46c0      	nop			; (mov r8, r8)

00003dc8 <__aeabi_lmul>:
    3dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dca:	464f      	mov	r7, r9
    3dcc:	4646      	mov	r6, r8
    3dce:	b4c0      	push	{r6, r7}
    3dd0:	0416      	lsls	r6, r2, #16
    3dd2:	0c36      	lsrs	r6, r6, #16
    3dd4:	4699      	mov	r9, r3
    3dd6:	0033      	movs	r3, r6
    3dd8:	0405      	lsls	r5, r0, #16
    3dda:	0c2c      	lsrs	r4, r5, #16
    3ddc:	0c07      	lsrs	r7, r0, #16
    3dde:	0c15      	lsrs	r5, r2, #16
    3de0:	4363      	muls	r3, r4
    3de2:	437e      	muls	r6, r7
    3de4:	436f      	muls	r7, r5
    3de6:	4365      	muls	r5, r4
    3de8:	0c1c      	lsrs	r4, r3, #16
    3dea:	19ad      	adds	r5, r5, r6
    3dec:	1964      	adds	r4, r4, r5
    3dee:	469c      	mov	ip, r3
    3df0:	42a6      	cmp	r6, r4
    3df2:	d903      	bls.n	3dfc <__aeabi_lmul+0x34>
    3df4:	2380      	movs	r3, #128	; 0x80
    3df6:	025b      	lsls	r3, r3, #9
    3df8:	4698      	mov	r8, r3
    3dfa:	4447      	add	r7, r8
    3dfc:	4663      	mov	r3, ip
    3dfe:	0c25      	lsrs	r5, r4, #16
    3e00:	19ef      	adds	r7, r5, r7
    3e02:	041d      	lsls	r5, r3, #16
    3e04:	464b      	mov	r3, r9
    3e06:	434a      	muls	r2, r1
    3e08:	4343      	muls	r3, r0
    3e0a:	0c2d      	lsrs	r5, r5, #16
    3e0c:	0424      	lsls	r4, r4, #16
    3e0e:	1964      	adds	r4, r4, r5
    3e10:	1899      	adds	r1, r3, r2
    3e12:	19c9      	adds	r1, r1, r7
    3e14:	0020      	movs	r0, r4
    3e16:	bc0c      	pop	{r2, r3}
    3e18:	4690      	mov	r8, r2
    3e1a:	4699      	mov	r9, r3
    3e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)

00003e20 <__aeabi_f2uiz>:
    3e20:	219e      	movs	r1, #158	; 0x9e
    3e22:	b510      	push	{r4, lr}
    3e24:	05c9      	lsls	r1, r1, #23
    3e26:	1c04      	adds	r4, r0, #0
    3e28:	f7ff ffc4 	bl	3db4 <__aeabi_fcmpge>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d103      	bne.n	3e38 <__aeabi_f2uiz+0x18>
    3e30:	1c20      	adds	r0, r4, #0
    3e32:	f000 fb75 	bl	4520 <__aeabi_f2iz>
    3e36:	bd10      	pop	{r4, pc}
    3e38:	219e      	movs	r1, #158	; 0x9e
    3e3a:	1c20      	adds	r0, r4, #0
    3e3c:	05c9      	lsls	r1, r1, #23
    3e3e:	f000 f9e9 	bl	4214 <__aeabi_fsub>
    3e42:	f000 fb6d 	bl	4520 <__aeabi_f2iz>
    3e46:	2380      	movs	r3, #128	; 0x80
    3e48:	061b      	lsls	r3, r3, #24
    3e4a:	469c      	mov	ip, r3
    3e4c:	4460      	add	r0, ip
    3e4e:	e7f2      	b.n	3e36 <__aeabi_f2uiz+0x16>

00003e50 <__aeabi_d2uiz>:
    3e50:	b570      	push	{r4, r5, r6, lr}
    3e52:	2200      	movs	r2, #0
    3e54:	4b0c      	ldr	r3, [pc, #48]	; (3e88 <__aeabi_d2uiz+0x38>)
    3e56:	0004      	movs	r4, r0
    3e58:	000d      	movs	r5, r1
    3e5a:	f7ff ff71 	bl	3d40 <__aeabi_dcmpge>
    3e5e:	2800      	cmp	r0, #0
    3e60:	d104      	bne.n	3e6c <__aeabi_d2uiz+0x1c>
    3e62:	0020      	movs	r0, r4
    3e64:	0029      	movs	r1, r5
    3e66:	f002 f903 	bl	6070 <__aeabi_d2iz>
    3e6a:	bd70      	pop	{r4, r5, r6, pc}
    3e6c:	4b06      	ldr	r3, [pc, #24]	; (3e88 <__aeabi_d2uiz+0x38>)
    3e6e:	2200      	movs	r2, #0
    3e70:	0020      	movs	r0, r4
    3e72:	0029      	movs	r1, r5
    3e74:	f001 fd88 	bl	5988 <__aeabi_dsub>
    3e78:	f002 f8fa 	bl	6070 <__aeabi_d2iz>
    3e7c:	2380      	movs	r3, #128	; 0x80
    3e7e:	061b      	lsls	r3, r3, #24
    3e80:	469c      	mov	ip, r3
    3e82:	4460      	add	r0, ip
    3e84:	e7f1      	b.n	3e6a <__aeabi_d2uiz+0x1a>
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	41e00000 	.word	0x41e00000

00003e8c <__eqsf2>:
    3e8c:	0243      	lsls	r3, r0, #9
    3e8e:	b570      	push	{r4, r5, r6, lr}
    3e90:	0042      	lsls	r2, r0, #1
    3e92:	004c      	lsls	r4, r1, #1
    3e94:	0a5d      	lsrs	r5, r3, #9
    3e96:	0fc3      	lsrs	r3, r0, #31
    3e98:	0248      	lsls	r0, r1, #9
    3e9a:	0e12      	lsrs	r2, r2, #24
    3e9c:	0a46      	lsrs	r6, r0, #9
    3e9e:	0e24      	lsrs	r4, r4, #24
    3ea0:	0fc9      	lsrs	r1, r1, #31
    3ea2:	2aff      	cmp	r2, #255	; 0xff
    3ea4:	d00f      	beq.n	3ec6 <__eqsf2+0x3a>
    3ea6:	2cff      	cmp	r4, #255	; 0xff
    3ea8:	d011      	beq.n	3ece <__eqsf2+0x42>
    3eaa:	2001      	movs	r0, #1
    3eac:	42a2      	cmp	r2, r4
    3eae:	d000      	beq.n	3eb2 <__eqsf2+0x26>
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
    3eb2:	42b5      	cmp	r5, r6
    3eb4:	d1fc      	bne.n	3eb0 <__eqsf2+0x24>
    3eb6:	428b      	cmp	r3, r1
    3eb8:	d00d      	beq.n	3ed6 <__eqsf2+0x4a>
    3eba:	2a00      	cmp	r2, #0
    3ebc:	d1f8      	bne.n	3eb0 <__eqsf2+0x24>
    3ebe:	0028      	movs	r0, r5
    3ec0:	1e43      	subs	r3, r0, #1
    3ec2:	4198      	sbcs	r0, r3
    3ec4:	e7f4      	b.n	3eb0 <__eqsf2+0x24>
    3ec6:	2001      	movs	r0, #1
    3ec8:	2d00      	cmp	r5, #0
    3eca:	d1f1      	bne.n	3eb0 <__eqsf2+0x24>
    3ecc:	e7eb      	b.n	3ea6 <__eqsf2+0x1a>
    3ece:	2001      	movs	r0, #1
    3ed0:	2e00      	cmp	r6, #0
    3ed2:	d1ed      	bne.n	3eb0 <__eqsf2+0x24>
    3ed4:	e7e9      	b.n	3eaa <__eqsf2+0x1e>
    3ed6:	2000      	movs	r0, #0
    3ed8:	e7ea      	b.n	3eb0 <__eqsf2+0x24>
    3eda:	46c0      	nop			; (mov r8, r8)

00003edc <__gesf2>:
    3edc:	0243      	lsls	r3, r0, #9
    3ede:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ee0:	0042      	lsls	r2, r0, #1
    3ee2:	0a5d      	lsrs	r5, r3, #9
    3ee4:	0fc3      	lsrs	r3, r0, #31
    3ee6:	0248      	lsls	r0, r1, #9
    3ee8:	0a44      	lsrs	r4, r0, #9
    3eea:	0048      	lsls	r0, r1, #1
    3eec:	0e12      	lsrs	r2, r2, #24
    3eee:	0e00      	lsrs	r0, r0, #24
    3ef0:	0fc9      	lsrs	r1, r1, #31
    3ef2:	2aff      	cmp	r2, #255	; 0xff
    3ef4:	d01f      	beq.n	3f36 <__gesf2+0x5a>
    3ef6:	28ff      	cmp	r0, #255	; 0xff
    3ef8:	d022      	beq.n	3f40 <__gesf2+0x64>
    3efa:	2a00      	cmp	r2, #0
    3efc:	d109      	bne.n	3f12 <__gesf2+0x36>
    3efe:	426e      	negs	r6, r5
    3f00:	416e      	adcs	r6, r5
    3f02:	2800      	cmp	r0, #0
    3f04:	d10f      	bne.n	3f26 <__gesf2+0x4a>
    3f06:	2c00      	cmp	r4, #0
    3f08:	d10d      	bne.n	3f26 <__gesf2+0x4a>
    3f0a:	2000      	movs	r0, #0
    3f0c:	2d00      	cmp	r5, #0
    3f0e:	d009      	beq.n	3f24 <__gesf2+0x48>
    3f10:	e005      	b.n	3f1e <__gesf2+0x42>
    3f12:	2800      	cmp	r0, #0
    3f14:	d101      	bne.n	3f1a <__gesf2+0x3e>
    3f16:	2c00      	cmp	r4, #0
    3f18:	d001      	beq.n	3f1e <__gesf2+0x42>
    3f1a:	428b      	cmp	r3, r1
    3f1c:	d013      	beq.n	3f46 <__gesf2+0x6a>
    3f1e:	4258      	negs	r0, r3
    3f20:	2301      	movs	r3, #1
    3f22:	4318      	orrs	r0, r3
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	2e00      	cmp	r6, #0
    3f28:	d0f7      	beq.n	3f1a <__gesf2+0x3e>
    3f2a:	4248      	negs	r0, r1
    3f2c:	4141      	adcs	r1, r0
    3f2e:	2001      	movs	r0, #1
    3f30:	4249      	negs	r1, r1
    3f32:	4308      	orrs	r0, r1
    3f34:	e7f6      	b.n	3f24 <__gesf2+0x48>
    3f36:	2d00      	cmp	r5, #0
    3f38:	d0dd      	beq.n	3ef6 <__gesf2+0x1a>
    3f3a:	2002      	movs	r0, #2
    3f3c:	4240      	negs	r0, r0
    3f3e:	e7f1      	b.n	3f24 <__gesf2+0x48>
    3f40:	2c00      	cmp	r4, #0
    3f42:	d0da      	beq.n	3efa <__gesf2+0x1e>
    3f44:	e7f9      	b.n	3f3a <__gesf2+0x5e>
    3f46:	4282      	cmp	r2, r0
    3f48:	dce9      	bgt.n	3f1e <__gesf2+0x42>
    3f4a:	db04      	blt.n	3f56 <__gesf2+0x7a>
    3f4c:	42a5      	cmp	r5, r4
    3f4e:	d8e6      	bhi.n	3f1e <__gesf2+0x42>
    3f50:	2000      	movs	r0, #0
    3f52:	42a5      	cmp	r5, r4
    3f54:	d2e6      	bcs.n	3f24 <__gesf2+0x48>
    3f56:	4258      	negs	r0, r3
    3f58:	4143      	adcs	r3, r0
    3f5a:	2001      	movs	r0, #1
    3f5c:	425b      	negs	r3, r3
    3f5e:	4318      	orrs	r0, r3
    3f60:	e7e0      	b.n	3f24 <__gesf2+0x48>
    3f62:	46c0      	nop			; (mov r8, r8)

00003f64 <__lesf2>:
    3f64:	0243      	lsls	r3, r0, #9
    3f66:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f68:	0042      	lsls	r2, r0, #1
    3f6a:	004c      	lsls	r4, r1, #1
    3f6c:	0a5e      	lsrs	r6, r3, #9
    3f6e:	0fc3      	lsrs	r3, r0, #31
    3f70:	0248      	lsls	r0, r1, #9
    3f72:	0e12      	lsrs	r2, r2, #24
    3f74:	0a45      	lsrs	r5, r0, #9
    3f76:	0e24      	lsrs	r4, r4, #24
    3f78:	0fc9      	lsrs	r1, r1, #31
    3f7a:	2aff      	cmp	r2, #255	; 0xff
    3f7c:	d017      	beq.n	3fae <__lesf2+0x4a>
    3f7e:	2cff      	cmp	r4, #255	; 0xff
    3f80:	d019      	beq.n	3fb6 <__lesf2+0x52>
    3f82:	2a00      	cmp	r2, #0
    3f84:	d10b      	bne.n	3f9e <__lesf2+0x3a>
    3f86:	4270      	negs	r0, r6
    3f88:	4170      	adcs	r0, r6
    3f8a:	2c00      	cmp	r4, #0
    3f8c:	d017      	beq.n	3fbe <__lesf2+0x5a>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d007      	beq.n	3fa2 <__lesf2+0x3e>
    3f92:	4248      	negs	r0, r1
    3f94:	4141      	adcs	r1, r0
    3f96:	2001      	movs	r0, #1
    3f98:	4249      	negs	r1, r1
    3f9a:	4308      	orrs	r0, r1
    3f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9e:	2c00      	cmp	r4, #0
    3fa0:	d013      	beq.n	3fca <__lesf2+0x66>
    3fa2:	428b      	cmp	r3, r1
    3fa4:	d014      	beq.n	3fd0 <__lesf2+0x6c>
    3fa6:	4258      	negs	r0, r3
    3fa8:	2301      	movs	r3, #1
    3faa:	4318      	orrs	r0, r3
    3fac:	e7f6      	b.n	3f9c <__lesf2+0x38>
    3fae:	2002      	movs	r0, #2
    3fb0:	2e00      	cmp	r6, #0
    3fb2:	d1f3      	bne.n	3f9c <__lesf2+0x38>
    3fb4:	e7e3      	b.n	3f7e <__lesf2+0x1a>
    3fb6:	2002      	movs	r0, #2
    3fb8:	2d00      	cmp	r5, #0
    3fba:	d1ef      	bne.n	3f9c <__lesf2+0x38>
    3fbc:	e7e1      	b.n	3f82 <__lesf2+0x1e>
    3fbe:	2d00      	cmp	r5, #0
    3fc0:	d1e5      	bne.n	3f8e <__lesf2+0x2a>
    3fc2:	2000      	movs	r0, #0
    3fc4:	2e00      	cmp	r6, #0
    3fc6:	d0e9      	beq.n	3f9c <__lesf2+0x38>
    3fc8:	e7ed      	b.n	3fa6 <__lesf2+0x42>
    3fca:	2d00      	cmp	r5, #0
    3fcc:	d1e9      	bne.n	3fa2 <__lesf2+0x3e>
    3fce:	e7ea      	b.n	3fa6 <__lesf2+0x42>
    3fd0:	42a2      	cmp	r2, r4
    3fd2:	dce8      	bgt.n	3fa6 <__lesf2+0x42>
    3fd4:	db04      	blt.n	3fe0 <__lesf2+0x7c>
    3fd6:	42ae      	cmp	r6, r5
    3fd8:	d8e5      	bhi.n	3fa6 <__lesf2+0x42>
    3fda:	2000      	movs	r0, #0
    3fdc:	42ae      	cmp	r6, r5
    3fde:	d2dd      	bcs.n	3f9c <__lesf2+0x38>
    3fe0:	4258      	negs	r0, r3
    3fe2:	4143      	adcs	r3, r0
    3fe4:	2001      	movs	r0, #1
    3fe6:	425b      	negs	r3, r3
    3fe8:	4318      	orrs	r0, r3
    3fea:	e7d7      	b.n	3f9c <__lesf2+0x38>

00003fec <__aeabi_fmul>:
    3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fee:	4657      	mov	r7, sl
    3ff0:	464e      	mov	r6, r9
    3ff2:	4645      	mov	r5, r8
    3ff4:	0043      	lsls	r3, r0, #1
    3ff6:	b4e0      	push	{r5, r6, r7}
    3ff8:	0246      	lsls	r6, r0, #9
    3ffa:	4688      	mov	r8, r1
    3ffc:	0a76      	lsrs	r6, r6, #9
    3ffe:	0e1f      	lsrs	r7, r3, #24
    4000:	0fc4      	lsrs	r4, r0, #31
    4002:	2f00      	cmp	r7, #0
    4004:	d047      	beq.n	4096 <__aeabi_fmul+0xaa>
    4006:	2fff      	cmp	r7, #255	; 0xff
    4008:	d025      	beq.n	4056 <__aeabi_fmul+0x6a>
    400a:	2300      	movs	r3, #0
    400c:	2580      	movs	r5, #128	; 0x80
    400e:	469a      	mov	sl, r3
    4010:	4699      	mov	r9, r3
    4012:	00f6      	lsls	r6, r6, #3
    4014:	04ed      	lsls	r5, r5, #19
    4016:	432e      	orrs	r6, r5
    4018:	3f7f      	subs	r7, #127	; 0x7f
    401a:	4643      	mov	r3, r8
    401c:	4642      	mov	r2, r8
    401e:	025d      	lsls	r5, r3, #9
    4020:	0fd2      	lsrs	r2, r2, #31
    4022:	005b      	lsls	r3, r3, #1
    4024:	0a6d      	lsrs	r5, r5, #9
    4026:	0e1b      	lsrs	r3, r3, #24
    4028:	4690      	mov	r8, r2
    402a:	d040      	beq.n	40ae <__aeabi_fmul+0xc2>
    402c:	2bff      	cmp	r3, #255	; 0xff
    402e:	d039      	beq.n	40a4 <__aeabi_fmul+0xb8>
    4030:	2280      	movs	r2, #128	; 0x80
    4032:	2000      	movs	r0, #0
    4034:	00ed      	lsls	r5, r5, #3
    4036:	04d2      	lsls	r2, r2, #19
    4038:	4315      	orrs	r5, r2
    403a:	3b7f      	subs	r3, #127	; 0x7f
    403c:	18fb      	adds	r3, r7, r3
    403e:	4642      	mov	r2, r8
    4040:	4657      	mov	r7, sl
    4042:	1c59      	adds	r1, r3, #1
    4044:	4062      	eors	r2, r4
    4046:	468c      	mov	ip, r1
    4048:	4307      	orrs	r7, r0
    404a:	2f0f      	cmp	r7, #15
    404c:	d85c      	bhi.n	4108 <__aeabi_fmul+0x11c>
    404e:	496f      	ldr	r1, [pc, #444]	; (420c <__aeabi_fmul+0x220>)
    4050:	00bf      	lsls	r7, r7, #2
    4052:	59c9      	ldr	r1, [r1, r7]
    4054:	468f      	mov	pc, r1
    4056:	2e00      	cmp	r6, #0
    4058:	d145      	bne.n	40e6 <__aeabi_fmul+0xfa>
    405a:	2308      	movs	r3, #8
    405c:	469a      	mov	sl, r3
    405e:	3b06      	subs	r3, #6
    4060:	4699      	mov	r9, r3
    4062:	e7da      	b.n	401a <__aeabi_fmul+0x2e>
    4064:	4642      	mov	r2, r8
    4066:	2802      	cmp	r0, #2
    4068:	d02d      	beq.n	40c6 <__aeabi_fmul+0xda>
    406a:	2803      	cmp	r0, #3
    406c:	d100      	bne.n	4070 <__aeabi_fmul+0x84>
    406e:	e0c3      	b.n	41f8 <__aeabi_fmul+0x20c>
    4070:	2801      	cmp	r0, #1
    4072:	d000      	beq.n	4076 <__aeabi_fmul+0x8a>
    4074:	e0a2      	b.n	41bc <__aeabi_fmul+0x1d0>
    4076:	2500      	movs	r5, #0
    4078:	2600      	movs	r6, #0
    407a:	4002      	ands	r2, r0
    407c:	b2d4      	uxtb	r4, r2
    407e:	0276      	lsls	r6, r6, #9
    4080:	05ed      	lsls	r5, r5, #23
    4082:	0a76      	lsrs	r6, r6, #9
    4084:	432e      	orrs	r6, r5
    4086:	07e4      	lsls	r4, r4, #31
    4088:	4326      	orrs	r6, r4
    408a:	0030      	movs	r0, r6
    408c:	bc1c      	pop	{r2, r3, r4}
    408e:	4690      	mov	r8, r2
    4090:	4699      	mov	r9, r3
    4092:	46a2      	mov	sl, r4
    4094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4096:	2e00      	cmp	r6, #0
    4098:	d11a      	bne.n	40d0 <__aeabi_fmul+0xe4>
    409a:	2304      	movs	r3, #4
    409c:	469a      	mov	sl, r3
    409e:	3b03      	subs	r3, #3
    40a0:	4699      	mov	r9, r3
    40a2:	e7ba      	b.n	401a <__aeabi_fmul+0x2e>
    40a4:	002a      	movs	r2, r5
    40a6:	1e51      	subs	r1, r2, #1
    40a8:	418a      	sbcs	r2, r1
    40aa:	1c90      	adds	r0, r2, #2
    40ac:	e7c6      	b.n	403c <__aeabi_fmul+0x50>
    40ae:	2001      	movs	r0, #1
    40b0:	2d00      	cmp	r5, #0
    40b2:	d0c3      	beq.n	403c <__aeabi_fmul+0x50>
    40b4:	0028      	movs	r0, r5
    40b6:	f002 f9f7 	bl	64a8 <__clzsi2>
    40ba:	1f43      	subs	r3, r0, #5
    40bc:	3076      	adds	r0, #118	; 0x76
    40be:	409d      	lsls	r5, r3
    40c0:	4243      	negs	r3, r0
    40c2:	2000      	movs	r0, #0
    40c4:	e7ba      	b.n	403c <__aeabi_fmul+0x50>
    40c6:	2401      	movs	r4, #1
    40c8:	25ff      	movs	r5, #255	; 0xff
    40ca:	4014      	ands	r4, r2
    40cc:	2600      	movs	r6, #0
    40ce:	e7d6      	b.n	407e <__aeabi_fmul+0x92>
    40d0:	0030      	movs	r0, r6
    40d2:	f002 f9e9 	bl	64a8 <__clzsi2>
    40d6:	1f43      	subs	r3, r0, #5
    40d8:	409e      	lsls	r6, r3
    40da:	2300      	movs	r3, #0
    40dc:	3076      	adds	r0, #118	; 0x76
    40de:	4247      	negs	r7, r0
    40e0:	469a      	mov	sl, r3
    40e2:	4699      	mov	r9, r3
    40e4:	e799      	b.n	401a <__aeabi_fmul+0x2e>
    40e6:	230c      	movs	r3, #12
    40e8:	469a      	mov	sl, r3
    40ea:	3b09      	subs	r3, #9
    40ec:	4699      	mov	r9, r3
    40ee:	e794      	b.n	401a <__aeabi_fmul+0x2e>
    40f0:	2680      	movs	r6, #128	; 0x80
    40f2:	2400      	movs	r4, #0
    40f4:	03f6      	lsls	r6, r6, #15
    40f6:	25ff      	movs	r5, #255	; 0xff
    40f8:	e7c1      	b.n	407e <__aeabi_fmul+0x92>
    40fa:	0035      	movs	r5, r6
    40fc:	4648      	mov	r0, r9
    40fe:	e7b2      	b.n	4066 <__aeabi_fmul+0x7a>
    4100:	0035      	movs	r5, r6
    4102:	0022      	movs	r2, r4
    4104:	4648      	mov	r0, r9
    4106:	e7ae      	b.n	4066 <__aeabi_fmul+0x7a>
    4108:	0429      	lsls	r1, r5, #16
    410a:	0c09      	lsrs	r1, r1, #16
    410c:	0008      	movs	r0, r1
    410e:	0c37      	lsrs	r7, r6, #16
    4110:	0436      	lsls	r6, r6, #16
    4112:	0c36      	lsrs	r6, r6, #16
    4114:	0c2c      	lsrs	r4, r5, #16
    4116:	4379      	muls	r1, r7
    4118:	4370      	muls	r0, r6
    411a:	4367      	muls	r7, r4
    411c:	4374      	muls	r4, r6
    411e:	0c06      	lsrs	r6, r0, #16
    4120:	1864      	adds	r4, r4, r1
    4122:	1936      	adds	r6, r6, r4
    4124:	42b1      	cmp	r1, r6
    4126:	d903      	bls.n	4130 <__aeabi_fmul+0x144>
    4128:	2180      	movs	r1, #128	; 0x80
    412a:	0249      	lsls	r1, r1, #9
    412c:	4688      	mov	r8, r1
    412e:	4447      	add	r7, r8
    4130:	0400      	lsls	r0, r0, #16
    4132:	0c00      	lsrs	r0, r0, #16
    4134:	0431      	lsls	r1, r6, #16
    4136:	1809      	adds	r1, r1, r0
    4138:	018d      	lsls	r5, r1, #6
    413a:	1e68      	subs	r0, r5, #1
    413c:	4185      	sbcs	r5, r0
    413e:	0e89      	lsrs	r1, r1, #26
    4140:	4329      	orrs	r1, r5
    4142:	0c35      	lsrs	r5, r6, #16
    4144:	19ed      	adds	r5, r5, r7
    4146:	01ad      	lsls	r5, r5, #6
    4148:	430d      	orrs	r5, r1
    414a:	0129      	lsls	r1, r5, #4
    414c:	d504      	bpl.n	4158 <__aeabi_fmul+0x16c>
    414e:	2301      	movs	r3, #1
    4150:	0869      	lsrs	r1, r5, #1
    4152:	401d      	ands	r5, r3
    4154:	4663      	mov	r3, ip
    4156:	430d      	orrs	r5, r1
    4158:	0019      	movs	r1, r3
    415a:	317f      	adds	r1, #127	; 0x7f
    415c:	2900      	cmp	r1, #0
    415e:	dd25      	ble.n	41ac <__aeabi_fmul+0x1c0>
    4160:	0768      	lsls	r0, r5, #29
    4162:	d004      	beq.n	416e <__aeabi_fmul+0x182>
    4164:	200f      	movs	r0, #15
    4166:	4028      	ands	r0, r5
    4168:	2804      	cmp	r0, #4
    416a:	d000      	beq.n	416e <__aeabi_fmul+0x182>
    416c:	3504      	adds	r5, #4
    416e:	0128      	lsls	r0, r5, #4
    4170:	d503      	bpl.n	417a <__aeabi_fmul+0x18e>
    4172:	4927      	ldr	r1, [pc, #156]	; (4210 <__aeabi_fmul+0x224>)
    4174:	3380      	adds	r3, #128	; 0x80
    4176:	400d      	ands	r5, r1
    4178:	0019      	movs	r1, r3
    417a:	29fe      	cmp	r1, #254	; 0xfe
    417c:	dca3      	bgt.n	40c6 <__aeabi_fmul+0xda>
    417e:	2401      	movs	r4, #1
    4180:	01ad      	lsls	r5, r5, #6
    4182:	0a6e      	lsrs	r6, r5, #9
    4184:	4014      	ands	r4, r2
    4186:	b2cd      	uxtb	r5, r1
    4188:	e779      	b.n	407e <__aeabi_fmul+0x92>
    418a:	2080      	movs	r0, #128	; 0x80
    418c:	03c0      	lsls	r0, r0, #15
    418e:	4206      	tst	r6, r0
    4190:	d007      	beq.n	41a2 <__aeabi_fmul+0x1b6>
    4192:	4205      	tst	r5, r0
    4194:	d105      	bne.n	41a2 <__aeabi_fmul+0x1b6>
    4196:	4328      	orrs	r0, r5
    4198:	0246      	lsls	r6, r0, #9
    419a:	0a76      	lsrs	r6, r6, #9
    419c:	4644      	mov	r4, r8
    419e:	25ff      	movs	r5, #255	; 0xff
    41a0:	e76d      	b.n	407e <__aeabi_fmul+0x92>
    41a2:	4306      	orrs	r6, r0
    41a4:	0276      	lsls	r6, r6, #9
    41a6:	0a76      	lsrs	r6, r6, #9
    41a8:	25ff      	movs	r5, #255	; 0xff
    41aa:	e768      	b.n	407e <__aeabi_fmul+0x92>
    41ac:	2401      	movs	r4, #1
    41ae:	1a61      	subs	r1, r4, r1
    41b0:	291b      	cmp	r1, #27
    41b2:	dd05      	ble.n	41c0 <__aeabi_fmul+0x1d4>
    41b4:	4014      	ands	r4, r2
    41b6:	2500      	movs	r5, #0
    41b8:	2600      	movs	r6, #0
    41ba:	e760      	b.n	407e <__aeabi_fmul+0x92>
    41bc:	4663      	mov	r3, ip
    41be:	e7cb      	b.n	4158 <__aeabi_fmul+0x16c>
    41c0:	002e      	movs	r6, r5
    41c2:	2320      	movs	r3, #32
    41c4:	40ce      	lsrs	r6, r1
    41c6:	1a59      	subs	r1, r3, r1
    41c8:	408d      	lsls	r5, r1
    41ca:	1e6b      	subs	r3, r5, #1
    41cc:	419d      	sbcs	r5, r3
    41ce:	432e      	orrs	r6, r5
    41d0:	0773      	lsls	r3, r6, #29
    41d2:	d004      	beq.n	41de <__aeabi_fmul+0x1f2>
    41d4:	230f      	movs	r3, #15
    41d6:	4033      	ands	r3, r6
    41d8:	2b04      	cmp	r3, #4
    41da:	d000      	beq.n	41de <__aeabi_fmul+0x1f2>
    41dc:	3604      	adds	r6, #4
    41de:	0173      	lsls	r3, r6, #5
    41e0:	d504      	bpl.n	41ec <__aeabi_fmul+0x200>
    41e2:	2401      	movs	r4, #1
    41e4:	2501      	movs	r5, #1
    41e6:	4014      	ands	r4, r2
    41e8:	2600      	movs	r6, #0
    41ea:	e748      	b.n	407e <__aeabi_fmul+0x92>
    41ec:	2401      	movs	r4, #1
    41ee:	01b6      	lsls	r6, r6, #6
    41f0:	0a76      	lsrs	r6, r6, #9
    41f2:	4014      	ands	r4, r2
    41f4:	2500      	movs	r5, #0
    41f6:	e742      	b.n	407e <__aeabi_fmul+0x92>
    41f8:	2680      	movs	r6, #128	; 0x80
    41fa:	2401      	movs	r4, #1
    41fc:	03f6      	lsls	r6, r6, #15
    41fe:	432e      	orrs	r6, r5
    4200:	0276      	lsls	r6, r6, #9
    4202:	0a76      	lsrs	r6, r6, #9
    4204:	4014      	ands	r4, r2
    4206:	25ff      	movs	r5, #255	; 0xff
    4208:	e739      	b.n	407e <__aeabi_fmul+0x92>
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	00006878 	.word	0x00006878
    4210:	f7ffffff 	.word	0xf7ffffff

00004214 <__aeabi_fsub>:
    4214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4216:	024a      	lsls	r2, r1, #9
    4218:	004e      	lsls	r6, r1, #1
    421a:	0243      	lsls	r3, r0, #9
    421c:	0044      	lsls	r4, r0, #1
    421e:	0e24      	lsrs	r4, r4, #24
    4220:	0fc5      	lsrs	r5, r0, #31
    4222:	099b      	lsrs	r3, r3, #6
    4224:	0e36      	lsrs	r6, r6, #24
    4226:	0fc9      	lsrs	r1, r1, #31
    4228:	0992      	lsrs	r2, r2, #6
    422a:	2eff      	cmp	r6, #255	; 0xff
    422c:	d100      	bne.n	4230 <__aeabi_fsub+0x1c>
    422e:	e083      	b.n	4338 <__aeabi_fsub+0x124>
    4230:	2001      	movs	r0, #1
    4232:	4041      	eors	r1, r0
    4234:	1ba0      	subs	r0, r4, r6
    4236:	42a9      	cmp	r1, r5
    4238:	d05c      	beq.n	42f4 <__aeabi_fsub+0xe0>
    423a:	2800      	cmp	r0, #0
    423c:	dc00      	bgt.n	4240 <__aeabi_fsub+0x2c>
    423e:	e095      	b.n	436c <__aeabi_fsub+0x158>
    4240:	2e00      	cmp	r6, #0
    4242:	d11c      	bne.n	427e <__aeabi_fsub+0x6a>
    4244:	2a00      	cmp	r2, #0
    4246:	d000      	beq.n	424a <__aeabi_fsub+0x36>
    4248:	e081      	b.n	434e <__aeabi_fsub+0x13a>
    424a:	075a      	lsls	r2, r3, #29
    424c:	d004      	beq.n	4258 <__aeabi_fsub+0x44>
    424e:	220f      	movs	r2, #15
    4250:	401a      	ands	r2, r3
    4252:	2a04      	cmp	r2, #4
    4254:	d000      	beq.n	4258 <__aeabi_fsub+0x44>
    4256:	3304      	adds	r3, #4
    4258:	015a      	lsls	r2, r3, #5
    425a:	d53b      	bpl.n	42d4 <__aeabi_fsub+0xc0>
    425c:	3401      	adds	r4, #1
    425e:	2cff      	cmp	r4, #255	; 0xff
    4260:	d100      	bne.n	4264 <__aeabi_fsub+0x50>
    4262:	e091      	b.n	4388 <__aeabi_fsub+0x174>
    4264:	2001      	movs	r0, #1
    4266:	019b      	lsls	r3, r3, #6
    4268:	0a5b      	lsrs	r3, r3, #9
    426a:	b2e4      	uxtb	r4, r4
    426c:	4005      	ands	r5, r0
    426e:	025b      	lsls	r3, r3, #9
    4270:	05e4      	lsls	r4, r4, #23
    4272:	0a5b      	lsrs	r3, r3, #9
    4274:	07ed      	lsls	r5, r5, #31
    4276:	4323      	orrs	r3, r4
    4278:	432b      	orrs	r3, r5
    427a:	0018      	movs	r0, r3
    427c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    427e:	2cff      	cmp	r4, #255	; 0xff
    4280:	d0e3      	beq.n	424a <__aeabi_fsub+0x36>
    4282:	2180      	movs	r1, #128	; 0x80
    4284:	04c9      	lsls	r1, r1, #19
    4286:	430a      	orrs	r2, r1
    4288:	281b      	cmp	r0, #27
    428a:	dd00      	ble.n	428e <__aeabi_fsub+0x7a>
    428c:	e090      	b.n	43b0 <__aeabi_fsub+0x19c>
    428e:	0016      	movs	r6, r2
    4290:	2120      	movs	r1, #32
    4292:	40c6      	lsrs	r6, r0
    4294:	1a08      	subs	r0, r1, r0
    4296:	4082      	lsls	r2, r0
    4298:	1e51      	subs	r1, r2, #1
    429a:	418a      	sbcs	r2, r1
    429c:	4332      	orrs	r2, r6
    429e:	1a9b      	subs	r3, r3, r2
    42a0:	015a      	lsls	r2, r3, #5
    42a2:	d515      	bpl.n	42d0 <__aeabi_fsub+0xbc>
    42a4:	019b      	lsls	r3, r3, #6
    42a6:	099e      	lsrs	r6, r3, #6
    42a8:	0030      	movs	r0, r6
    42aa:	f002 f8fd 	bl	64a8 <__clzsi2>
    42ae:	3805      	subs	r0, #5
    42b0:	4086      	lsls	r6, r0
    42b2:	4284      	cmp	r4, r0
    42b4:	dc6c      	bgt.n	4390 <__aeabi_fsub+0x17c>
    42b6:	1b04      	subs	r4, r0, r4
    42b8:	0033      	movs	r3, r6
    42ba:	2020      	movs	r0, #32
    42bc:	3401      	adds	r4, #1
    42be:	40e3      	lsrs	r3, r4
    42c0:	1b04      	subs	r4, r0, r4
    42c2:	40a6      	lsls	r6, r4
    42c4:	1e72      	subs	r2, r6, #1
    42c6:	4196      	sbcs	r6, r2
    42c8:	2400      	movs	r4, #0
    42ca:	4333      	orrs	r3, r6
    42cc:	e7bd      	b.n	424a <__aeabi_fsub+0x36>
    42ce:	000d      	movs	r5, r1
    42d0:	075a      	lsls	r2, r3, #29
    42d2:	d1bc      	bne.n	424e <__aeabi_fsub+0x3a>
    42d4:	08df      	lsrs	r7, r3, #3
    42d6:	2301      	movs	r3, #1
    42d8:	401d      	ands	r5, r3
    42da:	2cff      	cmp	r4, #255	; 0xff
    42dc:	d133      	bne.n	4346 <__aeabi_fsub+0x132>
    42de:	2f00      	cmp	r7, #0
    42e0:	d100      	bne.n	42e4 <__aeabi_fsub+0xd0>
    42e2:	e090      	b.n	4406 <__aeabi_fsub+0x1f2>
    42e4:	2280      	movs	r2, #128	; 0x80
    42e6:	03d2      	lsls	r2, r2, #15
    42e8:	0013      	movs	r3, r2
    42ea:	433b      	orrs	r3, r7
    42ec:	025b      	lsls	r3, r3, #9
    42ee:	0a5b      	lsrs	r3, r3, #9
    42f0:	24ff      	movs	r4, #255	; 0xff
    42f2:	e7bc      	b.n	426e <__aeabi_fsub+0x5a>
    42f4:	2800      	cmp	r0, #0
    42f6:	dd4f      	ble.n	4398 <__aeabi_fsub+0x184>
    42f8:	2e00      	cmp	r6, #0
    42fa:	d02e      	beq.n	435a <__aeabi_fsub+0x146>
    42fc:	2cff      	cmp	r4, #255	; 0xff
    42fe:	d0a4      	beq.n	424a <__aeabi_fsub+0x36>
    4300:	2580      	movs	r5, #128	; 0x80
    4302:	04ed      	lsls	r5, r5, #19
    4304:	432a      	orrs	r2, r5
    4306:	281b      	cmp	r0, #27
    4308:	dd00      	ble.n	430c <__aeabi_fsub+0xf8>
    430a:	e097      	b.n	443c <__aeabi_fsub+0x228>
    430c:	0016      	movs	r6, r2
    430e:	2520      	movs	r5, #32
    4310:	40c6      	lsrs	r6, r0
    4312:	1a28      	subs	r0, r5, r0
    4314:	4082      	lsls	r2, r0
    4316:	1e50      	subs	r0, r2, #1
    4318:	4182      	sbcs	r2, r0
    431a:	4332      	orrs	r2, r6
    431c:	189b      	adds	r3, r3, r2
    431e:	015a      	lsls	r2, r3, #5
    4320:	d5d5      	bpl.n	42ce <__aeabi_fsub+0xba>
    4322:	3401      	adds	r4, #1
    4324:	2cff      	cmp	r4, #255	; 0xff
    4326:	d06d      	beq.n	4404 <__aeabi_fsub+0x1f0>
    4328:	2201      	movs	r2, #1
    432a:	487b      	ldr	r0, [pc, #492]	; (4518 <__aeabi_fsub+0x304>)
    432c:	401a      	ands	r2, r3
    432e:	085b      	lsrs	r3, r3, #1
    4330:	4003      	ands	r3, r0
    4332:	4313      	orrs	r3, r2
    4334:	000d      	movs	r5, r1
    4336:	e788      	b.n	424a <__aeabi_fsub+0x36>
    4338:	2a00      	cmp	r2, #0
    433a:	d000      	beq.n	433e <__aeabi_fsub+0x12a>
    433c:	e77a      	b.n	4234 <__aeabi_fsub+0x20>
    433e:	e777      	b.n	4230 <__aeabi_fsub+0x1c>
    4340:	1e03      	subs	r3, r0, #0
    4342:	d1c5      	bne.n	42d0 <__aeabi_fsub+0xbc>
    4344:	2500      	movs	r5, #0
    4346:	027b      	lsls	r3, r7, #9
    4348:	0a5b      	lsrs	r3, r3, #9
    434a:	b2e4      	uxtb	r4, r4
    434c:	e78f      	b.n	426e <__aeabi_fsub+0x5a>
    434e:	3801      	subs	r0, #1
    4350:	2800      	cmp	r0, #0
    4352:	d0a4      	beq.n	429e <__aeabi_fsub+0x8a>
    4354:	2cff      	cmp	r4, #255	; 0xff
    4356:	d197      	bne.n	4288 <__aeabi_fsub+0x74>
    4358:	e777      	b.n	424a <__aeabi_fsub+0x36>
    435a:	2a00      	cmp	r2, #0
    435c:	d100      	bne.n	4360 <__aeabi_fsub+0x14c>
    435e:	e774      	b.n	424a <__aeabi_fsub+0x36>
    4360:	3801      	subs	r0, #1
    4362:	2800      	cmp	r0, #0
    4364:	d0da      	beq.n	431c <__aeabi_fsub+0x108>
    4366:	2cff      	cmp	r4, #255	; 0xff
    4368:	d1cd      	bne.n	4306 <__aeabi_fsub+0xf2>
    436a:	e76e      	b.n	424a <__aeabi_fsub+0x36>
    436c:	2800      	cmp	r0, #0
    436e:	d121      	bne.n	43b4 <__aeabi_fsub+0x1a0>
    4370:	1c60      	adds	r0, r4, #1
    4372:	b2c0      	uxtb	r0, r0
    4374:	2801      	cmp	r0, #1
    4376:	dd58      	ble.n	442a <__aeabi_fsub+0x216>
    4378:	2780      	movs	r7, #128	; 0x80
    437a:	1a9e      	subs	r6, r3, r2
    437c:	04ff      	lsls	r7, r7, #19
    437e:	4037      	ands	r7, r6
    4380:	d02f      	beq.n	43e2 <__aeabi_fsub+0x1ce>
    4382:	1ad6      	subs	r6, r2, r3
    4384:	000d      	movs	r5, r1
    4386:	e78f      	b.n	42a8 <__aeabi_fsub+0x94>
    4388:	2301      	movs	r3, #1
    438a:	401d      	ands	r5, r3
    438c:	2300      	movs	r3, #0
    438e:	e76e      	b.n	426e <__aeabi_fsub+0x5a>
    4390:	4b62      	ldr	r3, [pc, #392]	; (451c <__aeabi_fsub+0x308>)
    4392:	1a24      	subs	r4, r4, r0
    4394:	4033      	ands	r3, r6
    4396:	e758      	b.n	424a <__aeabi_fsub+0x36>
    4398:	2800      	cmp	r0, #0
    439a:	d151      	bne.n	4440 <__aeabi_fsub+0x22c>
    439c:	1c60      	adds	r0, r4, #1
    439e:	b2c6      	uxtb	r6, r0
    43a0:	2e01      	cmp	r6, #1
    43a2:	dd33      	ble.n	440c <__aeabi_fsub+0x1f8>
    43a4:	28ff      	cmp	r0, #255	; 0xff
    43a6:	d02d      	beq.n	4404 <__aeabi_fsub+0x1f0>
    43a8:	189b      	adds	r3, r3, r2
    43aa:	085b      	lsrs	r3, r3, #1
    43ac:	0004      	movs	r4, r0
    43ae:	e74c      	b.n	424a <__aeabi_fsub+0x36>
    43b0:	2201      	movs	r2, #1
    43b2:	e774      	b.n	429e <__aeabi_fsub+0x8a>
    43b4:	2c00      	cmp	r4, #0
    43b6:	d01a      	beq.n	43ee <__aeabi_fsub+0x1da>
    43b8:	2eff      	cmp	r6, #255	; 0xff
    43ba:	d01f      	beq.n	43fc <__aeabi_fsub+0x1e8>
    43bc:	2480      	movs	r4, #128	; 0x80
    43be:	04e4      	lsls	r4, r4, #19
    43c0:	4240      	negs	r0, r0
    43c2:	4323      	orrs	r3, r4
    43c4:	281b      	cmp	r0, #27
    43c6:	dd00      	ble.n	43ca <__aeabi_fsub+0x1b6>
    43c8:	e096      	b.n	44f8 <__aeabi_fsub+0x2e4>
    43ca:	001d      	movs	r5, r3
    43cc:	2420      	movs	r4, #32
    43ce:	40c5      	lsrs	r5, r0
    43d0:	1a20      	subs	r0, r4, r0
    43d2:	4083      	lsls	r3, r0
    43d4:	1e58      	subs	r0, r3, #1
    43d6:	4183      	sbcs	r3, r0
    43d8:	432b      	orrs	r3, r5
    43da:	1ad3      	subs	r3, r2, r3
    43dc:	0034      	movs	r4, r6
    43de:	000d      	movs	r5, r1
    43e0:	e75e      	b.n	42a0 <__aeabi_fsub+0x8c>
    43e2:	2e00      	cmp	r6, #0
    43e4:	d000      	beq.n	43e8 <__aeabi_fsub+0x1d4>
    43e6:	e75f      	b.n	42a8 <__aeabi_fsub+0x94>
    43e8:	2500      	movs	r5, #0
    43ea:	2400      	movs	r4, #0
    43ec:	e7ab      	b.n	4346 <__aeabi_fsub+0x132>
    43ee:	2b00      	cmp	r3, #0
    43f0:	d044      	beq.n	447c <__aeabi_fsub+0x268>
    43f2:	43c0      	mvns	r0, r0
    43f4:	2800      	cmp	r0, #0
    43f6:	d0f0      	beq.n	43da <__aeabi_fsub+0x1c6>
    43f8:	2eff      	cmp	r6, #255	; 0xff
    43fa:	d1e3      	bne.n	43c4 <__aeabi_fsub+0x1b0>
    43fc:	0013      	movs	r3, r2
    43fe:	24ff      	movs	r4, #255	; 0xff
    4400:	000d      	movs	r5, r1
    4402:	e722      	b.n	424a <__aeabi_fsub+0x36>
    4404:	000d      	movs	r5, r1
    4406:	24ff      	movs	r4, #255	; 0xff
    4408:	2300      	movs	r3, #0
    440a:	e730      	b.n	426e <__aeabi_fsub+0x5a>
    440c:	2c00      	cmp	r4, #0
    440e:	d15d      	bne.n	44cc <__aeabi_fsub+0x2b8>
    4410:	2b00      	cmp	r3, #0
    4412:	d07d      	beq.n	4510 <__aeabi_fsub+0x2fc>
    4414:	2a00      	cmp	r2, #0
    4416:	d100      	bne.n	441a <__aeabi_fsub+0x206>
    4418:	e717      	b.n	424a <__aeabi_fsub+0x36>
    441a:	189b      	adds	r3, r3, r2
    441c:	015a      	lsls	r2, r3, #5
    441e:	d400      	bmi.n	4422 <__aeabi_fsub+0x20e>
    4420:	e756      	b.n	42d0 <__aeabi_fsub+0xbc>
    4422:	4a3e      	ldr	r2, [pc, #248]	; (451c <__aeabi_fsub+0x308>)
    4424:	0004      	movs	r4, r0
    4426:	4013      	ands	r3, r2
    4428:	e70f      	b.n	424a <__aeabi_fsub+0x36>
    442a:	2c00      	cmp	r4, #0
    442c:	d11e      	bne.n	446c <__aeabi_fsub+0x258>
    442e:	2b00      	cmp	r3, #0
    4430:	d12f      	bne.n	4492 <__aeabi_fsub+0x27e>
    4432:	2a00      	cmp	r2, #0
    4434:	d065      	beq.n	4502 <__aeabi_fsub+0x2ee>
    4436:	0013      	movs	r3, r2
    4438:	000d      	movs	r5, r1
    443a:	e706      	b.n	424a <__aeabi_fsub+0x36>
    443c:	2201      	movs	r2, #1
    443e:	e76d      	b.n	431c <__aeabi_fsub+0x108>
    4440:	2c00      	cmp	r4, #0
    4442:	d11f      	bne.n	4484 <__aeabi_fsub+0x270>
    4444:	2b00      	cmp	r3, #0
    4446:	d059      	beq.n	44fc <__aeabi_fsub+0x2e8>
    4448:	43c0      	mvns	r0, r0
    444a:	2800      	cmp	r0, #0
    444c:	d00b      	beq.n	4466 <__aeabi_fsub+0x252>
    444e:	2eff      	cmp	r6, #255	; 0xff
    4450:	d04f      	beq.n	44f2 <__aeabi_fsub+0x2de>
    4452:	281b      	cmp	r0, #27
    4454:	dc5e      	bgt.n	4514 <__aeabi_fsub+0x300>
    4456:	001d      	movs	r5, r3
    4458:	2420      	movs	r4, #32
    445a:	40c5      	lsrs	r5, r0
    445c:	1a20      	subs	r0, r4, r0
    445e:	4083      	lsls	r3, r0
    4460:	1e58      	subs	r0, r3, #1
    4462:	4183      	sbcs	r3, r0
    4464:	432b      	orrs	r3, r5
    4466:	189b      	adds	r3, r3, r2
    4468:	0034      	movs	r4, r6
    446a:	e758      	b.n	431e <__aeabi_fsub+0x10a>
    446c:	2b00      	cmp	r3, #0
    446e:	d11c      	bne.n	44aa <__aeabi_fsub+0x296>
    4470:	2a00      	cmp	r2, #0
    4472:	d049      	beq.n	4508 <__aeabi_fsub+0x2f4>
    4474:	0013      	movs	r3, r2
    4476:	000d      	movs	r5, r1
    4478:	24ff      	movs	r4, #255	; 0xff
    447a:	e6e6      	b.n	424a <__aeabi_fsub+0x36>
    447c:	0013      	movs	r3, r2
    447e:	0034      	movs	r4, r6
    4480:	000d      	movs	r5, r1
    4482:	e6e2      	b.n	424a <__aeabi_fsub+0x36>
    4484:	2eff      	cmp	r6, #255	; 0xff
    4486:	d034      	beq.n	44f2 <__aeabi_fsub+0x2de>
    4488:	2480      	movs	r4, #128	; 0x80
    448a:	04e4      	lsls	r4, r4, #19
    448c:	4240      	negs	r0, r0
    448e:	4323      	orrs	r3, r4
    4490:	e7df      	b.n	4452 <__aeabi_fsub+0x23e>
    4492:	2a00      	cmp	r2, #0
    4494:	d100      	bne.n	4498 <__aeabi_fsub+0x284>
    4496:	e6d8      	b.n	424a <__aeabi_fsub+0x36>
    4498:	2780      	movs	r7, #128	; 0x80
    449a:	1a98      	subs	r0, r3, r2
    449c:	04ff      	lsls	r7, r7, #19
    449e:	4007      	ands	r7, r0
    44a0:	d100      	bne.n	44a4 <__aeabi_fsub+0x290>
    44a2:	e74d      	b.n	4340 <__aeabi_fsub+0x12c>
    44a4:	1ad3      	subs	r3, r2, r3
    44a6:	000d      	movs	r5, r1
    44a8:	e6cf      	b.n	424a <__aeabi_fsub+0x36>
    44aa:	24ff      	movs	r4, #255	; 0xff
    44ac:	2a00      	cmp	r2, #0
    44ae:	d100      	bne.n	44b2 <__aeabi_fsub+0x29e>
    44b0:	e6cb      	b.n	424a <__aeabi_fsub+0x36>
    44b2:	2080      	movs	r0, #128	; 0x80
    44b4:	08db      	lsrs	r3, r3, #3
    44b6:	03c0      	lsls	r0, r0, #15
    44b8:	4203      	tst	r3, r0
    44ba:	d004      	beq.n	44c6 <__aeabi_fsub+0x2b2>
    44bc:	08d2      	lsrs	r2, r2, #3
    44be:	4202      	tst	r2, r0
    44c0:	d101      	bne.n	44c6 <__aeabi_fsub+0x2b2>
    44c2:	0013      	movs	r3, r2
    44c4:	000d      	movs	r5, r1
    44c6:	00db      	lsls	r3, r3, #3
    44c8:	24ff      	movs	r4, #255	; 0xff
    44ca:	e6be      	b.n	424a <__aeabi_fsub+0x36>
    44cc:	2b00      	cmp	r3, #0
    44ce:	d010      	beq.n	44f2 <__aeabi_fsub+0x2de>
    44d0:	24ff      	movs	r4, #255	; 0xff
    44d2:	2a00      	cmp	r2, #0
    44d4:	d100      	bne.n	44d8 <__aeabi_fsub+0x2c4>
    44d6:	e6b8      	b.n	424a <__aeabi_fsub+0x36>
    44d8:	2080      	movs	r0, #128	; 0x80
    44da:	08db      	lsrs	r3, r3, #3
    44dc:	03c0      	lsls	r0, r0, #15
    44de:	4203      	tst	r3, r0
    44e0:	d003      	beq.n	44ea <__aeabi_fsub+0x2d6>
    44e2:	08d2      	lsrs	r2, r2, #3
    44e4:	4202      	tst	r2, r0
    44e6:	d100      	bne.n	44ea <__aeabi_fsub+0x2d6>
    44e8:	0013      	movs	r3, r2
    44ea:	00db      	lsls	r3, r3, #3
    44ec:	000d      	movs	r5, r1
    44ee:	24ff      	movs	r4, #255	; 0xff
    44f0:	e6ab      	b.n	424a <__aeabi_fsub+0x36>
    44f2:	0013      	movs	r3, r2
    44f4:	24ff      	movs	r4, #255	; 0xff
    44f6:	e6a8      	b.n	424a <__aeabi_fsub+0x36>
    44f8:	2301      	movs	r3, #1
    44fa:	e76e      	b.n	43da <__aeabi_fsub+0x1c6>
    44fc:	0013      	movs	r3, r2
    44fe:	0034      	movs	r4, r6
    4500:	e6a3      	b.n	424a <__aeabi_fsub+0x36>
    4502:	2700      	movs	r7, #0
    4504:	2500      	movs	r5, #0
    4506:	e71e      	b.n	4346 <__aeabi_fsub+0x132>
    4508:	2780      	movs	r7, #128	; 0x80
    450a:	2500      	movs	r5, #0
    450c:	03ff      	lsls	r7, r7, #15
    450e:	e6e9      	b.n	42e4 <__aeabi_fsub+0xd0>
    4510:	0013      	movs	r3, r2
    4512:	e69a      	b.n	424a <__aeabi_fsub+0x36>
    4514:	2301      	movs	r3, #1
    4516:	e7a6      	b.n	4466 <__aeabi_fsub+0x252>
    4518:	7dffffff 	.word	0x7dffffff
    451c:	fbffffff 	.word	0xfbffffff

00004520 <__aeabi_f2iz>:
    4520:	0243      	lsls	r3, r0, #9
    4522:	0a59      	lsrs	r1, r3, #9
    4524:	0043      	lsls	r3, r0, #1
    4526:	0fc2      	lsrs	r2, r0, #31
    4528:	0e1b      	lsrs	r3, r3, #24
    452a:	2000      	movs	r0, #0
    452c:	2b7e      	cmp	r3, #126	; 0x7e
    452e:	dd0e      	ble.n	454e <__aeabi_f2iz+0x2e>
    4530:	2b9d      	cmp	r3, #157	; 0x9d
    4532:	dc0d      	bgt.n	4550 <__aeabi_f2iz+0x30>
    4534:	2080      	movs	r0, #128	; 0x80
    4536:	0400      	lsls	r0, r0, #16
    4538:	4301      	orrs	r1, r0
    453a:	2b95      	cmp	r3, #149	; 0x95
    453c:	dc0b      	bgt.n	4556 <__aeabi_f2iz+0x36>
    453e:	2096      	movs	r0, #150	; 0x96
    4540:	1ac3      	subs	r3, r0, r3
    4542:	40d9      	lsrs	r1, r3
    4544:	000b      	movs	r3, r1
    4546:	4258      	negs	r0, r3
    4548:	2a00      	cmp	r2, #0
    454a:	d100      	bne.n	454e <__aeabi_f2iz+0x2e>
    454c:	0018      	movs	r0, r3
    454e:	4770      	bx	lr
    4550:	4b03      	ldr	r3, [pc, #12]	; (4560 <__aeabi_f2iz+0x40>)
    4552:	18d0      	adds	r0, r2, r3
    4554:	e7fb      	b.n	454e <__aeabi_f2iz+0x2e>
    4556:	3b96      	subs	r3, #150	; 0x96
    4558:	4099      	lsls	r1, r3
    455a:	000b      	movs	r3, r1
    455c:	e7f3      	b.n	4546 <__aeabi_f2iz+0x26>
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	7fffffff 	.word	0x7fffffff

00004564 <__aeabi_i2f>:
    4564:	b570      	push	{r4, r5, r6, lr}
    4566:	2800      	cmp	r0, #0
    4568:	d030      	beq.n	45cc <__aeabi_i2f+0x68>
    456a:	17c3      	asrs	r3, r0, #31
    456c:	18c5      	adds	r5, r0, r3
    456e:	405d      	eors	r5, r3
    4570:	0fc4      	lsrs	r4, r0, #31
    4572:	0028      	movs	r0, r5
    4574:	f001 ff98 	bl	64a8 <__clzsi2>
    4578:	239e      	movs	r3, #158	; 0x9e
    457a:	1a1b      	subs	r3, r3, r0
    457c:	2b96      	cmp	r3, #150	; 0x96
    457e:	dc0d      	bgt.n	459c <__aeabi_i2f+0x38>
    4580:	2296      	movs	r2, #150	; 0x96
    4582:	1ad2      	subs	r2, r2, r3
    4584:	4095      	lsls	r5, r2
    4586:	026a      	lsls	r2, r5, #9
    4588:	0a52      	lsrs	r2, r2, #9
    458a:	b2d8      	uxtb	r0, r3
    458c:	0252      	lsls	r2, r2, #9
    458e:	05c0      	lsls	r0, r0, #23
    4590:	0a52      	lsrs	r2, r2, #9
    4592:	07e4      	lsls	r4, r4, #31
    4594:	4302      	orrs	r2, r0
    4596:	4322      	orrs	r2, r4
    4598:	0010      	movs	r0, r2
    459a:	bd70      	pop	{r4, r5, r6, pc}
    459c:	2b99      	cmp	r3, #153	; 0x99
    459e:	dc19      	bgt.n	45d4 <__aeabi_i2f+0x70>
    45a0:	2299      	movs	r2, #153	; 0x99
    45a2:	1ad2      	subs	r2, r2, r3
    45a4:	4095      	lsls	r5, r2
    45a6:	4a12      	ldr	r2, [pc, #72]	; (45f0 <__aeabi_i2f+0x8c>)
    45a8:	402a      	ands	r2, r5
    45aa:	0769      	lsls	r1, r5, #29
    45ac:	d004      	beq.n	45b8 <__aeabi_i2f+0x54>
    45ae:	210f      	movs	r1, #15
    45b0:	400d      	ands	r5, r1
    45b2:	2d04      	cmp	r5, #4
    45b4:	d000      	beq.n	45b8 <__aeabi_i2f+0x54>
    45b6:	3204      	adds	r2, #4
    45b8:	0151      	lsls	r1, r2, #5
    45ba:	d503      	bpl.n	45c4 <__aeabi_i2f+0x60>
    45bc:	4b0c      	ldr	r3, [pc, #48]	; (45f0 <__aeabi_i2f+0x8c>)
    45be:	401a      	ands	r2, r3
    45c0:	239f      	movs	r3, #159	; 0x9f
    45c2:	1a1b      	subs	r3, r3, r0
    45c4:	0192      	lsls	r2, r2, #6
    45c6:	0a52      	lsrs	r2, r2, #9
    45c8:	b2d8      	uxtb	r0, r3
    45ca:	e7df      	b.n	458c <__aeabi_i2f+0x28>
    45cc:	2400      	movs	r4, #0
    45ce:	2000      	movs	r0, #0
    45d0:	2200      	movs	r2, #0
    45d2:	e7db      	b.n	458c <__aeabi_i2f+0x28>
    45d4:	2205      	movs	r2, #5
    45d6:	002e      	movs	r6, r5
    45d8:	1a12      	subs	r2, r2, r0
    45da:	21b9      	movs	r1, #185	; 0xb9
    45dc:	40d6      	lsrs	r6, r2
    45de:	002a      	movs	r2, r5
    45e0:	1ac9      	subs	r1, r1, r3
    45e2:	408a      	lsls	r2, r1
    45e4:	1e55      	subs	r5, r2, #1
    45e6:	41aa      	sbcs	r2, r5
    45e8:	0035      	movs	r5, r6
    45ea:	4315      	orrs	r5, r2
    45ec:	e7db      	b.n	45a6 <__aeabi_i2f+0x42>
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	fbffffff 	.word	0xfbffffff

000045f4 <__aeabi_dadd>:
    45f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45f6:	4656      	mov	r6, sl
    45f8:	465f      	mov	r7, fp
    45fa:	464d      	mov	r5, r9
    45fc:	4644      	mov	r4, r8
    45fe:	b4f0      	push	{r4, r5, r6, r7}
    4600:	000f      	movs	r7, r1
    4602:	0ffd      	lsrs	r5, r7, #31
    4604:	46aa      	mov	sl, r5
    4606:	0309      	lsls	r1, r1, #12
    4608:	007c      	lsls	r4, r7, #1
    460a:	002e      	movs	r6, r5
    460c:	005f      	lsls	r7, r3, #1
    460e:	0f45      	lsrs	r5, r0, #29
    4610:	0a49      	lsrs	r1, r1, #9
    4612:	0d7f      	lsrs	r7, r7, #21
    4614:	4329      	orrs	r1, r5
    4616:	00c5      	lsls	r5, r0, #3
    4618:	0318      	lsls	r0, r3, #12
    461a:	46bc      	mov	ip, r7
    461c:	0a40      	lsrs	r0, r0, #9
    461e:	0f57      	lsrs	r7, r2, #29
    4620:	0d64      	lsrs	r4, r4, #21
    4622:	0fdb      	lsrs	r3, r3, #31
    4624:	4338      	orrs	r0, r7
    4626:	00d2      	lsls	r2, r2, #3
    4628:	459a      	cmp	sl, r3
    462a:	d100      	bne.n	462e <__aeabi_dadd+0x3a>
    462c:	e0aa      	b.n	4784 <__aeabi_dadd+0x190>
    462e:	4666      	mov	r6, ip
    4630:	1ba6      	subs	r6, r4, r6
    4632:	2e00      	cmp	r6, #0
    4634:	dc00      	bgt.n	4638 <__aeabi_dadd+0x44>
    4636:	e0ff      	b.n	4838 <__aeabi_dadd+0x244>
    4638:	4663      	mov	r3, ip
    463a:	2b00      	cmp	r3, #0
    463c:	d139      	bne.n	46b2 <__aeabi_dadd+0xbe>
    463e:	0003      	movs	r3, r0
    4640:	4313      	orrs	r3, r2
    4642:	d000      	beq.n	4646 <__aeabi_dadd+0x52>
    4644:	e0d9      	b.n	47fa <__aeabi_dadd+0x206>
    4646:	076b      	lsls	r3, r5, #29
    4648:	d009      	beq.n	465e <__aeabi_dadd+0x6a>
    464a:	230f      	movs	r3, #15
    464c:	402b      	ands	r3, r5
    464e:	2b04      	cmp	r3, #4
    4650:	d005      	beq.n	465e <__aeabi_dadd+0x6a>
    4652:	1d2b      	adds	r3, r5, #4
    4654:	42ab      	cmp	r3, r5
    4656:	41ad      	sbcs	r5, r5
    4658:	426d      	negs	r5, r5
    465a:	1949      	adds	r1, r1, r5
    465c:	001d      	movs	r5, r3
    465e:	020b      	lsls	r3, r1, #8
    4660:	d400      	bmi.n	4664 <__aeabi_dadd+0x70>
    4662:	e082      	b.n	476a <__aeabi_dadd+0x176>
    4664:	4bca      	ldr	r3, [pc, #808]	; (4990 <__aeabi_dadd+0x39c>)
    4666:	3401      	adds	r4, #1
    4668:	429c      	cmp	r4, r3
    466a:	d100      	bne.n	466e <__aeabi_dadd+0x7a>
    466c:	e0fe      	b.n	486c <__aeabi_dadd+0x278>
    466e:	000a      	movs	r2, r1
    4670:	4656      	mov	r6, sl
    4672:	4bc8      	ldr	r3, [pc, #800]	; (4994 <__aeabi_dadd+0x3a0>)
    4674:	08ed      	lsrs	r5, r5, #3
    4676:	401a      	ands	r2, r3
    4678:	0750      	lsls	r0, r2, #29
    467a:	0564      	lsls	r4, r4, #21
    467c:	0252      	lsls	r2, r2, #9
    467e:	4305      	orrs	r5, r0
    4680:	0b12      	lsrs	r2, r2, #12
    4682:	0d64      	lsrs	r4, r4, #21
    4684:	2100      	movs	r1, #0
    4686:	0312      	lsls	r2, r2, #12
    4688:	0d0b      	lsrs	r3, r1, #20
    468a:	051b      	lsls	r3, r3, #20
    468c:	0564      	lsls	r4, r4, #21
    468e:	0b12      	lsrs	r2, r2, #12
    4690:	431a      	orrs	r2, r3
    4692:	0863      	lsrs	r3, r4, #1
    4694:	4cc0      	ldr	r4, [pc, #768]	; (4998 <__aeabi_dadd+0x3a4>)
    4696:	07f6      	lsls	r6, r6, #31
    4698:	4014      	ands	r4, r2
    469a:	431c      	orrs	r4, r3
    469c:	0064      	lsls	r4, r4, #1
    469e:	0864      	lsrs	r4, r4, #1
    46a0:	4334      	orrs	r4, r6
    46a2:	0028      	movs	r0, r5
    46a4:	0021      	movs	r1, r4
    46a6:	bc3c      	pop	{r2, r3, r4, r5}
    46a8:	4690      	mov	r8, r2
    46aa:	4699      	mov	r9, r3
    46ac:	46a2      	mov	sl, r4
    46ae:	46ab      	mov	fp, r5
    46b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46b2:	4bb7      	ldr	r3, [pc, #732]	; (4990 <__aeabi_dadd+0x39c>)
    46b4:	429c      	cmp	r4, r3
    46b6:	d0c6      	beq.n	4646 <__aeabi_dadd+0x52>
    46b8:	2380      	movs	r3, #128	; 0x80
    46ba:	041b      	lsls	r3, r3, #16
    46bc:	4318      	orrs	r0, r3
    46be:	2e38      	cmp	r6, #56	; 0x38
    46c0:	dd00      	ble.n	46c4 <__aeabi_dadd+0xd0>
    46c2:	e0eb      	b.n	489c <__aeabi_dadd+0x2a8>
    46c4:	2e1f      	cmp	r6, #31
    46c6:	dd00      	ble.n	46ca <__aeabi_dadd+0xd6>
    46c8:	e11e      	b.n	4908 <__aeabi_dadd+0x314>
    46ca:	2320      	movs	r3, #32
    46cc:	1b9b      	subs	r3, r3, r6
    46ce:	469c      	mov	ip, r3
    46d0:	0003      	movs	r3, r0
    46d2:	4667      	mov	r7, ip
    46d4:	40bb      	lsls	r3, r7
    46d6:	4698      	mov	r8, r3
    46d8:	0013      	movs	r3, r2
    46da:	4647      	mov	r7, r8
    46dc:	40f3      	lsrs	r3, r6
    46de:	433b      	orrs	r3, r7
    46e0:	4667      	mov	r7, ip
    46e2:	40ba      	lsls	r2, r7
    46e4:	1e57      	subs	r7, r2, #1
    46e6:	41ba      	sbcs	r2, r7
    46e8:	4313      	orrs	r3, r2
    46ea:	0002      	movs	r2, r0
    46ec:	40f2      	lsrs	r2, r6
    46ee:	1aeb      	subs	r3, r5, r3
    46f0:	429d      	cmp	r5, r3
    46f2:	41b6      	sbcs	r6, r6
    46f4:	001d      	movs	r5, r3
    46f6:	1a8a      	subs	r2, r1, r2
    46f8:	4276      	negs	r6, r6
    46fa:	1b91      	subs	r1, r2, r6
    46fc:	020b      	lsls	r3, r1, #8
    46fe:	d531      	bpl.n	4764 <__aeabi_dadd+0x170>
    4700:	024a      	lsls	r2, r1, #9
    4702:	0a56      	lsrs	r6, r2, #9
    4704:	2e00      	cmp	r6, #0
    4706:	d100      	bne.n	470a <__aeabi_dadd+0x116>
    4708:	e0b4      	b.n	4874 <__aeabi_dadd+0x280>
    470a:	0030      	movs	r0, r6
    470c:	f001 fecc 	bl	64a8 <__clzsi2>
    4710:	0003      	movs	r3, r0
    4712:	3b08      	subs	r3, #8
    4714:	2b1f      	cmp	r3, #31
    4716:	dd00      	ble.n	471a <__aeabi_dadd+0x126>
    4718:	e0b5      	b.n	4886 <__aeabi_dadd+0x292>
    471a:	2220      	movs	r2, #32
    471c:	0029      	movs	r1, r5
    471e:	1ad2      	subs	r2, r2, r3
    4720:	40d1      	lsrs	r1, r2
    4722:	409e      	lsls	r6, r3
    4724:	000a      	movs	r2, r1
    4726:	409d      	lsls	r5, r3
    4728:	4332      	orrs	r2, r6
    472a:	429c      	cmp	r4, r3
    472c:	dd00      	ble.n	4730 <__aeabi_dadd+0x13c>
    472e:	e0b1      	b.n	4894 <__aeabi_dadd+0x2a0>
    4730:	1b1c      	subs	r4, r3, r4
    4732:	1c63      	adds	r3, r4, #1
    4734:	2b1f      	cmp	r3, #31
    4736:	dd00      	ble.n	473a <__aeabi_dadd+0x146>
    4738:	e0d5      	b.n	48e6 <__aeabi_dadd+0x2f2>
    473a:	2120      	movs	r1, #32
    473c:	0014      	movs	r4, r2
    473e:	0028      	movs	r0, r5
    4740:	1ac9      	subs	r1, r1, r3
    4742:	408c      	lsls	r4, r1
    4744:	40d8      	lsrs	r0, r3
    4746:	408d      	lsls	r5, r1
    4748:	4304      	orrs	r4, r0
    474a:	40da      	lsrs	r2, r3
    474c:	1e68      	subs	r0, r5, #1
    474e:	4185      	sbcs	r5, r0
    4750:	0011      	movs	r1, r2
    4752:	4325      	orrs	r5, r4
    4754:	2400      	movs	r4, #0
    4756:	e776      	b.n	4646 <__aeabi_dadd+0x52>
    4758:	4641      	mov	r1, r8
    475a:	4331      	orrs	r1, r6
    475c:	d100      	bne.n	4760 <__aeabi_dadd+0x16c>
    475e:	e234      	b.n	4bca <__aeabi_dadd+0x5d6>
    4760:	0031      	movs	r1, r6
    4762:	4645      	mov	r5, r8
    4764:	076b      	lsls	r3, r5, #29
    4766:	d000      	beq.n	476a <__aeabi_dadd+0x176>
    4768:	e76f      	b.n	464a <__aeabi_dadd+0x56>
    476a:	4656      	mov	r6, sl
    476c:	0748      	lsls	r0, r1, #29
    476e:	08ed      	lsrs	r5, r5, #3
    4770:	08c9      	lsrs	r1, r1, #3
    4772:	4305      	orrs	r5, r0
    4774:	4b86      	ldr	r3, [pc, #536]	; (4990 <__aeabi_dadd+0x39c>)
    4776:	429c      	cmp	r4, r3
    4778:	d035      	beq.n	47e6 <__aeabi_dadd+0x1f2>
    477a:	030a      	lsls	r2, r1, #12
    477c:	0564      	lsls	r4, r4, #21
    477e:	0b12      	lsrs	r2, r2, #12
    4780:	0d64      	lsrs	r4, r4, #21
    4782:	e77f      	b.n	4684 <__aeabi_dadd+0x90>
    4784:	4663      	mov	r3, ip
    4786:	1ae3      	subs	r3, r4, r3
    4788:	469b      	mov	fp, r3
    478a:	2b00      	cmp	r3, #0
    478c:	dc00      	bgt.n	4790 <__aeabi_dadd+0x19c>
    478e:	e08b      	b.n	48a8 <__aeabi_dadd+0x2b4>
    4790:	4667      	mov	r7, ip
    4792:	2f00      	cmp	r7, #0
    4794:	d03c      	beq.n	4810 <__aeabi_dadd+0x21c>
    4796:	4f7e      	ldr	r7, [pc, #504]	; (4990 <__aeabi_dadd+0x39c>)
    4798:	42bc      	cmp	r4, r7
    479a:	d100      	bne.n	479e <__aeabi_dadd+0x1aa>
    479c:	e753      	b.n	4646 <__aeabi_dadd+0x52>
    479e:	2780      	movs	r7, #128	; 0x80
    47a0:	043f      	lsls	r7, r7, #16
    47a2:	4338      	orrs	r0, r7
    47a4:	465b      	mov	r3, fp
    47a6:	2b38      	cmp	r3, #56	; 0x38
    47a8:	dc00      	bgt.n	47ac <__aeabi_dadd+0x1b8>
    47aa:	e0f7      	b.n	499c <__aeabi_dadd+0x3a8>
    47ac:	4302      	orrs	r2, r0
    47ae:	1e50      	subs	r0, r2, #1
    47b0:	4182      	sbcs	r2, r0
    47b2:	2000      	movs	r0, #0
    47b4:	b2d2      	uxtb	r2, r2
    47b6:	1953      	adds	r3, r2, r5
    47b8:	1842      	adds	r2, r0, r1
    47ba:	42ab      	cmp	r3, r5
    47bc:	4189      	sbcs	r1, r1
    47be:	001d      	movs	r5, r3
    47c0:	4249      	negs	r1, r1
    47c2:	1889      	adds	r1, r1, r2
    47c4:	020b      	lsls	r3, r1, #8
    47c6:	d5cd      	bpl.n	4764 <__aeabi_dadd+0x170>
    47c8:	4b71      	ldr	r3, [pc, #452]	; (4990 <__aeabi_dadd+0x39c>)
    47ca:	3401      	adds	r4, #1
    47cc:	429c      	cmp	r4, r3
    47ce:	d100      	bne.n	47d2 <__aeabi_dadd+0x1de>
    47d0:	e13d      	b.n	4a4e <__aeabi_dadd+0x45a>
    47d2:	2001      	movs	r0, #1
    47d4:	4a6f      	ldr	r2, [pc, #444]	; (4994 <__aeabi_dadd+0x3a0>)
    47d6:	086b      	lsrs	r3, r5, #1
    47d8:	400a      	ands	r2, r1
    47da:	4028      	ands	r0, r5
    47dc:	4318      	orrs	r0, r3
    47de:	07d5      	lsls	r5, r2, #31
    47e0:	4305      	orrs	r5, r0
    47e2:	0851      	lsrs	r1, r2, #1
    47e4:	e72f      	b.n	4646 <__aeabi_dadd+0x52>
    47e6:	002b      	movs	r3, r5
    47e8:	430b      	orrs	r3, r1
    47ea:	d100      	bne.n	47ee <__aeabi_dadd+0x1fa>
    47ec:	e1cb      	b.n	4b86 <__aeabi_dadd+0x592>
    47ee:	2380      	movs	r3, #128	; 0x80
    47f0:	031b      	lsls	r3, r3, #12
    47f2:	430b      	orrs	r3, r1
    47f4:	031a      	lsls	r2, r3, #12
    47f6:	0b12      	lsrs	r2, r2, #12
    47f8:	e744      	b.n	4684 <__aeabi_dadd+0x90>
    47fa:	3e01      	subs	r6, #1
    47fc:	2e00      	cmp	r6, #0
    47fe:	d16d      	bne.n	48dc <__aeabi_dadd+0x2e8>
    4800:	1aae      	subs	r6, r5, r2
    4802:	42b5      	cmp	r5, r6
    4804:	419b      	sbcs	r3, r3
    4806:	1a09      	subs	r1, r1, r0
    4808:	425b      	negs	r3, r3
    480a:	1ac9      	subs	r1, r1, r3
    480c:	0035      	movs	r5, r6
    480e:	e775      	b.n	46fc <__aeabi_dadd+0x108>
    4810:	0007      	movs	r7, r0
    4812:	4317      	orrs	r7, r2
    4814:	d100      	bne.n	4818 <__aeabi_dadd+0x224>
    4816:	e716      	b.n	4646 <__aeabi_dadd+0x52>
    4818:	2301      	movs	r3, #1
    481a:	425b      	negs	r3, r3
    481c:	469c      	mov	ip, r3
    481e:	44e3      	add	fp, ip
    4820:	465b      	mov	r3, fp
    4822:	2b00      	cmp	r3, #0
    4824:	d000      	beq.n	4828 <__aeabi_dadd+0x234>
    4826:	e0e0      	b.n	49ea <__aeabi_dadd+0x3f6>
    4828:	18aa      	adds	r2, r5, r2
    482a:	42aa      	cmp	r2, r5
    482c:	419b      	sbcs	r3, r3
    482e:	1809      	adds	r1, r1, r0
    4830:	425b      	negs	r3, r3
    4832:	1859      	adds	r1, r3, r1
    4834:	0015      	movs	r5, r2
    4836:	e7c5      	b.n	47c4 <__aeabi_dadd+0x1d0>
    4838:	2e00      	cmp	r6, #0
    483a:	d175      	bne.n	4928 <__aeabi_dadd+0x334>
    483c:	1c66      	adds	r6, r4, #1
    483e:	0576      	lsls	r6, r6, #21
    4840:	0d76      	lsrs	r6, r6, #21
    4842:	2e01      	cmp	r6, #1
    4844:	dc00      	bgt.n	4848 <__aeabi_dadd+0x254>
    4846:	e0f3      	b.n	4a30 <__aeabi_dadd+0x43c>
    4848:	1aae      	subs	r6, r5, r2
    484a:	46b0      	mov	r8, r6
    484c:	4545      	cmp	r5, r8
    484e:	41bf      	sbcs	r7, r7
    4850:	1a0e      	subs	r6, r1, r0
    4852:	427f      	negs	r7, r7
    4854:	1bf6      	subs	r6, r6, r7
    4856:	0237      	lsls	r7, r6, #8
    4858:	d400      	bmi.n	485c <__aeabi_dadd+0x268>
    485a:	e08f      	b.n	497c <__aeabi_dadd+0x388>
    485c:	1b55      	subs	r5, r2, r5
    485e:	42aa      	cmp	r2, r5
    4860:	41b6      	sbcs	r6, r6
    4862:	1a41      	subs	r1, r0, r1
    4864:	4276      	negs	r6, r6
    4866:	1b8e      	subs	r6, r1, r6
    4868:	469a      	mov	sl, r3
    486a:	e74b      	b.n	4704 <__aeabi_dadd+0x110>
    486c:	4656      	mov	r6, sl
    486e:	2200      	movs	r2, #0
    4870:	2500      	movs	r5, #0
    4872:	e707      	b.n	4684 <__aeabi_dadd+0x90>
    4874:	0028      	movs	r0, r5
    4876:	f001 fe17 	bl	64a8 <__clzsi2>
    487a:	3020      	adds	r0, #32
    487c:	0003      	movs	r3, r0
    487e:	3b08      	subs	r3, #8
    4880:	2b1f      	cmp	r3, #31
    4882:	dc00      	bgt.n	4886 <__aeabi_dadd+0x292>
    4884:	e749      	b.n	471a <__aeabi_dadd+0x126>
    4886:	002a      	movs	r2, r5
    4888:	3828      	subs	r0, #40	; 0x28
    488a:	4082      	lsls	r2, r0
    488c:	2500      	movs	r5, #0
    488e:	429c      	cmp	r4, r3
    4890:	dc00      	bgt.n	4894 <__aeabi_dadd+0x2a0>
    4892:	e74d      	b.n	4730 <__aeabi_dadd+0x13c>
    4894:	493f      	ldr	r1, [pc, #252]	; (4994 <__aeabi_dadd+0x3a0>)
    4896:	1ae4      	subs	r4, r4, r3
    4898:	4011      	ands	r1, r2
    489a:	e6d4      	b.n	4646 <__aeabi_dadd+0x52>
    489c:	4302      	orrs	r2, r0
    489e:	1e50      	subs	r0, r2, #1
    48a0:	4182      	sbcs	r2, r0
    48a2:	b2d3      	uxtb	r3, r2
    48a4:	2200      	movs	r2, #0
    48a6:	e722      	b.n	46ee <__aeabi_dadd+0xfa>
    48a8:	2b00      	cmp	r3, #0
    48aa:	d000      	beq.n	48ae <__aeabi_dadd+0x2ba>
    48ac:	e0f3      	b.n	4a96 <__aeabi_dadd+0x4a2>
    48ae:	1c63      	adds	r3, r4, #1
    48b0:	469c      	mov	ip, r3
    48b2:	055b      	lsls	r3, r3, #21
    48b4:	0d5b      	lsrs	r3, r3, #21
    48b6:	2b01      	cmp	r3, #1
    48b8:	dc00      	bgt.n	48bc <__aeabi_dadd+0x2c8>
    48ba:	e09f      	b.n	49fc <__aeabi_dadd+0x408>
    48bc:	4b34      	ldr	r3, [pc, #208]	; (4990 <__aeabi_dadd+0x39c>)
    48be:	459c      	cmp	ip, r3
    48c0:	d100      	bne.n	48c4 <__aeabi_dadd+0x2d0>
    48c2:	e0c3      	b.n	4a4c <__aeabi_dadd+0x458>
    48c4:	18aa      	adds	r2, r5, r2
    48c6:	1809      	adds	r1, r1, r0
    48c8:	42aa      	cmp	r2, r5
    48ca:	4180      	sbcs	r0, r0
    48cc:	4240      	negs	r0, r0
    48ce:	1841      	adds	r1, r0, r1
    48d0:	07cd      	lsls	r5, r1, #31
    48d2:	0852      	lsrs	r2, r2, #1
    48d4:	4315      	orrs	r5, r2
    48d6:	0849      	lsrs	r1, r1, #1
    48d8:	4664      	mov	r4, ip
    48da:	e6b4      	b.n	4646 <__aeabi_dadd+0x52>
    48dc:	4b2c      	ldr	r3, [pc, #176]	; (4990 <__aeabi_dadd+0x39c>)
    48de:	429c      	cmp	r4, r3
    48e0:	d000      	beq.n	48e4 <__aeabi_dadd+0x2f0>
    48e2:	e6ec      	b.n	46be <__aeabi_dadd+0xca>
    48e4:	e6af      	b.n	4646 <__aeabi_dadd+0x52>
    48e6:	0011      	movs	r1, r2
    48e8:	3c1f      	subs	r4, #31
    48ea:	40e1      	lsrs	r1, r4
    48ec:	000c      	movs	r4, r1
    48ee:	2b20      	cmp	r3, #32
    48f0:	d100      	bne.n	48f4 <__aeabi_dadd+0x300>
    48f2:	e07f      	b.n	49f4 <__aeabi_dadd+0x400>
    48f4:	2140      	movs	r1, #64	; 0x40
    48f6:	1acb      	subs	r3, r1, r3
    48f8:	409a      	lsls	r2, r3
    48fa:	4315      	orrs	r5, r2
    48fc:	1e6a      	subs	r2, r5, #1
    48fe:	4195      	sbcs	r5, r2
    4900:	2100      	movs	r1, #0
    4902:	4325      	orrs	r5, r4
    4904:	2400      	movs	r4, #0
    4906:	e72d      	b.n	4764 <__aeabi_dadd+0x170>
    4908:	0033      	movs	r3, r6
    490a:	0007      	movs	r7, r0
    490c:	3b20      	subs	r3, #32
    490e:	40df      	lsrs	r7, r3
    4910:	003b      	movs	r3, r7
    4912:	2e20      	cmp	r6, #32
    4914:	d070      	beq.n	49f8 <__aeabi_dadd+0x404>
    4916:	2740      	movs	r7, #64	; 0x40
    4918:	1bbe      	subs	r6, r7, r6
    491a:	40b0      	lsls	r0, r6
    491c:	4302      	orrs	r2, r0
    491e:	1e50      	subs	r0, r2, #1
    4920:	4182      	sbcs	r2, r0
    4922:	4313      	orrs	r3, r2
    4924:	2200      	movs	r2, #0
    4926:	e6e2      	b.n	46ee <__aeabi_dadd+0xfa>
    4928:	2c00      	cmp	r4, #0
    492a:	d04f      	beq.n	49cc <__aeabi_dadd+0x3d8>
    492c:	4c18      	ldr	r4, [pc, #96]	; (4990 <__aeabi_dadd+0x39c>)
    492e:	45a4      	cmp	ip, r4
    4930:	d100      	bne.n	4934 <__aeabi_dadd+0x340>
    4932:	e0ab      	b.n	4a8c <__aeabi_dadd+0x498>
    4934:	2480      	movs	r4, #128	; 0x80
    4936:	0424      	lsls	r4, r4, #16
    4938:	4276      	negs	r6, r6
    493a:	4321      	orrs	r1, r4
    493c:	2e38      	cmp	r6, #56	; 0x38
    493e:	dd00      	ble.n	4942 <__aeabi_dadd+0x34e>
    4940:	e0df      	b.n	4b02 <__aeabi_dadd+0x50e>
    4942:	2e1f      	cmp	r6, #31
    4944:	dd00      	ble.n	4948 <__aeabi_dadd+0x354>
    4946:	e143      	b.n	4bd0 <__aeabi_dadd+0x5dc>
    4948:	2720      	movs	r7, #32
    494a:	1bbc      	subs	r4, r7, r6
    494c:	46a1      	mov	r9, r4
    494e:	000c      	movs	r4, r1
    4950:	464f      	mov	r7, r9
    4952:	40bc      	lsls	r4, r7
    4954:	46a0      	mov	r8, r4
    4956:	002c      	movs	r4, r5
    4958:	4647      	mov	r7, r8
    495a:	40f4      	lsrs	r4, r6
    495c:	433c      	orrs	r4, r7
    495e:	464f      	mov	r7, r9
    4960:	40bd      	lsls	r5, r7
    4962:	1e6f      	subs	r7, r5, #1
    4964:	41bd      	sbcs	r5, r7
    4966:	40f1      	lsrs	r1, r6
    4968:	432c      	orrs	r4, r5
    496a:	1b15      	subs	r5, r2, r4
    496c:	42aa      	cmp	r2, r5
    496e:	4192      	sbcs	r2, r2
    4970:	1a41      	subs	r1, r0, r1
    4972:	4252      	negs	r2, r2
    4974:	1a89      	subs	r1, r1, r2
    4976:	4664      	mov	r4, ip
    4978:	469a      	mov	sl, r3
    497a:	e6bf      	b.n	46fc <__aeabi_dadd+0x108>
    497c:	4641      	mov	r1, r8
    497e:	4645      	mov	r5, r8
    4980:	4331      	orrs	r1, r6
    4982:	d000      	beq.n	4986 <__aeabi_dadd+0x392>
    4984:	e6be      	b.n	4704 <__aeabi_dadd+0x110>
    4986:	2600      	movs	r6, #0
    4988:	2400      	movs	r4, #0
    498a:	2500      	movs	r5, #0
    498c:	e6f2      	b.n	4774 <__aeabi_dadd+0x180>
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	000007ff 	.word	0x000007ff
    4994:	ff7fffff 	.word	0xff7fffff
    4998:	800fffff 	.word	0x800fffff
    499c:	2b1f      	cmp	r3, #31
    499e:	dc59      	bgt.n	4a54 <__aeabi_dadd+0x460>
    49a0:	2720      	movs	r7, #32
    49a2:	1aff      	subs	r7, r7, r3
    49a4:	46bc      	mov	ip, r7
    49a6:	0007      	movs	r7, r0
    49a8:	4663      	mov	r3, ip
    49aa:	409f      	lsls	r7, r3
    49ac:	465b      	mov	r3, fp
    49ae:	46b9      	mov	r9, r7
    49b0:	0017      	movs	r7, r2
    49b2:	40df      	lsrs	r7, r3
    49b4:	46b8      	mov	r8, r7
    49b6:	464f      	mov	r7, r9
    49b8:	4643      	mov	r3, r8
    49ba:	431f      	orrs	r7, r3
    49bc:	4663      	mov	r3, ip
    49be:	409a      	lsls	r2, r3
    49c0:	1e53      	subs	r3, r2, #1
    49c2:	419a      	sbcs	r2, r3
    49c4:	465b      	mov	r3, fp
    49c6:	433a      	orrs	r2, r7
    49c8:	40d8      	lsrs	r0, r3
    49ca:	e6f4      	b.n	47b6 <__aeabi_dadd+0x1c2>
    49cc:	000c      	movs	r4, r1
    49ce:	432c      	orrs	r4, r5
    49d0:	d05c      	beq.n	4a8c <__aeabi_dadd+0x498>
    49d2:	43f6      	mvns	r6, r6
    49d4:	2e00      	cmp	r6, #0
    49d6:	d155      	bne.n	4a84 <__aeabi_dadd+0x490>
    49d8:	1b55      	subs	r5, r2, r5
    49da:	42aa      	cmp	r2, r5
    49dc:	41a4      	sbcs	r4, r4
    49de:	1a41      	subs	r1, r0, r1
    49e0:	4264      	negs	r4, r4
    49e2:	1b09      	subs	r1, r1, r4
    49e4:	469a      	mov	sl, r3
    49e6:	4664      	mov	r4, ip
    49e8:	e688      	b.n	46fc <__aeabi_dadd+0x108>
    49ea:	4f96      	ldr	r7, [pc, #600]	; (4c44 <__aeabi_dadd+0x650>)
    49ec:	42bc      	cmp	r4, r7
    49ee:	d000      	beq.n	49f2 <__aeabi_dadd+0x3fe>
    49f0:	e6d8      	b.n	47a4 <__aeabi_dadd+0x1b0>
    49f2:	e628      	b.n	4646 <__aeabi_dadd+0x52>
    49f4:	2200      	movs	r2, #0
    49f6:	e780      	b.n	48fa <__aeabi_dadd+0x306>
    49f8:	2000      	movs	r0, #0
    49fa:	e78f      	b.n	491c <__aeabi_dadd+0x328>
    49fc:	000b      	movs	r3, r1
    49fe:	432b      	orrs	r3, r5
    4a00:	2c00      	cmp	r4, #0
    4a02:	d000      	beq.n	4a06 <__aeabi_dadd+0x412>
    4a04:	e0c2      	b.n	4b8c <__aeabi_dadd+0x598>
    4a06:	2b00      	cmp	r3, #0
    4a08:	d100      	bne.n	4a0c <__aeabi_dadd+0x418>
    4a0a:	e101      	b.n	4c10 <__aeabi_dadd+0x61c>
    4a0c:	0003      	movs	r3, r0
    4a0e:	4313      	orrs	r3, r2
    4a10:	d100      	bne.n	4a14 <__aeabi_dadd+0x420>
    4a12:	e618      	b.n	4646 <__aeabi_dadd+0x52>
    4a14:	18ab      	adds	r3, r5, r2
    4a16:	42ab      	cmp	r3, r5
    4a18:	41b6      	sbcs	r6, r6
    4a1a:	1809      	adds	r1, r1, r0
    4a1c:	4276      	negs	r6, r6
    4a1e:	1871      	adds	r1, r6, r1
    4a20:	020a      	lsls	r2, r1, #8
    4a22:	d400      	bmi.n	4a26 <__aeabi_dadd+0x432>
    4a24:	e109      	b.n	4c3a <__aeabi_dadd+0x646>
    4a26:	4a88      	ldr	r2, [pc, #544]	; (4c48 <__aeabi_dadd+0x654>)
    4a28:	001d      	movs	r5, r3
    4a2a:	4011      	ands	r1, r2
    4a2c:	4664      	mov	r4, ip
    4a2e:	e60a      	b.n	4646 <__aeabi_dadd+0x52>
    4a30:	2c00      	cmp	r4, #0
    4a32:	d15b      	bne.n	4aec <__aeabi_dadd+0x4f8>
    4a34:	000e      	movs	r6, r1
    4a36:	432e      	orrs	r6, r5
    4a38:	d000      	beq.n	4a3c <__aeabi_dadd+0x448>
    4a3a:	e08a      	b.n	4b52 <__aeabi_dadd+0x55e>
    4a3c:	0001      	movs	r1, r0
    4a3e:	4311      	orrs	r1, r2
    4a40:	d100      	bne.n	4a44 <__aeabi_dadd+0x450>
    4a42:	e0c2      	b.n	4bca <__aeabi_dadd+0x5d6>
    4a44:	0001      	movs	r1, r0
    4a46:	0015      	movs	r5, r2
    4a48:	469a      	mov	sl, r3
    4a4a:	e5fc      	b.n	4646 <__aeabi_dadd+0x52>
    4a4c:	4664      	mov	r4, ip
    4a4e:	2100      	movs	r1, #0
    4a50:	2500      	movs	r5, #0
    4a52:	e68f      	b.n	4774 <__aeabi_dadd+0x180>
    4a54:	2320      	movs	r3, #32
    4a56:	425b      	negs	r3, r3
    4a58:	469c      	mov	ip, r3
    4a5a:	44dc      	add	ip, fp
    4a5c:	4663      	mov	r3, ip
    4a5e:	0007      	movs	r7, r0
    4a60:	40df      	lsrs	r7, r3
    4a62:	465b      	mov	r3, fp
    4a64:	46bc      	mov	ip, r7
    4a66:	2b20      	cmp	r3, #32
    4a68:	d100      	bne.n	4a6c <__aeabi_dadd+0x478>
    4a6a:	e0ac      	b.n	4bc6 <__aeabi_dadd+0x5d2>
    4a6c:	2340      	movs	r3, #64	; 0x40
    4a6e:	465f      	mov	r7, fp
    4a70:	1bdb      	subs	r3, r3, r7
    4a72:	4098      	lsls	r0, r3
    4a74:	4302      	orrs	r2, r0
    4a76:	1e50      	subs	r0, r2, #1
    4a78:	4182      	sbcs	r2, r0
    4a7a:	4663      	mov	r3, ip
    4a7c:	4313      	orrs	r3, r2
    4a7e:	001a      	movs	r2, r3
    4a80:	2000      	movs	r0, #0
    4a82:	e698      	b.n	47b6 <__aeabi_dadd+0x1c2>
    4a84:	4c6f      	ldr	r4, [pc, #444]	; (4c44 <__aeabi_dadd+0x650>)
    4a86:	45a4      	cmp	ip, r4
    4a88:	d000      	beq.n	4a8c <__aeabi_dadd+0x498>
    4a8a:	e757      	b.n	493c <__aeabi_dadd+0x348>
    4a8c:	0001      	movs	r1, r0
    4a8e:	0015      	movs	r5, r2
    4a90:	4664      	mov	r4, ip
    4a92:	469a      	mov	sl, r3
    4a94:	e5d7      	b.n	4646 <__aeabi_dadd+0x52>
    4a96:	2c00      	cmp	r4, #0
    4a98:	d139      	bne.n	4b0e <__aeabi_dadd+0x51a>
    4a9a:	000c      	movs	r4, r1
    4a9c:	432c      	orrs	r4, r5
    4a9e:	d06e      	beq.n	4b7e <__aeabi_dadd+0x58a>
    4aa0:	43db      	mvns	r3, r3
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d01a      	beq.n	4adc <__aeabi_dadd+0x4e8>
    4aa6:	4c67      	ldr	r4, [pc, #412]	; (4c44 <__aeabi_dadd+0x650>)
    4aa8:	45a4      	cmp	ip, r4
    4aaa:	d068      	beq.n	4b7e <__aeabi_dadd+0x58a>
    4aac:	2b38      	cmp	r3, #56	; 0x38
    4aae:	dd00      	ble.n	4ab2 <__aeabi_dadd+0x4be>
    4ab0:	e0a4      	b.n	4bfc <__aeabi_dadd+0x608>
    4ab2:	2b1f      	cmp	r3, #31
    4ab4:	dd00      	ble.n	4ab8 <__aeabi_dadd+0x4c4>
    4ab6:	e0ae      	b.n	4c16 <__aeabi_dadd+0x622>
    4ab8:	2420      	movs	r4, #32
    4aba:	000f      	movs	r7, r1
    4abc:	1ae4      	subs	r4, r4, r3
    4abe:	40a7      	lsls	r7, r4
    4ac0:	46b9      	mov	r9, r7
    4ac2:	002f      	movs	r7, r5
    4ac4:	40df      	lsrs	r7, r3
    4ac6:	46b8      	mov	r8, r7
    4ac8:	46a3      	mov	fp, r4
    4aca:	464f      	mov	r7, r9
    4acc:	4644      	mov	r4, r8
    4ace:	4327      	orrs	r7, r4
    4ad0:	465c      	mov	r4, fp
    4ad2:	40a5      	lsls	r5, r4
    4ad4:	1e6c      	subs	r4, r5, #1
    4ad6:	41a5      	sbcs	r5, r4
    4ad8:	40d9      	lsrs	r1, r3
    4ada:	433d      	orrs	r5, r7
    4adc:	18ad      	adds	r5, r5, r2
    4ade:	4295      	cmp	r5, r2
    4ae0:	419b      	sbcs	r3, r3
    4ae2:	1809      	adds	r1, r1, r0
    4ae4:	425b      	negs	r3, r3
    4ae6:	1859      	adds	r1, r3, r1
    4ae8:	4664      	mov	r4, ip
    4aea:	e66b      	b.n	47c4 <__aeabi_dadd+0x1d0>
    4aec:	000c      	movs	r4, r1
    4aee:	432c      	orrs	r4, r5
    4af0:	d115      	bne.n	4b1e <__aeabi_dadd+0x52a>
    4af2:	0001      	movs	r1, r0
    4af4:	4311      	orrs	r1, r2
    4af6:	d07b      	beq.n	4bf0 <__aeabi_dadd+0x5fc>
    4af8:	0001      	movs	r1, r0
    4afa:	0015      	movs	r5, r2
    4afc:	469a      	mov	sl, r3
    4afe:	4c51      	ldr	r4, [pc, #324]	; (4c44 <__aeabi_dadd+0x650>)
    4b00:	e5a1      	b.n	4646 <__aeabi_dadd+0x52>
    4b02:	430d      	orrs	r5, r1
    4b04:	1e69      	subs	r1, r5, #1
    4b06:	418d      	sbcs	r5, r1
    4b08:	2100      	movs	r1, #0
    4b0a:	b2ec      	uxtb	r4, r5
    4b0c:	e72d      	b.n	496a <__aeabi_dadd+0x376>
    4b0e:	4c4d      	ldr	r4, [pc, #308]	; (4c44 <__aeabi_dadd+0x650>)
    4b10:	45a4      	cmp	ip, r4
    4b12:	d034      	beq.n	4b7e <__aeabi_dadd+0x58a>
    4b14:	2480      	movs	r4, #128	; 0x80
    4b16:	0424      	lsls	r4, r4, #16
    4b18:	425b      	negs	r3, r3
    4b1a:	4321      	orrs	r1, r4
    4b1c:	e7c6      	b.n	4aac <__aeabi_dadd+0x4b8>
    4b1e:	0004      	movs	r4, r0
    4b20:	4314      	orrs	r4, r2
    4b22:	d04e      	beq.n	4bc2 <__aeabi_dadd+0x5ce>
    4b24:	08ed      	lsrs	r5, r5, #3
    4b26:	074c      	lsls	r4, r1, #29
    4b28:	432c      	orrs	r4, r5
    4b2a:	2580      	movs	r5, #128	; 0x80
    4b2c:	08c9      	lsrs	r1, r1, #3
    4b2e:	032d      	lsls	r5, r5, #12
    4b30:	4229      	tst	r1, r5
    4b32:	d008      	beq.n	4b46 <__aeabi_dadd+0x552>
    4b34:	08c6      	lsrs	r6, r0, #3
    4b36:	422e      	tst	r6, r5
    4b38:	d105      	bne.n	4b46 <__aeabi_dadd+0x552>
    4b3a:	08d2      	lsrs	r2, r2, #3
    4b3c:	0741      	lsls	r1, r0, #29
    4b3e:	4311      	orrs	r1, r2
    4b40:	000c      	movs	r4, r1
    4b42:	469a      	mov	sl, r3
    4b44:	0031      	movs	r1, r6
    4b46:	0f62      	lsrs	r2, r4, #29
    4b48:	00c9      	lsls	r1, r1, #3
    4b4a:	00e5      	lsls	r5, r4, #3
    4b4c:	4311      	orrs	r1, r2
    4b4e:	4c3d      	ldr	r4, [pc, #244]	; (4c44 <__aeabi_dadd+0x650>)
    4b50:	e579      	b.n	4646 <__aeabi_dadd+0x52>
    4b52:	0006      	movs	r6, r0
    4b54:	4316      	orrs	r6, r2
    4b56:	d100      	bne.n	4b5a <__aeabi_dadd+0x566>
    4b58:	e575      	b.n	4646 <__aeabi_dadd+0x52>
    4b5a:	1aae      	subs	r6, r5, r2
    4b5c:	46b0      	mov	r8, r6
    4b5e:	4545      	cmp	r5, r8
    4b60:	41bf      	sbcs	r7, r7
    4b62:	1a0e      	subs	r6, r1, r0
    4b64:	427f      	negs	r7, r7
    4b66:	1bf6      	subs	r6, r6, r7
    4b68:	0237      	lsls	r7, r6, #8
    4b6a:	d400      	bmi.n	4b6e <__aeabi_dadd+0x57a>
    4b6c:	e5f4      	b.n	4758 <__aeabi_dadd+0x164>
    4b6e:	1b55      	subs	r5, r2, r5
    4b70:	42aa      	cmp	r2, r5
    4b72:	41b6      	sbcs	r6, r6
    4b74:	1a41      	subs	r1, r0, r1
    4b76:	4276      	negs	r6, r6
    4b78:	1b89      	subs	r1, r1, r6
    4b7a:	469a      	mov	sl, r3
    4b7c:	e563      	b.n	4646 <__aeabi_dadd+0x52>
    4b7e:	0001      	movs	r1, r0
    4b80:	0015      	movs	r5, r2
    4b82:	4664      	mov	r4, ip
    4b84:	e55f      	b.n	4646 <__aeabi_dadd+0x52>
    4b86:	2200      	movs	r2, #0
    4b88:	2500      	movs	r5, #0
    4b8a:	e57b      	b.n	4684 <__aeabi_dadd+0x90>
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d03b      	beq.n	4c08 <__aeabi_dadd+0x614>
    4b90:	0003      	movs	r3, r0
    4b92:	4313      	orrs	r3, r2
    4b94:	d015      	beq.n	4bc2 <__aeabi_dadd+0x5ce>
    4b96:	08ed      	lsrs	r5, r5, #3
    4b98:	074b      	lsls	r3, r1, #29
    4b9a:	432b      	orrs	r3, r5
    4b9c:	2580      	movs	r5, #128	; 0x80
    4b9e:	08c9      	lsrs	r1, r1, #3
    4ba0:	032d      	lsls	r5, r5, #12
    4ba2:	4229      	tst	r1, r5
    4ba4:	d007      	beq.n	4bb6 <__aeabi_dadd+0x5c2>
    4ba6:	08c4      	lsrs	r4, r0, #3
    4ba8:	422c      	tst	r4, r5
    4baa:	d104      	bne.n	4bb6 <__aeabi_dadd+0x5c2>
    4bac:	0741      	lsls	r1, r0, #29
    4bae:	000b      	movs	r3, r1
    4bb0:	0021      	movs	r1, r4
    4bb2:	08d2      	lsrs	r2, r2, #3
    4bb4:	4313      	orrs	r3, r2
    4bb6:	00c9      	lsls	r1, r1, #3
    4bb8:	0f5a      	lsrs	r2, r3, #29
    4bba:	4311      	orrs	r1, r2
    4bbc:	00dd      	lsls	r5, r3, #3
    4bbe:	4c21      	ldr	r4, [pc, #132]	; (4c44 <__aeabi_dadd+0x650>)
    4bc0:	e541      	b.n	4646 <__aeabi_dadd+0x52>
    4bc2:	4c20      	ldr	r4, [pc, #128]	; (4c44 <__aeabi_dadd+0x650>)
    4bc4:	e53f      	b.n	4646 <__aeabi_dadd+0x52>
    4bc6:	2000      	movs	r0, #0
    4bc8:	e754      	b.n	4a74 <__aeabi_dadd+0x480>
    4bca:	2600      	movs	r6, #0
    4bcc:	2500      	movs	r5, #0
    4bce:	e5d1      	b.n	4774 <__aeabi_dadd+0x180>
    4bd0:	0034      	movs	r4, r6
    4bd2:	000f      	movs	r7, r1
    4bd4:	3c20      	subs	r4, #32
    4bd6:	40e7      	lsrs	r7, r4
    4bd8:	003c      	movs	r4, r7
    4bda:	2e20      	cmp	r6, #32
    4bdc:	d02b      	beq.n	4c36 <__aeabi_dadd+0x642>
    4bde:	2740      	movs	r7, #64	; 0x40
    4be0:	1bbe      	subs	r6, r7, r6
    4be2:	40b1      	lsls	r1, r6
    4be4:	430d      	orrs	r5, r1
    4be6:	1e69      	subs	r1, r5, #1
    4be8:	418d      	sbcs	r5, r1
    4bea:	2100      	movs	r1, #0
    4bec:	432c      	orrs	r4, r5
    4bee:	e6bc      	b.n	496a <__aeabi_dadd+0x376>
    4bf0:	2180      	movs	r1, #128	; 0x80
    4bf2:	2600      	movs	r6, #0
    4bf4:	0309      	lsls	r1, r1, #12
    4bf6:	4c13      	ldr	r4, [pc, #76]	; (4c44 <__aeabi_dadd+0x650>)
    4bf8:	2500      	movs	r5, #0
    4bfa:	e5bb      	b.n	4774 <__aeabi_dadd+0x180>
    4bfc:	430d      	orrs	r5, r1
    4bfe:	1e69      	subs	r1, r5, #1
    4c00:	418d      	sbcs	r5, r1
    4c02:	2100      	movs	r1, #0
    4c04:	b2ed      	uxtb	r5, r5
    4c06:	e769      	b.n	4adc <__aeabi_dadd+0x4e8>
    4c08:	0001      	movs	r1, r0
    4c0a:	0015      	movs	r5, r2
    4c0c:	4c0d      	ldr	r4, [pc, #52]	; (4c44 <__aeabi_dadd+0x650>)
    4c0e:	e51a      	b.n	4646 <__aeabi_dadd+0x52>
    4c10:	0001      	movs	r1, r0
    4c12:	0015      	movs	r5, r2
    4c14:	e517      	b.n	4646 <__aeabi_dadd+0x52>
    4c16:	001c      	movs	r4, r3
    4c18:	000f      	movs	r7, r1
    4c1a:	3c20      	subs	r4, #32
    4c1c:	40e7      	lsrs	r7, r4
    4c1e:	003c      	movs	r4, r7
    4c20:	2b20      	cmp	r3, #32
    4c22:	d00c      	beq.n	4c3e <__aeabi_dadd+0x64a>
    4c24:	2740      	movs	r7, #64	; 0x40
    4c26:	1afb      	subs	r3, r7, r3
    4c28:	4099      	lsls	r1, r3
    4c2a:	430d      	orrs	r5, r1
    4c2c:	1e69      	subs	r1, r5, #1
    4c2e:	418d      	sbcs	r5, r1
    4c30:	2100      	movs	r1, #0
    4c32:	4325      	orrs	r5, r4
    4c34:	e752      	b.n	4adc <__aeabi_dadd+0x4e8>
    4c36:	2100      	movs	r1, #0
    4c38:	e7d4      	b.n	4be4 <__aeabi_dadd+0x5f0>
    4c3a:	001d      	movs	r5, r3
    4c3c:	e592      	b.n	4764 <__aeabi_dadd+0x170>
    4c3e:	2100      	movs	r1, #0
    4c40:	e7f3      	b.n	4c2a <__aeabi_dadd+0x636>
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	000007ff 	.word	0x000007ff
    4c48:	ff7fffff 	.word	0xff7fffff

00004c4c <__aeabi_ddiv>:
    4c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c4e:	4656      	mov	r6, sl
    4c50:	464d      	mov	r5, r9
    4c52:	4644      	mov	r4, r8
    4c54:	465f      	mov	r7, fp
    4c56:	b4f0      	push	{r4, r5, r6, r7}
    4c58:	001d      	movs	r5, r3
    4c5a:	030e      	lsls	r6, r1, #12
    4c5c:	004c      	lsls	r4, r1, #1
    4c5e:	0fcb      	lsrs	r3, r1, #31
    4c60:	b087      	sub	sp, #28
    4c62:	0007      	movs	r7, r0
    4c64:	4692      	mov	sl, r2
    4c66:	4681      	mov	r9, r0
    4c68:	0b36      	lsrs	r6, r6, #12
    4c6a:	0d64      	lsrs	r4, r4, #21
    4c6c:	4698      	mov	r8, r3
    4c6e:	d06a      	beq.n	4d46 <__aeabi_ddiv+0xfa>
    4c70:	4b6d      	ldr	r3, [pc, #436]	; (4e28 <__aeabi_ddiv+0x1dc>)
    4c72:	429c      	cmp	r4, r3
    4c74:	d035      	beq.n	4ce2 <__aeabi_ddiv+0x96>
    4c76:	2280      	movs	r2, #128	; 0x80
    4c78:	0f43      	lsrs	r3, r0, #29
    4c7a:	0412      	lsls	r2, r2, #16
    4c7c:	4313      	orrs	r3, r2
    4c7e:	00f6      	lsls	r6, r6, #3
    4c80:	431e      	orrs	r6, r3
    4c82:	00c3      	lsls	r3, r0, #3
    4c84:	4699      	mov	r9, r3
    4c86:	4b69      	ldr	r3, [pc, #420]	; (4e2c <__aeabi_ddiv+0x1e0>)
    4c88:	2700      	movs	r7, #0
    4c8a:	469c      	mov	ip, r3
    4c8c:	2300      	movs	r3, #0
    4c8e:	4464      	add	r4, ip
    4c90:	9302      	str	r3, [sp, #8]
    4c92:	032b      	lsls	r3, r5, #12
    4c94:	0068      	lsls	r0, r5, #1
    4c96:	0b1b      	lsrs	r3, r3, #12
    4c98:	0fed      	lsrs	r5, r5, #31
    4c9a:	4651      	mov	r1, sl
    4c9c:	469b      	mov	fp, r3
    4c9e:	0d40      	lsrs	r0, r0, #21
    4ca0:	9500      	str	r5, [sp, #0]
    4ca2:	d100      	bne.n	4ca6 <__aeabi_ddiv+0x5a>
    4ca4:	e078      	b.n	4d98 <__aeabi_ddiv+0x14c>
    4ca6:	4b60      	ldr	r3, [pc, #384]	; (4e28 <__aeabi_ddiv+0x1dc>)
    4ca8:	4298      	cmp	r0, r3
    4caa:	d06c      	beq.n	4d86 <__aeabi_ddiv+0x13a>
    4cac:	465b      	mov	r3, fp
    4cae:	00da      	lsls	r2, r3, #3
    4cb0:	0f4b      	lsrs	r3, r1, #29
    4cb2:	2180      	movs	r1, #128	; 0x80
    4cb4:	0409      	lsls	r1, r1, #16
    4cb6:	430b      	orrs	r3, r1
    4cb8:	4313      	orrs	r3, r2
    4cba:	469b      	mov	fp, r3
    4cbc:	4653      	mov	r3, sl
    4cbe:	00d9      	lsls	r1, r3, #3
    4cc0:	4b5a      	ldr	r3, [pc, #360]	; (4e2c <__aeabi_ddiv+0x1e0>)
    4cc2:	469c      	mov	ip, r3
    4cc4:	2300      	movs	r3, #0
    4cc6:	4460      	add	r0, ip
    4cc8:	4642      	mov	r2, r8
    4cca:	1a20      	subs	r0, r4, r0
    4ccc:	406a      	eors	r2, r5
    4cce:	4692      	mov	sl, r2
    4cd0:	9001      	str	r0, [sp, #4]
    4cd2:	431f      	orrs	r7, r3
    4cd4:	2f0f      	cmp	r7, #15
    4cd6:	d900      	bls.n	4cda <__aeabi_ddiv+0x8e>
    4cd8:	e0b0      	b.n	4e3c <__aeabi_ddiv+0x1f0>
    4cda:	4855      	ldr	r0, [pc, #340]	; (4e30 <__aeabi_ddiv+0x1e4>)
    4cdc:	00bf      	lsls	r7, r7, #2
    4cde:	59c0      	ldr	r0, [r0, r7]
    4ce0:	4687      	mov	pc, r0
    4ce2:	4337      	orrs	r7, r6
    4ce4:	d000      	beq.n	4ce8 <__aeabi_ddiv+0x9c>
    4ce6:	e088      	b.n	4dfa <__aeabi_ddiv+0x1ae>
    4ce8:	2300      	movs	r3, #0
    4cea:	4699      	mov	r9, r3
    4cec:	3302      	adds	r3, #2
    4cee:	2708      	movs	r7, #8
    4cf0:	2600      	movs	r6, #0
    4cf2:	9302      	str	r3, [sp, #8]
    4cf4:	e7cd      	b.n	4c92 <__aeabi_ddiv+0x46>
    4cf6:	4643      	mov	r3, r8
    4cf8:	46b3      	mov	fp, r6
    4cfa:	4649      	mov	r1, r9
    4cfc:	9300      	str	r3, [sp, #0]
    4cfe:	9b02      	ldr	r3, [sp, #8]
    4d00:	9a00      	ldr	r2, [sp, #0]
    4d02:	4692      	mov	sl, r2
    4d04:	2b02      	cmp	r3, #2
    4d06:	d000      	beq.n	4d0a <__aeabi_ddiv+0xbe>
    4d08:	e1bf      	b.n	508a <__aeabi_ddiv+0x43e>
    4d0a:	2100      	movs	r1, #0
    4d0c:	4653      	mov	r3, sl
    4d0e:	2201      	movs	r2, #1
    4d10:	2600      	movs	r6, #0
    4d12:	4689      	mov	r9, r1
    4d14:	401a      	ands	r2, r3
    4d16:	4b44      	ldr	r3, [pc, #272]	; (4e28 <__aeabi_ddiv+0x1dc>)
    4d18:	2100      	movs	r1, #0
    4d1a:	0336      	lsls	r6, r6, #12
    4d1c:	0d0c      	lsrs	r4, r1, #20
    4d1e:	0524      	lsls	r4, r4, #20
    4d20:	0b36      	lsrs	r6, r6, #12
    4d22:	4326      	orrs	r6, r4
    4d24:	4c43      	ldr	r4, [pc, #268]	; (4e34 <__aeabi_ddiv+0x1e8>)
    4d26:	051b      	lsls	r3, r3, #20
    4d28:	4026      	ands	r6, r4
    4d2a:	431e      	orrs	r6, r3
    4d2c:	0076      	lsls	r6, r6, #1
    4d2e:	07d2      	lsls	r2, r2, #31
    4d30:	0876      	lsrs	r6, r6, #1
    4d32:	4316      	orrs	r6, r2
    4d34:	4648      	mov	r0, r9
    4d36:	0031      	movs	r1, r6
    4d38:	b007      	add	sp, #28
    4d3a:	bc3c      	pop	{r2, r3, r4, r5}
    4d3c:	4690      	mov	r8, r2
    4d3e:	4699      	mov	r9, r3
    4d40:	46a2      	mov	sl, r4
    4d42:	46ab      	mov	fp, r5
    4d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d46:	0033      	movs	r3, r6
    4d48:	4303      	orrs	r3, r0
    4d4a:	d04f      	beq.n	4dec <__aeabi_ddiv+0x1a0>
    4d4c:	2e00      	cmp	r6, #0
    4d4e:	d100      	bne.n	4d52 <__aeabi_ddiv+0x106>
    4d50:	e1bc      	b.n	50cc <__aeabi_ddiv+0x480>
    4d52:	0030      	movs	r0, r6
    4d54:	f001 fba8 	bl	64a8 <__clzsi2>
    4d58:	0003      	movs	r3, r0
    4d5a:	3b0b      	subs	r3, #11
    4d5c:	2b1c      	cmp	r3, #28
    4d5e:	dd00      	ble.n	4d62 <__aeabi_ddiv+0x116>
    4d60:	e1ad      	b.n	50be <__aeabi_ddiv+0x472>
    4d62:	221d      	movs	r2, #29
    4d64:	0001      	movs	r1, r0
    4d66:	1ad3      	subs	r3, r2, r3
    4d68:	3908      	subs	r1, #8
    4d6a:	003a      	movs	r2, r7
    4d6c:	408f      	lsls	r7, r1
    4d6e:	408e      	lsls	r6, r1
    4d70:	40da      	lsrs	r2, r3
    4d72:	46b9      	mov	r9, r7
    4d74:	4316      	orrs	r6, r2
    4d76:	4b30      	ldr	r3, [pc, #192]	; (4e38 <__aeabi_ddiv+0x1ec>)
    4d78:	2700      	movs	r7, #0
    4d7a:	469c      	mov	ip, r3
    4d7c:	2300      	movs	r3, #0
    4d7e:	4460      	add	r0, ip
    4d80:	4244      	negs	r4, r0
    4d82:	9302      	str	r3, [sp, #8]
    4d84:	e785      	b.n	4c92 <__aeabi_ddiv+0x46>
    4d86:	4653      	mov	r3, sl
    4d88:	465a      	mov	r2, fp
    4d8a:	4313      	orrs	r3, r2
    4d8c:	d12c      	bne.n	4de8 <__aeabi_ddiv+0x19c>
    4d8e:	2300      	movs	r3, #0
    4d90:	2100      	movs	r1, #0
    4d92:	469b      	mov	fp, r3
    4d94:	3302      	adds	r3, #2
    4d96:	e797      	b.n	4cc8 <__aeabi_ddiv+0x7c>
    4d98:	430b      	orrs	r3, r1
    4d9a:	d020      	beq.n	4dde <__aeabi_ddiv+0x192>
    4d9c:	465b      	mov	r3, fp
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d100      	bne.n	4da4 <__aeabi_ddiv+0x158>
    4da2:	e19e      	b.n	50e2 <__aeabi_ddiv+0x496>
    4da4:	4658      	mov	r0, fp
    4da6:	f001 fb7f 	bl	64a8 <__clzsi2>
    4daa:	0003      	movs	r3, r0
    4dac:	3b0b      	subs	r3, #11
    4dae:	2b1c      	cmp	r3, #28
    4db0:	dd00      	ble.n	4db4 <__aeabi_ddiv+0x168>
    4db2:	e18f      	b.n	50d4 <__aeabi_ddiv+0x488>
    4db4:	0002      	movs	r2, r0
    4db6:	4659      	mov	r1, fp
    4db8:	3a08      	subs	r2, #8
    4dba:	4091      	lsls	r1, r2
    4dbc:	468b      	mov	fp, r1
    4dbe:	211d      	movs	r1, #29
    4dc0:	1acb      	subs	r3, r1, r3
    4dc2:	4651      	mov	r1, sl
    4dc4:	40d9      	lsrs	r1, r3
    4dc6:	000b      	movs	r3, r1
    4dc8:	4659      	mov	r1, fp
    4dca:	430b      	orrs	r3, r1
    4dcc:	4651      	mov	r1, sl
    4dce:	469b      	mov	fp, r3
    4dd0:	4091      	lsls	r1, r2
    4dd2:	4b19      	ldr	r3, [pc, #100]	; (4e38 <__aeabi_ddiv+0x1ec>)
    4dd4:	469c      	mov	ip, r3
    4dd6:	4460      	add	r0, ip
    4dd8:	4240      	negs	r0, r0
    4dda:	2300      	movs	r3, #0
    4ddc:	e774      	b.n	4cc8 <__aeabi_ddiv+0x7c>
    4dde:	2300      	movs	r3, #0
    4de0:	2100      	movs	r1, #0
    4de2:	469b      	mov	fp, r3
    4de4:	3301      	adds	r3, #1
    4de6:	e76f      	b.n	4cc8 <__aeabi_ddiv+0x7c>
    4de8:	2303      	movs	r3, #3
    4dea:	e76d      	b.n	4cc8 <__aeabi_ddiv+0x7c>
    4dec:	2300      	movs	r3, #0
    4dee:	4699      	mov	r9, r3
    4df0:	3301      	adds	r3, #1
    4df2:	2704      	movs	r7, #4
    4df4:	2600      	movs	r6, #0
    4df6:	9302      	str	r3, [sp, #8]
    4df8:	e74b      	b.n	4c92 <__aeabi_ddiv+0x46>
    4dfa:	2303      	movs	r3, #3
    4dfc:	270c      	movs	r7, #12
    4dfe:	9302      	str	r3, [sp, #8]
    4e00:	e747      	b.n	4c92 <__aeabi_ddiv+0x46>
    4e02:	2201      	movs	r2, #1
    4e04:	1ad5      	subs	r5, r2, r3
    4e06:	2d38      	cmp	r5, #56	; 0x38
    4e08:	dc00      	bgt.n	4e0c <__aeabi_ddiv+0x1c0>
    4e0a:	e1b0      	b.n	516e <__aeabi_ddiv+0x522>
    4e0c:	4653      	mov	r3, sl
    4e0e:	401a      	ands	r2, r3
    4e10:	2100      	movs	r1, #0
    4e12:	2300      	movs	r3, #0
    4e14:	2600      	movs	r6, #0
    4e16:	4689      	mov	r9, r1
    4e18:	e77e      	b.n	4d18 <__aeabi_ddiv+0xcc>
    4e1a:	2300      	movs	r3, #0
    4e1c:	2680      	movs	r6, #128	; 0x80
    4e1e:	4699      	mov	r9, r3
    4e20:	2200      	movs	r2, #0
    4e22:	0336      	lsls	r6, r6, #12
    4e24:	4b00      	ldr	r3, [pc, #0]	; (4e28 <__aeabi_ddiv+0x1dc>)
    4e26:	e777      	b.n	4d18 <__aeabi_ddiv+0xcc>
    4e28:	000007ff 	.word	0x000007ff
    4e2c:	fffffc01 	.word	0xfffffc01
    4e30:	000068b8 	.word	0x000068b8
    4e34:	800fffff 	.word	0x800fffff
    4e38:	000003f3 	.word	0x000003f3
    4e3c:	455e      	cmp	r6, fp
    4e3e:	d900      	bls.n	4e42 <__aeabi_ddiv+0x1f6>
    4e40:	e172      	b.n	5128 <__aeabi_ddiv+0x4dc>
    4e42:	d100      	bne.n	4e46 <__aeabi_ddiv+0x1fa>
    4e44:	e16d      	b.n	5122 <__aeabi_ddiv+0x4d6>
    4e46:	9b01      	ldr	r3, [sp, #4]
    4e48:	464d      	mov	r5, r9
    4e4a:	3b01      	subs	r3, #1
    4e4c:	9301      	str	r3, [sp, #4]
    4e4e:	2300      	movs	r3, #0
    4e50:	0034      	movs	r4, r6
    4e52:	9302      	str	r3, [sp, #8]
    4e54:	465b      	mov	r3, fp
    4e56:	021e      	lsls	r6, r3, #8
    4e58:	0e0b      	lsrs	r3, r1, #24
    4e5a:	431e      	orrs	r6, r3
    4e5c:	020b      	lsls	r3, r1, #8
    4e5e:	9303      	str	r3, [sp, #12]
    4e60:	0c33      	lsrs	r3, r6, #16
    4e62:	4699      	mov	r9, r3
    4e64:	0433      	lsls	r3, r6, #16
    4e66:	0c1b      	lsrs	r3, r3, #16
    4e68:	4649      	mov	r1, r9
    4e6a:	0020      	movs	r0, r4
    4e6c:	9300      	str	r3, [sp, #0]
    4e6e:	f001 fa8f 	bl	6390 <__aeabi_uidiv>
    4e72:	9b00      	ldr	r3, [sp, #0]
    4e74:	0037      	movs	r7, r6
    4e76:	4343      	muls	r3, r0
    4e78:	0006      	movs	r6, r0
    4e7a:	4649      	mov	r1, r9
    4e7c:	0020      	movs	r0, r4
    4e7e:	4698      	mov	r8, r3
    4e80:	f001 fb0c 	bl	649c <__aeabi_uidivmod>
    4e84:	0c2c      	lsrs	r4, r5, #16
    4e86:	0409      	lsls	r1, r1, #16
    4e88:	430c      	orrs	r4, r1
    4e8a:	45a0      	cmp	r8, r4
    4e8c:	d909      	bls.n	4ea2 <__aeabi_ddiv+0x256>
    4e8e:	19e4      	adds	r4, r4, r7
    4e90:	1e73      	subs	r3, r6, #1
    4e92:	42a7      	cmp	r7, r4
    4e94:	d900      	bls.n	4e98 <__aeabi_ddiv+0x24c>
    4e96:	e15c      	b.n	5152 <__aeabi_ddiv+0x506>
    4e98:	45a0      	cmp	r8, r4
    4e9a:	d800      	bhi.n	4e9e <__aeabi_ddiv+0x252>
    4e9c:	e159      	b.n	5152 <__aeabi_ddiv+0x506>
    4e9e:	3e02      	subs	r6, #2
    4ea0:	19e4      	adds	r4, r4, r7
    4ea2:	4643      	mov	r3, r8
    4ea4:	1ae4      	subs	r4, r4, r3
    4ea6:	4649      	mov	r1, r9
    4ea8:	0020      	movs	r0, r4
    4eaa:	f001 fa71 	bl	6390 <__aeabi_uidiv>
    4eae:	0003      	movs	r3, r0
    4eb0:	9a00      	ldr	r2, [sp, #0]
    4eb2:	4680      	mov	r8, r0
    4eb4:	4353      	muls	r3, r2
    4eb6:	4649      	mov	r1, r9
    4eb8:	0020      	movs	r0, r4
    4eba:	469b      	mov	fp, r3
    4ebc:	f001 faee 	bl	649c <__aeabi_uidivmod>
    4ec0:	042a      	lsls	r2, r5, #16
    4ec2:	0409      	lsls	r1, r1, #16
    4ec4:	0c12      	lsrs	r2, r2, #16
    4ec6:	430a      	orrs	r2, r1
    4ec8:	4593      	cmp	fp, r2
    4eca:	d90d      	bls.n	4ee8 <__aeabi_ddiv+0x29c>
    4ecc:	4643      	mov	r3, r8
    4ece:	19d2      	adds	r2, r2, r7
    4ed0:	3b01      	subs	r3, #1
    4ed2:	4297      	cmp	r7, r2
    4ed4:	d900      	bls.n	4ed8 <__aeabi_ddiv+0x28c>
    4ed6:	e13a      	b.n	514e <__aeabi_ddiv+0x502>
    4ed8:	4593      	cmp	fp, r2
    4eda:	d800      	bhi.n	4ede <__aeabi_ddiv+0x292>
    4edc:	e137      	b.n	514e <__aeabi_ddiv+0x502>
    4ede:	2302      	movs	r3, #2
    4ee0:	425b      	negs	r3, r3
    4ee2:	469c      	mov	ip, r3
    4ee4:	19d2      	adds	r2, r2, r7
    4ee6:	44e0      	add	r8, ip
    4ee8:	465b      	mov	r3, fp
    4eea:	1ad2      	subs	r2, r2, r3
    4eec:	4643      	mov	r3, r8
    4eee:	0436      	lsls	r6, r6, #16
    4ef0:	4333      	orrs	r3, r6
    4ef2:	469b      	mov	fp, r3
    4ef4:	9903      	ldr	r1, [sp, #12]
    4ef6:	0c18      	lsrs	r0, r3, #16
    4ef8:	0c0b      	lsrs	r3, r1, #16
    4efa:	001d      	movs	r5, r3
    4efc:	9305      	str	r3, [sp, #20]
    4efe:	0409      	lsls	r1, r1, #16
    4f00:	465b      	mov	r3, fp
    4f02:	0c09      	lsrs	r1, r1, #16
    4f04:	000c      	movs	r4, r1
    4f06:	041b      	lsls	r3, r3, #16
    4f08:	0c1b      	lsrs	r3, r3, #16
    4f0a:	4344      	muls	r4, r0
    4f0c:	9104      	str	r1, [sp, #16]
    4f0e:	4359      	muls	r1, r3
    4f10:	436b      	muls	r3, r5
    4f12:	4368      	muls	r0, r5
    4f14:	191b      	adds	r3, r3, r4
    4f16:	0c0d      	lsrs	r5, r1, #16
    4f18:	18eb      	adds	r3, r5, r3
    4f1a:	429c      	cmp	r4, r3
    4f1c:	d903      	bls.n	4f26 <__aeabi_ddiv+0x2da>
    4f1e:	2480      	movs	r4, #128	; 0x80
    4f20:	0264      	lsls	r4, r4, #9
    4f22:	46a4      	mov	ip, r4
    4f24:	4460      	add	r0, ip
    4f26:	0c1c      	lsrs	r4, r3, #16
    4f28:	0409      	lsls	r1, r1, #16
    4f2a:	041b      	lsls	r3, r3, #16
    4f2c:	0c09      	lsrs	r1, r1, #16
    4f2e:	1820      	adds	r0, r4, r0
    4f30:	185d      	adds	r5, r3, r1
    4f32:	4282      	cmp	r2, r0
    4f34:	d200      	bcs.n	4f38 <__aeabi_ddiv+0x2ec>
    4f36:	e0de      	b.n	50f6 <__aeabi_ddiv+0x4aa>
    4f38:	d100      	bne.n	4f3c <__aeabi_ddiv+0x2f0>
    4f3a:	e0d7      	b.n	50ec <__aeabi_ddiv+0x4a0>
    4f3c:	1a16      	subs	r6, r2, r0
    4f3e:	9b02      	ldr	r3, [sp, #8]
    4f40:	469c      	mov	ip, r3
    4f42:	1b5d      	subs	r5, r3, r5
    4f44:	45ac      	cmp	ip, r5
    4f46:	419b      	sbcs	r3, r3
    4f48:	425b      	negs	r3, r3
    4f4a:	1af6      	subs	r6, r6, r3
    4f4c:	42b7      	cmp	r7, r6
    4f4e:	d100      	bne.n	4f52 <__aeabi_ddiv+0x306>
    4f50:	e106      	b.n	5160 <__aeabi_ddiv+0x514>
    4f52:	4649      	mov	r1, r9
    4f54:	0030      	movs	r0, r6
    4f56:	f001 fa1b 	bl	6390 <__aeabi_uidiv>
    4f5a:	9b00      	ldr	r3, [sp, #0]
    4f5c:	0004      	movs	r4, r0
    4f5e:	4343      	muls	r3, r0
    4f60:	4649      	mov	r1, r9
    4f62:	0030      	movs	r0, r6
    4f64:	4698      	mov	r8, r3
    4f66:	f001 fa99 	bl	649c <__aeabi_uidivmod>
    4f6a:	0c2e      	lsrs	r6, r5, #16
    4f6c:	0409      	lsls	r1, r1, #16
    4f6e:	430e      	orrs	r6, r1
    4f70:	45b0      	cmp	r8, r6
    4f72:	d909      	bls.n	4f88 <__aeabi_ddiv+0x33c>
    4f74:	19f6      	adds	r6, r6, r7
    4f76:	1e63      	subs	r3, r4, #1
    4f78:	42b7      	cmp	r7, r6
    4f7a:	d900      	bls.n	4f7e <__aeabi_ddiv+0x332>
    4f7c:	e0f3      	b.n	5166 <__aeabi_ddiv+0x51a>
    4f7e:	45b0      	cmp	r8, r6
    4f80:	d800      	bhi.n	4f84 <__aeabi_ddiv+0x338>
    4f82:	e0f0      	b.n	5166 <__aeabi_ddiv+0x51a>
    4f84:	3c02      	subs	r4, #2
    4f86:	19f6      	adds	r6, r6, r7
    4f88:	4643      	mov	r3, r8
    4f8a:	1af3      	subs	r3, r6, r3
    4f8c:	4649      	mov	r1, r9
    4f8e:	0018      	movs	r0, r3
    4f90:	9302      	str	r3, [sp, #8]
    4f92:	f001 f9fd 	bl	6390 <__aeabi_uidiv>
    4f96:	9b00      	ldr	r3, [sp, #0]
    4f98:	0006      	movs	r6, r0
    4f9a:	4343      	muls	r3, r0
    4f9c:	4649      	mov	r1, r9
    4f9e:	9802      	ldr	r0, [sp, #8]
    4fa0:	4698      	mov	r8, r3
    4fa2:	f001 fa7b 	bl	649c <__aeabi_uidivmod>
    4fa6:	042d      	lsls	r5, r5, #16
    4fa8:	0409      	lsls	r1, r1, #16
    4faa:	0c2d      	lsrs	r5, r5, #16
    4fac:	430d      	orrs	r5, r1
    4fae:	45a8      	cmp	r8, r5
    4fb0:	d909      	bls.n	4fc6 <__aeabi_ddiv+0x37a>
    4fb2:	19ed      	adds	r5, r5, r7
    4fb4:	1e73      	subs	r3, r6, #1
    4fb6:	42af      	cmp	r7, r5
    4fb8:	d900      	bls.n	4fbc <__aeabi_ddiv+0x370>
    4fba:	e0d6      	b.n	516a <__aeabi_ddiv+0x51e>
    4fbc:	45a8      	cmp	r8, r5
    4fbe:	d800      	bhi.n	4fc2 <__aeabi_ddiv+0x376>
    4fc0:	e0d3      	b.n	516a <__aeabi_ddiv+0x51e>
    4fc2:	3e02      	subs	r6, #2
    4fc4:	19ed      	adds	r5, r5, r7
    4fc6:	0424      	lsls	r4, r4, #16
    4fc8:	0021      	movs	r1, r4
    4fca:	4643      	mov	r3, r8
    4fcc:	4331      	orrs	r1, r6
    4fce:	9e04      	ldr	r6, [sp, #16]
    4fd0:	9a05      	ldr	r2, [sp, #20]
    4fd2:	0030      	movs	r0, r6
    4fd4:	1aed      	subs	r5, r5, r3
    4fd6:	040b      	lsls	r3, r1, #16
    4fd8:	0c0c      	lsrs	r4, r1, #16
    4fda:	0c1b      	lsrs	r3, r3, #16
    4fdc:	4358      	muls	r0, r3
    4fde:	4366      	muls	r6, r4
    4fe0:	4353      	muls	r3, r2
    4fe2:	4354      	muls	r4, r2
    4fe4:	199a      	adds	r2, r3, r6
    4fe6:	0c03      	lsrs	r3, r0, #16
    4fe8:	189b      	adds	r3, r3, r2
    4fea:	429e      	cmp	r6, r3
    4fec:	d903      	bls.n	4ff6 <__aeabi_ddiv+0x3aa>
    4fee:	2280      	movs	r2, #128	; 0x80
    4ff0:	0252      	lsls	r2, r2, #9
    4ff2:	4694      	mov	ip, r2
    4ff4:	4464      	add	r4, ip
    4ff6:	0c1a      	lsrs	r2, r3, #16
    4ff8:	0400      	lsls	r0, r0, #16
    4ffa:	041b      	lsls	r3, r3, #16
    4ffc:	0c00      	lsrs	r0, r0, #16
    4ffe:	1914      	adds	r4, r2, r4
    5000:	181b      	adds	r3, r3, r0
    5002:	42a5      	cmp	r5, r4
    5004:	d350      	bcc.n	50a8 <__aeabi_ddiv+0x45c>
    5006:	d04d      	beq.n	50a4 <__aeabi_ddiv+0x458>
    5008:	2301      	movs	r3, #1
    500a:	4319      	orrs	r1, r3
    500c:	4a96      	ldr	r2, [pc, #600]	; (5268 <__aeabi_ddiv+0x61c>)
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	4694      	mov	ip, r2
    5012:	4463      	add	r3, ip
    5014:	2b00      	cmp	r3, #0
    5016:	dc00      	bgt.n	501a <__aeabi_ddiv+0x3ce>
    5018:	e6f3      	b.n	4e02 <__aeabi_ddiv+0x1b6>
    501a:	074a      	lsls	r2, r1, #29
    501c:	d009      	beq.n	5032 <__aeabi_ddiv+0x3e6>
    501e:	220f      	movs	r2, #15
    5020:	400a      	ands	r2, r1
    5022:	2a04      	cmp	r2, #4
    5024:	d005      	beq.n	5032 <__aeabi_ddiv+0x3e6>
    5026:	1d0a      	adds	r2, r1, #4
    5028:	428a      	cmp	r2, r1
    502a:	4189      	sbcs	r1, r1
    502c:	4249      	negs	r1, r1
    502e:	448b      	add	fp, r1
    5030:	0011      	movs	r1, r2
    5032:	465a      	mov	r2, fp
    5034:	01d2      	lsls	r2, r2, #7
    5036:	d508      	bpl.n	504a <__aeabi_ddiv+0x3fe>
    5038:	465a      	mov	r2, fp
    503a:	4b8c      	ldr	r3, [pc, #560]	; (526c <__aeabi_ddiv+0x620>)
    503c:	401a      	ands	r2, r3
    503e:	4693      	mov	fp, r2
    5040:	2280      	movs	r2, #128	; 0x80
    5042:	00d2      	lsls	r2, r2, #3
    5044:	4694      	mov	ip, r2
    5046:	9b01      	ldr	r3, [sp, #4]
    5048:	4463      	add	r3, ip
    504a:	4a89      	ldr	r2, [pc, #548]	; (5270 <__aeabi_ddiv+0x624>)
    504c:	4293      	cmp	r3, r2
    504e:	dd00      	ble.n	5052 <__aeabi_ddiv+0x406>
    5050:	e65b      	b.n	4d0a <__aeabi_ddiv+0xbe>
    5052:	465a      	mov	r2, fp
    5054:	08c9      	lsrs	r1, r1, #3
    5056:	0750      	lsls	r0, r2, #29
    5058:	4308      	orrs	r0, r1
    505a:	0256      	lsls	r6, r2, #9
    505c:	4651      	mov	r1, sl
    505e:	2201      	movs	r2, #1
    5060:	055b      	lsls	r3, r3, #21
    5062:	4681      	mov	r9, r0
    5064:	0b36      	lsrs	r6, r6, #12
    5066:	0d5b      	lsrs	r3, r3, #21
    5068:	400a      	ands	r2, r1
    506a:	e655      	b.n	4d18 <__aeabi_ddiv+0xcc>
    506c:	2380      	movs	r3, #128	; 0x80
    506e:	031b      	lsls	r3, r3, #12
    5070:	421e      	tst	r6, r3
    5072:	d011      	beq.n	5098 <__aeabi_ddiv+0x44c>
    5074:	465a      	mov	r2, fp
    5076:	421a      	tst	r2, r3
    5078:	d10e      	bne.n	5098 <__aeabi_ddiv+0x44c>
    507a:	465e      	mov	r6, fp
    507c:	431e      	orrs	r6, r3
    507e:	0336      	lsls	r6, r6, #12
    5080:	0b36      	lsrs	r6, r6, #12
    5082:	002a      	movs	r2, r5
    5084:	4689      	mov	r9, r1
    5086:	4b7b      	ldr	r3, [pc, #492]	; (5274 <__aeabi_ddiv+0x628>)
    5088:	e646      	b.n	4d18 <__aeabi_ddiv+0xcc>
    508a:	2b03      	cmp	r3, #3
    508c:	d100      	bne.n	5090 <__aeabi_ddiv+0x444>
    508e:	e0e1      	b.n	5254 <__aeabi_ddiv+0x608>
    5090:	2b01      	cmp	r3, #1
    5092:	d1bb      	bne.n	500c <__aeabi_ddiv+0x3c0>
    5094:	401a      	ands	r2, r3
    5096:	e6bb      	b.n	4e10 <__aeabi_ddiv+0x1c4>
    5098:	431e      	orrs	r6, r3
    509a:	0336      	lsls	r6, r6, #12
    509c:	0b36      	lsrs	r6, r6, #12
    509e:	4642      	mov	r2, r8
    50a0:	4b74      	ldr	r3, [pc, #464]	; (5274 <__aeabi_ddiv+0x628>)
    50a2:	e639      	b.n	4d18 <__aeabi_ddiv+0xcc>
    50a4:	2b00      	cmp	r3, #0
    50a6:	d0b1      	beq.n	500c <__aeabi_ddiv+0x3c0>
    50a8:	197d      	adds	r5, r7, r5
    50aa:	1e4a      	subs	r2, r1, #1
    50ac:	42af      	cmp	r7, r5
    50ae:	d952      	bls.n	5156 <__aeabi_ddiv+0x50a>
    50b0:	0011      	movs	r1, r2
    50b2:	42a5      	cmp	r5, r4
    50b4:	d1a8      	bne.n	5008 <__aeabi_ddiv+0x3bc>
    50b6:	9a03      	ldr	r2, [sp, #12]
    50b8:	429a      	cmp	r2, r3
    50ba:	d1a5      	bne.n	5008 <__aeabi_ddiv+0x3bc>
    50bc:	e7a6      	b.n	500c <__aeabi_ddiv+0x3c0>
    50be:	0003      	movs	r3, r0
    50c0:	003e      	movs	r6, r7
    50c2:	3b28      	subs	r3, #40	; 0x28
    50c4:	409e      	lsls	r6, r3
    50c6:	2300      	movs	r3, #0
    50c8:	4699      	mov	r9, r3
    50ca:	e654      	b.n	4d76 <__aeabi_ddiv+0x12a>
    50cc:	f001 f9ec 	bl	64a8 <__clzsi2>
    50d0:	3020      	adds	r0, #32
    50d2:	e641      	b.n	4d58 <__aeabi_ddiv+0x10c>
    50d4:	0003      	movs	r3, r0
    50d6:	4652      	mov	r2, sl
    50d8:	3b28      	subs	r3, #40	; 0x28
    50da:	409a      	lsls	r2, r3
    50dc:	2100      	movs	r1, #0
    50de:	4693      	mov	fp, r2
    50e0:	e677      	b.n	4dd2 <__aeabi_ddiv+0x186>
    50e2:	4650      	mov	r0, sl
    50e4:	f001 f9e0 	bl	64a8 <__clzsi2>
    50e8:	3020      	adds	r0, #32
    50ea:	e65e      	b.n	4daa <__aeabi_ddiv+0x15e>
    50ec:	9b02      	ldr	r3, [sp, #8]
    50ee:	2600      	movs	r6, #0
    50f0:	42ab      	cmp	r3, r5
    50f2:	d300      	bcc.n	50f6 <__aeabi_ddiv+0x4aa>
    50f4:	e723      	b.n	4f3e <__aeabi_ddiv+0x2f2>
    50f6:	9e03      	ldr	r6, [sp, #12]
    50f8:	9902      	ldr	r1, [sp, #8]
    50fa:	46b4      	mov	ip, r6
    50fc:	4461      	add	r1, ip
    50fe:	4688      	mov	r8, r1
    5100:	45b0      	cmp	r8, r6
    5102:	41b6      	sbcs	r6, r6
    5104:	465b      	mov	r3, fp
    5106:	4276      	negs	r6, r6
    5108:	19f6      	adds	r6, r6, r7
    510a:	18b2      	adds	r2, r6, r2
    510c:	3b01      	subs	r3, #1
    510e:	9102      	str	r1, [sp, #8]
    5110:	4297      	cmp	r7, r2
    5112:	d213      	bcs.n	513c <__aeabi_ddiv+0x4f0>
    5114:	4290      	cmp	r0, r2
    5116:	d84f      	bhi.n	51b8 <__aeabi_ddiv+0x56c>
    5118:	d100      	bne.n	511c <__aeabi_ddiv+0x4d0>
    511a:	e08e      	b.n	523a <__aeabi_ddiv+0x5ee>
    511c:	1a16      	subs	r6, r2, r0
    511e:	469b      	mov	fp, r3
    5120:	e70d      	b.n	4f3e <__aeabi_ddiv+0x2f2>
    5122:	4589      	cmp	r9, r1
    5124:	d200      	bcs.n	5128 <__aeabi_ddiv+0x4dc>
    5126:	e68e      	b.n	4e46 <__aeabi_ddiv+0x1fa>
    5128:	0874      	lsrs	r4, r6, #1
    512a:	464b      	mov	r3, r9
    512c:	07f6      	lsls	r6, r6, #31
    512e:	0035      	movs	r5, r6
    5130:	085b      	lsrs	r3, r3, #1
    5132:	431d      	orrs	r5, r3
    5134:	464b      	mov	r3, r9
    5136:	07db      	lsls	r3, r3, #31
    5138:	9302      	str	r3, [sp, #8]
    513a:	e68b      	b.n	4e54 <__aeabi_ddiv+0x208>
    513c:	4297      	cmp	r7, r2
    513e:	d1ed      	bne.n	511c <__aeabi_ddiv+0x4d0>
    5140:	9903      	ldr	r1, [sp, #12]
    5142:	9c02      	ldr	r4, [sp, #8]
    5144:	42a1      	cmp	r1, r4
    5146:	d9e5      	bls.n	5114 <__aeabi_ddiv+0x4c8>
    5148:	1a3e      	subs	r6, r7, r0
    514a:	469b      	mov	fp, r3
    514c:	e6f7      	b.n	4f3e <__aeabi_ddiv+0x2f2>
    514e:	4698      	mov	r8, r3
    5150:	e6ca      	b.n	4ee8 <__aeabi_ddiv+0x29c>
    5152:	001e      	movs	r6, r3
    5154:	e6a5      	b.n	4ea2 <__aeabi_ddiv+0x256>
    5156:	42ac      	cmp	r4, r5
    5158:	d83e      	bhi.n	51d8 <__aeabi_ddiv+0x58c>
    515a:	d074      	beq.n	5246 <__aeabi_ddiv+0x5fa>
    515c:	0011      	movs	r1, r2
    515e:	e753      	b.n	5008 <__aeabi_ddiv+0x3bc>
    5160:	2101      	movs	r1, #1
    5162:	4249      	negs	r1, r1
    5164:	e752      	b.n	500c <__aeabi_ddiv+0x3c0>
    5166:	001c      	movs	r4, r3
    5168:	e70e      	b.n	4f88 <__aeabi_ddiv+0x33c>
    516a:	001e      	movs	r6, r3
    516c:	e72b      	b.n	4fc6 <__aeabi_ddiv+0x37a>
    516e:	2d1f      	cmp	r5, #31
    5170:	dc3c      	bgt.n	51ec <__aeabi_ddiv+0x5a0>
    5172:	2320      	movs	r3, #32
    5174:	000a      	movs	r2, r1
    5176:	4658      	mov	r0, fp
    5178:	1b5b      	subs	r3, r3, r5
    517a:	4098      	lsls	r0, r3
    517c:	40ea      	lsrs	r2, r5
    517e:	4099      	lsls	r1, r3
    5180:	4302      	orrs	r2, r0
    5182:	1e48      	subs	r0, r1, #1
    5184:	4181      	sbcs	r1, r0
    5186:	465e      	mov	r6, fp
    5188:	4311      	orrs	r1, r2
    518a:	40ee      	lsrs	r6, r5
    518c:	074b      	lsls	r3, r1, #29
    518e:	d009      	beq.n	51a4 <__aeabi_ddiv+0x558>
    5190:	230f      	movs	r3, #15
    5192:	400b      	ands	r3, r1
    5194:	2b04      	cmp	r3, #4
    5196:	d005      	beq.n	51a4 <__aeabi_ddiv+0x558>
    5198:	000b      	movs	r3, r1
    519a:	1d19      	adds	r1, r3, #4
    519c:	4299      	cmp	r1, r3
    519e:	419b      	sbcs	r3, r3
    51a0:	425b      	negs	r3, r3
    51a2:	18f6      	adds	r6, r6, r3
    51a4:	0233      	lsls	r3, r6, #8
    51a6:	d53c      	bpl.n	5222 <__aeabi_ddiv+0x5d6>
    51a8:	4653      	mov	r3, sl
    51aa:	2201      	movs	r2, #1
    51ac:	2100      	movs	r1, #0
    51ae:	401a      	ands	r2, r3
    51b0:	2600      	movs	r6, #0
    51b2:	2301      	movs	r3, #1
    51b4:	4689      	mov	r9, r1
    51b6:	e5af      	b.n	4d18 <__aeabi_ddiv+0xcc>
    51b8:	2302      	movs	r3, #2
    51ba:	425b      	negs	r3, r3
    51bc:	469c      	mov	ip, r3
    51be:	9c03      	ldr	r4, [sp, #12]
    51c0:	44e3      	add	fp, ip
    51c2:	46a4      	mov	ip, r4
    51c4:	9b02      	ldr	r3, [sp, #8]
    51c6:	4463      	add	r3, ip
    51c8:	4698      	mov	r8, r3
    51ca:	45a0      	cmp	r8, r4
    51cc:	41b6      	sbcs	r6, r6
    51ce:	4276      	negs	r6, r6
    51d0:	19f6      	adds	r6, r6, r7
    51d2:	9302      	str	r3, [sp, #8]
    51d4:	18b2      	adds	r2, r6, r2
    51d6:	e6b1      	b.n	4f3c <__aeabi_ddiv+0x2f0>
    51d8:	9803      	ldr	r0, [sp, #12]
    51da:	1e8a      	subs	r2, r1, #2
    51dc:	0041      	lsls	r1, r0, #1
    51de:	4281      	cmp	r1, r0
    51e0:	41b6      	sbcs	r6, r6
    51e2:	4276      	negs	r6, r6
    51e4:	19f6      	adds	r6, r6, r7
    51e6:	19ad      	adds	r5, r5, r6
    51e8:	9103      	str	r1, [sp, #12]
    51ea:	e761      	b.n	50b0 <__aeabi_ddiv+0x464>
    51ec:	221f      	movs	r2, #31
    51ee:	4252      	negs	r2, r2
    51f0:	1ad3      	subs	r3, r2, r3
    51f2:	465a      	mov	r2, fp
    51f4:	40da      	lsrs	r2, r3
    51f6:	0013      	movs	r3, r2
    51f8:	2d20      	cmp	r5, #32
    51fa:	d029      	beq.n	5250 <__aeabi_ddiv+0x604>
    51fc:	2240      	movs	r2, #64	; 0x40
    51fe:	4658      	mov	r0, fp
    5200:	1b55      	subs	r5, r2, r5
    5202:	40a8      	lsls	r0, r5
    5204:	4301      	orrs	r1, r0
    5206:	1e48      	subs	r0, r1, #1
    5208:	4181      	sbcs	r1, r0
    520a:	2007      	movs	r0, #7
    520c:	430b      	orrs	r3, r1
    520e:	4018      	ands	r0, r3
    5210:	2600      	movs	r6, #0
    5212:	2800      	cmp	r0, #0
    5214:	d009      	beq.n	522a <__aeabi_ddiv+0x5de>
    5216:	220f      	movs	r2, #15
    5218:	2600      	movs	r6, #0
    521a:	401a      	ands	r2, r3
    521c:	0019      	movs	r1, r3
    521e:	2a04      	cmp	r2, #4
    5220:	d1bb      	bne.n	519a <__aeabi_ddiv+0x54e>
    5222:	000b      	movs	r3, r1
    5224:	0770      	lsls	r0, r6, #29
    5226:	0276      	lsls	r6, r6, #9
    5228:	0b36      	lsrs	r6, r6, #12
    522a:	08db      	lsrs	r3, r3, #3
    522c:	4303      	orrs	r3, r0
    522e:	4699      	mov	r9, r3
    5230:	2201      	movs	r2, #1
    5232:	4653      	mov	r3, sl
    5234:	401a      	ands	r2, r3
    5236:	2300      	movs	r3, #0
    5238:	e56e      	b.n	4d18 <__aeabi_ddiv+0xcc>
    523a:	9902      	ldr	r1, [sp, #8]
    523c:	428d      	cmp	r5, r1
    523e:	d8bb      	bhi.n	51b8 <__aeabi_ddiv+0x56c>
    5240:	469b      	mov	fp, r3
    5242:	2600      	movs	r6, #0
    5244:	e67b      	b.n	4f3e <__aeabi_ddiv+0x2f2>
    5246:	9803      	ldr	r0, [sp, #12]
    5248:	4298      	cmp	r0, r3
    524a:	d3c5      	bcc.n	51d8 <__aeabi_ddiv+0x58c>
    524c:	0011      	movs	r1, r2
    524e:	e732      	b.n	50b6 <__aeabi_ddiv+0x46a>
    5250:	2000      	movs	r0, #0
    5252:	e7d7      	b.n	5204 <__aeabi_ddiv+0x5b8>
    5254:	2680      	movs	r6, #128	; 0x80
    5256:	465b      	mov	r3, fp
    5258:	0336      	lsls	r6, r6, #12
    525a:	431e      	orrs	r6, r3
    525c:	0336      	lsls	r6, r6, #12
    525e:	0b36      	lsrs	r6, r6, #12
    5260:	9a00      	ldr	r2, [sp, #0]
    5262:	4689      	mov	r9, r1
    5264:	4b03      	ldr	r3, [pc, #12]	; (5274 <__aeabi_ddiv+0x628>)
    5266:	e557      	b.n	4d18 <__aeabi_ddiv+0xcc>
    5268:	000003ff 	.word	0x000003ff
    526c:	feffffff 	.word	0xfeffffff
    5270:	000007fe 	.word	0x000007fe
    5274:	000007ff 	.word	0x000007ff

00005278 <__eqdf2>:
    5278:	b5f0      	push	{r4, r5, r6, r7, lr}
    527a:	465f      	mov	r7, fp
    527c:	4656      	mov	r6, sl
    527e:	464d      	mov	r5, r9
    5280:	4644      	mov	r4, r8
    5282:	b4f0      	push	{r4, r5, r6, r7}
    5284:	031f      	lsls	r7, r3, #12
    5286:	005c      	lsls	r4, r3, #1
    5288:	0fdb      	lsrs	r3, r3, #31
    528a:	469a      	mov	sl, r3
    528c:	4b19      	ldr	r3, [pc, #100]	; (52f4 <__eqdf2+0x7c>)
    528e:	030e      	lsls	r6, r1, #12
    5290:	004d      	lsls	r5, r1, #1
    5292:	0fc9      	lsrs	r1, r1, #31
    5294:	4680      	mov	r8, r0
    5296:	0b36      	lsrs	r6, r6, #12
    5298:	0d6d      	lsrs	r5, r5, #21
    529a:	468b      	mov	fp, r1
    529c:	4691      	mov	r9, r2
    529e:	0b3f      	lsrs	r7, r7, #12
    52a0:	0d64      	lsrs	r4, r4, #21
    52a2:	429d      	cmp	r5, r3
    52a4:	d019      	beq.n	52da <__eqdf2+0x62>
    52a6:	4b13      	ldr	r3, [pc, #76]	; (52f4 <__eqdf2+0x7c>)
    52a8:	429c      	cmp	r4, r3
    52aa:	d01b      	beq.n	52e4 <__eqdf2+0x6c>
    52ac:	2301      	movs	r3, #1
    52ae:	42a5      	cmp	r5, r4
    52b0:	d006      	beq.n	52c0 <__eqdf2+0x48>
    52b2:	0018      	movs	r0, r3
    52b4:	bc3c      	pop	{r2, r3, r4, r5}
    52b6:	4690      	mov	r8, r2
    52b8:	4699      	mov	r9, r3
    52ba:	46a2      	mov	sl, r4
    52bc:	46ab      	mov	fp, r5
    52be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52c0:	42be      	cmp	r6, r7
    52c2:	d1f6      	bne.n	52b2 <__eqdf2+0x3a>
    52c4:	45c8      	cmp	r8, r9
    52c6:	d1f4      	bne.n	52b2 <__eqdf2+0x3a>
    52c8:	45d3      	cmp	fp, sl
    52ca:	d010      	beq.n	52ee <__eqdf2+0x76>
    52cc:	2d00      	cmp	r5, #0
    52ce:	d1f0      	bne.n	52b2 <__eqdf2+0x3a>
    52d0:	4330      	orrs	r0, r6
    52d2:	0003      	movs	r3, r0
    52d4:	1e5a      	subs	r2, r3, #1
    52d6:	4193      	sbcs	r3, r2
    52d8:	e7eb      	b.n	52b2 <__eqdf2+0x3a>
    52da:	0031      	movs	r1, r6
    52dc:	2301      	movs	r3, #1
    52de:	4301      	orrs	r1, r0
    52e0:	d1e7      	bne.n	52b2 <__eqdf2+0x3a>
    52e2:	e7e0      	b.n	52a6 <__eqdf2+0x2e>
    52e4:	433a      	orrs	r2, r7
    52e6:	2301      	movs	r3, #1
    52e8:	2a00      	cmp	r2, #0
    52ea:	d1e2      	bne.n	52b2 <__eqdf2+0x3a>
    52ec:	e7de      	b.n	52ac <__eqdf2+0x34>
    52ee:	2300      	movs	r3, #0
    52f0:	e7df      	b.n	52b2 <__eqdf2+0x3a>
    52f2:	46c0      	nop			; (mov r8, r8)
    52f4:	000007ff 	.word	0x000007ff

000052f8 <__gedf2>:
    52f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fa:	465f      	mov	r7, fp
    52fc:	4644      	mov	r4, r8
    52fe:	4656      	mov	r6, sl
    5300:	464d      	mov	r5, r9
    5302:	b4f0      	push	{r4, r5, r6, r7}
    5304:	031f      	lsls	r7, r3, #12
    5306:	0b3c      	lsrs	r4, r7, #12
    5308:	4f2c      	ldr	r7, [pc, #176]	; (53bc <__gedf2+0xc4>)
    530a:	030e      	lsls	r6, r1, #12
    530c:	004d      	lsls	r5, r1, #1
    530e:	46a3      	mov	fp, r4
    5310:	005c      	lsls	r4, r3, #1
    5312:	4684      	mov	ip, r0
    5314:	0b36      	lsrs	r6, r6, #12
    5316:	0d6d      	lsrs	r5, r5, #21
    5318:	0fc9      	lsrs	r1, r1, #31
    531a:	4690      	mov	r8, r2
    531c:	0d64      	lsrs	r4, r4, #21
    531e:	0fdb      	lsrs	r3, r3, #31
    5320:	42bd      	cmp	r5, r7
    5322:	d02b      	beq.n	537c <__gedf2+0x84>
    5324:	4f25      	ldr	r7, [pc, #148]	; (53bc <__gedf2+0xc4>)
    5326:	42bc      	cmp	r4, r7
    5328:	d02e      	beq.n	5388 <__gedf2+0x90>
    532a:	2d00      	cmp	r5, #0
    532c:	d10e      	bne.n	534c <__gedf2+0x54>
    532e:	4330      	orrs	r0, r6
    5330:	0007      	movs	r7, r0
    5332:	4681      	mov	r9, r0
    5334:	4278      	negs	r0, r7
    5336:	4178      	adcs	r0, r7
    5338:	2c00      	cmp	r4, #0
    533a:	d117      	bne.n	536c <__gedf2+0x74>
    533c:	465f      	mov	r7, fp
    533e:	433a      	orrs	r2, r7
    5340:	d114      	bne.n	536c <__gedf2+0x74>
    5342:	464b      	mov	r3, r9
    5344:	2000      	movs	r0, #0
    5346:	2b00      	cmp	r3, #0
    5348:	d00a      	beq.n	5360 <__gedf2+0x68>
    534a:	e006      	b.n	535a <__gedf2+0x62>
    534c:	2c00      	cmp	r4, #0
    534e:	d102      	bne.n	5356 <__gedf2+0x5e>
    5350:	4658      	mov	r0, fp
    5352:	4302      	orrs	r2, r0
    5354:	d001      	beq.n	535a <__gedf2+0x62>
    5356:	4299      	cmp	r1, r3
    5358:	d01a      	beq.n	5390 <__gedf2+0x98>
    535a:	2301      	movs	r3, #1
    535c:	4248      	negs	r0, r1
    535e:	4318      	orrs	r0, r3
    5360:	bc3c      	pop	{r2, r3, r4, r5}
    5362:	4690      	mov	r8, r2
    5364:	4699      	mov	r9, r3
    5366:	46a2      	mov	sl, r4
    5368:	46ab      	mov	fp, r5
    536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    536c:	2800      	cmp	r0, #0
    536e:	d0f2      	beq.n	5356 <__gedf2+0x5e>
    5370:	4258      	negs	r0, r3
    5372:	4158      	adcs	r0, r3
    5374:	2201      	movs	r2, #1
    5376:	4240      	negs	r0, r0
    5378:	4310      	orrs	r0, r2
    537a:	e7f1      	b.n	5360 <__gedf2+0x68>
    537c:	0037      	movs	r7, r6
    537e:	4307      	orrs	r7, r0
    5380:	d0d0      	beq.n	5324 <__gedf2+0x2c>
    5382:	2002      	movs	r0, #2
    5384:	4240      	negs	r0, r0
    5386:	e7eb      	b.n	5360 <__gedf2+0x68>
    5388:	465f      	mov	r7, fp
    538a:	4317      	orrs	r7, r2
    538c:	d0cd      	beq.n	532a <__gedf2+0x32>
    538e:	e7f8      	b.n	5382 <__gedf2+0x8a>
    5390:	42a5      	cmp	r5, r4
    5392:	dce2      	bgt.n	535a <__gedf2+0x62>
    5394:	db05      	blt.n	53a2 <__gedf2+0xaa>
    5396:	455e      	cmp	r6, fp
    5398:	d8df      	bhi.n	535a <__gedf2+0x62>
    539a:	d008      	beq.n	53ae <__gedf2+0xb6>
    539c:	2000      	movs	r0, #0
    539e:	455e      	cmp	r6, fp
    53a0:	d2de      	bcs.n	5360 <__gedf2+0x68>
    53a2:	4248      	negs	r0, r1
    53a4:	4148      	adcs	r0, r1
    53a6:	2301      	movs	r3, #1
    53a8:	4240      	negs	r0, r0
    53aa:	4318      	orrs	r0, r3
    53ac:	e7d8      	b.n	5360 <__gedf2+0x68>
    53ae:	45c4      	cmp	ip, r8
    53b0:	d8d3      	bhi.n	535a <__gedf2+0x62>
    53b2:	2000      	movs	r0, #0
    53b4:	45c4      	cmp	ip, r8
    53b6:	d3f4      	bcc.n	53a2 <__gedf2+0xaa>
    53b8:	e7d2      	b.n	5360 <__gedf2+0x68>
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	000007ff 	.word	0x000007ff

000053c0 <__ledf2>:
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	465f      	mov	r7, fp
    53c4:	464d      	mov	r5, r9
    53c6:	4644      	mov	r4, r8
    53c8:	4656      	mov	r6, sl
    53ca:	b4f0      	push	{r4, r5, r6, r7}
    53cc:	031c      	lsls	r4, r3, #12
    53ce:	0b24      	lsrs	r4, r4, #12
    53d0:	46a4      	mov	ip, r4
    53d2:	4c2f      	ldr	r4, [pc, #188]	; (5490 <__ledf2+0xd0>)
    53d4:	030f      	lsls	r7, r1, #12
    53d6:	004d      	lsls	r5, r1, #1
    53d8:	005e      	lsls	r6, r3, #1
    53da:	0fc9      	lsrs	r1, r1, #31
    53dc:	4680      	mov	r8, r0
    53de:	0b3f      	lsrs	r7, r7, #12
    53e0:	0d6d      	lsrs	r5, r5, #21
    53e2:	468b      	mov	fp, r1
    53e4:	4691      	mov	r9, r2
    53e6:	0d76      	lsrs	r6, r6, #21
    53e8:	0fdb      	lsrs	r3, r3, #31
    53ea:	42a5      	cmp	r5, r4
    53ec:	d020      	beq.n	5430 <__ledf2+0x70>
    53ee:	4c28      	ldr	r4, [pc, #160]	; (5490 <__ledf2+0xd0>)
    53f0:	42a6      	cmp	r6, r4
    53f2:	d022      	beq.n	543a <__ledf2+0x7a>
    53f4:	2d00      	cmp	r5, #0
    53f6:	d112      	bne.n	541e <__ledf2+0x5e>
    53f8:	4338      	orrs	r0, r7
    53fa:	4244      	negs	r4, r0
    53fc:	4144      	adcs	r4, r0
    53fe:	2e00      	cmp	r6, #0
    5400:	d020      	beq.n	5444 <__ledf2+0x84>
    5402:	2c00      	cmp	r4, #0
    5404:	d00d      	beq.n	5422 <__ledf2+0x62>
    5406:	425c      	negs	r4, r3
    5408:	4163      	adcs	r3, r4
    540a:	2401      	movs	r4, #1
    540c:	425b      	negs	r3, r3
    540e:	431c      	orrs	r4, r3
    5410:	0020      	movs	r0, r4
    5412:	bc3c      	pop	{r2, r3, r4, r5}
    5414:	4690      	mov	r8, r2
    5416:	4699      	mov	r9, r3
    5418:	46a2      	mov	sl, r4
    541a:	46ab      	mov	fp, r5
    541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    541e:	2e00      	cmp	r6, #0
    5420:	d017      	beq.n	5452 <__ledf2+0x92>
    5422:	455b      	cmp	r3, fp
    5424:	d019      	beq.n	545a <__ledf2+0x9a>
    5426:	465b      	mov	r3, fp
    5428:	425c      	negs	r4, r3
    542a:	2301      	movs	r3, #1
    542c:	431c      	orrs	r4, r3
    542e:	e7ef      	b.n	5410 <__ledf2+0x50>
    5430:	0039      	movs	r1, r7
    5432:	2402      	movs	r4, #2
    5434:	4301      	orrs	r1, r0
    5436:	d1eb      	bne.n	5410 <__ledf2+0x50>
    5438:	e7d9      	b.n	53ee <__ledf2+0x2e>
    543a:	4661      	mov	r1, ip
    543c:	2402      	movs	r4, #2
    543e:	4311      	orrs	r1, r2
    5440:	d1e6      	bne.n	5410 <__ledf2+0x50>
    5442:	e7d7      	b.n	53f4 <__ledf2+0x34>
    5444:	4661      	mov	r1, ip
    5446:	430a      	orrs	r2, r1
    5448:	d1db      	bne.n	5402 <__ledf2+0x42>
    544a:	2400      	movs	r4, #0
    544c:	2800      	cmp	r0, #0
    544e:	d0df      	beq.n	5410 <__ledf2+0x50>
    5450:	e7e9      	b.n	5426 <__ledf2+0x66>
    5452:	4661      	mov	r1, ip
    5454:	430a      	orrs	r2, r1
    5456:	d1e4      	bne.n	5422 <__ledf2+0x62>
    5458:	e7e5      	b.n	5426 <__ledf2+0x66>
    545a:	42b5      	cmp	r5, r6
    545c:	dd03      	ble.n	5466 <__ledf2+0xa6>
    545e:	2201      	movs	r2, #1
    5460:	425c      	negs	r4, r3
    5462:	4314      	orrs	r4, r2
    5464:	e7d4      	b.n	5410 <__ledf2+0x50>
    5466:	42b5      	cmp	r5, r6
    5468:	dbcd      	blt.n	5406 <__ledf2+0x46>
    546a:	4567      	cmp	r7, ip
    546c:	d8db      	bhi.n	5426 <__ledf2+0x66>
    546e:	d009      	beq.n	5484 <__ledf2+0xc4>
    5470:	2400      	movs	r4, #0
    5472:	4567      	cmp	r7, ip
    5474:	d2cc      	bcs.n	5410 <__ledf2+0x50>
    5476:	4659      	mov	r1, fp
    5478:	424c      	negs	r4, r1
    547a:	4161      	adcs	r1, r4
    547c:	2401      	movs	r4, #1
    547e:	4249      	negs	r1, r1
    5480:	430c      	orrs	r4, r1
    5482:	e7c5      	b.n	5410 <__ledf2+0x50>
    5484:	45c8      	cmp	r8, r9
    5486:	d8ce      	bhi.n	5426 <__ledf2+0x66>
    5488:	2400      	movs	r4, #0
    548a:	45c8      	cmp	r8, r9
    548c:	d3f3      	bcc.n	5476 <__ledf2+0xb6>
    548e:	e7bf      	b.n	5410 <__ledf2+0x50>
    5490:	000007ff 	.word	0x000007ff

00005494 <__aeabi_dmul>:
    5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    5496:	465f      	mov	r7, fp
    5498:	4656      	mov	r6, sl
    549a:	464d      	mov	r5, r9
    549c:	4644      	mov	r4, r8
    549e:	b4f0      	push	{r4, r5, r6, r7}
    54a0:	030d      	lsls	r5, r1, #12
    54a2:	4699      	mov	r9, r3
    54a4:	004e      	lsls	r6, r1, #1
    54a6:	0b2b      	lsrs	r3, r5, #12
    54a8:	b087      	sub	sp, #28
    54aa:	0007      	movs	r7, r0
    54ac:	4692      	mov	sl, r2
    54ae:	4680      	mov	r8, r0
    54b0:	469b      	mov	fp, r3
    54b2:	0d76      	lsrs	r6, r6, #21
    54b4:	0fcc      	lsrs	r4, r1, #31
    54b6:	2e00      	cmp	r6, #0
    54b8:	d069      	beq.n	558e <__aeabi_dmul+0xfa>
    54ba:	4b6d      	ldr	r3, [pc, #436]	; (5670 <__aeabi_dmul+0x1dc>)
    54bc:	429e      	cmp	r6, r3
    54be:	d035      	beq.n	552c <__aeabi_dmul+0x98>
    54c0:	465b      	mov	r3, fp
    54c2:	2280      	movs	r2, #128	; 0x80
    54c4:	00dd      	lsls	r5, r3, #3
    54c6:	0412      	lsls	r2, r2, #16
    54c8:	0f43      	lsrs	r3, r0, #29
    54ca:	4313      	orrs	r3, r2
    54cc:	432b      	orrs	r3, r5
    54ce:	469b      	mov	fp, r3
    54d0:	00c3      	lsls	r3, r0, #3
    54d2:	4698      	mov	r8, r3
    54d4:	4b67      	ldr	r3, [pc, #412]	; (5674 <__aeabi_dmul+0x1e0>)
    54d6:	2700      	movs	r7, #0
    54d8:	469c      	mov	ip, r3
    54da:	2300      	movs	r3, #0
    54dc:	4466      	add	r6, ip
    54de:	9301      	str	r3, [sp, #4]
    54e0:	464a      	mov	r2, r9
    54e2:	0315      	lsls	r5, r2, #12
    54e4:	0050      	lsls	r0, r2, #1
    54e6:	0fd2      	lsrs	r2, r2, #31
    54e8:	4653      	mov	r3, sl
    54ea:	0b2d      	lsrs	r5, r5, #12
    54ec:	0d40      	lsrs	r0, r0, #21
    54ee:	4691      	mov	r9, r2
    54f0:	d100      	bne.n	54f4 <__aeabi_dmul+0x60>
    54f2:	e076      	b.n	55e2 <__aeabi_dmul+0x14e>
    54f4:	4a5e      	ldr	r2, [pc, #376]	; (5670 <__aeabi_dmul+0x1dc>)
    54f6:	4290      	cmp	r0, r2
    54f8:	d06c      	beq.n	55d4 <__aeabi_dmul+0x140>
    54fa:	2280      	movs	r2, #128	; 0x80
    54fc:	0f5b      	lsrs	r3, r3, #29
    54fe:	0412      	lsls	r2, r2, #16
    5500:	4313      	orrs	r3, r2
    5502:	4a5c      	ldr	r2, [pc, #368]	; (5674 <__aeabi_dmul+0x1e0>)
    5504:	00ed      	lsls	r5, r5, #3
    5506:	4694      	mov	ip, r2
    5508:	431d      	orrs	r5, r3
    550a:	4653      	mov	r3, sl
    550c:	2200      	movs	r2, #0
    550e:	00db      	lsls	r3, r3, #3
    5510:	4460      	add	r0, ip
    5512:	4649      	mov	r1, r9
    5514:	1836      	adds	r6, r6, r0
    5516:	1c70      	adds	r0, r6, #1
    5518:	4061      	eors	r1, r4
    551a:	9002      	str	r0, [sp, #8]
    551c:	4317      	orrs	r7, r2
    551e:	2f0f      	cmp	r7, #15
    5520:	d900      	bls.n	5524 <__aeabi_dmul+0x90>
    5522:	e0af      	b.n	5684 <__aeabi_dmul+0x1f0>
    5524:	4854      	ldr	r0, [pc, #336]	; (5678 <__aeabi_dmul+0x1e4>)
    5526:	00bf      	lsls	r7, r7, #2
    5528:	59c7      	ldr	r7, [r0, r7]
    552a:	46bf      	mov	pc, r7
    552c:	465b      	mov	r3, fp
    552e:	431f      	orrs	r7, r3
    5530:	d000      	beq.n	5534 <__aeabi_dmul+0xa0>
    5532:	e088      	b.n	5646 <__aeabi_dmul+0x1b2>
    5534:	2300      	movs	r3, #0
    5536:	469b      	mov	fp, r3
    5538:	4698      	mov	r8, r3
    553a:	3302      	adds	r3, #2
    553c:	2708      	movs	r7, #8
    553e:	9301      	str	r3, [sp, #4]
    5540:	e7ce      	b.n	54e0 <__aeabi_dmul+0x4c>
    5542:	4649      	mov	r1, r9
    5544:	2a02      	cmp	r2, #2
    5546:	d06a      	beq.n	561e <__aeabi_dmul+0x18a>
    5548:	2a03      	cmp	r2, #3
    554a:	d100      	bne.n	554e <__aeabi_dmul+0xba>
    554c:	e209      	b.n	5962 <__aeabi_dmul+0x4ce>
    554e:	2a01      	cmp	r2, #1
    5550:	d000      	beq.n	5554 <__aeabi_dmul+0xc0>
    5552:	e1bb      	b.n	58cc <__aeabi_dmul+0x438>
    5554:	4011      	ands	r1, r2
    5556:	2200      	movs	r2, #0
    5558:	2300      	movs	r3, #0
    555a:	2500      	movs	r5, #0
    555c:	4690      	mov	r8, r2
    555e:	b2cc      	uxtb	r4, r1
    5560:	2100      	movs	r1, #0
    5562:	032d      	lsls	r5, r5, #12
    5564:	0d0a      	lsrs	r2, r1, #20
    5566:	0512      	lsls	r2, r2, #20
    5568:	0b2d      	lsrs	r5, r5, #12
    556a:	4315      	orrs	r5, r2
    556c:	4a43      	ldr	r2, [pc, #268]	; (567c <__aeabi_dmul+0x1e8>)
    556e:	051b      	lsls	r3, r3, #20
    5570:	4015      	ands	r5, r2
    5572:	431d      	orrs	r5, r3
    5574:	006d      	lsls	r5, r5, #1
    5576:	07e4      	lsls	r4, r4, #31
    5578:	086d      	lsrs	r5, r5, #1
    557a:	4325      	orrs	r5, r4
    557c:	4640      	mov	r0, r8
    557e:	0029      	movs	r1, r5
    5580:	b007      	add	sp, #28
    5582:	bc3c      	pop	{r2, r3, r4, r5}
    5584:	4690      	mov	r8, r2
    5586:	4699      	mov	r9, r3
    5588:	46a2      	mov	sl, r4
    558a:	46ab      	mov	fp, r5
    558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    558e:	4303      	orrs	r3, r0
    5590:	d052      	beq.n	5638 <__aeabi_dmul+0x1a4>
    5592:	465b      	mov	r3, fp
    5594:	2b00      	cmp	r3, #0
    5596:	d100      	bne.n	559a <__aeabi_dmul+0x106>
    5598:	e18a      	b.n	58b0 <__aeabi_dmul+0x41c>
    559a:	4658      	mov	r0, fp
    559c:	f000 ff84 	bl	64a8 <__clzsi2>
    55a0:	0003      	movs	r3, r0
    55a2:	3b0b      	subs	r3, #11
    55a4:	2b1c      	cmp	r3, #28
    55a6:	dd00      	ble.n	55aa <__aeabi_dmul+0x116>
    55a8:	e17b      	b.n	58a2 <__aeabi_dmul+0x40e>
    55aa:	221d      	movs	r2, #29
    55ac:	1ad3      	subs	r3, r2, r3
    55ae:	003a      	movs	r2, r7
    55b0:	0001      	movs	r1, r0
    55b2:	465d      	mov	r5, fp
    55b4:	40da      	lsrs	r2, r3
    55b6:	3908      	subs	r1, #8
    55b8:	408d      	lsls	r5, r1
    55ba:	0013      	movs	r3, r2
    55bc:	408f      	lsls	r7, r1
    55be:	432b      	orrs	r3, r5
    55c0:	469b      	mov	fp, r3
    55c2:	46b8      	mov	r8, r7
    55c4:	4b2e      	ldr	r3, [pc, #184]	; (5680 <__aeabi_dmul+0x1ec>)
    55c6:	2700      	movs	r7, #0
    55c8:	469c      	mov	ip, r3
    55ca:	2300      	movs	r3, #0
    55cc:	4460      	add	r0, ip
    55ce:	4246      	negs	r6, r0
    55d0:	9301      	str	r3, [sp, #4]
    55d2:	e785      	b.n	54e0 <__aeabi_dmul+0x4c>
    55d4:	4652      	mov	r2, sl
    55d6:	432a      	orrs	r2, r5
    55d8:	d12c      	bne.n	5634 <__aeabi_dmul+0x1a0>
    55da:	2500      	movs	r5, #0
    55dc:	2300      	movs	r3, #0
    55de:	2202      	movs	r2, #2
    55e0:	e797      	b.n	5512 <__aeabi_dmul+0x7e>
    55e2:	4652      	mov	r2, sl
    55e4:	432a      	orrs	r2, r5
    55e6:	d021      	beq.n	562c <__aeabi_dmul+0x198>
    55e8:	2d00      	cmp	r5, #0
    55ea:	d100      	bne.n	55ee <__aeabi_dmul+0x15a>
    55ec:	e154      	b.n	5898 <__aeabi_dmul+0x404>
    55ee:	0028      	movs	r0, r5
    55f0:	f000 ff5a 	bl	64a8 <__clzsi2>
    55f4:	0003      	movs	r3, r0
    55f6:	3b0b      	subs	r3, #11
    55f8:	2b1c      	cmp	r3, #28
    55fa:	dd00      	ble.n	55fe <__aeabi_dmul+0x16a>
    55fc:	e146      	b.n	588c <__aeabi_dmul+0x3f8>
    55fe:	211d      	movs	r1, #29
    5600:	1acb      	subs	r3, r1, r3
    5602:	4651      	mov	r1, sl
    5604:	0002      	movs	r2, r0
    5606:	40d9      	lsrs	r1, r3
    5608:	4653      	mov	r3, sl
    560a:	3a08      	subs	r2, #8
    560c:	4095      	lsls	r5, r2
    560e:	4093      	lsls	r3, r2
    5610:	430d      	orrs	r5, r1
    5612:	4a1b      	ldr	r2, [pc, #108]	; (5680 <__aeabi_dmul+0x1ec>)
    5614:	4694      	mov	ip, r2
    5616:	4460      	add	r0, ip
    5618:	4240      	negs	r0, r0
    561a:	2200      	movs	r2, #0
    561c:	e779      	b.n	5512 <__aeabi_dmul+0x7e>
    561e:	2401      	movs	r4, #1
    5620:	2200      	movs	r2, #0
    5622:	400c      	ands	r4, r1
    5624:	4b12      	ldr	r3, [pc, #72]	; (5670 <__aeabi_dmul+0x1dc>)
    5626:	2500      	movs	r5, #0
    5628:	4690      	mov	r8, r2
    562a:	e799      	b.n	5560 <__aeabi_dmul+0xcc>
    562c:	2500      	movs	r5, #0
    562e:	2300      	movs	r3, #0
    5630:	2201      	movs	r2, #1
    5632:	e76e      	b.n	5512 <__aeabi_dmul+0x7e>
    5634:	2203      	movs	r2, #3
    5636:	e76c      	b.n	5512 <__aeabi_dmul+0x7e>
    5638:	2300      	movs	r3, #0
    563a:	469b      	mov	fp, r3
    563c:	4698      	mov	r8, r3
    563e:	3301      	adds	r3, #1
    5640:	2704      	movs	r7, #4
    5642:	9301      	str	r3, [sp, #4]
    5644:	e74c      	b.n	54e0 <__aeabi_dmul+0x4c>
    5646:	2303      	movs	r3, #3
    5648:	270c      	movs	r7, #12
    564a:	9301      	str	r3, [sp, #4]
    564c:	e748      	b.n	54e0 <__aeabi_dmul+0x4c>
    564e:	2300      	movs	r3, #0
    5650:	2580      	movs	r5, #128	; 0x80
    5652:	4698      	mov	r8, r3
    5654:	2400      	movs	r4, #0
    5656:	032d      	lsls	r5, r5, #12
    5658:	4b05      	ldr	r3, [pc, #20]	; (5670 <__aeabi_dmul+0x1dc>)
    565a:	e781      	b.n	5560 <__aeabi_dmul+0xcc>
    565c:	465d      	mov	r5, fp
    565e:	4643      	mov	r3, r8
    5660:	9a01      	ldr	r2, [sp, #4]
    5662:	e76f      	b.n	5544 <__aeabi_dmul+0xb0>
    5664:	465d      	mov	r5, fp
    5666:	4643      	mov	r3, r8
    5668:	0021      	movs	r1, r4
    566a:	9a01      	ldr	r2, [sp, #4]
    566c:	e76a      	b.n	5544 <__aeabi_dmul+0xb0>
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	000007ff 	.word	0x000007ff
    5674:	fffffc01 	.word	0xfffffc01
    5678:	000068f8 	.word	0x000068f8
    567c:	800fffff 	.word	0x800fffff
    5680:	000003f3 	.word	0x000003f3
    5684:	4642      	mov	r2, r8
    5686:	0c12      	lsrs	r2, r2, #16
    5688:	4691      	mov	r9, r2
    568a:	0c1a      	lsrs	r2, r3, #16
    568c:	4694      	mov	ip, r2
    568e:	4642      	mov	r2, r8
    5690:	0417      	lsls	r7, r2, #16
    5692:	464a      	mov	r2, r9
    5694:	041b      	lsls	r3, r3, #16
    5696:	0c1b      	lsrs	r3, r3, #16
    5698:	435a      	muls	r2, r3
    569a:	4660      	mov	r0, ip
    569c:	4690      	mov	r8, r2
    569e:	464a      	mov	r2, r9
    56a0:	4342      	muls	r2, r0
    56a2:	0010      	movs	r0, r2
    56a4:	9203      	str	r2, [sp, #12]
    56a6:	4662      	mov	r2, ip
    56a8:	001c      	movs	r4, r3
    56aa:	0c3f      	lsrs	r7, r7, #16
    56ac:	437a      	muls	r2, r7
    56ae:	437c      	muls	r4, r7
    56b0:	4442      	add	r2, r8
    56b2:	9201      	str	r2, [sp, #4]
    56b4:	0c22      	lsrs	r2, r4, #16
    56b6:	4692      	mov	sl, r2
    56b8:	9a01      	ldr	r2, [sp, #4]
    56ba:	4452      	add	r2, sl
    56bc:	4590      	cmp	r8, r2
    56be:	d906      	bls.n	56ce <__aeabi_dmul+0x23a>
    56c0:	4682      	mov	sl, r0
    56c2:	2080      	movs	r0, #128	; 0x80
    56c4:	0240      	lsls	r0, r0, #9
    56c6:	4680      	mov	r8, r0
    56c8:	44c2      	add	sl, r8
    56ca:	4650      	mov	r0, sl
    56cc:	9003      	str	r0, [sp, #12]
    56ce:	0c10      	lsrs	r0, r2, #16
    56d0:	9004      	str	r0, [sp, #16]
    56d2:	4648      	mov	r0, r9
    56d4:	0424      	lsls	r4, r4, #16
    56d6:	0c24      	lsrs	r4, r4, #16
    56d8:	0412      	lsls	r2, r2, #16
    56da:	1912      	adds	r2, r2, r4
    56dc:	9205      	str	r2, [sp, #20]
    56de:	0c2a      	lsrs	r2, r5, #16
    56e0:	042d      	lsls	r5, r5, #16
    56e2:	0c2d      	lsrs	r5, r5, #16
    56e4:	4368      	muls	r0, r5
    56e6:	002c      	movs	r4, r5
    56e8:	4682      	mov	sl, r0
    56ea:	4648      	mov	r0, r9
    56ec:	437c      	muls	r4, r7
    56ee:	4350      	muls	r0, r2
    56f0:	4681      	mov	r9, r0
    56f2:	0c20      	lsrs	r0, r4, #16
    56f4:	4680      	mov	r8, r0
    56f6:	4357      	muls	r7, r2
    56f8:	4457      	add	r7, sl
    56fa:	4447      	add	r7, r8
    56fc:	45ba      	cmp	sl, r7
    56fe:	d903      	bls.n	5708 <__aeabi_dmul+0x274>
    5700:	2080      	movs	r0, #128	; 0x80
    5702:	0240      	lsls	r0, r0, #9
    5704:	4680      	mov	r8, r0
    5706:	44c1      	add	r9, r8
    5708:	0c38      	lsrs	r0, r7, #16
    570a:	043f      	lsls	r7, r7, #16
    570c:	46b8      	mov	r8, r7
    570e:	4448      	add	r0, r9
    5710:	0424      	lsls	r4, r4, #16
    5712:	0c24      	lsrs	r4, r4, #16
    5714:	9001      	str	r0, [sp, #4]
    5716:	9804      	ldr	r0, [sp, #16]
    5718:	44a0      	add	r8, r4
    571a:	4440      	add	r0, r8
    571c:	9004      	str	r0, [sp, #16]
    571e:	4658      	mov	r0, fp
    5720:	0c00      	lsrs	r0, r0, #16
    5722:	4681      	mov	r9, r0
    5724:	4658      	mov	r0, fp
    5726:	0404      	lsls	r4, r0, #16
    5728:	0c20      	lsrs	r0, r4, #16
    572a:	4682      	mov	sl, r0
    572c:	0007      	movs	r7, r0
    572e:	4648      	mov	r0, r9
    5730:	435f      	muls	r7, r3
    5732:	464c      	mov	r4, r9
    5734:	4343      	muls	r3, r0
    5736:	4660      	mov	r0, ip
    5738:	4360      	muls	r0, r4
    573a:	4664      	mov	r4, ip
    573c:	4683      	mov	fp, r0
    573e:	4650      	mov	r0, sl
    5740:	4344      	muls	r4, r0
    5742:	0c38      	lsrs	r0, r7, #16
    5744:	4684      	mov	ip, r0
    5746:	18e4      	adds	r4, r4, r3
    5748:	4464      	add	r4, ip
    574a:	42a3      	cmp	r3, r4
    574c:	d903      	bls.n	5756 <__aeabi_dmul+0x2c2>
    574e:	2380      	movs	r3, #128	; 0x80
    5750:	025b      	lsls	r3, r3, #9
    5752:	469c      	mov	ip, r3
    5754:	44e3      	add	fp, ip
    5756:	4648      	mov	r0, r9
    5758:	043f      	lsls	r7, r7, #16
    575a:	0c23      	lsrs	r3, r4, #16
    575c:	0c3f      	lsrs	r7, r7, #16
    575e:	0424      	lsls	r4, r4, #16
    5760:	19e4      	adds	r4, r4, r7
    5762:	4657      	mov	r7, sl
    5764:	4368      	muls	r0, r5
    5766:	436f      	muls	r7, r5
    5768:	4684      	mov	ip, r0
    576a:	464d      	mov	r5, r9
    576c:	4650      	mov	r0, sl
    576e:	4355      	muls	r5, r2
    5770:	4342      	muls	r2, r0
    5772:	0c38      	lsrs	r0, r7, #16
    5774:	4681      	mov	r9, r0
    5776:	4462      	add	r2, ip
    5778:	444a      	add	r2, r9
    577a:	445b      	add	r3, fp
    577c:	4594      	cmp	ip, r2
    577e:	d903      	bls.n	5788 <__aeabi_dmul+0x2f4>
    5780:	2080      	movs	r0, #128	; 0x80
    5782:	0240      	lsls	r0, r0, #9
    5784:	4684      	mov	ip, r0
    5786:	4465      	add	r5, ip
    5788:	9803      	ldr	r0, [sp, #12]
    578a:	043f      	lsls	r7, r7, #16
    578c:	4683      	mov	fp, r0
    578e:	9804      	ldr	r0, [sp, #16]
    5790:	0c3f      	lsrs	r7, r7, #16
    5792:	4684      	mov	ip, r0
    5794:	44e3      	add	fp, ip
    5796:	45c3      	cmp	fp, r8
    5798:	4180      	sbcs	r0, r0
    579a:	4240      	negs	r0, r0
    579c:	4682      	mov	sl, r0
    579e:	0410      	lsls	r0, r2, #16
    57a0:	4684      	mov	ip, r0
    57a2:	9801      	ldr	r0, [sp, #4]
    57a4:	4467      	add	r7, ip
    57a6:	4684      	mov	ip, r0
    57a8:	4467      	add	r7, ip
    57aa:	44a3      	add	fp, r4
    57ac:	46bc      	mov	ip, r7
    57ae:	45a3      	cmp	fp, r4
    57b0:	41a4      	sbcs	r4, r4
    57b2:	4699      	mov	r9, r3
    57b4:	44d4      	add	ip, sl
    57b6:	4264      	negs	r4, r4
    57b8:	4287      	cmp	r7, r0
    57ba:	41bf      	sbcs	r7, r7
    57bc:	45d4      	cmp	ip, sl
    57be:	4180      	sbcs	r0, r0
    57c0:	44e1      	add	r9, ip
    57c2:	46a0      	mov	r8, r4
    57c4:	4599      	cmp	r9, r3
    57c6:	419b      	sbcs	r3, r3
    57c8:	427f      	negs	r7, r7
    57ca:	4240      	negs	r0, r0
    57cc:	44c8      	add	r8, r9
    57ce:	4307      	orrs	r7, r0
    57d0:	0c12      	lsrs	r2, r2, #16
    57d2:	18ba      	adds	r2, r7, r2
    57d4:	45a0      	cmp	r8, r4
    57d6:	41a4      	sbcs	r4, r4
    57d8:	425f      	negs	r7, r3
    57da:	003b      	movs	r3, r7
    57dc:	4264      	negs	r4, r4
    57de:	4323      	orrs	r3, r4
    57e0:	18d7      	adds	r7, r2, r3
    57e2:	4643      	mov	r3, r8
    57e4:	197d      	adds	r5, r7, r5
    57e6:	0ddb      	lsrs	r3, r3, #23
    57e8:	026d      	lsls	r5, r5, #9
    57ea:	431d      	orrs	r5, r3
    57ec:	465b      	mov	r3, fp
    57ee:	025a      	lsls	r2, r3, #9
    57f0:	9b05      	ldr	r3, [sp, #20]
    57f2:	431a      	orrs	r2, r3
    57f4:	1e53      	subs	r3, r2, #1
    57f6:	419a      	sbcs	r2, r3
    57f8:	465b      	mov	r3, fp
    57fa:	0ddb      	lsrs	r3, r3, #23
    57fc:	431a      	orrs	r2, r3
    57fe:	4643      	mov	r3, r8
    5800:	025b      	lsls	r3, r3, #9
    5802:	4313      	orrs	r3, r2
    5804:	01ea      	lsls	r2, r5, #7
    5806:	d507      	bpl.n	5818 <__aeabi_dmul+0x384>
    5808:	2201      	movs	r2, #1
    580a:	085c      	lsrs	r4, r3, #1
    580c:	4013      	ands	r3, r2
    580e:	4323      	orrs	r3, r4
    5810:	07ea      	lsls	r2, r5, #31
    5812:	9e02      	ldr	r6, [sp, #8]
    5814:	4313      	orrs	r3, r2
    5816:	086d      	lsrs	r5, r5, #1
    5818:	4a57      	ldr	r2, [pc, #348]	; (5978 <__aeabi_dmul+0x4e4>)
    581a:	18b2      	adds	r2, r6, r2
    581c:	2a00      	cmp	r2, #0
    581e:	dd4b      	ble.n	58b8 <__aeabi_dmul+0x424>
    5820:	0758      	lsls	r0, r3, #29
    5822:	d009      	beq.n	5838 <__aeabi_dmul+0x3a4>
    5824:	200f      	movs	r0, #15
    5826:	4018      	ands	r0, r3
    5828:	2804      	cmp	r0, #4
    582a:	d005      	beq.n	5838 <__aeabi_dmul+0x3a4>
    582c:	1d18      	adds	r0, r3, #4
    582e:	4298      	cmp	r0, r3
    5830:	419b      	sbcs	r3, r3
    5832:	425b      	negs	r3, r3
    5834:	18ed      	adds	r5, r5, r3
    5836:	0003      	movs	r3, r0
    5838:	01e8      	lsls	r0, r5, #7
    583a:	d504      	bpl.n	5846 <__aeabi_dmul+0x3b2>
    583c:	4a4f      	ldr	r2, [pc, #316]	; (597c <__aeabi_dmul+0x4e8>)
    583e:	4015      	ands	r5, r2
    5840:	2280      	movs	r2, #128	; 0x80
    5842:	00d2      	lsls	r2, r2, #3
    5844:	18b2      	adds	r2, r6, r2
    5846:	484e      	ldr	r0, [pc, #312]	; (5980 <__aeabi_dmul+0x4ec>)
    5848:	4282      	cmp	r2, r0
    584a:	dd00      	ble.n	584e <__aeabi_dmul+0x3ba>
    584c:	e6e7      	b.n	561e <__aeabi_dmul+0x18a>
    584e:	2401      	movs	r4, #1
    5850:	08db      	lsrs	r3, r3, #3
    5852:	0768      	lsls	r0, r5, #29
    5854:	4318      	orrs	r0, r3
    5856:	026d      	lsls	r5, r5, #9
    5858:	0553      	lsls	r3, r2, #21
    585a:	4680      	mov	r8, r0
    585c:	0b2d      	lsrs	r5, r5, #12
    585e:	0d5b      	lsrs	r3, r3, #21
    5860:	400c      	ands	r4, r1
    5862:	e67d      	b.n	5560 <__aeabi_dmul+0xcc>
    5864:	2280      	movs	r2, #128	; 0x80
    5866:	4659      	mov	r1, fp
    5868:	0312      	lsls	r2, r2, #12
    586a:	4211      	tst	r1, r2
    586c:	d008      	beq.n	5880 <__aeabi_dmul+0x3ec>
    586e:	4215      	tst	r5, r2
    5870:	d106      	bne.n	5880 <__aeabi_dmul+0x3ec>
    5872:	4315      	orrs	r5, r2
    5874:	032d      	lsls	r5, r5, #12
    5876:	4698      	mov	r8, r3
    5878:	0b2d      	lsrs	r5, r5, #12
    587a:	464c      	mov	r4, r9
    587c:	4b41      	ldr	r3, [pc, #260]	; (5984 <__aeabi_dmul+0x4f0>)
    587e:	e66f      	b.n	5560 <__aeabi_dmul+0xcc>
    5880:	465d      	mov	r5, fp
    5882:	4315      	orrs	r5, r2
    5884:	032d      	lsls	r5, r5, #12
    5886:	0b2d      	lsrs	r5, r5, #12
    5888:	4b3e      	ldr	r3, [pc, #248]	; (5984 <__aeabi_dmul+0x4f0>)
    588a:	e669      	b.n	5560 <__aeabi_dmul+0xcc>
    588c:	0003      	movs	r3, r0
    588e:	4655      	mov	r5, sl
    5890:	3b28      	subs	r3, #40	; 0x28
    5892:	409d      	lsls	r5, r3
    5894:	2300      	movs	r3, #0
    5896:	e6bc      	b.n	5612 <__aeabi_dmul+0x17e>
    5898:	4650      	mov	r0, sl
    589a:	f000 fe05 	bl	64a8 <__clzsi2>
    589e:	3020      	adds	r0, #32
    58a0:	e6a8      	b.n	55f4 <__aeabi_dmul+0x160>
    58a2:	0003      	movs	r3, r0
    58a4:	3b28      	subs	r3, #40	; 0x28
    58a6:	409f      	lsls	r7, r3
    58a8:	2300      	movs	r3, #0
    58aa:	46bb      	mov	fp, r7
    58ac:	4698      	mov	r8, r3
    58ae:	e689      	b.n	55c4 <__aeabi_dmul+0x130>
    58b0:	f000 fdfa 	bl	64a8 <__clzsi2>
    58b4:	3020      	adds	r0, #32
    58b6:	e673      	b.n	55a0 <__aeabi_dmul+0x10c>
    58b8:	2401      	movs	r4, #1
    58ba:	1aa6      	subs	r6, r4, r2
    58bc:	2e38      	cmp	r6, #56	; 0x38
    58be:	dd07      	ble.n	58d0 <__aeabi_dmul+0x43c>
    58c0:	2200      	movs	r2, #0
    58c2:	400c      	ands	r4, r1
    58c4:	2300      	movs	r3, #0
    58c6:	2500      	movs	r5, #0
    58c8:	4690      	mov	r8, r2
    58ca:	e649      	b.n	5560 <__aeabi_dmul+0xcc>
    58cc:	9e02      	ldr	r6, [sp, #8]
    58ce:	e7a3      	b.n	5818 <__aeabi_dmul+0x384>
    58d0:	2e1f      	cmp	r6, #31
    58d2:	dc20      	bgt.n	5916 <__aeabi_dmul+0x482>
    58d4:	2220      	movs	r2, #32
    58d6:	002c      	movs	r4, r5
    58d8:	0018      	movs	r0, r3
    58da:	1b92      	subs	r2, r2, r6
    58dc:	40f0      	lsrs	r0, r6
    58de:	4094      	lsls	r4, r2
    58e0:	4093      	lsls	r3, r2
    58e2:	4304      	orrs	r4, r0
    58e4:	1e58      	subs	r0, r3, #1
    58e6:	4183      	sbcs	r3, r0
    58e8:	431c      	orrs	r4, r3
    58ea:	40f5      	lsrs	r5, r6
    58ec:	0763      	lsls	r3, r4, #29
    58ee:	d009      	beq.n	5904 <__aeabi_dmul+0x470>
    58f0:	230f      	movs	r3, #15
    58f2:	4023      	ands	r3, r4
    58f4:	2b04      	cmp	r3, #4
    58f6:	d005      	beq.n	5904 <__aeabi_dmul+0x470>
    58f8:	0023      	movs	r3, r4
    58fa:	1d1c      	adds	r4, r3, #4
    58fc:	429c      	cmp	r4, r3
    58fe:	4192      	sbcs	r2, r2
    5900:	4252      	negs	r2, r2
    5902:	18ad      	adds	r5, r5, r2
    5904:	022b      	lsls	r3, r5, #8
    5906:	d51f      	bpl.n	5948 <__aeabi_dmul+0x4b4>
    5908:	2401      	movs	r4, #1
    590a:	2200      	movs	r2, #0
    590c:	400c      	ands	r4, r1
    590e:	2301      	movs	r3, #1
    5910:	2500      	movs	r5, #0
    5912:	4690      	mov	r8, r2
    5914:	e624      	b.n	5560 <__aeabi_dmul+0xcc>
    5916:	201f      	movs	r0, #31
    5918:	002c      	movs	r4, r5
    591a:	4240      	negs	r0, r0
    591c:	1a82      	subs	r2, r0, r2
    591e:	40d4      	lsrs	r4, r2
    5920:	2e20      	cmp	r6, #32
    5922:	d01c      	beq.n	595e <__aeabi_dmul+0x4ca>
    5924:	2240      	movs	r2, #64	; 0x40
    5926:	1b96      	subs	r6, r2, r6
    5928:	40b5      	lsls	r5, r6
    592a:	432b      	orrs	r3, r5
    592c:	1e58      	subs	r0, r3, #1
    592e:	4183      	sbcs	r3, r0
    5930:	2007      	movs	r0, #7
    5932:	4323      	orrs	r3, r4
    5934:	4018      	ands	r0, r3
    5936:	2500      	movs	r5, #0
    5938:	2800      	cmp	r0, #0
    593a:	d009      	beq.n	5950 <__aeabi_dmul+0x4bc>
    593c:	220f      	movs	r2, #15
    593e:	2500      	movs	r5, #0
    5940:	401a      	ands	r2, r3
    5942:	001c      	movs	r4, r3
    5944:	2a04      	cmp	r2, #4
    5946:	d1d8      	bne.n	58fa <__aeabi_dmul+0x466>
    5948:	0023      	movs	r3, r4
    594a:	0768      	lsls	r0, r5, #29
    594c:	026d      	lsls	r5, r5, #9
    594e:	0b2d      	lsrs	r5, r5, #12
    5950:	2401      	movs	r4, #1
    5952:	08db      	lsrs	r3, r3, #3
    5954:	4303      	orrs	r3, r0
    5956:	4698      	mov	r8, r3
    5958:	400c      	ands	r4, r1
    595a:	2300      	movs	r3, #0
    595c:	e600      	b.n	5560 <__aeabi_dmul+0xcc>
    595e:	2500      	movs	r5, #0
    5960:	e7e3      	b.n	592a <__aeabi_dmul+0x496>
    5962:	2280      	movs	r2, #128	; 0x80
    5964:	2401      	movs	r4, #1
    5966:	0312      	lsls	r2, r2, #12
    5968:	4315      	orrs	r5, r2
    596a:	032d      	lsls	r5, r5, #12
    596c:	4698      	mov	r8, r3
    596e:	0b2d      	lsrs	r5, r5, #12
    5970:	400c      	ands	r4, r1
    5972:	4b04      	ldr	r3, [pc, #16]	; (5984 <__aeabi_dmul+0x4f0>)
    5974:	e5f4      	b.n	5560 <__aeabi_dmul+0xcc>
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	000003ff 	.word	0x000003ff
    597c:	feffffff 	.word	0xfeffffff
    5980:	000007fe 	.word	0x000007fe
    5984:	000007ff 	.word	0x000007ff

00005988 <__aeabi_dsub>:
    5988:	b5f0      	push	{r4, r5, r6, r7, lr}
    598a:	4657      	mov	r7, sl
    598c:	464e      	mov	r6, r9
    598e:	4645      	mov	r5, r8
    5990:	b4e0      	push	{r5, r6, r7}
    5992:	000e      	movs	r6, r1
    5994:	0011      	movs	r1, r2
    5996:	0ff2      	lsrs	r2, r6, #31
    5998:	4692      	mov	sl, r2
    599a:	00c5      	lsls	r5, r0, #3
    599c:	0f42      	lsrs	r2, r0, #29
    599e:	0318      	lsls	r0, r3, #12
    59a0:	0337      	lsls	r7, r6, #12
    59a2:	0074      	lsls	r4, r6, #1
    59a4:	0a40      	lsrs	r0, r0, #9
    59a6:	0f4e      	lsrs	r6, r1, #29
    59a8:	0a7f      	lsrs	r7, r7, #9
    59aa:	4330      	orrs	r0, r6
    59ac:	4ecf      	ldr	r6, [pc, #828]	; (5cec <__aeabi_dsub+0x364>)
    59ae:	4317      	orrs	r7, r2
    59b0:	005a      	lsls	r2, r3, #1
    59b2:	0d64      	lsrs	r4, r4, #21
    59b4:	0d52      	lsrs	r2, r2, #21
    59b6:	0fdb      	lsrs	r3, r3, #31
    59b8:	00c9      	lsls	r1, r1, #3
    59ba:	42b2      	cmp	r2, r6
    59bc:	d100      	bne.n	59c0 <__aeabi_dsub+0x38>
    59be:	e0e5      	b.n	5b8c <__aeabi_dsub+0x204>
    59c0:	2601      	movs	r6, #1
    59c2:	4073      	eors	r3, r6
    59c4:	1aa6      	subs	r6, r4, r2
    59c6:	46b4      	mov	ip, r6
    59c8:	4553      	cmp	r3, sl
    59ca:	d100      	bne.n	59ce <__aeabi_dsub+0x46>
    59cc:	e0af      	b.n	5b2e <__aeabi_dsub+0x1a6>
    59ce:	2e00      	cmp	r6, #0
    59d0:	dc00      	bgt.n	59d4 <__aeabi_dsub+0x4c>
    59d2:	e10d      	b.n	5bf0 <__aeabi_dsub+0x268>
    59d4:	2a00      	cmp	r2, #0
    59d6:	d13a      	bne.n	5a4e <__aeabi_dsub+0xc6>
    59d8:	0003      	movs	r3, r0
    59da:	430b      	orrs	r3, r1
    59dc:	d000      	beq.n	59e0 <__aeabi_dsub+0x58>
    59de:	e0e4      	b.n	5baa <__aeabi_dsub+0x222>
    59e0:	076b      	lsls	r3, r5, #29
    59e2:	d009      	beq.n	59f8 <__aeabi_dsub+0x70>
    59e4:	230f      	movs	r3, #15
    59e6:	402b      	ands	r3, r5
    59e8:	2b04      	cmp	r3, #4
    59ea:	d005      	beq.n	59f8 <__aeabi_dsub+0x70>
    59ec:	1d2b      	adds	r3, r5, #4
    59ee:	42ab      	cmp	r3, r5
    59f0:	41ad      	sbcs	r5, r5
    59f2:	426d      	negs	r5, r5
    59f4:	197f      	adds	r7, r7, r5
    59f6:	001d      	movs	r5, r3
    59f8:	023b      	lsls	r3, r7, #8
    59fa:	d400      	bmi.n	59fe <__aeabi_dsub+0x76>
    59fc:	e088      	b.n	5b10 <__aeabi_dsub+0x188>
    59fe:	4bbb      	ldr	r3, [pc, #748]	; (5cec <__aeabi_dsub+0x364>)
    5a00:	3401      	adds	r4, #1
    5a02:	429c      	cmp	r4, r3
    5a04:	d100      	bne.n	5a08 <__aeabi_dsub+0x80>
    5a06:	e110      	b.n	5c2a <__aeabi_dsub+0x2a2>
    5a08:	003a      	movs	r2, r7
    5a0a:	4bb9      	ldr	r3, [pc, #740]	; (5cf0 <__aeabi_dsub+0x368>)
    5a0c:	4651      	mov	r1, sl
    5a0e:	401a      	ands	r2, r3
    5a10:	2301      	movs	r3, #1
    5a12:	0750      	lsls	r0, r2, #29
    5a14:	08ed      	lsrs	r5, r5, #3
    5a16:	0252      	lsls	r2, r2, #9
    5a18:	0564      	lsls	r4, r4, #21
    5a1a:	4305      	orrs	r5, r0
    5a1c:	0b12      	lsrs	r2, r2, #12
    5a1e:	0d64      	lsrs	r4, r4, #21
    5a20:	400b      	ands	r3, r1
    5a22:	2100      	movs	r1, #0
    5a24:	0028      	movs	r0, r5
    5a26:	0312      	lsls	r2, r2, #12
    5a28:	0d0d      	lsrs	r5, r1, #20
    5a2a:	0b12      	lsrs	r2, r2, #12
    5a2c:	0564      	lsls	r4, r4, #21
    5a2e:	052d      	lsls	r5, r5, #20
    5a30:	4315      	orrs	r5, r2
    5a32:	0862      	lsrs	r2, r4, #1
    5a34:	4caf      	ldr	r4, [pc, #700]	; (5cf4 <__aeabi_dsub+0x36c>)
    5a36:	07db      	lsls	r3, r3, #31
    5a38:	402c      	ands	r4, r5
    5a3a:	4314      	orrs	r4, r2
    5a3c:	0064      	lsls	r4, r4, #1
    5a3e:	0864      	lsrs	r4, r4, #1
    5a40:	431c      	orrs	r4, r3
    5a42:	0021      	movs	r1, r4
    5a44:	bc1c      	pop	{r2, r3, r4}
    5a46:	4690      	mov	r8, r2
    5a48:	4699      	mov	r9, r3
    5a4a:	46a2      	mov	sl, r4
    5a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a4e:	4ba7      	ldr	r3, [pc, #668]	; (5cec <__aeabi_dsub+0x364>)
    5a50:	429c      	cmp	r4, r3
    5a52:	d0c5      	beq.n	59e0 <__aeabi_dsub+0x58>
    5a54:	2380      	movs	r3, #128	; 0x80
    5a56:	041b      	lsls	r3, r3, #16
    5a58:	4318      	orrs	r0, r3
    5a5a:	4663      	mov	r3, ip
    5a5c:	2b38      	cmp	r3, #56	; 0x38
    5a5e:	dd00      	ble.n	5a62 <__aeabi_dsub+0xda>
    5a60:	e0fd      	b.n	5c5e <__aeabi_dsub+0x2d6>
    5a62:	2b1f      	cmp	r3, #31
    5a64:	dd00      	ble.n	5a68 <__aeabi_dsub+0xe0>
    5a66:	e130      	b.n	5cca <__aeabi_dsub+0x342>
    5a68:	4662      	mov	r2, ip
    5a6a:	2320      	movs	r3, #32
    5a6c:	1a9b      	subs	r3, r3, r2
    5a6e:	0002      	movs	r2, r0
    5a70:	409a      	lsls	r2, r3
    5a72:	4666      	mov	r6, ip
    5a74:	4690      	mov	r8, r2
    5a76:	000a      	movs	r2, r1
    5a78:	4099      	lsls	r1, r3
    5a7a:	40f2      	lsrs	r2, r6
    5a7c:	4646      	mov	r6, r8
    5a7e:	1e4b      	subs	r3, r1, #1
    5a80:	4199      	sbcs	r1, r3
    5a82:	4332      	orrs	r2, r6
    5a84:	4311      	orrs	r1, r2
    5a86:	4663      	mov	r3, ip
    5a88:	0002      	movs	r2, r0
    5a8a:	40da      	lsrs	r2, r3
    5a8c:	1a69      	subs	r1, r5, r1
    5a8e:	428d      	cmp	r5, r1
    5a90:	419b      	sbcs	r3, r3
    5a92:	000d      	movs	r5, r1
    5a94:	1aba      	subs	r2, r7, r2
    5a96:	425b      	negs	r3, r3
    5a98:	1ad7      	subs	r7, r2, r3
    5a9a:	023b      	lsls	r3, r7, #8
    5a9c:	d535      	bpl.n	5b0a <__aeabi_dsub+0x182>
    5a9e:	027a      	lsls	r2, r7, #9
    5aa0:	0a53      	lsrs	r3, r2, #9
    5aa2:	4698      	mov	r8, r3
    5aa4:	4643      	mov	r3, r8
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d100      	bne.n	5aac <__aeabi_dsub+0x124>
    5aaa:	e0c4      	b.n	5c36 <__aeabi_dsub+0x2ae>
    5aac:	4640      	mov	r0, r8
    5aae:	f000 fcfb 	bl	64a8 <__clzsi2>
    5ab2:	0003      	movs	r3, r0
    5ab4:	3b08      	subs	r3, #8
    5ab6:	2b1f      	cmp	r3, #31
    5ab8:	dd00      	ble.n	5abc <__aeabi_dsub+0x134>
    5aba:	e0c5      	b.n	5c48 <__aeabi_dsub+0x2c0>
    5abc:	2220      	movs	r2, #32
    5abe:	0029      	movs	r1, r5
    5ac0:	1ad2      	subs	r2, r2, r3
    5ac2:	4647      	mov	r7, r8
    5ac4:	40d1      	lsrs	r1, r2
    5ac6:	409f      	lsls	r7, r3
    5ac8:	000a      	movs	r2, r1
    5aca:	409d      	lsls	r5, r3
    5acc:	433a      	orrs	r2, r7
    5ace:	429c      	cmp	r4, r3
    5ad0:	dd00      	ble.n	5ad4 <__aeabi_dsub+0x14c>
    5ad2:	e0c0      	b.n	5c56 <__aeabi_dsub+0x2ce>
    5ad4:	1b1c      	subs	r4, r3, r4
    5ad6:	1c63      	adds	r3, r4, #1
    5ad8:	2b1f      	cmp	r3, #31
    5ada:	dd00      	ble.n	5ade <__aeabi_dsub+0x156>
    5adc:	e0e4      	b.n	5ca8 <__aeabi_dsub+0x320>
    5ade:	2120      	movs	r1, #32
    5ae0:	0014      	movs	r4, r2
    5ae2:	0028      	movs	r0, r5
    5ae4:	1ac9      	subs	r1, r1, r3
    5ae6:	40d8      	lsrs	r0, r3
    5ae8:	408c      	lsls	r4, r1
    5aea:	408d      	lsls	r5, r1
    5aec:	4304      	orrs	r4, r0
    5aee:	40da      	lsrs	r2, r3
    5af0:	1e68      	subs	r0, r5, #1
    5af2:	4185      	sbcs	r5, r0
    5af4:	0017      	movs	r7, r2
    5af6:	4325      	orrs	r5, r4
    5af8:	2400      	movs	r4, #0
    5afa:	e771      	b.n	59e0 <__aeabi_dsub+0x58>
    5afc:	4642      	mov	r2, r8
    5afe:	4663      	mov	r3, ip
    5b00:	431a      	orrs	r2, r3
    5b02:	d100      	bne.n	5b06 <__aeabi_dsub+0x17e>
    5b04:	e24c      	b.n	5fa0 <__aeabi_dsub+0x618>
    5b06:	4667      	mov	r7, ip
    5b08:	4645      	mov	r5, r8
    5b0a:	076b      	lsls	r3, r5, #29
    5b0c:	d000      	beq.n	5b10 <__aeabi_dsub+0x188>
    5b0e:	e769      	b.n	59e4 <__aeabi_dsub+0x5c>
    5b10:	2301      	movs	r3, #1
    5b12:	4651      	mov	r1, sl
    5b14:	0778      	lsls	r0, r7, #29
    5b16:	08ed      	lsrs	r5, r5, #3
    5b18:	08fa      	lsrs	r2, r7, #3
    5b1a:	400b      	ands	r3, r1
    5b1c:	4305      	orrs	r5, r0
    5b1e:	4973      	ldr	r1, [pc, #460]	; (5cec <__aeabi_dsub+0x364>)
    5b20:	428c      	cmp	r4, r1
    5b22:	d038      	beq.n	5b96 <__aeabi_dsub+0x20e>
    5b24:	0312      	lsls	r2, r2, #12
    5b26:	0564      	lsls	r4, r4, #21
    5b28:	0b12      	lsrs	r2, r2, #12
    5b2a:	0d64      	lsrs	r4, r4, #21
    5b2c:	e779      	b.n	5a22 <__aeabi_dsub+0x9a>
    5b2e:	2e00      	cmp	r6, #0
    5b30:	dc00      	bgt.n	5b34 <__aeabi_dsub+0x1ac>
    5b32:	e09a      	b.n	5c6a <__aeabi_dsub+0x2e2>
    5b34:	2a00      	cmp	r2, #0
    5b36:	d047      	beq.n	5bc8 <__aeabi_dsub+0x240>
    5b38:	4a6c      	ldr	r2, [pc, #432]	; (5cec <__aeabi_dsub+0x364>)
    5b3a:	4294      	cmp	r4, r2
    5b3c:	d100      	bne.n	5b40 <__aeabi_dsub+0x1b8>
    5b3e:	e74f      	b.n	59e0 <__aeabi_dsub+0x58>
    5b40:	2280      	movs	r2, #128	; 0x80
    5b42:	0412      	lsls	r2, r2, #16
    5b44:	4310      	orrs	r0, r2
    5b46:	4662      	mov	r2, ip
    5b48:	2a38      	cmp	r2, #56	; 0x38
    5b4a:	dc00      	bgt.n	5b4e <__aeabi_dsub+0x1c6>
    5b4c:	e108      	b.n	5d60 <__aeabi_dsub+0x3d8>
    5b4e:	4301      	orrs	r1, r0
    5b50:	1e48      	subs	r0, r1, #1
    5b52:	4181      	sbcs	r1, r0
    5b54:	2200      	movs	r2, #0
    5b56:	b2c9      	uxtb	r1, r1
    5b58:	1949      	adds	r1, r1, r5
    5b5a:	19d2      	adds	r2, r2, r7
    5b5c:	42a9      	cmp	r1, r5
    5b5e:	41bf      	sbcs	r7, r7
    5b60:	000d      	movs	r5, r1
    5b62:	427f      	negs	r7, r7
    5b64:	18bf      	adds	r7, r7, r2
    5b66:	023a      	lsls	r2, r7, #8
    5b68:	d400      	bmi.n	5b6c <__aeabi_dsub+0x1e4>
    5b6a:	e142      	b.n	5df2 <__aeabi_dsub+0x46a>
    5b6c:	4a5f      	ldr	r2, [pc, #380]	; (5cec <__aeabi_dsub+0x364>)
    5b6e:	3401      	adds	r4, #1
    5b70:	4294      	cmp	r4, r2
    5b72:	d100      	bne.n	5b76 <__aeabi_dsub+0x1ee>
    5b74:	e14e      	b.n	5e14 <__aeabi_dsub+0x48c>
    5b76:	2001      	movs	r0, #1
    5b78:	4a5d      	ldr	r2, [pc, #372]	; (5cf0 <__aeabi_dsub+0x368>)
    5b7a:	0869      	lsrs	r1, r5, #1
    5b7c:	403a      	ands	r2, r7
    5b7e:	4028      	ands	r0, r5
    5b80:	4308      	orrs	r0, r1
    5b82:	07d5      	lsls	r5, r2, #31
    5b84:	4305      	orrs	r5, r0
    5b86:	0857      	lsrs	r7, r2, #1
    5b88:	469a      	mov	sl, r3
    5b8a:	e729      	b.n	59e0 <__aeabi_dsub+0x58>
    5b8c:	0006      	movs	r6, r0
    5b8e:	430e      	orrs	r6, r1
    5b90:	d000      	beq.n	5b94 <__aeabi_dsub+0x20c>
    5b92:	e717      	b.n	59c4 <__aeabi_dsub+0x3c>
    5b94:	e714      	b.n	59c0 <__aeabi_dsub+0x38>
    5b96:	0029      	movs	r1, r5
    5b98:	4311      	orrs	r1, r2
    5b9a:	d100      	bne.n	5b9e <__aeabi_dsub+0x216>
    5b9c:	e1f9      	b.n	5f92 <__aeabi_dsub+0x60a>
    5b9e:	2180      	movs	r1, #128	; 0x80
    5ba0:	0309      	lsls	r1, r1, #12
    5ba2:	430a      	orrs	r2, r1
    5ba4:	0312      	lsls	r2, r2, #12
    5ba6:	0b12      	lsrs	r2, r2, #12
    5ba8:	e73b      	b.n	5a22 <__aeabi_dsub+0x9a>
    5baa:	2301      	movs	r3, #1
    5bac:	425b      	negs	r3, r3
    5bae:	4698      	mov	r8, r3
    5bb0:	44c4      	add	ip, r8
    5bb2:	4663      	mov	r3, ip
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d172      	bne.n	5c9e <__aeabi_dsub+0x316>
    5bb8:	1a69      	subs	r1, r5, r1
    5bba:	428d      	cmp	r5, r1
    5bbc:	419b      	sbcs	r3, r3
    5bbe:	1a3f      	subs	r7, r7, r0
    5bc0:	425b      	negs	r3, r3
    5bc2:	1aff      	subs	r7, r7, r3
    5bc4:	000d      	movs	r5, r1
    5bc6:	e768      	b.n	5a9a <__aeabi_dsub+0x112>
    5bc8:	0002      	movs	r2, r0
    5bca:	430a      	orrs	r2, r1
    5bcc:	d100      	bne.n	5bd0 <__aeabi_dsub+0x248>
    5bce:	e707      	b.n	59e0 <__aeabi_dsub+0x58>
    5bd0:	2201      	movs	r2, #1
    5bd2:	4252      	negs	r2, r2
    5bd4:	4690      	mov	r8, r2
    5bd6:	44c4      	add	ip, r8
    5bd8:	4662      	mov	r2, ip
    5bda:	2a00      	cmp	r2, #0
    5bdc:	d000      	beq.n	5be0 <__aeabi_dsub+0x258>
    5bde:	e0e6      	b.n	5dae <__aeabi_dsub+0x426>
    5be0:	1869      	adds	r1, r5, r1
    5be2:	42a9      	cmp	r1, r5
    5be4:	41b6      	sbcs	r6, r6
    5be6:	183f      	adds	r7, r7, r0
    5be8:	4276      	negs	r6, r6
    5bea:	19f7      	adds	r7, r6, r7
    5bec:	000d      	movs	r5, r1
    5bee:	e7ba      	b.n	5b66 <__aeabi_dsub+0x1de>
    5bf0:	2e00      	cmp	r6, #0
    5bf2:	d000      	beq.n	5bf6 <__aeabi_dsub+0x26e>
    5bf4:	e080      	b.n	5cf8 <__aeabi_dsub+0x370>
    5bf6:	1c62      	adds	r2, r4, #1
    5bf8:	0552      	lsls	r2, r2, #21
    5bfa:	0d52      	lsrs	r2, r2, #21
    5bfc:	2a01      	cmp	r2, #1
    5bfe:	dc00      	bgt.n	5c02 <__aeabi_dsub+0x27a>
    5c00:	e0f9      	b.n	5df6 <__aeabi_dsub+0x46e>
    5c02:	1a6a      	subs	r2, r5, r1
    5c04:	4691      	mov	r9, r2
    5c06:	454d      	cmp	r5, r9
    5c08:	41b6      	sbcs	r6, r6
    5c0a:	1a3a      	subs	r2, r7, r0
    5c0c:	4276      	negs	r6, r6
    5c0e:	1b92      	subs	r2, r2, r6
    5c10:	4690      	mov	r8, r2
    5c12:	0212      	lsls	r2, r2, #8
    5c14:	d400      	bmi.n	5c18 <__aeabi_dsub+0x290>
    5c16:	e099      	b.n	5d4c <__aeabi_dsub+0x3c4>
    5c18:	1b4d      	subs	r5, r1, r5
    5c1a:	42a9      	cmp	r1, r5
    5c1c:	4189      	sbcs	r1, r1
    5c1e:	1bc7      	subs	r7, r0, r7
    5c20:	4249      	negs	r1, r1
    5c22:	1a7a      	subs	r2, r7, r1
    5c24:	4690      	mov	r8, r2
    5c26:	469a      	mov	sl, r3
    5c28:	e73c      	b.n	5aa4 <__aeabi_dsub+0x11c>
    5c2a:	4652      	mov	r2, sl
    5c2c:	2301      	movs	r3, #1
    5c2e:	2500      	movs	r5, #0
    5c30:	4013      	ands	r3, r2
    5c32:	2200      	movs	r2, #0
    5c34:	e6f5      	b.n	5a22 <__aeabi_dsub+0x9a>
    5c36:	0028      	movs	r0, r5
    5c38:	f000 fc36 	bl	64a8 <__clzsi2>
    5c3c:	3020      	adds	r0, #32
    5c3e:	0003      	movs	r3, r0
    5c40:	3b08      	subs	r3, #8
    5c42:	2b1f      	cmp	r3, #31
    5c44:	dc00      	bgt.n	5c48 <__aeabi_dsub+0x2c0>
    5c46:	e739      	b.n	5abc <__aeabi_dsub+0x134>
    5c48:	002a      	movs	r2, r5
    5c4a:	3828      	subs	r0, #40	; 0x28
    5c4c:	4082      	lsls	r2, r0
    5c4e:	2500      	movs	r5, #0
    5c50:	429c      	cmp	r4, r3
    5c52:	dc00      	bgt.n	5c56 <__aeabi_dsub+0x2ce>
    5c54:	e73e      	b.n	5ad4 <__aeabi_dsub+0x14c>
    5c56:	4f26      	ldr	r7, [pc, #152]	; (5cf0 <__aeabi_dsub+0x368>)
    5c58:	1ae4      	subs	r4, r4, r3
    5c5a:	4017      	ands	r7, r2
    5c5c:	e6c0      	b.n	59e0 <__aeabi_dsub+0x58>
    5c5e:	4301      	orrs	r1, r0
    5c60:	1e48      	subs	r0, r1, #1
    5c62:	4181      	sbcs	r1, r0
    5c64:	2200      	movs	r2, #0
    5c66:	b2c9      	uxtb	r1, r1
    5c68:	e710      	b.n	5a8c <__aeabi_dsub+0x104>
    5c6a:	2e00      	cmp	r6, #0
    5c6c:	d000      	beq.n	5c70 <__aeabi_dsub+0x2e8>
    5c6e:	e0f1      	b.n	5e54 <__aeabi_dsub+0x4cc>
    5c70:	1c62      	adds	r2, r4, #1
    5c72:	4694      	mov	ip, r2
    5c74:	0552      	lsls	r2, r2, #21
    5c76:	0d52      	lsrs	r2, r2, #21
    5c78:	2a01      	cmp	r2, #1
    5c7a:	dc00      	bgt.n	5c7e <__aeabi_dsub+0x2f6>
    5c7c:	e0a0      	b.n	5dc0 <__aeabi_dsub+0x438>
    5c7e:	4a1b      	ldr	r2, [pc, #108]	; (5cec <__aeabi_dsub+0x364>)
    5c80:	4594      	cmp	ip, r2
    5c82:	d100      	bne.n	5c86 <__aeabi_dsub+0x2fe>
    5c84:	e0c5      	b.n	5e12 <__aeabi_dsub+0x48a>
    5c86:	1869      	adds	r1, r5, r1
    5c88:	42a9      	cmp	r1, r5
    5c8a:	4192      	sbcs	r2, r2
    5c8c:	183f      	adds	r7, r7, r0
    5c8e:	4252      	negs	r2, r2
    5c90:	19d2      	adds	r2, r2, r7
    5c92:	0849      	lsrs	r1, r1, #1
    5c94:	07d5      	lsls	r5, r2, #31
    5c96:	430d      	orrs	r5, r1
    5c98:	0857      	lsrs	r7, r2, #1
    5c9a:	4664      	mov	r4, ip
    5c9c:	e6a0      	b.n	59e0 <__aeabi_dsub+0x58>
    5c9e:	4b13      	ldr	r3, [pc, #76]	; (5cec <__aeabi_dsub+0x364>)
    5ca0:	429c      	cmp	r4, r3
    5ca2:	d000      	beq.n	5ca6 <__aeabi_dsub+0x31e>
    5ca4:	e6d9      	b.n	5a5a <__aeabi_dsub+0xd2>
    5ca6:	e69b      	b.n	59e0 <__aeabi_dsub+0x58>
    5ca8:	0011      	movs	r1, r2
    5caa:	3c1f      	subs	r4, #31
    5cac:	40e1      	lsrs	r1, r4
    5cae:	000c      	movs	r4, r1
    5cb0:	2b20      	cmp	r3, #32
    5cb2:	d100      	bne.n	5cb6 <__aeabi_dsub+0x32e>
    5cb4:	e080      	b.n	5db8 <__aeabi_dsub+0x430>
    5cb6:	2140      	movs	r1, #64	; 0x40
    5cb8:	1acb      	subs	r3, r1, r3
    5cba:	409a      	lsls	r2, r3
    5cbc:	4315      	orrs	r5, r2
    5cbe:	1e6a      	subs	r2, r5, #1
    5cc0:	4195      	sbcs	r5, r2
    5cc2:	2700      	movs	r7, #0
    5cc4:	4325      	orrs	r5, r4
    5cc6:	2400      	movs	r4, #0
    5cc8:	e71f      	b.n	5b0a <__aeabi_dsub+0x182>
    5cca:	4663      	mov	r3, ip
    5ccc:	0002      	movs	r2, r0
    5cce:	3b20      	subs	r3, #32
    5cd0:	40da      	lsrs	r2, r3
    5cd2:	4663      	mov	r3, ip
    5cd4:	2b20      	cmp	r3, #32
    5cd6:	d071      	beq.n	5dbc <__aeabi_dsub+0x434>
    5cd8:	2340      	movs	r3, #64	; 0x40
    5cda:	4666      	mov	r6, ip
    5cdc:	1b9b      	subs	r3, r3, r6
    5cde:	4098      	lsls	r0, r3
    5ce0:	4301      	orrs	r1, r0
    5ce2:	1e48      	subs	r0, r1, #1
    5ce4:	4181      	sbcs	r1, r0
    5ce6:	4311      	orrs	r1, r2
    5ce8:	2200      	movs	r2, #0
    5cea:	e6cf      	b.n	5a8c <__aeabi_dsub+0x104>
    5cec:	000007ff 	.word	0x000007ff
    5cf0:	ff7fffff 	.word	0xff7fffff
    5cf4:	800fffff 	.word	0x800fffff
    5cf8:	2c00      	cmp	r4, #0
    5cfa:	d048      	beq.n	5d8e <__aeabi_dsub+0x406>
    5cfc:	4cca      	ldr	r4, [pc, #808]	; (6028 <__aeabi_dsub+0x6a0>)
    5cfe:	42a2      	cmp	r2, r4
    5d00:	d100      	bne.n	5d04 <__aeabi_dsub+0x37c>
    5d02:	e0a2      	b.n	5e4a <__aeabi_dsub+0x4c2>
    5d04:	4274      	negs	r4, r6
    5d06:	46a1      	mov	r9, r4
    5d08:	2480      	movs	r4, #128	; 0x80
    5d0a:	0424      	lsls	r4, r4, #16
    5d0c:	4327      	orrs	r7, r4
    5d0e:	464c      	mov	r4, r9
    5d10:	2c38      	cmp	r4, #56	; 0x38
    5d12:	dd00      	ble.n	5d16 <__aeabi_dsub+0x38e>
    5d14:	e0db      	b.n	5ece <__aeabi_dsub+0x546>
    5d16:	2c1f      	cmp	r4, #31
    5d18:	dd00      	ble.n	5d1c <__aeabi_dsub+0x394>
    5d1a:	e144      	b.n	5fa6 <__aeabi_dsub+0x61e>
    5d1c:	464e      	mov	r6, r9
    5d1e:	2420      	movs	r4, #32
    5d20:	1ba4      	subs	r4, r4, r6
    5d22:	003e      	movs	r6, r7
    5d24:	40a6      	lsls	r6, r4
    5d26:	46a2      	mov	sl, r4
    5d28:	46b0      	mov	r8, r6
    5d2a:	464c      	mov	r4, r9
    5d2c:	002e      	movs	r6, r5
    5d2e:	40e6      	lsrs	r6, r4
    5d30:	46b4      	mov	ip, r6
    5d32:	4646      	mov	r6, r8
    5d34:	4664      	mov	r4, ip
    5d36:	4326      	orrs	r6, r4
    5d38:	4654      	mov	r4, sl
    5d3a:	40a5      	lsls	r5, r4
    5d3c:	1e6c      	subs	r4, r5, #1
    5d3e:	41a5      	sbcs	r5, r4
    5d40:	0034      	movs	r4, r6
    5d42:	432c      	orrs	r4, r5
    5d44:	464d      	mov	r5, r9
    5d46:	40ef      	lsrs	r7, r5
    5d48:	1b0d      	subs	r5, r1, r4
    5d4a:	e028      	b.n	5d9e <__aeabi_dsub+0x416>
    5d4c:	464a      	mov	r2, r9
    5d4e:	4643      	mov	r3, r8
    5d50:	464d      	mov	r5, r9
    5d52:	431a      	orrs	r2, r3
    5d54:	d000      	beq.n	5d58 <__aeabi_dsub+0x3d0>
    5d56:	e6a5      	b.n	5aa4 <__aeabi_dsub+0x11c>
    5d58:	2300      	movs	r3, #0
    5d5a:	2400      	movs	r4, #0
    5d5c:	2500      	movs	r5, #0
    5d5e:	e6de      	b.n	5b1e <__aeabi_dsub+0x196>
    5d60:	2a1f      	cmp	r2, #31
    5d62:	dc5a      	bgt.n	5e1a <__aeabi_dsub+0x492>
    5d64:	4666      	mov	r6, ip
    5d66:	2220      	movs	r2, #32
    5d68:	1b92      	subs	r2, r2, r6
    5d6a:	0006      	movs	r6, r0
    5d6c:	4096      	lsls	r6, r2
    5d6e:	4691      	mov	r9, r2
    5d70:	46b0      	mov	r8, r6
    5d72:	4662      	mov	r2, ip
    5d74:	000e      	movs	r6, r1
    5d76:	40d6      	lsrs	r6, r2
    5d78:	4642      	mov	r2, r8
    5d7a:	4316      	orrs	r6, r2
    5d7c:	464a      	mov	r2, r9
    5d7e:	4091      	lsls	r1, r2
    5d80:	1e4a      	subs	r2, r1, #1
    5d82:	4191      	sbcs	r1, r2
    5d84:	0002      	movs	r2, r0
    5d86:	4660      	mov	r0, ip
    5d88:	4331      	orrs	r1, r6
    5d8a:	40c2      	lsrs	r2, r0
    5d8c:	e6e4      	b.n	5b58 <__aeabi_dsub+0x1d0>
    5d8e:	003c      	movs	r4, r7
    5d90:	432c      	orrs	r4, r5
    5d92:	d05a      	beq.n	5e4a <__aeabi_dsub+0x4c2>
    5d94:	43f4      	mvns	r4, r6
    5d96:	46a1      	mov	r9, r4
    5d98:	2c00      	cmp	r4, #0
    5d9a:	d152      	bne.n	5e42 <__aeabi_dsub+0x4ba>
    5d9c:	1b4d      	subs	r5, r1, r5
    5d9e:	42a9      	cmp	r1, r5
    5da0:	4189      	sbcs	r1, r1
    5da2:	1bc7      	subs	r7, r0, r7
    5da4:	4249      	negs	r1, r1
    5da6:	1a7f      	subs	r7, r7, r1
    5da8:	0014      	movs	r4, r2
    5daa:	469a      	mov	sl, r3
    5dac:	e675      	b.n	5a9a <__aeabi_dsub+0x112>
    5dae:	4a9e      	ldr	r2, [pc, #632]	; (6028 <__aeabi_dsub+0x6a0>)
    5db0:	4294      	cmp	r4, r2
    5db2:	d000      	beq.n	5db6 <__aeabi_dsub+0x42e>
    5db4:	e6c7      	b.n	5b46 <__aeabi_dsub+0x1be>
    5db6:	e613      	b.n	59e0 <__aeabi_dsub+0x58>
    5db8:	2200      	movs	r2, #0
    5dba:	e77f      	b.n	5cbc <__aeabi_dsub+0x334>
    5dbc:	2000      	movs	r0, #0
    5dbe:	e78f      	b.n	5ce0 <__aeabi_dsub+0x358>
    5dc0:	2c00      	cmp	r4, #0
    5dc2:	d000      	beq.n	5dc6 <__aeabi_dsub+0x43e>
    5dc4:	e0c8      	b.n	5f58 <__aeabi_dsub+0x5d0>
    5dc6:	003b      	movs	r3, r7
    5dc8:	432b      	orrs	r3, r5
    5dca:	d100      	bne.n	5dce <__aeabi_dsub+0x446>
    5dcc:	e10f      	b.n	5fee <__aeabi_dsub+0x666>
    5dce:	0003      	movs	r3, r0
    5dd0:	430b      	orrs	r3, r1
    5dd2:	d100      	bne.n	5dd6 <__aeabi_dsub+0x44e>
    5dd4:	e604      	b.n	59e0 <__aeabi_dsub+0x58>
    5dd6:	1869      	adds	r1, r5, r1
    5dd8:	42a9      	cmp	r1, r5
    5dda:	419b      	sbcs	r3, r3
    5ddc:	183f      	adds	r7, r7, r0
    5dde:	425b      	negs	r3, r3
    5de0:	19df      	adds	r7, r3, r7
    5de2:	023b      	lsls	r3, r7, #8
    5de4:	d400      	bmi.n	5de8 <__aeabi_dsub+0x460>
    5de6:	e11a      	b.n	601e <__aeabi_dsub+0x696>
    5de8:	4b90      	ldr	r3, [pc, #576]	; (602c <__aeabi_dsub+0x6a4>)
    5dea:	000d      	movs	r5, r1
    5dec:	401f      	ands	r7, r3
    5dee:	4664      	mov	r4, ip
    5df0:	e5f6      	b.n	59e0 <__aeabi_dsub+0x58>
    5df2:	469a      	mov	sl, r3
    5df4:	e689      	b.n	5b0a <__aeabi_dsub+0x182>
    5df6:	003a      	movs	r2, r7
    5df8:	432a      	orrs	r2, r5
    5dfa:	2c00      	cmp	r4, #0
    5dfc:	d15c      	bne.n	5eb8 <__aeabi_dsub+0x530>
    5dfe:	2a00      	cmp	r2, #0
    5e00:	d175      	bne.n	5eee <__aeabi_dsub+0x566>
    5e02:	0002      	movs	r2, r0
    5e04:	430a      	orrs	r2, r1
    5e06:	d100      	bne.n	5e0a <__aeabi_dsub+0x482>
    5e08:	e0ca      	b.n	5fa0 <__aeabi_dsub+0x618>
    5e0a:	0007      	movs	r7, r0
    5e0c:	000d      	movs	r5, r1
    5e0e:	469a      	mov	sl, r3
    5e10:	e5e6      	b.n	59e0 <__aeabi_dsub+0x58>
    5e12:	4664      	mov	r4, ip
    5e14:	2200      	movs	r2, #0
    5e16:	2500      	movs	r5, #0
    5e18:	e681      	b.n	5b1e <__aeabi_dsub+0x196>
    5e1a:	4662      	mov	r2, ip
    5e1c:	0006      	movs	r6, r0
    5e1e:	3a20      	subs	r2, #32
    5e20:	40d6      	lsrs	r6, r2
    5e22:	4662      	mov	r2, ip
    5e24:	46b0      	mov	r8, r6
    5e26:	2a20      	cmp	r2, #32
    5e28:	d100      	bne.n	5e2c <__aeabi_dsub+0x4a4>
    5e2a:	e0b7      	b.n	5f9c <__aeabi_dsub+0x614>
    5e2c:	2240      	movs	r2, #64	; 0x40
    5e2e:	4666      	mov	r6, ip
    5e30:	1b92      	subs	r2, r2, r6
    5e32:	4090      	lsls	r0, r2
    5e34:	4301      	orrs	r1, r0
    5e36:	4642      	mov	r2, r8
    5e38:	1e48      	subs	r0, r1, #1
    5e3a:	4181      	sbcs	r1, r0
    5e3c:	4311      	orrs	r1, r2
    5e3e:	2200      	movs	r2, #0
    5e40:	e68a      	b.n	5b58 <__aeabi_dsub+0x1d0>
    5e42:	4c79      	ldr	r4, [pc, #484]	; (6028 <__aeabi_dsub+0x6a0>)
    5e44:	42a2      	cmp	r2, r4
    5e46:	d000      	beq.n	5e4a <__aeabi_dsub+0x4c2>
    5e48:	e761      	b.n	5d0e <__aeabi_dsub+0x386>
    5e4a:	0007      	movs	r7, r0
    5e4c:	000d      	movs	r5, r1
    5e4e:	0014      	movs	r4, r2
    5e50:	469a      	mov	sl, r3
    5e52:	e5c5      	b.n	59e0 <__aeabi_dsub+0x58>
    5e54:	2c00      	cmp	r4, #0
    5e56:	d141      	bne.n	5edc <__aeabi_dsub+0x554>
    5e58:	003c      	movs	r4, r7
    5e5a:	432c      	orrs	r4, r5
    5e5c:	d078      	beq.n	5f50 <__aeabi_dsub+0x5c8>
    5e5e:	43f4      	mvns	r4, r6
    5e60:	46a1      	mov	r9, r4
    5e62:	2c00      	cmp	r4, #0
    5e64:	d020      	beq.n	5ea8 <__aeabi_dsub+0x520>
    5e66:	4c70      	ldr	r4, [pc, #448]	; (6028 <__aeabi_dsub+0x6a0>)
    5e68:	42a2      	cmp	r2, r4
    5e6a:	d071      	beq.n	5f50 <__aeabi_dsub+0x5c8>
    5e6c:	464c      	mov	r4, r9
    5e6e:	2c38      	cmp	r4, #56	; 0x38
    5e70:	dd00      	ble.n	5e74 <__aeabi_dsub+0x4ec>
    5e72:	e0b2      	b.n	5fda <__aeabi_dsub+0x652>
    5e74:	2c1f      	cmp	r4, #31
    5e76:	dd00      	ble.n	5e7a <__aeabi_dsub+0x4f2>
    5e78:	e0bc      	b.n	5ff4 <__aeabi_dsub+0x66c>
    5e7a:	2620      	movs	r6, #32
    5e7c:	1b34      	subs	r4, r6, r4
    5e7e:	46a2      	mov	sl, r4
    5e80:	003c      	movs	r4, r7
    5e82:	4656      	mov	r6, sl
    5e84:	40b4      	lsls	r4, r6
    5e86:	464e      	mov	r6, r9
    5e88:	46a0      	mov	r8, r4
    5e8a:	002c      	movs	r4, r5
    5e8c:	40f4      	lsrs	r4, r6
    5e8e:	46a4      	mov	ip, r4
    5e90:	4644      	mov	r4, r8
    5e92:	4666      	mov	r6, ip
    5e94:	4334      	orrs	r4, r6
    5e96:	46a4      	mov	ip, r4
    5e98:	4654      	mov	r4, sl
    5e9a:	40a5      	lsls	r5, r4
    5e9c:	4664      	mov	r4, ip
    5e9e:	1e6e      	subs	r6, r5, #1
    5ea0:	41b5      	sbcs	r5, r6
    5ea2:	4325      	orrs	r5, r4
    5ea4:	464c      	mov	r4, r9
    5ea6:	40e7      	lsrs	r7, r4
    5ea8:	186d      	adds	r5, r5, r1
    5eaa:	428d      	cmp	r5, r1
    5eac:	4189      	sbcs	r1, r1
    5eae:	183f      	adds	r7, r7, r0
    5eb0:	4249      	negs	r1, r1
    5eb2:	19cf      	adds	r7, r1, r7
    5eb4:	0014      	movs	r4, r2
    5eb6:	e656      	b.n	5b66 <__aeabi_dsub+0x1de>
    5eb8:	2a00      	cmp	r2, #0
    5eba:	d12f      	bne.n	5f1c <__aeabi_dsub+0x594>
    5ebc:	0002      	movs	r2, r0
    5ebe:	430a      	orrs	r2, r1
    5ec0:	d100      	bne.n	5ec4 <__aeabi_dsub+0x53c>
    5ec2:	e084      	b.n	5fce <__aeabi_dsub+0x646>
    5ec4:	0007      	movs	r7, r0
    5ec6:	000d      	movs	r5, r1
    5ec8:	469a      	mov	sl, r3
    5eca:	4c57      	ldr	r4, [pc, #348]	; (6028 <__aeabi_dsub+0x6a0>)
    5ecc:	e588      	b.n	59e0 <__aeabi_dsub+0x58>
    5ece:	433d      	orrs	r5, r7
    5ed0:	1e6f      	subs	r7, r5, #1
    5ed2:	41bd      	sbcs	r5, r7
    5ed4:	b2ec      	uxtb	r4, r5
    5ed6:	2700      	movs	r7, #0
    5ed8:	1b0d      	subs	r5, r1, r4
    5eda:	e760      	b.n	5d9e <__aeabi_dsub+0x416>
    5edc:	4c52      	ldr	r4, [pc, #328]	; (6028 <__aeabi_dsub+0x6a0>)
    5ede:	42a2      	cmp	r2, r4
    5ee0:	d036      	beq.n	5f50 <__aeabi_dsub+0x5c8>
    5ee2:	4274      	negs	r4, r6
    5ee4:	2680      	movs	r6, #128	; 0x80
    5ee6:	0436      	lsls	r6, r6, #16
    5ee8:	46a1      	mov	r9, r4
    5eea:	4337      	orrs	r7, r6
    5eec:	e7be      	b.n	5e6c <__aeabi_dsub+0x4e4>
    5eee:	0002      	movs	r2, r0
    5ef0:	430a      	orrs	r2, r1
    5ef2:	d100      	bne.n	5ef6 <__aeabi_dsub+0x56e>
    5ef4:	e574      	b.n	59e0 <__aeabi_dsub+0x58>
    5ef6:	1a6a      	subs	r2, r5, r1
    5ef8:	4690      	mov	r8, r2
    5efa:	4545      	cmp	r5, r8
    5efc:	41b6      	sbcs	r6, r6
    5efe:	1a3a      	subs	r2, r7, r0
    5f00:	4276      	negs	r6, r6
    5f02:	1b92      	subs	r2, r2, r6
    5f04:	4694      	mov	ip, r2
    5f06:	0212      	lsls	r2, r2, #8
    5f08:	d400      	bmi.n	5f0c <__aeabi_dsub+0x584>
    5f0a:	e5f7      	b.n	5afc <__aeabi_dsub+0x174>
    5f0c:	1b4d      	subs	r5, r1, r5
    5f0e:	42a9      	cmp	r1, r5
    5f10:	4189      	sbcs	r1, r1
    5f12:	1bc7      	subs	r7, r0, r7
    5f14:	4249      	negs	r1, r1
    5f16:	1a7f      	subs	r7, r7, r1
    5f18:	469a      	mov	sl, r3
    5f1a:	e561      	b.n	59e0 <__aeabi_dsub+0x58>
    5f1c:	0002      	movs	r2, r0
    5f1e:	430a      	orrs	r2, r1
    5f20:	d03a      	beq.n	5f98 <__aeabi_dsub+0x610>
    5f22:	08ed      	lsrs	r5, r5, #3
    5f24:	077c      	lsls	r4, r7, #29
    5f26:	432c      	orrs	r4, r5
    5f28:	2580      	movs	r5, #128	; 0x80
    5f2a:	08fa      	lsrs	r2, r7, #3
    5f2c:	032d      	lsls	r5, r5, #12
    5f2e:	422a      	tst	r2, r5
    5f30:	d008      	beq.n	5f44 <__aeabi_dsub+0x5bc>
    5f32:	08c7      	lsrs	r7, r0, #3
    5f34:	422f      	tst	r7, r5
    5f36:	d105      	bne.n	5f44 <__aeabi_dsub+0x5bc>
    5f38:	0745      	lsls	r5, r0, #29
    5f3a:	002c      	movs	r4, r5
    5f3c:	003a      	movs	r2, r7
    5f3e:	469a      	mov	sl, r3
    5f40:	08c9      	lsrs	r1, r1, #3
    5f42:	430c      	orrs	r4, r1
    5f44:	0f67      	lsrs	r7, r4, #29
    5f46:	00d2      	lsls	r2, r2, #3
    5f48:	00e5      	lsls	r5, r4, #3
    5f4a:	4317      	orrs	r7, r2
    5f4c:	4c36      	ldr	r4, [pc, #216]	; (6028 <__aeabi_dsub+0x6a0>)
    5f4e:	e547      	b.n	59e0 <__aeabi_dsub+0x58>
    5f50:	0007      	movs	r7, r0
    5f52:	000d      	movs	r5, r1
    5f54:	0014      	movs	r4, r2
    5f56:	e543      	b.n	59e0 <__aeabi_dsub+0x58>
    5f58:	003a      	movs	r2, r7
    5f5a:	432a      	orrs	r2, r5
    5f5c:	d043      	beq.n	5fe6 <__aeabi_dsub+0x65e>
    5f5e:	0002      	movs	r2, r0
    5f60:	430a      	orrs	r2, r1
    5f62:	d019      	beq.n	5f98 <__aeabi_dsub+0x610>
    5f64:	08ed      	lsrs	r5, r5, #3
    5f66:	077c      	lsls	r4, r7, #29
    5f68:	432c      	orrs	r4, r5
    5f6a:	2580      	movs	r5, #128	; 0x80
    5f6c:	08fa      	lsrs	r2, r7, #3
    5f6e:	032d      	lsls	r5, r5, #12
    5f70:	422a      	tst	r2, r5
    5f72:	d007      	beq.n	5f84 <__aeabi_dsub+0x5fc>
    5f74:	08c6      	lsrs	r6, r0, #3
    5f76:	422e      	tst	r6, r5
    5f78:	d104      	bne.n	5f84 <__aeabi_dsub+0x5fc>
    5f7a:	0747      	lsls	r7, r0, #29
    5f7c:	003c      	movs	r4, r7
    5f7e:	0032      	movs	r2, r6
    5f80:	08c9      	lsrs	r1, r1, #3
    5f82:	430c      	orrs	r4, r1
    5f84:	00d7      	lsls	r7, r2, #3
    5f86:	0f62      	lsrs	r2, r4, #29
    5f88:	00e5      	lsls	r5, r4, #3
    5f8a:	4317      	orrs	r7, r2
    5f8c:	469a      	mov	sl, r3
    5f8e:	4c26      	ldr	r4, [pc, #152]	; (6028 <__aeabi_dsub+0x6a0>)
    5f90:	e526      	b.n	59e0 <__aeabi_dsub+0x58>
    5f92:	2200      	movs	r2, #0
    5f94:	2500      	movs	r5, #0
    5f96:	e544      	b.n	5a22 <__aeabi_dsub+0x9a>
    5f98:	4c23      	ldr	r4, [pc, #140]	; (6028 <__aeabi_dsub+0x6a0>)
    5f9a:	e521      	b.n	59e0 <__aeabi_dsub+0x58>
    5f9c:	2000      	movs	r0, #0
    5f9e:	e749      	b.n	5e34 <__aeabi_dsub+0x4ac>
    5fa0:	2300      	movs	r3, #0
    5fa2:	2500      	movs	r5, #0
    5fa4:	e5bb      	b.n	5b1e <__aeabi_dsub+0x196>
    5fa6:	464c      	mov	r4, r9
    5fa8:	003e      	movs	r6, r7
    5faa:	3c20      	subs	r4, #32
    5fac:	40e6      	lsrs	r6, r4
    5fae:	464c      	mov	r4, r9
    5fb0:	46b4      	mov	ip, r6
    5fb2:	2c20      	cmp	r4, #32
    5fb4:	d031      	beq.n	601a <__aeabi_dsub+0x692>
    5fb6:	2440      	movs	r4, #64	; 0x40
    5fb8:	464e      	mov	r6, r9
    5fba:	1ba6      	subs	r6, r4, r6
    5fbc:	40b7      	lsls	r7, r6
    5fbe:	433d      	orrs	r5, r7
    5fc0:	1e6c      	subs	r4, r5, #1
    5fc2:	41a5      	sbcs	r5, r4
    5fc4:	4664      	mov	r4, ip
    5fc6:	432c      	orrs	r4, r5
    5fc8:	2700      	movs	r7, #0
    5fca:	1b0d      	subs	r5, r1, r4
    5fcc:	e6e7      	b.n	5d9e <__aeabi_dsub+0x416>
    5fce:	2280      	movs	r2, #128	; 0x80
    5fd0:	2300      	movs	r3, #0
    5fd2:	0312      	lsls	r2, r2, #12
    5fd4:	4c14      	ldr	r4, [pc, #80]	; (6028 <__aeabi_dsub+0x6a0>)
    5fd6:	2500      	movs	r5, #0
    5fd8:	e5a1      	b.n	5b1e <__aeabi_dsub+0x196>
    5fda:	433d      	orrs	r5, r7
    5fdc:	1e6f      	subs	r7, r5, #1
    5fde:	41bd      	sbcs	r5, r7
    5fe0:	2700      	movs	r7, #0
    5fe2:	b2ed      	uxtb	r5, r5
    5fe4:	e760      	b.n	5ea8 <__aeabi_dsub+0x520>
    5fe6:	0007      	movs	r7, r0
    5fe8:	000d      	movs	r5, r1
    5fea:	4c0f      	ldr	r4, [pc, #60]	; (6028 <__aeabi_dsub+0x6a0>)
    5fec:	e4f8      	b.n	59e0 <__aeabi_dsub+0x58>
    5fee:	0007      	movs	r7, r0
    5ff0:	000d      	movs	r5, r1
    5ff2:	e4f5      	b.n	59e0 <__aeabi_dsub+0x58>
    5ff4:	464e      	mov	r6, r9
    5ff6:	003c      	movs	r4, r7
    5ff8:	3e20      	subs	r6, #32
    5ffa:	40f4      	lsrs	r4, r6
    5ffc:	46a0      	mov	r8, r4
    5ffe:	464c      	mov	r4, r9
    6000:	2c20      	cmp	r4, #32
    6002:	d00e      	beq.n	6022 <__aeabi_dsub+0x69a>
    6004:	2440      	movs	r4, #64	; 0x40
    6006:	464e      	mov	r6, r9
    6008:	1ba4      	subs	r4, r4, r6
    600a:	40a7      	lsls	r7, r4
    600c:	433d      	orrs	r5, r7
    600e:	1e6f      	subs	r7, r5, #1
    6010:	41bd      	sbcs	r5, r7
    6012:	4644      	mov	r4, r8
    6014:	2700      	movs	r7, #0
    6016:	4325      	orrs	r5, r4
    6018:	e746      	b.n	5ea8 <__aeabi_dsub+0x520>
    601a:	2700      	movs	r7, #0
    601c:	e7cf      	b.n	5fbe <__aeabi_dsub+0x636>
    601e:	000d      	movs	r5, r1
    6020:	e573      	b.n	5b0a <__aeabi_dsub+0x182>
    6022:	2700      	movs	r7, #0
    6024:	e7f2      	b.n	600c <__aeabi_dsub+0x684>
    6026:	46c0      	nop			; (mov r8, r8)
    6028:	000007ff 	.word	0x000007ff
    602c:	ff7fffff 	.word	0xff7fffff

00006030 <__aeabi_dcmpun>:
    6030:	b570      	push	{r4, r5, r6, lr}
    6032:	4e0e      	ldr	r6, [pc, #56]	; (606c <__aeabi_dcmpun+0x3c>)
    6034:	030c      	lsls	r4, r1, #12
    6036:	031d      	lsls	r5, r3, #12
    6038:	0049      	lsls	r1, r1, #1
    603a:	005b      	lsls	r3, r3, #1
    603c:	0b24      	lsrs	r4, r4, #12
    603e:	0d49      	lsrs	r1, r1, #21
    6040:	0b2d      	lsrs	r5, r5, #12
    6042:	0d5b      	lsrs	r3, r3, #21
    6044:	42b1      	cmp	r1, r6
    6046:	d004      	beq.n	6052 <__aeabi_dcmpun+0x22>
    6048:	4908      	ldr	r1, [pc, #32]	; (606c <__aeabi_dcmpun+0x3c>)
    604a:	2000      	movs	r0, #0
    604c:	428b      	cmp	r3, r1
    604e:	d008      	beq.n	6062 <__aeabi_dcmpun+0x32>
    6050:	bd70      	pop	{r4, r5, r6, pc}
    6052:	4304      	orrs	r4, r0
    6054:	2001      	movs	r0, #1
    6056:	2c00      	cmp	r4, #0
    6058:	d1fa      	bne.n	6050 <__aeabi_dcmpun+0x20>
    605a:	4904      	ldr	r1, [pc, #16]	; (606c <__aeabi_dcmpun+0x3c>)
    605c:	2000      	movs	r0, #0
    605e:	428b      	cmp	r3, r1
    6060:	d1f6      	bne.n	6050 <__aeabi_dcmpun+0x20>
    6062:	4315      	orrs	r5, r2
    6064:	0028      	movs	r0, r5
    6066:	1e45      	subs	r5, r0, #1
    6068:	41a8      	sbcs	r0, r5
    606a:	e7f1      	b.n	6050 <__aeabi_dcmpun+0x20>
    606c:	000007ff 	.word	0x000007ff

00006070 <__aeabi_d2iz>:
    6070:	030b      	lsls	r3, r1, #12
    6072:	b530      	push	{r4, r5, lr}
    6074:	4d13      	ldr	r5, [pc, #76]	; (60c4 <__aeabi_d2iz+0x54>)
    6076:	0b1a      	lsrs	r2, r3, #12
    6078:	004b      	lsls	r3, r1, #1
    607a:	0d5b      	lsrs	r3, r3, #21
    607c:	0fc9      	lsrs	r1, r1, #31
    607e:	2400      	movs	r4, #0
    6080:	42ab      	cmp	r3, r5
    6082:	dd11      	ble.n	60a8 <__aeabi_d2iz+0x38>
    6084:	4c10      	ldr	r4, [pc, #64]	; (60c8 <__aeabi_d2iz+0x58>)
    6086:	42a3      	cmp	r3, r4
    6088:	dc10      	bgt.n	60ac <__aeabi_d2iz+0x3c>
    608a:	2480      	movs	r4, #128	; 0x80
    608c:	0364      	lsls	r4, r4, #13
    608e:	4322      	orrs	r2, r4
    6090:	4c0e      	ldr	r4, [pc, #56]	; (60cc <__aeabi_d2iz+0x5c>)
    6092:	1ae4      	subs	r4, r4, r3
    6094:	2c1f      	cmp	r4, #31
    6096:	dd0c      	ble.n	60b2 <__aeabi_d2iz+0x42>
    6098:	480d      	ldr	r0, [pc, #52]	; (60d0 <__aeabi_d2iz+0x60>)
    609a:	1ac3      	subs	r3, r0, r3
    609c:	40da      	lsrs	r2, r3
    609e:	0013      	movs	r3, r2
    60a0:	425c      	negs	r4, r3
    60a2:	2900      	cmp	r1, #0
    60a4:	d100      	bne.n	60a8 <__aeabi_d2iz+0x38>
    60a6:	001c      	movs	r4, r3
    60a8:	0020      	movs	r0, r4
    60aa:	bd30      	pop	{r4, r5, pc}
    60ac:	4b09      	ldr	r3, [pc, #36]	; (60d4 <__aeabi_d2iz+0x64>)
    60ae:	18cc      	adds	r4, r1, r3
    60b0:	e7fa      	b.n	60a8 <__aeabi_d2iz+0x38>
    60b2:	40e0      	lsrs	r0, r4
    60b4:	4c08      	ldr	r4, [pc, #32]	; (60d8 <__aeabi_d2iz+0x68>)
    60b6:	46a4      	mov	ip, r4
    60b8:	4463      	add	r3, ip
    60ba:	409a      	lsls	r2, r3
    60bc:	0013      	movs	r3, r2
    60be:	4303      	orrs	r3, r0
    60c0:	e7ee      	b.n	60a0 <__aeabi_d2iz+0x30>
    60c2:	46c0      	nop			; (mov r8, r8)
    60c4:	000003fe 	.word	0x000003fe
    60c8:	0000041d 	.word	0x0000041d
    60cc:	00000433 	.word	0x00000433
    60d0:	00000413 	.word	0x00000413
    60d4:	7fffffff 	.word	0x7fffffff
    60d8:	fffffbed 	.word	0xfffffbed

000060dc <__aeabi_i2d>:
    60dc:	b570      	push	{r4, r5, r6, lr}
    60de:	2800      	cmp	r0, #0
    60e0:	d030      	beq.n	6144 <__aeabi_i2d+0x68>
    60e2:	17c3      	asrs	r3, r0, #31
    60e4:	18c4      	adds	r4, r0, r3
    60e6:	405c      	eors	r4, r3
    60e8:	0fc5      	lsrs	r5, r0, #31
    60ea:	0020      	movs	r0, r4
    60ec:	f000 f9dc 	bl	64a8 <__clzsi2>
    60f0:	4b17      	ldr	r3, [pc, #92]	; (6150 <__aeabi_i2d+0x74>)
    60f2:	4a18      	ldr	r2, [pc, #96]	; (6154 <__aeabi_i2d+0x78>)
    60f4:	1a1b      	subs	r3, r3, r0
    60f6:	1ad2      	subs	r2, r2, r3
    60f8:	2a1f      	cmp	r2, #31
    60fa:	dd18      	ble.n	612e <__aeabi_i2d+0x52>
    60fc:	4a16      	ldr	r2, [pc, #88]	; (6158 <__aeabi_i2d+0x7c>)
    60fe:	1ad2      	subs	r2, r2, r3
    6100:	4094      	lsls	r4, r2
    6102:	2200      	movs	r2, #0
    6104:	0324      	lsls	r4, r4, #12
    6106:	055b      	lsls	r3, r3, #21
    6108:	0b24      	lsrs	r4, r4, #12
    610a:	0d5b      	lsrs	r3, r3, #21
    610c:	2100      	movs	r1, #0
    610e:	0010      	movs	r0, r2
    6110:	0324      	lsls	r4, r4, #12
    6112:	0d0a      	lsrs	r2, r1, #20
    6114:	0512      	lsls	r2, r2, #20
    6116:	0b24      	lsrs	r4, r4, #12
    6118:	4314      	orrs	r4, r2
    611a:	4a10      	ldr	r2, [pc, #64]	; (615c <__aeabi_i2d+0x80>)
    611c:	051b      	lsls	r3, r3, #20
    611e:	4014      	ands	r4, r2
    6120:	431c      	orrs	r4, r3
    6122:	0064      	lsls	r4, r4, #1
    6124:	07ed      	lsls	r5, r5, #31
    6126:	0864      	lsrs	r4, r4, #1
    6128:	432c      	orrs	r4, r5
    612a:	0021      	movs	r1, r4
    612c:	bd70      	pop	{r4, r5, r6, pc}
    612e:	0021      	movs	r1, r4
    6130:	4091      	lsls	r1, r2
    6132:	000a      	movs	r2, r1
    6134:	210b      	movs	r1, #11
    6136:	1a08      	subs	r0, r1, r0
    6138:	40c4      	lsrs	r4, r0
    613a:	055b      	lsls	r3, r3, #21
    613c:	0324      	lsls	r4, r4, #12
    613e:	0b24      	lsrs	r4, r4, #12
    6140:	0d5b      	lsrs	r3, r3, #21
    6142:	e7e3      	b.n	610c <__aeabi_i2d+0x30>
    6144:	2500      	movs	r5, #0
    6146:	2300      	movs	r3, #0
    6148:	2400      	movs	r4, #0
    614a:	2200      	movs	r2, #0
    614c:	e7de      	b.n	610c <__aeabi_i2d+0x30>
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	0000041e 	.word	0x0000041e
    6154:	00000433 	.word	0x00000433
    6158:	00000413 	.word	0x00000413
    615c:	800fffff 	.word	0x800fffff

00006160 <__aeabi_ui2d>:
    6160:	b570      	push	{r4, r5, r6, lr}
    6162:	1e05      	subs	r5, r0, #0
    6164:	d028      	beq.n	61b8 <__aeabi_ui2d+0x58>
    6166:	f000 f99f 	bl	64a8 <__clzsi2>
    616a:	4b15      	ldr	r3, [pc, #84]	; (61c0 <__aeabi_ui2d+0x60>)
    616c:	4a15      	ldr	r2, [pc, #84]	; (61c4 <__aeabi_ui2d+0x64>)
    616e:	1a1b      	subs	r3, r3, r0
    6170:	1ad2      	subs	r2, r2, r3
    6172:	2a1f      	cmp	r2, #31
    6174:	dd16      	ble.n	61a4 <__aeabi_ui2d+0x44>
    6176:	002c      	movs	r4, r5
    6178:	4a13      	ldr	r2, [pc, #76]	; (61c8 <__aeabi_ui2d+0x68>)
    617a:	2500      	movs	r5, #0
    617c:	1ad2      	subs	r2, r2, r3
    617e:	4094      	lsls	r4, r2
    6180:	055a      	lsls	r2, r3, #21
    6182:	0324      	lsls	r4, r4, #12
    6184:	0b24      	lsrs	r4, r4, #12
    6186:	0d52      	lsrs	r2, r2, #21
    6188:	2100      	movs	r1, #0
    618a:	0324      	lsls	r4, r4, #12
    618c:	0d0b      	lsrs	r3, r1, #20
    618e:	0b24      	lsrs	r4, r4, #12
    6190:	051b      	lsls	r3, r3, #20
    6192:	4323      	orrs	r3, r4
    6194:	4c0d      	ldr	r4, [pc, #52]	; (61cc <__aeabi_ui2d+0x6c>)
    6196:	0512      	lsls	r2, r2, #20
    6198:	4023      	ands	r3, r4
    619a:	4313      	orrs	r3, r2
    619c:	005b      	lsls	r3, r3, #1
    619e:	0028      	movs	r0, r5
    61a0:	0859      	lsrs	r1, r3, #1
    61a2:	bd70      	pop	{r4, r5, r6, pc}
    61a4:	210b      	movs	r1, #11
    61a6:	002c      	movs	r4, r5
    61a8:	1a08      	subs	r0, r1, r0
    61aa:	40c4      	lsrs	r4, r0
    61ac:	4095      	lsls	r5, r2
    61ae:	0324      	lsls	r4, r4, #12
    61b0:	055a      	lsls	r2, r3, #21
    61b2:	0b24      	lsrs	r4, r4, #12
    61b4:	0d52      	lsrs	r2, r2, #21
    61b6:	e7e7      	b.n	6188 <__aeabi_ui2d+0x28>
    61b8:	2200      	movs	r2, #0
    61ba:	2400      	movs	r4, #0
    61bc:	e7e4      	b.n	6188 <__aeabi_ui2d+0x28>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	0000041e 	.word	0x0000041e
    61c4:	00000433 	.word	0x00000433
    61c8:	00000413 	.word	0x00000413
    61cc:	800fffff 	.word	0x800fffff

000061d0 <__aeabi_f2d>:
    61d0:	0042      	lsls	r2, r0, #1
    61d2:	0e12      	lsrs	r2, r2, #24
    61d4:	1c51      	adds	r1, r2, #1
    61d6:	0243      	lsls	r3, r0, #9
    61d8:	b2c9      	uxtb	r1, r1
    61da:	b570      	push	{r4, r5, r6, lr}
    61dc:	0a5d      	lsrs	r5, r3, #9
    61de:	0fc4      	lsrs	r4, r0, #31
    61e0:	2901      	cmp	r1, #1
    61e2:	dd15      	ble.n	6210 <__aeabi_f2d+0x40>
    61e4:	21e0      	movs	r1, #224	; 0xe0
    61e6:	0089      	lsls	r1, r1, #2
    61e8:	468c      	mov	ip, r1
    61ea:	076d      	lsls	r5, r5, #29
    61ec:	0b1b      	lsrs	r3, r3, #12
    61ee:	4462      	add	r2, ip
    61f0:	2100      	movs	r1, #0
    61f2:	0028      	movs	r0, r5
    61f4:	0d0d      	lsrs	r5, r1, #20
    61f6:	052d      	lsls	r5, r5, #20
    61f8:	432b      	orrs	r3, r5
    61fa:	4d1c      	ldr	r5, [pc, #112]	; (626c <__aeabi_f2d+0x9c>)
    61fc:	0552      	lsls	r2, r2, #21
    61fe:	402b      	ands	r3, r5
    6200:	0852      	lsrs	r2, r2, #1
    6202:	4313      	orrs	r3, r2
    6204:	005b      	lsls	r3, r3, #1
    6206:	07e4      	lsls	r4, r4, #31
    6208:	085b      	lsrs	r3, r3, #1
    620a:	4323      	orrs	r3, r4
    620c:	0019      	movs	r1, r3
    620e:	bd70      	pop	{r4, r5, r6, pc}
    6210:	2a00      	cmp	r2, #0
    6212:	d115      	bne.n	6240 <__aeabi_f2d+0x70>
    6214:	2d00      	cmp	r5, #0
    6216:	d01f      	beq.n	6258 <__aeabi_f2d+0x88>
    6218:	0028      	movs	r0, r5
    621a:	f000 f945 	bl	64a8 <__clzsi2>
    621e:	280a      	cmp	r0, #10
    6220:	dc1d      	bgt.n	625e <__aeabi_f2d+0x8e>
    6222:	230b      	movs	r3, #11
    6224:	002a      	movs	r2, r5
    6226:	1a1b      	subs	r3, r3, r0
    6228:	40da      	lsrs	r2, r3
    622a:	0013      	movs	r3, r2
    622c:	0002      	movs	r2, r0
    622e:	3215      	adds	r2, #21
    6230:	4095      	lsls	r5, r2
    6232:	4a0f      	ldr	r2, [pc, #60]	; (6270 <__aeabi_f2d+0xa0>)
    6234:	031b      	lsls	r3, r3, #12
    6236:	1a12      	subs	r2, r2, r0
    6238:	0552      	lsls	r2, r2, #21
    623a:	0b1b      	lsrs	r3, r3, #12
    623c:	0d52      	lsrs	r2, r2, #21
    623e:	e7d7      	b.n	61f0 <__aeabi_f2d+0x20>
    6240:	2d00      	cmp	r5, #0
    6242:	d006      	beq.n	6252 <__aeabi_f2d+0x82>
    6244:	2280      	movs	r2, #128	; 0x80
    6246:	0b1b      	lsrs	r3, r3, #12
    6248:	0312      	lsls	r2, r2, #12
    624a:	4313      	orrs	r3, r2
    624c:	076d      	lsls	r5, r5, #29
    624e:	4a09      	ldr	r2, [pc, #36]	; (6274 <__aeabi_f2d+0xa4>)
    6250:	e7ce      	b.n	61f0 <__aeabi_f2d+0x20>
    6252:	4a08      	ldr	r2, [pc, #32]	; (6274 <__aeabi_f2d+0xa4>)
    6254:	2300      	movs	r3, #0
    6256:	e7cb      	b.n	61f0 <__aeabi_f2d+0x20>
    6258:	2200      	movs	r2, #0
    625a:	2300      	movs	r3, #0
    625c:	e7c8      	b.n	61f0 <__aeabi_f2d+0x20>
    625e:	0003      	movs	r3, r0
    6260:	3b0b      	subs	r3, #11
    6262:	409d      	lsls	r5, r3
    6264:	002b      	movs	r3, r5
    6266:	2500      	movs	r5, #0
    6268:	e7e3      	b.n	6232 <__aeabi_f2d+0x62>
    626a:	46c0      	nop			; (mov r8, r8)
    626c:	800fffff 	.word	0x800fffff
    6270:	00000389 	.word	0x00000389
    6274:	000007ff 	.word	0x000007ff

00006278 <__aeabi_d2f>:
    6278:	004b      	lsls	r3, r1, #1
    627a:	b570      	push	{r4, r5, r6, lr}
    627c:	0d5e      	lsrs	r6, r3, #21
    627e:	030c      	lsls	r4, r1, #12
    6280:	1c75      	adds	r5, r6, #1
    6282:	0a64      	lsrs	r4, r4, #9
    6284:	0f42      	lsrs	r2, r0, #29
    6286:	056d      	lsls	r5, r5, #21
    6288:	4322      	orrs	r2, r4
    628a:	0fc9      	lsrs	r1, r1, #31
    628c:	00c4      	lsls	r4, r0, #3
    628e:	0d6d      	lsrs	r5, r5, #21
    6290:	2d01      	cmp	r5, #1
    6292:	dd2a      	ble.n	62ea <__aeabi_d2f+0x72>
    6294:	4b3b      	ldr	r3, [pc, #236]	; (6384 <__aeabi_d2f+0x10c>)
    6296:	18f3      	adds	r3, r6, r3
    6298:	2bfe      	cmp	r3, #254	; 0xfe
    629a:	dc1a      	bgt.n	62d2 <__aeabi_d2f+0x5a>
    629c:	2b00      	cmp	r3, #0
    629e:	dd42      	ble.n	6326 <__aeabi_d2f+0xae>
    62a0:	0180      	lsls	r0, r0, #6
    62a2:	1e45      	subs	r5, r0, #1
    62a4:	41a8      	sbcs	r0, r5
    62a6:	00d2      	lsls	r2, r2, #3
    62a8:	4310      	orrs	r0, r2
    62aa:	0f62      	lsrs	r2, r4, #29
    62ac:	4302      	orrs	r2, r0
    62ae:	0750      	lsls	r0, r2, #29
    62b0:	d004      	beq.n	62bc <__aeabi_d2f+0x44>
    62b2:	200f      	movs	r0, #15
    62b4:	4010      	ands	r0, r2
    62b6:	2804      	cmp	r0, #4
    62b8:	d000      	beq.n	62bc <__aeabi_d2f+0x44>
    62ba:	3204      	adds	r2, #4
    62bc:	2080      	movs	r0, #128	; 0x80
    62be:	04c0      	lsls	r0, r0, #19
    62c0:	4010      	ands	r0, r2
    62c2:	d021      	beq.n	6308 <__aeabi_d2f+0x90>
    62c4:	3301      	adds	r3, #1
    62c6:	2bff      	cmp	r3, #255	; 0xff
    62c8:	d003      	beq.n	62d2 <__aeabi_d2f+0x5a>
    62ca:	0192      	lsls	r2, r2, #6
    62cc:	0a52      	lsrs	r2, r2, #9
    62ce:	b2db      	uxtb	r3, r3
    62d0:	e001      	b.n	62d6 <__aeabi_d2f+0x5e>
    62d2:	23ff      	movs	r3, #255	; 0xff
    62d4:	2200      	movs	r2, #0
    62d6:	0252      	lsls	r2, r2, #9
    62d8:	0a52      	lsrs	r2, r2, #9
    62da:	05db      	lsls	r3, r3, #23
    62dc:	4313      	orrs	r3, r2
    62de:	005b      	lsls	r3, r3, #1
    62e0:	07c9      	lsls	r1, r1, #31
    62e2:	085b      	lsrs	r3, r3, #1
    62e4:	430b      	orrs	r3, r1
    62e6:	0018      	movs	r0, r3
    62e8:	bd70      	pop	{r4, r5, r6, pc}
    62ea:	2e00      	cmp	r6, #0
    62ec:	d007      	beq.n	62fe <__aeabi_d2f+0x86>
    62ee:	4314      	orrs	r4, r2
    62f0:	d0ef      	beq.n	62d2 <__aeabi_d2f+0x5a>
    62f2:	2080      	movs	r0, #128	; 0x80
    62f4:	00d2      	lsls	r2, r2, #3
    62f6:	0480      	lsls	r0, r0, #18
    62f8:	4302      	orrs	r2, r0
    62fa:	23ff      	movs	r3, #255	; 0xff
    62fc:	e7d7      	b.n	62ae <__aeabi_d2f+0x36>
    62fe:	4322      	orrs	r2, r4
    6300:	2300      	movs	r3, #0
    6302:	2a00      	cmp	r2, #0
    6304:	d003      	beq.n	630e <__aeabi_d2f+0x96>
    6306:	2205      	movs	r2, #5
    6308:	08d2      	lsrs	r2, r2, #3
    630a:	2bff      	cmp	r3, #255	; 0xff
    630c:	d003      	beq.n	6316 <__aeabi_d2f+0x9e>
    630e:	0252      	lsls	r2, r2, #9
    6310:	0a52      	lsrs	r2, r2, #9
    6312:	b2db      	uxtb	r3, r3
    6314:	e7df      	b.n	62d6 <__aeabi_d2f+0x5e>
    6316:	2a00      	cmp	r2, #0
    6318:	d032      	beq.n	6380 <__aeabi_d2f+0x108>
    631a:	2080      	movs	r0, #128	; 0x80
    631c:	03c0      	lsls	r0, r0, #15
    631e:	4302      	orrs	r2, r0
    6320:	0252      	lsls	r2, r2, #9
    6322:	0a52      	lsrs	r2, r2, #9
    6324:	e7d7      	b.n	62d6 <__aeabi_d2f+0x5e>
    6326:	0018      	movs	r0, r3
    6328:	3017      	adds	r0, #23
    632a:	db14      	blt.n	6356 <__aeabi_d2f+0xde>
    632c:	2080      	movs	r0, #128	; 0x80
    632e:	0400      	lsls	r0, r0, #16
    6330:	4302      	orrs	r2, r0
    6332:	201e      	movs	r0, #30
    6334:	1ac0      	subs	r0, r0, r3
    6336:	281f      	cmp	r0, #31
    6338:	dc0f      	bgt.n	635a <__aeabi_d2f+0xe2>
    633a:	0025      	movs	r5, r4
    633c:	4b12      	ldr	r3, [pc, #72]	; (6388 <__aeabi_d2f+0x110>)
    633e:	18f3      	adds	r3, r6, r3
    6340:	409d      	lsls	r5, r3
    6342:	1e6e      	subs	r6, r5, #1
    6344:	41b5      	sbcs	r5, r6
    6346:	409a      	lsls	r2, r3
    6348:	002b      	movs	r3, r5
    634a:	4313      	orrs	r3, r2
    634c:	0022      	movs	r2, r4
    634e:	40c2      	lsrs	r2, r0
    6350:	431a      	orrs	r2, r3
    6352:	2300      	movs	r3, #0
    6354:	e7ab      	b.n	62ae <__aeabi_d2f+0x36>
    6356:	2300      	movs	r3, #0
    6358:	e7d5      	b.n	6306 <__aeabi_d2f+0x8e>
    635a:	2502      	movs	r5, #2
    635c:	426d      	negs	r5, r5
    635e:	1aeb      	subs	r3, r5, r3
    6360:	0015      	movs	r5, r2
    6362:	40dd      	lsrs	r5, r3
    6364:	2820      	cmp	r0, #32
    6366:	d009      	beq.n	637c <__aeabi_d2f+0x104>
    6368:	4b08      	ldr	r3, [pc, #32]	; (638c <__aeabi_d2f+0x114>)
    636a:	18f3      	adds	r3, r6, r3
    636c:	409a      	lsls	r2, r3
    636e:	4314      	orrs	r4, r2
    6370:	1e62      	subs	r2, r4, #1
    6372:	4194      	sbcs	r4, r2
    6374:	0022      	movs	r2, r4
    6376:	2300      	movs	r3, #0
    6378:	432a      	orrs	r2, r5
    637a:	e798      	b.n	62ae <__aeabi_d2f+0x36>
    637c:	2200      	movs	r2, #0
    637e:	e7f6      	b.n	636e <__aeabi_d2f+0xf6>
    6380:	2200      	movs	r2, #0
    6382:	e7a8      	b.n	62d6 <__aeabi_d2f+0x5e>
    6384:	fffffc80 	.word	0xfffffc80
    6388:	fffffc82 	.word	0xfffffc82
    638c:	fffffca2 	.word	0xfffffca2

00006390 <__aeabi_uidiv>:
    6390:	2200      	movs	r2, #0
    6392:	0843      	lsrs	r3, r0, #1
    6394:	428b      	cmp	r3, r1
    6396:	d374      	bcc.n	6482 <__aeabi_uidiv+0xf2>
    6398:	0903      	lsrs	r3, r0, #4
    639a:	428b      	cmp	r3, r1
    639c:	d35f      	bcc.n	645e <__aeabi_uidiv+0xce>
    639e:	0a03      	lsrs	r3, r0, #8
    63a0:	428b      	cmp	r3, r1
    63a2:	d344      	bcc.n	642e <__aeabi_uidiv+0x9e>
    63a4:	0b03      	lsrs	r3, r0, #12
    63a6:	428b      	cmp	r3, r1
    63a8:	d328      	bcc.n	63fc <__aeabi_uidiv+0x6c>
    63aa:	0c03      	lsrs	r3, r0, #16
    63ac:	428b      	cmp	r3, r1
    63ae:	d30d      	bcc.n	63cc <__aeabi_uidiv+0x3c>
    63b0:	22ff      	movs	r2, #255	; 0xff
    63b2:	0209      	lsls	r1, r1, #8
    63b4:	ba12      	rev	r2, r2
    63b6:	0c03      	lsrs	r3, r0, #16
    63b8:	428b      	cmp	r3, r1
    63ba:	d302      	bcc.n	63c2 <__aeabi_uidiv+0x32>
    63bc:	1212      	asrs	r2, r2, #8
    63be:	0209      	lsls	r1, r1, #8
    63c0:	d065      	beq.n	648e <__aeabi_uidiv+0xfe>
    63c2:	0b03      	lsrs	r3, r0, #12
    63c4:	428b      	cmp	r3, r1
    63c6:	d319      	bcc.n	63fc <__aeabi_uidiv+0x6c>
    63c8:	e000      	b.n	63cc <__aeabi_uidiv+0x3c>
    63ca:	0a09      	lsrs	r1, r1, #8
    63cc:	0bc3      	lsrs	r3, r0, #15
    63ce:	428b      	cmp	r3, r1
    63d0:	d301      	bcc.n	63d6 <__aeabi_uidiv+0x46>
    63d2:	03cb      	lsls	r3, r1, #15
    63d4:	1ac0      	subs	r0, r0, r3
    63d6:	4152      	adcs	r2, r2
    63d8:	0b83      	lsrs	r3, r0, #14
    63da:	428b      	cmp	r3, r1
    63dc:	d301      	bcc.n	63e2 <__aeabi_uidiv+0x52>
    63de:	038b      	lsls	r3, r1, #14
    63e0:	1ac0      	subs	r0, r0, r3
    63e2:	4152      	adcs	r2, r2
    63e4:	0b43      	lsrs	r3, r0, #13
    63e6:	428b      	cmp	r3, r1
    63e8:	d301      	bcc.n	63ee <__aeabi_uidiv+0x5e>
    63ea:	034b      	lsls	r3, r1, #13
    63ec:	1ac0      	subs	r0, r0, r3
    63ee:	4152      	adcs	r2, r2
    63f0:	0b03      	lsrs	r3, r0, #12
    63f2:	428b      	cmp	r3, r1
    63f4:	d301      	bcc.n	63fa <__aeabi_uidiv+0x6a>
    63f6:	030b      	lsls	r3, r1, #12
    63f8:	1ac0      	subs	r0, r0, r3
    63fa:	4152      	adcs	r2, r2
    63fc:	0ac3      	lsrs	r3, r0, #11
    63fe:	428b      	cmp	r3, r1
    6400:	d301      	bcc.n	6406 <__aeabi_uidiv+0x76>
    6402:	02cb      	lsls	r3, r1, #11
    6404:	1ac0      	subs	r0, r0, r3
    6406:	4152      	adcs	r2, r2
    6408:	0a83      	lsrs	r3, r0, #10
    640a:	428b      	cmp	r3, r1
    640c:	d301      	bcc.n	6412 <__aeabi_uidiv+0x82>
    640e:	028b      	lsls	r3, r1, #10
    6410:	1ac0      	subs	r0, r0, r3
    6412:	4152      	adcs	r2, r2
    6414:	0a43      	lsrs	r3, r0, #9
    6416:	428b      	cmp	r3, r1
    6418:	d301      	bcc.n	641e <__aeabi_uidiv+0x8e>
    641a:	024b      	lsls	r3, r1, #9
    641c:	1ac0      	subs	r0, r0, r3
    641e:	4152      	adcs	r2, r2
    6420:	0a03      	lsrs	r3, r0, #8
    6422:	428b      	cmp	r3, r1
    6424:	d301      	bcc.n	642a <__aeabi_uidiv+0x9a>
    6426:	020b      	lsls	r3, r1, #8
    6428:	1ac0      	subs	r0, r0, r3
    642a:	4152      	adcs	r2, r2
    642c:	d2cd      	bcs.n	63ca <__aeabi_uidiv+0x3a>
    642e:	09c3      	lsrs	r3, r0, #7
    6430:	428b      	cmp	r3, r1
    6432:	d301      	bcc.n	6438 <__aeabi_uidiv+0xa8>
    6434:	01cb      	lsls	r3, r1, #7
    6436:	1ac0      	subs	r0, r0, r3
    6438:	4152      	adcs	r2, r2
    643a:	0983      	lsrs	r3, r0, #6
    643c:	428b      	cmp	r3, r1
    643e:	d301      	bcc.n	6444 <__aeabi_uidiv+0xb4>
    6440:	018b      	lsls	r3, r1, #6
    6442:	1ac0      	subs	r0, r0, r3
    6444:	4152      	adcs	r2, r2
    6446:	0943      	lsrs	r3, r0, #5
    6448:	428b      	cmp	r3, r1
    644a:	d301      	bcc.n	6450 <__aeabi_uidiv+0xc0>
    644c:	014b      	lsls	r3, r1, #5
    644e:	1ac0      	subs	r0, r0, r3
    6450:	4152      	adcs	r2, r2
    6452:	0903      	lsrs	r3, r0, #4
    6454:	428b      	cmp	r3, r1
    6456:	d301      	bcc.n	645c <__aeabi_uidiv+0xcc>
    6458:	010b      	lsls	r3, r1, #4
    645a:	1ac0      	subs	r0, r0, r3
    645c:	4152      	adcs	r2, r2
    645e:	08c3      	lsrs	r3, r0, #3
    6460:	428b      	cmp	r3, r1
    6462:	d301      	bcc.n	6468 <__aeabi_uidiv+0xd8>
    6464:	00cb      	lsls	r3, r1, #3
    6466:	1ac0      	subs	r0, r0, r3
    6468:	4152      	adcs	r2, r2
    646a:	0883      	lsrs	r3, r0, #2
    646c:	428b      	cmp	r3, r1
    646e:	d301      	bcc.n	6474 <__aeabi_uidiv+0xe4>
    6470:	008b      	lsls	r3, r1, #2
    6472:	1ac0      	subs	r0, r0, r3
    6474:	4152      	adcs	r2, r2
    6476:	0843      	lsrs	r3, r0, #1
    6478:	428b      	cmp	r3, r1
    647a:	d301      	bcc.n	6480 <__aeabi_uidiv+0xf0>
    647c:	004b      	lsls	r3, r1, #1
    647e:	1ac0      	subs	r0, r0, r3
    6480:	4152      	adcs	r2, r2
    6482:	1a41      	subs	r1, r0, r1
    6484:	d200      	bcs.n	6488 <__aeabi_uidiv+0xf8>
    6486:	4601      	mov	r1, r0
    6488:	4152      	adcs	r2, r2
    648a:	4610      	mov	r0, r2
    648c:	4770      	bx	lr
    648e:	e7ff      	b.n	6490 <__aeabi_uidiv+0x100>
    6490:	b501      	push	{r0, lr}
    6492:	2000      	movs	r0, #0
    6494:	f000 f806 	bl	64a4 <__aeabi_idiv0>
    6498:	bd02      	pop	{r1, pc}
    649a:	46c0      	nop			; (mov r8, r8)

0000649c <__aeabi_uidivmod>:
    649c:	2900      	cmp	r1, #0
    649e:	d0f7      	beq.n	6490 <__aeabi_uidiv+0x100>
    64a0:	e776      	b.n	6390 <__aeabi_uidiv>
    64a2:	4770      	bx	lr

000064a4 <__aeabi_idiv0>:
    64a4:	4770      	bx	lr
    64a6:	46c0      	nop			; (mov r8, r8)

000064a8 <__clzsi2>:
    64a8:	211c      	movs	r1, #28
    64aa:	2301      	movs	r3, #1
    64ac:	041b      	lsls	r3, r3, #16
    64ae:	4298      	cmp	r0, r3
    64b0:	d301      	bcc.n	64b6 <__clzsi2+0xe>
    64b2:	0c00      	lsrs	r0, r0, #16
    64b4:	3910      	subs	r1, #16
    64b6:	0a1b      	lsrs	r3, r3, #8
    64b8:	4298      	cmp	r0, r3
    64ba:	d301      	bcc.n	64c0 <__clzsi2+0x18>
    64bc:	0a00      	lsrs	r0, r0, #8
    64be:	3908      	subs	r1, #8
    64c0:	091b      	lsrs	r3, r3, #4
    64c2:	4298      	cmp	r0, r3
    64c4:	d301      	bcc.n	64ca <__clzsi2+0x22>
    64c6:	0900      	lsrs	r0, r0, #4
    64c8:	3904      	subs	r1, #4
    64ca:	a202      	add	r2, pc, #8	; (adr r2, 64d4 <__clzsi2+0x2c>)
    64cc:	5c10      	ldrb	r0, [r2, r0]
    64ce:	1840      	adds	r0, r0, r1
    64d0:	4770      	bx	lr
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	02020304 	.word	0x02020304
    64d8:	01010101 	.word	0x01010101
	...

000064e4 <__errno>:
    64e4:	4b01      	ldr	r3, [pc, #4]	; (64ec <__errno+0x8>)
    64e6:	6818      	ldr	r0, [r3, #0]
    64e8:	4770      	bx	lr
    64ea:	46c0      	nop			; (mov r8, r8)
    64ec:	200004a0 	.word	0x200004a0

000064f0 <__libc_init_array>:
    64f0:	b570      	push	{r4, r5, r6, lr}
    64f2:	4e0d      	ldr	r6, [pc, #52]	; (6528 <__libc_init_array+0x38>)
    64f4:	4d0d      	ldr	r5, [pc, #52]	; (652c <__libc_init_array+0x3c>)
    64f6:	2400      	movs	r4, #0
    64f8:	1bad      	subs	r5, r5, r6
    64fa:	10ad      	asrs	r5, r5, #2
    64fc:	d005      	beq.n	650a <__libc_init_array+0x1a>
    64fe:	00a3      	lsls	r3, r4, #2
    6500:	58f3      	ldr	r3, [r6, r3]
    6502:	3401      	adds	r4, #1
    6504:	4798      	blx	r3
    6506:	42a5      	cmp	r5, r4
    6508:	d1f9      	bne.n	64fe <__libc_init_array+0xe>
    650a:	f000 fa19 	bl	6940 <_init>
    650e:	4e08      	ldr	r6, [pc, #32]	; (6530 <__libc_init_array+0x40>)
    6510:	4d08      	ldr	r5, [pc, #32]	; (6534 <__libc_init_array+0x44>)
    6512:	2400      	movs	r4, #0
    6514:	1bad      	subs	r5, r5, r6
    6516:	10ad      	asrs	r5, r5, #2
    6518:	d005      	beq.n	6526 <__libc_init_array+0x36>
    651a:	00a3      	lsls	r3, r4, #2
    651c:	58f3      	ldr	r3, [r6, r3]
    651e:	3401      	adds	r4, #1
    6520:	4798      	blx	r3
    6522:	42a5      	cmp	r5, r4
    6524:	d1f9      	bne.n	651a <__libc_init_array+0x2a>
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	0000694c 	.word	0x0000694c
    652c:	0000694c 	.word	0x0000694c
    6530:	0000694c 	.word	0x0000694c
    6534:	00006954 	.word	0x00006954

00006538 <memset>:
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	0783      	lsls	r3, r0, #30
    653c:	d03f      	beq.n	65be <memset+0x86>
    653e:	1e54      	subs	r4, r2, #1
    6540:	2a00      	cmp	r2, #0
    6542:	d03b      	beq.n	65bc <memset+0x84>
    6544:	b2ce      	uxtb	r6, r1
    6546:	0003      	movs	r3, r0
    6548:	2503      	movs	r5, #3
    654a:	e003      	b.n	6554 <memset+0x1c>
    654c:	1e62      	subs	r2, r4, #1
    654e:	2c00      	cmp	r4, #0
    6550:	d034      	beq.n	65bc <memset+0x84>
    6552:	0014      	movs	r4, r2
    6554:	3301      	adds	r3, #1
    6556:	1e5a      	subs	r2, r3, #1
    6558:	7016      	strb	r6, [r2, #0]
    655a:	422b      	tst	r3, r5
    655c:	d1f6      	bne.n	654c <memset+0x14>
    655e:	2c03      	cmp	r4, #3
    6560:	d924      	bls.n	65ac <memset+0x74>
    6562:	25ff      	movs	r5, #255	; 0xff
    6564:	400d      	ands	r5, r1
    6566:	022a      	lsls	r2, r5, #8
    6568:	4315      	orrs	r5, r2
    656a:	042a      	lsls	r2, r5, #16
    656c:	4315      	orrs	r5, r2
    656e:	2c0f      	cmp	r4, #15
    6570:	d911      	bls.n	6596 <memset+0x5e>
    6572:	0026      	movs	r6, r4
    6574:	3e10      	subs	r6, #16
    6576:	0936      	lsrs	r6, r6, #4
    6578:	3601      	adds	r6, #1
    657a:	0136      	lsls	r6, r6, #4
    657c:	001a      	movs	r2, r3
    657e:	199b      	adds	r3, r3, r6
    6580:	6015      	str	r5, [r2, #0]
    6582:	6055      	str	r5, [r2, #4]
    6584:	6095      	str	r5, [r2, #8]
    6586:	60d5      	str	r5, [r2, #12]
    6588:	3210      	adds	r2, #16
    658a:	4293      	cmp	r3, r2
    658c:	d1f8      	bne.n	6580 <memset+0x48>
    658e:	220f      	movs	r2, #15
    6590:	4014      	ands	r4, r2
    6592:	2c03      	cmp	r4, #3
    6594:	d90a      	bls.n	65ac <memset+0x74>
    6596:	1f26      	subs	r6, r4, #4
    6598:	08b6      	lsrs	r6, r6, #2
    659a:	3601      	adds	r6, #1
    659c:	00b6      	lsls	r6, r6, #2
    659e:	001a      	movs	r2, r3
    65a0:	199b      	adds	r3, r3, r6
    65a2:	c220      	stmia	r2!, {r5}
    65a4:	4293      	cmp	r3, r2
    65a6:	d1fc      	bne.n	65a2 <memset+0x6a>
    65a8:	2203      	movs	r2, #3
    65aa:	4014      	ands	r4, r2
    65ac:	2c00      	cmp	r4, #0
    65ae:	d005      	beq.n	65bc <memset+0x84>
    65b0:	b2c9      	uxtb	r1, r1
    65b2:	191c      	adds	r4, r3, r4
    65b4:	7019      	strb	r1, [r3, #0]
    65b6:	3301      	adds	r3, #1
    65b8:	429c      	cmp	r4, r3
    65ba:	d1fb      	bne.n	65b4 <memset+0x7c>
    65bc:	bd70      	pop	{r4, r5, r6, pc}
    65be:	0014      	movs	r4, r2
    65c0:	0003      	movs	r3, r0
    65c2:	e7cc      	b.n	655e <memset+0x26>

000065c4 <register_fini>:
    65c4:	4b03      	ldr	r3, [pc, #12]	; (65d4 <register_fini+0x10>)
    65c6:	b510      	push	{r4, lr}
    65c8:	2b00      	cmp	r3, #0
    65ca:	d002      	beq.n	65d2 <register_fini+0xe>
    65cc:	4802      	ldr	r0, [pc, #8]	; (65d8 <register_fini+0x14>)
    65ce:	f000 f805 	bl	65dc <atexit>
    65d2:	bd10      	pop	{r4, pc}
    65d4:	00000000 	.word	0x00000000
    65d8:	000065ed 	.word	0x000065ed

000065dc <atexit>:
    65dc:	b510      	push	{r4, lr}
    65de:	0001      	movs	r1, r0
    65e0:	2300      	movs	r3, #0
    65e2:	2200      	movs	r2, #0
    65e4:	2000      	movs	r0, #0
    65e6:	f000 f81b 	bl	6620 <__register_exitproc>
    65ea:	bd10      	pop	{r4, pc}

000065ec <__libc_fini_array>:
    65ec:	b570      	push	{r4, r5, r6, lr}
    65ee:	4b09      	ldr	r3, [pc, #36]	; (6614 <__libc_fini_array+0x28>)
    65f0:	4c09      	ldr	r4, [pc, #36]	; (6618 <__libc_fini_array+0x2c>)
    65f2:	1ae4      	subs	r4, r4, r3
    65f4:	10a4      	asrs	r4, r4, #2
    65f6:	d009      	beq.n	660c <__libc_fini_array+0x20>
    65f8:	4a08      	ldr	r2, [pc, #32]	; (661c <__libc_fini_array+0x30>)
    65fa:	18a5      	adds	r5, r4, r2
    65fc:	00ad      	lsls	r5, r5, #2
    65fe:	18ed      	adds	r5, r5, r3
    6600:	682b      	ldr	r3, [r5, #0]
    6602:	3c01      	subs	r4, #1
    6604:	4798      	blx	r3
    6606:	3d04      	subs	r5, #4
    6608:	2c00      	cmp	r4, #0
    660a:	d1f9      	bne.n	6600 <__libc_fini_array+0x14>
    660c:	f000 f9a2 	bl	6954 <_fini>
    6610:	bd70      	pop	{r4, r5, r6, pc}
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	00006960 	.word	0x00006960
    6618:	00006964 	.word	0x00006964
    661c:	3fffffff 	.word	0x3fffffff

00006620 <__register_exitproc>:
    6620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6622:	4644      	mov	r4, r8
    6624:	465f      	mov	r7, fp
    6626:	4656      	mov	r6, sl
    6628:	464d      	mov	r5, r9
    662a:	469b      	mov	fp, r3
    662c:	4b2f      	ldr	r3, [pc, #188]	; (66ec <__register_exitproc+0xcc>)
    662e:	b4f0      	push	{r4, r5, r6, r7}
    6630:	681c      	ldr	r4, [r3, #0]
    6632:	23a4      	movs	r3, #164	; 0xa4
    6634:	005b      	lsls	r3, r3, #1
    6636:	0005      	movs	r5, r0
    6638:	58e0      	ldr	r0, [r4, r3]
    663a:	000e      	movs	r6, r1
    663c:	4690      	mov	r8, r2
    663e:	2800      	cmp	r0, #0
    6640:	d04b      	beq.n	66da <__register_exitproc+0xba>
    6642:	6843      	ldr	r3, [r0, #4]
    6644:	2b1f      	cmp	r3, #31
    6646:	dc0d      	bgt.n	6664 <__register_exitproc+0x44>
    6648:	1c5c      	adds	r4, r3, #1
    664a:	2d00      	cmp	r5, #0
    664c:	d121      	bne.n	6692 <__register_exitproc+0x72>
    664e:	3302      	adds	r3, #2
    6650:	009b      	lsls	r3, r3, #2
    6652:	6044      	str	r4, [r0, #4]
    6654:	501e      	str	r6, [r3, r0]
    6656:	2000      	movs	r0, #0
    6658:	bc3c      	pop	{r2, r3, r4, r5}
    665a:	4690      	mov	r8, r2
    665c:	4699      	mov	r9, r3
    665e:	46a2      	mov	sl, r4
    6660:	46ab      	mov	fp, r5
    6662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6664:	4b22      	ldr	r3, [pc, #136]	; (66f0 <__register_exitproc+0xd0>)
    6666:	2b00      	cmp	r3, #0
    6668:	d03c      	beq.n	66e4 <__register_exitproc+0xc4>
    666a:	20c8      	movs	r0, #200	; 0xc8
    666c:	0040      	lsls	r0, r0, #1
    666e:	e000      	b.n	6672 <__register_exitproc+0x52>
    6670:	bf00      	nop
    6672:	2800      	cmp	r0, #0
    6674:	d036      	beq.n	66e4 <__register_exitproc+0xc4>
    6676:	22a4      	movs	r2, #164	; 0xa4
    6678:	2300      	movs	r3, #0
    667a:	0052      	lsls	r2, r2, #1
    667c:	58a1      	ldr	r1, [r4, r2]
    667e:	6043      	str	r3, [r0, #4]
    6680:	6001      	str	r1, [r0, #0]
    6682:	50a0      	str	r0, [r4, r2]
    6684:	3240      	adds	r2, #64	; 0x40
    6686:	5083      	str	r3, [r0, r2]
    6688:	3204      	adds	r2, #4
    668a:	5083      	str	r3, [r0, r2]
    668c:	2401      	movs	r4, #1
    668e:	2d00      	cmp	r5, #0
    6690:	d0dd      	beq.n	664e <__register_exitproc+0x2e>
    6692:	009a      	lsls	r2, r3, #2
    6694:	4691      	mov	r9, r2
    6696:	4481      	add	r9, r0
    6698:	4642      	mov	r2, r8
    669a:	2188      	movs	r1, #136	; 0x88
    669c:	464f      	mov	r7, r9
    669e:	507a      	str	r2, [r7, r1]
    66a0:	22c4      	movs	r2, #196	; 0xc4
    66a2:	0052      	lsls	r2, r2, #1
    66a4:	4690      	mov	r8, r2
    66a6:	4480      	add	r8, r0
    66a8:	4642      	mov	r2, r8
    66aa:	3987      	subs	r1, #135	; 0x87
    66ac:	4099      	lsls	r1, r3
    66ae:	6812      	ldr	r2, [r2, #0]
    66b0:	468a      	mov	sl, r1
    66b2:	430a      	orrs	r2, r1
    66b4:	4694      	mov	ip, r2
    66b6:	4642      	mov	r2, r8
    66b8:	4661      	mov	r1, ip
    66ba:	6011      	str	r1, [r2, #0]
    66bc:	2284      	movs	r2, #132	; 0x84
    66be:	4649      	mov	r1, r9
    66c0:	465f      	mov	r7, fp
    66c2:	0052      	lsls	r2, r2, #1
    66c4:	508f      	str	r7, [r1, r2]
    66c6:	2d02      	cmp	r5, #2
    66c8:	d1c1      	bne.n	664e <__register_exitproc+0x2e>
    66ca:	0002      	movs	r2, r0
    66cc:	4655      	mov	r5, sl
    66ce:	328d      	adds	r2, #141	; 0x8d
    66d0:	32ff      	adds	r2, #255	; 0xff
    66d2:	6811      	ldr	r1, [r2, #0]
    66d4:	430d      	orrs	r5, r1
    66d6:	6015      	str	r5, [r2, #0]
    66d8:	e7b9      	b.n	664e <__register_exitproc+0x2e>
    66da:	0020      	movs	r0, r4
    66dc:	304d      	adds	r0, #77	; 0x4d
    66de:	30ff      	adds	r0, #255	; 0xff
    66e0:	50e0      	str	r0, [r4, r3]
    66e2:	e7ae      	b.n	6642 <__register_exitproc+0x22>
    66e4:	2001      	movs	r0, #1
    66e6:	4240      	negs	r0, r0
    66e8:	e7b6      	b.n	6658 <__register_exitproc+0x38>
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	0000693c 	.word	0x0000693c
    66f0:	00000000 	.word	0x00000000

000066f4 <spi2MOSI>:
    66f4:	0c000002 00000200                                .....

000066f9 <spi2SCK>:
    66f9:	0e000002 00000200                                .....

000066fe <spi2MISO>:
    66fe:	0d000002 8d200000                                ......

00006704 <lookupTable.12503>:
    6704:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    6714:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    6724:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    6734:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    6744:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    6754:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    6764:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    6774:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    6784:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    6794:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    67a4:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    67b4:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    67c4:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    67d4:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    67e4:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    67f4:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    6804:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    6814:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    6824:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    6834:	000f048e                                ....

00006838 <senseBatPin>:
    6838:	06000000 01000106                                .....

0000683d <senseAPin>:
    683d:	03010001 0100010b                                .....

00006842 <senseBPin>:
    6842:	02010001 0000000a                                .....

00006847 <senseCPin>:
    6847:	03000000 00000001                                .....

0000684c <senseDPin>:
    684c:	02000000 00000000                                .....

00006851 <analogAccelPin>:
    6851:	07000000 00000207                                .....

00006856 <spi2MOSI>:
    6856:	0c000002 00000200                                .....

0000685b <spi2SCK>:
    685b:	0e000002 776f7000 00000000 00000000              .....pow.....

00006868 <TWO52>:
    6868:	00000000 43300000 00000000 c3300000     ......0C......0.
    6878:	00004108 00004066 00004066 00004064     .A..f@..f@..d@..
    6888:	000040fa 000040fa 000040f0 00004064     .@...@...@..d@..
    6898:	000040fa 000040f0 000040fa 00004064     .@...@...@..d@..
    68a8:	00004100 00004100 00004100 0000418a     .A...A...A...A..
    68b8:	00004e3c 00004d0a 00004e10 00004d00     <N...M...N...M..
    68c8:	00004e10 00004e1a 00004e10 00004d00     .N...N...N...M..
    68d8:	00004d0a 00004d0a 00004e1a 00004d00     .M...M...N...M..
    68e8:	00004cf6 00004cf6 00004cf6 0000506c     .L...L...L..lP..
    68f8:	00005684 00005544 00005544 00005542     .V..DU..DU..BU..
    6908:	0000565c 0000565c 0000564e 00005542     \V..\V..NV..BU..
    6918:	0000565c 0000564e 0000565c 00005542     \V..NV..\V..BU..
    6928:	00005664 00005664 00005664 00005864     dV..dV..dV..dX..
    6938:	00000043                                C...

0000693c <_global_impure_ptr>:
    693c:	20000078                                x.. 

00006940 <_init>:
    6940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6946:	bc08      	pop	{r3}
    6948:	469e      	mov	lr, r3
    694a:	4770      	bx	lr

0000694c <__init_array_start>:
    694c:	000065c5 	.word	0x000065c5

00006950 <__frame_dummy_init_array_entry>:
    6950:	000000dd                                ....

00006954 <_fini>:
    6954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6956:	46c0      	nop			; (mov r8, r8)
    6958:	bcf8      	pop	{r3, r4, r5, r6, r7}
    695a:	bc08      	pop	{r3}
    695c:	469e      	mov	lr, r3
    695e:	4770      	bx	lr

00006960 <__fini_array_start>:
    6960:	000000b5 	.word	0x000000b5
