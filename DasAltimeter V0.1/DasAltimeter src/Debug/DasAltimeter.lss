
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000206c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000206c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  000024b0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00002650  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017526  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e3b  00000000  00000000  000379df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000015e3  00000000  00000000  0003981a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000268  00000000  00000000  0003adfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002b0  00000000  00000000  0003b065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014520  00000000  00000000  0003b315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005e76  00000000  00000000  0004f835  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072327  00000000  00000000  000556ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000814  00000000  00000000  000c79d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000206c 	.word	0x0000206c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000206c 	.word	0x0000206c
     10c:	0000206c 	.word	0x0000206c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	0000206c 	.word	0x0000206c
     1c8:	20000000 	.word	0x20000000
     1cc:	20000438 	.word	0x20000438
     1d0:	20000004 	.word	0x20000004
     1d4:	20000440 	.word	0x20000440
     1d8:	200005e0 	.word	0x200005e0
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00001c0d 	.word	0x00001c0d
     1f8:	000003e5 	.word	0x000003e5

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
	return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <init>:
#include <boardDefines.h>




void init() {
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
     20e:	46de      	mov	lr, fp
     210:	4657      	mov	r7, sl
     212:	464e      	mov	r6, r9
     214:	4645      	mov	r5, r8
     216:	b5e0      	push	{r5, r6, r7, lr}
     218:	b083      	sub	sp, #12
    SystemInit();
     21a:	4b67      	ldr	r3, [pc, #412]	; (3b8 <init+0x1ac>)
     21c:	4798      	blx	r3
    GclkInit();
     21e:	4b67      	ldr	r3, [pc, #412]	; (3bc <init+0x1b0>)
     220:	4798      	blx	r3
    delayInit();
     222:	4b67      	ldr	r3, [pc, #412]	; (3c0 <init+0x1b4>)
     224:	4798      	blx	r3
    adcInit();
     226:	4b67      	ldr	r3, [pc, #412]	; (3c4 <init+0x1b8>)
     228:	4798      	blx	r3
    dmaInit();
     22a:	4b67      	ldr	r3, [pc, #412]	; (3c8 <init+0x1bc>)
     22c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     22e:	4b67      	ldr	r3, [pc, #412]	; (3cc <init+0x1c0>)
     230:	2240      	movs	r2, #64	; 0x40
     232:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     234:	21c1      	movs	r1, #193	; 0xc1
     236:	0089      	lsls	r1, r1, #2
     238:	585a      	ldr	r2, [r3, r1]
     23a:	4865      	ldr	r0, [pc, #404]	; (3d0 <init+0x1c4>)
     23c:	4002      	ands	r2, r0
     23e:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     240:	4b64      	ldr	r3, [pc, #400]	; (3d4 <init+0x1c8>)
     242:	2054      	movs	r0, #84	; 0x54
     244:	5c19      	ldrb	r1, [r3, r0]
     246:	2201      	movs	r2, #1
     248:	4391      	bics	r1, r2
     24a:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     24c:	2180      	movs	r1, #128	; 0x80
     24e:	0349      	lsls	r1, r1, #13
     250:	6099      	str	r1, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     252:	2433      	movs	r4, #51	; 0x33
     254:	5d18      	ldrb	r0, [r3, r4]
     256:	210f      	movs	r1, #15
     258:	4688      	mov	r8, r1
     25a:	4388      	bics	r0, r1
     25c:	2101      	movs	r1, #1
     25e:	4308      	orrs	r0, r1
     260:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     262:	3413      	adds	r4, #19
     264:	5d18      	ldrb	r0, [r3, r4]
     266:	4308      	orrs	r0, r1
     268:	5518      	strb	r0, [r3, r4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     26a:	3c12      	subs	r4, #18
     26c:	5d18      	ldrb	r0, [r3, r4]
     26e:	4645      	mov	r5, r8
     270:	43a8      	bics	r0, r5
     272:	4308      	orrs	r0, r1
     274:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     276:	2048      	movs	r0, #72	; 0x48
     278:	5c1d      	ldrb	r5, [r3, r0]
     27a:	430d      	orrs	r5, r1
     27c:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     27e:	2658      	movs	r6, #88	; 0x58
     280:	5d9d      	ldrb	r5, [r3, r6]
     282:	4395      	bics	r5, r2
     284:	559d      	strb	r5, [r3, r6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     286:	2580      	movs	r5, #128	; 0x80
     288:	046d      	lsls	r5, r5, #17
     28a:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     28c:	615d      	str	r5, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     28e:	5c1d      	ldrb	r5, [r3, r0]
     290:	4395      	bics	r5, r2
     292:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     294:	2580      	movs	r5, #128	; 0x80
     296:	006d      	lsls	r5, r5, #1
     298:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     29a:	3db7      	subs	r5, #183	; 0xb7
     29c:	46a9      	mov	r9, r5
     29e:	5d5d      	ldrb	r5, [r3, r5]
     2a0:	4395      	bics	r5, r2
     2a2:	464e      	mov	r6, r9
     2a4:	559d      	strb	r5, [r3, r6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2a6:	2580      	movs	r5, #128	; 0x80
     2a8:	00ad      	lsls	r5, r5, #2
     2aa:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2ac:	3602      	adds	r6, #2
     2ae:	5d9d      	ldrb	r5, [r3, r6]
     2b0:	4395      	bics	r5, r2
     2b2:	559d      	strb	r5, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2b4:	5d9d      	ldrb	r5, [r3, r6]
     2b6:	2702      	movs	r7, #2
     2b8:	433d      	orrs	r5, r7
     2ba:	559d      	strb	r5, [r3, r6]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2bc:	2580      	movs	r5, #128	; 0x80
     2be:	012d      	lsls	r5, r5, #4
     2c0:	605d      	str	r5, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2c2:	2535      	movs	r5, #53	; 0x35
     2c4:	46ab      	mov	fp, r5
     2c6:	5d5d      	ldrb	r5, [r3, r5]
     2c8:	002f      	movs	r7, r5
     2ca:	250f      	movs	r5, #15
     2cc:	402f      	ands	r7, r5
     2ce:	46bc      	mov	ip, r7
     2d0:	2720      	movs	r7, #32
     2d2:	46ba      	mov	sl, r7
     2d4:	4667      	mov	r7, ip
     2d6:	4655      	mov	r5, sl
     2d8:	432f      	orrs	r7, r5
     2da:	465d      	mov	r5, fp
     2dc:	555f      	strb	r7, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2de:	5d9d      	ldrb	r5, [r3, r6]
     2e0:	002f      	movs	r7, r5
     2e2:	430f      	orrs	r7, r1
     2e4:	559f      	strb	r7, [r3, r6]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2e6:	5d1e      	ldrb	r6, [r3, r4]
     2e8:	250f      	movs	r5, #15
     2ea:	4035      	ands	r5, r6
     2ec:	4656      	mov	r6, sl
     2ee:	4335      	orrs	r5, r6
     2f0:	551d      	strb	r5, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f2:	464d      	mov	r5, r9
     2f4:	5d5d      	ldrb	r5, [r3, r5]
     2f6:	430d      	orrs	r5, r1
     2f8:	464e      	mov	r6, r9
     2fa:	559d      	strb	r5, [r3, r6]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2fc:	5d1d      	ldrb	r5, [r3, r4]
     2fe:	4646      	mov	r6, r8
     300:	43b5      	bics	r5, r6
     302:	3e0d      	subs	r6, #13
     304:	4335      	orrs	r5, r6
     306:	551d      	strb	r5, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     308:	5c1c      	ldrb	r4, [r3, r0]
     30a:	4321      	orrs	r1, r4
     30c:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     30e:	3082      	adds	r0, #130	; 0x82
     310:	5c19      	ldrb	r1, [r3, r0]
     312:	4391      	bics	r1, r2
     314:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     316:	2180      	movs	r1, #128	; 0x80
     318:	00c9      	lsls	r1, r1, #3
     31a:	3842      	subs	r0, #66	; 0x42
     31c:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     31e:	3010      	adds	r0, #16
     320:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     322:	244a      	movs	r4, #74	; 0x4a
     324:	5d18      	ldrb	r0, [r3, r4]
     326:	4390      	bics	r0, r2
     328:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     32a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     32e:	204c      	movs	r0, #76	; 0x4c
     330:	5c19      	ldrb	r1, [r3, r0]
     332:	4391      	bics	r1, r2
     334:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     336:	2180      	movs	r1, #128	; 0x80
     338:	0149      	lsls	r1, r1, #5
     33a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     33c:	3002      	adds	r0, #2
     33e:	5c19      	ldrb	r1, [r3, r0]
     340:	4391      	bics	r1, r2
     342:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     344:	2180      	movs	r1, #128	; 0x80
     346:	01c9      	lsls	r1, r1, #7
     348:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     34a:	214d      	movs	r1, #77	; 0x4d
     34c:	5c58      	ldrb	r0, [r3, r1]
     34e:	4390      	bics	r0, r2
     350:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     352:	5c58      	ldrb	r0, [r3, r1]
     354:	2702      	movs	r7, #2
     356:	4307      	orrs	r7, r0
     358:	545f      	strb	r7, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     35a:	2180      	movs	r1, #128	; 0x80
     35c:	0189      	lsls	r1, r1, #6
     35e:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     360:	214f      	movs	r1, #79	; 0x4f
     362:	5c58      	ldrb	r0, [r3, r1]
     364:	4390      	bics	r0, r2
     366:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     368:	2080      	movs	r0, #128	; 0x80
     36a:	0200      	lsls	r0, r0, #8
     36c:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     36e:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     370:	5c58      	ldrb	r0, [r3, r1]
     372:	4390      	bics	r0, r2
     374:	5458      	strb	r0, [r3, r1]
     376:	3107      	adds	r1, #7
     378:	5c58      	ldrb	r0, [r3, r1]
     37a:	4390      	bics	r0, r2
     37c:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     37e:	2280      	movs	r2, #128	; 0x80
     380:	03d2      	lsls	r2, r2, #15
     382:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     384:	5c5a      	ldrb	r2, [r3, r1]
     386:	2040      	movs	r0, #64	; 0x40
     388:	4302      	orrs	r2, r0
     38a:	545a      	strb	r2, [r3, r1]
    pinCfg(buzzerPin);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     38c:	2204      	movs	r2, #4
     38e:	3953      	subs	r1, #83	; 0x53
     390:	2000      	movs	r0, #0
     392:	4b11      	ldr	r3, [pc, #68]	; (3d8 <init+0x1cc>)
     394:	4798      	blx	r3
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     396:	2300      	movs	r3, #0
     398:	9301      	str	r3, [sp, #4]
     39a:	9300      	str	r3, [sp, #0]
     39c:	2200      	movs	r2, #0
     39e:	2103      	movs	r1, #3
     3a0:	2000      	movs	r0, #0
     3a2:	4c0e      	ldr	r4, [pc, #56]	; (3dc <init+0x1d0>)
     3a4:	47a0      	blx	r4

    IMUinit();
     3a6:	4b0e      	ldr	r3, [pc, #56]	; (3e0 <init+0x1d4>)
     3a8:	4798      	blx	r3
}
     3aa:	b003      	add	sp, #12
     3ac:	bc3c      	pop	{r2, r3, r4, r5}
     3ae:	4690      	mov	r8, r2
     3b0:	4699      	mov	r9, r3
     3b2:	46a2      	mov	sl, r4
     3b4:	46ab      	mov	fp, r5
     3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b8:	000001fd 	.word	0x000001fd
     3bc:	00000685 	.word	0x00000685
     3c0:	00000759 	.word	0x00000759
     3c4:	000004e1 	.word	0x000004e1
     3c8:	000007d1 	.word	0x000007d1
     3cc:	e000e100 	.word	0xe000e100
     3d0:	ff00ffff 	.word	0xff00ffff
     3d4:	41004400 	.word	0x41004400
     3d8:	00000d0d 	.word	0x00000d0d
     3dc:	00000d75 	.word	0x00000d75
     3e0:	000004b9 	.word	0x000004b9

000003e4 <main>:


int main(void) {
     3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3e6:	b0a3      	sub	sp, #140	; 0x8c

    init();
     3e8:	4b23      	ldr	r3, [pc, #140]	; (478 <main+0x94>)
     3ea:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     3ec:	a806      	add	r0, sp, #24
     3ee:	4b23      	ldr	r3, [pc, #140]	; (47c <main+0x98>)
     3f0:	4798      	blx	r3


    volatile long counter = 0;
     3f2:	2300      	movs	r3, #0
     3f4:	9305      	str	r3, [sp, #20]


    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    delay_ms(300);
     3f6:	2096      	movs	r0, #150	; 0x96
     3f8:	0040      	lsls	r0, r0, #1
     3fa:	4b21      	ldr	r3, [pc, #132]	; (480 <main+0x9c>)
     3fc:	4798      	blx	r3



    while (1) {
        counter++;
        sampleTick(&my_altimeter);
     3fe:	4e21      	ldr	r6, [pc, #132]	; (484 <main+0xa0>)


        analogSample = adc_read(analogAccelPin);
     400:	4f21      	ldr	r7, [pc, #132]	; (488 <main+0xa4>)
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;

        if (counter == 100) {
            pinToggle(LedPin);

            averageAccel = averageAccel / 100;
     402:	4d22      	ldr	r5, [pc, #136]	; (48c <main+0xa8>)
        counter++;
     404:	9b05      	ldr	r3, [sp, #20]
     406:	3301      	adds	r3, #1
     408:	9305      	str	r3, [sp, #20]
        sampleTick(&my_altimeter);
     40a:	a806      	add	r0, sp, #24
     40c:	47b0      	blx	r6
        analogSample = adc_read(analogAccelPin);
     40e:	6838      	ldr	r0, [r7, #0]
     410:	6879      	ldr	r1, [r7, #4]
     412:	4b1f      	ldr	r3, [pc, #124]	; (490 <main+0xac>)
     414:	4798      	blx	r3
     416:	230a      	movs	r3, #10
     418:	446b      	add	r3, sp
     41a:	8018      	strh	r0, [r3, #0]
        analogAccelX = (analogSample - 3878) * -0.0227;
     41c:	8818      	ldrh	r0, [r3, #0]
     41e:	4b1d      	ldr	r3, [pc, #116]	; (494 <main+0xb0>)
     420:	469c      	mov	ip, r3
     422:	4460      	add	r0, ip
     424:	4b1c      	ldr	r3, [pc, #112]	; (498 <main+0xb4>)
     426:	4798      	blx	r3
     428:	4a1c      	ldr	r2, [pc, #112]	; (49c <main+0xb8>)
     42a:	4b1d      	ldr	r3, [pc, #116]	; (4a0 <main+0xbc>)
     42c:	4c1d      	ldr	r4, [pc, #116]	; (4a4 <main+0xc0>)
     42e:	47a0      	blx	r4
     430:	4b1d      	ldr	r3, [pc, #116]	; (4a8 <main+0xc4>)
     432:	4798      	blx	r3
     434:	9001      	str	r0, [sp, #4]
        averageAccel = averageAccel + analogAccelX;
     436:	9804      	ldr	r0, [sp, #16]
     438:	9901      	ldr	r1, [sp, #4]
     43a:	4c1c      	ldr	r4, [pc, #112]	; (4ac <main+0xc8>)
     43c:	47a0      	blx	r4
     43e:	9004      	str	r0, [sp, #16]
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     440:	9803      	ldr	r0, [sp, #12]
     442:	990f      	ldr	r1, [sp, #60]	; 0x3c
     444:	47a0      	blx	r4
     446:	9003      	str	r0, [sp, #12]
        if (counter == 100) {
     448:	9b05      	ldr	r3, [sp, #20]
     44a:	2b64      	cmp	r3, #100	; 0x64
     44c:	d1da      	bne.n	404 <main+0x20>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     44e:	2280      	movs	r2, #128	; 0x80
     450:	0352      	lsls	r2, r2, #13
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <main+0xcc>)
     454:	61da      	str	r2, [r3, #28]
            averageAccel = averageAccel / 100;
     456:	9804      	ldr	r0, [sp, #16]
     458:	4c16      	ldr	r4, [pc, #88]	; (4b4 <main+0xd0>)
     45a:	1c29      	adds	r1, r5, #0
     45c:	47a0      	blx	r4
     45e:	9004      	str	r0, [sp, #16]
            averageAlt = averageAlt / 100;
     460:	9803      	ldr	r0, [sp, #12]
     462:	1c29      	adds	r1, r5, #0
     464:	47a0      	blx	r4
     466:	9003      	str	r0, [sp, #12]
            counter = -1;
     468:	2301      	movs	r3, #1
     46a:	425b      	negs	r3, r3
     46c:	9305      	str	r3, [sp, #20]

            averageAccel = 0;
     46e:	2300      	movs	r3, #0
     470:	9304      	str	r3, [sp, #16]
            averageAlt = 0;
     472:	9303      	str	r3, [sp, #12]
     474:	e7c6      	b.n	404 <main+0x20>
     476:	46c0      	nop			; (mov r8, r8)
     478:	0000020d 	.word	0x0000020d
     47c:	00000a91 	.word	0x00000a91
     480:	000007a5 	.word	0x000007a5
     484:	00000afd 	.word	0x00000afd
     488:	00001e18 	.word	0x00001e18
     48c:	42c80000 	.word	0x42c80000
     490:	0000055d 	.word	0x0000055d
     494:	fffff0da 	.word	0xfffff0da
     498:	00001995 	.word	0x00001995
     49c:	367a0f91 	.word	0x367a0f91
     4a0:	bf973eab 	.word	0xbf973eab
     4a4:	00001495 	.word	0x00001495
     4a8:	00001abd 	.word	0x00001abd
     4ac:	00000e55 	.word	0x00000e55
     4b0:	41004400 	.word	0x41004400
     4b4:	00001179 	.word	0x00001179

000004b8 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     4b8:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4ba:	4c07      	ldr	r4, [pc, #28]	; (4d8 <IMUinit+0x20>)
     4bc:	2580      	movs	r5, #128	; 0x80
     4be:	00ed      	lsls	r5, r5, #3
     4c0:	2394      	movs	r3, #148	; 0x94
     4c2:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     4c4:	210f      	movs	r1, #15
     4c6:	2000      	movs	r0, #0
     4c8:	4e04      	ldr	r6, [pc, #16]	; (4dc <IMUinit+0x24>)
     4ca:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     4cc:	210c      	movs	r1, #12
     4ce:	2000      	movs	r0, #0
     4d0:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4d2:	2398      	movs	r3, #152	; 0x98
     4d4:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     4d6:	bd70      	pop	{r4, r5, r6, pc}
     4d8:	41004400 	.word	0x41004400
     4dc:	00000de5 	.word	0x00000de5

000004e0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     4e0:	4a11      	ldr	r2, [pc, #68]	; (528 <adcInit+0x48>)
     4e2:	6a11      	ldr	r1, [r2, #32]
     4e4:	2380      	movs	r3, #128	; 0x80
     4e6:	025b      	lsls	r3, r3, #9
     4e8:	430b      	orrs	r3, r1
     4ea:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     4ec:	490f      	ldr	r1, [pc, #60]	; (52c <adcInit+0x4c>)
     4ee:	22e0      	movs	r2, #224	; 0xe0
     4f0:	00d2      	lsls	r2, r2, #3
     4f2:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     4f4:	480e      	ldr	r0, [pc, #56]	; (530 <adcInit+0x50>)
     4f6:	4b0f      	ldr	r3, [pc, #60]	; (534 <adcInit+0x54>)
     4f8:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     4fa:	4b0f      	ldr	r3, [pc, #60]	; (538 <adcInit+0x58>)
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	015b      	lsls	r3, r3, #5
     500:	4013      	ands	r3, r2
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     502:	4a0e      	ldr	r2, [pc, #56]	; (53c <adcInit+0x5c>)
     504:	6850      	ldr	r0, [r2, #4]
     506:	0140      	lsls	r0, r0, #5
     508:	6812      	ldr	r2, [r2, #0]
     50a:	0ed2      	lsrs	r2, r2, #27
     50c:	4302      	orrs	r2, r0
     50e:	20ff      	movs	r0, #255	; 0xff
     510:	4002      	ands	r2, r0
        ) |
     512:	4313      	orrs	r3, r2
    ADC->CALIB.reg =
     514:	850b      	strh	r3, [r1, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     516:	2302      	movs	r3, #2
     518:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     51a:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     51c:	000a      	movs	r2, r1
     51e:	7e53      	ldrb	r3, [r2, #25]
     520:	b25b      	sxtb	r3, r3
     522:	2b00      	cmp	r3, #0
     524:	dbfb      	blt.n	51e <adcInit+0x3e>
}
     526:	4770      	bx	lr
     528:	40000400 	.word	0x40000400
     52c:	42004000 	.word	0x42004000
     530:	0000401e 	.word	0x0000401e
     534:	40000c00 	.word	0x40000c00
     538:	00806024 	.word	0x00806024
     53c:	00806020 	.word	0x00806020

00000540 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     540:	2202      	movs	r2, #2
     542:	4b05      	ldr	r3, [pc, #20]	; (558 <adcSample+0x18>)
     544:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     546:	0019      	movs	r1, r3
     548:	3a01      	subs	r2, #1
     54a:	7e0b      	ldrb	r3, [r1, #24]
     54c:	4213      	tst	r3, r2
     54e:	d0fc      	beq.n	54a <adcSample+0xa>
    return ADC->RESULT.reg;
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <adcSample+0x18>)
     552:	8b58      	ldrh	r0, [r3, #26]
     554:	b280      	uxth	r0, r0
}
     556:	4770      	bx	lr
     558:	42004000 	.word	0x42004000

0000055c <adc_read>:


u16_t adc_read(Pin p) {
     55c:	b530      	push	{r4, r5, lr}
     55e:	b083      	sub	sp, #12
     560:	0c03      	lsrs	r3, r0, #16
     562:	9000      	str	r0, [sp, #0]
     564:	9101      	str	r1, [sp, #4]
     566:	b2cd      	uxtb	r5, r1
     568:	b2db      	uxtb	r3, r3
     56a:	0e00      	lsrs	r0, r0, #24
    if (p.pin & 1) {
     56c:	07c2      	lsls	r2, r0, #31
     56e:	d41f      	bmi.n	5b0 <adc_read+0x54>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     570:	0844      	lsrs	r4, r0, #1
     572:	01d9      	lsls	r1, r3, #7
     574:	1862      	adds	r2, r4, r1
     576:	4915      	ldr	r1, [pc, #84]	; (5cc <adc_read+0x70>)
     578:	468c      	mov	ip, r1
     57a:	4462      	add	r2, ip
     57c:	7811      	ldrb	r1, [r2, #0]
     57e:	240f      	movs	r4, #15
     580:	43a1      	bics	r1, r4
     582:	2401      	movs	r4, #1
     584:	4321      	orrs	r1, r4
     586:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     588:	01db      	lsls	r3, r3, #7
     58a:	18c0      	adds	r0, r0, r3
     58c:	4b10      	ldr	r3, [pc, #64]	; (5d0 <adc_read+0x74>)
     58e:	469c      	mov	ip, r3
     590:	4460      	add	r0, ip
     592:	7803      	ldrb	r3, [r0, #0]
     594:	2201      	movs	r2, #1
     596:	4313      	orrs	r3, r2
     598:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     59a:	211f      	movs	r1, #31
     59c:	400d      	ands	r5, r1
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     59e:	21c0      	movs	r1, #192	; 0xc0
     5a0:	0149      	lsls	r1, r1, #5
     5a2:	4329      	orrs	r1, r5
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     5a4:	4b0b      	ldr	r3, [pc, #44]	; (5d4 <adc_read+0x78>)
     5a6:	6119      	str	r1, [r3, #16]

    return adcSample();
     5a8:	4b0b      	ldr	r3, [pc, #44]	; (5d8 <adc_read+0x7c>)
     5aa:	4798      	blx	r3
     5ac:	b003      	add	sp, #12
     5ae:	bd30      	pop	{r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5b0:	0841      	lsrs	r1, r0, #1
     5b2:	01dc      	lsls	r4, r3, #7
     5b4:	190a      	adds	r2, r1, r4
     5b6:	4905      	ldr	r1, [pc, #20]	; (5cc <adc_read+0x70>)
     5b8:	468c      	mov	ip, r1
     5ba:	4462      	add	r2, ip
     5bc:	7814      	ldrb	r4, [r2, #0]
     5be:	210f      	movs	r1, #15
     5c0:	4021      	ands	r1, r4
     5c2:	2410      	movs	r4, #16
     5c4:	4321      	orrs	r1, r4
     5c6:	7011      	strb	r1, [r2, #0]
     5c8:	e7de      	b.n	588 <adc_read+0x2c>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	41004430 	.word	0x41004430
     5d0:	41004440 	.word	0x41004440
     5d4:	42004000 	.word	0x42004000
     5d8:	00000541 	.word	0x00000541

000005dc <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5de:	b085      	sub	sp, #20
     5e0:	0c03      	lsrs	r3, r0, #16
     5e2:	0c14      	lsrs	r4, r2, #16
     5e4:	a90a      	add	r1, sp, #40	; 0x28
     5e6:	7809      	ldrb	r1, [r1, #0]
     5e8:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ea:	b2dc      	uxtb	r4, r3
     5ec:	0e00      	lsrs	r0, r0, #24
     5ee:	2701      	movs	r7, #1
     5f0:	003d      	movs	r5, r7
     5f2:	4085      	lsls	r5, r0
     5f4:	0e12      	lsrs	r2, r2, #24
     5f6:	4097      	lsls	r7, r2
     5f8:	2308      	movs	r3, #8
     5fa:	01e0      	lsls	r0, r4, #7
     5fc:	4a0a      	ldr	r2, [pc, #40]	; (628 <byteOut+0x4c>)
     5fe:	4694      	mov	ip, r2
     600:	4460      	add	r0, ip
     602:	01f4      	lsls	r4, r6, #7
     604:	4464      	add	r4, ip
     606:	e007      	b.n	618 <byteOut+0x3c>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     608:	61a7      	str	r7, [r4, #24]
     60a:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     60c:	0049      	lsls	r1, r1, #1
     60e:	b2c9      	uxtb	r1, r1
     610:	3b01      	subs	r3, #1
     612:	b2db      	uxtb	r3, r3
	for (uint8_t i = 0; i<8; ++i) {
     614:	2b00      	cmp	r3, #0
     616:	d005      	beq.n	624 <byteOut+0x48>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     618:	6145      	str	r5, [r0, #20]
		if (byte & 0x80) {
     61a:	b24a      	sxtb	r2, r1
     61c:	2a00      	cmp	r2, #0
     61e:	dbf3      	blt.n	608 <byteOut+0x2c>
     620:	6167      	str	r7, [r4, #20]
     622:	e7f2      	b.n	60a <byteOut+0x2e>
	}
}
     624:	b005      	add	sp, #20
     626:	bdf0      	pop	{r4, r5, r6, r7, pc}
     628:	41004400 	.word	0x41004400

0000062c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	b085      	sub	sp, #20
     630:	0c04      	lsrs	r4, r0, #16
     632:	9002      	str	r0, [sp, #8]
     634:	9103      	str	r1, [sp, #12]
     636:	0c11      	lsrs	r1, r2, #16
     638:	0017      	movs	r7, r2
     63a:	9200      	str	r2, [sp, #0]
     63c:	9301      	str	r3, [sp, #4]
     63e:	b2e4      	uxtb	r4, r4
     640:	0e05      	lsrs	r5, r0, #24
     642:	2601      	movs	r6, #1
     644:	0033      	movs	r3, r6
     646:	40ab      	lsls	r3, r5
     648:	001d      	movs	r5, r3
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     64a:	b2ca      	uxtb	r2, r1
     64c:	0e3f      	lsrs	r7, r7, #24
     64e:	40be      	lsls	r6, r7
     650:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     652:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     654:	01e4      	lsls	r4, r4, #7
     656:	4b0a      	ldr	r3, [pc, #40]	; (680 <byteIn+0x54>)
     658:	469c      	mov	ip, r3
     65a:	4464      	add	r4, ip
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     65c:	01d2      	lsls	r2, r2, #7
     65e:	4462      	add	r2, ip
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     660:	6165      	str	r5, [r4, #20]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     662:	6a13      	ldr	r3, [r2, #32]
     664:	4033      	ands	r3, r6
     666:	1e5f      	subs	r7, r3, #1
     668:	41bb      	sbcs	r3, r7

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     66a:	0040      	lsls	r0, r0, #1
     66c:	4318      	orrs	r0, r3
     66e:	b2c0      	uxtb	r0, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     670:	61a5      	str	r5, [r4, #24]
     672:	3901      	subs	r1, #1
     674:	b2c9      	uxtb	r1, r1
	for (uint8_t i = 0; i<8; ++i) {
     676:	2900      	cmp	r1, #0
     678:	d1f2      	bne.n	660 <byteIn+0x34>
		pinHigh(SCK_PIN);
	}
	return byte;
     67a:	b005      	add	sp, #20
     67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	41004400 	.word	0x41004400

00000684 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     684:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     686:	4a1d      	ldr	r2, [pc, #116]	; (6fc <GclkInit+0x78>)
     688:	23c2      	movs	r3, #194	; 0xc2
     68a:	00db      	lsls	r3, r3, #3
     68c:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     68e:	491c      	ldr	r1, [pc, #112]	; (700 <GclkInit+0x7c>)
     690:	684b      	ldr	r3, [r1, #4]
     692:	2002      	movs	r0, #2
     694:	4303      	orrs	r3, r0
     696:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     698:	4b1a      	ldr	r3, [pc, #104]	; (704 <GclkInit+0x80>)
     69a:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     69c:	0011      	movs	r1, r2
     69e:	2202      	movs	r2, #2
     6a0:	68cb      	ldr	r3, [r1, #12]
     6a2:	421a      	tst	r2, r3
     6a4:	d0fc      	beq.n	6a0 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     6a6:	4b18      	ldr	r3, [pc, #96]	; (708 <GclkInit+0x84>)
     6a8:	6818      	ldr	r0, [r3, #0]
     6aa:	0e80      	lsrs	r0, r0, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     6ac:	283f      	cmp	r0, #63	; 0x3f
     6ae:	d021      	beq.n	6f4 <GclkInit+0x70>
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     6b0:	4b16      	ldr	r3, [pc, #88]	; (70c <GclkInit+0x88>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     6b2:	681c      	ldr	r4, [r3, #0]
     6b4:	05a4      	lsls	r4, r4, #22
     6b6:	0da4      	lsrs	r4, r4, #22
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     6b8:	4b15      	ldr	r3, [pc, #84]	; (710 <GclkInit+0x8c>)
     6ba:	429c      	cmp	r4, r3
     6bc:	d01c      	beq.n	6f8 <GclkInit+0x74>
        fine = 0x1ff;
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     6be:	4a15      	ldr	r2, [pc, #84]	; (714 <GclkInit+0x90>)
     6c0:	4b0e      	ldr	r3, [pc, #56]	; (6fc <GclkInit+0x78>)
     6c2:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6c4:	0019      	movs	r1, r3
     6c6:	2210      	movs	r2, #16
     6c8:	68cb      	ldr	r3, [r1, #12]
     6ca:	421a      	tst	r2, r3
     6cc:	d0fc      	beq.n	6c8 <GclkInit+0x44>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     6ce:	0280      	lsls	r0, r0, #10
     6d0:	4320      	orrs	r0, r4
     6d2:	4b0a      	ldr	r3, [pc, #40]	; (6fc <GclkInit+0x78>)
     6d4:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6d6:	0019      	movs	r1, r3
     6d8:	2210      	movs	r2, #16
     6da:	68cb      	ldr	r3, [r1, #12]
     6dc:	421a      	tst	r2, r3
     6de:	d0fc      	beq.n	6da <GclkInit+0x56>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     6e0:	4a0d      	ldr	r2, [pc, #52]	; (718 <GclkInit+0x94>)
     6e2:	4b06      	ldr	r3, [pc, #24]	; (6fc <GclkInit+0x78>)
     6e4:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     6e6:	4b0d      	ldr	r3, [pc, #52]	; (71c <GclkInit+0x98>)
     6e8:	2280      	movs	r2, #128	; 0x80
     6ea:	0052      	lsls	r2, r2, #1
     6ec:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     6ee:	4a0c      	ldr	r2, [pc, #48]	; (720 <GclkInit+0x9c>)
     6f0:	605a      	str	r2, [r3, #4]
}
     6f2:	bd10      	pop	{r4, pc}
        coarse = 0x1f;
     6f4:	3820      	subs	r0, #32
     6f6:	e7db      	b.n	6b0 <GclkInit+0x2c>
        fine = 0x1ff;
     6f8:	4c0a      	ldr	r4, [pc, #40]	; (724 <GclkInit+0xa0>)
     6fa:	e7e0      	b.n	6be <GclkInit+0x3a>
     6fc:	40000800 	.word	0x40000800
     700:	41004000 	.word	0x41004000
     704:	0000060e 	.word	0x0000060e
     708:	00806024 	.word	0x00806024
     70c:	00806028 	.word	0x00806028
     710:	000003ff 	.word	0x000003ff
     714:	00000522 	.word	0x00000522
     718:	000005a2 	.word	0x000005a2
     71c:	40000c00 	.word	0x40000c00
     720:	00010700 	.word	0x00010700
     724:	000001ff 	.word	0x000001ff

00000728 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     728:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     72a:	230f      	movs	r3, #15
     72c:	4003      	ands	r3, r0
     72e:	0212      	lsls	r2, r2, #8
     730:	4807      	ldr	r0, [pc, #28]	; (750 <gclkEnable+0x28>)
     732:	4002      	ands	r2, r0
     734:	431a      	orrs	r2, r3
     736:	4c07      	ldr	r4, [pc, #28]	; (754 <gclkEnable+0x2c>)
     738:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     73a:	0209      	lsls	r1, r1, #8
     73c:	20f8      	movs	r0, #248	; 0xf8
     73e:	0140      	lsls	r0, r0, #5
     740:	4001      	ands	r1, r0
     742:	2080      	movs	r0, #128	; 0x80
     744:	0240      	lsls	r0, r0, #9
     746:	4308      	orrs	r0, r1
     748:	4318      	orrs	r0, r3
     74a:	6060      	str	r0, [r4, #4]
}
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	00ffff00 	.word	0x00ffff00
     754:	40000c00 	.word	0x40000c00

00000758 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     758:	4b04      	ldr	r3, [pc, #16]	; (76c <delayInit+0x14>)
     75a:	4a05      	ldr	r2, [pc, #20]	; (770 <delayInit+0x18>)
     75c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     75e:	2230      	movs	r2, #48	; 0x30
     760:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     762:	3a2b      	subs	r2, #43	; 0x2b
     764:	4b03      	ldr	r3, [pc, #12]	; (774 <delayInit+0x1c>)
     766:	601a      	str	r2, [r3, #0]
}
     768:	4770      	bx	lr
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	20000004 	.word	0x20000004
     770:	0000bb80 	.word	0x0000bb80
     774:	e000e010 	.word	0xe000e010

00000778 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     778:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     77a:	4b08      	ldr	r3, [pc, #32]	; (79c <delay_us+0x24>)
     77c:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     77e:	4a08      	ldr	r2, [pc, #32]	; (7a0 <delay_us+0x28>)
		SysTick->VAL = 0;
     780:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     782:	2180      	movs	r1, #128	; 0x80
     784:	0249      	lsls	r1, r1, #9
    while (n--) {
     786:	3801      	subs	r0, #1
     788:	d307      	bcc.n	79a <delay_us+0x22>
	if (n > 0) {
     78a:	2c00      	cmp	r4, #0
     78c:	d0fb      	beq.n	786 <delay_us+0xe>
		SysTick->LOAD = n;
     78e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     790:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     792:	6813      	ldr	r3, [r2, #0]
     794:	420b      	tst	r3, r1
     796:	d0fc      	beq.n	792 <delay_us+0x1a>
     798:	e7f5      	b.n	786 <delay_us+0xe>
    }
}
     79a:	bd30      	pop	{r4, r5, pc}
     79c:	20000004 	.word	0x20000004
     7a0:	e000e010 	.word	0xe000e010

000007a4 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     7a4:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     7a6:	4b08      	ldr	r3, [pc, #32]	; (7c8 <delay_ms+0x24>)
     7a8:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     7aa:	4a08      	ldr	r2, [pc, #32]	; (7cc <delay_ms+0x28>)
		SysTick->VAL = 0;
     7ac:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7ae:	2180      	movs	r1, #128	; 0x80
     7b0:	0249      	lsls	r1, r1, #9
    while (n--) {
     7b2:	3801      	subs	r0, #1
     7b4:	d307      	bcc.n	7c6 <delay_ms+0x22>
	if (n > 0) {
     7b6:	2c00      	cmp	r4, #0
     7b8:	d0fb      	beq.n	7b2 <delay_ms+0xe>
		SysTick->LOAD = n;
     7ba:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     7bc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7be:	6813      	ldr	r3, [r2, #0]
     7c0:	420b      	tst	r3, r1
     7c2:	d0fc      	beq.n	7be <delay_ms+0x1a>
     7c4:	e7f5      	b.n	7b2 <delay_ms+0xe>
    }
     7c6:	bd30      	pop	{r4, r5, pc}
     7c8:	20000004 	.word	0x20000004
     7cc:	e000e010 	.word	0xe000e010

000007d0 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     7d0:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     7d2:	4d11      	ldr	r5, [pc, #68]	; (818 <dmaInit+0x48>)
     7d4:	22c0      	movs	r2, #192	; 0xc0
     7d6:	2100      	movs	r1, #0
     7d8:	0028      	movs	r0, r5
     7da:	4e10      	ldr	r6, [pc, #64]	; (81c <dmaInit+0x4c>)
     7dc:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     7de:	4c10      	ldr	r4, [pc, #64]	; (820 <dmaInit+0x50>)
     7e0:	22c0      	movs	r2, #192	; 0xc0
     7e2:	2100      	movs	r1, #0
     7e4:	0020      	movs	r0, r4
     7e6:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     7e8:	4b0e      	ldr	r3, [pc, #56]	; (824 <dmaInit+0x54>)
     7ea:	695a      	ldr	r2, [r3, #20]
     7ec:	2120      	movs	r1, #32
     7ee:	430a      	orrs	r2, r1
     7f0:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     7f2:	69da      	ldr	r2, [r3, #28]
     7f4:	3910      	subs	r1, #16
     7f6:	430a      	orrs	r2, r1
     7f8:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     7fa:	4b0b      	ldr	r3, [pc, #44]	; (828 <dmaInit+0x58>)
     7fc:	881a      	ldrh	r2, [r3, #0]
     7fe:	390e      	subs	r1, #14
     800:	438a      	bics	r2, r1
     802:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     804:	881a      	ldrh	r2, [r3, #0]
     806:	2101      	movs	r1, #1
     808:	430a      	orrs	r2, r1
     80a:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     80c:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     80e:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     810:	4a06      	ldr	r2, [pc, #24]	; (82c <dmaInit+0x5c>)
     812:	801a      	strh	r2, [r3, #0]
}
     814:	bd70      	pop	{r4, r5, r6, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	20000520 	.word	0x20000520
     81c:	00001c55 	.word	0x00001c55
     820:	20000460 	.word	0x20000460
     824:	40000400 	.word	0x40000400
     828:	41004800 	.word	0x41004800
     82c:	00000f02 	.word	0x00000f02

00000830 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
     832:	46ce      	mov	lr, r9
     834:	4647      	mov	r7, r8
     836:	b580      	push	{r7, lr}
     838:	b083      	sub	sp, #12
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83a:	4e16      	ldr	r6, [pc, #88]	; (894 <readMS5803AdcResults+0x64>)
     83c:	2380      	movs	r3, #128	; 0x80
     83e:	021b      	lsls	r3, r3, #8
     840:	4699      	mov	r9, r3
     842:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     844:	4c14      	ldr	r4, [pc, #80]	; (898 <readMS5803AdcResults+0x68>)
     846:	2300      	movs	r3, #0
     848:	9300      	str	r3, [sp, #0]
     84a:	6822      	ldr	r2, [r4, #0]
     84c:	6863      	ldr	r3, [r4, #4]
     84e:	68a0      	ldr	r0, [r4, #8]
     850:	68e1      	ldr	r1, [r4, #12]
     852:	4d12      	ldr	r5, [pc, #72]	; (89c <readMS5803AdcResults+0x6c>)
     854:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     856:	6922      	ldr	r2, [r4, #16]
     858:	6963      	ldr	r3, [r4, #20]
     85a:	68a0      	ldr	r0, [r4, #8]
     85c:	68e1      	ldr	r1, [r4, #12]
     85e:	4f10      	ldr	r7, [pc, #64]	; (8a0 <readMS5803AdcResults+0x70>)
     860:	47b8      	blx	r7
     862:	0005      	movs	r5, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     864:	6922      	ldr	r2, [r4, #16]
     866:	6963      	ldr	r3, [r4, #20]
     868:	68a0      	ldr	r0, [r4, #8]
     86a:	68e1      	ldr	r1, [r4, #12]
     86c:	47b8      	blx	r7
     86e:	4680      	mov	r8, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     870:	6922      	ldr	r2, [r4, #16]
     872:	6963      	ldr	r3, [r4, #20]
     874:	68a0      	ldr	r0, [r4, #8]
     876:	68e1      	ldr	r1, [r4, #12]
     878:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     87a:	464b      	mov	r3, r9
     87c:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     87e:	042d      	lsls	r5, r5, #16
     880:	4643      	mov	r3, r8
     882:	021e      	lsls	r6, r3, #8
     884:	4335      	orrs	r5, r6
     886:	4328      	orrs	r0, r5
    return _receive;
}
     888:	b003      	add	sp, #12
     88a:	bc0c      	pop	{r2, r3}
     88c:	4690      	mov	r8, r2
     88e:	4699      	mov	r9, r3
     890:	bdf0      	pop	{r4, r5, r6, r7, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	41004400 	.word	0x41004400
     898:	00001e20 	.word	0x00001e20
     89c:	000005dd 	.word	0x000005dd
     8a0:	0000062d 	.word	0x0000062d

000008a4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a6:	46ce      	mov	lr, r9
     8a8:	4647      	mov	r7, r8
     8aa:	b580      	push	{r7, lr}
     8ac:	b08b      	sub	sp, #44	; 0x2c
     8ae:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     8b0:	8803      	ldrh	r3, [r0, #0]
     8b2:	251e      	movs	r5, #30
     8b4:	aa02      	add	r2, sp, #8
     8b6:	4694      	mov	ip, r2
     8b8:	4465      	add	r5, ip
     8ba:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     8bc:	8843      	ldrh	r3, [r0, #2]
     8be:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     8c0:	8883      	ldrh	r3, [r0, #4]
     8c2:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     8c4:	88c3      	ldrh	r3, [r0, #6]
     8c6:	ae08      	add	r6, sp, #32
     8c8:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     8ca:	8903      	ldrh	r3, [r0, #8]
     8cc:	2216      	movs	r2, #22
     8ce:	4462      	add	r2, ip
     8d0:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     8d2:	8941      	ldrh	r1, [r0, #10]
     8d4:	ab07      	add	r3, sp, #28
     8d6:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     8d8:	8814      	ldrh	r4, [r2, #0]
     8da:	0224      	lsls	r4, r4, #8
     8dc:	6902      	ldr	r2, [r0, #16]
     8de:	1b14      	subs	r4, r2, r4
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     8e0:	17e2      	asrs	r2, r4, #31
     8e2:	0011      	movs	r1, r2
     8e4:	8818      	ldrh	r0, [r3, #0]
     8e6:	b280      	uxth	r0, r0
     8e8:	4b2a      	ldr	r3, [pc, #168]	; (994 <ConvertPressureTemperature+0xf0>)
     8ea:	4699      	mov	r9, r3
     8ec:	0022      	movs	r2, r4
     8ee:	9101      	str	r1, [sp, #4]
     8f0:	000b      	movs	r3, r1
     8f2:	2100      	movs	r1, #0
     8f4:	47c8      	blx	r9
     8f6:	23fa      	movs	r3, #250	; 0xfa
     8f8:	00db      	lsls	r3, r3, #3
     8fa:	469c      	mov	ip, r3
     8fc:	4461      	add	r1, ip
     8fe:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     900:	ab02      	add	r3, sp, #8
     902:	8b9b      	ldrh	r3, [r3, #28]
     904:	b29b      	uxth	r3, r3
     906:	4698      	mov	r8, r3
     908:	8830      	ldrh	r0, [r6, #0]
     90a:	b280      	uxth	r0, r0
     90c:	0022      	movs	r2, r4
     90e:	9b01      	ldr	r3, [sp, #4]
     910:	2100      	movs	r1, #0
     912:	47c8      	blx	r9
     914:	064e      	lsls	r6, r1, #25
     916:	09c2      	lsrs	r2, r0, #7
     918:	4332      	orrs	r2, r6
     91a:	11cb      	asrs	r3, r1, #7
     91c:	2100      	movs	r1, #0
     91e:	4646      	mov	r6, r8
     920:	0430      	lsls	r0, r6, #16
     922:	1812      	adds	r2, r2, r0
     924:	414b      	adcs	r3, r1
     926:	9204      	str	r2, [sp, #16]
     928:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     92a:	882d      	ldrh	r5, [r5, #0]
     92c:	b2ad      	uxth	r5, r5
     92e:	aa02      	add	r2, sp, #8
     930:	8b50      	ldrh	r0, [r2, #26]
     932:	b280      	uxth	r0, r0
     934:	0022      	movs	r2, r4
     936:	9b01      	ldr	r3, [sp, #4]
     938:	2100      	movs	r1, #0
     93a:	47c8      	blx	r9
     93c:	060c      	lsls	r4, r1, #24
     93e:	0a02      	lsrs	r2, r0, #8
     940:	4322      	orrs	r2, r4
     942:	120b      	asrs	r3, r1, #8
     944:	2100      	movs	r1, #0
     946:	03e8      	lsls	r0, r5, #15
     948:	1812      	adds	r2, r2, r0
     94a:	414b      	adcs	r3, r1
     94c:	9202      	str	r2, [sp, #8]
     94e:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     950:	9a02      	ldr	r2, [sp, #8]
     952:	9b03      	ldr	r3, [sp, #12]
     954:	9c04      	ldr	r4, [sp, #16]
     956:	9d05      	ldr	r5, [sp, #20]
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	2100      	movs	r1, #0
     95c:	47c8      	blx	r9
     95e:	17ce      	asrs	r6, r1, #31
     960:	02f6      	lsls	r6, r6, #11
     962:	0af2      	lsrs	r2, r6, #11
     964:	2300      	movs	r3, #0
     966:	1880      	adds	r0, r0, r2
     968:	4159      	adcs	r1, r3
     96a:	02ce      	lsls	r6, r1, #11
     96c:	0d42      	lsrs	r2, r0, #21
     96e:	4332      	orrs	r2, r6
     970:	154b      	asrs	r3, r1, #21
     972:	1b12      	subs	r2, r2, r4
     974:	41ab      	sbcs	r3, r5
     976:	17dc      	asrs	r4, r3, #31
     978:	0464      	lsls	r4, r4, #17
     97a:	0c60      	lsrs	r0, r4, #17
     97c:	2100      	movs	r1, #0
     97e:	1880      	adds	r0, r0, r2
     980:	4159      	adcs	r1, r3
     982:	044b      	lsls	r3, r1, #17
     984:	0bc0      	lsrs	r0, r0, #15
     986:	4318      	orrs	r0, r3
     988:	61f8      	str	r0, [r7, #28]
}
     98a:	b00b      	add	sp, #44	; 0x2c
     98c:	bc0c      	pop	{r2, r3}
     98e:	4690      	mov	r8, r2
     990:	4699      	mov	r9, r3
     992:	bdf0      	pop	{r4, r5, r6, r7, pc}
     994:	00000e01 	.word	0x00000e01

00000998 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     998:	b570      	push	{r4, r5, r6, lr}
     99a:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     99c:	69c2      	ldr	r2, [r0, #28]
     99e:	0093      	lsls	r3, r2, #2
     9a0:	189b      	adds	r3, r3, r2
     9a2:	005b      	lsls	r3, r3, #1
     9a4:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     9a6:	4a11      	ldr	r2, [pc, #68]	; (9ec <pascalToCent+0x54>)
     9a8:	4293      	cmp	r3, r2
     9aa:	d818      	bhi.n	9de <pascalToCent+0x46>
        my_barometer->heightCm = lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     9ac:	4a0f      	ldr	r2, [pc, #60]	; (9ec <pascalToCent+0x54>)
     9ae:	1ad2      	subs	r2, r2, r3
     9b0:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     9b2:	2a4b      	cmp	r2, #75	; 0x4b
     9b4:	dc16      	bgt.n	9e4 <pascalToCent+0x4c>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     9b6:	4e0e      	ldr	r6, [pc, #56]	; (9f0 <pascalToCent+0x58>)
     9b8:	0091      	lsls	r1, r2, #2
     9ba:	1871      	adds	r1, r6, r1
     9bc:	698d      	ldr	r5, [r1, #24]
            const int32_t pa1 = PA_INIT - (inx << 10);
     9be:	0290      	lsls	r0, r2, #10
     9c0:	490a      	ldr	r1, [pc, #40]	; (9ec <pascalToCent+0x54>)
     9c2:	1a09      	subs	r1, r1, r0
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9c4:	1acb      	subs	r3, r1, r3
            const int32_t z2 = lookupTable[inx + 1];
     9c6:	3201      	adds	r2, #1
     9c8:	0092      	lsls	r2, r2, #2
     9ca:	18b2      	adds	r2, r6, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9cc:	6990      	ldr	r0, [r2, #24]
     9ce:	1b40      	subs	r0, r0, r5
     9d0:	4358      	muls	r0, r3
     9d2:	0a80      	lsrs	r0, r0, #10
     9d4:	1940      	adds	r0, r0, r5
     9d6:	4b07      	ldr	r3, [pc, #28]	; (9f4 <pascalToCent+0x5c>)
     9d8:	4798      	blx	r3
     9da:	6220      	str	r0, [r4, #32]
        }
    }
}
     9dc:	e001      	b.n	9e2 <pascalToCent+0x4a>
        my_barometer->heightCm = lookupTable[0];
     9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <pascalToCent+0x60>)
     9e0:	6203      	str	r3, [r0, #32]
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <pascalToCent+0x64>)
     9e6:	6203      	str	r3, [r0, #32]
     9e8:	e7fb      	b.n	9e2 <pascalToCent+0x4a>
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	000199cc 	.word	0x000199cc
     9f0:	00001e20 	.word	0x00001e20
     9f4:	00001409 	.word	0x00001409
     9f8:	c6e5c000 	.word	0xc6e5c000
     9fc:	497048e0 	.word	0x497048e0

00000a00 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	46de      	mov	lr, fp
     a04:	4657      	mov	r7, sl
     a06:	464e      	mov	r6, r9
     a08:	4645      	mov	r5, r8
     a0a:	b5e0      	push	{r5, r6, r7, lr}
     a0c:	b083      	sub	sp, #12
     a0e:	0007      	movs	r7, r0
     a10:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     a12:	4b1a      	ldr	r3, [pc, #104]	; (a7c <readMS5803Coefficients+0x7c>)
     a14:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     a16:	4c1a      	ldr	r4, [pc, #104]	; (a80 <readMS5803Coefficients+0x80>)
        delay_us(600);
     a18:	2596      	movs	r5, #150	; 0x96
     a1a:	00ad      	lsls	r5, r5, #2
     a1c:	0028      	movs	r0, r5
     a1e:	47d0      	blx	sl
        delay_us(600);
     a20:	0028      	movs	r0, r5
     a22:	47d0      	blx	sl
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a24:	2380      	movs	r3, #128	; 0x80
     a26:	021b      	lsls	r3, r3, #8
     a28:	4699      	mov	r9, r3
     a2a:	4a16      	ldr	r2, [pc, #88]	; (a84 <readMS5803Coefficients+0x84>)
     a2c:	6153      	str	r3, [r2, #20]
        byteOut(spi2SCK,spi2MOSI, _cmd);
     a2e:	9600      	str	r6, [sp, #0]
     a30:	6822      	ldr	r2, [r4, #0]
     a32:	6863      	ldr	r3, [r4, #4]
     a34:	68a0      	ldr	r0, [r4, #8]
     a36:	68e1      	ldr	r1, [r4, #12]
     a38:	4d13      	ldr	r5, [pc, #76]	; (a88 <readMS5803Coefficients+0x88>)
     a3a:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     a3c:	6922      	ldr	r2, [r4, #16]
     a3e:	6963      	ldr	r3, [r4, #20]
     a40:	68a0      	ldr	r0, [r4, #8]
     a42:	68e1      	ldr	r1, [r4, #12]
     a44:	4d11      	ldr	r5, [pc, #68]	; (a8c <readMS5803Coefficients+0x8c>)
     a46:	47a8      	blx	r5
     a48:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     a4a:	6922      	ldr	r2, [r4, #16]
     a4c:	6963      	ldr	r3, [r4, #20]
     a4e:	68a0      	ldr	r0, [r4, #8]
     a50:	68e1      	ldr	r1, [r4, #12]
     a52:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a54:	464b      	mov	r3, r9
     a56:	4a0b      	ldr	r2, [pc, #44]	; (a84 <readMS5803Coefficients+0x84>)
     a58:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     a5a:	4643      	mov	r3, r8
     a5c:	021d      	lsls	r5, r3, #8
     a5e:	4328      	orrs	r0, r5
     a60:	8038      	strh	r0, [r7, #0]
     a62:	3602      	adds	r6, #2
     a64:	b2f6      	uxtb	r6, r6
     a66:	3702      	adds	r7, #2
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     a68:	2eae      	cmp	r6, #174	; 0xae
     a6a:	d1d5      	bne.n	a18 <readMS5803Coefficients+0x18>
    }

}
     a6c:	b003      	add	sp, #12
     a6e:	bc3c      	pop	{r2, r3, r4, r5}
     a70:	4690      	mov	r8, r2
     a72:	4699      	mov	r9, r3
     a74:	46a2      	mov	sl, r4
     a76:	46ab      	mov	fp, r5
     a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	00000779 	.word	0x00000779
     a80:	00001e20 	.word	0x00001e20
     a84:	41004400 	.word	0x41004400
     a88:	000005dd 	.word	0x000005dd
     a8c:	0000062d 	.word	0x0000062d

00000a90 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     a90:	b5f0      	push	{r4, r5, r6, r7, lr}
     a92:	b083      	sub	sp, #12
     a94:	0004      	movs	r4, r0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a96:	4d10      	ldr	r5, [pc, #64]	; (ad8 <initMS5803Barometer+0x48>)
     a98:	2680      	movs	r6, #128	; 0x80
     a9a:	0236      	lsls	r6, r6, #8
     a9c:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     a9e:	490f      	ldr	r1, [pc, #60]	; (adc <initMS5803Barometer+0x4c>)
     aa0:	231e      	movs	r3, #30
     aa2:	9300      	str	r3, [sp, #0]
     aa4:	680a      	ldr	r2, [r1, #0]
     aa6:	684b      	ldr	r3, [r1, #4]
     aa8:	6888      	ldr	r0, [r1, #8]
     aaa:	68c9      	ldr	r1, [r1, #12]
     aac:	4f0c      	ldr	r7, [pc, #48]	; (ae0 <initMS5803Barometer+0x50>)
     aae:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ab0:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     ab2:	20c8      	movs	r0, #200	; 0xc8
     ab4:	4b0b      	ldr	r3, [pc, #44]	; (ae4 <initMS5803Barometer+0x54>)
     ab6:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     ab8:	0020      	movs	r0, r4
     aba:	4b0b      	ldr	r3, [pc, #44]	; (ae8 <initMS5803Barometer+0x58>)
     abc:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     abe:	4b0b      	ldr	r3, [pc, #44]	; (aec <initMS5803Barometer+0x5c>)
     ac0:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     ac2:	4b0b      	ldr	r3, [pc, #44]	; (af0 <initMS5803Barometer+0x60>)
     ac4:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     ac6:	4b0b      	ldr	r3, [pc, #44]	; (af4 <initMS5803Barometer+0x64>)
     ac8:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     aca:	4b0b      	ldr	r3, [pc, #44]	; (af8 <initMS5803Barometer+0x68>)
     acc:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     ace:	23fa      	movs	r3, #250	; 0xfa
     ad0:	00db      	lsls	r3, r3, #3
     ad2:	6163      	str	r3, [r4, #20]




}
     ad4:	b003      	add	sp, #12
     ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ad8:	41004400 	.word	0x41004400
     adc:	00001e20 	.word	0x00001e20
     ae0:	000005dd 	.word	0x000005dd
     ae4:	000007a5 	.word	0x000007a5
     ae8:	00000a01 	.word	0x00000a01
     aec:	457a0000 	.word	0x457a0000
     af0:	00002710 	.word	0x00002710
     af4:	0041c9fe 	.word	0x0041c9fe
     af8:	007ffae4 	.word	0x007ffae4

00000afc <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     afc:	b5f0      	push	{r4, r5, r6, r7, lr}
     afe:	46de      	mov	lr, fp
     b00:	4657      	mov	r7, sl
     b02:	464e      	mov	r6, r9
     b04:	4645      	mov	r5, r8
     b06:	b5e0      	push	{r5, r6, r7, lr}
     b08:	b083      	sub	sp, #12
     b0a:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     b0c:	4d6c      	ldr	r5, [pc, #432]	; (cc0 <sampleTick+0x1c4>)
     b0e:	6828      	ldr	r0, [r5, #0]
     b10:	6869      	ldr	r1, [r5, #4]
     b12:	4b6c      	ldr	r3, [pc, #432]	; (cc4 <sampleTick+0x1c8>)
     b14:	4798      	blx	r3
     b16:	4b6c      	ldr	r3, [pc, #432]	; (cc8 <sampleTick+0x1cc>)
     b18:	4798      	blx	r3
     b1a:	4b6c      	ldr	r3, [pc, #432]	; (ccc <sampleTick+0x1d0>)
     b1c:	469b      	mov	fp, r3
     b1e:	4a6c      	ldr	r2, [pc, #432]	; (cd0 <sampleTick+0x1d4>)
     b20:	4b6c      	ldr	r3, [pc, #432]	; (cd4 <sampleTick+0x1d8>)
     b22:	47d8      	blx	fp
     b24:	4b6c      	ldr	r3, [pc, #432]	; (cd8 <sampleTick+0x1dc>)
     b26:	4798      	blx	r3
     b28:	66e0      	str	r0, [r4, #108]	; 0x6c
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b2a:	4e6c      	ldr	r6, [pc, #432]	; (cdc <sampleTick+0x1e0>)
     b2c:	2380      	movs	r3, #128	; 0x80
     b2e:	021b      	lsls	r3, r3, #8
     b30:	6173      	str	r3, [r6, #20]
    uint8_t dummy_rx;


    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
     b32:	2350      	movs	r3, #80	; 0x50
     b34:	9300      	str	r3, [sp, #0]
     b36:	68aa      	ldr	r2, [r5, #8]
     b38:	68eb      	ldr	r3, [r5, #12]
     b3a:	6928      	ldr	r0, [r5, #16]
     b3c:	6969      	ldr	r1, [r5, #20]
     b3e:	4f68      	ldr	r7, [pc, #416]	; (ce0 <sampleTick+0x1e4>)
     b40:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b42:	2380      	movs	r3, #128	; 0x80
     b44:	021b      	lsls	r3, r3, #8
     b46:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     b48:	2002      	movs	r0, #2
     b4a:	4b66      	ldr	r3, [pc, #408]	; (ce4 <sampleTick+0x1e8>)
     b4c:	4699      	mov	r9, r3
     b4e:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     b50:	4b65      	ldr	r3, [pc, #404]	; (ce8 <sampleTick+0x1ec>)
     b52:	4698      	mov	r8, r3
     b54:	4798      	blx	r3
     b56:	6120      	str	r0, [r4, #16]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	021b      	lsls	r3, r3, #8
     b5c:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
     b5e:	2342      	movs	r3, #66	; 0x42
     b60:	9300      	str	r3, [sp, #0]
     b62:	68aa      	ldr	r2, [r5, #8]
     b64:	68eb      	ldr	r3, [r5, #12]
     b66:	6928      	ldr	r0, [r5, #16]
     b68:	6969      	ldr	r1, [r5, #20]
     b6a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b6c:	2380      	movs	r3, #128	; 0x80
     b6e:	021b      	lsls	r3, r3, #8
     b70:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     b72:	2002      	movs	r0, #2
     b74:	47c8      	blx	r9
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     b76:	47c0      	blx	r8
     b78:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     b7a:	0020      	movs	r0, r4
     b7c:	4b5b      	ldr	r3, [pc, #364]	; (cec <sampleTick+0x1f0>)
     b7e:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     b80:	0020      	movs	r0, r4
     b82:	4b5b      	ldr	r3, [pc, #364]	; (cf0 <sampleTick+0x1f4>)
     b84:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     b86:	6a20      	ldr	r0, [r4, #32]
     b88:	4b5a      	ldr	r3, [pc, #360]	; (cf4 <sampleTick+0x1f8>)
     b8a:	4798      	blx	r3
     b8c:	4a5a      	ldr	r2, [pc, #360]	; (cf8 <sampleTick+0x1fc>)
     b8e:	4b5b      	ldr	r3, [pc, #364]	; (cfc <sampleTick+0x200>)
     b90:	47d8      	blx	fp
     b92:	4b51      	ldr	r3, [pc, #324]	; (cd8 <sampleTick+0x1dc>)
     b94:	4798      	blx	r3
     b96:	6260      	str	r0, [r4, #36]	; 0x24
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b98:	2380      	movs	r3, #128	; 0x80
     b9a:	00db      	lsls	r3, r3, #3
     b9c:	469b      	mov	fp, r3
     b9e:	2394      	movs	r3, #148	; 0x94
     ba0:	465a      	mov	r2, fp
     ba2:	50f2      	str	r2, [r6, r3]

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     ba4:	2182      	movs	r1, #130	; 0x82
     ba6:	2000      	movs	r0, #0
     ba8:	4d55      	ldr	r5, [pc, #340]	; (d00 <sampleTick+0x204>)
     baa:	47a8      	blx	r5
    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
     bac:	21ff      	movs	r1, #255	; 0xff
     bae:	2000      	movs	r0, #0
     bb0:	47a8      	blx	r5
     bb2:	234d      	movs	r3, #77	; 0x4d
     bb4:	4699      	mov	r9, r3
     bb6:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
     bb8:	21ff      	movs	r1, #255	; 0xff
     bba:	2000      	movs	r0, #0
     bbc:	47a8      	blx	r5
     bbe:	234c      	movs	r3, #76	; 0x4c
     bc0:	469a      	mov	sl, r3
     bc2:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
     bc4:	21ff      	movs	r1, #255	; 0xff
     bc6:	2000      	movs	r0, #0
     bc8:	47a8      	blx	r5
     bca:	2351      	movs	r3, #81	; 0x51
     bcc:	4698      	mov	r8, r3
     bce:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
     bd0:	21ff      	movs	r1, #255	; 0xff
     bd2:	2000      	movs	r0, #0
     bd4:	47a8      	blx	r5
     bd6:	2350      	movs	r3, #80	; 0x50
     bd8:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
     bda:	21ff      	movs	r1, #255	; 0xff
     bdc:	2000      	movs	r0, #0
     bde:	47a8      	blx	r5
     be0:	2755      	movs	r7, #85	; 0x55
     be2:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
     be4:	21ff      	movs	r1, #255	; 0xff
     be6:	2000      	movs	r0, #0
     be8:	47a8      	blx	r5
     bea:	2354      	movs	r3, #84	; 0x54
     bec:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bee:	2298      	movs	r2, #152	; 0x98
     bf0:	4659      	mov	r1, fp
     bf2:	50b1      	str	r1, [r6, r2]
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
     bf4:	4652      	mov	r2, sl
     bf6:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
     bf8:	3204      	adds	r2, #4
     bfa:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
     bfc:	5ce5      	ldrb	r5, [r4, r3]
     bfe:	b26e      	sxtb	r6, r5

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
     c00:	0208      	lsls	r0, r1, #8
     c02:	464b      	mov	r3, r9
     c04:	5ce3      	ldrb	r3, [r4, r3]
     c06:	4303      	orrs	r3, r0
     c08:	b21b      	sxth	r3, r3
     c0a:	469c      	mov	ip, r3
     c0c:	234e      	movs	r3, #78	; 0x4e
     c0e:	4660      	mov	r0, ip
     c10:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
     c12:	0213      	lsls	r3, r2, #8
     c14:	4640      	mov	r0, r8
     c16:	5c20      	ldrb	r0, [r4, r0]
     c18:	4318      	orrs	r0, r3
     c1a:	b200      	sxth	r0, r0
     c1c:	2352      	movs	r3, #82	; 0x52
     c1e:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
     c20:	022b      	lsls	r3, r5, #8
     c22:	4698      	mov	r8, r3
     c24:	5de3      	ldrb	r3, [r4, r7]
     c26:	4647      	mov	r7, r8
     c28:	433b      	orrs	r3, r7
     c2a:	b21b      	sxth	r3, r3
     c2c:	2756      	movs	r7, #86	; 0x56
     c2e:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
     c30:	2901      	cmp	r1, #1
     c32:	d006      	beq.n	c42 <sampleTick+0x146>
        if (negativeX) {
     c34:	b249      	sxtb	r1, r1
     c36:	2900      	cmp	r1, #0
     c38:	db34      	blt.n	ca4 <sampleTick+0x1a8>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     c3a:	4661      	mov	r1, ip
     c3c:	1109      	asrs	r1, r1, #4
     c3e:	274e      	movs	r7, #78	; 0x4e
     c40:	53e1      	strh	r1, [r4, r7]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
     c42:	2a01      	cmp	r2, #1
     c44:	d005      	beq.n	c52 <sampleTick+0x156>
        if (negativeY) {
     c46:	b252      	sxtb	r2, r2
     c48:	2a00      	cmp	r2, #0
     c4a:	db30      	blt.n	cae <sampleTick+0x1b2>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     c4c:	1100      	asrs	r0, r0, #4
     c4e:	2252      	movs	r2, #82	; 0x52
     c50:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
     c52:	2d01      	cmp	r5, #1
     c54:	d004      	beq.n	c60 <sampleTick+0x164>
        if (negativeZ) {
     c56:	2e00      	cmp	r6, #0
     c58:	db2d      	blt.n	cb6 <sampleTick+0x1ba>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     c5a:	111b      	asrs	r3, r3, #4
     c5c:	2256      	movs	r2, #86	; 0x56
     c5e:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
     c60:	234e      	movs	r3, #78	; 0x4e
     c62:	5ee0      	ldrsh	r0, [r4, r3]
     c64:	4f18      	ldr	r7, [pc, #96]	; (cc8 <sampleTick+0x1cc>)
     c66:	47b8      	blx	r7
     c68:	4e18      	ldr	r6, [pc, #96]	; (ccc <sampleTick+0x1d0>)
     c6a:	4a26      	ldr	r2, [pc, #152]	; (d04 <sampleTick+0x208>)
     c6c:	4b26      	ldr	r3, [pc, #152]	; (d08 <sampleTick+0x20c>)
     c6e:	47b0      	blx	r6
     c70:	4d19      	ldr	r5, [pc, #100]	; (cd8 <sampleTick+0x1dc>)
     c72:	47a8      	blx	r5
     c74:	62a0      	str	r0, [r4, #40]	; 0x28
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
     c76:	2352      	movs	r3, #82	; 0x52
     c78:	5ee0      	ldrsh	r0, [r4, r3]
     c7a:	47b8      	blx	r7
     c7c:	4a21      	ldr	r2, [pc, #132]	; (d04 <sampleTick+0x208>)
     c7e:	4b22      	ldr	r3, [pc, #136]	; (d08 <sampleTick+0x20c>)
     c80:	47b0      	blx	r6
     c82:	47a8      	blx	r5
     c84:	62e0      	str	r0, [r4, #44]	; 0x2c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
     c86:	2356      	movs	r3, #86	; 0x56
     c88:	5ee0      	ldrsh	r0, [r4, r3]
     c8a:	47b8      	blx	r7
     c8c:	4a1d      	ldr	r2, [pc, #116]	; (d04 <sampleTick+0x208>)
     c8e:	4b1e      	ldr	r3, [pc, #120]	; (d08 <sampleTick+0x20c>)
     c90:	47b0      	blx	r6
     c92:	47a8      	blx	r5
     c94:	6320      	str	r0, [r4, #48]	; 0x30


}
     c96:	b003      	add	sp, #12
     c98:	bc3c      	pop	{r2, r3, r4, r5}
     c9a:	4690      	mov	r8, r2
     c9c:	4699      	mov	r9, r3
     c9e:	46a2      	mov	sl, r4
     ca0:	46ab      	mov	fp, r5
     ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     ca4:	4661      	mov	r1, ip
     ca6:	110f      	asrs	r7, r1, #4
     ca8:	214e      	movs	r1, #78	; 0x4e
     caa:	5267      	strh	r7, [r4, r1]
     cac:	e7c9      	b.n	c42 <sampleTick+0x146>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     cae:	1100      	asrs	r0, r0, #4
     cb0:	2252      	movs	r2, #82	; 0x52
     cb2:	52a0      	strh	r0, [r4, r2]
     cb4:	e7cd      	b.n	c52 <sampleTick+0x156>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     cb6:	111b      	asrs	r3, r3, #4
     cb8:	2256      	movs	r2, #86	; 0x56
     cba:	52a3      	strh	r3, [r4, r2]
     cbc:	e7d0      	b.n	c60 <sampleTick+0x164>
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00001f6c 	.word	0x00001f6c
     cc4:	0000055d 	.word	0x0000055d
     cc8:	00001995 	.word	0x00001995
     ccc:	00001495 	.word	0x00001495
     cd0:	eaa2a0a9 	.word	0xeaa2a0a9
     cd4:	3f5f3a57 	.word	0x3f5f3a57
     cd8:	00001abd 	.word	0x00001abd
     cdc:	41004400 	.word	0x41004400
     ce0:	000005dd 	.word	0x000005dd
     ce4:	000007a5 	.word	0x000007a5
     ce8:	00000831 	.word	0x00000831
     cec:	000008a5 	.word	0x000008a5
     cf0:	00000999 	.word	0x00000999
     cf4:	00001a19 	.word	0x00001a19
     cf8:	e9f6a93f 	.word	0xe9f6a93f
     cfc:	3fa0cc78 	.word	0x3fa0cc78
     d00:	00000de5 	.word	0x00000de5
     d04:	e94ee393 	.word	0xe94ee393
     d08:	3f7ffd60 	.word	0x3f7ffd60

00000d0c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     d0c:	b570      	push	{r4, r5, r6, lr}
     d0e:	0005      	movs	r5, r0
     d10:	000c      	movs	r4, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     d12:	490e      	ldr	r1, [pc, #56]	; (d4c <sercomClockEnable+0x40>)
     d14:	6a08      	ldr	r0, [r1, #32]
     d16:	1cae      	adds	r6, r5, #2
     d18:	2301      	movs	r3, #1
     d1a:	40b3      	lsls	r3, r6
     d1c:	4303      	orrs	r3, r0
     d1e:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
     d20:	2c00      	cmp	r4, #0
     d22:	d10d      	bne.n	d40 <sercomClockEnable+0x34>
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
     d24:	0224      	lsls	r4, r4, #8
     d26:	23f0      	movs	r3, #240	; 0xf0
     d28:	011b      	lsls	r3, r3, #4
     d2a:	401c      	ands	r4, r3
     d2c:	2380      	movs	r3, #128	; 0x80
     d2e:	01db      	lsls	r3, r3, #7
     d30:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
     d32:	3514      	adds	r5, #20
     d34:	233f      	movs	r3, #63	; 0x3f
     d36:	401d      	ands	r5, r3
                        GCLK_CLKCTRL_GEN(clock_channel) |
     d38:	432c      	orrs	r4, r5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d3a:	4b05      	ldr	r3, [pc, #20]	; (d50 <sercomClockEnable+0x44>)
     d3c:	805c      	strh	r4, [r3, #2]
}
     d3e:	bd70      	pop	{r4, r5, r6, pc}
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     d40:	2107      	movs	r1, #7
     d42:	0020      	movs	r0, r4
     d44:	4b03      	ldr	r3, [pc, #12]	; (d54 <sercomClockEnable+0x48>)
     d46:	4798      	blx	r3
     d48:	e7ec      	b.n	d24 <sercomClockEnable+0x18>
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	40000400 	.word	0x40000400
     d50:	40000c00 	.word	0x40000c00
     d54:	00000729 	.word	0x00000729

00000d58 <sercomReset>:
	return (Sercom*) (0x42000800U + id * 1024);
     d58:	0280      	lsls	r0, r0, #10
     d5a:	4b05      	ldr	r3, [pc, #20]	; (d70 <sercomReset+0x18>)
     d5c:	469c      	mov	ip, r3
     d5e:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     d60:	2301      	movs	r3, #1
     d62:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     d64:	2201      	movs	r2, #1
     d66:	6803      	ldr	r3, [r0, #0]
     d68:	421a      	tst	r2, r3
     d6a:	d1fc      	bne.n	d66 <sercomReset+0xe>
}
     d6c:	4770      	bx	lr
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	42000800 	.word	0x42000800

00000d74 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d76:	46ce      	mov	lr, r9
     d78:	4647      	mov	r7, r8
     d7a:	b580      	push	{r7, lr}
     d7c:	0004      	movs	r4, r0
     d7e:	000e      	movs	r6, r1
     d80:	4690      	mov	r8, r2
     d82:	001d      	movs	r5, r3
     d84:	ab08      	add	r3, sp, #32
     d86:	781f      	ldrb	r7, [r3, #0]
     d88:	ab09      	add	r3, sp, #36	; 0x24
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	4699      	mov	r9, r3
		
    sercomReset(id);
     d8e:	4b13      	ldr	r3, [pc, #76]	; (ddc <sercomSpiMasterInit+0x68>)
     d90:	4798      	blx	r3
     d92:	02a0      	lsls	r0, r4, #10
     d94:	4b12      	ldr	r3, [pc, #72]	; (de0 <sercomSpiMasterInit+0x6c>)
     d96:	469c      	mov	ip, r3
     d98:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     d9a:	2380      	movs	r3, #128	; 0x80
     d9c:	029b      	lsls	r3, r3, #10
     d9e:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     da0:	464b      	mov	r3, r9
     da2:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     da4:	0536      	lsls	r6, r6, #20
     da6:	23c0      	movs	r3, #192	; 0xc0
     da8:	039b      	lsls	r3, r3, #14
     daa:	401e      	ands	r6, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
     dac:	4643      	mov	r3, r8
     dae:	041b      	lsls	r3, r3, #16
     db0:	22c0      	movs	r2, #192	; 0xc0
     db2:	0292      	lsls	r2, r2, #10
     db4:	4013      	ands	r3, r2
     db6:	220e      	movs	r2, #14
     db8:	4313      	orrs	r3, r2
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     dba:	1e6a      	subs	r2, r5, #1
     dbc:	4195      	sbcs	r5, r2
     dbe:	076d      	lsls	r5, r5, #29
     dc0:	431e      	orrs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     dc2:	1e7b      	subs	r3, r7, #1
     dc4:	419f      	sbcs	r7, r3
     dc6:	073f      	lsls	r7, r7, #28
     dc8:	4335      	orrs	r5, r6
     dca:	433d      	orrs	r5, r7
        = SERCOM_SPI_CTRLA_ENABLE
     dcc:	6005      	str	r5, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     dce:	69c3      	ldr	r3, [r0, #28]
     dd0:	075b      	lsls	r3, r3, #29
     dd2:	d4fc      	bmi.n	dce <sercomSpiMasterInit+0x5a>

    SPI_sync(id);
}
     dd4:	bc0c      	pop	{r2, r3}
     dd6:	4690      	mov	r8, r2
     dd8:	4699      	mov	r9, r3
     dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ddc:	00000d59 	.word	0x00000d59
     de0:	42000800 	.word	0x42000800

00000de4 <spiDataTransfer>:
	return (Sercom*) (0x42000800U + id * 1024);
     de4:	0280      	lsls	r0, r0, #10
     de6:	4b05      	ldr	r3, [pc, #20]	; (dfc <spiDataTransfer+0x18>)
     de8:	469c      	mov	ip, r3
     dea:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     dec:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     dee:	7e03      	ldrb	r3, [r0, #24]
     df0:	075b      	lsls	r3, r3, #29
     df2:	d5fc      	bpl.n	dee <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     df4:	6a80      	ldr	r0, [r0, #40]	; 0x28
     df6:	b2c0      	uxtb	r0, r0
}
     df8:	4770      	bx	lr
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	42000800 	.word	0x42000800

00000e00 <__aeabi_lmul>:
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	46ce      	mov	lr, r9
     e04:	4647      	mov	r7, r8
     e06:	0415      	lsls	r5, r2, #16
     e08:	0c2d      	lsrs	r5, r5, #16
     e0a:	002e      	movs	r6, r5
     e0c:	b580      	push	{r7, lr}
     e0e:	0407      	lsls	r7, r0, #16
     e10:	0c14      	lsrs	r4, r2, #16
     e12:	0c3f      	lsrs	r7, r7, #16
     e14:	4699      	mov	r9, r3
     e16:	0c03      	lsrs	r3, r0, #16
     e18:	437e      	muls	r6, r7
     e1a:	435d      	muls	r5, r3
     e1c:	4367      	muls	r7, r4
     e1e:	4363      	muls	r3, r4
     e20:	197f      	adds	r7, r7, r5
     e22:	0c34      	lsrs	r4, r6, #16
     e24:	19e4      	adds	r4, r4, r7
     e26:	469c      	mov	ip, r3
     e28:	42a5      	cmp	r5, r4
     e2a:	d903      	bls.n	e34 <__aeabi_lmul+0x34>
     e2c:	2380      	movs	r3, #128	; 0x80
     e2e:	025b      	lsls	r3, r3, #9
     e30:	4698      	mov	r8, r3
     e32:	44c4      	add	ip, r8
     e34:	464b      	mov	r3, r9
     e36:	4351      	muls	r1, r2
     e38:	4343      	muls	r3, r0
     e3a:	0436      	lsls	r6, r6, #16
     e3c:	0c36      	lsrs	r6, r6, #16
     e3e:	0c25      	lsrs	r5, r4, #16
     e40:	0424      	lsls	r4, r4, #16
     e42:	4465      	add	r5, ip
     e44:	19a4      	adds	r4, r4, r6
     e46:	1859      	adds	r1, r3, r1
     e48:	1949      	adds	r1, r1, r5
     e4a:	0020      	movs	r0, r4
     e4c:	bc0c      	pop	{r2, r3}
     e4e:	4690      	mov	r8, r2
     e50:	4699      	mov	r9, r3
     e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e54 <__aeabi_fadd>:
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	46c6      	mov	lr, r8
     e58:	024e      	lsls	r6, r1, #9
     e5a:	0247      	lsls	r7, r0, #9
     e5c:	0a76      	lsrs	r6, r6, #9
     e5e:	0a7b      	lsrs	r3, r7, #9
     e60:	0044      	lsls	r4, r0, #1
     e62:	0fc5      	lsrs	r5, r0, #31
     e64:	00f7      	lsls	r7, r6, #3
     e66:	0048      	lsls	r0, r1, #1
     e68:	4698      	mov	r8, r3
     e6a:	b500      	push	{lr}
     e6c:	0e24      	lsrs	r4, r4, #24
     e6e:	002a      	movs	r2, r5
     e70:	00db      	lsls	r3, r3, #3
     e72:	0e00      	lsrs	r0, r0, #24
     e74:	0fc9      	lsrs	r1, r1, #31
     e76:	46bc      	mov	ip, r7
     e78:	428d      	cmp	r5, r1
     e7a:	d067      	beq.n	f4c <__aeabi_fadd+0xf8>
     e7c:	1a22      	subs	r2, r4, r0
     e7e:	2a00      	cmp	r2, #0
     e80:	dc00      	bgt.n	e84 <__aeabi_fadd+0x30>
     e82:	e0a5      	b.n	fd0 <__aeabi_fadd+0x17c>
     e84:	2800      	cmp	r0, #0
     e86:	d13a      	bne.n	efe <__aeabi_fadd+0xaa>
     e88:	2f00      	cmp	r7, #0
     e8a:	d100      	bne.n	e8e <__aeabi_fadd+0x3a>
     e8c:	e093      	b.n	fb6 <__aeabi_fadd+0x162>
     e8e:	1e51      	subs	r1, r2, #1
     e90:	2900      	cmp	r1, #0
     e92:	d000      	beq.n	e96 <__aeabi_fadd+0x42>
     e94:	e0bc      	b.n	1010 <__aeabi_fadd+0x1bc>
     e96:	2401      	movs	r4, #1
     e98:	1bdb      	subs	r3, r3, r7
     e9a:	015a      	lsls	r2, r3, #5
     e9c:	d546      	bpl.n	f2c <__aeabi_fadd+0xd8>
     e9e:	019b      	lsls	r3, r3, #6
     ea0:	099e      	lsrs	r6, r3, #6
     ea2:	0030      	movs	r0, r6
     ea4:	f000 fe94 	bl	1bd0 <__clzsi2>
     ea8:	3805      	subs	r0, #5
     eaa:	4086      	lsls	r6, r0
     eac:	4284      	cmp	r4, r0
     eae:	dd00      	ble.n	eb2 <__aeabi_fadd+0x5e>
     eb0:	e09d      	b.n	fee <__aeabi_fadd+0x19a>
     eb2:	1b04      	subs	r4, r0, r4
     eb4:	0032      	movs	r2, r6
     eb6:	2020      	movs	r0, #32
     eb8:	3401      	adds	r4, #1
     eba:	40e2      	lsrs	r2, r4
     ebc:	1b04      	subs	r4, r0, r4
     ebe:	40a6      	lsls	r6, r4
     ec0:	0033      	movs	r3, r6
     ec2:	1e5e      	subs	r6, r3, #1
     ec4:	41b3      	sbcs	r3, r6
     ec6:	2400      	movs	r4, #0
     ec8:	4313      	orrs	r3, r2
     eca:	075a      	lsls	r2, r3, #29
     ecc:	d004      	beq.n	ed8 <__aeabi_fadd+0x84>
     ece:	220f      	movs	r2, #15
     ed0:	401a      	ands	r2, r3
     ed2:	2a04      	cmp	r2, #4
     ed4:	d000      	beq.n	ed8 <__aeabi_fadd+0x84>
     ed6:	3304      	adds	r3, #4
     ed8:	015a      	lsls	r2, r3, #5
     eda:	d529      	bpl.n	f30 <__aeabi_fadd+0xdc>
     edc:	3401      	adds	r4, #1
     ede:	2cff      	cmp	r4, #255	; 0xff
     ee0:	d100      	bne.n	ee4 <__aeabi_fadd+0x90>
     ee2:	e081      	b.n	fe8 <__aeabi_fadd+0x194>
     ee4:	002a      	movs	r2, r5
     ee6:	019b      	lsls	r3, r3, #6
     ee8:	0a5b      	lsrs	r3, r3, #9
     eea:	b2e4      	uxtb	r4, r4
     eec:	025b      	lsls	r3, r3, #9
     eee:	05e4      	lsls	r4, r4, #23
     ef0:	0a58      	lsrs	r0, r3, #9
     ef2:	07d2      	lsls	r2, r2, #31
     ef4:	4320      	orrs	r0, r4
     ef6:	4310      	orrs	r0, r2
     ef8:	bc04      	pop	{r2}
     efa:	4690      	mov	r8, r2
     efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     efe:	2cff      	cmp	r4, #255	; 0xff
     f00:	d0e3      	beq.n	eca <__aeabi_fadd+0x76>
     f02:	2180      	movs	r1, #128	; 0x80
     f04:	0038      	movs	r0, r7
     f06:	04c9      	lsls	r1, r1, #19
     f08:	4308      	orrs	r0, r1
     f0a:	4684      	mov	ip, r0
     f0c:	2a1b      	cmp	r2, #27
     f0e:	dd00      	ble.n	f12 <__aeabi_fadd+0xbe>
     f10:	e082      	b.n	1018 <__aeabi_fadd+0x1c4>
     f12:	2020      	movs	r0, #32
     f14:	4661      	mov	r1, ip
     f16:	40d1      	lsrs	r1, r2
     f18:	1a82      	subs	r2, r0, r2
     f1a:	4660      	mov	r0, ip
     f1c:	4090      	lsls	r0, r2
     f1e:	0002      	movs	r2, r0
     f20:	1e50      	subs	r0, r2, #1
     f22:	4182      	sbcs	r2, r0
     f24:	430a      	orrs	r2, r1
     f26:	1a9b      	subs	r3, r3, r2
     f28:	015a      	lsls	r2, r3, #5
     f2a:	d4b8      	bmi.n	e9e <__aeabi_fadd+0x4a>
     f2c:	075a      	lsls	r2, r3, #29
     f2e:	d1ce      	bne.n	ece <__aeabi_fadd+0x7a>
     f30:	08de      	lsrs	r6, r3, #3
     f32:	002a      	movs	r2, r5
     f34:	2cff      	cmp	r4, #255	; 0xff
     f36:	d13a      	bne.n	fae <__aeabi_fadd+0x15a>
     f38:	2e00      	cmp	r6, #0
     f3a:	d100      	bne.n	f3e <__aeabi_fadd+0xea>
     f3c:	e0ae      	b.n	109c <__aeabi_fadd+0x248>
     f3e:	2380      	movs	r3, #128	; 0x80
     f40:	03db      	lsls	r3, r3, #15
     f42:	4333      	orrs	r3, r6
     f44:	025b      	lsls	r3, r3, #9
     f46:	0a5b      	lsrs	r3, r3, #9
     f48:	24ff      	movs	r4, #255	; 0xff
     f4a:	e7cf      	b.n	eec <__aeabi_fadd+0x98>
     f4c:	1a21      	subs	r1, r4, r0
     f4e:	2900      	cmp	r1, #0
     f50:	dd52      	ble.n	ff8 <__aeabi_fadd+0x1a4>
     f52:	2800      	cmp	r0, #0
     f54:	d031      	beq.n	fba <__aeabi_fadd+0x166>
     f56:	2cff      	cmp	r4, #255	; 0xff
     f58:	d0b7      	beq.n	eca <__aeabi_fadd+0x76>
     f5a:	2080      	movs	r0, #128	; 0x80
     f5c:	003e      	movs	r6, r7
     f5e:	04c0      	lsls	r0, r0, #19
     f60:	4306      	orrs	r6, r0
     f62:	46b4      	mov	ip, r6
     f64:	291b      	cmp	r1, #27
     f66:	dd00      	ble.n	f6a <__aeabi_fadd+0x116>
     f68:	e0aa      	b.n	10c0 <__aeabi_fadd+0x26c>
     f6a:	2620      	movs	r6, #32
     f6c:	4660      	mov	r0, ip
     f6e:	40c8      	lsrs	r0, r1
     f70:	1a71      	subs	r1, r6, r1
     f72:	4666      	mov	r6, ip
     f74:	408e      	lsls	r6, r1
     f76:	0031      	movs	r1, r6
     f78:	1e4e      	subs	r6, r1, #1
     f7a:	41b1      	sbcs	r1, r6
     f7c:	4301      	orrs	r1, r0
     f7e:	185b      	adds	r3, r3, r1
     f80:	0159      	lsls	r1, r3, #5
     f82:	d5d3      	bpl.n	f2c <__aeabi_fadd+0xd8>
     f84:	3401      	adds	r4, #1
     f86:	2cff      	cmp	r4, #255	; 0xff
     f88:	d100      	bne.n	f8c <__aeabi_fadd+0x138>
     f8a:	e087      	b.n	109c <__aeabi_fadd+0x248>
     f8c:	2201      	movs	r2, #1
     f8e:	4978      	ldr	r1, [pc, #480]	; (1170 <__aeabi_fadd+0x31c>)
     f90:	401a      	ands	r2, r3
     f92:	085b      	lsrs	r3, r3, #1
     f94:	400b      	ands	r3, r1
     f96:	4313      	orrs	r3, r2
     f98:	e797      	b.n	eca <__aeabi_fadd+0x76>
     f9a:	2c00      	cmp	r4, #0
     f9c:	d000      	beq.n	fa0 <__aeabi_fadd+0x14c>
     f9e:	e0a7      	b.n	10f0 <__aeabi_fadd+0x29c>
     fa0:	2b00      	cmp	r3, #0
     fa2:	d000      	beq.n	fa6 <__aeabi_fadd+0x152>
     fa4:	e0b6      	b.n	1114 <__aeabi_fadd+0x2c0>
     fa6:	1e3b      	subs	r3, r7, #0
     fa8:	d162      	bne.n	1070 <__aeabi_fadd+0x21c>
     faa:	2600      	movs	r6, #0
     fac:	2200      	movs	r2, #0
     fae:	0273      	lsls	r3, r6, #9
     fb0:	0a5b      	lsrs	r3, r3, #9
     fb2:	b2e4      	uxtb	r4, r4
     fb4:	e79a      	b.n	eec <__aeabi_fadd+0x98>
     fb6:	0014      	movs	r4, r2
     fb8:	e787      	b.n	eca <__aeabi_fadd+0x76>
     fba:	2f00      	cmp	r7, #0
     fbc:	d04d      	beq.n	105a <__aeabi_fadd+0x206>
     fbe:	1e48      	subs	r0, r1, #1
     fc0:	2800      	cmp	r0, #0
     fc2:	d157      	bne.n	1074 <__aeabi_fadd+0x220>
     fc4:	4463      	add	r3, ip
     fc6:	2401      	movs	r4, #1
     fc8:	015a      	lsls	r2, r3, #5
     fca:	d5af      	bpl.n	f2c <__aeabi_fadd+0xd8>
     fcc:	2402      	movs	r4, #2
     fce:	e7dd      	b.n	f8c <__aeabi_fadd+0x138>
     fd0:	2a00      	cmp	r2, #0
     fd2:	d124      	bne.n	101e <__aeabi_fadd+0x1ca>
     fd4:	1c62      	adds	r2, r4, #1
     fd6:	b2d2      	uxtb	r2, r2
     fd8:	2a01      	cmp	r2, #1
     fda:	ddde      	ble.n	f9a <__aeabi_fadd+0x146>
     fdc:	1bde      	subs	r6, r3, r7
     fde:	0172      	lsls	r2, r6, #5
     fe0:	d535      	bpl.n	104e <__aeabi_fadd+0x1fa>
     fe2:	1afe      	subs	r6, r7, r3
     fe4:	000d      	movs	r5, r1
     fe6:	e75c      	b.n	ea2 <__aeabi_fadd+0x4e>
     fe8:	002a      	movs	r2, r5
     fea:	2300      	movs	r3, #0
     fec:	e77e      	b.n	eec <__aeabi_fadd+0x98>
     fee:	0033      	movs	r3, r6
     ff0:	4a60      	ldr	r2, [pc, #384]	; (1174 <__aeabi_fadd+0x320>)
     ff2:	1a24      	subs	r4, r4, r0
     ff4:	4013      	ands	r3, r2
     ff6:	e768      	b.n	eca <__aeabi_fadd+0x76>
     ff8:	2900      	cmp	r1, #0
     ffa:	d163      	bne.n	10c4 <__aeabi_fadd+0x270>
     ffc:	1c61      	adds	r1, r4, #1
     ffe:	b2c8      	uxtb	r0, r1
    1000:	2801      	cmp	r0, #1
    1002:	dd4e      	ble.n	10a2 <__aeabi_fadd+0x24e>
    1004:	29ff      	cmp	r1, #255	; 0xff
    1006:	d049      	beq.n	109c <__aeabi_fadd+0x248>
    1008:	4463      	add	r3, ip
    100a:	085b      	lsrs	r3, r3, #1
    100c:	000c      	movs	r4, r1
    100e:	e75c      	b.n	eca <__aeabi_fadd+0x76>
    1010:	2aff      	cmp	r2, #255	; 0xff
    1012:	d041      	beq.n	1098 <__aeabi_fadd+0x244>
    1014:	000a      	movs	r2, r1
    1016:	e779      	b.n	f0c <__aeabi_fadd+0xb8>
    1018:	2201      	movs	r2, #1
    101a:	1a9b      	subs	r3, r3, r2
    101c:	e784      	b.n	f28 <__aeabi_fadd+0xd4>
    101e:	2c00      	cmp	r4, #0
    1020:	d01d      	beq.n	105e <__aeabi_fadd+0x20a>
    1022:	28ff      	cmp	r0, #255	; 0xff
    1024:	d022      	beq.n	106c <__aeabi_fadd+0x218>
    1026:	2480      	movs	r4, #128	; 0x80
    1028:	04e4      	lsls	r4, r4, #19
    102a:	4252      	negs	r2, r2
    102c:	4323      	orrs	r3, r4
    102e:	2a1b      	cmp	r2, #27
    1030:	dd00      	ble.n	1034 <__aeabi_fadd+0x1e0>
    1032:	e08a      	b.n	114a <__aeabi_fadd+0x2f6>
    1034:	001c      	movs	r4, r3
    1036:	2520      	movs	r5, #32
    1038:	40d4      	lsrs	r4, r2
    103a:	1aaa      	subs	r2, r5, r2
    103c:	4093      	lsls	r3, r2
    103e:	1e5a      	subs	r2, r3, #1
    1040:	4193      	sbcs	r3, r2
    1042:	4323      	orrs	r3, r4
    1044:	4662      	mov	r2, ip
    1046:	0004      	movs	r4, r0
    1048:	1ad3      	subs	r3, r2, r3
    104a:	000d      	movs	r5, r1
    104c:	e725      	b.n	e9a <__aeabi_fadd+0x46>
    104e:	2e00      	cmp	r6, #0
    1050:	d000      	beq.n	1054 <__aeabi_fadd+0x200>
    1052:	e726      	b.n	ea2 <__aeabi_fadd+0x4e>
    1054:	2200      	movs	r2, #0
    1056:	2400      	movs	r4, #0
    1058:	e7a9      	b.n	fae <__aeabi_fadd+0x15a>
    105a:	000c      	movs	r4, r1
    105c:	e735      	b.n	eca <__aeabi_fadd+0x76>
    105e:	2b00      	cmp	r3, #0
    1060:	d04d      	beq.n	10fe <__aeabi_fadd+0x2aa>
    1062:	43d2      	mvns	r2, r2
    1064:	2a00      	cmp	r2, #0
    1066:	d0ed      	beq.n	1044 <__aeabi_fadd+0x1f0>
    1068:	28ff      	cmp	r0, #255	; 0xff
    106a:	d1e0      	bne.n	102e <__aeabi_fadd+0x1da>
    106c:	4663      	mov	r3, ip
    106e:	24ff      	movs	r4, #255	; 0xff
    1070:	000d      	movs	r5, r1
    1072:	e72a      	b.n	eca <__aeabi_fadd+0x76>
    1074:	29ff      	cmp	r1, #255	; 0xff
    1076:	d00f      	beq.n	1098 <__aeabi_fadd+0x244>
    1078:	0001      	movs	r1, r0
    107a:	e773      	b.n	f64 <__aeabi_fadd+0x110>
    107c:	2b00      	cmp	r3, #0
    107e:	d061      	beq.n	1144 <__aeabi_fadd+0x2f0>
    1080:	24ff      	movs	r4, #255	; 0xff
    1082:	2f00      	cmp	r7, #0
    1084:	d100      	bne.n	1088 <__aeabi_fadd+0x234>
    1086:	e720      	b.n	eca <__aeabi_fadd+0x76>
    1088:	2280      	movs	r2, #128	; 0x80
    108a:	4641      	mov	r1, r8
    108c:	03d2      	lsls	r2, r2, #15
    108e:	4211      	tst	r1, r2
    1090:	d002      	beq.n	1098 <__aeabi_fadd+0x244>
    1092:	4216      	tst	r6, r2
    1094:	d100      	bne.n	1098 <__aeabi_fadd+0x244>
    1096:	003b      	movs	r3, r7
    1098:	24ff      	movs	r4, #255	; 0xff
    109a:	e716      	b.n	eca <__aeabi_fadd+0x76>
    109c:	24ff      	movs	r4, #255	; 0xff
    109e:	2300      	movs	r3, #0
    10a0:	e724      	b.n	eec <__aeabi_fadd+0x98>
    10a2:	2c00      	cmp	r4, #0
    10a4:	d1ea      	bne.n	107c <__aeabi_fadd+0x228>
    10a6:	2b00      	cmp	r3, #0
    10a8:	d058      	beq.n	115c <__aeabi_fadd+0x308>
    10aa:	2f00      	cmp	r7, #0
    10ac:	d100      	bne.n	10b0 <__aeabi_fadd+0x25c>
    10ae:	e70c      	b.n	eca <__aeabi_fadd+0x76>
    10b0:	4463      	add	r3, ip
    10b2:	015a      	lsls	r2, r3, #5
    10b4:	d400      	bmi.n	10b8 <__aeabi_fadd+0x264>
    10b6:	e739      	b.n	f2c <__aeabi_fadd+0xd8>
    10b8:	4a2e      	ldr	r2, [pc, #184]	; (1174 <__aeabi_fadd+0x320>)
    10ba:	000c      	movs	r4, r1
    10bc:	4013      	ands	r3, r2
    10be:	e704      	b.n	eca <__aeabi_fadd+0x76>
    10c0:	2101      	movs	r1, #1
    10c2:	e75c      	b.n	f7e <__aeabi_fadd+0x12a>
    10c4:	2c00      	cmp	r4, #0
    10c6:	d11e      	bne.n	1106 <__aeabi_fadd+0x2b2>
    10c8:	2b00      	cmp	r3, #0
    10ca:	d040      	beq.n	114e <__aeabi_fadd+0x2fa>
    10cc:	43c9      	mvns	r1, r1
    10ce:	2900      	cmp	r1, #0
    10d0:	d00b      	beq.n	10ea <__aeabi_fadd+0x296>
    10d2:	28ff      	cmp	r0, #255	; 0xff
    10d4:	d036      	beq.n	1144 <__aeabi_fadd+0x2f0>
    10d6:	291b      	cmp	r1, #27
    10d8:	dc47      	bgt.n	116a <__aeabi_fadd+0x316>
    10da:	001c      	movs	r4, r3
    10dc:	2620      	movs	r6, #32
    10de:	40cc      	lsrs	r4, r1
    10e0:	1a71      	subs	r1, r6, r1
    10e2:	408b      	lsls	r3, r1
    10e4:	1e59      	subs	r1, r3, #1
    10e6:	418b      	sbcs	r3, r1
    10e8:	4323      	orrs	r3, r4
    10ea:	4463      	add	r3, ip
    10ec:	0004      	movs	r4, r0
    10ee:	e747      	b.n	f80 <__aeabi_fadd+0x12c>
    10f0:	2b00      	cmp	r3, #0
    10f2:	d118      	bne.n	1126 <__aeabi_fadd+0x2d2>
    10f4:	1e3b      	subs	r3, r7, #0
    10f6:	d02d      	beq.n	1154 <__aeabi_fadd+0x300>
    10f8:	000d      	movs	r5, r1
    10fa:	24ff      	movs	r4, #255	; 0xff
    10fc:	e6e5      	b.n	eca <__aeabi_fadd+0x76>
    10fe:	003b      	movs	r3, r7
    1100:	0004      	movs	r4, r0
    1102:	000d      	movs	r5, r1
    1104:	e6e1      	b.n	eca <__aeabi_fadd+0x76>
    1106:	28ff      	cmp	r0, #255	; 0xff
    1108:	d01c      	beq.n	1144 <__aeabi_fadd+0x2f0>
    110a:	2480      	movs	r4, #128	; 0x80
    110c:	04e4      	lsls	r4, r4, #19
    110e:	4249      	negs	r1, r1
    1110:	4323      	orrs	r3, r4
    1112:	e7e0      	b.n	10d6 <__aeabi_fadd+0x282>
    1114:	2f00      	cmp	r7, #0
    1116:	d100      	bne.n	111a <__aeabi_fadd+0x2c6>
    1118:	e6d7      	b.n	eca <__aeabi_fadd+0x76>
    111a:	1bde      	subs	r6, r3, r7
    111c:	0172      	lsls	r2, r6, #5
    111e:	d51f      	bpl.n	1160 <__aeabi_fadd+0x30c>
    1120:	1afb      	subs	r3, r7, r3
    1122:	000d      	movs	r5, r1
    1124:	e6d1      	b.n	eca <__aeabi_fadd+0x76>
    1126:	24ff      	movs	r4, #255	; 0xff
    1128:	2f00      	cmp	r7, #0
    112a:	d100      	bne.n	112e <__aeabi_fadd+0x2da>
    112c:	e6cd      	b.n	eca <__aeabi_fadd+0x76>
    112e:	2280      	movs	r2, #128	; 0x80
    1130:	4640      	mov	r0, r8
    1132:	03d2      	lsls	r2, r2, #15
    1134:	4210      	tst	r0, r2
    1136:	d0af      	beq.n	1098 <__aeabi_fadd+0x244>
    1138:	4216      	tst	r6, r2
    113a:	d1ad      	bne.n	1098 <__aeabi_fadd+0x244>
    113c:	003b      	movs	r3, r7
    113e:	000d      	movs	r5, r1
    1140:	24ff      	movs	r4, #255	; 0xff
    1142:	e6c2      	b.n	eca <__aeabi_fadd+0x76>
    1144:	4663      	mov	r3, ip
    1146:	24ff      	movs	r4, #255	; 0xff
    1148:	e6bf      	b.n	eca <__aeabi_fadd+0x76>
    114a:	2301      	movs	r3, #1
    114c:	e77a      	b.n	1044 <__aeabi_fadd+0x1f0>
    114e:	003b      	movs	r3, r7
    1150:	0004      	movs	r4, r0
    1152:	e6ba      	b.n	eca <__aeabi_fadd+0x76>
    1154:	2680      	movs	r6, #128	; 0x80
    1156:	2200      	movs	r2, #0
    1158:	03f6      	lsls	r6, r6, #15
    115a:	e6f0      	b.n	f3e <__aeabi_fadd+0xea>
    115c:	003b      	movs	r3, r7
    115e:	e6b4      	b.n	eca <__aeabi_fadd+0x76>
    1160:	1e33      	subs	r3, r6, #0
    1162:	d000      	beq.n	1166 <__aeabi_fadd+0x312>
    1164:	e6e2      	b.n	f2c <__aeabi_fadd+0xd8>
    1166:	2200      	movs	r2, #0
    1168:	e721      	b.n	fae <__aeabi_fadd+0x15a>
    116a:	2301      	movs	r3, #1
    116c:	e7bd      	b.n	10ea <__aeabi_fadd+0x296>
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	7dffffff 	.word	0x7dffffff
    1174:	fbffffff 	.word	0xfbffffff

00001178 <__aeabi_fdiv>:
    1178:	b5f0      	push	{r4, r5, r6, r7, lr}
    117a:	4657      	mov	r7, sl
    117c:	464e      	mov	r6, r9
    117e:	46de      	mov	lr, fp
    1180:	4645      	mov	r5, r8
    1182:	b5e0      	push	{r5, r6, r7, lr}
    1184:	0244      	lsls	r4, r0, #9
    1186:	0043      	lsls	r3, r0, #1
    1188:	0fc6      	lsrs	r6, r0, #31
    118a:	b083      	sub	sp, #12
    118c:	1c0f      	adds	r7, r1, #0
    118e:	0a64      	lsrs	r4, r4, #9
    1190:	0e1b      	lsrs	r3, r3, #24
    1192:	46b2      	mov	sl, r6
    1194:	d053      	beq.n	123e <__aeabi_fdiv+0xc6>
    1196:	2bff      	cmp	r3, #255	; 0xff
    1198:	d027      	beq.n	11ea <__aeabi_fdiv+0x72>
    119a:	2280      	movs	r2, #128	; 0x80
    119c:	00e4      	lsls	r4, r4, #3
    119e:	04d2      	lsls	r2, r2, #19
    11a0:	4314      	orrs	r4, r2
    11a2:	227f      	movs	r2, #127	; 0x7f
    11a4:	4252      	negs	r2, r2
    11a6:	4690      	mov	r8, r2
    11a8:	4498      	add	r8, r3
    11aa:	2300      	movs	r3, #0
    11ac:	4699      	mov	r9, r3
    11ae:	469b      	mov	fp, r3
    11b0:	027d      	lsls	r5, r7, #9
    11b2:	0078      	lsls	r0, r7, #1
    11b4:	0ffb      	lsrs	r3, r7, #31
    11b6:	0a6d      	lsrs	r5, r5, #9
    11b8:	0e00      	lsrs	r0, r0, #24
    11ba:	9300      	str	r3, [sp, #0]
    11bc:	d024      	beq.n	1208 <__aeabi_fdiv+0x90>
    11be:	28ff      	cmp	r0, #255	; 0xff
    11c0:	d046      	beq.n	1250 <__aeabi_fdiv+0xd8>
    11c2:	2380      	movs	r3, #128	; 0x80
    11c4:	2100      	movs	r1, #0
    11c6:	00ed      	lsls	r5, r5, #3
    11c8:	04db      	lsls	r3, r3, #19
    11ca:	431d      	orrs	r5, r3
    11cc:	387f      	subs	r0, #127	; 0x7f
    11ce:	4647      	mov	r7, r8
    11d0:	1a38      	subs	r0, r7, r0
    11d2:	464f      	mov	r7, r9
    11d4:	430f      	orrs	r7, r1
    11d6:	00bf      	lsls	r7, r7, #2
    11d8:	46b9      	mov	r9, r7
    11da:	0033      	movs	r3, r6
    11dc:	9a00      	ldr	r2, [sp, #0]
    11de:	4f87      	ldr	r7, [pc, #540]	; (13fc <__aeabi_fdiv+0x284>)
    11e0:	4053      	eors	r3, r2
    11e2:	464a      	mov	r2, r9
    11e4:	58ba      	ldr	r2, [r7, r2]
    11e6:	9301      	str	r3, [sp, #4]
    11e8:	4697      	mov	pc, r2
    11ea:	2c00      	cmp	r4, #0
    11ec:	d14e      	bne.n	128c <__aeabi_fdiv+0x114>
    11ee:	2308      	movs	r3, #8
    11f0:	4699      	mov	r9, r3
    11f2:	33f7      	adds	r3, #247	; 0xf7
    11f4:	4698      	mov	r8, r3
    11f6:	3bfd      	subs	r3, #253	; 0xfd
    11f8:	469b      	mov	fp, r3
    11fa:	027d      	lsls	r5, r7, #9
    11fc:	0078      	lsls	r0, r7, #1
    11fe:	0ffb      	lsrs	r3, r7, #31
    1200:	0a6d      	lsrs	r5, r5, #9
    1202:	0e00      	lsrs	r0, r0, #24
    1204:	9300      	str	r3, [sp, #0]
    1206:	d1da      	bne.n	11be <__aeabi_fdiv+0x46>
    1208:	2d00      	cmp	r5, #0
    120a:	d126      	bne.n	125a <__aeabi_fdiv+0xe2>
    120c:	2000      	movs	r0, #0
    120e:	2101      	movs	r1, #1
    1210:	0033      	movs	r3, r6
    1212:	9a00      	ldr	r2, [sp, #0]
    1214:	4f7a      	ldr	r7, [pc, #488]	; (1400 <__aeabi_fdiv+0x288>)
    1216:	4053      	eors	r3, r2
    1218:	4642      	mov	r2, r8
    121a:	1a10      	subs	r0, r2, r0
    121c:	464a      	mov	r2, r9
    121e:	430a      	orrs	r2, r1
    1220:	0092      	lsls	r2, r2, #2
    1222:	58ba      	ldr	r2, [r7, r2]
    1224:	001d      	movs	r5, r3
    1226:	4697      	mov	pc, r2
    1228:	9b00      	ldr	r3, [sp, #0]
    122a:	002c      	movs	r4, r5
    122c:	469a      	mov	sl, r3
    122e:	468b      	mov	fp, r1
    1230:	465b      	mov	r3, fp
    1232:	2b02      	cmp	r3, #2
    1234:	d131      	bne.n	129a <__aeabi_fdiv+0x122>
    1236:	4653      	mov	r3, sl
    1238:	21ff      	movs	r1, #255	; 0xff
    123a:	2400      	movs	r4, #0
    123c:	e038      	b.n	12b0 <__aeabi_fdiv+0x138>
    123e:	2c00      	cmp	r4, #0
    1240:	d117      	bne.n	1272 <__aeabi_fdiv+0xfa>
    1242:	2304      	movs	r3, #4
    1244:	4699      	mov	r9, r3
    1246:	2300      	movs	r3, #0
    1248:	4698      	mov	r8, r3
    124a:	3301      	adds	r3, #1
    124c:	469b      	mov	fp, r3
    124e:	e7af      	b.n	11b0 <__aeabi_fdiv+0x38>
    1250:	20ff      	movs	r0, #255	; 0xff
    1252:	2d00      	cmp	r5, #0
    1254:	d10b      	bne.n	126e <__aeabi_fdiv+0xf6>
    1256:	2102      	movs	r1, #2
    1258:	e7da      	b.n	1210 <__aeabi_fdiv+0x98>
    125a:	0028      	movs	r0, r5
    125c:	f000 fcb8 	bl	1bd0 <__clzsi2>
    1260:	1f43      	subs	r3, r0, #5
    1262:	409d      	lsls	r5, r3
    1264:	2376      	movs	r3, #118	; 0x76
    1266:	425b      	negs	r3, r3
    1268:	1a18      	subs	r0, r3, r0
    126a:	2100      	movs	r1, #0
    126c:	e7af      	b.n	11ce <__aeabi_fdiv+0x56>
    126e:	2103      	movs	r1, #3
    1270:	e7ad      	b.n	11ce <__aeabi_fdiv+0x56>
    1272:	0020      	movs	r0, r4
    1274:	f000 fcac 	bl	1bd0 <__clzsi2>
    1278:	1f43      	subs	r3, r0, #5
    127a:	409c      	lsls	r4, r3
    127c:	2376      	movs	r3, #118	; 0x76
    127e:	425b      	negs	r3, r3
    1280:	1a1b      	subs	r3, r3, r0
    1282:	4698      	mov	r8, r3
    1284:	2300      	movs	r3, #0
    1286:	4699      	mov	r9, r3
    1288:	469b      	mov	fp, r3
    128a:	e791      	b.n	11b0 <__aeabi_fdiv+0x38>
    128c:	230c      	movs	r3, #12
    128e:	4699      	mov	r9, r3
    1290:	33f3      	adds	r3, #243	; 0xf3
    1292:	4698      	mov	r8, r3
    1294:	3bfc      	subs	r3, #252	; 0xfc
    1296:	469b      	mov	fp, r3
    1298:	e78a      	b.n	11b0 <__aeabi_fdiv+0x38>
    129a:	2b03      	cmp	r3, #3
    129c:	d100      	bne.n	12a0 <__aeabi_fdiv+0x128>
    129e:	e0a5      	b.n	13ec <__aeabi_fdiv+0x274>
    12a0:	4655      	mov	r5, sl
    12a2:	2b01      	cmp	r3, #1
    12a4:	d000      	beq.n	12a8 <__aeabi_fdiv+0x130>
    12a6:	e081      	b.n	13ac <__aeabi_fdiv+0x234>
    12a8:	2301      	movs	r3, #1
    12aa:	2100      	movs	r1, #0
    12ac:	2400      	movs	r4, #0
    12ae:	402b      	ands	r3, r5
    12b0:	0264      	lsls	r4, r4, #9
    12b2:	05c9      	lsls	r1, r1, #23
    12b4:	0a60      	lsrs	r0, r4, #9
    12b6:	07db      	lsls	r3, r3, #31
    12b8:	4308      	orrs	r0, r1
    12ba:	4318      	orrs	r0, r3
    12bc:	b003      	add	sp, #12
    12be:	bc3c      	pop	{r2, r3, r4, r5}
    12c0:	4690      	mov	r8, r2
    12c2:	4699      	mov	r9, r3
    12c4:	46a2      	mov	sl, r4
    12c6:	46ab      	mov	fp, r5
    12c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ca:	2480      	movs	r4, #128	; 0x80
    12cc:	2300      	movs	r3, #0
    12ce:	03e4      	lsls	r4, r4, #15
    12d0:	21ff      	movs	r1, #255	; 0xff
    12d2:	e7ed      	b.n	12b0 <__aeabi_fdiv+0x138>
    12d4:	21ff      	movs	r1, #255	; 0xff
    12d6:	2400      	movs	r4, #0
    12d8:	e7ea      	b.n	12b0 <__aeabi_fdiv+0x138>
    12da:	2301      	movs	r3, #1
    12dc:	1a59      	subs	r1, r3, r1
    12de:	291b      	cmp	r1, #27
    12e0:	dd66      	ble.n	13b0 <__aeabi_fdiv+0x238>
    12e2:	9a01      	ldr	r2, [sp, #4]
    12e4:	4013      	ands	r3, r2
    12e6:	2100      	movs	r1, #0
    12e8:	2400      	movs	r4, #0
    12ea:	e7e1      	b.n	12b0 <__aeabi_fdiv+0x138>
    12ec:	2380      	movs	r3, #128	; 0x80
    12ee:	03db      	lsls	r3, r3, #15
    12f0:	421c      	tst	r4, r3
    12f2:	d038      	beq.n	1366 <__aeabi_fdiv+0x1ee>
    12f4:	421d      	tst	r5, r3
    12f6:	d051      	beq.n	139c <__aeabi_fdiv+0x224>
    12f8:	431c      	orrs	r4, r3
    12fa:	0264      	lsls	r4, r4, #9
    12fc:	0a64      	lsrs	r4, r4, #9
    12fe:	0033      	movs	r3, r6
    1300:	21ff      	movs	r1, #255	; 0xff
    1302:	e7d5      	b.n	12b0 <__aeabi_fdiv+0x138>
    1304:	0163      	lsls	r3, r4, #5
    1306:	016c      	lsls	r4, r5, #5
    1308:	42a3      	cmp	r3, r4
    130a:	d23b      	bcs.n	1384 <__aeabi_fdiv+0x20c>
    130c:	261b      	movs	r6, #27
    130e:	2100      	movs	r1, #0
    1310:	3801      	subs	r0, #1
    1312:	2501      	movs	r5, #1
    1314:	001f      	movs	r7, r3
    1316:	0049      	lsls	r1, r1, #1
    1318:	005b      	lsls	r3, r3, #1
    131a:	2f00      	cmp	r7, #0
    131c:	db01      	blt.n	1322 <__aeabi_fdiv+0x1aa>
    131e:	429c      	cmp	r4, r3
    1320:	d801      	bhi.n	1326 <__aeabi_fdiv+0x1ae>
    1322:	1b1b      	subs	r3, r3, r4
    1324:	4329      	orrs	r1, r5
    1326:	3e01      	subs	r6, #1
    1328:	2e00      	cmp	r6, #0
    132a:	d1f3      	bne.n	1314 <__aeabi_fdiv+0x19c>
    132c:	001c      	movs	r4, r3
    132e:	1e63      	subs	r3, r4, #1
    1330:	419c      	sbcs	r4, r3
    1332:	430c      	orrs	r4, r1
    1334:	0001      	movs	r1, r0
    1336:	317f      	adds	r1, #127	; 0x7f
    1338:	2900      	cmp	r1, #0
    133a:	ddce      	ble.n	12da <__aeabi_fdiv+0x162>
    133c:	0763      	lsls	r3, r4, #29
    133e:	d004      	beq.n	134a <__aeabi_fdiv+0x1d2>
    1340:	230f      	movs	r3, #15
    1342:	4023      	ands	r3, r4
    1344:	2b04      	cmp	r3, #4
    1346:	d000      	beq.n	134a <__aeabi_fdiv+0x1d2>
    1348:	3404      	adds	r4, #4
    134a:	0123      	lsls	r3, r4, #4
    134c:	d503      	bpl.n	1356 <__aeabi_fdiv+0x1de>
    134e:	0001      	movs	r1, r0
    1350:	4b2c      	ldr	r3, [pc, #176]	; (1404 <__aeabi_fdiv+0x28c>)
    1352:	3180      	adds	r1, #128	; 0x80
    1354:	401c      	ands	r4, r3
    1356:	29fe      	cmp	r1, #254	; 0xfe
    1358:	dd0d      	ble.n	1376 <__aeabi_fdiv+0x1fe>
    135a:	2301      	movs	r3, #1
    135c:	9a01      	ldr	r2, [sp, #4]
    135e:	21ff      	movs	r1, #255	; 0xff
    1360:	4013      	ands	r3, r2
    1362:	2400      	movs	r4, #0
    1364:	e7a4      	b.n	12b0 <__aeabi_fdiv+0x138>
    1366:	2380      	movs	r3, #128	; 0x80
    1368:	03db      	lsls	r3, r3, #15
    136a:	431c      	orrs	r4, r3
    136c:	0264      	lsls	r4, r4, #9
    136e:	0a64      	lsrs	r4, r4, #9
    1370:	0033      	movs	r3, r6
    1372:	21ff      	movs	r1, #255	; 0xff
    1374:	e79c      	b.n	12b0 <__aeabi_fdiv+0x138>
    1376:	2301      	movs	r3, #1
    1378:	9a01      	ldr	r2, [sp, #4]
    137a:	01a4      	lsls	r4, r4, #6
    137c:	0a64      	lsrs	r4, r4, #9
    137e:	b2c9      	uxtb	r1, r1
    1380:	4013      	ands	r3, r2
    1382:	e795      	b.n	12b0 <__aeabi_fdiv+0x138>
    1384:	1b1b      	subs	r3, r3, r4
    1386:	261a      	movs	r6, #26
    1388:	2101      	movs	r1, #1
    138a:	e7c2      	b.n	1312 <__aeabi_fdiv+0x19a>
    138c:	9b00      	ldr	r3, [sp, #0]
    138e:	468b      	mov	fp, r1
    1390:	469a      	mov	sl, r3
    1392:	2400      	movs	r4, #0
    1394:	e74c      	b.n	1230 <__aeabi_fdiv+0xb8>
    1396:	0263      	lsls	r3, r4, #9
    1398:	d5e5      	bpl.n	1366 <__aeabi_fdiv+0x1ee>
    139a:	2500      	movs	r5, #0
    139c:	2480      	movs	r4, #128	; 0x80
    139e:	03e4      	lsls	r4, r4, #15
    13a0:	432c      	orrs	r4, r5
    13a2:	0264      	lsls	r4, r4, #9
    13a4:	0a64      	lsrs	r4, r4, #9
    13a6:	9b00      	ldr	r3, [sp, #0]
    13a8:	21ff      	movs	r1, #255	; 0xff
    13aa:	e781      	b.n	12b0 <__aeabi_fdiv+0x138>
    13ac:	9501      	str	r5, [sp, #4]
    13ae:	e7c1      	b.n	1334 <__aeabi_fdiv+0x1bc>
    13b0:	0023      	movs	r3, r4
    13b2:	2020      	movs	r0, #32
    13b4:	40cb      	lsrs	r3, r1
    13b6:	1a41      	subs	r1, r0, r1
    13b8:	408c      	lsls	r4, r1
    13ba:	1e61      	subs	r1, r4, #1
    13bc:	418c      	sbcs	r4, r1
    13be:	431c      	orrs	r4, r3
    13c0:	0763      	lsls	r3, r4, #29
    13c2:	d004      	beq.n	13ce <__aeabi_fdiv+0x256>
    13c4:	230f      	movs	r3, #15
    13c6:	4023      	ands	r3, r4
    13c8:	2b04      	cmp	r3, #4
    13ca:	d000      	beq.n	13ce <__aeabi_fdiv+0x256>
    13cc:	3404      	adds	r4, #4
    13ce:	0163      	lsls	r3, r4, #5
    13d0:	d505      	bpl.n	13de <__aeabi_fdiv+0x266>
    13d2:	2301      	movs	r3, #1
    13d4:	9a01      	ldr	r2, [sp, #4]
    13d6:	2101      	movs	r1, #1
    13d8:	4013      	ands	r3, r2
    13da:	2400      	movs	r4, #0
    13dc:	e768      	b.n	12b0 <__aeabi_fdiv+0x138>
    13de:	2301      	movs	r3, #1
    13e0:	9a01      	ldr	r2, [sp, #4]
    13e2:	01a4      	lsls	r4, r4, #6
    13e4:	0a64      	lsrs	r4, r4, #9
    13e6:	4013      	ands	r3, r2
    13e8:	2100      	movs	r1, #0
    13ea:	e761      	b.n	12b0 <__aeabi_fdiv+0x138>
    13ec:	2380      	movs	r3, #128	; 0x80
    13ee:	03db      	lsls	r3, r3, #15
    13f0:	431c      	orrs	r4, r3
    13f2:	0264      	lsls	r4, r4, #9
    13f4:	0a64      	lsrs	r4, r4, #9
    13f6:	4653      	mov	r3, sl
    13f8:	21ff      	movs	r1, #255	; 0xff
    13fa:	e759      	b.n	12b0 <__aeabi_fdiv+0x138>
    13fc:	00001f84 	.word	0x00001f84
    1400:	00001fc4 	.word	0x00001fc4
    1404:	f7ffffff 	.word	0xf7ffffff

00001408 <__aeabi_ui2f>:
    1408:	b510      	push	{r4, lr}
    140a:	1e04      	subs	r4, r0, #0
    140c:	d027      	beq.n	145e <__aeabi_ui2f+0x56>
    140e:	f000 fbdf 	bl	1bd0 <__clzsi2>
    1412:	239e      	movs	r3, #158	; 0x9e
    1414:	1a1b      	subs	r3, r3, r0
    1416:	2b96      	cmp	r3, #150	; 0x96
    1418:	dc0a      	bgt.n	1430 <__aeabi_ui2f+0x28>
    141a:	2296      	movs	r2, #150	; 0x96
    141c:	1ad2      	subs	r2, r2, r3
    141e:	4094      	lsls	r4, r2
    1420:	0264      	lsls	r4, r4, #9
    1422:	0a64      	lsrs	r4, r4, #9
    1424:	b2db      	uxtb	r3, r3
    1426:	0264      	lsls	r4, r4, #9
    1428:	05db      	lsls	r3, r3, #23
    142a:	0a60      	lsrs	r0, r4, #9
    142c:	4318      	orrs	r0, r3
    142e:	bd10      	pop	{r4, pc}
    1430:	2b99      	cmp	r3, #153	; 0x99
    1432:	dc17      	bgt.n	1464 <__aeabi_ui2f+0x5c>
    1434:	2299      	movs	r2, #153	; 0x99
    1436:	1ad2      	subs	r2, r2, r3
    1438:	2a00      	cmp	r2, #0
    143a:	dd27      	ble.n	148c <__aeabi_ui2f+0x84>
    143c:	4094      	lsls	r4, r2
    143e:	0022      	movs	r2, r4
    1440:	4c13      	ldr	r4, [pc, #76]	; (1490 <__aeabi_ui2f+0x88>)
    1442:	4014      	ands	r4, r2
    1444:	0751      	lsls	r1, r2, #29
    1446:	d004      	beq.n	1452 <__aeabi_ui2f+0x4a>
    1448:	210f      	movs	r1, #15
    144a:	400a      	ands	r2, r1
    144c:	2a04      	cmp	r2, #4
    144e:	d000      	beq.n	1452 <__aeabi_ui2f+0x4a>
    1450:	3404      	adds	r4, #4
    1452:	0162      	lsls	r2, r4, #5
    1454:	d412      	bmi.n	147c <__aeabi_ui2f+0x74>
    1456:	01a4      	lsls	r4, r4, #6
    1458:	0a64      	lsrs	r4, r4, #9
    145a:	b2db      	uxtb	r3, r3
    145c:	e7e3      	b.n	1426 <__aeabi_ui2f+0x1e>
    145e:	2300      	movs	r3, #0
    1460:	2400      	movs	r4, #0
    1462:	e7e0      	b.n	1426 <__aeabi_ui2f+0x1e>
    1464:	22b9      	movs	r2, #185	; 0xb9
    1466:	0021      	movs	r1, r4
    1468:	1ad2      	subs	r2, r2, r3
    146a:	4091      	lsls	r1, r2
    146c:	000a      	movs	r2, r1
    146e:	1e51      	subs	r1, r2, #1
    1470:	418a      	sbcs	r2, r1
    1472:	2105      	movs	r1, #5
    1474:	1a09      	subs	r1, r1, r0
    1476:	40cc      	lsrs	r4, r1
    1478:	4314      	orrs	r4, r2
    147a:	e7db      	b.n	1434 <__aeabi_ui2f+0x2c>
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <__aeabi_ui2f+0x88>)
    147e:	401c      	ands	r4, r3
    1480:	239f      	movs	r3, #159	; 0x9f
    1482:	01a4      	lsls	r4, r4, #6
    1484:	1a1b      	subs	r3, r3, r0
    1486:	0a64      	lsrs	r4, r4, #9
    1488:	b2db      	uxtb	r3, r3
    148a:	e7cc      	b.n	1426 <__aeabi_ui2f+0x1e>
    148c:	0022      	movs	r2, r4
    148e:	e7d7      	b.n	1440 <__aeabi_ui2f+0x38>
    1490:	fbffffff 	.word	0xfbffffff

00001494 <__aeabi_dmul>:
    1494:	b5f0      	push	{r4, r5, r6, r7, lr}
    1496:	4657      	mov	r7, sl
    1498:	4645      	mov	r5, r8
    149a:	46de      	mov	lr, fp
    149c:	464e      	mov	r6, r9
    149e:	b5e0      	push	{r5, r6, r7, lr}
    14a0:	030c      	lsls	r4, r1, #12
    14a2:	4698      	mov	r8, r3
    14a4:	004e      	lsls	r6, r1, #1
    14a6:	0b23      	lsrs	r3, r4, #12
    14a8:	b087      	sub	sp, #28
    14aa:	0007      	movs	r7, r0
    14ac:	4692      	mov	sl, r2
    14ae:	469b      	mov	fp, r3
    14b0:	0d76      	lsrs	r6, r6, #21
    14b2:	0fcd      	lsrs	r5, r1, #31
    14b4:	2e00      	cmp	r6, #0
    14b6:	d06b      	beq.n	1590 <__aeabi_dmul+0xfc>
    14b8:	4b6d      	ldr	r3, [pc, #436]	; (1670 <__aeabi_dmul+0x1dc>)
    14ba:	429e      	cmp	r6, r3
    14bc:	d035      	beq.n	152a <__aeabi_dmul+0x96>
    14be:	2480      	movs	r4, #128	; 0x80
    14c0:	465b      	mov	r3, fp
    14c2:	0f42      	lsrs	r2, r0, #29
    14c4:	0424      	lsls	r4, r4, #16
    14c6:	00db      	lsls	r3, r3, #3
    14c8:	4314      	orrs	r4, r2
    14ca:	431c      	orrs	r4, r3
    14cc:	00c3      	lsls	r3, r0, #3
    14ce:	4699      	mov	r9, r3
    14d0:	4b68      	ldr	r3, [pc, #416]	; (1674 <__aeabi_dmul+0x1e0>)
    14d2:	46a3      	mov	fp, r4
    14d4:	469c      	mov	ip, r3
    14d6:	2300      	movs	r3, #0
    14d8:	2700      	movs	r7, #0
    14da:	4466      	add	r6, ip
    14dc:	9302      	str	r3, [sp, #8]
    14de:	4643      	mov	r3, r8
    14e0:	031c      	lsls	r4, r3, #12
    14e2:	005a      	lsls	r2, r3, #1
    14e4:	0fdb      	lsrs	r3, r3, #31
    14e6:	4650      	mov	r0, sl
    14e8:	0b24      	lsrs	r4, r4, #12
    14ea:	0d52      	lsrs	r2, r2, #21
    14ec:	4698      	mov	r8, r3
    14ee:	d100      	bne.n	14f2 <__aeabi_dmul+0x5e>
    14f0:	e076      	b.n	15e0 <__aeabi_dmul+0x14c>
    14f2:	4b5f      	ldr	r3, [pc, #380]	; (1670 <__aeabi_dmul+0x1dc>)
    14f4:	429a      	cmp	r2, r3
    14f6:	d06d      	beq.n	15d4 <__aeabi_dmul+0x140>
    14f8:	2380      	movs	r3, #128	; 0x80
    14fa:	0f41      	lsrs	r1, r0, #29
    14fc:	041b      	lsls	r3, r3, #16
    14fe:	430b      	orrs	r3, r1
    1500:	495c      	ldr	r1, [pc, #368]	; (1674 <__aeabi_dmul+0x1e0>)
    1502:	00e4      	lsls	r4, r4, #3
    1504:	468c      	mov	ip, r1
    1506:	431c      	orrs	r4, r3
    1508:	00c3      	lsls	r3, r0, #3
    150a:	2000      	movs	r0, #0
    150c:	4462      	add	r2, ip
    150e:	4641      	mov	r1, r8
    1510:	18b6      	adds	r6, r6, r2
    1512:	4069      	eors	r1, r5
    1514:	1c72      	adds	r2, r6, #1
    1516:	9101      	str	r1, [sp, #4]
    1518:	4694      	mov	ip, r2
    151a:	4307      	orrs	r7, r0
    151c:	2f0f      	cmp	r7, #15
    151e:	d900      	bls.n	1522 <__aeabi_dmul+0x8e>
    1520:	e0b0      	b.n	1684 <__aeabi_dmul+0x1f0>
    1522:	4a55      	ldr	r2, [pc, #340]	; (1678 <__aeabi_dmul+0x1e4>)
    1524:	00bf      	lsls	r7, r7, #2
    1526:	59d2      	ldr	r2, [r2, r7]
    1528:	4697      	mov	pc, r2
    152a:	465b      	mov	r3, fp
    152c:	4303      	orrs	r3, r0
    152e:	4699      	mov	r9, r3
    1530:	d000      	beq.n	1534 <__aeabi_dmul+0xa0>
    1532:	e087      	b.n	1644 <__aeabi_dmul+0x1b0>
    1534:	2300      	movs	r3, #0
    1536:	469b      	mov	fp, r3
    1538:	3302      	adds	r3, #2
    153a:	2708      	movs	r7, #8
    153c:	9302      	str	r3, [sp, #8]
    153e:	e7ce      	b.n	14de <__aeabi_dmul+0x4a>
    1540:	4642      	mov	r2, r8
    1542:	9201      	str	r2, [sp, #4]
    1544:	2802      	cmp	r0, #2
    1546:	d067      	beq.n	1618 <__aeabi_dmul+0x184>
    1548:	2803      	cmp	r0, #3
    154a:	d100      	bne.n	154e <__aeabi_dmul+0xba>
    154c:	e20e      	b.n	196c <__aeabi_dmul+0x4d8>
    154e:	2801      	cmp	r0, #1
    1550:	d000      	beq.n	1554 <__aeabi_dmul+0xc0>
    1552:	e162      	b.n	181a <__aeabi_dmul+0x386>
    1554:	2300      	movs	r3, #0
    1556:	2400      	movs	r4, #0
    1558:	2200      	movs	r2, #0
    155a:	4699      	mov	r9, r3
    155c:	9901      	ldr	r1, [sp, #4]
    155e:	4001      	ands	r1, r0
    1560:	b2cd      	uxtb	r5, r1
    1562:	2100      	movs	r1, #0
    1564:	0312      	lsls	r2, r2, #12
    1566:	0d0b      	lsrs	r3, r1, #20
    1568:	0b12      	lsrs	r2, r2, #12
    156a:	051b      	lsls	r3, r3, #20
    156c:	4313      	orrs	r3, r2
    156e:	4a43      	ldr	r2, [pc, #268]	; (167c <__aeabi_dmul+0x1e8>)
    1570:	0524      	lsls	r4, r4, #20
    1572:	4013      	ands	r3, r2
    1574:	431c      	orrs	r4, r3
    1576:	0064      	lsls	r4, r4, #1
    1578:	07ed      	lsls	r5, r5, #31
    157a:	0864      	lsrs	r4, r4, #1
    157c:	432c      	orrs	r4, r5
    157e:	4648      	mov	r0, r9
    1580:	0021      	movs	r1, r4
    1582:	b007      	add	sp, #28
    1584:	bc3c      	pop	{r2, r3, r4, r5}
    1586:	4690      	mov	r8, r2
    1588:	4699      	mov	r9, r3
    158a:	46a2      	mov	sl, r4
    158c:	46ab      	mov	fp, r5
    158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1590:	4303      	orrs	r3, r0
    1592:	4699      	mov	r9, r3
    1594:	d04f      	beq.n	1636 <__aeabi_dmul+0x1a2>
    1596:	465b      	mov	r3, fp
    1598:	2b00      	cmp	r3, #0
    159a:	d100      	bne.n	159e <__aeabi_dmul+0x10a>
    159c:	e189      	b.n	18b2 <__aeabi_dmul+0x41e>
    159e:	4658      	mov	r0, fp
    15a0:	f000 fb16 	bl	1bd0 <__clzsi2>
    15a4:	0003      	movs	r3, r0
    15a6:	3b0b      	subs	r3, #11
    15a8:	2b1c      	cmp	r3, #28
    15aa:	dd00      	ble.n	15ae <__aeabi_dmul+0x11a>
    15ac:	e17a      	b.n	18a4 <__aeabi_dmul+0x410>
    15ae:	221d      	movs	r2, #29
    15b0:	1ad3      	subs	r3, r2, r3
    15b2:	003a      	movs	r2, r7
    15b4:	0001      	movs	r1, r0
    15b6:	465c      	mov	r4, fp
    15b8:	40da      	lsrs	r2, r3
    15ba:	3908      	subs	r1, #8
    15bc:	408c      	lsls	r4, r1
    15be:	0013      	movs	r3, r2
    15c0:	408f      	lsls	r7, r1
    15c2:	4323      	orrs	r3, r4
    15c4:	469b      	mov	fp, r3
    15c6:	46b9      	mov	r9, r7
    15c8:	2300      	movs	r3, #0
    15ca:	4e2d      	ldr	r6, [pc, #180]	; (1680 <__aeabi_dmul+0x1ec>)
    15cc:	2700      	movs	r7, #0
    15ce:	1a36      	subs	r6, r6, r0
    15d0:	9302      	str	r3, [sp, #8]
    15d2:	e784      	b.n	14de <__aeabi_dmul+0x4a>
    15d4:	4653      	mov	r3, sl
    15d6:	4323      	orrs	r3, r4
    15d8:	d12a      	bne.n	1630 <__aeabi_dmul+0x19c>
    15da:	2400      	movs	r4, #0
    15dc:	2002      	movs	r0, #2
    15de:	e796      	b.n	150e <__aeabi_dmul+0x7a>
    15e0:	4653      	mov	r3, sl
    15e2:	4323      	orrs	r3, r4
    15e4:	d020      	beq.n	1628 <__aeabi_dmul+0x194>
    15e6:	2c00      	cmp	r4, #0
    15e8:	d100      	bne.n	15ec <__aeabi_dmul+0x158>
    15ea:	e157      	b.n	189c <__aeabi_dmul+0x408>
    15ec:	0020      	movs	r0, r4
    15ee:	f000 faef 	bl	1bd0 <__clzsi2>
    15f2:	0003      	movs	r3, r0
    15f4:	3b0b      	subs	r3, #11
    15f6:	2b1c      	cmp	r3, #28
    15f8:	dd00      	ble.n	15fc <__aeabi_dmul+0x168>
    15fa:	e149      	b.n	1890 <__aeabi_dmul+0x3fc>
    15fc:	211d      	movs	r1, #29
    15fe:	1acb      	subs	r3, r1, r3
    1600:	4651      	mov	r1, sl
    1602:	0002      	movs	r2, r0
    1604:	40d9      	lsrs	r1, r3
    1606:	4653      	mov	r3, sl
    1608:	3a08      	subs	r2, #8
    160a:	4094      	lsls	r4, r2
    160c:	4093      	lsls	r3, r2
    160e:	430c      	orrs	r4, r1
    1610:	4a1b      	ldr	r2, [pc, #108]	; (1680 <__aeabi_dmul+0x1ec>)
    1612:	1a12      	subs	r2, r2, r0
    1614:	2000      	movs	r0, #0
    1616:	e77a      	b.n	150e <__aeabi_dmul+0x7a>
    1618:	2501      	movs	r5, #1
    161a:	9b01      	ldr	r3, [sp, #4]
    161c:	4c14      	ldr	r4, [pc, #80]	; (1670 <__aeabi_dmul+0x1dc>)
    161e:	401d      	ands	r5, r3
    1620:	2300      	movs	r3, #0
    1622:	2200      	movs	r2, #0
    1624:	4699      	mov	r9, r3
    1626:	e79c      	b.n	1562 <__aeabi_dmul+0xce>
    1628:	2400      	movs	r4, #0
    162a:	2200      	movs	r2, #0
    162c:	2001      	movs	r0, #1
    162e:	e76e      	b.n	150e <__aeabi_dmul+0x7a>
    1630:	4653      	mov	r3, sl
    1632:	2003      	movs	r0, #3
    1634:	e76b      	b.n	150e <__aeabi_dmul+0x7a>
    1636:	2300      	movs	r3, #0
    1638:	469b      	mov	fp, r3
    163a:	3301      	adds	r3, #1
    163c:	2704      	movs	r7, #4
    163e:	2600      	movs	r6, #0
    1640:	9302      	str	r3, [sp, #8]
    1642:	e74c      	b.n	14de <__aeabi_dmul+0x4a>
    1644:	2303      	movs	r3, #3
    1646:	4681      	mov	r9, r0
    1648:	270c      	movs	r7, #12
    164a:	9302      	str	r3, [sp, #8]
    164c:	e747      	b.n	14de <__aeabi_dmul+0x4a>
    164e:	2280      	movs	r2, #128	; 0x80
    1650:	2300      	movs	r3, #0
    1652:	2500      	movs	r5, #0
    1654:	0312      	lsls	r2, r2, #12
    1656:	4699      	mov	r9, r3
    1658:	4c05      	ldr	r4, [pc, #20]	; (1670 <__aeabi_dmul+0x1dc>)
    165a:	e782      	b.n	1562 <__aeabi_dmul+0xce>
    165c:	465c      	mov	r4, fp
    165e:	464b      	mov	r3, r9
    1660:	9802      	ldr	r0, [sp, #8]
    1662:	e76f      	b.n	1544 <__aeabi_dmul+0xb0>
    1664:	465c      	mov	r4, fp
    1666:	464b      	mov	r3, r9
    1668:	9501      	str	r5, [sp, #4]
    166a:	9802      	ldr	r0, [sp, #8]
    166c:	e76a      	b.n	1544 <__aeabi_dmul+0xb0>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	000007ff 	.word	0x000007ff
    1674:	fffffc01 	.word	0xfffffc01
    1678:	00002004 	.word	0x00002004
    167c:	800fffff 	.word	0x800fffff
    1680:	fffffc0d 	.word	0xfffffc0d
    1684:	464a      	mov	r2, r9
    1686:	4649      	mov	r1, r9
    1688:	0c17      	lsrs	r7, r2, #16
    168a:	0c1a      	lsrs	r2, r3, #16
    168c:	041b      	lsls	r3, r3, #16
    168e:	0c1b      	lsrs	r3, r3, #16
    1690:	0408      	lsls	r0, r1, #16
    1692:	0019      	movs	r1, r3
    1694:	0c00      	lsrs	r0, r0, #16
    1696:	4341      	muls	r1, r0
    1698:	0015      	movs	r5, r2
    169a:	4688      	mov	r8, r1
    169c:	0019      	movs	r1, r3
    169e:	437d      	muls	r5, r7
    16a0:	4379      	muls	r1, r7
    16a2:	9503      	str	r5, [sp, #12]
    16a4:	4689      	mov	r9, r1
    16a6:	0029      	movs	r1, r5
    16a8:	0015      	movs	r5, r2
    16aa:	4345      	muls	r5, r0
    16ac:	444d      	add	r5, r9
    16ae:	9502      	str	r5, [sp, #8]
    16b0:	4645      	mov	r5, r8
    16b2:	0c2d      	lsrs	r5, r5, #16
    16b4:	46aa      	mov	sl, r5
    16b6:	9d02      	ldr	r5, [sp, #8]
    16b8:	4455      	add	r5, sl
    16ba:	45a9      	cmp	r9, r5
    16bc:	d906      	bls.n	16cc <__aeabi_dmul+0x238>
    16be:	468a      	mov	sl, r1
    16c0:	2180      	movs	r1, #128	; 0x80
    16c2:	0249      	lsls	r1, r1, #9
    16c4:	4689      	mov	r9, r1
    16c6:	44ca      	add	sl, r9
    16c8:	4651      	mov	r1, sl
    16ca:	9103      	str	r1, [sp, #12]
    16cc:	0c29      	lsrs	r1, r5, #16
    16ce:	9104      	str	r1, [sp, #16]
    16d0:	4641      	mov	r1, r8
    16d2:	0409      	lsls	r1, r1, #16
    16d4:	042d      	lsls	r5, r5, #16
    16d6:	0c09      	lsrs	r1, r1, #16
    16d8:	4688      	mov	r8, r1
    16da:	0029      	movs	r1, r5
    16dc:	0c25      	lsrs	r5, r4, #16
    16de:	0424      	lsls	r4, r4, #16
    16e0:	4441      	add	r1, r8
    16e2:	0c24      	lsrs	r4, r4, #16
    16e4:	9105      	str	r1, [sp, #20]
    16e6:	0021      	movs	r1, r4
    16e8:	4341      	muls	r1, r0
    16ea:	4688      	mov	r8, r1
    16ec:	0021      	movs	r1, r4
    16ee:	4379      	muls	r1, r7
    16f0:	468a      	mov	sl, r1
    16f2:	4368      	muls	r0, r5
    16f4:	4641      	mov	r1, r8
    16f6:	4450      	add	r0, sl
    16f8:	4681      	mov	r9, r0
    16fa:	0c08      	lsrs	r0, r1, #16
    16fc:	4448      	add	r0, r9
    16fe:	436f      	muls	r7, r5
    1700:	4582      	cmp	sl, r0
    1702:	d903      	bls.n	170c <__aeabi_dmul+0x278>
    1704:	2180      	movs	r1, #128	; 0x80
    1706:	0249      	lsls	r1, r1, #9
    1708:	4689      	mov	r9, r1
    170a:	444f      	add	r7, r9
    170c:	0c01      	lsrs	r1, r0, #16
    170e:	4689      	mov	r9, r1
    1710:	0039      	movs	r1, r7
    1712:	4449      	add	r1, r9
    1714:	9102      	str	r1, [sp, #8]
    1716:	4641      	mov	r1, r8
    1718:	040f      	lsls	r7, r1, #16
    171a:	9904      	ldr	r1, [sp, #16]
    171c:	0c3f      	lsrs	r7, r7, #16
    171e:	4688      	mov	r8, r1
    1720:	0400      	lsls	r0, r0, #16
    1722:	19c0      	adds	r0, r0, r7
    1724:	4480      	add	r8, r0
    1726:	4641      	mov	r1, r8
    1728:	9104      	str	r1, [sp, #16]
    172a:	4659      	mov	r1, fp
    172c:	0c0f      	lsrs	r7, r1, #16
    172e:	0409      	lsls	r1, r1, #16
    1730:	0c09      	lsrs	r1, r1, #16
    1732:	4688      	mov	r8, r1
    1734:	4359      	muls	r1, r3
    1736:	468a      	mov	sl, r1
    1738:	0039      	movs	r1, r7
    173a:	4351      	muls	r1, r2
    173c:	4689      	mov	r9, r1
    173e:	4641      	mov	r1, r8
    1740:	434a      	muls	r2, r1
    1742:	4651      	mov	r1, sl
    1744:	0c09      	lsrs	r1, r1, #16
    1746:	468b      	mov	fp, r1
    1748:	437b      	muls	r3, r7
    174a:	18d2      	adds	r2, r2, r3
    174c:	445a      	add	r2, fp
    174e:	4293      	cmp	r3, r2
    1750:	d903      	bls.n	175a <__aeabi_dmul+0x2c6>
    1752:	2380      	movs	r3, #128	; 0x80
    1754:	025b      	lsls	r3, r3, #9
    1756:	469b      	mov	fp, r3
    1758:	44d9      	add	r9, fp
    175a:	4651      	mov	r1, sl
    175c:	0409      	lsls	r1, r1, #16
    175e:	0c09      	lsrs	r1, r1, #16
    1760:	468a      	mov	sl, r1
    1762:	4641      	mov	r1, r8
    1764:	4361      	muls	r1, r4
    1766:	437c      	muls	r4, r7
    1768:	0c13      	lsrs	r3, r2, #16
    176a:	0412      	lsls	r2, r2, #16
    176c:	444b      	add	r3, r9
    176e:	4452      	add	r2, sl
    1770:	46a1      	mov	r9, r4
    1772:	468a      	mov	sl, r1
    1774:	003c      	movs	r4, r7
    1776:	4641      	mov	r1, r8
    1778:	436c      	muls	r4, r5
    177a:	434d      	muls	r5, r1
    177c:	4651      	mov	r1, sl
    177e:	444d      	add	r5, r9
    1780:	0c0f      	lsrs	r7, r1, #16
    1782:	197d      	adds	r5, r7, r5
    1784:	45a9      	cmp	r9, r5
    1786:	d903      	bls.n	1790 <__aeabi_dmul+0x2fc>
    1788:	2180      	movs	r1, #128	; 0x80
    178a:	0249      	lsls	r1, r1, #9
    178c:	4688      	mov	r8, r1
    178e:	4444      	add	r4, r8
    1790:	9f04      	ldr	r7, [sp, #16]
    1792:	9903      	ldr	r1, [sp, #12]
    1794:	46b8      	mov	r8, r7
    1796:	4441      	add	r1, r8
    1798:	468b      	mov	fp, r1
    179a:	4583      	cmp	fp, r0
    179c:	4180      	sbcs	r0, r0
    179e:	4241      	negs	r1, r0
    17a0:	4688      	mov	r8, r1
    17a2:	4651      	mov	r1, sl
    17a4:	0408      	lsls	r0, r1, #16
    17a6:	042f      	lsls	r7, r5, #16
    17a8:	0c00      	lsrs	r0, r0, #16
    17aa:	183f      	adds	r7, r7, r0
    17ac:	4658      	mov	r0, fp
    17ae:	9902      	ldr	r1, [sp, #8]
    17b0:	1810      	adds	r0, r2, r0
    17b2:	4689      	mov	r9, r1
    17b4:	4290      	cmp	r0, r2
    17b6:	4192      	sbcs	r2, r2
    17b8:	444f      	add	r7, r9
    17ba:	46ba      	mov	sl, r7
    17bc:	4252      	negs	r2, r2
    17be:	4699      	mov	r9, r3
    17c0:	4693      	mov	fp, r2
    17c2:	44c2      	add	sl, r8
    17c4:	44d1      	add	r9, sl
    17c6:	44cb      	add	fp, r9
    17c8:	428f      	cmp	r7, r1
    17ca:	41bf      	sbcs	r7, r7
    17cc:	45c2      	cmp	sl, r8
    17ce:	4189      	sbcs	r1, r1
    17d0:	4599      	cmp	r9, r3
    17d2:	419b      	sbcs	r3, r3
    17d4:	4593      	cmp	fp, r2
    17d6:	4192      	sbcs	r2, r2
    17d8:	427f      	negs	r7, r7
    17da:	4249      	negs	r1, r1
    17dc:	0c2d      	lsrs	r5, r5, #16
    17de:	4252      	negs	r2, r2
    17e0:	430f      	orrs	r7, r1
    17e2:	425b      	negs	r3, r3
    17e4:	4313      	orrs	r3, r2
    17e6:	197f      	adds	r7, r7, r5
    17e8:	18ff      	adds	r7, r7, r3
    17ea:	465b      	mov	r3, fp
    17ec:	193c      	adds	r4, r7, r4
    17ee:	0ddb      	lsrs	r3, r3, #23
    17f0:	9a05      	ldr	r2, [sp, #20]
    17f2:	0264      	lsls	r4, r4, #9
    17f4:	431c      	orrs	r4, r3
    17f6:	0243      	lsls	r3, r0, #9
    17f8:	4313      	orrs	r3, r2
    17fa:	1e5d      	subs	r5, r3, #1
    17fc:	41ab      	sbcs	r3, r5
    17fe:	465a      	mov	r2, fp
    1800:	0dc0      	lsrs	r0, r0, #23
    1802:	4303      	orrs	r3, r0
    1804:	0252      	lsls	r2, r2, #9
    1806:	4313      	orrs	r3, r2
    1808:	01e2      	lsls	r2, r4, #7
    180a:	d556      	bpl.n	18ba <__aeabi_dmul+0x426>
    180c:	2001      	movs	r0, #1
    180e:	085a      	lsrs	r2, r3, #1
    1810:	4003      	ands	r3, r0
    1812:	4313      	orrs	r3, r2
    1814:	07e2      	lsls	r2, r4, #31
    1816:	4313      	orrs	r3, r2
    1818:	0864      	lsrs	r4, r4, #1
    181a:	485a      	ldr	r0, [pc, #360]	; (1984 <__aeabi_dmul+0x4f0>)
    181c:	4460      	add	r0, ip
    181e:	2800      	cmp	r0, #0
    1820:	dd4d      	ble.n	18be <__aeabi_dmul+0x42a>
    1822:	075a      	lsls	r2, r3, #29
    1824:	d009      	beq.n	183a <__aeabi_dmul+0x3a6>
    1826:	220f      	movs	r2, #15
    1828:	401a      	ands	r2, r3
    182a:	2a04      	cmp	r2, #4
    182c:	d005      	beq.n	183a <__aeabi_dmul+0x3a6>
    182e:	1d1a      	adds	r2, r3, #4
    1830:	429a      	cmp	r2, r3
    1832:	419b      	sbcs	r3, r3
    1834:	425b      	negs	r3, r3
    1836:	18e4      	adds	r4, r4, r3
    1838:	0013      	movs	r3, r2
    183a:	01e2      	lsls	r2, r4, #7
    183c:	d504      	bpl.n	1848 <__aeabi_dmul+0x3b4>
    183e:	2080      	movs	r0, #128	; 0x80
    1840:	4a51      	ldr	r2, [pc, #324]	; (1988 <__aeabi_dmul+0x4f4>)
    1842:	00c0      	lsls	r0, r0, #3
    1844:	4014      	ands	r4, r2
    1846:	4460      	add	r0, ip
    1848:	4a50      	ldr	r2, [pc, #320]	; (198c <__aeabi_dmul+0x4f8>)
    184a:	4290      	cmp	r0, r2
    184c:	dd00      	ble.n	1850 <__aeabi_dmul+0x3bc>
    184e:	e6e3      	b.n	1618 <__aeabi_dmul+0x184>
    1850:	2501      	movs	r5, #1
    1852:	08db      	lsrs	r3, r3, #3
    1854:	0762      	lsls	r2, r4, #29
    1856:	431a      	orrs	r2, r3
    1858:	0264      	lsls	r4, r4, #9
    185a:	9b01      	ldr	r3, [sp, #4]
    185c:	4691      	mov	r9, r2
    185e:	0b22      	lsrs	r2, r4, #12
    1860:	0544      	lsls	r4, r0, #21
    1862:	0d64      	lsrs	r4, r4, #21
    1864:	401d      	ands	r5, r3
    1866:	e67c      	b.n	1562 <__aeabi_dmul+0xce>
    1868:	2280      	movs	r2, #128	; 0x80
    186a:	4659      	mov	r1, fp
    186c:	0312      	lsls	r2, r2, #12
    186e:	4211      	tst	r1, r2
    1870:	d008      	beq.n	1884 <__aeabi_dmul+0x3f0>
    1872:	4214      	tst	r4, r2
    1874:	d106      	bne.n	1884 <__aeabi_dmul+0x3f0>
    1876:	4322      	orrs	r2, r4
    1878:	0312      	lsls	r2, r2, #12
    187a:	0b12      	lsrs	r2, r2, #12
    187c:	4645      	mov	r5, r8
    187e:	4699      	mov	r9, r3
    1880:	4c43      	ldr	r4, [pc, #268]	; (1990 <__aeabi_dmul+0x4fc>)
    1882:	e66e      	b.n	1562 <__aeabi_dmul+0xce>
    1884:	465b      	mov	r3, fp
    1886:	431a      	orrs	r2, r3
    1888:	0312      	lsls	r2, r2, #12
    188a:	0b12      	lsrs	r2, r2, #12
    188c:	4c40      	ldr	r4, [pc, #256]	; (1990 <__aeabi_dmul+0x4fc>)
    188e:	e668      	b.n	1562 <__aeabi_dmul+0xce>
    1890:	0003      	movs	r3, r0
    1892:	4654      	mov	r4, sl
    1894:	3b28      	subs	r3, #40	; 0x28
    1896:	409c      	lsls	r4, r3
    1898:	2300      	movs	r3, #0
    189a:	e6b9      	b.n	1610 <__aeabi_dmul+0x17c>
    189c:	f000 f998 	bl	1bd0 <__clzsi2>
    18a0:	3020      	adds	r0, #32
    18a2:	e6a6      	b.n	15f2 <__aeabi_dmul+0x15e>
    18a4:	0003      	movs	r3, r0
    18a6:	3b28      	subs	r3, #40	; 0x28
    18a8:	409f      	lsls	r7, r3
    18aa:	2300      	movs	r3, #0
    18ac:	46bb      	mov	fp, r7
    18ae:	4699      	mov	r9, r3
    18b0:	e68a      	b.n	15c8 <__aeabi_dmul+0x134>
    18b2:	f000 f98d 	bl	1bd0 <__clzsi2>
    18b6:	3020      	adds	r0, #32
    18b8:	e674      	b.n	15a4 <__aeabi_dmul+0x110>
    18ba:	46b4      	mov	ip, r6
    18bc:	e7ad      	b.n	181a <__aeabi_dmul+0x386>
    18be:	2501      	movs	r5, #1
    18c0:	1a2a      	subs	r2, r5, r0
    18c2:	2a38      	cmp	r2, #56	; 0x38
    18c4:	dd06      	ble.n	18d4 <__aeabi_dmul+0x440>
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	2400      	movs	r4, #0
    18ca:	401d      	ands	r5, r3
    18cc:	2300      	movs	r3, #0
    18ce:	2200      	movs	r2, #0
    18d0:	4699      	mov	r9, r3
    18d2:	e646      	b.n	1562 <__aeabi_dmul+0xce>
    18d4:	2a1f      	cmp	r2, #31
    18d6:	dc21      	bgt.n	191c <__aeabi_dmul+0x488>
    18d8:	2520      	movs	r5, #32
    18da:	0020      	movs	r0, r4
    18dc:	1aad      	subs	r5, r5, r2
    18de:	001e      	movs	r6, r3
    18e0:	40ab      	lsls	r3, r5
    18e2:	40a8      	lsls	r0, r5
    18e4:	40d6      	lsrs	r6, r2
    18e6:	1e5d      	subs	r5, r3, #1
    18e8:	41ab      	sbcs	r3, r5
    18ea:	4330      	orrs	r0, r6
    18ec:	4318      	orrs	r0, r3
    18ee:	40d4      	lsrs	r4, r2
    18f0:	0743      	lsls	r3, r0, #29
    18f2:	d009      	beq.n	1908 <__aeabi_dmul+0x474>
    18f4:	230f      	movs	r3, #15
    18f6:	4003      	ands	r3, r0
    18f8:	2b04      	cmp	r3, #4
    18fa:	d005      	beq.n	1908 <__aeabi_dmul+0x474>
    18fc:	0003      	movs	r3, r0
    18fe:	1d18      	adds	r0, r3, #4
    1900:	4298      	cmp	r0, r3
    1902:	419b      	sbcs	r3, r3
    1904:	425b      	negs	r3, r3
    1906:	18e4      	adds	r4, r4, r3
    1908:	0223      	lsls	r3, r4, #8
    190a:	d521      	bpl.n	1950 <__aeabi_dmul+0x4bc>
    190c:	2501      	movs	r5, #1
    190e:	9b01      	ldr	r3, [sp, #4]
    1910:	2401      	movs	r4, #1
    1912:	401d      	ands	r5, r3
    1914:	2300      	movs	r3, #0
    1916:	2200      	movs	r2, #0
    1918:	4699      	mov	r9, r3
    191a:	e622      	b.n	1562 <__aeabi_dmul+0xce>
    191c:	251f      	movs	r5, #31
    191e:	0021      	movs	r1, r4
    1920:	426d      	negs	r5, r5
    1922:	1a28      	subs	r0, r5, r0
    1924:	40c1      	lsrs	r1, r0
    1926:	0008      	movs	r0, r1
    1928:	2a20      	cmp	r2, #32
    192a:	d01d      	beq.n	1968 <__aeabi_dmul+0x4d4>
    192c:	355f      	adds	r5, #95	; 0x5f
    192e:	1aaa      	subs	r2, r5, r2
    1930:	4094      	lsls	r4, r2
    1932:	4323      	orrs	r3, r4
    1934:	1e5c      	subs	r4, r3, #1
    1936:	41a3      	sbcs	r3, r4
    1938:	2507      	movs	r5, #7
    193a:	4303      	orrs	r3, r0
    193c:	401d      	ands	r5, r3
    193e:	2200      	movs	r2, #0
    1940:	2d00      	cmp	r5, #0
    1942:	d009      	beq.n	1958 <__aeabi_dmul+0x4c4>
    1944:	220f      	movs	r2, #15
    1946:	2400      	movs	r4, #0
    1948:	401a      	ands	r2, r3
    194a:	0018      	movs	r0, r3
    194c:	2a04      	cmp	r2, #4
    194e:	d1d6      	bne.n	18fe <__aeabi_dmul+0x46a>
    1950:	0003      	movs	r3, r0
    1952:	0765      	lsls	r5, r4, #29
    1954:	0264      	lsls	r4, r4, #9
    1956:	0b22      	lsrs	r2, r4, #12
    1958:	08db      	lsrs	r3, r3, #3
    195a:	432b      	orrs	r3, r5
    195c:	2501      	movs	r5, #1
    195e:	4699      	mov	r9, r3
    1960:	9b01      	ldr	r3, [sp, #4]
    1962:	2400      	movs	r4, #0
    1964:	401d      	ands	r5, r3
    1966:	e5fc      	b.n	1562 <__aeabi_dmul+0xce>
    1968:	2400      	movs	r4, #0
    196a:	e7e2      	b.n	1932 <__aeabi_dmul+0x49e>
    196c:	2280      	movs	r2, #128	; 0x80
    196e:	2501      	movs	r5, #1
    1970:	0312      	lsls	r2, r2, #12
    1972:	4322      	orrs	r2, r4
    1974:	9901      	ldr	r1, [sp, #4]
    1976:	0312      	lsls	r2, r2, #12
    1978:	0b12      	lsrs	r2, r2, #12
    197a:	400d      	ands	r5, r1
    197c:	4699      	mov	r9, r3
    197e:	4c04      	ldr	r4, [pc, #16]	; (1990 <__aeabi_dmul+0x4fc>)
    1980:	e5ef      	b.n	1562 <__aeabi_dmul+0xce>
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	000003ff 	.word	0x000003ff
    1988:	feffffff 	.word	0xfeffffff
    198c:	000007fe 	.word	0x000007fe
    1990:	000007ff 	.word	0x000007ff

00001994 <__aeabi_i2d>:
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	2800      	cmp	r0, #0
    1998:	d030      	beq.n	19fc <__aeabi_i2d+0x68>
    199a:	17c3      	asrs	r3, r0, #31
    199c:	18c4      	adds	r4, r0, r3
    199e:	405c      	eors	r4, r3
    19a0:	0fc5      	lsrs	r5, r0, #31
    19a2:	0020      	movs	r0, r4
    19a4:	f000 f914 	bl	1bd0 <__clzsi2>
    19a8:	4b17      	ldr	r3, [pc, #92]	; (1a08 <__aeabi_i2d+0x74>)
    19aa:	4a18      	ldr	r2, [pc, #96]	; (1a0c <__aeabi_i2d+0x78>)
    19ac:	1a1b      	subs	r3, r3, r0
    19ae:	1ad2      	subs	r2, r2, r3
    19b0:	2a1f      	cmp	r2, #31
    19b2:	dd18      	ble.n	19e6 <__aeabi_i2d+0x52>
    19b4:	4a16      	ldr	r2, [pc, #88]	; (1a10 <__aeabi_i2d+0x7c>)
    19b6:	1ad2      	subs	r2, r2, r3
    19b8:	4094      	lsls	r4, r2
    19ba:	2200      	movs	r2, #0
    19bc:	0324      	lsls	r4, r4, #12
    19be:	055b      	lsls	r3, r3, #21
    19c0:	0b24      	lsrs	r4, r4, #12
    19c2:	0d5b      	lsrs	r3, r3, #21
    19c4:	2100      	movs	r1, #0
    19c6:	0010      	movs	r0, r2
    19c8:	0324      	lsls	r4, r4, #12
    19ca:	0d0a      	lsrs	r2, r1, #20
    19cc:	0b24      	lsrs	r4, r4, #12
    19ce:	0512      	lsls	r2, r2, #20
    19d0:	4322      	orrs	r2, r4
    19d2:	4c10      	ldr	r4, [pc, #64]	; (1a14 <__aeabi_i2d+0x80>)
    19d4:	051b      	lsls	r3, r3, #20
    19d6:	4022      	ands	r2, r4
    19d8:	4313      	orrs	r3, r2
    19da:	005b      	lsls	r3, r3, #1
    19dc:	07ed      	lsls	r5, r5, #31
    19de:	085b      	lsrs	r3, r3, #1
    19e0:	432b      	orrs	r3, r5
    19e2:	0019      	movs	r1, r3
    19e4:	bd70      	pop	{r4, r5, r6, pc}
    19e6:	0021      	movs	r1, r4
    19e8:	4091      	lsls	r1, r2
    19ea:	000a      	movs	r2, r1
    19ec:	210b      	movs	r1, #11
    19ee:	1a08      	subs	r0, r1, r0
    19f0:	40c4      	lsrs	r4, r0
    19f2:	055b      	lsls	r3, r3, #21
    19f4:	0324      	lsls	r4, r4, #12
    19f6:	0b24      	lsrs	r4, r4, #12
    19f8:	0d5b      	lsrs	r3, r3, #21
    19fa:	e7e3      	b.n	19c4 <__aeabi_i2d+0x30>
    19fc:	2500      	movs	r5, #0
    19fe:	2300      	movs	r3, #0
    1a00:	2400      	movs	r4, #0
    1a02:	2200      	movs	r2, #0
    1a04:	e7de      	b.n	19c4 <__aeabi_i2d+0x30>
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	0000041e 	.word	0x0000041e
    1a0c:	00000433 	.word	0x00000433
    1a10:	00000413 	.word	0x00000413
    1a14:	800fffff 	.word	0x800fffff

00001a18 <__aeabi_f2d>:
    1a18:	0041      	lsls	r1, r0, #1
    1a1a:	0e09      	lsrs	r1, r1, #24
    1a1c:	1c4b      	adds	r3, r1, #1
    1a1e:	b570      	push	{r4, r5, r6, lr}
    1a20:	b2db      	uxtb	r3, r3
    1a22:	0246      	lsls	r6, r0, #9
    1a24:	0a75      	lsrs	r5, r6, #9
    1a26:	0fc4      	lsrs	r4, r0, #31
    1a28:	2b01      	cmp	r3, #1
    1a2a:	dd14      	ble.n	1a56 <__aeabi_f2d+0x3e>
    1a2c:	23e0      	movs	r3, #224	; 0xe0
    1a2e:	009b      	lsls	r3, r3, #2
    1a30:	076d      	lsls	r5, r5, #29
    1a32:	0b36      	lsrs	r6, r6, #12
    1a34:	18cb      	adds	r3, r1, r3
    1a36:	2100      	movs	r1, #0
    1a38:	0d0a      	lsrs	r2, r1, #20
    1a3a:	0028      	movs	r0, r5
    1a3c:	0512      	lsls	r2, r2, #20
    1a3e:	4d1c      	ldr	r5, [pc, #112]	; (1ab0 <__aeabi_f2d+0x98>)
    1a40:	4332      	orrs	r2, r6
    1a42:	055b      	lsls	r3, r3, #21
    1a44:	402a      	ands	r2, r5
    1a46:	085b      	lsrs	r3, r3, #1
    1a48:	4313      	orrs	r3, r2
    1a4a:	005b      	lsls	r3, r3, #1
    1a4c:	07e4      	lsls	r4, r4, #31
    1a4e:	085b      	lsrs	r3, r3, #1
    1a50:	4323      	orrs	r3, r4
    1a52:	0019      	movs	r1, r3
    1a54:	bd70      	pop	{r4, r5, r6, pc}
    1a56:	2900      	cmp	r1, #0
    1a58:	d114      	bne.n	1a84 <__aeabi_f2d+0x6c>
    1a5a:	2d00      	cmp	r5, #0
    1a5c:	d01e      	beq.n	1a9c <__aeabi_f2d+0x84>
    1a5e:	0028      	movs	r0, r5
    1a60:	f000 f8b6 	bl	1bd0 <__clzsi2>
    1a64:	280a      	cmp	r0, #10
    1a66:	dc1c      	bgt.n	1aa2 <__aeabi_f2d+0x8a>
    1a68:	230b      	movs	r3, #11
    1a6a:	002a      	movs	r2, r5
    1a6c:	1a1b      	subs	r3, r3, r0
    1a6e:	40da      	lsrs	r2, r3
    1a70:	0003      	movs	r3, r0
    1a72:	3315      	adds	r3, #21
    1a74:	409d      	lsls	r5, r3
    1a76:	4b0f      	ldr	r3, [pc, #60]	; (1ab4 <__aeabi_f2d+0x9c>)
    1a78:	0312      	lsls	r2, r2, #12
    1a7a:	1a1b      	subs	r3, r3, r0
    1a7c:	055b      	lsls	r3, r3, #21
    1a7e:	0b16      	lsrs	r6, r2, #12
    1a80:	0d5b      	lsrs	r3, r3, #21
    1a82:	e7d8      	b.n	1a36 <__aeabi_f2d+0x1e>
    1a84:	2d00      	cmp	r5, #0
    1a86:	d006      	beq.n	1a96 <__aeabi_f2d+0x7e>
    1a88:	0b32      	lsrs	r2, r6, #12
    1a8a:	2680      	movs	r6, #128	; 0x80
    1a8c:	0336      	lsls	r6, r6, #12
    1a8e:	076d      	lsls	r5, r5, #29
    1a90:	4316      	orrs	r6, r2
    1a92:	4b09      	ldr	r3, [pc, #36]	; (1ab8 <__aeabi_f2d+0xa0>)
    1a94:	e7cf      	b.n	1a36 <__aeabi_f2d+0x1e>
    1a96:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <__aeabi_f2d+0xa0>)
    1a98:	2600      	movs	r6, #0
    1a9a:	e7cc      	b.n	1a36 <__aeabi_f2d+0x1e>
    1a9c:	2300      	movs	r3, #0
    1a9e:	2600      	movs	r6, #0
    1aa0:	e7c9      	b.n	1a36 <__aeabi_f2d+0x1e>
    1aa2:	0003      	movs	r3, r0
    1aa4:	002a      	movs	r2, r5
    1aa6:	3b0b      	subs	r3, #11
    1aa8:	409a      	lsls	r2, r3
    1aaa:	2500      	movs	r5, #0
    1aac:	e7e3      	b.n	1a76 <__aeabi_f2d+0x5e>
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	800fffff 	.word	0x800fffff
    1ab4:	00000389 	.word	0x00000389
    1ab8:	000007ff 	.word	0x000007ff

00001abc <__aeabi_d2f>:
    1abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1abe:	004c      	lsls	r4, r1, #1
    1ac0:	0d64      	lsrs	r4, r4, #21
    1ac2:	030b      	lsls	r3, r1, #12
    1ac4:	1c62      	adds	r2, r4, #1
    1ac6:	0f45      	lsrs	r5, r0, #29
    1ac8:	0a5b      	lsrs	r3, r3, #9
    1aca:	0552      	lsls	r2, r2, #21
    1acc:	432b      	orrs	r3, r5
    1ace:	0fc9      	lsrs	r1, r1, #31
    1ad0:	00c5      	lsls	r5, r0, #3
    1ad2:	0d52      	lsrs	r2, r2, #21
    1ad4:	2a01      	cmp	r2, #1
    1ad6:	dd28      	ble.n	1b2a <__aeabi_d2f+0x6e>
    1ad8:	4a3a      	ldr	r2, [pc, #232]	; (1bc4 <__aeabi_d2f+0x108>)
    1ada:	18a6      	adds	r6, r4, r2
    1adc:	2efe      	cmp	r6, #254	; 0xfe
    1ade:	dc1b      	bgt.n	1b18 <__aeabi_d2f+0x5c>
    1ae0:	2e00      	cmp	r6, #0
    1ae2:	dd3e      	ble.n	1b62 <__aeabi_d2f+0xa6>
    1ae4:	0180      	lsls	r0, r0, #6
    1ae6:	0002      	movs	r2, r0
    1ae8:	1e50      	subs	r0, r2, #1
    1aea:	4182      	sbcs	r2, r0
    1aec:	0f6d      	lsrs	r5, r5, #29
    1aee:	432a      	orrs	r2, r5
    1af0:	00db      	lsls	r3, r3, #3
    1af2:	4313      	orrs	r3, r2
    1af4:	075a      	lsls	r2, r3, #29
    1af6:	d004      	beq.n	1b02 <__aeabi_d2f+0x46>
    1af8:	220f      	movs	r2, #15
    1afa:	401a      	ands	r2, r3
    1afc:	2a04      	cmp	r2, #4
    1afe:	d000      	beq.n	1b02 <__aeabi_d2f+0x46>
    1b00:	3304      	adds	r3, #4
    1b02:	2280      	movs	r2, #128	; 0x80
    1b04:	04d2      	lsls	r2, r2, #19
    1b06:	401a      	ands	r2, r3
    1b08:	d05a      	beq.n	1bc0 <__aeabi_d2f+0x104>
    1b0a:	3601      	adds	r6, #1
    1b0c:	2eff      	cmp	r6, #255	; 0xff
    1b0e:	d003      	beq.n	1b18 <__aeabi_d2f+0x5c>
    1b10:	019b      	lsls	r3, r3, #6
    1b12:	0a5b      	lsrs	r3, r3, #9
    1b14:	b2f4      	uxtb	r4, r6
    1b16:	e001      	b.n	1b1c <__aeabi_d2f+0x60>
    1b18:	24ff      	movs	r4, #255	; 0xff
    1b1a:	2300      	movs	r3, #0
    1b1c:	0258      	lsls	r0, r3, #9
    1b1e:	05e4      	lsls	r4, r4, #23
    1b20:	0a40      	lsrs	r0, r0, #9
    1b22:	07c9      	lsls	r1, r1, #31
    1b24:	4320      	orrs	r0, r4
    1b26:	4308      	orrs	r0, r1
    1b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b2a:	2c00      	cmp	r4, #0
    1b2c:	d007      	beq.n	1b3e <__aeabi_d2f+0x82>
    1b2e:	431d      	orrs	r5, r3
    1b30:	d0f2      	beq.n	1b18 <__aeabi_d2f+0x5c>
    1b32:	2080      	movs	r0, #128	; 0x80
    1b34:	00db      	lsls	r3, r3, #3
    1b36:	0480      	lsls	r0, r0, #18
    1b38:	4303      	orrs	r3, r0
    1b3a:	26ff      	movs	r6, #255	; 0xff
    1b3c:	e7da      	b.n	1af4 <__aeabi_d2f+0x38>
    1b3e:	432b      	orrs	r3, r5
    1b40:	d003      	beq.n	1b4a <__aeabi_d2f+0x8e>
    1b42:	2305      	movs	r3, #5
    1b44:	08db      	lsrs	r3, r3, #3
    1b46:	2cff      	cmp	r4, #255	; 0xff
    1b48:	d003      	beq.n	1b52 <__aeabi_d2f+0x96>
    1b4a:	025b      	lsls	r3, r3, #9
    1b4c:	0a5b      	lsrs	r3, r3, #9
    1b4e:	b2e4      	uxtb	r4, r4
    1b50:	e7e4      	b.n	1b1c <__aeabi_d2f+0x60>
    1b52:	2b00      	cmp	r3, #0
    1b54:	d032      	beq.n	1bbc <__aeabi_d2f+0x100>
    1b56:	2080      	movs	r0, #128	; 0x80
    1b58:	03c0      	lsls	r0, r0, #15
    1b5a:	4303      	orrs	r3, r0
    1b5c:	025b      	lsls	r3, r3, #9
    1b5e:	0a5b      	lsrs	r3, r3, #9
    1b60:	e7dc      	b.n	1b1c <__aeabi_d2f+0x60>
    1b62:	0032      	movs	r2, r6
    1b64:	3217      	adds	r2, #23
    1b66:	db14      	blt.n	1b92 <__aeabi_d2f+0xd6>
    1b68:	2280      	movs	r2, #128	; 0x80
    1b6a:	271e      	movs	r7, #30
    1b6c:	0412      	lsls	r2, r2, #16
    1b6e:	4313      	orrs	r3, r2
    1b70:	1bbf      	subs	r7, r7, r6
    1b72:	2f1f      	cmp	r7, #31
    1b74:	dc0f      	bgt.n	1b96 <__aeabi_d2f+0xda>
    1b76:	4a14      	ldr	r2, [pc, #80]	; (1bc8 <__aeabi_d2f+0x10c>)
    1b78:	4694      	mov	ip, r2
    1b7a:	4464      	add	r4, ip
    1b7c:	002a      	movs	r2, r5
    1b7e:	40a5      	lsls	r5, r4
    1b80:	002e      	movs	r6, r5
    1b82:	40a3      	lsls	r3, r4
    1b84:	1e75      	subs	r5, r6, #1
    1b86:	41ae      	sbcs	r6, r5
    1b88:	40fa      	lsrs	r2, r7
    1b8a:	4333      	orrs	r3, r6
    1b8c:	4313      	orrs	r3, r2
    1b8e:	2600      	movs	r6, #0
    1b90:	e7b0      	b.n	1af4 <__aeabi_d2f+0x38>
    1b92:	2400      	movs	r4, #0
    1b94:	e7d5      	b.n	1b42 <__aeabi_d2f+0x86>
    1b96:	2202      	movs	r2, #2
    1b98:	4252      	negs	r2, r2
    1b9a:	1b96      	subs	r6, r2, r6
    1b9c:	001a      	movs	r2, r3
    1b9e:	40f2      	lsrs	r2, r6
    1ba0:	2f20      	cmp	r7, #32
    1ba2:	d009      	beq.n	1bb8 <__aeabi_d2f+0xfc>
    1ba4:	4809      	ldr	r0, [pc, #36]	; (1bcc <__aeabi_d2f+0x110>)
    1ba6:	4684      	mov	ip, r0
    1ba8:	4464      	add	r4, ip
    1baa:	40a3      	lsls	r3, r4
    1bac:	432b      	orrs	r3, r5
    1bae:	1e5d      	subs	r5, r3, #1
    1bb0:	41ab      	sbcs	r3, r5
    1bb2:	2600      	movs	r6, #0
    1bb4:	4313      	orrs	r3, r2
    1bb6:	e79d      	b.n	1af4 <__aeabi_d2f+0x38>
    1bb8:	2300      	movs	r3, #0
    1bba:	e7f7      	b.n	1bac <__aeabi_d2f+0xf0>
    1bbc:	2300      	movs	r3, #0
    1bbe:	e7ad      	b.n	1b1c <__aeabi_d2f+0x60>
    1bc0:	0034      	movs	r4, r6
    1bc2:	e7bf      	b.n	1b44 <__aeabi_d2f+0x88>
    1bc4:	fffffc80 	.word	0xfffffc80
    1bc8:	fffffc82 	.word	0xfffffc82
    1bcc:	fffffca2 	.word	0xfffffca2

00001bd0 <__clzsi2>:
    1bd0:	211c      	movs	r1, #28
    1bd2:	2301      	movs	r3, #1
    1bd4:	041b      	lsls	r3, r3, #16
    1bd6:	4298      	cmp	r0, r3
    1bd8:	d301      	bcc.n	1bde <__clzsi2+0xe>
    1bda:	0c00      	lsrs	r0, r0, #16
    1bdc:	3910      	subs	r1, #16
    1bde:	0a1b      	lsrs	r3, r3, #8
    1be0:	4298      	cmp	r0, r3
    1be2:	d301      	bcc.n	1be8 <__clzsi2+0x18>
    1be4:	0a00      	lsrs	r0, r0, #8
    1be6:	3908      	subs	r1, #8
    1be8:	091b      	lsrs	r3, r3, #4
    1bea:	4298      	cmp	r0, r3
    1bec:	d301      	bcc.n	1bf2 <__clzsi2+0x22>
    1bee:	0900      	lsrs	r0, r0, #4
    1bf0:	3904      	subs	r1, #4
    1bf2:	a202      	add	r2, pc, #8	; (adr r2, 1bfc <__clzsi2+0x2c>)
    1bf4:	5c10      	ldrb	r0, [r2, r0]
    1bf6:	1840      	adds	r0, r0, r1
    1bf8:	4770      	bx	lr
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	02020304 	.word	0x02020304
    1c00:	01010101 	.word	0x01010101
	...

00001c0c <__libc_init_array>:
    1c0c:	b570      	push	{r4, r5, r6, lr}
    1c0e:	4e0d      	ldr	r6, [pc, #52]	; (1c44 <__libc_init_array+0x38>)
    1c10:	4d0d      	ldr	r5, [pc, #52]	; (1c48 <__libc_init_array+0x3c>)
    1c12:	2400      	movs	r4, #0
    1c14:	1bad      	subs	r5, r5, r6
    1c16:	10ad      	asrs	r5, r5, #2
    1c18:	d005      	beq.n	1c26 <__libc_init_array+0x1a>
    1c1a:	00a3      	lsls	r3, r4, #2
    1c1c:	58f3      	ldr	r3, [r6, r3]
    1c1e:	3401      	adds	r4, #1
    1c20:	4798      	blx	r3
    1c22:	42a5      	cmp	r5, r4
    1c24:	d1f9      	bne.n	1c1a <__libc_init_array+0xe>
    1c26:	f000 fa0f 	bl	2048 <_init>
    1c2a:	4e08      	ldr	r6, [pc, #32]	; (1c4c <__libc_init_array+0x40>)
    1c2c:	4d08      	ldr	r5, [pc, #32]	; (1c50 <__libc_init_array+0x44>)
    1c2e:	2400      	movs	r4, #0
    1c30:	1bad      	subs	r5, r5, r6
    1c32:	10ad      	asrs	r5, r5, #2
    1c34:	d005      	beq.n	1c42 <__libc_init_array+0x36>
    1c36:	00a3      	lsls	r3, r4, #2
    1c38:	58f3      	ldr	r3, [r6, r3]
    1c3a:	3401      	adds	r4, #1
    1c3c:	4798      	blx	r3
    1c3e:	42a5      	cmp	r5, r4
    1c40:	d1f9      	bne.n	1c36 <__libc_init_array+0x2a>
    1c42:	bd70      	pop	{r4, r5, r6, pc}
    1c44:	00002054 	.word	0x00002054
    1c48:	00002054 	.word	0x00002054
    1c4c:	00002054 	.word	0x00002054
    1c50:	0000205c 	.word	0x0000205c

00001c54 <memset>:
    1c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c56:	0783      	lsls	r3, r0, #30
    1c58:	d043      	beq.n	1ce2 <memset+0x8e>
    1c5a:	1e54      	subs	r4, r2, #1
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	d03f      	beq.n	1ce0 <memset+0x8c>
    1c60:	b2ce      	uxtb	r6, r1
    1c62:	0002      	movs	r2, r0
    1c64:	2503      	movs	r5, #3
    1c66:	e002      	b.n	1c6e <memset+0x1a>
    1c68:	001a      	movs	r2, r3
    1c6a:	3c01      	subs	r4, #1
    1c6c:	d338      	bcc.n	1ce0 <memset+0x8c>
    1c6e:	1c53      	adds	r3, r2, #1
    1c70:	7016      	strb	r6, [r2, #0]
    1c72:	422b      	tst	r3, r5
    1c74:	d1f8      	bne.n	1c68 <memset+0x14>
    1c76:	2c03      	cmp	r4, #3
    1c78:	d92a      	bls.n	1cd0 <memset+0x7c>
    1c7a:	22ff      	movs	r2, #255	; 0xff
    1c7c:	400a      	ands	r2, r1
    1c7e:	0215      	lsls	r5, r2, #8
    1c80:	4315      	orrs	r5, r2
    1c82:	042a      	lsls	r2, r5, #16
    1c84:	4315      	orrs	r5, r2
    1c86:	2c0f      	cmp	r4, #15
    1c88:	d914      	bls.n	1cb4 <memset+0x60>
    1c8a:	0027      	movs	r7, r4
    1c8c:	001a      	movs	r2, r3
    1c8e:	3f10      	subs	r7, #16
    1c90:	093e      	lsrs	r6, r7, #4
    1c92:	3601      	adds	r6, #1
    1c94:	0136      	lsls	r6, r6, #4
    1c96:	199e      	adds	r6, r3, r6
    1c98:	6015      	str	r5, [r2, #0]
    1c9a:	6055      	str	r5, [r2, #4]
    1c9c:	6095      	str	r5, [r2, #8]
    1c9e:	60d5      	str	r5, [r2, #12]
    1ca0:	3210      	adds	r2, #16
    1ca2:	4296      	cmp	r6, r2
    1ca4:	d1f8      	bne.n	1c98 <memset+0x44>
    1ca6:	220f      	movs	r2, #15
    1ca8:	4397      	bics	r7, r2
    1caa:	3710      	adds	r7, #16
    1cac:	19db      	adds	r3, r3, r7
    1cae:	4014      	ands	r4, r2
    1cb0:	2c03      	cmp	r4, #3
    1cb2:	d90d      	bls.n	1cd0 <memset+0x7c>
    1cb4:	001a      	movs	r2, r3
    1cb6:	1f27      	subs	r7, r4, #4
    1cb8:	08be      	lsrs	r6, r7, #2
    1cba:	3601      	adds	r6, #1
    1cbc:	00b6      	lsls	r6, r6, #2
    1cbe:	199e      	adds	r6, r3, r6
    1cc0:	c220      	stmia	r2!, {r5}
    1cc2:	42b2      	cmp	r2, r6
    1cc4:	d1fc      	bne.n	1cc0 <memset+0x6c>
    1cc6:	2203      	movs	r2, #3
    1cc8:	4397      	bics	r7, r2
    1cca:	3704      	adds	r7, #4
    1ccc:	19db      	adds	r3, r3, r7
    1cce:	4014      	ands	r4, r2
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	d005      	beq.n	1ce0 <memset+0x8c>
    1cd4:	b2c9      	uxtb	r1, r1
    1cd6:	191c      	adds	r4, r3, r4
    1cd8:	7019      	strb	r1, [r3, #0]
    1cda:	3301      	adds	r3, #1
    1cdc:	429c      	cmp	r4, r3
    1cde:	d1fb      	bne.n	1cd8 <memset+0x84>
    1ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce2:	0014      	movs	r4, r2
    1ce4:	0003      	movs	r3, r0
    1ce6:	e7c6      	b.n	1c76 <memset+0x22>

00001ce8 <register_fini>:
    1ce8:	4b03      	ldr	r3, [pc, #12]	; (1cf8 <register_fini+0x10>)
    1cea:	b510      	push	{r4, lr}
    1cec:	2b00      	cmp	r3, #0
    1cee:	d002      	beq.n	1cf6 <register_fini+0xe>
    1cf0:	4802      	ldr	r0, [pc, #8]	; (1cfc <register_fini+0x14>)
    1cf2:	f000 f805 	bl	1d00 <atexit>
    1cf6:	bd10      	pop	{r4, pc}
    1cf8:	00000000 	.word	0x00000000
    1cfc:	00001d11 	.word	0x00001d11

00001d00 <atexit>:
    1d00:	b510      	push	{r4, lr}
    1d02:	0001      	movs	r1, r0
    1d04:	2300      	movs	r3, #0
    1d06:	2200      	movs	r2, #0
    1d08:	2000      	movs	r0, #0
    1d0a:	f000 f81b 	bl	1d44 <__register_exitproc>
    1d0e:	bd10      	pop	{r4, pc}

00001d10 <__libc_fini_array>:
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	4b09      	ldr	r3, [pc, #36]	; (1d38 <__libc_fini_array+0x28>)
    1d14:	4c09      	ldr	r4, [pc, #36]	; (1d3c <__libc_fini_array+0x2c>)
    1d16:	1ae4      	subs	r4, r4, r3
    1d18:	10a4      	asrs	r4, r4, #2
    1d1a:	d009      	beq.n	1d30 <__libc_fini_array+0x20>
    1d1c:	4a08      	ldr	r2, [pc, #32]	; (1d40 <__libc_fini_array+0x30>)
    1d1e:	18a5      	adds	r5, r4, r2
    1d20:	00ad      	lsls	r5, r5, #2
    1d22:	18ed      	adds	r5, r5, r3
    1d24:	682b      	ldr	r3, [r5, #0]
    1d26:	3c01      	subs	r4, #1
    1d28:	4798      	blx	r3
    1d2a:	3d04      	subs	r5, #4
    1d2c:	2c00      	cmp	r4, #0
    1d2e:	d1f9      	bne.n	1d24 <__libc_fini_array+0x14>
    1d30:	f000 f994 	bl	205c <_fini>
    1d34:	bd70      	pop	{r4, r5, r6, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	00002068 	.word	0x00002068
    1d3c:	0000206c 	.word	0x0000206c
    1d40:	3fffffff 	.word	0x3fffffff

00001d44 <__register_exitproc>:
    1d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d46:	46de      	mov	lr, fp
    1d48:	469b      	mov	fp, r3
    1d4a:	4b31      	ldr	r3, [pc, #196]	; (1e10 <__register_exitproc+0xcc>)
    1d4c:	4645      	mov	r5, r8
    1d4e:	681c      	ldr	r4, [r3, #0]
    1d50:	23a4      	movs	r3, #164	; 0xa4
    1d52:	464e      	mov	r6, r9
    1d54:	4657      	mov	r7, sl
    1d56:	005b      	lsls	r3, r3, #1
    1d58:	b5e0      	push	{r5, r6, r7, lr}
    1d5a:	0005      	movs	r5, r0
    1d5c:	58e0      	ldr	r0, [r4, r3]
    1d5e:	000e      	movs	r6, r1
    1d60:	4690      	mov	r8, r2
    1d62:	2800      	cmp	r0, #0
    1d64:	d04b      	beq.n	1dfe <__register_exitproc+0xba>
    1d66:	6843      	ldr	r3, [r0, #4]
    1d68:	2b1f      	cmp	r3, #31
    1d6a:	dc0d      	bgt.n	1d88 <__register_exitproc+0x44>
    1d6c:	1c5c      	adds	r4, r3, #1
    1d6e:	2d00      	cmp	r5, #0
    1d70:	d121      	bne.n	1db6 <__register_exitproc+0x72>
    1d72:	3302      	adds	r3, #2
    1d74:	009b      	lsls	r3, r3, #2
    1d76:	6044      	str	r4, [r0, #4]
    1d78:	501e      	str	r6, [r3, r0]
    1d7a:	2000      	movs	r0, #0
    1d7c:	bc3c      	pop	{r2, r3, r4, r5}
    1d7e:	4690      	mov	r8, r2
    1d80:	4699      	mov	r9, r3
    1d82:	46a2      	mov	sl, r4
    1d84:	46ab      	mov	fp, r5
    1d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d88:	4b22      	ldr	r3, [pc, #136]	; (1e14 <__register_exitproc+0xd0>)
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d03c      	beq.n	1e08 <__register_exitproc+0xc4>
    1d8e:	20c8      	movs	r0, #200	; 0xc8
    1d90:	0040      	lsls	r0, r0, #1
    1d92:	e000      	b.n	1d96 <__register_exitproc+0x52>
    1d94:	bf00      	nop
    1d96:	2800      	cmp	r0, #0
    1d98:	d036      	beq.n	1e08 <__register_exitproc+0xc4>
    1d9a:	22a4      	movs	r2, #164	; 0xa4
    1d9c:	2300      	movs	r3, #0
    1d9e:	0052      	lsls	r2, r2, #1
    1da0:	58a1      	ldr	r1, [r4, r2]
    1da2:	6043      	str	r3, [r0, #4]
    1da4:	6001      	str	r1, [r0, #0]
    1da6:	50a0      	str	r0, [r4, r2]
    1da8:	3240      	adds	r2, #64	; 0x40
    1daa:	5083      	str	r3, [r0, r2]
    1dac:	3204      	adds	r2, #4
    1dae:	5083      	str	r3, [r0, r2]
    1db0:	2401      	movs	r4, #1
    1db2:	2d00      	cmp	r5, #0
    1db4:	d0dd      	beq.n	1d72 <__register_exitproc+0x2e>
    1db6:	009a      	lsls	r2, r3, #2
    1db8:	4691      	mov	r9, r2
    1dba:	4481      	add	r9, r0
    1dbc:	4642      	mov	r2, r8
    1dbe:	2188      	movs	r1, #136	; 0x88
    1dc0:	464f      	mov	r7, r9
    1dc2:	507a      	str	r2, [r7, r1]
    1dc4:	22c4      	movs	r2, #196	; 0xc4
    1dc6:	0052      	lsls	r2, r2, #1
    1dc8:	4690      	mov	r8, r2
    1dca:	4480      	add	r8, r0
    1dcc:	4642      	mov	r2, r8
    1dce:	3987      	subs	r1, #135	; 0x87
    1dd0:	4099      	lsls	r1, r3
    1dd2:	6812      	ldr	r2, [r2, #0]
    1dd4:	468a      	mov	sl, r1
    1dd6:	430a      	orrs	r2, r1
    1dd8:	4694      	mov	ip, r2
    1dda:	4642      	mov	r2, r8
    1ddc:	4661      	mov	r1, ip
    1dde:	6011      	str	r1, [r2, #0]
    1de0:	2284      	movs	r2, #132	; 0x84
    1de2:	4649      	mov	r1, r9
    1de4:	465f      	mov	r7, fp
    1de6:	0052      	lsls	r2, r2, #1
    1de8:	508f      	str	r7, [r1, r2]
    1dea:	2d02      	cmp	r5, #2
    1dec:	d1c1      	bne.n	1d72 <__register_exitproc+0x2e>
    1dee:	0002      	movs	r2, r0
    1df0:	4655      	mov	r5, sl
    1df2:	328d      	adds	r2, #141	; 0x8d
    1df4:	32ff      	adds	r2, #255	; 0xff
    1df6:	6811      	ldr	r1, [r2, #0]
    1df8:	430d      	orrs	r5, r1
    1dfa:	6015      	str	r5, [r2, #0]
    1dfc:	e7b9      	b.n	1d72 <__register_exitproc+0x2e>
    1dfe:	0020      	movs	r0, r4
    1e00:	304d      	adds	r0, #77	; 0x4d
    1e02:	30ff      	adds	r0, #255	; 0xff
    1e04:	50e0      	str	r0, [r4, r3]
    1e06:	e7ae      	b.n	1d66 <__register_exitproc+0x22>
    1e08:	2001      	movs	r0, #1
    1e0a:	4240      	negs	r0, r0
    1e0c:	e7b6      	b.n	1d7c <__register_exitproc+0x38>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00002044 	.word	0x00002044
    1e14:	00000000 	.word	0x00000000

00001e18 <analogAccelPin>:
    1e18:	07000000 00000007                       ........

00001e20 <spi2MOSI>:
    1e20:	0c000002 00000000                       ........

00001e28 <spi2SCK>:
    1e28:	0e000002 00000000                       ........

00001e30 <spi2MISO>:
    1e30:	0d000002 00000000                       ........

00001e38 <lookupTable.12309>:
    1e38:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1e48:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1e58:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1e68:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1e78:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1e88:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1e98:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1ea8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1eb8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1ec8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1ed8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1ee8:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1ef8:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1f08:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1f18:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1f28:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1f38:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1f48:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1f58:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1f68:	000f048e                                ....

00001f6c <senseBatPin>:
    1f6c:	06000000 00000006                       ........

00001f74 <spi2MOSI>:
    1f74:	0c000002 00000000                       ........

00001f7c <spi2SCK>:
    1f7c:	0e000002 00000000 00001304 000012d4     ................
    1f8c:	000012e6 00001228 000012e6 000012ca     ....(...........
    1f9c:	000012e6 00001228 000012d4 000012d4     ....(...........
    1fac:	000012ca 00001228 00001230 00001230     ....(...0...0...
    1fbc:	00001230 000012ec 000012d4 000012d4     0...............
    1fcc:	000012a8 0000138c 000012a8 000012ca     ................
    1fdc:	000012a8 0000138c 000012d4 000012d4     ................
    1fec:	000012ca 0000138c 00001230 00001230     ........0...0...
    1ffc:	00001230 00001396 00001684 00001544     0...........D...
    200c:	00001544 00001540 0000165c 0000165c     D...@...\...\...
    201c:	0000164e 00001540 0000165c 0000164e     N...@...\...N...
    202c:	0000165c 00001540 00001664 00001664     \...@...d...d...
    203c:	00001664 00001868                       d...h...

00002044 <_global_impure_ptr>:
    2044:	20000010                                ... 

00002048 <_init>:
    2048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    204e:	bc08      	pop	{r3}
    2050:	469e      	mov	lr, r3
    2052:	4770      	bx	lr

00002054 <__init_array_start>:
    2054:	00001ce9 	.word	0x00001ce9

00002058 <__frame_dummy_init_array_entry>:
    2058:	000000dd                                ....

0000205c <_fini>:
    205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2062:	bc08      	pop	{r3}
    2064:	469e      	mov	lr, r3
    2066:	4770      	bx	lr

00002068 <__fini_array_start>:
    2068:	000000b5 	.word	0x000000b5
