
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000675c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  0000675c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006c10  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006dc0  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021885  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ee  00000000  00000000  00041daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002876  00000000  00000000  00044698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000438  00000000  00000000  00046f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d88  00000000  00000000  00047346  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016369  00000000  00000000  000480ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009c42  00000000  00000000  0005e437  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000728e7  00000000  00000000  00068079  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000116c  00000000  00000000  000da960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000fc5 	.word	0x00000fc5
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001065 	.word	0x00001065
      90:	000010cd 	.word	0x000010cd
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	0000675c 	.word	0x0000675c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	0000675c 	.word	0x0000675c
     10c:	0000675c 	.word	0x0000675c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000675c 	.word	0x0000675c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000062e9 	.word	0x000062e9
     1d0:	00000a89 	.word	0x00000a89

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	00002785 	.word	0x00002785
     21c:	200004d0 	.word	0x200004d0

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00002785 	.word	0x00002785
     250:	200004d0 	.word	0x200004d0

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	00002785 	.word	0x00002785
     2c8:	200004d0 	.word	0x200004d0

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	00002785 	.word	0x00002785
     33c:	200004d0 	.word	0x200004d0

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	00002785 	.word	0x00002785
     3ac:	200004d0 	.word	0x200004d0

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	00002785 	.word	0x00002785
     418:	200004d0 	.word	0x200004d0

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	0212      	lsls	r2, r2, #8
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	000064ec 	.word	0x000064ec
     4c8:	00000cbd 	.word	0x00000cbd
     4cc:	00000d29 	.word	0x00000d29

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4d2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4d6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4d8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4da:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4dc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4de:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     4e0:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     4e2:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	8905      	ldrh	r5, [r0, #8]
     4e6:	6903      	ldr	r3, [r0, #16]
     4e8:	022d      	lsls	r5, r5, #8
     4ea:	1b5b      	subs	r3, r3, r5
     4ec:	2500      	movs	r5, #0
     4ee:	9302      	str	r3, [sp, #8]
     4f0:	17db      	asrs	r3, r3, #31
     4f2:	9303      	str	r3, [sp, #12]
     4f4:	8940      	ldrh	r0, [r0, #10]
     4f6:	4f1f      	ldr	r7, [pc, #124]	; (574 <ConvertPressureTemperature+0xa4>)
     4f8:	9a02      	ldr	r2, [sp, #8]
     4fa:	0029      	movs	r1, r5
     4fc:	47b8      	blx	r7
     4fe:	23fa      	movs	r3, #250	; 0xfa
     500:	0249      	lsls	r1, r1, #9
     502:	0dc0      	lsrs	r0, r0, #23
     504:	4308      	orrs	r0, r1
     506:	00db      	lsls	r3, r3, #3
     508:	18c0      	adds	r0, r0, r3
     50a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	9b03      	ldr	r3, [sp, #12]
     510:	0030      	movs	r0, r6
     512:	0029      	movs	r1, r5
     514:	47b8      	blx	r7
     516:	060b      	lsls	r3, r1, #24
     518:	120f      	asrs	r7, r1, #8
     51a:	0a06      	lsrs	r6, r0, #8
     51c:	9900      	ldr	r1, [sp, #0]
     51e:	431e      	orrs	r6, r3
     520:	03ca      	lsls	r2, r1, #15
     522:	002b      	movs	r3, r5
     524:	0030      	movs	r0, r6
     526:	0039      	movs	r1, r7
     528:	4e12      	ldr	r6, [pc, #72]	; (574 <ConvertPressureTemperature+0xa4>)
     52a:	1880      	adds	r0, r0, r2
     52c:	4159      	adcs	r1, r3
     52e:	68e2      	ldr	r2, [r4, #12]
     530:	47b0      	blx	r6
     532:	02cb      	lsls	r3, r1, #11
     534:	0d42      	lsrs	r2, r0, #21
     536:	431a      	orrs	r2, r3
     538:	154b      	asrs	r3, r1, #21
     53a:	9200      	str	r2, [sp, #0]
     53c:	9301      	str	r3, [sp, #4]
     53e:	9a02      	ldr	r2, [sp, #8]
     540:	9b03      	ldr	r3, [sp, #12]
     542:	4e0c      	ldr	r6, [pc, #48]	; (574 <ConvertPressureTemperature+0xa4>)
     544:	9805      	ldr	r0, [sp, #20]
     546:	0029      	movs	r1, r5
     548:	47b0      	blx	r6
     54a:	064b      	lsls	r3, r1, #25
     54c:	09c6      	lsrs	r6, r0, #7
     54e:	431e      	orrs	r6, r3
     550:	002b      	movs	r3, r5
     552:	11cf      	asrs	r7, r1, #7
     554:	9904      	ldr	r1, [sp, #16]
     556:	040a      	lsls	r2, r1, #16
     558:	1992      	adds	r2, r2, r6
     55a:	417b      	adcs	r3, r7
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a80      	subs	r0, r0, r2
     562:	4199      	sbcs	r1, r3
     564:	000a      	movs	r2, r1
     566:	0453      	lsls	r3, r2, #17
     568:	0bc2      	lsrs	r2, r0, #15
     56a:	431a      	orrs	r2, r3
     56c:	61e2      	str	r2, [r4, #28]

}
     56e:	b007      	add	sp, #28
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	00003bc1 	.word	0x00003bc1

00000578 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     578:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     57c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57e:	69c0      	ldr	r0, [r0, #28]
     580:	4798      	blx	r3
     582:	4d0e      	ldr	r5, [pc, #56]	; (5bc <paToFeetNOAA+0x44>)
     584:	2200      	movs	r2, #0
     586:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <paToFeetNOAA+0x48>)
     588:	47a8      	blx	r5
     58a:	2200      	movs	r2, #0
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <paToFeetNOAA+0x4c>)
     58e:	47a8      	blx	r5
     590:	4a0d      	ldr	r2, [pc, #52]	; (5c8 <paToFeetNOAA+0x50>)
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <paToFeetNOAA+0x54>)
     594:	4d0e      	ldr	r5, [pc, #56]	; (5d0 <paToFeetNOAA+0x58>)
     596:	47a8      	blx	r5
     598:	4d0e      	ldr	r5, [pc, #56]	; (5d4 <paToFeetNOAA+0x5c>)
     59a:	0002      	movs	r2, r0
     59c:	000b      	movs	r3, r1
     59e:	2000      	movs	r0, #0
     5a0:	490d      	ldr	r1, [pc, #52]	; (5d8 <paToFeetNOAA+0x60>)
     5a2:	47a8      	blx	r5
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <paToFeetNOAA+0x64>)
     5a6:	4d0e      	ldr	r5, [pc, #56]	; (5e0 <paToFeetNOAA+0x68>)
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <paToFeetNOAA+0x6c>)
     5aa:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ae:	62a0      	str	r0, [r4, #40]	; 0x28
     5b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5b2:	4798      	blx	r3
     5b4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	00005ed5 	.word	0x00005ed5
     5bc:	00004a45 	.word	0x00004a45
     5c0:	40240000 	.word	0x40240000
     5c4:	408faa00 	.word	0x408faa00
     5c8:	e279dd3c 	.word	0xe279dd3c
     5cc:	3fc85b39 	.word	0x3fc85b39
     5d0:	000028b1 	.word	0x000028b1
     5d4:	00005781 	.word	0x00005781
     5d8:	3ff00000 	.word	0x3ff00000
     5dc:	9999999a 	.word	0x9999999a
     5e0:	0000528d 	.word	0x0000528d
     5e4:	4101beb3 	.word	0x4101beb3
     5e8:	00003c49 	.word	0x00003c49

000005ec <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	27a2      	movs	r7, #162	; 0xa2
     5f0:	b087      	sub	sp, #28
     5f2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5f4:	2096      	movs	r0, #150	; 0x96
     5f6:	4c2b      	ldr	r4, [pc, #172]	; (6a4 <readMS5803Coefficients+0xb8>)
     5f8:	0080      	lsls	r0, r0, #2
     5fa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5fc:	2096      	movs	r0, #150	; 0x96
     5fe:	0080      	lsls	r0, r0, #2
     600:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     604:	4c28      	ldr	r4, [pc, #160]	; (6a8 <readMS5803Coefficients+0xbc>)
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <readMS5803Coefficients+0xc0>)
     608:	0212      	lsls	r2, r2, #8
     60a:	615a      	str	r2, [r3, #20]
     60c:	7863      	ldrb	r3, [r4, #1]
     60e:	7820      	ldrb	r0, [r4, #0]
     610:	78a2      	ldrb	r2, [r4, #2]
     612:	021b      	lsls	r3, r3, #8
     614:	4303      	orrs	r3, r0
     616:	0412      	lsls	r2, r2, #16
     618:	0019      	movs	r1, r3
     61a:	0013      	movs	r3, r2
     61c:	430b      	orrs	r3, r1
     61e:	79a1      	ldrb	r1, [r4, #6]
     620:	7966      	ldrb	r6, [r4, #5]
     622:	0209      	lsls	r1, r1, #8
     624:	4331      	orrs	r1, r6
     626:	0008      	movs	r0, r1
     628:	79e1      	ldrb	r1, [r4, #7]
     62a:	78e2      	ldrb	r2, [r4, #3]
     62c:	0409      	lsls	r1, r1, #16
     62e:	4301      	orrs	r1, r0
     630:	7a20      	ldrb	r0, [r4, #8]
     632:	7a66      	ldrb	r6, [r4, #9]
     634:	0612      	lsls	r2, r2, #24
     636:	0600      	lsls	r0, r0, #24
     638:	4308      	orrs	r0, r1
     63a:	431a      	orrs	r2, r3
     63c:	9700      	str	r7, [sp, #0]
     63e:	7923      	ldrb	r3, [r4, #4]
     640:	0031      	movs	r1, r6
     642:	4d1b      	ldr	r5, [pc, #108]	; (6b0 <readMS5803Coefficients+0xc4>)
     644:	9003      	str	r0, [sp, #12]
     646:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	0020      	movs	r0, r4
     64c:	7aa1      	ldrb	r1, [r4, #10]
     64e:	7b24      	ldrb	r4, [r4, #12]
     650:	021b      	lsls	r3, r3, #8
     652:	430b      	orrs	r3, r1
     654:	0424      	lsls	r4, r4, #16
     656:	001a      	movs	r2, r3
     658:	0023      	movs	r3, r4
     65a:	7b44      	ldrb	r4, [r0, #13]
     65c:	7b85      	ldrb	r5, [r0, #14]
     65e:	4313      	orrs	r3, r2
     660:	0624      	lsls	r4, r4, #24
     662:	431c      	orrs	r4, r3
     664:	0022      	movs	r2, r4
     666:	002b      	movs	r3, r5
     668:	9404      	str	r4, [sp, #16]
     66a:	0031      	movs	r1, r6
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <readMS5803Coefficients+0xc8>)
     66e:	9803      	ldr	r0, [sp, #12]
     670:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     672:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     674:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     676:	9a04      	ldr	r2, [sp, #16]
     678:	9803      	ldr	r0, [sp, #12]
     67a:	0031      	movs	r1, r6
     67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <readMS5803Coefficients+0xc8>)
     67e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	2280      	movs	r2, #128	; 0x80
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <readMS5803Coefficients+0xc0>)
     684:	0212      	lsls	r2, r2, #8
     686:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     688:	9b05      	ldr	r3, [sp, #20]
     68a:	021d      	lsls	r5, r3, #8
     68c:	9b02      	ldr	r3, [sp, #8]
     68e:	4328      	orrs	r0, r5
     690:	8018      	strh	r0, [r3, #0]
     692:	1cbb      	adds	r3, r7, #2
     694:	b2df      	uxtb	r7, r3
     696:	9b02      	ldr	r3, [sp, #8]
     698:	3302      	adds	r3, #2
     69a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     69c:	2fae      	cmp	r7, #174	; 0xae
     69e:	d1a9      	bne.n	5f4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6a0:	b007      	add	sp, #28
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	00000f65 	.word	0x00000f65
     6a8:	000064ec 	.word	0x000064ec
     6ac:	41004400 	.word	0x41004400
     6b0:	00000cbd 	.word	0x00000cbd
     6b4:	00000d29 	.word	0x00000d29

000006b8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6bc:	231e      	movs	r3, #30
     6be:	491a      	ldr	r1, [pc, #104]	; (728 <initMS5803Barometer+0x70>)
     6c0:	4d1a      	ldr	r5, [pc, #104]	; (72c <initMS5803Barometer+0x74>)
     6c2:	0236      	lsls	r6, r6, #8
     6c4:	616e      	str	r6, [r5, #20]
     6c6:	9300      	str	r3, [sp, #0]
     6c8:	784b      	ldrb	r3, [r1, #1]
     6ca:	780a      	ldrb	r2, [r1, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	4313      	orrs	r3, r2
     6d0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6d2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d4:	0412      	lsls	r2, r2, #16
     6d6:	0018      	movs	r0, r3
     6d8:	0013      	movs	r3, r2
     6da:	78ca      	ldrb	r2, [r1, #3]
     6dc:	4303      	orrs	r3, r0
     6de:	0612      	lsls	r2, r2, #24
     6e0:	1d4f      	adds	r7, r1, #5
     6e2:	431a      	orrs	r2, r3
     6e4:	7948      	ldrb	r0, [r1, #5]
     6e6:	790b      	ldrb	r3, [r1, #4]
     6e8:	7989      	ldrb	r1, [r1, #6]
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	4301      	orrs	r1, r0
     6ee:	78b8      	ldrb	r0, [r7, #2]
     6f0:	0400      	lsls	r0, r0, #16
     6f2:	4301      	orrs	r1, r0
     6f4:	78f8      	ldrb	r0, [r7, #3]
     6f6:	0600      	lsls	r0, r0, #24
     6f8:	4308      	orrs	r0, r1
     6fa:	7939      	ldrb	r1, [r7, #4]
     6fc:	4f0c      	ldr	r7, [pc, #48]	; (730 <initMS5803Barometer+0x78>)
     6fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     700:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     702:	20c8      	movs	r0, #200	; 0xc8
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <initMS5803Barometer+0x7c>)
     706:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     708:	0020      	movs	r0, r4
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <initMS5803Barometer+0x80>)
     70c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     70e:	23fa      	movs	r3, #250	; 0xfa
     710:	011b      	lsls	r3, r3, #4
     712:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <initMS5803Barometer+0x84>)
     716:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <initMS5803Barometer+0x88>)
     71a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     71c:	4b09      	ldr	r3, [pc, #36]	; (744 <initMS5803Barometer+0x8c>)
     71e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     720:	23fa      	movs	r3, #250	; 0xfa
     722:	00db      	lsls	r3, r3, #3
     724:	6163      	str	r3, [r4, #20]




}
     726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     728:	000064ec 	.word	0x000064ec
     72c:	41004400 	.word	0x41004400
     730:	00000cbd 	.word	0x00000cbd
     734:	00000f95 	.word	0x00000f95
     738:	000005ed 	.word	0x000005ed
     73c:	00002710 	.word	0x00002710
     740:	0041c9fe 	.word	0x0041c9fe
     744:	007ffae4 	.word	0x007ffae4

00000748 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     748:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     74a:	4bc0      	ldr	r3, [pc, #768]	; (a4c <init+0x304>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74c:	b085      	sub	sp, #20
    SystemInit();
     74e:	4798      	blx	r3
    GclkInit();
     750:	4bbf      	ldr	r3, [pc, #764]	; (a50 <init+0x308>)
     752:	4798      	blx	r3
    RtcInit();
     754:	4bbf      	ldr	r3, [pc, #764]	; (a54 <init+0x30c>)
     756:	4798      	blx	r3
    delayInit();
     758:	4bbf      	ldr	r3, [pc, #764]	; (a58 <init+0x310>)
     75a:	4798      	blx	r3
    adcInit();
     75c:	4bbf      	ldr	r3, [pc, #764]	; (a5c <init+0x314>)
     75e:	4798      	blx	r3
    dmaInit();
     760:	4bbf      	ldr	r3, [pc, #764]	; (a60 <init+0x318>)
     762:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     764:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     766:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     768:	4bbe      	ldr	r3, [pc, #760]	; (a64 <init+0x31c>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     76c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76e:	5858      	ldr	r0, [r3, r1]
     770:	4abd      	ldr	r2, [pc, #756]	; (a68 <init+0x320>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	2401      	movs	r4, #1
     774:	4002      	ands	r2, r0
     776:	505a      	str	r2, [r3, r1]
     778:	4bbc      	ldr	r3, [pc, #752]	; (a6c <init+0x324>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     77a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77c:	0019      	movs	r1, r3
     77e:	3154      	adds	r1, #84	; 0x54
     780:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     782:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	43a2      	bics	r2, r4
     786:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2280      	movs	r2, #128	; 0x80
     78a:	0352      	lsls	r2, r2, #13
     78c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     78e:	220f      	movs	r2, #15
     790:	3033      	adds	r0, #51	; 0x33
     792:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     794:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     796:	4391      	bics	r1, r2
     798:	4321      	orrs	r1, r4
     79a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	7cc1      	ldrb	r1, [r0, #19]
     79e:	36c3      	adds	r6, #195	; 0xc3
     7a0:	4321      	orrs	r1, r4
     7a2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7a4:	0019      	movs	r1, r3
     7a6:	31b1      	adds	r1, #177	; 0xb1
     7a8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ac:	4010      	ands	r0, r2
     7ae:	4328      	orrs	r0, r5
     7b0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b6:	4320      	orrs	r0, r4
     7b8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ba:	7808      	ldrb	r0, [r1, #0]
     7bc:	4010      	ands	r0, r2
     7be:	4328      	orrs	r0, r5
     7c0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7830      	ldrb	r0, [r6, #0]
     7c4:	4320      	orrs	r0, r4
     7c6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	7d30      	ldrb	r0, [r6, #20]
     7ca:	43a0      	bics	r0, r4
     7cc:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ce:	2080      	movs	r0, #128	; 0x80
     7d0:	0400      	lsls	r0, r0, #16
     7d2:	9703      	str	r7, [sp, #12]
     7d4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7d6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7d8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7da:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7dc:	4390      	bics	r0, r2
     7de:	4320      	orrs	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	20c2      	movs	r0, #194	; 0xc2
     7e4:	4684      	mov	ip, r0
     7e6:	449c      	add	ip, r3
     7e8:	4660      	mov	r0, ip
     7ea:	4667      	mov	r7, ip
     7ec:	7800      	ldrb	r0, [r0, #0]
     7ee:	4320      	orrs	r0, r4
     7f0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f2:	7808      	ldrb	r0, [r1, #0]
     7f4:	4390      	bics	r0, r2
     7f6:	4320      	orrs	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     806:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	43a1      	bics	r1, r4
     80a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	9803      	ldr	r0, [sp, #12]
     810:	03c9      	lsls	r1, r1, #15
     812:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     814:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     816:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     818:	3031      	adds	r0, #49	; 0x31
     81a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     81e:	4011      	ands	r1, r2
     820:	430d      	orrs	r5, r1
     822:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	001d      	movs	r5, r3
     826:	3543      	adds	r5, #67	; 0x43
     828:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     82a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	4321      	orrs	r1, r4
     82e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	7da9      	ldrb	r1, [r5, #22]
     832:	3505      	adds	r5, #5
     834:	43a1      	bics	r1, r4
     836:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0489      	lsls	r1, r1, #18
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     840:	7801      	ldrb	r1, [r0, #0]
     842:	4391      	bics	r1, r2
     844:	4321      	orrs	r1, r4
     846:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     848:	7c41      	ldrb	r1, [r0, #17]
     84a:	3011      	adds	r0, #17
     84c:	4321      	orrs	r1, r4
     84e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7d81      	ldrb	r1, [r0, #22]
     852:	43a1      	bics	r1, r4
     854:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     856:	2180      	movs	r1, #128	; 0x80
     858:	0449      	lsls	r1, r1, #17
     85a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     85e:	7829      	ldrb	r1, [r5, #0]
     860:	43a1      	bics	r1, r4
     862:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     864:	2180      	movs	r1, #128	; 0x80
     866:	0049      	lsls	r1, r1, #1
     868:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	7831      	ldrb	r1, [r6, #0]
     86c:	43a1      	bics	r1, r4
     86e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2180      	movs	r1, #128	; 0x80
     872:	0089      	lsls	r1, r1, #2
     874:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     876:	0019      	movs	r1, r3
     878:	314b      	adds	r1, #75	; 0x4b
     87a:	7808      	ldrb	r0, [r1, #0]
     87c:	43a0      	bics	r0, r4
     87e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     880:	7808      	ldrb	r0, [r1, #0]
     882:	4338      	orrs	r0, r7
     884:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     886:	2080      	movs	r0, #128	; 0x80
     888:	0100      	lsls	r0, r0, #4
     88a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88c:	4878      	ldr	r0, [pc, #480]	; (a70 <init+0x328>)
     88e:	371e      	adds	r7, #30
     890:	7800      	ldrb	r0, [r0, #0]
     892:	4010      	ands	r0, r2
     894:	4338      	orrs	r0, r7
     896:	4f76      	ldr	r7, [pc, #472]	; (a70 <init+0x328>)
     898:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     89c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89e:	4320      	orrs	r0, r4
     8a0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a2:	0018      	movs	r0, r3
     8a4:	3034      	adds	r0, #52	; 0x34
     8a6:	7801      	ldrb	r1, [r0, #0]
     8a8:	4011      	ands	r1, r2
     8aa:	4339      	orrs	r1, r7
     8ac:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ae:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8b0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b2:	4321      	orrs	r1, r4
     8b4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	4666      	mov	r6, ip
     8b8:	7801      	ldrb	r1, [r0, #0]
     8ba:	4391      	bics	r1, r2
     8bc:	4331      	orrs	r1, r6
     8be:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c4:	4321      	orrs	r1, r4
     8c6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7801      	ldrb	r1, [r0, #0]
     8ca:	001e      	movs	r6, r3
     8cc:	43a1      	bics	r1, r4
     8ce:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d0:	2180      	movs	r1, #128	; 0x80
     8d2:	9803      	ldr	r0, [sp, #12]
     8d4:	00c9      	lsls	r1, r1, #3
     8d6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8d8:	0018      	movs	r0, r3
     8da:	3098      	adds	r0, #152	; 0x98
     8dc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	78a8      	ldrb	r0, [r5, #2]
     8e0:	3651      	adds	r6, #81	; 0x51
     8e2:	43a0      	bics	r0, r4
     8e4:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8e8:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	7a29      	ldrb	r1, [r5, #8]
     8ec:	43a1      	bics	r1, r4
     8ee:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0249      	lsls	r1, r1, #9
     8f4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f6:	7831      	ldrb	r1, [r6, #0]
     8f8:	43a1      	bics	r1, r4
     8fa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	0289      	lsls	r1, r1, #10
     900:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	0019      	movs	r1, r3
     904:	3153      	adds	r1, #83	; 0x53
     906:	7808      	ldrb	r0, [r1, #0]
     908:	43a0      	bics	r0, r4
     90a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90c:	7808      	ldrb	r0, [r1, #0]
     90e:	4338      	orrs	r0, r7
     910:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     914:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     916:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     918:	0300      	lsls	r0, r0, #12
     91a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     91c:	9703      	str	r7, [sp, #12]
     91e:	7838      	ldrb	r0, [r7, #0]
     920:	2720      	movs	r7, #32
     922:	4010      	ands	r0, r2
     924:	4338      	orrs	r0, r7
     926:	9f03      	ldr	r7, [sp, #12]
     928:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     92c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	4320      	orrs	r0, r4
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	0018      	movs	r0, r3
     934:	3038      	adds	r0, #56	; 0x38
     936:	7801      	ldrb	r1, [r0, #0]
     938:	4011      	ands	r1, r2
     93a:	4339      	orrs	r1, r7
     93c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     93e:	7831      	ldrb	r1, [r6, #0]
     940:	4321      	orrs	r1, r4
     942:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     944:	4666      	mov	r6, ip
     946:	7801      	ldrb	r1, [r0, #0]
     948:	4391      	bics	r1, r2
     94a:	4331      	orrs	r1, r6
     94c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     950:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     952:	4321      	orrs	r1, r4
     954:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     956:	7981      	ldrb	r1, [r0, #6]
     958:	43a1      	bics	r1, r4
     95a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     95c:	2180      	movs	r1, #128	; 0x80
     95e:	02c9      	lsls	r1, r1, #11
     960:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     962:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     964:	7801      	ldrb	r1, [r0, #0]
     966:	43a1      	bics	r1, r4
     968:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     96a:	2180      	movs	r1, #128	; 0x80
     96c:	0149      	lsls	r1, r1, #5
     96e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	7881      	ldrb	r1, [r0, #2]
     972:	43a1      	bics	r1, r4
     974:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     976:	2180      	movs	r1, #128	; 0x80
     978:	01c9      	lsls	r1, r1, #7
     97a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     97c:	0019      	movs	r1, r3
     97e:	314d      	adds	r1, #77	; 0x4d
     980:	7808      	ldrb	r0, [r1, #0]
     982:	43a0      	bics	r0, r4
     984:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     986:	7808      	ldrb	r0, [r1, #0]
     988:	4330      	orrs	r0, r6
     98a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     98c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     98e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     990:	0189      	lsls	r1, r1, #6
     992:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	304f      	adds	r0, #79	; 0x4f
     996:	7801      	ldrb	r1, [r0, #0]
     998:	43a1      	bics	r1, r4
     99a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99c:	2180      	movs	r1, #128	; 0x80
     99e:	0209      	lsls	r1, r1, #8
     9a0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a4:	0019      	movs	r1, r3
     9a6:	3155      	adds	r1, #85	; 0x55
     9a8:	7808      	ldrb	r0, [r1, #0]
     9aa:	43a0      	bics	r0, r4
     9ac:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ae:	2080      	movs	r0, #128	; 0x80
     9b0:	0380      	lsls	r0, r0, #14
     9b2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9b4:	2040      	movs	r0, #64	; 0x40
     9b6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b8:	7848      	ldrb	r0, [r1, #1]
     9ba:	43a0      	bics	r0, r4
     9bc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9be:	2080      	movs	r0, #128	; 0x80
     9c0:	03c0      	lsls	r0, r0, #15
     9c2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9c4:	0018      	movs	r0, r3
     9c6:	303b      	adds	r0, #59	; 0x3b
     9c8:	7805      	ldrb	r5, [r0, #0]
     9ca:	4395      	bics	r5, r2
     9cc:	4335      	orrs	r5, r6
     9ce:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9d0:	784d      	ldrb	r5, [r1, #1]
     9d2:	4325      	orrs	r5, r4
     9d4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d6:	788d      	ldrb	r5, [r1, #2]
     9d8:	43a5      	bics	r5, r4
     9da:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9dc:	788d      	ldrb	r5, [r1, #2]
     9de:	4335      	orrs	r5, r6
     9e0:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9e2:	2580      	movs	r5, #128	; 0x80
     9e4:	042d      	lsls	r5, r5, #16
     9e6:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9e8:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9ea:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     9ec:	4e21      	ldr	r6, [pc, #132]	; (a74 <init+0x32c>)
     9ee:	401a      	ands	r2, r3
     9f0:	433a      	orrs	r2, r7
     9f2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f4:	788b      	ldrb	r3, [r1, #2]
     9f6:	2204      	movs	r2, #4
     9f8:	4323      	orrs	r3, r4
     9fa:	708b      	strb	r3, [r1, #2]
     9fc:	2000      	movs	r0, #0
     9fe:	2103      	movs	r1, #3
     a00:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a02:	002b      	movs	r3, r5
     a04:	002a      	movs	r2, r5
     a06:	0028      	movs	r0, r5
     a08:	4f1b      	ldr	r7, [pc, #108]	; (a78 <init+0x330>)
     a0a:	9501      	str	r5, [sp, #4]
     a0c:	9500      	str	r5, [sp, #0]
     a0e:	2103      	movs	r1, #3
     a10:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a12:	0020      	movs	r0, r4
     a14:	2204      	movs	r2, #4
     a16:	2103      	movs	r1, #3
     a18:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a1a:	002b      	movs	r3, r5
     a1c:	002a      	movs	r2, r5
     a1e:	0020      	movs	r0, r4
     a20:	9501      	str	r5, [sp, #4]
     a22:	9500      	str	r5, [sp, #0]
     a24:	2103      	movs	r1, #3
     a26:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a28:	2208      	movs	r2, #8
     a2a:	2104      	movs	r1, #4
     a2c:	2003      	movs	r0, #3
     a2e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     a30:	2396      	movs	r3, #150	; 0x96
     a32:	0021      	movs	r1, r4
     a34:	002a      	movs	r2, r5
     a36:	2003      	movs	r0, #3
     a38:	01db      	lsls	r3, r3, #7
     a3a:	4c10      	ldr	r4, [pc, #64]	; (a7c <init+0x334>)
     a3c:	47a0      	blx	r4

    TC4Init();
     a3e:	4b10      	ldr	r3, [pc, #64]	; (a80 <init+0x338>)
     a40:	4798      	blx	r3
    TC5Init();
     a42:	4b10      	ldr	r3, [pc, #64]	; (a84 <init+0x33c>)
     a44:	4798      	blx	r3
}
     a46:	b005      	add	sp, #20
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	000001d5 	.word	0x000001d5
     a50:	00000df1 	.word	0x00000df1
     a54:	00000e79 	.word	0x00000e79
     a58:	00000f45 	.word	0x00000f45
     a5c:	00000bd9 	.word	0x00000bd9
     a60:	000010e5 	.word	0x000010e5
     a64:	e000e100 	.word	0xe000e100
     a68:	ff00ffff 	.word	0xff00ffff
     a6c:	41004400 	.word	0x41004400
     a70:	41004435 	.word	0x41004435
     a74:	00002675 	.word	0x00002675
     a78:	000026d9 	.word	0x000026d9
     a7c:	0000273d 	.word	0x0000273d
     a80:	00001015 	.word	0x00001015
     a84:	0000107d 	.word	0x0000107d

00000a88 <main>:


int main(void) {
     a88:	b510      	push	{r4, lr}
     a8a:	4c1b      	ldr	r4, [pc, #108]	; (af8 <main+0x70>)

    init();
     a8c:	4b1b      	ldr	r3, [pc, #108]	; (afc <main+0x74>)
    TC4Init();
    TC5Init();
}


int main(void) {
     a8e:	44a5      	add	sp, r4

    init();
     a90:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a92:	2400      	movs	r4, #0
     a94:	466b      	mov	r3, sp

    initMS5803Barometer(&my_altimeter.myBarometer);
     a96:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a98:	701c      	strb	r4, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <main+0x78>)
     a9c:	4798      	blx	r3
    IMUinit();
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <main+0x7c>)
     aa0:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     aa2:	2384      	movs	r3, #132	; 0x84
     aa4:	466a      	mov	r2, sp
     aa6:	009b      	lsls	r3, r3, #2
     aa8:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     aaa:	4b17      	ldr	r3, [pc, #92]	; (b08 <main+0x80>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     aac:	a814      	add	r0, sp, #80	; 0x50

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     aae:	54d4      	strb	r4, [r2, r3]

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <main+0x84>)
     ab2:	4798      	blx	r3

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     ab4:	4b16      	ldr	r3, [pc, #88]	; (b10 <main+0x88>)
     ab6:	9835      	ldr	r0, [sp, #212]	; 0xd4
     ab8:	4798      	blx	r3
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     aba:	4b16      	ldr	r3, [pc, #88]	; (b14 <main+0x8c>)
    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     abc:	902e      	str	r0, [sp, #184]	; 0xb8
     abe:	912f      	str	r1, [sp, #188]	; 0xbc
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ac0:	980e      	ldr	r0, [sp, #56]	; 0x38
     ac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ac4:	4798      	blx	r3

    my_altimeter.StartupTick = millis();
     ac6:	4b14      	ldr	r3, [pc, #80]	; (b18 <main+0x90>)
    my_altimeter.myFlashMemory.pageReady = false;

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ac8:	9010      	str	r0, [sp, #64]	; 0x40

    my_altimeter.StartupTick = millis();
     aca:	4798      	blx	r3
     acc:	23ca      	movs	r3, #202	; 0xca
     ace:	466a      	mov	r2, sp
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	50d0      	str	r0, [r2, r3]

	beep(400);
     ad4:	20c8      	movs	r0, #200	; 0xc8
     ad6:	4b11      	ldr	r3, [pc, #68]	; (b1c <main+0x94>)
     ad8:	0040      	lsls	r0, r0, #1
     ada:	4798      	blx	r3



    while (1) {

        if (takeSample()) {
     adc:	4b10      	ldr	r3, [pc, #64]	; (b20 <main+0x98>)
     ade:	4798      	blx	r3
     ae0:	2800      	cmp	r0, #0
     ae2:	d0fb      	beq.n	adc <main+0x54>
            sampleTick(&my_altimeter);
     ae4:	4668      	mov	r0, sp
     ae6:	4b0f      	ldr	r3, [pc, #60]	; (b24 <main+0x9c>)
     ae8:	4798      	blx	r3
            flight(&my_altimeter);
     aea:	4668      	mov	r0, sp
     aec:	4b0e      	ldr	r3, [pc, #56]	; (b28 <main+0xa0>)
     aee:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     af0:	4668      	mov	r0, sp
     af2:	4b0e      	ldr	r3, [pc, #56]	; (b2c <main+0xa4>)
     af4:	4798      	blx	r3
     af6:	e7f1      	b.n	adc <main+0x54>
     af8:	fffffcc0 	.word	0xfffffcc0
     afc:	00000749 	.word	0x00000749
     b00:	000006b9 	.word	0x000006b9
     b04:	00000b31 	.word	0x00000b31
     b08:	00000311 	.word	0x00000311
     b0c:	0000139d 	.word	0x0000139d
     b10:	00005fc9 	.word	0x00005fc9
     b14:	00003c49 	.word	0x00003c49
     b18:	00000fe1 	.word	0x00000fe1
     b1c:	00000d7d 	.word	0x00000d7d
     b20:	00002265 	.word	0x00002265
     b24:	0000227d 	.word	0x0000227d
     b28:	00001145 	.word	0x00001145
     b2c:	00001c41 	.word	0x00001c41

00000b30 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b30:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b32:	4c08      	ldr	r4, [pc, #32]	; (b54 <IMUinit+0x24>)
     b34:	2580      	movs	r5, #128	; 0x80
     b36:	0023      	movs	r3, r4
     b38:	00ed      	lsls	r5, r5, #3
     b3a:	3394      	adds	r3, #148	; 0x94
     b3c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b3e:	4e06      	ldr	r6, [pc, #24]	; (b58 <IMUinit+0x28>)
     b40:	210f      	movs	r1, #15
     b42:	2000      	movs	r0, #0
     b44:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b46:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b48:	210c      	movs	r1, #12
     b4a:	2000      	movs	r0, #0
     b4c:	47b0      	blx	r6
     b4e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b50:	bd70      	pop	{r4, r5, r6, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	41004400 	.word	0x41004400
     b58:	00002785 	.word	0x00002785

00000b5c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b5c:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b5e:	4b09      	ldr	r3, [pc, #36]	; (b84 <USARTconnectionAvaliable+0x28>)
     b60:	7e1c      	ldrb	r4, [r3, #24]
     b62:	0764      	lsls	r4, r4, #29
     b64:	0fe4      	lsrs	r4, r4, #31
     b66:	2c01      	cmp	r4, #1
     b68:	d001      	beq.n	b6e <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b6a:	2000      	movs	r0, #0
     b6c:	e009      	b.n	b82 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     b6e:	2003      	movs	r0, #3
     b70:	4b05      	ldr	r3, [pc, #20]	; (b88 <USARTconnectionAvaliable+0x2c>)
     b72:	4798      	blx	r3
     b74:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     b76:	2948      	cmp	r1, #72	; 0x48
     b78:	d1f7      	bne.n	b6a <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b7a:	2003      	movs	r0, #3
     b7c:	4b03      	ldr	r3, [pc, #12]	; (b8c <USARTconnectionAvaliable+0x30>)
     b7e:	4798      	blx	r3
            return true;
     b80:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     b82:	bd10      	pop	{r4, pc}
     b84:	42001400 	.word	0x42001400
     b88:	000027b5 	.word	0x000027b5
     b8c:	0000279d 	.word	0x0000279d

00000b90 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b92:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b94:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b96:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b98:	1a09      	subs	r1, r1, r0
     b9a:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b9c:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b9e:	b28b      	uxth	r3, r1
     ba0:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ba2:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ba4:	a902      	add	r1, sp, #8
     ba6:	0028      	movs	r0, r5
     ba8:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sendTheasePagesToComputer+0x40>)
     baa:	4798      	blx	r3
     bac:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     bae:	ab02      	add	r3, sp, #8
     bb0:	5d99      	ldrb	r1, [r3, r6]
     bb2:	2003      	movs	r0, #3
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <sendTheasePagesToComputer+0x44>)
     bb6:	3601      	adds	r6, #1
     bb8:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bba:	42be      	cmp	r6, r7
     bbc:	d1f7      	bne.n	bae <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bbe:	3401      	adds	r4, #1
     bc0:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bc2:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bc4:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bc6:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bc8:	42a3      	cmp	r3, r4
     bca:	d2eb      	bcs.n	ba4 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     bcc:	b043      	add	sp, #268	; 0x10c
     bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd0:	000003b1 	.word	0x000003b1
     bd4:	0000279d 	.word	0x0000279d

00000bd8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bd8:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     bda:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bdc:	4a10      	ldr	r2, [pc, #64]	; (c20 <adcInit+0x48>)
     bde:	0249      	lsls	r1, r1, #9
     be0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     be2:	4810      	ldr	r0, [pc, #64]	; (c24 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     be4:	430b      	orrs	r3, r1
     be6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     be8:	23e0      	movs	r3, #224	; 0xe0
     bea:	490f      	ldr	r1, [pc, #60]	; (c28 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bec:	4a0f      	ldr	r2, [pc, #60]	; (c2c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bee:	00db      	lsls	r3, r3, #3
     bf0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bf2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bf4:	4a0e      	ldr	r2, [pc, #56]	; (c30 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bf6:	6812      	ldr	r2, [r2, #0]
     bf8:	0150      	lsls	r0, r2, #5
     bfa:	4018      	ands	r0, r3
     bfc:	4b0d      	ldr	r3, [pc, #52]	; (c34 <adcInit+0x5c>)
     bfe:	0154      	lsls	r4, r2, #5
     c00:	681a      	ldr	r2, [r3, #0]
     c02:	0ed3      	lsrs	r3, r2, #27
     c04:	4323      	orrs	r3, r4
     c06:	b2da      	uxtb	r2, r3
     c08:	0003      	movs	r3, r0
     c0a:	4313      	orrs	r3, r2
     c0c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c0e:	2302      	movs	r3, #2
     c10:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c12:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c14:	7e4b      	ldrb	r3, [r1, #25]
     c16:	b25b      	sxtb	r3, r3
     c18:	2b00      	cmp	r3, #0
     c1a:	dbfb      	blt.n	c14 <adcInit+0x3c>
}
     c1c:	bd10      	pop	{r4, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	40000400 	.word	0x40000400
     c24:	0000401e 	.word	0x0000401e
     c28:	42004000 	.word	0x42004000
     c2c:	40000c00 	.word	0x40000c00
     c30:	00806024 	.word	0x00806024
     c34:	00806020 	.word	0x00806020

00000c38 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c38:	2202      	movs	r2, #2
     c3a:	4b05      	ldr	r3, [pc, #20]	; (c50 <adcSample+0x18>)
     c3c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c3e:	3a01      	subs	r2, #1
     c40:	7e19      	ldrb	r1, [r3, #24]
     c42:	4211      	tst	r1, r2
     c44:	d0fc      	beq.n	c40 <adcSample+0x8>
    return ADC->RESULT.reg;
     c46:	4b02      	ldr	r3, [pc, #8]	; (c50 <adcSample+0x18>)
     c48:	8b58      	ldrh	r0, [r3, #26]
     c4a:	b280      	uxth	r0, r0
}
     c4c:	4770      	bx	lr
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	42004000 	.word	0x42004000

00000c54 <adc_read>:


u16_t adc_read(Pin p) {
     c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c56:	2501      	movs	r5, #1
     c58:	0c02      	lsrs	r2, r0, #16
     c5a:	b2d4      	uxtb	r4, r2
     c5c:	9000      	str	r0, [sp, #0]
     c5e:	0e00      	lsrs	r0, r0, #24
     c60:	9101      	str	r1, [sp, #4]
     c62:	0842      	lsrs	r2, r0, #1
     c64:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c66:	4911      	ldr	r1, [pc, #68]	; (cac <adc_read+0x58>)
     c68:	18d2      	adds	r2, r2, r3
     c6a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c6c:	4228      	tst	r0, r5
     c6e:	d005      	beq.n	c7c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c70:	210f      	movs	r1, #15
     c72:	7814      	ldrb	r4, [r2, #0]
     c74:	4021      	ands	r1, r4
     c76:	2410      	movs	r4, #16
     c78:	4321      	orrs	r1, r4
     c7a:	e003      	b.n	c84 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c7c:	240f      	movs	r4, #15
     c7e:	7811      	ldrb	r1, [r2, #0]
     c80:	43a1      	bics	r1, r4
     c82:	4329      	orrs	r1, r5
     c84:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c86:	2101      	movs	r1, #1
     c88:	4a09      	ldr	r2, [pc, #36]	; (cb0 <adc_read+0x5c>)
     c8a:	18c3      	adds	r3, r0, r3
     c8c:	189b      	adds	r3, r3, r2
     c8e:	781a      	ldrb	r2, [r3, #0]
     c90:	430a      	orrs	r2, r1
     c92:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c94:	466b      	mov	r3, sp
     c96:	791a      	ldrb	r2, [r3, #4]
     c98:	231f      	movs	r3, #31
     c9a:	4013      	ands	r3, r2
     c9c:	22c0      	movs	r2, #192	; 0xc0
     c9e:	0152      	lsls	r2, r2, #5
     ca0:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     ca2:	4a04      	ldr	r2, [pc, #16]	; (cb4 <adc_read+0x60>)
     ca4:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <adc_read+0x64>)
     ca8:	4798      	blx	r3
     caa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     cac:	41004430 	.word	0x41004430
     cb0:	41004440 	.word	0x41004440
     cb4:	42004000 	.word	0x42004000
     cb8:	00000c39 	.word	0x00000c39

00000cbc <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     cbc:	0c01      	lsrs	r1, r0, #16
     cbe:	0c13      	lsrs	r3, r2, #16
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc2:	b2cd      	uxtb	r5, r1
     cc4:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc6:	2301      	movs	r3, #1
     cc8:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cca:	0e12      	lsrs	r2, r2, #24
     ccc:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cce:	0e00      	lsrs	r0, r0, #24
     cd0:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd2:	001a      	movs	r2, r3
     cd4:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd6:	0030      	movs	r0, r6
     cd8:	4e11      	ldr	r6, [pc, #68]	; (d20 <byteOut+0x64>)
     cda:	01c9      	lsls	r1, r1, #7
     cdc:	b087      	sub	sp, #28
     cde:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce0:	4e10      	ldr	r6, [pc, #64]	; (d24 <byteOut+0x68>)
     ce2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce6:	19ae      	adds	r6, r5, r6
     ce8:	7824      	ldrb	r4, [r4, #0]
     cea:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cec:	4e0c      	ldr	r6, [pc, #48]	; (d20 <byteOut+0x64>)
     cee:	46b4      	mov	ip, r6
     cf0:	44ac      	add	ip, r5
     cf2:	4666      	mov	r6, ip
     cf4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cf6:	b266      	sxtb	r6, r4
     cf8:	2e00      	cmp	r6, #0
     cfa:	da05      	bge.n	d08 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cfc:	4e09      	ldr	r6, [pc, #36]	; (d24 <byteOut+0x68>)
     cfe:	46b4      	mov	ip, r6
     d00:	448c      	add	ip, r1
     d02:	4666      	mov	r6, ip
     d04:	6032      	str	r2, [r6, #0]
     d06:	e000      	b.n	d0a <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d08:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d0a:	9e01      	ldr	r6, [sp, #4]
     d0c:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d0e:	0064      	lsls	r4, r4, #1
     d10:	b2db      	uxtb	r3, r3
     d12:	6030      	str	r0, [r6, #0]
     d14:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d16:	2b00      	cmp	r3, #0
     d18:	d1e8      	bne.n	cec <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d1a:	b007      	add	sp, #28
     d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	41004414 	.word	0x41004414
     d24:	41004418 	.word	0x41004418

00000d28 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d28:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d2a:	2501      	movs	r5, #1
     d2c:	b085      	sub	sp, #20
     d2e:	9103      	str	r1, [sp, #12]
     d30:	0011      	movs	r1, r2
     d32:	0c06      	lsrs	r6, r0, #16
     d34:	9301      	str	r3, [sp, #4]
     d36:	b2f3      	uxtb	r3, r6
     d38:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d3a:	0e09      	lsrs	r1, r1, #24
     d3c:	0c14      	lsrs	r4, r2, #16
     d3e:	9002      	str	r0, [sp, #8]
     d40:	9200      	str	r2, [sp, #0]
     d42:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d44:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d46:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d48:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d4c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4e:	4c0a      	ldr	r4, [pc, #40]	; (d78 <byteIn+0x50>)
     d50:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d52:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d54:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d56:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d58:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d5a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d5c:	0040      	lsls	r0, r0, #1
     d5e:	402c      	ands	r4, r5
     d60:	1e67      	subs	r7, r4, #1
     d62:	41bc      	sbcs	r4, r7
     d64:	3901      	subs	r1, #1
     d66:	4304      	orrs	r4, r0
     d68:	b2c9      	uxtb	r1, r1
     d6a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d6c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d6e:	2900      	cmp	r1, #0
     d70:	d1f2      	bne.n	d58 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d72:	b005      	add	sp, #20
     d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	41004400 	.word	0x41004400

00000d7c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d7e:	2380      	movs	r3, #128	; 0x80
     d80:	2780      	movs	r7, #128	; 0x80
     d82:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d84:	2500      	movs	r5, #0
     d86:	4c0a      	ldr	r4, [pc, #40]	; (db0 <beep+0x34>)
     d88:	035b      	lsls	r3, r3, #13
     d8a:	61e3      	str	r3, [r4, #28]
     d8c:	03bf      	lsls	r7, r7, #14
     d8e:	42b5      	cmp	r5, r6
     d90:	d006      	beq.n	da0 <beep+0x24>
     d92:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d94:	207a      	movs	r0, #122	; 0x7a
     d96:	4b07      	ldr	r3, [pc, #28]	; (db4 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d98:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d9a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d9c:	b2ad      	uxth	r5, r5
     d9e:	e7f6      	b.n	d8e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da0:	2380      	movs	r3, #128	; 0x80
     da2:	039b      	lsls	r3, r3, #14
     da4:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	035b      	lsls	r3, r3, #13
     daa:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	41004400 	.word	0x41004400
     db4:	00000f65 	.word	0x00000f65

00000db8 <startupJingle>:

void startupJingle(){
     db8:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dba:	2696      	movs	r6, #150	; 0x96
     dbc:	0076      	lsls	r6, r6, #1
     dbe:	4d0a      	ldr	r5, [pc, #40]	; (de8 <startupJingle+0x30>)
     dc0:	0030      	movs	r0, r6
     dc2:	47a8      	blx	r5
    delay_ms(80);
     dc4:	4c09      	ldr	r4, [pc, #36]	; (dec <startupJingle+0x34>)
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
    beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
    delay_ms(250);
     dce:	20fa      	movs	r0, #250	; 0xfa
     dd0:	47a0      	blx	r4
    beep(300);
     dd2:	0030      	movs	r0, r6
     dd4:	47a8      	blx	r5
    delay_ms(80);
     dd6:	2050      	movs	r0, #80	; 0x50
     dd8:	47a0      	blx	r4
    beep(300);
     dda:	0030      	movs	r0, r6
     ddc:	47a8      	blx	r5
    delay_ms(500);
     dde:	20fa      	movs	r0, #250	; 0xfa
     de0:	0040      	lsls	r0, r0, #1
     de2:	47a0      	blx	r4
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	00000d7d 	.word	0x00000d7d
     dec:	00000f95 	.word	0x00000f95

00000df0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     df4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df6:	4916      	ldr	r1, [pc, #88]	; (e50 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df8:	4a16      	ldr	r2, [pc, #88]	; (e54 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dfe:	6853      	ldr	r3, [r2, #4]
     e00:	4303      	orrs	r3, r0
     e02:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e04:	4b14      	ldr	r3, [pc, #80]	; (e58 <GclkInit+0x68>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e0a:	2a3f      	cmp	r2, #63	; 0x3f
     e0c:	d100      	bne.n	e10 <GclkInit+0x20>
        coarse = 0x1f;
     e0e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e12:	4813      	ldr	r0, [pc, #76]	; (e60 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	059b      	lsls	r3, r3, #22
     e18:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e1a:	4283      	cmp	r3, r0
     e1c:	d100      	bne.n	e20 <GclkInit+0x30>
        fine = 0x1ff;
     e1e:	4b11      	ldr	r3, [pc, #68]	; (e64 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e20:	4811      	ldr	r0, [pc, #68]	; (e68 <GclkInit+0x78>)
     e22:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e24:	2010      	movs	r0, #16
     e26:	68cc      	ldr	r4, [r1, #12]
     e28:	4204      	tst	r4, r0
     e2a:	d0fc      	beq.n	e26 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e2c:	0292      	lsls	r2, r2, #10
     e2e:	4313      	orrs	r3, r2
     e30:	4a07      	ldr	r2, [pc, #28]	; (e50 <GclkInit+0x60>)
     e32:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e34:	2310      	movs	r3, #16
     e36:	68ca      	ldr	r2, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e3c:	4a0b      	ldr	r2, [pc, #44]	; (e6c <GclkInit+0x7c>)
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <GclkInit+0x60>)
     e40:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e42:	2280      	movs	r2, #128	; 0x80
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <GclkInit+0x80>)
     e46:	0052      	lsls	r2, r2, #1
     e48:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e4a:	4a0a      	ldr	r2, [pc, #40]	; (e74 <GclkInit+0x84>)
     e4c:	605a      	str	r2, [r3, #4]
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	40000800 	.word	0x40000800
     e54:	41004000 	.word	0x41004000
     e58:	00806024 	.word	0x00806024
     e5c:	00806028 	.word	0x00806028
     e60:	000003ff 	.word	0x000003ff
     e64:	000001ff 	.word	0x000001ff
     e68:	00000522 	.word	0x00000522
     e6c:	000005a2 	.word	0x000005a2
     e70:	40000c00 	.word	0x40000c00
     e74:	00010700 	.word	0x00010700

00000e78 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e78:	4a1d      	ldr	r2, [pc, #116]	; (ef0 <RtcInit+0x78>)
     e7a:	4b1e      	ldr	r3, [pc, #120]	; (ef4 <RtcInit+0x7c>)
     e7c:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e7e:	2202      	movs	r2, #2
     e80:	68d9      	ldr	r1, [r3, #12]
     e82:	4211      	tst	r1, r2
     e84:	d0fc      	beq.n	e80 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e86:	2281      	movs	r2, #129	; 0x81
     e88:	4b1b      	ldr	r3, [pc, #108]	; (ef8 <RtcInit+0x80>)
     e8a:	0052      	lsls	r2, r2, #1
     e8c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e8e:	4a1b      	ldr	r2, [pc, #108]	; (efc <RtcInit+0x84>)
     e90:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e92:	785a      	ldrb	r2, [r3, #1]
     e94:	b252      	sxtb	r2, r2
     e96:	2a00      	cmp	r2, #0
     e98:	dbfb      	blt.n	e92 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e9a:	4a19      	ldr	r2, [pc, #100]	; (f00 <RtcInit+0x88>)
     e9c:	4b16      	ldr	r3, [pc, #88]	; (ef8 <RtcInit+0x80>)
     e9e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ea0:	2204      	movs	r2, #4
     ea2:	4b18      	ldr	r3, [pc, #96]	; (f04 <RtcInit+0x8c>)
     ea4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ea6:	7a9a      	ldrb	r2, [r3, #10]
     ea8:	4916      	ldr	r1, [pc, #88]	; (f04 <RtcInit+0x8c>)
     eaa:	09d2      	lsrs	r2, r2, #7
     eac:	d1fb      	bne.n	ea6 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     eae:	20a0      	movs	r0, #160	; 0xa0
     eb0:	880a      	ldrh	r2, [r1, #0]
     eb2:	00c0      	lsls	r0, r0, #3
     eb4:	4302      	orrs	r2, r0
     eb6:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eb8:	7a9a      	ldrb	r2, [r3, #10]
     eba:	09d2      	lsrs	r2, r2, #7
     ebc:	d1fc      	bne.n	eb8 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     ebe:	4912      	ldr	r1, [pc, #72]	; (f08 <RtcInit+0x90>)
     ec0:	4a10      	ldr	r2, [pc, #64]	; (f04 <RtcInit+0x8c>)
     ec2:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ec4:	7a99      	ldrb	r1, [r3, #10]
     ec6:	4a0f      	ldr	r2, [pc, #60]	; (f04 <RtcInit+0x8c>)
     ec8:	09c9      	lsrs	r1, r1, #7
     eca:	d1fb      	bne.n	ec4 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ecc:	8851      	ldrh	r1, [r2, #2]
     ece:	480f      	ldr	r0, [pc, #60]	; (f0c <RtcInit+0x94>)
     ed0:	4301      	orrs	r1, r0
     ed2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ed4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ed6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ed8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eda:	8811      	ldrh	r1, [r2, #0]
     edc:	4301      	orrs	r1, r0
     ede:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ee0:	7a9a      	ldrb	r2, [r3, #10]
     ee2:	09d2      	lsrs	r2, r2, #7
     ee4:	d1fc      	bne.n	ee0 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ee6:	4b0a      	ldr	r3, [pc, #40]	; (f10 <RtcInit+0x98>)
     ee8:	3208      	adds	r2, #8
     eea:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     eec:	4770      	bx	lr
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	0000060e 	.word	0x0000060e
     ef4:	40000800 	.word	0x40000800
     ef8:	40000c00 	.word	0x40000c00
     efc:	00230002 	.word	0x00230002
     f00:	00004204 	.word	0x00004204
     f04:	40001400 	.word	0x40001400
     f08:	000003e6 	.word	0x000003e6
     f0c:	00004010 	.word	0x00004010
     f10:	e000e100 	.word	0xe000e100

00000f14 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f14:	230f      	movs	r3, #15
     f16:	4018      	ands	r0, r3
     f18:	4b08      	ldr	r3, [pc, #32]	; (f3c <gclkEnable+0x28>)
     f1a:	0212      	lsls	r2, r2, #8
     f1c:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f1e:	23f8      	movs	r3, #248	; 0xf8
     f20:	0209      	lsls	r1, r1, #8
     f22:	015b      	lsls	r3, r3, #5
     f24:	4019      	ands	r1, r3
     f26:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f28:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f2a:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f2c:	4c04      	ldr	r4, [pc, #16]	; (f40 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f2e:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f30:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f32:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f34:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f36:	6060      	str	r0, [r4, #4]
}
     f38:	bd10      	pop	{r4, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00ffff00 	.word	0x00ffff00
     f40:	40000c00 	.word	0x40000c00

00000f44 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f44:	4b04      	ldr	r3, [pc, #16]	; (f58 <delayInit+0x14>)
     f46:	4a05      	ldr	r2, [pc, #20]	; (f5c <delayInit+0x18>)
     f48:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f4a:	2230      	movs	r2, #48	; 0x30
     f4c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f4e:	4b04      	ldr	r3, [pc, #16]	; (f60 <delayInit+0x1c>)
     f50:	3a2b      	subs	r2, #43	; 0x2b
     f52:	601a      	str	r2, [r3, #0]
}
     f54:	4770      	bx	lr
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	20000004 	.word	0x20000004
     f5c:	0000bb80 	.word	0x0000bb80
     f60:	e000e010 	.word	0xe000e010

00000f64 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f64:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f66:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f68:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f6a:	4b08      	ldr	r3, [pc, #32]	; (f8c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f6c:	4a08      	ldr	r2, [pc, #32]	; (f90 <delay_us+0x2c>)
     f6e:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f70:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f72:	3801      	subs	r0, #1
     f74:	d308      	bcc.n	f88 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f76:	2b00      	cmp	r3, #0
     f78:	d0fb      	beq.n	f72 <delay_us+0xe>
     f7a:	4e05      	ldr	r6, [pc, #20]	; (f90 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f7c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f7e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f80:	6835      	ldr	r5, [r6, #0]
     f82:	4225      	tst	r5, r4
     f84:	d0fc      	beq.n	f80 <delay_us+0x1c>
     f86:	e7f4      	b.n	f72 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f88:	bd70      	pop	{r4, r5, r6, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000004 	.word	0x20000004
     f90:	e000e010 	.word	0xe000e010

00000f94 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f94:	b570      	push	{r4, r5, r6, lr}
     f96:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f98:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f9a:	4b08      	ldr	r3, [pc, #32]	; (fbc <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f9c:	4a08      	ldr	r2, [pc, #32]	; (fc0 <delay_ms+0x2c>)
     f9e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fa2:	3801      	subs	r0, #1
     fa4:	d308      	bcc.n	fb8 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fa6:	2b00      	cmp	r3, #0
     fa8:	d0fb      	beq.n	fa2 <delay_ms+0xe>
     faa:	4e05      	ldr	r6, [pc, #20]	; (fc0 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fac:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fae:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb0:	6835      	ldr	r5, [r6, #0]
     fb2:	4225      	tst	r5, r4
     fb4:	d0fc      	beq.n	fb0 <delay_ms+0x1c>
     fb6:	e7f4      	b.n	fa2 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fb8:	bd70      	pop	{r4, r5, r6, pc}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	20000004 	.word	0x20000004
     fc0:	e000e010 	.word	0xe000e010

00000fc4 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     fc4:	21fa      	movs	r1, #250	; 0xfa
     fc6:	4a04      	ldr	r2, [pc, #16]	; (fd8 <RTC_Handler+0x14>)
     fc8:	0089      	lsls	r1, r1, #2
     fca:	6813      	ldr	r3, [r2, #0]
     fcc:	185b      	adds	r3, r3, r1
     fce:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     fd0:	22ff      	movs	r2, #255	; 0xff
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <RTC_Handler+0x18>)
     fd4:	721a      	strb	r2, [r3, #8]
}
     fd6:	4770      	bx	lr
     fd8:	200004cc 	.word	0x200004cc
     fdc:	40001400 	.word	0x40001400

00000fe0 <millis>:

uint32_t millis(void) {
     fe0:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     fe2:	f3ef 8110 	mrs	r1, PRIMASK
     fe6:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fe8:	4a08      	ldr	r2, [pc, #32]	; (100c <millis+0x2c>)
     fea:	4d09      	ldr	r5, [pc, #36]	; (1010 <millis+0x30>)
     fec:	8a10      	ldrh	r0, [r2, #16]
     fee:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ff0:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     ff2:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ff4:	09e4      	lsrs	r4, r4, #7
     ff6:	d004      	beq.n	1002 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     ff8:	8a13      	ldrh	r3, [r2, #16]
     ffa:	22fa      	movs	r2, #250	; 0xfa
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	0092      	lsls	r2, r2, #2
    1000:	1880      	adds	r0, r0, r2
    1002:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1004:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1008:	bd30      	pop	{r4, r5, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	40001400 	.word	0x40001400
    1010:	200004cc 	.word	0x200004cc

00001014 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1014:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1016:	4a0d      	ldr	r2, [pc, #52]	; (104c <TC4Init+0x38>)
    1018:	4b0d      	ldr	r3, [pc, #52]	; (1050 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    101a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    101c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    101e:	4a0d      	ldr	r2, [pc, #52]	; (1054 <TC4Init+0x40>)
    1020:	6a13      	ldr	r3, [r2, #32]
    1022:	430b      	orrs	r3, r1
    1024:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <TC4Init+0x44>)
    1028:	4a0c      	ldr	r2, [pc, #48]	; (105c <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    102a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    102c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    102e:	2241      	movs	r2, #65	; 0x41
    1030:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1032:	3a40      	subs	r2, #64	; 0x40
    1034:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1036:	32ff      	adds	r2, #255	; 0xff
    1038:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    103a:	881a      	ldrh	r2, [r3, #0]
    103c:	430a      	orrs	r2, r1
    103e:	801a      	strh	r2, [r3, #0]
    1040:	2280      	movs	r2, #128	; 0x80
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <TC4Init+0x4c>)
    1044:	0312      	lsls	r2, r2, #12
    1046:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1048:	4770      	bx	lr
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	0000421c 	.word	0x0000421c
    1050:	40000c00 	.word	0x40000c00
    1054:	40000400 	.word	0x40000400
    1058:	42003000 	.word	0x42003000
    105c:	00000904 	.word	0x00000904
    1060:	e000e100 	.word	0xe000e100

00001064 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1064:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1066:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1068:	4b02      	ldr	r3, [pc, #8]	; (1074 <TC4_Handler+0x10>)
    106a:	739a      	strb	r2, [r3, #14]
    pullSample();
    106c:	4b02      	ldr	r3, [pc, #8]	; (1078 <TC4_Handler+0x14>)
    106e:	4798      	blx	r3
}
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	42003000 	.word	0x42003000
    1078:	00002271 	.word	0x00002271

0000107c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    107c:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    107e:	4a0d      	ldr	r2, [pc, #52]	; (10b4 <TC5Init+0x38>)
    1080:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1082:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1084:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1086:	4a0d      	ldr	r2, [pc, #52]	; (10bc <TC5Init+0x40>)
    1088:	6a13      	ldr	r3, [r2, #32]
    108a:	430b      	orrs	r3, r1
    108c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    108e:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <TC5Init+0x44>)
    1090:	4a0c      	ldr	r2, [pc, #48]	; (10c4 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1092:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1094:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1096:	2220      	movs	r2, #32
    1098:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    109a:	3a1f      	subs	r2, #31
    109c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    109e:	32ff      	adds	r2, #255	; 0xff
    10a0:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10a2:	881a      	ldrh	r2, [r3, #0]
    10a4:	430a      	orrs	r2, r1
    10a6:	801a      	strh	r2, [r3, #0]
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	4b07      	ldr	r3, [pc, #28]	; (10c8 <TC5Init+0x4c>)
    10ac:	0352      	lsls	r2, r2, #13
    10ae:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10b0:	4770      	bx	lr
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	0000421c 	.word	0x0000421c
    10b8:	40000c00 	.word	0x40000c00
    10bc:	40000400 	.word	0x40000400
    10c0:	42003400 	.word	0x42003400
    10c4:	00000d04 	.word	0x00000d04
    10c8:	e000e100 	.word	0xe000e100

000010cc <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    10cc:	22ff      	movs	r2, #255	; 0xff
    10ce:	4b03      	ldr	r3, [pc, #12]	; (10dc <TC5_Handler+0x10>)
    10d0:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <TC5_Handler+0x14>)
    10d4:	3afe      	subs	r2, #254	; 0xfe
    10d6:	701a      	strb	r2, [r3, #0]
}
    10d8:	4770      	bx	lr
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	42003400 	.word	0x42003400
    10e0:	200004d1 	.word	0x200004d1

000010e4 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10e6:	27c0      	movs	r7, #192	; 0xc0
    10e8:	4d10      	ldr	r5, [pc, #64]	; (112c <dmaInit+0x48>)
    10ea:	003a      	movs	r2, r7
    10ec:	4e10      	ldr	r6, [pc, #64]	; (1130 <dmaInit+0x4c>)
    10ee:	0028      	movs	r0, r5
    10f0:	2100      	movs	r1, #0
    10f2:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    10f4:	4c0f      	ldr	r4, [pc, #60]	; (1134 <dmaInit+0x50>)
    10f6:	003a      	movs	r2, r7
    10f8:	2100      	movs	r1, #0
    10fa:	0020      	movs	r0, r4
    10fc:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    10fe:	2120      	movs	r1, #32
    1100:	4b0d      	ldr	r3, [pc, #52]	; (1138 <dmaInit+0x54>)
    1102:	695a      	ldr	r2, [r3, #20]
    1104:	430a      	orrs	r2, r1
    1106:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1108:	69da      	ldr	r2, [r3, #28]
    110a:	3910      	subs	r1, #16
    110c:	430a      	orrs	r2, r1
    110e:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1110:	4b0a      	ldr	r3, [pc, #40]	; (113c <dmaInit+0x58>)
    1112:	390e      	subs	r1, #14
    1114:	881a      	ldrh	r2, [r3, #0]
    1116:	438a      	bics	r2, r1
    1118:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    111a:	881a      	ldrh	r2, [r3, #0]
    111c:	3901      	subs	r1, #1
    111e:	430a      	orrs	r2, r1
    1120:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1122:	4a07      	ldr	r2, [pc, #28]	; (1140 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1124:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1126:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1128:	801a      	strh	r2, [r3, #0]
}
    112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    112c:	200005a0 	.word	0x200005a0
    1130:	00006331 	.word	0x00006331
    1134:	200004e0 	.word	0x200004e0
    1138:	40000400 	.word	0x40000400
    113c:	41004800 	.word	0x41004800
    1140:	00000f02 	.word	0x00000f02

00001144 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1146:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1148:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    114a:	2b01      	cmp	r3, #1
    114c:	d100      	bne.n	1150 <flight+0xc>
    114e:	e08c      	b.n	126a <flight+0x126>
    1150:	2b00      	cmp	r3, #0
    1152:	d003      	beq.n	115c <flight+0x18>
    1154:	2b02      	cmp	r3, #2
    1156:	d100      	bne.n	115a <flight+0x16>
    1158:	e098      	b.n	128c <flight+0x148>
    115a:	e0dd      	b.n	1318 <flight+0x1d4>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    115c:	0005      	movs	r5, r0
    115e:	35c0      	adds	r5, #192	; 0xc0
    1160:	6828      	ldr	r0, [r5, #0]
    1162:	6869      	ldr	r1, [r5, #4]
    1164:	4a6d      	ldr	r2, [pc, #436]	; (131c <flight+0x1d8>)
    1166:	4e6e      	ldr	r6, [pc, #440]	; (1320 <flight+0x1dc>)
    1168:	9501      	str	r5, [sp, #4]
    116a:	4b6e      	ldr	r3, [pc, #440]	; (1324 <flight+0x1e0>)
    116c:	47b0      	blx	r6
    116e:	0023      	movs	r3, r4
    1170:	33d4      	adds	r3, #212	; 0xd4
    1172:	0006      	movs	r6, r0
    1174:	6818      	ldr	r0, [r3, #0]
    1176:	4b6c      	ldr	r3, [pc, #432]	; (1328 <flight+0x1e4>)
    1178:	000f      	movs	r7, r1
    117a:	4798      	blx	r3
    117c:	4d68      	ldr	r5, [pc, #416]	; (1320 <flight+0x1dc>)
    117e:	4a67      	ldr	r2, [pc, #412]	; (131c <flight+0x1d8>)
    1180:	4b6a      	ldr	r3, [pc, #424]	; (132c <flight+0x1e8>)
    1182:	47a8      	blx	r5
    1184:	4d6a      	ldr	r5, [pc, #424]	; (1330 <flight+0x1ec>)
    1186:	0002      	movs	r2, r0
    1188:	000b      	movs	r3, r1
    118a:	0030      	movs	r0, r6
    118c:	0039      	movs	r1, r7
    118e:	47a8      	blx	r5
    1190:	9b01      	ldr	r3, [sp, #4]
    1192:	6018      	str	r0, [r3, #0]
    1194:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    1196:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1198:	4b66      	ldr	r3, [pc, #408]	; (1334 <flight+0x1f0>)
    119a:	4798      	blx	r3
    119c:	4d60      	ldr	r5, [pc, #384]	; (1320 <flight+0x1dc>)
    119e:	2200      	movs	r2, #0
    11a0:	4b65      	ldr	r3, [pc, #404]	; (1338 <flight+0x1f4>)
    11a2:	47a8      	blx	r5
    11a4:	2200      	movs	r2, #0
    11a6:	0006      	movs	r6, r0
    11a8:	000f      	movs	r7, r1
    11aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    11ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    11ae:	4b62      	ldr	r3, [pc, #392]	; (1338 <flight+0x1f4>)
    11b0:	47a8      	blx	r5
    11b2:	4d5f      	ldr	r5, [pc, #380]	; (1330 <flight+0x1ec>)
    11b4:	0002      	movs	r2, r0
    11b6:	000b      	movs	r3, r1
    11b8:	0030      	movs	r0, r6
    11ba:	0039      	movs	r1, r7
    11bc:	47a8      	blx	r5
    11be:	4b5f      	ldr	r3, [pc, #380]	; (133c <flight+0x1f8>)
    11c0:	4798      	blx	r3
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11c2:	4b5c      	ldr	r3, [pc, #368]	; (1334 <flight+0x1f0>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
    11c4:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    11c8:	4798      	blx	r3
    11ca:	4d55      	ldr	r5, [pc, #340]	; (1320 <flight+0x1dc>)
    11cc:	4a53      	ldr	r2, [pc, #332]	; (131c <flight+0x1d8>)
    11ce:	4b55      	ldr	r3, [pc, #340]	; (1324 <flight+0x1e0>)
    11d0:	47a8      	blx	r5
    11d2:	4b58      	ldr	r3, [pc, #352]	; (1334 <flight+0x1f0>)
    11d4:	0006      	movs	r6, r0
    11d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    11d8:	000f      	movs	r7, r1
    11da:	4798      	blx	r3
    11dc:	4a4f      	ldr	r2, [pc, #316]	; (131c <flight+0x1d8>)
    11de:	4b53      	ldr	r3, [pc, #332]	; (132c <flight+0x1e8>)
    11e0:	47a8      	blx	r5
    11e2:	4d53      	ldr	r5, [pc, #332]	; (1330 <flight+0x1ec>)
    11e4:	0002      	movs	r2, r0
    11e6:	000b      	movs	r3, r1
    11e8:	0030      	movs	r0, r6
    11ea:	0039      	movs	r1, r7
    11ec:	47a8      	blx	r5
    11ee:	4b53      	ldr	r3, [pc, #332]	; (133c <flight+0x1f8>)
    11f0:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11f2:	0027      	movs	r7, r4
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    11f4:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
    11f6:	4e52      	ldr	r6, [pc, #328]	; (1340 <flight+0x1fc>)
    11f8:	47b0      	blx	r6
    11fa:	37b0      	adds	r7, #176	; 0xb0
    11fc:	683b      	ldr	r3, [r7, #0]
    11fe:	1ac0      	subs	r0, r0, r3
    1200:	4b50      	ldr	r3, [pc, #320]	; (1344 <flight+0x200>)
    1202:	4298      	cmp	r0, r3
    1204:	d90c      	bls.n	1220 <flight+0xdc>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1206:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1208:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->myBarometer.altitudefeet * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    120a:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    120c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    120e:	6811      	ldr	r1, [r2, #0]
    1210:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 3000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1212:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1214:	0023      	movs	r3, r4
    1216:	33b8      	adds	r3, #184	; 0xb8
    1218:	6019      	str	r1, [r3, #0]
    121a:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    121c:	47b0      	blx	r6
    121e:	6038      	str	r0, [r7, #0]
        }

        //logSensors(my_altimeter);


        if ((millis() - my_altimeter->StartupTick) > 10000) {
    1220:	47b0      	blx	r6
    1222:	23ca      	movs	r3, #202	; 0xca
    1224:	009b      	lsls	r3, r3, #2
    1226:	58e3      	ldr	r3, [r4, r3]
    1228:	1ac0      	subs	r0, r0, r3
    122a:	4b47      	ldr	r3, [pc, #284]	; (1348 <flight+0x204>)
    122c:	4298      	cmp	r0, r3
    122e:	d90e      	bls.n	124e <flight+0x10a>
            findNewFlightStart(my_altimeter);
    1230:	0020      	movs	r0, r4
    1232:	4b46      	ldr	r3, [pc, #280]	; (134c <flight+0x208>)
    1234:	4798      	blx	r3
            logFlight(my_altimeter);
    1236:	0020      	movs	r0, r4
    1238:	4b45      	ldr	r3, [pc, #276]	; (1350 <flight+0x20c>)
    123a:	4798      	blx	r3
            startupJingle();
    123c:	4b45      	ldr	r3, [pc, #276]	; (1354 <flight+0x210>)
    123e:	4798      	blx	r3
            logEvent(my_altimeter, 'L');
    1240:	4b45      	ldr	r3, [pc, #276]	; (1358 <flight+0x214>)
    1242:	214c      	movs	r1, #76	; 0x4c
    1244:	0020      	movs	r0, r4
    1246:	4798      	blx	r3
            my_altimeter->myFlightState = flightPad;
    1248:	2302      	movs	r3, #2
    124a:	7023      	strb	r3, [r4, #0]
            break;
    124c:	e064      	b.n	1318 <flight+0x1d4>
        }

        attemptConnection(my_altimeter);
    124e:	0020      	movs	r0, r4
    1250:	4b42      	ldr	r3, [pc, #264]	; (135c <flight+0x218>)
    1252:	4798      	blx	r3



        if (my_altimeter->myVoltages.batFloat < 3.5) {
    1254:	23c6      	movs	r3, #198	; 0xc6
    1256:	009b      	lsls	r3, r3, #2
    1258:	58e0      	ldr	r0, [r4, r3]
    125a:	4941      	ldr	r1, [pc, #260]	; (1360 <flight+0x21c>)
    125c:	4b41      	ldr	r3, [pc, #260]	; (1364 <flight+0x220>)
    125e:	4798      	blx	r3
    1260:	2800      	cmp	r0, #0
    1262:	d059      	beq.n	1318 <flight+0x1d4>
            my_altimeter->myFlightState = flightIdle;
    1264:	2301      	movs	r3, #1
    1266:	7023      	strb	r3, [r4, #0]
    1268:	e03c      	b.n	12e4 <flight+0x1a0>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    126a:	4b3f      	ldr	r3, [pc, #252]	; (1368 <flight+0x224>)
    126c:	7e1b      	ldrb	r3, [r3, #24]
    126e:	075b      	lsls	r3, r3, #29
    1270:	d552      	bpl.n	1318 <flight+0x1d4>
            u8_t possibleReset = usartDataIn(USART3);
    1272:	2003      	movs	r0, #3
    1274:	4b3d      	ldr	r3, [pc, #244]	; (136c <flight+0x228>)
    1276:	4798      	blx	r3
            if (possibleReset == 0x52) {
    1278:	2852      	cmp	r0, #82	; 0x52
    127a:	d14d      	bne.n	1318 <flight+0x1d4>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    127c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1280:	4a3b      	ldr	r2, [pc, #236]	; (1370 <flight+0x22c>)
    1282:	4b3c      	ldr	r3, [pc, #240]	; (1374 <flight+0x230>)
    1284:	60da      	str	r2, [r3, #12]
    1286:	f3bf 8f4f 	dsb	sy
    128a:	e7fe      	b.n	128a <flight+0x146>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        if (writeLog) {
    128c:	4b3a      	ldr	r3, [pc, #232]	; (1378 <flight+0x234>)
    128e:	781a      	ldrb	r2, [r3, #0]
    1290:	2a00      	cmp	r2, #0
    1292:	d018      	beq.n	12c6 <flight+0x182>
            writeLog = false;
    1294:	2500      	movs	r5, #0
    1296:	701d      	strb	r5, [r3, #0]



            logSensors(my_altimeter);
    1298:	4b38      	ldr	r3, [pc, #224]	; (137c <flight+0x238>)
    129a:	4798      	blx	r3

            if (my_altimeter->myFlashMemory.pageReady) {
    129c:	4b38      	ldr	r3, [pc, #224]	; (1380 <flight+0x23c>)
    129e:	5ce2      	ldrb	r2, [r4, r3]
    12a0:	42aa      	cmp	r2, r5
    12a2:	d010      	beq.n	12c6 <flight+0x182>
    12a4:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    12a6:	54e5      	strb	r5, [r4, r3]

                pinToggle(LedPin);

                //AT25SFHoldTillReady();
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    12a8:	0021      	movs	r1, r4
    12aa:	0025      	movs	r5, r4
    12ac:	4b35      	ldr	r3, [pc, #212]	; (1384 <flight+0x240>)
    12ae:	0352      	lsls	r2, r2, #13
    12b0:	61da      	str	r2, [r3, #28]
    12b2:	35fc      	adds	r5, #252	; 0xfc
    12b4:	3111      	adds	r1, #17
    12b6:	4b34      	ldr	r3, [pc, #208]	; (1388 <flight+0x244>)
    12b8:	31ff      	adds	r1, #255	; 0xff
    12ba:	68e8      	ldr	r0, [r5, #12]
    12bc:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    12be:	68eb      	ldr	r3, [r5, #12]
    12c0:	3301      	adds	r3, #1
    12c2:	33ff      	adds	r3, #255	; 0xff
    12c4:	60eb      	str	r3, [r5, #12]


            }
        }

        if (my_altimeter->myVoltages.batFloat < 3.5) {
    12c6:	23c6      	movs	r3, #198	; 0xc6
    12c8:	009b      	lsls	r3, r3, #2
    12ca:	58e0      	ldr	r0, [r4, r3]
    12cc:	4924      	ldr	r1, [pc, #144]	; (1360 <flight+0x21c>)
    12ce:	4b25      	ldr	r3, [pc, #148]	; (1364 <flight+0x220>)
    12d0:	4798      	blx	r3
    12d2:	2800      	cmp	r0, #0
    12d4:	d020      	beq.n	1318 <flight+0x1d4>
            my_altimeter->myFlightState = flightIdle;
    12d6:	2301      	movs	r3, #1
    12d8:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    12da:	4b2c      	ldr	r3, [pc, #176]	; (138c <flight+0x248>)
    12dc:	4798      	blx	r3
            writeFlightEndAddress(my_altimeter);
    12de:	0020      	movs	r0, r4
    12e0:	4b2b      	ldr	r3, [pc, #172]	; (1390 <flight+0x24c>)
    12e2:	4798      	blx	r3
            delay_ms(80);
    12e4:	4c2b      	ldr	r4, [pc, #172]	; (1394 <flight+0x250>)
    12e6:	2050      	movs	r0, #80	; 0x50
    12e8:	47a0      	blx	r4
            beep(300);
    12ea:	2096      	movs	r0, #150	; 0x96
    12ec:	4d2a      	ldr	r5, [pc, #168]	; (1398 <flight+0x254>)
    12ee:	0040      	lsls	r0, r0, #1
    12f0:	47a8      	blx	r5
            delay_ms(80);
    12f2:	2050      	movs	r0, #80	; 0x50
    12f4:	47a0      	blx	r4
            beep(300);
    12f6:	2096      	movs	r0, #150	; 0x96
    12f8:	0040      	lsls	r0, r0, #1
    12fa:	47a8      	blx	r5
            delay_ms(80);
    12fc:	2050      	movs	r0, #80	; 0x50
    12fe:	47a0      	blx	r4
            beep(300);
    1300:	2096      	movs	r0, #150	; 0x96
    1302:	0040      	lsls	r0, r0, #1
    1304:	47a8      	blx	r5
            delay_ms(80);
    1306:	2050      	movs	r0, #80	; 0x50
    1308:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    130a:	2280      	movs	r2, #128	; 0x80
    130c:	4b1d      	ldr	r3, [pc, #116]	; (1384 <flight+0x240>)
    130e:	0392      	lsls	r2, r2, #14
    1310:	615a      	str	r2, [r3, #20]
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	0352      	lsls	r2, r2, #13
    1316:	615a      	str	r2, [r3, #20]

        break;
    }


}
    1318:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	9999999a 	.word	0x9999999a
    1320:	0000528d 	.word	0x0000528d
    1324:	3fe99999 	.word	0x3fe99999
    1328:	00005fc9 	.word	0x00005fc9
    132c:	3fc99999 	.word	0x3fc99999
    1330:	000043ed 	.word	0x000043ed
    1334:	00005f59 	.word	0x00005f59
    1338:	3fe00000 	.word	0x3fe00000
    133c:	00003c49 	.word	0x00003c49
    1340:	00000fe1 	.word	0x00000fe1
    1344:	00000bb8 	.word	0x00000bb8
    1348:	00002710 	.word	0x00002710
    134c:	000021b1 	.word	0x000021b1
    1350:	00001f7d 	.word	0x00001f7d
    1354:	00000db9 	.word	0x00000db9
    1358:	00001fdd 	.word	0x00001fdd
    135c:	000027c5 	.word	0x000027c5
    1360:	40600000 	.word	0x40600000
    1364:	00003b71 	.word	0x00003b71
    1368:	42001400 	.word	0x42001400
    136c:	000027b5 	.word	0x000027b5
    1370:	05fa0004 	.word	0x05fa0004
    1374:	e000ed00 	.word	0xe000ed00
    1378:	200004d1 	.word	0x200004d1
    137c:	00002029 	.word	0x00002029
    1380:	00000311 	.word	0x00000311
    1384:	41004400 	.word	0x41004400
    1388:	000002cd 	.word	0x000002cd
    138c:	000001e5 	.word	0x000001e5
    1390:	0000217d 	.word	0x0000217d
    1394:	00000f95 	.word	0x00000f95
    1398:	00000d7d 	.word	0x00000d7d

0000139c <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    139c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    139e:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    13a0:	4cdb      	ldr	r4, [pc, #876]	; (1710 <computeKalmanGains+0x374>)
    13a2:	4adc      	ldr	r2, [pc, #880]	; (1714 <computeKalmanGains+0x378>)
    13a4:	4bdc      	ldr	r3, [pc, #880]	; (1718 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    13a6:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    13a8:	60a2      	str	r2, [r4, #8]
    13aa:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    13ac:	62a2      	str	r2, [r4, #40]	; 0x28
    13ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    13b0:	4ada      	ldr	r2, [pc, #872]	; (171c <computeKalmanGains+0x380>)
    13b2:	4bdb      	ldr	r3, [pc, #876]	; (1720 <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    13b4:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    13b6:	6122      	str	r2, [r4, #16]
    13b8:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13ba:	48d6      	ldr	r0, [pc, #856]	; (1714 <computeKalmanGains+0x378>)
    13bc:	49d9      	ldr	r1, [pc, #868]	; (1724 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    13be:	2200      	movs	r2, #0
    13c0:	ae4c      	add	r6, sp, #304	; 0x130
    13c2:	ab40      	add	r3, sp, #256	; 0x100
    13c4:	1977      	adds	r7, r6, r5
    13c6:	18ee      	adds	r6, r5, r3
    13c8:	4bd7      	ldr	r3, [pc, #860]	; (1728 <computeKalmanGains+0x38c>)
    13ca:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13cc:	6038      	str	r0, [r7, #0]
    13ce:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    13d0:	6032      	str	r2, [r6, #0]
    13d2:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13d4:	60b8      	str	r0, [r7, #8]
    13d6:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    13d8:	60b2      	str	r2, [r6, #8]
    13da:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    13dc:	2d30      	cmp	r5, #48	; 0x30
    13de:	d1ee      	bne.n	13be <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    13e0:	6822      	ldr	r2, [r4, #0]
    13e2:	6863      	ldr	r3, [r4, #4]
    13e4:	921a      	str	r2, [sp, #104]	; 0x68
    13e6:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    13e8:	69a2      	ldr	r2, [r4, #24]
    13ea:	69e3      	ldr	r3, [r4, #28]
    13ec:	921c      	str	r2, [sp, #112]	; 0x70
    13ee:	931d      	str	r3, [sp, #116]	; 0x74
    13f0:	6a22      	ldr	r2, [r4, #32]
    13f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13f4:	921e      	str	r2, [sp, #120]	; 0x78
    13f6:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    13f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    13fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13fc:	9220      	str	r2, [sp, #128]	; 0x80
    13fe:	9321      	str	r3, [sp, #132]	; 0x84
    1400:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1402:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1404:	9222      	str	r2, [sp, #136]	; 0x88
    1406:	9323      	str	r3, [sp, #140]	; 0x8c
    1408:	6c22      	ldr	r2, [r4, #64]	; 0x40
    140a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    140c:	9224      	str	r2, [sp, #144]	; 0x90
    140e:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1410:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1414:	9238      	str	r2, [sp, #224]	; 0xe0
    1416:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1418:	6d22      	ldr	r2, [r4, #80]	; 0x50
    141a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    141c:	923a      	str	r2, [sp, #232]	; 0xe8
    141e:	933b      	str	r3, [sp, #236]	; 0xec
    1420:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1422:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    1424:	933c      	str	r3, [sp, #240]	; 0xf0
    1426:	943d      	str	r4, [sp, #244]	; 0xf4
    1428:	2300      	movs	r3, #0
    142a:	4cc0      	ldr	r4, [pc, #768]	; (172c <computeKalmanGains+0x390>)
    142c:	9302      	str	r3, [sp, #8]
    142e:	9403      	str	r4, [sp, #12]
    1430:	2300      	movs	r3, #0
    1432:	2400      	movs	r4, #0
    1434:	9312      	str	r3, [sp, #72]	; 0x48
    1436:	9413      	str	r4, [sp, #76]	; 0x4c
    1438:	9310      	str	r3, [sp, #64]	; 0x40
    143a:	9411      	str	r4, [sp, #68]	; 0x44
    143c:	9304      	str	r3, [sp, #16]
    143e:	9405      	str	r4, [sp, #20]
    1440:	2300      	movs	r3, #0
    1442:	4cba      	ldr	r4, [pc, #744]	; (172c <computeKalmanGains+0x390>)
    1444:	930e      	str	r3, [sp, #56]	; 0x38
    1446:	940f      	str	r4, [sp, #60]	; 0x3c
    1448:	2300      	movs	r3, #0
    144a:	2400      	movs	r4, #0
    144c:	9308      	str	r3, [sp, #32]
    144e:	9409      	str	r4, [sp, #36]	; 0x24
    1450:	930c      	str	r3, [sp, #48]	; 0x30
    1452:	940d      	str	r4, [sp, #52]	; 0x34
    1454:	930a      	str	r3, [sp, #40]	; 0x28
    1456:	940b      	str	r4, [sp, #44]	; 0x2c
    1458:	2480      	movs	r4, #128	; 0x80
    145a:	2300      	movs	r3, #0
    145c:	05e4      	lsls	r4, r4, #23
    145e:	9306      	str	r3, [sp, #24]
    1460:	9407      	str	r4, [sp, #28]
    1462:	2300      	movs	r3, #0
    1464:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1466:	4db2      	ldr	r5, [pc, #712]	; (1730 <computeKalmanGains+0x394>)
    1468:	9a06      	ldr	r2, [sp, #24]
    146a:	9b07      	ldr	r3, [sp, #28]
    146c:	981a      	ldr	r0, [sp, #104]	; 0x68
    146e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1470:	47a8      	blx	r5
    1472:	4aa8      	ldr	r2, [pc, #672]	; (1714 <computeKalmanGains+0x378>)
    1474:	0006      	movs	r6, r0
    1476:	000f      	movs	r7, r1
    1478:	9808      	ldr	r0, [sp, #32]
    147a:	9909      	ldr	r1, [sp, #36]	; 0x24
    147c:	4ba6      	ldr	r3, [pc, #664]	; (1718 <computeKalmanGains+0x37c>)
    147e:	47a8      	blx	r5
    1480:	4cac      	ldr	r4, [pc, #688]	; (1734 <computeKalmanGains+0x398>)
    1482:	0002      	movs	r2, r0
    1484:	000b      	movs	r3, r1
    1486:	0030      	movs	r0, r6
    1488:	0039      	movs	r1, r7
    148a:	47a0      	blx	r4
    148c:	4aa3      	ldr	r2, [pc, #652]	; (171c <computeKalmanGains+0x380>)
    148e:	0006      	movs	r6, r0
    1490:	000f      	movs	r7, r1
    1492:	9810      	ldr	r0, [sp, #64]	; 0x40
    1494:	9911      	ldr	r1, [sp, #68]	; 0x44
    1496:	4ba2      	ldr	r3, [pc, #648]	; (1720 <computeKalmanGains+0x384>)
    1498:	47a8      	blx	r5
    149a:	0002      	movs	r2, r0
    149c:	000b      	movs	r3, r1
    149e:	0030      	movs	r0, r6
    14a0:	0039      	movs	r1, r7
    14a2:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    14a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    14a8:	9016      	str	r0, [sp, #88]	; 0x58
    14aa:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14ac:	981a      	ldr	r0, [sp, #104]	; 0x68
    14ae:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14b0:	47a8      	blx	r5
    14b2:	4a98      	ldr	r2, [pc, #608]	; (1714 <computeKalmanGains+0x378>)
    14b4:	0006      	movs	r6, r0
    14b6:	000f      	movs	r7, r1
    14b8:	980e      	ldr	r0, [sp, #56]	; 0x38
    14ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    14bc:	4b96      	ldr	r3, [pc, #600]	; (1718 <computeKalmanGains+0x37c>)
    14be:	47a8      	blx	r5
    14c0:	0002      	movs	r2, r0
    14c2:	000b      	movs	r3, r1
    14c4:	0030      	movs	r0, r6
    14c6:	0039      	movs	r1, r7
    14c8:	47a0      	blx	r4
    14ca:	4a94      	ldr	r2, [pc, #592]	; (171c <computeKalmanGains+0x380>)
    14cc:	0006      	movs	r6, r0
    14ce:	000f      	movs	r7, r1
    14d0:	9812      	ldr	r0, [sp, #72]	; 0x48
    14d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    14d4:	4b92      	ldr	r3, [pc, #584]	; (1720 <computeKalmanGains+0x384>)
    14d6:	47a8      	blx	r5
    14d8:	0002      	movs	r2, r0
    14da:	000b      	movs	r3, r1
    14dc:	0030      	movs	r0, r6
    14de:	0039      	movs	r1, r7
    14e0:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14e6:	9000      	str	r0, [sp, #0]
    14e8:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14ea:	981a      	ldr	r0, [sp, #104]	; 0x68
    14ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14ee:	47a8      	blx	r5
    14f0:	4a88      	ldr	r2, [pc, #544]	; (1714 <computeKalmanGains+0x378>)
    14f2:	0006      	movs	r6, r0
    14f4:	000f      	movs	r7, r1
    14f6:	9804      	ldr	r0, [sp, #16]
    14f8:	9905      	ldr	r1, [sp, #20]
    14fa:	4b87      	ldr	r3, [pc, #540]	; (1718 <computeKalmanGains+0x37c>)
    14fc:	47a8      	blx	r5
    14fe:	0002      	movs	r2, r0
    1500:	000b      	movs	r3, r1
    1502:	0030      	movs	r0, r6
    1504:	0039      	movs	r1, r7
    1506:	47a0      	blx	r4
    1508:	4a84      	ldr	r2, [pc, #528]	; (171c <computeKalmanGains+0x380>)
    150a:	0006      	movs	r6, r0
    150c:	000f      	movs	r7, r1
    150e:	9802      	ldr	r0, [sp, #8]
    1510:	9903      	ldr	r1, [sp, #12]
    1512:	4b83      	ldr	r3, [pc, #524]	; (1720 <computeKalmanGains+0x384>)
    1514:	47a8      	blx	r5
    1516:	0002      	movs	r2, r0
    1518:	000b      	movs	r3, r1
    151a:	0030      	movs	r0, r6
    151c:	0039      	movs	r1, r7
    151e:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1520:	9a06      	ldr	r2, [sp, #24]
    1522:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1524:	9014      	str	r0, [sp, #80]	; 0x50
    1526:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1528:	981c      	ldr	r0, [sp, #112]	; 0x70
    152a:	991d      	ldr	r1, [sp, #116]	; 0x74
    152c:	47a8      	blx	r5
    152e:	9a08      	ldr	r2, [sp, #32]
    1530:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1532:	0006      	movs	r6, r0
    1534:	000f      	movs	r7, r1
    1536:	981e      	ldr	r0, [sp, #120]	; 0x78
    1538:	991f      	ldr	r1, [sp, #124]	; 0x7c
    153a:	47a8      	blx	r5
    153c:	0002      	movs	r2, r0
    153e:	000b      	movs	r3, r1
    1540:	0030      	movs	r0, r6
    1542:	0039      	movs	r1, r7
    1544:	47a0      	blx	r4
    1546:	4a73      	ldr	r2, [pc, #460]	; (1714 <computeKalmanGains+0x378>)
    1548:	0006      	movs	r6, r0
    154a:	000f      	movs	r7, r1
    154c:	9810      	ldr	r0, [sp, #64]	; 0x40
    154e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1550:	4b71      	ldr	r3, [pc, #452]	; (1718 <computeKalmanGains+0x37c>)
    1552:	47a8      	blx	r5
    1554:	0002      	movs	r2, r0
    1556:	000b      	movs	r3, r1
    1558:	0030      	movs	r0, r6
    155a:	0039      	movs	r1, r7
    155c:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    155e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1562:	9018      	str	r0, [sp, #96]	; 0x60
    1564:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1566:	981c      	ldr	r0, [sp, #112]	; 0x70
    1568:	991d      	ldr	r1, [sp, #116]	; 0x74
    156a:	47a8      	blx	r5
    156c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    156e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1570:	0006      	movs	r6, r0
    1572:	000f      	movs	r7, r1
    1574:	981e      	ldr	r0, [sp, #120]	; 0x78
    1576:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1578:	47a8      	blx	r5
    157a:	0002      	movs	r2, r0
    157c:	000b      	movs	r3, r1
    157e:	0030      	movs	r0, r6
    1580:	0039      	movs	r1, r7
    1582:	47a0      	blx	r4
    1584:	4a63      	ldr	r2, [pc, #396]	; (1714 <computeKalmanGains+0x378>)
    1586:	0006      	movs	r6, r0
    1588:	000f      	movs	r7, r1
    158a:	9812      	ldr	r0, [sp, #72]	; 0x48
    158c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    158e:	4b62      	ldr	r3, [pc, #392]	; (1718 <computeKalmanGains+0x37c>)
    1590:	47a8      	blx	r5
    1592:	0002      	movs	r2, r0
    1594:	000b      	movs	r3, r1
    1596:	0030      	movs	r0, r6
    1598:	0039      	movs	r1, r7
    159a:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    159c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    159e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15a0:	9026      	str	r0, [sp, #152]	; 0x98
    15a2:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15a4:	981c      	ldr	r0, [sp, #112]	; 0x70
    15a6:	991d      	ldr	r1, [sp, #116]	; 0x74
    15a8:	47a8      	blx	r5
    15aa:	9a04      	ldr	r2, [sp, #16]
    15ac:	9b05      	ldr	r3, [sp, #20]
    15ae:	0006      	movs	r6, r0
    15b0:	000f      	movs	r7, r1
    15b2:	981e      	ldr	r0, [sp, #120]	; 0x78
    15b4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    15b6:	47a8      	blx	r5
    15b8:	0002      	movs	r2, r0
    15ba:	000b      	movs	r3, r1
    15bc:	0030      	movs	r0, r6
    15be:	0039      	movs	r1, r7
    15c0:	47a0      	blx	r4
    15c2:	4a54      	ldr	r2, [pc, #336]	; (1714 <computeKalmanGains+0x378>)
    15c4:	0006      	movs	r6, r0
    15c6:	000f      	movs	r7, r1
    15c8:	9802      	ldr	r0, [sp, #8]
    15ca:	9903      	ldr	r1, [sp, #12]
    15cc:	4b52      	ldr	r3, [pc, #328]	; (1718 <computeKalmanGains+0x37c>)
    15ce:	47a8      	blx	r5
    15d0:	0002      	movs	r2, r0
    15d2:	000b      	movs	r3, r1
    15d4:	0030      	movs	r0, r6
    15d6:	0039      	movs	r1, r7
    15d8:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15da:	9a06      	ldr	r2, [sp, #24]
    15dc:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15de:	9028      	str	r0, [sp, #160]	; 0xa0
    15e0:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15e2:	9820      	ldr	r0, [sp, #128]	; 0x80
    15e4:	9921      	ldr	r1, [sp, #132]	; 0x84
    15e6:	47a8      	blx	r5
    15e8:	9a08      	ldr	r2, [sp, #32]
    15ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15ec:	0006      	movs	r6, r0
    15ee:	000f      	movs	r7, r1
    15f0:	9822      	ldr	r0, [sp, #136]	; 0x88
    15f2:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15f4:	47a8      	blx	r5
    15f6:	0002      	movs	r2, r0
    15f8:	000b      	movs	r3, r1
    15fa:	0030      	movs	r0, r6
    15fc:	0039      	movs	r1, r7
    15fe:	47a0      	blx	r4
    1600:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1602:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1604:	0006      	movs	r6, r0
    1606:	000f      	movs	r7, r1
    1608:	9824      	ldr	r0, [sp, #144]	; 0x90
    160a:	9925      	ldr	r1, [sp, #148]	; 0x94
    160c:	47a8      	blx	r5
    160e:	0002      	movs	r2, r0
    1610:	000b      	movs	r3, r1
    1612:	0030      	movs	r0, r6
    1614:	0039      	movs	r1, r7
    1616:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    161a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    161c:	9010      	str	r0, [sp, #64]	; 0x40
    161e:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1620:	9820      	ldr	r0, [sp, #128]	; 0x80
    1622:	9921      	ldr	r1, [sp, #132]	; 0x84
    1624:	47a8      	blx	r5
    1626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    162a:	0006      	movs	r6, r0
    162c:	000f      	movs	r7, r1
    162e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1630:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1632:	47a8      	blx	r5
    1634:	0002      	movs	r2, r0
    1636:	000b      	movs	r3, r1
    1638:	0030      	movs	r0, r6
    163a:	0039      	movs	r1, r7
    163c:	47a0      	blx	r4
    163e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1642:	0006      	movs	r6, r0
    1644:	000f      	movs	r7, r1
    1646:	9824      	ldr	r0, [sp, #144]	; 0x90
    1648:	9925      	ldr	r1, [sp, #148]	; 0x94
    164a:	47a8      	blx	r5
    164c:	0002      	movs	r2, r0
    164e:	000b      	movs	r3, r1
    1650:	0030      	movs	r0, r6
    1652:	0039      	movs	r1, r7
    1654:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    165a:	9006      	str	r0, [sp, #24]
    165c:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    165e:	9820      	ldr	r0, [sp, #128]	; 0x80
    1660:	9921      	ldr	r1, [sp, #132]	; 0x84
    1662:	47a8      	blx	r5
    1664:	9a04      	ldr	r2, [sp, #16]
    1666:	9b05      	ldr	r3, [sp, #20]
    1668:	0006      	movs	r6, r0
    166a:	000f      	movs	r7, r1
    166c:	9822      	ldr	r0, [sp, #136]	; 0x88
    166e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1670:	47a8      	blx	r5
    1672:	0002      	movs	r2, r0
    1674:	000b      	movs	r3, r1
    1676:	0030      	movs	r0, r6
    1678:	0039      	movs	r1, r7
    167a:	47a0      	blx	r4
    167c:	9a02      	ldr	r2, [sp, #8]
    167e:	9b03      	ldr	r3, [sp, #12]
    1680:	0006      	movs	r6, r0
    1682:	000f      	movs	r7, r1
    1684:	9824      	ldr	r0, [sp, #144]	; 0x90
    1686:	9925      	ldr	r1, [sp, #148]	; 0x94
    1688:	47a8      	blx	r5
    168a:	0002      	movs	r2, r0
    168c:	000b      	movs	r3, r1
    168e:	0030      	movs	r0, r6
    1690:	0039      	movs	r1, r7
    1692:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1694:	4a1f      	ldr	r2, [pc, #124]	; (1714 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1696:	9002      	str	r0, [sp, #8]
    1698:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    169a:	9800      	ldr	r0, [sp, #0]
    169c:	9901      	ldr	r1, [sp, #4]
    169e:	4b1e      	ldr	r3, [pc, #120]	; (1718 <computeKalmanGains+0x37c>)
    16a0:	47a8      	blx	r5
    16a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    16a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    16a6:	47a0      	blx	r4
    16a8:	4a1c      	ldr	r2, [pc, #112]	; (171c <computeKalmanGains+0x380>)
    16aa:	0006      	movs	r6, r0
    16ac:	000f      	movs	r7, r1
    16ae:	9814      	ldr	r0, [sp, #80]	; 0x50
    16b0:	9915      	ldr	r1, [sp, #84]	; 0x54
    16b2:	4b1b      	ldr	r3, [pc, #108]	; (1720 <computeKalmanGains+0x384>)
    16b4:	47a8      	blx	r5
    16b6:	0002      	movs	r2, r0
    16b8:	000b      	movs	r3, r1
    16ba:	0030      	movs	r0, r6
    16bc:	0039      	movs	r1, r7
    16be:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16c0:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16c2:	9008      	str	r0, [sp, #32]
    16c4:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    16c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    16ca:	2300      	movs	r3, #0
    16cc:	47a8      	blx	r5
    16ce:	0006      	movs	r6, r0
    16d0:	000f      	movs	r7, r1
    16d2:	0002      	movs	r2, r0
    16d4:	000b      	movs	r3, r1
    16d6:	9800      	ldr	r0, [sp, #0]
    16d8:	9901      	ldr	r1, [sp, #4]
    16da:	47a0      	blx	r4
    16dc:	4a0d      	ldr	r2, [pc, #52]	; (1714 <computeKalmanGains+0x378>)
    16de:	9004      	str	r0, [sp, #16]
    16e0:	9105      	str	r1, [sp, #20]
    16e2:	9814      	ldr	r0, [sp, #80]	; 0x50
    16e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    16e6:	4b0c      	ldr	r3, [pc, #48]	; (1718 <computeKalmanGains+0x37c>)
    16e8:	47a8      	blx	r5
    16ea:	0002      	movs	r2, r0
    16ec:	000b      	movs	r3, r1
    16ee:	9804      	ldr	r0, [sp, #16]
    16f0:	9905      	ldr	r1, [sp, #20]
    16f2:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16f4:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16f6:	9030      	str	r0, [sp, #192]	; 0xc0
    16f8:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16fa:	9800      	ldr	r0, [sp, #0]
    16fc:	9901      	ldr	r1, [sp, #4]
    16fe:	2300      	movs	r3, #0
    1700:	47a8      	blx	r5
    1702:	0032      	movs	r2, r6
    1704:	003b      	movs	r3, r7
    1706:	47a0      	blx	r4
    1708:	9a14      	ldr	r2, [sp, #80]	; 0x50
    170a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    170c:	47a0      	blx	r4
    170e:	e013      	b.n	1738 <computeKalmanGains+0x39c>
    1710:	20000010 	.word	0x20000010
    1714:	d2f1a9fc 	.word	0xd2f1a9fc
    1718:	3f80624d 	.word	0x3f80624d
    171c:	a0b5ed8d 	.word	0xa0b5ed8d
    1720:	3f00c6f7 	.word	0x3f00c6f7
    1724:	3f50624d 	.word	0x3f50624d
    1728:	3ff00000 	.word	0x3ff00000
    172c:	40220000 	.word	0x40220000
    1730:	0000528d 	.word	0x0000528d
    1734:	000043ed 	.word	0x000043ed
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1738:	4ada      	ldr	r2, [pc, #872]	; (1aa4 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    173a:	9114      	str	r1, [sp, #80]	; 0x50
    173c:	9004      	str	r0, [sp, #16]
    173e:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1740:	4bd9      	ldr	r3, [pc, #868]	; (1aa8 <computeKalmanGains+0x70c>)
    1742:	9826      	ldr	r0, [sp, #152]	; 0x98
    1744:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1746:	47a8      	blx	r5
    1748:	9a18      	ldr	r2, [sp, #96]	; 0x60
    174a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    174c:	47a0      	blx	r4
    174e:	4ad7      	ldr	r2, [pc, #860]	; (1aac <computeKalmanGains+0x710>)
    1750:	0006      	movs	r6, r0
    1752:	000f      	movs	r7, r1
    1754:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1756:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1758:	4bd5      	ldr	r3, [pc, #852]	; (1ab0 <computeKalmanGains+0x714>)
    175a:	47a8      	blx	r5
    175c:	0002      	movs	r2, r0
    175e:	000b      	movs	r3, r1
    1760:	0030      	movs	r0, r6
    1762:	0039      	movs	r1, r7
    1764:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1766:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1768:	902a      	str	r0, [sp, #168]	; 0xa8
    176a:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    176c:	9818      	ldr	r0, [sp, #96]	; 0x60
    176e:	9919      	ldr	r1, [sp, #100]	; 0x64
    1770:	2300      	movs	r3, #0
    1772:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1774:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1776:	9032      	str	r0, [sp, #200]	; 0xc8
    1778:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    177a:	9826      	ldr	r0, [sp, #152]	; 0x98
    177c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    177e:	2300      	movs	r3, #0
    1780:	47a8      	blx	r5
    1782:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1784:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1786:	47a0      	blx	r4
    1788:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    178a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    178c:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    178e:	4ac5      	ldr	r2, [pc, #788]	; (1aa4 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1790:	902c      	str	r0, [sp, #176]	; 0xb0
    1792:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1794:	9806      	ldr	r0, [sp, #24]
    1796:	9907      	ldr	r1, [sp, #28]
    1798:	4bc3      	ldr	r3, [pc, #780]	; (1aa8 <computeKalmanGains+0x70c>)
    179a:	47a8      	blx	r5
    179c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    179e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    17a0:	47a0      	blx	r4
    17a2:	4ac2      	ldr	r2, [pc, #776]	; (1aac <computeKalmanGains+0x710>)
    17a4:	0006      	movs	r6, r0
    17a6:	000f      	movs	r7, r1
    17a8:	9802      	ldr	r0, [sp, #8]
    17aa:	9903      	ldr	r1, [sp, #12]
    17ac:	4bc0      	ldr	r3, [pc, #768]	; (1ab0 <computeKalmanGains+0x714>)
    17ae:	47a8      	blx	r5
    17b0:	0002      	movs	r2, r0
    17b2:	000b      	movs	r3, r1
    17b4:	0030      	movs	r0, r6
    17b6:	0039      	movs	r1, r7
    17b8:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17ba:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17bc:	9000      	str	r0, [sp, #0]
    17be:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    17c2:	9911      	ldr	r1, [sp, #68]	; 0x44
    17c4:	2300      	movs	r3, #0
    17c6:	47a8      	blx	r5
    17c8:	0006      	movs	r6, r0
    17ca:	000f      	movs	r7, r1
    17cc:	0002      	movs	r2, r0
    17ce:	000b      	movs	r3, r1
    17d0:	9806      	ldr	r0, [sp, #24]
    17d2:	9907      	ldr	r1, [sp, #28]
    17d4:	47a0      	blx	r4
    17d6:	4ab3      	ldr	r2, [pc, #716]	; (1aa4 <computeKalmanGains+0x708>)
    17d8:	900a      	str	r0, [sp, #40]	; 0x28
    17da:	910b      	str	r1, [sp, #44]	; 0x2c
    17dc:	9802      	ldr	r0, [sp, #8]
    17de:	9903      	ldr	r1, [sp, #12]
    17e0:	4bb1      	ldr	r3, [pc, #708]	; (1aa8 <computeKalmanGains+0x70c>)
    17e2:	47a8      	blx	r5
    17e4:	0002      	movs	r2, r0
    17e6:	000b      	movs	r3, r1
    17e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    17ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17ec:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ee:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17f0:	9012      	str	r0, [sp, #72]	; 0x48
    17f2:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17f4:	9806      	ldr	r0, [sp, #24]
    17f6:	9907      	ldr	r1, [sp, #28]
    17f8:	2300      	movs	r3, #0
    17fa:	47a8      	blx	r5
    17fc:	0032      	movs	r2, r6
    17fe:	003b      	movs	r3, r7
    1800:	47a0      	blx	r4
    1802:	9a02      	ldr	r2, [sp, #8]
    1804:	9b03      	ldr	r3, [sp, #12]
    1806:	47a0      	blx	r4
    1808:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    180a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    180c:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    180e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1810:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1812:	9002      	str	r0, [sp, #8]
    1814:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1816:	9808      	ldr	r0, [sp, #32]
    1818:	9909      	ldr	r1, [sp, #36]	; 0x24
    181a:	47a0      	blx	r4
    181c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    181e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    1820:	900a      	str	r0, [sp, #40]	; 0x28
    1822:	910b      	str	r1, [sp, #44]	; 0x2c
    1824:	9802      	ldr	r0, [sp, #8]
    1826:	9903      	ldr	r1, [sp, #12]
    1828:	47a0      	blx	r4
    182a:	9a00      	ldr	r2, [sp, #0]
    182c:	9b01      	ldr	r3, [sp, #4]
    182e:	900c      	str	r0, [sp, #48]	; 0x30
    1830:	910d      	str	r1, [sp, #52]	; 0x34
    1832:	9804      	ldr	r0, [sp, #16]
    1834:	9916      	ldr	r1, [sp, #88]	; 0x58
    1836:	47a8      	blx	r5
    1838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    183a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    183c:	900e      	str	r0, [sp, #56]	; 0x38
    183e:	910f      	str	r1, [sp, #60]	; 0x3c
    1840:	980a      	ldr	r0, [sp, #40]	; 0x28
    1842:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1844:	47a8      	blx	r5
    1846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    184a:	4e9a      	ldr	r6, [pc, #616]	; (1ab4 <computeKalmanGains+0x718>)
    184c:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    184e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1850:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1852:	9006      	str	r0, [sp, #24]
    1854:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1856:	9808      	ldr	r0, [sp, #32]
    1858:	9909      	ldr	r1, [sp, #36]	; 0x24
    185a:	47a8      	blx	r5
    185c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    185e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1860:	47b0      	blx	r6
    1862:	9a06      	ldr	r2, [sp, #24]
    1864:	9b07      	ldr	r3, [sp, #28]
    1866:	4e94      	ldr	r6, [pc, #592]	; (1ab8 <computeKalmanGains+0x71c>)
    1868:	47b0      	blx	r6
    186a:	0002      	movs	r2, r0
    186c:	000b      	movs	r3, r1
    186e:	9240      	str	r2, [sp, #256]	; 0x100
    1870:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1872:	2280      	movs	r2, #128	; 0x80
    1874:	0612      	lsls	r2, r2, #24
    1876:	4694      	mov	ip, r2
    1878:	9b14      	ldr	r3, [sp, #80]	; 0x50
    187a:	9a04      	ldr	r2, [sp, #16]
    187c:	4463      	add	r3, ip
    187e:	932f      	str	r3, [sp, #188]	; 0xbc
    1880:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1882:	9034      	str	r0, [sp, #208]	; 0xd0
    1884:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1886:	9808      	ldr	r0, [sp, #32]
    1888:	9909      	ldr	r1, [sp, #36]	; 0x24
    188a:	47a8      	blx	r5
    188c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    188e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1890:	0006      	movs	r6, r0
    1892:	000f      	movs	r7, r1
    1894:	9804      	ldr	r0, [sp, #16]
    1896:	9916      	ldr	r1, [sp, #88]	; 0x58
    1898:	47a8      	blx	r5
    189a:	0002      	movs	r2, r0
    189c:	000b      	movs	r3, r1
    189e:	0030      	movs	r0, r6
    18a0:	0039      	movs	r1, r7
    18a2:	47a0      	blx	r4
    18a4:	9a06      	ldr	r2, [sp, #24]
    18a6:	9b07      	ldr	r3, [sp, #28]
    18a8:	4e83      	ldr	r6, [pc, #524]	; (1ab8 <computeKalmanGains+0x71c>)
    18aa:	47b0      	blx	r6
    18ac:	0002      	movs	r2, r0
    18ae:	000b      	movs	r3, r1
    18b0:	900e      	str	r0, [sp, #56]	; 0x38
    18b2:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    18b4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18b6:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    18b8:	9242      	str	r2, [sp, #264]	; 0x108
    18ba:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    18bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18c0:	47a8      	blx	r5
    18c2:	9a00      	ldr	r2, [sp, #0]
    18c4:	9b01      	ldr	r3, [sp, #4]
    18c6:	0006      	movs	r6, r0
    18c8:	000f      	movs	r7, r1
    18ca:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18cc:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18ce:	47a8      	blx	r5
    18d0:	0002      	movs	r2, r0
    18d2:	000b      	movs	r3, r1
    18d4:	0030      	movs	r0, r6
    18d6:	0039      	movs	r1, r7
    18d8:	4e76      	ldr	r6, [pc, #472]	; (1ab4 <computeKalmanGains+0x718>)
    18da:	47b0      	blx	r6
    18dc:	9a06      	ldr	r2, [sp, #24]
    18de:	9b07      	ldr	r3, [sp, #28]
    18e0:	4e75      	ldr	r6, [pc, #468]	; (1ab8 <computeKalmanGains+0x71c>)
    18e2:	47b0      	blx	r6
    18e4:	0002      	movs	r2, r0
    18e6:	000b      	movs	r3, r1
    18e8:	913e      	str	r1, [sp, #248]	; 0xf8
    18ea:	9244      	str	r2, [sp, #272]	; 0x110
    18ec:	9345      	str	r3, [sp, #276]	; 0x114
    18ee:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18f0:	9a04      	ldr	r2, [sp, #16]
    18f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18f6:	992b      	ldr	r1, [sp, #172]	; 0xac
    18f8:	47a8      	blx	r5
    18fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18fe:	0006      	movs	r6, r0
    1900:	000f      	movs	r7, r1
    1902:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1904:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1906:	47a8      	blx	r5
    1908:	0002      	movs	r2, r0
    190a:	000b      	movs	r3, r1
    190c:	0030      	movs	r0, r6
    190e:	0039      	movs	r1, r7
    1910:	47a0      	blx	r4
    1912:	9a06      	ldr	r2, [sp, #24]
    1914:	9b07      	ldr	r3, [sp, #28]
    1916:	4e68      	ldr	r6, [pc, #416]	; (1ab8 <computeKalmanGains+0x71c>)
    1918:	47b0      	blx	r6
    191a:	0002      	movs	r2, r0
    191c:	000b      	movs	r3, r1
    191e:	9010      	str	r0, [sp, #64]	; 0x40
    1920:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1922:	9800      	ldr	r0, [sp, #0]
    1924:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1926:	9246      	str	r2, [sp, #280]	; 0x118
    1928:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    192a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    192c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    192e:	47a8      	blx	r5
    1930:	9a02      	ldr	r2, [sp, #8]
    1932:	9b03      	ldr	r3, [sp, #12]
    1934:	0006      	movs	r6, r0
    1936:	000f      	movs	r7, r1
    1938:	9800      	ldr	r0, [sp, #0]
    193a:	9901      	ldr	r1, [sp, #4]
    193c:	47a8      	blx	r5
    193e:	0002      	movs	r2, r0
    1940:	000b      	movs	r3, r1
    1942:	0030      	movs	r0, r6
    1944:	0039      	movs	r1, r7
    1946:	4e5b      	ldr	r6, [pc, #364]	; (1ab4 <computeKalmanGains+0x718>)
    1948:	47b0      	blx	r6
    194a:	9a06      	ldr	r2, [sp, #24]
    194c:	9b07      	ldr	r3, [sp, #28]
    194e:	4e5a      	ldr	r6, [pc, #360]	; (1ab8 <computeKalmanGains+0x71c>)
    1950:	47b0      	blx	r6
    1952:	0002      	movs	r2, r0
    1954:	000b      	movs	r3, r1
    1956:	9014      	str	r0, [sp, #80]	; 0x50
    1958:	9115      	str	r1, [sp, #84]	; 0x54
    195a:	9248      	str	r2, [sp, #288]	; 0x120
    195c:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    195e:	9800      	ldr	r0, [sp, #0]
    1960:	9901      	ldr	r1, [sp, #4]
    1962:	9a04      	ldr	r2, [sp, #16]
    1964:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1966:	47a8      	blx	r5
    1968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    196a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    196c:	0006      	movs	r6, r0
    196e:	000f      	movs	r7, r1
    1970:	9802      	ldr	r0, [sp, #8]
    1972:	9903      	ldr	r1, [sp, #12]
    1974:	47a8      	blx	r5
    1976:	0002      	movs	r2, r0
    1978:	000b      	movs	r3, r1
    197a:	0030      	movs	r0, r6
    197c:	0039      	movs	r1, r7
    197e:	47a0      	blx	r4
    1980:	9a06      	ldr	r2, [sp, #24]
    1982:	9b07      	ldr	r3, [sp, #28]
    1984:	4e4c      	ldr	r6, [pc, #304]	; (1ab8 <computeKalmanGains+0x71c>)
    1986:	47b0      	blx	r6
    1988:	0002      	movs	r2, r0
    198a:	000b      	movs	r3, r1
    198c:	9036      	str	r0, [sp, #216]	; 0xd8
    198e:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1990:	4e48      	ldr	r6, [pc, #288]	; (1ab4 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1992:	924a      	str	r2, [sp, #296]	; 0x128
    1994:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1996:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1998:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    199a:	2000      	movs	r0, #0
    199c:	4947      	ldr	r1, [pc, #284]	; (1abc <computeKalmanGains+0x720>)
    199e:	47b0      	blx	r6
    19a0:	0002      	movs	r2, r0
    19a2:	000b      	movs	r3, r1
    19a4:	900c      	str	r0, [sp, #48]	; 0x30
    19a6:	910d      	str	r1, [sp, #52]	; 0x34
    19a8:	9808      	ldr	r0, [sp, #32]
    19aa:	9909      	ldr	r1, [sp, #36]	; 0x24
    19ac:	47a8      	blx	r5
    19ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19b2:	0006      	movs	r6, r0
    19b4:	000f      	movs	r7, r1
    19b6:	9800      	ldr	r0, [sp, #0]
    19b8:	9901      	ldr	r1, [sp, #4]
    19ba:	47a8      	blx	r5
    19bc:	0002      	movs	r2, r0
    19be:	000b      	movs	r3, r1
    19c0:	0030      	movs	r0, r6
    19c2:	0039      	movs	r1, r7
    19c4:	4e3b      	ldr	r6, [pc, #236]	; (1ab4 <computeKalmanGains+0x718>)
    19c6:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19cc:	9006      	str	r0, [sp, #24]
    19ce:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19d0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    19d2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    19d4:	47a8      	blx	r5
    19d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19da:	0006      	movs	r6, r0
    19dc:	000f      	movs	r7, r1
    19de:	9812      	ldr	r0, [sp, #72]	; 0x48
    19e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19e2:	47a8      	blx	r5
    19e4:	0002      	movs	r2, r0
    19e6:	000b      	movs	r3, r1
    19e8:	0030      	movs	r0, r6
    19ea:	0039      	movs	r1, r7
    19ec:	4e31      	ldr	r6, [pc, #196]	; (1ab4 <computeKalmanGains+0x718>)
    19ee:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19f4:	900a      	str	r0, [sp, #40]	; 0x28
    19f6:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19f8:	9804      	ldr	r0, [sp, #16]
    19fa:	9916      	ldr	r1, [sp, #88]	; 0x58
    19fc:	47a8      	blx	r5
    19fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a02:	0006      	movs	r6, r0
    1a04:	000f      	movs	r7, r1
    1a06:	9802      	ldr	r0, [sp, #8]
    1a08:	9903      	ldr	r1, [sp, #12]
    1a0a:	47a8      	blx	r5
    1a0c:	0002      	movs	r2, r0
    1a0e:	000b      	movs	r3, r1
    1a10:	0030      	movs	r0, r6
    1a12:	0039      	movs	r1, r7
    1a14:	4e27      	ldr	r6, [pc, #156]	; (1ab4 <computeKalmanGains+0x718>)
    1a16:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	0612      	lsls	r2, r2, #24
    1a1c:	4694      	mov	ip, r2
    1a1e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    1a20:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a22:	4463      	add	r3, ip
    1a24:	932f      	str	r3, [sp, #188]	; 0xbc
    1a26:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a28:	900c      	str	r0, [sp, #48]	; 0x30
    1a2a:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a2c:	9808      	ldr	r0, [sp, #32]
    1a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a30:	47a8      	blx	r5
    1a32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1a34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1a36:	47a0      	blx	r4
    1a38:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a3c:	0006      	movs	r6, r0
    1a3e:	000f      	movs	r7, r1
    1a40:	9800      	ldr	r0, [sp, #0]
    1a42:	9901      	ldr	r1, [sp, #4]
    1a44:	47a8      	blx	r5
    1a46:	0002      	movs	r2, r0
    1a48:	000b      	movs	r3, r1
    1a4a:	0030      	movs	r0, r6
    1a4c:	0039      	movs	r1, r7
    1a4e:	4e19      	ldr	r6, [pc, #100]	; (1ab4 <computeKalmanGains+0x718>)
    1a50:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a52:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a54:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a56:	9008      	str	r0, [sp, #32]
    1a58:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a5a:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a5c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a5e:	47a0      	blx	r4
    1a60:	4a10      	ldr	r2, [pc, #64]	; (1aa4 <computeKalmanGains+0x708>)
    1a62:	0006      	movs	r6, r0
    1a64:	000f      	movs	r7, r1
    1a66:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a68:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a6a:	4b0f      	ldr	r3, [pc, #60]	; (1aa8 <computeKalmanGains+0x70c>)
    1a6c:	47a8      	blx	r5
    1a6e:	0002      	movs	r2, r0
    1a70:	000b      	movs	r3, r1
    1a72:	0030      	movs	r0, r6
    1a74:	0039      	movs	r1, r7
    1a76:	47a0      	blx	r4
    1a78:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a7a:	0006      	movs	r6, r0
    1a7c:	000f      	movs	r7, r1
    1a7e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a80:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a82:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a84:	47a8      	blx	r5
    1a86:	0002      	movs	r2, r0
    1a88:	000b      	movs	r3, r1
    1a8a:	0030      	movs	r0, r6
    1a8c:	0039      	movs	r1, r7
    1a8e:	47a0      	blx	r4
    1a90:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a94:	0006      	movs	r6, r0
    1a96:	000f      	movs	r7, r1
    1a98:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a9c:	47a8      	blx	r5
    1a9e:	0002      	movs	r2, r0
    1aa0:	000b      	movs	r3, r1
    1aa2:	e00d      	b.n	1ac0 <computeKalmanGains+0x724>
    1aa4:	d2f1a9fc 	.word	0xd2f1a9fc
    1aa8:	3f80624d 	.word	0x3f80624d
    1aac:	a0b5ed8d 	.word	0xa0b5ed8d
    1ab0:	3f00c6f7 	.word	0x3f00c6f7
    1ab4:	00005781 	.word	0x00005781
    1ab8:	00004a45 	.word	0x00004a45
    1abc:	3ff00000 	.word	0x3ff00000
    1ac0:	0030      	movs	r0, r6
    1ac2:	0039      	movs	r1, r7
    1ac4:	4e58      	ldr	r6, [pc, #352]	; (1c28 <computeKalmanGains+0x88c>)
    1ac6:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ac8:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1aca:	900e      	str	r0, [sp, #56]	; 0x38
    1acc:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ace:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ad0:	9804      	ldr	r0, [sp, #16]
    1ad2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ad4:	47a8      	blx	r5
    1ad6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ad8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1ada:	47a0      	blx	r4
    1adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1ae0:	0006      	movs	r6, r0
    1ae2:	000f      	movs	r7, r1
    1ae4:	9802      	ldr	r0, [sp, #8]
    1ae6:	9903      	ldr	r1, [sp, #12]
    1ae8:	47a8      	blx	r5
    1aea:	4c4f      	ldr	r4, [pc, #316]	; (1c28 <computeKalmanGains+0x88c>)
    1aec:	0002      	movs	r2, r0
    1aee:	000b      	movs	r3, r1
    1af0:	0030      	movs	r0, r6
    1af2:	0039      	movs	r1, r7
    1af4:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1af6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1af8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1afa:	9004      	str	r0, [sp, #16]
    1afc:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1afe:	2000      	movs	r0, #0
    1b00:	494a      	ldr	r1, [pc, #296]	; (1c2c <computeKalmanGains+0x890>)
    1b02:	47a0      	blx	r4
    1b04:	0002      	movs	r2, r0
    1b06:	000b      	movs	r3, r1
    1b08:	9016      	str	r0, [sp, #88]	; 0x58
    1b0a:	9117      	str	r1, [sp, #92]	; 0x5c
    1b0c:	9800      	ldr	r0, [sp, #0]
    1b0e:	9901      	ldr	r1, [sp, #4]
    1b10:	47a8      	blx	r5
    1b12:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b16:	0006      	movs	r6, r0
    1b18:	000f      	movs	r7, r1
    1b1a:	9800      	ldr	r0, [sp, #0]
    1b1c:	9901      	ldr	r1, [sp, #4]
    1b1e:	47a8      	blx	r5
    1b20:	0002      	movs	r2, r0
    1b22:	000b      	movs	r3, r1
    1b24:	0030      	movs	r0, r6
    1b26:	0039      	movs	r1, r7
    1b28:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b2e:	9010      	str	r0, [sp, #64]	; 0x40
    1b30:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b32:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b34:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b36:	47a8      	blx	r5
    1b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b3c:	0006      	movs	r6, r0
    1b3e:	000f      	movs	r7, r1
    1b40:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b42:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b44:	47a8      	blx	r5
    1b46:	0002      	movs	r2, r0
    1b48:	000b      	movs	r3, r1
    1b4a:	0030      	movs	r0, r6
    1b4c:	0039      	movs	r1, r7
    1b4e:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b50:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b54:	9012      	str	r0, [sp, #72]	; 0x48
    1b56:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b58:	9802      	ldr	r0, [sp, #8]
    1b5a:	9903      	ldr	r1, [sp, #12]
    1b5c:	47a8      	blx	r5
    1b5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b62:	0006      	movs	r6, r0
    1b64:	000f      	movs	r7, r1
    1b66:	9802      	ldr	r0, [sp, #8]
    1b68:	9903      	ldr	r1, [sp, #12]
    1b6a:	47a8      	blx	r5
    1b6c:	000b      	movs	r3, r1
    1b6e:	0002      	movs	r2, r0
    1b70:	0039      	movs	r1, r7
    1b72:	0030      	movs	r0, r6
    1b74:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b76:	2400      	movs	r4, #0
    1b78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b7a:	9002      	str	r0, [sp, #8]
    1b7c:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b7e:	3301      	adds	r3, #1
    1b80:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b82:	ab40      	add	r3, sp, #256	; 0x100
    1b84:	9326      	str	r3, [sp, #152]	; 0x98
    1b86:	4b28      	ldr	r3, [pc, #160]	; (1c28 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b88:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b8a:	9328      	str	r3, [sp, #160]	; 0xa0
    1b8c:	ab4c      	add	r3, sp, #304	; 0x130
    1b8e:	191b      	adds	r3, r3, r4
    1b90:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b92:	2300      	movs	r3, #0
    1b94:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b96:	9b00      	ldr	r3, [sp, #0]
    1b98:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b9a:	18e3      	adds	r3, r4, r3
    1b9c:	18d3      	adds	r3, r2, r3
    1b9e:	681a      	ldr	r2, [r3, #0]
    1ba0:	685b      	ldr	r3, [r3, #4]
    1ba2:	9218      	str	r2, [sp, #96]	; 0x60
    1ba4:	9319      	str	r3, [sp, #100]	; 0x64
    1ba6:	9818      	ldr	r0, [sp, #96]	; 0x60
    1ba8:	9919      	ldr	r1, [sp, #100]	; 0x64
    1baa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bac:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1bae:	681e      	ldr	r6, [r3, #0]
    1bb0:	685f      	ldr	r7, [r3, #4]
    1bb2:	0032      	movs	r2, r6
    1bb4:	003b      	movs	r3, r7
    1bb6:	47a8      	blx	r5
    1bb8:	0032      	movs	r2, r6
    1bba:	003b      	movs	r3, r7
    1bbc:	4d1c      	ldr	r5, [pc, #112]	; (1c30 <computeKalmanGains+0x894>)
    1bbe:	47a8      	blx	r5
    1bc0:	4b1c      	ldr	r3, [pc, #112]	; (1c34 <computeKalmanGains+0x898>)
    1bc2:	4a1d      	ldr	r2, [pc, #116]	; (1c38 <computeKalmanGains+0x89c>)
    1bc4:	4e1d      	ldr	r6, [pc, #116]	; (1c3c <computeKalmanGains+0x8a0>)
    1bc6:	47b0      	blx	r6
                    notdone++;
    1bc8:	1e43      	subs	r3, r0, #1
    1bca:	4198      	sbcs	r0, r3
    1bcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1bce:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1bd0:	181b      	adds	r3, r3, r0
    1bd2:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1bd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bd8:	c10c      	stmia	r1!, {r2, r3}
    1bda:	9b00      	ldr	r3, [sp, #0]
    1bdc:	9116      	str	r1, [sp, #88]	; 0x58
    1bde:	3308      	adds	r3, #8
    1be0:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1be2:	2b10      	cmp	r3, #16
    1be4:	d1d7      	bne.n	1b96 <computeKalmanGains+0x7fa>
    1be6:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1be8:	2c30      	cmp	r4, #48	; 0x30
    1bea:	d1cf      	bne.n	1b8c <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1bec:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d001      	beq.n	1bf6 <computeKalmanGains+0x85a>
    1bf2:	f7ff fc38 	bl	1466 <computeKalmanGains+0xca>
    1bf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bf8:	2b63      	cmp	r3, #99	; 0x63
    1bfa:	dc01      	bgt.n	1c00 <computeKalmanGains+0x864>
    1bfc:	f7ff fc33 	bl	1466 <computeKalmanGains+0xca>
    1c00:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1c02:	aa42      	add	r2, sp, #264	; 0x108
    1c04:	0019      	movs	r1, r3
    1c06:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1c08:	0010      	movs	r0, r2
    1c0a:	3808      	subs	r0, #8
    1c0c:	6804      	ldr	r4, [r0, #0]
    1c0e:	6845      	ldr	r5, [r0, #4]
    1c10:	601c      	str	r4, [r3, #0]
    1c12:	605d      	str	r5, [r3, #4]
    1c14:	6814      	ldr	r4, [r2, #0]
    1c16:	6855      	ldr	r5, [r2, #4]
    1c18:	609c      	str	r4, [r3, #8]
    1c1a:	60dd      	str	r5, [r3, #12]
    1c1c:	3310      	adds	r3, #16
    1c1e:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1c20:	4299      	cmp	r1, r3
    1c22:	d1f1      	bne.n	1c08 <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1c24:	b059      	add	sp, #356	; 0x164
    1c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c28:	00005781 	.word	0x00005781
    1c2c:	3ff00000 	.word	0x3ff00000
    1c30:	00004a45 	.word	0x00004a45
    1c34:	3ee4f8b5 	.word	0x3ee4f8b5
    1c38:	88e368f1 	.word	0x88e368f1
    1c3c:	00003b25 	.word	0x00003b25

00001c40 <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c40:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c42:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c44:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c46:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c48:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c4a:	6818      	ldr	r0, [r3, #0]
    1c4c:	4b96      	ldr	r3, [pc, #600]	; (1ea8 <computeKalmanStates+0x268>)
    1c4e:	4798      	blx	r3
    1c50:	003b      	movs	r3, r7
    1c52:	33b8      	adds	r3, #184	; 0xb8
    1c54:	681a      	ldr	r2, [r3, #0]
    1c56:	685b      	ldr	r3, [r3, #4]
    1c58:	4c94      	ldr	r4, [pc, #592]	; (1eac <computeKalmanStates+0x26c>)
    1c5a:	47a0      	blx	r4
    1c5c:	4a94      	ldr	r2, [pc, #592]	; (1eb0 <computeKalmanStates+0x270>)
    1c5e:	4b95      	ldr	r3, [pc, #596]	; (1eb4 <computeKalmanStates+0x274>)
    1c60:	4d95      	ldr	r5, [pc, #596]	; (1eb8 <computeKalmanStates+0x278>)
    1c62:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c68:	003d      	movs	r5, r7
    1c6a:	3580      	adds	r5, #128	; 0x80

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c6c:	9200      	str	r2, [sp, #0]
    1c6e:	9301      	str	r3, [sp, #4]
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1c70:	9002      	str	r0, [sp, #8]
    1c72:	9103      	str	r1, [sp, #12]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c74:	6828      	ldr	r0, [r5, #0]
    1c76:	6869      	ldr	r1, [r5, #4]
    1c78:	2200      	movs	r2, #0
    1c7a:	2300      	movs	r3, #0
    1c7c:	4e8f      	ldr	r6, [pc, #572]	; (1ebc <computeKalmanStates+0x27c>)
    1c7e:	47b0      	blx	r6
    1c80:	2800      	cmp	r0, #0
    1c82:	d003      	beq.n	1c8c <computeKalmanStates+0x4c>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1c84:	9a00      	ldr	r2, [sp, #0]
    1c86:	9b01      	ldr	r3, [sp, #4]
    1c88:	602a      	str	r2, [r5, #0]
    1c8a:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c8c:	9800      	ldr	r0, [sp, #0]
    1c8e:	9901      	ldr	r1, [sp, #4]
    1c90:	003b      	movs	r3, r7
    1c92:	3398      	adds	r3, #152	; 0x98
    1c94:	930a      	str	r3, [sp, #40]	; 0x28
    1c96:	681a      	ldr	r2, [r3, #0]
    1c98:	685b      	ldr	r3, [r3, #4]
    1c9a:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c9c:	003b      	movs	r3, r7
    1c9e:	33a8      	adds	r3, #168	; 0xa8
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1ca0:	9006      	str	r0, [sp, #24]
    1ca2:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1ca4:	9802      	ldr	r0, [sp, #8]
    1ca6:	9903      	ldr	r1, [sp, #12]
    1ca8:	930c      	str	r3, [sp, #48]	; 0x30
    1caa:	681a      	ldr	r2, [r3, #0]
    1cac:	685b      	ldr	r3, [r3, #4]
    1cae:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1cb0:	003b      	movs	r3, r7
    1cb2:	3380      	adds	r3, #128	; 0x80
    1cb4:	930d      	str	r3, [sp, #52]	; 0x34
    1cb6:	685c      	ldr	r4, [r3, #4]
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	9300      	str	r3, [sp, #0]
    1cbc:	9401      	str	r4, [sp, #4]
    1cbe:	003b      	movs	r3, r7
    1cc0:	3388      	adds	r3, #136	; 0x88
    1cc2:	930e      	str	r3, [sp, #56]	; 0x38
    1cc4:	685c      	ldr	r4, [r3, #4]
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	9302      	str	r3, [sp, #8]
    1cca:	9403      	str	r4, [sp, #12]
    1ccc:	003b      	movs	r3, r7
    1cce:	3390      	adds	r3, #144	; 0x90
    1cd0:	930f      	str	r3, [sp, #60]	; 0x3c
    1cd2:	685c      	ldr	r4, [r3, #4]
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	9304      	str	r3, [sp, #16]
    1cd8:	9405      	str	r4, [sp, #20]
    1cda:	4b79      	ldr	r3, [pc, #484]	; (1ec0 <computeKalmanStates+0x280>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1cdc:	9008      	str	r0, [sp, #32]
    1cde:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1ce0:	681a      	ldr	r2, [r3, #0]
    1ce2:	685b      	ldr	r3, [r3, #4]
    1ce4:	9800      	ldr	r0, [sp, #0]
    1ce6:	9901      	ldr	r1, [sp, #4]
    1ce8:	4c73      	ldr	r4, [pc, #460]	; (1eb8 <computeKalmanStates+0x278>)
    1cea:	47a0      	blx	r4
    1cec:	4b74      	ldr	r3, [pc, #464]	; (1ec0 <computeKalmanStates+0x280>)
    1cee:	4e72      	ldr	r6, [pc, #456]	; (1eb8 <computeKalmanStates+0x278>)
    1cf0:	689a      	ldr	r2, [r3, #8]
    1cf2:	68db      	ldr	r3, [r3, #12]
    1cf4:	0004      	movs	r4, r0
    1cf6:	000d      	movs	r5, r1
    1cf8:	9802      	ldr	r0, [sp, #8]
    1cfa:	9903      	ldr	r1, [sp, #12]
    1cfc:	47b0      	blx	r6
    1cfe:	0002      	movs	r2, r0
    1d00:	000b      	movs	r3, r1
    1d02:	0020      	movs	r0, r4
    1d04:	0029      	movs	r1, r5
    1d06:	4c6f      	ldr	r4, [pc, #444]	; (1ec4 <computeKalmanStates+0x284>)
    1d08:	47a0      	blx	r4
    1d0a:	4b6d      	ldr	r3, [pc, #436]	; (1ec0 <computeKalmanStates+0x280>)
    1d0c:	0004      	movs	r4, r0
    1d0e:	691a      	ldr	r2, [r3, #16]
    1d10:	695b      	ldr	r3, [r3, #20]
    1d12:	000d      	movs	r5, r1
    1d14:	9804      	ldr	r0, [sp, #16]
    1d16:	9905      	ldr	r1, [sp, #20]
    1d18:	47b0      	blx	r6
    1d1a:	0002      	movs	r2, r0
    1d1c:	000b      	movs	r3, r1
    1d1e:	0020      	movs	r0, r4
    1d20:	0029      	movs	r1, r5
    1d22:	4c68      	ldr	r4, [pc, #416]	; (1ec4 <computeKalmanStates+0x284>)
    1d24:	47a0      	blx	r4
    1d26:	0003      	movs	r3, r0
    1d28:	000c      	movs	r4, r1
    1d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d2c:	9010      	str	r0, [sp, #64]	; 0x40
    1d2e:	9111      	str	r1, [sp, #68]	; 0x44
    1d30:	6013      	str	r3, [r2, #0]
    1d32:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1d34:	4b62      	ldr	r3, [pc, #392]	; (1ec0 <computeKalmanStates+0x280>)
    1d36:	699a      	ldr	r2, [r3, #24]
    1d38:	69db      	ldr	r3, [r3, #28]
    1d3a:	9800      	ldr	r0, [sp, #0]
    1d3c:	9901      	ldr	r1, [sp, #4]
    1d3e:	47b0      	blx	r6
    1d40:	4b5f      	ldr	r3, [pc, #380]	; (1ec0 <computeKalmanStates+0x280>)
    1d42:	0004      	movs	r4, r0
    1d44:	6a1a      	ldr	r2, [r3, #32]
    1d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d48:	000d      	movs	r5, r1
    1d4a:	9802      	ldr	r0, [sp, #8]
    1d4c:	9903      	ldr	r1, [sp, #12]
    1d4e:	47b0      	blx	r6
    1d50:	0002      	movs	r2, r0
    1d52:	000b      	movs	r3, r1
    1d54:	0020      	movs	r0, r4
    1d56:	0029      	movs	r1, r5
    1d58:	4c5a      	ldr	r4, [pc, #360]	; (1ec4 <computeKalmanStates+0x284>)
    1d5a:	47a0      	blx	r4
    1d5c:	4b58      	ldr	r3, [pc, #352]	; (1ec0 <computeKalmanStates+0x280>)
    1d5e:	0004      	movs	r4, r0
    1d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d64:	000d      	movs	r5, r1
    1d66:	9804      	ldr	r0, [sp, #16]
    1d68:	9905      	ldr	r1, [sp, #20]
    1d6a:	47b0      	blx	r6
    1d6c:	0002      	movs	r2, r0
    1d6e:	000b      	movs	r3, r1
    1d70:	0020      	movs	r0, r4
    1d72:	0029      	movs	r1, r5
    1d74:	4c53      	ldr	r4, [pc, #332]	; (1ec4 <computeKalmanStates+0x284>)
    1d76:	47a0      	blx	r4
    1d78:	003b      	movs	r3, r7
    1d7a:	900a      	str	r0, [sp, #40]	; 0x28
    1d7c:	910b      	str	r1, [sp, #44]	; 0x2c
    1d7e:	000a      	movs	r2, r1
    1d80:	0001      	movs	r1, r0
    1d82:	33a0      	adds	r3, #160	; 0xa0
    1d84:	6019      	str	r1, [r3, #0]
    1d86:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d88:	9800      	ldr	r0, [sp, #0]
    1d8a:	9901      	ldr	r1, [sp, #4]
    1d8c:	4b4c      	ldr	r3, [pc, #304]	; (1ec0 <computeKalmanStates+0x280>)
    1d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d92:	47b0      	blx	r6
    1d94:	4b4a      	ldr	r3, [pc, #296]	; (1ec0 <computeKalmanStates+0x280>)
    1d96:	0004      	movs	r4, r0
    1d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d9c:	000d      	movs	r5, r1
    1d9e:	9802      	ldr	r0, [sp, #8]
    1da0:	9903      	ldr	r1, [sp, #12]
    1da2:	47b0      	blx	r6
    1da4:	0002      	movs	r2, r0
    1da6:	000b      	movs	r3, r1
    1da8:	0020      	movs	r0, r4
    1daa:	0029      	movs	r1, r5
    1dac:	4c45      	ldr	r4, [pc, #276]	; (1ec4 <computeKalmanStates+0x284>)
    1dae:	47a0      	blx	r4
    1db0:	4b43      	ldr	r3, [pc, #268]	; (1ec0 <computeKalmanStates+0x280>)
    1db2:	0004      	movs	r4, r0
    1db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1db8:	000d      	movs	r5, r1
    1dba:	9804      	ldr	r0, [sp, #16]
    1dbc:	9905      	ldr	r1, [sp, #20]
    1dbe:	47b0      	blx	r6
    1dc0:	0002      	movs	r2, r0
    1dc2:	000b      	movs	r3, r1
    1dc4:	0020      	movs	r0, r4
    1dc6:	0029      	movs	r1, r5
    1dc8:	4c3e      	ldr	r4, [pc, #248]	; (1ec4 <computeKalmanStates+0x284>)
    1dca:	47a0      	blx	r4
    1dcc:	0003      	movs	r3, r0
    1dce:	000c      	movs	r4, r1
    1dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1dd2:	9000      	str	r0, [sp, #0]
    1dd4:	9101      	str	r1, [sp, #4]
    1dd6:	6013      	str	r3, [r2, #0]
    1dd8:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1dda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dde:	9806      	ldr	r0, [sp, #24]
    1de0:	9907      	ldr	r1, [sp, #28]
    1de2:	47b0      	blx	r6
    1de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1de8:	4c36      	ldr	r4, [pc, #216]	; (1ec4 <computeKalmanStates+0x284>)
    1dea:	47a0      	blx	r4
    1dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1df0:	0004      	movs	r4, r0
    1df2:	000d      	movs	r5, r1
    1df4:	9808      	ldr	r0, [sp, #32]
    1df6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1df8:	47b0      	blx	r6
    1dfa:	0002      	movs	r2, r0
    1dfc:	000b      	movs	r3, r1
    1dfe:	0020      	movs	r0, r4
    1e00:	0029      	movs	r1, r5
    1e02:	4c30      	ldr	r4, [pc, #192]	; (1ec4 <computeKalmanStates+0x284>)
    1e04:	47a0      	blx	r4
    1e06:	0003      	movs	r3, r0
    1e08:	000c      	movs	r4, r1
    1e0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1e0c:	9002      	str	r0, [sp, #8]
    1e0e:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e10:	9806      	ldr	r0, [sp, #24]
    1e12:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1e14:	6013      	str	r3, [r2, #0]
    1e16:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1e1c:	47b0      	blx	r6
    1e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e22:	4c28      	ldr	r4, [pc, #160]	; (1ec4 <computeKalmanStates+0x284>)
    1e24:	47a0      	blx	r4
    1e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1e2a:	0004      	movs	r4, r0
    1e2c:	000d      	movs	r5, r1
    1e2e:	9808      	ldr	r0, [sp, #32]
    1e30:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e32:	47b0      	blx	r6
    1e34:	0002      	movs	r2, r0
    1e36:	000b      	movs	r3, r1
    1e38:	0020      	movs	r0, r4
    1e3a:	0029      	movs	r1, r5
    1e3c:	4c21      	ldr	r4, [pc, #132]	; (1ec4 <computeKalmanStates+0x284>)
    1e3e:	47a0      	blx	r4
    1e40:	0005      	movs	r5, r0
    1e42:	000e      	movs	r6, r1
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e44:	9806      	ldr	r0, [sp, #24]
    1e46:	9907      	ldr	r1, [sp, #28]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e4a:	4c1b      	ldr	r4, [pc, #108]	; (1eb8 <computeKalmanStates+0x278>)

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1e4c:	601d      	str	r5, [r3, #0]
    1e4e:	605e      	str	r6, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e54:	47a0      	blx	r4
    1e56:	9a00      	ldr	r2, [sp, #0]
    1e58:	9b01      	ldr	r3, [sp, #4]
    1e5a:	4c1a      	ldr	r4, [pc, #104]	; (1ec4 <computeKalmanStates+0x284>)
    1e5c:	47a0      	blx	r4
    1e5e:	9000      	str	r0, [sp, #0]
    1e60:	9101      	str	r1, [sp, #4]
    1e62:	6fba      	ldr	r2, [r7, #120]	; 0x78
    1e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1e66:	9808      	ldr	r0, [sp, #32]
    1e68:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e6a:	4c13      	ldr	r4, [pc, #76]	; (1eb8 <computeKalmanStates+0x278>)
    1e6c:	47a0      	blx	r4
    1e6e:	4c15      	ldr	r4, [pc, #84]	; (1ec4 <computeKalmanStates+0x284>)
    1e70:	0002      	movs	r2, r0
    1e72:	000b      	movs	r3, r1
    1e74:	9800      	ldr	r0, [sp, #0]
    1e76:	9901      	ldr	r1, [sp, #4]
    1e78:	47a0      	blx	r4
    1e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    1e7c:	4c12      	ldr	r4, [pc, #72]	; (1ec8 <computeKalmanStates+0x288>)
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1e7e:	6018      	str	r0, [r3, #0]
    1e80:	6059      	str	r1, [r3, #4]

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    1e82:	47a0      	blx	r4
    1e84:	23cc      	movs	r3, #204	; 0xcc
    1e86:	009b      	lsls	r3, r3, #2
    1e88:	50f8      	str	r0, [r7, r3]
    my_altimeter->Velocity = my_altimeter->myKalmanFilter.est[1];
    1e8a:	0031      	movs	r1, r6
    1e8c:	0028      	movs	r0, r5
    1e8e:	47a0      	blx	r4
    1e90:	23ce      	movs	r3, #206	; 0xce
    1e92:	009b      	lsls	r3, r3, #2
    1e94:	50f8      	str	r0, [r7, r3]
    my_altimeter->Altitude = my_altimeter->myKalmanFilter.est[0];
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <computeKalmanStates+0x28c>)
    1e98:	9802      	ldr	r0, [sp, #8]
    1e9a:	9903      	ldr	r1, [sp, #12]
    1e9c:	4798      	blx	r3
    1e9e:	23cd      	movs	r3, #205	; 0xcd
    1ea0:	009b      	lsls	r3, r3, #2
    1ea2:	50f8      	str	r0, [r7, r3]


}
    1ea4:	b013      	add	sp, #76	; 0x4c
    1ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea8:	00005fc9 	.word	0x00005fc9
    1eac:	00005781 	.word	0x00005781
    1eb0:	33daf8df 	.word	0x33daf8df
    1eb4:	4040164b 	.word	0x4040164b
    1eb8:	0000528d 	.word	0x0000528d
    1ebc:	00003af1 	.word	0x00003af1
    1ec0:	20000010 	.word	0x20000010
    1ec4:	000043ed 	.word	0x000043ed
    1ec8:	00006071 	.word	0x00006071
    1ecc:	00003c49 	.word	0x00003c49

00001ed0 <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1ed2:	2684      	movs	r6, #132	; 0x84
    1ed4:	00b6      	lsls	r6, r6, #2
    1ed6:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1ed8:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1eda:	194b      	adds	r3, r1, r5
    1edc:	2bfe      	cmp	r3, #254	; 0xfe
    1ede:	dc03      	bgt.n	1ee8 <makePage+0x18>
    1ee0:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1ee2:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1ee4:	1947      	adds	r7, r0, r5
    1ee6:	e034      	b.n	1f52 <makePage+0x82>
    1ee8:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1eea:	195c      	adds	r4, r3, r5
    1eec:	b2de      	uxtb	r6, r3
    1eee:	2cfe      	cmp	r4, #254	; 0xfe
    1ef0:	dc08      	bgt.n	1f04 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1ef2:	9a00      	ldr	r2, [sp, #0]
    1ef4:	4f1f      	ldr	r7, [pc, #124]	; (1f74 <makePage+0xa4>)
    1ef6:	5cd6      	ldrb	r6, [r2, r3]
    1ef8:	1904      	adds	r4, r0, r4
    1efa:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1efc:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1efe:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1f00:	b29b      	uxth	r3, r3
    1f02:	e7f2      	b.n	1eea <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1f04:	2384      	movs	r3, #132	; 0x84
    1f06:	2500      	movs	r5, #0
    1f08:	009b      	lsls	r3, r3, #2
    1f0a:	54c5      	strb	r5, [r0, r3]
    1f0c:	4b19      	ldr	r3, [pc, #100]	; (1f74 <makePage+0xa4>)
    1f0e:	18c4      	adds	r4, r0, r3
    1f10:	4b19      	ldr	r3, [pc, #100]	; (1f78 <makePage+0xa8>)
    1f12:	18c3      	adds	r3, r0, r3
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1f18:	781f      	ldrb	r7, [r3, #0]
    1f1a:	46bc      	mov	ip, r7
    1f1c:	4662      	mov	r2, ip
    1f1e:	1e9f      	subs	r7, r3, #2
    1f20:	3fff      	subs	r7, #255	; 0xff
    1f22:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1f24:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1f26:	701d      	strb	r5, [r3, #0]
    1f28:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1f2a:	4293      	cmp	r3, r2
    1f2c:	d1f4      	bne.n	1f18 <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1f2e:	2584      	movs	r5, #132	; 0x84
    1f30:	0033      	movs	r3, r6
    1f32:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1f34:	428b      	cmp	r3, r1
    1f36:	d208      	bcs.n	1f4a <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1f38:	9a00      	ldr	r2, [sp, #0]
    1f3a:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1f3c:	3301      	adds	r3, #1
    1f3e:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1f40:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1f42:	1b9f      	subs	r7, r3, r6
    1f44:	5547      	strb	r7, [r0, r5]
    1f46:	3401      	adds	r4, #1
    1f48:	e7f4      	b.n	1f34 <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1f4a:	2201      	movs	r2, #1
    1f4c:	4b0a      	ldr	r3, [pc, #40]	; (1f78 <makePage+0xa8>)
    1f4e:	54c2      	strb	r2, [r0, r3]
    1f50:	e00f      	b.n	1f72 <makePage+0xa2>
    1f52:	1c5c      	adds	r4, r3, #1
    1f54:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f56:	428b      	cmp	r3, r1
    1f58:	d80b      	bhi.n	1f72 <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1f5a:	9a00      	ldr	r2, [sp, #0]
    1f5c:	5cd2      	ldrb	r2, [r2, r3]
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	4694      	mov	ip, r2
    1f62:	4a04      	ldr	r2, [pc, #16]	; (1f74 <makePage+0xa4>)
    1f64:	189b      	adds	r3, r3, r2
    1f66:	4662      	mov	r2, ip
    1f68:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1f6a:	192b      	adds	r3, r5, r4
    1f6c:	5583      	strb	r3, [r0, r6]
    1f6e:	0023      	movs	r3, r4
    1f70:	e7ef      	b.n	1f52 <makePage+0x82>
        }

    }
}
    1f72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f74:	00000211 	.word	0x00000211
    1f78:	00000311 	.word	0x00000311

00001f7c <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f7e:	2346      	movs	r3, #70	; 0x46
    1f80:	466a      	mov	r2, sp
    1f82:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1f84:	7a03      	ldrb	r3, [r0, #8]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f86:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1f88:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1f8a:	0003      	movs	r3, r0
    1f8c:	33b0      	adds	r3, #176	; 0xb0
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1f92:	0a1a      	lsrs	r2, r3, #8
    1f94:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f96:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1f98:	0e1b      	lsrs	r3, r3, #24
    1f9a:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f9e:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1fa0:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1fa2:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1fa4:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1fa6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1fa8:	0e1b      	lsrs	r3, r3, #24
    1faa:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1fac:	6c83      	ldr	r3, [r0, #72]	; 0x48
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1fae:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1fb0:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1fb2:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1fb4:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1fb6:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1fb8:	0e1b      	lsrs	r3, r3, #24
    1fba:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1fbc:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1fbe:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1fc0:	33e4      	adds	r3, #228	; 0xe4
    1fc2:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1fc4:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    1fc6:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    1fc8:	0a1b      	lsrs	r3, r3, #8
    1fca:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1fcc:	2110      	movs	r1, #16
    1fce:	4b02      	ldr	r3, [pc, #8]	; (1fd8 <logFlight+0x5c>)
    1fd0:	4798      	blx	r3
}
    1fd2:	b005      	add	sp, #20
    1fd4:	bd00      	pop	{pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00001ed1 	.word	0x00001ed1

00001fdc <logEvent>:

void logEvent(Altimeter *my_altimeter, u8_t eventType) {
    1fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1fde:	2345      	movs	r3, #69	; 0x45
    1fe0:	aa01      	add	r2, sp, #4
    1fe2:	7013      	strb	r3, [r2, #0]
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    1fe4:	23c9      	movs	r3, #201	; 0xc9
    1fe6:	009b      	lsls	r3, r3, #2
    1fe8:	58c3      	ldr	r3, [r0, r3]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    1fea:	7051      	strb	r1, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    1fec:	0a19      	lsrs	r1, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    1fee:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    1ff0:	70d1      	strb	r1, [r2, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    1ff2:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = my_altimeter->sampleTick >> 24;
    1ff4:	0e1b      	lsrs	r3, r3, #24
    1ff6:	7153      	strb	r3, [r2, #5]

    dataToSend[6] = my_altimeter->Altitude >> 0;
    1ff8:	23cd      	movs	r3, #205	; 0xcd
    1ffa:	009b      	lsls	r3, r3, #2
    1ffc:	58c3      	ldr	r3, [r0, r3]

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    1ffe:	7111      	strb	r1, [r2, #4]
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    2000:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    2002:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = my_altimeter->Altitude >> 8;
    2004:	71d1      	strb	r1, [r2, #7]
    dataToSend[8] = my_altimeter->Altitude >> 16;
    2006:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = my_altimeter->Altitude >> 24;
    2008:	0e1b      	lsrs	r3, r3, #24
    200a:	7253      	strb	r3, [r2, #9]

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    200c:	23c5      	movs	r3, #197	; 0xc5
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    200e:	7211      	strb	r1, [r2, #8]
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    2010:	009b      	lsls	r3, r3, #2
    2012:	5ac3      	ldrh	r3, [r0, r3]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    2014:	210c      	movs	r1, #12
    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    2016:	7293      	strb	r3, [r2, #10]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;
    2018:	0a1b      	lsrs	r3, r3, #8
    201a:	72d3      	strb	r3, [r2, #11]

    makePage(my_altimeter, bytesToSend, dataToSend);
    201c:	4b01      	ldr	r3, [pc, #4]	; (2024 <STACK_SIZE+0x24>)
    201e:	4798      	blx	r3

}
    2020:	b005      	add	sp, #20
    2022:	bd00      	pop	{pc}
    2024:	00001ed1 	.word	0x00001ed1

00002028 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    202c:	466a      	mov	r2, sp
    202e:	2353      	movs	r3, #83	; 0x53
    2030:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2032:	23c9      	movs	r3, #201	; 0xc9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    2034:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2036:	009b      	lsls	r3, r3, #2
    2038:	58c3      	ldr	r3, [r0, r3]

    makePage(my_altimeter, bytesToSend, dataToSend);

}

void logSensors(Altimeter *my_altimeter) {
    203a:	0004      	movs	r4, r0

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    203c:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    203e:	0a1a      	lsrs	r2, r3, #8
    2040:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    2042:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    2044:	0e1b      	lsrs	r3, r3, #24
    2046:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->Altitude >> 0;
    2048:	23cd      	movs	r3, #205	; 0xcd
    204a:	009b      	lsls	r3, r3, #2
    204c:	58c3      	ldr	r3, [r0, r3]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    204e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2050:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    2052:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2054:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->Altitude >> 16;
    2056:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->Altitude >> 24;
    2058:	0e1b      	lsrs	r3, r3, #24
    205a:	720b      	strb	r3, [r1, #8]

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    205c:	23cc      	movs	r3, #204	; 0xcc
    205e:	009b      	lsls	r3, r3, #2
    2060:	58c7      	ldr	r7, [r0, r3]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    2062:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    2064:	4e23      	ldr	r6, [pc, #140]	; (20f4 <logSensors+0xcc>)
    2066:	1c38      	adds	r0, r7, #0
    2068:	47b0      	blx	r6
    206a:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    206c:	4b22      	ldr	r3, [pc, #136]	; (20f8 <logSensors+0xd0>)
    206e:	0028      	movs	r0, r5
    2070:	4798      	blx	r3
    2072:	4b22      	ldr	r3, [pc, #136]	; (20fc <logSensors+0xd4>)
    2074:	1c01      	adds	r1, r0, #0
    2076:	1c38      	adds	r0, r7, #0
    2078:	4798      	blx	r3
    207a:	4921      	ldr	r1, [pc, #132]	; (2100 <logSensors+0xd8>)
    207c:	4f21      	ldr	r7, [pc, #132]	; (2104 <logSensors+0xdc>)
    207e:	47b8      	blx	r7
    2080:	4b21      	ldr	r3, [pc, #132]	; (2108 <logSensors+0xe0>)
    2082:	4798      	blx	r3

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2084:	466a      	mov	r2, sp
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;
    2086:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2088:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    208a:	0a1b      	lsrs	r3, r3, #8
    208c:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    208e:	23ce      	movs	r3, #206	; 0xce
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2090:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2092:	009b      	lsls	r3, r3, #2

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    2094:	122d      	asrs	r5, r5, #8
    2096:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2098:	58e5      	ldr	r5, [r4, r3]
    209a:	1c28      	adds	r0, r5, #0
    209c:	47b0      	blx	r6
    209e:	b206      	sxth	r6, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    20a0:	4b15      	ldr	r3, [pc, #84]	; (20f8 <logSensors+0xd0>)
    20a2:	0030      	movs	r0, r6
    20a4:	4798      	blx	r3
    20a6:	4b15      	ldr	r3, [pc, #84]	; (20fc <logSensors+0xd4>)
    20a8:	1c01      	adds	r1, r0, #0
    20aa:	1c28      	adds	r0, r5, #0
    20ac:	4798      	blx	r3
    20ae:	4914      	ldr	r1, [pc, #80]	; (2100 <logSensors+0xd8>)
    20b0:	47b8      	blx	r7
    20b2:	4b15      	ldr	r3, [pc, #84]	; (2108 <logSensors+0xe0>)
    20b4:	4798      	blx	r3

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    20b6:	466a      	mov	r2, sp
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    20b8:	4669      	mov	r1, sp
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    20ba:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    20bc:	73d3      	strb	r3, [r2, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    20be:	0a1b      	lsrs	r3, r3, #8
    20c0:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    20c2:	6b63      	ldr	r3, [r4, #52]	; 0x34


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    20c4:	7356      	strb	r6, [r2, #13]
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    20c6:	1236      	asrs	r6, r6, #8
    20c8:	7396      	strb	r6, [r2, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    20ca:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    20cc:	0a1a      	lsrs	r2, r3, #8
    20ce:	748a      	strb	r2, [r1, #18]
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    20d0:	0c1a      	lsrs	r2, r3, #16
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    20d2:	0e1b      	lsrs	r3, r3, #24
    20d4:	750b      	strb	r3, [r1, #20]
    //dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    //dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    //dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;


    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    20d6:	0023      	movs	r3, r4
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    20d8:	74ca      	strb	r2, [r1, #19]
    //dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    //dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    //dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;


    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    20da:	33fe      	adds	r3, #254	; 0xfe
    20dc:	885b      	ldrh	r3, [r3, #2]
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    20de:	466a      	mov	r2, sp
    //dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    //dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    //dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;


    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    20e0:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    20e2:	0a1b      	lsrs	r3, r3, #8
    20e4:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    20e6:	0020      	movs	r0, r4
    20e8:	2117      	movs	r1, #23
    20ea:	4b08      	ldr	r3, [pc, #32]	; (210c <logSensors+0xe4>)
    20ec:	4798      	blx	r3
}
    20ee:	b007      	add	sp, #28
    20f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00004319 	.word	0x00004319
    20f8:	0000435d 	.word	0x0000435d
    20fc:	0000400d 	.word	0x0000400d
    2100:	447a0000 	.word	0x447a0000
    2104:	00003de5 	.word	0x00003de5
    2108:	00003c19 	.word	0x00003c19
    210c:	00001ed1 	.word	0x00001ed1

00002110 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2110:	2306      	movs	r3, #6
    makePage(my_altimeter, bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2112:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2114:	4358      	muls	r0, r3
    2116:	ac01      	add	r4, sp, #4
    2118:	3001      	adds	r0, #1
    211a:	30ff      	adds	r0, #255	; 0xff
    211c:	0022      	movs	r2, r4
    211e:	2103      	movs	r1, #3
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <getFlightStartAddress+0x24>)
    2122:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2124:	7860      	ldrb	r0, [r4, #1]
    2126:	78a3      	ldrb	r3, [r4, #2]
    2128:	0200      	lsls	r0, r0, #8
    212a:	041b      	lsls	r3, r3, #16
    212c:	4318      	orrs	r0, r3
    212e:	7823      	ldrb	r3, [r4, #0]
    2130:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2132:	bd16      	pop	{r1, r2, r4, pc}
    2134:	00000341 	.word	0x00000341

00002138 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2138:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    213a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    213c:	4358      	muls	r0, r3
    213e:	ac01      	add	r4, sp, #4
    2140:	3004      	adds	r0, #4
    2142:	30ff      	adds	r0, #255	; 0xff
    2144:	0022      	movs	r2, r4
    2146:	2103      	movs	r1, #3
    2148:	4b04      	ldr	r3, [pc, #16]	; (215c <FindFlightEndingAddress+0x24>)
    214a:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    214c:	7860      	ldrb	r0, [r4, #1]
    214e:	78a3      	ldrb	r3, [r4, #2]
    2150:	0200      	lsls	r0, r0, #8
    2152:	041b      	lsls	r3, r3, #16
    2154:	4318      	orrs	r0, r3
    2156:	7823      	ldrb	r3, [r4, #0]
    2158:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    215a:	bd16      	pop	{r1, r2, r4, pc}
    215c:	00000341 	.word	0x00000341

00002160 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2160:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2162:	4b04      	ldr	r3, [pc, #16]	; (2174 <isFlightLogged+0x14>)
    2164:	4798      	blx	r3
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2168:	18c0      	adds	r0, r0, r3
    216a:	1e43      	subs	r3, r0, #1
    216c:	4198      	sbcs	r0, r3
    216e:	b2c0      	uxtb	r0, r0
    2170:	bd10      	pop	{r4, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00002111 	.word	0x00002111
    2178:	ff000001 	.word	0xff000001

0000217c <writeFlightEndAddress>:



void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    217c:	0003      	movs	r3, r0
    }
}



void writeFlightEndAddress(Altimeter *my_altimeter) {
    217e:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    2180:	33fc      	adds	r3, #252	; 0xfc
    2182:	68db      	ldr	r3, [r3, #12]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2184:	aa01      	add	r2, sp, #4
    2186:	7013      	strb	r3, [r2, #0]
    2188:	0a19      	lsrs	r1, r3, #8
    218a:	0c1b      	lsrs	r3, r3, #16
    218c:	7051      	strb	r1, [r2, #1]
    218e:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2190:	7a03      	ldrb	r3, [r0, #8]
    2192:	2006      	movs	r0, #6
    2194:	4358      	muls	r0, r3
    2196:	3004      	adds	r0, #4
    2198:	30ff      	adds	r0, #255	; 0xff
    219a:	2103      	movs	r1, #3
    219c:	4b02      	ldr	r3, [pc, #8]	; (21a8 <writeFlightEndAddress+0x2c>)
    219e:	4798      	blx	r3
    delay_ms(10);
    21a0:	200a      	movs	r0, #10
    21a2:	4b02      	ldr	r3, [pc, #8]	; (21ac <writeFlightEndAddress+0x30>)
    21a4:	4798      	blx	r3

}
    21a6:	bd07      	pop	{r0, r1, r2, pc}
    21a8:	00000255 	.word	0x00000255
    21ac:	00000f95 	.word	0x00000f95

000021b0 <findNewFlightStart>:




void findNewFlightStart(Altimeter *my_altimeter) {
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    21b2:	2400      	movs	r4, #0
}




void findNewFlightStart(Altimeter *my_altimeter) {
    21b4:	b085      	sub	sp, #20
    21b6:	9001      	str	r0, [sp, #4]

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {
    21b8:	0020      	movs	r0, r4
    21ba:	4b24      	ldr	r3, [pc, #144]	; (224c <findNewFlightStart+0x9c>)
    21bc:	4798      	blx	r3
    21be:	2800      	cmp	r0, #0
    21c0:	d13d      	bne.n	223e <findNewFlightStart+0x8e>
    21c2:	9f01      	ldr	r7, [sp, #4]
    21c4:	ad03      	add	r5, sp, #12
    21c6:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    21c8:	2c00      	cmp	r4, #0
    21ca:	d016      	beq.n	21fa <findNewFlightStart+0x4a>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    21cc:	1e60      	subs	r0, r4, #1
    21ce:	4b20      	ldr	r3, [pc, #128]	; (2250 <findNewFlightStart+0xa0>)
    21d0:	b2c0      	uxtb	r0, r0
    21d2:	4798      	blx	r3
                delay_ms(5);
    21d4:	4b1f      	ldr	r3, [pc, #124]	; (2254 <findNewFlightStart+0xa4>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    21d6:	0006      	movs	r6, r0
                delay_ms(5);
    21d8:	2005      	movs	r0, #5
    21da:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21dc:	2006      	movs	r0, #6
    21de:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21e0:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21e2:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;
    21e4:	60fe      	str	r6, [r7, #12]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21e6:	702e      	strb	r6, [r5, #0]
    21e8:	706b      	strb	r3, [r5, #1]
    21ea:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21ec:	30ff      	adds	r0, #255	; 0xff
    21ee:	002a      	movs	r2, r5
    21f0:	2103      	movs	r1, #3
    21f2:	4b19      	ldr	r3, [pc, #100]	; (2258 <findNewFlightStart+0xa8>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21f4:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21f6:	4798      	blx	r3
    21f8:	e00f      	b.n	221a <findNewFlightStart+0x6a>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    21fa:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    21fc:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    21fe:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2200:	0040      	lsls	r0, r0, #1
    2202:	4b15      	ldr	r3, [pc, #84]	; (2258 <findNewFlightStart+0xa8>)
    2204:	002a      	movs	r2, r5
    2206:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2208:	702c      	strb	r4, [r5, #0]
    220a:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    220c:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    220e:	2380      	movs	r3, #128	; 0x80
    2210:	015b      	lsls	r3, r3, #5
    2212:	60fb      	str	r3, [r7, #12]
                beep(1500);
    2214:	4811      	ldr	r0, [pc, #68]	; (225c <findNewFlightStart+0xac>)
    2216:	4b12      	ldr	r3, [pc, #72]	; (2260 <findNewFlightStart+0xb0>)
    2218:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	721c      	strb	r4, [r3, #8]

            while (flightNumbToCheck > 0) {
                beep(500);
    221e:	20fa      	movs	r0, #250	; 0xfa
    2220:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2222:	2c00      	cmp	r4, #0
    2224:	d008      	beq.n	2238 <findNewFlightStart+0x88>
                beep(500);
    2226:	4b0e      	ldr	r3, [pc, #56]	; (2260 <findNewFlightStart+0xb0>)
    2228:	4798      	blx	r3
                delay_ms(500);
    222a:	20fa      	movs	r0, #250	; 0xfa
    222c:	4b09      	ldr	r3, [pc, #36]	; (2254 <findNewFlightStart+0xa4>)
    222e:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2230:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2232:	4798      	blx	r3
                --flightNumbToCheck;
    2234:	b2e4      	uxtb	r4, r4
    2236:	e7f2      	b.n	221e <findNewFlightStart+0x6e>
            }
            delay_ms(500);
    2238:	4b06      	ldr	r3, [pc, #24]	; (2254 <findNewFlightStart+0xa4>)
    223a:	4798      	blx	r3
            break;
    223c:	e003      	b.n	2246 <findNewFlightStart+0x96>



void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    223e:	3401      	adds	r4, #1
    2240:	b2e4      	uxtb	r4, r4
    2242:	2c14      	cmp	r4, #20
    2244:	d1b8      	bne.n	21b8 <findNewFlightStart+0x8>
            }
            delay_ms(500);
            break;
        }
    }
}
    2246:	b005      	add	sp, #20
    2248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	00002161 	.word	0x00002161
    2250:	00002139 	.word	0x00002139
    2254:	00000f95 	.word	0x00000f95
    2258:	00000255 	.word	0x00000255
    225c:	000005dc 	.word	0x000005dc
    2260:	00000d7d 	.word	0x00000d7d

00002264 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2264:	4b01      	ldr	r3, [pc, #4]	; (226c <takeSample+0x8>)
    2266:	7818      	ldrb	r0, [r3, #0]
}
    2268:	4770      	bx	lr
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	200004d3 	.word	0x200004d3

00002270 <pullSample>:

void pullSample() {
    SampleBool = true;
    2270:	2201      	movs	r2, #1
    2272:	4b01      	ldr	r3, [pc, #4]	; (2278 <pullSample+0x8>)
    2274:	701a      	strb	r2, [r3, #0]
}
    2276:	4770      	bx	lr
    2278:	200004d3 	.word	0x200004d3

0000227c <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    227c:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    227e:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2280:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    2282:	0004      	movs	r4, r0
    SampleBool = false;
    2284:	4be3      	ldr	r3, [pc, #908]	; (2614 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    2286:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2288:	4ee3      	ldr	r6, [pc, #908]	; (2618 <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    228a:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    228c:	47b0      	blx	r6
    228e:	00ad      	lsls	r5, r5, #2
    2290:	5963      	ldr	r3, [r4, r5]
    2292:	1ac0      	subs	r0, r0, r3
    2294:	23cb      	movs	r3, #203	; 0xcb
    2296:	009b      	lsls	r3, r3, #2
    2298:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    229a:	47b0      	blx	r6
    229c:	5160      	str	r0, [r4, r5]

    my_altimeter->myVoltages.batV = adc_read(senseBatPin);
    229e:	4ddf      	ldr	r5, [pc, #892]	; (261c <sampleTick+0x3a0>)
    22a0:	4edf      	ldr	r6, [pc, #892]	; (2620 <sampleTick+0x3a4>)
    22a2:	786b      	ldrb	r3, [r5, #1]
    22a4:	7829      	ldrb	r1, [r5, #0]
    22a6:	78a8      	ldrb	r0, [r5, #2]
    22a8:	021b      	lsls	r3, r3, #8
    22aa:	430b      	orrs	r3, r1
    22ac:	0400      	lsls	r0, r0, #16
    22ae:	001a      	movs	r2, r3
    22b0:	0003      	movs	r3, r0
    22b2:	78e8      	ldrb	r0, [r5, #3]
    22b4:	4313      	orrs	r3, r2
    22b6:	0600      	lsls	r0, r0, #24
    22b8:	7929      	ldrb	r1, [r5, #4]
    22ba:	4318      	orrs	r0, r3
    22bc:	47b0      	blx	r6
    22be:	23c5      	movs	r3, #197	; 0xc5
    22c0:	009b      	lsls	r3, r3, #2
    22c2:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;
    22c4:	4bd7      	ldr	r3, [pc, #860]	; (2624 <sampleTick+0x3a8>)
    22c6:	4798      	blx	r3
    22c8:	4ad7      	ldr	r2, [pc, #860]	; (2628 <sampleTick+0x3ac>)
    22ca:	4fd8      	ldr	r7, [pc, #864]	; (262c <sampleTick+0x3b0>)
    22cc:	4bd8      	ldr	r3, [pc, #864]	; (2630 <sampleTick+0x3b4>)
    22ce:	47b8      	blx	r7
    22d0:	4bd8      	ldr	r3, [pc, #864]	; (2634 <sampleTick+0x3b8>)
    22d2:	4798      	blx	r3
    22d4:	23c6      	movs	r3, #198	; 0xc6
    22d6:	009b      	lsls	r3, r3, #2
    22d8:	50e0      	str	r0, [r4, r3]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    22da:	79ab      	ldrb	r3, [r5, #6]
    22dc:	7969      	ldrb	r1, [r5, #5]
    22de:	79e8      	ldrb	r0, [r5, #7]
    22e0:	021b      	lsls	r3, r3, #8
    22e2:	430b      	orrs	r3, r1
    22e4:	0400      	lsls	r0, r0, #16
    22e6:	001a      	movs	r2, r3
    22e8:	0003      	movs	r3, r0
    22ea:	7a28      	ldrb	r0, [r5, #8]
    22ec:	4313      	orrs	r3, r2
    22ee:	0600      	lsls	r0, r0, #24
    22f0:	7a69      	ldrb	r1, [r5, #9]
    22f2:	4318      	orrs	r0, r3
    22f4:	47b0      	blx	r6
    22f6:	23c7      	movs	r3, #199	; 0xc7
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    22fc:	7aeb      	ldrb	r3, [r5, #11]
    22fe:	7aa9      	ldrb	r1, [r5, #10]
    2300:	7b28      	ldrb	r0, [r5, #12]
    2302:	021b      	lsls	r3, r3, #8
    2304:	430b      	orrs	r3, r1
    2306:	0400      	lsls	r0, r0, #16
    2308:	001a      	movs	r2, r3
    230a:	0003      	movs	r3, r0
    230c:	7b68      	ldrb	r0, [r5, #13]
    230e:	4313      	orrs	r3, r2
    2310:	0600      	lsls	r0, r0, #24
    2312:	7ba9      	ldrb	r1, [r5, #14]
    2314:	4318      	orrs	r0, r3
    2316:	47b0      	blx	r6
    2318:	4bc7      	ldr	r3, [pc, #796]	; (2638 <sampleTick+0x3bc>)
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    231a:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    231c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    231e:	7c2b      	ldrb	r3, [r5, #16]
    2320:	7c68      	ldrb	r0, [r5, #17]
    2322:	021b      	lsls	r3, r3, #8
    2324:	430b      	orrs	r3, r1
    2326:	0400      	lsls	r0, r0, #16
    2328:	001a      	movs	r2, r3
    232a:	0003      	movs	r3, r0
    232c:	7ca8      	ldrb	r0, [r5, #18]
    232e:	4313      	orrs	r3, r2
    2330:	0600      	lsls	r0, r0, #24
    2332:	7ce9      	ldrb	r1, [r5, #19]
    2334:	4318      	orrs	r0, r3
    2336:	47b0      	blx	r6
    2338:	23c8      	movs	r3, #200	; 0xc8
    233a:	009b      	lsls	r3, r3, #2
    233c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    233e:	7d6b      	ldrb	r3, [r5, #21]
    2340:	7d29      	ldrb	r1, [r5, #20]
    2342:	7da8      	ldrb	r0, [r5, #22]
    2344:	021b      	lsls	r3, r3, #8
    2346:	430b      	orrs	r3, r1
    2348:	0400      	lsls	r0, r0, #16
    234a:	001a      	movs	r2, r3
    234c:	0003      	movs	r3, r0
    234e:	7de8      	ldrb	r0, [r5, #23]
    2350:	4313      	orrs	r3, r2
    2352:	0600      	lsls	r0, r0, #24
    2354:	7e29      	ldrb	r1, [r5, #24]
    2356:	4318      	orrs	r0, r3
    2358:	47b0      	blx	r6
    235a:	4bb8      	ldr	r3, [pc, #736]	; (263c <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    235c:	7e69      	ldrb	r1, [r5, #25]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    235e:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    2360:	7eab      	ldrb	r3, [r5, #26]
    2362:	7ee8      	ldrb	r0, [r5, #27]
    2364:	021b      	lsls	r3, r3, #8
    2366:	430b      	orrs	r3, r1
    2368:	0400      	lsls	r0, r0, #16
    236a:	001a      	movs	r2, r3
    236c:	0003      	movs	r3, r0
    236e:	7f28      	ldrb	r0, [r5, #28]
    2370:	4313      	orrs	r3, r2
    2372:	0600      	lsls	r0, r0, #24
    2374:	7f69      	ldrb	r1, [r5, #29]
    2376:	4318      	orrs	r0, r3
    2378:	47b0      	blx	r6
    237a:	0023      	movs	r3, r4
    237c:	33fe      	adds	r3, #254	; 0xfe
    237e:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2380:	4baf      	ldr	r3, [pc, #700]	; (2640 <sampleTick+0x3c4>)
    2382:	0026      	movs	r6, r4
    2384:	18c0      	adds	r0, r0, r3
    2386:	4ba7      	ldr	r3, [pc, #668]	; (2624 <sampleTick+0x3a8>)
    2388:	4798      	blx	r3
    238a:	4aae      	ldr	r2, [pc, #696]	; (2644 <sampleTick+0x3c8>)
    238c:	4fa7      	ldr	r7, [pc, #668]	; (262c <sampleTick+0x3b0>)
    238e:	4bae      	ldr	r3, [pc, #696]	; (2648 <sampleTick+0x3cc>)
    2390:	47b8      	blx	r7
    2392:	4ba8      	ldr	r3, [pc, #672]	; (2634 <sampleTick+0x3b8>)
    2394:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2396:	0022      	movs	r2, r4
    2398:	0023      	movs	r3, r4
    239a:	32c8      	adds	r2, #200	; 0xc8
    239c:	9204      	str	r2, [sp, #16]
    239e:	6812      	ldr	r2, [r2, #0]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    23a0:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    23a2:	33cc      	adds	r3, #204	; 0xcc
    23a4:	2780      	movs	r7, #128	; 0x80
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    23a6:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    23a8:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    23aa:	2250      	movs	r2, #80	; 0x50
    23ac:	4ba7      	ldr	r3, [pc, #668]	; (264c <sampleTick+0x3d0>)
    23ae:	023f      	lsls	r7, r7, #8
    23b0:	615f      	str	r7, [r3, #20]
    23b2:	002e      	movs	r6, r5
    23b4:	9200      	str	r2, [sp, #0]
    23b6:	7fea      	ldrb	r2, [r5, #31]
    23b8:	7fa8      	ldrb	r0, [r5, #30]
    23ba:	0212      	lsls	r2, r2, #8
    23bc:	4302      	orrs	r2, r0
    23be:	0011      	movs	r1, r2
    23c0:	002b      	movs	r3, r5
    23c2:	361e      	adds	r6, #30
    23c4:	78b2      	ldrb	r2, [r6, #2]
    23c6:	3323      	adds	r3, #35	; 0x23
    23c8:	0412      	lsls	r2, r2, #16
    23ca:	430a      	orrs	r2, r1
    23cc:	78f1      	ldrb	r1, [r6, #3]
    23ce:	7818      	ldrb	r0, [r3, #0]
    23d0:	0609      	lsls	r1, r1, #24
    23d2:	4311      	orrs	r1, r2
    23d4:	7932      	ldrb	r2, [r6, #4]
    23d6:	789d      	ldrb	r5, [r3, #2]
    23d8:	9203      	str	r2, [sp, #12]
    23da:	785a      	ldrb	r2, [r3, #1]
    23dc:	042d      	lsls	r5, r5, #16
    23de:	0212      	lsls	r2, r2, #8
    23e0:	4302      	orrs	r2, r0
    23e2:	9102      	str	r1, [sp, #8]
    23e4:	0011      	movs	r1, r2
    23e6:	002a      	movs	r2, r5
    23e8:	78dd      	ldrb	r5, [r3, #3]
    23ea:	791b      	ldrb	r3, [r3, #4]
    23ec:	430a      	orrs	r2, r1
    23ee:	062d      	lsls	r5, r5, #24
    23f0:	4315      	orrs	r5, r2
    23f2:	9305      	str	r3, [sp, #20]
    23f4:	9a02      	ldr	r2, [sp, #8]
    23f6:	9905      	ldr	r1, [sp, #20]
    23f8:	9b03      	ldr	r3, [sp, #12]
    23fa:	0028      	movs	r0, r5
    23fc:	4e94      	ldr	r6, [pc, #592]	; (2650 <sampleTick+0x3d4>)
    23fe:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    2400:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2402:	4b92      	ldr	r3, [pc, #584]	; (264c <sampleTick+0x3d0>)
    2404:	0040      	lsls	r0, r0, #1
    2406:	619f      	str	r7, [r3, #24]
    2408:	4b92      	ldr	r3, [pc, #584]	; (2654 <sampleTick+0x3d8>)
    240a:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    240c:	4b92      	ldr	r3, [pc, #584]	; (2658 <sampleTick+0x3dc>)
    240e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2410:	4b8e      	ldr	r3, [pc, #568]	; (264c <sampleTick+0x3d0>)
    2412:	6220      	str	r0, [r4, #32]
    2414:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    2416:	2346      	movs	r3, #70	; 0x46
    2418:	9a02      	ldr	r2, [sp, #8]
    241a:	9300      	str	r3, [sp, #0]
    241c:	0028      	movs	r0, r5
    241e:	9b03      	ldr	r3, [sp, #12]
    2420:	9905      	ldr	r1, [sp, #20]
    2422:	47b0      	blx	r6
    2424:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2426:	4b89      	ldr	r3, [pc, #548]	; (264c <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2428:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    242a:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    242c:	4b8b      	ldr	r3, [pc, #556]	; (265c <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    242e:	4e8c      	ldr	r6, [pc, #560]	; (2660 <sampleTick+0x3e4>)
    2430:	601a      	str	r2, [r3, #0]
    2432:	2182      	movs	r1, #130	; 0x82
    2434:	2000      	movs	r0, #0
    2436:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2438:	21ff      	movs	r1, #255	; 0xff
    243a:	2000      	movs	r0, #0
    243c:	47b0      	blx	r6
    243e:	0023      	movs	r3, r4
    2440:	33e4      	adds	r3, #228	; 0xe4
    2442:	8018      	strh	r0, [r3, #0]
    2444:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2446:	21ff      	movs	r1, #255	; 0xff
    2448:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    244a:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    244c:	47b0      	blx	r6
    244e:	9b02      	ldr	r3, [sp, #8]
    2450:	0200      	lsls	r0, r0, #8
    2452:	4305      	orrs	r5, r0
    2454:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2456:	21ff      	movs	r1, #255	; 0xff
    2458:	2000      	movs	r0, #0
    245a:	47b0      	blx	r6
    245c:	0023      	movs	r3, r4
    245e:	33e8      	adds	r3, #232	; 0xe8
    2460:	8018      	strh	r0, [r3, #0]
    2462:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2464:	21ff      	movs	r1, #255	; 0xff
    2466:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2468:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    246a:	47b0      	blx	r6
    246c:	9b03      	ldr	r3, [sp, #12]
    246e:	0200      	lsls	r0, r0, #8
    2470:	4305      	orrs	r5, r0
    2472:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2474:	21ff      	movs	r1, #255	; 0xff
    2476:	0025      	movs	r5, r4
    2478:	2000      	movs	r0, #0
    247a:	47b0      	blx	r6
    247c:	35ec      	adds	r5, #236	; 0xec
    247e:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2480:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2482:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2484:	2000      	movs	r0, #0
    2486:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2488:	2280      	movs	r2, #128	; 0x80
    248a:	0200      	lsls	r0, r0, #8
    248c:	4b75      	ldr	r3, [pc, #468]	; (2664 <sampleTick+0x3e8>)
    248e:	4307      	orrs	r7, r0
    2490:	00d2      	lsls	r2, r2, #3
    2492:	802f      	strh	r7, [r5, #0]
    2494:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    2496:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2498:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    249a:	2000      	movs	r0, #0
    249c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    249e:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    24a0:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    24a2:	2200      	movs	r2, #0
    24a4:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    24a6:	2102      	movs	r1, #2
    24a8:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    24aa:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    24ac:	37ee      	adds	r7, #238	; 0xee
    24ae:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    24b0:	1100      	asrs	r0, r0, #4
    24b2:	31e6      	adds	r1, #230	; 0xe6
    24b4:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    24b6:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    24b8:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    24ba:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    24bc:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    24be:	4b59      	ldr	r3, [pc, #356]	; (2624 <sampleTick+0x3a8>)
    24c0:	4798      	blx	r3
    24c2:	23fe      	movs	r3, #254	; 0xfe
    24c4:	2200      	movs	r2, #0
    24c6:	4d59      	ldr	r5, [pc, #356]	; (262c <sampleTick+0x3b0>)
    24c8:	059b      	lsls	r3, r3, #22
    24ca:	47a8      	blx	r5
    24cc:	4b59      	ldr	r3, [pc, #356]	; (2634 <sampleTick+0x3b8>)
    24ce:	4798      	blx	r3
    24d0:	9b04      	ldr	r3, [sp, #16]
    24d2:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    24d4:	0023      	movs	r3, r4
    24d6:	33d0      	adds	r3, #208	; 0xd0
    24d8:	9303      	str	r3, [sp, #12]
    24da:	9b02      	ldr	r3, [sp, #8]
    24dc:	2000      	movs	r0, #0
    24de:	5e18      	ldrsh	r0, [r3, r0]
    24e0:	4b50      	ldr	r3, [pc, #320]	; (2624 <sampleTick+0x3a8>)
    24e2:	4798      	blx	r3
    24e4:	23fe      	movs	r3, #254	; 0xfe
    24e6:	2200      	movs	r2, #0
    24e8:	059b      	lsls	r3, r3, #22
    24ea:	47a8      	blx	r5
    24ec:	4b51      	ldr	r3, [pc, #324]	; (2634 <sampleTick+0x3b8>)
    24ee:	4798      	blx	r3
    24f0:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    24f2:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    24f4:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    24f6:	2300      	movs	r3, #0
    24f8:	5ef8      	ldrsh	r0, [r7, r3]
    24fa:	4b4a      	ldr	r3, [pc, #296]	; (2624 <sampleTick+0x3a8>)
    24fc:	4798      	blx	r3
    24fe:	23fe      	movs	r3, #254	; 0xfe
    2500:	2200      	movs	r2, #0
    2502:	4f4a      	ldr	r7, [pc, #296]	; (262c <sampleTick+0x3b0>)
    2504:	059b      	lsls	r3, r3, #22
    2506:	47b8      	blx	r7
    2508:	4b4a      	ldr	r3, [pc, #296]	; (2634 <sampleTick+0x3b8>)
    250a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    250c:	2280      	movs	r2, #128	; 0x80
    250e:	4b4f      	ldr	r3, [pc, #316]	; (264c <sampleTick+0x3d0>)
    2510:	00d2      	lsls	r2, r2, #3
    2512:	35d4      	adds	r5, #212	; 0xd4
    2514:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2516:	2182      	movs	r1, #130	; 0x82
    2518:	615a      	str	r2, [r3, #20]
    251a:	2000      	movs	r0, #0
    251c:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    251e:	21ff      	movs	r1, #255	; 0xff
    2520:	2000      	movs	r0, #0
    2522:	47b0      	blx	r6
    2524:	0023      	movs	r3, r4
    2526:	33f0      	adds	r3, #240	; 0xf0
    2528:	8018      	strh	r0, [r3, #0]
    252a:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    252c:	21ff      	movs	r1, #255	; 0xff
    252e:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2530:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2532:	47b0      	blx	r6
    2534:	9b02      	ldr	r3, [sp, #8]
    2536:	0200      	lsls	r0, r0, #8
    2538:	4305      	orrs	r5, r0
    253a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    253c:	21ff      	movs	r1, #255	; 0xff
    253e:	2000      	movs	r0, #0
    2540:	47b0      	blx	r6
    2542:	0023      	movs	r3, r4
    2544:	33f4      	adds	r3, #244	; 0xf4
    2546:	8018      	strh	r0, [r3, #0]
    2548:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    254a:	21ff      	movs	r1, #255	; 0xff
    254c:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    254e:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2550:	47b0      	blx	r6
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	0200      	lsls	r0, r0, #8
    2556:	4305      	orrs	r5, r0
    2558:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    255a:	21ff      	movs	r1, #255	; 0xff
    255c:	0025      	movs	r5, r4
    255e:	2000      	movs	r0, #0
    2560:	47b0      	blx	r6
    2562:	35f8      	adds	r5, #248	; 0xf8
    2564:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2566:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2568:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    256a:	2000      	movs	r0, #0
    256c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    256e:	2280      	movs	r2, #128	; 0x80
    2570:	0200      	lsls	r0, r0, #8
    2572:	4b36      	ldr	r3, [pc, #216]	; (264c <sampleTick+0x3d0>)
    2574:	4307      	orrs	r7, r0
    2576:	00d2      	lsls	r2, r2, #3
    2578:	802f      	strh	r7, [r5, #0]
    257a:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    257c:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    257e:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    2580:	2000      	movs	r0, #0
    2582:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    2584:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2586:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    2588:	2200      	movs	r2, #0
    258a:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    258c:	2100      	movs	r1, #0
    258e:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2590:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2592:	36f6      	adds	r6, #246	; 0xf6
    2594:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2596:	1100      	asrs	r0, r0, #4
    2598:	31f2      	adds	r1, #242	; 0xf2
    259a:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    259c:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    259e:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    25a0:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    25a2:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    25a4:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    25a6:	4b1f      	ldr	r3, [pc, #124]	; (2624 <sampleTick+0x3a8>)
    25a8:	4798      	blx	r3
    25aa:	23fe      	movs	r3, #254	; 0xfe
    25ac:	2200      	movs	r2, #0
    25ae:	4f1f      	ldr	r7, [pc, #124]	; (262c <sampleTick+0x3b0>)
    25b0:	059b      	lsls	r3, r3, #22
    25b2:	47b8      	blx	r7
    25b4:	4b1f      	ldr	r3, [pc, #124]	; (2634 <sampleTick+0x3b8>)
    25b6:	4798      	blx	r3
    25b8:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    25ba:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    25bc:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    25be:	2300      	movs	r3, #0
    25c0:	5ef0      	ldrsh	r0, [r6, r3]
    25c2:	4b18      	ldr	r3, [pc, #96]	; (2624 <sampleTick+0x3a8>)
    25c4:	4798      	blx	r3
    25c6:	23fe      	movs	r3, #254	; 0xfe
    25c8:	2200      	movs	r2, #0
    25ca:	4e18      	ldr	r6, [pc, #96]	; (262c <sampleTick+0x3b0>)
    25cc:	059b      	lsls	r3, r3, #22
    25ce:	47b0      	blx	r6
    25d0:	4b18      	ldr	r3, [pc, #96]	; (2634 <sampleTick+0x3b8>)
    25d2:	4798      	blx	r3
    25d4:	37dc      	adds	r7, #220	; 0xdc
    25d6:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    25d8:	2302      	movs	r3, #2
    25da:	5ee8      	ldrsh	r0, [r5, r3]
    25dc:	4b11      	ldr	r3, [pc, #68]	; (2624 <sampleTick+0x3a8>)
    25de:	4798      	blx	r3
    25e0:	23fe      	movs	r3, #254	; 0xfe
    25e2:	2200      	movs	r2, #0
    25e4:	4d11      	ldr	r5, [pc, #68]	; (262c <sampleTick+0x3b0>)
    25e6:	059b      	lsls	r3, r3, #22
    25e8:	47a8      	blx	r5
    25ea:	0026      	movs	r6, r4
    25ec:	4b11      	ldr	r3, [pc, #68]	; (2634 <sampleTick+0x3b8>)
    25ee:	4798      	blx	r3
    25f0:	36e0      	adds	r6, #224	; 0xe0
    25f2:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    25f4:	4b1c      	ldr	r3, [pc, #112]	; (2668 <sampleTick+0x3ec>)
    25f6:	2005      	movs	r0, #5
    25f8:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    25fa:	4b17      	ldr	r3, [pc, #92]	; (2658 <sampleTick+0x3dc>)
    25fc:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    25fe:	3410      	adds	r4, #16
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    2600:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    2602:	4b1a      	ldr	r3, [pc, #104]	; (266c <sampleTick+0x3f0>)
    2604:	0020      	movs	r0, r4
    2606:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    2608:	0020      	movs	r0, r4
    260a:	4b19      	ldr	r3, [pc, #100]	; (2670 <sampleTick+0x3f4>)
    260c:	4798      	blx	r3


}
    260e:	b007      	add	sp, #28
    2610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	200004d3 	.word	0x200004d3
    2618:	00000fe1 	.word	0x00000fe1
    261c:	00006630 	.word	0x00006630
    2620:	00000c55 	.word	0x00000c55
    2624:	00005ed5 	.word	0x00005ed5
    2628:	77318fc5 	.word	0x77318fc5
    262c:	0000528d 	.word	0x0000528d
    2630:	3f5f212d 	.word	0x3f5f212d
    2634:	00006071 	.word	0x00006071
    2638:	0000031e 	.word	0x0000031e
    263c:	00000322 	.word	0x00000322
    2640:	fffff0c4 	.word	0xfffff0c4
    2644:	02de00d2 	.word	0x02de00d2
    2648:	bf8f8a09 	.word	0xbf8f8a09
    264c:	41004400 	.word	0x41004400
    2650:	00000cbd 	.word	0x00000cbd
    2654:	00000f65 	.word	0x00000f65
    2658:	0000041d 	.word	0x0000041d
    265c:	41004494 	.word	0x41004494
    2660:	00002785 	.word	0x00002785
    2664:	41004498 	.word	0x41004498
    2668:	00000f95 	.word	0x00000f95
    266c:	000004d1 	.word	0x000004d1
    2670:	00000579 	.word	0x00000579

00002674 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2674:	b570      	push	{r4, r5, r6, lr}
    2676:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2678:	2301      	movs	r3, #1
    267a:	1ca6      	adds	r6, r4, #2
    267c:	40b3      	lsls	r3, r6
    267e:	480d      	ldr	r0, [pc, #52]	; (26b4 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2680:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2682:	6a01      	ldr	r1, [r0, #32]
    2684:	430b      	orrs	r3, r1
    2686:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2688:	2d00      	cmp	r5, #0
    268a:	d003      	beq.n	2694 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    268c:	2107      	movs	r1, #7
    268e:	0028      	movs	r0, r5
    2690:	4b09      	ldr	r3, [pc, #36]	; (26b8 <sercomClockEnable+0x44>)
    2692:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2694:	22f0      	movs	r2, #240	; 0xf0
    2696:	2080      	movs	r0, #128	; 0x80
    2698:	0229      	lsls	r1, r5, #8
    269a:	0112      	lsls	r2, r2, #4
    269c:	4011      	ands	r1, r2
    269e:	01c0      	lsls	r0, r0, #7
    26a0:	4301      	orrs	r1, r0
    26a2:	0020      	movs	r0, r4
    26a4:	3014      	adds	r0, #20
    26a6:	223f      	movs	r2, #63	; 0x3f
    26a8:	0003      	movs	r3, r0
    26aa:	4013      	ands	r3, r2
    26ac:	4319      	orrs	r1, r3
    26ae:	4b03      	ldr	r3, [pc, #12]	; (26bc <sercomClockEnable+0x48>)
    26b0:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    26b2:	bd70      	pop	{r4, r5, r6, pc}
    26b4:	40000400 	.word	0x40000400
    26b8:	00000f15 	.word	0x00000f15
    26bc:	40000c00 	.word	0x40000c00

000026c0 <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26c0:	4b04      	ldr	r3, [pc, #16]	; (26d4 <sercomReset+0x14>)
    26c2:	0280      	lsls	r0, r0, #10
    26c4:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    26c6:	2301      	movs	r3, #1
    26c8:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    26ca:	6802      	ldr	r2, [r0, #0]
    26cc:	421a      	tst	r2, r3
    26ce:	d1fc      	bne.n	26ca <sercomReset+0xa>
}
    26d0:	4770      	bx	lr
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	42000800 	.word	0x42000800

000026d8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    26d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26da:	0004      	movs	r4, r0
    26dc:	9300      	str	r3, [sp, #0]
    26de:	ab08      	add	r3, sp, #32
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	000e      	movs	r6, r1
    26e4:	9301      	str	r3, [sp, #4]
    26e6:	ab09      	add	r3, sp, #36	; 0x24
    26e8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    26ea:	4b12      	ldr	r3, [pc, #72]	; (2734 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    26ec:	0015      	movs	r5, r2

    sercomReset(id);
    26ee:	4798      	blx	r3
    26f0:	4b11      	ldr	r3, [pc, #68]	; (2738 <sercomSpiMasterInit+0x60>)
    26f2:	02a4      	lsls	r4, r4, #10
    26f4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    26f6:	2380      	movs	r3, #128	; 0x80
    26f8:	029b      	lsls	r3, r3, #10
    26fa:	6063      	str	r3, [r4, #4]
    26fc:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    26fe:	21c0      	movs	r1, #192	; 0xc0
    2700:	042d      	lsls	r5, r5, #16
    2702:	029b      	lsls	r3, r3, #10
    2704:	402b      	ands	r3, r5
    2706:	250e      	movs	r5, #14
    2708:	0536      	lsls	r6, r6, #20
    270a:	0389      	lsls	r1, r1, #14
    270c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    270e:	9e00      	ldr	r6, [sp, #0]
    2710:	431d      	orrs	r5, r3
    2712:	1e73      	subs	r3, r6, #1
    2714:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2716:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2718:	0772      	lsls	r2, r6, #29
    271a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    271c:	432a      	orrs	r2, r5
    271e:	1e59      	subs	r1, r3, #1
    2720:	418b      	sbcs	r3, r1
    2722:	0016      	movs	r6, r2
    2724:	071b      	lsls	r3, r3, #28
    2726:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2728:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    272a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    272c:	69e3      	ldr	r3, [r4, #28]
    272e:	075b      	lsls	r3, r3, #29
    2730:	d4fc      	bmi.n	272c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2732:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2734:	000026c1 	.word	0x000026c1
    2738:	42000800 	.word	0x42000800

0000273c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    2740:	4b0c      	ldr	r3, [pc, #48]	; (2774 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2742:	000d      	movs	r5, r1
    2744:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    2746:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2748:	4b0b      	ldr	r3, [pc, #44]	; (2778 <sercomUartInit+0x3c>)
    274a:	02b0      	lsls	r0, r6, #10
    274c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    274e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2750:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2752:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2754:	4b09      	ldr	r3, [pc, #36]	; (277c <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2756:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2758:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    275a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    275c:	0392      	lsls	r2, r2, #14
    275e:	4011      	ands	r1, r2
    2760:	4a07      	ldr	r2, [pc, #28]	; (2780 <sercomUartInit+0x44>)
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2762:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2764:	0424      	lsls	r4, r4, #16
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2766:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2768:	4311      	orrs	r1, r2
    276a:	4023      	ands	r3, r4
    276c:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    276e:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2770:	bd70      	pop	{r4, r5, r6, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	000026c1 	.word	0x000026c1
    2778:	42000800 	.word	0x42000800
    277c:	ffffb15b 	.word	0xffffb15b
    2780:	40000006 	.word	0x40000006

00002784 <spiDataTransfer>:
    2784:	4b04      	ldr	r3, [pc, #16]	; (2798 <spiDataTransfer+0x14>)
    2786:	0280      	lsls	r0, r0, #10
    2788:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    278a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    278c:	7e03      	ldrb	r3, [r0, #24]
    278e:	075b      	lsls	r3, r3, #29
    2790:	d5fc      	bpl.n	278c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2792:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2794:	b2c0      	uxtb	r0, r0
}
    2796:	4770      	bx	lr
    2798:	42000800 	.word	0x42000800

0000279c <usartDataOut>:
    279c:	4b04      	ldr	r3, [pc, #16]	; (27b0 <usartDataOut+0x14>)
    279e:	0280      	lsls	r0, r0, #10
    27a0:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    27a2:	b289      	uxth	r1, r1
    27a4:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    27a6:	7e03      	ldrb	r3, [r0, #24]
    27a8:	07db      	lsls	r3, r3, #31
    27aa:	d5fc      	bpl.n	27a6 <usartDataOut+0xa>
}
    27ac:	4770      	bx	lr
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	42000800 	.word	0x42000800

000027b4 <usartDataIn>:
    27b4:	4b02      	ldr	r3, [pc, #8]	; (27c0 <usartDataIn+0xc>)
    27b6:	0280      	lsls	r0, r0, #10
    27b8:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    27ba:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    27bc:	b2c0      	uxtb	r0, r0
}
    27be:	4770      	bx	lr
    27c0:	42000800 	.word	0x42000800

000027c4 <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    27c6:	4b2f      	ldr	r3, [pc, #188]	; (2884 <attemptConnection+0xc0>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    27c8:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    27ca:	4798      	blx	r3
    27cc:	2800      	cmp	r0, #0
    27ce:	d057      	beq.n	2880 <attemptConnection+0xbc>

        my_altimeter->myFlightState = flightIdle;
    27d0:	2301      	movs	r3, #1

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    27d2:	4a2d      	ldr	r2, [pc, #180]	; (2888 <attemptConnection+0xc4>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightIdle;
    27d4:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    27d6:	7e13      	ldrb	r3, [r2, #24]
    27d8:	4e2b      	ldr	r6, [pc, #172]	; (2888 <attemptConnection+0xc4>)
    27da:	075b      	lsls	r3, r3, #29
    27dc:	d5fb      	bpl.n	27d6 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    27de:	2003      	movs	r0, #3
    27e0:	4d2a      	ldr	r5, [pc, #168]	; (288c <attemptConnection+0xc8>)
    27e2:	47a8      	blx	r5
    27e4:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    27e6:	2c4c      	cmp	r4, #76	; 0x4c
    27e8:	d13c      	bne.n	2864 <attemptConnection+0xa0>
    27ea:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    27ec:	0020      	movs	r0, r4
    27ee:	4b28      	ldr	r3, [pc, #160]	; (2890 <attemptConnection+0xcc>)
    27f0:	4798      	blx	r3
    27f2:	2800      	cmp	r0, #0
    27f4:	d005      	beq.n	2802 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    27f6:	0021      	movs	r1, r4
    27f8:	3130      	adds	r1, #48	; 0x30
    27fa:	b2c9      	uxtb	r1, r1
    27fc:	2003      	movs	r0, #3
    27fe:	4b25      	ldr	r3, [pc, #148]	; (2894 <attemptConnection+0xd0>)
    2800:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2802:	3401      	adds	r4, #1
    2804:	b2e4      	uxtb	r4, r4
    2806:	2c0b      	cmp	r4, #11
    2808:	d1f0      	bne.n	27ec <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    280a:	210f      	movs	r1, #15
    280c:	2003      	movs	r0, #3
    280e:	4c21      	ldr	r4, [pc, #132]	; (2894 <attemptConnection+0xd0>)
    2810:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2812:	7e33      	ldrb	r3, [r6, #24]
    2814:	075b      	lsls	r3, r3, #29
    2816:	d5fc      	bpl.n	2812 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2818:	2003      	movs	r0, #3
    281a:	47a8      	blx	r5
    281c:	3830      	subs	r0, #48	; 0x30
    281e:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2820:	0028      	movs	r0, r5
    2822:	4b1d      	ldr	r3, [pc, #116]	; (2898 <attemptConnection+0xd4>)
    2824:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2826:	4b1d      	ldr	r3, [pc, #116]	; (289c <attemptConnection+0xd8>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2828:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    282a:	0028      	movs	r0, r5
    282c:	4798      	blx	r3
    282e:	1e46      	subs	r6, r0, #1
    2830:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2832:	1bf5      	subs	r5, r6, r7
    2834:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2836:	b2e9      	uxtb	r1, r5
    2838:	2003      	movs	r0, #3
    283a:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    283c:	b2a9      	uxth	r1, r5
    283e:	0a09      	lsrs	r1, r1, #8
    2840:	2003      	movs	r0, #3
    2842:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2844:	b2f1      	uxtb	r1, r6
    2846:	2003      	movs	r0, #3
    2848:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    284a:	0a31      	lsrs	r1, r6, #8
    284c:	b2c9      	uxtb	r1, r1
    284e:	2003      	movs	r0, #3
    2850:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2852:	0c31      	lsrs	r1, r6, #16
    2854:	b2c9      	uxtb	r1, r1
    2856:	2003      	movs	r0, #3
    2858:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    285a:	0031      	movs	r1, r6
    285c:	0038      	movs	r0, r7
    285e:	4b10      	ldr	r3, [pc, #64]	; (28a0 <attemptConnection+0xdc>)
    2860:	4798      	blx	r3
    2862:	e00d      	b.n	2880 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2864:	2845      	cmp	r0, #69	; 0x45
    2866:	d10b      	bne.n	2880 <attemptConnection+0xbc>
            AT25SFChipErase();
    2868:	4b0e      	ldr	r3, [pc, #56]	; (28a4 <attemptConnection+0xe0>)
    286a:	4798      	blx	r3

            AT25SFHoldTillReady();
    286c:	4b0e      	ldr	r3, [pc, #56]	; (28a8 <attemptConnection+0xe4>)
    286e:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    2870:	2003      	movs	r0, #3
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <attemptConnection+0xd0>)
    2874:	0021      	movs	r1, r4
    2876:	4798      	blx	r3
            beep(400);
    2878:	20c8      	movs	r0, #200	; 0xc8
    287a:	4b0c      	ldr	r3, [pc, #48]	; (28ac <attemptConnection+0xe8>)
    287c:	0040      	lsls	r0, r0, #1
    287e:	4798      	blx	r3


        }
    }

}
    2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	00000b5d 	.word	0x00000b5d
    2888:	42001400 	.word	0x42001400
    288c:	000027b5 	.word	0x000027b5
    2890:	00002161 	.word	0x00002161
    2894:	0000279d 	.word	0x0000279d
    2898:	00002111 	.word	0x00002111
    289c:	00002139 	.word	0x00002139
    28a0:	00000b91 	.word	0x00000b91
    28a4:	00000221 	.word	0x00000221
    28a8:	000001e5 	.word	0x000001e5
    28ac:	00000d7d 	.word	0x00000d7d

000028b0 <pow>:
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	465f      	mov	r7, fp
    28b4:	464d      	mov	r5, r9
    28b6:	4656      	mov	r6, sl
    28b8:	4644      	mov	r4, r8
    28ba:	b4f0      	push	{r4, r5, r6, r7}
    28bc:	b091      	sub	sp, #68	; 0x44
    28be:	001f      	movs	r7, r3
    28c0:	0004      	movs	r4, r0
    28c2:	000d      	movs	r5, r1
    28c4:	0016      	movs	r6, r2
    28c6:	f000 f9af 	bl	2c28 <__ieee754_pow>
    28ca:	4bcf      	ldr	r3, [pc, #828]	; (2c08 <pow+0x358>)
    28cc:	9002      	str	r0, [sp, #8]
    28ce:	9103      	str	r1, [sp, #12]
    28d0:	469b      	mov	fp, r3
    28d2:	781b      	ldrb	r3, [r3, #0]
    28d4:	b25b      	sxtb	r3, r3
    28d6:	4699      	mov	r9, r3
    28d8:	3301      	adds	r3, #1
    28da:	d04f      	beq.n	297c <pow+0xcc>
    28dc:	0032      	movs	r2, r6
    28de:	003b      	movs	r3, r7
    28e0:	0030      	movs	r0, r6
    28e2:	0039      	movs	r1, r7
    28e4:	f003 faa0 	bl	5e28 <__aeabi_dcmpun>
    28e8:	9000      	str	r0, [sp, #0]
    28ea:	2800      	cmp	r0, #0
    28ec:	d146      	bne.n	297c <pow+0xcc>
    28ee:	0022      	movs	r2, r4
    28f0:	002b      	movs	r3, r5
    28f2:	0020      	movs	r0, r4
    28f4:	0029      	movs	r1, r5
    28f6:	f003 fa97 	bl	5e28 <__aeabi_dcmpun>
    28fa:	2200      	movs	r2, #0
    28fc:	4682      	mov	sl, r0
    28fe:	2800      	cmp	r0, #0
    2900:	d134      	bne.n	296c <pow+0xbc>
    2902:	2300      	movs	r3, #0
    2904:	0020      	movs	r0, r4
    2906:	0029      	movs	r1, r5
    2908:	f001 f8f2 	bl	3af0 <__aeabi_dcmpeq>
    290c:	2800      	cmp	r0, #0
    290e:	d03a      	beq.n	2986 <pow+0xd6>
    2910:	2200      	movs	r2, #0
    2912:	2300      	movs	r3, #0
    2914:	0030      	movs	r0, r6
    2916:	0039      	movs	r1, r7
    2918:	f001 f8ea 	bl	3af0 <__aeabi_dcmpeq>
    291c:	9005      	str	r0, [sp, #20]
    291e:	2800      	cmp	r0, #0
    2920:	d100      	bne.n	2924 <pow+0x74>
    2922:	e074      	b.n	2a0e <pow+0x15e>
    2924:	ab06      	add	r3, sp, #24
    2926:	4698      	mov	r8, r3
    2928:	2301      	movs	r3, #1
    292a:	4642      	mov	r2, r8
    292c:	9306      	str	r3, [sp, #24]
    292e:	4bb7      	ldr	r3, [pc, #732]	; (2c0c <pow+0x35c>)
    2930:	6053      	str	r3, [r2, #4]
    2932:	4643      	mov	r3, r8
    2934:	4652      	mov	r2, sl
    2936:	609c      	str	r4, [r3, #8]
    2938:	60dd      	str	r5, [r3, #12]
    293a:	621a      	str	r2, [r3, #32]
    293c:	611e      	str	r6, [r3, #16]
    293e:	615f      	str	r7, [r3, #20]
    2940:	4642      	mov	r2, r8
    2942:	2300      	movs	r3, #0
    2944:	2400      	movs	r4, #0
    2946:	6193      	str	r3, [r2, #24]
    2948:	61d4      	str	r4, [r2, #28]
    294a:	464b      	mov	r3, r9
    294c:	2b00      	cmp	r3, #0
    294e:	d100      	bne.n	2952 <pow+0xa2>
    2950:	e094      	b.n	2a7c <pow+0x1cc>
    2952:	2300      	movs	r3, #0
    2954:	4cae      	ldr	r4, [pc, #696]	; (2c10 <pow+0x360>)
    2956:	9300      	str	r3, [sp, #0]
    2958:	9401      	str	r4, [sp, #4]
    295a:	9800      	ldr	r0, [sp, #0]
    295c:	9901      	ldr	r1, [sp, #4]
    295e:	b011      	add	sp, #68	; 0x44
    2960:	bc3c      	pop	{r2, r3, r4, r5}
    2962:	4690      	mov	r8, r2
    2964:	4699      	mov	r9, r3
    2966:	46a2      	mov	sl, r4
    2968:	46ab      	mov	fp, r5
    296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    296c:	2300      	movs	r3, #0
    296e:	0030      	movs	r0, r6
    2970:	0039      	movs	r1, r7
    2972:	f001 f8bd 	bl	3af0 <__aeabi_dcmpeq>
    2976:	2800      	cmp	r0, #0
    2978:	d000      	beq.n	297c <pow+0xcc>
    297a:	e0eb      	b.n	2b54 <pow+0x2a4>
    297c:	9b02      	ldr	r3, [sp, #8]
    297e:	9c03      	ldr	r4, [sp, #12]
    2980:	9300      	str	r3, [sp, #0]
    2982:	9401      	str	r4, [sp, #4]
    2984:	e7e9      	b.n	295a <pow+0xaa>
    2986:	9802      	ldr	r0, [sp, #8]
    2988:	9903      	ldr	r1, [sp, #12]
    298a:	f000 ff7d 	bl	3888 <finite>
    298e:	4681      	mov	r9, r0
    2990:	2800      	cmp	r0, #0
    2992:	d100      	bne.n	2996 <pow+0xe6>
    2994:	e086      	b.n	2aa4 <pow+0x1f4>
    2996:	9802      	ldr	r0, [sp, #8]
    2998:	9903      	ldr	r1, [sp, #12]
    299a:	2200      	movs	r2, #0
    299c:	2300      	movs	r3, #0
    299e:	f001 f8a7 	bl	3af0 <__aeabi_dcmpeq>
    29a2:	2800      	cmp	r0, #0
    29a4:	d0ea      	beq.n	297c <pow+0xcc>
    29a6:	0020      	movs	r0, r4
    29a8:	0029      	movs	r1, r5
    29aa:	f000 ff6d 	bl	3888 <finite>
    29ae:	9a02      	ldr	r2, [sp, #8]
    29b0:	9b03      	ldr	r3, [sp, #12]
    29b2:	9200      	str	r2, [sp, #0]
    29b4:	9301      	str	r3, [sp, #4]
    29b6:	2800      	cmp	r0, #0
    29b8:	d0cf      	beq.n	295a <pow+0xaa>
    29ba:	0030      	movs	r0, r6
    29bc:	0039      	movs	r1, r7
    29be:	f000 ff63 	bl	3888 <finite>
    29c2:	9a02      	ldr	r2, [sp, #8]
    29c4:	9b03      	ldr	r3, [sp, #12]
    29c6:	9200      	str	r2, [sp, #0]
    29c8:	9301      	str	r3, [sp, #4]
    29ca:	2800      	cmp	r0, #0
    29cc:	d0c5      	beq.n	295a <pow+0xaa>
    29ce:	ab06      	add	r3, sp, #24
    29d0:	4698      	mov	r8, r3
    29d2:	2304      	movs	r3, #4
    29d4:	4642      	mov	r2, r8
    29d6:	9306      	str	r3, [sp, #24]
    29d8:	4b8c      	ldr	r3, [pc, #560]	; (2c0c <pow+0x35c>)
    29da:	6094      	str	r4, [r2, #8]
    29dc:	60d5      	str	r5, [r2, #12]
    29de:	6053      	str	r3, [r2, #4]
    29e0:	2300      	movs	r3, #0
    29e2:	2400      	movs	r4, #0
    29e4:	6213      	str	r3, [r2, #32]
    29e6:	2300      	movs	r3, #0
    29e8:	6193      	str	r3, [r2, #24]
    29ea:	61d4      	str	r4, [r2, #28]
    29ec:	465b      	mov	r3, fp
    29ee:	781b      	ldrb	r3, [r3, #0]
    29f0:	6116      	str	r6, [r2, #16]
    29f2:	6157      	str	r7, [r2, #20]
    29f4:	b25b      	sxtb	r3, r3
    29f6:	2b02      	cmp	r3, #2
    29f8:	d004      	beq.n	2a04 <pow+0x154>
    29fa:	4640      	mov	r0, r8
    29fc:	f000 ff4e 	bl	389c <matherr>
    2a00:	2800      	cmp	r0, #0
    2a02:	d140      	bne.n	2a86 <pow+0x1d6>
    2a04:	f003 fc6a 	bl	62dc <__errno>
    2a08:	2322      	movs	r3, #34	; 0x22
    2a0a:	6003      	str	r3, [r0, #0]
    2a0c:	e03b      	b.n	2a86 <pow+0x1d6>
    2a0e:	0030      	movs	r0, r6
    2a10:	0039      	movs	r1, r7
    2a12:	f000 ff39 	bl	3888 <finite>
    2a16:	9a02      	ldr	r2, [sp, #8]
    2a18:	9b03      	ldr	r3, [sp, #12]
    2a1a:	9200      	str	r2, [sp, #0]
    2a1c:	9301      	str	r3, [sp, #4]
    2a1e:	2800      	cmp	r0, #0
    2a20:	d09b      	beq.n	295a <pow+0xaa>
    2a22:	2200      	movs	r2, #0
    2a24:	2300      	movs	r3, #0
    2a26:	0030      	movs	r0, r6
    2a28:	0039      	movs	r1, r7
    2a2a:	f001 f867 	bl	3afc <__aeabi_dcmplt>
    2a2e:	2800      	cmp	r0, #0
    2a30:	d100      	bne.n	2a34 <pow+0x184>
    2a32:	e792      	b.n	295a <pow+0xaa>
    2a34:	ab06      	add	r3, sp, #24
    2a36:	4698      	mov	r8, r3
    2a38:	2301      	movs	r3, #1
    2a3a:	4642      	mov	r2, r8
    2a3c:	9306      	str	r3, [sp, #24]
    2a3e:	4b73      	ldr	r3, [pc, #460]	; (2c0c <pow+0x35c>)
    2a40:	6053      	str	r3, [r2, #4]
    2a42:	4643      	mov	r3, r8
    2a44:	9a05      	ldr	r2, [sp, #20]
    2a46:	609c      	str	r4, [r3, #8]
    2a48:	60dd      	str	r5, [r3, #12]
    2a4a:	621a      	str	r2, [r3, #32]
    2a4c:	611e      	str	r6, [r3, #16]
    2a4e:	615f      	str	r7, [r3, #20]
    2a50:	465b      	mov	r3, fp
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	b25b      	sxtb	r3, r3
    2a56:	2b00      	cmp	r3, #0
    2a58:	d00b      	beq.n	2a72 <pow+0x1c2>
    2a5a:	2000      	movs	r0, #0
    2a5c:	4642      	mov	r2, r8
    2a5e:	496d      	ldr	r1, [pc, #436]	; (2c14 <pow+0x364>)
    2a60:	6190      	str	r0, [r2, #24]
    2a62:	61d1      	str	r1, [r2, #28]
    2a64:	2b02      	cmp	r3, #2
    2a66:	d109      	bne.n	2a7c <pow+0x1cc>
    2a68:	f003 fc38 	bl	62dc <__errno>
    2a6c:	2321      	movs	r3, #33	; 0x21
    2a6e:	6003      	str	r3, [r0, #0]
    2a70:	e009      	b.n	2a86 <pow+0x1d6>
    2a72:	4642      	mov	r2, r8
    2a74:	2300      	movs	r3, #0
    2a76:	2400      	movs	r4, #0
    2a78:	6193      	str	r3, [r2, #24]
    2a7a:	61d4      	str	r4, [r2, #28]
    2a7c:	4640      	mov	r0, r8
    2a7e:	f000 ff0d 	bl	389c <matherr>
    2a82:	2800      	cmp	r0, #0
    2a84:	d0f0      	beq.n	2a68 <pow+0x1b8>
    2a86:	4643      	mov	r3, r8
    2a88:	6a1b      	ldr	r3, [r3, #32]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d004      	beq.n	2a98 <pow+0x1e8>
    2a8e:	f003 fc25 	bl	62dc <__errno>
    2a92:	4643      	mov	r3, r8
    2a94:	6a1b      	ldr	r3, [r3, #32]
    2a96:	6003      	str	r3, [r0, #0]
    2a98:	4643      	mov	r3, r8
    2a9a:	69dc      	ldr	r4, [r3, #28]
    2a9c:	699b      	ldr	r3, [r3, #24]
    2a9e:	9300      	str	r3, [sp, #0]
    2aa0:	9401      	str	r4, [sp, #4]
    2aa2:	e75a      	b.n	295a <pow+0xaa>
    2aa4:	0020      	movs	r0, r4
    2aa6:	0029      	movs	r1, r5
    2aa8:	f000 feee 	bl	3888 <finite>
    2aac:	2800      	cmp	r0, #0
    2aae:	d100      	bne.n	2ab2 <pow+0x202>
    2ab0:	e771      	b.n	2996 <pow+0xe6>
    2ab2:	0030      	movs	r0, r6
    2ab4:	0039      	movs	r1, r7
    2ab6:	f000 fee7 	bl	3888 <finite>
    2aba:	2800      	cmp	r0, #0
    2abc:	d100      	bne.n	2ac0 <pow+0x210>
    2abe:	e76a      	b.n	2996 <pow+0xe6>
    2ac0:	9802      	ldr	r0, [sp, #8]
    2ac2:	9903      	ldr	r1, [sp, #12]
    2ac4:	000b      	movs	r3, r1
    2ac6:	0002      	movs	r2, r0
    2ac8:	f003 f9ae 	bl	5e28 <__aeabi_dcmpun>
    2acc:	ab06      	add	r3, sp, #24
    2ace:	4698      	mov	r8, r3
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d17a      	bne.n	2bca <pow+0x31a>
    2ad4:	2303      	movs	r3, #3
    2ad6:	4642      	mov	r2, r8
    2ad8:	9306      	str	r3, [sp, #24]
    2ada:	4b4c      	ldr	r3, [pc, #304]	; (2c0c <pow+0x35c>)
    2adc:	6210      	str	r0, [r2, #32]
    2ade:	6053      	str	r3, [r2, #4]
    2ae0:	465b      	mov	r3, fp
    2ae2:	781b      	ldrb	r3, [r3, #0]
    2ae4:	6094      	str	r4, [r2, #8]
    2ae6:	60d5      	str	r5, [r2, #12]
    2ae8:	b25b      	sxtb	r3, r3
    2aea:	6116      	str	r6, [r2, #16]
    2aec:	6157      	str	r7, [r2, #20]
    2aee:	4699      	mov	r9, r3
    2af0:	2b00      	cmp	r3, #0
    2af2:	d148      	bne.n	2b86 <pow+0x2d6>
    2af4:	22e0      	movs	r2, #224	; 0xe0
    2af6:	4641      	mov	r1, r8
    2af8:	4b47      	ldr	r3, [pc, #284]	; (2c18 <pow+0x368>)
    2afa:	0612      	lsls	r2, r2, #24
    2afc:	618a      	str	r2, [r1, #24]
    2afe:	61cb      	str	r3, [r1, #28]
    2b00:	0020      	movs	r0, r4
    2b02:	2200      	movs	r2, #0
    2b04:	2300      	movs	r3, #0
    2b06:	0029      	movs	r1, r5
    2b08:	f000 fff8 	bl	3afc <__aeabi_dcmplt>
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d100      	bne.n	2b12 <pow+0x262>
    2b10:	e773      	b.n	29fa <pow+0x14a>
    2b12:	2200      	movs	r2, #0
    2b14:	4b41      	ldr	r3, [pc, #260]	; (2c1c <pow+0x36c>)
    2b16:	0030      	movs	r0, r6
    2b18:	0039      	movs	r1, r7
    2b1a:	f002 fbb7 	bl	528c <__aeabi_dmul>
    2b1e:	0004      	movs	r4, r0
    2b20:	000d      	movs	r5, r1
    2b22:	f000 fec3 	bl	38ac <rint>
    2b26:	0002      	movs	r2, r0
    2b28:	000b      	movs	r3, r1
    2b2a:	0020      	movs	r0, r4
    2b2c:	0029      	movs	r1, r5
    2b2e:	f000 ffdf 	bl	3af0 <__aeabi_dcmpeq>
    2b32:	2800      	cmp	r0, #0
    2b34:	d105      	bne.n	2b42 <pow+0x292>
    2b36:	22e0      	movs	r2, #224	; 0xe0
    2b38:	4b39      	ldr	r3, [pc, #228]	; (2c20 <pow+0x370>)
    2b3a:	0612      	lsls	r2, r2, #24
    2b3c:	4641      	mov	r1, r8
    2b3e:	618a      	str	r2, [r1, #24]
    2b40:	61cb      	str	r3, [r1, #28]
    2b42:	465b      	mov	r3, fp
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	b25b      	sxtb	r3, r3
    2b48:	4699      	mov	r9, r3
    2b4a:	464b      	mov	r3, r9
    2b4c:	2b02      	cmp	r3, #2
    2b4e:	d000      	beq.n	2b52 <pow+0x2a2>
    2b50:	e753      	b.n	29fa <pow+0x14a>
    2b52:	e757      	b.n	2a04 <pow+0x154>
    2b54:	ab06      	add	r3, sp, #24
    2b56:	4698      	mov	r8, r3
    2b58:	2301      	movs	r3, #1
    2b5a:	4642      	mov	r2, r8
    2b5c:	9306      	str	r3, [sp, #24]
    2b5e:	4b2b      	ldr	r3, [pc, #172]	; (2c0c <pow+0x35c>)
    2b60:	6053      	str	r3, [r2, #4]
    2b62:	4643      	mov	r3, r8
    2b64:	609c      	str	r4, [r3, #8]
    2b66:	60dd      	str	r5, [r3, #12]
    2b68:	2400      	movs	r4, #0
    2b6a:	9a00      	ldr	r2, [sp, #0]
    2b6c:	4d28      	ldr	r5, [pc, #160]	; (2c10 <pow+0x360>)
    2b6e:	621a      	str	r2, [r3, #32]
    2b70:	611e      	str	r6, [r3, #16]
    2b72:	615f      	str	r7, [r3, #20]
    2b74:	619c      	str	r4, [r3, #24]
    2b76:	61dd      	str	r5, [r3, #28]
    2b78:	464b      	mov	r3, r9
    2b7a:	9400      	str	r4, [sp, #0]
    2b7c:	9501      	str	r5, [sp, #4]
    2b7e:	2b02      	cmp	r3, #2
    2b80:	d000      	beq.n	2b84 <pow+0x2d4>
    2b82:	e77b      	b.n	2a7c <pow+0x1cc>
    2b84:	e6e9      	b.n	295a <pow+0xaa>
    2b86:	2200      	movs	r2, #0
    2b88:	4641      	mov	r1, r8
    2b8a:	4b26      	ldr	r3, [pc, #152]	; (2c24 <pow+0x374>)
    2b8c:	0020      	movs	r0, r4
    2b8e:	618a      	str	r2, [r1, #24]
    2b90:	61cb      	str	r3, [r1, #28]
    2b92:	2200      	movs	r2, #0
    2b94:	2300      	movs	r3, #0
    2b96:	0029      	movs	r1, r5
    2b98:	f000 ffb0 	bl	3afc <__aeabi_dcmplt>
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d0d4      	beq.n	2b4a <pow+0x29a>
    2ba0:	2200      	movs	r2, #0
    2ba2:	4b1e      	ldr	r3, [pc, #120]	; (2c1c <pow+0x36c>)
    2ba4:	0030      	movs	r0, r6
    2ba6:	0039      	movs	r1, r7
    2ba8:	f002 fb70 	bl	528c <__aeabi_dmul>
    2bac:	0004      	movs	r4, r0
    2bae:	000d      	movs	r5, r1
    2bb0:	f000 fe7c 	bl	38ac <rint>
    2bb4:	0002      	movs	r2, r0
    2bb6:	000b      	movs	r3, r1
    2bb8:	0020      	movs	r0, r4
    2bba:	0029      	movs	r1, r5
    2bbc:	f000 ff98 	bl	3af0 <__aeabi_dcmpeq>
    2bc0:	2800      	cmp	r0, #0
    2bc2:	d1be      	bne.n	2b42 <pow+0x292>
    2bc4:	2200      	movs	r2, #0
    2bc6:	4b13      	ldr	r3, [pc, #76]	; (2c14 <pow+0x364>)
    2bc8:	e7b8      	b.n	2b3c <pow+0x28c>
    2bca:	2301      	movs	r3, #1
    2bcc:	4642      	mov	r2, r8
    2bce:	9306      	str	r3, [sp, #24]
    2bd0:	4b0e      	ldr	r3, [pc, #56]	; (2c0c <pow+0x35c>)
    2bd2:	6053      	str	r3, [r2, #4]
    2bd4:	4643      	mov	r3, r8
    2bd6:	464a      	mov	r2, r9
    2bd8:	609c      	str	r4, [r3, #8]
    2bda:	60dd      	str	r5, [r3, #12]
    2bdc:	621a      	str	r2, [r3, #32]
    2bde:	611e      	str	r6, [r3, #16]
    2be0:	615f      	str	r7, [r3, #20]
    2be2:	2400      	movs	r4, #0
    2be4:	465b      	mov	r3, fp
    2be6:	571c      	ldrsb	r4, [r3, r4]
    2be8:	2c00      	cmp	r4, #0
    2bea:	d100      	bne.n	2bee <pow+0x33e>
    2bec:	e741      	b.n	2a72 <pow+0x1c2>
    2bee:	2300      	movs	r3, #0
    2bf0:	2200      	movs	r2, #0
    2bf2:	0019      	movs	r1, r3
    2bf4:	0010      	movs	r0, r2
    2bf6:	f001 ff25 	bl	4a44 <__aeabi_ddiv>
    2bfa:	4643      	mov	r3, r8
    2bfc:	6198      	str	r0, [r3, #24]
    2bfe:	61d9      	str	r1, [r3, #28]
    2c00:	2c02      	cmp	r4, #2
    2c02:	d100      	bne.n	2c06 <pow+0x356>
    2c04:	e730      	b.n	2a68 <pow+0x1b8>
    2c06:	e739      	b.n	2a7c <pow+0x1cc>
    2c08:	20000070 	.word	0x20000070
    2c0c:	00006658 	.word	0x00006658
    2c10:	3ff00000 	.word	0x3ff00000
    2c14:	fff00000 	.word	0xfff00000
    2c18:	47efffff 	.word	0x47efffff
    2c1c:	3fe00000 	.word	0x3fe00000
    2c20:	c7efffff 	.word	0xc7efffff
    2c24:	7ff00000 	.word	0x7ff00000

00002c28 <__ieee754_pow>:
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	4656      	mov	r6, sl
    2c2c:	464d      	mov	r5, r9
    2c2e:	4644      	mov	r4, r8
    2c30:	465f      	mov	r7, fp
    2c32:	b4f0      	push	{r4, r5, r6, r7}
    2c34:	001c      	movs	r4, r3
    2c36:	0013      	movs	r3, r2
    2c38:	0067      	lsls	r7, r4, #1
    2c3a:	b091      	sub	sp, #68	; 0x44
    2c3c:	087f      	lsrs	r7, r7, #1
    2c3e:	9300      	str	r3, [sp, #0]
    2c40:	9401      	str	r4, [sp, #4]
    2c42:	0006      	movs	r6, r0
    2c44:	000d      	movs	r5, r1
    2c46:	4680      	mov	r8, r0
    2c48:	4689      	mov	r9, r1
    2c4a:	46a2      	mov	sl, r4
    2c4c:	433b      	orrs	r3, r7
    2c4e:	d032      	beq.n	2cb6 <__ieee754_pow+0x8e>
    2c50:	4b6e      	ldr	r3, [pc, #440]	; (2e0c <__ieee754_pow+0x1e4>)
    2c52:	006c      	lsls	r4, r5, #1
    2c54:	0864      	lsrs	r4, r4, #1
    2c56:	429c      	cmp	r4, r3
    2c58:	dc29      	bgt.n	2cae <__ieee754_pow+0x86>
    2c5a:	d026      	beq.n	2caa <__ieee754_pow+0x82>
    2c5c:	429f      	cmp	r7, r3
    2c5e:	dc26      	bgt.n	2cae <__ieee754_pow+0x86>
    2c60:	4b6a      	ldr	r3, [pc, #424]	; (2e0c <__ieee754_pow+0x1e4>)
    2c62:	429f      	cmp	r7, r3
    2c64:	d100      	bne.n	2c68 <__ieee754_pow+0x40>
    2c66:	e089      	b.n	2d7c <__ieee754_pow+0x154>
    2c68:	2300      	movs	r3, #0
    2c6a:	469b      	mov	fp, r3
    2c6c:	464b      	mov	r3, r9
    2c6e:	2b00      	cmp	r3, #0
    2c70:	da00      	bge.n	2c74 <__ieee754_pow+0x4c>
    2c72:	e087      	b.n	2d84 <__ieee754_pow+0x15c>
    2c74:	2a00      	cmp	r2, #0
    2c76:	d12f      	bne.n	2cd8 <__ieee754_pow+0xb0>
    2c78:	4b64      	ldr	r3, [pc, #400]	; (2e0c <__ieee754_pow+0x1e4>)
    2c7a:	429f      	cmp	r7, r3
    2c7c:	d100      	bne.n	2c80 <__ieee754_pow+0x58>
    2c7e:	e09f      	b.n	2dc0 <__ieee754_pow+0x198>
    2c80:	4b63      	ldr	r3, [pc, #396]	; (2e10 <__ieee754_pow+0x1e8>)
    2c82:	429f      	cmp	r7, r3
    2c84:	d05d      	beq.n	2d42 <__ieee754_pow+0x11a>
    2c86:	2380      	movs	r3, #128	; 0x80
    2c88:	05db      	lsls	r3, r3, #23
    2c8a:	459a      	cmp	sl, r3
    2c8c:	d101      	bne.n	2c92 <__ieee754_pow+0x6a>
    2c8e:	f000 fbc1 	bl	3414 <__ieee754_pow+0x7ec>
    2c92:	4b60      	ldr	r3, [pc, #384]	; (2e14 <__ieee754_pow+0x1ec>)
    2c94:	459a      	cmp	sl, r3
    2c96:	d11f      	bne.n	2cd8 <__ieee754_pow+0xb0>
    2c98:	464b      	mov	r3, r9
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	db1c      	blt.n	2cd8 <__ieee754_pow+0xb0>
    2c9e:	0030      	movs	r0, r6
    2ca0:	0029      	movs	r1, r5
    2ca2:	f000 fcf7 	bl	3694 <__ieee754_sqrt>
    2ca6:	0006      	movs	r6, r0
    2ca8:	e007      	b.n	2cba <__ieee754_pow+0x92>
    2caa:	2800      	cmp	r0, #0
    2cac:	d00d      	beq.n	2cca <__ieee754_pow+0xa2>
    2cae:	4b5a      	ldr	r3, [pc, #360]	; (2e18 <__ieee754_pow+0x1f0>)
    2cb0:	18e0      	adds	r0, r4, r3
    2cb2:	4330      	orrs	r0, r6
    2cb4:	d10b      	bne.n	2cce <__ieee754_pow+0xa6>
    2cb6:	2600      	movs	r6, #0
    2cb8:	4955      	ldr	r1, [pc, #340]	; (2e10 <__ieee754_pow+0x1e8>)
    2cba:	0030      	movs	r0, r6
    2cbc:	b011      	add	sp, #68	; 0x44
    2cbe:	bc3c      	pop	{r2, r3, r4, r5}
    2cc0:	4690      	mov	r8, r2
    2cc2:	4699      	mov	r9, r3
    2cc4:	46a2      	mov	sl, r4
    2cc6:	46ab      	mov	fp, r5
    2cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cca:	42a7      	cmp	r7, r4
    2ccc:	ddc8      	ble.n	2c60 <__ieee754_pow+0x38>
    2cce:	4853      	ldr	r0, [pc, #332]	; (2e1c <__ieee754_pow+0x1f4>)
    2cd0:	f000 fde6 	bl	38a0 <nan>
    2cd4:	0006      	movs	r6, r0
    2cd6:	e7f0      	b.n	2cba <__ieee754_pow+0x92>
    2cd8:	0030      	movs	r0, r6
    2cda:	0029      	movs	r1, r5
    2cdc:	f000 fdd0 	bl	3880 <fabs>
    2ce0:	4643      	mov	r3, r8
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d01d      	beq.n	2d22 <__ieee754_pow+0xfa>
    2ce6:	0feb      	lsrs	r3, r5, #31
    2ce8:	3b01      	subs	r3, #1
    2cea:	4698      	mov	r8, r3
    2cec:	465b      	mov	r3, fp
    2cee:	4642      	mov	r2, r8
    2cf0:	4313      	orrs	r3, r2
    2cf2:	d079      	beq.n	2de8 <__ieee754_pow+0x1c0>
    2cf4:	4b4a      	ldr	r3, [pc, #296]	; (2e20 <__ieee754_pow+0x1f8>)
    2cf6:	429f      	cmp	r7, r3
    2cf8:	dc00      	bgt.n	2cfc <__ieee754_pow+0xd4>
    2cfa:	e09f      	b.n	2e3c <__ieee754_pow+0x214>
    2cfc:	4b49      	ldr	r3, [pc, #292]	; (2e24 <__ieee754_pow+0x1fc>)
    2cfe:	429f      	cmp	r7, r3
    2d00:	dc01      	bgt.n	2d06 <__ieee754_pow+0xde>
    2d02:	f000 fbce 	bl	34a2 <__ieee754_pow+0x87a>
    2d06:	4b48      	ldr	r3, [pc, #288]	; (2e28 <__ieee754_pow+0x200>)
    2d08:	429c      	cmp	r4, r3
    2d0a:	dd79      	ble.n	2e00 <__ieee754_pow+0x1d8>
    2d0c:	4653      	mov	r3, sl
    2d0e:	2b00      	cmp	r3, #0
    2d10:	dd79      	ble.n	2e06 <__ieee754_pow+0x1de>
    2d12:	4a46      	ldr	r2, [pc, #280]	; (2e2c <__ieee754_pow+0x204>)
    2d14:	4b46      	ldr	r3, [pc, #280]	; (2e30 <__ieee754_pow+0x208>)
    2d16:	0010      	movs	r0, r2
    2d18:	0019      	movs	r1, r3
    2d1a:	f002 fab7 	bl	528c <__aeabi_dmul>
    2d1e:	0006      	movs	r6, r0
    2d20:	e7cb      	b.n	2cba <__ieee754_pow+0x92>
    2d22:	2c00      	cmp	r4, #0
    2d24:	d004      	beq.n	2d30 <__ieee754_pow+0x108>
    2d26:	4a3a      	ldr	r2, [pc, #232]	; (2e10 <__ieee754_pow+0x1e8>)
    2d28:	00ab      	lsls	r3, r5, #2
    2d2a:	089b      	lsrs	r3, r3, #2
    2d2c:	4293      	cmp	r3, r2
    2d2e:	d1da      	bne.n	2ce6 <__ieee754_pow+0xbe>
    2d30:	4653      	mov	r3, sl
    2d32:	2b00      	cmp	r3, #0
    2d34:	da00      	bge.n	2d38 <__ieee754_pow+0x110>
    2d36:	e3ad      	b.n	3494 <__ieee754_pow+0x86c>
    2d38:	464b      	mov	r3, r9
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	db0d      	blt.n	2d5a <__ieee754_pow+0x132>
    2d3e:	0006      	movs	r6, r0
    2d40:	e7bb      	b.n	2cba <__ieee754_pow+0x92>
    2d42:	4653      	mov	r3, sl
    2d44:	0029      	movs	r1, r5
    2d46:	2b00      	cmp	r3, #0
    2d48:	dab7      	bge.n	2cba <__ieee754_pow+0x92>
    2d4a:	0032      	movs	r2, r6
    2d4c:	002b      	movs	r3, r5
    2d4e:	2000      	movs	r0, #0
    2d50:	492f      	ldr	r1, [pc, #188]	; (2e10 <__ieee754_pow+0x1e8>)
    2d52:	f001 fe77 	bl	4a44 <__aeabi_ddiv>
    2d56:	0006      	movs	r6, r0
    2d58:	e7af      	b.n	2cba <__ieee754_pow+0x92>
    2d5a:	4b2f      	ldr	r3, [pc, #188]	; (2e18 <__ieee754_pow+0x1f0>)
    2d5c:	469c      	mov	ip, r3
    2d5e:	465b      	mov	r3, fp
    2d60:	4464      	add	r4, ip
    2d62:	431c      	orrs	r4, r3
    2d64:	d101      	bne.n	2d6a <__ieee754_pow+0x142>
    2d66:	f000 fc2b 	bl	35c0 <__ieee754_pow+0x998>
    2d6a:	465b      	mov	r3, fp
    2d6c:	0006      	movs	r6, r0
    2d6e:	2b01      	cmp	r3, #1
    2d70:	d1a3      	bne.n	2cba <__ieee754_pow+0x92>
    2d72:	2380      	movs	r3, #128	; 0x80
    2d74:	061b      	lsls	r3, r3, #24
    2d76:	469c      	mov	ip, r3
    2d78:	4461      	add	r1, ip
    2d7a:	e79e      	b.n	2cba <__ieee754_pow+0x92>
    2d7c:	2a00      	cmp	r2, #0
    2d7e:	d100      	bne.n	2d82 <__ieee754_pow+0x15a>
    2d80:	e772      	b.n	2c68 <__ieee754_pow+0x40>
    2d82:	e794      	b.n	2cae <__ieee754_pow+0x86>
    2d84:	4b2b      	ldr	r3, [pc, #172]	; (2e34 <__ieee754_pow+0x20c>)
    2d86:	429f      	cmp	r7, r3
    2d88:	dc2b      	bgt.n	2de2 <__ieee754_pow+0x1ba>
    2d8a:	4b27      	ldr	r3, [pc, #156]	; (2e28 <__ieee754_pow+0x200>)
    2d8c:	429f      	cmp	r7, r3
    2d8e:	dc00      	bgt.n	2d92 <__ieee754_pow+0x16a>
    2d90:	e770      	b.n	2c74 <__ieee754_pow+0x4c>
    2d92:	4929      	ldr	r1, [pc, #164]	; (2e38 <__ieee754_pow+0x210>)
    2d94:	153b      	asrs	r3, r7, #20
    2d96:	468c      	mov	ip, r1
    2d98:	4463      	add	r3, ip
    2d9a:	2b14      	cmp	r3, #20
    2d9c:	dc01      	bgt.n	2da2 <__ieee754_pow+0x17a>
    2d9e:	f000 fbf2 	bl	3586 <__ieee754_pow+0x95e>
    2da2:	2134      	movs	r1, #52	; 0x34
    2da4:	1acb      	subs	r3, r1, r3
    2da6:	9900      	ldr	r1, [sp, #0]
    2da8:	40d9      	lsrs	r1, r3
    2daa:	0008      	movs	r0, r1
    2dac:	4098      	lsls	r0, r3
    2dae:	4282      	cmp	r2, r0
    2db0:	d000      	beq.n	2db4 <__ieee754_pow+0x18c>
    2db2:	e75f      	b.n	2c74 <__ieee754_pow+0x4c>
    2db4:	2301      	movs	r3, #1
    2db6:	4019      	ands	r1, r3
    2db8:	3301      	adds	r3, #1
    2dba:	1a5b      	subs	r3, r3, r1
    2dbc:	469b      	mov	fp, r3
    2dbe:	e759      	b.n	2c74 <__ieee754_pow+0x4c>
    2dc0:	4b15      	ldr	r3, [pc, #84]	; (2e18 <__ieee754_pow+0x1f0>)
    2dc2:	18e0      	adds	r0, r4, r3
    2dc4:	4306      	orrs	r6, r0
    2dc6:	d100      	bne.n	2dca <__ieee754_pow+0x1a2>
    2dc8:	e775      	b.n	2cb6 <__ieee754_pow+0x8e>
    2dca:	4b17      	ldr	r3, [pc, #92]	; (2e28 <__ieee754_pow+0x200>)
    2dcc:	429c      	cmp	r4, r3
    2dce:	dc00      	bgt.n	2dd2 <__ieee754_pow+0x1aa>
    2dd0:	e351      	b.n	3476 <__ieee754_pow+0x84e>
    2dd2:	4653      	mov	r3, sl
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	db16      	blt.n	2e06 <__ieee754_pow+0x1de>
    2dd8:	9b00      	ldr	r3, [sp, #0]
    2dda:	9c01      	ldr	r4, [sp, #4]
    2ddc:	001e      	movs	r6, r3
    2dde:	0021      	movs	r1, r4
    2de0:	e76b      	b.n	2cba <__ieee754_pow+0x92>
    2de2:	2302      	movs	r3, #2
    2de4:	469b      	mov	fp, r3
    2de6:	e745      	b.n	2c74 <__ieee754_pow+0x4c>
    2de8:	0032      	movs	r2, r6
    2dea:	002b      	movs	r3, r5
    2dec:	0030      	movs	r0, r6
    2dee:	0029      	movs	r1, r5
    2df0:	f002 fcc6 	bl	5780 <__aeabi_dsub>
    2df4:	0002      	movs	r2, r0
    2df6:	000b      	movs	r3, r1
    2df8:	f001 fe24 	bl	4a44 <__aeabi_ddiv>
    2dfc:	0006      	movs	r6, r0
    2dfe:	e75c      	b.n	2cba <__ieee754_pow+0x92>
    2e00:	4653      	mov	r3, sl
    2e02:	2b00      	cmp	r3, #0
    2e04:	db85      	blt.n	2d12 <__ieee754_pow+0xea>
    2e06:	2600      	movs	r6, #0
    2e08:	2100      	movs	r1, #0
    2e0a:	e756      	b.n	2cba <__ieee754_pow+0x92>
    2e0c:	7ff00000 	.word	0x7ff00000
    2e10:	3ff00000 	.word	0x3ff00000
    2e14:	3fe00000 	.word	0x3fe00000
    2e18:	c0100000 	.word	0xc0100000
    2e1c:	0000665c 	.word	0x0000665c
    2e20:	41e00000 	.word	0x41e00000
    2e24:	43f00000 	.word	0x43f00000
    2e28:	3fefffff 	.word	0x3fefffff
    2e2c:	8800759c 	.word	0x8800759c
    2e30:	7e37e43c 	.word	0x7e37e43c
    2e34:	433fffff 	.word	0x433fffff
    2e38:	fffffc01 	.word	0xfffffc01
    2e3c:	4be8      	ldr	r3, [pc, #928]	; (31e0 <__ieee754_pow+0x5b8>)
    2e3e:	2200      	movs	r2, #0
    2e40:	429c      	cmp	r4, r3
    2e42:	dc06      	bgt.n	2e52 <__ieee754_pow+0x22a>
    2e44:	2200      	movs	r2, #0
    2e46:	4be7      	ldr	r3, [pc, #924]	; (31e4 <__ieee754_pow+0x5bc>)
    2e48:	f002 fa20 	bl	528c <__aeabi_dmul>
    2e4c:	2235      	movs	r2, #53	; 0x35
    2e4e:	000c      	movs	r4, r1
    2e50:	4252      	negs	r2, r2
    2e52:	4de5      	ldr	r5, [pc, #916]	; (31e8 <__ieee754_pow+0x5c0>)
    2e54:	1523      	asrs	r3, r4, #20
    2e56:	46ac      	mov	ip, r5
    2e58:	4463      	add	r3, ip
    2e5a:	4699      	mov	r9, r3
    2e5c:	0324      	lsls	r4, r4, #12
    2e5e:	4de3      	ldr	r5, [pc, #908]	; (31ec <__ieee754_pow+0x5c4>)
    2e60:	4be3      	ldr	r3, [pc, #908]	; (31f0 <__ieee754_pow+0x5c8>)
    2e62:	0b24      	lsrs	r4, r4, #12
    2e64:	4491      	add	r9, r2
    2e66:	4325      	orrs	r5, r4
    2e68:	429c      	cmp	r4, r3
    2e6a:	dd09      	ble.n	2e80 <__ieee754_pow+0x258>
    2e6c:	4be1      	ldr	r3, [pc, #900]	; (31f4 <__ieee754_pow+0x5cc>)
    2e6e:	429c      	cmp	r4, r3
    2e70:	dc00      	bgt.n	2e74 <__ieee754_pow+0x24c>
    2e72:	e3a9      	b.n	35c8 <__ieee754_pow+0x9a0>
    2e74:	2301      	movs	r3, #1
    2e76:	469c      	mov	ip, r3
    2e78:	4bdf      	ldr	r3, [pc, #892]	; (31f8 <__ieee754_pow+0x5d0>)
    2e7a:	44e1      	add	r9, ip
    2e7c:	469c      	mov	ip, r3
    2e7e:	4465      	add	r5, ip
    2e80:	2300      	movs	r3, #0
    2e82:	2400      	movs	r4, #0
    2e84:	2200      	movs	r2, #0
    2e86:	9308      	str	r3, [sp, #32]
    2e88:	9409      	str	r4, [sp, #36]	; 0x24
    2e8a:	930c      	str	r3, [sp, #48]	; 0x30
    2e8c:	940d      	str	r4, [sp, #52]	; 0x34
    2e8e:	2400      	movs	r4, #0
    2e90:	4bd6      	ldr	r3, [pc, #856]	; (31ec <__ieee754_pow+0x5c4>)
    2e92:	9206      	str	r2, [sp, #24]
    2e94:	9307      	str	r3, [sp, #28]
    2e96:	9a06      	ldr	r2, [sp, #24]
    2e98:	9b07      	ldr	r3, [sp, #28]
    2e9a:	0029      	movs	r1, r5
    2e9c:	900a      	str	r0, [sp, #40]	; 0x28
    2e9e:	910b      	str	r1, [sp, #44]	; 0x2c
    2ea0:	f002 fc6e 	bl	5780 <__aeabi_dsub>
    2ea4:	9a06      	ldr	r2, [sp, #24]
    2ea6:	9b07      	ldr	r3, [sp, #28]
    2ea8:	0006      	movs	r6, r0
    2eaa:	000f      	movs	r7, r1
    2eac:	980a      	ldr	r0, [sp, #40]	; 0x28
    2eae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2eb0:	f001 fa9c 	bl	43ec <__aeabi_dadd>
    2eb4:	0002      	movs	r2, r0
    2eb6:	000b      	movs	r3, r1
    2eb8:	2000      	movs	r0, #0
    2eba:	49cc      	ldr	r1, [pc, #816]	; (31ec <__ieee754_pow+0x5c4>)
    2ebc:	f001 fdc2 	bl	4a44 <__aeabi_ddiv>
    2ec0:	000a      	movs	r2, r1
    2ec2:	0001      	movs	r1, r0
    2ec4:	0013      	movs	r3, r2
    2ec6:	910e      	str	r1, [sp, #56]	; 0x38
    2ec8:	920f      	str	r2, [sp, #60]	; 0x3c
    2eca:	0002      	movs	r2, r0
    2ecc:	0039      	movs	r1, r7
    2ece:	0030      	movs	r0, r6
    2ed0:	f002 f9dc 	bl	528c <__aeabi_dmul>
    2ed4:	000a      	movs	r2, r1
    2ed6:	0001      	movs	r1, r0
    2ed8:	2080      	movs	r0, #128	; 0x80
    2eda:	9104      	str	r1, [sp, #16]
    2edc:	9205      	str	r2, [sp, #20]
    2ede:	0013      	movs	r3, r2
    2ee0:	2200      	movs	r2, #0
    2ee2:	2180      	movs	r1, #128	; 0x80
    2ee4:	0300      	lsls	r0, r0, #12
    2ee6:	4684      	mov	ip, r0
    2ee8:	9202      	str	r2, [sp, #8]
    2eea:	9303      	str	r3, [sp, #12]
    2eec:	2200      	movs	r2, #0
    2eee:	0589      	lsls	r1, r1, #22
    2ef0:	106d      	asrs	r5, r5, #1
    2ef2:	430d      	orrs	r5, r1
    2ef4:	4465      	add	r5, ip
    2ef6:	192b      	adds	r3, r5, r4
    2ef8:	9802      	ldr	r0, [sp, #8]
    2efa:	9903      	ldr	r1, [sp, #12]
    2efc:	0014      	movs	r4, r2
    2efe:	001d      	movs	r5, r3
    2f00:	f002 f9c4 	bl	528c <__aeabi_dmul>
    2f04:	0002      	movs	r2, r0
    2f06:	000b      	movs	r3, r1
    2f08:	0030      	movs	r0, r6
    2f0a:	0039      	movs	r1, r7
    2f0c:	f002 fc38 	bl	5780 <__aeabi_dsub>
    2f10:	9a06      	ldr	r2, [sp, #24]
    2f12:	9b07      	ldr	r3, [sp, #28]
    2f14:	0006      	movs	r6, r0
    2f16:	000f      	movs	r7, r1
    2f18:	0020      	movs	r0, r4
    2f1a:	0029      	movs	r1, r5
    2f1c:	f002 fc30 	bl	5780 <__aeabi_dsub>
    2f20:	0002      	movs	r2, r0
    2f22:	000b      	movs	r3, r1
    2f24:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f28:	f002 fc2a 	bl	5780 <__aeabi_dsub>
    2f2c:	9a02      	ldr	r2, [sp, #8]
    2f2e:	9b03      	ldr	r3, [sp, #12]
    2f30:	f002 f9ac 	bl	528c <__aeabi_dmul>
    2f34:	0002      	movs	r2, r0
    2f36:	000b      	movs	r3, r1
    2f38:	0030      	movs	r0, r6
    2f3a:	0039      	movs	r1, r7
    2f3c:	f002 fc20 	bl	5780 <__aeabi_dsub>
    2f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2f44:	f002 f9a2 	bl	528c <__aeabi_dmul>
    2f48:	9d04      	ldr	r5, [sp, #16]
    2f4a:	9e05      	ldr	r6, [sp, #20]
    2f4c:	9006      	str	r0, [sp, #24]
    2f4e:	9107      	str	r1, [sp, #28]
    2f50:	002a      	movs	r2, r5
    2f52:	0033      	movs	r3, r6
    2f54:	0028      	movs	r0, r5
    2f56:	0031      	movs	r1, r6
    2f58:	f002 f998 	bl	528c <__aeabi_dmul>
    2f5c:	0006      	movs	r6, r0
    2f5e:	000f      	movs	r7, r1
    2f60:	4aa6      	ldr	r2, [pc, #664]	; (31fc <__ieee754_pow+0x5d4>)
    2f62:	4ba7      	ldr	r3, [pc, #668]	; (3200 <__ieee754_pow+0x5d8>)
    2f64:	f002 f992 	bl	528c <__aeabi_dmul>
    2f68:	4aa6      	ldr	r2, [pc, #664]	; (3204 <__ieee754_pow+0x5dc>)
    2f6a:	4ba7      	ldr	r3, [pc, #668]	; (3208 <__ieee754_pow+0x5e0>)
    2f6c:	f001 fa3e 	bl	43ec <__aeabi_dadd>
    2f70:	0032      	movs	r2, r6
    2f72:	003b      	movs	r3, r7
    2f74:	f002 f98a 	bl	528c <__aeabi_dmul>
    2f78:	4aa4      	ldr	r2, [pc, #656]	; (320c <__ieee754_pow+0x5e4>)
    2f7a:	4ba5      	ldr	r3, [pc, #660]	; (3210 <__ieee754_pow+0x5e8>)
    2f7c:	f001 fa36 	bl	43ec <__aeabi_dadd>
    2f80:	0032      	movs	r2, r6
    2f82:	003b      	movs	r3, r7
    2f84:	f002 f982 	bl	528c <__aeabi_dmul>
    2f88:	4aa2      	ldr	r2, [pc, #648]	; (3214 <__ieee754_pow+0x5ec>)
    2f8a:	4ba3      	ldr	r3, [pc, #652]	; (3218 <__ieee754_pow+0x5f0>)
    2f8c:	f001 fa2e 	bl	43ec <__aeabi_dadd>
    2f90:	0032      	movs	r2, r6
    2f92:	003b      	movs	r3, r7
    2f94:	f002 f97a 	bl	528c <__aeabi_dmul>
    2f98:	4aa0      	ldr	r2, [pc, #640]	; (321c <__ieee754_pow+0x5f4>)
    2f9a:	4ba1      	ldr	r3, [pc, #644]	; (3220 <__ieee754_pow+0x5f8>)
    2f9c:	f001 fa26 	bl	43ec <__aeabi_dadd>
    2fa0:	0032      	movs	r2, r6
    2fa2:	003b      	movs	r3, r7
    2fa4:	f002 f972 	bl	528c <__aeabi_dmul>
    2fa8:	4a9e      	ldr	r2, [pc, #632]	; (3224 <__ieee754_pow+0x5fc>)
    2faa:	4b9f      	ldr	r3, [pc, #636]	; (3228 <__ieee754_pow+0x600>)
    2fac:	f001 fa1e 	bl	43ec <__aeabi_dadd>
    2fb0:	0032      	movs	r2, r6
    2fb2:	0004      	movs	r4, r0
    2fb4:	000d      	movs	r5, r1
    2fb6:	003b      	movs	r3, r7
    2fb8:	0030      	movs	r0, r6
    2fba:	0039      	movs	r1, r7
    2fbc:	f002 f966 	bl	528c <__aeabi_dmul>
    2fc0:	0002      	movs	r2, r0
    2fc2:	000b      	movs	r3, r1
    2fc4:	0020      	movs	r0, r4
    2fc6:	0029      	movs	r1, r5
    2fc8:	f002 f960 	bl	528c <__aeabi_dmul>
    2fcc:	9e02      	ldr	r6, [sp, #8]
    2fce:	9f03      	ldr	r7, [sp, #12]
    2fd0:	0004      	movs	r4, r0
    2fd2:	000d      	movs	r5, r1
    2fd4:	9804      	ldr	r0, [sp, #16]
    2fd6:	9905      	ldr	r1, [sp, #20]
    2fd8:	0032      	movs	r2, r6
    2fda:	003b      	movs	r3, r7
    2fdc:	f001 fa06 	bl	43ec <__aeabi_dadd>
    2fe0:	9a06      	ldr	r2, [sp, #24]
    2fe2:	9b07      	ldr	r3, [sp, #28]
    2fe4:	f002 f952 	bl	528c <__aeabi_dmul>
    2fe8:	0022      	movs	r2, r4
    2fea:	002b      	movs	r3, r5
    2fec:	f001 f9fe 	bl	43ec <__aeabi_dadd>
    2ff0:	0032      	movs	r2, r6
    2ff2:	900a      	str	r0, [sp, #40]	; 0x28
    2ff4:	910b      	str	r1, [sp, #44]	; 0x2c
    2ff6:	003b      	movs	r3, r7
    2ff8:	0030      	movs	r0, r6
    2ffa:	0039      	movs	r1, r7
    2ffc:	9602      	str	r6, [sp, #8]
    2ffe:	9703      	str	r7, [sp, #12]
    3000:	f002 f944 	bl	528c <__aeabi_dmul>
    3004:	2200      	movs	r2, #0
    3006:	4b89      	ldr	r3, [pc, #548]	; (322c <__ieee754_pow+0x604>)
    3008:	0004      	movs	r4, r0
    300a:	000d      	movs	r5, r1
    300c:	f001 f9ee 	bl	43ec <__aeabi_dadd>
    3010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3014:	f001 f9ea 	bl	43ec <__aeabi_dadd>
    3018:	2600      	movs	r6, #0
    301a:	000f      	movs	r7, r1
    301c:	0032      	movs	r2, r6
    301e:	000b      	movs	r3, r1
    3020:	9802      	ldr	r0, [sp, #8]
    3022:	9903      	ldr	r1, [sp, #12]
    3024:	f002 f932 	bl	528c <__aeabi_dmul>
    3028:	2200      	movs	r2, #0
    302a:	9002      	str	r0, [sp, #8]
    302c:	9103      	str	r1, [sp, #12]
    302e:	4b7f      	ldr	r3, [pc, #508]	; (322c <__ieee754_pow+0x604>)
    3030:	0030      	movs	r0, r6
    3032:	0039      	movs	r1, r7
    3034:	f002 fba4 	bl	5780 <__aeabi_dsub>
    3038:	0022      	movs	r2, r4
    303a:	002b      	movs	r3, r5
    303c:	f002 fba0 	bl	5780 <__aeabi_dsub>
    3040:	0002      	movs	r2, r0
    3042:	000b      	movs	r3, r1
    3044:	980a      	ldr	r0, [sp, #40]	; 0x28
    3046:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3048:	f002 fb9a 	bl	5780 <__aeabi_dsub>
    304c:	9a04      	ldr	r2, [sp, #16]
    304e:	9b05      	ldr	r3, [sp, #20]
    3050:	f002 f91c 	bl	528c <__aeabi_dmul>
    3054:	0032      	movs	r2, r6
    3056:	0004      	movs	r4, r0
    3058:	000d      	movs	r5, r1
    305a:	9806      	ldr	r0, [sp, #24]
    305c:	9907      	ldr	r1, [sp, #28]
    305e:	003b      	movs	r3, r7
    3060:	f002 f914 	bl	528c <__aeabi_dmul>
    3064:	0002      	movs	r2, r0
    3066:	000b      	movs	r3, r1
    3068:	0020      	movs	r0, r4
    306a:	0029      	movs	r1, r5
    306c:	f001 f9be 	bl	43ec <__aeabi_dadd>
    3070:	0004      	movs	r4, r0
    3072:	000d      	movs	r5, r1
    3074:	0002      	movs	r2, r0
    3076:	000b      	movs	r3, r1
    3078:	9802      	ldr	r0, [sp, #8]
    307a:	9903      	ldr	r1, [sp, #12]
    307c:	f001 f9b6 	bl	43ec <__aeabi_dadd>
    3080:	2600      	movs	r6, #0
    3082:	22e0      	movs	r2, #224	; 0xe0
    3084:	4b6a      	ldr	r3, [pc, #424]	; (3230 <__ieee754_pow+0x608>)
    3086:	0612      	lsls	r2, r2, #24
    3088:	0030      	movs	r0, r6
    308a:	000f      	movs	r7, r1
    308c:	f002 f8fe 	bl	528c <__aeabi_dmul>
    3090:	9a02      	ldr	r2, [sp, #8]
    3092:	9b03      	ldr	r3, [sp, #12]
    3094:	9004      	str	r0, [sp, #16]
    3096:	9105      	str	r1, [sp, #20]
    3098:	0030      	movs	r0, r6
    309a:	0039      	movs	r1, r7
    309c:	f002 fb70 	bl	5780 <__aeabi_dsub>
    30a0:	0002      	movs	r2, r0
    30a2:	000b      	movs	r3, r1
    30a4:	0020      	movs	r0, r4
    30a6:	0029      	movs	r1, r5
    30a8:	f002 fb6a 	bl	5780 <__aeabi_dsub>
    30ac:	4a61      	ldr	r2, [pc, #388]	; (3234 <__ieee754_pow+0x60c>)
    30ae:	4b60      	ldr	r3, [pc, #384]	; (3230 <__ieee754_pow+0x608>)
    30b0:	f002 f8ec 	bl	528c <__aeabi_dmul>
    30b4:	4a60      	ldr	r2, [pc, #384]	; (3238 <__ieee754_pow+0x610>)
    30b6:	0004      	movs	r4, r0
    30b8:	000d      	movs	r5, r1
    30ba:	4b60      	ldr	r3, [pc, #384]	; (323c <__ieee754_pow+0x614>)
    30bc:	0030      	movs	r0, r6
    30be:	0039      	movs	r1, r7
    30c0:	f002 f8e4 	bl	528c <__aeabi_dmul>
    30c4:	0002      	movs	r2, r0
    30c6:	000b      	movs	r3, r1
    30c8:	0020      	movs	r0, r4
    30ca:	0029      	movs	r1, r5
    30cc:	f001 f98e 	bl	43ec <__aeabi_dadd>
    30d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    30d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    30d4:	f001 f98a 	bl	43ec <__aeabi_dadd>
    30d8:	0006      	movs	r6, r0
    30da:	4648      	mov	r0, r9
    30dc:	000f      	movs	r7, r1
    30de:	f002 fef9 	bl	5ed4 <__aeabi_i2d>
    30e2:	0004      	movs	r4, r0
    30e4:	000d      	movs	r5, r1
    30e6:	9804      	ldr	r0, [sp, #16]
    30e8:	9905      	ldr	r1, [sp, #20]
    30ea:	0032      	movs	r2, r6
    30ec:	003b      	movs	r3, r7
    30ee:	f001 f97d 	bl	43ec <__aeabi_dadd>
    30f2:	9a08      	ldr	r2, [sp, #32]
    30f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30f6:	f001 f979 	bl	43ec <__aeabi_dadd>
    30fa:	0022      	movs	r2, r4
    30fc:	002b      	movs	r3, r5
    30fe:	f001 f975 	bl	43ec <__aeabi_dadd>
    3102:	2000      	movs	r0, #0
    3104:	0022      	movs	r2, r4
    3106:	002b      	movs	r3, r5
    3108:	9002      	str	r0, [sp, #8]
    310a:	9103      	str	r1, [sp, #12]
    310c:	f002 fb38 	bl	5780 <__aeabi_dsub>
    3110:	9a08      	ldr	r2, [sp, #32]
    3112:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3114:	f002 fb34 	bl	5780 <__aeabi_dsub>
    3118:	9a04      	ldr	r2, [sp, #16]
    311a:	9b05      	ldr	r3, [sp, #20]
    311c:	f002 fb30 	bl	5780 <__aeabi_dsub>
    3120:	0002      	movs	r2, r0
    3122:	000b      	movs	r3, r1
    3124:	0030      	movs	r0, r6
    3126:	0039      	movs	r1, r7
    3128:	f002 fb2a 	bl	5780 <__aeabi_dsub>
    312c:	9004      	str	r0, [sp, #16]
    312e:	9105      	str	r1, [sp, #20]
    3130:	465b      	mov	r3, fp
    3132:	4642      	mov	r2, r8
    3134:	3b01      	subs	r3, #1
    3136:	4313      	orrs	r3, r2
    3138:	d100      	bne.n	313c <__ieee754_pow+0x514>
    313a:	e197      	b.n	346c <__ieee754_pow+0x844>
    313c:	2300      	movs	r3, #0
    313e:	4c2b      	ldr	r4, [pc, #172]	; (31ec <__ieee754_pow+0x5c4>)
    3140:	9306      	str	r3, [sp, #24]
    3142:	9407      	str	r4, [sp, #28]
    3144:	9800      	ldr	r0, [sp, #0]
    3146:	9901      	ldr	r1, [sp, #4]
    3148:	2600      	movs	r6, #0
    314a:	000b      	movs	r3, r1
    314c:	0032      	movs	r2, r6
    314e:	000f      	movs	r7, r1
    3150:	f002 fb16 	bl	5780 <__aeabi_dsub>
    3154:	9a02      	ldr	r2, [sp, #8]
    3156:	9b03      	ldr	r3, [sp, #12]
    3158:	f002 f898 	bl	528c <__aeabi_dmul>
    315c:	9a00      	ldr	r2, [sp, #0]
    315e:	9b01      	ldr	r3, [sp, #4]
    3160:	0004      	movs	r4, r0
    3162:	000d      	movs	r5, r1
    3164:	9804      	ldr	r0, [sp, #16]
    3166:	9905      	ldr	r1, [sp, #20]
    3168:	f002 f890 	bl	528c <__aeabi_dmul>
    316c:	0002      	movs	r2, r0
    316e:	000b      	movs	r3, r1
    3170:	0020      	movs	r0, r4
    3172:	0029      	movs	r1, r5
    3174:	f001 f93a 	bl	43ec <__aeabi_dadd>
    3178:	0004      	movs	r4, r0
    317a:	000d      	movs	r5, r1
    317c:	9802      	ldr	r0, [sp, #8]
    317e:	9903      	ldr	r1, [sp, #12]
    3180:	003b      	movs	r3, r7
    3182:	0032      	movs	r2, r6
    3184:	9404      	str	r4, [sp, #16]
    3186:	9505      	str	r5, [sp, #20]
    3188:	f002 f880 	bl	528c <__aeabi_dmul>
    318c:	9000      	str	r0, [sp, #0]
    318e:	9101      	str	r1, [sp, #4]
    3190:	000b      	movs	r3, r1
    3192:	0002      	movs	r2, r0
    3194:	0029      	movs	r1, r5
    3196:	0020      	movs	r0, r4
    3198:	f001 f928 	bl	43ec <__aeabi_dadd>
    319c:	4b28      	ldr	r3, [pc, #160]	; (3240 <__ieee754_pow+0x618>)
    319e:	4681      	mov	r9, r0
    31a0:	1e0f      	subs	r7, r1, #0
    31a2:	468a      	mov	sl, r1
    31a4:	429f      	cmp	r7, r3
    31a6:	dc00      	bgt.n	31aa <__ieee754_pow+0x582>
    31a8:	e13c      	b.n	3424 <__ieee754_pow+0x7fc>
    31aa:	4b26      	ldr	r3, [pc, #152]	; (3244 <__ieee754_pow+0x61c>)
    31ac:	18cb      	adds	r3, r1, r3
    31ae:	4303      	orrs	r3, r0
    31b0:	d000      	beq.n	31b4 <__ieee754_pow+0x58c>
    31b2:	e1db      	b.n	356c <__ieee754_pow+0x944>
    31b4:	9804      	ldr	r0, [sp, #16]
    31b6:	9905      	ldr	r1, [sp, #20]
    31b8:	4a23      	ldr	r2, [pc, #140]	; (3248 <__ieee754_pow+0x620>)
    31ba:	4b24      	ldr	r3, [pc, #144]	; (324c <__ieee754_pow+0x624>)
    31bc:	f001 f916 	bl	43ec <__aeabi_dadd>
    31c0:	9a00      	ldr	r2, [sp, #0]
    31c2:	9b01      	ldr	r3, [sp, #4]
    31c4:	0004      	movs	r4, r0
    31c6:	000d      	movs	r5, r1
    31c8:	4648      	mov	r0, r9
    31ca:	0039      	movs	r1, r7
    31cc:	f002 fad8 	bl	5780 <__aeabi_dsub>
    31d0:	0002      	movs	r2, r0
    31d2:	000b      	movs	r3, r1
    31d4:	0020      	movs	r0, r4
    31d6:	0029      	movs	r1, r5
    31d8:	f000 fca4 	bl	3b24 <__aeabi_dcmpgt>
    31dc:	003e      	movs	r6, r7
    31de:	e037      	b.n	3250 <__ieee754_pow+0x628>
    31e0:	000fffff 	.word	0x000fffff
    31e4:	43400000 	.word	0x43400000
    31e8:	fffffc01 	.word	0xfffffc01
    31ec:	3ff00000 	.word	0x3ff00000
    31f0:	0003988e 	.word	0x0003988e
    31f4:	000bb679 	.word	0x000bb679
    31f8:	fff00000 	.word	0xfff00000
    31fc:	4a454eef 	.word	0x4a454eef
    3200:	3fca7e28 	.word	0x3fca7e28
    3204:	93c9db65 	.word	0x93c9db65
    3208:	3fcd864a 	.word	0x3fcd864a
    320c:	a91d4101 	.word	0xa91d4101
    3210:	3fd17460 	.word	0x3fd17460
    3214:	518f264d 	.word	0x518f264d
    3218:	3fd55555 	.word	0x3fd55555
    321c:	db6fabff 	.word	0xdb6fabff
    3220:	3fdb6db6 	.word	0x3fdb6db6
    3224:	33333303 	.word	0x33333303
    3228:	3fe33333 	.word	0x3fe33333
    322c:	40080000 	.word	0x40080000
    3230:	3feec709 	.word	0x3feec709
    3234:	dc3a03fd 	.word	0xdc3a03fd
    3238:	145b01f5 	.word	0x145b01f5
    323c:	be3e2fe0 	.word	0xbe3e2fe0
    3240:	408fffff 	.word	0x408fffff
    3244:	bf700000 	.word	0xbf700000
    3248:	652b82fe 	.word	0x652b82fe
    324c:	3c971547 	.word	0x3c971547
    3250:	2800      	cmp	r0, #0
    3252:	d000      	beq.n	3256 <__ieee754_pow+0x62e>
    3254:	e18a      	b.n	356c <__ieee754_pow+0x944>
    3256:	2280      	movs	r2, #128	; 0x80
    3258:	4be7      	ldr	r3, [pc, #924]	; (35f8 <__ieee754_pow+0x9d0>)
    325a:	0352      	lsls	r2, r2, #13
    325c:	469c      	mov	ip, r3
    325e:	0013      	movs	r3, r2
    3260:	1536      	asrs	r6, r6, #20
    3262:	4466      	add	r6, ip
    3264:	4133      	asrs	r3, r6
    3266:	49e5      	ldr	r1, [pc, #916]	; (35fc <__ieee754_pow+0x9d4>)
    3268:	19db      	adds	r3, r3, r7
    326a:	005e      	lsls	r6, r3, #1
    326c:	001c      	movs	r4, r3
    326e:	031b      	lsls	r3, r3, #12
    3270:	468c      	mov	ip, r1
    3272:	0b1b      	lsrs	r3, r3, #12
    3274:	4313      	orrs	r3, r2
    3276:	2214      	movs	r2, #20
    3278:	0d76      	lsrs	r6, r6, #21
    327a:	4fe1      	ldr	r7, [pc, #900]	; (3600 <__ieee754_pow+0x9d8>)
    327c:	4466      	add	r6, ip
    327e:	4137      	asrs	r7, r6
    3280:	1b96      	subs	r6, r2, r6
    3282:	4133      	asrs	r3, r6
    3284:	4698      	mov	r8, r3
    3286:	4653      	mov	r3, sl
    3288:	43bc      	bics	r4, r7
    328a:	2000      	movs	r0, #0
    328c:	0021      	movs	r1, r4
    328e:	2b00      	cmp	r3, #0
    3290:	da00      	bge.n	3294 <__ieee754_pow+0x66c>
    3292:	e1a9      	b.n	35e8 <__ieee754_pow+0x9c0>
    3294:	0002      	movs	r2, r0
    3296:	000b      	movs	r3, r1
    3298:	9800      	ldr	r0, [sp, #0]
    329a:	9901      	ldr	r1, [sp, #4]
    329c:	f002 fa70 	bl	5780 <__aeabi_dsub>
    32a0:	000b      	movs	r3, r1
    32a2:	9000      	str	r0, [sp, #0]
    32a4:	9101      	str	r1, [sp, #4]
    32a6:	0002      	movs	r2, r0
    32a8:	9804      	ldr	r0, [sp, #16]
    32aa:	9905      	ldr	r1, [sp, #20]
    32ac:	f001 f89e 	bl	43ec <__aeabi_dadd>
    32b0:	4643      	mov	r3, r8
    32b2:	051b      	lsls	r3, r3, #20
    32b4:	4699      	mov	r9, r3
    32b6:	2000      	movs	r0, #0
    32b8:	2200      	movs	r2, #0
    32ba:	4bd2      	ldr	r3, [pc, #840]	; (3604 <__ieee754_pow+0x9dc>)
    32bc:	0006      	movs	r6, r0
    32be:	000f      	movs	r7, r1
    32c0:	f001 ffe4 	bl	528c <__aeabi_dmul>
    32c4:	9a00      	ldr	r2, [sp, #0]
    32c6:	9b01      	ldr	r3, [sp, #4]
    32c8:	9002      	str	r0, [sp, #8]
    32ca:	9103      	str	r1, [sp, #12]
    32cc:	0030      	movs	r0, r6
    32ce:	0039      	movs	r1, r7
    32d0:	f002 fa56 	bl	5780 <__aeabi_dsub>
    32d4:	0002      	movs	r2, r0
    32d6:	000b      	movs	r3, r1
    32d8:	9804      	ldr	r0, [sp, #16]
    32da:	9905      	ldr	r1, [sp, #20]
    32dc:	f002 fa50 	bl	5780 <__aeabi_dsub>
    32e0:	4ac9      	ldr	r2, [pc, #804]	; (3608 <__ieee754_pow+0x9e0>)
    32e2:	4bca      	ldr	r3, [pc, #808]	; (360c <__ieee754_pow+0x9e4>)
    32e4:	f001 ffd2 	bl	528c <__aeabi_dmul>
    32e8:	4ac9      	ldr	r2, [pc, #804]	; (3610 <__ieee754_pow+0x9e8>)
    32ea:	0004      	movs	r4, r0
    32ec:	000d      	movs	r5, r1
    32ee:	4bc9      	ldr	r3, [pc, #804]	; (3614 <__ieee754_pow+0x9ec>)
    32f0:	0030      	movs	r0, r6
    32f2:	0039      	movs	r1, r7
    32f4:	f001 ffca 	bl	528c <__aeabi_dmul>
    32f8:	0002      	movs	r2, r0
    32fa:	000b      	movs	r3, r1
    32fc:	0020      	movs	r0, r4
    32fe:	0029      	movs	r1, r5
    3300:	f001 f874 	bl	43ec <__aeabi_dadd>
    3304:	0004      	movs	r4, r0
    3306:	000d      	movs	r5, r1
    3308:	0002      	movs	r2, r0
    330a:	000b      	movs	r3, r1
    330c:	9802      	ldr	r0, [sp, #8]
    330e:	9903      	ldr	r1, [sp, #12]
    3310:	f001 f86c 	bl	43ec <__aeabi_dadd>
    3314:	9a02      	ldr	r2, [sp, #8]
    3316:	9b03      	ldr	r3, [sp, #12]
    3318:	0006      	movs	r6, r0
    331a:	000f      	movs	r7, r1
    331c:	f002 fa30 	bl	5780 <__aeabi_dsub>
    3320:	0002      	movs	r2, r0
    3322:	000b      	movs	r3, r1
    3324:	0020      	movs	r0, r4
    3326:	0029      	movs	r1, r5
    3328:	f002 fa2a 	bl	5780 <__aeabi_dsub>
    332c:	0032      	movs	r2, r6
    332e:	9000      	str	r0, [sp, #0]
    3330:	9101      	str	r1, [sp, #4]
    3332:	003b      	movs	r3, r7
    3334:	0030      	movs	r0, r6
    3336:	0039      	movs	r1, r7
    3338:	f001 ffa8 	bl	528c <__aeabi_dmul>
    333c:	0004      	movs	r4, r0
    333e:	000d      	movs	r5, r1
    3340:	4ab5      	ldr	r2, [pc, #724]	; (3618 <__ieee754_pow+0x9f0>)
    3342:	4bb6      	ldr	r3, [pc, #728]	; (361c <__ieee754_pow+0x9f4>)
    3344:	f001 ffa2 	bl	528c <__aeabi_dmul>
    3348:	4ab5      	ldr	r2, [pc, #724]	; (3620 <__ieee754_pow+0x9f8>)
    334a:	4bb6      	ldr	r3, [pc, #728]	; (3624 <__ieee754_pow+0x9fc>)
    334c:	f002 fa18 	bl	5780 <__aeabi_dsub>
    3350:	0022      	movs	r2, r4
    3352:	002b      	movs	r3, r5
    3354:	f001 ff9a 	bl	528c <__aeabi_dmul>
    3358:	4ab3      	ldr	r2, [pc, #716]	; (3628 <__ieee754_pow+0xa00>)
    335a:	4bb4      	ldr	r3, [pc, #720]	; (362c <__ieee754_pow+0xa04>)
    335c:	f001 f846 	bl	43ec <__aeabi_dadd>
    3360:	0022      	movs	r2, r4
    3362:	002b      	movs	r3, r5
    3364:	f001 ff92 	bl	528c <__aeabi_dmul>
    3368:	4ab1      	ldr	r2, [pc, #708]	; (3630 <__ieee754_pow+0xa08>)
    336a:	4bb2      	ldr	r3, [pc, #712]	; (3634 <__ieee754_pow+0xa0c>)
    336c:	f002 fa08 	bl	5780 <__aeabi_dsub>
    3370:	0022      	movs	r2, r4
    3372:	002b      	movs	r3, r5
    3374:	f001 ff8a 	bl	528c <__aeabi_dmul>
    3378:	4aaf      	ldr	r2, [pc, #700]	; (3638 <__ieee754_pow+0xa10>)
    337a:	4bb0      	ldr	r3, [pc, #704]	; (363c <__ieee754_pow+0xa14>)
    337c:	f001 f836 	bl	43ec <__aeabi_dadd>
    3380:	0022      	movs	r2, r4
    3382:	002b      	movs	r3, r5
    3384:	f001 ff82 	bl	528c <__aeabi_dmul>
    3388:	0002      	movs	r2, r0
    338a:	000b      	movs	r3, r1
    338c:	0030      	movs	r0, r6
    338e:	0039      	movs	r1, r7
    3390:	f002 f9f6 	bl	5780 <__aeabi_dsub>
    3394:	0004      	movs	r4, r0
    3396:	000d      	movs	r5, r1
    3398:	0002      	movs	r2, r0
    339a:	000b      	movs	r3, r1
    339c:	0030      	movs	r0, r6
    339e:	0039      	movs	r1, r7
    33a0:	f001 ff74 	bl	528c <__aeabi_dmul>
    33a4:	2380      	movs	r3, #128	; 0x80
    33a6:	9002      	str	r0, [sp, #8]
    33a8:	9103      	str	r1, [sp, #12]
    33aa:	2200      	movs	r2, #0
    33ac:	05db      	lsls	r3, r3, #23
    33ae:	0020      	movs	r0, r4
    33b0:	0029      	movs	r1, r5
    33b2:	f002 f9e5 	bl	5780 <__aeabi_dsub>
    33b6:	0002      	movs	r2, r0
    33b8:	000b      	movs	r3, r1
    33ba:	9802      	ldr	r0, [sp, #8]
    33bc:	9903      	ldr	r1, [sp, #12]
    33be:	f001 fb41 	bl	4a44 <__aeabi_ddiv>
    33c2:	9a00      	ldr	r2, [sp, #0]
    33c4:	9b01      	ldr	r3, [sp, #4]
    33c6:	0004      	movs	r4, r0
    33c8:	000d      	movs	r5, r1
    33ca:	0030      	movs	r0, r6
    33cc:	0039      	movs	r1, r7
    33ce:	f001 ff5d 	bl	528c <__aeabi_dmul>
    33d2:	9a00      	ldr	r2, [sp, #0]
    33d4:	9b01      	ldr	r3, [sp, #4]
    33d6:	f001 f809 	bl	43ec <__aeabi_dadd>
    33da:	0002      	movs	r2, r0
    33dc:	000b      	movs	r3, r1
    33de:	0020      	movs	r0, r4
    33e0:	0029      	movs	r1, r5
    33e2:	f002 f9cd 	bl	5780 <__aeabi_dsub>
    33e6:	0032      	movs	r2, r6
    33e8:	003b      	movs	r3, r7
    33ea:	f002 f9c9 	bl	5780 <__aeabi_dsub>
    33ee:	0002      	movs	r2, r0
    33f0:	000b      	movs	r3, r1
    33f2:	2000      	movs	r0, #0
    33f4:	4992      	ldr	r1, [pc, #584]	; (3640 <__ieee754_pow+0xa18>)
    33f6:	f002 f9c3 	bl	5780 <__aeabi_dsub>
    33fa:	464b      	mov	r3, r9
    33fc:	185b      	adds	r3, r3, r1
    33fe:	151a      	asrs	r2, r3, #20
    3400:	2a00      	cmp	r2, #0
    3402:	dc00      	bgt.n	3406 <__ieee754_pow+0x7de>
    3404:	e0f4      	b.n	35f0 <__ieee754_pow+0x9c8>
    3406:	0019      	movs	r1, r3
    3408:	9a06      	ldr	r2, [sp, #24]
    340a:	9b07      	ldr	r3, [sp, #28]
    340c:	f001 ff3e 	bl	528c <__aeabi_dmul>
    3410:	0006      	movs	r6, r0
    3412:	e452      	b.n	2cba <__ieee754_pow+0x92>
    3414:	0032      	movs	r2, r6
    3416:	0030      	movs	r0, r6
    3418:	002b      	movs	r3, r5
    341a:	0029      	movs	r1, r5
    341c:	f001 ff36 	bl	528c <__aeabi_dmul>
    3420:	0006      	movs	r6, r0
    3422:	e44a      	b.n	2cba <__ieee754_pow+0x92>
    3424:	4b87      	ldr	r3, [pc, #540]	; (3644 <__ieee754_pow+0xa1c>)
    3426:	004e      	lsls	r6, r1, #1
    3428:	0876      	lsrs	r6, r6, #1
    342a:	429e      	cmp	r6, r3
    342c:	dc00      	bgt.n	3430 <__ieee754_pow+0x808>
    342e:	e0bf      	b.n	35b0 <__ieee754_pow+0x988>
    3430:	4b85      	ldr	r3, [pc, #532]	; (3648 <__ieee754_pow+0xa20>)
    3432:	18cb      	adds	r3, r1, r3
    3434:	4303      	orrs	r3, r0
    3436:	d10c      	bne.n	3452 <__ieee754_pow+0x82a>
    3438:	9a00      	ldr	r2, [sp, #0]
    343a:	9b01      	ldr	r3, [sp, #4]
    343c:	f002 f9a0 	bl	5780 <__aeabi_dsub>
    3440:	0002      	movs	r2, r0
    3442:	000b      	movs	r3, r1
    3444:	9804      	ldr	r0, [sp, #16]
    3446:	9905      	ldr	r1, [sp, #20]
    3448:	f000 fb62 	bl	3b10 <__aeabi_dcmple>
    344c:	2800      	cmp	r0, #0
    344e:	d100      	bne.n	3452 <__ieee754_pow+0x82a>
    3450:	e701      	b.n	3256 <__ieee754_pow+0x62e>
    3452:	9806      	ldr	r0, [sp, #24]
    3454:	9907      	ldr	r1, [sp, #28]
    3456:	4a7d      	ldr	r2, [pc, #500]	; (364c <__ieee754_pow+0xa24>)
    3458:	4b7d      	ldr	r3, [pc, #500]	; (3650 <__ieee754_pow+0xa28>)
    345a:	f001 ff17 	bl	528c <__aeabi_dmul>
    345e:	4a7b      	ldr	r2, [pc, #492]	; (364c <__ieee754_pow+0xa24>)
    3460:	4b7b      	ldr	r3, [pc, #492]	; (3650 <__ieee754_pow+0xa28>)
    3462:	f001 ff13 	bl	528c <__aeabi_dmul>
    3466:	0006      	movs	r6, r0
    3468:	f7ff fc27 	bl	2cba <__ieee754_pow+0x92>
    346c:	2300      	movs	r3, #0
    346e:	4c79      	ldr	r4, [pc, #484]	; (3654 <__ieee754_pow+0xa2c>)
    3470:	9306      	str	r3, [sp, #24]
    3472:	9407      	str	r4, [sp, #28]
    3474:	e666      	b.n	3144 <__ieee754_pow+0x51c>
    3476:	4653      	mov	r3, sl
    3478:	2b00      	cmp	r3, #0
    347a:	db00      	blt.n	347e <__ieee754_pow+0x856>
    347c:	e4c3      	b.n	2e06 <__ieee754_pow+0x1de>
    347e:	9b00      	ldr	r3, [sp, #0]
    3480:	9c01      	ldr	r4, [sp, #4]
    3482:	2280      	movs	r2, #128	; 0x80
    3484:	0612      	lsls	r2, r2, #24
    3486:	001e      	movs	r6, r3
    3488:	4694      	mov	ip, r2
    348a:	0023      	movs	r3, r4
    348c:	4463      	add	r3, ip
    348e:	0019      	movs	r1, r3
    3490:	f7ff fc13 	bl	2cba <__ieee754_pow+0x92>
    3494:	0002      	movs	r2, r0
    3496:	000b      	movs	r3, r1
    3498:	2000      	movs	r0, #0
    349a:	4969      	ldr	r1, [pc, #420]	; (3640 <__ieee754_pow+0xa18>)
    349c:	f001 fad2 	bl	4a44 <__aeabi_ddiv>
    34a0:	e44a      	b.n	2d38 <__ieee754_pow+0x110>
    34a2:	4b6d      	ldr	r3, [pc, #436]	; (3658 <__ieee754_pow+0xa30>)
    34a4:	429c      	cmp	r4, r3
    34a6:	dc00      	bgt.n	34aa <__ieee754_pow+0x882>
    34a8:	e4aa      	b.n	2e00 <__ieee754_pow+0x1d8>
    34aa:	4b65      	ldr	r3, [pc, #404]	; (3640 <__ieee754_pow+0xa18>)
    34ac:	429c      	cmp	r4, r3
    34ae:	dd01      	ble.n	34b4 <__ieee754_pow+0x88c>
    34b0:	f7ff fc2c 	bl	2d0c <__ieee754_pow+0xe4>
    34b4:	2200      	movs	r2, #0
    34b6:	4b62      	ldr	r3, [pc, #392]	; (3640 <__ieee754_pow+0xa18>)
    34b8:	f002 f962 	bl	5780 <__aeabi_dsub>
    34bc:	22c0      	movs	r2, #192	; 0xc0
    34be:	4b67      	ldr	r3, [pc, #412]	; (365c <__ieee754_pow+0xa34>)
    34c0:	05d2      	lsls	r2, r2, #23
    34c2:	0004      	movs	r4, r0
    34c4:	000d      	movs	r5, r1
    34c6:	f001 fee1 	bl	528c <__aeabi_dmul>
    34ca:	4a65      	ldr	r2, [pc, #404]	; (3660 <__ieee754_pow+0xa38>)
    34cc:	0006      	movs	r6, r0
    34ce:	000f      	movs	r7, r1
    34d0:	4b64      	ldr	r3, [pc, #400]	; (3664 <__ieee754_pow+0xa3c>)
    34d2:	0020      	movs	r0, r4
    34d4:	0029      	movs	r1, r5
    34d6:	f001 fed9 	bl	528c <__aeabi_dmul>
    34da:	2200      	movs	r2, #0
    34dc:	9002      	str	r0, [sp, #8]
    34de:	9103      	str	r1, [sp, #12]
    34e0:	4b61      	ldr	r3, [pc, #388]	; (3668 <__ieee754_pow+0xa40>)
    34e2:	0020      	movs	r0, r4
    34e4:	0029      	movs	r1, r5
    34e6:	f001 fed1 	bl	528c <__aeabi_dmul>
    34ea:	0002      	movs	r2, r0
    34ec:	000b      	movs	r3, r1
    34ee:	485f      	ldr	r0, [pc, #380]	; (366c <__ieee754_pow+0xa44>)
    34f0:	495f      	ldr	r1, [pc, #380]	; (3670 <__ieee754_pow+0xa48>)
    34f2:	f002 f945 	bl	5780 <__aeabi_dsub>
    34f6:	0022      	movs	r2, r4
    34f8:	002b      	movs	r3, r5
    34fa:	f001 fec7 	bl	528c <__aeabi_dmul>
    34fe:	0002      	movs	r2, r0
    3500:	000b      	movs	r3, r1
    3502:	2000      	movs	r0, #0
    3504:	495b      	ldr	r1, [pc, #364]	; (3674 <__ieee754_pow+0xa4c>)
    3506:	f002 f93b 	bl	5780 <__aeabi_dsub>
    350a:	0022      	movs	r2, r4
    350c:	9004      	str	r0, [sp, #16]
    350e:	9105      	str	r1, [sp, #20]
    3510:	002b      	movs	r3, r5
    3512:	0020      	movs	r0, r4
    3514:	0029      	movs	r1, r5
    3516:	f001 feb9 	bl	528c <__aeabi_dmul>
    351a:	0002      	movs	r2, r0
    351c:	000b      	movs	r3, r1
    351e:	9804      	ldr	r0, [sp, #16]
    3520:	9905      	ldr	r1, [sp, #20]
    3522:	f001 feb3 	bl	528c <__aeabi_dmul>
    3526:	4a54      	ldr	r2, [pc, #336]	; (3678 <__ieee754_pow+0xa50>)
    3528:	4b4c      	ldr	r3, [pc, #304]	; (365c <__ieee754_pow+0xa34>)
    352a:	f001 feaf 	bl	528c <__aeabi_dmul>
    352e:	0002      	movs	r2, r0
    3530:	000b      	movs	r3, r1
    3532:	9802      	ldr	r0, [sp, #8]
    3534:	9903      	ldr	r1, [sp, #12]
    3536:	f002 f923 	bl	5780 <__aeabi_dsub>
    353a:	0002      	movs	r2, r0
    353c:	000b      	movs	r3, r1
    353e:	0004      	movs	r4, r0
    3540:	000d      	movs	r5, r1
    3542:	0030      	movs	r0, r6
    3544:	0039      	movs	r1, r7
    3546:	f000 ff51 	bl	43ec <__aeabi_dadd>
    354a:	2200      	movs	r2, #0
    354c:	0010      	movs	r0, r2
    354e:	003b      	movs	r3, r7
    3550:	0032      	movs	r2, r6
    3552:	9002      	str	r0, [sp, #8]
    3554:	9103      	str	r1, [sp, #12]
    3556:	f002 f913 	bl	5780 <__aeabi_dsub>
    355a:	0002      	movs	r2, r0
    355c:	000b      	movs	r3, r1
    355e:	0020      	movs	r0, r4
    3560:	0029      	movs	r1, r5
    3562:	f002 f90d 	bl	5780 <__aeabi_dsub>
    3566:	9004      	str	r0, [sp, #16]
    3568:	9105      	str	r1, [sp, #20]
    356a:	e5e1      	b.n	3130 <__ieee754_pow+0x508>
    356c:	4a43      	ldr	r2, [pc, #268]	; (367c <__ieee754_pow+0xa54>)
    356e:	4b44      	ldr	r3, [pc, #272]	; (3680 <__ieee754_pow+0xa58>)
    3570:	9806      	ldr	r0, [sp, #24]
    3572:	9907      	ldr	r1, [sp, #28]
    3574:	f001 fe8a 	bl	528c <__aeabi_dmul>
    3578:	4a40      	ldr	r2, [pc, #256]	; (367c <__ieee754_pow+0xa54>)
    357a:	4b41      	ldr	r3, [pc, #260]	; (3680 <__ieee754_pow+0xa58>)
    357c:	f001 fe86 	bl	528c <__aeabi_dmul>
    3580:	0006      	movs	r6, r0
    3582:	f7ff fb9a 	bl	2cba <__ieee754_pow+0x92>
    3586:	2a00      	cmp	r2, #0
    3588:	d001      	beq.n	358e <__ieee754_pow+0x966>
    358a:	f7ff fba5 	bl	2cd8 <__ieee754_pow+0xb0>
    358e:	3214      	adds	r2, #20
    3590:	1ad3      	subs	r3, r2, r3
    3592:	003a      	movs	r2, r7
    3594:	411a      	asrs	r2, r3
    3596:	0011      	movs	r1, r2
    3598:	4099      	lsls	r1, r3
    359a:	428f      	cmp	r7, r1
    359c:	d001      	beq.n	35a2 <__ieee754_pow+0x97a>
    359e:	f7ff fb6f 	bl	2c80 <__ieee754_pow+0x58>
    35a2:	2301      	movs	r3, #1
    35a4:	4013      	ands	r3, r2
    35a6:	2202      	movs	r2, #2
    35a8:	1ad3      	subs	r3, r2, r3
    35aa:	469b      	mov	fp, r3
    35ac:	f7ff fb68 	bl	2c80 <__ieee754_pow+0x58>
    35b0:	4b30      	ldr	r3, [pc, #192]	; (3674 <__ieee754_pow+0xa4c>)
    35b2:	429e      	cmp	r6, r3
    35b4:	dd00      	ble.n	35b8 <__ieee754_pow+0x990>
    35b6:	e64e      	b.n	3256 <__ieee754_pow+0x62e>
    35b8:	2300      	movs	r3, #0
    35ba:	4699      	mov	r9, r3
    35bc:	4698      	mov	r8, r3
    35be:	e67a      	b.n	32b6 <__ieee754_pow+0x68e>
    35c0:	0002      	movs	r2, r0
    35c2:	000b      	movs	r3, r1
    35c4:	f7ff fc14 	bl	2df0 <__ieee754_pow+0x1c8>
    35c8:	2380      	movs	r3, #128	; 0x80
    35ca:	4c2e      	ldr	r4, [pc, #184]	; (3684 <__ieee754_pow+0xa5c>)
    35cc:	05db      	lsls	r3, r3, #23
    35ce:	9308      	str	r3, [sp, #32]
    35d0:	9409      	str	r4, [sp, #36]	; 0x24
    35d2:	4b2d      	ldr	r3, [pc, #180]	; (3688 <__ieee754_pow+0xa60>)
    35d4:	4c2d      	ldr	r4, [pc, #180]	; (368c <__ieee754_pow+0xa64>)
    35d6:	2200      	movs	r2, #0
    35d8:	930c      	str	r3, [sp, #48]	; 0x30
    35da:	940d      	str	r4, [sp, #52]	; 0x34
    35dc:	2480      	movs	r4, #128	; 0x80
    35de:	4b2c      	ldr	r3, [pc, #176]	; (3690 <__ieee754_pow+0xa68>)
    35e0:	02e4      	lsls	r4, r4, #11
    35e2:	9206      	str	r2, [sp, #24]
    35e4:	9307      	str	r3, [sp, #28]
    35e6:	e456      	b.n	2e96 <__ieee754_pow+0x26e>
    35e8:	4643      	mov	r3, r8
    35ea:	425b      	negs	r3, r3
    35ec:	4698      	mov	r8, r3
    35ee:	e651      	b.n	3294 <__ieee754_pow+0x66c>
    35f0:	4642      	mov	r2, r8
    35f2:	f000 f9fd 	bl	39f0 <scalbn>
    35f6:	e707      	b.n	3408 <__ieee754_pow+0x7e0>
    35f8:	fffffc02 	.word	0xfffffc02
    35fc:	fffffc01 	.word	0xfffffc01
    3600:	000fffff 	.word	0x000fffff
    3604:	3fe62e43 	.word	0x3fe62e43
    3608:	fefa39ef 	.word	0xfefa39ef
    360c:	3fe62e42 	.word	0x3fe62e42
    3610:	0ca86c39 	.word	0x0ca86c39
    3614:	be205c61 	.word	0xbe205c61
    3618:	72bea4d0 	.word	0x72bea4d0
    361c:	3e663769 	.word	0x3e663769
    3620:	c5d26bf1 	.word	0xc5d26bf1
    3624:	3ebbbd41 	.word	0x3ebbbd41
    3628:	af25de2c 	.word	0xaf25de2c
    362c:	3f11566a 	.word	0x3f11566a
    3630:	16bebd93 	.word	0x16bebd93
    3634:	3f66c16c 	.word	0x3f66c16c
    3638:	5555553e 	.word	0x5555553e
    363c:	3fc55555 	.word	0x3fc55555
    3640:	3ff00000 	.word	0x3ff00000
    3644:	4090cbff 	.word	0x4090cbff
    3648:	3f6f3400 	.word	0x3f6f3400
    364c:	c2f8f359 	.word	0xc2f8f359
    3650:	01a56e1f 	.word	0x01a56e1f
    3654:	bff00000 	.word	0xbff00000
    3658:	3feffffe 	.word	0x3feffffe
    365c:	3ff71547 	.word	0x3ff71547
    3660:	f85ddf44 	.word	0xf85ddf44
    3664:	3e54ae0b 	.word	0x3e54ae0b
    3668:	3fd00000 	.word	0x3fd00000
    366c:	55555555 	.word	0x55555555
    3670:	3fd55555 	.word	0x3fd55555
    3674:	3fe00000 	.word	0x3fe00000
    3678:	652b82fe 	.word	0x652b82fe
    367c:	8800759c 	.word	0x8800759c
    3680:	7e37e43c 	.word	0x7e37e43c
    3684:	3fe2b803 	.word	0x3fe2b803
    3688:	43cfd006 	.word	0x43cfd006
    368c:	3e4cfdeb 	.word	0x3e4cfdeb
    3690:	3ff80000 	.word	0x3ff80000

00003694 <__ieee754_sqrt>:
    3694:	b5f0      	push	{r4, r5, r6, r7, lr}
    3696:	4656      	mov	r6, sl
    3698:	464d      	mov	r5, r9
    369a:	4644      	mov	r4, r8
    369c:	465f      	mov	r7, fp
    369e:	4b75      	ldr	r3, [pc, #468]	; (3874 <__ieee754_sqrt+0x1e0>)
    36a0:	b4f0      	push	{r4, r5, r6, r7}
    36a2:	000a      	movs	r2, r1
    36a4:	000d      	movs	r5, r1
    36a6:	0019      	movs	r1, r3
    36a8:	b083      	sub	sp, #12
    36aa:	0006      	movs	r6, r0
    36ac:	0004      	movs	r4, r0
    36ae:	4029      	ands	r1, r5
    36b0:	4299      	cmp	r1, r3
    36b2:	d100      	bne.n	36b6 <__ieee754_sqrt+0x22>
    36b4:	e0ba      	b.n	382c <__ieee754_sqrt+0x198>
    36b6:	2d00      	cmp	r5, #0
    36b8:	dc00      	bgt.n	36bc <__ieee754_sqrt+0x28>
    36ba:	e094      	b.n	37e6 <__ieee754_sqrt+0x152>
    36bc:	152d      	asrs	r5, r5, #20
    36be:	d100      	bne.n	36c2 <__ieee754_sqrt+0x2e>
    36c0:	e0a3      	b.n	380a <__ieee754_sqrt+0x176>
    36c2:	4b6d      	ldr	r3, [pc, #436]	; (3878 <__ieee754_sqrt+0x1e4>)
    36c4:	0312      	lsls	r2, r2, #12
    36c6:	469c      	mov	ip, r3
    36c8:	2380      	movs	r3, #128	; 0x80
    36ca:	0b12      	lsrs	r2, r2, #12
    36cc:	035b      	lsls	r3, r3, #13
    36ce:	4465      	add	r5, ip
    36d0:	431a      	orrs	r2, r3
    36d2:	07eb      	lsls	r3, r5, #31
    36d4:	d500      	bpl.n	36d8 <__ieee754_sqrt+0x44>
    36d6:	e081      	b.n	37dc <__ieee754_sqrt+0x148>
    36d8:	106b      	asrs	r3, r5, #1
    36da:	4698      	mov	r8, r3
    36dc:	0fe3      	lsrs	r3, r4, #31
    36de:	189b      	adds	r3, r3, r2
    36e0:	189b      	adds	r3, r3, r2
    36e2:	2280      	movs	r2, #128	; 0x80
    36e4:	2116      	movs	r1, #22
    36e6:	2600      	movs	r6, #0
    36e8:	2700      	movs	r7, #0
    36ea:	0064      	lsls	r4, r4, #1
    36ec:	0392      	lsls	r2, r2, #14
    36ee:	18b8      	adds	r0, r7, r2
    36f0:	4298      	cmp	r0, r3
    36f2:	dc02      	bgt.n	36fa <__ieee754_sqrt+0x66>
    36f4:	1887      	adds	r7, r0, r2
    36f6:	1a1b      	subs	r3, r3, r0
    36f8:	18b6      	adds	r6, r6, r2
    36fa:	0fe0      	lsrs	r0, r4, #31
    36fc:	005b      	lsls	r3, r3, #1
    36fe:	3901      	subs	r1, #1
    3700:	181b      	adds	r3, r3, r0
    3702:	0064      	lsls	r4, r4, #1
    3704:	0852      	lsrs	r2, r2, #1
    3706:	2900      	cmp	r1, #0
    3708:	d1f1      	bne.n	36ee <__ieee754_sqrt+0x5a>
    370a:	2200      	movs	r2, #0
    370c:	9201      	str	r2, [sp, #4]
    370e:	4694      	mov	ip, r2
    3710:	2280      	movs	r2, #128	; 0x80
    3712:	0612      	lsls	r2, r2, #24
    3714:	2020      	movs	r0, #32
    3716:	4691      	mov	r9, r2
    3718:	e009      	b.n	372e <__ieee754_sqrt+0x9a>
    371a:	429f      	cmp	r7, r3
    371c:	d041      	beq.n	37a2 <__ieee754_sqrt+0x10e>
    371e:	0fe1      	lsrs	r1, r4, #31
    3720:	18c9      	adds	r1, r1, r3
    3722:	3801      	subs	r0, #1
    3724:	18cb      	adds	r3, r1, r3
    3726:	0064      	lsls	r4, r4, #1
    3728:	0852      	lsrs	r2, r2, #1
    372a:	2800      	cmp	r0, #0
    372c:	d01e      	beq.n	376c <__ieee754_sqrt+0xd8>
    372e:	4661      	mov	r1, ip
    3730:	1851      	adds	r1, r2, r1
    3732:	429f      	cmp	r7, r3
    3734:	daf1      	bge.n	371a <__ieee754_sqrt+0x86>
    3736:	188d      	adds	r5, r1, r2
    3738:	46ac      	mov	ip, r5
    373a:	0fcd      	lsrs	r5, r1, #31
    373c:	07ed      	lsls	r5, r5, #31
    373e:	46ba      	mov	sl, r7
    3740:	454d      	cmp	r5, r9
    3742:	d039      	beq.n	37b8 <__ieee754_sqrt+0x124>
    3744:	1bdb      	subs	r3, r3, r7
    3746:	428c      	cmp	r4, r1
    3748:	41bf      	sbcs	r7, r7
    374a:	427f      	negs	r7, r7
    374c:	1bdb      	subs	r3, r3, r7
    374e:	1a64      	subs	r4, r4, r1
    3750:	9901      	ldr	r1, [sp, #4]
    3752:	3801      	subs	r0, #1
    3754:	468b      	mov	fp, r1
    3756:	4493      	add	fp, r2
    3758:	4659      	mov	r1, fp
    375a:	9101      	str	r1, [sp, #4]
    375c:	0fe1      	lsrs	r1, r4, #31
    375e:	18c9      	adds	r1, r1, r3
    3760:	4657      	mov	r7, sl
    3762:	18cb      	adds	r3, r1, r3
    3764:	0064      	lsls	r4, r4, #1
    3766:	0852      	lsrs	r2, r2, #1
    3768:	2800      	cmp	r0, #0
    376a:	d1e0      	bne.n	372e <__ieee754_sqrt+0x9a>
    376c:	4323      	orrs	r3, r4
    376e:	d12b      	bne.n	37c8 <__ieee754_sqrt+0x134>
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	085b      	lsrs	r3, r3, #1
    3774:	4941      	ldr	r1, [pc, #260]	; (387c <__ieee754_sqrt+0x1e8>)
    3776:	1072      	asrs	r2, r6, #1
    3778:	468c      	mov	ip, r1
    377a:	4462      	add	r2, ip
    377c:	07f1      	lsls	r1, r6, #31
    377e:	d502      	bpl.n	3786 <__ieee754_sqrt+0xf2>
    3780:	2180      	movs	r1, #128	; 0x80
    3782:	0609      	lsls	r1, r1, #24
    3784:	430b      	orrs	r3, r1
    3786:	4641      	mov	r1, r8
    3788:	0509      	lsls	r1, r1, #20
    378a:	188d      	adds	r5, r1, r2
    378c:	001e      	movs	r6, r3
    378e:	002f      	movs	r7, r5
    3790:	0030      	movs	r0, r6
    3792:	0039      	movs	r1, r7
    3794:	b003      	add	sp, #12
    3796:	bc3c      	pop	{r2, r3, r4, r5}
    3798:	4690      	mov	r8, r2
    379a:	4699      	mov	r9, r3
    379c:	46a2      	mov	sl, r4
    379e:	46ab      	mov	fp, r5
    37a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37a2:	42a1      	cmp	r1, r4
    37a4:	d80e      	bhi.n	37c4 <__ieee754_sqrt+0x130>
    37a6:	188d      	adds	r5, r1, r2
    37a8:	46ac      	mov	ip, r5
    37aa:	0fcd      	lsrs	r5, r1, #31
    37ac:	07ed      	lsls	r5, r5, #31
    37ae:	454d      	cmp	r5, r9
    37b0:	d048      	beq.n	3844 <__ieee754_sqrt+0x1b0>
    37b2:	469a      	mov	sl, r3
    37b4:	2300      	movs	r3, #0
    37b6:	e7ca      	b.n	374e <__ieee754_sqrt+0xba>
    37b8:	4665      	mov	r5, ip
    37ba:	2d00      	cmp	r5, #0
    37bc:	dbc2      	blt.n	3744 <__ieee754_sqrt+0xb0>
    37be:	1c7d      	adds	r5, r7, #1
    37c0:	46aa      	mov	sl, r5
    37c2:	e7bf      	b.n	3744 <__ieee754_sqrt+0xb0>
    37c4:	003b      	movs	r3, r7
    37c6:	e7aa      	b.n	371e <__ieee754_sqrt+0x8a>
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	3301      	adds	r3, #1
    37cc:	d03e      	beq.n	384c <__ieee754_sqrt+0x1b8>
    37ce:	9a01      	ldr	r2, [sp, #4]
    37d0:	2301      	movs	r3, #1
    37d2:	4694      	mov	ip, r2
    37d4:	4013      	ands	r3, r2
    37d6:	4463      	add	r3, ip
    37d8:	085b      	lsrs	r3, r3, #1
    37da:	e7cb      	b.n	3774 <__ieee754_sqrt+0xe0>
    37dc:	0fe3      	lsrs	r3, r4, #31
    37de:	0052      	lsls	r2, r2, #1
    37e0:	189a      	adds	r2, r3, r2
    37e2:	0064      	lsls	r4, r4, #1
    37e4:	e778      	b.n	36d8 <__ieee754_sqrt+0x44>
    37e6:	006b      	lsls	r3, r5, #1
    37e8:	085b      	lsrs	r3, r3, #1
    37ea:	4303      	orrs	r3, r0
    37ec:	002f      	movs	r7, r5
    37ee:	2b00      	cmp	r3, #0
    37f0:	d0ce      	beq.n	3790 <__ieee754_sqrt+0xfc>
    37f2:	2500      	movs	r5, #0
    37f4:	2a00      	cmp	r2, #0
    37f6:	d131      	bne.n	385c <__ieee754_sqrt+0x1c8>
    37f8:	0ae2      	lsrs	r2, r4, #11
    37fa:	3d15      	subs	r5, #21
    37fc:	0564      	lsls	r4, r4, #21
    37fe:	2a00      	cmp	r2, #0
    3800:	d0fa      	beq.n	37f8 <__ieee754_sqrt+0x164>
    3802:	2380      	movs	r3, #128	; 0x80
    3804:	035b      	lsls	r3, r3, #13
    3806:	421a      	tst	r2, r3
    3808:	d123      	bne.n	3852 <__ieee754_sqrt+0x1be>
    380a:	2080      	movs	r0, #128	; 0x80
    380c:	2300      	movs	r3, #0
    380e:	0340      	lsls	r0, r0, #13
    3810:	e000      	b.n	3814 <__ieee754_sqrt+0x180>
    3812:	000b      	movs	r3, r1
    3814:	0052      	lsls	r2, r2, #1
    3816:	1c59      	adds	r1, r3, #1
    3818:	4202      	tst	r2, r0
    381a:	d0fa      	beq.n	3812 <__ieee754_sqrt+0x17e>
    381c:	2020      	movs	r0, #32
    381e:	1a40      	subs	r0, r0, r1
    3820:	1aed      	subs	r5, r5, r3
    3822:	0023      	movs	r3, r4
    3824:	40c3      	lsrs	r3, r0
    3826:	408c      	lsls	r4, r1
    3828:	431a      	orrs	r2, r3
    382a:	e74a      	b.n	36c2 <__ieee754_sqrt+0x2e>
    382c:	0002      	movs	r2, r0
    382e:	002b      	movs	r3, r5
    3830:	0029      	movs	r1, r5
    3832:	f001 fd2b 	bl	528c <__aeabi_dmul>
    3836:	0032      	movs	r2, r6
    3838:	002b      	movs	r3, r5
    383a:	f000 fdd7 	bl	43ec <__aeabi_dadd>
    383e:	0006      	movs	r6, r0
    3840:	000f      	movs	r7, r1
    3842:	e7a5      	b.n	3790 <__ieee754_sqrt+0xfc>
    3844:	4665      	mov	r5, ip
    3846:	2d00      	cmp	r5, #0
    3848:	dab9      	bge.n	37be <__ieee754_sqrt+0x12a>
    384a:	e7b2      	b.n	37b2 <__ieee754_sqrt+0x11e>
    384c:	3601      	adds	r6, #1
    384e:	2300      	movs	r3, #0
    3850:	e790      	b.n	3774 <__ieee754_sqrt+0xe0>
    3852:	2301      	movs	r3, #1
    3854:	2020      	movs	r0, #32
    3856:	425b      	negs	r3, r3
    3858:	2100      	movs	r1, #0
    385a:	e7e1      	b.n	3820 <__ieee754_sqrt+0x18c>
    385c:	003b      	movs	r3, r7
    385e:	0002      	movs	r2, r0
    3860:	0039      	movs	r1, r7
    3862:	f001 ff8d 	bl	5780 <__aeabi_dsub>
    3866:	0002      	movs	r2, r0
    3868:	000b      	movs	r3, r1
    386a:	f001 f8eb 	bl	4a44 <__aeabi_ddiv>
    386e:	0006      	movs	r6, r0
    3870:	000f      	movs	r7, r1
    3872:	e78d      	b.n	3790 <__ieee754_sqrt+0xfc>
    3874:	7ff00000 	.word	0x7ff00000
    3878:	fffffc01 	.word	0xfffffc01
    387c:	3fe00000 	.word	0x3fe00000

00003880 <fabs>:
    3880:	0049      	lsls	r1, r1, #1
    3882:	084b      	lsrs	r3, r1, #1
    3884:	0019      	movs	r1, r3
    3886:	4770      	bx	lr

00003888 <finite>:
    3888:	4b03      	ldr	r3, [pc, #12]	; (3898 <finite+0x10>)
    388a:	0048      	lsls	r0, r1, #1
    388c:	469c      	mov	ip, r3
    388e:	0840      	lsrs	r0, r0, #1
    3890:	4460      	add	r0, ip
    3892:	0fc0      	lsrs	r0, r0, #31
    3894:	4770      	bx	lr
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	80100000 	.word	0x80100000

0000389c <matherr>:
    389c:	2000      	movs	r0, #0
    389e:	4770      	bx	lr

000038a0 <nan>:
    38a0:	2000      	movs	r0, #0
    38a2:	4901      	ldr	r1, [pc, #4]	; (38a8 <nan+0x8>)
    38a4:	4770      	bx	lr
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	7ff80000 	.word	0x7ff80000

000038ac <rint>:
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	4647      	mov	r7, r8
    38b0:	b480      	push	{r7}
    38b2:	0fcb      	lsrs	r3, r1, #31
    38b4:	4698      	mov	r8, r3
    38b6:	4c4a      	ldr	r4, [pc, #296]	; (39e0 <rint+0x134>)
    38b8:	004b      	lsls	r3, r1, #1
    38ba:	0d5b      	lsrs	r3, r3, #21
    38bc:	191e      	adds	r6, r3, r4
    38be:	b082      	sub	sp, #8
    38c0:	0007      	movs	r7, r0
    38c2:	000a      	movs	r2, r1
    38c4:	2e13      	cmp	r6, #19
    38c6:	dc35      	bgt.n	3934 <rint+0x88>
    38c8:	2e00      	cmp	r6, #0
    38ca:	db57      	blt.n	397c <rint+0xd0>
    38cc:	4b45      	ldr	r3, [pc, #276]	; (39e4 <rint+0x138>)
    38ce:	0004      	movs	r4, r0
    38d0:	4133      	asrs	r3, r6
    38d2:	001f      	movs	r7, r3
    38d4:	400f      	ands	r7, r1
    38d6:	4307      	orrs	r7, r0
    38d8:	000d      	movs	r5, r1
    38da:	2f00      	cmp	r7, #0
    38dc:	d024      	beq.n	3928 <rint+0x7c>
    38de:	085b      	lsrs	r3, r3, #1
    38e0:	001c      	movs	r4, r3
    38e2:	400c      	ands	r4, r1
    38e4:	4320      	orrs	r0, r4
    38e6:	2700      	movs	r7, #0
    38e8:	2800      	cmp	r0, #0
    38ea:	d007      	beq.n	38fc <rint+0x50>
    38ec:	2e13      	cmp	r6, #19
    38ee:	d100      	bne.n	38f2 <rint+0x46>
    38f0:	e072      	b.n	39d8 <rint+0x12c>
    38f2:	2280      	movs	r2, #128	; 0x80
    38f4:	02d2      	lsls	r2, r2, #11
    38f6:	4132      	asrs	r2, r6
    38f8:	4399      	bics	r1, r3
    38fa:	430a      	orrs	r2, r1
    38fc:	4643      	mov	r3, r8
    38fe:	00de      	lsls	r6, r3, #3
    3900:	4b39      	ldr	r3, [pc, #228]	; (39e8 <rint+0x13c>)
    3902:	0011      	movs	r1, r2
    3904:	199e      	adds	r6, r3, r6
    3906:	6834      	ldr	r4, [r6, #0]
    3908:	6875      	ldr	r5, [r6, #4]
    390a:	0038      	movs	r0, r7
    390c:	0022      	movs	r2, r4
    390e:	002b      	movs	r3, r5
    3910:	f000 fd6c 	bl	43ec <__aeabi_dadd>
    3914:	9000      	str	r0, [sp, #0]
    3916:	9101      	str	r1, [sp, #4]
    3918:	9800      	ldr	r0, [sp, #0]
    391a:	9901      	ldr	r1, [sp, #4]
    391c:	0022      	movs	r2, r4
    391e:	002b      	movs	r3, r5
    3920:	f001 ff2e 	bl	5780 <__aeabi_dsub>
    3924:	0004      	movs	r4, r0
    3926:	000d      	movs	r5, r1
    3928:	0020      	movs	r0, r4
    392a:	0029      	movs	r1, r5
    392c:	b002      	add	sp, #8
    392e:	bc04      	pop	{r2}
    3930:	4690      	mov	r8, r2
    3932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3934:	2e33      	cmp	r6, #51	; 0x33
    3936:	dd0c      	ble.n	3952 <rint+0xa6>
    3938:	2380      	movs	r3, #128	; 0x80
    393a:	0004      	movs	r4, r0
    393c:	000d      	movs	r5, r1
    393e:	00db      	lsls	r3, r3, #3
    3940:	429e      	cmp	r6, r3
    3942:	d1f1      	bne.n	3928 <rint+0x7c>
    3944:	0002      	movs	r2, r0
    3946:	000b      	movs	r3, r1
    3948:	f000 fd50 	bl	43ec <__aeabi_dadd>
    394c:	0004      	movs	r4, r0
    394e:	000d      	movs	r5, r1
    3950:	e7ea      	b.n	3928 <rint+0x7c>
    3952:	4c26      	ldr	r4, [pc, #152]	; (39ec <rint+0x140>)
    3954:	000d      	movs	r5, r1
    3956:	46a4      	mov	ip, r4
    3958:	2401      	movs	r4, #1
    395a:	4463      	add	r3, ip
    395c:	4264      	negs	r4, r4
    395e:	40dc      	lsrs	r4, r3
    3960:	46a4      	mov	ip, r4
    3962:	4661      	mov	r1, ip
    3964:	0004      	movs	r4, r0
    3966:	4201      	tst	r1, r0
    3968:	d0de      	beq.n	3928 <rint+0x7c>
    396a:	0849      	lsrs	r1, r1, #1
    396c:	4201      	tst	r1, r0
    396e:	d0c5      	beq.n	38fc <rint+0x50>
    3970:	2780      	movs	r7, #128	; 0x80
    3972:	05ff      	lsls	r7, r7, #23
    3974:	411f      	asrs	r7, r3
    3976:	4388      	bics	r0, r1
    3978:	4307      	orrs	r7, r0
    397a:	e7bf      	b.n	38fc <rint+0x50>
    397c:	004b      	lsls	r3, r1, #1
    397e:	085b      	lsrs	r3, r3, #1
    3980:	4303      	orrs	r3, r0
    3982:	0004      	movs	r4, r0
    3984:	000d      	movs	r5, r1
    3986:	2b00      	cmp	r3, #0
    3988:	d0ce      	beq.n	3928 <rint+0x7c>
    398a:	030b      	lsls	r3, r1, #12
    398c:	0b1b      	lsrs	r3, r3, #12
    398e:	4303      	orrs	r3, r0
    3990:	425a      	negs	r2, r3
    3992:	4313      	orrs	r3, r2
    3994:	2280      	movs	r2, #128	; 0x80
    3996:	0b1b      	lsrs	r3, r3, #12
    3998:	0312      	lsls	r2, r2, #12
    399a:	4013      	ands	r3, r2
    399c:	0c4a      	lsrs	r2, r1, #17
    399e:	0452      	lsls	r2, r2, #17
    39a0:	4313      	orrs	r3, r2
    39a2:	0019      	movs	r1, r3
    39a4:	4643      	mov	r3, r8
    39a6:	4a10      	ldr	r2, [pc, #64]	; (39e8 <rint+0x13c>)
    39a8:	00db      	lsls	r3, r3, #3
    39aa:	18d3      	adds	r3, r2, r3
    39ac:	681c      	ldr	r4, [r3, #0]
    39ae:	685d      	ldr	r5, [r3, #4]
    39b0:	0022      	movs	r2, r4
    39b2:	002b      	movs	r3, r5
    39b4:	f000 fd1a 	bl	43ec <__aeabi_dadd>
    39b8:	9000      	str	r0, [sp, #0]
    39ba:	9101      	str	r1, [sp, #4]
    39bc:	9800      	ldr	r0, [sp, #0]
    39be:	9901      	ldr	r1, [sp, #4]
    39c0:	0022      	movs	r2, r4
    39c2:	002b      	movs	r3, r5
    39c4:	f001 fedc 	bl	5780 <__aeabi_dsub>
    39c8:	4642      	mov	r2, r8
    39ca:	004b      	lsls	r3, r1, #1
    39cc:	085b      	lsrs	r3, r3, #1
    39ce:	07d6      	lsls	r6, r2, #31
    39d0:	4333      	orrs	r3, r6
    39d2:	0004      	movs	r4, r0
    39d4:	001d      	movs	r5, r3
    39d6:	e7a7      	b.n	3928 <rint+0x7c>
    39d8:	2780      	movs	r7, #128	; 0x80
    39da:	063f      	lsls	r7, r7, #24
    39dc:	e789      	b.n	38f2 <rint+0x46>
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	fffffc01 	.word	0xfffffc01
    39e4:	000fffff 	.word	0x000fffff
    39e8:	00006660 	.word	0x00006660
    39ec:	fffffbed 	.word	0xfffffbed

000039f0 <scalbn>:
    39f0:	004b      	lsls	r3, r1, #1
    39f2:	b570      	push	{r4, r5, r6, lr}
    39f4:	0d5b      	lsrs	r3, r3, #21
    39f6:	0014      	movs	r4, r2
    39f8:	000a      	movs	r2, r1
    39fa:	2b00      	cmp	r3, #0
    39fc:	d11a      	bne.n	3a34 <scalbn+0x44>
    39fe:	004b      	lsls	r3, r1, #1
    3a00:	085b      	lsrs	r3, r3, #1
    3a02:	4303      	orrs	r3, r0
    3a04:	d015      	beq.n	3a32 <scalbn+0x42>
    3a06:	2200      	movs	r2, #0
    3a08:	4b22      	ldr	r3, [pc, #136]	; (3a94 <scalbn+0xa4>)
    3a0a:	f001 fc3f 	bl	528c <__aeabi_dmul>
    3a0e:	4b22      	ldr	r3, [pc, #136]	; (3a98 <scalbn+0xa8>)
    3a10:	000a      	movs	r2, r1
    3a12:	429c      	cmp	r4, r3
    3a14:	db22      	blt.n	3a5c <scalbn+0x6c>
    3a16:	004b      	lsls	r3, r1, #1
    3a18:	0d5b      	lsrs	r3, r3, #21
    3a1a:	3b36      	subs	r3, #54	; 0x36
    3a1c:	4d1f      	ldr	r5, [pc, #124]	; (3a9c <scalbn+0xac>)
    3a1e:	18e3      	adds	r3, r4, r3
    3a20:	42ab      	cmp	r3, r5
    3a22:	dc20      	bgt.n	3a66 <scalbn+0x76>
    3a24:	2b00      	cmp	r3, #0
    3a26:	dd0d      	ble.n	3a44 <scalbn+0x54>
    3a28:	4c1d      	ldr	r4, [pc, #116]	; (3aa0 <scalbn+0xb0>)
    3a2a:	051b      	lsls	r3, r3, #20
    3a2c:	4022      	ands	r2, r4
    3a2e:	431a      	orrs	r2, r3
    3a30:	0011      	movs	r1, r2
    3a32:	bd70      	pop	{r4, r5, r6, pc}
    3a34:	4d1b      	ldr	r5, [pc, #108]	; (3aa4 <scalbn+0xb4>)
    3a36:	42ab      	cmp	r3, r5
    3a38:	d1f0      	bne.n	3a1c <scalbn+0x2c>
    3a3a:	0002      	movs	r2, r0
    3a3c:	000b      	movs	r3, r1
    3a3e:	f000 fcd5 	bl	43ec <__aeabi_dadd>
    3a42:	e7f6      	b.n	3a32 <scalbn+0x42>
    3a44:	001d      	movs	r5, r3
    3a46:	3535      	adds	r5, #53	; 0x35
    3a48:	da18      	bge.n	3a7c <scalbn+0x8c>
    3a4a:	4b17      	ldr	r3, [pc, #92]	; (3aa8 <scalbn+0xb8>)
    3a4c:	0002      	movs	r2, r0
    3a4e:	429c      	cmp	r4, r3
    3a50:	dc0a      	bgt.n	3a68 <scalbn+0x78>
    3a52:	000b      	movs	r3, r1
    3a54:	4815      	ldr	r0, [pc, #84]	; (3aac <scalbn+0xbc>)
    3a56:	4916      	ldr	r1, [pc, #88]	; (3ab0 <scalbn+0xc0>)
    3a58:	f000 f832 	bl	3ac0 <copysign>
    3a5c:	4a13      	ldr	r2, [pc, #76]	; (3aac <scalbn+0xbc>)
    3a5e:	4b14      	ldr	r3, [pc, #80]	; (3ab0 <scalbn+0xc0>)
    3a60:	f001 fc14 	bl	528c <__aeabi_dmul>
    3a64:	e7e5      	b.n	3a32 <scalbn+0x42>
    3a66:	0002      	movs	r2, r0
    3a68:	000b      	movs	r3, r1
    3a6a:	4812      	ldr	r0, [pc, #72]	; (3ab4 <scalbn+0xc4>)
    3a6c:	4912      	ldr	r1, [pc, #72]	; (3ab8 <scalbn+0xc8>)
    3a6e:	f000 f827 	bl	3ac0 <copysign>
    3a72:	4a10      	ldr	r2, [pc, #64]	; (3ab4 <scalbn+0xc4>)
    3a74:	4b10      	ldr	r3, [pc, #64]	; (3ab8 <scalbn+0xc8>)
    3a76:	f001 fc09 	bl	528c <__aeabi_dmul>
    3a7a:	e7da      	b.n	3a32 <scalbn+0x42>
    3a7c:	4c08      	ldr	r4, [pc, #32]	; (3aa0 <scalbn+0xb0>)
    3a7e:	3336      	adds	r3, #54	; 0x36
    3a80:	4022      	ands	r2, r4
    3a82:	051b      	lsls	r3, r3, #20
    3a84:	4313      	orrs	r3, r2
    3a86:	0019      	movs	r1, r3
    3a88:	2200      	movs	r2, #0
    3a8a:	4b0c      	ldr	r3, [pc, #48]	; (3abc <scalbn+0xcc>)
    3a8c:	f001 fbfe 	bl	528c <__aeabi_dmul>
    3a90:	e7cf      	b.n	3a32 <scalbn+0x42>
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	43500000 	.word	0x43500000
    3a98:	ffff3cb0 	.word	0xffff3cb0
    3a9c:	000007fe 	.word	0x000007fe
    3aa0:	800fffff 	.word	0x800fffff
    3aa4:	000007ff 	.word	0x000007ff
    3aa8:	0000c350 	.word	0x0000c350
    3aac:	c2f8f359 	.word	0xc2f8f359
    3ab0:	01a56e1f 	.word	0x01a56e1f
    3ab4:	8800759c 	.word	0x8800759c
    3ab8:	7e37e43c 	.word	0x7e37e43c
    3abc:	3c900000 	.word	0x3c900000

00003ac0 <copysign>:
    3ac0:	b530      	push	{r4, r5, lr}
    3ac2:	004a      	lsls	r2, r1, #1
    3ac4:	0fdb      	lsrs	r3, r3, #31
    3ac6:	07db      	lsls	r3, r3, #31
    3ac8:	0852      	lsrs	r2, r2, #1
    3aca:	431a      	orrs	r2, r3
    3acc:	0011      	movs	r1, r2
    3ace:	bd30      	pop	{r4, r5, pc}

00003ad0 <__aeabi_cdrcmple>:
    3ad0:	4684      	mov	ip, r0
    3ad2:	1c10      	adds	r0, r2, #0
    3ad4:	4662      	mov	r2, ip
    3ad6:	468c      	mov	ip, r1
    3ad8:	1c19      	adds	r1, r3, #0
    3ada:	4663      	mov	r3, ip
    3adc:	e000      	b.n	3ae0 <__aeabi_cdcmpeq>
    3ade:	46c0      	nop			; (mov r8, r8)

00003ae0 <__aeabi_cdcmpeq>:
    3ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ae2:	f001 fb69 	bl	51b8 <__ledf2>
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d401      	bmi.n	3aee <__aeabi_cdcmpeq+0xe>
    3aea:	2100      	movs	r1, #0
    3aec:	42c8      	cmn	r0, r1
    3aee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003af0 <__aeabi_dcmpeq>:
    3af0:	b510      	push	{r4, lr}
    3af2:	f001 fabd 	bl	5070 <__eqdf2>
    3af6:	4240      	negs	r0, r0
    3af8:	3001      	adds	r0, #1
    3afa:	bd10      	pop	{r4, pc}

00003afc <__aeabi_dcmplt>:
    3afc:	b510      	push	{r4, lr}
    3afe:	f001 fb5b 	bl	51b8 <__ledf2>
    3b02:	2800      	cmp	r0, #0
    3b04:	db01      	blt.n	3b0a <__aeabi_dcmplt+0xe>
    3b06:	2000      	movs	r0, #0
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	2001      	movs	r0, #1
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)

00003b10 <__aeabi_dcmple>:
    3b10:	b510      	push	{r4, lr}
    3b12:	f001 fb51 	bl	51b8 <__ledf2>
    3b16:	2800      	cmp	r0, #0
    3b18:	dd01      	ble.n	3b1e <__aeabi_dcmple+0xe>
    3b1a:	2000      	movs	r0, #0
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	2001      	movs	r0, #1
    3b20:	bd10      	pop	{r4, pc}
    3b22:	46c0      	nop			; (mov r8, r8)

00003b24 <__aeabi_dcmpgt>:
    3b24:	b510      	push	{r4, lr}
    3b26:	f001 fae3 	bl	50f0 <__gedf2>
    3b2a:	2800      	cmp	r0, #0
    3b2c:	dc01      	bgt.n	3b32 <__aeabi_dcmpgt+0xe>
    3b2e:	2000      	movs	r0, #0
    3b30:	bd10      	pop	{r4, pc}
    3b32:	2001      	movs	r0, #1
    3b34:	bd10      	pop	{r4, pc}
    3b36:	46c0      	nop			; (mov r8, r8)

00003b38 <__aeabi_dcmpge>:
    3b38:	b510      	push	{r4, lr}
    3b3a:	f001 fad9 	bl	50f0 <__gedf2>
    3b3e:	2800      	cmp	r0, #0
    3b40:	da01      	bge.n	3b46 <__aeabi_dcmpge+0xe>
    3b42:	2000      	movs	r0, #0
    3b44:	bd10      	pop	{r4, pc}
    3b46:	2001      	movs	r0, #1
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)

00003b4c <__aeabi_cfrcmple>:
    3b4c:	4684      	mov	ip, r0
    3b4e:	1c08      	adds	r0, r1, #0
    3b50:	4661      	mov	r1, ip
    3b52:	e7ff      	b.n	3b54 <__aeabi_cfcmpeq>

00003b54 <__aeabi_cfcmpeq>:
    3b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b56:	f000 f901 	bl	3d5c <__lesf2>
    3b5a:	2800      	cmp	r0, #0
    3b5c:	d401      	bmi.n	3b62 <__aeabi_cfcmpeq+0xe>
    3b5e:	2100      	movs	r1, #0
    3b60:	42c8      	cmn	r0, r1
    3b62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003b64 <__aeabi_fcmpeq>:
    3b64:	b510      	push	{r4, lr}
    3b66:	f000 f88d 	bl	3c84 <__eqsf2>
    3b6a:	4240      	negs	r0, r0
    3b6c:	3001      	adds	r0, #1
    3b6e:	bd10      	pop	{r4, pc}

00003b70 <__aeabi_fcmplt>:
    3b70:	b510      	push	{r4, lr}
    3b72:	f000 f8f3 	bl	3d5c <__lesf2>
    3b76:	2800      	cmp	r0, #0
    3b78:	db01      	blt.n	3b7e <__aeabi_fcmplt+0xe>
    3b7a:	2000      	movs	r0, #0
    3b7c:	bd10      	pop	{r4, pc}
    3b7e:	2001      	movs	r0, #1
    3b80:	bd10      	pop	{r4, pc}
    3b82:	46c0      	nop			; (mov r8, r8)

00003b84 <__aeabi_fcmple>:
    3b84:	b510      	push	{r4, lr}
    3b86:	f000 f8e9 	bl	3d5c <__lesf2>
    3b8a:	2800      	cmp	r0, #0
    3b8c:	dd01      	ble.n	3b92 <__aeabi_fcmple+0xe>
    3b8e:	2000      	movs	r0, #0
    3b90:	bd10      	pop	{r4, pc}
    3b92:	2001      	movs	r0, #1
    3b94:	bd10      	pop	{r4, pc}
    3b96:	46c0      	nop			; (mov r8, r8)

00003b98 <__aeabi_fcmpgt>:
    3b98:	b510      	push	{r4, lr}
    3b9a:	f000 f89b 	bl	3cd4 <__gesf2>
    3b9e:	2800      	cmp	r0, #0
    3ba0:	dc01      	bgt.n	3ba6 <__aeabi_fcmpgt+0xe>
    3ba2:	2000      	movs	r0, #0
    3ba4:	bd10      	pop	{r4, pc}
    3ba6:	2001      	movs	r0, #1
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	46c0      	nop			; (mov r8, r8)

00003bac <__aeabi_fcmpge>:
    3bac:	b510      	push	{r4, lr}
    3bae:	f000 f891 	bl	3cd4 <__gesf2>
    3bb2:	2800      	cmp	r0, #0
    3bb4:	da01      	bge.n	3bba <__aeabi_fcmpge+0xe>
    3bb6:	2000      	movs	r0, #0
    3bb8:	bd10      	pop	{r4, pc}
    3bba:	2001      	movs	r0, #1
    3bbc:	bd10      	pop	{r4, pc}
    3bbe:	46c0      	nop			; (mov r8, r8)

00003bc0 <__aeabi_lmul>:
    3bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bc2:	464f      	mov	r7, r9
    3bc4:	4646      	mov	r6, r8
    3bc6:	b4c0      	push	{r6, r7}
    3bc8:	0416      	lsls	r6, r2, #16
    3bca:	0c36      	lsrs	r6, r6, #16
    3bcc:	4699      	mov	r9, r3
    3bce:	0033      	movs	r3, r6
    3bd0:	0405      	lsls	r5, r0, #16
    3bd2:	0c2c      	lsrs	r4, r5, #16
    3bd4:	0c07      	lsrs	r7, r0, #16
    3bd6:	0c15      	lsrs	r5, r2, #16
    3bd8:	4363      	muls	r3, r4
    3bda:	437e      	muls	r6, r7
    3bdc:	436f      	muls	r7, r5
    3bde:	4365      	muls	r5, r4
    3be0:	0c1c      	lsrs	r4, r3, #16
    3be2:	19ad      	adds	r5, r5, r6
    3be4:	1964      	adds	r4, r4, r5
    3be6:	469c      	mov	ip, r3
    3be8:	42a6      	cmp	r6, r4
    3bea:	d903      	bls.n	3bf4 <__aeabi_lmul+0x34>
    3bec:	2380      	movs	r3, #128	; 0x80
    3bee:	025b      	lsls	r3, r3, #9
    3bf0:	4698      	mov	r8, r3
    3bf2:	4447      	add	r7, r8
    3bf4:	4663      	mov	r3, ip
    3bf6:	0c25      	lsrs	r5, r4, #16
    3bf8:	19ef      	adds	r7, r5, r7
    3bfa:	041d      	lsls	r5, r3, #16
    3bfc:	464b      	mov	r3, r9
    3bfe:	434a      	muls	r2, r1
    3c00:	4343      	muls	r3, r0
    3c02:	0c2d      	lsrs	r5, r5, #16
    3c04:	0424      	lsls	r4, r4, #16
    3c06:	1964      	adds	r4, r4, r5
    3c08:	1899      	adds	r1, r3, r2
    3c0a:	19c9      	adds	r1, r1, r7
    3c0c:	0020      	movs	r0, r4
    3c0e:	bc0c      	pop	{r2, r3}
    3c10:	4690      	mov	r8, r2
    3c12:	4699      	mov	r9, r3
    3c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c16:	46c0      	nop			; (mov r8, r8)

00003c18 <__aeabi_f2uiz>:
    3c18:	219e      	movs	r1, #158	; 0x9e
    3c1a:	b510      	push	{r4, lr}
    3c1c:	05c9      	lsls	r1, r1, #23
    3c1e:	1c04      	adds	r4, r0, #0
    3c20:	f7ff ffc4 	bl	3bac <__aeabi_fcmpge>
    3c24:	2800      	cmp	r0, #0
    3c26:	d103      	bne.n	3c30 <__aeabi_f2uiz+0x18>
    3c28:	1c20      	adds	r0, r4, #0
    3c2a:	f000 fb75 	bl	4318 <__aeabi_f2iz>
    3c2e:	bd10      	pop	{r4, pc}
    3c30:	219e      	movs	r1, #158	; 0x9e
    3c32:	1c20      	adds	r0, r4, #0
    3c34:	05c9      	lsls	r1, r1, #23
    3c36:	f000 f9e9 	bl	400c <__aeabi_fsub>
    3c3a:	f000 fb6d 	bl	4318 <__aeabi_f2iz>
    3c3e:	2380      	movs	r3, #128	; 0x80
    3c40:	061b      	lsls	r3, r3, #24
    3c42:	469c      	mov	ip, r3
    3c44:	4460      	add	r0, ip
    3c46:	e7f2      	b.n	3c2e <__aeabi_f2uiz+0x16>

00003c48 <__aeabi_d2uiz>:
    3c48:	b570      	push	{r4, r5, r6, lr}
    3c4a:	2200      	movs	r2, #0
    3c4c:	4b0c      	ldr	r3, [pc, #48]	; (3c80 <__aeabi_d2uiz+0x38>)
    3c4e:	0004      	movs	r4, r0
    3c50:	000d      	movs	r5, r1
    3c52:	f7ff ff71 	bl	3b38 <__aeabi_dcmpge>
    3c56:	2800      	cmp	r0, #0
    3c58:	d104      	bne.n	3c64 <__aeabi_d2uiz+0x1c>
    3c5a:	0020      	movs	r0, r4
    3c5c:	0029      	movs	r1, r5
    3c5e:	f002 f903 	bl	5e68 <__aeabi_d2iz>
    3c62:	bd70      	pop	{r4, r5, r6, pc}
    3c64:	4b06      	ldr	r3, [pc, #24]	; (3c80 <__aeabi_d2uiz+0x38>)
    3c66:	2200      	movs	r2, #0
    3c68:	0020      	movs	r0, r4
    3c6a:	0029      	movs	r1, r5
    3c6c:	f001 fd88 	bl	5780 <__aeabi_dsub>
    3c70:	f002 f8fa 	bl	5e68 <__aeabi_d2iz>
    3c74:	2380      	movs	r3, #128	; 0x80
    3c76:	061b      	lsls	r3, r3, #24
    3c78:	469c      	mov	ip, r3
    3c7a:	4460      	add	r0, ip
    3c7c:	e7f1      	b.n	3c62 <__aeabi_d2uiz+0x1a>
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	41e00000 	.word	0x41e00000

00003c84 <__eqsf2>:
    3c84:	0243      	lsls	r3, r0, #9
    3c86:	b570      	push	{r4, r5, r6, lr}
    3c88:	0042      	lsls	r2, r0, #1
    3c8a:	004c      	lsls	r4, r1, #1
    3c8c:	0a5d      	lsrs	r5, r3, #9
    3c8e:	0fc3      	lsrs	r3, r0, #31
    3c90:	0248      	lsls	r0, r1, #9
    3c92:	0e12      	lsrs	r2, r2, #24
    3c94:	0a46      	lsrs	r6, r0, #9
    3c96:	0e24      	lsrs	r4, r4, #24
    3c98:	0fc9      	lsrs	r1, r1, #31
    3c9a:	2aff      	cmp	r2, #255	; 0xff
    3c9c:	d00f      	beq.n	3cbe <__eqsf2+0x3a>
    3c9e:	2cff      	cmp	r4, #255	; 0xff
    3ca0:	d011      	beq.n	3cc6 <__eqsf2+0x42>
    3ca2:	2001      	movs	r0, #1
    3ca4:	42a2      	cmp	r2, r4
    3ca6:	d000      	beq.n	3caa <__eqsf2+0x26>
    3ca8:	bd70      	pop	{r4, r5, r6, pc}
    3caa:	42b5      	cmp	r5, r6
    3cac:	d1fc      	bne.n	3ca8 <__eqsf2+0x24>
    3cae:	428b      	cmp	r3, r1
    3cb0:	d00d      	beq.n	3cce <__eqsf2+0x4a>
    3cb2:	2a00      	cmp	r2, #0
    3cb4:	d1f8      	bne.n	3ca8 <__eqsf2+0x24>
    3cb6:	0028      	movs	r0, r5
    3cb8:	1e43      	subs	r3, r0, #1
    3cba:	4198      	sbcs	r0, r3
    3cbc:	e7f4      	b.n	3ca8 <__eqsf2+0x24>
    3cbe:	2001      	movs	r0, #1
    3cc0:	2d00      	cmp	r5, #0
    3cc2:	d1f1      	bne.n	3ca8 <__eqsf2+0x24>
    3cc4:	e7eb      	b.n	3c9e <__eqsf2+0x1a>
    3cc6:	2001      	movs	r0, #1
    3cc8:	2e00      	cmp	r6, #0
    3cca:	d1ed      	bne.n	3ca8 <__eqsf2+0x24>
    3ccc:	e7e9      	b.n	3ca2 <__eqsf2+0x1e>
    3cce:	2000      	movs	r0, #0
    3cd0:	e7ea      	b.n	3ca8 <__eqsf2+0x24>
    3cd2:	46c0      	nop			; (mov r8, r8)

00003cd4 <__gesf2>:
    3cd4:	0243      	lsls	r3, r0, #9
    3cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd8:	0042      	lsls	r2, r0, #1
    3cda:	0a5d      	lsrs	r5, r3, #9
    3cdc:	0fc3      	lsrs	r3, r0, #31
    3cde:	0248      	lsls	r0, r1, #9
    3ce0:	0a44      	lsrs	r4, r0, #9
    3ce2:	0048      	lsls	r0, r1, #1
    3ce4:	0e12      	lsrs	r2, r2, #24
    3ce6:	0e00      	lsrs	r0, r0, #24
    3ce8:	0fc9      	lsrs	r1, r1, #31
    3cea:	2aff      	cmp	r2, #255	; 0xff
    3cec:	d01f      	beq.n	3d2e <__gesf2+0x5a>
    3cee:	28ff      	cmp	r0, #255	; 0xff
    3cf0:	d022      	beq.n	3d38 <__gesf2+0x64>
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	d109      	bne.n	3d0a <__gesf2+0x36>
    3cf6:	426e      	negs	r6, r5
    3cf8:	416e      	adcs	r6, r5
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d10f      	bne.n	3d1e <__gesf2+0x4a>
    3cfe:	2c00      	cmp	r4, #0
    3d00:	d10d      	bne.n	3d1e <__gesf2+0x4a>
    3d02:	2000      	movs	r0, #0
    3d04:	2d00      	cmp	r5, #0
    3d06:	d009      	beq.n	3d1c <__gesf2+0x48>
    3d08:	e005      	b.n	3d16 <__gesf2+0x42>
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d101      	bne.n	3d12 <__gesf2+0x3e>
    3d0e:	2c00      	cmp	r4, #0
    3d10:	d001      	beq.n	3d16 <__gesf2+0x42>
    3d12:	428b      	cmp	r3, r1
    3d14:	d013      	beq.n	3d3e <__gesf2+0x6a>
    3d16:	4258      	negs	r0, r3
    3d18:	2301      	movs	r3, #1
    3d1a:	4318      	orrs	r0, r3
    3d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d1e:	2e00      	cmp	r6, #0
    3d20:	d0f7      	beq.n	3d12 <__gesf2+0x3e>
    3d22:	4248      	negs	r0, r1
    3d24:	4141      	adcs	r1, r0
    3d26:	2001      	movs	r0, #1
    3d28:	4249      	negs	r1, r1
    3d2a:	4308      	orrs	r0, r1
    3d2c:	e7f6      	b.n	3d1c <__gesf2+0x48>
    3d2e:	2d00      	cmp	r5, #0
    3d30:	d0dd      	beq.n	3cee <__gesf2+0x1a>
    3d32:	2002      	movs	r0, #2
    3d34:	4240      	negs	r0, r0
    3d36:	e7f1      	b.n	3d1c <__gesf2+0x48>
    3d38:	2c00      	cmp	r4, #0
    3d3a:	d0da      	beq.n	3cf2 <__gesf2+0x1e>
    3d3c:	e7f9      	b.n	3d32 <__gesf2+0x5e>
    3d3e:	4282      	cmp	r2, r0
    3d40:	dce9      	bgt.n	3d16 <__gesf2+0x42>
    3d42:	db04      	blt.n	3d4e <__gesf2+0x7a>
    3d44:	42a5      	cmp	r5, r4
    3d46:	d8e6      	bhi.n	3d16 <__gesf2+0x42>
    3d48:	2000      	movs	r0, #0
    3d4a:	42a5      	cmp	r5, r4
    3d4c:	d2e6      	bcs.n	3d1c <__gesf2+0x48>
    3d4e:	4258      	negs	r0, r3
    3d50:	4143      	adcs	r3, r0
    3d52:	2001      	movs	r0, #1
    3d54:	425b      	negs	r3, r3
    3d56:	4318      	orrs	r0, r3
    3d58:	e7e0      	b.n	3d1c <__gesf2+0x48>
    3d5a:	46c0      	nop			; (mov r8, r8)

00003d5c <__lesf2>:
    3d5c:	0243      	lsls	r3, r0, #9
    3d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d60:	0042      	lsls	r2, r0, #1
    3d62:	004c      	lsls	r4, r1, #1
    3d64:	0a5e      	lsrs	r6, r3, #9
    3d66:	0fc3      	lsrs	r3, r0, #31
    3d68:	0248      	lsls	r0, r1, #9
    3d6a:	0e12      	lsrs	r2, r2, #24
    3d6c:	0a45      	lsrs	r5, r0, #9
    3d6e:	0e24      	lsrs	r4, r4, #24
    3d70:	0fc9      	lsrs	r1, r1, #31
    3d72:	2aff      	cmp	r2, #255	; 0xff
    3d74:	d017      	beq.n	3da6 <__lesf2+0x4a>
    3d76:	2cff      	cmp	r4, #255	; 0xff
    3d78:	d019      	beq.n	3dae <__lesf2+0x52>
    3d7a:	2a00      	cmp	r2, #0
    3d7c:	d10b      	bne.n	3d96 <__lesf2+0x3a>
    3d7e:	4270      	negs	r0, r6
    3d80:	4170      	adcs	r0, r6
    3d82:	2c00      	cmp	r4, #0
    3d84:	d017      	beq.n	3db6 <__lesf2+0x5a>
    3d86:	2800      	cmp	r0, #0
    3d88:	d007      	beq.n	3d9a <__lesf2+0x3e>
    3d8a:	4248      	negs	r0, r1
    3d8c:	4141      	adcs	r1, r0
    3d8e:	2001      	movs	r0, #1
    3d90:	4249      	negs	r1, r1
    3d92:	4308      	orrs	r0, r1
    3d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d96:	2c00      	cmp	r4, #0
    3d98:	d013      	beq.n	3dc2 <__lesf2+0x66>
    3d9a:	428b      	cmp	r3, r1
    3d9c:	d014      	beq.n	3dc8 <__lesf2+0x6c>
    3d9e:	4258      	negs	r0, r3
    3da0:	2301      	movs	r3, #1
    3da2:	4318      	orrs	r0, r3
    3da4:	e7f6      	b.n	3d94 <__lesf2+0x38>
    3da6:	2002      	movs	r0, #2
    3da8:	2e00      	cmp	r6, #0
    3daa:	d1f3      	bne.n	3d94 <__lesf2+0x38>
    3dac:	e7e3      	b.n	3d76 <__lesf2+0x1a>
    3dae:	2002      	movs	r0, #2
    3db0:	2d00      	cmp	r5, #0
    3db2:	d1ef      	bne.n	3d94 <__lesf2+0x38>
    3db4:	e7e1      	b.n	3d7a <__lesf2+0x1e>
    3db6:	2d00      	cmp	r5, #0
    3db8:	d1e5      	bne.n	3d86 <__lesf2+0x2a>
    3dba:	2000      	movs	r0, #0
    3dbc:	2e00      	cmp	r6, #0
    3dbe:	d0e9      	beq.n	3d94 <__lesf2+0x38>
    3dc0:	e7ed      	b.n	3d9e <__lesf2+0x42>
    3dc2:	2d00      	cmp	r5, #0
    3dc4:	d1e9      	bne.n	3d9a <__lesf2+0x3e>
    3dc6:	e7ea      	b.n	3d9e <__lesf2+0x42>
    3dc8:	42a2      	cmp	r2, r4
    3dca:	dce8      	bgt.n	3d9e <__lesf2+0x42>
    3dcc:	db04      	blt.n	3dd8 <__lesf2+0x7c>
    3dce:	42ae      	cmp	r6, r5
    3dd0:	d8e5      	bhi.n	3d9e <__lesf2+0x42>
    3dd2:	2000      	movs	r0, #0
    3dd4:	42ae      	cmp	r6, r5
    3dd6:	d2dd      	bcs.n	3d94 <__lesf2+0x38>
    3dd8:	4258      	negs	r0, r3
    3dda:	4143      	adcs	r3, r0
    3ddc:	2001      	movs	r0, #1
    3dde:	425b      	negs	r3, r3
    3de0:	4318      	orrs	r0, r3
    3de2:	e7d7      	b.n	3d94 <__lesf2+0x38>

00003de4 <__aeabi_fmul>:
    3de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3de6:	4657      	mov	r7, sl
    3de8:	464e      	mov	r6, r9
    3dea:	4645      	mov	r5, r8
    3dec:	0043      	lsls	r3, r0, #1
    3dee:	b4e0      	push	{r5, r6, r7}
    3df0:	0246      	lsls	r6, r0, #9
    3df2:	4688      	mov	r8, r1
    3df4:	0a76      	lsrs	r6, r6, #9
    3df6:	0e1f      	lsrs	r7, r3, #24
    3df8:	0fc4      	lsrs	r4, r0, #31
    3dfa:	2f00      	cmp	r7, #0
    3dfc:	d047      	beq.n	3e8e <__aeabi_fmul+0xaa>
    3dfe:	2fff      	cmp	r7, #255	; 0xff
    3e00:	d025      	beq.n	3e4e <__aeabi_fmul+0x6a>
    3e02:	2300      	movs	r3, #0
    3e04:	2580      	movs	r5, #128	; 0x80
    3e06:	469a      	mov	sl, r3
    3e08:	4699      	mov	r9, r3
    3e0a:	00f6      	lsls	r6, r6, #3
    3e0c:	04ed      	lsls	r5, r5, #19
    3e0e:	432e      	orrs	r6, r5
    3e10:	3f7f      	subs	r7, #127	; 0x7f
    3e12:	4643      	mov	r3, r8
    3e14:	4642      	mov	r2, r8
    3e16:	025d      	lsls	r5, r3, #9
    3e18:	0fd2      	lsrs	r2, r2, #31
    3e1a:	005b      	lsls	r3, r3, #1
    3e1c:	0a6d      	lsrs	r5, r5, #9
    3e1e:	0e1b      	lsrs	r3, r3, #24
    3e20:	4690      	mov	r8, r2
    3e22:	d040      	beq.n	3ea6 <__aeabi_fmul+0xc2>
    3e24:	2bff      	cmp	r3, #255	; 0xff
    3e26:	d039      	beq.n	3e9c <__aeabi_fmul+0xb8>
    3e28:	2280      	movs	r2, #128	; 0x80
    3e2a:	2000      	movs	r0, #0
    3e2c:	00ed      	lsls	r5, r5, #3
    3e2e:	04d2      	lsls	r2, r2, #19
    3e30:	4315      	orrs	r5, r2
    3e32:	3b7f      	subs	r3, #127	; 0x7f
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	4642      	mov	r2, r8
    3e38:	4657      	mov	r7, sl
    3e3a:	1c59      	adds	r1, r3, #1
    3e3c:	4062      	eors	r2, r4
    3e3e:	468c      	mov	ip, r1
    3e40:	4307      	orrs	r7, r0
    3e42:	2f0f      	cmp	r7, #15
    3e44:	d85c      	bhi.n	3f00 <__aeabi_fmul+0x11c>
    3e46:	496f      	ldr	r1, [pc, #444]	; (4004 <__aeabi_fmul+0x220>)
    3e48:	00bf      	lsls	r7, r7, #2
    3e4a:	59c9      	ldr	r1, [r1, r7]
    3e4c:	468f      	mov	pc, r1
    3e4e:	2e00      	cmp	r6, #0
    3e50:	d145      	bne.n	3ede <__aeabi_fmul+0xfa>
    3e52:	2308      	movs	r3, #8
    3e54:	469a      	mov	sl, r3
    3e56:	3b06      	subs	r3, #6
    3e58:	4699      	mov	r9, r3
    3e5a:	e7da      	b.n	3e12 <__aeabi_fmul+0x2e>
    3e5c:	4642      	mov	r2, r8
    3e5e:	2802      	cmp	r0, #2
    3e60:	d02d      	beq.n	3ebe <__aeabi_fmul+0xda>
    3e62:	2803      	cmp	r0, #3
    3e64:	d100      	bne.n	3e68 <__aeabi_fmul+0x84>
    3e66:	e0c3      	b.n	3ff0 <__aeabi_fmul+0x20c>
    3e68:	2801      	cmp	r0, #1
    3e6a:	d000      	beq.n	3e6e <__aeabi_fmul+0x8a>
    3e6c:	e0a2      	b.n	3fb4 <__aeabi_fmul+0x1d0>
    3e6e:	2500      	movs	r5, #0
    3e70:	2600      	movs	r6, #0
    3e72:	4002      	ands	r2, r0
    3e74:	b2d4      	uxtb	r4, r2
    3e76:	0276      	lsls	r6, r6, #9
    3e78:	05ed      	lsls	r5, r5, #23
    3e7a:	0a76      	lsrs	r6, r6, #9
    3e7c:	432e      	orrs	r6, r5
    3e7e:	07e4      	lsls	r4, r4, #31
    3e80:	4326      	orrs	r6, r4
    3e82:	0030      	movs	r0, r6
    3e84:	bc1c      	pop	{r2, r3, r4}
    3e86:	4690      	mov	r8, r2
    3e88:	4699      	mov	r9, r3
    3e8a:	46a2      	mov	sl, r4
    3e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e8e:	2e00      	cmp	r6, #0
    3e90:	d11a      	bne.n	3ec8 <__aeabi_fmul+0xe4>
    3e92:	2304      	movs	r3, #4
    3e94:	469a      	mov	sl, r3
    3e96:	3b03      	subs	r3, #3
    3e98:	4699      	mov	r9, r3
    3e9a:	e7ba      	b.n	3e12 <__aeabi_fmul+0x2e>
    3e9c:	002a      	movs	r2, r5
    3e9e:	1e51      	subs	r1, r2, #1
    3ea0:	418a      	sbcs	r2, r1
    3ea2:	1c90      	adds	r0, r2, #2
    3ea4:	e7c6      	b.n	3e34 <__aeabi_fmul+0x50>
    3ea6:	2001      	movs	r0, #1
    3ea8:	2d00      	cmp	r5, #0
    3eaa:	d0c3      	beq.n	3e34 <__aeabi_fmul+0x50>
    3eac:	0028      	movs	r0, r5
    3eae:	f002 f9f7 	bl	62a0 <__clzsi2>
    3eb2:	1f43      	subs	r3, r0, #5
    3eb4:	3076      	adds	r0, #118	; 0x76
    3eb6:	409d      	lsls	r5, r3
    3eb8:	4243      	negs	r3, r0
    3eba:	2000      	movs	r0, #0
    3ebc:	e7ba      	b.n	3e34 <__aeabi_fmul+0x50>
    3ebe:	2401      	movs	r4, #1
    3ec0:	25ff      	movs	r5, #255	; 0xff
    3ec2:	4014      	ands	r4, r2
    3ec4:	2600      	movs	r6, #0
    3ec6:	e7d6      	b.n	3e76 <__aeabi_fmul+0x92>
    3ec8:	0030      	movs	r0, r6
    3eca:	f002 f9e9 	bl	62a0 <__clzsi2>
    3ece:	1f43      	subs	r3, r0, #5
    3ed0:	409e      	lsls	r6, r3
    3ed2:	2300      	movs	r3, #0
    3ed4:	3076      	adds	r0, #118	; 0x76
    3ed6:	4247      	negs	r7, r0
    3ed8:	469a      	mov	sl, r3
    3eda:	4699      	mov	r9, r3
    3edc:	e799      	b.n	3e12 <__aeabi_fmul+0x2e>
    3ede:	230c      	movs	r3, #12
    3ee0:	469a      	mov	sl, r3
    3ee2:	3b09      	subs	r3, #9
    3ee4:	4699      	mov	r9, r3
    3ee6:	e794      	b.n	3e12 <__aeabi_fmul+0x2e>
    3ee8:	2680      	movs	r6, #128	; 0x80
    3eea:	2400      	movs	r4, #0
    3eec:	03f6      	lsls	r6, r6, #15
    3eee:	25ff      	movs	r5, #255	; 0xff
    3ef0:	e7c1      	b.n	3e76 <__aeabi_fmul+0x92>
    3ef2:	0035      	movs	r5, r6
    3ef4:	4648      	mov	r0, r9
    3ef6:	e7b2      	b.n	3e5e <__aeabi_fmul+0x7a>
    3ef8:	0035      	movs	r5, r6
    3efa:	0022      	movs	r2, r4
    3efc:	4648      	mov	r0, r9
    3efe:	e7ae      	b.n	3e5e <__aeabi_fmul+0x7a>
    3f00:	0429      	lsls	r1, r5, #16
    3f02:	0c09      	lsrs	r1, r1, #16
    3f04:	0008      	movs	r0, r1
    3f06:	0c37      	lsrs	r7, r6, #16
    3f08:	0436      	lsls	r6, r6, #16
    3f0a:	0c36      	lsrs	r6, r6, #16
    3f0c:	0c2c      	lsrs	r4, r5, #16
    3f0e:	4379      	muls	r1, r7
    3f10:	4370      	muls	r0, r6
    3f12:	4367      	muls	r7, r4
    3f14:	4374      	muls	r4, r6
    3f16:	0c06      	lsrs	r6, r0, #16
    3f18:	1864      	adds	r4, r4, r1
    3f1a:	1936      	adds	r6, r6, r4
    3f1c:	42b1      	cmp	r1, r6
    3f1e:	d903      	bls.n	3f28 <__aeabi_fmul+0x144>
    3f20:	2180      	movs	r1, #128	; 0x80
    3f22:	0249      	lsls	r1, r1, #9
    3f24:	4688      	mov	r8, r1
    3f26:	4447      	add	r7, r8
    3f28:	0400      	lsls	r0, r0, #16
    3f2a:	0c00      	lsrs	r0, r0, #16
    3f2c:	0431      	lsls	r1, r6, #16
    3f2e:	1809      	adds	r1, r1, r0
    3f30:	018d      	lsls	r5, r1, #6
    3f32:	1e68      	subs	r0, r5, #1
    3f34:	4185      	sbcs	r5, r0
    3f36:	0e89      	lsrs	r1, r1, #26
    3f38:	4329      	orrs	r1, r5
    3f3a:	0c35      	lsrs	r5, r6, #16
    3f3c:	19ed      	adds	r5, r5, r7
    3f3e:	01ad      	lsls	r5, r5, #6
    3f40:	430d      	orrs	r5, r1
    3f42:	0129      	lsls	r1, r5, #4
    3f44:	d504      	bpl.n	3f50 <__aeabi_fmul+0x16c>
    3f46:	2301      	movs	r3, #1
    3f48:	0869      	lsrs	r1, r5, #1
    3f4a:	401d      	ands	r5, r3
    3f4c:	4663      	mov	r3, ip
    3f4e:	430d      	orrs	r5, r1
    3f50:	0019      	movs	r1, r3
    3f52:	317f      	adds	r1, #127	; 0x7f
    3f54:	2900      	cmp	r1, #0
    3f56:	dd25      	ble.n	3fa4 <__aeabi_fmul+0x1c0>
    3f58:	0768      	lsls	r0, r5, #29
    3f5a:	d004      	beq.n	3f66 <__aeabi_fmul+0x182>
    3f5c:	200f      	movs	r0, #15
    3f5e:	4028      	ands	r0, r5
    3f60:	2804      	cmp	r0, #4
    3f62:	d000      	beq.n	3f66 <__aeabi_fmul+0x182>
    3f64:	3504      	adds	r5, #4
    3f66:	0128      	lsls	r0, r5, #4
    3f68:	d503      	bpl.n	3f72 <__aeabi_fmul+0x18e>
    3f6a:	4927      	ldr	r1, [pc, #156]	; (4008 <__aeabi_fmul+0x224>)
    3f6c:	3380      	adds	r3, #128	; 0x80
    3f6e:	400d      	ands	r5, r1
    3f70:	0019      	movs	r1, r3
    3f72:	29fe      	cmp	r1, #254	; 0xfe
    3f74:	dca3      	bgt.n	3ebe <__aeabi_fmul+0xda>
    3f76:	2401      	movs	r4, #1
    3f78:	01ad      	lsls	r5, r5, #6
    3f7a:	0a6e      	lsrs	r6, r5, #9
    3f7c:	4014      	ands	r4, r2
    3f7e:	b2cd      	uxtb	r5, r1
    3f80:	e779      	b.n	3e76 <__aeabi_fmul+0x92>
    3f82:	2080      	movs	r0, #128	; 0x80
    3f84:	03c0      	lsls	r0, r0, #15
    3f86:	4206      	tst	r6, r0
    3f88:	d007      	beq.n	3f9a <__aeabi_fmul+0x1b6>
    3f8a:	4205      	tst	r5, r0
    3f8c:	d105      	bne.n	3f9a <__aeabi_fmul+0x1b6>
    3f8e:	4328      	orrs	r0, r5
    3f90:	0246      	lsls	r6, r0, #9
    3f92:	0a76      	lsrs	r6, r6, #9
    3f94:	4644      	mov	r4, r8
    3f96:	25ff      	movs	r5, #255	; 0xff
    3f98:	e76d      	b.n	3e76 <__aeabi_fmul+0x92>
    3f9a:	4306      	orrs	r6, r0
    3f9c:	0276      	lsls	r6, r6, #9
    3f9e:	0a76      	lsrs	r6, r6, #9
    3fa0:	25ff      	movs	r5, #255	; 0xff
    3fa2:	e768      	b.n	3e76 <__aeabi_fmul+0x92>
    3fa4:	2401      	movs	r4, #1
    3fa6:	1a61      	subs	r1, r4, r1
    3fa8:	291b      	cmp	r1, #27
    3faa:	dd05      	ble.n	3fb8 <__aeabi_fmul+0x1d4>
    3fac:	4014      	ands	r4, r2
    3fae:	2500      	movs	r5, #0
    3fb0:	2600      	movs	r6, #0
    3fb2:	e760      	b.n	3e76 <__aeabi_fmul+0x92>
    3fb4:	4663      	mov	r3, ip
    3fb6:	e7cb      	b.n	3f50 <__aeabi_fmul+0x16c>
    3fb8:	002e      	movs	r6, r5
    3fba:	2320      	movs	r3, #32
    3fbc:	40ce      	lsrs	r6, r1
    3fbe:	1a59      	subs	r1, r3, r1
    3fc0:	408d      	lsls	r5, r1
    3fc2:	1e6b      	subs	r3, r5, #1
    3fc4:	419d      	sbcs	r5, r3
    3fc6:	432e      	orrs	r6, r5
    3fc8:	0773      	lsls	r3, r6, #29
    3fca:	d004      	beq.n	3fd6 <__aeabi_fmul+0x1f2>
    3fcc:	230f      	movs	r3, #15
    3fce:	4033      	ands	r3, r6
    3fd0:	2b04      	cmp	r3, #4
    3fd2:	d000      	beq.n	3fd6 <__aeabi_fmul+0x1f2>
    3fd4:	3604      	adds	r6, #4
    3fd6:	0173      	lsls	r3, r6, #5
    3fd8:	d504      	bpl.n	3fe4 <__aeabi_fmul+0x200>
    3fda:	2401      	movs	r4, #1
    3fdc:	2501      	movs	r5, #1
    3fde:	4014      	ands	r4, r2
    3fe0:	2600      	movs	r6, #0
    3fe2:	e748      	b.n	3e76 <__aeabi_fmul+0x92>
    3fe4:	2401      	movs	r4, #1
    3fe6:	01b6      	lsls	r6, r6, #6
    3fe8:	0a76      	lsrs	r6, r6, #9
    3fea:	4014      	ands	r4, r2
    3fec:	2500      	movs	r5, #0
    3fee:	e742      	b.n	3e76 <__aeabi_fmul+0x92>
    3ff0:	2680      	movs	r6, #128	; 0x80
    3ff2:	2401      	movs	r4, #1
    3ff4:	03f6      	lsls	r6, r6, #15
    3ff6:	432e      	orrs	r6, r5
    3ff8:	0276      	lsls	r6, r6, #9
    3ffa:	0a76      	lsrs	r6, r6, #9
    3ffc:	4014      	ands	r4, r2
    3ffe:	25ff      	movs	r5, #255	; 0xff
    4000:	e739      	b.n	3e76 <__aeabi_fmul+0x92>
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	00006670 	.word	0x00006670
    4008:	f7ffffff 	.word	0xf7ffffff

0000400c <__aeabi_fsub>:
    400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400e:	024a      	lsls	r2, r1, #9
    4010:	004e      	lsls	r6, r1, #1
    4012:	0243      	lsls	r3, r0, #9
    4014:	0044      	lsls	r4, r0, #1
    4016:	0e24      	lsrs	r4, r4, #24
    4018:	0fc5      	lsrs	r5, r0, #31
    401a:	099b      	lsrs	r3, r3, #6
    401c:	0e36      	lsrs	r6, r6, #24
    401e:	0fc9      	lsrs	r1, r1, #31
    4020:	0992      	lsrs	r2, r2, #6
    4022:	2eff      	cmp	r6, #255	; 0xff
    4024:	d100      	bne.n	4028 <__aeabi_fsub+0x1c>
    4026:	e083      	b.n	4130 <__aeabi_fsub+0x124>
    4028:	2001      	movs	r0, #1
    402a:	4041      	eors	r1, r0
    402c:	1ba0      	subs	r0, r4, r6
    402e:	42a9      	cmp	r1, r5
    4030:	d05c      	beq.n	40ec <__aeabi_fsub+0xe0>
    4032:	2800      	cmp	r0, #0
    4034:	dc00      	bgt.n	4038 <__aeabi_fsub+0x2c>
    4036:	e095      	b.n	4164 <__aeabi_fsub+0x158>
    4038:	2e00      	cmp	r6, #0
    403a:	d11c      	bne.n	4076 <__aeabi_fsub+0x6a>
    403c:	2a00      	cmp	r2, #0
    403e:	d000      	beq.n	4042 <__aeabi_fsub+0x36>
    4040:	e081      	b.n	4146 <__aeabi_fsub+0x13a>
    4042:	075a      	lsls	r2, r3, #29
    4044:	d004      	beq.n	4050 <__aeabi_fsub+0x44>
    4046:	220f      	movs	r2, #15
    4048:	401a      	ands	r2, r3
    404a:	2a04      	cmp	r2, #4
    404c:	d000      	beq.n	4050 <__aeabi_fsub+0x44>
    404e:	3304      	adds	r3, #4
    4050:	015a      	lsls	r2, r3, #5
    4052:	d53b      	bpl.n	40cc <__aeabi_fsub+0xc0>
    4054:	3401      	adds	r4, #1
    4056:	2cff      	cmp	r4, #255	; 0xff
    4058:	d100      	bne.n	405c <__aeabi_fsub+0x50>
    405a:	e091      	b.n	4180 <__aeabi_fsub+0x174>
    405c:	2001      	movs	r0, #1
    405e:	019b      	lsls	r3, r3, #6
    4060:	0a5b      	lsrs	r3, r3, #9
    4062:	b2e4      	uxtb	r4, r4
    4064:	4005      	ands	r5, r0
    4066:	025b      	lsls	r3, r3, #9
    4068:	05e4      	lsls	r4, r4, #23
    406a:	0a5b      	lsrs	r3, r3, #9
    406c:	07ed      	lsls	r5, r5, #31
    406e:	4323      	orrs	r3, r4
    4070:	432b      	orrs	r3, r5
    4072:	0018      	movs	r0, r3
    4074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4076:	2cff      	cmp	r4, #255	; 0xff
    4078:	d0e3      	beq.n	4042 <__aeabi_fsub+0x36>
    407a:	2180      	movs	r1, #128	; 0x80
    407c:	04c9      	lsls	r1, r1, #19
    407e:	430a      	orrs	r2, r1
    4080:	281b      	cmp	r0, #27
    4082:	dd00      	ble.n	4086 <__aeabi_fsub+0x7a>
    4084:	e090      	b.n	41a8 <__aeabi_fsub+0x19c>
    4086:	0016      	movs	r6, r2
    4088:	2120      	movs	r1, #32
    408a:	40c6      	lsrs	r6, r0
    408c:	1a08      	subs	r0, r1, r0
    408e:	4082      	lsls	r2, r0
    4090:	1e51      	subs	r1, r2, #1
    4092:	418a      	sbcs	r2, r1
    4094:	4332      	orrs	r2, r6
    4096:	1a9b      	subs	r3, r3, r2
    4098:	015a      	lsls	r2, r3, #5
    409a:	d515      	bpl.n	40c8 <__aeabi_fsub+0xbc>
    409c:	019b      	lsls	r3, r3, #6
    409e:	099e      	lsrs	r6, r3, #6
    40a0:	0030      	movs	r0, r6
    40a2:	f002 f8fd 	bl	62a0 <__clzsi2>
    40a6:	3805      	subs	r0, #5
    40a8:	4086      	lsls	r6, r0
    40aa:	4284      	cmp	r4, r0
    40ac:	dc6c      	bgt.n	4188 <__aeabi_fsub+0x17c>
    40ae:	1b04      	subs	r4, r0, r4
    40b0:	0033      	movs	r3, r6
    40b2:	2020      	movs	r0, #32
    40b4:	3401      	adds	r4, #1
    40b6:	40e3      	lsrs	r3, r4
    40b8:	1b04      	subs	r4, r0, r4
    40ba:	40a6      	lsls	r6, r4
    40bc:	1e72      	subs	r2, r6, #1
    40be:	4196      	sbcs	r6, r2
    40c0:	2400      	movs	r4, #0
    40c2:	4333      	orrs	r3, r6
    40c4:	e7bd      	b.n	4042 <__aeabi_fsub+0x36>
    40c6:	000d      	movs	r5, r1
    40c8:	075a      	lsls	r2, r3, #29
    40ca:	d1bc      	bne.n	4046 <__aeabi_fsub+0x3a>
    40cc:	08df      	lsrs	r7, r3, #3
    40ce:	2301      	movs	r3, #1
    40d0:	401d      	ands	r5, r3
    40d2:	2cff      	cmp	r4, #255	; 0xff
    40d4:	d133      	bne.n	413e <__aeabi_fsub+0x132>
    40d6:	2f00      	cmp	r7, #0
    40d8:	d100      	bne.n	40dc <__aeabi_fsub+0xd0>
    40da:	e090      	b.n	41fe <__aeabi_fsub+0x1f2>
    40dc:	2280      	movs	r2, #128	; 0x80
    40de:	03d2      	lsls	r2, r2, #15
    40e0:	0013      	movs	r3, r2
    40e2:	433b      	orrs	r3, r7
    40e4:	025b      	lsls	r3, r3, #9
    40e6:	0a5b      	lsrs	r3, r3, #9
    40e8:	24ff      	movs	r4, #255	; 0xff
    40ea:	e7bc      	b.n	4066 <__aeabi_fsub+0x5a>
    40ec:	2800      	cmp	r0, #0
    40ee:	dd4f      	ble.n	4190 <__aeabi_fsub+0x184>
    40f0:	2e00      	cmp	r6, #0
    40f2:	d02e      	beq.n	4152 <__aeabi_fsub+0x146>
    40f4:	2cff      	cmp	r4, #255	; 0xff
    40f6:	d0a4      	beq.n	4042 <__aeabi_fsub+0x36>
    40f8:	2580      	movs	r5, #128	; 0x80
    40fa:	04ed      	lsls	r5, r5, #19
    40fc:	432a      	orrs	r2, r5
    40fe:	281b      	cmp	r0, #27
    4100:	dd00      	ble.n	4104 <__aeabi_fsub+0xf8>
    4102:	e097      	b.n	4234 <__aeabi_fsub+0x228>
    4104:	0016      	movs	r6, r2
    4106:	2520      	movs	r5, #32
    4108:	40c6      	lsrs	r6, r0
    410a:	1a28      	subs	r0, r5, r0
    410c:	4082      	lsls	r2, r0
    410e:	1e50      	subs	r0, r2, #1
    4110:	4182      	sbcs	r2, r0
    4112:	4332      	orrs	r2, r6
    4114:	189b      	adds	r3, r3, r2
    4116:	015a      	lsls	r2, r3, #5
    4118:	d5d5      	bpl.n	40c6 <__aeabi_fsub+0xba>
    411a:	3401      	adds	r4, #1
    411c:	2cff      	cmp	r4, #255	; 0xff
    411e:	d06d      	beq.n	41fc <__aeabi_fsub+0x1f0>
    4120:	2201      	movs	r2, #1
    4122:	487b      	ldr	r0, [pc, #492]	; (4310 <__aeabi_fsub+0x304>)
    4124:	401a      	ands	r2, r3
    4126:	085b      	lsrs	r3, r3, #1
    4128:	4003      	ands	r3, r0
    412a:	4313      	orrs	r3, r2
    412c:	000d      	movs	r5, r1
    412e:	e788      	b.n	4042 <__aeabi_fsub+0x36>
    4130:	2a00      	cmp	r2, #0
    4132:	d000      	beq.n	4136 <__aeabi_fsub+0x12a>
    4134:	e77a      	b.n	402c <__aeabi_fsub+0x20>
    4136:	e777      	b.n	4028 <__aeabi_fsub+0x1c>
    4138:	1e03      	subs	r3, r0, #0
    413a:	d1c5      	bne.n	40c8 <__aeabi_fsub+0xbc>
    413c:	2500      	movs	r5, #0
    413e:	027b      	lsls	r3, r7, #9
    4140:	0a5b      	lsrs	r3, r3, #9
    4142:	b2e4      	uxtb	r4, r4
    4144:	e78f      	b.n	4066 <__aeabi_fsub+0x5a>
    4146:	3801      	subs	r0, #1
    4148:	2800      	cmp	r0, #0
    414a:	d0a4      	beq.n	4096 <__aeabi_fsub+0x8a>
    414c:	2cff      	cmp	r4, #255	; 0xff
    414e:	d197      	bne.n	4080 <__aeabi_fsub+0x74>
    4150:	e777      	b.n	4042 <__aeabi_fsub+0x36>
    4152:	2a00      	cmp	r2, #0
    4154:	d100      	bne.n	4158 <__aeabi_fsub+0x14c>
    4156:	e774      	b.n	4042 <__aeabi_fsub+0x36>
    4158:	3801      	subs	r0, #1
    415a:	2800      	cmp	r0, #0
    415c:	d0da      	beq.n	4114 <__aeabi_fsub+0x108>
    415e:	2cff      	cmp	r4, #255	; 0xff
    4160:	d1cd      	bne.n	40fe <__aeabi_fsub+0xf2>
    4162:	e76e      	b.n	4042 <__aeabi_fsub+0x36>
    4164:	2800      	cmp	r0, #0
    4166:	d121      	bne.n	41ac <__aeabi_fsub+0x1a0>
    4168:	1c60      	adds	r0, r4, #1
    416a:	b2c0      	uxtb	r0, r0
    416c:	2801      	cmp	r0, #1
    416e:	dd58      	ble.n	4222 <__aeabi_fsub+0x216>
    4170:	2780      	movs	r7, #128	; 0x80
    4172:	1a9e      	subs	r6, r3, r2
    4174:	04ff      	lsls	r7, r7, #19
    4176:	4037      	ands	r7, r6
    4178:	d02f      	beq.n	41da <__aeabi_fsub+0x1ce>
    417a:	1ad6      	subs	r6, r2, r3
    417c:	000d      	movs	r5, r1
    417e:	e78f      	b.n	40a0 <__aeabi_fsub+0x94>
    4180:	2301      	movs	r3, #1
    4182:	401d      	ands	r5, r3
    4184:	2300      	movs	r3, #0
    4186:	e76e      	b.n	4066 <__aeabi_fsub+0x5a>
    4188:	4b62      	ldr	r3, [pc, #392]	; (4314 <__aeabi_fsub+0x308>)
    418a:	1a24      	subs	r4, r4, r0
    418c:	4033      	ands	r3, r6
    418e:	e758      	b.n	4042 <__aeabi_fsub+0x36>
    4190:	2800      	cmp	r0, #0
    4192:	d151      	bne.n	4238 <__aeabi_fsub+0x22c>
    4194:	1c60      	adds	r0, r4, #1
    4196:	b2c6      	uxtb	r6, r0
    4198:	2e01      	cmp	r6, #1
    419a:	dd33      	ble.n	4204 <__aeabi_fsub+0x1f8>
    419c:	28ff      	cmp	r0, #255	; 0xff
    419e:	d02d      	beq.n	41fc <__aeabi_fsub+0x1f0>
    41a0:	189b      	adds	r3, r3, r2
    41a2:	085b      	lsrs	r3, r3, #1
    41a4:	0004      	movs	r4, r0
    41a6:	e74c      	b.n	4042 <__aeabi_fsub+0x36>
    41a8:	2201      	movs	r2, #1
    41aa:	e774      	b.n	4096 <__aeabi_fsub+0x8a>
    41ac:	2c00      	cmp	r4, #0
    41ae:	d01a      	beq.n	41e6 <__aeabi_fsub+0x1da>
    41b0:	2eff      	cmp	r6, #255	; 0xff
    41b2:	d01f      	beq.n	41f4 <__aeabi_fsub+0x1e8>
    41b4:	2480      	movs	r4, #128	; 0x80
    41b6:	04e4      	lsls	r4, r4, #19
    41b8:	4240      	negs	r0, r0
    41ba:	4323      	orrs	r3, r4
    41bc:	281b      	cmp	r0, #27
    41be:	dd00      	ble.n	41c2 <__aeabi_fsub+0x1b6>
    41c0:	e096      	b.n	42f0 <__aeabi_fsub+0x2e4>
    41c2:	001d      	movs	r5, r3
    41c4:	2420      	movs	r4, #32
    41c6:	40c5      	lsrs	r5, r0
    41c8:	1a20      	subs	r0, r4, r0
    41ca:	4083      	lsls	r3, r0
    41cc:	1e58      	subs	r0, r3, #1
    41ce:	4183      	sbcs	r3, r0
    41d0:	432b      	orrs	r3, r5
    41d2:	1ad3      	subs	r3, r2, r3
    41d4:	0034      	movs	r4, r6
    41d6:	000d      	movs	r5, r1
    41d8:	e75e      	b.n	4098 <__aeabi_fsub+0x8c>
    41da:	2e00      	cmp	r6, #0
    41dc:	d000      	beq.n	41e0 <__aeabi_fsub+0x1d4>
    41de:	e75f      	b.n	40a0 <__aeabi_fsub+0x94>
    41e0:	2500      	movs	r5, #0
    41e2:	2400      	movs	r4, #0
    41e4:	e7ab      	b.n	413e <__aeabi_fsub+0x132>
    41e6:	2b00      	cmp	r3, #0
    41e8:	d044      	beq.n	4274 <__aeabi_fsub+0x268>
    41ea:	43c0      	mvns	r0, r0
    41ec:	2800      	cmp	r0, #0
    41ee:	d0f0      	beq.n	41d2 <__aeabi_fsub+0x1c6>
    41f0:	2eff      	cmp	r6, #255	; 0xff
    41f2:	d1e3      	bne.n	41bc <__aeabi_fsub+0x1b0>
    41f4:	0013      	movs	r3, r2
    41f6:	24ff      	movs	r4, #255	; 0xff
    41f8:	000d      	movs	r5, r1
    41fa:	e722      	b.n	4042 <__aeabi_fsub+0x36>
    41fc:	000d      	movs	r5, r1
    41fe:	24ff      	movs	r4, #255	; 0xff
    4200:	2300      	movs	r3, #0
    4202:	e730      	b.n	4066 <__aeabi_fsub+0x5a>
    4204:	2c00      	cmp	r4, #0
    4206:	d15d      	bne.n	42c4 <__aeabi_fsub+0x2b8>
    4208:	2b00      	cmp	r3, #0
    420a:	d07d      	beq.n	4308 <__aeabi_fsub+0x2fc>
    420c:	2a00      	cmp	r2, #0
    420e:	d100      	bne.n	4212 <__aeabi_fsub+0x206>
    4210:	e717      	b.n	4042 <__aeabi_fsub+0x36>
    4212:	189b      	adds	r3, r3, r2
    4214:	015a      	lsls	r2, r3, #5
    4216:	d400      	bmi.n	421a <__aeabi_fsub+0x20e>
    4218:	e756      	b.n	40c8 <__aeabi_fsub+0xbc>
    421a:	4a3e      	ldr	r2, [pc, #248]	; (4314 <__aeabi_fsub+0x308>)
    421c:	0004      	movs	r4, r0
    421e:	4013      	ands	r3, r2
    4220:	e70f      	b.n	4042 <__aeabi_fsub+0x36>
    4222:	2c00      	cmp	r4, #0
    4224:	d11e      	bne.n	4264 <__aeabi_fsub+0x258>
    4226:	2b00      	cmp	r3, #0
    4228:	d12f      	bne.n	428a <__aeabi_fsub+0x27e>
    422a:	2a00      	cmp	r2, #0
    422c:	d065      	beq.n	42fa <__aeabi_fsub+0x2ee>
    422e:	0013      	movs	r3, r2
    4230:	000d      	movs	r5, r1
    4232:	e706      	b.n	4042 <__aeabi_fsub+0x36>
    4234:	2201      	movs	r2, #1
    4236:	e76d      	b.n	4114 <__aeabi_fsub+0x108>
    4238:	2c00      	cmp	r4, #0
    423a:	d11f      	bne.n	427c <__aeabi_fsub+0x270>
    423c:	2b00      	cmp	r3, #0
    423e:	d059      	beq.n	42f4 <__aeabi_fsub+0x2e8>
    4240:	43c0      	mvns	r0, r0
    4242:	2800      	cmp	r0, #0
    4244:	d00b      	beq.n	425e <__aeabi_fsub+0x252>
    4246:	2eff      	cmp	r6, #255	; 0xff
    4248:	d04f      	beq.n	42ea <__aeabi_fsub+0x2de>
    424a:	281b      	cmp	r0, #27
    424c:	dc5e      	bgt.n	430c <__aeabi_fsub+0x300>
    424e:	001d      	movs	r5, r3
    4250:	2420      	movs	r4, #32
    4252:	40c5      	lsrs	r5, r0
    4254:	1a20      	subs	r0, r4, r0
    4256:	4083      	lsls	r3, r0
    4258:	1e58      	subs	r0, r3, #1
    425a:	4183      	sbcs	r3, r0
    425c:	432b      	orrs	r3, r5
    425e:	189b      	adds	r3, r3, r2
    4260:	0034      	movs	r4, r6
    4262:	e758      	b.n	4116 <__aeabi_fsub+0x10a>
    4264:	2b00      	cmp	r3, #0
    4266:	d11c      	bne.n	42a2 <__aeabi_fsub+0x296>
    4268:	2a00      	cmp	r2, #0
    426a:	d049      	beq.n	4300 <__aeabi_fsub+0x2f4>
    426c:	0013      	movs	r3, r2
    426e:	000d      	movs	r5, r1
    4270:	24ff      	movs	r4, #255	; 0xff
    4272:	e6e6      	b.n	4042 <__aeabi_fsub+0x36>
    4274:	0013      	movs	r3, r2
    4276:	0034      	movs	r4, r6
    4278:	000d      	movs	r5, r1
    427a:	e6e2      	b.n	4042 <__aeabi_fsub+0x36>
    427c:	2eff      	cmp	r6, #255	; 0xff
    427e:	d034      	beq.n	42ea <__aeabi_fsub+0x2de>
    4280:	2480      	movs	r4, #128	; 0x80
    4282:	04e4      	lsls	r4, r4, #19
    4284:	4240      	negs	r0, r0
    4286:	4323      	orrs	r3, r4
    4288:	e7df      	b.n	424a <__aeabi_fsub+0x23e>
    428a:	2a00      	cmp	r2, #0
    428c:	d100      	bne.n	4290 <__aeabi_fsub+0x284>
    428e:	e6d8      	b.n	4042 <__aeabi_fsub+0x36>
    4290:	2780      	movs	r7, #128	; 0x80
    4292:	1a98      	subs	r0, r3, r2
    4294:	04ff      	lsls	r7, r7, #19
    4296:	4007      	ands	r7, r0
    4298:	d100      	bne.n	429c <__aeabi_fsub+0x290>
    429a:	e74d      	b.n	4138 <__aeabi_fsub+0x12c>
    429c:	1ad3      	subs	r3, r2, r3
    429e:	000d      	movs	r5, r1
    42a0:	e6cf      	b.n	4042 <__aeabi_fsub+0x36>
    42a2:	24ff      	movs	r4, #255	; 0xff
    42a4:	2a00      	cmp	r2, #0
    42a6:	d100      	bne.n	42aa <__aeabi_fsub+0x29e>
    42a8:	e6cb      	b.n	4042 <__aeabi_fsub+0x36>
    42aa:	2080      	movs	r0, #128	; 0x80
    42ac:	08db      	lsrs	r3, r3, #3
    42ae:	03c0      	lsls	r0, r0, #15
    42b0:	4203      	tst	r3, r0
    42b2:	d004      	beq.n	42be <__aeabi_fsub+0x2b2>
    42b4:	08d2      	lsrs	r2, r2, #3
    42b6:	4202      	tst	r2, r0
    42b8:	d101      	bne.n	42be <__aeabi_fsub+0x2b2>
    42ba:	0013      	movs	r3, r2
    42bc:	000d      	movs	r5, r1
    42be:	00db      	lsls	r3, r3, #3
    42c0:	24ff      	movs	r4, #255	; 0xff
    42c2:	e6be      	b.n	4042 <__aeabi_fsub+0x36>
    42c4:	2b00      	cmp	r3, #0
    42c6:	d010      	beq.n	42ea <__aeabi_fsub+0x2de>
    42c8:	24ff      	movs	r4, #255	; 0xff
    42ca:	2a00      	cmp	r2, #0
    42cc:	d100      	bne.n	42d0 <__aeabi_fsub+0x2c4>
    42ce:	e6b8      	b.n	4042 <__aeabi_fsub+0x36>
    42d0:	2080      	movs	r0, #128	; 0x80
    42d2:	08db      	lsrs	r3, r3, #3
    42d4:	03c0      	lsls	r0, r0, #15
    42d6:	4203      	tst	r3, r0
    42d8:	d003      	beq.n	42e2 <__aeabi_fsub+0x2d6>
    42da:	08d2      	lsrs	r2, r2, #3
    42dc:	4202      	tst	r2, r0
    42de:	d100      	bne.n	42e2 <__aeabi_fsub+0x2d6>
    42e0:	0013      	movs	r3, r2
    42e2:	00db      	lsls	r3, r3, #3
    42e4:	000d      	movs	r5, r1
    42e6:	24ff      	movs	r4, #255	; 0xff
    42e8:	e6ab      	b.n	4042 <__aeabi_fsub+0x36>
    42ea:	0013      	movs	r3, r2
    42ec:	24ff      	movs	r4, #255	; 0xff
    42ee:	e6a8      	b.n	4042 <__aeabi_fsub+0x36>
    42f0:	2301      	movs	r3, #1
    42f2:	e76e      	b.n	41d2 <__aeabi_fsub+0x1c6>
    42f4:	0013      	movs	r3, r2
    42f6:	0034      	movs	r4, r6
    42f8:	e6a3      	b.n	4042 <__aeabi_fsub+0x36>
    42fa:	2700      	movs	r7, #0
    42fc:	2500      	movs	r5, #0
    42fe:	e71e      	b.n	413e <__aeabi_fsub+0x132>
    4300:	2780      	movs	r7, #128	; 0x80
    4302:	2500      	movs	r5, #0
    4304:	03ff      	lsls	r7, r7, #15
    4306:	e6e9      	b.n	40dc <__aeabi_fsub+0xd0>
    4308:	0013      	movs	r3, r2
    430a:	e69a      	b.n	4042 <__aeabi_fsub+0x36>
    430c:	2301      	movs	r3, #1
    430e:	e7a6      	b.n	425e <__aeabi_fsub+0x252>
    4310:	7dffffff 	.word	0x7dffffff
    4314:	fbffffff 	.word	0xfbffffff

00004318 <__aeabi_f2iz>:
    4318:	0243      	lsls	r3, r0, #9
    431a:	0a59      	lsrs	r1, r3, #9
    431c:	0043      	lsls	r3, r0, #1
    431e:	0fc2      	lsrs	r2, r0, #31
    4320:	0e1b      	lsrs	r3, r3, #24
    4322:	2000      	movs	r0, #0
    4324:	2b7e      	cmp	r3, #126	; 0x7e
    4326:	dd0e      	ble.n	4346 <__aeabi_f2iz+0x2e>
    4328:	2b9d      	cmp	r3, #157	; 0x9d
    432a:	dc0d      	bgt.n	4348 <__aeabi_f2iz+0x30>
    432c:	2080      	movs	r0, #128	; 0x80
    432e:	0400      	lsls	r0, r0, #16
    4330:	4301      	orrs	r1, r0
    4332:	2b95      	cmp	r3, #149	; 0x95
    4334:	dc0b      	bgt.n	434e <__aeabi_f2iz+0x36>
    4336:	2096      	movs	r0, #150	; 0x96
    4338:	1ac3      	subs	r3, r0, r3
    433a:	40d9      	lsrs	r1, r3
    433c:	000b      	movs	r3, r1
    433e:	4258      	negs	r0, r3
    4340:	2a00      	cmp	r2, #0
    4342:	d100      	bne.n	4346 <__aeabi_f2iz+0x2e>
    4344:	0018      	movs	r0, r3
    4346:	4770      	bx	lr
    4348:	4b03      	ldr	r3, [pc, #12]	; (4358 <__aeabi_f2iz+0x40>)
    434a:	18d0      	adds	r0, r2, r3
    434c:	e7fb      	b.n	4346 <__aeabi_f2iz+0x2e>
    434e:	3b96      	subs	r3, #150	; 0x96
    4350:	4099      	lsls	r1, r3
    4352:	000b      	movs	r3, r1
    4354:	e7f3      	b.n	433e <__aeabi_f2iz+0x26>
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	7fffffff 	.word	0x7fffffff

0000435c <__aeabi_i2f>:
    435c:	b570      	push	{r4, r5, r6, lr}
    435e:	2800      	cmp	r0, #0
    4360:	d030      	beq.n	43c4 <__aeabi_i2f+0x68>
    4362:	17c3      	asrs	r3, r0, #31
    4364:	18c5      	adds	r5, r0, r3
    4366:	405d      	eors	r5, r3
    4368:	0fc4      	lsrs	r4, r0, #31
    436a:	0028      	movs	r0, r5
    436c:	f001 ff98 	bl	62a0 <__clzsi2>
    4370:	239e      	movs	r3, #158	; 0x9e
    4372:	1a1b      	subs	r3, r3, r0
    4374:	2b96      	cmp	r3, #150	; 0x96
    4376:	dc0d      	bgt.n	4394 <__aeabi_i2f+0x38>
    4378:	2296      	movs	r2, #150	; 0x96
    437a:	1ad2      	subs	r2, r2, r3
    437c:	4095      	lsls	r5, r2
    437e:	026a      	lsls	r2, r5, #9
    4380:	0a52      	lsrs	r2, r2, #9
    4382:	b2d8      	uxtb	r0, r3
    4384:	0252      	lsls	r2, r2, #9
    4386:	05c0      	lsls	r0, r0, #23
    4388:	0a52      	lsrs	r2, r2, #9
    438a:	07e4      	lsls	r4, r4, #31
    438c:	4302      	orrs	r2, r0
    438e:	4322      	orrs	r2, r4
    4390:	0010      	movs	r0, r2
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	2b99      	cmp	r3, #153	; 0x99
    4396:	dc19      	bgt.n	43cc <__aeabi_i2f+0x70>
    4398:	2299      	movs	r2, #153	; 0x99
    439a:	1ad2      	subs	r2, r2, r3
    439c:	4095      	lsls	r5, r2
    439e:	4a12      	ldr	r2, [pc, #72]	; (43e8 <__aeabi_i2f+0x8c>)
    43a0:	402a      	ands	r2, r5
    43a2:	0769      	lsls	r1, r5, #29
    43a4:	d004      	beq.n	43b0 <__aeabi_i2f+0x54>
    43a6:	210f      	movs	r1, #15
    43a8:	400d      	ands	r5, r1
    43aa:	2d04      	cmp	r5, #4
    43ac:	d000      	beq.n	43b0 <__aeabi_i2f+0x54>
    43ae:	3204      	adds	r2, #4
    43b0:	0151      	lsls	r1, r2, #5
    43b2:	d503      	bpl.n	43bc <__aeabi_i2f+0x60>
    43b4:	4b0c      	ldr	r3, [pc, #48]	; (43e8 <__aeabi_i2f+0x8c>)
    43b6:	401a      	ands	r2, r3
    43b8:	239f      	movs	r3, #159	; 0x9f
    43ba:	1a1b      	subs	r3, r3, r0
    43bc:	0192      	lsls	r2, r2, #6
    43be:	0a52      	lsrs	r2, r2, #9
    43c0:	b2d8      	uxtb	r0, r3
    43c2:	e7df      	b.n	4384 <__aeabi_i2f+0x28>
    43c4:	2400      	movs	r4, #0
    43c6:	2000      	movs	r0, #0
    43c8:	2200      	movs	r2, #0
    43ca:	e7db      	b.n	4384 <__aeabi_i2f+0x28>
    43cc:	2205      	movs	r2, #5
    43ce:	002e      	movs	r6, r5
    43d0:	1a12      	subs	r2, r2, r0
    43d2:	21b9      	movs	r1, #185	; 0xb9
    43d4:	40d6      	lsrs	r6, r2
    43d6:	002a      	movs	r2, r5
    43d8:	1ac9      	subs	r1, r1, r3
    43da:	408a      	lsls	r2, r1
    43dc:	1e55      	subs	r5, r2, #1
    43de:	41aa      	sbcs	r2, r5
    43e0:	0035      	movs	r5, r6
    43e2:	4315      	orrs	r5, r2
    43e4:	e7db      	b.n	439e <__aeabi_i2f+0x42>
    43e6:	46c0      	nop			; (mov r8, r8)
    43e8:	fbffffff 	.word	0xfbffffff

000043ec <__aeabi_dadd>:
    43ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ee:	4656      	mov	r6, sl
    43f0:	465f      	mov	r7, fp
    43f2:	464d      	mov	r5, r9
    43f4:	4644      	mov	r4, r8
    43f6:	b4f0      	push	{r4, r5, r6, r7}
    43f8:	000f      	movs	r7, r1
    43fa:	0ffd      	lsrs	r5, r7, #31
    43fc:	46aa      	mov	sl, r5
    43fe:	0309      	lsls	r1, r1, #12
    4400:	007c      	lsls	r4, r7, #1
    4402:	002e      	movs	r6, r5
    4404:	005f      	lsls	r7, r3, #1
    4406:	0f45      	lsrs	r5, r0, #29
    4408:	0a49      	lsrs	r1, r1, #9
    440a:	0d7f      	lsrs	r7, r7, #21
    440c:	4329      	orrs	r1, r5
    440e:	00c5      	lsls	r5, r0, #3
    4410:	0318      	lsls	r0, r3, #12
    4412:	46bc      	mov	ip, r7
    4414:	0a40      	lsrs	r0, r0, #9
    4416:	0f57      	lsrs	r7, r2, #29
    4418:	0d64      	lsrs	r4, r4, #21
    441a:	0fdb      	lsrs	r3, r3, #31
    441c:	4338      	orrs	r0, r7
    441e:	00d2      	lsls	r2, r2, #3
    4420:	459a      	cmp	sl, r3
    4422:	d100      	bne.n	4426 <__aeabi_dadd+0x3a>
    4424:	e0aa      	b.n	457c <__aeabi_dadd+0x190>
    4426:	4666      	mov	r6, ip
    4428:	1ba6      	subs	r6, r4, r6
    442a:	2e00      	cmp	r6, #0
    442c:	dc00      	bgt.n	4430 <__aeabi_dadd+0x44>
    442e:	e0ff      	b.n	4630 <__aeabi_dadd+0x244>
    4430:	4663      	mov	r3, ip
    4432:	2b00      	cmp	r3, #0
    4434:	d139      	bne.n	44aa <__aeabi_dadd+0xbe>
    4436:	0003      	movs	r3, r0
    4438:	4313      	orrs	r3, r2
    443a:	d000      	beq.n	443e <__aeabi_dadd+0x52>
    443c:	e0d9      	b.n	45f2 <__aeabi_dadd+0x206>
    443e:	076b      	lsls	r3, r5, #29
    4440:	d009      	beq.n	4456 <__aeabi_dadd+0x6a>
    4442:	230f      	movs	r3, #15
    4444:	402b      	ands	r3, r5
    4446:	2b04      	cmp	r3, #4
    4448:	d005      	beq.n	4456 <__aeabi_dadd+0x6a>
    444a:	1d2b      	adds	r3, r5, #4
    444c:	42ab      	cmp	r3, r5
    444e:	41ad      	sbcs	r5, r5
    4450:	426d      	negs	r5, r5
    4452:	1949      	adds	r1, r1, r5
    4454:	001d      	movs	r5, r3
    4456:	020b      	lsls	r3, r1, #8
    4458:	d400      	bmi.n	445c <__aeabi_dadd+0x70>
    445a:	e082      	b.n	4562 <__aeabi_dadd+0x176>
    445c:	4bca      	ldr	r3, [pc, #808]	; (4788 <__aeabi_dadd+0x39c>)
    445e:	3401      	adds	r4, #1
    4460:	429c      	cmp	r4, r3
    4462:	d100      	bne.n	4466 <__aeabi_dadd+0x7a>
    4464:	e0fe      	b.n	4664 <__aeabi_dadd+0x278>
    4466:	000a      	movs	r2, r1
    4468:	4656      	mov	r6, sl
    446a:	4bc8      	ldr	r3, [pc, #800]	; (478c <__aeabi_dadd+0x3a0>)
    446c:	08ed      	lsrs	r5, r5, #3
    446e:	401a      	ands	r2, r3
    4470:	0750      	lsls	r0, r2, #29
    4472:	0564      	lsls	r4, r4, #21
    4474:	0252      	lsls	r2, r2, #9
    4476:	4305      	orrs	r5, r0
    4478:	0b12      	lsrs	r2, r2, #12
    447a:	0d64      	lsrs	r4, r4, #21
    447c:	2100      	movs	r1, #0
    447e:	0312      	lsls	r2, r2, #12
    4480:	0d0b      	lsrs	r3, r1, #20
    4482:	051b      	lsls	r3, r3, #20
    4484:	0564      	lsls	r4, r4, #21
    4486:	0b12      	lsrs	r2, r2, #12
    4488:	431a      	orrs	r2, r3
    448a:	0863      	lsrs	r3, r4, #1
    448c:	4cc0      	ldr	r4, [pc, #768]	; (4790 <__aeabi_dadd+0x3a4>)
    448e:	07f6      	lsls	r6, r6, #31
    4490:	4014      	ands	r4, r2
    4492:	431c      	orrs	r4, r3
    4494:	0064      	lsls	r4, r4, #1
    4496:	0864      	lsrs	r4, r4, #1
    4498:	4334      	orrs	r4, r6
    449a:	0028      	movs	r0, r5
    449c:	0021      	movs	r1, r4
    449e:	bc3c      	pop	{r2, r3, r4, r5}
    44a0:	4690      	mov	r8, r2
    44a2:	4699      	mov	r9, r3
    44a4:	46a2      	mov	sl, r4
    44a6:	46ab      	mov	fp, r5
    44a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44aa:	4bb7      	ldr	r3, [pc, #732]	; (4788 <__aeabi_dadd+0x39c>)
    44ac:	429c      	cmp	r4, r3
    44ae:	d0c6      	beq.n	443e <__aeabi_dadd+0x52>
    44b0:	2380      	movs	r3, #128	; 0x80
    44b2:	041b      	lsls	r3, r3, #16
    44b4:	4318      	orrs	r0, r3
    44b6:	2e38      	cmp	r6, #56	; 0x38
    44b8:	dd00      	ble.n	44bc <__aeabi_dadd+0xd0>
    44ba:	e0eb      	b.n	4694 <__aeabi_dadd+0x2a8>
    44bc:	2e1f      	cmp	r6, #31
    44be:	dd00      	ble.n	44c2 <__aeabi_dadd+0xd6>
    44c0:	e11e      	b.n	4700 <__aeabi_dadd+0x314>
    44c2:	2320      	movs	r3, #32
    44c4:	1b9b      	subs	r3, r3, r6
    44c6:	469c      	mov	ip, r3
    44c8:	0003      	movs	r3, r0
    44ca:	4667      	mov	r7, ip
    44cc:	40bb      	lsls	r3, r7
    44ce:	4698      	mov	r8, r3
    44d0:	0013      	movs	r3, r2
    44d2:	4647      	mov	r7, r8
    44d4:	40f3      	lsrs	r3, r6
    44d6:	433b      	orrs	r3, r7
    44d8:	4667      	mov	r7, ip
    44da:	40ba      	lsls	r2, r7
    44dc:	1e57      	subs	r7, r2, #1
    44de:	41ba      	sbcs	r2, r7
    44e0:	4313      	orrs	r3, r2
    44e2:	0002      	movs	r2, r0
    44e4:	40f2      	lsrs	r2, r6
    44e6:	1aeb      	subs	r3, r5, r3
    44e8:	429d      	cmp	r5, r3
    44ea:	41b6      	sbcs	r6, r6
    44ec:	001d      	movs	r5, r3
    44ee:	1a8a      	subs	r2, r1, r2
    44f0:	4276      	negs	r6, r6
    44f2:	1b91      	subs	r1, r2, r6
    44f4:	020b      	lsls	r3, r1, #8
    44f6:	d531      	bpl.n	455c <__aeabi_dadd+0x170>
    44f8:	024a      	lsls	r2, r1, #9
    44fa:	0a56      	lsrs	r6, r2, #9
    44fc:	2e00      	cmp	r6, #0
    44fe:	d100      	bne.n	4502 <__aeabi_dadd+0x116>
    4500:	e0b4      	b.n	466c <__aeabi_dadd+0x280>
    4502:	0030      	movs	r0, r6
    4504:	f001 fecc 	bl	62a0 <__clzsi2>
    4508:	0003      	movs	r3, r0
    450a:	3b08      	subs	r3, #8
    450c:	2b1f      	cmp	r3, #31
    450e:	dd00      	ble.n	4512 <__aeabi_dadd+0x126>
    4510:	e0b5      	b.n	467e <__aeabi_dadd+0x292>
    4512:	2220      	movs	r2, #32
    4514:	0029      	movs	r1, r5
    4516:	1ad2      	subs	r2, r2, r3
    4518:	40d1      	lsrs	r1, r2
    451a:	409e      	lsls	r6, r3
    451c:	000a      	movs	r2, r1
    451e:	409d      	lsls	r5, r3
    4520:	4332      	orrs	r2, r6
    4522:	429c      	cmp	r4, r3
    4524:	dd00      	ble.n	4528 <__aeabi_dadd+0x13c>
    4526:	e0b1      	b.n	468c <__aeabi_dadd+0x2a0>
    4528:	1b1c      	subs	r4, r3, r4
    452a:	1c63      	adds	r3, r4, #1
    452c:	2b1f      	cmp	r3, #31
    452e:	dd00      	ble.n	4532 <__aeabi_dadd+0x146>
    4530:	e0d5      	b.n	46de <__aeabi_dadd+0x2f2>
    4532:	2120      	movs	r1, #32
    4534:	0014      	movs	r4, r2
    4536:	0028      	movs	r0, r5
    4538:	1ac9      	subs	r1, r1, r3
    453a:	408c      	lsls	r4, r1
    453c:	40d8      	lsrs	r0, r3
    453e:	408d      	lsls	r5, r1
    4540:	4304      	orrs	r4, r0
    4542:	40da      	lsrs	r2, r3
    4544:	1e68      	subs	r0, r5, #1
    4546:	4185      	sbcs	r5, r0
    4548:	0011      	movs	r1, r2
    454a:	4325      	orrs	r5, r4
    454c:	2400      	movs	r4, #0
    454e:	e776      	b.n	443e <__aeabi_dadd+0x52>
    4550:	4641      	mov	r1, r8
    4552:	4331      	orrs	r1, r6
    4554:	d100      	bne.n	4558 <__aeabi_dadd+0x16c>
    4556:	e234      	b.n	49c2 <__aeabi_dadd+0x5d6>
    4558:	0031      	movs	r1, r6
    455a:	4645      	mov	r5, r8
    455c:	076b      	lsls	r3, r5, #29
    455e:	d000      	beq.n	4562 <__aeabi_dadd+0x176>
    4560:	e76f      	b.n	4442 <__aeabi_dadd+0x56>
    4562:	4656      	mov	r6, sl
    4564:	0748      	lsls	r0, r1, #29
    4566:	08ed      	lsrs	r5, r5, #3
    4568:	08c9      	lsrs	r1, r1, #3
    456a:	4305      	orrs	r5, r0
    456c:	4b86      	ldr	r3, [pc, #536]	; (4788 <__aeabi_dadd+0x39c>)
    456e:	429c      	cmp	r4, r3
    4570:	d035      	beq.n	45de <__aeabi_dadd+0x1f2>
    4572:	030a      	lsls	r2, r1, #12
    4574:	0564      	lsls	r4, r4, #21
    4576:	0b12      	lsrs	r2, r2, #12
    4578:	0d64      	lsrs	r4, r4, #21
    457a:	e77f      	b.n	447c <__aeabi_dadd+0x90>
    457c:	4663      	mov	r3, ip
    457e:	1ae3      	subs	r3, r4, r3
    4580:	469b      	mov	fp, r3
    4582:	2b00      	cmp	r3, #0
    4584:	dc00      	bgt.n	4588 <__aeabi_dadd+0x19c>
    4586:	e08b      	b.n	46a0 <__aeabi_dadd+0x2b4>
    4588:	4667      	mov	r7, ip
    458a:	2f00      	cmp	r7, #0
    458c:	d03c      	beq.n	4608 <__aeabi_dadd+0x21c>
    458e:	4f7e      	ldr	r7, [pc, #504]	; (4788 <__aeabi_dadd+0x39c>)
    4590:	42bc      	cmp	r4, r7
    4592:	d100      	bne.n	4596 <__aeabi_dadd+0x1aa>
    4594:	e753      	b.n	443e <__aeabi_dadd+0x52>
    4596:	2780      	movs	r7, #128	; 0x80
    4598:	043f      	lsls	r7, r7, #16
    459a:	4338      	orrs	r0, r7
    459c:	465b      	mov	r3, fp
    459e:	2b38      	cmp	r3, #56	; 0x38
    45a0:	dc00      	bgt.n	45a4 <__aeabi_dadd+0x1b8>
    45a2:	e0f7      	b.n	4794 <__aeabi_dadd+0x3a8>
    45a4:	4302      	orrs	r2, r0
    45a6:	1e50      	subs	r0, r2, #1
    45a8:	4182      	sbcs	r2, r0
    45aa:	2000      	movs	r0, #0
    45ac:	b2d2      	uxtb	r2, r2
    45ae:	1953      	adds	r3, r2, r5
    45b0:	1842      	adds	r2, r0, r1
    45b2:	42ab      	cmp	r3, r5
    45b4:	4189      	sbcs	r1, r1
    45b6:	001d      	movs	r5, r3
    45b8:	4249      	negs	r1, r1
    45ba:	1889      	adds	r1, r1, r2
    45bc:	020b      	lsls	r3, r1, #8
    45be:	d5cd      	bpl.n	455c <__aeabi_dadd+0x170>
    45c0:	4b71      	ldr	r3, [pc, #452]	; (4788 <__aeabi_dadd+0x39c>)
    45c2:	3401      	adds	r4, #1
    45c4:	429c      	cmp	r4, r3
    45c6:	d100      	bne.n	45ca <__aeabi_dadd+0x1de>
    45c8:	e13d      	b.n	4846 <__aeabi_dadd+0x45a>
    45ca:	2001      	movs	r0, #1
    45cc:	4a6f      	ldr	r2, [pc, #444]	; (478c <__aeabi_dadd+0x3a0>)
    45ce:	086b      	lsrs	r3, r5, #1
    45d0:	400a      	ands	r2, r1
    45d2:	4028      	ands	r0, r5
    45d4:	4318      	orrs	r0, r3
    45d6:	07d5      	lsls	r5, r2, #31
    45d8:	4305      	orrs	r5, r0
    45da:	0851      	lsrs	r1, r2, #1
    45dc:	e72f      	b.n	443e <__aeabi_dadd+0x52>
    45de:	002b      	movs	r3, r5
    45e0:	430b      	orrs	r3, r1
    45e2:	d100      	bne.n	45e6 <__aeabi_dadd+0x1fa>
    45e4:	e1cb      	b.n	497e <__aeabi_dadd+0x592>
    45e6:	2380      	movs	r3, #128	; 0x80
    45e8:	031b      	lsls	r3, r3, #12
    45ea:	430b      	orrs	r3, r1
    45ec:	031a      	lsls	r2, r3, #12
    45ee:	0b12      	lsrs	r2, r2, #12
    45f0:	e744      	b.n	447c <__aeabi_dadd+0x90>
    45f2:	3e01      	subs	r6, #1
    45f4:	2e00      	cmp	r6, #0
    45f6:	d16d      	bne.n	46d4 <__aeabi_dadd+0x2e8>
    45f8:	1aae      	subs	r6, r5, r2
    45fa:	42b5      	cmp	r5, r6
    45fc:	419b      	sbcs	r3, r3
    45fe:	1a09      	subs	r1, r1, r0
    4600:	425b      	negs	r3, r3
    4602:	1ac9      	subs	r1, r1, r3
    4604:	0035      	movs	r5, r6
    4606:	e775      	b.n	44f4 <__aeabi_dadd+0x108>
    4608:	0007      	movs	r7, r0
    460a:	4317      	orrs	r7, r2
    460c:	d100      	bne.n	4610 <__aeabi_dadd+0x224>
    460e:	e716      	b.n	443e <__aeabi_dadd+0x52>
    4610:	2301      	movs	r3, #1
    4612:	425b      	negs	r3, r3
    4614:	469c      	mov	ip, r3
    4616:	44e3      	add	fp, ip
    4618:	465b      	mov	r3, fp
    461a:	2b00      	cmp	r3, #0
    461c:	d000      	beq.n	4620 <__aeabi_dadd+0x234>
    461e:	e0e0      	b.n	47e2 <__aeabi_dadd+0x3f6>
    4620:	18aa      	adds	r2, r5, r2
    4622:	42aa      	cmp	r2, r5
    4624:	419b      	sbcs	r3, r3
    4626:	1809      	adds	r1, r1, r0
    4628:	425b      	negs	r3, r3
    462a:	1859      	adds	r1, r3, r1
    462c:	0015      	movs	r5, r2
    462e:	e7c5      	b.n	45bc <__aeabi_dadd+0x1d0>
    4630:	2e00      	cmp	r6, #0
    4632:	d175      	bne.n	4720 <__aeabi_dadd+0x334>
    4634:	1c66      	adds	r6, r4, #1
    4636:	0576      	lsls	r6, r6, #21
    4638:	0d76      	lsrs	r6, r6, #21
    463a:	2e01      	cmp	r6, #1
    463c:	dc00      	bgt.n	4640 <__aeabi_dadd+0x254>
    463e:	e0f3      	b.n	4828 <__aeabi_dadd+0x43c>
    4640:	1aae      	subs	r6, r5, r2
    4642:	46b0      	mov	r8, r6
    4644:	4545      	cmp	r5, r8
    4646:	41bf      	sbcs	r7, r7
    4648:	1a0e      	subs	r6, r1, r0
    464a:	427f      	negs	r7, r7
    464c:	1bf6      	subs	r6, r6, r7
    464e:	0237      	lsls	r7, r6, #8
    4650:	d400      	bmi.n	4654 <__aeabi_dadd+0x268>
    4652:	e08f      	b.n	4774 <__aeabi_dadd+0x388>
    4654:	1b55      	subs	r5, r2, r5
    4656:	42aa      	cmp	r2, r5
    4658:	41b6      	sbcs	r6, r6
    465a:	1a41      	subs	r1, r0, r1
    465c:	4276      	negs	r6, r6
    465e:	1b8e      	subs	r6, r1, r6
    4660:	469a      	mov	sl, r3
    4662:	e74b      	b.n	44fc <__aeabi_dadd+0x110>
    4664:	4656      	mov	r6, sl
    4666:	2200      	movs	r2, #0
    4668:	2500      	movs	r5, #0
    466a:	e707      	b.n	447c <__aeabi_dadd+0x90>
    466c:	0028      	movs	r0, r5
    466e:	f001 fe17 	bl	62a0 <__clzsi2>
    4672:	3020      	adds	r0, #32
    4674:	0003      	movs	r3, r0
    4676:	3b08      	subs	r3, #8
    4678:	2b1f      	cmp	r3, #31
    467a:	dc00      	bgt.n	467e <__aeabi_dadd+0x292>
    467c:	e749      	b.n	4512 <__aeabi_dadd+0x126>
    467e:	002a      	movs	r2, r5
    4680:	3828      	subs	r0, #40	; 0x28
    4682:	4082      	lsls	r2, r0
    4684:	2500      	movs	r5, #0
    4686:	429c      	cmp	r4, r3
    4688:	dc00      	bgt.n	468c <__aeabi_dadd+0x2a0>
    468a:	e74d      	b.n	4528 <__aeabi_dadd+0x13c>
    468c:	493f      	ldr	r1, [pc, #252]	; (478c <__aeabi_dadd+0x3a0>)
    468e:	1ae4      	subs	r4, r4, r3
    4690:	4011      	ands	r1, r2
    4692:	e6d4      	b.n	443e <__aeabi_dadd+0x52>
    4694:	4302      	orrs	r2, r0
    4696:	1e50      	subs	r0, r2, #1
    4698:	4182      	sbcs	r2, r0
    469a:	b2d3      	uxtb	r3, r2
    469c:	2200      	movs	r2, #0
    469e:	e722      	b.n	44e6 <__aeabi_dadd+0xfa>
    46a0:	2b00      	cmp	r3, #0
    46a2:	d000      	beq.n	46a6 <__aeabi_dadd+0x2ba>
    46a4:	e0f3      	b.n	488e <__aeabi_dadd+0x4a2>
    46a6:	1c63      	adds	r3, r4, #1
    46a8:	469c      	mov	ip, r3
    46aa:	055b      	lsls	r3, r3, #21
    46ac:	0d5b      	lsrs	r3, r3, #21
    46ae:	2b01      	cmp	r3, #1
    46b0:	dc00      	bgt.n	46b4 <__aeabi_dadd+0x2c8>
    46b2:	e09f      	b.n	47f4 <__aeabi_dadd+0x408>
    46b4:	4b34      	ldr	r3, [pc, #208]	; (4788 <__aeabi_dadd+0x39c>)
    46b6:	459c      	cmp	ip, r3
    46b8:	d100      	bne.n	46bc <__aeabi_dadd+0x2d0>
    46ba:	e0c3      	b.n	4844 <__aeabi_dadd+0x458>
    46bc:	18aa      	adds	r2, r5, r2
    46be:	1809      	adds	r1, r1, r0
    46c0:	42aa      	cmp	r2, r5
    46c2:	4180      	sbcs	r0, r0
    46c4:	4240      	negs	r0, r0
    46c6:	1841      	adds	r1, r0, r1
    46c8:	07cd      	lsls	r5, r1, #31
    46ca:	0852      	lsrs	r2, r2, #1
    46cc:	4315      	orrs	r5, r2
    46ce:	0849      	lsrs	r1, r1, #1
    46d0:	4664      	mov	r4, ip
    46d2:	e6b4      	b.n	443e <__aeabi_dadd+0x52>
    46d4:	4b2c      	ldr	r3, [pc, #176]	; (4788 <__aeabi_dadd+0x39c>)
    46d6:	429c      	cmp	r4, r3
    46d8:	d000      	beq.n	46dc <__aeabi_dadd+0x2f0>
    46da:	e6ec      	b.n	44b6 <__aeabi_dadd+0xca>
    46dc:	e6af      	b.n	443e <__aeabi_dadd+0x52>
    46de:	0011      	movs	r1, r2
    46e0:	3c1f      	subs	r4, #31
    46e2:	40e1      	lsrs	r1, r4
    46e4:	000c      	movs	r4, r1
    46e6:	2b20      	cmp	r3, #32
    46e8:	d100      	bne.n	46ec <__aeabi_dadd+0x300>
    46ea:	e07f      	b.n	47ec <__aeabi_dadd+0x400>
    46ec:	2140      	movs	r1, #64	; 0x40
    46ee:	1acb      	subs	r3, r1, r3
    46f0:	409a      	lsls	r2, r3
    46f2:	4315      	orrs	r5, r2
    46f4:	1e6a      	subs	r2, r5, #1
    46f6:	4195      	sbcs	r5, r2
    46f8:	2100      	movs	r1, #0
    46fa:	4325      	orrs	r5, r4
    46fc:	2400      	movs	r4, #0
    46fe:	e72d      	b.n	455c <__aeabi_dadd+0x170>
    4700:	0033      	movs	r3, r6
    4702:	0007      	movs	r7, r0
    4704:	3b20      	subs	r3, #32
    4706:	40df      	lsrs	r7, r3
    4708:	003b      	movs	r3, r7
    470a:	2e20      	cmp	r6, #32
    470c:	d070      	beq.n	47f0 <__aeabi_dadd+0x404>
    470e:	2740      	movs	r7, #64	; 0x40
    4710:	1bbe      	subs	r6, r7, r6
    4712:	40b0      	lsls	r0, r6
    4714:	4302      	orrs	r2, r0
    4716:	1e50      	subs	r0, r2, #1
    4718:	4182      	sbcs	r2, r0
    471a:	4313      	orrs	r3, r2
    471c:	2200      	movs	r2, #0
    471e:	e6e2      	b.n	44e6 <__aeabi_dadd+0xfa>
    4720:	2c00      	cmp	r4, #0
    4722:	d04f      	beq.n	47c4 <__aeabi_dadd+0x3d8>
    4724:	4c18      	ldr	r4, [pc, #96]	; (4788 <__aeabi_dadd+0x39c>)
    4726:	45a4      	cmp	ip, r4
    4728:	d100      	bne.n	472c <__aeabi_dadd+0x340>
    472a:	e0ab      	b.n	4884 <__aeabi_dadd+0x498>
    472c:	2480      	movs	r4, #128	; 0x80
    472e:	0424      	lsls	r4, r4, #16
    4730:	4276      	negs	r6, r6
    4732:	4321      	orrs	r1, r4
    4734:	2e38      	cmp	r6, #56	; 0x38
    4736:	dd00      	ble.n	473a <__aeabi_dadd+0x34e>
    4738:	e0df      	b.n	48fa <__aeabi_dadd+0x50e>
    473a:	2e1f      	cmp	r6, #31
    473c:	dd00      	ble.n	4740 <__aeabi_dadd+0x354>
    473e:	e143      	b.n	49c8 <__aeabi_dadd+0x5dc>
    4740:	2720      	movs	r7, #32
    4742:	1bbc      	subs	r4, r7, r6
    4744:	46a1      	mov	r9, r4
    4746:	000c      	movs	r4, r1
    4748:	464f      	mov	r7, r9
    474a:	40bc      	lsls	r4, r7
    474c:	46a0      	mov	r8, r4
    474e:	002c      	movs	r4, r5
    4750:	4647      	mov	r7, r8
    4752:	40f4      	lsrs	r4, r6
    4754:	433c      	orrs	r4, r7
    4756:	464f      	mov	r7, r9
    4758:	40bd      	lsls	r5, r7
    475a:	1e6f      	subs	r7, r5, #1
    475c:	41bd      	sbcs	r5, r7
    475e:	40f1      	lsrs	r1, r6
    4760:	432c      	orrs	r4, r5
    4762:	1b15      	subs	r5, r2, r4
    4764:	42aa      	cmp	r2, r5
    4766:	4192      	sbcs	r2, r2
    4768:	1a41      	subs	r1, r0, r1
    476a:	4252      	negs	r2, r2
    476c:	1a89      	subs	r1, r1, r2
    476e:	4664      	mov	r4, ip
    4770:	469a      	mov	sl, r3
    4772:	e6bf      	b.n	44f4 <__aeabi_dadd+0x108>
    4774:	4641      	mov	r1, r8
    4776:	4645      	mov	r5, r8
    4778:	4331      	orrs	r1, r6
    477a:	d000      	beq.n	477e <__aeabi_dadd+0x392>
    477c:	e6be      	b.n	44fc <__aeabi_dadd+0x110>
    477e:	2600      	movs	r6, #0
    4780:	2400      	movs	r4, #0
    4782:	2500      	movs	r5, #0
    4784:	e6f2      	b.n	456c <__aeabi_dadd+0x180>
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	000007ff 	.word	0x000007ff
    478c:	ff7fffff 	.word	0xff7fffff
    4790:	800fffff 	.word	0x800fffff
    4794:	2b1f      	cmp	r3, #31
    4796:	dc59      	bgt.n	484c <__aeabi_dadd+0x460>
    4798:	2720      	movs	r7, #32
    479a:	1aff      	subs	r7, r7, r3
    479c:	46bc      	mov	ip, r7
    479e:	0007      	movs	r7, r0
    47a0:	4663      	mov	r3, ip
    47a2:	409f      	lsls	r7, r3
    47a4:	465b      	mov	r3, fp
    47a6:	46b9      	mov	r9, r7
    47a8:	0017      	movs	r7, r2
    47aa:	40df      	lsrs	r7, r3
    47ac:	46b8      	mov	r8, r7
    47ae:	464f      	mov	r7, r9
    47b0:	4643      	mov	r3, r8
    47b2:	431f      	orrs	r7, r3
    47b4:	4663      	mov	r3, ip
    47b6:	409a      	lsls	r2, r3
    47b8:	1e53      	subs	r3, r2, #1
    47ba:	419a      	sbcs	r2, r3
    47bc:	465b      	mov	r3, fp
    47be:	433a      	orrs	r2, r7
    47c0:	40d8      	lsrs	r0, r3
    47c2:	e6f4      	b.n	45ae <__aeabi_dadd+0x1c2>
    47c4:	000c      	movs	r4, r1
    47c6:	432c      	orrs	r4, r5
    47c8:	d05c      	beq.n	4884 <__aeabi_dadd+0x498>
    47ca:	43f6      	mvns	r6, r6
    47cc:	2e00      	cmp	r6, #0
    47ce:	d155      	bne.n	487c <__aeabi_dadd+0x490>
    47d0:	1b55      	subs	r5, r2, r5
    47d2:	42aa      	cmp	r2, r5
    47d4:	41a4      	sbcs	r4, r4
    47d6:	1a41      	subs	r1, r0, r1
    47d8:	4264      	negs	r4, r4
    47da:	1b09      	subs	r1, r1, r4
    47dc:	469a      	mov	sl, r3
    47de:	4664      	mov	r4, ip
    47e0:	e688      	b.n	44f4 <__aeabi_dadd+0x108>
    47e2:	4f96      	ldr	r7, [pc, #600]	; (4a3c <__aeabi_dadd+0x650>)
    47e4:	42bc      	cmp	r4, r7
    47e6:	d000      	beq.n	47ea <__aeabi_dadd+0x3fe>
    47e8:	e6d8      	b.n	459c <__aeabi_dadd+0x1b0>
    47ea:	e628      	b.n	443e <__aeabi_dadd+0x52>
    47ec:	2200      	movs	r2, #0
    47ee:	e780      	b.n	46f2 <__aeabi_dadd+0x306>
    47f0:	2000      	movs	r0, #0
    47f2:	e78f      	b.n	4714 <__aeabi_dadd+0x328>
    47f4:	000b      	movs	r3, r1
    47f6:	432b      	orrs	r3, r5
    47f8:	2c00      	cmp	r4, #0
    47fa:	d000      	beq.n	47fe <__aeabi_dadd+0x412>
    47fc:	e0c2      	b.n	4984 <__aeabi_dadd+0x598>
    47fe:	2b00      	cmp	r3, #0
    4800:	d100      	bne.n	4804 <__aeabi_dadd+0x418>
    4802:	e101      	b.n	4a08 <__aeabi_dadd+0x61c>
    4804:	0003      	movs	r3, r0
    4806:	4313      	orrs	r3, r2
    4808:	d100      	bne.n	480c <__aeabi_dadd+0x420>
    480a:	e618      	b.n	443e <__aeabi_dadd+0x52>
    480c:	18ab      	adds	r3, r5, r2
    480e:	42ab      	cmp	r3, r5
    4810:	41b6      	sbcs	r6, r6
    4812:	1809      	adds	r1, r1, r0
    4814:	4276      	negs	r6, r6
    4816:	1871      	adds	r1, r6, r1
    4818:	020a      	lsls	r2, r1, #8
    481a:	d400      	bmi.n	481e <__aeabi_dadd+0x432>
    481c:	e109      	b.n	4a32 <__aeabi_dadd+0x646>
    481e:	4a88      	ldr	r2, [pc, #544]	; (4a40 <__aeabi_dadd+0x654>)
    4820:	001d      	movs	r5, r3
    4822:	4011      	ands	r1, r2
    4824:	4664      	mov	r4, ip
    4826:	e60a      	b.n	443e <__aeabi_dadd+0x52>
    4828:	2c00      	cmp	r4, #0
    482a:	d15b      	bne.n	48e4 <__aeabi_dadd+0x4f8>
    482c:	000e      	movs	r6, r1
    482e:	432e      	orrs	r6, r5
    4830:	d000      	beq.n	4834 <__aeabi_dadd+0x448>
    4832:	e08a      	b.n	494a <__aeabi_dadd+0x55e>
    4834:	0001      	movs	r1, r0
    4836:	4311      	orrs	r1, r2
    4838:	d100      	bne.n	483c <__aeabi_dadd+0x450>
    483a:	e0c2      	b.n	49c2 <__aeabi_dadd+0x5d6>
    483c:	0001      	movs	r1, r0
    483e:	0015      	movs	r5, r2
    4840:	469a      	mov	sl, r3
    4842:	e5fc      	b.n	443e <__aeabi_dadd+0x52>
    4844:	4664      	mov	r4, ip
    4846:	2100      	movs	r1, #0
    4848:	2500      	movs	r5, #0
    484a:	e68f      	b.n	456c <__aeabi_dadd+0x180>
    484c:	2320      	movs	r3, #32
    484e:	425b      	negs	r3, r3
    4850:	469c      	mov	ip, r3
    4852:	44dc      	add	ip, fp
    4854:	4663      	mov	r3, ip
    4856:	0007      	movs	r7, r0
    4858:	40df      	lsrs	r7, r3
    485a:	465b      	mov	r3, fp
    485c:	46bc      	mov	ip, r7
    485e:	2b20      	cmp	r3, #32
    4860:	d100      	bne.n	4864 <__aeabi_dadd+0x478>
    4862:	e0ac      	b.n	49be <__aeabi_dadd+0x5d2>
    4864:	2340      	movs	r3, #64	; 0x40
    4866:	465f      	mov	r7, fp
    4868:	1bdb      	subs	r3, r3, r7
    486a:	4098      	lsls	r0, r3
    486c:	4302      	orrs	r2, r0
    486e:	1e50      	subs	r0, r2, #1
    4870:	4182      	sbcs	r2, r0
    4872:	4663      	mov	r3, ip
    4874:	4313      	orrs	r3, r2
    4876:	001a      	movs	r2, r3
    4878:	2000      	movs	r0, #0
    487a:	e698      	b.n	45ae <__aeabi_dadd+0x1c2>
    487c:	4c6f      	ldr	r4, [pc, #444]	; (4a3c <__aeabi_dadd+0x650>)
    487e:	45a4      	cmp	ip, r4
    4880:	d000      	beq.n	4884 <__aeabi_dadd+0x498>
    4882:	e757      	b.n	4734 <__aeabi_dadd+0x348>
    4884:	0001      	movs	r1, r0
    4886:	0015      	movs	r5, r2
    4888:	4664      	mov	r4, ip
    488a:	469a      	mov	sl, r3
    488c:	e5d7      	b.n	443e <__aeabi_dadd+0x52>
    488e:	2c00      	cmp	r4, #0
    4890:	d139      	bne.n	4906 <__aeabi_dadd+0x51a>
    4892:	000c      	movs	r4, r1
    4894:	432c      	orrs	r4, r5
    4896:	d06e      	beq.n	4976 <__aeabi_dadd+0x58a>
    4898:	43db      	mvns	r3, r3
    489a:	2b00      	cmp	r3, #0
    489c:	d01a      	beq.n	48d4 <__aeabi_dadd+0x4e8>
    489e:	4c67      	ldr	r4, [pc, #412]	; (4a3c <__aeabi_dadd+0x650>)
    48a0:	45a4      	cmp	ip, r4
    48a2:	d068      	beq.n	4976 <__aeabi_dadd+0x58a>
    48a4:	2b38      	cmp	r3, #56	; 0x38
    48a6:	dd00      	ble.n	48aa <__aeabi_dadd+0x4be>
    48a8:	e0a4      	b.n	49f4 <__aeabi_dadd+0x608>
    48aa:	2b1f      	cmp	r3, #31
    48ac:	dd00      	ble.n	48b0 <__aeabi_dadd+0x4c4>
    48ae:	e0ae      	b.n	4a0e <__aeabi_dadd+0x622>
    48b0:	2420      	movs	r4, #32
    48b2:	000f      	movs	r7, r1
    48b4:	1ae4      	subs	r4, r4, r3
    48b6:	40a7      	lsls	r7, r4
    48b8:	46b9      	mov	r9, r7
    48ba:	002f      	movs	r7, r5
    48bc:	40df      	lsrs	r7, r3
    48be:	46b8      	mov	r8, r7
    48c0:	46a3      	mov	fp, r4
    48c2:	464f      	mov	r7, r9
    48c4:	4644      	mov	r4, r8
    48c6:	4327      	orrs	r7, r4
    48c8:	465c      	mov	r4, fp
    48ca:	40a5      	lsls	r5, r4
    48cc:	1e6c      	subs	r4, r5, #1
    48ce:	41a5      	sbcs	r5, r4
    48d0:	40d9      	lsrs	r1, r3
    48d2:	433d      	orrs	r5, r7
    48d4:	18ad      	adds	r5, r5, r2
    48d6:	4295      	cmp	r5, r2
    48d8:	419b      	sbcs	r3, r3
    48da:	1809      	adds	r1, r1, r0
    48dc:	425b      	negs	r3, r3
    48de:	1859      	adds	r1, r3, r1
    48e0:	4664      	mov	r4, ip
    48e2:	e66b      	b.n	45bc <__aeabi_dadd+0x1d0>
    48e4:	000c      	movs	r4, r1
    48e6:	432c      	orrs	r4, r5
    48e8:	d115      	bne.n	4916 <__aeabi_dadd+0x52a>
    48ea:	0001      	movs	r1, r0
    48ec:	4311      	orrs	r1, r2
    48ee:	d07b      	beq.n	49e8 <__aeabi_dadd+0x5fc>
    48f0:	0001      	movs	r1, r0
    48f2:	0015      	movs	r5, r2
    48f4:	469a      	mov	sl, r3
    48f6:	4c51      	ldr	r4, [pc, #324]	; (4a3c <__aeabi_dadd+0x650>)
    48f8:	e5a1      	b.n	443e <__aeabi_dadd+0x52>
    48fa:	430d      	orrs	r5, r1
    48fc:	1e69      	subs	r1, r5, #1
    48fe:	418d      	sbcs	r5, r1
    4900:	2100      	movs	r1, #0
    4902:	b2ec      	uxtb	r4, r5
    4904:	e72d      	b.n	4762 <__aeabi_dadd+0x376>
    4906:	4c4d      	ldr	r4, [pc, #308]	; (4a3c <__aeabi_dadd+0x650>)
    4908:	45a4      	cmp	ip, r4
    490a:	d034      	beq.n	4976 <__aeabi_dadd+0x58a>
    490c:	2480      	movs	r4, #128	; 0x80
    490e:	0424      	lsls	r4, r4, #16
    4910:	425b      	negs	r3, r3
    4912:	4321      	orrs	r1, r4
    4914:	e7c6      	b.n	48a4 <__aeabi_dadd+0x4b8>
    4916:	0004      	movs	r4, r0
    4918:	4314      	orrs	r4, r2
    491a:	d04e      	beq.n	49ba <__aeabi_dadd+0x5ce>
    491c:	08ed      	lsrs	r5, r5, #3
    491e:	074c      	lsls	r4, r1, #29
    4920:	432c      	orrs	r4, r5
    4922:	2580      	movs	r5, #128	; 0x80
    4924:	08c9      	lsrs	r1, r1, #3
    4926:	032d      	lsls	r5, r5, #12
    4928:	4229      	tst	r1, r5
    492a:	d008      	beq.n	493e <__aeabi_dadd+0x552>
    492c:	08c6      	lsrs	r6, r0, #3
    492e:	422e      	tst	r6, r5
    4930:	d105      	bne.n	493e <__aeabi_dadd+0x552>
    4932:	08d2      	lsrs	r2, r2, #3
    4934:	0741      	lsls	r1, r0, #29
    4936:	4311      	orrs	r1, r2
    4938:	000c      	movs	r4, r1
    493a:	469a      	mov	sl, r3
    493c:	0031      	movs	r1, r6
    493e:	0f62      	lsrs	r2, r4, #29
    4940:	00c9      	lsls	r1, r1, #3
    4942:	00e5      	lsls	r5, r4, #3
    4944:	4311      	orrs	r1, r2
    4946:	4c3d      	ldr	r4, [pc, #244]	; (4a3c <__aeabi_dadd+0x650>)
    4948:	e579      	b.n	443e <__aeabi_dadd+0x52>
    494a:	0006      	movs	r6, r0
    494c:	4316      	orrs	r6, r2
    494e:	d100      	bne.n	4952 <__aeabi_dadd+0x566>
    4950:	e575      	b.n	443e <__aeabi_dadd+0x52>
    4952:	1aae      	subs	r6, r5, r2
    4954:	46b0      	mov	r8, r6
    4956:	4545      	cmp	r5, r8
    4958:	41bf      	sbcs	r7, r7
    495a:	1a0e      	subs	r6, r1, r0
    495c:	427f      	negs	r7, r7
    495e:	1bf6      	subs	r6, r6, r7
    4960:	0237      	lsls	r7, r6, #8
    4962:	d400      	bmi.n	4966 <__aeabi_dadd+0x57a>
    4964:	e5f4      	b.n	4550 <__aeabi_dadd+0x164>
    4966:	1b55      	subs	r5, r2, r5
    4968:	42aa      	cmp	r2, r5
    496a:	41b6      	sbcs	r6, r6
    496c:	1a41      	subs	r1, r0, r1
    496e:	4276      	negs	r6, r6
    4970:	1b89      	subs	r1, r1, r6
    4972:	469a      	mov	sl, r3
    4974:	e563      	b.n	443e <__aeabi_dadd+0x52>
    4976:	0001      	movs	r1, r0
    4978:	0015      	movs	r5, r2
    497a:	4664      	mov	r4, ip
    497c:	e55f      	b.n	443e <__aeabi_dadd+0x52>
    497e:	2200      	movs	r2, #0
    4980:	2500      	movs	r5, #0
    4982:	e57b      	b.n	447c <__aeabi_dadd+0x90>
    4984:	2b00      	cmp	r3, #0
    4986:	d03b      	beq.n	4a00 <__aeabi_dadd+0x614>
    4988:	0003      	movs	r3, r0
    498a:	4313      	orrs	r3, r2
    498c:	d015      	beq.n	49ba <__aeabi_dadd+0x5ce>
    498e:	08ed      	lsrs	r5, r5, #3
    4990:	074b      	lsls	r3, r1, #29
    4992:	432b      	orrs	r3, r5
    4994:	2580      	movs	r5, #128	; 0x80
    4996:	08c9      	lsrs	r1, r1, #3
    4998:	032d      	lsls	r5, r5, #12
    499a:	4229      	tst	r1, r5
    499c:	d007      	beq.n	49ae <__aeabi_dadd+0x5c2>
    499e:	08c4      	lsrs	r4, r0, #3
    49a0:	422c      	tst	r4, r5
    49a2:	d104      	bne.n	49ae <__aeabi_dadd+0x5c2>
    49a4:	0741      	lsls	r1, r0, #29
    49a6:	000b      	movs	r3, r1
    49a8:	0021      	movs	r1, r4
    49aa:	08d2      	lsrs	r2, r2, #3
    49ac:	4313      	orrs	r3, r2
    49ae:	00c9      	lsls	r1, r1, #3
    49b0:	0f5a      	lsrs	r2, r3, #29
    49b2:	4311      	orrs	r1, r2
    49b4:	00dd      	lsls	r5, r3, #3
    49b6:	4c21      	ldr	r4, [pc, #132]	; (4a3c <__aeabi_dadd+0x650>)
    49b8:	e541      	b.n	443e <__aeabi_dadd+0x52>
    49ba:	4c20      	ldr	r4, [pc, #128]	; (4a3c <__aeabi_dadd+0x650>)
    49bc:	e53f      	b.n	443e <__aeabi_dadd+0x52>
    49be:	2000      	movs	r0, #0
    49c0:	e754      	b.n	486c <__aeabi_dadd+0x480>
    49c2:	2600      	movs	r6, #0
    49c4:	2500      	movs	r5, #0
    49c6:	e5d1      	b.n	456c <__aeabi_dadd+0x180>
    49c8:	0034      	movs	r4, r6
    49ca:	000f      	movs	r7, r1
    49cc:	3c20      	subs	r4, #32
    49ce:	40e7      	lsrs	r7, r4
    49d0:	003c      	movs	r4, r7
    49d2:	2e20      	cmp	r6, #32
    49d4:	d02b      	beq.n	4a2e <__aeabi_dadd+0x642>
    49d6:	2740      	movs	r7, #64	; 0x40
    49d8:	1bbe      	subs	r6, r7, r6
    49da:	40b1      	lsls	r1, r6
    49dc:	430d      	orrs	r5, r1
    49de:	1e69      	subs	r1, r5, #1
    49e0:	418d      	sbcs	r5, r1
    49e2:	2100      	movs	r1, #0
    49e4:	432c      	orrs	r4, r5
    49e6:	e6bc      	b.n	4762 <__aeabi_dadd+0x376>
    49e8:	2180      	movs	r1, #128	; 0x80
    49ea:	2600      	movs	r6, #0
    49ec:	0309      	lsls	r1, r1, #12
    49ee:	4c13      	ldr	r4, [pc, #76]	; (4a3c <__aeabi_dadd+0x650>)
    49f0:	2500      	movs	r5, #0
    49f2:	e5bb      	b.n	456c <__aeabi_dadd+0x180>
    49f4:	430d      	orrs	r5, r1
    49f6:	1e69      	subs	r1, r5, #1
    49f8:	418d      	sbcs	r5, r1
    49fa:	2100      	movs	r1, #0
    49fc:	b2ed      	uxtb	r5, r5
    49fe:	e769      	b.n	48d4 <__aeabi_dadd+0x4e8>
    4a00:	0001      	movs	r1, r0
    4a02:	0015      	movs	r5, r2
    4a04:	4c0d      	ldr	r4, [pc, #52]	; (4a3c <__aeabi_dadd+0x650>)
    4a06:	e51a      	b.n	443e <__aeabi_dadd+0x52>
    4a08:	0001      	movs	r1, r0
    4a0a:	0015      	movs	r5, r2
    4a0c:	e517      	b.n	443e <__aeabi_dadd+0x52>
    4a0e:	001c      	movs	r4, r3
    4a10:	000f      	movs	r7, r1
    4a12:	3c20      	subs	r4, #32
    4a14:	40e7      	lsrs	r7, r4
    4a16:	003c      	movs	r4, r7
    4a18:	2b20      	cmp	r3, #32
    4a1a:	d00c      	beq.n	4a36 <__aeabi_dadd+0x64a>
    4a1c:	2740      	movs	r7, #64	; 0x40
    4a1e:	1afb      	subs	r3, r7, r3
    4a20:	4099      	lsls	r1, r3
    4a22:	430d      	orrs	r5, r1
    4a24:	1e69      	subs	r1, r5, #1
    4a26:	418d      	sbcs	r5, r1
    4a28:	2100      	movs	r1, #0
    4a2a:	4325      	orrs	r5, r4
    4a2c:	e752      	b.n	48d4 <__aeabi_dadd+0x4e8>
    4a2e:	2100      	movs	r1, #0
    4a30:	e7d4      	b.n	49dc <__aeabi_dadd+0x5f0>
    4a32:	001d      	movs	r5, r3
    4a34:	e592      	b.n	455c <__aeabi_dadd+0x170>
    4a36:	2100      	movs	r1, #0
    4a38:	e7f3      	b.n	4a22 <__aeabi_dadd+0x636>
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	000007ff 	.word	0x000007ff
    4a40:	ff7fffff 	.word	0xff7fffff

00004a44 <__aeabi_ddiv>:
    4a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a46:	4656      	mov	r6, sl
    4a48:	464d      	mov	r5, r9
    4a4a:	4644      	mov	r4, r8
    4a4c:	465f      	mov	r7, fp
    4a4e:	b4f0      	push	{r4, r5, r6, r7}
    4a50:	001d      	movs	r5, r3
    4a52:	030e      	lsls	r6, r1, #12
    4a54:	004c      	lsls	r4, r1, #1
    4a56:	0fcb      	lsrs	r3, r1, #31
    4a58:	b087      	sub	sp, #28
    4a5a:	0007      	movs	r7, r0
    4a5c:	4692      	mov	sl, r2
    4a5e:	4681      	mov	r9, r0
    4a60:	0b36      	lsrs	r6, r6, #12
    4a62:	0d64      	lsrs	r4, r4, #21
    4a64:	4698      	mov	r8, r3
    4a66:	d06a      	beq.n	4b3e <__aeabi_ddiv+0xfa>
    4a68:	4b6d      	ldr	r3, [pc, #436]	; (4c20 <__aeabi_ddiv+0x1dc>)
    4a6a:	429c      	cmp	r4, r3
    4a6c:	d035      	beq.n	4ada <__aeabi_ddiv+0x96>
    4a6e:	2280      	movs	r2, #128	; 0x80
    4a70:	0f43      	lsrs	r3, r0, #29
    4a72:	0412      	lsls	r2, r2, #16
    4a74:	4313      	orrs	r3, r2
    4a76:	00f6      	lsls	r6, r6, #3
    4a78:	431e      	orrs	r6, r3
    4a7a:	00c3      	lsls	r3, r0, #3
    4a7c:	4699      	mov	r9, r3
    4a7e:	4b69      	ldr	r3, [pc, #420]	; (4c24 <__aeabi_ddiv+0x1e0>)
    4a80:	2700      	movs	r7, #0
    4a82:	469c      	mov	ip, r3
    4a84:	2300      	movs	r3, #0
    4a86:	4464      	add	r4, ip
    4a88:	9302      	str	r3, [sp, #8]
    4a8a:	032b      	lsls	r3, r5, #12
    4a8c:	0068      	lsls	r0, r5, #1
    4a8e:	0b1b      	lsrs	r3, r3, #12
    4a90:	0fed      	lsrs	r5, r5, #31
    4a92:	4651      	mov	r1, sl
    4a94:	469b      	mov	fp, r3
    4a96:	0d40      	lsrs	r0, r0, #21
    4a98:	9500      	str	r5, [sp, #0]
    4a9a:	d100      	bne.n	4a9e <__aeabi_ddiv+0x5a>
    4a9c:	e078      	b.n	4b90 <__aeabi_ddiv+0x14c>
    4a9e:	4b60      	ldr	r3, [pc, #384]	; (4c20 <__aeabi_ddiv+0x1dc>)
    4aa0:	4298      	cmp	r0, r3
    4aa2:	d06c      	beq.n	4b7e <__aeabi_ddiv+0x13a>
    4aa4:	465b      	mov	r3, fp
    4aa6:	00da      	lsls	r2, r3, #3
    4aa8:	0f4b      	lsrs	r3, r1, #29
    4aaa:	2180      	movs	r1, #128	; 0x80
    4aac:	0409      	lsls	r1, r1, #16
    4aae:	430b      	orrs	r3, r1
    4ab0:	4313      	orrs	r3, r2
    4ab2:	469b      	mov	fp, r3
    4ab4:	4653      	mov	r3, sl
    4ab6:	00d9      	lsls	r1, r3, #3
    4ab8:	4b5a      	ldr	r3, [pc, #360]	; (4c24 <__aeabi_ddiv+0x1e0>)
    4aba:	469c      	mov	ip, r3
    4abc:	2300      	movs	r3, #0
    4abe:	4460      	add	r0, ip
    4ac0:	4642      	mov	r2, r8
    4ac2:	1a20      	subs	r0, r4, r0
    4ac4:	406a      	eors	r2, r5
    4ac6:	4692      	mov	sl, r2
    4ac8:	9001      	str	r0, [sp, #4]
    4aca:	431f      	orrs	r7, r3
    4acc:	2f0f      	cmp	r7, #15
    4ace:	d900      	bls.n	4ad2 <__aeabi_ddiv+0x8e>
    4ad0:	e0b0      	b.n	4c34 <__aeabi_ddiv+0x1f0>
    4ad2:	4855      	ldr	r0, [pc, #340]	; (4c28 <__aeabi_ddiv+0x1e4>)
    4ad4:	00bf      	lsls	r7, r7, #2
    4ad6:	59c0      	ldr	r0, [r0, r7]
    4ad8:	4687      	mov	pc, r0
    4ada:	4337      	orrs	r7, r6
    4adc:	d000      	beq.n	4ae0 <__aeabi_ddiv+0x9c>
    4ade:	e088      	b.n	4bf2 <__aeabi_ddiv+0x1ae>
    4ae0:	2300      	movs	r3, #0
    4ae2:	4699      	mov	r9, r3
    4ae4:	3302      	adds	r3, #2
    4ae6:	2708      	movs	r7, #8
    4ae8:	2600      	movs	r6, #0
    4aea:	9302      	str	r3, [sp, #8]
    4aec:	e7cd      	b.n	4a8a <__aeabi_ddiv+0x46>
    4aee:	4643      	mov	r3, r8
    4af0:	46b3      	mov	fp, r6
    4af2:	4649      	mov	r1, r9
    4af4:	9300      	str	r3, [sp, #0]
    4af6:	9b02      	ldr	r3, [sp, #8]
    4af8:	9a00      	ldr	r2, [sp, #0]
    4afa:	4692      	mov	sl, r2
    4afc:	2b02      	cmp	r3, #2
    4afe:	d000      	beq.n	4b02 <__aeabi_ddiv+0xbe>
    4b00:	e1bf      	b.n	4e82 <__aeabi_ddiv+0x43e>
    4b02:	2100      	movs	r1, #0
    4b04:	4653      	mov	r3, sl
    4b06:	2201      	movs	r2, #1
    4b08:	2600      	movs	r6, #0
    4b0a:	4689      	mov	r9, r1
    4b0c:	401a      	ands	r2, r3
    4b0e:	4b44      	ldr	r3, [pc, #272]	; (4c20 <__aeabi_ddiv+0x1dc>)
    4b10:	2100      	movs	r1, #0
    4b12:	0336      	lsls	r6, r6, #12
    4b14:	0d0c      	lsrs	r4, r1, #20
    4b16:	0524      	lsls	r4, r4, #20
    4b18:	0b36      	lsrs	r6, r6, #12
    4b1a:	4326      	orrs	r6, r4
    4b1c:	4c43      	ldr	r4, [pc, #268]	; (4c2c <__aeabi_ddiv+0x1e8>)
    4b1e:	051b      	lsls	r3, r3, #20
    4b20:	4026      	ands	r6, r4
    4b22:	431e      	orrs	r6, r3
    4b24:	0076      	lsls	r6, r6, #1
    4b26:	07d2      	lsls	r2, r2, #31
    4b28:	0876      	lsrs	r6, r6, #1
    4b2a:	4316      	orrs	r6, r2
    4b2c:	4648      	mov	r0, r9
    4b2e:	0031      	movs	r1, r6
    4b30:	b007      	add	sp, #28
    4b32:	bc3c      	pop	{r2, r3, r4, r5}
    4b34:	4690      	mov	r8, r2
    4b36:	4699      	mov	r9, r3
    4b38:	46a2      	mov	sl, r4
    4b3a:	46ab      	mov	fp, r5
    4b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b3e:	0033      	movs	r3, r6
    4b40:	4303      	orrs	r3, r0
    4b42:	d04f      	beq.n	4be4 <__aeabi_ddiv+0x1a0>
    4b44:	2e00      	cmp	r6, #0
    4b46:	d100      	bne.n	4b4a <__aeabi_ddiv+0x106>
    4b48:	e1bc      	b.n	4ec4 <__aeabi_ddiv+0x480>
    4b4a:	0030      	movs	r0, r6
    4b4c:	f001 fba8 	bl	62a0 <__clzsi2>
    4b50:	0003      	movs	r3, r0
    4b52:	3b0b      	subs	r3, #11
    4b54:	2b1c      	cmp	r3, #28
    4b56:	dd00      	ble.n	4b5a <__aeabi_ddiv+0x116>
    4b58:	e1ad      	b.n	4eb6 <__aeabi_ddiv+0x472>
    4b5a:	221d      	movs	r2, #29
    4b5c:	0001      	movs	r1, r0
    4b5e:	1ad3      	subs	r3, r2, r3
    4b60:	3908      	subs	r1, #8
    4b62:	003a      	movs	r2, r7
    4b64:	408f      	lsls	r7, r1
    4b66:	408e      	lsls	r6, r1
    4b68:	40da      	lsrs	r2, r3
    4b6a:	46b9      	mov	r9, r7
    4b6c:	4316      	orrs	r6, r2
    4b6e:	4b30      	ldr	r3, [pc, #192]	; (4c30 <__aeabi_ddiv+0x1ec>)
    4b70:	2700      	movs	r7, #0
    4b72:	469c      	mov	ip, r3
    4b74:	2300      	movs	r3, #0
    4b76:	4460      	add	r0, ip
    4b78:	4244      	negs	r4, r0
    4b7a:	9302      	str	r3, [sp, #8]
    4b7c:	e785      	b.n	4a8a <__aeabi_ddiv+0x46>
    4b7e:	4653      	mov	r3, sl
    4b80:	465a      	mov	r2, fp
    4b82:	4313      	orrs	r3, r2
    4b84:	d12c      	bne.n	4be0 <__aeabi_ddiv+0x19c>
    4b86:	2300      	movs	r3, #0
    4b88:	2100      	movs	r1, #0
    4b8a:	469b      	mov	fp, r3
    4b8c:	3302      	adds	r3, #2
    4b8e:	e797      	b.n	4ac0 <__aeabi_ddiv+0x7c>
    4b90:	430b      	orrs	r3, r1
    4b92:	d020      	beq.n	4bd6 <__aeabi_ddiv+0x192>
    4b94:	465b      	mov	r3, fp
    4b96:	2b00      	cmp	r3, #0
    4b98:	d100      	bne.n	4b9c <__aeabi_ddiv+0x158>
    4b9a:	e19e      	b.n	4eda <__aeabi_ddiv+0x496>
    4b9c:	4658      	mov	r0, fp
    4b9e:	f001 fb7f 	bl	62a0 <__clzsi2>
    4ba2:	0003      	movs	r3, r0
    4ba4:	3b0b      	subs	r3, #11
    4ba6:	2b1c      	cmp	r3, #28
    4ba8:	dd00      	ble.n	4bac <__aeabi_ddiv+0x168>
    4baa:	e18f      	b.n	4ecc <__aeabi_ddiv+0x488>
    4bac:	0002      	movs	r2, r0
    4bae:	4659      	mov	r1, fp
    4bb0:	3a08      	subs	r2, #8
    4bb2:	4091      	lsls	r1, r2
    4bb4:	468b      	mov	fp, r1
    4bb6:	211d      	movs	r1, #29
    4bb8:	1acb      	subs	r3, r1, r3
    4bba:	4651      	mov	r1, sl
    4bbc:	40d9      	lsrs	r1, r3
    4bbe:	000b      	movs	r3, r1
    4bc0:	4659      	mov	r1, fp
    4bc2:	430b      	orrs	r3, r1
    4bc4:	4651      	mov	r1, sl
    4bc6:	469b      	mov	fp, r3
    4bc8:	4091      	lsls	r1, r2
    4bca:	4b19      	ldr	r3, [pc, #100]	; (4c30 <__aeabi_ddiv+0x1ec>)
    4bcc:	469c      	mov	ip, r3
    4bce:	4460      	add	r0, ip
    4bd0:	4240      	negs	r0, r0
    4bd2:	2300      	movs	r3, #0
    4bd4:	e774      	b.n	4ac0 <__aeabi_ddiv+0x7c>
    4bd6:	2300      	movs	r3, #0
    4bd8:	2100      	movs	r1, #0
    4bda:	469b      	mov	fp, r3
    4bdc:	3301      	adds	r3, #1
    4bde:	e76f      	b.n	4ac0 <__aeabi_ddiv+0x7c>
    4be0:	2303      	movs	r3, #3
    4be2:	e76d      	b.n	4ac0 <__aeabi_ddiv+0x7c>
    4be4:	2300      	movs	r3, #0
    4be6:	4699      	mov	r9, r3
    4be8:	3301      	adds	r3, #1
    4bea:	2704      	movs	r7, #4
    4bec:	2600      	movs	r6, #0
    4bee:	9302      	str	r3, [sp, #8]
    4bf0:	e74b      	b.n	4a8a <__aeabi_ddiv+0x46>
    4bf2:	2303      	movs	r3, #3
    4bf4:	270c      	movs	r7, #12
    4bf6:	9302      	str	r3, [sp, #8]
    4bf8:	e747      	b.n	4a8a <__aeabi_ddiv+0x46>
    4bfa:	2201      	movs	r2, #1
    4bfc:	1ad5      	subs	r5, r2, r3
    4bfe:	2d38      	cmp	r5, #56	; 0x38
    4c00:	dc00      	bgt.n	4c04 <__aeabi_ddiv+0x1c0>
    4c02:	e1b0      	b.n	4f66 <__aeabi_ddiv+0x522>
    4c04:	4653      	mov	r3, sl
    4c06:	401a      	ands	r2, r3
    4c08:	2100      	movs	r1, #0
    4c0a:	2300      	movs	r3, #0
    4c0c:	2600      	movs	r6, #0
    4c0e:	4689      	mov	r9, r1
    4c10:	e77e      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4c12:	2300      	movs	r3, #0
    4c14:	2680      	movs	r6, #128	; 0x80
    4c16:	4699      	mov	r9, r3
    4c18:	2200      	movs	r2, #0
    4c1a:	0336      	lsls	r6, r6, #12
    4c1c:	4b00      	ldr	r3, [pc, #0]	; (4c20 <__aeabi_ddiv+0x1dc>)
    4c1e:	e777      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4c20:	000007ff 	.word	0x000007ff
    4c24:	fffffc01 	.word	0xfffffc01
    4c28:	000066b0 	.word	0x000066b0
    4c2c:	800fffff 	.word	0x800fffff
    4c30:	000003f3 	.word	0x000003f3
    4c34:	455e      	cmp	r6, fp
    4c36:	d900      	bls.n	4c3a <__aeabi_ddiv+0x1f6>
    4c38:	e172      	b.n	4f20 <__aeabi_ddiv+0x4dc>
    4c3a:	d100      	bne.n	4c3e <__aeabi_ddiv+0x1fa>
    4c3c:	e16d      	b.n	4f1a <__aeabi_ddiv+0x4d6>
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	464d      	mov	r5, r9
    4c42:	3b01      	subs	r3, #1
    4c44:	9301      	str	r3, [sp, #4]
    4c46:	2300      	movs	r3, #0
    4c48:	0034      	movs	r4, r6
    4c4a:	9302      	str	r3, [sp, #8]
    4c4c:	465b      	mov	r3, fp
    4c4e:	021e      	lsls	r6, r3, #8
    4c50:	0e0b      	lsrs	r3, r1, #24
    4c52:	431e      	orrs	r6, r3
    4c54:	020b      	lsls	r3, r1, #8
    4c56:	9303      	str	r3, [sp, #12]
    4c58:	0c33      	lsrs	r3, r6, #16
    4c5a:	4699      	mov	r9, r3
    4c5c:	0433      	lsls	r3, r6, #16
    4c5e:	0c1b      	lsrs	r3, r3, #16
    4c60:	4649      	mov	r1, r9
    4c62:	0020      	movs	r0, r4
    4c64:	9300      	str	r3, [sp, #0]
    4c66:	f001 fa8f 	bl	6188 <__aeabi_uidiv>
    4c6a:	9b00      	ldr	r3, [sp, #0]
    4c6c:	0037      	movs	r7, r6
    4c6e:	4343      	muls	r3, r0
    4c70:	0006      	movs	r6, r0
    4c72:	4649      	mov	r1, r9
    4c74:	0020      	movs	r0, r4
    4c76:	4698      	mov	r8, r3
    4c78:	f001 fb0c 	bl	6294 <__aeabi_uidivmod>
    4c7c:	0c2c      	lsrs	r4, r5, #16
    4c7e:	0409      	lsls	r1, r1, #16
    4c80:	430c      	orrs	r4, r1
    4c82:	45a0      	cmp	r8, r4
    4c84:	d909      	bls.n	4c9a <__aeabi_ddiv+0x256>
    4c86:	19e4      	adds	r4, r4, r7
    4c88:	1e73      	subs	r3, r6, #1
    4c8a:	42a7      	cmp	r7, r4
    4c8c:	d900      	bls.n	4c90 <__aeabi_ddiv+0x24c>
    4c8e:	e15c      	b.n	4f4a <__aeabi_ddiv+0x506>
    4c90:	45a0      	cmp	r8, r4
    4c92:	d800      	bhi.n	4c96 <__aeabi_ddiv+0x252>
    4c94:	e159      	b.n	4f4a <__aeabi_ddiv+0x506>
    4c96:	3e02      	subs	r6, #2
    4c98:	19e4      	adds	r4, r4, r7
    4c9a:	4643      	mov	r3, r8
    4c9c:	1ae4      	subs	r4, r4, r3
    4c9e:	4649      	mov	r1, r9
    4ca0:	0020      	movs	r0, r4
    4ca2:	f001 fa71 	bl	6188 <__aeabi_uidiv>
    4ca6:	0003      	movs	r3, r0
    4ca8:	9a00      	ldr	r2, [sp, #0]
    4caa:	4680      	mov	r8, r0
    4cac:	4353      	muls	r3, r2
    4cae:	4649      	mov	r1, r9
    4cb0:	0020      	movs	r0, r4
    4cb2:	469b      	mov	fp, r3
    4cb4:	f001 faee 	bl	6294 <__aeabi_uidivmod>
    4cb8:	042a      	lsls	r2, r5, #16
    4cba:	0409      	lsls	r1, r1, #16
    4cbc:	0c12      	lsrs	r2, r2, #16
    4cbe:	430a      	orrs	r2, r1
    4cc0:	4593      	cmp	fp, r2
    4cc2:	d90d      	bls.n	4ce0 <__aeabi_ddiv+0x29c>
    4cc4:	4643      	mov	r3, r8
    4cc6:	19d2      	adds	r2, r2, r7
    4cc8:	3b01      	subs	r3, #1
    4cca:	4297      	cmp	r7, r2
    4ccc:	d900      	bls.n	4cd0 <__aeabi_ddiv+0x28c>
    4cce:	e13a      	b.n	4f46 <__aeabi_ddiv+0x502>
    4cd0:	4593      	cmp	fp, r2
    4cd2:	d800      	bhi.n	4cd6 <__aeabi_ddiv+0x292>
    4cd4:	e137      	b.n	4f46 <__aeabi_ddiv+0x502>
    4cd6:	2302      	movs	r3, #2
    4cd8:	425b      	negs	r3, r3
    4cda:	469c      	mov	ip, r3
    4cdc:	19d2      	adds	r2, r2, r7
    4cde:	44e0      	add	r8, ip
    4ce0:	465b      	mov	r3, fp
    4ce2:	1ad2      	subs	r2, r2, r3
    4ce4:	4643      	mov	r3, r8
    4ce6:	0436      	lsls	r6, r6, #16
    4ce8:	4333      	orrs	r3, r6
    4cea:	469b      	mov	fp, r3
    4cec:	9903      	ldr	r1, [sp, #12]
    4cee:	0c18      	lsrs	r0, r3, #16
    4cf0:	0c0b      	lsrs	r3, r1, #16
    4cf2:	001d      	movs	r5, r3
    4cf4:	9305      	str	r3, [sp, #20]
    4cf6:	0409      	lsls	r1, r1, #16
    4cf8:	465b      	mov	r3, fp
    4cfa:	0c09      	lsrs	r1, r1, #16
    4cfc:	000c      	movs	r4, r1
    4cfe:	041b      	lsls	r3, r3, #16
    4d00:	0c1b      	lsrs	r3, r3, #16
    4d02:	4344      	muls	r4, r0
    4d04:	9104      	str	r1, [sp, #16]
    4d06:	4359      	muls	r1, r3
    4d08:	436b      	muls	r3, r5
    4d0a:	4368      	muls	r0, r5
    4d0c:	191b      	adds	r3, r3, r4
    4d0e:	0c0d      	lsrs	r5, r1, #16
    4d10:	18eb      	adds	r3, r5, r3
    4d12:	429c      	cmp	r4, r3
    4d14:	d903      	bls.n	4d1e <__aeabi_ddiv+0x2da>
    4d16:	2480      	movs	r4, #128	; 0x80
    4d18:	0264      	lsls	r4, r4, #9
    4d1a:	46a4      	mov	ip, r4
    4d1c:	4460      	add	r0, ip
    4d1e:	0c1c      	lsrs	r4, r3, #16
    4d20:	0409      	lsls	r1, r1, #16
    4d22:	041b      	lsls	r3, r3, #16
    4d24:	0c09      	lsrs	r1, r1, #16
    4d26:	1820      	adds	r0, r4, r0
    4d28:	185d      	adds	r5, r3, r1
    4d2a:	4282      	cmp	r2, r0
    4d2c:	d200      	bcs.n	4d30 <__aeabi_ddiv+0x2ec>
    4d2e:	e0de      	b.n	4eee <__aeabi_ddiv+0x4aa>
    4d30:	d100      	bne.n	4d34 <__aeabi_ddiv+0x2f0>
    4d32:	e0d7      	b.n	4ee4 <__aeabi_ddiv+0x4a0>
    4d34:	1a16      	subs	r6, r2, r0
    4d36:	9b02      	ldr	r3, [sp, #8]
    4d38:	469c      	mov	ip, r3
    4d3a:	1b5d      	subs	r5, r3, r5
    4d3c:	45ac      	cmp	ip, r5
    4d3e:	419b      	sbcs	r3, r3
    4d40:	425b      	negs	r3, r3
    4d42:	1af6      	subs	r6, r6, r3
    4d44:	42b7      	cmp	r7, r6
    4d46:	d100      	bne.n	4d4a <__aeabi_ddiv+0x306>
    4d48:	e106      	b.n	4f58 <__aeabi_ddiv+0x514>
    4d4a:	4649      	mov	r1, r9
    4d4c:	0030      	movs	r0, r6
    4d4e:	f001 fa1b 	bl	6188 <__aeabi_uidiv>
    4d52:	9b00      	ldr	r3, [sp, #0]
    4d54:	0004      	movs	r4, r0
    4d56:	4343      	muls	r3, r0
    4d58:	4649      	mov	r1, r9
    4d5a:	0030      	movs	r0, r6
    4d5c:	4698      	mov	r8, r3
    4d5e:	f001 fa99 	bl	6294 <__aeabi_uidivmod>
    4d62:	0c2e      	lsrs	r6, r5, #16
    4d64:	0409      	lsls	r1, r1, #16
    4d66:	430e      	orrs	r6, r1
    4d68:	45b0      	cmp	r8, r6
    4d6a:	d909      	bls.n	4d80 <__aeabi_ddiv+0x33c>
    4d6c:	19f6      	adds	r6, r6, r7
    4d6e:	1e63      	subs	r3, r4, #1
    4d70:	42b7      	cmp	r7, r6
    4d72:	d900      	bls.n	4d76 <__aeabi_ddiv+0x332>
    4d74:	e0f3      	b.n	4f5e <__aeabi_ddiv+0x51a>
    4d76:	45b0      	cmp	r8, r6
    4d78:	d800      	bhi.n	4d7c <__aeabi_ddiv+0x338>
    4d7a:	e0f0      	b.n	4f5e <__aeabi_ddiv+0x51a>
    4d7c:	3c02      	subs	r4, #2
    4d7e:	19f6      	adds	r6, r6, r7
    4d80:	4643      	mov	r3, r8
    4d82:	1af3      	subs	r3, r6, r3
    4d84:	4649      	mov	r1, r9
    4d86:	0018      	movs	r0, r3
    4d88:	9302      	str	r3, [sp, #8]
    4d8a:	f001 f9fd 	bl	6188 <__aeabi_uidiv>
    4d8e:	9b00      	ldr	r3, [sp, #0]
    4d90:	0006      	movs	r6, r0
    4d92:	4343      	muls	r3, r0
    4d94:	4649      	mov	r1, r9
    4d96:	9802      	ldr	r0, [sp, #8]
    4d98:	4698      	mov	r8, r3
    4d9a:	f001 fa7b 	bl	6294 <__aeabi_uidivmod>
    4d9e:	042d      	lsls	r5, r5, #16
    4da0:	0409      	lsls	r1, r1, #16
    4da2:	0c2d      	lsrs	r5, r5, #16
    4da4:	430d      	orrs	r5, r1
    4da6:	45a8      	cmp	r8, r5
    4da8:	d909      	bls.n	4dbe <__aeabi_ddiv+0x37a>
    4daa:	19ed      	adds	r5, r5, r7
    4dac:	1e73      	subs	r3, r6, #1
    4dae:	42af      	cmp	r7, r5
    4db0:	d900      	bls.n	4db4 <__aeabi_ddiv+0x370>
    4db2:	e0d6      	b.n	4f62 <__aeabi_ddiv+0x51e>
    4db4:	45a8      	cmp	r8, r5
    4db6:	d800      	bhi.n	4dba <__aeabi_ddiv+0x376>
    4db8:	e0d3      	b.n	4f62 <__aeabi_ddiv+0x51e>
    4dba:	3e02      	subs	r6, #2
    4dbc:	19ed      	adds	r5, r5, r7
    4dbe:	0424      	lsls	r4, r4, #16
    4dc0:	0021      	movs	r1, r4
    4dc2:	4643      	mov	r3, r8
    4dc4:	4331      	orrs	r1, r6
    4dc6:	9e04      	ldr	r6, [sp, #16]
    4dc8:	9a05      	ldr	r2, [sp, #20]
    4dca:	0030      	movs	r0, r6
    4dcc:	1aed      	subs	r5, r5, r3
    4dce:	040b      	lsls	r3, r1, #16
    4dd0:	0c0c      	lsrs	r4, r1, #16
    4dd2:	0c1b      	lsrs	r3, r3, #16
    4dd4:	4358      	muls	r0, r3
    4dd6:	4366      	muls	r6, r4
    4dd8:	4353      	muls	r3, r2
    4dda:	4354      	muls	r4, r2
    4ddc:	199a      	adds	r2, r3, r6
    4dde:	0c03      	lsrs	r3, r0, #16
    4de0:	189b      	adds	r3, r3, r2
    4de2:	429e      	cmp	r6, r3
    4de4:	d903      	bls.n	4dee <__aeabi_ddiv+0x3aa>
    4de6:	2280      	movs	r2, #128	; 0x80
    4de8:	0252      	lsls	r2, r2, #9
    4dea:	4694      	mov	ip, r2
    4dec:	4464      	add	r4, ip
    4dee:	0c1a      	lsrs	r2, r3, #16
    4df0:	0400      	lsls	r0, r0, #16
    4df2:	041b      	lsls	r3, r3, #16
    4df4:	0c00      	lsrs	r0, r0, #16
    4df6:	1914      	adds	r4, r2, r4
    4df8:	181b      	adds	r3, r3, r0
    4dfa:	42a5      	cmp	r5, r4
    4dfc:	d350      	bcc.n	4ea0 <__aeabi_ddiv+0x45c>
    4dfe:	d04d      	beq.n	4e9c <__aeabi_ddiv+0x458>
    4e00:	2301      	movs	r3, #1
    4e02:	4319      	orrs	r1, r3
    4e04:	4a96      	ldr	r2, [pc, #600]	; (5060 <__aeabi_ddiv+0x61c>)
    4e06:	9b01      	ldr	r3, [sp, #4]
    4e08:	4694      	mov	ip, r2
    4e0a:	4463      	add	r3, ip
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	dc00      	bgt.n	4e12 <__aeabi_ddiv+0x3ce>
    4e10:	e6f3      	b.n	4bfa <__aeabi_ddiv+0x1b6>
    4e12:	074a      	lsls	r2, r1, #29
    4e14:	d009      	beq.n	4e2a <__aeabi_ddiv+0x3e6>
    4e16:	220f      	movs	r2, #15
    4e18:	400a      	ands	r2, r1
    4e1a:	2a04      	cmp	r2, #4
    4e1c:	d005      	beq.n	4e2a <__aeabi_ddiv+0x3e6>
    4e1e:	1d0a      	adds	r2, r1, #4
    4e20:	428a      	cmp	r2, r1
    4e22:	4189      	sbcs	r1, r1
    4e24:	4249      	negs	r1, r1
    4e26:	448b      	add	fp, r1
    4e28:	0011      	movs	r1, r2
    4e2a:	465a      	mov	r2, fp
    4e2c:	01d2      	lsls	r2, r2, #7
    4e2e:	d508      	bpl.n	4e42 <__aeabi_ddiv+0x3fe>
    4e30:	465a      	mov	r2, fp
    4e32:	4b8c      	ldr	r3, [pc, #560]	; (5064 <__aeabi_ddiv+0x620>)
    4e34:	401a      	ands	r2, r3
    4e36:	4693      	mov	fp, r2
    4e38:	2280      	movs	r2, #128	; 0x80
    4e3a:	00d2      	lsls	r2, r2, #3
    4e3c:	4694      	mov	ip, r2
    4e3e:	9b01      	ldr	r3, [sp, #4]
    4e40:	4463      	add	r3, ip
    4e42:	4a89      	ldr	r2, [pc, #548]	; (5068 <__aeabi_ddiv+0x624>)
    4e44:	4293      	cmp	r3, r2
    4e46:	dd00      	ble.n	4e4a <__aeabi_ddiv+0x406>
    4e48:	e65b      	b.n	4b02 <__aeabi_ddiv+0xbe>
    4e4a:	465a      	mov	r2, fp
    4e4c:	08c9      	lsrs	r1, r1, #3
    4e4e:	0750      	lsls	r0, r2, #29
    4e50:	4308      	orrs	r0, r1
    4e52:	0256      	lsls	r6, r2, #9
    4e54:	4651      	mov	r1, sl
    4e56:	2201      	movs	r2, #1
    4e58:	055b      	lsls	r3, r3, #21
    4e5a:	4681      	mov	r9, r0
    4e5c:	0b36      	lsrs	r6, r6, #12
    4e5e:	0d5b      	lsrs	r3, r3, #21
    4e60:	400a      	ands	r2, r1
    4e62:	e655      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4e64:	2380      	movs	r3, #128	; 0x80
    4e66:	031b      	lsls	r3, r3, #12
    4e68:	421e      	tst	r6, r3
    4e6a:	d011      	beq.n	4e90 <__aeabi_ddiv+0x44c>
    4e6c:	465a      	mov	r2, fp
    4e6e:	421a      	tst	r2, r3
    4e70:	d10e      	bne.n	4e90 <__aeabi_ddiv+0x44c>
    4e72:	465e      	mov	r6, fp
    4e74:	431e      	orrs	r6, r3
    4e76:	0336      	lsls	r6, r6, #12
    4e78:	0b36      	lsrs	r6, r6, #12
    4e7a:	002a      	movs	r2, r5
    4e7c:	4689      	mov	r9, r1
    4e7e:	4b7b      	ldr	r3, [pc, #492]	; (506c <__aeabi_ddiv+0x628>)
    4e80:	e646      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4e82:	2b03      	cmp	r3, #3
    4e84:	d100      	bne.n	4e88 <__aeabi_ddiv+0x444>
    4e86:	e0e1      	b.n	504c <__aeabi_ddiv+0x608>
    4e88:	2b01      	cmp	r3, #1
    4e8a:	d1bb      	bne.n	4e04 <__aeabi_ddiv+0x3c0>
    4e8c:	401a      	ands	r2, r3
    4e8e:	e6bb      	b.n	4c08 <__aeabi_ddiv+0x1c4>
    4e90:	431e      	orrs	r6, r3
    4e92:	0336      	lsls	r6, r6, #12
    4e94:	0b36      	lsrs	r6, r6, #12
    4e96:	4642      	mov	r2, r8
    4e98:	4b74      	ldr	r3, [pc, #464]	; (506c <__aeabi_ddiv+0x628>)
    4e9a:	e639      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d0b1      	beq.n	4e04 <__aeabi_ddiv+0x3c0>
    4ea0:	197d      	adds	r5, r7, r5
    4ea2:	1e4a      	subs	r2, r1, #1
    4ea4:	42af      	cmp	r7, r5
    4ea6:	d952      	bls.n	4f4e <__aeabi_ddiv+0x50a>
    4ea8:	0011      	movs	r1, r2
    4eaa:	42a5      	cmp	r5, r4
    4eac:	d1a8      	bne.n	4e00 <__aeabi_ddiv+0x3bc>
    4eae:	9a03      	ldr	r2, [sp, #12]
    4eb0:	429a      	cmp	r2, r3
    4eb2:	d1a5      	bne.n	4e00 <__aeabi_ddiv+0x3bc>
    4eb4:	e7a6      	b.n	4e04 <__aeabi_ddiv+0x3c0>
    4eb6:	0003      	movs	r3, r0
    4eb8:	003e      	movs	r6, r7
    4eba:	3b28      	subs	r3, #40	; 0x28
    4ebc:	409e      	lsls	r6, r3
    4ebe:	2300      	movs	r3, #0
    4ec0:	4699      	mov	r9, r3
    4ec2:	e654      	b.n	4b6e <__aeabi_ddiv+0x12a>
    4ec4:	f001 f9ec 	bl	62a0 <__clzsi2>
    4ec8:	3020      	adds	r0, #32
    4eca:	e641      	b.n	4b50 <__aeabi_ddiv+0x10c>
    4ecc:	0003      	movs	r3, r0
    4ece:	4652      	mov	r2, sl
    4ed0:	3b28      	subs	r3, #40	; 0x28
    4ed2:	409a      	lsls	r2, r3
    4ed4:	2100      	movs	r1, #0
    4ed6:	4693      	mov	fp, r2
    4ed8:	e677      	b.n	4bca <__aeabi_ddiv+0x186>
    4eda:	4650      	mov	r0, sl
    4edc:	f001 f9e0 	bl	62a0 <__clzsi2>
    4ee0:	3020      	adds	r0, #32
    4ee2:	e65e      	b.n	4ba2 <__aeabi_ddiv+0x15e>
    4ee4:	9b02      	ldr	r3, [sp, #8]
    4ee6:	2600      	movs	r6, #0
    4ee8:	42ab      	cmp	r3, r5
    4eea:	d300      	bcc.n	4eee <__aeabi_ddiv+0x4aa>
    4eec:	e723      	b.n	4d36 <__aeabi_ddiv+0x2f2>
    4eee:	9e03      	ldr	r6, [sp, #12]
    4ef0:	9902      	ldr	r1, [sp, #8]
    4ef2:	46b4      	mov	ip, r6
    4ef4:	4461      	add	r1, ip
    4ef6:	4688      	mov	r8, r1
    4ef8:	45b0      	cmp	r8, r6
    4efa:	41b6      	sbcs	r6, r6
    4efc:	465b      	mov	r3, fp
    4efe:	4276      	negs	r6, r6
    4f00:	19f6      	adds	r6, r6, r7
    4f02:	18b2      	adds	r2, r6, r2
    4f04:	3b01      	subs	r3, #1
    4f06:	9102      	str	r1, [sp, #8]
    4f08:	4297      	cmp	r7, r2
    4f0a:	d213      	bcs.n	4f34 <__aeabi_ddiv+0x4f0>
    4f0c:	4290      	cmp	r0, r2
    4f0e:	d84f      	bhi.n	4fb0 <__aeabi_ddiv+0x56c>
    4f10:	d100      	bne.n	4f14 <__aeabi_ddiv+0x4d0>
    4f12:	e08e      	b.n	5032 <__aeabi_ddiv+0x5ee>
    4f14:	1a16      	subs	r6, r2, r0
    4f16:	469b      	mov	fp, r3
    4f18:	e70d      	b.n	4d36 <__aeabi_ddiv+0x2f2>
    4f1a:	4589      	cmp	r9, r1
    4f1c:	d200      	bcs.n	4f20 <__aeabi_ddiv+0x4dc>
    4f1e:	e68e      	b.n	4c3e <__aeabi_ddiv+0x1fa>
    4f20:	0874      	lsrs	r4, r6, #1
    4f22:	464b      	mov	r3, r9
    4f24:	07f6      	lsls	r6, r6, #31
    4f26:	0035      	movs	r5, r6
    4f28:	085b      	lsrs	r3, r3, #1
    4f2a:	431d      	orrs	r5, r3
    4f2c:	464b      	mov	r3, r9
    4f2e:	07db      	lsls	r3, r3, #31
    4f30:	9302      	str	r3, [sp, #8]
    4f32:	e68b      	b.n	4c4c <__aeabi_ddiv+0x208>
    4f34:	4297      	cmp	r7, r2
    4f36:	d1ed      	bne.n	4f14 <__aeabi_ddiv+0x4d0>
    4f38:	9903      	ldr	r1, [sp, #12]
    4f3a:	9c02      	ldr	r4, [sp, #8]
    4f3c:	42a1      	cmp	r1, r4
    4f3e:	d9e5      	bls.n	4f0c <__aeabi_ddiv+0x4c8>
    4f40:	1a3e      	subs	r6, r7, r0
    4f42:	469b      	mov	fp, r3
    4f44:	e6f7      	b.n	4d36 <__aeabi_ddiv+0x2f2>
    4f46:	4698      	mov	r8, r3
    4f48:	e6ca      	b.n	4ce0 <__aeabi_ddiv+0x29c>
    4f4a:	001e      	movs	r6, r3
    4f4c:	e6a5      	b.n	4c9a <__aeabi_ddiv+0x256>
    4f4e:	42ac      	cmp	r4, r5
    4f50:	d83e      	bhi.n	4fd0 <__aeabi_ddiv+0x58c>
    4f52:	d074      	beq.n	503e <__aeabi_ddiv+0x5fa>
    4f54:	0011      	movs	r1, r2
    4f56:	e753      	b.n	4e00 <__aeabi_ddiv+0x3bc>
    4f58:	2101      	movs	r1, #1
    4f5a:	4249      	negs	r1, r1
    4f5c:	e752      	b.n	4e04 <__aeabi_ddiv+0x3c0>
    4f5e:	001c      	movs	r4, r3
    4f60:	e70e      	b.n	4d80 <__aeabi_ddiv+0x33c>
    4f62:	001e      	movs	r6, r3
    4f64:	e72b      	b.n	4dbe <__aeabi_ddiv+0x37a>
    4f66:	2d1f      	cmp	r5, #31
    4f68:	dc3c      	bgt.n	4fe4 <__aeabi_ddiv+0x5a0>
    4f6a:	2320      	movs	r3, #32
    4f6c:	000a      	movs	r2, r1
    4f6e:	4658      	mov	r0, fp
    4f70:	1b5b      	subs	r3, r3, r5
    4f72:	4098      	lsls	r0, r3
    4f74:	40ea      	lsrs	r2, r5
    4f76:	4099      	lsls	r1, r3
    4f78:	4302      	orrs	r2, r0
    4f7a:	1e48      	subs	r0, r1, #1
    4f7c:	4181      	sbcs	r1, r0
    4f7e:	465e      	mov	r6, fp
    4f80:	4311      	orrs	r1, r2
    4f82:	40ee      	lsrs	r6, r5
    4f84:	074b      	lsls	r3, r1, #29
    4f86:	d009      	beq.n	4f9c <__aeabi_ddiv+0x558>
    4f88:	230f      	movs	r3, #15
    4f8a:	400b      	ands	r3, r1
    4f8c:	2b04      	cmp	r3, #4
    4f8e:	d005      	beq.n	4f9c <__aeabi_ddiv+0x558>
    4f90:	000b      	movs	r3, r1
    4f92:	1d19      	adds	r1, r3, #4
    4f94:	4299      	cmp	r1, r3
    4f96:	419b      	sbcs	r3, r3
    4f98:	425b      	negs	r3, r3
    4f9a:	18f6      	adds	r6, r6, r3
    4f9c:	0233      	lsls	r3, r6, #8
    4f9e:	d53c      	bpl.n	501a <__aeabi_ddiv+0x5d6>
    4fa0:	4653      	mov	r3, sl
    4fa2:	2201      	movs	r2, #1
    4fa4:	2100      	movs	r1, #0
    4fa6:	401a      	ands	r2, r3
    4fa8:	2600      	movs	r6, #0
    4faa:	2301      	movs	r3, #1
    4fac:	4689      	mov	r9, r1
    4fae:	e5af      	b.n	4b10 <__aeabi_ddiv+0xcc>
    4fb0:	2302      	movs	r3, #2
    4fb2:	425b      	negs	r3, r3
    4fb4:	469c      	mov	ip, r3
    4fb6:	9c03      	ldr	r4, [sp, #12]
    4fb8:	44e3      	add	fp, ip
    4fba:	46a4      	mov	ip, r4
    4fbc:	9b02      	ldr	r3, [sp, #8]
    4fbe:	4463      	add	r3, ip
    4fc0:	4698      	mov	r8, r3
    4fc2:	45a0      	cmp	r8, r4
    4fc4:	41b6      	sbcs	r6, r6
    4fc6:	4276      	negs	r6, r6
    4fc8:	19f6      	adds	r6, r6, r7
    4fca:	9302      	str	r3, [sp, #8]
    4fcc:	18b2      	adds	r2, r6, r2
    4fce:	e6b1      	b.n	4d34 <__aeabi_ddiv+0x2f0>
    4fd0:	9803      	ldr	r0, [sp, #12]
    4fd2:	1e8a      	subs	r2, r1, #2
    4fd4:	0041      	lsls	r1, r0, #1
    4fd6:	4281      	cmp	r1, r0
    4fd8:	41b6      	sbcs	r6, r6
    4fda:	4276      	negs	r6, r6
    4fdc:	19f6      	adds	r6, r6, r7
    4fde:	19ad      	adds	r5, r5, r6
    4fe0:	9103      	str	r1, [sp, #12]
    4fe2:	e761      	b.n	4ea8 <__aeabi_ddiv+0x464>
    4fe4:	221f      	movs	r2, #31
    4fe6:	4252      	negs	r2, r2
    4fe8:	1ad3      	subs	r3, r2, r3
    4fea:	465a      	mov	r2, fp
    4fec:	40da      	lsrs	r2, r3
    4fee:	0013      	movs	r3, r2
    4ff0:	2d20      	cmp	r5, #32
    4ff2:	d029      	beq.n	5048 <__aeabi_ddiv+0x604>
    4ff4:	2240      	movs	r2, #64	; 0x40
    4ff6:	4658      	mov	r0, fp
    4ff8:	1b55      	subs	r5, r2, r5
    4ffa:	40a8      	lsls	r0, r5
    4ffc:	4301      	orrs	r1, r0
    4ffe:	1e48      	subs	r0, r1, #1
    5000:	4181      	sbcs	r1, r0
    5002:	2007      	movs	r0, #7
    5004:	430b      	orrs	r3, r1
    5006:	4018      	ands	r0, r3
    5008:	2600      	movs	r6, #0
    500a:	2800      	cmp	r0, #0
    500c:	d009      	beq.n	5022 <__aeabi_ddiv+0x5de>
    500e:	220f      	movs	r2, #15
    5010:	2600      	movs	r6, #0
    5012:	401a      	ands	r2, r3
    5014:	0019      	movs	r1, r3
    5016:	2a04      	cmp	r2, #4
    5018:	d1bb      	bne.n	4f92 <__aeabi_ddiv+0x54e>
    501a:	000b      	movs	r3, r1
    501c:	0770      	lsls	r0, r6, #29
    501e:	0276      	lsls	r6, r6, #9
    5020:	0b36      	lsrs	r6, r6, #12
    5022:	08db      	lsrs	r3, r3, #3
    5024:	4303      	orrs	r3, r0
    5026:	4699      	mov	r9, r3
    5028:	2201      	movs	r2, #1
    502a:	4653      	mov	r3, sl
    502c:	401a      	ands	r2, r3
    502e:	2300      	movs	r3, #0
    5030:	e56e      	b.n	4b10 <__aeabi_ddiv+0xcc>
    5032:	9902      	ldr	r1, [sp, #8]
    5034:	428d      	cmp	r5, r1
    5036:	d8bb      	bhi.n	4fb0 <__aeabi_ddiv+0x56c>
    5038:	469b      	mov	fp, r3
    503a:	2600      	movs	r6, #0
    503c:	e67b      	b.n	4d36 <__aeabi_ddiv+0x2f2>
    503e:	9803      	ldr	r0, [sp, #12]
    5040:	4298      	cmp	r0, r3
    5042:	d3c5      	bcc.n	4fd0 <__aeabi_ddiv+0x58c>
    5044:	0011      	movs	r1, r2
    5046:	e732      	b.n	4eae <__aeabi_ddiv+0x46a>
    5048:	2000      	movs	r0, #0
    504a:	e7d7      	b.n	4ffc <__aeabi_ddiv+0x5b8>
    504c:	2680      	movs	r6, #128	; 0x80
    504e:	465b      	mov	r3, fp
    5050:	0336      	lsls	r6, r6, #12
    5052:	431e      	orrs	r6, r3
    5054:	0336      	lsls	r6, r6, #12
    5056:	0b36      	lsrs	r6, r6, #12
    5058:	9a00      	ldr	r2, [sp, #0]
    505a:	4689      	mov	r9, r1
    505c:	4b03      	ldr	r3, [pc, #12]	; (506c <__aeabi_ddiv+0x628>)
    505e:	e557      	b.n	4b10 <__aeabi_ddiv+0xcc>
    5060:	000003ff 	.word	0x000003ff
    5064:	feffffff 	.word	0xfeffffff
    5068:	000007fe 	.word	0x000007fe
    506c:	000007ff 	.word	0x000007ff

00005070 <__eqdf2>:
    5070:	b5f0      	push	{r4, r5, r6, r7, lr}
    5072:	465f      	mov	r7, fp
    5074:	4656      	mov	r6, sl
    5076:	464d      	mov	r5, r9
    5078:	4644      	mov	r4, r8
    507a:	b4f0      	push	{r4, r5, r6, r7}
    507c:	031f      	lsls	r7, r3, #12
    507e:	005c      	lsls	r4, r3, #1
    5080:	0fdb      	lsrs	r3, r3, #31
    5082:	469a      	mov	sl, r3
    5084:	4b19      	ldr	r3, [pc, #100]	; (50ec <__eqdf2+0x7c>)
    5086:	030e      	lsls	r6, r1, #12
    5088:	004d      	lsls	r5, r1, #1
    508a:	0fc9      	lsrs	r1, r1, #31
    508c:	4680      	mov	r8, r0
    508e:	0b36      	lsrs	r6, r6, #12
    5090:	0d6d      	lsrs	r5, r5, #21
    5092:	468b      	mov	fp, r1
    5094:	4691      	mov	r9, r2
    5096:	0b3f      	lsrs	r7, r7, #12
    5098:	0d64      	lsrs	r4, r4, #21
    509a:	429d      	cmp	r5, r3
    509c:	d019      	beq.n	50d2 <__eqdf2+0x62>
    509e:	4b13      	ldr	r3, [pc, #76]	; (50ec <__eqdf2+0x7c>)
    50a0:	429c      	cmp	r4, r3
    50a2:	d01b      	beq.n	50dc <__eqdf2+0x6c>
    50a4:	2301      	movs	r3, #1
    50a6:	42a5      	cmp	r5, r4
    50a8:	d006      	beq.n	50b8 <__eqdf2+0x48>
    50aa:	0018      	movs	r0, r3
    50ac:	bc3c      	pop	{r2, r3, r4, r5}
    50ae:	4690      	mov	r8, r2
    50b0:	4699      	mov	r9, r3
    50b2:	46a2      	mov	sl, r4
    50b4:	46ab      	mov	fp, r5
    50b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50b8:	42be      	cmp	r6, r7
    50ba:	d1f6      	bne.n	50aa <__eqdf2+0x3a>
    50bc:	45c8      	cmp	r8, r9
    50be:	d1f4      	bne.n	50aa <__eqdf2+0x3a>
    50c0:	45d3      	cmp	fp, sl
    50c2:	d010      	beq.n	50e6 <__eqdf2+0x76>
    50c4:	2d00      	cmp	r5, #0
    50c6:	d1f0      	bne.n	50aa <__eqdf2+0x3a>
    50c8:	4330      	orrs	r0, r6
    50ca:	0003      	movs	r3, r0
    50cc:	1e5a      	subs	r2, r3, #1
    50ce:	4193      	sbcs	r3, r2
    50d0:	e7eb      	b.n	50aa <__eqdf2+0x3a>
    50d2:	0031      	movs	r1, r6
    50d4:	2301      	movs	r3, #1
    50d6:	4301      	orrs	r1, r0
    50d8:	d1e7      	bne.n	50aa <__eqdf2+0x3a>
    50da:	e7e0      	b.n	509e <__eqdf2+0x2e>
    50dc:	433a      	orrs	r2, r7
    50de:	2301      	movs	r3, #1
    50e0:	2a00      	cmp	r2, #0
    50e2:	d1e2      	bne.n	50aa <__eqdf2+0x3a>
    50e4:	e7de      	b.n	50a4 <__eqdf2+0x34>
    50e6:	2300      	movs	r3, #0
    50e8:	e7df      	b.n	50aa <__eqdf2+0x3a>
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	000007ff 	.word	0x000007ff

000050f0 <__gedf2>:
    50f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50f2:	465f      	mov	r7, fp
    50f4:	4644      	mov	r4, r8
    50f6:	4656      	mov	r6, sl
    50f8:	464d      	mov	r5, r9
    50fa:	b4f0      	push	{r4, r5, r6, r7}
    50fc:	031f      	lsls	r7, r3, #12
    50fe:	0b3c      	lsrs	r4, r7, #12
    5100:	4f2c      	ldr	r7, [pc, #176]	; (51b4 <__gedf2+0xc4>)
    5102:	030e      	lsls	r6, r1, #12
    5104:	004d      	lsls	r5, r1, #1
    5106:	46a3      	mov	fp, r4
    5108:	005c      	lsls	r4, r3, #1
    510a:	4684      	mov	ip, r0
    510c:	0b36      	lsrs	r6, r6, #12
    510e:	0d6d      	lsrs	r5, r5, #21
    5110:	0fc9      	lsrs	r1, r1, #31
    5112:	4690      	mov	r8, r2
    5114:	0d64      	lsrs	r4, r4, #21
    5116:	0fdb      	lsrs	r3, r3, #31
    5118:	42bd      	cmp	r5, r7
    511a:	d02b      	beq.n	5174 <__gedf2+0x84>
    511c:	4f25      	ldr	r7, [pc, #148]	; (51b4 <__gedf2+0xc4>)
    511e:	42bc      	cmp	r4, r7
    5120:	d02e      	beq.n	5180 <__gedf2+0x90>
    5122:	2d00      	cmp	r5, #0
    5124:	d10e      	bne.n	5144 <__gedf2+0x54>
    5126:	4330      	orrs	r0, r6
    5128:	0007      	movs	r7, r0
    512a:	4681      	mov	r9, r0
    512c:	4278      	negs	r0, r7
    512e:	4178      	adcs	r0, r7
    5130:	2c00      	cmp	r4, #0
    5132:	d117      	bne.n	5164 <__gedf2+0x74>
    5134:	465f      	mov	r7, fp
    5136:	433a      	orrs	r2, r7
    5138:	d114      	bne.n	5164 <__gedf2+0x74>
    513a:	464b      	mov	r3, r9
    513c:	2000      	movs	r0, #0
    513e:	2b00      	cmp	r3, #0
    5140:	d00a      	beq.n	5158 <__gedf2+0x68>
    5142:	e006      	b.n	5152 <__gedf2+0x62>
    5144:	2c00      	cmp	r4, #0
    5146:	d102      	bne.n	514e <__gedf2+0x5e>
    5148:	4658      	mov	r0, fp
    514a:	4302      	orrs	r2, r0
    514c:	d001      	beq.n	5152 <__gedf2+0x62>
    514e:	4299      	cmp	r1, r3
    5150:	d01a      	beq.n	5188 <__gedf2+0x98>
    5152:	2301      	movs	r3, #1
    5154:	4248      	negs	r0, r1
    5156:	4318      	orrs	r0, r3
    5158:	bc3c      	pop	{r2, r3, r4, r5}
    515a:	4690      	mov	r8, r2
    515c:	4699      	mov	r9, r3
    515e:	46a2      	mov	sl, r4
    5160:	46ab      	mov	fp, r5
    5162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5164:	2800      	cmp	r0, #0
    5166:	d0f2      	beq.n	514e <__gedf2+0x5e>
    5168:	4258      	negs	r0, r3
    516a:	4158      	adcs	r0, r3
    516c:	2201      	movs	r2, #1
    516e:	4240      	negs	r0, r0
    5170:	4310      	orrs	r0, r2
    5172:	e7f1      	b.n	5158 <__gedf2+0x68>
    5174:	0037      	movs	r7, r6
    5176:	4307      	orrs	r7, r0
    5178:	d0d0      	beq.n	511c <__gedf2+0x2c>
    517a:	2002      	movs	r0, #2
    517c:	4240      	negs	r0, r0
    517e:	e7eb      	b.n	5158 <__gedf2+0x68>
    5180:	465f      	mov	r7, fp
    5182:	4317      	orrs	r7, r2
    5184:	d0cd      	beq.n	5122 <__gedf2+0x32>
    5186:	e7f8      	b.n	517a <__gedf2+0x8a>
    5188:	42a5      	cmp	r5, r4
    518a:	dce2      	bgt.n	5152 <__gedf2+0x62>
    518c:	db05      	blt.n	519a <__gedf2+0xaa>
    518e:	455e      	cmp	r6, fp
    5190:	d8df      	bhi.n	5152 <__gedf2+0x62>
    5192:	d008      	beq.n	51a6 <__gedf2+0xb6>
    5194:	2000      	movs	r0, #0
    5196:	455e      	cmp	r6, fp
    5198:	d2de      	bcs.n	5158 <__gedf2+0x68>
    519a:	4248      	negs	r0, r1
    519c:	4148      	adcs	r0, r1
    519e:	2301      	movs	r3, #1
    51a0:	4240      	negs	r0, r0
    51a2:	4318      	orrs	r0, r3
    51a4:	e7d8      	b.n	5158 <__gedf2+0x68>
    51a6:	45c4      	cmp	ip, r8
    51a8:	d8d3      	bhi.n	5152 <__gedf2+0x62>
    51aa:	2000      	movs	r0, #0
    51ac:	45c4      	cmp	ip, r8
    51ae:	d3f4      	bcc.n	519a <__gedf2+0xaa>
    51b0:	e7d2      	b.n	5158 <__gedf2+0x68>
    51b2:	46c0      	nop			; (mov r8, r8)
    51b4:	000007ff 	.word	0x000007ff

000051b8 <__ledf2>:
    51b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ba:	465f      	mov	r7, fp
    51bc:	464d      	mov	r5, r9
    51be:	4644      	mov	r4, r8
    51c0:	4656      	mov	r6, sl
    51c2:	b4f0      	push	{r4, r5, r6, r7}
    51c4:	031c      	lsls	r4, r3, #12
    51c6:	0b24      	lsrs	r4, r4, #12
    51c8:	46a4      	mov	ip, r4
    51ca:	4c2f      	ldr	r4, [pc, #188]	; (5288 <__ledf2+0xd0>)
    51cc:	030f      	lsls	r7, r1, #12
    51ce:	004d      	lsls	r5, r1, #1
    51d0:	005e      	lsls	r6, r3, #1
    51d2:	0fc9      	lsrs	r1, r1, #31
    51d4:	4680      	mov	r8, r0
    51d6:	0b3f      	lsrs	r7, r7, #12
    51d8:	0d6d      	lsrs	r5, r5, #21
    51da:	468b      	mov	fp, r1
    51dc:	4691      	mov	r9, r2
    51de:	0d76      	lsrs	r6, r6, #21
    51e0:	0fdb      	lsrs	r3, r3, #31
    51e2:	42a5      	cmp	r5, r4
    51e4:	d020      	beq.n	5228 <__ledf2+0x70>
    51e6:	4c28      	ldr	r4, [pc, #160]	; (5288 <__ledf2+0xd0>)
    51e8:	42a6      	cmp	r6, r4
    51ea:	d022      	beq.n	5232 <__ledf2+0x7a>
    51ec:	2d00      	cmp	r5, #0
    51ee:	d112      	bne.n	5216 <__ledf2+0x5e>
    51f0:	4338      	orrs	r0, r7
    51f2:	4244      	negs	r4, r0
    51f4:	4144      	adcs	r4, r0
    51f6:	2e00      	cmp	r6, #0
    51f8:	d020      	beq.n	523c <__ledf2+0x84>
    51fa:	2c00      	cmp	r4, #0
    51fc:	d00d      	beq.n	521a <__ledf2+0x62>
    51fe:	425c      	negs	r4, r3
    5200:	4163      	adcs	r3, r4
    5202:	2401      	movs	r4, #1
    5204:	425b      	negs	r3, r3
    5206:	431c      	orrs	r4, r3
    5208:	0020      	movs	r0, r4
    520a:	bc3c      	pop	{r2, r3, r4, r5}
    520c:	4690      	mov	r8, r2
    520e:	4699      	mov	r9, r3
    5210:	46a2      	mov	sl, r4
    5212:	46ab      	mov	fp, r5
    5214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5216:	2e00      	cmp	r6, #0
    5218:	d017      	beq.n	524a <__ledf2+0x92>
    521a:	455b      	cmp	r3, fp
    521c:	d019      	beq.n	5252 <__ledf2+0x9a>
    521e:	465b      	mov	r3, fp
    5220:	425c      	negs	r4, r3
    5222:	2301      	movs	r3, #1
    5224:	431c      	orrs	r4, r3
    5226:	e7ef      	b.n	5208 <__ledf2+0x50>
    5228:	0039      	movs	r1, r7
    522a:	2402      	movs	r4, #2
    522c:	4301      	orrs	r1, r0
    522e:	d1eb      	bne.n	5208 <__ledf2+0x50>
    5230:	e7d9      	b.n	51e6 <__ledf2+0x2e>
    5232:	4661      	mov	r1, ip
    5234:	2402      	movs	r4, #2
    5236:	4311      	orrs	r1, r2
    5238:	d1e6      	bne.n	5208 <__ledf2+0x50>
    523a:	e7d7      	b.n	51ec <__ledf2+0x34>
    523c:	4661      	mov	r1, ip
    523e:	430a      	orrs	r2, r1
    5240:	d1db      	bne.n	51fa <__ledf2+0x42>
    5242:	2400      	movs	r4, #0
    5244:	2800      	cmp	r0, #0
    5246:	d0df      	beq.n	5208 <__ledf2+0x50>
    5248:	e7e9      	b.n	521e <__ledf2+0x66>
    524a:	4661      	mov	r1, ip
    524c:	430a      	orrs	r2, r1
    524e:	d1e4      	bne.n	521a <__ledf2+0x62>
    5250:	e7e5      	b.n	521e <__ledf2+0x66>
    5252:	42b5      	cmp	r5, r6
    5254:	dd03      	ble.n	525e <__ledf2+0xa6>
    5256:	2201      	movs	r2, #1
    5258:	425c      	negs	r4, r3
    525a:	4314      	orrs	r4, r2
    525c:	e7d4      	b.n	5208 <__ledf2+0x50>
    525e:	42b5      	cmp	r5, r6
    5260:	dbcd      	blt.n	51fe <__ledf2+0x46>
    5262:	4567      	cmp	r7, ip
    5264:	d8db      	bhi.n	521e <__ledf2+0x66>
    5266:	d009      	beq.n	527c <__ledf2+0xc4>
    5268:	2400      	movs	r4, #0
    526a:	4567      	cmp	r7, ip
    526c:	d2cc      	bcs.n	5208 <__ledf2+0x50>
    526e:	4659      	mov	r1, fp
    5270:	424c      	negs	r4, r1
    5272:	4161      	adcs	r1, r4
    5274:	2401      	movs	r4, #1
    5276:	4249      	negs	r1, r1
    5278:	430c      	orrs	r4, r1
    527a:	e7c5      	b.n	5208 <__ledf2+0x50>
    527c:	45c8      	cmp	r8, r9
    527e:	d8ce      	bhi.n	521e <__ledf2+0x66>
    5280:	2400      	movs	r4, #0
    5282:	45c8      	cmp	r8, r9
    5284:	d3f3      	bcc.n	526e <__ledf2+0xb6>
    5286:	e7bf      	b.n	5208 <__ledf2+0x50>
    5288:	000007ff 	.word	0x000007ff

0000528c <__aeabi_dmul>:
    528c:	b5f0      	push	{r4, r5, r6, r7, lr}
    528e:	465f      	mov	r7, fp
    5290:	4656      	mov	r6, sl
    5292:	464d      	mov	r5, r9
    5294:	4644      	mov	r4, r8
    5296:	b4f0      	push	{r4, r5, r6, r7}
    5298:	030d      	lsls	r5, r1, #12
    529a:	4699      	mov	r9, r3
    529c:	004e      	lsls	r6, r1, #1
    529e:	0b2b      	lsrs	r3, r5, #12
    52a0:	b087      	sub	sp, #28
    52a2:	0007      	movs	r7, r0
    52a4:	4692      	mov	sl, r2
    52a6:	4680      	mov	r8, r0
    52a8:	469b      	mov	fp, r3
    52aa:	0d76      	lsrs	r6, r6, #21
    52ac:	0fcc      	lsrs	r4, r1, #31
    52ae:	2e00      	cmp	r6, #0
    52b0:	d069      	beq.n	5386 <__aeabi_dmul+0xfa>
    52b2:	4b6d      	ldr	r3, [pc, #436]	; (5468 <__aeabi_dmul+0x1dc>)
    52b4:	429e      	cmp	r6, r3
    52b6:	d035      	beq.n	5324 <__aeabi_dmul+0x98>
    52b8:	465b      	mov	r3, fp
    52ba:	2280      	movs	r2, #128	; 0x80
    52bc:	00dd      	lsls	r5, r3, #3
    52be:	0412      	lsls	r2, r2, #16
    52c0:	0f43      	lsrs	r3, r0, #29
    52c2:	4313      	orrs	r3, r2
    52c4:	432b      	orrs	r3, r5
    52c6:	469b      	mov	fp, r3
    52c8:	00c3      	lsls	r3, r0, #3
    52ca:	4698      	mov	r8, r3
    52cc:	4b67      	ldr	r3, [pc, #412]	; (546c <__aeabi_dmul+0x1e0>)
    52ce:	2700      	movs	r7, #0
    52d0:	469c      	mov	ip, r3
    52d2:	2300      	movs	r3, #0
    52d4:	4466      	add	r6, ip
    52d6:	9301      	str	r3, [sp, #4]
    52d8:	464a      	mov	r2, r9
    52da:	0315      	lsls	r5, r2, #12
    52dc:	0050      	lsls	r0, r2, #1
    52de:	0fd2      	lsrs	r2, r2, #31
    52e0:	4653      	mov	r3, sl
    52e2:	0b2d      	lsrs	r5, r5, #12
    52e4:	0d40      	lsrs	r0, r0, #21
    52e6:	4691      	mov	r9, r2
    52e8:	d100      	bne.n	52ec <__aeabi_dmul+0x60>
    52ea:	e076      	b.n	53da <__aeabi_dmul+0x14e>
    52ec:	4a5e      	ldr	r2, [pc, #376]	; (5468 <__aeabi_dmul+0x1dc>)
    52ee:	4290      	cmp	r0, r2
    52f0:	d06c      	beq.n	53cc <__aeabi_dmul+0x140>
    52f2:	2280      	movs	r2, #128	; 0x80
    52f4:	0f5b      	lsrs	r3, r3, #29
    52f6:	0412      	lsls	r2, r2, #16
    52f8:	4313      	orrs	r3, r2
    52fa:	4a5c      	ldr	r2, [pc, #368]	; (546c <__aeabi_dmul+0x1e0>)
    52fc:	00ed      	lsls	r5, r5, #3
    52fe:	4694      	mov	ip, r2
    5300:	431d      	orrs	r5, r3
    5302:	4653      	mov	r3, sl
    5304:	2200      	movs	r2, #0
    5306:	00db      	lsls	r3, r3, #3
    5308:	4460      	add	r0, ip
    530a:	4649      	mov	r1, r9
    530c:	1836      	adds	r6, r6, r0
    530e:	1c70      	adds	r0, r6, #1
    5310:	4061      	eors	r1, r4
    5312:	9002      	str	r0, [sp, #8]
    5314:	4317      	orrs	r7, r2
    5316:	2f0f      	cmp	r7, #15
    5318:	d900      	bls.n	531c <__aeabi_dmul+0x90>
    531a:	e0af      	b.n	547c <__aeabi_dmul+0x1f0>
    531c:	4854      	ldr	r0, [pc, #336]	; (5470 <__aeabi_dmul+0x1e4>)
    531e:	00bf      	lsls	r7, r7, #2
    5320:	59c7      	ldr	r7, [r0, r7]
    5322:	46bf      	mov	pc, r7
    5324:	465b      	mov	r3, fp
    5326:	431f      	orrs	r7, r3
    5328:	d000      	beq.n	532c <__aeabi_dmul+0xa0>
    532a:	e088      	b.n	543e <__aeabi_dmul+0x1b2>
    532c:	2300      	movs	r3, #0
    532e:	469b      	mov	fp, r3
    5330:	4698      	mov	r8, r3
    5332:	3302      	adds	r3, #2
    5334:	2708      	movs	r7, #8
    5336:	9301      	str	r3, [sp, #4]
    5338:	e7ce      	b.n	52d8 <__aeabi_dmul+0x4c>
    533a:	4649      	mov	r1, r9
    533c:	2a02      	cmp	r2, #2
    533e:	d06a      	beq.n	5416 <__aeabi_dmul+0x18a>
    5340:	2a03      	cmp	r2, #3
    5342:	d100      	bne.n	5346 <__aeabi_dmul+0xba>
    5344:	e209      	b.n	575a <__aeabi_dmul+0x4ce>
    5346:	2a01      	cmp	r2, #1
    5348:	d000      	beq.n	534c <__aeabi_dmul+0xc0>
    534a:	e1bb      	b.n	56c4 <__aeabi_dmul+0x438>
    534c:	4011      	ands	r1, r2
    534e:	2200      	movs	r2, #0
    5350:	2300      	movs	r3, #0
    5352:	2500      	movs	r5, #0
    5354:	4690      	mov	r8, r2
    5356:	b2cc      	uxtb	r4, r1
    5358:	2100      	movs	r1, #0
    535a:	032d      	lsls	r5, r5, #12
    535c:	0d0a      	lsrs	r2, r1, #20
    535e:	0512      	lsls	r2, r2, #20
    5360:	0b2d      	lsrs	r5, r5, #12
    5362:	4315      	orrs	r5, r2
    5364:	4a43      	ldr	r2, [pc, #268]	; (5474 <__aeabi_dmul+0x1e8>)
    5366:	051b      	lsls	r3, r3, #20
    5368:	4015      	ands	r5, r2
    536a:	431d      	orrs	r5, r3
    536c:	006d      	lsls	r5, r5, #1
    536e:	07e4      	lsls	r4, r4, #31
    5370:	086d      	lsrs	r5, r5, #1
    5372:	4325      	orrs	r5, r4
    5374:	4640      	mov	r0, r8
    5376:	0029      	movs	r1, r5
    5378:	b007      	add	sp, #28
    537a:	bc3c      	pop	{r2, r3, r4, r5}
    537c:	4690      	mov	r8, r2
    537e:	4699      	mov	r9, r3
    5380:	46a2      	mov	sl, r4
    5382:	46ab      	mov	fp, r5
    5384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5386:	4303      	orrs	r3, r0
    5388:	d052      	beq.n	5430 <__aeabi_dmul+0x1a4>
    538a:	465b      	mov	r3, fp
    538c:	2b00      	cmp	r3, #0
    538e:	d100      	bne.n	5392 <__aeabi_dmul+0x106>
    5390:	e18a      	b.n	56a8 <__aeabi_dmul+0x41c>
    5392:	4658      	mov	r0, fp
    5394:	f000 ff84 	bl	62a0 <__clzsi2>
    5398:	0003      	movs	r3, r0
    539a:	3b0b      	subs	r3, #11
    539c:	2b1c      	cmp	r3, #28
    539e:	dd00      	ble.n	53a2 <__aeabi_dmul+0x116>
    53a0:	e17b      	b.n	569a <__aeabi_dmul+0x40e>
    53a2:	221d      	movs	r2, #29
    53a4:	1ad3      	subs	r3, r2, r3
    53a6:	003a      	movs	r2, r7
    53a8:	0001      	movs	r1, r0
    53aa:	465d      	mov	r5, fp
    53ac:	40da      	lsrs	r2, r3
    53ae:	3908      	subs	r1, #8
    53b0:	408d      	lsls	r5, r1
    53b2:	0013      	movs	r3, r2
    53b4:	408f      	lsls	r7, r1
    53b6:	432b      	orrs	r3, r5
    53b8:	469b      	mov	fp, r3
    53ba:	46b8      	mov	r8, r7
    53bc:	4b2e      	ldr	r3, [pc, #184]	; (5478 <__aeabi_dmul+0x1ec>)
    53be:	2700      	movs	r7, #0
    53c0:	469c      	mov	ip, r3
    53c2:	2300      	movs	r3, #0
    53c4:	4460      	add	r0, ip
    53c6:	4246      	negs	r6, r0
    53c8:	9301      	str	r3, [sp, #4]
    53ca:	e785      	b.n	52d8 <__aeabi_dmul+0x4c>
    53cc:	4652      	mov	r2, sl
    53ce:	432a      	orrs	r2, r5
    53d0:	d12c      	bne.n	542c <__aeabi_dmul+0x1a0>
    53d2:	2500      	movs	r5, #0
    53d4:	2300      	movs	r3, #0
    53d6:	2202      	movs	r2, #2
    53d8:	e797      	b.n	530a <__aeabi_dmul+0x7e>
    53da:	4652      	mov	r2, sl
    53dc:	432a      	orrs	r2, r5
    53de:	d021      	beq.n	5424 <__aeabi_dmul+0x198>
    53e0:	2d00      	cmp	r5, #0
    53e2:	d100      	bne.n	53e6 <__aeabi_dmul+0x15a>
    53e4:	e154      	b.n	5690 <__aeabi_dmul+0x404>
    53e6:	0028      	movs	r0, r5
    53e8:	f000 ff5a 	bl	62a0 <__clzsi2>
    53ec:	0003      	movs	r3, r0
    53ee:	3b0b      	subs	r3, #11
    53f0:	2b1c      	cmp	r3, #28
    53f2:	dd00      	ble.n	53f6 <__aeabi_dmul+0x16a>
    53f4:	e146      	b.n	5684 <__aeabi_dmul+0x3f8>
    53f6:	211d      	movs	r1, #29
    53f8:	1acb      	subs	r3, r1, r3
    53fa:	4651      	mov	r1, sl
    53fc:	0002      	movs	r2, r0
    53fe:	40d9      	lsrs	r1, r3
    5400:	4653      	mov	r3, sl
    5402:	3a08      	subs	r2, #8
    5404:	4095      	lsls	r5, r2
    5406:	4093      	lsls	r3, r2
    5408:	430d      	orrs	r5, r1
    540a:	4a1b      	ldr	r2, [pc, #108]	; (5478 <__aeabi_dmul+0x1ec>)
    540c:	4694      	mov	ip, r2
    540e:	4460      	add	r0, ip
    5410:	4240      	negs	r0, r0
    5412:	2200      	movs	r2, #0
    5414:	e779      	b.n	530a <__aeabi_dmul+0x7e>
    5416:	2401      	movs	r4, #1
    5418:	2200      	movs	r2, #0
    541a:	400c      	ands	r4, r1
    541c:	4b12      	ldr	r3, [pc, #72]	; (5468 <__aeabi_dmul+0x1dc>)
    541e:	2500      	movs	r5, #0
    5420:	4690      	mov	r8, r2
    5422:	e799      	b.n	5358 <__aeabi_dmul+0xcc>
    5424:	2500      	movs	r5, #0
    5426:	2300      	movs	r3, #0
    5428:	2201      	movs	r2, #1
    542a:	e76e      	b.n	530a <__aeabi_dmul+0x7e>
    542c:	2203      	movs	r2, #3
    542e:	e76c      	b.n	530a <__aeabi_dmul+0x7e>
    5430:	2300      	movs	r3, #0
    5432:	469b      	mov	fp, r3
    5434:	4698      	mov	r8, r3
    5436:	3301      	adds	r3, #1
    5438:	2704      	movs	r7, #4
    543a:	9301      	str	r3, [sp, #4]
    543c:	e74c      	b.n	52d8 <__aeabi_dmul+0x4c>
    543e:	2303      	movs	r3, #3
    5440:	270c      	movs	r7, #12
    5442:	9301      	str	r3, [sp, #4]
    5444:	e748      	b.n	52d8 <__aeabi_dmul+0x4c>
    5446:	2300      	movs	r3, #0
    5448:	2580      	movs	r5, #128	; 0x80
    544a:	4698      	mov	r8, r3
    544c:	2400      	movs	r4, #0
    544e:	032d      	lsls	r5, r5, #12
    5450:	4b05      	ldr	r3, [pc, #20]	; (5468 <__aeabi_dmul+0x1dc>)
    5452:	e781      	b.n	5358 <__aeabi_dmul+0xcc>
    5454:	465d      	mov	r5, fp
    5456:	4643      	mov	r3, r8
    5458:	9a01      	ldr	r2, [sp, #4]
    545a:	e76f      	b.n	533c <__aeabi_dmul+0xb0>
    545c:	465d      	mov	r5, fp
    545e:	4643      	mov	r3, r8
    5460:	0021      	movs	r1, r4
    5462:	9a01      	ldr	r2, [sp, #4]
    5464:	e76a      	b.n	533c <__aeabi_dmul+0xb0>
    5466:	46c0      	nop			; (mov r8, r8)
    5468:	000007ff 	.word	0x000007ff
    546c:	fffffc01 	.word	0xfffffc01
    5470:	000066f0 	.word	0x000066f0
    5474:	800fffff 	.word	0x800fffff
    5478:	000003f3 	.word	0x000003f3
    547c:	4642      	mov	r2, r8
    547e:	0c12      	lsrs	r2, r2, #16
    5480:	4691      	mov	r9, r2
    5482:	0c1a      	lsrs	r2, r3, #16
    5484:	4694      	mov	ip, r2
    5486:	4642      	mov	r2, r8
    5488:	0417      	lsls	r7, r2, #16
    548a:	464a      	mov	r2, r9
    548c:	041b      	lsls	r3, r3, #16
    548e:	0c1b      	lsrs	r3, r3, #16
    5490:	435a      	muls	r2, r3
    5492:	4660      	mov	r0, ip
    5494:	4690      	mov	r8, r2
    5496:	464a      	mov	r2, r9
    5498:	4342      	muls	r2, r0
    549a:	0010      	movs	r0, r2
    549c:	9203      	str	r2, [sp, #12]
    549e:	4662      	mov	r2, ip
    54a0:	001c      	movs	r4, r3
    54a2:	0c3f      	lsrs	r7, r7, #16
    54a4:	437a      	muls	r2, r7
    54a6:	437c      	muls	r4, r7
    54a8:	4442      	add	r2, r8
    54aa:	9201      	str	r2, [sp, #4]
    54ac:	0c22      	lsrs	r2, r4, #16
    54ae:	4692      	mov	sl, r2
    54b0:	9a01      	ldr	r2, [sp, #4]
    54b2:	4452      	add	r2, sl
    54b4:	4590      	cmp	r8, r2
    54b6:	d906      	bls.n	54c6 <__aeabi_dmul+0x23a>
    54b8:	4682      	mov	sl, r0
    54ba:	2080      	movs	r0, #128	; 0x80
    54bc:	0240      	lsls	r0, r0, #9
    54be:	4680      	mov	r8, r0
    54c0:	44c2      	add	sl, r8
    54c2:	4650      	mov	r0, sl
    54c4:	9003      	str	r0, [sp, #12]
    54c6:	0c10      	lsrs	r0, r2, #16
    54c8:	9004      	str	r0, [sp, #16]
    54ca:	4648      	mov	r0, r9
    54cc:	0424      	lsls	r4, r4, #16
    54ce:	0c24      	lsrs	r4, r4, #16
    54d0:	0412      	lsls	r2, r2, #16
    54d2:	1912      	adds	r2, r2, r4
    54d4:	9205      	str	r2, [sp, #20]
    54d6:	0c2a      	lsrs	r2, r5, #16
    54d8:	042d      	lsls	r5, r5, #16
    54da:	0c2d      	lsrs	r5, r5, #16
    54dc:	4368      	muls	r0, r5
    54de:	002c      	movs	r4, r5
    54e0:	4682      	mov	sl, r0
    54e2:	4648      	mov	r0, r9
    54e4:	437c      	muls	r4, r7
    54e6:	4350      	muls	r0, r2
    54e8:	4681      	mov	r9, r0
    54ea:	0c20      	lsrs	r0, r4, #16
    54ec:	4680      	mov	r8, r0
    54ee:	4357      	muls	r7, r2
    54f0:	4457      	add	r7, sl
    54f2:	4447      	add	r7, r8
    54f4:	45ba      	cmp	sl, r7
    54f6:	d903      	bls.n	5500 <__aeabi_dmul+0x274>
    54f8:	2080      	movs	r0, #128	; 0x80
    54fa:	0240      	lsls	r0, r0, #9
    54fc:	4680      	mov	r8, r0
    54fe:	44c1      	add	r9, r8
    5500:	0c38      	lsrs	r0, r7, #16
    5502:	043f      	lsls	r7, r7, #16
    5504:	46b8      	mov	r8, r7
    5506:	4448      	add	r0, r9
    5508:	0424      	lsls	r4, r4, #16
    550a:	0c24      	lsrs	r4, r4, #16
    550c:	9001      	str	r0, [sp, #4]
    550e:	9804      	ldr	r0, [sp, #16]
    5510:	44a0      	add	r8, r4
    5512:	4440      	add	r0, r8
    5514:	9004      	str	r0, [sp, #16]
    5516:	4658      	mov	r0, fp
    5518:	0c00      	lsrs	r0, r0, #16
    551a:	4681      	mov	r9, r0
    551c:	4658      	mov	r0, fp
    551e:	0404      	lsls	r4, r0, #16
    5520:	0c20      	lsrs	r0, r4, #16
    5522:	4682      	mov	sl, r0
    5524:	0007      	movs	r7, r0
    5526:	4648      	mov	r0, r9
    5528:	435f      	muls	r7, r3
    552a:	464c      	mov	r4, r9
    552c:	4343      	muls	r3, r0
    552e:	4660      	mov	r0, ip
    5530:	4360      	muls	r0, r4
    5532:	4664      	mov	r4, ip
    5534:	4683      	mov	fp, r0
    5536:	4650      	mov	r0, sl
    5538:	4344      	muls	r4, r0
    553a:	0c38      	lsrs	r0, r7, #16
    553c:	4684      	mov	ip, r0
    553e:	18e4      	adds	r4, r4, r3
    5540:	4464      	add	r4, ip
    5542:	42a3      	cmp	r3, r4
    5544:	d903      	bls.n	554e <__aeabi_dmul+0x2c2>
    5546:	2380      	movs	r3, #128	; 0x80
    5548:	025b      	lsls	r3, r3, #9
    554a:	469c      	mov	ip, r3
    554c:	44e3      	add	fp, ip
    554e:	4648      	mov	r0, r9
    5550:	043f      	lsls	r7, r7, #16
    5552:	0c23      	lsrs	r3, r4, #16
    5554:	0c3f      	lsrs	r7, r7, #16
    5556:	0424      	lsls	r4, r4, #16
    5558:	19e4      	adds	r4, r4, r7
    555a:	4657      	mov	r7, sl
    555c:	4368      	muls	r0, r5
    555e:	436f      	muls	r7, r5
    5560:	4684      	mov	ip, r0
    5562:	464d      	mov	r5, r9
    5564:	4650      	mov	r0, sl
    5566:	4355      	muls	r5, r2
    5568:	4342      	muls	r2, r0
    556a:	0c38      	lsrs	r0, r7, #16
    556c:	4681      	mov	r9, r0
    556e:	4462      	add	r2, ip
    5570:	444a      	add	r2, r9
    5572:	445b      	add	r3, fp
    5574:	4594      	cmp	ip, r2
    5576:	d903      	bls.n	5580 <__aeabi_dmul+0x2f4>
    5578:	2080      	movs	r0, #128	; 0x80
    557a:	0240      	lsls	r0, r0, #9
    557c:	4684      	mov	ip, r0
    557e:	4465      	add	r5, ip
    5580:	9803      	ldr	r0, [sp, #12]
    5582:	043f      	lsls	r7, r7, #16
    5584:	4683      	mov	fp, r0
    5586:	9804      	ldr	r0, [sp, #16]
    5588:	0c3f      	lsrs	r7, r7, #16
    558a:	4684      	mov	ip, r0
    558c:	44e3      	add	fp, ip
    558e:	45c3      	cmp	fp, r8
    5590:	4180      	sbcs	r0, r0
    5592:	4240      	negs	r0, r0
    5594:	4682      	mov	sl, r0
    5596:	0410      	lsls	r0, r2, #16
    5598:	4684      	mov	ip, r0
    559a:	9801      	ldr	r0, [sp, #4]
    559c:	4467      	add	r7, ip
    559e:	4684      	mov	ip, r0
    55a0:	4467      	add	r7, ip
    55a2:	44a3      	add	fp, r4
    55a4:	46bc      	mov	ip, r7
    55a6:	45a3      	cmp	fp, r4
    55a8:	41a4      	sbcs	r4, r4
    55aa:	4699      	mov	r9, r3
    55ac:	44d4      	add	ip, sl
    55ae:	4264      	negs	r4, r4
    55b0:	4287      	cmp	r7, r0
    55b2:	41bf      	sbcs	r7, r7
    55b4:	45d4      	cmp	ip, sl
    55b6:	4180      	sbcs	r0, r0
    55b8:	44e1      	add	r9, ip
    55ba:	46a0      	mov	r8, r4
    55bc:	4599      	cmp	r9, r3
    55be:	419b      	sbcs	r3, r3
    55c0:	427f      	negs	r7, r7
    55c2:	4240      	negs	r0, r0
    55c4:	44c8      	add	r8, r9
    55c6:	4307      	orrs	r7, r0
    55c8:	0c12      	lsrs	r2, r2, #16
    55ca:	18ba      	adds	r2, r7, r2
    55cc:	45a0      	cmp	r8, r4
    55ce:	41a4      	sbcs	r4, r4
    55d0:	425f      	negs	r7, r3
    55d2:	003b      	movs	r3, r7
    55d4:	4264      	negs	r4, r4
    55d6:	4323      	orrs	r3, r4
    55d8:	18d7      	adds	r7, r2, r3
    55da:	4643      	mov	r3, r8
    55dc:	197d      	adds	r5, r7, r5
    55de:	0ddb      	lsrs	r3, r3, #23
    55e0:	026d      	lsls	r5, r5, #9
    55e2:	431d      	orrs	r5, r3
    55e4:	465b      	mov	r3, fp
    55e6:	025a      	lsls	r2, r3, #9
    55e8:	9b05      	ldr	r3, [sp, #20]
    55ea:	431a      	orrs	r2, r3
    55ec:	1e53      	subs	r3, r2, #1
    55ee:	419a      	sbcs	r2, r3
    55f0:	465b      	mov	r3, fp
    55f2:	0ddb      	lsrs	r3, r3, #23
    55f4:	431a      	orrs	r2, r3
    55f6:	4643      	mov	r3, r8
    55f8:	025b      	lsls	r3, r3, #9
    55fa:	4313      	orrs	r3, r2
    55fc:	01ea      	lsls	r2, r5, #7
    55fe:	d507      	bpl.n	5610 <__aeabi_dmul+0x384>
    5600:	2201      	movs	r2, #1
    5602:	085c      	lsrs	r4, r3, #1
    5604:	4013      	ands	r3, r2
    5606:	4323      	orrs	r3, r4
    5608:	07ea      	lsls	r2, r5, #31
    560a:	9e02      	ldr	r6, [sp, #8]
    560c:	4313      	orrs	r3, r2
    560e:	086d      	lsrs	r5, r5, #1
    5610:	4a57      	ldr	r2, [pc, #348]	; (5770 <__aeabi_dmul+0x4e4>)
    5612:	18b2      	adds	r2, r6, r2
    5614:	2a00      	cmp	r2, #0
    5616:	dd4b      	ble.n	56b0 <__aeabi_dmul+0x424>
    5618:	0758      	lsls	r0, r3, #29
    561a:	d009      	beq.n	5630 <__aeabi_dmul+0x3a4>
    561c:	200f      	movs	r0, #15
    561e:	4018      	ands	r0, r3
    5620:	2804      	cmp	r0, #4
    5622:	d005      	beq.n	5630 <__aeabi_dmul+0x3a4>
    5624:	1d18      	adds	r0, r3, #4
    5626:	4298      	cmp	r0, r3
    5628:	419b      	sbcs	r3, r3
    562a:	425b      	negs	r3, r3
    562c:	18ed      	adds	r5, r5, r3
    562e:	0003      	movs	r3, r0
    5630:	01e8      	lsls	r0, r5, #7
    5632:	d504      	bpl.n	563e <__aeabi_dmul+0x3b2>
    5634:	4a4f      	ldr	r2, [pc, #316]	; (5774 <__aeabi_dmul+0x4e8>)
    5636:	4015      	ands	r5, r2
    5638:	2280      	movs	r2, #128	; 0x80
    563a:	00d2      	lsls	r2, r2, #3
    563c:	18b2      	adds	r2, r6, r2
    563e:	484e      	ldr	r0, [pc, #312]	; (5778 <__aeabi_dmul+0x4ec>)
    5640:	4282      	cmp	r2, r0
    5642:	dd00      	ble.n	5646 <__aeabi_dmul+0x3ba>
    5644:	e6e7      	b.n	5416 <__aeabi_dmul+0x18a>
    5646:	2401      	movs	r4, #1
    5648:	08db      	lsrs	r3, r3, #3
    564a:	0768      	lsls	r0, r5, #29
    564c:	4318      	orrs	r0, r3
    564e:	026d      	lsls	r5, r5, #9
    5650:	0553      	lsls	r3, r2, #21
    5652:	4680      	mov	r8, r0
    5654:	0b2d      	lsrs	r5, r5, #12
    5656:	0d5b      	lsrs	r3, r3, #21
    5658:	400c      	ands	r4, r1
    565a:	e67d      	b.n	5358 <__aeabi_dmul+0xcc>
    565c:	2280      	movs	r2, #128	; 0x80
    565e:	4659      	mov	r1, fp
    5660:	0312      	lsls	r2, r2, #12
    5662:	4211      	tst	r1, r2
    5664:	d008      	beq.n	5678 <__aeabi_dmul+0x3ec>
    5666:	4215      	tst	r5, r2
    5668:	d106      	bne.n	5678 <__aeabi_dmul+0x3ec>
    566a:	4315      	orrs	r5, r2
    566c:	032d      	lsls	r5, r5, #12
    566e:	4698      	mov	r8, r3
    5670:	0b2d      	lsrs	r5, r5, #12
    5672:	464c      	mov	r4, r9
    5674:	4b41      	ldr	r3, [pc, #260]	; (577c <__aeabi_dmul+0x4f0>)
    5676:	e66f      	b.n	5358 <__aeabi_dmul+0xcc>
    5678:	465d      	mov	r5, fp
    567a:	4315      	orrs	r5, r2
    567c:	032d      	lsls	r5, r5, #12
    567e:	0b2d      	lsrs	r5, r5, #12
    5680:	4b3e      	ldr	r3, [pc, #248]	; (577c <__aeabi_dmul+0x4f0>)
    5682:	e669      	b.n	5358 <__aeabi_dmul+0xcc>
    5684:	0003      	movs	r3, r0
    5686:	4655      	mov	r5, sl
    5688:	3b28      	subs	r3, #40	; 0x28
    568a:	409d      	lsls	r5, r3
    568c:	2300      	movs	r3, #0
    568e:	e6bc      	b.n	540a <__aeabi_dmul+0x17e>
    5690:	4650      	mov	r0, sl
    5692:	f000 fe05 	bl	62a0 <__clzsi2>
    5696:	3020      	adds	r0, #32
    5698:	e6a8      	b.n	53ec <__aeabi_dmul+0x160>
    569a:	0003      	movs	r3, r0
    569c:	3b28      	subs	r3, #40	; 0x28
    569e:	409f      	lsls	r7, r3
    56a0:	2300      	movs	r3, #0
    56a2:	46bb      	mov	fp, r7
    56a4:	4698      	mov	r8, r3
    56a6:	e689      	b.n	53bc <__aeabi_dmul+0x130>
    56a8:	f000 fdfa 	bl	62a0 <__clzsi2>
    56ac:	3020      	adds	r0, #32
    56ae:	e673      	b.n	5398 <__aeabi_dmul+0x10c>
    56b0:	2401      	movs	r4, #1
    56b2:	1aa6      	subs	r6, r4, r2
    56b4:	2e38      	cmp	r6, #56	; 0x38
    56b6:	dd07      	ble.n	56c8 <__aeabi_dmul+0x43c>
    56b8:	2200      	movs	r2, #0
    56ba:	400c      	ands	r4, r1
    56bc:	2300      	movs	r3, #0
    56be:	2500      	movs	r5, #0
    56c0:	4690      	mov	r8, r2
    56c2:	e649      	b.n	5358 <__aeabi_dmul+0xcc>
    56c4:	9e02      	ldr	r6, [sp, #8]
    56c6:	e7a3      	b.n	5610 <__aeabi_dmul+0x384>
    56c8:	2e1f      	cmp	r6, #31
    56ca:	dc20      	bgt.n	570e <__aeabi_dmul+0x482>
    56cc:	2220      	movs	r2, #32
    56ce:	002c      	movs	r4, r5
    56d0:	0018      	movs	r0, r3
    56d2:	1b92      	subs	r2, r2, r6
    56d4:	40f0      	lsrs	r0, r6
    56d6:	4094      	lsls	r4, r2
    56d8:	4093      	lsls	r3, r2
    56da:	4304      	orrs	r4, r0
    56dc:	1e58      	subs	r0, r3, #1
    56de:	4183      	sbcs	r3, r0
    56e0:	431c      	orrs	r4, r3
    56e2:	40f5      	lsrs	r5, r6
    56e4:	0763      	lsls	r3, r4, #29
    56e6:	d009      	beq.n	56fc <__aeabi_dmul+0x470>
    56e8:	230f      	movs	r3, #15
    56ea:	4023      	ands	r3, r4
    56ec:	2b04      	cmp	r3, #4
    56ee:	d005      	beq.n	56fc <__aeabi_dmul+0x470>
    56f0:	0023      	movs	r3, r4
    56f2:	1d1c      	adds	r4, r3, #4
    56f4:	429c      	cmp	r4, r3
    56f6:	4192      	sbcs	r2, r2
    56f8:	4252      	negs	r2, r2
    56fa:	18ad      	adds	r5, r5, r2
    56fc:	022b      	lsls	r3, r5, #8
    56fe:	d51f      	bpl.n	5740 <__aeabi_dmul+0x4b4>
    5700:	2401      	movs	r4, #1
    5702:	2200      	movs	r2, #0
    5704:	400c      	ands	r4, r1
    5706:	2301      	movs	r3, #1
    5708:	2500      	movs	r5, #0
    570a:	4690      	mov	r8, r2
    570c:	e624      	b.n	5358 <__aeabi_dmul+0xcc>
    570e:	201f      	movs	r0, #31
    5710:	002c      	movs	r4, r5
    5712:	4240      	negs	r0, r0
    5714:	1a82      	subs	r2, r0, r2
    5716:	40d4      	lsrs	r4, r2
    5718:	2e20      	cmp	r6, #32
    571a:	d01c      	beq.n	5756 <__aeabi_dmul+0x4ca>
    571c:	2240      	movs	r2, #64	; 0x40
    571e:	1b96      	subs	r6, r2, r6
    5720:	40b5      	lsls	r5, r6
    5722:	432b      	orrs	r3, r5
    5724:	1e58      	subs	r0, r3, #1
    5726:	4183      	sbcs	r3, r0
    5728:	2007      	movs	r0, #7
    572a:	4323      	orrs	r3, r4
    572c:	4018      	ands	r0, r3
    572e:	2500      	movs	r5, #0
    5730:	2800      	cmp	r0, #0
    5732:	d009      	beq.n	5748 <__aeabi_dmul+0x4bc>
    5734:	220f      	movs	r2, #15
    5736:	2500      	movs	r5, #0
    5738:	401a      	ands	r2, r3
    573a:	001c      	movs	r4, r3
    573c:	2a04      	cmp	r2, #4
    573e:	d1d8      	bne.n	56f2 <__aeabi_dmul+0x466>
    5740:	0023      	movs	r3, r4
    5742:	0768      	lsls	r0, r5, #29
    5744:	026d      	lsls	r5, r5, #9
    5746:	0b2d      	lsrs	r5, r5, #12
    5748:	2401      	movs	r4, #1
    574a:	08db      	lsrs	r3, r3, #3
    574c:	4303      	orrs	r3, r0
    574e:	4698      	mov	r8, r3
    5750:	400c      	ands	r4, r1
    5752:	2300      	movs	r3, #0
    5754:	e600      	b.n	5358 <__aeabi_dmul+0xcc>
    5756:	2500      	movs	r5, #0
    5758:	e7e3      	b.n	5722 <__aeabi_dmul+0x496>
    575a:	2280      	movs	r2, #128	; 0x80
    575c:	2401      	movs	r4, #1
    575e:	0312      	lsls	r2, r2, #12
    5760:	4315      	orrs	r5, r2
    5762:	032d      	lsls	r5, r5, #12
    5764:	4698      	mov	r8, r3
    5766:	0b2d      	lsrs	r5, r5, #12
    5768:	400c      	ands	r4, r1
    576a:	4b04      	ldr	r3, [pc, #16]	; (577c <__aeabi_dmul+0x4f0>)
    576c:	e5f4      	b.n	5358 <__aeabi_dmul+0xcc>
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	000003ff 	.word	0x000003ff
    5774:	feffffff 	.word	0xfeffffff
    5778:	000007fe 	.word	0x000007fe
    577c:	000007ff 	.word	0x000007ff

00005780 <__aeabi_dsub>:
    5780:	b5f0      	push	{r4, r5, r6, r7, lr}
    5782:	4657      	mov	r7, sl
    5784:	464e      	mov	r6, r9
    5786:	4645      	mov	r5, r8
    5788:	b4e0      	push	{r5, r6, r7}
    578a:	000e      	movs	r6, r1
    578c:	0011      	movs	r1, r2
    578e:	0ff2      	lsrs	r2, r6, #31
    5790:	4692      	mov	sl, r2
    5792:	00c5      	lsls	r5, r0, #3
    5794:	0f42      	lsrs	r2, r0, #29
    5796:	0318      	lsls	r0, r3, #12
    5798:	0337      	lsls	r7, r6, #12
    579a:	0074      	lsls	r4, r6, #1
    579c:	0a40      	lsrs	r0, r0, #9
    579e:	0f4e      	lsrs	r6, r1, #29
    57a0:	0a7f      	lsrs	r7, r7, #9
    57a2:	4330      	orrs	r0, r6
    57a4:	4ecf      	ldr	r6, [pc, #828]	; (5ae4 <__aeabi_dsub+0x364>)
    57a6:	4317      	orrs	r7, r2
    57a8:	005a      	lsls	r2, r3, #1
    57aa:	0d64      	lsrs	r4, r4, #21
    57ac:	0d52      	lsrs	r2, r2, #21
    57ae:	0fdb      	lsrs	r3, r3, #31
    57b0:	00c9      	lsls	r1, r1, #3
    57b2:	42b2      	cmp	r2, r6
    57b4:	d100      	bne.n	57b8 <__aeabi_dsub+0x38>
    57b6:	e0e5      	b.n	5984 <__aeabi_dsub+0x204>
    57b8:	2601      	movs	r6, #1
    57ba:	4073      	eors	r3, r6
    57bc:	1aa6      	subs	r6, r4, r2
    57be:	46b4      	mov	ip, r6
    57c0:	4553      	cmp	r3, sl
    57c2:	d100      	bne.n	57c6 <__aeabi_dsub+0x46>
    57c4:	e0af      	b.n	5926 <__aeabi_dsub+0x1a6>
    57c6:	2e00      	cmp	r6, #0
    57c8:	dc00      	bgt.n	57cc <__aeabi_dsub+0x4c>
    57ca:	e10d      	b.n	59e8 <__aeabi_dsub+0x268>
    57cc:	2a00      	cmp	r2, #0
    57ce:	d13a      	bne.n	5846 <__aeabi_dsub+0xc6>
    57d0:	0003      	movs	r3, r0
    57d2:	430b      	orrs	r3, r1
    57d4:	d000      	beq.n	57d8 <__aeabi_dsub+0x58>
    57d6:	e0e4      	b.n	59a2 <__aeabi_dsub+0x222>
    57d8:	076b      	lsls	r3, r5, #29
    57da:	d009      	beq.n	57f0 <__aeabi_dsub+0x70>
    57dc:	230f      	movs	r3, #15
    57de:	402b      	ands	r3, r5
    57e0:	2b04      	cmp	r3, #4
    57e2:	d005      	beq.n	57f0 <__aeabi_dsub+0x70>
    57e4:	1d2b      	adds	r3, r5, #4
    57e6:	42ab      	cmp	r3, r5
    57e8:	41ad      	sbcs	r5, r5
    57ea:	426d      	negs	r5, r5
    57ec:	197f      	adds	r7, r7, r5
    57ee:	001d      	movs	r5, r3
    57f0:	023b      	lsls	r3, r7, #8
    57f2:	d400      	bmi.n	57f6 <__aeabi_dsub+0x76>
    57f4:	e088      	b.n	5908 <__aeabi_dsub+0x188>
    57f6:	4bbb      	ldr	r3, [pc, #748]	; (5ae4 <__aeabi_dsub+0x364>)
    57f8:	3401      	adds	r4, #1
    57fa:	429c      	cmp	r4, r3
    57fc:	d100      	bne.n	5800 <__aeabi_dsub+0x80>
    57fe:	e110      	b.n	5a22 <__aeabi_dsub+0x2a2>
    5800:	003a      	movs	r2, r7
    5802:	4bb9      	ldr	r3, [pc, #740]	; (5ae8 <__aeabi_dsub+0x368>)
    5804:	4651      	mov	r1, sl
    5806:	401a      	ands	r2, r3
    5808:	2301      	movs	r3, #1
    580a:	0750      	lsls	r0, r2, #29
    580c:	08ed      	lsrs	r5, r5, #3
    580e:	0252      	lsls	r2, r2, #9
    5810:	0564      	lsls	r4, r4, #21
    5812:	4305      	orrs	r5, r0
    5814:	0b12      	lsrs	r2, r2, #12
    5816:	0d64      	lsrs	r4, r4, #21
    5818:	400b      	ands	r3, r1
    581a:	2100      	movs	r1, #0
    581c:	0028      	movs	r0, r5
    581e:	0312      	lsls	r2, r2, #12
    5820:	0d0d      	lsrs	r5, r1, #20
    5822:	0b12      	lsrs	r2, r2, #12
    5824:	0564      	lsls	r4, r4, #21
    5826:	052d      	lsls	r5, r5, #20
    5828:	4315      	orrs	r5, r2
    582a:	0862      	lsrs	r2, r4, #1
    582c:	4caf      	ldr	r4, [pc, #700]	; (5aec <__aeabi_dsub+0x36c>)
    582e:	07db      	lsls	r3, r3, #31
    5830:	402c      	ands	r4, r5
    5832:	4314      	orrs	r4, r2
    5834:	0064      	lsls	r4, r4, #1
    5836:	0864      	lsrs	r4, r4, #1
    5838:	431c      	orrs	r4, r3
    583a:	0021      	movs	r1, r4
    583c:	bc1c      	pop	{r2, r3, r4}
    583e:	4690      	mov	r8, r2
    5840:	4699      	mov	r9, r3
    5842:	46a2      	mov	sl, r4
    5844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5846:	4ba7      	ldr	r3, [pc, #668]	; (5ae4 <__aeabi_dsub+0x364>)
    5848:	429c      	cmp	r4, r3
    584a:	d0c5      	beq.n	57d8 <__aeabi_dsub+0x58>
    584c:	2380      	movs	r3, #128	; 0x80
    584e:	041b      	lsls	r3, r3, #16
    5850:	4318      	orrs	r0, r3
    5852:	4663      	mov	r3, ip
    5854:	2b38      	cmp	r3, #56	; 0x38
    5856:	dd00      	ble.n	585a <__aeabi_dsub+0xda>
    5858:	e0fd      	b.n	5a56 <__aeabi_dsub+0x2d6>
    585a:	2b1f      	cmp	r3, #31
    585c:	dd00      	ble.n	5860 <__aeabi_dsub+0xe0>
    585e:	e130      	b.n	5ac2 <__aeabi_dsub+0x342>
    5860:	4662      	mov	r2, ip
    5862:	2320      	movs	r3, #32
    5864:	1a9b      	subs	r3, r3, r2
    5866:	0002      	movs	r2, r0
    5868:	409a      	lsls	r2, r3
    586a:	4666      	mov	r6, ip
    586c:	4690      	mov	r8, r2
    586e:	000a      	movs	r2, r1
    5870:	4099      	lsls	r1, r3
    5872:	40f2      	lsrs	r2, r6
    5874:	4646      	mov	r6, r8
    5876:	1e4b      	subs	r3, r1, #1
    5878:	4199      	sbcs	r1, r3
    587a:	4332      	orrs	r2, r6
    587c:	4311      	orrs	r1, r2
    587e:	4663      	mov	r3, ip
    5880:	0002      	movs	r2, r0
    5882:	40da      	lsrs	r2, r3
    5884:	1a69      	subs	r1, r5, r1
    5886:	428d      	cmp	r5, r1
    5888:	419b      	sbcs	r3, r3
    588a:	000d      	movs	r5, r1
    588c:	1aba      	subs	r2, r7, r2
    588e:	425b      	negs	r3, r3
    5890:	1ad7      	subs	r7, r2, r3
    5892:	023b      	lsls	r3, r7, #8
    5894:	d535      	bpl.n	5902 <__aeabi_dsub+0x182>
    5896:	027a      	lsls	r2, r7, #9
    5898:	0a53      	lsrs	r3, r2, #9
    589a:	4698      	mov	r8, r3
    589c:	4643      	mov	r3, r8
    589e:	2b00      	cmp	r3, #0
    58a0:	d100      	bne.n	58a4 <__aeabi_dsub+0x124>
    58a2:	e0c4      	b.n	5a2e <__aeabi_dsub+0x2ae>
    58a4:	4640      	mov	r0, r8
    58a6:	f000 fcfb 	bl	62a0 <__clzsi2>
    58aa:	0003      	movs	r3, r0
    58ac:	3b08      	subs	r3, #8
    58ae:	2b1f      	cmp	r3, #31
    58b0:	dd00      	ble.n	58b4 <__aeabi_dsub+0x134>
    58b2:	e0c5      	b.n	5a40 <__aeabi_dsub+0x2c0>
    58b4:	2220      	movs	r2, #32
    58b6:	0029      	movs	r1, r5
    58b8:	1ad2      	subs	r2, r2, r3
    58ba:	4647      	mov	r7, r8
    58bc:	40d1      	lsrs	r1, r2
    58be:	409f      	lsls	r7, r3
    58c0:	000a      	movs	r2, r1
    58c2:	409d      	lsls	r5, r3
    58c4:	433a      	orrs	r2, r7
    58c6:	429c      	cmp	r4, r3
    58c8:	dd00      	ble.n	58cc <__aeabi_dsub+0x14c>
    58ca:	e0c0      	b.n	5a4e <__aeabi_dsub+0x2ce>
    58cc:	1b1c      	subs	r4, r3, r4
    58ce:	1c63      	adds	r3, r4, #1
    58d0:	2b1f      	cmp	r3, #31
    58d2:	dd00      	ble.n	58d6 <__aeabi_dsub+0x156>
    58d4:	e0e4      	b.n	5aa0 <__aeabi_dsub+0x320>
    58d6:	2120      	movs	r1, #32
    58d8:	0014      	movs	r4, r2
    58da:	0028      	movs	r0, r5
    58dc:	1ac9      	subs	r1, r1, r3
    58de:	40d8      	lsrs	r0, r3
    58e0:	408c      	lsls	r4, r1
    58e2:	408d      	lsls	r5, r1
    58e4:	4304      	orrs	r4, r0
    58e6:	40da      	lsrs	r2, r3
    58e8:	1e68      	subs	r0, r5, #1
    58ea:	4185      	sbcs	r5, r0
    58ec:	0017      	movs	r7, r2
    58ee:	4325      	orrs	r5, r4
    58f0:	2400      	movs	r4, #0
    58f2:	e771      	b.n	57d8 <__aeabi_dsub+0x58>
    58f4:	4642      	mov	r2, r8
    58f6:	4663      	mov	r3, ip
    58f8:	431a      	orrs	r2, r3
    58fa:	d100      	bne.n	58fe <__aeabi_dsub+0x17e>
    58fc:	e24c      	b.n	5d98 <__aeabi_dsub+0x618>
    58fe:	4667      	mov	r7, ip
    5900:	4645      	mov	r5, r8
    5902:	076b      	lsls	r3, r5, #29
    5904:	d000      	beq.n	5908 <__aeabi_dsub+0x188>
    5906:	e769      	b.n	57dc <__aeabi_dsub+0x5c>
    5908:	2301      	movs	r3, #1
    590a:	4651      	mov	r1, sl
    590c:	0778      	lsls	r0, r7, #29
    590e:	08ed      	lsrs	r5, r5, #3
    5910:	08fa      	lsrs	r2, r7, #3
    5912:	400b      	ands	r3, r1
    5914:	4305      	orrs	r5, r0
    5916:	4973      	ldr	r1, [pc, #460]	; (5ae4 <__aeabi_dsub+0x364>)
    5918:	428c      	cmp	r4, r1
    591a:	d038      	beq.n	598e <__aeabi_dsub+0x20e>
    591c:	0312      	lsls	r2, r2, #12
    591e:	0564      	lsls	r4, r4, #21
    5920:	0b12      	lsrs	r2, r2, #12
    5922:	0d64      	lsrs	r4, r4, #21
    5924:	e779      	b.n	581a <__aeabi_dsub+0x9a>
    5926:	2e00      	cmp	r6, #0
    5928:	dc00      	bgt.n	592c <__aeabi_dsub+0x1ac>
    592a:	e09a      	b.n	5a62 <__aeabi_dsub+0x2e2>
    592c:	2a00      	cmp	r2, #0
    592e:	d047      	beq.n	59c0 <__aeabi_dsub+0x240>
    5930:	4a6c      	ldr	r2, [pc, #432]	; (5ae4 <__aeabi_dsub+0x364>)
    5932:	4294      	cmp	r4, r2
    5934:	d100      	bne.n	5938 <__aeabi_dsub+0x1b8>
    5936:	e74f      	b.n	57d8 <__aeabi_dsub+0x58>
    5938:	2280      	movs	r2, #128	; 0x80
    593a:	0412      	lsls	r2, r2, #16
    593c:	4310      	orrs	r0, r2
    593e:	4662      	mov	r2, ip
    5940:	2a38      	cmp	r2, #56	; 0x38
    5942:	dc00      	bgt.n	5946 <__aeabi_dsub+0x1c6>
    5944:	e108      	b.n	5b58 <__aeabi_dsub+0x3d8>
    5946:	4301      	orrs	r1, r0
    5948:	1e48      	subs	r0, r1, #1
    594a:	4181      	sbcs	r1, r0
    594c:	2200      	movs	r2, #0
    594e:	b2c9      	uxtb	r1, r1
    5950:	1949      	adds	r1, r1, r5
    5952:	19d2      	adds	r2, r2, r7
    5954:	42a9      	cmp	r1, r5
    5956:	41bf      	sbcs	r7, r7
    5958:	000d      	movs	r5, r1
    595a:	427f      	negs	r7, r7
    595c:	18bf      	adds	r7, r7, r2
    595e:	023a      	lsls	r2, r7, #8
    5960:	d400      	bmi.n	5964 <__aeabi_dsub+0x1e4>
    5962:	e142      	b.n	5bea <__aeabi_dsub+0x46a>
    5964:	4a5f      	ldr	r2, [pc, #380]	; (5ae4 <__aeabi_dsub+0x364>)
    5966:	3401      	adds	r4, #1
    5968:	4294      	cmp	r4, r2
    596a:	d100      	bne.n	596e <__aeabi_dsub+0x1ee>
    596c:	e14e      	b.n	5c0c <__aeabi_dsub+0x48c>
    596e:	2001      	movs	r0, #1
    5970:	4a5d      	ldr	r2, [pc, #372]	; (5ae8 <__aeabi_dsub+0x368>)
    5972:	0869      	lsrs	r1, r5, #1
    5974:	403a      	ands	r2, r7
    5976:	4028      	ands	r0, r5
    5978:	4308      	orrs	r0, r1
    597a:	07d5      	lsls	r5, r2, #31
    597c:	4305      	orrs	r5, r0
    597e:	0857      	lsrs	r7, r2, #1
    5980:	469a      	mov	sl, r3
    5982:	e729      	b.n	57d8 <__aeabi_dsub+0x58>
    5984:	0006      	movs	r6, r0
    5986:	430e      	orrs	r6, r1
    5988:	d000      	beq.n	598c <__aeabi_dsub+0x20c>
    598a:	e717      	b.n	57bc <__aeabi_dsub+0x3c>
    598c:	e714      	b.n	57b8 <__aeabi_dsub+0x38>
    598e:	0029      	movs	r1, r5
    5990:	4311      	orrs	r1, r2
    5992:	d100      	bne.n	5996 <__aeabi_dsub+0x216>
    5994:	e1f9      	b.n	5d8a <__aeabi_dsub+0x60a>
    5996:	2180      	movs	r1, #128	; 0x80
    5998:	0309      	lsls	r1, r1, #12
    599a:	430a      	orrs	r2, r1
    599c:	0312      	lsls	r2, r2, #12
    599e:	0b12      	lsrs	r2, r2, #12
    59a0:	e73b      	b.n	581a <__aeabi_dsub+0x9a>
    59a2:	2301      	movs	r3, #1
    59a4:	425b      	negs	r3, r3
    59a6:	4698      	mov	r8, r3
    59a8:	44c4      	add	ip, r8
    59aa:	4663      	mov	r3, ip
    59ac:	2b00      	cmp	r3, #0
    59ae:	d172      	bne.n	5a96 <__aeabi_dsub+0x316>
    59b0:	1a69      	subs	r1, r5, r1
    59b2:	428d      	cmp	r5, r1
    59b4:	419b      	sbcs	r3, r3
    59b6:	1a3f      	subs	r7, r7, r0
    59b8:	425b      	negs	r3, r3
    59ba:	1aff      	subs	r7, r7, r3
    59bc:	000d      	movs	r5, r1
    59be:	e768      	b.n	5892 <__aeabi_dsub+0x112>
    59c0:	0002      	movs	r2, r0
    59c2:	430a      	orrs	r2, r1
    59c4:	d100      	bne.n	59c8 <__aeabi_dsub+0x248>
    59c6:	e707      	b.n	57d8 <__aeabi_dsub+0x58>
    59c8:	2201      	movs	r2, #1
    59ca:	4252      	negs	r2, r2
    59cc:	4690      	mov	r8, r2
    59ce:	44c4      	add	ip, r8
    59d0:	4662      	mov	r2, ip
    59d2:	2a00      	cmp	r2, #0
    59d4:	d000      	beq.n	59d8 <__aeabi_dsub+0x258>
    59d6:	e0e6      	b.n	5ba6 <__aeabi_dsub+0x426>
    59d8:	1869      	adds	r1, r5, r1
    59da:	42a9      	cmp	r1, r5
    59dc:	41b6      	sbcs	r6, r6
    59de:	183f      	adds	r7, r7, r0
    59e0:	4276      	negs	r6, r6
    59e2:	19f7      	adds	r7, r6, r7
    59e4:	000d      	movs	r5, r1
    59e6:	e7ba      	b.n	595e <__aeabi_dsub+0x1de>
    59e8:	2e00      	cmp	r6, #0
    59ea:	d000      	beq.n	59ee <__aeabi_dsub+0x26e>
    59ec:	e080      	b.n	5af0 <__aeabi_dsub+0x370>
    59ee:	1c62      	adds	r2, r4, #1
    59f0:	0552      	lsls	r2, r2, #21
    59f2:	0d52      	lsrs	r2, r2, #21
    59f4:	2a01      	cmp	r2, #1
    59f6:	dc00      	bgt.n	59fa <__aeabi_dsub+0x27a>
    59f8:	e0f9      	b.n	5bee <__aeabi_dsub+0x46e>
    59fa:	1a6a      	subs	r2, r5, r1
    59fc:	4691      	mov	r9, r2
    59fe:	454d      	cmp	r5, r9
    5a00:	41b6      	sbcs	r6, r6
    5a02:	1a3a      	subs	r2, r7, r0
    5a04:	4276      	negs	r6, r6
    5a06:	1b92      	subs	r2, r2, r6
    5a08:	4690      	mov	r8, r2
    5a0a:	0212      	lsls	r2, r2, #8
    5a0c:	d400      	bmi.n	5a10 <__aeabi_dsub+0x290>
    5a0e:	e099      	b.n	5b44 <__aeabi_dsub+0x3c4>
    5a10:	1b4d      	subs	r5, r1, r5
    5a12:	42a9      	cmp	r1, r5
    5a14:	4189      	sbcs	r1, r1
    5a16:	1bc7      	subs	r7, r0, r7
    5a18:	4249      	negs	r1, r1
    5a1a:	1a7a      	subs	r2, r7, r1
    5a1c:	4690      	mov	r8, r2
    5a1e:	469a      	mov	sl, r3
    5a20:	e73c      	b.n	589c <__aeabi_dsub+0x11c>
    5a22:	4652      	mov	r2, sl
    5a24:	2301      	movs	r3, #1
    5a26:	2500      	movs	r5, #0
    5a28:	4013      	ands	r3, r2
    5a2a:	2200      	movs	r2, #0
    5a2c:	e6f5      	b.n	581a <__aeabi_dsub+0x9a>
    5a2e:	0028      	movs	r0, r5
    5a30:	f000 fc36 	bl	62a0 <__clzsi2>
    5a34:	3020      	adds	r0, #32
    5a36:	0003      	movs	r3, r0
    5a38:	3b08      	subs	r3, #8
    5a3a:	2b1f      	cmp	r3, #31
    5a3c:	dc00      	bgt.n	5a40 <__aeabi_dsub+0x2c0>
    5a3e:	e739      	b.n	58b4 <__aeabi_dsub+0x134>
    5a40:	002a      	movs	r2, r5
    5a42:	3828      	subs	r0, #40	; 0x28
    5a44:	4082      	lsls	r2, r0
    5a46:	2500      	movs	r5, #0
    5a48:	429c      	cmp	r4, r3
    5a4a:	dc00      	bgt.n	5a4e <__aeabi_dsub+0x2ce>
    5a4c:	e73e      	b.n	58cc <__aeabi_dsub+0x14c>
    5a4e:	4f26      	ldr	r7, [pc, #152]	; (5ae8 <__aeabi_dsub+0x368>)
    5a50:	1ae4      	subs	r4, r4, r3
    5a52:	4017      	ands	r7, r2
    5a54:	e6c0      	b.n	57d8 <__aeabi_dsub+0x58>
    5a56:	4301      	orrs	r1, r0
    5a58:	1e48      	subs	r0, r1, #1
    5a5a:	4181      	sbcs	r1, r0
    5a5c:	2200      	movs	r2, #0
    5a5e:	b2c9      	uxtb	r1, r1
    5a60:	e710      	b.n	5884 <__aeabi_dsub+0x104>
    5a62:	2e00      	cmp	r6, #0
    5a64:	d000      	beq.n	5a68 <__aeabi_dsub+0x2e8>
    5a66:	e0f1      	b.n	5c4c <__aeabi_dsub+0x4cc>
    5a68:	1c62      	adds	r2, r4, #1
    5a6a:	4694      	mov	ip, r2
    5a6c:	0552      	lsls	r2, r2, #21
    5a6e:	0d52      	lsrs	r2, r2, #21
    5a70:	2a01      	cmp	r2, #1
    5a72:	dc00      	bgt.n	5a76 <__aeabi_dsub+0x2f6>
    5a74:	e0a0      	b.n	5bb8 <__aeabi_dsub+0x438>
    5a76:	4a1b      	ldr	r2, [pc, #108]	; (5ae4 <__aeabi_dsub+0x364>)
    5a78:	4594      	cmp	ip, r2
    5a7a:	d100      	bne.n	5a7e <__aeabi_dsub+0x2fe>
    5a7c:	e0c5      	b.n	5c0a <__aeabi_dsub+0x48a>
    5a7e:	1869      	adds	r1, r5, r1
    5a80:	42a9      	cmp	r1, r5
    5a82:	4192      	sbcs	r2, r2
    5a84:	183f      	adds	r7, r7, r0
    5a86:	4252      	negs	r2, r2
    5a88:	19d2      	adds	r2, r2, r7
    5a8a:	0849      	lsrs	r1, r1, #1
    5a8c:	07d5      	lsls	r5, r2, #31
    5a8e:	430d      	orrs	r5, r1
    5a90:	0857      	lsrs	r7, r2, #1
    5a92:	4664      	mov	r4, ip
    5a94:	e6a0      	b.n	57d8 <__aeabi_dsub+0x58>
    5a96:	4b13      	ldr	r3, [pc, #76]	; (5ae4 <__aeabi_dsub+0x364>)
    5a98:	429c      	cmp	r4, r3
    5a9a:	d000      	beq.n	5a9e <__aeabi_dsub+0x31e>
    5a9c:	e6d9      	b.n	5852 <__aeabi_dsub+0xd2>
    5a9e:	e69b      	b.n	57d8 <__aeabi_dsub+0x58>
    5aa0:	0011      	movs	r1, r2
    5aa2:	3c1f      	subs	r4, #31
    5aa4:	40e1      	lsrs	r1, r4
    5aa6:	000c      	movs	r4, r1
    5aa8:	2b20      	cmp	r3, #32
    5aaa:	d100      	bne.n	5aae <__aeabi_dsub+0x32e>
    5aac:	e080      	b.n	5bb0 <__aeabi_dsub+0x430>
    5aae:	2140      	movs	r1, #64	; 0x40
    5ab0:	1acb      	subs	r3, r1, r3
    5ab2:	409a      	lsls	r2, r3
    5ab4:	4315      	orrs	r5, r2
    5ab6:	1e6a      	subs	r2, r5, #1
    5ab8:	4195      	sbcs	r5, r2
    5aba:	2700      	movs	r7, #0
    5abc:	4325      	orrs	r5, r4
    5abe:	2400      	movs	r4, #0
    5ac0:	e71f      	b.n	5902 <__aeabi_dsub+0x182>
    5ac2:	4663      	mov	r3, ip
    5ac4:	0002      	movs	r2, r0
    5ac6:	3b20      	subs	r3, #32
    5ac8:	40da      	lsrs	r2, r3
    5aca:	4663      	mov	r3, ip
    5acc:	2b20      	cmp	r3, #32
    5ace:	d071      	beq.n	5bb4 <__aeabi_dsub+0x434>
    5ad0:	2340      	movs	r3, #64	; 0x40
    5ad2:	4666      	mov	r6, ip
    5ad4:	1b9b      	subs	r3, r3, r6
    5ad6:	4098      	lsls	r0, r3
    5ad8:	4301      	orrs	r1, r0
    5ada:	1e48      	subs	r0, r1, #1
    5adc:	4181      	sbcs	r1, r0
    5ade:	4311      	orrs	r1, r2
    5ae0:	2200      	movs	r2, #0
    5ae2:	e6cf      	b.n	5884 <__aeabi_dsub+0x104>
    5ae4:	000007ff 	.word	0x000007ff
    5ae8:	ff7fffff 	.word	0xff7fffff
    5aec:	800fffff 	.word	0x800fffff
    5af0:	2c00      	cmp	r4, #0
    5af2:	d048      	beq.n	5b86 <__aeabi_dsub+0x406>
    5af4:	4cca      	ldr	r4, [pc, #808]	; (5e20 <__aeabi_dsub+0x6a0>)
    5af6:	42a2      	cmp	r2, r4
    5af8:	d100      	bne.n	5afc <__aeabi_dsub+0x37c>
    5afa:	e0a2      	b.n	5c42 <__aeabi_dsub+0x4c2>
    5afc:	4274      	negs	r4, r6
    5afe:	46a1      	mov	r9, r4
    5b00:	2480      	movs	r4, #128	; 0x80
    5b02:	0424      	lsls	r4, r4, #16
    5b04:	4327      	orrs	r7, r4
    5b06:	464c      	mov	r4, r9
    5b08:	2c38      	cmp	r4, #56	; 0x38
    5b0a:	dd00      	ble.n	5b0e <__aeabi_dsub+0x38e>
    5b0c:	e0db      	b.n	5cc6 <__aeabi_dsub+0x546>
    5b0e:	2c1f      	cmp	r4, #31
    5b10:	dd00      	ble.n	5b14 <__aeabi_dsub+0x394>
    5b12:	e144      	b.n	5d9e <__aeabi_dsub+0x61e>
    5b14:	464e      	mov	r6, r9
    5b16:	2420      	movs	r4, #32
    5b18:	1ba4      	subs	r4, r4, r6
    5b1a:	003e      	movs	r6, r7
    5b1c:	40a6      	lsls	r6, r4
    5b1e:	46a2      	mov	sl, r4
    5b20:	46b0      	mov	r8, r6
    5b22:	464c      	mov	r4, r9
    5b24:	002e      	movs	r6, r5
    5b26:	40e6      	lsrs	r6, r4
    5b28:	46b4      	mov	ip, r6
    5b2a:	4646      	mov	r6, r8
    5b2c:	4664      	mov	r4, ip
    5b2e:	4326      	orrs	r6, r4
    5b30:	4654      	mov	r4, sl
    5b32:	40a5      	lsls	r5, r4
    5b34:	1e6c      	subs	r4, r5, #1
    5b36:	41a5      	sbcs	r5, r4
    5b38:	0034      	movs	r4, r6
    5b3a:	432c      	orrs	r4, r5
    5b3c:	464d      	mov	r5, r9
    5b3e:	40ef      	lsrs	r7, r5
    5b40:	1b0d      	subs	r5, r1, r4
    5b42:	e028      	b.n	5b96 <__aeabi_dsub+0x416>
    5b44:	464a      	mov	r2, r9
    5b46:	4643      	mov	r3, r8
    5b48:	464d      	mov	r5, r9
    5b4a:	431a      	orrs	r2, r3
    5b4c:	d000      	beq.n	5b50 <__aeabi_dsub+0x3d0>
    5b4e:	e6a5      	b.n	589c <__aeabi_dsub+0x11c>
    5b50:	2300      	movs	r3, #0
    5b52:	2400      	movs	r4, #0
    5b54:	2500      	movs	r5, #0
    5b56:	e6de      	b.n	5916 <__aeabi_dsub+0x196>
    5b58:	2a1f      	cmp	r2, #31
    5b5a:	dc5a      	bgt.n	5c12 <__aeabi_dsub+0x492>
    5b5c:	4666      	mov	r6, ip
    5b5e:	2220      	movs	r2, #32
    5b60:	1b92      	subs	r2, r2, r6
    5b62:	0006      	movs	r6, r0
    5b64:	4096      	lsls	r6, r2
    5b66:	4691      	mov	r9, r2
    5b68:	46b0      	mov	r8, r6
    5b6a:	4662      	mov	r2, ip
    5b6c:	000e      	movs	r6, r1
    5b6e:	40d6      	lsrs	r6, r2
    5b70:	4642      	mov	r2, r8
    5b72:	4316      	orrs	r6, r2
    5b74:	464a      	mov	r2, r9
    5b76:	4091      	lsls	r1, r2
    5b78:	1e4a      	subs	r2, r1, #1
    5b7a:	4191      	sbcs	r1, r2
    5b7c:	0002      	movs	r2, r0
    5b7e:	4660      	mov	r0, ip
    5b80:	4331      	orrs	r1, r6
    5b82:	40c2      	lsrs	r2, r0
    5b84:	e6e4      	b.n	5950 <__aeabi_dsub+0x1d0>
    5b86:	003c      	movs	r4, r7
    5b88:	432c      	orrs	r4, r5
    5b8a:	d05a      	beq.n	5c42 <__aeabi_dsub+0x4c2>
    5b8c:	43f4      	mvns	r4, r6
    5b8e:	46a1      	mov	r9, r4
    5b90:	2c00      	cmp	r4, #0
    5b92:	d152      	bne.n	5c3a <__aeabi_dsub+0x4ba>
    5b94:	1b4d      	subs	r5, r1, r5
    5b96:	42a9      	cmp	r1, r5
    5b98:	4189      	sbcs	r1, r1
    5b9a:	1bc7      	subs	r7, r0, r7
    5b9c:	4249      	negs	r1, r1
    5b9e:	1a7f      	subs	r7, r7, r1
    5ba0:	0014      	movs	r4, r2
    5ba2:	469a      	mov	sl, r3
    5ba4:	e675      	b.n	5892 <__aeabi_dsub+0x112>
    5ba6:	4a9e      	ldr	r2, [pc, #632]	; (5e20 <__aeabi_dsub+0x6a0>)
    5ba8:	4294      	cmp	r4, r2
    5baa:	d000      	beq.n	5bae <__aeabi_dsub+0x42e>
    5bac:	e6c7      	b.n	593e <__aeabi_dsub+0x1be>
    5bae:	e613      	b.n	57d8 <__aeabi_dsub+0x58>
    5bb0:	2200      	movs	r2, #0
    5bb2:	e77f      	b.n	5ab4 <__aeabi_dsub+0x334>
    5bb4:	2000      	movs	r0, #0
    5bb6:	e78f      	b.n	5ad8 <__aeabi_dsub+0x358>
    5bb8:	2c00      	cmp	r4, #0
    5bba:	d000      	beq.n	5bbe <__aeabi_dsub+0x43e>
    5bbc:	e0c8      	b.n	5d50 <__aeabi_dsub+0x5d0>
    5bbe:	003b      	movs	r3, r7
    5bc0:	432b      	orrs	r3, r5
    5bc2:	d100      	bne.n	5bc6 <__aeabi_dsub+0x446>
    5bc4:	e10f      	b.n	5de6 <__aeabi_dsub+0x666>
    5bc6:	0003      	movs	r3, r0
    5bc8:	430b      	orrs	r3, r1
    5bca:	d100      	bne.n	5bce <__aeabi_dsub+0x44e>
    5bcc:	e604      	b.n	57d8 <__aeabi_dsub+0x58>
    5bce:	1869      	adds	r1, r5, r1
    5bd0:	42a9      	cmp	r1, r5
    5bd2:	419b      	sbcs	r3, r3
    5bd4:	183f      	adds	r7, r7, r0
    5bd6:	425b      	negs	r3, r3
    5bd8:	19df      	adds	r7, r3, r7
    5bda:	023b      	lsls	r3, r7, #8
    5bdc:	d400      	bmi.n	5be0 <__aeabi_dsub+0x460>
    5bde:	e11a      	b.n	5e16 <__aeabi_dsub+0x696>
    5be0:	4b90      	ldr	r3, [pc, #576]	; (5e24 <__aeabi_dsub+0x6a4>)
    5be2:	000d      	movs	r5, r1
    5be4:	401f      	ands	r7, r3
    5be6:	4664      	mov	r4, ip
    5be8:	e5f6      	b.n	57d8 <__aeabi_dsub+0x58>
    5bea:	469a      	mov	sl, r3
    5bec:	e689      	b.n	5902 <__aeabi_dsub+0x182>
    5bee:	003a      	movs	r2, r7
    5bf0:	432a      	orrs	r2, r5
    5bf2:	2c00      	cmp	r4, #0
    5bf4:	d15c      	bne.n	5cb0 <__aeabi_dsub+0x530>
    5bf6:	2a00      	cmp	r2, #0
    5bf8:	d175      	bne.n	5ce6 <__aeabi_dsub+0x566>
    5bfa:	0002      	movs	r2, r0
    5bfc:	430a      	orrs	r2, r1
    5bfe:	d100      	bne.n	5c02 <__aeabi_dsub+0x482>
    5c00:	e0ca      	b.n	5d98 <__aeabi_dsub+0x618>
    5c02:	0007      	movs	r7, r0
    5c04:	000d      	movs	r5, r1
    5c06:	469a      	mov	sl, r3
    5c08:	e5e6      	b.n	57d8 <__aeabi_dsub+0x58>
    5c0a:	4664      	mov	r4, ip
    5c0c:	2200      	movs	r2, #0
    5c0e:	2500      	movs	r5, #0
    5c10:	e681      	b.n	5916 <__aeabi_dsub+0x196>
    5c12:	4662      	mov	r2, ip
    5c14:	0006      	movs	r6, r0
    5c16:	3a20      	subs	r2, #32
    5c18:	40d6      	lsrs	r6, r2
    5c1a:	4662      	mov	r2, ip
    5c1c:	46b0      	mov	r8, r6
    5c1e:	2a20      	cmp	r2, #32
    5c20:	d100      	bne.n	5c24 <__aeabi_dsub+0x4a4>
    5c22:	e0b7      	b.n	5d94 <__aeabi_dsub+0x614>
    5c24:	2240      	movs	r2, #64	; 0x40
    5c26:	4666      	mov	r6, ip
    5c28:	1b92      	subs	r2, r2, r6
    5c2a:	4090      	lsls	r0, r2
    5c2c:	4301      	orrs	r1, r0
    5c2e:	4642      	mov	r2, r8
    5c30:	1e48      	subs	r0, r1, #1
    5c32:	4181      	sbcs	r1, r0
    5c34:	4311      	orrs	r1, r2
    5c36:	2200      	movs	r2, #0
    5c38:	e68a      	b.n	5950 <__aeabi_dsub+0x1d0>
    5c3a:	4c79      	ldr	r4, [pc, #484]	; (5e20 <__aeabi_dsub+0x6a0>)
    5c3c:	42a2      	cmp	r2, r4
    5c3e:	d000      	beq.n	5c42 <__aeabi_dsub+0x4c2>
    5c40:	e761      	b.n	5b06 <__aeabi_dsub+0x386>
    5c42:	0007      	movs	r7, r0
    5c44:	000d      	movs	r5, r1
    5c46:	0014      	movs	r4, r2
    5c48:	469a      	mov	sl, r3
    5c4a:	e5c5      	b.n	57d8 <__aeabi_dsub+0x58>
    5c4c:	2c00      	cmp	r4, #0
    5c4e:	d141      	bne.n	5cd4 <__aeabi_dsub+0x554>
    5c50:	003c      	movs	r4, r7
    5c52:	432c      	orrs	r4, r5
    5c54:	d078      	beq.n	5d48 <__aeabi_dsub+0x5c8>
    5c56:	43f4      	mvns	r4, r6
    5c58:	46a1      	mov	r9, r4
    5c5a:	2c00      	cmp	r4, #0
    5c5c:	d020      	beq.n	5ca0 <__aeabi_dsub+0x520>
    5c5e:	4c70      	ldr	r4, [pc, #448]	; (5e20 <__aeabi_dsub+0x6a0>)
    5c60:	42a2      	cmp	r2, r4
    5c62:	d071      	beq.n	5d48 <__aeabi_dsub+0x5c8>
    5c64:	464c      	mov	r4, r9
    5c66:	2c38      	cmp	r4, #56	; 0x38
    5c68:	dd00      	ble.n	5c6c <__aeabi_dsub+0x4ec>
    5c6a:	e0b2      	b.n	5dd2 <__aeabi_dsub+0x652>
    5c6c:	2c1f      	cmp	r4, #31
    5c6e:	dd00      	ble.n	5c72 <__aeabi_dsub+0x4f2>
    5c70:	e0bc      	b.n	5dec <__aeabi_dsub+0x66c>
    5c72:	2620      	movs	r6, #32
    5c74:	1b34      	subs	r4, r6, r4
    5c76:	46a2      	mov	sl, r4
    5c78:	003c      	movs	r4, r7
    5c7a:	4656      	mov	r6, sl
    5c7c:	40b4      	lsls	r4, r6
    5c7e:	464e      	mov	r6, r9
    5c80:	46a0      	mov	r8, r4
    5c82:	002c      	movs	r4, r5
    5c84:	40f4      	lsrs	r4, r6
    5c86:	46a4      	mov	ip, r4
    5c88:	4644      	mov	r4, r8
    5c8a:	4666      	mov	r6, ip
    5c8c:	4334      	orrs	r4, r6
    5c8e:	46a4      	mov	ip, r4
    5c90:	4654      	mov	r4, sl
    5c92:	40a5      	lsls	r5, r4
    5c94:	4664      	mov	r4, ip
    5c96:	1e6e      	subs	r6, r5, #1
    5c98:	41b5      	sbcs	r5, r6
    5c9a:	4325      	orrs	r5, r4
    5c9c:	464c      	mov	r4, r9
    5c9e:	40e7      	lsrs	r7, r4
    5ca0:	186d      	adds	r5, r5, r1
    5ca2:	428d      	cmp	r5, r1
    5ca4:	4189      	sbcs	r1, r1
    5ca6:	183f      	adds	r7, r7, r0
    5ca8:	4249      	negs	r1, r1
    5caa:	19cf      	adds	r7, r1, r7
    5cac:	0014      	movs	r4, r2
    5cae:	e656      	b.n	595e <__aeabi_dsub+0x1de>
    5cb0:	2a00      	cmp	r2, #0
    5cb2:	d12f      	bne.n	5d14 <__aeabi_dsub+0x594>
    5cb4:	0002      	movs	r2, r0
    5cb6:	430a      	orrs	r2, r1
    5cb8:	d100      	bne.n	5cbc <__aeabi_dsub+0x53c>
    5cba:	e084      	b.n	5dc6 <__aeabi_dsub+0x646>
    5cbc:	0007      	movs	r7, r0
    5cbe:	000d      	movs	r5, r1
    5cc0:	469a      	mov	sl, r3
    5cc2:	4c57      	ldr	r4, [pc, #348]	; (5e20 <__aeabi_dsub+0x6a0>)
    5cc4:	e588      	b.n	57d8 <__aeabi_dsub+0x58>
    5cc6:	433d      	orrs	r5, r7
    5cc8:	1e6f      	subs	r7, r5, #1
    5cca:	41bd      	sbcs	r5, r7
    5ccc:	b2ec      	uxtb	r4, r5
    5cce:	2700      	movs	r7, #0
    5cd0:	1b0d      	subs	r5, r1, r4
    5cd2:	e760      	b.n	5b96 <__aeabi_dsub+0x416>
    5cd4:	4c52      	ldr	r4, [pc, #328]	; (5e20 <__aeabi_dsub+0x6a0>)
    5cd6:	42a2      	cmp	r2, r4
    5cd8:	d036      	beq.n	5d48 <__aeabi_dsub+0x5c8>
    5cda:	4274      	negs	r4, r6
    5cdc:	2680      	movs	r6, #128	; 0x80
    5cde:	0436      	lsls	r6, r6, #16
    5ce0:	46a1      	mov	r9, r4
    5ce2:	4337      	orrs	r7, r6
    5ce4:	e7be      	b.n	5c64 <__aeabi_dsub+0x4e4>
    5ce6:	0002      	movs	r2, r0
    5ce8:	430a      	orrs	r2, r1
    5cea:	d100      	bne.n	5cee <__aeabi_dsub+0x56e>
    5cec:	e574      	b.n	57d8 <__aeabi_dsub+0x58>
    5cee:	1a6a      	subs	r2, r5, r1
    5cf0:	4690      	mov	r8, r2
    5cf2:	4545      	cmp	r5, r8
    5cf4:	41b6      	sbcs	r6, r6
    5cf6:	1a3a      	subs	r2, r7, r0
    5cf8:	4276      	negs	r6, r6
    5cfa:	1b92      	subs	r2, r2, r6
    5cfc:	4694      	mov	ip, r2
    5cfe:	0212      	lsls	r2, r2, #8
    5d00:	d400      	bmi.n	5d04 <__aeabi_dsub+0x584>
    5d02:	e5f7      	b.n	58f4 <__aeabi_dsub+0x174>
    5d04:	1b4d      	subs	r5, r1, r5
    5d06:	42a9      	cmp	r1, r5
    5d08:	4189      	sbcs	r1, r1
    5d0a:	1bc7      	subs	r7, r0, r7
    5d0c:	4249      	negs	r1, r1
    5d0e:	1a7f      	subs	r7, r7, r1
    5d10:	469a      	mov	sl, r3
    5d12:	e561      	b.n	57d8 <__aeabi_dsub+0x58>
    5d14:	0002      	movs	r2, r0
    5d16:	430a      	orrs	r2, r1
    5d18:	d03a      	beq.n	5d90 <__aeabi_dsub+0x610>
    5d1a:	08ed      	lsrs	r5, r5, #3
    5d1c:	077c      	lsls	r4, r7, #29
    5d1e:	432c      	orrs	r4, r5
    5d20:	2580      	movs	r5, #128	; 0x80
    5d22:	08fa      	lsrs	r2, r7, #3
    5d24:	032d      	lsls	r5, r5, #12
    5d26:	422a      	tst	r2, r5
    5d28:	d008      	beq.n	5d3c <__aeabi_dsub+0x5bc>
    5d2a:	08c7      	lsrs	r7, r0, #3
    5d2c:	422f      	tst	r7, r5
    5d2e:	d105      	bne.n	5d3c <__aeabi_dsub+0x5bc>
    5d30:	0745      	lsls	r5, r0, #29
    5d32:	002c      	movs	r4, r5
    5d34:	003a      	movs	r2, r7
    5d36:	469a      	mov	sl, r3
    5d38:	08c9      	lsrs	r1, r1, #3
    5d3a:	430c      	orrs	r4, r1
    5d3c:	0f67      	lsrs	r7, r4, #29
    5d3e:	00d2      	lsls	r2, r2, #3
    5d40:	00e5      	lsls	r5, r4, #3
    5d42:	4317      	orrs	r7, r2
    5d44:	4c36      	ldr	r4, [pc, #216]	; (5e20 <__aeabi_dsub+0x6a0>)
    5d46:	e547      	b.n	57d8 <__aeabi_dsub+0x58>
    5d48:	0007      	movs	r7, r0
    5d4a:	000d      	movs	r5, r1
    5d4c:	0014      	movs	r4, r2
    5d4e:	e543      	b.n	57d8 <__aeabi_dsub+0x58>
    5d50:	003a      	movs	r2, r7
    5d52:	432a      	orrs	r2, r5
    5d54:	d043      	beq.n	5dde <__aeabi_dsub+0x65e>
    5d56:	0002      	movs	r2, r0
    5d58:	430a      	orrs	r2, r1
    5d5a:	d019      	beq.n	5d90 <__aeabi_dsub+0x610>
    5d5c:	08ed      	lsrs	r5, r5, #3
    5d5e:	077c      	lsls	r4, r7, #29
    5d60:	432c      	orrs	r4, r5
    5d62:	2580      	movs	r5, #128	; 0x80
    5d64:	08fa      	lsrs	r2, r7, #3
    5d66:	032d      	lsls	r5, r5, #12
    5d68:	422a      	tst	r2, r5
    5d6a:	d007      	beq.n	5d7c <__aeabi_dsub+0x5fc>
    5d6c:	08c6      	lsrs	r6, r0, #3
    5d6e:	422e      	tst	r6, r5
    5d70:	d104      	bne.n	5d7c <__aeabi_dsub+0x5fc>
    5d72:	0747      	lsls	r7, r0, #29
    5d74:	003c      	movs	r4, r7
    5d76:	0032      	movs	r2, r6
    5d78:	08c9      	lsrs	r1, r1, #3
    5d7a:	430c      	orrs	r4, r1
    5d7c:	00d7      	lsls	r7, r2, #3
    5d7e:	0f62      	lsrs	r2, r4, #29
    5d80:	00e5      	lsls	r5, r4, #3
    5d82:	4317      	orrs	r7, r2
    5d84:	469a      	mov	sl, r3
    5d86:	4c26      	ldr	r4, [pc, #152]	; (5e20 <__aeabi_dsub+0x6a0>)
    5d88:	e526      	b.n	57d8 <__aeabi_dsub+0x58>
    5d8a:	2200      	movs	r2, #0
    5d8c:	2500      	movs	r5, #0
    5d8e:	e544      	b.n	581a <__aeabi_dsub+0x9a>
    5d90:	4c23      	ldr	r4, [pc, #140]	; (5e20 <__aeabi_dsub+0x6a0>)
    5d92:	e521      	b.n	57d8 <__aeabi_dsub+0x58>
    5d94:	2000      	movs	r0, #0
    5d96:	e749      	b.n	5c2c <__aeabi_dsub+0x4ac>
    5d98:	2300      	movs	r3, #0
    5d9a:	2500      	movs	r5, #0
    5d9c:	e5bb      	b.n	5916 <__aeabi_dsub+0x196>
    5d9e:	464c      	mov	r4, r9
    5da0:	003e      	movs	r6, r7
    5da2:	3c20      	subs	r4, #32
    5da4:	40e6      	lsrs	r6, r4
    5da6:	464c      	mov	r4, r9
    5da8:	46b4      	mov	ip, r6
    5daa:	2c20      	cmp	r4, #32
    5dac:	d031      	beq.n	5e12 <__aeabi_dsub+0x692>
    5dae:	2440      	movs	r4, #64	; 0x40
    5db0:	464e      	mov	r6, r9
    5db2:	1ba6      	subs	r6, r4, r6
    5db4:	40b7      	lsls	r7, r6
    5db6:	433d      	orrs	r5, r7
    5db8:	1e6c      	subs	r4, r5, #1
    5dba:	41a5      	sbcs	r5, r4
    5dbc:	4664      	mov	r4, ip
    5dbe:	432c      	orrs	r4, r5
    5dc0:	2700      	movs	r7, #0
    5dc2:	1b0d      	subs	r5, r1, r4
    5dc4:	e6e7      	b.n	5b96 <__aeabi_dsub+0x416>
    5dc6:	2280      	movs	r2, #128	; 0x80
    5dc8:	2300      	movs	r3, #0
    5dca:	0312      	lsls	r2, r2, #12
    5dcc:	4c14      	ldr	r4, [pc, #80]	; (5e20 <__aeabi_dsub+0x6a0>)
    5dce:	2500      	movs	r5, #0
    5dd0:	e5a1      	b.n	5916 <__aeabi_dsub+0x196>
    5dd2:	433d      	orrs	r5, r7
    5dd4:	1e6f      	subs	r7, r5, #1
    5dd6:	41bd      	sbcs	r5, r7
    5dd8:	2700      	movs	r7, #0
    5dda:	b2ed      	uxtb	r5, r5
    5ddc:	e760      	b.n	5ca0 <__aeabi_dsub+0x520>
    5dde:	0007      	movs	r7, r0
    5de0:	000d      	movs	r5, r1
    5de2:	4c0f      	ldr	r4, [pc, #60]	; (5e20 <__aeabi_dsub+0x6a0>)
    5de4:	e4f8      	b.n	57d8 <__aeabi_dsub+0x58>
    5de6:	0007      	movs	r7, r0
    5de8:	000d      	movs	r5, r1
    5dea:	e4f5      	b.n	57d8 <__aeabi_dsub+0x58>
    5dec:	464e      	mov	r6, r9
    5dee:	003c      	movs	r4, r7
    5df0:	3e20      	subs	r6, #32
    5df2:	40f4      	lsrs	r4, r6
    5df4:	46a0      	mov	r8, r4
    5df6:	464c      	mov	r4, r9
    5df8:	2c20      	cmp	r4, #32
    5dfa:	d00e      	beq.n	5e1a <__aeabi_dsub+0x69a>
    5dfc:	2440      	movs	r4, #64	; 0x40
    5dfe:	464e      	mov	r6, r9
    5e00:	1ba4      	subs	r4, r4, r6
    5e02:	40a7      	lsls	r7, r4
    5e04:	433d      	orrs	r5, r7
    5e06:	1e6f      	subs	r7, r5, #1
    5e08:	41bd      	sbcs	r5, r7
    5e0a:	4644      	mov	r4, r8
    5e0c:	2700      	movs	r7, #0
    5e0e:	4325      	orrs	r5, r4
    5e10:	e746      	b.n	5ca0 <__aeabi_dsub+0x520>
    5e12:	2700      	movs	r7, #0
    5e14:	e7cf      	b.n	5db6 <__aeabi_dsub+0x636>
    5e16:	000d      	movs	r5, r1
    5e18:	e573      	b.n	5902 <__aeabi_dsub+0x182>
    5e1a:	2700      	movs	r7, #0
    5e1c:	e7f2      	b.n	5e04 <__aeabi_dsub+0x684>
    5e1e:	46c0      	nop			; (mov r8, r8)
    5e20:	000007ff 	.word	0x000007ff
    5e24:	ff7fffff 	.word	0xff7fffff

00005e28 <__aeabi_dcmpun>:
    5e28:	b570      	push	{r4, r5, r6, lr}
    5e2a:	4e0e      	ldr	r6, [pc, #56]	; (5e64 <__aeabi_dcmpun+0x3c>)
    5e2c:	030c      	lsls	r4, r1, #12
    5e2e:	031d      	lsls	r5, r3, #12
    5e30:	0049      	lsls	r1, r1, #1
    5e32:	005b      	lsls	r3, r3, #1
    5e34:	0b24      	lsrs	r4, r4, #12
    5e36:	0d49      	lsrs	r1, r1, #21
    5e38:	0b2d      	lsrs	r5, r5, #12
    5e3a:	0d5b      	lsrs	r3, r3, #21
    5e3c:	42b1      	cmp	r1, r6
    5e3e:	d004      	beq.n	5e4a <__aeabi_dcmpun+0x22>
    5e40:	4908      	ldr	r1, [pc, #32]	; (5e64 <__aeabi_dcmpun+0x3c>)
    5e42:	2000      	movs	r0, #0
    5e44:	428b      	cmp	r3, r1
    5e46:	d008      	beq.n	5e5a <__aeabi_dcmpun+0x32>
    5e48:	bd70      	pop	{r4, r5, r6, pc}
    5e4a:	4304      	orrs	r4, r0
    5e4c:	2001      	movs	r0, #1
    5e4e:	2c00      	cmp	r4, #0
    5e50:	d1fa      	bne.n	5e48 <__aeabi_dcmpun+0x20>
    5e52:	4904      	ldr	r1, [pc, #16]	; (5e64 <__aeabi_dcmpun+0x3c>)
    5e54:	2000      	movs	r0, #0
    5e56:	428b      	cmp	r3, r1
    5e58:	d1f6      	bne.n	5e48 <__aeabi_dcmpun+0x20>
    5e5a:	4315      	orrs	r5, r2
    5e5c:	0028      	movs	r0, r5
    5e5e:	1e45      	subs	r5, r0, #1
    5e60:	41a8      	sbcs	r0, r5
    5e62:	e7f1      	b.n	5e48 <__aeabi_dcmpun+0x20>
    5e64:	000007ff 	.word	0x000007ff

00005e68 <__aeabi_d2iz>:
    5e68:	030b      	lsls	r3, r1, #12
    5e6a:	b530      	push	{r4, r5, lr}
    5e6c:	4d13      	ldr	r5, [pc, #76]	; (5ebc <__aeabi_d2iz+0x54>)
    5e6e:	0b1a      	lsrs	r2, r3, #12
    5e70:	004b      	lsls	r3, r1, #1
    5e72:	0d5b      	lsrs	r3, r3, #21
    5e74:	0fc9      	lsrs	r1, r1, #31
    5e76:	2400      	movs	r4, #0
    5e78:	42ab      	cmp	r3, r5
    5e7a:	dd11      	ble.n	5ea0 <__aeabi_d2iz+0x38>
    5e7c:	4c10      	ldr	r4, [pc, #64]	; (5ec0 <__aeabi_d2iz+0x58>)
    5e7e:	42a3      	cmp	r3, r4
    5e80:	dc10      	bgt.n	5ea4 <__aeabi_d2iz+0x3c>
    5e82:	2480      	movs	r4, #128	; 0x80
    5e84:	0364      	lsls	r4, r4, #13
    5e86:	4322      	orrs	r2, r4
    5e88:	4c0e      	ldr	r4, [pc, #56]	; (5ec4 <__aeabi_d2iz+0x5c>)
    5e8a:	1ae4      	subs	r4, r4, r3
    5e8c:	2c1f      	cmp	r4, #31
    5e8e:	dd0c      	ble.n	5eaa <__aeabi_d2iz+0x42>
    5e90:	480d      	ldr	r0, [pc, #52]	; (5ec8 <__aeabi_d2iz+0x60>)
    5e92:	1ac3      	subs	r3, r0, r3
    5e94:	40da      	lsrs	r2, r3
    5e96:	0013      	movs	r3, r2
    5e98:	425c      	negs	r4, r3
    5e9a:	2900      	cmp	r1, #0
    5e9c:	d100      	bne.n	5ea0 <__aeabi_d2iz+0x38>
    5e9e:	001c      	movs	r4, r3
    5ea0:	0020      	movs	r0, r4
    5ea2:	bd30      	pop	{r4, r5, pc}
    5ea4:	4b09      	ldr	r3, [pc, #36]	; (5ecc <__aeabi_d2iz+0x64>)
    5ea6:	18cc      	adds	r4, r1, r3
    5ea8:	e7fa      	b.n	5ea0 <__aeabi_d2iz+0x38>
    5eaa:	40e0      	lsrs	r0, r4
    5eac:	4c08      	ldr	r4, [pc, #32]	; (5ed0 <__aeabi_d2iz+0x68>)
    5eae:	46a4      	mov	ip, r4
    5eb0:	4463      	add	r3, ip
    5eb2:	409a      	lsls	r2, r3
    5eb4:	0013      	movs	r3, r2
    5eb6:	4303      	orrs	r3, r0
    5eb8:	e7ee      	b.n	5e98 <__aeabi_d2iz+0x30>
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	000003fe 	.word	0x000003fe
    5ec0:	0000041d 	.word	0x0000041d
    5ec4:	00000433 	.word	0x00000433
    5ec8:	00000413 	.word	0x00000413
    5ecc:	7fffffff 	.word	0x7fffffff
    5ed0:	fffffbed 	.word	0xfffffbed

00005ed4 <__aeabi_i2d>:
    5ed4:	b570      	push	{r4, r5, r6, lr}
    5ed6:	2800      	cmp	r0, #0
    5ed8:	d030      	beq.n	5f3c <__aeabi_i2d+0x68>
    5eda:	17c3      	asrs	r3, r0, #31
    5edc:	18c4      	adds	r4, r0, r3
    5ede:	405c      	eors	r4, r3
    5ee0:	0fc5      	lsrs	r5, r0, #31
    5ee2:	0020      	movs	r0, r4
    5ee4:	f000 f9dc 	bl	62a0 <__clzsi2>
    5ee8:	4b17      	ldr	r3, [pc, #92]	; (5f48 <__aeabi_i2d+0x74>)
    5eea:	4a18      	ldr	r2, [pc, #96]	; (5f4c <__aeabi_i2d+0x78>)
    5eec:	1a1b      	subs	r3, r3, r0
    5eee:	1ad2      	subs	r2, r2, r3
    5ef0:	2a1f      	cmp	r2, #31
    5ef2:	dd18      	ble.n	5f26 <__aeabi_i2d+0x52>
    5ef4:	4a16      	ldr	r2, [pc, #88]	; (5f50 <__aeabi_i2d+0x7c>)
    5ef6:	1ad2      	subs	r2, r2, r3
    5ef8:	4094      	lsls	r4, r2
    5efa:	2200      	movs	r2, #0
    5efc:	0324      	lsls	r4, r4, #12
    5efe:	055b      	lsls	r3, r3, #21
    5f00:	0b24      	lsrs	r4, r4, #12
    5f02:	0d5b      	lsrs	r3, r3, #21
    5f04:	2100      	movs	r1, #0
    5f06:	0010      	movs	r0, r2
    5f08:	0324      	lsls	r4, r4, #12
    5f0a:	0d0a      	lsrs	r2, r1, #20
    5f0c:	0512      	lsls	r2, r2, #20
    5f0e:	0b24      	lsrs	r4, r4, #12
    5f10:	4314      	orrs	r4, r2
    5f12:	4a10      	ldr	r2, [pc, #64]	; (5f54 <__aeabi_i2d+0x80>)
    5f14:	051b      	lsls	r3, r3, #20
    5f16:	4014      	ands	r4, r2
    5f18:	431c      	orrs	r4, r3
    5f1a:	0064      	lsls	r4, r4, #1
    5f1c:	07ed      	lsls	r5, r5, #31
    5f1e:	0864      	lsrs	r4, r4, #1
    5f20:	432c      	orrs	r4, r5
    5f22:	0021      	movs	r1, r4
    5f24:	bd70      	pop	{r4, r5, r6, pc}
    5f26:	0021      	movs	r1, r4
    5f28:	4091      	lsls	r1, r2
    5f2a:	000a      	movs	r2, r1
    5f2c:	210b      	movs	r1, #11
    5f2e:	1a08      	subs	r0, r1, r0
    5f30:	40c4      	lsrs	r4, r0
    5f32:	055b      	lsls	r3, r3, #21
    5f34:	0324      	lsls	r4, r4, #12
    5f36:	0b24      	lsrs	r4, r4, #12
    5f38:	0d5b      	lsrs	r3, r3, #21
    5f3a:	e7e3      	b.n	5f04 <__aeabi_i2d+0x30>
    5f3c:	2500      	movs	r5, #0
    5f3e:	2300      	movs	r3, #0
    5f40:	2400      	movs	r4, #0
    5f42:	2200      	movs	r2, #0
    5f44:	e7de      	b.n	5f04 <__aeabi_i2d+0x30>
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	0000041e 	.word	0x0000041e
    5f4c:	00000433 	.word	0x00000433
    5f50:	00000413 	.word	0x00000413
    5f54:	800fffff 	.word	0x800fffff

00005f58 <__aeabi_ui2d>:
    5f58:	b570      	push	{r4, r5, r6, lr}
    5f5a:	1e05      	subs	r5, r0, #0
    5f5c:	d028      	beq.n	5fb0 <__aeabi_ui2d+0x58>
    5f5e:	f000 f99f 	bl	62a0 <__clzsi2>
    5f62:	4b15      	ldr	r3, [pc, #84]	; (5fb8 <__aeabi_ui2d+0x60>)
    5f64:	4a15      	ldr	r2, [pc, #84]	; (5fbc <__aeabi_ui2d+0x64>)
    5f66:	1a1b      	subs	r3, r3, r0
    5f68:	1ad2      	subs	r2, r2, r3
    5f6a:	2a1f      	cmp	r2, #31
    5f6c:	dd16      	ble.n	5f9c <__aeabi_ui2d+0x44>
    5f6e:	002c      	movs	r4, r5
    5f70:	4a13      	ldr	r2, [pc, #76]	; (5fc0 <__aeabi_ui2d+0x68>)
    5f72:	2500      	movs	r5, #0
    5f74:	1ad2      	subs	r2, r2, r3
    5f76:	4094      	lsls	r4, r2
    5f78:	055a      	lsls	r2, r3, #21
    5f7a:	0324      	lsls	r4, r4, #12
    5f7c:	0b24      	lsrs	r4, r4, #12
    5f7e:	0d52      	lsrs	r2, r2, #21
    5f80:	2100      	movs	r1, #0
    5f82:	0324      	lsls	r4, r4, #12
    5f84:	0d0b      	lsrs	r3, r1, #20
    5f86:	0b24      	lsrs	r4, r4, #12
    5f88:	051b      	lsls	r3, r3, #20
    5f8a:	4323      	orrs	r3, r4
    5f8c:	4c0d      	ldr	r4, [pc, #52]	; (5fc4 <__aeabi_ui2d+0x6c>)
    5f8e:	0512      	lsls	r2, r2, #20
    5f90:	4023      	ands	r3, r4
    5f92:	4313      	orrs	r3, r2
    5f94:	005b      	lsls	r3, r3, #1
    5f96:	0028      	movs	r0, r5
    5f98:	0859      	lsrs	r1, r3, #1
    5f9a:	bd70      	pop	{r4, r5, r6, pc}
    5f9c:	210b      	movs	r1, #11
    5f9e:	002c      	movs	r4, r5
    5fa0:	1a08      	subs	r0, r1, r0
    5fa2:	40c4      	lsrs	r4, r0
    5fa4:	4095      	lsls	r5, r2
    5fa6:	0324      	lsls	r4, r4, #12
    5fa8:	055a      	lsls	r2, r3, #21
    5faa:	0b24      	lsrs	r4, r4, #12
    5fac:	0d52      	lsrs	r2, r2, #21
    5fae:	e7e7      	b.n	5f80 <__aeabi_ui2d+0x28>
    5fb0:	2200      	movs	r2, #0
    5fb2:	2400      	movs	r4, #0
    5fb4:	e7e4      	b.n	5f80 <__aeabi_ui2d+0x28>
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	0000041e 	.word	0x0000041e
    5fbc:	00000433 	.word	0x00000433
    5fc0:	00000413 	.word	0x00000413
    5fc4:	800fffff 	.word	0x800fffff

00005fc8 <__aeabi_f2d>:
    5fc8:	0042      	lsls	r2, r0, #1
    5fca:	0e12      	lsrs	r2, r2, #24
    5fcc:	1c51      	adds	r1, r2, #1
    5fce:	0243      	lsls	r3, r0, #9
    5fd0:	b2c9      	uxtb	r1, r1
    5fd2:	b570      	push	{r4, r5, r6, lr}
    5fd4:	0a5d      	lsrs	r5, r3, #9
    5fd6:	0fc4      	lsrs	r4, r0, #31
    5fd8:	2901      	cmp	r1, #1
    5fda:	dd15      	ble.n	6008 <__aeabi_f2d+0x40>
    5fdc:	21e0      	movs	r1, #224	; 0xe0
    5fde:	0089      	lsls	r1, r1, #2
    5fe0:	468c      	mov	ip, r1
    5fe2:	076d      	lsls	r5, r5, #29
    5fe4:	0b1b      	lsrs	r3, r3, #12
    5fe6:	4462      	add	r2, ip
    5fe8:	2100      	movs	r1, #0
    5fea:	0028      	movs	r0, r5
    5fec:	0d0d      	lsrs	r5, r1, #20
    5fee:	052d      	lsls	r5, r5, #20
    5ff0:	432b      	orrs	r3, r5
    5ff2:	4d1c      	ldr	r5, [pc, #112]	; (6064 <__aeabi_f2d+0x9c>)
    5ff4:	0552      	lsls	r2, r2, #21
    5ff6:	402b      	ands	r3, r5
    5ff8:	0852      	lsrs	r2, r2, #1
    5ffa:	4313      	orrs	r3, r2
    5ffc:	005b      	lsls	r3, r3, #1
    5ffe:	07e4      	lsls	r4, r4, #31
    6000:	085b      	lsrs	r3, r3, #1
    6002:	4323      	orrs	r3, r4
    6004:	0019      	movs	r1, r3
    6006:	bd70      	pop	{r4, r5, r6, pc}
    6008:	2a00      	cmp	r2, #0
    600a:	d115      	bne.n	6038 <__aeabi_f2d+0x70>
    600c:	2d00      	cmp	r5, #0
    600e:	d01f      	beq.n	6050 <__aeabi_f2d+0x88>
    6010:	0028      	movs	r0, r5
    6012:	f000 f945 	bl	62a0 <__clzsi2>
    6016:	280a      	cmp	r0, #10
    6018:	dc1d      	bgt.n	6056 <__aeabi_f2d+0x8e>
    601a:	230b      	movs	r3, #11
    601c:	002a      	movs	r2, r5
    601e:	1a1b      	subs	r3, r3, r0
    6020:	40da      	lsrs	r2, r3
    6022:	0013      	movs	r3, r2
    6024:	0002      	movs	r2, r0
    6026:	3215      	adds	r2, #21
    6028:	4095      	lsls	r5, r2
    602a:	4a0f      	ldr	r2, [pc, #60]	; (6068 <__aeabi_f2d+0xa0>)
    602c:	031b      	lsls	r3, r3, #12
    602e:	1a12      	subs	r2, r2, r0
    6030:	0552      	lsls	r2, r2, #21
    6032:	0b1b      	lsrs	r3, r3, #12
    6034:	0d52      	lsrs	r2, r2, #21
    6036:	e7d7      	b.n	5fe8 <__aeabi_f2d+0x20>
    6038:	2d00      	cmp	r5, #0
    603a:	d006      	beq.n	604a <__aeabi_f2d+0x82>
    603c:	2280      	movs	r2, #128	; 0x80
    603e:	0b1b      	lsrs	r3, r3, #12
    6040:	0312      	lsls	r2, r2, #12
    6042:	4313      	orrs	r3, r2
    6044:	076d      	lsls	r5, r5, #29
    6046:	4a09      	ldr	r2, [pc, #36]	; (606c <__aeabi_f2d+0xa4>)
    6048:	e7ce      	b.n	5fe8 <__aeabi_f2d+0x20>
    604a:	4a08      	ldr	r2, [pc, #32]	; (606c <__aeabi_f2d+0xa4>)
    604c:	2300      	movs	r3, #0
    604e:	e7cb      	b.n	5fe8 <__aeabi_f2d+0x20>
    6050:	2200      	movs	r2, #0
    6052:	2300      	movs	r3, #0
    6054:	e7c8      	b.n	5fe8 <__aeabi_f2d+0x20>
    6056:	0003      	movs	r3, r0
    6058:	3b0b      	subs	r3, #11
    605a:	409d      	lsls	r5, r3
    605c:	002b      	movs	r3, r5
    605e:	2500      	movs	r5, #0
    6060:	e7e3      	b.n	602a <__aeabi_f2d+0x62>
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	800fffff 	.word	0x800fffff
    6068:	00000389 	.word	0x00000389
    606c:	000007ff 	.word	0x000007ff

00006070 <__aeabi_d2f>:
    6070:	004b      	lsls	r3, r1, #1
    6072:	b570      	push	{r4, r5, r6, lr}
    6074:	0d5e      	lsrs	r6, r3, #21
    6076:	030c      	lsls	r4, r1, #12
    6078:	1c75      	adds	r5, r6, #1
    607a:	0a64      	lsrs	r4, r4, #9
    607c:	0f42      	lsrs	r2, r0, #29
    607e:	056d      	lsls	r5, r5, #21
    6080:	4322      	orrs	r2, r4
    6082:	0fc9      	lsrs	r1, r1, #31
    6084:	00c4      	lsls	r4, r0, #3
    6086:	0d6d      	lsrs	r5, r5, #21
    6088:	2d01      	cmp	r5, #1
    608a:	dd2a      	ble.n	60e2 <__aeabi_d2f+0x72>
    608c:	4b3b      	ldr	r3, [pc, #236]	; (617c <__aeabi_d2f+0x10c>)
    608e:	18f3      	adds	r3, r6, r3
    6090:	2bfe      	cmp	r3, #254	; 0xfe
    6092:	dc1a      	bgt.n	60ca <__aeabi_d2f+0x5a>
    6094:	2b00      	cmp	r3, #0
    6096:	dd42      	ble.n	611e <__aeabi_d2f+0xae>
    6098:	0180      	lsls	r0, r0, #6
    609a:	1e45      	subs	r5, r0, #1
    609c:	41a8      	sbcs	r0, r5
    609e:	00d2      	lsls	r2, r2, #3
    60a0:	4310      	orrs	r0, r2
    60a2:	0f62      	lsrs	r2, r4, #29
    60a4:	4302      	orrs	r2, r0
    60a6:	0750      	lsls	r0, r2, #29
    60a8:	d004      	beq.n	60b4 <__aeabi_d2f+0x44>
    60aa:	200f      	movs	r0, #15
    60ac:	4010      	ands	r0, r2
    60ae:	2804      	cmp	r0, #4
    60b0:	d000      	beq.n	60b4 <__aeabi_d2f+0x44>
    60b2:	3204      	adds	r2, #4
    60b4:	2080      	movs	r0, #128	; 0x80
    60b6:	04c0      	lsls	r0, r0, #19
    60b8:	4010      	ands	r0, r2
    60ba:	d021      	beq.n	6100 <__aeabi_d2f+0x90>
    60bc:	3301      	adds	r3, #1
    60be:	2bff      	cmp	r3, #255	; 0xff
    60c0:	d003      	beq.n	60ca <__aeabi_d2f+0x5a>
    60c2:	0192      	lsls	r2, r2, #6
    60c4:	0a52      	lsrs	r2, r2, #9
    60c6:	b2db      	uxtb	r3, r3
    60c8:	e001      	b.n	60ce <__aeabi_d2f+0x5e>
    60ca:	23ff      	movs	r3, #255	; 0xff
    60cc:	2200      	movs	r2, #0
    60ce:	0252      	lsls	r2, r2, #9
    60d0:	0a52      	lsrs	r2, r2, #9
    60d2:	05db      	lsls	r3, r3, #23
    60d4:	4313      	orrs	r3, r2
    60d6:	005b      	lsls	r3, r3, #1
    60d8:	07c9      	lsls	r1, r1, #31
    60da:	085b      	lsrs	r3, r3, #1
    60dc:	430b      	orrs	r3, r1
    60de:	0018      	movs	r0, r3
    60e0:	bd70      	pop	{r4, r5, r6, pc}
    60e2:	2e00      	cmp	r6, #0
    60e4:	d007      	beq.n	60f6 <__aeabi_d2f+0x86>
    60e6:	4314      	orrs	r4, r2
    60e8:	d0ef      	beq.n	60ca <__aeabi_d2f+0x5a>
    60ea:	2080      	movs	r0, #128	; 0x80
    60ec:	00d2      	lsls	r2, r2, #3
    60ee:	0480      	lsls	r0, r0, #18
    60f0:	4302      	orrs	r2, r0
    60f2:	23ff      	movs	r3, #255	; 0xff
    60f4:	e7d7      	b.n	60a6 <__aeabi_d2f+0x36>
    60f6:	4322      	orrs	r2, r4
    60f8:	2300      	movs	r3, #0
    60fa:	2a00      	cmp	r2, #0
    60fc:	d003      	beq.n	6106 <__aeabi_d2f+0x96>
    60fe:	2205      	movs	r2, #5
    6100:	08d2      	lsrs	r2, r2, #3
    6102:	2bff      	cmp	r3, #255	; 0xff
    6104:	d003      	beq.n	610e <__aeabi_d2f+0x9e>
    6106:	0252      	lsls	r2, r2, #9
    6108:	0a52      	lsrs	r2, r2, #9
    610a:	b2db      	uxtb	r3, r3
    610c:	e7df      	b.n	60ce <__aeabi_d2f+0x5e>
    610e:	2a00      	cmp	r2, #0
    6110:	d032      	beq.n	6178 <__aeabi_d2f+0x108>
    6112:	2080      	movs	r0, #128	; 0x80
    6114:	03c0      	lsls	r0, r0, #15
    6116:	4302      	orrs	r2, r0
    6118:	0252      	lsls	r2, r2, #9
    611a:	0a52      	lsrs	r2, r2, #9
    611c:	e7d7      	b.n	60ce <__aeabi_d2f+0x5e>
    611e:	0018      	movs	r0, r3
    6120:	3017      	adds	r0, #23
    6122:	db14      	blt.n	614e <__aeabi_d2f+0xde>
    6124:	2080      	movs	r0, #128	; 0x80
    6126:	0400      	lsls	r0, r0, #16
    6128:	4302      	orrs	r2, r0
    612a:	201e      	movs	r0, #30
    612c:	1ac0      	subs	r0, r0, r3
    612e:	281f      	cmp	r0, #31
    6130:	dc0f      	bgt.n	6152 <__aeabi_d2f+0xe2>
    6132:	0025      	movs	r5, r4
    6134:	4b12      	ldr	r3, [pc, #72]	; (6180 <__aeabi_d2f+0x110>)
    6136:	18f3      	adds	r3, r6, r3
    6138:	409d      	lsls	r5, r3
    613a:	1e6e      	subs	r6, r5, #1
    613c:	41b5      	sbcs	r5, r6
    613e:	409a      	lsls	r2, r3
    6140:	002b      	movs	r3, r5
    6142:	4313      	orrs	r3, r2
    6144:	0022      	movs	r2, r4
    6146:	40c2      	lsrs	r2, r0
    6148:	431a      	orrs	r2, r3
    614a:	2300      	movs	r3, #0
    614c:	e7ab      	b.n	60a6 <__aeabi_d2f+0x36>
    614e:	2300      	movs	r3, #0
    6150:	e7d5      	b.n	60fe <__aeabi_d2f+0x8e>
    6152:	2502      	movs	r5, #2
    6154:	426d      	negs	r5, r5
    6156:	1aeb      	subs	r3, r5, r3
    6158:	0015      	movs	r5, r2
    615a:	40dd      	lsrs	r5, r3
    615c:	2820      	cmp	r0, #32
    615e:	d009      	beq.n	6174 <__aeabi_d2f+0x104>
    6160:	4b08      	ldr	r3, [pc, #32]	; (6184 <__aeabi_d2f+0x114>)
    6162:	18f3      	adds	r3, r6, r3
    6164:	409a      	lsls	r2, r3
    6166:	4314      	orrs	r4, r2
    6168:	1e62      	subs	r2, r4, #1
    616a:	4194      	sbcs	r4, r2
    616c:	0022      	movs	r2, r4
    616e:	2300      	movs	r3, #0
    6170:	432a      	orrs	r2, r5
    6172:	e798      	b.n	60a6 <__aeabi_d2f+0x36>
    6174:	2200      	movs	r2, #0
    6176:	e7f6      	b.n	6166 <__aeabi_d2f+0xf6>
    6178:	2200      	movs	r2, #0
    617a:	e7a8      	b.n	60ce <__aeabi_d2f+0x5e>
    617c:	fffffc80 	.word	0xfffffc80
    6180:	fffffc82 	.word	0xfffffc82
    6184:	fffffca2 	.word	0xfffffca2

00006188 <__aeabi_uidiv>:
    6188:	2200      	movs	r2, #0
    618a:	0843      	lsrs	r3, r0, #1
    618c:	428b      	cmp	r3, r1
    618e:	d374      	bcc.n	627a <__aeabi_uidiv+0xf2>
    6190:	0903      	lsrs	r3, r0, #4
    6192:	428b      	cmp	r3, r1
    6194:	d35f      	bcc.n	6256 <__aeabi_uidiv+0xce>
    6196:	0a03      	lsrs	r3, r0, #8
    6198:	428b      	cmp	r3, r1
    619a:	d344      	bcc.n	6226 <__aeabi_uidiv+0x9e>
    619c:	0b03      	lsrs	r3, r0, #12
    619e:	428b      	cmp	r3, r1
    61a0:	d328      	bcc.n	61f4 <__aeabi_uidiv+0x6c>
    61a2:	0c03      	lsrs	r3, r0, #16
    61a4:	428b      	cmp	r3, r1
    61a6:	d30d      	bcc.n	61c4 <__aeabi_uidiv+0x3c>
    61a8:	22ff      	movs	r2, #255	; 0xff
    61aa:	0209      	lsls	r1, r1, #8
    61ac:	ba12      	rev	r2, r2
    61ae:	0c03      	lsrs	r3, r0, #16
    61b0:	428b      	cmp	r3, r1
    61b2:	d302      	bcc.n	61ba <__aeabi_uidiv+0x32>
    61b4:	1212      	asrs	r2, r2, #8
    61b6:	0209      	lsls	r1, r1, #8
    61b8:	d065      	beq.n	6286 <__aeabi_uidiv+0xfe>
    61ba:	0b03      	lsrs	r3, r0, #12
    61bc:	428b      	cmp	r3, r1
    61be:	d319      	bcc.n	61f4 <__aeabi_uidiv+0x6c>
    61c0:	e000      	b.n	61c4 <__aeabi_uidiv+0x3c>
    61c2:	0a09      	lsrs	r1, r1, #8
    61c4:	0bc3      	lsrs	r3, r0, #15
    61c6:	428b      	cmp	r3, r1
    61c8:	d301      	bcc.n	61ce <__aeabi_uidiv+0x46>
    61ca:	03cb      	lsls	r3, r1, #15
    61cc:	1ac0      	subs	r0, r0, r3
    61ce:	4152      	adcs	r2, r2
    61d0:	0b83      	lsrs	r3, r0, #14
    61d2:	428b      	cmp	r3, r1
    61d4:	d301      	bcc.n	61da <__aeabi_uidiv+0x52>
    61d6:	038b      	lsls	r3, r1, #14
    61d8:	1ac0      	subs	r0, r0, r3
    61da:	4152      	adcs	r2, r2
    61dc:	0b43      	lsrs	r3, r0, #13
    61de:	428b      	cmp	r3, r1
    61e0:	d301      	bcc.n	61e6 <__aeabi_uidiv+0x5e>
    61e2:	034b      	lsls	r3, r1, #13
    61e4:	1ac0      	subs	r0, r0, r3
    61e6:	4152      	adcs	r2, r2
    61e8:	0b03      	lsrs	r3, r0, #12
    61ea:	428b      	cmp	r3, r1
    61ec:	d301      	bcc.n	61f2 <__aeabi_uidiv+0x6a>
    61ee:	030b      	lsls	r3, r1, #12
    61f0:	1ac0      	subs	r0, r0, r3
    61f2:	4152      	adcs	r2, r2
    61f4:	0ac3      	lsrs	r3, r0, #11
    61f6:	428b      	cmp	r3, r1
    61f8:	d301      	bcc.n	61fe <__aeabi_uidiv+0x76>
    61fa:	02cb      	lsls	r3, r1, #11
    61fc:	1ac0      	subs	r0, r0, r3
    61fe:	4152      	adcs	r2, r2
    6200:	0a83      	lsrs	r3, r0, #10
    6202:	428b      	cmp	r3, r1
    6204:	d301      	bcc.n	620a <__aeabi_uidiv+0x82>
    6206:	028b      	lsls	r3, r1, #10
    6208:	1ac0      	subs	r0, r0, r3
    620a:	4152      	adcs	r2, r2
    620c:	0a43      	lsrs	r3, r0, #9
    620e:	428b      	cmp	r3, r1
    6210:	d301      	bcc.n	6216 <__aeabi_uidiv+0x8e>
    6212:	024b      	lsls	r3, r1, #9
    6214:	1ac0      	subs	r0, r0, r3
    6216:	4152      	adcs	r2, r2
    6218:	0a03      	lsrs	r3, r0, #8
    621a:	428b      	cmp	r3, r1
    621c:	d301      	bcc.n	6222 <__aeabi_uidiv+0x9a>
    621e:	020b      	lsls	r3, r1, #8
    6220:	1ac0      	subs	r0, r0, r3
    6222:	4152      	adcs	r2, r2
    6224:	d2cd      	bcs.n	61c2 <__aeabi_uidiv+0x3a>
    6226:	09c3      	lsrs	r3, r0, #7
    6228:	428b      	cmp	r3, r1
    622a:	d301      	bcc.n	6230 <__aeabi_uidiv+0xa8>
    622c:	01cb      	lsls	r3, r1, #7
    622e:	1ac0      	subs	r0, r0, r3
    6230:	4152      	adcs	r2, r2
    6232:	0983      	lsrs	r3, r0, #6
    6234:	428b      	cmp	r3, r1
    6236:	d301      	bcc.n	623c <__aeabi_uidiv+0xb4>
    6238:	018b      	lsls	r3, r1, #6
    623a:	1ac0      	subs	r0, r0, r3
    623c:	4152      	adcs	r2, r2
    623e:	0943      	lsrs	r3, r0, #5
    6240:	428b      	cmp	r3, r1
    6242:	d301      	bcc.n	6248 <__aeabi_uidiv+0xc0>
    6244:	014b      	lsls	r3, r1, #5
    6246:	1ac0      	subs	r0, r0, r3
    6248:	4152      	adcs	r2, r2
    624a:	0903      	lsrs	r3, r0, #4
    624c:	428b      	cmp	r3, r1
    624e:	d301      	bcc.n	6254 <__aeabi_uidiv+0xcc>
    6250:	010b      	lsls	r3, r1, #4
    6252:	1ac0      	subs	r0, r0, r3
    6254:	4152      	adcs	r2, r2
    6256:	08c3      	lsrs	r3, r0, #3
    6258:	428b      	cmp	r3, r1
    625a:	d301      	bcc.n	6260 <__aeabi_uidiv+0xd8>
    625c:	00cb      	lsls	r3, r1, #3
    625e:	1ac0      	subs	r0, r0, r3
    6260:	4152      	adcs	r2, r2
    6262:	0883      	lsrs	r3, r0, #2
    6264:	428b      	cmp	r3, r1
    6266:	d301      	bcc.n	626c <__aeabi_uidiv+0xe4>
    6268:	008b      	lsls	r3, r1, #2
    626a:	1ac0      	subs	r0, r0, r3
    626c:	4152      	adcs	r2, r2
    626e:	0843      	lsrs	r3, r0, #1
    6270:	428b      	cmp	r3, r1
    6272:	d301      	bcc.n	6278 <__aeabi_uidiv+0xf0>
    6274:	004b      	lsls	r3, r1, #1
    6276:	1ac0      	subs	r0, r0, r3
    6278:	4152      	adcs	r2, r2
    627a:	1a41      	subs	r1, r0, r1
    627c:	d200      	bcs.n	6280 <__aeabi_uidiv+0xf8>
    627e:	4601      	mov	r1, r0
    6280:	4152      	adcs	r2, r2
    6282:	4610      	mov	r0, r2
    6284:	4770      	bx	lr
    6286:	e7ff      	b.n	6288 <__aeabi_uidiv+0x100>
    6288:	b501      	push	{r0, lr}
    628a:	2000      	movs	r0, #0
    628c:	f000 f806 	bl	629c <__aeabi_idiv0>
    6290:	bd02      	pop	{r1, pc}
    6292:	46c0      	nop			; (mov r8, r8)

00006294 <__aeabi_uidivmod>:
    6294:	2900      	cmp	r1, #0
    6296:	d0f7      	beq.n	6288 <__aeabi_uidiv+0x100>
    6298:	e776      	b.n	6188 <__aeabi_uidiv>
    629a:	4770      	bx	lr

0000629c <__aeabi_idiv0>:
    629c:	4770      	bx	lr
    629e:	46c0      	nop			; (mov r8, r8)

000062a0 <__clzsi2>:
    62a0:	211c      	movs	r1, #28
    62a2:	2301      	movs	r3, #1
    62a4:	041b      	lsls	r3, r3, #16
    62a6:	4298      	cmp	r0, r3
    62a8:	d301      	bcc.n	62ae <__clzsi2+0xe>
    62aa:	0c00      	lsrs	r0, r0, #16
    62ac:	3910      	subs	r1, #16
    62ae:	0a1b      	lsrs	r3, r3, #8
    62b0:	4298      	cmp	r0, r3
    62b2:	d301      	bcc.n	62b8 <__clzsi2+0x18>
    62b4:	0a00      	lsrs	r0, r0, #8
    62b6:	3908      	subs	r1, #8
    62b8:	091b      	lsrs	r3, r3, #4
    62ba:	4298      	cmp	r0, r3
    62bc:	d301      	bcc.n	62c2 <__clzsi2+0x22>
    62be:	0900      	lsrs	r0, r0, #4
    62c0:	3904      	subs	r1, #4
    62c2:	a202      	add	r2, pc, #8	; (adr r2, 62cc <__clzsi2+0x2c>)
    62c4:	5c10      	ldrb	r0, [r2, r0]
    62c6:	1840      	adds	r0, r0, r1
    62c8:	4770      	bx	lr
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	02020304 	.word	0x02020304
    62d0:	01010101 	.word	0x01010101
	...

000062dc <__errno>:
    62dc:	4b01      	ldr	r3, [pc, #4]	; (62e4 <__errno+0x8>)
    62de:	6818      	ldr	r0, [r3, #0]
    62e0:	4770      	bx	lr
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	200004a0 	.word	0x200004a0

000062e8 <__libc_init_array>:
    62e8:	b570      	push	{r4, r5, r6, lr}
    62ea:	4e0d      	ldr	r6, [pc, #52]	; (6320 <__libc_init_array+0x38>)
    62ec:	4d0d      	ldr	r5, [pc, #52]	; (6324 <__libc_init_array+0x3c>)
    62ee:	2400      	movs	r4, #0
    62f0:	1bad      	subs	r5, r5, r6
    62f2:	10ad      	asrs	r5, r5, #2
    62f4:	d005      	beq.n	6302 <__libc_init_array+0x1a>
    62f6:	00a3      	lsls	r3, r4, #2
    62f8:	58f3      	ldr	r3, [r6, r3]
    62fa:	3401      	adds	r4, #1
    62fc:	4798      	blx	r3
    62fe:	42a5      	cmp	r5, r4
    6300:	d1f9      	bne.n	62f6 <__libc_init_array+0xe>
    6302:	f000 fa19 	bl	6738 <_init>
    6306:	4e08      	ldr	r6, [pc, #32]	; (6328 <__libc_init_array+0x40>)
    6308:	4d08      	ldr	r5, [pc, #32]	; (632c <__libc_init_array+0x44>)
    630a:	2400      	movs	r4, #0
    630c:	1bad      	subs	r5, r5, r6
    630e:	10ad      	asrs	r5, r5, #2
    6310:	d005      	beq.n	631e <__libc_init_array+0x36>
    6312:	00a3      	lsls	r3, r4, #2
    6314:	58f3      	ldr	r3, [r6, r3]
    6316:	3401      	adds	r4, #1
    6318:	4798      	blx	r3
    631a:	42a5      	cmp	r5, r4
    631c:	d1f9      	bne.n	6312 <__libc_init_array+0x2a>
    631e:	bd70      	pop	{r4, r5, r6, pc}
    6320:	00006744 	.word	0x00006744
    6324:	00006744 	.word	0x00006744
    6328:	00006744 	.word	0x00006744
    632c:	0000674c 	.word	0x0000674c

00006330 <memset>:
    6330:	b570      	push	{r4, r5, r6, lr}
    6332:	0783      	lsls	r3, r0, #30
    6334:	d03f      	beq.n	63b6 <memset+0x86>
    6336:	1e54      	subs	r4, r2, #1
    6338:	2a00      	cmp	r2, #0
    633a:	d03b      	beq.n	63b4 <memset+0x84>
    633c:	b2ce      	uxtb	r6, r1
    633e:	0003      	movs	r3, r0
    6340:	2503      	movs	r5, #3
    6342:	e003      	b.n	634c <memset+0x1c>
    6344:	1e62      	subs	r2, r4, #1
    6346:	2c00      	cmp	r4, #0
    6348:	d034      	beq.n	63b4 <memset+0x84>
    634a:	0014      	movs	r4, r2
    634c:	3301      	adds	r3, #1
    634e:	1e5a      	subs	r2, r3, #1
    6350:	7016      	strb	r6, [r2, #0]
    6352:	422b      	tst	r3, r5
    6354:	d1f6      	bne.n	6344 <memset+0x14>
    6356:	2c03      	cmp	r4, #3
    6358:	d924      	bls.n	63a4 <memset+0x74>
    635a:	25ff      	movs	r5, #255	; 0xff
    635c:	400d      	ands	r5, r1
    635e:	022a      	lsls	r2, r5, #8
    6360:	4315      	orrs	r5, r2
    6362:	042a      	lsls	r2, r5, #16
    6364:	4315      	orrs	r5, r2
    6366:	2c0f      	cmp	r4, #15
    6368:	d911      	bls.n	638e <memset+0x5e>
    636a:	0026      	movs	r6, r4
    636c:	3e10      	subs	r6, #16
    636e:	0936      	lsrs	r6, r6, #4
    6370:	3601      	adds	r6, #1
    6372:	0136      	lsls	r6, r6, #4
    6374:	001a      	movs	r2, r3
    6376:	199b      	adds	r3, r3, r6
    6378:	6015      	str	r5, [r2, #0]
    637a:	6055      	str	r5, [r2, #4]
    637c:	6095      	str	r5, [r2, #8]
    637e:	60d5      	str	r5, [r2, #12]
    6380:	3210      	adds	r2, #16
    6382:	4293      	cmp	r3, r2
    6384:	d1f8      	bne.n	6378 <memset+0x48>
    6386:	220f      	movs	r2, #15
    6388:	4014      	ands	r4, r2
    638a:	2c03      	cmp	r4, #3
    638c:	d90a      	bls.n	63a4 <memset+0x74>
    638e:	1f26      	subs	r6, r4, #4
    6390:	08b6      	lsrs	r6, r6, #2
    6392:	3601      	adds	r6, #1
    6394:	00b6      	lsls	r6, r6, #2
    6396:	001a      	movs	r2, r3
    6398:	199b      	adds	r3, r3, r6
    639a:	c220      	stmia	r2!, {r5}
    639c:	4293      	cmp	r3, r2
    639e:	d1fc      	bne.n	639a <memset+0x6a>
    63a0:	2203      	movs	r2, #3
    63a2:	4014      	ands	r4, r2
    63a4:	2c00      	cmp	r4, #0
    63a6:	d005      	beq.n	63b4 <memset+0x84>
    63a8:	b2c9      	uxtb	r1, r1
    63aa:	191c      	adds	r4, r3, r4
    63ac:	7019      	strb	r1, [r3, #0]
    63ae:	3301      	adds	r3, #1
    63b0:	429c      	cmp	r4, r3
    63b2:	d1fb      	bne.n	63ac <memset+0x7c>
    63b4:	bd70      	pop	{r4, r5, r6, pc}
    63b6:	0014      	movs	r4, r2
    63b8:	0003      	movs	r3, r0
    63ba:	e7cc      	b.n	6356 <memset+0x26>

000063bc <register_fini>:
    63bc:	4b03      	ldr	r3, [pc, #12]	; (63cc <register_fini+0x10>)
    63be:	b510      	push	{r4, lr}
    63c0:	2b00      	cmp	r3, #0
    63c2:	d002      	beq.n	63ca <register_fini+0xe>
    63c4:	4802      	ldr	r0, [pc, #8]	; (63d0 <register_fini+0x14>)
    63c6:	f000 f805 	bl	63d4 <atexit>
    63ca:	bd10      	pop	{r4, pc}
    63cc:	00000000 	.word	0x00000000
    63d0:	000063e5 	.word	0x000063e5

000063d4 <atexit>:
    63d4:	b510      	push	{r4, lr}
    63d6:	0001      	movs	r1, r0
    63d8:	2300      	movs	r3, #0
    63da:	2200      	movs	r2, #0
    63dc:	2000      	movs	r0, #0
    63de:	f000 f81b 	bl	6418 <__register_exitproc>
    63e2:	bd10      	pop	{r4, pc}

000063e4 <__libc_fini_array>:
    63e4:	b570      	push	{r4, r5, r6, lr}
    63e6:	4b09      	ldr	r3, [pc, #36]	; (640c <__libc_fini_array+0x28>)
    63e8:	4c09      	ldr	r4, [pc, #36]	; (6410 <__libc_fini_array+0x2c>)
    63ea:	1ae4      	subs	r4, r4, r3
    63ec:	10a4      	asrs	r4, r4, #2
    63ee:	d009      	beq.n	6404 <__libc_fini_array+0x20>
    63f0:	4a08      	ldr	r2, [pc, #32]	; (6414 <__libc_fini_array+0x30>)
    63f2:	18a5      	adds	r5, r4, r2
    63f4:	00ad      	lsls	r5, r5, #2
    63f6:	18ed      	adds	r5, r5, r3
    63f8:	682b      	ldr	r3, [r5, #0]
    63fa:	3c01      	subs	r4, #1
    63fc:	4798      	blx	r3
    63fe:	3d04      	subs	r5, #4
    6400:	2c00      	cmp	r4, #0
    6402:	d1f9      	bne.n	63f8 <__libc_fini_array+0x14>
    6404:	f000 f9a2 	bl	674c <_fini>
    6408:	bd70      	pop	{r4, r5, r6, pc}
    640a:	46c0      	nop			; (mov r8, r8)
    640c:	00006758 	.word	0x00006758
    6410:	0000675c 	.word	0x0000675c
    6414:	3fffffff 	.word	0x3fffffff

00006418 <__register_exitproc>:
    6418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    641a:	4644      	mov	r4, r8
    641c:	465f      	mov	r7, fp
    641e:	4656      	mov	r6, sl
    6420:	464d      	mov	r5, r9
    6422:	469b      	mov	fp, r3
    6424:	4b2f      	ldr	r3, [pc, #188]	; (64e4 <__register_exitproc+0xcc>)
    6426:	b4f0      	push	{r4, r5, r6, r7}
    6428:	681c      	ldr	r4, [r3, #0]
    642a:	23a4      	movs	r3, #164	; 0xa4
    642c:	005b      	lsls	r3, r3, #1
    642e:	0005      	movs	r5, r0
    6430:	58e0      	ldr	r0, [r4, r3]
    6432:	000e      	movs	r6, r1
    6434:	4690      	mov	r8, r2
    6436:	2800      	cmp	r0, #0
    6438:	d04b      	beq.n	64d2 <__register_exitproc+0xba>
    643a:	6843      	ldr	r3, [r0, #4]
    643c:	2b1f      	cmp	r3, #31
    643e:	dc0d      	bgt.n	645c <__register_exitproc+0x44>
    6440:	1c5c      	adds	r4, r3, #1
    6442:	2d00      	cmp	r5, #0
    6444:	d121      	bne.n	648a <__register_exitproc+0x72>
    6446:	3302      	adds	r3, #2
    6448:	009b      	lsls	r3, r3, #2
    644a:	6044      	str	r4, [r0, #4]
    644c:	501e      	str	r6, [r3, r0]
    644e:	2000      	movs	r0, #0
    6450:	bc3c      	pop	{r2, r3, r4, r5}
    6452:	4690      	mov	r8, r2
    6454:	4699      	mov	r9, r3
    6456:	46a2      	mov	sl, r4
    6458:	46ab      	mov	fp, r5
    645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    645c:	4b22      	ldr	r3, [pc, #136]	; (64e8 <__register_exitproc+0xd0>)
    645e:	2b00      	cmp	r3, #0
    6460:	d03c      	beq.n	64dc <__register_exitproc+0xc4>
    6462:	20c8      	movs	r0, #200	; 0xc8
    6464:	0040      	lsls	r0, r0, #1
    6466:	e000      	b.n	646a <__register_exitproc+0x52>
    6468:	bf00      	nop
    646a:	2800      	cmp	r0, #0
    646c:	d036      	beq.n	64dc <__register_exitproc+0xc4>
    646e:	22a4      	movs	r2, #164	; 0xa4
    6470:	2300      	movs	r3, #0
    6472:	0052      	lsls	r2, r2, #1
    6474:	58a1      	ldr	r1, [r4, r2]
    6476:	6043      	str	r3, [r0, #4]
    6478:	6001      	str	r1, [r0, #0]
    647a:	50a0      	str	r0, [r4, r2]
    647c:	3240      	adds	r2, #64	; 0x40
    647e:	5083      	str	r3, [r0, r2]
    6480:	3204      	adds	r2, #4
    6482:	5083      	str	r3, [r0, r2]
    6484:	2401      	movs	r4, #1
    6486:	2d00      	cmp	r5, #0
    6488:	d0dd      	beq.n	6446 <__register_exitproc+0x2e>
    648a:	009a      	lsls	r2, r3, #2
    648c:	4691      	mov	r9, r2
    648e:	4481      	add	r9, r0
    6490:	4642      	mov	r2, r8
    6492:	2188      	movs	r1, #136	; 0x88
    6494:	464f      	mov	r7, r9
    6496:	507a      	str	r2, [r7, r1]
    6498:	22c4      	movs	r2, #196	; 0xc4
    649a:	0052      	lsls	r2, r2, #1
    649c:	4690      	mov	r8, r2
    649e:	4480      	add	r8, r0
    64a0:	4642      	mov	r2, r8
    64a2:	3987      	subs	r1, #135	; 0x87
    64a4:	4099      	lsls	r1, r3
    64a6:	6812      	ldr	r2, [r2, #0]
    64a8:	468a      	mov	sl, r1
    64aa:	430a      	orrs	r2, r1
    64ac:	4694      	mov	ip, r2
    64ae:	4642      	mov	r2, r8
    64b0:	4661      	mov	r1, ip
    64b2:	6011      	str	r1, [r2, #0]
    64b4:	2284      	movs	r2, #132	; 0x84
    64b6:	4649      	mov	r1, r9
    64b8:	465f      	mov	r7, fp
    64ba:	0052      	lsls	r2, r2, #1
    64bc:	508f      	str	r7, [r1, r2]
    64be:	2d02      	cmp	r5, #2
    64c0:	d1c1      	bne.n	6446 <__register_exitproc+0x2e>
    64c2:	0002      	movs	r2, r0
    64c4:	4655      	mov	r5, sl
    64c6:	328d      	adds	r2, #141	; 0x8d
    64c8:	32ff      	adds	r2, #255	; 0xff
    64ca:	6811      	ldr	r1, [r2, #0]
    64cc:	430d      	orrs	r5, r1
    64ce:	6015      	str	r5, [r2, #0]
    64d0:	e7b9      	b.n	6446 <__register_exitproc+0x2e>
    64d2:	0020      	movs	r0, r4
    64d4:	304d      	adds	r0, #77	; 0x4d
    64d6:	30ff      	adds	r0, #255	; 0xff
    64d8:	50e0      	str	r0, [r4, r3]
    64da:	e7ae      	b.n	643a <__register_exitproc+0x22>
    64dc:	2001      	movs	r0, #1
    64de:	4240      	negs	r0, r0
    64e0:	e7b6      	b.n	6450 <__register_exitproc+0x38>
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	00006734 	.word	0x00006734
    64e8:	00000000 	.word	0x00000000

000064ec <spi2MOSI>:
    64ec:	0c000002 00000200                                .....

000064f1 <spi2SCK>:
    64f1:	0e000002 00000200                                .....

000064f6 <spi2MISO>:
    64f6:	0d000002 8d200000                                ......

000064fc <lookupTable.12503>:
    64fc:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    650c:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    651c:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    652c:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    653c:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    654c:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    655c:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    656c:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    657c:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    658c:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    659c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    65ac:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    65bc:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    65cc:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    65dc:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    65ec:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    65fc:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    660c:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    661c:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    662c:	000f048e                                ....

00006630 <senseBatPin>:
    6630:	06000000 01000106                                .....

00006635 <senseAPin>:
    6635:	03010001 0100010b                                .....

0000663a <senseBPin>:
    663a:	02010001 0000000a                                .....

0000663f <senseCPin>:
    663f:	03000000 00000001                                .....

00006644 <senseDPin>:
    6644:	02000000 00000000                                .....

00006649 <analogAccelPin>:
    6649:	07000000 00000207                                .....

0000664e <spi2MOSI>:
    664e:	0c000002 00000200                                .....

00006653 <spi2SCK>:
    6653:	0e000002 776f7000 00000000 00000000              .....pow.....

00006660 <TWO52>:
    6660:	00000000 43300000 00000000 c3300000     ......0C......0.
    6670:	00003f00 00003e5e 00003e5e 00003e5c     .?..^>..^>..\>..
    6680:	00003ef2 00003ef2 00003ee8 00003e5c     .>...>...>..\>..
    6690:	00003ef2 00003ee8 00003ef2 00003e5c     .>...>...>..\>..
    66a0:	00003ef8 00003ef8 00003ef8 00003f82     .>...>...>...?..
    66b0:	00004c34 00004b02 00004c08 00004af8     4L...K...L...J..
    66c0:	00004c08 00004c12 00004c08 00004af8     .L...L...L...J..
    66d0:	00004b02 00004b02 00004c12 00004af8     .K...K...L...J..
    66e0:	00004aee 00004aee 00004aee 00004e64     .J...J...J..dN..
    66f0:	0000547c 0000533c 0000533c 0000533a     |T..<S..<S..:S..
    6700:	00005454 00005454 00005446 0000533a     TT..TT..FT..:S..
    6710:	00005454 00005446 00005454 0000533a     TT..FT..TT..:S..
    6720:	0000545c 0000545c 0000545c 0000565c     \T..\T..\T..\V..
    6730:	00000043                                C...

00006734 <_global_impure_ptr>:
    6734:	20000078                                x.. 

00006738 <_init>:
    6738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    673a:	46c0      	nop			; (mov r8, r8)
    673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    673e:	bc08      	pop	{r3}
    6740:	469e      	mov	lr, r3
    6742:	4770      	bx	lr

00006744 <__init_array_start>:
    6744:	000063bd 	.word	0x000063bd

00006748 <__frame_dummy_init_array_entry>:
    6748:	000000dd                                ....

0000674c <_fini>:
    674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6752:	bc08      	pop	{r3}
    6754:	469e      	mov	lr, r3
    6756:	4770      	bx	lr

00006758 <__fini_array_start>:
    6758:	000000b5 	.word	0x000000b5
