
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000033f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003830  00020438  2**4
                  ALLOC
  3 .stack        00002000  200005f0  000039e0  00020438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b737  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002293  00000000  00000000  0003bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001c68  00000000  00000000  0003de83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000380  00000000  00000000  0003faeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c30  00000000  00000000  0003fe6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015736  00000000  00000000  00040a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000882e  00000000  00000000  000561d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007267a  00000000  00000000  0005e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bac  00000000  00000000  000d107c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000e4d 	.word	0x00000e4d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000eed 	.word	0x00000eed
      90:	00000f55 	.word	0x00000f55
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000033f0 	.word	0x000033f0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000033f0 	.word	0x000033f0
     10c:	000033f0 	.word	0x000033f0
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000033f0 	.word	0x000033f0
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00003015 	.word	0x00003015
     1d0:	000008e5 	.word	0x000008e5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SEreadSample>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e8:	4f17      	ldr	r7, [pc, #92]	; (248 <AT25SEreadSample+0x64>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	9201      	str	r2, [sp, #4]
     1ee:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f0:	4c16      	ldr	r4, [pc, #88]	; (24c <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1f2:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f4:	2001      	movs	r0, #1
     1f6:	617b      	str	r3, [r7, #20]
     1f8:	210b      	movs	r1, #11
     1fa:	47a0      	blx	r4
     1fc:	4d14      	ldr	r5, [pc, #80]	; (250 <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     1fe:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     200:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     202:	b2c9      	uxtb	r1, r1
     204:	2001      	movs	r0, #1
     206:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     208:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     20a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     20c:	b2c9      	uxtb	r1, r1
     20e:	2001      	movs	r0, #1
     210:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     212:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     214:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     216:	2001      	movs	r0, #1
     218:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21a:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     21c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21e:	2001      	movs	r0, #1
     220:	47a0      	blx	r4
     222:	9b00      	ldr	r3, [sp, #0]
     224:	9e01      	ldr	r6, [sp, #4]
     226:	7028      	strb	r0, [r5, #0]
     228:	18f3      	adds	r3, r6, r3
     22a:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     22c:	9b00      	ldr	r3, [sp, #0]
     22e:	429e      	cmp	r6, r3
     230:	d005      	beq.n	23e <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     232:	7829      	ldrb	r1, [r5, #0]
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	7030      	strb	r0, [r6, #0]
     23a:	3601      	adds	r6, #1
     23c:	e7f6      	b.n	22c <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     23e:	2380      	movs	r3, #128	; 0x80
     240:	02db      	lsls	r3, r3, #11
     242:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     244:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00001781 	.word	0x00001781
     250:	20000460 	.word	0x20000460

00000254 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2280      	movs	r2, #128	; 0x80
     256:	4b28      	ldr	r3, [pc, #160]	; (2f8 <readMS5803AdcResults+0xa4>)
     258:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     25a:	b5f0      	push	{r4, r5, r6, r7, lr}
     25c:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     25e:	2300      	movs	r3, #0
     260:	4d26      	ldr	r5, [pc, #152]	; (2fc <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     262:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     264:	9300      	str	r3, [sp, #0]
     266:	786b      	ldrb	r3, [r5, #1]
     268:	7828      	ldrb	r0, [r5, #0]
     26a:	78aa      	ldrb	r2, [r5, #2]
     26c:	021b      	lsls	r3, r3, #8
     26e:	4303      	orrs	r3, r0
     270:	0412      	lsls	r2, r2, #16
     272:	0019      	movs	r1, r3
     274:	0013      	movs	r3, r2
     276:	430b      	orrs	r3, r1
     278:	79a9      	ldrb	r1, [r5, #6]
     27a:	796f      	ldrb	r7, [r5, #5]
     27c:	79ec      	ldrb	r4, [r5, #7]
     27e:	0209      	lsls	r1, r1, #8
     280:	4339      	orrs	r1, r7
     282:	0424      	lsls	r4, r4, #16
     284:	0008      	movs	r0, r1
     286:	0021      	movs	r1, r4
     288:	7a2c      	ldrb	r4, [r5, #8]
     28a:	78ea      	ldrb	r2, [r5, #3]
     28c:	7a6f      	ldrb	r7, [r5, #9]
     28e:	4301      	orrs	r1, r0
     290:	0624      	lsls	r4, r4, #24
     292:	430c      	orrs	r4, r1
     294:	0612      	lsls	r2, r2, #24
     296:	431a      	orrs	r2, r3
     298:	0020      	movs	r0, r4
     29a:	792b      	ldrb	r3, [r5, #4]
     29c:	0039      	movs	r1, r7
     29e:	4e18      	ldr	r6, [pc, #96]	; (300 <readMS5803AdcResults+0xac>)
     2a0:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2a2:	7aeb      	ldrb	r3, [r5, #11]
     2a4:	7aa9      	ldrb	r1, [r5, #10]
     2a6:	021b      	lsls	r3, r3, #8
     2a8:	430b      	orrs	r3, r1
     2aa:	001a      	movs	r2, r3
     2ac:	7b2b      	ldrb	r3, [r5, #12]
     2ae:	4e15      	ldr	r6, [pc, #84]	; (304 <readMS5803AdcResults+0xb0>)
     2b0:	041b      	lsls	r3, r3, #16
     2b2:	4313      	orrs	r3, r2
     2b4:	7b6a      	ldrb	r2, [r5, #13]
     2b6:	7bad      	ldrb	r5, [r5, #14]
     2b8:	0612      	lsls	r2, r2, #24
     2ba:	431a      	orrs	r2, r3
     2bc:	0039      	movs	r1, r7
     2be:	002b      	movs	r3, r5
     2c0:	0020      	movs	r0, r4
     2c2:	9203      	str	r2, [sp, #12]
     2c4:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2c6:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2c8:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2ca:	002b      	movs	r3, r5
     2cc:	0039      	movs	r1, r7
     2ce:	0020      	movs	r0, r4
     2d0:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2d2:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2d4:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2d6:	002b      	movs	r3, r5
     2d8:	0020      	movs	r0, r4
     2da:	0039      	movs	r1, r7
     2dc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2de:	2280      	movs	r2, #128	; 0x80
     2e0:	4b05      	ldr	r3, [pc, #20]	; (2f8 <readMS5803AdcResults+0xa4>)
     2e2:	0212      	lsls	r2, r2, #8
     2e4:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     2e6:	9b04      	ldr	r3, [sp, #16]
     2e8:	9a05      	ldr	r2, [sp, #20]
     2ea:	041b      	lsls	r3, r3, #16
     2ec:	0215      	lsls	r5, r2, #8
     2ee:	431d      	orrs	r5, r3
     2f0:	4328      	orrs	r0, r5
}
     2f2:	b007      	add	sp, #28
     2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00003218 	.word	0x00003218
     300:	00000b7d 	.word	0x00000b7d
     304:	00000be9 	.word	0x00000be9

00000308 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     30a:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     30c:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     30e:	8803      	ldrh	r3, [r0, #0]
     310:	aa04      	add	r2, sp, #16
     312:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     314:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     316:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     318:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     31a:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     31c:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     31e:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     320:	88c3      	ldrh	r3, [r0, #6]
     322:	9401      	str	r4, [sp, #4]
     324:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     326:	8903      	ldrh	r3, [r0, #8]
     328:	aa07      	add	r2, sp, #28
     32a:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     32c:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     32e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     330:	8941      	ldrh	r1, [r0, #10]
     332:	a804      	add	r0, sp, #16
     334:	181b      	adds	r3, r3, r0
     336:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     338:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     33a:	693a      	ldr	r2, [r7, #16]
     33c:	0236      	lsls	r6, r6, #8
     33e:	8818      	ldrh	r0, [r3, #0]
     340:	1b96      	subs	r6, r2, r6
     342:	17f2      	asrs	r2, r6, #31
     344:	4c2a      	ldr	r4, [pc, #168]	; (3f0 <ConvertPressureTemperature+0xe8>)
     346:	9203      	str	r2, [sp, #12]
     348:	17f3      	asrs	r3, r6, #31
     34a:	0032      	movs	r2, r6
     34c:	b280      	uxth	r0, r0
     34e:	2100      	movs	r1, #0
     350:	47a0      	blx	r4
     352:	23fa      	movs	r3, #250	; 0xfa
     354:	00db      	lsls	r3, r3, #3
     356:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     358:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     35a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     35c:	b29b      	uxth	r3, r3
     35e:	9302      	str	r3, [sp, #8]
     360:	9b01      	ldr	r3, [sp, #4]
     362:	0032      	movs	r2, r6
     364:	8818      	ldrh	r0, [r3, #0]
     366:	2100      	movs	r1, #0
     368:	17f3      	asrs	r3, r6, #31
     36a:	b280      	uxth	r0, r0
     36c:	47a0      	blx	r4
     36e:	064b      	lsls	r3, r1, #25
     370:	09c4      	lsrs	r4, r0, #7
     372:	431c      	orrs	r4, r3
     374:	2300      	movs	r3, #0
     376:	11cd      	asrs	r5, r1, #7
     378:	9902      	ldr	r1, [sp, #8]
     37a:	040a      	lsls	r2, r1, #16
     37c:	1912      	adds	r2, r2, r4
     37e:	416b      	adcs	r3, r5
     380:	9208      	str	r2, [sp, #32]
     382:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     384:	ab04      	add	r3, sp, #16
     386:	889c      	ldrh	r4, [r3, #4]
     388:	8918      	ldrh	r0, [r3, #8]
     38a:	0032      	movs	r2, r6
     38c:	9b03      	ldr	r3, [sp, #12]
     38e:	4d18      	ldr	r5, [pc, #96]	; (3f0 <ConvertPressureTemperature+0xe8>)
     390:	b280      	uxth	r0, r0
     392:	2100      	movs	r1, #0
     394:	47a8      	blx	r5
     396:	060b      	lsls	r3, r1, #24
     398:	0a05      	lsrs	r5, r0, #8
     39a:	431d      	orrs	r5, r3
     39c:	2300      	movs	r3, #0
     39e:	b2a4      	uxth	r4, r4
     3a0:	120e      	asrs	r6, r1, #8
     3a2:	03e2      	lsls	r2, r4, #15
     3a4:	1952      	adds	r2, r2, r5
     3a6:	4173      	adcs	r3, r6
     3a8:	920a      	str	r2, [sp, #40]	; 0x28
     3aa:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     3b0:	9c08      	ldr	r4, [sp, #32]
     3b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
     3b4:	4e0e      	ldr	r6, [pc, #56]	; (3f0 <ConvertPressureTemperature+0xe8>)
     3b6:	68f8      	ldr	r0, [r7, #12]
     3b8:	2100      	movs	r1, #0
     3ba:	47b0      	blx	r6
     3bc:	2300      	movs	r3, #0
     3be:	17ce      	asrs	r6, r1, #31
     3c0:	02f6      	lsls	r6, r6, #11
     3c2:	0af2      	lsrs	r2, r6, #11
     3c4:	1880      	adds	r0, r0, r2
     3c6:	4159      	adcs	r1, r3
     3c8:	02ce      	lsls	r6, r1, #11
     3ca:	0d42      	lsrs	r2, r0, #21
     3cc:	4332      	orrs	r2, r6
     3ce:	154b      	asrs	r3, r1, #21
     3d0:	1b12      	subs	r2, r2, r4
     3d2:	41ab      	sbcs	r3, r5
     3d4:	2100      	movs	r1, #0
     3d6:	17dc      	asrs	r4, r3, #31
     3d8:	0464      	lsls	r4, r4, #17
     3da:	0c60      	lsrs	r0, r4, #17
     3dc:	1812      	adds	r2, r2, r0
     3de:	414b      	adcs	r3, r1
     3e0:	0011      	movs	r1, r2
     3e2:	045b      	lsls	r3, r3, #17
     3e4:	0bca      	lsrs	r2, r1, #15
     3e6:	431a      	orrs	r2, r3
     3e8:	61fa      	str	r2, [r7, #28]
}
     3ea:	b00d      	add	sp, #52	; 0x34
     3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	00001815 	.word	0x00001815

000003f4 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3f4:	220a      	movs	r2, #10
     3f6:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     3f8:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3fa:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     3fc:	4c0e      	ldr	r4, [pc, #56]	; (438 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3fe:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     400:	42a2      	cmp	r2, r4
     402:	d901      	bls.n	408 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     404:	4b0d      	ldr	r3, [pc, #52]	; (43c <pascalToCent+0x48>)
     406:	e015      	b.n	434 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     408:	1aa3      	subs	r3, r4, r2
     40a:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     40c:	2b4b      	cmp	r3, #75	; 0x4b
     40e:	d901      	bls.n	414 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     410:	4b0b      	ldr	r3, [pc, #44]	; (440 <pascalToCent+0x4c>)
     412:	e00f      	b.n	434 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     414:	4d0b      	ldr	r5, [pc, #44]	; (444 <pascalToCent+0x50>)
     416:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     418:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     41a:	3301      	adds	r3, #1
     41c:	009b      	lsls	r3, r3, #2
     41e:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     420:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     422:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     424:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     426:	1aa4      	subs	r4, r4, r2
     428:	691a      	ldr	r2, [r3, #16]
     42a:	1a52      	subs	r2, r2, r1
     42c:	0013      	movs	r3, r2
     42e:	4363      	muls	r3, r4
     430:	0a9b      	lsrs	r3, r3, #10
     432:	185b      	adds	r3, r3, r1
     434:	6203      	str	r3, [r0, #32]
        }
    }
}
     436:	bd70      	pop	{r4, r5, r6, pc}
     438:	000199cc 	.word	0x000199cc
     43c:	ffff8d20 	.word	0xffff8d20
     440:	000f048e 	.word	0x000f048e
     444:	00003218 	.word	0x00003218

00000448 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	27a2      	movs	r7, #162	; 0xa2
     44c:	b087      	sub	sp, #28
     44e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     450:	2096      	movs	r0, #150	; 0x96
     452:	4c2b      	ldr	r4, [pc, #172]	; (500 <readMS5803Coefficients+0xb8>)
     454:	0080      	lsls	r0, r0, #2
     456:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     458:	2096      	movs	r0, #150	; 0x96
     45a:	0080      	lsls	r0, r0, #2
     45c:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     45e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     460:	4c28      	ldr	r4, [pc, #160]	; (504 <readMS5803Coefficients+0xbc>)
     462:	4b29      	ldr	r3, [pc, #164]	; (508 <readMS5803Coefficients+0xc0>)
     464:	0212      	lsls	r2, r2, #8
     466:	615a      	str	r2, [r3, #20]
     468:	7863      	ldrb	r3, [r4, #1]
     46a:	7820      	ldrb	r0, [r4, #0]
     46c:	78a2      	ldrb	r2, [r4, #2]
     46e:	021b      	lsls	r3, r3, #8
     470:	4303      	orrs	r3, r0
     472:	0412      	lsls	r2, r2, #16
     474:	0019      	movs	r1, r3
     476:	0013      	movs	r3, r2
     478:	430b      	orrs	r3, r1
     47a:	79a1      	ldrb	r1, [r4, #6]
     47c:	7966      	ldrb	r6, [r4, #5]
     47e:	0209      	lsls	r1, r1, #8
     480:	4331      	orrs	r1, r6
     482:	0008      	movs	r0, r1
     484:	79e1      	ldrb	r1, [r4, #7]
     486:	78e2      	ldrb	r2, [r4, #3]
     488:	0409      	lsls	r1, r1, #16
     48a:	4301      	orrs	r1, r0
     48c:	7a20      	ldrb	r0, [r4, #8]
     48e:	7a66      	ldrb	r6, [r4, #9]
     490:	0612      	lsls	r2, r2, #24
     492:	0600      	lsls	r0, r0, #24
     494:	4308      	orrs	r0, r1
     496:	431a      	orrs	r2, r3
     498:	9700      	str	r7, [sp, #0]
     49a:	7923      	ldrb	r3, [r4, #4]
     49c:	0031      	movs	r1, r6
     49e:	4d1b      	ldr	r5, [pc, #108]	; (50c <readMS5803Coefficients+0xc4>)
     4a0:	9003      	str	r0, [sp, #12]
     4a2:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4a4:	7ae3      	ldrb	r3, [r4, #11]
     4a6:	0020      	movs	r0, r4
     4a8:	7aa1      	ldrb	r1, [r4, #10]
     4aa:	7b24      	ldrb	r4, [r4, #12]
     4ac:	021b      	lsls	r3, r3, #8
     4ae:	430b      	orrs	r3, r1
     4b0:	0424      	lsls	r4, r4, #16
     4b2:	001a      	movs	r2, r3
     4b4:	0023      	movs	r3, r4
     4b6:	7b44      	ldrb	r4, [r0, #13]
     4b8:	7b85      	ldrb	r5, [r0, #14]
     4ba:	4313      	orrs	r3, r2
     4bc:	0624      	lsls	r4, r4, #24
     4be:	431c      	orrs	r4, r3
     4c0:	0022      	movs	r2, r4
     4c2:	002b      	movs	r3, r5
     4c4:	9404      	str	r4, [sp, #16]
     4c6:	0031      	movs	r1, r6
     4c8:	4c11      	ldr	r4, [pc, #68]	; (510 <readMS5803Coefficients+0xc8>)
     4ca:	9803      	ldr	r0, [sp, #12]
     4cc:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ce:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4d0:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4d2:	9a04      	ldr	r2, [sp, #16]
     4d4:	9803      	ldr	r0, [sp, #12]
     4d6:	0031      	movs	r1, r6
     4d8:	4c0d      	ldr	r4, [pc, #52]	; (510 <readMS5803Coefficients+0xc8>)
     4da:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4dc:	2280      	movs	r2, #128	; 0x80
     4de:	4b0a      	ldr	r3, [pc, #40]	; (508 <readMS5803Coefficients+0xc0>)
     4e0:	0212      	lsls	r2, r2, #8
     4e2:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     4e4:	9b05      	ldr	r3, [sp, #20]
     4e6:	021d      	lsls	r5, r3, #8
     4e8:	9b02      	ldr	r3, [sp, #8]
     4ea:	4328      	orrs	r0, r5
     4ec:	8018      	strh	r0, [r3, #0]
     4ee:	1cbb      	adds	r3, r7, #2
     4f0:	b2df      	uxtb	r7, r3
     4f2:	9b02      	ldr	r3, [sp, #8]
     4f4:	3302      	adds	r3, #2
     4f6:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     4f8:	2fae      	cmp	r7, #174	; 0xae
     4fa:	d1a9      	bne.n	450 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     4fc:	b007      	add	sp, #28
     4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     500:	00000ded 	.word	0x00000ded
     504:	00003218 	.word	0x00003218
     508:	41004400 	.word	0x41004400
     50c:	00000b7d 	.word	0x00000b7d
     510:	00000be9 	.word	0x00000be9

00000514 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     516:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     518:	231e      	movs	r3, #30
     51a:	491a      	ldr	r1, [pc, #104]	; (584 <initMS5803Barometer+0x70>)
     51c:	4d1a      	ldr	r5, [pc, #104]	; (588 <initMS5803Barometer+0x74>)
     51e:	0236      	lsls	r6, r6, #8
     520:	616e      	str	r6, [r5, #20]
     522:	9300      	str	r3, [sp, #0]
     524:	784b      	ldrb	r3, [r1, #1]
     526:	780a      	ldrb	r2, [r1, #0]
     528:	021b      	lsls	r3, r3, #8
     52a:	4313      	orrs	r3, r2
     52c:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     52e:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     530:	0412      	lsls	r2, r2, #16
     532:	0018      	movs	r0, r3
     534:	0013      	movs	r3, r2
     536:	78ca      	ldrb	r2, [r1, #3]
     538:	4303      	orrs	r3, r0
     53a:	0612      	lsls	r2, r2, #24
     53c:	1d4f      	adds	r7, r1, #5
     53e:	431a      	orrs	r2, r3
     540:	7948      	ldrb	r0, [r1, #5]
     542:	790b      	ldrb	r3, [r1, #4]
     544:	7989      	ldrb	r1, [r1, #6]
     546:	0209      	lsls	r1, r1, #8
     548:	4301      	orrs	r1, r0
     54a:	78b8      	ldrb	r0, [r7, #2]
     54c:	0400      	lsls	r0, r0, #16
     54e:	4301      	orrs	r1, r0
     550:	78f8      	ldrb	r0, [r7, #3]
     552:	0600      	lsls	r0, r0, #24
     554:	4308      	orrs	r0, r1
     556:	7939      	ldrb	r1, [r7, #4]
     558:	4f0c      	ldr	r7, [pc, #48]	; (58c <initMS5803Barometer+0x78>)
     55a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     55c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     55e:	20c8      	movs	r0, #200	; 0xc8
     560:	4b0b      	ldr	r3, [pc, #44]	; (590 <initMS5803Barometer+0x7c>)
     562:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     564:	0020      	movs	r0, r4
     566:	4b0b      	ldr	r3, [pc, #44]	; (594 <initMS5803Barometer+0x80>)
     568:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     56a:	23fa      	movs	r3, #250	; 0xfa
     56c:	011b      	lsls	r3, r3, #4
     56e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     570:	4b09      	ldr	r3, [pc, #36]	; (598 <initMS5803Barometer+0x84>)
     572:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     574:	4b09      	ldr	r3, [pc, #36]	; (59c <initMS5803Barometer+0x88>)
     576:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     578:	4b09      	ldr	r3, [pc, #36]	; (5a0 <initMS5803Barometer+0x8c>)
     57a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     57c:	23fa      	movs	r3, #250	; 0xfa
     57e:	00db      	lsls	r3, r3, #3
     580:	6163      	str	r3, [r4, #20]




}
     582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     584:	00003218 	.word	0x00003218
     588:	41004400 	.word	0x41004400
     58c:	00000b7d 	.word	0x00000b7d
     590:	00000e1d 	.word	0x00000e1d
     594:	00000449 	.word	0x00000449
     598:	00002710 	.word	0x00002710
     59c:	0041c9fe 	.word	0x0041c9fe
     5a0:	007ffae4 	.word	0x007ffae4

000005a4 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     5a6:	4bbf      	ldr	r3, [pc, #764]	; (8a4 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5a8:	b085      	sub	sp, #20
    SystemInit();
     5aa:	4798      	blx	r3
    GclkInit();
     5ac:	4bbe      	ldr	r3, [pc, #760]	; (8a8 <init+0x304>)
     5ae:	4798      	blx	r3
    RtcInit();
     5b0:	4bbe      	ldr	r3, [pc, #760]	; (8ac <init+0x308>)
     5b2:	4798      	blx	r3
    delayInit();
     5b4:	4bbe      	ldr	r3, [pc, #760]	; (8b0 <init+0x30c>)
     5b6:	4798      	blx	r3
    adcInit();
     5b8:	4bbe      	ldr	r3, [pc, #760]	; (8b4 <init+0x310>)
     5ba:	4798      	blx	r3
    dmaInit();
     5bc:	4bbe      	ldr	r3, [pc, #760]	; (8b8 <init+0x314>)
     5be:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c2:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	4bbd      	ldr	r3, [pc, #756]	; (8bc <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	5858      	ldr	r0, [r3, r1]
     5cc:	4abc      	ldr	r2, [pc, #752]	; (8c0 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	2401      	movs	r4, #1
     5d0:	4002      	ands	r2, r0
     5d2:	505a      	str	r2, [r3, r1]
     5d4:	4bbb      	ldr	r3, [pc, #748]	; (8c4 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5d6:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d8:	0019      	movs	r1, r3
     5da:	3154      	adds	r1, #84	; 0x54
     5dc:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5de:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e0:	43a2      	bics	r2, r4
     5e2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e4:	2280      	movs	r2, #128	; 0x80
     5e6:	0352      	lsls	r2, r2, #13
     5e8:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	220f      	movs	r2, #15
     5ec:	3033      	adds	r0, #51	; 0x33
     5ee:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f2:	4391      	bics	r1, r2
     5f4:	4321      	orrs	r1, r4
     5f6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f8:	7cc1      	ldrb	r1, [r0, #19]
     5fa:	36c3      	adds	r6, #195	; 0xc3
     5fc:	4321      	orrs	r1, r4
     5fe:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     600:	0019      	movs	r1, r3
     602:	31b1      	adds	r1, #177	; 0xb1
     604:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     606:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     608:	4010      	ands	r0, r2
     60a:	4328      	orrs	r0, r5
     60c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     60e:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     610:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     612:	4320      	orrs	r0, r4
     614:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     616:	7808      	ldrb	r0, [r1, #0]
     618:	4010      	ands	r0, r2
     61a:	4328      	orrs	r0, r5
     61c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61e:	7830      	ldrb	r0, [r6, #0]
     620:	4320      	orrs	r0, r4
     622:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     624:	7d30      	ldrb	r0, [r6, #20]
     626:	43a0      	bics	r0, r4
     628:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     62a:	2080      	movs	r0, #128	; 0x80
     62c:	0400      	lsls	r0, r0, #16
     62e:	9703      	str	r7, [sp, #12]
     630:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     632:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     634:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     636:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     638:	4390      	bics	r0, r2
     63a:	4320      	orrs	r0, r4
     63c:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     63e:	20c2      	movs	r0, #194	; 0xc2
     640:	4684      	mov	ip, r0
     642:	449c      	add	ip, r3
     644:	4660      	mov	r0, ip
     646:	4667      	mov	r7, ip
     648:	7800      	ldrb	r0, [r0, #0]
     64a:	4320      	orrs	r0, r4
     64c:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     64e:	7808      	ldrb	r0, [r1, #0]
     650:	4390      	bics	r0, r2
     652:	4320      	orrs	r0, r4
     654:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     656:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     658:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     65a:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65c:	4321      	orrs	r1, r4
     65e:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     660:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     662:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     664:	43a1      	bics	r1, r4
     666:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     668:	2180      	movs	r1, #128	; 0x80
     66a:	9803      	ldr	r0, [sp, #12]
     66c:	03c9      	lsls	r1, r1, #15
     66e:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     670:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     672:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     674:	3031      	adds	r0, #49	; 0x31
     676:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     678:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     67a:	4011      	ands	r1, r2
     67c:	430d      	orrs	r5, r1
     67e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     680:	001d      	movs	r5, r3
     682:	3543      	adds	r5, #67	; 0x43
     684:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     686:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     688:	4321      	orrs	r1, r4
     68a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68c:	7da9      	ldrb	r1, [r5, #22]
     68e:	3505      	adds	r5, #5
     690:	43a1      	bics	r1, r4
     692:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	0489      	lsls	r1, r1, #18
     698:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     69c:	7801      	ldrb	r1, [r0, #0]
     69e:	4391      	bics	r1, r2
     6a0:	4321      	orrs	r1, r4
     6a2:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a4:	7c41      	ldrb	r1, [r0, #17]
     6a6:	3011      	adds	r0, #17
     6a8:	4321      	orrs	r1, r4
     6aa:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ac:	7d81      	ldrb	r1, [r0, #22]
     6ae:	43a1      	bics	r1, r4
     6b0:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b2:	2180      	movs	r1, #128	; 0x80
     6b4:	0449      	lsls	r1, r1, #17
     6b6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6b8:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	43a1      	bics	r1, r4
     6be:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c0:	2180      	movs	r1, #128	; 0x80
     6c2:	0049      	lsls	r1, r1, #1
     6c4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c6:	7831      	ldrb	r1, [r6, #0]
     6c8:	43a1      	bics	r1, r4
     6ca:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6cc:	2180      	movs	r1, #128	; 0x80
     6ce:	0089      	lsls	r1, r1, #2
     6d0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d2:	0019      	movs	r1, r3
     6d4:	314b      	adds	r1, #75	; 0x4b
     6d6:	7808      	ldrb	r0, [r1, #0]
     6d8:	43a0      	bics	r0, r4
     6da:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6dc:	7808      	ldrb	r0, [r1, #0]
     6de:	4338      	orrs	r0, r7
     6e0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6e2:	2080      	movs	r0, #128	; 0x80
     6e4:	0100      	lsls	r0, r0, #4
     6e6:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6e8:	4877      	ldr	r0, [pc, #476]	; (8c8 <init+0x324>)
     6ea:	371e      	adds	r7, #30
     6ec:	7800      	ldrb	r0, [r0, #0]
     6ee:	4010      	ands	r0, r2
     6f0:	4338      	orrs	r0, r7
     6f2:	4f75      	ldr	r7, [pc, #468]	; (8c8 <init+0x324>)
     6f4:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f8:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	4320      	orrs	r0, r4
     6fc:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fe:	0018      	movs	r0, r3
     700:	3034      	adds	r0, #52	; 0x34
     702:	7801      	ldrb	r1, [r0, #0]
     704:	4011      	ands	r1, r2
     706:	4339      	orrs	r1, r7
     708:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70a:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     70c:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70e:	4321      	orrs	r1, r4
     710:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     712:	4666      	mov	r6, ip
     714:	7801      	ldrb	r1, [r0, #0]
     716:	4391      	bics	r1, r2
     718:	4331      	orrs	r1, r6
     71a:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     71c:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71e:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     720:	4321      	orrs	r1, r4
     722:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     724:	7801      	ldrb	r1, [r0, #0]
     726:	001e      	movs	r6, r3
     728:	43a1      	bics	r1, r4
     72a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72c:	2180      	movs	r1, #128	; 0x80
     72e:	9803      	ldr	r0, [sp, #12]
     730:	00c9      	lsls	r1, r1, #3
     732:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     734:	0018      	movs	r0, r3
     736:	3098      	adds	r0, #152	; 0x98
     738:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73a:	78a8      	ldrb	r0, [r5, #2]
     73c:	3651      	adds	r6, #81	; 0x51
     73e:	43a0      	bics	r0, r4
     740:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     742:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     744:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     746:	7a29      	ldrb	r1, [r5, #8]
     748:	43a1      	bics	r1, r4
     74a:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     74c:	2180      	movs	r1, #128	; 0x80
     74e:	0249      	lsls	r1, r1, #9
     750:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     752:	7831      	ldrb	r1, [r6, #0]
     754:	43a1      	bics	r1, r4
     756:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     758:	2180      	movs	r1, #128	; 0x80
     75a:	0289      	lsls	r1, r1, #10
     75c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75e:	0019      	movs	r1, r3
     760:	3153      	adds	r1, #83	; 0x53
     762:	7808      	ldrb	r0, [r1, #0]
     764:	43a0      	bics	r0, r4
     766:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     768:	7808      	ldrb	r0, [r1, #0]
     76a:	4338      	orrs	r0, r7
     76c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     770:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     772:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     774:	0300      	lsls	r0, r0, #12
     776:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     778:	9703      	str	r7, [sp, #12]
     77a:	7838      	ldrb	r0, [r7, #0]
     77c:	2720      	movs	r7, #32
     77e:	4010      	ands	r0, r2
     780:	4338      	orrs	r0, r7
     782:	9f03      	ldr	r7, [sp, #12]
     784:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     786:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     788:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78a:	4320      	orrs	r0, r4
     78c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     78e:	0018      	movs	r0, r3
     790:	3038      	adds	r0, #56	; 0x38
     792:	7801      	ldrb	r1, [r0, #0]
     794:	4011      	ands	r1, r2
     796:	4339      	orrs	r1, r7
     798:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79a:	7831      	ldrb	r1, [r6, #0]
     79c:	4321      	orrs	r1, r4
     79e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7a0:	4666      	mov	r6, ip
     7a2:	7801      	ldrb	r1, [r0, #0]
     7a4:	4391      	bics	r1, r2
     7a6:	4331      	orrs	r1, r6
     7a8:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7aa:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ac:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ae:	4321      	orrs	r1, r4
     7b0:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	7981      	ldrb	r1, [r0, #6]
     7b4:	43a1      	bics	r1, r4
     7b6:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	02c9      	lsls	r1, r1, #11
     7bc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7be:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	7801      	ldrb	r1, [r0, #0]
     7c2:	43a1      	bics	r1, r4
     7c4:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c6:	2180      	movs	r1, #128	; 0x80
     7c8:	0149      	lsls	r1, r1, #5
     7ca:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7cc:	7881      	ldrb	r1, [r0, #2]
     7ce:	43a1      	bics	r1, r4
     7d0:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d2:	2180      	movs	r1, #128	; 0x80
     7d4:	01c9      	lsls	r1, r1, #7
     7d6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d8:	0019      	movs	r1, r3
     7da:	314d      	adds	r1, #77	; 0x4d
     7dc:	7808      	ldrb	r0, [r1, #0]
     7de:	43a0      	bics	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7e2:	7808      	ldrb	r0, [r1, #0]
     7e4:	4330      	orrs	r0, r6
     7e6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e8:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ea:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7ec:	0189      	lsls	r1, r1, #6
     7ee:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f0:	304f      	adds	r0, #79	; 0x4f
     7f2:	7801      	ldrb	r1, [r0, #0]
     7f4:	43a1      	bics	r1, r4
     7f6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f8:	2180      	movs	r1, #128	; 0x80
     7fa:	0209      	lsls	r1, r1, #8
     7fc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7fe:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	0019      	movs	r1, r3
     802:	3155      	adds	r1, #85	; 0x55
     804:	7808      	ldrb	r0, [r1, #0]
     806:	43a0      	bics	r0, r4
     808:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80a:	2080      	movs	r0, #128	; 0x80
     80c:	0380      	lsls	r0, r0, #14
     80e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     810:	2040      	movs	r0, #64	; 0x40
     812:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	7848      	ldrb	r0, [r1, #1]
     816:	43a0      	bics	r0, r4
     818:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81a:	2080      	movs	r0, #128	; 0x80
     81c:	03c0      	lsls	r0, r0, #15
     81e:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     820:	0018      	movs	r0, r3
     822:	303b      	adds	r0, #59	; 0x3b
     824:	7805      	ldrb	r5, [r0, #0]
     826:	4395      	bics	r5, r2
     828:	4335      	orrs	r5, r6
     82a:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	784d      	ldrb	r5, [r1, #1]
     82e:	4325      	orrs	r5, r4
     830:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     832:	788d      	ldrb	r5, [r1, #2]
     834:	43a5      	bics	r5, r4
     836:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     838:	788d      	ldrb	r5, [r1, #2]
     83a:	4335      	orrs	r5, r6
     83c:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     83e:	2580      	movs	r5, #128	; 0x80
     840:	042d      	lsls	r5, r5, #16
     842:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     844:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     846:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     848:	4e20      	ldr	r6, [pc, #128]	; (8cc <init+0x328>)
     84a:	401a      	ands	r2, r3
     84c:	433a      	orrs	r2, r7
     84e:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     850:	788b      	ldrb	r3, [r1, #2]
     852:	2204      	movs	r2, #4
     854:	4323      	orrs	r3, r4
     856:	708b      	strb	r3, [r1, #2]
     858:	2000      	movs	r0, #0
     85a:	2103      	movs	r1, #3
     85c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     85e:	002b      	movs	r3, r5
     860:	002a      	movs	r2, r5
     862:	0028      	movs	r0, r5
     864:	4f1a      	ldr	r7, [pc, #104]	; (8d0 <init+0x32c>)
     866:	9501      	str	r5, [sp, #4]
     868:	9500      	str	r5, [sp, #0]
     86a:	2103      	movs	r1, #3
     86c:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     86e:	0020      	movs	r0, r4
     870:	2204      	movs	r2, #4
     872:	2103      	movs	r1, #3
     874:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     876:	002b      	movs	r3, r5
     878:	002a      	movs	r2, r5
     87a:	0020      	movs	r0, r4
     87c:	9501      	str	r5, [sp, #4]
     87e:	9500      	str	r5, [sp, #0]
     880:	2103      	movs	r1, #3
     882:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     884:	2208      	movs	r2, #8
     886:	2104      	movs	r1, #4
     888:	2003      	movs	r0, #3
     88a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     88c:	0021      	movs	r1, r4
     88e:	002a      	movs	r2, r5
     890:	2003      	movs	r0, #3
     892:	4b10      	ldr	r3, [pc, #64]	; (8d4 <init+0x330>)
     894:	4c10      	ldr	r4, [pc, #64]	; (8d8 <init+0x334>)
     896:	47a0      	blx	r4

    TC4Init();
     898:	4b10      	ldr	r3, [pc, #64]	; (8dc <init+0x338>)
     89a:	4798      	blx	r3
    TC5Init();
     89c:	4b10      	ldr	r3, [pc, #64]	; (8e0 <init+0x33c>)
     89e:	4798      	blx	r3
}
     8a0:	b005      	add	sp, #20
     8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8a4:	000001d5 	.word	0x000001d5
     8a8:	00000c79 	.word	0x00000c79
     8ac:	00000d01 	.word	0x00000d01
     8b0:	00000dcd 	.word	0x00000dcd
     8b4:	00000a99 	.word	0x00000a99
     8b8:	00000f6d 	.word	0x00000f6d
     8bc:	e000e100 	.word	0xe000e100
     8c0:	ff00ffff 	.word	0xff00ffff
     8c4:	41004400 	.word	0x41004400
     8c8:	41004435 	.word	0x41004435
     8cc:	00001675 	.word	0x00001675
     8d0:	000016d9 	.word	0x000016d9
     8d4:	0000f2e4 	.word	0x0000f2e4
     8d8:	0000173d 	.word	0x0000173d
     8dc:	00000e9d 	.word	0x00000e9d
     8e0:	00000f05 	.word	0x00000f05

000008e4 <main>:
    delay_ms(500);
}



int main(void) {
     8e4:	b570      	push	{r4, r5, r6, lr}
     8e6:	4c34      	ldr	r4, [pc, #208]	; (9b8 <main+0xd4>)

    init();
     8e8:	4b34      	ldr	r3, [pc, #208]	; (9bc <main+0xd8>)
    delay_ms(500);
}



int main(void) {
     8ea:	44a5      	add	sp, r4

    init();
     8ec:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8ee:	2400      	movs	r4, #0
     8f0:	466b      	mov	r3, sp
    initMS5803Barometer(&my_altimeter.myBarometer);
     8f2:	a802      	add	r0, sp, #8
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     8f4:	711c      	strb	r4, [r3, #4]
    initMS5803Barometer(&my_altimeter.myBarometer);
     8f6:	4b32      	ldr	r3, [pc, #200]	; (9c0 <main+0xdc>)
     8f8:	4798      	blx	r3
    IMUinit();
     8fa:	4b32      	ldr	r3, [pc, #200]	; (9c4 <main+0xe0>)
     8fc:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     8fe:	2390      	movs	r3, #144	; 0x90
     900:	466a      	mov	r2, sp
     902:	33ff      	adds	r3, #255	; 0xff
     904:	3204      	adds	r2, #4
     906:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x001000;
     908:	2380      	movs	r3, #128	; 0x80
     90a:	015b      	lsls	r3, r3, #5
     90c:	9323      	str	r3, [sp, #140]	; 0x8c
    my_altimeter.myFlashMemory.endingAddress = 0x002FFF;
     90e:	4b2e      	ldr	r3, [pc, #184]	; (9c8 <main+0xe4>)
    //AT25SFErace4KBlock(0x03);

    u8_t address[3] = {0x00,0x10,0x00};
    //AT25SFWriteBytes(LOGONESTART, 3, address);

    findFlight(&my_altimeter);
     910:	0010      	movs	r0, r2
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x001000;
    my_altimeter.myFlashMemory.endingAddress = 0x002FFF;
     912:	9324      	str	r3, [sp, #144]	; 0x90
    //AT25SFErace4KBlock(0x03);

    u8_t address[3] = {0x00,0x10,0x00};
    //AT25SFWriteBytes(LOGONESTART, 3, address);

    findFlight(&my_altimeter);
     914:	4b2d      	ldr	r3, [pc, #180]	; (9cc <main+0xe8>)
     916:	4798      	blx	r3




    u32_t timeNow = millis();
     918:	4c2d      	ldr	r4, [pc, #180]	; (9d0 <main+0xec>)
     91a:	47a0      	blx	r4
     91c:	0005      	movs	r5, r0
    while((millis() - timeNow) < 3000) {
     91e:	47a0      	blx	r4
     920:	4b2c      	ldr	r3, [pc, #176]	; (9d4 <main+0xf0>)
     922:	1b40      	subs	r0, r0, r5
     924:	4298      	cmp	r0, r3
     926:	d806      	bhi.n	936 <main+0x52>
        sampleTick(&my_altimeter);
     928:	a801      	add	r0, sp, #4
     92a:	4b2b      	ldr	r3, [pc, #172]	; (9d8 <main+0xf4>)
     92c:	4798      	blx	r3
        flight(&my_altimeter);
     92e:	a801      	add	r0, sp, #4
     930:	4b2a      	ldr	r3, [pc, #168]	; (9dc <main+0xf8>)
     932:	4798      	blx	r3
     934:	e7f3      	b.n	91e <main+0x3a>
    }

    logFlight(&my_altimeter);
     936:	a801      	add	r0, sp, #4
     938:	4b29      	ldr	r3, [pc, #164]	; (9e0 <main+0xfc>)
     93a:	4798      	blx	r3

    beep(300);
     93c:	2096      	movs	r0, #150	; 0x96
     93e:	4b29      	ldr	r3, [pc, #164]	; (9e4 <main+0x100>)
     940:	0040      	lsls	r0, r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     942:	2680      	movs	r6, #128	; 0x80
     944:	4798      	blx	r3
     946:	0376      	lsls	r6, r6, #13
    while (1) {

        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     948:	2400      	movs	r4, #0

    beep(300);

    while (1) {

        if (takeSample) {
     94a:	4d27      	ldr	r5, [pc, #156]	; (9e8 <main+0x104>)
     94c:	782b      	ldrb	r3, [r5, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d006      	beq.n	960 <main+0x7c>
            sampleTick(&my_altimeter);
     952:	a801      	add	r0, sp, #4
     954:	4b20      	ldr	r3, [pc, #128]	; (9d8 <main+0xf4>)
     956:	4798      	blx	r3
            flight(&my_altimeter);
     958:	a801      	add	r0, sp, #4
     95a:	4b20      	ldr	r3, [pc, #128]	; (9dc <main+0xf8>)
     95c:	4798      	blx	r3
            takeSample = false;
     95e:	702c      	strb	r4, [r5, #0]
        }

        if (writeLog) {
     960:	4b22      	ldr	r3, [pc, #136]	; (9ec <main+0x108>)
     962:	781a      	ldrb	r2, [r3, #0]
     964:	2a00      	cmp	r2, #0
     966:	d0f0      	beq.n	94a <main+0x66>
            writeLog = false;
     968:	701c      	strb	r4, [r3, #0]
            logSensors(&my_altimeter);
     96a:	a801      	add	r0, sp, #4
     96c:	4b20      	ldr	r3, [pc, #128]	; (9f0 <main+0x10c>)
     96e:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     970:	466a      	mov	r2, sp
     972:	4b20      	ldr	r3, [pc, #128]	; (9f4 <main+0x110>)
     974:	3204      	adds	r2, #4
     976:	5cd2      	ldrb	r2, [r2, r3]
     978:	2a00      	cmp	r2, #0
     97a:	d0e6      	beq.n	94a <main+0x66>
                my_altimeter.myFlashMemory.pageReady = false;
     97c:	4669      	mov	r1, sp
     97e:	2200      	movs	r2, #0
     980:	4d1d      	ldr	r5, [pc, #116]	; (9f8 <main+0x114>)
     982:	3104      	adds	r1, #4
     984:	54ca      	strb	r2, [r1, r3]
     986:	61ee      	str	r6, [r5, #28]

                pinToggle(LedPin);

                if (my_altimeter.myFlashMemory.currentAddress <= my_altimeter.myFlashMemory.endingAddress) {
     988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
     98a:	9a24      	ldr	r2, [sp, #144]	; 0x90
     98c:	4293      	cmp	r3, r2
     98e:	d803      	bhi.n	998 <main+0xb4>

                    //u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
                    my_altimeter.myFlashMemory.currentAddress = my_altimeter.myFlashMemory.currentAddress + 0x100;
     990:	3301      	adds	r3, #1
     992:	33ff      	adds	r3, #255	; 0xff
     994:	9323      	str	r3, [sp, #140]	; 0x8c
     996:	e7d7      	b.n	948 <main+0x64>
                } else {
                    delay_ms(80);
     998:	4c18      	ldr	r4, [pc, #96]	; (9fc <main+0x118>)
     99a:	2050      	movs	r0, #80	; 0x50
     99c:	47a0      	blx	r4
     99e:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9a0:	2050      	movs	r0, #80	; 0x50
     9a2:	47a0      	blx	r4
     9a4:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9a6:	2050      	movs	r0, #80	; 0x50
     9a8:	47a0      	blx	r4
     9aa:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9ac:	2050      	movs	r0, #80	; 0x50
     9ae:	47a0      	blx	r4
     9b0:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     9b2:	2050      	movs	r0, #80	; 0x50
     9b4:	47a0      	blx	r4
     9b6:	e7c7      	b.n	948 <main+0x64>
     9b8:	fffffd58 	.word	0xfffffd58
     9bc:	000005a5 	.word	0x000005a5
     9c0:	00000515 	.word	0x00000515
     9c4:	00000a01 	.word	0x00000a01
     9c8:	00002fff 	.word	0x00002fff
     9cc:	00000a2d 	.word	0x00000a2d
     9d0:	00000e69 	.word	0x00000e69
     9d4:	00000bb7 	.word	0x00000bb7
     9d8:	000012cd 	.word	0x000012cd
     9dc:	00000fcd 	.word	0x00000fcd
     9e0:	000010f5 	.word	0x000010f5
     9e4:	00000c3d 	.word	0x00000c3d
     9e8:	20000463 	.word	0x20000463
     9ec:	20000461 	.word	0x20000461
     9f0:	000011c5 	.word	0x000011c5
     9f4:	0000028f 	.word	0x0000028f
     9f8:	41004400 	.word	0x41004400
     9fc:	00000e1d 	.word	0x00000e1d

00000a00 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a00:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a02:	4c08      	ldr	r4, [pc, #32]	; (a24 <IMUinit+0x24>)
     a04:	2580      	movs	r5, #128	; 0x80
     a06:	0023      	movs	r3, r4
     a08:	00ed      	lsls	r5, r5, #3
     a0a:	3394      	adds	r3, #148	; 0x94
     a0c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a0e:	4e06      	ldr	r6, [pc, #24]	; (a28 <IMUinit+0x28>)
     a10:	210f      	movs	r1, #15
     a12:	2000      	movs	r0, #0
     a14:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a16:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a18:	210c      	movs	r1, #12
     a1a:	2000      	movs	r0, #0
     a1c:	47b0      	blx	r6
     a1e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a20:	bd70      	pop	{r4, r5, r6, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	41004400 	.word	0x41004400
     a28:	00001781 	.word	0x00001781

00000a2c <findFlight>:


void findFlight(Altimeter *my_altimeter) {
     a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a2e:	2000      	movs	r0, #0
    u8_t beeps = 1;

    for (u8_t flightAddress = LOGONESTART; flightAddress <= LOGTENEND; flightAddress += 0x06) {

        u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);
     a30:	2606      	movs	r6, #6
    u8_t flightFound = 0;
    u8_t beeps = 1;

    for (u8_t flightAddress = LOGONESTART; flightAddress <= LOGTENEND; flightAddress += 0x06) {

        u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     a32:	466a      	mov	r2, sp
     a34:	2300      	movs	r3, #0
     a36:	1c45      	adds	r5, r0, #1
     a38:	7013      	strb	r3, [r2, #0]
     a3a:	7053      	strb	r3, [r2, #1]
     a3c:	7093      	strb	r3, [r2, #2]
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);
     a3e:	4370      	muls	r0, r6
     a40:	4b11      	ldr	r3, [pc, #68]	; (a88 <findFlight+0x5c>)
     a42:	2103      	movs	r1, #3
     a44:	4798      	blx	r3

       volatile u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
     a46:	466b      	mov	r3, sp
     a48:	785b      	ldrb	r3, [r3, #1]
     a4a:	b2ec      	uxtb	r4, r5
     a4c:	021a      	lsls	r2, r3, #8
     a4e:	466b      	mov	r3, sp
     a50:	789b      	ldrb	r3, [r3, #2]
     a52:	041b      	lsls	r3, r3, #16
     a54:	4313      	orrs	r3, r2
     a56:	466a      	mov	r2, sp
     a58:	7812      	ldrb	r2, [r2, #0]
     a5a:	4313      	orrs	r3, r2
     a5c:	9301      	str	r3, [sp, #4]

        if (proposedAddress == 0xFFFFFF) {
     a5e:	9a01      	ldr	r2, [sp, #4]
     a60:	4b0a      	ldr	r3, [pc, #40]	; (a8c <findFlight+0x60>)
     a62:	429a      	cmp	r2, r3
     a64:	d10b      	bne.n	a7e <findFlight+0x52>
            while ( beeps > 0 ) {
                beep(300);
     a66:	2096      	movs	r0, #150	; 0x96
     a68:	4b09      	ldr	r3, [pc, #36]	; (a90 <findFlight+0x64>)
     a6a:	0040      	lsls	r0, r0, #1
                delay_ms(80);
                --beeps;
     a6c:	3c01      	subs	r4, #1

       volatile u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
            while ( beeps > 0 ) {
                beep(300);
     a6e:	4798      	blx	r3
                delay_ms(80);
                --beeps;
     a70:	b2e4      	uxtb	r4, r4
       volatile u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
            while ( beeps > 0 ) {
                beep(300);
                delay_ms(80);
     a72:	2050      	movs	r0, #80	; 0x50
     a74:	4b07      	ldr	r3, [pc, #28]	; (a94 <findFlight+0x68>)
     a76:	4798      	blx	r3
        AT25SEreadSample(flightAddress, 0x03, addressToCheck);

       volatile u32_t proposedAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

        if (proposedAddress == 0xFFFFFF) {
            while ( beeps > 0 ) {
     a78:	2c00      	cmp	r4, #0
     a7a:	d1f4      	bne.n	a66 <findFlight+0x3a>
     a7c:	e002      	b.n	a84 <findFlight+0x58>
     a7e:	1e28      	subs	r0, r5, #0
void findFlight(Altimeter *my_altimeter) {

    u8_t flightFound = 0;
    u8_t beeps = 1;

    for (u8_t flightAddress = LOGONESTART; flightAddress <= LOGTENEND; flightAddress += 0x06) {
     a80:	280b      	cmp	r0, #11
     a82:	d1d6      	bne.n	a32 <findFlight+0x6>
            }
            break;
        }
        ++beeps;
    }
     a84:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	000001e5 	.word	0x000001e5
     a8c:	00ffffff 	.word	0x00ffffff
     a90:	00000c3d 	.word	0x00000c3d
     a94:	00000e1d 	.word	0x00000e1d

00000a98 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a98:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     a9a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a9c:	4a10      	ldr	r2, [pc, #64]	; (ae0 <adcInit+0x48>)
     a9e:	0249      	lsls	r1, r1, #9
     aa0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     aa2:	4810      	ldr	r0, [pc, #64]	; (ae4 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     aa4:	430b      	orrs	r3, r1
     aa6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     aa8:	23e0      	movs	r3, #224	; 0xe0
     aaa:	490f      	ldr	r1, [pc, #60]	; (ae8 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     aac:	4a0f      	ldr	r2, [pc, #60]	; (aec <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     aae:	00db      	lsls	r3, r3, #3
     ab0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ab2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     ab4:	4a0e      	ldr	r2, [pc, #56]	; (af0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     ab6:	6812      	ldr	r2, [r2, #0]
     ab8:	0150      	lsls	r0, r2, #5
     aba:	4018      	ands	r0, r3
     abc:	4b0d      	ldr	r3, [pc, #52]	; (af4 <adcInit+0x5c>)
     abe:	0154      	lsls	r4, r2, #5
     ac0:	681a      	ldr	r2, [r3, #0]
     ac2:	0ed3      	lsrs	r3, r2, #27
     ac4:	4323      	orrs	r3, r4
     ac6:	b2da      	uxtb	r2, r3
     ac8:	0003      	movs	r3, r0
     aca:	4313      	orrs	r3, r2
     acc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     ace:	2302      	movs	r3, #2
     ad0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     ad2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ad4:	7e4b      	ldrb	r3, [r1, #25]
     ad6:	b25b      	sxtb	r3, r3
     ad8:	2b00      	cmp	r3, #0
     ada:	dbfb      	blt.n	ad4 <adcInit+0x3c>
}
     adc:	bd10      	pop	{r4, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	40000400 	.word	0x40000400
     ae4:	0000401e 	.word	0x0000401e
     ae8:	42004000 	.word	0x42004000
     aec:	40000c00 	.word	0x40000c00
     af0:	00806024 	.word	0x00806024
     af4:	00806020 	.word	0x00806020

00000af8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     af8:	2202      	movs	r2, #2
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <adcSample+0x18>)
     afc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     afe:	3a01      	subs	r2, #1
     b00:	7e19      	ldrb	r1, [r3, #24]
     b02:	4211      	tst	r1, r2
     b04:	d0fc      	beq.n	b00 <adcSample+0x8>
    return ADC->RESULT.reg;
     b06:	4b02      	ldr	r3, [pc, #8]	; (b10 <adcSample+0x18>)
     b08:	8b58      	ldrh	r0, [r3, #26]
     b0a:	b280      	uxth	r0, r0
}
     b0c:	4770      	bx	lr
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	42004000 	.word	0x42004000

00000b14 <adc_read>:


u16_t adc_read(Pin p) {
     b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b16:	2501      	movs	r5, #1
     b18:	0c02      	lsrs	r2, r0, #16
     b1a:	b2d4      	uxtb	r4, r2
     b1c:	9000      	str	r0, [sp, #0]
     b1e:	0e00      	lsrs	r0, r0, #24
     b20:	9101      	str	r1, [sp, #4]
     b22:	0842      	lsrs	r2, r0, #1
     b24:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b26:	4911      	ldr	r1, [pc, #68]	; (b6c <adc_read+0x58>)
     b28:	18d2      	adds	r2, r2, r3
     b2a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b2c:	4228      	tst	r0, r5
     b2e:	d005      	beq.n	b3c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b30:	210f      	movs	r1, #15
     b32:	7814      	ldrb	r4, [r2, #0]
     b34:	4021      	ands	r1, r4
     b36:	2410      	movs	r4, #16
     b38:	4321      	orrs	r1, r4
     b3a:	e003      	b.n	b44 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b3c:	240f      	movs	r4, #15
     b3e:	7811      	ldrb	r1, [r2, #0]
     b40:	43a1      	bics	r1, r4
     b42:	4329      	orrs	r1, r5
     b44:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b46:	2101      	movs	r1, #1
     b48:	4a09      	ldr	r2, [pc, #36]	; (b70 <adc_read+0x5c>)
     b4a:	18c3      	adds	r3, r0, r3
     b4c:	189b      	adds	r3, r3, r2
     b4e:	781a      	ldrb	r2, [r3, #0]
     b50:	430a      	orrs	r2, r1
     b52:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b54:	466b      	mov	r3, sp
     b56:	791a      	ldrb	r2, [r3, #4]
     b58:	231f      	movs	r3, #31
     b5a:	4013      	ands	r3, r2
     b5c:	22c0      	movs	r2, #192	; 0xc0
     b5e:	0152      	lsls	r2, r2, #5
     b60:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b62:	4a04      	ldr	r2, [pc, #16]	; (b74 <adc_read+0x60>)
     b64:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <adc_read+0x64>)
     b68:	4798      	blx	r3
     b6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     b6c:	41004430 	.word	0x41004430
     b70:	41004440 	.word	0x41004440
     b74:	42004000 	.word	0x42004000
     b78:	00000af9 	.word	0x00000af9

00000b7c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b7c:	0c01      	lsrs	r1, r0, #16
     b7e:	0c13      	lsrs	r3, r2, #16
     b80:	b5f0      	push	{r4, r5, r6, r7, lr}
     b82:	b2cd      	uxtb	r5, r1
     b84:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b86:	2301      	movs	r3, #1
     b88:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b8a:	0e12      	lsrs	r2, r2, #24
     b8c:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b8e:	0e00      	lsrs	r0, r0, #24
     b90:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b92:	001a      	movs	r2, r3
     b94:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b96:	0030      	movs	r0, r6
     b98:	4e11      	ldr	r6, [pc, #68]	; (be0 <byteOut+0x64>)
     b9a:	01c9      	lsls	r1, r1, #7
     b9c:	b087      	sub	sp, #28
     b9e:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ba0:	4e10      	ldr	r6, [pc, #64]	; (be4 <byteOut+0x68>)
     ba2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ba4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ba6:	19ae      	adds	r6, r5, r6
     ba8:	7824      	ldrb	r4, [r4, #0]
     baa:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bac:	4e0c      	ldr	r6, [pc, #48]	; (be0 <byteOut+0x64>)
     bae:	46b4      	mov	ip, r6
     bb0:	44ac      	add	ip, r5
     bb2:	4666      	mov	r6, ip
     bb4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     bb6:	b266      	sxtb	r6, r4
     bb8:	2e00      	cmp	r6, #0
     bba:	da05      	bge.n	bc8 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bbc:	4e09      	ldr	r6, [pc, #36]	; (be4 <byteOut+0x68>)
     bbe:	46b4      	mov	ip, r6
     bc0:	448c      	add	ip, r1
     bc2:	4666      	mov	r6, ip
     bc4:	6032      	str	r2, [r6, #0]
     bc6:	e000      	b.n	bca <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc8:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bca:	9e01      	ldr	r6, [sp, #4]
     bcc:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     bce:	0064      	lsls	r4, r4, #1
     bd0:	b2db      	uxtb	r3, r3
     bd2:	6030      	str	r0, [r6, #0]
     bd4:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     bd6:	2b00      	cmp	r3, #0
     bd8:	d1e8      	bne.n	bac <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     bda:	b007      	add	sp, #28
     bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	41004414 	.word	0x41004414
     be4:	41004418 	.word	0x41004418

00000be8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bea:	2501      	movs	r5, #1
     bec:	b085      	sub	sp, #20
     bee:	9103      	str	r1, [sp, #12]
     bf0:	0011      	movs	r1, r2
     bf2:	0c06      	lsrs	r6, r0, #16
     bf4:	9301      	str	r3, [sp, #4]
     bf6:	b2f3      	uxtb	r3, r6
     bf8:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bfa:	0e09      	lsrs	r1, r1, #24
     bfc:	0c14      	lsrs	r4, r2, #16
     bfe:	9002      	str	r0, [sp, #8]
     c00:	9200      	str	r2, [sp, #0]
     c02:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c04:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c06:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     c08:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c0c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0e:	4c0a      	ldr	r4, [pc, #40]	; (c38 <byteIn+0x50>)
     c10:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c12:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c14:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c16:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c18:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c1a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	402c      	ands	r4, r5
     c20:	1e67      	subs	r7, r4, #1
     c22:	41bc      	sbcs	r4, r7
     c24:	3901      	subs	r1, #1
     c26:	4304      	orrs	r4, r0
     c28:	b2c9      	uxtb	r1, r1
     c2a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c2c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     c2e:	2900      	cmp	r1, #0
     c30:	d1f2      	bne.n	c18 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     c32:	b005      	add	sp, #20
     c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	41004400 	.word	0x41004400

00000c3c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c3e:	2380      	movs	r3, #128	; 0x80
     c40:	2780      	movs	r7, #128	; 0x80
     c42:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c44:	2500      	movs	r5, #0
     c46:	4c0a      	ldr	r4, [pc, #40]	; (c70 <beep+0x34>)
     c48:	035b      	lsls	r3, r3, #13
     c4a:	61e3      	str	r3, [r4, #28]
     c4c:	03bf      	lsls	r7, r7, #14
     c4e:	42b5      	cmp	r5, r6
     c50:	d006      	beq.n	c60 <beep+0x24>
     c52:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     c54:	207a      	movs	r0, #122	; 0x7a
     c56:	4b07      	ldr	r3, [pc, #28]	; (c74 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c58:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     c5a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c5c:	b2ad      	uxth	r5, r5
     c5e:	e7f6      	b.n	c4e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c60:	2380      	movs	r3, #128	; 0x80
     c62:	039b      	lsls	r3, r3, #14
     c64:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c66:	2380      	movs	r3, #128	; 0x80
     c68:	035b      	lsls	r3, r3, #13
     c6a:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	41004400 	.word	0x41004400
     c74:	00000ded 	.word	0x00000ded

00000c78 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c78:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c7a:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     c7c:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c7e:	4916      	ldr	r1, [pc, #88]	; (cd8 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c80:	4a16      	ldr	r2, [pc, #88]	; (cdc <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c82:	00db      	lsls	r3, r3, #3
     c84:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c86:	6853      	ldr	r3, [r2, #4]
     c88:	4303      	orrs	r3, r0
     c8a:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c8c:	4b14      	ldr	r3, [pc, #80]	; (ce0 <GclkInit+0x68>)
     c8e:	681a      	ldr	r2, [r3, #0]
     c90:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     c92:	2a3f      	cmp	r2, #63	; 0x3f
     c94:	d100      	bne.n	c98 <GclkInit+0x20>
        coarse = 0x1f;
     c96:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c98:	4b12      	ldr	r3, [pc, #72]	; (ce4 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c9a:	4813      	ldr	r0, [pc, #76]	; (ce8 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c9c:	681b      	ldr	r3, [r3, #0]
     c9e:	059b      	lsls	r3, r3, #22
     ca0:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ca2:	4283      	cmp	r3, r0
     ca4:	d100      	bne.n	ca8 <GclkInit+0x30>
        fine = 0x1ff;
     ca6:	4b11      	ldr	r3, [pc, #68]	; (cec <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     ca8:	4811      	ldr	r0, [pc, #68]	; (cf0 <GclkInit+0x78>)
     caa:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cac:	2010      	movs	r0, #16
     cae:	68cc      	ldr	r4, [r1, #12]
     cb0:	4204      	tst	r4, r0
     cb2:	d0fc      	beq.n	cae <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     cb4:	0292      	lsls	r2, r2, #10
     cb6:	4313      	orrs	r3, r2
     cb8:	4a07      	ldr	r2, [pc, #28]	; (cd8 <GclkInit+0x60>)
     cba:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cbc:	2310      	movs	r3, #16
     cbe:	68ca      	ldr	r2, [r1, #12]
     cc0:	421a      	tst	r2, r3
     cc2:	d0fc      	beq.n	cbe <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     cc4:	4a0b      	ldr	r2, [pc, #44]	; (cf4 <GclkInit+0x7c>)
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <GclkInit+0x60>)
     cc8:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     cca:	2280      	movs	r2, #128	; 0x80
     ccc:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <GclkInit+0x80>)
     cce:	0052      	lsls	r2, r2, #1
     cd0:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     cd2:	4a0a      	ldr	r2, [pc, #40]	; (cfc <GclkInit+0x84>)
     cd4:	605a      	str	r2, [r3, #4]
}
     cd6:	bd10      	pop	{r4, pc}
     cd8:	40000800 	.word	0x40000800
     cdc:	41004000 	.word	0x41004000
     ce0:	00806024 	.word	0x00806024
     ce4:	00806028 	.word	0x00806028
     ce8:	000003ff 	.word	0x000003ff
     cec:	000001ff 	.word	0x000001ff
     cf0:	00000522 	.word	0x00000522
     cf4:	000005a2 	.word	0x000005a2
     cf8:	40000c00 	.word	0x40000c00
     cfc:	00010700 	.word	0x00010700

00000d00 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     d00:	4a1d      	ldr	r2, [pc, #116]	; (d78 <RtcInit+0x78>)
     d02:	4b1e      	ldr	r3, [pc, #120]	; (d7c <RtcInit+0x7c>)
     d04:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     d06:	2202      	movs	r2, #2
     d08:	68d9      	ldr	r1, [r3, #12]
     d0a:	4211      	tst	r1, r2
     d0c:	d0fc      	beq.n	d08 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     d0e:	2281      	movs	r2, #129	; 0x81
     d10:	4b1b      	ldr	r3, [pc, #108]	; (d80 <RtcInit+0x80>)
     d12:	0052      	lsls	r2, r2, #1
     d14:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     d16:	4a1b      	ldr	r2, [pc, #108]	; (d84 <RtcInit+0x84>)
     d18:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     d1a:	785a      	ldrb	r2, [r3, #1]
     d1c:	b252      	sxtb	r2, r2
     d1e:	2a00      	cmp	r2, #0
     d20:	dbfb      	blt.n	d1a <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     d22:	4a19      	ldr	r2, [pc, #100]	; (d88 <RtcInit+0x88>)
     d24:	4b16      	ldr	r3, [pc, #88]	; (d80 <RtcInit+0x80>)
     d26:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     d28:	2204      	movs	r2, #4
     d2a:	4b18      	ldr	r3, [pc, #96]	; (d8c <RtcInit+0x8c>)
     d2c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d2e:	7a9a      	ldrb	r2, [r3, #10]
     d30:	4916      	ldr	r1, [pc, #88]	; (d8c <RtcInit+0x8c>)
     d32:	09d2      	lsrs	r2, r2, #7
     d34:	d1fb      	bne.n	d2e <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     d36:	20a0      	movs	r0, #160	; 0xa0
     d38:	880a      	ldrh	r2, [r1, #0]
     d3a:	00c0      	lsls	r0, r0, #3
     d3c:	4302      	orrs	r2, r0
     d3e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d40:	7a9a      	ldrb	r2, [r3, #10]
     d42:	09d2      	lsrs	r2, r2, #7
     d44:	d1fc      	bne.n	d40 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     d46:	4912      	ldr	r1, [pc, #72]	; (d90 <RtcInit+0x90>)
     d48:	4a10      	ldr	r2, [pc, #64]	; (d8c <RtcInit+0x8c>)
     d4a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d4c:	7a99      	ldrb	r1, [r3, #10]
     d4e:	4a0f      	ldr	r2, [pc, #60]	; (d8c <RtcInit+0x8c>)
     d50:	09c9      	lsrs	r1, r1, #7
     d52:	d1fb      	bne.n	d4c <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d54:	8851      	ldrh	r1, [r2, #2]
     d56:	480f      	ldr	r0, [pc, #60]	; (d94 <RtcInit+0x94>)
     d58:	4301      	orrs	r1, r0
     d5a:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d5c:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d5e:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d60:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d62:	8811      	ldrh	r1, [r2, #0]
     d64:	4301      	orrs	r1, r0
     d66:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d68:	7a9a      	ldrb	r2, [r3, #10]
     d6a:	09d2      	lsrs	r2, r2, #7
     d6c:	d1fc      	bne.n	d68 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d6e:	4b0a      	ldr	r3, [pc, #40]	; (d98 <RtcInit+0x98>)
     d70:	3208      	adds	r2, #8
     d72:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d74:	4770      	bx	lr
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	0000060e 	.word	0x0000060e
     d7c:	40000800 	.word	0x40000800
     d80:	40000c00 	.word	0x40000c00
     d84:	00230002 	.word	0x00230002
     d88:	00004204 	.word	0x00004204
     d8c:	40001400 	.word	0x40001400
     d90:	000003e6 	.word	0x000003e6
     d94:	00004010 	.word	0x00004010
     d98:	e000e100 	.word	0xe000e100

00000d9c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d9c:	230f      	movs	r3, #15
     d9e:	4018      	ands	r0, r3
     da0:	4b08      	ldr	r3, [pc, #32]	; (dc4 <gclkEnable+0x28>)
     da2:	0212      	lsls	r2, r2, #8
     da4:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     da6:	23f8      	movs	r3, #248	; 0xf8
     da8:	0209      	lsls	r1, r1, #8
     daa:	015b      	lsls	r3, r3, #5
     dac:	4019      	ands	r1, r3
     dae:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     db0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     db2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     db4:	4c04      	ldr	r4, [pc, #16]	; (dc8 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     db6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     db8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dba:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     dbc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     dbe:	6060      	str	r0, [r4, #4]
}
     dc0:	bd10      	pop	{r4, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00ffff00 	.word	0x00ffff00
     dc8:	40000c00 	.word	0x40000c00

00000dcc <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     dcc:	4b04      	ldr	r3, [pc, #16]	; (de0 <delayInit+0x14>)
     dce:	4a05      	ldr	r2, [pc, #20]	; (de4 <delayInit+0x18>)
     dd0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     dd2:	2230      	movs	r2, #48	; 0x30
     dd4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delayInit+0x1c>)
     dd8:	3a2b      	subs	r2, #43	; 0x2b
     dda:	601a      	str	r2, [r3, #0]
}
     ddc:	4770      	bx	lr
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	20000004 	.word	0x20000004
     de4:	0000bb80 	.word	0x0000bb80
     de8:	e000e010 	.word	0xe000e010

00000dec <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     dec:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dee:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     df0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     df2:	4b08      	ldr	r3, [pc, #32]	; (e14 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     df4:	4a08      	ldr	r2, [pc, #32]	; (e18 <delay_us+0x2c>)
     df6:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     df8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     dfa:	3801      	subs	r0, #1
     dfc:	d308      	bcc.n	e10 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     dfe:	2b00      	cmp	r3, #0
     e00:	d0fb      	beq.n	dfa <delay_us+0xe>
     e02:	4e05      	ldr	r6, [pc, #20]	; (e18 <delay_us+0x2c>)
        SysTick->LOAD = n;
     e04:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     e06:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e08:	6835      	ldr	r5, [r6, #0]
     e0a:	4225      	tst	r5, r4
     e0c:	d0fc      	beq.n	e08 <delay_us+0x1c>
     e0e:	e7f4      	b.n	dfa <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     e10:	bd70      	pop	{r4, r5, r6, pc}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	20000004 	.word	0x20000004
     e18:	e000e010 	.word	0xe000e010

00000e1c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     e20:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     e22:	4b08      	ldr	r3, [pc, #32]	; (e44 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     e24:	4a08      	ldr	r2, [pc, #32]	; (e48 <delay_ms+0x2c>)
     e26:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e28:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     e2a:	3801      	subs	r0, #1
     e2c:	d308      	bcc.n	e40 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     e2e:	2b00      	cmp	r3, #0
     e30:	d0fb      	beq.n	e2a <delay_ms+0xe>
     e32:	4e05      	ldr	r6, [pc, #20]	; (e48 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     e34:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     e36:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e38:	6835      	ldr	r5, [r6, #0]
     e3a:	4225      	tst	r5, r4
     e3c:	d0fc      	beq.n	e38 <delay_ms+0x1c>
     e3e:	e7f4      	b.n	e2a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	20000004 	.word	0x20000004
     e48:	e000e010 	.word	0xe000e010

00000e4c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e4c:	21fa      	movs	r1, #250	; 0xfa
     e4e:	4a04      	ldr	r2, [pc, #16]	; (e60 <RTC_Handler+0x14>)
     e50:	0089      	lsls	r1, r1, #2
     e52:	6813      	ldr	r3, [r2, #0]
     e54:	185b      	adds	r3, r3, r1
     e56:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e58:	22ff      	movs	r2, #255	; 0xff
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <RTC_Handler+0x18>)
     e5c:	721a      	strb	r2, [r3, #8]
}
     e5e:	4770      	bx	lr
     e60:	2000045c 	.word	0x2000045c
     e64:	40001400 	.word	0x40001400

00000e68 <millis>:

uint32_t millis(void) {
     e68:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e6a:	f3ef 8110 	mrs	r1, PRIMASK
     e6e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e70:	4a08      	ldr	r2, [pc, #32]	; (e94 <millis+0x2c>)
     e72:	4d09      	ldr	r5, [pc, #36]	; (e98 <millis+0x30>)
     e74:	8a10      	ldrh	r0, [r2, #16]
     e76:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e78:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e7a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e7c:	09e4      	lsrs	r4, r4, #7
     e7e:	d004      	beq.n	e8a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e80:	8a13      	ldrh	r3, [r2, #16]
     e82:	22fa      	movs	r2, #250	; 0xfa
     e84:	6828      	ldr	r0, [r5, #0]
     e86:	0092      	lsls	r2, r2, #2
     e88:	1880      	adds	r0, r0, r2
     e8a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     e8c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e90:	bd30      	pop	{r4, r5, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	40001400 	.word	0x40001400
     e98:	2000045c 	.word	0x2000045c

00000e9c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e9c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e9e:	4a0d      	ldr	r2, [pc, #52]	; (ed4 <TC4Init+0x38>)
     ea0:	4b0d      	ldr	r3, [pc, #52]	; (ed8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ea2:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     ea4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ea6:	4a0d      	ldr	r2, [pc, #52]	; (edc <TC4Init+0x40>)
     ea8:	6a13      	ldr	r3, [r2, #32]
     eaa:	430b      	orrs	r3, r1
     eac:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     eae:	4b0c      	ldr	r3, [pc, #48]	; (ee0 <TC4Init+0x44>)
     eb0:	4a0c      	ldr	r2, [pc, #48]	; (ee4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     eb2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     eb4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     eb6:	2241      	movs	r2, #65	; 0x41
     eb8:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     eba:	3a40      	subs	r2, #64	; 0x40
     ebc:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ebe:	32ff      	adds	r2, #255	; 0xff
     ec0:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ec2:	881a      	ldrh	r2, [r3, #0]
     ec4:	430a      	orrs	r2, r1
     ec6:	801a      	strh	r2, [r3, #0]
     ec8:	2280      	movs	r2, #128	; 0x80
     eca:	4b07      	ldr	r3, [pc, #28]	; (ee8 <TC4Init+0x4c>)
     ecc:	0312      	lsls	r2, r2, #12
     ece:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     ed0:	4770      	bx	lr
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	0000421c 	.word	0x0000421c
     ed8:	40000c00 	.word	0x40000c00
     edc:	40000400 	.word	0x40000400
     ee0:	42003000 	.word	0x42003000
     ee4:	00000904 	.word	0x00000904
     ee8:	e000e100 	.word	0xe000e100

00000eec <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     eec:	22ff      	movs	r2, #255	; 0xff
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <TC4_Handler+0x10>)
     ef0:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     ef2:	4b03      	ldr	r3, [pc, #12]	; (f00 <TC4_Handler+0x14>)
     ef4:	3afe      	subs	r2, #254	; 0xfe
     ef6:	701a      	strb	r2, [r3, #0]
}
     ef8:	4770      	bx	lr
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	42003000 	.word	0x42003000
     f00:	20000463 	.word	0x20000463

00000f04 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f04:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f06:	4a0d      	ldr	r2, [pc, #52]	; (f3c <TC5Init+0x38>)
     f08:	4b0d      	ldr	r3, [pc, #52]	; (f40 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f0a:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f0c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f0e:	4a0d      	ldr	r2, [pc, #52]	; (f44 <TC5Init+0x40>)
     f10:	6a13      	ldr	r3, [r2, #32]
     f12:	430b      	orrs	r3, r1
     f14:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f16:	4b0c      	ldr	r3, [pc, #48]	; (f48 <TC5Init+0x44>)
     f18:	4a0c      	ldr	r2, [pc, #48]	; (f4c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f1a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f1c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
     f1e:	2220      	movs	r2, #32
     f20:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f22:	3a1f      	subs	r2, #31
     f24:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f26:	32ff      	adds	r2, #255	; 0xff
     f28:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f2a:	881a      	ldrh	r2, [r3, #0]
     f2c:	430a      	orrs	r2, r1
     f2e:	801a      	strh	r2, [r3, #0]
     f30:	2280      	movs	r2, #128	; 0x80
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <TC5Init+0x4c>)
     f34:	0352      	lsls	r2, r2, #13
     f36:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     f38:	4770      	bx	lr
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	0000421c 	.word	0x0000421c
     f40:	40000c00 	.word	0x40000c00
     f44:	40000400 	.word	0x40000400
     f48:	42003400 	.word	0x42003400
     f4c:	00000d04 	.word	0x00000d04
     f50:	e000e100 	.word	0xe000e100

00000f54 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f54:	22ff      	movs	r2, #255	; 0xff
     f56:	4b03      	ldr	r3, [pc, #12]	; (f64 <TC5_Handler+0x10>)
     f58:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     f5a:	4b03      	ldr	r3, [pc, #12]	; (f68 <TC5_Handler+0x14>)
     f5c:	3afe      	subs	r2, #254	; 0xfe
     f5e:	701a      	strb	r2, [r3, #0]
     f60:	4770      	bx	lr
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	42003400 	.word	0x42003400
     f68:	20000461 	.word	0x20000461

00000f6c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f6e:	27c0      	movs	r7, #192	; 0xc0
     f70:	4d10      	ldr	r5, [pc, #64]	; (fb4 <dmaInit+0x48>)
     f72:	003a      	movs	r2, r7
     f74:	4e10      	ldr	r6, [pc, #64]	; (fb8 <dmaInit+0x4c>)
     f76:	0028      	movs	r0, r5
     f78:	2100      	movs	r1, #0
     f7a:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f7c:	4c0f      	ldr	r4, [pc, #60]	; (fbc <dmaInit+0x50>)
     f7e:	003a      	movs	r2, r7
     f80:	2100      	movs	r1, #0
     f82:	0020      	movs	r0, r4
     f84:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f86:	2120      	movs	r1, #32
     f88:	4b0d      	ldr	r3, [pc, #52]	; (fc0 <dmaInit+0x54>)
     f8a:	695a      	ldr	r2, [r3, #20]
     f8c:	430a      	orrs	r2, r1
     f8e:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f90:	69da      	ldr	r2, [r3, #28]
     f92:	3910      	subs	r1, #16
     f94:	430a      	orrs	r2, r1
     f96:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     f98:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <dmaInit+0x58>)
     f9a:	390e      	subs	r1, #14
     f9c:	881a      	ldrh	r2, [r3, #0]
     f9e:	438a      	bics	r2, r1
     fa0:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     fa2:	881a      	ldrh	r2, [r3, #0]
     fa4:	3901      	subs	r1, #1
     fa6:	430a      	orrs	r2, r1
     fa8:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     faa:	4a07      	ldr	r2, [pc, #28]	; (fc8 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     fac:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     fae:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     fb0:	801a      	strh	r2, [r3, #0]
}
     fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fb4:	20000530 	.word	0x20000530
     fb8:	0000305d 	.word	0x0000305d
     fbc:	20000470 	.word	0x20000470
     fc0:	40000400 	.word	0x40000400
     fc4:	41004800 	.word	0x41004800
     fc8:	00000f02 	.word	0x00000f02

00000fcc <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     fcc:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
     fce:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     fd0:	b085      	sub	sp, #20
     fd2:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
     fd4:	2b00      	cmp	r3, #0
     fd6:	d178      	bne.n	10ca <flight+0xfe>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     fd8:	4d3d      	ldr	r5, [pc, #244]	; (10d0 <flight+0x104>)
     fda:	6c40      	ldr	r0, [r0, #68]	; 0x44
     fdc:	47a8      	blx	r5
     fde:	2200      	movs	r2, #0
     fe0:	4b3c      	ldr	r3, [pc, #240]	; (10d4 <flight+0x108>)
     fe2:	4e3d      	ldr	r6, [pc, #244]	; (10d8 <flight+0x10c>)
     fe4:	47b0      	blx	r6
     fe6:	0006      	movs	r6, r0
     fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
     fea:	000f      	movs	r7, r1
     fec:	47a8      	blx	r5
     fee:	4d3a      	ldr	r5, [pc, #232]	; (10d8 <flight+0x10c>)
     ff0:	2200      	movs	r2, #0
     ff2:	4b38      	ldr	r3, [pc, #224]	; (10d4 <flight+0x108>)
     ff4:	47a8      	blx	r5
     ff6:	4d39      	ldr	r5, [pc, #228]	; (10dc <flight+0x110>)
     ff8:	0002      	movs	r2, r0
     ffa:	000b      	movs	r3, r1
     ffc:	0030      	movs	r0, r6
     ffe:	0039      	movs	r1, r7
    1000:	47a8      	blx	r5
    1002:	4b37      	ldr	r3, [pc, #220]	; (10e0 <flight+0x114>)
    1004:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1006:	0023      	movs	r3, r4
    1008:	3348      	adds	r3, #72	; 0x48
    100a:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    100c:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    100e:	8818      	ldrh	r0, [r3, #0]
    1010:	4d34      	ldr	r5, [pc, #208]	; (10e4 <flight+0x118>)
    1012:	47a8      	blx	r5
    1014:	2200      	movs	r2, #0
    1016:	4e30      	ldr	r6, [pc, #192]	; (10d8 <flight+0x10c>)
    1018:	4b2e      	ldr	r3, [pc, #184]	; (10d4 <flight+0x108>)
    101a:	47b0      	blx	r6
    101c:	0023      	movs	r3, r4
    101e:	3370      	adds	r3, #112	; 0x70
    1020:	0006      	movs	r6, r0
    1022:	8818      	ldrh	r0, [r3, #0]
    1024:	000f      	movs	r7, r1
    1026:	47a8      	blx	r5
    1028:	4d2b      	ldr	r5, [pc, #172]	; (10d8 <flight+0x10c>)
    102a:	2200      	movs	r2, #0
    102c:	4b29      	ldr	r3, [pc, #164]	; (10d4 <flight+0x108>)
    102e:	47a8      	blx	r5
    1030:	4d2a      	ldr	r5, [pc, #168]	; (10dc <flight+0x110>)
    1032:	0002      	movs	r2, r0
    1034:	000b      	movs	r3, r1
    1036:	0030      	movs	r0, r6
    1038:	0039      	movs	r1, r7
    103a:	47a8      	blx	r5
    103c:	4b2a      	ldr	r3, [pc, #168]	; (10e8 <flight+0x11c>)
    103e:	4798      	blx	r3
    1040:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    1042:	4d2a      	ldr	r5, [pc, #168]	; (10ec <flight+0x120>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1044:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    1046:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1048:	47a8      	blx	r5
    104a:	4e23      	ldr	r6, [pc, #140]	; (10d8 <flight+0x10c>)
    104c:	2200      	movs	r2, #0
    104e:	4b21      	ldr	r3, [pc, #132]	; (10d4 <flight+0x108>)
    1050:	47b0      	blx	r6
    1052:	9002      	str	r0, [sp, #8]
    1054:	9103      	str	r1, [sp, #12]
    1056:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1058:	47a8      	blx	r5
    105a:	2200      	movs	r2, #0
    105c:	4b1d      	ldr	r3, [pc, #116]	; (10d4 <flight+0x108>)
    105e:	47b0      	blx	r6
    1060:	4e1e      	ldr	r6, [pc, #120]	; (10dc <flight+0x110>)
    1062:	0002      	movs	r2, r0
    1064:	000b      	movs	r3, r1
    1066:	9802      	ldr	r0, [sp, #8]
    1068:	9903      	ldr	r1, [sp, #12]
    106a:	47b0      	blx	r6
    106c:	4b1e      	ldr	r3, [pc, #120]	; (10e8 <flight+0x11c>)
    106e:	4798      	blx	r3
    1070:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1072:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1074:	47a8      	blx	r5
    1076:	2200      	movs	r2, #0
    1078:	4b16      	ldr	r3, [pc, #88]	; (10d4 <flight+0x108>)
    107a:	4e17      	ldr	r6, [pc, #92]	; (10d8 <flight+0x10c>)
    107c:	47b0      	blx	r6
    107e:	0006      	movs	r6, r0
    1080:	69a0      	ldr	r0, [r4, #24]
    1082:	000f      	movs	r7, r1
    1084:	47a8      	blx	r5
    1086:	4d14      	ldr	r5, [pc, #80]	; (10d8 <flight+0x10c>)
    1088:	2200      	movs	r2, #0
    108a:	4b12      	ldr	r3, [pc, #72]	; (10d4 <flight+0x108>)
    108c:	47a8      	blx	r5
    108e:	4d13      	ldr	r5, [pc, #76]	; (10dc <flight+0x110>)
    1090:	0002      	movs	r2, r0
    1092:	000b      	movs	r3, r1
    1094:	0030      	movs	r0, r6
    1096:	0039      	movs	r1, r7
    1098:	47a8      	blx	r5
    109a:	4b13      	ldr	r3, [pc, #76]	; (10e8 <flight+0x11c>)
    109c:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    109e:	4d14      	ldr	r5, [pc, #80]	; (10f0 <flight+0x124>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    10a0:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10a2:	47a8      	blx	r5
    10a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    10a6:	1ac0      	subs	r0, r0, r3
    10a8:	23fa      	movs	r3, #250	; 0xfa
    10aa:	00db      	lsls	r3, r3, #3
    10ac:	4298      	cmp	r0, r3
    10ae:	d90c      	bls.n	10ca <flight+0xfe>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    10b2:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10b4:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    10b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    10b8:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    10ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    10bc:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    10be:	0023      	movs	r3, r4
    10c0:	8812      	ldrh	r2, [r2, #0]
    10c2:	334a      	adds	r3, #74	; 0x4a
    10c4:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    10c6:	47a8      	blx	r5
    10c8:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


    10ca:	b005      	add	sp, #20
    10cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	00002e19 	.word	0x00002e19
    10d4:	3fe00000 	.word	0x3fe00000
    10d8:	0000211d 	.word	0x0000211d
    10dc:	000018a9 	.word	0x000018a9
    10e0:	00002ec1 	.word	0x00002ec1
    10e4:	00002d25 	.word	0x00002d25
    10e8:	0000186d 	.word	0x0000186d
    10ec:	00002da9 	.word	0x00002da9
    10f0:	00000e69 	.word	0x00000e69

000010f4 <logFlight>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void logFlight(Altimeter *my_altimeter) {
    10f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f6:	b085      	sub	sp, #20

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    10f8:	466a      	mov	r2, sp
    10fa:	2346      	movs	r3, #70	; 0x46
    dataToSend[1] = my_altimeter->flightNumb;
	
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    10fc:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    10fe:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1100:	7843      	ldrb	r3, [r0, #1]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1102:	2490      	movs	r4, #144	; 0x90

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1104:	7053      	strb	r3, [r2, #1]
	
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1106:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1108:	34ff      	adds	r4, #255	; 0xff
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
	
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    110a:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    110c:	0a1a      	lsrs	r2, r3, #8
    110e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1110:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1112:	0e1b      	lsrs	r3, r3, #24
    1114:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1116:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
	
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1118:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    111a:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    111c:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    111e:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1120:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1122:	0e1b      	lsrs	r3, r3, #24
    1124:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1126:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1128:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    112a:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    112c:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    112e:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1130:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1132:	0e1b      	lsrs	r3, r3, #24
    1134:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1136:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1138:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    113a:	334a      	adds	r3, #74	; 0x4a
    113c:	881b      	ldrh	r3, [r3, #0]
    113e:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    1140:	0a1b      	lsrs	r3, r3, #8
    1142:	73cb      	strb	r3, [r1, #15]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1144:	5d02      	ldrb	r2, [r0, r4]
    1146:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    1148:	2aef      	cmp	r2, #239	; 0xef
    114a:	dd2c      	ble.n	11a6 <logFlight+0xb2>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    114c:	18d1      	adds	r1, r2, r3
    114e:	29fe      	cmp	r1, #254	; 0xfe
    1150:	dc08      	bgt.n	1164 <logFlight+0x70>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1152:	466d      	mov	r5, sp
    1154:	1841      	adds	r1, r0, r1
    1156:	5ced      	ldrb	r5, [r5, r3]
    1158:	3191      	adds	r1, #145	; 0x91
    115a:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    115c:	3301      	adds	r3, #1
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    115e:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    1160:	b2db      	uxtb	r3, r3
    1162:	e7f3      	b.n	114c <logFlight+0x58>
    1164:	0001      	movs	r1, r0
    1166:	4a16      	ldr	r2, [pc, #88]	; (11c0 <logFlight+0xcc>)
    1168:	3191      	adds	r1, #145	; 0x91
    116a:	31ff      	adds	r1, #255	; 0xff
    116c:	1885      	adds	r5, r0, r2

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    116e:	000a      	movs	r2, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1170:	7817      	ldrb	r7, [r2, #0]
    1172:	46bc      	mov	ip, r7
    1174:	4666      	mov	r6, ip
    1176:	1e57      	subs	r7, r2, #1
    1178:	3fff      	subs	r7, #255	; 0xff
    117a:	703e      	strb	r6, [r7, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    117c:	2600      	movs	r6, #0
    117e:	7016      	strb	r6, [r2, #0]
    1180:	3201      	adds	r2, #1
    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        for(u8_t i = 0; i < 0xFF; ++i) {
    1182:	4295      	cmp	r5, r2
    1184:	d1f4      	bne.n	1170 <logFlight+0x7c>
    1186:	001a      	movs	r2, r3
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1188:	2a10      	cmp	r2, #16
    118a:	d808      	bhi.n	119e <logFlight+0xaa>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    118c:	466d      	mov	r5, sp
    118e:	5cad      	ldrb	r5, [r5, r2]
            bytesWritten++;
    1190:	3201      	adds	r2, #1
    1192:	b2d2      	uxtb	r2, r2
        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    1194:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
    1196:	1ad5      	subs	r5, r2, r3
    1198:	5505      	strb	r5, [r0, r4]
    119a:	3101      	adds	r1, #1
    119c:	e7f4      	b.n	1188 <logFlight+0x94>
        }
        my_altimeter->myFlashMemory.pageReady = true;
    119e:	2201      	movs	r2, #1
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <logFlight+0xcc>)
    11a2:	54c2      	strb	r2, [r0, r3]
    11a4:	e00a      	b.n	11bc <logFlight+0xc8>

    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11a6:	466d      	mov	r5, sp
    11a8:	1899      	adds	r1, r3, r2
    11aa:	5ced      	ldrb	r5, [r5, r3]
    11ac:	3191      	adds	r1, #145	; 0x91
    11ae:	31ff      	adds	r1, #255	; 0xff
    11b0:	3301      	adds	r3, #1
    11b2:	5445      	strb	r5, [r0, r1]
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
        }
        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    11b4:	2b11      	cmp	r3, #17
    11b6:	d1f6      	bne.n	11a6 <logFlight+0xb2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    11b8:	3211      	adds	r2, #17
    11ba:	5502      	strb	r2, [r0, r4]
    }
}
    11bc:	b005      	add	sp, #20
    11be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c0:	0000028f 	.word	0x0000028f

000011c4 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c6:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    11c8:	466a      	mov	r2, sp
    11ca:	2341      	movs	r3, #65	; 0x41
    11cc:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11ce:	23a7      	movs	r3, #167	; 0xa7
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11d0:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11d2:	009b      	lsls	r3, r3, #2
    11d4:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11d6:	2490      	movs	r4, #144	; 0x90

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11d8:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11da:	0a1a      	lsrs	r2, r3, #8
    11dc:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    11de:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    11e0:	0e1b      	lsrs	r3, r3, #24
    11e2:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    11e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    11e6:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    11e8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    11ea:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    11ec:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    11ee:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    11f0:	0e1b      	lsrs	r3, r3, #24
    11f2:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11f4:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    11f6:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11f8:	3368      	adds	r3, #104	; 0x68
    11fa:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11fc:	34ff      	adds	r4, #255	; 0xff
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11fe:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1200:	0a1b      	lsrs	r3, r3, #8
    1202:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1204:	0003      	movs	r3, r0
    1206:	336c      	adds	r3, #108	; 0x6c
    1208:	881b      	ldrh	r3, [r3, #0]
    120a:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    120c:	0a1b      	lsrs	r3, r3, #8
    120e:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1210:	0003      	movs	r3, r0
    1212:	3370      	adds	r3, #112	; 0x70
    1214:	881b      	ldrh	r3, [r3, #0]
    1216:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1218:	0a1b      	lsrs	r3, r3, #8
    121a:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    121c:	0003      	movs	r3, r0
    121e:	3374      	adds	r3, #116	; 0x74
    1220:	881b      	ldrh	r3, [r3, #0]
    1222:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1224:	0a1b      	lsrs	r3, r3, #8
    1226:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1228:	0003      	movs	r3, r0
    122a:	3378      	adds	r3, #120	; 0x78
    122c:	881b      	ldrh	r3, [r3, #0]
    122e:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1230:	0a1b      	lsrs	r3, r3, #8
    1232:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1234:	0003      	movs	r3, r0
    1236:	337c      	adds	r3, #124	; 0x7c
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    123c:	0a1b      	lsrs	r3, r3, #8
    123e:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1240:	0003      	movs	r3, r0
    1242:	3380      	adds	r3, #128	; 0x80
    1244:	881b      	ldrh	r3, [r3, #0]
    1246:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    1248:	0a1b      	lsrs	r3, r3, #8
    124a:	758b      	strb	r3, [r1, #22]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    124c:	5d02      	ldrb	r2, [r0, r4]
    124e:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    1250:	2ae8      	cmp	r2, #232	; 0xe8
    1252:	dd2c      	ble.n	12ae <logSensors+0xea>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1254:	18d1      	adds	r1, r2, r3
    1256:	29fe      	cmp	r1, #254	; 0xfe
    1258:	dc08      	bgt.n	126c <logSensors+0xa8>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    125a:	466d      	mov	r5, sp
    125c:	1841      	adds	r1, r0, r1
    125e:	5ced      	ldrb	r5, [r5, r3]
    1260:	3191      	adds	r1, #145	; 0x91
    1262:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    1264:	3301      	adds	r3, #1
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1266:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    1268:	b2db      	uxtb	r3, r3
    126a:	e7f3      	b.n	1254 <logSensors+0x90>
    126c:	0001      	movs	r1, r0
    126e:	4a16      	ldr	r2, [pc, #88]	; (12c8 <logSensors+0x104>)
    1270:	3191      	adds	r1, #145	; 0x91
    1272:	31ff      	adds	r1, #255	; 0xff
    1274:	1885      	adds	r5, r0, r2

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1276:	000a      	movs	r2, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1278:	7817      	ldrb	r7, [r2, #0]
    127a:	46bc      	mov	ip, r7
    127c:	4666      	mov	r6, ip
    127e:	1e57      	subs	r7, r2, #1
    1280:	3fff      	subs	r7, #255	; 0xff
    1282:	703e      	strb	r6, [r7, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1284:	2600      	movs	r6, #0
    1286:	7016      	strb	r6, [r2, #0]
    1288:	3201      	adds	r2, #1
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
    128a:	4295      	cmp	r5, r2
    128c:	d1f4      	bne.n	1278 <logSensors+0xb4>
    128e:	001a      	movs	r2, r3
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1290:	2a17      	cmp	r2, #23
    1292:	d808      	bhi.n	12a6 <logSensors+0xe2>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    1294:	466d      	mov	r5, sp
    1296:	5cad      	ldrb	r5, [r5, r2]
            bytesWritten++;
    1298:	3201      	adds	r2, #1
    129a:	b2d2      	uxtb	r2, r2
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[bytesWritten];
    129c:	700d      	strb	r5, [r1, #0]
            bytesWritten++;

            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
    129e:	1ad5      	subs	r5, r2, r3
    12a0:	5505      	strb	r5, [r0, r4]
    12a2:	3101      	adds	r1, #1
    12a4:	e7f4      	b.n	1290 <logSensors+0xcc>
        }
        my_altimeter->myFlashMemory.pageReady = true;
    12a6:	2201      	movs	r2, #1
    12a8:	4b07      	ldr	r3, [pc, #28]	; (12c8 <logSensors+0x104>)
    12aa:	54c2      	strb	r2, [r0, r3]
    12ac:	e00a      	b.n	12c4 <logSensors+0x100>

    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    12ae:	466d      	mov	r5, sp
    12b0:	1899      	adds	r1, r3, r2
    12b2:	5ced      	ldrb	r5, [r5, r3]
    12b4:	3191      	adds	r1, #145	; 0x91
    12b6:	31ff      	adds	r1, #255	; 0xff
    12b8:	3301      	adds	r3, #1
    12ba:	5445      	strb	r5, [r0, r1]
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1; // fix this (iterates every step)
        }
        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    12bc:	2b18      	cmp	r3, #24
    12be:	d1f6      	bne.n	12ae <logSensors+0xea>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    12c0:	3218      	adds	r2, #24
    12c2:	5502      	strb	r2, [r0, r4]
    }
}
    12c4:	b007      	add	sp, #28
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c8:	0000028f 	.word	0x0000028f

000012cc <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    12cc:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    12ce:	4bd2      	ldr	r3, [pc, #840]	; (1618 <sampleTick+0x34c>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    12d0:	b087      	sub	sp, #28
    12d2:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    12d4:	4798      	blx	r3
    12d6:	23a7      	movs	r3, #167	; 0xa7

    my_altimeter->batV = adc_read(senseBatPin);
    12d8:	4dd0      	ldr	r5, [pc, #832]	; (161c <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    12da:	009b      	lsls	r3, r3, #2
    12dc:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    12de:	786b      	ldrb	r3, [r5, #1]
    12e0:	7829      	ldrb	r1, [r5, #0]
    12e2:	78a8      	ldrb	r0, [r5, #2]
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	430b      	orrs	r3, r1
    12e8:	0400      	lsls	r0, r0, #16
    12ea:	001a      	movs	r2, r3
    12ec:	0003      	movs	r3, r0
    12ee:	78e8      	ldrb	r0, [r5, #3]
    12f0:	4313      	orrs	r3, r2
    12f2:	0600      	lsls	r0, r0, #24
    12f4:	4eca      	ldr	r6, [pc, #808]	; (1620 <sampleTick+0x354>)
    12f6:	7929      	ldrb	r1, [r5, #4]
    12f8:	4318      	orrs	r0, r3
    12fa:	47b0      	blx	r6
    12fc:	23a4      	movs	r3, #164	; 0xa4
    12fe:	009b      	lsls	r3, r3, #2
    1300:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1302:	79ab      	ldrb	r3, [r5, #6]
    1304:	7969      	ldrb	r1, [r5, #5]
    1306:	79e8      	ldrb	r0, [r5, #7]
    1308:	021b      	lsls	r3, r3, #8
    130a:	430b      	orrs	r3, r1
    130c:	0400      	lsls	r0, r0, #16
    130e:	001a      	movs	r2, r3
    1310:	0003      	movs	r3, r0
    1312:	7a28      	ldrb	r0, [r5, #8]
    1314:	4313      	orrs	r3, r2
    1316:	0600      	lsls	r0, r0, #24
    1318:	7a69      	ldrb	r1, [r5, #9]
    131a:	4318      	orrs	r0, r3
    131c:	47b0      	blx	r6
    131e:	4bc1      	ldr	r3, [pc, #772]	; (1624 <sampleTick+0x358>)
    my_altimeter->senseB = adc_read(senseBPin);
    1320:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1322:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    1324:	7aeb      	ldrb	r3, [r5, #11]
    1326:	7b28      	ldrb	r0, [r5, #12]
    1328:	021b      	lsls	r3, r3, #8
    132a:	430b      	orrs	r3, r1
    132c:	0400      	lsls	r0, r0, #16
    132e:	001a      	movs	r2, r3
    1330:	0003      	movs	r3, r0
    1332:	7b68      	ldrb	r0, [r5, #13]
    1334:	4313      	orrs	r3, r2
    1336:	0600      	lsls	r0, r0, #24
    1338:	7ba9      	ldrb	r1, [r5, #14]
    133a:	4318      	orrs	r0, r3
    133c:	47b0      	blx	r6
    133e:	23a5      	movs	r3, #165	; 0xa5
    1340:	009b      	lsls	r3, r3, #2
    1342:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    1344:	7c2b      	ldrb	r3, [r5, #16]
    1346:	7be9      	ldrb	r1, [r5, #15]
    1348:	7c68      	ldrb	r0, [r5, #17]
    134a:	021b      	lsls	r3, r3, #8
    134c:	430b      	orrs	r3, r1
    134e:	0400      	lsls	r0, r0, #16
    1350:	001a      	movs	r2, r3
    1352:	0003      	movs	r3, r0
    1354:	7ca8      	ldrb	r0, [r5, #18]
    1356:	4313      	orrs	r3, r2
    1358:	0600      	lsls	r0, r0, #24
    135a:	7ce9      	ldrb	r1, [r5, #19]
    135c:	4318      	orrs	r0, r3
    135e:	47b0      	blx	r6
    1360:	4bb1      	ldr	r3, [pc, #708]	; (1628 <sampleTick+0x35c>)
    my_altimeter->senseD = adc_read(senseDPin);
    1362:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    1364:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    1366:	7d6b      	ldrb	r3, [r5, #21]
    1368:	7da8      	ldrb	r0, [r5, #22]
    136a:	021b      	lsls	r3, r3, #8
    136c:	430b      	orrs	r3, r1
    136e:	0400      	lsls	r0, r0, #16
    1370:	001a      	movs	r2, r3
    1372:	0003      	movs	r3, r0
    1374:	7de8      	ldrb	r0, [r5, #23]
    1376:	4313      	orrs	r3, r2
    1378:	0600      	lsls	r0, r0, #24
    137a:	7e29      	ldrb	r1, [r5, #24]
    137c:	4318      	orrs	r0, r3
    137e:	47b0      	blx	r6
    1380:	23a6      	movs	r3, #166	; 0xa6
    1382:	009b      	lsls	r3, r3, #2
    1384:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    1386:	7eab      	ldrb	r3, [r5, #26]
    1388:	7e69      	ldrb	r1, [r5, #25]
    138a:	7ee8      	ldrb	r0, [r5, #27]
    138c:	021b      	lsls	r3, r3, #8
    138e:	430b      	orrs	r3, r1
    1390:	0400      	lsls	r0, r0, #16
    1392:	001a      	movs	r2, r3
    1394:	0003      	movs	r3, r0
    1396:	7f28      	ldrb	r0, [r5, #28]
    1398:	4313      	orrs	r3, r2
    139a:	0600      	lsls	r0, r0, #24
    139c:	7f69      	ldrb	r1, [r5, #29]
    139e:	4318      	orrs	r0, r3
    13a0:	47b0      	blx	r6
    13a2:	0023      	movs	r3, r4
    13a4:	3380      	adds	r3, #128	; 0x80
    13a6:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    13a8:	4ba0      	ldr	r3, [pc, #640]	; (162c <sampleTick+0x360>)
    13aa:	0026      	movs	r6, r4
    13ac:	18c0      	adds	r0, r0, r3
    13ae:	4ba0      	ldr	r3, [pc, #640]	; (1630 <sampleTick+0x364>)
    13b0:	4798      	blx	r3
    13b2:	4aa0      	ldr	r2, [pc, #640]	; (1634 <sampleTick+0x368>)
    13b4:	4fa0      	ldr	r7, [pc, #640]	; (1638 <sampleTick+0x36c>)
    13b6:	4ba1      	ldr	r3, [pc, #644]	; (163c <sampleTick+0x370>)
    13b8:	47b8      	blx	r7
    13ba:	4ba1      	ldr	r3, [pc, #644]	; (1640 <sampleTick+0x374>)
    13bc:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13be:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    13c0:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    13c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    13c4:	3608      	adds	r6, #8
    13c6:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    13c8:	6523      	str	r3, [r4, #80]	; 0x50
    13ca:	4b9e      	ldr	r3, [pc, #632]	; (1644 <sampleTick+0x378>)
    13cc:	023f      	lsls	r7, r7, #8
    13ce:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    13d0:	002e      	movs	r6, r5
    13d2:	9200      	str	r2, [sp, #0]
    13d4:	7fea      	ldrb	r2, [r5, #31]
    13d6:	7fa8      	ldrb	r0, [r5, #30]
    13d8:	0212      	lsls	r2, r2, #8
    13da:	4302      	orrs	r2, r0
    13dc:	0011      	movs	r1, r2
    13de:	002b      	movs	r3, r5
    13e0:	361e      	adds	r6, #30
    13e2:	78b2      	ldrb	r2, [r6, #2]
    13e4:	3323      	adds	r3, #35	; 0x23
    13e6:	0412      	lsls	r2, r2, #16
    13e8:	430a      	orrs	r2, r1
    13ea:	78f1      	ldrb	r1, [r6, #3]
    13ec:	7818      	ldrb	r0, [r3, #0]
    13ee:	0609      	lsls	r1, r1, #24
    13f0:	4311      	orrs	r1, r2
    13f2:	7932      	ldrb	r2, [r6, #4]
    13f4:	789d      	ldrb	r5, [r3, #2]
    13f6:	9204      	str	r2, [sp, #16]
    13f8:	785a      	ldrb	r2, [r3, #1]
    13fa:	042d      	lsls	r5, r5, #16
    13fc:	0212      	lsls	r2, r2, #8
    13fe:	4302      	orrs	r2, r0
    1400:	9103      	str	r1, [sp, #12]
    1402:	0011      	movs	r1, r2
    1404:	002a      	movs	r2, r5
    1406:	78dd      	ldrb	r5, [r3, #3]
    1408:	791b      	ldrb	r3, [r3, #4]
    140a:	430a      	orrs	r2, r1
    140c:	062d      	lsls	r5, r5, #24
    140e:	4315      	orrs	r5, r2
    1410:	9305      	str	r3, [sp, #20]
    1412:	9a03      	ldr	r2, [sp, #12]
    1414:	9905      	ldr	r1, [sp, #20]
    1416:	9b04      	ldr	r3, [sp, #16]
    1418:	0028      	movs	r0, r5
    141a:	4e8b      	ldr	r6, [pc, #556]	; (1648 <sampleTick+0x37c>)
    141c:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    141e:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1420:	4b88      	ldr	r3, [pc, #544]	; (1644 <sampleTick+0x378>)
    1422:	0040      	lsls	r0, r0, #1
    1424:	619f      	str	r7, [r3, #24]
    1426:	4b89      	ldr	r3, [pc, #548]	; (164c <sampleTick+0x380>)
    1428:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    142a:	4b89      	ldr	r3, [pc, #548]	; (1650 <sampleTick+0x384>)
    142c:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    142e:	4b85      	ldr	r3, [pc, #532]	; (1644 <sampleTick+0x378>)
    1430:	6160      	str	r0, [r4, #20]
    1432:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1434:	2342      	movs	r3, #66	; 0x42
    1436:	9a03      	ldr	r2, [sp, #12]
    1438:	9300      	str	r3, [sp, #0]
    143a:	0028      	movs	r0, r5
    143c:	9b04      	ldr	r3, [sp, #16]
    143e:	9905      	ldr	r1, [sp, #20]
    1440:	47b0      	blx	r6
    1442:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1444:	4b7f      	ldr	r3, [pc, #508]	; (1644 <sampleTick+0x378>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1446:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1448:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    144a:	4b82      	ldr	r3, [pc, #520]	; (1654 <sampleTick+0x388>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    144c:	4f82      	ldr	r7, [pc, #520]	; (1658 <sampleTick+0x38c>)
    144e:	601a      	str	r2, [r3, #0]
    1450:	2182      	movs	r1, #130	; 0x82
    1452:	2000      	movs	r0, #0
    1454:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1456:	21ff      	movs	r1, #255	; 0xff
    1458:	2000      	movs	r0, #0
    145a:	47b8      	blx	r7
    145c:	0023      	movs	r3, r4
    145e:	3368      	adds	r3, #104	; 0x68
    1460:	8018      	strh	r0, [r3, #0]
    1462:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1464:	21ff      	movs	r1, #255	; 0xff
    1466:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1468:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    146a:	47b8      	blx	r7
    146c:	9b03      	ldr	r3, [sp, #12]
    146e:	0200      	lsls	r0, r0, #8
    1470:	4305      	orrs	r5, r0
    1472:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1474:	21ff      	movs	r1, #255	; 0xff
    1476:	0026      	movs	r6, r4
    1478:	2000      	movs	r0, #0
    147a:	47b8      	blx	r7
    147c:	366c      	adds	r6, #108	; 0x6c
    147e:	8030      	strh	r0, [r6, #0]
    1480:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1482:	21ff      	movs	r1, #255	; 0xff
    1484:	2000      	movs	r0, #0
    1486:	47b8      	blx	r7
    1488:	0200      	lsls	r0, r0, #8
    148a:	4305      	orrs	r5, r0
    148c:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    148e:	21ff      	movs	r1, #255	; 0xff
    1490:	2000      	movs	r0, #0
    1492:	47b8      	blx	r7
    1494:	466b      	mov	r3, sp
    1496:	0025      	movs	r5, r4
    1498:	9004      	str	r0, [sp, #16]
    149a:	8a1b      	ldrh	r3, [r3, #16]
    149c:	3570      	adds	r5, #112	; 0x70
    149e:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14a0:	21ff      	movs	r1, #255	; 0xff
    14a2:	2000      	movs	r0, #0
    14a4:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14a6:	2280      	movs	r2, #128	; 0x80
    14a8:	9b04      	ldr	r3, [sp, #16]
    14aa:	0200      	lsls	r0, r0, #8
    14ac:	4303      	orrs	r3, r0
    14ae:	802b      	strh	r3, [r5, #0]
    14b0:	4b6a      	ldr	r3, [pc, #424]	; (165c <sampleTick+0x390>)
    14b2:	00d2      	lsls	r2, r2, #3
    14b4:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    14b6:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    14b8:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    14ba:	2000      	movs	r0, #0
    14bc:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    14be:	2300      	movs	r3, #0
    14c0:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    14c2:	2102      	movs	r1, #2
    14c4:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    14c6:	0021      	movs	r1, r4
    14c8:	1112      	asrs	r2, r2, #4
    14ca:	1100      	asrs	r0, r0, #4
    14cc:	316a      	adds	r1, #106	; 0x6a
    14ce:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    14d0:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    14d2:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    14d4:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    14d6:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    14d8:	4b55      	ldr	r3, [pc, #340]	; (1630 <sampleTick+0x364>)
    14da:	4798      	blx	r3
    14dc:	23fe      	movs	r3, #254	; 0xfe
    14de:	4d56      	ldr	r5, [pc, #344]	; (1638 <sampleTick+0x36c>)
    14e0:	2200      	movs	r2, #0
    14e2:	059b      	lsls	r3, r3, #22
    14e4:	47a8      	blx	r5
    14e6:	4b56      	ldr	r3, [pc, #344]	; (1640 <sampleTick+0x374>)
    14e8:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    14ea:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    14ec:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    14ee:	2000      	movs	r0, #0
    14f0:	5e18      	ldrsh	r0, [r3, r0]
    14f2:	4b4f      	ldr	r3, [pc, #316]	; (1630 <sampleTick+0x364>)
    14f4:	4798      	blx	r3
    14f6:	23fe      	movs	r3, #254	; 0xfe
    14f8:	2200      	movs	r2, #0
    14fa:	059b      	lsls	r3, r3, #22
    14fc:	47a8      	blx	r5
    14fe:	4b50      	ldr	r3, [pc, #320]	; (1640 <sampleTick+0x374>)
    1500:	4798      	blx	r3
    1502:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1504:	2306      	movs	r3, #6
    1506:	5ef0      	ldrsh	r0, [r6, r3]
    1508:	4b49      	ldr	r3, [pc, #292]	; (1630 <sampleTick+0x364>)
    150a:	4798      	blx	r3
    150c:	23fe      	movs	r3, #254	; 0xfe
    150e:	2200      	movs	r2, #0
    1510:	059b      	lsls	r3, r3, #22
    1512:	47a8      	blx	r5
    1514:	4b4a      	ldr	r3, [pc, #296]	; (1640 <sampleTick+0x374>)
    1516:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1518:	2280      	movs	r2, #128	; 0x80
    151a:	4b4a      	ldr	r3, [pc, #296]	; (1644 <sampleTick+0x378>)
    151c:	00d2      	lsls	r2, r2, #3
    151e:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1520:	2182      	movs	r1, #130	; 0x82
    1522:	615a      	str	r2, [r3, #20]
    1524:	2000      	movs	r0, #0
    1526:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1528:	21ff      	movs	r1, #255	; 0xff
    152a:	2000      	movs	r0, #0
    152c:	47b8      	blx	r7
    152e:	0023      	movs	r3, r4
    1530:	3374      	adds	r3, #116	; 0x74
    1532:	8018      	strh	r0, [r3, #0]
    1534:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1536:	21ff      	movs	r1, #255	; 0xff
    1538:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    153a:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    153c:	47b8      	blx	r7
    153e:	9b03      	ldr	r3, [sp, #12]
    1540:	0200      	lsls	r0, r0, #8
    1542:	4305      	orrs	r5, r0
    1544:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1546:	21ff      	movs	r1, #255	; 0xff
    1548:	2000      	movs	r0, #0
    154a:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    154c:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    154e:	81b0      	strh	r0, [r6, #12]
    1550:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1552:	2000      	movs	r0, #0
    1554:	47b8      	blx	r7
    1556:	0200      	lsls	r0, r0, #8
    1558:	4305      	orrs	r5, r0
    155a:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    155c:	21ff      	movs	r1, #255	; 0xff
    155e:	2000      	movs	r0, #0
    1560:	47b8      	blx	r7
    1562:	466b      	mov	r3, sp
    1564:	0025      	movs	r5, r4
    1566:	9004      	str	r0, [sp, #16]
    1568:	8a1b      	ldrh	r3, [r3, #16]
    156a:	357c      	adds	r5, #124	; 0x7c
    156c:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    156e:	21ff      	movs	r1, #255	; 0xff
    1570:	2000      	movs	r0, #0
    1572:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1574:	2280      	movs	r2, #128	; 0x80
    1576:	9f04      	ldr	r7, [sp, #16]
    1578:	0200      	lsls	r0, r0, #8
    157a:	4b32      	ldr	r3, [pc, #200]	; (1644 <sampleTick+0x378>)
    157c:	4307      	orrs	r7, r0
    157e:	00d2      	lsls	r2, r2, #3
    1580:	802f      	strh	r7, [r5, #0]
    1582:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1584:	9b03      	ldr	r3, [sp, #12]
    1586:	2000      	movs	r0, #0
    1588:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    158a:	230c      	movs	r3, #12
    158c:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    158e:	2100      	movs	r1, #0
    1590:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1592:	0021      	movs	r1, r4
    1594:	1112      	asrs	r2, r2, #4
    1596:	1100      	asrs	r0, r0, #4
    1598:	3176      	adds	r1, #118	; 0x76
    159a:	111b      	asrs	r3, r3, #4
    159c:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    159e:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    15a0:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    15a2:	4b23      	ldr	r3, [pc, #140]	; (1630 <sampleTick+0x364>)
    15a4:	4798      	blx	r3
    15a6:	23fe      	movs	r3, #254	; 0xfe
    15a8:	4f23      	ldr	r7, [pc, #140]	; (1638 <sampleTick+0x36c>)
    15aa:	2200      	movs	r2, #0
    15ac:	059b      	lsls	r3, r3, #22
    15ae:	47b8      	blx	r7
    15b0:	4b23      	ldr	r3, [pc, #140]	; (1640 <sampleTick+0x374>)
    15b2:	4798      	blx	r3
    15b4:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    15b6:	230e      	movs	r3, #14
    15b8:	5ef0      	ldrsh	r0, [r6, r3]
    15ba:	4b1d      	ldr	r3, [pc, #116]	; (1630 <sampleTick+0x364>)
    15bc:	4798      	blx	r3
    15be:	23fe      	movs	r3, #254	; 0xfe
    15c0:	2200      	movs	r2, #0
    15c2:	059b      	lsls	r3, r3, #22
    15c4:	47b8      	blx	r7
    15c6:	4b1e      	ldr	r3, [pc, #120]	; (1640 <sampleTick+0x374>)
    15c8:	4798      	blx	r3
    15ca:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    15cc:	2302      	movs	r3, #2
    15ce:	5ee8      	ldrsh	r0, [r5, r3]
    15d0:	4b17      	ldr	r3, [pc, #92]	; (1630 <sampleTick+0x364>)
    15d2:	4798      	blx	r3
    15d4:	23fe      	movs	r3, #254	; 0xfe
    15d6:	2200      	movs	r2, #0
    15d8:	059b      	lsls	r3, r3, #22
    15da:	47b8      	blx	r7
    15dc:	4b18      	ldr	r3, [pc, #96]	; (1640 <sampleTick+0x374>)
    15de:	4798      	blx	r3
    15e0:	6660      	str	r0, [r4, #100]	; 0x64

    delay_us(800);
    15e2:	20c8      	movs	r0, #200	; 0xc8
    15e4:	4b19      	ldr	r3, [pc, #100]	; (164c <sampleTick+0x380>)
    15e6:	0080      	lsls	r0, r0, #2
    15e8:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    15ea:	4b19      	ldr	r3, [pc, #100]	; (1650 <sampleTick+0x384>)
    15ec:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15ee:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    15f0:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15f2:	4b1b      	ldr	r3, [pc, #108]	; (1660 <sampleTick+0x394>)
    15f4:	0028      	movs	r0, r5
    15f6:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    15f8:	0028      	movs	r0, r5
    15fa:	4b1a      	ldr	r3, [pc, #104]	; (1664 <sampleTick+0x398>)
    15fc:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    15fe:	4b1a      	ldr	r3, [pc, #104]	; (1668 <sampleTick+0x39c>)
    1600:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1602:	4798      	blx	r3
    1604:	4a19      	ldr	r2, [pc, #100]	; (166c <sampleTick+0x3a0>)
    1606:	4b1a      	ldr	r3, [pc, #104]	; (1670 <sampleTick+0x3a4>)
    1608:	4d0b      	ldr	r5, [pc, #44]	; (1638 <sampleTick+0x36c>)
    160a:	47a8      	blx	r5
    160c:	4b0c      	ldr	r3, [pc, #48]	; (1640 <sampleTick+0x374>)
    160e:	4798      	blx	r3
    1610:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1612:	b007      	add	sp, #28
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00000e69 	.word	0x00000e69
    161c:	0000335c 	.word	0x0000335c
    1620:	00000b15 	.word	0x00000b15
    1624:	00000292 	.word	0x00000292
    1628:	00000296 	.word	0x00000296
    162c:	fffff0c4 	.word	0xfffff0c4
    1630:	00002d25 	.word	0x00002d25
    1634:	02de00d2 	.word	0x02de00d2
    1638:	0000211d 	.word	0x0000211d
    163c:	bf8f8a09 	.word	0xbf8f8a09
    1640:	00002ec1 	.word	0x00002ec1
    1644:	41004400 	.word	0x41004400
    1648:	00000b7d 	.word	0x00000b7d
    164c:	00000ded 	.word	0x00000ded
    1650:	00000255 	.word	0x00000255
    1654:	41004494 	.word	0x41004494
    1658:	00001781 	.word	0x00001781
    165c:	41004498 	.word	0x41004498
    1660:	00000309 	.word	0x00000309
    1664:	000003f5 	.word	0x000003f5
    1668:	00002da9 	.word	0x00002da9
    166c:	e9f6a93f 	.word	0xe9f6a93f
    1670:	3fa0cc78 	.word	0x3fa0cc78

00001674 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1674:	b570      	push	{r4, r5, r6, lr}
    1676:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1678:	2301      	movs	r3, #1
    167a:	1ca6      	adds	r6, r4, #2
    167c:	40b3      	lsls	r3, r6
    167e:	480d      	ldr	r0, [pc, #52]	; (16b4 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1680:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1682:	6a01      	ldr	r1, [r0, #32]
    1684:	430b      	orrs	r3, r1
    1686:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1688:	2d00      	cmp	r5, #0
    168a:	d003      	beq.n	1694 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    168c:	2107      	movs	r1, #7
    168e:	0028      	movs	r0, r5
    1690:	4b09      	ldr	r3, [pc, #36]	; (16b8 <sercomClockEnable+0x44>)
    1692:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1694:	22f0      	movs	r2, #240	; 0xf0
    1696:	2080      	movs	r0, #128	; 0x80
    1698:	0229      	lsls	r1, r5, #8
    169a:	0112      	lsls	r2, r2, #4
    169c:	4011      	ands	r1, r2
    169e:	01c0      	lsls	r0, r0, #7
    16a0:	4301      	orrs	r1, r0
    16a2:	0020      	movs	r0, r4
    16a4:	3014      	adds	r0, #20
    16a6:	223f      	movs	r2, #63	; 0x3f
    16a8:	0003      	movs	r3, r0
    16aa:	4013      	ands	r3, r2
    16ac:	4319      	orrs	r1, r3
    16ae:	4b03      	ldr	r3, [pc, #12]	; (16bc <sercomClockEnable+0x48>)
    16b0:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    16b2:	bd70      	pop	{r4, r5, r6, pc}
    16b4:	40000400 	.word	0x40000400
    16b8:	00000d9d 	.word	0x00000d9d
    16bc:	40000c00 	.word	0x40000c00

000016c0 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <sercomReset+0x14>)
    16c2:	0280      	lsls	r0, r0, #10
    16c4:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    16c6:	2301      	movs	r3, #1
    16c8:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    16ca:	6802      	ldr	r2, [r0, #0]
    16cc:	421a      	tst	r2, r3
    16ce:	d1fc      	bne.n	16ca <sercomReset+0xa>
}
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	42000800 	.word	0x42000800

000016d8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    16d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16da:	0004      	movs	r4, r0
    16dc:	9300      	str	r3, [sp, #0]
    16de:	ab08      	add	r3, sp, #32
    16e0:	781b      	ldrb	r3, [r3, #0]
    16e2:	000e      	movs	r6, r1
    16e4:	9301      	str	r3, [sp, #4]
    16e6:	ab09      	add	r3, sp, #36	; 0x24
    16e8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    16ea:	4b12      	ldr	r3, [pc, #72]	; (1734 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    16ec:	0015      	movs	r5, r2

    sercomReset(id);
    16ee:	4798      	blx	r3
    16f0:	4b11      	ldr	r3, [pc, #68]	; (1738 <sercomSpiMasterInit+0x60>)
    16f2:	02a4      	lsls	r4, r4, #10
    16f4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    16f6:	2380      	movs	r3, #128	; 0x80
    16f8:	029b      	lsls	r3, r3, #10
    16fa:	6063      	str	r3, [r4, #4]
    16fc:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    16fe:	21c0      	movs	r1, #192	; 0xc0
    1700:	042d      	lsls	r5, r5, #16
    1702:	029b      	lsls	r3, r3, #10
    1704:	402b      	ands	r3, r5
    1706:	250e      	movs	r5, #14
    1708:	0536      	lsls	r6, r6, #20
    170a:	0389      	lsls	r1, r1, #14
    170c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    170e:	9e00      	ldr	r6, [sp, #0]
    1710:	431d      	orrs	r5, r3
    1712:	1e73      	subs	r3, r6, #1
    1714:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1716:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1718:	0772      	lsls	r2, r6, #29
    171a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    171c:	432a      	orrs	r2, r5
    171e:	1e59      	subs	r1, r3, #1
    1720:	418b      	sbcs	r3, r1
    1722:	0016      	movs	r6, r2
    1724:	071b      	lsls	r3, r3, #28
    1726:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1728:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    172a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    172c:	69e3      	ldr	r3, [r4, #28]
    172e:	075b      	lsls	r3, r3, #29
    1730:	d4fc      	bmi.n	172c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1732:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1734:	000016c1 	.word	0x000016c1
    1738:	42000800 	.word	0x42000800

0000173c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    173e:	0007      	movs	r7, r0
    1740:	001e      	movs	r6, r3
    sercomReset(id);
    1742:	4b0c      	ldr	r3, [pc, #48]	; (1774 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1744:	000d      	movs	r5, r1
    1746:	0014      	movs	r4, r2
    sercomReset(id);
    1748:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    174a:	4b0b      	ldr	r3, [pc, #44]	; (1778 <sercomUartInit+0x3c>)
    174c:	02b8      	lsls	r0, r7, #10
    174e:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1750:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1752:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1754:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1756:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1758:	0529      	lsls	r1, r5, #20
    175a:	0392      	lsls	r2, r2, #14
    175c:	4011      	ands	r1, r2
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1760:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1762:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1764:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1766:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1768:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    176a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    176c:	4023      	ands	r3, r4
    176e:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1770:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1774:	000016c1 	.word	0x000016c1
    1778:	42000800 	.word	0x42000800
    177c:	40000006 	.word	0x40000006

00001780 <spiDataTransfer>:
    1780:	4b04      	ldr	r3, [pc, #16]	; (1794 <spiDataTransfer+0x14>)
    1782:	0280      	lsls	r0, r0, #10
    1784:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1786:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1788:	7e03      	ldrb	r3, [r0, #24]
    178a:	075b      	lsls	r3, r3, #29
    178c:	d5fc      	bpl.n	1788 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    178e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1790:	b2c0      	uxtb	r0, r0
}
    1792:	4770      	bx	lr
    1794:	42000800 	.word	0x42000800

00001798 <__aeabi_cdrcmple>:
    1798:	4684      	mov	ip, r0
    179a:	1c10      	adds	r0, r2, #0
    179c:	4662      	mov	r2, ip
    179e:	468c      	mov	ip, r1
    17a0:	1c19      	adds	r1, r3, #0
    17a2:	4663      	mov	r3, ip
    17a4:	e000      	b.n	17a8 <__aeabi_cdcmpeq>
    17a6:	46c0      	nop			; (mov r8, r8)

000017a8 <__aeabi_cdcmpeq>:
    17a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    17aa:	f000 fc4d 	bl	2048 <__ledf2>
    17ae:	2800      	cmp	r0, #0
    17b0:	d401      	bmi.n	17b6 <__aeabi_cdcmpeq+0xe>
    17b2:	2100      	movs	r1, #0
    17b4:	42c8      	cmn	r0, r1
    17b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000017b8 <__aeabi_dcmpeq>:
    17b8:	b510      	push	{r4, lr}
    17ba:	f000 fba1 	bl	1f00 <__eqdf2>
    17be:	4240      	negs	r0, r0
    17c0:	3001      	adds	r0, #1
    17c2:	bd10      	pop	{r4, pc}

000017c4 <__aeabi_dcmplt>:
    17c4:	b510      	push	{r4, lr}
    17c6:	f000 fc3f 	bl	2048 <__ledf2>
    17ca:	2800      	cmp	r0, #0
    17cc:	db01      	blt.n	17d2 <__aeabi_dcmplt+0xe>
    17ce:	2000      	movs	r0, #0
    17d0:	bd10      	pop	{r4, pc}
    17d2:	2001      	movs	r0, #1
    17d4:	bd10      	pop	{r4, pc}
    17d6:	46c0      	nop			; (mov r8, r8)

000017d8 <__aeabi_dcmple>:
    17d8:	b510      	push	{r4, lr}
    17da:	f000 fc35 	bl	2048 <__ledf2>
    17de:	2800      	cmp	r0, #0
    17e0:	dd01      	ble.n	17e6 <__aeabi_dcmple+0xe>
    17e2:	2000      	movs	r0, #0
    17e4:	bd10      	pop	{r4, pc}
    17e6:	2001      	movs	r0, #1
    17e8:	bd10      	pop	{r4, pc}
    17ea:	46c0      	nop			; (mov r8, r8)

000017ec <__aeabi_dcmpgt>:
    17ec:	b510      	push	{r4, lr}
    17ee:	f000 fbc7 	bl	1f80 <__gedf2>
    17f2:	2800      	cmp	r0, #0
    17f4:	dc01      	bgt.n	17fa <__aeabi_dcmpgt+0xe>
    17f6:	2000      	movs	r0, #0
    17f8:	bd10      	pop	{r4, pc}
    17fa:	2001      	movs	r0, #1
    17fc:	bd10      	pop	{r4, pc}
    17fe:	46c0      	nop			; (mov r8, r8)

00001800 <__aeabi_dcmpge>:
    1800:	b510      	push	{r4, lr}
    1802:	f000 fbbd 	bl	1f80 <__gedf2>
    1806:	2800      	cmp	r0, #0
    1808:	da01      	bge.n	180e <__aeabi_dcmpge+0xe>
    180a:	2000      	movs	r0, #0
    180c:	bd10      	pop	{r4, pc}
    180e:	2001      	movs	r0, #1
    1810:	bd10      	pop	{r4, pc}
    1812:	46c0      	nop			; (mov r8, r8)

00001814 <__aeabi_lmul>:
    1814:	b5f0      	push	{r4, r5, r6, r7, lr}
    1816:	464f      	mov	r7, r9
    1818:	4646      	mov	r6, r8
    181a:	b4c0      	push	{r6, r7}
    181c:	0416      	lsls	r6, r2, #16
    181e:	0c36      	lsrs	r6, r6, #16
    1820:	4699      	mov	r9, r3
    1822:	0033      	movs	r3, r6
    1824:	0405      	lsls	r5, r0, #16
    1826:	0c2c      	lsrs	r4, r5, #16
    1828:	0c07      	lsrs	r7, r0, #16
    182a:	0c15      	lsrs	r5, r2, #16
    182c:	4363      	muls	r3, r4
    182e:	437e      	muls	r6, r7
    1830:	436f      	muls	r7, r5
    1832:	4365      	muls	r5, r4
    1834:	0c1c      	lsrs	r4, r3, #16
    1836:	19ad      	adds	r5, r5, r6
    1838:	1964      	adds	r4, r4, r5
    183a:	469c      	mov	ip, r3
    183c:	42a6      	cmp	r6, r4
    183e:	d903      	bls.n	1848 <__aeabi_lmul+0x34>
    1840:	2380      	movs	r3, #128	; 0x80
    1842:	025b      	lsls	r3, r3, #9
    1844:	4698      	mov	r8, r3
    1846:	4447      	add	r7, r8
    1848:	4663      	mov	r3, ip
    184a:	0c25      	lsrs	r5, r4, #16
    184c:	19ef      	adds	r7, r5, r7
    184e:	041d      	lsls	r5, r3, #16
    1850:	464b      	mov	r3, r9
    1852:	434a      	muls	r2, r1
    1854:	4343      	muls	r3, r0
    1856:	0c2d      	lsrs	r5, r5, #16
    1858:	0424      	lsls	r4, r4, #16
    185a:	1964      	adds	r4, r4, r5
    185c:	1899      	adds	r1, r3, r2
    185e:	19c9      	adds	r1, r1, r7
    1860:	0020      	movs	r0, r4
    1862:	bc0c      	pop	{r2, r3}
    1864:	4690      	mov	r8, r2
    1866:	4699      	mov	r9, r3
    1868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    186a:	46c0      	nop			; (mov r8, r8)

0000186c <__aeabi_d2uiz>:
    186c:	b570      	push	{r4, r5, r6, lr}
    186e:	2200      	movs	r2, #0
    1870:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <__aeabi_d2uiz+0x38>)
    1872:	0004      	movs	r4, r0
    1874:	000d      	movs	r5, r1
    1876:	f7ff ffc3 	bl	1800 <__aeabi_dcmpge>
    187a:	2800      	cmp	r0, #0
    187c:	d104      	bne.n	1888 <__aeabi_d2uiz+0x1c>
    187e:	0020      	movs	r0, r4
    1880:	0029      	movs	r1, r5
    1882:	f001 fa19 	bl	2cb8 <__aeabi_d2iz>
    1886:	bd70      	pop	{r4, r5, r6, pc}
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <__aeabi_d2uiz+0x38>)
    188a:	2200      	movs	r2, #0
    188c:	0020      	movs	r0, r4
    188e:	0029      	movs	r1, r5
    1890:	f000 febe 	bl	2610 <__aeabi_dsub>
    1894:	f001 fa10 	bl	2cb8 <__aeabi_d2iz>
    1898:	2380      	movs	r3, #128	; 0x80
    189a:	061b      	lsls	r3, r3, #24
    189c:	469c      	mov	ip, r3
    189e:	4460      	add	r0, ip
    18a0:	e7f1      	b.n	1886 <__aeabi_d2uiz+0x1a>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	41e00000 	.word	0x41e00000

000018a8 <__aeabi_dadd>:
    18a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18aa:	4656      	mov	r6, sl
    18ac:	465f      	mov	r7, fp
    18ae:	464d      	mov	r5, r9
    18b0:	4644      	mov	r4, r8
    18b2:	b4f0      	push	{r4, r5, r6, r7}
    18b4:	000f      	movs	r7, r1
    18b6:	0ffd      	lsrs	r5, r7, #31
    18b8:	46aa      	mov	sl, r5
    18ba:	0309      	lsls	r1, r1, #12
    18bc:	007c      	lsls	r4, r7, #1
    18be:	002e      	movs	r6, r5
    18c0:	005f      	lsls	r7, r3, #1
    18c2:	0f45      	lsrs	r5, r0, #29
    18c4:	0a49      	lsrs	r1, r1, #9
    18c6:	0d7f      	lsrs	r7, r7, #21
    18c8:	4329      	orrs	r1, r5
    18ca:	00c5      	lsls	r5, r0, #3
    18cc:	0318      	lsls	r0, r3, #12
    18ce:	46bc      	mov	ip, r7
    18d0:	0a40      	lsrs	r0, r0, #9
    18d2:	0f57      	lsrs	r7, r2, #29
    18d4:	0d64      	lsrs	r4, r4, #21
    18d6:	0fdb      	lsrs	r3, r3, #31
    18d8:	4338      	orrs	r0, r7
    18da:	00d2      	lsls	r2, r2, #3
    18dc:	459a      	cmp	sl, r3
    18de:	d100      	bne.n	18e2 <__aeabi_dadd+0x3a>
    18e0:	e0aa      	b.n	1a38 <__aeabi_dadd+0x190>
    18e2:	4666      	mov	r6, ip
    18e4:	1ba6      	subs	r6, r4, r6
    18e6:	2e00      	cmp	r6, #0
    18e8:	dc00      	bgt.n	18ec <__aeabi_dadd+0x44>
    18ea:	e0ff      	b.n	1aec <__aeabi_dadd+0x244>
    18ec:	4663      	mov	r3, ip
    18ee:	2b00      	cmp	r3, #0
    18f0:	d139      	bne.n	1966 <__aeabi_dadd+0xbe>
    18f2:	0003      	movs	r3, r0
    18f4:	4313      	orrs	r3, r2
    18f6:	d000      	beq.n	18fa <__aeabi_dadd+0x52>
    18f8:	e0d9      	b.n	1aae <__aeabi_dadd+0x206>
    18fa:	076b      	lsls	r3, r5, #29
    18fc:	d009      	beq.n	1912 <__aeabi_dadd+0x6a>
    18fe:	230f      	movs	r3, #15
    1900:	402b      	ands	r3, r5
    1902:	2b04      	cmp	r3, #4
    1904:	d005      	beq.n	1912 <__aeabi_dadd+0x6a>
    1906:	1d2b      	adds	r3, r5, #4
    1908:	42ab      	cmp	r3, r5
    190a:	41ad      	sbcs	r5, r5
    190c:	426d      	negs	r5, r5
    190e:	1949      	adds	r1, r1, r5
    1910:	001d      	movs	r5, r3
    1912:	020b      	lsls	r3, r1, #8
    1914:	d400      	bmi.n	1918 <__aeabi_dadd+0x70>
    1916:	e082      	b.n	1a1e <__aeabi_dadd+0x176>
    1918:	4bca      	ldr	r3, [pc, #808]	; (1c44 <__aeabi_dadd+0x39c>)
    191a:	3401      	adds	r4, #1
    191c:	429c      	cmp	r4, r3
    191e:	d100      	bne.n	1922 <__aeabi_dadd+0x7a>
    1920:	e0fe      	b.n	1b20 <__aeabi_dadd+0x278>
    1922:	000a      	movs	r2, r1
    1924:	4656      	mov	r6, sl
    1926:	4bc8      	ldr	r3, [pc, #800]	; (1c48 <__aeabi_dadd+0x3a0>)
    1928:	08ed      	lsrs	r5, r5, #3
    192a:	401a      	ands	r2, r3
    192c:	0750      	lsls	r0, r2, #29
    192e:	0564      	lsls	r4, r4, #21
    1930:	0252      	lsls	r2, r2, #9
    1932:	4305      	orrs	r5, r0
    1934:	0b12      	lsrs	r2, r2, #12
    1936:	0d64      	lsrs	r4, r4, #21
    1938:	2100      	movs	r1, #0
    193a:	0312      	lsls	r2, r2, #12
    193c:	0d0b      	lsrs	r3, r1, #20
    193e:	051b      	lsls	r3, r3, #20
    1940:	0564      	lsls	r4, r4, #21
    1942:	0b12      	lsrs	r2, r2, #12
    1944:	431a      	orrs	r2, r3
    1946:	0863      	lsrs	r3, r4, #1
    1948:	4cc0      	ldr	r4, [pc, #768]	; (1c4c <__aeabi_dadd+0x3a4>)
    194a:	07f6      	lsls	r6, r6, #31
    194c:	4014      	ands	r4, r2
    194e:	431c      	orrs	r4, r3
    1950:	0064      	lsls	r4, r4, #1
    1952:	0864      	lsrs	r4, r4, #1
    1954:	4334      	orrs	r4, r6
    1956:	0028      	movs	r0, r5
    1958:	0021      	movs	r1, r4
    195a:	bc3c      	pop	{r2, r3, r4, r5}
    195c:	4690      	mov	r8, r2
    195e:	4699      	mov	r9, r3
    1960:	46a2      	mov	sl, r4
    1962:	46ab      	mov	fp, r5
    1964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1966:	4bb7      	ldr	r3, [pc, #732]	; (1c44 <__aeabi_dadd+0x39c>)
    1968:	429c      	cmp	r4, r3
    196a:	d0c6      	beq.n	18fa <__aeabi_dadd+0x52>
    196c:	2380      	movs	r3, #128	; 0x80
    196e:	041b      	lsls	r3, r3, #16
    1970:	4318      	orrs	r0, r3
    1972:	2e38      	cmp	r6, #56	; 0x38
    1974:	dd00      	ble.n	1978 <__aeabi_dadd+0xd0>
    1976:	e0eb      	b.n	1b50 <__aeabi_dadd+0x2a8>
    1978:	2e1f      	cmp	r6, #31
    197a:	dd00      	ble.n	197e <__aeabi_dadd+0xd6>
    197c:	e11e      	b.n	1bbc <__aeabi_dadd+0x314>
    197e:	2320      	movs	r3, #32
    1980:	1b9b      	subs	r3, r3, r6
    1982:	469c      	mov	ip, r3
    1984:	0003      	movs	r3, r0
    1986:	4667      	mov	r7, ip
    1988:	40bb      	lsls	r3, r7
    198a:	4698      	mov	r8, r3
    198c:	0013      	movs	r3, r2
    198e:	4647      	mov	r7, r8
    1990:	40f3      	lsrs	r3, r6
    1992:	433b      	orrs	r3, r7
    1994:	4667      	mov	r7, ip
    1996:	40ba      	lsls	r2, r7
    1998:	1e57      	subs	r7, r2, #1
    199a:	41ba      	sbcs	r2, r7
    199c:	4313      	orrs	r3, r2
    199e:	0002      	movs	r2, r0
    19a0:	40f2      	lsrs	r2, r6
    19a2:	1aeb      	subs	r3, r5, r3
    19a4:	429d      	cmp	r5, r3
    19a6:	41b6      	sbcs	r6, r6
    19a8:	001d      	movs	r5, r3
    19aa:	1a8a      	subs	r2, r1, r2
    19ac:	4276      	negs	r6, r6
    19ae:	1b91      	subs	r1, r2, r6
    19b0:	020b      	lsls	r3, r1, #8
    19b2:	d531      	bpl.n	1a18 <__aeabi_dadd+0x170>
    19b4:	024a      	lsls	r2, r1, #9
    19b6:	0a56      	lsrs	r6, r2, #9
    19b8:	2e00      	cmp	r6, #0
    19ba:	d100      	bne.n	19be <__aeabi_dadd+0x116>
    19bc:	e0b4      	b.n	1b28 <__aeabi_dadd+0x280>
    19be:	0030      	movs	r0, r6
    19c0:	f001 fb0a 	bl	2fd8 <__clzsi2>
    19c4:	0003      	movs	r3, r0
    19c6:	3b08      	subs	r3, #8
    19c8:	2b1f      	cmp	r3, #31
    19ca:	dd00      	ble.n	19ce <__aeabi_dadd+0x126>
    19cc:	e0b5      	b.n	1b3a <__aeabi_dadd+0x292>
    19ce:	2220      	movs	r2, #32
    19d0:	0029      	movs	r1, r5
    19d2:	1ad2      	subs	r2, r2, r3
    19d4:	40d1      	lsrs	r1, r2
    19d6:	409e      	lsls	r6, r3
    19d8:	000a      	movs	r2, r1
    19da:	409d      	lsls	r5, r3
    19dc:	4332      	orrs	r2, r6
    19de:	429c      	cmp	r4, r3
    19e0:	dd00      	ble.n	19e4 <__aeabi_dadd+0x13c>
    19e2:	e0b1      	b.n	1b48 <__aeabi_dadd+0x2a0>
    19e4:	1b1c      	subs	r4, r3, r4
    19e6:	1c63      	adds	r3, r4, #1
    19e8:	2b1f      	cmp	r3, #31
    19ea:	dd00      	ble.n	19ee <__aeabi_dadd+0x146>
    19ec:	e0d5      	b.n	1b9a <__aeabi_dadd+0x2f2>
    19ee:	2120      	movs	r1, #32
    19f0:	0014      	movs	r4, r2
    19f2:	0028      	movs	r0, r5
    19f4:	1ac9      	subs	r1, r1, r3
    19f6:	408c      	lsls	r4, r1
    19f8:	40d8      	lsrs	r0, r3
    19fa:	408d      	lsls	r5, r1
    19fc:	4304      	orrs	r4, r0
    19fe:	40da      	lsrs	r2, r3
    1a00:	1e68      	subs	r0, r5, #1
    1a02:	4185      	sbcs	r5, r0
    1a04:	0011      	movs	r1, r2
    1a06:	4325      	orrs	r5, r4
    1a08:	2400      	movs	r4, #0
    1a0a:	e776      	b.n	18fa <__aeabi_dadd+0x52>
    1a0c:	4641      	mov	r1, r8
    1a0e:	4331      	orrs	r1, r6
    1a10:	d100      	bne.n	1a14 <__aeabi_dadd+0x16c>
    1a12:	e234      	b.n	1e7e <__aeabi_dadd+0x5d6>
    1a14:	0031      	movs	r1, r6
    1a16:	4645      	mov	r5, r8
    1a18:	076b      	lsls	r3, r5, #29
    1a1a:	d000      	beq.n	1a1e <__aeabi_dadd+0x176>
    1a1c:	e76f      	b.n	18fe <__aeabi_dadd+0x56>
    1a1e:	4656      	mov	r6, sl
    1a20:	0748      	lsls	r0, r1, #29
    1a22:	08ed      	lsrs	r5, r5, #3
    1a24:	08c9      	lsrs	r1, r1, #3
    1a26:	4305      	orrs	r5, r0
    1a28:	4b86      	ldr	r3, [pc, #536]	; (1c44 <__aeabi_dadd+0x39c>)
    1a2a:	429c      	cmp	r4, r3
    1a2c:	d035      	beq.n	1a9a <__aeabi_dadd+0x1f2>
    1a2e:	030a      	lsls	r2, r1, #12
    1a30:	0564      	lsls	r4, r4, #21
    1a32:	0b12      	lsrs	r2, r2, #12
    1a34:	0d64      	lsrs	r4, r4, #21
    1a36:	e77f      	b.n	1938 <__aeabi_dadd+0x90>
    1a38:	4663      	mov	r3, ip
    1a3a:	1ae3      	subs	r3, r4, r3
    1a3c:	469b      	mov	fp, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	dc00      	bgt.n	1a44 <__aeabi_dadd+0x19c>
    1a42:	e08b      	b.n	1b5c <__aeabi_dadd+0x2b4>
    1a44:	4667      	mov	r7, ip
    1a46:	2f00      	cmp	r7, #0
    1a48:	d03c      	beq.n	1ac4 <__aeabi_dadd+0x21c>
    1a4a:	4f7e      	ldr	r7, [pc, #504]	; (1c44 <__aeabi_dadd+0x39c>)
    1a4c:	42bc      	cmp	r4, r7
    1a4e:	d100      	bne.n	1a52 <__aeabi_dadd+0x1aa>
    1a50:	e753      	b.n	18fa <__aeabi_dadd+0x52>
    1a52:	2780      	movs	r7, #128	; 0x80
    1a54:	043f      	lsls	r7, r7, #16
    1a56:	4338      	orrs	r0, r7
    1a58:	465b      	mov	r3, fp
    1a5a:	2b38      	cmp	r3, #56	; 0x38
    1a5c:	dc00      	bgt.n	1a60 <__aeabi_dadd+0x1b8>
    1a5e:	e0f7      	b.n	1c50 <__aeabi_dadd+0x3a8>
    1a60:	4302      	orrs	r2, r0
    1a62:	1e50      	subs	r0, r2, #1
    1a64:	4182      	sbcs	r2, r0
    1a66:	2000      	movs	r0, #0
    1a68:	b2d2      	uxtb	r2, r2
    1a6a:	1953      	adds	r3, r2, r5
    1a6c:	1842      	adds	r2, r0, r1
    1a6e:	42ab      	cmp	r3, r5
    1a70:	4189      	sbcs	r1, r1
    1a72:	001d      	movs	r5, r3
    1a74:	4249      	negs	r1, r1
    1a76:	1889      	adds	r1, r1, r2
    1a78:	020b      	lsls	r3, r1, #8
    1a7a:	d5cd      	bpl.n	1a18 <__aeabi_dadd+0x170>
    1a7c:	4b71      	ldr	r3, [pc, #452]	; (1c44 <__aeabi_dadd+0x39c>)
    1a7e:	3401      	adds	r4, #1
    1a80:	429c      	cmp	r4, r3
    1a82:	d100      	bne.n	1a86 <__aeabi_dadd+0x1de>
    1a84:	e13d      	b.n	1d02 <__aeabi_dadd+0x45a>
    1a86:	2001      	movs	r0, #1
    1a88:	4a6f      	ldr	r2, [pc, #444]	; (1c48 <__aeabi_dadd+0x3a0>)
    1a8a:	086b      	lsrs	r3, r5, #1
    1a8c:	400a      	ands	r2, r1
    1a8e:	4028      	ands	r0, r5
    1a90:	4318      	orrs	r0, r3
    1a92:	07d5      	lsls	r5, r2, #31
    1a94:	4305      	orrs	r5, r0
    1a96:	0851      	lsrs	r1, r2, #1
    1a98:	e72f      	b.n	18fa <__aeabi_dadd+0x52>
    1a9a:	002b      	movs	r3, r5
    1a9c:	430b      	orrs	r3, r1
    1a9e:	d100      	bne.n	1aa2 <__aeabi_dadd+0x1fa>
    1aa0:	e1cb      	b.n	1e3a <__aeabi_dadd+0x592>
    1aa2:	2380      	movs	r3, #128	; 0x80
    1aa4:	031b      	lsls	r3, r3, #12
    1aa6:	430b      	orrs	r3, r1
    1aa8:	031a      	lsls	r2, r3, #12
    1aaa:	0b12      	lsrs	r2, r2, #12
    1aac:	e744      	b.n	1938 <__aeabi_dadd+0x90>
    1aae:	3e01      	subs	r6, #1
    1ab0:	2e00      	cmp	r6, #0
    1ab2:	d16d      	bne.n	1b90 <__aeabi_dadd+0x2e8>
    1ab4:	1aae      	subs	r6, r5, r2
    1ab6:	42b5      	cmp	r5, r6
    1ab8:	419b      	sbcs	r3, r3
    1aba:	1a09      	subs	r1, r1, r0
    1abc:	425b      	negs	r3, r3
    1abe:	1ac9      	subs	r1, r1, r3
    1ac0:	0035      	movs	r5, r6
    1ac2:	e775      	b.n	19b0 <__aeabi_dadd+0x108>
    1ac4:	0007      	movs	r7, r0
    1ac6:	4317      	orrs	r7, r2
    1ac8:	d100      	bne.n	1acc <__aeabi_dadd+0x224>
    1aca:	e716      	b.n	18fa <__aeabi_dadd+0x52>
    1acc:	2301      	movs	r3, #1
    1ace:	425b      	negs	r3, r3
    1ad0:	469c      	mov	ip, r3
    1ad2:	44e3      	add	fp, ip
    1ad4:	465b      	mov	r3, fp
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d000      	beq.n	1adc <__aeabi_dadd+0x234>
    1ada:	e0e0      	b.n	1c9e <__aeabi_dadd+0x3f6>
    1adc:	18aa      	adds	r2, r5, r2
    1ade:	42aa      	cmp	r2, r5
    1ae0:	419b      	sbcs	r3, r3
    1ae2:	1809      	adds	r1, r1, r0
    1ae4:	425b      	negs	r3, r3
    1ae6:	1859      	adds	r1, r3, r1
    1ae8:	0015      	movs	r5, r2
    1aea:	e7c5      	b.n	1a78 <__aeabi_dadd+0x1d0>
    1aec:	2e00      	cmp	r6, #0
    1aee:	d175      	bne.n	1bdc <__aeabi_dadd+0x334>
    1af0:	1c66      	adds	r6, r4, #1
    1af2:	0576      	lsls	r6, r6, #21
    1af4:	0d76      	lsrs	r6, r6, #21
    1af6:	2e01      	cmp	r6, #1
    1af8:	dc00      	bgt.n	1afc <__aeabi_dadd+0x254>
    1afa:	e0f3      	b.n	1ce4 <__aeabi_dadd+0x43c>
    1afc:	1aae      	subs	r6, r5, r2
    1afe:	46b0      	mov	r8, r6
    1b00:	4545      	cmp	r5, r8
    1b02:	41bf      	sbcs	r7, r7
    1b04:	1a0e      	subs	r6, r1, r0
    1b06:	427f      	negs	r7, r7
    1b08:	1bf6      	subs	r6, r6, r7
    1b0a:	0237      	lsls	r7, r6, #8
    1b0c:	d400      	bmi.n	1b10 <__aeabi_dadd+0x268>
    1b0e:	e08f      	b.n	1c30 <__aeabi_dadd+0x388>
    1b10:	1b55      	subs	r5, r2, r5
    1b12:	42aa      	cmp	r2, r5
    1b14:	41b6      	sbcs	r6, r6
    1b16:	1a41      	subs	r1, r0, r1
    1b18:	4276      	negs	r6, r6
    1b1a:	1b8e      	subs	r6, r1, r6
    1b1c:	469a      	mov	sl, r3
    1b1e:	e74b      	b.n	19b8 <__aeabi_dadd+0x110>
    1b20:	4656      	mov	r6, sl
    1b22:	2200      	movs	r2, #0
    1b24:	2500      	movs	r5, #0
    1b26:	e707      	b.n	1938 <__aeabi_dadd+0x90>
    1b28:	0028      	movs	r0, r5
    1b2a:	f001 fa55 	bl	2fd8 <__clzsi2>
    1b2e:	3020      	adds	r0, #32
    1b30:	0003      	movs	r3, r0
    1b32:	3b08      	subs	r3, #8
    1b34:	2b1f      	cmp	r3, #31
    1b36:	dc00      	bgt.n	1b3a <__aeabi_dadd+0x292>
    1b38:	e749      	b.n	19ce <__aeabi_dadd+0x126>
    1b3a:	002a      	movs	r2, r5
    1b3c:	3828      	subs	r0, #40	; 0x28
    1b3e:	4082      	lsls	r2, r0
    1b40:	2500      	movs	r5, #0
    1b42:	429c      	cmp	r4, r3
    1b44:	dc00      	bgt.n	1b48 <__aeabi_dadd+0x2a0>
    1b46:	e74d      	b.n	19e4 <__aeabi_dadd+0x13c>
    1b48:	493f      	ldr	r1, [pc, #252]	; (1c48 <__aeabi_dadd+0x3a0>)
    1b4a:	1ae4      	subs	r4, r4, r3
    1b4c:	4011      	ands	r1, r2
    1b4e:	e6d4      	b.n	18fa <__aeabi_dadd+0x52>
    1b50:	4302      	orrs	r2, r0
    1b52:	1e50      	subs	r0, r2, #1
    1b54:	4182      	sbcs	r2, r0
    1b56:	b2d3      	uxtb	r3, r2
    1b58:	2200      	movs	r2, #0
    1b5a:	e722      	b.n	19a2 <__aeabi_dadd+0xfa>
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d000      	beq.n	1b62 <__aeabi_dadd+0x2ba>
    1b60:	e0f3      	b.n	1d4a <__aeabi_dadd+0x4a2>
    1b62:	1c63      	adds	r3, r4, #1
    1b64:	469c      	mov	ip, r3
    1b66:	055b      	lsls	r3, r3, #21
    1b68:	0d5b      	lsrs	r3, r3, #21
    1b6a:	2b01      	cmp	r3, #1
    1b6c:	dc00      	bgt.n	1b70 <__aeabi_dadd+0x2c8>
    1b6e:	e09f      	b.n	1cb0 <__aeabi_dadd+0x408>
    1b70:	4b34      	ldr	r3, [pc, #208]	; (1c44 <__aeabi_dadd+0x39c>)
    1b72:	459c      	cmp	ip, r3
    1b74:	d100      	bne.n	1b78 <__aeabi_dadd+0x2d0>
    1b76:	e0c3      	b.n	1d00 <__aeabi_dadd+0x458>
    1b78:	18aa      	adds	r2, r5, r2
    1b7a:	1809      	adds	r1, r1, r0
    1b7c:	42aa      	cmp	r2, r5
    1b7e:	4180      	sbcs	r0, r0
    1b80:	4240      	negs	r0, r0
    1b82:	1841      	adds	r1, r0, r1
    1b84:	07cd      	lsls	r5, r1, #31
    1b86:	0852      	lsrs	r2, r2, #1
    1b88:	4315      	orrs	r5, r2
    1b8a:	0849      	lsrs	r1, r1, #1
    1b8c:	4664      	mov	r4, ip
    1b8e:	e6b4      	b.n	18fa <__aeabi_dadd+0x52>
    1b90:	4b2c      	ldr	r3, [pc, #176]	; (1c44 <__aeabi_dadd+0x39c>)
    1b92:	429c      	cmp	r4, r3
    1b94:	d000      	beq.n	1b98 <__aeabi_dadd+0x2f0>
    1b96:	e6ec      	b.n	1972 <__aeabi_dadd+0xca>
    1b98:	e6af      	b.n	18fa <__aeabi_dadd+0x52>
    1b9a:	0011      	movs	r1, r2
    1b9c:	3c1f      	subs	r4, #31
    1b9e:	40e1      	lsrs	r1, r4
    1ba0:	000c      	movs	r4, r1
    1ba2:	2b20      	cmp	r3, #32
    1ba4:	d100      	bne.n	1ba8 <__aeabi_dadd+0x300>
    1ba6:	e07f      	b.n	1ca8 <__aeabi_dadd+0x400>
    1ba8:	2140      	movs	r1, #64	; 0x40
    1baa:	1acb      	subs	r3, r1, r3
    1bac:	409a      	lsls	r2, r3
    1bae:	4315      	orrs	r5, r2
    1bb0:	1e6a      	subs	r2, r5, #1
    1bb2:	4195      	sbcs	r5, r2
    1bb4:	2100      	movs	r1, #0
    1bb6:	4325      	orrs	r5, r4
    1bb8:	2400      	movs	r4, #0
    1bba:	e72d      	b.n	1a18 <__aeabi_dadd+0x170>
    1bbc:	0033      	movs	r3, r6
    1bbe:	0007      	movs	r7, r0
    1bc0:	3b20      	subs	r3, #32
    1bc2:	40df      	lsrs	r7, r3
    1bc4:	003b      	movs	r3, r7
    1bc6:	2e20      	cmp	r6, #32
    1bc8:	d070      	beq.n	1cac <__aeabi_dadd+0x404>
    1bca:	2740      	movs	r7, #64	; 0x40
    1bcc:	1bbe      	subs	r6, r7, r6
    1bce:	40b0      	lsls	r0, r6
    1bd0:	4302      	orrs	r2, r0
    1bd2:	1e50      	subs	r0, r2, #1
    1bd4:	4182      	sbcs	r2, r0
    1bd6:	4313      	orrs	r3, r2
    1bd8:	2200      	movs	r2, #0
    1bda:	e6e2      	b.n	19a2 <__aeabi_dadd+0xfa>
    1bdc:	2c00      	cmp	r4, #0
    1bde:	d04f      	beq.n	1c80 <__aeabi_dadd+0x3d8>
    1be0:	4c18      	ldr	r4, [pc, #96]	; (1c44 <__aeabi_dadd+0x39c>)
    1be2:	45a4      	cmp	ip, r4
    1be4:	d100      	bne.n	1be8 <__aeabi_dadd+0x340>
    1be6:	e0ab      	b.n	1d40 <__aeabi_dadd+0x498>
    1be8:	2480      	movs	r4, #128	; 0x80
    1bea:	0424      	lsls	r4, r4, #16
    1bec:	4276      	negs	r6, r6
    1bee:	4321      	orrs	r1, r4
    1bf0:	2e38      	cmp	r6, #56	; 0x38
    1bf2:	dd00      	ble.n	1bf6 <__aeabi_dadd+0x34e>
    1bf4:	e0df      	b.n	1db6 <__aeabi_dadd+0x50e>
    1bf6:	2e1f      	cmp	r6, #31
    1bf8:	dd00      	ble.n	1bfc <__aeabi_dadd+0x354>
    1bfa:	e143      	b.n	1e84 <__aeabi_dadd+0x5dc>
    1bfc:	2720      	movs	r7, #32
    1bfe:	1bbc      	subs	r4, r7, r6
    1c00:	46a1      	mov	r9, r4
    1c02:	000c      	movs	r4, r1
    1c04:	464f      	mov	r7, r9
    1c06:	40bc      	lsls	r4, r7
    1c08:	46a0      	mov	r8, r4
    1c0a:	002c      	movs	r4, r5
    1c0c:	4647      	mov	r7, r8
    1c0e:	40f4      	lsrs	r4, r6
    1c10:	433c      	orrs	r4, r7
    1c12:	464f      	mov	r7, r9
    1c14:	40bd      	lsls	r5, r7
    1c16:	1e6f      	subs	r7, r5, #1
    1c18:	41bd      	sbcs	r5, r7
    1c1a:	40f1      	lsrs	r1, r6
    1c1c:	432c      	orrs	r4, r5
    1c1e:	1b15      	subs	r5, r2, r4
    1c20:	42aa      	cmp	r2, r5
    1c22:	4192      	sbcs	r2, r2
    1c24:	1a41      	subs	r1, r0, r1
    1c26:	4252      	negs	r2, r2
    1c28:	1a89      	subs	r1, r1, r2
    1c2a:	4664      	mov	r4, ip
    1c2c:	469a      	mov	sl, r3
    1c2e:	e6bf      	b.n	19b0 <__aeabi_dadd+0x108>
    1c30:	4641      	mov	r1, r8
    1c32:	4645      	mov	r5, r8
    1c34:	4331      	orrs	r1, r6
    1c36:	d000      	beq.n	1c3a <__aeabi_dadd+0x392>
    1c38:	e6be      	b.n	19b8 <__aeabi_dadd+0x110>
    1c3a:	2600      	movs	r6, #0
    1c3c:	2400      	movs	r4, #0
    1c3e:	2500      	movs	r5, #0
    1c40:	e6f2      	b.n	1a28 <__aeabi_dadd+0x180>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	000007ff 	.word	0x000007ff
    1c48:	ff7fffff 	.word	0xff7fffff
    1c4c:	800fffff 	.word	0x800fffff
    1c50:	2b1f      	cmp	r3, #31
    1c52:	dc59      	bgt.n	1d08 <__aeabi_dadd+0x460>
    1c54:	2720      	movs	r7, #32
    1c56:	1aff      	subs	r7, r7, r3
    1c58:	46bc      	mov	ip, r7
    1c5a:	0007      	movs	r7, r0
    1c5c:	4663      	mov	r3, ip
    1c5e:	409f      	lsls	r7, r3
    1c60:	465b      	mov	r3, fp
    1c62:	46b9      	mov	r9, r7
    1c64:	0017      	movs	r7, r2
    1c66:	40df      	lsrs	r7, r3
    1c68:	46b8      	mov	r8, r7
    1c6a:	464f      	mov	r7, r9
    1c6c:	4643      	mov	r3, r8
    1c6e:	431f      	orrs	r7, r3
    1c70:	4663      	mov	r3, ip
    1c72:	409a      	lsls	r2, r3
    1c74:	1e53      	subs	r3, r2, #1
    1c76:	419a      	sbcs	r2, r3
    1c78:	465b      	mov	r3, fp
    1c7a:	433a      	orrs	r2, r7
    1c7c:	40d8      	lsrs	r0, r3
    1c7e:	e6f4      	b.n	1a6a <__aeabi_dadd+0x1c2>
    1c80:	000c      	movs	r4, r1
    1c82:	432c      	orrs	r4, r5
    1c84:	d05c      	beq.n	1d40 <__aeabi_dadd+0x498>
    1c86:	43f6      	mvns	r6, r6
    1c88:	2e00      	cmp	r6, #0
    1c8a:	d155      	bne.n	1d38 <__aeabi_dadd+0x490>
    1c8c:	1b55      	subs	r5, r2, r5
    1c8e:	42aa      	cmp	r2, r5
    1c90:	41a4      	sbcs	r4, r4
    1c92:	1a41      	subs	r1, r0, r1
    1c94:	4264      	negs	r4, r4
    1c96:	1b09      	subs	r1, r1, r4
    1c98:	469a      	mov	sl, r3
    1c9a:	4664      	mov	r4, ip
    1c9c:	e688      	b.n	19b0 <__aeabi_dadd+0x108>
    1c9e:	4f96      	ldr	r7, [pc, #600]	; (1ef8 <__aeabi_dadd+0x650>)
    1ca0:	42bc      	cmp	r4, r7
    1ca2:	d000      	beq.n	1ca6 <__aeabi_dadd+0x3fe>
    1ca4:	e6d8      	b.n	1a58 <__aeabi_dadd+0x1b0>
    1ca6:	e628      	b.n	18fa <__aeabi_dadd+0x52>
    1ca8:	2200      	movs	r2, #0
    1caa:	e780      	b.n	1bae <__aeabi_dadd+0x306>
    1cac:	2000      	movs	r0, #0
    1cae:	e78f      	b.n	1bd0 <__aeabi_dadd+0x328>
    1cb0:	000b      	movs	r3, r1
    1cb2:	432b      	orrs	r3, r5
    1cb4:	2c00      	cmp	r4, #0
    1cb6:	d000      	beq.n	1cba <__aeabi_dadd+0x412>
    1cb8:	e0c2      	b.n	1e40 <__aeabi_dadd+0x598>
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d100      	bne.n	1cc0 <__aeabi_dadd+0x418>
    1cbe:	e101      	b.n	1ec4 <__aeabi_dadd+0x61c>
    1cc0:	0003      	movs	r3, r0
    1cc2:	4313      	orrs	r3, r2
    1cc4:	d100      	bne.n	1cc8 <__aeabi_dadd+0x420>
    1cc6:	e618      	b.n	18fa <__aeabi_dadd+0x52>
    1cc8:	18ab      	adds	r3, r5, r2
    1cca:	42ab      	cmp	r3, r5
    1ccc:	41b6      	sbcs	r6, r6
    1cce:	1809      	adds	r1, r1, r0
    1cd0:	4276      	negs	r6, r6
    1cd2:	1871      	adds	r1, r6, r1
    1cd4:	020a      	lsls	r2, r1, #8
    1cd6:	d400      	bmi.n	1cda <__aeabi_dadd+0x432>
    1cd8:	e109      	b.n	1eee <__aeabi_dadd+0x646>
    1cda:	4a88      	ldr	r2, [pc, #544]	; (1efc <__aeabi_dadd+0x654>)
    1cdc:	001d      	movs	r5, r3
    1cde:	4011      	ands	r1, r2
    1ce0:	4664      	mov	r4, ip
    1ce2:	e60a      	b.n	18fa <__aeabi_dadd+0x52>
    1ce4:	2c00      	cmp	r4, #0
    1ce6:	d15b      	bne.n	1da0 <__aeabi_dadd+0x4f8>
    1ce8:	000e      	movs	r6, r1
    1cea:	432e      	orrs	r6, r5
    1cec:	d000      	beq.n	1cf0 <__aeabi_dadd+0x448>
    1cee:	e08a      	b.n	1e06 <__aeabi_dadd+0x55e>
    1cf0:	0001      	movs	r1, r0
    1cf2:	4311      	orrs	r1, r2
    1cf4:	d100      	bne.n	1cf8 <__aeabi_dadd+0x450>
    1cf6:	e0c2      	b.n	1e7e <__aeabi_dadd+0x5d6>
    1cf8:	0001      	movs	r1, r0
    1cfa:	0015      	movs	r5, r2
    1cfc:	469a      	mov	sl, r3
    1cfe:	e5fc      	b.n	18fa <__aeabi_dadd+0x52>
    1d00:	4664      	mov	r4, ip
    1d02:	2100      	movs	r1, #0
    1d04:	2500      	movs	r5, #0
    1d06:	e68f      	b.n	1a28 <__aeabi_dadd+0x180>
    1d08:	2320      	movs	r3, #32
    1d0a:	425b      	negs	r3, r3
    1d0c:	469c      	mov	ip, r3
    1d0e:	44dc      	add	ip, fp
    1d10:	4663      	mov	r3, ip
    1d12:	0007      	movs	r7, r0
    1d14:	40df      	lsrs	r7, r3
    1d16:	465b      	mov	r3, fp
    1d18:	46bc      	mov	ip, r7
    1d1a:	2b20      	cmp	r3, #32
    1d1c:	d100      	bne.n	1d20 <__aeabi_dadd+0x478>
    1d1e:	e0ac      	b.n	1e7a <__aeabi_dadd+0x5d2>
    1d20:	2340      	movs	r3, #64	; 0x40
    1d22:	465f      	mov	r7, fp
    1d24:	1bdb      	subs	r3, r3, r7
    1d26:	4098      	lsls	r0, r3
    1d28:	4302      	orrs	r2, r0
    1d2a:	1e50      	subs	r0, r2, #1
    1d2c:	4182      	sbcs	r2, r0
    1d2e:	4663      	mov	r3, ip
    1d30:	4313      	orrs	r3, r2
    1d32:	001a      	movs	r2, r3
    1d34:	2000      	movs	r0, #0
    1d36:	e698      	b.n	1a6a <__aeabi_dadd+0x1c2>
    1d38:	4c6f      	ldr	r4, [pc, #444]	; (1ef8 <__aeabi_dadd+0x650>)
    1d3a:	45a4      	cmp	ip, r4
    1d3c:	d000      	beq.n	1d40 <__aeabi_dadd+0x498>
    1d3e:	e757      	b.n	1bf0 <__aeabi_dadd+0x348>
    1d40:	0001      	movs	r1, r0
    1d42:	0015      	movs	r5, r2
    1d44:	4664      	mov	r4, ip
    1d46:	469a      	mov	sl, r3
    1d48:	e5d7      	b.n	18fa <__aeabi_dadd+0x52>
    1d4a:	2c00      	cmp	r4, #0
    1d4c:	d139      	bne.n	1dc2 <__aeabi_dadd+0x51a>
    1d4e:	000c      	movs	r4, r1
    1d50:	432c      	orrs	r4, r5
    1d52:	d06e      	beq.n	1e32 <__aeabi_dadd+0x58a>
    1d54:	43db      	mvns	r3, r3
    1d56:	2b00      	cmp	r3, #0
    1d58:	d01a      	beq.n	1d90 <__aeabi_dadd+0x4e8>
    1d5a:	4c67      	ldr	r4, [pc, #412]	; (1ef8 <__aeabi_dadd+0x650>)
    1d5c:	45a4      	cmp	ip, r4
    1d5e:	d068      	beq.n	1e32 <__aeabi_dadd+0x58a>
    1d60:	2b38      	cmp	r3, #56	; 0x38
    1d62:	dd00      	ble.n	1d66 <__aeabi_dadd+0x4be>
    1d64:	e0a4      	b.n	1eb0 <__aeabi_dadd+0x608>
    1d66:	2b1f      	cmp	r3, #31
    1d68:	dd00      	ble.n	1d6c <__aeabi_dadd+0x4c4>
    1d6a:	e0ae      	b.n	1eca <__aeabi_dadd+0x622>
    1d6c:	2420      	movs	r4, #32
    1d6e:	000f      	movs	r7, r1
    1d70:	1ae4      	subs	r4, r4, r3
    1d72:	40a7      	lsls	r7, r4
    1d74:	46b9      	mov	r9, r7
    1d76:	002f      	movs	r7, r5
    1d78:	40df      	lsrs	r7, r3
    1d7a:	46b8      	mov	r8, r7
    1d7c:	46a3      	mov	fp, r4
    1d7e:	464f      	mov	r7, r9
    1d80:	4644      	mov	r4, r8
    1d82:	4327      	orrs	r7, r4
    1d84:	465c      	mov	r4, fp
    1d86:	40a5      	lsls	r5, r4
    1d88:	1e6c      	subs	r4, r5, #1
    1d8a:	41a5      	sbcs	r5, r4
    1d8c:	40d9      	lsrs	r1, r3
    1d8e:	433d      	orrs	r5, r7
    1d90:	18ad      	adds	r5, r5, r2
    1d92:	4295      	cmp	r5, r2
    1d94:	419b      	sbcs	r3, r3
    1d96:	1809      	adds	r1, r1, r0
    1d98:	425b      	negs	r3, r3
    1d9a:	1859      	adds	r1, r3, r1
    1d9c:	4664      	mov	r4, ip
    1d9e:	e66b      	b.n	1a78 <__aeabi_dadd+0x1d0>
    1da0:	000c      	movs	r4, r1
    1da2:	432c      	orrs	r4, r5
    1da4:	d115      	bne.n	1dd2 <__aeabi_dadd+0x52a>
    1da6:	0001      	movs	r1, r0
    1da8:	4311      	orrs	r1, r2
    1daa:	d07b      	beq.n	1ea4 <__aeabi_dadd+0x5fc>
    1dac:	0001      	movs	r1, r0
    1dae:	0015      	movs	r5, r2
    1db0:	469a      	mov	sl, r3
    1db2:	4c51      	ldr	r4, [pc, #324]	; (1ef8 <__aeabi_dadd+0x650>)
    1db4:	e5a1      	b.n	18fa <__aeabi_dadd+0x52>
    1db6:	430d      	orrs	r5, r1
    1db8:	1e69      	subs	r1, r5, #1
    1dba:	418d      	sbcs	r5, r1
    1dbc:	2100      	movs	r1, #0
    1dbe:	b2ec      	uxtb	r4, r5
    1dc0:	e72d      	b.n	1c1e <__aeabi_dadd+0x376>
    1dc2:	4c4d      	ldr	r4, [pc, #308]	; (1ef8 <__aeabi_dadd+0x650>)
    1dc4:	45a4      	cmp	ip, r4
    1dc6:	d034      	beq.n	1e32 <__aeabi_dadd+0x58a>
    1dc8:	2480      	movs	r4, #128	; 0x80
    1dca:	0424      	lsls	r4, r4, #16
    1dcc:	425b      	negs	r3, r3
    1dce:	4321      	orrs	r1, r4
    1dd0:	e7c6      	b.n	1d60 <__aeabi_dadd+0x4b8>
    1dd2:	0004      	movs	r4, r0
    1dd4:	4314      	orrs	r4, r2
    1dd6:	d04e      	beq.n	1e76 <__aeabi_dadd+0x5ce>
    1dd8:	08ed      	lsrs	r5, r5, #3
    1dda:	074c      	lsls	r4, r1, #29
    1ddc:	432c      	orrs	r4, r5
    1dde:	2580      	movs	r5, #128	; 0x80
    1de0:	08c9      	lsrs	r1, r1, #3
    1de2:	032d      	lsls	r5, r5, #12
    1de4:	4229      	tst	r1, r5
    1de6:	d008      	beq.n	1dfa <__aeabi_dadd+0x552>
    1de8:	08c6      	lsrs	r6, r0, #3
    1dea:	422e      	tst	r6, r5
    1dec:	d105      	bne.n	1dfa <__aeabi_dadd+0x552>
    1dee:	08d2      	lsrs	r2, r2, #3
    1df0:	0741      	lsls	r1, r0, #29
    1df2:	4311      	orrs	r1, r2
    1df4:	000c      	movs	r4, r1
    1df6:	469a      	mov	sl, r3
    1df8:	0031      	movs	r1, r6
    1dfa:	0f62      	lsrs	r2, r4, #29
    1dfc:	00c9      	lsls	r1, r1, #3
    1dfe:	00e5      	lsls	r5, r4, #3
    1e00:	4311      	orrs	r1, r2
    1e02:	4c3d      	ldr	r4, [pc, #244]	; (1ef8 <__aeabi_dadd+0x650>)
    1e04:	e579      	b.n	18fa <__aeabi_dadd+0x52>
    1e06:	0006      	movs	r6, r0
    1e08:	4316      	orrs	r6, r2
    1e0a:	d100      	bne.n	1e0e <__aeabi_dadd+0x566>
    1e0c:	e575      	b.n	18fa <__aeabi_dadd+0x52>
    1e0e:	1aae      	subs	r6, r5, r2
    1e10:	46b0      	mov	r8, r6
    1e12:	4545      	cmp	r5, r8
    1e14:	41bf      	sbcs	r7, r7
    1e16:	1a0e      	subs	r6, r1, r0
    1e18:	427f      	negs	r7, r7
    1e1a:	1bf6      	subs	r6, r6, r7
    1e1c:	0237      	lsls	r7, r6, #8
    1e1e:	d400      	bmi.n	1e22 <__aeabi_dadd+0x57a>
    1e20:	e5f4      	b.n	1a0c <__aeabi_dadd+0x164>
    1e22:	1b55      	subs	r5, r2, r5
    1e24:	42aa      	cmp	r2, r5
    1e26:	41b6      	sbcs	r6, r6
    1e28:	1a41      	subs	r1, r0, r1
    1e2a:	4276      	negs	r6, r6
    1e2c:	1b89      	subs	r1, r1, r6
    1e2e:	469a      	mov	sl, r3
    1e30:	e563      	b.n	18fa <__aeabi_dadd+0x52>
    1e32:	0001      	movs	r1, r0
    1e34:	0015      	movs	r5, r2
    1e36:	4664      	mov	r4, ip
    1e38:	e55f      	b.n	18fa <__aeabi_dadd+0x52>
    1e3a:	2200      	movs	r2, #0
    1e3c:	2500      	movs	r5, #0
    1e3e:	e57b      	b.n	1938 <__aeabi_dadd+0x90>
    1e40:	2b00      	cmp	r3, #0
    1e42:	d03b      	beq.n	1ebc <__aeabi_dadd+0x614>
    1e44:	0003      	movs	r3, r0
    1e46:	4313      	orrs	r3, r2
    1e48:	d015      	beq.n	1e76 <__aeabi_dadd+0x5ce>
    1e4a:	08ed      	lsrs	r5, r5, #3
    1e4c:	074b      	lsls	r3, r1, #29
    1e4e:	432b      	orrs	r3, r5
    1e50:	2580      	movs	r5, #128	; 0x80
    1e52:	08c9      	lsrs	r1, r1, #3
    1e54:	032d      	lsls	r5, r5, #12
    1e56:	4229      	tst	r1, r5
    1e58:	d007      	beq.n	1e6a <__aeabi_dadd+0x5c2>
    1e5a:	08c4      	lsrs	r4, r0, #3
    1e5c:	422c      	tst	r4, r5
    1e5e:	d104      	bne.n	1e6a <__aeabi_dadd+0x5c2>
    1e60:	0741      	lsls	r1, r0, #29
    1e62:	000b      	movs	r3, r1
    1e64:	0021      	movs	r1, r4
    1e66:	08d2      	lsrs	r2, r2, #3
    1e68:	4313      	orrs	r3, r2
    1e6a:	00c9      	lsls	r1, r1, #3
    1e6c:	0f5a      	lsrs	r2, r3, #29
    1e6e:	4311      	orrs	r1, r2
    1e70:	00dd      	lsls	r5, r3, #3
    1e72:	4c21      	ldr	r4, [pc, #132]	; (1ef8 <__aeabi_dadd+0x650>)
    1e74:	e541      	b.n	18fa <__aeabi_dadd+0x52>
    1e76:	4c20      	ldr	r4, [pc, #128]	; (1ef8 <__aeabi_dadd+0x650>)
    1e78:	e53f      	b.n	18fa <__aeabi_dadd+0x52>
    1e7a:	2000      	movs	r0, #0
    1e7c:	e754      	b.n	1d28 <__aeabi_dadd+0x480>
    1e7e:	2600      	movs	r6, #0
    1e80:	2500      	movs	r5, #0
    1e82:	e5d1      	b.n	1a28 <__aeabi_dadd+0x180>
    1e84:	0034      	movs	r4, r6
    1e86:	000f      	movs	r7, r1
    1e88:	3c20      	subs	r4, #32
    1e8a:	40e7      	lsrs	r7, r4
    1e8c:	003c      	movs	r4, r7
    1e8e:	2e20      	cmp	r6, #32
    1e90:	d02b      	beq.n	1eea <__aeabi_dadd+0x642>
    1e92:	2740      	movs	r7, #64	; 0x40
    1e94:	1bbe      	subs	r6, r7, r6
    1e96:	40b1      	lsls	r1, r6
    1e98:	430d      	orrs	r5, r1
    1e9a:	1e69      	subs	r1, r5, #1
    1e9c:	418d      	sbcs	r5, r1
    1e9e:	2100      	movs	r1, #0
    1ea0:	432c      	orrs	r4, r5
    1ea2:	e6bc      	b.n	1c1e <__aeabi_dadd+0x376>
    1ea4:	2180      	movs	r1, #128	; 0x80
    1ea6:	2600      	movs	r6, #0
    1ea8:	0309      	lsls	r1, r1, #12
    1eaa:	4c13      	ldr	r4, [pc, #76]	; (1ef8 <__aeabi_dadd+0x650>)
    1eac:	2500      	movs	r5, #0
    1eae:	e5bb      	b.n	1a28 <__aeabi_dadd+0x180>
    1eb0:	430d      	orrs	r5, r1
    1eb2:	1e69      	subs	r1, r5, #1
    1eb4:	418d      	sbcs	r5, r1
    1eb6:	2100      	movs	r1, #0
    1eb8:	b2ed      	uxtb	r5, r5
    1eba:	e769      	b.n	1d90 <__aeabi_dadd+0x4e8>
    1ebc:	0001      	movs	r1, r0
    1ebe:	0015      	movs	r5, r2
    1ec0:	4c0d      	ldr	r4, [pc, #52]	; (1ef8 <__aeabi_dadd+0x650>)
    1ec2:	e51a      	b.n	18fa <__aeabi_dadd+0x52>
    1ec4:	0001      	movs	r1, r0
    1ec6:	0015      	movs	r5, r2
    1ec8:	e517      	b.n	18fa <__aeabi_dadd+0x52>
    1eca:	001c      	movs	r4, r3
    1ecc:	000f      	movs	r7, r1
    1ece:	3c20      	subs	r4, #32
    1ed0:	40e7      	lsrs	r7, r4
    1ed2:	003c      	movs	r4, r7
    1ed4:	2b20      	cmp	r3, #32
    1ed6:	d00c      	beq.n	1ef2 <__aeabi_dadd+0x64a>
    1ed8:	2740      	movs	r7, #64	; 0x40
    1eda:	1afb      	subs	r3, r7, r3
    1edc:	4099      	lsls	r1, r3
    1ede:	430d      	orrs	r5, r1
    1ee0:	1e69      	subs	r1, r5, #1
    1ee2:	418d      	sbcs	r5, r1
    1ee4:	2100      	movs	r1, #0
    1ee6:	4325      	orrs	r5, r4
    1ee8:	e752      	b.n	1d90 <__aeabi_dadd+0x4e8>
    1eea:	2100      	movs	r1, #0
    1eec:	e7d4      	b.n	1e98 <__aeabi_dadd+0x5f0>
    1eee:	001d      	movs	r5, r3
    1ef0:	e592      	b.n	1a18 <__aeabi_dadd+0x170>
    1ef2:	2100      	movs	r1, #0
    1ef4:	e7f3      	b.n	1ede <__aeabi_dadd+0x636>
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	000007ff 	.word	0x000007ff
    1efc:	ff7fffff 	.word	0xff7fffff

00001f00 <__eqdf2>:
    1f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f02:	465f      	mov	r7, fp
    1f04:	4656      	mov	r6, sl
    1f06:	464d      	mov	r5, r9
    1f08:	4644      	mov	r4, r8
    1f0a:	b4f0      	push	{r4, r5, r6, r7}
    1f0c:	031f      	lsls	r7, r3, #12
    1f0e:	005c      	lsls	r4, r3, #1
    1f10:	0fdb      	lsrs	r3, r3, #31
    1f12:	469a      	mov	sl, r3
    1f14:	4b19      	ldr	r3, [pc, #100]	; (1f7c <__eqdf2+0x7c>)
    1f16:	030e      	lsls	r6, r1, #12
    1f18:	004d      	lsls	r5, r1, #1
    1f1a:	0fc9      	lsrs	r1, r1, #31
    1f1c:	4680      	mov	r8, r0
    1f1e:	0b36      	lsrs	r6, r6, #12
    1f20:	0d6d      	lsrs	r5, r5, #21
    1f22:	468b      	mov	fp, r1
    1f24:	4691      	mov	r9, r2
    1f26:	0b3f      	lsrs	r7, r7, #12
    1f28:	0d64      	lsrs	r4, r4, #21
    1f2a:	429d      	cmp	r5, r3
    1f2c:	d019      	beq.n	1f62 <__eqdf2+0x62>
    1f2e:	4b13      	ldr	r3, [pc, #76]	; (1f7c <__eqdf2+0x7c>)
    1f30:	429c      	cmp	r4, r3
    1f32:	d01b      	beq.n	1f6c <__eqdf2+0x6c>
    1f34:	2301      	movs	r3, #1
    1f36:	42a5      	cmp	r5, r4
    1f38:	d006      	beq.n	1f48 <__eqdf2+0x48>
    1f3a:	0018      	movs	r0, r3
    1f3c:	bc3c      	pop	{r2, r3, r4, r5}
    1f3e:	4690      	mov	r8, r2
    1f40:	4699      	mov	r9, r3
    1f42:	46a2      	mov	sl, r4
    1f44:	46ab      	mov	fp, r5
    1f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f48:	42be      	cmp	r6, r7
    1f4a:	d1f6      	bne.n	1f3a <__eqdf2+0x3a>
    1f4c:	45c8      	cmp	r8, r9
    1f4e:	d1f4      	bne.n	1f3a <__eqdf2+0x3a>
    1f50:	45d3      	cmp	fp, sl
    1f52:	d010      	beq.n	1f76 <__eqdf2+0x76>
    1f54:	2d00      	cmp	r5, #0
    1f56:	d1f0      	bne.n	1f3a <__eqdf2+0x3a>
    1f58:	4330      	orrs	r0, r6
    1f5a:	0003      	movs	r3, r0
    1f5c:	1e5a      	subs	r2, r3, #1
    1f5e:	4193      	sbcs	r3, r2
    1f60:	e7eb      	b.n	1f3a <__eqdf2+0x3a>
    1f62:	0031      	movs	r1, r6
    1f64:	2301      	movs	r3, #1
    1f66:	4301      	orrs	r1, r0
    1f68:	d1e7      	bne.n	1f3a <__eqdf2+0x3a>
    1f6a:	e7e0      	b.n	1f2e <__eqdf2+0x2e>
    1f6c:	433a      	orrs	r2, r7
    1f6e:	2301      	movs	r3, #1
    1f70:	2a00      	cmp	r2, #0
    1f72:	d1e2      	bne.n	1f3a <__eqdf2+0x3a>
    1f74:	e7de      	b.n	1f34 <__eqdf2+0x34>
    1f76:	2300      	movs	r3, #0
    1f78:	e7df      	b.n	1f3a <__eqdf2+0x3a>
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	000007ff 	.word	0x000007ff

00001f80 <__gedf2>:
    1f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f82:	465f      	mov	r7, fp
    1f84:	4644      	mov	r4, r8
    1f86:	4656      	mov	r6, sl
    1f88:	464d      	mov	r5, r9
    1f8a:	b4f0      	push	{r4, r5, r6, r7}
    1f8c:	031f      	lsls	r7, r3, #12
    1f8e:	0b3c      	lsrs	r4, r7, #12
    1f90:	4f2c      	ldr	r7, [pc, #176]	; (2044 <STACK_SIZE+0x44>)
    1f92:	030e      	lsls	r6, r1, #12
    1f94:	004d      	lsls	r5, r1, #1
    1f96:	46a3      	mov	fp, r4
    1f98:	005c      	lsls	r4, r3, #1
    1f9a:	4684      	mov	ip, r0
    1f9c:	0b36      	lsrs	r6, r6, #12
    1f9e:	0d6d      	lsrs	r5, r5, #21
    1fa0:	0fc9      	lsrs	r1, r1, #31
    1fa2:	4690      	mov	r8, r2
    1fa4:	0d64      	lsrs	r4, r4, #21
    1fa6:	0fdb      	lsrs	r3, r3, #31
    1fa8:	42bd      	cmp	r5, r7
    1faa:	d02b      	beq.n	2004 <STACK_SIZE+0x4>
    1fac:	4f25      	ldr	r7, [pc, #148]	; (2044 <STACK_SIZE+0x44>)
    1fae:	42bc      	cmp	r4, r7
    1fb0:	d02e      	beq.n	2010 <STACK_SIZE+0x10>
    1fb2:	2d00      	cmp	r5, #0
    1fb4:	d10e      	bne.n	1fd4 <__gedf2+0x54>
    1fb6:	4330      	orrs	r0, r6
    1fb8:	0007      	movs	r7, r0
    1fba:	4681      	mov	r9, r0
    1fbc:	4278      	negs	r0, r7
    1fbe:	4178      	adcs	r0, r7
    1fc0:	2c00      	cmp	r4, #0
    1fc2:	d117      	bne.n	1ff4 <__gedf2+0x74>
    1fc4:	465f      	mov	r7, fp
    1fc6:	433a      	orrs	r2, r7
    1fc8:	d114      	bne.n	1ff4 <__gedf2+0x74>
    1fca:	464b      	mov	r3, r9
    1fcc:	2000      	movs	r0, #0
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d00a      	beq.n	1fe8 <__gedf2+0x68>
    1fd2:	e006      	b.n	1fe2 <__gedf2+0x62>
    1fd4:	2c00      	cmp	r4, #0
    1fd6:	d102      	bne.n	1fde <__gedf2+0x5e>
    1fd8:	4658      	mov	r0, fp
    1fda:	4302      	orrs	r2, r0
    1fdc:	d001      	beq.n	1fe2 <__gedf2+0x62>
    1fde:	4299      	cmp	r1, r3
    1fe0:	d01a      	beq.n	2018 <STACK_SIZE+0x18>
    1fe2:	2301      	movs	r3, #1
    1fe4:	4248      	negs	r0, r1
    1fe6:	4318      	orrs	r0, r3
    1fe8:	bc3c      	pop	{r2, r3, r4, r5}
    1fea:	4690      	mov	r8, r2
    1fec:	4699      	mov	r9, r3
    1fee:	46a2      	mov	sl, r4
    1ff0:	46ab      	mov	fp, r5
    1ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d0f2      	beq.n	1fde <__gedf2+0x5e>
    1ff8:	4258      	negs	r0, r3
    1ffa:	4158      	adcs	r0, r3
    1ffc:	2201      	movs	r2, #1
    1ffe:	4240      	negs	r0, r0
    2000:	4310      	orrs	r0, r2
    2002:	e7f1      	b.n	1fe8 <__gedf2+0x68>
    2004:	0037      	movs	r7, r6
    2006:	4307      	orrs	r7, r0
    2008:	d0d0      	beq.n	1fac <__gedf2+0x2c>
    200a:	2002      	movs	r0, #2
    200c:	4240      	negs	r0, r0
    200e:	e7eb      	b.n	1fe8 <__gedf2+0x68>
    2010:	465f      	mov	r7, fp
    2012:	4317      	orrs	r7, r2
    2014:	d0cd      	beq.n	1fb2 <__gedf2+0x32>
    2016:	e7f8      	b.n	200a <STACK_SIZE+0xa>
    2018:	42a5      	cmp	r5, r4
    201a:	dce2      	bgt.n	1fe2 <__gedf2+0x62>
    201c:	db05      	blt.n	202a <STACK_SIZE+0x2a>
    201e:	455e      	cmp	r6, fp
    2020:	d8df      	bhi.n	1fe2 <__gedf2+0x62>
    2022:	d008      	beq.n	2036 <STACK_SIZE+0x36>
    2024:	2000      	movs	r0, #0
    2026:	455e      	cmp	r6, fp
    2028:	d2de      	bcs.n	1fe8 <__gedf2+0x68>
    202a:	4248      	negs	r0, r1
    202c:	4148      	adcs	r0, r1
    202e:	2301      	movs	r3, #1
    2030:	4240      	negs	r0, r0
    2032:	4318      	orrs	r0, r3
    2034:	e7d8      	b.n	1fe8 <__gedf2+0x68>
    2036:	45c4      	cmp	ip, r8
    2038:	d8d3      	bhi.n	1fe2 <__gedf2+0x62>
    203a:	2000      	movs	r0, #0
    203c:	45c4      	cmp	ip, r8
    203e:	d3f4      	bcc.n	202a <STACK_SIZE+0x2a>
    2040:	e7d2      	b.n	1fe8 <__gedf2+0x68>
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	000007ff 	.word	0x000007ff

00002048 <__ledf2>:
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	465f      	mov	r7, fp
    204c:	464d      	mov	r5, r9
    204e:	4644      	mov	r4, r8
    2050:	4656      	mov	r6, sl
    2052:	b4f0      	push	{r4, r5, r6, r7}
    2054:	031c      	lsls	r4, r3, #12
    2056:	0b24      	lsrs	r4, r4, #12
    2058:	46a4      	mov	ip, r4
    205a:	4c2f      	ldr	r4, [pc, #188]	; (2118 <__ledf2+0xd0>)
    205c:	030f      	lsls	r7, r1, #12
    205e:	004d      	lsls	r5, r1, #1
    2060:	005e      	lsls	r6, r3, #1
    2062:	0fc9      	lsrs	r1, r1, #31
    2064:	4680      	mov	r8, r0
    2066:	0b3f      	lsrs	r7, r7, #12
    2068:	0d6d      	lsrs	r5, r5, #21
    206a:	468b      	mov	fp, r1
    206c:	4691      	mov	r9, r2
    206e:	0d76      	lsrs	r6, r6, #21
    2070:	0fdb      	lsrs	r3, r3, #31
    2072:	42a5      	cmp	r5, r4
    2074:	d020      	beq.n	20b8 <__ledf2+0x70>
    2076:	4c28      	ldr	r4, [pc, #160]	; (2118 <__ledf2+0xd0>)
    2078:	42a6      	cmp	r6, r4
    207a:	d022      	beq.n	20c2 <__ledf2+0x7a>
    207c:	2d00      	cmp	r5, #0
    207e:	d112      	bne.n	20a6 <__ledf2+0x5e>
    2080:	4338      	orrs	r0, r7
    2082:	4244      	negs	r4, r0
    2084:	4144      	adcs	r4, r0
    2086:	2e00      	cmp	r6, #0
    2088:	d020      	beq.n	20cc <__ledf2+0x84>
    208a:	2c00      	cmp	r4, #0
    208c:	d00d      	beq.n	20aa <__ledf2+0x62>
    208e:	425c      	negs	r4, r3
    2090:	4163      	adcs	r3, r4
    2092:	2401      	movs	r4, #1
    2094:	425b      	negs	r3, r3
    2096:	431c      	orrs	r4, r3
    2098:	0020      	movs	r0, r4
    209a:	bc3c      	pop	{r2, r3, r4, r5}
    209c:	4690      	mov	r8, r2
    209e:	4699      	mov	r9, r3
    20a0:	46a2      	mov	sl, r4
    20a2:	46ab      	mov	fp, r5
    20a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a6:	2e00      	cmp	r6, #0
    20a8:	d017      	beq.n	20da <__ledf2+0x92>
    20aa:	455b      	cmp	r3, fp
    20ac:	d019      	beq.n	20e2 <__ledf2+0x9a>
    20ae:	465b      	mov	r3, fp
    20b0:	425c      	negs	r4, r3
    20b2:	2301      	movs	r3, #1
    20b4:	431c      	orrs	r4, r3
    20b6:	e7ef      	b.n	2098 <__ledf2+0x50>
    20b8:	0039      	movs	r1, r7
    20ba:	2402      	movs	r4, #2
    20bc:	4301      	orrs	r1, r0
    20be:	d1eb      	bne.n	2098 <__ledf2+0x50>
    20c0:	e7d9      	b.n	2076 <__ledf2+0x2e>
    20c2:	4661      	mov	r1, ip
    20c4:	2402      	movs	r4, #2
    20c6:	4311      	orrs	r1, r2
    20c8:	d1e6      	bne.n	2098 <__ledf2+0x50>
    20ca:	e7d7      	b.n	207c <__ledf2+0x34>
    20cc:	4661      	mov	r1, ip
    20ce:	430a      	orrs	r2, r1
    20d0:	d1db      	bne.n	208a <__ledf2+0x42>
    20d2:	2400      	movs	r4, #0
    20d4:	2800      	cmp	r0, #0
    20d6:	d0df      	beq.n	2098 <__ledf2+0x50>
    20d8:	e7e9      	b.n	20ae <__ledf2+0x66>
    20da:	4661      	mov	r1, ip
    20dc:	430a      	orrs	r2, r1
    20de:	d1e4      	bne.n	20aa <__ledf2+0x62>
    20e0:	e7e5      	b.n	20ae <__ledf2+0x66>
    20e2:	42b5      	cmp	r5, r6
    20e4:	dd03      	ble.n	20ee <__ledf2+0xa6>
    20e6:	2201      	movs	r2, #1
    20e8:	425c      	negs	r4, r3
    20ea:	4314      	orrs	r4, r2
    20ec:	e7d4      	b.n	2098 <__ledf2+0x50>
    20ee:	42b5      	cmp	r5, r6
    20f0:	dbcd      	blt.n	208e <__ledf2+0x46>
    20f2:	4567      	cmp	r7, ip
    20f4:	d8db      	bhi.n	20ae <__ledf2+0x66>
    20f6:	d009      	beq.n	210c <__ledf2+0xc4>
    20f8:	2400      	movs	r4, #0
    20fa:	4567      	cmp	r7, ip
    20fc:	d2cc      	bcs.n	2098 <__ledf2+0x50>
    20fe:	4659      	mov	r1, fp
    2100:	424c      	negs	r4, r1
    2102:	4161      	adcs	r1, r4
    2104:	2401      	movs	r4, #1
    2106:	4249      	negs	r1, r1
    2108:	430c      	orrs	r4, r1
    210a:	e7c5      	b.n	2098 <__ledf2+0x50>
    210c:	45c8      	cmp	r8, r9
    210e:	d8ce      	bhi.n	20ae <__ledf2+0x66>
    2110:	2400      	movs	r4, #0
    2112:	45c8      	cmp	r8, r9
    2114:	d3f3      	bcc.n	20fe <__ledf2+0xb6>
    2116:	e7bf      	b.n	2098 <__ledf2+0x50>
    2118:	000007ff 	.word	0x000007ff

0000211c <__aeabi_dmul>:
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    211e:	465f      	mov	r7, fp
    2120:	4656      	mov	r6, sl
    2122:	464d      	mov	r5, r9
    2124:	4644      	mov	r4, r8
    2126:	b4f0      	push	{r4, r5, r6, r7}
    2128:	030d      	lsls	r5, r1, #12
    212a:	4699      	mov	r9, r3
    212c:	004e      	lsls	r6, r1, #1
    212e:	0b2b      	lsrs	r3, r5, #12
    2130:	b087      	sub	sp, #28
    2132:	0007      	movs	r7, r0
    2134:	4692      	mov	sl, r2
    2136:	4680      	mov	r8, r0
    2138:	469b      	mov	fp, r3
    213a:	0d76      	lsrs	r6, r6, #21
    213c:	0fcc      	lsrs	r4, r1, #31
    213e:	2e00      	cmp	r6, #0
    2140:	d069      	beq.n	2216 <__aeabi_dmul+0xfa>
    2142:	4b6d      	ldr	r3, [pc, #436]	; (22f8 <__aeabi_dmul+0x1dc>)
    2144:	429e      	cmp	r6, r3
    2146:	d035      	beq.n	21b4 <__aeabi_dmul+0x98>
    2148:	465b      	mov	r3, fp
    214a:	2280      	movs	r2, #128	; 0x80
    214c:	00dd      	lsls	r5, r3, #3
    214e:	0412      	lsls	r2, r2, #16
    2150:	0f43      	lsrs	r3, r0, #29
    2152:	4313      	orrs	r3, r2
    2154:	432b      	orrs	r3, r5
    2156:	469b      	mov	fp, r3
    2158:	00c3      	lsls	r3, r0, #3
    215a:	4698      	mov	r8, r3
    215c:	4b67      	ldr	r3, [pc, #412]	; (22fc <__aeabi_dmul+0x1e0>)
    215e:	2700      	movs	r7, #0
    2160:	469c      	mov	ip, r3
    2162:	2300      	movs	r3, #0
    2164:	4466      	add	r6, ip
    2166:	9301      	str	r3, [sp, #4]
    2168:	464a      	mov	r2, r9
    216a:	0315      	lsls	r5, r2, #12
    216c:	0050      	lsls	r0, r2, #1
    216e:	0fd2      	lsrs	r2, r2, #31
    2170:	4653      	mov	r3, sl
    2172:	0b2d      	lsrs	r5, r5, #12
    2174:	0d40      	lsrs	r0, r0, #21
    2176:	4691      	mov	r9, r2
    2178:	d100      	bne.n	217c <__aeabi_dmul+0x60>
    217a:	e076      	b.n	226a <__aeabi_dmul+0x14e>
    217c:	4a5e      	ldr	r2, [pc, #376]	; (22f8 <__aeabi_dmul+0x1dc>)
    217e:	4290      	cmp	r0, r2
    2180:	d06c      	beq.n	225c <__aeabi_dmul+0x140>
    2182:	2280      	movs	r2, #128	; 0x80
    2184:	0f5b      	lsrs	r3, r3, #29
    2186:	0412      	lsls	r2, r2, #16
    2188:	4313      	orrs	r3, r2
    218a:	4a5c      	ldr	r2, [pc, #368]	; (22fc <__aeabi_dmul+0x1e0>)
    218c:	00ed      	lsls	r5, r5, #3
    218e:	4694      	mov	ip, r2
    2190:	431d      	orrs	r5, r3
    2192:	4653      	mov	r3, sl
    2194:	2200      	movs	r2, #0
    2196:	00db      	lsls	r3, r3, #3
    2198:	4460      	add	r0, ip
    219a:	4649      	mov	r1, r9
    219c:	1836      	adds	r6, r6, r0
    219e:	1c70      	adds	r0, r6, #1
    21a0:	4061      	eors	r1, r4
    21a2:	9002      	str	r0, [sp, #8]
    21a4:	4317      	orrs	r7, r2
    21a6:	2f0f      	cmp	r7, #15
    21a8:	d900      	bls.n	21ac <__aeabi_dmul+0x90>
    21aa:	e0af      	b.n	230c <__aeabi_dmul+0x1f0>
    21ac:	4854      	ldr	r0, [pc, #336]	; (2300 <__aeabi_dmul+0x1e4>)
    21ae:	00bf      	lsls	r7, r7, #2
    21b0:	59c7      	ldr	r7, [r0, r7]
    21b2:	46bf      	mov	pc, r7
    21b4:	465b      	mov	r3, fp
    21b6:	431f      	orrs	r7, r3
    21b8:	d000      	beq.n	21bc <__aeabi_dmul+0xa0>
    21ba:	e088      	b.n	22ce <__aeabi_dmul+0x1b2>
    21bc:	2300      	movs	r3, #0
    21be:	469b      	mov	fp, r3
    21c0:	4698      	mov	r8, r3
    21c2:	3302      	adds	r3, #2
    21c4:	2708      	movs	r7, #8
    21c6:	9301      	str	r3, [sp, #4]
    21c8:	e7ce      	b.n	2168 <__aeabi_dmul+0x4c>
    21ca:	4649      	mov	r1, r9
    21cc:	2a02      	cmp	r2, #2
    21ce:	d06a      	beq.n	22a6 <__aeabi_dmul+0x18a>
    21d0:	2a03      	cmp	r2, #3
    21d2:	d100      	bne.n	21d6 <__aeabi_dmul+0xba>
    21d4:	e209      	b.n	25ea <__aeabi_dmul+0x4ce>
    21d6:	2a01      	cmp	r2, #1
    21d8:	d000      	beq.n	21dc <__aeabi_dmul+0xc0>
    21da:	e1bb      	b.n	2554 <__aeabi_dmul+0x438>
    21dc:	4011      	ands	r1, r2
    21de:	2200      	movs	r2, #0
    21e0:	2300      	movs	r3, #0
    21e2:	2500      	movs	r5, #0
    21e4:	4690      	mov	r8, r2
    21e6:	b2cc      	uxtb	r4, r1
    21e8:	2100      	movs	r1, #0
    21ea:	032d      	lsls	r5, r5, #12
    21ec:	0d0a      	lsrs	r2, r1, #20
    21ee:	0512      	lsls	r2, r2, #20
    21f0:	0b2d      	lsrs	r5, r5, #12
    21f2:	4315      	orrs	r5, r2
    21f4:	4a43      	ldr	r2, [pc, #268]	; (2304 <__aeabi_dmul+0x1e8>)
    21f6:	051b      	lsls	r3, r3, #20
    21f8:	4015      	ands	r5, r2
    21fa:	431d      	orrs	r5, r3
    21fc:	006d      	lsls	r5, r5, #1
    21fe:	07e4      	lsls	r4, r4, #31
    2200:	086d      	lsrs	r5, r5, #1
    2202:	4325      	orrs	r5, r4
    2204:	4640      	mov	r0, r8
    2206:	0029      	movs	r1, r5
    2208:	b007      	add	sp, #28
    220a:	bc3c      	pop	{r2, r3, r4, r5}
    220c:	4690      	mov	r8, r2
    220e:	4699      	mov	r9, r3
    2210:	46a2      	mov	sl, r4
    2212:	46ab      	mov	fp, r5
    2214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2216:	4303      	orrs	r3, r0
    2218:	d052      	beq.n	22c0 <__aeabi_dmul+0x1a4>
    221a:	465b      	mov	r3, fp
    221c:	2b00      	cmp	r3, #0
    221e:	d100      	bne.n	2222 <__aeabi_dmul+0x106>
    2220:	e18a      	b.n	2538 <__aeabi_dmul+0x41c>
    2222:	4658      	mov	r0, fp
    2224:	f000 fed8 	bl	2fd8 <__clzsi2>
    2228:	0003      	movs	r3, r0
    222a:	3b0b      	subs	r3, #11
    222c:	2b1c      	cmp	r3, #28
    222e:	dd00      	ble.n	2232 <__aeabi_dmul+0x116>
    2230:	e17b      	b.n	252a <__aeabi_dmul+0x40e>
    2232:	221d      	movs	r2, #29
    2234:	1ad3      	subs	r3, r2, r3
    2236:	003a      	movs	r2, r7
    2238:	0001      	movs	r1, r0
    223a:	465d      	mov	r5, fp
    223c:	40da      	lsrs	r2, r3
    223e:	3908      	subs	r1, #8
    2240:	408d      	lsls	r5, r1
    2242:	0013      	movs	r3, r2
    2244:	408f      	lsls	r7, r1
    2246:	432b      	orrs	r3, r5
    2248:	469b      	mov	fp, r3
    224a:	46b8      	mov	r8, r7
    224c:	4b2e      	ldr	r3, [pc, #184]	; (2308 <__aeabi_dmul+0x1ec>)
    224e:	2700      	movs	r7, #0
    2250:	469c      	mov	ip, r3
    2252:	2300      	movs	r3, #0
    2254:	4460      	add	r0, ip
    2256:	4246      	negs	r6, r0
    2258:	9301      	str	r3, [sp, #4]
    225a:	e785      	b.n	2168 <__aeabi_dmul+0x4c>
    225c:	4652      	mov	r2, sl
    225e:	432a      	orrs	r2, r5
    2260:	d12c      	bne.n	22bc <__aeabi_dmul+0x1a0>
    2262:	2500      	movs	r5, #0
    2264:	2300      	movs	r3, #0
    2266:	2202      	movs	r2, #2
    2268:	e797      	b.n	219a <__aeabi_dmul+0x7e>
    226a:	4652      	mov	r2, sl
    226c:	432a      	orrs	r2, r5
    226e:	d021      	beq.n	22b4 <__aeabi_dmul+0x198>
    2270:	2d00      	cmp	r5, #0
    2272:	d100      	bne.n	2276 <__aeabi_dmul+0x15a>
    2274:	e154      	b.n	2520 <__aeabi_dmul+0x404>
    2276:	0028      	movs	r0, r5
    2278:	f000 feae 	bl	2fd8 <__clzsi2>
    227c:	0003      	movs	r3, r0
    227e:	3b0b      	subs	r3, #11
    2280:	2b1c      	cmp	r3, #28
    2282:	dd00      	ble.n	2286 <__aeabi_dmul+0x16a>
    2284:	e146      	b.n	2514 <__aeabi_dmul+0x3f8>
    2286:	211d      	movs	r1, #29
    2288:	1acb      	subs	r3, r1, r3
    228a:	4651      	mov	r1, sl
    228c:	0002      	movs	r2, r0
    228e:	40d9      	lsrs	r1, r3
    2290:	4653      	mov	r3, sl
    2292:	3a08      	subs	r2, #8
    2294:	4095      	lsls	r5, r2
    2296:	4093      	lsls	r3, r2
    2298:	430d      	orrs	r5, r1
    229a:	4a1b      	ldr	r2, [pc, #108]	; (2308 <__aeabi_dmul+0x1ec>)
    229c:	4694      	mov	ip, r2
    229e:	4460      	add	r0, ip
    22a0:	4240      	negs	r0, r0
    22a2:	2200      	movs	r2, #0
    22a4:	e779      	b.n	219a <__aeabi_dmul+0x7e>
    22a6:	2401      	movs	r4, #1
    22a8:	2200      	movs	r2, #0
    22aa:	400c      	ands	r4, r1
    22ac:	4b12      	ldr	r3, [pc, #72]	; (22f8 <__aeabi_dmul+0x1dc>)
    22ae:	2500      	movs	r5, #0
    22b0:	4690      	mov	r8, r2
    22b2:	e799      	b.n	21e8 <__aeabi_dmul+0xcc>
    22b4:	2500      	movs	r5, #0
    22b6:	2300      	movs	r3, #0
    22b8:	2201      	movs	r2, #1
    22ba:	e76e      	b.n	219a <__aeabi_dmul+0x7e>
    22bc:	2203      	movs	r2, #3
    22be:	e76c      	b.n	219a <__aeabi_dmul+0x7e>
    22c0:	2300      	movs	r3, #0
    22c2:	469b      	mov	fp, r3
    22c4:	4698      	mov	r8, r3
    22c6:	3301      	adds	r3, #1
    22c8:	2704      	movs	r7, #4
    22ca:	9301      	str	r3, [sp, #4]
    22cc:	e74c      	b.n	2168 <__aeabi_dmul+0x4c>
    22ce:	2303      	movs	r3, #3
    22d0:	270c      	movs	r7, #12
    22d2:	9301      	str	r3, [sp, #4]
    22d4:	e748      	b.n	2168 <__aeabi_dmul+0x4c>
    22d6:	2300      	movs	r3, #0
    22d8:	2580      	movs	r5, #128	; 0x80
    22da:	4698      	mov	r8, r3
    22dc:	2400      	movs	r4, #0
    22de:	032d      	lsls	r5, r5, #12
    22e0:	4b05      	ldr	r3, [pc, #20]	; (22f8 <__aeabi_dmul+0x1dc>)
    22e2:	e781      	b.n	21e8 <__aeabi_dmul+0xcc>
    22e4:	465d      	mov	r5, fp
    22e6:	4643      	mov	r3, r8
    22e8:	9a01      	ldr	r2, [sp, #4]
    22ea:	e76f      	b.n	21cc <__aeabi_dmul+0xb0>
    22ec:	465d      	mov	r5, fp
    22ee:	4643      	mov	r3, r8
    22f0:	0021      	movs	r1, r4
    22f2:	9a01      	ldr	r2, [sp, #4]
    22f4:	e76a      	b.n	21cc <__aeabi_dmul+0xb0>
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	000007ff 	.word	0x000007ff
    22fc:	fffffc01 	.word	0xfffffc01
    2300:	00003384 	.word	0x00003384
    2304:	800fffff 	.word	0x800fffff
    2308:	000003f3 	.word	0x000003f3
    230c:	4642      	mov	r2, r8
    230e:	0c12      	lsrs	r2, r2, #16
    2310:	4691      	mov	r9, r2
    2312:	0c1a      	lsrs	r2, r3, #16
    2314:	4694      	mov	ip, r2
    2316:	4642      	mov	r2, r8
    2318:	0417      	lsls	r7, r2, #16
    231a:	464a      	mov	r2, r9
    231c:	041b      	lsls	r3, r3, #16
    231e:	0c1b      	lsrs	r3, r3, #16
    2320:	435a      	muls	r2, r3
    2322:	4660      	mov	r0, ip
    2324:	4690      	mov	r8, r2
    2326:	464a      	mov	r2, r9
    2328:	4342      	muls	r2, r0
    232a:	0010      	movs	r0, r2
    232c:	9203      	str	r2, [sp, #12]
    232e:	4662      	mov	r2, ip
    2330:	001c      	movs	r4, r3
    2332:	0c3f      	lsrs	r7, r7, #16
    2334:	437a      	muls	r2, r7
    2336:	437c      	muls	r4, r7
    2338:	4442      	add	r2, r8
    233a:	9201      	str	r2, [sp, #4]
    233c:	0c22      	lsrs	r2, r4, #16
    233e:	4692      	mov	sl, r2
    2340:	9a01      	ldr	r2, [sp, #4]
    2342:	4452      	add	r2, sl
    2344:	4590      	cmp	r8, r2
    2346:	d906      	bls.n	2356 <__aeabi_dmul+0x23a>
    2348:	4682      	mov	sl, r0
    234a:	2080      	movs	r0, #128	; 0x80
    234c:	0240      	lsls	r0, r0, #9
    234e:	4680      	mov	r8, r0
    2350:	44c2      	add	sl, r8
    2352:	4650      	mov	r0, sl
    2354:	9003      	str	r0, [sp, #12]
    2356:	0c10      	lsrs	r0, r2, #16
    2358:	9004      	str	r0, [sp, #16]
    235a:	4648      	mov	r0, r9
    235c:	0424      	lsls	r4, r4, #16
    235e:	0c24      	lsrs	r4, r4, #16
    2360:	0412      	lsls	r2, r2, #16
    2362:	1912      	adds	r2, r2, r4
    2364:	9205      	str	r2, [sp, #20]
    2366:	0c2a      	lsrs	r2, r5, #16
    2368:	042d      	lsls	r5, r5, #16
    236a:	0c2d      	lsrs	r5, r5, #16
    236c:	4368      	muls	r0, r5
    236e:	002c      	movs	r4, r5
    2370:	4682      	mov	sl, r0
    2372:	4648      	mov	r0, r9
    2374:	437c      	muls	r4, r7
    2376:	4350      	muls	r0, r2
    2378:	4681      	mov	r9, r0
    237a:	0c20      	lsrs	r0, r4, #16
    237c:	4680      	mov	r8, r0
    237e:	4357      	muls	r7, r2
    2380:	4457      	add	r7, sl
    2382:	4447      	add	r7, r8
    2384:	45ba      	cmp	sl, r7
    2386:	d903      	bls.n	2390 <__aeabi_dmul+0x274>
    2388:	2080      	movs	r0, #128	; 0x80
    238a:	0240      	lsls	r0, r0, #9
    238c:	4680      	mov	r8, r0
    238e:	44c1      	add	r9, r8
    2390:	0c38      	lsrs	r0, r7, #16
    2392:	043f      	lsls	r7, r7, #16
    2394:	46b8      	mov	r8, r7
    2396:	4448      	add	r0, r9
    2398:	0424      	lsls	r4, r4, #16
    239a:	0c24      	lsrs	r4, r4, #16
    239c:	9001      	str	r0, [sp, #4]
    239e:	9804      	ldr	r0, [sp, #16]
    23a0:	44a0      	add	r8, r4
    23a2:	4440      	add	r0, r8
    23a4:	9004      	str	r0, [sp, #16]
    23a6:	4658      	mov	r0, fp
    23a8:	0c00      	lsrs	r0, r0, #16
    23aa:	4681      	mov	r9, r0
    23ac:	4658      	mov	r0, fp
    23ae:	0404      	lsls	r4, r0, #16
    23b0:	0c20      	lsrs	r0, r4, #16
    23b2:	4682      	mov	sl, r0
    23b4:	0007      	movs	r7, r0
    23b6:	4648      	mov	r0, r9
    23b8:	435f      	muls	r7, r3
    23ba:	464c      	mov	r4, r9
    23bc:	4343      	muls	r3, r0
    23be:	4660      	mov	r0, ip
    23c0:	4360      	muls	r0, r4
    23c2:	4664      	mov	r4, ip
    23c4:	4683      	mov	fp, r0
    23c6:	4650      	mov	r0, sl
    23c8:	4344      	muls	r4, r0
    23ca:	0c38      	lsrs	r0, r7, #16
    23cc:	4684      	mov	ip, r0
    23ce:	18e4      	adds	r4, r4, r3
    23d0:	4464      	add	r4, ip
    23d2:	42a3      	cmp	r3, r4
    23d4:	d903      	bls.n	23de <__aeabi_dmul+0x2c2>
    23d6:	2380      	movs	r3, #128	; 0x80
    23d8:	025b      	lsls	r3, r3, #9
    23da:	469c      	mov	ip, r3
    23dc:	44e3      	add	fp, ip
    23de:	4648      	mov	r0, r9
    23e0:	043f      	lsls	r7, r7, #16
    23e2:	0c23      	lsrs	r3, r4, #16
    23e4:	0c3f      	lsrs	r7, r7, #16
    23e6:	0424      	lsls	r4, r4, #16
    23e8:	19e4      	adds	r4, r4, r7
    23ea:	4657      	mov	r7, sl
    23ec:	4368      	muls	r0, r5
    23ee:	436f      	muls	r7, r5
    23f0:	4684      	mov	ip, r0
    23f2:	464d      	mov	r5, r9
    23f4:	4650      	mov	r0, sl
    23f6:	4355      	muls	r5, r2
    23f8:	4342      	muls	r2, r0
    23fa:	0c38      	lsrs	r0, r7, #16
    23fc:	4681      	mov	r9, r0
    23fe:	4462      	add	r2, ip
    2400:	444a      	add	r2, r9
    2402:	445b      	add	r3, fp
    2404:	4594      	cmp	ip, r2
    2406:	d903      	bls.n	2410 <__aeabi_dmul+0x2f4>
    2408:	2080      	movs	r0, #128	; 0x80
    240a:	0240      	lsls	r0, r0, #9
    240c:	4684      	mov	ip, r0
    240e:	4465      	add	r5, ip
    2410:	9803      	ldr	r0, [sp, #12]
    2412:	043f      	lsls	r7, r7, #16
    2414:	4683      	mov	fp, r0
    2416:	9804      	ldr	r0, [sp, #16]
    2418:	0c3f      	lsrs	r7, r7, #16
    241a:	4684      	mov	ip, r0
    241c:	44e3      	add	fp, ip
    241e:	45c3      	cmp	fp, r8
    2420:	4180      	sbcs	r0, r0
    2422:	4240      	negs	r0, r0
    2424:	4682      	mov	sl, r0
    2426:	0410      	lsls	r0, r2, #16
    2428:	4684      	mov	ip, r0
    242a:	9801      	ldr	r0, [sp, #4]
    242c:	4467      	add	r7, ip
    242e:	4684      	mov	ip, r0
    2430:	4467      	add	r7, ip
    2432:	44a3      	add	fp, r4
    2434:	46bc      	mov	ip, r7
    2436:	45a3      	cmp	fp, r4
    2438:	41a4      	sbcs	r4, r4
    243a:	4699      	mov	r9, r3
    243c:	44d4      	add	ip, sl
    243e:	4264      	negs	r4, r4
    2440:	4287      	cmp	r7, r0
    2442:	41bf      	sbcs	r7, r7
    2444:	45d4      	cmp	ip, sl
    2446:	4180      	sbcs	r0, r0
    2448:	44e1      	add	r9, ip
    244a:	46a0      	mov	r8, r4
    244c:	4599      	cmp	r9, r3
    244e:	419b      	sbcs	r3, r3
    2450:	427f      	negs	r7, r7
    2452:	4240      	negs	r0, r0
    2454:	44c8      	add	r8, r9
    2456:	4307      	orrs	r7, r0
    2458:	0c12      	lsrs	r2, r2, #16
    245a:	18ba      	adds	r2, r7, r2
    245c:	45a0      	cmp	r8, r4
    245e:	41a4      	sbcs	r4, r4
    2460:	425f      	negs	r7, r3
    2462:	003b      	movs	r3, r7
    2464:	4264      	negs	r4, r4
    2466:	4323      	orrs	r3, r4
    2468:	18d7      	adds	r7, r2, r3
    246a:	4643      	mov	r3, r8
    246c:	197d      	adds	r5, r7, r5
    246e:	0ddb      	lsrs	r3, r3, #23
    2470:	026d      	lsls	r5, r5, #9
    2472:	431d      	orrs	r5, r3
    2474:	465b      	mov	r3, fp
    2476:	025a      	lsls	r2, r3, #9
    2478:	9b05      	ldr	r3, [sp, #20]
    247a:	431a      	orrs	r2, r3
    247c:	1e53      	subs	r3, r2, #1
    247e:	419a      	sbcs	r2, r3
    2480:	465b      	mov	r3, fp
    2482:	0ddb      	lsrs	r3, r3, #23
    2484:	431a      	orrs	r2, r3
    2486:	4643      	mov	r3, r8
    2488:	025b      	lsls	r3, r3, #9
    248a:	4313      	orrs	r3, r2
    248c:	01ea      	lsls	r2, r5, #7
    248e:	d507      	bpl.n	24a0 <__aeabi_dmul+0x384>
    2490:	2201      	movs	r2, #1
    2492:	085c      	lsrs	r4, r3, #1
    2494:	4013      	ands	r3, r2
    2496:	4323      	orrs	r3, r4
    2498:	07ea      	lsls	r2, r5, #31
    249a:	9e02      	ldr	r6, [sp, #8]
    249c:	4313      	orrs	r3, r2
    249e:	086d      	lsrs	r5, r5, #1
    24a0:	4a57      	ldr	r2, [pc, #348]	; (2600 <__aeabi_dmul+0x4e4>)
    24a2:	18b2      	adds	r2, r6, r2
    24a4:	2a00      	cmp	r2, #0
    24a6:	dd4b      	ble.n	2540 <__aeabi_dmul+0x424>
    24a8:	0758      	lsls	r0, r3, #29
    24aa:	d009      	beq.n	24c0 <__aeabi_dmul+0x3a4>
    24ac:	200f      	movs	r0, #15
    24ae:	4018      	ands	r0, r3
    24b0:	2804      	cmp	r0, #4
    24b2:	d005      	beq.n	24c0 <__aeabi_dmul+0x3a4>
    24b4:	1d18      	adds	r0, r3, #4
    24b6:	4298      	cmp	r0, r3
    24b8:	419b      	sbcs	r3, r3
    24ba:	425b      	negs	r3, r3
    24bc:	18ed      	adds	r5, r5, r3
    24be:	0003      	movs	r3, r0
    24c0:	01e8      	lsls	r0, r5, #7
    24c2:	d504      	bpl.n	24ce <__aeabi_dmul+0x3b2>
    24c4:	4a4f      	ldr	r2, [pc, #316]	; (2604 <__aeabi_dmul+0x4e8>)
    24c6:	4015      	ands	r5, r2
    24c8:	2280      	movs	r2, #128	; 0x80
    24ca:	00d2      	lsls	r2, r2, #3
    24cc:	18b2      	adds	r2, r6, r2
    24ce:	484e      	ldr	r0, [pc, #312]	; (2608 <__aeabi_dmul+0x4ec>)
    24d0:	4282      	cmp	r2, r0
    24d2:	dd00      	ble.n	24d6 <__aeabi_dmul+0x3ba>
    24d4:	e6e7      	b.n	22a6 <__aeabi_dmul+0x18a>
    24d6:	2401      	movs	r4, #1
    24d8:	08db      	lsrs	r3, r3, #3
    24da:	0768      	lsls	r0, r5, #29
    24dc:	4318      	orrs	r0, r3
    24de:	026d      	lsls	r5, r5, #9
    24e0:	0553      	lsls	r3, r2, #21
    24e2:	4680      	mov	r8, r0
    24e4:	0b2d      	lsrs	r5, r5, #12
    24e6:	0d5b      	lsrs	r3, r3, #21
    24e8:	400c      	ands	r4, r1
    24ea:	e67d      	b.n	21e8 <__aeabi_dmul+0xcc>
    24ec:	2280      	movs	r2, #128	; 0x80
    24ee:	4659      	mov	r1, fp
    24f0:	0312      	lsls	r2, r2, #12
    24f2:	4211      	tst	r1, r2
    24f4:	d008      	beq.n	2508 <__aeabi_dmul+0x3ec>
    24f6:	4215      	tst	r5, r2
    24f8:	d106      	bne.n	2508 <__aeabi_dmul+0x3ec>
    24fa:	4315      	orrs	r5, r2
    24fc:	032d      	lsls	r5, r5, #12
    24fe:	4698      	mov	r8, r3
    2500:	0b2d      	lsrs	r5, r5, #12
    2502:	464c      	mov	r4, r9
    2504:	4b41      	ldr	r3, [pc, #260]	; (260c <__aeabi_dmul+0x4f0>)
    2506:	e66f      	b.n	21e8 <__aeabi_dmul+0xcc>
    2508:	465d      	mov	r5, fp
    250a:	4315      	orrs	r5, r2
    250c:	032d      	lsls	r5, r5, #12
    250e:	0b2d      	lsrs	r5, r5, #12
    2510:	4b3e      	ldr	r3, [pc, #248]	; (260c <__aeabi_dmul+0x4f0>)
    2512:	e669      	b.n	21e8 <__aeabi_dmul+0xcc>
    2514:	0003      	movs	r3, r0
    2516:	4655      	mov	r5, sl
    2518:	3b28      	subs	r3, #40	; 0x28
    251a:	409d      	lsls	r5, r3
    251c:	2300      	movs	r3, #0
    251e:	e6bc      	b.n	229a <__aeabi_dmul+0x17e>
    2520:	4650      	mov	r0, sl
    2522:	f000 fd59 	bl	2fd8 <__clzsi2>
    2526:	3020      	adds	r0, #32
    2528:	e6a8      	b.n	227c <__aeabi_dmul+0x160>
    252a:	0003      	movs	r3, r0
    252c:	3b28      	subs	r3, #40	; 0x28
    252e:	409f      	lsls	r7, r3
    2530:	2300      	movs	r3, #0
    2532:	46bb      	mov	fp, r7
    2534:	4698      	mov	r8, r3
    2536:	e689      	b.n	224c <__aeabi_dmul+0x130>
    2538:	f000 fd4e 	bl	2fd8 <__clzsi2>
    253c:	3020      	adds	r0, #32
    253e:	e673      	b.n	2228 <__aeabi_dmul+0x10c>
    2540:	2401      	movs	r4, #1
    2542:	1aa6      	subs	r6, r4, r2
    2544:	2e38      	cmp	r6, #56	; 0x38
    2546:	dd07      	ble.n	2558 <__aeabi_dmul+0x43c>
    2548:	2200      	movs	r2, #0
    254a:	400c      	ands	r4, r1
    254c:	2300      	movs	r3, #0
    254e:	2500      	movs	r5, #0
    2550:	4690      	mov	r8, r2
    2552:	e649      	b.n	21e8 <__aeabi_dmul+0xcc>
    2554:	9e02      	ldr	r6, [sp, #8]
    2556:	e7a3      	b.n	24a0 <__aeabi_dmul+0x384>
    2558:	2e1f      	cmp	r6, #31
    255a:	dc20      	bgt.n	259e <__aeabi_dmul+0x482>
    255c:	2220      	movs	r2, #32
    255e:	002c      	movs	r4, r5
    2560:	0018      	movs	r0, r3
    2562:	1b92      	subs	r2, r2, r6
    2564:	40f0      	lsrs	r0, r6
    2566:	4094      	lsls	r4, r2
    2568:	4093      	lsls	r3, r2
    256a:	4304      	orrs	r4, r0
    256c:	1e58      	subs	r0, r3, #1
    256e:	4183      	sbcs	r3, r0
    2570:	431c      	orrs	r4, r3
    2572:	40f5      	lsrs	r5, r6
    2574:	0763      	lsls	r3, r4, #29
    2576:	d009      	beq.n	258c <__aeabi_dmul+0x470>
    2578:	230f      	movs	r3, #15
    257a:	4023      	ands	r3, r4
    257c:	2b04      	cmp	r3, #4
    257e:	d005      	beq.n	258c <__aeabi_dmul+0x470>
    2580:	0023      	movs	r3, r4
    2582:	1d1c      	adds	r4, r3, #4
    2584:	429c      	cmp	r4, r3
    2586:	4192      	sbcs	r2, r2
    2588:	4252      	negs	r2, r2
    258a:	18ad      	adds	r5, r5, r2
    258c:	022b      	lsls	r3, r5, #8
    258e:	d51f      	bpl.n	25d0 <__aeabi_dmul+0x4b4>
    2590:	2401      	movs	r4, #1
    2592:	2200      	movs	r2, #0
    2594:	400c      	ands	r4, r1
    2596:	2301      	movs	r3, #1
    2598:	2500      	movs	r5, #0
    259a:	4690      	mov	r8, r2
    259c:	e624      	b.n	21e8 <__aeabi_dmul+0xcc>
    259e:	201f      	movs	r0, #31
    25a0:	002c      	movs	r4, r5
    25a2:	4240      	negs	r0, r0
    25a4:	1a82      	subs	r2, r0, r2
    25a6:	40d4      	lsrs	r4, r2
    25a8:	2e20      	cmp	r6, #32
    25aa:	d01c      	beq.n	25e6 <__aeabi_dmul+0x4ca>
    25ac:	2240      	movs	r2, #64	; 0x40
    25ae:	1b96      	subs	r6, r2, r6
    25b0:	40b5      	lsls	r5, r6
    25b2:	432b      	orrs	r3, r5
    25b4:	1e58      	subs	r0, r3, #1
    25b6:	4183      	sbcs	r3, r0
    25b8:	2007      	movs	r0, #7
    25ba:	4323      	orrs	r3, r4
    25bc:	4018      	ands	r0, r3
    25be:	2500      	movs	r5, #0
    25c0:	2800      	cmp	r0, #0
    25c2:	d009      	beq.n	25d8 <__aeabi_dmul+0x4bc>
    25c4:	220f      	movs	r2, #15
    25c6:	2500      	movs	r5, #0
    25c8:	401a      	ands	r2, r3
    25ca:	001c      	movs	r4, r3
    25cc:	2a04      	cmp	r2, #4
    25ce:	d1d8      	bne.n	2582 <__aeabi_dmul+0x466>
    25d0:	0023      	movs	r3, r4
    25d2:	0768      	lsls	r0, r5, #29
    25d4:	026d      	lsls	r5, r5, #9
    25d6:	0b2d      	lsrs	r5, r5, #12
    25d8:	2401      	movs	r4, #1
    25da:	08db      	lsrs	r3, r3, #3
    25dc:	4303      	orrs	r3, r0
    25de:	4698      	mov	r8, r3
    25e0:	400c      	ands	r4, r1
    25e2:	2300      	movs	r3, #0
    25e4:	e600      	b.n	21e8 <__aeabi_dmul+0xcc>
    25e6:	2500      	movs	r5, #0
    25e8:	e7e3      	b.n	25b2 <__aeabi_dmul+0x496>
    25ea:	2280      	movs	r2, #128	; 0x80
    25ec:	2401      	movs	r4, #1
    25ee:	0312      	lsls	r2, r2, #12
    25f0:	4315      	orrs	r5, r2
    25f2:	032d      	lsls	r5, r5, #12
    25f4:	4698      	mov	r8, r3
    25f6:	0b2d      	lsrs	r5, r5, #12
    25f8:	400c      	ands	r4, r1
    25fa:	4b04      	ldr	r3, [pc, #16]	; (260c <__aeabi_dmul+0x4f0>)
    25fc:	e5f4      	b.n	21e8 <__aeabi_dmul+0xcc>
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	000003ff 	.word	0x000003ff
    2604:	feffffff 	.word	0xfeffffff
    2608:	000007fe 	.word	0x000007fe
    260c:	000007ff 	.word	0x000007ff

00002610 <__aeabi_dsub>:
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	4657      	mov	r7, sl
    2614:	464e      	mov	r6, r9
    2616:	4645      	mov	r5, r8
    2618:	b4e0      	push	{r5, r6, r7}
    261a:	000e      	movs	r6, r1
    261c:	0011      	movs	r1, r2
    261e:	0ff2      	lsrs	r2, r6, #31
    2620:	4692      	mov	sl, r2
    2622:	00c5      	lsls	r5, r0, #3
    2624:	0f42      	lsrs	r2, r0, #29
    2626:	0318      	lsls	r0, r3, #12
    2628:	0337      	lsls	r7, r6, #12
    262a:	0074      	lsls	r4, r6, #1
    262c:	0a40      	lsrs	r0, r0, #9
    262e:	0f4e      	lsrs	r6, r1, #29
    2630:	0a7f      	lsrs	r7, r7, #9
    2632:	4330      	orrs	r0, r6
    2634:	4ecf      	ldr	r6, [pc, #828]	; (2974 <__aeabi_dsub+0x364>)
    2636:	4317      	orrs	r7, r2
    2638:	005a      	lsls	r2, r3, #1
    263a:	0d64      	lsrs	r4, r4, #21
    263c:	0d52      	lsrs	r2, r2, #21
    263e:	0fdb      	lsrs	r3, r3, #31
    2640:	00c9      	lsls	r1, r1, #3
    2642:	42b2      	cmp	r2, r6
    2644:	d100      	bne.n	2648 <__aeabi_dsub+0x38>
    2646:	e0e5      	b.n	2814 <__aeabi_dsub+0x204>
    2648:	2601      	movs	r6, #1
    264a:	4073      	eors	r3, r6
    264c:	1aa6      	subs	r6, r4, r2
    264e:	46b4      	mov	ip, r6
    2650:	4553      	cmp	r3, sl
    2652:	d100      	bne.n	2656 <__aeabi_dsub+0x46>
    2654:	e0af      	b.n	27b6 <__aeabi_dsub+0x1a6>
    2656:	2e00      	cmp	r6, #0
    2658:	dc00      	bgt.n	265c <__aeabi_dsub+0x4c>
    265a:	e10d      	b.n	2878 <__aeabi_dsub+0x268>
    265c:	2a00      	cmp	r2, #0
    265e:	d13a      	bne.n	26d6 <__aeabi_dsub+0xc6>
    2660:	0003      	movs	r3, r0
    2662:	430b      	orrs	r3, r1
    2664:	d000      	beq.n	2668 <__aeabi_dsub+0x58>
    2666:	e0e4      	b.n	2832 <__aeabi_dsub+0x222>
    2668:	076b      	lsls	r3, r5, #29
    266a:	d009      	beq.n	2680 <__aeabi_dsub+0x70>
    266c:	230f      	movs	r3, #15
    266e:	402b      	ands	r3, r5
    2670:	2b04      	cmp	r3, #4
    2672:	d005      	beq.n	2680 <__aeabi_dsub+0x70>
    2674:	1d2b      	adds	r3, r5, #4
    2676:	42ab      	cmp	r3, r5
    2678:	41ad      	sbcs	r5, r5
    267a:	426d      	negs	r5, r5
    267c:	197f      	adds	r7, r7, r5
    267e:	001d      	movs	r5, r3
    2680:	023b      	lsls	r3, r7, #8
    2682:	d400      	bmi.n	2686 <__aeabi_dsub+0x76>
    2684:	e088      	b.n	2798 <__aeabi_dsub+0x188>
    2686:	4bbb      	ldr	r3, [pc, #748]	; (2974 <__aeabi_dsub+0x364>)
    2688:	3401      	adds	r4, #1
    268a:	429c      	cmp	r4, r3
    268c:	d100      	bne.n	2690 <__aeabi_dsub+0x80>
    268e:	e110      	b.n	28b2 <__aeabi_dsub+0x2a2>
    2690:	003a      	movs	r2, r7
    2692:	4bb9      	ldr	r3, [pc, #740]	; (2978 <__aeabi_dsub+0x368>)
    2694:	4651      	mov	r1, sl
    2696:	401a      	ands	r2, r3
    2698:	2301      	movs	r3, #1
    269a:	0750      	lsls	r0, r2, #29
    269c:	08ed      	lsrs	r5, r5, #3
    269e:	0252      	lsls	r2, r2, #9
    26a0:	0564      	lsls	r4, r4, #21
    26a2:	4305      	orrs	r5, r0
    26a4:	0b12      	lsrs	r2, r2, #12
    26a6:	0d64      	lsrs	r4, r4, #21
    26a8:	400b      	ands	r3, r1
    26aa:	2100      	movs	r1, #0
    26ac:	0028      	movs	r0, r5
    26ae:	0312      	lsls	r2, r2, #12
    26b0:	0d0d      	lsrs	r5, r1, #20
    26b2:	0b12      	lsrs	r2, r2, #12
    26b4:	0564      	lsls	r4, r4, #21
    26b6:	052d      	lsls	r5, r5, #20
    26b8:	4315      	orrs	r5, r2
    26ba:	0862      	lsrs	r2, r4, #1
    26bc:	4caf      	ldr	r4, [pc, #700]	; (297c <__aeabi_dsub+0x36c>)
    26be:	07db      	lsls	r3, r3, #31
    26c0:	402c      	ands	r4, r5
    26c2:	4314      	orrs	r4, r2
    26c4:	0064      	lsls	r4, r4, #1
    26c6:	0864      	lsrs	r4, r4, #1
    26c8:	431c      	orrs	r4, r3
    26ca:	0021      	movs	r1, r4
    26cc:	bc1c      	pop	{r2, r3, r4}
    26ce:	4690      	mov	r8, r2
    26d0:	4699      	mov	r9, r3
    26d2:	46a2      	mov	sl, r4
    26d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26d6:	4ba7      	ldr	r3, [pc, #668]	; (2974 <__aeabi_dsub+0x364>)
    26d8:	429c      	cmp	r4, r3
    26da:	d0c5      	beq.n	2668 <__aeabi_dsub+0x58>
    26dc:	2380      	movs	r3, #128	; 0x80
    26de:	041b      	lsls	r3, r3, #16
    26e0:	4318      	orrs	r0, r3
    26e2:	4663      	mov	r3, ip
    26e4:	2b38      	cmp	r3, #56	; 0x38
    26e6:	dd00      	ble.n	26ea <__aeabi_dsub+0xda>
    26e8:	e0fd      	b.n	28e6 <__aeabi_dsub+0x2d6>
    26ea:	2b1f      	cmp	r3, #31
    26ec:	dd00      	ble.n	26f0 <__aeabi_dsub+0xe0>
    26ee:	e130      	b.n	2952 <__aeabi_dsub+0x342>
    26f0:	4662      	mov	r2, ip
    26f2:	2320      	movs	r3, #32
    26f4:	1a9b      	subs	r3, r3, r2
    26f6:	0002      	movs	r2, r0
    26f8:	409a      	lsls	r2, r3
    26fa:	4666      	mov	r6, ip
    26fc:	4690      	mov	r8, r2
    26fe:	000a      	movs	r2, r1
    2700:	4099      	lsls	r1, r3
    2702:	40f2      	lsrs	r2, r6
    2704:	4646      	mov	r6, r8
    2706:	1e4b      	subs	r3, r1, #1
    2708:	4199      	sbcs	r1, r3
    270a:	4332      	orrs	r2, r6
    270c:	4311      	orrs	r1, r2
    270e:	4663      	mov	r3, ip
    2710:	0002      	movs	r2, r0
    2712:	40da      	lsrs	r2, r3
    2714:	1a69      	subs	r1, r5, r1
    2716:	428d      	cmp	r5, r1
    2718:	419b      	sbcs	r3, r3
    271a:	000d      	movs	r5, r1
    271c:	1aba      	subs	r2, r7, r2
    271e:	425b      	negs	r3, r3
    2720:	1ad7      	subs	r7, r2, r3
    2722:	023b      	lsls	r3, r7, #8
    2724:	d535      	bpl.n	2792 <__aeabi_dsub+0x182>
    2726:	027a      	lsls	r2, r7, #9
    2728:	0a53      	lsrs	r3, r2, #9
    272a:	4698      	mov	r8, r3
    272c:	4643      	mov	r3, r8
    272e:	2b00      	cmp	r3, #0
    2730:	d100      	bne.n	2734 <__aeabi_dsub+0x124>
    2732:	e0c4      	b.n	28be <__aeabi_dsub+0x2ae>
    2734:	4640      	mov	r0, r8
    2736:	f000 fc4f 	bl	2fd8 <__clzsi2>
    273a:	0003      	movs	r3, r0
    273c:	3b08      	subs	r3, #8
    273e:	2b1f      	cmp	r3, #31
    2740:	dd00      	ble.n	2744 <__aeabi_dsub+0x134>
    2742:	e0c5      	b.n	28d0 <__aeabi_dsub+0x2c0>
    2744:	2220      	movs	r2, #32
    2746:	0029      	movs	r1, r5
    2748:	1ad2      	subs	r2, r2, r3
    274a:	4647      	mov	r7, r8
    274c:	40d1      	lsrs	r1, r2
    274e:	409f      	lsls	r7, r3
    2750:	000a      	movs	r2, r1
    2752:	409d      	lsls	r5, r3
    2754:	433a      	orrs	r2, r7
    2756:	429c      	cmp	r4, r3
    2758:	dd00      	ble.n	275c <__aeabi_dsub+0x14c>
    275a:	e0c0      	b.n	28de <__aeabi_dsub+0x2ce>
    275c:	1b1c      	subs	r4, r3, r4
    275e:	1c63      	adds	r3, r4, #1
    2760:	2b1f      	cmp	r3, #31
    2762:	dd00      	ble.n	2766 <__aeabi_dsub+0x156>
    2764:	e0e4      	b.n	2930 <__aeabi_dsub+0x320>
    2766:	2120      	movs	r1, #32
    2768:	0014      	movs	r4, r2
    276a:	0028      	movs	r0, r5
    276c:	1ac9      	subs	r1, r1, r3
    276e:	40d8      	lsrs	r0, r3
    2770:	408c      	lsls	r4, r1
    2772:	408d      	lsls	r5, r1
    2774:	4304      	orrs	r4, r0
    2776:	40da      	lsrs	r2, r3
    2778:	1e68      	subs	r0, r5, #1
    277a:	4185      	sbcs	r5, r0
    277c:	0017      	movs	r7, r2
    277e:	4325      	orrs	r5, r4
    2780:	2400      	movs	r4, #0
    2782:	e771      	b.n	2668 <__aeabi_dsub+0x58>
    2784:	4642      	mov	r2, r8
    2786:	4663      	mov	r3, ip
    2788:	431a      	orrs	r2, r3
    278a:	d100      	bne.n	278e <__aeabi_dsub+0x17e>
    278c:	e24c      	b.n	2c28 <__aeabi_dsub+0x618>
    278e:	4667      	mov	r7, ip
    2790:	4645      	mov	r5, r8
    2792:	076b      	lsls	r3, r5, #29
    2794:	d000      	beq.n	2798 <__aeabi_dsub+0x188>
    2796:	e769      	b.n	266c <__aeabi_dsub+0x5c>
    2798:	2301      	movs	r3, #1
    279a:	4651      	mov	r1, sl
    279c:	0778      	lsls	r0, r7, #29
    279e:	08ed      	lsrs	r5, r5, #3
    27a0:	08fa      	lsrs	r2, r7, #3
    27a2:	400b      	ands	r3, r1
    27a4:	4305      	orrs	r5, r0
    27a6:	4973      	ldr	r1, [pc, #460]	; (2974 <__aeabi_dsub+0x364>)
    27a8:	428c      	cmp	r4, r1
    27aa:	d038      	beq.n	281e <__aeabi_dsub+0x20e>
    27ac:	0312      	lsls	r2, r2, #12
    27ae:	0564      	lsls	r4, r4, #21
    27b0:	0b12      	lsrs	r2, r2, #12
    27b2:	0d64      	lsrs	r4, r4, #21
    27b4:	e779      	b.n	26aa <__aeabi_dsub+0x9a>
    27b6:	2e00      	cmp	r6, #0
    27b8:	dc00      	bgt.n	27bc <__aeabi_dsub+0x1ac>
    27ba:	e09a      	b.n	28f2 <__aeabi_dsub+0x2e2>
    27bc:	2a00      	cmp	r2, #0
    27be:	d047      	beq.n	2850 <__aeabi_dsub+0x240>
    27c0:	4a6c      	ldr	r2, [pc, #432]	; (2974 <__aeabi_dsub+0x364>)
    27c2:	4294      	cmp	r4, r2
    27c4:	d100      	bne.n	27c8 <__aeabi_dsub+0x1b8>
    27c6:	e74f      	b.n	2668 <__aeabi_dsub+0x58>
    27c8:	2280      	movs	r2, #128	; 0x80
    27ca:	0412      	lsls	r2, r2, #16
    27cc:	4310      	orrs	r0, r2
    27ce:	4662      	mov	r2, ip
    27d0:	2a38      	cmp	r2, #56	; 0x38
    27d2:	dc00      	bgt.n	27d6 <__aeabi_dsub+0x1c6>
    27d4:	e108      	b.n	29e8 <__aeabi_dsub+0x3d8>
    27d6:	4301      	orrs	r1, r0
    27d8:	1e48      	subs	r0, r1, #1
    27da:	4181      	sbcs	r1, r0
    27dc:	2200      	movs	r2, #0
    27de:	b2c9      	uxtb	r1, r1
    27e0:	1949      	adds	r1, r1, r5
    27e2:	19d2      	adds	r2, r2, r7
    27e4:	42a9      	cmp	r1, r5
    27e6:	41bf      	sbcs	r7, r7
    27e8:	000d      	movs	r5, r1
    27ea:	427f      	negs	r7, r7
    27ec:	18bf      	adds	r7, r7, r2
    27ee:	023a      	lsls	r2, r7, #8
    27f0:	d400      	bmi.n	27f4 <__aeabi_dsub+0x1e4>
    27f2:	e142      	b.n	2a7a <__aeabi_dsub+0x46a>
    27f4:	4a5f      	ldr	r2, [pc, #380]	; (2974 <__aeabi_dsub+0x364>)
    27f6:	3401      	adds	r4, #1
    27f8:	4294      	cmp	r4, r2
    27fa:	d100      	bne.n	27fe <__aeabi_dsub+0x1ee>
    27fc:	e14e      	b.n	2a9c <__aeabi_dsub+0x48c>
    27fe:	2001      	movs	r0, #1
    2800:	4a5d      	ldr	r2, [pc, #372]	; (2978 <__aeabi_dsub+0x368>)
    2802:	0869      	lsrs	r1, r5, #1
    2804:	403a      	ands	r2, r7
    2806:	4028      	ands	r0, r5
    2808:	4308      	orrs	r0, r1
    280a:	07d5      	lsls	r5, r2, #31
    280c:	4305      	orrs	r5, r0
    280e:	0857      	lsrs	r7, r2, #1
    2810:	469a      	mov	sl, r3
    2812:	e729      	b.n	2668 <__aeabi_dsub+0x58>
    2814:	0006      	movs	r6, r0
    2816:	430e      	orrs	r6, r1
    2818:	d000      	beq.n	281c <__aeabi_dsub+0x20c>
    281a:	e717      	b.n	264c <__aeabi_dsub+0x3c>
    281c:	e714      	b.n	2648 <__aeabi_dsub+0x38>
    281e:	0029      	movs	r1, r5
    2820:	4311      	orrs	r1, r2
    2822:	d100      	bne.n	2826 <__aeabi_dsub+0x216>
    2824:	e1f9      	b.n	2c1a <__aeabi_dsub+0x60a>
    2826:	2180      	movs	r1, #128	; 0x80
    2828:	0309      	lsls	r1, r1, #12
    282a:	430a      	orrs	r2, r1
    282c:	0312      	lsls	r2, r2, #12
    282e:	0b12      	lsrs	r2, r2, #12
    2830:	e73b      	b.n	26aa <__aeabi_dsub+0x9a>
    2832:	2301      	movs	r3, #1
    2834:	425b      	negs	r3, r3
    2836:	4698      	mov	r8, r3
    2838:	44c4      	add	ip, r8
    283a:	4663      	mov	r3, ip
    283c:	2b00      	cmp	r3, #0
    283e:	d172      	bne.n	2926 <__aeabi_dsub+0x316>
    2840:	1a69      	subs	r1, r5, r1
    2842:	428d      	cmp	r5, r1
    2844:	419b      	sbcs	r3, r3
    2846:	1a3f      	subs	r7, r7, r0
    2848:	425b      	negs	r3, r3
    284a:	1aff      	subs	r7, r7, r3
    284c:	000d      	movs	r5, r1
    284e:	e768      	b.n	2722 <__aeabi_dsub+0x112>
    2850:	0002      	movs	r2, r0
    2852:	430a      	orrs	r2, r1
    2854:	d100      	bne.n	2858 <__aeabi_dsub+0x248>
    2856:	e707      	b.n	2668 <__aeabi_dsub+0x58>
    2858:	2201      	movs	r2, #1
    285a:	4252      	negs	r2, r2
    285c:	4690      	mov	r8, r2
    285e:	44c4      	add	ip, r8
    2860:	4662      	mov	r2, ip
    2862:	2a00      	cmp	r2, #0
    2864:	d000      	beq.n	2868 <__aeabi_dsub+0x258>
    2866:	e0e6      	b.n	2a36 <__aeabi_dsub+0x426>
    2868:	1869      	adds	r1, r5, r1
    286a:	42a9      	cmp	r1, r5
    286c:	41b6      	sbcs	r6, r6
    286e:	183f      	adds	r7, r7, r0
    2870:	4276      	negs	r6, r6
    2872:	19f7      	adds	r7, r6, r7
    2874:	000d      	movs	r5, r1
    2876:	e7ba      	b.n	27ee <__aeabi_dsub+0x1de>
    2878:	2e00      	cmp	r6, #0
    287a:	d000      	beq.n	287e <__aeabi_dsub+0x26e>
    287c:	e080      	b.n	2980 <__aeabi_dsub+0x370>
    287e:	1c62      	adds	r2, r4, #1
    2880:	0552      	lsls	r2, r2, #21
    2882:	0d52      	lsrs	r2, r2, #21
    2884:	2a01      	cmp	r2, #1
    2886:	dc00      	bgt.n	288a <__aeabi_dsub+0x27a>
    2888:	e0f9      	b.n	2a7e <__aeabi_dsub+0x46e>
    288a:	1a6a      	subs	r2, r5, r1
    288c:	4691      	mov	r9, r2
    288e:	454d      	cmp	r5, r9
    2890:	41b6      	sbcs	r6, r6
    2892:	1a3a      	subs	r2, r7, r0
    2894:	4276      	negs	r6, r6
    2896:	1b92      	subs	r2, r2, r6
    2898:	4690      	mov	r8, r2
    289a:	0212      	lsls	r2, r2, #8
    289c:	d400      	bmi.n	28a0 <__aeabi_dsub+0x290>
    289e:	e099      	b.n	29d4 <__aeabi_dsub+0x3c4>
    28a0:	1b4d      	subs	r5, r1, r5
    28a2:	42a9      	cmp	r1, r5
    28a4:	4189      	sbcs	r1, r1
    28a6:	1bc7      	subs	r7, r0, r7
    28a8:	4249      	negs	r1, r1
    28aa:	1a7a      	subs	r2, r7, r1
    28ac:	4690      	mov	r8, r2
    28ae:	469a      	mov	sl, r3
    28b0:	e73c      	b.n	272c <__aeabi_dsub+0x11c>
    28b2:	4652      	mov	r2, sl
    28b4:	2301      	movs	r3, #1
    28b6:	2500      	movs	r5, #0
    28b8:	4013      	ands	r3, r2
    28ba:	2200      	movs	r2, #0
    28bc:	e6f5      	b.n	26aa <__aeabi_dsub+0x9a>
    28be:	0028      	movs	r0, r5
    28c0:	f000 fb8a 	bl	2fd8 <__clzsi2>
    28c4:	3020      	adds	r0, #32
    28c6:	0003      	movs	r3, r0
    28c8:	3b08      	subs	r3, #8
    28ca:	2b1f      	cmp	r3, #31
    28cc:	dc00      	bgt.n	28d0 <__aeabi_dsub+0x2c0>
    28ce:	e739      	b.n	2744 <__aeabi_dsub+0x134>
    28d0:	002a      	movs	r2, r5
    28d2:	3828      	subs	r0, #40	; 0x28
    28d4:	4082      	lsls	r2, r0
    28d6:	2500      	movs	r5, #0
    28d8:	429c      	cmp	r4, r3
    28da:	dc00      	bgt.n	28de <__aeabi_dsub+0x2ce>
    28dc:	e73e      	b.n	275c <__aeabi_dsub+0x14c>
    28de:	4f26      	ldr	r7, [pc, #152]	; (2978 <__aeabi_dsub+0x368>)
    28e0:	1ae4      	subs	r4, r4, r3
    28e2:	4017      	ands	r7, r2
    28e4:	e6c0      	b.n	2668 <__aeabi_dsub+0x58>
    28e6:	4301      	orrs	r1, r0
    28e8:	1e48      	subs	r0, r1, #1
    28ea:	4181      	sbcs	r1, r0
    28ec:	2200      	movs	r2, #0
    28ee:	b2c9      	uxtb	r1, r1
    28f0:	e710      	b.n	2714 <__aeabi_dsub+0x104>
    28f2:	2e00      	cmp	r6, #0
    28f4:	d000      	beq.n	28f8 <__aeabi_dsub+0x2e8>
    28f6:	e0f1      	b.n	2adc <__aeabi_dsub+0x4cc>
    28f8:	1c62      	adds	r2, r4, #1
    28fa:	4694      	mov	ip, r2
    28fc:	0552      	lsls	r2, r2, #21
    28fe:	0d52      	lsrs	r2, r2, #21
    2900:	2a01      	cmp	r2, #1
    2902:	dc00      	bgt.n	2906 <__aeabi_dsub+0x2f6>
    2904:	e0a0      	b.n	2a48 <__aeabi_dsub+0x438>
    2906:	4a1b      	ldr	r2, [pc, #108]	; (2974 <__aeabi_dsub+0x364>)
    2908:	4594      	cmp	ip, r2
    290a:	d100      	bne.n	290e <__aeabi_dsub+0x2fe>
    290c:	e0c5      	b.n	2a9a <__aeabi_dsub+0x48a>
    290e:	1869      	adds	r1, r5, r1
    2910:	42a9      	cmp	r1, r5
    2912:	4192      	sbcs	r2, r2
    2914:	183f      	adds	r7, r7, r0
    2916:	4252      	negs	r2, r2
    2918:	19d2      	adds	r2, r2, r7
    291a:	0849      	lsrs	r1, r1, #1
    291c:	07d5      	lsls	r5, r2, #31
    291e:	430d      	orrs	r5, r1
    2920:	0857      	lsrs	r7, r2, #1
    2922:	4664      	mov	r4, ip
    2924:	e6a0      	b.n	2668 <__aeabi_dsub+0x58>
    2926:	4b13      	ldr	r3, [pc, #76]	; (2974 <__aeabi_dsub+0x364>)
    2928:	429c      	cmp	r4, r3
    292a:	d000      	beq.n	292e <__aeabi_dsub+0x31e>
    292c:	e6d9      	b.n	26e2 <__aeabi_dsub+0xd2>
    292e:	e69b      	b.n	2668 <__aeabi_dsub+0x58>
    2930:	0011      	movs	r1, r2
    2932:	3c1f      	subs	r4, #31
    2934:	40e1      	lsrs	r1, r4
    2936:	000c      	movs	r4, r1
    2938:	2b20      	cmp	r3, #32
    293a:	d100      	bne.n	293e <__aeabi_dsub+0x32e>
    293c:	e080      	b.n	2a40 <__aeabi_dsub+0x430>
    293e:	2140      	movs	r1, #64	; 0x40
    2940:	1acb      	subs	r3, r1, r3
    2942:	409a      	lsls	r2, r3
    2944:	4315      	orrs	r5, r2
    2946:	1e6a      	subs	r2, r5, #1
    2948:	4195      	sbcs	r5, r2
    294a:	2700      	movs	r7, #0
    294c:	4325      	orrs	r5, r4
    294e:	2400      	movs	r4, #0
    2950:	e71f      	b.n	2792 <__aeabi_dsub+0x182>
    2952:	4663      	mov	r3, ip
    2954:	0002      	movs	r2, r0
    2956:	3b20      	subs	r3, #32
    2958:	40da      	lsrs	r2, r3
    295a:	4663      	mov	r3, ip
    295c:	2b20      	cmp	r3, #32
    295e:	d071      	beq.n	2a44 <__aeabi_dsub+0x434>
    2960:	2340      	movs	r3, #64	; 0x40
    2962:	4666      	mov	r6, ip
    2964:	1b9b      	subs	r3, r3, r6
    2966:	4098      	lsls	r0, r3
    2968:	4301      	orrs	r1, r0
    296a:	1e48      	subs	r0, r1, #1
    296c:	4181      	sbcs	r1, r0
    296e:	4311      	orrs	r1, r2
    2970:	2200      	movs	r2, #0
    2972:	e6cf      	b.n	2714 <__aeabi_dsub+0x104>
    2974:	000007ff 	.word	0x000007ff
    2978:	ff7fffff 	.word	0xff7fffff
    297c:	800fffff 	.word	0x800fffff
    2980:	2c00      	cmp	r4, #0
    2982:	d048      	beq.n	2a16 <__aeabi_dsub+0x406>
    2984:	4cca      	ldr	r4, [pc, #808]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2986:	42a2      	cmp	r2, r4
    2988:	d100      	bne.n	298c <__aeabi_dsub+0x37c>
    298a:	e0a2      	b.n	2ad2 <__aeabi_dsub+0x4c2>
    298c:	4274      	negs	r4, r6
    298e:	46a1      	mov	r9, r4
    2990:	2480      	movs	r4, #128	; 0x80
    2992:	0424      	lsls	r4, r4, #16
    2994:	4327      	orrs	r7, r4
    2996:	464c      	mov	r4, r9
    2998:	2c38      	cmp	r4, #56	; 0x38
    299a:	dd00      	ble.n	299e <__aeabi_dsub+0x38e>
    299c:	e0db      	b.n	2b56 <__aeabi_dsub+0x546>
    299e:	2c1f      	cmp	r4, #31
    29a0:	dd00      	ble.n	29a4 <__aeabi_dsub+0x394>
    29a2:	e144      	b.n	2c2e <__aeabi_dsub+0x61e>
    29a4:	464e      	mov	r6, r9
    29a6:	2420      	movs	r4, #32
    29a8:	1ba4      	subs	r4, r4, r6
    29aa:	003e      	movs	r6, r7
    29ac:	40a6      	lsls	r6, r4
    29ae:	46a2      	mov	sl, r4
    29b0:	46b0      	mov	r8, r6
    29b2:	464c      	mov	r4, r9
    29b4:	002e      	movs	r6, r5
    29b6:	40e6      	lsrs	r6, r4
    29b8:	46b4      	mov	ip, r6
    29ba:	4646      	mov	r6, r8
    29bc:	4664      	mov	r4, ip
    29be:	4326      	orrs	r6, r4
    29c0:	4654      	mov	r4, sl
    29c2:	40a5      	lsls	r5, r4
    29c4:	1e6c      	subs	r4, r5, #1
    29c6:	41a5      	sbcs	r5, r4
    29c8:	0034      	movs	r4, r6
    29ca:	432c      	orrs	r4, r5
    29cc:	464d      	mov	r5, r9
    29ce:	40ef      	lsrs	r7, r5
    29d0:	1b0d      	subs	r5, r1, r4
    29d2:	e028      	b.n	2a26 <__aeabi_dsub+0x416>
    29d4:	464a      	mov	r2, r9
    29d6:	4643      	mov	r3, r8
    29d8:	464d      	mov	r5, r9
    29da:	431a      	orrs	r2, r3
    29dc:	d000      	beq.n	29e0 <__aeabi_dsub+0x3d0>
    29de:	e6a5      	b.n	272c <__aeabi_dsub+0x11c>
    29e0:	2300      	movs	r3, #0
    29e2:	2400      	movs	r4, #0
    29e4:	2500      	movs	r5, #0
    29e6:	e6de      	b.n	27a6 <__aeabi_dsub+0x196>
    29e8:	2a1f      	cmp	r2, #31
    29ea:	dc5a      	bgt.n	2aa2 <__aeabi_dsub+0x492>
    29ec:	4666      	mov	r6, ip
    29ee:	2220      	movs	r2, #32
    29f0:	1b92      	subs	r2, r2, r6
    29f2:	0006      	movs	r6, r0
    29f4:	4096      	lsls	r6, r2
    29f6:	4691      	mov	r9, r2
    29f8:	46b0      	mov	r8, r6
    29fa:	4662      	mov	r2, ip
    29fc:	000e      	movs	r6, r1
    29fe:	40d6      	lsrs	r6, r2
    2a00:	4642      	mov	r2, r8
    2a02:	4316      	orrs	r6, r2
    2a04:	464a      	mov	r2, r9
    2a06:	4091      	lsls	r1, r2
    2a08:	1e4a      	subs	r2, r1, #1
    2a0a:	4191      	sbcs	r1, r2
    2a0c:	0002      	movs	r2, r0
    2a0e:	4660      	mov	r0, ip
    2a10:	4331      	orrs	r1, r6
    2a12:	40c2      	lsrs	r2, r0
    2a14:	e6e4      	b.n	27e0 <__aeabi_dsub+0x1d0>
    2a16:	003c      	movs	r4, r7
    2a18:	432c      	orrs	r4, r5
    2a1a:	d05a      	beq.n	2ad2 <__aeabi_dsub+0x4c2>
    2a1c:	43f4      	mvns	r4, r6
    2a1e:	46a1      	mov	r9, r4
    2a20:	2c00      	cmp	r4, #0
    2a22:	d152      	bne.n	2aca <__aeabi_dsub+0x4ba>
    2a24:	1b4d      	subs	r5, r1, r5
    2a26:	42a9      	cmp	r1, r5
    2a28:	4189      	sbcs	r1, r1
    2a2a:	1bc7      	subs	r7, r0, r7
    2a2c:	4249      	negs	r1, r1
    2a2e:	1a7f      	subs	r7, r7, r1
    2a30:	0014      	movs	r4, r2
    2a32:	469a      	mov	sl, r3
    2a34:	e675      	b.n	2722 <__aeabi_dsub+0x112>
    2a36:	4a9e      	ldr	r2, [pc, #632]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2a38:	4294      	cmp	r4, r2
    2a3a:	d000      	beq.n	2a3e <__aeabi_dsub+0x42e>
    2a3c:	e6c7      	b.n	27ce <__aeabi_dsub+0x1be>
    2a3e:	e613      	b.n	2668 <__aeabi_dsub+0x58>
    2a40:	2200      	movs	r2, #0
    2a42:	e77f      	b.n	2944 <__aeabi_dsub+0x334>
    2a44:	2000      	movs	r0, #0
    2a46:	e78f      	b.n	2968 <__aeabi_dsub+0x358>
    2a48:	2c00      	cmp	r4, #0
    2a4a:	d000      	beq.n	2a4e <__aeabi_dsub+0x43e>
    2a4c:	e0c8      	b.n	2be0 <__aeabi_dsub+0x5d0>
    2a4e:	003b      	movs	r3, r7
    2a50:	432b      	orrs	r3, r5
    2a52:	d100      	bne.n	2a56 <__aeabi_dsub+0x446>
    2a54:	e10f      	b.n	2c76 <__aeabi_dsub+0x666>
    2a56:	0003      	movs	r3, r0
    2a58:	430b      	orrs	r3, r1
    2a5a:	d100      	bne.n	2a5e <__aeabi_dsub+0x44e>
    2a5c:	e604      	b.n	2668 <__aeabi_dsub+0x58>
    2a5e:	1869      	adds	r1, r5, r1
    2a60:	42a9      	cmp	r1, r5
    2a62:	419b      	sbcs	r3, r3
    2a64:	183f      	adds	r7, r7, r0
    2a66:	425b      	negs	r3, r3
    2a68:	19df      	adds	r7, r3, r7
    2a6a:	023b      	lsls	r3, r7, #8
    2a6c:	d400      	bmi.n	2a70 <__aeabi_dsub+0x460>
    2a6e:	e11a      	b.n	2ca6 <__aeabi_dsub+0x696>
    2a70:	4b90      	ldr	r3, [pc, #576]	; (2cb4 <__aeabi_dsub+0x6a4>)
    2a72:	000d      	movs	r5, r1
    2a74:	401f      	ands	r7, r3
    2a76:	4664      	mov	r4, ip
    2a78:	e5f6      	b.n	2668 <__aeabi_dsub+0x58>
    2a7a:	469a      	mov	sl, r3
    2a7c:	e689      	b.n	2792 <__aeabi_dsub+0x182>
    2a7e:	003a      	movs	r2, r7
    2a80:	432a      	orrs	r2, r5
    2a82:	2c00      	cmp	r4, #0
    2a84:	d15c      	bne.n	2b40 <__aeabi_dsub+0x530>
    2a86:	2a00      	cmp	r2, #0
    2a88:	d175      	bne.n	2b76 <__aeabi_dsub+0x566>
    2a8a:	0002      	movs	r2, r0
    2a8c:	430a      	orrs	r2, r1
    2a8e:	d100      	bne.n	2a92 <__aeabi_dsub+0x482>
    2a90:	e0ca      	b.n	2c28 <__aeabi_dsub+0x618>
    2a92:	0007      	movs	r7, r0
    2a94:	000d      	movs	r5, r1
    2a96:	469a      	mov	sl, r3
    2a98:	e5e6      	b.n	2668 <__aeabi_dsub+0x58>
    2a9a:	4664      	mov	r4, ip
    2a9c:	2200      	movs	r2, #0
    2a9e:	2500      	movs	r5, #0
    2aa0:	e681      	b.n	27a6 <__aeabi_dsub+0x196>
    2aa2:	4662      	mov	r2, ip
    2aa4:	0006      	movs	r6, r0
    2aa6:	3a20      	subs	r2, #32
    2aa8:	40d6      	lsrs	r6, r2
    2aaa:	4662      	mov	r2, ip
    2aac:	46b0      	mov	r8, r6
    2aae:	2a20      	cmp	r2, #32
    2ab0:	d100      	bne.n	2ab4 <__aeabi_dsub+0x4a4>
    2ab2:	e0b7      	b.n	2c24 <__aeabi_dsub+0x614>
    2ab4:	2240      	movs	r2, #64	; 0x40
    2ab6:	4666      	mov	r6, ip
    2ab8:	1b92      	subs	r2, r2, r6
    2aba:	4090      	lsls	r0, r2
    2abc:	4301      	orrs	r1, r0
    2abe:	4642      	mov	r2, r8
    2ac0:	1e48      	subs	r0, r1, #1
    2ac2:	4181      	sbcs	r1, r0
    2ac4:	4311      	orrs	r1, r2
    2ac6:	2200      	movs	r2, #0
    2ac8:	e68a      	b.n	27e0 <__aeabi_dsub+0x1d0>
    2aca:	4c79      	ldr	r4, [pc, #484]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2acc:	42a2      	cmp	r2, r4
    2ace:	d000      	beq.n	2ad2 <__aeabi_dsub+0x4c2>
    2ad0:	e761      	b.n	2996 <__aeabi_dsub+0x386>
    2ad2:	0007      	movs	r7, r0
    2ad4:	000d      	movs	r5, r1
    2ad6:	0014      	movs	r4, r2
    2ad8:	469a      	mov	sl, r3
    2ada:	e5c5      	b.n	2668 <__aeabi_dsub+0x58>
    2adc:	2c00      	cmp	r4, #0
    2ade:	d141      	bne.n	2b64 <__aeabi_dsub+0x554>
    2ae0:	003c      	movs	r4, r7
    2ae2:	432c      	orrs	r4, r5
    2ae4:	d078      	beq.n	2bd8 <__aeabi_dsub+0x5c8>
    2ae6:	43f4      	mvns	r4, r6
    2ae8:	46a1      	mov	r9, r4
    2aea:	2c00      	cmp	r4, #0
    2aec:	d020      	beq.n	2b30 <__aeabi_dsub+0x520>
    2aee:	4c70      	ldr	r4, [pc, #448]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2af0:	42a2      	cmp	r2, r4
    2af2:	d071      	beq.n	2bd8 <__aeabi_dsub+0x5c8>
    2af4:	464c      	mov	r4, r9
    2af6:	2c38      	cmp	r4, #56	; 0x38
    2af8:	dd00      	ble.n	2afc <__aeabi_dsub+0x4ec>
    2afa:	e0b2      	b.n	2c62 <__aeabi_dsub+0x652>
    2afc:	2c1f      	cmp	r4, #31
    2afe:	dd00      	ble.n	2b02 <__aeabi_dsub+0x4f2>
    2b00:	e0bc      	b.n	2c7c <__aeabi_dsub+0x66c>
    2b02:	2620      	movs	r6, #32
    2b04:	1b34      	subs	r4, r6, r4
    2b06:	46a2      	mov	sl, r4
    2b08:	003c      	movs	r4, r7
    2b0a:	4656      	mov	r6, sl
    2b0c:	40b4      	lsls	r4, r6
    2b0e:	464e      	mov	r6, r9
    2b10:	46a0      	mov	r8, r4
    2b12:	002c      	movs	r4, r5
    2b14:	40f4      	lsrs	r4, r6
    2b16:	46a4      	mov	ip, r4
    2b18:	4644      	mov	r4, r8
    2b1a:	4666      	mov	r6, ip
    2b1c:	4334      	orrs	r4, r6
    2b1e:	46a4      	mov	ip, r4
    2b20:	4654      	mov	r4, sl
    2b22:	40a5      	lsls	r5, r4
    2b24:	4664      	mov	r4, ip
    2b26:	1e6e      	subs	r6, r5, #1
    2b28:	41b5      	sbcs	r5, r6
    2b2a:	4325      	orrs	r5, r4
    2b2c:	464c      	mov	r4, r9
    2b2e:	40e7      	lsrs	r7, r4
    2b30:	186d      	adds	r5, r5, r1
    2b32:	428d      	cmp	r5, r1
    2b34:	4189      	sbcs	r1, r1
    2b36:	183f      	adds	r7, r7, r0
    2b38:	4249      	negs	r1, r1
    2b3a:	19cf      	adds	r7, r1, r7
    2b3c:	0014      	movs	r4, r2
    2b3e:	e656      	b.n	27ee <__aeabi_dsub+0x1de>
    2b40:	2a00      	cmp	r2, #0
    2b42:	d12f      	bne.n	2ba4 <__aeabi_dsub+0x594>
    2b44:	0002      	movs	r2, r0
    2b46:	430a      	orrs	r2, r1
    2b48:	d100      	bne.n	2b4c <__aeabi_dsub+0x53c>
    2b4a:	e084      	b.n	2c56 <__aeabi_dsub+0x646>
    2b4c:	0007      	movs	r7, r0
    2b4e:	000d      	movs	r5, r1
    2b50:	469a      	mov	sl, r3
    2b52:	4c57      	ldr	r4, [pc, #348]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2b54:	e588      	b.n	2668 <__aeabi_dsub+0x58>
    2b56:	433d      	orrs	r5, r7
    2b58:	1e6f      	subs	r7, r5, #1
    2b5a:	41bd      	sbcs	r5, r7
    2b5c:	b2ec      	uxtb	r4, r5
    2b5e:	2700      	movs	r7, #0
    2b60:	1b0d      	subs	r5, r1, r4
    2b62:	e760      	b.n	2a26 <__aeabi_dsub+0x416>
    2b64:	4c52      	ldr	r4, [pc, #328]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2b66:	42a2      	cmp	r2, r4
    2b68:	d036      	beq.n	2bd8 <__aeabi_dsub+0x5c8>
    2b6a:	4274      	negs	r4, r6
    2b6c:	2680      	movs	r6, #128	; 0x80
    2b6e:	0436      	lsls	r6, r6, #16
    2b70:	46a1      	mov	r9, r4
    2b72:	4337      	orrs	r7, r6
    2b74:	e7be      	b.n	2af4 <__aeabi_dsub+0x4e4>
    2b76:	0002      	movs	r2, r0
    2b78:	430a      	orrs	r2, r1
    2b7a:	d100      	bne.n	2b7e <__aeabi_dsub+0x56e>
    2b7c:	e574      	b.n	2668 <__aeabi_dsub+0x58>
    2b7e:	1a6a      	subs	r2, r5, r1
    2b80:	4690      	mov	r8, r2
    2b82:	4545      	cmp	r5, r8
    2b84:	41b6      	sbcs	r6, r6
    2b86:	1a3a      	subs	r2, r7, r0
    2b88:	4276      	negs	r6, r6
    2b8a:	1b92      	subs	r2, r2, r6
    2b8c:	4694      	mov	ip, r2
    2b8e:	0212      	lsls	r2, r2, #8
    2b90:	d400      	bmi.n	2b94 <__aeabi_dsub+0x584>
    2b92:	e5f7      	b.n	2784 <__aeabi_dsub+0x174>
    2b94:	1b4d      	subs	r5, r1, r5
    2b96:	42a9      	cmp	r1, r5
    2b98:	4189      	sbcs	r1, r1
    2b9a:	1bc7      	subs	r7, r0, r7
    2b9c:	4249      	negs	r1, r1
    2b9e:	1a7f      	subs	r7, r7, r1
    2ba0:	469a      	mov	sl, r3
    2ba2:	e561      	b.n	2668 <__aeabi_dsub+0x58>
    2ba4:	0002      	movs	r2, r0
    2ba6:	430a      	orrs	r2, r1
    2ba8:	d03a      	beq.n	2c20 <__aeabi_dsub+0x610>
    2baa:	08ed      	lsrs	r5, r5, #3
    2bac:	077c      	lsls	r4, r7, #29
    2bae:	432c      	orrs	r4, r5
    2bb0:	2580      	movs	r5, #128	; 0x80
    2bb2:	08fa      	lsrs	r2, r7, #3
    2bb4:	032d      	lsls	r5, r5, #12
    2bb6:	422a      	tst	r2, r5
    2bb8:	d008      	beq.n	2bcc <__aeabi_dsub+0x5bc>
    2bba:	08c7      	lsrs	r7, r0, #3
    2bbc:	422f      	tst	r7, r5
    2bbe:	d105      	bne.n	2bcc <__aeabi_dsub+0x5bc>
    2bc0:	0745      	lsls	r5, r0, #29
    2bc2:	002c      	movs	r4, r5
    2bc4:	003a      	movs	r2, r7
    2bc6:	469a      	mov	sl, r3
    2bc8:	08c9      	lsrs	r1, r1, #3
    2bca:	430c      	orrs	r4, r1
    2bcc:	0f67      	lsrs	r7, r4, #29
    2bce:	00d2      	lsls	r2, r2, #3
    2bd0:	00e5      	lsls	r5, r4, #3
    2bd2:	4317      	orrs	r7, r2
    2bd4:	4c36      	ldr	r4, [pc, #216]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2bd6:	e547      	b.n	2668 <__aeabi_dsub+0x58>
    2bd8:	0007      	movs	r7, r0
    2bda:	000d      	movs	r5, r1
    2bdc:	0014      	movs	r4, r2
    2bde:	e543      	b.n	2668 <__aeabi_dsub+0x58>
    2be0:	003a      	movs	r2, r7
    2be2:	432a      	orrs	r2, r5
    2be4:	d043      	beq.n	2c6e <__aeabi_dsub+0x65e>
    2be6:	0002      	movs	r2, r0
    2be8:	430a      	orrs	r2, r1
    2bea:	d019      	beq.n	2c20 <__aeabi_dsub+0x610>
    2bec:	08ed      	lsrs	r5, r5, #3
    2bee:	077c      	lsls	r4, r7, #29
    2bf0:	432c      	orrs	r4, r5
    2bf2:	2580      	movs	r5, #128	; 0x80
    2bf4:	08fa      	lsrs	r2, r7, #3
    2bf6:	032d      	lsls	r5, r5, #12
    2bf8:	422a      	tst	r2, r5
    2bfa:	d007      	beq.n	2c0c <__aeabi_dsub+0x5fc>
    2bfc:	08c6      	lsrs	r6, r0, #3
    2bfe:	422e      	tst	r6, r5
    2c00:	d104      	bne.n	2c0c <__aeabi_dsub+0x5fc>
    2c02:	0747      	lsls	r7, r0, #29
    2c04:	003c      	movs	r4, r7
    2c06:	0032      	movs	r2, r6
    2c08:	08c9      	lsrs	r1, r1, #3
    2c0a:	430c      	orrs	r4, r1
    2c0c:	00d7      	lsls	r7, r2, #3
    2c0e:	0f62      	lsrs	r2, r4, #29
    2c10:	00e5      	lsls	r5, r4, #3
    2c12:	4317      	orrs	r7, r2
    2c14:	469a      	mov	sl, r3
    2c16:	4c26      	ldr	r4, [pc, #152]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2c18:	e526      	b.n	2668 <__aeabi_dsub+0x58>
    2c1a:	2200      	movs	r2, #0
    2c1c:	2500      	movs	r5, #0
    2c1e:	e544      	b.n	26aa <__aeabi_dsub+0x9a>
    2c20:	4c23      	ldr	r4, [pc, #140]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2c22:	e521      	b.n	2668 <__aeabi_dsub+0x58>
    2c24:	2000      	movs	r0, #0
    2c26:	e749      	b.n	2abc <__aeabi_dsub+0x4ac>
    2c28:	2300      	movs	r3, #0
    2c2a:	2500      	movs	r5, #0
    2c2c:	e5bb      	b.n	27a6 <__aeabi_dsub+0x196>
    2c2e:	464c      	mov	r4, r9
    2c30:	003e      	movs	r6, r7
    2c32:	3c20      	subs	r4, #32
    2c34:	40e6      	lsrs	r6, r4
    2c36:	464c      	mov	r4, r9
    2c38:	46b4      	mov	ip, r6
    2c3a:	2c20      	cmp	r4, #32
    2c3c:	d031      	beq.n	2ca2 <__aeabi_dsub+0x692>
    2c3e:	2440      	movs	r4, #64	; 0x40
    2c40:	464e      	mov	r6, r9
    2c42:	1ba6      	subs	r6, r4, r6
    2c44:	40b7      	lsls	r7, r6
    2c46:	433d      	orrs	r5, r7
    2c48:	1e6c      	subs	r4, r5, #1
    2c4a:	41a5      	sbcs	r5, r4
    2c4c:	4664      	mov	r4, ip
    2c4e:	432c      	orrs	r4, r5
    2c50:	2700      	movs	r7, #0
    2c52:	1b0d      	subs	r5, r1, r4
    2c54:	e6e7      	b.n	2a26 <__aeabi_dsub+0x416>
    2c56:	2280      	movs	r2, #128	; 0x80
    2c58:	2300      	movs	r3, #0
    2c5a:	0312      	lsls	r2, r2, #12
    2c5c:	4c14      	ldr	r4, [pc, #80]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2c5e:	2500      	movs	r5, #0
    2c60:	e5a1      	b.n	27a6 <__aeabi_dsub+0x196>
    2c62:	433d      	orrs	r5, r7
    2c64:	1e6f      	subs	r7, r5, #1
    2c66:	41bd      	sbcs	r5, r7
    2c68:	2700      	movs	r7, #0
    2c6a:	b2ed      	uxtb	r5, r5
    2c6c:	e760      	b.n	2b30 <__aeabi_dsub+0x520>
    2c6e:	0007      	movs	r7, r0
    2c70:	000d      	movs	r5, r1
    2c72:	4c0f      	ldr	r4, [pc, #60]	; (2cb0 <__aeabi_dsub+0x6a0>)
    2c74:	e4f8      	b.n	2668 <__aeabi_dsub+0x58>
    2c76:	0007      	movs	r7, r0
    2c78:	000d      	movs	r5, r1
    2c7a:	e4f5      	b.n	2668 <__aeabi_dsub+0x58>
    2c7c:	464e      	mov	r6, r9
    2c7e:	003c      	movs	r4, r7
    2c80:	3e20      	subs	r6, #32
    2c82:	40f4      	lsrs	r4, r6
    2c84:	46a0      	mov	r8, r4
    2c86:	464c      	mov	r4, r9
    2c88:	2c20      	cmp	r4, #32
    2c8a:	d00e      	beq.n	2caa <__aeabi_dsub+0x69a>
    2c8c:	2440      	movs	r4, #64	; 0x40
    2c8e:	464e      	mov	r6, r9
    2c90:	1ba4      	subs	r4, r4, r6
    2c92:	40a7      	lsls	r7, r4
    2c94:	433d      	orrs	r5, r7
    2c96:	1e6f      	subs	r7, r5, #1
    2c98:	41bd      	sbcs	r5, r7
    2c9a:	4644      	mov	r4, r8
    2c9c:	2700      	movs	r7, #0
    2c9e:	4325      	orrs	r5, r4
    2ca0:	e746      	b.n	2b30 <__aeabi_dsub+0x520>
    2ca2:	2700      	movs	r7, #0
    2ca4:	e7cf      	b.n	2c46 <__aeabi_dsub+0x636>
    2ca6:	000d      	movs	r5, r1
    2ca8:	e573      	b.n	2792 <__aeabi_dsub+0x182>
    2caa:	2700      	movs	r7, #0
    2cac:	e7f2      	b.n	2c94 <__aeabi_dsub+0x684>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	000007ff 	.word	0x000007ff
    2cb4:	ff7fffff 	.word	0xff7fffff

00002cb8 <__aeabi_d2iz>:
    2cb8:	030b      	lsls	r3, r1, #12
    2cba:	b530      	push	{r4, r5, lr}
    2cbc:	4d13      	ldr	r5, [pc, #76]	; (2d0c <__aeabi_d2iz+0x54>)
    2cbe:	0b1a      	lsrs	r2, r3, #12
    2cc0:	004b      	lsls	r3, r1, #1
    2cc2:	0d5b      	lsrs	r3, r3, #21
    2cc4:	0fc9      	lsrs	r1, r1, #31
    2cc6:	2400      	movs	r4, #0
    2cc8:	42ab      	cmp	r3, r5
    2cca:	dd11      	ble.n	2cf0 <__aeabi_d2iz+0x38>
    2ccc:	4c10      	ldr	r4, [pc, #64]	; (2d10 <__aeabi_d2iz+0x58>)
    2cce:	42a3      	cmp	r3, r4
    2cd0:	dc10      	bgt.n	2cf4 <__aeabi_d2iz+0x3c>
    2cd2:	2480      	movs	r4, #128	; 0x80
    2cd4:	0364      	lsls	r4, r4, #13
    2cd6:	4322      	orrs	r2, r4
    2cd8:	4c0e      	ldr	r4, [pc, #56]	; (2d14 <__aeabi_d2iz+0x5c>)
    2cda:	1ae4      	subs	r4, r4, r3
    2cdc:	2c1f      	cmp	r4, #31
    2cde:	dd0c      	ble.n	2cfa <__aeabi_d2iz+0x42>
    2ce0:	480d      	ldr	r0, [pc, #52]	; (2d18 <__aeabi_d2iz+0x60>)
    2ce2:	1ac3      	subs	r3, r0, r3
    2ce4:	40da      	lsrs	r2, r3
    2ce6:	0013      	movs	r3, r2
    2ce8:	425c      	negs	r4, r3
    2cea:	2900      	cmp	r1, #0
    2cec:	d100      	bne.n	2cf0 <__aeabi_d2iz+0x38>
    2cee:	001c      	movs	r4, r3
    2cf0:	0020      	movs	r0, r4
    2cf2:	bd30      	pop	{r4, r5, pc}
    2cf4:	4b09      	ldr	r3, [pc, #36]	; (2d1c <__aeabi_d2iz+0x64>)
    2cf6:	18cc      	adds	r4, r1, r3
    2cf8:	e7fa      	b.n	2cf0 <__aeabi_d2iz+0x38>
    2cfa:	40e0      	lsrs	r0, r4
    2cfc:	4c08      	ldr	r4, [pc, #32]	; (2d20 <__aeabi_d2iz+0x68>)
    2cfe:	46a4      	mov	ip, r4
    2d00:	4463      	add	r3, ip
    2d02:	409a      	lsls	r2, r3
    2d04:	0013      	movs	r3, r2
    2d06:	4303      	orrs	r3, r0
    2d08:	e7ee      	b.n	2ce8 <__aeabi_d2iz+0x30>
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	000003fe 	.word	0x000003fe
    2d10:	0000041d 	.word	0x0000041d
    2d14:	00000433 	.word	0x00000433
    2d18:	00000413 	.word	0x00000413
    2d1c:	7fffffff 	.word	0x7fffffff
    2d20:	fffffbed 	.word	0xfffffbed

00002d24 <__aeabi_i2d>:
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	2800      	cmp	r0, #0
    2d28:	d030      	beq.n	2d8c <__aeabi_i2d+0x68>
    2d2a:	17c3      	asrs	r3, r0, #31
    2d2c:	18c4      	adds	r4, r0, r3
    2d2e:	405c      	eors	r4, r3
    2d30:	0fc5      	lsrs	r5, r0, #31
    2d32:	0020      	movs	r0, r4
    2d34:	f000 f950 	bl	2fd8 <__clzsi2>
    2d38:	4b17      	ldr	r3, [pc, #92]	; (2d98 <__aeabi_i2d+0x74>)
    2d3a:	4a18      	ldr	r2, [pc, #96]	; (2d9c <__aeabi_i2d+0x78>)
    2d3c:	1a1b      	subs	r3, r3, r0
    2d3e:	1ad2      	subs	r2, r2, r3
    2d40:	2a1f      	cmp	r2, #31
    2d42:	dd18      	ble.n	2d76 <__aeabi_i2d+0x52>
    2d44:	4a16      	ldr	r2, [pc, #88]	; (2da0 <__aeabi_i2d+0x7c>)
    2d46:	1ad2      	subs	r2, r2, r3
    2d48:	4094      	lsls	r4, r2
    2d4a:	2200      	movs	r2, #0
    2d4c:	0324      	lsls	r4, r4, #12
    2d4e:	055b      	lsls	r3, r3, #21
    2d50:	0b24      	lsrs	r4, r4, #12
    2d52:	0d5b      	lsrs	r3, r3, #21
    2d54:	2100      	movs	r1, #0
    2d56:	0010      	movs	r0, r2
    2d58:	0324      	lsls	r4, r4, #12
    2d5a:	0d0a      	lsrs	r2, r1, #20
    2d5c:	0512      	lsls	r2, r2, #20
    2d5e:	0b24      	lsrs	r4, r4, #12
    2d60:	4314      	orrs	r4, r2
    2d62:	4a10      	ldr	r2, [pc, #64]	; (2da4 <__aeabi_i2d+0x80>)
    2d64:	051b      	lsls	r3, r3, #20
    2d66:	4014      	ands	r4, r2
    2d68:	431c      	orrs	r4, r3
    2d6a:	0064      	lsls	r4, r4, #1
    2d6c:	07ed      	lsls	r5, r5, #31
    2d6e:	0864      	lsrs	r4, r4, #1
    2d70:	432c      	orrs	r4, r5
    2d72:	0021      	movs	r1, r4
    2d74:	bd70      	pop	{r4, r5, r6, pc}
    2d76:	0021      	movs	r1, r4
    2d78:	4091      	lsls	r1, r2
    2d7a:	000a      	movs	r2, r1
    2d7c:	210b      	movs	r1, #11
    2d7e:	1a08      	subs	r0, r1, r0
    2d80:	40c4      	lsrs	r4, r0
    2d82:	055b      	lsls	r3, r3, #21
    2d84:	0324      	lsls	r4, r4, #12
    2d86:	0b24      	lsrs	r4, r4, #12
    2d88:	0d5b      	lsrs	r3, r3, #21
    2d8a:	e7e3      	b.n	2d54 <__aeabi_i2d+0x30>
    2d8c:	2500      	movs	r5, #0
    2d8e:	2300      	movs	r3, #0
    2d90:	2400      	movs	r4, #0
    2d92:	2200      	movs	r2, #0
    2d94:	e7de      	b.n	2d54 <__aeabi_i2d+0x30>
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	0000041e 	.word	0x0000041e
    2d9c:	00000433 	.word	0x00000433
    2da0:	00000413 	.word	0x00000413
    2da4:	800fffff 	.word	0x800fffff

00002da8 <__aeabi_ui2d>:
    2da8:	b570      	push	{r4, r5, r6, lr}
    2daa:	1e05      	subs	r5, r0, #0
    2dac:	d028      	beq.n	2e00 <__aeabi_ui2d+0x58>
    2dae:	f000 f913 	bl	2fd8 <__clzsi2>
    2db2:	4b15      	ldr	r3, [pc, #84]	; (2e08 <__aeabi_ui2d+0x60>)
    2db4:	4a15      	ldr	r2, [pc, #84]	; (2e0c <__aeabi_ui2d+0x64>)
    2db6:	1a1b      	subs	r3, r3, r0
    2db8:	1ad2      	subs	r2, r2, r3
    2dba:	2a1f      	cmp	r2, #31
    2dbc:	dd16      	ble.n	2dec <__aeabi_ui2d+0x44>
    2dbe:	002c      	movs	r4, r5
    2dc0:	4a13      	ldr	r2, [pc, #76]	; (2e10 <__aeabi_ui2d+0x68>)
    2dc2:	2500      	movs	r5, #0
    2dc4:	1ad2      	subs	r2, r2, r3
    2dc6:	4094      	lsls	r4, r2
    2dc8:	055a      	lsls	r2, r3, #21
    2dca:	0324      	lsls	r4, r4, #12
    2dcc:	0b24      	lsrs	r4, r4, #12
    2dce:	0d52      	lsrs	r2, r2, #21
    2dd0:	2100      	movs	r1, #0
    2dd2:	0324      	lsls	r4, r4, #12
    2dd4:	0d0b      	lsrs	r3, r1, #20
    2dd6:	0b24      	lsrs	r4, r4, #12
    2dd8:	051b      	lsls	r3, r3, #20
    2dda:	4323      	orrs	r3, r4
    2ddc:	4c0d      	ldr	r4, [pc, #52]	; (2e14 <__aeabi_ui2d+0x6c>)
    2dde:	0512      	lsls	r2, r2, #20
    2de0:	4023      	ands	r3, r4
    2de2:	4313      	orrs	r3, r2
    2de4:	005b      	lsls	r3, r3, #1
    2de6:	0028      	movs	r0, r5
    2de8:	0859      	lsrs	r1, r3, #1
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	210b      	movs	r1, #11
    2dee:	002c      	movs	r4, r5
    2df0:	1a08      	subs	r0, r1, r0
    2df2:	40c4      	lsrs	r4, r0
    2df4:	4095      	lsls	r5, r2
    2df6:	0324      	lsls	r4, r4, #12
    2df8:	055a      	lsls	r2, r3, #21
    2dfa:	0b24      	lsrs	r4, r4, #12
    2dfc:	0d52      	lsrs	r2, r2, #21
    2dfe:	e7e7      	b.n	2dd0 <__aeabi_ui2d+0x28>
    2e00:	2200      	movs	r2, #0
    2e02:	2400      	movs	r4, #0
    2e04:	e7e4      	b.n	2dd0 <__aeabi_ui2d+0x28>
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	0000041e 	.word	0x0000041e
    2e0c:	00000433 	.word	0x00000433
    2e10:	00000413 	.word	0x00000413
    2e14:	800fffff 	.word	0x800fffff

00002e18 <__aeabi_f2d>:
    2e18:	0042      	lsls	r2, r0, #1
    2e1a:	0e12      	lsrs	r2, r2, #24
    2e1c:	1c51      	adds	r1, r2, #1
    2e1e:	0243      	lsls	r3, r0, #9
    2e20:	b2c9      	uxtb	r1, r1
    2e22:	b570      	push	{r4, r5, r6, lr}
    2e24:	0a5d      	lsrs	r5, r3, #9
    2e26:	0fc4      	lsrs	r4, r0, #31
    2e28:	2901      	cmp	r1, #1
    2e2a:	dd15      	ble.n	2e58 <__aeabi_f2d+0x40>
    2e2c:	21e0      	movs	r1, #224	; 0xe0
    2e2e:	0089      	lsls	r1, r1, #2
    2e30:	468c      	mov	ip, r1
    2e32:	076d      	lsls	r5, r5, #29
    2e34:	0b1b      	lsrs	r3, r3, #12
    2e36:	4462      	add	r2, ip
    2e38:	2100      	movs	r1, #0
    2e3a:	0028      	movs	r0, r5
    2e3c:	0d0d      	lsrs	r5, r1, #20
    2e3e:	052d      	lsls	r5, r5, #20
    2e40:	432b      	orrs	r3, r5
    2e42:	4d1c      	ldr	r5, [pc, #112]	; (2eb4 <__aeabi_f2d+0x9c>)
    2e44:	0552      	lsls	r2, r2, #21
    2e46:	402b      	ands	r3, r5
    2e48:	0852      	lsrs	r2, r2, #1
    2e4a:	4313      	orrs	r3, r2
    2e4c:	005b      	lsls	r3, r3, #1
    2e4e:	07e4      	lsls	r4, r4, #31
    2e50:	085b      	lsrs	r3, r3, #1
    2e52:	4323      	orrs	r3, r4
    2e54:	0019      	movs	r1, r3
    2e56:	bd70      	pop	{r4, r5, r6, pc}
    2e58:	2a00      	cmp	r2, #0
    2e5a:	d115      	bne.n	2e88 <__aeabi_f2d+0x70>
    2e5c:	2d00      	cmp	r5, #0
    2e5e:	d01f      	beq.n	2ea0 <__aeabi_f2d+0x88>
    2e60:	0028      	movs	r0, r5
    2e62:	f000 f8b9 	bl	2fd8 <__clzsi2>
    2e66:	280a      	cmp	r0, #10
    2e68:	dc1d      	bgt.n	2ea6 <__aeabi_f2d+0x8e>
    2e6a:	230b      	movs	r3, #11
    2e6c:	002a      	movs	r2, r5
    2e6e:	1a1b      	subs	r3, r3, r0
    2e70:	40da      	lsrs	r2, r3
    2e72:	0013      	movs	r3, r2
    2e74:	0002      	movs	r2, r0
    2e76:	3215      	adds	r2, #21
    2e78:	4095      	lsls	r5, r2
    2e7a:	4a0f      	ldr	r2, [pc, #60]	; (2eb8 <__aeabi_f2d+0xa0>)
    2e7c:	031b      	lsls	r3, r3, #12
    2e7e:	1a12      	subs	r2, r2, r0
    2e80:	0552      	lsls	r2, r2, #21
    2e82:	0b1b      	lsrs	r3, r3, #12
    2e84:	0d52      	lsrs	r2, r2, #21
    2e86:	e7d7      	b.n	2e38 <__aeabi_f2d+0x20>
    2e88:	2d00      	cmp	r5, #0
    2e8a:	d006      	beq.n	2e9a <__aeabi_f2d+0x82>
    2e8c:	2280      	movs	r2, #128	; 0x80
    2e8e:	0b1b      	lsrs	r3, r3, #12
    2e90:	0312      	lsls	r2, r2, #12
    2e92:	4313      	orrs	r3, r2
    2e94:	076d      	lsls	r5, r5, #29
    2e96:	4a09      	ldr	r2, [pc, #36]	; (2ebc <__aeabi_f2d+0xa4>)
    2e98:	e7ce      	b.n	2e38 <__aeabi_f2d+0x20>
    2e9a:	4a08      	ldr	r2, [pc, #32]	; (2ebc <__aeabi_f2d+0xa4>)
    2e9c:	2300      	movs	r3, #0
    2e9e:	e7cb      	b.n	2e38 <__aeabi_f2d+0x20>
    2ea0:	2200      	movs	r2, #0
    2ea2:	2300      	movs	r3, #0
    2ea4:	e7c8      	b.n	2e38 <__aeabi_f2d+0x20>
    2ea6:	0003      	movs	r3, r0
    2ea8:	3b0b      	subs	r3, #11
    2eaa:	409d      	lsls	r5, r3
    2eac:	002b      	movs	r3, r5
    2eae:	2500      	movs	r5, #0
    2eb0:	e7e3      	b.n	2e7a <__aeabi_f2d+0x62>
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	800fffff 	.word	0x800fffff
    2eb8:	00000389 	.word	0x00000389
    2ebc:	000007ff 	.word	0x000007ff

00002ec0 <__aeabi_d2f>:
    2ec0:	004b      	lsls	r3, r1, #1
    2ec2:	b570      	push	{r4, r5, r6, lr}
    2ec4:	0d5e      	lsrs	r6, r3, #21
    2ec6:	030c      	lsls	r4, r1, #12
    2ec8:	1c75      	adds	r5, r6, #1
    2eca:	0a64      	lsrs	r4, r4, #9
    2ecc:	0f42      	lsrs	r2, r0, #29
    2ece:	056d      	lsls	r5, r5, #21
    2ed0:	4322      	orrs	r2, r4
    2ed2:	0fc9      	lsrs	r1, r1, #31
    2ed4:	00c4      	lsls	r4, r0, #3
    2ed6:	0d6d      	lsrs	r5, r5, #21
    2ed8:	2d01      	cmp	r5, #1
    2eda:	dd2a      	ble.n	2f32 <__aeabi_d2f+0x72>
    2edc:	4b3b      	ldr	r3, [pc, #236]	; (2fcc <__aeabi_d2f+0x10c>)
    2ede:	18f3      	adds	r3, r6, r3
    2ee0:	2bfe      	cmp	r3, #254	; 0xfe
    2ee2:	dc1a      	bgt.n	2f1a <__aeabi_d2f+0x5a>
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	dd42      	ble.n	2f6e <__aeabi_d2f+0xae>
    2ee8:	0180      	lsls	r0, r0, #6
    2eea:	1e45      	subs	r5, r0, #1
    2eec:	41a8      	sbcs	r0, r5
    2eee:	00d2      	lsls	r2, r2, #3
    2ef0:	4310      	orrs	r0, r2
    2ef2:	0f62      	lsrs	r2, r4, #29
    2ef4:	4302      	orrs	r2, r0
    2ef6:	0750      	lsls	r0, r2, #29
    2ef8:	d004      	beq.n	2f04 <__aeabi_d2f+0x44>
    2efa:	200f      	movs	r0, #15
    2efc:	4010      	ands	r0, r2
    2efe:	2804      	cmp	r0, #4
    2f00:	d000      	beq.n	2f04 <__aeabi_d2f+0x44>
    2f02:	3204      	adds	r2, #4
    2f04:	2080      	movs	r0, #128	; 0x80
    2f06:	04c0      	lsls	r0, r0, #19
    2f08:	4010      	ands	r0, r2
    2f0a:	d021      	beq.n	2f50 <__aeabi_d2f+0x90>
    2f0c:	3301      	adds	r3, #1
    2f0e:	2bff      	cmp	r3, #255	; 0xff
    2f10:	d003      	beq.n	2f1a <__aeabi_d2f+0x5a>
    2f12:	0192      	lsls	r2, r2, #6
    2f14:	0a52      	lsrs	r2, r2, #9
    2f16:	b2db      	uxtb	r3, r3
    2f18:	e001      	b.n	2f1e <__aeabi_d2f+0x5e>
    2f1a:	23ff      	movs	r3, #255	; 0xff
    2f1c:	2200      	movs	r2, #0
    2f1e:	0252      	lsls	r2, r2, #9
    2f20:	0a52      	lsrs	r2, r2, #9
    2f22:	05db      	lsls	r3, r3, #23
    2f24:	4313      	orrs	r3, r2
    2f26:	005b      	lsls	r3, r3, #1
    2f28:	07c9      	lsls	r1, r1, #31
    2f2a:	085b      	lsrs	r3, r3, #1
    2f2c:	430b      	orrs	r3, r1
    2f2e:	0018      	movs	r0, r3
    2f30:	bd70      	pop	{r4, r5, r6, pc}
    2f32:	2e00      	cmp	r6, #0
    2f34:	d007      	beq.n	2f46 <__aeabi_d2f+0x86>
    2f36:	4314      	orrs	r4, r2
    2f38:	d0ef      	beq.n	2f1a <__aeabi_d2f+0x5a>
    2f3a:	2080      	movs	r0, #128	; 0x80
    2f3c:	00d2      	lsls	r2, r2, #3
    2f3e:	0480      	lsls	r0, r0, #18
    2f40:	4302      	orrs	r2, r0
    2f42:	23ff      	movs	r3, #255	; 0xff
    2f44:	e7d7      	b.n	2ef6 <__aeabi_d2f+0x36>
    2f46:	4322      	orrs	r2, r4
    2f48:	2300      	movs	r3, #0
    2f4a:	2a00      	cmp	r2, #0
    2f4c:	d003      	beq.n	2f56 <__aeabi_d2f+0x96>
    2f4e:	2205      	movs	r2, #5
    2f50:	08d2      	lsrs	r2, r2, #3
    2f52:	2bff      	cmp	r3, #255	; 0xff
    2f54:	d003      	beq.n	2f5e <__aeabi_d2f+0x9e>
    2f56:	0252      	lsls	r2, r2, #9
    2f58:	0a52      	lsrs	r2, r2, #9
    2f5a:	b2db      	uxtb	r3, r3
    2f5c:	e7df      	b.n	2f1e <__aeabi_d2f+0x5e>
    2f5e:	2a00      	cmp	r2, #0
    2f60:	d032      	beq.n	2fc8 <__aeabi_d2f+0x108>
    2f62:	2080      	movs	r0, #128	; 0x80
    2f64:	03c0      	lsls	r0, r0, #15
    2f66:	4302      	orrs	r2, r0
    2f68:	0252      	lsls	r2, r2, #9
    2f6a:	0a52      	lsrs	r2, r2, #9
    2f6c:	e7d7      	b.n	2f1e <__aeabi_d2f+0x5e>
    2f6e:	0018      	movs	r0, r3
    2f70:	3017      	adds	r0, #23
    2f72:	db14      	blt.n	2f9e <__aeabi_d2f+0xde>
    2f74:	2080      	movs	r0, #128	; 0x80
    2f76:	0400      	lsls	r0, r0, #16
    2f78:	4302      	orrs	r2, r0
    2f7a:	201e      	movs	r0, #30
    2f7c:	1ac0      	subs	r0, r0, r3
    2f7e:	281f      	cmp	r0, #31
    2f80:	dc0f      	bgt.n	2fa2 <__aeabi_d2f+0xe2>
    2f82:	0025      	movs	r5, r4
    2f84:	4b12      	ldr	r3, [pc, #72]	; (2fd0 <__aeabi_d2f+0x110>)
    2f86:	18f3      	adds	r3, r6, r3
    2f88:	409d      	lsls	r5, r3
    2f8a:	1e6e      	subs	r6, r5, #1
    2f8c:	41b5      	sbcs	r5, r6
    2f8e:	409a      	lsls	r2, r3
    2f90:	002b      	movs	r3, r5
    2f92:	4313      	orrs	r3, r2
    2f94:	0022      	movs	r2, r4
    2f96:	40c2      	lsrs	r2, r0
    2f98:	431a      	orrs	r2, r3
    2f9a:	2300      	movs	r3, #0
    2f9c:	e7ab      	b.n	2ef6 <__aeabi_d2f+0x36>
    2f9e:	2300      	movs	r3, #0
    2fa0:	e7d5      	b.n	2f4e <__aeabi_d2f+0x8e>
    2fa2:	2502      	movs	r5, #2
    2fa4:	426d      	negs	r5, r5
    2fa6:	1aeb      	subs	r3, r5, r3
    2fa8:	0015      	movs	r5, r2
    2faa:	40dd      	lsrs	r5, r3
    2fac:	2820      	cmp	r0, #32
    2fae:	d009      	beq.n	2fc4 <__aeabi_d2f+0x104>
    2fb0:	4b08      	ldr	r3, [pc, #32]	; (2fd4 <__aeabi_d2f+0x114>)
    2fb2:	18f3      	adds	r3, r6, r3
    2fb4:	409a      	lsls	r2, r3
    2fb6:	4314      	orrs	r4, r2
    2fb8:	1e62      	subs	r2, r4, #1
    2fba:	4194      	sbcs	r4, r2
    2fbc:	0022      	movs	r2, r4
    2fbe:	2300      	movs	r3, #0
    2fc0:	432a      	orrs	r2, r5
    2fc2:	e798      	b.n	2ef6 <__aeabi_d2f+0x36>
    2fc4:	2200      	movs	r2, #0
    2fc6:	e7f6      	b.n	2fb6 <__aeabi_d2f+0xf6>
    2fc8:	2200      	movs	r2, #0
    2fca:	e7a8      	b.n	2f1e <__aeabi_d2f+0x5e>
    2fcc:	fffffc80 	.word	0xfffffc80
    2fd0:	fffffc82 	.word	0xfffffc82
    2fd4:	fffffca2 	.word	0xfffffca2

00002fd8 <__clzsi2>:
    2fd8:	211c      	movs	r1, #28
    2fda:	2301      	movs	r3, #1
    2fdc:	041b      	lsls	r3, r3, #16
    2fde:	4298      	cmp	r0, r3
    2fe0:	d301      	bcc.n	2fe6 <__clzsi2+0xe>
    2fe2:	0c00      	lsrs	r0, r0, #16
    2fe4:	3910      	subs	r1, #16
    2fe6:	0a1b      	lsrs	r3, r3, #8
    2fe8:	4298      	cmp	r0, r3
    2fea:	d301      	bcc.n	2ff0 <__clzsi2+0x18>
    2fec:	0a00      	lsrs	r0, r0, #8
    2fee:	3908      	subs	r1, #8
    2ff0:	091b      	lsrs	r3, r3, #4
    2ff2:	4298      	cmp	r0, r3
    2ff4:	d301      	bcc.n	2ffa <__clzsi2+0x22>
    2ff6:	0900      	lsrs	r0, r0, #4
    2ff8:	3904      	subs	r1, #4
    2ffa:	a202      	add	r2, pc, #8	; (adr r2, 3004 <__clzsi2+0x2c>)
    2ffc:	5c10      	ldrb	r0, [r2, r0]
    2ffe:	1840      	adds	r0, r0, r1
    3000:	4770      	bx	lr
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	02020304 	.word	0x02020304
    3008:	01010101 	.word	0x01010101
	...

00003014 <__libc_init_array>:
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	4e0d      	ldr	r6, [pc, #52]	; (304c <__libc_init_array+0x38>)
    3018:	4d0d      	ldr	r5, [pc, #52]	; (3050 <__libc_init_array+0x3c>)
    301a:	2400      	movs	r4, #0
    301c:	1bad      	subs	r5, r5, r6
    301e:	10ad      	asrs	r5, r5, #2
    3020:	d005      	beq.n	302e <__libc_init_array+0x1a>
    3022:	00a3      	lsls	r3, r4, #2
    3024:	58f3      	ldr	r3, [r6, r3]
    3026:	3401      	adds	r4, #1
    3028:	4798      	blx	r3
    302a:	42a5      	cmp	r5, r4
    302c:	d1f9      	bne.n	3022 <__libc_init_array+0xe>
    302e:	f000 f9cd 	bl	33cc <_init>
    3032:	4e08      	ldr	r6, [pc, #32]	; (3054 <__libc_init_array+0x40>)
    3034:	4d08      	ldr	r5, [pc, #32]	; (3058 <__libc_init_array+0x44>)
    3036:	2400      	movs	r4, #0
    3038:	1bad      	subs	r5, r5, r6
    303a:	10ad      	asrs	r5, r5, #2
    303c:	d005      	beq.n	304a <__libc_init_array+0x36>
    303e:	00a3      	lsls	r3, r4, #2
    3040:	58f3      	ldr	r3, [r6, r3]
    3042:	3401      	adds	r4, #1
    3044:	4798      	blx	r3
    3046:	42a5      	cmp	r5, r4
    3048:	d1f9      	bne.n	303e <__libc_init_array+0x2a>
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	000033d8 	.word	0x000033d8
    3050:	000033d8 	.word	0x000033d8
    3054:	000033d8 	.word	0x000033d8
    3058:	000033e0 	.word	0x000033e0

0000305c <memset>:
    305c:	b570      	push	{r4, r5, r6, lr}
    305e:	0783      	lsls	r3, r0, #30
    3060:	d03f      	beq.n	30e2 <memset+0x86>
    3062:	1e54      	subs	r4, r2, #1
    3064:	2a00      	cmp	r2, #0
    3066:	d03b      	beq.n	30e0 <memset+0x84>
    3068:	b2ce      	uxtb	r6, r1
    306a:	0003      	movs	r3, r0
    306c:	2503      	movs	r5, #3
    306e:	e003      	b.n	3078 <memset+0x1c>
    3070:	1e62      	subs	r2, r4, #1
    3072:	2c00      	cmp	r4, #0
    3074:	d034      	beq.n	30e0 <memset+0x84>
    3076:	0014      	movs	r4, r2
    3078:	3301      	adds	r3, #1
    307a:	1e5a      	subs	r2, r3, #1
    307c:	7016      	strb	r6, [r2, #0]
    307e:	422b      	tst	r3, r5
    3080:	d1f6      	bne.n	3070 <memset+0x14>
    3082:	2c03      	cmp	r4, #3
    3084:	d924      	bls.n	30d0 <memset+0x74>
    3086:	25ff      	movs	r5, #255	; 0xff
    3088:	400d      	ands	r5, r1
    308a:	022a      	lsls	r2, r5, #8
    308c:	4315      	orrs	r5, r2
    308e:	042a      	lsls	r2, r5, #16
    3090:	4315      	orrs	r5, r2
    3092:	2c0f      	cmp	r4, #15
    3094:	d911      	bls.n	30ba <memset+0x5e>
    3096:	0026      	movs	r6, r4
    3098:	3e10      	subs	r6, #16
    309a:	0936      	lsrs	r6, r6, #4
    309c:	3601      	adds	r6, #1
    309e:	0136      	lsls	r6, r6, #4
    30a0:	001a      	movs	r2, r3
    30a2:	199b      	adds	r3, r3, r6
    30a4:	6015      	str	r5, [r2, #0]
    30a6:	6055      	str	r5, [r2, #4]
    30a8:	6095      	str	r5, [r2, #8]
    30aa:	60d5      	str	r5, [r2, #12]
    30ac:	3210      	adds	r2, #16
    30ae:	4293      	cmp	r3, r2
    30b0:	d1f8      	bne.n	30a4 <memset+0x48>
    30b2:	220f      	movs	r2, #15
    30b4:	4014      	ands	r4, r2
    30b6:	2c03      	cmp	r4, #3
    30b8:	d90a      	bls.n	30d0 <memset+0x74>
    30ba:	1f26      	subs	r6, r4, #4
    30bc:	08b6      	lsrs	r6, r6, #2
    30be:	3601      	adds	r6, #1
    30c0:	00b6      	lsls	r6, r6, #2
    30c2:	001a      	movs	r2, r3
    30c4:	199b      	adds	r3, r3, r6
    30c6:	c220      	stmia	r2!, {r5}
    30c8:	4293      	cmp	r3, r2
    30ca:	d1fc      	bne.n	30c6 <memset+0x6a>
    30cc:	2203      	movs	r2, #3
    30ce:	4014      	ands	r4, r2
    30d0:	2c00      	cmp	r4, #0
    30d2:	d005      	beq.n	30e0 <memset+0x84>
    30d4:	b2c9      	uxtb	r1, r1
    30d6:	191c      	adds	r4, r3, r4
    30d8:	7019      	strb	r1, [r3, #0]
    30da:	3301      	adds	r3, #1
    30dc:	429c      	cmp	r4, r3
    30de:	d1fb      	bne.n	30d8 <memset+0x7c>
    30e0:	bd70      	pop	{r4, r5, r6, pc}
    30e2:	0014      	movs	r4, r2
    30e4:	0003      	movs	r3, r0
    30e6:	e7cc      	b.n	3082 <memset+0x26>

000030e8 <register_fini>:
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <register_fini+0x10>)
    30ea:	b510      	push	{r4, lr}
    30ec:	2b00      	cmp	r3, #0
    30ee:	d002      	beq.n	30f6 <register_fini+0xe>
    30f0:	4802      	ldr	r0, [pc, #8]	; (30fc <register_fini+0x14>)
    30f2:	f000 f805 	bl	3100 <atexit>
    30f6:	bd10      	pop	{r4, pc}
    30f8:	00000000 	.word	0x00000000
    30fc:	00003111 	.word	0x00003111

00003100 <atexit>:
    3100:	b510      	push	{r4, lr}
    3102:	0001      	movs	r1, r0
    3104:	2300      	movs	r3, #0
    3106:	2200      	movs	r2, #0
    3108:	2000      	movs	r0, #0
    310a:	f000 f81b 	bl	3144 <__register_exitproc>
    310e:	bd10      	pop	{r4, pc}

00003110 <__libc_fini_array>:
    3110:	b570      	push	{r4, r5, r6, lr}
    3112:	4b09      	ldr	r3, [pc, #36]	; (3138 <__libc_fini_array+0x28>)
    3114:	4c09      	ldr	r4, [pc, #36]	; (313c <__libc_fini_array+0x2c>)
    3116:	1ae4      	subs	r4, r4, r3
    3118:	10a4      	asrs	r4, r4, #2
    311a:	d009      	beq.n	3130 <__libc_fini_array+0x20>
    311c:	4a08      	ldr	r2, [pc, #32]	; (3140 <__libc_fini_array+0x30>)
    311e:	18a5      	adds	r5, r4, r2
    3120:	00ad      	lsls	r5, r5, #2
    3122:	18ed      	adds	r5, r5, r3
    3124:	682b      	ldr	r3, [r5, #0]
    3126:	3c01      	subs	r4, #1
    3128:	4798      	blx	r3
    312a:	3d04      	subs	r5, #4
    312c:	2c00      	cmp	r4, #0
    312e:	d1f9      	bne.n	3124 <__libc_fini_array+0x14>
    3130:	f000 f956 	bl	33e0 <_fini>
    3134:	bd70      	pop	{r4, r5, r6, pc}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	000033ec 	.word	0x000033ec
    313c:	000033f0 	.word	0x000033f0
    3140:	3fffffff 	.word	0x3fffffff

00003144 <__register_exitproc>:
    3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3146:	4644      	mov	r4, r8
    3148:	465f      	mov	r7, fp
    314a:	4656      	mov	r6, sl
    314c:	464d      	mov	r5, r9
    314e:	469b      	mov	fp, r3
    3150:	4b2f      	ldr	r3, [pc, #188]	; (3210 <__register_exitproc+0xcc>)
    3152:	b4f0      	push	{r4, r5, r6, r7}
    3154:	681c      	ldr	r4, [r3, #0]
    3156:	23a4      	movs	r3, #164	; 0xa4
    3158:	005b      	lsls	r3, r3, #1
    315a:	0005      	movs	r5, r0
    315c:	58e0      	ldr	r0, [r4, r3]
    315e:	000e      	movs	r6, r1
    3160:	4690      	mov	r8, r2
    3162:	2800      	cmp	r0, #0
    3164:	d04b      	beq.n	31fe <__register_exitproc+0xba>
    3166:	6843      	ldr	r3, [r0, #4]
    3168:	2b1f      	cmp	r3, #31
    316a:	dc0d      	bgt.n	3188 <__register_exitproc+0x44>
    316c:	1c5c      	adds	r4, r3, #1
    316e:	2d00      	cmp	r5, #0
    3170:	d121      	bne.n	31b6 <__register_exitproc+0x72>
    3172:	3302      	adds	r3, #2
    3174:	009b      	lsls	r3, r3, #2
    3176:	6044      	str	r4, [r0, #4]
    3178:	501e      	str	r6, [r3, r0]
    317a:	2000      	movs	r0, #0
    317c:	bc3c      	pop	{r2, r3, r4, r5}
    317e:	4690      	mov	r8, r2
    3180:	4699      	mov	r9, r3
    3182:	46a2      	mov	sl, r4
    3184:	46ab      	mov	fp, r5
    3186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3188:	4b22      	ldr	r3, [pc, #136]	; (3214 <__register_exitproc+0xd0>)
    318a:	2b00      	cmp	r3, #0
    318c:	d03c      	beq.n	3208 <__register_exitproc+0xc4>
    318e:	20c8      	movs	r0, #200	; 0xc8
    3190:	0040      	lsls	r0, r0, #1
    3192:	e000      	b.n	3196 <__register_exitproc+0x52>
    3194:	bf00      	nop
    3196:	2800      	cmp	r0, #0
    3198:	d036      	beq.n	3208 <__register_exitproc+0xc4>
    319a:	22a4      	movs	r2, #164	; 0xa4
    319c:	2300      	movs	r3, #0
    319e:	0052      	lsls	r2, r2, #1
    31a0:	58a1      	ldr	r1, [r4, r2]
    31a2:	6043      	str	r3, [r0, #4]
    31a4:	6001      	str	r1, [r0, #0]
    31a6:	50a0      	str	r0, [r4, r2]
    31a8:	3240      	adds	r2, #64	; 0x40
    31aa:	5083      	str	r3, [r0, r2]
    31ac:	3204      	adds	r2, #4
    31ae:	5083      	str	r3, [r0, r2]
    31b0:	2401      	movs	r4, #1
    31b2:	2d00      	cmp	r5, #0
    31b4:	d0dd      	beq.n	3172 <__register_exitproc+0x2e>
    31b6:	009a      	lsls	r2, r3, #2
    31b8:	4691      	mov	r9, r2
    31ba:	4481      	add	r9, r0
    31bc:	4642      	mov	r2, r8
    31be:	2188      	movs	r1, #136	; 0x88
    31c0:	464f      	mov	r7, r9
    31c2:	507a      	str	r2, [r7, r1]
    31c4:	22c4      	movs	r2, #196	; 0xc4
    31c6:	0052      	lsls	r2, r2, #1
    31c8:	4690      	mov	r8, r2
    31ca:	4480      	add	r8, r0
    31cc:	4642      	mov	r2, r8
    31ce:	3987      	subs	r1, #135	; 0x87
    31d0:	4099      	lsls	r1, r3
    31d2:	6812      	ldr	r2, [r2, #0]
    31d4:	468a      	mov	sl, r1
    31d6:	430a      	orrs	r2, r1
    31d8:	4694      	mov	ip, r2
    31da:	4642      	mov	r2, r8
    31dc:	4661      	mov	r1, ip
    31de:	6011      	str	r1, [r2, #0]
    31e0:	2284      	movs	r2, #132	; 0x84
    31e2:	4649      	mov	r1, r9
    31e4:	465f      	mov	r7, fp
    31e6:	0052      	lsls	r2, r2, #1
    31e8:	508f      	str	r7, [r1, r2]
    31ea:	2d02      	cmp	r5, #2
    31ec:	d1c1      	bne.n	3172 <__register_exitproc+0x2e>
    31ee:	0002      	movs	r2, r0
    31f0:	4655      	mov	r5, sl
    31f2:	328d      	adds	r2, #141	; 0x8d
    31f4:	32ff      	adds	r2, #255	; 0xff
    31f6:	6811      	ldr	r1, [r2, #0]
    31f8:	430d      	orrs	r5, r1
    31fa:	6015      	str	r5, [r2, #0]
    31fc:	e7b9      	b.n	3172 <__register_exitproc+0x2e>
    31fe:	0020      	movs	r0, r4
    3200:	304d      	adds	r0, #77	; 0x4d
    3202:	30ff      	adds	r0, #255	; 0xff
    3204:	50e0      	str	r0, [r4, r3]
    3206:	e7ae      	b.n	3166 <__register_exitproc+0x22>
    3208:	2001      	movs	r0, #1
    320a:	4240      	negs	r0, r0
    320c:	e7b6      	b.n	317c <__register_exitproc+0x38>
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	000033c8 	.word	0x000033c8
    3214:	00000000 	.word	0x00000000

00003218 <spi2MOSI>:
    3218:	0c000002 00000200                                .....

0000321d <spi2SCK>:
    321d:	0e000002 00000200                                .....

00003222 <spi2MISO>:
    3222:	0d000002 8d200000                                ......

00003228 <lookupTable.12454>:
    3228:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    3238:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    3248:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    3258:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    3268:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    3278:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    3288:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    3298:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    32a8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    32b8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    32c8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    32d8:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    32e8:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    32f8:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    3308:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    3318:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    3328:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    3338:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    3348:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    3358:	000f048e                                ....

0000335c <senseBatPin>:
    335c:	06000000 01000106                                .....

00003361 <senseAPin>:
    3361:	03010001 0100010b                                .....

00003366 <senseBPin>:
    3366:	02010001 0000000a                                .....

0000336b <senseCPin>:
    336b:	03000000 00000001                                .....

00003370 <senseDPin>:
    3370:	02000000 00000000                                .....

00003375 <analogAccelPin>:
    3375:	07000000 00000207                                .....

0000337a <spi2MOSI>:
    337a:	0c000002 00000200                                .....

0000337f <spi2SCK>:
    337f:	0e000002 00230c00 0021cc00 0021cc00     ......#...!...!.
    338f:	0021ca00 0022e400 0022e400 0022d600     ..!..."..."...".
    339f:	0021ca00 0022e400 0022d600 0022e400     ..!..."..."...".
    33af:	0021ca00 0022ec00 0022ec00 0022ec00     ..!..."..."...".
    33bf:	0024ec00 00004300 00001000                       ..$..C...

000033c8 <_global_impure_ptr>:
    33c8:	20000010                                ... 

000033cc <_init>:
    33cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33d2:	bc08      	pop	{r3}
    33d4:	469e      	mov	lr, r3
    33d6:	4770      	bx	lr

000033d8 <__init_array_start>:
    33d8:	000030e9 	.word	0x000030e9

000033dc <__frame_dummy_init_array_entry>:
    33dc:	000000dd                                ....

000033e0 <_fini>:
    33e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33e6:	bc08      	pop	{r3}
    33e8:	469e      	mov	lr, r3
    33ea:	4770      	bx	lr

000033ec <__fini_array_start>:
    33ec:	000000b5 	.word	0x000000b5
