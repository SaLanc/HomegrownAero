
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000038c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003d10  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003ec0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e29c  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024cf  00000000  00000000  0003e755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001f97  00000000  00000000  00040c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e0  00000000  00000000  00042bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf8  00000000  00000000  00042f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015740  00000000  00000000  00043c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000089ab  00000000  00000000  000593d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000727fe  00000000  00000000  00061d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cf4  00000000  00000000  000d457c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	0000118d 	.word	0x0000118d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	0000122d 	.word	0x0000122d
      90:	00001295 	.word	0x00001295
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000038c8 	.word	0x000038c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000038c8 	.word	0x000038c8
     10c:	000038c8 	.word	0x000038c8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000038c8 	.word	0x000038c8
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000034ed 	.word	0x000034ed
     1d0:	00000bb5 	.word	0x00000bb5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFChipErase>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFChipErase() {
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2580      	movs	r5, #128	; 0x80
     1e8:	4c09      	ldr	r4, [pc, #36]	; (210 <AT25SFChipErase+0x2c>)
     1ea:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ec:	4f09      	ldr	r7, [pc, #36]	; (214 <AT25SFChipErase+0x30>)
     1ee:	6165      	str	r5, [r4, #20]
     1f0:	2106      	movs	r1, #6
     1f2:	2001      	movs	r0, #1
     1f4:	47b8      	blx	r7
     1f6:	4e08      	ldr	r6, [pc, #32]	; (218 <AT25SFChipErase+0x34>)
    pinHigh(cs_mem);

    delay_ms(30000);
     1f8:	4b08      	ldr	r3, [pc, #32]	; (21c <AT25SFChipErase+0x38>)
}

void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fa:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     1fc:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    delay_ms(30000);
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <AT25SFChipErase+0x3c>)
     200:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     202:	6165      	str	r5, [r4, #20]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     204:	2160      	movs	r1, #96	; 0x60
     206:	2001      	movs	r0, #1
     208:	47b8      	blx	r7
     20a:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20c:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     210:	41004400 	.word	0x41004400
     214:	00001c31 	.word	0x00001c31
     218:	20000460 	.word	0x20000460
     21c:	0000115d 	.word	0x0000115d
     220:	00007530 	.word	0x00007530

00000224 <AT25SFGetByte>:

uint8_t AT25SFGetByte(uint32_t address) {
     224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     226:	2380      	movs	r3, #128	; 0x80
     228:	4f0f      	ldr	r7, [pc, #60]	; (268 <AT25SFGetByte+0x44>)
     22a:	02db      	lsls	r3, r3, #11
     22c:	617b      	str	r3, [r7, #20]
     22e:	0005      	movs	r5, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     230:	4c0e      	ldr	r4, [pc, #56]	; (26c <AT25SFGetByte+0x48>)
     232:	2103      	movs	r1, #3
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	4e0d      	ldr	r6, [pc, #52]	; (270 <AT25SFGetByte+0x4c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23a:	0c29      	lsrs	r1, r5, #16
}

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     23c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23e:	b2c9      	uxtb	r1, r1
     240:	2001      	movs	r0, #1
     242:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     244:	0a29      	lsrs	r1, r5, #8

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     246:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     248:	b2c9      	uxtb	r1, r1
     24a:	2001      	movs	r0, #1
     24c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     24e:	b2e9      	uxtb	r1, r5
uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     250:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     252:	2001      	movs	r0, #1
     254:	47a0      	blx	r4
     256:	7030      	strb	r0, [r6, #0]
     258:	0001      	movs	r1, r0

    uint8_t _byte = spiDataTransfer(SPI1,dummy_rx);
     25a:	2001      	movs	r0, #1
     25c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25e:	2380      	movs	r3, #128	; 0x80
     260:	02db      	lsls	r3, r3, #11
     262:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    return _byte;
}
     264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	41004400 	.word	0x41004400
     26c:	00001c31 	.word	0x00001c31
     270:	20000460 	.word	0x20000460

00000274 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     274:	2380      	movs	r3, #128	; 0x80

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     278:	4e19      	ldr	r6, [pc, #100]	; (2e0 <AT25SFWriteBytes+0x6c>)
     27a:	02db      	lsls	r3, r3, #11
     27c:	9201      	str	r2, [sp, #4]
     27e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     280:	4c18      	ldr	r4, [pc, #96]	; (2e4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     282:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     284:	2001      	movs	r0, #1
     286:	6173      	str	r3, [r6, #20]
     288:	2106      	movs	r1, #6
     28a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	4d16      	ldr	r5, [pc, #88]	; (2e8 <AT25SFWriteBytes+0x74>)
     290:	02db      	lsls	r3, r3, #11
     292:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     294:	2102      	movs	r1, #2
     296:	61b3      	str	r3, [r6, #24]
     298:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29a:	6173      	str	r3, [r6, #20]
     29c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     29e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2a0:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2a2:	b2c9      	uxtb	r1, r1
     2a4:	2001      	movs	r0, #1
     2a6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2a8:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2aa:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2ac:	b2c9      	uxtb	r1, r1
     2ae:	2001      	movs	r0, #1
     2b0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b2:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2b4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b6:	2001      	movs	r0, #1
     2b8:	47a0      	blx	r4
     2ba:	9b00      	ldr	r3, [sp, #0]
     2bc:	9f01      	ldr	r7, [sp, #4]
     2be:	7028      	strb	r0, [r5, #0]
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2c4:	9b00      	ldr	r3, [sp, #0]
     2c6:	429f      	cmp	r7, r3
     2c8:	d005      	beq.n	2d6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2ca:	7839      	ldrb	r1, [r7, #0]
     2cc:	2001      	movs	r0, #1
     2ce:	47a0      	blx	r4
     2d0:	3701      	adds	r7, #1
     2d2:	7028      	strb	r0, [r5, #0]
     2d4:	e7f6      	b.n	2c4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	02db      	lsls	r3, r3, #11
     2da:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	41004400 	.word	0x41004400
     2e4:	00001c31 	.word	0x00001c31
     2e8:	20000460 	.word	0x20000460

000002ec <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2f0:	4e18      	ldr	r6, [pc, #96]	; (354 <AT25SEWritePage+0x68>)
     2f2:	02db      	lsls	r3, r3, #11
     2f4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2f6:	4d18      	ldr	r5, [pc, #96]	; (358 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2f8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2fa:	2001      	movs	r0, #1
     2fc:	6173      	str	r3, [r6, #20]
     2fe:	2106      	movs	r1, #6
     300:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     302:	2380      	movs	r3, #128	; 0x80
     304:	4c15      	ldr	r4, [pc, #84]	; (35c <AT25SEWritePage+0x70>)
     306:	02db      	lsls	r3, r3, #11
     308:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     30a:	2102      	movs	r1, #2
     30c:	61b3      	str	r3, [r6, #24]
     30e:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     310:	6173      	str	r3, [r6, #20]
     312:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     314:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     316:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     318:	b2c9      	uxtb	r1, r1
     31a:	2001      	movs	r0, #1
     31c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     31e:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     320:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     328:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     32a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     32c:	2001      	movs	r0, #1
     32e:	47a8      	blx	r5
     330:	9f01      	ldr	r7, [sp, #4]
     332:	7020      	strb	r0, [r4, #0]
     334:	1c7b      	adds	r3, r7, #1
     336:	33ff      	adds	r3, #255	; 0xff
     338:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     33a:	7839      	ldrb	r1, [r7, #0]
     33c:	2001      	movs	r0, #1
     33e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     340:	9b01      	ldr	r3, [sp, #4]
     342:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     344:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     346:	429f      	cmp	r7, r3
     348:	d1f7      	bne.n	33a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	02db      	lsls	r3, r3, #11
     34e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     350:	2000      	movs	r0, #0
     352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     354:	41004400 	.word	0x41004400
     358:	00001c31 	.word	0x00001c31
     35c:	20000460 	.word	0x20000460

00000360 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     360:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     364:	4f17      	ldr	r7, [pc, #92]	; (3c4 <AT25SEreadSample+0x64>)
     366:	02db      	lsls	r3, r3, #11
     368:	9201      	str	r2, [sp, #4]
     36a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     36c:	4c16      	ldr	r4, [pc, #88]	; (3c8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     36e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     370:	2001      	movs	r0, #1
     372:	617b      	str	r3, [r7, #20]
     374:	210b      	movs	r1, #11
     376:	47a0      	blx	r4
     378:	4d14      	ldr	r5, [pc, #80]	; (3cc <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     37c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37e:	b2c9      	uxtb	r1, r1
     380:	2001      	movs	r0, #1
     382:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     384:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     386:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     388:	b2c9      	uxtb	r1, r1
     38a:	2001      	movs	r0, #1
     38c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     38e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     390:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     392:	2001      	movs	r0, #1
     394:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     396:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     398:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     39a:	2001      	movs	r0, #1
     39c:	47a0      	blx	r4
     39e:	9b00      	ldr	r3, [sp, #0]
     3a0:	9e01      	ldr	r6, [sp, #4]
     3a2:	7028      	strb	r0, [r5, #0]
     3a4:	18f3      	adds	r3, r6, r3
     3a6:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     3a8:	9b00      	ldr	r3, [sp, #0]
     3aa:	429e      	cmp	r6, r3
     3ac:	d005      	beq.n	3ba <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3ae:	7829      	ldrb	r1, [r5, #0]
     3b0:	2001      	movs	r0, #1
     3b2:	47a0      	blx	r4
     3b4:	7030      	strb	r0, [r6, #0]
     3b6:	3601      	adds	r6, #1
     3b8:	e7f6      	b.n	3a8 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3ba:	2380      	movs	r3, #128	; 0x80
     3bc:	02db      	lsls	r3, r3, #11
     3be:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	41004400 	.word	0x41004400
     3c8:	00001c31 	.word	0x00001c31
     3cc:	20000460 	.word	0x20000460

000003d0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3d0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3d4:	4f16      	ldr	r7, [pc, #88]	; (430 <AT25SEreadPage+0x60>)
     3d6:	02db      	lsls	r3, r3, #11
     3d8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3da:	4c16      	ldr	r4, [pc, #88]	; (434 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3dc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3de:	2001      	movs	r0, #1
     3e0:	617b      	str	r3, [r7, #20]
     3e2:	210b      	movs	r1, #11
     3e4:	47a0      	blx	r4
     3e6:	4d14      	ldr	r5, [pc, #80]	; (438 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3e8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ea:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3ec:	b2c9      	uxtb	r1, r1
     3ee:	2001      	movs	r0, #1
     3f0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3f4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f6:	b2c9      	uxtb	r1, r1
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3fc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     400:	2001      	movs	r0, #1
     402:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     404:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     406:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     408:	2001      	movs	r0, #1
     40a:	47a0      	blx	r4
     40c:	9e01      	ldr	r6, [sp, #4]
     40e:	7028      	strb	r0, [r5, #0]
     410:	1c73      	adds	r3, r6, #1
     412:	33ff      	adds	r3, #255	; 0xff
     414:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     416:	7829      	ldrb	r1, [r5, #0]
     418:	2001      	movs	r0, #1
     41a:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     41c:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     41e:	7030      	strb	r0, [r6, #0]
     420:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     422:	429e      	cmp	r6, r3
     424:	d1f7      	bne.n	416 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     426:	2380      	movs	r3, #128	; 0x80
     428:	02db      	lsls	r3, r3, #11
     42a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     42c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	41004400 	.word	0x41004400
     434:	00001c31 	.word	0x00001c31
     438:	20000460 	.word	0x20000460

0000043c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	4b28      	ldr	r3, [pc, #160]	; (4e0 <readMS5803AdcResults+0xa4>)
     440:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     442:	b5f0      	push	{r4, r5, r6, r7, lr}
     444:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     446:	2300      	movs	r3, #0
     448:	4d26      	ldr	r5, [pc, #152]	; (4e4 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     44a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     44c:	9300      	str	r3, [sp, #0]
     44e:	786b      	ldrb	r3, [r5, #1]
     450:	7828      	ldrb	r0, [r5, #0]
     452:	78aa      	ldrb	r2, [r5, #2]
     454:	021b      	lsls	r3, r3, #8
     456:	4303      	orrs	r3, r0
     458:	0412      	lsls	r2, r2, #16
     45a:	0019      	movs	r1, r3
     45c:	0013      	movs	r3, r2
     45e:	430b      	orrs	r3, r1
     460:	79a9      	ldrb	r1, [r5, #6]
     462:	796f      	ldrb	r7, [r5, #5]
     464:	79ec      	ldrb	r4, [r5, #7]
     466:	0209      	lsls	r1, r1, #8
     468:	4339      	orrs	r1, r7
     46a:	0424      	lsls	r4, r4, #16
     46c:	0008      	movs	r0, r1
     46e:	0021      	movs	r1, r4
     470:	7a2c      	ldrb	r4, [r5, #8]
     472:	78ea      	ldrb	r2, [r5, #3]
     474:	7a6f      	ldrb	r7, [r5, #9]
     476:	4301      	orrs	r1, r0
     478:	0624      	lsls	r4, r4, #24
     47a:	430c      	orrs	r4, r1
     47c:	0612      	lsls	r2, r2, #24
     47e:	431a      	orrs	r2, r3
     480:	0020      	movs	r0, r4
     482:	792b      	ldrb	r3, [r5, #4]
     484:	0039      	movs	r1, r7
     486:	4e18      	ldr	r6, [pc, #96]	; (4e8 <readMS5803AdcResults+0xac>)
     488:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     48a:	7aeb      	ldrb	r3, [r5, #11]
     48c:	7aa9      	ldrb	r1, [r5, #10]
     48e:	021b      	lsls	r3, r3, #8
     490:	430b      	orrs	r3, r1
     492:	001a      	movs	r2, r3
     494:	7b2b      	ldrb	r3, [r5, #12]
     496:	4e15      	ldr	r6, [pc, #84]	; (4ec <readMS5803AdcResults+0xb0>)
     498:	041b      	lsls	r3, r3, #16
     49a:	4313      	orrs	r3, r2
     49c:	7b6a      	ldrb	r2, [r5, #13]
     49e:	7bad      	ldrb	r5, [r5, #14]
     4a0:	0612      	lsls	r2, r2, #24
     4a2:	431a      	orrs	r2, r3
     4a4:	0039      	movs	r1, r7
     4a6:	002b      	movs	r3, r5
     4a8:	0020      	movs	r0, r4
     4aa:	9203      	str	r2, [sp, #12]
     4ac:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ae:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4b0:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b2:	002b      	movs	r3, r5
     4b4:	0039      	movs	r1, r7
     4b6:	0020      	movs	r0, r4
     4b8:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4ba:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4bc:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4be:	002b      	movs	r3, r5
     4c0:	0020      	movs	r0, r4
     4c2:	0039      	movs	r1, r7
     4c4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <readMS5803AdcResults+0xa4>)
     4ca:	0212      	lsls	r2, r2, #8
     4cc:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ce:	9b04      	ldr	r3, [sp, #16]
     4d0:	9a05      	ldr	r2, [sp, #20]
     4d2:	041b      	lsls	r3, r3, #16
     4d4:	0215      	lsls	r5, r2, #8
     4d6:	431d      	orrs	r5, r3
     4d8:	4328      	orrs	r0, r5
}
     4da:	b007      	add	sp, #28
     4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	41004400 	.word	0x41004400
     4e4:	000036f0 	.word	0x000036f0
     4e8:	00000e85 	.word	0x00000e85
     4ec:	00000ef1 	.word	0x00000ef1

000004f0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     4f2:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f4:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     4f6:	8803      	ldrh	r3, [r0, #0]
     4f8:	aa04      	add	r2, sp, #16
     4fa:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     4fc:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     4fe:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     500:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     502:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     504:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     506:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     508:	88c3      	ldrh	r3, [r0, #6]
     50a:	9401      	str	r4, [sp, #4]
     50c:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     50e:	8903      	ldrh	r3, [r0, #8]
     510:	aa07      	add	r2, sp, #28
     512:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     514:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     516:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     518:	8941      	ldrh	r1, [r0, #10]
     51a:	a804      	add	r0, sp, #16
     51c:	181b      	adds	r3, r3, r0
     51e:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     520:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     522:	693a      	ldr	r2, [r7, #16]
     524:	0236      	lsls	r6, r6, #8
     526:	8818      	ldrh	r0, [r3, #0]
     528:	1b96      	subs	r6, r2, r6
     52a:	17f2      	asrs	r2, r6, #31
     52c:	4c2a      	ldr	r4, [pc, #168]	; (5d8 <ConvertPressureTemperature+0xe8>)
     52e:	9203      	str	r2, [sp, #12]
     530:	17f3      	asrs	r3, r6, #31
     532:	0032      	movs	r2, r6
     534:	b280      	uxth	r0, r0
     536:	2100      	movs	r1, #0
     538:	47a0      	blx	r4
     53a:	23fa      	movs	r3, #250	; 0xfa
     53c:	00db      	lsls	r3, r3, #3
     53e:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     540:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     542:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     544:	b29b      	uxth	r3, r3
     546:	9302      	str	r3, [sp, #8]
     548:	9b01      	ldr	r3, [sp, #4]
     54a:	0032      	movs	r2, r6
     54c:	8818      	ldrh	r0, [r3, #0]
     54e:	2100      	movs	r1, #0
     550:	17f3      	asrs	r3, r6, #31
     552:	b280      	uxth	r0, r0
     554:	47a0      	blx	r4
     556:	064b      	lsls	r3, r1, #25
     558:	09c4      	lsrs	r4, r0, #7
     55a:	431c      	orrs	r4, r3
     55c:	2300      	movs	r3, #0
     55e:	11cd      	asrs	r5, r1, #7
     560:	9902      	ldr	r1, [sp, #8]
     562:	040a      	lsls	r2, r1, #16
     564:	1912      	adds	r2, r2, r4
     566:	416b      	adcs	r3, r5
     568:	9208      	str	r2, [sp, #32]
     56a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     56c:	ab04      	add	r3, sp, #16
     56e:	889c      	ldrh	r4, [r3, #4]
     570:	8918      	ldrh	r0, [r3, #8]
     572:	0032      	movs	r2, r6
     574:	9b03      	ldr	r3, [sp, #12]
     576:	4d18      	ldr	r5, [pc, #96]	; (5d8 <ConvertPressureTemperature+0xe8>)
     578:	b280      	uxth	r0, r0
     57a:	2100      	movs	r1, #0
     57c:	47a8      	blx	r5
     57e:	060b      	lsls	r3, r1, #24
     580:	0a05      	lsrs	r5, r0, #8
     582:	431d      	orrs	r5, r3
     584:	2300      	movs	r3, #0
     586:	b2a4      	uxth	r4, r4
     588:	120e      	asrs	r6, r1, #8
     58a:	03e2      	lsls	r2, r4, #15
     58c:	1952      	adds	r2, r2, r5
     58e:	4173      	adcs	r3, r6
     590:	920a      	str	r2, [sp, #40]	; 0x28
     592:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     598:	9c08      	ldr	r4, [sp, #32]
     59a:	9d09      	ldr	r5, [sp, #36]	; 0x24
     59c:	4e0e      	ldr	r6, [pc, #56]	; (5d8 <ConvertPressureTemperature+0xe8>)
     59e:	68f8      	ldr	r0, [r7, #12]
     5a0:	2100      	movs	r1, #0
     5a2:	47b0      	blx	r6
     5a4:	2300      	movs	r3, #0
     5a6:	17ce      	asrs	r6, r1, #31
     5a8:	02f6      	lsls	r6, r6, #11
     5aa:	0af2      	lsrs	r2, r6, #11
     5ac:	1880      	adds	r0, r0, r2
     5ae:	4159      	adcs	r1, r3
     5b0:	02ce      	lsls	r6, r1, #11
     5b2:	0d42      	lsrs	r2, r0, #21
     5b4:	4332      	orrs	r2, r6
     5b6:	154b      	asrs	r3, r1, #21
     5b8:	1b12      	subs	r2, r2, r4
     5ba:	41ab      	sbcs	r3, r5
     5bc:	2100      	movs	r1, #0
     5be:	17dc      	asrs	r4, r3, #31
     5c0:	0464      	lsls	r4, r4, #17
     5c2:	0c60      	lsrs	r0, r4, #17
     5c4:	1812      	adds	r2, r2, r0
     5c6:	414b      	adcs	r3, r1
     5c8:	0011      	movs	r1, r2
     5ca:	045b      	lsls	r3, r3, #17
     5cc:	0bca      	lsrs	r2, r1, #15
     5ce:	431a      	orrs	r2, r3
     5d0:	61fa      	str	r2, [r7, #28]
}
     5d2:	b00d      	add	sp, #52	; 0x34
     5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	00001ced 	.word	0x00001ced

000005dc <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     5dc:	220a      	movs	r2, #10
     5de:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     5e0:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     5e2:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     5e4:	4c0e      	ldr	r4, [pc, #56]	; (620 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     5e6:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     5e8:	42a2      	cmp	r2, r4
     5ea:	d901      	bls.n	5f0 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     5ec:	4b0d      	ldr	r3, [pc, #52]	; (624 <pascalToCent+0x48>)
     5ee:	e015      	b.n	61c <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     5f0:	1aa3      	subs	r3, r4, r2
     5f2:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     5f4:	2b4b      	cmp	r3, #75	; 0x4b
     5f6:	d901      	bls.n	5fc <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     5f8:	4b0b      	ldr	r3, [pc, #44]	; (628 <pascalToCent+0x4c>)
     5fa:	e00f      	b.n	61c <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     5fc:	4d0b      	ldr	r5, [pc, #44]	; (62c <pascalToCent+0x50>)
     5fe:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     600:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     602:	3301      	adds	r3, #1
     604:	009b      	lsls	r3, r3, #2
     606:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     608:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     60a:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     60c:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     60e:	1aa4      	subs	r4, r4, r2
     610:	691a      	ldr	r2, [r3, #16]
     612:	1a52      	subs	r2, r2, r1
     614:	0013      	movs	r3, r2
     616:	4363      	muls	r3, r4
     618:	0a9b      	lsrs	r3, r3, #10
     61a:	185b      	adds	r3, r3, r1
     61c:	6203      	str	r3, [r0, #32]
        }
    }
}
     61e:	bd70      	pop	{r4, r5, r6, pc}
     620:	000199cc 	.word	0x000199cc
     624:	ffff8d20 	.word	0xffff8d20
     628:	000f048e 	.word	0x000f048e
     62c:	000036f0 	.word	0x000036f0

00000630 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
     632:	27a2      	movs	r7, #162	; 0xa2
     634:	b087      	sub	sp, #28
     636:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     638:	2096      	movs	r0, #150	; 0x96
     63a:	4c2b      	ldr	r4, [pc, #172]	; (6e8 <readMS5803Coefficients+0xb8>)
     63c:	0080      	lsls	r0, r0, #2
     63e:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     640:	2096      	movs	r0, #150	; 0x96
     642:	0080      	lsls	r0, r0, #2
     644:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     646:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     648:	4c28      	ldr	r4, [pc, #160]	; (6ec <readMS5803Coefficients+0xbc>)
     64a:	4b29      	ldr	r3, [pc, #164]	; (6f0 <readMS5803Coefficients+0xc0>)
     64c:	0212      	lsls	r2, r2, #8
     64e:	615a      	str	r2, [r3, #20]
     650:	7863      	ldrb	r3, [r4, #1]
     652:	7820      	ldrb	r0, [r4, #0]
     654:	78a2      	ldrb	r2, [r4, #2]
     656:	021b      	lsls	r3, r3, #8
     658:	4303      	orrs	r3, r0
     65a:	0412      	lsls	r2, r2, #16
     65c:	0019      	movs	r1, r3
     65e:	0013      	movs	r3, r2
     660:	430b      	orrs	r3, r1
     662:	79a1      	ldrb	r1, [r4, #6]
     664:	7966      	ldrb	r6, [r4, #5]
     666:	0209      	lsls	r1, r1, #8
     668:	4331      	orrs	r1, r6
     66a:	0008      	movs	r0, r1
     66c:	79e1      	ldrb	r1, [r4, #7]
     66e:	78e2      	ldrb	r2, [r4, #3]
     670:	0409      	lsls	r1, r1, #16
     672:	4301      	orrs	r1, r0
     674:	7a20      	ldrb	r0, [r4, #8]
     676:	7a66      	ldrb	r6, [r4, #9]
     678:	0612      	lsls	r2, r2, #24
     67a:	0600      	lsls	r0, r0, #24
     67c:	4308      	orrs	r0, r1
     67e:	431a      	orrs	r2, r3
     680:	9700      	str	r7, [sp, #0]
     682:	7923      	ldrb	r3, [r4, #4]
     684:	0031      	movs	r1, r6
     686:	4d1b      	ldr	r5, [pc, #108]	; (6f4 <readMS5803Coefficients+0xc4>)
     688:	9003      	str	r0, [sp, #12]
     68a:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     68c:	7ae3      	ldrb	r3, [r4, #11]
     68e:	0020      	movs	r0, r4
     690:	7aa1      	ldrb	r1, [r4, #10]
     692:	7b24      	ldrb	r4, [r4, #12]
     694:	021b      	lsls	r3, r3, #8
     696:	430b      	orrs	r3, r1
     698:	0424      	lsls	r4, r4, #16
     69a:	001a      	movs	r2, r3
     69c:	0023      	movs	r3, r4
     69e:	7b44      	ldrb	r4, [r0, #13]
     6a0:	7b85      	ldrb	r5, [r0, #14]
     6a2:	4313      	orrs	r3, r2
     6a4:	0624      	lsls	r4, r4, #24
     6a6:	431c      	orrs	r4, r3
     6a8:	0022      	movs	r2, r4
     6aa:	002b      	movs	r3, r5
     6ac:	9404      	str	r4, [sp, #16]
     6ae:	0031      	movs	r1, r6
     6b0:	4c11      	ldr	r4, [pc, #68]	; (6f8 <readMS5803Coefficients+0xc8>)
     6b2:	9803      	ldr	r0, [sp, #12]
     6b4:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     6b6:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     6b8:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     6ba:	9a04      	ldr	r2, [sp, #16]
     6bc:	9803      	ldr	r0, [sp, #12]
     6be:	0031      	movs	r1, r6
     6c0:	4c0d      	ldr	r4, [pc, #52]	; (6f8 <readMS5803Coefficients+0xc8>)
     6c2:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6c4:	2280      	movs	r2, #128	; 0x80
     6c6:	4b0a      	ldr	r3, [pc, #40]	; (6f0 <readMS5803Coefficients+0xc0>)
     6c8:	0212      	lsls	r2, r2, #8
     6ca:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     6cc:	9b05      	ldr	r3, [sp, #20]
     6ce:	021d      	lsls	r5, r3, #8
     6d0:	9b02      	ldr	r3, [sp, #8]
     6d2:	4328      	orrs	r0, r5
     6d4:	8018      	strh	r0, [r3, #0]
     6d6:	1cbb      	adds	r3, r7, #2
     6d8:	b2df      	uxtb	r7, r3
     6da:	9b02      	ldr	r3, [sp, #8]
     6dc:	3302      	adds	r3, #2
     6de:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     6e0:	2fae      	cmp	r7, #174	; 0xae
     6e2:	d1a9      	bne.n	638 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6e4:	b007      	add	sp, #28
     6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e8:	0000112d 	.word	0x0000112d
     6ec:	000036f0 	.word	0x000036f0
     6f0:	41004400 	.word	0x41004400
     6f4:	00000e85 	.word	0x00000e85
     6f8:	00000ef1 	.word	0x00000ef1

000006fc <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6fe:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     700:	231e      	movs	r3, #30
     702:	491a      	ldr	r1, [pc, #104]	; (76c <initMS5803Barometer+0x70>)
     704:	4d1a      	ldr	r5, [pc, #104]	; (770 <initMS5803Barometer+0x74>)
     706:	0236      	lsls	r6, r6, #8
     708:	616e      	str	r6, [r5, #20]
     70a:	9300      	str	r3, [sp, #0]
     70c:	784b      	ldrb	r3, [r1, #1]
     70e:	780a      	ldrb	r2, [r1, #0]
     710:	021b      	lsls	r3, r3, #8
     712:	4313      	orrs	r3, r2
     714:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     716:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     718:	0412      	lsls	r2, r2, #16
     71a:	0018      	movs	r0, r3
     71c:	0013      	movs	r3, r2
     71e:	78ca      	ldrb	r2, [r1, #3]
     720:	4303      	orrs	r3, r0
     722:	0612      	lsls	r2, r2, #24
     724:	1d4f      	adds	r7, r1, #5
     726:	431a      	orrs	r2, r3
     728:	7948      	ldrb	r0, [r1, #5]
     72a:	790b      	ldrb	r3, [r1, #4]
     72c:	7989      	ldrb	r1, [r1, #6]
     72e:	0209      	lsls	r1, r1, #8
     730:	4301      	orrs	r1, r0
     732:	78b8      	ldrb	r0, [r7, #2]
     734:	0400      	lsls	r0, r0, #16
     736:	4301      	orrs	r1, r0
     738:	78f8      	ldrb	r0, [r7, #3]
     73a:	0600      	lsls	r0, r0, #24
     73c:	4308      	orrs	r0, r1
     73e:	7939      	ldrb	r1, [r7, #4]
     740:	4f0c      	ldr	r7, [pc, #48]	; (774 <initMS5803Barometer+0x78>)
     742:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     744:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     746:	20c8      	movs	r0, #200	; 0xc8
     748:	4b0b      	ldr	r3, [pc, #44]	; (778 <initMS5803Barometer+0x7c>)
     74a:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     74c:	0020      	movs	r0, r4
     74e:	4b0b      	ldr	r3, [pc, #44]	; (77c <initMS5803Barometer+0x80>)
     750:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     752:	23fa      	movs	r3, #250	; 0xfa
     754:	011b      	lsls	r3, r3, #4
     756:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     758:	4b09      	ldr	r3, [pc, #36]	; (780 <initMS5803Barometer+0x84>)
     75a:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     75c:	4b09      	ldr	r3, [pc, #36]	; (784 <initMS5803Barometer+0x88>)
     75e:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     760:	4b09      	ldr	r3, [pc, #36]	; (788 <initMS5803Barometer+0x8c>)
     762:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     764:	23fa      	movs	r3, #250	; 0xfa
     766:	00db      	lsls	r3, r3, #3
     768:	6163      	str	r3, [r4, #20]




}
     76a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     76c:	000036f0 	.word	0x000036f0
     770:	41004400 	.word	0x41004400
     774:	00000e85 	.word	0x00000e85
     778:	0000115d 	.word	0x0000115d
     77c:	00000631 	.word	0x00000631
     780:	00002710 	.word	0x00002710
     784:	0041c9fe 	.word	0x0041c9fe
     788:	007ffae4 	.word	0x007ffae4

0000078c <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     78e:	4bbf      	ldr	r3, [pc, #764]	; (a8c <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     790:	b085      	sub	sp, #20
    SystemInit();
     792:	4798      	blx	r3
    GclkInit();
     794:	4bbe      	ldr	r3, [pc, #760]	; (a90 <init+0x304>)
     796:	4798      	blx	r3
    RtcInit();
     798:	4bbe      	ldr	r3, [pc, #760]	; (a94 <init+0x308>)
     79a:	4798      	blx	r3
    delayInit();
     79c:	4bbe      	ldr	r3, [pc, #760]	; (a98 <init+0x30c>)
     79e:	4798      	blx	r3
    adcInit();
     7a0:	4bbe      	ldr	r3, [pc, #760]	; (a9c <init+0x310>)
     7a2:	4798      	blx	r3
    dmaInit();
     7a4:	4bbe      	ldr	r3, [pc, #760]	; (aa0 <init+0x314>)
     7a6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     7a8:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     7aa:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     7ac:	4bbd      	ldr	r3, [pc, #756]	; (aa4 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     7ae:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     7b0:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     7b2:	5858      	ldr	r0, [r3, r1]
     7b4:	4abc      	ldr	r2, [pc, #752]	; (aa8 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b6:	2401      	movs	r4, #1
     7b8:	4002      	ands	r2, r0
     7ba:	505a      	str	r2, [r3, r1]
     7bc:	4bbb      	ldr	r3, [pc, #748]	; (aac <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7be:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	0019      	movs	r1, r3
     7c2:	3154      	adds	r1, #84	; 0x54
     7c4:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7c6:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	43a2      	bics	r2, r4
     7ca:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7cc:	2280      	movs	r2, #128	; 0x80
     7ce:	0352      	lsls	r2, r2, #13
     7d0:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7d2:	220f      	movs	r2, #15
     7d4:	3033      	adds	r0, #51	; 0x33
     7d6:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d8:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7da:	4391      	bics	r1, r2
     7dc:	4321      	orrs	r1, r4
     7de:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e0:	7cc1      	ldrb	r1, [r0, #19]
     7e2:	36c3      	adds	r6, #195	; 0xc3
     7e4:	4321      	orrs	r1, r4
     7e6:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7e8:	0019      	movs	r1, r3
     7ea:	31b1      	adds	r1, #177	; 0xb1
     7ec:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ee:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7f0:	4010      	ands	r0, r2
     7f2:	4328      	orrs	r0, r5
     7f4:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f6:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f8:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	4320      	orrs	r0, r4
     7fc:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fe:	7808      	ldrb	r0, [r1, #0]
     800:	4010      	ands	r0, r2
     802:	4328      	orrs	r0, r5
     804:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     806:	7830      	ldrb	r0, [r6, #0]
     808:	4320      	orrs	r0, r4
     80a:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80c:	7d30      	ldrb	r0, [r6, #20]
     80e:	43a0      	bics	r0, r4
     810:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     812:	2080      	movs	r0, #128	; 0x80
     814:	0400      	lsls	r0, r0, #16
     816:	9703      	str	r7, [sp, #12]
     818:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     81a:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     81c:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81e:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     820:	4390      	bics	r0, r2
     822:	4320      	orrs	r0, r4
     824:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     826:	20c2      	movs	r0, #194	; 0xc2
     828:	4684      	mov	ip, r0
     82a:	449c      	add	ip, r3
     82c:	4660      	mov	r0, ip
     82e:	4667      	mov	r7, ip
     830:	7800      	ldrb	r0, [r0, #0]
     832:	4320      	orrs	r0, r4
     834:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     836:	7808      	ldrb	r0, [r1, #0]
     838:	4390      	bics	r0, r2
     83a:	4320      	orrs	r0, r4
     83c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     840:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     844:	4321      	orrs	r1, r4
     846:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     848:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84c:	43a1      	bics	r1, r4
     84e:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     850:	2180      	movs	r1, #128	; 0x80
     852:	9803      	ldr	r0, [sp, #12]
     854:	03c9      	lsls	r1, r1, #15
     856:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     858:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85a:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     85c:	3031      	adds	r0, #49	; 0x31
     85e:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     860:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     862:	4011      	ands	r1, r2
     864:	430d      	orrs	r5, r1
     866:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     868:	001d      	movs	r5, r3
     86a:	3543      	adds	r5, #67	; 0x43
     86c:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     86e:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     870:	4321      	orrs	r1, r4
     872:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     874:	7da9      	ldrb	r1, [r5, #22]
     876:	3505      	adds	r5, #5
     878:	43a1      	bics	r1, r4
     87a:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     87c:	2180      	movs	r1, #128	; 0x80
     87e:	0489      	lsls	r1, r1, #18
     880:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     882:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     884:	7801      	ldrb	r1, [r0, #0]
     886:	4391      	bics	r1, r2
     888:	4321      	orrs	r1, r4
     88a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88c:	7c41      	ldrb	r1, [r0, #17]
     88e:	3011      	adds	r0, #17
     890:	4321      	orrs	r1, r4
     892:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	7d81      	ldrb	r1, [r0, #22]
     896:	43a1      	bics	r1, r4
     898:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     89a:	2180      	movs	r1, #128	; 0x80
     89c:	0449      	lsls	r1, r1, #17
     89e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     8a0:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a2:	7829      	ldrb	r1, [r5, #0]
     8a4:	43a1      	bics	r1, r4
     8a6:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a8:	2180      	movs	r1, #128	; 0x80
     8aa:	0049      	lsls	r1, r1, #1
     8ac:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ae:	7831      	ldrb	r1, [r6, #0]
     8b0:	43a1      	bics	r1, r4
     8b2:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b4:	2180      	movs	r1, #128	; 0x80
     8b6:	0089      	lsls	r1, r1, #2
     8b8:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ba:	0019      	movs	r1, r3
     8bc:	314b      	adds	r1, #75	; 0x4b
     8be:	7808      	ldrb	r0, [r1, #0]
     8c0:	43a0      	bics	r0, r4
     8c2:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8c4:	7808      	ldrb	r0, [r1, #0]
     8c6:	4338      	orrs	r0, r7
     8c8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8ca:	2080      	movs	r0, #128	; 0x80
     8cc:	0100      	lsls	r0, r0, #4
     8ce:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8d0:	4877      	ldr	r0, [pc, #476]	; (ab0 <init+0x324>)
     8d2:	371e      	adds	r7, #30
     8d4:	7800      	ldrb	r0, [r0, #0]
     8d6:	4010      	ands	r0, r2
     8d8:	4338      	orrs	r0, r7
     8da:	4f75      	ldr	r7, [pc, #468]	; (ab0 <init+0x324>)
     8dc:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8de:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e0:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e2:	4320      	orrs	r0, r4
     8e4:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e6:	0018      	movs	r0, r3
     8e8:	3034      	adds	r0, #52	; 0x34
     8ea:	7801      	ldrb	r1, [r0, #0]
     8ec:	4011      	ands	r1, r2
     8ee:	4339      	orrs	r1, r7
     8f0:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f2:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8f4:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	4321      	orrs	r1, r4
     8f8:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8fa:	4666      	mov	r6, ip
     8fc:	7801      	ldrb	r1, [r0, #0]
     8fe:	4391      	bics	r1, r2
     900:	4331      	orrs	r1, r6
     902:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     904:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     906:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     908:	4321      	orrs	r1, r4
     90a:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     90c:	7801      	ldrb	r1, [r0, #0]
     90e:	001e      	movs	r6, r3
     910:	43a1      	bics	r1, r4
     912:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     914:	2180      	movs	r1, #128	; 0x80
     916:	9803      	ldr	r0, [sp, #12]
     918:	00c9      	lsls	r1, r1, #3
     91a:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     91c:	0018      	movs	r0, r3
     91e:	3098      	adds	r0, #152	; 0x98
     920:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     922:	78a8      	ldrb	r0, [r5, #2]
     924:	3651      	adds	r6, #81	; 0x51
     926:	43a0      	bics	r0, r4
     928:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     92a:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     92c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     92e:	7a29      	ldrb	r1, [r5, #8]
     930:	43a1      	bics	r1, r4
     932:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     934:	2180      	movs	r1, #128	; 0x80
     936:	0249      	lsls	r1, r1, #9
     938:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     93a:	7831      	ldrb	r1, [r6, #0]
     93c:	43a1      	bics	r1, r4
     93e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     940:	2180      	movs	r1, #128	; 0x80
     942:	0289      	lsls	r1, r1, #10
     944:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     946:	0019      	movs	r1, r3
     948:	3153      	adds	r1, #83	; 0x53
     94a:	7808      	ldrb	r0, [r1, #0]
     94c:	43a0      	bics	r0, r4
     94e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     950:	7808      	ldrb	r0, [r1, #0]
     952:	4338      	orrs	r0, r7
     954:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     956:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     958:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     95a:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     95c:	0300      	lsls	r0, r0, #12
     95e:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     960:	9703      	str	r7, [sp, #12]
     962:	7838      	ldrb	r0, [r7, #0]
     964:	2720      	movs	r7, #32
     966:	4010      	ands	r0, r2
     968:	4338      	orrs	r0, r7
     96a:	9f03      	ldr	r7, [sp, #12]
     96c:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     96e:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     970:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     972:	4320      	orrs	r0, r4
     974:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     976:	0018      	movs	r0, r3
     978:	3038      	adds	r0, #56	; 0x38
     97a:	7801      	ldrb	r1, [r0, #0]
     97c:	4011      	ands	r1, r2
     97e:	4339      	orrs	r1, r7
     980:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     982:	7831      	ldrb	r1, [r6, #0]
     984:	4321      	orrs	r1, r4
     986:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     988:	4666      	mov	r6, ip
     98a:	7801      	ldrb	r1, [r0, #0]
     98c:	4391      	bics	r1, r2
     98e:	4331      	orrs	r1, r6
     990:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     992:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     996:	4321      	orrs	r1, r4
     998:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     99a:	7981      	ldrb	r1, [r0, #6]
     99c:	43a1      	bics	r1, r4
     99e:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9a0:	2180      	movs	r1, #128	; 0x80
     9a2:	02c9      	lsls	r1, r1, #11
     9a4:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a6:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a8:	7801      	ldrb	r1, [r0, #0]
     9aa:	43a1      	bics	r1, r4
     9ac:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ae:	2180      	movs	r1, #128	; 0x80
     9b0:	0149      	lsls	r1, r1, #5
     9b2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b4:	7881      	ldrb	r1, [r0, #2]
     9b6:	43a1      	bics	r1, r4
     9b8:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ba:	2180      	movs	r1, #128	; 0x80
     9bc:	01c9      	lsls	r1, r1, #7
     9be:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c0:	0019      	movs	r1, r3
     9c2:	314d      	adds	r1, #77	; 0x4d
     9c4:	7808      	ldrb	r0, [r1, #0]
     9c6:	43a0      	bics	r0, r4
     9c8:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9ca:	7808      	ldrb	r0, [r1, #0]
     9cc:	4330      	orrs	r0, r6
     9ce:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9d0:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d2:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9d4:	0189      	lsls	r1, r1, #6
     9d6:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d8:	304f      	adds	r0, #79	; 0x4f
     9da:	7801      	ldrb	r1, [r0, #0]
     9dc:	43a1      	bics	r1, r4
     9de:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9e0:	2180      	movs	r1, #128	; 0x80
     9e2:	0209      	lsls	r1, r1, #8
     9e4:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9e6:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9e8:	0019      	movs	r1, r3
     9ea:	3155      	adds	r1, #85	; 0x55
     9ec:	7808      	ldrb	r0, [r1, #0]
     9ee:	43a0      	bics	r0, r4
     9f0:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9f2:	2080      	movs	r0, #128	; 0x80
     9f4:	0380      	lsls	r0, r0, #14
     9f6:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9f8:	2040      	movs	r0, #64	; 0x40
     9fa:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9fc:	7848      	ldrb	r0, [r1, #1]
     9fe:	43a0      	bics	r0, r4
     a00:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     a02:	2080      	movs	r0, #128	; 0x80
     a04:	03c0      	lsls	r0, r0, #15
     a06:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     a08:	0018      	movs	r0, r3
     a0a:	303b      	adds	r0, #59	; 0x3b
     a0c:	7805      	ldrb	r5, [r0, #0]
     a0e:	4395      	bics	r5, r2
     a10:	4335      	orrs	r5, r6
     a12:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a14:	784d      	ldrb	r5, [r1, #1]
     a16:	4325      	orrs	r5, r4
     a18:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     a1a:	788d      	ldrb	r5, [r1, #2]
     a1c:	43a5      	bics	r5, r4
     a1e:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     a20:	788d      	ldrb	r5, [r1, #2]
     a22:	4335      	orrs	r5, r6
     a24:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     a26:	2580      	movs	r5, #128	; 0x80
     a28:	042d      	lsls	r5, r5, #16
     a2a:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a2c:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a2e:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     a30:	4e20      	ldr	r6, [pc, #128]	; (ab4 <init+0x328>)
     a32:	401a      	ands	r2, r3
     a34:	433a      	orrs	r2, r7
     a36:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a38:	788b      	ldrb	r3, [r1, #2]
     a3a:	2204      	movs	r2, #4
     a3c:	4323      	orrs	r3, r4
     a3e:	708b      	strb	r3, [r1, #2]
     a40:	2000      	movs	r0, #0
     a42:	2103      	movs	r1, #3
     a44:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a46:	002b      	movs	r3, r5
     a48:	002a      	movs	r2, r5
     a4a:	0028      	movs	r0, r5
     a4c:	4f1a      	ldr	r7, [pc, #104]	; (ab8 <init+0x32c>)
     a4e:	9501      	str	r5, [sp, #4]
     a50:	9500      	str	r5, [sp, #0]
     a52:	2103      	movs	r1, #3
     a54:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a56:	0020      	movs	r0, r4
     a58:	2204      	movs	r2, #4
     a5a:	2103      	movs	r1, #3
     a5c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a5e:	002b      	movs	r3, r5
     a60:	002a      	movs	r2, r5
     a62:	0020      	movs	r0, r4
     a64:	9501      	str	r5, [sp, #4]
     a66:	9500      	str	r5, [sp, #0]
     a68:	2103      	movs	r1, #3
     a6a:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a6c:	2208      	movs	r2, #8
     a6e:	2104      	movs	r1, #4
     a70:	2003      	movs	r0, #3
     a72:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     a74:	0021      	movs	r1, r4
     a76:	002a      	movs	r2, r5
     a78:	2003      	movs	r0, #3
     a7a:	4b10      	ldr	r3, [pc, #64]	; (abc <init+0x330>)
     a7c:	4c10      	ldr	r4, [pc, #64]	; (ac0 <init+0x334>)
     a7e:	47a0      	blx	r4

    TC4Init();
     a80:	4b10      	ldr	r3, [pc, #64]	; (ac4 <init+0x338>)
     a82:	4798      	blx	r3
    TC5Init();
     a84:	4b10      	ldr	r3, [pc, #64]	; (ac8 <init+0x33c>)
     a86:	4798      	blx	r3
}
     a88:	b005      	add	sp, #20
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a8c:	000001d5 	.word	0x000001d5
     a90:	00000fb9 	.word	0x00000fb9
     a94:	00001041 	.word	0x00001041
     a98:	0000110d 	.word	0x0000110d
     a9c:	00000da1 	.word	0x00000da1
     aa0:	000012ad 	.word	0x000012ad
     aa4:	e000e100 	.word	0xe000e100
     aa8:	ff00ffff 	.word	0xff00ffff
     aac:	41004400 	.word	0x41004400
     ab0:	41004435 	.word	0x41004435
     ab4:	00001b25 	.word	0x00001b25
     ab8:	00001b89 	.word	0x00001b89
     abc:	0000f2e4 	.word	0x0000f2e4
     ac0:	00001bed 	.word	0x00001bed
     ac4:	000011dd 	.word	0x000011dd
     ac8:	00001245 	.word	0x00001245

00000acc <startUp>:

void startUp(Altimeter *my_altimeter) {
     acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     ace:	0007      	movs	r7, r0

    beep(400);
     ad0:	20c8      	movs	r0, #200	; 0xc8
     ad2:	4b2b      	ldr	r3, [pc, #172]	; (b80 <startUp+0xb4>)
     ad4:	0040      	lsls	r0, r0, #1
     ad6:	4798      	blx	r3

    u32_t startupTime = millis();
     ad8:	4c2a      	ldr	r4, [pc, #168]	; (b84 <startUp+0xb8>)
     ada:	47a0      	blx	r4
     adc:	0006      	movs	r6, r0
     ade:	9401      	str	r4, [sp, #4]

    while((millis() - startupTime) < 15000) {
     ae0:	9b01      	ldr	r3, [sp, #4]
     ae2:	4798      	blx	r3
     ae4:	4b28      	ldr	r3, [pc, #160]	; (b88 <startUp+0xbc>)
     ae6:	1b80      	subs	r0, r0, r6
     ae8:	4298      	cmp	r0, r3
     aea:	d845      	bhi.n	b78 <startUp+0xac>

        if (USARTconnectionAvaliable()) {
     aec:	4b27      	ldr	r3, [pc, #156]	; (b8c <startUp+0xc0>)
     aee:	4798      	blx	r3
     af0:	2800      	cmp	r0, #0
     af2:	d0f5      	beq.n	ae0 <startUp+0x14>

            my_altimeter->myFlightState = flightIdle;
     af4:	2301      	movs	r3, #1

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     af6:	4a26      	ldr	r2, [pc, #152]	; (b90 <startUp+0xc4>)

    while((millis() - startupTime) < 15000) {

        if (USARTconnectionAvaliable()) {

            my_altimeter->myFlightState = flightIdle;
     af8:	703b      	strb	r3, [r7, #0]

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     afa:	7e13      	ldrb	r3, [r2, #24]
     afc:	075b      	lsls	r3, r3, #29
     afe:	d5fc      	bpl.n	afa <startUp+0x2e>
            u8_t option = usartDataIn(USART3);
     b00:	2003      	movs	r0, #3
     b02:	4d24      	ldr	r5, [pc, #144]	; (b94 <startUp+0xc8>)
     b04:	47a8      	blx	r5
     b06:	1e04      	subs	r4, r0, #0

            //user wants to read flight logs
            if (option == 0x4C) {
     b08:	2c4c      	cmp	r4, #76	; 0x4c
     b0a:	d12d      	bne.n	b68 <startUp+0x9c>
     b0c:	2400      	movs	r4, #0

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                    if (isFlightLogged(flightLog)) {
     b0e:	0020      	movs	r0, r4
     b10:	4b21      	ldr	r3, [pc, #132]	; (b98 <startUp+0xcc>)
     b12:	4798      	blx	r3
     b14:	2800      	cmp	r0, #0
     b16:	d005      	beq.n	b24 <startUp+0x58>

                        usartDataOut(USART3, flightLog + 0x30);
     b18:	0021      	movs	r1, r4
     b1a:	3130      	adds	r1, #48	; 0x30
     b1c:	b2c9      	uxtb	r1, r1
     b1e:	2003      	movs	r0, #3
     b20:	4b1e      	ldr	r3, [pc, #120]	; (b9c <startUp+0xd0>)
     b22:	4798      	blx	r3

            //user wants to read flight logs
            if (option == 0x4C) {

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
     b24:	3401      	adds	r4, #1
     b26:	b2e4      	uxtb	r4, r4
     b28:	2c0b      	cmp	r4, #11
     b2a:	d1f0      	bne.n	b0e <startUp+0x42>

                        usartDataOut(USART3, flightLog + 0x30);
                    }
                }
                //done sending flight numbers
                usartDataOut(USART3, 0x0F);
     b2c:	210f      	movs	r1, #15
     b2e:	2003      	movs	r0, #3
     b30:	4e1a      	ldr	r6, [pc, #104]	; (b9c <startUp+0xd0>)
     b32:	47b0      	blx	r6

                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     b34:	4b16      	ldr	r3, [pc, #88]	; (b90 <startUp+0xc4>)
     b36:	7e1b      	ldrb	r3, [r3, #24]
     b38:	075b      	lsls	r3, r3, #29
     b3a:	d5fb      	bpl.n	b34 <startUp+0x68>
                u8_t flightToRead = usartDataIn(USART3) - 0x30;
     b3c:	2003      	movs	r0, #3
     b3e:	47a8      	blx	r5
     b40:	3830      	subs	r0, #48	; 0x30
     b42:	b2c4      	uxtb	r4, r0


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b44:	0020      	movs	r0, r4
     b46:	4b16      	ldr	r3, [pc, #88]	; (ba0 <startUp+0xd4>)
     b48:	4798      	blx	r3
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b4a:	4b16      	ldr	r3, [pc, #88]	; (ba4 <startUp+0xd8>)
                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                u8_t flightToRead = usartDataIn(USART3) - 0x30;


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b4c:	0005      	movs	r5, r0
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b4e:	0020      	movs	r0, r4
     b50:	4798      	blx	r3
     b52:	0004      	movs	r4, r0

                //inform of page numbers
                u8_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
                usartDataOut(USART3, pagesToSend);
     b54:	1b41      	subs	r1, r0, r5
     b56:	0a09      	lsrs	r1, r1, #8
     b58:	b2c9      	uxtb	r1, r1
     b5a:	2003      	movs	r0, #3
     b5c:	47b0      	blx	r6

                //USART out the flights pages
                sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
     b5e:	0021      	movs	r1, r4
     b60:	0028      	movs	r0, r5
     b62:	4b11      	ldr	r3, [pc, #68]	; (ba8 <startUp+0xdc>)
     b64:	4798      	blx	r3

                break;
     b66:	e007      	b.n	b78 <startUp+0xac>
            }
            //user wants to erase chip
            if (option == 0x45) {
     b68:	2845      	cmp	r0, #69	; 0x45
     b6a:	d1b9      	bne.n	ae0 <startUp+0x14>
                AT25SFChipErase();
     b6c:	4b0f      	ldr	r3, [pc, #60]	; (bac <startUp+0xe0>)
     b6e:	4798      	blx	r3
				
                usartDataOut(USART3, 'E');
     b70:	0021      	movs	r1, r4
     b72:	2003      	movs	r0, #3
     b74:	4b09      	ldr	r3, [pc, #36]	; (b9c <startUp+0xd0>)
     b76:	4798      	blx	r3
                break;
            }
        }
    }

    startupJingle();
     b78:	4b0d      	ldr	r3, [pc, #52]	; (bb0 <startUp+0xe4>)
     b7a:	4798      	blx	r3
}
     b7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00000f45 	.word	0x00000f45
     b84:	000011a9 	.word	0x000011a9
     b88:	00003a97 	.word	0x00003a97
     b8c:	00000d25 	.word	0x00000d25
     b90:	42001400 	.word	0x42001400
     b94:	00001c61 	.word	0x00001c61
     b98:	0000160d 	.word	0x0000160d
     b9c:	00001c49 	.word	0x00001c49
     ba0:	000015e5 	.word	0x000015e5
     ba4:	00001659 	.word	0x00001659
     ba8:	00000d59 	.word	0x00000d59
     bac:	000001e5 	.word	0x000001e5
     bb0:	00000f81 	.word	0x00000f81

00000bb4 <main>:

int main(void) {
     bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb6:	4c39      	ldr	r4, [pc, #228]	; (c9c <main+0xe8>)

    init();
     bb8:	4b39      	ldr	r3, [pc, #228]	; (ca0 <main+0xec>)
    }

    startupJingle();
}

int main(void) {
     bba:	44a5      	add	sp, r4

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bbc:	2400      	movs	r4, #0
     bbe:	ae03      	add	r6, sp, #12
    startupJingle();
}

int main(void) {

    init();
     bc0:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
     bc2:	4b38      	ldr	r3, [pc, #224]	; (ca4 <main+0xf0>)
     bc4:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bc6:	7034      	strb	r4, [r6, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     bc8:	4798      	blx	r3
    IMUinit();
     bca:	4b37      	ldr	r3, [pc, #220]	; (ca8 <main+0xf4>)
     bcc:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bce:	23c8      	movs	r3, #200	; 0xc8
    my_altimeter.myFlashMemory.pageReady = false;
     bd0:	4f36      	ldr	r7, [pc, #216]	; (cac <main+0xf8>)
    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bd2:	005b      	lsls	r3, r3, #1
     bd4:	54f4      	strb	r4, [r6, r3]
    my_altimeter.myFlashMemory.pageReady = false;


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bd6:	0030      	movs	r0, r6
     bd8:	4b35      	ldr	r3, [pc, #212]	; (cb0 <main+0xfc>)
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     bda:	55f4      	strb	r4, [r6, r7]


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bdc:	4798      	blx	r3

    //my_altimeter.myFlightState = flightIdle;


    flight(&my_altimeter);
     bde:	0030      	movs	r0, r6
     be0:	4b34      	ldr	r3, [pc, #208]	; (cb4 <main+0x100>)
     be2:	4798      	blx	r3

    sampleTaken();
     be4:	4c34      	ldr	r4, [pc, #208]	; (cb8 <main+0x104>)
     be6:	47a0      	blx	r4


    u32_t timeNow = millis();
     be8:	4d34      	ldr	r5, [pc, #208]	; (cbc <main+0x108>)
     bea:	47a8      	blx	r5
     bec:	9701      	str	r7, [sp, #4]
     bee:	4f31      	ldr	r7, [pc, #196]	; (cb4 <main+0x100>)
     bf0:	9000      	str	r0, [sp, #0]
    while((millis() - timeNow) < 3000) {
     bf2:	47a8      	blx	r5
     bf4:	9b00      	ldr	r3, [sp, #0]
     bf6:	1ac0      	subs	r0, r0, r3
     bf8:	4b31      	ldr	r3, [pc, #196]	; (cc0 <main+0x10c>)
     bfa:	4298      	cmp	r0, r3
     bfc:	d805      	bhi.n	c0a <main+0x56>
        sampleTick(&my_altimeter);
     bfe:	0030      	movs	r0, r6
     c00:	4b30      	ldr	r3, [pc, #192]	; (cc4 <main+0x110>)
     c02:	4798      	blx	r3
        flight(&my_altimeter);
     c04:	0030      	movs	r0, r6
     c06:	47b8      	blx	r7
     c08:	e7f3      	b.n	bf2 <main+0x3e>
    }

    if (my_altimeter.myFlightState != flightIdle) {
     c0a:	7833      	ldrb	r3, [r6, #0]
     c0c:	2b01      	cmp	r3, #1
     c0e:	d005      	beq.n	c1c <main+0x68>
        findNewFlightStart(&my_altimeter);
     c10:	0030      	movs	r0, r6
     c12:	4b2d      	ldr	r3, [pc, #180]	; (cc8 <main+0x114>)
     c14:	4798      	blx	r3
        logFlight(&my_altimeter);
     c16:	0030      	movs	r0, r6
     c18:	4b2c      	ldr	r3, [pc, #176]	; (ccc <main+0x118>)
     c1a:	4798      	blx	r3
    }

    sampleTaken();
     c1c:	47a0      	blx	r4
    writeLog = false;
     c1e:	2300      	movs	r3, #0
     c20:	4c2b      	ldr	r4, [pc, #172]	; (cd0 <main+0x11c>)
     c22:	7023      	strb	r3, [r4, #0]
     c24:	9400      	str	r4, [sp, #0]


    while (1) {

        if (takeSample()) {
     c26:	4b2b      	ldr	r3, [pc, #172]	; (cd4 <main+0x120>)
     c28:	4798      	blx	r3
     c2a:	2800      	cmp	r0, #0
     c2c:	d016      	beq.n	c5c <main+0xa8>
            sampleTick(&my_altimeter);
     c2e:	4b25      	ldr	r3, [pc, #148]	; (cc4 <main+0x110>)
     c30:	0030      	movs	r0, r6
     c32:	4798      	blx	r3
            flight(&my_altimeter);
     c34:	0030      	movs	r0, r6
     c36:	47b8      	blx	r7

            if (my_altimeter.batFloat < 3.4) {
     c38:	23a6      	movs	r3, #166	; 0xa6
     c3a:	ad03      	add	r5, sp, #12
     c3c:	009b      	lsls	r3, r3, #2
     c3e:	58e8      	ldr	r0, [r5, r3]
     c40:	4b25      	ldr	r3, [pc, #148]	; (cd8 <main+0x124>)
     c42:	4798      	blx	r3
     c44:	4a25      	ldr	r2, [pc, #148]	; (cdc <main+0x128>)
     c46:	4b26      	ldr	r3, [pc, #152]	; (ce0 <main+0x12c>)
     c48:	4c26      	ldr	r4, [pc, #152]	; (ce4 <main+0x130>)
     c4a:	47a0      	blx	r4
     c4c:	2800      	cmp	r0, #0
     c4e:	d005      	beq.n	c5c <main+0xa8>
                my_altimeter.myFlightState = flightIdle;
     c50:	2301      	movs	r3, #1
                beep(1000);
     c52:	20fa      	movs	r0, #250	; 0xfa
        if (takeSample()) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);

            if (my_altimeter.batFloat < 3.4) {
                my_altimeter.myFlightState = flightIdle;
     c54:	702b      	strb	r3, [r5, #0]
                beep(1000);
     c56:	0080      	lsls	r0, r0, #2
     c58:	4b23      	ldr	r3, [pc, #140]	; (ce8 <main+0x134>)
     c5a:	4798      	blx	r3
            }
        }

        if (writeLog) {
     c5c:	9b00      	ldr	r3, [sp, #0]
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b00      	cmp	r3, #0
     c62:	d0e0      	beq.n	c26 <main+0x72>
            writeLog = false;
     c64:	2500      	movs	r5, #0
     c66:	9b00      	ldr	r3, [sp, #0]
            logSensors(&my_altimeter);
     c68:	0030      	movs	r0, r6
                beep(1000);
            }
        }

        if (writeLog) {
            writeLog = false;
     c6a:	701d      	strb	r5, [r3, #0]
            logSensors(&my_altimeter);
     c6c:	4b1f      	ldr	r3, [pc, #124]	; (cec <main+0x138>)
     c6e:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     c70:	9a01      	ldr	r2, [sp, #4]
     c72:	ab03      	add	r3, sp, #12
     c74:	5c9b      	ldrb	r3, [r3, r2]
     c76:	42ab      	cmp	r3, r5
     c78:	d0d5      	beq.n	c26 <main+0x72>
                my_altimeter.myFlashMemory.pageReady = false;
     c7a:	4b0c      	ldr	r3, [pc, #48]	; (cac <main+0xf8>)
     c7c:	aa03      	add	r2, sp, #12
     c7e:	54d5      	strb	r5, [r2, r3]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c80:	2280      	movs	r2, #128	; 0x80
     c82:	4b1b      	ldr	r3, [pc, #108]	; (cf0 <main+0x13c>)
     c84:	0352      	lsls	r2, r2, #13
     c86:	61da      	str	r2, [r3, #28]

                pinToggle(LedPin);

                u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
     c88:	a927      	add	r1, sp, #156	; 0x9c
     c8a:	4b1a      	ldr	r3, [pc, #104]	; (cf4 <main+0x140>)
     c8c:	9825      	ldr	r0, [sp, #148]	; 0x94
     c8e:	4798      	blx	r3
                my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     c90:	9b25      	ldr	r3, [sp, #148]	; 0x94
     c92:	3301      	adds	r3, #1
     c94:	33ff      	adds	r3, #255	; 0xff
     c96:	9325      	str	r3, [sp, #148]	; 0x94
     c98:	e7c5      	b.n	c26 <main+0x72>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	fffffd44 	.word	0xfffffd44
     ca0:	0000078d 	.word	0x0000078d
     ca4:	000006fd 	.word	0x000006fd
     ca8:	00000cf9 	.word	0x00000cf9
     cac:	00000291 	.word	0x00000291
     cb0:	00000acd 	.word	0x00000acd
     cb4:	0000130d 	.word	0x0000130d
     cb8:	00001749 	.word	0x00001749
     cbc:	000011a9 	.word	0x000011a9
     cc0:	00000bb7 	.word	0x00000bb7
     cc4:	00001755 	.word	0x00001755
     cc8:	00001689 	.word	0x00001689
     ccc:	000014f5 	.word	0x000014f5
     cd0:	20000461 	.word	0x20000461
     cd4:	00001731 	.word	0x00001731
     cd8:	000032f1 	.word	0x000032f1
     cdc:	33333333 	.word	0x33333333
     ce0:	400b3333 	.word	0x400b3333
     ce4:	00001c9d 	.word	0x00001c9d
     ce8:	00000f45 	.word	0x00000f45
     cec:	00001551 	.word	0x00001551
     cf0:	41004400 	.word	0x41004400
     cf4:	000002ed 	.word	0x000002ed

00000cf8 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     cf8:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cfa:	4c08      	ldr	r4, [pc, #32]	; (d1c <IMUinit+0x24>)
     cfc:	2580      	movs	r5, #128	; 0x80
     cfe:	0023      	movs	r3, r4
     d00:	00ed      	lsls	r5, r5, #3
     d02:	3394      	adds	r3, #148	; 0x94
     d04:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     d06:	4e06      	ldr	r6, [pc, #24]	; (d20 <IMUinit+0x28>)
     d08:	210f      	movs	r1, #15
     d0a:	2000      	movs	r0, #0
     d0c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d0e:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     d10:	210c      	movs	r1, #12
     d12:	2000      	movs	r0, #0
     d14:	47b0      	blx	r6
     d16:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     d18:	bd70      	pop	{r4, r5, r6, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	41004400 	.word	0x41004400
     d20:	00001c31 	.word	0x00001c31

00000d24 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable(){
     d24:	b510      	push	{r4, lr}

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     d26:	4b09      	ldr	r3, [pc, #36]	; (d4c <USARTconnectionAvaliable+0x28>)
     d28:	7e1c      	ldrb	r4, [r3, #24]
     d2a:	0764      	lsls	r4, r4, #29
     d2c:	0fe4      	lsrs	r4, r4, #31
     d2e:	2c01      	cmp	r4, #1
     d30:	d001      	beq.n	d36 <USARTconnectionAvaliable+0x12>
			}
			else{
				return false;
			}
	}
		return false;
     d32:	2000      	movs	r0, #0
     d34:	e009      	b.n	d4a <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable(){

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
		u8_t connectAttempt = usartDataIn(USART3);
     d36:	2003      	movs	r0, #3
     d38:	4b05      	ldr	r3, [pc, #20]	; (d50 <USARTconnectionAvaliable+0x2c>)
     d3a:	4798      	blx	r3
     d3c:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     d3e:	2948      	cmp	r1, #72	; 0x48
     d40:	d1f7      	bne.n	d32 <USARTconnectionAvaliable+0xe>
				usartDataOut(USART3, 'H');
     d42:	2003      	movs	r0, #3
     d44:	4b03      	ldr	r3, [pc, #12]	; (d54 <USARTconnectionAvaliable+0x30>)
     d46:	4798      	blx	r3
				return true;
     d48:	0020      	movs	r0, r4
			else{
				return false;
			}
	}
		return false;
  }
     d4a:	bd10      	pop	{r4, pc}
     d4c:	42001400 	.word	0x42001400
     d50:	00001c61 	.word	0x00001c61
     d54:	00001c49 	.word	0x00001c49

00000d58 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (u8_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d5a:	2780      	movs	r7, #128	; 0x80
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d5c:	0005      	movs	r5, r0
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u8_t page = 0; page <= pagesToSend; ++page) {
     d5e:	2400      	movs	r4, #0
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
     d60:	1a09      	subs	r1, r1, r0
     d62:	0a09      	lsrs	r1, r1, #8
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d64:	b0c3      	sub	sp, #268	; 0x10c
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
     d66:	b2cb      	uxtb	r3, r1
     d68:	9301      	str	r3, [sp, #4]
	for (u8_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d6a:	007f      	lsls	r7, r7, #1
	u32_t pageToReadAddress = firstPage;

	for (u8_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     d6c:	a902      	add	r1, sp, #8
     d6e:	0028      	movs	r0, r5
     d70:	4b09      	ldr	r3, [pc, #36]	; (d98 <sendTheasePagesToComputer+0x40>)
     d72:	4798      	blx	r3
     d74:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
     d76:	ab02      	add	r3, sp, #8
     d78:	5d99      	ldrb	r1, [r3, r6]
     d7a:	2003      	movs	r0, #3
     d7c:	4b07      	ldr	r3, [pc, #28]	; (d9c <sendTheasePagesToComputer+0x44>)
     d7e:	3601      	adds	r6, #1
     d80:	4798      	blx	r3
	for (u8_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d82:	42be      	cmp	r6, r7
     d84:	d1f7      	bne.n	d76 <sendTheasePagesToComputer+0x1e>
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u8_t page = 0; page <= pagesToSend; ++page) {
     d86:	3401      	adds	r4, #1
     d88:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     d8a:	3501      	adds	r5, #1
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u8_t page = 0; page <= pagesToSend; ++page) {
     d8c:	b2e4      	uxtb	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     d8e:	35ff      	adds	r5, #255	; 0xff
	
    u8_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u8_t page = 0; page <= pagesToSend; ++page) {
     d90:	42a3      	cmp	r3, r4
     d92:	d2eb      	bcs.n	d6c <sendTheasePagesToComputer+0x14>
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
 }
     d94:	b043      	add	sp, #268	; 0x10c
     d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d98:	000003d1 	.word	0x000003d1
     d9c:	00001c49 	.word	0x00001c49

00000da0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     da0:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     da2:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     da4:	4a10      	ldr	r2, [pc, #64]	; (de8 <adcInit+0x48>)
     da6:	0249      	lsls	r1, r1, #9
     da8:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     daa:	4810      	ldr	r0, [pc, #64]	; (dec <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dac:	430b      	orrs	r3, r1
     dae:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     db0:	23e0      	movs	r3, #224	; 0xe0
     db2:	490f      	ldr	r1, [pc, #60]	; (df0 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     db4:	4a0f      	ldr	r2, [pc, #60]	; (df4 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     db6:	00db      	lsls	r3, r3, #3
     db8:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dba:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     dbc:	4a0e      	ldr	r2, [pc, #56]	; (df8 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     dbe:	6812      	ldr	r2, [r2, #0]
     dc0:	0150      	lsls	r0, r2, #5
     dc2:	4018      	ands	r0, r3
     dc4:	4b0d      	ldr	r3, [pc, #52]	; (dfc <adcInit+0x5c>)
     dc6:	0154      	lsls	r4, r2, #5
     dc8:	681a      	ldr	r2, [r3, #0]
     dca:	0ed3      	lsrs	r3, r2, #27
     dcc:	4323      	orrs	r3, r4
     dce:	b2da      	uxtb	r2, r3
     dd0:	0003      	movs	r3, r0
     dd2:	4313      	orrs	r3, r2
     dd4:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     dd6:	2302      	movs	r3, #2
     dd8:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     dda:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ddc:	7e4b      	ldrb	r3, [r1, #25]
     dde:	b25b      	sxtb	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	dbfb      	blt.n	ddc <adcInit+0x3c>
}
     de4:	bd10      	pop	{r4, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	40000400 	.word	0x40000400
     dec:	0000401e 	.word	0x0000401e
     df0:	42004000 	.word	0x42004000
     df4:	40000c00 	.word	0x40000c00
     df8:	00806024 	.word	0x00806024
     dfc:	00806020 	.word	0x00806020

00000e00 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     e00:	2202      	movs	r2, #2
     e02:	4b05      	ldr	r3, [pc, #20]	; (e18 <adcSample+0x18>)
     e04:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     e06:	3a01      	subs	r2, #1
     e08:	7e19      	ldrb	r1, [r3, #24]
     e0a:	4211      	tst	r1, r2
     e0c:	d0fc      	beq.n	e08 <adcSample+0x8>
    return ADC->RESULT.reg;
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <adcSample+0x18>)
     e10:	8b58      	ldrh	r0, [r3, #26]
     e12:	b280      	uxth	r0, r0
}
     e14:	4770      	bx	lr
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	42004000 	.word	0x42004000

00000e1c <adc_read>:


u16_t adc_read(Pin p) {
     e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e1e:	2501      	movs	r5, #1
     e20:	0c02      	lsrs	r2, r0, #16
     e22:	b2d4      	uxtb	r4, r2
     e24:	9000      	str	r0, [sp, #0]
     e26:	0e00      	lsrs	r0, r0, #24
     e28:	9101      	str	r1, [sp, #4]
     e2a:	0842      	lsrs	r2, r0, #1
     e2c:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e2e:	4911      	ldr	r1, [pc, #68]	; (e74 <adc_read+0x58>)
     e30:	18d2      	adds	r2, r2, r3
     e32:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e34:	4228      	tst	r0, r5
     e36:	d005      	beq.n	e44 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e38:	210f      	movs	r1, #15
     e3a:	7814      	ldrb	r4, [r2, #0]
     e3c:	4021      	ands	r1, r4
     e3e:	2410      	movs	r4, #16
     e40:	4321      	orrs	r1, r4
     e42:	e003      	b.n	e4c <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e44:	240f      	movs	r4, #15
     e46:	7811      	ldrb	r1, [r2, #0]
     e48:	43a1      	bics	r1, r4
     e4a:	4329      	orrs	r1, r5
     e4c:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     e4e:	2101      	movs	r1, #1
     e50:	4a09      	ldr	r2, [pc, #36]	; (e78 <adc_read+0x5c>)
     e52:	18c3      	adds	r3, r0, r3
     e54:	189b      	adds	r3, r3, r2
     e56:	781a      	ldrb	r2, [r3, #0]
     e58:	430a      	orrs	r2, r1
     e5a:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e5c:	466b      	mov	r3, sp
     e5e:	791a      	ldrb	r2, [r3, #4]
     e60:	231f      	movs	r3, #31
     e62:	4013      	ands	r3, r2
     e64:	22c0      	movs	r2, #192	; 0xc0
     e66:	0152      	lsls	r2, r2, #5
     e68:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e6a:	4a04      	ldr	r2, [pc, #16]	; (e7c <adc_read+0x60>)
     e6c:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     e6e:	4b04      	ldr	r3, [pc, #16]	; (e80 <adc_read+0x64>)
     e70:	4798      	blx	r3
     e72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e74:	41004430 	.word	0x41004430
     e78:	41004440 	.word	0x41004440
     e7c:	42004000 	.word	0x42004000
     e80:	00000e01 	.word	0x00000e01

00000e84 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     e84:	0c01      	lsrs	r1, r0, #16
     e86:	0c13      	lsrs	r3, r2, #16
     e88:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8a:	b2cd      	uxtb	r5, r1
     e8c:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e8e:	2301      	movs	r3, #1
     e90:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e92:	0e12      	lsrs	r2, r2, #24
     e94:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e96:	0e00      	lsrs	r0, r0, #24
     e98:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e9a:	001a      	movs	r2, r3
     e9c:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e9e:	0030      	movs	r0, r6
     ea0:	4e11      	ldr	r6, [pc, #68]	; (ee8 <byteOut+0x64>)
     ea2:	01c9      	lsls	r1, r1, #7
     ea4:	b087      	sub	sp, #28
     ea6:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ea8:	4e10      	ldr	r6, [pc, #64]	; (eec <byteOut+0x68>)
     eaa:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eac:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     eae:	19ae      	adds	r6, r5, r6
     eb0:	7824      	ldrb	r4, [r4, #0]
     eb2:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eb4:	4e0c      	ldr	r6, [pc, #48]	; (ee8 <byteOut+0x64>)
     eb6:	46b4      	mov	ip, r6
     eb8:	44ac      	add	ip, r5
     eba:	4666      	mov	r6, ip
     ebc:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     ebe:	b266      	sxtb	r6, r4
     ec0:	2e00      	cmp	r6, #0
     ec2:	da05      	bge.n	ed0 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ec4:	4e09      	ldr	r6, [pc, #36]	; (eec <byteOut+0x68>)
     ec6:	46b4      	mov	ip, r6
     ec8:	448c      	add	ip, r1
     eca:	4666      	mov	r6, ip
     ecc:	6032      	str	r2, [r6, #0]
     ece:	e000      	b.n	ed2 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ed0:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ed2:	9e01      	ldr	r6, [sp, #4]
     ed4:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     ed6:	0064      	lsls	r4, r4, #1
     ed8:	b2db      	uxtb	r3, r3
     eda:	6030      	str	r0, [r6, #0]
     edc:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     ede:	2b00      	cmp	r3, #0
     ee0:	d1e8      	bne.n	eb4 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     ee2:	b007      	add	sp, #28
     ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	41004414 	.word	0x41004414
     eec:	41004418 	.word	0x41004418

00000ef0 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ef2:	2501      	movs	r5, #1
     ef4:	b085      	sub	sp, #20
     ef6:	9103      	str	r1, [sp, #12]
     ef8:	0011      	movs	r1, r2
     efa:	0c06      	lsrs	r6, r0, #16
     efc:	9301      	str	r3, [sp, #4]
     efe:	b2f3      	uxtb	r3, r6
     f00:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f02:	0e09      	lsrs	r1, r1, #24
     f04:	0c14      	lsrs	r4, r2, #16
     f06:	9002      	str	r0, [sp, #8]
     f08:	9200      	str	r2, [sp, #0]
     f0a:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f0c:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f0e:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     f10:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f12:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f14:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f16:	4c0a      	ldr	r4, [pc, #40]	; (f40 <byteIn+0x50>)
     f18:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f1a:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f1c:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f1e:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f20:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f22:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     f24:	0040      	lsls	r0, r0, #1
     f26:	402c      	ands	r4, r5
     f28:	1e67      	subs	r7, r4, #1
     f2a:	41bc      	sbcs	r4, r7
     f2c:	3901      	subs	r1, #1
     f2e:	4304      	orrs	r4, r0
     f30:	b2c9      	uxtb	r1, r1
     f32:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f34:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     f36:	2900      	cmp	r1, #0
     f38:	d1f2      	bne.n	f20 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     f3a:	b005      	add	sp, #20
     f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	41004400 	.word	0x41004400

00000f44 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f46:	2380      	movs	r3, #128	; 0x80
     f48:	2780      	movs	r7, #128	; 0x80
     f4a:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f4c:	2500      	movs	r5, #0
     f4e:	4c0a      	ldr	r4, [pc, #40]	; (f78 <beep+0x34>)
     f50:	035b      	lsls	r3, r3, #13
     f52:	61e3      	str	r3, [r4, #28]
     f54:	03bf      	lsls	r7, r7, #14
     f56:	42b5      	cmp	r5, r6
     f58:	d006      	beq.n	f68 <beep+0x24>
     f5a:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     f5c:	207a      	movs	r0, #122	; 0x7a
     f5e:	4b07      	ldr	r3, [pc, #28]	; (f7c <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f60:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     f62:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f64:	b2ad      	uxth	r5, r5
     f66:	e7f6      	b.n	f56 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f68:	2380      	movs	r3, #128	; 0x80
     f6a:	039b      	lsls	r3, r3, #14
     f6c:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	035b      	lsls	r3, r3, #13
     f72:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	41004400 	.word	0x41004400
     f7c:	0000112d 	.word	0x0000112d

00000f80 <startupJingle>:

void startupJingle(){
     f80:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     f82:	2696      	movs	r6, #150	; 0x96
     f84:	0076      	lsls	r6, r6, #1
     f86:	4d0a      	ldr	r5, [pc, #40]	; (fb0 <startupJingle+0x30>)
     f88:	0030      	movs	r0, r6
     f8a:	47a8      	blx	r5
    delay_ms(80);
     f8c:	4c09      	ldr	r4, [pc, #36]	; (fb4 <startupJingle+0x34>)
     f8e:	2050      	movs	r0, #80	; 0x50
     f90:	47a0      	blx	r4
    beep(300);
     f92:	0030      	movs	r0, r6
     f94:	47a8      	blx	r5
    delay_ms(250);
     f96:	20fa      	movs	r0, #250	; 0xfa
     f98:	47a0      	blx	r4
    beep(300);
     f9a:	0030      	movs	r0, r6
     f9c:	47a8      	blx	r5
    delay_ms(80);
     f9e:	2050      	movs	r0, #80	; 0x50
     fa0:	47a0      	blx	r4
    beep(300);
     fa2:	0030      	movs	r0, r6
     fa4:	47a8      	blx	r5
    delay_ms(500);
     fa6:	20fa      	movs	r0, #250	; 0xfa
     fa8:	0040      	lsls	r0, r0, #1
     faa:	47a0      	blx	r4
}
     fac:	bd70      	pop	{r4, r5, r6, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	00000f45 	.word	0x00000f45
     fb4:	0000115d 	.word	0x0000115d

00000fb8 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fb8:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fba:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     fbc:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fbe:	4916      	ldr	r1, [pc, #88]	; (1018 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fc0:	4a16      	ldr	r2, [pc, #88]	; (101c <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fc2:	00db      	lsls	r3, r3, #3
     fc4:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fc6:	6853      	ldr	r3, [r2, #4]
     fc8:	4303      	orrs	r3, r0
     fca:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fcc:	4b14      	ldr	r3, [pc, #80]	; (1020 <GclkInit+0x68>)
     fce:	681a      	ldr	r2, [r3, #0]
     fd0:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     fd2:	2a3f      	cmp	r2, #63	; 0x3f
     fd4:	d100      	bne.n	fd8 <GclkInit+0x20>
        coarse = 0x1f;
     fd6:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     fd8:	4b12      	ldr	r3, [pc, #72]	; (1024 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     fda:	4813      	ldr	r0, [pc, #76]	; (1028 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	059b      	lsls	r3, r3, #22
     fe0:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     fe2:	4283      	cmp	r3, r0
     fe4:	d100      	bne.n	fe8 <GclkInit+0x30>
        fine = 0x1ff;
     fe6:	4b11      	ldr	r3, [pc, #68]	; (102c <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     fe8:	4811      	ldr	r0, [pc, #68]	; (1030 <GclkInit+0x78>)
     fea:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     fec:	2010      	movs	r0, #16
     fee:	68cc      	ldr	r4, [r1, #12]
     ff0:	4204      	tst	r4, r0
     ff2:	d0fc      	beq.n	fee <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ff4:	0292      	lsls	r2, r2, #10
     ff6:	4313      	orrs	r3, r2
     ff8:	4a07      	ldr	r2, [pc, #28]	; (1018 <GclkInit+0x60>)
     ffa:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     ffc:	2310      	movs	r3, #16
     ffe:	68ca      	ldr	r2, [r1, #12]
    1000:	421a      	tst	r2, r3
    1002:	d0fc      	beq.n	ffe <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
    1004:	4a0b      	ldr	r2, [pc, #44]	; (1034 <GclkInit+0x7c>)
    1006:	4b04      	ldr	r3, [pc, #16]	; (1018 <GclkInit+0x60>)
    1008:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
    100a:	2280      	movs	r2, #128	; 0x80
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <GclkInit+0x80>)
    100e:	0052      	lsls	r2, r2, #1
    1010:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
    1012:	4a0a      	ldr	r2, [pc, #40]	; (103c <GclkInit+0x84>)
    1014:	605a      	str	r2, [r3, #4]
}
    1016:	bd10      	pop	{r4, pc}
    1018:	40000800 	.word	0x40000800
    101c:	41004000 	.word	0x41004000
    1020:	00806024 	.word	0x00806024
    1024:	00806028 	.word	0x00806028
    1028:	000003ff 	.word	0x000003ff
    102c:	000001ff 	.word	0x000001ff
    1030:	00000522 	.word	0x00000522
    1034:	000005a2 	.word	0x000005a2
    1038:	40000c00 	.word	0x40000c00
    103c:	00010700 	.word	0x00010700

00001040 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
    1040:	4a1d      	ldr	r2, [pc, #116]	; (10b8 <RtcInit+0x78>)
    1042:	4b1e      	ldr	r3, [pc, #120]	; (10bc <RtcInit+0x7c>)
    1044:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    1046:	2202      	movs	r2, #2
    1048:	68d9      	ldr	r1, [r3, #12]
    104a:	4211      	tst	r1, r2
    104c:	d0fc      	beq.n	1048 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
    104e:	2281      	movs	r2, #129	; 0x81
    1050:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <RtcInit+0x80>)
    1052:	0052      	lsls	r2, r2, #1
    1054:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
    1056:	4a1b      	ldr	r2, [pc, #108]	; (10c4 <RtcInit+0x84>)
    1058:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    105a:	785a      	ldrb	r2, [r3, #1]
    105c:	b252      	sxtb	r2, r2
    105e:	2a00      	cmp	r2, #0
    1060:	dbfb      	blt.n	105a <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1062:	4a19      	ldr	r2, [pc, #100]	; (10c8 <RtcInit+0x88>)
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <RtcInit+0x80>)
    1066:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    1068:	2204      	movs	r2, #4
    106a:	4b18      	ldr	r3, [pc, #96]	; (10cc <RtcInit+0x8c>)
    106c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    106e:	7a9a      	ldrb	r2, [r3, #10]
    1070:	4916      	ldr	r1, [pc, #88]	; (10cc <RtcInit+0x8c>)
    1072:	09d2      	lsrs	r2, r2, #7
    1074:	d1fb      	bne.n	106e <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    1076:	20a0      	movs	r0, #160	; 0xa0
    1078:	880a      	ldrh	r2, [r1, #0]
    107a:	00c0      	lsls	r0, r0, #3
    107c:	4302      	orrs	r2, r0
    107e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1080:	7a9a      	ldrb	r2, [r3, #10]
    1082:	09d2      	lsrs	r2, r2, #7
    1084:	d1fc      	bne.n	1080 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
    1086:	4912      	ldr	r1, [pc, #72]	; (10d0 <RtcInit+0x90>)
    1088:	4a10      	ldr	r2, [pc, #64]	; (10cc <RtcInit+0x8c>)
    108a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    108c:	7a99      	ldrb	r1, [r3, #10]
    108e:	4a0f      	ldr	r2, [pc, #60]	; (10cc <RtcInit+0x8c>)
    1090:	09c9      	lsrs	r1, r1, #7
    1092:	d1fb      	bne.n	108c <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    1094:	8851      	ldrh	r1, [r2, #2]
    1096:	480f      	ldr	r0, [pc, #60]	; (10d4 <RtcInit+0x94>)
    1098:	4301      	orrs	r1, r0
    109a:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    109c:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    109e:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    10a0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    10a2:	8811      	ldrh	r1, [r2, #0]
    10a4:	4301      	orrs	r1, r0
    10a6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10a8:	7a9a      	ldrb	r2, [r3, #10]
    10aa:	09d2      	lsrs	r2, r2, #7
    10ac:	d1fc      	bne.n	10a8 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    10ae:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <RtcInit+0x98>)
    10b0:	3208      	adds	r2, #8
    10b2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    10b4:	4770      	bx	lr
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	0000060e 	.word	0x0000060e
    10bc:	40000800 	.word	0x40000800
    10c0:	40000c00 	.word	0x40000c00
    10c4:	00230002 	.word	0x00230002
    10c8:	00004204 	.word	0x00004204
    10cc:	40001400 	.word	0x40001400
    10d0:	000003e6 	.word	0x000003e6
    10d4:	00004010 	.word	0x00004010
    10d8:	e000e100 	.word	0xe000e100

000010dc <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10dc:	230f      	movs	r3, #15
    10de:	4018      	ands	r0, r3
    10e0:	4b08      	ldr	r3, [pc, #32]	; (1104 <gclkEnable+0x28>)
    10e2:	0212      	lsls	r2, r2, #8
    10e4:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10e6:	23f8      	movs	r3, #248	; 0xf8
    10e8:	0209      	lsls	r1, r1, #8
    10ea:	015b      	lsls	r3, r3, #5
    10ec:	4019      	ands	r1, r3
    10ee:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    10f0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10f2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10f4:	4c04      	ldr	r4, [pc, #16]	; (1108 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10f6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10f8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10fa:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10fc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10fe:	6060      	str	r0, [r4, #4]
}
    1100:	bd10      	pop	{r4, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00ffff00 	.word	0x00ffff00
    1108:	40000c00 	.word	0x40000c00

0000110c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    110c:	4b04      	ldr	r3, [pc, #16]	; (1120 <delayInit+0x14>)
    110e:	4a05      	ldr	r2, [pc, #20]	; (1124 <delayInit+0x18>)
    1110:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
    1112:	2230      	movs	r2, #48	; 0x30
    1114:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1116:	4b04      	ldr	r3, [pc, #16]	; (1128 <delayInit+0x1c>)
    1118:	3a2b      	subs	r2, #43	; 0x2b
    111a:	601a      	str	r2, [r3, #0]
}
    111c:	4770      	bx	lr
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20000004 	.word	0x20000004
    1124:	0000bb80 	.word	0x0000bb80
    1128:	e000e010 	.word	0xe000e010

0000112c <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    112c:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    112e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1130:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1132:	4b08      	ldr	r3, [pc, #32]	; (1154 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1134:	4a08      	ldr	r2, [pc, #32]	; (1158 <delay_us+0x2c>)
    1136:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1138:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    113a:	3801      	subs	r0, #1
    113c:	d308      	bcc.n	1150 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    113e:	2b00      	cmp	r3, #0
    1140:	d0fb      	beq.n	113a <delay_us+0xe>
    1142:	4e05      	ldr	r6, [pc, #20]	; (1158 <delay_us+0x2c>)
        SysTick->LOAD = n;
    1144:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1146:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1148:	6835      	ldr	r5, [r6, #0]
    114a:	4225      	tst	r5, r4
    114c:	d0fc      	beq.n	1148 <delay_us+0x1c>
    114e:	e7f4      	b.n	113a <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	20000004 	.word	0x20000004
    1158:	e000e010 	.word	0xe000e010

0000115c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    115c:	b570      	push	{r4, r5, r6, lr}
    115e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1160:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1164:	4a08      	ldr	r2, [pc, #32]	; (1188 <delay_ms+0x2c>)
    1166:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1168:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    116a:	3801      	subs	r0, #1
    116c:	d308      	bcc.n	1180 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    116e:	2b00      	cmp	r3, #0
    1170:	d0fb      	beq.n	116a <delay_ms+0xe>
    1172:	4e05      	ldr	r6, [pc, #20]	; (1188 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1174:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1176:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1178:	6835      	ldr	r5, [r6, #0]
    117a:	4225      	tst	r5, r4
    117c:	d0fc      	beq.n	1178 <delay_ms+0x1c>
    117e:	e7f4      	b.n	116a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1180:	bd70      	pop	{r4, r5, r6, pc}
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	20000004 	.word	0x20000004
    1188:	e000e010 	.word	0xe000e010

0000118c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    118c:	21fa      	movs	r1, #250	; 0xfa
    118e:	4a04      	ldr	r2, [pc, #16]	; (11a0 <RTC_Handler+0x14>)
    1190:	0089      	lsls	r1, r1, #2
    1192:	6813      	ldr	r3, [r2, #0]
    1194:	185b      	adds	r3, r3, r1
    1196:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1198:	22ff      	movs	r2, #255	; 0xff
    119a:	4b02      	ldr	r3, [pc, #8]	; (11a4 <RTC_Handler+0x18>)
    119c:	721a      	strb	r2, [r3, #8]
}
    119e:	4770      	bx	lr
    11a0:	2000045c 	.word	0x2000045c
    11a4:	40001400 	.word	0x40001400

000011a8 <millis>:

uint32_t millis(void) {
    11a8:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    11aa:	f3ef 8110 	mrs	r1, PRIMASK
    11ae:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11b0:	4a08      	ldr	r2, [pc, #32]	; (11d4 <millis+0x2c>)
    11b2:	4d09      	ldr	r5, [pc, #36]	; (11d8 <millis+0x30>)
    11b4:	8a10      	ldrh	r0, [r2, #16]
    11b6:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11b8:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11ba:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11bc:	09e4      	lsrs	r4, r4, #7
    11be:	d004      	beq.n	11ca <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    11c0:	8a13      	ldrh	r3, [r2, #16]
    11c2:	22fa      	movs	r2, #250	; 0xfa
    11c4:	6828      	ldr	r0, [r5, #0]
    11c6:	0092      	lsls	r2, r2, #2
    11c8:	1880      	adds	r0, r0, r2
    11ca:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    11cc:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    11d0:	bd30      	pop	{r4, r5, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	40001400 	.word	0x40001400
    11d8:	2000045c 	.word	0x2000045c

000011dc <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11dc:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    11de:	4a0d      	ldr	r2, [pc, #52]	; (1214 <TC4Init+0x38>)
    11e0:	4b0d      	ldr	r3, [pc, #52]	; (1218 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11e2:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    11e4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11e6:	4a0d      	ldr	r2, [pc, #52]	; (121c <TC4Init+0x40>)
    11e8:	6a13      	ldr	r3, [r2, #32]
    11ea:	430b      	orrs	r3, r1
    11ec:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11ee:	4b0c      	ldr	r3, [pc, #48]	; (1220 <TC4Init+0x44>)
    11f0:	4a0c      	ldr	r2, [pc, #48]	; (1224 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11f2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11f4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    11f6:	2241      	movs	r2, #65	; 0x41
    11f8:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    11fa:	3a40      	subs	r2, #64	; 0x40
    11fc:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    11fe:	32ff      	adds	r2, #255	; 0xff
    1200:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1202:	881a      	ldrh	r2, [r3, #0]
    1204:	430a      	orrs	r2, r1
    1206:	801a      	strh	r2, [r3, #0]
    1208:	2280      	movs	r2, #128	; 0x80
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <TC4Init+0x4c>)
    120c:	0312      	lsls	r2, r2, #12
    120e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1210:	4770      	bx	lr
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	0000421c 	.word	0x0000421c
    1218:	40000c00 	.word	0x40000c00
    121c:	40000400 	.word	0x40000400
    1220:	42003000 	.word	0x42003000
    1224:	00000904 	.word	0x00000904
    1228:	e000e100 	.word	0xe000e100

0000122c <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    122c:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    122e:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1230:	4b02      	ldr	r3, [pc, #8]	; (123c <TC4_Handler+0x10>)
    1232:	739a      	strb	r2, [r3, #14]
    pullSample();
    1234:	4b02      	ldr	r3, [pc, #8]	; (1240 <TC4_Handler+0x14>)
    1236:	4798      	blx	r3
}
    1238:	bd10      	pop	{r4, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	42003000 	.word	0x42003000
    1240:	0000173d 	.word	0x0000173d

00001244 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1244:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1246:	4a0d      	ldr	r2, [pc, #52]	; (127c <TC5Init+0x38>)
    1248:	4b0d      	ldr	r3, [pc, #52]	; (1280 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    124a:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    124c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    124e:	4a0d      	ldr	r2, [pc, #52]	; (1284 <TC5Init+0x40>)
    1250:	6a13      	ldr	r3, [r2, #32]
    1252:	430b      	orrs	r3, r1
    1254:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1256:	4b0c      	ldr	r3, [pc, #48]	; (1288 <TC5Init+0x44>)
    1258:	4a0c      	ldr	r2, [pc, #48]	; (128c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    125a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    125c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    125e:	2220      	movs	r2, #32
    1260:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1262:	3a1f      	subs	r2, #31
    1264:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1266:	32ff      	adds	r2, #255	; 0xff
    1268:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    126a:	881a      	ldrh	r2, [r3, #0]
    126c:	430a      	orrs	r2, r1
    126e:	801a      	strh	r2, [r3, #0]
    1270:	2280      	movs	r2, #128	; 0x80
    1272:	4b07      	ldr	r3, [pc, #28]	; (1290 <TC5Init+0x4c>)
    1274:	0352      	lsls	r2, r2, #13
    1276:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1278:	4770      	bx	lr
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	0000421c 	.word	0x0000421c
    1280:	40000c00 	.word	0x40000c00
    1284:	40000400 	.word	0x40000400
    1288:	42003400 	.word	0x42003400
    128c:	00000d04 	.word	0x00000d04
    1290:	e000e100 	.word	0xe000e100

00001294 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1294:	22ff      	movs	r2, #255	; 0xff
    1296:	4b03      	ldr	r3, [pc, #12]	; (12a4 <TC5_Handler+0x10>)
    1298:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    129a:	4b03      	ldr	r3, [pc, #12]	; (12a8 <TC5_Handler+0x14>)
    129c:	3afe      	subs	r2, #254	; 0xfe
    129e:	701a      	strb	r2, [r3, #0]
}
    12a0:	4770      	bx	lr
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	42003400 	.word	0x42003400
    12a8:	20000461 	.word	0x20000461

000012ac <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    12ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    12ae:	27c0      	movs	r7, #192	; 0xc0
    12b0:	4d10      	ldr	r5, [pc, #64]	; (12f4 <dmaInit+0x48>)
    12b2:	003a      	movs	r2, r7
    12b4:	4e10      	ldr	r6, [pc, #64]	; (12f8 <dmaInit+0x4c>)
    12b6:	0028      	movs	r0, r5
    12b8:	2100      	movs	r1, #0
    12ba:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    12bc:	4c0f      	ldr	r4, [pc, #60]	; (12fc <dmaInit+0x50>)
    12be:	003a      	movs	r2, r7
    12c0:	2100      	movs	r1, #0
    12c2:	0020      	movs	r0, r4
    12c4:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    12c6:	2120      	movs	r1, #32
    12c8:	4b0d      	ldr	r3, [pc, #52]	; (1300 <dmaInit+0x54>)
    12ca:	695a      	ldr	r2, [r3, #20]
    12cc:	430a      	orrs	r2, r1
    12ce:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    12d0:	69da      	ldr	r2, [r3, #28]
    12d2:	3910      	subs	r1, #16
    12d4:	430a      	orrs	r2, r1
    12d6:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    12d8:	4b0a      	ldr	r3, [pc, #40]	; (1304 <dmaInit+0x58>)
    12da:	390e      	subs	r1, #14
    12dc:	881a      	ldrh	r2, [r3, #0]
    12de:	438a      	bics	r2, r1
    12e0:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    12e2:	881a      	ldrh	r2, [r3, #0]
    12e4:	3901      	subs	r1, #1
    12e6:	430a      	orrs	r2, r1
    12e8:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    12ea:	4a07      	ldr	r2, [pc, #28]	; (1308 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    12ec:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    12ee:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    12f0:	801a      	strh	r2, [r3, #0]
}
    12f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12f4:	20000530 	.word	0x20000530
    12f8:	00003535 	.word	0x00003535
    12fc:	20000470 	.word	0x20000470
    1300:	40000400 	.word	0x40000400
    1304:	41004800 	.word	0x41004800
    1308:	00000f02 	.word	0x00000f02

0000130c <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    130c:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    130e:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1310:	b085      	sub	sp, #20
    1312:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1314:	2b00      	cmp	r3, #0
    1316:	d008      	beq.n	132a <flight+0x1e>
    1318:	2b01      	cmp	r3, #1
    131a:	d000      	beq.n	131e <flight+0x12>
    131c:	e07e      	b.n	141c <flight+0x110>
        }


        break;
    case flightIdle:
           TC4->COUNT8.CTRLA.reg = 0;
    131e:	2300      	movs	r3, #0
    1320:	4a3f      	ldr	r2, [pc, #252]	; (1420 <flight+0x114>)
    1322:	8013      	strh	r3, [r2, #0]
           TC5->COUNT8.CTRLA.reg = 0;
    1324:	4a3f      	ldr	r2, [pc, #252]	; (1424 <flight+0x118>)
    1326:	8013      	strh	r3, [r2, #0]

        break;
    }


}
    1328:	e078      	b.n	141c <flight+0x110>


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    132a:	4d3f      	ldr	r5, [pc, #252]	; (1428 <flight+0x11c>)
    132c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    132e:	47a8      	blx	r5
    1330:	2200      	movs	r2, #0
    1332:	4b3e      	ldr	r3, [pc, #248]	; (142c <flight+0x120>)
    1334:	4e3e      	ldr	r6, [pc, #248]	; (1430 <flight+0x124>)
    1336:	47b0      	blx	r6
    1338:	0006      	movs	r6, r0
    133a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    133c:	000f      	movs	r7, r1
    133e:	47a8      	blx	r5
    1340:	4d3b      	ldr	r5, [pc, #236]	; (1430 <flight+0x124>)
    1342:	2200      	movs	r2, #0
    1344:	4b39      	ldr	r3, [pc, #228]	; (142c <flight+0x120>)
    1346:	47a8      	blx	r5
    1348:	4d3a      	ldr	r5, [pc, #232]	; (1434 <flight+0x128>)
    134a:	0002      	movs	r2, r0
    134c:	000b      	movs	r3, r1
    134e:	0030      	movs	r0, r6
    1350:	0039      	movs	r1, r7
    1352:	47a8      	blx	r5
    1354:	4b38      	ldr	r3, [pc, #224]	; (1438 <flight+0x12c>)
    1356:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1358:	0023      	movs	r3, r4
    135a:	3348      	adds	r3, #72	; 0x48
    135c:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    135e:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1360:	8818      	ldrh	r0, [r3, #0]
    1362:	4d36      	ldr	r5, [pc, #216]	; (143c <flight+0x130>)
    1364:	47a8      	blx	r5
    1366:	2200      	movs	r2, #0
    1368:	4e31      	ldr	r6, [pc, #196]	; (1430 <flight+0x124>)
    136a:	4b30      	ldr	r3, [pc, #192]	; (142c <flight+0x120>)
    136c:	47b0      	blx	r6
    136e:	0023      	movs	r3, r4
    1370:	3370      	adds	r3, #112	; 0x70
    1372:	0006      	movs	r6, r0
    1374:	8818      	ldrh	r0, [r3, #0]
    1376:	000f      	movs	r7, r1
    1378:	47a8      	blx	r5
    137a:	4d2d      	ldr	r5, [pc, #180]	; (1430 <flight+0x124>)
    137c:	2200      	movs	r2, #0
    137e:	4b2b      	ldr	r3, [pc, #172]	; (142c <flight+0x120>)
    1380:	47a8      	blx	r5
    1382:	4d2c      	ldr	r5, [pc, #176]	; (1434 <flight+0x128>)
    1384:	0002      	movs	r2, r0
    1386:	000b      	movs	r3, r1
    1388:	0030      	movs	r0, r6
    138a:	0039      	movs	r1, r7
    138c:	47a8      	blx	r5
    138e:	4b2c      	ldr	r3, [pc, #176]	; (1440 <flight+0x134>)
    1390:	4798      	blx	r3
    1392:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    1394:	4d2b      	ldr	r5, [pc, #172]	; (1444 <flight+0x138>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1396:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    1398:	6b20      	ldr	r0, [r4, #48]	; 0x30
    139a:	47a8      	blx	r5
    139c:	4e24      	ldr	r6, [pc, #144]	; (1430 <flight+0x124>)
    139e:	2200      	movs	r2, #0
    13a0:	4b22      	ldr	r3, [pc, #136]	; (142c <flight+0x120>)
    13a2:	47b0      	blx	r6
    13a4:	9002      	str	r0, [sp, #8]
    13a6:	9103      	str	r1, [sp, #12]
    13a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13aa:	47a8      	blx	r5
    13ac:	2200      	movs	r2, #0
    13ae:	4b1f      	ldr	r3, [pc, #124]	; (142c <flight+0x120>)
    13b0:	47b0      	blx	r6
    13b2:	4e20      	ldr	r6, [pc, #128]	; (1434 <flight+0x128>)
    13b4:	0002      	movs	r2, r0
    13b6:	000b      	movs	r3, r1
    13b8:	9802      	ldr	r0, [sp, #8]
    13ba:	9903      	ldr	r1, [sp, #12]
    13bc:	47b0      	blx	r6
    13be:	4b20      	ldr	r3, [pc, #128]	; (1440 <flight+0x134>)
    13c0:	4798      	blx	r3
    13c2:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    13c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    13c6:	47a8      	blx	r5
    13c8:	2200      	movs	r2, #0
    13ca:	4b18      	ldr	r3, [pc, #96]	; (142c <flight+0x120>)
    13cc:	4e18      	ldr	r6, [pc, #96]	; (1430 <flight+0x124>)
    13ce:	47b0      	blx	r6
    13d0:	0006      	movs	r6, r0
    13d2:	69a0      	ldr	r0, [r4, #24]
    13d4:	000f      	movs	r7, r1
    13d6:	47a8      	blx	r5
    13d8:	4d15      	ldr	r5, [pc, #84]	; (1430 <flight+0x124>)
    13da:	2200      	movs	r2, #0
    13dc:	4b13      	ldr	r3, [pc, #76]	; (142c <flight+0x120>)
    13de:	47a8      	blx	r5
    13e0:	4d14      	ldr	r5, [pc, #80]	; (1434 <flight+0x128>)
    13e2:	0002      	movs	r2, r0
    13e4:	000b      	movs	r3, r1
    13e6:	0030      	movs	r0, r6
    13e8:	0039      	movs	r1, r7
    13ea:	47a8      	blx	r5
    13ec:	4b14      	ldr	r3, [pc, #80]	; (1440 <flight+0x134>)
    13ee:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    13f0:	4d15      	ldr	r5, [pc, #84]	; (1448 <flight+0x13c>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    13f2:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    13f4:	47a8      	blx	r5
    13f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13f8:	1ac0      	subs	r0, r0, r3
    13fa:	23fa      	movs	r3, #250	; 0xfa
    13fc:	00db      	lsls	r3, r3, #3
    13fe:	4298      	cmp	r0, r3
    1400:	d90c      	bls.n	141c <flight+0x110>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1402:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1404:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1406:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    140a:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    140c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    140e:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1410:	0023      	movs	r3, r4
    1412:	8812      	ldrh	r2, [r2, #0]
    1414:	334a      	adds	r3, #74	; 0x4a
    1416:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1418:	47a8      	blx	r5
    141a:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


}
    141c:	b005      	add	sp, #20
    141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1420:	42003000 	.word	0x42003000
    1424:	42003400 	.word	0x42003400
    1428:	000032f1 	.word	0x000032f1
    142c:	3fe00000 	.word	0x3fe00000
    1430:	000025f5 	.word	0x000025f5
    1434:	00001d81 	.word	0x00001d81
    1438:	00003399 	.word	0x00003399
    143c:	000031fd 	.word	0x000031fd
    1440:	00001d45 	.word	0x00001d45
    1444:	00003281 	.word	0x00003281
    1448:	000011a9 	.word	0x000011a9

0000144c <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    144c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    144e:	26c8      	movs	r6, #200	; 0xc8
    1450:	0076      	lsls	r6, r6, #1
    1452:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1454:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1456:	194b      	adds	r3, r1, r5
    1458:	2bfe      	cmp	r3, #254	; 0xfe
    145a:	dc03      	bgt.n	1464 <makePage+0x18>
    145c:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    145e:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1460:	1947      	adds	r7, r0, r5
    1462:	e035      	b.n	14d0 <makePage+0x84>
    1464:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1466:	195c      	adds	r4, r3, r5
    1468:	b2de      	uxtb	r6, r3
    146a:	2cfe      	cmp	r4, #254	; 0xfe
    146c:	dc08      	bgt.n	1480 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    146e:	9a00      	ldr	r2, [sp, #0]
    1470:	1904      	adds	r4, r0, r4
    1472:	5cd6      	ldrb	r6, [r2, r3]
    1474:	3492      	adds	r4, #146	; 0x92
    1476:	34ff      	adds	r4, #255	; 0xff

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1478:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    147a:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    147c:	b29b      	uxth	r3, r3
    147e:	e7f2      	b.n	1466 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1480:	23c8      	movs	r3, #200	; 0xc8
    1482:	2500      	movs	r5, #0
    1484:	0004      	movs	r4, r0
    1486:	005b      	lsls	r3, r3, #1
    1488:	54c5      	strb	r5, [r0, r3]
    148a:	4b19      	ldr	r3, [pc, #100]	; (14f0 <makePage+0xa4>)
    148c:	3492      	adds	r4, #146	; 0x92
    148e:	18c3      	adds	r3, r0, r3
    1490:	34ff      	adds	r4, #255	; 0xff
    1492:	9301      	str	r3, [sp, #4]
    1494:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1496:	781f      	ldrb	r7, [r3, #0]
    1498:	46bc      	mov	ip, r7
    149a:	4662      	mov	r2, ip
    149c:	1e9f      	subs	r7, r3, #2
    149e:	3fff      	subs	r7, #255	; 0xff
    14a0:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    14a2:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    14a4:	701d      	strb	r5, [r3, #0]
    14a6:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    14a8:	4293      	cmp	r3, r2
    14aa:	d1f4      	bne.n	1496 <makePage+0x4a>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    14ac:	25c8      	movs	r5, #200	; 0xc8
    14ae:	0033      	movs	r3, r6
    14b0:	006d      	lsls	r5, r5, #1
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    14b2:	428b      	cmp	r3, r1
    14b4:	d208      	bcs.n	14c8 <makePage+0x7c>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    14b6:	9a00      	ldr	r2, [sp, #0]
    14b8:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    14ba:	3301      	adds	r3, #1
    14bc:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    14be:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    14c0:	1b9f      	subs	r7, r3, r6
    14c2:	5547      	strb	r7, [r0, r5]
    14c4:	3401      	adds	r4, #1
    14c6:	e7f4      	b.n	14b2 <makePage+0x66>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    14c8:	2201      	movs	r2, #1
    14ca:	4b09      	ldr	r3, [pc, #36]	; (14f0 <makePage+0xa4>)
    14cc:	54c2      	strb	r2, [r0, r3]
    14ce:	e00d      	b.n	14ec <makePage+0xa0>
    14d0:	1c5c      	adds	r4, r3, #1
    14d2:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    14d4:	428b      	cmp	r3, r1
    14d6:	d809      	bhi.n	14ec <makePage+0xa0>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    14d8:	9a00      	ldr	r2, [sp, #0]
    14da:	5cd2      	ldrb	r2, [r2, r3]
    14dc:	18fb      	adds	r3, r7, r3
    14de:	3392      	adds	r3, #146	; 0x92
    14e0:	33ff      	adds	r3, #255	; 0xff
    14e2:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    14e4:	192b      	adds	r3, r5, r4
    14e6:	5583      	strb	r3, [r0, r6]
    14e8:	0023      	movs	r3, r4
    14ea:	e7f1      	b.n	14d0 <makePage+0x84>
        }

    }
}
    14ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	00000291 	.word	0x00000291

000014f4 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    14f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    14f6:	2346      	movs	r3, #70	; 0x46
    14f8:	466a      	mov	r2, sp
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    14fa:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    14fc:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    14fe:	7843      	ldrb	r3, [r0, #1]
    1500:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1502:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1504:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1506:	0a1a      	lsrs	r2, r3, #8
    1508:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    150a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    150c:	0e1b      	lsrs	r3, r3, #24
    150e:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1510:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1512:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1514:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1516:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1518:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    151a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    151c:	0e1b      	lsrs	r3, r3, #24
    151e:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1520:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1522:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1524:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1526:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1528:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    152a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    152c:	0e1b      	lsrs	r3, r3, #24
    152e:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1530:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1532:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1534:	334a      	adds	r3, #74	; 0x4a
    1536:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1538:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    153a:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    153c:	0a1b      	lsrs	r3, r3, #8
    153e:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1540:	2110      	movs	r1, #16
    1542:	4b02      	ldr	r3, [pc, #8]	; (154c <logFlight+0x58>)
    1544:	4798      	blx	r3
}
    1546:	b005      	add	sp, #20
    1548:	bd00      	pop	{pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	0000144d 	.word	0x0000144d

00001550 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1552:	2341      	movs	r3, #65	; 0x41
    1554:	466a      	mov	r2, sp
    1556:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1558:	23a9      	movs	r3, #169	; 0xa9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    155a:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    155c:	009b      	lsls	r3, r3, #2
    155e:	58c3      	ldr	r3, [r0, r3]
    1560:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1562:	0a1a      	lsrs	r2, r3, #8
    1564:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1566:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1568:	0e1b      	lsrs	r3, r3, #24
    156a:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    156c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    156e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1570:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1572:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1574:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1576:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1578:	0e1b      	lsrs	r3, r3, #24
    157a:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    157c:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    157e:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1580:	3368      	adds	r3, #104	; 0x68
    1582:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1584:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1586:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1588:	0a1b      	lsrs	r3, r3, #8
    158a:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    158c:	0003      	movs	r3, r0
    158e:	336c      	adds	r3, #108	; 0x6c
    1590:	881b      	ldrh	r3, [r3, #0]
    1592:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1594:	0a1b      	lsrs	r3, r3, #8
    1596:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1598:	0003      	movs	r3, r0
    159a:	3370      	adds	r3, #112	; 0x70
    159c:	881b      	ldrh	r3, [r3, #0]
    159e:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    15a0:	0a1b      	lsrs	r3, r3, #8
    15a2:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    15a4:	0003      	movs	r3, r0
    15a6:	3374      	adds	r3, #116	; 0x74
    15a8:	881b      	ldrh	r3, [r3, #0]
    15aa:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    15ac:	0a1b      	lsrs	r3, r3, #8
    15ae:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    15b0:	0003      	movs	r3, r0
    15b2:	3378      	adds	r3, #120	; 0x78
    15b4:	881b      	ldrh	r3, [r3, #0]
    15b6:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    15b8:	0a1b      	lsrs	r3, r3, #8
    15ba:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    15bc:	0003      	movs	r3, r0
    15be:	337c      	adds	r3, #124	; 0x7c
    15c0:	881b      	ldrh	r3, [r3, #0]
    15c2:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    15c4:	0a1b      	lsrs	r3, r3, #8
    15c6:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    15c8:	0003      	movs	r3, r0
    15ca:	3380      	adds	r3, #128	; 0x80
    15cc:	881b      	ldrh	r3, [r3, #0]
    15ce:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    15d0:	0a1b      	lsrs	r3, r3, #8
    15d2:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    15d4:	2117      	movs	r1, #23
    15d6:	4b02      	ldr	r3, [pc, #8]	; (15e0 <logSensors+0x90>)
    15d8:	4798      	blx	r3
}
    15da:	b007      	add	sp, #28
    15dc:	bd00      	pop	{pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	0000144d 	.word	0x0000144d

000015e4 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    15e4:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    15e6:	2103      	movs	r1, #3
    15e8:	4348      	muls	r0, r1
    15ea:	ac01      	add	r4, sp, #4
    15ec:	3001      	adds	r0, #1
    15ee:	30ff      	adds	r0, #255	; 0xff
    15f0:	0022      	movs	r2, r4
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <getFlightStartAddress+0x24>)
    15f4:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    15f6:	7860      	ldrb	r0, [r4, #1]
    15f8:	78a3      	ldrb	r3, [r4, #2]
    15fa:	0200      	lsls	r0, r0, #8
    15fc:	041b      	lsls	r3, r3, #16
    15fe:	4318      	orrs	r0, r3
    1600:	7823      	ldrb	r3, [r4, #0]
    1602:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    1604:	bd16      	pop	{r1, r2, r4, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	00000361 	.word	0x00000361

0000160c <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    160c:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    160e:	4b04      	ldr	r3, [pc, #16]	; (1620 <isFlightLogged+0x14>)
    1610:	4798      	blx	r3
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    1614:	18c0      	adds	r0, r0, r3
    1616:	1e43      	subs	r3, r0, #1
    1618:	4198      	sbcs	r0, r3
    161a:	b2c0      	uxtb	r0, r0
    161c:	bd10      	pop	{r4, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	000015e5 	.word	0x000015e5
    1624:	ff000001 	.word	0xff000001

00001628 <findNextBlankPage>:


u32_t findNextBlankPage(u8_t lastFlightStart) {
    1628:	b510      	push	{r4, lr}

    u32_t byteToCheckAddress = getFlightStartAddress(lastFlightStart);
    162a:	4b09      	ldr	r3, [pc, #36]	; (1650 <findNextBlankPage+0x28>)
    162c:	4798      	blx	r3
    162e:	0004      	movs	r4, r0

    bool flightEndFound = false;
    while (!flightEndFound) {

        u8_t byteToCheck = AT25SFGetByte(byteToCheckAddress);
    1630:	0020      	movs	r0, r4
    1632:	4b08      	ldr	r3, [pc, #32]	; (1654 <findNextBlankPage+0x2c>)
    1634:	4798      	blx	r3

        if (byteToCheck == 0x41) {
    1636:	2841      	cmp	r0, #65	; 0x41
    1638:	d101      	bne.n	163e <findNextBlankPage+0x16>
            byteToCheckAddress += 24;
    163a:	3418      	adds	r4, #24
    163c:	e7f8      	b.n	1630 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0x46) {
    163e:	2846      	cmp	r0, #70	; 0x46
    1640:	d101      	bne.n	1646 <findNextBlankPage+0x1e>
            byteToCheckAddress += 17;
    1642:	3411      	adds	r4, #17
    1644:	e7f4      	b.n	1630 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0xFF) {
    1646:	28ff      	cmp	r0, #255	; 0xff
    1648:	d1f2      	bne.n	1630 <findNextBlankPage+0x8>
            return ((byteToCheckAddress >> 8) << 8);
    164a:	4384      	bics	r4, r0
    164c:	0020      	movs	r0, r4
        }
    }
}
    164e:	bd10      	pop	{r4, pc}
    1650:	000015e5 	.word	0x000015e5
    1654:	00000225 	.word	0x00000225

00001658 <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    1658:	b570      	push	{r4, r5, r6, lr}

    u8_t nextFlight = findThisFlightsEnd + 1;
    165a:	1c44      	adds	r4, r0, #1
    165c:	b2e4      	uxtb	r4, r4
            return ((byteToCheckAddress >> 8) << 8);
        }
    }
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    165e:	0005      	movs	r5, r0

    u8_t nextFlight = findThisFlightsEnd + 1;
    u32_t thisFlightsEndingAddress;

    if (isFlightLogged(nextFlight)) {
    1660:	4b06      	ldr	r3, [pc, #24]	; (167c <FindFlightEndingAddress+0x24>)
    1662:	0020      	movs	r0, r4
    1664:	4798      	blx	r3
    1666:	2800      	cmp	r0, #0
    1668:	d002      	beq.n	1670 <FindFlightEndingAddress+0x18>
        thisFlightsEndingAddress = getFlightStartAddress(nextFlight) - 0x100;
    166a:	0020      	movs	r0, r4
    166c:	4b04      	ldr	r3, [pc, #16]	; (1680 <FindFlightEndingAddress+0x28>)
    166e:	e001      	b.n	1674 <FindFlightEndingAddress+0x1c>
    } else {
        thisFlightsEndingAddress = findNextBlankPage(findThisFlightsEnd) - 0x100;
    1670:	0028      	movs	r0, r5
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <FindFlightEndingAddress+0x2c>)
    1674:	4798      	blx	r3
    1676:	3801      	subs	r0, #1
    1678:	38ff      	subs	r0, #255	; 0xff
    }
    return thisFlightsEndingAddress;
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	0000160d 	.word	0x0000160d
    1680:	000015e5 	.word	0x000015e5
    1684:	00001629 	.word	0x00001629

00001688 <findNewFlightStart>:


void findNewFlightStart(Altimeter *my_altimeter) {
    1688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    168a:	0006      	movs	r6, r0

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    168c:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    168e:	0020      	movs	r0, r4
    1690:	4b21      	ldr	r3, [pc, #132]	; (1718 <findNewFlightStart+0x90>)
    1692:	4798      	blx	r3
    1694:	2800      	cmp	r0, #0
    1696:	d139      	bne.n	170c <findNewFlightStart+0x84>
    1698:	0037      	movs	r7, r6
    169a:	ad01      	add	r5, sp, #4
    169c:	3788      	adds	r7, #136	; 0x88

            if (flightNumbToCheck > 0) {
    169e:	2c00      	cmp	r4, #0
    16a0:	d014      	beq.n	16cc <findNewFlightStart+0x44>
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    16a2:	1e60      	subs	r0, r4, #1
    16a4:	4b1d      	ldr	r3, [pc, #116]	; (171c <findNewFlightStart+0x94>)
    16a6:	b2c0      	uxtb	r0, r0
    16a8:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16aa:	2103      	movs	r1, #3
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    16ac:	3001      	adds	r0, #1
    16ae:	30ff      	adds	r0, #255	; 0xff
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16b0:	0c03      	lsrs	r3, r0, #16

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;
    16b2:	6038      	str	r0, [r7, #0]

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16b4:	702b      	strb	r3, [r5, #0]
    16b6:	70a8      	strb	r0, [r5, #2]
    16b8:	0a03      	lsrs	r3, r0, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16ba:	0008      	movs	r0, r1
    16bc:	4360      	muls	r0, r4
    16be:	3001      	adds	r0, #1

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16c0:	706b      	strb	r3, [r5, #1]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16c2:	30ff      	adds	r0, #255	; 0xff
    16c4:	002a      	movs	r2, r5
    16c6:	4b16      	ldr	r3, [pc, #88]	; (1720 <findNewFlightStart+0x98>)
    16c8:	4798      	blx	r3
    16ca:	e00f      	b.n	16ec <findNewFlightStart+0x64>
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16cc:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16ce:	2080      	movs	r0, #128	; 0x80
                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16d0:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16d2:	0040      	lsls	r0, r0, #1
    16d4:	4b12      	ldr	r3, [pc, #72]	; (1720 <findNewFlightStart+0x98>)
    16d6:	002a      	movs	r2, r5
    16d8:	2103      	movs	r1, #3
                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16da:	702c      	strb	r4, [r5, #0]
    16dc:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16de:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    16e0:	2380      	movs	r3, #128	; 0x80
    16e2:	015b      	lsls	r3, r3, #5
    16e4:	603b      	str	r3, [r7, #0]
                beep(1500);
    16e6:	480f      	ldr	r0, [pc, #60]	; (1724 <findNewFlightStart+0x9c>)
    16e8:	4b0f      	ldr	r3, [pc, #60]	; (1728 <findNewFlightStart+0xa0>)
    16ea:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    16ec:	7074      	strb	r4, [r6, #1]

            while (flightNumbToCheck > 0) {
                beep(500);
    16ee:	20fa      	movs	r0, #250	; 0xfa
    16f0:	4d0e      	ldr	r5, [pc, #56]	; (172c <findNewFlightStart+0xa4>)
    16f2:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    16f4:	2c00      	cmp	r4, #0
    16f6:	d007      	beq.n	1708 <findNewFlightStart+0x80>
                beep(500);
    16f8:	4b0b      	ldr	r3, [pc, #44]	; (1728 <findNewFlightStart+0xa0>)
    16fa:	4798      	blx	r3
                delay_ms(500);
    16fc:	20fa      	movs	r0, #250	; 0xfa
                --flightNumbToCheck;
    16fe:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    1700:	0040      	lsls	r0, r0, #1
    1702:	47a8      	blx	r5
                --flightNumbToCheck;
    1704:	b2e4      	uxtb	r4, r4
    1706:	e7f2      	b.n	16ee <findNewFlightStart+0x66>
            }
            delay_ms(500);
    1708:	47a8      	blx	r5
            break;
    170a:	e003      	b.n	1714 <findNewFlightStart+0x8c>
}


void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    170c:	3401      	adds	r4, #1
    170e:	b2e4      	uxtb	r4, r4
    1710:	2c0b      	cmp	r4, #11
    1712:	d1bc      	bne.n	168e <findNewFlightStart+0x6>
            }
            delay_ms(500);
            break;
        }
    }
}
    1714:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	0000160d 	.word	0x0000160d
    171c:	00001629 	.word	0x00001629
    1720:	00000275 	.word	0x00000275
    1724:	000005dc 	.word	0x000005dc
    1728:	00000f45 	.word	0x00000f45
    172c:	0000115d 	.word	0x0000115d

00001730 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample(){
return SampleBool;
    1730:	4b01      	ldr	r3, [pc, #4]	; (1738 <takeSample+0x8>)
    1732:	7818      	ldrb	r0, [r3, #0]
}
    1734:	4770      	bx	lr
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	20000463 	.word	0x20000463

0000173c <pullSample>:

void pullSample(){
SampleBool = true;
    173c:	2201      	movs	r2, #1
    173e:	4b01      	ldr	r3, [pc, #4]	; (1744 <pullSample+0x8>)
    1740:	701a      	strb	r2, [r3, #0]
}
    1742:	4770      	bx	lr
    1744:	20000463 	.word	0x20000463

00001748 <sampleTaken>:

void sampleTaken(){
SampleBool = false;
    1748:	2200      	movs	r2, #0
    174a:	4b01      	ldr	r3, [pc, #4]	; (1750 <sampleTaken+0x8>)
    174c:	701a      	strb	r2, [r3, #0]
}
    174e:	4770      	bx	lr
    1750:	20000463 	.word	0x20000463

00001754 <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    1754:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    1756:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    1758:	4bd8      	ldr	r3, [pc, #864]	; (1abc <sampleTick+0x368>)





void sampleTick(Altimeter *my_altimeter) {
    175a:	b087      	sub	sp, #28
    SampleBool = false;
    175c:	701a      	strb	r2, [r3, #0]

    my_altimeter->sampleTick = millis();
    175e:	4bd8      	ldr	r3, [pc, #864]	; (1ac0 <sampleTick+0x36c>)





void sampleTick(Altimeter *my_altimeter) {
    1760:	0004      	movs	r4, r0
    SampleBool = false;

    my_altimeter->sampleTick = millis();
    1762:	4798      	blx	r3
    1764:	23a9      	movs	r3, #169	; 0xa9

    my_altimeter->batV = adc_read(senseBatPin);
    1766:	4dd7      	ldr	r5, [pc, #860]	; (1ac4 <sampleTick+0x370>)


void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;

    my_altimeter->sampleTick = millis();
    1768:	009b      	lsls	r3, r3, #2
    176a:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    176c:	786b      	ldrb	r3, [r5, #1]
    176e:	7829      	ldrb	r1, [r5, #0]
    1770:	78a8      	ldrb	r0, [r5, #2]
    1772:	021b      	lsls	r3, r3, #8
    1774:	430b      	orrs	r3, r1
    1776:	0400      	lsls	r0, r0, #16
    1778:	001a      	movs	r2, r3
    177a:	0003      	movs	r3, r0
    177c:	78e8      	ldrb	r0, [r5, #3]
    177e:	4313      	orrs	r3, r2
    1780:	0600      	lsls	r0, r0, #24
    1782:	4ed1      	ldr	r6, [pc, #836]	; (1ac8 <sampleTick+0x374>)
    1784:	7929      	ldrb	r1, [r5, #4]
    1786:	4318      	orrs	r0, r3
    1788:	47b0      	blx	r6
    178a:	23a5      	movs	r3, #165	; 0xa5
    178c:	009b      	lsls	r3, r3, #2
    178e:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
	my_altimeter->batFloat = my_altimeter->batV * 0.0019;
    1790:	4bce      	ldr	r3, [pc, #824]	; (1acc <sampleTick+0x378>)
    1792:	4798      	blx	r3
    1794:	4ace      	ldr	r2, [pc, #824]	; (1ad0 <sampleTick+0x37c>)
    1796:	4fcf      	ldr	r7, [pc, #828]	; (1ad4 <sampleTick+0x380>)
    1798:	4bcf      	ldr	r3, [pc, #828]	; (1ad8 <sampleTick+0x384>)
    179a:	47b8      	blx	r7
    179c:	4bcf      	ldr	r3, [pc, #828]	; (1adc <sampleTick+0x388>)
    179e:	4798      	blx	r3
    17a0:	23a6      	movs	r3, #166	; 0xa6
    17a2:	009b      	lsls	r3, r3, #2
    17a4:	50e0      	str	r0, [r4, r3]
	
    my_altimeter->senseA = adc_read(senseAPin);
    17a6:	79ab      	ldrb	r3, [r5, #6]
    17a8:	7969      	ldrb	r1, [r5, #5]
    17aa:	79e8      	ldrb	r0, [r5, #7]
    17ac:	021b      	lsls	r3, r3, #8
    17ae:	430b      	orrs	r3, r1
    17b0:	0400      	lsls	r0, r0, #16
    17b2:	001a      	movs	r2, r3
    17b4:	0003      	movs	r3, r0
    17b6:	7a28      	ldrb	r0, [r5, #8]
    17b8:	4313      	orrs	r3, r2
    17ba:	0600      	lsls	r0, r0, #24
    17bc:	7a69      	ldrb	r1, [r5, #9]
    17be:	4318      	orrs	r0, r3
    17c0:	47b0      	blx	r6
    17c2:	23a7      	movs	r3, #167	; 0xa7
    17c4:	009b      	lsls	r3, r3, #2
    17c6:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    17c8:	7aeb      	ldrb	r3, [r5, #11]
    17ca:	7aa9      	ldrb	r1, [r5, #10]
    17cc:	7b28      	ldrb	r0, [r5, #12]
    17ce:	021b      	lsls	r3, r3, #8
    17d0:	430b      	orrs	r3, r1
    17d2:	0400      	lsls	r0, r0, #16
    17d4:	001a      	movs	r2, r3
    17d6:	0003      	movs	r3, r0
    17d8:	7b68      	ldrb	r0, [r5, #13]
    17da:	4313      	orrs	r3, r2
    17dc:	0600      	lsls	r0, r0, #24
    17de:	7ba9      	ldrb	r1, [r5, #14]
    17e0:	4318      	orrs	r0, r3
    17e2:	47b0      	blx	r6
    17e4:	4bbe      	ldr	r3, [pc, #760]	; (1ae0 <sampleTick+0x38c>)
    my_altimeter->senseC = adc_read(senseCPin);
    17e6:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
	my_altimeter->batFloat = my_altimeter->batV * 0.0019;
	
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    17e8:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    17ea:	7c2b      	ldrb	r3, [r5, #16]
    17ec:	7c68      	ldrb	r0, [r5, #17]
    17ee:	021b      	lsls	r3, r3, #8
    17f0:	430b      	orrs	r3, r1
    17f2:	0400      	lsls	r0, r0, #16
    17f4:	001a      	movs	r2, r3
    17f6:	0003      	movs	r3, r0
    17f8:	7ca8      	ldrb	r0, [r5, #18]
    17fa:	4313      	orrs	r3, r2
    17fc:	0600      	lsls	r0, r0, #24
    17fe:	7ce9      	ldrb	r1, [r5, #19]
    1800:	4318      	orrs	r0, r3
    1802:	47b0      	blx	r6
    1804:	23a8      	movs	r3, #168	; 0xa8
    1806:	009b      	lsls	r3, r3, #2
    1808:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    180a:	7d6b      	ldrb	r3, [r5, #21]
    180c:	7d29      	ldrb	r1, [r5, #20]
    180e:	7da8      	ldrb	r0, [r5, #22]
    1810:	021b      	lsls	r3, r3, #8
    1812:	430b      	orrs	r3, r1
    1814:	0400      	lsls	r0, r0, #16
    1816:	001a      	movs	r2, r3
    1818:	0003      	movs	r3, r0
    181a:	7de8      	ldrb	r0, [r5, #23]
    181c:	4313      	orrs	r3, r2
    181e:	0600      	lsls	r0, r0, #24
    1820:	7e29      	ldrb	r1, [r5, #24]
    1822:	4318      	orrs	r0, r3
    1824:	47b0      	blx	r6
    1826:	4baf      	ldr	r3, [pc, #700]	; (1ae4 <sampleTick+0x390>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    1828:	7e69      	ldrb	r1, [r5, #25]
	my_altimeter->batFloat = my_altimeter->batV * 0.0019;
	
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);
    182a:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    182c:	7eab      	ldrb	r3, [r5, #26]
    182e:	7ee8      	ldrb	r0, [r5, #27]
    1830:	021b      	lsls	r3, r3, #8
    1832:	430b      	orrs	r3, r1
    1834:	0400      	lsls	r0, r0, #16
    1836:	001a      	movs	r2, r3
    1838:	0003      	movs	r3, r0
    183a:	7f28      	ldrb	r0, [r5, #28]
    183c:	4313      	orrs	r3, r2
    183e:	0600      	lsls	r0, r0, #24
    1840:	7f69      	ldrb	r1, [r5, #29]
    1842:	4318      	orrs	r0, r3
    1844:	47b0      	blx	r6
    1846:	0023      	movs	r3, r4
    1848:	3380      	adds	r3, #128	; 0x80
    184a:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    184c:	4ba6      	ldr	r3, [pc, #664]	; (1ae8 <sampleTick+0x394>)
    184e:	0026      	movs	r6, r4
    1850:	18c0      	adds	r0, r0, r3
    1852:	4b9e      	ldr	r3, [pc, #632]	; (1acc <sampleTick+0x378>)
    1854:	4798      	blx	r3
    1856:	4aa5      	ldr	r2, [pc, #660]	; (1aec <sampleTick+0x398>)
    1858:	4f9e      	ldr	r7, [pc, #632]	; (1ad4 <sampleTick+0x380>)
    185a:	4ba5      	ldr	r3, [pc, #660]	; (1af0 <sampleTick+0x39c>)
    185c:	47b8      	blx	r7
    185e:	4b9f      	ldr	r3, [pc, #636]	; (1adc <sampleTick+0x388>)
    1860:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1862:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1864:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1866:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1868:	3608      	adds	r6, #8
    186a:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    186c:	6523      	str	r3, [r4, #80]	; 0x50
    186e:	4ba1      	ldr	r3, [pc, #644]	; (1af4 <sampleTick+0x3a0>)
    1870:	023f      	lsls	r7, r7, #8
    1872:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1874:	002e      	movs	r6, r5
    1876:	9200      	str	r2, [sp, #0]
    1878:	7fea      	ldrb	r2, [r5, #31]
    187a:	7fa8      	ldrb	r0, [r5, #30]
    187c:	0212      	lsls	r2, r2, #8
    187e:	4302      	orrs	r2, r0
    1880:	0011      	movs	r1, r2
    1882:	002b      	movs	r3, r5
    1884:	361e      	adds	r6, #30
    1886:	78b2      	ldrb	r2, [r6, #2]
    1888:	3323      	adds	r3, #35	; 0x23
    188a:	0412      	lsls	r2, r2, #16
    188c:	430a      	orrs	r2, r1
    188e:	78f1      	ldrb	r1, [r6, #3]
    1890:	7818      	ldrb	r0, [r3, #0]
    1892:	0609      	lsls	r1, r1, #24
    1894:	4311      	orrs	r1, r2
    1896:	7932      	ldrb	r2, [r6, #4]
    1898:	789d      	ldrb	r5, [r3, #2]
    189a:	9204      	str	r2, [sp, #16]
    189c:	785a      	ldrb	r2, [r3, #1]
    189e:	042d      	lsls	r5, r5, #16
    18a0:	0212      	lsls	r2, r2, #8
    18a2:	4302      	orrs	r2, r0
    18a4:	9103      	str	r1, [sp, #12]
    18a6:	0011      	movs	r1, r2
    18a8:	002a      	movs	r2, r5
    18aa:	78dd      	ldrb	r5, [r3, #3]
    18ac:	791b      	ldrb	r3, [r3, #4]
    18ae:	430a      	orrs	r2, r1
    18b0:	062d      	lsls	r5, r5, #24
    18b2:	4315      	orrs	r5, r2
    18b4:	9305      	str	r3, [sp, #20]
    18b6:	9a03      	ldr	r2, [sp, #12]
    18b8:	9905      	ldr	r1, [sp, #20]
    18ba:	9b04      	ldr	r3, [sp, #16]
    18bc:	0028      	movs	r0, r5
    18be:	4e8e      	ldr	r6, [pc, #568]	; (1af8 <sampleTick+0x3a4>)
    18c0:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    18c2:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    18c4:	4b8b      	ldr	r3, [pc, #556]	; (1af4 <sampleTick+0x3a0>)
    18c6:	0040      	lsls	r0, r0, #1
    18c8:	619f      	str	r7, [r3, #24]
    18ca:	4b8c      	ldr	r3, [pc, #560]	; (1afc <sampleTick+0x3a8>)
    18cc:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    18ce:	4b8c      	ldr	r3, [pc, #560]	; (1b00 <sampleTick+0x3ac>)
    18d0:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    18d2:	4b88      	ldr	r3, [pc, #544]	; (1af4 <sampleTick+0x3a0>)
    18d4:	6160      	str	r0, [r4, #20]
    18d6:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    18d8:	2342      	movs	r3, #66	; 0x42
    18da:	9a03      	ldr	r2, [sp, #12]
    18dc:	9300      	str	r3, [sp, #0]
    18de:	0028      	movs	r0, r5
    18e0:	9b04      	ldr	r3, [sp, #16]
    18e2:	9905      	ldr	r1, [sp, #20]
    18e4:	47b0      	blx	r6
    18e6:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    18e8:	4b82      	ldr	r3, [pc, #520]	; (1af4 <sampleTick+0x3a0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    18ea:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    18ec:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    18ee:	4b85      	ldr	r3, [pc, #532]	; (1b04 <sampleTick+0x3b0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    18f0:	4f85      	ldr	r7, [pc, #532]	; (1b08 <sampleTick+0x3b4>)
    18f2:	601a      	str	r2, [r3, #0]
    18f4:	2182      	movs	r1, #130	; 0x82
    18f6:	2000      	movs	r0, #0
    18f8:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    18fa:	21ff      	movs	r1, #255	; 0xff
    18fc:	2000      	movs	r0, #0
    18fe:	47b8      	blx	r7
    1900:	0023      	movs	r3, r4
    1902:	3368      	adds	r3, #104	; 0x68
    1904:	8018      	strh	r0, [r3, #0]
    1906:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1908:	21ff      	movs	r1, #255	; 0xff
    190a:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    190c:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    190e:	47b8      	blx	r7
    1910:	9b03      	ldr	r3, [sp, #12]
    1912:	0200      	lsls	r0, r0, #8
    1914:	4305      	orrs	r5, r0
    1916:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1918:	21ff      	movs	r1, #255	; 0xff
    191a:	0026      	movs	r6, r4
    191c:	2000      	movs	r0, #0
    191e:	47b8      	blx	r7
    1920:	366c      	adds	r6, #108	; 0x6c
    1922:	8030      	strh	r0, [r6, #0]
    1924:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1926:	21ff      	movs	r1, #255	; 0xff
    1928:	2000      	movs	r0, #0
    192a:	47b8      	blx	r7
    192c:	0200      	lsls	r0, r0, #8
    192e:	4305      	orrs	r5, r0
    1930:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1932:	21ff      	movs	r1, #255	; 0xff
    1934:	2000      	movs	r0, #0
    1936:	47b8      	blx	r7
    1938:	466b      	mov	r3, sp
    193a:	0025      	movs	r5, r4
    193c:	9004      	str	r0, [sp, #16]
    193e:	8a1b      	ldrh	r3, [r3, #16]
    1940:	3570      	adds	r5, #112	; 0x70
    1942:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1944:	21ff      	movs	r1, #255	; 0xff
    1946:	2000      	movs	r0, #0
    1948:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    194a:	2280      	movs	r2, #128	; 0x80
    194c:	9b04      	ldr	r3, [sp, #16]
    194e:	0200      	lsls	r0, r0, #8
    1950:	4303      	orrs	r3, r0
    1952:	802b      	strh	r3, [r5, #0]
    1954:	4b6d      	ldr	r3, [pc, #436]	; (1b0c <sampleTick+0x3b8>)
    1956:	00d2      	lsls	r2, r2, #3
    1958:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    195a:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    195c:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    195e:	2000      	movs	r0, #0
    1960:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1962:	2300      	movs	r3, #0
    1964:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1966:	2102      	movs	r1, #2
    1968:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    196a:	0021      	movs	r1, r4
    196c:	1112      	asrs	r2, r2, #4
    196e:	1100      	asrs	r0, r0, #4
    1970:	316a      	adds	r1, #106	; 0x6a
    1972:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1974:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1976:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1978:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    197a:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    197c:	4b53      	ldr	r3, [pc, #332]	; (1acc <sampleTick+0x378>)
    197e:	4798      	blx	r3
    1980:	23fe      	movs	r3, #254	; 0xfe
    1982:	4d54      	ldr	r5, [pc, #336]	; (1ad4 <sampleTick+0x380>)
    1984:	2200      	movs	r2, #0
    1986:	059b      	lsls	r3, r3, #22
    1988:	47a8      	blx	r5
    198a:	4b54      	ldr	r3, [pc, #336]	; (1adc <sampleTick+0x388>)
    198c:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    198e:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1990:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1992:	2000      	movs	r0, #0
    1994:	5e18      	ldrsh	r0, [r3, r0]
    1996:	4b4d      	ldr	r3, [pc, #308]	; (1acc <sampleTick+0x378>)
    1998:	4798      	blx	r3
    199a:	23fe      	movs	r3, #254	; 0xfe
    199c:	2200      	movs	r2, #0
    199e:	059b      	lsls	r3, r3, #22
    19a0:	47a8      	blx	r5
    19a2:	4b4e      	ldr	r3, [pc, #312]	; (1adc <sampleTick+0x388>)
    19a4:	4798      	blx	r3
    19a6:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    19a8:	2306      	movs	r3, #6
    19aa:	5ef0      	ldrsh	r0, [r6, r3]
    19ac:	4b47      	ldr	r3, [pc, #284]	; (1acc <sampleTick+0x378>)
    19ae:	4798      	blx	r3
    19b0:	23fe      	movs	r3, #254	; 0xfe
    19b2:	2200      	movs	r2, #0
    19b4:	059b      	lsls	r3, r3, #22
    19b6:	47a8      	blx	r5
    19b8:	4b48      	ldr	r3, [pc, #288]	; (1adc <sampleTick+0x388>)
    19ba:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    19bc:	2280      	movs	r2, #128	; 0x80
    19be:	4b4d      	ldr	r3, [pc, #308]	; (1af4 <sampleTick+0x3a0>)
    19c0:	00d2      	lsls	r2, r2, #3
    19c2:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    19c4:	2182      	movs	r1, #130	; 0x82
    19c6:	615a      	str	r2, [r3, #20]
    19c8:	2000      	movs	r0, #0
    19ca:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    19cc:	21ff      	movs	r1, #255	; 0xff
    19ce:	2000      	movs	r0, #0
    19d0:	47b8      	blx	r7
    19d2:	0023      	movs	r3, r4
    19d4:	3374      	adds	r3, #116	; 0x74
    19d6:	8018      	strh	r0, [r3, #0]
    19d8:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19da:	21ff      	movs	r1, #255	; 0xff
    19dc:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    19de:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19e0:	47b8      	blx	r7
    19e2:	9b03      	ldr	r3, [sp, #12]
    19e4:	0200      	lsls	r0, r0, #8
    19e6:	4305      	orrs	r5, r0
    19e8:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    19ea:	21ff      	movs	r1, #255	; 0xff
    19ec:	2000      	movs	r0, #0
    19ee:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19f0:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    19f2:	81b0      	strh	r0, [r6, #12]
    19f4:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19f6:	2000      	movs	r0, #0
    19f8:	47b8      	blx	r7
    19fa:	0200      	lsls	r0, r0, #8
    19fc:	4305      	orrs	r5, r0
    19fe:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1a00:	21ff      	movs	r1, #255	; 0xff
    1a02:	2000      	movs	r0, #0
    1a04:	47b8      	blx	r7
    1a06:	466b      	mov	r3, sp
    1a08:	0025      	movs	r5, r4
    1a0a:	9004      	str	r0, [sp, #16]
    1a0c:	8a1b      	ldrh	r3, [r3, #16]
    1a0e:	357c      	adds	r5, #124	; 0x7c
    1a10:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1a12:	21ff      	movs	r1, #255	; 0xff
    1a14:	2000      	movs	r0, #0
    1a16:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	9f04      	ldr	r7, [sp, #16]
    1a1c:	0200      	lsls	r0, r0, #8
    1a1e:	4b35      	ldr	r3, [pc, #212]	; (1af4 <sampleTick+0x3a0>)
    1a20:	4307      	orrs	r7, r0
    1a22:	00d2      	lsls	r2, r2, #3
    1a24:	802f      	strh	r7, [r5, #0]
    1a26:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1a28:	9b03      	ldr	r3, [sp, #12]
    1a2a:	2000      	movs	r0, #0
    1a2c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    1a2e:	230c      	movs	r3, #12
    1a30:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    1a32:	2100      	movs	r1, #0
    1a34:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1a36:	0021      	movs	r1, r4
    1a38:	1112      	asrs	r2, r2, #4
    1a3a:	1100      	asrs	r0, r0, #4
    1a3c:	3176      	adds	r1, #118	; 0x76
    1a3e:	111b      	asrs	r3, r3, #4
    1a40:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1a42:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1a44:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1a46:	4b21      	ldr	r3, [pc, #132]	; (1acc <sampleTick+0x378>)
    1a48:	4798      	blx	r3
    1a4a:	23fe      	movs	r3, #254	; 0xfe
    1a4c:	4f21      	ldr	r7, [pc, #132]	; (1ad4 <sampleTick+0x380>)
    1a4e:	2200      	movs	r2, #0
    1a50:	059b      	lsls	r3, r3, #22
    1a52:	47b8      	blx	r7
    1a54:	4b21      	ldr	r3, [pc, #132]	; (1adc <sampleTick+0x388>)
    1a56:	4798      	blx	r3
    1a58:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    1a5a:	230e      	movs	r3, #14
    1a5c:	5ef0      	ldrsh	r0, [r6, r3]
    1a5e:	4b1b      	ldr	r3, [pc, #108]	; (1acc <sampleTick+0x378>)
    1a60:	4798      	blx	r3
    1a62:	23fe      	movs	r3, #254	; 0xfe
    1a64:	2200      	movs	r2, #0
    1a66:	059b      	lsls	r3, r3, #22
    1a68:	47b8      	blx	r7
    1a6a:	4b1c      	ldr	r3, [pc, #112]	; (1adc <sampleTick+0x388>)
    1a6c:	4798      	blx	r3
    1a6e:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1a70:	2302      	movs	r3, #2
    1a72:	5ee8      	ldrsh	r0, [r5, r3]
    1a74:	4b15      	ldr	r3, [pc, #84]	; (1acc <sampleTick+0x378>)
    1a76:	4798      	blx	r3
    1a78:	23fe      	movs	r3, #254	; 0xfe
    1a7a:	2200      	movs	r2, #0
    1a7c:	059b      	lsls	r3, r3, #22
    1a7e:	47b8      	blx	r7
    1a80:	4b16      	ldr	r3, [pc, #88]	; (1adc <sampleTick+0x388>)
    1a82:	4798      	blx	r3
    1a84:	6660      	str	r0, [r4, #100]	; 0x64

    delay_us(800);
    1a86:	20c8      	movs	r0, #200	; 0xc8
    1a88:	4b1c      	ldr	r3, [pc, #112]	; (1afc <sampleTick+0x3a8>)
    1a8a:	0080      	lsls	r0, r0, #2
    1a8c:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1a8e:	4b1c      	ldr	r3, [pc, #112]	; (1b00 <sampleTick+0x3ac>)
    1a90:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1a92:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1a94:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1a96:	4b1e      	ldr	r3, [pc, #120]	; (1b10 <sampleTick+0x3bc>)
    1a98:	0028      	movs	r0, r5
    1a9a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1a9c:	0028      	movs	r0, r5
    1a9e:	4b1d      	ldr	r3, [pc, #116]	; (1b14 <sampleTick+0x3c0>)
    1aa0:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1aa2:	4b1d      	ldr	r3, [pc, #116]	; (1b18 <sampleTick+0x3c4>)
    1aa4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1aa6:	4798      	blx	r3
    1aa8:	4a1c      	ldr	r2, [pc, #112]	; (1b1c <sampleTick+0x3c8>)
    1aaa:	4b1d      	ldr	r3, [pc, #116]	; (1b20 <sampleTick+0x3cc>)
    1aac:	4d09      	ldr	r5, [pc, #36]	; (1ad4 <sampleTick+0x380>)
    1aae:	47a8      	blx	r5
    1ab0:	4b0a      	ldr	r3, [pc, #40]	; (1adc <sampleTick+0x388>)
    1ab2:	4798      	blx	r3
    1ab4:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1ab6:	b007      	add	sp, #28
    1ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	20000463 	.word	0x20000463
    1ac0:	000011a9 	.word	0x000011a9
    1ac4:	00003834 	.word	0x00003834
    1ac8:	00000e1d 	.word	0x00000e1d
    1acc:	000031fd 	.word	0x000031fd
    1ad0:	77318fc5 	.word	0x77318fc5
    1ad4:	000025f5 	.word	0x000025f5
    1ad8:	3f5f212d 	.word	0x3f5f212d
    1adc:	00003399 	.word	0x00003399
    1ae0:	0000029e 	.word	0x0000029e
    1ae4:	000002a2 	.word	0x000002a2
    1ae8:	fffff0c4 	.word	0xfffff0c4
    1aec:	02de00d2 	.word	0x02de00d2
    1af0:	bf8f8a09 	.word	0xbf8f8a09
    1af4:	41004400 	.word	0x41004400
    1af8:	00000e85 	.word	0x00000e85
    1afc:	0000112d 	.word	0x0000112d
    1b00:	0000043d 	.word	0x0000043d
    1b04:	41004494 	.word	0x41004494
    1b08:	00001c31 	.word	0x00001c31
    1b0c:	41004498 	.word	0x41004498
    1b10:	000004f1 	.word	0x000004f1
    1b14:	000005dd 	.word	0x000005dd
    1b18:	00003281 	.word	0x00003281
    1b1c:	e9f6a93f 	.word	0xe9f6a93f
    1b20:	3fa0cc78 	.word	0x3fa0cc78

00001b24 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1b28:	2301      	movs	r3, #1
    1b2a:	1ca6      	adds	r6, r4, #2
    1b2c:	40b3      	lsls	r3, r6
    1b2e:	480d      	ldr	r0, [pc, #52]	; (1b64 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1b30:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1b32:	6a01      	ldr	r1, [r0, #32]
    1b34:	430b      	orrs	r3, r1
    1b36:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1b38:	2d00      	cmp	r5, #0
    1b3a:	d003      	beq.n	1b44 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1b3c:	2107      	movs	r1, #7
    1b3e:	0028      	movs	r0, r5
    1b40:	4b09      	ldr	r3, [pc, #36]	; (1b68 <sercomClockEnable+0x44>)
    1b42:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1b44:	22f0      	movs	r2, #240	; 0xf0
    1b46:	2080      	movs	r0, #128	; 0x80
    1b48:	0229      	lsls	r1, r5, #8
    1b4a:	0112      	lsls	r2, r2, #4
    1b4c:	4011      	ands	r1, r2
    1b4e:	01c0      	lsls	r0, r0, #7
    1b50:	4301      	orrs	r1, r0
    1b52:	0020      	movs	r0, r4
    1b54:	3014      	adds	r0, #20
    1b56:	223f      	movs	r2, #63	; 0x3f
    1b58:	0003      	movs	r3, r0
    1b5a:	4013      	ands	r3, r2
    1b5c:	4319      	orrs	r1, r3
    1b5e:	4b03      	ldr	r3, [pc, #12]	; (1b6c <sercomClockEnable+0x48>)
    1b60:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    1b62:	bd70      	pop	{r4, r5, r6, pc}
    1b64:	40000400 	.word	0x40000400
    1b68:	000010dd 	.word	0x000010dd
    1b6c:	40000c00 	.word	0x40000c00

00001b70 <sercomReset>:
#include <log.h>
#include <sample.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <sercomReset+0x14>)
    1b72:	0280      	lsls	r0, r0, #10
    1b74:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1b76:	2301      	movs	r3, #1
    1b78:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1b7a:	6802      	ldr	r2, [r0, #0]
    1b7c:	421a      	tst	r2, r3
    1b7e:	d1fc      	bne.n	1b7a <sercomReset+0xa>
}
    1b80:	4770      	bx	lr
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	42000800 	.word	0x42000800

00001b88 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b8a:	0004      	movs	r4, r0
    1b8c:	9300      	str	r3, [sp, #0]
    1b8e:	ab08      	add	r3, sp, #32
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	000e      	movs	r6, r1
    1b94:	9301      	str	r3, [sp, #4]
    1b96:	ab09      	add	r3, sp, #36	; 0x24
    1b98:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1b9a:	4b12      	ldr	r3, [pc, #72]	; (1be4 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1b9c:	0015      	movs	r5, r2

    sercomReset(id);
    1b9e:	4798      	blx	r3
    1ba0:	4b11      	ldr	r3, [pc, #68]	; (1be8 <sercomSpiMasterInit+0x60>)
    1ba2:	02a4      	lsls	r4, r4, #10
    1ba4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1ba6:	2380      	movs	r3, #128	; 0x80
    1ba8:	029b      	lsls	r3, r3, #10
    1baa:	6063      	str	r3, [r4, #4]
    1bac:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1bae:	21c0      	movs	r1, #192	; 0xc0
    1bb0:	042d      	lsls	r5, r5, #16
    1bb2:	029b      	lsls	r3, r3, #10
    1bb4:	402b      	ands	r3, r5
    1bb6:	250e      	movs	r5, #14
    1bb8:	0536      	lsls	r6, r6, #20
    1bba:	0389      	lsls	r1, r1, #14
    1bbc:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1bbe:	9e00      	ldr	r6, [sp, #0]
    1bc0:	431d      	orrs	r5, r3
    1bc2:	1e73      	subs	r3, r6, #1
    1bc4:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1bc6:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1bc8:	0772      	lsls	r2, r6, #29
    1bca:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1bcc:	432a      	orrs	r2, r5
    1bce:	1e59      	subs	r1, r3, #1
    1bd0:	418b      	sbcs	r3, r1
    1bd2:	0016      	movs	r6, r2
    1bd4:	071b      	lsls	r3, r3, #28
    1bd6:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1bd8:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1bda:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1bdc:	69e3      	ldr	r3, [r4, #28]
    1bde:	075b      	lsls	r3, r3, #29
    1be0:	d4fc      	bmi.n	1bdc <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1be2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1be4:	00001b71 	.word	0x00001b71
    1be8:	42000800 	.word	0x42000800

00001bec <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bee:	0007      	movs	r7, r0
    1bf0:	001e      	movs	r6, r3
    sercomReset(id);
    1bf2:	4b0c      	ldr	r3, [pc, #48]	; (1c24 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1bf4:	000d      	movs	r5, r1
    1bf6:	0014      	movs	r4, r2
    sercomReset(id);
    1bf8:	4798      	blx	r3
#include <log.h>
#include <sample.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1bfa:	4b0b      	ldr	r3, [pc, #44]	; (1c28 <sercomUartInit+0x3c>)
    1bfc:	02b8      	lsls	r0, r7, #10
    1bfe:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1c00:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c02:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1c04:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1c06:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c08:	0529      	lsls	r1, r5, #20
    1c0a:	0392      	lsls	r2, r2, #14
    1c0c:	4011      	ands	r1, r2
    1c0e:	4a07      	ldr	r2, [pc, #28]	; (1c2c <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1c10:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1c12:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c14:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1c16:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c18:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1c1a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c1c:	4023      	ands	r3, r4
    1c1e:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1c20:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c24:	00001b71 	.word	0x00001b71
    1c28:	42000800 	.word	0x42000800
    1c2c:	40000006 	.word	0x40000006

00001c30 <spiDataTransfer>:
    1c30:	4b04      	ldr	r3, [pc, #16]	; (1c44 <spiDataTransfer+0x14>)
    1c32:	0280      	lsls	r0, r0, #10
    1c34:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1c36:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1c38:	7e03      	ldrb	r3, [r0, #24]
    1c3a:	075b      	lsls	r3, r3, #29
    1c3c:	d5fc      	bpl.n	1c38 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1c3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1c40:	b2c0      	uxtb	r0, r0
}
    1c42:	4770      	bx	lr
    1c44:	42000800 	.word	0x42000800

00001c48 <usartDataOut>:
    1c48:	4b04      	ldr	r3, [pc, #16]	; (1c5c <usartDataOut+0x14>)
    1c4a:	0280      	lsls	r0, r0, #10
    1c4c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1c4e:	b289      	uxth	r1, r1
    1c50:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    1c52:	7e03      	ldrb	r3, [r0, #24]
    1c54:	07db      	lsls	r3, r3, #31
    1c56:	d5fc      	bpl.n	1c52 <usartDataOut+0xa>
}
    1c58:	4770      	bx	lr
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	42000800 	.word	0x42000800

00001c60 <usartDataIn>:
    1c60:	4b02      	ldr	r3, [pc, #8]	; (1c6c <usartDataIn+0xc>)
    1c62:	0280      	lsls	r0, r0, #10
    1c64:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1c66:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1c68:	b2c0      	uxtb	r0, r0
    1c6a:	4770      	bx	lr
    1c6c:	42000800 	.word	0x42000800

00001c70 <__aeabi_cdrcmple>:
    1c70:	4684      	mov	ip, r0
    1c72:	1c10      	adds	r0, r2, #0
    1c74:	4662      	mov	r2, ip
    1c76:	468c      	mov	ip, r1
    1c78:	1c19      	adds	r1, r3, #0
    1c7a:	4663      	mov	r3, ip
    1c7c:	e000      	b.n	1c80 <__aeabi_cdcmpeq>
    1c7e:	46c0      	nop			; (mov r8, r8)

00001c80 <__aeabi_cdcmpeq>:
    1c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1c82:	f000 fc4d 	bl	2520 <__ledf2>
    1c86:	2800      	cmp	r0, #0
    1c88:	d401      	bmi.n	1c8e <__aeabi_cdcmpeq+0xe>
    1c8a:	2100      	movs	r1, #0
    1c8c:	42c8      	cmn	r0, r1
    1c8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001c90 <__aeabi_dcmpeq>:
    1c90:	b510      	push	{r4, lr}
    1c92:	f000 fba1 	bl	23d8 <__eqdf2>
    1c96:	4240      	negs	r0, r0
    1c98:	3001      	adds	r0, #1
    1c9a:	bd10      	pop	{r4, pc}

00001c9c <__aeabi_dcmplt>:
    1c9c:	b510      	push	{r4, lr}
    1c9e:	f000 fc3f 	bl	2520 <__ledf2>
    1ca2:	2800      	cmp	r0, #0
    1ca4:	db01      	blt.n	1caa <__aeabi_dcmplt+0xe>
    1ca6:	2000      	movs	r0, #0
    1ca8:	bd10      	pop	{r4, pc}
    1caa:	2001      	movs	r0, #1
    1cac:	bd10      	pop	{r4, pc}
    1cae:	46c0      	nop			; (mov r8, r8)

00001cb0 <__aeabi_dcmple>:
    1cb0:	b510      	push	{r4, lr}
    1cb2:	f000 fc35 	bl	2520 <__ledf2>
    1cb6:	2800      	cmp	r0, #0
    1cb8:	dd01      	ble.n	1cbe <__aeabi_dcmple+0xe>
    1cba:	2000      	movs	r0, #0
    1cbc:	bd10      	pop	{r4, pc}
    1cbe:	2001      	movs	r0, #1
    1cc0:	bd10      	pop	{r4, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)

00001cc4 <__aeabi_dcmpgt>:
    1cc4:	b510      	push	{r4, lr}
    1cc6:	f000 fbc7 	bl	2458 <__gedf2>
    1cca:	2800      	cmp	r0, #0
    1ccc:	dc01      	bgt.n	1cd2 <__aeabi_dcmpgt+0xe>
    1cce:	2000      	movs	r0, #0
    1cd0:	bd10      	pop	{r4, pc}
    1cd2:	2001      	movs	r0, #1
    1cd4:	bd10      	pop	{r4, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)

00001cd8 <__aeabi_dcmpge>:
    1cd8:	b510      	push	{r4, lr}
    1cda:	f000 fbbd 	bl	2458 <__gedf2>
    1cde:	2800      	cmp	r0, #0
    1ce0:	da01      	bge.n	1ce6 <__aeabi_dcmpge+0xe>
    1ce2:	2000      	movs	r0, #0
    1ce4:	bd10      	pop	{r4, pc}
    1ce6:	2001      	movs	r0, #1
    1ce8:	bd10      	pop	{r4, pc}
    1cea:	46c0      	nop			; (mov r8, r8)

00001cec <__aeabi_lmul>:
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	464f      	mov	r7, r9
    1cf0:	4646      	mov	r6, r8
    1cf2:	b4c0      	push	{r6, r7}
    1cf4:	0416      	lsls	r6, r2, #16
    1cf6:	0c36      	lsrs	r6, r6, #16
    1cf8:	4699      	mov	r9, r3
    1cfa:	0033      	movs	r3, r6
    1cfc:	0405      	lsls	r5, r0, #16
    1cfe:	0c2c      	lsrs	r4, r5, #16
    1d00:	0c07      	lsrs	r7, r0, #16
    1d02:	0c15      	lsrs	r5, r2, #16
    1d04:	4363      	muls	r3, r4
    1d06:	437e      	muls	r6, r7
    1d08:	436f      	muls	r7, r5
    1d0a:	4365      	muls	r5, r4
    1d0c:	0c1c      	lsrs	r4, r3, #16
    1d0e:	19ad      	adds	r5, r5, r6
    1d10:	1964      	adds	r4, r4, r5
    1d12:	469c      	mov	ip, r3
    1d14:	42a6      	cmp	r6, r4
    1d16:	d903      	bls.n	1d20 <__aeabi_lmul+0x34>
    1d18:	2380      	movs	r3, #128	; 0x80
    1d1a:	025b      	lsls	r3, r3, #9
    1d1c:	4698      	mov	r8, r3
    1d1e:	4447      	add	r7, r8
    1d20:	4663      	mov	r3, ip
    1d22:	0c25      	lsrs	r5, r4, #16
    1d24:	19ef      	adds	r7, r5, r7
    1d26:	041d      	lsls	r5, r3, #16
    1d28:	464b      	mov	r3, r9
    1d2a:	434a      	muls	r2, r1
    1d2c:	4343      	muls	r3, r0
    1d2e:	0c2d      	lsrs	r5, r5, #16
    1d30:	0424      	lsls	r4, r4, #16
    1d32:	1964      	adds	r4, r4, r5
    1d34:	1899      	adds	r1, r3, r2
    1d36:	19c9      	adds	r1, r1, r7
    1d38:	0020      	movs	r0, r4
    1d3a:	bc0c      	pop	{r2, r3}
    1d3c:	4690      	mov	r8, r2
    1d3e:	4699      	mov	r9, r3
    1d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d42:	46c0      	nop			; (mov r8, r8)

00001d44 <__aeabi_d2uiz>:
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	2200      	movs	r2, #0
    1d48:	4b0c      	ldr	r3, [pc, #48]	; (1d7c <__aeabi_d2uiz+0x38>)
    1d4a:	0004      	movs	r4, r0
    1d4c:	000d      	movs	r5, r1
    1d4e:	f7ff ffc3 	bl	1cd8 <__aeabi_dcmpge>
    1d52:	2800      	cmp	r0, #0
    1d54:	d104      	bne.n	1d60 <__aeabi_d2uiz+0x1c>
    1d56:	0020      	movs	r0, r4
    1d58:	0029      	movs	r1, r5
    1d5a:	f001 fa19 	bl	3190 <__aeabi_d2iz>
    1d5e:	bd70      	pop	{r4, r5, r6, pc}
    1d60:	4b06      	ldr	r3, [pc, #24]	; (1d7c <__aeabi_d2uiz+0x38>)
    1d62:	2200      	movs	r2, #0
    1d64:	0020      	movs	r0, r4
    1d66:	0029      	movs	r1, r5
    1d68:	f000 febe 	bl	2ae8 <__aeabi_dsub>
    1d6c:	f001 fa10 	bl	3190 <__aeabi_d2iz>
    1d70:	2380      	movs	r3, #128	; 0x80
    1d72:	061b      	lsls	r3, r3, #24
    1d74:	469c      	mov	ip, r3
    1d76:	4460      	add	r0, ip
    1d78:	e7f1      	b.n	1d5e <__aeabi_d2uiz+0x1a>
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	41e00000 	.word	0x41e00000

00001d80 <__aeabi_dadd>:
    1d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d82:	4656      	mov	r6, sl
    1d84:	465f      	mov	r7, fp
    1d86:	464d      	mov	r5, r9
    1d88:	4644      	mov	r4, r8
    1d8a:	b4f0      	push	{r4, r5, r6, r7}
    1d8c:	000f      	movs	r7, r1
    1d8e:	0ffd      	lsrs	r5, r7, #31
    1d90:	46aa      	mov	sl, r5
    1d92:	0309      	lsls	r1, r1, #12
    1d94:	007c      	lsls	r4, r7, #1
    1d96:	002e      	movs	r6, r5
    1d98:	005f      	lsls	r7, r3, #1
    1d9a:	0f45      	lsrs	r5, r0, #29
    1d9c:	0a49      	lsrs	r1, r1, #9
    1d9e:	0d7f      	lsrs	r7, r7, #21
    1da0:	4329      	orrs	r1, r5
    1da2:	00c5      	lsls	r5, r0, #3
    1da4:	0318      	lsls	r0, r3, #12
    1da6:	46bc      	mov	ip, r7
    1da8:	0a40      	lsrs	r0, r0, #9
    1daa:	0f57      	lsrs	r7, r2, #29
    1dac:	0d64      	lsrs	r4, r4, #21
    1dae:	0fdb      	lsrs	r3, r3, #31
    1db0:	4338      	orrs	r0, r7
    1db2:	00d2      	lsls	r2, r2, #3
    1db4:	459a      	cmp	sl, r3
    1db6:	d100      	bne.n	1dba <__aeabi_dadd+0x3a>
    1db8:	e0aa      	b.n	1f10 <__aeabi_dadd+0x190>
    1dba:	4666      	mov	r6, ip
    1dbc:	1ba6      	subs	r6, r4, r6
    1dbe:	2e00      	cmp	r6, #0
    1dc0:	dc00      	bgt.n	1dc4 <__aeabi_dadd+0x44>
    1dc2:	e0ff      	b.n	1fc4 <__aeabi_dadd+0x244>
    1dc4:	4663      	mov	r3, ip
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d139      	bne.n	1e3e <__aeabi_dadd+0xbe>
    1dca:	0003      	movs	r3, r0
    1dcc:	4313      	orrs	r3, r2
    1dce:	d000      	beq.n	1dd2 <__aeabi_dadd+0x52>
    1dd0:	e0d9      	b.n	1f86 <__aeabi_dadd+0x206>
    1dd2:	076b      	lsls	r3, r5, #29
    1dd4:	d009      	beq.n	1dea <__aeabi_dadd+0x6a>
    1dd6:	230f      	movs	r3, #15
    1dd8:	402b      	ands	r3, r5
    1dda:	2b04      	cmp	r3, #4
    1ddc:	d005      	beq.n	1dea <__aeabi_dadd+0x6a>
    1dde:	1d2b      	adds	r3, r5, #4
    1de0:	42ab      	cmp	r3, r5
    1de2:	41ad      	sbcs	r5, r5
    1de4:	426d      	negs	r5, r5
    1de6:	1949      	adds	r1, r1, r5
    1de8:	001d      	movs	r5, r3
    1dea:	020b      	lsls	r3, r1, #8
    1dec:	d400      	bmi.n	1df0 <__aeabi_dadd+0x70>
    1dee:	e082      	b.n	1ef6 <__aeabi_dadd+0x176>
    1df0:	4bca      	ldr	r3, [pc, #808]	; (211c <STACK_SIZE+0x11c>)
    1df2:	3401      	adds	r4, #1
    1df4:	429c      	cmp	r4, r3
    1df6:	d100      	bne.n	1dfa <__aeabi_dadd+0x7a>
    1df8:	e0fe      	b.n	1ff8 <__aeabi_dadd+0x278>
    1dfa:	000a      	movs	r2, r1
    1dfc:	4656      	mov	r6, sl
    1dfe:	4bc8      	ldr	r3, [pc, #800]	; (2120 <STACK_SIZE+0x120>)
    1e00:	08ed      	lsrs	r5, r5, #3
    1e02:	401a      	ands	r2, r3
    1e04:	0750      	lsls	r0, r2, #29
    1e06:	0564      	lsls	r4, r4, #21
    1e08:	0252      	lsls	r2, r2, #9
    1e0a:	4305      	orrs	r5, r0
    1e0c:	0b12      	lsrs	r2, r2, #12
    1e0e:	0d64      	lsrs	r4, r4, #21
    1e10:	2100      	movs	r1, #0
    1e12:	0312      	lsls	r2, r2, #12
    1e14:	0d0b      	lsrs	r3, r1, #20
    1e16:	051b      	lsls	r3, r3, #20
    1e18:	0564      	lsls	r4, r4, #21
    1e1a:	0b12      	lsrs	r2, r2, #12
    1e1c:	431a      	orrs	r2, r3
    1e1e:	0863      	lsrs	r3, r4, #1
    1e20:	4cc0      	ldr	r4, [pc, #768]	; (2124 <STACK_SIZE+0x124>)
    1e22:	07f6      	lsls	r6, r6, #31
    1e24:	4014      	ands	r4, r2
    1e26:	431c      	orrs	r4, r3
    1e28:	0064      	lsls	r4, r4, #1
    1e2a:	0864      	lsrs	r4, r4, #1
    1e2c:	4334      	orrs	r4, r6
    1e2e:	0028      	movs	r0, r5
    1e30:	0021      	movs	r1, r4
    1e32:	bc3c      	pop	{r2, r3, r4, r5}
    1e34:	4690      	mov	r8, r2
    1e36:	4699      	mov	r9, r3
    1e38:	46a2      	mov	sl, r4
    1e3a:	46ab      	mov	fp, r5
    1e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e3e:	4bb7      	ldr	r3, [pc, #732]	; (211c <STACK_SIZE+0x11c>)
    1e40:	429c      	cmp	r4, r3
    1e42:	d0c6      	beq.n	1dd2 <__aeabi_dadd+0x52>
    1e44:	2380      	movs	r3, #128	; 0x80
    1e46:	041b      	lsls	r3, r3, #16
    1e48:	4318      	orrs	r0, r3
    1e4a:	2e38      	cmp	r6, #56	; 0x38
    1e4c:	dd00      	ble.n	1e50 <__aeabi_dadd+0xd0>
    1e4e:	e0eb      	b.n	2028 <STACK_SIZE+0x28>
    1e50:	2e1f      	cmp	r6, #31
    1e52:	dd00      	ble.n	1e56 <__aeabi_dadd+0xd6>
    1e54:	e11e      	b.n	2094 <STACK_SIZE+0x94>
    1e56:	2320      	movs	r3, #32
    1e58:	1b9b      	subs	r3, r3, r6
    1e5a:	469c      	mov	ip, r3
    1e5c:	0003      	movs	r3, r0
    1e5e:	4667      	mov	r7, ip
    1e60:	40bb      	lsls	r3, r7
    1e62:	4698      	mov	r8, r3
    1e64:	0013      	movs	r3, r2
    1e66:	4647      	mov	r7, r8
    1e68:	40f3      	lsrs	r3, r6
    1e6a:	433b      	orrs	r3, r7
    1e6c:	4667      	mov	r7, ip
    1e6e:	40ba      	lsls	r2, r7
    1e70:	1e57      	subs	r7, r2, #1
    1e72:	41ba      	sbcs	r2, r7
    1e74:	4313      	orrs	r3, r2
    1e76:	0002      	movs	r2, r0
    1e78:	40f2      	lsrs	r2, r6
    1e7a:	1aeb      	subs	r3, r5, r3
    1e7c:	429d      	cmp	r5, r3
    1e7e:	41b6      	sbcs	r6, r6
    1e80:	001d      	movs	r5, r3
    1e82:	1a8a      	subs	r2, r1, r2
    1e84:	4276      	negs	r6, r6
    1e86:	1b91      	subs	r1, r2, r6
    1e88:	020b      	lsls	r3, r1, #8
    1e8a:	d531      	bpl.n	1ef0 <__aeabi_dadd+0x170>
    1e8c:	024a      	lsls	r2, r1, #9
    1e8e:	0a56      	lsrs	r6, r2, #9
    1e90:	2e00      	cmp	r6, #0
    1e92:	d100      	bne.n	1e96 <__aeabi_dadd+0x116>
    1e94:	e0b4      	b.n	2000 <STACK_SIZE>
    1e96:	0030      	movs	r0, r6
    1e98:	f001 fb0a 	bl	34b0 <__clzsi2>
    1e9c:	0003      	movs	r3, r0
    1e9e:	3b08      	subs	r3, #8
    1ea0:	2b1f      	cmp	r3, #31
    1ea2:	dd00      	ble.n	1ea6 <__aeabi_dadd+0x126>
    1ea4:	e0b5      	b.n	2012 <STACK_SIZE+0x12>
    1ea6:	2220      	movs	r2, #32
    1ea8:	0029      	movs	r1, r5
    1eaa:	1ad2      	subs	r2, r2, r3
    1eac:	40d1      	lsrs	r1, r2
    1eae:	409e      	lsls	r6, r3
    1eb0:	000a      	movs	r2, r1
    1eb2:	409d      	lsls	r5, r3
    1eb4:	4332      	orrs	r2, r6
    1eb6:	429c      	cmp	r4, r3
    1eb8:	dd00      	ble.n	1ebc <__aeabi_dadd+0x13c>
    1eba:	e0b1      	b.n	2020 <STACK_SIZE+0x20>
    1ebc:	1b1c      	subs	r4, r3, r4
    1ebe:	1c63      	adds	r3, r4, #1
    1ec0:	2b1f      	cmp	r3, #31
    1ec2:	dd00      	ble.n	1ec6 <__aeabi_dadd+0x146>
    1ec4:	e0d5      	b.n	2072 <STACK_SIZE+0x72>
    1ec6:	2120      	movs	r1, #32
    1ec8:	0014      	movs	r4, r2
    1eca:	0028      	movs	r0, r5
    1ecc:	1ac9      	subs	r1, r1, r3
    1ece:	408c      	lsls	r4, r1
    1ed0:	40d8      	lsrs	r0, r3
    1ed2:	408d      	lsls	r5, r1
    1ed4:	4304      	orrs	r4, r0
    1ed6:	40da      	lsrs	r2, r3
    1ed8:	1e68      	subs	r0, r5, #1
    1eda:	4185      	sbcs	r5, r0
    1edc:	0011      	movs	r1, r2
    1ede:	4325      	orrs	r5, r4
    1ee0:	2400      	movs	r4, #0
    1ee2:	e776      	b.n	1dd2 <__aeabi_dadd+0x52>
    1ee4:	4641      	mov	r1, r8
    1ee6:	4331      	orrs	r1, r6
    1ee8:	d100      	bne.n	1eec <__aeabi_dadd+0x16c>
    1eea:	e234      	b.n	2356 <STACK_SIZE+0x356>
    1eec:	0031      	movs	r1, r6
    1eee:	4645      	mov	r5, r8
    1ef0:	076b      	lsls	r3, r5, #29
    1ef2:	d000      	beq.n	1ef6 <__aeabi_dadd+0x176>
    1ef4:	e76f      	b.n	1dd6 <__aeabi_dadd+0x56>
    1ef6:	4656      	mov	r6, sl
    1ef8:	0748      	lsls	r0, r1, #29
    1efa:	08ed      	lsrs	r5, r5, #3
    1efc:	08c9      	lsrs	r1, r1, #3
    1efe:	4305      	orrs	r5, r0
    1f00:	4b86      	ldr	r3, [pc, #536]	; (211c <STACK_SIZE+0x11c>)
    1f02:	429c      	cmp	r4, r3
    1f04:	d035      	beq.n	1f72 <__aeabi_dadd+0x1f2>
    1f06:	030a      	lsls	r2, r1, #12
    1f08:	0564      	lsls	r4, r4, #21
    1f0a:	0b12      	lsrs	r2, r2, #12
    1f0c:	0d64      	lsrs	r4, r4, #21
    1f0e:	e77f      	b.n	1e10 <__aeabi_dadd+0x90>
    1f10:	4663      	mov	r3, ip
    1f12:	1ae3      	subs	r3, r4, r3
    1f14:	469b      	mov	fp, r3
    1f16:	2b00      	cmp	r3, #0
    1f18:	dc00      	bgt.n	1f1c <__aeabi_dadd+0x19c>
    1f1a:	e08b      	b.n	2034 <STACK_SIZE+0x34>
    1f1c:	4667      	mov	r7, ip
    1f1e:	2f00      	cmp	r7, #0
    1f20:	d03c      	beq.n	1f9c <__aeabi_dadd+0x21c>
    1f22:	4f7e      	ldr	r7, [pc, #504]	; (211c <STACK_SIZE+0x11c>)
    1f24:	42bc      	cmp	r4, r7
    1f26:	d100      	bne.n	1f2a <__aeabi_dadd+0x1aa>
    1f28:	e753      	b.n	1dd2 <__aeabi_dadd+0x52>
    1f2a:	2780      	movs	r7, #128	; 0x80
    1f2c:	043f      	lsls	r7, r7, #16
    1f2e:	4338      	orrs	r0, r7
    1f30:	465b      	mov	r3, fp
    1f32:	2b38      	cmp	r3, #56	; 0x38
    1f34:	dc00      	bgt.n	1f38 <__aeabi_dadd+0x1b8>
    1f36:	e0f7      	b.n	2128 <STACK_SIZE+0x128>
    1f38:	4302      	orrs	r2, r0
    1f3a:	1e50      	subs	r0, r2, #1
    1f3c:	4182      	sbcs	r2, r0
    1f3e:	2000      	movs	r0, #0
    1f40:	b2d2      	uxtb	r2, r2
    1f42:	1953      	adds	r3, r2, r5
    1f44:	1842      	adds	r2, r0, r1
    1f46:	42ab      	cmp	r3, r5
    1f48:	4189      	sbcs	r1, r1
    1f4a:	001d      	movs	r5, r3
    1f4c:	4249      	negs	r1, r1
    1f4e:	1889      	adds	r1, r1, r2
    1f50:	020b      	lsls	r3, r1, #8
    1f52:	d5cd      	bpl.n	1ef0 <__aeabi_dadd+0x170>
    1f54:	4b71      	ldr	r3, [pc, #452]	; (211c <STACK_SIZE+0x11c>)
    1f56:	3401      	adds	r4, #1
    1f58:	429c      	cmp	r4, r3
    1f5a:	d100      	bne.n	1f5e <__aeabi_dadd+0x1de>
    1f5c:	e13d      	b.n	21da <STACK_SIZE+0x1da>
    1f5e:	2001      	movs	r0, #1
    1f60:	4a6f      	ldr	r2, [pc, #444]	; (2120 <STACK_SIZE+0x120>)
    1f62:	086b      	lsrs	r3, r5, #1
    1f64:	400a      	ands	r2, r1
    1f66:	4028      	ands	r0, r5
    1f68:	4318      	orrs	r0, r3
    1f6a:	07d5      	lsls	r5, r2, #31
    1f6c:	4305      	orrs	r5, r0
    1f6e:	0851      	lsrs	r1, r2, #1
    1f70:	e72f      	b.n	1dd2 <__aeabi_dadd+0x52>
    1f72:	002b      	movs	r3, r5
    1f74:	430b      	orrs	r3, r1
    1f76:	d100      	bne.n	1f7a <__aeabi_dadd+0x1fa>
    1f78:	e1cb      	b.n	2312 <STACK_SIZE+0x312>
    1f7a:	2380      	movs	r3, #128	; 0x80
    1f7c:	031b      	lsls	r3, r3, #12
    1f7e:	430b      	orrs	r3, r1
    1f80:	031a      	lsls	r2, r3, #12
    1f82:	0b12      	lsrs	r2, r2, #12
    1f84:	e744      	b.n	1e10 <__aeabi_dadd+0x90>
    1f86:	3e01      	subs	r6, #1
    1f88:	2e00      	cmp	r6, #0
    1f8a:	d16d      	bne.n	2068 <STACK_SIZE+0x68>
    1f8c:	1aae      	subs	r6, r5, r2
    1f8e:	42b5      	cmp	r5, r6
    1f90:	419b      	sbcs	r3, r3
    1f92:	1a09      	subs	r1, r1, r0
    1f94:	425b      	negs	r3, r3
    1f96:	1ac9      	subs	r1, r1, r3
    1f98:	0035      	movs	r5, r6
    1f9a:	e775      	b.n	1e88 <__aeabi_dadd+0x108>
    1f9c:	0007      	movs	r7, r0
    1f9e:	4317      	orrs	r7, r2
    1fa0:	d100      	bne.n	1fa4 <__aeabi_dadd+0x224>
    1fa2:	e716      	b.n	1dd2 <__aeabi_dadd+0x52>
    1fa4:	2301      	movs	r3, #1
    1fa6:	425b      	negs	r3, r3
    1fa8:	469c      	mov	ip, r3
    1faa:	44e3      	add	fp, ip
    1fac:	465b      	mov	r3, fp
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d000      	beq.n	1fb4 <__aeabi_dadd+0x234>
    1fb2:	e0e0      	b.n	2176 <STACK_SIZE+0x176>
    1fb4:	18aa      	adds	r2, r5, r2
    1fb6:	42aa      	cmp	r2, r5
    1fb8:	419b      	sbcs	r3, r3
    1fba:	1809      	adds	r1, r1, r0
    1fbc:	425b      	negs	r3, r3
    1fbe:	1859      	adds	r1, r3, r1
    1fc0:	0015      	movs	r5, r2
    1fc2:	e7c5      	b.n	1f50 <__aeabi_dadd+0x1d0>
    1fc4:	2e00      	cmp	r6, #0
    1fc6:	d175      	bne.n	20b4 <STACK_SIZE+0xb4>
    1fc8:	1c66      	adds	r6, r4, #1
    1fca:	0576      	lsls	r6, r6, #21
    1fcc:	0d76      	lsrs	r6, r6, #21
    1fce:	2e01      	cmp	r6, #1
    1fd0:	dc00      	bgt.n	1fd4 <__aeabi_dadd+0x254>
    1fd2:	e0f3      	b.n	21bc <STACK_SIZE+0x1bc>
    1fd4:	1aae      	subs	r6, r5, r2
    1fd6:	46b0      	mov	r8, r6
    1fd8:	4545      	cmp	r5, r8
    1fda:	41bf      	sbcs	r7, r7
    1fdc:	1a0e      	subs	r6, r1, r0
    1fde:	427f      	negs	r7, r7
    1fe0:	1bf6      	subs	r6, r6, r7
    1fe2:	0237      	lsls	r7, r6, #8
    1fe4:	d400      	bmi.n	1fe8 <__aeabi_dadd+0x268>
    1fe6:	e08f      	b.n	2108 <STACK_SIZE+0x108>
    1fe8:	1b55      	subs	r5, r2, r5
    1fea:	42aa      	cmp	r2, r5
    1fec:	41b6      	sbcs	r6, r6
    1fee:	1a41      	subs	r1, r0, r1
    1ff0:	4276      	negs	r6, r6
    1ff2:	1b8e      	subs	r6, r1, r6
    1ff4:	469a      	mov	sl, r3
    1ff6:	e74b      	b.n	1e90 <__aeabi_dadd+0x110>
    1ff8:	4656      	mov	r6, sl
    1ffa:	2200      	movs	r2, #0
    1ffc:	2500      	movs	r5, #0
    1ffe:	e707      	b.n	1e10 <__aeabi_dadd+0x90>
    2000:	0028      	movs	r0, r5
    2002:	f001 fa55 	bl	34b0 <__clzsi2>
    2006:	3020      	adds	r0, #32
    2008:	0003      	movs	r3, r0
    200a:	3b08      	subs	r3, #8
    200c:	2b1f      	cmp	r3, #31
    200e:	dc00      	bgt.n	2012 <STACK_SIZE+0x12>
    2010:	e749      	b.n	1ea6 <__aeabi_dadd+0x126>
    2012:	002a      	movs	r2, r5
    2014:	3828      	subs	r0, #40	; 0x28
    2016:	4082      	lsls	r2, r0
    2018:	2500      	movs	r5, #0
    201a:	429c      	cmp	r4, r3
    201c:	dc00      	bgt.n	2020 <STACK_SIZE+0x20>
    201e:	e74d      	b.n	1ebc <__aeabi_dadd+0x13c>
    2020:	493f      	ldr	r1, [pc, #252]	; (2120 <STACK_SIZE+0x120>)
    2022:	1ae4      	subs	r4, r4, r3
    2024:	4011      	ands	r1, r2
    2026:	e6d4      	b.n	1dd2 <__aeabi_dadd+0x52>
    2028:	4302      	orrs	r2, r0
    202a:	1e50      	subs	r0, r2, #1
    202c:	4182      	sbcs	r2, r0
    202e:	b2d3      	uxtb	r3, r2
    2030:	2200      	movs	r2, #0
    2032:	e722      	b.n	1e7a <__aeabi_dadd+0xfa>
    2034:	2b00      	cmp	r3, #0
    2036:	d000      	beq.n	203a <STACK_SIZE+0x3a>
    2038:	e0f3      	b.n	2222 <STACK_SIZE+0x222>
    203a:	1c63      	adds	r3, r4, #1
    203c:	469c      	mov	ip, r3
    203e:	055b      	lsls	r3, r3, #21
    2040:	0d5b      	lsrs	r3, r3, #21
    2042:	2b01      	cmp	r3, #1
    2044:	dc00      	bgt.n	2048 <STACK_SIZE+0x48>
    2046:	e09f      	b.n	2188 <STACK_SIZE+0x188>
    2048:	4b34      	ldr	r3, [pc, #208]	; (211c <STACK_SIZE+0x11c>)
    204a:	459c      	cmp	ip, r3
    204c:	d100      	bne.n	2050 <STACK_SIZE+0x50>
    204e:	e0c3      	b.n	21d8 <STACK_SIZE+0x1d8>
    2050:	18aa      	adds	r2, r5, r2
    2052:	1809      	adds	r1, r1, r0
    2054:	42aa      	cmp	r2, r5
    2056:	4180      	sbcs	r0, r0
    2058:	4240      	negs	r0, r0
    205a:	1841      	adds	r1, r0, r1
    205c:	07cd      	lsls	r5, r1, #31
    205e:	0852      	lsrs	r2, r2, #1
    2060:	4315      	orrs	r5, r2
    2062:	0849      	lsrs	r1, r1, #1
    2064:	4664      	mov	r4, ip
    2066:	e6b4      	b.n	1dd2 <__aeabi_dadd+0x52>
    2068:	4b2c      	ldr	r3, [pc, #176]	; (211c <STACK_SIZE+0x11c>)
    206a:	429c      	cmp	r4, r3
    206c:	d000      	beq.n	2070 <STACK_SIZE+0x70>
    206e:	e6ec      	b.n	1e4a <__aeabi_dadd+0xca>
    2070:	e6af      	b.n	1dd2 <__aeabi_dadd+0x52>
    2072:	0011      	movs	r1, r2
    2074:	3c1f      	subs	r4, #31
    2076:	40e1      	lsrs	r1, r4
    2078:	000c      	movs	r4, r1
    207a:	2b20      	cmp	r3, #32
    207c:	d100      	bne.n	2080 <STACK_SIZE+0x80>
    207e:	e07f      	b.n	2180 <STACK_SIZE+0x180>
    2080:	2140      	movs	r1, #64	; 0x40
    2082:	1acb      	subs	r3, r1, r3
    2084:	409a      	lsls	r2, r3
    2086:	4315      	orrs	r5, r2
    2088:	1e6a      	subs	r2, r5, #1
    208a:	4195      	sbcs	r5, r2
    208c:	2100      	movs	r1, #0
    208e:	4325      	orrs	r5, r4
    2090:	2400      	movs	r4, #0
    2092:	e72d      	b.n	1ef0 <__aeabi_dadd+0x170>
    2094:	0033      	movs	r3, r6
    2096:	0007      	movs	r7, r0
    2098:	3b20      	subs	r3, #32
    209a:	40df      	lsrs	r7, r3
    209c:	003b      	movs	r3, r7
    209e:	2e20      	cmp	r6, #32
    20a0:	d070      	beq.n	2184 <STACK_SIZE+0x184>
    20a2:	2740      	movs	r7, #64	; 0x40
    20a4:	1bbe      	subs	r6, r7, r6
    20a6:	40b0      	lsls	r0, r6
    20a8:	4302      	orrs	r2, r0
    20aa:	1e50      	subs	r0, r2, #1
    20ac:	4182      	sbcs	r2, r0
    20ae:	4313      	orrs	r3, r2
    20b0:	2200      	movs	r2, #0
    20b2:	e6e2      	b.n	1e7a <__aeabi_dadd+0xfa>
    20b4:	2c00      	cmp	r4, #0
    20b6:	d04f      	beq.n	2158 <STACK_SIZE+0x158>
    20b8:	4c18      	ldr	r4, [pc, #96]	; (211c <STACK_SIZE+0x11c>)
    20ba:	45a4      	cmp	ip, r4
    20bc:	d100      	bne.n	20c0 <STACK_SIZE+0xc0>
    20be:	e0ab      	b.n	2218 <STACK_SIZE+0x218>
    20c0:	2480      	movs	r4, #128	; 0x80
    20c2:	0424      	lsls	r4, r4, #16
    20c4:	4276      	negs	r6, r6
    20c6:	4321      	orrs	r1, r4
    20c8:	2e38      	cmp	r6, #56	; 0x38
    20ca:	dd00      	ble.n	20ce <STACK_SIZE+0xce>
    20cc:	e0df      	b.n	228e <STACK_SIZE+0x28e>
    20ce:	2e1f      	cmp	r6, #31
    20d0:	dd00      	ble.n	20d4 <STACK_SIZE+0xd4>
    20d2:	e143      	b.n	235c <STACK_SIZE+0x35c>
    20d4:	2720      	movs	r7, #32
    20d6:	1bbc      	subs	r4, r7, r6
    20d8:	46a1      	mov	r9, r4
    20da:	000c      	movs	r4, r1
    20dc:	464f      	mov	r7, r9
    20de:	40bc      	lsls	r4, r7
    20e0:	46a0      	mov	r8, r4
    20e2:	002c      	movs	r4, r5
    20e4:	4647      	mov	r7, r8
    20e6:	40f4      	lsrs	r4, r6
    20e8:	433c      	orrs	r4, r7
    20ea:	464f      	mov	r7, r9
    20ec:	40bd      	lsls	r5, r7
    20ee:	1e6f      	subs	r7, r5, #1
    20f0:	41bd      	sbcs	r5, r7
    20f2:	40f1      	lsrs	r1, r6
    20f4:	432c      	orrs	r4, r5
    20f6:	1b15      	subs	r5, r2, r4
    20f8:	42aa      	cmp	r2, r5
    20fa:	4192      	sbcs	r2, r2
    20fc:	1a41      	subs	r1, r0, r1
    20fe:	4252      	negs	r2, r2
    2100:	1a89      	subs	r1, r1, r2
    2102:	4664      	mov	r4, ip
    2104:	469a      	mov	sl, r3
    2106:	e6bf      	b.n	1e88 <__aeabi_dadd+0x108>
    2108:	4641      	mov	r1, r8
    210a:	4645      	mov	r5, r8
    210c:	4331      	orrs	r1, r6
    210e:	d000      	beq.n	2112 <STACK_SIZE+0x112>
    2110:	e6be      	b.n	1e90 <__aeabi_dadd+0x110>
    2112:	2600      	movs	r6, #0
    2114:	2400      	movs	r4, #0
    2116:	2500      	movs	r5, #0
    2118:	e6f2      	b.n	1f00 <__aeabi_dadd+0x180>
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	000007ff 	.word	0x000007ff
    2120:	ff7fffff 	.word	0xff7fffff
    2124:	800fffff 	.word	0x800fffff
    2128:	2b1f      	cmp	r3, #31
    212a:	dc59      	bgt.n	21e0 <STACK_SIZE+0x1e0>
    212c:	2720      	movs	r7, #32
    212e:	1aff      	subs	r7, r7, r3
    2130:	46bc      	mov	ip, r7
    2132:	0007      	movs	r7, r0
    2134:	4663      	mov	r3, ip
    2136:	409f      	lsls	r7, r3
    2138:	465b      	mov	r3, fp
    213a:	46b9      	mov	r9, r7
    213c:	0017      	movs	r7, r2
    213e:	40df      	lsrs	r7, r3
    2140:	46b8      	mov	r8, r7
    2142:	464f      	mov	r7, r9
    2144:	4643      	mov	r3, r8
    2146:	431f      	orrs	r7, r3
    2148:	4663      	mov	r3, ip
    214a:	409a      	lsls	r2, r3
    214c:	1e53      	subs	r3, r2, #1
    214e:	419a      	sbcs	r2, r3
    2150:	465b      	mov	r3, fp
    2152:	433a      	orrs	r2, r7
    2154:	40d8      	lsrs	r0, r3
    2156:	e6f4      	b.n	1f42 <__aeabi_dadd+0x1c2>
    2158:	000c      	movs	r4, r1
    215a:	432c      	orrs	r4, r5
    215c:	d05c      	beq.n	2218 <STACK_SIZE+0x218>
    215e:	43f6      	mvns	r6, r6
    2160:	2e00      	cmp	r6, #0
    2162:	d155      	bne.n	2210 <STACK_SIZE+0x210>
    2164:	1b55      	subs	r5, r2, r5
    2166:	42aa      	cmp	r2, r5
    2168:	41a4      	sbcs	r4, r4
    216a:	1a41      	subs	r1, r0, r1
    216c:	4264      	negs	r4, r4
    216e:	1b09      	subs	r1, r1, r4
    2170:	469a      	mov	sl, r3
    2172:	4664      	mov	r4, ip
    2174:	e688      	b.n	1e88 <__aeabi_dadd+0x108>
    2176:	4f96      	ldr	r7, [pc, #600]	; (23d0 <STACK_SIZE+0x3d0>)
    2178:	42bc      	cmp	r4, r7
    217a:	d000      	beq.n	217e <STACK_SIZE+0x17e>
    217c:	e6d8      	b.n	1f30 <__aeabi_dadd+0x1b0>
    217e:	e628      	b.n	1dd2 <__aeabi_dadd+0x52>
    2180:	2200      	movs	r2, #0
    2182:	e780      	b.n	2086 <STACK_SIZE+0x86>
    2184:	2000      	movs	r0, #0
    2186:	e78f      	b.n	20a8 <STACK_SIZE+0xa8>
    2188:	000b      	movs	r3, r1
    218a:	432b      	orrs	r3, r5
    218c:	2c00      	cmp	r4, #0
    218e:	d000      	beq.n	2192 <STACK_SIZE+0x192>
    2190:	e0c2      	b.n	2318 <STACK_SIZE+0x318>
    2192:	2b00      	cmp	r3, #0
    2194:	d100      	bne.n	2198 <STACK_SIZE+0x198>
    2196:	e101      	b.n	239c <STACK_SIZE+0x39c>
    2198:	0003      	movs	r3, r0
    219a:	4313      	orrs	r3, r2
    219c:	d100      	bne.n	21a0 <STACK_SIZE+0x1a0>
    219e:	e618      	b.n	1dd2 <__aeabi_dadd+0x52>
    21a0:	18ab      	adds	r3, r5, r2
    21a2:	42ab      	cmp	r3, r5
    21a4:	41b6      	sbcs	r6, r6
    21a6:	1809      	adds	r1, r1, r0
    21a8:	4276      	negs	r6, r6
    21aa:	1871      	adds	r1, r6, r1
    21ac:	020a      	lsls	r2, r1, #8
    21ae:	d400      	bmi.n	21b2 <STACK_SIZE+0x1b2>
    21b0:	e109      	b.n	23c6 <STACK_SIZE+0x3c6>
    21b2:	4a88      	ldr	r2, [pc, #544]	; (23d4 <STACK_SIZE+0x3d4>)
    21b4:	001d      	movs	r5, r3
    21b6:	4011      	ands	r1, r2
    21b8:	4664      	mov	r4, ip
    21ba:	e60a      	b.n	1dd2 <__aeabi_dadd+0x52>
    21bc:	2c00      	cmp	r4, #0
    21be:	d15b      	bne.n	2278 <STACK_SIZE+0x278>
    21c0:	000e      	movs	r6, r1
    21c2:	432e      	orrs	r6, r5
    21c4:	d000      	beq.n	21c8 <STACK_SIZE+0x1c8>
    21c6:	e08a      	b.n	22de <STACK_SIZE+0x2de>
    21c8:	0001      	movs	r1, r0
    21ca:	4311      	orrs	r1, r2
    21cc:	d100      	bne.n	21d0 <STACK_SIZE+0x1d0>
    21ce:	e0c2      	b.n	2356 <STACK_SIZE+0x356>
    21d0:	0001      	movs	r1, r0
    21d2:	0015      	movs	r5, r2
    21d4:	469a      	mov	sl, r3
    21d6:	e5fc      	b.n	1dd2 <__aeabi_dadd+0x52>
    21d8:	4664      	mov	r4, ip
    21da:	2100      	movs	r1, #0
    21dc:	2500      	movs	r5, #0
    21de:	e68f      	b.n	1f00 <__aeabi_dadd+0x180>
    21e0:	2320      	movs	r3, #32
    21e2:	425b      	negs	r3, r3
    21e4:	469c      	mov	ip, r3
    21e6:	44dc      	add	ip, fp
    21e8:	4663      	mov	r3, ip
    21ea:	0007      	movs	r7, r0
    21ec:	40df      	lsrs	r7, r3
    21ee:	465b      	mov	r3, fp
    21f0:	46bc      	mov	ip, r7
    21f2:	2b20      	cmp	r3, #32
    21f4:	d100      	bne.n	21f8 <STACK_SIZE+0x1f8>
    21f6:	e0ac      	b.n	2352 <STACK_SIZE+0x352>
    21f8:	2340      	movs	r3, #64	; 0x40
    21fa:	465f      	mov	r7, fp
    21fc:	1bdb      	subs	r3, r3, r7
    21fe:	4098      	lsls	r0, r3
    2200:	4302      	orrs	r2, r0
    2202:	1e50      	subs	r0, r2, #1
    2204:	4182      	sbcs	r2, r0
    2206:	4663      	mov	r3, ip
    2208:	4313      	orrs	r3, r2
    220a:	001a      	movs	r2, r3
    220c:	2000      	movs	r0, #0
    220e:	e698      	b.n	1f42 <__aeabi_dadd+0x1c2>
    2210:	4c6f      	ldr	r4, [pc, #444]	; (23d0 <STACK_SIZE+0x3d0>)
    2212:	45a4      	cmp	ip, r4
    2214:	d000      	beq.n	2218 <STACK_SIZE+0x218>
    2216:	e757      	b.n	20c8 <STACK_SIZE+0xc8>
    2218:	0001      	movs	r1, r0
    221a:	0015      	movs	r5, r2
    221c:	4664      	mov	r4, ip
    221e:	469a      	mov	sl, r3
    2220:	e5d7      	b.n	1dd2 <__aeabi_dadd+0x52>
    2222:	2c00      	cmp	r4, #0
    2224:	d139      	bne.n	229a <STACK_SIZE+0x29a>
    2226:	000c      	movs	r4, r1
    2228:	432c      	orrs	r4, r5
    222a:	d06e      	beq.n	230a <STACK_SIZE+0x30a>
    222c:	43db      	mvns	r3, r3
    222e:	2b00      	cmp	r3, #0
    2230:	d01a      	beq.n	2268 <STACK_SIZE+0x268>
    2232:	4c67      	ldr	r4, [pc, #412]	; (23d0 <STACK_SIZE+0x3d0>)
    2234:	45a4      	cmp	ip, r4
    2236:	d068      	beq.n	230a <STACK_SIZE+0x30a>
    2238:	2b38      	cmp	r3, #56	; 0x38
    223a:	dd00      	ble.n	223e <STACK_SIZE+0x23e>
    223c:	e0a4      	b.n	2388 <STACK_SIZE+0x388>
    223e:	2b1f      	cmp	r3, #31
    2240:	dd00      	ble.n	2244 <STACK_SIZE+0x244>
    2242:	e0ae      	b.n	23a2 <STACK_SIZE+0x3a2>
    2244:	2420      	movs	r4, #32
    2246:	000f      	movs	r7, r1
    2248:	1ae4      	subs	r4, r4, r3
    224a:	40a7      	lsls	r7, r4
    224c:	46b9      	mov	r9, r7
    224e:	002f      	movs	r7, r5
    2250:	40df      	lsrs	r7, r3
    2252:	46b8      	mov	r8, r7
    2254:	46a3      	mov	fp, r4
    2256:	464f      	mov	r7, r9
    2258:	4644      	mov	r4, r8
    225a:	4327      	orrs	r7, r4
    225c:	465c      	mov	r4, fp
    225e:	40a5      	lsls	r5, r4
    2260:	1e6c      	subs	r4, r5, #1
    2262:	41a5      	sbcs	r5, r4
    2264:	40d9      	lsrs	r1, r3
    2266:	433d      	orrs	r5, r7
    2268:	18ad      	adds	r5, r5, r2
    226a:	4295      	cmp	r5, r2
    226c:	419b      	sbcs	r3, r3
    226e:	1809      	adds	r1, r1, r0
    2270:	425b      	negs	r3, r3
    2272:	1859      	adds	r1, r3, r1
    2274:	4664      	mov	r4, ip
    2276:	e66b      	b.n	1f50 <__aeabi_dadd+0x1d0>
    2278:	000c      	movs	r4, r1
    227a:	432c      	orrs	r4, r5
    227c:	d115      	bne.n	22aa <STACK_SIZE+0x2aa>
    227e:	0001      	movs	r1, r0
    2280:	4311      	orrs	r1, r2
    2282:	d07b      	beq.n	237c <STACK_SIZE+0x37c>
    2284:	0001      	movs	r1, r0
    2286:	0015      	movs	r5, r2
    2288:	469a      	mov	sl, r3
    228a:	4c51      	ldr	r4, [pc, #324]	; (23d0 <STACK_SIZE+0x3d0>)
    228c:	e5a1      	b.n	1dd2 <__aeabi_dadd+0x52>
    228e:	430d      	orrs	r5, r1
    2290:	1e69      	subs	r1, r5, #1
    2292:	418d      	sbcs	r5, r1
    2294:	2100      	movs	r1, #0
    2296:	b2ec      	uxtb	r4, r5
    2298:	e72d      	b.n	20f6 <STACK_SIZE+0xf6>
    229a:	4c4d      	ldr	r4, [pc, #308]	; (23d0 <STACK_SIZE+0x3d0>)
    229c:	45a4      	cmp	ip, r4
    229e:	d034      	beq.n	230a <STACK_SIZE+0x30a>
    22a0:	2480      	movs	r4, #128	; 0x80
    22a2:	0424      	lsls	r4, r4, #16
    22a4:	425b      	negs	r3, r3
    22a6:	4321      	orrs	r1, r4
    22a8:	e7c6      	b.n	2238 <STACK_SIZE+0x238>
    22aa:	0004      	movs	r4, r0
    22ac:	4314      	orrs	r4, r2
    22ae:	d04e      	beq.n	234e <STACK_SIZE+0x34e>
    22b0:	08ed      	lsrs	r5, r5, #3
    22b2:	074c      	lsls	r4, r1, #29
    22b4:	432c      	orrs	r4, r5
    22b6:	2580      	movs	r5, #128	; 0x80
    22b8:	08c9      	lsrs	r1, r1, #3
    22ba:	032d      	lsls	r5, r5, #12
    22bc:	4229      	tst	r1, r5
    22be:	d008      	beq.n	22d2 <STACK_SIZE+0x2d2>
    22c0:	08c6      	lsrs	r6, r0, #3
    22c2:	422e      	tst	r6, r5
    22c4:	d105      	bne.n	22d2 <STACK_SIZE+0x2d2>
    22c6:	08d2      	lsrs	r2, r2, #3
    22c8:	0741      	lsls	r1, r0, #29
    22ca:	4311      	orrs	r1, r2
    22cc:	000c      	movs	r4, r1
    22ce:	469a      	mov	sl, r3
    22d0:	0031      	movs	r1, r6
    22d2:	0f62      	lsrs	r2, r4, #29
    22d4:	00c9      	lsls	r1, r1, #3
    22d6:	00e5      	lsls	r5, r4, #3
    22d8:	4311      	orrs	r1, r2
    22da:	4c3d      	ldr	r4, [pc, #244]	; (23d0 <STACK_SIZE+0x3d0>)
    22dc:	e579      	b.n	1dd2 <__aeabi_dadd+0x52>
    22de:	0006      	movs	r6, r0
    22e0:	4316      	orrs	r6, r2
    22e2:	d100      	bne.n	22e6 <STACK_SIZE+0x2e6>
    22e4:	e575      	b.n	1dd2 <__aeabi_dadd+0x52>
    22e6:	1aae      	subs	r6, r5, r2
    22e8:	46b0      	mov	r8, r6
    22ea:	4545      	cmp	r5, r8
    22ec:	41bf      	sbcs	r7, r7
    22ee:	1a0e      	subs	r6, r1, r0
    22f0:	427f      	negs	r7, r7
    22f2:	1bf6      	subs	r6, r6, r7
    22f4:	0237      	lsls	r7, r6, #8
    22f6:	d400      	bmi.n	22fa <STACK_SIZE+0x2fa>
    22f8:	e5f4      	b.n	1ee4 <__aeabi_dadd+0x164>
    22fa:	1b55      	subs	r5, r2, r5
    22fc:	42aa      	cmp	r2, r5
    22fe:	41b6      	sbcs	r6, r6
    2300:	1a41      	subs	r1, r0, r1
    2302:	4276      	negs	r6, r6
    2304:	1b89      	subs	r1, r1, r6
    2306:	469a      	mov	sl, r3
    2308:	e563      	b.n	1dd2 <__aeabi_dadd+0x52>
    230a:	0001      	movs	r1, r0
    230c:	0015      	movs	r5, r2
    230e:	4664      	mov	r4, ip
    2310:	e55f      	b.n	1dd2 <__aeabi_dadd+0x52>
    2312:	2200      	movs	r2, #0
    2314:	2500      	movs	r5, #0
    2316:	e57b      	b.n	1e10 <__aeabi_dadd+0x90>
    2318:	2b00      	cmp	r3, #0
    231a:	d03b      	beq.n	2394 <STACK_SIZE+0x394>
    231c:	0003      	movs	r3, r0
    231e:	4313      	orrs	r3, r2
    2320:	d015      	beq.n	234e <STACK_SIZE+0x34e>
    2322:	08ed      	lsrs	r5, r5, #3
    2324:	074b      	lsls	r3, r1, #29
    2326:	432b      	orrs	r3, r5
    2328:	2580      	movs	r5, #128	; 0x80
    232a:	08c9      	lsrs	r1, r1, #3
    232c:	032d      	lsls	r5, r5, #12
    232e:	4229      	tst	r1, r5
    2330:	d007      	beq.n	2342 <STACK_SIZE+0x342>
    2332:	08c4      	lsrs	r4, r0, #3
    2334:	422c      	tst	r4, r5
    2336:	d104      	bne.n	2342 <STACK_SIZE+0x342>
    2338:	0741      	lsls	r1, r0, #29
    233a:	000b      	movs	r3, r1
    233c:	0021      	movs	r1, r4
    233e:	08d2      	lsrs	r2, r2, #3
    2340:	4313      	orrs	r3, r2
    2342:	00c9      	lsls	r1, r1, #3
    2344:	0f5a      	lsrs	r2, r3, #29
    2346:	4311      	orrs	r1, r2
    2348:	00dd      	lsls	r5, r3, #3
    234a:	4c21      	ldr	r4, [pc, #132]	; (23d0 <STACK_SIZE+0x3d0>)
    234c:	e541      	b.n	1dd2 <__aeabi_dadd+0x52>
    234e:	4c20      	ldr	r4, [pc, #128]	; (23d0 <STACK_SIZE+0x3d0>)
    2350:	e53f      	b.n	1dd2 <__aeabi_dadd+0x52>
    2352:	2000      	movs	r0, #0
    2354:	e754      	b.n	2200 <STACK_SIZE+0x200>
    2356:	2600      	movs	r6, #0
    2358:	2500      	movs	r5, #0
    235a:	e5d1      	b.n	1f00 <__aeabi_dadd+0x180>
    235c:	0034      	movs	r4, r6
    235e:	000f      	movs	r7, r1
    2360:	3c20      	subs	r4, #32
    2362:	40e7      	lsrs	r7, r4
    2364:	003c      	movs	r4, r7
    2366:	2e20      	cmp	r6, #32
    2368:	d02b      	beq.n	23c2 <STACK_SIZE+0x3c2>
    236a:	2740      	movs	r7, #64	; 0x40
    236c:	1bbe      	subs	r6, r7, r6
    236e:	40b1      	lsls	r1, r6
    2370:	430d      	orrs	r5, r1
    2372:	1e69      	subs	r1, r5, #1
    2374:	418d      	sbcs	r5, r1
    2376:	2100      	movs	r1, #0
    2378:	432c      	orrs	r4, r5
    237a:	e6bc      	b.n	20f6 <STACK_SIZE+0xf6>
    237c:	2180      	movs	r1, #128	; 0x80
    237e:	2600      	movs	r6, #0
    2380:	0309      	lsls	r1, r1, #12
    2382:	4c13      	ldr	r4, [pc, #76]	; (23d0 <STACK_SIZE+0x3d0>)
    2384:	2500      	movs	r5, #0
    2386:	e5bb      	b.n	1f00 <__aeabi_dadd+0x180>
    2388:	430d      	orrs	r5, r1
    238a:	1e69      	subs	r1, r5, #1
    238c:	418d      	sbcs	r5, r1
    238e:	2100      	movs	r1, #0
    2390:	b2ed      	uxtb	r5, r5
    2392:	e769      	b.n	2268 <STACK_SIZE+0x268>
    2394:	0001      	movs	r1, r0
    2396:	0015      	movs	r5, r2
    2398:	4c0d      	ldr	r4, [pc, #52]	; (23d0 <STACK_SIZE+0x3d0>)
    239a:	e51a      	b.n	1dd2 <__aeabi_dadd+0x52>
    239c:	0001      	movs	r1, r0
    239e:	0015      	movs	r5, r2
    23a0:	e517      	b.n	1dd2 <__aeabi_dadd+0x52>
    23a2:	001c      	movs	r4, r3
    23a4:	000f      	movs	r7, r1
    23a6:	3c20      	subs	r4, #32
    23a8:	40e7      	lsrs	r7, r4
    23aa:	003c      	movs	r4, r7
    23ac:	2b20      	cmp	r3, #32
    23ae:	d00c      	beq.n	23ca <STACK_SIZE+0x3ca>
    23b0:	2740      	movs	r7, #64	; 0x40
    23b2:	1afb      	subs	r3, r7, r3
    23b4:	4099      	lsls	r1, r3
    23b6:	430d      	orrs	r5, r1
    23b8:	1e69      	subs	r1, r5, #1
    23ba:	418d      	sbcs	r5, r1
    23bc:	2100      	movs	r1, #0
    23be:	4325      	orrs	r5, r4
    23c0:	e752      	b.n	2268 <STACK_SIZE+0x268>
    23c2:	2100      	movs	r1, #0
    23c4:	e7d4      	b.n	2370 <STACK_SIZE+0x370>
    23c6:	001d      	movs	r5, r3
    23c8:	e592      	b.n	1ef0 <__aeabi_dadd+0x170>
    23ca:	2100      	movs	r1, #0
    23cc:	e7f3      	b.n	23b6 <STACK_SIZE+0x3b6>
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	000007ff 	.word	0x000007ff
    23d4:	ff7fffff 	.word	0xff7fffff

000023d8 <__eqdf2>:
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23da:	465f      	mov	r7, fp
    23dc:	4656      	mov	r6, sl
    23de:	464d      	mov	r5, r9
    23e0:	4644      	mov	r4, r8
    23e2:	b4f0      	push	{r4, r5, r6, r7}
    23e4:	031f      	lsls	r7, r3, #12
    23e6:	005c      	lsls	r4, r3, #1
    23e8:	0fdb      	lsrs	r3, r3, #31
    23ea:	469a      	mov	sl, r3
    23ec:	4b19      	ldr	r3, [pc, #100]	; (2454 <__eqdf2+0x7c>)
    23ee:	030e      	lsls	r6, r1, #12
    23f0:	004d      	lsls	r5, r1, #1
    23f2:	0fc9      	lsrs	r1, r1, #31
    23f4:	4680      	mov	r8, r0
    23f6:	0b36      	lsrs	r6, r6, #12
    23f8:	0d6d      	lsrs	r5, r5, #21
    23fa:	468b      	mov	fp, r1
    23fc:	4691      	mov	r9, r2
    23fe:	0b3f      	lsrs	r7, r7, #12
    2400:	0d64      	lsrs	r4, r4, #21
    2402:	429d      	cmp	r5, r3
    2404:	d019      	beq.n	243a <__eqdf2+0x62>
    2406:	4b13      	ldr	r3, [pc, #76]	; (2454 <__eqdf2+0x7c>)
    2408:	429c      	cmp	r4, r3
    240a:	d01b      	beq.n	2444 <__eqdf2+0x6c>
    240c:	2301      	movs	r3, #1
    240e:	42a5      	cmp	r5, r4
    2410:	d006      	beq.n	2420 <__eqdf2+0x48>
    2412:	0018      	movs	r0, r3
    2414:	bc3c      	pop	{r2, r3, r4, r5}
    2416:	4690      	mov	r8, r2
    2418:	4699      	mov	r9, r3
    241a:	46a2      	mov	sl, r4
    241c:	46ab      	mov	fp, r5
    241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2420:	42be      	cmp	r6, r7
    2422:	d1f6      	bne.n	2412 <__eqdf2+0x3a>
    2424:	45c8      	cmp	r8, r9
    2426:	d1f4      	bne.n	2412 <__eqdf2+0x3a>
    2428:	45d3      	cmp	fp, sl
    242a:	d010      	beq.n	244e <__eqdf2+0x76>
    242c:	2d00      	cmp	r5, #0
    242e:	d1f0      	bne.n	2412 <__eqdf2+0x3a>
    2430:	4330      	orrs	r0, r6
    2432:	0003      	movs	r3, r0
    2434:	1e5a      	subs	r2, r3, #1
    2436:	4193      	sbcs	r3, r2
    2438:	e7eb      	b.n	2412 <__eqdf2+0x3a>
    243a:	0031      	movs	r1, r6
    243c:	2301      	movs	r3, #1
    243e:	4301      	orrs	r1, r0
    2440:	d1e7      	bne.n	2412 <__eqdf2+0x3a>
    2442:	e7e0      	b.n	2406 <__eqdf2+0x2e>
    2444:	433a      	orrs	r2, r7
    2446:	2301      	movs	r3, #1
    2448:	2a00      	cmp	r2, #0
    244a:	d1e2      	bne.n	2412 <__eqdf2+0x3a>
    244c:	e7de      	b.n	240c <__eqdf2+0x34>
    244e:	2300      	movs	r3, #0
    2450:	e7df      	b.n	2412 <__eqdf2+0x3a>
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	000007ff 	.word	0x000007ff

00002458 <__gedf2>:
    2458:	b5f0      	push	{r4, r5, r6, r7, lr}
    245a:	465f      	mov	r7, fp
    245c:	4644      	mov	r4, r8
    245e:	4656      	mov	r6, sl
    2460:	464d      	mov	r5, r9
    2462:	b4f0      	push	{r4, r5, r6, r7}
    2464:	031f      	lsls	r7, r3, #12
    2466:	0b3c      	lsrs	r4, r7, #12
    2468:	4f2c      	ldr	r7, [pc, #176]	; (251c <__gedf2+0xc4>)
    246a:	030e      	lsls	r6, r1, #12
    246c:	004d      	lsls	r5, r1, #1
    246e:	46a3      	mov	fp, r4
    2470:	005c      	lsls	r4, r3, #1
    2472:	4684      	mov	ip, r0
    2474:	0b36      	lsrs	r6, r6, #12
    2476:	0d6d      	lsrs	r5, r5, #21
    2478:	0fc9      	lsrs	r1, r1, #31
    247a:	4690      	mov	r8, r2
    247c:	0d64      	lsrs	r4, r4, #21
    247e:	0fdb      	lsrs	r3, r3, #31
    2480:	42bd      	cmp	r5, r7
    2482:	d02b      	beq.n	24dc <__gedf2+0x84>
    2484:	4f25      	ldr	r7, [pc, #148]	; (251c <__gedf2+0xc4>)
    2486:	42bc      	cmp	r4, r7
    2488:	d02e      	beq.n	24e8 <__gedf2+0x90>
    248a:	2d00      	cmp	r5, #0
    248c:	d10e      	bne.n	24ac <__gedf2+0x54>
    248e:	4330      	orrs	r0, r6
    2490:	0007      	movs	r7, r0
    2492:	4681      	mov	r9, r0
    2494:	4278      	negs	r0, r7
    2496:	4178      	adcs	r0, r7
    2498:	2c00      	cmp	r4, #0
    249a:	d117      	bne.n	24cc <__gedf2+0x74>
    249c:	465f      	mov	r7, fp
    249e:	433a      	orrs	r2, r7
    24a0:	d114      	bne.n	24cc <__gedf2+0x74>
    24a2:	464b      	mov	r3, r9
    24a4:	2000      	movs	r0, #0
    24a6:	2b00      	cmp	r3, #0
    24a8:	d00a      	beq.n	24c0 <__gedf2+0x68>
    24aa:	e006      	b.n	24ba <__gedf2+0x62>
    24ac:	2c00      	cmp	r4, #0
    24ae:	d102      	bne.n	24b6 <__gedf2+0x5e>
    24b0:	4658      	mov	r0, fp
    24b2:	4302      	orrs	r2, r0
    24b4:	d001      	beq.n	24ba <__gedf2+0x62>
    24b6:	4299      	cmp	r1, r3
    24b8:	d01a      	beq.n	24f0 <__gedf2+0x98>
    24ba:	2301      	movs	r3, #1
    24bc:	4248      	negs	r0, r1
    24be:	4318      	orrs	r0, r3
    24c0:	bc3c      	pop	{r2, r3, r4, r5}
    24c2:	4690      	mov	r8, r2
    24c4:	4699      	mov	r9, r3
    24c6:	46a2      	mov	sl, r4
    24c8:	46ab      	mov	fp, r5
    24ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24cc:	2800      	cmp	r0, #0
    24ce:	d0f2      	beq.n	24b6 <__gedf2+0x5e>
    24d0:	4258      	negs	r0, r3
    24d2:	4158      	adcs	r0, r3
    24d4:	2201      	movs	r2, #1
    24d6:	4240      	negs	r0, r0
    24d8:	4310      	orrs	r0, r2
    24da:	e7f1      	b.n	24c0 <__gedf2+0x68>
    24dc:	0037      	movs	r7, r6
    24de:	4307      	orrs	r7, r0
    24e0:	d0d0      	beq.n	2484 <__gedf2+0x2c>
    24e2:	2002      	movs	r0, #2
    24e4:	4240      	negs	r0, r0
    24e6:	e7eb      	b.n	24c0 <__gedf2+0x68>
    24e8:	465f      	mov	r7, fp
    24ea:	4317      	orrs	r7, r2
    24ec:	d0cd      	beq.n	248a <__gedf2+0x32>
    24ee:	e7f8      	b.n	24e2 <__gedf2+0x8a>
    24f0:	42a5      	cmp	r5, r4
    24f2:	dce2      	bgt.n	24ba <__gedf2+0x62>
    24f4:	db05      	blt.n	2502 <__gedf2+0xaa>
    24f6:	455e      	cmp	r6, fp
    24f8:	d8df      	bhi.n	24ba <__gedf2+0x62>
    24fa:	d008      	beq.n	250e <__gedf2+0xb6>
    24fc:	2000      	movs	r0, #0
    24fe:	455e      	cmp	r6, fp
    2500:	d2de      	bcs.n	24c0 <__gedf2+0x68>
    2502:	4248      	negs	r0, r1
    2504:	4148      	adcs	r0, r1
    2506:	2301      	movs	r3, #1
    2508:	4240      	negs	r0, r0
    250a:	4318      	orrs	r0, r3
    250c:	e7d8      	b.n	24c0 <__gedf2+0x68>
    250e:	45c4      	cmp	ip, r8
    2510:	d8d3      	bhi.n	24ba <__gedf2+0x62>
    2512:	2000      	movs	r0, #0
    2514:	45c4      	cmp	ip, r8
    2516:	d3f4      	bcc.n	2502 <__gedf2+0xaa>
    2518:	e7d2      	b.n	24c0 <__gedf2+0x68>
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	000007ff 	.word	0x000007ff

00002520 <__ledf2>:
    2520:	b5f0      	push	{r4, r5, r6, r7, lr}
    2522:	465f      	mov	r7, fp
    2524:	464d      	mov	r5, r9
    2526:	4644      	mov	r4, r8
    2528:	4656      	mov	r6, sl
    252a:	b4f0      	push	{r4, r5, r6, r7}
    252c:	031c      	lsls	r4, r3, #12
    252e:	0b24      	lsrs	r4, r4, #12
    2530:	46a4      	mov	ip, r4
    2532:	4c2f      	ldr	r4, [pc, #188]	; (25f0 <__ledf2+0xd0>)
    2534:	030f      	lsls	r7, r1, #12
    2536:	004d      	lsls	r5, r1, #1
    2538:	005e      	lsls	r6, r3, #1
    253a:	0fc9      	lsrs	r1, r1, #31
    253c:	4680      	mov	r8, r0
    253e:	0b3f      	lsrs	r7, r7, #12
    2540:	0d6d      	lsrs	r5, r5, #21
    2542:	468b      	mov	fp, r1
    2544:	4691      	mov	r9, r2
    2546:	0d76      	lsrs	r6, r6, #21
    2548:	0fdb      	lsrs	r3, r3, #31
    254a:	42a5      	cmp	r5, r4
    254c:	d020      	beq.n	2590 <__ledf2+0x70>
    254e:	4c28      	ldr	r4, [pc, #160]	; (25f0 <__ledf2+0xd0>)
    2550:	42a6      	cmp	r6, r4
    2552:	d022      	beq.n	259a <__ledf2+0x7a>
    2554:	2d00      	cmp	r5, #0
    2556:	d112      	bne.n	257e <__ledf2+0x5e>
    2558:	4338      	orrs	r0, r7
    255a:	4244      	negs	r4, r0
    255c:	4144      	adcs	r4, r0
    255e:	2e00      	cmp	r6, #0
    2560:	d020      	beq.n	25a4 <__ledf2+0x84>
    2562:	2c00      	cmp	r4, #0
    2564:	d00d      	beq.n	2582 <__ledf2+0x62>
    2566:	425c      	negs	r4, r3
    2568:	4163      	adcs	r3, r4
    256a:	2401      	movs	r4, #1
    256c:	425b      	negs	r3, r3
    256e:	431c      	orrs	r4, r3
    2570:	0020      	movs	r0, r4
    2572:	bc3c      	pop	{r2, r3, r4, r5}
    2574:	4690      	mov	r8, r2
    2576:	4699      	mov	r9, r3
    2578:	46a2      	mov	sl, r4
    257a:	46ab      	mov	fp, r5
    257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257e:	2e00      	cmp	r6, #0
    2580:	d017      	beq.n	25b2 <__ledf2+0x92>
    2582:	455b      	cmp	r3, fp
    2584:	d019      	beq.n	25ba <__ledf2+0x9a>
    2586:	465b      	mov	r3, fp
    2588:	425c      	negs	r4, r3
    258a:	2301      	movs	r3, #1
    258c:	431c      	orrs	r4, r3
    258e:	e7ef      	b.n	2570 <__ledf2+0x50>
    2590:	0039      	movs	r1, r7
    2592:	2402      	movs	r4, #2
    2594:	4301      	orrs	r1, r0
    2596:	d1eb      	bne.n	2570 <__ledf2+0x50>
    2598:	e7d9      	b.n	254e <__ledf2+0x2e>
    259a:	4661      	mov	r1, ip
    259c:	2402      	movs	r4, #2
    259e:	4311      	orrs	r1, r2
    25a0:	d1e6      	bne.n	2570 <__ledf2+0x50>
    25a2:	e7d7      	b.n	2554 <__ledf2+0x34>
    25a4:	4661      	mov	r1, ip
    25a6:	430a      	orrs	r2, r1
    25a8:	d1db      	bne.n	2562 <__ledf2+0x42>
    25aa:	2400      	movs	r4, #0
    25ac:	2800      	cmp	r0, #0
    25ae:	d0df      	beq.n	2570 <__ledf2+0x50>
    25b0:	e7e9      	b.n	2586 <__ledf2+0x66>
    25b2:	4661      	mov	r1, ip
    25b4:	430a      	orrs	r2, r1
    25b6:	d1e4      	bne.n	2582 <__ledf2+0x62>
    25b8:	e7e5      	b.n	2586 <__ledf2+0x66>
    25ba:	42b5      	cmp	r5, r6
    25bc:	dd03      	ble.n	25c6 <__ledf2+0xa6>
    25be:	2201      	movs	r2, #1
    25c0:	425c      	negs	r4, r3
    25c2:	4314      	orrs	r4, r2
    25c4:	e7d4      	b.n	2570 <__ledf2+0x50>
    25c6:	42b5      	cmp	r5, r6
    25c8:	dbcd      	blt.n	2566 <__ledf2+0x46>
    25ca:	4567      	cmp	r7, ip
    25cc:	d8db      	bhi.n	2586 <__ledf2+0x66>
    25ce:	d009      	beq.n	25e4 <__ledf2+0xc4>
    25d0:	2400      	movs	r4, #0
    25d2:	4567      	cmp	r7, ip
    25d4:	d2cc      	bcs.n	2570 <__ledf2+0x50>
    25d6:	4659      	mov	r1, fp
    25d8:	424c      	negs	r4, r1
    25da:	4161      	adcs	r1, r4
    25dc:	2401      	movs	r4, #1
    25de:	4249      	negs	r1, r1
    25e0:	430c      	orrs	r4, r1
    25e2:	e7c5      	b.n	2570 <__ledf2+0x50>
    25e4:	45c8      	cmp	r8, r9
    25e6:	d8ce      	bhi.n	2586 <__ledf2+0x66>
    25e8:	2400      	movs	r4, #0
    25ea:	45c8      	cmp	r8, r9
    25ec:	d3f3      	bcc.n	25d6 <__ledf2+0xb6>
    25ee:	e7bf      	b.n	2570 <__ledf2+0x50>
    25f0:	000007ff 	.word	0x000007ff

000025f4 <__aeabi_dmul>:
    25f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25f6:	465f      	mov	r7, fp
    25f8:	4656      	mov	r6, sl
    25fa:	464d      	mov	r5, r9
    25fc:	4644      	mov	r4, r8
    25fe:	b4f0      	push	{r4, r5, r6, r7}
    2600:	030d      	lsls	r5, r1, #12
    2602:	4699      	mov	r9, r3
    2604:	004e      	lsls	r6, r1, #1
    2606:	0b2b      	lsrs	r3, r5, #12
    2608:	b087      	sub	sp, #28
    260a:	0007      	movs	r7, r0
    260c:	4692      	mov	sl, r2
    260e:	4680      	mov	r8, r0
    2610:	469b      	mov	fp, r3
    2612:	0d76      	lsrs	r6, r6, #21
    2614:	0fcc      	lsrs	r4, r1, #31
    2616:	2e00      	cmp	r6, #0
    2618:	d069      	beq.n	26ee <__aeabi_dmul+0xfa>
    261a:	4b6d      	ldr	r3, [pc, #436]	; (27d0 <__aeabi_dmul+0x1dc>)
    261c:	429e      	cmp	r6, r3
    261e:	d035      	beq.n	268c <__aeabi_dmul+0x98>
    2620:	465b      	mov	r3, fp
    2622:	2280      	movs	r2, #128	; 0x80
    2624:	00dd      	lsls	r5, r3, #3
    2626:	0412      	lsls	r2, r2, #16
    2628:	0f43      	lsrs	r3, r0, #29
    262a:	4313      	orrs	r3, r2
    262c:	432b      	orrs	r3, r5
    262e:	469b      	mov	fp, r3
    2630:	00c3      	lsls	r3, r0, #3
    2632:	4698      	mov	r8, r3
    2634:	4b67      	ldr	r3, [pc, #412]	; (27d4 <__aeabi_dmul+0x1e0>)
    2636:	2700      	movs	r7, #0
    2638:	469c      	mov	ip, r3
    263a:	2300      	movs	r3, #0
    263c:	4466      	add	r6, ip
    263e:	9301      	str	r3, [sp, #4]
    2640:	464a      	mov	r2, r9
    2642:	0315      	lsls	r5, r2, #12
    2644:	0050      	lsls	r0, r2, #1
    2646:	0fd2      	lsrs	r2, r2, #31
    2648:	4653      	mov	r3, sl
    264a:	0b2d      	lsrs	r5, r5, #12
    264c:	0d40      	lsrs	r0, r0, #21
    264e:	4691      	mov	r9, r2
    2650:	d100      	bne.n	2654 <__aeabi_dmul+0x60>
    2652:	e076      	b.n	2742 <__aeabi_dmul+0x14e>
    2654:	4a5e      	ldr	r2, [pc, #376]	; (27d0 <__aeabi_dmul+0x1dc>)
    2656:	4290      	cmp	r0, r2
    2658:	d06c      	beq.n	2734 <__aeabi_dmul+0x140>
    265a:	2280      	movs	r2, #128	; 0x80
    265c:	0f5b      	lsrs	r3, r3, #29
    265e:	0412      	lsls	r2, r2, #16
    2660:	4313      	orrs	r3, r2
    2662:	4a5c      	ldr	r2, [pc, #368]	; (27d4 <__aeabi_dmul+0x1e0>)
    2664:	00ed      	lsls	r5, r5, #3
    2666:	4694      	mov	ip, r2
    2668:	431d      	orrs	r5, r3
    266a:	4653      	mov	r3, sl
    266c:	2200      	movs	r2, #0
    266e:	00db      	lsls	r3, r3, #3
    2670:	4460      	add	r0, ip
    2672:	4649      	mov	r1, r9
    2674:	1836      	adds	r6, r6, r0
    2676:	1c70      	adds	r0, r6, #1
    2678:	4061      	eors	r1, r4
    267a:	9002      	str	r0, [sp, #8]
    267c:	4317      	orrs	r7, r2
    267e:	2f0f      	cmp	r7, #15
    2680:	d900      	bls.n	2684 <__aeabi_dmul+0x90>
    2682:	e0af      	b.n	27e4 <__aeabi_dmul+0x1f0>
    2684:	4854      	ldr	r0, [pc, #336]	; (27d8 <__aeabi_dmul+0x1e4>)
    2686:	00bf      	lsls	r7, r7, #2
    2688:	59c7      	ldr	r7, [r0, r7]
    268a:	46bf      	mov	pc, r7
    268c:	465b      	mov	r3, fp
    268e:	431f      	orrs	r7, r3
    2690:	d000      	beq.n	2694 <__aeabi_dmul+0xa0>
    2692:	e088      	b.n	27a6 <__aeabi_dmul+0x1b2>
    2694:	2300      	movs	r3, #0
    2696:	469b      	mov	fp, r3
    2698:	4698      	mov	r8, r3
    269a:	3302      	adds	r3, #2
    269c:	2708      	movs	r7, #8
    269e:	9301      	str	r3, [sp, #4]
    26a0:	e7ce      	b.n	2640 <__aeabi_dmul+0x4c>
    26a2:	4649      	mov	r1, r9
    26a4:	2a02      	cmp	r2, #2
    26a6:	d06a      	beq.n	277e <__aeabi_dmul+0x18a>
    26a8:	2a03      	cmp	r2, #3
    26aa:	d100      	bne.n	26ae <__aeabi_dmul+0xba>
    26ac:	e209      	b.n	2ac2 <__aeabi_dmul+0x4ce>
    26ae:	2a01      	cmp	r2, #1
    26b0:	d000      	beq.n	26b4 <__aeabi_dmul+0xc0>
    26b2:	e1bb      	b.n	2a2c <__aeabi_dmul+0x438>
    26b4:	4011      	ands	r1, r2
    26b6:	2200      	movs	r2, #0
    26b8:	2300      	movs	r3, #0
    26ba:	2500      	movs	r5, #0
    26bc:	4690      	mov	r8, r2
    26be:	b2cc      	uxtb	r4, r1
    26c0:	2100      	movs	r1, #0
    26c2:	032d      	lsls	r5, r5, #12
    26c4:	0d0a      	lsrs	r2, r1, #20
    26c6:	0512      	lsls	r2, r2, #20
    26c8:	0b2d      	lsrs	r5, r5, #12
    26ca:	4315      	orrs	r5, r2
    26cc:	4a43      	ldr	r2, [pc, #268]	; (27dc <__aeabi_dmul+0x1e8>)
    26ce:	051b      	lsls	r3, r3, #20
    26d0:	4015      	ands	r5, r2
    26d2:	431d      	orrs	r5, r3
    26d4:	006d      	lsls	r5, r5, #1
    26d6:	07e4      	lsls	r4, r4, #31
    26d8:	086d      	lsrs	r5, r5, #1
    26da:	4325      	orrs	r5, r4
    26dc:	4640      	mov	r0, r8
    26de:	0029      	movs	r1, r5
    26e0:	b007      	add	sp, #28
    26e2:	bc3c      	pop	{r2, r3, r4, r5}
    26e4:	4690      	mov	r8, r2
    26e6:	4699      	mov	r9, r3
    26e8:	46a2      	mov	sl, r4
    26ea:	46ab      	mov	fp, r5
    26ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ee:	4303      	orrs	r3, r0
    26f0:	d052      	beq.n	2798 <__aeabi_dmul+0x1a4>
    26f2:	465b      	mov	r3, fp
    26f4:	2b00      	cmp	r3, #0
    26f6:	d100      	bne.n	26fa <__aeabi_dmul+0x106>
    26f8:	e18a      	b.n	2a10 <__aeabi_dmul+0x41c>
    26fa:	4658      	mov	r0, fp
    26fc:	f000 fed8 	bl	34b0 <__clzsi2>
    2700:	0003      	movs	r3, r0
    2702:	3b0b      	subs	r3, #11
    2704:	2b1c      	cmp	r3, #28
    2706:	dd00      	ble.n	270a <__aeabi_dmul+0x116>
    2708:	e17b      	b.n	2a02 <__aeabi_dmul+0x40e>
    270a:	221d      	movs	r2, #29
    270c:	1ad3      	subs	r3, r2, r3
    270e:	003a      	movs	r2, r7
    2710:	0001      	movs	r1, r0
    2712:	465d      	mov	r5, fp
    2714:	40da      	lsrs	r2, r3
    2716:	3908      	subs	r1, #8
    2718:	408d      	lsls	r5, r1
    271a:	0013      	movs	r3, r2
    271c:	408f      	lsls	r7, r1
    271e:	432b      	orrs	r3, r5
    2720:	469b      	mov	fp, r3
    2722:	46b8      	mov	r8, r7
    2724:	4b2e      	ldr	r3, [pc, #184]	; (27e0 <__aeabi_dmul+0x1ec>)
    2726:	2700      	movs	r7, #0
    2728:	469c      	mov	ip, r3
    272a:	2300      	movs	r3, #0
    272c:	4460      	add	r0, ip
    272e:	4246      	negs	r6, r0
    2730:	9301      	str	r3, [sp, #4]
    2732:	e785      	b.n	2640 <__aeabi_dmul+0x4c>
    2734:	4652      	mov	r2, sl
    2736:	432a      	orrs	r2, r5
    2738:	d12c      	bne.n	2794 <__aeabi_dmul+0x1a0>
    273a:	2500      	movs	r5, #0
    273c:	2300      	movs	r3, #0
    273e:	2202      	movs	r2, #2
    2740:	e797      	b.n	2672 <__aeabi_dmul+0x7e>
    2742:	4652      	mov	r2, sl
    2744:	432a      	orrs	r2, r5
    2746:	d021      	beq.n	278c <__aeabi_dmul+0x198>
    2748:	2d00      	cmp	r5, #0
    274a:	d100      	bne.n	274e <__aeabi_dmul+0x15a>
    274c:	e154      	b.n	29f8 <__aeabi_dmul+0x404>
    274e:	0028      	movs	r0, r5
    2750:	f000 feae 	bl	34b0 <__clzsi2>
    2754:	0003      	movs	r3, r0
    2756:	3b0b      	subs	r3, #11
    2758:	2b1c      	cmp	r3, #28
    275a:	dd00      	ble.n	275e <__aeabi_dmul+0x16a>
    275c:	e146      	b.n	29ec <__aeabi_dmul+0x3f8>
    275e:	211d      	movs	r1, #29
    2760:	1acb      	subs	r3, r1, r3
    2762:	4651      	mov	r1, sl
    2764:	0002      	movs	r2, r0
    2766:	40d9      	lsrs	r1, r3
    2768:	4653      	mov	r3, sl
    276a:	3a08      	subs	r2, #8
    276c:	4095      	lsls	r5, r2
    276e:	4093      	lsls	r3, r2
    2770:	430d      	orrs	r5, r1
    2772:	4a1b      	ldr	r2, [pc, #108]	; (27e0 <__aeabi_dmul+0x1ec>)
    2774:	4694      	mov	ip, r2
    2776:	4460      	add	r0, ip
    2778:	4240      	negs	r0, r0
    277a:	2200      	movs	r2, #0
    277c:	e779      	b.n	2672 <__aeabi_dmul+0x7e>
    277e:	2401      	movs	r4, #1
    2780:	2200      	movs	r2, #0
    2782:	400c      	ands	r4, r1
    2784:	4b12      	ldr	r3, [pc, #72]	; (27d0 <__aeabi_dmul+0x1dc>)
    2786:	2500      	movs	r5, #0
    2788:	4690      	mov	r8, r2
    278a:	e799      	b.n	26c0 <__aeabi_dmul+0xcc>
    278c:	2500      	movs	r5, #0
    278e:	2300      	movs	r3, #0
    2790:	2201      	movs	r2, #1
    2792:	e76e      	b.n	2672 <__aeabi_dmul+0x7e>
    2794:	2203      	movs	r2, #3
    2796:	e76c      	b.n	2672 <__aeabi_dmul+0x7e>
    2798:	2300      	movs	r3, #0
    279a:	469b      	mov	fp, r3
    279c:	4698      	mov	r8, r3
    279e:	3301      	adds	r3, #1
    27a0:	2704      	movs	r7, #4
    27a2:	9301      	str	r3, [sp, #4]
    27a4:	e74c      	b.n	2640 <__aeabi_dmul+0x4c>
    27a6:	2303      	movs	r3, #3
    27a8:	270c      	movs	r7, #12
    27aa:	9301      	str	r3, [sp, #4]
    27ac:	e748      	b.n	2640 <__aeabi_dmul+0x4c>
    27ae:	2300      	movs	r3, #0
    27b0:	2580      	movs	r5, #128	; 0x80
    27b2:	4698      	mov	r8, r3
    27b4:	2400      	movs	r4, #0
    27b6:	032d      	lsls	r5, r5, #12
    27b8:	4b05      	ldr	r3, [pc, #20]	; (27d0 <__aeabi_dmul+0x1dc>)
    27ba:	e781      	b.n	26c0 <__aeabi_dmul+0xcc>
    27bc:	465d      	mov	r5, fp
    27be:	4643      	mov	r3, r8
    27c0:	9a01      	ldr	r2, [sp, #4]
    27c2:	e76f      	b.n	26a4 <__aeabi_dmul+0xb0>
    27c4:	465d      	mov	r5, fp
    27c6:	4643      	mov	r3, r8
    27c8:	0021      	movs	r1, r4
    27ca:	9a01      	ldr	r2, [sp, #4]
    27cc:	e76a      	b.n	26a4 <__aeabi_dmul+0xb0>
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	000007ff 	.word	0x000007ff
    27d4:	fffffc01 	.word	0xfffffc01
    27d8:	0000385c 	.word	0x0000385c
    27dc:	800fffff 	.word	0x800fffff
    27e0:	000003f3 	.word	0x000003f3
    27e4:	4642      	mov	r2, r8
    27e6:	0c12      	lsrs	r2, r2, #16
    27e8:	4691      	mov	r9, r2
    27ea:	0c1a      	lsrs	r2, r3, #16
    27ec:	4694      	mov	ip, r2
    27ee:	4642      	mov	r2, r8
    27f0:	0417      	lsls	r7, r2, #16
    27f2:	464a      	mov	r2, r9
    27f4:	041b      	lsls	r3, r3, #16
    27f6:	0c1b      	lsrs	r3, r3, #16
    27f8:	435a      	muls	r2, r3
    27fa:	4660      	mov	r0, ip
    27fc:	4690      	mov	r8, r2
    27fe:	464a      	mov	r2, r9
    2800:	4342      	muls	r2, r0
    2802:	0010      	movs	r0, r2
    2804:	9203      	str	r2, [sp, #12]
    2806:	4662      	mov	r2, ip
    2808:	001c      	movs	r4, r3
    280a:	0c3f      	lsrs	r7, r7, #16
    280c:	437a      	muls	r2, r7
    280e:	437c      	muls	r4, r7
    2810:	4442      	add	r2, r8
    2812:	9201      	str	r2, [sp, #4]
    2814:	0c22      	lsrs	r2, r4, #16
    2816:	4692      	mov	sl, r2
    2818:	9a01      	ldr	r2, [sp, #4]
    281a:	4452      	add	r2, sl
    281c:	4590      	cmp	r8, r2
    281e:	d906      	bls.n	282e <__aeabi_dmul+0x23a>
    2820:	4682      	mov	sl, r0
    2822:	2080      	movs	r0, #128	; 0x80
    2824:	0240      	lsls	r0, r0, #9
    2826:	4680      	mov	r8, r0
    2828:	44c2      	add	sl, r8
    282a:	4650      	mov	r0, sl
    282c:	9003      	str	r0, [sp, #12]
    282e:	0c10      	lsrs	r0, r2, #16
    2830:	9004      	str	r0, [sp, #16]
    2832:	4648      	mov	r0, r9
    2834:	0424      	lsls	r4, r4, #16
    2836:	0c24      	lsrs	r4, r4, #16
    2838:	0412      	lsls	r2, r2, #16
    283a:	1912      	adds	r2, r2, r4
    283c:	9205      	str	r2, [sp, #20]
    283e:	0c2a      	lsrs	r2, r5, #16
    2840:	042d      	lsls	r5, r5, #16
    2842:	0c2d      	lsrs	r5, r5, #16
    2844:	4368      	muls	r0, r5
    2846:	002c      	movs	r4, r5
    2848:	4682      	mov	sl, r0
    284a:	4648      	mov	r0, r9
    284c:	437c      	muls	r4, r7
    284e:	4350      	muls	r0, r2
    2850:	4681      	mov	r9, r0
    2852:	0c20      	lsrs	r0, r4, #16
    2854:	4680      	mov	r8, r0
    2856:	4357      	muls	r7, r2
    2858:	4457      	add	r7, sl
    285a:	4447      	add	r7, r8
    285c:	45ba      	cmp	sl, r7
    285e:	d903      	bls.n	2868 <__aeabi_dmul+0x274>
    2860:	2080      	movs	r0, #128	; 0x80
    2862:	0240      	lsls	r0, r0, #9
    2864:	4680      	mov	r8, r0
    2866:	44c1      	add	r9, r8
    2868:	0c38      	lsrs	r0, r7, #16
    286a:	043f      	lsls	r7, r7, #16
    286c:	46b8      	mov	r8, r7
    286e:	4448      	add	r0, r9
    2870:	0424      	lsls	r4, r4, #16
    2872:	0c24      	lsrs	r4, r4, #16
    2874:	9001      	str	r0, [sp, #4]
    2876:	9804      	ldr	r0, [sp, #16]
    2878:	44a0      	add	r8, r4
    287a:	4440      	add	r0, r8
    287c:	9004      	str	r0, [sp, #16]
    287e:	4658      	mov	r0, fp
    2880:	0c00      	lsrs	r0, r0, #16
    2882:	4681      	mov	r9, r0
    2884:	4658      	mov	r0, fp
    2886:	0404      	lsls	r4, r0, #16
    2888:	0c20      	lsrs	r0, r4, #16
    288a:	4682      	mov	sl, r0
    288c:	0007      	movs	r7, r0
    288e:	4648      	mov	r0, r9
    2890:	435f      	muls	r7, r3
    2892:	464c      	mov	r4, r9
    2894:	4343      	muls	r3, r0
    2896:	4660      	mov	r0, ip
    2898:	4360      	muls	r0, r4
    289a:	4664      	mov	r4, ip
    289c:	4683      	mov	fp, r0
    289e:	4650      	mov	r0, sl
    28a0:	4344      	muls	r4, r0
    28a2:	0c38      	lsrs	r0, r7, #16
    28a4:	4684      	mov	ip, r0
    28a6:	18e4      	adds	r4, r4, r3
    28a8:	4464      	add	r4, ip
    28aa:	42a3      	cmp	r3, r4
    28ac:	d903      	bls.n	28b6 <__aeabi_dmul+0x2c2>
    28ae:	2380      	movs	r3, #128	; 0x80
    28b0:	025b      	lsls	r3, r3, #9
    28b2:	469c      	mov	ip, r3
    28b4:	44e3      	add	fp, ip
    28b6:	4648      	mov	r0, r9
    28b8:	043f      	lsls	r7, r7, #16
    28ba:	0c23      	lsrs	r3, r4, #16
    28bc:	0c3f      	lsrs	r7, r7, #16
    28be:	0424      	lsls	r4, r4, #16
    28c0:	19e4      	adds	r4, r4, r7
    28c2:	4657      	mov	r7, sl
    28c4:	4368      	muls	r0, r5
    28c6:	436f      	muls	r7, r5
    28c8:	4684      	mov	ip, r0
    28ca:	464d      	mov	r5, r9
    28cc:	4650      	mov	r0, sl
    28ce:	4355      	muls	r5, r2
    28d0:	4342      	muls	r2, r0
    28d2:	0c38      	lsrs	r0, r7, #16
    28d4:	4681      	mov	r9, r0
    28d6:	4462      	add	r2, ip
    28d8:	444a      	add	r2, r9
    28da:	445b      	add	r3, fp
    28dc:	4594      	cmp	ip, r2
    28de:	d903      	bls.n	28e8 <__aeabi_dmul+0x2f4>
    28e0:	2080      	movs	r0, #128	; 0x80
    28e2:	0240      	lsls	r0, r0, #9
    28e4:	4684      	mov	ip, r0
    28e6:	4465      	add	r5, ip
    28e8:	9803      	ldr	r0, [sp, #12]
    28ea:	043f      	lsls	r7, r7, #16
    28ec:	4683      	mov	fp, r0
    28ee:	9804      	ldr	r0, [sp, #16]
    28f0:	0c3f      	lsrs	r7, r7, #16
    28f2:	4684      	mov	ip, r0
    28f4:	44e3      	add	fp, ip
    28f6:	45c3      	cmp	fp, r8
    28f8:	4180      	sbcs	r0, r0
    28fa:	4240      	negs	r0, r0
    28fc:	4682      	mov	sl, r0
    28fe:	0410      	lsls	r0, r2, #16
    2900:	4684      	mov	ip, r0
    2902:	9801      	ldr	r0, [sp, #4]
    2904:	4467      	add	r7, ip
    2906:	4684      	mov	ip, r0
    2908:	4467      	add	r7, ip
    290a:	44a3      	add	fp, r4
    290c:	46bc      	mov	ip, r7
    290e:	45a3      	cmp	fp, r4
    2910:	41a4      	sbcs	r4, r4
    2912:	4699      	mov	r9, r3
    2914:	44d4      	add	ip, sl
    2916:	4264      	negs	r4, r4
    2918:	4287      	cmp	r7, r0
    291a:	41bf      	sbcs	r7, r7
    291c:	45d4      	cmp	ip, sl
    291e:	4180      	sbcs	r0, r0
    2920:	44e1      	add	r9, ip
    2922:	46a0      	mov	r8, r4
    2924:	4599      	cmp	r9, r3
    2926:	419b      	sbcs	r3, r3
    2928:	427f      	negs	r7, r7
    292a:	4240      	negs	r0, r0
    292c:	44c8      	add	r8, r9
    292e:	4307      	orrs	r7, r0
    2930:	0c12      	lsrs	r2, r2, #16
    2932:	18ba      	adds	r2, r7, r2
    2934:	45a0      	cmp	r8, r4
    2936:	41a4      	sbcs	r4, r4
    2938:	425f      	negs	r7, r3
    293a:	003b      	movs	r3, r7
    293c:	4264      	negs	r4, r4
    293e:	4323      	orrs	r3, r4
    2940:	18d7      	adds	r7, r2, r3
    2942:	4643      	mov	r3, r8
    2944:	197d      	adds	r5, r7, r5
    2946:	0ddb      	lsrs	r3, r3, #23
    2948:	026d      	lsls	r5, r5, #9
    294a:	431d      	orrs	r5, r3
    294c:	465b      	mov	r3, fp
    294e:	025a      	lsls	r2, r3, #9
    2950:	9b05      	ldr	r3, [sp, #20]
    2952:	431a      	orrs	r2, r3
    2954:	1e53      	subs	r3, r2, #1
    2956:	419a      	sbcs	r2, r3
    2958:	465b      	mov	r3, fp
    295a:	0ddb      	lsrs	r3, r3, #23
    295c:	431a      	orrs	r2, r3
    295e:	4643      	mov	r3, r8
    2960:	025b      	lsls	r3, r3, #9
    2962:	4313      	orrs	r3, r2
    2964:	01ea      	lsls	r2, r5, #7
    2966:	d507      	bpl.n	2978 <__aeabi_dmul+0x384>
    2968:	2201      	movs	r2, #1
    296a:	085c      	lsrs	r4, r3, #1
    296c:	4013      	ands	r3, r2
    296e:	4323      	orrs	r3, r4
    2970:	07ea      	lsls	r2, r5, #31
    2972:	9e02      	ldr	r6, [sp, #8]
    2974:	4313      	orrs	r3, r2
    2976:	086d      	lsrs	r5, r5, #1
    2978:	4a57      	ldr	r2, [pc, #348]	; (2ad8 <__aeabi_dmul+0x4e4>)
    297a:	18b2      	adds	r2, r6, r2
    297c:	2a00      	cmp	r2, #0
    297e:	dd4b      	ble.n	2a18 <__aeabi_dmul+0x424>
    2980:	0758      	lsls	r0, r3, #29
    2982:	d009      	beq.n	2998 <__aeabi_dmul+0x3a4>
    2984:	200f      	movs	r0, #15
    2986:	4018      	ands	r0, r3
    2988:	2804      	cmp	r0, #4
    298a:	d005      	beq.n	2998 <__aeabi_dmul+0x3a4>
    298c:	1d18      	adds	r0, r3, #4
    298e:	4298      	cmp	r0, r3
    2990:	419b      	sbcs	r3, r3
    2992:	425b      	negs	r3, r3
    2994:	18ed      	adds	r5, r5, r3
    2996:	0003      	movs	r3, r0
    2998:	01e8      	lsls	r0, r5, #7
    299a:	d504      	bpl.n	29a6 <__aeabi_dmul+0x3b2>
    299c:	4a4f      	ldr	r2, [pc, #316]	; (2adc <__aeabi_dmul+0x4e8>)
    299e:	4015      	ands	r5, r2
    29a0:	2280      	movs	r2, #128	; 0x80
    29a2:	00d2      	lsls	r2, r2, #3
    29a4:	18b2      	adds	r2, r6, r2
    29a6:	484e      	ldr	r0, [pc, #312]	; (2ae0 <__aeabi_dmul+0x4ec>)
    29a8:	4282      	cmp	r2, r0
    29aa:	dd00      	ble.n	29ae <__aeabi_dmul+0x3ba>
    29ac:	e6e7      	b.n	277e <__aeabi_dmul+0x18a>
    29ae:	2401      	movs	r4, #1
    29b0:	08db      	lsrs	r3, r3, #3
    29b2:	0768      	lsls	r0, r5, #29
    29b4:	4318      	orrs	r0, r3
    29b6:	026d      	lsls	r5, r5, #9
    29b8:	0553      	lsls	r3, r2, #21
    29ba:	4680      	mov	r8, r0
    29bc:	0b2d      	lsrs	r5, r5, #12
    29be:	0d5b      	lsrs	r3, r3, #21
    29c0:	400c      	ands	r4, r1
    29c2:	e67d      	b.n	26c0 <__aeabi_dmul+0xcc>
    29c4:	2280      	movs	r2, #128	; 0x80
    29c6:	4659      	mov	r1, fp
    29c8:	0312      	lsls	r2, r2, #12
    29ca:	4211      	tst	r1, r2
    29cc:	d008      	beq.n	29e0 <__aeabi_dmul+0x3ec>
    29ce:	4215      	tst	r5, r2
    29d0:	d106      	bne.n	29e0 <__aeabi_dmul+0x3ec>
    29d2:	4315      	orrs	r5, r2
    29d4:	032d      	lsls	r5, r5, #12
    29d6:	4698      	mov	r8, r3
    29d8:	0b2d      	lsrs	r5, r5, #12
    29da:	464c      	mov	r4, r9
    29dc:	4b41      	ldr	r3, [pc, #260]	; (2ae4 <__aeabi_dmul+0x4f0>)
    29de:	e66f      	b.n	26c0 <__aeabi_dmul+0xcc>
    29e0:	465d      	mov	r5, fp
    29e2:	4315      	orrs	r5, r2
    29e4:	032d      	lsls	r5, r5, #12
    29e6:	0b2d      	lsrs	r5, r5, #12
    29e8:	4b3e      	ldr	r3, [pc, #248]	; (2ae4 <__aeabi_dmul+0x4f0>)
    29ea:	e669      	b.n	26c0 <__aeabi_dmul+0xcc>
    29ec:	0003      	movs	r3, r0
    29ee:	4655      	mov	r5, sl
    29f0:	3b28      	subs	r3, #40	; 0x28
    29f2:	409d      	lsls	r5, r3
    29f4:	2300      	movs	r3, #0
    29f6:	e6bc      	b.n	2772 <__aeabi_dmul+0x17e>
    29f8:	4650      	mov	r0, sl
    29fa:	f000 fd59 	bl	34b0 <__clzsi2>
    29fe:	3020      	adds	r0, #32
    2a00:	e6a8      	b.n	2754 <__aeabi_dmul+0x160>
    2a02:	0003      	movs	r3, r0
    2a04:	3b28      	subs	r3, #40	; 0x28
    2a06:	409f      	lsls	r7, r3
    2a08:	2300      	movs	r3, #0
    2a0a:	46bb      	mov	fp, r7
    2a0c:	4698      	mov	r8, r3
    2a0e:	e689      	b.n	2724 <__aeabi_dmul+0x130>
    2a10:	f000 fd4e 	bl	34b0 <__clzsi2>
    2a14:	3020      	adds	r0, #32
    2a16:	e673      	b.n	2700 <__aeabi_dmul+0x10c>
    2a18:	2401      	movs	r4, #1
    2a1a:	1aa6      	subs	r6, r4, r2
    2a1c:	2e38      	cmp	r6, #56	; 0x38
    2a1e:	dd07      	ble.n	2a30 <__aeabi_dmul+0x43c>
    2a20:	2200      	movs	r2, #0
    2a22:	400c      	ands	r4, r1
    2a24:	2300      	movs	r3, #0
    2a26:	2500      	movs	r5, #0
    2a28:	4690      	mov	r8, r2
    2a2a:	e649      	b.n	26c0 <__aeabi_dmul+0xcc>
    2a2c:	9e02      	ldr	r6, [sp, #8]
    2a2e:	e7a3      	b.n	2978 <__aeabi_dmul+0x384>
    2a30:	2e1f      	cmp	r6, #31
    2a32:	dc20      	bgt.n	2a76 <__aeabi_dmul+0x482>
    2a34:	2220      	movs	r2, #32
    2a36:	002c      	movs	r4, r5
    2a38:	0018      	movs	r0, r3
    2a3a:	1b92      	subs	r2, r2, r6
    2a3c:	40f0      	lsrs	r0, r6
    2a3e:	4094      	lsls	r4, r2
    2a40:	4093      	lsls	r3, r2
    2a42:	4304      	orrs	r4, r0
    2a44:	1e58      	subs	r0, r3, #1
    2a46:	4183      	sbcs	r3, r0
    2a48:	431c      	orrs	r4, r3
    2a4a:	40f5      	lsrs	r5, r6
    2a4c:	0763      	lsls	r3, r4, #29
    2a4e:	d009      	beq.n	2a64 <__aeabi_dmul+0x470>
    2a50:	230f      	movs	r3, #15
    2a52:	4023      	ands	r3, r4
    2a54:	2b04      	cmp	r3, #4
    2a56:	d005      	beq.n	2a64 <__aeabi_dmul+0x470>
    2a58:	0023      	movs	r3, r4
    2a5a:	1d1c      	adds	r4, r3, #4
    2a5c:	429c      	cmp	r4, r3
    2a5e:	4192      	sbcs	r2, r2
    2a60:	4252      	negs	r2, r2
    2a62:	18ad      	adds	r5, r5, r2
    2a64:	022b      	lsls	r3, r5, #8
    2a66:	d51f      	bpl.n	2aa8 <__aeabi_dmul+0x4b4>
    2a68:	2401      	movs	r4, #1
    2a6a:	2200      	movs	r2, #0
    2a6c:	400c      	ands	r4, r1
    2a6e:	2301      	movs	r3, #1
    2a70:	2500      	movs	r5, #0
    2a72:	4690      	mov	r8, r2
    2a74:	e624      	b.n	26c0 <__aeabi_dmul+0xcc>
    2a76:	201f      	movs	r0, #31
    2a78:	002c      	movs	r4, r5
    2a7a:	4240      	negs	r0, r0
    2a7c:	1a82      	subs	r2, r0, r2
    2a7e:	40d4      	lsrs	r4, r2
    2a80:	2e20      	cmp	r6, #32
    2a82:	d01c      	beq.n	2abe <__aeabi_dmul+0x4ca>
    2a84:	2240      	movs	r2, #64	; 0x40
    2a86:	1b96      	subs	r6, r2, r6
    2a88:	40b5      	lsls	r5, r6
    2a8a:	432b      	orrs	r3, r5
    2a8c:	1e58      	subs	r0, r3, #1
    2a8e:	4183      	sbcs	r3, r0
    2a90:	2007      	movs	r0, #7
    2a92:	4323      	orrs	r3, r4
    2a94:	4018      	ands	r0, r3
    2a96:	2500      	movs	r5, #0
    2a98:	2800      	cmp	r0, #0
    2a9a:	d009      	beq.n	2ab0 <__aeabi_dmul+0x4bc>
    2a9c:	220f      	movs	r2, #15
    2a9e:	2500      	movs	r5, #0
    2aa0:	401a      	ands	r2, r3
    2aa2:	001c      	movs	r4, r3
    2aa4:	2a04      	cmp	r2, #4
    2aa6:	d1d8      	bne.n	2a5a <__aeabi_dmul+0x466>
    2aa8:	0023      	movs	r3, r4
    2aaa:	0768      	lsls	r0, r5, #29
    2aac:	026d      	lsls	r5, r5, #9
    2aae:	0b2d      	lsrs	r5, r5, #12
    2ab0:	2401      	movs	r4, #1
    2ab2:	08db      	lsrs	r3, r3, #3
    2ab4:	4303      	orrs	r3, r0
    2ab6:	4698      	mov	r8, r3
    2ab8:	400c      	ands	r4, r1
    2aba:	2300      	movs	r3, #0
    2abc:	e600      	b.n	26c0 <__aeabi_dmul+0xcc>
    2abe:	2500      	movs	r5, #0
    2ac0:	e7e3      	b.n	2a8a <__aeabi_dmul+0x496>
    2ac2:	2280      	movs	r2, #128	; 0x80
    2ac4:	2401      	movs	r4, #1
    2ac6:	0312      	lsls	r2, r2, #12
    2ac8:	4315      	orrs	r5, r2
    2aca:	032d      	lsls	r5, r5, #12
    2acc:	4698      	mov	r8, r3
    2ace:	0b2d      	lsrs	r5, r5, #12
    2ad0:	400c      	ands	r4, r1
    2ad2:	4b04      	ldr	r3, [pc, #16]	; (2ae4 <__aeabi_dmul+0x4f0>)
    2ad4:	e5f4      	b.n	26c0 <__aeabi_dmul+0xcc>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	000003ff 	.word	0x000003ff
    2adc:	feffffff 	.word	0xfeffffff
    2ae0:	000007fe 	.word	0x000007fe
    2ae4:	000007ff 	.word	0x000007ff

00002ae8 <__aeabi_dsub>:
    2ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aea:	4657      	mov	r7, sl
    2aec:	464e      	mov	r6, r9
    2aee:	4645      	mov	r5, r8
    2af0:	b4e0      	push	{r5, r6, r7}
    2af2:	000e      	movs	r6, r1
    2af4:	0011      	movs	r1, r2
    2af6:	0ff2      	lsrs	r2, r6, #31
    2af8:	4692      	mov	sl, r2
    2afa:	00c5      	lsls	r5, r0, #3
    2afc:	0f42      	lsrs	r2, r0, #29
    2afe:	0318      	lsls	r0, r3, #12
    2b00:	0337      	lsls	r7, r6, #12
    2b02:	0074      	lsls	r4, r6, #1
    2b04:	0a40      	lsrs	r0, r0, #9
    2b06:	0f4e      	lsrs	r6, r1, #29
    2b08:	0a7f      	lsrs	r7, r7, #9
    2b0a:	4330      	orrs	r0, r6
    2b0c:	4ecf      	ldr	r6, [pc, #828]	; (2e4c <__aeabi_dsub+0x364>)
    2b0e:	4317      	orrs	r7, r2
    2b10:	005a      	lsls	r2, r3, #1
    2b12:	0d64      	lsrs	r4, r4, #21
    2b14:	0d52      	lsrs	r2, r2, #21
    2b16:	0fdb      	lsrs	r3, r3, #31
    2b18:	00c9      	lsls	r1, r1, #3
    2b1a:	42b2      	cmp	r2, r6
    2b1c:	d100      	bne.n	2b20 <__aeabi_dsub+0x38>
    2b1e:	e0e5      	b.n	2cec <__aeabi_dsub+0x204>
    2b20:	2601      	movs	r6, #1
    2b22:	4073      	eors	r3, r6
    2b24:	1aa6      	subs	r6, r4, r2
    2b26:	46b4      	mov	ip, r6
    2b28:	4553      	cmp	r3, sl
    2b2a:	d100      	bne.n	2b2e <__aeabi_dsub+0x46>
    2b2c:	e0af      	b.n	2c8e <__aeabi_dsub+0x1a6>
    2b2e:	2e00      	cmp	r6, #0
    2b30:	dc00      	bgt.n	2b34 <__aeabi_dsub+0x4c>
    2b32:	e10d      	b.n	2d50 <__aeabi_dsub+0x268>
    2b34:	2a00      	cmp	r2, #0
    2b36:	d13a      	bne.n	2bae <__aeabi_dsub+0xc6>
    2b38:	0003      	movs	r3, r0
    2b3a:	430b      	orrs	r3, r1
    2b3c:	d000      	beq.n	2b40 <__aeabi_dsub+0x58>
    2b3e:	e0e4      	b.n	2d0a <__aeabi_dsub+0x222>
    2b40:	076b      	lsls	r3, r5, #29
    2b42:	d009      	beq.n	2b58 <__aeabi_dsub+0x70>
    2b44:	230f      	movs	r3, #15
    2b46:	402b      	ands	r3, r5
    2b48:	2b04      	cmp	r3, #4
    2b4a:	d005      	beq.n	2b58 <__aeabi_dsub+0x70>
    2b4c:	1d2b      	adds	r3, r5, #4
    2b4e:	42ab      	cmp	r3, r5
    2b50:	41ad      	sbcs	r5, r5
    2b52:	426d      	negs	r5, r5
    2b54:	197f      	adds	r7, r7, r5
    2b56:	001d      	movs	r5, r3
    2b58:	023b      	lsls	r3, r7, #8
    2b5a:	d400      	bmi.n	2b5e <__aeabi_dsub+0x76>
    2b5c:	e088      	b.n	2c70 <__aeabi_dsub+0x188>
    2b5e:	4bbb      	ldr	r3, [pc, #748]	; (2e4c <__aeabi_dsub+0x364>)
    2b60:	3401      	adds	r4, #1
    2b62:	429c      	cmp	r4, r3
    2b64:	d100      	bne.n	2b68 <__aeabi_dsub+0x80>
    2b66:	e110      	b.n	2d8a <__aeabi_dsub+0x2a2>
    2b68:	003a      	movs	r2, r7
    2b6a:	4bb9      	ldr	r3, [pc, #740]	; (2e50 <__aeabi_dsub+0x368>)
    2b6c:	4651      	mov	r1, sl
    2b6e:	401a      	ands	r2, r3
    2b70:	2301      	movs	r3, #1
    2b72:	0750      	lsls	r0, r2, #29
    2b74:	08ed      	lsrs	r5, r5, #3
    2b76:	0252      	lsls	r2, r2, #9
    2b78:	0564      	lsls	r4, r4, #21
    2b7a:	4305      	orrs	r5, r0
    2b7c:	0b12      	lsrs	r2, r2, #12
    2b7e:	0d64      	lsrs	r4, r4, #21
    2b80:	400b      	ands	r3, r1
    2b82:	2100      	movs	r1, #0
    2b84:	0028      	movs	r0, r5
    2b86:	0312      	lsls	r2, r2, #12
    2b88:	0d0d      	lsrs	r5, r1, #20
    2b8a:	0b12      	lsrs	r2, r2, #12
    2b8c:	0564      	lsls	r4, r4, #21
    2b8e:	052d      	lsls	r5, r5, #20
    2b90:	4315      	orrs	r5, r2
    2b92:	0862      	lsrs	r2, r4, #1
    2b94:	4caf      	ldr	r4, [pc, #700]	; (2e54 <__aeabi_dsub+0x36c>)
    2b96:	07db      	lsls	r3, r3, #31
    2b98:	402c      	ands	r4, r5
    2b9a:	4314      	orrs	r4, r2
    2b9c:	0064      	lsls	r4, r4, #1
    2b9e:	0864      	lsrs	r4, r4, #1
    2ba0:	431c      	orrs	r4, r3
    2ba2:	0021      	movs	r1, r4
    2ba4:	bc1c      	pop	{r2, r3, r4}
    2ba6:	4690      	mov	r8, r2
    2ba8:	4699      	mov	r9, r3
    2baa:	46a2      	mov	sl, r4
    2bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bae:	4ba7      	ldr	r3, [pc, #668]	; (2e4c <__aeabi_dsub+0x364>)
    2bb0:	429c      	cmp	r4, r3
    2bb2:	d0c5      	beq.n	2b40 <__aeabi_dsub+0x58>
    2bb4:	2380      	movs	r3, #128	; 0x80
    2bb6:	041b      	lsls	r3, r3, #16
    2bb8:	4318      	orrs	r0, r3
    2bba:	4663      	mov	r3, ip
    2bbc:	2b38      	cmp	r3, #56	; 0x38
    2bbe:	dd00      	ble.n	2bc2 <__aeabi_dsub+0xda>
    2bc0:	e0fd      	b.n	2dbe <__aeabi_dsub+0x2d6>
    2bc2:	2b1f      	cmp	r3, #31
    2bc4:	dd00      	ble.n	2bc8 <__aeabi_dsub+0xe0>
    2bc6:	e130      	b.n	2e2a <__aeabi_dsub+0x342>
    2bc8:	4662      	mov	r2, ip
    2bca:	2320      	movs	r3, #32
    2bcc:	1a9b      	subs	r3, r3, r2
    2bce:	0002      	movs	r2, r0
    2bd0:	409a      	lsls	r2, r3
    2bd2:	4666      	mov	r6, ip
    2bd4:	4690      	mov	r8, r2
    2bd6:	000a      	movs	r2, r1
    2bd8:	4099      	lsls	r1, r3
    2bda:	40f2      	lsrs	r2, r6
    2bdc:	4646      	mov	r6, r8
    2bde:	1e4b      	subs	r3, r1, #1
    2be0:	4199      	sbcs	r1, r3
    2be2:	4332      	orrs	r2, r6
    2be4:	4311      	orrs	r1, r2
    2be6:	4663      	mov	r3, ip
    2be8:	0002      	movs	r2, r0
    2bea:	40da      	lsrs	r2, r3
    2bec:	1a69      	subs	r1, r5, r1
    2bee:	428d      	cmp	r5, r1
    2bf0:	419b      	sbcs	r3, r3
    2bf2:	000d      	movs	r5, r1
    2bf4:	1aba      	subs	r2, r7, r2
    2bf6:	425b      	negs	r3, r3
    2bf8:	1ad7      	subs	r7, r2, r3
    2bfa:	023b      	lsls	r3, r7, #8
    2bfc:	d535      	bpl.n	2c6a <__aeabi_dsub+0x182>
    2bfe:	027a      	lsls	r2, r7, #9
    2c00:	0a53      	lsrs	r3, r2, #9
    2c02:	4698      	mov	r8, r3
    2c04:	4643      	mov	r3, r8
    2c06:	2b00      	cmp	r3, #0
    2c08:	d100      	bne.n	2c0c <__aeabi_dsub+0x124>
    2c0a:	e0c4      	b.n	2d96 <__aeabi_dsub+0x2ae>
    2c0c:	4640      	mov	r0, r8
    2c0e:	f000 fc4f 	bl	34b0 <__clzsi2>
    2c12:	0003      	movs	r3, r0
    2c14:	3b08      	subs	r3, #8
    2c16:	2b1f      	cmp	r3, #31
    2c18:	dd00      	ble.n	2c1c <__aeabi_dsub+0x134>
    2c1a:	e0c5      	b.n	2da8 <__aeabi_dsub+0x2c0>
    2c1c:	2220      	movs	r2, #32
    2c1e:	0029      	movs	r1, r5
    2c20:	1ad2      	subs	r2, r2, r3
    2c22:	4647      	mov	r7, r8
    2c24:	40d1      	lsrs	r1, r2
    2c26:	409f      	lsls	r7, r3
    2c28:	000a      	movs	r2, r1
    2c2a:	409d      	lsls	r5, r3
    2c2c:	433a      	orrs	r2, r7
    2c2e:	429c      	cmp	r4, r3
    2c30:	dd00      	ble.n	2c34 <__aeabi_dsub+0x14c>
    2c32:	e0c0      	b.n	2db6 <__aeabi_dsub+0x2ce>
    2c34:	1b1c      	subs	r4, r3, r4
    2c36:	1c63      	adds	r3, r4, #1
    2c38:	2b1f      	cmp	r3, #31
    2c3a:	dd00      	ble.n	2c3e <__aeabi_dsub+0x156>
    2c3c:	e0e4      	b.n	2e08 <__aeabi_dsub+0x320>
    2c3e:	2120      	movs	r1, #32
    2c40:	0014      	movs	r4, r2
    2c42:	0028      	movs	r0, r5
    2c44:	1ac9      	subs	r1, r1, r3
    2c46:	40d8      	lsrs	r0, r3
    2c48:	408c      	lsls	r4, r1
    2c4a:	408d      	lsls	r5, r1
    2c4c:	4304      	orrs	r4, r0
    2c4e:	40da      	lsrs	r2, r3
    2c50:	1e68      	subs	r0, r5, #1
    2c52:	4185      	sbcs	r5, r0
    2c54:	0017      	movs	r7, r2
    2c56:	4325      	orrs	r5, r4
    2c58:	2400      	movs	r4, #0
    2c5a:	e771      	b.n	2b40 <__aeabi_dsub+0x58>
    2c5c:	4642      	mov	r2, r8
    2c5e:	4663      	mov	r3, ip
    2c60:	431a      	orrs	r2, r3
    2c62:	d100      	bne.n	2c66 <__aeabi_dsub+0x17e>
    2c64:	e24c      	b.n	3100 <__aeabi_dsub+0x618>
    2c66:	4667      	mov	r7, ip
    2c68:	4645      	mov	r5, r8
    2c6a:	076b      	lsls	r3, r5, #29
    2c6c:	d000      	beq.n	2c70 <__aeabi_dsub+0x188>
    2c6e:	e769      	b.n	2b44 <__aeabi_dsub+0x5c>
    2c70:	2301      	movs	r3, #1
    2c72:	4651      	mov	r1, sl
    2c74:	0778      	lsls	r0, r7, #29
    2c76:	08ed      	lsrs	r5, r5, #3
    2c78:	08fa      	lsrs	r2, r7, #3
    2c7a:	400b      	ands	r3, r1
    2c7c:	4305      	orrs	r5, r0
    2c7e:	4973      	ldr	r1, [pc, #460]	; (2e4c <__aeabi_dsub+0x364>)
    2c80:	428c      	cmp	r4, r1
    2c82:	d038      	beq.n	2cf6 <__aeabi_dsub+0x20e>
    2c84:	0312      	lsls	r2, r2, #12
    2c86:	0564      	lsls	r4, r4, #21
    2c88:	0b12      	lsrs	r2, r2, #12
    2c8a:	0d64      	lsrs	r4, r4, #21
    2c8c:	e779      	b.n	2b82 <__aeabi_dsub+0x9a>
    2c8e:	2e00      	cmp	r6, #0
    2c90:	dc00      	bgt.n	2c94 <__aeabi_dsub+0x1ac>
    2c92:	e09a      	b.n	2dca <__aeabi_dsub+0x2e2>
    2c94:	2a00      	cmp	r2, #0
    2c96:	d047      	beq.n	2d28 <__aeabi_dsub+0x240>
    2c98:	4a6c      	ldr	r2, [pc, #432]	; (2e4c <__aeabi_dsub+0x364>)
    2c9a:	4294      	cmp	r4, r2
    2c9c:	d100      	bne.n	2ca0 <__aeabi_dsub+0x1b8>
    2c9e:	e74f      	b.n	2b40 <__aeabi_dsub+0x58>
    2ca0:	2280      	movs	r2, #128	; 0x80
    2ca2:	0412      	lsls	r2, r2, #16
    2ca4:	4310      	orrs	r0, r2
    2ca6:	4662      	mov	r2, ip
    2ca8:	2a38      	cmp	r2, #56	; 0x38
    2caa:	dc00      	bgt.n	2cae <__aeabi_dsub+0x1c6>
    2cac:	e108      	b.n	2ec0 <__aeabi_dsub+0x3d8>
    2cae:	4301      	orrs	r1, r0
    2cb0:	1e48      	subs	r0, r1, #1
    2cb2:	4181      	sbcs	r1, r0
    2cb4:	2200      	movs	r2, #0
    2cb6:	b2c9      	uxtb	r1, r1
    2cb8:	1949      	adds	r1, r1, r5
    2cba:	19d2      	adds	r2, r2, r7
    2cbc:	42a9      	cmp	r1, r5
    2cbe:	41bf      	sbcs	r7, r7
    2cc0:	000d      	movs	r5, r1
    2cc2:	427f      	negs	r7, r7
    2cc4:	18bf      	adds	r7, r7, r2
    2cc6:	023a      	lsls	r2, r7, #8
    2cc8:	d400      	bmi.n	2ccc <__aeabi_dsub+0x1e4>
    2cca:	e142      	b.n	2f52 <__aeabi_dsub+0x46a>
    2ccc:	4a5f      	ldr	r2, [pc, #380]	; (2e4c <__aeabi_dsub+0x364>)
    2cce:	3401      	adds	r4, #1
    2cd0:	4294      	cmp	r4, r2
    2cd2:	d100      	bne.n	2cd6 <__aeabi_dsub+0x1ee>
    2cd4:	e14e      	b.n	2f74 <__aeabi_dsub+0x48c>
    2cd6:	2001      	movs	r0, #1
    2cd8:	4a5d      	ldr	r2, [pc, #372]	; (2e50 <__aeabi_dsub+0x368>)
    2cda:	0869      	lsrs	r1, r5, #1
    2cdc:	403a      	ands	r2, r7
    2cde:	4028      	ands	r0, r5
    2ce0:	4308      	orrs	r0, r1
    2ce2:	07d5      	lsls	r5, r2, #31
    2ce4:	4305      	orrs	r5, r0
    2ce6:	0857      	lsrs	r7, r2, #1
    2ce8:	469a      	mov	sl, r3
    2cea:	e729      	b.n	2b40 <__aeabi_dsub+0x58>
    2cec:	0006      	movs	r6, r0
    2cee:	430e      	orrs	r6, r1
    2cf0:	d000      	beq.n	2cf4 <__aeabi_dsub+0x20c>
    2cf2:	e717      	b.n	2b24 <__aeabi_dsub+0x3c>
    2cf4:	e714      	b.n	2b20 <__aeabi_dsub+0x38>
    2cf6:	0029      	movs	r1, r5
    2cf8:	4311      	orrs	r1, r2
    2cfa:	d100      	bne.n	2cfe <__aeabi_dsub+0x216>
    2cfc:	e1f9      	b.n	30f2 <__aeabi_dsub+0x60a>
    2cfe:	2180      	movs	r1, #128	; 0x80
    2d00:	0309      	lsls	r1, r1, #12
    2d02:	430a      	orrs	r2, r1
    2d04:	0312      	lsls	r2, r2, #12
    2d06:	0b12      	lsrs	r2, r2, #12
    2d08:	e73b      	b.n	2b82 <__aeabi_dsub+0x9a>
    2d0a:	2301      	movs	r3, #1
    2d0c:	425b      	negs	r3, r3
    2d0e:	4698      	mov	r8, r3
    2d10:	44c4      	add	ip, r8
    2d12:	4663      	mov	r3, ip
    2d14:	2b00      	cmp	r3, #0
    2d16:	d172      	bne.n	2dfe <__aeabi_dsub+0x316>
    2d18:	1a69      	subs	r1, r5, r1
    2d1a:	428d      	cmp	r5, r1
    2d1c:	419b      	sbcs	r3, r3
    2d1e:	1a3f      	subs	r7, r7, r0
    2d20:	425b      	negs	r3, r3
    2d22:	1aff      	subs	r7, r7, r3
    2d24:	000d      	movs	r5, r1
    2d26:	e768      	b.n	2bfa <__aeabi_dsub+0x112>
    2d28:	0002      	movs	r2, r0
    2d2a:	430a      	orrs	r2, r1
    2d2c:	d100      	bne.n	2d30 <__aeabi_dsub+0x248>
    2d2e:	e707      	b.n	2b40 <__aeabi_dsub+0x58>
    2d30:	2201      	movs	r2, #1
    2d32:	4252      	negs	r2, r2
    2d34:	4690      	mov	r8, r2
    2d36:	44c4      	add	ip, r8
    2d38:	4662      	mov	r2, ip
    2d3a:	2a00      	cmp	r2, #0
    2d3c:	d000      	beq.n	2d40 <__aeabi_dsub+0x258>
    2d3e:	e0e6      	b.n	2f0e <__aeabi_dsub+0x426>
    2d40:	1869      	adds	r1, r5, r1
    2d42:	42a9      	cmp	r1, r5
    2d44:	41b6      	sbcs	r6, r6
    2d46:	183f      	adds	r7, r7, r0
    2d48:	4276      	negs	r6, r6
    2d4a:	19f7      	adds	r7, r6, r7
    2d4c:	000d      	movs	r5, r1
    2d4e:	e7ba      	b.n	2cc6 <__aeabi_dsub+0x1de>
    2d50:	2e00      	cmp	r6, #0
    2d52:	d000      	beq.n	2d56 <__aeabi_dsub+0x26e>
    2d54:	e080      	b.n	2e58 <__aeabi_dsub+0x370>
    2d56:	1c62      	adds	r2, r4, #1
    2d58:	0552      	lsls	r2, r2, #21
    2d5a:	0d52      	lsrs	r2, r2, #21
    2d5c:	2a01      	cmp	r2, #1
    2d5e:	dc00      	bgt.n	2d62 <__aeabi_dsub+0x27a>
    2d60:	e0f9      	b.n	2f56 <__aeabi_dsub+0x46e>
    2d62:	1a6a      	subs	r2, r5, r1
    2d64:	4691      	mov	r9, r2
    2d66:	454d      	cmp	r5, r9
    2d68:	41b6      	sbcs	r6, r6
    2d6a:	1a3a      	subs	r2, r7, r0
    2d6c:	4276      	negs	r6, r6
    2d6e:	1b92      	subs	r2, r2, r6
    2d70:	4690      	mov	r8, r2
    2d72:	0212      	lsls	r2, r2, #8
    2d74:	d400      	bmi.n	2d78 <__aeabi_dsub+0x290>
    2d76:	e099      	b.n	2eac <__aeabi_dsub+0x3c4>
    2d78:	1b4d      	subs	r5, r1, r5
    2d7a:	42a9      	cmp	r1, r5
    2d7c:	4189      	sbcs	r1, r1
    2d7e:	1bc7      	subs	r7, r0, r7
    2d80:	4249      	negs	r1, r1
    2d82:	1a7a      	subs	r2, r7, r1
    2d84:	4690      	mov	r8, r2
    2d86:	469a      	mov	sl, r3
    2d88:	e73c      	b.n	2c04 <__aeabi_dsub+0x11c>
    2d8a:	4652      	mov	r2, sl
    2d8c:	2301      	movs	r3, #1
    2d8e:	2500      	movs	r5, #0
    2d90:	4013      	ands	r3, r2
    2d92:	2200      	movs	r2, #0
    2d94:	e6f5      	b.n	2b82 <__aeabi_dsub+0x9a>
    2d96:	0028      	movs	r0, r5
    2d98:	f000 fb8a 	bl	34b0 <__clzsi2>
    2d9c:	3020      	adds	r0, #32
    2d9e:	0003      	movs	r3, r0
    2da0:	3b08      	subs	r3, #8
    2da2:	2b1f      	cmp	r3, #31
    2da4:	dc00      	bgt.n	2da8 <__aeabi_dsub+0x2c0>
    2da6:	e739      	b.n	2c1c <__aeabi_dsub+0x134>
    2da8:	002a      	movs	r2, r5
    2daa:	3828      	subs	r0, #40	; 0x28
    2dac:	4082      	lsls	r2, r0
    2dae:	2500      	movs	r5, #0
    2db0:	429c      	cmp	r4, r3
    2db2:	dc00      	bgt.n	2db6 <__aeabi_dsub+0x2ce>
    2db4:	e73e      	b.n	2c34 <__aeabi_dsub+0x14c>
    2db6:	4f26      	ldr	r7, [pc, #152]	; (2e50 <__aeabi_dsub+0x368>)
    2db8:	1ae4      	subs	r4, r4, r3
    2dba:	4017      	ands	r7, r2
    2dbc:	e6c0      	b.n	2b40 <__aeabi_dsub+0x58>
    2dbe:	4301      	orrs	r1, r0
    2dc0:	1e48      	subs	r0, r1, #1
    2dc2:	4181      	sbcs	r1, r0
    2dc4:	2200      	movs	r2, #0
    2dc6:	b2c9      	uxtb	r1, r1
    2dc8:	e710      	b.n	2bec <__aeabi_dsub+0x104>
    2dca:	2e00      	cmp	r6, #0
    2dcc:	d000      	beq.n	2dd0 <__aeabi_dsub+0x2e8>
    2dce:	e0f1      	b.n	2fb4 <__aeabi_dsub+0x4cc>
    2dd0:	1c62      	adds	r2, r4, #1
    2dd2:	4694      	mov	ip, r2
    2dd4:	0552      	lsls	r2, r2, #21
    2dd6:	0d52      	lsrs	r2, r2, #21
    2dd8:	2a01      	cmp	r2, #1
    2dda:	dc00      	bgt.n	2dde <__aeabi_dsub+0x2f6>
    2ddc:	e0a0      	b.n	2f20 <__aeabi_dsub+0x438>
    2dde:	4a1b      	ldr	r2, [pc, #108]	; (2e4c <__aeabi_dsub+0x364>)
    2de0:	4594      	cmp	ip, r2
    2de2:	d100      	bne.n	2de6 <__aeabi_dsub+0x2fe>
    2de4:	e0c5      	b.n	2f72 <__aeabi_dsub+0x48a>
    2de6:	1869      	adds	r1, r5, r1
    2de8:	42a9      	cmp	r1, r5
    2dea:	4192      	sbcs	r2, r2
    2dec:	183f      	adds	r7, r7, r0
    2dee:	4252      	negs	r2, r2
    2df0:	19d2      	adds	r2, r2, r7
    2df2:	0849      	lsrs	r1, r1, #1
    2df4:	07d5      	lsls	r5, r2, #31
    2df6:	430d      	orrs	r5, r1
    2df8:	0857      	lsrs	r7, r2, #1
    2dfa:	4664      	mov	r4, ip
    2dfc:	e6a0      	b.n	2b40 <__aeabi_dsub+0x58>
    2dfe:	4b13      	ldr	r3, [pc, #76]	; (2e4c <__aeabi_dsub+0x364>)
    2e00:	429c      	cmp	r4, r3
    2e02:	d000      	beq.n	2e06 <__aeabi_dsub+0x31e>
    2e04:	e6d9      	b.n	2bba <__aeabi_dsub+0xd2>
    2e06:	e69b      	b.n	2b40 <__aeabi_dsub+0x58>
    2e08:	0011      	movs	r1, r2
    2e0a:	3c1f      	subs	r4, #31
    2e0c:	40e1      	lsrs	r1, r4
    2e0e:	000c      	movs	r4, r1
    2e10:	2b20      	cmp	r3, #32
    2e12:	d100      	bne.n	2e16 <__aeabi_dsub+0x32e>
    2e14:	e080      	b.n	2f18 <__aeabi_dsub+0x430>
    2e16:	2140      	movs	r1, #64	; 0x40
    2e18:	1acb      	subs	r3, r1, r3
    2e1a:	409a      	lsls	r2, r3
    2e1c:	4315      	orrs	r5, r2
    2e1e:	1e6a      	subs	r2, r5, #1
    2e20:	4195      	sbcs	r5, r2
    2e22:	2700      	movs	r7, #0
    2e24:	4325      	orrs	r5, r4
    2e26:	2400      	movs	r4, #0
    2e28:	e71f      	b.n	2c6a <__aeabi_dsub+0x182>
    2e2a:	4663      	mov	r3, ip
    2e2c:	0002      	movs	r2, r0
    2e2e:	3b20      	subs	r3, #32
    2e30:	40da      	lsrs	r2, r3
    2e32:	4663      	mov	r3, ip
    2e34:	2b20      	cmp	r3, #32
    2e36:	d071      	beq.n	2f1c <__aeabi_dsub+0x434>
    2e38:	2340      	movs	r3, #64	; 0x40
    2e3a:	4666      	mov	r6, ip
    2e3c:	1b9b      	subs	r3, r3, r6
    2e3e:	4098      	lsls	r0, r3
    2e40:	4301      	orrs	r1, r0
    2e42:	1e48      	subs	r0, r1, #1
    2e44:	4181      	sbcs	r1, r0
    2e46:	4311      	orrs	r1, r2
    2e48:	2200      	movs	r2, #0
    2e4a:	e6cf      	b.n	2bec <__aeabi_dsub+0x104>
    2e4c:	000007ff 	.word	0x000007ff
    2e50:	ff7fffff 	.word	0xff7fffff
    2e54:	800fffff 	.word	0x800fffff
    2e58:	2c00      	cmp	r4, #0
    2e5a:	d048      	beq.n	2eee <__aeabi_dsub+0x406>
    2e5c:	4cca      	ldr	r4, [pc, #808]	; (3188 <__aeabi_dsub+0x6a0>)
    2e5e:	42a2      	cmp	r2, r4
    2e60:	d100      	bne.n	2e64 <__aeabi_dsub+0x37c>
    2e62:	e0a2      	b.n	2faa <__aeabi_dsub+0x4c2>
    2e64:	4274      	negs	r4, r6
    2e66:	46a1      	mov	r9, r4
    2e68:	2480      	movs	r4, #128	; 0x80
    2e6a:	0424      	lsls	r4, r4, #16
    2e6c:	4327      	orrs	r7, r4
    2e6e:	464c      	mov	r4, r9
    2e70:	2c38      	cmp	r4, #56	; 0x38
    2e72:	dd00      	ble.n	2e76 <__aeabi_dsub+0x38e>
    2e74:	e0db      	b.n	302e <__aeabi_dsub+0x546>
    2e76:	2c1f      	cmp	r4, #31
    2e78:	dd00      	ble.n	2e7c <__aeabi_dsub+0x394>
    2e7a:	e144      	b.n	3106 <__aeabi_dsub+0x61e>
    2e7c:	464e      	mov	r6, r9
    2e7e:	2420      	movs	r4, #32
    2e80:	1ba4      	subs	r4, r4, r6
    2e82:	003e      	movs	r6, r7
    2e84:	40a6      	lsls	r6, r4
    2e86:	46a2      	mov	sl, r4
    2e88:	46b0      	mov	r8, r6
    2e8a:	464c      	mov	r4, r9
    2e8c:	002e      	movs	r6, r5
    2e8e:	40e6      	lsrs	r6, r4
    2e90:	46b4      	mov	ip, r6
    2e92:	4646      	mov	r6, r8
    2e94:	4664      	mov	r4, ip
    2e96:	4326      	orrs	r6, r4
    2e98:	4654      	mov	r4, sl
    2e9a:	40a5      	lsls	r5, r4
    2e9c:	1e6c      	subs	r4, r5, #1
    2e9e:	41a5      	sbcs	r5, r4
    2ea0:	0034      	movs	r4, r6
    2ea2:	432c      	orrs	r4, r5
    2ea4:	464d      	mov	r5, r9
    2ea6:	40ef      	lsrs	r7, r5
    2ea8:	1b0d      	subs	r5, r1, r4
    2eaa:	e028      	b.n	2efe <__aeabi_dsub+0x416>
    2eac:	464a      	mov	r2, r9
    2eae:	4643      	mov	r3, r8
    2eb0:	464d      	mov	r5, r9
    2eb2:	431a      	orrs	r2, r3
    2eb4:	d000      	beq.n	2eb8 <__aeabi_dsub+0x3d0>
    2eb6:	e6a5      	b.n	2c04 <__aeabi_dsub+0x11c>
    2eb8:	2300      	movs	r3, #0
    2eba:	2400      	movs	r4, #0
    2ebc:	2500      	movs	r5, #0
    2ebe:	e6de      	b.n	2c7e <__aeabi_dsub+0x196>
    2ec0:	2a1f      	cmp	r2, #31
    2ec2:	dc5a      	bgt.n	2f7a <__aeabi_dsub+0x492>
    2ec4:	4666      	mov	r6, ip
    2ec6:	2220      	movs	r2, #32
    2ec8:	1b92      	subs	r2, r2, r6
    2eca:	0006      	movs	r6, r0
    2ecc:	4096      	lsls	r6, r2
    2ece:	4691      	mov	r9, r2
    2ed0:	46b0      	mov	r8, r6
    2ed2:	4662      	mov	r2, ip
    2ed4:	000e      	movs	r6, r1
    2ed6:	40d6      	lsrs	r6, r2
    2ed8:	4642      	mov	r2, r8
    2eda:	4316      	orrs	r6, r2
    2edc:	464a      	mov	r2, r9
    2ede:	4091      	lsls	r1, r2
    2ee0:	1e4a      	subs	r2, r1, #1
    2ee2:	4191      	sbcs	r1, r2
    2ee4:	0002      	movs	r2, r0
    2ee6:	4660      	mov	r0, ip
    2ee8:	4331      	orrs	r1, r6
    2eea:	40c2      	lsrs	r2, r0
    2eec:	e6e4      	b.n	2cb8 <__aeabi_dsub+0x1d0>
    2eee:	003c      	movs	r4, r7
    2ef0:	432c      	orrs	r4, r5
    2ef2:	d05a      	beq.n	2faa <__aeabi_dsub+0x4c2>
    2ef4:	43f4      	mvns	r4, r6
    2ef6:	46a1      	mov	r9, r4
    2ef8:	2c00      	cmp	r4, #0
    2efa:	d152      	bne.n	2fa2 <__aeabi_dsub+0x4ba>
    2efc:	1b4d      	subs	r5, r1, r5
    2efe:	42a9      	cmp	r1, r5
    2f00:	4189      	sbcs	r1, r1
    2f02:	1bc7      	subs	r7, r0, r7
    2f04:	4249      	negs	r1, r1
    2f06:	1a7f      	subs	r7, r7, r1
    2f08:	0014      	movs	r4, r2
    2f0a:	469a      	mov	sl, r3
    2f0c:	e675      	b.n	2bfa <__aeabi_dsub+0x112>
    2f0e:	4a9e      	ldr	r2, [pc, #632]	; (3188 <__aeabi_dsub+0x6a0>)
    2f10:	4294      	cmp	r4, r2
    2f12:	d000      	beq.n	2f16 <__aeabi_dsub+0x42e>
    2f14:	e6c7      	b.n	2ca6 <__aeabi_dsub+0x1be>
    2f16:	e613      	b.n	2b40 <__aeabi_dsub+0x58>
    2f18:	2200      	movs	r2, #0
    2f1a:	e77f      	b.n	2e1c <__aeabi_dsub+0x334>
    2f1c:	2000      	movs	r0, #0
    2f1e:	e78f      	b.n	2e40 <__aeabi_dsub+0x358>
    2f20:	2c00      	cmp	r4, #0
    2f22:	d000      	beq.n	2f26 <__aeabi_dsub+0x43e>
    2f24:	e0c8      	b.n	30b8 <__aeabi_dsub+0x5d0>
    2f26:	003b      	movs	r3, r7
    2f28:	432b      	orrs	r3, r5
    2f2a:	d100      	bne.n	2f2e <__aeabi_dsub+0x446>
    2f2c:	e10f      	b.n	314e <__aeabi_dsub+0x666>
    2f2e:	0003      	movs	r3, r0
    2f30:	430b      	orrs	r3, r1
    2f32:	d100      	bne.n	2f36 <__aeabi_dsub+0x44e>
    2f34:	e604      	b.n	2b40 <__aeabi_dsub+0x58>
    2f36:	1869      	adds	r1, r5, r1
    2f38:	42a9      	cmp	r1, r5
    2f3a:	419b      	sbcs	r3, r3
    2f3c:	183f      	adds	r7, r7, r0
    2f3e:	425b      	negs	r3, r3
    2f40:	19df      	adds	r7, r3, r7
    2f42:	023b      	lsls	r3, r7, #8
    2f44:	d400      	bmi.n	2f48 <__aeabi_dsub+0x460>
    2f46:	e11a      	b.n	317e <__aeabi_dsub+0x696>
    2f48:	4b90      	ldr	r3, [pc, #576]	; (318c <__aeabi_dsub+0x6a4>)
    2f4a:	000d      	movs	r5, r1
    2f4c:	401f      	ands	r7, r3
    2f4e:	4664      	mov	r4, ip
    2f50:	e5f6      	b.n	2b40 <__aeabi_dsub+0x58>
    2f52:	469a      	mov	sl, r3
    2f54:	e689      	b.n	2c6a <__aeabi_dsub+0x182>
    2f56:	003a      	movs	r2, r7
    2f58:	432a      	orrs	r2, r5
    2f5a:	2c00      	cmp	r4, #0
    2f5c:	d15c      	bne.n	3018 <__aeabi_dsub+0x530>
    2f5e:	2a00      	cmp	r2, #0
    2f60:	d175      	bne.n	304e <__aeabi_dsub+0x566>
    2f62:	0002      	movs	r2, r0
    2f64:	430a      	orrs	r2, r1
    2f66:	d100      	bne.n	2f6a <__aeabi_dsub+0x482>
    2f68:	e0ca      	b.n	3100 <__aeabi_dsub+0x618>
    2f6a:	0007      	movs	r7, r0
    2f6c:	000d      	movs	r5, r1
    2f6e:	469a      	mov	sl, r3
    2f70:	e5e6      	b.n	2b40 <__aeabi_dsub+0x58>
    2f72:	4664      	mov	r4, ip
    2f74:	2200      	movs	r2, #0
    2f76:	2500      	movs	r5, #0
    2f78:	e681      	b.n	2c7e <__aeabi_dsub+0x196>
    2f7a:	4662      	mov	r2, ip
    2f7c:	0006      	movs	r6, r0
    2f7e:	3a20      	subs	r2, #32
    2f80:	40d6      	lsrs	r6, r2
    2f82:	4662      	mov	r2, ip
    2f84:	46b0      	mov	r8, r6
    2f86:	2a20      	cmp	r2, #32
    2f88:	d100      	bne.n	2f8c <__aeabi_dsub+0x4a4>
    2f8a:	e0b7      	b.n	30fc <__aeabi_dsub+0x614>
    2f8c:	2240      	movs	r2, #64	; 0x40
    2f8e:	4666      	mov	r6, ip
    2f90:	1b92      	subs	r2, r2, r6
    2f92:	4090      	lsls	r0, r2
    2f94:	4301      	orrs	r1, r0
    2f96:	4642      	mov	r2, r8
    2f98:	1e48      	subs	r0, r1, #1
    2f9a:	4181      	sbcs	r1, r0
    2f9c:	4311      	orrs	r1, r2
    2f9e:	2200      	movs	r2, #0
    2fa0:	e68a      	b.n	2cb8 <__aeabi_dsub+0x1d0>
    2fa2:	4c79      	ldr	r4, [pc, #484]	; (3188 <__aeabi_dsub+0x6a0>)
    2fa4:	42a2      	cmp	r2, r4
    2fa6:	d000      	beq.n	2faa <__aeabi_dsub+0x4c2>
    2fa8:	e761      	b.n	2e6e <__aeabi_dsub+0x386>
    2faa:	0007      	movs	r7, r0
    2fac:	000d      	movs	r5, r1
    2fae:	0014      	movs	r4, r2
    2fb0:	469a      	mov	sl, r3
    2fb2:	e5c5      	b.n	2b40 <__aeabi_dsub+0x58>
    2fb4:	2c00      	cmp	r4, #0
    2fb6:	d141      	bne.n	303c <__aeabi_dsub+0x554>
    2fb8:	003c      	movs	r4, r7
    2fba:	432c      	orrs	r4, r5
    2fbc:	d078      	beq.n	30b0 <__aeabi_dsub+0x5c8>
    2fbe:	43f4      	mvns	r4, r6
    2fc0:	46a1      	mov	r9, r4
    2fc2:	2c00      	cmp	r4, #0
    2fc4:	d020      	beq.n	3008 <__aeabi_dsub+0x520>
    2fc6:	4c70      	ldr	r4, [pc, #448]	; (3188 <__aeabi_dsub+0x6a0>)
    2fc8:	42a2      	cmp	r2, r4
    2fca:	d071      	beq.n	30b0 <__aeabi_dsub+0x5c8>
    2fcc:	464c      	mov	r4, r9
    2fce:	2c38      	cmp	r4, #56	; 0x38
    2fd0:	dd00      	ble.n	2fd4 <__aeabi_dsub+0x4ec>
    2fd2:	e0b2      	b.n	313a <__aeabi_dsub+0x652>
    2fd4:	2c1f      	cmp	r4, #31
    2fd6:	dd00      	ble.n	2fda <__aeabi_dsub+0x4f2>
    2fd8:	e0bc      	b.n	3154 <__aeabi_dsub+0x66c>
    2fda:	2620      	movs	r6, #32
    2fdc:	1b34      	subs	r4, r6, r4
    2fde:	46a2      	mov	sl, r4
    2fe0:	003c      	movs	r4, r7
    2fe2:	4656      	mov	r6, sl
    2fe4:	40b4      	lsls	r4, r6
    2fe6:	464e      	mov	r6, r9
    2fe8:	46a0      	mov	r8, r4
    2fea:	002c      	movs	r4, r5
    2fec:	40f4      	lsrs	r4, r6
    2fee:	46a4      	mov	ip, r4
    2ff0:	4644      	mov	r4, r8
    2ff2:	4666      	mov	r6, ip
    2ff4:	4334      	orrs	r4, r6
    2ff6:	46a4      	mov	ip, r4
    2ff8:	4654      	mov	r4, sl
    2ffa:	40a5      	lsls	r5, r4
    2ffc:	4664      	mov	r4, ip
    2ffe:	1e6e      	subs	r6, r5, #1
    3000:	41b5      	sbcs	r5, r6
    3002:	4325      	orrs	r5, r4
    3004:	464c      	mov	r4, r9
    3006:	40e7      	lsrs	r7, r4
    3008:	186d      	adds	r5, r5, r1
    300a:	428d      	cmp	r5, r1
    300c:	4189      	sbcs	r1, r1
    300e:	183f      	adds	r7, r7, r0
    3010:	4249      	negs	r1, r1
    3012:	19cf      	adds	r7, r1, r7
    3014:	0014      	movs	r4, r2
    3016:	e656      	b.n	2cc6 <__aeabi_dsub+0x1de>
    3018:	2a00      	cmp	r2, #0
    301a:	d12f      	bne.n	307c <__aeabi_dsub+0x594>
    301c:	0002      	movs	r2, r0
    301e:	430a      	orrs	r2, r1
    3020:	d100      	bne.n	3024 <__aeabi_dsub+0x53c>
    3022:	e084      	b.n	312e <__aeabi_dsub+0x646>
    3024:	0007      	movs	r7, r0
    3026:	000d      	movs	r5, r1
    3028:	469a      	mov	sl, r3
    302a:	4c57      	ldr	r4, [pc, #348]	; (3188 <__aeabi_dsub+0x6a0>)
    302c:	e588      	b.n	2b40 <__aeabi_dsub+0x58>
    302e:	433d      	orrs	r5, r7
    3030:	1e6f      	subs	r7, r5, #1
    3032:	41bd      	sbcs	r5, r7
    3034:	b2ec      	uxtb	r4, r5
    3036:	2700      	movs	r7, #0
    3038:	1b0d      	subs	r5, r1, r4
    303a:	e760      	b.n	2efe <__aeabi_dsub+0x416>
    303c:	4c52      	ldr	r4, [pc, #328]	; (3188 <__aeabi_dsub+0x6a0>)
    303e:	42a2      	cmp	r2, r4
    3040:	d036      	beq.n	30b0 <__aeabi_dsub+0x5c8>
    3042:	4274      	negs	r4, r6
    3044:	2680      	movs	r6, #128	; 0x80
    3046:	0436      	lsls	r6, r6, #16
    3048:	46a1      	mov	r9, r4
    304a:	4337      	orrs	r7, r6
    304c:	e7be      	b.n	2fcc <__aeabi_dsub+0x4e4>
    304e:	0002      	movs	r2, r0
    3050:	430a      	orrs	r2, r1
    3052:	d100      	bne.n	3056 <__aeabi_dsub+0x56e>
    3054:	e574      	b.n	2b40 <__aeabi_dsub+0x58>
    3056:	1a6a      	subs	r2, r5, r1
    3058:	4690      	mov	r8, r2
    305a:	4545      	cmp	r5, r8
    305c:	41b6      	sbcs	r6, r6
    305e:	1a3a      	subs	r2, r7, r0
    3060:	4276      	negs	r6, r6
    3062:	1b92      	subs	r2, r2, r6
    3064:	4694      	mov	ip, r2
    3066:	0212      	lsls	r2, r2, #8
    3068:	d400      	bmi.n	306c <__aeabi_dsub+0x584>
    306a:	e5f7      	b.n	2c5c <__aeabi_dsub+0x174>
    306c:	1b4d      	subs	r5, r1, r5
    306e:	42a9      	cmp	r1, r5
    3070:	4189      	sbcs	r1, r1
    3072:	1bc7      	subs	r7, r0, r7
    3074:	4249      	negs	r1, r1
    3076:	1a7f      	subs	r7, r7, r1
    3078:	469a      	mov	sl, r3
    307a:	e561      	b.n	2b40 <__aeabi_dsub+0x58>
    307c:	0002      	movs	r2, r0
    307e:	430a      	orrs	r2, r1
    3080:	d03a      	beq.n	30f8 <__aeabi_dsub+0x610>
    3082:	08ed      	lsrs	r5, r5, #3
    3084:	077c      	lsls	r4, r7, #29
    3086:	432c      	orrs	r4, r5
    3088:	2580      	movs	r5, #128	; 0x80
    308a:	08fa      	lsrs	r2, r7, #3
    308c:	032d      	lsls	r5, r5, #12
    308e:	422a      	tst	r2, r5
    3090:	d008      	beq.n	30a4 <__aeabi_dsub+0x5bc>
    3092:	08c7      	lsrs	r7, r0, #3
    3094:	422f      	tst	r7, r5
    3096:	d105      	bne.n	30a4 <__aeabi_dsub+0x5bc>
    3098:	0745      	lsls	r5, r0, #29
    309a:	002c      	movs	r4, r5
    309c:	003a      	movs	r2, r7
    309e:	469a      	mov	sl, r3
    30a0:	08c9      	lsrs	r1, r1, #3
    30a2:	430c      	orrs	r4, r1
    30a4:	0f67      	lsrs	r7, r4, #29
    30a6:	00d2      	lsls	r2, r2, #3
    30a8:	00e5      	lsls	r5, r4, #3
    30aa:	4317      	orrs	r7, r2
    30ac:	4c36      	ldr	r4, [pc, #216]	; (3188 <__aeabi_dsub+0x6a0>)
    30ae:	e547      	b.n	2b40 <__aeabi_dsub+0x58>
    30b0:	0007      	movs	r7, r0
    30b2:	000d      	movs	r5, r1
    30b4:	0014      	movs	r4, r2
    30b6:	e543      	b.n	2b40 <__aeabi_dsub+0x58>
    30b8:	003a      	movs	r2, r7
    30ba:	432a      	orrs	r2, r5
    30bc:	d043      	beq.n	3146 <__aeabi_dsub+0x65e>
    30be:	0002      	movs	r2, r0
    30c0:	430a      	orrs	r2, r1
    30c2:	d019      	beq.n	30f8 <__aeabi_dsub+0x610>
    30c4:	08ed      	lsrs	r5, r5, #3
    30c6:	077c      	lsls	r4, r7, #29
    30c8:	432c      	orrs	r4, r5
    30ca:	2580      	movs	r5, #128	; 0x80
    30cc:	08fa      	lsrs	r2, r7, #3
    30ce:	032d      	lsls	r5, r5, #12
    30d0:	422a      	tst	r2, r5
    30d2:	d007      	beq.n	30e4 <__aeabi_dsub+0x5fc>
    30d4:	08c6      	lsrs	r6, r0, #3
    30d6:	422e      	tst	r6, r5
    30d8:	d104      	bne.n	30e4 <__aeabi_dsub+0x5fc>
    30da:	0747      	lsls	r7, r0, #29
    30dc:	003c      	movs	r4, r7
    30de:	0032      	movs	r2, r6
    30e0:	08c9      	lsrs	r1, r1, #3
    30e2:	430c      	orrs	r4, r1
    30e4:	00d7      	lsls	r7, r2, #3
    30e6:	0f62      	lsrs	r2, r4, #29
    30e8:	00e5      	lsls	r5, r4, #3
    30ea:	4317      	orrs	r7, r2
    30ec:	469a      	mov	sl, r3
    30ee:	4c26      	ldr	r4, [pc, #152]	; (3188 <__aeabi_dsub+0x6a0>)
    30f0:	e526      	b.n	2b40 <__aeabi_dsub+0x58>
    30f2:	2200      	movs	r2, #0
    30f4:	2500      	movs	r5, #0
    30f6:	e544      	b.n	2b82 <__aeabi_dsub+0x9a>
    30f8:	4c23      	ldr	r4, [pc, #140]	; (3188 <__aeabi_dsub+0x6a0>)
    30fa:	e521      	b.n	2b40 <__aeabi_dsub+0x58>
    30fc:	2000      	movs	r0, #0
    30fe:	e749      	b.n	2f94 <__aeabi_dsub+0x4ac>
    3100:	2300      	movs	r3, #0
    3102:	2500      	movs	r5, #0
    3104:	e5bb      	b.n	2c7e <__aeabi_dsub+0x196>
    3106:	464c      	mov	r4, r9
    3108:	003e      	movs	r6, r7
    310a:	3c20      	subs	r4, #32
    310c:	40e6      	lsrs	r6, r4
    310e:	464c      	mov	r4, r9
    3110:	46b4      	mov	ip, r6
    3112:	2c20      	cmp	r4, #32
    3114:	d031      	beq.n	317a <__aeabi_dsub+0x692>
    3116:	2440      	movs	r4, #64	; 0x40
    3118:	464e      	mov	r6, r9
    311a:	1ba6      	subs	r6, r4, r6
    311c:	40b7      	lsls	r7, r6
    311e:	433d      	orrs	r5, r7
    3120:	1e6c      	subs	r4, r5, #1
    3122:	41a5      	sbcs	r5, r4
    3124:	4664      	mov	r4, ip
    3126:	432c      	orrs	r4, r5
    3128:	2700      	movs	r7, #0
    312a:	1b0d      	subs	r5, r1, r4
    312c:	e6e7      	b.n	2efe <__aeabi_dsub+0x416>
    312e:	2280      	movs	r2, #128	; 0x80
    3130:	2300      	movs	r3, #0
    3132:	0312      	lsls	r2, r2, #12
    3134:	4c14      	ldr	r4, [pc, #80]	; (3188 <__aeabi_dsub+0x6a0>)
    3136:	2500      	movs	r5, #0
    3138:	e5a1      	b.n	2c7e <__aeabi_dsub+0x196>
    313a:	433d      	orrs	r5, r7
    313c:	1e6f      	subs	r7, r5, #1
    313e:	41bd      	sbcs	r5, r7
    3140:	2700      	movs	r7, #0
    3142:	b2ed      	uxtb	r5, r5
    3144:	e760      	b.n	3008 <__aeabi_dsub+0x520>
    3146:	0007      	movs	r7, r0
    3148:	000d      	movs	r5, r1
    314a:	4c0f      	ldr	r4, [pc, #60]	; (3188 <__aeabi_dsub+0x6a0>)
    314c:	e4f8      	b.n	2b40 <__aeabi_dsub+0x58>
    314e:	0007      	movs	r7, r0
    3150:	000d      	movs	r5, r1
    3152:	e4f5      	b.n	2b40 <__aeabi_dsub+0x58>
    3154:	464e      	mov	r6, r9
    3156:	003c      	movs	r4, r7
    3158:	3e20      	subs	r6, #32
    315a:	40f4      	lsrs	r4, r6
    315c:	46a0      	mov	r8, r4
    315e:	464c      	mov	r4, r9
    3160:	2c20      	cmp	r4, #32
    3162:	d00e      	beq.n	3182 <__aeabi_dsub+0x69a>
    3164:	2440      	movs	r4, #64	; 0x40
    3166:	464e      	mov	r6, r9
    3168:	1ba4      	subs	r4, r4, r6
    316a:	40a7      	lsls	r7, r4
    316c:	433d      	orrs	r5, r7
    316e:	1e6f      	subs	r7, r5, #1
    3170:	41bd      	sbcs	r5, r7
    3172:	4644      	mov	r4, r8
    3174:	2700      	movs	r7, #0
    3176:	4325      	orrs	r5, r4
    3178:	e746      	b.n	3008 <__aeabi_dsub+0x520>
    317a:	2700      	movs	r7, #0
    317c:	e7cf      	b.n	311e <__aeabi_dsub+0x636>
    317e:	000d      	movs	r5, r1
    3180:	e573      	b.n	2c6a <__aeabi_dsub+0x182>
    3182:	2700      	movs	r7, #0
    3184:	e7f2      	b.n	316c <__aeabi_dsub+0x684>
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	000007ff 	.word	0x000007ff
    318c:	ff7fffff 	.word	0xff7fffff

00003190 <__aeabi_d2iz>:
    3190:	030b      	lsls	r3, r1, #12
    3192:	b530      	push	{r4, r5, lr}
    3194:	4d13      	ldr	r5, [pc, #76]	; (31e4 <__aeabi_d2iz+0x54>)
    3196:	0b1a      	lsrs	r2, r3, #12
    3198:	004b      	lsls	r3, r1, #1
    319a:	0d5b      	lsrs	r3, r3, #21
    319c:	0fc9      	lsrs	r1, r1, #31
    319e:	2400      	movs	r4, #0
    31a0:	42ab      	cmp	r3, r5
    31a2:	dd11      	ble.n	31c8 <__aeabi_d2iz+0x38>
    31a4:	4c10      	ldr	r4, [pc, #64]	; (31e8 <__aeabi_d2iz+0x58>)
    31a6:	42a3      	cmp	r3, r4
    31a8:	dc10      	bgt.n	31cc <__aeabi_d2iz+0x3c>
    31aa:	2480      	movs	r4, #128	; 0x80
    31ac:	0364      	lsls	r4, r4, #13
    31ae:	4322      	orrs	r2, r4
    31b0:	4c0e      	ldr	r4, [pc, #56]	; (31ec <__aeabi_d2iz+0x5c>)
    31b2:	1ae4      	subs	r4, r4, r3
    31b4:	2c1f      	cmp	r4, #31
    31b6:	dd0c      	ble.n	31d2 <__aeabi_d2iz+0x42>
    31b8:	480d      	ldr	r0, [pc, #52]	; (31f0 <__aeabi_d2iz+0x60>)
    31ba:	1ac3      	subs	r3, r0, r3
    31bc:	40da      	lsrs	r2, r3
    31be:	0013      	movs	r3, r2
    31c0:	425c      	negs	r4, r3
    31c2:	2900      	cmp	r1, #0
    31c4:	d100      	bne.n	31c8 <__aeabi_d2iz+0x38>
    31c6:	001c      	movs	r4, r3
    31c8:	0020      	movs	r0, r4
    31ca:	bd30      	pop	{r4, r5, pc}
    31cc:	4b09      	ldr	r3, [pc, #36]	; (31f4 <__aeabi_d2iz+0x64>)
    31ce:	18cc      	adds	r4, r1, r3
    31d0:	e7fa      	b.n	31c8 <__aeabi_d2iz+0x38>
    31d2:	40e0      	lsrs	r0, r4
    31d4:	4c08      	ldr	r4, [pc, #32]	; (31f8 <__aeabi_d2iz+0x68>)
    31d6:	46a4      	mov	ip, r4
    31d8:	4463      	add	r3, ip
    31da:	409a      	lsls	r2, r3
    31dc:	0013      	movs	r3, r2
    31de:	4303      	orrs	r3, r0
    31e0:	e7ee      	b.n	31c0 <__aeabi_d2iz+0x30>
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	000003fe 	.word	0x000003fe
    31e8:	0000041d 	.word	0x0000041d
    31ec:	00000433 	.word	0x00000433
    31f0:	00000413 	.word	0x00000413
    31f4:	7fffffff 	.word	0x7fffffff
    31f8:	fffffbed 	.word	0xfffffbed

000031fc <__aeabi_i2d>:
    31fc:	b570      	push	{r4, r5, r6, lr}
    31fe:	2800      	cmp	r0, #0
    3200:	d030      	beq.n	3264 <__aeabi_i2d+0x68>
    3202:	17c3      	asrs	r3, r0, #31
    3204:	18c4      	adds	r4, r0, r3
    3206:	405c      	eors	r4, r3
    3208:	0fc5      	lsrs	r5, r0, #31
    320a:	0020      	movs	r0, r4
    320c:	f000 f950 	bl	34b0 <__clzsi2>
    3210:	4b17      	ldr	r3, [pc, #92]	; (3270 <__aeabi_i2d+0x74>)
    3212:	4a18      	ldr	r2, [pc, #96]	; (3274 <__aeabi_i2d+0x78>)
    3214:	1a1b      	subs	r3, r3, r0
    3216:	1ad2      	subs	r2, r2, r3
    3218:	2a1f      	cmp	r2, #31
    321a:	dd18      	ble.n	324e <__aeabi_i2d+0x52>
    321c:	4a16      	ldr	r2, [pc, #88]	; (3278 <__aeabi_i2d+0x7c>)
    321e:	1ad2      	subs	r2, r2, r3
    3220:	4094      	lsls	r4, r2
    3222:	2200      	movs	r2, #0
    3224:	0324      	lsls	r4, r4, #12
    3226:	055b      	lsls	r3, r3, #21
    3228:	0b24      	lsrs	r4, r4, #12
    322a:	0d5b      	lsrs	r3, r3, #21
    322c:	2100      	movs	r1, #0
    322e:	0010      	movs	r0, r2
    3230:	0324      	lsls	r4, r4, #12
    3232:	0d0a      	lsrs	r2, r1, #20
    3234:	0512      	lsls	r2, r2, #20
    3236:	0b24      	lsrs	r4, r4, #12
    3238:	4314      	orrs	r4, r2
    323a:	4a10      	ldr	r2, [pc, #64]	; (327c <__aeabi_i2d+0x80>)
    323c:	051b      	lsls	r3, r3, #20
    323e:	4014      	ands	r4, r2
    3240:	431c      	orrs	r4, r3
    3242:	0064      	lsls	r4, r4, #1
    3244:	07ed      	lsls	r5, r5, #31
    3246:	0864      	lsrs	r4, r4, #1
    3248:	432c      	orrs	r4, r5
    324a:	0021      	movs	r1, r4
    324c:	bd70      	pop	{r4, r5, r6, pc}
    324e:	0021      	movs	r1, r4
    3250:	4091      	lsls	r1, r2
    3252:	000a      	movs	r2, r1
    3254:	210b      	movs	r1, #11
    3256:	1a08      	subs	r0, r1, r0
    3258:	40c4      	lsrs	r4, r0
    325a:	055b      	lsls	r3, r3, #21
    325c:	0324      	lsls	r4, r4, #12
    325e:	0b24      	lsrs	r4, r4, #12
    3260:	0d5b      	lsrs	r3, r3, #21
    3262:	e7e3      	b.n	322c <__aeabi_i2d+0x30>
    3264:	2500      	movs	r5, #0
    3266:	2300      	movs	r3, #0
    3268:	2400      	movs	r4, #0
    326a:	2200      	movs	r2, #0
    326c:	e7de      	b.n	322c <__aeabi_i2d+0x30>
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	0000041e 	.word	0x0000041e
    3274:	00000433 	.word	0x00000433
    3278:	00000413 	.word	0x00000413
    327c:	800fffff 	.word	0x800fffff

00003280 <__aeabi_ui2d>:
    3280:	b570      	push	{r4, r5, r6, lr}
    3282:	1e05      	subs	r5, r0, #0
    3284:	d028      	beq.n	32d8 <__aeabi_ui2d+0x58>
    3286:	f000 f913 	bl	34b0 <__clzsi2>
    328a:	4b15      	ldr	r3, [pc, #84]	; (32e0 <__aeabi_ui2d+0x60>)
    328c:	4a15      	ldr	r2, [pc, #84]	; (32e4 <__aeabi_ui2d+0x64>)
    328e:	1a1b      	subs	r3, r3, r0
    3290:	1ad2      	subs	r2, r2, r3
    3292:	2a1f      	cmp	r2, #31
    3294:	dd16      	ble.n	32c4 <__aeabi_ui2d+0x44>
    3296:	002c      	movs	r4, r5
    3298:	4a13      	ldr	r2, [pc, #76]	; (32e8 <__aeabi_ui2d+0x68>)
    329a:	2500      	movs	r5, #0
    329c:	1ad2      	subs	r2, r2, r3
    329e:	4094      	lsls	r4, r2
    32a0:	055a      	lsls	r2, r3, #21
    32a2:	0324      	lsls	r4, r4, #12
    32a4:	0b24      	lsrs	r4, r4, #12
    32a6:	0d52      	lsrs	r2, r2, #21
    32a8:	2100      	movs	r1, #0
    32aa:	0324      	lsls	r4, r4, #12
    32ac:	0d0b      	lsrs	r3, r1, #20
    32ae:	0b24      	lsrs	r4, r4, #12
    32b0:	051b      	lsls	r3, r3, #20
    32b2:	4323      	orrs	r3, r4
    32b4:	4c0d      	ldr	r4, [pc, #52]	; (32ec <__aeabi_ui2d+0x6c>)
    32b6:	0512      	lsls	r2, r2, #20
    32b8:	4023      	ands	r3, r4
    32ba:	4313      	orrs	r3, r2
    32bc:	005b      	lsls	r3, r3, #1
    32be:	0028      	movs	r0, r5
    32c0:	0859      	lsrs	r1, r3, #1
    32c2:	bd70      	pop	{r4, r5, r6, pc}
    32c4:	210b      	movs	r1, #11
    32c6:	002c      	movs	r4, r5
    32c8:	1a08      	subs	r0, r1, r0
    32ca:	40c4      	lsrs	r4, r0
    32cc:	4095      	lsls	r5, r2
    32ce:	0324      	lsls	r4, r4, #12
    32d0:	055a      	lsls	r2, r3, #21
    32d2:	0b24      	lsrs	r4, r4, #12
    32d4:	0d52      	lsrs	r2, r2, #21
    32d6:	e7e7      	b.n	32a8 <__aeabi_ui2d+0x28>
    32d8:	2200      	movs	r2, #0
    32da:	2400      	movs	r4, #0
    32dc:	e7e4      	b.n	32a8 <__aeabi_ui2d+0x28>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	0000041e 	.word	0x0000041e
    32e4:	00000433 	.word	0x00000433
    32e8:	00000413 	.word	0x00000413
    32ec:	800fffff 	.word	0x800fffff

000032f0 <__aeabi_f2d>:
    32f0:	0042      	lsls	r2, r0, #1
    32f2:	0e12      	lsrs	r2, r2, #24
    32f4:	1c51      	adds	r1, r2, #1
    32f6:	0243      	lsls	r3, r0, #9
    32f8:	b2c9      	uxtb	r1, r1
    32fa:	b570      	push	{r4, r5, r6, lr}
    32fc:	0a5d      	lsrs	r5, r3, #9
    32fe:	0fc4      	lsrs	r4, r0, #31
    3300:	2901      	cmp	r1, #1
    3302:	dd15      	ble.n	3330 <__aeabi_f2d+0x40>
    3304:	21e0      	movs	r1, #224	; 0xe0
    3306:	0089      	lsls	r1, r1, #2
    3308:	468c      	mov	ip, r1
    330a:	076d      	lsls	r5, r5, #29
    330c:	0b1b      	lsrs	r3, r3, #12
    330e:	4462      	add	r2, ip
    3310:	2100      	movs	r1, #0
    3312:	0028      	movs	r0, r5
    3314:	0d0d      	lsrs	r5, r1, #20
    3316:	052d      	lsls	r5, r5, #20
    3318:	432b      	orrs	r3, r5
    331a:	4d1c      	ldr	r5, [pc, #112]	; (338c <__aeabi_f2d+0x9c>)
    331c:	0552      	lsls	r2, r2, #21
    331e:	402b      	ands	r3, r5
    3320:	0852      	lsrs	r2, r2, #1
    3322:	4313      	orrs	r3, r2
    3324:	005b      	lsls	r3, r3, #1
    3326:	07e4      	lsls	r4, r4, #31
    3328:	085b      	lsrs	r3, r3, #1
    332a:	4323      	orrs	r3, r4
    332c:	0019      	movs	r1, r3
    332e:	bd70      	pop	{r4, r5, r6, pc}
    3330:	2a00      	cmp	r2, #0
    3332:	d115      	bne.n	3360 <__aeabi_f2d+0x70>
    3334:	2d00      	cmp	r5, #0
    3336:	d01f      	beq.n	3378 <__aeabi_f2d+0x88>
    3338:	0028      	movs	r0, r5
    333a:	f000 f8b9 	bl	34b0 <__clzsi2>
    333e:	280a      	cmp	r0, #10
    3340:	dc1d      	bgt.n	337e <__aeabi_f2d+0x8e>
    3342:	230b      	movs	r3, #11
    3344:	002a      	movs	r2, r5
    3346:	1a1b      	subs	r3, r3, r0
    3348:	40da      	lsrs	r2, r3
    334a:	0013      	movs	r3, r2
    334c:	0002      	movs	r2, r0
    334e:	3215      	adds	r2, #21
    3350:	4095      	lsls	r5, r2
    3352:	4a0f      	ldr	r2, [pc, #60]	; (3390 <__aeabi_f2d+0xa0>)
    3354:	031b      	lsls	r3, r3, #12
    3356:	1a12      	subs	r2, r2, r0
    3358:	0552      	lsls	r2, r2, #21
    335a:	0b1b      	lsrs	r3, r3, #12
    335c:	0d52      	lsrs	r2, r2, #21
    335e:	e7d7      	b.n	3310 <__aeabi_f2d+0x20>
    3360:	2d00      	cmp	r5, #0
    3362:	d006      	beq.n	3372 <__aeabi_f2d+0x82>
    3364:	2280      	movs	r2, #128	; 0x80
    3366:	0b1b      	lsrs	r3, r3, #12
    3368:	0312      	lsls	r2, r2, #12
    336a:	4313      	orrs	r3, r2
    336c:	076d      	lsls	r5, r5, #29
    336e:	4a09      	ldr	r2, [pc, #36]	; (3394 <__aeabi_f2d+0xa4>)
    3370:	e7ce      	b.n	3310 <__aeabi_f2d+0x20>
    3372:	4a08      	ldr	r2, [pc, #32]	; (3394 <__aeabi_f2d+0xa4>)
    3374:	2300      	movs	r3, #0
    3376:	e7cb      	b.n	3310 <__aeabi_f2d+0x20>
    3378:	2200      	movs	r2, #0
    337a:	2300      	movs	r3, #0
    337c:	e7c8      	b.n	3310 <__aeabi_f2d+0x20>
    337e:	0003      	movs	r3, r0
    3380:	3b0b      	subs	r3, #11
    3382:	409d      	lsls	r5, r3
    3384:	002b      	movs	r3, r5
    3386:	2500      	movs	r5, #0
    3388:	e7e3      	b.n	3352 <__aeabi_f2d+0x62>
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	800fffff 	.word	0x800fffff
    3390:	00000389 	.word	0x00000389
    3394:	000007ff 	.word	0x000007ff

00003398 <__aeabi_d2f>:
    3398:	004b      	lsls	r3, r1, #1
    339a:	b570      	push	{r4, r5, r6, lr}
    339c:	0d5e      	lsrs	r6, r3, #21
    339e:	030c      	lsls	r4, r1, #12
    33a0:	1c75      	adds	r5, r6, #1
    33a2:	0a64      	lsrs	r4, r4, #9
    33a4:	0f42      	lsrs	r2, r0, #29
    33a6:	056d      	lsls	r5, r5, #21
    33a8:	4322      	orrs	r2, r4
    33aa:	0fc9      	lsrs	r1, r1, #31
    33ac:	00c4      	lsls	r4, r0, #3
    33ae:	0d6d      	lsrs	r5, r5, #21
    33b0:	2d01      	cmp	r5, #1
    33b2:	dd2a      	ble.n	340a <__aeabi_d2f+0x72>
    33b4:	4b3b      	ldr	r3, [pc, #236]	; (34a4 <__aeabi_d2f+0x10c>)
    33b6:	18f3      	adds	r3, r6, r3
    33b8:	2bfe      	cmp	r3, #254	; 0xfe
    33ba:	dc1a      	bgt.n	33f2 <__aeabi_d2f+0x5a>
    33bc:	2b00      	cmp	r3, #0
    33be:	dd42      	ble.n	3446 <__aeabi_d2f+0xae>
    33c0:	0180      	lsls	r0, r0, #6
    33c2:	1e45      	subs	r5, r0, #1
    33c4:	41a8      	sbcs	r0, r5
    33c6:	00d2      	lsls	r2, r2, #3
    33c8:	4310      	orrs	r0, r2
    33ca:	0f62      	lsrs	r2, r4, #29
    33cc:	4302      	orrs	r2, r0
    33ce:	0750      	lsls	r0, r2, #29
    33d0:	d004      	beq.n	33dc <__aeabi_d2f+0x44>
    33d2:	200f      	movs	r0, #15
    33d4:	4010      	ands	r0, r2
    33d6:	2804      	cmp	r0, #4
    33d8:	d000      	beq.n	33dc <__aeabi_d2f+0x44>
    33da:	3204      	adds	r2, #4
    33dc:	2080      	movs	r0, #128	; 0x80
    33de:	04c0      	lsls	r0, r0, #19
    33e0:	4010      	ands	r0, r2
    33e2:	d021      	beq.n	3428 <__aeabi_d2f+0x90>
    33e4:	3301      	adds	r3, #1
    33e6:	2bff      	cmp	r3, #255	; 0xff
    33e8:	d003      	beq.n	33f2 <__aeabi_d2f+0x5a>
    33ea:	0192      	lsls	r2, r2, #6
    33ec:	0a52      	lsrs	r2, r2, #9
    33ee:	b2db      	uxtb	r3, r3
    33f0:	e001      	b.n	33f6 <__aeabi_d2f+0x5e>
    33f2:	23ff      	movs	r3, #255	; 0xff
    33f4:	2200      	movs	r2, #0
    33f6:	0252      	lsls	r2, r2, #9
    33f8:	0a52      	lsrs	r2, r2, #9
    33fa:	05db      	lsls	r3, r3, #23
    33fc:	4313      	orrs	r3, r2
    33fe:	005b      	lsls	r3, r3, #1
    3400:	07c9      	lsls	r1, r1, #31
    3402:	085b      	lsrs	r3, r3, #1
    3404:	430b      	orrs	r3, r1
    3406:	0018      	movs	r0, r3
    3408:	bd70      	pop	{r4, r5, r6, pc}
    340a:	2e00      	cmp	r6, #0
    340c:	d007      	beq.n	341e <__aeabi_d2f+0x86>
    340e:	4314      	orrs	r4, r2
    3410:	d0ef      	beq.n	33f2 <__aeabi_d2f+0x5a>
    3412:	2080      	movs	r0, #128	; 0x80
    3414:	00d2      	lsls	r2, r2, #3
    3416:	0480      	lsls	r0, r0, #18
    3418:	4302      	orrs	r2, r0
    341a:	23ff      	movs	r3, #255	; 0xff
    341c:	e7d7      	b.n	33ce <__aeabi_d2f+0x36>
    341e:	4322      	orrs	r2, r4
    3420:	2300      	movs	r3, #0
    3422:	2a00      	cmp	r2, #0
    3424:	d003      	beq.n	342e <__aeabi_d2f+0x96>
    3426:	2205      	movs	r2, #5
    3428:	08d2      	lsrs	r2, r2, #3
    342a:	2bff      	cmp	r3, #255	; 0xff
    342c:	d003      	beq.n	3436 <__aeabi_d2f+0x9e>
    342e:	0252      	lsls	r2, r2, #9
    3430:	0a52      	lsrs	r2, r2, #9
    3432:	b2db      	uxtb	r3, r3
    3434:	e7df      	b.n	33f6 <__aeabi_d2f+0x5e>
    3436:	2a00      	cmp	r2, #0
    3438:	d032      	beq.n	34a0 <__aeabi_d2f+0x108>
    343a:	2080      	movs	r0, #128	; 0x80
    343c:	03c0      	lsls	r0, r0, #15
    343e:	4302      	orrs	r2, r0
    3440:	0252      	lsls	r2, r2, #9
    3442:	0a52      	lsrs	r2, r2, #9
    3444:	e7d7      	b.n	33f6 <__aeabi_d2f+0x5e>
    3446:	0018      	movs	r0, r3
    3448:	3017      	adds	r0, #23
    344a:	db14      	blt.n	3476 <__aeabi_d2f+0xde>
    344c:	2080      	movs	r0, #128	; 0x80
    344e:	0400      	lsls	r0, r0, #16
    3450:	4302      	orrs	r2, r0
    3452:	201e      	movs	r0, #30
    3454:	1ac0      	subs	r0, r0, r3
    3456:	281f      	cmp	r0, #31
    3458:	dc0f      	bgt.n	347a <__aeabi_d2f+0xe2>
    345a:	0025      	movs	r5, r4
    345c:	4b12      	ldr	r3, [pc, #72]	; (34a8 <__aeabi_d2f+0x110>)
    345e:	18f3      	adds	r3, r6, r3
    3460:	409d      	lsls	r5, r3
    3462:	1e6e      	subs	r6, r5, #1
    3464:	41b5      	sbcs	r5, r6
    3466:	409a      	lsls	r2, r3
    3468:	002b      	movs	r3, r5
    346a:	4313      	orrs	r3, r2
    346c:	0022      	movs	r2, r4
    346e:	40c2      	lsrs	r2, r0
    3470:	431a      	orrs	r2, r3
    3472:	2300      	movs	r3, #0
    3474:	e7ab      	b.n	33ce <__aeabi_d2f+0x36>
    3476:	2300      	movs	r3, #0
    3478:	e7d5      	b.n	3426 <__aeabi_d2f+0x8e>
    347a:	2502      	movs	r5, #2
    347c:	426d      	negs	r5, r5
    347e:	1aeb      	subs	r3, r5, r3
    3480:	0015      	movs	r5, r2
    3482:	40dd      	lsrs	r5, r3
    3484:	2820      	cmp	r0, #32
    3486:	d009      	beq.n	349c <__aeabi_d2f+0x104>
    3488:	4b08      	ldr	r3, [pc, #32]	; (34ac <__aeabi_d2f+0x114>)
    348a:	18f3      	adds	r3, r6, r3
    348c:	409a      	lsls	r2, r3
    348e:	4314      	orrs	r4, r2
    3490:	1e62      	subs	r2, r4, #1
    3492:	4194      	sbcs	r4, r2
    3494:	0022      	movs	r2, r4
    3496:	2300      	movs	r3, #0
    3498:	432a      	orrs	r2, r5
    349a:	e798      	b.n	33ce <__aeabi_d2f+0x36>
    349c:	2200      	movs	r2, #0
    349e:	e7f6      	b.n	348e <__aeabi_d2f+0xf6>
    34a0:	2200      	movs	r2, #0
    34a2:	e7a8      	b.n	33f6 <__aeabi_d2f+0x5e>
    34a4:	fffffc80 	.word	0xfffffc80
    34a8:	fffffc82 	.word	0xfffffc82
    34ac:	fffffca2 	.word	0xfffffca2

000034b0 <__clzsi2>:
    34b0:	211c      	movs	r1, #28
    34b2:	2301      	movs	r3, #1
    34b4:	041b      	lsls	r3, r3, #16
    34b6:	4298      	cmp	r0, r3
    34b8:	d301      	bcc.n	34be <__clzsi2+0xe>
    34ba:	0c00      	lsrs	r0, r0, #16
    34bc:	3910      	subs	r1, #16
    34be:	0a1b      	lsrs	r3, r3, #8
    34c0:	4298      	cmp	r0, r3
    34c2:	d301      	bcc.n	34c8 <__clzsi2+0x18>
    34c4:	0a00      	lsrs	r0, r0, #8
    34c6:	3908      	subs	r1, #8
    34c8:	091b      	lsrs	r3, r3, #4
    34ca:	4298      	cmp	r0, r3
    34cc:	d301      	bcc.n	34d2 <__clzsi2+0x22>
    34ce:	0900      	lsrs	r0, r0, #4
    34d0:	3904      	subs	r1, #4
    34d2:	a202      	add	r2, pc, #8	; (adr r2, 34dc <__clzsi2+0x2c>)
    34d4:	5c10      	ldrb	r0, [r2, r0]
    34d6:	1840      	adds	r0, r0, r1
    34d8:	4770      	bx	lr
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	02020304 	.word	0x02020304
    34e0:	01010101 	.word	0x01010101
	...

000034ec <__libc_init_array>:
    34ec:	b570      	push	{r4, r5, r6, lr}
    34ee:	4e0d      	ldr	r6, [pc, #52]	; (3524 <__libc_init_array+0x38>)
    34f0:	4d0d      	ldr	r5, [pc, #52]	; (3528 <__libc_init_array+0x3c>)
    34f2:	2400      	movs	r4, #0
    34f4:	1bad      	subs	r5, r5, r6
    34f6:	10ad      	asrs	r5, r5, #2
    34f8:	d005      	beq.n	3506 <__libc_init_array+0x1a>
    34fa:	00a3      	lsls	r3, r4, #2
    34fc:	58f3      	ldr	r3, [r6, r3]
    34fe:	3401      	adds	r4, #1
    3500:	4798      	blx	r3
    3502:	42a5      	cmp	r5, r4
    3504:	d1f9      	bne.n	34fa <__libc_init_array+0xe>
    3506:	f000 f9cd 	bl	38a4 <_init>
    350a:	4e08      	ldr	r6, [pc, #32]	; (352c <__libc_init_array+0x40>)
    350c:	4d08      	ldr	r5, [pc, #32]	; (3530 <__libc_init_array+0x44>)
    350e:	2400      	movs	r4, #0
    3510:	1bad      	subs	r5, r5, r6
    3512:	10ad      	asrs	r5, r5, #2
    3514:	d005      	beq.n	3522 <__libc_init_array+0x36>
    3516:	00a3      	lsls	r3, r4, #2
    3518:	58f3      	ldr	r3, [r6, r3]
    351a:	3401      	adds	r4, #1
    351c:	4798      	blx	r3
    351e:	42a5      	cmp	r5, r4
    3520:	d1f9      	bne.n	3516 <__libc_init_array+0x2a>
    3522:	bd70      	pop	{r4, r5, r6, pc}
    3524:	000038b0 	.word	0x000038b0
    3528:	000038b0 	.word	0x000038b0
    352c:	000038b0 	.word	0x000038b0
    3530:	000038b8 	.word	0x000038b8

00003534 <memset>:
    3534:	b570      	push	{r4, r5, r6, lr}
    3536:	0783      	lsls	r3, r0, #30
    3538:	d03f      	beq.n	35ba <memset+0x86>
    353a:	1e54      	subs	r4, r2, #1
    353c:	2a00      	cmp	r2, #0
    353e:	d03b      	beq.n	35b8 <memset+0x84>
    3540:	b2ce      	uxtb	r6, r1
    3542:	0003      	movs	r3, r0
    3544:	2503      	movs	r5, #3
    3546:	e003      	b.n	3550 <memset+0x1c>
    3548:	1e62      	subs	r2, r4, #1
    354a:	2c00      	cmp	r4, #0
    354c:	d034      	beq.n	35b8 <memset+0x84>
    354e:	0014      	movs	r4, r2
    3550:	3301      	adds	r3, #1
    3552:	1e5a      	subs	r2, r3, #1
    3554:	7016      	strb	r6, [r2, #0]
    3556:	422b      	tst	r3, r5
    3558:	d1f6      	bne.n	3548 <memset+0x14>
    355a:	2c03      	cmp	r4, #3
    355c:	d924      	bls.n	35a8 <memset+0x74>
    355e:	25ff      	movs	r5, #255	; 0xff
    3560:	400d      	ands	r5, r1
    3562:	022a      	lsls	r2, r5, #8
    3564:	4315      	orrs	r5, r2
    3566:	042a      	lsls	r2, r5, #16
    3568:	4315      	orrs	r5, r2
    356a:	2c0f      	cmp	r4, #15
    356c:	d911      	bls.n	3592 <memset+0x5e>
    356e:	0026      	movs	r6, r4
    3570:	3e10      	subs	r6, #16
    3572:	0936      	lsrs	r6, r6, #4
    3574:	3601      	adds	r6, #1
    3576:	0136      	lsls	r6, r6, #4
    3578:	001a      	movs	r2, r3
    357a:	199b      	adds	r3, r3, r6
    357c:	6015      	str	r5, [r2, #0]
    357e:	6055      	str	r5, [r2, #4]
    3580:	6095      	str	r5, [r2, #8]
    3582:	60d5      	str	r5, [r2, #12]
    3584:	3210      	adds	r2, #16
    3586:	4293      	cmp	r3, r2
    3588:	d1f8      	bne.n	357c <memset+0x48>
    358a:	220f      	movs	r2, #15
    358c:	4014      	ands	r4, r2
    358e:	2c03      	cmp	r4, #3
    3590:	d90a      	bls.n	35a8 <memset+0x74>
    3592:	1f26      	subs	r6, r4, #4
    3594:	08b6      	lsrs	r6, r6, #2
    3596:	3601      	adds	r6, #1
    3598:	00b6      	lsls	r6, r6, #2
    359a:	001a      	movs	r2, r3
    359c:	199b      	adds	r3, r3, r6
    359e:	c220      	stmia	r2!, {r5}
    35a0:	4293      	cmp	r3, r2
    35a2:	d1fc      	bne.n	359e <memset+0x6a>
    35a4:	2203      	movs	r2, #3
    35a6:	4014      	ands	r4, r2
    35a8:	2c00      	cmp	r4, #0
    35aa:	d005      	beq.n	35b8 <memset+0x84>
    35ac:	b2c9      	uxtb	r1, r1
    35ae:	191c      	adds	r4, r3, r4
    35b0:	7019      	strb	r1, [r3, #0]
    35b2:	3301      	adds	r3, #1
    35b4:	429c      	cmp	r4, r3
    35b6:	d1fb      	bne.n	35b0 <memset+0x7c>
    35b8:	bd70      	pop	{r4, r5, r6, pc}
    35ba:	0014      	movs	r4, r2
    35bc:	0003      	movs	r3, r0
    35be:	e7cc      	b.n	355a <memset+0x26>

000035c0 <register_fini>:
    35c0:	4b03      	ldr	r3, [pc, #12]	; (35d0 <register_fini+0x10>)
    35c2:	b510      	push	{r4, lr}
    35c4:	2b00      	cmp	r3, #0
    35c6:	d002      	beq.n	35ce <register_fini+0xe>
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <register_fini+0x14>)
    35ca:	f000 f805 	bl	35d8 <atexit>
    35ce:	bd10      	pop	{r4, pc}
    35d0:	00000000 	.word	0x00000000
    35d4:	000035e9 	.word	0x000035e9

000035d8 <atexit>:
    35d8:	b510      	push	{r4, lr}
    35da:	0001      	movs	r1, r0
    35dc:	2300      	movs	r3, #0
    35de:	2200      	movs	r2, #0
    35e0:	2000      	movs	r0, #0
    35e2:	f000 f81b 	bl	361c <__register_exitproc>
    35e6:	bd10      	pop	{r4, pc}

000035e8 <__libc_fini_array>:
    35e8:	b570      	push	{r4, r5, r6, lr}
    35ea:	4b09      	ldr	r3, [pc, #36]	; (3610 <__libc_fini_array+0x28>)
    35ec:	4c09      	ldr	r4, [pc, #36]	; (3614 <__libc_fini_array+0x2c>)
    35ee:	1ae4      	subs	r4, r4, r3
    35f0:	10a4      	asrs	r4, r4, #2
    35f2:	d009      	beq.n	3608 <__libc_fini_array+0x20>
    35f4:	4a08      	ldr	r2, [pc, #32]	; (3618 <__libc_fini_array+0x30>)
    35f6:	18a5      	adds	r5, r4, r2
    35f8:	00ad      	lsls	r5, r5, #2
    35fa:	18ed      	adds	r5, r5, r3
    35fc:	682b      	ldr	r3, [r5, #0]
    35fe:	3c01      	subs	r4, #1
    3600:	4798      	blx	r3
    3602:	3d04      	subs	r5, #4
    3604:	2c00      	cmp	r4, #0
    3606:	d1f9      	bne.n	35fc <__libc_fini_array+0x14>
    3608:	f000 f956 	bl	38b8 <_fini>
    360c:	bd70      	pop	{r4, r5, r6, pc}
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	000038c4 	.word	0x000038c4
    3614:	000038c8 	.word	0x000038c8
    3618:	3fffffff 	.word	0x3fffffff

0000361c <__register_exitproc>:
    361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361e:	4644      	mov	r4, r8
    3620:	465f      	mov	r7, fp
    3622:	4656      	mov	r6, sl
    3624:	464d      	mov	r5, r9
    3626:	469b      	mov	fp, r3
    3628:	4b2f      	ldr	r3, [pc, #188]	; (36e8 <__register_exitproc+0xcc>)
    362a:	b4f0      	push	{r4, r5, r6, r7}
    362c:	681c      	ldr	r4, [r3, #0]
    362e:	23a4      	movs	r3, #164	; 0xa4
    3630:	005b      	lsls	r3, r3, #1
    3632:	0005      	movs	r5, r0
    3634:	58e0      	ldr	r0, [r4, r3]
    3636:	000e      	movs	r6, r1
    3638:	4690      	mov	r8, r2
    363a:	2800      	cmp	r0, #0
    363c:	d04b      	beq.n	36d6 <__register_exitproc+0xba>
    363e:	6843      	ldr	r3, [r0, #4]
    3640:	2b1f      	cmp	r3, #31
    3642:	dc0d      	bgt.n	3660 <__register_exitproc+0x44>
    3644:	1c5c      	adds	r4, r3, #1
    3646:	2d00      	cmp	r5, #0
    3648:	d121      	bne.n	368e <__register_exitproc+0x72>
    364a:	3302      	adds	r3, #2
    364c:	009b      	lsls	r3, r3, #2
    364e:	6044      	str	r4, [r0, #4]
    3650:	501e      	str	r6, [r3, r0]
    3652:	2000      	movs	r0, #0
    3654:	bc3c      	pop	{r2, r3, r4, r5}
    3656:	4690      	mov	r8, r2
    3658:	4699      	mov	r9, r3
    365a:	46a2      	mov	sl, r4
    365c:	46ab      	mov	fp, r5
    365e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3660:	4b22      	ldr	r3, [pc, #136]	; (36ec <__register_exitproc+0xd0>)
    3662:	2b00      	cmp	r3, #0
    3664:	d03c      	beq.n	36e0 <__register_exitproc+0xc4>
    3666:	20c8      	movs	r0, #200	; 0xc8
    3668:	0040      	lsls	r0, r0, #1
    366a:	e000      	b.n	366e <__register_exitproc+0x52>
    366c:	bf00      	nop
    366e:	2800      	cmp	r0, #0
    3670:	d036      	beq.n	36e0 <__register_exitproc+0xc4>
    3672:	22a4      	movs	r2, #164	; 0xa4
    3674:	2300      	movs	r3, #0
    3676:	0052      	lsls	r2, r2, #1
    3678:	58a1      	ldr	r1, [r4, r2]
    367a:	6043      	str	r3, [r0, #4]
    367c:	6001      	str	r1, [r0, #0]
    367e:	50a0      	str	r0, [r4, r2]
    3680:	3240      	adds	r2, #64	; 0x40
    3682:	5083      	str	r3, [r0, r2]
    3684:	3204      	adds	r2, #4
    3686:	5083      	str	r3, [r0, r2]
    3688:	2401      	movs	r4, #1
    368a:	2d00      	cmp	r5, #0
    368c:	d0dd      	beq.n	364a <__register_exitproc+0x2e>
    368e:	009a      	lsls	r2, r3, #2
    3690:	4691      	mov	r9, r2
    3692:	4481      	add	r9, r0
    3694:	4642      	mov	r2, r8
    3696:	2188      	movs	r1, #136	; 0x88
    3698:	464f      	mov	r7, r9
    369a:	507a      	str	r2, [r7, r1]
    369c:	22c4      	movs	r2, #196	; 0xc4
    369e:	0052      	lsls	r2, r2, #1
    36a0:	4690      	mov	r8, r2
    36a2:	4480      	add	r8, r0
    36a4:	4642      	mov	r2, r8
    36a6:	3987      	subs	r1, #135	; 0x87
    36a8:	4099      	lsls	r1, r3
    36aa:	6812      	ldr	r2, [r2, #0]
    36ac:	468a      	mov	sl, r1
    36ae:	430a      	orrs	r2, r1
    36b0:	4694      	mov	ip, r2
    36b2:	4642      	mov	r2, r8
    36b4:	4661      	mov	r1, ip
    36b6:	6011      	str	r1, [r2, #0]
    36b8:	2284      	movs	r2, #132	; 0x84
    36ba:	4649      	mov	r1, r9
    36bc:	465f      	mov	r7, fp
    36be:	0052      	lsls	r2, r2, #1
    36c0:	508f      	str	r7, [r1, r2]
    36c2:	2d02      	cmp	r5, #2
    36c4:	d1c1      	bne.n	364a <__register_exitproc+0x2e>
    36c6:	0002      	movs	r2, r0
    36c8:	4655      	mov	r5, sl
    36ca:	328d      	adds	r2, #141	; 0x8d
    36cc:	32ff      	adds	r2, #255	; 0xff
    36ce:	6811      	ldr	r1, [r2, #0]
    36d0:	430d      	orrs	r5, r1
    36d2:	6015      	str	r5, [r2, #0]
    36d4:	e7b9      	b.n	364a <__register_exitproc+0x2e>
    36d6:	0020      	movs	r0, r4
    36d8:	304d      	adds	r0, #77	; 0x4d
    36da:	30ff      	adds	r0, #255	; 0xff
    36dc:	50e0      	str	r0, [r4, r3]
    36de:	e7ae      	b.n	363e <__register_exitproc+0x22>
    36e0:	2001      	movs	r0, #1
    36e2:	4240      	negs	r0, r0
    36e4:	e7b6      	b.n	3654 <__register_exitproc+0x38>
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	000038a0 	.word	0x000038a0
    36ec:	00000000 	.word	0x00000000

000036f0 <spi2MOSI>:
    36f0:	0c000002 00000200                                .....

000036f5 <spi2SCK>:
    36f5:	0e000002 00000200                                .....

000036fa <spi2MISO>:
    36fa:	0d000002 8d200000                                ......

00003700 <lookupTable.12476>:
    3700:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    3710:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    3720:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    3730:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    3740:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    3750:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    3760:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    3770:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    3780:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    3790:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    37a0:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    37b0:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    37c0:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    37d0:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    37e0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    37f0:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    3800:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    3810:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    3820:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    3830:	000f048e                                ....

00003834 <senseBatPin>:
    3834:	06000000 01000106                                .....

00003839 <senseAPin>:
    3839:	03010001 0100010b                                .....

0000383e <senseBPin>:
    383e:	02010001 0000000a                                .....

00003843 <senseCPin>:
    3843:	03000000 00000001                                .....

00003848 <senseDPin>:
    3848:	02000000 00000000                                .....

0000384d <analogAccelPin>:
    384d:	07000000 00000207                                .....

00003852 <spi2MOSI>:
    3852:	0c000002 00000200                                .....

00003857 <spi2SCK>:
    3857:	0e000002 0027e400 0026a400 0026a400     ......'...&...&.
    3867:	0026a200 0027bc00 0027bc00 0027ae00     ..&...'...'...'.
    3877:	0026a200 0027bc00 0027ae00 0027bc00     ..&...'...'...'.
    3887:	0026a200 0027c400 0027c400 0027c400     ..&...'...'...'.
    3897:	0029c400 00004300 00001000                       ..)..C...

000038a0 <_global_impure_ptr>:
    38a0:	20000010                                ... 

000038a4 <_init>:
    38a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38aa:	bc08      	pop	{r3}
    38ac:	469e      	mov	lr, r3
    38ae:	4770      	bx	lr

000038b0 <__init_array_start>:
    38b0:	000035c1 	.word	0x000035c1

000038b4 <__frame_dummy_init_array_entry>:
    38b4:	000000dd                                ....

000038b8 <_fini>:
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38be:	bc08      	pop	{r3}
    38c0:	469e      	mov	lr, r3
    38c2:	4770      	bx	lr

000038c4 <__fini_array_start>:
    38c4:	000000b5 	.word	0x000000b5
