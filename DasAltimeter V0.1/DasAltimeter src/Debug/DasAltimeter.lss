
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000549c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  0000549c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  000058e0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00005a90  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f03f  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024da  00000000  00000000  0003f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002066  00000000  00000000  000419d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e0  00000000  00000000  00043a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf8  00000000  00000000  00043e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015740  00000000  00000000  00044b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000089b6  00000000  00000000  0005a254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007280d  00000000  00000000  00062c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fec  00000000  00000000  000d5418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	000011a1 	.word	0x000011a1
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001241 	.word	0x00001241
      90:	000012a9 	.word	0x000012a9
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000549c 	.word	0x0000549c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000549c 	.word	0x0000549c
     10c:	0000549c 	.word	0x0000549c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000549c 	.word	0x0000549c
     1a4:	20000000 	.word	0x20000000
     1a8:	2000043c 	.word	0x2000043c
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00005065 	.word	0x00005065
     1d0:	00000ba9 	.word	0x00000ba9

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFChipErase>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFChipErase() {
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2580      	movs	r5, #128	; 0x80
     1e8:	4c09      	ldr	r4, [pc, #36]	; (210 <AT25SFChipErase+0x2c>)
     1ea:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ec:	4f09      	ldr	r7, [pc, #36]	; (214 <AT25SFChipErase+0x30>)
     1ee:	6165      	str	r5, [r4, #20]
     1f0:	2106      	movs	r1, #6
     1f2:	2001      	movs	r0, #1
     1f4:	47b8      	blx	r7
     1f6:	4e08      	ldr	r6, [pc, #32]	; (218 <AT25SFChipErase+0x34>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1f8:	2160      	movs	r1, #96	; 0x60
}

void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fa:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     1fc:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1fe:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     200:	6165      	str	r5, [r4, #20]
     202:	47b8      	blx	r7
    pinHigh(cs_mem);

    delay_ms(30000);
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <AT25SFChipErase+0x38>)
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     206:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     208:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    delay_ms(30000);
     20a:	4805      	ldr	r0, [pc, #20]	; (220 <AT25SFChipErase+0x3c>)
     20c:	4798      	blx	r3
}
     20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     210:	41004400 	.word	0x41004400
     214:	00001c25 	.word	0x00001c25
     218:	20000460 	.word	0x20000460
     21c:	00001171 	.word	0x00001171
     220:	00007530 	.word	0x00007530

00000224 <AT25SFGetByte>:

uint8_t AT25SFGetByte(uint32_t address) {
     224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     226:	2380      	movs	r3, #128	; 0x80
     228:	4f0f      	ldr	r7, [pc, #60]	; (268 <AT25SFGetByte+0x44>)
     22a:	02db      	lsls	r3, r3, #11
     22c:	617b      	str	r3, [r7, #20]
     22e:	0005      	movs	r5, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     230:	4c0e      	ldr	r4, [pc, #56]	; (26c <AT25SFGetByte+0x48>)
     232:	2103      	movs	r1, #3
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	4e0d      	ldr	r6, [pc, #52]	; (270 <AT25SFGetByte+0x4c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23a:	0c29      	lsrs	r1, r5, #16
}

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     23c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23e:	b2c9      	uxtb	r1, r1
     240:	2001      	movs	r0, #1
     242:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     244:	0a29      	lsrs	r1, r5, #8

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     246:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     248:	b2c9      	uxtb	r1, r1
     24a:	2001      	movs	r0, #1
     24c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     24e:	b2e9      	uxtb	r1, r5
uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     250:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     252:	2001      	movs	r0, #1
     254:	47a0      	blx	r4
     256:	7030      	strb	r0, [r6, #0]
     258:	0001      	movs	r1, r0

    uint8_t _byte = spiDataTransfer(SPI1,dummy_rx);
     25a:	2001      	movs	r0, #1
     25c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25e:	2380      	movs	r3, #128	; 0x80
     260:	02db      	lsls	r3, r3, #11
     262:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    return _byte;
}
     264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	41004400 	.word	0x41004400
     26c:	00001c25 	.word	0x00001c25
     270:	20000460 	.word	0x20000460

00000274 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     274:	2380      	movs	r3, #128	; 0x80

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     278:	4e19      	ldr	r6, [pc, #100]	; (2e0 <AT25SFWriteBytes+0x6c>)
     27a:	02db      	lsls	r3, r3, #11
     27c:	9201      	str	r2, [sp, #4]
     27e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     280:	4c18      	ldr	r4, [pc, #96]	; (2e4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     282:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     284:	2001      	movs	r0, #1
     286:	6173      	str	r3, [r6, #20]
     288:	2106      	movs	r1, #6
     28a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	4d16      	ldr	r5, [pc, #88]	; (2e8 <AT25SFWriteBytes+0x74>)
     290:	02db      	lsls	r3, r3, #11
     292:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     294:	2102      	movs	r1, #2
     296:	61b3      	str	r3, [r6, #24]
     298:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29a:	6173      	str	r3, [r6, #20]
     29c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     29e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2a0:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2a2:	b2c9      	uxtb	r1, r1
     2a4:	2001      	movs	r0, #1
     2a6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2a8:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2aa:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2ac:	b2c9      	uxtb	r1, r1
     2ae:	2001      	movs	r0, #1
     2b0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b2:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2b4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b6:	2001      	movs	r0, #1
     2b8:	47a0      	blx	r4
     2ba:	9b00      	ldr	r3, [sp, #0]
     2bc:	9f01      	ldr	r7, [sp, #4]
     2be:	7028      	strb	r0, [r5, #0]
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2c4:	9b00      	ldr	r3, [sp, #0]
     2c6:	429f      	cmp	r7, r3
     2c8:	d005      	beq.n	2d6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2ca:	7839      	ldrb	r1, [r7, #0]
     2cc:	2001      	movs	r0, #1
     2ce:	47a0      	blx	r4
     2d0:	3701      	adds	r7, #1
     2d2:	7028      	strb	r0, [r5, #0]
     2d4:	e7f6      	b.n	2c4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	02db      	lsls	r3, r3, #11
     2da:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	41004400 	.word	0x41004400
     2e4:	00001c25 	.word	0x00001c25
     2e8:	20000460 	.word	0x20000460

000002ec <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2f0:	4e18      	ldr	r6, [pc, #96]	; (354 <AT25SEWritePage+0x68>)
     2f2:	02db      	lsls	r3, r3, #11
     2f4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2f6:	4d18      	ldr	r5, [pc, #96]	; (358 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2f8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2fa:	2001      	movs	r0, #1
     2fc:	6173      	str	r3, [r6, #20]
     2fe:	2106      	movs	r1, #6
     300:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     302:	2380      	movs	r3, #128	; 0x80
     304:	4c15      	ldr	r4, [pc, #84]	; (35c <AT25SEWritePage+0x70>)
     306:	02db      	lsls	r3, r3, #11
     308:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     30a:	2102      	movs	r1, #2
     30c:	61b3      	str	r3, [r6, #24]
     30e:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     310:	6173      	str	r3, [r6, #20]
     312:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     314:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     316:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     318:	b2c9      	uxtb	r1, r1
     31a:	2001      	movs	r0, #1
     31c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     31e:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     320:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     328:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     32a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     32c:	2001      	movs	r0, #1
     32e:	47a8      	blx	r5
     330:	9f01      	ldr	r7, [sp, #4]
     332:	7020      	strb	r0, [r4, #0]
     334:	1c7b      	adds	r3, r7, #1
     336:	33ff      	adds	r3, #255	; 0xff
     338:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     33a:	7839      	ldrb	r1, [r7, #0]
     33c:	2001      	movs	r0, #1
     33e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     340:	9b01      	ldr	r3, [sp, #4]
     342:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     344:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     346:	429f      	cmp	r7, r3
     348:	d1f7      	bne.n	33a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	02db      	lsls	r3, r3, #11
     34e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     350:	2000      	movs	r0, #0
     352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     354:	41004400 	.word	0x41004400
     358:	00001c25 	.word	0x00001c25
     35c:	20000460 	.word	0x20000460

00000360 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     360:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     364:	4f17      	ldr	r7, [pc, #92]	; (3c4 <AT25SEreadSample+0x64>)
     366:	02db      	lsls	r3, r3, #11
     368:	9201      	str	r2, [sp, #4]
     36a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     36c:	4c16      	ldr	r4, [pc, #88]	; (3c8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     36e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     370:	2001      	movs	r0, #1
     372:	617b      	str	r3, [r7, #20]
     374:	210b      	movs	r1, #11
     376:	47a0      	blx	r4
     378:	4d14      	ldr	r5, [pc, #80]	; (3cc <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     37c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37e:	b2c9      	uxtb	r1, r1
     380:	2001      	movs	r0, #1
     382:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     384:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     386:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     388:	b2c9      	uxtb	r1, r1
     38a:	2001      	movs	r0, #1
     38c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     38e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     390:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     392:	2001      	movs	r0, #1
     394:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     396:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     398:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     39a:	2001      	movs	r0, #1
     39c:	47a0      	blx	r4
     39e:	9b00      	ldr	r3, [sp, #0]
     3a0:	9e01      	ldr	r6, [sp, #4]
     3a2:	7028      	strb	r0, [r5, #0]
     3a4:	18f3      	adds	r3, r6, r3
     3a6:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     3a8:	9b00      	ldr	r3, [sp, #0]
     3aa:	429e      	cmp	r6, r3
     3ac:	d005      	beq.n	3ba <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3ae:	7829      	ldrb	r1, [r5, #0]
     3b0:	2001      	movs	r0, #1
     3b2:	47a0      	blx	r4
     3b4:	7030      	strb	r0, [r6, #0]
     3b6:	3601      	adds	r6, #1
     3b8:	e7f6      	b.n	3a8 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3ba:	2380      	movs	r3, #128	; 0x80
     3bc:	02db      	lsls	r3, r3, #11
     3be:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	41004400 	.word	0x41004400
     3c8:	00001c25 	.word	0x00001c25
     3cc:	20000460 	.word	0x20000460

000003d0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3d0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3d4:	4f16      	ldr	r7, [pc, #88]	; (430 <AT25SEreadPage+0x60>)
     3d6:	02db      	lsls	r3, r3, #11
     3d8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3da:	4c16      	ldr	r4, [pc, #88]	; (434 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3dc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3de:	2001      	movs	r0, #1
     3e0:	617b      	str	r3, [r7, #20]
     3e2:	210b      	movs	r1, #11
     3e4:	47a0      	blx	r4
     3e6:	4d14      	ldr	r5, [pc, #80]	; (438 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3e8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ea:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3ec:	b2c9      	uxtb	r1, r1
     3ee:	2001      	movs	r0, #1
     3f0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3f4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f6:	b2c9      	uxtb	r1, r1
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3fc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     400:	2001      	movs	r0, #1
     402:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     404:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     406:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     408:	2001      	movs	r0, #1
     40a:	47a0      	blx	r4
     40c:	9e01      	ldr	r6, [sp, #4]
     40e:	7028      	strb	r0, [r5, #0]
     410:	1c73      	adds	r3, r6, #1
     412:	33ff      	adds	r3, #255	; 0xff
     414:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     416:	7829      	ldrb	r1, [r5, #0]
     418:	2001      	movs	r0, #1
     41a:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     41c:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     41e:	7030      	strb	r0, [r6, #0]
     420:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     422:	429e      	cmp	r6, r3
     424:	d1f7      	bne.n	416 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     426:	2380      	movs	r3, #128	; 0x80
     428:	02db      	lsls	r3, r3, #11
     42a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     42c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	41004400 	.word	0x41004400
     434:	00001c25 	.word	0x00001c25
     438:	20000460 	.word	0x20000460

0000043c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	4b28      	ldr	r3, [pc, #160]	; (4e0 <readMS5803AdcResults+0xa4>)
     440:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     442:	b5f0      	push	{r4, r5, r6, r7, lr}
     444:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     446:	2300      	movs	r3, #0
     448:	4d26      	ldr	r5, [pc, #152]	; (4e4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     44a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     44c:	9300      	str	r3, [sp, #0]
     44e:	786b      	ldrb	r3, [r5, #1]
     450:	7828      	ldrb	r0, [r5, #0]
     452:	78aa      	ldrb	r2, [r5, #2]
     454:	021b      	lsls	r3, r3, #8
     456:	4303      	orrs	r3, r0
     458:	0412      	lsls	r2, r2, #16
     45a:	0019      	movs	r1, r3
     45c:	0013      	movs	r3, r2
     45e:	430b      	orrs	r3, r1
     460:	79a9      	ldrb	r1, [r5, #6]
     462:	796f      	ldrb	r7, [r5, #5]
     464:	79ec      	ldrb	r4, [r5, #7]
     466:	0209      	lsls	r1, r1, #8
     468:	4339      	orrs	r1, r7
     46a:	0424      	lsls	r4, r4, #16
     46c:	0008      	movs	r0, r1
     46e:	0021      	movs	r1, r4
     470:	7a2c      	ldrb	r4, [r5, #8]
     472:	78ea      	ldrb	r2, [r5, #3]
     474:	7a6f      	ldrb	r7, [r5, #9]
     476:	4301      	orrs	r1, r0
     478:	0624      	lsls	r4, r4, #24
     47a:	430c      	orrs	r4, r1
     47c:	0612      	lsls	r2, r2, #24
     47e:	431a      	orrs	r2, r3
     480:	0020      	movs	r0, r4
     482:	792b      	ldrb	r3, [r5, #4]
     484:	0039      	movs	r1, r7
     486:	4e18      	ldr	r6, [pc, #96]	; (4e8 <readMS5803AdcResults+0xac>)
     488:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     48a:	7aeb      	ldrb	r3, [r5, #11]
     48c:	7aa9      	ldrb	r1, [r5, #10]
     48e:	021b      	lsls	r3, r3, #8
     490:	430b      	orrs	r3, r1
     492:	001a      	movs	r2, r3
     494:	7b2b      	ldrb	r3, [r5, #12]
     496:	4e15      	ldr	r6, [pc, #84]	; (4ec <readMS5803AdcResults+0xb0>)
     498:	041b      	lsls	r3, r3, #16
     49a:	4313      	orrs	r3, r2
     49c:	7b6a      	ldrb	r2, [r5, #13]
     49e:	7bad      	ldrb	r5, [r5, #14]
     4a0:	0612      	lsls	r2, r2, #24
     4a2:	431a      	orrs	r2, r3
     4a4:	0039      	movs	r1, r7
     4a6:	002b      	movs	r3, r5
     4a8:	0020      	movs	r0, r4
     4aa:	9203      	str	r2, [sp, #12]
     4ac:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ae:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4b0:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b2:	002b      	movs	r3, r5
     4b4:	0039      	movs	r1, r7
     4b6:	0020      	movs	r0, r4
     4b8:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4ba:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4bc:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4be:	002b      	movs	r3, r5
     4c0:	0020      	movs	r0, r4
     4c2:	0039      	movs	r1, r7
     4c4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <readMS5803AdcResults+0xa4>)
     4ca:	0212      	lsls	r2, r2, #8
     4cc:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ce:	9b04      	ldr	r3, [sp, #16]
     4d0:	9a05      	ldr	r2, [sp, #20]
     4d2:	041b      	lsls	r3, r3, #16
     4d4:	0215      	lsls	r5, r2, #8
     4d6:	431d      	orrs	r5, r3
     4d8:	4328      	orrs	r0, r5
}
     4da:	b007      	add	sp, #28
     4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	41004400 	.word	0x41004400
     4e4:	00005268 	.word	0x00005268
     4e8:	00000e99 	.word	0x00000e99
     4ec:	00000f05 	.word	0x00000f05

000004f0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4f2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4f6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4f8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4fa:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4fc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4fe:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     500:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     502:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     504:	8905      	ldrh	r5, [r0, #8]
     506:	6903      	ldr	r3, [r0, #16]
     508:	022d      	lsls	r5, r5, #8
     50a:	1b5b      	subs	r3, r3, r5
     50c:	2500      	movs	r5, #0
     50e:	9302      	str	r3, [sp, #8]
     510:	17db      	asrs	r3, r3, #31
     512:	9303      	str	r3, [sp, #12]
     514:	8940      	ldrh	r0, [r0, #10]
     516:	4f1f      	ldr	r7, [pc, #124]	; (594 <ConvertPressureTemperature+0xa4>)
     518:	9a02      	ldr	r2, [sp, #8]
     51a:	0029      	movs	r1, r5
     51c:	47b8      	blx	r7
     51e:	23fa      	movs	r3, #250	; 0xfa
     520:	0249      	lsls	r1, r1, #9
     522:	0dc0      	lsrs	r0, r0, #23
     524:	4308      	orrs	r0, r1
     526:	00db      	lsls	r3, r3, #3
     528:	18c0      	adds	r0, r0, r3
     52a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	9b03      	ldr	r3, [sp, #12]
     530:	0030      	movs	r0, r6
     532:	0029      	movs	r1, r5
     534:	47b8      	blx	r7
     536:	060b      	lsls	r3, r1, #24
     538:	120f      	asrs	r7, r1, #8
     53a:	0a06      	lsrs	r6, r0, #8
     53c:	9900      	ldr	r1, [sp, #0]
     53e:	431e      	orrs	r6, r3
     540:	03ca      	lsls	r2, r1, #15
     542:	002b      	movs	r3, r5
     544:	0030      	movs	r0, r6
     546:	0039      	movs	r1, r7
     548:	4e12      	ldr	r6, [pc, #72]	; (594 <ConvertPressureTemperature+0xa4>)
     54a:	1880      	adds	r0, r0, r2
     54c:	4159      	adcs	r1, r3
     54e:	68e2      	ldr	r2, [r4, #12]
     550:	47b0      	blx	r6
     552:	02cb      	lsls	r3, r1, #11
     554:	0d42      	lsrs	r2, r0, #21
     556:	431a      	orrs	r2, r3
     558:	154b      	asrs	r3, r1, #21
     55a:	9200      	str	r2, [sp, #0]
     55c:	9301      	str	r3, [sp, #4]
     55e:	9a02      	ldr	r2, [sp, #8]
     560:	9b03      	ldr	r3, [sp, #12]
     562:	4e0c      	ldr	r6, [pc, #48]	; (594 <ConvertPressureTemperature+0xa4>)
     564:	9805      	ldr	r0, [sp, #20]
     566:	0029      	movs	r1, r5
     568:	47b0      	blx	r6
     56a:	064b      	lsls	r3, r1, #25
     56c:	09c6      	lsrs	r6, r0, #7
     56e:	431e      	orrs	r6, r3
     570:	002b      	movs	r3, r5
     572:	11cf      	asrs	r7, r1, #7
     574:	9904      	ldr	r1, [sp, #16]
     576:	040a      	lsls	r2, r1, #16
     578:	1992      	adds	r2, r2, r6
     57a:	417b      	adcs	r3, r7
     57c:	9800      	ldr	r0, [sp, #0]
     57e:	9901      	ldr	r1, [sp, #4]
     580:	1a80      	subs	r0, r0, r2
     582:	4199      	sbcs	r1, r3
     584:	000a      	movs	r2, r1
     586:	0453      	lsls	r3, r2, #17
     588:	0bc2      	lsrs	r2, r0, #15
     58a:	431a      	orrs	r2, r3
     58c:	61e2      	str	r2, [r4, #28]

}
     58e:	b007      	add	sp, #28
     590:	bdf0      	pop	{r4, r5, r6, r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00002f75 	.word	0x00002f75

00000598 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     598:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59a:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <paToFeetNOAA+0x3c>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     59c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59e:	69c0      	ldr	r0, [r0, #28]
     5a0:	4798      	blx	r3
     5a2:	4d0d      	ldr	r5, [pc, #52]	; (5d8 <paToFeetNOAA+0x40>)
     5a4:	2200      	movs	r2, #0
     5a6:	4b0d      	ldr	r3, [pc, #52]	; (5dc <paToFeetNOAA+0x44>)
     5a8:	47a8      	blx	r5
     5aa:	2200      	movs	r2, #0
     5ac:	4b0c      	ldr	r3, [pc, #48]	; (5e0 <paToFeetNOAA+0x48>)
     5ae:	47a8      	blx	r5
     5b0:	4a0c      	ldr	r2, [pc, #48]	; (5e4 <paToFeetNOAA+0x4c>)
     5b2:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <paToFeetNOAA+0x50>)
     5b4:	4d0d      	ldr	r5, [pc, #52]	; (5ec <paToFeetNOAA+0x54>)
     5b6:	47a8      	blx	r5
    my_barometer->heightFeet = altFeet;
     5b8:	4d0d      	ldr	r5, [pc, #52]	; (5f0 <paToFeetNOAA+0x58>)
void paToFeetNOAA(Barometer *my_barometer) {

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     5ba:	0002      	movs	r2, r0
     5bc:	000b      	movs	r3, r1
    my_barometer->heightFeet = altFeet;
     5be:	2000      	movs	r0, #0
     5c0:	490c      	ldr	r1, [pc, #48]	; (5f4 <paToFeetNOAA+0x5c>)
     5c2:	47a8      	blx	r5
     5c4:	4a0c      	ldr	r2, [pc, #48]	; (5f8 <paToFeetNOAA+0x60>)
     5c6:	4d0d      	ldr	r5, [pc, #52]	; (5fc <paToFeetNOAA+0x64>)
     5c8:	4b0d      	ldr	r3, [pc, #52]	; (600 <paToFeetNOAA+0x68>)
     5ca:	47a8      	blx	r5
     5cc:	4b0d      	ldr	r3, [pc, #52]	; (604 <paToFeetNOAA+0x6c>)
     5ce:	4798      	blx	r3
     5d0:	6260      	str	r0, [r4, #36]	; 0x24

}
     5d2:	bd70      	pop	{r4, r5, r6, pc}
     5d4:	00004c51 	.word	0x00004c51
     5d8:	000037c1 	.word	0x000037c1
     5dc:	40240000 	.word	0x40240000
     5e0:	408faa00 	.word	0x408faa00
     5e4:	e279dd3c 	.word	0xe279dd3c
     5e8:	3fc85b39 	.word	0x3fc85b39
     5ec:	00001c65 	.word	0x00001c65
     5f0:	000044fd 	.word	0x000044fd
     5f4:	3ff00000 	.word	0x3ff00000
     5f8:	9999999a 	.word	0x9999999a
     5fc:	00004009 	.word	0x00004009
     600:	4101beb3 	.word	0x4101beb3
     604:	00002fcd 	.word	0x00002fcd

00000608 <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     608:	b5f0      	push	{r4, r5, r6, r7, lr}
     60a:	27a2      	movs	r7, #162	; 0xa2
     60c:	b087      	sub	sp, #28
     60e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     610:	2096      	movs	r0, #150	; 0x96
     612:	4c2b      	ldr	r4, [pc, #172]	; (6c0 <readMS5803Coefficients+0xb8>)
     614:	0080      	lsls	r0, r0, #2
     616:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     618:	2096      	movs	r0, #150	; 0x96
     61a:	0080      	lsls	r0, r0, #2
     61c:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     61e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     620:	4c28      	ldr	r4, [pc, #160]	; (6c4 <readMS5803Coefficients+0xbc>)
     622:	4b29      	ldr	r3, [pc, #164]	; (6c8 <readMS5803Coefficients+0xc0>)
     624:	0212      	lsls	r2, r2, #8
     626:	615a      	str	r2, [r3, #20]
     628:	7863      	ldrb	r3, [r4, #1]
     62a:	7820      	ldrb	r0, [r4, #0]
     62c:	78a2      	ldrb	r2, [r4, #2]
     62e:	021b      	lsls	r3, r3, #8
     630:	4303      	orrs	r3, r0
     632:	0412      	lsls	r2, r2, #16
     634:	0019      	movs	r1, r3
     636:	0013      	movs	r3, r2
     638:	430b      	orrs	r3, r1
     63a:	79a1      	ldrb	r1, [r4, #6]
     63c:	7966      	ldrb	r6, [r4, #5]
     63e:	0209      	lsls	r1, r1, #8
     640:	4331      	orrs	r1, r6
     642:	0008      	movs	r0, r1
     644:	79e1      	ldrb	r1, [r4, #7]
     646:	78e2      	ldrb	r2, [r4, #3]
     648:	0409      	lsls	r1, r1, #16
     64a:	4301      	orrs	r1, r0
     64c:	7a20      	ldrb	r0, [r4, #8]
     64e:	7a66      	ldrb	r6, [r4, #9]
     650:	0612      	lsls	r2, r2, #24
     652:	0600      	lsls	r0, r0, #24
     654:	4308      	orrs	r0, r1
     656:	431a      	orrs	r2, r3
     658:	9700      	str	r7, [sp, #0]
     65a:	7923      	ldrb	r3, [r4, #4]
     65c:	0031      	movs	r1, r6
     65e:	4d1b      	ldr	r5, [pc, #108]	; (6cc <readMS5803Coefficients+0xc4>)
     660:	9003      	str	r0, [sp, #12]
     662:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     664:	7ae3      	ldrb	r3, [r4, #11]
     666:	0020      	movs	r0, r4
     668:	7aa1      	ldrb	r1, [r4, #10]
     66a:	7b24      	ldrb	r4, [r4, #12]
     66c:	021b      	lsls	r3, r3, #8
     66e:	430b      	orrs	r3, r1
     670:	0424      	lsls	r4, r4, #16
     672:	001a      	movs	r2, r3
     674:	0023      	movs	r3, r4
     676:	7b44      	ldrb	r4, [r0, #13]
     678:	7b85      	ldrb	r5, [r0, #14]
     67a:	4313      	orrs	r3, r2
     67c:	0624      	lsls	r4, r4, #24
     67e:	431c      	orrs	r4, r3
     680:	0022      	movs	r2, r4
     682:	002b      	movs	r3, r5
     684:	9404      	str	r4, [sp, #16]
     686:	0031      	movs	r1, r6
     688:	4c11      	ldr	r4, [pc, #68]	; (6d0 <readMS5803Coefficients+0xc8>)
     68a:	9803      	ldr	r0, [sp, #12]
     68c:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     68e:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     690:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     692:	9a04      	ldr	r2, [sp, #16]
     694:	9803      	ldr	r0, [sp, #12]
     696:	0031      	movs	r1, r6
     698:	4c0d      	ldr	r4, [pc, #52]	; (6d0 <readMS5803Coefficients+0xc8>)
     69a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     69c:	2280      	movs	r2, #128	; 0x80
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <readMS5803Coefficients+0xc0>)
     6a0:	0212      	lsls	r2, r2, #8
     6a2:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     6a4:	9b05      	ldr	r3, [sp, #20]
     6a6:	021d      	lsls	r5, r3, #8
     6a8:	9b02      	ldr	r3, [sp, #8]
     6aa:	4328      	orrs	r0, r5
     6ac:	8018      	strh	r0, [r3, #0]
     6ae:	1cbb      	adds	r3, r7, #2
     6b0:	b2df      	uxtb	r7, r3
     6b2:	9b02      	ldr	r3, [sp, #8]
     6b4:	3302      	adds	r3, #2
     6b6:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     6b8:	2fae      	cmp	r7, #174	; 0xae
     6ba:	d1a9      	bne.n	610 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6bc:	b007      	add	sp, #28
     6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6c0:	00001141 	.word	0x00001141
     6c4:	00005268 	.word	0x00005268
     6c8:	41004400 	.word	0x41004400
     6cc:	00000e99 	.word	0x00000e99
     6d0:	00000f05 	.word	0x00000f05

000006d4 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6d6:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d8:	231e      	movs	r3, #30
     6da:	491a      	ldr	r1, [pc, #104]	; (744 <initMS5803Barometer+0x70>)
     6dc:	4d1a      	ldr	r5, [pc, #104]	; (748 <initMS5803Barometer+0x74>)
     6de:	0236      	lsls	r6, r6, #8
     6e0:	616e      	str	r6, [r5, #20]
     6e2:	9300      	str	r3, [sp, #0]
     6e4:	784b      	ldrb	r3, [r1, #1]
     6e6:	780a      	ldrb	r2, [r1, #0]
     6e8:	021b      	lsls	r3, r3, #8
     6ea:	4313      	orrs	r3, r2
     6ec:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6ee:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6f0:	0412      	lsls	r2, r2, #16
     6f2:	0018      	movs	r0, r3
     6f4:	0013      	movs	r3, r2
     6f6:	78ca      	ldrb	r2, [r1, #3]
     6f8:	4303      	orrs	r3, r0
     6fa:	0612      	lsls	r2, r2, #24
     6fc:	1d4f      	adds	r7, r1, #5
     6fe:	431a      	orrs	r2, r3
     700:	7948      	ldrb	r0, [r1, #5]
     702:	790b      	ldrb	r3, [r1, #4]
     704:	7989      	ldrb	r1, [r1, #6]
     706:	0209      	lsls	r1, r1, #8
     708:	4301      	orrs	r1, r0
     70a:	78b8      	ldrb	r0, [r7, #2]
     70c:	0400      	lsls	r0, r0, #16
     70e:	4301      	orrs	r1, r0
     710:	78f8      	ldrb	r0, [r7, #3]
     712:	0600      	lsls	r0, r0, #24
     714:	4308      	orrs	r0, r1
     716:	7939      	ldrb	r1, [r7, #4]
     718:	4f0c      	ldr	r7, [pc, #48]	; (74c <initMS5803Barometer+0x78>)
     71a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     71c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     71e:	20c8      	movs	r0, #200	; 0xc8
     720:	4b0b      	ldr	r3, [pc, #44]	; (750 <initMS5803Barometer+0x7c>)
     722:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     724:	0020      	movs	r0, r4
     726:	4b0b      	ldr	r3, [pc, #44]	; (754 <initMS5803Barometer+0x80>)
     728:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     72a:	23fa      	movs	r3, #250	; 0xfa
     72c:	011b      	lsls	r3, r3, #4
     72e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     730:	4b09      	ldr	r3, [pc, #36]	; (758 <initMS5803Barometer+0x84>)
     732:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     734:	4b09      	ldr	r3, [pc, #36]	; (75c <initMS5803Barometer+0x88>)
     736:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     738:	4b09      	ldr	r3, [pc, #36]	; (760 <initMS5803Barometer+0x8c>)
     73a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     73c:	23fa      	movs	r3, #250	; 0xfa
     73e:	00db      	lsls	r3, r3, #3
     740:	6163      	str	r3, [r4, #20]




}
     742:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     744:	00005268 	.word	0x00005268
     748:	41004400 	.word	0x41004400
     74c:	00000e99 	.word	0x00000e99
     750:	00001171 	.word	0x00001171
     754:	00000609 	.word	0x00000609
     758:	00002710 	.word	0x00002710
     75c:	0041c9fe 	.word	0x0041c9fe
     760:	007ffae4 	.word	0x007ffae4

00000764 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     766:	4bbf      	ldr	r3, [pc, #764]	; (a64 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     768:	b085      	sub	sp, #20
    SystemInit();
     76a:	4798      	blx	r3
    GclkInit();
     76c:	4bbe      	ldr	r3, [pc, #760]	; (a68 <init+0x304>)
     76e:	4798      	blx	r3
    RtcInit();
     770:	4bbe      	ldr	r3, [pc, #760]	; (a6c <init+0x308>)
     772:	4798      	blx	r3
    delayInit();
     774:	4bbe      	ldr	r3, [pc, #760]	; (a70 <init+0x30c>)
     776:	4798      	blx	r3
    adcInit();
     778:	4bbe      	ldr	r3, [pc, #760]	; (a74 <init+0x310>)
     77a:	4798      	blx	r3
    dmaInit();
     77c:	4bbe      	ldr	r3, [pc, #760]	; (a78 <init+0x314>)
     77e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     780:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     782:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     784:	4bbd      	ldr	r3, [pc, #756]	; (a7c <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     786:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     788:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78a:	5858      	ldr	r0, [r3, r1]
     78c:	4abc      	ldr	r2, [pc, #752]	; (a80 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	2401      	movs	r4, #1
     790:	4002      	ands	r2, r0
     792:	505a      	str	r2, [r3, r1]
     794:	4bbb      	ldr	r3, [pc, #748]	; (a84 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     796:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     798:	0019      	movs	r1, r3
     79a:	3154      	adds	r1, #84	; 0x54
     79c:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     79e:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a0:	43a2      	bics	r2, r4
     7a2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	0352      	lsls	r2, r2, #13
     7a8:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7aa:	220f      	movs	r2, #15
     7ac:	3033      	adds	r0, #51	; 0x33
     7ae:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7b2:	4391      	bics	r1, r2
     7b4:	4321      	orrs	r1, r4
     7b6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b8:	7cc1      	ldrb	r1, [r0, #19]
     7ba:	36c3      	adds	r6, #195	; 0xc3
     7bc:	4321      	orrs	r1, r4
     7be:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c0:	0019      	movs	r1, r3
     7c2:	31b1      	adds	r1, #177	; 0xb1
     7c4:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c6:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c8:	4010      	ands	r0, r2
     7ca:	4328      	orrs	r0, r5
     7cc:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ce:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d0:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	4320      	orrs	r0, r4
     7d4:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d6:	7808      	ldrb	r0, [r1, #0]
     7d8:	4010      	ands	r0, r2
     7da:	4328      	orrs	r0, r5
     7dc:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7de:	7830      	ldrb	r0, [r6, #0]
     7e0:	4320      	orrs	r0, r4
     7e2:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e4:	7d30      	ldrb	r0, [r6, #20]
     7e6:	43a0      	bics	r0, r4
     7e8:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ea:	2080      	movs	r0, #128	; 0x80
     7ec:	0400      	lsls	r0, r0, #16
     7ee:	9703      	str	r7, [sp, #12]
     7f0:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7f2:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7f4:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f6:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7f8:	4390      	bics	r0, r2
     7fa:	4320      	orrs	r0, r4
     7fc:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	20c2      	movs	r0, #194	; 0xc2
     800:	4684      	mov	ip, r0
     802:	449c      	add	ip, r3
     804:	4660      	mov	r0, ip
     806:	4667      	mov	r7, ip
     808:	7800      	ldrb	r0, [r0, #0]
     80a:	4320      	orrs	r0, r4
     80c:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     80e:	7808      	ldrb	r0, [r1, #0]
     810:	4390      	bics	r0, r2
     812:	4320      	orrs	r0, r4
     814:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     816:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     818:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	4321      	orrs	r1, r4
     81e:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     822:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     824:	43a1      	bics	r1, r4
     826:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     828:	2180      	movs	r1, #128	; 0x80
     82a:	9803      	ldr	r0, [sp, #12]
     82c:	03c9      	lsls	r1, r1, #15
     82e:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     830:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     832:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     834:	3031      	adds	r0, #49	; 0x31
     836:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     838:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     83a:	4011      	ands	r1, r2
     83c:	430d      	orrs	r5, r1
     83e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     840:	001d      	movs	r5, r3
     842:	3543      	adds	r5, #67	; 0x43
     844:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     846:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     848:	4321      	orrs	r1, r4
     84a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84c:	7da9      	ldrb	r1, [r5, #22]
     84e:	3505      	adds	r5, #5
     850:	43a1      	bics	r1, r4
     852:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     854:	2180      	movs	r1, #128	; 0x80
     856:	0489      	lsls	r1, r1, #18
     858:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     85c:	7801      	ldrb	r1, [r0, #0]
     85e:	4391      	bics	r1, r2
     860:	4321      	orrs	r1, r4
     862:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     864:	7c41      	ldrb	r1, [r0, #17]
     866:	3011      	adds	r0, #17
     868:	4321      	orrs	r1, r4
     86a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86c:	7d81      	ldrb	r1, [r0, #22]
     86e:	43a1      	bics	r1, r4
     870:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     872:	2180      	movs	r1, #128	; 0x80
     874:	0449      	lsls	r1, r1, #17
     876:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     878:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87a:	7829      	ldrb	r1, [r5, #0]
     87c:	43a1      	bics	r1, r4
     87e:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     880:	2180      	movs	r1, #128	; 0x80
     882:	0049      	lsls	r1, r1, #1
     884:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	7831      	ldrb	r1, [r6, #0]
     888:	43a1      	bics	r1, r4
     88a:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88c:	2180      	movs	r1, #128	; 0x80
     88e:	0089      	lsls	r1, r1, #2
     890:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     892:	0019      	movs	r1, r3
     894:	314b      	adds	r1, #75	; 0x4b
     896:	7808      	ldrb	r0, [r1, #0]
     898:	43a0      	bics	r0, r4
     89a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     89c:	7808      	ldrb	r0, [r1, #0]
     89e:	4338      	orrs	r0, r7
     8a0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a2:	2080      	movs	r0, #128	; 0x80
     8a4:	0100      	lsls	r0, r0, #4
     8a6:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a8:	4877      	ldr	r0, [pc, #476]	; (a88 <init+0x324>)
     8aa:	371e      	adds	r7, #30
     8ac:	7800      	ldrb	r0, [r0, #0]
     8ae:	4010      	ands	r0, r2
     8b0:	4338      	orrs	r0, r7
     8b2:	4f75      	ldr	r7, [pc, #468]	; (a88 <init+0x324>)
     8b4:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8b8:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ba:	4320      	orrs	r0, r4
     8bc:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8be:	0018      	movs	r0, r3
     8c0:	3034      	adds	r0, #52	; 0x34
     8c2:	7801      	ldrb	r1, [r0, #0]
     8c4:	4011      	ands	r1, r2
     8c6:	4339      	orrs	r1, r7
     8c8:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ca:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8cc:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ce:	4321      	orrs	r1, r4
     8d0:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d2:	4666      	mov	r6, ip
     8d4:	7801      	ldrb	r1, [r0, #0]
     8d6:	4391      	bics	r1, r2
     8d8:	4331      	orrs	r1, r6
     8da:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8dc:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e0:	4321      	orrs	r1, r4
     8e2:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e4:	7801      	ldrb	r1, [r0, #0]
     8e6:	001e      	movs	r6, r3
     8e8:	43a1      	bics	r1, r4
     8ea:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ec:	2180      	movs	r1, #128	; 0x80
     8ee:	9803      	ldr	r0, [sp, #12]
     8f0:	00c9      	lsls	r1, r1, #3
     8f2:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8f4:	0018      	movs	r0, r3
     8f6:	3098      	adds	r0, #152	; 0x98
     8f8:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fa:	78a8      	ldrb	r0, [r5, #2]
     8fc:	3651      	adds	r6, #81	; 0x51
     8fe:	43a0      	bics	r0, r4
     900:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     902:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     904:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     906:	7a29      	ldrb	r1, [r5, #8]
     908:	43a1      	bics	r1, r4
     90a:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     90c:	2180      	movs	r1, #128	; 0x80
     90e:	0249      	lsls	r1, r1, #9
     910:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     912:	7831      	ldrb	r1, [r6, #0]
     914:	43a1      	bics	r1, r4
     916:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     918:	2180      	movs	r1, #128	; 0x80
     91a:	0289      	lsls	r1, r1, #10
     91c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91e:	0019      	movs	r1, r3
     920:	3153      	adds	r1, #83	; 0x53
     922:	7808      	ldrb	r0, [r1, #0]
     924:	43a0      	bics	r0, r4
     926:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     928:	7808      	ldrb	r0, [r1, #0]
     92a:	4338      	orrs	r0, r7
     92c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     92e:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     930:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     934:	0300      	lsls	r0, r0, #12
     936:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     938:	9703      	str	r7, [sp, #12]
     93a:	7838      	ldrb	r0, [r7, #0]
     93c:	2720      	movs	r7, #32
     93e:	4010      	ands	r0, r2
     940:	4338      	orrs	r0, r7
     942:	9f03      	ldr	r7, [sp, #12]
     944:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     946:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     948:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94a:	4320      	orrs	r0, r4
     94c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94e:	0018      	movs	r0, r3
     950:	3038      	adds	r0, #56	; 0x38
     952:	7801      	ldrb	r1, [r0, #0]
     954:	4011      	ands	r1, r2
     956:	4339      	orrs	r1, r7
     958:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     95a:	7831      	ldrb	r1, [r6, #0]
     95c:	4321      	orrs	r1, r4
     95e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     960:	4666      	mov	r6, ip
     962:	7801      	ldrb	r1, [r0, #0]
     964:	4391      	bics	r1, r2
     966:	4331      	orrs	r1, r6
     968:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     96a:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     96c:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     96e:	4321      	orrs	r1, r4
     970:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     972:	7981      	ldrb	r1, [r0, #6]
     974:	43a1      	bics	r1, r4
     976:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     978:	2180      	movs	r1, #128	; 0x80
     97a:	02c9      	lsls	r1, r1, #11
     97c:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     97e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     980:	7801      	ldrb	r1, [r0, #0]
     982:	43a1      	bics	r1, r4
     984:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     986:	2180      	movs	r1, #128	; 0x80
     988:	0149      	lsls	r1, r1, #5
     98a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     98c:	7881      	ldrb	r1, [r0, #2]
     98e:	43a1      	bics	r1, r4
     990:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     992:	2180      	movs	r1, #128	; 0x80
     994:	01c9      	lsls	r1, r1, #7
     996:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     998:	0019      	movs	r1, r3
     99a:	314d      	adds	r1, #77	; 0x4d
     99c:	7808      	ldrb	r0, [r1, #0]
     99e:	43a0      	bics	r0, r4
     9a0:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9a2:	7808      	ldrb	r0, [r1, #0]
     9a4:	4330      	orrs	r0, r6
     9a6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9a8:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9aa:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9ac:	0189      	lsls	r1, r1, #6
     9ae:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b0:	304f      	adds	r0, #79	; 0x4f
     9b2:	7801      	ldrb	r1, [r0, #0]
     9b4:	43a1      	bics	r1, r4
     9b6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9b8:	2180      	movs	r1, #128	; 0x80
     9ba:	0209      	lsls	r1, r1, #8
     9bc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9be:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c0:	0019      	movs	r1, r3
     9c2:	3155      	adds	r1, #85	; 0x55
     9c4:	7808      	ldrb	r0, [r1, #0]
     9c6:	43a0      	bics	r0, r4
     9c8:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ca:	2080      	movs	r0, #128	; 0x80
     9cc:	0380      	lsls	r0, r0, #14
     9ce:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9d0:	2040      	movs	r0, #64	; 0x40
     9d2:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d4:	7848      	ldrb	r0, [r1, #1]
     9d6:	43a0      	bics	r0, r4
     9d8:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9da:	2080      	movs	r0, #128	; 0x80
     9dc:	03c0      	lsls	r0, r0, #15
     9de:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9e0:	0018      	movs	r0, r3
     9e2:	303b      	adds	r0, #59	; 0x3b
     9e4:	7805      	ldrb	r5, [r0, #0]
     9e6:	4395      	bics	r5, r2
     9e8:	4335      	orrs	r5, r6
     9ea:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9ec:	784d      	ldrb	r5, [r1, #1]
     9ee:	4325      	orrs	r5, r4
     9f0:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9f2:	788d      	ldrb	r5, [r1, #2]
     9f4:	43a5      	bics	r5, r4
     9f6:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9f8:	788d      	ldrb	r5, [r1, #2]
     9fa:	4335      	orrs	r5, r6
     9fc:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9fe:	2580      	movs	r5, #128	; 0x80
     a00:	042d      	lsls	r5, r5, #16
     a02:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a04:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a06:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     a08:	4e20      	ldr	r6, [pc, #128]	; (a8c <init+0x328>)
     a0a:	401a      	ands	r2, r3
     a0c:	433a      	orrs	r2, r7
     a0e:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a10:	788b      	ldrb	r3, [r1, #2]
     a12:	2204      	movs	r2, #4
     a14:	4323      	orrs	r3, r4
     a16:	708b      	strb	r3, [r1, #2]
     a18:	2000      	movs	r0, #0
     a1a:	2103      	movs	r1, #3
     a1c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a1e:	002b      	movs	r3, r5
     a20:	002a      	movs	r2, r5
     a22:	0028      	movs	r0, r5
     a24:	4f1a      	ldr	r7, [pc, #104]	; (a90 <init+0x32c>)
     a26:	9501      	str	r5, [sp, #4]
     a28:	9500      	str	r5, [sp, #0]
     a2a:	2103      	movs	r1, #3
     a2c:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a2e:	0020      	movs	r0, r4
     a30:	2204      	movs	r2, #4
     a32:	2103      	movs	r1, #3
     a34:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a36:	002b      	movs	r3, r5
     a38:	002a      	movs	r2, r5
     a3a:	0020      	movs	r0, r4
     a3c:	9501      	str	r5, [sp, #4]
     a3e:	9500      	str	r5, [sp, #0]
     a40:	2103      	movs	r1, #3
     a42:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a44:	2208      	movs	r2, #8
     a46:	2104      	movs	r1, #4
     a48:	2003      	movs	r0, #3
     a4a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     a4c:	0021      	movs	r1, r4
     a4e:	002a      	movs	r2, r5
     a50:	2003      	movs	r0, #3
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <init+0x330>)
     a54:	4c10      	ldr	r4, [pc, #64]	; (a98 <init+0x334>)
     a56:	47a0      	blx	r4

    TC4Init();
     a58:	4b10      	ldr	r3, [pc, #64]	; (a9c <init+0x338>)
     a5a:	4798      	blx	r3
    TC5Init();
     a5c:	4b10      	ldr	r3, [pc, #64]	; (aa0 <init+0x33c>)
     a5e:	4798      	blx	r3
}
     a60:	b005      	add	sp, #20
     a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a64:	000001d5 	.word	0x000001d5
     a68:	00000fcd 	.word	0x00000fcd
     a6c:	00001055 	.word	0x00001055
     a70:	00001121 	.word	0x00001121
     a74:	00000db5 	.word	0x00000db5
     a78:	000012c1 	.word	0x000012c1
     a7c:	e000e100 	.word	0xe000e100
     a80:	ff00ffff 	.word	0xff00ffff
     a84:	41004400 	.word	0x41004400
     a88:	41004435 	.word	0x41004435
     a8c:	00001b19 	.word	0x00001b19
     a90:	00001b7d 	.word	0x00001b7d
     a94:	0000f2e4 	.word	0x0000f2e4
     a98:	00001be1 	.word	0x00001be1
     a9c:	000011f1 	.word	0x000011f1
     aa0:	00001259 	.word	0x00001259

00000aa4 <startUp>:

void startUp(Altimeter *my_altimeter) {
     aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     aa6:	0007      	movs	r7, r0

    beep(400);
     aa8:	20c8      	movs	r0, #200	; 0xc8
     aaa:	4b32      	ldr	r3, [pc, #200]	; (b74 <startUp+0xd0>)
     aac:	0040      	lsls	r0, r0, #1
     aae:	4798      	blx	r3

    u32_t startupTime = millis();
     ab0:	4c31      	ldr	r4, [pc, #196]	; (b78 <startUp+0xd4>)
     ab2:	47a0      	blx	r4
     ab4:	0006      	movs	r6, r0
     ab6:	9401      	str	r4, [sp, #4]

    while((millis() - startupTime) < 15000) {
     ab8:	9b01      	ldr	r3, [sp, #4]
     aba:	4798      	blx	r3
     abc:	4b2f      	ldr	r3, [pc, #188]	; (b7c <startUp+0xd8>)
     abe:	1b80      	subs	r0, r0, r6
     ac0:	4298      	cmp	r0, r3
     ac2:	d854      	bhi.n	b6e <startUp+0xca>

        if (USARTconnectionAvaliable()) {
     ac4:	4b2e      	ldr	r3, [pc, #184]	; (b80 <startUp+0xdc>)
     ac6:	4798      	blx	r3
     ac8:	2800      	cmp	r0, #0
     aca:	d0f5      	beq.n	ab8 <startUp+0x14>

            my_altimeter->myFlightState = flightIdle;
     acc:	2301      	movs	r3, #1

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     ace:	4a2d      	ldr	r2, [pc, #180]	; (b84 <startUp+0xe0>)

    while((millis() - startupTime) < 15000) {

        if (USARTconnectionAvaliable()) {

            my_altimeter->myFlightState = flightIdle;
     ad0:	703b      	strb	r3, [r7, #0]

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     ad2:	7e13      	ldrb	r3, [r2, #24]
     ad4:	075b      	lsls	r3, r3, #29
     ad6:	d5fc      	bpl.n	ad2 <startUp+0x2e>
            u8_t option = usartDataIn(USART3);
     ad8:	2003      	movs	r0, #3
     ada:	4d2b      	ldr	r5, [pc, #172]	; (b88 <startUp+0xe4>)
     adc:	47a8      	blx	r5
     ade:	1e04      	subs	r4, r0, #0

            //user wants to read flight logs
            if (option == 0x4C) {
     ae0:	2c4c      	cmp	r4, #76	; 0x4c
     ae2:	d13c      	bne.n	b5e <startUp+0xba>
     ae4:	2400      	movs	r4, #0

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                    if (isFlightLogged(flightLog)) {
     ae6:	0020      	movs	r0, r4
     ae8:	4b28      	ldr	r3, [pc, #160]	; (b8c <startUp+0xe8>)
     aea:	4798      	blx	r3
     aec:	2800      	cmp	r0, #0
     aee:	d005      	beq.n	afc <startUp+0x58>

                        usartDataOut(USART3, flightLog + 0x30);
     af0:	0021      	movs	r1, r4
     af2:	3130      	adds	r1, #48	; 0x30
     af4:	b2c9      	uxtb	r1, r1
     af6:	2003      	movs	r0, #3
     af8:	4b25      	ldr	r3, [pc, #148]	; (b90 <startUp+0xec>)
     afa:	4798      	blx	r3

            //user wants to read flight logs
            if (option == 0x4C) {

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
     afc:	3401      	adds	r4, #1
     afe:	b2e4      	uxtb	r4, r4
     b00:	2c0b      	cmp	r4, #11
     b02:	d1f0      	bne.n	ae6 <startUp+0x42>

                        usartDataOut(USART3, flightLog + 0x30);
                    }
                }
                //done sending flight numbers
                usartDataOut(USART3, 0x0F);
     b04:	210f      	movs	r1, #15
     b06:	2003      	movs	r0, #3
     b08:	4c21      	ldr	r4, [pc, #132]	; (b90 <startUp+0xec>)
     b0a:	47a0      	blx	r4

                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     b0c:	4b1d      	ldr	r3, [pc, #116]	; (b84 <startUp+0xe0>)
     b0e:	7e1b      	ldrb	r3, [r3, #24]
     b10:	075b      	lsls	r3, r3, #29
     b12:	d5fb      	bpl.n	b0c <startUp+0x68>
                u8_t flightToRead = usartDataIn(USART3) - 0x30;
     b14:	2003      	movs	r0, #3
     b16:	47a8      	blx	r5
     b18:	3830      	subs	r0, #48	; 0x30
     b1a:	b2c5      	uxtb	r5, r0


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b1c:	0028      	movs	r0, r5
     b1e:	4b1d      	ldr	r3, [pc, #116]	; (b94 <startUp+0xf0>)
     b20:	4798      	blx	r3
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b22:	4b1d      	ldr	r3, [pc, #116]	; (b98 <startUp+0xf4>)
                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                u8_t flightToRead = usartDataIn(USART3) - 0x30;


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b24:	0007      	movs	r7, r0
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b26:	0028      	movs	r0, r5
     b28:	4798      	blx	r3
     b2a:	0006      	movs	r6, r0

                //inform of page numbers
                u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
     b2c:	1bc5      	subs	r5, r0, r7
     b2e:	0a2d      	lsrs	r5, r5, #8
                usartDataOut(USART3, pagesToSend >> 0);
     b30:	b2e9      	uxtb	r1, r5
     b32:	2003      	movs	r0, #3
     b34:	47a0      	blx	r4
                usartDataOut(USART3, pagesToSend >> 8);
     b36:	b2a9      	uxth	r1, r5
     b38:	0a09      	lsrs	r1, r1, #8
     b3a:	2003      	movs	r0, #3
     b3c:	47a0      	blx	r4

                //send flight end address for % full
                usartDataOut(USART3, flightEndAddress >> 0);
     b3e:	b2f1      	uxtb	r1, r6
     b40:	2003      	movs	r0, #3
     b42:	47a0      	blx	r4
                usartDataOut(USART3, flightEndAddress >> 8);
     b44:	0a31      	lsrs	r1, r6, #8
     b46:	b2c9      	uxtb	r1, r1
     b48:	2003      	movs	r0, #3
     b4a:	47a0      	blx	r4
                usartDataOut(USART3, flightEndAddress >> 16);
     b4c:	0c31      	lsrs	r1, r6, #16
     b4e:	b2c9      	uxtb	r1, r1
     b50:	2003      	movs	r0, #3
     b52:	47a0      	blx	r4



                //USART out the flights pages
                sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
     b54:	0031      	movs	r1, r6
     b56:	0038      	movs	r0, r7
     b58:	4b10      	ldr	r3, [pc, #64]	; (b9c <startUp+0xf8>)
     b5a:	4798      	blx	r3

                break;
     b5c:	e007      	b.n	b6e <startUp+0xca>
            }
            //user wants to erase chip
            if (option == 0x45) {
     b5e:	2845      	cmp	r0, #69	; 0x45
     b60:	d1aa      	bne.n	ab8 <startUp+0x14>
                AT25SFChipErase();
     b62:	4b0f      	ldr	r3, [pc, #60]	; (ba0 <startUp+0xfc>)
     b64:	4798      	blx	r3

                usartDataOut(USART3, 'E');
     b66:	0021      	movs	r1, r4
     b68:	2003      	movs	r0, #3
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <startUp+0xec>)
     b6c:	4798      	blx	r3
                break;
            }
        }
    }

    startupJingle();
     b6e:	4b0d      	ldr	r3, [pc, #52]	; (ba4 <startUp+0x100>)
     b70:	4798      	blx	r3
}
     b72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     b74:	00000f59 	.word	0x00000f59
     b78:	000011bd 	.word	0x000011bd
     b7c:	00003a97 	.word	0x00003a97
     b80:	00000d39 	.word	0x00000d39
     b84:	42001400 	.word	0x42001400
     b88:	00001c55 	.word	0x00001c55
     b8c:	00001621 	.word	0x00001621
     b90:	00001c3d 	.word	0x00001c3d
     b94:	000015f9 	.word	0x000015f9
     b98:	0000166d 	.word	0x0000166d
     b9c:	00000d6d 	.word	0x00000d6d
     ba0:	000001e5 	.word	0x000001e5
     ba4:	00000f95 	.word	0x00000f95

00000ba8 <main>:

int main(void) {
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     baa:	2500      	movs	r5, #0
    }

    startupJingle();
}

int main(void) {
     bac:	4c3f      	ldr	r4, [pc, #252]	; (cac <main+0x104>)

    init();
     bae:	4b40      	ldr	r3, [pc, #256]	; (cb0 <main+0x108>)
    }

    startupJingle();
}

int main(void) {
     bb0:	44a5      	add	sp, r4

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bb2:	ac03      	add	r4, sp, #12
    startupJingle();
}

int main(void) {

    init();
     bb4:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
     bb6:	4b3f      	ldr	r3, [pc, #252]	; (cb4 <main+0x10c>)
     bb8:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bba:	7025      	strb	r5, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     bbc:	4798      	blx	r3
    IMUinit();
     bbe:	4b3e      	ldr	r3, [pc, #248]	; (cb8 <main+0x110>)
     bc0:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bc2:	23c8      	movs	r3, #200	; 0xc8
    my_altimeter.myFlashMemory.pageReady = false;
     bc4:	4f3d      	ldr	r7, [pc, #244]	; (cbc <main+0x114>)
    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bc6:	005b      	lsls	r3, r3, #1
     bc8:	54e5      	strb	r5, [r4, r3]
    my_altimeter.myFlashMemory.pageReady = false;


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bca:	0020      	movs	r0, r4
     bcc:	4b3c      	ldr	r3, [pc, #240]	; (cc0 <main+0x118>)
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     bce:	55e5      	strb	r5, [r4, r7]


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bd0:	4798      	blx	r3

    //my_altimeter.myFlightState = flightIdle;


    flight(&my_altimeter);
     bd2:	0020      	movs	r0, r4
     bd4:	4e3b      	ldr	r6, [pc, #236]	; (cc4 <main+0x11c>)
     bd6:	47b0      	blx	r6

    sampleTaken();
     bd8:	4d3b      	ldr	r5, [pc, #236]	; (cc8 <main+0x120>)
     bda:	47a8      	blx	r5


    u32_t timeNow = millis();
     bdc:	4b3b      	ldr	r3, [pc, #236]	; (ccc <main+0x124>)
     bde:	4798      	blx	r3
     be0:	9701      	str	r7, [sp, #4]
     be2:	0037      	movs	r7, r6
     be4:	4e39      	ldr	r6, [pc, #228]	; (ccc <main+0x124>)
     be6:	9000      	str	r0, [sp, #0]
    while((millis() - timeNow) < 3000) {
     be8:	47b0      	blx	r6
     bea:	9b00      	ldr	r3, [sp, #0]
     bec:	1ac0      	subs	r0, r0, r3
     bee:	4b38      	ldr	r3, [pc, #224]	; (cd0 <main+0x128>)
     bf0:	4298      	cmp	r0, r3
     bf2:	d805      	bhi.n	c00 <main+0x58>
        sampleTick(&my_altimeter);
     bf4:	0020      	movs	r0, r4
     bf6:	4b37      	ldr	r3, [pc, #220]	; (cd4 <main+0x12c>)
     bf8:	4798      	blx	r3
        flight(&my_altimeter);
     bfa:	0020      	movs	r0, r4
     bfc:	47b8      	blx	r7
     bfe:	e7f3      	b.n	be8 <main+0x40>
    }

    if (my_altimeter.myFlightState != flightIdle) {
     c00:	7823      	ldrb	r3, [r4, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d005      	beq.n	c12 <main+0x6a>
        findNewFlightStart(&my_altimeter);
     c06:	0020      	movs	r0, r4
     c08:	4b33      	ldr	r3, [pc, #204]	; (cd8 <main+0x130>)
     c0a:	4798      	blx	r3
        logFlight(&my_altimeter);
     c0c:	0020      	movs	r0, r4
     c0e:	4b33      	ldr	r3, [pc, #204]	; (cdc <main+0x134>)
     c10:	4798      	blx	r3
    }

    sampleTaken();
     c12:	47a8      	blx	r5
    writeLog = false;
     c14:	2300      	movs	r3, #0
     c16:	4d32      	ldr	r5, [pc, #200]	; (ce0 <main+0x138>)
     c18:	702b      	strb	r3, [r5, #0]


    while (1) {

        if (takeSample()) {
     c1a:	4b32      	ldr	r3, [pc, #200]	; (ce4 <main+0x13c>)
     c1c:	4798      	blx	r3
     c1e:	2800      	cmp	r0, #0
     c20:	d026      	beq.n	c70 <main+0xc8>
            sampleTick(&my_altimeter);
     c22:	4b2c      	ldr	r3, [pc, #176]	; (cd4 <main+0x12c>)
     c24:	0020      	movs	r0, r4
     c26:	4798      	blx	r3
            flight(&my_altimeter);
     c28:	0020      	movs	r0, r4
     c2a:	47b8      	blx	r7

            if (my_altimeter.batFloat < 3.5) {
     c2c:	23a6      	movs	r3, #166	; 0xa6
     c2e:	ae03      	add	r6, sp, #12
     c30:	009b      	lsls	r3, r3, #2
     c32:	58f0      	ldr	r0, [r6, r3]
     c34:	492c      	ldr	r1, [pc, #176]	; (ce8 <main+0x140>)
     c36:	4b2d      	ldr	r3, [pc, #180]	; (cec <main+0x144>)
     c38:	4798      	blx	r3
     c3a:	2800      	cmp	r0, #0
     c3c:	d018      	beq.n	c70 <main+0xc8>
                my_altimeter.myFlightState = flightIdle;
     c3e:	2301      	movs	r3, #1
                beep(300);
     c40:	2096      	movs	r0, #150	; 0x96
        if (takeSample()) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);

            if (my_altimeter.batFloat < 3.5) {
                my_altimeter.myFlightState = flightIdle;
     c42:	7033      	strb	r3, [r6, #0]
                beep(300);
     c44:	0040      	lsls	r0, r0, #1
     c46:	4e2a      	ldr	r6, [pc, #168]	; (cf0 <main+0x148>)
     c48:	47b0      	blx	r6
                delay_ms(80);
     c4a:	4b2a      	ldr	r3, [pc, #168]	; (cf4 <main+0x14c>)
     c4c:	2050      	movs	r0, #80	; 0x50
     c4e:	4798      	blx	r3
                beep(300);
     c50:	2096      	movs	r0, #150	; 0x96
     c52:	0040      	lsls	r0, r0, #1
     c54:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c56:	2280      	movs	r2, #128	; 0x80
     c58:	4b27      	ldr	r3, [pc, #156]	; (cf8 <main+0x150>)
     c5a:	0392      	lsls	r2, r2, #14
     c5c:	615a      	str	r2, [r3, #20]
     c5e:	2280      	movs	r2, #128	; 0x80
     c60:	0352      	lsls	r2, r2, #13
     c62:	615a      	str	r2, [r3, #20]
                pinLow(buzzerPin);
                pinLow(LedPin);
                TC4->COUNT8.CTRLA.reg = 0;
     c64:	2300      	movs	r3, #0
     c66:	4a25      	ldr	r2, [pc, #148]	; (cfc <main+0x154>)
     c68:	8013      	strh	r3, [r2, #0]
                TC5->COUNT8.CTRLA.reg = 0;
     c6a:	4a25      	ldr	r2, [pc, #148]	; (d00 <main+0x158>)
     c6c:	8013      	strh	r3, [r2, #0]
				writeLog = false;
     c6e:	702b      	strb	r3, [r5, #0]
            }
        }

        if (writeLog) {
     c70:	782b      	ldrb	r3, [r5, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d0d1      	beq.n	c1a <main+0x72>
            writeLog = false;
     c76:	2600      	movs	r6, #0
            logSensors(&my_altimeter);
     c78:	4b22      	ldr	r3, [pc, #136]	; (d04 <main+0x15c>)
     c7a:	0020      	movs	r0, r4
				writeLog = false;
            }
        }

        if (writeLog) {
            writeLog = false;
     c7c:	702e      	strb	r6, [r5, #0]
            logSensors(&my_altimeter);
     c7e:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     c80:	9a01      	ldr	r2, [sp, #4]
     c82:	ab03      	add	r3, sp, #12
     c84:	5c9b      	ldrb	r3, [r3, r2]
     c86:	42b3      	cmp	r3, r6
     c88:	d0c7      	beq.n	c1a <main+0x72>
                my_altimeter.myFlashMemory.pageReady = false;
     c8a:	4b0c      	ldr	r3, [pc, #48]	; (cbc <main+0x114>)
     c8c:	aa03      	add	r2, sp, #12
     c8e:	54d6      	strb	r6, [r2, r3]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c90:	2280      	movs	r2, #128	; 0x80
     c92:	4b19      	ldr	r3, [pc, #100]	; (cf8 <main+0x150>)
     c94:	0352      	lsls	r2, r2, #13
     c96:	61da      	str	r2, [r3, #28]

                pinToggle(LedPin);

                u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
     c98:	a927      	add	r1, sp, #156	; 0x9c
     c9a:	4b1b      	ldr	r3, [pc, #108]	; (d08 <main+0x160>)
     c9c:	9825      	ldr	r0, [sp, #148]	; 0x94
     c9e:	4798      	blx	r3
                my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     ca0:	9b25      	ldr	r3, [sp, #148]	; 0x94
     ca2:	3301      	adds	r3, #1
     ca4:	33ff      	adds	r3, #255	; 0xff
     ca6:	9325      	str	r3, [sp, #148]	; 0x94
     ca8:	e7b7      	b.n	c1a <main+0x72>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	fffffd44 	.word	0xfffffd44
     cb0:	00000765 	.word	0x00000765
     cb4:	000006d5 	.word	0x000006d5
     cb8:	00000d0d 	.word	0x00000d0d
     cbc:	00000291 	.word	0x00000291
     cc0:	00000aa5 	.word	0x00000aa5
     cc4:	00001321 	.word	0x00001321
     cc8:	0000175d 	.word	0x0000175d
     ccc:	000011bd 	.word	0x000011bd
     cd0:	00000bb7 	.word	0x00000bb7
     cd4:	00001769 	.word	0x00001769
     cd8:	0000169d 	.word	0x0000169d
     cdc:	00001509 	.word	0x00001509
     ce0:	20000461 	.word	0x20000461
     ce4:	00001745 	.word	0x00001745
     ce8:	40600000 	.word	0x40600000
     cec:	00002f25 	.word	0x00002f25
     cf0:	00000f59 	.word	0x00000f59
     cf4:	00001171 	.word	0x00001171
     cf8:	41004400 	.word	0x41004400
     cfc:	42003000 	.word	0x42003000
     d00:	42003400 	.word	0x42003400
     d04:	00001565 	.word	0x00001565
     d08:	000002ed 	.word	0x000002ed

00000d0c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     d0c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0e:	4c08      	ldr	r4, [pc, #32]	; (d30 <IMUinit+0x24>)
     d10:	2580      	movs	r5, #128	; 0x80
     d12:	0023      	movs	r3, r4
     d14:	00ed      	lsls	r5, r5, #3
     d16:	3394      	adds	r3, #148	; 0x94
     d18:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     d1a:	4e06      	ldr	r6, [pc, #24]	; (d34 <IMUinit+0x28>)
     d1c:	210f      	movs	r1, #15
     d1e:	2000      	movs	r0, #0
     d20:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d22:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     d24:	210c      	movs	r1, #12
     d26:	2000      	movs	r0, #0
     d28:	47b0      	blx	r6
     d2a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     d2c:	bd70      	pop	{r4, r5, r6, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	41004400 	.word	0x41004400
     d34:	00001c25 	.word	0x00001c25

00000d38 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable(){
     d38:	b510      	push	{r4, lr}

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <USARTconnectionAvaliable+0x28>)
     d3c:	7e1c      	ldrb	r4, [r3, #24]
     d3e:	0764      	lsls	r4, r4, #29
     d40:	0fe4      	lsrs	r4, r4, #31
     d42:	2c01      	cmp	r4, #1
     d44:	d001      	beq.n	d4a <USARTconnectionAvaliable+0x12>
			}
			else{
				return false;
			}
	}
		return false;
     d46:	2000      	movs	r0, #0
     d48:	e009      	b.n	d5e <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable(){

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
		u8_t connectAttempt = usartDataIn(USART3);
     d4a:	2003      	movs	r0, #3
     d4c:	4b05      	ldr	r3, [pc, #20]	; (d64 <USARTconnectionAvaliable+0x2c>)
     d4e:	4798      	blx	r3
     d50:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     d52:	2948      	cmp	r1, #72	; 0x48
     d54:	d1f7      	bne.n	d46 <USARTconnectionAvaliable+0xe>
				usartDataOut(USART3, 'H');
     d56:	2003      	movs	r0, #3
     d58:	4b03      	ldr	r3, [pc, #12]	; (d68 <USARTconnectionAvaliable+0x30>)
     d5a:	4798      	blx	r3
				return true;
     d5c:	0020      	movs	r0, r4
			else{
				return false;
			}
	}
		return false;
  }
     d5e:	bd10      	pop	{r4, pc}
     d60:	42001400 	.word	0x42001400
     d64:	00001c55 	.word	0x00001c55
     d68:	00001c3d 	.word	0x00001c3d

00000d6c <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d6e:	2780      	movs	r7, #128	; 0x80
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d70:	0005      	movs	r5, r0
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     d72:	2400      	movs	r4, #0
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     d74:	1a09      	subs	r1, r1, r0
     d76:	0a09      	lsrs	r1, r1, #8
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d78:	b0c3      	sub	sp, #268	; 0x10c
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     d7a:	b28b      	uxth	r3, r1
     d7c:	9301      	str	r3, [sp, #4]
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d7e:	007f      	lsls	r7, r7, #1
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     d80:	a902      	add	r1, sp, #8
     d82:	0028      	movs	r0, r5
     d84:	4b09      	ldr	r3, [pc, #36]	; (dac <sendTheasePagesToComputer+0x40>)
     d86:	4798      	blx	r3
     d88:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
     d8a:	ab02      	add	r3, sp, #8
     d8c:	5d99      	ldrb	r1, [r3, r6]
     d8e:	2003      	movs	r0, #3
     d90:	4b07      	ldr	r3, [pc, #28]	; (db0 <sendTheasePagesToComputer+0x44>)
     d92:	3601      	adds	r6, #1
     d94:	4798      	blx	r3
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d96:	42be      	cmp	r6, r7
     d98:	d1f7      	bne.n	d8a <sendTheasePagesToComputer+0x1e>
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     d9a:	3401      	adds	r4, #1
     d9c:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     d9e:	3501      	adds	r5, #1
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     da0:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     da2:	35ff      	adds	r5, #255	; 0xff
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     da4:	42a3      	cmp	r3, r4
     da6:	d2eb      	bcs.n	d80 <sendTheasePagesToComputer+0x14>
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
 }
     da8:	b043      	add	sp, #268	; 0x10c
     daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dac:	000003d1 	.word	0x000003d1
     db0:	00001c3d 	.word	0x00001c3d

00000db4 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     db4:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     db6:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     db8:	4a10      	ldr	r2, [pc, #64]	; (dfc <adcInit+0x48>)
     dba:	0249      	lsls	r1, r1, #9
     dbc:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dbe:	4810      	ldr	r0, [pc, #64]	; (e00 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dc0:	430b      	orrs	r3, r1
     dc2:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dc4:	23e0      	movs	r3, #224	; 0xe0
     dc6:	490f      	ldr	r1, [pc, #60]	; (e04 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dc8:	4a0f      	ldr	r2, [pc, #60]	; (e08 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dca:	00db      	lsls	r3, r3, #3
     dcc:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dce:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     dd0:	4a0e      	ldr	r2, [pc, #56]	; (e0c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     dd2:	6812      	ldr	r2, [r2, #0]
     dd4:	0150      	lsls	r0, r2, #5
     dd6:	4018      	ands	r0, r3
     dd8:	4b0d      	ldr	r3, [pc, #52]	; (e10 <adcInit+0x5c>)
     dda:	0154      	lsls	r4, r2, #5
     ddc:	681a      	ldr	r2, [r3, #0]
     dde:	0ed3      	lsrs	r3, r2, #27
     de0:	4323      	orrs	r3, r4
     de2:	b2da      	uxtb	r2, r3
     de4:	0003      	movs	r3, r0
     de6:	4313      	orrs	r3, r2
     de8:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     dea:	2302      	movs	r3, #2
     dec:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     dee:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     df0:	7e4b      	ldrb	r3, [r1, #25]
     df2:	b25b      	sxtb	r3, r3
     df4:	2b00      	cmp	r3, #0
     df6:	dbfb      	blt.n	df0 <adcInit+0x3c>
}
     df8:	bd10      	pop	{r4, pc}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	40000400 	.word	0x40000400
     e00:	0000401e 	.word	0x0000401e
     e04:	42004000 	.word	0x42004000
     e08:	40000c00 	.word	0x40000c00
     e0c:	00806024 	.word	0x00806024
     e10:	00806020 	.word	0x00806020

00000e14 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     e14:	2202      	movs	r2, #2
     e16:	4b05      	ldr	r3, [pc, #20]	; (e2c <adcSample+0x18>)
     e18:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     e1a:	3a01      	subs	r2, #1
     e1c:	7e19      	ldrb	r1, [r3, #24]
     e1e:	4211      	tst	r1, r2
     e20:	d0fc      	beq.n	e1c <adcSample+0x8>
    return ADC->RESULT.reg;
     e22:	4b02      	ldr	r3, [pc, #8]	; (e2c <adcSample+0x18>)
     e24:	8b58      	ldrh	r0, [r3, #26]
     e26:	b280      	uxth	r0, r0
}
     e28:	4770      	bx	lr
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	42004000 	.word	0x42004000

00000e30 <adc_read>:


u16_t adc_read(Pin p) {
     e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e32:	2501      	movs	r5, #1
     e34:	0c02      	lsrs	r2, r0, #16
     e36:	b2d4      	uxtb	r4, r2
     e38:	9000      	str	r0, [sp, #0]
     e3a:	0e00      	lsrs	r0, r0, #24
     e3c:	9101      	str	r1, [sp, #4]
     e3e:	0842      	lsrs	r2, r0, #1
     e40:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e42:	4911      	ldr	r1, [pc, #68]	; (e88 <adc_read+0x58>)
     e44:	18d2      	adds	r2, r2, r3
     e46:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e48:	4228      	tst	r0, r5
     e4a:	d005      	beq.n	e58 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e4c:	210f      	movs	r1, #15
     e4e:	7814      	ldrb	r4, [r2, #0]
     e50:	4021      	ands	r1, r4
     e52:	2410      	movs	r4, #16
     e54:	4321      	orrs	r1, r4
     e56:	e003      	b.n	e60 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e58:	240f      	movs	r4, #15
     e5a:	7811      	ldrb	r1, [r2, #0]
     e5c:	43a1      	bics	r1, r4
     e5e:	4329      	orrs	r1, r5
     e60:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     e62:	2101      	movs	r1, #1
     e64:	4a09      	ldr	r2, [pc, #36]	; (e8c <adc_read+0x5c>)
     e66:	18c3      	adds	r3, r0, r3
     e68:	189b      	adds	r3, r3, r2
     e6a:	781a      	ldrb	r2, [r3, #0]
     e6c:	430a      	orrs	r2, r1
     e6e:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e70:	466b      	mov	r3, sp
     e72:	791a      	ldrb	r2, [r3, #4]
     e74:	231f      	movs	r3, #31
     e76:	4013      	ands	r3, r2
     e78:	22c0      	movs	r2, #192	; 0xc0
     e7a:	0152      	lsls	r2, r2, #5
     e7c:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e7e:	4a04      	ldr	r2, [pc, #16]	; (e90 <adc_read+0x60>)
     e80:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     e82:	4b04      	ldr	r3, [pc, #16]	; (e94 <adc_read+0x64>)
     e84:	4798      	blx	r3
     e86:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e88:	41004430 	.word	0x41004430
     e8c:	41004440 	.word	0x41004440
     e90:	42004000 	.word	0x42004000
     e94:	00000e15 	.word	0x00000e15

00000e98 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     e98:	0c01      	lsrs	r1, r0, #16
     e9a:	0c13      	lsrs	r3, r2, #16
     e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9e:	b2cd      	uxtb	r5, r1
     ea0:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ea2:	2301      	movs	r3, #1
     ea4:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ea6:	0e12      	lsrs	r2, r2, #24
     ea8:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eaa:	0e00      	lsrs	r0, r0, #24
     eac:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     eae:	001a      	movs	r2, r3
     eb0:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eb2:	0030      	movs	r0, r6
     eb4:	4e11      	ldr	r6, [pc, #68]	; (efc <byteOut+0x64>)
     eb6:	01c9      	lsls	r1, r1, #7
     eb8:	b087      	sub	sp, #28
     eba:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ebc:	4e10      	ldr	r6, [pc, #64]	; (f00 <byteOut+0x68>)
     ebe:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ec0:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ec2:	19ae      	adds	r6, r5, r6
     ec4:	7824      	ldrb	r4, [r4, #0]
     ec6:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ec8:	4e0c      	ldr	r6, [pc, #48]	; (efc <byteOut+0x64>)
     eca:	46b4      	mov	ip, r6
     ecc:	44ac      	add	ip, r5
     ece:	4666      	mov	r6, ip
     ed0:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     ed2:	b266      	sxtb	r6, r4
     ed4:	2e00      	cmp	r6, #0
     ed6:	da05      	bge.n	ee4 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ed8:	4e09      	ldr	r6, [pc, #36]	; (f00 <byteOut+0x68>)
     eda:	46b4      	mov	ip, r6
     edc:	448c      	add	ip, r1
     ede:	4666      	mov	r6, ip
     ee0:	6032      	str	r2, [r6, #0]
     ee2:	e000      	b.n	ee6 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ee4:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ee6:	9e01      	ldr	r6, [sp, #4]
     ee8:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     eea:	0064      	lsls	r4, r4, #1
     eec:	b2db      	uxtb	r3, r3
     eee:	6030      	str	r0, [r6, #0]
     ef0:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     ef2:	2b00      	cmp	r3, #0
     ef4:	d1e8      	bne.n	ec8 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     ef6:	b007      	add	sp, #28
     ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	41004414 	.word	0x41004414
     f00:	41004418 	.word	0x41004418

00000f04 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     f04:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f06:	2501      	movs	r5, #1
     f08:	b085      	sub	sp, #20
     f0a:	9103      	str	r1, [sp, #12]
     f0c:	0011      	movs	r1, r2
     f0e:	0c06      	lsrs	r6, r0, #16
     f10:	9301      	str	r3, [sp, #4]
     f12:	b2f3      	uxtb	r3, r6
     f14:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f16:	0e09      	lsrs	r1, r1, #24
     f18:	0c14      	lsrs	r4, r2, #16
     f1a:	9002      	str	r0, [sp, #8]
     f1c:	9200      	str	r2, [sp, #0]
     f1e:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f20:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f22:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     f24:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f26:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f28:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f2a:	4c0a      	ldr	r4, [pc, #40]	; (f54 <byteIn+0x50>)
     f2c:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f2e:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f30:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f32:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f34:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f36:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     f38:	0040      	lsls	r0, r0, #1
     f3a:	402c      	ands	r4, r5
     f3c:	1e67      	subs	r7, r4, #1
     f3e:	41bc      	sbcs	r4, r7
     f40:	3901      	subs	r1, #1
     f42:	4304      	orrs	r4, r0
     f44:	b2c9      	uxtb	r1, r1
     f46:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f48:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     f4a:	2900      	cmp	r1, #0
     f4c:	d1f2      	bne.n	f34 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     f4e:	b005      	add	sp, #20
     f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	41004400 	.word	0x41004400

00000f58 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	2780      	movs	r7, #128	; 0x80
     f5e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f60:	2500      	movs	r5, #0
     f62:	4c0a      	ldr	r4, [pc, #40]	; (f8c <beep+0x34>)
     f64:	035b      	lsls	r3, r3, #13
     f66:	61e3      	str	r3, [r4, #28]
     f68:	03bf      	lsls	r7, r7, #14
     f6a:	42b5      	cmp	r5, r6
     f6c:	d006      	beq.n	f7c <beep+0x24>
     f6e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     f70:	207a      	movs	r0, #122	; 0x7a
     f72:	4b07      	ldr	r3, [pc, #28]	; (f90 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f74:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     f76:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f78:	b2ad      	uxth	r5, r5
     f7a:	e7f6      	b.n	f6a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f7c:	2380      	movs	r3, #128	; 0x80
     f7e:	039b      	lsls	r3, r3, #14
     f80:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f82:	2380      	movs	r3, #128	; 0x80
     f84:	035b      	lsls	r3, r3, #13
     f86:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	41004400 	.word	0x41004400
     f90:	00001141 	.word	0x00001141

00000f94 <startupJingle>:

void startupJingle(){
     f94:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     f96:	2696      	movs	r6, #150	; 0x96
     f98:	0076      	lsls	r6, r6, #1
     f9a:	4d0a      	ldr	r5, [pc, #40]	; (fc4 <startupJingle+0x30>)
     f9c:	0030      	movs	r0, r6
     f9e:	47a8      	blx	r5
    delay_ms(80);
     fa0:	4c09      	ldr	r4, [pc, #36]	; (fc8 <startupJingle+0x34>)
     fa2:	2050      	movs	r0, #80	; 0x50
     fa4:	47a0      	blx	r4
    beep(300);
     fa6:	0030      	movs	r0, r6
     fa8:	47a8      	blx	r5
    delay_ms(250);
     faa:	20fa      	movs	r0, #250	; 0xfa
     fac:	47a0      	blx	r4
    beep(300);
     fae:	0030      	movs	r0, r6
     fb0:	47a8      	blx	r5
    delay_ms(80);
     fb2:	2050      	movs	r0, #80	; 0x50
     fb4:	47a0      	blx	r4
    beep(300);
     fb6:	0030      	movs	r0, r6
     fb8:	47a8      	blx	r5
    delay_ms(500);
     fba:	20fa      	movs	r0, #250	; 0xfa
     fbc:	0040      	lsls	r0, r0, #1
     fbe:	47a0      	blx	r4
}
     fc0:	bd70      	pop	{r4, r5, r6, pc}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	00000f59 	.word	0x00000f59
     fc8:	00001171 	.word	0x00001171

00000fcc <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fcc:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fce:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     fd0:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fd2:	4916      	ldr	r1, [pc, #88]	; (102c <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fd4:	4a16      	ldr	r2, [pc, #88]	; (1030 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fd6:	00db      	lsls	r3, r3, #3
     fd8:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fda:	6853      	ldr	r3, [r2, #4]
     fdc:	4303      	orrs	r3, r0
     fde:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fe0:	4b14      	ldr	r3, [pc, #80]	; (1034 <GclkInit+0x68>)
     fe2:	681a      	ldr	r2, [r3, #0]
     fe4:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     fe6:	2a3f      	cmp	r2, #63	; 0x3f
     fe8:	d100      	bne.n	fec <GclkInit+0x20>
        coarse = 0x1f;
     fea:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     fec:	4b12      	ldr	r3, [pc, #72]	; (1038 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     fee:	4813      	ldr	r0, [pc, #76]	; (103c <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	059b      	lsls	r3, r3, #22
     ff4:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ff6:	4283      	cmp	r3, r0
     ff8:	d100      	bne.n	ffc <GclkInit+0x30>
        fine = 0x1ff;
     ffa:	4b11      	ldr	r3, [pc, #68]	; (1040 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     ffc:	4811      	ldr	r0, [pc, #68]	; (1044 <GclkInit+0x78>)
     ffe:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    1000:	2010      	movs	r0, #16
    1002:	68cc      	ldr	r4, [r1, #12]
    1004:	4204      	tst	r4, r0
    1006:	d0fc      	beq.n	1002 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    1008:	0292      	lsls	r2, r2, #10
    100a:	4313      	orrs	r3, r2
    100c:	4a07      	ldr	r2, [pc, #28]	; (102c <GclkInit+0x60>)
    100e:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    1010:	2310      	movs	r3, #16
    1012:	68ca      	ldr	r2, [r1, #12]
    1014:	421a      	tst	r2, r3
    1016:	d0fc      	beq.n	1012 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
    1018:	4a0b      	ldr	r2, [pc, #44]	; (1048 <GclkInit+0x7c>)
    101a:	4b04      	ldr	r3, [pc, #16]	; (102c <GclkInit+0x60>)
    101c:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
    101e:	2280      	movs	r2, #128	; 0x80
    1020:	4b0a      	ldr	r3, [pc, #40]	; (104c <GclkInit+0x80>)
    1022:	0052      	lsls	r2, r2, #1
    1024:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
    1026:	4a0a      	ldr	r2, [pc, #40]	; (1050 <GclkInit+0x84>)
    1028:	605a      	str	r2, [r3, #4]
}
    102a:	bd10      	pop	{r4, pc}
    102c:	40000800 	.word	0x40000800
    1030:	41004000 	.word	0x41004000
    1034:	00806024 	.word	0x00806024
    1038:	00806028 	.word	0x00806028
    103c:	000003ff 	.word	0x000003ff
    1040:	000001ff 	.word	0x000001ff
    1044:	00000522 	.word	0x00000522
    1048:	000005a2 	.word	0x000005a2
    104c:	40000c00 	.word	0x40000c00
    1050:	00010700 	.word	0x00010700

00001054 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
    1054:	4a1d      	ldr	r2, [pc, #116]	; (10cc <RtcInit+0x78>)
    1056:	4b1e      	ldr	r3, [pc, #120]	; (10d0 <RtcInit+0x7c>)
    1058:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    105a:	2202      	movs	r2, #2
    105c:	68d9      	ldr	r1, [r3, #12]
    105e:	4211      	tst	r1, r2
    1060:	d0fc      	beq.n	105c <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
    1062:	2281      	movs	r2, #129	; 0x81
    1064:	4b1b      	ldr	r3, [pc, #108]	; (10d4 <RtcInit+0x80>)
    1066:	0052      	lsls	r2, r2, #1
    1068:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
    106a:	4a1b      	ldr	r2, [pc, #108]	; (10d8 <RtcInit+0x84>)
    106c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    106e:	785a      	ldrb	r2, [r3, #1]
    1070:	b252      	sxtb	r2, r2
    1072:	2a00      	cmp	r2, #0
    1074:	dbfb      	blt.n	106e <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1076:	4a19      	ldr	r2, [pc, #100]	; (10dc <RtcInit+0x88>)
    1078:	4b16      	ldr	r3, [pc, #88]	; (10d4 <RtcInit+0x80>)
    107a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    107c:	2204      	movs	r2, #4
    107e:	4b18      	ldr	r3, [pc, #96]	; (10e0 <RtcInit+0x8c>)
    1080:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1082:	7a9a      	ldrb	r2, [r3, #10]
    1084:	4916      	ldr	r1, [pc, #88]	; (10e0 <RtcInit+0x8c>)
    1086:	09d2      	lsrs	r2, r2, #7
    1088:	d1fb      	bne.n	1082 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    108a:	20a0      	movs	r0, #160	; 0xa0
    108c:	880a      	ldrh	r2, [r1, #0]
    108e:	00c0      	lsls	r0, r0, #3
    1090:	4302      	orrs	r2, r0
    1092:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1094:	7a9a      	ldrb	r2, [r3, #10]
    1096:	09d2      	lsrs	r2, r2, #7
    1098:	d1fc      	bne.n	1094 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
    109a:	4912      	ldr	r1, [pc, #72]	; (10e4 <RtcInit+0x90>)
    109c:	4a10      	ldr	r2, [pc, #64]	; (10e0 <RtcInit+0x8c>)
    109e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10a0:	7a99      	ldrb	r1, [r3, #10]
    10a2:	4a0f      	ldr	r2, [pc, #60]	; (10e0 <RtcInit+0x8c>)
    10a4:	09c9      	lsrs	r1, r1, #7
    10a6:	d1fb      	bne.n	10a0 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    10a8:	8851      	ldrh	r1, [r2, #2]
    10aa:	480f      	ldr	r0, [pc, #60]	; (10e8 <RtcInit+0x94>)
    10ac:	4301      	orrs	r1, r0
    10ae:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    10b0:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    10b2:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    10b4:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    10b6:	8811      	ldrh	r1, [r2, #0]
    10b8:	4301      	orrs	r1, r0
    10ba:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10bc:	7a9a      	ldrb	r2, [r3, #10]
    10be:	09d2      	lsrs	r2, r2, #7
    10c0:	d1fc      	bne.n	10bc <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <RtcInit+0x98>)
    10c4:	3208      	adds	r2, #8
    10c6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    10c8:	4770      	bx	lr
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	0000060e 	.word	0x0000060e
    10d0:	40000800 	.word	0x40000800
    10d4:	40000c00 	.word	0x40000c00
    10d8:	00230002 	.word	0x00230002
    10dc:	00004204 	.word	0x00004204
    10e0:	40001400 	.word	0x40001400
    10e4:	000003e6 	.word	0x000003e6
    10e8:	00004010 	.word	0x00004010
    10ec:	e000e100 	.word	0xe000e100

000010f0 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10f0:	230f      	movs	r3, #15
    10f2:	4018      	ands	r0, r3
    10f4:	4b08      	ldr	r3, [pc, #32]	; (1118 <gclkEnable+0x28>)
    10f6:	0212      	lsls	r2, r2, #8
    10f8:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10fa:	23f8      	movs	r3, #248	; 0xf8
    10fc:	0209      	lsls	r1, r1, #8
    10fe:	015b      	lsls	r3, r3, #5
    1100:	4019      	ands	r1, r3
    1102:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    1104:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1106:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1108:	4c04      	ldr	r4, [pc, #16]	; (111c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    110a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    110c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    110e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1110:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1112:	6060      	str	r0, [r4, #4]
}
    1114:	bd10      	pop	{r4, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	00ffff00 	.word	0x00ffff00
    111c:	40000c00 	.word	0x40000c00

00001120 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <delayInit+0x14>)
    1122:	4a05      	ldr	r2, [pc, #20]	; (1138 <delayInit+0x18>)
    1124:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
    1126:	2230      	movs	r2, #48	; 0x30
    1128:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    112a:	4b04      	ldr	r3, [pc, #16]	; (113c <delayInit+0x1c>)
    112c:	3a2b      	subs	r2, #43	; 0x2b
    112e:	601a      	str	r2, [r3, #0]
}
    1130:	4770      	bx	lr
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000004 	.word	0x20000004
    1138:	0000bb80 	.word	0x0000bb80
    113c:	e000e010 	.word	0xe000e010

00001140 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1140:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1142:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1144:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1146:	4b08      	ldr	r3, [pc, #32]	; (1168 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1148:	4a08      	ldr	r2, [pc, #32]	; (116c <delay_us+0x2c>)
    114a:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    114c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    114e:	3801      	subs	r0, #1
    1150:	d308      	bcc.n	1164 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1152:	2b00      	cmp	r3, #0
    1154:	d0fb      	beq.n	114e <delay_us+0xe>
    1156:	4e05      	ldr	r6, [pc, #20]	; (116c <delay_us+0x2c>)
        SysTick->LOAD = n;
    1158:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    115a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    115c:	6835      	ldr	r5, [r6, #0]
    115e:	4225      	tst	r5, r4
    1160:	d0fc      	beq.n	115c <delay_us+0x1c>
    1162:	e7f4      	b.n	114e <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1164:	bd70      	pop	{r4, r5, r6, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	20000004 	.word	0x20000004
    116c:	e000e010 	.word	0xe000e010

00001170 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1170:	b570      	push	{r4, r5, r6, lr}
    1172:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1174:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1176:	4b08      	ldr	r3, [pc, #32]	; (1198 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1178:	4a08      	ldr	r2, [pc, #32]	; (119c <delay_ms+0x2c>)
    117a:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    117c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    117e:	3801      	subs	r0, #1
    1180:	d308      	bcc.n	1194 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1182:	2b00      	cmp	r3, #0
    1184:	d0fb      	beq.n	117e <delay_ms+0xe>
    1186:	4e05      	ldr	r6, [pc, #20]	; (119c <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1188:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    118a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    118c:	6835      	ldr	r5, [r6, #0]
    118e:	4225      	tst	r5, r4
    1190:	d0fc      	beq.n	118c <delay_ms+0x1c>
    1192:	e7f4      	b.n	117e <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1194:	bd70      	pop	{r4, r5, r6, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	20000004 	.word	0x20000004
    119c:	e000e010 	.word	0xe000e010

000011a0 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    11a0:	21fa      	movs	r1, #250	; 0xfa
    11a2:	4a04      	ldr	r2, [pc, #16]	; (11b4 <RTC_Handler+0x14>)
    11a4:	0089      	lsls	r1, r1, #2
    11a6:	6813      	ldr	r3, [r2, #0]
    11a8:	185b      	adds	r3, r3, r1
    11aa:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    11ac:	22ff      	movs	r2, #255	; 0xff
    11ae:	4b02      	ldr	r3, [pc, #8]	; (11b8 <RTC_Handler+0x18>)
    11b0:	721a      	strb	r2, [r3, #8]
}
    11b2:	4770      	bx	lr
    11b4:	2000045c 	.word	0x2000045c
    11b8:	40001400 	.word	0x40001400

000011bc <millis>:

uint32_t millis(void) {
    11bc:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    11be:	f3ef 8110 	mrs	r1, PRIMASK
    11c2:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11c4:	4a08      	ldr	r2, [pc, #32]	; (11e8 <millis+0x2c>)
    11c6:	4d09      	ldr	r5, [pc, #36]	; (11ec <millis+0x30>)
    11c8:	8a10      	ldrh	r0, [r2, #16]
    11ca:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11cc:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11ce:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11d0:	09e4      	lsrs	r4, r4, #7
    11d2:	d004      	beq.n	11de <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    11d4:	8a13      	ldrh	r3, [r2, #16]
    11d6:	22fa      	movs	r2, #250	; 0xfa
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	0092      	lsls	r2, r2, #2
    11dc:	1880      	adds	r0, r0, r2
    11de:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    11e0:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    11e4:	bd30      	pop	{r4, r5, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	40001400 	.word	0x40001400
    11ec:	2000045c 	.word	0x2000045c

000011f0 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11f0:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    11f2:	4a0d      	ldr	r2, [pc, #52]	; (1228 <TC4Init+0x38>)
    11f4:	4b0d      	ldr	r3, [pc, #52]	; (122c <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11f6:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    11f8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    11fa:	4a0d      	ldr	r2, [pc, #52]	; (1230 <TC4Init+0x40>)
    11fc:	6a13      	ldr	r3, [r2, #32]
    11fe:	430b      	orrs	r3, r1
    1200:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1202:	4b0c      	ldr	r3, [pc, #48]	; (1234 <TC4Init+0x44>)
    1204:	4a0c      	ldr	r2, [pc, #48]	; (1238 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1206:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1208:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    120a:	2241      	movs	r2, #65	; 0x41
    120c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    120e:	3a40      	subs	r2, #64	; 0x40
    1210:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1212:	32ff      	adds	r2, #255	; 0xff
    1214:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1216:	881a      	ldrh	r2, [r3, #0]
    1218:	430a      	orrs	r2, r1
    121a:	801a      	strh	r2, [r3, #0]
    121c:	2280      	movs	r2, #128	; 0x80
    121e:	4b07      	ldr	r3, [pc, #28]	; (123c <TC4Init+0x4c>)
    1220:	0312      	lsls	r2, r2, #12
    1222:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1224:	4770      	bx	lr
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	0000421c 	.word	0x0000421c
    122c:	40000c00 	.word	0x40000c00
    1230:	40000400 	.word	0x40000400
    1234:	42003000 	.word	0x42003000
    1238:	00000904 	.word	0x00000904
    123c:	e000e100 	.word	0xe000e100

00001240 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1240:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1242:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1244:	4b02      	ldr	r3, [pc, #8]	; (1250 <TC4_Handler+0x10>)
    1246:	739a      	strb	r2, [r3, #14]
    pullSample();
    1248:	4b02      	ldr	r3, [pc, #8]	; (1254 <TC4_Handler+0x14>)
    124a:	4798      	blx	r3
}
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	42003000 	.word	0x42003000
    1254:	00001751 	.word	0x00001751

00001258 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1258:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    125a:	4a0d      	ldr	r2, [pc, #52]	; (1290 <TC5Init+0x38>)
    125c:	4b0d      	ldr	r3, [pc, #52]	; (1294 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    125e:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1260:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1262:	4a0d      	ldr	r2, [pc, #52]	; (1298 <TC5Init+0x40>)
    1264:	6a13      	ldr	r3, [r2, #32]
    1266:	430b      	orrs	r3, r1
    1268:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    126a:	4b0c      	ldr	r3, [pc, #48]	; (129c <TC5Init+0x44>)
    126c:	4a0c      	ldr	r2, [pc, #48]	; (12a0 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    126e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1270:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1272:	2220      	movs	r2, #32
    1274:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1276:	3a1f      	subs	r2, #31
    1278:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    127a:	32ff      	adds	r2, #255	; 0xff
    127c:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    127e:	881a      	ldrh	r2, [r3, #0]
    1280:	430a      	orrs	r2, r1
    1282:	801a      	strh	r2, [r3, #0]
    1284:	2280      	movs	r2, #128	; 0x80
    1286:	4b07      	ldr	r3, [pc, #28]	; (12a4 <TC5Init+0x4c>)
    1288:	0352      	lsls	r2, r2, #13
    128a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    128c:	4770      	bx	lr
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	0000421c 	.word	0x0000421c
    1294:	40000c00 	.word	0x40000c00
    1298:	40000400 	.word	0x40000400
    129c:	42003400 	.word	0x42003400
    12a0:	00000d04 	.word	0x00000d04
    12a4:	e000e100 	.word	0xe000e100

000012a8 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    12a8:	22ff      	movs	r2, #255	; 0xff
    12aa:	4b03      	ldr	r3, [pc, #12]	; (12b8 <TC5_Handler+0x10>)
    12ac:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    12ae:	4b03      	ldr	r3, [pc, #12]	; (12bc <TC5_Handler+0x14>)
    12b0:	3afe      	subs	r2, #254	; 0xfe
    12b2:	701a      	strb	r2, [r3, #0]
}
    12b4:	4770      	bx	lr
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	42003400 	.word	0x42003400
    12bc:	20000461 	.word	0x20000461

000012c0 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    12c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    12c2:	27c0      	movs	r7, #192	; 0xc0
    12c4:	4d10      	ldr	r5, [pc, #64]	; (1308 <dmaInit+0x48>)
    12c6:	003a      	movs	r2, r7
    12c8:	4e10      	ldr	r6, [pc, #64]	; (130c <dmaInit+0x4c>)
    12ca:	0028      	movs	r0, r5
    12cc:	2100      	movs	r1, #0
    12ce:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    12d0:	4c0f      	ldr	r4, [pc, #60]	; (1310 <dmaInit+0x50>)
    12d2:	003a      	movs	r2, r7
    12d4:	2100      	movs	r1, #0
    12d6:	0020      	movs	r0, r4
    12d8:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    12da:	2120      	movs	r1, #32
    12dc:	4b0d      	ldr	r3, [pc, #52]	; (1314 <dmaInit+0x54>)
    12de:	695a      	ldr	r2, [r3, #20]
    12e0:	430a      	orrs	r2, r1
    12e2:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    12e4:	69da      	ldr	r2, [r3, #28]
    12e6:	3910      	subs	r1, #16
    12e8:	430a      	orrs	r2, r1
    12ea:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <dmaInit+0x58>)
    12ee:	390e      	subs	r1, #14
    12f0:	881a      	ldrh	r2, [r3, #0]
    12f2:	438a      	bics	r2, r1
    12f4:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    12f6:	881a      	ldrh	r2, [r3, #0]
    12f8:	3901      	subs	r1, #1
    12fa:	430a      	orrs	r2, r1
    12fc:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    12fe:	4a07      	ldr	r2, [pc, #28]	; (131c <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1300:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1302:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1304:	801a      	strh	r2, [r3, #0]
}
    1306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1308:	20000530 	.word	0x20000530
    130c:	000050ad 	.word	0x000050ad
    1310:	20000470 	.word	0x20000470
    1314:	40000400 	.word	0x40000400
    1318:	41004800 	.word	0x41004800
    131c:	00000f02 	.word	0x00000f02

00001320 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1322:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1324:	b085      	sub	sp, #20
    1326:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1328:	2b00      	cmp	r3, #0
    132a:	d008      	beq.n	133e <flight+0x1e>
    132c:	2b01      	cmp	r3, #1
    132e:	d000      	beq.n	1332 <flight+0x12>
    1330:	e07e      	b.n	1430 <flight+0x110>
        }


        break;
    case flightIdle:
           TC4->COUNT8.CTRLA.reg = 0;
    1332:	2300      	movs	r3, #0
    1334:	4a3f      	ldr	r2, [pc, #252]	; (1434 <flight+0x114>)
    1336:	8013      	strh	r3, [r2, #0]
           TC5->COUNT8.CTRLA.reg = 0;
    1338:	4a3f      	ldr	r2, [pc, #252]	; (1438 <flight+0x118>)
    133a:	8013      	strh	r3, [r2, #0]

        break;
    }


}
    133c:	e078      	b.n	1430 <flight+0x110>


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    133e:	4d3f      	ldr	r5, [pc, #252]	; (143c <flight+0x11c>)
    1340:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1342:	47a8      	blx	r5
    1344:	2200      	movs	r2, #0
    1346:	4b3e      	ldr	r3, [pc, #248]	; (1440 <flight+0x120>)
    1348:	4e3e      	ldr	r6, [pc, #248]	; (1444 <flight+0x124>)
    134a:	47b0      	blx	r6
    134c:	0006      	movs	r6, r0
    134e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1350:	000f      	movs	r7, r1
    1352:	47a8      	blx	r5
    1354:	4d3b      	ldr	r5, [pc, #236]	; (1444 <flight+0x124>)
    1356:	2200      	movs	r2, #0
    1358:	4b39      	ldr	r3, [pc, #228]	; (1440 <flight+0x120>)
    135a:	47a8      	blx	r5
    135c:	4d3a      	ldr	r5, [pc, #232]	; (1448 <flight+0x128>)
    135e:	0002      	movs	r2, r0
    1360:	000b      	movs	r3, r1
    1362:	0030      	movs	r0, r6
    1364:	0039      	movs	r1, r7
    1366:	47a8      	blx	r5
    1368:	4b38      	ldr	r3, [pc, #224]	; (144c <flight+0x12c>)
    136a:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    136c:	0023      	movs	r3, r4
    136e:	3348      	adds	r3, #72	; 0x48
    1370:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1372:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1374:	8818      	ldrh	r0, [r3, #0]
    1376:	4d36      	ldr	r5, [pc, #216]	; (1450 <flight+0x130>)
    1378:	47a8      	blx	r5
    137a:	2200      	movs	r2, #0
    137c:	4e31      	ldr	r6, [pc, #196]	; (1444 <flight+0x124>)
    137e:	4b30      	ldr	r3, [pc, #192]	; (1440 <flight+0x120>)
    1380:	47b0      	blx	r6
    1382:	0023      	movs	r3, r4
    1384:	3370      	adds	r3, #112	; 0x70
    1386:	0006      	movs	r6, r0
    1388:	8818      	ldrh	r0, [r3, #0]
    138a:	000f      	movs	r7, r1
    138c:	47a8      	blx	r5
    138e:	4d2d      	ldr	r5, [pc, #180]	; (1444 <flight+0x124>)
    1390:	2200      	movs	r2, #0
    1392:	4b2b      	ldr	r3, [pc, #172]	; (1440 <flight+0x120>)
    1394:	47a8      	blx	r5
    1396:	4d2c      	ldr	r5, [pc, #176]	; (1448 <flight+0x128>)
    1398:	0002      	movs	r2, r0
    139a:	000b      	movs	r3, r1
    139c:	0030      	movs	r0, r6
    139e:	0039      	movs	r1, r7
    13a0:	47a8      	blx	r5
    13a2:	4b2c      	ldr	r3, [pc, #176]	; (1454 <flight+0x134>)
    13a4:	4798      	blx	r3
    13a6:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    13a8:	4d2b      	ldr	r5, [pc, #172]	; (1458 <flight+0x138>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    13aa:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    13ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    13ae:	47a8      	blx	r5
    13b0:	4e24      	ldr	r6, [pc, #144]	; (1444 <flight+0x124>)
    13b2:	2200      	movs	r2, #0
    13b4:	4b22      	ldr	r3, [pc, #136]	; (1440 <flight+0x120>)
    13b6:	47b0      	blx	r6
    13b8:	9002      	str	r0, [sp, #8]
    13ba:	9103      	str	r1, [sp, #12]
    13bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13be:	47a8      	blx	r5
    13c0:	2200      	movs	r2, #0
    13c2:	4b1f      	ldr	r3, [pc, #124]	; (1440 <flight+0x120>)
    13c4:	47b0      	blx	r6
    13c6:	4e20      	ldr	r6, [pc, #128]	; (1448 <flight+0x128>)
    13c8:	0002      	movs	r2, r0
    13ca:	000b      	movs	r3, r1
    13cc:	9802      	ldr	r0, [sp, #8]
    13ce:	9903      	ldr	r1, [sp, #12]
    13d0:	47b0      	blx	r6
    13d2:	4b20      	ldr	r3, [pc, #128]	; (1454 <flight+0x134>)
    13d4:	4798      	blx	r3
    13d6:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    13d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    13da:	47a8      	blx	r5
    13dc:	2200      	movs	r2, #0
    13de:	4b18      	ldr	r3, [pc, #96]	; (1440 <flight+0x120>)
    13e0:	4e18      	ldr	r6, [pc, #96]	; (1444 <flight+0x124>)
    13e2:	47b0      	blx	r6
    13e4:	0006      	movs	r6, r0
    13e6:	69a0      	ldr	r0, [r4, #24]
    13e8:	000f      	movs	r7, r1
    13ea:	47a8      	blx	r5
    13ec:	4d15      	ldr	r5, [pc, #84]	; (1444 <flight+0x124>)
    13ee:	2200      	movs	r2, #0
    13f0:	4b13      	ldr	r3, [pc, #76]	; (1440 <flight+0x120>)
    13f2:	47a8      	blx	r5
    13f4:	4d14      	ldr	r5, [pc, #80]	; (1448 <flight+0x128>)
    13f6:	0002      	movs	r2, r0
    13f8:	000b      	movs	r3, r1
    13fa:	0030      	movs	r0, r6
    13fc:	0039      	movs	r1, r7
    13fe:	47a8      	blx	r5
    1400:	4b14      	ldr	r3, [pc, #80]	; (1454 <flight+0x134>)
    1402:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1404:	4d15      	ldr	r5, [pc, #84]	; (145c <flight+0x13c>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1406:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1408:	47a8      	blx	r5
    140a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    140c:	1ac0      	subs	r0, r0, r3
    140e:	23fa      	movs	r3, #250	; 0xfa
    1410:	00db      	lsls	r3, r3, #3
    1412:	4298      	cmp	r0, r3
    1414:	d90c      	bls.n	1430 <flight+0x110>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1416:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1418:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    141c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    141e:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1420:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1422:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1424:	0023      	movs	r3, r4
    1426:	8812      	ldrh	r2, [r2, #0]
    1428:	334a      	adds	r3, #74	; 0x4a
    142a:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    142c:	47a8      	blx	r5
    142e:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


}
    1430:	b005      	add	sp, #20
    1432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1434:	42003000 	.word	0x42003000
    1438:	42003400 	.word	0x42003400
    143c:	00004d45 	.word	0x00004d45
    1440:	3fe00000 	.word	0x3fe00000
    1444:	00004009 	.word	0x00004009
    1448:	00003169 	.word	0x00003169
    144c:	00004ded 	.word	0x00004ded
    1450:	00004c51 	.word	0x00004c51
    1454:	00002fcd 	.word	0x00002fcd
    1458:	00004cd5 	.word	0x00004cd5
    145c:	000011bd 	.word	0x000011bd

00001460 <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1462:	26c8      	movs	r6, #200	; 0xc8
    1464:	0076      	lsls	r6, r6, #1
    1466:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1468:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    146a:	194b      	adds	r3, r1, r5
    146c:	2bfe      	cmp	r3, #254	; 0xfe
    146e:	dc03      	bgt.n	1478 <makePage+0x18>
    1470:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1472:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1474:	1947      	adds	r7, r0, r5
    1476:	e035      	b.n	14e4 <makePage+0x84>
    1478:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    147a:	195c      	adds	r4, r3, r5
    147c:	b2de      	uxtb	r6, r3
    147e:	2cfe      	cmp	r4, #254	; 0xfe
    1480:	dc08      	bgt.n	1494 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1482:	9a00      	ldr	r2, [sp, #0]
    1484:	1904      	adds	r4, r0, r4
    1486:	5cd6      	ldrb	r6, [r2, r3]
    1488:	3492      	adds	r4, #146	; 0x92
    148a:	34ff      	adds	r4, #255	; 0xff

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    148c:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    148e:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1490:	b29b      	uxth	r3, r3
    1492:	e7f2      	b.n	147a <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1494:	23c8      	movs	r3, #200	; 0xc8
    1496:	2500      	movs	r5, #0
    1498:	0004      	movs	r4, r0
    149a:	005b      	lsls	r3, r3, #1
    149c:	54c5      	strb	r5, [r0, r3]
    149e:	4b19      	ldr	r3, [pc, #100]	; (1504 <makePage+0xa4>)
    14a0:	3492      	adds	r4, #146	; 0x92
    14a2:	18c3      	adds	r3, r0, r3
    14a4:	34ff      	adds	r4, #255	; 0xff
    14a6:	9301      	str	r3, [sp, #4]
    14a8:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    14aa:	781f      	ldrb	r7, [r3, #0]
    14ac:	46bc      	mov	ip, r7
    14ae:	4662      	mov	r2, ip
    14b0:	1e9f      	subs	r7, r3, #2
    14b2:	3fff      	subs	r7, #255	; 0xff
    14b4:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    14b6:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    14b8:	701d      	strb	r5, [r3, #0]
    14ba:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    14bc:	4293      	cmp	r3, r2
    14be:	d1f4      	bne.n	14aa <makePage+0x4a>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    14c0:	25c8      	movs	r5, #200	; 0xc8
    14c2:	0033      	movs	r3, r6
    14c4:	006d      	lsls	r5, r5, #1
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    14c6:	428b      	cmp	r3, r1
    14c8:	d208      	bcs.n	14dc <makePage+0x7c>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    14ca:	9a00      	ldr	r2, [sp, #0]
    14cc:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    14ce:	3301      	adds	r3, #1
    14d0:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    14d2:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    14d4:	1b9f      	subs	r7, r3, r6
    14d6:	5547      	strb	r7, [r0, r5]
    14d8:	3401      	adds	r4, #1
    14da:	e7f4      	b.n	14c6 <makePage+0x66>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    14dc:	2201      	movs	r2, #1
    14de:	4b09      	ldr	r3, [pc, #36]	; (1504 <makePage+0xa4>)
    14e0:	54c2      	strb	r2, [r0, r3]
    14e2:	e00d      	b.n	1500 <makePage+0xa0>
    14e4:	1c5c      	adds	r4, r3, #1
    14e6:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    14e8:	428b      	cmp	r3, r1
    14ea:	d809      	bhi.n	1500 <makePage+0xa0>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    14ec:	9a00      	ldr	r2, [sp, #0]
    14ee:	5cd2      	ldrb	r2, [r2, r3]
    14f0:	18fb      	adds	r3, r7, r3
    14f2:	3392      	adds	r3, #146	; 0x92
    14f4:	33ff      	adds	r3, #255	; 0xff
    14f6:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    14f8:	192b      	adds	r3, r5, r4
    14fa:	5583      	strb	r3, [r0, r6]
    14fc:	0023      	movs	r3, r4
    14fe:	e7f1      	b.n	14e4 <makePage+0x84>
        }

    }
}
    1500:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00000291 	.word	0x00000291

00001508 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1508:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    150a:	2346      	movs	r3, #70	; 0x46
    150c:	466a      	mov	r2, sp
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    150e:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1510:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1512:	7843      	ldrb	r3, [r0, #1]
    1514:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1516:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1518:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    151a:	0a1a      	lsrs	r2, r3, #8
    151c:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    151e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1520:	0e1b      	lsrs	r3, r3, #24
    1522:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1526:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1528:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    152a:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    152c:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    152e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1530:	0e1b      	lsrs	r3, r3, #24
    1532:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1534:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1536:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1538:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    153a:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    153c:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    153e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1540:	0e1b      	lsrs	r3, r3, #24
    1542:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1544:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1546:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1548:	334a      	adds	r3, #74	; 0x4a
    154a:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    154c:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    154e:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    1550:	0a1b      	lsrs	r3, r3, #8
    1552:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1554:	2110      	movs	r1, #16
    1556:	4b02      	ldr	r3, [pc, #8]	; (1560 <logFlight+0x58>)
    1558:	4798      	blx	r3
}
    155a:	b005      	add	sp, #20
    155c:	bd00      	pop	{pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	00001461 	.word	0x00001461

00001564 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1566:	2341      	movs	r3, #65	; 0x41
    1568:	466a      	mov	r2, sp
    156a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    156c:	23a9      	movs	r3, #169	; 0xa9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    156e:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1570:	009b      	lsls	r3, r3, #2
    1572:	58c3      	ldr	r3, [r0, r3]
    1574:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1576:	0a1a      	lsrs	r2, r3, #8
    1578:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    157a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    157c:	0e1b      	lsrs	r3, r3, #24
    157e:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    1580:	6a83      	ldr	r3, [r0, #40]	; 0x28
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1582:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    1584:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    1586:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    1588:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    158a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;
    158c:	0e1b      	lsrs	r3, r3, #24
    158e:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1590:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    1592:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1594:	3368      	adds	r3, #104	; 0x68
    1596:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;
    1598:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    159a:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    159c:	0a1b      	lsrs	r3, r3, #8
    159e:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    15a0:	0003      	movs	r3, r0
    15a2:	336c      	adds	r3, #108	; 0x6c
    15a4:	881b      	ldrh	r3, [r3, #0]
    15a6:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    15a8:	0a1b      	lsrs	r3, r3, #8
    15aa:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    15ac:	0003      	movs	r3, r0
    15ae:	3370      	adds	r3, #112	; 0x70
    15b0:	881b      	ldrh	r3, [r3, #0]
    15b2:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    15b4:	0a1b      	lsrs	r3, r3, #8
    15b6:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    15b8:	0003      	movs	r3, r0
    15ba:	3374      	adds	r3, #116	; 0x74
    15bc:	881b      	ldrh	r3, [r3, #0]
    15be:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    15c0:	0a1b      	lsrs	r3, r3, #8
    15c2:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    15c4:	0003      	movs	r3, r0
    15c6:	3378      	adds	r3, #120	; 0x78
    15c8:	881b      	ldrh	r3, [r3, #0]
    15ca:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    15cc:	0a1b      	lsrs	r3, r3, #8
    15ce:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    15d0:	0003      	movs	r3, r0
    15d2:	337c      	adds	r3, #124	; 0x7c
    15d4:	881b      	ldrh	r3, [r3, #0]
    15d6:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    15d8:	0a1b      	lsrs	r3, r3, #8
    15da:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    15dc:	0003      	movs	r3, r0
    15de:	3380      	adds	r3, #128	; 0x80
    15e0:	881b      	ldrh	r3, [r3, #0]
    15e2:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    15e4:	0a1b      	lsrs	r3, r3, #8
    15e6:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    15e8:	2117      	movs	r1, #23
    15ea:	4b02      	ldr	r3, [pc, #8]	; (15f4 <logSensors+0x90>)
    15ec:	4798      	blx	r3
}
    15ee:	b007      	add	sp, #28
    15f0:	bd00      	pop	{pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00001461 	.word	0x00001461

000015f8 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    15f8:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    15fa:	2103      	movs	r1, #3
    15fc:	4348      	muls	r0, r1
    15fe:	ac01      	add	r4, sp, #4
    1600:	3001      	adds	r0, #1
    1602:	30ff      	adds	r0, #255	; 0xff
    1604:	0022      	movs	r2, r4
    1606:	4b05      	ldr	r3, [pc, #20]	; (161c <getFlightStartAddress+0x24>)
    1608:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    160a:	7860      	ldrb	r0, [r4, #1]
    160c:	78a3      	ldrb	r3, [r4, #2]
    160e:	0200      	lsls	r0, r0, #8
    1610:	041b      	lsls	r3, r3, #16
    1612:	4318      	orrs	r0, r3
    1614:	7823      	ldrb	r3, [r4, #0]
    1616:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    1618:	bd16      	pop	{r1, r2, r4, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	00000361 	.word	0x00000361

00001620 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    1620:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    1622:	4b04      	ldr	r3, [pc, #16]	; (1634 <isFlightLogged+0x14>)
    1624:	4798      	blx	r3
    1626:	4b04      	ldr	r3, [pc, #16]	; (1638 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    1628:	18c0      	adds	r0, r0, r3
    162a:	1e43      	subs	r3, r0, #1
    162c:	4198      	sbcs	r0, r3
    162e:	b2c0      	uxtb	r0, r0
    1630:	bd10      	pop	{r4, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	000015f9 	.word	0x000015f9
    1638:	ff000001 	.word	0xff000001

0000163c <findNextBlankPage>:


u32_t findNextBlankPage(u8_t lastFlightStart) {
    163c:	b510      	push	{r4, lr}

    u32_t byteToCheckAddress = getFlightStartAddress(lastFlightStart);
    163e:	4b09      	ldr	r3, [pc, #36]	; (1664 <findNextBlankPage+0x28>)
    1640:	4798      	blx	r3
    1642:	0004      	movs	r4, r0

    bool flightEndFound = false;
    while (!flightEndFound) {

        u8_t byteToCheck = AT25SFGetByte(byteToCheckAddress);
    1644:	0020      	movs	r0, r4
    1646:	4b08      	ldr	r3, [pc, #32]	; (1668 <findNextBlankPage+0x2c>)
    1648:	4798      	blx	r3

        if (byteToCheck == 0x41) {
    164a:	2841      	cmp	r0, #65	; 0x41
    164c:	d101      	bne.n	1652 <findNextBlankPage+0x16>
            byteToCheckAddress += 24;
    164e:	3418      	adds	r4, #24
    1650:	e7f8      	b.n	1644 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0x46) {
    1652:	2846      	cmp	r0, #70	; 0x46
    1654:	d101      	bne.n	165a <findNextBlankPage+0x1e>
            byteToCheckAddress += 17;
    1656:	3411      	adds	r4, #17
    1658:	e7f4      	b.n	1644 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0xFF) {
    165a:	28ff      	cmp	r0, #255	; 0xff
    165c:	d1f2      	bne.n	1644 <findNextBlankPage+0x8>
            return ((byteToCheckAddress >> 8) << 8);
    165e:	4384      	bics	r4, r0
    1660:	0020      	movs	r0, r4
        }
    }
}
    1662:	bd10      	pop	{r4, pc}
    1664:	000015f9 	.word	0x000015f9
    1668:	00000225 	.word	0x00000225

0000166c <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    166c:	b570      	push	{r4, r5, r6, lr}

    u8_t nextFlight = findThisFlightsEnd + 1;
    166e:	1c44      	adds	r4, r0, #1
    1670:	b2e4      	uxtb	r4, r4
            return ((byteToCheckAddress >> 8) << 8);
        }
    }
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    1672:	0005      	movs	r5, r0

    u8_t nextFlight = findThisFlightsEnd + 1;
    u32_t thisFlightsEndingAddress;

    if (isFlightLogged(nextFlight)) {
    1674:	4b06      	ldr	r3, [pc, #24]	; (1690 <FindFlightEndingAddress+0x24>)
    1676:	0020      	movs	r0, r4
    1678:	4798      	blx	r3
    167a:	2800      	cmp	r0, #0
    167c:	d002      	beq.n	1684 <FindFlightEndingAddress+0x18>
        thisFlightsEndingAddress = getFlightStartAddress(nextFlight) - 0x100;
    167e:	0020      	movs	r0, r4
    1680:	4b04      	ldr	r3, [pc, #16]	; (1694 <FindFlightEndingAddress+0x28>)
    1682:	e001      	b.n	1688 <FindFlightEndingAddress+0x1c>
    } else {
        thisFlightsEndingAddress = findNextBlankPage(findThisFlightsEnd) - 0x100;
    1684:	0028      	movs	r0, r5
    1686:	4b04      	ldr	r3, [pc, #16]	; (1698 <FindFlightEndingAddress+0x2c>)
    1688:	4798      	blx	r3
    168a:	3801      	subs	r0, #1
    168c:	38ff      	subs	r0, #255	; 0xff
    }
    return thisFlightsEndingAddress;
}
    168e:	bd70      	pop	{r4, r5, r6, pc}
    1690:	00001621 	.word	0x00001621
    1694:	000015f9 	.word	0x000015f9
    1698:	0000163d 	.word	0x0000163d

0000169c <findNewFlightStart>:


void findNewFlightStart(Altimeter *my_altimeter) {
    169c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    169e:	0006      	movs	r6, r0

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    16a0:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    16a2:	0020      	movs	r0, r4
    16a4:	4b21      	ldr	r3, [pc, #132]	; (172c <findNewFlightStart+0x90>)
    16a6:	4798      	blx	r3
    16a8:	2800      	cmp	r0, #0
    16aa:	d139      	bne.n	1720 <findNewFlightStart+0x84>
    16ac:	0037      	movs	r7, r6
    16ae:	ad01      	add	r5, sp, #4
    16b0:	3788      	adds	r7, #136	; 0x88

            if (flightNumbToCheck > 0) {
    16b2:	2c00      	cmp	r4, #0
    16b4:	d014      	beq.n	16e0 <findNewFlightStart+0x44>
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    16b6:	1e60      	subs	r0, r4, #1
    16b8:	4b1d      	ldr	r3, [pc, #116]	; (1730 <findNewFlightStart+0x94>)
    16ba:	b2c0      	uxtb	r0, r0
    16bc:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16be:	2103      	movs	r1, #3
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    16c0:	3001      	adds	r0, #1
    16c2:	30ff      	adds	r0, #255	; 0xff
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16c4:	0c03      	lsrs	r3, r0, #16

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;
    16c6:	6038      	str	r0, [r7, #0]

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16c8:	702b      	strb	r3, [r5, #0]
    16ca:	70a8      	strb	r0, [r5, #2]
    16cc:	0a03      	lsrs	r3, r0, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16ce:	0008      	movs	r0, r1
    16d0:	4360      	muls	r0, r4
    16d2:	3001      	adds	r0, #1

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    16d4:	706b      	strb	r3, [r5, #1]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    16d6:	30ff      	adds	r0, #255	; 0xff
    16d8:	002a      	movs	r2, r5
    16da:	4b16      	ldr	r3, [pc, #88]	; (1734 <findNewFlightStart+0x98>)
    16dc:	4798      	blx	r3
    16de:	e00f      	b.n	1700 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16e0:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16e2:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16e4:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16e6:	0040      	lsls	r0, r0, #1
    16e8:	4b12      	ldr	r3, [pc, #72]	; (1734 <findNewFlightStart+0x98>)
    16ea:	002a      	movs	r2, r5
    16ec:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    16ee:	702c      	strb	r4, [r5, #0]
    16f0:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    16f2:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    16f4:	2380      	movs	r3, #128	; 0x80
    16f6:	015b      	lsls	r3, r3, #5
    16f8:	603b      	str	r3, [r7, #0]
                beep(1500);
    16fa:	480f      	ldr	r0, [pc, #60]	; (1738 <findNewFlightStart+0x9c>)
    16fc:	4b0f      	ldr	r3, [pc, #60]	; (173c <findNewFlightStart+0xa0>)
    16fe:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    1700:	7074      	strb	r4, [r6, #1]

            while (flightNumbToCheck > 0) {
                beep(500);
    1702:	20fa      	movs	r0, #250	; 0xfa
    1704:	4d0e      	ldr	r5, [pc, #56]	; (1740 <findNewFlightStart+0xa4>)
    1706:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    1708:	2c00      	cmp	r4, #0
    170a:	d007      	beq.n	171c <findNewFlightStart+0x80>
                beep(500);
    170c:	4b0b      	ldr	r3, [pc, #44]	; (173c <findNewFlightStart+0xa0>)
    170e:	4798      	blx	r3
                delay_ms(500);
    1710:	20fa      	movs	r0, #250	; 0xfa
                --flightNumbToCheck;
    1712:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    1714:	0040      	lsls	r0, r0, #1
    1716:	47a8      	blx	r5
                --flightNumbToCheck;
    1718:	b2e4      	uxtb	r4, r4
    171a:	e7f2      	b.n	1702 <findNewFlightStart+0x66>
            }
            delay_ms(500);
    171c:	47a8      	blx	r5
            break;
    171e:	e003      	b.n	1728 <findNewFlightStart+0x8c>
}


void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    1720:	3401      	adds	r4, #1
    1722:	b2e4      	uxtb	r4, r4
    1724:	2c0b      	cmp	r4, #11
    1726:	d1bc      	bne.n	16a2 <findNewFlightStart+0x6>
            }
            delay_ms(500);
            break;
        }
    }
}
    1728:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	00001621 	.word	0x00001621
    1730:	0000163d 	.word	0x0000163d
    1734:	00000275 	.word	0x00000275
    1738:	000005dc 	.word	0x000005dc
    173c:	00000f59 	.word	0x00000f59
    1740:	00001171 	.word	0x00001171

00001744 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <takeSample+0x8>)
    1746:	7818      	ldrb	r0, [r3, #0]
}
    1748:	4770      	bx	lr
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	20000463 	.word	0x20000463

00001750 <pullSample>:

void pullSample() {
    SampleBool = true;
    1750:	2201      	movs	r2, #1
    1752:	4b01      	ldr	r3, [pc, #4]	; (1758 <pullSample+0x8>)
    1754:	701a      	strb	r2, [r3, #0]
}
    1756:	4770      	bx	lr
    1758:	20000463 	.word	0x20000463

0000175c <sampleTaken>:

void sampleTaken() {
    SampleBool = false;
    175c:	2200      	movs	r2, #0
    175e:	4b01      	ldr	r3, [pc, #4]	; (1764 <sampleTaken+0x8>)
    1760:	701a      	strb	r2, [r3, #0]
}
    1762:	4770      	bx	lr
    1764:	20000463 	.word	0x20000463

00001768 <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    1768:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    176a:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    176c:	4bd2      	ldr	r3, [pc, #840]	; (1ab8 <sampleTick+0x350>)





void sampleTick(Altimeter *my_altimeter) {
    176e:	b087      	sub	sp, #28
    SampleBool = false;
    1770:	701a      	strb	r2, [r3, #0]

    my_altimeter->sampleTick = millis();
    1772:	4bd2      	ldr	r3, [pc, #840]	; (1abc <sampleTick+0x354>)





void sampleTick(Altimeter *my_altimeter) {
    1774:	0004      	movs	r4, r0
    SampleBool = false;

    my_altimeter->sampleTick = millis();
    1776:	4798      	blx	r3
    1778:	23a9      	movs	r3, #169	; 0xa9

    my_altimeter->batV = adc_read(senseBatPin);
    177a:	4dd1      	ldr	r5, [pc, #836]	; (1ac0 <sampleTick+0x358>)


void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;

    my_altimeter->sampleTick = millis();
    177c:	009b      	lsls	r3, r3, #2
    177e:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    1780:	786b      	ldrb	r3, [r5, #1]
    1782:	7829      	ldrb	r1, [r5, #0]
    1784:	78a8      	ldrb	r0, [r5, #2]
    1786:	021b      	lsls	r3, r3, #8
    1788:	430b      	orrs	r3, r1
    178a:	0400      	lsls	r0, r0, #16
    178c:	001a      	movs	r2, r3
    178e:	0003      	movs	r3, r0
    1790:	78e8      	ldrb	r0, [r5, #3]
    1792:	4313      	orrs	r3, r2
    1794:	0600      	lsls	r0, r0, #24
    1796:	4ecb      	ldr	r6, [pc, #812]	; (1ac4 <sampleTick+0x35c>)
    1798:	7929      	ldrb	r1, [r5, #4]
    179a:	4318      	orrs	r0, r3
    179c:	47b0      	blx	r6
    179e:	23a5      	movs	r3, #165	; 0xa5
    17a0:	009b      	lsls	r3, r3, #2
    17a2:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;
    17a4:	4bc8      	ldr	r3, [pc, #800]	; (1ac8 <sampleTick+0x360>)
    17a6:	4798      	blx	r3
    17a8:	4ac8      	ldr	r2, [pc, #800]	; (1acc <sampleTick+0x364>)
    17aa:	4fc9      	ldr	r7, [pc, #804]	; (1ad0 <sampleTick+0x368>)
    17ac:	4bc9      	ldr	r3, [pc, #804]	; (1ad4 <sampleTick+0x36c>)
    17ae:	47b8      	blx	r7
    17b0:	4bc9      	ldr	r3, [pc, #804]	; (1ad8 <sampleTick+0x370>)
    17b2:	4798      	blx	r3
    17b4:	23a6      	movs	r3, #166	; 0xa6
    17b6:	009b      	lsls	r3, r3, #2
    17b8:	50e0      	str	r0, [r4, r3]

    my_altimeter->senseA = adc_read(senseAPin);
    17ba:	79ab      	ldrb	r3, [r5, #6]
    17bc:	7969      	ldrb	r1, [r5, #5]
    17be:	79e8      	ldrb	r0, [r5, #7]
    17c0:	021b      	lsls	r3, r3, #8
    17c2:	430b      	orrs	r3, r1
    17c4:	0400      	lsls	r0, r0, #16
    17c6:	001a      	movs	r2, r3
    17c8:	0003      	movs	r3, r0
    17ca:	7a28      	ldrb	r0, [r5, #8]
    17cc:	4313      	orrs	r3, r2
    17ce:	0600      	lsls	r0, r0, #24
    17d0:	7a69      	ldrb	r1, [r5, #9]
    17d2:	4318      	orrs	r0, r3
    17d4:	47b0      	blx	r6
    17d6:	23a7      	movs	r3, #167	; 0xa7
    17d8:	009b      	lsls	r3, r3, #2
    17da:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    17dc:	7aeb      	ldrb	r3, [r5, #11]
    17de:	7aa9      	ldrb	r1, [r5, #10]
    17e0:	7b28      	ldrb	r0, [r5, #12]
    17e2:	021b      	lsls	r3, r3, #8
    17e4:	430b      	orrs	r3, r1
    17e6:	0400      	lsls	r0, r0, #16
    17e8:	001a      	movs	r2, r3
    17ea:	0003      	movs	r3, r0
    17ec:	7b68      	ldrb	r0, [r5, #13]
    17ee:	4313      	orrs	r3, r2
    17f0:	0600      	lsls	r0, r0, #24
    17f2:	7ba9      	ldrb	r1, [r5, #14]
    17f4:	4318      	orrs	r0, r3
    17f6:	47b0      	blx	r6
    17f8:	4bb8      	ldr	r3, [pc, #736]	; (1adc <sampleTick+0x374>)
    my_altimeter->senseC = adc_read(senseCPin);
    17fa:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    17fc:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    17fe:	7c2b      	ldrb	r3, [r5, #16]
    1800:	7c68      	ldrb	r0, [r5, #17]
    1802:	021b      	lsls	r3, r3, #8
    1804:	430b      	orrs	r3, r1
    1806:	0400      	lsls	r0, r0, #16
    1808:	001a      	movs	r2, r3
    180a:	0003      	movs	r3, r0
    180c:	7ca8      	ldrb	r0, [r5, #18]
    180e:	4313      	orrs	r3, r2
    1810:	0600      	lsls	r0, r0, #24
    1812:	7ce9      	ldrb	r1, [r5, #19]
    1814:	4318      	orrs	r0, r3
    1816:	47b0      	blx	r6
    1818:	23a8      	movs	r3, #168	; 0xa8
    181a:	009b      	lsls	r3, r3, #2
    181c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    181e:	7d6b      	ldrb	r3, [r5, #21]
    1820:	7d29      	ldrb	r1, [r5, #20]
    1822:	7da8      	ldrb	r0, [r5, #22]
    1824:	021b      	lsls	r3, r3, #8
    1826:	430b      	orrs	r3, r1
    1828:	0400      	lsls	r0, r0, #16
    182a:	001a      	movs	r2, r3
    182c:	0003      	movs	r3, r0
    182e:	7de8      	ldrb	r0, [r5, #23]
    1830:	4313      	orrs	r3, r2
    1832:	0600      	lsls	r0, r0, #24
    1834:	7e29      	ldrb	r1, [r5, #24]
    1836:	4318      	orrs	r0, r3
    1838:	47b0      	blx	r6
    183a:	4ba9      	ldr	r3, [pc, #676]	; (1ae0 <sampleTick+0x378>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    183c:	7e69      	ldrb	r1, [r5, #25]
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);
    183e:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    1840:	7eab      	ldrb	r3, [r5, #26]
    1842:	7ee8      	ldrb	r0, [r5, #27]
    1844:	021b      	lsls	r3, r3, #8
    1846:	430b      	orrs	r3, r1
    1848:	0400      	lsls	r0, r0, #16
    184a:	001a      	movs	r2, r3
    184c:	0003      	movs	r3, r0
    184e:	7f28      	ldrb	r0, [r5, #28]
    1850:	4313      	orrs	r3, r2
    1852:	0600      	lsls	r0, r0, #24
    1854:	7f69      	ldrb	r1, [r5, #29]
    1856:	4318      	orrs	r0, r3
    1858:	47b0      	blx	r6
    185a:	0023      	movs	r3, r4
    185c:	3380      	adds	r3, #128	; 0x80
    185e:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1860:	4ba0      	ldr	r3, [pc, #640]	; (1ae4 <sampleTick+0x37c>)
    1862:	0026      	movs	r6, r4
    1864:	18c0      	adds	r0, r0, r3
    1866:	4b98      	ldr	r3, [pc, #608]	; (1ac8 <sampleTick+0x360>)
    1868:	4798      	blx	r3
    186a:	4a9f      	ldr	r2, [pc, #636]	; (1ae8 <sampleTick+0x380>)
    186c:	4f98      	ldr	r7, [pc, #608]	; (1ad0 <sampleTick+0x368>)
    186e:	4b9f      	ldr	r3, [pc, #636]	; (1aec <sampleTick+0x384>)
    1870:	47b8      	blx	r7
    1872:	4b99      	ldr	r3, [pc, #612]	; (1ad8 <sampleTick+0x370>)
    1874:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1876:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1878:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    187a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    187c:	3608      	adds	r6, #8
    187e:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1880:	6523      	str	r3, [r4, #80]	; 0x50
    1882:	4b9b      	ldr	r3, [pc, #620]	; (1af0 <sampleTick+0x388>)
    1884:	023f      	lsls	r7, r7, #8
    1886:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1888:	002e      	movs	r6, r5
    188a:	9200      	str	r2, [sp, #0]
    188c:	7fea      	ldrb	r2, [r5, #31]
    188e:	7fa8      	ldrb	r0, [r5, #30]
    1890:	0212      	lsls	r2, r2, #8
    1892:	4302      	orrs	r2, r0
    1894:	0011      	movs	r1, r2
    1896:	002b      	movs	r3, r5
    1898:	361e      	adds	r6, #30
    189a:	78b2      	ldrb	r2, [r6, #2]
    189c:	3323      	adds	r3, #35	; 0x23
    189e:	0412      	lsls	r2, r2, #16
    18a0:	430a      	orrs	r2, r1
    18a2:	78f1      	ldrb	r1, [r6, #3]
    18a4:	7818      	ldrb	r0, [r3, #0]
    18a6:	0609      	lsls	r1, r1, #24
    18a8:	4311      	orrs	r1, r2
    18aa:	7932      	ldrb	r2, [r6, #4]
    18ac:	789d      	ldrb	r5, [r3, #2]
    18ae:	9204      	str	r2, [sp, #16]
    18b0:	785a      	ldrb	r2, [r3, #1]
    18b2:	042d      	lsls	r5, r5, #16
    18b4:	0212      	lsls	r2, r2, #8
    18b6:	4302      	orrs	r2, r0
    18b8:	9103      	str	r1, [sp, #12]
    18ba:	0011      	movs	r1, r2
    18bc:	002a      	movs	r2, r5
    18be:	78dd      	ldrb	r5, [r3, #3]
    18c0:	791b      	ldrb	r3, [r3, #4]
    18c2:	430a      	orrs	r2, r1
    18c4:	062d      	lsls	r5, r5, #24
    18c6:	4315      	orrs	r5, r2
    18c8:	9305      	str	r3, [sp, #20]
    18ca:	9a03      	ldr	r2, [sp, #12]
    18cc:	9905      	ldr	r1, [sp, #20]
    18ce:	9b04      	ldr	r3, [sp, #16]
    18d0:	0028      	movs	r0, r5
    18d2:	4e88      	ldr	r6, [pc, #544]	; (1af4 <sampleTick+0x38c>)
    18d4:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    18d6:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    18d8:	4b85      	ldr	r3, [pc, #532]	; (1af0 <sampleTick+0x388>)
    18da:	0040      	lsls	r0, r0, #1
    18dc:	619f      	str	r7, [r3, #24]
    18de:	4b86      	ldr	r3, [pc, #536]	; (1af8 <sampleTick+0x390>)
    18e0:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    18e2:	4b86      	ldr	r3, [pc, #536]	; (1afc <sampleTick+0x394>)
    18e4:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    18e6:	4b82      	ldr	r3, [pc, #520]	; (1af0 <sampleTick+0x388>)
    18e8:	6160      	str	r0, [r4, #20]
    18ea:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    18ec:	2346      	movs	r3, #70	; 0x46
    18ee:	9a03      	ldr	r2, [sp, #12]
    18f0:	9300      	str	r3, [sp, #0]
    18f2:	0028      	movs	r0, r5
    18f4:	9b04      	ldr	r3, [sp, #16]
    18f6:	9905      	ldr	r1, [sp, #20]
    18f8:	47b0      	blx	r6
    18fa:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    18fc:	4b7c      	ldr	r3, [pc, #496]	; (1af0 <sampleTick+0x388>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    18fe:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1900:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1902:	4b7f      	ldr	r3, [pc, #508]	; (1b00 <sampleTick+0x398>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1904:	4f7f      	ldr	r7, [pc, #508]	; (1b04 <sampleTick+0x39c>)
    1906:	601a      	str	r2, [r3, #0]
    1908:	2182      	movs	r1, #130	; 0x82
    190a:	2000      	movs	r0, #0
    190c:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    190e:	21ff      	movs	r1, #255	; 0xff
    1910:	2000      	movs	r0, #0
    1912:	47b8      	blx	r7
    1914:	0023      	movs	r3, r4
    1916:	3368      	adds	r3, #104	; 0x68
    1918:	8018      	strh	r0, [r3, #0]
    191a:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    191c:	21ff      	movs	r1, #255	; 0xff
    191e:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1920:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1922:	47b8      	blx	r7
    1924:	9b03      	ldr	r3, [sp, #12]
    1926:	0200      	lsls	r0, r0, #8
    1928:	4305      	orrs	r5, r0
    192a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    192c:	21ff      	movs	r1, #255	; 0xff
    192e:	0026      	movs	r6, r4
    1930:	2000      	movs	r0, #0
    1932:	47b8      	blx	r7
    1934:	366c      	adds	r6, #108	; 0x6c
    1936:	8030      	strh	r0, [r6, #0]
    1938:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    193a:	21ff      	movs	r1, #255	; 0xff
    193c:	2000      	movs	r0, #0
    193e:	47b8      	blx	r7
    1940:	0200      	lsls	r0, r0, #8
    1942:	4305      	orrs	r5, r0
    1944:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1946:	21ff      	movs	r1, #255	; 0xff
    1948:	2000      	movs	r0, #0
    194a:	47b8      	blx	r7
    194c:	466b      	mov	r3, sp
    194e:	0025      	movs	r5, r4
    1950:	9004      	str	r0, [sp, #16]
    1952:	8a1b      	ldrh	r3, [r3, #16]
    1954:	3570      	adds	r5, #112	; 0x70
    1956:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1958:	21ff      	movs	r1, #255	; 0xff
    195a:	2000      	movs	r0, #0
    195c:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    195e:	2280      	movs	r2, #128	; 0x80
    1960:	9b04      	ldr	r3, [sp, #16]
    1962:	0200      	lsls	r0, r0, #8
    1964:	4303      	orrs	r3, r0
    1966:	802b      	strh	r3, [r5, #0]
    1968:	4b67      	ldr	r3, [pc, #412]	; (1b08 <sampleTick+0x3a0>)
    196a:	00d2      	lsls	r2, r2, #3
    196c:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    196e:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1970:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    1972:	2000      	movs	r0, #0
    1974:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1976:	2300      	movs	r3, #0
    1978:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    197a:	2102      	movs	r1, #2
    197c:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    197e:	0021      	movs	r1, r4
    1980:	1112      	asrs	r2, r2, #4
    1982:	1100      	asrs	r0, r0, #4
    1984:	316a      	adds	r1, #106	; 0x6a
    1986:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1988:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    198a:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    198c:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    198e:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1990:	4b4d      	ldr	r3, [pc, #308]	; (1ac8 <sampleTick+0x360>)
    1992:	4798      	blx	r3
    1994:	23fe      	movs	r3, #254	; 0xfe
    1996:	4d4e      	ldr	r5, [pc, #312]	; (1ad0 <sampleTick+0x368>)
    1998:	2200      	movs	r2, #0
    199a:	059b      	lsls	r3, r3, #22
    199c:	47a8      	blx	r5
    199e:	4b4e      	ldr	r3, [pc, #312]	; (1ad8 <sampleTick+0x370>)
    19a0:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    19a2:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    19a4:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    19a6:	2000      	movs	r0, #0
    19a8:	5e18      	ldrsh	r0, [r3, r0]
    19aa:	4b47      	ldr	r3, [pc, #284]	; (1ac8 <sampleTick+0x360>)
    19ac:	4798      	blx	r3
    19ae:	23fe      	movs	r3, #254	; 0xfe
    19b0:	2200      	movs	r2, #0
    19b2:	059b      	lsls	r3, r3, #22
    19b4:	47a8      	blx	r5
    19b6:	4b48      	ldr	r3, [pc, #288]	; (1ad8 <sampleTick+0x370>)
    19b8:	4798      	blx	r3
    19ba:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    19bc:	2306      	movs	r3, #6
    19be:	5ef0      	ldrsh	r0, [r6, r3]
    19c0:	4b41      	ldr	r3, [pc, #260]	; (1ac8 <sampleTick+0x360>)
    19c2:	4798      	blx	r3
    19c4:	23fe      	movs	r3, #254	; 0xfe
    19c6:	2200      	movs	r2, #0
    19c8:	059b      	lsls	r3, r3, #22
    19ca:	47a8      	blx	r5
    19cc:	4b42      	ldr	r3, [pc, #264]	; (1ad8 <sampleTick+0x370>)
    19ce:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    19d0:	2280      	movs	r2, #128	; 0x80
    19d2:	4b47      	ldr	r3, [pc, #284]	; (1af0 <sampleTick+0x388>)
    19d4:	00d2      	lsls	r2, r2, #3
    19d6:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    19d8:	2182      	movs	r1, #130	; 0x82
    19da:	615a      	str	r2, [r3, #20]
    19dc:	2000      	movs	r0, #0
    19de:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    19e0:	21ff      	movs	r1, #255	; 0xff
    19e2:	2000      	movs	r0, #0
    19e4:	47b8      	blx	r7
    19e6:	0023      	movs	r3, r4
    19e8:	3374      	adds	r3, #116	; 0x74
    19ea:	8018      	strh	r0, [r3, #0]
    19ec:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19ee:	21ff      	movs	r1, #255	; 0xff
    19f0:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    19f2:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    19f4:	47b8      	blx	r7
    19f6:	9b03      	ldr	r3, [sp, #12]
    19f8:	0200      	lsls	r0, r0, #8
    19fa:	4305      	orrs	r5, r0
    19fc:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    19fe:	21ff      	movs	r1, #255	; 0xff
    1a00:	2000      	movs	r0, #0
    1a02:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1a04:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1a06:	81b0      	strh	r0, [r6, #12]
    1a08:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1a0a:	2000      	movs	r0, #0
    1a0c:	47b8      	blx	r7
    1a0e:	0200      	lsls	r0, r0, #8
    1a10:	4305      	orrs	r5, r0
    1a12:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1a14:	21ff      	movs	r1, #255	; 0xff
    1a16:	2000      	movs	r0, #0
    1a18:	47b8      	blx	r7
    1a1a:	466b      	mov	r3, sp
    1a1c:	0025      	movs	r5, r4
    1a1e:	9004      	str	r0, [sp, #16]
    1a20:	8a1b      	ldrh	r3, [r3, #16]
    1a22:	357c      	adds	r5, #124	; 0x7c
    1a24:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1a26:	21ff      	movs	r1, #255	; 0xff
    1a28:	2000      	movs	r0, #0
    1a2a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1a2c:	2280      	movs	r2, #128	; 0x80
    1a2e:	9f04      	ldr	r7, [sp, #16]
    1a30:	0200      	lsls	r0, r0, #8
    1a32:	4b2f      	ldr	r3, [pc, #188]	; (1af0 <sampleTick+0x388>)
    1a34:	4307      	orrs	r7, r0
    1a36:	00d2      	lsls	r2, r2, #3
    1a38:	802f      	strh	r7, [r5, #0]
    1a3a:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1a3c:	9b03      	ldr	r3, [sp, #12]
    1a3e:	2000      	movs	r0, #0
    1a40:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    1a42:	230c      	movs	r3, #12
    1a44:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    1a46:	2100      	movs	r1, #0
    1a48:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1a4a:	0021      	movs	r1, r4
    1a4c:	1112      	asrs	r2, r2, #4
    1a4e:	1100      	asrs	r0, r0, #4
    1a50:	3176      	adds	r1, #118	; 0x76
    1a52:	111b      	asrs	r3, r3, #4
    1a54:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1a56:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1a58:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1a5a:	4b1b      	ldr	r3, [pc, #108]	; (1ac8 <sampleTick+0x360>)
    1a5c:	4798      	blx	r3
    1a5e:	23fe      	movs	r3, #254	; 0xfe
    1a60:	4f1b      	ldr	r7, [pc, #108]	; (1ad0 <sampleTick+0x368>)
    1a62:	2200      	movs	r2, #0
    1a64:	059b      	lsls	r3, r3, #22
    1a66:	47b8      	blx	r7
    1a68:	4b1b      	ldr	r3, [pc, #108]	; (1ad8 <sampleTick+0x370>)
    1a6a:	4798      	blx	r3
    1a6c:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    1a6e:	230e      	movs	r3, #14
    1a70:	5ef0      	ldrsh	r0, [r6, r3]
    1a72:	4b15      	ldr	r3, [pc, #84]	; (1ac8 <sampleTick+0x360>)
    1a74:	4798      	blx	r3
    1a76:	23fe      	movs	r3, #254	; 0xfe
    1a78:	2200      	movs	r2, #0
    1a7a:	059b      	lsls	r3, r3, #22
    1a7c:	47b8      	blx	r7
    1a7e:	4b16      	ldr	r3, [pc, #88]	; (1ad8 <sampleTick+0x370>)
    1a80:	4798      	blx	r3
    1a82:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1a84:	2302      	movs	r3, #2
    1a86:	5ee8      	ldrsh	r0, [r5, r3]
    1a88:	4b0f      	ldr	r3, [pc, #60]	; (1ac8 <sampleTick+0x360>)
    1a8a:	4798      	blx	r3
    1a8c:	23fe      	movs	r3, #254	; 0xfe
    1a8e:	2200      	movs	r2, #0
    1a90:	059b      	lsls	r3, r3, #22
    1a92:	47b8      	blx	r7
    1a94:	4b10      	ldr	r3, [pc, #64]	; (1ad8 <sampleTick+0x370>)
    1a96:	4798      	blx	r3

    //delay_us(800);
    delay_ms(5);
    1a98:	4b1c      	ldr	r3, [pc, #112]	; (1b0c <sampleTick+0x3a4>)
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1a9a:	6660      	str	r0, [r4, #100]	; 0x64

    //delay_us(800);
    delay_ms(5);
    1a9c:	2005      	movs	r0, #5
    1a9e:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1aa0:	4b16      	ldr	r3, [pc, #88]	; (1afc <sampleTick+0x394>)
    1aa2:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1aa4:	3404      	adds	r4, #4
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1aa6:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1aa8:	4b19      	ldr	r3, [pc, #100]	; (1b10 <sampleTick+0x3a8>)
    1aaa:	0020      	movs	r0, r4
    1aac:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    1aae:	0020      	movs	r0, r4
    1ab0:	4b18      	ldr	r3, [pc, #96]	; (1b14 <sampleTick+0x3ac>)
    1ab2:	4798      	blx	r3


}
    1ab4:	b007      	add	sp, #28
    1ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab8:	20000463 	.word	0x20000463
    1abc:	000011bd 	.word	0x000011bd
    1ac0:	000053ac 	.word	0x000053ac
    1ac4:	00000e31 	.word	0x00000e31
    1ac8:	00004c51 	.word	0x00004c51
    1acc:	77318fc5 	.word	0x77318fc5
    1ad0:	00004009 	.word	0x00004009
    1ad4:	3f5f212d 	.word	0x3f5f212d
    1ad8:	00004ded 	.word	0x00004ded
    1adc:	0000029e 	.word	0x0000029e
    1ae0:	000002a2 	.word	0x000002a2
    1ae4:	fffff0c4 	.word	0xfffff0c4
    1ae8:	02de00d2 	.word	0x02de00d2
    1aec:	bf8f8a09 	.word	0xbf8f8a09
    1af0:	41004400 	.word	0x41004400
    1af4:	00000e99 	.word	0x00000e99
    1af8:	00001141 	.word	0x00001141
    1afc:	0000043d 	.word	0x0000043d
    1b00:	41004494 	.word	0x41004494
    1b04:	00001c25 	.word	0x00001c25
    1b08:	41004498 	.word	0x41004498
    1b0c:	00001171 	.word	0x00001171
    1b10:	000004f1 	.word	0x000004f1
    1b14:	00000599 	.word	0x00000599

00001b18 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1b18:	b570      	push	{r4, r5, r6, lr}
    1b1a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1b1c:	2301      	movs	r3, #1
    1b1e:	1ca6      	adds	r6, r4, #2
    1b20:	40b3      	lsls	r3, r6
    1b22:	480d      	ldr	r0, [pc, #52]	; (1b58 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1b24:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1b26:	6a01      	ldr	r1, [r0, #32]
    1b28:	430b      	orrs	r3, r1
    1b2a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1b2c:	2d00      	cmp	r5, #0
    1b2e:	d003      	beq.n	1b38 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1b30:	2107      	movs	r1, #7
    1b32:	0028      	movs	r0, r5
    1b34:	4b09      	ldr	r3, [pc, #36]	; (1b5c <sercomClockEnable+0x44>)
    1b36:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1b38:	22f0      	movs	r2, #240	; 0xf0
    1b3a:	2080      	movs	r0, #128	; 0x80
    1b3c:	0229      	lsls	r1, r5, #8
    1b3e:	0112      	lsls	r2, r2, #4
    1b40:	4011      	ands	r1, r2
    1b42:	01c0      	lsls	r0, r0, #7
    1b44:	4301      	orrs	r1, r0
    1b46:	0020      	movs	r0, r4
    1b48:	3014      	adds	r0, #20
    1b4a:	223f      	movs	r2, #63	; 0x3f
    1b4c:	0003      	movs	r3, r0
    1b4e:	4013      	ands	r3, r2
    1b50:	4319      	orrs	r1, r3
    1b52:	4b03      	ldr	r3, [pc, #12]	; (1b60 <sercomClockEnable+0x48>)
    1b54:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    1b56:	bd70      	pop	{r4, r5, r6, pc}
    1b58:	40000400 	.word	0x40000400
    1b5c:	000010f1 	.word	0x000010f1
    1b60:	40000c00 	.word	0x40000c00

00001b64 <sercomReset>:
#include <log.h>
#include <sample.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1b64:	4b04      	ldr	r3, [pc, #16]	; (1b78 <sercomReset+0x14>)
    1b66:	0280      	lsls	r0, r0, #10
    1b68:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1b6a:	2301      	movs	r3, #1
    1b6c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1b6e:	6802      	ldr	r2, [r0, #0]
    1b70:	421a      	tst	r2, r3
    1b72:	d1fc      	bne.n	1b6e <sercomReset+0xa>
}
    1b74:	4770      	bx	lr
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	42000800 	.word	0x42000800

00001b7c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b7e:	0004      	movs	r4, r0
    1b80:	9300      	str	r3, [sp, #0]
    1b82:	ab08      	add	r3, sp, #32
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	000e      	movs	r6, r1
    1b88:	9301      	str	r3, [sp, #4]
    1b8a:	ab09      	add	r3, sp, #36	; 0x24
    1b8c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1b8e:	4b12      	ldr	r3, [pc, #72]	; (1bd8 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1b90:	0015      	movs	r5, r2

    sercomReset(id);
    1b92:	4798      	blx	r3
    1b94:	4b11      	ldr	r3, [pc, #68]	; (1bdc <sercomSpiMasterInit+0x60>)
    1b96:	02a4      	lsls	r4, r4, #10
    1b98:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1b9a:	2380      	movs	r3, #128	; 0x80
    1b9c:	029b      	lsls	r3, r3, #10
    1b9e:	6063      	str	r3, [r4, #4]
    1ba0:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1ba2:	21c0      	movs	r1, #192	; 0xc0
    1ba4:	042d      	lsls	r5, r5, #16
    1ba6:	029b      	lsls	r3, r3, #10
    1ba8:	402b      	ands	r3, r5
    1baa:	250e      	movs	r5, #14
    1bac:	0536      	lsls	r6, r6, #20
    1bae:	0389      	lsls	r1, r1, #14
    1bb0:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1bb2:	9e00      	ldr	r6, [sp, #0]
    1bb4:	431d      	orrs	r5, r3
    1bb6:	1e73      	subs	r3, r6, #1
    1bb8:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1bba:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1bbc:	0772      	lsls	r2, r6, #29
    1bbe:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1bc0:	432a      	orrs	r2, r5
    1bc2:	1e59      	subs	r1, r3, #1
    1bc4:	418b      	sbcs	r3, r1
    1bc6:	0016      	movs	r6, r2
    1bc8:	071b      	lsls	r3, r3, #28
    1bca:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1bcc:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1bce:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1bd0:	69e3      	ldr	r3, [r4, #28]
    1bd2:	075b      	lsls	r3, r3, #29
    1bd4:	d4fc      	bmi.n	1bd0 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1bd6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1bd8:	00001b65 	.word	0x00001b65
    1bdc:	42000800 	.word	0x42000800

00001be0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1be2:	0007      	movs	r7, r0
    1be4:	001e      	movs	r6, r3
    sercomReset(id);
    1be6:	4b0c      	ldr	r3, [pc, #48]	; (1c18 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1be8:	000d      	movs	r5, r1
    1bea:	0014      	movs	r4, r2
    sercomReset(id);
    1bec:	4798      	blx	r3
#include <log.h>
#include <sample.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1bee:	4b0b      	ldr	r3, [pc, #44]	; (1c1c <sercomUartInit+0x3c>)
    1bf0:	02b8      	lsls	r0, r7, #10
    1bf2:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1bf4:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1bf6:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1bf8:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1bfa:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1bfc:	0529      	lsls	r1, r5, #20
    1bfe:	0392      	lsls	r2, r2, #14
    1c00:	4011      	ands	r1, r2
    1c02:	4a07      	ldr	r2, [pc, #28]	; (1c20 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1c04:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1c06:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c08:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1c0a:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c0c:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1c0e:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1c10:	4023      	ands	r3, r4
    1c12:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1c14:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c18:	00001b65 	.word	0x00001b65
    1c1c:	42000800 	.word	0x42000800
    1c20:	40000006 	.word	0x40000006

00001c24 <spiDataTransfer>:
    1c24:	4b04      	ldr	r3, [pc, #16]	; (1c38 <spiDataTransfer+0x14>)
    1c26:	0280      	lsls	r0, r0, #10
    1c28:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1c2a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1c2c:	7e03      	ldrb	r3, [r0, #24]
    1c2e:	075b      	lsls	r3, r3, #29
    1c30:	d5fc      	bpl.n	1c2c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1c32:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1c34:	b2c0      	uxtb	r0, r0
}
    1c36:	4770      	bx	lr
    1c38:	42000800 	.word	0x42000800

00001c3c <usartDataOut>:
    1c3c:	4b04      	ldr	r3, [pc, #16]	; (1c50 <usartDataOut+0x14>)
    1c3e:	0280      	lsls	r0, r0, #10
    1c40:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1c42:	b289      	uxth	r1, r1
    1c44:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    1c46:	7e03      	ldrb	r3, [r0, #24]
    1c48:	07db      	lsls	r3, r3, #31
    1c4a:	d5fc      	bpl.n	1c46 <usartDataOut+0xa>
}
    1c4c:	4770      	bx	lr
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	42000800 	.word	0x42000800

00001c54 <usartDataIn>:
    1c54:	4b02      	ldr	r3, [pc, #8]	; (1c60 <usartDataIn+0xc>)
    1c56:	0280      	lsls	r0, r0, #10
    1c58:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1c5a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1c5c:	b2c0      	uxtb	r0, r0
    1c5e:	4770      	bx	lr
    1c60:	42000800 	.word	0x42000800

00001c64 <pow>:
    1c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c66:	465f      	mov	r7, fp
    1c68:	464d      	mov	r5, r9
    1c6a:	4656      	mov	r6, sl
    1c6c:	4644      	mov	r4, r8
    1c6e:	b4f0      	push	{r4, r5, r6, r7}
    1c70:	b091      	sub	sp, #68	; 0x44
    1c72:	001f      	movs	r7, r3
    1c74:	0004      	movs	r4, r0
    1c76:	000d      	movs	r5, r1
    1c78:	0016      	movs	r6, r2
    1c7a:	f000 f9af 	bl	1fdc <__ieee754_pow>
    1c7e:	4bcf      	ldr	r3, [pc, #828]	; (1fbc <pow+0x358>)
    1c80:	9002      	str	r0, [sp, #8]
    1c82:	9103      	str	r1, [sp, #12]
    1c84:	469b      	mov	fp, r3
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	b25b      	sxtb	r3, r3
    1c8a:	4699      	mov	r9, r3
    1c8c:	3301      	adds	r3, #1
    1c8e:	d04f      	beq.n	1d30 <pow+0xcc>
    1c90:	0032      	movs	r2, r6
    1c92:	003b      	movs	r3, r7
    1c94:	0030      	movs	r0, r6
    1c96:	0039      	movs	r1, r7
    1c98:	f002 ff84 	bl	4ba4 <__aeabi_dcmpun>
    1c9c:	9000      	str	r0, [sp, #0]
    1c9e:	2800      	cmp	r0, #0
    1ca0:	d146      	bne.n	1d30 <pow+0xcc>
    1ca2:	0022      	movs	r2, r4
    1ca4:	002b      	movs	r3, r5
    1ca6:	0020      	movs	r0, r4
    1ca8:	0029      	movs	r1, r5
    1caa:	f002 ff7b 	bl	4ba4 <__aeabi_dcmpun>
    1cae:	2200      	movs	r2, #0
    1cb0:	4682      	mov	sl, r0
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d134      	bne.n	1d20 <pow+0xbc>
    1cb6:	2300      	movs	r3, #0
    1cb8:	0020      	movs	r0, r4
    1cba:	0029      	movs	r1, r5
    1cbc:	f001 f8f2 	bl	2ea4 <__aeabi_dcmpeq>
    1cc0:	2800      	cmp	r0, #0
    1cc2:	d03a      	beq.n	1d3a <pow+0xd6>
    1cc4:	2200      	movs	r2, #0
    1cc6:	2300      	movs	r3, #0
    1cc8:	0030      	movs	r0, r6
    1cca:	0039      	movs	r1, r7
    1ccc:	f001 f8ea 	bl	2ea4 <__aeabi_dcmpeq>
    1cd0:	9005      	str	r0, [sp, #20]
    1cd2:	2800      	cmp	r0, #0
    1cd4:	d100      	bne.n	1cd8 <pow+0x74>
    1cd6:	e074      	b.n	1dc2 <pow+0x15e>
    1cd8:	ab06      	add	r3, sp, #24
    1cda:	4698      	mov	r8, r3
    1cdc:	2301      	movs	r3, #1
    1cde:	4642      	mov	r2, r8
    1ce0:	9306      	str	r3, [sp, #24]
    1ce2:	4bb7      	ldr	r3, [pc, #732]	; (1fc0 <pow+0x35c>)
    1ce4:	6053      	str	r3, [r2, #4]
    1ce6:	4643      	mov	r3, r8
    1ce8:	4652      	mov	r2, sl
    1cea:	609c      	str	r4, [r3, #8]
    1cec:	60dd      	str	r5, [r3, #12]
    1cee:	621a      	str	r2, [r3, #32]
    1cf0:	611e      	str	r6, [r3, #16]
    1cf2:	615f      	str	r7, [r3, #20]
    1cf4:	4642      	mov	r2, r8
    1cf6:	2300      	movs	r3, #0
    1cf8:	2400      	movs	r4, #0
    1cfa:	6193      	str	r3, [r2, #24]
    1cfc:	61d4      	str	r4, [r2, #28]
    1cfe:	464b      	mov	r3, r9
    1d00:	2b00      	cmp	r3, #0
    1d02:	d100      	bne.n	1d06 <pow+0xa2>
    1d04:	e094      	b.n	1e30 <pow+0x1cc>
    1d06:	2300      	movs	r3, #0
    1d08:	4cae      	ldr	r4, [pc, #696]	; (1fc4 <pow+0x360>)
    1d0a:	9300      	str	r3, [sp, #0]
    1d0c:	9401      	str	r4, [sp, #4]
    1d0e:	9800      	ldr	r0, [sp, #0]
    1d10:	9901      	ldr	r1, [sp, #4]
    1d12:	b011      	add	sp, #68	; 0x44
    1d14:	bc3c      	pop	{r2, r3, r4, r5}
    1d16:	4690      	mov	r8, r2
    1d18:	4699      	mov	r9, r3
    1d1a:	46a2      	mov	sl, r4
    1d1c:	46ab      	mov	fp, r5
    1d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d20:	2300      	movs	r3, #0
    1d22:	0030      	movs	r0, r6
    1d24:	0039      	movs	r1, r7
    1d26:	f001 f8bd 	bl	2ea4 <__aeabi_dcmpeq>
    1d2a:	2800      	cmp	r0, #0
    1d2c:	d000      	beq.n	1d30 <pow+0xcc>
    1d2e:	e0eb      	b.n	1f08 <pow+0x2a4>
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	9c03      	ldr	r4, [sp, #12]
    1d34:	9300      	str	r3, [sp, #0]
    1d36:	9401      	str	r4, [sp, #4]
    1d38:	e7e9      	b.n	1d0e <pow+0xaa>
    1d3a:	9802      	ldr	r0, [sp, #8]
    1d3c:	9903      	ldr	r1, [sp, #12]
    1d3e:	f000 ff7d 	bl	2c3c <finite>
    1d42:	4681      	mov	r9, r0
    1d44:	2800      	cmp	r0, #0
    1d46:	d100      	bne.n	1d4a <pow+0xe6>
    1d48:	e086      	b.n	1e58 <pow+0x1f4>
    1d4a:	9802      	ldr	r0, [sp, #8]
    1d4c:	9903      	ldr	r1, [sp, #12]
    1d4e:	2200      	movs	r2, #0
    1d50:	2300      	movs	r3, #0
    1d52:	f001 f8a7 	bl	2ea4 <__aeabi_dcmpeq>
    1d56:	2800      	cmp	r0, #0
    1d58:	d0ea      	beq.n	1d30 <pow+0xcc>
    1d5a:	0020      	movs	r0, r4
    1d5c:	0029      	movs	r1, r5
    1d5e:	f000 ff6d 	bl	2c3c <finite>
    1d62:	9a02      	ldr	r2, [sp, #8]
    1d64:	9b03      	ldr	r3, [sp, #12]
    1d66:	9200      	str	r2, [sp, #0]
    1d68:	9301      	str	r3, [sp, #4]
    1d6a:	2800      	cmp	r0, #0
    1d6c:	d0cf      	beq.n	1d0e <pow+0xaa>
    1d6e:	0030      	movs	r0, r6
    1d70:	0039      	movs	r1, r7
    1d72:	f000 ff63 	bl	2c3c <finite>
    1d76:	9a02      	ldr	r2, [sp, #8]
    1d78:	9b03      	ldr	r3, [sp, #12]
    1d7a:	9200      	str	r2, [sp, #0]
    1d7c:	9301      	str	r3, [sp, #4]
    1d7e:	2800      	cmp	r0, #0
    1d80:	d0c5      	beq.n	1d0e <pow+0xaa>
    1d82:	ab06      	add	r3, sp, #24
    1d84:	4698      	mov	r8, r3
    1d86:	2304      	movs	r3, #4
    1d88:	4642      	mov	r2, r8
    1d8a:	9306      	str	r3, [sp, #24]
    1d8c:	4b8c      	ldr	r3, [pc, #560]	; (1fc0 <pow+0x35c>)
    1d8e:	6094      	str	r4, [r2, #8]
    1d90:	60d5      	str	r5, [r2, #12]
    1d92:	6053      	str	r3, [r2, #4]
    1d94:	2300      	movs	r3, #0
    1d96:	2400      	movs	r4, #0
    1d98:	6213      	str	r3, [r2, #32]
    1d9a:	2300      	movs	r3, #0
    1d9c:	6193      	str	r3, [r2, #24]
    1d9e:	61d4      	str	r4, [r2, #28]
    1da0:	465b      	mov	r3, fp
    1da2:	781b      	ldrb	r3, [r3, #0]
    1da4:	6116      	str	r6, [r2, #16]
    1da6:	6157      	str	r7, [r2, #20]
    1da8:	b25b      	sxtb	r3, r3
    1daa:	2b02      	cmp	r3, #2
    1dac:	d004      	beq.n	1db8 <pow+0x154>
    1dae:	4640      	mov	r0, r8
    1db0:	f000 ff4e 	bl	2c50 <matherr>
    1db4:	2800      	cmp	r0, #0
    1db6:	d140      	bne.n	1e3a <pow+0x1d6>
    1db8:	f003 f94e 	bl	5058 <__errno>
    1dbc:	2322      	movs	r3, #34	; 0x22
    1dbe:	6003      	str	r3, [r0, #0]
    1dc0:	e03b      	b.n	1e3a <pow+0x1d6>
    1dc2:	0030      	movs	r0, r6
    1dc4:	0039      	movs	r1, r7
    1dc6:	f000 ff39 	bl	2c3c <finite>
    1dca:	9a02      	ldr	r2, [sp, #8]
    1dcc:	9b03      	ldr	r3, [sp, #12]
    1dce:	9200      	str	r2, [sp, #0]
    1dd0:	9301      	str	r3, [sp, #4]
    1dd2:	2800      	cmp	r0, #0
    1dd4:	d09b      	beq.n	1d0e <pow+0xaa>
    1dd6:	2200      	movs	r2, #0
    1dd8:	2300      	movs	r3, #0
    1dda:	0030      	movs	r0, r6
    1ddc:	0039      	movs	r1, r7
    1dde:	f001 f867 	bl	2eb0 <__aeabi_dcmplt>
    1de2:	2800      	cmp	r0, #0
    1de4:	d100      	bne.n	1de8 <pow+0x184>
    1de6:	e792      	b.n	1d0e <pow+0xaa>
    1de8:	ab06      	add	r3, sp, #24
    1dea:	4698      	mov	r8, r3
    1dec:	2301      	movs	r3, #1
    1dee:	4642      	mov	r2, r8
    1df0:	9306      	str	r3, [sp, #24]
    1df2:	4b73      	ldr	r3, [pc, #460]	; (1fc0 <pow+0x35c>)
    1df4:	6053      	str	r3, [r2, #4]
    1df6:	4643      	mov	r3, r8
    1df8:	9a05      	ldr	r2, [sp, #20]
    1dfa:	609c      	str	r4, [r3, #8]
    1dfc:	60dd      	str	r5, [r3, #12]
    1dfe:	621a      	str	r2, [r3, #32]
    1e00:	611e      	str	r6, [r3, #16]
    1e02:	615f      	str	r7, [r3, #20]
    1e04:	465b      	mov	r3, fp
    1e06:	781b      	ldrb	r3, [r3, #0]
    1e08:	b25b      	sxtb	r3, r3
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d00b      	beq.n	1e26 <pow+0x1c2>
    1e0e:	2000      	movs	r0, #0
    1e10:	4642      	mov	r2, r8
    1e12:	496d      	ldr	r1, [pc, #436]	; (1fc8 <pow+0x364>)
    1e14:	6190      	str	r0, [r2, #24]
    1e16:	61d1      	str	r1, [r2, #28]
    1e18:	2b02      	cmp	r3, #2
    1e1a:	d109      	bne.n	1e30 <pow+0x1cc>
    1e1c:	f003 f91c 	bl	5058 <__errno>
    1e20:	2321      	movs	r3, #33	; 0x21
    1e22:	6003      	str	r3, [r0, #0]
    1e24:	e009      	b.n	1e3a <pow+0x1d6>
    1e26:	4642      	mov	r2, r8
    1e28:	2300      	movs	r3, #0
    1e2a:	2400      	movs	r4, #0
    1e2c:	6193      	str	r3, [r2, #24]
    1e2e:	61d4      	str	r4, [r2, #28]
    1e30:	4640      	mov	r0, r8
    1e32:	f000 ff0d 	bl	2c50 <matherr>
    1e36:	2800      	cmp	r0, #0
    1e38:	d0f0      	beq.n	1e1c <pow+0x1b8>
    1e3a:	4643      	mov	r3, r8
    1e3c:	6a1b      	ldr	r3, [r3, #32]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d004      	beq.n	1e4c <pow+0x1e8>
    1e42:	f003 f909 	bl	5058 <__errno>
    1e46:	4643      	mov	r3, r8
    1e48:	6a1b      	ldr	r3, [r3, #32]
    1e4a:	6003      	str	r3, [r0, #0]
    1e4c:	4643      	mov	r3, r8
    1e4e:	69dc      	ldr	r4, [r3, #28]
    1e50:	699b      	ldr	r3, [r3, #24]
    1e52:	9300      	str	r3, [sp, #0]
    1e54:	9401      	str	r4, [sp, #4]
    1e56:	e75a      	b.n	1d0e <pow+0xaa>
    1e58:	0020      	movs	r0, r4
    1e5a:	0029      	movs	r1, r5
    1e5c:	f000 feee 	bl	2c3c <finite>
    1e60:	2800      	cmp	r0, #0
    1e62:	d100      	bne.n	1e66 <pow+0x202>
    1e64:	e771      	b.n	1d4a <pow+0xe6>
    1e66:	0030      	movs	r0, r6
    1e68:	0039      	movs	r1, r7
    1e6a:	f000 fee7 	bl	2c3c <finite>
    1e6e:	2800      	cmp	r0, #0
    1e70:	d100      	bne.n	1e74 <pow+0x210>
    1e72:	e76a      	b.n	1d4a <pow+0xe6>
    1e74:	9802      	ldr	r0, [sp, #8]
    1e76:	9903      	ldr	r1, [sp, #12]
    1e78:	000b      	movs	r3, r1
    1e7a:	0002      	movs	r2, r0
    1e7c:	f002 fe92 	bl	4ba4 <__aeabi_dcmpun>
    1e80:	ab06      	add	r3, sp, #24
    1e82:	4698      	mov	r8, r3
    1e84:	2800      	cmp	r0, #0
    1e86:	d17a      	bne.n	1f7e <pow+0x31a>
    1e88:	2303      	movs	r3, #3
    1e8a:	4642      	mov	r2, r8
    1e8c:	9306      	str	r3, [sp, #24]
    1e8e:	4b4c      	ldr	r3, [pc, #304]	; (1fc0 <pow+0x35c>)
    1e90:	6210      	str	r0, [r2, #32]
    1e92:	6053      	str	r3, [r2, #4]
    1e94:	465b      	mov	r3, fp
    1e96:	781b      	ldrb	r3, [r3, #0]
    1e98:	6094      	str	r4, [r2, #8]
    1e9a:	60d5      	str	r5, [r2, #12]
    1e9c:	b25b      	sxtb	r3, r3
    1e9e:	6116      	str	r6, [r2, #16]
    1ea0:	6157      	str	r7, [r2, #20]
    1ea2:	4699      	mov	r9, r3
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d148      	bne.n	1f3a <pow+0x2d6>
    1ea8:	22e0      	movs	r2, #224	; 0xe0
    1eaa:	4641      	mov	r1, r8
    1eac:	4b47      	ldr	r3, [pc, #284]	; (1fcc <pow+0x368>)
    1eae:	0612      	lsls	r2, r2, #24
    1eb0:	618a      	str	r2, [r1, #24]
    1eb2:	61cb      	str	r3, [r1, #28]
    1eb4:	0020      	movs	r0, r4
    1eb6:	2200      	movs	r2, #0
    1eb8:	2300      	movs	r3, #0
    1eba:	0029      	movs	r1, r5
    1ebc:	f000 fff8 	bl	2eb0 <__aeabi_dcmplt>
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d100      	bne.n	1ec6 <pow+0x262>
    1ec4:	e773      	b.n	1dae <pow+0x14a>
    1ec6:	2200      	movs	r2, #0
    1ec8:	4b41      	ldr	r3, [pc, #260]	; (1fd0 <pow+0x36c>)
    1eca:	0030      	movs	r0, r6
    1ecc:	0039      	movs	r1, r7
    1ece:	f002 f89b 	bl	4008 <__aeabi_dmul>
    1ed2:	0004      	movs	r4, r0
    1ed4:	000d      	movs	r5, r1
    1ed6:	f000 fec3 	bl	2c60 <rint>
    1eda:	0002      	movs	r2, r0
    1edc:	000b      	movs	r3, r1
    1ede:	0020      	movs	r0, r4
    1ee0:	0029      	movs	r1, r5
    1ee2:	f000 ffdf 	bl	2ea4 <__aeabi_dcmpeq>
    1ee6:	2800      	cmp	r0, #0
    1ee8:	d105      	bne.n	1ef6 <pow+0x292>
    1eea:	22e0      	movs	r2, #224	; 0xe0
    1eec:	4b39      	ldr	r3, [pc, #228]	; (1fd4 <pow+0x370>)
    1eee:	0612      	lsls	r2, r2, #24
    1ef0:	4641      	mov	r1, r8
    1ef2:	618a      	str	r2, [r1, #24]
    1ef4:	61cb      	str	r3, [r1, #28]
    1ef6:	465b      	mov	r3, fp
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	b25b      	sxtb	r3, r3
    1efc:	4699      	mov	r9, r3
    1efe:	464b      	mov	r3, r9
    1f00:	2b02      	cmp	r3, #2
    1f02:	d000      	beq.n	1f06 <pow+0x2a2>
    1f04:	e753      	b.n	1dae <pow+0x14a>
    1f06:	e757      	b.n	1db8 <pow+0x154>
    1f08:	ab06      	add	r3, sp, #24
    1f0a:	4698      	mov	r8, r3
    1f0c:	2301      	movs	r3, #1
    1f0e:	4642      	mov	r2, r8
    1f10:	9306      	str	r3, [sp, #24]
    1f12:	4b2b      	ldr	r3, [pc, #172]	; (1fc0 <pow+0x35c>)
    1f14:	6053      	str	r3, [r2, #4]
    1f16:	4643      	mov	r3, r8
    1f18:	609c      	str	r4, [r3, #8]
    1f1a:	60dd      	str	r5, [r3, #12]
    1f1c:	2400      	movs	r4, #0
    1f1e:	9a00      	ldr	r2, [sp, #0]
    1f20:	4d28      	ldr	r5, [pc, #160]	; (1fc4 <pow+0x360>)
    1f22:	621a      	str	r2, [r3, #32]
    1f24:	611e      	str	r6, [r3, #16]
    1f26:	615f      	str	r7, [r3, #20]
    1f28:	619c      	str	r4, [r3, #24]
    1f2a:	61dd      	str	r5, [r3, #28]
    1f2c:	464b      	mov	r3, r9
    1f2e:	9400      	str	r4, [sp, #0]
    1f30:	9501      	str	r5, [sp, #4]
    1f32:	2b02      	cmp	r3, #2
    1f34:	d000      	beq.n	1f38 <pow+0x2d4>
    1f36:	e77b      	b.n	1e30 <pow+0x1cc>
    1f38:	e6e9      	b.n	1d0e <pow+0xaa>
    1f3a:	2200      	movs	r2, #0
    1f3c:	4641      	mov	r1, r8
    1f3e:	4b26      	ldr	r3, [pc, #152]	; (1fd8 <pow+0x374>)
    1f40:	0020      	movs	r0, r4
    1f42:	618a      	str	r2, [r1, #24]
    1f44:	61cb      	str	r3, [r1, #28]
    1f46:	2200      	movs	r2, #0
    1f48:	2300      	movs	r3, #0
    1f4a:	0029      	movs	r1, r5
    1f4c:	f000 ffb0 	bl	2eb0 <__aeabi_dcmplt>
    1f50:	2800      	cmp	r0, #0
    1f52:	d0d4      	beq.n	1efe <pow+0x29a>
    1f54:	2200      	movs	r2, #0
    1f56:	4b1e      	ldr	r3, [pc, #120]	; (1fd0 <pow+0x36c>)
    1f58:	0030      	movs	r0, r6
    1f5a:	0039      	movs	r1, r7
    1f5c:	f002 f854 	bl	4008 <__aeabi_dmul>
    1f60:	0004      	movs	r4, r0
    1f62:	000d      	movs	r5, r1
    1f64:	f000 fe7c 	bl	2c60 <rint>
    1f68:	0002      	movs	r2, r0
    1f6a:	000b      	movs	r3, r1
    1f6c:	0020      	movs	r0, r4
    1f6e:	0029      	movs	r1, r5
    1f70:	f000 ff98 	bl	2ea4 <__aeabi_dcmpeq>
    1f74:	2800      	cmp	r0, #0
    1f76:	d1be      	bne.n	1ef6 <pow+0x292>
    1f78:	2200      	movs	r2, #0
    1f7a:	4b13      	ldr	r3, [pc, #76]	; (1fc8 <pow+0x364>)
    1f7c:	e7b8      	b.n	1ef0 <pow+0x28c>
    1f7e:	2301      	movs	r3, #1
    1f80:	4642      	mov	r2, r8
    1f82:	9306      	str	r3, [sp, #24]
    1f84:	4b0e      	ldr	r3, [pc, #56]	; (1fc0 <pow+0x35c>)
    1f86:	6053      	str	r3, [r2, #4]
    1f88:	4643      	mov	r3, r8
    1f8a:	464a      	mov	r2, r9
    1f8c:	609c      	str	r4, [r3, #8]
    1f8e:	60dd      	str	r5, [r3, #12]
    1f90:	621a      	str	r2, [r3, #32]
    1f92:	611e      	str	r6, [r3, #16]
    1f94:	615f      	str	r7, [r3, #20]
    1f96:	2400      	movs	r4, #0
    1f98:	465b      	mov	r3, fp
    1f9a:	571c      	ldrsb	r4, [r3, r4]
    1f9c:	2c00      	cmp	r4, #0
    1f9e:	d100      	bne.n	1fa2 <pow+0x33e>
    1fa0:	e741      	b.n	1e26 <pow+0x1c2>
    1fa2:	2300      	movs	r3, #0
    1fa4:	2200      	movs	r2, #0
    1fa6:	0019      	movs	r1, r3
    1fa8:	0010      	movs	r0, r2
    1faa:	f001 fc09 	bl	37c0 <__aeabi_ddiv>
    1fae:	4643      	mov	r3, r8
    1fb0:	6198      	str	r0, [r3, #24]
    1fb2:	61d9      	str	r1, [r3, #28]
    1fb4:	2c02      	cmp	r4, #2
    1fb6:	d100      	bne.n	1fba <pow+0x356>
    1fb8:	e730      	b.n	1e1c <pow+0x1b8>
    1fba:	e739      	b.n	1e30 <pow+0x1cc>
    1fbc:	2000000c 	.word	0x2000000c
    1fc0:	000053d4 	.word	0x000053d4
    1fc4:	3ff00000 	.word	0x3ff00000
    1fc8:	fff00000 	.word	0xfff00000
    1fcc:	47efffff 	.word	0x47efffff
    1fd0:	3fe00000 	.word	0x3fe00000
    1fd4:	c7efffff 	.word	0xc7efffff
    1fd8:	7ff00000 	.word	0x7ff00000

00001fdc <__ieee754_pow>:
    1fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fde:	4656      	mov	r6, sl
    1fe0:	464d      	mov	r5, r9
    1fe2:	4644      	mov	r4, r8
    1fe4:	465f      	mov	r7, fp
    1fe6:	b4f0      	push	{r4, r5, r6, r7}
    1fe8:	001c      	movs	r4, r3
    1fea:	0013      	movs	r3, r2
    1fec:	0067      	lsls	r7, r4, #1
    1fee:	b091      	sub	sp, #68	; 0x44
    1ff0:	087f      	lsrs	r7, r7, #1
    1ff2:	9300      	str	r3, [sp, #0]
    1ff4:	9401      	str	r4, [sp, #4]
    1ff6:	0006      	movs	r6, r0
    1ff8:	000d      	movs	r5, r1
    1ffa:	4680      	mov	r8, r0
    1ffc:	4689      	mov	r9, r1
    1ffe:	46a2      	mov	sl, r4
    2000:	433b      	orrs	r3, r7
    2002:	d032      	beq.n	206a <STACK_SIZE+0x6a>
    2004:	4b6e      	ldr	r3, [pc, #440]	; (21c0 <STACK_SIZE+0x1c0>)
    2006:	006c      	lsls	r4, r5, #1
    2008:	0864      	lsrs	r4, r4, #1
    200a:	429c      	cmp	r4, r3
    200c:	dc29      	bgt.n	2062 <STACK_SIZE+0x62>
    200e:	d026      	beq.n	205e <STACK_SIZE+0x5e>
    2010:	429f      	cmp	r7, r3
    2012:	dc26      	bgt.n	2062 <STACK_SIZE+0x62>
    2014:	4b6a      	ldr	r3, [pc, #424]	; (21c0 <STACK_SIZE+0x1c0>)
    2016:	429f      	cmp	r7, r3
    2018:	d100      	bne.n	201c <STACK_SIZE+0x1c>
    201a:	e089      	b.n	2130 <STACK_SIZE+0x130>
    201c:	2300      	movs	r3, #0
    201e:	469b      	mov	fp, r3
    2020:	464b      	mov	r3, r9
    2022:	2b00      	cmp	r3, #0
    2024:	da00      	bge.n	2028 <STACK_SIZE+0x28>
    2026:	e087      	b.n	2138 <STACK_SIZE+0x138>
    2028:	2a00      	cmp	r2, #0
    202a:	d12f      	bne.n	208c <STACK_SIZE+0x8c>
    202c:	4b64      	ldr	r3, [pc, #400]	; (21c0 <STACK_SIZE+0x1c0>)
    202e:	429f      	cmp	r7, r3
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e09f      	b.n	2174 <STACK_SIZE+0x174>
    2034:	4b63      	ldr	r3, [pc, #396]	; (21c4 <STACK_SIZE+0x1c4>)
    2036:	429f      	cmp	r7, r3
    2038:	d05d      	beq.n	20f6 <STACK_SIZE+0xf6>
    203a:	2380      	movs	r3, #128	; 0x80
    203c:	05db      	lsls	r3, r3, #23
    203e:	459a      	cmp	sl, r3
    2040:	d101      	bne.n	2046 <STACK_SIZE+0x46>
    2042:	f000 fbc1 	bl	27c8 <STACK_SIZE+0x7c8>
    2046:	4b60      	ldr	r3, [pc, #384]	; (21c8 <STACK_SIZE+0x1c8>)
    2048:	459a      	cmp	sl, r3
    204a:	d11f      	bne.n	208c <STACK_SIZE+0x8c>
    204c:	464b      	mov	r3, r9
    204e:	2b00      	cmp	r3, #0
    2050:	db1c      	blt.n	208c <STACK_SIZE+0x8c>
    2052:	0030      	movs	r0, r6
    2054:	0029      	movs	r1, r5
    2056:	f000 fcf7 	bl	2a48 <__ieee754_sqrt>
    205a:	0006      	movs	r6, r0
    205c:	e007      	b.n	206e <STACK_SIZE+0x6e>
    205e:	2800      	cmp	r0, #0
    2060:	d00d      	beq.n	207e <STACK_SIZE+0x7e>
    2062:	4b5a      	ldr	r3, [pc, #360]	; (21cc <STACK_SIZE+0x1cc>)
    2064:	18e0      	adds	r0, r4, r3
    2066:	4330      	orrs	r0, r6
    2068:	d10b      	bne.n	2082 <STACK_SIZE+0x82>
    206a:	2600      	movs	r6, #0
    206c:	4955      	ldr	r1, [pc, #340]	; (21c4 <STACK_SIZE+0x1c4>)
    206e:	0030      	movs	r0, r6
    2070:	b011      	add	sp, #68	; 0x44
    2072:	bc3c      	pop	{r2, r3, r4, r5}
    2074:	4690      	mov	r8, r2
    2076:	4699      	mov	r9, r3
    2078:	46a2      	mov	sl, r4
    207a:	46ab      	mov	fp, r5
    207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    207e:	42a7      	cmp	r7, r4
    2080:	ddc8      	ble.n	2014 <STACK_SIZE+0x14>
    2082:	4853      	ldr	r0, [pc, #332]	; (21d0 <STACK_SIZE+0x1d0>)
    2084:	f000 fde6 	bl	2c54 <nan>
    2088:	0006      	movs	r6, r0
    208a:	e7f0      	b.n	206e <STACK_SIZE+0x6e>
    208c:	0030      	movs	r0, r6
    208e:	0029      	movs	r1, r5
    2090:	f000 fdd0 	bl	2c34 <fabs>
    2094:	4643      	mov	r3, r8
    2096:	2b00      	cmp	r3, #0
    2098:	d01d      	beq.n	20d6 <STACK_SIZE+0xd6>
    209a:	0feb      	lsrs	r3, r5, #31
    209c:	3b01      	subs	r3, #1
    209e:	4698      	mov	r8, r3
    20a0:	465b      	mov	r3, fp
    20a2:	4642      	mov	r2, r8
    20a4:	4313      	orrs	r3, r2
    20a6:	d079      	beq.n	219c <STACK_SIZE+0x19c>
    20a8:	4b4a      	ldr	r3, [pc, #296]	; (21d4 <STACK_SIZE+0x1d4>)
    20aa:	429f      	cmp	r7, r3
    20ac:	dc00      	bgt.n	20b0 <STACK_SIZE+0xb0>
    20ae:	e09f      	b.n	21f0 <STACK_SIZE+0x1f0>
    20b0:	4b49      	ldr	r3, [pc, #292]	; (21d8 <STACK_SIZE+0x1d8>)
    20b2:	429f      	cmp	r7, r3
    20b4:	dc01      	bgt.n	20ba <STACK_SIZE+0xba>
    20b6:	f000 fbce 	bl	2856 <STACK_SIZE+0x856>
    20ba:	4b48      	ldr	r3, [pc, #288]	; (21dc <STACK_SIZE+0x1dc>)
    20bc:	429c      	cmp	r4, r3
    20be:	dd79      	ble.n	21b4 <STACK_SIZE+0x1b4>
    20c0:	4653      	mov	r3, sl
    20c2:	2b00      	cmp	r3, #0
    20c4:	dd79      	ble.n	21ba <STACK_SIZE+0x1ba>
    20c6:	4a46      	ldr	r2, [pc, #280]	; (21e0 <STACK_SIZE+0x1e0>)
    20c8:	4b46      	ldr	r3, [pc, #280]	; (21e4 <STACK_SIZE+0x1e4>)
    20ca:	0010      	movs	r0, r2
    20cc:	0019      	movs	r1, r3
    20ce:	f001 ff9b 	bl	4008 <__aeabi_dmul>
    20d2:	0006      	movs	r6, r0
    20d4:	e7cb      	b.n	206e <STACK_SIZE+0x6e>
    20d6:	2c00      	cmp	r4, #0
    20d8:	d004      	beq.n	20e4 <STACK_SIZE+0xe4>
    20da:	4a3a      	ldr	r2, [pc, #232]	; (21c4 <STACK_SIZE+0x1c4>)
    20dc:	00ab      	lsls	r3, r5, #2
    20de:	089b      	lsrs	r3, r3, #2
    20e0:	4293      	cmp	r3, r2
    20e2:	d1da      	bne.n	209a <STACK_SIZE+0x9a>
    20e4:	4653      	mov	r3, sl
    20e6:	2b00      	cmp	r3, #0
    20e8:	da00      	bge.n	20ec <STACK_SIZE+0xec>
    20ea:	e3ad      	b.n	2848 <STACK_SIZE+0x848>
    20ec:	464b      	mov	r3, r9
    20ee:	2b00      	cmp	r3, #0
    20f0:	db0d      	blt.n	210e <STACK_SIZE+0x10e>
    20f2:	0006      	movs	r6, r0
    20f4:	e7bb      	b.n	206e <STACK_SIZE+0x6e>
    20f6:	4653      	mov	r3, sl
    20f8:	0029      	movs	r1, r5
    20fa:	2b00      	cmp	r3, #0
    20fc:	dab7      	bge.n	206e <STACK_SIZE+0x6e>
    20fe:	0032      	movs	r2, r6
    2100:	002b      	movs	r3, r5
    2102:	2000      	movs	r0, #0
    2104:	492f      	ldr	r1, [pc, #188]	; (21c4 <STACK_SIZE+0x1c4>)
    2106:	f001 fb5b 	bl	37c0 <__aeabi_ddiv>
    210a:	0006      	movs	r6, r0
    210c:	e7af      	b.n	206e <STACK_SIZE+0x6e>
    210e:	4b2f      	ldr	r3, [pc, #188]	; (21cc <STACK_SIZE+0x1cc>)
    2110:	469c      	mov	ip, r3
    2112:	465b      	mov	r3, fp
    2114:	4464      	add	r4, ip
    2116:	431c      	orrs	r4, r3
    2118:	d101      	bne.n	211e <STACK_SIZE+0x11e>
    211a:	f000 fc2b 	bl	2974 <STACK_SIZE+0x974>
    211e:	465b      	mov	r3, fp
    2120:	0006      	movs	r6, r0
    2122:	2b01      	cmp	r3, #1
    2124:	d1a3      	bne.n	206e <STACK_SIZE+0x6e>
    2126:	2380      	movs	r3, #128	; 0x80
    2128:	061b      	lsls	r3, r3, #24
    212a:	469c      	mov	ip, r3
    212c:	4461      	add	r1, ip
    212e:	e79e      	b.n	206e <STACK_SIZE+0x6e>
    2130:	2a00      	cmp	r2, #0
    2132:	d100      	bne.n	2136 <STACK_SIZE+0x136>
    2134:	e772      	b.n	201c <STACK_SIZE+0x1c>
    2136:	e794      	b.n	2062 <STACK_SIZE+0x62>
    2138:	4b2b      	ldr	r3, [pc, #172]	; (21e8 <STACK_SIZE+0x1e8>)
    213a:	429f      	cmp	r7, r3
    213c:	dc2b      	bgt.n	2196 <STACK_SIZE+0x196>
    213e:	4b27      	ldr	r3, [pc, #156]	; (21dc <STACK_SIZE+0x1dc>)
    2140:	429f      	cmp	r7, r3
    2142:	dc00      	bgt.n	2146 <STACK_SIZE+0x146>
    2144:	e770      	b.n	2028 <STACK_SIZE+0x28>
    2146:	4929      	ldr	r1, [pc, #164]	; (21ec <STACK_SIZE+0x1ec>)
    2148:	153b      	asrs	r3, r7, #20
    214a:	468c      	mov	ip, r1
    214c:	4463      	add	r3, ip
    214e:	2b14      	cmp	r3, #20
    2150:	dc01      	bgt.n	2156 <STACK_SIZE+0x156>
    2152:	f000 fbf2 	bl	293a <STACK_SIZE+0x93a>
    2156:	2134      	movs	r1, #52	; 0x34
    2158:	1acb      	subs	r3, r1, r3
    215a:	9900      	ldr	r1, [sp, #0]
    215c:	40d9      	lsrs	r1, r3
    215e:	0008      	movs	r0, r1
    2160:	4098      	lsls	r0, r3
    2162:	4282      	cmp	r2, r0
    2164:	d000      	beq.n	2168 <STACK_SIZE+0x168>
    2166:	e75f      	b.n	2028 <STACK_SIZE+0x28>
    2168:	2301      	movs	r3, #1
    216a:	4019      	ands	r1, r3
    216c:	3301      	adds	r3, #1
    216e:	1a5b      	subs	r3, r3, r1
    2170:	469b      	mov	fp, r3
    2172:	e759      	b.n	2028 <STACK_SIZE+0x28>
    2174:	4b15      	ldr	r3, [pc, #84]	; (21cc <STACK_SIZE+0x1cc>)
    2176:	18e0      	adds	r0, r4, r3
    2178:	4306      	orrs	r6, r0
    217a:	d100      	bne.n	217e <STACK_SIZE+0x17e>
    217c:	e775      	b.n	206a <STACK_SIZE+0x6a>
    217e:	4b17      	ldr	r3, [pc, #92]	; (21dc <STACK_SIZE+0x1dc>)
    2180:	429c      	cmp	r4, r3
    2182:	dc00      	bgt.n	2186 <STACK_SIZE+0x186>
    2184:	e351      	b.n	282a <STACK_SIZE+0x82a>
    2186:	4653      	mov	r3, sl
    2188:	2b00      	cmp	r3, #0
    218a:	db16      	blt.n	21ba <STACK_SIZE+0x1ba>
    218c:	9b00      	ldr	r3, [sp, #0]
    218e:	9c01      	ldr	r4, [sp, #4]
    2190:	001e      	movs	r6, r3
    2192:	0021      	movs	r1, r4
    2194:	e76b      	b.n	206e <STACK_SIZE+0x6e>
    2196:	2302      	movs	r3, #2
    2198:	469b      	mov	fp, r3
    219a:	e745      	b.n	2028 <STACK_SIZE+0x28>
    219c:	0032      	movs	r2, r6
    219e:	002b      	movs	r3, r5
    21a0:	0030      	movs	r0, r6
    21a2:	0029      	movs	r1, r5
    21a4:	f002 f9aa 	bl	44fc <__aeabi_dsub>
    21a8:	0002      	movs	r2, r0
    21aa:	000b      	movs	r3, r1
    21ac:	f001 fb08 	bl	37c0 <__aeabi_ddiv>
    21b0:	0006      	movs	r6, r0
    21b2:	e75c      	b.n	206e <STACK_SIZE+0x6e>
    21b4:	4653      	mov	r3, sl
    21b6:	2b00      	cmp	r3, #0
    21b8:	db85      	blt.n	20c6 <STACK_SIZE+0xc6>
    21ba:	2600      	movs	r6, #0
    21bc:	2100      	movs	r1, #0
    21be:	e756      	b.n	206e <STACK_SIZE+0x6e>
    21c0:	7ff00000 	.word	0x7ff00000
    21c4:	3ff00000 	.word	0x3ff00000
    21c8:	3fe00000 	.word	0x3fe00000
    21cc:	c0100000 	.word	0xc0100000
    21d0:	000053d8 	.word	0x000053d8
    21d4:	41e00000 	.word	0x41e00000
    21d8:	43f00000 	.word	0x43f00000
    21dc:	3fefffff 	.word	0x3fefffff
    21e0:	8800759c 	.word	0x8800759c
    21e4:	7e37e43c 	.word	0x7e37e43c
    21e8:	433fffff 	.word	0x433fffff
    21ec:	fffffc01 	.word	0xfffffc01
    21f0:	4be8      	ldr	r3, [pc, #928]	; (2594 <STACK_SIZE+0x594>)
    21f2:	2200      	movs	r2, #0
    21f4:	429c      	cmp	r4, r3
    21f6:	dc06      	bgt.n	2206 <STACK_SIZE+0x206>
    21f8:	2200      	movs	r2, #0
    21fa:	4be7      	ldr	r3, [pc, #924]	; (2598 <STACK_SIZE+0x598>)
    21fc:	f001 ff04 	bl	4008 <__aeabi_dmul>
    2200:	2235      	movs	r2, #53	; 0x35
    2202:	000c      	movs	r4, r1
    2204:	4252      	negs	r2, r2
    2206:	4de5      	ldr	r5, [pc, #916]	; (259c <STACK_SIZE+0x59c>)
    2208:	1523      	asrs	r3, r4, #20
    220a:	46ac      	mov	ip, r5
    220c:	4463      	add	r3, ip
    220e:	4699      	mov	r9, r3
    2210:	0324      	lsls	r4, r4, #12
    2212:	4de3      	ldr	r5, [pc, #908]	; (25a0 <STACK_SIZE+0x5a0>)
    2214:	4be3      	ldr	r3, [pc, #908]	; (25a4 <STACK_SIZE+0x5a4>)
    2216:	0b24      	lsrs	r4, r4, #12
    2218:	4491      	add	r9, r2
    221a:	4325      	orrs	r5, r4
    221c:	429c      	cmp	r4, r3
    221e:	dd09      	ble.n	2234 <STACK_SIZE+0x234>
    2220:	4be1      	ldr	r3, [pc, #900]	; (25a8 <STACK_SIZE+0x5a8>)
    2222:	429c      	cmp	r4, r3
    2224:	dc00      	bgt.n	2228 <STACK_SIZE+0x228>
    2226:	e3a9      	b.n	297c <STACK_SIZE+0x97c>
    2228:	2301      	movs	r3, #1
    222a:	469c      	mov	ip, r3
    222c:	4bdf      	ldr	r3, [pc, #892]	; (25ac <STACK_SIZE+0x5ac>)
    222e:	44e1      	add	r9, ip
    2230:	469c      	mov	ip, r3
    2232:	4465      	add	r5, ip
    2234:	2300      	movs	r3, #0
    2236:	2400      	movs	r4, #0
    2238:	2200      	movs	r2, #0
    223a:	9308      	str	r3, [sp, #32]
    223c:	9409      	str	r4, [sp, #36]	; 0x24
    223e:	930c      	str	r3, [sp, #48]	; 0x30
    2240:	940d      	str	r4, [sp, #52]	; 0x34
    2242:	2400      	movs	r4, #0
    2244:	4bd6      	ldr	r3, [pc, #856]	; (25a0 <STACK_SIZE+0x5a0>)
    2246:	9206      	str	r2, [sp, #24]
    2248:	9307      	str	r3, [sp, #28]
    224a:	9a06      	ldr	r2, [sp, #24]
    224c:	9b07      	ldr	r3, [sp, #28]
    224e:	0029      	movs	r1, r5
    2250:	900a      	str	r0, [sp, #40]	; 0x28
    2252:	910b      	str	r1, [sp, #44]	; 0x2c
    2254:	f002 f952 	bl	44fc <__aeabi_dsub>
    2258:	9a06      	ldr	r2, [sp, #24]
    225a:	9b07      	ldr	r3, [sp, #28]
    225c:	0006      	movs	r6, r0
    225e:	000f      	movs	r7, r1
    2260:	980a      	ldr	r0, [sp, #40]	; 0x28
    2262:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2264:	f000 ff80 	bl	3168 <__aeabi_dadd>
    2268:	0002      	movs	r2, r0
    226a:	000b      	movs	r3, r1
    226c:	2000      	movs	r0, #0
    226e:	49cc      	ldr	r1, [pc, #816]	; (25a0 <STACK_SIZE+0x5a0>)
    2270:	f001 faa6 	bl	37c0 <__aeabi_ddiv>
    2274:	000a      	movs	r2, r1
    2276:	0001      	movs	r1, r0
    2278:	0013      	movs	r3, r2
    227a:	910e      	str	r1, [sp, #56]	; 0x38
    227c:	920f      	str	r2, [sp, #60]	; 0x3c
    227e:	0002      	movs	r2, r0
    2280:	0039      	movs	r1, r7
    2282:	0030      	movs	r0, r6
    2284:	f001 fec0 	bl	4008 <__aeabi_dmul>
    2288:	000a      	movs	r2, r1
    228a:	0001      	movs	r1, r0
    228c:	2080      	movs	r0, #128	; 0x80
    228e:	9104      	str	r1, [sp, #16]
    2290:	9205      	str	r2, [sp, #20]
    2292:	0013      	movs	r3, r2
    2294:	2200      	movs	r2, #0
    2296:	2180      	movs	r1, #128	; 0x80
    2298:	0300      	lsls	r0, r0, #12
    229a:	4684      	mov	ip, r0
    229c:	9202      	str	r2, [sp, #8]
    229e:	9303      	str	r3, [sp, #12]
    22a0:	2200      	movs	r2, #0
    22a2:	0589      	lsls	r1, r1, #22
    22a4:	106d      	asrs	r5, r5, #1
    22a6:	430d      	orrs	r5, r1
    22a8:	4465      	add	r5, ip
    22aa:	192b      	adds	r3, r5, r4
    22ac:	9802      	ldr	r0, [sp, #8]
    22ae:	9903      	ldr	r1, [sp, #12]
    22b0:	0014      	movs	r4, r2
    22b2:	001d      	movs	r5, r3
    22b4:	f001 fea8 	bl	4008 <__aeabi_dmul>
    22b8:	0002      	movs	r2, r0
    22ba:	000b      	movs	r3, r1
    22bc:	0030      	movs	r0, r6
    22be:	0039      	movs	r1, r7
    22c0:	f002 f91c 	bl	44fc <__aeabi_dsub>
    22c4:	9a06      	ldr	r2, [sp, #24]
    22c6:	9b07      	ldr	r3, [sp, #28]
    22c8:	0006      	movs	r6, r0
    22ca:	000f      	movs	r7, r1
    22cc:	0020      	movs	r0, r4
    22ce:	0029      	movs	r1, r5
    22d0:	f002 f914 	bl	44fc <__aeabi_dsub>
    22d4:	0002      	movs	r2, r0
    22d6:	000b      	movs	r3, r1
    22d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    22da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    22dc:	f002 f90e 	bl	44fc <__aeabi_dsub>
    22e0:	9a02      	ldr	r2, [sp, #8]
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	f001 fe90 	bl	4008 <__aeabi_dmul>
    22e8:	0002      	movs	r2, r0
    22ea:	000b      	movs	r3, r1
    22ec:	0030      	movs	r0, r6
    22ee:	0039      	movs	r1, r7
    22f0:	f002 f904 	bl	44fc <__aeabi_dsub>
    22f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    22f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    22f8:	f001 fe86 	bl	4008 <__aeabi_dmul>
    22fc:	9d04      	ldr	r5, [sp, #16]
    22fe:	9e05      	ldr	r6, [sp, #20]
    2300:	9006      	str	r0, [sp, #24]
    2302:	9107      	str	r1, [sp, #28]
    2304:	002a      	movs	r2, r5
    2306:	0033      	movs	r3, r6
    2308:	0028      	movs	r0, r5
    230a:	0031      	movs	r1, r6
    230c:	f001 fe7c 	bl	4008 <__aeabi_dmul>
    2310:	0006      	movs	r6, r0
    2312:	000f      	movs	r7, r1
    2314:	4aa6      	ldr	r2, [pc, #664]	; (25b0 <STACK_SIZE+0x5b0>)
    2316:	4ba7      	ldr	r3, [pc, #668]	; (25b4 <STACK_SIZE+0x5b4>)
    2318:	f001 fe76 	bl	4008 <__aeabi_dmul>
    231c:	4aa6      	ldr	r2, [pc, #664]	; (25b8 <STACK_SIZE+0x5b8>)
    231e:	4ba7      	ldr	r3, [pc, #668]	; (25bc <STACK_SIZE+0x5bc>)
    2320:	f000 ff22 	bl	3168 <__aeabi_dadd>
    2324:	0032      	movs	r2, r6
    2326:	003b      	movs	r3, r7
    2328:	f001 fe6e 	bl	4008 <__aeabi_dmul>
    232c:	4aa4      	ldr	r2, [pc, #656]	; (25c0 <STACK_SIZE+0x5c0>)
    232e:	4ba5      	ldr	r3, [pc, #660]	; (25c4 <STACK_SIZE+0x5c4>)
    2330:	f000 ff1a 	bl	3168 <__aeabi_dadd>
    2334:	0032      	movs	r2, r6
    2336:	003b      	movs	r3, r7
    2338:	f001 fe66 	bl	4008 <__aeabi_dmul>
    233c:	4aa2      	ldr	r2, [pc, #648]	; (25c8 <STACK_SIZE+0x5c8>)
    233e:	4ba3      	ldr	r3, [pc, #652]	; (25cc <STACK_SIZE+0x5cc>)
    2340:	f000 ff12 	bl	3168 <__aeabi_dadd>
    2344:	0032      	movs	r2, r6
    2346:	003b      	movs	r3, r7
    2348:	f001 fe5e 	bl	4008 <__aeabi_dmul>
    234c:	4aa0      	ldr	r2, [pc, #640]	; (25d0 <STACK_SIZE+0x5d0>)
    234e:	4ba1      	ldr	r3, [pc, #644]	; (25d4 <STACK_SIZE+0x5d4>)
    2350:	f000 ff0a 	bl	3168 <__aeabi_dadd>
    2354:	0032      	movs	r2, r6
    2356:	003b      	movs	r3, r7
    2358:	f001 fe56 	bl	4008 <__aeabi_dmul>
    235c:	4a9e      	ldr	r2, [pc, #632]	; (25d8 <STACK_SIZE+0x5d8>)
    235e:	4b9f      	ldr	r3, [pc, #636]	; (25dc <STACK_SIZE+0x5dc>)
    2360:	f000 ff02 	bl	3168 <__aeabi_dadd>
    2364:	0032      	movs	r2, r6
    2366:	0004      	movs	r4, r0
    2368:	000d      	movs	r5, r1
    236a:	003b      	movs	r3, r7
    236c:	0030      	movs	r0, r6
    236e:	0039      	movs	r1, r7
    2370:	f001 fe4a 	bl	4008 <__aeabi_dmul>
    2374:	0002      	movs	r2, r0
    2376:	000b      	movs	r3, r1
    2378:	0020      	movs	r0, r4
    237a:	0029      	movs	r1, r5
    237c:	f001 fe44 	bl	4008 <__aeabi_dmul>
    2380:	9e02      	ldr	r6, [sp, #8]
    2382:	9f03      	ldr	r7, [sp, #12]
    2384:	0004      	movs	r4, r0
    2386:	000d      	movs	r5, r1
    2388:	9804      	ldr	r0, [sp, #16]
    238a:	9905      	ldr	r1, [sp, #20]
    238c:	0032      	movs	r2, r6
    238e:	003b      	movs	r3, r7
    2390:	f000 feea 	bl	3168 <__aeabi_dadd>
    2394:	9a06      	ldr	r2, [sp, #24]
    2396:	9b07      	ldr	r3, [sp, #28]
    2398:	f001 fe36 	bl	4008 <__aeabi_dmul>
    239c:	0022      	movs	r2, r4
    239e:	002b      	movs	r3, r5
    23a0:	f000 fee2 	bl	3168 <__aeabi_dadd>
    23a4:	0032      	movs	r2, r6
    23a6:	900a      	str	r0, [sp, #40]	; 0x28
    23a8:	910b      	str	r1, [sp, #44]	; 0x2c
    23aa:	003b      	movs	r3, r7
    23ac:	0030      	movs	r0, r6
    23ae:	0039      	movs	r1, r7
    23b0:	9602      	str	r6, [sp, #8]
    23b2:	9703      	str	r7, [sp, #12]
    23b4:	f001 fe28 	bl	4008 <__aeabi_dmul>
    23b8:	2200      	movs	r2, #0
    23ba:	4b89      	ldr	r3, [pc, #548]	; (25e0 <STACK_SIZE+0x5e0>)
    23bc:	0004      	movs	r4, r0
    23be:	000d      	movs	r5, r1
    23c0:	f000 fed2 	bl	3168 <__aeabi_dadd>
    23c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23c8:	f000 fece 	bl	3168 <__aeabi_dadd>
    23cc:	2600      	movs	r6, #0
    23ce:	000f      	movs	r7, r1
    23d0:	0032      	movs	r2, r6
    23d2:	000b      	movs	r3, r1
    23d4:	9802      	ldr	r0, [sp, #8]
    23d6:	9903      	ldr	r1, [sp, #12]
    23d8:	f001 fe16 	bl	4008 <__aeabi_dmul>
    23dc:	2200      	movs	r2, #0
    23de:	9002      	str	r0, [sp, #8]
    23e0:	9103      	str	r1, [sp, #12]
    23e2:	4b7f      	ldr	r3, [pc, #508]	; (25e0 <STACK_SIZE+0x5e0>)
    23e4:	0030      	movs	r0, r6
    23e6:	0039      	movs	r1, r7
    23e8:	f002 f888 	bl	44fc <__aeabi_dsub>
    23ec:	0022      	movs	r2, r4
    23ee:	002b      	movs	r3, r5
    23f0:	f002 f884 	bl	44fc <__aeabi_dsub>
    23f4:	0002      	movs	r2, r0
    23f6:	000b      	movs	r3, r1
    23f8:	980a      	ldr	r0, [sp, #40]	; 0x28
    23fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    23fc:	f002 f87e 	bl	44fc <__aeabi_dsub>
    2400:	9a04      	ldr	r2, [sp, #16]
    2402:	9b05      	ldr	r3, [sp, #20]
    2404:	f001 fe00 	bl	4008 <__aeabi_dmul>
    2408:	0032      	movs	r2, r6
    240a:	0004      	movs	r4, r0
    240c:	000d      	movs	r5, r1
    240e:	9806      	ldr	r0, [sp, #24]
    2410:	9907      	ldr	r1, [sp, #28]
    2412:	003b      	movs	r3, r7
    2414:	f001 fdf8 	bl	4008 <__aeabi_dmul>
    2418:	0002      	movs	r2, r0
    241a:	000b      	movs	r3, r1
    241c:	0020      	movs	r0, r4
    241e:	0029      	movs	r1, r5
    2420:	f000 fea2 	bl	3168 <__aeabi_dadd>
    2424:	0004      	movs	r4, r0
    2426:	000d      	movs	r5, r1
    2428:	0002      	movs	r2, r0
    242a:	000b      	movs	r3, r1
    242c:	9802      	ldr	r0, [sp, #8]
    242e:	9903      	ldr	r1, [sp, #12]
    2430:	f000 fe9a 	bl	3168 <__aeabi_dadd>
    2434:	2600      	movs	r6, #0
    2436:	22e0      	movs	r2, #224	; 0xe0
    2438:	4b6a      	ldr	r3, [pc, #424]	; (25e4 <STACK_SIZE+0x5e4>)
    243a:	0612      	lsls	r2, r2, #24
    243c:	0030      	movs	r0, r6
    243e:	000f      	movs	r7, r1
    2440:	f001 fde2 	bl	4008 <__aeabi_dmul>
    2444:	9a02      	ldr	r2, [sp, #8]
    2446:	9b03      	ldr	r3, [sp, #12]
    2448:	9004      	str	r0, [sp, #16]
    244a:	9105      	str	r1, [sp, #20]
    244c:	0030      	movs	r0, r6
    244e:	0039      	movs	r1, r7
    2450:	f002 f854 	bl	44fc <__aeabi_dsub>
    2454:	0002      	movs	r2, r0
    2456:	000b      	movs	r3, r1
    2458:	0020      	movs	r0, r4
    245a:	0029      	movs	r1, r5
    245c:	f002 f84e 	bl	44fc <__aeabi_dsub>
    2460:	4a61      	ldr	r2, [pc, #388]	; (25e8 <STACK_SIZE+0x5e8>)
    2462:	4b60      	ldr	r3, [pc, #384]	; (25e4 <STACK_SIZE+0x5e4>)
    2464:	f001 fdd0 	bl	4008 <__aeabi_dmul>
    2468:	4a60      	ldr	r2, [pc, #384]	; (25ec <STACK_SIZE+0x5ec>)
    246a:	0004      	movs	r4, r0
    246c:	000d      	movs	r5, r1
    246e:	4b60      	ldr	r3, [pc, #384]	; (25f0 <STACK_SIZE+0x5f0>)
    2470:	0030      	movs	r0, r6
    2472:	0039      	movs	r1, r7
    2474:	f001 fdc8 	bl	4008 <__aeabi_dmul>
    2478:	0002      	movs	r2, r0
    247a:	000b      	movs	r3, r1
    247c:	0020      	movs	r0, r4
    247e:	0029      	movs	r1, r5
    2480:	f000 fe72 	bl	3168 <__aeabi_dadd>
    2484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2488:	f000 fe6e 	bl	3168 <__aeabi_dadd>
    248c:	0006      	movs	r6, r0
    248e:	4648      	mov	r0, r9
    2490:	000f      	movs	r7, r1
    2492:	f002 fbdd 	bl	4c50 <__aeabi_i2d>
    2496:	0004      	movs	r4, r0
    2498:	000d      	movs	r5, r1
    249a:	9804      	ldr	r0, [sp, #16]
    249c:	9905      	ldr	r1, [sp, #20]
    249e:	0032      	movs	r2, r6
    24a0:	003b      	movs	r3, r7
    24a2:	f000 fe61 	bl	3168 <__aeabi_dadd>
    24a6:	9a08      	ldr	r2, [sp, #32]
    24a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24aa:	f000 fe5d 	bl	3168 <__aeabi_dadd>
    24ae:	0022      	movs	r2, r4
    24b0:	002b      	movs	r3, r5
    24b2:	f000 fe59 	bl	3168 <__aeabi_dadd>
    24b6:	2000      	movs	r0, #0
    24b8:	0022      	movs	r2, r4
    24ba:	002b      	movs	r3, r5
    24bc:	9002      	str	r0, [sp, #8]
    24be:	9103      	str	r1, [sp, #12]
    24c0:	f002 f81c 	bl	44fc <__aeabi_dsub>
    24c4:	9a08      	ldr	r2, [sp, #32]
    24c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24c8:	f002 f818 	bl	44fc <__aeabi_dsub>
    24cc:	9a04      	ldr	r2, [sp, #16]
    24ce:	9b05      	ldr	r3, [sp, #20]
    24d0:	f002 f814 	bl	44fc <__aeabi_dsub>
    24d4:	0002      	movs	r2, r0
    24d6:	000b      	movs	r3, r1
    24d8:	0030      	movs	r0, r6
    24da:	0039      	movs	r1, r7
    24dc:	f002 f80e 	bl	44fc <__aeabi_dsub>
    24e0:	9004      	str	r0, [sp, #16]
    24e2:	9105      	str	r1, [sp, #20]
    24e4:	465b      	mov	r3, fp
    24e6:	4642      	mov	r2, r8
    24e8:	3b01      	subs	r3, #1
    24ea:	4313      	orrs	r3, r2
    24ec:	d100      	bne.n	24f0 <STACK_SIZE+0x4f0>
    24ee:	e197      	b.n	2820 <STACK_SIZE+0x820>
    24f0:	2300      	movs	r3, #0
    24f2:	4c2b      	ldr	r4, [pc, #172]	; (25a0 <STACK_SIZE+0x5a0>)
    24f4:	9306      	str	r3, [sp, #24]
    24f6:	9407      	str	r4, [sp, #28]
    24f8:	9800      	ldr	r0, [sp, #0]
    24fa:	9901      	ldr	r1, [sp, #4]
    24fc:	2600      	movs	r6, #0
    24fe:	000b      	movs	r3, r1
    2500:	0032      	movs	r2, r6
    2502:	000f      	movs	r7, r1
    2504:	f001 fffa 	bl	44fc <__aeabi_dsub>
    2508:	9a02      	ldr	r2, [sp, #8]
    250a:	9b03      	ldr	r3, [sp, #12]
    250c:	f001 fd7c 	bl	4008 <__aeabi_dmul>
    2510:	9a00      	ldr	r2, [sp, #0]
    2512:	9b01      	ldr	r3, [sp, #4]
    2514:	0004      	movs	r4, r0
    2516:	000d      	movs	r5, r1
    2518:	9804      	ldr	r0, [sp, #16]
    251a:	9905      	ldr	r1, [sp, #20]
    251c:	f001 fd74 	bl	4008 <__aeabi_dmul>
    2520:	0002      	movs	r2, r0
    2522:	000b      	movs	r3, r1
    2524:	0020      	movs	r0, r4
    2526:	0029      	movs	r1, r5
    2528:	f000 fe1e 	bl	3168 <__aeabi_dadd>
    252c:	0004      	movs	r4, r0
    252e:	000d      	movs	r5, r1
    2530:	9802      	ldr	r0, [sp, #8]
    2532:	9903      	ldr	r1, [sp, #12]
    2534:	003b      	movs	r3, r7
    2536:	0032      	movs	r2, r6
    2538:	9404      	str	r4, [sp, #16]
    253a:	9505      	str	r5, [sp, #20]
    253c:	f001 fd64 	bl	4008 <__aeabi_dmul>
    2540:	9000      	str	r0, [sp, #0]
    2542:	9101      	str	r1, [sp, #4]
    2544:	000b      	movs	r3, r1
    2546:	0002      	movs	r2, r0
    2548:	0029      	movs	r1, r5
    254a:	0020      	movs	r0, r4
    254c:	f000 fe0c 	bl	3168 <__aeabi_dadd>
    2550:	4b28      	ldr	r3, [pc, #160]	; (25f4 <STACK_SIZE+0x5f4>)
    2552:	4681      	mov	r9, r0
    2554:	1e0f      	subs	r7, r1, #0
    2556:	468a      	mov	sl, r1
    2558:	429f      	cmp	r7, r3
    255a:	dc00      	bgt.n	255e <STACK_SIZE+0x55e>
    255c:	e13c      	b.n	27d8 <STACK_SIZE+0x7d8>
    255e:	4b26      	ldr	r3, [pc, #152]	; (25f8 <STACK_SIZE+0x5f8>)
    2560:	18cb      	adds	r3, r1, r3
    2562:	4303      	orrs	r3, r0
    2564:	d000      	beq.n	2568 <STACK_SIZE+0x568>
    2566:	e1db      	b.n	2920 <STACK_SIZE+0x920>
    2568:	9804      	ldr	r0, [sp, #16]
    256a:	9905      	ldr	r1, [sp, #20]
    256c:	4a23      	ldr	r2, [pc, #140]	; (25fc <STACK_SIZE+0x5fc>)
    256e:	4b24      	ldr	r3, [pc, #144]	; (2600 <STACK_SIZE+0x600>)
    2570:	f000 fdfa 	bl	3168 <__aeabi_dadd>
    2574:	9a00      	ldr	r2, [sp, #0]
    2576:	9b01      	ldr	r3, [sp, #4]
    2578:	0004      	movs	r4, r0
    257a:	000d      	movs	r5, r1
    257c:	4648      	mov	r0, r9
    257e:	0039      	movs	r1, r7
    2580:	f001 ffbc 	bl	44fc <__aeabi_dsub>
    2584:	0002      	movs	r2, r0
    2586:	000b      	movs	r3, r1
    2588:	0020      	movs	r0, r4
    258a:	0029      	movs	r1, r5
    258c:	f000 fca4 	bl	2ed8 <__aeabi_dcmpgt>
    2590:	003e      	movs	r6, r7
    2592:	e037      	b.n	2604 <STACK_SIZE+0x604>
    2594:	000fffff 	.word	0x000fffff
    2598:	43400000 	.word	0x43400000
    259c:	fffffc01 	.word	0xfffffc01
    25a0:	3ff00000 	.word	0x3ff00000
    25a4:	0003988e 	.word	0x0003988e
    25a8:	000bb679 	.word	0x000bb679
    25ac:	fff00000 	.word	0xfff00000
    25b0:	4a454eef 	.word	0x4a454eef
    25b4:	3fca7e28 	.word	0x3fca7e28
    25b8:	93c9db65 	.word	0x93c9db65
    25bc:	3fcd864a 	.word	0x3fcd864a
    25c0:	a91d4101 	.word	0xa91d4101
    25c4:	3fd17460 	.word	0x3fd17460
    25c8:	518f264d 	.word	0x518f264d
    25cc:	3fd55555 	.word	0x3fd55555
    25d0:	db6fabff 	.word	0xdb6fabff
    25d4:	3fdb6db6 	.word	0x3fdb6db6
    25d8:	33333303 	.word	0x33333303
    25dc:	3fe33333 	.word	0x3fe33333
    25e0:	40080000 	.word	0x40080000
    25e4:	3feec709 	.word	0x3feec709
    25e8:	dc3a03fd 	.word	0xdc3a03fd
    25ec:	145b01f5 	.word	0x145b01f5
    25f0:	be3e2fe0 	.word	0xbe3e2fe0
    25f4:	408fffff 	.word	0x408fffff
    25f8:	bf700000 	.word	0xbf700000
    25fc:	652b82fe 	.word	0x652b82fe
    2600:	3c971547 	.word	0x3c971547
    2604:	2800      	cmp	r0, #0
    2606:	d000      	beq.n	260a <STACK_SIZE+0x60a>
    2608:	e18a      	b.n	2920 <STACK_SIZE+0x920>
    260a:	2280      	movs	r2, #128	; 0x80
    260c:	4be7      	ldr	r3, [pc, #924]	; (29ac <STACK_SIZE+0x9ac>)
    260e:	0352      	lsls	r2, r2, #13
    2610:	469c      	mov	ip, r3
    2612:	0013      	movs	r3, r2
    2614:	1536      	asrs	r6, r6, #20
    2616:	4466      	add	r6, ip
    2618:	4133      	asrs	r3, r6
    261a:	49e5      	ldr	r1, [pc, #916]	; (29b0 <STACK_SIZE+0x9b0>)
    261c:	19db      	adds	r3, r3, r7
    261e:	005e      	lsls	r6, r3, #1
    2620:	001c      	movs	r4, r3
    2622:	031b      	lsls	r3, r3, #12
    2624:	468c      	mov	ip, r1
    2626:	0b1b      	lsrs	r3, r3, #12
    2628:	4313      	orrs	r3, r2
    262a:	2214      	movs	r2, #20
    262c:	0d76      	lsrs	r6, r6, #21
    262e:	4fe1      	ldr	r7, [pc, #900]	; (29b4 <STACK_SIZE+0x9b4>)
    2630:	4466      	add	r6, ip
    2632:	4137      	asrs	r7, r6
    2634:	1b96      	subs	r6, r2, r6
    2636:	4133      	asrs	r3, r6
    2638:	4698      	mov	r8, r3
    263a:	4653      	mov	r3, sl
    263c:	43bc      	bics	r4, r7
    263e:	2000      	movs	r0, #0
    2640:	0021      	movs	r1, r4
    2642:	2b00      	cmp	r3, #0
    2644:	da00      	bge.n	2648 <STACK_SIZE+0x648>
    2646:	e1a9      	b.n	299c <STACK_SIZE+0x99c>
    2648:	0002      	movs	r2, r0
    264a:	000b      	movs	r3, r1
    264c:	9800      	ldr	r0, [sp, #0]
    264e:	9901      	ldr	r1, [sp, #4]
    2650:	f001 ff54 	bl	44fc <__aeabi_dsub>
    2654:	000b      	movs	r3, r1
    2656:	9000      	str	r0, [sp, #0]
    2658:	9101      	str	r1, [sp, #4]
    265a:	0002      	movs	r2, r0
    265c:	9804      	ldr	r0, [sp, #16]
    265e:	9905      	ldr	r1, [sp, #20]
    2660:	f000 fd82 	bl	3168 <__aeabi_dadd>
    2664:	4643      	mov	r3, r8
    2666:	051b      	lsls	r3, r3, #20
    2668:	4699      	mov	r9, r3
    266a:	2000      	movs	r0, #0
    266c:	2200      	movs	r2, #0
    266e:	4bd2      	ldr	r3, [pc, #840]	; (29b8 <STACK_SIZE+0x9b8>)
    2670:	0006      	movs	r6, r0
    2672:	000f      	movs	r7, r1
    2674:	f001 fcc8 	bl	4008 <__aeabi_dmul>
    2678:	9a00      	ldr	r2, [sp, #0]
    267a:	9b01      	ldr	r3, [sp, #4]
    267c:	9002      	str	r0, [sp, #8]
    267e:	9103      	str	r1, [sp, #12]
    2680:	0030      	movs	r0, r6
    2682:	0039      	movs	r1, r7
    2684:	f001 ff3a 	bl	44fc <__aeabi_dsub>
    2688:	0002      	movs	r2, r0
    268a:	000b      	movs	r3, r1
    268c:	9804      	ldr	r0, [sp, #16]
    268e:	9905      	ldr	r1, [sp, #20]
    2690:	f001 ff34 	bl	44fc <__aeabi_dsub>
    2694:	4ac9      	ldr	r2, [pc, #804]	; (29bc <STACK_SIZE+0x9bc>)
    2696:	4bca      	ldr	r3, [pc, #808]	; (29c0 <STACK_SIZE+0x9c0>)
    2698:	f001 fcb6 	bl	4008 <__aeabi_dmul>
    269c:	4ac9      	ldr	r2, [pc, #804]	; (29c4 <STACK_SIZE+0x9c4>)
    269e:	0004      	movs	r4, r0
    26a0:	000d      	movs	r5, r1
    26a2:	4bc9      	ldr	r3, [pc, #804]	; (29c8 <STACK_SIZE+0x9c8>)
    26a4:	0030      	movs	r0, r6
    26a6:	0039      	movs	r1, r7
    26a8:	f001 fcae 	bl	4008 <__aeabi_dmul>
    26ac:	0002      	movs	r2, r0
    26ae:	000b      	movs	r3, r1
    26b0:	0020      	movs	r0, r4
    26b2:	0029      	movs	r1, r5
    26b4:	f000 fd58 	bl	3168 <__aeabi_dadd>
    26b8:	0004      	movs	r4, r0
    26ba:	000d      	movs	r5, r1
    26bc:	0002      	movs	r2, r0
    26be:	000b      	movs	r3, r1
    26c0:	9802      	ldr	r0, [sp, #8]
    26c2:	9903      	ldr	r1, [sp, #12]
    26c4:	f000 fd50 	bl	3168 <__aeabi_dadd>
    26c8:	9a02      	ldr	r2, [sp, #8]
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	0006      	movs	r6, r0
    26ce:	000f      	movs	r7, r1
    26d0:	f001 ff14 	bl	44fc <__aeabi_dsub>
    26d4:	0002      	movs	r2, r0
    26d6:	000b      	movs	r3, r1
    26d8:	0020      	movs	r0, r4
    26da:	0029      	movs	r1, r5
    26dc:	f001 ff0e 	bl	44fc <__aeabi_dsub>
    26e0:	0032      	movs	r2, r6
    26e2:	9000      	str	r0, [sp, #0]
    26e4:	9101      	str	r1, [sp, #4]
    26e6:	003b      	movs	r3, r7
    26e8:	0030      	movs	r0, r6
    26ea:	0039      	movs	r1, r7
    26ec:	f001 fc8c 	bl	4008 <__aeabi_dmul>
    26f0:	0004      	movs	r4, r0
    26f2:	000d      	movs	r5, r1
    26f4:	4ab5      	ldr	r2, [pc, #724]	; (29cc <STACK_SIZE+0x9cc>)
    26f6:	4bb6      	ldr	r3, [pc, #728]	; (29d0 <STACK_SIZE+0x9d0>)
    26f8:	f001 fc86 	bl	4008 <__aeabi_dmul>
    26fc:	4ab5      	ldr	r2, [pc, #724]	; (29d4 <STACK_SIZE+0x9d4>)
    26fe:	4bb6      	ldr	r3, [pc, #728]	; (29d8 <STACK_SIZE+0x9d8>)
    2700:	f001 fefc 	bl	44fc <__aeabi_dsub>
    2704:	0022      	movs	r2, r4
    2706:	002b      	movs	r3, r5
    2708:	f001 fc7e 	bl	4008 <__aeabi_dmul>
    270c:	4ab3      	ldr	r2, [pc, #716]	; (29dc <STACK_SIZE+0x9dc>)
    270e:	4bb4      	ldr	r3, [pc, #720]	; (29e0 <STACK_SIZE+0x9e0>)
    2710:	f000 fd2a 	bl	3168 <__aeabi_dadd>
    2714:	0022      	movs	r2, r4
    2716:	002b      	movs	r3, r5
    2718:	f001 fc76 	bl	4008 <__aeabi_dmul>
    271c:	4ab1      	ldr	r2, [pc, #708]	; (29e4 <STACK_SIZE+0x9e4>)
    271e:	4bb2      	ldr	r3, [pc, #712]	; (29e8 <STACK_SIZE+0x9e8>)
    2720:	f001 feec 	bl	44fc <__aeabi_dsub>
    2724:	0022      	movs	r2, r4
    2726:	002b      	movs	r3, r5
    2728:	f001 fc6e 	bl	4008 <__aeabi_dmul>
    272c:	4aaf      	ldr	r2, [pc, #700]	; (29ec <STACK_SIZE+0x9ec>)
    272e:	4bb0      	ldr	r3, [pc, #704]	; (29f0 <STACK_SIZE+0x9f0>)
    2730:	f000 fd1a 	bl	3168 <__aeabi_dadd>
    2734:	0022      	movs	r2, r4
    2736:	002b      	movs	r3, r5
    2738:	f001 fc66 	bl	4008 <__aeabi_dmul>
    273c:	0002      	movs	r2, r0
    273e:	000b      	movs	r3, r1
    2740:	0030      	movs	r0, r6
    2742:	0039      	movs	r1, r7
    2744:	f001 feda 	bl	44fc <__aeabi_dsub>
    2748:	0004      	movs	r4, r0
    274a:	000d      	movs	r5, r1
    274c:	0002      	movs	r2, r0
    274e:	000b      	movs	r3, r1
    2750:	0030      	movs	r0, r6
    2752:	0039      	movs	r1, r7
    2754:	f001 fc58 	bl	4008 <__aeabi_dmul>
    2758:	2380      	movs	r3, #128	; 0x80
    275a:	9002      	str	r0, [sp, #8]
    275c:	9103      	str	r1, [sp, #12]
    275e:	2200      	movs	r2, #0
    2760:	05db      	lsls	r3, r3, #23
    2762:	0020      	movs	r0, r4
    2764:	0029      	movs	r1, r5
    2766:	f001 fec9 	bl	44fc <__aeabi_dsub>
    276a:	0002      	movs	r2, r0
    276c:	000b      	movs	r3, r1
    276e:	9802      	ldr	r0, [sp, #8]
    2770:	9903      	ldr	r1, [sp, #12]
    2772:	f001 f825 	bl	37c0 <__aeabi_ddiv>
    2776:	9a00      	ldr	r2, [sp, #0]
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	0004      	movs	r4, r0
    277c:	000d      	movs	r5, r1
    277e:	0030      	movs	r0, r6
    2780:	0039      	movs	r1, r7
    2782:	f001 fc41 	bl	4008 <__aeabi_dmul>
    2786:	9a00      	ldr	r2, [sp, #0]
    2788:	9b01      	ldr	r3, [sp, #4]
    278a:	f000 fced 	bl	3168 <__aeabi_dadd>
    278e:	0002      	movs	r2, r0
    2790:	000b      	movs	r3, r1
    2792:	0020      	movs	r0, r4
    2794:	0029      	movs	r1, r5
    2796:	f001 feb1 	bl	44fc <__aeabi_dsub>
    279a:	0032      	movs	r2, r6
    279c:	003b      	movs	r3, r7
    279e:	f001 fead 	bl	44fc <__aeabi_dsub>
    27a2:	0002      	movs	r2, r0
    27a4:	000b      	movs	r3, r1
    27a6:	2000      	movs	r0, #0
    27a8:	4992      	ldr	r1, [pc, #584]	; (29f4 <STACK_SIZE+0x9f4>)
    27aa:	f001 fea7 	bl	44fc <__aeabi_dsub>
    27ae:	464b      	mov	r3, r9
    27b0:	185b      	adds	r3, r3, r1
    27b2:	151a      	asrs	r2, r3, #20
    27b4:	2a00      	cmp	r2, #0
    27b6:	dc00      	bgt.n	27ba <STACK_SIZE+0x7ba>
    27b8:	e0f4      	b.n	29a4 <STACK_SIZE+0x9a4>
    27ba:	0019      	movs	r1, r3
    27bc:	9a06      	ldr	r2, [sp, #24]
    27be:	9b07      	ldr	r3, [sp, #28]
    27c0:	f001 fc22 	bl	4008 <__aeabi_dmul>
    27c4:	0006      	movs	r6, r0
    27c6:	e452      	b.n	206e <STACK_SIZE+0x6e>
    27c8:	0032      	movs	r2, r6
    27ca:	0030      	movs	r0, r6
    27cc:	002b      	movs	r3, r5
    27ce:	0029      	movs	r1, r5
    27d0:	f001 fc1a 	bl	4008 <__aeabi_dmul>
    27d4:	0006      	movs	r6, r0
    27d6:	e44a      	b.n	206e <STACK_SIZE+0x6e>
    27d8:	4b87      	ldr	r3, [pc, #540]	; (29f8 <STACK_SIZE+0x9f8>)
    27da:	004e      	lsls	r6, r1, #1
    27dc:	0876      	lsrs	r6, r6, #1
    27de:	429e      	cmp	r6, r3
    27e0:	dc00      	bgt.n	27e4 <STACK_SIZE+0x7e4>
    27e2:	e0bf      	b.n	2964 <STACK_SIZE+0x964>
    27e4:	4b85      	ldr	r3, [pc, #532]	; (29fc <STACK_SIZE+0x9fc>)
    27e6:	18cb      	adds	r3, r1, r3
    27e8:	4303      	orrs	r3, r0
    27ea:	d10c      	bne.n	2806 <STACK_SIZE+0x806>
    27ec:	9a00      	ldr	r2, [sp, #0]
    27ee:	9b01      	ldr	r3, [sp, #4]
    27f0:	f001 fe84 	bl	44fc <__aeabi_dsub>
    27f4:	0002      	movs	r2, r0
    27f6:	000b      	movs	r3, r1
    27f8:	9804      	ldr	r0, [sp, #16]
    27fa:	9905      	ldr	r1, [sp, #20]
    27fc:	f000 fb62 	bl	2ec4 <__aeabi_dcmple>
    2800:	2800      	cmp	r0, #0
    2802:	d100      	bne.n	2806 <STACK_SIZE+0x806>
    2804:	e701      	b.n	260a <STACK_SIZE+0x60a>
    2806:	9806      	ldr	r0, [sp, #24]
    2808:	9907      	ldr	r1, [sp, #28]
    280a:	4a7d      	ldr	r2, [pc, #500]	; (2a00 <STACK_SIZE+0xa00>)
    280c:	4b7d      	ldr	r3, [pc, #500]	; (2a04 <STACK_SIZE+0xa04>)
    280e:	f001 fbfb 	bl	4008 <__aeabi_dmul>
    2812:	4a7b      	ldr	r2, [pc, #492]	; (2a00 <STACK_SIZE+0xa00>)
    2814:	4b7b      	ldr	r3, [pc, #492]	; (2a04 <STACK_SIZE+0xa04>)
    2816:	f001 fbf7 	bl	4008 <__aeabi_dmul>
    281a:	0006      	movs	r6, r0
    281c:	f7ff fc27 	bl	206e <STACK_SIZE+0x6e>
    2820:	2300      	movs	r3, #0
    2822:	4c79      	ldr	r4, [pc, #484]	; (2a08 <STACK_SIZE+0xa08>)
    2824:	9306      	str	r3, [sp, #24]
    2826:	9407      	str	r4, [sp, #28]
    2828:	e666      	b.n	24f8 <STACK_SIZE+0x4f8>
    282a:	4653      	mov	r3, sl
    282c:	2b00      	cmp	r3, #0
    282e:	db00      	blt.n	2832 <STACK_SIZE+0x832>
    2830:	e4c3      	b.n	21ba <STACK_SIZE+0x1ba>
    2832:	9b00      	ldr	r3, [sp, #0]
    2834:	9c01      	ldr	r4, [sp, #4]
    2836:	2280      	movs	r2, #128	; 0x80
    2838:	0612      	lsls	r2, r2, #24
    283a:	001e      	movs	r6, r3
    283c:	4694      	mov	ip, r2
    283e:	0023      	movs	r3, r4
    2840:	4463      	add	r3, ip
    2842:	0019      	movs	r1, r3
    2844:	f7ff fc13 	bl	206e <STACK_SIZE+0x6e>
    2848:	0002      	movs	r2, r0
    284a:	000b      	movs	r3, r1
    284c:	2000      	movs	r0, #0
    284e:	4969      	ldr	r1, [pc, #420]	; (29f4 <STACK_SIZE+0x9f4>)
    2850:	f000 ffb6 	bl	37c0 <__aeabi_ddiv>
    2854:	e44a      	b.n	20ec <STACK_SIZE+0xec>
    2856:	4b6d      	ldr	r3, [pc, #436]	; (2a0c <STACK_SIZE+0xa0c>)
    2858:	429c      	cmp	r4, r3
    285a:	dc00      	bgt.n	285e <STACK_SIZE+0x85e>
    285c:	e4aa      	b.n	21b4 <STACK_SIZE+0x1b4>
    285e:	4b65      	ldr	r3, [pc, #404]	; (29f4 <STACK_SIZE+0x9f4>)
    2860:	429c      	cmp	r4, r3
    2862:	dd01      	ble.n	2868 <STACK_SIZE+0x868>
    2864:	f7ff fc2c 	bl	20c0 <STACK_SIZE+0xc0>
    2868:	2200      	movs	r2, #0
    286a:	4b62      	ldr	r3, [pc, #392]	; (29f4 <STACK_SIZE+0x9f4>)
    286c:	f001 fe46 	bl	44fc <__aeabi_dsub>
    2870:	22c0      	movs	r2, #192	; 0xc0
    2872:	4b67      	ldr	r3, [pc, #412]	; (2a10 <STACK_SIZE+0xa10>)
    2874:	05d2      	lsls	r2, r2, #23
    2876:	0004      	movs	r4, r0
    2878:	000d      	movs	r5, r1
    287a:	f001 fbc5 	bl	4008 <__aeabi_dmul>
    287e:	4a65      	ldr	r2, [pc, #404]	; (2a14 <STACK_SIZE+0xa14>)
    2880:	0006      	movs	r6, r0
    2882:	000f      	movs	r7, r1
    2884:	4b64      	ldr	r3, [pc, #400]	; (2a18 <STACK_SIZE+0xa18>)
    2886:	0020      	movs	r0, r4
    2888:	0029      	movs	r1, r5
    288a:	f001 fbbd 	bl	4008 <__aeabi_dmul>
    288e:	2200      	movs	r2, #0
    2890:	9002      	str	r0, [sp, #8]
    2892:	9103      	str	r1, [sp, #12]
    2894:	4b61      	ldr	r3, [pc, #388]	; (2a1c <STACK_SIZE+0xa1c>)
    2896:	0020      	movs	r0, r4
    2898:	0029      	movs	r1, r5
    289a:	f001 fbb5 	bl	4008 <__aeabi_dmul>
    289e:	0002      	movs	r2, r0
    28a0:	000b      	movs	r3, r1
    28a2:	485f      	ldr	r0, [pc, #380]	; (2a20 <STACK_SIZE+0xa20>)
    28a4:	495f      	ldr	r1, [pc, #380]	; (2a24 <STACK_SIZE+0xa24>)
    28a6:	f001 fe29 	bl	44fc <__aeabi_dsub>
    28aa:	0022      	movs	r2, r4
    28ac:	002b      	movs	r3, r5
    28ae:	f001 fbab 	bl	4008 <__aeabi_dmul>
    28b2:	0002      	movs	r2, r0
    28b4:	000b      	movs	r3, r1
    28b6:	2000      	movs	r0, #0
    28b8:	495b      	ldr	r1, [pc, #364]	; (2a28 <STACK_SIZE+0xa28>)
    28ba:	f001 fe1f 	bl	44fc <__aeabi_dsub>
    28be:	0022      	movs	r2, r4
    28c0:	9004      	str	r0, [sp, #16]
    28c2:	9105      	str	r1, [sp, #20]
    28c4:	002b      	movs	r3, r5
    28c6:	0020      	movs	r0, r4
    28c8:	0029      	movs	r1, r5
    28ca:	f001 fb9d 	bl	4008 <__aeabi_dmul>
    28ce:	0002      	movs	r2, r0
    28d0:	000b      	movs	r3, r1
    28d2:	9804      	ldr	r0, [sp, #16]
    28d4:	9905      	ldr	r1, [sp, #20]
    28d6:	f001 fb97 	bl	4008 <__aeabi_dmul>
    28da:	4a54      	ldr	r2, [pc, #336]	; (2a2c <STACK_SIZE+0xa2c>)
    28dc:	4b4c      	ldr	r3, [pc, #304]	; (2a10 <STACK_SIZE+0xa10>)
    28de:	f001 fb93 	bl	4008 <__aeabi_dmul>
    28e2:	0002      	movs	r2, r0
    28e4:	000b      	movs	r3, r1
    28e6:	9802      	ldr	r0, [sp, #8]
    28e8:	9903      	ldr	r1, [sp, #12]
    28ea:	f001 fe07 	bl	44fc <__aeabi_dsub>
    28ee:	0002      	movs	r2, r0
    28f0:	000b      	movs	r3, r1
    28f2:	0004      	movs	r4, r0
    28f4:	000d      	movs	r5, r1
    28f6:	0030      	movs	r0, r6
    28f8:	0039      	movs	r1, r7
    28fa:	f000 fc35 	bl	3168 <__aeabi_dadd>
    28fe:	2200      	movs	r2, #0
    2900:	0010      	movs	r0, r2
    2902:	003b      	movs	r3, r7
    2904:	0032      	movs	r2, r6
    2906:	9002      	str	r0, [sp, #8]
    2908:	9103      	str	r1, [sp, #12]
    290a:	f001 fdf7 	bl	44fc <__aeabi_dsub>
    290e:	0002      	movs	r2, r0
    2910:	000b      	movs	r3, r1
    2912:	0020      	movs	r0, r4
    2914:	0029      	movs	r1, r5
    2916:	f001 fdf1 	bl	44fc <__aeabi_dsub>
    291a:	9004      	str	r0, [sp, #16]
    291c:	9105      	str	r1, [sp, #20]
    291e:	e5e1      	b.n	24e4 <STACK_SIZE+0x4e4>
    2920:	4a43      	ldr	r2, [pc, #268]	; (2a30 <STACK_SIZE+0xa30>)
    2922:	4b44      	ldr	r3, [pc, #272]	; (2a34 <STACK_SIZE+0xa34>)
    2924:	9806      	ldr	r0, [sp, #24]
    2926:	9907      	ldr	r1, [sp, #28]
    2928:	f001 fb6e 	bl	4008 <__aeabi_dmul>
    292c:	4a40      	ldr	r2, [pc, #256]	; (2a30 <STACK_SIZE+0xa30>)
    292e:	4b41      	ldr	r3, [pc, #260]	; (2a34 <STACK_SIZE+0xa34>)
    2930:	f001 fb6a 	bl	4008 <__aeabi_dmul>
    2934:	0006      	movs	r6, r0
    2936:	f7ff fb9a 	bl	206e <STACK_SIZE+0x6e>
    293a:	2a00      	cmp	r2, #0
    293c:	d001      	beq.n	2942 <STACK_SIZE+0x942>
    293e:	f7ff fba5 	bl	208c <STACK_SIZE+0x8c>
    2942:	3214      	adds	r2, #20
    2944:	1ad3      	subs	r3, r2, r3
    2946:	003a      	movs	r2, r7
    2948:	411a      	asrs	r2, r3
    294a:	0011      	movs	r1, r2
    294c:	4099      	lsls	r1, r3
    294e:	428f      	cmp	r7, r1
    2950:	d001      	beq.n	2956 <STACK_SIZE+0x956>
    2952:	f7ff fb6f 	bl	2034 <STACK_SIZE+0x34>
    2956:	2301      	movs	r3, #1
    2958:	4013      	ands	r3, r2
    295a:	2202      	movs	r2, #2
    295c:	1ad3      	subs	r3, r2, r3
    295e:	469b      	mov	fp, r3
    2960:	f7ff fb68 	bl	2034 <STACK_SIZE+0x34>
    2964:	4b30      	ldr	r3, [pc, #192]	; (2a28 <STACK_SIZE+0xa28>)
    2966:	429e      	cmp	r6, r3
    2968:	dd00      	ble.n	296c <STACK_SIZE+0x96c>
    296a:	e64e      	b.n	260a <STACK_SIZE+0x60a>
    296c:	2300      	movs	r3, #0
    296e:	4699      	mov	r9, r3
    2970:	4698      	mov	r8, r3
    2972:	e67a      	b.n	266a <STACK_SIZE+0x66a>
    2974:	0002      	movs	r2, r0
    2976:	000b      	movs	r3, r1
    2978:	f7ff fc14 	bl	21a4 <STACK_SIZE+0x1a4>
    297c:	2380      	movs	r3, #128	; 0x80
    297e:	4c2e      	ldr	r4, [pc, #184]	; (2a38 <STACK_SIZE+0xa38>)
    2980:	05db      	lsls	r3, r3, #23
    2982:	9308      	str	r3, [sp, #32]
    2984:	9409      	str	r4, [sp, #36]	; 0x24
    2986:	4b2d      	ldr	r3, [pc, #180]	; (2a3c <STACK_SIZE+0xa3c>)
    2988:	4c2d      	ldr	r4, [pc, #180]	; (2a40 <STACK_SIZE+0xa40>)
    298a:	2200      	movs	r2, #0
    298c:	930c      	str	r3, [sp, #48]	; 0x30
    298e:	940d      	str	r4, [sp, #52]	; 0x34
    2990:	2480      	movs	r4, #128	; 0x80
    2992:	4b2c      	ldr	r3, [pc, #176]	; (2a44 <STACK_SIZE+0xa44>)
    2994:	02e4      	lsls	r4, r4, #11
    2996:	9206      	str	r2, [sp, #24]
    2998:	9307      	str	r3, [sp, #28]
    299a:	e456      	b.n	224a <STACK_SIZE+0x24a>
    299c:	4643      	mov	r3, r8
    299e:	425b      	negs	r3, r3
    29a0:	4698      	mov	r8, r3
    29a2:	e651      	b.n	2648 <STACK_SIZE+0x648>
    29a4:	4642      	mov	r2, r8
    29a6:	f000 f9fd 	bl	2da4 <scalbn>
    29aa:	e707      	b.n	27bc <STACK_SIZE+0x7bc>
    29ac:	fffffc02 	.word	0xfffffc02
    29b0:	fffffc01 	.word	0xfffffc01
    29b4:	000fffff 	.word	0x000fffff
    29b8:	3fe62e43 	.word	0x3fe62e43
    29bc:	fefa39ef 	.word	0xfefa39ef
    29c0:	3fe62e42 	.word	0x3fe62e42
    29c4:	0ca86c39 	.word	0x0ca86c39
    29c8:	be205c61 	.word	0xbe205c61
    29cc:	72bea4d0 	.word	0x72bea4d0
    29d0:	3e663769 	.word	0x3e663769
    29d4:	c5d26bf1 	.word	0xc5d26bf1
    29d8:	3ebbbd41 	.word	0x3ebbbd41
    29dc:	af25de2c 	.word	0xaf25de2c
    29e0:	3f11566a 	.word	0x3f11566a
    29e4:	16bebd93 	.word	0x16bebd93
    29e8:	3f66c16c 	.word	0x3f66c16c
    29ec:	5555553e 	.word	0x5555553e
    29f0:	3fc55555 	.word	0x3fc55555
    29f4:	3ff00000 	.word	0x3ff00000
    29f8:	4090cbff 	.word	0x4090cbff
    29fc:	3f6f3400 	.word	0x3f6f3400
    2a00:	c2f8f359 	.word	0xc2f8f359
    2a04:	01a56e1f 	.word	0x01a56e1f
    2a08:	bff00000 	.word	0xbff00000
    2a0c:	3feffffe 	.word	0x3feffffe
    2a10:	3ff71547 	.word	0x3ff71547
    2a14:	f85ddf44 	.word	0xf85ddf44
    2a18:	3e54ae0b 	.word	0x3e54ae0b
    2a1c:	3fd00000 	.word	0x3fd00000
    2a20:	55555555 	.word	0x55555555
    2a24:	3fd55555 	.word	0x3fd55555
    2a28:	3fe00000 	.word	0x3fe00000
    2a2c:	652b82fe 	.word	0x652b82fe
    2a30:	8800759c 	.word	0x8800759c
    2a34:	7e37e43c 	.word	0x7e37e43c
    2a38:	3fe2b803 	.word	0x3fe2b803
    2a3c:	43cfd006 	.word	0x43cfd006
    2a40:	3e4cfdeb 	.word	0x3e4cfdeb
    2a44:	3ff80000 	.word	0x3ff80000

00002a48 <__ieee754_sqrt>:
    2a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4a:	4656      	mov	r6, sl
    2a4c:	464d      	mov	r5, r9
    2a4e:	4644      	mov	r4, r8
    2a50:	465f      	mov	r7, fp
    2a52:	4b75      	ldr	r3, [pc, #468]	; (2c28 <__ieee754_sqrt+0x1e0>)
    2a54:	b4f0      	push	{r4, r5, r6, r7}
    2a56:	000a      	movs	r2, r1
    2a58:	000d      	movs	r5, r1
    2a5a:	0019      	movs	r1, r3
    2a5c:	b083      	sub	sp, #12
    2a5e:	0006      	movs	r6, r0
    2a60:	0004      	movs	r4, r0
    2a62:	4029      	ands	r1, r5
    2a64:	4299      	cmp	r1, r3
    2a66:	d100      	bne.n	2a6a <__ieee754_sqrt+0x22>
    2a68:	e0ba      	b.n	2be0 <__ieee754_sqrt+0x198>
    2a6a:	2d00      	cmp	r5, #0
    2a6c:	dc00      	bgt.n	2a70 <__ieee754_sqrt+0x28>
    2a6e:	e094      	b.n	2b9a <__ieee754_sqrt+0x152>
    2a70:	152d      	asrs	r5, r5, #20
    2a72:	d100      	bne.n	2a76 <__ieee754_sqrt+0x2e>
    2a74:	e0a3      	b.n	2bbe <__ieee754_sqrt+0x176>
    2a76:	4b6d      	ldr	r3, [pc, #436]	; (2c2c <__ieee754_sqrt+0x1e4>)
    2a78:	0312      	lsls	r2, r2, #12
    2a7a:	469c      	mov	ip, r3
    2a7c:	2380      	movs	r3, #128	; 0x80
    2a7e:	0b12      	lsrs	r2, r2, #12
    2a80:	035b      	lsls	r3, r3, #13
    2a82:	4465      	add	r5, ip
    2a84:	431a      	orrs	r2, r3
    2a86:	07eb      	lsls	r3, r5, #31
    2a88:	d500      	bpl.n	2a8c <__ieee754_sqrt+0x44>
    2a8a:	e081      	b.n	2b90 <__ieee754_sqrt+0x148>
    2a8c:	106b      	asrs	r3, r5, #1
    2a8e:	4698      	mov	r8, r3
    2a90:	0fe3      	lsrs	r3, r4, #31
    2a92:	189b      	adds	r3, r3, r2
    2a94:	189b      	adds	r3, r3, r2
    2a96:	2280      	movs	r2, #128	; 0x80
    2a98:	2116      	movs	r1, #22
    2a9a:	2600      	movs	r6, #0
    2a9c:	2700      	movs	r7, #0
    2a9e:	0064      	lsls	r4, r4, #1
    2aa0:	0392      	lsls	r2, r2, #14
    2aa2:	18b8      	adds	r0, r7, r2
    2aa4:	4298      	cmp	r0, r3
    2aa6:	dc02      	bgt.n	2aae <__ieee754_sqrt+0x66>
    2aa8:	1887      	adds	r7, r0, r2
    2aaa:	1a1b      	subs	r3, r3, r0
    2aac:	18b6      	adds	r6, r6, r2
    2aae:	0fe0      	lsrs	r0, r4, #31
    2ab0:	005b      	lsls	r3, r3, #1
    2ab2:	3901      	subs	r1, #1
    2ab4:	181b      	adds	r3, r3, r0
    2ab6:	0064      	lsls	r4, r4, #1
    2ab8:	0852      	lsrs	r2, r2, #1
    2aba:	2900      	cmp	r1, #0
    2abc:	d1f1      	bne.n	2aa2 <__ieee754_sqrt+0x5a>
    2abe:	2200      	movs	r2, #0
    2ac0:	9201      	str	r2, [sp, #4]
    2ac2:	4694      	mov	ip, r2
    2ac4:	2280      	movs	r2, #128	; 0x80
    2ac6:	0612      	lsls	r2, r2, #24
    2ac8:	2020      	movs	r0, #32
    2aca:	4691      	mov	r9, r2
    2acc:	e009      	b.n	2ae2 <__ieee754_sqrt+0x9a>
    2ace:	429f      	cmp	r7, r3
    2ad0:	d041      	beq.n	2b56 <__ieee754_sqrt+0x10e>
    2ad2:	0fe1      	lsrs	r1, r4, #31
    2ad4:	18c9      	adds	r1, r1, r3
    2ad6:	3801      	subs	r0, #1
    2ad8:	18cb      	adds	r3, r1, r3
    2ada:	0064      	lsls	r4, r4, #1
    2adc:	0852      	lsrs	r2, r2, #1
    2ade:	2800      	cmp	r0, #0
    2ae0:	d01e      	beq.n	2b20 <__ieee754_sqrt+0xd8>
    2ae2:	4661      	mov	r1, ip
    2ae4:	1851      	adds	r1, r2, r1
    2ae6:	429f      	cmp	r7, r3
    2ae8:	daf1      	bge.n	2ace <__ieee754_sqrt+0x86>
    2aea:	188d      	adds	r5, r1, r2
    2aec:	46ac      	mov	ip, r5
    2aee:	0fcd      	lsrs	r5, r1, #31
    2af0:	07ed      	lsls	r5, r5, #31
    2af2:	46ba      	mov	sl, r7
    2af4:	454d      	cmp	r5, r9
    2af6:	d039      	beq.n	2b6c <__ieee754_sqrt+0x124>
    2af8:	1bdb      	subs	r3, r3, r7
    2afa:	428c      	cmp	r4, r1
    2afc:	41bf      	sbcs	r7, r7
    2afe:	427f      	negs	r7, r7
    2b00:	1bdb      	subs	r3, r3, r7
    2b02:	1a64      	subs	r4, r4, r1
    2b04:	9901      	ldr	r1, [sp, #4]
    2b06:	3801      	subs	r0, #1
    2b08:	468b      	mov	fp, r1
    2b0a:	4493      	add	fp, r2
    2b0c:	4659      	mov	r1, fp
    2b0e:	9101      	str	r1, [sp, #4]
    2b10:	0fe1      	lsrs	r1, r4, #31
    2b12:	18c9      	adds	r1, r1, r3
    2b14:	4657      	mov	r7, sl
    2b16:	18cb      	adds	r3, r1, r3
    2b18:	0064      	lsls	r4, r4, #1
    2b1a:	0852      	lsrs	r2, r2, #1
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d1e0      	bne.n	2ae2 <__ieee754_sqrt+0x9a>
    2b20:	4323      	orrs	r3, r4
    2b22:	d12b      	bne.n	2b7c <__ieee754_sqrt+0x134>
    2b24:	9b01      	ldr	r3, [sp, #4]
    2b26:	085b      	lsrs	r3, r3, #1
    2b28:	4941      	ldr	r1, [pc, #260]	; (2c30 <__ieee754_sqrt+0x1e8>)
    2b2a:	1072      	asrs	r2, r6, #1
    2b2c:	468c      	mov	ip, r1
    2b2e:	4462      	add	r2, ip
    2b30:	07f1      	lsls	r1, r6, #31
    2b32:	d502      	bpl.n	2b3a <__ieee754_sqrt+0xf2>
    2b34:	2180      	movs	r1, #128	; 0x80
    2b36:	0609      	lsls	r1, r1, #24
    2b38:	430b      	orrs	r3, r1
    2b3a:	4641      	mov	r1, r8
    2b3c:	0509      	lsls	r1, r1, #20
    2b3e:	188d      	adds	r5, r1, r2
    2b40:	001e      	movs	r6, r3
    2b42:	002f      	movs	r7, r5
    2b44:	0030      	movs	r0, r6
    2b46:	0039      	movs	r1, r7
    2b48:	b003      	add	sp, #12
    2b4a:	bc3c      	pop	{r2, r3, r4, r5}
    2b4c:	4690      	mov	r8, r2
    2b4e:	4699      	mov	r9, r3
    2b50:	46a2      	mov	sl, r4
    2b52:	46ab      	mov	fp, r5
    2b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b56:	42a1      	cmp	r1, r4
    2b58:	d80e      	bhi.n	2b78 <__ieee754_sqrt+0x130>
    2b5a:	188d      	adds	r5, r1, r2
    2b5c:	46ac      	mov	ip, r5
    2b5e:	0fcd      	lsrs	r5, r1, #31
    2b60:	07ed      	lsls	r5, r5, #31
    2b62:	454d      	cmp	r5, r9
    2b64:	d048      	beq.n	2bf8 <__ieee754_sqrt+0x1b0>
    2b66:	469a      	mov	sl, r3
    2b68:	2300      	movs	r3, #0
    2b6a:	e7ca      	b.n	2b02 <__ieee754_sqrt+0xba>
    2b6c:	4665      	mov	r5, ip
    2b6e:	2d00      	cmp	r5, #0
    2b70:	dbc2      	blt.n	2af8 <__ieee754_sqrt+0xb0>
    2b72:	1c7d      	adds	r5, r7, #1
    2b74:	46aa      	mov	sl, r5
    2b76:	e7bf      	b.n	2af8 <__ieee754_sqrt+0xb0>
    2b78:	003b      	movs	r3, r7
    2b7a:	e7aa      	b.n	2ad2 <__ieee754_sqrt+0x8a>
    2b7c:	9b01      	ldr	r3, [sp, #4]
    2b7e:	3301      	adds	r3, #1
    2b80:	d03e      	beq.n	2c00 <__ieee754_sqrt+0x1b8>
    2b82:	9a01      	ldr	r2, [sp, #4]
    2b84:	2301      	movs	r3, #1
    2b86:	4694      	mov	ip, r2
    2b88:	4013      	ands	r3, r2
    2b8a:	4463      	add	r3, ip
    2b8c:	085b      	lsrs	r3, r3, #1
    2b8e:	e7cb      	b.n	2b28 <__ieee754_sqrt+0xe0>
    2b90:	0fe3      	lsrs	r3, r4, #31
    2b92:	0052      	lsls	r2, r2, #1
    2b94:	189a      	adds	r2, r3, r2
    2b96:	0064      	lsls	r4, r4, #1
    2b98:	e778      	b.n	2a8c <__ieee754_sqrt+0x44>
    2b9a:	006b      	lsls	r3, r5, #1
    2b9c:	085b      	lsrs	r3, r3, #1
    2b9e:	4303      	orrs	r3, r0
    2ba0:	002f      	movs	r7, r5
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d0ce      	beq.n	2b44 <__ieee754_sqrt+0xfc>
    2ba6:	2500      	movs	r5, #0
    2ba8:	2a00      	cmp	r2, #0
    2baa:	d131      	bne.n	2c10 <__ieee754_sqrt+0x1c8>
    2bac:	0ae2      	lsrs	r2, r4, #11
    2bae:	3d15      	subs	r5, #21
    2bb0:	0564      	lsls	r4, r4, #21
    2bb2:	2a00      	cmp	r2, #0
    2bb4:	d0fa      	beq.n	2bac <__ieee754_sqrt+0x164>
    2bb6:	2380      	movs	r3, #128	; 0x80
    2bb8:	035b      	lsls	r3, r3, #13
    2bba:	421a      	tst	r2, r3
    2bbc:	d123      	bne.n	2c06 <__ieee754_sqrt+0x1be>
    2bbe:	2080      	movs	r0, #128	; 0x80
    2bc0:	2300      	movs	r3, #0
    2bc2:	0340      	lsls	r0, r0, #13
    2bc4:	e000      	b.n	2bc8 <__ieee754_sqrt+0x180>
    2bc6:	000b      	movs	r3, r1
    2bc8:	0052      	lsls	r2, r2, #1
    2bca:	1c59      	adds	r1, r3, #1
    2bcc:	4202      	tst	r2, r0
    2bce:	d0fa      	beq.n	2bc6 <__ieee754_sqrt+0x17e>
    2bd0:	2020      	movs	r0, #32
    2bd2:	1a40      	subs	r0, r0, r1
    2bd4:	1aed      	subs	r5, r5, r3
    2bd6:	0023      	movs	r3, r4
    2bd8:	40c3      	lsrs	r3, r0
    2bda:	408c      	lsls	r4, r1
    2bdc:	431a      	orrs	r2, r3
    2bde:	e74a      	b.n	2a76 <__ieee754_sqrt+0x2e>
    2be0:	0002      	movs	r2, r0
    2be2:	002b      	movs	r3, r5
    2be4:	0029      	movs	r1, r5
    2be6:	f001 fa0f 	bl	4008 <__aeabi_dmul>
    2bea:	0032      	movs	r2, r6
    2bec:	002b      	movs	r3, r5
    2bee:	f000 fabb 	bl	3168 <__aeabi_dadd>
    2bf2:	0006      	movs	r6, r0
    2bf4:	000f      	movs	r7, r1
    2bf6:	e7a5      	b.n	2b44 <__ieee754_sqrt+0xfc>
    2bf8:	4665      	mov	r5, ip
    2bfa:	2d00      	cmp	r5, #0
    2bfc:	dab9      	bge.n	2b72 <__ieee754_sqrt+0x12a>
    2bfe:	e7b2      	b.n	2b66 <__ieee754_sqrt+0x11e>
    2c00:	3601      	adds	r6, #1
    2c02:	2300      	movs	r3, #0
    2c04:	e790      	b.n	2b28 <__ieee754_sqrt+0xe0>
    2c06:	2301      	movs	r3, #1
    2c08:	2020      	movs	r0, #32
    2c0a:	425b      	negs	r3, r3
    2c0c:	2100      	movs	r1, #0
    2c0e:	e7e1      	b.n	2bd4 <__ieee754_sqrt+0x18c>
    2c10:	003b      	movs	r3, r7
    2c12:	0002      	movs	r2, r0
    2c14:	0039      	movs	r1, r7
    2c16:	f001 fc71 	bl	44fc <__aeabi_dsub>
    2c1a:	0002      	movs	r2, r0
    2c1c:	000b      	movs	r3, r1
    2c1e:	f000 fdcf 	bl	37c0 <__aeabi_ddiv>
    2c22:	0006      	movs	r6, r0
    2c24:	000f      	movs	r7, r1
    2c26:	e78d      	b.n	2b44 <__ieee754_sqrt+0xfc>
    2c28:	7ff00000 	.word	0x7ff00000
    2c2c:	fffffc01 	.word	0xfffffc01
    2c30:	3fe00000 	.word	0x3fe00000

00002c34 <fabs>:
    2c34:	0049      	lsls	r1, r1, #1
    2c36:	084b      	lsrs	r3, r1, #1
    2c38:	0019      	movs	r1, r3
    2c3a:	4770      	bx	lr

00002c3c <finite>:
    2c3c:	4b03      	ldr	r3, [pc, #12]	; (2c4c <finite+0x10>)
    2c3e:	0048      	lsls	r0, r1, #1
    2c40:	469c      	mov	ip, r3
    2c42:	0840      	lsrs	r0, r0, #1
    2c44:	4460      	add	r0, ip
    2c46:	0fc0      	lsrs	r0, r0, #31
    2c48:	4770      	bx	lr
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	80100000 	.word	0x80100000

00002c50 <matherr>:
    2c50:	2000      	movs	r0, #0
    2c52:	4770      	bx	lr

00002c54 <nan>:
    2c54:	2000      	movs	r0, #0
    2c56:	4901      	ldr	r1, [pc, #4]	; (2c5c <nan+0x8>)
    2c58:	4770      	bx	lr
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	7ff80000 	.word	0x7ff80000

00002c60 <rint>:
    2c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c62:	4647      	mov	r7, r8
    2c64:	b480      	push	{r7}
    2c66:	0fcb      	lsrs	r3, r1, #31
    2c68:	4698      	mov	r8, r3
    2c6a:	4c4a      	ldr	r4, [pc, #296]	; (2d94 <rint+0x134>)
    2c6c:	004b      	lsls	r3, r1, #1
    2c6e:	0d5b      	lsrs	r3, r3, #21
    2c70:	191e      	adds	r6, r3, r4
    2c72:	b082      	sub	sp, #8
    2c74:	0007      	movs	r7, r0
    2c76:	000a      	movs	r2, r1
    2c78:	2e13      	cmp	r6, #19
    2c7a:	dc35      	bgt.n	2ce8 <rint+0x88>
    2c7c:	2e00      	cmp	r6, #0
    2c7e:	db57      	blt.n	2d30 <rint+0xd0>
    2c80:	4b45      	ldr	r3, [pc, #276]	; (2d98 <rint+0x138>)
    2c82:	0004      	movs	r4, r0
    2c84:	4133      	asrs	r3, r6
    2c86:	001f      	movs	r7, r3
    2c88:	400f      	ands	r7, r1
    2c8a:	4307      	orrs	r7, r0
    2c8c:	000d      	movs	r5, r1
    2c8e:	2f00      	cmp	r7, #0
    2c90:	d024      	beq.n	2cdc <rint+0x7c>
    2c92:	085b      	lsrs	r3, r3, #1
    2c94:	001c      	movs	r4, r3
    2c96:	400c      	ands	r4, r1
    2c98:	4320      	orrs	r0, r4
    2c9a:	2700      	movs	r7, #0
    2c9c:	2800      	cmp	r0, #0
    2c9e:	d007      	beq.n	2cb0 <rint+0x50>
    2ca0:	2e13      	cmp	r6, #19
    2ca2:	d100      	bne.n	2ca6 <rint+0x46>
    2ca4:	e072      	b.n	2d8c <rint+0x12c>
    2ca6:	2280      	movs	r2, #128	; 0x80
    2ca8:	02d2      	lsls	r2, r2, #11
    2caa:	4132      	asrs	r2, r6
    2cac:	4399      	bics	r1, r3
    2cae:	430a      	orrs	r2, r1
    2cb0:	4643      	mov	r3, r8
    2cb2:	00de      	lsls	r6, r3, #3
    2cb4:	4b39      	ldr	r3, [pc, #228]	; (2d9c <rint+0x13c>)
    2cb6:	0011      	movs	r1, r2
    2cb8:	199e      	adds	r6, r3, r6
    2cba:	6834      	ldr	r4, [r6, #0]
    2cbc:	6875      	ldr	r5, [r6, #4]
    2cbe:	0038      	movs	r0, r7
    2cc0:	0022      	movs	r2, r4
    2cc2:	002b      	movs	r3, r5
    2cc4:	f000 fa50 	bl	3168 <__aeabi_dadd>
    2cc8:	9000      	str	r0, [sp, #0]
    2cca:	9101      	str	r1, [sp, #4]
    2ccc:	9800      	ldr	r0, [sp, #0]
    2cce:	9901      	ldr	r1, [sp, #4]
    2cd0:	0022      	movs	r2, r4
    2cd2:	002b      	movs	r3, r5
    2cd4:	f001 fc12 	bl	44fc <__aeabi_dsub>
    2cd8:	0004      	movs	r4, r0
    2cda:	000d      	movs	r5, r1
    2cdc:	0020      	movs	r0, r4
    2cde:	0029      	movs	r1, r5
    2ce0:	b002      	add	sp, #8
    2ce2:	bc04      	pop	{r2}
    2ce4:	4690      	mov	r8, r2
    2ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ce8:	2e33      	cmp	r6, #51	; 0x33
    2cea:	dd0c      	ble.n	2d06 <rint+0xa6>
    2cec:	2380      	movs	r3, #128	; 0x80
    2cee:	0004      	movs	r4, r0
    2cf0:	000d      	movs	r5, r1
    2cf2:	00db      	lsls	r3, r3, #3
    2cf4:	429e      	cmp	r6, r3
    2cf6:	d1f1      	bne.n	2cdc <rint+0x7c>
    2cf8:	0002      	movs	r2, r0
    2cfa:	000b      	movs	r3, r1
    2cfc:	f000 fa34 	bl	3168 <__aeabi_dadd>
    2d00:	0004      	movs	r4, r0
    2d02:	000d      	movs	r5, r1
    2d04:	e7ea      	b.n	2cdc <rint+0x7c>
    2d06:	4c26      	ldr	r4, [pc, #152]	; (2da0 <rint+0x140>)
    2d08:	000d      	movs	r5, r1
    2d0a:	46a4      	mov	ip, r4
    2d0c:	2401      	movs	r4, #1
    2d0e:	4463      	add	r3, ip
    2d10:	4264      	negs	r4, r4
    2d12:	40dc      	lsrs	r4, r3
    2d14:	46a4      	mov	ip, r4
    2d16:	4661      	mov	r1, ip
    2d18:	0004      	movs	r4, r0
    2d1a:	4201      	tst	r1, r0
    2d1c:	d0de      	beq.n	2cdc <rint+0x7c>
    2d1e:	0849      	lsrs	r1, r1, #1
    2d20:	4201      	tst	r1, r0
    2d22:	d0c5      	beq.n	2cb0 <rint+0x50>
    2d24:	2780      	movs	r7, #128	; 0x80
    2d26:	05ff      	lsls	r7, r7, #23
    2d28:	411f      	asrs	r7, r3
    2d2a:	4388      	bics	r0, r1
    2d2c:	4307      	orrs	r7, r0
    2d2e:	e7bf      	b.n	2cb0 <rint+0x50>
    2d30:	004b      	lsls	r3, r1, #1
    2d32:	085b      	lsrs	r3, r3, #1
    2d34:	4303      	orrs	r3, r0
    2d36:	0004      	movs	r4, r0
    2d38:	000d      	movs	r5, r1
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d0ce      	beq.n	2cdc <rint+0x7c>
    2d3e:	030b      	lsls	r3, r1, #12
    2d40:	0b1b      	lsrs	r3, r3, #12
    2d42:	4303      	orrs	r3, r0
    2d44:	425a      	negs	r2, r3
    2d46:	4313      	orrs	r3, r2
    2d48:	2280      	movs	r2, #128	; 0x80
    2d4a:	0b1b      	lsrs	r3, r3, #12
    2d4c:	0312      	lsls	r2, r2, #12
    2d4e:	4013      	ands	r3, r2
    2d50:	0c4a      	lsrs	r2, r1, #17
    2d52:	0452      	lsls	r2, r2, #17
    2d54:	4313      	orrs	r3, r2
    2d56:	0019      	movs	r1, r3
    2d58:	4643      	mov	r3, r8
    2d5a:	4a10      	ldr	r2, [pc, #64]	; (2d9c <rint+0x13c>)
    2d5c:	00db      	lsls	r3, r3, #3
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	681c      	ldr	r4, [r3, #0]
    2d62:	685d      	ldr	r5, [r3, #4]
    2d64:	0022      	movs	r2, r4
    2d66:	002b      	movs	r3, r5
    2d68:	f000 f9fe 	bl	3168 <__aeabi_dadd>
    2d6c:	9000      	str	r0, [sp, #0]
    2d6e:	9101      	str	r1, [sp, #4]
    2d70:	9800      	ldr	r0, [sp, #0]
    2d72:	9901      	ldr	r1, [sp, #4]
    2d74:	0022      	movs	r2, r4
    2d76:	002b      	movs	r3, r5
    2d78:	f001 fbc0 	bl	44fc <__aeabi_dsub>
    2d7c:	4642      	mov	r2, r8
    2d7e:	004b      	lsls	r3, r1, #1
    2d80:	085b      	lsrs	r3, r3, #1
    2d82:	07d6      	lsls	r6, r2, #31
    2d84:	4333      	orrs	r3, r6
    2d86:	0004      	movs	r4, r0
    2d88:	001d      	movs	r5, r3
    2d8a:	e7a7      	b.n	2cdc <rint+0x7c>
    2d8c:	2780      	movs	r7, #128	; 0x80
    2d8e:	063f      	lsls	r7, r7, #24
    2d90:	e789      	b.n	2ca6 <rint+0x46>
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	fffffc01 	.word	0xfffffc01
    2d98:	000fffff 	.word	0x000fffff
    2d9c:	000053e0 	.word	0x000053e0
    2da0:	fffffbed 	.word	0xfffffbed

00002da4 <scalbn>:
    2da4:	004b      	lsls	r3, r1, #1
    2da6:	b570      	push	{r4, r5, r6, lr}
    2da8:	0d5b      	lsrs	r3, r3, #21
    2daa:	0014      	movs	r4, r2
    2dac:	000a      	movs	r2, r1
    2dae:	2b00      	cmp	r3, #0
    2db0:	d11a      	bne.n	2de8 <scalbn+0x44>
    2db2:	004b      	lsls	r3, r1, #1
    2db4:	085b      	lsrs	r3, r3, #1
    2db6:	4303      	orrs	r3, r0
    2db8:	d015      	beq.n	2de6 <scalbn+0x42>
    2dba:	2200      	movs	r2, #0
    2dbc:	4b22      	ldr	r3, [pc, #136]	; (2e48 <scalbn+0xa4>)
    2dbe:	f001 f923 	bl	4008 <__aeabi_dmul>
    2dc2:	4b22      	ldr	r3, [pc, #136]	; (2e4c <scalbn+0xa8>)
    2dc4:	000a      	movs	r2, r1
    2dc6:	429c      	cmp	r4, r3
    2dc8:	db22      	blt.n	2e10 <scalbn+0x6c>
    2dca:	004b      	lsls	r3, r1, #1
    2dcc:	0d5b      	lsrs	r3, r3, #21
    2dce:	3b36      	subs	r3, #54	; 0x36
    2dd0:	4d1f      	ldr	r5, [pc, #124]	; (2e50 <scalbn+0xac>)
    2dd2:	18e3      	adds	r3, r4, r3
    2dd4:	42ab      	cmp	r3, r5
    2dd6:	dc20      	bgt.n	2e1a <scalbn+0x76>
    2dd8:	2b00      	cmp	r3, #0
    2dda:	dd0d      	ble.n	2df8 <scalbn+0x54>
    2ddc:	4c1d      	ldr	r4, [pc, #116]	; (2e54 <scalbn+0xb0>)
    2dde:	051b      	lsls	r3, r3, #20
    2de0:	4022      	ands	r2, r4
    2de2:	431a      	orrs	r2, r3
    2de4:	0011      	movs	r1, r2
    2de6:	bd70      	pop	{r4, r5, r6, pc}
    2de8:	4d1b      	ldr	r5, [pc, #108]	; (2e58 <scalbn+0xb4>)
    2dea:	42ab      	cmp	r3, r5
    2dec:	d1f0      	bne.n	2dd0 <scalbn+0x2c>
    2dee:	0002      	movs	r2, r0
    2df0:	000b      	movs	r3, r1
    2df2:	f000 f9b9 	bl	3168 <__aeabi_dadd>
    2df6:	e7f6      	b.n	2de6 <scalbn+0x42>
    2df8:	001d      	movs	r5, r3
    2dfa:	3535      	adds	r5, #53	; 0x35
    2dfc:	da18      	bge.n	2e30 <scalbn+0x8c>
    2dfe:	4b17      	ldr	r3, [pc, #92]	; (2e5c <scalbn+0xb8>)
    2e00:	0002      	movs	r2, r0
    2e02:	429c      	cmp	r4, r3
    2e04:	dc0a      	bgt.n	2e1c <scalbn+0x78>
    2e06:	000b      	movs	r3, r1
    2e08:	4815      	ldr	r0, [pc, #84]	; (2e60 <scalbn+0xbc>)
    2e0a:	4916      	ldr	r1, [pc, #88]	; (2e64 <scalbn+0xc0>)
    2e0c:	f000 f832 	bl	2e74 <copysign>
    2e10:	4a13      	ldr	r2, [pc, #76]	; (2e60 <scalbn+0xbc>)
    2e12:	4b14      	ldr	r3, [pc, #80]	; (2e64 <scalbn+0xc0>)
    2e14:	f001 f8f8 	bl	4008 <__aeabi_dmul>
    2e18:	e7e5      	b.n	2de6 <scalbn+0x42>
    2e1a:	0002      	movs	r2, r0
    2e1c:	000b      	movs	r3, r1
    2e1e:	4812      	ldr	r0, [pc, #72]	; (2e68 <scalbn+0xc4>)
    2e20:	4912      	ldr	r1, [pc, #72]	; (2e6c <scalbn+0xc8>)
    2e22:	f000 f827 	bl	2e74 <copysign>
    2e26:	4a10      	ldr	r2, [pc, #64]	; (2e68 <scalbn+0xc4>)
    2e28:	4b10      	ldr	r3, [pc, #64]	; (2e6c <scalbn+0xc8>)
    2e2a:	f001 f8ed 	bl	4008 <__aeabi_dmul>
    2e2e:	e7da      	b.n	2de6 <scalbn+0x42>
    2e30:	4c08      	ldr	r4, [pc, #32]	; (2e54 <scalbn+0xb0>)
    2e32:	3336      	adds	r3, #54	; 0x36
    2e34:	4022      	ands	r2, r4
    2e36:	051b      	lsls	r3, r3, #20
    2e38:	4313      	orrs	r3, r2
    2e3a:	0019      	movs	r1, r3
    2e3c:	2200      	movs	r2, #0
    2e3e:	4b0c      	ldr	r3, [pc, #48]	; (2e70 <scalbn+0xcc>)
    2e40:	f001 f8e2 	bl	4008 <__aeabi_dmul>
    2e44:	e7cf      	b.n	2de6 <scalbn+0x42>
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	43500000 	.word	0x43500000
    2e4c:	ffff3cb0 	.word	0xffff3cb0
    2e50:	000007fe 	.word	0x000007fe
    2e54:	800fffff 	.word	0x800fffff
    2e58:	000007ff 	.word	0x000007ff
    2e5c:	0000c350 	.word	0x0000c350
    2e60:	c2f8f359 	.word	0xc2f8f359
    2e64:	01a56e1f 	.word	0x01a56e1f
    2e68:	8800759c 	.word	0x8800759c
    2e6c:	7e37e43c 	.word	0x7e37e43c
    2e70:	3c900000 	.word	0x3c900000

00002e74 <copysign>:
    2e74:	b530      	push	{r4, r5, lr}
    2e76:	004a      	lsls	r2, r1, #1
    2e78:	0fdb      	lsrs	r3, r3, #31
    2e7a:	07db      	lsls	r3, r3, #31
    2e7c:	0852      	lsrs	r2, r2, #1
    2e7e:	431a      	orrs	r2, r3
    2e80:	0011      	movs	r1, r2
    2e82:	bd30      	pop	{r4, r5, pc}

00002e84 <__aeabi_cdrcmple>:
    2e84:	4684      	mov	ip, r0
    2e86:	1c10      	adds	r0, r2, #0
    2e88:	4662      	mov	r2, ip
    2e8a:	468c      	mov	ip, r1
    2e8c:	1c19      	adds	r1, r3, #0
    2e8e:	4663      	mov	r3, ip
    2e90:	e000      	b.n	2e94 <__aeabi_cdcmpeq>
    2e92:	46c0      	nop			; (mov r8, r8)

00002e94 <__aeabi_cdcmpeq>:
    2e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2e96:	f001 f84d 	bl	3f34 <__ledf2>
    2e9a:	2800      	cmp	r0, #0
    2e9c:	d401      	bmi.n	2ea2 <__aeabi_cdcmpeq+0xe>
    2e9e:	2100      	movs	r1, #0
    2ea0:	42c8      	cmn	r0, r1
    2ea2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002ea4 <__aeabi_dcmpeq>:
    2ea4:	b510      	push	{r4, lr}
    2ea6:	f000 ffa1 	bl	3dec <__eqdf2>
    2eaa:	4240      	negs	r0, r0
    2eac:	3001      	adds	r0, #1
    2eae:	bd10      	pop	{r4, pc}

00002eb0 <__aeabi_dcmplt>:
    2eb0:	b510      	push	{r4, lr}
    2eb2:	f001 f83f 	bl	3f34 <__ledf2>
    2eb6:	2800      	cmp	r0, #0
    2eb8:	db01      	blt.n	2ebe <__aeabi_dcmplt+0xe>
    2eba:	2000      	movs	r0, #0
    2ebc:	bd10      	pop	{r4, pc}
    2ebe:	2001      	movs	r0, #1
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)

00002ec4 <__aeabi_dcmple>:
    2ec4:	b510      	push	{r4, lr}
    2ec6:	f001 f835 	bl	3f34 <__ledf2>
    2eca:	2800      	cmp	r0, #0
    2ecc:	dd01      	ble.n	2ed2 <__aeabi_dcmple+0xe>
    2ece:	2000      	movs	r0, #0
    2ed0:	bd10      	pop	{r4, pc}
    2ed2:	2001      	movs	r0, #1
    2ed4:	bd10      	pop	{r4, pc}
    2ed6:	46c0      	nop			; (mov r8, r8)

00002ed8 <__aeabi_dcmpgt>:
    2ed8:	b510      	push	{r4, lr}
    2eda:	f000 ffc7 	bl	3e6c <__gedf2>
    2ede:	2800      	cmp	r0, #0
    2ee0:	dc01      	bgt.n	2ee6 <__aeabi_dcmpgt+0xe>
    2ee2:	2000      	movs	r0, #0
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	2001      	movs	r0, #1
    2ee8:	bd10      	pop	{r4, pc}
    2eea:	46c0      	nop			; (mov r8, r8)

00002eec <__aeabi_dcmpge>:
    2eec:	b510      	push	{r4, lr}
    2eee:	f000 ffbd 	bl	3e6c <__gedf2>
    2ef2:	2800      	cmp	r0, #0
    2ef4:	da01      	bge.n	2efa <__aeabi_dcmpge+0xe>
    2ef6:	2000      	movs	r0, #0
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	2001      	movs	r0, #1
    2efc:	bd10      	pop	{r4, pc}
    2efe:	46c0      	nop			; (mov r8, r8)

00002f00 <__aeabi_cfrcmple>:
    2f00:	4684      	mov	ip, r0
    2f02:	1c08      	adds	r0, r1, #0
    2f04:	4661      	mov	r1, ip
    2f06:	e7ff      	b.n	2f08 <__aeabi_cfcmpeq>

00002f08 <__aeabi_cfcmpeq>:
    2f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2f0a:	f000 f8e9 	bl	30e0 <__lesf2>
    2f0e:	2800      	cmp	r0, #0
    2f10:	d401      	bmi.n	2f16 <__aeabi_cfcmpeq+0xe>
    2f12:	2100      	movs	r1, #0
    2f14:	42c8      	cmn	r0, r1
    2f16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002f18 <__aeabi_fcmpeq>:
    2f18:	b510      	push	{r4, lr}
    2f1a:	f000 f875 	bl	3008 <__eqsf2>
    2f1e:	4240      	negs	r0, r0
    2f20:	3001      	adds	r0, #1
    2f22:	bd10      	pop	{r4, pc}

00002f24 <__aeabi_fcmplt>:
    2f24:	b510      	push	{r4, lr}
    2f26:	f000 f8db 	bl	30e0 <__lesf2>
    2f2a:	2800      	cmp	r0, #0
    2f2c:	db01      	blt.n	2f32 <__aeabi_fcmplt+0xe>
    2f2e:	2000      	movs	r0, #0
    2f30:	bd10      	pop	{r4, pc}
    2f32:	2001      	movs	r0, #1
    2f34:	bd10      	pop	{r4, pc}
    2f36:	46c0      	nop			; (mov r8, r8)

00002f38 <__aeabi_fcmple>:
    2f38:	b510      	push	{r4, lr}
    2f3a:	f000 f8d1 	bl	30e0 <__lesf2>
    2f3e:	2800      	cmp	r0, #0
    2f40:	dd01      	ble.n	2f46 <__aeabi_fcmple+0xe>
    2f42:	2000      	movs	r0, #0
    2f44:	bd10      	pop	{r4, pc}
    2f46:	2001      	movs	r0, #1
    2f48:	bd10      	pop	{r4, pc}
    2f4a:	46c0      	nop			; (mov r8, r8)

00002f4c <__aeabi_fcmpgt>:
    2f4c:	b510      	push	{r4, lr}
    2f4e:	f000 f883 	bl	3058 <__gesf2>
    2f52:	2800      	cmp	r0, #0
    2f54:	dc01      	bgt.n	2f5a <__aeabi_fcmpgt+0xe>
    2f56:	2000      	movs	r0, #0
    2f58:	bd10      	pop	{r4, pc}
    2f5a:	2001      	movs	r0, #1
    2f5c:	bd10      	pop	{r4, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)

00002f60 <__aeabi_fcmpge>:
    2f60:	b510      	push	{r4, lr}
    2f62:	f000 f879 	bl	3058 <__gesf2>
    2f66:	2800      	cmp	r0, #0
    2f68:	da01      	bge.n	2f6e <__aeabi_fcmpge+0xe>
    2f6a:	2000      	movs	r0, #0
    2f6c:	bd10      	pop	{r4, pc}
    2f6e:	2001      	movs	r0, #1
    2f70:	bd10      	pop	{r4, pc}
    2f72:	46c0      	nop			; (mov r8, r8)

00002f74 <__aeabi_lmul>:
    2f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f76:	464f      	mov	r7, r9
    2f78:	4646      	mov	r6, r8
    2f7a:	b4c0      	push	{r6, r7}
    2f7c:	0416      	lsls	r6, r2, #16
    2f7e:	0c36      	lsrs	r6, r6, #16
    2f80:	4699      	mov	r9, r3
    2f82:	0033      	movs	r3, r6
    2f84:	0405      	lsls	r5, r0, #16
    2f86:	0c2c      	lsrs	r4, r5, #16
    2f88:	0c07      	lsrs	r7, r0, #16
    2f8a:	0c15      	lsrs	r5, r2, #16
    2f8c:	4363      	muls	r3, r4
    2f8e:	437e      	muls	r6, r7
    2f90:	436f      	muls	r7, r5
    2f92:	4365      	muls	r5, r4
    2f94:	0c1c      	lsrs	r4, r3, #16
    2f96:	19ad      	adds	r5, r5, r6
    2f98:	1964      	adds	r4, r4, r5
    2f9a:	469c      	mov	ip, r3
    2f9c:	42a6      	cmp	r6, r4
    2f9e:	d903      	bls.n	2fa8 <__aeabi_lmul+0x34>
    2fa0:	2380      	movs	r3, #128	; 0x80
    2fa2:	025b      	lsls	r3, r3, #9
    2fa4:	4698      	mov	r8, r3
    2fa6:	4447      	add	r7, r8
    2fa8:	4663      	mov	r3, ip
    2faa:	0c25      	lsrs	r5, r4, #16
    2fac:	19ef      	adds	r7, r5, r7
    2fae:	041d      	lsls	r5, r3, #16
    2fb0:	464b      	mov	r3, r9
    2fb2:	434a      	muls	r2, r1
    2fb4:	4343      	muls	r3, r0
    2fb6:	0c2d      	lsrs	r5, r5, #16
    2fb8:	0424      	lsls	r4, r4, #16
    2fba:	1964      	adds	r4, r4, r5
    2fbc:	1899      	adds	r1, r3, r2
    2fbe:	19c9      	adds	r1, r1, r7
    2fc0:	0020      	movs	r0, r4
    2fc2:	bc0c      	pop	{r2, r3}
    2fc4:	4690      	mov	r8, r2
    2fc6:	4699      	mov	r9, r3
    2fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fca:	46c0      	nop			; (mov r8, r8)

00002fcc <__aeabi_d2uiz>:
    2fcc:	b570      	push	{r4, r5, r6, lr}
    2fce:	2200      	movs	r2, #0
    2fd0:	4b0c      	ldr	r3, [pc, #48]	; (3004 <__aeabi_d2uiz+0x38>)
    2fd2:	0004      	movs	r4, r0
    2fd4:	000d      	movs	r5, r1
    2fd6:	f7ff ff89 	bl	2eec <__aeabi_dcmpge>
    2fda:	2800      	cmp	r0, #0
    2fdc:	d104      	bne.n	2fe8 <__aeabi_d2uiz+0x1c>
    2fde:	0020      	movs	r0, r4
    2fe0:	0029      	movs	r1, r5
    2fe2:	f001 fdff 	bl	4be4 <__aeabi_d2iz>
    2fe6:	bd70      	pop	{r4, r5, r6, pc}
    2fe8:	4b06      	ldr	r3, [pc, #24]	; (3004 <__aeabi_d2uiz+0x38>)
    2fea:	2200      	movs	r2, #0
    2fec:	0020      	movs	r0, r4
    2fee:	0029      	movs	r1, r5
    2ff0:	f001 fa84 	bl	44fc <__aeabi_dsub>
    2ff4:	f001 fdf6 	bl	4be4 <__aeabi_d2iz>
    2ff8:	2380      	movs	r3, #128	; 0x80
    2ffa:	061b      	lsls	r3, r3, #24
    2ffc:	469c      	mov	ip, r3
    2ffe:	4460      	add	r0, ip
    3000:	e7f1      	b.n	2fe6 <__aeabi_d2uiz+0x1a>
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	41e00000 	.word	0x41e00000

00003008 <__eqsf2>:
    3008:	0243      	lsls	r3, r0, #9
    300a:	b570      	push	{r4, r5, r6, lr}
    300c:	0042      	lsls	r2, r0, #1
    300e:	004c      	lsls	r4, r1, #1
    3010:	0a5d      	lsrs	r5, r3, #9
    3012:	0fc3      	lsrs	r3, r0, #31
    3014:	0248      	lsls	r0, r1, #9
    3016:	0e12      	lsrs	r2, r2, #24
    3018:	0a46      	lsrs	r6, r0, #9
    301a:	0e24      	lsrs	r4, r4, #24
    301c:	0fc9      	lsrs	r1, r1, #31
    301e:	2aff      	cmp	r2, #255	; 0xff
    3020:	d00f      	beq.n	3042 <__eqsf2+0x3a>
    3022:	2cff      	cmp	r4, #255	; 0xff
    3024:	d011      	beq.n	304a <__eqsf2+0x42>
    3026:	2001      	movs	r0, #1
    3028:	42a2      	cmp	r2, r4
    302a:	d000      	beq.n	302e <__eqsf2+0x26>
    302c:	bd70      	pop	{r4, r5, r6, pc}
    302e:	42b5      	cmp	r5, r6
    3030:	d1fc      	bne.n	302c <__eqsf2+0x24>
    3032:	428b      	cmp	r3, r1
    3034:	d00d      	beq.n	3052 <__eqsf2+0x4a>
    3036:	2a00      	cmp	r2, #0
    3038:	d1f8      	bne.n	302c <__eqsf2+0x24>
    303a:	0028      	movs	r0, r5
    303c:	1e43      	subs	r3, r0, #1
    303e:	4198      	sbcs	r0, r3
    3040:	e7f4      	b.n	302c <__eqsf2+0x24>
    3042:	2001      	movs	r0, #1
    3044:	2d00      	cmp	r5, #0
    3046:	d1f1      	bne.n	302c <__eqsf2+0x24>
    3048:	e7eb      	b.n	3022 <__eqsf2+0x1a>
    304a:	2001      	movs	r0, #1
    304c:	2e00      	cmp	r6, #0
    304e:	d1ed      	bne.n	302c <__eqsf2+0x24>
    3050:	e7e9      	b.n	3026 <__eqsf2+0x1e>
    3052:	2000      	movs	r0, #0
    3054:	e7ea      	b.n	302c <__eqsf2+0x24>
    3056:	46c0      	nop			; (mov r8, r8)

00003058 <__gesf2>:
    3058:	0243      	lsls	r3, r0, #9
    305a:	b5f0      	push	{r4, r5, r6, r7, lr}
    305c:	0042      	lsls	r2, r0, #1
    305e:	0a5d      	lsrs	r5, r3, #9
    3060:	0fc3      	lsrs	r3, r0, #31
    3062:	0248      	lsls	r0, r1, #9
    3064:	0a44      	lsrs	r4, r0, #9
    3066:	0048      	lsls	r0, r1, #1
    3068:	0e12      	lsrs	r2, r2, #24
    306a:	0e00      	lsrs	r0, r0, #24
    306c:	0fc9      	lsrs	r1, r1, #31
    306e:	2aff      	cmp	r2, #255	; 0xff
    3070:	d01f      	beq.n	30b2 <__gesf2+0x5a>
    3072:	28ff      	cmp	r0, #255	; 0xff
    3074:	d022      	beq.n	30bc <__gesf2+0x64>
    3076:	2a00      	cmp	r2, #0
    3078:	d109      	bne.n	308e <__gesf2+0x36>
    307a:	426e      	negs	r6, r5
    307c:	416e      	adcs	r6, r5
    307e:	2800      	cmp	r0, #0
    3080:	d10f      	bne.n	30a2 <__gesf2+0x4a>
    3082:	2c00      	cmp	r4, #0
    3084:	d10d      	bne.n	30a2 <__gesf2+0x4a>
    3086:	2000      	movs	r0, #0
    3088:	2d00      	cmp	r5, #0
    308a:	d009      	beq.n	30a0 <__gesf2+0x48>
    308c:	e005      	b.n	309a <__gesf2+0x42>
    308e:	2800      	cmp	r0, #0
    3090:	d101      	bne.n	3096 <__gesf2+0x3e>
    3092:	2c00      	cmp	r4, #0
    3094:	d001      	beq.n	309a <__gesf2+0x42>
    3096:	428b      	cmp	r3, r1
    3098:	d013      	beq.n	30c2 <__gesf2+0x6a>
    309a:	4258      	negs	r0, r3
    309c:	2301      	movs	r3, #1
    309e:	4318      	orrs	r0, r3
    30a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30a2:	2e00      	cmp	r6, #0
    30a4:	d0f7      	beq.n	3096 <__gesf2+0x3e>
    30a6:	4248      	negs	r0, r1
    30a8:	4141      	adcs	r1, r0
    30aa:	2001      	movs	r0, #1
    30ac:	4249      	negs	r1, r1
    30ae:	4308      	orrs	r0, r1
    30b0:	e7f6      	b.n	30a0 <__gesf2+0x48>
    30b2:	2d00      	cmp	r5, #0
    30b4:	d0dd      	beq.n	3072 <__gesf2+0x1a>
    30b6:	2002      	movs	r0, #2
    30b8:	4240      	negs	r0, r0
    30ba:	e7f1      	b.n	30a0 <__gesf2+0x48>
    30bc:	2c00      	cmp	r4, #0
    30be:	d0da      	beq.n	3076 <__gesf2+0x1e>
    30c0:	e7f9      	b.n	30b6 <__gesf2+0x5e>
    30c2:	4282      	cmp	r2, r0
    30c4:	dce9      	bgt.n	309a <__gesf2+0x42>
    30c6:	db04      	blt.n	30d2 <__gesf2+0x7a>
    30c8:	42a5      	cmp	r5, r4
    30ca:	d8e6      	bhi.n	309a <__gesf2+0x42>
    30cc:	2000      	movs	r0, #0
    30ce:	42a5      	cmp	r5, r4
    30d0:	d2e6      	bcs.n	30a0 <__gesf2+0x48>
    30d2:	4258      	negs	r0, r3
    30d4:	4143      	adcs	r3, r0
    30d6:	2001      	movs	r0, #1
    30d8:	425b      	negs	r3, r3
    30da:	4318      	orrs	r0, r3
    30dc:	e7e0      	b.n	30a0 <__gesf2+0x48>
    30de:	46c0      	nop			; (mov r8, r8)

000030e0 <__lesf2>:
    30e0:	0243      	lsls	r3, r0, #9
    30e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    30e4:	0042      	lsls	r2, r0, #1
    30e6:	004c      	lsls	r4, r1, #1
    30e8:	0a5e      	lsrs	r6, r3, #9
    30ea:	0fc3      	lsrs	r3, r0, #31
    30ec:	0248      	lsls	r0, r1, #9
    30ee:	0e12      	lsrs	r2, r2, #24
    30f0:	0a45      	lsrs	r5, r0, #9
    30f2:	0e24      	lsrs	r4, r4, #24
    30f4:	0fc9      	lsrs	r1, r1, #31
    30f6:	2aff      	cmp	r2, #255	; 0xff
    30f8:	d017      	beq.n	312a <__lesf2+0x4a>
    30fa:	2cff      	cmp	r4, #255	; 0xff
    30fc:	d019      	beq.n	3132 <__lesf2+0x52>
    30fe:	2a00      	cmp	r2, #0
    3100:	d10b      	bne.n	311a <__lesf2+0x3a>
    3102:	4270      	negs	r0, r6
    3104:	4170      	adcs	r0, r6
    3106:	2c00      	cmp	r4, #0
    3108:	d017      	beq.n	313a <__lesf2+0x5a>
    310a:	2800      	cmp	r0, #0
    310c:	d007      	beq.n	311e <__lesf2+0x3e>
    310e:	4248      	negs	r0, r1
    3110:	4141      	adcs	r1, r0
    3112:	2001      	movs	r0, #1
    3114:	4249      	negs	r1, r1
    3116:	4308      	orrs	r0, r1
    3118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    311a:	2c00      	cmp	r4, #0
    311c:	d013      	beq.n	3146 <__lesf2+0x66>
    311e:	428b      	cmp	r3, r1
    3120:	d014      	beq.n	314c <__lesf2+0x6c>
    3122:	4258      	negs	r0, r3
    3124:	2301      	movs	r3, #1
    3126:	4318      	orrs	r0, r3
    3128:	e7f6      	b.n	3118 <__lesf2+0x38>
    312a:	2002      	movs	r0, #2
    312c:	2e00      	cmp	r6, #0
    312e:	d1f3      	bne.n	3118 <__lesf2+0x38>
    3130:	e7e3      	b.n	30fa <__lesf2+0x1a>
    3132:	2002      	movs	r0, #2
    3134:	2d00      	cmp	r5, #0
    3136:	d1ef      	bne.n	3118 <__lesf2+0x38>
    3138:	e7e1      	b.n	30fe <__lesf2+0x1e>
    313a:	2d00      	cmp	r5, #0
    313c:	d1e5      	bne.n	310a <__lesf2+0x2a>
    313e:	2000      	movs	r0, #0
    3140:	2e00      	cmp	r6, #0
    3142:	d0e9      	beq.n	3118 <__lesf2+0x38>
    3144:	e7ed      	b.n	3122 <__lesf2+0x42>
    3146:	2d00      	cmp	r5, #0
    3148:	d1e9      	bne.n	311e <__lesf2+0x3e>
    314a:	e7ea      	b.n	3122 <__lesf2+0x42>
    314c:	42a2      	cmp	r2, r4
    314e:	dce8      	bgt.n	3122 <__lesf2+0x42>
    3150:	db04      	blt.n	315c <__lesf2+0x7c>
    3152:	42ae      	cmp	r6, r5
    3154:	d8e5      	bhi.n	3122 <__lesf2+0x42>
    3156:	2000      	movs	r0, #0
    3158:	42ae      	cmp	r6, r5
    315a:	d2dd      	bcs.n	3118 <__lesf2+0x38>
    315c:	4258      	negs	r0, r3
    315e:	4143      	adcs	r3, r0
    3160:	2001      	movs	r0, #1
    3162:	425b      	negs	r3, r3
    3164:	4318      	orrs	r0, r3
    3166:	e7d7      	b.n	3118 <__lesf2+0x38>

00003168 <__aeabi_dadd>:
    3168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    316a:	4656      	mov	r6, sl
    316c:	465f      	mov	r7, fp
    316e:	464d      	mov	r5, r9
    3170:	4644      	mov	r4, r8
    3172:	b4f0      	push	{r4, r5, r6, r7}
    3174:	000f      	movs	r7, r1
    3176:	0ffd      	lsrs	r5, r7, #31
    3178:	46aa      	mov	sl, r5
    317a:	0309      	lsls	r1, r1, #12
    317c:	007c      	lsls	r4, r7, #1
    317e:	002e      	movs	r6, r5
    3180:	005f      	lsls	r7, r3, #1
    3182:	0f45      	lsrs	r5, r0, #29
    3184:	0a49      	lsrs	r1, r1, #9
    3186:	0d7f      	lsrs	r7, r7, #21
    3188:	4329      	orrs	r1, r5
    318a:	00c5      	lsls	r5, r0, #3
    318c:	0318      	lsls	r0, r3, #12
    318e:	46bc      	mov	ip, r7
    3190:	0a40      	lsrs	r0, r0, #9
    3192:	0f57      	lsrs	r7, r2, #29
    3194:	0d64      	lsrs	r4, r4, #21
    3196:	0fdb      	lsrs	r3, r3, #31
    3198:	4338      	orrs	r0, r7
    319a:	00d2      	lsls	r2, r2, #3
    319c:	459a      	cmp	sl, r3
    319e:	d100      	bne.n	31a2 <__aeabi_dadd+0x3a>
    31a0:	e0aa      	b.n	32f8 <__aeabi_dadd+0x190>
    31a2:	4666      	mov	r6, ip
    31a4:	1ba6      	subs	r6, r4, r6
    31a6:	2e00      	cmp	r6, #0
    31a8:	dc00      	bgt.n	31ac <__aeabi_dadd+0x44>
    31aa:	e0ff      	b.n	33ac <__aeabi_dadd+0x244>
    31ac:	4663      	mov	r3, ip
    31ae:	2b00      	cmp	r3, #0
    31b0:	d139      	bne.n	3226 <__aeabi_dadd+0xbe>
    31b2:	0003      	movs	r3, r0
    31b4:	4313      	orrs	r3, r2
    31b6:	d000      	beq.n	31ba <__aeabi_dadd+0x52>
    31b8:	e0d9      	b.n	336e <__aeabi_dadd+0x206>
    31ba:	076b      	lsls	r3, r5, #29
    31bc:	d009      	beq.n	31d2 <__aeabi_dadd+0x6a>
    31be:	230f      	movs	r3, #15
    31c0:	402b      	ands	r3, r5
    31c2:	2b04      	cmp	r3, #4
    31c4:	d005      	beq.n	31d2 <__aeabi_dadd+0x6a>
    31c6:	1d2b      	adds	r3, r5, #4
    31c8:	42ab      	cmp	r3, r5
    31ca:	41ad      	sbcs	r5, r5
    31cc:	426d      	negs	r5, r5
    31ce:	1949      	adds	r1, r1, r5
    31d0:	001d      	movs	r5, r3
    31d2:	020b      	lsls	r3, r1, #8
    31d4:	d400      	bmi.n	31d8 <__aeabi_dadd+0x70>
    31d6:	e082      	b.n	32de <__aeabi_dadd+0x176>
    31d8:	4bca      	ldr	r3, [pc, #808]	; (3504 <__aeabi_dadd+0x39c>)
    31da:	3401      	adds	r4, #1
    31dc:	429c      	cmp	r4, r3
    31de:	d100      	bne.n	31e2 <__aeabi_dadd+0x7a>
    31e0:	e0fe      	b.n	33e0 <__aeabi_dadd+0x278>
    31e2:	000a      	movs	r2, r1
    31e4:	4656      	mov	r6, sl
    31e6:	4bc8      	ldr	r3, [pc, #800]	; (3508 <__aeabi_dadd+0x3a0>)
    31e8:	08ed      	lsrs	r5, r5, #3
    31ea:	401a      	ands	r2, r3
    31ec:	0750      	lsls	r0, r2, #29
    31ee:	0564      	lsls	r4, r4, #21
    31f0:	0252      	lsls	r2, r2, #9
    31f2:	4305      	orrs	r5, r0
    31f4:	0b12      	lsrs	r2, r2, #12
    31f6:	0d64      	lsrs	r4, r4, #21
    31f8:	2100      	movs	r1, #0
    31fa:	0312      	lsls	r2, r2, #12
    31fc:	0d0b      	lsrs	r3, r1, #20
    31fe:	051b      	lsls	r3, r3, #20
    3200:	0564      	lsls	r4, r4, #21
    3202:	0b12      	lsrs	r2, r2, #12
    3204:	431a      	orrs	r2, r3
    3206:	0863      	lsrs	r3, r4, #1
    3208:	4cc0      	ldr	r4, [pc, #768]	; (350c <__aeabi_dadd+0x3a4>)
    320a:	07f6      	lsls	r6, r6, #31
    320c:	4014      	ands	r4, r2
    320e:	431c      	orrs	r4, r3
    3210:	0064      	lsls	r4, r4, #1
    3212:	0864      	lsrs	r4, r4, #1
    3214:	4334      	orrs	r4, r6
    3216:	0028      	movs	r0, r5
    3218:	0021      	movs	r1, r4
    321a:	bc3c      	pop	{r2, r3, r4, r5}
    321c:	4690      	mov	r8, r2
    321e:	4699      	mov	r9, r3
    3220:	46a2      	mov	sl, r4
    3222:	46ab      	mov	fp, r5
    3224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3226:	4bb7      	ldr	r3, [pc, #732]	; (3504 <__aeabi_dadd+0x39c>)
    3228:	429c      	cmp	r4, r3
    322a:	d0c6      	beq.n	31ba <__aeabi_dadd+0x52>
    322c:	2380      	movs	r3, #128	; 0x80
    322e:	041b      	lsls	r3, r3, #16
    3230:	4318      	orrs	r0, r3
    3232:	2e38      	cmp	r6, #56	; 0x38
    3234:	dd00      	ble.n	3238 <__aeabi_dadd+0xd0>
    3236:	e0eb      	b.n	3410 <__aeabi_dadd+0x2a8>
    3238:	2e1f      	cmp	r6, #31
    323a:	dd00      	ble.n	323e <__aeabi_dadd+0xd6>
    323c:	e11e      	b.n	347c <__aeabi_dadd+0x314>
    323e:	2320      	movs	r3, #32
    3240:	1b9b      	subs	r3, r3, r6
    3242:	469c      	mov	ip, r3
    3244:	0003      	movs	r3, r0
    3246:	4667      	mov	r7, ip
    3248:	40bb      	lsls	r3, r7
    324a:	4698      	mov	r8, r3
    324c:	0013      	movs	r3, r2
    324e:	4647      	mov	r7, r8
    3250:	40f3      	lsrs	r3, r6
    3252:	433b      	orrs	r3, r7
    3254:	4667      	mov	r7, ip
    3256:	40ba      	lsls	r2, r7
    3258:	1e57      	subs	r7, r2, #1
    325a:	41ba      	sbcs	r2, r7
    325c:	4313      	orrs	r3, r2
    325e:	0002      	movs	r2, r0
    3260:	40f2      	lsrs	r2, r6
    3262:	1aeb      	subs	r3, r5, r3
    3264:	429d      	cmp	r5, r3
    3266:	41b6      	sbcs	r6, r6
    3268:	001d      	movs	r5, r3
    326a:	1a8a      	subs	r2, r1, r2
    326c:	4276      	negs	r6, r6
    326e:	1b91      	subs	r1, r2, r6
    3270:	020b      	lsls	r3, r1, #8
    3272:	d531      	bpl.n	32d8 <__aeabi_dadd+0x170>
    3274:	024a      	lsls	r2, r1, #9
    3276:	0a56      	lsrs	r6, r2, #9
    3278:	2e00      	cmp	r6, #0
    327a:	d100      	bne.n	327e <__aeabi_dadd+0x116>
    327c:	e0b4      	b.n	33e8 <__aeabi_dadd+0x280>
    327e:	0030      	movs	r0, r6
    3280:	f001 fecc 	bl	501c <__clzsi2>
    3284:	0003      	movs	r3, r0
    3286:	3b08      	subs	r3, #8
    3288:	2b1f      	cmp	r3, #31
    328a:	dd00      	ble.n	328e <__aeabi_dadd+0x126>
    328c:	e0b5      	b.n	33fa <__aeabi_dadd+0x292>
    328e:	2220      	movs	r2, #32
    3290:	0029      	movs	r1, r5
    3292:	1ad2      	subs	r2, r2, r3
    3294:	40d1      	lsrs	r1, r2
    3296:	409e      	lsls	r6, r3
    3298:	000a      	movs	r2, r1
    329a:	409d      	lsls	r5, r3
    329c:	4332      	orrs	r2, r6
    329e:	429c      	cmp	r4, r3
    32a0:	dd00      	ble.n	32a4 <__aeabi_dadd+0x13c>
    32a2:	e0b1      	b.n	3408 <__aeabi_dadd+0x2a0>
    32a4:	1b1c      	subs	r4, r3, r4
    32a6:	1c63      	adds	r3, r4, #1
    32a8:	2b1f      	cmp	r3, #31
    32aa:	dd00      	ble.n	32ae <__aeabi_dadd+0x146>
    32ac:	e0d5      	b.n	345a <__aeabi_dadd+0x2f2>
    32ae:	2120      	movs	r1, #32
    32b0:	0014      	movs	r4, r2
    32b2:	0028      	movs	r0, r5
    32b4:	1ac9      	subs	r1, r1, r3
    32b6:	408c      	lsls	r4, r1
    32b8:	40d8      	lsrs	r0, r3
    32ba:	408d      	lsls	r5, r1
    32bc:	4304      	orrs	r4, r0
    32be:	40da      	lsrs	r2, r3
    32c0:	1e68      	subs	r0, r5, #1
    32c2:	4185      	sbcs	r5, r0
    32c4:	0011      	movs	r1, r2
    32c6:	4325      	orrs	r5, r4
    32c8:	2400      	movs	r4, #0
    32ca:	e776      	b.n	31ba <__aeabi_dadd+0x52>
    32cc:	4641      	mov	r1, r8
    32ce:	4331      	orrs	r1, r6
    32d0:	d100      	bne.n	32d4 <__aeabi_dadd+0x16c>
    32d2:	e234      	b.n	373e <__aeabi_dadd+0x5d6>
    32d4:	0031      	movs	r1, r6
    32d6:	4645      	mov	r5, r8
    32d8:	076b      	lsls	r3, r5, #29
    32da:	d000      	beq.n	32de <__aeabi_dadd+0x176>
    32dc:	e76f      	b.n	31be <__aeabi_dadd+0x56>
    32de:	4656      	mov	r6, sl
    32e0:	0748      	lsls	r0, r1, #29
    32e2:	08ed      	lsrs	r5, r5, #3
    32e4:	08c9      	lsrs	r1, r1, #3
    32e6:	4305      	orrs	r5, r0
    32e8:	4b86      	ldr	r3, [pc, #536]	; (3504 <__aeabi_dadd+0x39c>)
    32ea:	429c      	cmp	r4, r3
    32ec:	d035      	beq.n	335a <__aeabi_dadd+0x1f2>
    32ee:	030a      	lsls	r2, r1, #12
    32f0:	0564      	lsls	r4, r4, #21
    32f2:	0b12      	lsrs	r2, r2, #12
    32f4:	0d64      	lsrs	r4, r4, #21
    32f6:	e77f      	b.n	31f8 <__aeabi_dadd+0x90>
    32f8:	4663      	mov	r3, ip
    32fa:	1ae3      	subs	r3, r4, r3
    32fc:	469b      	mov	fp, r3
    32fe:	2b00      	cmp	r3, #0
    3300:	dc00      	bgt.n	3304 <__aeabi_dadd+0x19c>
    3302:	e08b      	b.n	341c <__aeabi_dadd+0x2b4>
    3304:	4667      	mov	r7, ip
    3306:	2f00      	cmp	r7, #0
    3308:	d03c      	beq.n	3384 <__aeabi_dadd+0x21c>
    330a:	4f7e      	ldr	r7, [pc, #504]	; (3504 <__aeabi_dadd+0x39c>)
    330c:	42bc      	cmp	r4, r7
    330e:	d100      	bne.n	3312 <__aeabi_dadd+0x1aa>
    3310:	e753      	b.n	31ba <__aeabi_dadd+0x52>
    3312:	2780      	movs	r7, #128	; 0x80
    3314:	043f      	lsls	r7, r7, #16
    3316:	4338      	orrs	r0, r7
    3318:	465b      	mov	r3, fp
    331a:	2b38      	cmp	r3, #56	; 0x38
    331c:	dc00      	bgt.n	3320 <__aeabi_dadd+0x1b8>
    331e:	e0f7      	b.n	3510 <__aeabi_dadd+0x3a8>
    3320:	4302      	orrs	r2, r0
    3322:	1e50      	subs	r0, r2, #1
    3324:	4182      	sbcs	r2, r0
    3326:	2000      	movs	r0, #0
    3328:	b2d2      	uxtb	r2, r2
    332a:	1953      	adds	r3, r2, r5
    332c:	1842      	adds	r2, r0, r1
    332e:	42ab      	cmp	r3, r5
    3330:	4189      	sbcs	r1, r1
    3332:	001d      	movs	r5, r3
    3334:	4249      	negs	r1, r1
    3336:	1889      	adds	r1, r1, r2
    3338:	020b      	lsls	r3, r1, #8
    333a:	d5cd      	bpl.n	32d8 <__aeabi_dadd+0x170>
    333c:	4b71      	ldr	r3, [pc, #452]	; (3504 <__aeabi_dadd+0x39c>)
    333e:	3401      	adds	r4, #1
    3340:	429c      	cmp	r4, r3
    3342:	d100      	bne.n	3346 <__aeabi_dadd+0x1de>
    3344:	e13d      	b.n	35c2 <__aeabi_dadd+0x45a>
    3346:	2001      	movs	r0, #1
    3348:	4a6f      	ldr	r2, [pc, #444]	; (3508 <__aeabi_dadd+0x3a0>)
    334a:	086b      	lsrs	r3, r5, #1
    334c:	400a      	ands	r2, r1
    334e:	4028      	ands	r0, r5
    3350:	4318      	orrs	r0, r3
    3352:	07d5      	lsls	r5, r2, #31
    3354:	4305      	orrs	r5, r0
    3356:	0851      	lsrs	r1, r2, #1
    3358:	e72f      	b.n	31ba <__aeabi_dadd+0x52>
    335a:	002b      	movs	r3, r5
    335c:	430b      	orrs	r3, r1
    335e:	d100      	bne.n	3362 <__aeabi_dadd+0x1fa>
    3360:	e1cb      	b.n	36fa <__aeabi_dadd+0x592>
    3362:	2380      	movs	r3, #128	; 0x80
    3364:	031b      	lsls	r3, r3, #12
    3366:	430b      	orrs	r3, r1
    3368:	031a      	lsls	r2, r3, #12
    336a:	0b12      	lsrs	r2, r2, #12
    336c:	e744      	b.n	31f8 <__aeabi_dadd+0x90>
    336e:	3e01      	subs	r6, #1
    3370:	2e00      	cmp	r6, #0
    3372:	d16d      	bne.n	3450 <__aeabi_dadd+0x2e8>
    3374:	1aae      	subs	r6, r5, r2
    3376:	42b5      	cmp	r5, r6
    3378:	419b      	sbcs	r3, r3
    337a:	1a09      	subs	r1, r1, r0
    337c:	425b      	negs	r3, r3
    337e:	1ac9      	subs	r1, r1, r3
    3380:	0035      	movs	r5, r6
    3382:	e775      	b.n	3270 <__aeabi_dadd+0x108>
    3384:	0007      	movs	r7, r0
    3386:	4317      	orrs	r7, r2
    3388:	d100      	bne.n	338c <__aeabi_dadd+0x224>
    338a:	e716      	b.n	31ba <__aeabi_dadd+0x52>
    338c:	2301      	movs	r3, #1
    338e:	425b      	negs	r3, r3
    3390:	469c      	mov	ip, r3
    3392:	44e3      	add	fp, ip
    3394:	465b      	mov	r3, fp
    3396:	2b00      	cmp	r3, #0
    3398:	d000      	beq.n	339c <__aeabi_dadd+0x234>
    339a:	e0e0      	b.n	355e <__aeabi_dadd+0x3f6>
    339c:	18aa      	adds	r2, r5, r2
    339e:	42aa      	cmp	r2, r5
    33a0:	419b      	sbcs	r3, r3
    33a2:	1809      	adds	r1, r1, r0
    33a4:	425b      	negs	r3, r3
    33a6:	1859      	adds	r1, r3, r1
    33a8:	0015      	movs	r5, r2
    33aa:	e7c5      	b.n	3338 <__aeabi_dadd+0x1d0>
    33ac:	2e00      	cmp	r6, #0
    33ae:	d175      	bne.n	349c <__aeabi_dadd+0x334>
    33b0:	1c66      	adds	r6, r4, #1
    33b2:	0576      	lsls	r6, r6, #21
    33b4:	0d76      	lsrs	r6, r6, #21
    33b6:	2e01      	cmp	r6, #1
    33b8:	dc00      	bgt.n	33bc <__aeabi_dadd+0x254>
    33ba:	e0f3      	b.n	35a4 <__aeabi_dadd+0x43c>
    33bc:	1aae      	subs	r6, r5, r2
    33be:	46b0      	mov	r8, r6
    33c0:	4545      	cmp	r5, r8
    33c2:	41bf      	sbcs	r7, r7
    33c4:	1a0e      	subs	r6, r1, r0
    33c6:	427f      	negs	r7, r7
    33c8:	1bf6      	subs	r6, r6, r7
    33ca:	0237      	lsls	r7, r6, #8
    33cc:	d400      	bmi.n	33d0 <__aeabi_dadd+0x268>
    33ce:	e08f      	b.n	34f0 <__aeabi_dadd+0x388>
    33d0:	1b55      	subs	r5, r2, r5
    33d2:	42aa      	cmp	r2, r5
    33d4:	41b6      	sbcs	r6, r6
    33d6:	1a41      	subs	r1, r0, r1
    33d8:	4276      	negs	r6, r6
    33da:	1b8e      	subs	r6, r1, r6
    33dc:	469a      	mov	sl, r3
    33de:	e74b      	b.n	3278 <__aeabi_dadd+0x110>
    33e0:	4656      	mov	r6, sl
    33e2:	2200      	movs	r2, #0
    33e4:	2500      	movs	r5, #0
    33e6:	e707      	b.n	31f8 <__aeabi_dadd+0x90>
    33e8:	0028      	movs	r0, r5
    33ea:	f001 fe17 	bl	501c <__clzsi2>
    33ee:	3020      	adds	r0, #32
    33f0:	0003      	movs	r3, r0
    33f2:	3b08      	subs	r3, #8
    33f4:	2b1f      	cmp	r3, #31
    33f6:	dc00      	bgt.n	33fa <__aeabi_dadd+0x292>
    33f8:	e749      	b.n	328e <__aeabi_dadd+0x126>
    33fa:	002a      	movs	r2, r5
    33fc:	3828      	subs	r0, #40	; 0x28
    33fe:	4082      	lsls	r2, r0
    3400:	2500      	movs	r5, #0
    3402:	429c      	cmp	r4, r3
    3404:	dc00      	bgt.n	3408 <__aeabi_dadd+0x2a0>
    3406:	e74d      	b.n	32a4 <__aeabi_dadd+0x13c>
    3408:	493f      	ldr	r1, [pc, #252]	; (3508 <__aeabi_dadd+0x3a0>)
    340a:	1ae4      	subs	r4, r4, r3
    340c:	4011      	ands	r1, r2
    340e:	e6d4      	b.n	31ba <__aeabi_dadd+0x52>
    3410:	4302      	orrs	r2, r0
    3412:	1e50      	subs	r0, r2, #1
    3414:	4182      	sbcs	r2, r0
    3416:	b2d3      	uxtb	r3, r2
    3418:	2200      	movs	r2, #0
    341a:	e722      	b.n	3262 <__aeabi_dadd+0xfa>
    341c:	2b00      	cmp	r3, #0
    341e:	d000      	beq.n	3422 <__aeabi_dadd+0x2ba>
    3420:	e0f3      	b.n	360a <__aeabi_dadd+0x4a2>
    3422:	1c63      	adds	r3, r4, #1
    3424:	469c      	mov	ip, r3
    3426:	055b      	lsls	r3, r3, #21
    3428:	0d5b      	lsrs	r3, r3, #21
    342a:	2b01      	cmp	r3, #1
    342c:	dc00      	bgt.n	3430 <__aeabi_dadd+0x2c8>
    342e:	e09f      	b.n	3570 <__aeabi_dadd+0x408>
    3430:	4b34      	ldr	r3, [pc, #208]	; (3504 <__aeabi_dadd+0x39c>)
    3432:	459c      	cmp	ip, r3
    3434:	d100      	bne.n	3438 <__aeabi_dadd+0x2d0>
    3436:	e0c3      	b.n	35c0 <__aeabi_dadd+0x458>
    3438:	18aa      	adds	r2, r5, r2
    343a:	1809      	adds	r1, r1, r0
    343c:	42aa      	cmp	r2, r5
    343e:	4180      	sbcs	r0, r0
    3440:	4240      	negs	r0, r0
    3442:	1841      	adds	r1, r0, r1
    3444:	07cd      	lsls	r5, r1, #31
    3446:	0852      	lsrs	r2, r2, #1
    3448:	4315      	orrs	r5, r2
    344a:	0849      	lsrs	r1, r1, #1
    344c:	4664      	mov	r4, ip
    344e:	e6b4      	b.n	31ba <__aeabi_dadd+0x52>
    3450:	4b2c      	ldr	r3, [pc, #176]	; (3504 <__aeabi_dadd+0x39c>)
    3452:	429c      	cmp	r4, r3
    3454:	d000      	beq.n	3458 <__aeabi_dadd+0x2f0>
    3456:	e6ec      	b.n	3232 <__aeabi_dadd+0xca>
    3458:	e6af      	b.n	31ba <__aeabi_dadd+0x52>
    345a:	0011      	movs	r1, r2
    345c:	3c1f      	subs	r4, #31
    345e:	40e1      	lsrs	r1, r4
    3460:	000c      	movs	r4, r1
    3462:	2b20      	cmp	r3, #32
    3464:	d100      	bne.n	3468 <__aeabi_dadd+0x300>
    3466:	e07f      	b.n	3568 <__aeabi_dadd+0x400>
    3468:	2140      	movs	r1, #64	; 0x40
    346a:	1acb      	subs	r3, r1, r3
    346c:	409a      	lsls	r2, r3
    346e:	4315      	orrs	r5, r2
    3470:	1e6a      	subs	r2, r5, #1
    3472:	4195      	sbcs	r5, r2
    3474:	2100      	movs	r1, #0
    3476:	4325      	orrs	r5, r4
    3478:	2400      	movs	r4, #0
    347a:	e72d      	b.n	32d8 <__aeabi_dadd+0x170>
    347c:	0033      	movs	r3, r6
    347e:	0007      	movs	r7, r0
    3480:	3b20      	subs	r3, #32
    3482:	40df      	lsrs	r7, r3
    3484:	003b      	movs	r3, r7
    3486:	2e20      	cmp	r6, #32
    3488:	d070      	beq.n	356c <__aeabi_dadd+0x404>
    348a:	2740      	movs	r7, #64	; 0x40
    348c:	1bbe      	subs	r6, r7, r6
    348e:	40b0      	lsls	r0, r6
    3490:	4302      	orrs	r2, r0
    3492:	1e50      	subs	r0, r2, #1
    3494:	4182      	sbcs	r2, r0
    3496:	4313      	orrs	r3, r2
    3498:	2200      	movs	r2, #0
    349a:	e6e2      	b.n	3262 <__aeabi_dadd+0xfa>
    349c:	2c00      	cmp	r4, #0
    349e:	d04f      	beq.n	3540 <__aeabi_dadd+0x3d8>
    34a0:	4c18      	ldr	r4, [pc, #96]	; (3504 <__aeabi_dadd+0x39c>)
    34a2:	45a4      	cmp	ip, r4
    34a4:	d100      	bne.n	34a8 <__aeabi_dadd+0x340>
    34a6:	e0ab      	b.n	3600 <__aeabi_dadd+0x498>
    34a8:	2480      	movs	r4, #128	; 0x80
    34aa:	0424      	lsls	r4, r4, #16
    34ac:	4276      	negs	r6, r6
    34ae:	4321      	orrs	r1, r4
    34b0:	2e38      	cmp	r6, #56	; 0x38
    34b2:	dd00      	ble.n	34b6 <__aeabi_dadd+0x34e>
    34b4:	e0df      	b.n	3676 <__aeabi_dadd+0x50e>
    34b6:	2e1f      	cmp	r6, #31
    34b8:	dd00      	ble.n	34bc <__aeabi_dadd+0x354>
    34ba:	e143      	b.n	3744 <__aeabi_dadd+0x5dc>
    34bc:	2720      	movs	r7, #32
    34be:	1bbc      	subs	r4, r7, r6
    34c0:	46a1      	mov	r9, r4
    34c2:	000c      	movs	r4, r1
    34c4:	464f      	mov	r7, r9
    34c6:	40bc      	lsls	r4, r7
    34c8:	46a0      	mov	r8, r4
    34ca:	002c      	movs	r4, r5
    34cc:	4647      	mov	r7, r8
    34ce:	40f4      	lsrs	r4, r6
    34d0:	433c      	orrs	r4, r7
    34d2:	464f      	mov	r7, r9
    34d4:	40bd      	lsls	r5, r7
    34d6:	1e6f      	subs	r7, r5, #1
    34d8:	41bd      	sbcs	r5, r7
    34da:	40f1      	lsrs	r1, r6
    34dc:	432c      	orrs	r4, r5
    34de:	1b15      	subs	r5, r2, r4
    34e0:	42aa      	cmp	r2, r5
    34e2:	4192      	sbcs	r2, r2
    34e4:	1a41      	subs	r1, r0, r1
    34e6:	4252      	negs	r2, r2
    34e8:	1a89      	subs	r1, r1, r2
    34ea:	4664      	mov	r4, ip
    34ec:	469a      	mov	sl, r3
    34ee:	e6bf      	b.n	3270 <__aeabi_dadd+0x108>
    34f0:	4641      	mov	r1, r8
    34f2:	4645      	mov	r5, r8
    34f4:	4331      	orrs	r1, r6
    34f6:	d000      	beq.n	34fa <__aeabi_dadd+0x392>
    34f8:	e6be      	b.n	3278 <__aeabi_dadd+0x110>
    34fa:	2600      	movs	r6, #0
    34fc:	2400      	movs	r4, #0
    34fe:	2500      	movs	r5, #0
    3500:	e6f2      	b.n	32e8 <__aeabi_dadd+0x180>
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	000007ff 	.word	0x000007ff
    3508:	ff7fffff 	.word	0xff7fffff
    350c:	800fffff 	.word	0x800fffff
    3510:	2b1f      	cmp	r3, #31
    3512:	dc59      	bgt.n	35c8 <__aeabi_dadd+0x460>
    3514:	2720      	movs	r7, #32
    3516:	1aff      	subs	r7, r7, r3
    3518:	46bc      	mov	ip, r7
    351a:	0007      	movs	r7, r0
    351c:	4663      	mov	r3, ip
    351e:	409f      	lsls	r7, r3
    3520:	465b      	mov	r3, fp
    3522:	46b9      	mov	r9, r7
    3524:	0017      	movs	r7, r2
    3526:	40df      	lsrs	r7, r3
    3528:	46b8      	mov	r8, r7
    352a:	464f      	mov	r7, r9
    352c:	4643      	mov	r3, r8
    352e:	431f      	orrs	r7, r3
    3530:	4663      	mov	r3, ip
    3532:	409a      	lsls	r2, r3
    3534:	1e53      	subs	r3, r2, #1
    3536:	419a      	sbcs	r2, r3
    3538:	465b      	mov	r3, fp
    353a:	433a      	orrs	r2, r7
    353c:	40d8      	lsrs	r0, r3
    353e:	e6f4      	b.n	332a <__aeabi_dadd+0x1c2>
    3540:	000c      	movs	r4, r1
    3542:	432c      	orrs	r4, r5
    3544:	d05c      	beq.n	3600 <__aeabi_dadd+0x498>
    3546:	43f6      	mvns	r6, r6
    3548:	2e00      	cmp	r6, #0
    354a:	d155      	bne.n	35f8 <__aeabi_dadd+0x490>
    354c:	1b55      	subs	r5, r2, r5
    354e:	42aa      	cmp	r2, r5
    3550:	41a4      	sbcs	r4, r4
    3552:	1a41      	subs	r1, r0, r1
    3554:	4264      	negs	r4, r4
    3556:	1b09      	subs	r1, r1, r4
    3558:	469a      	mov	sl, r3
    355a:	4664      	mov	r4, ip
    355c:	e688      	b.n	3270 <__aeabi_dadd+0x108>
    355e:	4f96      	ldr	r7, [pc, #600]	; (37b8 <__aeabi_dadd+0x650>)
    3560:	42bc      	cmp	r4, r7
    3562:	d000      	beq.n	3566 <__aeabi_dadd+0x3fe>
    3564:	e6d8      	b.n	3318 <__aeabi_dadd+0x1b0>
    3566:	e628      	b.n	31ba <__aeabi_dadd+0x52>
    3568:	2200      	movs	r2, #0
    356a:	e780      	b.n	346e <__aeabi_dadd+0x306>
    356c:	2000      	movs	r0, #0
    356e:	e78f      	b.n	3490 <__aeabi_dadd+0x328>
    3570:	000b      	movs	r3, r1
    3572:	432b      	orrs	r3, r5
    3574:	2c00      	cmp	r4, #0
    3576:	d000      	beq.n	357a <__aeabi_dadd+0x412>
    3578:	e0c2      	b.n	3700 <__aeabi_dadd+0x598>
    357a:	2b00      	cmp	r3, #0
    357c:	d100      	bne.n	3580 <__aeabi_dadd+0x418>
    357e:	e101      	b.n	3784 <__aeabi_dadd+0x61c>
    3580:	0003      	movs	r3, r0
    3582:	4313      	orrs	r3, r2
    3584:	d100      	bne.n	3588 <__aeabi_dadd+0x420>
    3586:	e618      	b.n	31ba <__aeabi_dadd+0x52>
    3588:	18ab      	adds	r3, r5, r2
    358a:	42ab      	cmp	r3, r5
    358c:	41b6      	sbcs	r6, r6
    358e:	1809      	adds	r1, r1, r0
    3590:	4276      	negs	r6, r6
    3592:	1871      	adds	r1, r6, r1
    3594:	020a      	lsls	r2, r1, #8
    3596:	d400      	bmi.n	359a <__aeabi_dadd+0x432>
    3598:	e109      	b.n	37ae <__aeabi_dadd+0x646>
    359a:	4a88      	ldr	r2, [pc, #544]	; (37bc <__aeabi_dadd+0x654>)
    359c:	001d      	movs	r5, r3
    359e:	4011      	ands	r1, r2
    35a0:	4664      	mov	r4, ip
    35a2:	e60a      	b.n	31ba <__aeabi_dadd+0x52>
    35a4:	2c00      	cmp	r4, #0
    35a6:	d15b      	bne.n	3660 <__aeabi_dadd+0x4f8>
    35a8:	000e      	movs	r6, r1
    35aa:	432e      	orrs	r6, r5
    35ac:	d000      	beq.n	35b0 <__aeabi_dadd+0x448>
    35ae:	e08a      	b.n	36c6 <__aeabi_dadd+0x55e>
    35b0:	0001      	movs	r1, r0
    35b2:	4311      	orrs	r1, r2
    35b4:	d100      	bne.n	35b8 <__aeabi_dadd+0x450>
    35b6:	e0c2      	b.n	373e <__aeabi_dadd+0x5d6>
    35b8:	0001      	movs	r1, r0
    35ba:	0015      	movs	r5, r2
    35bc:	469a      	mov	sl, r3
    35be:	e5fc      	b.n	31ba <__aeabi_dadd+0x52>
    35c0:	4664      	mov	r4, ip
    35c2:	2100      	movs	r1, #0
    35c4:	2500      	movs	r5, #0
    35c6:	e68f      	b.n	32e8 <__aeabi_dadd+0x180>
    35c8:	2320      	movs	r3, #32
    35ca:	425b      	negs	r3, r3
    35cc:	469c      	mov	ip, r3
    35ce:	44dc      	add	ip, fp
    35d0:	4663      	mov	r3, ip
    35d2:	0007      	movs	r7, r0
    35d4:	40df      	lsrs	r7, r3
    35d6:	465b      	mov	r3, fp
    35d8:	46bc      	mov	ip, r7
    35da:	2b20      	cmp	r3, #32
    35dc:	d100      	bne.n	35e0 <__aeabi_dadd+0x478>
    35de:	e0ac      	b.n	373a <__aeabi_dadd+0x5d2>
    35e0:	2340      	movs	r3, #64	; 0x40
    35e2:	465f      	mov	r7, fp
    35e4:	1bdb      	subs	r3, r3, r7
    35e6:	4098      	lsls	r0, r3
    35e8:	4302      	orrs	r2, r0
    35ea:	1e50      	subs	r0, r2, #1
    35ec:	4182      	sbcs	r2, r0
    35ee:	4663      	mov	r3, ip
    35f0:	4313      	orrs	r3, r2
    35f2:	001a      	movs	r2, r3
    35f4:	2000      	movs	r0, #0
    35f6:	e698      	b.n	332a <__aeabi_dadd+0x1c2>
    35f8:	4c6f      	ldr	r4, [pc, #444]	; (37b8 <__aeabi_dadd+0x650>)
    35fa:	45a4      	cmp	ip, r4
    35fc:	d000      	beq.n	3600 <__aeabi_dadd+0x498>
    35fe:	e757      	b.n	34b0 <__aeabi_dadd+0x348>
    3600:	0001      	movs	r1, r0
    3602:	0015      	movs	r5, r2
    3604:	4664      	mov	r4, ip
    3606:	469a      	mov	sl, r3
    3608:	e5d7      	b.n	31ba <__aeabi_dadd+0x52>
    360a:	2c00      	cmp	r4, #0
    360c:	d139      	bne.n	3682 <__aeabi_dadd+0x51a>
    360e:	000c      	movs	r4, r1
    3610:	432c      	orrs	r4, r5
    3612:	d06e      	beq.n	36f2 <__aeabi_dadd+0x58a>
    3614:	43db      	mvns	r3, r3
    3616:	2b00      	cmp	r3, #0
    3618:	d01a      	beq.n	3650 <__aeabi_dadd+0x4e8>
    361a:	4c67      	ldr	r4, [pc, #412]	; (37b8 <__aeabi_dadd+0x650>)
    361c:	45a4      	cmp	ip, r4
    361e:	d068      	beq.n	36f2 <__aeabi_dadd+0x58a>
    3620:	2b38      	cmp	r3, #56	; 0x38
    3622:	dd00      	ble.n	3626 <__aeabi_dadd+0x4be>
    3624:	e0a4      	b.n	3770 <__aeabi_dadd+0x608>
    3626:	2b1f      	cmp	r3, #31
    3628:	dd00      	ble.n	362c <__aeabi_dadd+0x4c4>
    362a:	e0ae      	b.n	378a <__aeabi_dadd+0x622>
    362c:	2420      	movs	r4, #32
    362e:	000f      	movs	r7, r1
    3630:	1ae4      	subs	r4, r4, r3
    3632:	40a7      	lsls	r7, r4
    3634:	46b9      	mov	r9, r7
    3636:	002f      	movs	r7, r5
    3638:	40df      	lsrs	r7, r3
    363a:	46b8      	mov	r8, r7
    363c:	46a3      	mov	fp, r4
    363e:	464f      	mov	r7, r9
    3640:	4644      	mov	r4, r8
    3642:	4327      	orrs	r7, r4
    3644:	465c      	mov	r4, fp
    3646:	40a5      	lsls	r5, r4
    3648:	1e6c      	subs	r4, r5, #1
    364a:	41a5      	sbcs	r5, r4
    364c:	40d9      	lsrs	r1, r3
    364e:	433d      	orrs	r5, r7
    3650:	18ad      	adds	r5, r5, r2
    3652:	4295      	cmp	r5, r2
    3654:	419b      	sbcs	r3, r3
    3656:	1809      	adds	r1, r1, r0
    3658:	425b      	negs	r3, r3
    365a:	1859      	adds	r1, r3, r1
    365c:	4664      	mov	r4, ip
    365e:	e66b      	b.n	3338 <__aeabi_dadd+0x1d0>
    3660:	000c      	movs	r4, r1
    3662:	432c      	orrs	r4, r5
    3664:	d115      	bne.n	3692 <__aeabi_dadd+0x52a>
    3666:	0001      	movs	r1, r0
    3668:	4311      	orrs	r1, r2
    366a:	d07b      	beq.n	3764 <__aeabi_dadd+0x5fc>
    366c:	0001      	movs	r1, r0
    366e:	0015      	movs	r5, r2
    3670:	469a      	mov	sl, r3
    3672:	4c51      	ldr	r4, [pc, #324]	; (37b8 <__aeabi_dadd+0x650>)
    3674:	e5a1      	b.n	31ba <__aeabi_dadd+0x52>
    3676:	430d      	orrs	r5, r1
    3678:	1e69      	subs	r1, r5, #1
    367a:	418d      	sbcs	r5, r1
    367c:	2100      	movs	r1, #0
    367e:	b2ec      	uxtb	r4, r5
    3680:	e72d      	b.n	34de <__aeabi_dadd+0x376>
    3682:	4c4d      	ldr	r4, [pc, #308]	; (37b8 <__aeabi_dadd+0x650>)
    3684:	45a4      	cmp	ip, r4
    3686:	d034      	beq.n	36f2 <__aeabi_dadd+0x58a>
    3688:	2480      	movs	r4, #128	; 0x80
    368a:	0424      	lsls	r4, r4, #16
    368c:	425b      	negs	r3, r3
    368e:	4321      	orrs	r1, r4
    3690:	e7c6      	b.n	3620 <__aeabi_dadd+0x4b8>
    3692:	0004      	movs	r4, r0
    3694:	4314      	orrs	r4, r2
    3696:	d04e      	beq.n	3736 <__aeabi_dadd+0x5ce>
    3698:	08ed      	lsrs	r5, r5, #3
    369a:	074c      	lsls	r4, r1, #29
    369c:	432c      	orrs	r4, r5
    369e:	2580      	movs	r5, #128	; 0x80
    36a0:	08c9      	lsrs	r1, r1, #3
    36a2:	032d      	lsls	r5, r5, #12
    36a4:	4229      	tst	r1, r5
    36a6:	d008      	beq.n	36ba <__aeabi_dadd+0x552>
    36a8:	08c6      	lsrs	r6, r0, #3
    36aa:	422e      	tst	r6, r5
    36ac:	d105      	bne.n	36ba <__aeabi_dadd+0x552>
    36ae:	08d2      	lsrs	r2, r2, #3
    36b0:	0741      	lsls	r1, r0, #29
    36b2:	4311      	orrs	r1, r2
    36b4:	000c      	movs	r4, r1
    36b6:	469a      	mov	sl, r3
    36b8:	0031      	movs	r1, r6
    36ba:	0f62      	lsrs	r2, r4, #29
    36bc:	00c9      	lsls	r1, r1, #3
    36be:	00e5      	lsls	r5, r4, #3
    36c0:	4311      	orrs	r1, r2
    36c2:	4c3d      	ldr	r4, [pc, #244]	; (37b8 <__aeabi_dadd+0x650>)
    36c4:	e579      	b.n	31ba <__aeabi_dadd+0x52>
    36c6:	0006      	movs	r6, r0
    36c8:	4316      	orrs	r6, r2
    36ca:	d100      	bne.n	36ce <__aeabi_dadd+0x566>
    36cc:	e575      	b.n	31ba <__aeabi_dadd+0x52>
    36ce:	1aae      	subs	r6, r5, r2
    36d0:	46b0      	mov	r8, r6
    36d2:	4545      	cmp	r5, r8
    36d4:	41bf      	sbcs	r7, r7
    36d6:	1a0e      	subs	r6, r1, r0
    36d8:	427f      	negs	r7, r7
    36da:	1bf6      	subs	r6, r6, r7
    36dc:	0237      	lsls	r7, r6, #8
    36de:	d400      	bmi.n	36e2 <__aeabi_dadd+0x57a>
    36e0:	e5f4      	b.n	32cc <__aeabi_dadd+0x164>
    36e2:	1b55      	subs	r5, r2, r5
    36e4:	42aa      	cmp	r2, r5
    36e6:	41b6      	sbcs	r6, r6
    36e8:	1a41      	subs	r1, r0, r1
    36ea:	4276      	negs	r6, r6
    36ec:	1b89      	subs	r1, r1, r6
    36ee:	469a      	mov	sl, r3
    36f0:	e563      	b.n	31ba <__aeabi_dadd+0x52>
    36f2:	0001      	movs	r1, r0
    36f4:	0015      	movs	r5, r2
    36f6:	4664      	mov	r4, ip
    36f8:	e55f      	b.n	31ba <__aeabi_dadd+0x52>
    36fa:	2200      	movs	r2, #0
    36fc:	2500      	movs	r5, #0
    36fe:	e57b      	b.n	31f8 <__aeabi_dadd+0x90>
    3700:	2b00      	cmp	r3, #0
    3702:	d03b      	beq.n	377c <__aeabi_dadd+0x614>
    3704:	0003      	movs	r3, r0
    3706:	4313      	orrs	r3, r2
    3708:	d015      	beq.n	3736 <__aeabi_dadd+0x5ce>
    370a:	08ed      	lsrs	r5, r5, #3
    370c:	074b      	lsls	r3, r1, #29
    370e:	432b      	orrs	r3, r5
    3710:	2580      	movs	r5, #128	; 0x80
    3712:	08c9      	lsrs	r1, r1, #3
    3714:	032d      	lsls	r5, r5, #12
    3716:	4229      	tst	r1, r5
    3718:	d007      	beq.n	372a <__aeabi_dadd+0x5c2>
    371a:	08c4      	lsrs	r4, r0, #3
    371c:	422c      	tst	r4, r5
    371e:	d104      	bne.n	372a <__aeabi_dadd+0x5c2>
    3720:	0741      	lsls	r1, r0, #29
    3722:	000b      	movs	r3, r1
    3724:	0021      	movs	r1, r4
    3726:	08d2      	lsrs	r2, r2, #3
    3728:	4313      	orrs	r3, r2
    372a:	00c9      	lsls	r1, r1, #3
    372c:	0f5a      	lsrs	r2, r3, #29
    372e:	4311      	orrs	r1, r2
    3730:	00dd      	lsls	r5, r3, #3
    3732:	4c21      	ldr	r4, [pc, #132]	; (37b8 <__aeabi_dadd+0x650>)
    3734:	e541      	b.n	31ba <__aeabi_dadd+0x52>
    3736:	4c20      	ldr	r4, [pc, #128]	; (37b8 <__aeabi_dadd+0x650>)
    3738:	e53f      	b.n	31ba <__aeabi_dadd+0x52>
    373a:	2000      	movs	r0, #0
    373c:	e754      	b.n	35e8 <__aeabi_dadd+0x480>
    373e:	2600      	movs	r6, #0
    3740:	2500      	movs	r5, #0
    3742:	e5d1      	b.n	32e8 <__aeabi_dadd+0x180>
    3744:	0034      	movs	r4, r6
    3746:	000f      	movs	r7, r1
    3748:	3c20      	subs	r4, #32
    374a:	40e7      	lsrs	r7, r4
    374c:	003c      	movs	r4, r7
    374e:	2e20      	cmp	r6, #32
    3750:	d02b      	beq.n	37aa <__aeabi_dadd+0x642>
    3752:	2740      	movs	r7, #64	; 0x40
    3754:	1bbe      	subs	r6, r7, r6
    3756:	40b1      	lsls	r1, r6
    3758:	430d      	orrs	r5, r1
    375a:	1e69      	subs	r1, r5, #1
    375c:	418d      	sbcs	r5, r1
    375e:	2100      	movs	r1, #0
    3760:	432c      	orrs	r4, r5
    3762:	e6bc      	b.n	34de <__aeabi_dadd+0x376>
    3764:	2180      	movs	r1, #128	; 0x80
    3766:	2600      	movs	r6, #0
    3768:	0309      	lsls	r1, r1, #12
    376a:	4c13      	ldr	r4, [pc, #76]	; (37b8 <__aeabi_dadd+0x650>)
    376c:	2500      	movs	r5, #0
    376e:	e5bb      	b.n	32e8 <__aeabi_dadd+0x180>
    3770:	430d      	orrs	r5, r1
    3772:	1e69      	subs	r1, r5, #1
    3774:	418d      	sbcs	r5, r1
    3776:	2100      	movs	r1, #0
    3778:	b2ed      	uxtb	r5, r5
    377a:	e769      	b.n	3650 <__aeabi_dadd+0x4e8>
    377c:	0001      	movs	r1, r0
    377e:	0015      	movs	r5, r2
    3780:	4c0d      	ldr	r4, [pc, #52]	; (37b8 <__aeabi_dadd+0x650>)
    3782:	e51a      	b.n	31ba <__aeabi_dadd+0x52>
    3784:	0001      	movs	r1, r0
    3786:	0015      	movs	r5, r2
    3788:	e517      	b.n	31ba <__aeabi_dadd+0x52>
    378a:	001c      	movs	r4, r3
    378c:	000f      	movs	r7, r1
    378e:	3c20      	subs	r4, #32
    3790:	40e7      	lsrs	r7, r4
    3792:	003c      	movs	r4, r7
    3794:	2b20      	cmp	r3, #32
    3796:	d00c      	beq.n	37b2 <__aeabi_dadd+0x64a>
    3798:	2740      	movs	r7, #64	; 0x40
    379a:	1afb      	subs	r3, r7, r3
    379c:	4099      	lsls	r1, r3
    379e:	430d      	orrs	r5, r1
    37a0:	1e69      	subs	r1, r5, #1
    37a2:	418d      	sbcs	r5, r1
    37a4:	2100      	movs	r1, #0
    37a6:	4325      	orrs	r5, r4
    37a8:	e752      	b.n	3650 <__aeabi_dadd+0x4e8>
    37aa:	2100      	movs	r1, #0
    37ac:	e7d4      	b.n	3758 <__aeabi_dadd+0x5f0>
    37ae:	001d      	movs	r5, r3
    37b0:	e592      	b.n	32d8 <__aeabi_dadd+0x170>
    37b2:	2100      	movs	r1, #0
    37b4:	e7f3      	b.n	379e <__aeabi_dadd+0x636>
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	000007ff 	.word	0x000007ff
    37bc:	ff7fffff 	.word	0xff7fffff

000037c0 <__aeabi_ddiv>:
    37c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37c2:	4656      	mov	r6, sl
    37c4:	464d      	mov	r5, r9
    37c6:	4644      	mov	r4, r8
    37c8:	465f      	mov	r7, fp
    37ca:	b4f0      	push	{r4, r5, r6, r7}
    37cc:	001d      	movs	r5, r3
    37ce:	030e      	lsls	r6, r1, #12
    37d0:	004c      	lsls	r4, r1, #1
    37d2:	0fcb      	lsrs	r3, r1, #31
    37d4:	b087      	sub	sp, #28
    37d6:	0007      	movs	r7, r0
    37d8:	4692      	mov	sl, r2
    37da:	4681      	mov	r9, r0
    37dc:	0b36      	lsrs	r6, r6, #12
    37de:	0d64      	lsrs	r4, r4, #21
    37e0:	4698      	mov	r8, r3
    37e2:	d06a      	beq.n	38ba <__aeabi_ddiv+0xfa>
    37e4:	4b6d      	ldr	r3, [pc, #436]	; (399c <__aeabi_ddiv+0x1dc>)
    37e6:	429c      	cmp	r4, r3
    37e8:	d035      	beq.n	3856 <__aeabi_ddiv+0x96>
    37ea:	2280      	movs	r2, #128	; 0x80
    37ec:	0f43      	lsrs	r3, r0, #29
    37ee:	0412      	lsls	r2, r2, #16
    37f0:	4313      	orrs	r3, r2
    37f2:	00f6      	lsls	r6, r6, #3
    37f4:	431e      	orrs	r6, r3
    37f6:	00c3      	lsls	r3, r0, #3
    37f8:	4699      	mov	r9, r3
    37fa:	4b69      	ldr	r3, [pc, #420]	; (39a0 <__aeabi_ddiv+0x1e0>)
    37fc:	2700      	movs	r7, #0
    37fe:	469c      	mov	ip, r3
    3800:	2300      	movs	r3, #0
    3802:	4464      	add	r4, ip
    3804:	9302      	str	r3, [sp, #8]
    3806:	032b      	lsls	r3, r5, #12
    3808:	0068      	lsls	r0, r5, #1
    380a:	0b1b      	lsrs	r3, r3, #12
    380c:	0fed      	lsrs	r5, r5, #31
    380e:	4651      	mov	r1, sl
    3810:	469b      	mov	fp, r3
    3812:	0d40      	lsrs	r0, r0, #21
    3814:	9500      	str	r5, [sp, #0]
    3816:	d100      	bne.n	381a <__aeabi_ddiv+0x5a>
    3818:	e078      	b.n	390c <__aeabi_ddiv+0x14c>
    381a:	4b60      	ldr	r3, [pc, #384]	; (399c <__aeabi_ddiv+0x1dc>)
    381c:	4298      	cmp	r0, r3
    381e:	d06c      	beq.n	38fa <__aeabi_ddiv+0x13a>
    3820:	465b      	mov	r3, fp
    3822:	00da      	lsls	r2, r3, #3
    3824:	0f4b      	lsrs	r3, r1, #29
    3826:	2180      	movs	r1, #128	; 0x80
    3828:	0409      	lsls	r1, r1, #16
    382a:	430b      	orrs	r3, r1
    382c:	4313      	orrs	r3, r2
    382e:	469b      	mov	fp, r3
    3830:	4653      	mov	r3, sl
    3832:	00d9      	lsls	r1, r3, #3
    3834:	4b5a      	ldr	r3, [pc, #360]	; (39a0 <__aeabi_ddiv+0x1e0>)
    3836:	469c      	mov	ip, r3
    3838:	2300      	movs	r3, #0
    383a:	4460      	add	r0, ip
    383c:	4642      	mov	r2, r8
    383e:	1a20      	subs	r0, r4, r0
    3840:	406a      	eors	r2, r5
    3842:	4692      	mov	sl, r2
    3844:	9001      	str	r0, [sp, #4]
    3846:	431f      	orrs	r7, r3
    3848:	2f0f      	cmp	r7, #15
    384a:	d900      	bls.n	384e <__aeabi_ddiv+0x8e>
    384c:	e0b0      	b.n	39b0 <__aeabi_ddiv+0x1f0>
    384e:	4855      	ldr	r0, [pc, #340]	; (39a4 <__aeabi_ddiv+0x1e4>)
    3850:	00bf      	lsls	r7, r7, #2
    3852:	59c0      	ldr	r0, [r0, r7]
    3854:	4687      	mov	pc, r0
    3856:	4337      	orrs	r7, r6
    3858:	d000      	beq.n	385c <__aeabi_ddiv+0x9c>
    385a:	e088      	b.n	396e <__aeabi_ddiv+0x1ae>
    385c:	2300      	movs	r3, #0
    385e:	4699      	mov	r9, r3
    3860:	3302      	adds	r3, #2
    3862:	2708      	movs	r7, #8
    3864:	2600      	movs	r6, #0
    3866:	9302      	str	r3, [sp, #8]
    3868:	e7cd      	b.n	3806 <__aeabi_ddiv+0x46>
    386a:	4643      	mov	r3, r8
    386c:	46b3      	mov	fp, r6
    386e:	4649      	mov	r1, r9
    3870:	9300      	str	r3, [sp, #0]
    3872:	9b02      	ldr	r3, [sp, #8]
    3874:	9a00      	ldr	r2, [sp, #0]
    3876:	4692      	mov	sl, r2
    3878:	2b02      	cmp	r3, #2
    387a:	d000      	beq.n	387e <__aeabi_ddiv+0xbe>
    387c:	e1bf      	b.n	3bfe <__aeabi_ddiv+0x43e>
    387e:	2100      	movs	r1, #0
    3880:	4653      	mov	r3, sl
    3882:	2201      	movs	r2, #1
    3884:	2600      	movs	r6, #0
    3886:	4689      	mov	r9, r1
    3888:	401a      	ands	r2, r3
    388a:	4b44      	ldr	r3, [pc, #272]	; (399c <__aeabi_ddiv+0x1dc>)
    388c:	2100      	movs	r1, #0
    388e:	0336      	lsls	r6, r6, #12
    3890:	0d0c      	lsrs	r4, r1, #20
    3892:	0524      	lsls	r4, r4, #20
    3894:	0b36      	lsrs	r6, r6, #12
    3896:	4326      	orrs	r6, r4
    3898:	4c43      	ldr	r4, [pc, #268]	; (39a8 <__aeabi_ddiv+0x1e8>)
    389a:	051b      	lsls	r3, r3, #20
    389c:	4026      	ands	r6, r4
    389e:	431e      	orrs	r6, r3
    38a0:	0076      	lsls	r6, r6, #1
    38a2:	07d2      	lsls	r2, r2, #31
    38a4:	0876      	lsrs	r6, r6, #1
    38a6:	4316      	orrs	r6, r2
    38a8:	4648      	mov	r0, r9
    38aa:	0031      	movs	r1, r6
    38ac:	b007      	add	sp, #28
    38ae:	bc3c      	pop	{r2, r3, r4, r5}
    38b0:	4690      	mov	r8, r2
    38b2:	4699      	mov	r9, r3
    38b4:	46a2      	mov	sl, r4
    38b6:	46ab      	mov	fp, r5
    38b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ba:	0033      	movs	r3, r6
    38bc:	4303      	orrs	r3, r0
    38be:	d04f      	beq.n	3960 <__aeabi_ddiv+0x1a0>
    38c0:	2e00      	cmp	r6, #0
    38c2:	d100      	bne.n	38c6 <__aeabi_ddiv+0x106>
    38c4:	e1bc      	b.n	3c40 <__aeabi_ddiv+0x480>
    38c6:	0030      	movs	r0, r6
    38c8:	f001 fba8 	bl	501c <__clzsi2>
    38cc:	0003      	movs	r3, r0
    38ce:	3b0b      	subs	r3, #11
    38d0:	2b1c      	cmp	r3, #28
    38d2:	dd00      	ble.n	38d6 <__aeabi_ddiv+0x116>
    38d4:	e1ad      	b.n	3c32 <__aeabi_ddiv+0x472>
    38d6:	221d      	movs	r2, #29
    38d8:	0001      	movs	r1, r0
    38da:	1ad3      	subs	r3, r2, r3
    38dc:	3908      	subs	r1, #8
    38de:	003a      	movs	r2, r7
    38e0:	408f      	lsls	r7, r1
    38e2:	408e      	lsls	r6, r1
    38e4:	40da      	lsrs	r2, r3
    38e6:	46b9      	mov	r9, r7
    38e8:	4316      	orrs	r6, r2
    38ea:	4b30      	ldr	r3, [pc, #192]	; (39ac <__aeabi_ddiv+0x1ec>)
    38ec:	2700      	movs	r7, #0
    38ee:	469c      	mov	ip, r3
    38f0:	2300      	movs	r3, #0
    38f2:	4460      	add	r0, ip
    38f4:	4244      	negs	r4, r0
    38f6:	9302      	str	r3, [sp, #8]
    38f8:	e785      	b.n	3806 <__aeabi_ddiv+0x46>
    38fa:	4653      	mov	r3, sl
    38fc:	465a      	mov	r2, fp
    38fe:	4313      	orrs	r3, r2
    3900:	d12c      	bne.n	395c <__aeabi_ddiv+0x19c>
    3902:	2300      	movs	r3, #0
    3904:	2100      	movs	r1, #0
    3906:	469b      	mov	fp, r3
    3908:	3302      	adds	r3, #2
    390a:	e797      	b.n	383c <__aeabi_ddiv+0x7c>
    390c:	430b      	orrs	r3, r1
    390e:	d020      	beq.n	3952 <__aeabi_ddiv+0x192>
    3910:	465b      	mov	r3, fp
    3912:	2b00      	cmp	r3, #0
    3914:	d100      	bne.n	3918 <__aeabi_ddiv+0x158>
    3916:	e19e      	b.n	3c56 <__aeabi_ddiv+0x496>
    3918:	4658      	mov	r0, fp
    391a:	f001 fb7f 	bl	501c <__clzsi2>
    391e:	0003      	movs	r3, r0
    3920:	3b0b      	subs	r3, #11
    3922:	2b1c      	cmp	r3, #28
    3924:	dd00      	ble.n	3928 <__aeabi_ddiv+0x168>
    3926:	e18f      	b.n	3c48 <__aeabi_ddiv+0x488>
    3928:	0002      	movs	r2, r0
    392a:	4659      	mov	r1, fp
    392c:	3a08      	subs	r2, #8
    392e:	4091      	lsls	r1, r2
    3930:	468b      	mov	fp, r1
    3932:	211d      	movs	r1, #29
    3934:	1acb      	subs	r3, r1, r3
    3936:	4651      	mov	r1, sl
    3938:	40d9      	lsrs	r1, r3
    393a:	000b      	movs	r3, r1
    393c:	4659      	mov	r1, fp
    393e:	430b      	orrs	r3, r1
    3940:	4651      	mov	r1, sl
    3942:	469b      	mov	fp, r3
    3944:	4091      	lsls	r1, r2
    3946:	4b19      	ldr	r3, [pc, #100]	; (39ac <__aeabi_ddiv+0x1ec>)
    3948:	469c      	mov	ip, r3
    394a:	4460      	add	r0, ip
    394c:	4240      	negs	r0, r0
    394e:	2300      	movs	r3, #0
    3950:	e774      	b.n	383c <__aeabi_ddiv+0x7c>
    3952:	2300      	movs	r3, #0
    3954:	2100      	movs	r1, #0
    3956:	469b      	mov	fp, r3
    3958:	3301      	adds	r3, #1
    395a:	e76f      	b.n	383c <__aeabi_ddiv+0x7c>
    395c:	2303      	movs	r3, #3
    395e:	e76d      	b.n	383c <__aeabi_ddiv+0x7c>
    3960:	2300      	movs	r3, #0
    3962:	4699      	mov	r9, r3
    3964:	3301      	adds	r3, #1
    3966:	2704      	movs	r7, #4
    3968:	2600      	movs	r6, #0
    396a:	9302      	str	r3, [sp, #8]
    396c:	e74b      	b.n	3806 <__aeabi_ddiv+0x46>
    396e:	2303      	movs	r3, #3
    3970:	270c      	movs	r7, #12
    3972:	9302      	str	r3, [sp, #8]
    3974:	e747      	b.n	3806 <__aeabi_ddiv+0x46>
    3976:	2201      	movs	r2, #1
    3978:	1ad5      	subs	r5, r2, r3
    397a:	2d38      	cmp	r5, #56	; 0x38
    397c:	dc00      	bgt.n	3980 <__aeabi_ddiv+0x1c0>
    397e:	e1b0      	b.n	3ce2 <__aeabi_ddiv+0x522>
    3980:	4653      	mov	r3, sl
    3982:	401a      	ands	r2, r3
    3984:	2100      	movs	r1, #0
    3986:	2300      	movs	r3, #0
    3988:	2600      	movs	r6, #0
    398a:	4689      	mov	r9, r1
    398c:	e77e      	b.n	388c <__aeabi_ddiv+0xcc>
    398e:	2300      	movs	r3, #0
    3990:	2680      	movs	r6, #128	; 0x80
    3992:	4699      	mov	r9, r3
    3994:	2200      	movs	r2, #0
    3996:	0336      	lsls	r6, r6, #12
    3998:	4b00      	ldr	r3, [pc, #0]	; (399c <__aeabi_ddiv+0x1dc>)
    399a:	e777      	b.n	388c <__aeabi_ddiv+0xcc>
    399c:	000007ff 	.word	0x000007ff
    39a0:	fffffc01 	.word	0xfffffc01
    39a4:	000053f0 	.word	0x000053f0
    39a8:	800fffff 	.word	0x800fffff
    39ac:	000003f3 	.word	0x000003f3
    39b0:	455e      	cmp	r6, fp
    39b2:	d900      	bls.n	39b6 <__aeabi_ddiv+0x1f6>
    39b4:	e172      	b.n	3c9c <__aeabi_ddiv+0x4dc>
    39b6:	d100      	bne.n	39ba <__aeabi_ddiv+0x1fa>
    39b8:	e16d      	b.n	3c96 <__aeabi_ddiv+0x4d6>
    39ba:	9b01      	ldr	r3, [sp, #4]
    39bc:	464d      	mov	r5, r9
    39be:	3b01      	subs	r3, #1
    39c0:	9301      	str	r3, [sp, #4]
    39c2:	2300      	movs	r3, #0
    39c4:	0034      	movs	r4, r6
    39c6:	9302      	str	r3, [sp, #8]
    39c8:	465b      	mov	r3, fp
    39ca:	021e      	lsls	r6, r3, #8
    39cc:	0e0b      	lsrs	r3, r1, #24
    39ce:	431e      	orrs	r6, r3
    39d0:	020b      	lsls	r3, r1, #8
    39d2:	9303      	str	r3, [sp, #12]
    39d4:	0c33      	lsrs	r3, r6, #16
    39d6:	4699      	mov	r9, r3
    39d8:	0433      	lsls	r3, r6, #16
    39da:	0c1b      	lsrs	r3, r3, #16
    39dc:	4649      	mov	r1, r9
    39de:	0020      	movs	r0, r4
    39e0:	9300      	str	r3, [sp, #0]
    39e2:	f001 fa8f 	bl	4f04 <__aeabi_uidiv>
    39e6:	9b00      	ldr	r3, [sp, #0]
    39e8:	0037      	movs	r7, r6
    39ea:	4343      	muls	r3, r0
    39ec:	0006      	movs	r6, r0
    39ee:	4649      	mov	r1, r9
    39f0:	0020      	movs	r0, r4
    39f2:	4698      	mov	r8, r3
    39f4:	f001 fb0c 	bl	5010 <__aeabi_uidivmod>
    39f8:	0c2c      	lsrs	r4, r5, #16
    39fa:	0409      	lsls	r1, r1, #16
    39fc:	430c      	orrs	r4, r1
    39fe:	45a0      	cmp	r8, r4
    3a00:	d909      	bls.n	3a16 <__aeabi_ddiv+0x256>
    3a02:	19e4      	adds	r4, r4, r7
    3a04:	1e73      	subs	r3, r6, #1
    3a06:	42a7      	cmp	r7, r4
    3a08:	d900      	bls.n	3a0c <__aeabi_ddiv+0x24c>
    3a0a:	e15c      	b.n	3cc6 <__aeabi_ddiv+0x506>
    3a0c:	45a0      	cmp	r8, r4
    3a0e:	d800      	bhi.n	3a12 <__aeabi_ddiv+0x252>
    3a10:	e159      	b.n	3cc6 <__aeabi_ddiv+0x506>
    3a12:	3e02      	subs	r6, #2
    3a14:	19e4      	adds	r4, r4, r7
    3a16:	4643      	mov	r3, r8
    3a18:	1ae4      	subs	r4, r4, r3
    3a1a:	4649      	mov	r1, r9
    3a1c:	0020      	movs	r0, r4
    3a1e:	f001 fa71 	bl	4f04 <__aeabi_uidiv>
    3a22:	0003      	movs	r3, r0
    3a24:	9a00      	ldr	r2, [sp, #0]
    3a26:	4680      	mov	r8, r0
    3a28:	4353      	muls	r3, r2
    3a2a:	4649      	mov	r1, r9
    3a2c:	0020      	movs	r0, r4
    3a2e:	469b      	mov	fp, r3
    3a30:	f001 faee 	bl	5010 <__aeabi_uidivmod>
    3a34:	042a      	lsls	r2, r5, #16
    3a36:	0409      	lsls	r1, r1, #16
    3a38:	0c12      	lsrs	r2, r2, #16
    3a3a:	430a      	orrs	r2, r1
    3a3c:	4593      	cmp	fp, r2
    3a3e:	d90d      	bls.n	3a5c <__aeabi_ddiv+0x29c>
    3a40:	4643      	mov	r3, r8
    3a42:	19d2      	adds	r2, r2, r7
    3a44:	3b01      	subs	r3, #1
    3a46:	4297      	cmp	r7, r2
    3a48:	d900      	bls.n	3a4c <__aeabi_ddiv+0x28c>
    3a4a:	e13a      	b.n	3cc2 <__aeabi_ddiv+0x502>
    3a4c:	4593      	cmp	fp, r2
    3a4e:	d800      	bhi.n	3a52 <__aeabi_ddiv+0x292>
    3a50:	e137      	b.n	3cc2 <__aeabi_ddiv+0x502>
    3a52:	2302      	movs	r3, #2
    3a54:	425b      	negs	r3, r3
    3a56:	469c      	mov	ip, r3
    3a58:	19d2      	adds	r2, r2, r7
    3a5a:	44e0      	add	r8, ip
    3a5c:	465b      	mov	r3, fp
    3a5e:	1ad2      	subs	r2, r2, r3
    3a60:	4643      	mov	r3, r8
    3a62:	0436      	lsls	r6, r6, #16
    3a64:	4333      	orrs	r3, r6
    3a66:	469b      	mov	fp, r3
    3a68:	9903      	ldr	r1, [sp, #12]
    3a6a:	0c18      	lsrs	r0, r3, #16
    3a6c:	0c0b      	lsrs	r3, r1, #16
    3a6e:	001d      	movs	r5, r3
    3a70:	9305      	str	r3, [sp, #20]
    3a72:	0409      	lsls	r1, r1, #16
    3a74:	465b      	mov	r3, fp
    3a76:	0c09      	lsrs	r1, r1, #16
    3a78:	000c      	movs	r4, r1
    3a7a:	041b      	lsls	r3, r3, #16
    3a7c:	0c1b      	lsrs	r3, r3, #16
    3a7e:	4344      	muls	r4, r0
    3a80:	9104      	str	r1, [sp, #16]
    3a82:	4359      	muls	r1, r3
    3a84:	436b      	muls	r3, r5
    3a86:	4368      	muls	r0, r5
    3a88:	191b      	adds	r3, r3, r4
    3a8a:	0c0d      	lsrs	r5, r1, #16
    3a8c:	18eb      	adds	r3, r5, r3
    3a8e:	429c      	cmp	r4, r3
    3a90:	d903      	bls.n	3a9a <__aeabi_ddiv+0x2da>
    3a92:	2480      	movs	r4, #128	; 0x80
    3a94:	0264      	lsls	r4, r4, #9
    3a96:	46a4      	mov	ip, r4
    3a98:	4460      	add	r0, ip
    3a9a:	0c1c      	lsrs	r4, r3, #16
    3a9c:	0409      	lsls	r1, r1, #16
    3a9e:	041b      	lsls	r3, r3, #16
    3aa0:	0c09      	lsrs	r1, r1, #16
    3aa2:	1820      	adds	r0, r4, r0
    3aa4:	185d      	adds	r5, r3, r1
    3aa6:	4282      	cmp	r2, r0
    3aa8:	d200      	bcs.n	3aac <__aeabi_ddiv+0x2ec>
    3aaa:	e0de      	b.n	3c6a <__aeabi_ddiv+0x4aa>
    3aac:	d100      	bne.n	3ab0 <__aeabi_ddiv+0x2f0>
    3aae:	e0d7      	b.n	3c60 <__aeabi_ddiv+0x4a0>
    3ab0:	1a16      	subs	r6, r2, r0
    3ab2:	9b02      	ldr	r3, [sp, #8]
    3ab4:	469c      	mov	ip, r3
    3ab6:	1b5d      	subs	r5, r3, r5
    3ab8:	45ac      	cmp	ip, r5
    3aba:	419b      	sbcs	r3, r3
    3abc:	425b      	negs	r3, r3
    3abe:	1af6      	subs	r6, r6, r3
    3ac0:	42b7      	cmp	r7, r6
    3ac2:	d100      	bne.n	3ac6 <__aeabi_ddiv+0x306>
    3ac4:	e106      	b.n	3cd4 <__aeabi_ddiv+0x514>
    3ac6:	4649      	mov	r1, r9
    3ac8:	0030      	movs	r0, r6
    3aca:	f001 fa1b 	bl	4f04 <__aeabi_uidiv>
    3ace:	9b00      	ldr	r3, [sp, #0]
    3ad0:	0004      	movs	r4, r0
    3ad2:	4343      	muls	r3, r0
    3ad4:	4649      	mov	r1, r9
    3ad6:	0030      	movs	r0, r6
    3ad8:	4698      	mov	r8, r3
    3ada:	f001 fa99 	bl	5010 <__aeabi_uidivmod>
    3ade:	0c2e      	lsrs	r6, r5, #16
    3ae0:	0409      	lsls	r1, r1, #16
    3ae2:	430e      	orrs	r6, r1
    3ae4:	45b0      	cmp	r8, r6
    3ae6:	d909      	bls.n	3afc <__aeabi_ddiv+0x33c>
    3ae8:	19f6      	adds	r6, r6, r7
    3aea:	1e63      	subs	r3, r4, #1
    3aec:	42b7      	cmp	r7, r6
    3aee:	d900      	bls.n	3af2 <__aeabi_ddiv+0x332>
    3af0:	e0f3      	b.n	3cda <__aeabi_ddiv+0x51a>
    3af2:	45b0      	cmp	r8, r6
    3af4:	d800      	bhi.n	3af8 <__aeabi_ddiv+0x338>
    3af6:	e0f0      	b.n	3cda <__aeabi_ddiv+0x51a>
    3af8:	3c02      	subs	r4, #2
    3afa:	19f6      	adds	r6, r6, r7
    3afc:	4643      	mov	r3, r8
    3afe:	1af3      	subs	r3, r6, r3
    3b00:	4649      	mov	r1, r9
    3b02:	0018      	movs	r0, r3
    3b04:	9302      	str	r3, [sp, #8]
    3b06:	f001 f9fd 	bl	4f04 <__aeabi_uidiv>
    3b0a:	9b00      	ldr	r3, [sp, #0]
    3b0c:	0006      	movs	r6, r0
    3b0e:	4343      	muls	r3, r0
    3b10:	4649      	mov	r1, r9
    3b12:	9802      	ldr	r0, [sp, #8]
    3b14:	4698      	mov	r8, r3
    3b16:	f001 fa7b 	bl	5010 <__aeabi_uidivmod>
    3b1a:	042d      	lsls	r5, r5, #16
    3b1c:	0409      	lsls	r1, r1, #16
    3b1e:	0c2d      	lsrs	r5, r5, #16
    3b20:	430d      	orrs	r5, r1
    3b22:	45a8      	cmp	r8, r5
    3b24:	d909      	bls.n	3b3a <__aeabi_ddiv+0x37a>
    3b26:	19ed      	adds	r5, r5, r7
    3b28:	1e73      	subs	r3, r6, #1
    3b2a:	42af      	cmp	r7, r5
    3b2c:	d900      	bls.n	3b30 <__aeabi_ddiv+0x370>
    3b2e:	e0d6      	b.n	3cde <__aeabi_ddiv+0x51e>
    3b30:	45a8      	cmp	r8, r5
    3b32:	d800      	bhi.n	3b36 <__aeabi_ddiv+0x376>
    3b34:	e0d3      	b.n	3cde <__aeabi_ddiv+0x51e>
    3b36:	3e02      	subs	r6, #2
    3b38:	19ed      	adds	r5, r5, r7
    3b3a:	0424      	lsls	r4, r4, #16
    3b3c:	0021      	movs	r1, r4
    3b3e:	4643      	mov	r3, r8
    3b40:	4331      	orrs	r1, r6
    3b42:	9e04      	ldr	r6, [sp, #16]
    3b44:	9a05      	ldr	r2, [sp, #20]
    3b46:	0030      	movs	r0, r6
    3b48:	1aed      	subs	r5, r5, r3
    3b4a:	040b      	lsls	r3, r1, #16
    3b4c:	0c0c      	lsrs	r4, r1, #16
    3b4e:	0c1b      	lsrs	r3, r3, #16
    3b50:	4358      	muls	r0, r3
    3b52:	4366      	muls	r6, r4
    3b54:	4353      	muls	r3, r2
    3b56:	4354      	muls	r4, r2
    3b58:	199a      	adds	r2, r3, r6
    3b5a:	0c03      	lsrs	r3, r0, #16
    3b5c:	189b      	adds	r3, r3, r2
    3b5e:	429e      	cmp	r6, r3
    3b60:	d903      	bls.n	3b6a <__aeabi_ddiv+0x3aa>
    3b62:	2280      	movs	r2, #128	; 0x80
    3b64:	0252      	lsls	r2, r2, #9
    3b66:	4694      	mov	ip, r2
    3b68:	4464      	add	r4, ip
    3b6a:	0c1a      	lsrs	r2, r3, #16
    3b6c:	0400      	lsls	r0, r0, #16
    3b6e:	041b      	lsls	r3, r3, #16
    3b70:	0c00      	lsrs	r0, r0, #16
    3b72:	1914      	adds	r4, r2, r4
    3b74:	181b      	adds	r3, r3, r0
    3b76:	42a5      	cmp	r5, r4
    3b78:	d350      	bcc.n	3c1c <__aeabi_ddiv+0x45c>
    3b7a:	d04d      	beq.n	3c18 <__aeabi_ddiv+0x458>
    3b7c:	2301      	movs	r3, #1
    3b7e:	4319      	orrs	r1, r3
    3b80:	4a96      	ldr	r2, [pc, #600]	; (3ddc <__aeabi_ddiv+0x61c>)
    3b82:	9b01      	ldr	r3, [sp, #4]
    3b84:	4694      	mov	ip, r2
    3b86:	4463      	add	r3, ip
    3b88:	2b00      	cmp	r3, #0
    3b8a:	dc00      	bgt.n	3b8e <__aeabi_ddiv+0x3ce>
    3b8c:	e6f3      	b.n	3976 <__aeabi_ddiv+0x1b6>
    3b8e:	074a      	lsls	r2, r1, #29
    3b90:	d009      	beq.n	3ba6 <__aeabi_ddiv+0x3e6>
    3b92:	220f      	movs	r2, #15
    3b94:	400a      	ands	r2, r1
    3b96:	2a04      	cmp	r2, #4
    3b98:	d005      	beq.n	3ba6 <__aeabi_ddiv+0x3e6>
    3b9a:	1d0a      	adds	r2, r1, #4
    3b9c:	428a      	cmp	r2, r1
    3b9e:	4189      	sbcs	r1, r1
    3ba0:	4249      	negs	r1, r1
    3ba2:	448b      	add	fp, r1
    3ba4:	0011      	movs	r1, r2
    3ba6:	465a      	mov	r2, fp
    3ba8:	01d2      	lsls	r2, r2, #7
    3baa:	d508      	bpl.n	3bbe <__aeabi_ddiv+0x3fe>
    3bac:	465a      	mov	r2, fp
    3bae:	4b8c      	ldr	r3, [pc, #560]	; (3de0 <__aeabi_ddiv+0x620>)
    3bb0:	401a      	ands	r2, r3
    3bb2:	4693      	mov	fp, r2
    3bb4:	2280      	movs	r2, #128	; 0x80
    3bb6:	00d2      	lsls	r2, r2, #3
    3bb8:	4694      	mov	ip, r2
    3bba:	9b01      	ldr	r3, [sp, #4]
    3bbc:	4463      	add	r3, ip
    3bbe:	4a89      	ldr	r2, [pc, #548]	; (3de4 <__aeabi_ddiv+0x624>)
    3bc0:	4293      	cmp	r3, r2
    3bc2:	dd00      	ble.n	3bc6 <__aeabi_ddiv+0x406>
    3bc4:	e65b      	b.n	387e <__aeabi_ddiv+0xbe>
    3bc6:	465a      	mov	r2, fp
    3bc8:	08c9      	lsrs	r1, r1, #3
    3bca:	0750      	lsls	r0, r2, #29
    3bcc:	4308      	orrs	r0, r1
    3bce:	0256      	lsls	r6, r2, #9
    3bd0:	4651      	mov	r1, sl
    3bd2:	2201      	movs	r2, #1
    3bd4:	055b      	lsls	r3, r3, #21
    3bd6:	4681      	mov	r9, r0
    3bd8:	0b36      	lsrs	r6, r6, #12
    3bda:	0d5b      	lsrs	r3, r3, #21
    3bdc:	400a      	ands	r2, r1
    3bde:	e655      	b.n	388c <__aeabi_ddiv+0xcc>
    3be0:	2380      	movs	r3, #128	; 0x80
    3be2:	031b      	lsls	r3, r3, #12
    3be4:	421e      	tst	r6, r3
    3be6:	d011      	beq.n	3c0c <__aeabi_ddiv+0x44c>
    3be8:	465a      	mov	r2, fp
    3bea:	421a      	tst	r2, r3
    3bec:	d10e      	bne.n	3c0c <__aeabi_ddiv+0x44c>
    3bee:	465e      	mov	r6, fp
    3bf0:	431e      	orrs	r6, r3
    3bf2:	0336      	lsls	r6, r6, #12
    3bf4:	0b36      	lsrs	r6, r6, #12
    3bf6:	002a      	movs	r2, r5
    3bf8:	4689      	mov	r9, r1
    3bfa:	4b7b      	ldr	r3, [pc, #492]	; (3de8 <__aeabi_ddiv+0x628>)
    3bfc:	e646      	b.n	388c <__aeabi_ddiv+0xcc>
    3bfe:	2b03      	cmp	r3, #3
    3c00:	d100      	bne.n	3c04 <__aeabi_ddiv+0x444>
    3c02:	e0e1      	b.n	3dc8 <__aeabi_ddiv+0x608>
    3c04:	2b01      	cmp	r3, #1
    3c06:	d1bb      	bne.n	3b80 <__aeabi_ddiv+0x3c0>
    3c08:	401a      	ands	r2, r3
    3c0a:	e6bb      	b.n	3984 <__aeabi_ddiv+0x1c4>
    3c0c:	431e      	orrs	r6, r3
    3c0e:	0336      	lsls	r6, r6, #12
    3c10:	0b36      	lsrs	r6, r6, #12
    3c12:	4642      	mov	r2, r8
    3c14:	4b74      	ldr	r3, [pc, #464]	; (3de8 <__aeabi_ddiv+0x628>)
    3c16:	e639      	b.n	388c <__aeabi_ddiv+0xcc>
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d0b1      	beq.n	3b80 <__aeabi_ddiv+0x3c0>
    3c1c:	197d      	adds	r5, r7, r5
    3c1e:	1e4a      	subs	r2, r1, #1
    3c20:	42af      	cmp	r7, r5
    3c22:	d952      	bls.n	3cca <__aeabi_ddiv+0x50a>
    3c24:	0011      	movs	r1, r2
    3c26:	42a5      	cmp	r5, r4
    3c28:	d1a8      	bne.n	3b7c <__aeabi_ddiv+0x3bc>
    3c2a:	9a03      	ldr	r2, [sp, #12]
    3c2c:	429a      	cmp	r2, r3
    3c2e:	d1a5      	bne.n	3b7c <__aeabi_ddiv+0x3bc>
    3c30:	e7a6      	b.n	3b80 <__aeabi_ddiv+0x3c0>
    3c32:	0003      	movs	r3, r0
    3c34:	003e      	movs	r6, r7
    3c36:	3b28      	subs	r3, #40	; 0x28
    3c38:	409e      	lsls	r6, r3
    3c3a:	2300      	movs	r3, #0
    3c3c:	4699      	mov	r9, r3
    3c3e:	e654      	b.n	38ea <__aeabi_ddiv+0x12a>
    3c40:	f001 f9ec 	bl	501c <__clzsi2>
    3c44:	3020      	adds	r0, #32
    3c46:	e641      	b.n	38cc <__aeabi_ddiv+0x10c>
    3c48:	0003      	movs	r3, r0
    3c4a:	4652      	mov	r2, sl
    3c4c:	3b28      	subs	r3, #40	; 0x28
    3c4e:	409a      	lsls	r2, r3
    3c50:	2100      	movs	r1, #0
    3c52:	4693      	mov	fp, r2
    3c54:	e677      	b.n	3946 <__aeabi_ddiv+0x186>
    3c56:	4650      	mov	r0, sl
    3c58:	f001 f9e0 	bl	501c <__clzsi2>
    3c5c:	3020      	adds	r0, #32
    3c5e:	e65e      	b.n	391e <__aeabi_ddiv+0x15e>
    3c60:	9b02      	ldr	r3, [sp, #8]
    3c62:	2600      	movs	r6, #0
    3c64:	42ab      	cmp	r3, r5
    3c66:	d300      	bcc.n	3c6a <__aeabi_ddiv+0x4aa>
    3c68:	e723      	b.n	3ab2 <__aeabi_ddiv+0x2f2>
    3c6a:	9e03      	ldr	r6, [sp, #12]
    3c6c:	9902      	ldr	r1, [sp, #8]
    3c6e:	46b4      	mov	ip, r6
    3c70:	4461      	add	r1, ip
    3c72:	4688      	mov	r8, r1
    3c74:	45b0      	cmp	r8, r6
    3c76:	41b6      	sbcs	r6, r6
    3c78:	465b      	mov	r3, fp
    3c7a:	4276      	negs	r6, r6
    3c7c:	19f6      	adds	r6, r6, r7
    3c7e:	18b2      	adds	r2, r6, r2
    3c80:	3b01      	subs	r3, #1
    3c82:	9102      	str	r1, [sp, #8]
    3c84:	4297      	cmp	r7, r2
    3c86:	d213      	bcs.n	3cb0 <__aeabi_ddiv+0x4f0>
    3c88:	4290      	cmp	r0, r2
    3c8a:	d84f      	bhi.n	3d2c <__aeabi_ddiv+0x56c>
    3c8c:	d100      	bne.n	3c90 <__aeabi_ddiv+0x4d0>
    3c8e:	e08e      	b.n	3dae <__aeabi_ddiv+0x5ee>
    3c90:	1a16      	subs	r6, r2, r0
    3c92:	469b      	mov	fp, r3
    3c94:	e70d      	b.n	3ab2 <__aeabi_ddiv+0x2f2>
    3c96:	4589      	cmp	r9, r1
    3c98:	d200      	bcs.n	3c9c <__aeabi_ddiv+0x4dc>
    3c9a:	e68e      	b.n	39ba <__aeabi_ddiv+0x1fa>
    3c9c:	0874      	lsrs	r4, r6, #1
    3c9e:	464b      	mov	r3, r9
    3ca0:	07f6      	lsls	r6, r6, #31
    3ca2:	0035      	movs	r5, r6
    3ca4:	085b      	lsrs	r3, r3, #1
    3ca6:	431d      	orrs	r5, r3
    3ca8:	464b      	mov	r3, r9
    3caa:	07db      	lsls	r3, r3, #31
    3cac:	9302      	str	r3, [sp, #8]
    3cae:	e68b      	b.n	39c8 <__aeabi_ddiv+0x208>
    3cb0:	4297      	cmp	r7, r2
    3cb2:	d1ed      	bne.n	3c90 <__aeabi_ddiv+0x4d0>
    3cb4:	9903      	ldr	r1, [sp, #12]
    3cb6:	9c02      	ldr	r4, [sp, #8]
    3cb8:	42a1      	cmp	r1, r4
    3cba:	d9e5      	bls.n	3c88 <__aeabi_ddiv+0x4c8>
    3cbc:	1a3e      	subs	r6, r7, r0
    3cbe:	469b      	mov	fp, r3
    3cc0:	e6f7      	b.n	3ab2 <__aeabi_ddiv+0x2f2>
    3cc2:	4698      	mov	r8, r3
    3cc4:	e6ca      	b.n	3a5c <__aeabi_ddiv+0x29c>
    3cc6:	001e      	movs	r6, r3
    3cc8:	e6a5      	b.n	3a16 <__aeabi_ddiv+0x256>
    3cca:	42ac      	cmp	r4, r5
    3ccc:	d83e      	bhi.n	3d4c <__aeabi_ddiv+0x58c>
    3cce:	d074      	beq.n	3dba <__aeabi_ddiv+0x5fa>
    3cd0:	0011      	movs	r1, r2
    3cd2:	e753      	b.n	3b7c <__aeabi_ddiv+0x3bc>
    3cd4:	2101      	movs	r1, #1
    3cd6:	4249      	negs	r1, r1
    3cd8:	e752      	b.n	3b80 <__aeabi_ddiv+0x3c0>
    3cda:	001c      	movs	r4, r3
    3cdc:	e70e      	b.n	3afc <__aeabi_ddiv+0x33c>
    3cde:	001e      	movs	r6, r3
    3ce0:	e72b      	b.n	3b3a <__aeabi_ddiv+0x37a>
    3ce2:	2d1f      	cmp	r5, #31
    3ce4:	dc3c      	bgt.n	3d60 <__aeabi_ddiv+0x5a0>
    3ce6:	2320      	movs	r3, #32
    3ce8:	000a      	movs	r2, r1
    3cea:	4658      	mov	r0, fp
    3cec:	1b5b      	subs	r3, r3, r5
    3cee:	4098      	lsls	r0, r3
    3cf0:	40ea      	lsrs	r2, r5
    3cf2:	4099      	lsls	r1, r3
    3cf4:	4302      	orrs	r2, r0
    3cf6:	1e48      	subs	r0, r1, #1
    3cf8:	4181      	sbcs	r1, r0
    3cfa:	465e      	mov	r6, fp
    3cfc:	4311      	orrs	r1, r2
    3cfe:	40ee      	lsrs	r6, r5
    3d00:	074b      	lsls	r3, r1, #29
    3d02:	d009      	beq.n	3d18 <__aeabi_ddiv+0x558>
    3d04:	230f      	movs	r3, #15
    3d06:	400b      	ands	r3, r1
    3d08:	2b04      	cmp	r3, #4
    3d0a:	d005      	beq.n	3d18 <__aeabi_ddiv+0x558>
    3d0c:	000b      	movs	r3, r1
    3d0e:	1d19      	adds	r1, r3, #4
    3d10:	4299      	cmp	r1, r3
    3d12:	419b      	sbcs	r3, r3
    3d14:	425b      	negs	r3, r3
    3d16:	18f6      	adds	r6, r6, r3
    3d18:	0233      	lsls	r3, r6, #8
    3d1a:	d53c      	bpl.n	3d96 <__aeabi_ddiv+0x5d6>
    3d1c:	4653      	mov	r3, sl
    3d1e:	2201      	movs	r2, #1
    3d20:	2100      	movs	r1, #0
    3d22:	401a      	ands	r2, r3
    3d24:	2600      	movs	r6, #0
    3d26:	2301      	movs	r3, #1
    3d28:	4689      	mov	r9, r1
    3d2a:	e5af      	b.n	388c <__aeabi_ddiv+0xcc>
    3d2c:	2302      	movs	r3, #2
    3d2e:	425b      	negs	r3, r3
    3d30:	469c      	mov	ip, r3
    3d32:	9c03      	ldr	r4, [sp, #12]
    3d34:	44e3      	add	fp, ip
    3d36:	46a4      	mov	ip, r4
    3d38:	9b02      	ldr	r3, [sp, #8]
    3d3a:	4463      	add	r3, ip
    3d3c:	4698      	mov	r8, r3
    3d3e:	45a0      	cmp	r8, r4
    3d40:	41b6      	sbcs	r6, r6
    3d42:	4276      	negs	r6, r6
    3d44:	19f6      	adds	r6, r6, r7
    3d46:	9302      	str	r3, [sp, #8]
    3d48:	18b2      	adds	r2, r6, r2
    3d4a:	e6b1      	b.n	3ab0 <__aeabi_ddiv+0x2f0>
    3d4c:	9803      	ldr	r0, [sp, #12]
    3d4e:	1e8a      	subs	r2, r1, #2
    3d50:	0041      	lsls	r1, r0, #1
    3d52:	4281      	cmp	r1, r0
    3d54:	41b6      	sbcs	r6, r6
    3d56:	4276      	negs	r6, r6
    3d58:	19f6      	adds	r6, r6, r7
    3d5a:	19ad      	adds	r5, r5, r6
    3d5c:	9103      	str	r1, [sp, #12]
    3d5e:	e761      	b.n	3c24 <__aeabi_ddiv+0x464>
    3d60:	221f      	movs	r2, #31
    3d62:	4252      	negs	r2, r2
    3d64:	1ad3      	subs	r3, r2, r3
    3d66:	465a      	mov	r2, fp
    3d68:	40da      	lsrs	r2, r3
    3d6a:	0013      	movs	r3, r2
    3d6c:	2d20      	cmp	r5, #32
    3d6e:	d029      	beq.n	3dc4 <__aeabi_ddiv+0x604>
    3d70:	2240      	movs	r2, #64	; 0x40
    3d72:	4658      	mov	r0, fp
    3d74:	1b55      	subs	r5, r2, r5
    3d76:	40a8      	lsls	r0, r5
    3d78:	4301      	orrs	r1, r0
    3d7a:	1e48      	subs	r0, r1, #1
    3d7c:	4181      	sbcs	r1, r0
    3d7e:	2007      	movs	r0, #7
    3d80:	430b      	orrs	r3, r1
    3d82:	4018      	ands	r0, r3
    3d84:	2600      	movs	r6, #0
    3d86:	2800      	cmp	r0, #0
    3d88:	d009      	beq.n	3d9e <__aeabi_ddiv+0x5de>
    3d8a:	220f      	movs	r2, #15
    3d8c:	2600      	movs	r6, #0
    3d8e:	401a      	ands	r2, r3
    3d90:	0019      	movs	r1, r3
    3d92:	2a04      	cmp	r2, #4
    3d94:	d1bb      	bne.n	3d0e <__aeabi_ddiv+0x54e>
    3d96:	000b      	movs	r3, r1
    3d98:	0770      	lsls	r0, r6, #29
    3d9a:	0276      	lsls	r6, r6, #9
    3d9c:	0b36      	lsrs	r6, r6, #12
    3d9e:	08db      	lsrs	r3, r3, #3
    3da0:	4303      	orrs	r3, r0
    3da2:	4699      	mov	r9, r3
    3da4:	2201      	movs	r2, #1
    3da6:	4653      	mov	r3, sl
    3da8:	401a      	ands	r2, r3
    3daa:	2300      	movs	r3, #0
    3dac:	e56e      	b.n	388c <__aeabi_ddiv+0xcc>
    3dae:	9902      	ldr	r1, [sp, #8]
    3db0:	428d      	cmp	r5, r1
    3db2:	d8bb      	bhi.n	3d2c <__aeabi_ddiv+0x56c>
    3db4:	469b      	mov	fp, r3
    3db6:	2600      	movs	r6, #0
    3db8:	e67b      	b.n	3ab2 <__aeabi_ddiv+0x2f2>
    3dba:	9803      	ldr	r0, [sp, #12]
    3dbc:	4298      	cmp	r0, r3
    3dbe:	d3c5      	bcc.n	3d4c <__aeabi_ddiv+0x58c>
    3dc0:	0011      	movs	r1, r2
    3dc2:	e732      	b.n	3c2a <__aeabi_ddiv+0x46a>
    3dc4:	2000      	movs	r0, #0
    3dc6:	e7d7      	b.n	3d78 <__aeabi_ddiv+0x5b8>
    3dc8:	2680      	movs	r6, #128	; 0x80
    3dca:	465b      	mov	r3, fp
    3dcc:	0336      	lsls	r6, r6, #12
    3dce:	431e      	orrs	r6, r3
    3dd0:	0336      	lsls	r6, r6, #12
    3dd2:	0b36      	lsrs	r6, r6, #12
    3dd4:	9a00      	ldr	r2, [sp, #0]
    3dd6:	4689      	mov	r9, r1
    3dd8:	4b03      	ldr	r3, [pc, #12]	; (3de8 <__aeabi_ddiv+0x628>)
    3dda:	e557      	b.n	388c <__aeabi_ddiv+0xcc>
    3ddc:	000003ff 	.word	0x000003ff
    3de0:	feffffff 	.word	0xfeffffff
    3de4:	000007fe 	.word	0x000007fe
    3de8:	000007ff 	.word	0x000007ff

00003dec <__eqdf2>:
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	465f      	mov	r7, fp
    3df0:	4656      	mov	r6, sl
    3df2:	464d      	mov	r5, r9
    3df4:	4644      	mov	r4, r8
    3df6:	b4f0      	push	{r4, r5, r6, r7}
    3df8:	031f      	lsls	r7, r3, #12
    3dfa:	005c      	lsls	r4, r3, #1
    3dfc:	0fdb      	lsrs	r3, r3, #31
    3dfe:	469a      	mov	sl, r3
    3e00:	4b19      	ldr	r3, [pc, #100]	; (3e68 <__eqdf2+0x7c>)
    3e02:	030e      	lsls	r6, r1, #12
    3e04:	004d      	lsls	r5, r1, #1
    3e06:	0fc9      	lsrs	r1, r1, #31
    3e08:	4680      	mov	r8, r0
    3e0a:	0b36      	lsrs	r6, r6, #12
    3e0c:	0d6d      	lsrs	r5, r5, #21
    3e0e:	468b      	mov	fp, r1
    3e10:	4691      	mov	r9, r2
    3e12:	0b3f      	lsrs	r7, r7, #12
    3e14:	0d64      	lsrs	r4, r4, #21
    3e16:	429d      	cmp	r5, r3
    3e18:	d019      	beq.n	3e4e <__eqdf2+0x62>
    3e1a:	4b13      	ldr	r3, [pc, #76]	; (3e68 <__eqdf2+0x7c>)
    3e1c:	429c      	cmp	r4, r3
    3e1e:	d01b      	beq.n	3e58 <__eqdf2+0x6c>
    3e20:	2301      	movs	r3, #1
    3e22:	42a5      	cmp	r5, r4
    3e24:	d006      	beq.n	3e34 <__eqdf2+0x48>
    3e26:	0018      	movs	r0, r3
    3e28:	bc3c      	pop	{r2, r3, r4, r5}
    3e2a:	4690      	mov	r8, r2
    3e2c:	4699      	mov	r9, r3
    3e2e:	46a2      	mov	sl, r4
    3e30:	46ab      	mov	fp, r5
    3e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e34:	42be      	cmp	r6, r7
    3e36:	d1f6      	bne.n	3e26 <__eqdf2+0x3a>
    3e38:	45c8      	cmp	r8, r9
    3e3a:	d1f4      	bne.n	3e26 <__eqdf2+0x3a>
    3e3c:	45d3      	cmp	fp, sl
    3e3e:	d010      	beq.n	3e62 <__eqdf2+0x76>
    3e40:	2d00      	cmp	r5, #0
    3e42:	d1f0      	bne.n	3e26 <__eqdf2+0x3a>
    3e44:	4330      	orrs	r0, r6
    3e46:	0003      	movs	r3, r0
    3e48:	1e5a      	subs	r2, r3, #1
    3e4a:	4193      	sbcs	r3, r2
    3e4c:	e7eb      	b.n	3e26 <__eqdf2+0x3a>
    3e4e:	0031      	movs	r1, r6
    3e50:	2301      	movs	r3, #1
    3e52:	4301      	orrs	r1, r0
    3e54:	d1e7      	bne.n	3e26 <__eqdf2+0x3a>
    3e56:	e7e0      	b.n	3e1a <__eqdf2+0x2e>
    3e58:	433a      	orrs	r2, r7
    3e5a:	2301      	movs	r3, #1
    3e5c:	2a00      	cmp	r2, #0
    3e5e:	d1e2      	bne.n	3e26 <__eqdf2+0x3a>
    3e60:	e7de      	b.n	3e20 <__eqdf2+0x34>
    3e62:	2300      	movs	r3, #0
    3e64:	e7df      	b.n	3e26 <__eqdf2+0x3a>
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	000007ff 	.word	0x000007ff

00003e6c <__gedf2>:
    3e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e6e:	465f      	mov	r7, fp
    3e70:	4644      	mov	r4, r8
    3e72:	4656      	mov	r6, sl
    3e74:	464d      	mov	r5, r9
    3e76:	b4f0      	push	{r4, r5, r6, r7}
    3e78:	031f      	lsls	r7, r3, #12
    3e7a:	0b3c      	lsrs	r4, r7, #12
    3e7c:	4f2c      	ldr	r7, [pc, #176]	; (3f30 <__gedf2+0xc4>)
    3e7e:	030e      	lsls	r6, r1, #12
    3e80:	004d      	lsls	r5, r1, #1
    3e82:	46a3      	mov	fp, r4
    3e84:	005c      	lsls	r4, r3, #1
    3e86:	4684      	mov	ip, r0
    3e88:	0b36      	lsrs	r6, r6, #12
    3e8a:	0d6d      	lsrs	r5, r5, #21
    3e8c:	0fc9      	lsrs	r1, r1, #31
    3e8e:	4690      	mov	r8, r2
    3e90:	0d64      	lsrs	r4, r4, #21
    3e92:	0fdb      	lsrs	r3, r3, #31
    3e94:	42bd      	cmp	r5, r7
    3e96:	d02b      	beq.n	3ef0 <__gedf2+0x84>
    3e98:	4f25      	ldr	r7, [pc, #148]	; (3f30 <__gedf2+0xc4>)
    3e9a:	42bc      	cmp	r4, r7
    3e9c:	d02e      	beq.n	3efc <__gedf2+0x90>
    3e9e:	2d00      	cmp	r5, #0
    3ea0:	d10e      	bne.n	3ec0 <__gedf2+0x54>
    3ea2:	4330      	orrs	r0, r6
    3ea4:	0007      	movs	r7, r0
    3ea6:	4681      	mov	r9, r0
    3ea8:	4278      	negs	r0, r7
    3eaa:	4178      	adcs	r0, r7
    3eac:	2c00      	cmp	r4, #0
    3eae:	d117      	bne.n	3ee0 <__gedf2+0x74>
    3eb0:	465f      	mov	r7, fp
    3eb2:	433a      	orrs	r2, r7
    3eb4:	d114      	bne.n	3ee0 <__gedf2+0x74>
    3eb6:	464b      	mov	r3, r9
    3eb8:	2000      	movs	r0, #0
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d00a      	beq.n	3ed4 <__gedf2+0x68>
    3ebe:	e006      	b.n	3ece <__gedf2+0x62>
    3ec0:	2c00      	cmp	r4, #0
    3ec2:	d102      	bne.n	3eca <__gedf2+0x5e>
    3ec4:	4658      	mov	r0, fp
    3ec6:	4302      	orrs	r2, r0
    3ec8:	d001      	beq.n	3ece <__gedf2+0x62>
    3eca:	4299      	cmp	r1, r3
    3ecc:	d01a      	beq.n	3f04 <__gedf2+0x98>
    3ece:	2301      	movs	r3, #1
    3ed0:	4248      	negs	r0, r1
    3ed2:	4318      	orrs	r0, r3
    3ed4:	bc3c      	pop	{r2, r3, r4, r5}
    3ed6:	4690      	mov	r8, r2
    3ed8:	4699      	mov	r9, r3
    3eda:	46a2      	mov	sl, r4
    3edc:	46ab      	mov	fp, r5
    3ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d0f2      	beq.n	3eca <__gedf2+0x5e>
    3ee4:	4258      	negs	r0, r3
    3ee6:	4158      	adcs	r0, r3
    3ee8:	2201      	movs	r2, #1
    3eea:	4240      	negs	r0, r0
    3eec:	4310      	orrs	r0, r2
    3eee:	e7f1      	b.n	3ed4 <__gedf2+0x68>
    3ef0:	0037      	movs	r7, r6
    3ef2:	4307      	orrs	r7, r0
    3ef4:	d0d0      	beq.n	3e98 <__gedf2+0x2c>
    3ef6:	2002      	movs	r0, #2
    3ef8:	4240      	negs	r0, r0
    3efa:	e7eb      	b.n	3ed4 <__gedf2+0x68>
    3efc:	465f      	mov	r7, fp
    3efe:	4317      	orrs	r7, r2
    3f00:	d0cd      	beq.n	3e9e <__gedf2+0x32>
    3f02:	e7f8      	b.n	3ef6 <__gedf2+0x8a>
    3f04:	42a5      	cmp	r5, r4
    3f06:	dce2      	bgt.n	3ece <__gedf2+0x62>
    3f08:	db05      	blt.n	3f16 <__gedf2+0xaa>
    3f0a:	455e      	cmp	r6, fp
    3f0c:	d8df      	bhi.n	3ece <__gedf2+0x62>
    3f0e:	d008      	beq.n	3f22 <__gedf2+0xb6>
    3f10:	2000      	movs	r0, #0
    3f12:	455e      	cmp	r6, fp
    3f14:	d2de      	bcs.n	3ed4 <__gedf2+0x68>
    3f16:	4248      	negs	r0, r1
    3f18:	4148      	adcs	r0, r1
    3f1a:	2301      	movs	r3, #1
    3f1c:	4240      	negs	r0, r0
    3f1e:	4318      	orrs	r0, r3
    3f20:	e7d8      	b.n	3ed4 <__gedf2+0x68>
    3f22:	45c4      	cmp	ip, r8
    3f24:	d8d3      	bhi.n	3ece <__gedf2+0x62>
    3f26:	2000      	movs	r0, #0
    3f28:	45c4      	cmp	ip, r8
    3f2a:	d3f4      	bcc.n	3f16 <__gedf2+0xaa>
    3f2c:	e7d2      	b.n	3ed4 <__gedf2+0x68>
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	000007ff 	.word	0x000007ff

00003f34 <__ledf2>:
    3f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f36:	465f      	mov	r7, fp
    3f38:	464d      	mov	r5, r9
    3f3a:	4644      	mov	r4, r8
    3f3c:	4656      	mov	r6, sl
    3f3e:	b4f0      	push	{r4, r5, r6, r7}
    3f40:	031c      	lsls	r4, r3, #12
    3f42:	0b24      	lsrs	r4, r4, #12
    3f44:	46a4      	mov	ip, r4
    3f46:	4c2f      	ldr	r4, [pc, #188]	; (4004 <__ledf2+0xd0>)
    3f48:	030f      	lsls	r7, r1, #12
    3f4a:	004d      	lsls	r5, r1, #1
    3f4c:	005e      	lsls	r6, r3, #1
    3f4e:	0fc9      	lsrs	r1, r1, #31
    3f50:	4680      	mov	r8, r0
    3f52:	0b3f      	lsrs	r7, r7, #12
    3f54:	0d6d      	lsrs	r5, r5, #21
    3f56:	468b      	mov	fp, r1
    3f58:	4691      	mov	r9, r2
    3f5a:	0d76      	lsrs	r6, r6, #21
    3f5c:	0fdb      	lsrs	r3, r3, #31
    3f5e:	42a5      	cmp	r5, r4
    3f60:	d020      	beq.n	3fa4 <__ledf2+0x70>
    3f62:	4c28      	ldr	r4, [pc, #160]	; (4004 <__ledf2+0xd0>)
    3f64:	42a6      	cmp	r6, r4
    3f66:	d022      	beq.n	3fae <__ledf2+0x7a>
    3f68:	2d00      	cmp	r5, #0
    3f6a:	d112      	bne.n	3f92 <__ledf2+0x5e>
    3f6c:	4338      	orrs	r0, r7
    3f6e:	4244      	negs	r4, r0
    3f70:	4144      	adcs	r4, r0
    3f72:	2e00      	cmp	r6, #0
    3f74:	d020      	beq.n	3fb8 <__ledf2+0x84>
    3f76:	2c00      	cmp	r4, #0
    3f78:	d00d      	beq.n	3f96 <__ledf2+0x62>
    3f7a:	425c      	negs	r4, r3
    3f7c:	4163      	adcs	r3, r4
    3f7e:	2401      	movs	r4, #1
    3f80:	425b      	negs	r3, r3
    3f82:	431c      	orrs	r4, r3
    3f84:	0020      	movs	r0, r4
    3f86:	bc3c      	pop	{r2, r3, r4, r5}
    3f88:	4690      	mov	r8, r2
    3f8a:	4699      	mov	r9, r3
    3f8c:	46a2      	mov	sl, r4
    3f8e:	46ab      	mov	fp, r5
    3f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f92:	2e00      	cmp	r6, #0
    3f94:	d017      	beq.n	3fc6 <__ledf2+0x92>
    3f96:	455b      	cmp	r3, fp
    3f98:	d019      	beq.n	3fce <__ledf2+0x9a>
    3f9a:	465b      	mov	r3, fp
    3f9c:	425c      	negs	r4, r3
    3f9e:	2301      	movs	r3, #1
    3fa0:	431c      	orrs	r4, r3
    3fa2:	e7ef      	b.n	3f84 <__ledf2+0x50>
    3fa4:	0039      	movs	r1, r7
    3fa6:	2402      	movs	r4, #2
    3fa8:	4301      	orrs	r1, r0
    3faa:	d1eb      	bne.n	3f84 <__ledf2+0x50>
    3fac:	e7d9      	b.n	3f62 <__ledf2+0x2e>
    3fae:	4661      	mov	r1, ip
    3fb0:	2402      	movs	r4, #2
    3fb2:	4311      	orrs	r1, r2
    3fb4:	d1e6      	bne.n	3f84 <__ledf2+0x50>
    3fb6:	e7d7      	b.n	3f68 <__ledf2+0x34>
    3fb8:	4661      	mov	r1, ip
    3fba:	430a      	orrs	r2, r1
    3fbc:	d1db      	bne.n	3f76 <__ledf2+0x42>
    3fbe:	2400      	movs	r4, #0
    3fc0:	2800      	cmp	r0, #0
    3fc2:	d0df      	beq.n	3f84 <__ledf2+0x50>
    3fc4:	e7e9      	b.n	3f9a <__ledf2+0x66>
    3fc6:	4661      	mov	r1, ip
    3fc8:	430a      	orrs	r2, r1
    3fca:	d1e4      	bne.n	3f96 <__ledf2+0x62>
    3fcc:	e7e5      	b.n	3f9a <__ledf2+0x66>
    3fce:	42b5      	cmp	r5, r6
    3fd0:	dd03      	ble.n	3fda <__ledf2+0xa6>
    3fd2:	2201      	movs	r2, #1
    3fd4:	425c      	negs	r4, r3
    3fd6:	4314      	orrs	r4, r2
    3fd8:	e7d4      	b.n	3f84 <__ledf2+0x50>
    3fda:	42b5      	cmp	r5, r6
    3fdc:	dbcd      	blt.n	3f7a <__ledf2+0x46>
    3fde:	4567      	cmp	r7, ip
    3fe0:	d8db      	bhi.n	3f9a <__ledf2+0x66>
    3fe2:	d009      	beq.n	3ff8 <__ledf2+0xc4>
    3fe4:	2400      	movs	r4, #0
    3fe6:	4567      	cmp	r7, ip
    3fe8:	d2cc      	bcs.n	3f84 <__ledf2+0x50>
    3fea:	4659      	mov	r1, fp
    3fec:	424c      	negs	r4, r1
    3fee:	4161      	adcs	r1, r4
    3ff0:	2401      	movs	r4, #1
    3ff2:	4249      	negs	r1, r1
    3ff4:	430c      	orrs	r4, r1
    3ff6:	e7c5      	b.n	3f84 <__ledf2+0x50>
    3ff8:	45c8      	cmp	r8, r9
    3ffa:	d8ce      	bhi.n	3f9a <__ledf2+0x66>
    3ffc:	2400      	movs	r4, #0
    3ffe:	45c8      	cmp	r8, r9
    4000:	d3f3      	bcc.n	3fea <__ledf2+0xb6>
    4002:	e7bf      	b.n	3f84 <__ledf2+0x50>
    4004:	000007ff 	.word	0x000007ff

00004008 <__aeabi_dmul>:
    4008:	b5f0      	push	{r4, r5, r6, r7, lr}
    400a:	465f      	mov	r7, fp
    400c:	4656      	mov	r6, sl
    400e:	464d      	mov	r5, r9
    4010:	4644      	mov	r4, r8
    4012:	b4f0      	push	{r4, r5, r6, r7}
    4014:	030d      	lsls	r5, r1, #12
    4016:	4699      	mov	r9, r3
    4018:	004e      	lsls	r6, r1, #1
    401a:	0b2b      	lsrs	r3, r5, #12
    401c:	b087      	sub	sp, #28
    401e:	0007      	movs	r7, r0
    4020:	4692      	mov	sl, r2
    4022:	4680      	mov	r8, r0
    4024:	469b      	mov	fp, r3
    4026:	0d76      	lsrs	r6, r6, #21
    4028:	0fcc      	lsrs	r4, r1, #31
    402a:	2e00      	cmp	r6, #0
    402c:	d069      	beq.n	4102 <__aeabi_dmul+0xfa>
    402e:	4b6d      	ldr	r3, [pc, #436]	; (41e4 <__aeabi_dmul+0x1dc>)
    4030:	429e      	cmp	r6, r3
    4032:	d035      	beq.n	40a0 <__aeabi_dmul+0x98>
    4034:	465b      	mov	r3, fp
    4036:	2280      	movs	r2, #128	; 0x80
    4038:	00dd      	lsls	r5, r3, #3
    403a:	0412      	lsls	r2, r2, #16
    403c:	0f43      	lsrs	r3, r0, #29
    403e:	4313      	orrs	r3, r2
    4040:	432b      	orrs	r3, r5
    4042:	469b      	mov	fp, r3
    4044:	00c3      	lsls	r3, r0, #3
    4046:	4698      	mov	r8, r3
    4048:	4b67      	ldr	r3, [pc, #412]	; (41e8 <__aeabi_dmul+0x1e0>)
    404a:	2700      	movs	r7, #0
    404c:	469c      	mov	ip, r3
    404e:	2300      	movs	r3, #0
    4050:	4466      	add	r6, ip
    4052:	9301      	str	r3, [sp, #4]
    4054:	464a      	mov	r2, r9
    4056:	0315      	lsls	r5, r2, #12
    4058:	0050      	lsls	r0, r2, #1
    405a:	0fd2      	lsrs	r2, r2, #31
    405c:	4653      	mov	r3, sl
    405e:	0b2d      	lsrs	r5, r5, #12
    4060:	0d40      	lsrs	r0, r0, #21
    4062:	4691      	mov	r9, r2
    4064:	d100      	bne.n	4068 <__aeabi_dmul+0x60>
    4066:	e076      	b.n	4156 <__aeabi_dmul+0x14e>
    4068:	4a5e      	ldr	r2, [pc, #376]	; (41e4 <__aeabi_dmul+0x1dc>)
    406a:	4290      	cmp	r0, r2
    406c:	d06c      	beq.n	4148 <__aeabi_dmul+0x140>
    406e:	2280      	movs	r2, #128	; 0x80
    4070:	0f5b      	lsrs	r3, r3, #29
    4072:	0412      	lsls	r2, r2, #16
    4074:	4313      	orrs	r3, r2
    4076:	4a5c      	ldr	r2, [pc, #368]	; (41e8 <__aeabi_dmul+0x1e0>)
    4078:	00ed      	lsls	r5, r5, #3
    407a:	4694      	mov	ip, r2
    407c:	431d      	orrs	r5, r3
    407e:	4653      	mov	r3, sl
    4080:	2200      	movs	r2, #0
    4082:	00db      	lsls	r3, r3, #3
    4084:	4460      	add	r0, ip
    4086:	4649      	mov	r1, r9
    4088:	1836      	adds	r6, r6, r0
    408a:	1c70      	adds	r0, r6, #1
    408c:	4061      	eors	r1, r4
    408e:	9002      	str	r0, [sp, #8]
    4090:	4317      	orrs	r7, r2
    4092:	2f0f      	cmp	r7, #15
    4094:	d900      	bls.n	4098 <__aeabi_dmul+0x90>
    4096:	e0af      	b.n	41f8 <__aeabi_dmul+0x1f0>
    4098:	4854      	ldr	r0, [pc, #336]	; (41ec <__aeabi_dmul+0x1e4>)
    409a:	00bf      	lsls	r7, r7, #2
    409c:	59c7      	ldr	r7, [r0, r7]
    409e:	46bf      	mov	pc, r7
    40a0:	465b      	mov	r3, fp
    40a2:	431f      	orrs	r7, r3
    40a4:	d000      	beq.n	40a8 <__aeabi_dmul+0xa0>
    40a6:	e088      	b.n	41ba <__aeabi_dmul+0x1b2>
    40a8:	2300      	movs	r3, #0
    40aa:	469b      	mov	fp, r3
    40ac:	4698      	mov	r8, r3
    40ae:	3302      	adds	r3, #2
    40b0:	2708      	movs	r7, #8
    40b2:	9301      	str	r3, [sp, #4]
    40b4:	e7ce      	b.n	4054 <__aeabi_dmul+0x4c>
    40b6:	4649      	mov	r1, r9
    40b8:	2a02      	cmp	r2, #2
    40ba:	d06a      	beq.n	4192 <__aeabi_dmul+0x18a>
    40bc:	2a03      	cmp	r2, #3
    40be:	d100      	bne.n	40c2 <__aeabi_dmul+0xba>
    40c0:	e209      	b.n	44d6 <__aeabi_dmul+0x4ce>
    40c2:	2a01      	cmp	r2, #1
    40c4:	d000      	beq.n	40c8 <__aeabi_dmul+0xc0>
    40c6:	e1bb      	b.n	4440 <__aeabi_dmul+0x438>
    40c8:	4011      	ands	r1, r2
    40ca:	2200      	movs	r2, #0
    40cc:	2300      	movs	r3, #0
    40ce:	2500      	movs	r5, #0
    40d0:	4690      	mov	r8, r2
    40d2:	b2cc      	uxtb	r4, r1
    40d4:	2100      	movs	r1, #0
    40d6:	032d      	lsls	r5, r5, #12
    40d8:	0d0a      	lsrs	r2, r1, #20
    40da:	0512      	lsls	r2, r2, #20
    40dc:	0b2d      	lsrs	r5, r5, #12
    40de:	4315      	orrs	r5, r2
    40e0:	4a43      	ldr	r2, [pc, #268]	; (41f0 <__aeabi_dmul+0x1e8>)
    40e2:	051b      	lsls	r3, r3, #20
    40e4:	4015      	ands	r5, r2
    40e6:	431d      	orrs	r5, r3
    40e8:	006d      	lsls	r5, r5, #1
    40ea:	07e4      	lsls	r4, r4, #31
    40ec:	086d      	lsrs	r5, r5, #1
    40ee:	4325      	orrs	r5, r4
    40f0:	4640      	mov	r0, r8
    40f2:	0029      	movs	r1, r5
    40f4:	b007      	add	sp, #28
    40f6:	bc3c      	pop	{r2, r3, r4, r5}
    40f8:	4690      	mov	r8, r2
    40fa:	4699      	mov	r9, r3
    40fc:	46a2      	mov	sl, r4
    40fe:	46ab      	mov	fp, r5
    4100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4102:	4303      	orrs	r3, r0
    4104:	d052      	beq.n	41ac <__aeabi_dmul+0x1a4>
    4106:	465b      	mov	r3, fp
    4108:	2b00      	cmp	r3, #0
    410a:	d100      	bne.n	410e <__aeabi_dmul+0x106>
    410c:	e18a      	b.n	4424 <__aeabi_dmul+0x41c>
    410e:	4658      	mov	r0, fp
    4110:	f000 ff84 	bl	501c <__clzsi2>
    4114:	0003      	movs	r3, r0
    4116:	3b0b      	subs	r3, #11
    4118:	2b1c      	cmp	r3, #28
    411a:	dd00      	ble.n	411e <__aeabi_dmul+0x116>
    411c:	e17b      	b.n	4416 <__aeabi_dmul+0x40e>
    411e:	221d      	movs	r2, #29
    4120:	1ad3      	subs	r3, r2, r3
    4122:	003a      	movs	r2, r7
    4124:	0001      	movs	r1, r0
    4126:	465d      	mov	r5, fp
    4128:	40da      	lsrs	r2, r3
    412a:	3908      	subs	r1, #8
    412c:	408d      	lsls	r5, r1
    412e:	0013      	movs	r3, r2
    4130:	408f      	lsls	r7, r1
    4132:	432b      	orrs	r3, r5
    4134:	469b      	mov	fp, r3
    4136:	46b8      	mov	r8, r7
    4138:	4b2e      	ldr	r3, [pc, #184]	; (41f4 <__aeabi_dmul+0x1ec>)
    413a:	2700      	movs	r7, #0
    413c:	469c      	mov	ip, r3
    413e:	2300      	movs	r3, #0
    4140:	4460      	add	r0, ip
    4142:	4246      	negs	r6, r0
    4144:	9301      	str	r3, [sp, #4]
    4146:	e785      	b.n	4054 <__aeabi_dmul+0x4c>
    4148:	4652      	mov	r2, sl
    414a:	432a      	orrs	r2, r5
    414c:	d12c      	bne.n	41a8 <__aeabi_dmul+0x1a0>
    414e:	2500      	movs	r5, #0
    4150:	2300      	movs	r3, #0
    4152:	2202      	movs	r2, #2
    4154:	e797      	b.n	4086 <__aeabi_dmul+0x7e>
    4156:	4652      	mov	r2, sl
    4158:	432a      	orrs	r2, r5
    415a:	d021      	beq.n	41a0 <__aeabi_dmul+0x198>
    415c:	2d00      	cmp	r5, #0
    415e:	d100      	bne.n	4162 <__aeabi_dmul+0x15a>
    4160:	e154      	b.n	440c <__aeabi_dmul+0x404>
    4162:	0028      	movs	r0, r5
    4164:	f000 ff5a 	bl	501c <__clzsi2>
    4168:	0003      	movs	r3, r0
    416a:	3b0b      	subs	r3, #11
    416c:	2b1c      	cmp	r3, #28
    416e:	dd00      	ble.n	4172 <__aeabi_dmul+0x16a>
    4170:	e146      	b.n	4400 <__aeabi_dmul+0x3f8>
    4172:	211d      	movs	r1, #29
    4174:	1acb      	subs	r3, r1, r3
    4176:	4651      	mov	r1, sl
    4178:	0002      	movs	r2, r0
    417a:	40d9      	lsrs	r1, r3
    417c:	4653      	mov	r3, sl
    417e:	3a08      	subs	r2, #8
    4180:	4095      	lsls	r5, r2
    4182:	4093      	lsls	r3, r2
    4184:	430d      	orrs	r5, r1
    4186:	4a1b      	ldr	r2, [pc, #108]	; (41f4 <__aeabi_dmul+0x1ec>)
    4188:	4694      	mov	ip, r2
    418a:	4460      	add	r0, ip
    418c:	4240      	negs	r0, r0
    418e:	2200      	movs	r2, #0
    4190:	e779      	b.n	4086 <__aeabi_dmul+0x7e>
    4192:	2401      	movs	r4, #1
    4194:	2200      	movs	r2, #0
    4196:	400c      	ands	r4, r1
    4198:	4b12      	ldr	r3, [pc, #72]	; (41e4 <__aeabi_dmul+0x1dc>)
    419a:	2500      	movs	r5, #0
    419c:	4690      	mov	r8, r2
    419e:	e799      	b.n	40d4 <__aeabi_dmul+0xcc>
    41a0:	2500      	movs	r5, #0
    41a2:	2300      	movs	r3, #0
    41a4:	2201      	movs	r2, #1
    41a6:	e76e      	b.n	4086 <__aeabi_dmul+0x7e>
    41a8:	2203      	movs	r2, #3
    41aa:	e76c      	b.n	4086 <__aeabi_dmul+0x7e>
    41ac:	2300      	movs	r3, #0
    41ae:	469b      	mov	fp, r3
    41b0:	4698      	mov	r8, r3
    41b2:	3301      	adds	r3, #1
    41b4:	2704      	movs	r7, #4
    41b6:	9301      	str	r3, [sp, #4]
    41b8:	e74c      	b.n	4054 <__aeabi_dmul+0x4c>
    41ba:	2303      	movs	r3, #3
    41bc:	270c      	movs	r7, #12
    41be:	9301      	str	r3, [sp, #4]
    41c0:	e748      	b.n	4054 <__aeabi_dmul+0x4c>
    41c2:	2300      	movs	r3, #0
    41c4:	2580      	movs	r5, #128	; 0x80
    41c6:	4698      	mov	r8, r3
    41c8:	2400      	movs	r4, #0
    41ca:	032d      	lsls	r5, r5, #12
    41cc:	4b05      	ldr	r3, [pc, #20]	; (41e4 <__aeabi_dmul+0x1dc>)
    41ce:	e781      	b.n	40d4 <__aeabi_dmul+0xcc>
    41d0:	465d      	mov	r5, fp
    41d2:	4643      	mov	r3, r8
    41d4:	9a01      	ldr	r2, [sp, #4]
    41d6:	e76f      	b.n	40b8 <__aeabi_dmul+0xb0>
    41d8:	465d      	mov	r5, fp
    41da:	4643      	mov	r3, r8
    41dc:	0021      	movs	r1, r4
    41de:	9a01      	ldr	r2, [sp, #4]
    41e0:	e76a      	b.n	40b8 <__aeabi_dmul+0xb0>
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	000007ff 	.word	0x000007ff
    41e8:	fffffc01 	.word	0xfffffc01
    41ec:	00005430 	.word	0x00005430
    41f0:	800fffff 	.word	0x800fffff
    41f4:	000003f3 	.word	0x000003f3
    41f8:	4642      	mov	r2, r8
    41fa:	0c12      	lsrs	r2, r2, #16
    41fc:	4691      	mov	r9, r2
    41fe:	0c1a      	lsrs	r2, r3, #16
    4200:	4694      	mov	ip, r2
    4202:	4642      	mov	r2, r8
    4204:	0417      	lsls	r7, r2, #16
    4206:	464a      	mov	r2, r9
    4208:	041b      	lsls	r3, r3, #16
    420a:	0c1b      	lsrs	r3, r3, #16
    420c:	435a      	muls	r2, r3
    420e:	4660      	mov	r0, ip
    4210:	4690      	mov	r8, r2
    4212:	464a      	mov	r2, r9
    4214:	4342      	muls	r2, r0
    4216:	0010      	movs	r0, r2
    4218:	9203      	str	r2, [sp, #12]
    421a:	4662      	mov	r2, ip
    421c:	001c      	movs	r4, r3
    421e:	0c3f      	lsrs	r7, r7, #16
    4220:	437a      	muls	r2, r7
    4222:	437c      	muls	r4, r7
    4224:	4442      	add	r2, r8
    4226:	9201      	str	r2, [sp, #4]
    4228:	0c22      	lsrs	r2, r4, #16
    422a:	4692      	mov	sl, r2
    422c:	9a01      	ldr	r2, [sp, #4]
    422e:	4452      	add	r2, sl
    4230:	4590      	cmp	r8, r2
    4232:	d906      	bls.n	4242 <__aeabi_dmul+0x23a>
    4234:	4682      	mov	sl, r0
    4236:	2080      	movs	r0, #128	; 0x80
    4238:	0240      	lsls	r0, r0, #9
    423a:	4680      	mov	r8, r0
    423c:	44c2      	add	sl, r8
    423e:	4650      	mov	r0, sl
    4240:	9003      	str	r0, [sp, #12]
    4242:	0c10      	lsrs	r0, r2, #16
    4244:	9004      	str	r0, [sp, #16]
    4246:	4648      	mov	r0, r9
    4248:	0424      	lsls	r4, r4, #16
    424a:	0c24      	lsrs	r4, r4, #16
    424c:	0412      	lsls	r2, r2, #16
    424e:	1912      	adds	r2, r2, r4
    4250:	9205      	str	r2, [sp, #20]
    4252:	0c2a      	lsrs	r2, r5, #16
    4254:	042d      	lsls	r5, r5, #16
    4256:	0c2d      	lsrs	r5, r5, #16
    4258:	4368      	muls	r0, r5
    425a:	002c      	movs	r4, r5
    425c:	4682      	mov	sl, r0
    425e:	4648      	mov	r0, r9
    4260:	437c      	muls	r4, r7
    4262:	4350      	muls	r0, r2
    4264:	4681      	mov	r9, r0
    4266:	0c20      	lsrs	r0, r4, #16
    4268:	4680      	mov	r8, r0
    426a:	4357      	muls	r7, r2
    426c:	4457      	add	r7, sl
    426e:	4447      	add	r7, r8
    4270:	45ba      	cmp	sl, r7
    4272:	d903      	bls.n	427c <__aeabi_dmul+0x274>
    4274:	2080      	movs	r0, #128	; 0x80
    4276:	0240      	lsls	r0, r0, #9
    4278:	4680      	mov	r8, r0
    427a:	44c1      	add	r9, r8
    427c:	0c38      	lsrs	r0, r7, #16
    427e:	043f      	lsls	r7, r7, #16
    4280:	46b8      	mov	r8, r7
    4282:	4448      	add	r0, r9
    4284:	0424      	lsls	r4, r4, #16
    4286:	0c24      	lsrs	r4, r4, #16
    4288:	9001      	str	r0, [sp, #4]
    428a:	9804      	ldr	r0, [sp, #16]
    428c:	44a0      	add	r8, r4
    428e:	4440      	add	r0, r8
    4290:	9004      	str	r0, [sp, #16]
    4292:	4658      	mov	r0, fp
    4294:	0c00      	lsrs	r0, r0, #16
    4296:	4681      	mov	r9, r0
    4298:	4658      	mov	r0, fp
    429a:	0404      	lsls	r4, r0, #16
    429c:	0c20      	lsrs	r0, r4, #16
    429e:	4682      	mov	sl, r0
    42a0:	0007      	movs	r7, r0
    42a2:	4648      	mov	r0, r9
    42a4:	435f      	muls	r7, r3
    42a6:	464c      	mov	r4, r9
    42a8:	4343      	muls	r3, r0
    42aa:	4660      	mov	r0, ip
    42ac:	4360      	muls	r0, r4
    42ae:	4664      	mov	r4, ip
    42b0:	4683      	mov	fp, r0
    42b2:	4650      	mov	r0, sl
    42b4:	4344      	muls	r4, r0
    42b6:	0c38      	lsrs	r0, r7, #16
    42b8:	4684      	mov	ip, r0
    42ba:	18e4      	adds	r4, r4, r3
    42bc:	4464      	add	r4, ip
    42be:	42a3      	cmp	r3, r4
    42c0:	d903      	bls.n	42ca <__aeabi_dmul+0x2c2>
    42c2:	2380      	movs	r3, #128	; 0x80
    42c4:	025b      	lsls	r3, r3, #9
    42c6:	469c      	mov	ip, r3
    42c8:	44e3      	add	fp, ip
    42ca:	4648      	mov	r0, r9
    42cc:	043f      	lsls	r7, r7, #16
    42ce:	0c23      	lsrs	r3, r4, #16
    42d0:	0c3f      	lsrs	r7, r7, #16
    42d2:	0424      	lsls	r4, r4, #16
    42d4:	19e4      	adds	r4, r4, r7
    42d6:	4657      	mov	r7, sl
    42d8:	4368      	muls	r0, r5
    42da:	436f      	muls	r7, r5
    42dc:	4684      	mov	ip, r0
    42de:	464d      	mov	r5, r9
    42e0:	4650      	mov	r0, sl
    42e2:	4355      	muls	r5, r2
    42e4:	4342      	muls	r2, r0
    42e6:	0c38      	lsrs	r0, r7, #16
    42e8:	4681      	mov	r9, r0
    42ea:	4462      	add	r2, ip
    42ec:	444a      	add	r2, r9
    42ee:	445b      	add	r3, fp
    42f0:	4594      	cmp	ip, r2
    42f2:	d903      	bls.n	42fc <__aeabi_dmul+0x2f4>
    42f4:	2080      	movs	r0, #128	; 0x80
    42f6:	0240      	lsls	r0, r0, #9
    42f8:	4684      	mov	ip, r0
    42fa:	4465      	add	r5, ip
    42fc:	9803      	ldr	r0, [sp, #12]
    42fe:	043f      	lsls	r7, r7, #16
    4300:	4683      	mov	fp, r0
    4302:	9804      	ldr	r0, [sp, #16]
    4304:	0c3f      	lsrs	r7, r7, #16
    4306:	4684      	mov	ip, r0
    4308:	44e3      	add	fp, ip
    430a:	45c3      	cmp	fp, r8
    430c:	4180      	sbcs	r0, r0
    430e:	4240      	negs	r0, r0
    4310:	4682      	mov	sl, r0
    4312:	0410      	lsls	r0, r2, #16
    4314:	4684      	mov	ip, r0
    4316:	9801      	ldr	r0, [sp, #4]
    4318:	4467      	add	r7, ip
    431a:	4684      	mov	ip, r0
    431c:	4467      	add	r7, ip
    431e:	44a3      	add	fp, r4
    4320:	46bc      	mov	ip, r7
    4322:	45a3      	cmp	fp, r4
    4324:	41a4      	sbcs	r4, r4
    4326:	4699      	mov	r9, r3
    4328:	44d4      	add	ip, sl
    432a:	4264      	negs	r4, r4
    432c:	4287      	cmp	r7, r0
    432e:	41bf      	sbcs	r7, r7
    4330:	45d4      	cmp	ip, sl
    4332:	4180      	sbcs	r0, r0
    4334:	44e1      	add	r9, ip
    4336:	46a0      	mov	r8, r4
    4338:	4599      	cmp	r9, r3
    433a:	419b      	sbcs	r3, r3
    433c:	427f      	negs	r7, r7
    433e:	4240      	negs	r0, r0
    4340:	44c8      	add	r8, r9
    4342:	4307      	orrs	r7, r0
    4344:	0c12      	lsrs	r2, r2, #16
    4346:	18ba      	adds	r2, r7, r2
    4348:	45a0      	cmp	r8, r4
    434a:	41a4      	sbcs	r4, r4
    434c:	425f      	negs	r7, r3
    434e:	003b      	movs	r3, r7
    4350:	4264      	negs	r4, r4
    4352:	4323      	orrs	r3, r4
    4354:	18d7      	adds	r7, r2, r3
    4356:	4643      	mov	r3, r8
    4358:	197d      	adds	r5, r7, r5
    435a:	0ddb      	lsrs	r3, r3, #23
    435c:	026d      	lsls	r5, r5, #9
    435e:	431d      	orrs	r5, r3
    4360:	465b      	mov	r3, fp
    4362:	025a      	lsls	r2, r3, #9
    4364:	9b05      	ldr	r3, [sp, #20]
    4366:	431a      	orrs	r2, r3
    4368:	1e53      	subs	r3, r2, #1
    436a:	419a      	sbcs	r2, r3
    436c:	465b      	mov	r3, fp
    436e:	0ddb      	lsrs	r3, r3, #23
    4370:	431a      	orrs	r2, r3
    4372:	4643      	mov	r3, r8
    4374:	025b      	lsls	r3, r3, #9
    4376:	4313      	orrs	r3, r2
    4378:	01ea      	lsls	r2, r5, #7
    437a:	d507      	bpl.n	438c <__aeabi_dmul+0x384>
    437c:	2201      	movs	r2, #1
    437e:	085c      	lsrs	r4, r3, #1
    4380:	4013      	ands	r3, r2
    4382:	4323      	orrs	r3, r4
    4384:	07ea      	lsls	r2, r5, #31
    4386:	9e02      	ldr	r6, [sp, #8]
    4388:	4313      	orrs	r3, r2
    438a:	086d      	lsrs	r5, r5, #1
    438c:	4a57      	ldr	r2, [pc, #348]	; (44ec <__aeabi_dmul+0x4e4>)
    438e:	18b2      	adds	r2, r6, r2
    4390:	2a00      	cmp	r2, #0
    4392:	dd4b      	ble.n	442c <__aeabi_dmul+0x424>
    4394:	0758      	lsls	r0, r3, #29
    4396:	d009      	beq.n	43ac <__aeabi_dmul+0x3a4>
    4398:	200f      	movs	r0, #15
    439a:	4018      	ands	r0, r3
    439c:	2804      	cmp	r0, #4
    439e:	d005      	beq.n	43ac <__aeabi_dmul+0x3a4>
    43a0:	1d18      	adds	r0, r3, #4
    43a2:	4298      	cmp	r0, r3
    43a4:	419b      	sbcs	r3, r3
    43a6:	425b      	negs	r3, r3
    43a8:	18ed      	adds	r5, r5, r3
    43aa:	0003      	movs	r3, r0
    43ac:	01e8      	lsls	r0, r5, #7
    43ae:	d504      	bpl.n	43ba <__aeabi_dmul+0x3b2>
    43b0:	4a4f      	ldr	r2, [pc, #316]	; (44f0 <__aeabi_dmul+0x4e8>)
    43b2:	4015      	ands	r5, r2
    43b4:	2280      	movs	r2, #128	; 0x80
    43b6:	00d2      	lsls	r2, r2, #3
    43b8:	18b2      	adds	r2, r6, r2
    43ba:	484e      	ldr	r0, [pc, #312]	; (44f4 <__aeabi_dmul+0x4ec>)
    43bc:	4282      	cmp	r2, r0
    43be:	dd00      	ble.n	43c2 <__aeabi_dmul+0x3ba>
    43c0:	e6e7      	b.n	4192 <__aeabi_dmul+0x18a>
    43c2:	2401      	movs	r4, #1
    43c4:	08db      	lsrs	r3, r3, #3
    43c6:	0768      	lsls	r0, r5, #29
    43c8:	4318      	orrs	r0, r3
    43ca:	026d      	lsls	r5, r5, #9
    43cc:	0553      	lsls	r3, r2, #21
    43ce:	4680      	mov	r8, r0
    43d0:	0b2d      	lsrs	r5, r5, #12
    43d2:	0d5b      	lsrs	r3, r3, #21
    43d4:	400c      	ands	r4, r1
    43d6:	e67d      	b.n	40d4 <__aeabi_dmul+0xcc>
    43d8:	2280      	movs	r2, #128	; 0x80
    43da:	4659      	mov	r1, fp
    43dc:	0312      	lsls	r2, r2, #12
    43de:	4211      	tst	r1, r2
    43e0:	d008      	beq.n	43f4 <__aeabi_dmul+0x3ec>
    43e2:	4215      	tst	r5, r2
    43e4:	d106      	bne.n	43f4 <__aeabi_dmul+0x3ec>
    43e6:	4315      	orrs	r5, r2
    43e8:	032d      	lsls	r5, r5, #12
    43ea:	4698      	mov	r8, r3
    43ec:	0b2d      	lsrs	r5, r5, #12
    43ee:	464c      	mov	r4, r9
    43f0:	4b41      	ldr	r3, [pc, #260]	; (44f8 <__aeabi_dmul+0x4f0>)
    43f2:	e66f      	b.n	40d4 <__aeabi_dmul+0xcc>
    43f4:	465d      	mov	r5, fp
    43f6:	4315      	orrs	r5, r2
    43f8:	032d      	lsls	r5, r5, #12
    43fa:	0b2d      	lsrs	r5, r5, #12
    43fc:	4b3e      	ldr	r3, [pc, #248]	; (44f8 <__aeabi_dmul+0x4f0>)
    43fe:	e669      	b.n	40d4 <__aeabi_dmul+0xcc>
    4400:	0003      	movs	r3, r0
    4402:	4655      	mov	r5, sl
    4404:	3b28      	subs	r3, #40	; 0x28
    4406:	409d      	lsls	r5, r3
    4408:	2300      	movs	r3, #0
    440a:	e6bc      	b.n	4186 <__aeabi_dmul+0x17e>
    440c:	4650      	mov	r0, sl
    440e:	f000 fe05 	bl	501c <__clzsi2>
    4412:	3020      	adds	r0, #32
    4414:	e6a8      	b.n	4168 <__aeabi_dmul+0x160>
    4416:	0003      	movs	r3, r0
    4418:	3b28      	subs	r3, #40	; 0x28
    441a:	409f      	lsls	r7, r3
    441c:	2300      	movs	r3, #0
    441e:	46bb      	mov	fp, r7
    4420:	4698      	mov	r8, r3
    4422:	e689      	b.n	4138 <__aeabi_dmul+0x130>
    4424:	f000 fdfa 	bl	501c <__clzsi2>
    4428:	3020      	adds	r0, #32
    442a:	e673      	b.n	4114 <__aeabi_dmul+0x10c>
    442c:	2401      	movs	r4, #1
    442e:	1aa6      	subs	r6, r4, r2
    4430:	2e38      	cmp	r6, #56	; 0x38
    4432:	dd07      	ble.n	4444 <__aeabi_dmul+0x43c>
    4434:	2200      	movs	r2, #0
    4436:	400c      	ands	r4, r1
    4438:	2300      	movs	r3, #0
    443a:	2500      	movs	r5, #0
    443c:	4690      	mov	r8, r2
    443e:	e649      	b.n	40d4 <__aeabi_dmul+0xcc>
    4440:	9e02      	ldr	r6, [sp, #8]
    4442:	e7a3      	b.n	438c <__aeabi_dmul+0x384>
    4444:	2e1f      	cmp	r6, #31
    4446:	dc20      	bgt.n	448a <__aeabi_dmul+0x482>
    4448:	2220      	movs	r2, #32
    444a:	002c      	movs	r4, r5
    444c:	0018      	movs	r0, r3
    444e:	1b92      	subs	r2, r2, r6
    4450:	40f0      	lsrs	r0, r6
    4452:	4094      	lsls	r4, r2
    4454:	4093      	lsls	r3, r2
    4456:	4304      	orrs	r4, r0
    4458:	1e58      	subs	r0, r3, #1
    445a:	4183      	sbcs	r3, r0
    445c:	431c      	orrs	r4, r3
    445e:	40f5      	lsrs	r5, r6
    4460:	0763      	lsls	r3, r4, #29
    4462:	d009      	beq.n	4478 <__aeabi_dmul+0x470>
    4464:	230f      	movs	r3, #15
    4466:	4023      	ands	r3, r4
    4468:	2b04      	cmp	r3, #4
    446a:	d005      	beq.n	4478 <__aeabi_dmul+0x470>
    446c:	0023      	movs	r3, r4
    446e:	1d1c      	adds	r4, r3, #4
    4470:	429c      	cmp	r4, r3
    4472:	4192      	sbcs	r2, r2
    4474:	4252      	negs	r2, r2
    4476:	18ad      	adds	r5, r5, r2
    4478:	022b      	lsls	r3, r5, #8
    447a:	d51f      	bpl.n	44bc <__aeabi_dmul+0x4b4>
    447c:	2401      	movs	r4, #1
    447e:	2200      	movs	r2, #0
    4480:	400c      	ands	r4, r1
    4482:	2301      	movs	r3, #1
    4484:	2500      	movs	r5, #0
    4486:	4690      	mov	r8, r2
    4488:	e624      	b.n	40d4 <__aeabi_dmul+0xcc>
    448a:	201f      	movs	r0, #31
    448c:	002c      	movs	r4, r5
    448e:	4240      	negs	r0, r0
    4490:	1a82      	subs	r2, r0, r2
    4492:	40d4      	lsrs	r4, r2
    4494:	2e20      	cmp	r6, #32
    4496:	d01c      	beq.n	44d2 <__aeabi_dmul+0x4ca>
    4498:	2240      	movs	r2, #64	; 0x40
    449a:	1b96      	subs	r6, r2, r6
    449c:	40b5      	lsls	r5, r6
    449e:	432b      	orrs	r3, r5
    44a0:	1e58      	subs	r0, r3, #1
    44a2:	4183      	sbcs	r3, r0
    44a4:	2007      	movs	r0, #7
    44a6:	4323      	orrs	r3, r4
    44a8:	4018      	ands	r0, r3
    44aa:	2500      	movs	r5, #0
    44ac:	2800      	cmp	r0, #0
    44ae:	d009      	beq.n	44c4 <__aeabi_dmul+0x4bc>
    44b0:	220f      	movs	r2, #15
    44b2:	2500      	movs	r5, #0
    44b4:	401a      	ands	r2, r3
    44b6:	001c      	movs	r4, r3
    44b8:	2a04      	cmp	r2, #4
    44ba:	d1d8      	bne.n	446e <__aeabi_dmul+0x466>
    44bc:	0023      	movs	r3, r4
    44be:	0768      	lsls	r0, r5, #29
    44c0:	026d      	lsls	r5, r5, #9
    44c2:	0b2d      	lsrs	r5, r5, #12
    44c4:	2401      	movs	r4, #1
    44c6:	08db      	lsrs	r3, r3, #3
    44c8:	4303      	orrs	r3, r0
    44ca:	4698      	mov	r8, r3
    44cc:	400c      	ands	r4, r1
    44ce:	2300      	movs	r3, #0
    44d0:	e600      	b.n	40d4 <__aeabi_dmul+0xcc>
    44d2:	2500      	movs	r5, #0
    44d4:	e7e3      	b.n	449e <__aeabi_dmul+0x496>
    44d6:	2280      	movs	r2, #128	; 0x80
    44d8:	2401      	movs	r4, #1
    44da:	0312      	lsls	r2, r2, #12
    44dc:	4315      	orrs	r5, r2
    44de:	032d      	lsls	r5, r5, #12
    44e0:	4698      	mov	r8, r3
    44e2:	0b2d      	lsrs	r5, r5, #12
    44e4:	400c      	ands	r4, r1
    44e6:	4b04      	ldr	r3, [pc, #16]	; (44f8 <__aeabi_dmul+0x4f0>)
    44e8:	e5f4      	b.n	40d4 <__aeabi_dmul+0xcc>
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	000003ff 	.word	0x000003ff
    44f0:	feffffff 	.word	0xfeffffff
    44f4:	000007fe 	.word	0x000007fe
    44f8:	000007ff 	.word	0x000007ff

000044fc <__aeabi_dsub>:
    44fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44fe:	4657      	mov	r7, sl
    4500:	464e      	mov	r6, r9
    4502:	4645      	mov	r5, r8
    4504:	b4e0      	push	{r5, r6, r7}
    4506:	000e      	movs	r6, r1
    4508:	0011      	movs	r1, r2
    450a:	0ff2      	lsrs	r2, r6, #31
    450c:	4692      	mov	sl, r2
    450e:	00c5      	lsls	r5, r0, #3
    4510:	0f42      	lsrs	r2, r0, #29
    4512:	0318      	lsls	r0, r3, #12
    4514:	0337      	lsls	r7, r6, #12
    4516:	0074      	lsls	r4, r6, #1
    4518:	0a40      	lsrs	r0, r0, #9
    451a:	0f4e      	lsrs	r6, r1, #29
    451c:	0a7f      	lsrs	r7, r7, #9
    451e:	4330      	orrs	r0, r6
    4520:	4ecf      	ldr	r6, [pc, #828]	; (4860 <__aeabi_dsub+0x364>)
    4522:	4317      	orrs	r7, r2
    4524:	005a      	lsls	r2, r3, #1
    4526:	0d64      	lsrs	r4, r4, #21
    4528:	0d52      	lsrs	r2, r2, #21
    452a:	0fdb      	lsrs	r3, r3, #31
    452c:	00c9      	lsls	r1, r1, #3
    452e:	42b2      	cmp	r2, r6
    4530:	d100      	bne.n	4534 <__aeabi_dsub+0x38>
    4532:	e0e5      	b.n	4700 <__aeabi_dsub+0x204>
    4534:	2601      	movs	r6, #1
    4536:	4073      	eors	r3, r6
    4538:	1aa6      	subs	r6, r4, r2
    453a:	46b4      	mov	ip, r6
    453c:	4553      	cmp	r3, sl
    453e:	d100      	bne.n	4542 <__aeabi_dsub+0x46>
    4540:	e0af      	b.n	46a2 <__aeabi_dsub+0x1a6>
    4542:	2e00      	cmp	r6, #0
    4544:	dc00      	bgt.n	4548 <__aeabi_dsub+0x4c>
    4546:	e10d      	b.n	4764 <__aeabi_dsub+0x268>
    4548:	2a00      	cmp	r2, #0
    454a:	d13a      	bne.n	45c2 <__aeabi_dsub+0xc6>
    454c:	0003      	movs	r3, r0
    454e:	430b      	orrs	r3, r1
    4550:	d000      	beq.n	4554 <__aeabi_dsub+0x58>
    4552:	e0e4      	b.n	471e <__aeabi_dsub+0x222>
    4554:	076b      	lsls	r3, r5, #29
    4556:	d009      	beq.n	456c <__aeabi_dsub+0x70>
    4558:	230f      	movs	r3, #15
    455a:	402b      	ands	r3, r5
    455c:	2b04      	cmp	r3, #4
    455e:	d005      	beq.n	456c <__aeabi_dsub+0x70>
    4560:	1d2b      	adds	r3, r5, #4
    4562:	42ab      	cmp	r3, r5
    4564:	41ad      	sbcs	r5, r5
    4566:	426d      	negs	r5, r5
    4568:	197f      	adds	r7, r7, r5
    456a:	001d      	movs	r5, r3
    456c:	023b      	lsls	r3, r7, #8
    456e:	d400      	bmi.n	4572 <__aeabi_dsub+0x76>
    4570:	e088      	b.n	4684 <__aeabi_dsub+0x188>
    4572:	4bbb      	ldr	r3, [pc, #748]	; (4860 <__aeabi_dsub+0x364>)
    4574:	3401      	adds	r4, #1
    4576:	429c      	cmp	r4, r3
    4578:	d100      	bne.n	457c <__aeabi_dsub+0x80>
    457a:	e110      	b.n	479e <__aeabi_dsub+0x2a2>
    457c:	003a      	movs	r2, r7
    457e:	4bb9      	ldr	r3, [pc, #740]	; (4864 <__aeabi_dsub+0x368>)
    4580:	4651      	mov	r1, sl
    4582:	401a      	ands	r2, r3
    4584:	2301      	movs	r3, #1
    4586:	0750      	lsls	r0, r2, #29
    4588:	08ed      	lsrs	r5, r5, #3
    458a:	0252      	lsls	r2, r2, #9
    458c:	0564      	lsls	r4, r4, #21
    458e:	4305      	orrs	r5, r0
    4590:	0b12      	lsrs	r2, r2, #12
    4592:	0d64      	lsrs	r4, r4, #21
    4594:	400b      	ands	r3, r1
    4596:	2100      	movs	r1, #0
    4598:	0028      	movs	r0, r5
    459a:	0312      	lsls	r2, r2, #12
    459c:	0d0d      	lsrs	r5, r1, #20
    459e:	0b12      	lsrs	r2, r2, #12
    45a0:	0564      	lsls	r4, r4, #21
    45a2:	052d      	lsls	r5, r5, #20
    45a4:	4315      	orrs	r5, r2
    45a6:	0862      	lsrs	r2, r4, #1
    45a8:	4caf      	ldr	r4, [pc, #700]	; (4868 <__aeabi_dsub+0x36c>)
    45aa:	07db      	lsls	r3, r3, #31
    45ac:	402c      	ands	r4, r5
    45ae:	4314      	orrs	r4, r2
    45b0:	0064      	lsls	r4, r4, #1
    45b2:	0864      	lsrs	r4, r4, #1
    45b4:	431c      	orrs	r4, r3
    45b6:	0021      	movs	r1, r4
    45b8:	bc1c      	pop	{r2, r3, r4}
    45ba:	4690      	mov	r8, r2
    45bc:	4699      	mov	r9, r3
    45be:	46a2      	mov	sl, r4
    45c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45c2:	4ba7      	ldr	r3, [pc, #668]	; (4860 <__aeabi_dsub+0x364>)
    45c4:	429c      	cmp	r4, r3
    45c6:	d0c5      	beq.n	4554 <__aeabi_dsub+0x58>
    45c8:	2380      	movs	r3, #128	; 0x80
    45ca:	041b      	lsls	r3, r3, #16
    45cc:	4318      	orrs	r0, r3
    45ce:	4663      	mov	r3, ip
    45d0:	2b38      	cmp	r3, #56	; 0x38
    45d2:	dd00      	ble.n	45d6 <__aeabi_dsub+0xda>
    45d4:	e0fd      	b.n	47d2 <__aeabi_dsub+0x2d6>
    45d6:	2b1f      	cmp	r3, #31
    45d8:	dd00      	ble.n	45dc <__aeabi_dsub+0xe0>
    45da:	e130      	b.n	483e <__aeabi_dsub+0x342>
    45dc:	4662      	mov	r2, ip
    45de:	2320      	movs	r3, #32
    45e0:	1a9b      	subs	r3, r3, r2
    45e2:	0002      	movs	r2, r0
    45e4:	409a      	lsls	r2, r3
    45e6:	4666      	mov	r6, ip
    45e8:	4690      	mov	r8, r2
    45ea:	000a      	movs	r2, r1
    45ec:	4099      	lsls	r1, r3
    45ee:	40f2      	lsrs	r2, r6
    45f0:	4646      	mov	r6, r8
    45f2:	1e4b      	subs	r3, r1, #1
    45f4:	4199      	sbcs	r1, r3
    45f6:	4332      	orrs	r2, r6
    45f8:	4311      	orrs	r1, r2
    45fa:	4663      	mov	r3, ip
    45fc:	0002      	movs	r2, r0
    45fe:	40da      	lsrs	r2, r3
    4600:	1a69      	subs	r1, r5, r1
    4602:	428d      	cmp	r5, r1
    4604:	419b      	sbcs	r3, r3
    4606:	000d      	movs	r5, r1
    4608:	1aba      	subs	r2, r7, r2
    460a:	425b      	negs	r3, r3
    460c:	1ad7      	subs	r7, r2, r3
    460e:	023b      	lsls	r3, r7, #8
    4610:	d535      	bpl.n	467e <__aeabi_dsub+0x182>
    4612:	027a      	lsls	r2, r7, #9
    4614:	0a53      	lsrs	r3, r2, #9
    4616:	4698      	mov	r8, r3
    4618:	4643      	mov	r3, r8
    461a:	2b00      	cmp	r3, #0
    461c:	d100      	bne.n	4620 <__aeabi_dsub+0x124>
    461e:	e0c4      	b.n	47aa <__aeabi_dsub+0x2ae>
    4620:	4640      	mov	r0, r8
    4622:	f000 fcfb 	bl	501c <__clzsi2>
    4626:	0003      	movs	r3, r0
    4628:	3b08      	subs	r3, #8
    462a:	2b1f      	cmp	r3, #31
    462c:	dd00      	ble.n	4630 <__aeabi_dsub+0x134>
    462e:	e0c5      	b.n	47bc <__aeabi_dsub+0x2c0>
    4630:	2220      	movs	r2, #32
    4632:	0029      	movs	r1, r5
    4634:	1ad2      	subs	r2, r2, r3
    4636:	4647      	mov	r7, r8
    4638:	40d1      	lsrs	r1, r2
    463a:	409f      	lsls	r7, r3
    463c:	000a      	movs	r2, r1
    463e:	409d      	lsls	r5, r3
    4640:	433a      	orrs	r2, r7
    4642:	429c      	cmp	r4, r3
    4644:	dd00      	ble.n	4648 <__aeabi_dsub+0x14c>
    4646:	e0c0      	b.n	47ca <__aeabi_dsub+0x2ce>
    4648:	1b1c      	subs	r4, r3, r4
    464a:	1c63      	adds	r3, r4, #1
    464c:	2b1f      	cmp	r3, #31
    464e:	dd00      	ble.n	4652 <__aeabi_dsub+0x156>
    4650:	e0e4      	b.n	481c <__aeabi_dsub+0x320>
    4652:	2120      	movs	r1, #32
    4654:	0014      	movs	r4, r2
    4656:	0028      	movs	r0, r5
    4658:	1ac9      	subs	r1, r1, r3
    465a:	40d8      	lsrs	r0, r3
    465c:	408c      	lsls	r4, r1
    465e:	408d      	lsls	r5, r1
    4660:	4304      	orrs	r4, r0
    4662:	40da      	lsrs	r2, r3
    4664:	1e68      	subs	r0, r5, #1
    4666:	4185      	sbcs	r5, r0
    4668:	0017      	movs	r7, r2
    466a:	4325      	orrs	r5, r4
    466c:	2400      	movs	r4, #0
    466e:	e771      	b.n	4554 <__aeabi_dsub+0x58>
    4670:	4642      	mov	r2, r8
    4672:	4663      	mov	r3, ip
    4674:	431a      	orrs	r2, r3
    4676:	d100      	bne.n	467a <__aeabi_dsub+0x17e>
    4678:	e24c      	b.n	4b14 <__aeabi_dsub+0x618>
    467a:	4667      	mov	r7, ip
    467c:	4645      	mov	r5, r8
    467e:	076b      	lsls	r3, r5, #29
    4680:	d000      	beq.n	4684 <__aeabi_dsub+0x188>
    4682:	e769      	b.n	4558 <__aeabi_dsub+0x5c>
    4684:	2301      	movs	r3, #1
    4686:	4651      	mov	r1, sl
    4688:	0778      	lsls	r0, r7, #29
    468a:	08ed      	lsrs	r5, r5, #3
    468c:	08fa      	lsrs	r2, r7, #3
    468e:	400b      	ands	r3, r1
    4690:	4305      	orrs	r5, r0
    4692:	4973      	ldr	r1, [pc, #460]	; (4860 <__aeabi_dsub+0x364>)
    4694:	428c      	cmp	r4, r1
    4696:	d038      	beq.n	470a <__aeabi_dsub+0x20e>
    4698:	0312      	lsls	r2, r2, #12
    469a:	0564      	lsls	r4, r4, #21
    469c:	0b12      	lsrs	r2, r2, #12
    469e:	0d64      	lsrs	r4, r4, #21
    46a0:	e779      	b.n	4596 <__aeabi_dsub+0x9a>
    46a2:	2e00      	cmp	r6, #0
    46a4:	dc00      	bgt.n	46a8 <__aeabi_dsub+0x1ac>
    46a6:	e09a      	b.n	47de <__aeabi_dsub+0x2e2>
    46a8:	2a00      	cmp	r2, #0
    46aa:	d047      	beq.n	473c <__aeabi_dsub+0x240>
    46ac:	4a6c      	ldr	r2, [pc, #432]	; (4860 <__aeabi_dsub+0x364>)
    46ae:	4294      	cmp	r4, r2
    46b0:	d100      	bne.n	46b4 <__aeabi_dsub+0x1b8>
    46b2:	e74f      	b.n	4554 <__aeabi_dsub+0x58>
    46b4:	2280      	movs	r2, #128	; 0x80
    46b6:	0412      	lsls	r2, r2, #16
    46b8:	4310      	orrs	r0, r2
    46ba:	4662      	mov	r2, ip
    46bc:	2a38      	cmp	r2, #56	; 0x38
    46be:	dc00      	bgt.n	46c2 <__aeabi_dsub+0x1c6>
    46c0:	e108      	b.n	48d4 <__aeabi_dsub+0x3d8>
    46c2:	4301      	orrs	r1, r0
    46c4:	1e48      	subs	r0, r1, #1
    46c6:	4181      	sbcs	r1, r0
    46c8:	2200      	movs	r2, #0
    46ca:	b2c9      	uxtb	r1, r1
    46cc:	1949      	adds	r1, r1, r5
    46ce:	19d2      	adds	r2, r2, r7
    46d0:	42a9      	cmp	r1, r5
    46d2:	41bf      	sbcs	r7, r7
    46d4:	000d      	movs	r5, r1
    46d6:	427f      	negs	r7, r7
    46d8:	18bf      	adds	r7, r7, r2
    46da:	023a      	lsls	r2, r7, #8
    46dc:	d400      	bmi.n	46e0 <__aeabi_dsub+0x1e4>
    46de:	e142      	b.n	4966 <__aeabi_dsub+0x46a>
    46e0:	4a5f      	ldr	r2, [pc, #380]	; (4860 <__aeabi_dsub+0x364>)
    46e2:	3401      	adds	r4, #1
    46e4:	4294      	cmp	r4, r2
    46e6:	d100      	bne.n	46ea <__aeabi_dsub+0x1ee>
    46e8:	e14e      	b.n	4988 <__aeabi_dsub+0x48c>
    46ea:	2001      	movs	r0, #1
    46ec:	4a5d      	ldr	r2, [pc, #372]	; (4864 <__aeabi_dsub+0x368>)
    46ee:	0869      	lsrs	r1, r5, #1
    46f0:	403a      	ands	r2, r7
    46f2:	4028      	ands	r0, r5
    46f4:	4308      	orrs	r0, r1
    46f6:	07d5      	lsls	r5, r2, #31
    46f8:	4305      	orrs	r5, r0
    46fa:	0857      	lsrs	r7, r2, #1
    46fc:	469a      	mov	sl, r3
    46fe:	e729      	b.n	4554 <__aeabi_dsub+0x58>
    4700:	0006      	movs	r6, r0
    4702:	430e      	orrs	r6, r1
    4704:	d000      	beq.n	4708 <__aeabi_dsub+0x20c>
    4706:	e717      	b.n	4538 <__aeabi_dsub+0x3c>
    4708:	e714      	b.n	4534 <__aeabi_dsub+0x38>
    470a:	0029      	movs	r1, r5
    470c:	4311      	orrs	r1, r2
    470e:	d100      	bne.n	4712 <__aeabi_dsub+0x216>
    4710:	e1f9      	b.n	4b06 <__aeabi_dsub+0x60a>
    4712:	2180      	movs	r1, #128	; 0x80
    4714:	0309      	lsls	r1, r1, #12
    4716:	430a      	orrs	r2, r1
    4718:	0312      	lsls	r2, r2, #12
    471a:	0b12      	lsrs	r2, r2, #12
    471c:	e73b      	b.n	4596 <__aeabi_dsub+0x9a>
    471e:	2301      	movs	r3, #1
    4720:	425b      	negs	r3, r3
    4722:	4698      	mov	r8, r3
    4724:	44c4      	add	ip, r8
    4726:	4663      	mov	r3, ip
    4728:	2b00      	cmp	r3, #0
    472a:	d172      	bne.n	4812 <__aeabi_dsub+0x316>
    472c:	1a69      	subs	r1, r5, r1
    472e:	428d      	cmp	r5, r1
    4730:	419b      	sbcs	r3, r3
    4732:	1a3f      	subs	r7, r7, r0
    4734:	425b      	negs	r3, r3
    4736:	1aff      	subs	r7, r7, r3
    4738:	000d      	movs	r5, r1
    473a:	e768      	b.n	460e <__aeabi_dsub+0x112>
    473c:	0002      	movs	r2, r0
    473e:	430a      	orrs	r2, r1
    4740:	d100      	bne.n	4744 <__aeabi_dsub+0x248>
    4742:	e707      	b.n	4554 <__aeabi_dsub+0x58>
    4744:	2201      	movs	r2, #1
    4746:	4252      	negs	r2, r2
    4748:	4690      	mov	r8, r2
    474a:	44c4      	add	ip, r8
    474c:	4662      	mov	r2, ip
    474e:	2a00      	cmp	r2, #0
    4750:	d000      	beq.n	4754 <__aeabi_dsub+0x258>
    4752:	e0e6      	b.n	4922 <__aeabi_dsub+0x426>
    4754:	1869      	adds	r1, r5, r1
    4756:	42a9      	cmp	r1, r5
    4758:	41b6      	sbcs	r6, r6
    475a:	183f      	adds	r7, r7, r0
    475c:	4276      	negs	r6, r6
    475e:	19f7      	adds	r7, r6, r7
    4760:	000d      	movs	r5, r1
    4762:	e7ba      	b.n	46da <__aeabi_dsub+0x1de>
    4764:	2e00      	cmp	r6, #0
    4766:	d000      	beq.n	476a <__aeabi_dsub+0x26e>
    4768:	e080      	b.n	486c <__aeabi_dsub+0x370>
    476a:	1c62      	adds	r2, r4, #1
    476c:	0552      	lsls	r2, r2, #21
    476e:	0d52      	lsrs	r2, r2, #21
    4770:	2a01      	cmp	r2, #1
    4772:	dc00      	bgt.n	4776 <__aeabi_dsub+0x27a>
    4774:	e0f9      	b.n	496a <__aeabi_dsub+0x46e>
    4776:	1a6a      	subs	r2, r5, r1
    4778:	4691      	mov	r9, r2
    477a:	454d      	cmp	r5, r9
    477c:	41b6      	sbcs	r6, r6
    477e:	1a3a      	subs	r2, r7, r0
    4780:	4276      	negs	r6, r6
    4782:	1b92      	subs	r2, r2, r6
    4784:	4690      	mov	r8, r2
    4786:	0212      	lsls	r2, r2, #8
    4788:	d400      	bmi.n	478c <__aeabi_dsub+0x290>
    478a:	e099      	b.n	48c0 <__aeabi_dsub+0x3c4>
    478c:	1b4d      	subs	r5, r1, r5
    478e:	42a9      	cmp	r1, r5
    4790:	4189      	sbcs	r1, r1
    4792:	1bc7      	subs	r7, r0, r7
    4794:	4249      	negs	r1, r1
    4796:	1a7a      	subs	r2, r7, r1
    4798:	4690      	mov	r8, r2
    479a:	469a      	mov	sl, r3
    479c:	e73c      	b.n	4618 <__aeabi_dsub+0x11c>
    479e:	4652      	mov	r2, sl
    47a0:	2301      	movs	r3, #1
    47a2:	2500      	movs	r5, #0
    47a4:	4013      	ands	r3, r2
    47a6:	2200      	movs	r2, #0
    47a8:	e6f5      	b.n	4596 <__aeabi_dsub+0x9a>
    47aa:	0028      	movs	r0, r5
    47ac:	f000 fc36 	bl	501c <__clzsi2>
    47b0:	3020      	adds	r0, #32
    47b2:	0003      	movs	r3, r0
    47b4:	3b08      	subs	r3, #8
    47b6:	2b1f      	cmp	r3, #31
    47b8:	dc00      	bgt.n	47bc <__aeabi_dsub+0x2c0>
    47ba:	e739      	b.n	4630 <__aeabi_dsub+0x134>
    47bc:	002a      	movs	r2, r5
    47be:	3828      	subs	r0, #40	; 0x28
    47c0:	4082      	lsls	r2, r0
    47c2:	2500      	movs	r5, #0
    47c4:	429c      	cmp	r4, r3
    47c6:	dc00      	bgt.n	47ca <__aeabi_dsub+0x2ce>
    47c8:	e73e      	b.n	4648 <__aeabi_dsub+0x14c>
    47ca:	4f26      	ldr	r7, [pc, #152]	; (4864 <__aeabi_dsub+0x368>)
    47cc:	1ae4      	subs	r4, r4, r3
    47ce:	4017      	ands	r7, r2
    47d0:	e6c0      	b.n	4554 <__aeabi_dsub+0x58>
    47d2:	4301      	orrs	r1, r0
    47d4:	1e48      	subs	r0, r1, #1
    47d6:	4181      	sbcs	r1, r0
    47d8:	2200      	movs	r2, #0
    47da:	b2c9      	uxtb	r1, r1
    47dc:	e710      	b.n	4600 <__aeabi_dsub+0x104>
    47de:	2e00      	cmp	r6, #0
    47e0:	d000      	beq.n	47e4 <__aeabi_dsub+0x2e8>
    47e2:	e0f1      	b.n	49c8 <__aeabi_dsub+0x4cc>
    47e4:	1c62      	adds	r2, r4, #1
    47e6:	4694      	mov	ip, r2
    47e8:	0552      	lsls	r2, r2, #21
    47ea:	0d52      	lsrs	r2, r2, #21
    47ec:	2a01      	cmp	r2, #1
    47ee:	dc00      	bgt.n	47f2 <__aeabi_dsub+0x2f6>
    47f0:	e0a0      	b.n	4934 <__aeabi_dsub+0x438>
    47f2:	4a1b      	ldr	r2, [pc, #108]	; (4860 <__aeabi_dsub+0x364>)
    47f4:	4594      	cmp	ip, r2
    47f6:	d100      	bne.n	47fa <__aeabi_dsub+0x2fe>
    47f8:	e0c5      	b.n	4986 <__aeabi_dsub+0x48a>
    47fa:	1869      	adds	r1, r5, r1
    47fc:	42a9      	cmp	r1, r5
    47fe:	4192      	sbcs	r2, r2
    4800:	183f      	adds	r7, r7, r0
    4802:	4252      	negs	r2, r2
    4804:	19d2      	adds	r2, r2, r7
    4806:	0849      	lsrs	r1, r1, #1
    4808:	07d5      	lsls	r5, r2, #31
    480a:	430d      	orrs	r5, r1
    480c:	0857      	lsrs	r7, r2, #1
    480e:	4664      	mov	r4, ip
    4810:	e6a0      	b.n	4554 <__aeabi_dsub+0x58>
    4812:	4b13      	ldr	r3, [pc, #76]	; (4860 <__aeabi_dsub+0x364>)
    4814:	429c      	cmp	r4, r3
    4816:	d000      	beq.n	481a <__aeabi_dsub+0x31e>
    4818:	e6d9      	b.n	45ce <__aeabi_dsub+0xd2>
    481a:	e69b      	b.n	4554 <__aeabi_dsub+0x58>
    481c:	0011      	movs	r1, r2
    481e:	3c1f      	subs	r4, #31
    4820:	40e1      	lsrs	r1, r4
    4822:	000c      	movs	r4, r1
    4824:	2b20      	cmp	r3, #32
    4826:	d100      	bne.n	482a <__aeabi_dsub+0x32e>
    4828:	e080      	b.n	492c <__aeabi_dsub+0x430>
    482a:	2140      	movs	r1, #64	; 0x40
    482c:	1acb      	subs	r3, r1, r3
    482e:	409a      	lsls	r2, r3
    4830:	4315      	orrs	r5, r2
    4832:	1e6a      	subs	r2, r5, #1
    4834:	4195      	sbcs	r5, r2
    4836:	2700      	movs	r7, #0
    4838:	4325      	orrs	r5, r4
    483a:	2400      	movs	r4, #0
    483c:	e71f      	b.n	467e <__aeabi_dsub+0x182>
    483e:	4663      	mov	r3, ip
    4840:	0002      	movs	r2, r0
    4842:	3b20      	subs	r3, #32
    4844:	40da      	lsrs	r2, r3
    4846:	4663      	mov	r3, ip
    4848:	2b20      	cmp	r3, #32
    484a:	d071      	beq.n	4930 <__aeabi_dsub+0x434>
    484c:	2340      	movs	r3, #64	; 0x40
    484e:	4666      	mov	r6, ip
    4850:	1b9b      	subs	r3, r3, r6
    4852:	4098      	lsls	r0, r3
    4854:	4301      	orrs	r1, r0
    4856:	1e48      	subs	r0, r1, #1
    4858:	4181      	sbcs	r1, r0
    485a:	4311      	orrs	r1, r2
    485c:	2200      	movs	r2, #0
    485e:	e6cf      	b.n	4600 <__aeabi_dsub+0x104>
    4860:	000007ff 	.word	0x000007ff
    4864:	ff7fffff 	.word	0xff7fffff
    4868:	800fffff 	.word	0x800fffff
    486c:	2c00      	cmp	r4, #0
    486e:	d048      	beq.n	4902 <__aeabi_dsub+0x406>
    4870:	4cca      	ldr	r4, [pc, #808]	; (4b9c <__aeabi_dsub+0x6a0>)
    4872:	42a2      	cmp	r2, r4
    4874:	d100      	bne.n	4878 <__aeabi_dsub+0x37c>
    4876:	e0a2      	b.n	49be <__aeabi_dsub+0x4c2>
    4878:	4274      	negs	r4, r6
    487a:	46a1      	mov	r9, r4
    487c:	2480      	movs	r4, #128	; 0x80
    487e:	0424      	lsls	r4, r4, #16
    4880:	4327      	orrs	r7, r4
    4882:	464c      	mov	r4, r9
    4884:	2c38      	cmp	r4, #56	; 0x38
    4886:	dd00      	ble.n	488a <__aeabi_dsub+0x38e>
    4888:	e0db      	b.n	4a42 <__aeabi_dsub+0x546>
    488a:	2c1f      	cmp	r4, #31
    488c:	dd00      	ble.n	4890 <__aeabi_dsub+0x394>
    488e:	e144      	b.n	4b1a <__aeabi_dsub+0x61e>
    4890:	464e      	mov	r6, r9
    4892:	2420      	movs	r4, #32
    4894:	1ba4      	subs	r4, r4, r6
    4896:	003e      	movs	r6, r7
    4898:	40a6      	lsls	r6, r4
    489a:	46a2      	mov	sl, r4
    489c:	46b0      	mov	r8, r6
    489e:	464c      	mov	r4, r9
    48a0:	002e      	movs	r6, r5
    48a2:	40e6      	lsrs	r6, r4
    48a4:	46b4      	mov	ip, r6
    48a6:	4646      	mov	r6, r8
    48a8:	4664      	mov	r4, ip
    48aa:	4326      	orrs	r6, r4
    48ac:	4654      	mov	r4, sl
    48ae:	40a5      	lsls	r5, r4
    48b0:	1e6c      	subs	r4, r5, #1
    48b2:	41a5      	sbcs	r5, r4
    48b4:	0034      	movs	r4, r6
    48b6:	432c      	orrs	r4, r5
    48b8:	464d      	mov	r5, r9
    48ba:	40ef      	lsrs	r7, r5
    48bc:	1b0d      	subs	r5, r1, r4
    48be:	e028      	b.n	4912 <__aeabi_dsub+0x416>
    48c0:	464a      	mov	r2, r9
    48c2:	4643      	mov	r3, r8
    48c4:	464d      	mov	r5, r9
    48c6:	431a      	orrs	r2, r3
    48c8:	d000      	beq.n	48cc <__aeabi_dsub+0x3d0>
    48ca:	e6a5      	b.n	4618 <__aeabi_dsub+0x11c>
    48cc:	2300      	movs	r3, #0
    48ce:	2400      	movs	r4, #0
    48d0:	2500      	movs	r5, #0
    48d2:	e6de      	b.n	4692 <__aeabi_dsub+0x196>
    48d4:	2a1f      	cmp	r2, #31
    48d6:	dc5a      	bgt.n	498e <__aeabi_dsub+0x492>
    48d8:	4666      	mov	r6, ip
    48da:	2220      	movs	r2, #32
    48dc:	1b92      	subs	r2, r2, r6
    48de:	0006      	movs	r6, r0
    48e0:	4096      	lsls	r6, r2
    48e2:	4691      	mov	r9, r2
    48e4:	46b0      	mov	r8, r6
    48e6:	4662      	mov	r2, ip
    48e8:	000e      	movs	r6, r1
    48ea:	40d6      	lsrs	r6, r2
    48ec:	4642      	mov	r2, r8
    48ee:	4316      	orrs	r6, r2
    48f0:	464a      	mov	r2, r9
    48f2:	4091      	lsls	r1, r2
    48f4:	1e4a      	subs	r2, r1, #1
    48f6:	4191      	sbcs	r1, r2
    48f8:	0002      	movs	r2, r0
    48fa:	4660      	mov	r0, ip
    48fc:	4331      	orrs	r1, r6
    48fe:	40c2      	lsrs	r2, r0
    4900:	e6e4      	b.n	46cc <__aeabi_dsub+0x1d0>
    4902:	003c      	movs	r4, r7
    4904:	432c      	orrs	r4, r5
    4906:	d05a      	beq.n	49be <__aeabi_dsub+0x4c2>
    4908:	43f4      	mvns	r4, r6
    490a:	46a1      	mov	r9, r4
    490c:	2c00      	cmp	r4, #0
    490e:	d152      	bne.n	49b6 <__aeabi_dsub+0x4ba>
    4910:	1b4d      	subs	r5, r1, r5
    4912:	42a9      	cmp	r1, r5
    4914:	4189      	sbcs	r1, r1
    4916:	1bc7      	subs	r7, r0, r7
    4918:	4249      	negs	r1, r1
    491a:	1a7f      	subs	r7, r7, r1
    491c:	0014      	movs	r4, r2
    491e:	469a      	mov	sl, r3
    4920:	e675      	b.n	460e <__aeabi_dsub+0x112>
    4922:	4a9e      	ldr	r2, [pc, #632]	; (4b9c <__aeabi_dsub+0x6a0>)
    4924:	4294      	cmp	r4, r2
    4926:	d000      	beq.n	492a <__aeabi_dsub+0x42e>
    4928:	e6c7      	b.n	46ba <__aeabi_dsub+0x1be>
    492a:	e613      	b.n	4554 <__aeabi_dsub+0x58>
    492c:	2200      	movs	r2, #0
    492e:	e77f      	b.n	4830 <__aeabi_dsub+0x334>
    4930:	2000      	movs	r0, #0
    4932:	e78f      	b.n	4854 <__aeabi_dsub+0x358>
    4934:	2c00      	cmp	r4, #0
    4936:	d000      	beq.n	493a <__aeabi_dsub+0x43e>
    4938:	e0c8      	b.n	4acc <__aeabi_dsub+0x5d0>
    493a:	003b      	movs	r3, r7
    493c:	432b      	orrs	r3, r5
    493e:	d100      	bne.n	4942 <__aeabi_dsub+0x446>
    4940:	e10f      	b.n	4b62 <__aeabi_dsub+0x666>
    4942:	0003      	movs	r3, r0
    4944:	430b      	orrs	r3, r1
    4946:	d100      	bne.n	494a <__aeabi_dsub+0x44e>
    4948:	e604      	b.n	4554 <__aeabi_dsub+0x58>
    494a:	1869      	adds	r1, r5, r1
    494c:	42a9      	cmp	r1, r5
    494e:	419b      	sbcs	r3, r3
    4950:	183f      	adds	r7, r7, r0
    4952:	425b      	negs	r3, r3
    4954:	19df      	adds	r7, r3, r7
    4956:	023b      	lsls	r3, r7, #8
    4958:	d400      	bmi.n	495c <__aeabi_dsub+0x460>
    495a:	e11a      	b.n	4b92 <__aeabi_dsub+0x696>
    495c:	4b90      	ldr	r3, [pc, #576]	; (4ba0 <__aeabi_dsub+0x6a4>)
    495e:	000d      	movs	r5, r1
    4960:	401f      	ands	r7, r3
    4962:	4664      	mov	r4, ip
    4964:	e5f6      	b.n	4554 <__aeabi_dsub+0x58>
    4966:	469a      	mov	sl, r3
    4968:	e689      	b.n	467e <__aeabi_dsub+0x182>
    496a:	003a      	movs	r2, r7
    496c:	432a      	orrs	r2, r5
    496e:	2c00      	cmp	r4, #0
    4970:	d15c      	bne.n	4a2c <__aeabi_dsub+0x530>
    4972:	2a00      	cmp	r2, #0
    4974:	d175      	bne.n	4a62 <__aeabi_dsub+0x566>
    4976:	0002      	movs	r2, r0
    4978:	430a      	orrs	r2, r1
    497a:	d100      	bne.n	497e <__aeabi_dsub+0x482>
    497c:	e0ca      	b.n	4b14 <__aeabi_dsub+0x618>
    497e:	0007      	movs	r7, r0
    4980:	000d      	movs	r5, r1
    4982:	469a      	mov	sl, r3
    4984:	e5e6      	b.n	4554 <__aeabi_dsub+0x58>
    4986:	4664      	mov	r4, ip
    4988:	2200      	movs	r2, #0
    498a:	2500      	movs	r5, #0
    498c:	e681      	b.n	4692 <__aeabi_dsub+0x196>
    498e:	4662      	mov	r2, ip
    4990:	0006      	movs	r6, r0
    4992:	3a20      	subs	r2, #32
    4994:	40d6      	lsrs	r6, r2
    4996:	4662      	mov	r2, ip
    4998:	46b0      	mov	r8, r6
    499a:	2a20      	cmp	r2, #32
    499c:	d100      	bne.n	49a0 <__aeabi_dsub+0x4a4>
    499e:	e0b7      	b.n	4b10 <__aeabi_dsub+0x614>
    49a0:	2240      	movs	r2, #64	; 0x40
    49a2:	4666      	mov	r6, ip
    49a4:	1b92      	subs	r2, r2, r6
    49a6:	4090      	lsls	r0, r2
    49a8:	4301      	orrs	r1, r0
    49aa:	4642      	mov	r2, r8
    49ac:	1e48      	subs	r0, r1, #1
    49ae:	4181      	sbcs	r1, r0
    49b0:	4311      	orrs	r1, r2
    49b2:	2200      	movs	r2, #0
    49b4:	e68a      	b.n	46cc <__aeabi_dsub+0x1d0>
    49b6:	4c79      	ldr	r4, [pc, #484]	; (4b9c <__aeabi_dsub+0x6a0>)
    49b8:	42a2      	cmp	r2, r4
    49ba:	d000      	beq.n	49be <__aeabi_dsub+0x4c2>
    49bc:	e761      	b.n	4882 <__aeabi_dsub+0x386>
    49be:	0007      	movs	r7, r0
    49c0:	000d      	movs	r5, r1
    49c2:	0014      	movs	r4, r2
    49c4:	469a      	mov	sl, r3
    49c6:	e5c5      	b.n	4554 <__aeabi_dsub+0x58>
    49c8:	2c00      	cmp	r4, #0
    49ca:	d141      	bne.n	4a50 <__aeabi_dsub+0x554>
    49cc:	003c      	movs	r4, r7
    49ce:	432c      	orrs	r4, r5
    49d0:	d078      	beq.n	4ac4 <__aeabi_dsub+0x5c8>
    49d2:	43f4      	mvns	r4, r6
    49d4:	46a1      	mov	r9, r4
    49d6:	2c00      	cmp	r4, #0
    49d8:	d020      	beq.n	4a1c <__aeabi_dsub+0x520>
    49da:	4c70      	ldr	r4, [pc, #448]	; (4b9c <__aeabi_dsub+0x6a0>)
    49dc:	42a2      	cmp	r2, r4
    49de:	d071      	beq.n	4ac4 <__aeabi_dsub+0x5c8>
    49e0:	464c      	mov	r4, r9
    49e2:	2c38      	cmp	r4, #56	; 0x38
    49e4:	dd00      	ble.n	49e8 <__aeabi_dsub+0x4ec>
    49e6:	e0b2      	b.n	4b4e <__aeabi_dsub+0x652>
    49e8:	2c1f      	cmp	r4, #31
    49ea:	dd00      	ble.n	49ee <__aeabi_dsub+0x4f2>
    49ec:	e0bc      	b.n	4b68 <__aeabi_dsub+0x66c>
    49ee:	2620      	movs	r6, #32
    49f0:	1b34      	subs	r4, r6, r4
    49f2:	46a2      	mov	sl, r4
    49f4:	003c      	movs	r4, r7
    49f6:	4656      	mov	r6, sl
    49f8:	40b4      	lsls	r4, r6
    49fa:	464e      	mov	r6, r9
    49fc:	46a0      	mov	r8, r4
    49fe:	002c      	movs	r4, r5
    4a00:	40f4      	lsrs	r4, r6
    4a02:	46a4      	mov	ip, r4
    4a04:	4644      	mov	r4, r8
    4a06:	4666      	mov	r6, ip
    4a08:	4334      	orrs	r4, r6
    4a0a:	46a4      	mov	ip, r4
    4a0c:	4654      	mov	r4, sl
    4a0e:	40a5      	lsls	r5, r4
    4a10:	4664      	mov	r4, ip
    4a12:	1e6e      	subs	r6, r5, #1
    4a14:	41b5      	sbcs	r5, r6
    4a16:	4325      	orrs	r5, r4
    4a18:	464c      	mov	r4, r9
    4a1a:	40e7      	lsrs	r7, r4
    4a1c:	186d      	adds	r5, r5, r1
    4a1e:	428d      	cmp	r5, r1
    4a20:	4189      	sbcs	r1, r1
    4a22:	183f      	adds	r7, r7, r0
    4a24:	4249      	negs	r1, r1
    4a26:	19cf      	adds	r7, r1, r7
    4a28:	0014      	movs	r4, r2
    4a2a:	e656      	b.n	46da <__aeabi_dsub+0x1de>
    4a2c:	2a00      	cmp	r2, #0
    4a2e:	d12f      	bne.n	4a90 <__aeabi_dsub+0x594>
    4a30:	0002      	movs	r2, r0
    4a32:	430a      	orrs	r2, r1
    4a34:	d100      	bne.n	4a38 <__aeabi_dsub+0x53c>
    4a36:	e084      	b.n	4b42 <__aeabi_dsub+0x646>
    4a38:	0007      	movs	r7, r0
    4a3a:	000d      	movs	r5, r1
    4a3c:	469a      	mov	sl, r3
    4a3e:	4c57      	ldr	r4, [pc, #348]	; (4b9c <__aeabi_dsub+0x6a0>)
    4a40:	e588      	b.n	4554 <__aeabi_dsub+0x58>
    4a42:	433d      	orrs	r5, r7
    4a44:	1e6f      	subs	r7, r5, #1
    4a46:	41bd      	sbcs	r5, r7
    4a48:	b2ec      	uxtb	r4, r5
    4a4a:	2700      	movs	r7, #0
    4a4c:	1b0d      	subs	r5, r1, r4
    4a4e:	e760      	b.n	4912 <__aeabi_dsub+0x416>
    4a50:	4c52      	ldr	r4, [pc, #328]	; (4b9c <__aeabi_dsub+0x6a0>)
    4a52:	42a2      	cmp	r2, r4
    4a54:	d036      	beq.n	4ac4 <__aeabi_dsub+0x5c8>
    4a56:	4274      	negs	r4, r6
    4a58:	2680      	movs	r6, #128	; 0x80
    4a5a:	0436      	lsls	r6, r6, #16
    4a5c:	46a1      	mov	r9, r4
    4a5e:	4337      	orrs	r7, r6
    4a60:	e7be      	b.n	49e0 <__aeabi_dsub+0x4e4>
    4a62:	0002      	movs	r2, r0
    4a64:	430a      	orrs	r2, r1
    4a66:	d100      	bne.n	4a6a <__aeabi_dsub+0x56e>
    4a68:	e574      	b.n	4554 <__aeabi_dsub+0x58>
    4a6a:	1a6a      	subs	r2, r5, r1
    4a6c:	4690      	mov	r8, r2
    4a6e:	4545      	cmp	r5, r8
    4a70:	41b6      	sbcs	r6, r6
    4a72:	1a3a      	subs	r2, r7, r0
    4a74:	4276      	negs	r6, r6
    4a76:	1b92      	subs	r2, r2, r6
    4a78:	4694      	mov	ip, r2
    4a7a:	0212      	lsls	r2, r2, #8
    4a7c:	d400      	bmi.n	4a80 <__aeabi_dsub+0x584>
    4a7e:	e5f7      	b.n	4670 <__aeabi_dsub+0x174>
    4a80:	1b4d      	subs	r5, r1, r5
    4a82:	42a9      	cmp	r1, r5
    4a84:	4189      	sbcs	r1, r1
    4a86:	1bc7      	subs	r7, r0, r7
    4a88:	4249      	negs	r1, r1
    4a8a:	1a7f      	subs	r7, r7, r1
    4a8c:	469a      	mov	sl, r3
    4a8e:	e561      	b.n	4554 <__aeabi_dsub+0x58>
    4a90:	0002      	movs	r2, r0
    4a92:	430a      	orrs	r2, r1
    4a94:	d03a      	beq.n	4b0c <__aeabi_dsub+0x610>
    4a96:	08ed      	lsrs	r5, r5, #3
    4a98:	077c      	lsls	r4, r7, #29
    4a9a:	432c      	orrs	r4, r5
    4a9c:	2580      	movs	r5, #128	; 0x80
    4a9e:	08fa      	lsrs	r2, r7, #3
    4aa0:	032d      	lsls	r5, r5, #12
    4aa2:	422a      	tst	r2, r5
    4aa4:	d008      	beq.n	4ab8 <__aeabi_dsub+0x5bc>
    4aa6:	08c7      	lsrs	r7, r0, #3
    4aa8:	422f      	tst	r7, r5
    4aaa:	d105      	bne.n	4ab8 <__aeabi_dsub+0x5bc>
    4aac:	0745      	lsls	r5, r0, #29
    4aae:	002c      	movs	r4, r5
    4ab0:	003a      	movs	r2, r7
    4ab2:	469a      	mov	sl, r3
    4ab4:	08c9      	lsrs	r1, r1, #3
    4ab6:	430c      	orrs	r4, r1
    4ab8:	0f67      	lsrs	r7, r4, #29
    4aba:	00d2      	lsls	r2, r2, #3
    4abc:	00e5      	lsls	r5, r4, #3
    4abe:	4317      	orrs	r7, r2
    4ac0:	4c36      	ldr	r4, [pc, #216]	; (4b9c <__aeabi_dsub+0x6a0>)
    4ac2:	e547      	b.n	4554 <__aeabi_dsub+0x58>
    4ac4:	0007      	movs	r7, r0
    4ac6:	000d      	movs	r5, r1
    4ac8:	0014      	movs	r4, r2
    4aca:	e543      	b.n	4554 <__aeabi_dsub+0x58>
    4acc:	003a      	movs	r2, r7
    4ace:	432a      	orrs	r2, r5
    4ad0:	d043      	beq.n	4b5a <__aeabi_dsub+0x65e>
    4ad2:	0002      	movs	r2, r0
    4ad4:	430a      	orrs	r2, r1
    4ad6:	d019      	beq.n	4b0c <__aeabi_dsub+0x610>
    4ad8:	08ed      	lsrs	r5, r5, #3
    4ada:	077c      	lsls	r4, r7, #29
    4adc:	432c      	orrs	r4, r5
    4ade:	2580      	movs	r5, #128	; 0x80
    4ae0:	08fa      	lsrs	r2, r7, #3
    4ae2:	032d      	lsls	r5, r5, #12
    4ae4:	422a      	tst	r2, r5
    4ae6:	d007      	beq.n	4af8 <__aeabi_dsub+0x5fc>
    4ae8:	08c6      	lsrs	r6, r0, #3
    4aea:	422e      	tst	r6, r5
    4aec:	d104      	bne.n	4af8 <__aeabi_dsub+0x5fc>
    4aee:	0747      	lsls	r7, r0, #29
    4af0:	003c      	movs	r4, r7
    4af2:	0032      	movs	r2, r6
    4af4:	08c9      	lsrs	r1, r1, #3
    4af6:	430c      	orrs	r4, r1
    4af8:	00d7      	lsls	r7, r2, #3
    4afa:	0f62      	lsrs	r2, r4, #29
    4afc:	00e5      	lsls	r5, r4, #3
    4afe:	4317      	orrs	r7, r2
    4b00:	469a      	mov	sl, r3
    4b02:	4c26      	ldr	r4, [pc, #152]	; (4b9c <__aeabi_dsub+0x6a0>)
    4b04:	e526      	b.n	4554 <__aeabi_dsub+0x58>
    4b06:	2200      	movs	r2, #0
    4b08:	2500      	movs	r5, #0
    4b0a:	e544      	b.n	4596 <__aeabi_dsub+0x9a>
    4b0c:	4c23      	ldr	r4, [pc, #140]	; (4b9c <__aeabi_dsub+0x6a0>)
    4b0e:	e521      	b.n	4554 <__aeabi_dsub+0x58>
    4b10:	2000      	movs	r0, #0
    4b12:	e749      	b.n	49a8 <__aeabi_dsub+0x4ac>
    4b14:	2300      	movs	r3, #0
    4b16:	2500      	movs	r5, #0
    4b18:	e5bb      	b.n	4692 <__aeabi_dsub+0x196>
    4b1a:	464c      	mov	r4, r9
    4b1c:	003e      	movs	r6, r7
    4b1e:	3c20      	subs	r4, #32
    4b20:	40e6      	lsrs	r6, r4
    4b22:	464c      	mov	r4, r9
    4b24:	46b4      	mov	ip, r6
    4b26:	2c20      	cmp	r4, #32
    4b28:	d031      	beq.n	4b8e <__aeabi_dsub+0x692>
    4b2a:	2440      	movs	r4, #64	; 0x40
    4b2c:	464e      	mov	r6, r9
    4b2e:	1ba6      	subs	r6, r4, r6
    4b30:	40b7      	lsls	r7, r6
    4b32:	433d      	orrs	r5, r7
    4b34:	1e6c      	subs	r4, r5, #1
    4b36:	41a5      	sbcs	r5, r4
    4b38:	4664      	mov	r4, ip
    4b3a:	432c      	orrs	r4, r5
    4b3c:	2700      	movs	r7, #0
    4b3e:	1b0d      	subs	r5, r1, r4
    4b40:	e6e7      	b.n	4912 <__aeabi_dsub+0x416>
    4b42:	2280      	movs	r2, #128	; 0x80
    4b44:	2300      	movs	r3, #0
    4b46:	0312      	lsls	r2, r2, #12
    4b48:	4c14      	ldr	r4, [pc, #80]	; (4b9c <__aeabi_dsub+0x6a0>)
    4b4a:	2500      	movs	r5, #0
    4b4c:	e5a1      	b.n	4692 <__aeabi_dsub+0x196>
    4b4e:	433d      	orrs	r5, r7
    4b50:	1e6f      	subs	r7, r5, #1
    4b52:	41bd      	sbcs	r5, r7
    4b54:	2700      	movs	r7, #0
    4b56:	b2ed      	uxtb	r5, r5
    4b58:	e760      	b.n	4a1c <__aeabi_dsub+0x520>
    4b5a:	0007      	movs	r7, r0
    4b5c:	000d      	movs	r5, r1
    4b5e:	4c0f      	ldr	r4, [pc, #60]	; (4b9c <__aeabi_dsub+0x6a0>)
    4b60:	e4f8      	b.n	4554 <__aeabi_dsub+0x58>
    4b62:	0007      	movs	r7, r0
    4b64:	000d      	movs	r5, r1
    4b66:	e4f5      	b.n	4554 <__aeabi_dsub+0x58>
    4b68:	464e      	mov	r6, r9
    4b6a:	003c      	movs	r4, r7
    4b6c:	3e20      	subs	r6, #32
    4b6e:	40f4      	lsrs	r4, r6
    4b70:	46a0      	mov	r8, r4
    4b72:	464c      	mov	r4, r9
    4b74:	2c20      	cmp	r4, #32
    4b76:	d00e      	beq.n	4b96 <__aeabi_dsub+0x69a>
    4b78:	2440      	movs	r4, #64	; 0x40
    4b7a:	464e      	mov	r6, r9
    4b7c:	1ba4      	subs	r4, r4, r6
    4b7e:	40a7      	lsls	r7, r4
    4b80:	433d      	orrs	r5, r7
    4b82:	1e6f      	subs	r7, r5, #1
    4b84:	41bd      	sbcs	r5, r7
    4b86:	4644      	mov	r4, r8
    4b88:	2700      	movs	r7, #0
    4b8a:	4325      	orrs	r5, r4
    4b8c:	e746      	b.n	4a1c <__aeabi_dsub+0x520>
    4b8e:	2700      	movs	r7, #0
    4b90:	e7cf      	b.n	4b32 <__aeabi_dsub+0x636>
    4b92:	000d      	movs	r5, r1
    4b94:	e573      	b.n	467e <__aeabi_dsub+0x182>
    4b96:	2700      	movs	r7, #0
    4b98:	e7f2      	b.n	4b80 <__aeabi_dsub+0x684>
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	000007ff 	.word	0x000007ff
    4ba0:	ff7fffff 	.word	0xff7fffff

00004ba4 <__aeabi_dcmpun>:
    4ba4:	b570      	push	{r4, r5, r6, lr}
    4ba6:	4e0e      	ldr	r6, [pc, #56]	; (4be0 <__aeabi_dcmpun+0x3c>)
    4ba8:	030c      	lsls	r4, r1, #12
    4baa:	031d      	lsls	r5, r3, #12
    4bac:	0049      	lsls	r1, r1, #1
    4bae:	005b      	lsls	r3, r3, #1
    4bb0:	0b24      	lsrs	r4, r4, #12
    4bb2:	0d49      	lsrs	r1, r1, #21
    4bb4:	0b2d      	lsrs	r5, r5, #12
    4bb6:	0d5b      	lsrs	r3, r3, #21
    4bb8:	42b1      	cmp	r1, r6
    4bba:	d004      	beq.n	4bc6 <__aeabi_dcmpun+0x22>
    4bbc:	4908      	ldr	r1, [pc, #32]	; (4be0 <__aeabi_dcmpun+0x3c>)
    4bbe:	2000      	movs	r0, #0
    4bc0:	428b      	cmp	r3, r1
    4bc2:	d008      	beq.n	4bd6 <__aeabi_dcmpun+0x32>
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	4304      	orrs	r4, r0
    4bc8:	2001      	movs	r0, #1
    4bca:	2c00      	cmp	r4, #0
    4bcc:	d1fa      	bne.n	4bc4 <__aeabi_dcmpun+0x20>
    4bce:	4904      	ldr	r1, [pc, #16]	; (4be0 <__aeabi_dcmpun+0x3c>)
    4bd0:	2000      	movs	r0, #0
    4bd2:	428b      	cmp	r3, r1
    4bd4:	d1f6      	bne.n	4bc4 <__aeabi_dcmpun+0x20>
    4bd6:	4315      	orrs	r5, r2
    4bd8:	0028      	movs	r0, r5
    4bda:	1e45      	subs	r5, r0, #1
    4bdc:	41a8      	sbcs	r0, r5
    4bde:	e7f1      	b.n	4bc4 <__aeabi_dcmpun+0x20>
    4be0:	000007ff 	.word	0x000007ff

00004be4 <__aeabi_d2iz>:
    4be4:	030b      	lsls	r3, r1, #12
    4be6:	b530      	push	{r4, r5, lr}
    4be8:	4d13      	ldr	r5, [pc, #76]	; (4c38 <__aeabi_d2iz+0x54>)
    4bea:	0b1a      	lsrs	r2, r3, #12
    4bec:	004b      	lsls	r3, r1, #1
    4bee:	0d5b      	lsrs	r3, r3, #21
    4bf0:	0fc9      	lsrs	r1, r1, #31
    4bf2:	2400      	movs	r4, #0
    4bf4:	42ab      	cmp	r3, r5
    4bf6:	dd11      	ble.n	4c1c <__aeabi_d2iz+0x38>
    4bf8:	4c10      	ldr	r4, [pc, #64]	; (4c3c <__aeabi_d2iz+0x58>)
    4bfa:	42a3      	cmp	r3, r4
    4bfc:	dc10      	bgt.n	4c20 <__aeabi_d2iz+0x3c>
    4bfe:	2480      	movs	r4, #128	; 0x80
    4c00:	0364      	lsls	r4, r4, #13
    4c02:	4322      	orrs	r2, r4
    4c04:	4c0e      	ldr	r4, [pc, #56]	; (4c40 <__aeabi_d2iz+0x5c>)
    4c06:	1ae4      	subs	r4, r4, r3
    4c08:	2c1f      	cmp	r4, #31
    4c0a:	dd0c      	ble.n	4c26 <__aeabi_d2iz+0x42>
    4c0c:	480d      	ldr	r0, [pc, #52]	; (4c44 <__aeabi_d2iz+0x60>)
    4c0e:	1ac3      	subs	r3, r0, r3
    4c10:	40da      	lsrs	r2, r3
    4c12:	0013      	movs	r3, r2
    4c14:	425c      	negs	r4, r3
    4c16:	2900      	cmp	r1, #0
    4c18:	d100      	bne.n	4c1c <__aeabi_d2iz+0x38>
    4c1a:	001c      	movs	r4, r3
    4c1c:	0020      	movs	r0, r4
    4c1e:	bd30      	pop	{r4, r5, pc}
    4c20:	4b09      	ldr	r3, [pc, #36]	; (4c48 <__aeabi_d2iz+0x64>)
    4c22:	18cc      	adds	r4, r1, r3
    4c24:	e7fa      	b.n	4c1c <__aeabi_d2iz+0x38>
    4c26:	40e0      	lsrs	r0, r4
    4c28:	4c08      	ldr	r4, [pc, #32]	; (4c4c <__aeabi_d2iz+0x68>)
    4c2a:	46a4      	mov	ip, r4
    4c2c:	4463      	add	r3, ip
    4c2e:	409a      	lsls	r2, r3
    4c30:	0013      	movs	r3, r2
    4c32:	4303      	orrs	r3, r0
    4c34:	e7ee      	b.n	4c14 <__aeabi_d2iz+0x30>
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	000003fe 	.word	0x000003fe
    4c3c:	0000041d 	.word	0x0000041d
    4c40:	00000433 	.word	0x00000433
    4c44:	00000413 	.word	0x00000413
    4c48:	7fffffff 	.word	0x7fffffff
    4c4c:	fffffbed 	.word	0xfffffbed

00004c50 <__aeabi_i2d>:
    4c50:	b570      	push	{r4, r5, r6, lr}
    4c52:	2800      	cmp	r0, #0
    4c54:	d030      	beq.n	4cb8 <__aeabi_i2d+0x68>
    4c56:	17c3      	asrs	r3, r0, #31
    4c58:	18c4      	adds	r4, r0, r3
    4c5a:	405c      	eors	r4, r3
    4c5c:	0fc5      	lsrs	r5, r0, #31
    4c5e:	0020      	movs	r0, r4
    4c60:	f000 f9dc 	bl	501c <__clzsi2>
    4c64:	4b17      	ldr	r3, [pc, #92]	; (4cc4 <__aeabi_i2d+0x74>)
    4c66:	4a18      	ldr	r2, [pc, #96]	; (4cc8 <__aeabi_i2d+0x78>)
    4c68:	1a1b      	subs	r3, r3, r0
    4c6a:	1ad2      	subs	r2, r2, r3
    4c6c:	2a1f      	cmp	r2, #31
    4c6e:	dd18      	ble.n	4ca2 <__aeabi_i2d+0x52>
    4c70:	4a16      	ldr	r2, [pc, #88]	; (4ccc <__aeabi_i2d+0x7c>)
    4c72:	1ad2      	subs	r2, r2, r3
    4c74:	4094      	lsls	r4, r2
    4c76:	2200      	movs	r2, #0
    4c78:	0324      	lsls	r4, r4, #12
    4c7a:	055b      	lsls	r3, r3, #21
    4c7c:	0b24      	lsrs	r4, r4, #12
    4c7e:	0d5b      	lsrs	r3, r3, #21
    4c80:	2100      	movs	r1, #0
    4c82:	0010      	movs	r0, r2
    4c84:	0324      	lsls	r4, r4, #12
    4c86:	0d0a      	lsrs	r2, r1, #20
    4c88:	0512      	lsls	r2, r2, #20
    4c8a:	0b24      	lsrs	r4, r4, #12
    4c8c:	4314      	orrs	r4, r2
    4c8e:	4a10      	ldr	r2, [pc, #64]	; (4cd0 <__aeabi_i2d+0x80>)
    4c90:	051b      	lsls	r3, r3, #20
    4c92:	4014      	ands	r4, r2
    4c94:	431c      	orrs	r4, r3
    4c96:	0064      	lsls	r4, r4, #1
    4c98:	07ed      	lsls	r5, r5, #31
    4c9a:	0864      	lsrs	r4, r4, #1
    4c9c:	432c      	orrs	r4, r5
    4c9e:	0021      	movs	r1, r4
    4ca0:	bd70      	pop	{r4, r5, r6, pc}
    4ca2:	0021      	movs	r1, r4
    4ca4:	4091      	lsls	r1, r2
    4ca6:	000a      	movs	r2, r1
    4ca8:	210b      	movs	r1, #11
    4caa:	1a08      	subs	r0, r1, r0
    4cac:	40c4      	lsrs	r4, r0
    4cae:	055b      	lsls	r3, r3, #21
    4cb0:	0324      	lsls	r4, r4, #12
    4cb2:	0b24      	lsrs	r4, r4, #12
    4cb4:	0d5b      	lsrs	r3, r3, #21
    4cb6:	e7e3      	b.n	4c80 <__aeabi_i2d+0x30>
    4cb8:	2500      	movs	r5, #0
    4cba:	2300      	movs	r3, #0
    4cbc:	2400      	movs	r4, #0
    4cbe:	2200      	movs	r2, #0
    4cc0:	e7de      	b.n	4c80 <__aeabi_i2d+0x30>
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	0000041e 	.word	0x0000041e
    4cc8:	00000433 	.word	0x00000433
    4ccc:	00000413 	.word	0x00000413
    4cd0:	800fffff 	.word	0x800fffff

00004cd4 <__aeabi_ui2d>:
    4cd4:	b570      	push	{r4, r5, r6, lr}
    4cd6:	1e05      	subs	r5, r0, #0
    4cd8:	d028      	beq.n	4d2c <__aeabi_ui2d+0x58>
    4cda:	f000 f99f 	bl	501c <__clzsi2>
    4cde:	4b15      	ldr	r3, [pc, #84]	; (4d34 <__aeabi_ui2d+0x60>)
    4ce0:	4a15      	ldr	r2, [pc, #84]	; (4d38 <__aeabi_ui2d+0x64>)
    4ce2:	1a1b      	subs	r3, r3, r0
    4ce4:	1ad2      	subs	r2, r2, r3
    4ce6:	2a1f      	cmp	r2, #31
    4ce8:	dd16      	ble.n	4d18 <__aeabi_ui2d+0x44>
    4cea:	002c      	movs	r4, r5
    4cec:	4a13      	ldr	r2, [pc, #76]	; (4d3c <__aeabi_ui2d+0x68>)
    4cee:	2500      	movs	r5, #0
    4cf0:	1ad2      	subs	r2, r2, r3
    4cf2:	4094      	lsls	r4, r2
    4cf4:	055a      	lsls	r2, r3, #21
    4cf6:	0324      	lsls	r4, r4, #12
    4cf8:	0b24      	lsrs	r4, r4, #12
    4cfa:	0d52      	lsrs	r2, r2, #21
    4cfc:	2100      	movs	r1, #0
    4cfe:	0324      	lsls	r4, r4, #12
    4d00:	0d0b      	lsrs	r3, r1, #20
    4d02:	0b24      	lsrs	r4, r4, #12
    4d04:	051b      	lsls	r3, r3, #20
    4d06:	4323      	orrs	r3, r4
    4d08:	4c0d      	ldr	r4, [pc, #52]	; (4d40 <__aeabi_ui2d+0x6c>)
    4d0a:	0512      	lsls	r2, r2, #20
    4d0c:	4023      	ands	r3, r4
    4d0e:	4313      	orrs	r3, r2
    4d10:	005b      	lsls	r3, r3, #1
    4d12:	0028      	movs	r0, r5
    4d14:	0859      	lsrs	r1, r3, #1
    4d16:	bd70      	pop	{r4, r5, r6, pc}
    4d18:	210b      	movs	r1, #11
    4d1a:	002c      	movs	r4, r5
    4d1c:	1a08      	subs	r0, r1, r0
    4d1e:	40c4      	lsrs	r4, r0
    4d20:	4095      	lsls	r5, r2
    4d22:	0324      	lsls	r4, r4, #12
    4d24:	055a      	lsls	r2, r3, #21
    4d26:	0b24      	lsrs	r4, r4, #12
    4d28:	0d52      	lsrs	r2, r2, #21
    4d2a:	e7e7      	b.n	4cfc <__aeabi_ui2d+0x28>
    4d2c:	2200      	movs	r2, #0
    4d2e:	2400      	movs	r4, #0
    4d30:	e7e4      	b.n	4cfc <__aeabi_ui2d+0x28>
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	0000041e 	.word	0x0000041e
    4d38:	00000433 	.word	0x00000433
    4d3c:	00000413 	.word	0x00000413
    4d40:	800fffff 	.word	0x800fffff

00004d44 <__aeabi_f2d>:
    4d44:	0042      	lsls	r2, r0, #1
    4d46:	0e12      	lsrs	r2, r2, #24
    4d48:	1c51      	adds	r1, r2, #1
    4d4a:	0243      	lsls	r3, r0, #9
    4d4c:	b2c9      	uxtb	r1, r1
    4d4e:	b570      	push	{r4, r5, r6, lr}
    4d50:	0a5d      	lsrs	r5, r3, #9
    4d52:	0fc4      	lsrs	r4, r0, #31
    4d54:	2901      	cmp	r1, #1
    4d56:	dd15      	ble.n	4d84 <__aeabi_f2d+0x40>
    4d58:	21e0      	movs	r1, #224	; 0xe0
    4d5a:	0089      	lsls	r1, r1, #2
    4d5c:	468c      	mov	ip, r1
    4d5e:	076d      	lsls	r5, r5, #29
    4d60:	0b1b      	lsrs	r3, r3, #12
    4d62:	4462      	add	r2, ip
    4d64:	2100      	movs	r1, #0
    4d66:	0028      	movs	r0, r5
    4d68:	0d0d      	lsrs	r5, r1, #20
    4d6a:	052d      	lsls	r5, r5, #20
    4d6c:	432b      	orrs	r3, r5
    4d6e:	4d1c      	ldr	r5, [pc, #112]	; (4de0 <__aeabi_f2d+0x9c>)
    4d70:	0552      	lsls	r2, r2, #21
    4d72:	402b      	ands	r3, r5
    4d74:	0852      	lsrs	r2, r2, #1
    4d76:	4313      	orrs	r3, r2
    4d78:	005b      	lsls	r3, r3, #1
    4d7a:	07e4      	lsls	r4, r4, #31
    4d7c:	085b      	lsrs	r3, r3, #1
    4d7e:	4323      	orrs	r3, r4
    4d80:	0019      	movs	r1, r3
    4d82:	bd70      	pop	{r4, r5, r6, pc}
    4d84:	2a00      	cmp	r2, #0
    4d86:	d115      	bne.n	4db4 <__aeabi_f2d+0x70>
    4d88:	2d00      	cmp	r5, #0
    4d8a:	d01f      	beq.n	4dcc <__aeabi_f2d+0x88>
    4d8c:	0028      	movs	r0, r5
    4d8e:	f000 f945 	bl	501c <__clzsi2>
    4d92:	280a      	cmp	r0, #10
    4d94:	dc1d      	bgt.n	4dd2 <__aeabi_f2d+0x8e>
    4d96:	230b      	movs	r3, #11
    4d98:	002a      	movs	r2, r5
    4d9a:	1a1b      	subs	r3, r3, r0
    4d9c:	40da      	lsrs	r2, r3
    4d9e:	0013      	movs	r3, r2
    4da0:	0002      	movs	r2, r0
    4da2:	3215      	adds	r2, #21
    4da4:	4095      	lsls	r5, r2
    4da6:	4a0f      	ldr	r2, [pc, #60]	; (4de4 <__aeabi_f2d+0xa0>)
    4da8:	031b      	lsls	r3, r3, #12
    4daa:	1a12      	subs	r2, r2, r0
    4dac:	0552      	lsls	r2, r2, #21
    4dae:	0b1b      	lsrs	r3, r3, #12
    4db0:	0d52      	lsrs	r2, r2, #21
    4db2:	e7d7      	b.n	4d64 <__aeabi_f2d+0x20>
    4db4:	2d00      	cmp	r5, #0
    4db6:	d006      	beq.n	4dc6 <__aeabi_f2d+0x82>
    4db8:	2280      	movs	r2, #128	; 0x80
    4dba:	0b1b      	lsrs	r3, r3, #12
    4dbc:	0312      	lsls	r2, r2, #12
    4dbe:	4313      	orrs	r3, r2
    4dc0:	076d      	lsls	r5, r5, #29
    4dc2:	4a09      	ldr	r2, [pc, #36]	; (4de8 <__aeabi_f2d+0xa4>)
    4dc4:	e7ce      	b.n	4d64 <__aeabi_f2d+0x20>
    4dc6:	4a08      	ldr	r2, [pc, #32]	; (4de8 <__aeabi_f2d+0xa4>)
    4dc8:	2300      	movs	r3, #0
    4dca:	e7cb      	b.n	4d64 <__aeabi_f2d+0x20>
    4dcc:	2200      	movs	r2, #0
    4dce:	2300      	movs	r3, #0
    4dd0:	e7c8      	b.n	4d64 <__aeabi_f2d+0x20>
    4dd2:	0003      	movs	r3, r0
    4dd4:	3b0b      	subs	r3, #11
    4dd6:	409d      	lsls	r5, r3
    4dd8:	002b      	movs	r3, r5
    4dda:	2500      	movs	r5, #0
    4ddc:	e7e3      	b.n	4da6 <__aeabi_f2d+0x62>
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	800fffff 	.word	0x800fffff
    4de4:	00000389 	.word	0x00000389
    4de8:	000007ff 	.word	0x000007ff

00004dec <__aeabi_d2f>:
    4dec:	004b      	lsls	r3, r1, #1
    4dee:	b570      	push	{r4, r5, r6, lr}
    4df0:	0d5e      	lsrs	r6, r3, #21
    4df2:	030c      	lsls	r4, r1, #12
    4df4:	1c75      	adds	r5, r6, #1
    4df6:	0a64      	lsrs	r4, r4, #9
    4df8:	0f42      	lsrs	r2, r0, #29
    4dfa:	056d      	lsls	r5, r5, #21
    4dfc:	4322      	orrs	r2, r4
    4dfe:	0fc9      	lsrs	r1, r1, #31
    4e00:	00c4      	lsls	r4, r0, #3
    4e02:	0d6d      	lsrs	r5, r5, #21
    4e04:	2d01      	cmp	r5, #1
    4e06:	dd2a      	ble.n	4e5e <__aeabi_d2f+0x72>
    4e08:	4b3b      	ldr	r3, [pc, #236]	; (4ef8 <__aeabi_d2f+0x10c>)
    4e0a:	18f3      	adds	r3, r6, r3
    4e0c:	2bfe      	cmp	r3, #254	; 0xfe
    4e0e:	dc1a      	bgt.n	4e46 <__aeabi_d2f+0x5a>
    4e10:	2b00      	cmp	r3, #0
    4e12:	dd42      	ble.n	4e9a <__aeabi_d2f+0xae>
    4e14:	0180      	lsls	r0, r0, #6
    4e16:	1e45      	subs	r5, r0, #1
    4e18:	41a8      	sbcs	r0, r5
    4e1a:	00d2      	lsls	r2, r2, #3
    4e1c:	4310      	orrs	r0, r2
    4e1e:	0f62      	lsrs	r2, r4, #29
    4e20:	4302      	orrs	r2, r0
    4e22:	0750      	lsls	r0, r2, #29
    4e24:	d004      	beq.n	4e30 <__aeabi_d2f+0x44>
    4e26:	200f      	movs	r0, #15
    4e28:	4010      	ands	r0, r2
    4e2a:	2804      	cmp	r0, #4
    4e2c:	d000      	beq.n	4e30 <__aeabi_d2f+0x44>
    4e2e:	3204      	adds	r2, #4
    4e30:	2080      	movs	r0, #128	; 0x80
    4e32:	04c0      	lsls	r0, r0, #19
    4e34:	4010      	ands	r0, r2
    4e36:	d021      	beq.n	4e7c <__aeabi_d2f+0x90>
    4e38:	3301      	adds	r3, #1
    4e3a:	2bff      	cmp	r3, #255	; 0xff
    4e3c:	d003      	beq.n	4e46 <__aeabi_d2f+0x5a>
    4e3e:	0192      	lsls	r2, r2, #6
    4e40:	0a52      	lsrs	r2, r2, #9
    4e42:	b2db      	uxtb	r3, r3
    4e44:	e001      	b.n	4e4a <__aeabi_d2f+0x5e>
    4e46:	23ff      	movs	r3, #255	; 0xff
    4e48:	2200      	movs	r2, #0
    4e4a:	0252      	lsls	r2, r2, #9
    4e4c:	0a52      	lsrs	r2, r2, #9
    4e4e:	05db      	lsls	r3, r3, #23
    4e50:	4313      	orrs	r3, r2
    4e52:	005b      	lsls	r3, r3, #1
    4e54:	07c9      	lsls	r1, r1, #31
    4e56:	085b      	lsrs	r3, r3, #1
    4e58:	430b      	orrs	r3, r1
    4e5a:	0018      	movs	r0, r3
    4e5c:	bd70      	pop	{r4, r5, r6, pc}
    4e5e:	2e00      	cmp	r6, #0
    4e60:	d007      	beq.n	4e72 <__aeabi_d2f+0x86>
    4e62:	4314      	orrs	r4, r2
    4e64:	d0ef      	beq.n	4e46 <__aeabi_d2f+0x5a>
    4e66:	2080      	movs	r0, #128	; 0x80
    4e68:	00d2      	lsls	r2, r2, #3
    4e6a:	0480      	lsls	r0, r0, #18
    4e6c:	4302      	orrs	r2, r0
    4e6e:	23ff      	movs	r3, #255	; 0xff
    4e70:	e7d7      	b.n	4e22 <__aeabi_d2f+0x36>
    4e72:	4322      	orrs	r2, r4
    4e74:	2300      	movs	r3, #0
    4e76:	2a00      	cmp	r2, #0
    4e78:	d003      	beq.n	4e82 <__aeabi_d2f+0x96>
    4e7a:	2205      	movs	r2, #5
    4e7c:	08d2      	lsrs	r2, r2, #3
    4e7e:	2bff      	cmp	r3, #255	; 0xff
    4e80:	d003      	beq.n	4e8a <__aeabi_d2f+0x9e>
    4e82:	0252      	lsls	r2, r2, #9
    4e84:	0a52      	lsrs	r2, r2, #9
    4e86:	b2db      	uxtb	r3, r3
    4e88:	e7df      	b.n	4e4a <__aeabi_d2f+0x5e>
    4e8a:	2a00      	cmp	r2, #0
    4e8c:	d032      	beq.n	4ef4 <__aeabi_d2f+0x108>
    4e8e:	2080      	movs	r0, #128	; 0x80
    4e90:	03c0      	lsls	r0, r0, #15
    4e92:	4302      	orrs	r2, r0
    4e94:	0252      	lsls	r2, r2, #9
    4e96:	0a52      	lsrs	r2, r2, #9
    4e98:	e7d7      	b.n	4e4a <__aeabi_d2f+0x5e>
    4e9a:	0018      	movs	r0, r3
    4e9c:	3017      	adds	r0, #23
    4e9e:	db14      	blt.n	4eca <__aeabi_d2f+0xde>
    4ea0:	2080      	movs	r0, #128	; 0x80
    4ea2:	0400      	lsls	r0, r0, #16
    4ea4:	4302      	orrs	r2, r0
    4ea6:	201e      	movs	r0, #30
    4ea8:	1ac0      	subs	r0, r0, r3
    4eaa:	281f      	cmp	r0, #31
    4eac:	dc0f      	bgt.n	4ece <__aeabi_d2f+0xe2>
    4eae:	0025      	movs	r5, r4
    4eb0:	4b12      	ldr	r3, [pc, #72]	; (4efc <__aeabi_d2f+0x110>)
    4eb2:	18f3      	adds	r3, r6, r3
    4eb4:	409d      	lsls	r5, r3
    4eb6:	1e6e      	subs	r6, r5, #1
    4eb8:	41b5      	sbcs	r5, r6
    4eba:	409a      	lsls	r2, r3
    4ebc:	002b      	movs	r3, r5
    4ebe:	4313      	orrs	r3, r2
    4ec0:	0022      	movs	r2, r4
    4ec2:	40c2      	lsrs	r2, r0
    4ec4:	431a      	orrs	r2, r3
    4ec6:	2300      	movs	r3, #0
    4ec8:	e7ab      	b.n	4e22 <__aeabi_d2f+0x36>
    4eca:	2300      	movs	r3, #0
    4ecc:	e7d5      	b.n	4e7a <__aeabi_d2f+0x8e>
    4ece:	2502      	movs	r5, #2
    4ed0:	426d      	negs	r5, r5
    4ed2:	1aeb      	subs	r3, r5, r3
    4ed4:	0015      	movs	r5, r2
    4ed6:	40dd      	lsrs	r5, r3
    4ed8:	2820      	cmp	r0, #32
    4eda:	d009      	beq.n	4ef0 <__aeabi_d2f+0x104>
    4edc:	4b08      	ldr	r3, [pc, #32]	; (4f00 <__aeabi_d2f+0x114>)
    4ede:	18f3      	adds	r3, r6, r3
    4ee0:	409a      	lsls	r2, r3
    4ee2:	4314      	orrs	r4, r2
    4ee4:	1e62      	subs	r2, r4, #1
    4ee6:	4194      	sbcs	r4, r2
    4ee8:	0022      	movs	r2, r4
    4eea:	2300      	movs	r3, #0
    4eec:	432a      	orrs	r2, r5
    4eee:	e798      	b.n	4e22 <__aeabi_d2f+0x36>
    4ef0:	2200      	movs	r2, #0
    4ef2:	e7f6      	b.n	4ee2 <__aeabi_d2f+0xf6>
    4ef4:	2200      	movs	r2, #0
    4ef6:	e7a8      	b.n	4e4a <__aeabi_d2f+0x5e>
    4ef8:	fffffc80 	.word	0xfffffc80
    4efc:	fffffc82 	.word	0xfffffc82
    4f00:	fffffca2 	.word	0xfffffca2

00004f04 <__aeabi_uidiv>:
    4f04:	2200      	movs	r2, #0
    4f06:	0843      	lsrs	r3, r0, #1
    4f08:	428b      	cmp	r3, r1
    4f0a:	d374      	bcc.n	4ff6 <__aeabi_uidiv+0xf2>
    4f0c:	0903      	lsrs	r3, r0, #4
    4f0e:	428b      	cmp	r3, r1
    4f10:	d35f      	bcc.n	4fd2 <__aeabi_uidiv+0xce>
    4f12:	0a03      	lsrs	r3, r0, #8
    4f14:	428b      	cmp	r3, r1
    4f16:	d344      	bcc.n	4fa2 <__aeabi_uidiv+0x9e>
    4f18:	0b03      	lsrs	r3, r0, #12
    4f1a:	428b      	cmp	r3, r1
    4f1c:	d328      	bcc.n	4f70 <__aeabi_uidiv+0x6c>
    4f1e:	0c03      	lsrs	r3, r0, #16
    4f20:	428b      	cmp	r3, r1
    4f22:	d30d      	bcc.n	4f40 <__aeabi_uidiv+0x3c>
    4f24:	22ff      	movs	r2, #255	; 0xff
    4f26:	0209      	lsls	r1, r1, #8
    4f28:	ba12      	rev	r2, r2
    4f2a:	0c03      	lsrs	r3, r0, #16
    4f2c:	428b      	cmp	r3, r1
    4f2e:	d302      	bcc.n	4f36 <__aeabi_uidiv+0x32>
    4f30:	1212      	asrs	r2, r2, #8
    4f32:	0209      	lsls	r1, r1, #8
    4f34:	d065      	beq.n	5002 <__aeabi_uidiv+0xfe>
    4f36:	0b03      	lsrs	r3, r0, #12
    4f38:	428b      	cmp	r3, r1
    4f3a:	d319      	bcc.n	4f70 <__aeabi_uidiv+0x6c>
    4f3c:	e000      	b.n	4f40 <__aeabi_uidiv+0x3c>
    4f3e:	0a09      	lsrs	r1, r1, #8
    4f40:	0bc3      	lsrs	r3, r0, #15
    4f42:	428b      	cmp	r3, r1
    4f44:	d301      	bcc.n	4f4a <__aeabi_uidiv+0x46>
    4f46:	03cb      	lsls	r3, r1, #15
    4f48:	1ac0      	subs	r0, r0, r3
    4f4a:	4152      	adcs	r2, r2
    4f4c:	0b83      	lsrs	r3, r0, #14
    4f4e:	428b      	cmp	r3, r1
    4f50:	d301      	bcc.n	4f56 <__aeabi_uidiv+0x52>
    4f52:	038b      	lsls	r3, r1, #14
    4f54:	1ac0      	subs	r0, r0, r3
    4f56:	4152      	adcs	r2, r2
    4f58:	0b43      	lsrs	r3, r0, #13
    4f5a:	428b      	cmp	r3, r1
    4f5c:	d301      	bcc.n	4f62 <__aeabi_uidiv+0x5e>
    4f5e:	034b      	lsls	r3, r1, #13
    4f60:	1ac0      	subs	r0, r0, r3
    4f62:	4152      	adcs	r2, r2
    4f64:	0b03      	lsrs	r3, r0, #12
    4f66:	428b      	cmp	r3, r1
    4f68:	d301      	bcc.n	4f6e <__aeabi_uidiv+0x6a>
    4f6a:	030b      	lsls	r3, r1, #12
    4f6c:	1ac0      	subs	r0, r0, r3
    4f6e:	4152      	adcs	r2, r2
    4f70:	0ac3      	lsrs	r3, r0, #11
    4f72:	428b      	cmp	r3, r1
    4f74:	d301      	bcc.n	4f7a <__aeabi_uidiv+0x76>
    4f76:	02cb      	lsls	r3, r1, #11
    4f78:	1ac0      	subs	r0, r0, r3
    4f7a:	4152      	adcs	r2, r2
    4f7c:	0a83      	lsrs	r3, r0, #10
    4f7e:	428b      	cmp	r3, r1
    4f80:	d301      	bcc.n	4f86 <__aeabi_uidiv+0x82>
    4f82:	028b      	lsls	r3, r1, #10
    4f84:	1ac0      	subs	r0, r0, r3
    4f86:	4152      	adcs	r2, r2
    4f88:	0a43      	lsrs	r3, r0, #9
    4f8a:	428b      	cmp	r3, r1
    4f8c:	d301      	bcc.n	4f92 <__aeabi_uidiv+0x8e>
    4f8e:	024b      	lsls	r3, r1, #9
    4f90:	1ac0      	subs	r0, r0, r3
    4f92:	4152      	adcs	r2, r2
    4f94:	0a03      	lsrs	r3, r0, #8
    4f96:	428b      	cmp	r3, r1
    4f98:	d301      	bcc.n	4f9e <__aeabi_uidiv+0x9a>
    4f9a:	020b      	lsls	r3, r1, #8
    4f9c:	1ac0      	subs	r0, r0, r3
    4f9e:	4152      	adcs	r2, r2
    4fa0:	d2cd      	bcs.n	4f3e <__aeabi_uidiv+0x3a>
    4fa2:	09c3      	lsrs	r3, r0, #7
    4fa4:	428b      	cmp	r3, r1
    4fa6:	d301      	bcc.n	4fac <__aeabi_uidiv+0xa8>
    4fa8:	01cb      	lsls	r3, r1, #7
    4faa:	1ac0      	subs	r0, r0, r3
    4fac:	4152      	adcs	r2, r2
    4fae:	0983      	lsrs	r3, r0, #6
    4fb0:	428b      	cmp	r3, r1
    4fb2:	d301      	bcc.n	4fb8 <__aeabi_uidiv+0xb4>
    4fb4:	018b      	lsls	r3, r1, #6
    4fb6:	1ac0      	subs	r0, r0, r3
    4fb8:	4152      	adcs	r2, r2
    4fba:	0943      	lsrs	r3, r0, #5
    4fbc:	428b      	cmp	r3, r1
    4fbe:	d301      	bcc.n	4fc4 <__aeabi_uidiv+0xc0>
    4fc0:	014b      	lsls	r3, r1, #5
    4fc2:	1ac0      	subs	r0, r0, r3
    4fc4:	4152      	adcs	r2, r2
    4fc6:	0903      	lsrs	r3, r0, #4
    4fc8:	428b      	cmp	r3, r1
    4fca:	d301      	bcc.n	4fd0 <__aeabi_uidiv+0xcc>
    4fcc:	010b      	lsls	r3, r1, #4
    4fce:	1ac0      	subs	r0, r0, r3
    4fd0:	4152      	adcs	r2, r2
    4fd2:	08c3      	lsrs	r3, r0, #3
    4fd4:	428b      	cmp	r3, r1
    4fd6:	d301      	bcc.n	4fdc <__aeabi_uidiv+0xd8>
    4fd8:	00cb      	lsls	r3, r1, #3
    4fda:	1ac0      	subs	r0, r0, r3
    4fdc:	4152      	adcs	r2, r2
    4fde:	0883      	lsrs	r3, r0, #2
    4fe0:	428b      	cmp	r3, r1
    4fe2:	d301      	bcc.n	4fe8 <__aeabi_uidiv+0xe4>
    4fe4:	008b      	lsls	r3, r1, #2
    4fe6:	1ac0      	subs	r0, r0, r3
    4fe8:	4152      	adcs	r2, r2
    4fea:	0843      	lsrs	r3, r0, #1
    4fec:	428b      	cmp	r3, r1
    4fee:	d301      	bcc.n	4ff4 <__aeabi_uidiv+0xf0>
    4ff0:	004b      	lsls	r3, r1, #1
    4ff2:	1ac0      	subs	r0, r0, r3
    4ff4:	4152      	adcs	r2, r2
    4ff6:	1a41      	subs	r1, r0, r1
    4ff8:	d200      	bcs.n	4ffc <__aeabi_uidiv+0xf8>
    4ffa:	4601      	mov	r1, r0
    4ffc:	4152      	adcs	r2, r2
    4ffe:	4610      	mov	r0, r2
    5000:	4770      	bx	lr
    5002:	e7ff      	b.n	5004 <__aeabi_uidiv+0x100>
    5004:	b501      	push	{r0, lr}
    5006:	2000      	movs	r0, #0
    5008:	f000 f806 	bl	5018 <__aeabi_idiv0>
    500c:	bd02      	pop	{r1, pc}
    500e:	46c0      	nop			; (mov r8, r8)

00005010 <__aeabi_uidivmod>:
    5010:	2900      	cmp	r1, #0
    5012:	d0f7      	beq.n	5004 <__aeabi_uidiv+0x100>
    5014:	e776      	b.n	4f04 <__aeabi_uidiv>
    5016:	4770      	bx	lr

00005018 <__aeabi_idiv0>:
    5018:	4770      	bx	lr
    501a:	46c0      	nop			; (mov r8, r8)

0000501c <__clzsi2>:
    501c:	211c      	movs	r1, #28
    501e:	2301      	movs	r3, #1
    5020:	041b      	lsls	r3, r3, #16
    5022:	4298      	cmp	r0, r3
    5024:	d301      	bcc.n	502a <__clzsi2+0xe>
    5026:	0c00      	lsrs	r0, r0, #16
    5028:	3910      	subs	r1, #16
    502a:	0a1b      	lsrs	r3, r3, #8
    502c:	4298      	cmp	r0, r3
    502e:	d301      	bcc.n	5034 <__clzsi2+0x18>
    5030:	0a00      	lsrs	r0, r0, #8
    5032:	3908      	subs	r1, #8
    5034:	091b      	lsrs	r3, r3, #4
    5036:	4298      	cmp	r0, r3
    5038:	d301      	bcc.n	503e <__clzsi2+0x22>
    503a:	0900      	lsrs	r0, r0, #4
    503c:	3904      	subs	r1, #4
    503e:	a202      	add	r2, pc, #8	; (adr r2, 5048 <__clzsi2+0x2c>)
    5040:	5c10      	ldrb	r0, [r2, r0]
    5042:	1840      	adds	r0, r0, r1
    5044:	4770      	bx	lr
    5046:	46c0      	nop			; (mov r8, r8)
    5048:	02020304 	.word	0x02020304
    504c:	01010101 	.word	0x01010101
	...

00005058 <__errno>:
    5058:	4b01      	ldr	r3, [pc, #4]	; (5060 <__errno+0x8>)
    505a:	6818      	ldr	r0, [r3, #0]
    505c:	4770      	bx	lr
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	20000438 	.word	0x20000438

00005064 <__libc_init_array>:
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	4e0d      	ldr	r6, [pc, #52]	; (509c <__libc_init_array+0x38>)
    5068:	4d0d      	ldr	r5, [pc, #52]	; (50a0 <__libc_init_array+0x3c>)
    506a:	2400      	movs	r4, #0
    506c:	1bad      	subs	r5, r5, r6
    506e:	10ad      	asrs	r5, r5, #2
    5070:	d005      	beq.n	507e <__libc_init_array+0x1a>
    5072:	00a3      	lsls	r3, r4, #2
    5074:	58f3      	ldr	r3, [r6, r3]
    5076:	3401      	adds	r4, #1
    5078:	4798      	blx	r3
    507a:	42a5      	cmp	r5, r4
    507c:	d1f9      	bne.n	5072 <__libc_init_array+0xe>
    507e:	f000 f9fb 	bl	5478 <_init>
    5082:	4e08      	ldr	r6, [pc, #32]	; (50a4 <__libc_init_array+0x40>)
    5084:	4d08      	ldr	r5, [pc, #32]	; (50a8 <__libc_init_array+0x44>)
    5086:	2400      	movs	r4, #0
    5088:	1bad      	subs	r5, r5, r6
    508a:	10ad      	asrs	r5, r5, #2
    508c:	d005      	beq.n	509a <__libc_init_array+0x36>
    508e:	00a3      	lsls	r3, r4, #2
    5090:	58f3      	ldr	r3, [r6, r3]
    5092:	3401      	adds	r4, #1
    5094:	4798      	blx	r3
    5096:	42a5      	cmp	r5, r4
    5098:	d1f9      	bne.n	508e <__libc_init_array+0x2a>
    509a:	bd70      	pop	{r4, r5, r6, pc}
    509c:	00005484 	.word	0x00005484
    50a0:	00005484 	.word	0x00005484
    50a4:	00005484 	.word	0x00005484
    50a8:	0000548c 	.word	0x0000548c

000050ac <memset>:
    50ac:	b570      	push	{r4, r5, r6, lr}
    50ae:	0783      	lsls	r3, r0, #30
    50b0:	d03f      	beq.n	5132 <memset+0x86>
    50b2:	1e54      	subs	r4, r2, #1
    50b4:	2a00      	cmp	r2, #0
    50b6:	d03b      	beq.n	5130 <memset+0x84>
    50b8:	b2ce      	uxtb	r6, r1
    50ba:	0003      	movs	r3, r0
    50bc:	2503      	movs	r5, #3
    50be:	e003      	b.n	50c8 <memset+0x1c>
    50c0:	1e62      	subs	r2, r4, #1
    50c2:	2c00      	cmp	r4, #0
    50c4:	d034      	beq.n	5130 <memset+0x84>
    50c6:	0014      	movs	r4, r2
    50c8:	3301      	adds	r3, #1
    50ca:	1e5a      	subs	r2, r3, #1
    50cc:	7016      	strb	r6, [r2, #0]
    50ce:	422b      	tst	r3, r5
    50d0:	d1f6      	bne.n	50c0 <memset+0x14>
    50d2:	2c03      	cmp	r4, #3
    50d4:	d924      	bls.n	5120 <memset+0x74>
    50d6:	25ff      	movs	r5, #255	; 0xff
    50d8:	400d      	ands	r5, r1
    50da:	022a      	lsls	r2, r5, #8
    50dc:	4315      	orrs	r5, r2
    50de:	042a      	lsls	r2, r5, #16
    50e0:	4315      	orrs	r5, r2
    50e2:	2c0f      	cmp	r4, #15
    50e4:	d911      	bls.n	510a <memset+0x5e>
    50e6:	0026      	movs	r6, r4
    50e8:	3e10      	subs	r6, #16
    50ea:	0936      	lsrs	r6, r6, #4
    50ec:	3601      	adds	r6, #1
    50ee:	0136      	lsls	r6, r6, #4
    50f0:	001a      	movs	r2, r3
    50f2:	199b      	adds	r3, r3, r6
    50f4:	6015      	str	r5, [r2, #0]
    50f6:	6055      	str	r5, [r2, #4]
    50f8:	6095      	str	r5, [r2, #8]
    50fa:	60d5      	str	r5, [r2, #12]
    50fc:	3210      	adds	r2, #16
    50fe:	4293      	cmp	r3, r2
    5100:	d1f8      	bne.n	50f4 <memset+0x48>
    5102:	220f      	movs	r2, #15
    5104:	4014      	ands	r4, r2
    5106:	2c03      	cmp	r4, #3
    5108:	d90a      	bls.n	5120 <memset+0x74>
    510a:	1f26      	subs	r6, r4, #4
    510c:	08b6      	lsrs	r6, r6, #2
    510e:	3601      	adds	r6, #1
    5110:	00b6      	lsls	r6, r6, #2
    5112:	001a      	movs	r2, r3
    5114:	199b      	adds	r3, r3, r6
    5116:	c220      	stmia	r2!, {r5}
    5118:	4293      	cmp	r3, r2
    511a:	d1fc      	bne.n	5116 <memset+0x6a>
    511c:	2203      	movs	r2, #3
    511e:	4014      	ands	r4, r2
    5120:	2c00      	cmp	r4, #0
    5122:	d005      	beq.n	5130 <memset+0x84>
    5124:	b2c9      	uxtb	r1, r1
    5126:	191c      	adds	r4, r3, r4
    5128:	7019      	strb	r1, [r3, #0]
    512a:	3301      	adds	r3, #1
    512c:	429c      	cmp	r4, r3
    512e:	d1fb      	bne.n	5128 <memset+0x7c>
    5130:	bd70      	pop	{r4, r5, r6, pc}
    5132:	0014      	movs	r4, r2
    5134:	0003      	movs	r3, r0
    5136:	e7cc      	b.n	50d2 <memset+0x26>

00005138 <register_fini>:
    5138:	4b03      	ldr	r3, [pc, #12]	; (5148 <register_fini+0x10>)
    513a:	b510      	push	{r4, lr}
    513c:	2b00      	cmp	r3, #0
    513e:	d002      	beq.n	5146 <register_fini+0xe>
    5140:	4802      	ldr	r0, [pc, #8]	; (514c <register_fini+0x14>)
    5142:	f000 f805 	bl	5150 <atexit>
    5146:	bd10      	pop	{r4, pc}
    5148:	00000000 	.word	0x00000000
    514c:	00005161 	.word	0x00005161

00005150 <atexit>:
    5150:	b510      	push	{r4, lr}
    5152:	0001      	movs	r1, r0
    5154:	2300      	movs	r3, #0
    5156:	2200      	movs	r2, #0
    5158:	2000      	movs	r0, #0
    515a:	f000 f81b 	bl	5194 <__register_exitproc>
    515e:	bd10      	pop	{r4, pc}

00005160 <__libc_fini_array>:
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	4b09      	ldr	r3, [pc, #36]	; (5188 <__libc_fini_array+0x28>)
    5164:	4c09      	ldr	r4, [pc, #36]	; (518c <__libc_fini_array+0x2c>)
    5166:	1ae4      	subs	r4, r4, r3
    5168:	10a4      	asrs	r4, r4, #2
    516a:	d009      	beq.n	5180 <__libc_fini_array+0x20>
    516c:	4a08      	ldr	r2, [pc, #32]	; (5190 <__libc_fini_array+0x30>)
    516e:	18a5      	adds	r5, r4, r2
    5170:	00ad      	lsls	r5, r5, #2
    5172:	18ed      	adds	r5, r5, r3
    5174:	682b      	ldr	r3, [r5, #0]
    5176:	3c01      	subs	r4, #1
    5178:	4798      	blx	r3
    517a:	3d04      	subs	r5, #4
    517c:	2c00      	cmp	r4, #0
    517e:	d1f9      	bne.n	5174 <__libc_fini_array+0x14>
    5180:	f000 f984 	bl	548c <_fini>
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	00005498 	.word	0x00005498
    518c:	0000549c 	.word	0x0000549c
    5190:	3fffffff 	.word	0x3fffffff

00005194 <__register_exitproc>:
    5194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5196:	4644      	mov	r4, r8
    5198:	465f      	mov	r7, fp
    519a:	4656      	mov	r6, sl
    519c:	464d      	mov	r5, r9
    519e:	469b      	mov	fp, r3
    51a0:	4b2f      	ldr	r3, [pc, #188]	; (5260 <__register_exitproc+0xcc>)
    51a2:	b4f0      	push	{r4, r5, r6, r7}
    51a4:	681c      	ldr	r4, [r3, #0]
    51a6:	23a4      	movs	r3, #164	; 0xa4
    51a8:	005b      	lsls	r3, r3, #1
    51aa:	0005      	movs	r5, r0
    51ac:	58e0      	ldr	r0, [r4, r3]
    51ae:	000e      	movs	r6, r1
    51b0:	4690      	mov	r8, r2
    51b2:	2800      	cmp	r0, #0
    51b4:	d04b      	beq.n	524e <__register_exitproc+0xba>
    51b6:	6843      	ldr	r3, [r0, #4]
    51b8:	2b1f      	cmp	r3, #31
    51ba:	dc0d      	bgt.n	51d8 <__register_exitproc+0x44>
    51bc:	1c5c      	adds	r4, r3, #1
    51be:	2d00      	cmp	r5, #0
    51c0:	d121      	bne.n	5206 <__register_exitproc+0x72>
    51c2:	3302      	adds	r3, #2
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	6044      	str	r4, [r0, #4]
    51c8:	501e      	str	r6, [r3, r0]
    51ca:	2000      	movs	r0, #0
    51cc:	bc3c      	pop	{r2, r3, r4, r5}
    51ce:	4690      	mov	r8, r2
    51d0:	4699      	mov	r9, r3
    51d2:	46a2      	mov	sl, r4
    51d4:	46ab      	mov	fp, r5
    51d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51d8:	4b22      	ldr	r3, [pc, #136]	; (5264 <__register_exitproc+0xd0>)
    51da:	2b00      	cmp	r3, #0
    51dc:	d03c      	beq.n	5258 <__register_exitproc+0xc4>
    51de:	20c8      	movs	r0, #200	; 0xc8
    51e0:	0040      	lsls	r0, r0, #1
    51e2:	e000      	b.n	51e6 <__register_exitproc+0x52>
    51e4:	bf00      	nop
    51e6:	2800      	cmp	r0, #0
    51e8:	d036      	beq.n	5258 <__register_exitproc+0xc4>
    51ea:	22a4      	movs	r2, #164	; 0xa4
    51ec:	2300      	movs	r3, #0
    51ee:	0052      	lsls	r2, r2, #1
    51f0:	58a1      	ldr	r1, [r4, r2]
    51f2:	6043      	str	r3, [r0, #4]
    51f4:	6001      	str	r1, [r0, #0]
    51f6:	50a0      	str	r0, [r4, r2]
    51f8:	3240      	adds	r2, #64	; 0x40
    51fa:	5083      	str	r3, [r0, r2]
    51fc:	3204      	adds	r2, #4
    51fe:	5083      	str	r3, [r0, r2]
    5200:	2401      	movs	r4, #1
    5202:	2d00      	cmp	r5, #0
    5204:	d0dd      	beq.n	51c2 <__register_exitproc+0x2e>
    5206:	009a      	lsls	r2, r3, #2
    5208:	4691      	mov	r9, r2
    520a:	4481      	add	r9, r0
    520c:	4642      	mov	r2, r8
    520e:	2188      	movs	r1, #136	; 0x88
    5210:	464f      	mov	r7, r9
    5212:	507a      	str	r2, [r7, r1]
    5214:	22c4      	movs	r2, #196	; 0xc4
    5216:	0052      	lsls	r2, r2, #1
    5218:	4690      	mov	r8, r2
    521a:	4480      	add	r8, r0
    521c:	4642      	mov	r2, r8
    521e:	3987      	subs	r1, #135	; 0x87
    5220:	4099      	lsls	r1, r3
    5222:	6812      	ldr	r2, [r2, #0]
    5224:	468a      	mov	sl, r1
    5226:	430a      	orrs	r2, r1
    5228:	4694      	mov	ip, r2
    522a:	4642      	mov	r2, r8
    522c:	4661      	mov	r1, ip
    522e:	6011      	str	r1, [r2, #0]
    5230:	2284      	movs	r2, #132	; 0x84
    5232:	4649      	mov	r1, r9
    5234:	465f      	mov	r7, fp
    5236:	0052      	lsls	r2, r2, #1
    5238:	508f      	str	r7, [r1, r2]
    523a:	2d02      	cmp	r5, #2
    523c:	d1c1      	bne.n	51c2 <__register_exitproc+0x2e>
    523e:	0002      	movs	r2, r0
    5240:	4655      	mov	r5, sl
    5242:	328d      	adds	r2, #141	; 0x8d
    5244:	32ff      	adds	r2, #255	; 0xff
    5246:	6811      	ldr	r1, [r2, #0]
    5248:	430d      	orrs	r5, r1
    524a:	6015      	str	r5, [r2, #0]
    524c:	e7b9      	b.n	51c2 <__register_exitproc+0x2e>
    524e:	0020      	movs	r0, r4
    5250:	304d      	adds	r0, #77	; 0x4d
    5252:	30ff      	adds	r0, #255	; 0xff
    5254:	50e0      	str	r0, [r4, r3]
    5256:	e7ae      	b.n	51b6 <__register_exitproc+0x22>
    5258:	2001      	movs	r0, #1
    525a:	4240      	negs	r0, r0
    525c:	e7b6      	b.n	51cc <__register_exitproc+0x38>
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	00005474 	.word	0x00005474
    5264:	00000000 	.word	0x00000000

00005268 <spi2MOSI>:
    5268:	0c000002 00000200                                .....

0000526d <spi2SCK>:
    526d:	0e000002 00000200                                .....

00005272 <spi2MISO>:
    5272:	0d000002 8d200000                                ......

00005278 <lookupTable.12478>:
    5278:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    5288:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    5298:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    52a8:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    52b8:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    52c8:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    52d8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    52e8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    52f8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    5308:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    5318:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    5328:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    5338:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    5348:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    5358:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    5368:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    5378:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    5388:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    5398:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    53a8:	000f048e                                ....

000053ac <senseBatPin>:
    53ac:	06000000 01000106                                .....

000053b1 <senseAPin>:
    53b1:	03010001 0100010b                                .....

000053b6 <senseBPin>:
    53b6:	02010001 0000000a                                .....

000053bb <senseCPin>:
    53bb:	03000000 00000001                                .....

000053c0 <senseDPin>:
    53c0:	02000000 00000000                                .....

000053c5 <analogAccelPin>:
    53c5:	07000000 00000207                                .....

000053ca <spi2MOSI>:
    53ca:	0c000002 00000200                                .....

000053cf <spi2SCK>:
    53cf:	0e000002 776f7000 00000000 00000000     .....pow........
	...

000053e0 <TWO52>:
    53e0:	00000000 43300000 00000000 c3300000     ......0C......0.
    53f0:	000039b0 0000387e 00003984 00003874     .9..~8...9..t8..
    5400:	00003984 0000398e 00003984 00003874     .9...9...9..t8..
    5410:	0000387e 0000387e 0000398e 00003874     ~8..~8...9..t8..
    5420:	0000386a 0000386a 0000386a 00003be0     j8..j8..j8...;..
    5430:	000041f8 000040b8 000040b8 000040b6     .A...@...@...@..
    5440:	000041d0 000041d0 000041c2 000040b6     .A...A...A...@..
    5450:	000041d0 000041c2 000041d0 000040b6     .A...A...A...@..
    5460:	000041d8 000041d8 000041d8 000043d8     .A...A...A...C..
    5470:	00000043                                C...

00005474 <_global_impure_ptr>:
    5474:	20000010                                ... 

00005478 <_init>:
    5478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    547a:	46c0      	nop			; (mov r8, r8)
    547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    547e:	bc08      	pop	{r3}
    5480:	469e      	mov	lr, r3
    5482:	4770      	bx	lr

00005484 <__init_array_start>:
    5484:	00005139 	.word	0x00005139

00005488 <__frame_dummy_init_array_entry>:
    5488:	000000dd                                ....

0000548c <_fini>:
    548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    548e:	46c0      	nop			; (mov r8, r8)
    5490:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5492:	bc08      	pop	{r3}
    5494:	469e      	mov	lr, r3
    5496:	4770      	bx	lr

00005498 <__fini_array_start>:
    5498:	000000b5 	.word	0x000000b5
