
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006944  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006944  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  200004b0  00006e00  000204b0  2**4
                  ALLOC
  3 .stack        00002000  20000660  00006fb0  000204b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021a10  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ee  00000000  00000000  00041f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000286f  00000000  00000000  00044823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000438  00000000  00000000  00047092  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000da0  00000000  00000000  000474ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016369  00000000  00000000  0004826a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ca2  00000000  00000000  0005e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000728e7  00000000  00000000  00068275  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000116c  00000000  00000000  000dab5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002660 	.word	0x20002660
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000ff9 	.word	0x00000ff9
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001099 	.word	0x00001099
      90:	00001101 	.word	0x00001101
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b0 	.word	0x200004b0
      d4:	00000000 	.word	0x00000000
      d8:	00006944 	.word	0x00006944

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b4 	.word	0x200004b4
     108:	00006944 	.word	0x00006944
     10c:	00006944 	.word	0x00006944
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006944 	.word	0x00006944
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004b0 	.word	0x200004b0
     1b0:	20000660 	.word	0x20000660
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000064cd 	.word	0x000064cd
     1d0:	00000a89 	.word	0x00000a89

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	00002955 	.word	0x00002955
     21c:	200004d0 	.word	0x200004d0

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00002955 	.word	0x00002955
     250:	200004d0 	.word	0x200004d0

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	00002955 	.word	0x00002955
     2c8:	200004d0 	.word	0x200004d0

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	00002955 	.word	0x00002955
     33c:	200004d0 	.word	0x200004d0

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	00002955 	.word	0x00002955
     3ac:	200004d0 	.word	0x200004d0

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	00002955 	.word	0x00002955
     418:	200004d0 	.word	0x200004d0

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	0212      	lsls	r2, r2, #8
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	000066d0 	.word	0x000066d0
     4c8:	00000cf1 	.word	0x00000cf1
     4cc:	00000d5d 	.word	0x00000d5d

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4d2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4d4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4d6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4d8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4da:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4dc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4de:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     4e0:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     4e2:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	8905      	ldrh	r5, [r0, #8]
     4e6:	6903      	ldr	r3, [r0, #16]
     4e8:	022d      	lsls	r5, r5, #8
     4ea:	1b5b      	subs	r3, r3, r5
     4ec:	2500      	movs	r5, #0
     4ee:	9302      	str	r3, [sp, #8]
     4f0:	17db      	asrs	r3, r3, #31
     4f2:	9303      	str	r3, [sp, #12]
     4f4:	8940      	ldrh	r0, [r0, #10]
     4f6:	4f1f      	ldr	r7, [pc, #124]	; (574 <ConvertPressureTemperature+0xa4>)
     4f8:	9a02      	ldr	r2, [sp, #8]
     4fa:	0029      	movs	r1, r5
     4fc:	47b8      	blx	r7
     4fe:	23fa      	movs	r3, #250	; 0xfa
     500:	0249      	lsls	r1, r1, #9
     502:	0dc0      	lsrs	r0, r0, #23
     504:	4308      	orrs	r0, r1
     506:	00db      	lsls	r3, r3, #3
     508:	18c0      	adds	r0, r0, r3
     50a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	9b03      	ldr	r3, [sp, #12]
     510:	0030      	movs	r0, r6
     512:	0029      	movs	r1, r5
     514:	47b8      	blx	r7
     516:	060b      	lsls	r3, r1, #24
     518:	120f      	asrs	r7, r1, #8
     51a:	0a06      	lsrs	r6, r0, #8
     51c:	9900      	ldr	r1, [sp, #0]
     51e:	431e      	orrs	r6, r3
     520:	03ca      	lsls	r2, r1, #15
     522:	002b      	movs	r3, r5
     524:	0030      	movs	r0, r6
     526:	0039      	movs	r1, r7
     528:	4e12      	ldr	r6, [pc, #72]	; (574 <ConvertPressureTemperature+0xa4>)
     52a:	1880      	adds	r0, r0, r2
     52c:	4159      	adcs	r1, r3
     52e:	68e2      	ldr	r2, [r4, #12]
     530:	47b0      	blx	r6
     532:	02cb      	lsls	r3, r1, #11
     534:	0d42      	lsrs	r2, r0, #21
     536:	431a      	orrs	r2, r3
     538:	154b      	asrs	r3, r1, #21
     53a:	9200      	str	r2, [sp, #0]
     53c:	9301      	str	r3, [sp, #4]
     53e:	9a02      	ldr	r2, [sp, #8]
     540:	9b03      	ldr	r3, [sp, #12]
     542:	4e0c      	ldr	r6, [pc, #48]	; (574 <ConvertPressureTemperature+0xa4>)
     544:	9805      	ldr	r0, [sp, #20]
     546:	0029      	movs	r1, r5
     548:	47b0      	blx	r6
     54a:	064b      	lsls	r3, r1, #25
     54c:	09c6      	lsrs	r6, r0, #7
     54e:	431e      	orrs	r6, r3
     550:	002b      	movs	r3, r5
     552:	11cf      	asrs	r7, r1, #7
     554:	9904      	ldr	r1, [sp, #16]
     556:	040a      	lsls	r2, r1, #16
     558:	1992      	adds	r2, r2, r6
     55a:	417b      	adcs	r3, r7
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a80      	subs	r0, r0, r2
     562:	4199      	sbcs	r1, r3
     564:	000a      	movs	r2, r1
     566:	0453      	lsls	r3, r2, #17
     568:	0bc2      	lsrs	r2, r0, #15
     56a:	431a      	orrs	r2, r3
     56c:	61e2      	str	r2, [r4, #28]

}
     56e:	b007      	add	sp, #28
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	00003da5 	.word	0x00003da5

00000578 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     578:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     57c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57e:	69c0      	ldr	r0, [r0, #28]
     580:	4798      	blx	r3
     582:	4d0e      	ldr	r5, [pc, #56]	; (5bc <paToFeetNOAA+0x44>)
     584:	2200      	movs	r2, #0
     586:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <paToFeetNOAA+0x48>)
     588:	47a8      	blx	r5
     58a:	2200      	movs	r2, #0
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <paToFeetNOAA+0x4c>)
     58e:	47a8      	blx	r5
     590:	4a0d      	ldr	r2, [pc, #52]	; (5c8 <paToFeetNOAA+0x50>)
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <paToFeetNOAA+0x54>)
     594:	4d0e      	ldr	r5, [pc, #56]	; (5d0 <paToFeetNOAA+0x58>)
     596:	47a8      	blx	r5
     598:	4d0e      	ldr	r5, [pc, #56]	; (5d4 <paToFeetNOAA+0x5c>)
     59a:	0002      	movs	r2, r0
     59c:	000b      	movs	r3, r1
     59e:	2000      	movs	r0, #0
     5a0:	490d      	ldr	r1, [pc, #52]	; (5d8 <paToFeetNOAA+0x60>)
     5a2:	47a8      	blx	r5
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <paToFeetNOAA+0x64>)
     5a6:	4d0e      	ldr	r5, [pc, #56]	; (5e0 <paToFeetNOAA+0x68>)
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <paToFeetNOAA+0x6c>)
     5aa:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ae:	62a0      	str	r0, [r4, #40]	; 0x28
     5b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5b2:	4798      	blx	r3
     5b4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	000060b9 	.word	0x000060b9
     5bc:	00004c29 	.word	0x00004c29
     5c0:	40240000 	.word	0x40240000
     5c4:	408faa00 	.word	0x408faa00
     5c8:	e279dd3c 	.word	0xe279dd3c
     5cc:	3fc85b39 	.word	0x3fc85b39
     5d0:	00002a81 	.word	0x00002a81
     5d4:	00005965 	.word	0x00005965
     5d8:	3ff00000 	.word	0x3ff00000
     5dc:	9999999a 	.word	0x9999999a
     5e0:	00005471 	.word	0x00005471
     5e4:	4101beb3 	.word	0x4101beb3
     5e8:	00003e2d 	.word	0x00003e2d

000005ec <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	27a2      	movs	r7, #162	; 0xa2
     5f0:	b087      	sub	sp, #28
     5f2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5f4:	2096      	movs	r0, #150	; 0x96
     5f6:	4c2b      	ldr	r4, [pc, #172]	; (6a4 <readMS5803Coefficients+0xb8>)
     5f8:	0080      	lsls	r0, r0, #2
     5fa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5fc:	2096      	movs	r0, #150	; 0x96
     5fe:	0080      	lsls	r0, r0, #2
     600:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     604:	4c28      	ldr	r4, [pc, #160]	; (6a8 <readMS5803Coefficients+0xbc>)
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <readMS5803Coefficients+0xc0>)
     608:	0212      	lsls	r2, r2, #8
     60a:	615a      	str	r2, [r3, #20]
     60c:	7863      	ldrb	r3, [r4, #1]
     60e:	7820      	ldrb	r0, [r4, #0]
     610:	78a2      	ldrb	r2, [r4, #2]
     612:	021b      	lsls	r3, r3, #8
     614:	4303      	orrs	r3, r0
     616:	0412      	lsls	r2, r2, #16
     618:	0019      	movs	r1, r3
     61a:	0013      	movs	r3, r2
     61c:	430b      	orrs	r3, r1
     61e:	79a1      	ldrb	r1, [r4, #6]
     620:	7966      	ldrb	r6, [r4, #5]
     622:	0209      	lsls	r1, r1, #8
     624:	4331      	orrs	r1, r6
     626:	0008      	movs	r0, r1
     628:	79e1      	ldrb	r1, [r4, #7]
     62a:	78e2      	ldrb	r2, [r4, #3]
     62c:	0409      	lsls	r1, r1, #16
     62e:	4301      	orrs	r1, r0
     630:	7a20      	ldrb	r0, [r4, #8]
     632:	7a66      	ldrb	r6, [r4, #9]
     634:	0612      	lsls	r2, r2, #24
     636:	0600      	lsls	r0, r0, #24
     638:	4308      	orrs	r0, r1
     63a:	431a      	orrs	r2, r3
     63c:	9700      	str	r7, [sp, #0]
     63e:	7923      	ldrb	r3, [r4, #4]
     640:	0031      	movs	r1, r6
     642:	4d1b      	ldr	r5, [pc, #108]	; (6b0 <readMS5803Coefficients+0xc4>)
     644:	9003      	str	r0, [sp, #12]
     646:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	0020      	movs	r0, r4
     64c:	7aa1      	ldrb	r1, [r4, #10]
     64e:	7b24      	ldrb	r4, [r4, #12]
     650:	021b      	lsls	r3, r3, #8
     652:	430b      	orrs	r3, r1
     654:	0424      	lsls	r4, r4, #16
     656:	001a      	movs	r2, r3
     658:	0023      	movs	r3, r4
     65a:	7b44      	ldrb	r4, [r0, #13]
     65c:	7b85      	ldrb	r5, [r0, #14]
     65e:	4313      	orrs	r3, r2
     660:	0624      	lsls	r4, r4, #24
     662:	431c      	orrs	r4, r3
     664:	0022      	movs	r2, r4
     666:	002b      	movs	r3, r5
     668:	9404      	str	r4, [sp, #16]
     66a:	0031      	movs	r1, r6
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <readMS5803Coefficients+0xc8>)
     66e:	9803      	ldr	r0, [sp, #12]
     670:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     672:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     674:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     676:	9a04      	ldr	r2, [sp, #16]
     678:	9803      	ldr	r0, [sp, #12]
     67a:	0031      	movs	r1, r6
     67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <readMS5803Coefficients+0xc8>)
     67e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     680:	2280      	movs	r2, #128	; 0x80
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <readMS5803Coefficients+0xc0>)
     684:	0212      	lsls	r2, r2, #8
     686:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     688:	9b05      	ldr	r3, [sp, #20]
     68a:	021d      	lsls	r5, r3, #8
     68c:	9b02      	ldr	r3, [sp, #8]
     68e:	4328      	orrs	r0, r5
     690:	8018      	strh	r0, [r3, #0]
     692:	1cbb      	adds	r3, r7, #2
     694:	b2df      	uxtb	r7, r3
     696:	9b02      	ldr	r3, [sp, #8]
     698:	3302      	adds	r3, #2
     69a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     69c:	2fae      	cmp	r7, #174	; 0xae
     69e:	d1a9      	bne.n	5f4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6a0:	b007      	add	sp, #28
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	00000f99 	.word	0x00000f99
     6a8:	000066d0 	.word	0x000066d0
     6ac:	41004400 	.word	0x41004400
     6b0:	00000cf1 	.word	0x00000cf1
     6b4:	00000d5d 	.word	0x00000d5d

000006b8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6bc:	231e      	movs	r3, #30
     6be:	491a      	ldr	r1, [pc, #104]	; (728 <initMS5803Barometer+0x70>)
     6c0:	4d1a      	ldr	r5, [pc, #104]	; (72c <initMS5803Barometer+0x74>)
     6c2:	0236      	lsls	r6, r6, #8
     6c4:	616e      	str	r6, [r5, #20]
     6c6:	9300      	str	r3, [sp, #0]
     6c8:	784b      	ldrb	r3, [r1, #1]
     6ca:	780a      	ldrb	r2, [r1, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	4313      	orrs	r3, r2
     6d0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6d2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6d4:	0412      	lsls	r2, r2, #16
     6d6:	0018      	movs	r0, r3
     6d8:	0013      	movs	r3, r2
     6da:	78ca      	ldrb	r2, [r1, #3]
     6dc:	4303      	orrs	r3, r0
     6de:	0612      	lsls	r2, r2, #24
     6e0:	1d4f      	adds	r7, r1, #5
     6e2:	431a      	orrs	r2, r3
     6e4:	7948      	ldrb	r0, [r1, #5]
     6e6:	790b      	ldrb	r3, [r1, #4]
     6e8:	7989      	ldrb	r1, [r1, #6]
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	4301      	orrs	r1, r0
     6ee:	78b8      	ldrb	r0, [r7, #2]
     6f0:	0400      	lsls	r0, r0, #16
     6f2:	4301      	orrs	r1, r0
     6f4:	78f8      	ldrb	r0, [r7, #3]
     6f6:	0600      	lsls	r0, r0, #24
     6f8:	4308      	orrs	r0, r1
     6fa:	7939      	ldrb	r1, [r7, #4]
     6fc:	4f0c      	ldr	r7, [pc, #48]	; (730 <initMS5803Barometer+0x78>)
     6fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     700:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     702:	20c8      	movs	r0, #200	; 0xc8
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <initMS5803Barometer+0x7c>)
     706:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     708:	0020      	movs	r0, r4
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <initMS5803Barometer+0x80>)
     70c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     70e:	23fa      	movs	r3, #250	; 0xfa
     710:	011b      	lsls	r3, r3, #4
     712:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <initMS5803Barometer+0x84>)
     716:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <initMS5803Barometer+0x88>)
     71a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     71c:	4b09      	ldr	r3, [pc, #36]	; (744 <initMS5803Barometer+0x8c>)
     71e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     720:	23fa      	movs	r3, #250	; 0xfa
     722:	00db      	lsls	r3, r3, #3
     724:	6163      	str	r3, [r4, #20]




}
     726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     728:	000066d0 	.word	0x000066d0
     72c:	41004400 	.word	0x41004400
     730:	00000cf1 	.word	0x00000cf1
     734:	00000fc9 	.word	0x00000fc9
     738:	000005ed 	.word	0x000005ed
     73c:	00002710 	.word	0x00002710
     740:	0041c9fe 	.word	0x0041c9fe
     744:	007ffae4 	.word	0x007ffae4

00000748 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     748:	b5f0      	push	{r4, r5, r6, r7, lr}
    //NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;

    /* Turn on the digital interface clock */
    //PM->APBAMASK.reg |= PM_APBAMASK_GCLK;

    SystemInit();
     74a:	4bc0      	ldr	r3, [pc, #768]	; (a4c <init+0x304>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     74c:	b085      	sub	sp, #20
    //NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;

    /* Turn on the digital interface clock */
    //PM->APBAMASK.reg |= PM_APBAMASK_GCLK;

    SystemInit();
     74e:	4798      	blx	r3
    GclkInit();
     750:	4bbf      	ldr	r3, [pc, #764]	; (a50 <init+0x308>)
     752:	4798      	blx	r3
    RtcInit();
     754:	4bbf      	ldr	r3, [pc, #764]	; (a54 <init+0x30c>)
     756:	4798      	blx	r3
    delayInit();
     758:	4bbf      	ldr	r3, [pc, #764]	; (a58 <init+0x310>)
     75a:	4798      	blx	r3
    adcInit();
     75c:	4bbf      	ldr	r3, [pc, #764]	; (a5c <init+0x314>)
     75e:	4798      	blx	r3
    dmaInit();
     760:	4bbf      	ldr	r3, [pc, #764]	; (a60 <init+0x318>)
     762:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     764:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     766:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     768:	4bbe      	ldr	r3, [pc, #760]	; (a64 <init+0x31c>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     76c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     76e:	5858      	ldr	r0, [r3, r1]
     770:	4abd      	ldr	r2, [pc, #756]	; (a68 <init+0x320>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	2401      	movs	r4, #1
     774:	4002      	ands	r2, r0
     776:	505a      	str	r2, [r3, r1]
     778:	4bbc      	ldr	r3, [pc, #752]	; (a6c <init+0x324>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     77a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77c:	0019      	movs	r1, r3
     77e:	3154      	adds	r1, #84	; 0x54
     780:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     782:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	43a2      	bics	r2, r4
     786:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2280      	movs	r2, #128	; 0x80
     78a:	0352      	lsls	r2, r2, #13
     78c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     78e:	220f      	movs	r2, #15
     790:	3033      	adds	r0, #51	; 0x33
     792:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     794:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     796:	4391      	bics	r1, r2
     798:	4321      	orrs	r1, r4
     79a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	7cc1      	ldrb	r1, [r0, #19]
     79e:	36c3      	adds	r6, #195	; 0xc3
     7a0:	4321      	orrs	r1, r4
     7a2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7a4:	0019      	movs	r1, r3
     7a6:	31b1      	adds	r1, #177	; 0xb1
     7a8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ac:	4010      	ands	r0, r2
     7ae:	4328      	orrs	r0, r5
     7b0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b6:	4320      	orrs	r0, r4
     7b8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ba:	7808      	ldrb	r0, [r1, #0]
     7bc:	4010      	ands	r0, r2
     7be:	4328      	orrs	r0, r5
     7c0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7830      	ldrb	r0, [r6, #0]
     7c4:	4320      	orrs	r0, r4
     7c6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	7d30      	ldrb	r0, [r6, #20]
     7ca:	43a0      	bics	r0, r4
     7cc:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ce:	2080      	movs	r0, #128	; 0x80
     7d0:	0400      	lsls	r0, r0, #16
     7d2:	9703      	str	r7, [sp, #12]
     7d4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7d6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7d8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7da:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7dc:	4390      	bics	r0, r2
     7de:	4320      	orrs	r0, r4
     7e0:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	20c2      	movs	r0, #194	; 0xc2
     7e4:	4684      	mov	ip, r0
     7e6:	449c      	add	ip, r3
     7e8:	4660      	mov	r0, ip
     7ea:	4667      	mov	r7, ip
     7ec:	7800      	ldrb	r0, [r0, #0]
     7ee:	4320      	orrs	r0, r4
     7f0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f2:	7808      	ldrb	r0, [r1, #0]
     7f4:	4390      	bics	r0, r2
     7f6:	4320      	orrs	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     806:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	43a1      	bics	r1, r4
     80a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	9803      	ldr	r0, [sp, #12]
     810:	03c9      	lsls	r1, r1, #15
     812:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     814:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     816:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     818:	3031      	adds	r0, #49	; 0x31
     81a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     81e:	4011      	ands	r1, r2
     820:	430d      	orrs	r5, r1
     822:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	001d      	movs	r5, r3
     826:	3543      	adds	r5, #67	; 0x43
     828:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     82a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82c:	4321      	orrs	r1, r4
     82e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	7da9      	ldrb	r1, [r5, #22]
     832:	3505      	adds	r5, #5
     834:	43a1      	bics	r1, r4
     836:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0489      	lsls	r1, r1, #18
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     840:	7801      	ldrb	r1, [r0, #0]
     842:	4391      	bics	r1, r2
     844:	4321      	orrs	r1, r4
     846:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     848:	7c41      	ldrb	r1, [r0, #17]
     84a:	3011      	adds	r0, #17
     84c:	4321      	orrs	r1, r4
     84e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7d81      	ldrb	r1, [r0, #22]
     852:	43a1      	bics	r1, r4
     854:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     856:	2180      	movs	r1, #128	; 0x80
     858:	0449      	lsls	r1, r1, #17
     85a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     85e:	7829      	ldrb	r1, [r5, #0]
     860:	43a1      	bics	r1, r4
     862:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     864:	2180      	movs	r1, #128	; 0x80
     866:	0049      	lsls	r1, r1, #1
     868:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	7831      	ldrb	r1, [r6, #0]
     86c:	43a1      	bics	r1, r4
     86e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2180      	movs	r1, #128	; 0x80
     872:	0089      	lsls	r1, r1, #2
     874:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     876:	0019      	movs	r1, r3
     878:	314b      	adds	r1, #75	; 0x4b
     87a:	7808      	ldrb	r0, [r1, #0]
     87c:	43a0      	bics	r0, r4
     87e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     880:	7808      	ldrb	r0, [r1, #0]
     882:	4338      	orrs	r0, r7
     884:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     886:	2080      	movs	r0, #128	; 0x80
     888:	0100      	lsls	r0, r0, #4
     88a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88c:	4878      	ldr	r0, [pc, #480]	; (a70 <init+0x328>)
     88e:	371e      	adds	r7, #30
     890:	7800      	ldrb	r0, [r0, #0]
     892:	4010      	ands	r0, r2
     894:	4338      	orrs	r0, r7
     896:	4f76      	ldr	r7, [pc, #472]	; (a70 <init+0x328>)
     898:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     89c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89e:	4320      	orrs	r0, r4
     8a0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a2:	0018      	movs	r0, r3
     8a4:	3034      	adds	r0, #52	; 0x34
     8a6:	7801      	ldrb	r1, [r0, #0]
     8a8:	4011      	ands	r1, r2
     8aa:	4339      	orrs	r1, r7
     8ac:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ae:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8b0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b2:	4321      	orrs	r1, r4
     8b4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	4666      	mov	r6, ip
     8b8:	7801      	ldrb	r1, [r0, #0]
     8ba:	4391      	bics	r1, r2
     8bc:	4331      	orrs	r1, r6
     8be:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c4:	4321      	orrs	r1, r4
     8c6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7801      	ldrb	r1, [r0, #0]
     8ca:	001e      	movs	r6, r3
     8cc:	43a1      	bics	r1, r4
     8ce:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d0:	2180      	movs	r1, #128	; 0x80
     8d2:	9803      	ldr	r0, [sp, #12]
     8d4:	00c9      	lsls	r1, r1, #3
     8d6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8d8:	0018      	movs	r0, r3
     8da:	3098      	adds	r0, #152	; 0x98
     8dc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	78a8      	ldrb	r0, [r5, #2]
     8e0:	3651      	adds	r6, #81	; 0x51
     8e2:	43a0      	bics	r0, r4
     8e4:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8e8:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	7a29      	ldrb	r1, [r5, #8]
     8ec:	43a1      	bics	r1, r4
     8ee:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0249      	lsls	r1, r1, #9
     8f4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f6:	7831      	ldrb	r1, [r6, #0]
     8f8:	43a1      	bics	r1, r4
     8fa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	0289      	lsls	r1, r1, #10
     900:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	0019      	movs	r1, r3
     904:	3153      	adds	r1, #83	; 0x53
     906:	7808      	ldrb	r0, [r1, #0]
     908:	43a0      	bics	r0, r4
     90a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90c:	7808      	ldrb	r0, [r1, #0]
     90e:	4338      	orrs	r0, r7
     910:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     914:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     916:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     918:	0300      	lsls	r0, r0, #12
     91a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     91c:	9703      	str	r7, [sp, #12]
     91e:	7838      	ldrb	r0, [r7, #0]
     920:	2720      	movs	r7, #32
     922:	4010      	ands	r0, r2
     924:	4338      	orrs	r0, r7
     926:	9f03      	ldr	r7, [sp, #12]
     928:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     92c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	4320      	orrs	r0, r4
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	0018      	movs	r0, r3
     934:	3038      	adds	r0, #56	; 0x38
     936:	7801      	ldrb	r1, [r0, #0]
     938:	4011      	ands	r1, r2
     93a:	4339      	orrs	r1, r7
     93c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     93e:	7831      	ldrb	r1, [r6, #0]
     940:	4321      	orrs	r1, r4
     942:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     944:	4666      	mov	r6, ip
     946:	7801      	ldrb	r1, [r0, #0]
     948:	4391      	bics	r1, r2
     94a:	4331      	orrs	r1, r6
     94c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     950:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     952:	4321      	orrs	r1, r4
     954:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     956:	7981      	ldrb	r1, [r0, #6]
     958:	43a1      	bics	r1, r4
     95a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     95c:	2180      	movs	r1, #128	; 0x80
     95e:	02c9      	lsls	r1, r1, #11
     960:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     962:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     964:	7801      	ldrb	r1, [r0, #0]
     966:	43a1      	bics	r1, r4
     968:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     96a:	2180      	movs	r1, #128	; 0x80
     96c:	0149      	lsls	r1, r1, #5
     96e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	7881      	ldrb	r1, [r0, #2]
     972:	43a1      	bics	r1, r4
     974:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     976:	2180      	movs	r1, #128	; 0x80
     978:	01c9      	lsls	r1, r1, #7
     97a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     97c:	0019      	movs	r1, r3
     97e:	314d      	adds	r1, #77	; 0x4d
     980:	7808      	ldrb	r0, [r1, #0]
     982:	43a0      	bics	r0, r4
     984:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     986:	7808      	ldrb	r0, [r1, #0]
     988:	4330      	orrs	r0, r6
     98a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     98c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     98e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     990:	0189      	lsls	r1, r1, #6
     992:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	304f      	adds	r0, #79	; 0x4f
     996:	7801      	ldrb	r1, [r0, #0]
     998:	43a1      	bics	r1, r4
     99a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99c:	2180      	movs	r1, #128	; 0x80
     99e:	0209      	lsls	r1, r1, #8
     9a0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a4:	0019      	movs	r1, r3
     9a6:	3155      	adds	r1, #85	; 0x55
     9a8:	7808      	ldrb	r0, [r1, #0]
     9aa:	43a0      	bics	r0, r4
     9ac:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ae:	2080      	movs	r0, #128	; 0x80
     9b0:	0380      	lsls	r0, r0, #14
     9b2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9b4:	2040      	movs	r0, #64	; 0x40
     9b6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b8:	7848      	ldrb	r0, [r1, #1]
     9ba:	43a0      	bics	r0, r4
     9bc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9be:	2080      	movs	r0, #128	; 0x80
     9c0:	03c0      	lsls	r0, r0, #15
     9c2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9c4:	0018      	movs	r0, r3
     9c6:	303b      	adds	r0, #59	; 0x3b
     9c8:	7805      	ldrb	r5, [r0, #0]
     9ca:	4395      	bics	r5, r2
     9cc:	4335      	orrs	r5, r6
     9ce:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9d0:	784d      	ldrb	r5, [r1, #1]
     9d2:	4325      	orrs	r5, r4
     9d4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d6:	788d      	ldrb	r5, [r1, #2]
     9d8:	43a5      	bics	r5, r4
     9da:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9dc:	788d      	ldrb	r5, [r1, #2]
     9de:	4335      	orrs	r5, r6
     9e0:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9e2:	2580      	movs	r5, #128	; 0x80
     9e4:	042d      	lsls	r5, r5, #16
     9e6:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9e8:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9ea:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     9ec:	4e21      	ldr	r6, [pc, #132]	; (a74 <init+0x32c>)
     9ee:	401a      	ands	r2, r3
     9f0:	433a      	orrs	r2, r7
     9f2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f4:	788b      	ldrb	r3, [r1, #2]
     9f6:	2204      	movs	r2, #4
     9f8:	4323      	orrs	r3, r4
     9fa:	708b      	strb	r3, [r1, #2]
     9fc:	2000      	movs	r0, #0
     9fe:	2103      	movs	r1, #3
     a00:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a02:	002b      	movs	r3, r5
     a04:	002a      	movs	r2, r5
     a06:	0028      	movs	r0, r5
     a08:	4f1b      	ldr	r7, [pc, #108]	; (a78 <init+0x330>)
     a0a:	9501      	str	r5, [sp, #4]
     a0c:	9500      	str	r5, [sp, #0]
     a0e:	2103      	movs	r1, #3
     a10:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a12:	0020      	movs	r0, r4
     a14:	2204      	movs	r2, #4
     a16:	2103      	movs	r1, #3
     a18:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a1a:	002b      	movs	r3, r5
     a1c:	002a      	movs	r2, r5
     a1e:	0020      	movs	r0, r4
     a20:	9501      	str	r5, [sp, #4]
     a22:	9500      	str	r5, [sp, #0]
     a24:	2103      	movs	r1, #3
     a26:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a28:	2208      	movs	r2, #8
     a2a:	2104      	movs	r1, #4
     a2c:	2003      	movs	r0, #3
     a2e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     a30:	2396      	movs	r3, #150	; 0x96
     a32:	0021      	movs	r1, r4
     a34:	002a      	movs	r2, r5
     a36:	2003      	movs	r0, #3
     a38:	01db      	lsls	r3, r3, #7
     a3a:	4c10      	ldr	r4, [pc, #64]	; (a7c <init+0x334>)
     a3c:	47a0      	blx	r4

    TC4Init();
     a3e:	4b10      	ldr	r3, [pc, #64]	; (a80 <init+0x338>)
     a40:	4798      	blx	r3
    TC5Init();
     a42:	4b10      	ldr	r3, [pc, #64]	; (a84 <init+0x33c>)
     a44:	4798      	blx	r3
}
     a46:	b005      	add	sp, #20
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	000001d5 	.word	0x000001d5
     a50:	00000e25 	.word	0x00000e25
     a54:	00000ead 	.word	0x00000ead
     a58:	00000f79 	.word	0x00000f79
     a5c:	00000c0d 	.word	0x00000c0d
     a60:	00001119 	.word	0x00001119
     a64:	e000e100 	.word	0xe000e100
     a68:	ff00ffff 	.word	0xff00ffff
     a6c:	41004400 	.word	0x41004400
     a70:	41004435 	.word	0x41004435
     a74:	00002845 	.word	0x00002845
     a78:	000028a9 	.word	0x000028a9
     a7c:	0000290d 	.word	0x0000290d
     a80:	00001049 	.word	0x00001049
     a84:	000010b1 	.word	0x000010b1

00000a88 <main>:


int main(void) {
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	4c26      	ldr	r4, [pc, #152]	; (b24 <main+0x9c>)

    init();
     a8c:	4b26      	ldr	r3, [pc, #152]	; (b28 <main+0xa0>)
    TC4Init();
    TC5Init();
}


int main(void) {
     a8e:	44a5      	add	sp, r4

    init();
     a90:	4798      	blx	r3

    delay_ms(500);
     a92:	20fa      	movs	r0, #250	; 0xfa


    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a94:	2400      	movs	r4, #0

int main(void) {

    init();

    delay_ms(500);
     a96:	0040      	lsls	r0, r0, #1
     a98:	4b24      	ldr	r3, [pc, #144]	; (b2c <main+0xa4>)
     a9a:	4798      	blx	r3


    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a9c:	ab02      	add	r3, sp, #8
     a9e:	701c      	strb	r4, [r3, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     aa0:	a806      	add	r0, sp, #24
     aa2:	4b23      	ldr	r3, [pc, #140]	; (b30 <main+0xa8>)
     aa4:	4798      	blx	r3
    IMUinit();
     aa6:	4b23      	ldr	r3, [pc, #140]	; (b34 <main+0xac>)
     aa8:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     aaa:	2384      	movs	r3, #132	; 0x84
     aac:	aa02      	add	r2, sp, #8
     aae:	009b      	lsls	r3, r3, #2
     ab0:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;
     ab2:	4b21      	ldr	r3, [pc, #132]	; (b38 <main+0xb0>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     ab4:	a816      	add	r0, sp, #88	; 0x58

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     ab6:	54d4      	strb	r4, [r2, r3]

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     ab8:	4b20      	ldr	r3, [pc, #128]	; (b3c <main+0xb4>)
     aba:	4798      	blx	r3

    sampleTick(&my_altimeter);
     abc:	a802      	add	r0, sp, #8
     abe:	4c20      	ldr	r4, [pc, #128]	; (b40 <main+0xb8>)
     ac0:	47a0      	blx	r4

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     ac2:	4b20      	ldr	r3, [pc, #128]	; (b44 <main+0xbc>)
     ac4:	9837      	ldr	r0, [sp, #220]	; 0xdc
     ac6:	4798      	blx	r3
    my_altimeter.myIMU.gravityOffsetBuffer = my_altimeter.myIMU.gravityOffset;
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ac8:	4b1f      	ldr	r3, [pc, #124]	; (b48 <main+0xc0>)

    computeKalmanGains(&my_altimeter.myKalmanFilter);

    sampleTick(&my_altimeter);

    my_altimeter.myIMU.gravityOffset = my_altimeter.myIMU.accelZ;
     aca:	9030      	str	r0, [sp, #192]	; 0xc0
     acc:	9131      	str	r1, [sp, #196]	; 0xc4
    my_altimeter.myIMU.gravityOffsetBuffer = my_altimeter.myIMU.gravityOffset;
     ace:	9032      	str	r0, [sp, #200]	; 0xc8
     ad0:	9133      	str	r1, [sp, #204]	; 0xcc
    my_altimeter.myBarometer.groundOffset = my_altimeter.myBarometer.altitudefeet;
     ad2:	9810      	ldr	r0, [sp, #64]	; 0x40
     ad4:	9911      	ldr	r1, [sp, #68]	; 0x44
     ad6:	4798      	blx	r3
     ad8:	9012      	str	r0, [sp, #72]	; 0x48
    my_altimeter.myBarometer.groundOffsetBuffer = my_altimeter.myBarometer.groundOffset;
     ada:	9013      	str	r0, [sp, #76]	; 0x4c


	

    beep(400);
     adc:	20c8      	movs	r0, #200	; 0xc8
     ade:	4d1b      	ldr	r5, [pc, #108]	; (b4c <main+0xc4>)
     ae0:	0040      	lsls	r0, r0, #1
     ae2:	47a8      	blx	r5

    my_altimeter.StartupTick = millis();
     ae4:	4b1a      	ldr	r3, [pc, #104]	; (b50 <main+0xc8>)
     ae6:	4798      	blx	r3
     ae8:	23ca      	movs	r3, #202	; 0xca
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
	
    while (1) {

        if (takeSample()) {
			if (my_altimeter.Altitude > 1000000)
     aea:	26cd      	movs	r6, #205	; 0xcd

	

    beep(400);

    my_altimeter.StartupTick = millis();
     aec:	009b      	lsls	r3, r3, #2
     aee:	aa02      	add	r2, sp, #8
     af0:	50d0      	str	r0, [r2, r3]
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
     af2:	902e      	str	r0, [sp, #184]	; 0xb8
	
    while (1) {

        if (takeSample()) {
			if (my_altimeter.Altitude > 1000000)
     af4:	00b6      	lsls	r6, r6, #2
    my_altimeter.StartupTick = millis();
	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;
	
    while (1) {

        if (takeSample()) {
     af6:	4b17      	ldr	r3, [pc, #92]	; (b54 <main+0xcc>)
     af8:	4798      	blx	r3
     afa:	2800      	cmp	r0, #0
     afc:	d0fb      	beq.n	af6 <main+0x6e>
			if (my_altimeter.Altitude > 1000000)
     afe:	ab02      	add	r3, sp, #8
     b00:	599b      	ldr	r3, [r3, r6]
     b02:	9301      	str	r3, [sp, #4]
     b04:	9a01      	ldr	r2, [sp, #4]
     b06:	4b14      	ldr	r3, [pc, #80]	; (b58 <main+0xd0>)
     b08:	429a      	cmp	r2, r3
     b0a:	d902      	bls.n	b12 <main+0x8a>
			{
				    beep(400);
     b0c:	20c8      	movs	r0, #200	; 0xc8
     b0e:	0040      	lsls	r0, r0, #1
     b10:	47a8      	blx	r5

			}
            sampleTick(&my_altimeter);
     b12:	a802      	add	r0, sp, #8
     b14:	47a0      	blx	r4
            flight(&my_altimeter);
     b16:	a802      	add	r0, sp, #8
     b18:	4b10      	ldr	r3, [pc, #64]	; (b5c <main+0xd4>)
     b1a:	4798      	blx	r3
            computeKalmanStates(&my_altimeter);
     b1c:	a802      	add	r0, sp, #8
     b1e:	4b10      	ldr	r3, [pc, #64]	; (b60 <main+0xd8>)
     b20:	4798      	blx	r3
     b22:	e7e8      	b.n	af6 <main+0x6e>
     b24:	fffffcb8 	.word	0xfffffcb8
     b28:	00000749 	.word	0x00000749
     b2c:	00000fc9 	.word	0x00000fc9
     b30:	000006b9 	.word	0x000006b9
     b34:	00000b65 	.word	0x00000b65
     b38:	00000311 	.word	0x00000311
     b3c:	0000156d 	.word	0x0000156d
     b40:	0000244d 	.word	0x0000244d
     b44:	000061ad 	.word	0x000061ad
     b48:	00003e2d 	.word	0x00003e2d
     b4c:	00000db1 	.word	0x00000db1
     b50:	00001015 	.word	0x00001015
     b54:	00002435 	.word	0x00002435
     b58:	000f4240 	.word	0x000f4240
     b5c:	00001179 	.word	0x00001179
     b60:	00001e11 	.word	0x00001e11

00000b64 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b64:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b66:	4c08      	ldr	r4, [pc, #32]	; (b88 <IMUinit+0x24>)
     b68:	2580      	movs	r5, #128	; 0x80
     b6a:	0023      	movs	r3, r4
     b6c:	00ed      	lsls	r5, r5, #3
     b6e:	3394      	adds	r3, #148	; 0x94
     b70:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b72:	4e06      	ldr	r6, [pc, #24]	; (b8c <IMUinit+0x28>)
     b74:	210f      	movs	r1, #15
     b76:	2000      	movs	r0, #0
     b78:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b7a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b7c:	210c      	movs	r1, #12
     b7e:	2000      	movs	r0, #0
     b80:	47b0      	blx	r6
     b82:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b84:	bd70      	pop	{r4, r5, r6, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	41004400 	.word	0x41004400
     b8c:	00002955 	.word	0x00002955

00000b90 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b90:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b92:	4b09      	ldr	r3, [pc, #36]	; (bb8 <USARTconnectionAvaliable+0x28>)
     b94:	7e1c      	ldrb	r4, [r3, #24]
     b96:	0764      	lsls	r4, r4, #29
     b98:	0fe4      	lsrs	r4, r4, #31
     b9a:	2c01      	cmp	r4, #1
     b9c:	d001      	beq.n	ba2 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b9e:	2000      	movs	r0, #0
     ba0:	e009      	b.n	bb6 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     ba2:	2003      	movs	r0, #3
     ba4:	4b05      	ldr	r3, [pc, #20]	; (bbc <USARTconnectionAvaliable+0x2c>)
     ba6:	4798      	blx	r3
     ba8:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     baa:	2948      	cmp	r1, #72	; 0x48
     bac:	d1f7      	bne.n	b9e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     bae:	2003      	movs	r0, #3
     bb0:	4b03      	ldr	r3, [pc, #12]	; (bc0 <USARTconnectionAvaliable+0x30>)
     bb2:	4798      	blx	r3
            return true;
     bb4:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	42001400 	.word	0x42001400
     bbc:	00002985 	.word	0x00002985
     bc0:	0000296d 	.word	0x0000296d

00000bc4 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bc6:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bc8:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bca:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bcc:	1a09      	subs	r1, r1, r0
     bce:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bd0:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bd2:	b28b      	uxth	r3, r1
     bd4:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bd6:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     bd8:	a902      	add	r1, sp, #8
     bda:	0028      	movs	r0, r5
     bdc:	4b09      	ldr	r3, [pc, #36]	; (c04 <sendTheasePagesToComputer+0x40>)
     bde:	4798      	blx	r3
     be0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     be2:	ab02      	add	r3, sp, #8
     be4:	5d99      	ldrb	r1, [r3, r6]
     be6:	2003      	movs	r0, #3
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <sendTheasePagesToComputer+0x44>)
     bea:	3601      	adds	r6, #1
     bec:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bee:	42be      	cmp	r6, r7
     bf0:	d1f7      	bne.n	be2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bf2:	3401      	adds	r4, #1
     bf4:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bf6:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bf8:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     bfa:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bfc:	42a3      	cmp	r3, r4
     bfe:	d2eb      	bcs.n	bd8 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     c00:	b043      	add	sp, #268	; 0x10c
     c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c04:	000003b1 	.word	0x000003b1
     c08:	0000296d 	.word	0x0000296d

00000c0c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c0c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c0e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c10:	4a10      	ldr	r2, [pc, #64]	; (c54 <adcInit+0x48>)
     c12:	0249      	lsls	r1, r1, #9
     c14:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c16:	4810      	ldr	r0, [pc, #64]	; (c58 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c18:	430b      	orrs	r3, r1
     c1a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c1c:	23e0      	movs	r3, #224	; 0xe0
     c1e:	490f      	ldr	r1, [pc, #60]	; (c5c <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c20:	4a0f      	ldr	r2, [pc, #60]	; (c60 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c22:	00db      	lsls	r3, r3, #3
     c24:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c26:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c28:	4a0e      	ldr	r2, [pc, #56]	; (c64 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c2a:	6812      	ldr	r2, [r2, #0]
     c2c:	0150      	lsls	r0, r2, #5
     c2e:	4018      	ands	r0, r3
     c30:	4b0d      	ldr	r3, [pc, #52]	; (c68 <adcInit+0x5c>)
     c32:	0154      	lsls	r4, r2, #5
     c34:	681a      	ldr	r2, [r3, #0]
     c36:	0ed3      	lsrs	r3, r2, #27
     c38:	4323      	orrs	r3, r4
     c3a:	b2da      	uxtb	r2, r3
     c3c:	0003      	movs	r3, r0
     c3e:	4313      	orrs	r3, r2
     c40:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c42:	2302      	movs	r3, #2
     c44:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c46:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c48:	7e4b      	ldrb	r3, [r1, #25]
     c4a:	b25b      	sxtb	r3, r3
     c4c:	2b00      	cmp	r3, #0
     c4e:	dbfb      	blt.n	c48 <adcInit+0x3c>
}
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	40000400 	.word	0x40000400
     c58:	0000401e 	.word	0x0000401e
     c5c:	42004000 	.word	0x42004000
     c60:	40000c00 	.word	0x40000c00
     c64:	00806024 	.word	0x00806024
     c68:	00806020 	.word	0x00806020

00000c6c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c6c:	2202      	movs	r2, #2
     c6e:	4b05      	ldr	r3, [pc, #20]	; (c84 <adcSample+0x18>)
     c70:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c72:	3a01      	subs	r2, #1
     c74:	7e19      	ldrb	r1, [r3, #24]
     c76:	4211      	tst	r1, r2
     c78:	d0fc      	beq.n	c74 <adcSample+0x8>
    return ADC->RESULT.reg;
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <adcSample+0x18>)
     c7c:	8b58      	ldrh	r0, [r3, #26]
     c7e:	b280      	uxth	r0, r0
}
     c80:	4770      	bx	lr
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	42004000 	.word	0x42004000

00000c88 <adc_read>:


u16_t adc_read(Pin p) {
     c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c8a:	2501      	movs	r5, #1
     c8c:	0c02      	lsrs	r2, r0, #16
     c8e:	b2d4      	uxtb	r4, r2
     c90:	9000      	str	r0, [sp, #0]
     c92:	0e00      	lsrs	r0, r0, #24
     c94:	9101      	str	r1, [sp, #4]
     c96:	0842      	lsrs	r2, r0, #1
     c98:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c9a:	4911      	ldr	r1, [pc, #68]	; (ce0 <adc_read+0x58>)
     c9c:	18d2      	adds	r2, r2, r3
     c9e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ca0:	4228      	tst	r0, r5
     ca2:	d005      	beq.n	cb0 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ca4:	210f      	movs	r1, #15
     ca6:	7814      	ldrb	r4, [r2, #0]
     ca8:	4021      	ands	r1, r4
     caa:	2410      	movs	r4, #16
     cac:	4321      	orrs	r1, r4
     cae:	e003      	b.n	cb8 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     cb0:	240f      	movs	r4, #15
     cb2:	7811      	ldrb	r1, [r2, #0]
     cb4:	43a1      	bics	r1, r4
     cb6:	4329      	orrs	r1, r5
     cb8:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     cba:	2101      	movs	r1, #1
     cbc:	4a09      	ldr	r2, [pc, #36]	; (ce4 <adc_read+0x5c>)
     cbe:	18c3      	adds	r3, r0, r3
     cc0:	189b      	adds	r3, r3, r2
     cc2:	781a      	ldrb	r2, [r3, #0]
     cc4:	430a      	orrs	r2, r1
     cc6:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     cc8:	466b      	mov	r3, sp
     cca:	791a      	ldrb	r2, [r3, #4]
     ccc:	231f      	movs	r3, #31
     cce:	4013      	ands	r3, r2
     cd0:	22c0      	movs	r2, #192	; 0xc0
     cd2:	0152      	lsls	r2, r2, #5
     cd4:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     cd6:	4a04      	ldr	r2, [pc, #16]	; (ce8 <adc_read+0x60>)
     cd8:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     cda:	4b04      	ldr	r3, [pc, #16]	; (cec <adc_read+0x64>)
     cdc:	4798      	blx	r3
     cde:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     ce0:	41004430 	.word	0x41004430
     ce4:	41004440 	.word	0x41004440
     ce8:	42004000 	.word	0x42004000
     cec:	00000c6d 	.word	0x00000c6d

00000cf0 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     cf0:	0c01      	lsrs	r1, r0, #16
     cf2:	0c13      	lsrs	r3, r2, #16
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	b2cd      	uxtb	r5, r1
     cf8:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cfa:	2301      	movs	r3, #1
     cfc:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cfe:	0e12      	lsrs	r2, r2, #24
     d00:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d02:	0e00      	lsrs	r0, r0, #24
     d04:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d06:	001a      	movs	r2, r3
     d08:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0a:	0030      	movs	r0, r6
     d0c:	4e11      	ldr	r6, [pc, #68]	; (d54 <byteOut+0x64>)
     d0e:	01c9      	lsls	r1, r1, #7
     d10:	b087      	sub	sp, #28
     d12:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d14:	4e10      	ldr	r6, [pc, #64]	; (d58 <byteOut+0x68>)
     d16:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d18:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d1a:	19ae      	adds	r6, r5, r6
     d1c:	7824      	ldrb	r4, [r4, #0]
     d1e:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d20:	4e0c      	ldr	r6, [pc, #48]	; (d54 <byteOut+0x64>)
     d22:	46b4      	mov	ip, r6
     d24:	44ac      	add	ip, r5
     d26:	4666      	mov	r6, ip
     d28:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     d2a:	b266      	sxtb	r6, r4
     d2c:	2e00      	cmp	r6, #0
     d2e:	da05      	bge.n	d3c <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d30:	4e09      	ldr	r6, [pc, #36]	; (d58 <byteOut+0x68>)
     d32:	46b4      	mov	ip, r6
     d34:	448c      	add	ip, r1
     d36:	4666      	mov	r6, ip
     d38:	6032      	str	r2, [r6, #0]
     d3a:	e000      	b.n	d3e <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d3c:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d3e:	9e01      	ldr	r6, [sp, #4]
     d40:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d42:	0064      	lsls	r4, r4, #1
     d44:	b2db      	uxtb	r3, r3
     d46:	6030      	str	r0, [r6, #0]
     d48:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d4a:	2b00      	cmp	r3, #0
     d4c:	d1e8      	bne.n	d20 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d4e:	b007      	add	sp, #28
     d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	41004414 	.word	0x41004414
     d58:	41004418 	.word	0x41004418

00000d5c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d5e:	2501      	movs	r5, #1
     d60:	b085      	sub	sp, #20
     d62:	9103      	str	r1, [sp, #12]
     d64:	0011      	movs	r1, r2
     d66:	0c06      	lsrs	r6, r0, #16
     d68:	9301      	str	r3, [sp, #4]
     d6a:	b2f3      	uxtb	r3, r6
     d6c:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d6e:	0e09      	lsrs	r1, r1, #24
     d70:	0c14      	lsrs	r4, r2, #16
     d72:	9002      	str	r0, [sp, #8]
     d74:	9200      	str	r2, [sp, #0]
     d76:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d78:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d7a:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d7c:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d7e:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d80:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d82:	4c0a      	ldr	r4, [pc, #40]	; (dac <byteIn+0x50>)
     d84:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d86:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d88:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d8a:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d8c:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d8e:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d90:	0040      	lsls	r0, r0, #1
     d92:	402c      	ands	r4, r5
     d94:	1e67      	subs	r7, r4, #1
     d96:	41bc      	sbcs	r4, r7
     d98:	3901      	subs	r1, #1
     d9a:	4304      	orrs	r4, r0
     d9c:	b2c9      	uxtb	r1, r1
     d9e:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     da0:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     da2:	2900      	cmp	r1, #0
     da4:	d1f2      	bne.n	d8c <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     da6:	b005      	add	sp, #20
     da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	41004400 	.word	0x41004400

00000db0 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	2780      	movs	r7, #128	; 0x80
     db6:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     db8:	2500      	movs	r5, #0
     dba:	4c0a      	ldr	r4, [pc, #40]	; (de4 <beep+0x34>)
     dbc:	035b      	lsls	r3, r3, #13
     dbe:	61e3      	str	r3, [r4, #28]
     dc0:	03bf      	lsls	r7, r7, #14
     dc2:	42b5      	cmp	r5, r6
     dc4:	d006      	beq.n	dd4 <beep+0x24>
     dc6:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     dc8:	207a      	movs	r0, #122	; 0x7a
     dca:	4b07      	ldr	r3, [pc, #28]	; (de8 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     dcc:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     dce:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     dd0:	b2ad      	uxth	r5, r5
     dd2:	e7f6      	b.n	dc2 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dd4:	2380      	movs	r3, #128	; 0x80
     dd6:	039b      	lsls	r3, r3, #14
     dd8:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	035b      	lsls	r3, r3, #13
     dde:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	41004400 	.word	0x41004400
     de8:	00000f99 	.word	0x00000f99

00000dec <startupJingle>:

void startupJingle(){
     dec:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dee:	2696      	movs	r6, #150	; 0x96
     df0:	0076      	lsls	r6, r6, #1
     df2:	4d0a      	ldr	r5, [pc, #40]	; (e1c <startupJingle+0x30>)
     df4:	0030      	movs	r0, r6
     df6:	47a8      	blx	r5
    delay_ms(80);
     df8:	4c09      	ldr	r4, [pc, #36]	; (e20 <startupJingle+0x34>)
     dfa:	2050      	movs	r0, #80	; 0x50
     dfc:	47a0      	blx	r4
    beep(300);
     dfe:	0030      	movs	r0, r6
     e00:	47a8      	blx	r5
    delay_ms(250);
     e02:	20fa      	movs	r0, #250	; 0xfa
     e04:	47a0      	blx	r4
    beep(300);
     e06:	0030      	movs	r0, r6
     e08:	47a8      	blx	r5
    delay_ms(80);
     e0a:	2050      	movs	r0, #80	; 0x50
     e0c:	47a0      	blx	r4
    beep(300);
     e0e:	0030      	movs	r0, r6
     e10:	47a8      	blx	r5
    delay_ms(500);
     e12:	20fa      	movs	r0, #250	; 0xfa
     e14:	0040      	lsls	r0, r0, #1
     e16:	47a0      	blx	r4
}
     e18:	bd70      	pop	{r4, r5, r6, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	00000db1 	.word	0x00000db1
     e20:	00000fc9 	.word	0x00000fc9

00000e24 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e24:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e26:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e28:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e2a:	4916      	ldr	r1, [pc, #88]	; (e84 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e2c:	4a16      	ldr	r2, [pc, #88]	; (e88 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e2e:	00db      	lsls	r3, r3, #3
     e30:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e32:	6853      	ldr	r3, [r2, #4]
     e34:	4303      	orrs	r3, r0
     e36:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e38:	4b14      	ldr	r3, [pc, #80]	; (e8c <GclkInit+0x68>)
     e3a:	681a      	ldr	r2, [r3, #0]
     e3c:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e3e:	2a3f      	cmp	r2, #63	; 0x3f
     e40:	d100      	bne.n	e44 <GclkInit+0x20>
        coarse = 0x1f;
     e42:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e44:	4b12      	ldr	r3, [pc, #72]	; (e90 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e46:	4813      	ldr	r0, [pc, #76]	; (e94 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	059b      	lsls	r3, r3, #22
     e4c:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e4e:	4283      	cmp	r3, r0
     e50:	d100      	bne.n	e54 <GclkInit+0x30>
        fine = 0x1ff;
     e52:	4b11      	ldr	r3, [pc, #68]	; (e98 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e54:	4811      	ldr	r0, [pc, #68]	; (e9c <GclkInit+0x78>)
     e56:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e58:	2010      	movs	r0, #16
     e5a:	68cc      	ldr	r4, [r1, #12]
     e5c:	4204      	tst	r4, r0
     e5e:	d0fc      	beq.n	e5a <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e60:	0292      	lsls	r2, r2, #10
     e62:	4313      	orrs	r3, r2
     e64:	4a07      	ldr	r2, [pc, #28]	; (e84 <GclkInit+0x60>)
     e66:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e68:	2310      	movs	r3, #16
     e6a:	68ca      	ldr	r2, [r1, #12]
     e6c:	421a      	tst	r2, r3
     e6e:	d0fc      	beq.n	e6a <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e70:	4a0b      	ldr	r2, [pc, #44]	; (ea0 <GclkInit+0x7c>)
     e72:	4b04      	ldr	r3, [pc, #16]	; (e84 <GclkInit+0x60>)
     e74:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e76:	2280      	movs	r2, #128	; 0x80
     e78:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <GclkInit+0x80>)
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e7e:	4a0a      	ldr	r2, [pc, #40]	; (ea8 <GclkInit+0x84>)
     e80:	605a      	str	r2, [r3, #4]
}
     e82:	bd10      	pop	{r4, pc}
     e84:	40000800 	.word	0x40000800
     e88:	41004000 	.word	0x41004000
     e8c:	00806024 	.word	0x00806024
     e90:	00806028 	.word	0x00806028
     e94:	000003ff 	.word	0x000003ff
     e98:	000001ff 	.word	0x000001ff
     e9c:	00000522 	.word	0x00000522
     ea0:	000005a2 	.word	0x000005a2
     ea4:	40000c00 	.word	0x40000c00
     ea8:	00010700 	.word	0x00010700

00000eac <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     eac:	4a1d      	ldr	r2, [pc, #116]	; (f24 <RtcInit+0x78>)
     eae:	4b1e      	ldr	r3, [pc, #120]	; (f28 <RtcInit+0x7c>)
     eb0:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     eb2:	2202      	movs	r2, #2
     eb4:	68d9      	ldr	r1, [r3, #12]
     eb6:	4211      	tst	r1, r2
     eb8:	d0fc      	beq.n	eb4 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     eba:	2281      	movs	r2, #129	; 0x81
     ebc:	4b1b      	ldr	r3, [pc, #108]	; (f2c <RtcInit+0x80>)
     ebe:	0052      	lsls	r2, r2, #1
     ec0:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ec2:	4a1b      	ldr	r2, [pc, #108]	; (f30 <RtcInit+0x84>)
     ec4:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ec6:	785a      	ldrb	r2, [r3, #1]
     ec8:	b252      	sxtb	r2, r2
     eca:	2a00      	cmp	r2, #0
     ecc:	dbfb      	blt.n	ec6 <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ece:	4a19      	ldr	r2, [pc, #100]	; (f34 <RtcInit+0x88>)
     ed0:	4b16      	ldr	r3, [pc, #88]	; (f2c <RtcInit+0x80>)
     ed2:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ed4:	2204      	movs	r2, #4
     ed6:	4b18      	ldr	r3, [pc, #96]	; (f38 <RtcInit+0x8c>)
     ed8:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eda:	7a9a      	ldrb	r2, [r3, #10]
     edc:	4916      	ldr	r1, [pc, #88]	; (f38 <RtcInit+0x8c>)
     ede:	09d2      	lsrs	r2, r2, #7
     ee0:	d1fb      	bne.n	eda <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ee2:	20a0      	movs	r0, #160	; 0xa0
     ee4:	880a      	ldrh	r2, [r1, #0]
     ee6:	00c0      	lsls	r0, r0, #3
     ee8:	4302      	orrs	r2, r0
     eea:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eec:	7a9a      	ldrb	r2, [r3, #10]
     eee:	09d2      	lsrs	r2, r2, #7
     ef0:	d1fc      	bne.n	eec <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     ef2:	4912      	ldr	r1, [pc, #72]	; (f3c <RtcInit+0x90>)
     ef4:	4a10      	ldr	r2, [pc, #64]	; (f38 <RtcInit+0x8c>)
     ef6:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ef8:	7a99      	ldrb	r1, [r3, #10]
     efa:	4a0f      	ldr	r2, [pc, #60]	; (f38 <RtcInit+0x8c>)
     efc:	09c9      	lsrs	r1, r1, #7
     efe:	d1fb      	bne.n	ef8 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f00:	8851      	ldrh	r1, [r2, #2]
     f02:	480f      	ldr	r0, [pc, #60]	; (f40 <RtcInit+0x94>)
     f04:	4301      	orrs	r1, r0
     f06:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f08:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f0a:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f0c:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f0e:	8811      	ldrh	r1, [r2, #0]
     f10:	4301      	orrs	r1, r0
     f12:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f14:	7a9a      	ldrb	r2, [r3, #10]
     f16:	09d2      	lsrs	r2, r2, #7
     f18:	d1fc      	bne.n	f14 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f1a:	4b0a      	ldr	r3, [pc, #40]	; (f44 <RtcInit+0x98>)
     f1c:	3208      	adds	r2, #8
     f1e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f20:	4770      	bx	lr
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	0000060e 	.word	0x0000060e
     f28:	40000800 	.word	0x40000800
     f2c:	40000c00 	.word	0x40000c00
     f30:	00230002 	.word	0x00230002
     f34:	00004204 	.word	0x00004204
     f38:	40001400 	.word	0x40001400
     f3c:	000003e6 	.word	0x000003e6
     f40:	00004010 	.word	0x00004010
     f44:	e000e100 	.word	0xe000e100

00000f48 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f48:	230f      	movs	r3, #15
     f4a:	4018      	ands	r0, r3
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <gclkEnable+0x28>)
     f4e:	0212      	lsls	r2, r2, #8
     f50:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f52:	23f8      	movs	r3, #248	; 0xf8
     f54:	0209      	lsls	r1, r1, #8
     f56:	015b      	lsls	r3, r3, #5
     f58:	4019      	ands	r1, r3
     f5a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f5c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f5e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f60:	4c04      	ldr	r4, [pc, #16]	; (f74 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f62:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f64:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f66:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f68:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f6a:	6060      	str	r0, [r4, #4]
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00ffff00 	.word	0x00ffff00
     f74:	40000c00 	.word	0x40000c00

00000f78 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <delayInit+0x14>)
     f7a:	4a05      	ldr	r2, [pc, #20]	; (f90 <delayInit+0x18>)
     f7c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f7e:	2230      	movs	r2, #48	; 0x30
     f80:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <delayInit+0x1c>)
     f84:	3a2b      	subs	r2, #43	; 0x2b
     f86:	601a      	str	r2, [r3, #0]
}
     f88:	4770      	bx	lr
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000004 	.word	0x20000004
     f90:	0000bb80 	.word	0x0000bb80
     f94:	e000e010 	.word	0xe000e010

00000f98 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f98:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f9a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f9c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fa0:	4a08      	ldr	r2, [pc, #32]	; (fc4 <delay_us+0x2c>)
     fa2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fa6:	3801      	subs	r0, #1
     fa8:	d308      	bcc.n	fbc <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     faa:	2b00      	cmp	r3, #0
     fac:	d0fb      	beq.n	fa6 <delay_us+0xe>
     fae:	4e05      	ldr	r6, [pc, #20]	; (fc4 <delay_us+0x2c>)
        SysTick->LOAD = n;
     fb0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fb2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb4:	6835      	ldr	r5, [r6, #0]
     fb6:	4225      	tst	r5, r4
     fb8:	d0fc      	beq.n	fb4 <delay_us+0x1c>
     fba:	e7f4      	b.n	fa6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fbc:	bd70      	pop	{r4, r5, r6, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	20000004 	.word	0x20000004
     fc4:	e000e010 	.word	0xe000e010

00000fc8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     fc8:	b570      	push	{r4, r5, r6, lr}
     fca:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fcc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     fce:	4b08      	ldr	r3, [pc, #32]	; (ff0 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fd0:	4a08      	ldr	r2, [pc, #32]	; (ff4 <delay_ms+0x2c>)
     fd2:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fd4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fd6:	3801      	subs	r0, #1
     fd8:	d308      	bcc.n	fec <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fda:	2b00      	cmp	r3, #0
     fdc:	d0fb      	beq.n	fd6 <delay_ms+0xe>
     fde:	4e05      	ldr	r6, [pc, #20]	; (ff4 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fe0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fe2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fe4:	6835      	ldr	r5, [r6, #0]
     fe6:	4225      	tst	r5, r4
     fe8:	d0fc      	beq.n	fe4 <delay_ms+0x1c>
     fea:	e7f4      	b.n	fd6 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fec:	bd70      	pop	{r4, r5, r6, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000004 	.word	0x20000004
     ff4:	e000e010 	.word	0xe000e010

00000ff8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     ff8:	21fa      	movs	r1, #250	; 0xfa
     ffa:	4a04      	ldr	r2, [pc, #16]	; (100c <RTC_Handler+0x14>)
     ffc:	0089      	lsls	r1, r1, #2
     ffe:	6813      	ldr	r3, [r2, #0]
    1000:	185b      	adds	r3, r3, r1
    1002:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1004:	22ff      	movs	r2, #255	; 0xff
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <RTC_Handler+0x18>)
    1008:	721a      	strb	r2, [r3, #8]
}
    100a:	4770      	bx	lr
    100c:	200004cc 	.word	0x200004cc
    1010:	40001400 	.word	0x40001400

00001014 <millis>:

uint32_t millis(void) {
    1014:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1016:	f3ef 8110 	mrs	r1, PRIMASK
    101a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <millis+0x2c>)
    101e:	4d09      	ldr	r5, [pc, #36]	; (1044 <millis+0x30>)
    1020:	8a10      	ldrh	r0, [r2, #16]
    1022:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1024:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1026:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1028:	09e4      	lsrs	r4, r4, #7
    102a:	d004      	beq.n	1036 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    102c:	8a13      	ldrh	r3, [r2, #16]
    102e:	22fa      	movs	r2, #250	; 0xfa
    1030:	6828      	ldr	r0, [r5, #0]
    1032:	0092      	lsls	r2, r2, #2
    1034:	1880      	adds	r0, r0, r2
    1036:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1038:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    103c:	bd30      	pop	{r4, r5, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40001400 	.word	0x40001400
    1044:	200004cc 	.word	0x200004cc

00001048 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1048:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    104a:	4a0d      	ldr	r2, [pc, #52]	; (1080 <TC4Init+0x38>)
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    104e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1050:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1052:	4a0d      	ldr	r2, [pc, #52]	; (1088 <TC4Init+0x40>)
    1054:	6a13      	ldr	r3, [r2, #32]
    1056:	430b      	orrs	r3, r1
    1058:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    105a:	4b0c      	ldr	r3, [pc, #48]	; (108c <TC4Init+0x44>)
    105c:	4a0c      	ldr	r2, [pc, #48]	; (1090 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    105e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1060:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    1062:	2241      	movs	r2, #65	; 0x41
    1064:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1066:	3a40      	subs	r2, #64	; 0x40
    1068:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    106a:	32ff      	adds	r2, #255	; 0xff
    106c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    106e:	881a      	ldrh	r2, [r3, #0]
    1070:	430a      	orrs	r2, r1
    1072:	801a      	strh	r2, [r3, #0]
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	4b07      	ldr	r3, [pc, #28]	; (1094 <TC4Init+0x4c>)
    1078:	0312      	lsls	r2, r2, #12
    107a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	0000421c 	.word	0x0000421c
    1084:	40000c00 	.word	0x40000c00
    1088:	40000400 	.word	0x40000400
    108c:	42003000 	.word	0x42003000
    1090:	00000904 	.word	0x00000904
    1094:	e000e100 	.word	0xe000e100

00001098 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1098:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    109a:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    109c:	4b02      	ldr	r3, [pc, #8]	; (10a8 <TC4_Handler+0x10>)
    109e:	739a      	strb	r2, [r3, #14]
    pullSample();
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <TC4_Handler+0x14>)
    10a2:	4798      	blx	r3
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	42003000 	.word	0x42003000
    10ac:	00002441 	.word	0x00002441

000010b0 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b0:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b2:	4a0d      	ldr	r2, [pc, #52]	; (10e8 <TC5Init+0x38>)
    10b4:	4b0d      	ldr	r3, [pc, #52]	; (10ec <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b6:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10ba:	4a0d      	ldr	r2, [pc, #52]	; (10f0 <TC5Init+0x40>)
    10bc:	6a13      	ldr	r3, [r2, #32]
    10be:	430b      	orrs	r3, r1
    10c0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c2:	4b0c      	ldr	r3, [pc, #48]	; (10f4 <TC5Init+0x44>)
    10c4:	4a0c      	ldr	r2, [pc, #48]	; (10f8 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10c6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    10ca:	2220      	movs	r2, #32
    10cc:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10ce:	3a1f      	subs	r2, #31
    10d0:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10d2:	32ff      	adds	r2, #255	; 0xff
    10d4:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10d6:	881a      	ldrh	r2, [r3, #0]
    10d8:	430a      	orrs	r2, r1
    10da:	801a      	strh	r2, [r3, #0]
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <TC5Init+0x4c>)
    10e0:	0352      	lsls	r2, r2, #13
    10e2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10e4:	4770      	bx	lr
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	0000421c 	.word	0x0000421c
    10ec:	40000c00 	.word	0x40000c00
    10f0:	40000400 	.word	0x40000400
    10f4:	42003400 	.word	0x42003400
    10f8:	00000d04 	.word	0x00000d04
    10fc:	e000e100 	.word	0xe000e100

00001100 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1100:	22ff      	movs	r2, #255	; 0xff
    1102:	4b03      	ldr	r3, [pc, #12]	; (1110 <TC5_Handler+0x10>)
    1104:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1106:	4b03      	ldr	r3, [pc, #12]	; (1114 <TC5_Handler+0x14>)
    1108:	3afe      	subs	r2, #254	; 0xfe
    110a:	701a      	strb	r2, [r3, #0]
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	42003400 	.word	0x42003400
    1114:	200004d1 	.word	0x200004d1

00001118 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    111a:	27c0      	movs	r7, #192	; 0xc0
    111c:	4d10      	ldr	r5, [pc, #64]	; (1160 <dmaInit+0x48>)
    111e:	003a      	movs	r2, r7
    1120:	4e10      	ldr	r6, [pc, #64]	; (1164 <dmaInit+0x4c>)
    1122:	0028      	movs	r0, r5
    1124:	2100      	movs	r1, #0
    1126:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    1128:	4c0f      	ldr	r4, [pc, #60]	; (1168 <dmaInit+0x50>)
    112a:	003a      	movs	r2, r7
    112c:	2100      	movs	r1, #0
    112e:	0020      	movs	r0, r4
    1130:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    1132:	2120      	movs	r1, #32
    1134:	4b0d      	ldr	r3, [pc, #52]	; (116c <dmaInit+0x54>)
    1136:	695a      	ldr	r2, [r3, #20]
    1138:	430a      	orrs	r2, r1
    113a:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    113c:	69da      	ldr	r2, [r3, #28]
    113e:	3910      	subs	r1, #16
    1140:	430a      	orrs	r2, r1
    1142:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1144:	4b0a      	ldr	r3, [pc, #40]	; (1170 <dmaInit+0x58>)
    1146:	390e      	subs	r1, #14
    1148:	881a      	ldrh	r2, [r3, #0]
    114a:	438a      	bics	r2, r1
    114c:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    114e:	881a      	ldrh	r2, [r3, #0]
    1150:	3901      	subs	r1, #1
    1152:	430a      	orrs	r2, r1
    1154:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1156:	4a07      	ldr	r2, [pc, #28]	; (1174 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1158:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    115a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    115c:	801a      	strh	r2, [r3, #0]
}
    115e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1160:	200005a0 	.word	0x200005a0
    1164:	00006515 	.word	0x00006515
    1168:	200004e0 	.word	0x200004e0
    116c:	40000400 	.word	0x40000400
    1170:	41004800 	.word	0x41004800
    1174:	00000f02 	.word	0x00000f02

00001178 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1178:	b5f0      	push	{r4, r5, r6, r7, lr}
    117a:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    117c:	7800      	ldrb	r0, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    117e:	b085      	sub	sp, #20



    switch(my_altimeter->myFlightState) {
    1180:	280a      	cmp	r0, #10
    1182:	d900      	bls.n	1186 <flight+0xe>
    1184:	e1ab      	b.n	14de <flight+0x366>
    1186:	f002 fd8b 	bl	3ca0 <__gnu_thumb1_case_uhi>
    118a:	000b      	.short	0x000b
    118c:	00a2008f 	.word	0x00a2008f
    1190:	01aa0127 	.word	0x01aa0127
    1194:	015c01aa 	.word	0x015c01aa
    1198:	01aa01aa 	.word	0x01aa01aa
    119c:	016301aa 	.word	0x016301aa
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    11a0:	0025      	movs	r5, r4
    11a2:	35c0      	adds	r5, #192	; 0xc0
    11a4:	6828      	ldr	r0, [r5, #0]
    11a6:	6869      	ldr	r1, [r5, #4]
    11a8:	4ace      	ldr	r2, [pc, #824]	; (14e4 <flight+0x36c>)
    11aa:	4ecf      	ldr	r6, [pc, #828]	; (14e8 <flight+0x370>)
    11ac:	9501      	str	r5, [sp, #4]
    11ae:	4bcf      	ldr	r3, [pc, #828]	; (14ec <flight+0x374>)
    11b0:	47b0      	blx	r6
    11b2:	0023      	movs	r3, r4
    11b4:	33d4      	adds	r3, #212	; 0xd4
    11b6:	0006      	movs	r6, r0
    11b8:	6818      	ldr	r0, [r3, #0]
    11ba:	4bcd      	ldr	r3, [pc, #820]	; (14f0 <flight+0x378>)
    11bc:	000f      	movs	r7, r1
    11be:	4798      	blx	r3
    11c0:	4dc9      	ldr	r5, [pc, #804]	; (14e8 <flight+0x370>)
    11c2:	4ac8      	ldr	r2, [pc, #800]	; (14e4 <flight+0x36c>)
    11c4:	4bcb      	ldr	r3, [pc, #812]	; (14f4 <flight+0x37c>)
    11c6:	47a8      	blx	r5
    11c8:	4dcb      	ldr	r5, [pc, #812]	; (14f8 <flight+0x380>)
    11ca:	0002      	movs	r2, r0
    11cc:	000b      	movs	r3, r1
    11ce:	0030      	movs	r0, r6
    11d0:	0039      	movs	r1, r7
    11d2:	47a8      	blx	r5
    11d4:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    11d6:	4ec9      	ldr	r6, [pc, #804]	; (14fc <flight+0x384>)


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    11d8:	6018      	str	r0, [r3, #0]
    11da:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    11dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
    11de:	47b0      	blx	r6
    11e0:	4dc1      	ldr	r5, [pc, #772]	; (14e8 <flight+0x370>)
    11e2:	2200      	movs	r2, #0
    11e4:	4bc6      	ldr	r3, [pc, #792]	; (1500 <flight+0x388>)
    11e6:	47a8      	blx	r5
    11e8:	23cd      	movs	r3, #205	; 0xcd
    11ea:	009b      	lsls	r3, r3, #2
    11ec:	9002      	str	r0, [sp, #8]
    11ee:	9103      	str	r1, [sp, #12]
    11f0:	58e0      	ldr	r0, [r4, r3]
    11f2:	47b0      	blx	r6
    11f4:	2200      	movs	r2, #0
    11f6:	4bc2      	ldr	r3, [pc, #776]	; (1500 <flight+0x388>)
    11f8:	47a8      	blx	r5
    11fa:	4dbf      	ldr	r5, [pc, #764]	; (14f8 <flight+0x380>)
    11fc:	0002      	movs	r2, r0
    11fe:	000b      	movs	r3, r1
    1200:	9802      	ldr	r0, [sp, #8]
    1202:	9903      	ldr	r1, [sp, #12]
    1204:	47a8      	blx	r5
    1206:	4fbf      	ldr	r7, [pc, #764]	; (1504 <flight+0x38c>)
    1208:	47b8      	blx	r7
    120a:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    120c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    120e:	47b0      	blx	r6
    1210:	4ab4      	ldr	r2, [pc, #720]	; (14e4 <flight+0x36c>)
    1212:	4bb6      	ldr	r3, [pc, #728]	; (14ec <flight+0x374>)
    1214:	4db4      	ldr	r5, [pc, #720]	; (14e8 <flight+0x370>)
    1216:	47a8      	blx	r5
    1218:	9002      	str	r0, [sp, #8]
    121a:	9103      	str	r1, [sp, #12]
    121c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    121e:	47b0      	blx	r6
    1220:	4ab0      	ldr	r2, [pc, #704]	; (14e4 <flight+0x36c>)
    1222:	4bb4      	ldr	r3, [pc, #720]	; (14f4 <flight+0x37c>)
    1224:	47a8      	blx	r5
    1226:	000b      	movs	r3, r1
    1228:	0002      	movs	r2, r0
    122a:	9802      	ldr	r0, [sp, #8]
    122c:	9903      	ldr	r1, [sp, #12]
    122e:	4db2      	ldr	r5, [pc, #712]	; (14f8 <flight+0x380>)
    1230:	47a8      	blx	r5
    1232:	47b8      	blx	r7

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1234:	0027      	movs	r7, r4
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    1236:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1238:	4eb3      	ldr	r6, [pc, #716]	; (1508 <flight+0x390>)
    123a:	47b0      	blx	r6
    123c:	37b0      	adds	r7, #176	; 0xb0
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	1ac0      	subs	r0, r0, r3
    1242:	23fa      	movs	r3, #250	; 0xfa
    1244:	00db      	lsls	r3, r3, #3
    1246:	4298      	cmp	r0, r3
    1248:	d90c      	bls.n	1264 <flight+0xec>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    124a:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    124c:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    124e:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1250:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1252:	6811      	ldr	r1, [r2, #0]
    1254:	6852      	ldr	r2, [r2, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1256:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1258:	0023      	movs	r3, r4
    125a:	33b8      	adds	r3, #184	; 0xb8
    125c:	6019      	str	r1, [r3, #0]
    125e:	605a      	str	r2, [r3, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1260:	47b0      	blx	r6
    1262:	6038      	str	r0, [r7, #0]
        }

        //logSensors(my_altimeter);


        if ((millis() - my_altimeter->StartupTick) > 10000) {
    1264:	47b0      	blx	r6
    1266:	23ca      	movs	r3, #202	; 0xca
    1268:	009b      	lsls	r3, r3, #2
    126a:	58e3      	ldr	r3, [r4, r3]
    126c:	1ac0      	subs	r0, r0, r3
    126e:	4ba7      	ldr	r3, [pc, #668]	; (150c <flight+0x394>)
    1270:	4298      	cmp	r0, r3
    1272:	d90a      	bls.n	128a <flight+0x112>
            findNewFlightStart(my_altimeter);
    1274:	0020      	movs	r0, r4
    1276:	4ba6      	ldr	r3, [pc, #664]	; (1510 <flight+0x398>)
    1278:	4798      	blx	r3
            logFlight(my_altimeter);
    127a:	0020      	movs	r0, r4
    127c:	4ba5      	ldr	r3, [pc, #660]	; (1514 <flight+0x39c>)
    127e:	4798      	blx	r3
            startupJingle();
    1280:	4ba5      	ldr	r3, [pc, #660]	; (1518 <flight+0x3a0>)
    1282:	4798      	blx	r3
			my_altimeter->myFlightState = flightTest;
    1284:	230a      	movs	r3, #10
    1286:	7023      	strb	r3, [r4, #0]
            //my_altimeter->myFlightState = flightPad;
            break;
    1288:	e129      	b.n	14de <flight+0x366>
        }

        attemptConnection(my_altimeter);
    128a:	0020      	movs	r0, r4
    128c:	4ba3      	ldr	r3, [pc, #652]	; (151c <flight+0x3a4>)
    128e:	4798      	blx	r3



        if (my_altimeter->myVoltages.batFloat < 3.5) {
    1290:	23c6      	movs	r3, #198	; 0xc6
    1292:	009b      	lsls	r3, r3, #2
    1294:	58e0      	ldr	r0, [r4, r3]
    1296:	49a2      	ldr	r1, [pc, #648]	; (1520 <flight+0x3a8>)
    1298:	4ba2      	ldr	r3, [pc, #648]	; (1524 <flight+0x3ac>)
    129a:	4798      	blx	r3
    129c:	2800      	cmp	r0, #0
    129e:	d100      	bne.n	12a2 <flight+0x12a>
    12a0:	e11d      	b.n	14de <flight+0x366>
            my_altimeter->myFlightState = flightIdle;
    12a2:	2301      	movs	r3, #1
    12a4:	7023      	strb	r3, [r4, #0]
    12a6:	e100      	b.n	14aa <flight+0x332>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12a8:	4b9f      	ldr	r3, [pc, #636]	; (1528 <flight+0x3b0>)
    12aa:	7e1b      	ldrb	r3, [r3, #24]
    12ac:	075b      	lsls	r3, r3, #29
    12ae:	d400      	bmi.n	12b2 <flight+0x13a>
    12b0:	e115      	b.n	14de <flight+0x366>
            u8_t possibleReset = usartDataIn(USART3);
    12b2:	2003      	movs	r0, #3
    12b4:	4b9d      	ldr	r3, [pc, #628]	; (152c <flight+0x3b4>)
    12b6:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12b8:	2852      	cmp	r0, #82	; 0x52
    12ba:	d000      	beq.n	12be <flight+0x146>
    12bc:	e10f      	b.n	14de <flight+0x366>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    12be:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12c2:	4a9b      	ldr	r2, [pc, #620]	; (1530 <flight+0x3b8>)
    12c4:	4b9b      	ldr	r3, [pc, #620]	; (1534 <flight+0x3bc>)
    12c6:	60da      	str	r2, [r3, #12]
    12c8:	f3bf 8f4f 	dsb	sy
    12cc:	e7fe      	b.n	12cc <flight+0x154>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    12ce:	0025      	movs	r5, r4
    12d0:	35c0      	adds	r5, #192	; 0xc0
    12d2:	6828      	ldr	r0, [r5, #0]
    12d4:	6869      	ldr	r1, [r5, #4]
    12d6:	4a83      	ldr	r2, [pc, #524]	; (14e4 <flight+0x36c>)
    12d8:	4e83      	ldr	r6, [pc, #524]	; (14e8 <flight+0x370>)
    12da:	9501      	str	r5, [sp, #4]
    12dc:	4b83      	ldr	r3, [pc, #524]	; (14ec <flight+0x374>)
    12de:	47b0      	blx	r6
    12e0:	0023      	movs	r3, r4
    12e2:	33d4      	adds	r3, #212	; 0xd4
    12e4:	0006      	movs	r6, r0
    12e6:	6818      	ldr	r0, [r3, #0]
    12e8:	4b81      	ldr	r3, [pc, #516]	; (14f0 <flight+0x378>)
    12ea:	000f      	movs	r7, r1
    12ec:	4798      	blx	r3
    12ee:	4d7e      	ldr	r5, [pc, #504]	; (14e8 <flight+0x370>)
    12f0:	4a7c      	ldr	r2, [pc, #496]	; (14e4 <flight+0x36c>)
    12f2:	4b80      	ldr	r3, [pc, #512]	; (14f4 <flight+0x37c>)
    12f4:	47a8      	blx	r5
    12f6:	4d80      	ldr	r5, [pc, #512]	; (14f8 <flight+0x380>)
    12f8:	0002      	movs	r2, r0
    12fa:	000b      	movs	r3, r1
    12fc:	0030      	movs	r0, r6
    12fe:	0039      	movs	r1, r7
    1300:	47a8      	blx	r5
    1302:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    1304:	4e7d      	ldr	r6, [pc, #500]	; (14fc <flight+0x384>)
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
    1306:	6018      	str	r0, [r3, #0]
    1308:	6059      	str	r1, [r3, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
    130a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    130c:	47b0      	blx	r6
    130e:	4d76      	ldr	r5, [pc, #472]	; (14e8 <flight+0x370>)
    1310:	2200      	movs	r2, #0
    1312:	4b7b      	ldr	r3, [pc, #492]	; (1500 <flight+0x388>)
    1314:	47a8      	blx	r5
    1316:	23cd      	movs	r3, #205	; 0xcd
    1318:	009b      	lsls	r3, r3, #2
    131a:	9002      	str	r0, [sp, #8]
    131c:	9103      	str	r1, [sp, #12]
    131e:	58e0      	ldr	r0, [r4, r3]
    1320:	47b0      	blx	r6
    1322:	2200      	movs	r2, #0
    1324:	4b76      	ldr	r3, [pc, #472]	; (1500 <flight+0x388>)
    1326:	47a8      	blx	r5
    1328:	4d73      	ldr	r5, [pc, #460]	; (14f8 <flight+0x380>)
    132a:	0002      	movs	r2, r0
    132c:	000b      	movs	r3, r1
    132e:	9802      	ldr	r0, [sp, #8]
    1330:	9903      	ldr	r1, [sp, #12]
    1332:	47a8      	blx	r5
    1334:	4f73      	ldr	r7, [pc, #460]	; (1504 <flight+0x38c>)
    1336:	47b8      	blx	r7
    1338:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    133a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    133c:	47b0      	blx	r6
    133e:	4a69      	ldr	r2, [pc, #420]	; (14e4 <flight+0x36c>)
    1340:	4b6a      	ldr	r3, [pc, #424]	; (14ec <flight+0x374>)
    1342:	4d69      	ldr	r5, [pc, #420]	; (14e8 <flight+0x370>)
    1344:	47a8      	blx	r5
    1346:	9002      	str	r0, [sp, #8]
    1348:	9103      	str	r1, [sp, #12]
    134a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    134c:	47b0      	blx	r6
    134e:	4a65      	ldr	r2, [pc, #404]	; (14e4 <flight+0x36c>)
    1350:	4b68      	ldr	r3, [pc, #416]	; (14f4 <flight+0x37c>)
    1352:	47a8      	blx	r5
    1354:	0002      	movs	r2, r0
    1356:	000b      	movs	r3, r1
    1358:	9802      	ldr	r0, [sp, #8]
    135a:	9903      	ldr	r1, [sp, #12]
    135c:	4d66      	ldr	r5, [pc, #408]	; (14f8 <flight+0x380>)
    135e:	47a8      	blx	r5
    1360:	47b8      	blx	r7

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1362:	0026      	movs	r6, r4
        *  baro alt > 40ft
        */

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer * 0.8 + my_altimeter->myIMU.accelZ * 0.2;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer * 0.5 + my_altimeter->Altitude * 0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer * 0.8 + my_altimeter->myBarometer.temperatureCelcus * 0.2;
    1364:	64e0      	str	r0, [r4, #76]	; 0x4c

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1366:	4f68      	ldr	r7, [pc, #416]	; (1508 <flight+0x390>)
    1368:	47b8      	blx	r7
    136a:	36b0      	adds	r6, #176	; 0xb0
    136c:	6833      	ldr	r3, [r6, #0]
    136e:	4a60      	ldr	r2, [pc, #384]	; (14f0 <flight+0x378>)
    1370:	1ac0      	subs	r0, r0, r3
    1372:	23fa      	movs	r3, #250	; 0xfa
    1374:	00db      	lsls	r3, r3, #3
    1376:	4298      	cmp	r0, r3
    1378:	d90c      	bls.n	1394 <flight+0x21c>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    137a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    137c:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    137e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1380:	64a3      	str	r3, [r4, #72]	; 0x48
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1382:	9b01      	ldr	r3, [sp, #4]
    1384:	34b8      	adds	r4, #184	; 0xb8
    1386:	681a      	ldr	r2, [r3, #0]
    1388:	685b      	ldr	r3, [r3, #4]
    138a:	6022      	str	r2, [r4, #0]
    138c:	6063      	str	r3, [r4, #4]
            my_altimeter->myIMU.offsetBufferTime = millis();
    138e:	47b8      	blx	r7
    1390:	6030      	str	r0, [r6, #0]
            break;
    1392:	e0a4      	b.n	14de <flight+0x366>
        }

        if (writeLog) {
    1394:	4b68      	ldr	r3, [pc, #416]	; (1538 <flight+0x3c0>)
    1396:	7819      	ldrb	r1, [r3, #0]
    1398:	2900      	cmp	r1, #0
    139a:	d005      	beq.n	13a8 <flight+0x230>
            writeLog = false;
    139c:	2100      	movs	r1, #0
    139e:	7019      	strb	r1, [r3, #0]
    13a0:	2180      	movs	r1, #128	; 0x80
    13a2:	4b66      	ldr	r3, [pc, #408]	; (153c <flight+0x3c4>)
    13a4:	0349      	lsls	r1, r1, #13
    13a6:	61d9      	str	r1, [r3, #28]
            //logSensors(my_altimeter);
            pinToggle(LedPin);
        }

        if ((my_altimeter->Velocity > 0.15) && ((my_altimeter->Altitude - my_altimeter->myBarometer.groundOffset) > 6)) {
    13a8:	23ce      	movs	r3, #206	; 0xce
    13aa:	009b      	lsls	r3, r3, #2
    13ac:	58e0      	ldr	r0, [r4, r3]
    13ae:	4790      	blx	r2
    13b0:	4a63      	ldr	r2, [pc, #396]	; (1540 <flight+0x3c8>)
    13b2:	4b64      	ldr	r3, [pc, #400]	; (1544 <flight+0x3cc>)
    13b4:	4d64      	ldr	r5, [pc, #400]	; (1548 <flight+0x3d0>)
    13b6:	47a8      	blx	r5
    13b8:	2800      	cmp	r0, #0
    13ba:	d067      	beq.n	148c <flight+0x314>
    13bc:	23cd      	movs	r3, #205	; 0xcd
    13be:	009b      	lsls	r3, r3, #2
    13c0:	58e3      	ldr	r3, [r4, r3]
    13c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13c4:	1a9b      	subs	r3, r3, r2
    13c6:	2b06      	cmp	r3, #6
    13c8:	d960      	bls.n	148c <flight+0x314>
            my_altimeter->myFlightState = flightBoost;
    13ca:	2303      	movs	r3, #3
            logEvent(my_altimeter, 'L');
    13cc:	214c      	movs	r1, #76	; 0x4c
            //logSensors(my_altimeter);
            pinToggle(LedPin);
        }

        if ((my_altimeter->Velocity > 0.15) && ((my_altimeter->Altitude - my_altimeter->myBarometer.groundOffset) > 6)) {
            my_altimeter->myFlightState = flightBoost;
    13ce:	7023      	strb	r3, [r4, #0]
            logEvent(my_altimeter, 'L');
    13d0:	0020      	movs	r0, r4
    13d2:	4b5e      	ldr	r3, [pc, #376]	; (154c <flight+0x3d4>)
    13d4:	4798      	blx	r3
    13d6:	e059      	b.n	148c <flight+0x314>
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
    13d8:	4b57      	ldr	r3, [pc, #348]	; (1538 <flight+0x3c0>)
    13da:	781a      	ldrb	r2, [r3, #0]
    13dc:	2a00      	cmp	r2, #0
    13de:	d019      	beq.n	1414 <flight+0x29c>
            writeLog = false;
    13e0:	2500      	movs	r5, #0
            logSensors(my_altimeter);
    13e2:	0020      	movs	r0, r4
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
            writeLog = false;
    13e4:	701d      	strb	r5, [r3, #0]
            logSensors(my_altimeter);
    13e6:	4b5a      	ldr	r3, [pc, #360]	; (1550 <flight+0x3d8>)
    13e8:	4798      	blx	r3
            if (my_altimeter->myFlashMemory.pageReady) {
    13ea:	4b5a      	ldr	r3, [pc, #360]	; (1554 <flight+0x3dc>)
    13ec:	5ce2      	ldrb	r2, [r4, r3]
    13ee:	42aa      	cmp	r2, r5
    13f0:	d010      	beq.n	1414 <flight+0x29c>
    13f2:	2280      	movs	r2, #128	; 0x80
                my_altimeter->myFlashMemory.pageReady = false;
    13f4:	54e5      	strb	r5, [r4, r3]
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    13f6:	0021      	movs	r1, r4
    13f8:	0025      	movs	r5, r4
    13fa:	4b50      	ldr	r3, [pc, #320]	; (153c <flight+0x3c4>)
    13fc:	0352      	lsls	r2, r2, #13
    13fe:	61da      	str	r2, [r3, #28]
    1400:	35fc      	adds	r5, #252	; 0xfc
    1402:	3111      	adds	r1, #17
    1404:	4b54      	ldr	r3, [pc, #336]	; (1558 <flight+0x3e0>)
    1406:	31ff      	adds	r1, #255	; 0xff
    1408:	68e8      	ldr	r0, [r5, #12]
    140a:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    140c:	68eb      	ldr	r3, [r5, #12]
    140e:	3301      	adds	r3, #1
    1410:	33ff      	adds	r3, #255	; 0xff
    1412:	60eb      	str	r3, [r5, #12]
            }
        }


        if (my_altimeter->Velocity < 0) {
    1414:	23ce      	movs	r3, #206	; 0xce
    1416:	009b      	lsls	r3, r3, #2
    1418:	4d42      	ldr	r5, [pc, #264]	; (1524 <flight+0x3ac>)
    141a:	2100      	movs	r1, #0
    141c:	58e0      	ldr	r0, [r4, r3]
    141e:	47a8      	blx	r5
    1420:	2800      	cmp	r0, #0
    1422:	d008      	beq.n	1436 <flight+0x2be>
            my_altimeter->myFlightState = flightDrogue;
    1424:	2306      	movs	r3, #6
            logEvent(my_altimeter, 'A');
    1426:	0020      	movs	r0, r4
            }
        }


        if (my_altimeter->Velocity < 0) {
            my_altimeter->myFlightState = flightDrogue;
    1428:	7023      	strb	r3, [r4, #0]
            logEvent(my_altimeter, 'A');
    142a:	2141      	movs	r1, #65	; 0x41
    142c:	4b47      	ldr	r3, [pc, #284]	; (154c <flight+0x3d4>)
    142e:	4798      	blx	r3
            beep(100);
    1430:	2064      	movs	r0, #100	; 0x64
    1432:	4b4a      	ldr	r3, [pc, #296]	; (155c <flight+0x3e4>)
    1434:	4798      	blx	r3

        }

        if (my_altimeter->myVoltages.batFloat < 3.5) {
    1436:	23c6      	movs	r3, #198	; 0xc6
    1438:	009b      	lsls	r3, r3, #2
    143a:	4939      	ldr	r1, [pc, #228]	; (1520 <flight+0x3a8>)
    143c:	58e0      	ldr	r0, [r4, r3]
    143e:	47a8      	blx	r5
    1440:	e02a      	b.n	1498 <flight+0x320>

        break;
    case flightDrogue:


        if (my_altimeter->myFlashMemory.pageReady) {
    1442:	4b44      	ldr	r3, [pc, #272]	; (1554 <flight+0x3dc>)
    1444:	5ce2      	ldrb	r2, [r4, r3]
    1446:	2a00      	cmp	r2, #0
    1448:	d020      	beq.n	148c <flight+0x314>
            my_altimeter->myFlashMemory.pageReady = false;
    144a:	2200      	movs	r2, #0
    144c:	54e2      	strb	r2, [r4, r3]
    144e:	e00d      	b.n	146c <flight+0x2f4>


        break;
    case flightTest:

        if (writeLog) {
    1450:	4b39      	ldr	r3, [pc, #228]	; (1538 <flight+0x3c0>)
    1452:	781a      	ldrb	r2, [r3, #0]
    1454:	2a00      	cmp	r2, #0
    1456:	d019      	beq.n	148c <flight+0x314>
            writeLog = false;
    1458:	2500      	movs	r5, #0
            logSensors(my_altimeter);
    145a:	0020      	movs	r0, r4

        break;
    case flightTest:

        if (writeLog) {
            writeLog = false;
    145c:	701d      	strb	r5, [r3, #0]
            logSensors(my_altimeter);
    145e:	4b3c      	ldr	r3, [pc, #240]	; (1550 <flight+0x3d8>)
    1460:	4798      	blx	r3
            if (my_altimeter->myFlashMemory.pageReady) {
    1462:	4b3c      	ldr	r3, [pc, #240]	; (1554 <flight+0x3dc>)
    1464:	5ce2      	ldrb	r2, [r4, r3]
    1466:	42aa      	cmp	r2, r5
    1468:	d010      	beq.n	148c <flight+0x314>
                my_altimeter->myFlashMemory.pageReady = false;
    146a:	54e5      	strb	r5, [r4, r3]
    146c:	2280      	movs	r2, #128	; 0x80
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(my_altimeter->myFlashMemory.currentAddress,my_altimeter->myFlashMemory.pageToWrite);
    146e:	0025      	movs	r5, r4
    1470:	0021      	movs	r1, r4
    1472:	4b32      	ldr	r3, [pc, #200]	; (153c <flight+0x3c4>)
    1474:	0352      	lsls	r2, r2, #13
    1476:	61da      	str	r2, [r3, #28]
    1478:	35fc      	adds	r5, #252	; 0xfc
    147a:	3111      	adds	r1, #17
    147c:	4b36      	ldr	r3, [pc, #216]	; (1558 <flight+0x3e0>)
    147e:	31ff      	adds	r1, #255	; 0xff
    1480:	68e8      	ldr	r0, [r5, #12]
    1482:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = (my_altimeter->myFlashMemory.currentAddress + 0x100);
    1484:	68eb      	ldr	r3, [r5, #12]
    1486:	3301      	adds	r3, #1
    1488:	33ff      	adds	r3, #255	; 0xff
    148a:	60eb      	str	r3, [r5, #12]
            }
        }
        if (my_altimeter->myVoltages.batFloat < 3.5) {
    148c:	23c6      	movs	r3, #198	; 0xc6
    148e:	009b      	lsls	r3, r3, #2
    1490:	58e0      	ldr	r0, [r4, r3]
    1492:	4923      	ldr	r1, [pc, #140]	; (1520 <flight+0x3a8>)
    1494:	4b23      	ldr	r3, [pc, #140]	; (1524 <flight+0x3ac>)
    1496:	4798      	blx	r3
    1498:	2800      	cmp	r0, #0
    149a:	d020      	beq.n	14de <flight+0x366>
            my_altimeter->myFlightState = flightIdle;
    149c:	2301      	movs	r3, #1
    149e:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    14a0:	4b2f      	ldr	r3, [pc, #188]	; (1560 <flight+0x3e8>)
    14a2:	4798      	blx	r3
            writeFlightEndAddress(my_altimeter);
    14a4:	0020      	movs	r0, r4
    14a6:	4b2f      	ldr	r3, [pc, #188]	; (1564 <flight+0x3ec>)
    14a8:	4798      	blx	r3
            delay_ms(80);
    14aa:	4c2f      	ldr	r4, [pc, #188]	; (1568 <flight+0x3f0>)
    14ac:	2050      	movs	r0, #80	; 0x50
    14ae:	47a0      	blx	r4
            beep(300);
    14b0:	2096      	movs	r0, #150	; 0x96
    14b2:	4d2a      	ldr	r5, [pc, #168]	; (155c <flight+0x3e4>)
    14b4:	0040      	lsls	r0, r0, #1
    14b6:	47a8      	blx	r5
            delay_ms(80);
    14b8:	2050      	movs	r0, #80	; 0x50
    14ba:	47a0      	blx	r4
            beep(300);
    14bc:	2096      	movs	r0, #150	; 0x96
    14be:	0040      	lsls	r0, r0, #1
    14c0:	47a8      	blx	r5
            delay_ms(80);
    14c2:	2050      	movs	r0, #80	; 0x50
    14c4:	47a0      	blx	r4
            beep(300);
    14c6:	2096      	movs	r0, #150	; 0x96
    14c8:	0040      	lsls	r0, r0, #1
    14ca:	47a8      	blx	r5
            delay_ms(80);
    14cc:	2050      	movs	r0, #80	; 0x50
    14ce:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    14d0:	2280      	movs	r2, #128	; 0x80
    14d2:	4b1a      	ldr	r3, [pc, #104]	; (153c <flight+0x3c4>)
    14d4:	0392      	lsls	r2, r2, #14
    14d6:	615a      	str	r2, [r3, #20]
    14d8:	2280      	movs	r2, #128	; 0x80
    14da:	0352      	lsls	r2, r2, #13
    14dc:	615a      	str	r2, [r3, #20]

        break;
    }


}
    14de:	b005      	add	sp, #20
    14e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	9999999a 	.word	0x9999999a
    14e8:	00005471 	.word	0x00005471
    14ec:	3fe99999 	.word	0x3fe99999
    14f0:	000061ad 	.word	0x000061ad
    14f4:	3fc99999 	.word	0x3fc99999
    14f8:	000045d1 	.word	0x000045d1
    14fc:	0000613d 	.word	0x0000613d
    1500:	3fe00000 	.word	0x3fe00000
    1504:	00003e2d 	.word	0x00003e2d
    1508:	00001015 	.word	0x00001015
    150c:	00002710 	.word	0x00002710
    1510:	00002381 	.word	0x00002381
    1514:	0000214d 	.word	0x0000214d
    1518:	00000ded 	.word	0x00000ded
    151c:	00002995 	.word	0x00002995
    1520:	40600000 	.word	0x40600000
    1524:	00003d55 	.word	0x00003d55
    1528:	42001400 	.word	0x42001400
    152c:	00002985 	.word	0x00002985
    1530:	05fa0004 	.word	0x05fa0004
    1534:	e000ed00 	.word	0xe000ed00
    1538:	200004d1 	.word	0x200004d1
    153c:	41004400 	.word	0x41004400
    1540:	33333333 	.word	0x33333333
    1544:	3fc33333 	.word	0x3fc33333
    1548:	00003d09 	.word	0x00003d09
    154c:	000021ad 	.word	0x000021ad
    1550:	000021f9 	.word	0x000021f9
    1554:	00000311 	.word	0x00000311
    1558:	000002cd 	.word	0x000002cd
    155c:	00000db1 	.word	0x00000db1
    1560:	000001e5 	.word	0x000001e5
    1564:	0000234d 	.word	0x0000234d
    1568:	00000fc9 	.word	0x00000fc9

0000156c <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    156c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    156e:	2500      	movs	r5, #0
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1570:	4cdb      	ldr	r4, [pc, #876]	; (18e0 <computeKalmanGains+0x374>)
    1572:	4adc      	ldr	r2, [pc, #880]	; (18e4 <computeKalmanGains+0x378>)
    1574:	4bdc      	ldr	r3, [pc, #880]	; (18e8 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1576:	b0d9      	sub	sp, #356	; 0x164
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1578:	60a2      	str	r2, [r4, #8]
    157a:	60e3      	str	r3, [r4, #12]
    phi[1][2]    = dt;
    157c:	62a2      	str	r2, [r4, #40]	; 0x28
    157e:	62e3      	str	r3, [r4, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1580:	4ada      	ldr	r2, [pc, #872]	; (18ec <computeKalmanGains+0x380>)
    1582:	4bdb      	ldr	r3, [pc, #876]	; (18f0 <computeKalmanGains+0x384>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1584:	903f      	str	r0, [sp, #252]	; 0xfc
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1586:	6122      	str	r2, [r4, #16]
    1588:	6163      	str	r3, [r4, #20]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    158a:	48d6      	ldr	r0, [pc, #856]	; (18e4 <computeKalmanGains+0x378>)
    158c:	49d9      	ldr	r1, [pc, #868]	; (18f4 <computeKalmanGains+0x388>)
            kgain[i][j] = 1.0;
    158e:	2200      	movs	r2, #0
    1590:	ae4c      	add	r6, sp, #304	; 0x130
    1592:	ab40      	add	r3, sp, #256	; 0x100
    1594:	1977      	adds	r7, r6, r5
    1596:	18ee      	adds	r6, r5, r3
    1598:	4bd7      	ldr	r3, [pc, #860]	; (18f8 <computeKalmanGains+0x38c>)
    159a:	3510      	adds	r5, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    159c:	6038      	str	r0, [r7, #0]
    159e:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    15a0:	6032      	str	r2, [r6, #0]
    15a2:	6073      	str	r3, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    15a4:	60b8      	str	r0, [r7, #8]
    15a6:	60f9      	str	r1, [r7, #12]
            kgain[i][j] = 1.0;
    15a8:	60b2      	str	r2, [r6, #8]
    15aa:	60f3      	str	r3, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    15ac:	2d30      	cmp	r5, #48	; 0x30
    15ae:	d1ee      	bne.n	158e <computeKalmanGains+0x22>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    15b0:	6822      	ldr	r2, [r4, #0]
    15b2:	6863      	ldr	r3, [r4, #4]
    15b4:	921a      	str	r2, [sp, #104]	; 0x68
    15b6:	931b      	str	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15b8:	69a2      	ldr	r2, [r4, #24]
    15ba:	69e3      	ldr	r3, [r4, #28]
    15bc:	921c      	str	r2, [sp, #112]	; 0x70
    15be:	931d      	str	r3, [sp, #116]	; 0x74
    15c0:	6a22      	ldr	r2, [r4, #32]
    15c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15c4:	921e      	str	r2, [sp, #120]	; 0x78
    15c6:	931f      	str	r3, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    15ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    15cc:	9220      	str	r2, [sp, #128]	; 0x80
    15ce:	9321      	str	r3, [sp, #132]	; 0x84
    15d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    15d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    15d4:	9222      	str	r2, [sp, #136]	; 0x88
    15d6:	9323      	str	r3, [sp, #140]	; 0x8c
    15d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    15da:	6c63      	ldr	r3, [r4, #68]	; 0x44
    15dc:	9224      	str	r2, [sp, #144]	; 0x90
    15de:	9325      	str	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    15e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    15e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    15e4:	9238      	str	r2, [sp, #224]	; 0xe0
    15e6:	9339      	str	r3, [sp, #228]	; 0xe4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    15e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    15ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    15ec:	923a      	str	r2, [sp, #232]	; 0xe8
    15ee:	933b      	str	r3, [sp, #236]	; 0xec
    15f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    15f2:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    15f4:	933c      	str	r3, [sp, #240]	; 0xf0
    15f6:	943d      	str	r4, [sp, #244]	; 0xf4
    15f8:	2300      	movs	r3, #0
    15fa:	4cc0      	ldr	r4, [pc, #768]	; (18fc <computeKalmanGains+0x390>)
    15fc:	9302      	str	r3, [sp, #8]
    15fe:	9403      	str	r4, [sp, #12]
    1600:	2300      	movs	r3, #0
    1602:	2400      	movs	r4, #0
    1604:	9312      	str	r3, [sp, #72]	; 0x48
    1606:	9413      	str	r4, [sp, #76]	; 0x4c
    1608:	9310      	str	r3, [sp, #64]	; 0x40
    160a:	9411      	str	r4, [sp, #68]	; 0x44
    160c:	9304      	str	r3, [sp, #16]
    160e:	9405      	str	r4, [sp, #20]
    1610:	2300      	movs	r3, #0
    1612:	4cba      	ldr	r4, [pc, #744]	; (18fc <computeKalmanGains+0x390>)
    1614:	930e      	str	r3, [sp, #56]	; 0x38
    1616:	940f      	str	r4, [sp, #60]	; 0x3c
    1618:	2300      	movs	r3, #0
    161a:	2400      	movs	r4, #0
    161c:	9308      	str	r3, [sp, #32]
    161e:	9409      	str	r4, [sp, #36]	; 0x24
    1620:	930c      	str	r3, [sp, #48]	; 0x30
    1622:	940d      	str	r4, [sp, #52]	; 0x34
    1624:	930a      	str	r3, [sp, #40]	; 0x28
    1626:	940b      	str	r4, [sp, #44]	; 0x2c
    1628:	2480      	movs	r4, #128	; 0x80
    162a:	2300      	movs	r3, #0
    162c:	05e4      	lsls	r4, r4, #23
    162e:	9306      	str	r3, [sp, #24]
    1630:	9407      	str	r4, [sp, #28]
    1632:	2300      	movs	r3, #0
    1634:	932e      	str	r3, [sp, #184]	; 0xb8

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1636:	4db2      	ldr	r5, [pc, #712]	; (1900 <computeKalmanGains+0x394>)
    1638:	9a06      	ldr	r2, [sp, #24]
    163a:	9b07      	ldr	r3, [sp, #28]
    163c:	981a      	ldr	r0, [sp, #104]	; 0x68
    163e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1640:	47a8      	blx	r5
    1642:	4aa8      	ldr	r2, [pc, #672]	; (18e4 <computeKalmanGains+0x378>)
    1644:	0006      	movs	r6, r0
    1646:	000f      	movs	r7, r1
    1648:	9808      	ldr	r0, [sp, #32]
    164a:	9909      	ldr	r1, [sp, #36]	; 0x24
    164c:	4ba6      	ldr	r3, [pc, #664]	; (18e8 <computeKalmanGains+0x37c>)
    164e:	47a8      	blx	r5
    1650:	4cac      	ldr	r4, [pc, #688]	; (1904 <computeKalmanGains+0x398>)
    1652:	0002      	movs	r2, r0
    1654:	000b      	movs	r3, r1
    1656:	0030      	movs	r0, r6
    1658:	0039      	movs	r1, r7
    165a:	47a0      	blx	r4
    165c:	4aa3      	ldr	r2, [pc, #652]	; (18ec <computeKalmanGains+0x380>)
    165e:	0006      	movs	r6, r0
    1660:	000f      	movs	r7, r1
    1662:	9810      	ldr	r0, [sp, #64]	; 0x40
    1664:	9911      	ldr	r1, [sp, #68]	; 0x44
    1666:	4ba2      	ldr	r3, [pc, #648]	; (18f0 <computeKalmanGains+0x384>)
    1668:	47a8      	blx	r5
    166a:	0002      	movs	r2, r0
    166c:	000b      	movs	r3, r1
    166e:	0030      	movs	r0, r6
    1670:	0039      	movs	r1, r7
    1672:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1678:	9016      	str	r0, [sp, #88]	; 0x58
    167a:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    167c:	981a      	ldr	r0, [sp, #104]	; 0x68
    167e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1680:	47a8      	blx	r5
    1682:	4a98      	ldr	r2, [pc, #608]	; (18e4 <computeKalmanGains+0x378>)
    1684:	0006      	movs	r6, r0
    1686:	000f      	movs	r7, r1
    1688:	980e      	ldr	r0, [sp, #56]	; 0x38
    168a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    168c:	4b96      	ldr	r3, [pc, #600]	; (18e8 <computeKalmanGains+0x37c>)
    168e:	47a8      	blx	r5
    1690:	0002      	movs	r2, r0
    1692:	000b      	movs	r3, r1
    1694:	0030      	movs	r0, r6
    1696:	0039      	movs	r1, r7
    1698:	47a0      	blx	r4
    169a:	4a94      	ldr	r2, [pc, #592]	; (18ec <computeKalmanGains+0x380>)
    169c:	0006      	movs	r6, r0
    169e:	000f      	movs	r7, r1
    16a0:	9812      	ldr	r0, [sp, #72]	; 0x48
    16a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    16a4:	4b92      	ldr	r3, [pc, #584]	; (18f0 <computeKalmanGains+0x384>)
    16a6:	47a8      	blx	r5
    16a8:	0002      	movs	r2, r0
    16aa:	000b      	movs	r3, r1
    16ac:	0030      	movs	r0, r6
    16ae:	0039      	movs	r1, r7
    16b0:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    16b6:	9000      	str	r0, [sp, #0]
    16b8:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16ba:	981a      	ldr	r0, [sp, #104]	; 0x68
    16bc:	991b      	ldr	r1, [sp, #108]	; 0x6c
    16be:	47a8      	blx	r5
    16c0:	4a88      	ldr	r2, [pc, #544]	; (18e4 <computeKalmanGains+0x378>)
    16c2:	0006      	movs	r6, r0
    16c4:	000f      	movs	r7, r1
    16c6:	9804      	ldr	r0, [sp, #16]
    16c8:	9905      	ldr	r1, [sp, #20]
    16ca:	4b87      	ldr	r3, [pc, #540]	; (18e8 <computeKalmanGains+0x37c>)
    16cc:	47a8      	blx	r5
    16ce:	0002      	movs	r2, r0
    16d0:	000b      	movs	r3, r1
    16d2:	0030      	movs	r0, r6
    16d4:	0039      	movs	r1, r7
    16d6:	47a0      	blx	r4
    16d8:	4a84      	ldr	r2, [pc, #528]	; (18ec <computeKalmanGains+0x380>)
    16da:	0006      	movs	r6, r0
    16dc:	000f      	movs	r7, r1
    16de:	9802      	ldr	r0, [sp, #8]
    16e0:	9903      	ldr	r1, [sp, #12]
    16e2:	4b83      	ldr	r3, [pc, #524]	; (18f0 <computeKalmanGains+0x384>)
    16e4:	47a8      	blx	r5
    16e6:	0002      	movs	r2, r0
    16e8:	000b      	movs	r3, r1
    16ea:	0030      	movs	r0, r6
    16ec:	0039      	movs	r1, r7
    16ee:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    16f0:	9a06      	ldr	r2, [sp, #24]
    16f2:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    16f4:	9014      	str	r0, [sp, #80]	; 0x50
    16f6:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    16f8:	981c      	ldr	r0, [sp, #112]	; 0x70
    16fa:	991d      	ldr	r1, [sp, #116]	; 0x74
    16fc:	47a8      	blx	r5
    16fe:	9a08      	ldr	r2, [sp, #32]
    1700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1702:	0006      	movs	r6, r0
    1704:	000f      	movs	r7, r1
    1706:	981e      	ldr	r0, [sp, #120]	; 0x78
    1708:	991f      	ldr	r1, [sp, #124]	; 0x7c
    170a:	47a8      	blx	r5
    170c:	0002      	movs	r2, r0
    170e:	000b      	movs	r3, r1
    1710:	0030      	movs	r0, r6
    1712:	0039      	movs	r1, r7
    1714:	47a0      	blx	r4
    1716:	4a73      	ldr	r2, [pc, #460]	; (18e4 <computeKalmanGains+0x378>)
    1718:	0006      	movs	r6, r0
    171a:	000f      	movs	r7, r1
    171c:	9810      	ldr	r0, [sp, #64]	; 0x40
    171e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1720:	4b71      	ldr	r3, [pc, #452]	; (18e8 <computeKalmanGains+0x37c>)
    1722:	47a8      	blx	r5
    1724:	0002      	movs	r2, r0
    1726:	000b      	movs	r3, r1
    1728:	0030      	movs	r0, r6
    172a:	0039      	movs	r1, r7
    172c:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    172e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1732:	9018      	str	r0, [sp, #96]	; 0x60
    1734:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1736:	981c      	ldr	r0, [sp, #112]	; 0x70
    1738:	991d      	ldr	r1, [sp, #116]	; 0x74
    173a:	47a8      	blx	r5
    173c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    173e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1740:	0006      	movs	r6, r0
    1742:	000f      	movs	r7, r1
    1744:	981e      	ldr	r0, [sp, #120]	; 0x78
    1746:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1748:	47a8      	blx	r5
    174a:	0002      	movs	r2, r0
    174c:	000b      	movs	r3, r1
    174e:	0030      	movs	r0, r6
    1750:	0039      	movs	r1, r7
    1752:	47a0      	blx	r4
    1754:	4a63      	ldr	r2, [pc, #396]	; (18e4 <computeKalmanGains+0x378>)
    1756:	0006      	movs	r6, r0
    1758:	000f      	movs	r7, r1
    175a:	9812      	ldr	r0, [sp, #72]	; 0x48
    175c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    175e:	4b62      	ldr	r3, [pc, #392]	; (18e8 <computeKalmanGains+0x37c>)
    1760:	47a8      	blx	r5
    1762:	0002      	movs	r2, r0
    1764:	000b      	movs	r3, r1
    1766:	0030      	movs	r0, r6
    1768:	0039      	movs	r1, r7
    176a:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    176c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    176e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1770:	9026      	str	r0, [sp, #152]	; 0x98
    1772:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1774:	981c      	ldr	r0, [sp, #112]	; 0x70
    1776:	991d      	ldr	r1, [sp, #116]	; 0x74
    1778:	47a8      	blx	r5
    177a:	9a04      	ldr	r2, [sp, #16]
    177c:	9b05      	ldr	r3, [sp, #20]
    177e:	0006      	movs	r6, r0
    1780:	000f      	movs	r7, r1
    1782:	981e      	ldr	r0, [sp, #120]	; 0x78
    1784:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1786:	47a8      	blx	r5
    1788:	0002      	movs	r2, r0
    178a:	000b      	movs	r3, r1
    178c:	0030      	movs	r0, r6
    178e:	0039      	movs	r1, r7
    1790:	47a0      	blx	r4
    1792:	4a54      	ldr	r2, [pc, #336]	; (18e4 <computeKalmanGains+0x378>)
    1794:	0006      	movs	r6, r0
    1796:	000f      	movs	r7, r1
    1798:	9802      	ldr	r0, [sp, #8]
    179a:	9903      	ldr	r1, [sp, #12]
    179c:	4b52      	ldr	r3, [pc, #328]	; (18e8 <computeKalmanGains+0x37c>)
    179e:	47a8      	blx	r5
    17a0:	0002      	movs	r2, r0
    17a2:	000b      	movs	r3, r1
    17a4:	0030      	movs	r0, r6
    17a6:	0039      	movs	r1, r7
    17a8:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17aa:	9a06      	ldr	r2, [sp, #24]
    17ac:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    17ae:	9028      	str	r0, [sp, #160]	; 0xa0
    17b0:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17b2:	9820      	ldr	r0, [sp, #128]	; 0x80
    17b4:	9921      	ldr	r1, [sp, #132]	; 0x84
    17b6:	47a8      	blx	r5
    17b8:	9a08      	ldr	r2, [sp, #32]
    17ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17bc:	0006      	movs	r6, r0
    17be:	000f      	movs	r7, r1
    17c0:	9822      	ldr	r0, [sp, #136]	; 0x88
    17c2:	9923      	ldr	r1, [sp, #140]	; 0x8c
    17c4:	47a8      	blx	r5
    17c6:	0002      	movs	r2, r0
    17c8:	000b      	movs	r3, r1
    17ca:	0030      	movs	r0, r6
    17cc:	0039      	movs	r1, r7
    17ce:	47a0      	blx	r4
    17d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    17d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    17d4:	0006      	movs	r6, r0
    17d6:	000f      	movs	r7, r1
    17d8:	9824      	ldr	r0, [sp, #144]	; 0x90
    17da:	9925      	ldr	r1, [sp, #148]	; 0x94
    17dc:	47a8      	blx	r5
    17de:	0002      	movs	r2, r0
    17e0:	000b      	movs	r3, r1
    17e2:	0030      	movs	r0, r6
    17e4:	0039      	movs	r1, r7
    17e6:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    17e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17ec:	9010      	str	r0, [sp, #64]	; 0x40
    17ee:	9111      	str	r1, [sp, #68]	; 0x44
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    17f0:	9820      	ldr	r0, [sp, #128]	; 0x80
    17f2:	9921      	ldr	r1, [sp, #132]	; 0x84
    17f4:	47a8      	blx	r5
    17f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    17f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17fa:	0006      	movs	r6, r0
    17fc:	000f      	movs	r7, r1
    17fe:	9822      	ldr	r0, [sp, #136]	; 0x88
    1800:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1802:	47a8      	blx	r5
    1804:	0002      	movs	r2, r0
    1806:	000b      	movs	r3, r1
    1808:	0030      	movs	r0, r6
    180a:	0039      	movs	r1, r7
    180c:	47a0      	blx	r4
    180e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1812:	0006      	movs	r6, r0
    1814:	000f      	movs	r7, r1
    1816:	9824      	ldr	r0, [sp, #144]	; 0x90
    1818:	9925      	ldr	r1, [sp, #148]	; 0x94
    181a:	47a8      	blx	r5
    181c:	0002      	movs	r2, r0
    181e:	000b      	movs	r3, r1
    1820:	0030      	movs	r0, r6
    1822:	0039      	movs	r1, r7
    1824:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    182a:	9006      	str	r0, [sp, #24]
    182c:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    182e:	9820      	ldr	r0, [sp, #128]	; 0x80
    1830:	9921      	ldr	r1, [sp, #132]	; 0x84
    1832:	47a8      	blx	r5
    1834:	9a04      	ldr	r2, [sp, #16]
    1836:	9b05      	ldr	r3, [sp, #20]
    1838:	0006      	movs	r6, r0
    183a:	000f      	movs	r7, r1
    183c:	9822      	ldr	r0, [sp, #136]	; 0x88
    183e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1840:	47a8      	blx	r5
    1842:	0002      	movs	r2, r0
    1844:	000b      	movs	r3, r1
    1846:	0030      	movs	r0, r6
    1848:	0039      	movs	r1, r7
    184a:	47a0      	blx	r4
    184c:	9a02      	ldr	r2, [sp, #8]
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	0006      	movs	r6, r0
    1852:	000f      	movs	r7, r1
    1854:	9824      	ldr	r0, [sp, #144]	; 0x90
    1856:	9925      	ldr	r1, [sp, #148]	; 0x94
    1858:	47a8      	blx	r5
    185a:	0002      	movs	r2, r0
    185c:	000b      	movs	r3, r1
    185e:	0030      	movs	r0, r6
    1860:	0039      	movs	r1, r7
    1862:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1864:	4a1f      	ldr	r2, [pc, #124]	; (18e4 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1866:	9002      	str	r0, [sp, #8]
    1868:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    186a:	9800      	ldr	r0, [sp, #0]
    186c:	9901      	ldr	r1, [sp, #4]
    186e:	4b1e      	ldr	r3, [pc, #120]	; (18e8 <computeKalmanGains+0x37c>)
    1870:	47a8      	blx	r5
    1872:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1876:	47a0      	blx	r4
    1878:	4a1c      	ldr	r2, [pc, #112]	; (18ec <computeKalmanGains+0x380>)
    187a:	0006      	movs	r6, r0
    187c:	000f      	movs	r7, r1
    187e:	9814      	ldr	r0, [sp, #80]	; 0x50
    1880:	9915      	ldr	r1, [sp, #84]	; 0x54
    1882:	4b1b      	ldr	r3, [pc, #108]	; (18f0 <computeKalmanGains+0x384>)
    1884:	47a8      	blx	r5
    1886:	0002      	movs	r2, r0
    1888:	000b      	movs	r3, r1
    188a:	0030      	movs	r0, r6
    188c:	0039      	movs	r1, r7
    188e:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1890:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1892:	9008      	str	r0, [sp, #32]
    1894:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1896:	9816      	ldr	r0, [sp, #88]	; 0x58
    1898:	9917      	ldr	r1, [sp, #92]	; 0x5c
    189a:	2300      	movs	r3, #0
    189c:	47a8      	blx	r5
    189e:	0006      	movs	r6, r0
    18a0:	000f      	movs	r7, r1
    18a2:	0002      	movs	r2, r0
    18a4:	000b      	movs	r3, r1
    18a6:	9800      	ldr	r0, [sp, #0]
    18a8:	9901      	ldr	r1, [sp, #4]
    18aa:	47a0      	blx	r4
    18ac:	4a0d      	ldr	r2, [pc, #52]	; (18e4 <computeKalmanGains+0x378>)
    18ae:	9004      	str	r0, [sp, #16]
    18b0:	9105      	str	r1, [sp, #20]
    18b2:	9814      	ldr	r0, [sp, #80]	; 0x50
    18b4:	9915      	ldr	r1, [sp, #84]	; 0x54
    18b6:	4b0c      	ldr	r3, [pc, #48]	; (18e8 <computeKalmanGains+0x37c>)
    18b8:	47a8      	blx	r5
    18ba:	0002      	movs	r2, r0
    18bc:	000b      	movs	r3, r1
    18be:	9804      	ldr	r0, [sp, #16]
    18c0:	9905      	ldr	r1, [sp, #20]
    18c2:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    18c4:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    18c6:	9030      	str	r0, [sp, #192]	; 0xc0
    18c8:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    18ca:	9800      	ldr	r0, [sp, #0]
    18cc:	9901      	ldr	r1, [sp, #4]
    18ce:	2300      	movs	r3, #0
    18d0:	47a8      	blx	r5
    18d2:	0032      	movs	r2, r6
    18d4:	003b      	movs	r3, r7
    18d6:	47a0      	blx	r4
    18d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    18da:	9b15      	ldr	r3, [sp, #84]	; 0x54
    18dc:	47a0      	blx	r4
    18de:	e013      	b.n	1908 <computeKalmanGains+0x39c>
    18e0:	20000010 	.word	0x20000010
    18e4:	d2f1a9fc 	.word	0xd2f1a9fc
    18e8:	3f80624d 	.word	0x3f80624d
    18ec:	a0b5ed8d 	.word	0xa0b5ed8d
    18f0:	3f00c6f7 	.word	0x3f00c6f7
    18f4:	3f50624d 	.word	0x3f50624d
    18f8:	3ff00000 	.word	0x3ff00000
    18fc:	40220000 	.word	0x40220000
    1900:	00005471 	.word	0x00005471
    1904:	000045d1 	.word	0x000045d1
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1908:	4ada      	ldr	r2, [pc, #872]	; (1c74 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    190a:	9114      	str	r1, [sp, #80]	; 0x50
    190c:	9004      	str	r0, [sp, #16]
    190e:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1910:	4bd9      	ldr	r3, [pc, #868]	; (1c78 <computeKalmanGains+0x70c>)
    1912:	9826      	ldr	r0, [sp, #152]	; 0x98
    1914:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1916:	47a8      	blx	r5
    1918:	9a18      	ldr	r2, [sp, #96]	; 0x60
    191a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    191c:	47a0      	blx	r4
    191e:	4ad7      	ldr	r2, [pc, #860]	; (1c7c <computeKalmanGains+0x710>)
    1920:	0006      	movs	r6, r0
    1922:	000f      	movs	r7, r1
    1924:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1926:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1928:	4bd5      	ldr	r3, [pc, #852]	; (1c80 <computeKalmanGains+0x714>)
    192a:	47a8      	blx	r5
    192c:	0002      	movs	r2, r0
    192e:	000b      	movs	r3, r1
    1930:	0030      	movs	r0, r6
    1932:	0039      	movs	r1, r7
    1934:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1936:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1938:	902a      	str	r0, [sp, #168]	; 0xa8
    193a:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    193c:	9818      	ldr	r0, [sp, #96]	; 0x60
    193e:	9919      	ldr	r1, [sp, #100]	; 0x64
    1940:	2300      	movs	r3, #0
    1942:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1944:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1946:	9032      	str	r0, [sp, #200]	; 0xc8
    1948:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    194a:	9826      	ldr	r0, [sp, #152]	; 0x98
    194c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    194e:	2300      	movs	r3, #0
    1950:	47a8      	blx	r5
    1952:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1954:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1956:	47a0      	blx	r4
    1958:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    195a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    195c:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    195e:	4ac5      	ldr	r2, [pc, #788]	; (1c74 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1960:	902c      	str	r0, [sp, #176]	; 0xb0
    1962:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1964:	9806      	ldr	r0, [sp, #24]
    1966:	9907      	ldr	r1, [sp, #28]
    1968:	4bc3      	ldr	r3, [pc, #780]	; (1c78 <computeKalmanGains+0x70c>)
    196a:	47a8      	blx	r5
    196c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    196e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1970:	47a0      	blx	r4
    1972:	4ac2      	ldr	r2, [pc, #776]	; (1c7c <computeKalmanGains+0x710>)
    1974:	0006      	movs	r6, r0
    1976:	000f      	movs	r7, r1
    1978:	9802      	ldr	r0, [sp, #8]
    197a:	9903      	ldr	r1, [sp, #12]
    197c:	4bc0      	ldr	r3, [pc, #768]	; (1c80 <computeKalmanGains+0x714>)
    197e:	47a8      	blx	r5
    1980:	0002      	movs	r2, r0
    1982:	000b      	movs	r3, r1
    1984:	0030      	movs	r0, r6
    1986:	0039      	movs	r1, r7
    1988:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    198a:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    198c:	9000      	str	r0, [sp, #0]
    198e:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1990:	9810      	ldr	r0, [sp, #64]	; 0x40
    1992:	9911      	ldr	r1, [sp, #68]	; 0x44
    1994:	2300      	movs	r3, #0
    1996:	47a8      	blx	r5
    1998:	0006      	movs	r6, r0
    199a:	000f      	movs	r7, r1
    199c:	0002      	movs	r2, r0
    199e:	000b      	movs	r3, r1
    19a0:	9806      	ldr	r0, [sp, #24]
    19a2:	9907      	ldr	r1, [sp, #28]
    19a4:	47a0      	blx	r4
    19a6:	4ab3      	ldr	r2, [pc, #716]	; (1c74 <computeKalmanGains+0x708>)
    19a8:	900a      	str	r0, [sp, #40]	; 0x28
    19aa:	910b      	str	r1, [sp, #44]	; 0x2c
    19ac:	9802      	ldr	r0, [sp, #8]
    19ae:	9903      	ldr	r1, [sp, #12]
    19b0:	4bb1      	ldr	r3, [pc, #708]	; (1c78 <computeKalmanGains+0x70c>)
    19b2:	47a8      	blx	r5
    19b4:	0002      	movs	r2, r0
    19b6:	000b      	movs	r3, r1
    19b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    19ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    19bc:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    19be:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    19c0:	9012      	str	r0, [sp, #72]	; 0x48
    19c2:	9113      	str	r1, [sp, #76]	; 0x4c
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    19c4:	9806      	ldr	r0, [sp, #24]
    19c6:	9907      	ldr	r1, [sp, #28]
    19c8:	2300      	movs	r3, #0
    19ca:	47a8      	blx	r5
    19cc:	0032      	movs	r2, r6
    19ce:	003b      	movs	r3, r7
    19d0:	47a0      	blx	r4
    19d2:	9a02      	ldr	r2, [sp, #8]
    19d4:	9b03      	ldr	r3, [sp, #12]
    19d6:	47a0      	blx	r4
    19d8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    19da:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    19dc:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    19de:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    19e0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    19e2:	9002      	str	r0, [sp, #8]
    19e4:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    19e6:	9808      	ldr	r0, [sp, #32]
    19e8:	9909      	ldr	r1, [sp, #36]	; 0x24
    19ea:	47a0      	blx	r4
    19ec:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    19ee:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    19f0:	900a      	str	r0, [sp, #40]	; 0x28
    19f2:	910b      	str	r1, [sp, #44]	; 0x2c
    19f4:	9802      	ldr	r0, [sp, #8]
    19f6:	9903      	ldr	r1, [sp, #12]
    19f8:	47a0      	blx	r4
    19fa:	9a00      	ldr	r2, [sp, #0]
    19fc:	9b01      	ldr	r3, [sp, #4]
    19fe:	900c      	str	r0, [sp, #48]	; 0x30
    1a00:	910d      	str	r1, [sp, #52]	; 0x34
    1a02:	9804      	ldr	r0, [sp, #16]
    1a04:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a06:	47a8      	blx	r5
    1a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a0c:	900e      	str	r0, [sp, #56]	; 0x38
    1a0e:	910f      	str	r1, [sp, #60]	; 0x3c
    1a10:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a14:	47a8      	blx	r5
    1a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a1a:	4e9a      	ldr	r6, [pc, #616]	; (1c84 <computeKalmanGains+0x718>)
    1a1c:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a22:	9006      	str	r0, [sp, #24]
    1a24:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a26:	9808      	ldr	r0, [sp, #32]
    1a28:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a2a:	47a8      	blx	r5
    1a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a30:	47b0      	blx	r6
    1a32:	9a06      	ldr	r2, [sp, #24]
    1a34:	9b07      	ldr	r3, [sp, #28]
    1a36:	4e94      	ldr	r6, [pc, #592]	; (1c88 <computeKalmanGains+0x71c>)
    1a38:	47b0      	blx	r6
    1a3a:	0002      	movs	r2, r0
    1a3c:	000b      	movs	r3, r1
    1a3e:	9240      	str	r2, [sp, #256]	; 0x100
    1a40:	9341      	str	r3, [sp, #260]	; 0x104

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a42:	2280      	movs	r2, #128	; 0x80
    1a44:	0612      	lsls	r2, r2, #24
    1a46:	4694      	mov	ip, r2
    1a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1a4a:	9a04      	ldr	r2, [sp, #16]
    1a4c:	4463      	add	r3, ip
    1a4e:	932f      	str	r3, [sp, #188]	; 0xbc
    1a50:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1a52:	9034      	str	r0, [sp, #208]	; 0xd0
    1a54:	9135      	str	r1, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a56:	9808      	ldr	r0, [sp, #32]
    1a58:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a5a:	47a8      	blx	r5
    1a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a60:	0006      	movs	r6, r0
    1a62:	000f      	movs	r7, r1
    1a64:	9804      	ldr	r0, [sp, #16]
    1a66:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a68:	47a8      	blx	r5
    1a6a:	0002      	movs	r2, r0
    1a6c:	000b      	movs	r3, r1
    1a6e:	0030      	movs	r0, r6
    1a70:	0039      	movs	r1, r7
    1a72:	47a0      	blx	r4
    1a74:	9a06      	ldr	r2, [sp, #24]
    1a76:	9b07      	ldr	r3, [sp, #28]
    1a78:	4e83      	ldr	r6, [pc, #524]	; (1c88 <computeKalmanGains+0x71c>)
    1a7a:	47b0      	blx	r6
    1a7c:	0002      	movs	r2, r0
    1a7e:	000b      	movs	r3, r1
    1a80:	900e      	str	r0, [sp, #56]	; 0x38
    1a82:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1a84:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1a86:	992b      	ldr	r1, [sp, #172]	; 0xac
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1a88:	9242      	str	r2, [sp, #264]	; 0x108
    1a8a:	9343      	str	r3, [sp, #268]	; 0x10c

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a90:	47a8      	blx	r5
    1a92:	9a00      	ldr	r2, [sp, #0]
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	0006      	movs	r6, r0
    1a98:	000f      	movs	r7, r1
    1a9a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1a9c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1a9e:	47a8      	blx	r5
    1aa0:	0002      	movs	r2, r0
    1aa2:	000b      	movs	r3, r1
    1aa4:	0030      	movs	r0, r6
    1aa6:	0039      	movs	r1, r7
    1aa8:	4e76      	ldr	r6, [pc, #472]	; (1c84 <computeKalmanGains+0x718>)
    1aaa:	47b0      	blx	r6
    1aac:	9a06      	ldr	r2, [sp, #24]
    1aae:	9b07      	ldr	r3, [sp, #28]
    1ab0:	4e75      	ldr	r6, [pc, #468]	; (1c88 <computeKalmanGains+0x71c>)
    1ab2:	47b0      	blx	r6
    1ab4:	0002      	movs	r2, r0
    1ab6:	000b      	movs	r3, r1
    1ab8:	913e      	str	r1, [sp, #248]	; 0xf8
    1aba:	9244      	str	r2, [sp, #272]	; 0x110
    1abc:	9345      	str	r3, [sp, #276]	; 0x114
    1abe:	9018      	str	r0, [sp, #96]	; 0x60

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1ac0:	9a04      	ldr	r2, [sp, #16]
    1ac2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ac4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1ac6:	992b      	ldr	r1, [sp, #172]	; 0xac
    1ac8:	47a8      	blx	r5
    1aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ace:	0006      	movs	r6, r0
    1ad0:	000f      	movs	r7, r1
    1ad2:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1ad4:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1ad6:	47a8      	blx	r5
    1ad8:	0002      	movs	r2, r0
    1ada:	000b      	movs	r3, r1
    1adc:	0030      	movs	r0, r6
    1ade:	0039      	movs	r1, r7
    1ae0:	47a0      	blx	r4
    1ae2:	9a06      	ldr	r2, [sp, #24]
    1ae4:	9b07      	ldr	r3, [sp, #28]
    1ae6:	4e68      	ldr	r6, [pc, #416]	; (1c88 <computeKalmanGains+0x71c>)
    1ae8:	47b0      	blx	r6
    1aea:	0002      	movs	r2, r0
    1aec:	000b      	movs	r3, r1
    1aee:	9010      	str	r0, [sp, #64]	; 0x40
    1af0:	9111      	str	r1, [sp, #68]	; 0x44

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1af2:	9800      	ldr	r0, [sp, #0]
    1af4:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1af6:	9246      	str	r2, [sp, #280]	; 0x118
    1af8:	9347      	str	r3, [sp, #284]	; 0x11c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1afe:	47a8      	blx	r5
    1b00:	9a02      	ldr	r2, [sp, #8]
    1b02:	9b03      	ldr	r3, [sp, #12]
    1b04:	0006      	movs	r6, r0
    1b06:	000f      	movs	r7, r1
    1b08:	9800      	ldr	r0, [sp, #0]
    1b0a:	9901      	ldr	r1, [sp, #4]
    1b0c:	47a8      	blx	r5
    1b0e:	0002      	movs	r2, r0
    1b10:	000b      	movs	r3, r1
    1b12:	0030      	movs	r0, r6
    1b14:	0039      	movs	r1, r7
    1b16:	4e5b      	ldr	r6, [pc, #364]	; (1c84 <computeKalmanGains+0x718>)
    1b18:	47b0      	blx	r6
    1b1a:	9a06      	ldr	r2, [sp, #24]
    1b1c:	9b07      	ldr	r3, [sp, #28]
    1b1e:	4e5a      	ldr	r6, [pc, #360]	; (1c88 <computeKalmanGains+0x71c>)
    1b20:	47b0      	blx	r6
    1b22:	0002      	movs	r2, r0
    1b24:	000b      	movs	r3, r1
    1b26:	9014      	str	r0, [sp, #80]	; 0x50
    1b28:	9115      	str	r1, [sp, #84]	; 0x54
    1b2a:	9248      	str	r2, [sp, #288]	; 0x120
    1b2c:	9349      	str	r3, [sp, #292]	; 0x124

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1b2e:	9800      	ldr	r0, [sp, #0]
    1b30:	9901      	ldr	r1, [sp, #4]
    1b32:	9a04      	ldr	r2, [sp, #16]
    1b34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1b36:	47a8      	blx	r5
    1b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b3c:	0006      	movs	r6, r0
    1b3e:	000f      	movs	r7, r1
    1b40:	9802      	ldr	r0, [sp, #8]
    1b42:	9903      	ldr	r1, [sp, #12]
    1b44:	47a8      	blx	r5
    1b46:	0002      	movs	r2, r0
    1b48:	000b      	movs	r3, r1
    1b4a:	0030      	movs	r0, r6
    1b4c:	0039      	movs	r1, r7
    1b4e:	47a0      	blx	r4
    1b50:	9a06      	ldr	r2, [sp, #24]
    1b52:	9b07      	ldr	r3, [sp, #28]
    1b54:	4e4c      	ldr	r6, [pc, #304]	; (1c88 <computeKalmanGains+0x71c>)
    1b56:	47b0      	blx	r6
    1b58:	0002      	movs	r2, r0
    1b5a:	000b      	movs	r3, r1
    1b5c:	9036      	str	r0, [sp, #216]	; 0xd8
    1b5e:	9137      	str	r1, [sp, #220]	; 0xdc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b60:	4e48      	ldr	r6, [pc, #288]	; (1c84 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1b62:	924a      	str	r2, [sp, #296]	; 0x128
    1b64:	934b      	str	r3, [sp, #300]	; 0x12c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b66:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1b68:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1b6a:	2000      	movs	r0, #0
    1b6c:	4947      	ldr	r1, [pc, #284]	; (1c8c <computeKalmanGains+0x720>)
    1b6e:	47b0      	blx	r6
    1b70:	0002      	movs	r2, r0
    1b72:	000b      	movs	r3, r1
    1b74:	900c      	str	r0, [sp, #48]	; 0x30
    1b76:	910d      	str	r1, [sp, #52]	; 0x34
    1b78:	9808      	ldr	r0, [sp, #32]
    1b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b7c:	47a8      	blx	r5
    1b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b82:	0006      	movs	r6, r0
    1b84:	000f      	movs	r7, r1
    1b86:	9800      	ldr	r0, [sp, #0]
    1b88:	9901      	ldr	r1, [sp, #4]
    1b8a:	47a8      	blx	r5
    1b8c:	0002      	movs	r2, r0
    1b8e:	000b      	movs	r3, r1
    1b90:	0030      	movs	r0, r6
    1b92:	0039      	movs	r1, r7
    1b94:	4e3b      	ldr	r6, [pc, #236]	; (1c84 <computeKalmanGains+0x718>)
    1b96:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b9c:	9006      	str	r0, [sp, #24]
    1b9e:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1ba0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ba2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ba4:	47a8      	blx	r5
    1ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1baa:	0006      	movs	r6, r0
    1bac:	000f      	movs	r7, r1
    1bae:	9812      	ldr	r0, [sp, #72]	; 0x48
    1bb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1bb2:	47a8      	blx	r5
    1bb4:	0002      	movs	r2, r0
    1bb6:	000b      	movs	r3, r1
    1bb8:	0030      	movs	r0, r6
    1bba:	0039      	movs	r1, r7
    1bbc:	4e31      	ldr	r6, [pc, #196]	; (1c84 <computeKalmanGains+0x718>)
    1bbe:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1bc4:	900a      	str	r0, [sp, #40]	; 0x28
    1bc6:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1bc8:	9804      	ldr	r0, [sp, #16]
    1bca:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bcc:	47a8      	blx	r5
    1bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bd2:	0006      	movs	r6, r0
    1bd4:	000f      	movs	r7, r1
    1bd6:	9802      	ldr	r0, [sp, #8]
    1bd8:	9903      	ldr	r1, [sp, #12]
    1bda:	47a8      	blx	r5
    1bdc:	0002      	movs	r2, r0
    1bde:	000b      	movs	r3, r1
    1be0:	0030      	movs	r0, r6
    1be2:	0039      	movs	r1, r7
    1be4:	4e27      	ldr	r6, [pc, #156]	; (1c84 <computeKalmanGains+0x718>)
    1be6:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1be8:	2280      	movs	r2, #128	; 0x80
    1bea:	0612      	lsls	r2, r2, #24
    1bec:	4694      	mov	ip, r2
    1bee:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    1bf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bf2:	4463      	add	r3, ip
    1bf4:	932f      	str	r3, [sp, #188]	; 0xbc
    1bf6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1bf8:	900c      	str	r0, [sp, #48]	; 0x30
    1bfa:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1bfc:	9808      	ldr	r0, [sp, #32]
    1bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c00:	47a8      	blx	r5
    1c02:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1c04:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1c06:	47a0      	blx	r4
    1c08:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1c0c:	0006      	movs	r6, r0
    1c0e:	000f      	movs	r7, r1
    1c10:	9800      	ldr	r0, [sp, #0]
    1c12:	9901      	ldr	r1, [sp, #4]
    1c14:	47a8      	blx	r5
    1c16:	0002      	movs	r2, r0
    1c18:	000b      	movs	r3, r1
    1c1a:	0030      	movs	r0, r6
    1c1c:	0039      	movs	r1, r7
    1c1e:	4e19      	ldr	r6, [pc, #100]	; (1c84 <computeKalmanGains+0x718>)
    1c20:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c22:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1c24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1c26:	9008      	str	r0, [sp, #32]
    1c28:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c2a:	9826      	ldr	r0, [sp, #152]	; 0x98
    1c2c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1c2e:	47a0      	blx	r4
    1c30:	4a10      	ldr	r2, [pc, #64]	; (1c74 <computeKalmanGains+0x708>)
    1c32:	0006      	movs	r6, r0
    1c34:	000f      	movs	r7, r1
    1c36:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1c38:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1c3a:	4b0f      	ldr	r3, [pc, #60]	; (1c78 <computeKalmanGains+0x70c>)
    1c3c:	47a8      	blx	r5
    1c3e:	0002      	movs	r2, r0
    1c40:	000b      	movs	r3, r1
    1c42:	0030      	movs	r0, r6
    1c44:	0039      	movs	r1, r7
    1c46:	47a0      	blx	r4
    1c48:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c4a:	0006      	movs	r6, r0
    1c4c:	000f      	movs	r7, r1
    1c4e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1c50:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1c52:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1c54:	47a8      	blx	r5
    1c56:	0002      	movs	r2, r0
    1c58:	000b      	movs	r3, r1
    1c5a:	0030      	movs	r0, r6
    1c5c:	0039      	movs	r1, r7
    1c5e:	47a0      	blx	r4
    1c60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1c64:	0006      	movs	r6, r0
    1c66:	000f      	movs	r7, r1
    1c68:	9812      	ldr	r0, [sp, #72]	; 0x48
    1c6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1c6c:	47a8      	blx	r5
    1c6e:	0002      	movs	r2, r0
    1c70:	000b      	movs	r3, r1
    1c72:	e00d      	b.n	1c90 <computeKalmanGains+0x724>
    1c74:	d2f1a9fc 	.word	0xd2f1a9fc
    1c78:	3f80624d 	.word	0x3f80624d
    1c7c:	a0b5ed8d 	.word	0xa0b5ed8d
    1c80:	3f00c6f7 	.word	0x3f00c6f7
    1c84:	00005965 	.word	0x00005965
    1c88:	00004c29 	.word	0x00004c29
    1c8c:	3ff00000 	.word	0x3ff00000
    1c90:	0030      	movs	r0, r6
    1c92:	0039      	movs	r1, r7
    1c94:	4e58      	ldr	r6, [pc, #352]	; (1df8 <computeKalmanGains+0x88c>)
    1c96:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c98:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c9a:	900e      	str	r0, [sp, #56]	; 0x38
    1c9c:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c9e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ca0:	9804      	ldr	r0, [sp, #16]
    1ca2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ca4:	47a8      	blx	r5
    1ca6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ca8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1caa:	47a0      	blx	r4
    1cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1cb0:	0006      	movs	r6, r0
    1cb2:	000f      	movs	r7, r1
    1cb4:	9802      	ldr	r0, [sp, #8]
    1cb6:	9903      	ldr	r1, [sp, #12]
    1cb8:	47a8      	blx	r5
    1cba:	4c4f      	ldr	r4, [pc, #316]	; (1df8 <computeKalmanGains+0x88c>)
    1cbc:	0002      	movs	r2, r0
    1cbe:	000b      	movs	r3, r1
    1cc0:	0030      	movs	r0, r6
    1cc2:	0039      	movs	r1, r7
    1cc4:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1cc6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cc8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1cca:	9004      	str	r0, [sp, #16]
    1ccc:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1cce:	2000      	movs	r0, #0
    1cd0:	494a      	ldr	r1, [pc, #296]	; (1dfc <computeKalmanGains+0x890>)
    1cd2:	47a0      	blx	r4
    1cd4:	0002      	movs	r2, r0
    1cd6:	000b      	movs	r3, r1
    1cd8:	9016      	str	r0, [sp, #88]	; 0x58
    1cda:	9117      	str	r1, [sp, #92]	; 0x5c
    1cdc:	9800      	ldr	r0, [sp, #0]
    1cde:	9901      	ldr	r1, [sp, #4]
    1ce0:	47a8      	blx	r5
    1ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ce6:	0006      	movs	r6, r0
    1ce8:	000f      	movs	r7, r1
    1cea:	9800      	ldr	r0, [sp, #0]
    1cec:	9901      	ldr	r1, [sp, #4]
    1cee:	47a8      	blx	r5
    1cf0:	0002      	movs	r2, r0
    1cf2:	000b      	movs	r3, r1
    1cf4:	0030      	movs	r0, r6
    1cf6:	0039      	movs	r1, r7
    1cf8:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1cfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1cfe:	9010      	str	r0, [sp, #64]	; 0x40
    1d00:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d02:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d04:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d06:	47a8      	blx	r5
    1d08:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d0c:	0006      	movs	r6, r0
    1d0e:	000f      	movs	r7, r1
    1d10:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d12:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d14:	47a8      	blx	r5
    1d16:	0002      	movs	r2, r0
    1d18:	000b      	movs	r3, r1
    1d1a:	0030      	movs	r0, r6
    1d1c:	0039      	movs	r1, r7
    1d1e:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d20:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1d24:	9012      	str	r0, [sp, #72]	; 0x48
    1d26:	9113      	str	r1, [sp, #76]	; 0x4c
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d28:	9802      	ldr	r0, [sp, #8]
    1d2a:	9903      	ldr	r1, [sp, #12]
    1d2c:	47a8      	blx	r5
    1d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d32:	0006      	movs	r6, r0
    1d34:	000f      	movs	r7, r1
    1d36:	9802      	ldr	r0, [sp, #8]
    1d38:	9903      	ldr	r1, [sp, #12]
    1d3a:	47a8      	blx	r5
    1d3c:	000b      	movs	r3, r1
    1d3e:	0002      	movs	r2, r0
    1d40:	0039      	movs	r1, r7
    1d42:	0030      	movs	r0, r6
    1d44:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1d46:	2400      	movs	r4, #0
    1d48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1d4a:	9002      	str	r0, [sp, #8]
    1d4c:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1d4e:	3301      	adds	r3, #1
    1d50:	932e      	str	r3, [sp, #184]	; 0xb8
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d52:	ab40      	add	r3, sp, #256	; 0x100
    1d54:	9326      	str	r3, [sp, #152]	; 0x98
    1d56:	4b28      	ldr	r3, [pc, #160]	; (1df8 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1d58:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d5a:	9328      	str	r3, [sp, #160]	; 0xa0
    1d5c:	ab4c      	add	r3, sp, #304	; 0x130
    1d5e:	191b      	adds	r3, r3, r4
    1d60:	9316      	str	r3, [sp, #88]	; 0x58

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d62:	2300      	movs	r3, #0
    1d64:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1d66:	9b00      	ldr	r3, [sp, #0]
    1d68:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1d6a:	18e3      	adds	r3, r4, r3
    1d6c:	18d3      	adds	r3, r2, r3
    1d6e:	681a      	ldr	r2, [r3, #0]
    1d70:	685b      	ldr	r3, [r3, #4]
    1d72:	9218      	str	r2, [sp, #96]	; 0x60
    1d74:	9319      	str	r3, [sp, #100]	; 0x64
    1d76:	9818      	ldr	r0, [sp, #96]	; 0x60
    1d78:	9919      	ldr	r1, [sp, #100]	; 0x64
    1d7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1d7c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1d7e:	681e      	ldr	r6, [r3, #0]
    1d80:	685f      	ldr	r7, [r3, #4]
    1d82:	0032      	movs	r2, r6
    1d84:	003b      	movs	r3, r7
    1d86:	47a8      	blx	r5
    1d88:	0032      	movs	r2, r6
    1d8a:	003b      	movs	r3, r7
    1d8c:	4d1c      	ldr	r5, [pc, #112]	; (1e00 <computeKalmanGains+0x894>)
    1d8e:	47a8      	blx	r5
    1d90:	4b1c      	ldr	r3, [pc, #112]	; (1e04 <computeKalmanGains+0x898>)
    1d92:	4a1d      	ldr	r2, [pc, #116]	; (1e08 <computeKalmanGains+0x89c>)
    1d94:	4e1d      	ldr	r6, [pc, #116]	; (1e0c <computeKalmanGains+0x8a0>)
    1d96:	47b0      	blx	r6
                    notdone++;
    1d98:	1e43      	subs	r3, r0, #1
    1d9a:	4198      	sbcs	r0, r3
    1d9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1d9e:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1da0:	181b      	adds	r3, r3, r0
    1da2:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1da4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1da8:	c10c      	stmia	r1!, {r2, r3}
    1daa:	9b00      	ldr	r3, [sp, #0]
    1dac:	9116      	str	r1, [sp, #88]	; 0x58
    1dae:	3308      	adds	r3, #8
    1db0:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1db2:	2b10      	cmp	r3, #16
    1db4:	d1d7      	bne.n	1d66 <computeKalmanGains+0x7fa>
    1db6:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1db8:	2c30      	cmp	r4, #48	; 0x30
    1dba:	d1cf      	bne.n	1d5c <computeKalmanGains+0x7f0>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d001      	beq.n	1dc6 <computeKalmanGains+0x85a>
    1dc2:	f7ff fc38 	bl	1636 <computeKalmanGains+0xca>
    1dc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dc8:	2b63      	cmp	r3, #99	; 0x63
    1dca:	dc01      	bgt.n	1dd0 <computeKalmanGains+0x864>
    1dcc:	f7ff fc33 	bl	1636 <computeKalmanGains+0xca>
    1dd0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1dd2:	aa42      	add	r2, sp, #264	; 0x108
    1dd4:	0019      	movs	r1, r3
    1dd6:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1dd8:	0010      	movs	r0, r2
    1dda:	3808      	subs	r0, #8
    1ddc:	6804      	ldr	r4, [r0, #0]
    1dde:	6845      	ldr	r5, [r0, #4]
    1de0:	601c      	str	r4, [r3, #0]
    1de2:	605d      	str	r5, [r3, #4]
    1de4:	6814      	ldr	r4, [r2, #0]
    1de6:	6855      	ldr	r5, [r2, #4]
    1de8:	609c      	str	r4, [r3, #8]
    1dea:	60dd      	str	r5, [r3, #12]
    1dec:	3310      	adds	r3, #16
    1dee:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1df0:	4299      	cmp	r1, r3
    1df2:	d1f1      	bne.n	1dd8 <computeKalmanGains+0x86c>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1df4:	b059      	add	sp, #356	; 0x164
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1df8:	00005965 	.word	0x00005965
    1dfc:	3ff00000 	.word	0x3ff00000
    1e00:	00004c29 	.word	0x00004c29
    1e04:	3ee4f8b5 	.word	0x3ee4f8b5
    1e08:	88e368f1 	.word	0x88e368f1
    1e0c:	00003d09 	.word	0x00003d09

00001e10 <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e10:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1e12:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e14:	0007      	movs	r7, r0

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e16:	33d4      	adds	r3, #212	; 0xd4
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1e18:	b093      	sub	sp, #76	; 0x4c

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e1a:	6818      	ldr	r0, [r3, #0]
    1e1c:	4b96      	ldr	r3, [pc, #600]	; (2078 <STACK_SIZE+0x78>)
    1e1e:	4798      	blx	r3
    1e20:	003b      	movs	r3, r7
    1e22:	33b8      	adds	r3, #184	; 0xb8
    1e24:	681a      	ldr	r2, [r3, #0]
    1e26:	685b      	ldr	r3, [r3, #4]
    1e28:	4c94      	ldr	r4, [pc, #592]	; (207c <STACK_SIZE+0x7c>)
    1e2a:	47a0      	blx	r4
    1e2c:	4a94      	ldr	r2, [pc, #592]	; (2080 <STACK_SIZE+0x80>)
    1e2e:	4b95      	ldr	r3, [pc, #596]	; (2084 <STACK_SIZE+0x84>)
    1e30:	4d95      	ldr	r5, [pc, #596]	; (2088 <STACK_SIZE+0x88>)
    1e32:	47a8      	blx	r5
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1e38:	003d      	movs	r5, r7
    1e3a:	3580      	adds	r5, #128	; 0x80

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1e3c:	9200      	str	r2, [sp, #0]
    1e3e:	9301      	str	r3, [sp, #4]
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = (my_altimeter->myIMU.accelZ - my_altimeter->myIMU.gravityOffset) * 32.17417;
    1e40:	9002      	str	r0, [sp, #8]
    1e42:	9103      	str	r1, [sp, #12]
    double pressure = my_altimeter->myBarometer.altitudefeet;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1e44:	6828      	ldr	r0, [r5, #0]
    1e46:	6869      	ldr	r1, [r5, #4]
    1e48:	2200      	movs	r2, #0
    1e4a:	2300      	movs	r3, #0
    1e4c:	4e8f      	ldr	r6, [pc, #572]	; (208c <STACK_SIZE+0x8c>)
    1e4e:	47b0      	blx	r6
    1e50:	2800      	cmp	r0, #0
    1e52:	d003      	beq.n	1e5c <computeKalmanStates+0x4c>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1e54:	9a00      	ldr	r2, [sp, #0]
    1e56:	9b01      	ldr	r3, [sp, #4]
    1e58:	602a      	str	r2, [r5, #0]
    1e5a:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1e5c:	9800      	ldr	r0, [sp, #0]
    1e5e:	9901      	ldr	r1, [sp, #4]
    1e60:	003b      	movs	r3, r7
    1e62:	3398      	adds	r3, #152	; 0x98
    1e64:	930a      	str	r3, [sp, #40]	; 0x28
    1e66:	681a      	ldr	r2, [r3, #0]
    1e68:	685b      	ldr	r3, [r3, #4]
    1e6a:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1e6c:	003b      	movs	r3, r7
    1e6e:	33a8      	adds	r3, #168	; 0xa8
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1e70:	9006      	str	r0, [sp, #24]
    1e72:	9107      	str	r1, [sp, #28]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1e74:	9802      	ldr	r0, [sp, #8]
    1e76:	9903      	ldr	r1, [sp, #12]
    1e78:	930c      	str	r3, [sp, #48]	; 0x30
    1e7a:	681a      	ldr	r2, [r3, #0]
    1e7c:	685b      	ldr	r3, [r3, #4]
    1e7e:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1e80:	003b      	movs	r3, r7
    1e82:	3380      	adds	r3, #128	; 0x80
    1e84:	930d      	str	r3, [sp, #52]	; 0x34
    1e86:	685c      	ldr	r4, [r3, #4]
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	9300      	str	r3, [sp, #0]
    1e8c:	9401      	str	r4, [sp, #4]
    1e8e:	003b      	movs	r3, r7
    1e90:	3388      	adds	r3, #136	; 0x88
    1e92:	930e      	str	r3, [sp, #56]	; 0x38
    1e94:	685c      	ldr	r4, [r3, #4]
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	9302      	str	r3, [sp, #8]
    1e9a:	9403      	str	r4, [sp, #12]
    1e9c:	003b      	movs	r3, r7
    1e9e:	3390      	adds	r3, #144	; 0x90
    1ea0:	930f      	str	r3, [sp, #60]	; 0x3c
    1ea2:	685c      	ldr	r4, [r3, #4]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	9304      	str	r3, [sp, #16]
    1ea8:	9405      	str	r4, [sp, #20]
    1eaa:	4b79      	ldr	r3, [pc, #484]	; (2090 <STACK_SIZE+0x90>)
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1eac:	9008      	str	r0, [sp, #32]
    1eae:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1eb0:	681a      	ldr	r2, [r3, #0]
    1eb2:	685b      	ldr	r3, [r3, #4]
    1eb4:	9800      	ldr	r0, [sp, #0]
    1eb6:	9901      	ldr	r1, [sp, #4]
    1eb8:	4c73      	ldr	r4, [pc, #460]	; (2088 <STACK_SIZE+0x88>)
    1eba:	47a0      	blx	r4
    1ebc:	4b74      	ldr	r3, [pc, #464]	; (2090 <STACK_SIZE+0x90>)
    1ebe:	4e72      	ldr	r6, [pc, #456]	; (2088 <STACK_SIZE+0x88>)
    1ec0:	689a      	ldr	r2, [r3, #8]
    1ec2:	68db      	ldr	r3, [r3, #12]
    1ec4:	0004      	movs	r4, r0
    1ec6:	000d      	movs	r5, r1
    1ec8:	9802      	ldr	r0, [sp, #8]
    1eca:	9903      	ldr	r1, [sp, #12]
    1ecc:	47b0      	blx	r6
    1ece:	0002      	movs	r2, r0
    1ed0:	000b      	movs	r3, r1
    1ed2:	0020      	movs	r0, r4
    1ed4:	0029      	movs	r1, r5
    1ed6:	4c6f      	ldr	r4, [pc, #444]	; (2094 <STACK_SIZE+0x94>)
    1ed8:	47a0      	blx	r4
    1eda:	4b6d      	ldr	r3, [pc, #436]	; (2090 <STACK_SIZE+0x90>)
    1edc:	0004      	movs	r4, r0
    1ede:	691a      	ldr	r2, [r3, #16]
    1ee0:	695b      	ldr	r3, [r3, #20]
    1ee2:	000d      	movs	r5, r1
    1ee4:	9804      	ldr	r0, [sp, #16]
    1ee6:	9905      	ldr	r1, [sp, #20]
    1ee8:	47b0      	blx	r6
    1eea:	0002      	movs	r2, r0
    1eec:	000b      	movs	r3, r1
    1eee:	0020      	movs	r0, r4
    1ef0:	0029      	movs	r1, r5
    1ef2:	4c68      	ldr	r4, [pc, #416]	; (2094 <STACK_SIZE+0x94>)
    1ef4:	47a0      	blx	r4
    1ef6:	0003      	movs	r3, r0
    1ef8:	000c      	movs	r4, r1
    1efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1efc:	9010      	str	r0, [sp, #64]	; 0x40
    1efe:	9111      	str	r1, [sp, #68]	; 0x44
    1f00:	6013      	str	r3, [r2, #0]
    1f02:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1f04:	4b62      	ldr	r3, [pc, #392]	; (2090 <STACK_SIZE+0x90>)
    1f06:	699a      	ldr	r2, [r3, #24]
    1f08:	69db      	ldr	r3, [r3, #28]
    1f0a:	9800      	ldr	r0, [sp, #0]
    1f0c:	9901      	ldr	r1, [sp, #4]
    1f0e:	47b0      	blx	r6
    1f10:	4b5f      	ldr	r3, [pc, #380]	; (2090 <STACK_SIZE+0x90>)
    1f12:	0004      	movs	r4, r0
    1f14:	6a1a      	ldr	r2, [r3, #32]
    1f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f18:	000d      	movs	r5, r1
    1f1a:	9802      	ldr	r0, [sp, #8]
    1f1c:	9903      	ldr	r1, [sp, #12]
    1f1e:	47b0      	blx	r6
    1f20:	0002      	movs	r2, r0
    1f22:	000b      	movs	r3, r1
    1f24:	0020      	movs	r0, r4
    1f26:	0029      	movs	r1, r5
    1f28:	4c5a      	ldr	r4, [pc, #360]	; (2094 <STACK_SIZE+0x94>)
    1f2a:	47a0      	blx	r4
    1f2c:	4b58      	ldr	r3, [pc, #352]	; (2090 <STACK_SIZE+0x90>)
    1f2e:	0004      	movs	r4, r0
    1f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f34:	000d      	movs	r5, r1
    1f36:	9804      	ldr	r0, [sp, #16]
    1f38:	9905      	ldr	r1, [sp, #20]
    1f3a:	47b0      	blx	r6
    1f3c:	0002      	movs	r2, r0
    1f3e:	000b      	movs	r3, r1
    1f40:	0020      	movs	r0, r4
    1f42:	0029      	movs	r1, r5
    1f44:	4c53      	ldr	r4, [pc, #332]	; (2094 <STACK_SIZE+0x94>)
    1f46:	47a0      	blx	r4
    1f48:	003b      	movs	r3, r7
    1f4a:	900a      	str	r0, [sp, #40]	; 0x28
    1f4c:	910b      	str	r1, [sp, #44]	; 0x2c
    1f4e:	000a      	movs	r2, r1
    1f50:	0001      	movs	r1, r0
    1f52:	33a0      	adds	r3, #160	; 0xa0
    1f54:	6019      	str	r1, [r3, #0]
    1f56:	605a      	str	r2, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1f58:	9800      	ldr	r0, [sp, #0]
    1f5a:	9901      	ldr	r1, [sp, #4]
    1f5c:	4b4c      	ldr	r3, [pc, #304]	; (2090 <STACK_SIZE+0x90>)
    1f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f62:	47b0      	blx	r6
    1f64:	4b4a      	ldr	r3, [pc, #296]	; (2090 <STACK_SIZE+0x90>)
    1f66:	0004      	movs	r4, r0
    1f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f6c:	000d      	movs	r5, r1
    1f6e:	9802      	ldr	r0, [sp, #8]
    1f70:	9903      	ldr	r1, [sp, #12]
    1f72:	47b0      	blx	r6
    1f74:	0002      	movs	r2, r0
    1f76:	000b      	movs	r3, r1
    1f78:	0020      	movs	r0, r4
    1f7a:	0029      	movs	r1, r5
    1f7c:	4c45      	ldr	r4, [pc, #276]	; (2094 <STACK_SIZE+0x94>)
    1f7e:	47a0      	blx	r4
    1f80:	4b43      	ldr	r3, [pc, #268]	; (2090 <STACK_SIZE+0x90>)
    1f82:	0004      	movs	r4, r0
    1f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f88:	000d      	movs	r5, r1
    1f8a:	9804      	ldr	r0, [sp, #16]
    1f8c:	9905      	ldr	r1, [sp, #20]
    1f8e:	47b0      	blx	r6
    1f90:	0002      	movs	r2, r0
    1f92:	000b      	movs	r3, r1
    1f94:	0020      	movs	r0, r4
    1f96:	0029      	movs	r1, r5
    1f98:	4c3e      	ldr	r4, [pc, #248]	; (2094 <STACK_SIZE+0x94>)
    1f9a:	47a0      	blx	r4
    1f9c:	0003      	movs	r3, r0
    1f9e:	000c      	movs	r4, r1
    1fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1fa2:	9000      	str	r0, [sp, #0]
    1fa4:	9101      	str	r1, [sp, #4]
    1fa6:	6013      	str	r3, [r2, #0]
    1fa8:	6054      	str	r4, [r2, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1fae:	9806      	ldr	r0, [sp, #24]
    1fb0:	9907      	ldr	r1, [sp, #28]
    1fb2:	47b0      	blx	r6
    1fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1fb8:	4c36      	ldr	r4, [pc, #216]	; (2094 <STACK_SIZE+0x94>)
    1fba:	47a0      	blx	r4
    1fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1fc0:	0004      	movs	r4, r0
    1fc2:	000d      	movs	r5, r1
    1fc4:	9808      	ldr	r0, [sp, #32]
    1fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1fc8:	47b0      	blx	r6
    1fca:	0002      	movs	r2, r0
    1fcc:	000b      	movs	r3, r1
    1fce:	0020      	movs	r0, r4
    1fd0:	0029      	movs	r1, r5
    1fd2:	4c30      	ldr	r4, [pc, #192]	; (2094 <STACK_SIZE+0x94>)
    1fd4:	47a0      	blx	r4
    1fd6:	0003      	movs	r3, r0
    1fd8:	000c      	movs	r4, r1
    1fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1fdc:	9002      	str	r0, [sp, #8]
    1fde:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1fe0:	9806      	ldr	r0, [sp, #24]
    1fe2:	9907      	ldr	r1, [sp, #28]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1fe4:	6013      	str	r3, [r2, #0]
    1fe6:	6054      	str	r4, [r2, #4]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1fec:	47b0      	blx	r6
    1fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ff2:	4c28      	ldr	r4, [pc, #160]	; (2094 <STACK_SIZE+0x94>)
    1ff4:	47a0      	blx	r4
    1ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ffa:	0004      	movs	r4, r0
    1ffc:	000d      	movs	r5, r1
    1ffe:	9808      	ldr	r0, [sp, #32]
    2000:	9909      	ldr	r1, [sp, #36]	; 0x24
    2002:	47b0      	blx	r6
    2004:	0002      	movs	r2, r0
    2006:	000b      	movs	r3, r1
    2008:	0020      	movs	r0, r4
    200a:	0029      	movs	r1, r5
    200c:	4c21      	ldr	r4, [pc, #132]	; (2094 <STACK_SIZE+0x94>)
    200e:	47a0      	blx	r4
    2010:	0005      	movs	r5, r0
    2012:	000e      	movs	r6, r1
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    2014:	9806      	ldr	r0, [sp, #24]
    2016:	9907      	ldr	r1, [sp, #28]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    2018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    201a:	4c1b      	ldr	r4, [pc, #108]	; (2088 <STACK_SIZE+0x88>)

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    201c:	601d      	str	r5, [r3, #0]
    201e:	605e      	str	r6, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    2020:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    2022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2024:	47a0      	blx	r4
    2026:	9a00      	ldr	r2, [sp, #0]
    2028:	9b01      	ldr	r3, [sp, #4]
    202a:	4c1a      	ldr	r4, [pc, #104]	; (2094 <STACK_SIZE+0x94>)
    202c:	47a0      	blx	r4
    202e:	9000      	str	r0, [sp, #0]
    2030:	9101      	str	r1, [sp, #4]
    2032:	6fba      	ldr	r2, [r7, #120]	; 0x78
    2034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2036:	9808      	ldr	r0, [sp, #32]
    2038:	9909      	ldr	r1, [sp, #36]	; 0x24
    203a:	4c13      	ldr	r4, [pc, #76]	; (2088 <STACK_SIZE+0x88>)
    203c:	47a0      	blx	r4
    203e:	4c15      	ldr	r4, [pc, #84]	; (2094 <STACK_SIZE+0x94>)
    2040:	0002      	movs	r2, r0
    2042:	000b      	movs	r3, r1
    2044:	9800      	ldr	r0, [sp, #0]
    2046:	9901      	ldr	r1, [sp, #4]
    2048:	47a0      	blx	r4
    204a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    204c:	4c12      	ldr	r4, [pc, #72]	; (2098 <STACK_SIZE+0x98>)
    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    204e:	6018      	str	r0, [r3, #0]
    2050:	6059      	str	r1, [r3, #4]

    my_altimeter->Acceleration = my_altimeter->myKalmanFilter.est[2];
    2052:	47a0      	blx	r4
    2054:	23cc      	movs	r3, #204	; 0xcc
    2056:	009b      	lsls	r3, r3, #2
    2058:	50f8      	str	r0, [r7, r3]
    my_altimeter->Velocity = my_altimeter->myKalmanFilter.est[1];
    205a:	0031      	movs	r1, r6
    205c:	0028      	movs	r0, r5
    205e:	47a0      	blx	r4
    2060:	23ce      	movs	r3, #206	; 0xce
    2062:	009b      	lsls	r3, r3, #2
    2064:	50f8      	str	r0, [r7, r3]
    my_altimeter->Altitude = my_altimeter->myKalmanFilter.est[0];
    2066:	4b0d      	ldr	r3, [pc, #52]	; (209c <STACK_SIZE+0x9c>)
    2068:	9802      	ldr	r0, [sp, #8]
    206a:	9903      	ldr	r1, [sp, #12]
    206c:	4798      	blx	r3
    206e:	23cd      	movs	r3, #205	; 0xcd
    2070:	009b      	lsls	r3, r3, #2
    2072:	50f8      	str	r0, [r7, r3]


}
    2074:	b013      	add	sp, #76	; 0x4c
    2076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2078:	000061ad 	.word	0x000061ad
    207c:	00005965 	.word	0x00005965
    2080:	33daf8df 	.word	0x33daf8df
    2084:	4040164b 	.word	0x4040164b
    2088:	00005471 	.word	0x00005471
    208c:	00003cd5 	.word	0x00003cd5
    2090:	20000010 	.word	0x20000010
    2094:	000045d1 	.word	0x000045d1
    2098:	00006255 	.word	0x00006255
    209c:	00003e2d 	.word	0x00003e2d

000020a0 <makePage>:
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    20a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    20a2:	2684      	movs	r6, #132	; 0x84
    20a4:	00b6      	lsls	r6, r6, #2
    20a6:	5d85      	ldrb	r5, [r0, r6]
#include <flight.h>
#include <boardDefines.h>
#include <math.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    20a8:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    20aa:	194b      	adds	r3, r1, r5
    20ac:	2bfe      	cmp	r3, #254	; 0xfe
    20ae:	dc03      	bgt.n	20b8 <makePage+0x18>
    20b0:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    20b2:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20b4:	1947      	adds	r7, r0, r5
    20b6:	e034      	b.n	2122 <makePage+0x82>
    20b8:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20ba:	195c      	adds	r4, r3, r5
    20bc:	b2de      	uxtb	r6, r3
    20be:	2cfe      	cmp	r4, #254	; 0xfe
    20c0:	dc08      	bgt.n	20d4 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20c2:	9a00      	ldr	r2, [sp, #0]
    20c4:	4f1f      	ldr	r7, [pc, #124]	; (2144 <makePage+0xa4>)
    20c6:	5cd6      	ldrb	r6, [r2, r3]
    20c8:	1904      	adds	r4, r0, r4
    20ca:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20cc:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    20ce:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    20d0:	b29b      	uxth	r3, r3
    20d2:	e7f2      	b.n	20ba <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    20d4:	2384      	movs	r3, #132	; 0x84
    20d6:	2500      	movs	r5, #0
    20d8:	009b      	lsls	r3, r3, #2
    20da:	54c5      	strb	r5, [r0, r3]
    20dc:	4b19      	ldr	r3, [pc, #100]	; (2144 <makePage+0xa4>)
    20de:	18c4      	adds	r4, r0, r3
    20e0:	4b19      	ldr	r3, [pc, #100]	; (2148 <makePage+0xa8>)
    20e2:	18c3      	adds	r3, r0, r3
    20e4:	9301      	str	r3, [sp, #4]
    20e6:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    20e8:	781f      	ldrb	r7, [r3, #0]
    20ea:	46bc      	mov	ip, r7
    20ec:	4662      	mov	r2, ip
    20ee:	1e9f      	subs	r7, r3, #2
    20f0:	3fff      	subs	r7, #255	; 0xff
    20f2:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    20f4:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    20f6:	701d      	strb	r5, [r3, #0]
    20f8:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    20fa:	4293      	cmp	r3, r2
    20fc:	d1f4      	bne.n	20e8 <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    20fe:	2584      	movs	r5, #132	; 0x84
    2100:	0033      	movs	r3, r6
    2102:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2104:	428b      	cmp	r3, r1
    2106:	d208      	bcs.n	211a <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    2108:	9a00      	ldr	r2, [sp, #0]
    210a:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    210c:	3301      	adds	r3, #1
    210e:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    2110:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    2112:	1b9f      	subs	r7, r3, r6
    2114:	5547      	strb	r7, [r0, r5]
    2116:	3401      	adds	r4, #1
    2118:	e7f4      	b.n	2104 <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    211a:	2201      	movs	r2, #1
    211c:	4b0a      	ldr	r3, [pc, #40]	; (2148 <makePage+0xa8>)
    211e:	54c2      	strb	r2, [r0, r3]
    2120:	e00f      	b.n	2142 <makePage+0xa2>
    2122:	1c5c      	adds	r4, r3, #1
    2124:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2126:	428b      	cmp	r3, r1
    2128:	d80b      	bhi.n	2142 <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    212a:	9a00      	ldr	r2, [sp, #0]
    212c:	5cd2      	ldrb	r2, [r2, r3]
    212e:	18fb      	adds	r3, r7, r3
    2130:	4694      	mov	ip, r2
    2132:	4a04      	ldr	r2, [pc, #16]	; (2144 <makePage+0xa4>)
    2134:	189b      	adds	r3, r3, r2
    2136:	4662      	mov	r2, ip
    2138:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    213a:	192b      	adds	r3, r5, r4
    213c:	5583      	strb	r3, [r0, r6]
    213e:	0023      	movs	r3, r4
    2140:	e7ef      	b.n	2122 <makePage+0x82>
        }

    }
}
    2142:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2144:	00000211 	.word	0x00000211
    2148:	00000311 	.word	0x00000311

0000214c <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    214c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    214e:	2346      	movs	r3, #70	; 0x46
    2150:	466a      	mov	r2, sp
    2152:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    2154:	7a03      	ldrb	r3, [r0, #8]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    2156:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    2158:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    215a:	0003      	movs	r3, r0
    215c:	33b0      	adds	r3, #176	; 0xb0
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    2162:	0a1a      	lsrs	r2, r3, #8
    2164:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    2166:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    2168:	0e1b      	lsrs	r3, r3, #24
    216a:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    216c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    216e:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    2170:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    2172:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    2174:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    2176:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    2178:	0e1b      	lsrs	r3, r3, #24
    217a:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    217c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    217e:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    2180:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    2182:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    2184:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    2186:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    2188:	0e1b      	lsrs	r3, r3, #24
    218a:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    218c:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    218e:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    2190:	33e4      	adds	r3, #228	; 0xe4
    2192:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    2194:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.accelXRaw >> 0;
    2196:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.accelXRaw >> 8;
    2198:	0a1b      	lsrs	r3, r3, #8
    219a:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    219c:	2110      	movs	r1, #16
    219e:	4b02      	ldr	r3, [pc, #8]	; (21a8 <logFlight+0x5c>)
    21a0:	4798      	blx	r3
}
    21a2:	b005      	add	sp, #20
    21a4:	bd00      	pop	{pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	000020a1 	.word	0x000020a1

000021ac <logEvent>:

void logEvent(Altimeter *my_altimeter, u8_t eventType) {
    21ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    21ae:	2345      	movs	r3, #69	; 0x45
    21b0:	aa01      	add	r2, sp, #4
    21b2:	7013      	strb	r3, [r2, #0]
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    21b4:	23c9      	movs	r3, #201	; 0xc9
    21b6:	009b      	lsls	r3, r3, #2
    21b8:	58c3      	ldr	r3, [r0, r3]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    21ba:	7051      	strb	r1, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    21bc:	0a19      	lsrs	r1, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    21be:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    21c0:	70d1      	strb	r1, [r2, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    21c2:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = my_altimeter->sampleTick >> 24;
    21c4:	0e1b      	lsrs	r3, r3, #24
    21c6:	7153      	strb	r3, [r2, #5]

    dataToSend[6] = my_altimeter->Altitude >> 0;
    21c8:	23cd      	movs	r3, #205	; 0xcd
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	58c3      	ldr	r3, [r0, r3]

    dataToSend[0] = EVENT_LOG;
	dataToSend[1] = eventType;
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    21ce:	7111      	strb	r1, [r2, #4]
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    21d0:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = my_altimeter->sampleTick >> 0;
    dataToSend[3] = my_altimeter->sampleTick >> 8;
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    21d2:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = my_altimeter->Altitude >> 8;
    21d4:	71d1      	strb	r1, [r2, #7]
    dataToSend[8] = my_altimeter->Altitude >> 16;
    21d6:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = my_altimeter->Altitude >> 24;
    21d8:	0e1b      	lsrs	r3, r3, #24
    21da:	7253      	strb	r3, [r2, #9]

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    21dc:	23c5      	movs	r3, #197	; 0xc5
    dataToSend[4] = my_altimeter->sampleTick >> 16;
    dataToSend[5] = my_altimeter->sampleTick >> 24;

    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    21de:	7211      	strb	r1, [r2, #8]
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    21e0:	009b      	lsls	r3, r3, #2
    21e2:	5ac3      	ldrh	r3, [r0, r3]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    21e4:	210c      	movs	r1, #12
    dataToSend[6] = my_altimeter->Altitude >> 0;
    dataToSend[7] = my_altimeter->Altitude >> 8;
    dataToSend[8] = my_altimeter->Altitude >> 16;
    dataToSend[9] = my_altimeter->Altitude >> 24;

    dataToSend[10] = my_altimeter->myVoltages.batV >> 0;
    21e6:	7293      	strb	r3, [r2, #10]
    dataToSend[11] = my_altimeter->myVoltages.batV >> 8;
    21e8:	0a1b      	lsrs	r3, r3, #8
    21ea:	72d3      	strb	r3, [r2, #11]

    makePage(my_altimeter, bytesToSend, dataToSend);
    21ec:	4b01      	ldr	r3, [pc, #4]	; (21f4 <logEvent+0x48>)
    21ee:	4798      	blx	r3

}
    21f0:	b005      	add	sp, #20
    21f2:	bd00      	pop	{pc}
    21f4:	000020a1 	.word	0x000020a1

000021f8 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    21f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fa:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    21fc:	466a      	mov	r2, sp
    21fe:	2353      	movs	r3, #83	; 0x53
    2200:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2202:	23c9      	movs	r3, #201	; 0xc9
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    2204:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    2206:	009b      	lsls	r3, r3, #2
    2208:	58c3      	ldr	r3, [r0, r3]

    makePage(my_altimeter, bytesToSend, dataToSend);

}

void logSensors(Altimeter *my_altimeter) {
    220a:	0004      	movs	r4, r0

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    220c:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    220e:	0a1a      	lsrs	r2, r3, #8
    2210:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    2212:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    2214:	0e1b      	lsrs	r3, r3, #24
    2216:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->Altitude >> 0;
    2218:	23cd      	movs	r3, #205	; 0xcd
    221a:	009b      	lsls	r3, r3, #2
    221c:	58c3      	ldr	r3, [r0, r3]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    221e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2220:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    2222:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->Altitude >> 8;
    2224:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->Altitude >> 16;
    2226:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->Altitude >> 24;
    2228:	0e1b      	lsrs	r3, r3, #24
    222a:	720b      	strb	r3, [r1, #8]

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    222c:	23cc      	movs	r3, #204	; 0xcc
    222e:	009b      	lsls	r3, r3, #2
    2230:	58c7      	ldr	r7, [r0, r3]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->Altitude >> 0;
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    2232:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    2234:	4e23      	ldr	r6, [pc, #140]	; (22c4 <logSensors+0xcc>)
    2236:	1c38      	adds	r0, r7, #0
    2238:	47b0      	blx	r6
    223a:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    223c:	4b22      	ldr	r3, [pc, #136]	; (22c8 <logSensors+0xd0>)
    223e:	0028      	movs	r0, r5
    2240:	4798      	blx	r3
    2242:	4b22      	ldr	r3, [pc, #136]	; (22cc <logSensors+0xd4>)
    2244:	1c01      	adds	r1, r0, #0
    2246:	1c38      	adds	r0, r7, #0
    2248:	4798      	blx	r3
    224a:	4921      	ldr	r1, [pc, #132]	; (22d0 <logSensors+0xd8>)
    224c:	4f21      	ldr	r7, [pc, #132]	; (22d4 <logSensors+0xdc>)
    224e:	47b8      	blx	r7
    2250:	4b21      	ldr	r3, [pc, #132]	; (22d8 <logSensors+0xe0>)
    2252:	4798      	blx	r3

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2254:	466a      	mov	r2, sp
    dataToSend[6] = my_altimeter->Altitude >> 8;
    dataToSend[7] = my_altimeter->Altitude >> 16;
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;
    2256:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2258:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    225a:	0a1b      	lsrs	r3, r3, #8
    225c:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    225e:	23ce      	movs	r3, #206	; 0xce
    dataToSend[8] = my_altimeter->Altitude >> 24;

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    2260:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2262:	009b      	lsls	r3, r3, #2

    float fractionalAccel = my_altimeter->Acceleration - (int16_t)(my_altimeter->Acceleration);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(my_altimeter->Acceleration) >> 0;
    dataToSend[10] = (int16_t)(my_altimeter->Acceleration) >> 8;
    2264:	122d      	asrs	r5, r5, #8
    2266:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    2268:	58e5      	ldr	r5, [r4, r3]
    226a:	1c28      	adds	r0, r5, #0
    226c:	47b0      	blx	r6
    226e:	b206      	sxth	r6, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2270:	4b15      	ldr	r3, [pc, #84]	; (22c8 <logSensors+0xd0>)
    2272:	0030      	movs	r0, r6
    2274:	4798      	blx	r3
    2276:	4b15      	ldr	r3, [pc, #84]	; (22cc <logSensors+0xd4>)
    2278:	1c01      	adds	r1, r0, #0
    227a:	1c28      	adds	r0, r5, #0
    227c:	4798      	blx	r3
    227e:	4914      	ldr	r1, [pc, #80]	; (22d0 <logSensors+0xd8>)
    2280:	47b8      	blx	r7
    2282:	4b15      	ldr	r3, [pc, #84]	; (22d8 <logSensors+0xe0>)
    2284:	4798      	blx	r3

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    2286:	466a      	mov	r2, sp
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    2288:	4669      	mov	r1, sp
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    228a:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    228c:	73d3      	strb	r3, [r2, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    228e:	0a1b      	lsrs	r3, r3, #8
    2290:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    2292:	6b63      	ldr	r3, [r4, #52]	; 0x34


    float fractionalVelocity = my_altimeter->Velocity - (int16_t)(my_altimeter->Velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(my_altimeter->Velocity) >> 0;
    2294:	7356      	strb	r6, [r2, #13]
    dataToSend[14] = (int16_t)(my_altimeter->Velocity) >> 8;
    2296:	1236      	asrs	r6, r6, #8
    2298:	7396      	strb	r6, [r2, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    229a:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    229c:	0a1a      	lsrs	r2, r3, #8
    229e:	748a      	strb	r2, [r1, #18]
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    22a0:	0c1a      	lsrs	r2, r3, #16
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    22a2:	0e1b      	lsrs	r3, r3, #24
    22a4:	750b      	strb	r3, [r1, #20]

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22a6:	0023      	movs	r3, r4
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    22a8:	74ca      	strb	r2, [r1, #19]

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22aa:	33ec      	adds	r3, #236	; 0xec
    22ac:	881b      	ldrh	r3, [r3, #0]
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = my_altimeter->myBarometer.heightFeet >> 0;
    dataToSend[18] = my_altimeter->myBarometer.heightFeet >> 8;
    dataToSend[19] = my_altimeter->myBarometer.heightFeet >> 16;
    dataToSend[20] = my_altimeter->myBarometer.heightFeet >> 24;
    22ae:	466a      	mov	r2, sp

    //dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    //dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    //dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    //dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    dataToSend[21] = my_altimeter->myIMU.accelZRaw >> 0;
    22b0:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myIMU.accelZRaw >> 8;
    22b2:	0a1b      	lsrs	r3, r3, #8
    22b4:	758b      	strb	r3, [r1, #22]


    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    makePage(my_altimeter, bytesToSend, dataToSend);
    22b6:	0020      	movs	r0, r4
    22b8:	2117      	movs	r1, #23
    22ba:	4b08      	ldr	r3, [pc, #32]	; (22dc <logSensors+0xe4>)
    22bc:	4798      	blx	r3
}
    22be:	b007      	add	sp, #28
    22c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	000044fd 	.word	0x000044fd
    22c8:	00004541 	.word	0x00004541
    22cc:	000041f1 	.word	0x000041f1
    22d0:	447a0000 	.word	0x447a0000
    22d4:	00003fc9 	.word	0x00003fc9
    22d8:	00003dfd 	.word	0x00003dfd
    22dc:	000020a1 	.word	0x000020a1

000022e0 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    22e0:	2306      	movs	r3, #6
    makePage(my_altimeter, bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    22e2:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    22e4:	4358      	muls	r0, r3
    22e6:	ac01      	add	r4, sp, #4
    22e8:	3001      	adds	r0, #1
    22ea:	30ff      	adds	r0, #255	; 0xff
    22ec:	0022      	movs	r2, r4
    22ee:	2103      	movs	r1, #3
    22f0:	4b04      	ldr	r3, [pc, #16]	; (2304 <getFlightStartAddress+0x24>)
    22f2:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    22f4:	7860      	ldrb	r0, [r4, #1]
    22f6:	78a3      	ldrb	r3, [r4, #2]
    22f8:	0200      	lsls	r0, r0, #8
    22fa:	041b      	lsls	r3, r3, #16
    22fc:	4318      	orrs	r0, r3
    22fe:	7823      	ldrb	r3, [r4, #0]
    2300:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2302:	bd16      	pop	{r1, r2, r4, pc}
    2304:	00000341 	.word	0x00000341

00002308 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2308:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    230a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    230c:	4358      	muls	r0, r3
    230e:	ac01      	add	r4, sp, #4
    2310:	3004      	adds	r0, #4
    2312:	30ff      	adds	r0, #255	; 0xff
    2314:	0022      	movs	r2, r4
    2316:	2103      	movs	r1, #3
    2318:	4b04      	ldr	r3, [pc, #16]	; (232c <FindFlightEndingAddress+0x24>)
    231a:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    231c:	7860      	ldrb	r0, [r4, #1]
    231e:	78a3      	ldrb	r3, [r4, #2]
    2320:	0200      	lsls	r0, r0, #8
    2322:	041b      	lsls	r3, r3, #16
    2324:	4318      	orrs	r0, r3
    2326:	7823      	ldrb	r3, [r4, #0]
    2328:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    232a:	bd16      	pop	{r1, r2, r4, pc}
    232c:	00000341 	.word	0x00000341

00002330 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2330:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2332:	4b04      	ldr	r3, [pc, #16]	; (2344 <isFlightLogged+0x14>)
    2334:	4798      	blx	r3
    2336:	4b04      	ldr	r3, [pc, #16]	; (2348 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2338:	18c0      	adds	r0, r0, r3
    233a:	1e43      	subs	r3, r0, #1
    233c:	4198      	sbcs	r0, r3
    233e:	b2c0      	uxtb	r0, r0
    2340:	bd10      	pop	{r4, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	000022e1 	.word	0x000022e1
    2348:	ff000001 	.word	0xff000001

0000234c <writeFlightEndAddress>:



void writeFlightEndAddress(Altimeter *my_altimeter) {

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    234c:	0003      	movs	r3, r0
    }
}



void writeFlightEndAddress(Altimeter *my_altimeter) {
    234e:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = my_altimeter->myFlashMemory.currentAddress;
    2350:	33fc      	adds	r3, #252	; 0xfc
    2352:	68db      	ldr	r3, [r3, #12]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2354:	aa01      	add	r2, sp, #4
    2356:	7013      	strb	r3, [r2, #0]
    2358:	0a19      	lsrs	r1, r3, #8
    235a:	0c1b      	lsrs	r3, r3, #16
    235c:	7051      	strb	r1, [r2, #1]
    235e:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (my_altimeter->flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2360:	7a03      	ldrb	r3, [r0, #8]
    2362:	2006      	movs	r0, #6
    2364:	4358      	muls	r0, r3
    2366:	3004      	adds	r0, #4
    2368:	30ff      	adds	r0, #255	; 0xff
    236a:	2103      	movs	r1, #3
    236c:	4b02      	ldr	r3, [pc, #8]	; (2378 <writeFlightEndAddress+0x2c>)
    236e:	4798      	blx	r3
    delay_ms(10);
    2370:	200a      	movs	r0, #10
    2372:	4b02      	ldr	r3, [pc, #8]	; (237c <writeFlightEndAddress+0x30>)
    2374:	4798      	blx	r3

}
    2376:	bd07      	pop	{r0, r1, r2, pc}
    2378:	00000255 	.word	0x00000255
    237c:	00000fc9 	.word	0x00000fc9

00002380 <findNewFlightStart>:




void findNewFlightStart(Altimeter *my_altimeter) {
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2382:	2400      	movs	r4, #0
}




void findNewFlightStart(Altimeter *my_altimeter) {
    2384:	b085      	sub	sp, #20
    2386:	9001      	str	r0, [sp, #4]

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {
    2388:	0020      	movs	r0, r4
    238a:	4b24      	ldr	r3, [pc, #144]	; (241c <findNewFlightStart+0x9c>)
    238c:	4798      	blx	r3
    238e:	2800      	cmp	r0, #0
    2390:	d13d      	bne.n	240e <findNewFlightStart+0x8e>
    2392:	9f01      	ldr	r7, [sp, #4]
    2394:	ad03      	add	r5, sp, #12
    2396:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    2398:	2c00      	cmp	r4, #0
    239a:	d016      	beq.n	23ca <findNewFlightStart+0x4a>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    239c:	1e60      	subs	r0, r4, #1
    239e:	4b20      	ldr	r3, [pc, #128]	; (2420 <findNewFlightStart+0xa0>)
    23a0:	b2c0      	uxtb	r0, r0
    23a2:	4798      	blx	r3
                delay_ms(5);
    23a4:	4b1f      	ldr	r3, [pc, #124]	; (2424 <findNewFlightStart+0xa4>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    23a6:	0006      	movs	r6, r0
                delay_ms(5);
    23a8:	2005      	movs	r0, #5
    23aa:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23ac:	2006      	movs	r0, #6
    23ae:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23b0:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23b2:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;
    23b4:	60fe      	str	r6, [r7, #12]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23b6:	702e      	strb	r6, [r5, #0]
    23b8:	706b      	strb	r3, [r5, #1]
    23ba:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23bc:	30ff      	adds	r0, #255	; 0xff
    23be:	002a      	movs	r2, r5
    23c0:	2103      	movs	r1, #3
    23c2:	4b19      	ldr	r3, [pc, #100]	; (2428 <findNewFlightStart+0xa8>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    23c4:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    23c6:	4798      	blx	r3
    23c8:	e00f      	b.n	23ea <findNewFlightStart+0x6a>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23ca:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    23cc:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23ce:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    23d0:	0040      	lsls	r0, r0, #1
    23d2:	4b15      	ldr	r3, [pc, #84]	; (2428 <findNewFlightStart+0xa8>)
    23d4:	002a      	movs	r2, r5
    23d6:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    23d8:	702c      	strb	r4, [r5, #0]
    23da:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    23dc:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    23de:	2380      	movs	r3, #128	; 0x80
    23e0:	015b      	lsls	r3, r3, #5
    23e2:	60fb      	str	r3, [r7, #12]
                beep(1500);
    23e4:	4811      	ldr	r0, [pc, #68]	; (242c <findNewFlightStart+0xac>)
    23e6:	4b12      	ldr	r3, [pc, #72]	; (2430 <findNewFlightStart+0xb0>)
    23e8:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    23ea:	9b01      	ldr	r3, [sp, #4]
    23ec:	721c      	strb	r4, [r3, #8]

            while (flightNumbToCheck > 0) {
                beep(500);
    23ee:	20fa      	movs	r0, #250	; 0xfa
    23f0:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    23f2:	2c00      	cmp	r4, #0
    23f4:	d008      	beq.n	2408 <findNewFlightStart+0x88>
                beep(500);
    23f6:	4b0e      	ldr	r3, [pc, #56]	; (2430 <findNewFlightStart+0xb0>)
    23f8:	4798      	blx	r3
                delay_ms(500);
    23fa:	20fa      	movs	r0, #250	; 0xfa
    23fc:	4b09      	ldr	r3, [pc, #36]	; (2424 <findNewFlightStart+0xa4>)
    23fe:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2400:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2402:	4798      	blx	r3
                --flightNumbToCheck;
    2404:	b2e4      	uxtb	r4, r4
    2406:	e7f2      	b.n	23ee <findNewFlightStart+0x6e>
            }
            delay_ms(500);
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <findNewFlightStart+0xa4>)
    240a:	4798      	blx	r3
            break;
    240c:	e003      	b.n	2416 <findNewFlightStart+0x96>



void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    240e:	3401      	adds	r4, #1
    2410:	b2e4      	uxtb	r4, r4
    2412:	2c14      	cmp	r4, #20
    2414:	d1b8      	bne.n	2388 <findNewFlightStart+0x8>
            }
            delay_ms(500);
            break;
        }
    }
}
    2416:	b005      	add	sp, #20
    2418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	00002331 	.word	0x00002331
    2420:	00002309 	.word	0x00002309
    2424:	00000fc9 	.word	0x00000fc9
    2428:	00000255 	.word	0x00000255
    242c:	000005dc 	.word	0x000005dc
    2430:	00000db1 	.word	0x00000db1

00002434 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2434:	4b01      	ldr	r3, [pc, #4]	; (243c <takeSample+0x8>)
    2436:	7818      	ldrb	r0, [r3, #0]
}
    2438:	4770      	bx	lr
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	200004d3 	.word	0x200004d3

00002440 <pullSample>:

void pullSample() {
    SampleBool = true;
    2440:	2201      	movs	r2, #1
    2442:	4b01      	ldr	r3, [pc, #4]	; (2448 <pullSample+0x8>)
    2444:	701a      	strb	r2, [r3, #0]
}
    2446:	4770      	bx	lr
    2448:	200004d3 	.word	0x200004d3

0000244c <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    244c:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    244e:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2450:	25c9      	movs	r5, #201	; 0xc9





void sampleTick(Altimeter *my_altimeter) {
    2452:	0004      	movs	r4, r0
    SampleBool = false;
    2454:	4be3      	ldr	r3, [pc, #908]	; (27e4 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    2456:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2458:	4ee3      	ldr	r6, [pc, #908]	; (27e8 <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    245a:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    245c:	47b0      	blx	r6
    245e:	00ad      	lsls	r5, r5, #2
    2460:	5963      	ldr	r3, [r4, r5]
    2462:	1ac0      	subs	r0, r0, r3
    2464:	23cb      	movs	r3, #203	; 0xcb
    2466:	009b      	lsls	r3, r3, #2
    2468:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    246a:	47b0      	blx	r6
    246c:	5160      	str	r0, [r4, r5]

    my_altimeter->myVoltages.batV = adc_read(senseBatPin);
    246e:	4ddf      	ldr	r5, [pc, #892]	; (27ec <sampleTick+0x3a0>)
    2470:	4edf      	ldr	r6, [pc, #892]	; (27f0 <sampleTick+0x3a4>)
    2472:	786b      	ldrb	r3, [r5, #1]
    2474:	7829      	ldrb	r1, [r5, #0]
    2476:	78a8      	ldrb	r0, [r5, #2]
    2478:	021b      	lsls	r3, r3, #8
    247a:	430b      	orrs	r3, r1
    247c:	0400      	lsls	r0, r0, #16
    247e:	001a      	movs	r2, r3
    2480:	0003      	movs	r3, r0
    2482:	78e8      	ldrb	r0, [r5, #3]
    2484:	4313      	orrs	r3, r2
    2486:	0600      	lsls	r0, r0, #24
    2488:	7929      	ldrb	r1, [r5, #4]
    248a:	4318      	orrs	r0, r3
    248c:	47b0      	blx	r6
    248e:	23c5      	movs	r3, #197	; 0xc5
    2490:	009b      	lsls	r3, r3, #2
    2492:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;
    2494:	4bd7      	ldr	r3, [pc, #860]	; (27f4 <sampleTick+0x3a8>)
    2496:	4798      	blx	r3
    2498:	4ad7      	ldr	r2, [pc, #860]	; (27f8 <sampleTick+0x3ac>)
    249a:	4fd8      	ldr	r7, [pc, #864]	; (27fc <sampleTick+0x3b0>)
    249c:	4bd8      	ldr	r3, [pc, #864]	; (2800 <sampleTick+0x3b4>)
    249e:	47b8      	blx	r7
    24a0:	4bd8      	ldr	r3, [pc, #864]	; (2804 <sampleTick+0x3b8>)
    24a2:	4798      	blx	r3
    24a4:	23c6      	movs	r3, #198	; 0xc6
    24a6:	009b      	lsls	r3, r3, #2
    24a8:	50e0      	str	r0, [r4, r3]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    24aa:	79ab      	ldrb	r3, [r5, #6]
    24ac:	7969      	ldrb	r1, [r5, #5]
    24ae:	79e8      	ldrb	r0, [r5, #7]
    24b0:	021b      	lsls	r3, r3, #8
    24b2:	430b      	orrs	r3, r1
    24b4:	0400      	lsls	r0, r0, #16
    24b6:	001a      	movs	r2, r3
    24b8:	0003      	movs	r3, r0
    24ba:	7a28      	ldrb	r0, [r5, #8]
    24bc:	4313      	orrs	r3, r2
    24be:	0600      	lsls	r0, r0, #24
    24c0:	7a69      	ldrb	r1, [r5, #9]
    24c2:	4318      	orrs	r0, r3
    24c4:	47b0      	blx	r6
    24c6:	23c7      	movs	r3, #199	; 0xc7
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    24cc:	7aeb      	ldrb	r3, [r5, #11]
    24ce:	7aa9      	ldrb	r1, [r5, #10]
    24d0:	7b28      	ldrb	r0, [r5, #12]
    24d2:	021b      	lsls	r3, r3, #8
    24d4:	430b      	orrs	r3, r1
    24d6:	0400      	lsls	r0, r0, #16
    24d8:	001a      	movs	r2, r3
    24da:	0003      	movs	r3, r0
    24dc:	7b68      	ldrb	r0, [r5, #13]
    24de:	4313      	orrs	r3, r2
    24e0:	0600      	lsls	r0, r0, #24
    24e2:	7ba9      	ldrb	r1, [r5, #14]
    24e4:	4318      	orrs	r0, r3
    24e6:	47b0      	blx	r6
    24e8:	4bc7      	ldr	r3, [pc, #796]	; (2808 <sampleTick+0x3bc>)
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    24ea:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->myVoltages.batV = my_altimeter->myVoltages.batV;
    my_altimeter->myVoltages.batFloat = my_altimeter->myVoltages.batV * 0.0019;


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    24ec:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    24ee:	7c2b      	ldrb	r3, [r5, #16]
    24f0:	7c68      	ldrb	r0, [r5, #17]
    24f2:	021b      	lsls	r3, r3, #8
    24f4:	430b      	orrs	r3, r1
    24f6:	0400      	lsls	r0, r0, #16
    24f8:	001a      	movs	r2, r3
    24fa:	0003      	movs	r3, r0
    24fc:	7ca8      	ldrb	r0, [r5, #18]
    24fe:	4313      	orrs	r3, r2
    2500:	0600      	lsls	r0, r0, #24
    2502:	7ce9      	ldrb	r1, [r5, #19]
    2504:	4318      	orrs	r0, r3
    2506:	47b0      	blx	r6
    2508:	23c8      	movs	r3, #200	; 0xc8
    250a:	009b      	lsls	r3, r3, #2
    250c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    250e:	7d6b      	ldrb	r3, [r5, #21]
    2510:	7d29      	ldrb	r1, [r5, #20]
    2512:	7da8      	ldrb	r0, [r5, #22]
    2514:	021b      	lsls	r3, r3, #8
    2516:	430b      	orrs	r3, r1
    2518:	0400      	lsls	r0, r0, #16
    251a:	001a      	movs	r2, r3
    251c:	0003      	movs	r3, r0
    251e:	7de8      	ldrb	r0, [r5, #23]
    2520:	4313      	orrs	r3, r2
    2522:	0600      	lsls	r0, r0, #24
    2524:	7e29      	ldrb	r1, [r5, #24]
    2526:	4318      	orrs	r0, r3
    2528:	47b0      	blx	r6
    252a:	4bb8      	ldr	r3, [pc, #736]	; (280c <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    252c:	7e69      	ldrb	r1, [r5, #25]


    my_altimeter->myVoltages.senseA = adc_read(senseAPin);
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);
    252e:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    2530:	7eab      	ldrb	r3, [r5, #26]
    2532:	7ee8      	ldrb	r0, [r5, #27]
    2534:	021b      	lsls	r3, r3, #8
    2536:	430b      	orrs	r3, r1
    2538:	0400      	lsls	r0, r0, #16
    253a:	001a      	movs	r2, r3
    253c:	0003      	movs	r3, r0
    253e:	7f28      	ldrb	r0, [r5, #28]
    2540:	4313      	orrs	r3, r2
    2542:	0600      	lsls	r0, r0, #24
    2544:	7f69      	ldrb	r1, [r5, #29]
    2546:	4318      	orrs	r0, r3
    2548:	47b0      	blx	r6
    254a:	0023      	movs	r3, r4
    254c:	33fe      	adds	r3, #254	; 0xfe
    254e:	8058      	strh	r0, [r3, #2]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2550:	4baf      	ldr	r3, [pc, #700]	; (2810 <sampleTick+0x3c4>)
    2552:	0026      	movs	r6, r4
    2554:	18c0      	adds	r0, r0, r3
    2556:	4ba7      	ldr	r3, [pc, #668]	; (27f4 <sampleTick+0x3a8>)
    2558:	4798      	blx	r3
    255a:	4aae      	ldr	r2, [pc, #696]	; (2814 <sampleTick+0x3c8>)
    255c:	4fa7      	ldr	r7, [pc, #668]	; (27fc <sampleTick+0x3b0>)
    255e:	4bae      	ldr	r3, [pc, #696]	; (2818 <sampleTick+0x3cc>)
    2560:	47b8      	blx	r7
    2562:	4ba8      	ldr	r3, [pc, #672]	; (2804 <sampleTick+0x3b8>)
    2564:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2566:	0022      	movs	r2, r4
    2568:	0023      	movs	r3, r4
    256a:	32c8      	adds	r2, #200	; 0xc8
    256c:	9204      	str	r2, [sp, #16]
    256e:	6812      	ldr	r2, [r2, #0]
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2570:	36fc      	adds	r6, #252	; 0xfc

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2572:	33cc      	adds	r3, #204	; 0xcc
    2574:	2780      	movs	r7, #128	; 0x80
    my_altimeter->myVoltages.senseB = adc_read(senseBPin);
    my_altimeter->myVoltages.senseC = adc_read(senseCPin);
    my_altimeter->myVoltages.senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2576:	60b0      	str	r0, [r6, #8]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2578:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    257a:	2250      	movs	r2, #80	; 0x50
    257c:	4ba7      	ldr	r3, [pc, #668]	; (281c <sampleTick+0x3d0>)
    257e:	023f      	lsls	r7, r7, #8
    2580:	615f      	str	r7, [r3, #20]
    2582:	002e      	movs	r6, r5
    2584:	9200      	str	r2, [sp, #0]
    2586:	7fea      	ldrb	r2, [r5, #31]
    2588:	7fa8      	ldrb	r0, [r5, #30]
    258a:	0212      	lsls	r2, r2, #8
    258c:	4302      	orrs	r2, r0
    258e:	0011      	movs	r1, r2
    2590:	002b      	movs	r3, r5
    2592:	361e      	adds	r6, #30
    2594:	78b2      	ldrb	r2, [r6, #2]
    2596:	3323      	adds	r3, #35	; 0x23
    2598:	0412      	lsls	r2, r2, #16
    259a:	430a      	orrs	r2, r1
    259c:	78f1      	ldrb	r1, [r6, #3]
    259e:	7818      	ldrb	r0, [r3, #0]
    25a0:	0609      	lsls	r1, r1, #24
    25a2:	4311      	orrs	r1, r2
    25a4:	7932      	ldrb	r2, [r6, #4]
    25a6:	789d      	ldrb	r5, [r3, #2]
    25a8:	9203      	str	r2, [sp, #12]
    25aa:	785a      	ldrb	r2, [r3, #1]
    25ac:	042d      	lsls	r5, r5, #16
    25ae:	0212      	lsls	r2, r2, #8
    25b0:	4302      	orrs	r2, r0
    25b2:	9102      	str	r1, [sp, #8]
    25b4:	0011      	movs	r1, r2
    25b6:	002a      	movs	r2, r5
    25b8:	78dd      	ldrb	r5, [r3, #3]
    25ba:	791b      	ldrb	r3, [r3, #4]
    25bc:	430a      	orrs	r2, r1
    25be:	062d      	lsls	r5, r5, #24
    25c0:	4315      	orrs	r5, r2
    25c2:	9305      	str	r3, [sp, #20]
    25c4:	9a02      	ldr	r2, [sp, #8]
    25c6:	9905      	ldr	r1, [sp, #20]
    25c8:	9b03      	ldr	r3, [sp, #12]
    25ca:	0028      	movs	r0, r5
    25cc:	4e94      	ldr	r6, [pc, #592]	; (2820 <sampleTick+0x3d4>)
    25ce:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    25d0:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25d2:	4b92      	ldr	r3, [pc, #584]	; (281c <sampleTick+0x3d0>)
    25d4:	0040      	lsls	r0, r0, #1
    25d6:	619f      	str	r7, [r3, #24]
    25d8:	4b92      	ldr	r3, [pc, #584]	; (2824 <sampleTick+0x3d8>)
    25da:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    25dc:	4b92      	ldr	r3, [pc, #584]	; (2828 <sampleTick+0x3dc>)
    25de:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    25e0:	4b8e      	ldr	r3, [pc, #568]	; (281c <sampleTick+0x3d0>)
    25e2:	6220      	str	r0, [r4, #32]
    25e4:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    25e6:	2346      	movs	r3, #70	; 0x46
    25e8:	9a02      	ldr	r2, [sp, #8]
    25ea:	9300      	str	r3, [sp, #0]
    25ec:	0028      	movs	r0, r5
    25ee:	9b03      	ldr	r3, [sp, #12]
    25f0:	9905      	ldr	r1, [sp, #20]
    25f2:	47b0      	blx	r6
    25f4:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25f6:	4b89      	ldr	r3, [pc, #548]	; (281c <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    25f8:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25fa:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    25fc:	4b8b      	ldr	r3, [pc, #556]	; (282c <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    25fe:	4e8c      	ldr	r6, [pc, #560]	; (2830 <sampleTick+0x3e4>)
    2600:	601a      	str	r2, [r3, #0]
    2602:	2182      	movs	r1, #130	; 0x82
    2604:	2000      	movs	r0, #0
    2606:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2608:	21ff      	movs	r1, #255	; 0xff
    260a:	2000      	movs	r0, #0
    260c:	47b0      	blx	r6
    260e:	0023      	movs	r3, r4
    2610:	33e4      	adds	r3, #228	; 0xe4
    2612:	8018      	strh	r0, [r3, #0]
    2614:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2616:	21ff      	movs	r1, #255	; 0xff
    2618:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    261a:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    261c:	47b0      	blx	r6
    261e:	9b02      	ldr	r3, [sp, #8]
    2620:	0200      	lsls	r0, r0, #8
    2622:	4305      	orrs	r5, r0
    2624:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2626:	21ff      	movs	r1, #255	; 0xff
    2628:	2000      	movs	r0, #0
    262a:	47b0      	blx	r6
    262c:	0023      	movs	r3, r4
    262e:	33e8      	adds	r3, #232	; 0xe8
    2630:	8018      	strh	r0, [r3, #0]
    2632:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2634:	21ff      	movs	r1, #255	; 0xff
    2636:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2638:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    263a:	47b0      	blx	r6
    263c:	9b03      	ldr	r3, [sp, #12]
    263e:	0200      	lsls	r0, r0, #8
    2640:	4305      	orrs	r5, r0
    2642:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2644:	21ff      	movs	r1, #255	; 0xff
    2646:	0025      	movs	r5, r4
    2648:	2000      	movs	r0, #0
    264a:	47b0      	blx	r6
    264c:	35ec      	adds	r5, #236	; 0xec
    264e:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2650:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2652:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2654:	2000      	movs	r0, #0
    2656:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2658:	2280      	movs	r2, #128	; 0x80
    265a:	0200      	lsls	r0, r0, #8
    265c:	4b75      	ldr	r3, [pc, #468]	; (2834 <sampleTick+0x3e8>)
    265e:	4307      	orrs	r7, r0
    2660:	00d2      	lsls	r2, r2, #3
    2662:	802f      	strh	r7, [r5, #0]
    2664:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    2666:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2668:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    266a:	2000      	movs	r0, #0
    266c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    266e:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2670:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2672:	2200      	movs	r2, #0
    2674:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    2676:	2102      	movs	r1, #2
    2678:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    267a:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    267c:	37ee      	adds	r7, #238	; 0xee
    267e:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2680:	1100      	asrs	r0, r0, #4
    2682:	31e6      	adds	r1, #230	; 0xe6
    2684:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2686:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2688:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    268a:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    268c:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    268e:	4b59      	ldr	r3, [pc, #356]	; (27f4 <sampleTick+0x3a8>)
    2690:	4798      	blx	r3
    2692:	23fe      	movs	r3, #254	; 0xfe
    2694:	2200      	movs	r2, #0
    2696:	4d59      	ldr	r5, [pc, #356]	; (27fc <sampleTick+0x3b0>)
    2698:	059b      	lsls	r3, r3, #22
    269a:	47a8      	blx	r5
    269c:	4b59      	ldr	r3, [pc, #356]	; (2804 <sampleTick+0x3b8>)
    269e:	4798      	blx	r3
    26a0:	9b04      	ldr	r3, [sp, #16]
    26a2:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    26a4:	0023      	movs	r3, r4
    26a6:	33d0      	adds	r3, #208	; 0xd0
    26a8:	9303      	str	r3, [sp, #12]
    26aa:	9b02      	ldr	r3, [sp, #8]
    26ac:	2000      	movs	r0, #0
    26ae:	5e18      	ldrsh	r0, [r3, r0]
    26b0:	4b50      	ldr	r3, [pc, #320]	; (27f4 <sampleTick+0x3a8>)
    26b2:	4798      	blx	r3
    26b4:	23fe      	movs	r3, #254	; 0xfe
    26b6:	2200      	movs	r2, #0
    26b8:	059b      	lsls	r3, r3, #22
    26ba:	47a8      	blx	r5
    26bc:	4b51      	ldr	r3, [pc, #324]	; (2804 <sampleTick+0x3b8>)
    26be:	4798      	blx	r3
    26c0:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = -my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    26c2:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    26c4:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = -my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    26c6:	2300      	movs	r3, #0
    26c8:	5ef8      	ldrsh	r0, [r7, r3]
    26ca:	4b4a      	ldr	r3, [pc, #296]	; (27f4 <sampleTick+0x3a8>)
    26cc:	4240      	negs	r0, r0
    26ce:	4798      	blx	r3
    26d0:	23fe      	movs	r3, #254	; 0xfe
    26d2:	2200      	movs	r2, #0
    26d4:	4f49      	ldr	r7, [pc, #292]	; (27fc <sampleTick+0x3b0>)
    26d6:	059b      	lsls	r3, r3, #22
    26d8:	47b8      	blx	r7
    26da:	4b4a      	ldr	r3, [pc, #296]	; (2804 <sampleTick+0x3b8>)
    26dc:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    26de:	2280      	movs	r2, #128	; 0x80
    26e0:	4b4e      	ldr	r3, [pc, #312]	; (281c <sampleTick+0x3d0>)
    26e2:	00d2      	lsls	r2, r2, #3
    26e4:	35d4      	adds	r5, #212	; 0xd4
    26e6:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    26e8:	2182      	movs	r1, #130	; 0x82
    26ea:	615a      	str	r2, [r3, #20]
    26ec:	2000      	movs	r0, #0
    26ee:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    26f0:	21ff      	movs	r1, #255	; 0xff
    26f2:	2000      	movs	r0, #0
    26f4:	47b0      	blx	r6
    26f6:	0023      	movs	r3, r4
    26f8:	33f0      	adds	r3, #240	; 0xf0
    26fa:	8018      	strh	r0, [r3, #0]
    26fc:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    26fe:	21ff      	movs	r1, #255	; 0xff
    2700:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2702:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2704:	47b0      	blx	r6
    2706:	9b02      	ldr	r3, [sp, #8]
    2708:	0200      	lsls	r0, r0, #8
    270a:	4305      	orrs	r5, r0
    270c:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    270e:	21ff      	movs	r1, #255	; 0xff
    2710:	2000      	movs	r0, #0
    2712:	47b0      	blx	r6
    2714:	0023      	movs	r3, r4
    2716:	33f4      	adds	r3, #244	; 0xf4
    2718:	8018      	strh	r0, [r3, #0]
    271a:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    271c:	21ff      	movs	r1, #255	; 0xff
    271e:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2720:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2722:	47b0      	blx	r6
    2724:	9b03      	ldr	r3, [sp, #12]
    2726:	0200      	lsls	r0, r0, #8
    2728:	4305      	orrs	r5, r0
    272a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    272c:	21ff      	movs	r1, #255	; 0xff
    272e:	0025      	movs	r5, r4
    2730:	2000      	movs	r0, #0
    2732:	47b0      	blx	r6
    2734:	35f8      	adds	r5, #248	; 0xf8
    2736:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2738:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    273a:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    273c:	2000      	movs	r0, #0
    273e:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2740:	2280      	movs	r2, #128	; 0x80
    2742:	0200      	lsls	r0, r0, #8
    2744:	4b35      	ldr	r3, [pc, #212]	; (281c <sampleTick+0x3d0>)
    2746:	4307      	orrs	r7, r0
    2748:	00d2      	lsls	r2, r2, #3
    274a:	802f      	strh	r7, [r5, #0]
    274c:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    274e:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2750:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    2752:	2000      	movs	r0, #0
    2754:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    2756:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2758:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    275a:	2200      	movs	r2, #0
    275c:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    275e:	2100      	movs	r1, #0
    2760:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2762:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2764:	36f6      	adds	r6, #246	; 0xf6
    2766:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2768:	1100      	asrs	r0, r0, #4
    276a:	31f2      	adds	r1, #242	; 0xf2
    276c:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    276e:	37d8      	adds	r7, #216	; 0xd8

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2770:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2772:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    2774:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    2776:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2778:	4b1e      	ldr	r3, [pc, #120]	; (27f4 <sampleTick+0x3a8>)
    277a:	4798      	blx	r3
    277c:	23fe      	movs	r3, #254	; 0xfe
    277e:	2200      	movs	r2, #0
    2780:	4f1e      	ldr	r7, [pc, #120]	; (27fc <sampleTick+0x3b0>)
    2782:	059b      	lsls	r3, r3, #22
    2784:	47b8      	blx	r7
    2786:	4b1f      	ldr	r3, [pc, #124]	; (2804 <sampleTick+0x3b8>)
    2788:	4798      	blx	r3
    278a:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    278c:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    278e:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    2790:	2300      	movs	r3, #0
    2792:	5ef0      	ldrsh	r0, [r6, r3]
    2794:	4b17      	ldr	r3, [pc, #92]	; (27f4 <sampleTick+0x3a8>)
    2796:	4798      	blx	r3
    2798:	23fe      	movs	r3, #254	; 0xfe
    279a:	2200      	movs	r2, #0
    279c:	4e17      	ldr	r6, [pc, #92]	; (27fc <sampleTick+0x3b0>)
    279e:	059b      	lsls	r3, r3, #22
    27a0:	47b0      	blx	r6
    27a2:	4b18      	ldr	r3, [pc, #96]	; (2804 <sampleTick+0x3b8>)
    27a4:	4798      	blx	r3
    27a6:	37dc      	adds	r7, #220	; 0xdc
    27a8:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    27aa:	2302      	movs	r3, #2
    27ac:	5ee8      	ldrsh	r0, [r5, r3]
    27ae:	4b11      	ldr	r3, [pc, #68]	; (27f4 <sampleTick+0x3a8>)
    27b0:	4798      	blx	r3
    27b2:	23fe      	movs	r3, #254	; 0xfe
    27b4:	2200      	movs	r2, #0
    27b6:	4d11      	ldr	r5, [pc, #68]	; (27fc <sampleTick+0x3b0>)
    27b8:	059b      	lsls	r3, r3, #22
    27ba:	47a8      	blx	r5
    27bc:	0026      	movs	r6, r4
    27be:	4b11      	ldr	r3, [pc, #68]	; (2804 <sampleTick+0x3b8>)
    27c0:	4798      	blx	r3
    27c2:	36e0      	adds	r6, #224	; 0xe0
    27c4:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    27c6:	4b1c      	ldr	r3, [pc, #112]	; (2838 <sampleTick+0x3ec>)
    27c8:	2005      	movs	r0, #5
    27ca:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    27cc:	4b16      	ldr	r3, [pc, #88]	; (2828 <sampleTick+0x3dc>)
    27ce:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    27d0:	3410      	adds	r4, #16
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    27d2:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    27d4:	4b19      	ldr	r3, [pc, #100]	; (283c <sampleTick+0x3f0>)
    27d6:	0020      	movs	r0, r4
    27d8:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    27da:	0020      	movs	r0, r4
    27dc:	4b18      	ldr	r3, [pc, #96]	; (2840 <sampleTick+0x3f4>)
    27de:	4798      	blx	r3


}
    27e0:	b007      	add	sp, #28
    27e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e4:	200004d3 	.word	0x200004d3
    27e8:	00001015 	.word	0x00001015
    27ec:	00006814 	.word	0x00006814
    27f0:	00000c89 	.word	0x00000c89
    27f4:	000060b9 	.word	0x000060b9
    27f8:	77318fc5 	.word	0x77318fc5
    27fc:	00005471 	.word	0x00005471
    2800:	3f5f212d 	.word	0x3f5f212d
    2804:	00006255 	.word	0x00006255
    2808:	0000031e 	.word	0x0000031e
    280c:	00000322 	.word	0x00000322
    2810:	fffff0c4 	.word	0xfffff0c4
    2814:	02de00d2 	.word	0x02de00d2
    2818:	bf8f8a09 	.word	0xbf8f8a09
    281c:	41004400 	.word	0x41004400
    2820:	00000cf1 	.word	0x00000cf1
    2824:	00000f99 	.word	0x00000f99
    2828:	0000041d 	.word	0x0000041d
    282c:	41004494 	.word	0x41004494
    2830:	00002955 	.word	0x00002955
    2834:	41004498 	.word	0x41004498
    2838:	00000fc9 	.word	0x00000fc9
    283c:	000004d1 	.word	0x000004d1
    2840:	00000579 	.word	0x00000579

00002844 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2844:	b570      	push	{r4, r5, r6, lr}
    2846:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2848:	2301      	movs	r3, #1
    284a:	1ca6      	adds	r6, r4, #2
    284c:	40b3      	lsls	r3, r6
    284e:	480d      	ldr	r0, [pc, #52]	; (2884 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2850:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2852:	6a01      	ldr	r1, [r0, #32]
    2854:	430b      	orrs	r3, r1
    2856:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2858:	2d00      	cmp	r5, #0
    285a:	d003      	beq.n	2864 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    285c:	2107      	movs	r1, #7
    285e:	0028      	movs	r0, r5
    2860:	4b09      	ldr	r3, [pc, #36]	; (2888 <sercomClockEnable+0x44>)
    2862:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2864:	22f0      	movs	r2, #240	; 0xf0
    2866:	2080      	movs	r0, #128	; 0x80
    2868:	0229      	lsls	r1, r5, #8
    286a:	0112      	lsls	r2, r2, #4
    286c:	4011      	ands	r1, r2
    286e:	01c0      	lsls	r0, r0, #7
    2870:	4301      	orrs	r1, r0
    2872:	0020      	movs	r0, r4
    2874:	3014      	adds	r0, #20
    2876:	223f      	movs	r2, #63	; 0x3f
    2878:	0003      	movs	r3, r0
    287a:	4013      	ands	r3, r2
    287c:	4319      	orrs	r1, r3
    287e:	4b03      	ldr	r3, [pc, #12]	; (288c <sercomClockEnable+0x48>)
    2880:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2882:	bd70      	pop	{r4, r5, r6, pc}
    2884:	40000400 	.word	0x40000400
    2888:	00000f49 	.word	0x00000f49
    288c:	40000c00 	.word	0x40000c00

00002890 <sercomReset>:
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2890:	4b04      	ldr	r3, [pc, #16]	; (28a4 <sercomReset+0x14>)
    2892:	0280      	lsls	r0, r0, #10
    2894:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2896:	2301      	movs	r3, #1
    2898:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    289a:	6802      	ldr	r2, [r0, #0]
    289c:	421a      	tst	r2, r3
    289e:	d1fc      	bne.n	289a <sercomReset+0xa>
}
    28a0:	4770      	bx	lr
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	42000800 	.word	0x42000800

000028a8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    28a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28aa:	0004      	movs	r4, r0
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	ab08      	add	r3, sp, #32
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	000e      	movs	r6, r1
    28b4:	9301      	str	r3, [sp, #4]
    28b6:	ab09      	add	r3, sp, #36	; 0x24
    28b8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    28ba:	4b12      	ldr	r3, [pc, #72]	; (2904 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    28bc:	0015      	movs	r5, r2

    sercomReset(id);
    28be:	4798      	blx	r3
    28c0:	4b11      	ldr	r3, [pc, #68]	; (2908 <sercomSpiMasterInit+0x60>)
    28c2:	02a4      	lsls	r4, r4, #10
    28c4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    28c6:	2380      	movs	r3, #128	; 0x80
    28c8:	029b      	lsls	r3, r3, #10
    28ca:	6063      	str	r3, [r4, #4]
    28cc:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    28ce:	21c0      	movs	r1, #192	; 0xc0
    28d0:	042d      	lsls	r5, r5, #16
    28d2:	029b      	lsls	r3, r3, #10
    28d4:	402b      	ands	r3, r5
    28d6:	250e      	movs	r5, #14
    28d8:	0536      	lsls	r6, r6, #20
    28da:	0389      	lsls	r1, r1, #14
    28dc:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    28de:	9e00      	ldr	r6, [sp, #0]
    28e0:	431d      	orrs	r5, r3
    28e2:	1e73      	subs	r3, r6, #1
    28e4:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    28e6:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    28e8:	0772      	lsls	r2, r6, #29
    28ea:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    28ec:	432a      	orrs	r2, r5
    28ee:	1e59      	subs	r1, r3, #1
    28f0:	418b      	sbcs	r3, r1
    28f2:	0016      	movs	r6, r2
    28f4:	071b      	lsls	r3, r3, #28
    28f6:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    28f8:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    28fa:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    28fc:	69e3      	ldr	r3, [r4, #28]
    28fe:	075b      	lsls	r3, r3, #29
    2900:	d4fc      	bmi.n	28fc <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2902:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2904:	00002891 	.word	0x00002891
    2908:	42000800 	.word	0x42000800

0000290c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    2910:	4b0c      	ldr	r3, [pc, #48]	; (2944 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2912:	000d      	movs	r5, r1
    2914:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    2916:	4798      	blx	r3
void computeKalmanStates(Altimeter *my_altimeter);


//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2918:	4b0b      	ldr	r3, [pc, #44]	; (2948 <sercomUartInit+0x3c>)
    291a:	02b0      	lsls	r0, r6, #10
    291c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    291e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2920:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2922:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2924:	4b09      	ldr	r3, [pc, #36]	; (294c <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2926:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2928:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    292a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    292c:	0392      	lsls	r2, r2, #14
    292e:	4011      	ands	r1, r2
    2930:	4a07      	ldr	r2, [pc, #28]	; (2950 <sercomUartInit+0x44>)
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2932:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2934:	0424      	lsls	r4, r4, #16
	
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2936:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2938:	4311      	orrs	r1, r2
    293a:	4023      	ands	r3, r4
    293c:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    293e:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2940:	bd70      	pop	{r4, r5, r6, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	00002891 	.word	0x00002891
    2948:	42000800 	.word	0x42000800
    294c:	ffffb15b 	.word	0xffffb15b
    2950:	40000006 	.word	0x40000006

00002954 <spiDataTransfer>:
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <spiDataTransfer+0x14>)
    2956:	0280      	lsls	r0, r0, #10
    2958:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    295a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    295c:	7e03      	ldrb	r3, [r0, #24]
    295e:	075b      	lsls	r3, r3, #29
    2960:	d5fc      	bpl.n	295c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2962:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2964:	b2c0      	uxtb	r0, r0
}
    2966:	4770      	bx	lr
    2968:	42000800 	.word	0x42000800

0000296c <usartDataOut>:
    296c:	4b04      	ldr	r3, [pc, #16]	; (2980 <usartDataOut+0x14>)
    296e:	0280      	lsls	r0, r0, #10
    2970:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2972:	b289      	uxth	r1, r1
    2974:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2976:	7e03      	ldrb	r3, [r0, #24]
    2978:	07db      	lsls	r3, r3, #31
    297a:	d5fc      	bpl.n	2976 <usartDataOut+0xa>
}
    297c:	4770      	bx	lr
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	42000800 	.word	0x42000800

00002984 <usartDataIn>:
    2984:	4b02      	ldr	r3, [pc, #8]	; (2990 <usartDataIn+0xc>)
    2986:	0280      	lsls	r0, r0, #10
    2988:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    298a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    298c:	b2c0      	uxtb	r0, r0
}
    298e:	4770      	bx	lr
    2990:	42000800 	.word	0x42000800

00002994 <attemptConnection>:
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2996:	4b2f      	ldr	r3, [pc, #188]	; (2a54 <attemptConnection+0xc0>)
#include <boardDefines.h>




void attemptConnection(Altimeter *my_altimeter) {
    2998:	0004      	movs	r4, r0

    if (USARTconnectionAvaliable()) {
    299a:	4798      	blx	r3
    299c:	2800      	cmp	r0, #0
    299e:	d057      	beq.n	2a50 <attemptConnection+0xbc>

        my_altimeter->myFlightState = flightIdle;
    29a0:	2301      	movs	r3, #1

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    29a2:	4a2d      	ldr	r2, [pc, #180]	; (2a58 <attemptConnection+0xc4>)

void attemptConnection(Altimeter *my_altimeter) {

    if (USARTconnectionAvaliable()) {

        my_altimeter->myFlightState = flightIdle;
    29a4:	7023      	strb	r3, [r4, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    29a6:	7e13      	ldrb	r3, [r2, #24]
    29a8:	4e2b      	ldr	r6, [pc, #172]	; (2a58 <attemptConnection+0xc4>)
    29aa:	075b      	lsls	r3, r3, #29
    29ac:	d5fb      	bpl.n	29a6 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    29ae:	2003      	movs	r0, #3
    29b0:	4d2a      	ldr	r5, [pc, #168]	; (2a5c <attemptConnection+0xc8>)
    29b2:	47a8      	blx	r5
    29b4:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    29b6:	2c4c      	cmp	r4, #76	; 0x4c
    29b8:	d13c      	bne.n	2a34 <attemptConnection+0xa0>
    29ba:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    29bc:	0020      	movs	r0, r4
    29be:	4b28      	ldr	r3, [pc, #160]	; (2a60 <attemptConnection+0xcc>)
    29c0:	4798      	blx	r3
    29c2:	2800      	cmp	r0, #0
    29c4:	d005      	beq.n	29d2 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    29c6:	0021      	movs	r1, r4
    29c8:	3130      	adds	r1, #48	; 0x30
    29ca:	b2c9      	uxtb	r1, r1
    29cc:	2003      	movs	r0, #3
    29ce:	4b25      	ldr	r3, [pc, #148]	; (2a64 <attemptConnection+0xd0>)
    29d0:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    29d2:	3401      	adds	r4, #1
    29d4:	b2e4      	uxtb	r4, r4
    29d6:	2c0b      	cmp	r4, #11
    29d8:	d1f0      	bne.n	29bc <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    29da:	210f      	movs	r1, #15
    29dc:	2003      	movs	r0, #3
    29de:	4c21      	ldr	r4, [pc, #132]	; (2a64 <attemptConnection+0xd0>)
    29e0:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    29e2:	7e33      	ldrb	r3, [r6, #24]
    29e4:	075b      	lsls	r3, r3, #29
    29e6:	d5fc      	bpl.n	29e2 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    29e8:	2003      	movs	r0, #3
    29ea:	47a8      	blx	r5
    29ec:	3830      	subs	r0, #48	; 0x30
    29ee:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    29f0:	0028      	movs	r0, r5
    29f2:	4b1d      	ldr	r3, [pc, #116]	; (2a68 <attemptConnection+0xd4>)
    29f4:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    29f6:	4b1d      	ldr	r3, [pc, #116]	; (2a6c <attemptConnection+0xd8>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    29f8:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    29fa:	0028      	movs	r0, r5
    29fc:	4798      	blx	r3
    29fe:	1e46      	subs	r6, r0, #1
    2a00:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2a02:	1bf5      	subs	r5, r6, r7
    2a04:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2a06:	b2e9      	uxtb	r1, r5
    2a08:	2003      	movs	r0, #3
    2a0a:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2a0c:	b2a9      	uxth	r1, r5
    2a0e:	0a09      	lsrs	r1, r1, #8
    2a10:	2003      	movs	r0, #3
    2a12:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2a14:	b2f1      	uxtb	r1, r6
    2a16:	2003      	movs	r0, #3
    2a18:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2a1a:	0a31      	lsrs	r1, r6, #8
    2a1c:	b2c9      	uxtb	r1, r1
    2a1e:	2003      	movs	r0, #3
    2a20:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2a22:	0c31      	lsrs	r1, r6, #16
    2a24:	b2c9      	uxtb	r1, r1
    2a26:	2003      	movs	r0, #3
    2a28:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2a2a:	0031      	movs	r1, r6
    2a2c:	0038      	movs	r0, r7
    2a2e:	4b10      	ldr	r3, [pc, #64]	; (2a70 <attemptConnection+0xdc>)
    2a30:	4798      	blx	r3
    2a32:	e00d      	b.n	2a50 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2a34:	2845      	cmp	r0, #69	; 0x45
    2a36:	d10b      	bne.n	2a50 <attemptConnection+0xbc>
            AT25SFChipErase();
    2a38:	4b0e      	ldr	r3, [pc, #56]	; (2a74 <attemptConnection+0xe0>)
    2a3a:	4798      	blx	r3

            AT25SFHoldTillReady();
    2a3c:	4b0e      	ldr	r3, [pc, #56]	; (2a78 <attemptConnection+0xe4>)
    2a3e:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    2a40:	2003      	movs	r0, #3
    2a42:	4b08      	ldr	r3, [pc, #32]	; (2a64 <attemptConnection+0xd0>)
    2a44:	0021      	movs	r1, r4
    2a46:	4798      	blx	r3
            beep(400);
    2a48:	20c8      	movs	r0, #200	; 0xc8
    2a4a:	4b0c      	ldr	r3, [pc, #48]	; (2a7c <attemptConnection+0xe8>)
    2a4c:	0040      	lsls	r0, r0, #1
    2a4e:	4798      	blx	r3


        }
    }

}
    2a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	00000b91 	.word	0x00000b91
    2a58:	42001400 	.word	0x42001400
    2a5c:	00002985 	.word	0x00002985
    2a60:	00002331 	.word	0x00002331
    2a64:	0000296d 	.word	0x0000296d
    2a68:	000022e1 	.word	0x000022e1
    2a6c:	00002309 	.word	0x00002309
    2a70:	00000bc5 	.word	0x00000bc5
    2a74:	00000221 	.word	0x00000221
    2a78:	000001e5 	.word	0x000001e5
    2a7c:	00000db1 	.word	0x00000db1

00002a80 <pow>:
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a82:	465f      	mov	r7, fp
    2a84:	464d      	mov	r5, r9
    2a86:	4656      	mov	r6, sl
    2a88:	4644      	mov	r4, r8
    2a8a:	b4f0      	push	{r4, r5, r6, r7}
    2a8c:	b091      	sub	sp, #68	; 0x44
    2a8e:	001f      	movs	r7, r3
    2a90:	0004      	movs	r4, r0
    2a92:	000d      	movs	r5, r1
    2a94:	0016      	movs	r6, r2
    2a96:	f000 f9af 	bl	2df8 <__ieee754_pow>
    2a9a:	4bcf      	ldr	r3, [pc, #828]	; (2dd8 <pow+0x358>)
    2a9c:	9002      	str	r0, [sp, #8]
    2a9e:	9103      	str	r1, [sp, #12]
    2aa0:	469b      	mov	fp, r3
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	b25b      	sxtb	r3, r3
    2aa6:	4699      	mov	r9, r3
    2aa8:	3301      	adds	r3, #1
    2aaa:	d04f      	beq.n	2b4c <pow+0xcc>
    2aac:	0032      	movs	r2, r6
    2aae:	003b      	movs	r3, r7
    2ab0:	0030      	movs	r0, r6
    2ab2:	0039      	movs	r1, r7
    2ab4:	f003 faaa 	bl	600c <__aeabi_dcmpun>
    2ab8:	9000      	str	r0, [sp, #0]
    2aba:	2800      	cmp	r0, #0
    2abc:	d146      	bne.n	2b4c <pow+0xcc>
    2abe:	0022      	movs	r2, r4
    2ac0:	002b      	movs	r3, r5
    2ac2:	0020      	movs	r0, r4
    2ac4:	0029      	movs	r1, r5
    2ac6:	f003 faa1 	bl	600c <__aeabi_dcmpun>
    2aca:	2200      	movs	r2, #0
    2acc:	4682      	mov	sl, r0
    2ace:	2800      	cmp	r0, #0
    2ad0:	d134      	bne.n	2b3c <pow+0xbc>
    2ad2:	2300      	movs	r3, #0
    2ad4:	0020      	movs	r0, r4
    2ad6:	0029      	movs	r1, r5
    2ad8:	f001 f8fc 	bl	3cd4 <__aeabi_dcmpeq>
    2adc:	2800      	cmp	r0, #0
    2ade:	d03a      	beq.n	2b56 <pow+0xd6>
    2ae0:	2200      	movs	r2, #0
    2ae2:	2300      	movs	r3, #0
    2ae4:	0030      	movs	r0, r6
    2ae6:	0039      	movs	r1, r7
    2ae8:	f001 f8f4 	bl	3cd4 <__aeabi_dcmpeq>
    2aec:	9005      	str	r0, [sp, #20]
    2aee:	2800      	cmp	r0, #0
    2af0:	d100      	bne.n	2af4 <pow+0x74>
    2af2:	e074      	b.n	2bde <pow+0x15e>
    2af4:	ab06      	add	r3, sp, #24
    2af6:	4698      	mov	r8, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4642      	mov	r2, r8
    2afc:	9306      	str	r3, [sp, #24]
    2afe:	4bb7      	ldr	r3, [pc, #732]	; (2ddc <pow+0x35c>)
    2b00:	6053      	str	r3, [r2, #4]
    2b02:	4643      	mov	r3, r8
    2b04:	4652      	mov	r2, sl
    2b06:	609c      	str	r4, [r3, #8]
    2b08:	60dd      	str	r5, [r3, #12]
    2b0a:	621a      	str	r2, [r3, #32]
    2b0c:	611e      	str	r6, [r3, #16]
    2b0e:	615f      	str	r7, [r3, #20]
    2b10:	4642      	mov	r2, r8
    2b12:	2300      	movs	r3, #0
    2b14:	2400      	movs	r4, #0
    2b16:	6193      	str	r3, [r2, #24]
    2b18:	61d4      	str	r4, [r2, #28]
    2b1a:	464b      	mov	r3, r9
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d100      	bne.n	2b22 <pow+0xa2>
    2b20:	e094      	b.n	2c4c <pow+0x1cc>
    2b22:	2300      	movs	r3, #0
    2b24:	4cae      	ldr	r4, [pc, #696]	; (2de0 <pow+0x360>)
    2b26:	9300      	str	r3, [sp, #0]
    2b28:	9401      	str	r4, [sp, #4]
    2b2a:	9800      	ldr	r0, [sp, #0]
    2b2c:	9901      	ldr	r1, [sp, #4]
    2b2e:	b011      	add	sp, #68	; 0x44
    2b30:	bc3c      	pop	{r2, r3, r4, r5}
    2b32:	4690      	mov	r8, r2
    2b34:	4699      	mov	r9, r3
    2b36:	46a2      	mov	sl, r4
    2b38:	46ab      	mov	fp, r5
    2b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b3c:	2300      	movs	r3, #0
    2b3e:	0030      	movs	r0, r6
    2b40:	0039      	movs	r1, r7
    2b42:	f001 f8c7 	bl	3cd4 <__aeabi_dcmpeq>
    2b46:	2800      	cmp	r0, #0
    2b48:	d000      	beq.n	2b4c <pow+0xcc>
    2b4a:	e0eb      	b.n	2d24 <pow+0x2a4>
    2b4c:	9b02      	ldr	r3, [sp, #8]
    2b4e:	9c03      	ldr	r4, [sp, #12]
    2b50:	9300      	str	r3, [sp, #0]
    2b52:	9401      	str	r4, [sp, #4]
    2b54:	e7e9      	b.n	2b2a <pow+0xaa>
    2b56:	9802      	ldr	r0, [sp, #8]
    2b58:	9903      	ldr	r1, [sp, #12]
    2b5a:	f000 ff7d 	bl	3a58 <finite>
    2b5e:	4681      	mov	r9, r0
    2b60:	2800      	cmp	r0, #0
    2b62:	d100      	bne.n	2b66 <pow+0xe6>
    2b64:	e086      	b.n	2c74 <pow+0x1f4>
    2b66:	9802      	ldr	r0, [sp, #8]
    2b68:	9903      	ldr	r1, [sp, #12]
    2b6a:	2200      	movs	r2, #0
    2b6c:	2300      	movs	r3, #0
    2b6e:	f001 f8b1 	bl	3cd4 <__aeabi_dcmpeq>
    2b72:	2800      	cmp	r0, #0
    2b74:	d0ea      	beq.n	2b4c <pow+0xcc>
    2b76:	0020      	movs	r0, r4
    2b78:	0029      	movs	r1, r5
    2b7a:	f000 ff6d 	bl	3a58 <finite>
    2b7e:	9a02      	ldr	r2, [sp, #8]
    2b80:	9b03      	ldr	r3, [sp, #12]
    2b82:	9200      	str	r2, [sp, #0]
    2b84:	9301      	str	r3, [sp, #4]
    2b86:	2800      	cmp	r0, #0
    2b88:	d0cf      	beq.n	2b2a <pow+0xaa>
    2b8a:	0030      	movs	r0, r6
    2b8c:	0039      	movs	r1, r7
    2b8e:	f000 ff63 	bl	3a58 <finite>
    2b92:	9a02      	ldr	r2, [sp, #8]
    2b94:	9b03      	ldr	r3, [sp, #12]
    2b96:	9200      	str	r2, [sp, #0]
    2b98:	9301      	str	r3, [sp, #4]
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d0c5      	beq.n	2b2a <pow+0xaa>
    2b9e:	ab06      	add	r3, sp, #24
    2ba0:	4698      	mov	r8, r3
    2ba2:	2304      	movs	r3, #4
    2ba4:	4642      	mov	r2, r8
    2ba6:	9306      	str	r3, [sp, #24]
    2ba8:	4b8c      	ldr	r3, [pc, #560]	; (2ddc <pow+0x35c>)
    2baa:	6094      	str	r4, [r2, #8]
    2bac:	60d5      	str	r5, [r2, #12]
    2bae:	6053      	str	r3, [r2, #4]
    2bb0:	2300      	movs	r3, #0
    2bb2:	2400      	movs	r4, #0
    2bb4:	6213      	str	r3, [r2, #32]
    2bb6:	2300      	movs	r3, #0
    2bb8:	6193      	str	r3, [r2, #24]
    2bba:	61d4      	str	r4, [r2, #28]
    2bbc:	465b      	mov	r3, fp
    2bbe:	781b      	ldrb	r3, [r3, #0]
    2bc0:	6116      	str	r6, [r2, #16]
    2bc2:	6157      	str	r7, [r2, #20]
    2bc4:	b25b      	sxtb	r3, r3
    2bc6:	2b02      	cmp	r3, #2
    2bc8:	d004      	beq.n	2bd4 <pow+0x154>
    2bca:	4640      	mov	r0, r8
    2bcc:	f000 ff4e 	bl	3a6c <matherr>
    2bd0:	2800      	cmp	r0, #0
    2bd2:	d140      	bne.n	2c56 <pow+0x1d6>
    2bd4:	f003 fc74 	bl	64c0 <__errno>
    2bd8:	2322      	movs	r3, #34	; 0x22
    2bda:	6003      	str	r3, [r0, #0]
    2bdc:	e03b      	b.n	2c56 <pow+0x1d6>
    2bde:	0030      	movs	r0, r6
    2be0:	0039      	movs	r1, r7
    2be2:	f000 ff39 	bl	3a58 <finite>
    2be6:	9a02      	ldr	r2, [sp, #8]
    2be8:	9b03      	ldr	r3, [sp, #12]
    2bea:	9200      	str	r2, [sp, #0]
    2bec:	9301      	str	r3, [sp, #4]
    2bee:	2800      	cmp	r0, #0
    2bf0:	d09b      	beq.n	2b2a <pow+0xaa>
    2bf2:	2200      	movs	r2, #0
    2bf4:	2300      	movs	r3, #0
    2bf6:	0030      	movs	r0, r6
    2bf8:	0039      	movs	r1, r7
    2bfa:	f001 f871 	bl	3ce0 <__aeabi_dcmplt>
    2bfe:	2800      	cmp	r0, #0
    2c00:	d100      	bne.n	2c04 <pow+0x184>
    2c02:	e792      	b.n	2b2a <pow+0xaa>
    2c04:	ab06      	add	r3, sp, #24
    2c06:	4698      	mov	r8, r3
    2c08:	2301      	movs	r3, #1
    2c0a:	4642      	mov	r2, r8
    2c0c:	9306      	str	r3, [sp, #24]
    2c0e:	4b73      	ldr	r3, [pc, #460]	; (2ddc <pow+0x35c>)
    2c10:	6053      	str	r3, [r2, #4]
    2c12:	4643      	mov	r3, r8
    2c14:	9a05      	ldr	r2, [sp, #20]
    2c16:	609c      	str	r4, [r3, #8]
    2c18:	60dd      	str	r5, [r3, #12]
    2c1a:	621a      	str	r2, [r3, #32]
    2c1c:	611e      	str	r6, [r3, #16]
    2c1e:	615f      	str	r7, [r3, #20]
    2c20:	465b      	mov	r3, fp
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	b25b      	sxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	d00b      	beq.n	2c42 <pow+0x1c2>
    2c2a:	2000      	movs	r0, #0
    2c2c:	4642      	mov	r2, r8
    2c2e:	496d      	ldr	r1, [pc, #436]	; (2de4 <pow+0x364>)
    2c30:	6190      	str	r0, [r2, #24]
    2c32:	61d1      	str	r1, [r2, #28]
    2c34:	2b02      	cmp	r3, #2
    2c36:	d109      	bne.n	2c4c <pow+0x1cc>
    2c38:	f003 fc42 	bl	64c0 <__errno>
    2c3c:	2321      	movs	r3, #33	; 0x21
    2c3e:	6003      	str	r3, [r0, #0]
    2c40:	e009      	b.n	2c56 <pow+0x1d6>
    2c42:	4642      	mov	r2, r8
    2c44:	2300      	movs	r3, #0
    2c46:	2400      	movs	r4, #0
    2c48:	6193      	str	r3, [r2, #24]
    2c4a:	61d4      	str	r4, [r2, #28]
    2c4c:	4640      	mov	r0, r8
    2c4e:	f000 ff0d 	bl	3a6c <matherr>
    2c52:	2800      	cmp	r0, #0
    2c54:	d0f0      	beq.n	2c38 <pow+0x1b8>
    2c56:	4643      	mov	r3, r8
    2c58:	6a1b      	ldr	r3, [r3, #32]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d004      	beq.n	2c68 <pow+0x1e8>
    2c5e:	f003 fc2f 	bl	64c0 <__errno>
    2c62:	4643      	mov	r3, r8
    2c64:	6a1b      	ldr	r3, [r3, #32]
    2c66:	6003      	str	r3, [r0, #0]
    2c68:	4643      	mov	r3, r8
    2c6a:	69dc      	ldr	r4, [r3, #28]
    2c6c:	699b      	ldr	r3, [r3, #24]
    2c6e:	9300      	str	r3, [sp, #0]
    2c70:	9401      	str	r4, [sp, #4]
    2c72:	e75a      	b.n	2b2a <pow+0xaa>
    2c74:	0020      	movs	r0, r4
    2c76:	0029      	movs	r1, r5
    2c78:	f000 feee 	bl	3a58 <finite>
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d100      	bne.n	2c82 <pow+0x202>
    2c80:	e771      	b.n	2b66 <pow+0xe6>
    2c82:	0030      	movs	r0, r6
    2c84:	0039      	movs	r1, r7
    2c86:	f000 fee7 	bl	3a58 <finite>
    2c8a:	2800      	cmp	r0, #0
    2c8c:	d100      	bne.n	2c90 <pow+0x210>
    2c8e:	e76a      	b.n	2b66 <pow+0xe6>
    2c90:	9802      	ldr	r0, [sp, #8]
    2c92:	9903      	ldr	r1, [sp, #12]
    2c94:	000b      	movs	r3, r1
    2c96:	0002      	movs	r2, r0
    2c98:	f003 f9b8 	bl	600c <__aeabi_dcmpun>
    2c9c:	ab06      	add	r3, sp, #24
    2c9e:	4698      	mov	r8, r3
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d17a      	bne.n	2d9a <pow+0x31a>
    2ca4:	2303      	movs	r3, #3
    2ca6:	4642      	mov	r2, r8
    2ca8:	9306      	str	r3, [sp, #24]
    2caa:	4b4c      	ldr	r3, [pc, #304]	; (2ddc <pow+0x35c>)
    2cac:	6210      	str	r0, [r2, #32]
    2cae:	6053      	str	r3, [r2, #4]
    2cb0:	465b      	mov	r3, fp
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	6094      	str	r4, [r2, #8]
    2cb6:	60d5      	str	r5, [r2, #12]
    2cb8:	b25b      	sxtb	r3, r3
    2cba:	6116      	str	r6, [r2, #16]
    2cbc:	6157      	str	r7, [r2, #20]
    2cbe:	4699      	mov	r9, r3
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d148      	bne.n	2d56 <pow+0x2d6>
    2cc4:	22e0      	movs	r2, #224	; 0xe0
    2cc6:	4641      	mov	r1, r8
    2cc8:	4b47      	ldr	r3, [pc, #284]	; (2de8 <pow+0x368>)
    2cca:	0612      	lsls	r2, r2, #24
    2ccc:	618a      	str	r2, [r1, #24]
    2cce:	61cb      	str	r3, [r1, #28]
    2cd0:	0020      	movs	r0, r4
    2cd2:	2200      	movs	r2, #0
    2cd4:	2300      	movs	r3, #0
    2cd6:	0029      	movs	r1, r5
    2cd8:	f001 f802 	bl	3ce0 <__aeabi_dcmplt>
    2cdc:	2800      	cmp	r0, #0
    2cde:	d100      	bne.n	2ce2 <pow+0x262>
    2ce0:	e773      	b.n	2bca <pow+0x14a>
    2ce2:	2200      	movs	r2, #0
    2ce4:	4b41      	ldr	r3, [pc, #260]	; (2dec <pow+0x36c>)
    2ce6:	0030      	movs	r0, r6
    2ce8:	0039      	movs	r1, r7
    2cea:	f002 fbc1 	bl	5470 <__aeabi_dmul>
    2cee:	0004      	movs	r4, r0
    2cf0:	000d      	movs	r5, r1
    2cf2:	f000 fec3 	bl	3a7c <rint>
    2cf6:	0002      	movs	r2, r0
    2cf8:	000b      	movs	r3, r1
    2cfa:	0020      	movs	r0, r4
    2cfc:	0029      	movs	r1, r5
    2cfe:	f000 ffe9 	bl	3cd4 <__aeabi_dcmpeq>
    2d02:	2800      	cmp	r0, #0
    2d04:	d105      	bne.n	2d12 <pow+0x292>
    2d06:	22e0      	movs	r2, #224	; 0xe0
    2d08:	4b39      	ldr	r3, [pc, #228]	; (2df0 <pow+0x370>)
    2d0a:	0612      	lsls	r2, r2, #24
    2d0c:	4641      	mov	r1, r8
    2d0e:	618a      	str	r2, [r1, #24]
    2d10:	61cb      	str	r3, [r1, #28]
    2d12:	465b      	mov	r3, fp
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	b25b      	sxtb	r3, r3
    2d18:	4699      	mov	r9, r3
    2d1a:	464b      	mov	r3, r9
    2d1c:	2b02      	cmp	r3, #2
    2d1e:	d000      	beq.n	2d22 <pow+0x2a2>
    2d20:	e753      	b.n	2bca <pow+0x14a>
    2d22:	e757      	b.n	2bd4 <pow+0x154>
    2d24:	ab06      	add	r3, sp, #24
    2d26:	4698      	mov	r8, r3
    2d28:	2301      	movs	r3, #1
    2d2a:	4642      	mov	r2, r8
    2d2c:	9306      	str	r3, [sp, #24]
    2d2e:	4b2b      	ldr	r3, [pc, #172]	; (2ddc <pow+0x35c>)
    2d30:	6053      	str	r3, [r2, #4]
    2d32:	4643      	mov	r3, r8
    2d34:	609c      	str	r4, [r3, #8]
    2d36:	60dd      	str	r5, [r3, #12]
    2d38:	2400      	movs	r4, #0
    2d3a:	9a00      	ldr	r2, [sp, #0]
    2d3c:	4d28      	ldr	r5, [pc, #160]	; (2de0 <pow+0x360>)
    2d3e:	621a      	str	r2, [r3, #32]
    2d40:	611e      	str	r6, [r3, #16]
    2d42:	615f      	str	r7, [r3, #20]
    2d44:	619c      	str	r4, [r3, #24]
    2d46:	61dd      	str	r5, [r3, #28]
    2d48:	464b      	mov	r3, r9
    2d4a:	9400      	str	r4, [sp, #0]
    2d4c:	9501      	str	r5, [sp, #4]
    2d4e:	2b02      	cmp	r3, #2
    2d50:	d000      	beq.n	2d54 <pow+0x2d4>
    2d52:	e77b      	b.n	2c4c <pow+0x1cc>
    2d54:	e6e9      	b.n	2b2a <pow+0xaa>
    2d56:	2200      	movs	r2, #0
    2d58:	4641      	mov	r1, r8
    2d5a:	4b26      	ldr	r3, [pc, #152]	; (2df4 <pow+0x374>)
    2d5c:	0020      	movs	r0, r4
    2d5e:	618a      	str	r2, [r1, #24]
    2d60:	61cb      	str	r3, [r1, #28]
    2d62:	2200      	movs	r2, #0
    2d64:	2300      	movs	r3, #0
    2d66:	0029      	movs	r1, r5
    2d68:	f000 ffba 	bl	3ce0 <__aeabi_dcmplt>
    2d6c:	2800      	cmp	r0, #0
    2d6e:	d0d4      	beq.n	2d1a <pow+0x29a>
    2d70:	2200      	movs	r2, #0
    2d72:	4b1e      	ldr	r3, [pc, #120]	; (2dec <pow+0x36c>)
    2d74:	0030      	movs	r0, r6
    2d76:	0039      	movs	r1, r7
    2d78:	f002 fb7a 	bl	5470 <__aeabi_dmul>
    2d7c:	0004      	movs	r4, r0
    2d7e:	000d      	movs	r5, r1
    2d80:	f000 fe7c 	bl	3a7c <rint>
    2d84:	0002      	movs	r2, r0
    2d86:	000b      	movs	r3, r1
    2d88:	0020      	movs	r0, r4
    2d8a:	0029      	movs	r1, r5
    2d8c:	f000 ffa2 	bl	3cd4 <__aeabi_dcmpeq>
    2d90:	2800      	cmp	r0, #0
    2d92:	d1be      	bne.n	2d12 <pow+0x292>
    2d94:	2200      	movs	r2, #0
    2d96:	4b13      	ldr	r3, [pc, #76]	; (2de4 <pow+0x364>)
    2d98:	e7b8      	b.n	2d0c <pow+0x28c>
    2d9a:	2301      	movs	r3, #1
    2d9c:	4642      	mov	r2, r8
    2d9e:	9306      	str	r3, [sp, #24]
    2da0:	4b0e      	ldr	r3, [pc, #56]	; (2ddc <pow+0x35c>)
    2da2:	6053      	str	r3, [r2, #4]
    2da4:	4643      	mov	r3, r8
    2da6:	464a      	mov	r2, r9
    2da8:	609c      	str	r4, [r3, #8]
    2daa:	60dd      	str	r5, [r3, #12]
    2dac:	621a      	str	r2, [r3, #32]
    2dae:	611e      	str	r6, [r3, #16]
    2db0:	615f      	str	r7, [r3, #20]
    2db2:	2400      	movs	r4, #0
    2db4:	465b      	mov	r3, fp
    2db6:	571c      	ldrsb	r4, [r3, r4]
    2db8:	2c00      	cmp	r4, #0
    2dba:	d100      	bne.n	2dbe <pow+0x33e>
    2dbc:	e741      	b.n	2c42 <pow+0x1c2>
    2dbe:	2300      	movs	r3, #0
    2dc0:	2200      	movs	r2, #0
    2dc2:	0019      	movs	r1, r3
    2dc4:	0010      	movs	r0, r2
    2dc6:	f001 ff2f 	bl	4c28 <__aeabi_ddiv>
    2dca:	4643      	mov	r3, r8
    2dcc:	6198      	str	r0, [r3, #24]
    2dce:	61d9      	str	r1, [r3, #28]
    2dd0:	2c02      	cmp	r4, #2
    2dd2:	d100      	bne.n	2dd6 <pow+0x356>
    2dd4:	e730      	b.n	2c38 <pow+0x1b8>
    2dd6:	e739      	b.n	2c4c <pow+0x1cc>
    2dd8:	20000070 	.word	0x20000070
    2ddc:	0000683c 	.word	0x0000683c
    2de0:	3ff00000 	.word	0x3ff00000
    2de4:	fff00000 	.word	0xfff00000
    2de8:	47efffff 	.word	0x47efffff
    2dec:	3fe00000 	.word	0x3fe00000
    2df0:	c7efffff 	.word	0xc7efffff
    2df4:	7ff00000 	.word	0x7ff00000

00002df8 <__ieee754_pow>:
    2df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfa:	4656      	mov	r6, sl
    2dfc:	464d      	mov	r5, r9
    2dfe:	4644      	mov	r4, r8
    2e00:	465f      	mov	r7, fp
    2e02:	b4f0      	push	{r4, r5, r6, r7}
    2e04:	001c      	movs	r4, r3
    2e06:	0013      	movs	r3, r2
    2e08:	0067      	lsls	r7, r4, #1
    2e0a:	b091      	sub	sp, #68	; 0x44
    2e0c:	087f      	lsrs	r7, r7, #1
    2e0e:	9300      	str	r3, [sp, #0]
    2e10:	9401      	str	r4, [sp, #4]
    2e12:	0006      	movs	r6, r0
    2e14:	000d      	movs	r5, r1
    2e16:	4680      	mov	r8, r0
    2e18:	4689      	mov	r9, r1
    2e1a:	46a2      	mov	sl, r4
    2e1c:	433b      	orrs	r3, r7
    2e1e:	d032      	beq.n	2e86 <__ieee754_pow+0x8e>
    2e20:	4b6e      	ldr	r3, [pc, #440]	; (2fdc <__ieee754_pow+0x1e4>)
    2e22:	006c      	lsls	r4, r5, #1
    2e24:	0864      	lsrs	r4, r4, #1
    2e26:	429c      	cmp	r4, r3
    2e28:	dc29      	bgt.n	2e7e <__ieee754_pow+0x86>
    2e2a:	d026      	beq.n	2e7a <__ieee754_pow+0x82>
    2e2c:	429f      	cmp	r7, r3
    2e2e:	dc26      	bgt.n	2e7e <__ieee754_pow+0x86>
    2e30:	4b6a      	ldr	r3, [pc, #424]	; (2fdc <__ieee754_pow+0x1e4>)
    2e32:	429f      	cmp	r7, r3
    2e34:	d100      	bne.n	2e38 <__ieee754_pow+0x40>
    2e36:	e089      	b.n	2f4c <__ieee754_pow+0x154>
    2e38:	2300      	movs	r3, #0
    2e3a:	469b      	mov	fp, r3
    2e3c:	464b      	mov	r3, r9
    2e3e:	2b00      	cmp	r3, #0
    2e40:	da00      	bge.n	2e44 <__ieee754_pow+0x4c>
    2e42:	e087      	b.n	2f54 <__ieee754_pow+0x15c>
    2e44:	2a00      	cmp	r2, #0
    2e46:	d12f      	bne.n	2ea8 <__ieee754_pow+0xb0>
    2e48:	4b64      	ldr	r3, [pc, #400]	; (2fdc <__ieee754_pow+0x1e4>)
    2e4a:	429f      	cmp	r7, r3
    2e4c:	d100      	bne.n	2e50 <__ieee754_pow+0x58>
    2e4e:	e09f      	b.n	2f90 <__ieee754_pow+0x198>
    2e50:	4b63      	ldr	r3, [pc, #396]	; (2fe0 <__ieee754_pow+0x1e8>)
    2e52:	429f      	cmp	r7, r3
    2e54:	d05d      	beq.n	2f12 <__ieee754_pow+0x11a>
    2e56:	2380      	movs	r3, #128	; 0x80
    2e58:	05db      	lsls	r3, r3, #23
    2e5a:	459a      	cmp	sl, r3
    2e5c:	d101      	bne.n	2e62 <__ieee754_pow+0x6a>
    2e5e:	f000 fbc1 	bl	35e4 <__ieee754_pow+0x7ec>
    2e62:	4b60      	ldr	r3, [pc, #384]	; (2fe4 <__ieee754_pow+0x1ec>)
    2e64:	459a      	cmp	sl, r3
    2e66:	d11f      	bne.n	2ea8 <__ieee754_pow+0xb0>
    2e68:	464b      	mov	r3, r9
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	db1c      	blt.n	2ea8 <__ieee754_pow+0xb0>
    2e6e:	0030      	movs	r0, r6
    2e70:	0029      	movs	r1, r5
    2e72:	f000 fcf7 	bl	3864 <__ieee754_sqrt>
    2e76:	0006      	movs	r6, r0
    2e78:	e007      	b.n	2e8a <__ieee754_pow+0x92>
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d00d      	beq.n	2e9a <__ieee754_pow+0xa2>
    2e7e:	4b5a      	ldr	r3, [pc, #360]	; (2fe8 <__ieee754_pow+0x1f0>)
    2e80:	18e0      	adds	r0, r4, r3
    2e82:	4330      	orrs	r0, r6
    2e84:	d10b      	bne.n	2e9e <__ieee754_pow+0xa6>
    2e86:	2600      	movs	r6, #0
    2e88:	4955      	ldr	r1, [pc, #340]	; (2fe0 <__ieee754_pow+0x1e8>)
    2e8a:	0030      	movs	r0, r6
    2e8c:	b011      	add	sp, #68	; 0x44
    2e8e:	bc3c      	pop	{r2, r3, r4, r5}
    2e90:	4690      	mov	r8, r2
    2e92:	4699      	mov	r9, r3
    2e94:	46a2      	mov	sl, r4
    2e96:	46ab      	mov	fp, r5
    2e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e9a:	42a7      	cmp	r7, r4
    2e9c:	ddc8      	ble.n	2e30 <__ieee754_pow+0x38>
    2e9e:	4853      	ldr	r0, [pc, #332]	; (2fec <__ieee754_pow+0x1f4>)
    2ea0:	f000 fde6 	bl	3a70 <nan>
    2ea4:	0006      	movs	r6, r0
    2ea6:	e7f0      	b.n	2e8a <__ieee754_pow+0x92>
    2ea8:	0030      	movs	r0, r6
    2eaa:	0029      	movs	r1, r5
    2eac:	f000 fdd0 	bl	3a50 <fabs>
    2eb0:	4643      	mov	r3, r8
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d01d      	beq.n	2ef2 <__ieee754_pow+0xfa>
    2eb6:	0feb      	lsrs	r3, r5, #31
    2eb8:	3b01      	subs	r3, #1
    2eba:	4698      	mov	r8, r3
    2ebc:	465b      	mov	r3, fp
    2ebe:	4642      	mov	r2, r8
    2ec0:	4313      	orrs	r3, r2
    2ec2:	d079      	beq.n	2fb8 <__ieee754_pow+0x1c0>
    2ec4:	4b4a      	ldr	r3, [pc, #296]	; (2ff0 <__ieee754_pow+0x1f8>)
    2ec6:	429f      	cmp	r7, r3
    2ec8:	dc00      	bgt.n	2ecc <__ieee754_pow+0xd4>
    2eca:	e09f      	b.n	300c <__ieee754_pow+0x214>
    2ecc:	4b49      	ldr	r3, [pc, #292]	; (2ff4 <__ieee754_pow+0x1fc>)
    2ece:	429f      	cmp	r7, r3
    2ed0:	dc01      	bgt.n	2ed6 <__ieee754_pow+0xde>
    2ed2:	f000 fbce 	bl	3672 <__ieee754_pow+0x87a>
    2ed6:	4b48      	ldr	r3, [pc, #288]	; (2ff8 <__ieee754_pow+0x200>)
    2ed8:	429c      	cmp	r4, r3
    2eda:	dd79      	ble.n	2fd0 <__ieee754_pow+0x1d8>
    2edc:	4653      	mov	r3, sl
    2ede:	2b00      	cmp	r3, #0
    2ee0:	dd79      	ble.n	2fd6 <__ieee754_pow+0x1de>
    2ee2:	4a46      	ldr	r2, [pc, #280]	; (2ffc <__ieee754_pow+0x204>)
    2ee4:	4b46      	ldr	r3, [pc, #280]	; (3000 <__ieee754_pow+0x208>)
    2ee6:	0010      	movs	r0, r2
    2ee8:	0019      	movs	r1, r3
    2eea:	f002 fac1 	bl	5470 <__aeabi_dmul>
    2eee:	0006      	movs	r6, r0
    2ef0:	e7cb      	b.n	2e8a <__ieee754_pow+0x92>
    2ef2:	2c00      	cmp	r4, #0
    2ef4:	d004      	beq.n	2f00 <__ieee754_pow+0x108>
    2ef6:	4a3a      	ldr	r2, [pc, #232]	; (2fe0 <__ieee754_pow+0x1e8>)
    2ef8:	00ab      	lsls	r3, r5, #2
    2efa:	089b      	lsrs	r3, r3, #2
    2efc:	4293      	cmp	r3, r2
    2efe:	d1da      	bne.n	2eb6 <__ieee754_pow+0xbe>
    2f00:	4653      	mov	r3, sl
    2f02:	2b00      	cmp	r3, #0
    2f04:	da00      	bge.n	2f08 <__ieee754_pow+0x110>
    2f06:	e3ad      	b.n	3664 <__ieee754_pow+0x86c>
    2f08:	464b      	mov	r3, r9
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	db0d      	blt.n	2f2a <__ieee754_pow+0x132>
    2f0e:	0006      	movs	r6, r0
    2f10:	e7bb      	b.n	2e8a <__ieee754_pow+0x92>
    2f12:	4653      	mov	r3, sl
    2f14:	0029      	movs	r1, r5
    2f16:	2b00      	cmp	r3, #0
    2f18:	dab7      	bge.n	2e8a <__ieee754_pow+0x92>
    2f1a:	0032      	movs	r2, r6
    2f1c:	002b      	movs	r3, r5
    2f1e:	2000      	movs	r0, #0
    2f20:	492f      	ldr	r1, [pc, #188]	; (2fe0 <__ieee754_pow+0x1e8>)
    2f22:	f001 fe81 	bl	4c28 <__aeabi_ddiv>
    2f26:	0006      	movs	r6, r0
    2f28:	e7af      	b.n	2e8a <__ieee754_pow+0x92>
    2f2a:	4b2f      	ldr	r3, [pc, #188]	; (2fe8 <__ieee754_pow+0x1f0>)
    2f2c:	469c      	mov	ip, r3
    2f2e:	465b      	mov	r3, fp
    2f30:	4464      	add	r4, ip
    2f32:	431c      	orrs	r4, r3
    2f34:	d101      	bne.n	2f3a <__ieee754_pow+0x142>
    2f36:	f000 fc2b 	bl	3790 <__ieee754_pow+0x998>
    2f3a:	465b      	mov	r3, fp
    2f3c:	0006      	movs	r6, r0
    2f3e:	2b01      	cmp	r3, #1
    2f40:	d1a3      	bne.n	2e8a <__ieee754_pow+0x92>
    2f42:	2380      	movs	r3, #128	; 0x80
    2f44:	061b      	lsls	r3, r3, #24
    2f46:	469c      	mov	ip, r3
    2f48:	4461      	add	r1, ip
    2f4a:	e79e      	b.n	2e8a <__ieee754_pow+0x92>
    2f4c:	2a00      	cmp	r2, #0
    2f4e:	d100      	bne.n	2f52 <__ieee754_pow+0x15a>
    2f50:	e772      	b.n	2e38 <__ieee754_pow+0x40>
    2f52:	e794      	b.n	2e7e <__ieee754_pow+0x86>
    2f54:	4b2b      	ldr	r3, [pc, #172]	; (3004 <__ieee754_pow+0x20c>)
    2f56:	429f      	cmp	r7, r3
    2f58:	dc2b      	bgt.n	2fb2 <__ieee754_pow+0x1ba>
    2f5a:	4b27      	ldr	r3, [pc, #156]	; (2ff8 <__ieee754_pow+0x200>)
    2f5c:	429f      	cmp	r7, r3
    2f5e:	dc00      	bgt.n	2f62 <__ieee754_pow+0x16a>
    2f60:	e770      	b.n	2e44 <__ieee754_pow+0x4c>
    2f62:	4929      	ldr	r1, [pc, #164]	; (3008 <__ieee754_pow+0x210>)
    2f64:	153b      	asrs	r3, r7, #20
    2f66:	468c      	mov	ip, r1
    2f68:	4463      	add	r3, ip
    2f6a:	2b14      	cmp	r3, #20
    2f6c:	dc01      	bgt.n	2f72 <__ieee754_pow+0x17a>
    2f6e:	f000 fbf2 	bl	3756 <__ieee754_pow+0x95e>
    2f72:	2134      	movs	r1, #52	; 0x34
    2f74:	1acb      	subs	r3, r1, r3
    2f76:	9900      	ldr	r1, [sp, #0]
    2f78:	40d9      	lsrs	r1, r3
    2f7a:	0008      	movs	r0, r1
    2f7c:	4098      	lsls	r0, r3
    2f7e:	4282      	cmp	r2, r0
    2f80:	d000      	beq.n	2f84 <__ieee754_pow+0x18c>
    2f82:	e75f      	b.n	2e44 <__ieee754_pow+0x4c>
    2f84:	2301      	movs	r3, #1
    2f86:	4019      	ands	r1, r3
    2f88:	3301      	adds	r3, #1
    2f8a:	1a5b      	subs	r3, r3, r1
    2f8c:	469b      	mov	fp, r3
    2f8e:	e759      	b.n	2e44 <__ieee754_pow+0x4c>
    2f90:	4b15      	ldr	r3, [pc, #84]	; (2fe8 <__ieee754_pow+0x1f0>)
    2f92:	18e0      	adds	r0, r4, r3
    2f94:	4306      	orrs	r6, r0
    2f96:	d100      	bne.n	2f9a <__ieee754_pow+0x1a2>
    2f98:	e775      	b.n	2e86 <__ieee754_pow+0x8e>
    2f9a:	4b17      	ldr	r3, [pc, #92]	; (2ff8 <__ieee754_pow+0x200>)
    2f9c:	429c      	cmp	r4, r3
    2f9e:	dc00      	bgt.n	2fa2 <__ieee754_pow+0x1aa>
    2fa0:	e351      	b.n	3646 <__ieee754_pow+0x84e>
    2fa2:	4653      	mov	r3, sl
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	db16      	blt.n	2fd6 <__ieee754_pow+0x1de>
    2fa8:	9b00      	ldr	r3, [sp, #0]
    2faa:	9c01      	ldr	r4, [sp, #4]
    2fac:	001e      	movs	r6, r3
    2fae:	0021      	movs	r1, r4
    2fb0:	e76b      	b.n	2e8a <__ieee754_pow+0x92>
    2fb2:	2302      	movs	r3, #2
    2fb4:	469b      	mov	fp, r3
    2fb6:	e745      	b.n	2e44 <__ieee754_pow+0x4c>
    2fb8:	0032      	movs	r2, r6
    2fba:	002b      	movs	r3, r5
    2fbc:	0030      	movs	r0, r6
    2fbe:	0029      	movs	r1, r5
    2fc0:	f002 fcd0 	bl	5964 <__aeabi_dsub>
    2fc4:	0002      	movs	r2, r0
    2fc6:	000b      	movs	r3, r1
    2fc8:	f001 fe2e 	bl	4c28 <__aeabi_ddiv>
    2fcc:	0006      	movs	r6, r0
    2fce:	e75c      	b.n	2e8a <__ieee754_pow+0x92>
    2fd0:	4653      	mov	r3, sl
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	db85      	blt.n	2ee2 <__ieee754_pow+0xea>
    2fd6:	2600      	movs	r6, #0
    2fd8:	2100      	movs	r1, #0
    2fda:	e756      	b.n	2e8a <__ieee754_pow+0x92>
    2fdc:	7ff00000 	.word	0x7ff00000
    2fe0:	3ff00000 	.word	0x3ff00000
    2fe4:	3fe00000 	.word	0x3fe00000
    2fe8:	c0100000 	.word	0xc0100000
    2fec:	00006840 	.word	0x00006840
    2ff0:	41e00000 	.word	0x41e00000
    2ff4:	43f00000 	.word	0x43f00000
    2ff8:	3fefffff 	.word	0x3fefffff
    2ffc:	8800759c 	.word	0x8800759c
    3000:	7e37e43c 	.word	0x7e37e43c
    3004:	433fffff 	.word	0x433fffff
    3008:	fffffc01 	.word	0xfffffc01
    300c:	4be8      	ldr	r3, [pc, #928]	; (33b0 <__ieee754_pow+0x5b8>)
    300e:	2200      	movs	r2, #0
    3010:	429c      	cmp	r4, r3
    3012:	dc06      	bgt.n	3022 <__ieee754_pow+0x22a>
    3014:	2200      	movs	r2, #0
    3016:	4be7      	ldr	r3, [pc, #924]	; (33b4 <__ieee754_pow+0x5bc>)
    3018:	f002 fa2a 	bl	5470 <__aeabi_dmul>
    301c:	2235      	movs	r2, #53	; 0x35
    301e:	000c      	movs	r4, r1
    3020:	4252      	negs	r2, r2
    3022:	4de5      	ldr	r5, [pc, #916]	; (33b8 <__ieee754_pow+0x5c0>)
    3024:	1523      	asrs	r3, r4, #20
    3026:	46ac      	mov	ip, r5
    3028:	4463      	add	r3, ip
    302a:	4699      	mov	r9, r3
    302c:	0324      	lsls	r4, r4, #12
    302e:	4de3      	ldr	r5, [pc, #908]	; (33bc <__ieee754_pow+0x5c4>)
    3030:	4be3      	ldr	r3, [pc, #908]	; (33c0 <__ieee754_pow+0x5c8>)
    3032:	0b24      	lsrs	r4, r4, #12
    3034:	4491      	add	r9, r2
    3036:	4325      	orrs	r5, r4
    3038:	429c      	cmp	r4, r3
    303a:	dd09      	ble.n	3050 <__ieee754_pow+0x258>
    303c:	4be1      	ldr	r3, [pc, #900]	; (33c4 <__ieee754_pow+0x5cc>)
    303e:	429c      	cmp	r4, r3
    3040:	dc00      	bgt.n	3044 <__ieee754_pow+0x24c>
    3042:	e3a9      	b.n	3798 <__ieee754_pow+0x9a0>
    3044:	2301      	movs	r3, #1
    3046:	469c      	mov	ip, r3
    3048:	4bdf      	ldr	r3, [pc, #892]	; (33c8 <__ieee754_pow+0x5d0>)
    304a:	44e1      	add	r9, ip
    304c:	469c      	mov	ip, r3
    304e:	4465      	add	r5, ip
    3050:	2300      	movs	r3, #0
    3052:	2400      	movs	r4, #0
    3054:	2200      	movs	r2, #0
    3056:	9308      	str	r3, [sp, #32]
    3058:	9409      	str	r4, [sp, #36]	; 0x24
    305a:	930c      	str	r3, [sp, #48]	; 0x30
    305c:	940d      	str	r4, [sp, #52]	; 0x34
    305e:	2400      	movs	r4, #0
    3060:	4bd6      	ldr	r3, [pc, #856]	; (33bc <__ieee754_pow+0x5c4>)
    3062:	9206      	str	r2, [sp, #24]
    3064:	9307      	str	r3, [sp, #28]
    3066:	9a06      	ldr	r2, [sp, #24]
    3068:	9b07      	ldr	r3, [sp, #28]
    306a:	0029      	movs	r1, r5
    306c:	900a      	str	r0, [sp, #40]	; 0x28
    306e:	910b      	str	r1, [sp, #44]	; 0x2c
    3070:	f002 fc78 	bl	5964 <__aeabi_dsub>
    3074:	9a06      	ldr	r2, [sp, #24]
    3076:	9b07      	ldr	r3, [sp, #28]
    3078:	0006      	movs	r6, r0
    307a:	000f      	movs	r7, r1
    307c:	980a      	ldr	r0, [sp, #40]	; 0x28
    307e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3080:	f001 faa6 	bl	45d0 <__aeabi_dadd>
    3084:	0002      	movs	r2, r0
    3086:	000b      	movs	r3, r1
    3088:	2000      	movs	r0, #0
    308a:	49cc      	ldr	r1, [pc, #816]	; (33bc <__ieee754_pow+0x5c4>)
    308c:	f001 fdcc 	bl	4c28 <__aeabi_ddiv>
    3090:	000a      	movs	r2, r1
    3092:	0001      	movs	r1, r0
    3094:	0013      	movs	r3, r2
    3096:	910e      	str	r1, [sp, #56]	; 0x38
    3098:	920f      	str	r2, [sp, #60]	; 0x3c
    309a:	0002      	movs	r2, r0
    309c:	0039      	movs	r1, r7
    309e:	0030      	movs	r0, r6
    30a0:	f002 f9e6 	bl	5470 <__aeabi_dmul>
    30a4:	000a      	movs	r2, r1
    30a6:	0001      	movs	r1, r0
    30a8:	2080      	movs	r0, #128	; 0x80
    30aa:	9104      	str	r1, [sp, #16]
    30ac:	9205      	str	r2, [sp, #20]
    30ae:	0013      	movs	r3, r2
    30b0:	2200      	movs	r2, #0
    30b2:	2180      	movs	r1, #128	; 0x80
    30b4:	0300      	lsls	r0, r0, #12
    30b6:	4684      	mov	ip, r0
    30b8:	9202      	str	r2, [sp, #8]
    30ba:	9303      	str	r3, [sp, #12]
    30bc:	2200      	movs	r2, #0
    30be:	0589      	lsls	r1, r1, #22
    30c0:	106d      	asrs	r5, r5, #1
    30c2:	430d      	orrs	r5, r1
    30c4:	4465      	add	r5, ip
    30c6:	192b      	adds	r3, r5, r4
    30c8:	9802      	ldr	r0, [sp, #8]
    30ca:	9903      	ldr	r1, [sp, #12]
    30cc:	0014      	movs	r4, r2
    30ce:	001d      	movs	r5, r3
    30d0:	f002 f9ce 	bl	5470 <__aeabi_dmul>
    30d4:	0002      	movs	r2, r0
    30d6:	000b      	movs	r3, r1
    30d8:	0030      	movs	r0, r6
    30da:	0039      	movs	r1, r7
    30dc:	f002 fc42 	bl	5964 <__aeabi_dsub>
    30e0:	9a06      	ldr	r2, [sp, #24]
    30e2:	9b07      	ldr	r3, [sp, #28]
    30e4:	0006      	movs	r6, r0
    30e6:	000f      	movs	r7, r1
    30e8:	0020      	movs	r0, r4
    30ea:	0029      	movs	r1, r5
    30ec:	f002 fc3a 	bl	5964 <__aeabi_dsub>
    30f0:	0002      	movs	r2, r0
    30f2:	000b      	movs	r3, r1
    30f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    30f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    30f8:	f002 fc34 	bl	5964 <__aeabi_dsub>
    30fc:	9a02      	ldr	r2, [sp, #8]
    30fe:	9b03      	ldr	r3, [sp, #12]
    3100:	f002 f9b6 	bl	5470 <__aeabi_dmul>
    3104:	0002      	movs	r2, r0
    3106:	000b      	movs	r3, r1
    3108:	0030      	movs	r0, r6
    310a:	0039      	movs	r1, r7
    310c:	f002 fc2a 	bl	5964 <__aeabi_dsub>
    3110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3114:	f002 f9ac 	bl	5470 <__aeabi_dmul>
    3118:	9d04      	ldr	r5, [sp, #16]
    311a:	9e05      	ldr	r6, [sp, #20]
    311c:	9006      	str	r0, [sp, #24]
    311e:	9107      	str	r1, [sp, #28]
    3120:	002a      	movs	r2, r5
    3122:	0033      	movs	r3, r6
    3124:	0028      	movs	r0, r5
    3126:	0031      	movs	r1, r6
    3128:	f002 f9a2 	bl	5470 <__aeabi_dmul>
    312c:	0006      	movs	r6, r0
    312e:	000f      	movs	r7, r1
    3130:	4aa6      	ldr	r2, [pc, #664]	; (33cc <__ieee754_pow+0x5d4>)
    3132:	4ba7      	ldr	r3, [pc, #668]	; (33d0 <__ieee754_pow+0x5d8>)
    3134:	f002 f99c 	bl	5470 <__aeabi_dmul>
    3138:	4aa6      	ldr	r2, [pc, #664]	; (33d4 <__ieee754_pow+0x5dc>)
    313a:	4ba7      	ldr	r3, [pc, #668]	; (33d8 <__ieee754_pow+0x5e0>)
    313c:	f001 fa48 	bl	45d0 <__aeabi_dadd>
    3140:	0032      	movs	r2, r6
    3142:	003b      	movs	r3, r7
    3144:	f002 f994 	bl	5470 <__aeabi_dmul>
    3148:	4aa4      	ldr	r2, [pc, #656]	; (33dc <__ieee754_pow+0x5e4>)
    314a:	4ba5      	ldr	r3, [pc, #660]	; (33e0 <__ieee754_pow+0x5e8>)
    314c:	f001 fa40 	bl	45d0 <__aeabi_dadd>
    3150:	0032      	movs	r2, r6
    3152:	003b      	movs	r3, r7
    3154:	f002 f98c 	bl	5470 <__aeabi_dmul>
    3158:	4aa2      	ldr	r2, [pc, #648]	; (33e4 <__ieee754_pow+0x5ec>)
    315a:	4ba3      	ldr	r3, [pc, #652]	; (33e8 <__ieee754_pow+0x5f0>)
    315c:	f001 fa38 	bl	45d0 <__aeabi_dadd>
    3160:	0032      	movs	r2, r6
    3162:	003b      	movs	r3, r7
    3164:	f002 f984 	bl	5470 <__aeabi_dmul>
    3168:	4aa0      	ldr	r2, [pc, #640]	; (33ec <__ieee754_pow+0x5f4>)
    316a:	4ba1      	ldr	r3, [pc, #644]	; (33f0 <__ieee754_pow+0x5f8>)
    316c:	f001 fa30 	bl	45d0 <__aeabi_dadd>
    3170:	0032      	movs	r2, r6
    3172:	003b      	movs	r3, r7
    3174:	f002 f97c 	bl	5470 <__aeabi_dmul>
    3178:	4a9e      	ldr	r2, [pc, #632]	; (33f4 <__ieee754_pow+0x5fc>)
    317a:	4b9f      	ldr	r3, [pc, #636]	; (33f8 <__ieee754_pow+0x600>)
    317c:	f001 fa28 	bl	45d0 <__aeabi_dadd>
    3180:	0032      	movs	r2, r6
    3182:	0004      	movs	r4, r0
    3184:	000d      	movs	r5, r1
    3186:	003b      	movs	r3, r7
    3188:	0030      	movs	r0, r6
    318a:	0039      	movs	r1, r7
    318c:	f002 f970 	bl	5470 <__aeabi_dmul>
    3190:	0002      	movs	r2, r0
    3192:	000b      	movs	r3, r1
    3194:	0020      	movs	r0, r4
    3196:	0029      	movs	r1, r5
    3198:	f002 f96a 	bl	5470 <__aeabi_dmul>
    319c:	9e02      	ldr	r6, [sp, #8]
    319e:	9f03      	ldr	r7, [sp, #12]
    31a0:	0004      	movs	r4, r0
    31a2:	000d      	movs	r5, r1
    31a4:	9804      	ldr	r0, [sp, #16]
    31a6:	9905      	ldr	r1, [sp, #20]
    31a8:	0032      	movs	r2, r6
    31aa:	003b      	movs	r3, r7
    31ac:	f001 fa10 	bl	45d0 <__aeabi_dadd>
    31b0:	9a06      	ldr	r2, [sp, #24]
    31b2:	9b07      	ldr	r3, [sp, #28]
    31b4:	f002 f95c 	bl	5470 <__aeabi_dmul>
    31b8:	0022      	movs	r2, r4
    31ba:	002b      	movs	r3, r5
    31bc:	f001 fa08 	bl	45d0 <__aeabi_dadd>
    31c0:	0032      	movs	r2, r6
    31c2:	900a      	str	r0, [sp, #40]	; 0x28
    31c4:	910b      	str	r1, [sp, #44]	; 0x2c
    31c6:	003b      	movs	r3, r7
    31c8:	0030      	movs	r0, r6
    31ca:	0039      	movs	r1, r7
    31cc:	9602      	str	r6, [sp, #8]
    31ce:	9703      	str	r7, [sp, #12]
    31d0:	f002 f94e 	bl	5470 <__aeabi_dmul>
    31d4:	2200      	movs	r2, #0
    31d6:	4b89      	ldr	r3, [pc, #548]	; (33fc <__ieee754_pow+0x604>)
    31d8:	0004      	movs	r4, r0
    31da:	000d      	movs	r5, r1
    31dc:	f001 f9f8 	bl	45d0 <__aeabi_dadd>
    31e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    31e4:	f001 f9f4 	bl	45d0 <__aeabi_dadd>
    31e8:	2600      	movs	r6, #0
    31ea:	000f      	movs	r7, r1
    31ec:	0032      	movs	r2, r6
    31ee:	000b      	movs	r3, r1
    31f0:	9802      	ldr	r0, [sp, #8]
    31f2:	9903      	ldr	r1, [sp, #12]
    31f4:	f002 f93c 	bl	5470 <__aeabi_dmul>
    31f8:	2200      	movs	r2, #0
    31fa:	9002      	str	r0, [sp, #8]
    31fc:	9103      	str	r1, [sp, #12]
    31fe:	4b7f      	ldr	r3, [pc, #508]	; (33fc <__ieee754_pow+0x604>)
    3200:	0030      	movs	r0, r6
    3202:	0039      	movs	r1, r7
    3204:	f002 fbae 	bl	5964 <__aeabi_dsub>
    3208:	0022      	movs	r2, r4
    320a:	002b      	movs	r3, r5
    320c:	f002 fbaa 	bl	5964 <__aeabi_dsub>
    3210:	0002      	movs	r2, r0
    3212:	000b      	movs	r3, r1
    3214:	980a      	ldr	r0, [sp, #40]	; 0x28
    3216:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3218:	f002 fba4 	bl	5964 <__aeabi_dsub>
    321c:	9a04      	ldr	r2, [sp, #16]
    321e:	9b05      	ldr	r3, [sp, #20]
    3220:	f002 f926 	bl	5470 <__aeabi_dmul>
    3224:	0032      	movs	r2, r6
    3226:	0004      	movs	r4, r0
    3228:	000d      	movs	r5, r1
    322a:	9806      	ldr	r0, [sp, #24]
    322c:	9907      	ldr	r1, [sp, #28]
    322e:	003b      	movs	r3, r7
    3230:	f002 f91e 	bl	5470 <__aeabi_dmul>
    3234:	0002      	movs	r2, r0
    3236:	000b      	movs	r3, r1
    3238:	0020      	movs	r0, r4
    323a:	0029      	movs	r1, r5
    323c:	f001 f9c8 	bl	45d0 <__aeabi_dadd>
    3240:	0004      	movs	r4, r0
    3242:	000d      	movs	r5, r1
    3244:	0002      	movs	r2, r0
    3246:	000b      	movs	r3, r1
    3248:	9802      	ldr	r0, [sp, #8]
    324a:	9903      	ldr	r1, [sp, #12]
    324c:	f001 f9c0 	bl	45d0 <__aeabi_dadd>
    3250:	2600      	movs	r6, #0
    3252:	22e0      	movs	r2, #224	; 0xe0
    3254:	4b6a      	ldr	r3, [pc, #424]	; (3400 <__ieee754_pow+0x608>)
    3256:	0612      	lsls	r2, r2, #24
    3258:	0030      	movs	r0, r6
    325a:	000f      	movs	r7, r1
    325c:	f002 f908 	bl	5470 <__aeabi_dmul>
    3260:	9a02      	ldr	r2, [sp, #8]
    3262:	9b03      	ldr	r3, [sp, #12]
    3264:	9004      	str	r0, [sp, #16]
    3266:	9105      	str	r1, [sp, #20]
    3268:	0030      	movs	r0, r6
    326a:	0039      	movs	r1, r7
    326c:	f002 fb7a 	bl	5964 <__aeabi_dsub>
    3270:	0002      	movs	r2, r0
    3272:	000b      	movs	r3, r1
    3274:	0020      	movs	r0, r4
    3276:	0029      	movs	r1, r5
    3278:	f002 fb74 	bl	5964 <__aeabi_dsub>
    327c:	4a61      	ldr	r2, [pc, #388]	; (3404 <__ieee754_pow+0x60c>)
    327e:	4b60      	ldr	r3, [pc, #384]	; (3400 <__ieee754_pow+0x608>)
    3280:	f002 f8f6 	bl	5470 <__aeabi_dmul>
    3284:	4a60      	ldr	r2, [pc, #384]	; (3408 <__ieee754_pow+0x610>)
    3286:	0004      	movs	r4, r0
    3288:	000d      	movs	r5, r1
    328a:	4b60      	ldr	r3, [pc, #384]	; (340c <__ieee754_pow+0x614>)
    328c:	0030      	movs	r0, r6
    328e:	0039      	movs	r1, r7
    3290:	f002 f8ee 	bl	5470 <__aeabi_dmul>
    3294:	0002      	movs	r2, r0
    3296:	000b      	movs	r3, r1
    3298:	0020      	movs	r0, r4
    329a:	0029      	movs	r1, r5
    329c:	f001 f998 	bl	45d0 <__aeabi_dadd>
    32a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    32a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    32a4:	f001 f994 	bl	45d0 <__aeabi_dadd>
    32a8:	0006      	movs	r6, r0
    32aa:	4648      	mov	r0, r9
    32ac:	000f      	movs	r7, r1
    32ae:	f002 ff03 	bl	60b8 <__aeabi_i2d>
    32b2:	0004      	movs	r4, r0
    32b4:	000d      	movs	r5, r1
    32b6:	9804      	ldr	r0, [sp, #16]
    32b8:	9905      	ldr	r1, [sp, #20]
    32ba:	0032      	movs	r2, r6
    32bc:	003b      	movs	r3, r7
    32be:	f001 f987 	bl	45d0 <__aeabi_dadd>
    32c2:	9a08      	ldr	r2, [sp, #32]
    32c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32c6:	f001 f983 	bl	45d0 <__aeabi_dadd>
    32ca:	0022      	movs	r2, r4
    32cc:	002b      	movs	r3, r5
    32ce:	f001 f97f 	bl	45d0 <__aeabi_dadd>
    32d2:	2000      	movs	r0, #0
    32d4:	0022      	movs	r2, r4
    32d6:	002b      	movs	r3, r5
    32d8:	9002      	str	r0, [sp, #8]
    32da:	9103      	str	r1, [sp, #12]
    32dc:	f002 fb42 	bl	5964 <__aeabi_dsub>
    32e0:	9a08      	ldr	r2, [sp, #32]
    32e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32e4:	f002 fb3e 	bl	5964 <__aeabi_dsub>
    32e8:	9a04      	ldr	r2, [sp, #16]
    32ea:	9b05      	ldr	r3, [sp, #20]
    32ec:	f002 fb3a 	bl	5964 <__aeabi_dsub>
    32f0:	0002      	movs	r2, r0
    32f2:	000b      	movs	r3, r1
    32f4:	0030      	movs	r0, r6
    32f6:	0039      	movs	r1, r7
    32f8:	f002 fb34 	bl	5964 <__aeabi_dsub>
    32fc:	9004      	str	r0, [sp, #16]
    32fe:	9105      	str	r1, [sp, #20]
    3300:	465b      	mov	r3, fp
    3302:	4642      	mov	r2, r8
    3304:	3b01      	subs	r3, #1
    3306:	4313      	orrs	r3, r2
    3308:	d100      	bne.n	330c <__ieee754_pow+0x514>
    330a:	e197      	b.n	363c <__ieee754_pow+0x844>
    330c:	2300      	movs	r3, #0
    330e:	4c2b      	ldr	r4, [pc, #172]	; (33bc <__ieee754_pow+0x5c4>)
    3310:	9306      	str	r3, [sp, #24]
    3312:	9407      	str	r4, [sp, #28]
    3314:	9800      	ldr	r0, [sp, #0]
    3316:	9901      	ldr	r1, [sp, #4]
    3318:	2600      	movs	r6, #0
    331a:	000b      	movs	r3, r1
    331c:	0032      	movs	r2, r6
    331e:	000f      	movs	r7, r1
    3320:	f002 fb20 	bl	5964 <__aeabi_dsub>
    3324:	9a02      	ldr	r2, [sp, #8]
    3326:	9b03      	ldr	r3, [sp, #12]
    3328:	f002 f8a2 	bl	5470 <__aeabi_dmul>
    332c:	9a00      	ldr	r2, [sp, #0]
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	0004      	movs	r4, r0
    3332:	000d      	movs	r5, r1
    3334:	9804      	ldr	r0, [sp, #16]
    3336:	9905      	ldr	r1, [sp, #20]
    3338:	f002 f89a 	bl	5470 <__aeabi_dmul>
    333c:	0002      	movs	r2, r0
    333e:	000b      	movs	r3, r1
    3340:	0020      	movs	r0, r4
    3342:	0029      	movs	r1, r5
    3344:	f001 f944 	bl	45d0 <__aeabi_dadd>
    3348:	0004      	movs	r4, r0
    334a:	000d      	movs	r5, r1
    334c:	9802      	ldr	r0, [sp, #8]
    334e:	9903      	ldr	r1, [sp, #12]
    3350:	003b      	movs	r3, r7
    3352:	0032      	movs	r2, r6
    3354:	9404      	str	r4, [sp, #16]
    3356:	9505      	str	r5, [sp, #20]
    3358:	f002 f88a 	bl	5470 <__aeabi_dmul>
    335c:	9000      	str	r0, [sp, #0]
    335e:	9101      	str	r1, [sp, #4]
    3360:	000b      	movs	r3, r1
    3362:	0002      	movs	r2, r0
    3364:	0029      	movs	r1, r5
    3366:	0020      	movs	r0, r4
    3368:	f001 f932 	bl	45d0 <__aeabi_dadd>
    336c:	4b28      	ldr	r3, [pc, #160]	; (3410 <__ieee754_pow+0x618>)
    336e:	4681      	mov	r9, r0
    3370:	1e0f      	subs	r7, r1, #0
    3372:	468a      	mov	sl, r1
    3374:	429f      	cmp	r7, r3
    3376:	dc00      	bgt.n	337a <__ieee754_pow+0x582>
    3378:	e13c      	b.n	35f4 <__ieee754_pow+0x7fc>
    337a:	4b26      	ldr	r3, [pc, #152]	; (3414 <__ieee754_pow+0x61c>)
    337c:	18cb      	adds	r3, r1, r3
    337e:	4303      	orrs	r3, r0
    3380:	d000      	beq.n	3384 <__ieee754_pow+0x58c>
    3382:	e1db      	b.n	373c <__ieee754_pow+0x944>
    3384:	9804      	ldr	r0, [sp, #16]
    3386:	9905      	ldr	r1, [sp, #20]
    3388:	4a23      	ldr	r2, [pc, #140]	; (3418 <__ieee754_pow+0x620>)
    338a:	4b24      	ldr	r3, [pc, #144]	; (341c <__ieee754_pow+0x624>)
    338c:	f001 f920 	bl	45d0 <__aeabi_dadd>
    3390:	9a00      	ldr	r2, [sp, #0]
    3392:	9b01      	ldr	r3, [sp, #4]
    3394:	0004      	movs	r4, r0
    3396:	000d      	movs	r5, r1
    3398:	4648      	mov	r0, r9
    339a:	0039      	movs	r1, r7
    339c:	f002 fae2 	bl	5964 <__aeabi_dsub>
    33a0:	0002      	movs	r2, r0
    33a2:	000b      	movs	r3, r1
    33a4:	0020      	movs	r0, r4
    33a6:	0029      	movs	r1, r5
    33a8:	f000 fcae 	bl	3d08 <__aeabi_dcmpgt>
    33ac:	003e      	movs	r6, r7
    33ae:	e037      	b.n	3420 <__ieee754_pow+0x628>
    33b0:	000fffff 	.word	0x000fffff
    33b4:	43400000 	.word	0x43400000
    33b8:	fffffc01 	.word	0xfffffc01
    33bc:	3ff00000 	.word	0x3ff00000
    33c0:	0003988e 	.word	0x0003988e
    33c4:	000bb679 	.word	0x000bb679
    33c8:	fff00000 	.word	0xfff00000
    33cc:	4a454eef 	.word	0x4a454eef
    33d0:	3fca7e28 	.word	0x3fca7e28
    33d4:	93c9db65 	.word	0x93c9db65
    33d8:	3fcd864a 	.word	0x3fcd864a
    33dc:	a91d4101 	.word	0xa91d4101
    33e0:	3fd17460 	.word	0x3fd17460
    33e4:	518f264d 	.word	0x518f264d
    33e8:	3fd55555 	.word	0x3fd55555
    33ec:	db6fabff 	.word	0xdb6fabff
    33f0:	3fdb6db6 	.word	0x3fdb6db6
    33f4:	33333303 	.word	0x33333303
    33f8:	3fe33333 	.word	0x3fe33333
    33fc:	40080000 	.word	0x40080000
    3400:	3feec709 	.word	0x3feec709
    3404:	dc3a03fd 	.word	0xdc3a03fd
    3408:	145b01f5 	.word	0x145b01f5
    340c:	be3e2fe0 	.word	0xbe3e2fe0
    3410:	408fffff 	.word	0x408fffff
    3414:	bf700000 	.word	0xbf700000
    3418:	652b82fe 	.word	0x652b82fe
    341c:	3c971547 	.word	0x3c971547
    3420:	2800      	cmp	r0, #0
    3422:	d000      	beq.n	3426 <__ieee754_pow+0x62e>
    3424:	e18a      	b.n	373c <__ieee754_pow+0x944>
    3426:	2280      	movs	r2, #128	; 0x80
    3428:	4be7      	ldr	r3, [pc, #924]	; (37c8 <__ieee754_pow+0x9d0>)
    342a:	0352      	lsls	r2, r2, #13
    342c:	469c      	mov	ip, r3
    342e:	0013      	movs	r3, r2
    3430:	1536      	asrs	r6, r6, #20
    3432:	4466      	add	r6, ip
    3434:	4133      	asrs	r3, r6
    3436:	49e5      	ldr	r1, [pc, #916]	; (37cc <__ieee754_pow+0x9d4>)
    3438:	19db      	adds	r3, r3, r7
    343a:	005e      	lsls	r6, r3, #1
    343c:	001c      	movs	r4, r3
    343e:	031b      	lsls	r3, r3, #12
    3440:	468c      	mov	ip, r1
    3442:	0b1b      	lsrs	r3, r3, #12
    3444:	4313      	orrs	r3, r2
    3446:	2214      	movs	r2, #20
    3448:	0d76      	lsrs	r6, r6, #21
    344a:	4fe1      	ldr	r7, [pc, #900]	; (37d0 <__ieee754_pow+0x9d8>)
    344c:	4466      	add	r6, ip
    344e:	4137      	asrs	r7, r6
    3450:	1b96      	subs	r6, r2, r6
    3452:	4133      	asrs	r3, r6
    3454:	4698      	mov	r8, r3
    3456:	4653      	mov	r3, sl
    3458:	43bc      	bics	r4, r7
    345a:	2000      	movs	r0, #0
    345c:	0021      	movs	r1, r4
    345e:	2b00      	cmp	r3, #0
    3460:	da00      	bge.n	3464 <__ieee754_pow+0x66c>
    3462:	e1a9      	b.n	37b8 <__ieee754_pow+0x9c0>
    3464:	0002      	movs	r2, r0
    3466:	000b      	movs	r3, r1
    3468:	9800      	ldr	r0, [sp, #0]
    346a:	9901      	ldr	r1, [sp, #4]
    346c:	f002 fa7a 	bl	5964 <__aeabi_dsub>
    3470:	000b      	movs	r3, r1
    3472:	9000      	str	r0, [sp, #0]
    3474:	9101      	str	r1, [sp, #4]
    3476:	0002      	movs	r2, r0
    3478:	9804      	ldr	r0, [sp, #16]
    347a:	9905      	ldr	r1, [sp, #20]
    347c:	f001 f8a8 	bl	45d0 <__aeabi_dadd>
    3480:	4643      	mov	r3, r8
    3482:	051b      	lsls	r3, r3, #20
    3484:	4699      	mov	r9, r3
    3486:	2000      	movs	r0, #0
    3488:	2200      	movs	r2, #0
    348a:	4bd2      	ldr	r3, [pc, #840]	; (37d4 <__ieee754_pow+0x9dc>)
    348c:	0006      	movs	r6, r0
    348e:	000f      	movs	r7, r1
    3490:	f001 ffee 	bl	5470 <__aeabi_dmul>
    3494:	9a00      	ldr	r2, [sp, #0]
    3496:	9b01      	ldr	r3, [sp, #4]
    3498:	9002      	str	r0, [sp, #8]
    349a:	9103      	str	r1, [sp, #12]
    349c:	0030      	movs	r0, r6
    349e:	0039      	movs	r1, r7
    34a0:	f002 fa60 	bl	5964 <__aeabi_dsub>
    34a4:	0002      	movs	r2, r0
    34a6:	000b      	movs	r3, r1
    34a8:	9804      	ldr	r0, [sp, #16]
    34aa:	9905      	ldr	r1, [sp, #20]
    34ac:	f002 fa5a 	bl	5964 <__aeabi_dsub>
    34b0:	4ac9      	ldr	r2, [pc, #804]	; (37d8 <__ieee754_pow+0x9e0>)
    34b2:	4bca      	ldr	r3, [pc, #808]	; (37dc <__ieee754_pow+0x9e4>)
    34b4:	f001 ffdc 	bl	5470 <__aeabi_dmul>
    34b8:	4ac9      	ldr	r2, [pc, #804]	; (37e0 <__ieee754_pow+0x9e8>)
    34ba:	0004      	movs	r4, r0
    34bc:	000d      	movs	r5, r1
    34be:	4bc9      	ldr	r3, [pc, #804]	; (37e4 <__ieee754_pow+0x9ec>)
    34c0:	0030      	movs	r0, r6
    34c2:	0039      	movs	r1, r7
    34c4:	f001 ffd4 	bl	5470 <__aeabi_dmul>
    34c8:	0002      	movs	r2, r0
    34ca:	000b      	movs	r3, r1
    34cc:	0020      	movs	r0, r4
    34ce:	0029      	movs	r1, r5
    34d0:	f001 f87e 	bl	45d0 <__aeabi_dadd>
    34d4:	0004      	movs	r4, r0
    34d6:	000d      	movs	r5, r1
    34d8:	0002      	movs	r2, r0
    34da:	000b      	movs	r3, r1
    34dc:	9802      	ldr	r0, [sp, #8]
    34de:	9903      	ldr	r1, [sp, #12]
    34e0:	f001 f876 	bl	45d0 <__aeabi_dadd>
    34e4:	9a02      	ldr	r2, [sp, #8]
    34e6:	9b03      	ldr	r3, [sp, #12]
    34e8:	0006      	movs	r6, r0
    34ea:	000f      	movs	r7, r1
    34ec:	f002 fa3a 	bl	5964 <__aeabi_dsub>
    34f0:	0002      	movs	r2, r0
    34f2:	000b      	movs	r3, r1
    34f4:	0020      	movs	r0, r4
    34f6:	0029      	movs	r1, r5
    34f8:	f002 fa34 	bl	5964 <__aeabi_dsub>
    34fc:	0032      	movs	r2, r6
    34fe:	9000      	str	r0, [sp, #0]
    3500:	9101      	str	r1, [sp, #4]
    3502:	003b      	movs	r3, r7
    3504:	0030      	movs	r0, r6
    3506:	0039      	movs	r1, r7
    3508:	f001 ffb2 	bl	5470 <__aeabi_dmul>
    350c:	0004      	movs	r4, r0
    350e:	000d      	movs	r5, r1
    3510:	4ab5      	ldr	r2, [pc, #724]	; (37e8 <__ieee754_pow+0x9f0>)
    3512:	4bb6      	ldr	r3, [pc, #728]	; (37ec <__ieee754_pow+0x9f4>)
    3514:	f001 ffac 	bl	5470 <__aeabi_dmul>
    3518:	4ab5      	ldr	r2, [pc, #724]	; (37f0 <__ieee754_pow+0x9f8>)
    351a:	4bb6      	ldr	r3, [pc, #728]	; (37f4 <__ieee754_pow+0x9fc>)
    351c:	f002 fa22 	bl	5964 <__aeabi_dsub>
    3520:	0022      	movs	r2, r4
    3522:	002b      	movs	r3, r5
    3524:	f001 ffa4 	bl	5470 <__aeabi_dmul>
    3528:	4ab3      	ldr	r2, [pc, #716]	; (37f8 <__ieee754_pow+0xa00>)
    352a:	4bb4      	ldr	r3, [pc, #720]	; (37fc <__ieee754_pow+0xa04>)
    352c:	f001 f850 	bl	45d0 <__aeabi_dadd>
    3530:	0022      	movs	r2, r4
    3532:	002b      	movs	r3, r5
    3534:	f001 ff9c 	bl	5470 <__aeabi_dmul>
    3538:	4ab1      	ldr	r2, [pc, #708]	; (3800 <__ieee754_pow+0xa08>)
    353a:	4bb2      	ldr	r3, [pc, #712]	; (3804 <__ieee754_pow+0xa0c>)
    353c:	f002 fa12 	bl	5964 <__aeabi_dsub>
    3540:	0022      	movs	r2, r4
    3542:	002b      	movs	r3, r5
    3544:	f001 ff94 	bl	5470 <__aeabi_dmul>
    3548:	4aaf      	ldr	r2, [pc, #700]	; (3808 <__ieee754_pow+0xa10>)
    354a:	4bb0      	ldr	r3, [pc, #704]	; (380c <__ieee754_pow+0xa14>)
    354c:	f001 f840 	bl	45d0 <__aeabi_dadd>
    3550:	0022      	movs	r2, r4
    3552:	002b      	movs	r3, r5
    3554:	f001 ff8c 	bl	5470 <__aeabi_dmul>
    3558:	0002      	movs	r2, r0
    355a:	000b      	movs	r3, r1
    355c:	0030      	movs	r0, r6
    355e:	0039      	movs	r1, r7
    3560:	f002 fa00 	bl	5964 <__aeabi_dsub>
    3564:	0004      	movs	r4, r0
    3566:	000d      	movs	r5, r1
    3568:	0002      	movs	r2, r0
    356a:	000b      	movs	r3, r1
    356c:	0030      	movs	r0, r6
    356e:	0039      	movs	r1, r7
    3570:	f001 ff7e 	bl	5470 <__aeabi_dmul>
    3574:	2380      	movs	r3, #128	; 0x80
    3576:	9002      	str	r0, [sp, #8]
    3578:	9103      	str	r1, [sp, #12]
    357a:	2200      	movs	r2, #0
    357c:	05db      	lsls	r3, r3, #23
    357e:	0020      	movs	r0, r4
    3580:	0029      	movs	r1, r5
    3582:	f002 f9ef 	bl	5964 <__aeabi_dsub>
    3586:	0002      	movs	r2, r0
    3588:	000b      	movs	r3, r1
    358a:	9802      	ldr	r0, [sp, #8]
    358c:	9903      	ldr	r1, [sp, #12]
    358e:	f001 fb4b 	bl	4c28 <__aeabi_ddiv>
    3592:	9a00      	ldr	r2, [sp, #0]
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	0004      	movs	r4, r0
    3598:	000d      	movs	r5, r1
    359a:	0030      	movs	r0, r6
    359c:	0039      	movs	r1, r7
    359e:	f001 ff67 	bl	5470 <__aeabi_dmul>
    35a2:	9a00      	ldr	r2, [sp, #0]
    35a4:	9b01      	ldr	r3, [sp, #4]
    35a6:	f001 f813 	bl	45d0 <__aeabi_dadd>
    35aa:	0002      	movs	r2, r0
    35ac:	000b      	movs	r3, r1
    35ae:	0020      	movs	r0, r4
    35b0:	0029      	movs	r1, r5
    35b2:	f002 f9d7 	bl	5964 <__aeabi_dsub>
    35b6:	0032      	movs	r2, r6
    35b8:	003b      	movs	r3, r7
    35ba:	f002 f9d3 	bl	5964 <__aeabi_dsub>
    35be:	0002      	movs	r2, r0
    35c0:	000b      	movs	r3, r1
    35c2:	2000      	movs	r0, #0
    35c4:	4992      	ldr	r1, [pc, #584]	; (3810 <__ieee754_pow+0xa18>)
    35c6:	f002 f9cd 	bl	5964 <__aeabi_dsub>
    35ca:	464b      	mov	r3, r9
    35cc:	185b      	adds	r3, r3, r1
    35ce:	151a      	asrs	r2, r3, #20
    35d0:	2a00      	cmp	r2, #0
    35d2:	dc00      	bgt.n	35d6 <__ieee754_pow+0x7de>
    35d4:	e0f4      	b.n	37c0 <__ieee754_pow+0x9c8>
    35d6:	0019      	movs	r1, r3
    35d8:	9a06      	ldr	r2, [sp, #24]
    35da:	9b07      	ldr	r3, [sp, #28]
    35dc:	f001 ff48 	bl	5470 <__aeabi_dmul>
    35e0:	0006      	movs	r6, r0
    35e2:	e452      	b.n	2e8a <__ieee754_pow+0x92>
    35e4:	0032      	movs	r2, r6
    35e6:	0030      	movs	r0, r6
    35e8:	002b      	movs	r3, r5
    35ea:	0029      	movs	r1, r5
    35ec:	f001 ff40 	bl	5470 <__aeabi_dmul>
    35f0:	0006      	movs	r6, r0
    35f2:	e44a      	b.n	2e8a <__ieee754_pow+0x92>
    35f4:	4b87      	ldr	r3, [pc, #540]	; (3814 <__ieee754_pow+0xa1c>)
    35f6:	004e      	lsls	r6, r1, #1
    35f8:	0876      	lsrs	r6, r6, #1
    35fa:	429e      	cmp	r6, r3
    35fc:	dc00      	bgt.n	3600 <__ieee754_pow+0x808>
    35fe:	e0bf      	b.n	3780 <__ieee754_pow+0x988>
    3600:	4b85      	ldr	r3, [pc, #532]	; (3818 <__ieee754_pow+0xa20>)
    3602:	18cb      	adds	r3, r1, r3
    3604:	4303      	orrs	r3, r0
    3606:	d10c      	bne.n	3622 <__ieee754_pow+0x82a>
    3608:	9a00      	ldr	r2, [sp, #0]
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	f002 f9aa 	bl	5964 <__aeabi_dsub>
    3610:	0002      	movs	r2, r0
    3612:	000b      	movs	r3, r1
    3614:	9804      	ldr	r0, [sp, #16]
    3616:	9905      	ldr	r1, [sp, #20]
    3618:	f000 fb6c 	bl	3cf4 <__aeabi_dcmple>
    361c:	2800      	cmp	r0, #0
    361e:	d100      	bne.n	3622 <__ieee754_pow+0x82a>
    3620:	e701      	b.n	3426 <__ieee754_pow+0x62e>
    3622:	9806      	ldr	r0, [sp, #24]
    3624:	9907      	ldr	r1, [sp, #28]
    3626:	4a7d      	ldr	r2, [pc, #500]	; (381c <__ieee754_pow+0xa24>)
    3628:	4b7d      	ldr	r3, [pc, #500]	; (3820 <__ieee754_pow+0xa28>)
    362a:	f001 ff21 	bl	5470 <__aeabi_dmul>
    362e:	4a7b      	ldr	r2, [pc, #492]	; (381c <__ieee754_pow+0xa24>)
    3630:	4b7b      	ldr	r3, [pc, #492]	; (3820 <__ieee754_pow+0xa28>)
    3632:	f001 ff1d 	bl	5470 <__aeabi_dmul>
    3636:	0006      	movs	r6, r0
    3638:	f7ff fc27 	bl	2e8a <__ieee754_pow+0x92>
    363c:	2300      	movs	r3, #0
    363e:	4c79      	ldr	r4, [pc, #484]	; (3824 <__ieee754_pow+0xa2c>)
    3640:	9306      	str	r3, [sp, #24]
    3642:	9407      	str	r4, [sp, #28]
    3644:	e666      	b.n	3314 <__ieee754_pow+0x51c>
    3646:	4653      	mov	r3, sl
    3648:	2b00      	cmp	r3, #0
    364a:	db00      	blt.n	364e <__ieee754_pow+0x856>
    364c:	e4c3      	b.n	2fd6 <__ieee754_pow+0x1de>
    364e:	9b00      	ldr	r3, [sp, #0]
    3650:	9c01      	ldr	r4, [sp, #4]
    3652:	2280      	movs	r2, #128	; 0x80
    3654:	0612      	lsls	r2, r2, #24
    3656:	001e      	movs	r6, r3
    3658:	4694      	mov	ip, r2
    365a:	0023      	movs	r3, r4
    365c:	4463      	add	r3, ip
    365e:	0019      	movs	r1, r3
    3660:	f7ff fc13 	bl	2e8a <__ieee754_pow+0x92>
    3664:	0002      	movs	r2, r0
    3666:	000b      	movs	r3, r1
    3668:	2000      	movs	r0, #0
    366a:	4969      	ldr	r1, [pc, #420]	; (3810 <__ieee754_pow+0xa18>)
    366c:	f001 fadc 	bl	4c28 <__aeabi_ddiv>
    3670:	e44a      	b.n	2f08 <__ieee754_pow+0x110>
    3672:	4b6d      	ldr	r3, [pc, #436]	; (3828 <__ieee754_pow+0xa30>)
    3674:	429c      	cmp	r4, r3
    3676:	dc00      	bgt.n	367a <__ieee754_pow+0x882>
    3678:	e4aa      	b.n	2fd0 <__ieee754_pow+0x1d8>
    367a:	4b65      	ldr	r3, [pc, #404]	; (3810 <__ieee754_pow+0xa18>)
    367c:	429c      	cmp	r4, r3
    367e:	dd01      	ble.n	3684 <__ieee754_pow+0x88c>
    3680:	f7ff fc2c 	bl	2edc <__ieee754_pow+0xe4>
    3684:	2200      	movs	r2, #0
    3686:	4b62      	ldr	r3, [pc, #392]	; (3810 <__ieee754_pow+0xa18>)
    3688:	f002 f96c 	bl	5964 <__aeabi_dsub>
    368c:	22c0      	movs	r2, #192	; 0xc0
    368e:	4b67      	ldr	r3, [pc, #412]	; (382c <__ieee754_pow+0xa34>)
    3690:	05d2      	lsls	r2, r2, #23
    3692:	0004      	movs	r4, r0
    3694:	000d      	movs	r5, r1
    3696:	f001 feeb 	bl	5470 <__aeabi_dmul>
    369a:	4a65      	ldr	r2, [pc, #404]	; (3830 <__ieee754_pow+0xa38>)
    369c:	0006      	movs	r6, r0
    369e:	000f      	movs	r7, r1
    36a0:	4b64      	ldr	r3, [pc, #400]	; (3834 <__ieee754_pow+0xa3c>)
    36a2:	0020      	movs	r0, r4
    36a4:	0029      	movs	r1, r5
    36a6:	f001 fee3 	bl	5470 <__aeabi_dmul>
    36aa:	2200      	movs	r2, #0
    36ac:	9002      	str	r0, [sp, #8]
    36ae:	9103      	str	r1, [sp, #12]
    36b0:	4b61      	ldr	r3, [pc, #388]	; (3838 <__ieee754_pow+0xa40>)
    36b2:	0020      	movs	r0, r4
    36b4:	0029      	movs	r1, r5
    36b6:	f001 fedb 	bl	5470 <__aeabi_dmul>
    36ba:	0002      	movs	r2, r0
    36bc:	000b      	movs	r3, r1
    36be:	485f      	ldr	r0, [pc, #380]	; (383c <__ieee754_pow+0xa44>)
    36c0:	495f      	ldr	r1, [pc, #380]	; (3840 <__ieee754_pow+0xa48>)
    36c2:	f002 f94f 	bl	5964 <__aeabi_dsub>
    36c6:	0022      	movs	r2, r4
    36c8:	002b      	movs	r3, r5
    36ca:	f001 fed1 	bl	5470 <__aeabi_dmul>
    36ce:	0002      	movs	r2, r0
    36d0:	000b      	movs	r3, r1
    36d2:	2000      	movs	r0, #0
    36d4:	495b      	ldr	r1, [pc, #364]	; (3844 <__ieee754_pow+0xa4c>)
    36d6:	f002 f945 	bl	5964 <__aeabi_dsub>
    36da:	0022      	movs	r2, r4
    36dc:	9004      	str	r0, [sp, #16]
    36de:	9105      	str	r1, [sp, #20]
    36e0:	002b      	movs	r3, r5
    36e2:	0020      	movs	r0, r4
    36e4:	0029      	movs	r1, r5
    36e6:	f001 fec3 	bl	5470 <__aeabi_dmul>
    36ea:	0002      	movs	r2, r0
    36ec:	000b      	movs	r3, r1
    36ee:	9804      	ldr	r0, [sp, #16]
    36f0:	9905      	ldr	r1, [sp, #20]
    36f2:	f001 febd 	bl	5470 <__aeabi_dmul>
    36f6:	4a54      	ldr	r2, [pc, #336]	; (3848 <__ieee754_pow+0xa50>)
    36f8:	4b4c      	ldr	r3, [pc, #304]	; (382c <__ieee754_pow+0xa34>)
    36fa:	f001 feb9 	bl	5470 <__aeabi_dmul>
    36fe:	0002      	movs	r2, r0
    3700:	000b      	movs	r3, r1
    3702:	9802      	ldr	r0, [sp, #8]
    3704:	9903      	ldr	r1, [sp, #12]
    3706:	f002 f92d 	bl	5964 <__aeabi_dsub>
    370a:	0002      	movs	r2, r0
    370c:	000b      	movs	r3, r1
    370e:	0004      	movs	r4, r0
    3710:	000d      	movs	r5, r1
    3712:	0030      	movs	r0, r6
    3714:	0039      	movs	r1, r7
    3716:	f000 ff5b 	bl	45d0 <__aeabi_dadd>
    371a:	2200      	movs	r2, #0
    371c:	0010      	movs	r0, r2
    371e:	003b      	movs	r3, r7
    3720:	0032      	movs	r2, r6
    3722:	9002      	str	r0, [sp, #8]
    3724:	9103      	str	r1, [sp, #12]
    3726:	f002 f91d 	bl	5964 <__aeabi_dsub>
    372a:	0002      	movs	r2, r0
    372c:	000b      	movs	r3, r1
    372e:	0020      	movs	r0, r4
    3730:	0029      	movs	r1, r5
    3732:	f002 f917 	bl	5964 <__aeabi_dsub>
    3736:	9004      	str	r0, [sp, #16]
    3738:	9105      	str	r1, [sp, #20]
    373a:	e5e1      	b.n	3300 <__ieee754_pow+0x508>
    373c:	4a43      	ldr	r2, [pc, #268]	; (384c <__ieee754_pow+0xa54>)
    373e:	4b44      	ldr	r3, [pc, #272]	; (3850 <__ieee754_pow+0xa58>)
    3740:	9806      	ldr	r0, [sp, #24]
    3742:	9907      	ldr	r1, [sp, #28]
    3744:	f001 fe94 	bl	5470 <__aeabi_dmul>
    3748:	4a40      	ldr	r2, [pc, #256]	; (384c <__ieee754_pow+0xa54>)
    374a:	4b41      	ldr	r3, [pc, #260]	; (3850 <__ieee754_pow+0xa58>)
    374c:	f001 fe90 	bl	5470 <__aeabi_dmul>
    3750:	0006      	movs	r6, r0
    3752:	f7ff fb9a 	bl	2e8a <__ieee754_pow+0x92>
    3756:	2a00      	cmp	r2, #0
    3758:	d001      	beq.n	375e <__ieee754_pow+0x966>
    375a:	f7ff fba5 	bl	2ea8 <__ieee754_pow+0xb0>
    375e:	3214      	adds	r2, #20
    3760:	1ad3      	subs	r3, r2, r3
    3762:	003a      	movs	r2, r7
    3764:	411a      	asrs	r2, r3
    3766:	0011      	movs	r1, r2
    3768:	4099      	lsls	r1, r3
    376a:	428f      	cmp	r7, r1
    376c:	d001      	beq.n	3772 <__ieee754_pow+0x97a>
    376e:	f7ff fb6f 	bl	2e50 <__ieee754_pow+0x58>
    3772:	2301      	movs	r3, #1
    3774:	4013      	ands	r3, r2
    3776:	2202      	movs	r2, #2
    3778:	1ad3      	subs	r3, r2, r3
    377a:	469b      	mov	fp, r3
    377c:	f7ff fb68 	bl	2e50 <__ieee754_pow+0x58>
    3780:	4b30      	ldr	r3, [pc, #192]	; (3844 <__ieee754_pow+0xa4c>)
    3782:	429e      	cmp	r6, r3
    3784:	dd00      	ble.n	3788 <__ieee754_pow+0x990>
    3786:	e64e      	b.n	3426 <__ieee754_pow+0x62e>
    3788:	2300      	movs	r3, #0
    378a:	4699      	mov	r9, r3
    378c:	4698      	mov	r8, r3
    378e:	e67a      	b.n	3486 <__ieee754_pow+0x68e>
    3790:	0002      	movs	r2, r0
    3792:	000b      	movs	r3, r1
    3794:	f7ff fc14 	bl	2fc0 <__ieee754_pow+0x1c8>
    3798:	2380      	movs	r3, #128	; 0x80
    379a:	4c2e      	ldr	r4, [pc, #184]	; (3854 <__ieee754_pow+0xa5c>)
    379c:	05db      	lsls	r3, r3, #23
    379e:	9308      	str	r3, [sp, #32]
    37a0:	9409      	str	r4, [sp, #36]	; 0x24
    37a2:	4b2d      	ldr	r3, [pc, #180]	; (3858 <__ieee754_pow+0xa60>)
    37a4:	4c2d      	ldr	r4, [pc, #180]	; (385c <__ieee754_pow+0xa64>)
    37a6:	2200      	movs	r2, #0
    37a8:	930c      	str	r3, [sp, #48]	; 0x30
    37aa:	940d      	str	r4, [sp, #52]	; 0x34
    37ac:	2480      	movs	r4, #128	; 0x80
    37ae:	4b2c      	ldr	r3, [pc, #176]	; (3860 <__ieee754_pow+0xa68>)
    37b0:	02e4      	lsls	r4, r4, #11
    37b2:	9206      	str	r2, [sp, #24]
    37b4:	9307      	str	r3, [sp, #28]
    37b6:	e456      	b.n	3066 <__ieee754_pow+0x26e>
    37b8:	4643      	mov	r3, r8
    37ba:	425b      	negs	r3, r3
    37bc:	4698      	mov	r8, r3
    37be:	e651      	b.n	3464 <__ieee754_pow+0x66c>
    37c0:	4642      	mov	r2, r8
    37c2:	f000 f9fd 	bl	3bc0 <scalbn>
    37c6:	e707      	b.n	35d8 <__ieee754_pow+0x7e0>
    37c8:	fffffc02 	.word	0xfffffc02
    37cc:	fffffc01 	.word	0xfffffc01
    37d0:	000fffff 	.word	0x000fffff
    37d4:	3fe62e43 	.word	0x3fe62e43
    37d8:	fefa39ef 	.word	0xfefa39ef
    37dc:	3fe62e42 	.word	0x3fe62e42
    37e0:	0ca86c39 	.word	0x0ca86c39
    37e4:	be205c61 	.word	0xbe205c61
    37e8:	72bea4d0 	.word	0x72bea4d0
    37ec:	3e663769 	.word	0x3e663769
    37f0:	c5d26bf1 	.word	0xc5d26bf1
    37f4:	3ebbbd41 	.word	0x3ebbbd41
    37f8:	af25de2c 	.word	0xaf25de2c
    37fc:	3f11566a 	.word	0x3f11566a
    3800:	16bebd93 	.word	0x16bebd93
    3804:	3f66c16c 	.word	0x3f66c16c
    3808:	5555553e 	.word	0x5555553e
    380c:	3fc55555 	.word	0x3fc55555
    3810:	3ff00000 	.word	0x3ff00000
    3814:	4090cbff 	.word	0x4090cbff
    3818:	3f6f3400 	.word	0x3f6f3400
    381c:	c2f8f359 	.word	0xc2f8f359
    3820:	01a56e1f 	.word	0x01a56e1f
    3824:	bff00000 	.word	0xbff00000
    3828:	3feffffe 	.word	0x3feffffe
    382c:	3ff71547 	.word	0x3ff71547
    3830:	f85ddf44 	.word	0xf85ddf44
    3834:	3e54ae0b 	.word	0x3e54ae0b
    3838:	3fd00000 	.word	0x3fd00000
    383c:	55555555 	.word	0x55555555
    3840:	3fd55555 	.word	0x3fd55555
    3844:	3fe00000 	.word	0x3fe00000
    3848:	652b82fe 	.word	0x652b82fe
    384c:	8800759c 	.word	0x8800759c
    3850:	7e37e43c 	.word	0x7e37e43c
    3854:	3fe2b803 	.word	0x3fe2b803
    3858:	43cfd006 	.word	0x43cfd006
    385c:	3e4cfdeb 	.word	0x3e4cfdeb
    3860:	3ff80000 	.word	0x3ff80000

00003864 <__ieee754_sqrt>:
    3864:	b5f0      	push	{r4, r5, r6, r7, lr}
    3866:	4656      	mov	r6, sl
    3868:	464d      	mov	r5, r9
    386a:	4644      	mov	r4, r8
    386c:	465f      	mov	r7, fp
    386e:	4b75      	ldr	r3, [pc, #468]	; (3a44 <__ieee754_sqrt+0x1e0>)
    3870:	b4f0      	push	{r4, r5, r6, r7}
    3872:	000a      	movs	r2, r1
    3874:	000d      	movs	r5, r1
    3876:	0019      	movs	r1, r3
    3878:	b083      	sub	sp, #12
    387a:	0006      	movs	r6, r0
    387c:	0004      	movs	r4, r0
    387e:	4029      	ands	r1, r5
    3880:	4299      	cmp	r1, r3
    3882:	d100      	bne.n	3886 <__ieee754_sqrt+0x22>
    3884:	e0ba      	b.n	39fc <__ieee754_sqrt+0x198>
    3886:	2d00      	cmp	r5, #0
    3888:	dc00      	bgt.n	388c <__ieee754_sqrt+0x28>
    388a:	e094      	b.n	39b6 <__ieee754_sqrt+0x152>
    388c:	152d      	asrs	r5, r5, #20
    388e:	d100      	bne.n	3892 <__ieee754_sqrt+0x2e>
    3890:	e0a3      	b.n	39da <__ieee754_sqrt+0x176>
    3892:	4b6d      	ldr	r3, [pc, #436]	; (3a48 <__ieee754_sqrt+0x1e4>)
    3894:	0312      	lsls	r2, r2, #12
    3896:	469c      	mov	ip, r3
    3898:	2380      	movs	r3, #128	; 0x80
    389a:	0b12      	lsrs	r2, r2, #12
    389c:	035b      	lsls	r3, r3, #13
    389e:	4465      	add	r5, ip
    38a0:	431a      	orrs	r2, r3
    38a2:	07eb      	lsls	r3, r5, #31
    38a4:	d500      	bpl.n	38a8 <__ieee754_sqrt+0x44>
    38a6:	e081      	b.n	39ac <__ieee754_sqrt+0x148>
    38a8:	106b      	asrs	r3, r5, #1
    38aa:	4698      	mov	r8, r3
    38ac:	0fe3      	lsrs	r3, r4, #31
    38ae:	189b      	adds	r3, r3, r2
    38b0:	189b      	adds	r3, r3, r2
    38b2:	2280      	movs	r2, #128	; 0x80
    38b4:	2116      	movs	r1, #22
    38b6:	2600      	movs	r6, #0
    38b8:	2700      	movs	r7, #0
    38ba:	0064      	lsls	r4, r4, #1
    38bc:	0392      	lsls	r2, r2, #14
    38be:	18b8      	adds	r0, r7, r2
    38c0:	4298      	cmp	r0, r3
    38c2:	dc02      	bgt.n	38ca <__ieee754_sqrt+0x66>
    38c4:	1887      	adds	r7, r0, r2
    38c6:	1a1b      	subs	r3, r3, r0
    38c8:	18b6      	adds	r6, r6, r2
    38ca:	0fe0      	lsrs	r0, r4, #31
    38cc:	005b      	lsls	r3, r3, #1
    38ce:	3901      	subs	r1, #1
    38d0:	181b      	adds	r3, r3, r0
    38d2:	0064      	lsls	r4, r4, #1
    38d4:	0852      	lsrs	r2, r2, #1
    38d6:	2900      	cmp	r1, #0
    38d8:	d1f1      	bne.n	38be <__ieee754_sqrt+0x5a>
    38da:	2200      	movs	r2, #0
    38dc:	9201      	str	r2, [sp, #4]
    38de:	4694      	mov	ip, r2
    38e0:	2280      	movs	r2, #128	; 0x80
    38e2:	0612      	lsls	r2, r2, #24
    38e4:	2020      	movs	r0, #32
    38e6:	4691      	mov	r9, r2
    38e8:	e009      	b.n	38fe <__ieee754_sqrt+0x9a>
    38ea:	429f      	cmp	r7, r3
    38ec:	d041      	beq.n	3972 <__ieee754_sqrt+0x10e>
    38ee:	0fe1      	lsrs	r1, r4, #31
    38f0:	18c9      	adds	r1, r1, r3
    38f2:	3801      	subs	r0, #1
    38f4:	18cb      	adds	r3, r1, r3
    38f6:	0064      	lsls	r4, r4, #1
    38f8:	0852      	lsrs	r2, r2, #1
    38fa:	2800      	cmp	r0, #0
    38fc:	d01e      	beq.n	393c <__ieee754_sqrt+0xd8>
    38fe:	4661      	mov	r1, ip
    3900:	1851      	adds	r1, r2, r1
    3902:	429f      	cmp	r7, r3
    3904:	daf1      	bge.n	38ea <__ieee754_sqrt+0x86>
    3906:	188d      	adds	r5, r1, r2
    3908:	46ac      	mov	ip, r5
    390a:	0fcd      	lsrs	r5, r1, #31
    390c:	07ed      	lsls	r5, r5, #31
    390e:	46ba      	mov	sl, r7
    3910:	454d      	cmp	r5, r9
    3912:	d039      	beq.n	3988 <__ieee754_sqrt+0x124>
    3914:	1bdb      	subs	r3, r3, r7
    3916:	428c      	cmp	r4, r1
    3918:	41bf      	sbcs	r7, r7
    391a:	427f      	negs	r7, r7
    391c:	1bdb      	subs	r3, r3, r7
    391e:	1a64      	subs	r4, r4, r1
    3920:	9901      	ldr	r1, [sp, #4]
    3922:	3801      	subs	r0, #1
    3924:	468b      	mov	fp, r1
    3926:	4493      	add	fp, r2
    3928:	4659      	mov	r1, fp
    392a:	9101      	str	r1, [sp, #4]
    392c:	0fe1      	lsrs	r1, r4, #31
    392e:	18c9      	adds	r1, r1, r3
    3930:	4657      	mov	r7, sl
    3932:	18cb      	adds	r3, r1, r3
    3934:	0064      	lsls	r4, r4, #1
    3936:	0852      	lsrs	r2, r2, #1
    3938:	2800      	cmp	r0, #0
    393a:	d1e0      	bne.n	38fe <__ieee754_sqrt+0x9a>
    393c:	4323      	orrs	r3, r4
    393e:	d12b      	bne.n	3998 <__ieee754_sqrt+0x134>
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	085b      	lsrs	r3, r3, #1
    3944:	4941      	ldr	r1, [pc, #260]	; (3a4c <__ieee754_sqrt+0x1e8>)
    3946:	1072      	asrs	r2, r6, #1
    3948:	468c      	mov	ip, r1
    394a:	4462      	add	r2, ip
    394c:	07f1      	lsls	r1, r6, #31
    394e:	d502      	bpl.n	3956 <__ieee754_sqrt+0xf2>
    3950:	2180      	movs	r1, #128	; 0x80
    3952:	0609      	lsls	r1, r1, #24
    3954:	430b      	orrs	r3, r1
    3956:	4641      	mov	r1, r8
    3958:	0509      	lsls	r1, r1, #20
    395a:	188d      	adds	r5, r1, r2
    395c:	001e      	movs	r6, r3
    395e:	002f      	movs	r7, r5
    3960:	0030      	movs	r0, r6
    3962:	0039      	movs	r1, r7
    3964:	b003      	add	sp, #12
    3966:	bc3c      	pop	{r2, r3, r4, r5}
    3968:	4690      	mov	r8, r2
    396a:	4699      	mov	r9, r3
    396c:	46a2      	mov	sl, r4
    396e:	46ab      	mov	fp, r5
    3970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3972:	42a1      	cmp	r1, r4
    3974:	d80e      	bhi.n	3994 <__ieee754_sqrt+0x130>
    3976:	188d      	adds	r5, r1, r2
    3978:	46ac      	mov	ip, r5
    397a:	0fcd      	lsrs	r5, r1, #31
    397c:	07ed      	lsls	r5, r5, #31
    397e:	454d      	cmp	r5, r9
    3980:	d048      	beq.n	3a14 <__ieee754_sqrt+0x1b0>
    3982:	469a      	mov	sl, r3
    3984:	2300      	movs	r3, #0
    3986:	e7ca      	b.n	391e <__ieee754_sqrt+0xba>
    3988:	4665      	mov	r5, ip
    398a:	2d00      	cmp	r5, #0
    398c:	dbc2      	blt.n	3914 <__ieee754_sqrt+0xb0>
    398e:	1c7d      	adds	r5, r7, #1
    3990:	46aa      	mov	sl, r5
    3992:	e7bf      	b.n	3914 <__ieee754_sqrt+0xb0>
    3994:	003b      	movs	r3, r7
    3996:	e7aa      	b.n	38ee <__ieee754_sqrt+0x8a>
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	3301      	adds	r3, #1
    399c:	d03e      	beq.n	3a1c <__ieee754_sqrt+0x1b8>
    399e:	9a01      	ldr	r2, [sp, #4]
    39a0:	2301      	movs	r3, #1
    39a2:	4694      	mov	ip, r2
    39a4:	4013      	ands	r3, r2
    39a6:	4463      	add	r3, ip
    39a8:	085b      	lsrs	r3, r3, #1
    39aa:	e7cb      	b.n	3944 <__ieee754_sqrt+0xe0>
    39ac:	0fe3      	lsrs	r3, r4, #31
    39ae:	0052      	lsls	r2, r2, #1
    39b0:	189a      	adds	r2, r3, r2
    39b2:	0064      	lsls	r4, r4, #1
    39b4:	e778      	b.n	38a8 <__ieee754_sqrt+0x44>
    39b6:	006b      	lsls	r3, r5, #1
    39b8:	085b      	lsrs	r3, r3, #1
    39ba:	4303      	orrs	r3, r0
    39bc:	002f      	movs	r7, r5
    39be:	2b00      	cmp	r3, #0
    39c0:	d0ce      	beq.n	3960 <__ieee754_sqrt+0xfc>
    39c2:	2500      	movs	r5, #0
    39c4:	2a00      	cmp	r2, #0
    39c6:	d131      	bne.n	3a2c <__ieee754_sqrt+0x1c8>
    39c8:	0ae2      	lsrs	r2, r4, #11
    39ca:	3d15      	subs	r5, #21
    39cc:	0564      	lsls	r4, r4, #21
    39ce:	2a00      	cmp	r2, #0
    39d0:	d0fa      	beq.n	39c8 <__ieee754_sqrt+0x164>
    39d2:	2380      	movs	r3, #128	; 0x80
    39d4:	035b      	lsls	r3, r3, #13
    39d6:	421a      	tst	r2, r3
    39d8:	d123      	bne.n	3a22 <__ieee754_sqrt+0x1be>
    39da:	2080      	movs	r0, #128	; 0x80
    39dc:	2300      	movs	r3, #0
    39de:	0340      	lsls	r0, r0, #13
    39e0:	e000      	b.n	39e4 <__ieee754_sqrt+0x180>
    39e2:	000b      	movs	r3, r1
    39e4:	0052      	lsls	r2, r2, #1
    39e6:	1c59      	adds	r1, r3, #1
    39e8:	4202      	tst	r2, r0
    39ea:	d0fa      	beq.n	39e2 <__ieee754_sqrt+0x17e>
    39ec:	2020      	movs	r0, #32
    39ee:	1a40      	subs	r0, r0, r1
    39f0:	1aed      	subs	r5, r5, r3
    39f2:	0023      	movs	r3, r4
    39f4:	40c3      	lsrs	r3, r0
    39f6:	408c      	lsls	r4, r1
    39f8:	431a      	orrs	r2, r3
    39fa:	e74a      	b.n	3892 <__ieee754_sqrt+0x2e>
    39fc:	0002      	movs	r2, r0
    39fe:	002b      	movs	r3, r5
    3a00:	0029      	movs	r1, r5
    3a02:	f001 fd35 	bl	5470 <__aeabi_dmul>
    3a06:	0032      	movs	r2, r6
    3a08:	002b      	movs	r3, r5
    3a0a:	f000 fde1 	bl	45d0 <__aeabi_dadd>
    3a0e:	0006      	movs	r6, r0
    3a10:	000f      	movs	r7, r1
    3a12:	e7a5      	b.n	3960 <__ieee754_sqrt+0xfc>
    3a14:	4665      	mov	r5, ip
    3a16:	2d00      	cmp	r5, #0
    3a18:	dab9      	bge.n	398e <__ieee754_sqrt+0x12a>
    3a1a:	e7b2      	b.n	3982 <__ieee754_sqrt+0x11e>
    3a1c:	3601      	adds	r6, #1
    3a1e:	2300      	movs	r3, #0
    3a20:	e790      	b.n	3944 <__ieee754_sqrt+0xe0>
    3a22:	2301      	movs	r3, #1
    3a24:	2020      	movs	r0, #32
    3a26:	425b      	negs	r3, r3
    3a28:	2100      	movs	r1, #0
    3a2a:	e7e1      	b.n	39f0 <__ieee754_sqrt+0x18c>
    3a2c:	003b      	movs	r3, r7
    3a2e:	0002      	movs	r2, r0
    3a30:	0039      	movs	r1, r7
    3a32:	f001 ff97 	bl	5964 <__aeabi_dsub>
    3a36:	0002      	movs	r2, r0
    3a38:	000b      	movs	r3, r1
    3a3a:	f001 f8f5 	bl	4c28 <__aeabi_ddiv>
    3a3e:	0006      	movs	r6, r0
    3a40:	000f      	movs	r7, r1
    3a42:	e78d      	b.n	3960 <__ieee754_sqrt+0xfc>
    3a44:	7ff00000 	.word	0x7ff00000
    3a48:	fffffc01 	.word	0xfffffc01
    3a4c:	3fe00000 	.word	0x3fe00000

00003a50 <fabs>:
    3a50:	0049      	lsls	r1, r1, #1
    3a52:	084b      	lsrs	r3, r1, #1
    3a54:	0019      	movs	r1, r3
    3a56:	4770      	bx	lr

00003a58 <finite>:
    3a58:	4b03      	ldr	r3, [pc, #12]	; (3a68 <finite+0x10>)
    3a5a:	0048      	lsls	r0, r1, #1
    3a5c:	469c      	mov	ip, r3
    3a5e:	0840      	lsrs	r0, r0, #1
    3a60:	4460      	add	r0, ip
    3a62:	0fc0      	lsrs	r0, r0, #31
    3a64:	4770      	bx	lr
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	80100000 	.word	0x80100000

00003a6c <matherr>:
    3a6c:	2000      	movs	r0, #0
    3a6e:	4770      	bx	lr

00003a70 <nan>:
    3a70:	2000      	movs	r0, #0
    3a72:	4901      	ldr	r1, [pc, #4]	; (3a78 <nan+0x8>)
    3a74:	4770      	bx	lr
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	7ff80000 	.word	0x7ff80000

00003a7c <rint>:
    3a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7e:	4647      	mov	r7, r8
    3a80:	b480      	push	{r7}
    3a82:	0fcb      	lsrs	r3, r1, #31
    3a84:	4698      	mov	r8, r3
    3a86:	4c4a      	ldr	r4, [pc, #296]	; (3bb0 <rint+0x134>)
    3a88:	004b      	lsls	r3, r1, #1
    3a8a:	0d5b      	lsrs	r3, r3, #21
    3a8c:	191e      	adds	r6, r3, r4
    3a8e:	b082      	sub	sp, #8
    3a90:	0007      	movs	r7, r0
    3a92:	000a      	movs	r2, r1
    3a94:	2e13      	cmp	r6, #19
    3a96:	dc35      	bgt.n	3b04 <rint+0x88>
    3a98:	2e00      	cmp	r6, #0
    3a9a:	db57      	blt.n	3b4c <rint+0xd0>
    3a9c:	4b45      	ldr	r3, [pc, #276]	; (3bb4 <rint+0x138>)
    3a9e:	0004      	movs	r4, r0
    3aa0:	4133      	asrs	r3, r6
    3aa2:	001f      	movs	r7, r3
    3aa4:	400f      	ands	r7, r1
    3aa6:	4307      	orrs	r7, r0
    3aa8:	000d      	movs	r5, r1
    3aaa:	2f00      	cmp	r7, #0
    3aac:	d024      	beq.n	3af8 <rint+0x7c>
    3aae:	085b      	lsrs	r3, r3, #1
    3ab0:	001c      	movs	r4, r3
    3ab2:	400c      	ands	r4, r1
    3ab4:	4320      	orrs	r0, r4
    3ab6:	2700      	movs	r7, #0
    3ab8:	2800      	cmp	r0, #0
    3aba:	d007      	beq.n	3acc <rint+0x50>
    3abc:	2e13      	cmp	r6, #19
    3abe:	d100      	bne.n	3ac2 <rint+0x46>
    3ac0:	e072      	b.n	3ba8 <rint+0x12c>
    3ac2:	2280      	movs	r2, #128	; 0x80
    3ac4:	02d2      	lsls	r2, r2, #11
    3ac6:	4132      	asrs	r2, r6
    3ac8:	4399      	bics	r1, r3
    3aca:	430a      	orrs	r2, r1
    3acc:	4643      	mov	r3, r8
    3ace:	00de      	lsls	r6, r3, #3
    3ad0:	4b39      	ldr	r3, [pc, #228]	; (3bb8 <rint+0x13c>)
    3ad2:	0011      	movs	r1, r2
    3ad4:	199e      	adds	r6, r3, r6
    3ad6:	6834      	ldr	r4, [r6, #0]
    3ad8:	6875      	ldr	r5, [r6, #4]
    3ada:	0038      	movs	r0, r7
    3adc:	0022      	movs	r2, r4
    3ade:	002b      	movs	r3, r5
    3ae0:	f000 fd76 	bl	45d0 <__aeabi_dadd>
    3ae4:	9000      	str	r0, [sp, #0]
    3ae6:	9101      	str	r1, [sp, #4]
    3ae8:	9800      	ldr	r0, [sp, #0]
    3aea:	9901      	ldr	r1, [sp, #4]
    3aec:	0022      	movs	r2, r4
    3aee:	002b      	movs	r3, r5
    3af0:	f001 ff38 	bl	5964 <__aeabi_dsub>
    3af4:	0004      	movs	r4, r0
    3af6:	000d      	movs	r5, r1
    3af8:	0020      	movs	r0, r4
    3afa:	0029      	movs	r1, r5
    3afc:	b002      	add	sp, #8
    3afe:	bc04      	pop	{r2}
    3b00:	4690      	mov	r8, r2
    3b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b04:	2e33      	cmp	r6, #51	; 0x33
    3b06:	dd0c      	ble.n	3b22 <rint+0xa6>
    3b08:	2380      	movs	r3, #128	; 0x80
    3b0a:	0004      	movs	r4, r0
    3b0c:	000d      	movs	r5, r1
    3b0e:	00db      	lsls	r3, r3, #3
    3b10:	429e      	cmp	r6, r3
    3b12:	d1f1      	bne.n	3af8 <rint+0x7c>
    3b14:	0002      	movs	r2, r0
    3b16:	000b      	movs	r3, r1
    3b18:	f000 fd5a 	bl	45d0 <__aeabi_dadd>
    3b1c:	0004      	movs	r4, r0
    3b1e:	000d      	movs	r5, r1
    3b20:	e7ea      	b.n	3af8 <rint+0x7c>
    3b22:	4c26      	ldr	r4, [pc, #152]	; (3bbc <rint+0x140>)
    3b24:	000d      	movs	r5, r1
    3b26:	46a4      	mov	ip, r4
    3b28:	2401      	movs	r4, #1
    3b2a:	4463      	add	r3, ip
    3b2c:	4264      	negs	r4, r4
    3b2e:	40dc      	lsrs	r4, r3
    3b30:	46a4      	mov	ip, r4
    3b32:	4661      	mov	r1, ip
    3b34:	0004      	movs	r4, r0
    3b36:	4201      	tst	r1, r0
    3b38:	d0de      	beq.n	3af8 <rint+0x7c>
    3b3a:	0849      	lsrs	r1, r1, #1
    3b3c:	4201      	tst	r1, r0
    3b3e:	d0c5      	beq.n	3acc <rint+0x50>
    3b40:	2780      	movs	r7, #128	; 0x80
    3b42:	05ff      	lsls	r7, r7, #23
    3b44:	411f      	asrs	r7, r3
    3b46:	4388      	bics	r0, r1
    3b48:	4307      	orrs	r7, r0
    3b4a:	e7bf      	b.n	3acc <rint+0x50>
    3b4c:	004b      	lsls	r3, r1, #1
    3b4e:	085b      	lsrs	r3, r3, #1
    3b50:	4303      	orrs	r3, r0
    3b52:	0004      	movs	r4, r0
    3b54:	000d      	movs	r5, r1
    3b56:	2b00      	cmp	r3, #0
    3b58:	d0ce      	beq.n	3af8 <rint+0x7c>
    3b5a:	030b      	lsls	r3, r1, #12
    3b5c:	0b1b      	lsrs	r3, r3, #12
    3b5e:	4303      	orrs	r3, r0
    3b60:	425a      	negs	r2, r3
    3b62:	4313      	orrs	r3, r2
    3b64:	2280      	movs	r2, #128	; 0x80
    3b66:	0b1b      	lsrs	r3, r3, #12
    3b68:	0312      	lsls	r2, r2, #12
    3b6a:	4013      	ands	r3, r2
    3b6c:	0c4a      	lsrs	r2, r1, #17
    3b6e:	0452      	lsls	r2, r2, #17
    3b70:	4313      	orrs	r3, r2
    3b72:	0019      	movs	r1, r3
    3b74:	4643      	mov	r3, r8
    3b76:	4a10      	ldr	r2, [pc, #64]	; (3bb8 <rint+0x13c>)
    3b78:	00db      	lsls	r3, r3, #3
    3b7a:	18d3      	adds	r3, r2, r3
    3b7c:	681c      	ldr	r4, [r3, #0]
    3b7e:	685d      	ldr	r5, [r3, #4]
    3b80:	0022      	movs	r2, r4
    3b82:	002b      	movs	r3, r5
    3b84:	f000 fd24 	bl	45d0 <__aeabi_dadd>
    3b88:	9000      	str	r0, [sp, #0]
    3b8a:	9101      	str	r1, [sp, #4]
    3b8c:	9800      	ldr	r0, [sp, #0]
    3b8e:	9901      	ldr	r1, [sp, #4]
    3b90:	0022      	movs	r2, r4
    3b92:	002b      	movs	r3, r5
    3b94:	f001 fee6 	bl	5964 <__aeabi_dsub>
    3b98:	4642      	mov	r2, r8
    3b9a:	004b      	lsls	r3, r1, #1
    3b9c:	085b      	lsrs	r3, r3, #1
    3b9e:	07d6      	lsls	r6, r2, #31
    3ba0:	4333      	orrs	r3, r6
    3ba2:	0004      	movs	r4, r0
    3ba4:	001d      	movs	r5, r3
    3ba6:	e7a7      	b.n	3af8 <rint+0x7c>
    3ba8:	2780      	movs	r7, #128	; 0x80
    3baa:	063f      	lsls	r7, r7, #24
    3bac:	e789      	b.n	3ac2 <rint+0x46>
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	fffffc01 	.word	0xfffffc01
    3bb4:	000fffff 	.word	0x000fffff
    3bb8:	00006848 	.word	0x00006848
    3bbc:	fffffbed 	.word	0xfffffbed

00003bc0 <scalbn>:
    3bc0:	004b      	lsls	r3, r1, #1
    3bc2:	b570      	push	{r4, r5, r6, lr}
    3bc4:	0d5b      	lsrs	r3, r3, #21
    3bc6:	0014      	movs	r4, r2
    3bc8:	000a      	movs	r2, r1
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d11a      	bne.n	3c04 <scalbn+0x44>
    3bce:	004b      	lsls	r3, r1, #1
    3bd0:	085b      	lsrs	r3, r3, #1
    3bd2:	4303      	orrs	r3, r0
    3bd4:	d015      	beq.n	3c02 <scalbn+0x42>
    3bd6:	2200      	movs	r2, #0
    3bd8:	4b22      	ldr	r3, [pc, #136]	; (3c64 <scalbn+0xa4>)
    3bda:	f001 fc49 	bl	5470 <__aeabi_dmul>
    3bde:	4b22      	ldr	r3, [pc, #136]	; (3c68 <scalbn+0xa8>)
    3be0:	000a      	movs	r2, r1
    3be2:	429c      	cmp	r4, r3
    3be4:	db22      	blt.n	3c2c <scalbn+0x6c>
    3be6:	004b      	lsls	r3, r1, #1
    3be8:	0d5b      	lsrs	r3, r3, #21
    3bea:	3b36      	subs	r3, #54	; 0x36
    3bec:	4d1f      	ldr	r5, [pc, #124]	; (3c6c <scalbn+0xac>)
    3bee:	18e3      	adds	r3, r4, r3
    3bf0:	42ab      	cmp	r3, r5
    3bf2:	dc20      	bgt.n	3c36 <scalbn+0x76>
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	dd0d      	ble.n	3c14 <scalbn+0x54>
    3bf8:	4c1d      	ldr	r4, [pc, #116]	; (3c70 <scalbn+0xb0>)
    3bfa:	051b      	lsls	r3, r3, #20
    3bfc:	4022      	ands	r2, r4
    3bfe:	431a      	orrs	r2, r3
    3c00:	0011      	movs	r1, r2
    3c02:	bd70      	pop	{r4, r5, r6, pc}
    3c04:	4d1b      	ldr	r5, [pc, #108]	; (3c74 <scalbn+0xb4>)
    3c06:	42ab      	cmp	r3, r5
    3c08:	d1f0      	bne.n	3bec <scalbn+0x2c>
    3c0a:	0002      	movs	r2, r0
    3c0c:	000b      	movs	r3, r1
    3c0e:	f000 fcdf 	bl	45d0 <__aeabi_dadd>
    3c12:	e7f6      	b.n	3c02 <scalbn+0x42>
    3c14:	001d      	movs	r5, r3
    3c16:	3535      	adds	r5, #53	; 0x35
    3c18:	da18      	bge.n	3c4c <scalbn+0x8c>
    3c1a:	4b17      	ldr	r3, [pc, #92]	; (3c78 <scalbn+0xb8>)
    3c1c:	0002      	movs	r2, r0
    3c1e:	429c      	cmp	r4, r3
    3c20:	dc0a      	bgt.n	3c38 <scalbn+0x78>
    3c22:	000b      	movs	r3, r1
    3c24:	4815      	ldr	r0, [pc, #84]	; (3c7c <scalbn+0xbc>)
    3c26:	4916      	ldr	r1, [pc, #88]	; (3c80 <scalbn+0xc0>)
    3c28:	f000 f832 	bl	3c90 <copysign>
    3c2c:	4a13      	ldr	r2, [pc, #76]	; (3c7c <scalbn+0xbc>)
    3c2e:	4b14      	ldr	r3, [pc, #80]	; (3c80 <scalbn+0xc0>)
    3c30:	f001 fc1e 	bl	5470 <__aeabi_dmul>
    3c34:	e7e5      	b.n	3c02 <scalbn+0x42>
    3c36:	0002      	movs	r2, r0
    3c38:	000b      	movs	r3, r1
    3c3a:	4812      	ldr	r0, [pc, #72]	; (3c84 <scalbn+0xc4>)
    3c3c:	4912      	ldr	r1, [pc, #72]	; (3c88 <scalbn+0xc8>)
    3c3e:	f000 f827 	bl	3c90 <copysign>
    3c42:	4a10      	ldr	r2, [pc, #64]	; (3c84 <scalbn+0xc4>)
    3c44:	4b10      	ldr	r3, [pc, #64]	; (3c88 <scalbn+0xc8>)
    3c46:	f001 fc13 	bl	5470 <__aeabi_dmul>
    3c4a:	e7da      	b.n	3c02 <scalbn+0x42>
    3c4c:	4c08      	ldr	r4, [pc, #32]	; (3c70 <scalbn+0xb0>)
    3c4e:	3336      	adds	r3, #54	; 0x36
    3c50:	4022      	ands	r2, r4
    3c52:	051b      	lsls	r3, r3, #20
    3c54:	4313      	orrs	r3, r2
    3c56:	0019      	movs	r1, r3
    3c58:	2200      	movs	r2, #0
    3c5a:	4b0c      	ldr	r3, [pc, #48]	; (3c8c <scalbn+0xcc>)
    3c5c:	f001 fc08 	bl	5470 <__aeabi_dmul>
    3c60:	e7cf      	b.n	3c02 <scalbn+0x42>
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	43500000 	.word	0x43500000
    3c68:	ffff3cb0 	.word	0xffff3cb0
    3c6c:	000007fe 	.word	0x000007fe
    3c70:	800fffff 	.word	0x800fffff
    3c74:	000007ff 	.word	0x000007ff
    3c78:	0000c350 	.word	0x0000c350
    3c7c:	c2f8f359 	.word	0xc2f8f359
    3c80:	01a56e1f 	.word	0x01a56e1f
    3c84:	8800759c 	.word	0x8800759c
    3c88:	7e37e43c 	.word	0x7e37e43c
    3c8c:	3c900000 	.word	0x3c900000

00003c90 <copysign>:
    3c90:	b530      	push	{r4, r5, lr}
    3c92:	004a      	lsls	r2, r1, #1
    3c94:	0fdb      	lsrs	r3, r3, #31
    3c96:	07db      	lsls	r3, r3, #31
    3c98:	0852      	lsrs	r2, r2, #1
    3c9a:	431a      	orrs	r2, r3
    3c9c:	0011      	movs	r1, r2
    3c9e:	bd30      	pop	{r4, r5, pc}

00003ca0 <__gnu_thumb1_case_uhi>:
    3ca0:	b403      	push	{r0, r1}
    3ca2:	4671      	mov	r1, lr
    3ca4:	0849      	lsrs	r1, r1, #1
    3ca6:	0040      	lsls	r0, r0, #1
    3ca8:	0049      	lsls	r1, r1, #1
    3caa:	5a09      	ldrh	r1, [r1, r0]
    3cac:	0049      	lsls	r1, r1, #1
    3cae:	448e      	add	lr, r1
    3cb0:	bc03      	pop	{r0, r1}
    3cb2:	4770      	bx	lr

00003cb4 <__aeabi_cdrcmple>:
    3cb4:	4684      	mov	ip, r0
    3cb6:	1c10      	adds	r0, r2, #0
    3cb8:	4662      	mov	r2, ip
    3cba:	468c      	mov	ip, r1
    3cbc:	1c19      	adds	r1, r3, #0
    3cbe:	4663      	mov	r3, ip
    3cc0:	e000      	b.n	3cc4 <__aeabi_cdcmpeq>
    3cc2:	46c0      	nop			; (mov r8, r8)

00003cc4 <__aeabi_cdcmpeq>:
    3cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3cc6:	f001 fb69 	bl	539c <__ledf2>
    3cca:	2800      	cmp	r0, #0
    3ccc:	d401      	bmi.n	3cd2 <__aeabi_cdcmpeq+0xe>
    3cce:	2100      	movs	r1, #0
    3cd0:	42c8      	cmn	r0, r1
    3cd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003cd4 <__aeabi_dcmpeq>:
    3cd4:	b510      	push	{r4, lr}
    3cd6:	f001 fabd 	bl	5254 <__eqdf2>
    3cda:	4240      	negs	r0, r0
    3cdc:	3001      	adds	r0, #1
    3cde:	bd10      	pop	{r4, pc}

00003ce0 <__aeabi_dcmplt>:
    3ce0:	b510      	push	{r4, lr}
    3ce2:	f001 fb5b 	bl	539c <__ledf2>
    3ce6:	2800      	cmp	r0, #0
    3ce8:	db01      	blt.n	3cee <__aeabi_dcmplt+0xe>
    3cea:	2000      	movs	r0, #0
    3cec:	bd10      	pop	{r4, pc}
    3cee:	2001      	movs	r0, #1
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)

00003cf4 <__aeabi_dcmple>:
    3cf4:	b510      	push	{r4, lr}
    3cf6:	f001 fb51 	bl	539c <__ledf2>
    3cfa:	2800      	cmp	r0, #0
    3cfc:	dd01      	ble.n	3d02 <__aeabi_dcmple+0xe>
    3cfe:	2000      	movs	r0, #0
    3d00:	bd10      	pop	{r4, pc}
    3d02:	2001      	movs	r0, #1
    3d04:	bd10      	pop	{r4, pc}
    3d06:	46c0      	nop			; (mov r8, r8)

00003d08 <__aeabi_dcmpgt>:
    3d08:	b510      	push	{r4, lr}
    3d0a:	f001 fae3 	bl	52d4 <__gedf2>
    3d0e:	2800      	cmp	r0, #0
    3d10:	dc01      	bgt.n	3d16 <__aeabi_dcmpgt+0xe>
    3d12:	2000      	movs	r0, #0
    3d14:	bd10      	pop	{r4, pc}
    3d16:	2001      	movs	r0, #1
    3d18:	bd10      	pop	{r4, pc}
    3d1a:	46c0      	nop			; (mov r8, r8)

00003d1c <__aeabi_dcmpge>:
    3d1c:	b510      	push	{r4, lr}
    3d1e:	f001 fad9 	bl	52d4 <__gedf2>
    3d22:	2800      	cmp	r0, #0
    3d24:	da01      	bge.n	3d2a <__aeabi_dcmpge+0xe>
    3d26:	2000      	movs	r0, #0
    3d28:	bd10      	pop	{r4, pc}
    3d2a:	2001      	movs	r0, #1
    3d2c:	bd10      	pop	{r4, pc}
    3d2e:	46c0      	nop			; (mov r8, r8)

00003d30 <__aeabi_cfrcmple>:
    3d30:	4684      	mov	ip, r0
    3d32:	1c08      	adds	r0, r1, #0
    3d34:	4661      	mov	r1, ip
    3d36:	e7ff      	b.n	3d38 <__aeabi_cfcmpeq>

00003d38 <__aeabi_cfcmpeq>:
    3d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3d3a:	f000 f901 	bl	3f40 <__lesf2>
    3d3e:	2800      	cmp	r0, #0
    3d40:	d401      	bmi.n	3d46 <__aeabi_cfcmpeq+0xe>
    3d42:	2100      	movs	r1, #0
    3d44:	42c8      	cmn	r0, r1
    3d46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003d48 <__aeabi_fcmpeq>:
    3d48:	b510      	push	{r4, lr}
    3d4a:	f000 f88d 	bl	3e68 <__eqsf2>
    3d4e:	4240      	negs	r0, r0
    3d50:	3001      	adds	r0, #1
    3d52:	bd10      	pop	{r4, pc}

00003d54 <__aeabi_fcmplt>:
    3d54:	b510      	push	{r4, lr}
    3d56:	f000 f8f3 	bl	3f40 <__lesf2>
    3d5a:	2800      	cmp	r0, #0
    3d5c:	db01      	blt.n	3d62 <__aeabi_fcmplt+0xe>
    3d5e:	2000      	movs	r0, #0
    3d60:	bd10      	pop	{r4, pc}
    3d62:	2001      	movs	r0, #1
    3d64:	bd10      	pop	{r4, pc}
    3d66:	46c0      	nop			; (mov r8, r8)

00003d68 <__aeabi_fcmple>:
    3d68:	b510      	push	{r4, lr}
    3d6a:	f000 f8e9 	bl	3f40 <__lesf2>
    3d6e:	2800      	cmp	r0, #0
    3d70:	dd01      	ble.n	3d76 <__aeabi_fcmple+0xe>
    3d72:	2000      	movs	r0, #0
    3d74:	bd10      	pop	{r4, pc}
    3d76:	2001      	movs	r0, #1
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)

00003d7c <__aeabi_fcmpgt>:
    3d7c:	b510      	push	{r4, lr}
    3d7e:	f000 f89b 	bl	3eb8 <__gesf2>
    3d82:	2800      	cmp	r0, #0
    3d84:	dc01      	bgt.n	3d8a <__aeabi_fcmpgt+0xe>
    3d86:	2000      	movs	r0, #0
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	2001      	movs	r0, #1
    3d8c:	bd10      	pop	{r4, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)

00003d90 <__aeabi_fcmpge>:
    3d90:	b510      	push	{r4, lr}
    3d92:	f000 f891 	bl	3eb8 <__gesf2>
    3d96:	2800      	cmp	r0, #0
    3d98:	da01      	bge.n	3d9e <__aeabi_fcmpge+0xe>
    3d9a:	2000      	movs	r0, #0
    3d9c:	bd10      	pop	{r4, pc}
    3d9e:	2001      	movs	r0, #1
    3da0:	bd10      	pop	{r4, pc}
    3da2:	46c0      	nop			; (mov r8, r8)

00003da4 <__aeabi_lmul>:
    3da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3da6:	464f      	mov	r7, r9
    3da8:	4646      	mov	r6, r8
    3daa:	b4c0      	push	{r6, r7}
    3dac:	0416      	lsls	r6, r2, #16
    3dae:	0c36      	lsrs	r6, r6, #16
    3db0:	4699      	mov	r9, r3
    3db2:	0033      	movs	r3, r6
    3db4:	0405      	lsls	r5, r0, #16
    3db6:	0c2c      	lsrs	r4, r5, #16
    3db8:	0c07      	lsrs	r7, r0, #16
    3dba:	0c15      	lsrs	r5, r2, #16
    3dbc:	4363      	muls	r3, r4
    3dbe:	437e      	muls	r6, r7
    3dc0:	436f      	muls	r7, r5
    3dc2:	4365      	muls	r5, r4
    3dc4:	0c1c      	lsrs	r4, r3, #16
    3dc6:	19ad      	adds	r5, r5, r6
    3dc8:	1964      	adds	r4, r4, r5
    3dca:	469c      	mov	ip, r3
    3dcc:	42a6      	cmp	r6, r4
    3dce:	d903      	bls.n	3dd8 <__aeabi_lmul+0x34>
    3dd0:	2380      	movs	r3, #128	; 0x80
    3dd2:	025b      	lsls	r3, r3, #9
    3dd4:	4698      	mov	r8, r3
    3dd6:	4447      	add	r7, r8
    3dd8:	4663      	mov	r3, ip
    3dda:	0c25      	lsrs	r5, r4, #16
    3ddc:	19ef      	adds	r7, r5, r7
    3dde:	041d      	lsls	r5, r3, #16
    3de0:	464b      	mov	r3, r9
    3de2:	434a      	muls	r2, r1
    3de4:	4343      	muls	r3, r0
    3de6:	0c2d      	lsrs	r5, r5, #16
    3de8:	0424      	lsls	r4, r4, #16
    3dea:	1964      	adds	r4, r4, r5
    3dec:	1899      	adds	r1, r3, r2
    3dee:	19c9      	adds	r1, r1, r7
    3df0:	0020      	movs	r0, r4
    3df2:	bc0c      	pop	{r2, r3}
    3df4:	4690      	mov	r8, r2
    3df6:	4699      	mov	r9, r3
    3df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)

00003dfc <__aeabi_f2uiz>:
    3dfc:	219e      	movs	r1, #158	; 0x9e
    3dfe:	b510      	push	{r4, lr}
    3e00:	05c9      	lsls	r1, r1, #23
    3e02:	1c04      	adds	r4, r0, #0
    3e04:	f7ff ffc4 	bl	3d90 <__aeabi_fcmpge>
    3e08:	2800      	cmp	r0, #0
    3e0a:	d103      	bne.n	3e14 <__aeabi_f2uiz+0x18>
    3e0c:	1c20      	adds	r0, r4, #0
    3e0e:	f000 fb75 	bl	44fc <__aeabi_f2iz>
    3e12:	bd10      	pop	{r4, pc}
    3e14:	219e      	movs	r1, #158	; 0x9e
    3e16:	1c20      	adds	r0, r4, #0
    3e18:	05c9      	lsls	r1, r1, #23
    3e1a:	f000 f9e9 	bl	41f0 <__aeabi_fsub>
    3e1e:	f000 fb6d 	bl	44fc <__aeabi_f2iz>
    3e22:	2380      	movs	r3, #128	; 0x80
    3e24:	061b      	lsls	r3, r3, #24
    3e26:	469c      	mov	ip, r3
    3e28:	4460      	add	r0, ip
    3e2a:	e7f2      	b.n	3e12 <__aeabi_f2uiz+0x16>

00003e2c <__aeabi_d2uiz>:
    3e2c:	b570      	push	{r4, r5, r6, lr}
    3e2e:	2200      	movs	r2, #0
    3e30:	4b0c      	ldr	r3, [pc, #48]	; (3e64 <__aeabi_d2uiz+0x38>)
    3e32:	0004      	movs	r4, r0
    3e34:	000d      	movs	r5, r1
    3e36:	f7ff ff71 	bl	3d1c <__aeabi_dcmpge>
    3e3a:	2800      	cmp	r0, #0
    3e3c:	d104      	bne.n	3e48 <__aeabi_d2uiz+0x1c>
    3e3e:	0020      	movs	r0, r4
    3e40:	0029      	movs	r1, r5
    3e42:	f002 f903 	bl	604c <__aeabi_d2iz>
    3e46:	bd70      	pop	{r4, r5, r6, pc}
    3e48:	4b06      	ldr	r3, [pc, #24]	; (3e64 <__aeabi_d2uiz+0x38>)
    3e4a:	2200      	movs	r2, #0
    3e4c:	0020      	movs	r0, r4
    3e4e:	0029      	movs	r1, r5
    3e50:	f001 fd88 	bl	5964 <__aeabi_dsub>
    3e54:	f002 f8fa 	bl	604c <__aeabi_d2iz>
    3e58:	2380      	movs	r3, #128	; 0x80
    3e5a:	061b      	lsls	r3, r3, #24
    3e5c:	469c      	mov	ip, r3
    3e5e:	4460      	add	r0, ip
    3e60:	e7f1      	b.n	3e46 <__aeabi_d2uiz+0x1a>
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	41e00000 	.word	0x41e00000

00003e68 <__eqsf2>:
    3e68:	0243      	lsls	r3, r0, #9
    3e6a:	b570      	push	{r4, r5, r6, lr}
    3e6c:	0042      	lsls	r2, r0, #1
    3e6e:	004c      	lsls	r4, r1, #1
    3e70:	0a5d      	lsrs	r5, r3, #9
    3e72:	0fc3      	lsrs	r3, r0, #31
    3e74:	0248      	lsls	r0, r1, #9
    3e76:	0e12      	lsrs	r2, r2, #24
    3e78:	0a46      	lsrs	r6, r0, #9
    3e7a:	0e24      	lsrs	r4, r4, #24
    3e7c:	0fc9      	lsrs	r1, r1, #31
    3e7e:	2aff      	cmp	r2, #255	; 0xff
    3e80:	d00f      	beq.n	3ea2 <__eqsf2+0x3a>
    3e82:	2cff      	cmp	r4, #255	; 0xff
    3e84:	d011      	beq.n	3eaa <__eqsf2+0x42>
    3e86:	2001      	movs	r0, #1
    3e88:	42a2      	cmp	r2, r4
    3e8a:	d000      	beq.n	3e8e <__eqsf2+0x26>
    3e8c:	bd70      	pop	{r4, r5, r6, pc}
    3e8e:	42b5      	cmp	r5, r6
    3e90:	d1fc      	bne.n	3e8c <__eqsf2+0x24>
    3e92:	428b      	cmp	r3, r1
    3e94:	d00d      	beq.n	3eb2 <__eqsf2+0x4a>
    3e96:	2a00      	cmp	r2, #0
    3e98:	d1f8      	bne.n	3e8c <__eqsf2+0x24>
    3e9a:	0028      	movs	r0, r5
    3e9c:	1e43      	subs	r3, r0, #1
    3e9e:	4198      	sbcs	r0, r3
    3ea0:	e7f4      	b.n	3e8c <__eqsf2+0x24>
    3ea2:	2001      	movs	r0, #1
    3ea4:	2d00      	cmp	r5, #0
    3ea6:	d1f1      	bne.n	3e8c <__eqsf2+0x24>
    3ea8:	e7eb      	b.n	3e82 <__eqsf2+0x1a>
    3eaa:	2001      	movs	r0, #1
    3eac:	2e00      	cmp	r6, #0
    3eae:	d1ed      	bne.n	3e8c <__eqsf2+0x24>
    3eb0:	e7e9      	b.n	3e86 <__eqsf2+0x1e>
    3eb2:	2000      	movs	r0, #0
    3eb4:	e7ea      	b.n	3e8c <__eqsf2+0x24>
    3eb6:	46c0      	nop			; (mov r8, r8)

00003eb8 <__gesf2>:
    3eb8:	0243      	lsls	r3, r0, #9
    3eba:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ebc:	0042      	lsls	r2, r0, #1
    3ebe:	0a5d      	lsrs	r5, r3, #9
    3ec0:	0fc3      	lsrs	r3, r0, #31
    3ec2:	0248      	lsls	r0, r1, #9
    3ec4:	0a44      	lsrs	r4, r0, #9
    3ec6:	0048      	lsls	r0, r1, #1
    3ec8:	0e12      	lsrs	r2, r2, #24
    3eca:	0e00      	lsrs	r0, r0, #24
    3ecc:	0fc9      	lsrs	r1, r1, #31
    3ece:	2aff      	cmp	r2, #255	; 0xff
    3ed0:	d01f      	beq.n	3f12 <__gesf2+0x5a>
    3ed2:	28ff      	cmp	r0, #255	; 0xff
    3ed4:	d022      	beq.n	3f1c <__gesf2+0x64>
    3ed6:	2a00      	cmp	r2, #0
    3ed8:	d109      	bne.n	3eee <__gesf2+0x36>
    3eda:	426e      	negs	r6, r5
    3edc:	416e      	adcs	r6, r5
    3ede:	2800      	cmp	r0, #0
    3ee0:	d10f      	bne.n	3f02 <__gesf2+0x4a>
    3ee2:	2c00      	cmp	r4, #0
    3ee4:	d10d      	bne.n	3f02 <__gesf2+0x4a>
    3ee6:	2000      	movs	r0, #0
    3ee8:	2d00      	cmp	r5, #0
    3eea:	d009      	beq.n	3f00 <__gesf2+0x48>
    3eec:	e005      	b.n	3efa <__gesf2+0x42>
    3eee:	2800      	cmp	r0, #0
    3ef0:	d101      	bne.n	3ef6 <__gesf2+0x3e>
    3ef2:	2c00      	cmp	r4, #0
    3ef4:	d001      	beq.n	3efa <__gesf2+0x42>
    3ef6:	428b      	cmp	r3, r1
    3ef8:	d013      	beq.n	3f22 <__gesf2+0x6a>
    3efa:	4258      	negs	r0, r3
    3efc:	2301      	movs	r3, #1
    3efe:	4318      	orrs	r0, r3
    3f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f02:	2e00      	cmp	r6, #0
    3f04:	d0f7      	beq.n	3ef6 <__gesf2+0x3e>
    3f06:	4248      	negs	r0, r1
    3f08:	4141      	adcs	r1, r0
    3f0a:	2001      	movs	r0, #1
    3f0c:	4249      	negs	r1, r1
    3f0e:	4308      	orrs	r0, r1
    3f10:	e7f6      	b.n	3f00 <__gesf2+0x48>
    3f12:	2d00      	cmp	r5, #0
    3f14:	d0dd      	beq.n	3ed2 <__gesf2+0x1a>
    3f16:	2002      	movs	r0, #2
    3f18:	4240      	negs	r0, r0
    3f1a:	e7f1      	b.n	3f00 <__gesf2+0x48>
    3f1c:	2c00      	cmp	r4, #0
    3f1e:	d0da      	beq.n	3ed6 <__gesf2+0x1e>
    3f20:	e7f9      	b.n	3f16 <__gesf2+0x5e>
    3f22:	4282      	cmp	r2, r0
    3f24:	dce9      	bgt.n	3efa <__gesf2+0x42>
    3f26:	db04      	blt.n	3f32 <__gesf2+0x7a>
    3f28:	42a5      	cmp	r5, r4
    3f2a:	d8e6      	bhi.n	3efa <__gesf2+0x42>
    3f2c:	2000      	movs	r0, #0
    3f2e:	42a5      	cmp	r5, r4
    3f30:	d2e6      	bcs.n	3f00 <__gesf2+0x48>
    3f32:	4258      	negs	r0, r3
    3f34:	4143      	adcs	r3, r0
    3f36:	2001      	movs	r0, #1
    3f38:	425b      	negs	r3, r3
    3f3a:	4318      	orrs	r0, r3
    3f3c:	e7e0      	b.n	3f00 <__gesf2+0x48>
    3f3e:	46c0      	nop			; (mov r8, r8)

00003f40 <__lesf2>:
    3f40:	0243      	lsls	r3, r0, #9
    3f42:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f44:	0042      	lsls	r2, r0, #1
    3f46:	004c      	lsls	r4, r1, #1
    3f48:	0a5e      	lsrs	r6, r3, #9
    3f4a:	0fc3      	lsrs	r3, r0, #31
    3f4c:	0248      	lsls	r0, r1, #9
    3f4e:	0e12      	lsrs	r2, r2, #24
    3f50:	0a45      	lsrs	r5, r0, #9
    3f52:	0e24      	lsrs	r4, r4, #24
    3f54:	0fc9      	lsrs	r1, r1, #31
    3f56:	2aff      	cmp	r2, #255	; 0xff
    3f58:	d017      	beq.n	3f8a <__lesf2+0x4a>
    3f5a:	2cff      	cmp	r4, #255	; 0xff
    3f5c:	d019      	beq.n	3f92 <__lesf2+0x52>
    3f5e:	2a00      	cmp	r2, #0
    3f60:	d10b      	bne.n	3f7a <__lesf2+0x3a>
    3f62:	4270      	negs	r0, r6
    3f64:	4170      	adcs	r0, r6
    3f66:	2c00      	cmp	r4, #0
    3f68:	d017      	beq.n	3f9a <__lesf2+0x5a>
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d007      	beq.n	3f7e <__lesf2+0x3e>
    3f6e:	4248      	negs	r0, r1
    3f70:	4141      	adcs	r1, r0
    3f72:	2001      	movs	r0, #1
    3f74:	4249      	negs	r1, r1
    3f76:	4308      	orrs	r0, r1
    3f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f7a:	2c00      	cmp	r4, #0
    3f7c:	d013      	beq.n	3fa6 <__lesf2+0x66>
    3f7e:	428b      	cmp	r3, r1
    3f80:	d014      	beq.n	3fac <__lesf2+0x6c>
    3f82:	4258      	negs	r0, r3
    3f84:	2301      	movs	r3, #1
    3f86:	4318      	orrs	r0, r3
    3f88:	e7f6      	b.n	3f78 <__lesf2+0x38>
    3f8a:	2002      	movs	r0, #2
    3f8c:	2e00      	cmp	r6, #0
    3f8e:	d1f3      	bne.n	3f78 <__lesf2+0x38>
    3f90:	e7e3      	b.n	3f5a <__lesf2+0x1a>
    3f92:	2002      	movs	r0, #2
    3f94:	2d00      	cmp	r5, #0
    3f96:	d1ef      	bne.n	3f78 <__lesf2+0x38>
    3f98:	e7e1      	b.n	3f5e <__lesf2+0x1e>
    3f9a:	2d00      	cmp	r5, #0
    3f9c:	d1e5      	bne.n	3f6a <__lesf2+0x2a>
    3f9e:	2000      	movs	r0, #0
    3fa0:	2e00      	cmp	r6, #0
    3fa2:	d0e9      	beq.n	3f78 <__lesf2+0x38>
    3fa4:	e7ed      	b.n	3f82 <__lesf2+0x42>
    3fa6:	2d00      	cmp	r5, #0
    3fa8:	d1e9      	bne.n	3f7e <__lesf2+0x3e>
    3faa:	e7ea      	b.n	3f82 <__lesf2+0x42>
    3fac:	42a2      	cmp	r2, r4
    3fae:	dce8      	bgt.n	3f82 <__lesf2+0x42>
    3fb0:	db04      	blt.n	3fbc <__lesf2+0x7c>
    3fb2:	42ae      	cmp	r6, r5
    3fb4:	d8e5      	bhi.n	3f82 <__lesf2+0x42>
    3fb6:	2000      	movs	r0, #0
    3fb8:	42ae      	cmp	r6, r5
    3fba:	d2dd      	bcs.n	3f78 <__lesf2+0x38>
    3fbc:	4258      	negs	r0, r3
    3fbe:	4143      	adcs	r3, r0
    3fc0:	2001      	movs	r0, #1
    3fc2:	425b      	negs	r3, r3
    3fc4:	4318      	orrs	r0, r3
    3fc6:	e7d7      	b.n	3f78 <__lesf2+0x38>

00003fc8 <__aeabi_fmul>:
    3fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fca:	4657      	mov	r7, sl
    3fcc:	464e      	mov	r6, r9
    3fce:	4645      	mov	r5, r8
    3fd0:	0043      	lsls	r3, r0, #1
    3fd2:	b4e0      	push	{r5, r6, r7}
    3fd4:	0246      	lsls	r6, r0, #9
    3fd6:	4688      	mov	r8, r1
    3fd8:	0a76      	lsrs	r6, r6, #9
    3fda:	0e1f      	lsrs	r7, r3, #24
    3fdc:	0fc4      	lsrs	r4, r0, #31
    3fde:	2f00      	cmp	r7, #0
    3fe0:	d047      	beq.n	4072 <__aeabi_fmul+0xaa>
    3fe2:	2fff      	cmp	r7, #255	; 0xff
    3fe4:	d025      	beq.n	4032 <__aeabi_fmul+0x6a>
    3fe6:	2300      	movs	r3, #0
    3fe8:	2580      	movs	r5, #128	; 0x80
    3fea:	469a      	mov	sl, r3
    3fec:	4699      	mov	r9, r3
    3fee:	00f6      	lsls	r6, r6, #3
    3ff0:	04ed      	lsls	r5, r5, #19
    3ff2:	432e      	orrs	r6, r5
    3ff4:	3f7f      	subs	r7, #127	; 0x7f
    3ff6:	4643      	mov	r3, r8
    3ff8:	4642      	mov	r2, r8
    3ffa:	025d      	lsls	r5, r3, #9
    3ffc:	0fd2      	lsrs	r2, r2, #31
    3ffe:	005b      	lsls	r3, r3, #1
    4000:	0a6d      	lsrs	r5, r5, #9
    4002:	0e1b      	lsrs	r3, r3, #24
    4004:	4690      	mov	r8, r2
    4006:	d040      	beq.n	408a <__aeabi_fmul+0xc2>
    4008:	2bff      	cmp	r3, #255	; 0xff
    400a:	d039      	beq.n	4080 <__aeabi_fmul+0xb8>
    400c:	2280      	movs	r2, #128	; 0x80
    400e:	2000      	movs	r0, #0
    4010:	00ed      	lsls	r5, r5, #3
    4012:	04d2      	lsls	r2, r2, #19
    4014:	4315      	orrs	r5, r2
    4016:	3b7f      	subs	r3, #127	; 0x7f
    4018:	18fb      	adds	r3, r7, r3
    401a:	4642      	mov	r2, r8
    401c:	4657      	mov	r7, sl
    401e:	1c59      	adds	r1, r3, #1
    4020:	4062      	eors	r2, r4
    4022:	468c      	mov	ip, r1
    4024:	4307      	orrs	r7, r0
    4026:	2f0f      	cmp	r7, #15
    4028:	d85c      	bhi.n	40e4 <__aeabi_fmul+0x11c>
    402a:	496f      	ldr	r1, [pc, #444]	; (41e8 <__aeabi_fmul+0x220>)
    402c:	00bf      	lsls	r7, r7, #2
    402e:	59c9      	ldr	r1, [r1, r7]
    4030:	468f      	mov	pc, r1
    4032:	2e00      	cmp	r6, #0
    4034:	d145      	bne.n	40c2 <__aeabi_fmul+0xfa>
    4036:	2308      	movs	r3, #8
    4038:	469a      	mov	sl, r3
    403a:	3b06      	subs	r3, #6
    403c:	4699      	mov	r9, r3
    403e:	e7da      	b.n	3ff6 <__aeabi_fmul+0x2e>
    4040:	4642      	mov	r2, r8
    4042:	2802      	cmp	r0, #2
    4044:	d02d      	beq.n	40a2 <__aeabi_fmul+0xda>
    4046:	2803      	cmp	r0, #3
    4048:	d100      	bne.n	404c <__aeabi_fmul+0x84>
    404a:	e0c3      	b.n	41d4 <__aeabi_fmul+0x20c>
    404c:	2801      	cmp	r0, #1
    404e:	d000      	beq.n	4052 <__aeabi_fmul+0x8a>
    4050:	e0a2      	b.n	4198 <__aeabi_fmul+0x1d0>
    4052:	2500      	movs	r5, #0
    4054:	2600      	movs	r6, #0
    4056:	4002      	ands	r2, r0
    4058:	b2d4      	uxtb	r4, r2
    405a:	0276      	lsls	r6, r6, #9
    405c:	05ed      	lsls	r5, r5, #23
    405e:	0a76      	lsrs	r6, r6, #9
    4060:	432e      	orrs	r6, r5
    4062:	07e4      	lsls	r4, r4, #31
    4064:	4326      	orrs	r6, r4
    4066:	0030      	movs	r0, r6
    4068:	bc1c      	pop	{r2, r3, r4}
    406a:	4690      	mov	r8, r2
    406c:	4699      	mov	r9, r3
    406e:	46a2      	mov	sl, r4
    4070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4072:	2e00      	cmp	r6, #0
    4074:	d11a      	bne.n	40ac <__aeabi_fmul+0xe4>
    4076:	2304      	movs	r3, #4
    4078:	469a      	mov	sl, r3
    407a:	3b03      	subs	r3, #3
    407c:	4699      	mov	r9, r3
    407e:	e7ba      	b.n	3ff6 <__aeabi_fmul+0x2e>
    4080:	002a      	movs	r2, r5
    4082:	1e51      	subs	r1, r2, #1
    4084:	418a      	sbcs	r2, r1
    4086:	1c90      	adds	r0, r2, #2
    4088:	e7c6      	b.n	4018 <__aeabi_fmul+0x50>
    408a:	2001      	movs	r0, #1
    408c:	2d00      	cmp	r5, #0
    408e:	d0c3      	beq.n	4018 <__aeabi_fmul+0x50>
    4090:	0028      	movs	r0, r5
    4092:	f002 f9f7 	bl	6484 <__clzsi2>
    4096:	1f43      	subs	r3, r0, #5
    4098:	3076      	adds	r0, #118	; 0x76
    409a:	409d      	lsls	r5, r3
    409c:	4243      	negs	r3, r0
    409e:	2000      	movs	r0, #0
    40a0:	e7ba      	b.n	4018 <__aeabi_fmul+0x50>
    40a2:	2401      	movs	r4, #1
    40a4:	25ff      	movs	r5, #255	; 0xff
    40a6:	4014      	ands	r4, r2
    40a8:	2600      	movs	r6, #0
    40aa:	e7d6      	b.n	405a <__aeabi_fmul+0x92>
    40ac:	0030      	movs	r0, r6
    40ae:	f002 f9e9 	bl	6484 <__clzsi2>
    40b2:	1f43      	subs	r3, r0, #5
    40b4:	409e      	lsls	r6, r3
    40b6:	2300      	movs	r3, #0
    40b8:	3076      	adds	r0, #118	; 0x76
    40ba:	4247      	negs	r7, r0
    40bc:	469a      	mov	sl, r3
    40be:	4699      	mov	r9, r3
    40c0:	e799      	b.n	3ff6 <__aeabi_fmul+0x2e>
    40c2:	230c      	movs	r3, #12
    40c4:	469a      	mov	sl, r3
    40c6:	3b09      	subs	r3, #9
    40c8:	4699      	mov	r9, r3
    40ca:	e794      	b.n	3ff6 <__aeabi_fmul+0x2e>
    40cc:	2680      	movs	r6, #128	; 0x80
    40ce:	2400      	movs	r4, #0
    40d0:	03f6      	lsls	r6, r6, #15
    40d2:	25ff      	movs	r5, #255	; 0xff
    40d4:	e7c1      	b.n	405a <__aeabi_fmul+0x92>
    40d6:	0035      	movs	r5, r6
    40d8:	4648      	mov	r0, r9
    40da:	e7b2      	b.n	4042 <__aeabi_fmul+0x7a>
    40dc:	0035      	movs	r5, r6
    40de:	0022      	movs	r2, r4
    40e0:	4648      	mov	r0, r9
    40e2:	e7ae      	b.n	4042 <__aeabi_fmul+0x7a>
    40e4:	0429      	lsls	r1, r5, #16
    40e6:	0c09      	lsrs	r1, r1, #16
    40e8:	0008      	movs	r0, r1
    40ea:	0c37      	lsrs	r7, r6, #16
    40ec:	0436      	lsls	r6, r6, #16
    40ee:	0c36      	lsrs	r6, r6, #16
    40f0:	0c2c      	lsrs	r4, r5, #16
    40f2:	4379      	muls	r1, r7
    40f4:	4370      	muls	r0, r6
    40f6:	4367      	muls	r7, r4
    40f8:	4374      	muls	r4, r6
    40fa:	0c06      	lsrs	r6, r0, #16
    40fc:	1864      	adds	r4, r4, r1
    40fe:	1936      	adds	r6, r6, r4
    4100:	42b1      	cmp	r1, r6
    4102:	d903      	bls.n	410c <__aeabi_fmul+0x144>
    4104:	2180      	movs	r1, #128	; 0x80
    4106:	0249      	lsls	r1, r1, #9
    4108:	4688      	mov	r8, r1
    410a:	4447      	add	r7, r8
    410c:	0400      	lsls	r0, r0, #16
    410e:	0c00      	lsrs	r0, r0, #16
    4110:	0431      	lsls	r1, r6, #16
    4112:	1809      	adds	r1, r1, r0
    4114:	018d      	lsls	r5, r1, #6
    4116:	1e68      	subs	r0, r5, #1
    4118:	4185      	sbcs	r5, r0
    411a:	0e89      	lsrs	r1, r1, #26
    411c:	4329      	orrs	r1, r5
    411e:	0c35      	lsrs	r5, r6, #16
    4120:	19ed      	adds	r5, r5, r7
    4122:	01ad      	lsls	r5, r5, #6
    4124:	430d      	orrs	r5, r1
    4126:	0129      	lsls	r1, r5, #4
    4128:	d504      	bpl.n	4134 <__aeabi_fmul+0x16c>
    412a:	2301      	movs	r3, #1
    412c:	0869      	lsrs	r1, r5, #1
    412e:	401d      	ands	r5, r3
    4130:	4663      	mov	r3, ip
    4132:	430d      	orrs	r5, r1
    4134:	0019      	movs	r1, r3
    4136:	317f      	adds	r1, #127	; 0x7f
    4138:	2900      	cmp	r1, #0
    413a:	dd25      	ble.n	4188 <__aeabi_fmul+0x1c0>
    413c:	0768      	lsls	r0, r5, #29
    413e:	d004      	beq.n	414a <__aeabi_fmul+0x182>
    4140:	200f      	movs	r0, #15
    4142:	4028      	ands	r0, r5
    4144:	2804      	cmp	r0, #4
    4146:	d000      	beq.n	414a <__aeabi_fmul+0x182>
    4148:	3504      	adds	r5, #4
    414a:	0128      	lsls	r0, r5, #4
    414c:	d503      	bpl.n	4156 <__aeabi_fmul+0x18e>
    414e:	4927      	ldr	r1, [pc, #156]	; (41ec <__aeabi_fmul+0x224>)
    4150:	3380      	adds	r3, #128	; 0x80
    4152:	400d      	ands	r5, r1
    4154:	0019      	movs	r1, r3
    4156:	29fe      	cmp	r1, #254	; 0xfe
    4158:	dca3      	bgt.n	40a2 <__aeabi_fmul+0xda>
    415a:	2401      	movs	r4, #1
    415c:	01ad      	lsls	r5, r5, #6
    415e:	0a6e      	lsrs	r6, r5, #9
    4160:	4014      	ands	r4, r2
    4162:	b2cd      	uxtb	r5, r1
    4164:	e779      	b.n	405a <__aeabi_fmul+0x92>
    4166:	2080      	movs	r0, #128	; 0x80
    4168:	03c0      	lsls	r0, r0, #15
    416a:	4206      	tst	r6, r0
    416c:	d007      	beq.n	417e <__aeabi_fmul+0x1b6>
    416e:	4205      	tst	r5, r0
    4170:	d105      	bne.n	417e <__aeabi_fmul+0x1b6>
    4172:	4328      	orrs	r0, r5
    4174:	0246      	lsls	r6, r0, #9
    4176:	0a76      	lsrs	r6, r6, #9
    4178:	4644      	mov	r4, r8
    417a:	25ff      	movs	r5, #255	; 0xff
    417c:	e76d      	b.n	405a <__aeabi_fmul+0x92>
    417e:	4306      	orrs	r6, r0
    4180:	0276      	lsls	r6, r6, #9
    4182:	0a76      	lsrs	r6, r6, #9
    4184:	25ff      	movs	r5, #255	; 0xff
    4186:	e768      	b.n	405a <__aeabi_fmul+0x92>
    4188:	2401      	movs	r4, #1
    418a:	1a61      	subs	r1, r4, r1
    418c:	291b      	cmp	r1, #27
    418e:	dd05      	ble.n	419c <__aeabi_fmul+0x1d4>
    4190:	4014      	ands	r4, r2
    4192:	2500      	movs	r5, #0
    4194:	2600      	movs	r6, #0
    4196:	e760      	b.n	405a <__aeabi_fmul+0x92>
    4198:	4663      	mov	r3, ip
    419a:	e7cb      	b.n	4134 <__aeabi_fmul+0x16c>
    419c:	002e      	movs	r6, r5
    419e:	2320      	movs	r3, #32
    41a0:	40ce      	lsrs	r6, r1
    41a2:	1a59      	subs	r1, r3, r1
    41a4:	408d      	lsls	r5, r1
    41a6:	1e6b      	subs	r3, r5, #1
    41a8:	419d      	sbcs	r5, r3
    41aa:	432e      	orrs	r6, r5
    41ac:	0773      	lsls	r3, r6, #29
    41ae:	d004      	beq.n	41ba <__aeabi_fmul+0x1f2>
    41b0:	230f      	movs	r3, #15
    41b2:	4033      	ands	r3, r6
    41b4:	2b04      	cmp	r3, #4
    41b6:	d000      	beq.n	41ba <__aeabi_fmul+0x1f2>
    41b8:	3604      	adds	r6, #4
    41ba:	0173      	lsls	r3, r6, #5
    41bc:	d504      	bpl.n	41c8 <__aeabi_fmul+0x200>
    41be:	2401      	movs	r4, #1
    41c0:	2501      	movs	r5, #1
    41c2:	4014      	ands	r4, r2
    41c4:	2600      	movs	r6, #0
    41c6:	e748      	b.n	405a <__aeabi_fmul+0x92>
    41c8:	2401      	movs	r4, #1
    41ca:	01b6      	lsls	r6, r6, #6
    41cc:	0a76      	lsrs	r6, r6, #9
    41ce:	4014      	ands	r4, r2
    41d0:	2500      	movs	r5, #0
    41d2:	e742      	b.n	405a <__aeabi_fmul+0x92>
    41d4:	2680      	movs	r6, #128	; 0x80
    41d6:	2401      	movs	r4, #1
    41d8:	03f6      	lsls	r6, r6, #15
    41da:	432e      	orrs	r6, r5
    41dc:	0276      	lsls	r6, r6, #9
    41de:	0a76      	lsrs	r6, r6, #9
    41e0:	4014      	ands	r4, r2
    41e2:	25ff      	movs	r5, #255	; 0xff
    41e4:	e739      	b.n	405a <__aeabi_fmul+0x92>
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	00006858 	.word	0x00006858
    41ec:	f7ffffff 	.word	0xf7ffffff

000041f0 <__aeabi_fsub>:
    41f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41f2:	024a      	lsls	r2, r1, #9
    41f4:	004e      	lsls	r6, r1, #1
    41f6:	0243      	lsls	r3, r0, #9
    41f8:	0044      	lsls	r4, r0, #1
    41fa:	0e24      	lsrs	r4, r4, #24
    41fc:	0fc5      	lsrs	r5, r0, #31
    41fe:	099b      	lsrs	r3, r3, #6
    4200:	0e36      	lsrs	r6, r6, #24
    4202:	0fc9      	lsrs	r1, r1, #31
    4204:	0992      	lsrs	r2, r2, #6
    4206:	2eff      	cmp	r6, #255	; 0xff
    4208:	d100      	bne.n	420c <__aeabi_fsub+0x1c>
    420a:	e083      	b.n	4314 <__aeabi_fsub+0x124>
    420c:	2001      	movs	r0, #1
    420e:	4041      	eors	r1, r0
    4210:	1ba0      	subs	r0, r4, r6
    4212:	42a9      	cmp	r1, r5
    4214:	d05c      	beq.n	42d0 <__aeabi_fsub+0xe0>
    4216:	2800      	cmp	r0, #0
    4218:	dc00      	bgt.n	421c <__aeabi_fsub+0x2c>
    421a:	e095      	b.n	4348 <__aeabi_fsub+0x158>
    421c:	2e00      	cmp	r6, #0
    421e:	d11c      	bne.n	425a <__aeabi_fsub+0x6a>
    4220:	2a00      	cmp	r2, #0
    4222:	d000      	beq.n	4226 <__aeabi_fsub+0x36>
    4224:	e081      	b.n	432a <__aeabi_fsub+0x13a>
    4226:	075a      	lsls	r2, r3, #29
    4228:	d004      	beq.n	4234 <__aeabi_fsub+0x44>
    422a:	220f      	movs	r2, #15
    422c:	401a      	ands	r2, r3
    422e:	2a04      	cmp	r2, #4
    4230:	d000      	beq.n	4234 <__aeabi_fsub+0x44>
    4232:	3304      	adds	r3, #4
    4234:	015a      	lsls	r2, r3, #5
    4236:	d53b      	bpl.n	42b0 <__aeabi_fsub+0xc0>
    4238:	3401      	adds	r4, #1
    423a:	2cff      	cmp	r4, #255	; 0xff
    423c:	d100      	bne.n	4240 <__aeabi_fsub+0x50>
    423e:	e091      	b.n	4364 <__aeabi_fsub+0x174>
    4240:	2001      	movs	r0, #1
    4242:	019b      	lsls	r3, r3, #6
    4244:	0a5b      	lsrs	r3, r3, #9
    4246:	b2e4      	uxtb	r4, r4
    4248:	4005      	ands	r5, r0
    424a:	025b      	lsls	r3, r3, #9
    424c:	05e4      	lsls	r4, r4, #23
    424e:	0a5b      	lsrs	r3, r3, #9
    4250:	07ed      	lsls	r5, r5, #31
    4252:	4323      	orrs	r3, r4
    4254:	432b      	orrs	r3, r5
    4256:	0018      	movs	r0, r3
    4258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    425a:	2cff      	cmp	r4, #255	; 0xff
    425c:	d0e3      	beq.n	4226 <__aeabi_fsub+0x36>
    425e:	2180      	movs	r1, #128	; 0x80
    4260:	04c9      	lsls	r1, r1, #19
    4262:	430a      	orrs	r2, r1
    4264:	281b      	cmp	r0, #27
    4266:	dd00      	ble.n	426a <__aeabi_fsub+0x7a>
    4268:	e090      	b.n	438c <__aeabi_fsub+0x19c>
    426a:	0016      	movs	r6, r2
    426c:	2120      	movs	r1, #32
    426e:	40c6      	lsrs	r6, r0
    4270:	1a08      	subs	r0, r1, r0
    4272:	4082      	lsls	r2, r0
    4274:	1e51      	subs	r1, r2, #1
    4276:	418a      	sbcs	r2, r1
    4278:	4332      	orrs	r2, r6
    427a:	1a9b      	subs	r3, r3, r2
    427c:	015a      	lsls	r2, r3, #5
    427e:	d515      	bpl.n	42ac <__aeabi_fsub+0xbc>
    4280:	019b      	lsls	r3, r3, #6
    4282:	099e      	lsrs	r6, r3, #6
    4284:	0030      	movs	r0, r6
    4286:	f002 f8fd 	bl	6484 <__clzsi2>
    428a:	3805      	subs	r0, #5
    428c:	4086      	lsls	r6, r0
    428e:	4284      	cmp	r4, r0
    4290:	dc6c      	bgt.n	436c <__aeabi_fsub+0x17c>
    4292:	1b04      	subs	r4, r0, r4
    4294:	0033      	movs	r3, r6
    4296:	2020      	movs	r0, #32
    4298:	3401      	adds	r4, #1
    429a:	40e3      	lsrs	r3, r4
    429c:	1b04      	subs	r4, r0, r4
    429e:	40a6      	lsls	r6, r4
    42a0:	1e72      	subs	r2, r6, #1
    42a2:	4196      	sbcs	r6, r2
    42a4:	2400      	movs	r4, #0
    42a6:	4333      	orrs	r3, r6
    42a8:	e7bd      	b.n	4226 <__aeabi_fsub+0x36>
    42aa:	000d      	movs	r5, r1
    42ac:	075a      	lsls	r2, r3, #29
    42ae:	d1bc      	bne.n	422a <__aeabi_fsub+0x3a>
    42b0:	08df      	lsrs	r7, r3, #3
    42b2:	2301      	movs	r3, #1
    42b4:	401d      	ands	r5, r3
    42b6:	2cff      	cmp	r4, #255	; 0xff
    42b8:	d133      	bne.n	4322 <__aeabi_fsub+0x132>
    42ba:	2f00      	cmp	r7, #0
    42bc:	d100      	bne.n	42c0 <__aeabi_fsub+0xd0>
    42be:	e090      	b.n	43e2 <__aeabi_fsub+0x1f2>
    42c0:	2280      	movs	r2, #128	; 0x80
    42c2:	03d2      	lsls	r2, r2, #15
    42c4:	0013      	movs	r3, r2
    42c6:	433b      	orrs	r3, r7
    42c8:	025b      	lsls	r3, r3, #9
    42ca:	0a5b      	lsrs	r3, r3, #9
    42cc:	24ff      	movs	r4, #255	; 0xff
    42ce:	e7bc      	b.n	424a <__aeabi_fsub+0x5a>
    42d0:	2800      	cmp	r0, #0
    42d2:	dd4f      	ble.n	4374 <__aeabi_fsub+0x184>
    42d4:	2e00      	cmp	r6, #0
    42d6:	d02e      	beq.n	4336 <__aeabi_fsub+0x146>
    42d8:	2cff      	cmp	r4, #255	; 0xff
    42da:	d0a4      	beq.n	4226 <__aeabi_fsub+0x36>
    42dc:	2580      	movs	r5, #128	; 0x80
    42de:	04ed      	lsls	r5, r5, #19
    42e0:	432a      	orrs	r2, r5
    42e2:	281b      	cmp	r0, #27
    42e4:	dd00      	ble.n	42e8 <__aeabi_fsub+0xf8>
    42e6:	e097      	b.n	4418 <__aeabi_fsub+0x228>
    42e8:	0016      	movs	r6, r2
    42ea:	2520      	movs	r5, #32
    42ec:	40c6      	lsrs	r6, r0
    42ee:	1a28      	subs	r0, r5, r0
    42f0:	4082      	lsls	r2, r0
    42f2:	1e50      	subs	r0, r2, #1
    42f4:	4182      	sbcs	r2, r0
    42f6:	4332      	orrs	r2, r6
    42f8:	189b      	adds	r3, r3, r2
    42fa:	015a      	lsls	r2, r3, #5
    42fc:	d5d5      	bpl.n	42aa <__aeabi_fsub+0xba>
    42fe:	3401      	adds	r4, #1
    4300:	2cff      	cmp	r4, #255	; 0xff
    4302:	d06d      	beq.n	43e0 <__aeabi_fsub+0x1f0>
    4304:	2201      	movs	r2, #1
    4306:	487b      	ldr	r0, [pc, #492]	; (44f4 <__aeabi_fsub+0x304>)
    4308:	401a      	ands	r2, r3
    430a:	085b      	lsrs	r3, r3, #1
    430c:	4003      	ands	r3, r0
    430e:	4313      	orrs	r3, r2
    4310:	000d      	movs	r5, r1
    4312:	e788      	b.n	4226 <__aeabi_fsub+0x36>
    4314:	2a00      	cmp	r2, #0
    4316:	d000      	beq.n	431a <__aeabi_fsub+0x12a>
    4318:	e77a      	b.n	4210 <__aeabi_fsub+0x20>
    431a:	e777      	b.n	420c <__aeabi_fsub+0x1c>
    431c:	1e03      	subs	r3, r0, #0
    431e:	d1c5      	bne.n	42ac <__aeabi_fsub+0xbc>
    4320:	2500      	movs	r5, #0
    4322:	027b      	lsls	r3, r7, #9
    4324:	0a5b      	lsrs	r3, r3, #9
    4326:	b2e4      	uxtb	r4, r4
    4328:	e78f      	b.n	424a <__aeabi_fsub+0x5a>
    432a:	3801      	subs	r0, #1
    432c:	2800      	cmp	r0, #0
    432e:	d0a4      	beq.n	427a <__aeabi_fsub+0x8a>
    4330:	2cff      	cmp	r4, #255	; 0xff
    4332:	d197      	bne.n	4264 <__aeabi_fsub+0x74>
    4334:	e777      	b.n	4226 <__aeabi_fsub+0x36>
    4336:	2a00      	cmp	r2, #0
    4338:	d100      	bne.n	433c <__aeabi_fsub+0x14c>
    433a:	e774      	b.n	4226 <__aeabi_fsub+0x36>
    433c:	3801      	subs	r0, #1
    433e:	2800      	cmp	r0, #0
    4340:	d0da      	beq.n	42f8 <__aeabi_fsub+0x108>
    4342:	2cff      	cmp	r4, #255	; 0xff
    4344:	d1cd      	bne.n	42e2 <__aeabi_fsub+0xf2>
    4346:	e76e      	b.n	4226 <__aeabi_fsub+0x36>
    4348:	2800      	cmp	r0, #0
    434a:	d121      	bne.n	4390 <__aeabi_fsub+0x1a0>
    434c:	1c60      	adds	r0, r4, #1
    434e:	b2c0      	uxtb	r0, r0
    4350:	2801      	cmp	r0, #1
    4352:	dd58      	ble.n	4406 <__aeabi_fsub+0x216>
    4354:	2780      	movs	r7, #128	; 0x80
    4356:	1a9e      	subs	r6, r3, r2
    4358:	04ff      	lsls	r7, r7, #19
    435a:	4037      	ands	r7, r6
    435c:	d02f      	beq.n	43be <__aeabi_fsub+0x1ce>
    435e:	1ad6      	subs	r6, r2, r3
    4360:	000d      	movs	r5, r1
    4362:	e78f      	b.n	4284 <__aeabi_fsub+0x94>
    4364:	2301      	movs	r3, #1
    4366:	401d      	ands	r5, r3
    4368:	2300      	movs	r3, #0
    436a:	e76e      	b.n	424a <__aeabi_fsub+0x5a>
    436c:	4b62      	ldr	r3, [pc, #392]	; (44f8 <__aeabi_fsub+0x308>)
    436e:	1a24      	subs	r4, r4, r0
    4370:	4033      	ands	r3, r6
    4372:	e758      	b.n	4226 <__aeabi_fsub+0x36>
    4374:	2800      	cmp	r0, #0
    4376:	d151      	bne.n	441c <__aeabi_fsub+0x22c>
    4378:	1c60      	adds	r0, r4, #1
    437a:	b2c6      	uxtb	r6, r0
    437c:	2e01      	cmp	r6, #1
    437e:	dd33      	ble.n	43e8 <__aeabi_fsub+0x1f8>
    4380:	28ff      	cmp	r0, #255	; 0xff
    4382:	d02d      	beq.n	43e0 <__aeabi_fsub+0x1f0>
    4384:	189b      	adds	r3, r3, r2
    4386:	085b      	lsrs	r3, r3, #1
    4388:	0004      	movs	r4, r0
    438a:	e74c      	b.n	4226 <__aeabi_fsub+0x36>
    438c:	2201      	movs	r2, #1
    438e:	e774      	b.n	427a <__aeabi_fsub+0x8a>
    4390:	2c00      	cmp	r4, #0
    4392:	d01a      	beq.n	43ca <__aeabi_fsub+0x1da>
    4394:	2eff      	cmp	r6, #255	; 0xff
    4396:	d01f      	beq.n	43d8 <__aeabi_fsub+0x1e8>
    4398:	2480      	movs	r4, #128	; 0x80
    439a:	04e4      	lsls	r4, r4, #19
    439c:	4240      	negs	r0, r0
    439e:	4323      	orrs	r3, r4
    43a0:	281b      	cmp	r0, #27
    43a2:	dd00      	ble.n	43a6 <__aeabi_fsub+0x1b6>
    43a4:	e096      	b.n	44d4 <__aeabi_fsub+0x2e4>
    43a6:	001d      	movs	r5, r3
    43a8:	2420      	movs	r4, #32
    43aa:	40c5      	lsrs	r5, r0
    43ac:	1a20      	subs	r0, r4, r0
    43ae:	4083      	lsls	r3, r0
    43b0:	1e58      	subs	r0, r3, #1
    43b2:	4183      	sbcs	r3, r0
    43b4:	432b      	orrs	r3, r5
    43b6:	1ad3      	subs	r3, r2, r3
    43b8:	0034      	movs	r4, r6
    43ba:	000d      	movs	r5, r1
    43bc:	e75e      	b.n	427c <__aeabi_fsub+0x8c>
    43be:	2e00      	cmp	r6, #0
    43c0:	d000      	beq.n	43c4 <__aeabi_fsub+0x1d4>
    43c2:	e75f      	b.n	4284 <__aeabi_fsub+0x94>
    43c4:	2500      	movs	r5, #0
    43c6:	2400      	movs	r4, #0
    43c8:	e7ab      	b.n	4322 <__aeabi_fsub+0x132>
    43ca:	2b00      	cmp	r3, #0
    43cc:	d044      	beq.n	4458 <__aeabi_fsub+0x268>
    43ce:	43c0      	mvns	r0, r0
    43d0:	2800      	cmp	r0, #0
    43d2:	d0f0      	beq.n	43b6 <__aeabi_fsub+0x1c6>
    43d4:	2eff      	cmp	r6, #255	; 0xff
    43d6:	d1e3      	bne.n	43a0 <__aeabi_fsub+0x1b0>
    43d8:	0013      	movs	r3, r2
    43da:	24ff      	movs	r4, #255	; 0xff
    43dc:	000d      	movs	r5, r1
    43de:	e722      	b.n	4226 <__aeabi_fsub+0x36>
    43e0:	000d      	movs	r5, r1
    43e2:	24ff      	movs	r4, #255	; 0xff
    43e4:	2300      	movs	r3, #0
    43e6:	e730      	b.n	424a <__aeabi_fsub+0x5a>
    43e8:	2c00      	cmp	r4, #0
    43ea:	d15d      	bne.n	44a8 <__aeabi_fsub+0x2b8>
    43ec:	2b00      	cmp	r3, #0
    43ee:	d07d      	beq.n	44ec <__aeabi_fsub+0x2fc>
    43f0:	2a00      	cmp	r2, #0
    43f2:	d100      	bne.n	43f6 <__aeabi_fsub+0x206>
    43f4:	e717      	b.n	4226 <__aeabi_fsub+0x36>
    43f6:	189b      	adds	r3, r3, r2
    43f8:	015a      	lsls	r2, r3, #5
    43fa:	d400      	bmi.n	43fe <__aeabi_fsub+0x20e>
    43fc:	e756      	b.n	42ac <__aeabi_fsub+0xbc>
    43fe:	4a3e      	ldr	r2, [pc, #248]	; (44f8 <__aeabi_fsub+0x308>)
    4400:	0004      	movs	r4, r0
    4402:	4013      	ands	r3, r2
    4404:	e70f      	b.n	4226 <__aeabi_fsub+0x36>
    4406:	2c00      	cmp	r4, #0
    4408:	d11e      	bne.n	4448 <__aeabi_fsub+0x258>
    440a:	2b00      	cmp	r3, #0
    440c:	d12f      	bne.n	446e <__aeabi_fsub+0x27e>
    440e:	2a00      	cmp	r2, #0
    4410:	d065      	beq.n	44de <__aeabi_fsub+0x2ee>
    4412:	0013      	movs	r3, r2
    4414:	000d      	movs	r5, r1
    4416:	e706      	b.n	4226 <__aeabi_fsub+0x36>
    4418:	2201      	movs	r2, #1
    441a:	e76d      	b.n	42f8 <__aeabi_fsub+0x108>
    441c:	2c00      	cmp	r4, #0
    441e:	d11f      	bne.n	4460 <__aeabi_fsub+0x270>
    4420:	2b00      	cmp	r3, #0
    4422:	d059      	beq.n	44d8 <__aeabi_fsub+0x2e8>
    4424:	43c0      	mvns	r0, r0
    4426:	2800      	cmp	r0, #0
    4428:	d00b      	beq.n	4442 <__aeabi_fsub+0x252>
    442a:	2eff      	cmp	r6, #255	; 0xff
    442c:	d04f      	beq.n	44ce <__aeabi_fsub+0x2de>
    442e:	281b      	cmp	r0, #27
    4430:	dc5e      	bgt.n	44f0 <__aeabi_fsub+0x300>
    4432:	001d      	movs	r5, r3
    4434:	2420      	movs	r4, #32
    4436:	40c5      	lsrs	r5, r0
    4438:	1a20      	subs	r0, r4, r0
    443a:	4083      	lsls	r3, r0
    443c:	1e58      	subs	r0, r3, #1
    443e:	4183      	sbcs	r3, r0
    4440:	432b      	orrs	r3, r5
    4442:	189b      	adds	r3, r3, r2
    4444:	0034      	movs	r4, r6
    4446:	e758      	b.n	42fa <__aeabi_fsub+0x10a>
    4448:	2b00      	cmp	r3, #0
    444a:	d11c      	bne.n	4486 <__aeabi_fsub+0x296>
    444c:	2a00      	cmp	r2, #0
    444e:	d049      	beq.n	44e4 <__aeabi_fsub+0x2f4>
    4450:	0013      	movs	r3, r2
    4452:	000d      	movs	r5, r1
    4454:	24ff      	movs	r4, #255	; 0xff
    4456:	e6e6      	b.n	4226 <__aeabi_fsub+0x36>
    4458:	0013      	movs	r3, r2
    445a:	0034      	movs	r4, r6
    445c:	000d      	movs	r5, r1
    445e:	e6e2      	b.n	4226 <__aeabi_fsub+0x36>
    4460:	2eff      	cmp	r6, #255	; 0xff
    4462:	d034      	beq.n	44ce <__aeabi_fsub+0x2de>
    4464:	2480      	movs	r4, #128	; 0x80
    4466:	04e4      	lsls	r4, r4, #19
    4468:	4240      	negs	r0, r0
    446a:	4323      	orrs	r3, r4
    446c:	e7df      	b.n	442e <__aeabi_fsub+0x23e>
    446e:	2a00      	cmp	r2, #0
    4470:	d100      	bne.n	4474 <__aeabi_fsub+0x284>
    4472:	e6d8      	b.n	4226 <__aeabi_fsub+0x36>
    4474:	2780      	movs	r7, #128	; 0x80
    4476:	1a98      	subs	r0, r3, r2
    4478:	04ff      	lsls	r7, r7, #19
    447a:	4007      	ands	r7, r0
    447c:	d100      	bne.n	4480 <__aeabi_fsub+0x290>
    447e:	e74d      	b.n	431c <__aeabi_fsub+0x12c>
    4480:	1ad3      	subs	r3, r2, r3
    4482:	000d      	movs	r5, r1
    4484:	e6cf      	b.n	4226 <__aeabi_fsub+0x36>
    4486:	24ff      	movs	r4, #255	; 0xff
    4488:	2a00      	cmp	r2, #0
    448a:	d100      	bne.n	448e <__aeabi_fsub+0x29e>
    448c:	e6cb      	b.n	4226 <__aeabi_fsub+0x36>
    448e:	2080      	movs	r0, #128	; 0x80
    4490:	08db      	lsrs	r3, r3, #3
    4492:	03c0      	lsls	r0, r0, #15
    4494:	4203      	tst	r3, r0
    4496:	d004      	beq.n	44a2 <__aeabi_fsub+0x2b2>
    4498:	08d2      	lsrs	r2, r2, #3
    449a:	4202      	tst	r2, r0
    449c:	d101      	bne.n	44a2 <__aeabi_fsub+0x2b2>
    449e:	0013      	movs	r3, r2
    44a0:	000d      	movs	r5, r1
    44a2:	00db      	lsls	r3, r3, #3
    44a4:	24ff      	movs	r4, #255	; 0xff
    44a6:	e6be      	b.n	4226 <__aeabi_fsub+0x36>
    44a8:	2b00      	cmp	r3, #0
    44aa:	d010      	beq.n	44ce <__aeabi_fsub+0x2de>
    44ac:	24ff      	movs	r4, #255	; 0xff
    44ae:	2a00      	cmp	r2, #0
    44b0:	d100      	bne.n	44b4 <__aeabi_fsub+0x2c4>
    44b2:	e6b8      	b.n	4226 <__aeabi_fsub+0x36>
    44b4:	2080      	movs	r0, #128	; 0x80
    44b6:	08db      	lsrs	r3, r3, #3
    44b8:	03c0      	lsls	r0, r0, #15
    44ba:	4203      	tst	r3, r0
    44bc:	d003      	beq.n	44c6 <__aeabi_fsub+0x2d6>
    44be:	08d2      	lsrs	r2, r2, #3
    44c0:	4202      	tst	r2, r0
    44c2:	d100      	bne.n	44c6 <__aeabi_fsub+0x2d6>
    44c4:	0013      	movs	r3, r2
    44c6:	00db      	lsls	r3, r3, #3
    44c8:	000d      	movs	r5, r1
    44ca:	24ff      	movs	r4, #255	; 0xff
    44cc:	e6ab      	b.n	4226 <__aeabi_fsub+0x36>
    44ce:	0013      	movs	r3, r2
    44d0:	24ff      	movs	r4, #255	; 0xff
    44d2:	e6a8      	b.n	4226 <__aeabi_fsub+0x36>
    44d4:	2301      	movs	r3, #1
    44d6:	e76e      	b.n	43b6 <__aeabi_fsub+0x1c6>
    44d8:	0013      	movs	r3, r2
    44da:	0034      	movs	r4, r6
    44dc:	e6a3      	b.n	4226 <__aeabi_fsub+0x36>
    44de:	2700      	movs	r7, #0
    44e0:	2500      	movs	r5, #0
    44e2:	e71e      	b.n	4322 <__aeabi_fsub+0x132>
    44e4:	2780      	movs	r7, #128	; 0x80
    44e6:	2500      	movs	r5, #0
    44e8:	03ff      	lsls	r7, r7, #15
    44ea:	e6e9      	b.n	42c0 <__aeabi_fsub+0xd0>
    44ec:	0013      	movs	r3, r2
    44ee:	e69a      	b.n	4226 <__aeabi_fsub+0x36>
    44f0:	2301      	movs	r3, #1
    44f2:	e7a6      	b.n	4442 <__aeabi_fsub+0x252>
    44f4:	7dffffff 	.word	0x7dffffff
    44f8:	fbffffff 	.word	0xfbffffff

000044fc <__aeabi_f2iz>:
    44fc:	0243      	lsls	r3, r0, #9
    44fe:	0a59      	lsrs	r1, r3, #9
    4500:	0043      	lsls	r3, r0, #1
    4502:	0fc2      	lsrs	r2, r0, #31
    4504:	0e1b      	lsrs	r3, r3, #24
    4506:	2000      	movs	r0, #0
    4508:	2b7e      	cmp	r3, #126	; 0x7e
    450a:	dd0e      	ble.n	452a <__aeabi_f2iz+0x2e>
    450c:	2b9d      	cmp	r3, #157	; 0x9d
    450e:	dc0d      	bgt.n	452c <__aeabi_f2iz+0x30>
    4510:	2080      	movs	r0, #128	; 0x80
    4512:	0400      	lsls	r0, r0, #16
    4514:	4301      	orrs	r1, r0
    4516:	2b95      	cmp	r3, #149	; 0x95
    4518:	dc0b      	bgt.n	4532 <__aeabi_f2iz+0x36>
    451a:	2096      	movs	r0, #150	; 0x96
    451c:	1ac3      	subs	r3, r0, r3
    451e:	40d9      	lsrs	r1, r3
    4520:	000b      	movs	r3, r1
    4522:	4258      	negs	r0, r3
    4524:	2a00      	cmp	r2, #0
    4526:	d100      	bne.n	452a <__aeabi_f2iz+0x2e>
    4528:	0018      	movs	r0, r3
    452a:	4770      	bx	lr
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <__aeabi_f2iz+0x40>)
    452e:	18d0      	adds	r0, r2, r3
    4530:	e7fb      	b.n	452a <__aeabi_f2iz+0x2e>
    4532:	3b96      	subs	r3, #150	; 0x96
    4534:	4099      	lsls	r1, r3
    4536:	000b      	movs	r3, r1
    4538:	e7f3      	b.n	4522 <__aeabi_f2iz+0x26>
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	7fffffff 	.word	0x7fffffff

00004540 <__aeabi_i2f>:
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	2800      	cmp	r0, #0
    4544:	d030      	beq.n	45a8 <__aeabi_i2f+0x68>
    4546:	17c3      	asrs	r3, r0, #31
    4548:	18c5      	adds	r5, r0, r3
    454a:	405d      	eors	r5, r3
    454c:	0fc4      	lsrs	r4, r0, #31
    454e:	0028      	movs	r0, r5
    4550:	f001 ff98 	bl	6484 <__clzsi2>
    4554:	239e      	movs	r3, #158	; 0x9e
    4556:	1a1b      	subs	r3, r3, r0
    4558:	2b96      	cmp	r3, #150	; 0x96
    455a:	dc0d      	bgt.n	4578 <__aeabi_i2f+0x38>
    455c:	2296      	movs	r2, #150	; 0x96
    455e:	1ad2      	subs	r2, r2, r3
    4560:	4095      	lsls	r5, r2
    4562:	026a      	lsls	r2, r5, #9
    4564:	0a52      	lsrs	r2, r2, #9
    4566:	b2d8      	uxtb	r0, r3
    4568:	0252      	lsls	r2, r2, #9
    456a:	05c0      	lsls	r0, r0, #23
    456c:	0a52      	lsrs	r2, r2, #9
    456e:	07e4      	lsls	r4, r4, #31
    4570:	4302      	orrs	r2, r0
    4572:	4322      	orrs	r2, r4
    4574:	0010      	movs	r0, r2
    4576:	bd70      	pop	{r4, r5, r6, pc}
    4578:	2b99      	cmp	r3, #153	; 0x99
    457a:	dc19      	bgt.n	45b0 <__aeabi_i2f+0x70>
    457c:	2299      	movs	r2, #153	; 0x99
    457e:	1ad2      	subs	r2, r2, r3
    4580:	4095      	lsls	r5, r2
    4582:	4a12      	ldr	r2, [pc, #72]	; (45cc <__aeabi_i2f+0x8c>)
    4584:	402a      	ands	r2, r5
    4586:	0769      	lsls	r1, r5, #29
    4588:	d004      	beq.n	4594 <__aeabi_i2f+0x54>
    458a:	210f      	movs	r1, #15
    458c:	400d      	ands	r5, r1
    458e:	2d04      	cmp	r5, #4
    4590:	d000      	beq.n	4594 <__aeabi_i2f+0x54>
    4592:	3204      	adds	r2, #4
    4594:	0151      	lsls	r1, r2, #5
    4596:	d503      	bpl.n	45a0 <__aeabi_i2f+0x60>
    4598:	4b0c      	ldr	r3, [pc, #48]	; (45cc <__aeabi_i2f+0x8c>)
    459a:	401a      	ands	r2, r3
    459c:	239f      	movs	r3, #159	; 0x9f
    459e:	1a1b      	subs	r3, r3, r0
    45a0:	0192      	lsls	r2, r2, #6
    45a2:	0a52      	lsrs	r2, r2, #9
    45a4:	b2d8      	uxtb	r0, r3
    45a6:	e7df      	b.n	4568 <__aeabi_i2f+0x28>
    45a8:	2400      	movs	r4, #0
    45aa:	2000      	movs	r0, #0
    45ac:	2200      	movs	r2, #0
    45ae:	e7db      	b.n	4568 <__aeabi_i2f+0x28>
    45b0:	2205      	movs	r2, #5
    45b2:	002e      	movs	r6, r5
    45b4:	1a12      	subs	r2, r2, r0
    45b6:	21b9      	movs	r1, #185	; 0xb9
    45b8:	40d6      	lsrs	r6, r2
    45ba:	002a      	movs	r2, r5
    45bc:	1ac9      	subs	r1, r1, r3
    45be:	408a      	lsls	r2, r1
    45c0:	1e55      	subs	r5, r2, #1
    45c2:	41aa      	sbcs	r2, r5
    45c4:	0035      	movs	r5, r6
    45c6:	4315      	orrs	r5, r2
    45c8:	e7db      	b.n	4582 <__aeabi_i2f+0x42>
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	fbffffff 	.word	0xfbffffff

000045d0 <__aeabi_dadd>:
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d2:	4656      	mov	r6, sl
    45d4:	465f      	mov	r7, fp
    45d6:	464d      	mov	r5, r9
    45d8:	4644      	mov	r4, r8
    45da:	b4f0      	push	{r4, r5, r6, r7}
    45dc:	000f      	movs	r7, r1
    45de:	0ffd      	lsrs	r5, r7, #31
    45e0:	46aa      	mov	sl, r5
    45e2:	0309      	lsls	r1, r1, #12
    45e4:	007c      	lsls	r4, r7, #1
    45e6:	002e      	movs	r6, r5
    45e8:	005f      	lsls	r7, r3, #1
    45ea:	0f45      	lsrs	r5, r0, #29
    45ec:	0a49      	lsrs	r1, r1, #9
    45ee:	0d7f      	lsrs	r7, r7, #21
    45f0:	4329      	orrs	r1, r5
    45f2:	00c5      	lsls	r5, r0, #3
    45f4:	0318      	lsls	r0, r3, #12
    45f6:	46bc      	mov	ip, r7
    45f8:	0a40      	lsrs	r0, r0, #9
    45fa:	0f57      	lsrs	r7, r2, #29
    45fc:	0d64      	lsrs	r4, r4, #21
    45fe:	0fdb      	lsrs	r3, r3, #31
    4600:	4338      	orrs	r0, r7
    4602:	00d2      	lsls	r2, r2, #3
    4604:	459a      	cmp	sl, r3
    4606:	d100      	bne.n	460a <__aeabi_dadd+0x3a>
    4608:	e0aa      	b.n	4760 <__aeabi_dadd+0x190>
    460a:	4666      	mov	r6, ip
    460c:	1ba6      	subs	r6, r4, r6
    460e:	2e00      	cmp	r6, #0
    4610:	dc00      	bgt.n	4614 <__aeabi_dadd+0x44>
    4612:	e0ff      	b.n	4814 <__aeabi_dadd+0x244>
    4614:	4663      	mov	r3, ip
    4616:	2b00      	cmp	r3, #0
    4618:	d139      	bne.n	468e <__aeabi_dadd+0xbe>
    461a:	0003      	movs	r3, r0
    461c:	4313      	orrs	r3, r2
    461e:	d000      	beq.n	4622 <__aeabi_dadd+0x52>
    4620:	e0d9      	b.n	47d6 <__aeabi_dadd+0x206>
    4622:	076b      	lsls	r3, r5, #29
    4624:	d009      	beq.n	463a <__aeabi_dadd+0x6a>
    4626:	230f      	movs	r3, #15
    4628:	402b      	ands	r3, r5
    462a:	2b04      	cmp	r3, #4
    462c:	d005      	beq.n	463a <__aeabi_dadd+0x6a>
    462e:	1d2b      	adds	r3, r5, #4
    4630:	42ab      	cmp	r3, r5
    4632:	41ad      	sbcs	r5, r5
    4634:	426d      	negs	r5, r5
    4636:	1949      	adds	r1, r1, r5
    4638:	001d      	movs	r5, r3
    463a:	020b      	lsls	r3, r1, #8
    463c:	d400      	bmi.n	4640 <__aeabi_dadd+0x70>
    463e:	e082      	b.n	4746 <__aeabi_dadd+0x176>
    4640:	4bca      	ldr	r3, [pc, #808]	; (496c <__aeabi_dadd+0x39c>)
    4642:	3401      	adds	r4, #1
    4644:	429c      	cmp	r4, r3
    4646:	d100      	bne.n	464a <__aeabi_dadd+0x7a>
    4648:	e0fe      	b.n	4848 <__aeabi_dadd+0x278>
    464a:	000a      	movs	r2, r1
    464c:	4656      	mov	r6, sl
    464e:	4bc8      	ldr	r3, [pc, #800]	; (4970 <__aeabi_dadd+0x3a0>)
    4650:	08ed      	lsrs	r5, r5, #3
    4652:	401a      	ands	r2, r3
    4654:	0750      	lsls	r0, r2, #29
    4656:	0564      	lsls	r4, r4, #21
    4658:	0252      	lsls	r2, r2, #9
    465a:	4305      	orrs	r5, r0
    465c:	0b12      	lsrs	r2, r2, #12
    465e:	0d64      	lsrs	r4, r4, #21
    4660:	2100      	movs	r1, #0
    4662:	0312      	lsls	r2, r2, #12
    4664:	0d0b      	lsrs	r3, r1, #20
    4666:	051b      	lsls	r3, r3, #20
    4668:	0564      	lsls	r4, r4, #21
    466a:	0b12      	lsrs	r2, r2, #12
    466c:	431a      	orrs	r2, r3
    466e:	0863      	lsrs	r3, r4, #1
    4670:	4cc0      	ldr	r4, [pc, #768]	; (4974 <__aeabi_dadd+0x3a4>)
    4672:	07f6      	lsls	r6, r6, #31
    4674:	4014      	ands	r4, r2
    4676:	431c      	orrs	r4, r3
    4678:	0064      	lsls	r4, r4, #1
    467a:	0864      	lsrs	r4, r4, #1
    467c:	4334      	orrs	r4, r6
    467e:	0028      	movs	r0, r5
    4680:	0021      	movs	r1, r4
    4682:	bc3c      	pop	{r2, r3, r4, r5}
    4684:	4690      	mov	r8, r2
    4686:	4699      	mov	r9, r3
    4688:	46a2      	mov	sl, r4
    468a:	46ab      	mov	fp, r5
    468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    468e:	4bb7      	ldr	r3, [pc, #732]	; (496c <__aeabi_dadd+0x39c>)
    4690:	429c      	cmp	r4, r3
    4692:	d0c6      	beq.n	4622 <__aeabi_dadd+0x52>
    4694:	2380      	movs	r3, #128	; 0x80
    4696:	041b      	lsls	r3, r3, #16
    4698:	4318      	orrs	r0, r3
    469a:	2e38      	cmp	r6, #56	; 0x38
    469c:	dd00      	ble.n	46a0 <__aeabi_dadd+0xd0>
    469e:	e0eb      	b.n	4878 <__aeabi_dadd+0x2a8>
    46a0:	2e1f      	cmp	r6, #31
    46a2:	dd00      	ble.n	46a6 <__aeabi_dadd+0xd6>
    46a4:	e11e      	b.n	48e4 <__aeabi_dadd+0x314>
    46a6:	2320      	movs	r3, #32
    46a8:	1b9b      	subs	r3, r3, r6
    46aa:	469c      	mov	ip, r3
    46ac:	0003      	movs	r3, r0
    46ae:	4667      	mov	r7, ip
    46b0:	40bb      	lsls	r3, r7
    46b2:	4698      	mov	r8, r3
    46b4:	0013      	movs	r3, r2
    46b6:	4647      	mov	r7, r8
    46b8:	40f3      	lsrs	r3, r6
    46ba:	433b      	orrs	r3, r7
    46bc:	4667      	mov	r7, ip
    46be:	40ba      	lsls	r2, r7
    46c0:	1e57      	subs	r7, r2, #1
    46c2:	41ba      	sbcs	r2, r7
    46c4:	4313      	orrs	r3, r2
    46c6:	0002      	movs	r2, r0
    46c8:	40f2      	lsrs	r2, r6
    46ca:	1aeb      	subs	r3, r5, r3
    46cc:	429d      	cmp	r5, r3
    46ce:	41b6      	sbcs	r6, r6
    46d0:	001d      	movs	r5, r3
    46d2:	1a8a      	subs	r2, r1, r2
    46d4:	4276      	negs	r6, r6
    46d6:	1b91      	subs	r1, r2, r6
    46d8:	020b      	lsls	r3, r1, #8
    46da:	d531      	bpl.n	4740 <__aeabi_dadd+0x170>
    46dc:	024a      	lsls	r2, r1, #9
    46de:	0a56      	lsrs	r6, r2, #9
    46e0:	2e00      	cmp	r6, #0
    46e2:	d100      	bne.n	46e6 <__aeabi_dadd+0x116>
    46e4:	e0b4      	b.n	4850 <__aeabi_dadd+0x280>
    46e6:	0030      	movs	r0, r6
    46e8:	f001 fecc 	bl	6484 <__clzsi2>
    46ec:	0003      	movs	r3, r0
    46ee:	3b08      	subs	r3, #8
    46f0:	2b1f      	cmp	r3, #31
    46f2:	dd00      	ble.n	46f6 <__aeabi_dadd+0x126>
    46f4:	e0b5      	b.n	4862 <__aeabi_dadd+0x292>
    46f6:	2220      	movs	r2, #32
    46f8:	0029      	movs	r1, r5
    46fa:	1ad2      	subs	r2, r2, r3
    46fc:	40d1      	lsrs	r1, r2
    46fe:	409e      	lsls	r6, r3
    4700:	000a      	movs	r2, r1
    4702:	409d      	lsls	r5, r3
    4704:	4332      	orrs	r2, r6
    4706:	429c      	cmp	r4, r3
    4708:	dd00      	ble.n	470c <__aeabi_dadd+0x13c>
    470a:	e0b1      	b.n	4870 <__aeabi_dadd+0x2a0>
    470c:	1b1c      	subs	r4, r3, r4
    470e:	1c63      	adds	r3, r4, #1
    4710:	2b1f      	cmp	r3, #31
    4712:	dd00      	ble.n	4716 <__aeabi_dadd+0x146>
    4714:	e0d5      	b.n	48c2 <__aeabi_dadd+0x2f2>
    4716:	2120      	movs	r1, #32
    4718:	0014      	movs	r4, r2
    471a:	0028      	movs	r0, r5
    471c:	1ac9      	subs	r1, r1, r3
    471e:	408c      	lsls	r4, r1
    4720:	40d8      	lsrs	r0, r3
    4722:	408d      	lsls	r5, r1
    4724:	4304      	orrs	r4, r0
    4726:	40da      	lsrs	r2, r3
    4728:	1e68      	subs	r0, r5, #1
    472a:	4185      	sbcs	r5, r0
    472c:	0011      	movs	r1, r2
    472e:	4325      	orrs	r5, r4
    4730:	2400      	movs	r4, #0
    4732:	e776      	b.n	4622 <__aeabi_dadd+0x52>
    4734:	4641      	mov	r1, r8
    4736:	4331      	orrs	r1, r6
    4738:	d100      	bne.n	473c <__aeabi_dadd+0x16c>
    473a:	e234      	b.n	4ba6 <__aeabi_dadd+0x5d6>
    473c:	0031      	movs	r1, r6
    473e:	4645      	mov	r5, r8
    4740:	076b      	lsls	r3, r5, #29
    4742:	d000      	beq.n	4746 <__aeabi_dadd+0x176>
    4744:	e76f      	b.n	4626 <__aeabi_dadd+0x56>
    4746:	4656      	mov	r6, sl
    4748:	0748      	lsls	r0, r1, #29
    474a:	08ed      	lsrs	r5, r5, #3
    474c:	08c9      	lsrs	r1, r1, #3
    474e:	4305      	orrs	r5, r0
    4750:	4b86      	ldr	r3, [pc, #536]	; (496c <__aeabi_dadd+0x39c>)
    4752:	429c      	cmp	r4, r3
    4754:	d035      	beq.n	47c2 <__aeabi_dadd+0x1f2>
    4756:	030a      	lsls	r2, r1, #12
    4758:	0564      	lsls	r4, r4, #21
    475a:	0b12      	lsrs	r2, r2, #12
    475c:	0d64      	lsrs	r4, r4, #21
    475e:	e77f      	b.n	4660 <__aeabi_dadd+0x90>
    4760:	4663      	mov	r3, ip
    4762:	1ae3      	subs	r3, r4, r3
    4764:	469b      	mov	fp, r3
    4766:	2b00      	cmp	r3, #0
    4768:	dc00      	bgt.n	476c <__aeabi_dadd+0x19c>
    476a:	e08b      	b.n	4884 <__aeabi_dadd+0x2b4>
    476c:	4667      	mov	r7, ip
    476e:	2f00      	cmp	r7, #0
    4770:	d03c      	beq.n	47ec <__aeabi_dadd+0x21c>
    4772:	4f7e      	ldr	r7, [pc, #504]	; (496c <__aeabi_dadd+0x39c>)
    4774:	42bc      	cmp	r4, r7
    4776:	d100      	bne.n	477a <__aeabi_dadd+0x1aa>
    4778:	e753      	b.n	4622 <__aeabi_dadd+0x52>
    477a:	2780      	movs	r7, #128	; 0x80
    477c:	043f      	lsls	r7, r7, #16
    477e:	4338      	orrs	r0, r7
    4780:	465b      	mov	r3, fp
    4782:	2b38      	cmp	r3, #56	; 0x38
    4784:	dc00      	bgt.n	4788 <__aeabi_dadd+0x1b8>
    4786:	e0f7      	b.n	4978 <__aeabi_dadd+0x3a8>
    4788:	4302      	orrs	r2, r0
    478a:	1e50      	subs	r0, r2, #1
    478c:	4182      	sbcs	r2, r0
    478e:	2000      	movs	r0, #0
    4790:	b2d2      	uxtb	r2, r2
    4792:	1953      	adds	r3, r2, r5
    4794:	1842      	adds	r2, r0, r1
    4796:	42ab      	cmp	r3, r5
    4798:	4189      	sbcs	r1, r1
    479a:	001d      	movs	r5, r3
    479c:	4249      	negs	r1, r1
    479e:	1889      	adds	r1, r1, r2
    47a0:	020b      	lsls	r3, r1, #8
    47a2:	d5cd      	bpl.n	4740 <__aeabi_dadd+0x170>
    47a4:	4b71      	ldr	r3, [pc, #452]	; (496c <__aeabi_dadd+0x39c>)
    47a6:	3401      	adds	r4, #1
    47a8:	429c      	cmp	r4, r3
    47aa:	d100      	bne.n	47ae <__aeabi_dadd+0x1de>
    47ac:	e13d      	b.n	4a2a <__aeabi_dadd+0x45a>
    47ae:	2001      	movs	r0, #1
    47b0:	4a6f      	ldr	r2, [pc, #444]	; (4970 <__aeabi_dadd+0x3a0>)
    47b2:	086b      	lsrs	r3, r5, #1
    47b4:	400a      	ands	r2, r1
    47b6:	4028      	ands	r0, r5
    47b8:	4318      	orrs	r0, r3
    47ba:	07d5      	lsls	r5, r2, #31
    47bc:	4305      	orrs	r5, r0
    47be:	0851      	lsrs	r1, r2, #1
    47c0:	e72f      	b.n	4622 <__aeabi_dadd+0x52>
    47c2:	002b      	movs	r3, r5
    47c4:	430b      	orrs	r3, r1
    47c6:	d100      	bne.n	47ca <__aeabi_dadd+0x1fa>
    47c8:	e1cb      	b.n	4b62 <__aeabi_dadd+0x592>
    47ca:	2380      	movs	r3, #128	; 0x80
    47cc:	031b      	lsls	r3, r3, #12
    47ce:	430b      	orrs	r3, r1
    47d0:	031a      	lsls	r2, r3, #12
    47d2:	0b12      	lsrs	r2, r2, #12
    47d4:	e744      	b.n	4660 <__aeabi_dadd+0x90>
    47d6:	3e01      	subs	r6, #1
    47d8:	2e00      	cmp	r6, #0
    47da:	d16d      	bne.n	48b8 <__aeabi_dadd+0x2e8>
    47dc:	1aae      	subs	r6, r5, r2
    47de:	42b5      	cmp	r5, r6
    47e0:	419b      	sbcs	r3, r3
    47e2:	1a09      	subs	r1, r1, r0
    47e4:	425b      	negs	r3, r3
    47e6:	1ac9      	subs	r1, r1, r3
    47e8:	0035      	movs	r5, r6
    47ea:	e775      	b.n	46d8 <__aeabi_dadd+0x108>
    47ec:	0007      	movs	r7, r0
    47ee:	4317      	orrs	r7, r2
    47f0:	d100      	bne.n	47f4 <__aeabi_dadd+0x224>
    47f2:	e716      	b.n	4622 <__aeabi_dadd+0x52>
    47f4:	2301      	movs	r3, #1
    47f6:	425b      	negs	r3, r3
    47f8:	469c      	mov	ip, r3
    47fa:	44e3      	add	fp, ip
    47fc:	465b      	mov	r3, fp
    47fe:	2b00      	cmp	r3, #0
    4800:	d000      	beq.n	4804 <__aeabi_dadd+0x234>
    4802:	e0e0      	b.n	49c6 <__aeabi_dadd+0x3f6>
    4804:	18aa      	adds	r2, r5, r2
    4806:	42aa      	cmp	r2, r5
    4808:	419b      	sbcs	r3, r3
    480a:	1809      	adds	r1, r1, r0
    480c:	425b      	negs	r3, r3
    480e:	1859      	adds	r1, r3, r1
    4810:	0015      	movs	r5, r2
    4812:	e7c5      	b.n	47a0 <__aeabi_dadd+0x1d0>
    4814:	2e00      	cmp	r6, #0
    4816:	d175      	bne.n	4904 <__aeabi_dadd+0x334>
    4818:	1c66      	adds	r6, r4, #1
    481a:	0576      	lsls	r6, r6, #21
    481c:	0d76      	lsrs	r6, r6, #21
    481e:	2e01      	cmp	r6, #1
    4820:	dc00      	bgt.n	4824 <__aeabi_dadd+0x254>
    4822:	e0f3      	b.n	4a0c <__aeabi_dadd+0x43c>
    4824:	1aae      	subs	r6, r5, r2
    4826:	46b0      	mov	r8, r6
    4828:	4545      	cmp	r5, r8
    482a:	41bf      	sbcs	r7, r7
    482c:	1a0e      	subs	r6, r1, r0
    482e:	427f      	negs	r7, r7
    4830:	1bf6      	subs	r6, r6, r7
    4832:	0237      	lsls	r7, r6, #8
    4834:	d400      	bmi.n	4838 <__aeabi_dadd+0x268>
    4836:	e08f      	b.n	4958 <__aeabi_dadd+0x388>
    4838:	1b55      	subs	r5, r2, r5
    483a:	42aa      	cmp	r2, r5
    483c:	41b6      	sbcs	r6, r6
    483e:	1a41      	subs	r1, r0, r1
    4840:	4276      	negs	r6, r6
    4842:	1b8e      	subs	r6, r1, r6
    4844:	469a      	mov	sl, r3
    4846:	e74b      	b.n	46e0 <__aeabi_dadd+0x110>
    4848:	4656      	mov	r6, sl
    484a:	2200      	movs	r2, #0
    484c:	2500      	movs	r5, #0
    484e:	e707      	b.n	4660 <__aeabi_dadd+0x90>
    4850:	0028      	movs	r0, r5
    4852:	f001 fe17 	bl	6484 <__clzsi2>
    4856:	3020      	adds	r0, #32
    4858:	0003      	movs	r3, r0
    485a:	3b08      	subs	r3, #8
    485c:	2b1f      	cmp	r3, #31
    485e:	dc00      	bgt.n	4862 <__aeabi_dadd+0x292>
    4860:	e749      	b.n	46f6 <__aeabi_dadd+0x126>
    4862:	002a      	movs	r2, r5
    4864:	3828      	subs	r0, #40	; 0x28
    4866:	4082      	lsls	r2, r0
    4868:	2500      	movs	r5, #0
    486a:	429c      	cmp	r4, r3
    486c:	dc00      	bgt.n	4870 <__aeabi_dadd+0x2a0>
    486e:	e74d      	b.n	470c <__aeabi_dadd+0x13c>
    4870:	493f      	ldr	r1, [pc, #252]	; (4970 <__aeabi_dadd+0x3a0>)
    4872:	1ae4      	subs	r4, r4, r3
    4874:	4011      	ands	r1, r2
    4876:	e6d4      	b.n	4622 <__aeabi_dadd+0x52>
    4878:	4302      	orrs	r2, r0
    487a:	1e50      	subs	r0, r2, #1
    487c:	4182      	sbcs	r2, r0
    487e:	b2d3      	uxtb	r3, r2
    4880:	2200      	movs	r2, #0
    4882:	e722      	b.n	46ca <__aeabi_dadd+0xfa>
    4884:	2b00      	cmp	r3, #0
    4886:	d000      	beq.n	488a <__aeabi_dadd+0x2ba>
    4888:	e0f3      	b.n	4a72 <__aeabi_dadd+0x4a2>
    488a:	1c63      	adds	r3, r4, #1
    488c:	469c      	mov	ip, r3
    488e:	055b      	lsls	r3, r3, #21
    4890:	0d5b      	lsrs	r3, r3, #21
    4892:	2b01      	cmp	r3, #1
    4894:	dc00      	bgt.n	4898 <__aeabi_dadd+0x2c8>
    4896:	e09f      	b.n	49d8 <__aeabi_dadd+0x408>
    4898:	4b34      	ldr	r3, [pc, #208]	; (496c <__aeabi_dadd+0x39c>)
    489a:	459c      	cmp	ip, r3
    489c:	d100      	bne.n	48a0 <__aeabi_dadd+0x2d0>
    489e:	e0c3      	b.n	4a28 <__aeabi_dadd+0x458>
    48a0:	18aa      	adds	r2, r5, r2
    48a2:	1809      	adds	r1, r1, r0
    48a4:	42aa      	cmp	r2, r5
    48a6:	4180      	sbcs	r0, r0
    48a8:	4240      	negs	r0, r0
    48aa:	1841      	adds	r1, r0, r1
    48ac:	07cd      	lsls	r5, r1, #31
    48ae:	0852      	lsrs	r2, r2, #1
    48b0:	4315      	orrs	r5, r2
    48b2:	0849      	lsrs	r1, r1, #1
    48b4:	4664      	mov	r4, ip
    48b6:	e6b4      	b.n	4622 <__aeabi_dadd+0x52>
    48b8:	4b2c      	ldr	r3, [pc, #176]	; (496c <__aeabi_dadd+0x39c>)
    48ba:	429c      	cmp	r4, r3
    48bc:	d000      	beq.n	48c0 <__aeabi_dadd+0x2f0>
    48be:	e6ec      	b.n	469a <__aeabi_dadd+0xca>
    48c0:	e6af      	b.n	4622 <__aeabi_dadd+0x52>
    48c2:	0011      	movs	r1, r2
    48c4:	3c1f      	subs	r4, #31
    48c6:	40e1      	lsrs	r1, r4
    48c8:	000c      	movs	r4, r1
    48ca:	2b20      	cmp	r3, #32
    48cc:	d100      	bne.n	48d0 <__aeabi_dadd+0x300>
    48ce:	e07f      	b.n	49d0 <__aeabi_dadd+0x400>
    48d0:	2140      	movs	r1, #64	; 0x40
    48d2:	1acb      	subs	r3, r1, r3
    48d4:	409a      	lsls	r2, r3
    48d6:	4315      	orrs	r5, r2
    48d8:	1e6a      	subs	r2, r5, #1
    48da:	4195      	sbcs	r5, r2
    48dc:	2100      	movs	r1, #0
    48de:	4325      	orrs	r5, r4
    48e0:	2400      	movs	r4, #0
    48e2:	e72d      	b.n	4740 <__aeabi_dadd+0x170>
    48e4:	0033      	movs	r3, r6
    48e6:	0007      	movs	r7, r0
    48e8:	3b20      	subs	r3, #32
    48ea:	40df      	lsrs	r7, r3
    48ec:	003b      	movs	r3, r7
    48ee:	2e20      	cmp	r6, #32
    48f0:	d070      	beq.n	49d4 <__aeabi_dadd+0x404>
    48f2:	2740      	movs	r7, #64	; 0x40
    48f4:	1bbe      	subs	r6, r7, r6
    48f6:	40b0      	lsls	r0, r6
    48f8:	4302      	orrs	r2, r0
    48fa:	1e50      	subs	r0, r2, #1
    48fc:	4182      	sbcs	r2, r0
    48fe:	4313      	orrs	r3, r2
    4900:	2200      	movs	r2, #0
    4902:	e6e2      	b.n	46ca <__aeabi_dadd+0xfa>
    4904:	2c00      	cmp	r4, #0
    4906:	d04f      	beq.n	49a8 <__aeabi_dadd+0x3d8>
    4908:	4c18      	ldr	r4, [pc, #96]	; (496c <__aeabi_dadd+0x39c>)
    490a:	45a4      	cmp	ip, r4
    490c:	d100      	bne.n	4910 <__aeabi_dadd+0x340>
    490e:	e0ab      	b.n	4a68 <__aeabi_dadd+0x498>
    4910:	2480      	movs	r4, #128	; 0x80
    4912:	0424      	lsls	r4, r4, #16
    4914:	4276      	negs	r6, r6
    4916:	4321      	orrs	r1, r4
    4918:	2e38      	cmp	r6, #56	; 0x38
    491a:	dd00      	ble.n	491e <__aeabi_dadd+0x34e>
    491c:	e0df      	b.n	4ade <__aeabi_dadd+0x50e>
    491e:	2e1f      	cmp	r6, #31
    4920:	dd00      	ble.n	4924 <__aeabi_dadd+0x354>
    4922:	e143      	b.n	4bac <__aeabi_dadd+0x5dc>
    4924:	2720      	movs	r7, #32
    4926:	1bbc      	subs	r4, r7, r6
    4928:	46a1      	mov	r9, r4
    492a:	000c      	movs	r4, r1
    492c:	464f      	mov	r7, r9
    492e:	40bc      	lsls	r4, r7
    4930:	46a0      	mov	r8, r4
    4932:	002c      	movs	r4, r5
    4934:	4647      	mov	r7, r8
    4936:	40f4      	lsrs	r4, r6
    4938:	433c      	orrs	r4, r7
    493a:	464f      	mov	r7, r9
    493c:	40bd      	lsls	r5, r7
    493e:	1e6f      	subs	r7, r5, #1
    4940:	41bd      	sbcs	r5, r7
    4942:	40f1      	lsrs	r1, r6
    4944:	432c      	orrs	r4, r5
    4946:	1b15      	subs	r5, r2, r4
    4948:	42aa      	cmp	r2, r5
    494a:	4192      	sbcs	r2, r2
    494c:	1a41      	subs	r1, r0, r1
    494e:	4252      	negs	r2, r2
    4950:	1a89      	subs	r1, r1, r2
    4952:	4664      	mov	r4, ip
    4954:	469a      	mov	sl, r3
    4956:	e6bf      	b.n	46d8 <__aeabi_dadd+0x108>
    4958:	4641      	mov	r1, r8
    495a:	4645      	mov	r5, r8
    495c:	4331      	orrs	r1, r6
    495e:	d000      	beq.n	4962 <__aeabi_dadd+0x392>
    4960:	e6be      	b.n	46e0 <__aeabi_dadd+0x110>
    4962:	2600      	movs	r6, #0
    4964:	2400      	movs	r4, #0
    4966:	2500      	movs	r5, #0
    4968:	e6f2      	b.n	4750 <__aeabi_dadd+0x180>
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	000007ff 	.word	0x000007ff
    4970:	ff7fffff 	.word	0xff7fffff
    4974:	800fffff 	.word	0x800fffff
    4978:	2b1f      	cmp	r3, #31
    497a:	dc59      	bgt.n	4a30 <__aeabi_dadd+0x460>
    497c:	2720      	movs	r7, #32
    497e:	1aff      	subs	r7, r7, r3
    4980:	46bc      	mov	ip, r7
    4982:	0007      	movs	r7, r0
    4984:	4663      	mov	r3, ip
    4986:	409f      	lsls	r7, r3
    4988:	465b      	mov	r3, fp
    498a:	46b9      	mov	r9, r7
    498c:	0017      	movs	r7, r2
    498e:	40df      	lsrs	r7, r3
    4990:	46b8      	mov	r8, r7
    4992:	464f      	mov	r7, r9
    4994:	4643      	mov	r3, r8
    4996:	431f      	orrs	r7, r3
    4998:	4663      	mov	r3, ip
    499a:	409a      	lsls	r2, r3
    499c:	1e53      	subs	r3, r2, #1
    499e:	419a      	sbcs	r2, r3
    49a0:	465b      	mov	r3, fp
    49a2:	433a      	orrs	r2, r7
    49a4:	40d8      	lsrs	r0, r3
    49a6:	e6f4      	b.n	4792 <__aeabi_dadd+0x1c2>
    49a8:	000c      	movs	r4, r1
    49aa:	432c      	orrs	r4, r5
    49ac:	d05c      	beq.n	4a68 <__aeabi_dadd+0x498>
    49ae:	43f6      	mvns	r6, r6
    49b0:	2e00      	cmp	r6, #0
    49b2:	d155      	bne.n	4a60 <__aeabi_dadd+0x490>
    49b4:	1b55      	subs	r5, r2, r5
    49b6:	42aa      	cmp	r2, r5
    49b8:	41a4      	sbcs	r4, r4
    49ba:	1a41      	subs	r1, r0, r1
    49bc:	4264      	negs	r4, r4
    49be:	1b09      	subs	r1, r1, r4
    49c0:	469a      	mov	sl, r3
    49c2:	4664      	mov	r4, ip
    49c4:	e688      	b.n	46d8 <__aeabi_dadd+0x108>
    49c6:	4f96      	ldr	r7, [pc, #600]	; (4c20 <__aeabi_dadd+0x650>)
    49c8:	42bc      	cmp	r4, r7
    49ca:	d000      	beq.n	49ce <__aeabi_dadd+0x3fe>
    49cc:	e6d8      	b.n	4780 <__aeabi_dadd+0x1b0>
    49ce:	e628      	b.n	4622 <__aeabi_dadd+0x52>
    49d0:	2200      	movs	r2, #0
    49d2:	e780      	b.n	48d6 <__aeabi_dadd+0x306>
    49d4:	2000      	movs	r0, #0
    49d6:	e78f      	b.n	48f8 <__aeabi_dadd+0x328>
    49d8:	000b      	movs	r3, r1
    49da:	432b      	orrs	r3, r5
    49dc:	2c00      	cmp	r4, #0
    49de:	d000      	beq.n	49e2 <__aeabi_dadd+0x412>
    49e0:	e0c2      	b.n	4b68 <__aeabi_dadd+0x598>
    49e2:	2b00      	cmp	r3, #0
    49e4:	d100      	bne.n	49e8 <__aeabi_dadd+0x418>
    49e6:	e101      	b.n	4bec <__aeabi_dadd+0x61c>
    49e8:	0003      	movs	r3, r0
    49ea:	4313      	orrs	r3, r2
    49ec:	d100      	bne.n	49f0 <__aeabi_dadd+0x420>
    49ee:	e618      	b.n	4622 <__aeabi_dadd+0x52>
    49f0:	18ab      	adds	r3, r5, r2
    49f2:	42ab      	cmp	r3, r5
    49f4:	41b6      	sbcs	r6, r6
    49f6:	1809      	adds	r1, r1, r0
    49f8:	4276      	negs	r6, r6
    49fa:	1871      	adds	r1, r6, r1
    49fc:	020a      	lsls	r2, r1, #8
    49fe:	d400      	bmi.n	4a02 <__aeabi_dadd+0x432>
    4a00:	e109      	b.n	4c16 <__aeabi_dadd+0x646>
    4a02:	4a88      	ldr	r2, [pc, #544]	; (4c24 <__aeabi_dadd+0x654>)
    4a04:	001d      	movs	r5, r3
    4a06:	4011      	ands	r1, r2
    4a08:	4664      	mov	r4, ip
    4a0a:	e60a      	b.n	4622 <__aeabi_dadd+0x52>
    4a0c:	2c00      	cmp	r4, #0
    4a0e:	d15b      	bne.n	4ac8 <__aeabi_dadd+0x4f8>
    4a10:	000e      	movs	r6, r1
    4a12:	432e      	orrs	r6, r5
    4a14:	d000      	beq.n	4a18 <__aeabi_dadd+0x448>
    4a16:	e08a      	b.n	4b2e <__aeabi_dadd+0x55e>
    4a18:	0001      	movs	r1, r0
    4a1a:	4311      	orrs	r1, r2
    4a1c:	d100      	bne.n	4a20 <__aeabi_dadd+0x450>
    4a1e:	e0c2      	b.n	4ba6 <__aeabi_dadd+0x5d6>
    4a20:	0001      	movs	r1, r0
    4a22:	0015      	movs	r5, r2
    4a24:	469a      	mov	sl, r3
    4a26:	e5fc      	b.n	4622 <__aeabi_dadd+0x52>
    4a28:	4664      	mov	r4, ip
    4a2a:	2100      	movs	r1, #0
    4a2c:	2500      	movs	r5, #0
    4a2e:	e68f      	b.n	4750 <__aeabi_dadd+0x180>
    4a30:	2320      	movs	r3, #32
    4a32:	425b      	negs	r3, r3
    4a34:	469c      	mov	ip, r3
    4a36:	44dc      	add	ip, fp
    4a38:	4663      	mov	r3, ip
    4a3a:	0007      	movs	r7, r0
    4a3c:	40df      	lsrs	r7, r3
    4a3e:	465b      	mov	r3, fp
    4a40:	46bc      	mov	ip, r7
    4a42:	2b20      	cmp	r3, #32
    4a44:	d100      	bne.n	4a48 <__aeabi_dadd+0x478>
    4a46:	e0ac      	b.n	4ba2 <__aeabi_dadd+0x5d2>
    4a48:	2340      	movs	r3, #64	; 0x40
    4a4a:	465f      	mov	r7, fp
    4a4c:	1bdb      	subs	r3, r3, r7
    4a4e:	4098      	lsls	r0, r3
    4a50:	4302      	orrs	r2, r0
    4a52:	1e50      	subs	r0, r2, #1
    4a54:	4182      	sbcs	r2, r0
    4a56:	4663      	mov	r3, ip
    4a58:	4313      	orrs	r3, r2
    4a5a:	001a      	movs	r2, r3
    4a5c:	2000      	movs	r0, #0
    4a5e:	e698      	b.n	4792 <__aeabi_dadd+0x1c2>
    4a60:	4c6f      	ldr	r4, [pc, #444]	; (4c20 <__aeabi_dadd+0x650>)
    4a62:	45a4      	cmp	ip, r4
    4a64:	d000      	beq.n	4a68 <__aeabi_dadd+0x498>
    4a66:	e757      	b.n	4918 <__aeabi_dadd+0x348>
    4a68:	0001      	movs	r1, r0
    4a6a:	0015      	movs	r5, r2
    4a6c:	4664      	mov	r4, ip
    4a6e:	469a      	mov	sl, r3
    4a70:	e5d7      	b.n	4622 <__aeabi_dadd+0x52>
    4a72:	2c00      	cmp	r4, #0
    4a74:	d139      	bne.n	4aea <__aeabi_dadd+0x51a>
    4a76:	000c      	movs	r4, r1
    4a78:	432c      	orrs	r4, r5
    4a7a:	d06e      	beq.n	4b5a <__aeabi_dadd+0x58a>
    4a7c:	43db      	mvns	r3, r3
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d01a      	beq.n	4ab8 <__aeabi_dadd+0x4e8>
    4a82:	4c67      	ldr	r4, [pc, #412]	; (4c20 <__aeabi_dadd+0x650>)
    4a84:	45a4      	cmp	ip, r4
    4a86:	d068      	beq.n	4b5a <__aeabi_dadd+0x58a>
    4a88:	2b38      	cmp	r3, #56	; 0x38
    4a8a:	dd00      	ble.n	4a8e <__aeabi_dadd+0x4be>
    4a8c:	e0a4      	b.n	4bd8 <__aeabi_dadd+0x608>
    4a8e:	2b1f      	cmp	r3, #31
    4a90:	dd00      	ble.n	4a94 <__aeabi_dadd+0x4c4>
    4a92:	e0ae      	b.n	4bf2 <__aeabi_dadd+0x622>
    4a94:	2420      	movs	r4, #32
    4a96:	000f      	movs	r7, r1
    4a98:	1ae4      	subs	r4, r4, r3
    4a9a:	40a7      	lsls	r7, r4
    4a9c:	46b9      	mov	r9, r7
    4a9e:	002f      	movs	r7, r5
    4aa0:	40df      	lsrs	r7, r3
    4aa2:	46b8      	mov	r8, r7
    4aa4:	46a3      	mov	fp, r4
    4aa6:	464f      	mov	r7, r9
    4aa8:	4644      	mov	r4, r8
    4aaa:	4327      	orrs	r7, r4
    4aac:	465c      	mov	r4, fp
    4aae:	40a5      	lsls	r5, r4
    4ab0:	1e6c      	subs	r4, r5, #1
    4ab2:	41a5      	sbcs	r5, r4
    4ab4:	40d9      	lsrs	r1, r3
    4ab6:	433d      	orrs	r5, r7
    4ab8:	18ad      	adds	r5, r5, r2
    4aba:	4295      	cmp	r5, r2
    4abc:	419b      	sbcs	r3, r3
    4abe:	1809      	adds	r1, r1, r0
    4ac0:	425b      	negs	r3, r3
    4ac2:	1859      	adds	r1, r3, r1
    4ac4:	4664      	mov	r4, ip
    4ac6:	e66b      	b.n	47a0 <__aeabi_dadd+0x1d0>
    4ac8:	000c      	movs	r4, r1
    4aca:	432c      	orrs	r4, r5
    4acc:	d115      	bne.n	4afa <__aeabi_dadd+0x52a>
    4ace:	0001      	movs	r1, r0
    4ad0:	4311      	orrs	r1, r2
    4ad2:	d07b      	beq.n	4bcc <__aeabi_dadd+0x5fc>
    4ad4:	0001      	movs	r1, r0
    4ad6:	0015      	movs	r5, r2
    4ad8:	469a      	mov	sl, r3
    4ada:	4c51      	ldr	r4, [pc, #324]	; (4c20 <__aeabi_dadd+0x650>)
    4adc:	e5a1      	b.n	4622 <__aeabi_dadd+0x52>
    4ade:	430d      	orrs	r5, r1
    4ae0:	1e69      	subs	r1, r5, #1
    4ae2:	418d      	sbcs	r5, r1
    4ae4:	2100      	movs	r1, #0
    4ae6:	b2ec      	uxtb	r4, r5
    4ae8:	e72d      	b.n	4946 <__aeabi_dadd+0x376>
    4aea:	4c4d      	ldr	r4, [pc, #308]	; (4c20 <__aeabi_dadd+0x650>)
    4aec:	45a4      	cmp	ip, r4
    4aee:	d034      	beq.n	4b5a <__aeabi_dadd+0x58a>
    4af0:	2480      	movs	r4, #128	; 0x80
    4af2:	0424      	lsls	r4, r4, #16
    4af4:	425b      	negs	r3, r3
    4af6:	4321      	orrs	r1, r4
    4af8:	e7c6      	b.n	4a88 <__aeabi_dadd+0x4b8>
    4afa:	0004      	movs	r4, r0
    4afc:	4314      	orrs	r4, r2
    4afe:	d04e      	beq.n	4b9e <__aeabi_dadd+0x5ce>
    4b00:	08ed      	lsrs	r5, r5, #3
    4b02:	074c      	lsls	r4, r1, #29
    4b04:	432c      	orrs	r4, r5
    4b06:	2580      	movs	r5, #128	; 0x80
    4b08:	08c9      	lsrs	r1, r1, #3
    4b0a:	032d      	lsls	r5, r5, #12
    4b0c:	4229      	tst	r1, r5
    4b0e:	d008      	beq.n	4b22 <__aeabi_dadd+0x552>
    4b10:	08c6      	lsrs	r6, r0, #3
    4b12:	422e      	tst	r6, r5
    4b14:	d105      	bne.n	4b22 <__aeabi_dadd+0x552>
    4b16:	08d2      	lsrs	r2, r2, #3
    4b18:	0741      	lsls	r1, r0, #29
    4b1a:	4311      	orrs	r1, r2
    4b1c:	000c      	movs	r4, r1
    4b1e:	469a      	mov	sl, r3
    4b20:	0031      	movs	r1, r6
    4b22:	0f62      	lsrs	r2, r4, #29
    4b24:	00c9      	lsls	r1, r1, #3
    4b26:	00e5      	lsls	r5, r4, #3
    4b28:	4311      	orrs	r1, r2
    4b2a:	4c3d      	ldr	r4, [pc, #244]	; (4c20 <__aeabi_dadd+0x650>)
    4b2c:	e579      	b.n	4622 <__aeabi_dadd+0x52>
    4b2e:	0006      	movs	r6, r0
    4b30:	4316      	orrs	r6, r2
    4b32:	d100      	bne.n	4b36 <__aeabi_dadd+0x566>
    4b34:	e575      	b.n	4622 <__aeabi_dadd+0x52>
    4b36:	1aae      	subs	r6, r5, r2
    4b38:	46b0      	mov	r8, r6
    4b3a:	4545      	cmp	r5, r8
    4b3c:	41bf      	sbcs	r7, r7
    4b3e:	1a0e      	subs	r6, r1, r0
    4b40:	427f      	negs	r7, r7
    4b42:	1bf6      	subs	r6, r6, r7
    4b44:	0237      	lsls	r7, r6, #8
    4b46:	d400      	bmi.n	4b4a <__aeabi_dadd+0x57a>
    4b48:	e5f4      	b.n	4734 <__aeabi_dadd+0x164>
    4b4a:	1b55      	subs	r5, r2, r5
    4b4c:	42aa      	cmp	r2, r5
    4b4e:	41b6      	sbcs	r6, r6
    4b50:	1a41      	subs	r1, r0, r1
    4b52:	4276      	negs	r6, r6
    4b54:	1b89      	subs	r1, r1, r6
    4b56:	469a      	mov	sl, r3
    4b58:	e563      	b.n	4622 <__aeabi_dadd+0x52>
    4b5a:	0001      	movs	r1, r0
    4b5c:	0015      	movs	r5, r2
    4b5e:	4664      	mov	r4, ip
    4b60:	e55f      	b.n	4622 <__aeabi_dadd+0x52>
    4b62:	2200      	movs	r2, #0
    4b64:	2500      	movs	r5, #0
    4b66:	e57b      	b.n	4660 <__aeabi_dadd+0x90>
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d03b      	beq.n	4be4 <__aeabi_dadd+0x614>
    4b6c:	0003      	movs	r3, r0
    4b6e:	4313      	orrs	r3, r2
    4b70:	d015      	beq.n	4b9e <__aeabi_dadd+0x5ce>
    4b72:	08ed      	lsrs	r5, r5, #3
    4b74:	074b      	lsls	r3, r1, #29
    4b76:	432b      	orrs	r3, r5
    4b78:	2580      	movs	r5, #128	; 0x80
    4b7a:	08c9      	lsrs	r1, r1, #3
    4b7c:	032d      	lsls	r5, r5, #12
    4b7e:	4229      	tst	r1, r5
    4b80:	d007      	beq.n	4b92 <__aeabi_dadd+0x5c2>
    4b82:	08c4      	lsrs	r4, r0, #3
    4b84:	422c      	tst	r4, r5
    4b86:	d104      	bne.n	4b92 <__aeabi_dadd+0x5c2>
    4b88:	0741      	lsls	r1, r0, #29
    4b8a:	000b      	movs	r3, r1
    4b8c:	0021      	movs	r1, r4
    4b8e:	08d2      	lsrs	r2, r2, #3
    4b90:	4313      	orrs	r3, r2
    4b92:	00c9      	lsls	r1, r1, #3
    4b94:	0f5a      	lsrs	r2, r3, #29
    4b96:	4311      	orrs	r1, r2
    4b98:	00dd      	lsls	r5, r3, #3
    4b9a:	4c21      	ldr	r4, [pc, #132]	; (4c20 <__aeabi_dadd+0x650>)
    4b9c:	e541      	b.n	4622 <__aeabi_dadd+0x52>
    4b9e:	4c20      	ldr	r4, [pc, #128]	; (4c20 <__aeabi_dadd+0x650>)
    4ba0:	e53f      	b.n	4622 <__aeabi_dadd+0x52>
    4ba2:	2000      	movs	r0, #0
    4ba4:	e754      	b.n	4a50 <__aeabi_dadd+0x480>
    4ba6:	2600      	movs	r6, #0
    4ba8:	2500      	movs	r5, #0
    4baa:	e5d1      	b.n	4750 <__aeabi_dadd+0x180>
    4bac:	0034      	movs	r4, r6
    4bae:	000f      	movs	r7, r1
    4bb0:	3c20      	subs	r4, #32
    4bb2:	40e7      	lsrs	r7, r4
    4bb4:	003c      	movs	r4, r7
    4bb6:	2e20      	cmp	r6, #32
    4bb8:	d02b      	beq.n	4c12 <__aeabi_dadd+0x642>
    4bba:	2740      	movs	r7, #64	; 0x40
    4bbc:	1bbe      	subs	r6, r7, r6
    4bbe:	40b1      	lsls	r1, r6
    4bc0:	430d      	orrs	r5, r1
    4bc2:	1e69      	subs	r1, r5, #1
    4bc4:	418d      	sbcs	r5, r1
    4bc6:	2100      	movs	r1, #0
    4bc8:	432c      	orrs	r4, r5
    4bca:	e6bc      	b.n	4946 <__aeabi_dadd+0x376>
    4bcc:	2180      	movs	r1, #128	; 0x80
    4bce:	2600      	movs	r6, #0
    4bd0:	0309      	lsls	r1, r1, #12
    4bd2:	4c13      	ldr	r4, [pc, #76]	; (4c20 <__aeabi_dadd+0x650>)
    4bd4:	2500      	movs	r5, #0
    4bd6:	e5bb      	b.n	4750 <__aeabi_dadd+0x180>
    4bd8:	430d      	orrs	r5, r1
    4bda:	1e69      	subs	r1, r5, #1
    4bdc:	418d      	sbcs	r5, r1
    4bde:	2100      	movs	r1, #0
    4be0:	b2ed      	uxtb	r5, r5
    4be2:	e769      	b.n	4ab8 <__aeabi_dadd+0x4e8>
    4be4:	0001      	movs	r1, r0
    4be6:	0015      	movs	r5, r2
    4be8:	4c0d      	ldr	r4, [pc, #52]	; (4c20 <__aeabi_dadd+0x650>)
    4bea:	e51a      	b.n	4622 <__aeabi_dadd+0x52>
    4bec:	0001      	movs	r1, r0
    4bee:	0015      	movs	r5, r2
    4bf0:	e517      	b.n	4622 <__aeabi_dadd+0x52>
    4bf2:	001c      	movs	r4, r3
    4bf4:	000f      	movs	r7, r1
    4bf6:	3c20      	subs	r4, #32
    4bf8:	40e7      	lsrs	r7, r4
    4bfa:	003c      	movs	r4, r7
    4bfc:	2b20      	cmp	r3, #32
    4bfe:	d00c      	beq.n	4c1a <__aeabi_dadd+0x64a>
    4c00:	2740      	movs	r7, #64	; 0x40
    4c02:	1afb      	subs	r3, r7, r3
    4c04:	4099      	lsls	r1, r3
    4c06:	430d      	orrs	r5, r1
    4c08:	1e69      	subs	r1, r5, #1
    4c0a:	418d      	sbcs	r5, r1
    4c0c:	2100      	movs	r1, #0
    4c0e:	4325      	orrs	r5, r4
    4c10:	e752      	b.n	4ab8 <__aeabi_dadd+0x4e8>
    4c12:	2100      	movs	r1, #0
    4c14:	e7d4      	b.n	4bc0 <__aeabi_dadd+0x5f0>
    4c16:	001d      	movs	r5, r3
    4c18:	e592      	b.n	4740 <__aeabi_dadd+0x170>
    4c1a:	2100      	movs	r1, #0
    4c1c:	e7f3      	b.n	4c06 <__aeabi_dadd+0x636>
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	000007ff 	.word	0x000007ff
    4c24:	ff7fffff 	.word	0xff7fffff

00004c28 <__aeabi_ddiv>:
    4c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c2a:	4656      	mov	r6, sl
    4c2c:	464d      	mov	r5, r9
    4c2e:	4644      	mov	r4, r8
    4c30:	465f      	mov	r7, fp
    4c32:	b4f0      	push	{r4, r5, r6, r7}
    4c34:	001d      	movs	r5, r3
    4c36:	030e      	lsls	r6, r1, #12
    4c38:	004c      	lsls	r4, r1, #1
    4c3a:	0fcb      	lsrs	r3, r1, #31
    4c3c:	b087      	sub	sp, #28
    4c3e:	0007      	movs	r7, r0
    4c40:	4692      	mov	sl, r2
    4c42:	4681      	mov	r9, r0
    4c44:	0b36      	lsrs	r6, r6, #12
    4c46:	0d64      	lsrs	r4, r4, #21
    4c48:	4698      	mov	r8, r3
    4c4a:	d06a      	beq.n	4d22 <__aeabi_ddiv+0xfa>
    4c4c:	4b6d      	ldr	r3, [pc, #436]	; (4e04 <__aeabi_ddiv+0x1dc>)
    4c4e:	429c      	cmp	r4, r3
    4c50:	d035      	beq.n	4cbe <__aeabi_ddiv+0x96>
    4c52:	2280      	movs	r2, #128	; 0x80
    4c54:	0f43      	lsrs	r3, r0, #29
    4c56:	0412      	lsls	r2, r2, #16
    4c58:	4313      	orrs	r3, r2
    4c5a:	00f6      	lsls	r6, r6, #3
    4c5c:	431e      	orrs	r6, r3
    4c5e:	00c3      	lsls	r3, r0, #3
    4c60:	4699      	mov	r9, r3
    4c62:	4b69      	ldr	r3, [pc, #420]	; (4e08 <__aeabi_ddiv+0x1e0>)
    4c64:	2700      	movs	r7, #0
    4c66:	469c      	mov	ip, r3
    4c68:	2300      	movs	r3, #0
    4c6a:	4464      	add	r4, ip
    4c6c:	9302      	str	r3, [sp, #8]
    4c6e:	032b      	lsls	r3, r5, #12
    4c70:	0068      	lsls	r0, r5, #1
    4c72:	0b1b      	lsrs	r3, r3, #12
    4c74:	0fed      	lsrs	r5, r5, #31
    4c76:	4651      	mov	r1, sl
    4c78:	469b      	mov	fp, r3
    4c7a:	0d40      	lsrs	r0, r0, #21
    4c7c:	9500      	str	r5, [sp, #0]
    4c7e:	d100      	bne.n	4c82 <__aeabi_ddiv+0x5a>
    4c80:	e078      	b.n	4d74 <__aeabi_ddiv+0x14c>
    4c82:	4b60      	ldr	r3, [pc, #384]	; (4e04 <__aeabi_ddiv+0x1dc>)
    4c84:	4298      	cmp	r0, r3
    4c86:	d06c      	beq.n	4d62 <__aeabi_ddiv+0x13a>
    4c88:	465b      	mov	r3, fp
    4c8a:	00da      	lsls	r2, r3, #3
    4c8c:	0f4b      	lsrs	r3, r1, #29
    4c8e:	2180      	movs	r1, #128	; 0x80
    4c90:	0409      	lsls	r1, r1, #16
    4c92:	430b      	orrs	r3, r1
    4c94:	4313      	orrs	r3, r2
    4c96:	469b      	mov	fp, r3
    4c98:	4653      	mov	r3, sl
    4c9a:	00d9      	lsls	r1, r3, #3
    4c9c:	4b5a      	ldr	r3, [pc, #360]	; (4e08 <__aeabi_ddiv+0x1e0>)
    4c9e:	469c      	mov	ip, r3
    4ca0:	2300      	movs	r3, #0
    4ca2:	4460      	add	r0, ip
    4ca4:	4642      	mov	r2, r8
    4ca6:	1a20      	subs	r0, r4, r0
    4ca8:	406a      	eors	r2, r5
    4caa:	4692      	mov	sl, r2
    4cac:	9001      	str	r0, [sp, #4]
    4cae:	431f      	orrs	r7, r3
    4cb0:	2f0f      	cmp	r7, #15
    4cb2:	d900      	bls.n	4cb6 <__aeabi_ddiv+0x8e>
    4cb4:	e0b0      	b.n	4e18 <__aeabi_ddiv+0x1f0>
    4cb6:	4855      	ldr	r0, [pc, #340]	; (4e0c <__aeabi_ddiv+0x1e4>)
    4cb8:	00bf      	lsls	r7, r7, #2
    4cba:	59c0      	ldr	r0, [r0, r7]
    4cbc:	4687      	mov	pc, r0
    4cbe:	4337      	orrs	r7, r6
    4cc0:	d000      	beq.n	4cc4 <__aeabi_ddiv+0x9c>
    4cc2:	e088      	b.n	4dd6 <__aeabi_ddiv+0x1ae>
    4cc4:	2300      	movs	r3, #0
    4cc6:	4699      	mov	r9, r3
    4cc8:	3302      	adds	r3, #2
    4cca:	2708      	movs	r7, #8
    4ccc:	2600      	movs	r6, #0
    4cce:	9302      	str	r3, [sp, #8]
    4cd0:	e7cd      	b.n	4c6e <__aeabi_ddiv+0x46>
    4cd2:	4643      	mov	r3, r8
    4cd4:	46b3      	mov	fp, r6
    4cd6:	4649      	mov	r1, r9
    4cd8:	9300      	str	r3, [sp, #0]
    4cda:	9b02      	ldr	r3, [sp, #8]
    4cdc:	9a00      	ldr	r2, [sp, #0]
    4cde:	4692      	mov	sl, r2
    4ce0:	2b02      	cmp	r3, #2
    4ce2:	d000      	beq.n	4ce6 <__aeabi_ddiv+0xbe>
    4ce4:	e1bf      	b.n	5066 <__aeabi_ddiv+0x43e>
    4ce6:	2100      	movs	r1, #0
    4ce8:	4653      	mov	r3, sl
    4cea:	2201      	movs	r2, #1
    4cec:	2600      	movs	r6, #0
    4cee:	4689      	mov	r9, r1
    4cf0:	401a      	ands	r2, r3
    4cf2:	4b44      	ldr	r3, [pc, #272]	; (4e04 <__aeabi_ddiv+0x1dc>)
    4cf4:	2100      	movs	r1, #0
    4cf6:	0336      	lsls	r6, r6, #12
    4cf8:	0d0c      	lsrs	r4, r1, #20
    4cfa:	0524      	lsls	r4, r4, #20
    4cfc:	0b36      	lsrs	r6, r6, #12
    4cfe:	4326      	orrs	r6, r4
    4d00:	4c43      	ldr	r4, [pc, #268]	; (4e10 <__aeabi_ddiv+0x1e8>)
    4d02:	051b      	lsls	r3, r3, #20
    4d04:	4026      	ands	r6, r4
    4d06:	431e      	orrs	r6, r3
    4d08:	0076      	lsls	r6, r6, #1
    4d0a:	07d2      	lsls	r2, r2, #31
    4d0c:	0876      	lsrs	r6, r6, #1
    4d0e:	4316      	orrs	r6, r2
    4d10:	4648      	mov	r0, r9
    4d12:	0031      	movs	r1, r6
    4d14:	b007      	add	sp, #28
    4d16:	bc3c      	pop	{r2, r3, r4, r5}
    4d18:	4690      	mov	r8, r2
    4d1a:	4699      	mov	r9, r3
    4d1c:	46a2      	mov	sl, r4
    4d1e:	46ab      	mov	fp, r5
    4d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d22:	0033      	movs	r3, r6
    4d24:	4303      	orrs	r3, r0
    4d26:	d04f      	beq.n	4dc8 <__aeabi_ddiv+0x1a0>
    4d28:	2e00      	cmp	r6, #0
    4d2a:	d100      	bne.n	4d2e <__aeabi_ddiv+0x106>
    4d2c:	e1bc      	b.n	50a8 <__aeabi_ddiv+0x480>
    4d2e:	0030      	movs	r0, r6
    4d30:	f001 fba8 	bl	6484 <__clzsi2>
    4d34:	0003      	movs	r3, r0
    4d36:	3b0b      	subs	r3, #11
    4d38:	2b1c      	cmp	r3, #28
    4d3a:	dd00      	ble.n	4d3e <__aeabi_ddiv+0x116>
    4d3c:	e1ad      	b.n	509a <__aeabi_ddiv+0x472>
    4d3e:	221d      	movs	r2, #29
    4d40:	0001      	movs	r1, r0
    4d42:	1ad3      	subs	r3, r2, r3
    4d44:	3908      	subs	r1, #8
    4d46:	003a      	movs	r2, r7
    4d48:	408f      	lsls	r7, r1
    4d4a:	408e      	lsls	r6, r1
    4d4c:	40da      	lsrs	r2, r3
    4d4e:	46b9      	mov	r9, r7
    4d50:	4316      	orrs	r6, r2
    4d52:	4b30      	ldr	r3, [pc, #192]	; (4e14 <__aeabi_ddiv+0x1ec>)
    4d54:	2700      	movs	r7, #0
    4d56:	469c      	mov	ip, r3
    4d58:	2300      	movs	r3, #0
    4d5a:	4460      	add	r0, ip
    4d5c:	4244      	negs	r4, r0
    4d5e:	9302      	str	r3, [sp, #8]
    4d60:	e785      	b.n	4c6e <__aeabi_ddiv+0x46>
    4d62:	4653      	mov	r3, sl
    4d64:	465a      	mov	r2, fp
    4d66:	4313      	orrs	r3, r2
    4d68:	d12c      	bne.n	4dc4 <__aeabi_ddiv+0x19c>
    4d6a:	2300      	movs	r3, #0
    4d6c:	2100      	movs	r1, #0
    4d6e:	469b      	mov	fp, r3
    4d70:	3302      	adds	r3, #2
    4d72:	e797      	b.n	4ca4 <__aeabi_ddiv+0x7c>
    4d74:	430b      	orrs	r3, r1
    4d76:	d020      	beq.n	4dba <__aeabi_ddiv+0x192>
    4d78:	465b      	mov	r3, fp
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d100      	bne.n	4d80 <__aeabi_ddiv+0x158>
    4d7e:	e19e      	b.n	50be <__aeabi_ddiv+0x496>
    4d80:	4658      	mov	r0, fp
    4d82:	f001 fb7f 	bl	6484 <__clzsi2>
    4d86:	0003      	movs	r3, r0
    4d88:	3b0b      	subs	r3, #11
    4d8a:	2b1c      	cmp	r3, #28
    4d8c:	dd00      	ble.n	4d90 <__aeabi_ddiv+0x168>
    4d8e:	e18f      	b.n	50b0 <__aeabi_ddiv+0x488>
    4d90:	0002      	movs	r2, r0
    4d92:	4659      	mov	r1, fp
    4d94:	3a08      	subs	r2, #8
    4d96:	4091      	lsls	r1, r2
    4d98:	468b      	mov	fp, r1
    4d9a:	211d      	movs	r1, #29
    4d9c:	1acb      	subs	r3, r1, r3
    4d9e:	4651      	mov	r1, sl
    4da0:	40d9      	lsrs	r1, r3
    4da2:	000b      	movs	r3, r1
    4da4:	4659      	mov	r1, fp
    4da6:	430b      	orrs	r3, r1
    4da8:	4651      	mov	r1, sl
    4daa:	469b      	mov	fp, r3
    4dac:	4091      	lsls	r1, r2
    4dae:	4b19      	ldr	r3, [pc, #100]	; (4e14 <__aeabi_ddiv+0x1ec>)
    4db0:	469c      	mov	ip, r3
    4db2:	4460      	add	r0, ip
    4db4:	4240      	negs	r0, r0
    4db6:	2300      	movs	r3, #0
    4db8:	e774      	b.n	4ca4 <__aeabi_ddiv+0x7c>
    4dba:	2300      	movs	r3, #0
    4dbc:	2100      	movs	r1, #0
    4dbe:	469b      	mov	fp, r3
    4dc0:	3301      	adds	r3, #1
    4dc2:	e76f      	b.n	4ca4 <__aeabi_ddiv+0x7c>
    4dc4:	2303      	movs	r3, #3
    4dc6:	e76d      	b.n	4ca4 <__aeabi_ddiv+0x7c>
    4dc8:	2300      	movs	r3, #0
    4dca:	4699      	mov	r9, r3
    4dcc:	3301      	adds	r3, #1
    4dce:	2704      	movs	r7, #4
    4dd0:	2600      	movs	r6, #0
    4dd2:	9302      	str	r3, [sp, #8]
    4dd4:	e74b      	b.n	4c6e <__aeabi_ddiv+0x46>
    4dd6:	2303      	movs	r3, #3
    4dd8:	270c      	movs	r7, #12
    4dda:	9302      	str	r3, [sp, #8]
    4ddc:	e747      	b.n	4c6e <__aeabi_ddiv+0x46>
    4dde:	2201      	movs	r2, #1
    4de0:	1ad5      	subs	r5, r2, r3
    4de2:	2d38      	cmp	r5, #56	; 0x38
    4de4:	dc00      	bgt.n	4de8 <__aeabi_ddiv+0x1c0>
    4de6:	e1b0      	b.n	514a <__aeabi_ddiv+0x522>
    4de8:	4653      	mov	r3, sl
    4dea:	401a      	ands	r2, r3
    4dec:	2100      	movs	r1, #0
    4dee:	2300      	movs	r3, #0
    4df0:	2600      	movs	r6, #0
    4df2:	4689      	mov	r9, r1
    4df4:	e77e      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    4df6:	2300      	movs	r3, #0
    4df8:	2680      	movs	r6, #128	; 0x80
    4dfa:	4699      	mov	r9, r3
    4dfc:	2200      	movs	r2, #0
    4dfe:	0336      	lsls	r6, r6, #12
    4e00:	4b00      	ldr	r3, [pc, #0]	; (4e04 <__aeabi_ddiv+0x1dc>)
    4e02:	e777      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    4e04:	000007ff 	.word	0x000007ff
    4e08:	fffffc01 	.word	0xfffffc01
    4e0c:	00006898 	.word	0x00006898
    4e10:	800fffff 	.word	0x800fffff
    4e14:	000003f3 	.word	0x000003f3
    4e18:	455e      	cmp	r6, fp
    4e1a:	d900      	bls.n	4e1e <__aeabi_ddiv+0x1f6>
    4e1c:	e172      	b.n	5104 <__aeabi_ddiv+0x4dc>
    4e1e:	d100      	bne.n	4e22 <__aeabi_ddiv+0x1fa>
    4e20:	e16d      	b.n	50fe <__aeabi_ddiv+0x4d6>
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	464d      	mov	r5, r9
    4e26:	3b01      	subs	r3, #1
    4e28:	9301      	str	r3, [sp, #4]
    4e2a:	2300      	movs	r3, #0
    4e2c:	0034      	movs	r4, r6
    4e2e:	9302      	str	r3, [sp, #8]
    4e30:	465b      	mov	r3, fp
    4e32:	021e      	lsls	r6, r3, #8
    4e34:	0e0b      	lsrs	r3, r1, #24
    4e36:	431e      	orrs	r6, r3
    4e38:	020b      	lsls	r3, r1, #8
    4e3a:	9303      	str	r3, [sp, #12]
    4e3c:	0c33      	lsrs	r3, r6, #16
    4e3e:	4699      	mov	r9, r3
    4e40:	0433      	lsls	r3, r6, #16
    4e42:	0c1b      	lsrs	r3, r3, #16
    4e44:	4649      	mov	r1, r9
    4e46:	0020      	movs	r0, r4
    4e48:	9300      	str	r3, [sp, #0]
    4e4a:	f001 fa8f 	bl	636c <__aeabi_uidiv>
    4e4e:	9b00      	ldr	r3, [sp, #0]
    4e50:	0037      	movs	r7, r6
    4e52:	4343      	muls	r3, r0
    4e54:	0006      	movs	r6, r0
    4e56:	4649      	mov	r1, r9
    4e58:	0020      	movs	r0, r4
    4e5a:	4698      	mov	r8, r3
    4e5c:	f001 fb0c 	bl	6478 <__aeabi_uidivmod>
    4e60:	0c2c      	lsrs	r4, r5, #16
    4e62:	0409      	lsls	r1, r1, #16
    4e64:	430c      	orrs	r4, r1
    4e66:	45a0      	cmp	r8, r4
    4e68:	d909      	bls.n	4e7e <__aeabi_ddiv+0x256>
    4e6a:	19e4      	adds	r4, r4, r7
    4e6c:	1e73      	subs	r3, r6, #1
    4e6e:	42a7      	cmp	r7, r4
    4e70:	d900      	bls.n	4e74 <__aeabi_ddiv+0x24c>
    4e72:	e15c      	b.n	512e <__aeabi_ddiv+0x506>
    4e74:	45a0      	cmp	r8, r4
    4e76:	d800      	bhi.n	4e7a <__aeabi_ddiv+0x252>
    4e78:	e159      	b.n	512e <__aeabi_ddiv+0x506>
    4e7a:	3e02      	subs	r6, #2
    4e7c:	19e4      	adds	r4, r4, r7
    4e7e:	4643      	mov	r3, r8
    4e80:	1ae4      	subs	r4, r4, r3
    4e82:	4649      	mov	r1, r9
    4e84:	0020      	movs	r0, r4
    4e86:	f001 fa71 	bl	636c <__aeabi_uidiv>
    4e8a:	0003      	movs	r3, r0
    4e8c:	9a00      	ldr	r2, [sp, #0]
    4e8e:	4680      	mov	r8, r0
    4e90:	4353      	muls	r3, r2
    4e92:	4649      	mov	r1, r9
    4e94:	0020      	movs	r0, r4
    4e96:	469b      	mov	fp, r3
    4e98:	f001 faee 	bl	6478 <__aeabi_uidivmod>
    4e9c:	042a      	lsls	r2, r5, #16
    4e9e:	0409      	lsls	r1, r1, #16
    4ea0:	0c12      	lsrs	r2, r2, #16
    4ea2:	430a      	orrs	r2, r1
    4ea4:	4593      	cmp	fp, r2
    4ea6:	d90d      	bls.n	4ec4 <__aeabi_ddiv+0x29c>
    4ea8:	4643      	mov	r3, r8
    4eaa:	19d2      	adds	r2, r2, r7
    4eac:	3b01      	subs	r3, #1
    4eae:	4297      	cmp	r7, r2
    4eb0:	d900      	bls.n	4eb4 <__aeabi_ddiv+0x28c>
    4eb2:	e13a      	b.n	512a <__aeabi_ddiv+0x502>
    4eb4:	4593      	cmp	fp, r2
    4eb6:	d800      	bhi.n	4eba <__aeabi_ddiv+0x292>
    4eb8:	e137      	b.n	512a <__aeabi_ddiv+0x502>
    4eba:	2302      	movs	r3, #2
    4ebc:	425b      	negs	r3, r3
    4ebe:	469c      	mov	ip, r3
    4ec0:	19d2      	adds	r2, r2, r7
    4ec2:	44e0      	add	r8, ip
    4ec4:	465b      	mov	r3, fp
    4ec6:	1ad2      	subs	r2, r2, r3
    4ec8:	4643      	mov	r3, r8
    4eca:	0436      	lsls	r6, r6, #16
    4ecc:	4333      	orrs	r3, r6
    4ece:	469b      	mov	fp, r3
    4ed0:	9903      	ldr	r1, [sp, #12]
    4ed2:	0c18      	lsrs	r0, r3, #16
    4ed4:	0c0b      	lsrs	r3, r1, #16
    4ed6:	001d      	movs	r5, r3
    4ed8:	9305      	str	r3, [sp, #20]
    4eda:	0409      	lsls	r1, r1, #16
    4edc:	465b      	mov	r3, fp
    4ede:	0c09      	lsrs	r1, r1, #16
    4ee0:	000c      	movs	r4, r1
    4ee2:	041b      	lsls	r3, r3, #16
    4ee4:	0c1b      	lsrs	r3, r3, #16
    4ee6:	4344      	muls	r4, r0
    4ee8:	9104      	str	r1, [sp, #16]
    4eea:	4359      	muls	r1, r3
    4eec:	436b      	muls	r3, r5
    4eee:	4368      	muls	r0, r5
    4ef0:	191b      	adds	r3, r3, r4
    4ef2:	0c0d      	lsrs	r5, r1, #16
    4ef4:	18eb      	adds	r3, r5, r3
    4ef6:	429c      	cmp	r4, r3
    4ef8:	d903      	bls.n	4f02 <__aeabi_ddiv+0x2da>
    4efa:	2480      	movs	r4, #128	; 0x80
    4efc:	0264      	lsls	r4, r4, #9
    4efe:	46a4      	mov	ip, r4
    4f00:	4460      	add	r0, ip
    4f02:	0c1c      	lsrs	r4, r3, #16
    4f04:	0409      	lsls	r1, r1, #16
    4f06:	041b      	lsls	r3, r3, #16
    4f08:	0c09      	lsrs	r1, r1, #16
    4f0a:	1820      	adds	r0, r4, r0
    4f0c:	185d      	adds	r5, r3, r1
    4f0e:	4282      	cmp	r2, r0
    4f10:	d200      	bcs.n	4f14 <__aeabi_ddiv+0x2ec>
    4f12:	e0de      	b.n	50d2 <__aeabi_ddiv+0x4aa>
    4f14:	d100      	bne.n	4f18 <__aeabi_ddiv+0x2f0>
    4f16:	e0d7      	b.n	50c8 <__aeabi_ddiv+0x4a0>
    4f18:	1a16      	subs	r6, r2, r0
    4f1a:	9b02      	ldr	r3, [sp, #8]
    4f1c:	469c      	mov	ip, r3
    4f1e:	1b5d      	subs	r5, r3, r5
    4f20:	45ac      	cmp	ip, r5
    4f22:	419b      	sbcs	r3, r3
    4f24:	425b      	negs	r3, r3
    4f26:	1af6      	subs	r6, r6, r3
    4f28:	42b7      	cmp	r7, r6
    4f2a:	d100      	bne.n	4f2e <__aeabi_ddiv+0x306>
    4f2c:	e106      	b.n	513c <__aeabi_ddiv+0x514>
    4f2e:	4649      	mov	r1, r9
    4f30:	0030      	movs	r0, r6
    4f32:	f001 fa1b 	bl	636c <__aeabi_uidiv>
    4f36:	9b00      	ldr	r3, [sp, #0]
    4f38:	0004      	movs	r4, r0
    4f3a:	4343      	muls	r3, r0
    4f3c:	4649      	mov	r1, r9
    4f3e:	0030      	movs	r0, r6
    4f40:	4698      	mov	r8, r3
    4f42:	f001 fa99 	bl	6478 <__aeabi_uidivmod>
    4f46:	0c2e      	lsrs	r6, r5, #16
    4f48:	0409      	lsls	r1, r1, #16
    4f4a:	430e      	orrs	r6, r1
    4f4c:	45b0      	cmp	r8, r6
    4f4e:	d909      	bls.n	4f64 <__aeabi_ddiv+0x33c>
    4f50:	19f6      	adds	r6, r6, r7
    4f52:	1e63      	subs	r3, r4, #1
    4f54:	42b7      	cmp	r7, r6
    4f56:	d900      	bls.n	4f5a <__aeabi_ddiv+0x332>
    4f58:	e0f3      	b.n	5142 <__aeabi_ddiv+0x51a>
    4f5a:	45b0      	cmp	r8, r6
    4f5c:	d800      	bhi.n	4f60 <__aeabi_ddiv+0x338>
    4f5e:	e0f0      	b.n	5142 <__aeabi_ddiv+0x51a>
    4f60:	3c02      	subs	r4, #2
    4f62:	19f6      	adds	r6, r6, r7
    4f64:	4643      	mov	r3, r8
    4f66:	1af3      	subs	r3, r6, r3
    4f68:	4649      	mov	r1, r9
    4f6a:	0018      	movs	r0, r3
    4f6c:	9302      	str	r3, [sp, #8]
    4f6e:	f001 f9fd 	bl	636c <__aeabi_uidiv>
    4f72:	9b00      	ldr	r3, [sp, #0]
    4f74:	0006      	movs	r6, r0
    4f76:	4343      	muls	r3, r0
    4f78:	4649      	mov	r1, r9
    4f7a:	9802      	ldr	r0, [sp, #8]
    4f7c:	4698      	mov	r8, r3
    4f7e:	f001 fa7b 	bl	6478 <__aeabi_uidivmod>
    4f82:	042d      	lsls	r5, r5, #16
    4f84:	0409      	lsls	r1, r1, #16
    4f86:	0c2d      	lsrs	r5, r5, #16
    4f88:	430d      	orrs	r5, r1
    4f8a:	45a8      	cmp	r8, r5
    4f8c:	d909      	bls.n	4fa2 <__aeabi_ddiv+0x37a>
    4f8e:	19ed      	adds	r5, r5, r7
    4f90:	1e73      	subs	r3, r6, #1
    4f92:	42af      	cmp	r7, r5
    4f94:	d900      	bls.n	4f98 <__aeabi_ddiv+0x370>
    4f96:	e0d6      	b.n	5146 <__aeabi_ddiv+0x51e>
    4f98:	45a8      	cmp	r8, r5
    4f9a:	d800      	bhi.n	4f9e <__aeabi_ddiv+0x376>
    4f9c:	e0d3      	b.n	5146 <__aeabi_ddiv+0x51e>
    4f9e:	3e02      	subs	r6, #2
    4fa0:	19ed      	adds	r5, r5, r7
    4fa2:	0424      	lsls	r4, r4, #16
    4fa4:	0021      	movs	r1, r4
    4fa6:	4643      	mov	r3, r8
    4fa8:	4331      	orrs	r1, r6
    4faa:	9e04      	ldr	r6, [sp, #16]
    4fac:	9a05      	ldr	r2, [sp, #20]
    4fae:	0030      	movs	r0, r6
    4fb0:	1aed      	subs	r5, r5, r3
    4fb2:	040b      	lsls	r3, r1, #16
    4fb4:	0c0c      	lsrs	r4, r1, #16
    4fb6:	0c1b      	lsrs	r3, r3, #16
    4fb8:	4358      	muls	r0, r3
    4fba:	4366      	muls	r6, r4
    4fbc:	4353      	muls	r3, r2
    4fbe:	4354      	muls	r4, r2
    4fc0:	199a      	adds	r2, r3, r6
    4fc2:	0c03      	lsrs	r3, r0, #16
    4fc4:	189b      	adds	r3, r3, r2
    4fc6:	429e      	cmp	r6, r3
    4fc8:	d903      	bls.n	4fd2 <__aeabi_ddiv+0x3aa>
    4fca:	2280      	movs	r2, #128	; 0x80
    4fcc:	0252      	lsls	r2, r2, #9
    4fce:	4694      	mov	ip, r2
    4fd0:	4464      	add	r4, ip
    4fd2:	0c1a      	lsrs	r2, r3, #16
    4fd4:	0400      	lsls	r0, r0, #16
    4fd6:	041b      	lsls	r3, r3, #16
    4fd8:	0c00      	lsrs	r0, r0, #16
    4fda:	1914      	adds	r4, r2, r4
    4fdc:	181b      	adds	r3, r3, r0
    4fde:	42a5      	cmp	r5, r4
    4fe0:	d350      	bcc.n	5084 <__aeabi_ddiv+0x45c>
    4fe2:	d04d      	beq.n	5080 <__aeabi_ddiv+0x458>
    4fe4:	2301      	movs	r3, #1
    4fe6:	4319      	orrs	r1, r3
    4fe8:	4a96      	ldr	r2, [pc, #600]	; (5244 <__aeabi_ddiv+0x61c>)
    4fea:	9b01      	ldr	r3, [sp, #4]
    4fec:	4694      	mov	ip, r2
    4fee:	4463      	add	r3, ip
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	dc00      	bgt.n	4ff6 <__aeabi_ddiv+0x3ce>
    4ff4:	e6f3      	b.n	4dde <__aeabi_ddiv+0x1b6>
    4ff6:	074a      	lsls	r2, r1, #29
    4ff8:	d009      	beq.n	500e <__aeabi_ddiv+0x3e6>
    4ffa:	220f      	movs	r2, #15
    4ffc:	400a      	ands	r2, r1
    4ffe:	2a04      	cmp	r2, #4
    5000:	d005      	beq.n	500e <__aeabi_ddiv+0x3e6>
    5002:	1d0a      	adds	r2, r1, #4
    5004:	428a      	cmp	r2, r1
    5006:	4189      	sbcs	r1, r1
    5008:	4249      	negs	r1, r1
    500a:	448b      	add	fp, r1
    500c:	0011      	movs	r1, r2
    500e:	465a      	mov	r2, fp
    5010:	01d2      	lsls	r2, r2, #7
    5012:	d508      	bpl.n	5026 <__aeabi_ddiv+0x3fe>
    5014:	465a      	mov	r2, fp
    5016:	4b8c      	ldr	r3, [pc, #560]	; (5248 <__aeabi_ddiv+0x620>)
    5018:	401a      	ands	r2, r3
    501a:	4693      	mov	fp, r2
    501c:	2280      	movs	r2, #128	; 0x80
    501e:	00d2      	lsls	r2, r2, #3
    5020:	4694      	mov	ip, r2
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	4463      	add	r3, ip
    5026:	4a89      	ldr	r2, [pc, #548]	; (524c <__aeabi_ddiv+0x624>)
    5028:	4293      	cmp	r3, r2
    502a:	dd00      	ble.n	502e <__aeabi_ddiv+0x406>
    502c:	e65b      	b.n	4ce6 <__aeabi_ddiv+0xbe>
    502e:	465a      	mov	r2, fp
    5030:	08c9      	lsrs	r1, r1, #3
    5032:	0750      	lsls	r0, r2, #29
    5034:	4308      	orrs	r0, r1
    5036:	0256      	lsls	r6, r2, #9
    5038:	4651      	mov	r1, sl
    503a:	2201      	movs	r2, #1
    503c:	055b      	lsls	r3, r3, #21
    503e:	4681      	mov	r9, r0
    5040:	0b36      	lsrs	r6, r6, #12
    5042:	0d5b      	lsrs	r3, r3, #21
    5044:	400a      	ands	r2, r1
    5046:	e655      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5048:	2380      	movs	r3, #128	; 0x80
    504a:	031b      	lsls	r3, r3, #12
    504c:	421e      	tst	r6, r3
    504e:	d011      	beq.n	5074 <__aeabi_ddiv+0x44c>
    5050:	465a      	mov	r2, fp
    5052:	421a      	tst	r2, r3
    5054:	d10e      	bne.n	5074 <__aeabi_ddiv+0x44c>
    5056:	465e      	mov	r6, fp
    5058:	431e      	orrs	r6, r3
    505a:	0336      	lsls	r6, r6, #12
    505c:	0b36      	lsrs	r6, r6, #12
    505e:	002a      	movs	r2, r5
    5060:	4689      	mov	r9, r1
    5062:	4b7b      	ldr	r3, [pc, #492]	; (5250 <__aeabi_ddiv+0x628>)
    5064:	e646      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5066:	2b03      	cmp	r3, #3
    5068:	d100      	bne.n	506c <__aeabi_ddiv+0x444>
    506a:	e0e1      	b.n	5230 <__aeabi_ddiv+0x608>
    506c:	2b01      	cmp	r3, #1
    506e:	d1bb      	bne.n	4fe8 <__aeabi_ddiv+0x3c0>
    5070:	401a      	ands	r2, r3
    5072:	e6bb      	b.n	4dec <__aeabi_ddiv+0x1c4>
    5074:	431e      	orrs	r6, r3
    5076:	0336      	lsls	r6, r6, #12
    5078:	0b36      	lsrs	r6, r6, #12
    507a:	4642      	mov	r2, r8
    507c:	4b74      	ldr	r3, [pc, #464]	; (5250 <__aeabi_ddiv+0x628>)
    507e:	e639      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5080:	2b00      	cmp	r3, #0
    5082:	d0b1      	beq.n	4fe8 <__aeabi_ddiv+0x3c0>
    5084:	197d      	adds	r5, r7, r5
    5086:	1e4a      	subs	r2, r1, #1
    5088:	42af      	cmp	r7, r5
    508a:	d952      	bls.n	5132 <__aeabi_ddiv+0x50a>
    508c:	0011      	movs	r1, r2
    508e:	42a5      	cmp	r5, r4
    5090:	d1a8      	bne.n	4fe4 <__aeabi_ddiv+0x3bc>
    5092:	9a03      	ldr	r2, [sp, #12]
    5094:	429a      	cmp	r2, r3
    5096:	d1a5      	bne.n	4fe4 <__aeabi_ddiv+0x3bc>
    5098:	e7a6      	b.n	4fe8 <__aeabi_ddiv+0x3c0>
    509a:	0003      	movs	r3, r0
    509c:	003e      	movs	r6, r7
    509e:	3b28      	subs	r3, #40	; 0x28
    50a0:	409e      	lsls	r6, r3
    50a2:	2300      	movs	r3, #0
    50a4:	4699      	mov	r9, r3
    50a6:	e654      	b.n	4d52 <__aeabi_ddiv+0x12a>
    50a8:	f001 f9ec 	bl	6484 <__clzsi2>
    50ac:	3020      	adds	r0, #32
    50ae:	e641      	b.n	4d34 <__aeabi_ddiv+0x10c>
    50b0:	0003      	movs	r3, r0
    50b2:	4652      	mov	r2, sl
    50b4:	3b28      	subs	r3, #40	; 0x28
    50b6:	409a      	lsls	r2, r3
    50b8:	2100      	movs	r1, #0
    50ba:	4693      	mov	fp, r2
    50bc:	e677      	b.n	4dae <__aeabi_ddiv+0x186>
    50be:	4650      	mov	r0, sl
    50c0:	f001 f9e0 	bl	6484 <__clzsi2>
    50c4:	3020      	adds	r0, #32
    50c6:	e65e      	b.n	4d86 <__aeabi_ddiv+0x15e>
    50c8:	9b02      	ldr	r3, [sp, #8]
    50ca:	2600      	movs	r6, #0
    50cc:	42ab      	cmp	r3, r5
    50ce:	d300      	bcc.n	50d2 <__aeabi_ddiv+0x4aa>
    50d0:	e723      	b.n	4f1a <__aeabi_ddiv+0x2f2>
    50d2:	9e03      	ldr	r6, [sp, #12]
    50d4:	9902      	ldr	r1, [sp, #8]
    50d6:	46b4      	mov	ip, r6
    50d8:	4461      	add	r1, ip
    50da:	4688      	mov	r8, r1
    50dc:	45b0      	cmp	r8, r6
    50de:	41b6      	sbcs	r6, r6
    50e0:	465b      	mov	r3, fp
    50e2:	4276      	negs	r6, r6
    50e4:	19f6      	adds	r6, r6, r7
    50e6:	18b2      	adds	r2, r6, r2
    50e8:	3b01      	subs	r3, #1
    50ea:	9102      	str	r1, [sp, #8]
    50ec:	4297      	cmp	r7, r2
    50ee:	d213      	bcs.n	5118 <__aeabi_ddiv+0x4f0>
    50f0:	4290      	cmp	r0, r2
    50f2:	d84f      	bhi.n	5194 <__aeabi_ddiv+0x56c>
    50f4:	d100      	bne.n	50f8 <__aeabi_ddiv+0x4d0>
    50f6:	e08e      	b.n	5216 <__aeabi_ddiv+0x5ee>
    50f8:	1a16      	subs	r6, r2, r0
    50fa:	469b      	mov	fp, r3
    50fc:	e70d      	b.n	4f1a <__aeabi_ddiv+0x2f2>
    50fe:	4589      	cmp	r9, r1
    5100:	d200      	bcs.n	5104 <__aeabi_ddiv+0x4dc>
    5102:	e68e      	b.n	4e22 <__aeabi_ddiv+0x1fa>
    5104:	0874      	lsrs	r4, r6, #1
    5106:	464b      	mov	r3, r9
    5108:	07f6      	lsls	r6, r6, #31
    510a:	0035      	movs	r5, r6
    510c:	085b      	lsrs	r3, r3, #1
    510e:	431d      	orrs	r5, r3
    5110:	464b      	mov	r3, r9
    5112:	07db      	lsls	r3, r3, #31
    5114:	9302      	str	r3, [sp, #8]
    5116:	e68b      	b.n	4e30 <__aeabi_ddiv+0x208>
    5118:	4297      	cmp	r7, r2
    511a:	d1ed      	bne.n	50f8 <__aeabi_ddiv+0x4d0>
    511c:	9903      	ldr	r1, [sp, #12]
    511e:	9c02      	ldr	r4, [sp, #8]
    5120:	42a1      	cmp	r1, r4
    5122:	d9e5      	bls.n	50f0 <__aeabi_ddiv+0x4c8>
    5124:	1a3e      	subs	r6, r7, r0
    5126:	469b      	mov	fp, r3
    5128:	e6f7      	b.n	4f1a <__aeabi_ddiv+0x2f2>
    512a:	4698      	mov	r8, r3
    512c:	e6ca      	b.n	4ec4 <__aeabi_ddiv+0x29c>
    512e:	001e      	movs	r6, r3
    5130:	e6a5      	b.n	4e7e <__aeabi_ddiv+0x256>
    5132:	42ac      	cmp	r4, r5
    5134:	d83e      	bhi.n	51b4 <__aeabi_ddiv+0x58c>
    5136:	d074      	beq.n	5222 <__aeabi_ddiv+0x5fa>
    5138:	0011      	movs	r1, r2
    513a:	e753      	b.n	4fe4 <__aeabi_ddiv+0x3bc>
    513c:	2101      	movs	r1, #1
    513e:	4249      	negs	r1, r1
    5140:	e752      	b.n	4fe8 <__aeabi_ddiv+0x3c0>
    5142:	001c      	movs	r4, r3
    5144:	e70e      	b.n	4f64 <__aeabi_ddiv+0x33c>
    5146:	001e      	movs	r6, r3
    5148:	e72b      	b.n	4fa2 <__aeabi_ddiv+0x37a>
    514a:	2d1f      	cmp	r5, #31
    514c:	dc3c      	bgt.n	51c8 <__aeabi_ddiv+0x5a0>
    514e:	2320      	movs	r3, #32
    5150:	000a      	movs	r2, r1
    5152:	4658      	mov	r0, fp
    5154:	1b5b      	subs	r3, r3, r5
    5156:	4098      	lsls	r0, r3
    5158:	40ea      	lsrs	r2, r5
    515a:	4099      	lsls	r1, r3
    515c:	4302      	orrs	r2, r0
    515e:	1e48      	subs	r0, r1, #1
    5160:	4181      	sbcs	r1, r0
    5162:	465e      	mov	r6, fp
    5164:	4311      	orrs	r1, r2
    5166:	40ee      	lsrs	r6, r5
    5168:	074b      	lsls	r3, r1, #29
    516a:	d009      	beq.n	5180 <__aeabi_ddiv+0x558>
    516c:	230f      	movs	r3, #15
    516e:	400b      	ands	r3, r1
    5170:	2b04      	cmp	r3, #4
    5172:	d005      	beq.n	5180 <__aeabi_ddiv+0x558>
    5174:	000b      	movs	r3, r1
    5176:	1d19      	adds	r1, r3, #4
    5178:	4299      	cmp	r1, r3
    517a:	419b      	sbcs	r3, r3
    517c:	425b      	negs	r3, r3
    517e:	18f6      	adds	r6, r6, r3
    5180:	0233      	lsls	r3, r6, #8
    5182:	d53c      	bpl.n	51fe <__aeabi_ddiv+0x5d6>
    5184:	4653      	mov	r3, sl
    5186:	2201      	movs	r2, #1
    5188:	2100      	movs	r1, #0
    518a:	401a      	ands	r2, r3
    518c:	2600      	movs	r6, #0
    518e:	2301      	movs	r3, #1
    5190:	4689      	mov	r9, r1
    5192:	e5af      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5194:	2302      	movs	r3, #2
    5196:	425b      	negs	r3, r3
    5198:	469c      	mov	ip, r3
    519a:	9c03      	ldr	r4, [sp, #12]
    519c:	44e3      	add	fp, ip
    519e:	46a4      	mov	ip, r4
    51a0:	9b02      	ldr	r3, [sp, #8]
    51a2:	4463      	add	r3, ip
    51a4:	4698      	mov	r8, r3
    51a6:	45a0      	cmp	r8, r4
    51a8:	41b6      	sbcs	r6, r6
    51aa:	4276      	negs	r6, r6
    51ac:	19f6      	adds	r6, r6, r7
    51ae:	9302      	str	r3, [sp, #8]
    51b0:	18b2      	adds	r2, r6, r2
    51b2:	e6b1      	b.n	4f18 <__aeabi_ddiv+0x2f0>
    51b4:	9803      	ldr	r0, [sp, #12]
    51b6:	1e8a      	subs	r2, r1, #2
    51b8:	0041      	lsls	r1, r0, #1
    51ba:	4281      	cmp	r1, r0
    51bc:	41b6      	sbcs	r6, r6
    51be:	4276      	negs	r6, r6
    51c0:	19f6      	adds	r6, r6, r7
    51c2:	19ad      	adds	r5, r5, r6
    51c4:	9103      	str	r1, [sp, #12]
    51c6:	e761      	b.n	508c <__aeabi_ddiv+0x464>
    51c8:	221f      	movs	r2, #31
    51ca:	4252      	negs	r2, r2
    51cc:	1ad3      	subs	r3, r2, r3
    51ce:	465a      	mov	r2, fp
    51d0:	40da      	lsrs	r2, r3
    51d2:	0013      	movs	r3, r2
    51d4:	2d20      	cmp	r5, #32
    51d6:	d029      	beq.n	522c <__aeabi_ddiv+0x604>
    51d8:	2240      	movs	r2, #64	; 0x40
    51da:	4658      	mov	r0, fp
    51dc:	1b55      	subs	r5, r2, r5
    51de:	40a8      	lsls	r0, r5
    51e0:	4301      	orrs	r1, r0
    51e2:	1e48      	subs	r0, r1, #1
    51e4:	4181      	sbcs	r1, r0
    51e6:	2007      	movs	r0, #7
    51e8:	430b      	orrs	r3, r1
    51ea:	4018      	ands	r0, r3
    51ec:	2600      	movs	r6, #0
    51ee:	2800      	cmp	r0, #0
    51f0:	d009      	beq.n	5206 <__aeabi_ddiv+0x5de>
    51f2:	220f      	movs	r2, #15
    51f4:	2600      	movs	r6, #0
    51f6:	401a      	ands	r2, r3
    51f8:	0019      	movs	r1, r3
    51fa:	2a04      	cmp	r2, #4
    51fc:	d1bb      	bne.n	5176 <__aeabi_ddiv+0x54e>
    51fe:	000b      	movs	r3, r1
    5200:	0770      	lsls	r0, r6, #29
    5202:	0276      	lsls	r6, r6, #9
    5204:	0b36      	lsrs	r6, r6, #12
    5206:	08db      	lsrs	r3, r3, #3
    5208:	4303      	orrs	r3, r0
    520a:	4699      	mov	r9, r3
    520c:	2201      	movs	r2, #1
    520e:	4653      	mov	r3, sl
    5210:	401a      	ands	r2, r3
    5212:	2300      	movs	r3, #0
    5214:	e56e      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5216:	9902      	ldr	r1, [sp, #8]
    5218:	428d      	cmp	r5, r1
    521a:	d8bb      	bhi.n	5194 <__aeabi_ddiv+0x56c>
    521c:	469b      	mov	fp, r3
    521e:	2600      	movs	r6, #0
    5220:	e67b      	b.n	4f1a <__aeabi_ddiv+0x2f2>
    5222:	9803      	ldr	r0, [sp, #12]
    5224:	4298      	cmp	r0, r3
    5226:	d3c5      	bcc.n	51b4 <__aeabi_ddiv+0x58c>
    5228:	0011      	movs	r1, r2
    522a:	e732      	b.n	5092 <__aeabi_ddiv+0x46a>
    522c:	2000      	movs	r0, #0
    522e:	e7d7      	b.n	51e0 <__aeabi_ddiv+0x5b8>
    5230:	2680      	movs	r6, #128	; 0x80
    5232:	465b      	mov	r3, fp
    5234:	0336      	lsls	r6, r6, #12
    5236:	431e      	orrs	r6, r3
    5238:	0336      	lsls	r6, r6, #12
    523a:	0b36      	lsrs	r6, r6, #12
    523c:	9a00      	ldr	r2, [sp, #0]
    523e:	4689      	mov	r9, r1
    5240:	4b03      	ldr	r3, [pc, #12]	; (5250 <__aeabi_ddiv+0x628>)
    5242:	e557      	b.n	4cf4 <__aeabi_ddiv+0xcc>
    5244:	000003ff 	.word	0x000003ff
    5248:	feffffff 	.word	0xfeffffff
    524c:	000007fe 	.word	0x000007fe
    5250:	000007ff 	.word	0x000007ff

00005254 <__eqdf2>:
    5254:	b5f0      	push	{r4, r5, r6, r7, lr}
    5256:	465f      	mov	r7, fp
    5258:	4656      	mov	r6, sl
    525a:	464d      	mov	r5, r9
    525c:	4644      	mov	r4, r8
    525e:	b4f0      	push	{r4, r5, r6, r7}
    5260:	031f      	lsls	r7, r3, #12
    5262:	005c      	lsls	r4, r3, #1
    5264:	0fdb      	lsrs	r3, r3, #31
    5266:	469a      	mov	sl, r3
    5268:	4b19      	ldr	r3, [pc, #100]	; (52d0 <__eqdf2+0x7c>)
    526a:	030e      	lsls	r6, r1, #12
    526c:	004d      	lsls	r5, r1, #1
    526e:	0fc9      	lsrs	r1, r1, #31
    5270:	4680      	mov	r8, r0
    5272:	0b36      	lsrs	r6, r6, #12
    5274:	0d6d      	lsrs	r5, r5, #21
    5276:	468b      	mov	fp, r1
    5278:	4691      	mov	r9, r2
    527a:	0b3f      	lsrs	r7, r7, #12
    527c:	0d64      	lsrs	r4, r4, #21
    527e:	429d      	cmp	r5, r3
    5280:	d019      	beq.n	52b6 <__eqdf2+0x62>
    5282:	4b13      	ldr	r3, [pc, #76]	; (52d0 <__eqdf2+0x7c>)
    5284:	429c      	cmp	r4, r3
    5286:	d01b      	beq.n	52c0 <__eqdf2+0x6c>
    5288:	2301      	movs	r3, #1
    528a:	42a5      	cmp	r5, r4
    528c:	d006      	beq.n	529c <__eqdf2+0x48>
    528e:	0018      	movs	r0, r3
    5290:	bc3c      	pop	{r2, r3, r4, r5}
    5292:	4690      	mov	r8, r2
    5294:	4699      	mov	r9, r3
    5296:	46a2      	mov	sl, r4
    5298:	46ab      	mov	fp, r5
    529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    529c:	42be      	cmp	r6, r7
    529e:	d1f6      	bne.n	528e <__eqdf2+0x3a>
    52a0:	45c8      	cmp	r8, r9
    52a2:	d1f4      	bne.n	528e <__eqdf2+0x3a>
    52a4:	45d3      	cmp	fp, sl
    52a6:	d010      	beq.n	52ca <__eqdf2+0x76>
    52a8:	2d00      	cmp	r5, #0
    52aa:	d1f0      	bne.n	528e <__eqdf2+0x3a>
    52ac:	4330      	orrs	r0, r6
    52ae:	0003      	movs	r3, r0
    52b0:	1e5a      	subs	r2, r3, #1
    52b2:	4193      	sbcs	r3, r2
    52b4:	e7eb      	b.n	528e <__eqdf2+0x3a>
    52b6:	0031      	movs	r1, r6
    52b8:	2301      	movs	r3, #1
    52ba:	4301      	orrs	r1, r0
    52bc:	d1e7      	bne.n	528e <__eqdf2+0x3a>
    52be:	e7e0      	b.n	5282 <__eqdf2+0x2e>
    52c0:	433a      	orrs	r2, r7
    52c2:	2301      	movs	r3, #1
    52c4:	2a00      	cmp	r2, #0
    52c6:	d1e2      	bne.n	528e <__eqdf2+0x3a>
    52c8:	e7de      	b.n	5288 <__eqdf2+0x34>
    52ca:	2300      	movs	r3, #0
    52cc:	e7df      	b.n	528e <__eqdf2+0x3a>
    52ce:	46c0      	nop			; (mov r8, r8)
    52d0:	000007ff 	.word	0x000007ff

000052d4 <__gedf2>:
    52d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52d6:	465f      	mov	r7, fp
    52d8:	4644      	mov	r4, r8
    52da:	4656      	mov	r6, sl
    52dc:	464d      	mov	r5, r9
    52de:	b4f0      	push	{r4, r5, r6, r7}
    52e0:	031f      	lsls	r7, r3, #12
    52e2:	0b3c      	lsrs	r4, r7, #12
    52e4:	4f2c      	ldr	r7, [pc, #176]	; (5398 <__gedf2+0xc4>)
    52e6:	030e      	lsls	r6, r1, #12
    52e8:	004d      	lsls	r5, r1, #1
    52ea:	46a3      	mov	fp, r4
    52ec:	005c      	lsls	r4, r3, #1
    52ee:	4684      	mov	ip, r0
    52f0:	0b36      	lsrs	r6, r6, #12
    52f2:	0d6d      	lsrs	r5, r5, #21
    52f4:	0fc9      	lsrs	r1, r1, #31
    52f6:	4690      	mov	r8, r2
    52f8:	0d64      	lsrs	r4, r4, #21
    52fa:	0fdb      	lsrs	r3, r3, #31
    52fc:	42bd      	cmp	r5, r7
    52fe:	d02b      	beq.n	5358 <__gedf2+0x84>
    5300:	4f25      	ldr	r7, [pc, #148]	; (5398 <__gedf2+0xc4>)
    5302:	42bc      	cmp	r4, r7
    5304:	d02e      	beq.n	5364 <__gedf2+0x90>
    5306:	2d00      	cmp	r5, #0
    5308:	d10e      	bne.n	5328 <__gedf2+0x54>
    530a:	4330      	orrs	r0, r6
    530c:	0007      	movs	r7, r0
    530e:	4681      	mov	r9, r0
    5310:	4278      	negs	r0, r7
    5312:	4178      	adcs	r0, r7
    5314:	2c00      	cmp	r4, #0
    5316:	d117      	bne.n	5348 <__gedf2+0x74>
    5318:	465f      	mov	r7, fp
    531a:	433a      	orrs	r2, r7
    531c:	d114      	bne.n	5348 <__gedf2+0x74>
    531e:	464b      	mov	r3, r9
    5320:	2000      	movs	r0, #0
    5322:	2b00      	cmp	r3, #0
    5324:	d00a      	beq.n	533c <__gedf2+0x68>
    5326:	e006      	b.n	5336 <__gedf2+0x62>
    5328:	2c00      	cmp	r4, #0
    532a:	d102      	bne.n	5332 <__gedf2+0x5e>
    532c:	4658      	mov	r0, fp
    532e:	4302      	orrs	r2, r0
    5330:	d001      	beq.n	5336 <__gedf2+0x62>
    5332:	4299      	cmp	r1, r3
    5334:	d01a      	beq.n	536c <__gedf2+0x98>
    5336:	2301      	movs	r3, #1
    5338:	4248      	negs	r0, r1
    533a:	4318      	orrs	r0, r3
    533c:	bc3c      	pop	{r2, r3, r4, r5}
    533e:	4690      	mov	r8, r2
    5340:	4699      	mov	r9, r3
    5342:	46a2      	mov	sl, r4
    5344:	46ab      	mov	fp, r5
    5346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5348:	2800      	cmp	r0, #0
    534a:	d0f2      	beq.n	5332 <__gedf2+0x5e>
    534c:	4258      	negs	r0, r3
    534e:	4158      	adcs	r0, r3
    5350:	2201      	movs	r2, #1
    5352:	4240      	negs	r0, r0
    5354:	4310      	orrs	r0, r2
    5356:	e7f1      	b.n	533c <__gedf2+0x68>
    5358:	0037      	movs	r7, r6
    535a:	4307      	orrs	r7, r0
    535c:	d0d0      	beq.n	5300 <__gedf2+0x2c>
    535e:	2002      	movs	r0, #2
    5360:	4240      	negs	r0, r0
    5362:	e7eb      	b.n	533c <__gedf2+0x68>
    5364:	465f      	mov	r7, fp
    5366:	4317      	orrs	r7, r2
    5368:	d0cd      	beq.n	5306 <__gedf2+0x32>
    536a:	e7f8      	b.n	535e <__gedf2+0x8a>
    536c:	42a5      	cmp	r5, r4
    536e:	dce2      	bgt.n	5336 <__gedf2+0x62>
    5370:	db05      	blt.n	537e <__gedf2+0xaa>
    5372:	455e      	cmp	r6, fp
    5374:	d8df      	bhi.n	5336 <__gedf2+0x62>
    5376:	d008      	beq.n	538a <__gedf2+0xb6>
    5378:	2000      	movs	r0, #0
    537a:	455e      	cmp	r6, fp
    537c:	d2de      	bcs.n	533c <__gedf2+0x68>
    537e:	4248      	negs	r0, r1
    5380:	4148      	adcs	r0, r1
    5382:	2301      	movs	r3, #1
    5384:	4240      	negs	r0, r0
    5386:	4318      	orrs	r0, r3
    5388:	e7d8      	b.n	533c <__gedf2+0x68>
    538a:	45c4      	cmp	ip, r8
    538c:	d8d3      	bhi.n	5336 <__gedf2+0x62>
    538e:	2000      	movs	r0, #0
    5390:	45c4      	cmp	ip, r8
    5392:	d3f4      	bcc.n	537e <__gedf2+0xaa>
    5394:	e7d2      	b.n	533c <__gedf2+0x68>
    5396:	46c0      	nop			; (mov r8, r8)
    5398:	000007ff 	.word	0x000007ff

0000539c <__ledf2>:
    539c:	b5f0      	push	{r4, r5, r6, r7, lr}
    539e:	465f      	mov	r7, fp
    53a0:	464d      	mov	r5, r9
    53a2:	4644      	mov	r4, r8
    53a4:	4656      	mov	r6, sl
    53a6:	b4f0      	push	{r4, r5, r6, r7}
    53a8:	031c      	lsls	r4, r3, #12
    53aa:	0b24      	lsrs	r4, r4, #12
    53ac:	46a4      	mov	ip, r4
    53ae:	4c2f      	ldr	r4, [pc, #188]	; (546c <__ledf2+0xd0>)
    53b0:	030f      	lsls	r7, r1, #12
    53b2:	004d      	lsls	r5, r1, #1
    53b4:	005e      	lsls	r6, r3, #1
    53b6:	0fc9      	lsrs	r1, r1, #31
    53b8:	4680      	mov	r8, r0
    53ba:	0b3f      	lsrs	r7, r7, #12
    53bc:	0d6d      	lsrs	r5, r5, #21
    53be:	468b      	mov	fp, r1
    53c0:	4691      	mov	r9, r2
    53c2:	0d76      	lsrs	r6, r6, #21
    53c4:	0fdb      	lsrs	r3, r3, #31
    53c6:	42a5      	cmp	r5, r4
    53c8:	d020      	beq.n	540c <__ledf2+0x70>
    53ca:	4c28      	ldr	r4, [pc, #160]	; (546c <__ledf2+0xd0>)
    53cc:	42a6      	cmp	r6, r4
    53ce:	d022      	beq.n	5416 <__ledf2+0x7a>
    53d0:	2d00      	cmp	r5, #0
    53d2:	d112      	bne.n	53fa <__ledf2+0x5e>
    53d4:	4338      	orrs	r0, r7
    53d6:	4244      	negs	r4, r0
    53d8:	4144      	adcs	r4, r0
    53da:	2e00      	cmp	r6, #0
    53dc:	d020      	beq.n	5420 <__ledf2+0x84>
    53de:	2c00      	cmp	r4, #0
    53e0:	d00d      	beq.n	53fe <__ledf2+0x62>
    53e2:	425c      	negs	r4, r3
    53e4:	4163      	adcs	r3, r4
    53e6:	2401      	movs	r4, #1
    53e8:	425b      	negs	r3, r3
    53ea:	431c      	orrs	r4, r3
    53ec:	0020      	movs	r0, r4
    53ee:	bc3c      	pop	{r2, r3, r4, r5}
    53f0:	4690      	mov	r8, r2
    53f2:	4699      	mov	r9, r3
    53f4:	46a2      	mov	sl, r4
    53f6:	46ab      	mov	fp, r5
    53f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53fa:	2e00      	cmp	r6, #0
    53fc:	d017      	beq.n	542e <__ledf2+0x92>
    53fe:	455b      	cmp	r3, fp
    5400:	d019      	beq.n	5436 <__ledf2+0x9a>
    5402:	465b      	mov	r3, fp
    5404:	425c      	negs	r4, r3
    5406:	2301      	movs	r3, #1
    5408:	431c      	orrs	r4, r3
    540a:	e7ef      	b.n	53ec <__ledf2+0x50>
    540c:	0039      	movs	r1, r7
    540e:	2402      	movs	r4, #2
    5410:	4301      	orrs	r1, r0
    5412:	d1eb      	bne.n	53ec <__ledf2+0x50>
    5414:	e7d9      	b.n	53ca <__ledf2+0x2e>
    5416:	4661      	mov	r1, ip
    5418:	2402      	movs	r4, #2
    541a:	4311      	orrs	r1, r2
    541c:	d1e6      	bne.n	53ec <__ledf2+0x50>
    541e:	e7d7      	b.n	53d0 <__ledf2+0x34>
    5420:	4661      	mov	r1, ip
    5422:	430a      	orrs	r2, r1
    5424:	d1db      	bne.n	53de <__ledf2+0x42>
    5426:	2400      	movs	r4, #0
    5428:	2800      	cmp	r0, #0
    542a:	d0df      	beq.n	53ec <__ledf2+0x50>
    542c:	e7e9      	b.n	5402 <__ledf2+0x66>
    542e:	4661      	mov	r1, ip
    5430:	430a      	orrs	r2, r1
    5432:	d1e4      	bne.n	53fe <__ledf2+0x62>
    5434:	e7e5      	b.n	5402 <__ledf2+0x66>
    5436:	42b5      	cmp	r5, r6
    5438:	dd03      	ble.n	5442 <__ledf2+0xa6>
    543a:	2201      	movs	r2, #1
    543c:	425c      	negs	r4, r3
    543e:	4314      	orrs	r4, r2
    5440:	e7d4      	b.n	53ec <__ledf2+0x50>
    5442:	42b5      	cmp	r5, r6
    5444:	dbcd      	blt.n	53e2 <__ledf2+0x46>
    5446:	4567      	cmp	r7, ip
    5448:	d8db      	bhi.n	5402 <__ledf2+0x66>
    544a:	d009      	beq.n	5460 <__ledf2+0xc4>
    544c:	2400      	movs	r4, #0
    544e:	4567      	cmp	r7, ip
    5450:	d2cc      	bcs.n	53ec <__ledf2+0x50>
    5452:	4659      	mov	r1, fp
    5454:	424c      	negs	r4, r1
    5456:	4161      	adcs	r1, r4
    5458:	2401      	movs	r4, #1
    545a:	4249      	negs	r1, r1
    545c:	430c      	orrs	r4, r1
    545e:	e7c5      	b.n	53ec <__ledf2+0x50>
    5460:	45c8      	cmp	r8, r9
    5462:	d8ce      	bhi.n	5402 <__ledf2+0x66>
    5464:	2400      	movs	r4, #0
    5466:	45c8      	cmp	r8, r9
    5468:	d3f3      	bcc.n	5452 <__ledf2+0xb6>
    546a:	e7bf      	b.n	53ec <__ledf2+0x50>
    546c:	000007ff 	.word	0x000007ff

00005470 <__aeabi_dmul>:
    5470:	b5f0      	push	{r4, r5, r6, r7, lr}
    5472:	465f      	mov	r7, fp
    5474:	4656      	mov	r6, sl
    5476:	464d      	mov	r5, r9
    5478:	4644      	mov	r4, r8
    547a:	b4f0      	push	{r4, r5, r6, r7}
    547c:	030d      	lsls	r5, r1, #12
    547e:	4699      	mov	r9, r3
    5480:	004e      	lsls	r6, r1, #1
    5482:	0b2b      	lsrs	r3, r5, #12
    5484:	b087      	sub	sp, #28
    5486:	0007      	movs	r7, r0
    5488:	4692      	mov	sl, r2
    548a:	4680      	mov	r8, r0
    548c:	469b      	mov	fp, r3
    548e:	0d76      	lsrs	r6, r6, #21
    5490:	0fcc      	lsrs	r4, r1, #31
    5492:	2e00      	cmp	r6, #0
    5494:	d069      	beq.n	556a <__aeabi_dmul+0xfa>
    5496:	4b6d      	ldr	r3, [pc, #436]	; (564c <__aeabi_dmul+0x1dc>)
    5498:	429e      	cmp	r6, r3
    549a:	d035      	beq.n	5508 <__aeabi_dmul+0x98>
    549c:	465b      	mov	r3, fp
    549e:	2280      	movs	r2, #128	; 0x80
    54a0:	00dd      	lsls	r5, r3, #3
    54a2:	0412      	lsls	r2, r2, #16
    54a4:	0f43      	lsrs	r3, r0, #29
    54a6:	4313      	orrs	r3, r2
    54a8:	432b      	orrs	r3, r5
    54aa:	469b      	mov	fp, r3
    54ac:	00c3      	lsls	r3, r0, #3
    54ae:	4698      	mov	r8, r3
    54b0:	4b67      	ldr	r3, [pc, #412]	; (5650 <__aeabi_dmul+0x1e0>)
    54b2:	2700      	movs	r7, #0
    54b4:	469c      	mov	ip, r3
    54b6:	2300      	movs	r3, #0
    54b8:	4466      	add	r6, ip
    54ba:	9301      	str	r3, [sp, #4]
    54bc:	464a      	mov	r2, r9
    54be:	0315      	lsls	r5, r2, #12
    54c0:	0050      	lsls	r0, r2, #1
    54c2:	0fd2      	lsrs	r2, r2, #31
    54c4:	4653      	mov	r3, sl
    54c6:	0b2d      	lsrs	r5, r5, #12
    54c8:	0d40      	lsrs	r0, r0, #21
    54ca:	4691      	mov	r9, r2
    54cc:	d100      	bne.n	54d0 <__aeabi_dmul+0x60>
    54ce:	e076      	b.n	55be <__aeabi_dmul+0x14e>
    54d0:	4a5e      	ldr	r2, [pc, #376]	; (564c <__aeabi_dmul+0x1dc>)
    54d2:	4290      	cmp	r0, r2
    54d4:	d06c      	beq.n	55b0 <__aeabi_dmul+0x140>
    54d6:	2280      	movs	r2, #128	; 0x80
    54d8:	0f5b      	lsrs	r3, r3, #29
    54da:	0412      	lsls	r2, r2, #16
    54dc:	4313      	orrs	r3, r2
    54de:	4a5c      	ldr	r2, [pc, #368]	; (5650 <__aeabi_dmul+0x1e0>)
    54e0:	00ed      	lsls	r5, r5, #3
    54e2:	4694      	mov	ip, r2
    54e4:	431d      	orrs	r5, r3
    54e6:	4653      	mov	r3, sl
    54e8:	2200      	movs	r2, #0
    54ea:	00db      	lsls	r3, r3, #3
    54ec:	4460      	add	r0, ip
    54ee:	4649      	mov	r1, r9
    54f0:	1836      	adds	r6, r6, r0
    54f2:	1c70      	adds	r0, r6, #1
    54f4:	4061      	eors	r1, r4
    54f6:	9002      	str	r0, [sp, #8]
    54f8:	4317      	orrs	r7, r2
    54fa:	2f0f      	cmp	r7, #15
    54fc:	d900      	bls.n	5500 <__aeabi_dmul+0x90>
    54fe:	e0af      	b.n	5660 <__aeabi_dmul+0x1f0>
    5500:	4854      	ldr	r0, [pc, #336]	; (5654 <__aeabi_dmul+0x1e4>)
    5502:	00bf      	lsls	r7, r7, #2
    5504:	59c7      	ldr	r7, [r0, r7]
    5506:	46bf      	mov	pc, r7
    5508:	465b      	mov	r3, fp
    550a:	431f      	orrs	r7, r3
    550c:	d000      	beq.n	5510 <__aeabi_dmul+0xa0>
    550e:	e088      	b.n	5622 <__aeabi_dmul+0x1b2>
    5510:	2300      	movs	r3, #0
    5512:	469b      	mov	fp, r3
    5514:	4698      	mov	r8, r3
    5516:	3302      	adds	r3, #2
    5518:	2708      	movs	r7, #8
    551a:	9301      	str	r3, [sp, #4]
    551c:	e7ce      	b.n	54bc <__aeabi_dmul+0x4c>
    551e:	4649      	mov	r1, r9
    5520:	2a02      	cmp	r2, #2
    5522:	d06a      	beq.n	55fa <__aeabi_dmul+0x18a>
    5524:	2a03      	cmp	r2, #3
    5526:	d100      	bne.n	552a <__aeabi_dmul+0xba>
    5528:	e209      	b.n	593e <__aeabi_dmul+0x4ce>
    552a:	2a01      	cmp	r2, #1
    552c:	d000      	beq.n	5530 <__aeabi_dmul+0xc0>
    552e:	e1bb      	b.n	58a8 <__aeabi_dmul+0x438>
    5530:	4011      	ands	r1, r2
    5532:	2200      	movs	r2, #0
    5534:	2300      	movs	r3, #0
    5536:	2500      	movs	r5, #0
    5538:	4690      	mov	r8, r2
    553a:	b2cc      	uxtb	r4, r1
    553c:	2100      	movs	r1, #0
    553e:	032d      	lsls	r5, r5, #12
    5540:	0d0a      	lsrs	r2, r1, #20
    5542:	0512      	lsls	r2, r2, #20
    5544:	0b2d      	lsrs	r5, r5, #12
    5546:	4315      	orrs	r5, r2
    5548:	4a43      	ldr	r2, [pc, #268]	; (5658 <__aeabi_dmul+0x1e8>)
    554a:	051b      	lsls	r3, r3, #20
    554c:	4015      	ands	r5, r2
    554e:	431d      	orrs	r5, r3
    5550:	006d      	lsls	r5, r5, #1
    5552:	07e4      	lsls	r4, r4, #31
    5554:	086d      	lsrs	r5, r5, #1
    5556:	4325      	orrs	r5, r4
    5558:	4640      	mov	r0, r8
    555a:	0029      	movs	r1, r5
    555c:	b007      	add	sp, #28
    555e:	bc3c      	pop	{r2, r3, r4, r5}
    5560:	4690      	mov	r8, r2
    5562:	4699      	mov	r9, r3
    5564:	46a2      	mov	sl, r4
    5566:	46ab      	mov	fp, r5
    5568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    556a:	4303      	orrs	r3, r0
    556c:	d052      	beq.n	5614 <__aeabi_dmul+0x1a4>
    556e:	465b      	mov	r3, fp
    5570:	2b00      	cmp	r3, #0
    5572:	d100      	bne.n	5576 <__aeabi_dmul+0x106>
    5574:	e18a      	b.n	588c <__aeabi_dmul+0x41c>
    5576:	4658      	mov	r0, fp
    5578:	f000 ff84 	bl	6484 <__clzsi2>
    557c:	0003      	movs	r3, r0
    557e:	3b0b      	subs	r3, #11
    5580:	2b1c      	cmp	r3, #28
    5582:	dd00      	ble.n	5586 <__aeabi_dmul+0x116>
    5584:	e17b      	b.n	587e <__aeabi_dmul+0x40e>
    5586:	221d      	movs	r2, #29
    5588:	1ad3      	subs	r3, r2, r3
    558a:	003a      	movs	r2, r7
    558c:	0001      	movs	r1, r0
    558e:	465d      	mov	r5, fp
    5590:	40da      	lsrs	r2, r3
    5592:	3908      	subs	r1, #8
    5594:	408d      	lsls	r5, r1
    5596:	0013      	movs	r3, r2
    5598:	408f      	lsls	r7, r1
    559a:	432b      	orrs	r3, r5
    559c:	469b      	mov	fp, r3
    559e:	46b8      	mov	r8, r7
    55a0:	4b2e      	ldr	r3, [pc, #184]	; (565c <__aeabi_dmul+0x1ec>)
    55a2:	2700      	movs	r7, #0
    55a4:	469c      	mov	ip, r3
    55a6:	2300      	movs	r3, #0
    55a8:	4460      	add	r0, ip
    55aa:	4246      	negs	r6, r0
    55ac:	9301      	str	r3, [sp, #4]
    55ae:	e785      	b.n	54bc <__aeabi_dmul+0x4c>
    55b0:	4652      	mov	r2, sl
    55b2:	432a      	orrs	r2, r5
    55b4:	d12c      	bne.n	5610 <__aeabi_dmul+0x1a0>
    55b6:	2500      	movs	r5, #0
    55b8:	2300      	movs	r3, #0
    55ba:	2202      	movs	r2, #2
    55bc:	e797      	b.n	54ee <__aeabi_dmul+0x7e>
    55be:	4652      	mov	r2, sl
    55c0:	432a      	orrs	r2, r5
    55c2:	d021      	beq.n	5608 <__aeabi_dmul+0x198>
    55c4:	2d00      	cmp	r5, #0
    55c6:	d100      	bne.n	55ca <__aeabi_dmul+0x15a>
    55c8:	e154      	b.n	5874 <__aeabi_dmul+0x404>
    55ca:	0028      	movs	r0, r5
    55cc:	f000 ff5a 	bl	6484 <__clzsi2>
    55d0:	0003      	movs	r3, r0
    55d2:	3b0b      	subs	r3, #11
    55d4:	2b1c      	cmp	r3, #28
    55d6:	dd00      	ble.n	55da <__aeabi_dmul+0x16a>
    55d8:	e146      	b.n	5868 <__aeabi_dmul+0x3f8>
    55da:	211d      	movs	r1, #29
    55dc:	1acb      	subs	r3, r1, r3
    55de:	4651      	mov	r1, sl
    55e0:	0002      	movs	r2, r0
    55e2:	40d9      	lsrs	r1, r3
    55e4:	4653      	mov	r3, sl
    55e6:	3a08      	subs	r2, #8
    55e8:	4095      	lsls	r5, r2
    55ea:	4093      	lsls	r3, r2
    55ec:	430d      	orrs	r5, r1
    55ee:	4a1b      	ldr	r2, [pc, #108]	; (565c <__aeabi_dmul+0x1ec>)
    55f0:	4694      	mov	ip, r2
    55f2:	4460      	add	r0, ip
    55f4:	4240      	negs	r0, r0
    55f6:	2200      	movs	r2, #0
    55f8:	e779      	b.n	54ee <__aeabi_dmul+0x7e>
    55fa:	2401      	movs	r4, #1
    55fc:	2200      	movs	r2, #0
    55fe:	400c      	ands	r4, r1
    5600:	4b12      	ldr	r3, [pc, #72]	; (564c <__aeabi_dmul+0x1dc>)
    5602:	2500      	movs	r5, #0
    5604:	4690      	mov	r8, r2
    5606:	e799      	b.n	553c <__aeabi_dmul+0xcc>
    5608:	2500      	movs	r5, #0
    560a:	2300      	movs	r3, #0
    560c:	2201      	movs	r2, #1
    560e:	e76e      	b.n	54ee <__aeabi_dmul+0x7e>
    5610:	2203      	movs	r2, #3
    5612:	e76c      	b.n	54ee <__aeabi_dmul+0x7e>
    5614:	2300      	movs	r3, #0
    5616:	469b      	mov	fp, r3
    5618:	4698      	mov	r8, r3
    561a:	3301      	adds	r3, #1
    561c:	2704      	movs	r7, #4
    561e:	9301      	str	r3, [sp, #4]
    5620:	e74c      	b.n	54bc <__aeabi_dmul+0x4c>
    5622:	2303      	movs	r3, #3
    5624:	270c      	movs	r7, #12
    5626:	9301      	str	r3, [sp, #4]
    5628:	e748      	b.n	54bc <__aeabi_dmul+0x4c>
    562a:	2300      	movs	r3, #0
    562c:	2580      	movs	r5, #128	; 0x80
    562e:	4698      	mov	r8, r3
    5630:	2400      	movs	r4, #0
    5632:	032d      	lsls	r5, r5, #12
    5634:	4b05      	ldr	r3, [pc, #20]	; (564c <__aeabi_dmul+0x1dc>)
    5636:	e781      	b.n	553c <__aeabi_dmul+0xcc>
    5638:	465d      	mov	r5, fp
    563a:	4643      	mov	r3, r8
    563c:	9a01      	ldr	r2, [sp, #4]
    563e:	e76f      	b.n	5520 <__aeabi_dmul+0xb0>
    5640:	465d      	mov	r5, fp
    5642:	4643      	mov	r3, r8
    5644:	0021      	movs	r1, r4
    5646:	9a01      	ldr	r2, [sp, #4]
    5648:	e76a      	b.n	5520 <__aeabi_dmul+0xb0>
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	000007ff 	.word	0x000007ff
    5650:	fffffc01 	.word	0xfffffc01
    5654:	000068d8 	.word	0x000068d8
    5658:	800fffff 	.word	0x800fffff
    565c:	000003f3 	.word	0x000003f3
    5660:	4642      	mov	r2, r8
    5662:	0c12      	lsrs	r2, r2, #16
    5664:	4691      	mov	r9, r2
    5666:	0c1a      	lsrs	r2, r3, #16
    5668:	4694      	mov	ip, r2
    566a:	4642      	mov	r2, r8
    566c:	0417      	lsls	r7, r2, #16
    566e:	464a      	mov	r2, r9
    5670:	041b      	lsls	r3, r3, #16
    5672:	0c1b      	lsrs	r3, r3, #16
    5674:	435a      	muls	r2, r3
    5676:	4660      	mov	r0, ip
    5678:	4690      	mov	r8, r2
    567a:	464a      	mov	r2, r9
    567c:	4342      	muls	r2, r0
    567e:	0010      	movs	r0, r2
    5680:	9203      	str	r2, [sp, #12]
    5682:	4662      	mov	r2, ip
    5684:	001c      	movs	r4, r3
    5686:	0c3f      	lsrs	r7, r7, #16
    5688:	437a      	muls	r2, r7
    568a:	437c      	muls	r4, r7
    568c:	4442      	add	r2, r8
    568e:	9201      	str	r2, [sp, #4]
    5690:	0c22      	lsrs	r2, r4, #16
    5692:	4692      	mov	sl, r2
    5694:	9a01      	ldr	r2, [sp, #4]
    5696:	4452      	add	r2, sl
    5698:	4590      	cmp	r8, r2
    569a:	d906      	bls.n	56aa <__aeabi_dmul+0x23a>
    569c:	4682      	mov	sl, r0
    569e:	2080      	movs	r0, #128	; 0x80
    56a0:	0240      	lsls	r0, r0, #9
    56a2:	4680      	mov	r8, r0
    56a4:	44c2      	add	sl, r8
    56a6:	4650      	mov	r0, sl
    56a8:	9003      	str	r0, [sp, #12]
    56aa:	0c10      	lsrs	r0, r2, #16
    56ac:	9004      	str	r0, [sp, #16]
    56ae:	4648      	mov	r0, r9
    56b0:	0424      	lsls	r4, r4, #16
    56b2:	0c24      	lsrs	r4, r4, #16
    56b4:	0412      	lsls	r2, r2, #16
    56b6:	1912      	adds	r2, r2, r4
    56b8:	9205      	str	r2, [sp, #20]
    56ba:	0c2a      	lsrs	r2, r5, #16
    56bc:	042d      	lsls	r5, r5, #16
    56be:	0c2d      	lsrs	r5, r5, #16
    56c0:	4368      	muls	r0, r5
    56c2:	002c      	movs	r4, r5
    56c4:	4682      	mov	sl, r0
    56c6:	4648      	mov	r0, r9
    56c8:	437c      	muls	r4, r7
    56ca:	4350      	muls	r0, r2
    56cc:	4681      	mov	r9, r0
    56ce:	0c20      	lsrs	r0, r4, #16
    56d0:	4680      	mov	r8, r0
    56d2:	4357      	muls	r7, r2
    56d4:	4457      	add	r7, sl
    56d6:	4447      	add	r7, r8
    56d8:	45ba      	cmp	sl, r7
    56da:	d903      	bls.n	56e4 <__aeabi_dmul+0x274>
    56dc:	2080      	movs	r0, #128	; 0x80
    56de:	0240      	lsls	r0, r0, #9
    56e0:	4680      	mov	r8, r0
    56e2:	44c1      	add	r9, r8
    56e4:	0c38      	lsrs	r0, r7, #16
    56e6:	043f      	lsls	r7, r7, #16
    56e8:	46b8      	mov	r8, r7
    56ea:	4448      	add	r0, r9
    56ec:	0424      	lsls	r4, r4, #16
    56ee:	0c24      	lsrs	r4, r4, #16
    56f0:	9001      	str	r0, [sp, #4]
    56f2:	9804      	ldr	r0, [sp, #16]
    56f4:	44a0      	add	r8, r4
    56f6:	4440      	add	r0, r8
    56f8:	9004      	str	r0, [sp, #16]
    56fa:	4658      	mov	r0, fp
    56fc:	0c00      	lsrs	r0, r0, #16
    56fe:	4681      	mov	r9, r0
    5700:	4658      	mov	r0, fp
    5702:	0404      	lsls	r4, r0, #16
    5704:	0c20      	lsrs	r0, r4, #16
    5706:	4682      	mov	sl, r0
    5708:	0007      	movs	r7, r0
    570a:	4648      	mov	r0, r9
    570c:	435f      	muls	r7, r3
    570e:	464c      	mov	r4, r9
    5710:	4343      	muls	r3, r0
    5712:	4660      	mov	r0, ip
    5714:	4360      	muls	r0, r4
    5716:	4664      	mov	r4, ip
    5718:	4683      	mov	fp, r0
    571a:	4650      	mov	r0, sl
    571c:	4344      	muls	r4, r0
    571e:	0c38      	lsrs	r0, r7, #16
    5720:	4684      	mov	ip, r0
    5722:	18e4      	adds	r4, r4, r3
    5724:	4464      	add	r4, ip
    5726:	42a3      	cmp	r3, r4
    5728:	d903      	bls.n	5732 <__aeabi_dmul+0x2c2>
    572a:	2380      	movs	r3, #128	; 0x80
    572c:	025b      	lsls	r3, r3, #9
    572e:	469c      	mov	ip, r3
    5730:	44e3      	add	fp, ip
    5732:	4648      	mov	r0, r9
    5734:	043f      	lsls	r7, r7, #16
    5736:	0c23      	lsrs	r3, r4, #16
    5738:	0c3f      	lsrs	r7, r7, #16
    573a:	0424      	lsls	r4, r4, #16
    573c:	19e4      	adds	r4, r4, r7
    573e:	4657      	mov	r7, sl
    5740:	4368      	muls	r0, r5
    5742:	436f      	muls	r7, r5
    5744:	4684      	mov	ip, r0
    5746:	464d      	mov	r5, r9
    5748:	4650      	mov	r0, sl
    574a:	4355      	muls	r5, r2
    574c:	4342      	muls	r2, r0
    574e:	0c38      	lsrs	r0, r7, #16
    5750:	4681      	mov	r9, r0
    5752:	4462      	add	r2, ip
    5754:	444a      	add	r2, r9
    5756:	445b      	add	r3, fp
    5758:	4594      	cmp	ip, r2
    575a:	d903      	bls.n	5764 <__aeabi_dmul+0x2f4>
    575c:	2080      	movs	r0, #128	; 0x80
    575e:	0240      	lsls	r0, r0, #9
    5760:	4684      	mov	ip, r0
    5762:	4465      	add	r5, ip
    5764:	9803      	ldr	r0, [sp, #12]
    5766:	043f      	lsls	r7, r7, #16
    5768:	4683      	mov	fp, r0
    576a:	9804      	ldr	r0, [sp, #16]
    576c:	0c3f      	lsrs	r7, r7, #16
    576e:	4684      	mov	ip, r0
    5770:	44e3      	add	fp, ip
    5772:	45c3      	cmp	fp, r8
    5774:	4180      	sbcs	r0, r0
    5776:	4240      	negs	r0, r0
    5778:	4682      	mov	sl, r0
    577a:	0410      	lsls	r0, r2, #16
    577c:	4684      	mov	ip, r0
    577e:	9801      	ldr	r0, [sp, #4]
    5780:	4467      	add	r7, ip
    5782:	4684      	mov	ip, r0
    5784:	4467      	add	r7, ip
    5786:	44a3      	add	fp, r4
    5788:	46bc      	mov	ip, r7
    578a:	45a3      	cmp	fp, r4
    578c:	41a4      	sbcs	r4, r4
    578e:	4699      	mov	r9, r3
    5790:	44d4      	add	ip, sl
    5792:	4264      	negs	r4, r4
    5794:	4287      	cmp	r7, r0
    5796:	41bf      	sbcs	r7, r7
    5798:	45d4      	cmp	ip, sl
    579a:	4180      	sbcs	r0, r0
    579c:	44e1      	add	r9, ip
    579e:	46a0      	mov	r8, r4
    57a0:	4599      	cmp	r9, r3
    57a2:	419b      	sbcs	r3, r3
    57a4:	427f      	negs	r7, r7
    57a6:	4240      	negs	r0, r0
    57a8:	44c8      	add	r8, r9
    57aa:	4307      	orrs	r7, r0
    57ac:	0c12      	lsrs	r2, r2, #16
    57ae:	18ba      	adds	r2, r7, r2
    57b0:	45a0      	cmp	r8, r4
    57b2:	41a4      	sbcs	r4, r4
    57b4:	425f      	negs	r7, r3
    57b6:	003b      	movs	r3, r7
    57b8:	4264      	negs	r4, r4
    57ba:	4323      	orrs	r3, r4
    57bc:	18d7      	adds	r7, r2, r3
    57be:	4643      	mov	r3, r8
    57c0:	197d      	adds	r5, r7, r5
    57c2:	0ddb      	lsrs	r3, r3, #23
    57c4:	026d      	lsls	r5, r5, #9
    57c6:	431d      	orrs	r5, r3
    57c8:	465b      	mov	r3, fp
    57ca:	025a      	lsls	r2, r3, #9
    57cc:	9b05      	ldr	r3, [sp, #20]
    57ce:	431a      	orrs	r2, r3
    57d0:	1e53      	subs	r3, r2, #1
    57d2:	419a      	sbcs	r2, r3
    57d4:	465b      	mov	r3, fp
    57d6:	0ddb      	lsrs	r3, r3, #23
    57d8:	431a      	orrs	r2, r3
    57da:	4643      	mov	r3, r8
    57dc:	025b      	lsls	r3, r3, #9
    57de:	4313      	orrs	r3, r2
    57e0:	01ea      	lsls	r2, r5, #7
    57e2:	d507      	bpl.n	57f4 <__aeabi_dmul+0x384>
    57e4:	2201      	movs	r2, #1
    57e6:	085c      	lsrs	r4, r3, #1
    57e8:	4013      	ands	r3, r2
    57ea:	4323      	orrs	r3, r4
    57ec:	07ea      	lsls	r2, r5, #31
    57ee:	9e02      	ldr	r6, [sp, #8]
    57f0:	4313      	orrs	r3, r2
    57f2:	086d      	lsrs	r5, r5, #1
    57f4:	4a57      	ldr	r2, [pc, #348]	; (5954 <__aeabi_dmul+0x4e4>)
    57f6:	18b2      	adds	r2, r6, r2
    57f8:	2a00      	cmp	r2, #0
    57fa:	dd4b      	ble.n	5894 <__aeabi_dmul+0x424>
    57fc:	0758      	lsls	r0, r3, #29
    57fe:	d009      	beq.n	5814 <__aeabi_dmul+0x3a4>
    5800:	200f      	movs	r0, #15
    5802:	4018      	ands	r0, r3
    5804:	2804      	cmp	r0, #4
    5806:	d005      	beq.n	5814 <__aeabi_dmul+0x3a4>
    5808:	1d18      	adds	r0, r3, #4
    580a:	4298      	cmp	r0, r3
    580c:	419b      	sbcs	r3, r3
    580e:	425b      	negs	r3, r3
    5810:	18ed      	adds	r5, r5, r3
    5812:	0003      	movs	r3, r0
    5814:	01e8      	lsls	r0, r5, #7
    5816:	d504      	bpl.n	5822 <__aeabi_dmul+0x3b2>
    5818:	4a4f      	ldr	r2, [pc, #316]	; (5958 <__aeabi_dmul+0x4e8>)
    581a:	4015      	ands	r5, r2
    581c:	2280      	movs	r2, #128	; 0x80
    581e:	00d2      	lsls	r2, r2, #3
    5820:	18b2      	adds	r2, r6, r2
    5822:	484e      	ldr	r0, [pc, #312]	; (595c <__aeabi_dmul+0x4ec>)
    5824:	4282      	cmp	r2, r0
    5826:	dd00      	ble.n	582a <__aeabi_dmul+0x3ba>
    5828:	e6e7      	b.n	55fa <__aeabi_dmul+0x18a>
    582a:	2401      	movs	r4, #1
    582c:	08db      	lsrs	r3, r3, #3
    582e:	0768      	lsls	r0, r5, #29
    5830:	4318      	orrs	r0, r3
    5832:	026d      	lsls	r5, r5, #9
    5834:	0553      	lsls	r3, r2, #21
    5836:	4680      	mov	r8, r0
    5838:	0b2d      	lsrs	r5, r5, #12
    583a:	0d5b      	lsrs	r3, r3, #21
    583c:	400c      	ands	r4, r1
    583e:	e67d      	b.n	553c <__aeabi_dmul+0xcc>
    5840:	2280      	movs	r2, #128	; 0x80
    5842:	4659      	mov	r1, fp
    5844:	0312      	lsls	r2, r2, #12
    5846:	4211      	tst	r1, r2
    5848:	d008      	beq.n	585c <__aeabi_dmul+0x3ec>
    584a:	4215      	tst	r5, r2
    584c:	d106      	bne.n	585c <__aeabi_dmul+0x3ec>
    584e:	4315      	orrs	r5, r2
    5850:	032d      	lsls	r5, r5, #12
    5852:	4698      	mov	r8, r3
    5854:	0b2d      	lsrs	r5, r5, #12
    5856:	464c      	mov	r4, r9
    5858:	4b41      	ldr	r3, [pc, #260]	; (5960 <__aeabi_dmul+0x4f0>)
    585a:	e66f      	b.n	553c <__aeabi_dmul+0xcc>
    585c:	465d      	mov	r5, fp
    585e:	4315      	orrs	r5, r2
    5860:	032d      	lsls	r5, r5, #12
    5862:	0b2d      	lsrs	r5, r5, #12
    5864:	4b3e      	ldr	r3, [pc, #248]	; (5960 <__aeabi_dmul+0x4f0>)
    5866:	e669      	b.n	553c <__aeabi_dmul+0xcc>
    5868:	0003      	movs	r3, r0
    586a:	4655      	mov	r5, sl
    586c:	3b28      	subs	r3, #40	; 0x28
    586e:	409d      	lsls	r5, r3
    5870:	2300      	movs	r3, #0
    5872:	e6bc      	b.n	55ee <__aeabi_dmul+0x17e>
    5874:	4650      	mov	r0, sl
    5876:	f000 fe05 	bl	6484 <__clzsi2>
    587a:	3020      	adds	r0, #32
    587c:	e6a8      	b.n	55d0 <__aeabi_dmul+0x160>
    587e:	0003      	movs	r3, r0
    5880:	3b28      	subs	r3, #40	; 0x28
    5882:	409f      	lsls	r7, r3
    5884:	2300      	movs	r3, #0
    5886:	46bb      	mov	fp, r7
    5888:	4698      	mov	r8, r3
    588a:	e689      	b.n	55a0 <__aeabi_dmul+0x130>
    588c:	f000 fdfa 	bl	6484 <__clzsi2>
    5890:	3020      	adds	r0, #32
    5892:	e673      	b.n	557c <__aeabi_dmul+0x10c>
    5894:	2401      	movs	r4, #1
    5896:	1aa6      	subs	r6, r4, r2
    5898:	2e38      	cmp	r6, #56	; 0x38
    589a:	dd07      	ble.n	58ac <__aeabi_dmul+0x43c>
    589c:	2200      	movs	r2, #0
    589e:	400c      	ands	r4, r1
    58a0:	2300      	movs	r3, #0
    58a2:	2500      	movs	r5, #0
    58a4:	4690      	mov	r8, r2
    58a6:	e649      	b.n	553c <__aeabi_dmul+0xcc>
    58a8:	9e02      	ldr	r6, [sp, #8]
    58aa:	e7a3      	b.n	57f4 <__aeabi_dmul+0x384>
    58ac:	2e1f      	cmp	r6, #31
    58ae:	dc20      	bgt.n	58f2 <__aeabi_dmul+0x482>
    58b0:	2220      	movs	r2, #32
    58b2:	002c      	movs	r4, r5
    58b4:	0018      	movs	r0, r3
    58b6:	1b92      	subs	r2, r2, r6
    58b8:	40f0      	lsrs	r0, r6
    58ba:	4094      	lsls	r4, r2
    58bc:	4093      	lsls	r3, r2
    58be:	4304      	orrs	r4, r0
    58c0:	1e58      	subs	r0, r3, #1
    58c2:	4183      	sbcs	r3, r0
    58c4:	431c      	orrs	r4, r3
    58c6:	40f5      	lsrs	r5, r6
    58c8:	0763      	lsls	r3, r4, #29
    58ca:	d009      	beq.n	58e0 <__aeabi_dmul+0x470>
    58cc:	230f      	movs	r3, #15
    58ce:	4023      	ands	r3, r4
    58d0:	2b04      	cmp	r3, #4
    58d2:	d005      	beq.n	58e0 <__aeabi_dmul+0x470>
    58d4:	0023      	movs	r3, r4
    58d6:	1d1c      	adds	r4, r3, #4
    58d8:	429c      	cmp	r4, r3
    58da:	4192      	sbcs	r2, r2
    58dc:	4252      	negs	r2, r2
    58de:	18ad      	adds	r5, r5, r2
    58e0:	022b      	lsls	r3, r5, #8
    58e2:	d51f      	bpl.n	5924 <__aeabi_dmul+0x4b4>
    58e4:	2401      	movs	r4, #1
    58e6:	2200      	movs	r2, #0
    58e8:	400c      	ands	r4, r1
    58ea:	2301      	movs	r3, #1
    58ec:	2500      	movs	r5, #0
    58ee:	4690      	mov	r8, r2
    58f0:	e624      	b.n	553c <__aeabi_dmul+0xcc>
    58f2:	201f      	movs	r0, #31
    58f4:	002c      	movs	r4, r5
    58f6:	4240      	negs	r0, r0
    58f8:	1a82      	subs	r2, r0, r2
    58fa:	40d4      	lsrs	r4, r2
    58fc:	2e20      	cmp	r6, #32
    58fe:	d01c      	beq.n	593a <__aeabi_dmul+0x4ca>
    5900:	2240      	movs	r2, #64	; 0x40
    5902:	1b96      	subs	r6, r2, r6
    5904:	40b5      	lsls	r5, r6
    5906:	432b      	orrs	r3, r5
    5908:	1e58      	subs	r0, r3, #1
    590a:	4183      	sbcs	r3, r0
    590c:	2007      	movs	r0, #7
    590e:	4323      	orrs	r3, r4
    5910:	4018      	ands	r0, r3
    5912:	2500      	movs	r5, #0
    5914:	2800      	cmp	r0, #0
    5916:	d009      	beq.n	592c <__aeabi_dmul+0x4bc>
    5918:	220f      	movs	r2, #15
    591a:	2500      	movs	r5, #0
    591c:	401a      	ands	r2, r3
    591e:	001c      	movs	r4, r3
    5920:	2a04      	cmp	r2, #4
    5922:	d1d8      	bne.n	58d6 <__aeabi_dmul+0x466>
    5924:	0023      	movs	r3, r4
    5926:	0768      	lsls	r0, r5, #29
    5928:	026d      	lsls	r5, r5, #9
    592a:	0b2d      	lsrs	r5, r5, #12
    592c:	2401      	movs	r4, #1
    592e:	08db      	lsrs	r3, r3, #3
    5930:	4303      	orrs	r3, r0
    5932:	4698      	mov	r8, r3
    5934:	400c      	ands	r4, r1
    5936:	2300      	movs	r3, #0
    5938:	e600      	b.n	553c <__aeabi_dmul+0xcc>
    593a:	2500      	movs	r5, #0
    593c:	e7e3      	b.n	5906 <__aeabi_dmul+0x496>
    593e:	2280      	movs	r2, #128	; 0x80
    5940:	2401      	movs	r4, #1
    5942:	0312      	lsls	r2, r2, #12
    5944:	4315      	orrs	r5, r2
    5946:	032d      	lsls	r5, r5, #12
    5948:	4698      	mov	r8, r3
    594a:	0b2d      	lsrs	r5, r5, #12
    594c:	400c      	ands	r4, r1
    594e:	4b04      	ldr	r3, [pc, #16]	; (5960 <__aeabi_dmul+0x4f0>)
    5950:	e5f4      	b.n	553c <__aeabi_dmul+0xcc>
    5952:	46c0      	nop			; (mov r8, r8)
    5954:	000003ff 	.word	0x000003ff
    5958:	feffffff 	.word	0xfeffffff
    595c:	000007fe 	.word	0x000007fe
    5960:	000007ff 	.word	0x000007ff

00005964 <__aeabi_dsub>:
    5964:	b5f0      	push	{r4, r5, r6, r7, lr}
    5966:	4657      	mov	r7, sl
    5968:	464e      	mov	r6, r9
    596a:	4645      	mov	r5, r8
    596c:	b4e0      	push	{r5, r6, r7}
    596e:	000e      	movs	r6, r1
    5970:	0011      	movs	r1, r2
    5972:	0ff2      	lsrs	r2, r6, #31
    5974:	4692      	mov	sl, r2
    5976:	00c5      	lsls	r5, r0, #3
    5978:	0f42      	lsrs	r2, r0, #29
    597a:	0318      	lsls	r0, r3, #12
    597c:	0337      	lsls	r7, r6, #12
    597e:	0074      	lsls	r4, r6, #1
    5980:	0a40      	lsrs	r0, r0, #9
    5982:	0f4e      	lsrs	r6, r1, #29
    5984:	0a7f      	lsrs	r7, r7, #9
    5986:	4330      	orrs	r0, r6
    5988:	4ecf      	ldr	r6, [pc, #828]	; (5cc8 <__aeabi_dsub+0x364>)
    598a:	4317      	orrs	r7, r2
    598c:	005a      	lsls	r2, r3, #1
    598e:	0d64      	lsrs	r4, r4, #21
    5990:	0d52      	lsrs	r2, r2, #21
    5992:	0fdb      	lsrs	r3, r3, #31
    5994:	00c9      	lsls	r1, r1, #3
    5996:	42b2      	cmp	r2, r6
    5998:	d100      	bne.n	599c <__aeabi_dsub+0x38>
    599a:	e0e5      	b.n	5b68 <__aeabi_dsub+0x204>
    599c:	2601      	movs	r6, #1
    599e:	4073      	eors	r3, r6
    59a0:	1aa6      	subs	r6, r4, r2
    59a2:	46b4      	mov	ip, r6
    59a4:	4553      	cmp	r3, sl
    59a6:	d100      	bne.n	59aa <__aeabi_dsub+0x46>
    59a8:	e0af      	b.n	5b0a <__aeabi_dsub+0x1a6>
    59aa:	2e00      	cmp	r6, #0
    59ac:	dc00      	bgt.n	59b0 <__aeabi_dsub+0x4c>
    59ae:	e10d      	b.n	5bcc <__aeabi_dsub+0x268>
    59b0:	2a00      	cmp	r2, #0
    59b2:	d13a      	bne.n	5a2a <__aeabi_dsub+0xc6>
    59b4:	0003      	movs	r3, r0
    59b6:	430b      	orrs	r3, r1
    59b8:	d000      	beq.n	59bc <__aeabi_dsub+0x58>
    59ba:	e0e4      	b.n	5b86 <__aeabi_dsub+0x222>
    59bc:	076b      	lsls	r3, r5, #29
    59be:	d009      	beq.n	59d4 <__aeabi_dsub+0x70>
    59c0:	230f      	movs	r3, #15
    59c2:	402b      	ands	r3, r5
    59c4:	2b04      	cmp	r3, #4
    59c6:	d005      	beq.n	59d4 <__aeabi_dsub+0x70>
    59c8:	1d2b      	adds	r3, r5, #4
    59ca:	42ab      	cmp	r3, r5
    59cc:	41ad      	sbcs	r5, r5
    59ce:	426d      	negs	r5, r5
    59d0:	197f      	adds	r7, r7, r5
    59d2:	001d      	movs	r5, r3
    59d4:	023b      	lsls	r3, r7, #8
    59d6:	d400      	bmi.n	59da <__aeabi_dsub+0x76>
    59d8:	e088      	b.n	5aec <__aeabi_dsub+0x188>
    59da:	4bbb      	ldr	r3, [pc, #748]	; (5cc8 <__aeabi_dsub+0x364>)
    59dc:	3401      	adds	r4, #1
    59de:	429c      	cmp	r4, r3
    59e0:	d100      	bne.n	59e4 <__aeabi_dsub+0x80>
    59e2:	e110      	b.n	5c06 <__aeabi_dsub+0x2a2>
    59e4:	003a      	movs	r2, r7
    59e6:	4bb9      	ldr	r3, [pc, #740]	; (5ccc <__aeabi_dsub+0x368>)
    59e8:	4651      	mov	r1, sl
    59ea:	401a      	ands	r2, r3
    59ec:	2301      	movs	r3, #1
    59ee:	0750      	lsls	r0, r2, #29
    59f0:	08ed      	lsrs	r5, r5, #3
    59f2:	0252      	lsls	r2, r2, #9
    59f4:	0564      	lsls	r4, r4, #21
    59f6:	4305      	orrs	r5, r0
    59f8:	0b12      	lsrs	r2, r2, #12
    59fa:	0d64      	lsrs	r4, r4, #21
    59fc:	400b      	ands	r3, r1
    59fe:	2100      	movs	r1, #0
    5a00:	0028      	movs	r0, r5
    5a02:	0312      	lsls	r2, r2, #12
    5a04:	0d0d      	lsrs	r5, r1, #20
    5a06:	0b12      	lsrs	r2, r2, #12
    5a08:	0564      	lsls	r4, r4, #21
    5a0a:	052d      	lsls	r5, r5, #20
    5a0c:	4315      	orrs	r5, r2
    5a0e:	0862      	lsrs	r2, r4, #1
    5a10:	4caf      	ldr	r4, [pc, #700]	; (5cd0 <__aeabi_dsub+0x36c>)
    5a12:	07db      	lsls	r3, r3, #31
    5a14:	402c      	ands	r4, r5
    5a16:	4314      	orrs	r4, r2
    5a18:	0064      	lsls	r4, r4, #1
    5a1a:	0864      	lsrs	r4, r4, #1
    5a1c:	431c      	orrs	r4, r3
    5a1e:	0021      	movs	r1, r4
    5a20:	bc1c      	pop	{r2, r3, r4}
    5a22:	4690      	mov	r8, r2
    5a24:	4699      	mov	r9, r3
    5a26:	46a2      	mov	sl, r4
    5a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a2a:	4ba7      	ldr	r3, [pc, #668]	; (5cc8 <__aeabi_dsub+0x364>)
    5a2c:	429c      	cmp	r4, r3
    5a2e:	d0c5      	beq.n	59bc <__aeabi_dsub+0x58>
    5a30:	2380      	movs	r3, #128	; 0x80
    5a32:	041b      	lsls	r3, r3, #16
    5a34:	4318      	orrs	r0, r3
    5a36:	4663      	mov	r3, ip
    5a38:	2b38      	cmp	r3, #56	; 0x38
    5a3a:	dd00      	ble.n	5a3e <__aeabi_dsub+0xda>
    5a3c:	e0fd      	b.n	5c3a <__aeabi_dsub+0x2d6>
    5a3e:	2b1f      	cmp	r3, #31
    5a40:	dd00      	ble.n	5a44 <__aeabi_dsub+0xe0>
    5a42:	e130      	b.n	5ca6 <__aeabi_dsub+0x342>
    5a44:	4662      	mov	r2, ip
    5a46:	2320      	movs	r3, #32
    5a48:	1a9b      	subs	r3, r3, r2
    5a4a:	0002      	movs	r2, r0
    5a4c:	409a      	lsls	r2, r3
    5a4e:	4666      	mov	r6, ip
    5a50:	4690      	mov	r8, r2
    5a52:	000a      	movs	r2, r1
    5a54:	4099      	lsls	r1, r3
    5a56:	40f2      	lsrs	r2, r6
    5a58:	4646      	mov	r6, r8
    5a5a:	1e4b      	subs	r3, r1, #1
    5a5c:	4199      	sbcs	r1, r3
    5a5e:	4332      	orrs	r2, r6
    5a60:	4311      	orrs	r1, r2
    5a62:	4663      	mov	r3, ip
    5a64:	0002      	movs	r2, r0
    5a66:	40da      	lsrs	r2, r3
    5a68:	1a69      	subs	r1, r5, r1
    5a6a:	428d      	cmp	r5, r1
    5a6c:	419b      	sbcs	r3, r3
    5a6e:	000d      	movs	r5, r1
    5a70:	1aba      	subs	r2, r7, r2
    5a72:	425b      	negs	r3, r3
    5a74:	1ad7      	subs	r7, r2, r3
    5a76:	023b      	lsls	r3, r7, #8
    5a78:	d535      	bpl.n	5ae6 <__aeabi_dsub+0x182>
    5a7a:	027a      	lsls	r2, r7, #9
    5a7c:	0a53      	lsrs	r3, r2, #9
    5a7e:	4698      	mov	r8, r3
    5a80:	4643      	mov	r3, r8
    5a82:	2b00      	cmp	r3, #0
    5a84:	d100      	bne.n	5a88 <__aeabi_dsub+0x124>
    5a86:	e0c4      	b.n	5c12 <__aeabi_dsub+0x2ae>
    5a88:	4640      	mov	r0, r8
    5a8a:	f000 fcfb 	bl	6484 <__clzsi2>
    5a8e:	0003      	movs	r3, r0
    5a90:	3b08      	subs	r3, #8
    5a92:	2b1f      	cmp	r3, #31
    5a94:	dd00      	ble.n	5a98 <__aeabi_dsub+0x134>
    5a96:	e0c5      	b.n	5c24 <__aeabi_dsub+0x2c0>
    5a98:	2220      	movs	r2, #32
    5a9a:	0029      	movs	r1, r5
    5a9c:	1ad2      	subs	r2, r2, r3
    5a9e:	4647      	mov	r7, r8
    5aa0:	40d1      	lsrs	r1, r2
    5aa2:	409f      	lsls	r7, r3
    5aa4:	000a      	movs	r2, r1
    5aa6:	409d      	lsls	r5, r3
    5aa8:	433a      	orrs	r2, r7
    5aaa:	429c      	cmp	r4, r3
    5aac:	dd00      	ble.n	5ab0 <__aeabi_dsub+0x14c>
    5aae:	e0c0      	b.n	5c32 <__aeabi_dsub+0x2ce>
    5ab0:	1b1c      	subs	r4, r3, r4
    5ab2:	1c63      	adds	r3, r4, #1
    5ab4:	2b1f      	cmp	r3, #31
    5ab6:	dd00      	ble.n	5aba <__aeabi_dsub+0x156>
    5ab8:	e0e4      	b.n	5c84 <__aeabi_dsub+0x320>
    5aba:	2120      	movs	r1, #32
    5abc:	0014      	movs	r4, r2
    5abe:	0028      	movs	r0, r5
    5ac0:	1ac9      	subs	r1, r1, r3
    5ac2:	40d8      	lsrs	r0, r3
    5ac4:	408c      	lsls	r4, r1
    5ac6:	408d      	lsls	r5, r1
    5ac8:	4304      	orrs	r4, r0
    5aca:	40da      	lsrs	r2, r3
    5acc:	1e68      	subs	r0, r5, #1
    5ace:	4185      	sbcs	r5, r0
    5ad0:	0017      	movs	r7, r2
    5ad2:	4325      	orrs	r5, r4
    5ad4:	2400      	movs	r4, #0
    5ad6:	e771      	b.n	59bc <__aeabi_dsub+0x58>
    5ad8:	4642      	mov	r2, r8
    5ada:	4663      	mov	r3, ip
    5adc:	431a      	orrs	r2, r3
    5ade:	d100      	bne.n	5ae2 <__aeabi_dsub+0x17e>
    5ae0:	e24c      	b.n	5f7c <__aeabi_dsub+0x618>
    5ae2:	4667      	mov	r7, ip
    5ae4:	4645      	mov	r5, r8
    5ae6:	076b      	lsls	r3, r5, #29
    5ae8:	d000      	beq.n	5aec <__aeabi_dsub+0x188>
    5aea:	e769      	b.n	59c0 <__aeabi_dsub+0x5c>
    5aec:	2301      	movs	r3, #1
    5aee:	4651      	mov	r1, sl
    5af0:	0778      	lsls	r0, r7, #29
    5af2:	08ed      	lsrs	r5, r5, #3
    5af4:	08fa      	lsrs	r2, r7, #3
    5af6:	400b      	ands	r3, r1
    5af8:	4305      	orrs	r5, r0
    5afa:	4973      	ldr	r1, [pc, #460]	; (5cc8 <__aeabi_dsub+0x364>)
    5afc:	428c      	cmp	r4, r1
    5afe:	d038      	beq.n	5b72 <__aeabi_dsub+0x20e>
    5b00:	0312      	lsls	r2, r2, #12
    5b02:	0564      	lsls	r4, r4, #21
    5b04:	0b12      	lsrs	r2, r2, #12
    5b06:	0d64      	lsrs	r4, r4, #21
    5b08:	e779      	b.n	59fe <__aeabi_dsub+0x9a>
    5b0a:	2e00      	cmp	r6, #0
    5b0c:	dc00      	bgt.n	5b10 <__aeabi_dsub+0x1ac>
    5b0e:	e09a      	b.n	5c46 <__aeabi_dsub+0x2e2>
    5b10:	2a00      	cmp	r2, #0
    5b12:	d047      	beq.n	5ba4 <__aeabi_dsub+0x240>
    5b14:	4a6c      	ldr	r2, [pc, #432]	; (5cc8 <__aeabi_dsub+0x364>)
    5b16:	4294      	cmp	r4, r2
    5b18:	d100      	bne.n	5b1c <__aeabi_dsub+0x1b8>
    5b1a:	e74f      	b.n	59bc <__aeabi_dsub+0x58>
    5b1c:	2280      	movs	r2, #128	; 0x80
    5b1e:	0412      	lsls	r2, r2, #16
    5b20:	4310      	orrs	r0, r2
    5b22:	4662      	mov	r2, ip
    5b24:	2a38      	cmp	r2, #56	; 0x38
    5b26:	dc00      	bgt.n	5b2a <__aeabi_dsub+0x1c6>
    5b28:	e108      	b.n	5d3c <__aeabi_dsub+0x3d8>
    5b2a:	4301      	orrs	r1, r0
    5b2c:	1e48      	subs	r0, r1, #1
    5b2e:	4181      	sbcs	r1, r0
    5b30:	2200      	movs	r2, #0
    5b32:	b2c9      	uxtb	r1, r1
    5b34:	1949      	adds	r1, r1, r5
    5b36:	19d2      	adds	r2, r2, r7
    5b38:	42a9      	cmp	r1, r5
    5b3a:	41bf      	sbcs	r7, r7
    5b3c:	000d      	movs	r5, r1
    5b3e:	427f      	negs	r7, r7
    5b40:	18bf      	adds	r7, r7, r2
    5b42:	023a      	lsls	r2, r7, #8
    5b44:	d400      	bmi.n	5b48 <__aeabi_dsub+0x1e4>
    5b46:	e142      	b.n	5dce <__aeabi_dsub+0x46a>
    5b48:	4a5f      	ldr	r2, [pc, #380]	; (5cc8 <__aeabi_dsub+0x364>)
    5b4a:	3401      	adds	r4, #1
    5b4c:	4294      	cmp	r4, r2
    5b4e:	d100      	bne.n	5b52 <__aeabi_dsub+0x1ee>
    5b50:	e14e      	b.n	5df0 <__aeabi_dsub+0x48c>
    5b52:	2001      	movs	r0, #1
    5b54:	4a5d      	ldr	r2, [pc, #372]	; (5ccc <__aeabi_dsub+0x368>)
    5b56:	0869      	lsrs	r1, r5, #1
    5b58:	403a      	ands	r2, r7
    5b5a:	4028      	ands	r0, r5
    5b5c:	4308      	orrs	r0, r1
    5b5e:	07d5      	lsls	r5, r2, #31
    5b60:	4305      	orrs	r5, r0
    5b62:	0857      	lsrs	r7, r2, #1
    5b64:	469a      	mov	sl, r3
    5b66:	e729      	b.n	59bc <__aeabi_dsub+0x58>
    5b68:	0006      	movs	r6, r0
    5b6a:	430e      	orrs	r6, r1
    5b6c:	d000      	beq.n	5b70 <__aeabi_dsub+0x20c>
    5b6e:	e717      	b.n	59a0 <__aeabi_dsub+0x3c>
    5b70:	e714      	b.n	599c <__aeabi_dsub+0x38>
    5b72:	0029      	movs	r1, r5
    5b74:	4311      	orrs	r1, r2
    5b76:	d100      	bne.n	5b7a <__aeabi_dsub+0x216>
    5b78:	e1f9      	b.n	5f6e <__aeabi_dsub+0x60a>
    5b7a:	2180      	movs	r1, #128	; 0x80
    5b7c:	0309      	lsls	r1, r1, #12
    5b7e:	430a      	orrs	r2, r1
    5b80:	0312      	lsls	r2, r2, #12
    5b82:	0b12      	lsrs	r2, r2, #12
    5b84:	e73b      	b.n	59fe <__aeabi_dsub+0x9a>
    5b86:	2301      	movs	r3, #1
    5b88:	425b      	negs	r3, r3
    5b8a:	4698      	mov	r8, r3
    5b8c:	44c4      	add	ip, r8
    5b8e:	4663      	mov	r3, ip
    5b90:	2b00      	cmp	r3, #0
    5b92:	d172      	bne.n	5c7a <__aeabi_dsub+0x316>
    5b94:	1a69      	subs	r1, r5, r1
    5b96:	428d      	cmp	r5, r1
    5b98:	419b      	sbcs	r3, r3
    5b9a:	1a3f      	subs	r7, r7, r0
    5b9c:	425b      	negs	r3, r3
    5b9e:	1aff      	subs	r7, r7, r3
    5ba0:	000d      	movs	r5, r1
    5ba2:	e768      	b.n	5a76 <__aeabi_dsub+0x112>
    5ba4:	0002      	movs	r2, r0
    5ba6:	430a      	orrs	r2, r1
    5ba8:	d100      	bne.n	5bac <__aeabi_dsub+0x248>
    5baa:	e707      	b.n	59bc <__aeabi_dsub+0x58>
    5bac:	2201      	movs	r2, #1
    5bae:	4252      	negs	r2, r2
    5bb0:	4690      	mov	r8, r2
    5bb2:	44c4      	add	ip, r8
    5bb4:	4662      	mov	r2, ip
    5bb6:	2a00      	cmp	r2, #0
    5bb8:	d000      	beq.n	5bbc <__aeabi_dsub+0x258>
    5bba:	e0e6      	b.n	5d8a <__aeabi_dsub+0x426>
    5bbc:	1869      	adds	r1, r5, r1
    5bbe:	42a9      	cmp	r1, r5
    5bc0:	41b6      	sbcs	r6, r6
    5bc2:	183f      	adds	r7, r7, r0
    5bc4:	4276      	negs	r6, r6
    5bc6:	19f7      	adds	r7, r6, r7
    5bc8:	000d      	movs	r5, r1
    5bca:	e7ba      	b.n	5b42 <__aeabi_dsub+0x1de>
    5bcc:	2e00      	cmp	r6, #0
    5bce:	d000      	beq.n	5bd2 <__aeabi_dsub+0x26e>
    5bd0:	e080      	b.n	5cd4 <__aeabi_dsub+0x370>
    5bd2:	1c62      	adds	r2, r4, #1
    5bd4:	0552      	lsls	r2, r2, #21
    5bd6:	0d52      	lsrs	r2, r2, #21
    5bd8:	2a01      	cmp	r2, #1
    5bda:	dc00      	bgt.n	5bde <__aeabi_dsub+0x27a>
    5bdc:	e0f9      	b.n	5dd2 <__aeabi_dsub+0x46e>
    5bde:	1a6a      	subs	r2, r5, r1
    5be0:	4691      	mov	r9, r2
    5be2:	454d      	cmp	r5, r9
    5be4:	41b6      	sbcs	r6, r6
    5be6:	1a3a      	subs	r2, r7, r0
    5be8:	4276      	negs	r6, r6
    5bea:	1b92      	subs	r2, r2, r6
    5bec:	4690      	mov	r8, r2
    5bee:	0212      	lsls	r2, r2, #8
    5bf0:	d400      	bmi.n	5bf4 <__aeabi_dsub+0x290>
    5bf2:	e099      	b.n	5d28 <__aeabi_dsub+0x3c4>
    5bf4:	1b4d      	subs	r5, r1, r5
    5bf6:	42a9      	cmp	r1, r5
    5bf8:	4189      	sbcs	r1, r1
    5bfa:	1bc7      	subs	r7, r0, r7
    5bfc:	4249      	negs	r1, r1
    5bfe:	1a7a      	subs	r2, r7, r1
    5c00:	4690      	mov	r8, r2
    5c02:	469a      	mov	sl, r3
    5c04:	e73c      	b.n	5a80 <__aeabi_dsub+0x11c>
    5c06:	4652      	mov	r2, sl
    5c08:	2301      	movs	r3, #1
    5c0a:	2500      	movs	r5, #0
    5c0c:	4013      	ands	r3, r2
    5c0e:	2200      	movs	r2, #0
    5c10:	e6f5      	b.n	59fe <__aeabi_dsub+0x9a>
    5c12:	0028      	movs	r0, r5
    5c14:	f000 fc36 	bl	6484 <__clzsi2>
    5c18:	3020      	adds	r0, #32
    5c1a:	0003      	movs	r3, r0
    5c1c:	3b08      	subs	r3, #8
    5c1e:	2b1f      	cmp	r3, #31
    5c20:	dc00      	bgt.n	5c24 <__aeabi_dsub+0x2c0>
    5c22:	e739      	b.n	5a98 <__aeabi_dsub+0x134>
    5c24:	002a      	movs	r2, r5
    5c26:	3828      	subs	r0, #40	; 0x28
    5c28:	4082      	lsls	r2, r0
    5c2a:	2500      	movs	r5, #0
    5c2c:	429c      	cmp	r4, r3
    5c2e:	dc00      	bgt.n	5c32 <__aeabi_dsub+0x2ce>
    5c30:	e73e      	b.n	5ab0 <__aeabi_dsub+0x14c>
    5c32:	4f26      	ldr	r7, [pc, #152]	; (5ccc <__aeabi_dsub+0x368>)
    5c34:	1ae4      	subs	r4, r4, r3
    5c36:	4017      	ands	r7, r2
    5c38:	e6c0      	b.n	59bc <__aeabi_dsub+0x58>
    5c3a:	4301      	orrs	r1, r0
    5c3c:	1e48      	subs	r0, r1, #1
    5c3e:	4181      	sbcs	r1, r0
    5c40:	2200      	movs	r2, #0
    5c42:	b2c9      	uxtb	r1, r1
    5c44:	e710      	b.n	5a68 <__aeabi_dsub+0x104>
    5c46:	2e00      	cmp	r6, #0
    5c48:	d000      	beq.n	5c4c <__aeabi_dsub+0x2e8>
    5c4a:	e0f1      	b.n	5e30 <__aeabi_dsub+0x4cc>
    5c4c:	1c62      	adds	r2, r4, #1
    5c4e:	4694      	mov	ip, r2
    5c50:	0552      	lsls	r2, r2, #21
    5c52:	0d52      	lsrs	r2, r2, #21
    5c54:	2a01      	cmp	r2, #1
    5c56:	dc00      	bgt.n	5c5a <__aeabi_dsub+0x2f6>
    5c58:	e0a0      	b.n	5d9c <__aeabi_dsub+0x438>
    5c5a:	4a1b      	ldr	r2, [pc, #108]	; (5cc8 <__aeabi_dsub+0x364>)
    5c5c:	4594      	cmp	ip, r2
    5c5e:	d100      	bne.n	5c62 <__aeabi_dsub+0x2fe>
    5c60:	e0c5      	b.n	5dee <__aeabi_dsub+0x48a>
    5c62:	1869      	adds	r1, r5, r1
    5c64:	42a9      	cmp	r1, r5
    5c66:	4192      	sbcs	r2, r2
    5c68:	183f      	adds	r7, r7, r0
    5c6a:	4252      	negs	r2, r2
    5c6c:	19d2      	adds	r2, r2, r7
    5c6e:	0849      	lsrs	r1, r1, #1
    5c70:	07d5      	lsls	r5, r2, #31
    5c72:	430d      	orrs	r5, r1
    5c74:	0857      	lsrs	r7, r2, #1
    5c76:	4664      	mov	r4, ip
    5c78:	e6a0      	b.n	59bc <__aeabi_dsub+0x58>
    5c7a:	4b13      	ldr	r3, [pc, #76]	; (5cc8 <__aeabi_dsub+0x364>)
    5c7c:	429c      	cmp	r4, r3
    5c7e:	d000      	beq.n	5c82 <__aeabi_dsub+0x31e>
    5c80:	e6d9      	b.n	5a36 <__aeabi_dsub+0xd2>
    5c82:	e69b      	b.n	59bc <__aeabi_dsub+0x58>
    5c84:	0011      	movs	r1, r2
    5c86:	3c1f      	subs	r4, #31
    5c88:	40e1      	lsrs	r1, r4
    5c8a:	000c      	movs	r4, r1
    5c8c:	2b20      	cmp	r3, #32
    5c8e:	d100      	bne.n	5c92 <__aeabi_dsub+0x32e>
    5c90:	e080      	b.n	5d94 <__aeabi_dsub+0x430>
    5c92:	2140      	movs	r1, #64	; 0x40
    5c94:	1acb      	subs	r3, r1, r3
    5c96:	409a      	lsls	r2, r3
    5c98:	4315      	orrs	r5, r2
    5c9a:	1e6a      	subs	r2, r5, #1
    5c9c:	4195      	sbcs	r5, r2
    5c9e:	2700      	movs	r7, #0
    5ca0:	4325      	orrs	r5, r4
    5ca2:	2400      	movs	r4, #0
    5ca4:	e71f      	b.n	5ae6 <__aeabi_dsub+0x182>
    5ca6:	4663      	mov	r3, ip
    5ca8:	0002      	movs	r2, r0
    5caa:	3b20      	subs	r3, #32
    5cac:	40da      	lsrs	r2, r3
    5cae:	4663      	mov	r3, ip
    5cb0:	2b20      	cmp	r3, #32
    5cb2:	d071      	beq.n	5d98 <__aeabi_dsub+0x434>
    5cb4:	2340      	movs	r3, #64	; 0x40
    5cb6:	4666      	mov	r6, ip
    5cb8:	1b9b      	subs	r3, r3, r6
    5cba:	4098      	lsls	r0, r3
    5cbc:	4301      	orrs	r1, r0
    5cbe:	1e48      	subs	r0, r1, #1
    5cc0:	4181      	sbcs	r1, r0
    5cc2:	4311      	orrs	r1, r2
    5cc4:	2200      	movs	r2, #0
    5cc6:	e6cf      	b.n	5a68 <__aeabi_dsub+0x104>
    5cc8:	000007ff 	.word	0x000007ff
    5ccc:	ff7fffff 	.word	0xff7fffff
    5cd0:	800fffff 	.word	0x800fffff
    5cd4:	2c00      	cmp	r4, #0
    5cd6:	d048      	beq.n	5d6a <__aeabi_dsub+0x406>
    5cd8:	4cca      	ldr	r4, [pc, #808]	; (6004 <__aeabi_dsub+0x6a0>)
    5cda:	42a2      	cmp	r2, r4
    5cdc:	d100      	bne.n	5ce0 <__aeabi_dsub+0x37c>
    5cde:	e0a2      	b.n	5e26 <__aeabi_dsub+0x4c2>
    5ce0:	4274      	negs	r4, r6
    5ce2:	46a1      	mov	r9, r4
    5ce4:	2480      	movs	r4, #128	; 0x80
    5ce6:	0424      	lsls	r4, r4, #16
    5ce8:	4327      	orrs	r7, r4
    5cea:	464c      	mov	r4, r9
    5cec:	2c38      	cmp	r4, #56	; 0x38
    5cee:	dd00      	ble.n	5cf2 <__aeabi_dsub+0x38e>
    5cf0:	e0db      	b.n	5eaa <__aeabi_dsub+0x546>
    5cf2:	2c1f      	cmp	r4, #31
    5cf4:	dd00      	ble.n	5cf8 <__aeabi_dsub+0x394>
    5cf6:	e144      	b.n	5f82 <__aeabi_dsub+0x61e>
    5cf8:	464e      	mov	r6, r9
    5cfa:	2420      	movs	r4, #32
    5cfc:	1ba4      	subs	r4, r4, r6
    5cfe:	003e      	movs	r6, r7
    5d00:	40a6      	lsls	r6, r4
    5d02:	46a2      	mov	sl, r4
    5d04:	46b0      	mov	r8, r6
    5d06:	464c      	mov	r4, r9
    5d08:	002e      	movs	r6, r5
    5d0a:	40e6      	lsrs	r6, r4
    5d0c:	46b4      	mov	ip, r6
    5d0e:	4646      	mov	r6, r8
    5d10:	4664      	mov	r4, ip
    5d12:	4326      	orrs	r6, r4
    5d14:	4654      	mov	r4, sl
    5d16:	40a5      	lsls	r5, r4
    5d18:	1e6c      	subs	r4, r5, #1
    5d1a:	41a5      	sbcs	r5, r4
    5d1c:	0034      	movs	r4, r6
    5d1e:	432c      	orrs	r4, r5
    5d20:	464d      	mov	r5, r9
    5d22:	40ef      	lsrs	r7, r5
    5d24:	1b0d      	subs	r5, r1, r4
    5d26:	e028      	b.n	5d7a <__aeabi_dsub+0x416>
    5d28:	464a      	mov	r2, r9
    5d2a:	4643      	mov	r3, r8
    5d2c:	464d      	mov	r5, r9
    5d2e:	431a      	orrs	r2, r3
    5d30:	d000      	beq.n	5d34 <__aeabi_dsub+0x3d0>
    5d32:	e6a5      	b.n	5a80 <__aeabi_dsub+0x11c>
    5d34:	2300      	movs	r3, #0
    5d36:	2400      	movs	r4, #0
    5d38:	2500      	movs	r5, #0
    5d3a:	e6de      	b.n	5afa <__aeabi_dsub+0x196>
    5d3c:	2a1f      	cmp	r2, #31
    5d3e:	dc5a      	bgt.n	5df6 <__aeabi_dsub+0x492>
    5d40:	4666      	mov	r6, ip
    5d42:	2220      	movs	r2, #32
    5d44:	1b92      	subs	r2, r2, r6
    5d46:	0006      	movs	r6, r0
    5d48:	4096      	lsls	r6, r2
    5d4a:	4691      	mov	r9, r2
    5d4c:	46b0      	mov	r8, r6
    5d4e:	4662      	mov	r2, ip
    5d50:	000e      	movs	r6, r1
    5d52:	40d6      	lsrs	r6, r2
    5d54:	4642      	mov	r2, r8
    5d56:	4316      	orrs	r6, r2
    5d58:	464a      	mov	r2, r9
    5d5a:	4091      	lsls	r1, r2
    5d5c:	1e4a      	subs	r2, r1, #1
    5d5e:	4191      	sbcs	r1, r2
    5d60:	0002      	movs	r2, r0
    5d62:	4660      	mov	r0, ip
    5d64:	4331      	orrs	r1, r6
    5d66:	40c2      	lsrs	r2, r0
    5d68:	e6e4      	b.n	5b34 <__aeabi_dsub+0x1d0>
    5d6a:	003c      	movs	r4, r7
    5d6c:	432c      	orrs	r4, r5
    5d6e:	d05a      	beq.n	5e26 <__aeabi_dsub+0x4c2>
    5d70:	43f4      	mvns	r4, r6
    5d72:	46a1      	mov	r9, r4
    5d74:	2c00      	cmp	r4, #0
    5d76:	d152      	bne.n	5e1e <__aeabi_dsub+0x4ba>
    5d78:	1b4d      	subs	r5, r1, r5
    5d7a:	42a9      	cmp	r1, r5
    5d7c:	4189      	sbcs	r1, r1
    5d7e:	1bc7      	subs	r7, r0, r7
    5d80:	4249      	negs	r1, r1
    5d82:	1a7f      	subs	r7, r7, r1
    5d84:	0014      	movs	r4, r2
    5d86:	469a      	mov	sl, r3
    5d88:	e675      	b.n	5a76 <__aeabi_dsub+0x112>
    5d8a:	4a9e      	ldr	r2, [pc, #632]	; (6004 <__aeabi_dsub+0x6a0>)
    5d8c:	4294      	cmp	r4, r2
    5d8e:	d000      	beq.n	5d92 <__aeabi_dsub+0x42e>
    5d90:	e6c7      	b.n	5b22 <__aeabi_dsub+0x1be>
    5d92:	e613      	b.n	59bc <__aeabi_dsub+0x58>
    5d94:	2200      	movs	r2, #0
    5d96:	e77f      	b.n	5c98 <__aeabi_dsub+0x334>
    5d98:	2000      	movs	r0, #0
    5d9a:	e78f      	b.n	5cbc <__aeabi_dsub+0x358>
    5d9c:	2c00      	cmp	r4, #0
    5d9e:	d000      	beq.n	5da2 <__aeabi_dsub+0x43e>
    5da0:	e0c8      	b.n	5f34 <__aeabi_dsub+0x5d0>
    5da2:	003b      	movs	r3, r7
    5da4:	432b      	orrs	r3, r5
    5da6:	d100      	bne.n	5daa <__aeabi_dsub+0x446>
    5da8:	e10f      	b.n	5fca <__aeabi_dsub+0x666>
    5daa:	0003      	movs	r3, r0
    5dac:	430b      	orrs	r3, r1
    5dae:	d100      	bne.n	5db2 <__aeabi_dsub+0x44e>
    5db0:	e604      	b.n	59bc <__aeabi_dsub+0x58>
    5db2:	1869      	adds	r1, r5, r1
    5db4:	42a9      	cmp	r1, r5
    5db6:	419b      	sbcs	r3, r3
    5db8:	183f      	adds	r7, r7, r0
    5dba:	425b      	negs	r3, r3
    5dbc:	19df      	adds	r7, r3, r7
    5dbe:	023b      	lsls	r3, r7, #8
    5dc0:	d400      	bmi.n	5dc4 <__aeabi_dsub+0x460>
    5dc2:	e11a      	b.n	5ffa <__aeabi_dsub+0x696>
    5dc4:	4b90      	ldr	r3, [pc, #576]	; (6008 <__aeabi_dsub+0x6a4>)
    5dc6:	000d      	movs	r5, r1
    5dc8:	401f      	ands	r7, r3
    5dca:	4664      	mov	r4, ip
    5dcc:	e5f6      	b.n	59bc <__aeabi_dsub+0x58>
    5dce:	469a      	mov	sl, r3
    5dd0:	e689      	b.n	5ae6 <__aeabi_dsub+0x182>
    5dd2:	003a      	movs	r2, r7
    5dd4:	432a      	orrs	r2, r5
    5dd6:	2c00      	cmp	r4, #0
    5dd8:	d15c      	bne.n	5e94 <__aeabi_dsub+0x530>
    5dda:	2a00      	cmp	r2, #0
    5ddc:	d175      	bne.n	5eca <__aeabi_dsub+0x566>
    5dde:	0002      	movs	r2, r0
    5de0:	430a      	orrs	r2, r1
    5de2:	d100      	bne.n	5de6 <__aeabi_dsub+0x482>
    5de4:	e0ca      	b.n	5f7c <__aeabi_dsub+0x618>
    5de6:	0007      	movs	r7, r0
    5de8:	000d      	movs	r5, r1
    5dea:	469a      	mov	sl, r3
    5dec:	e5e6      	b.n	59bc <__aeabi_dsub+0x58>
    5dee:	4664      	mov	r4, ip
    5df0:	2200      	movs	r2, #0
    5df2:	2500      	movs	r5, #0
    5df4:	e681      	b.n	5afa <__aeabi_dsub+0x196>
    5df6:	4662      	mov	r2, ip
    5df8:	0006      	movs	r6, r0
    5dfa:	3a20      	subs	r2, #32
    5dfc:	40d6      	lsrs	r6, r2
    5dfe:	4662      	mov	r2, ip
    5e00:	46b0      	mov	r8, r6
    5e02:	2a20      	cmp	r2, #32
    5e04:	d100      	bne.n	5e08 <__aeabi_dsub+0x4a4>
    5e06:	e0b7      	b.n	5f78 <__aeabi_dsub+0x614>
    5e08:	2240      	movs	r2, #64	; 0x40
    5e0a:	4666      	mov	r6, ip
    5e0c:	1b92      	subs	r2, r2, r6
    5e0e:	4090      	lsls	r0, r2
    5e10:	4301      	orrs	r1, r0
    5e12:	4642      	mov	r2, r8
    5e14:	1e48      	subs	r0, r1, #1
    5e16:	4181      	sbcs	r1, r0
    5e18:	4311      	orrs	r1, r2
    5e1a:	2200      	movs	r2, #0
    5e1c:	e68a      	b.n	5b34 <__aeabi_dsub+0x1d0>
    5e1e:	4c79      	ldr	r4, [pc, #484]	; (6004 <__aeabi_dsub+0x6a0>)
    5e20:	42a2      	cmp	r2, r4
    5e22:	d000      	beq.n	5e26 <__aeabi_dsub+0x4c2>
    5e24:	e761      	b.n	5cea <__aeabi_dsub+0x386>
    5e26:	0007      	movs	r7, r0
    5e28:	000d      	movs	r5, r1
    5e2a:	0014      	movs	r4, r2
    5e2c:	469a      	mov	sl, r3
    5e2e:	e5c5      	b.n	59bc <__aeabi_dsub+0x58>
    5e30:	2c00      	cmp	r4, #0
    5e32:	d141      	bne.n	5eb8 <__aeabi_dsub+0x554>
    5e34:	003c      	movs	r4, r7
    5e36:	432c      	orrs	r4, r5
    5e38:	d078      	beq.n	5f2c <__aeabi_dsub+0x5c8>
    5e3a:	43f4      	mvns	r4, r6
    5e3c:	46a1      	mov	r9, r4
    5e3e:	2c00      	cmp	r4, #0
    5e40:	d020      	beq.n	5e84 <__aeabi_dsub+0x520>
    5e42:	4c70      	ldr	r4, [pc, #448]	; (6004 <__aeabi_dsub+0x6a0>)
    5e44:	42a2      	cmp	r2, r4
    5e46:	d071      	beq.n	5f2c <__aeabi_dsub+0x5c8>
    5e48:	464c      	mov	r4, r9
    5e4a:	2c38      	cmp	r4, #56	; 0x38
    5e4c:	dd00      	ble.n	5e50 <__aeabi_dsub+0x4ec>
    5e4e:	e0b2      	b.n	5fb6 <__aeabi_dsub+0x652>
    5e50:	2c1f      	cmp	r4, #31
    5e52:	dd00      	ble.n	5e56 <__aeabi_dsub+0x4f2>
    5e54:	e0bc      	b.n	5fd0 <__aeabi_dsub+0x66c>
    5e56:	2620      	movs	r6, #32
    5e58:	1b34      	subs	r4, r6, r4
    5e5a:	46a2      	mov	sl, r4
    5e5c:	003c      	movs	r4, r7
    5e5e:	4656      	mov	r6, sl
    5e60:	40b4      	lsls	r4, r6
    5e62:	464e      	mov	r6, r9
    5e64:	46a0      	mov	r8, r4
    5e66:	002c      	movs	r4, r5
    5e68:	40f4      	lsrs	r4, r6
    5e6a:	46a4      	mov	ip, r4
    5e6c:	4644      	mov	r4, r8
    5e6e:	4666      	mov	r6, ip
    5e70:	4334      	orrs	r4, r6
    5e72:	46a4      	mov	ip, r4
    5e74:	4654      	mov	r4, sl
    5e76:	40a5      	lsls	r5, r4
    5e78:	4664      	mov	r4, ip
    5e7a:	1e6e      	subs	r6, r5, #1
    5e7c:	41b5      	sbcs	r5, r6
    5e7e:	4325      	orrs	r5, r4
    5e80:	464c      	mov	r4, r9
    5e82:	40e7      	lsrs	r7, r4
    5e84:	186d      	adds	r5, r5, r1
    5e86:	428d      	cmp	r5, r1
    5e88:	4189      	sbcs	r1, r1
    5e8a:	183f      	adds	r7, r7, r0
    5e8c:	4249      	negs	r1, r1
    5e8e:	19cf      	adds	r7, r1, r7
    5e90:	0014      	movs	r4, r2
    5e92:	e656      	b.n	5b42 <__aeabi_dsub+0x1de>
    5e94:	2a00      	cmp	r2, #0
    5e96:	d12f      	bne.n	5ef8 <__aeabi_dsub+0x594>
    5e98:	0002      	movs	r2, r0
    5e9a:	430a      	orrs	r2, r1
    5e9c:	d100      	bne.n	5ea0 <__aeabi_dsub+0x53c>
    5e9e:	e084      	b.n	5faa <__aeabi_dsub+0x646>
    5ea0:	0007      	movs	r7, r0
    5ea2:	000d      	movs	r5, r1
    5ea4:	469a      	mov	sl, r3
    5ea6:	4c57      	ldr	r4, [pc, #348]	; (6004 <__aeabi_dsub+0x6a0>)
    5ea8:	e588      	b.n	59bc <__aeabi_dsub+0x58>
    5eaa:	433d      	orrs	r5, r7
    5eac:	1e6f      	subs	r7, r5, #1
    5eae:	41bd      	sbcs	r5, r7
    5eb0:	b2ec      	uxtb	r4, r5
    5eb2:	2700      	movs	r7, #0
    5eb4:	1b0d      	subs	r5, r1, r4
    5eb6:	e760      	b.n	5d7a <__aeabi_dsub+0x416>
    5eb8:	4c52      	ldr	r4, [pc, #328]	; (6004 <__aeabi_dsub+0x6a0>)
    5eba:	42a2      	cmp	r2, r4
    5ebc:	d036      	beq.n	5f2c <__aeabi_dsub+0x5c8>
    5ebe:	4274      	negs	r4, r6
    5ec0:	2680      	movs	r6, #128	; 0x80
    5ec2:	0436      	lsls	r6, r6, #16
    5ec4:	46a1      	mov	r9, r4
    5ec6:	4337      	orrs	r7, r6
    5ec8:	e7be      	b.n	5e48 <__aeabi_dsub+0x4e4>
    5eca:	0002      	movs	r2, r0
    5ecc:	430a      	orrs	r2, r1
    5ece:	d100      	bne.n	5ed2 <__aeabi_dsub+0x56e>
    5ed0:	e574      	b.n	59bc <__aeabi_dsub+0x58>
    5ed2:	1a6a      	subs	r2, r5, r1
    5ed4:	4690      	mov	r8, r2
    5ed6:	4545      	cmp	r5, r8
    5ed8:	41b6      	sbcs	r6, r6
    5eda:	1a3a      	subs	r2, r7, r0
    5edc:	4276      	negs	r6, r6
    5ede:	1b92      	subs	r2, r2, r6
    5ee0:	4694      	mov	ip, r2
    5ee2:	0212      	lsls	r2, r2, #8
    5ee4:	d400      	bmi.n	5ee8 <__aeabi_dsub+0x584>
    5ee6:	e5f7      	b.n	5ad8 <__aeabi_dsub+0x174>
    5ee8:	1b4d      	subs	r5, r1, r5
    5eea:	42a9      	cmp	r1, r5
    5eec:	4189      	sbcs	r1, r1
    5eee:	1bc7      	subs	r7, r0, r7
    5ef0:	4249      	negs	r1, r1
    5ef2:	1a7f      	subs	r7, r7, r1
    5ef4:	469a      	mov	sl, r3
    5ef6:	e561      	b.n	59bc <__aeabi_dsub+0x58>
    5ef8:	0002      	movs	r2, r0
    5efa:	430a      	orrs	r2, r1
    5efc:	d03a      	beq.n	5f74 <__aeabi_dsub+0x610>
    5efe:	08ed      	lsrs	r5, r5, #3
    5f00:	077c      	lsls	r4, r7, #29
    5f02:	432c      	orrs	r4, r5
    5f04:	2580      	movs	r5, #128	; 0x80
    5f06:	08fa      	lsrs	r2, r7, #3
    5f08:	032d      	lsls	r5, r5, #12
    5f0a:	422a      	tst	r2, r5
    5f0c:	d008      	beq.n	5f20 <__aeabi_dsub+0x5bc>
    5f0e:	08c7      	lsrs	r7, r0, #3
    5f10:	422f      	tst	r7, r5
    5f12:	d105      	bne.n	5f20 <__aeabi_dsub+0x5bc>
    5f14:	0745      	lsls	r5, r0, #29
    5f16:	002c      	movs	r4, r5
    5f18:	003a      	movs	r2, r7
    5f1a:	469a      	mov	sl, r3
    5f1c:	08c9      	lsrs	r1, r1, #3
    5f1e:	430c      	orrs	r4, r1
    5f20:	0f67      	lsrs	r7, r4, #29
    5f22:	00d2      	lsls	r2, r2, #3
    5f24:	00e5      	lsls	r5, r4, #3
    5f26:	4317      	orrs	r7, r2
    5f28:	4c36      	ldr	r4, [pc, #216]	; (6004 <__aeabi_dsub+0x6a0>)
    5f2a:	e547      	b.n	59bc <__aeabi_dsub+0x58>
    5f2c:	0007      	movs	r7, r0
    5f2e:	000d      	movs	r5, r1
    5f30:	0014      	movs	r4, r2
    5f32:	e543      	b.n	59bc <__aeabi_dsub+0x58>
    5f34:	003a      	movs	r2, r7
    5f36:	432a      	orrs	r2, r5
    5f38:	d043      	beq.n	5fc2 <__aeabi_dsub+0x65e>
    5f3a:	0002      	movs	r2, r0
    5f3c:	430a      	orrs	r2, r1
    5f3e:	d019      	beq.n	5f74 <__aeabi_dsub+0x610>
    5f40:	08ed      	lsrs	r5, r5, #3
    5f42:	077c      	lsls	r4, r7, #29
    5f44:	432c      	orrs	r4, r5
    5f46:	2580      	movs	r5, #128	; 0x80
    5f48:	08fa      	lsrs	r2, r7, #3
    5f4a:	032d      	lsls	r5, r5, #12
    5f4c:	422a      	tst	r2, r5
    5f4e:	d007      	beq.n	5f60 <__aeabi_dsub+0x5fc>
    5f50:	08c6      	lsrs	r6, r0, #3
    5f52:	422e      	tst	r6, r5
    5f54:	d104      	bne.n	5f60 <__aeabi_dsub+0x5fc>
    5f56:	0747      	lsls	r7, r0, #29
    5f58:	003c      	movs	r4, r7
    5f5a:	0032      	movs	r2, r6
    5f5c:	08c9      	lsrs	r1, r1, #3
    5f5e:	430c      	orrs	r4, r1
    5f60:	00d7      	lsls	r7, r2, #3
    5f62:	0f62      	lsrs	r2, r4, #29
    5f64:	00e5      	lsls	r5, r4, #3
    5f66:	4317      	orrs	r7, r2
    5f68:	469a      	mov	sl, r3
    5f6a:	4c26      	ldr	r4, [pc, #152]	; (6004 <__aeabi_dsub+0x6a0>)
    5f6c:	e526      	b.n	59bc <__aeabi_dsub+0x58>
    5f6e:	2200      	movs	r2, #0
    5f70:	2500      	movs	r5, #0
    5f72:	e544      	b.n	59fe <__aeabi_dsub+0x9a>
    5f74:	4c23      	ldr	r4, [pc, #140]	; (6004 <__aeabi_dsub+0x6a0>)
    5f76:	e521      	b.n	59bc <__aeabi_dsub+0x58>
    5f78:	2000      	movs	r0, #0
    5f7a:	e749      	b.n	5e10 <__aeabi_dsub+0x4ac>
    5f7c:	2300      	movs	r3, #0
    5f7e:	2500      	movs	r5, #0
    5f80:	e5bb      	b.n	5afa <__aeabi_dsub+0x196>
    5f82:	464c      	mov	r4, r9
    5f84:	003e      	movs	r6, r7
    5f86:	3c20      	subs	r4, #32
    5f88:	40e6      	lsrs	r6, r4
    5f8a:	464c      	mov	r4, r9
    5f8c:	46b4      	mov	ip, r6
    5f8e:	2c20      	cmp	r4, #32
    5f90:	d031      	beq.n	5ff6 <__aeabi_dsub+0x692>
    5f92:	2440      	movs	r4, #64	; 0x40
    5f94:	464e      	mov	r6, r9
    5f96:	1ba6      	subs	r6, r4, r6
    5f98:	40b7      	lsls	r7, r6
    5f9a:	433d      	orrs	r5, r7
    5f9c:	1e6c      	subs	r4, r5, #1
    5f9e:	41a5      	sbcs	r5, r4
    5fa0:	4664      	mov	r4, ip
    5fa2:	432c      	orrs	r4, r5
    5fa4:	2700      	movs	r7, #0
    5fa6:	1b0d      	subs	r5, r1, r4
    5fa8:	e6e7      	b.n	5d7a <__aeabi_dsub+0x416>
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	2300      	movs	r3, #0
    5fae:	0312      	lsls	r2, r2, #12
    5fb0:	4c14      	ldr	r4, [pc, #80]	; (6004 <__aeabi_dsub+0x6a0>)
    5fb2:	2500      	movs	r5, #0
    5fb4:	e5a1      	b.n	5afa <__aeabi_dsub+0x196>
    5fb6:	433d      	orrs	r5, r7
    5fb8:	1e6f      	subs	r7, r5, #1
    5fba:	41bd      	sbcs	r5, r7
    5fbc:	2700      	movs	r7, #0
    5fbe:	b2ed      	uxtb	r5, r5
    5fc0:	e760      	b.n	5e84 <__aeabi_dsub+0x520>
    5fc2:	0007      	movs	r7, r0
    5fc4:	000d      	movs	r5, r1
    5fc6:	4c0f      	ldr	r4, [pc, #60]	; (6004 <__aeabi_dsub+0x6a0>)
    5fc8:	e4f8      	b.n	59bc <__aeabi_dsub+0x58>
    5fca:	0007      	movs	r7, r0
    5fcc:	000d      	movs	r5, r1
    5fce:	e4f5      	b.n	59bc <__aeabi_dsub+0x58>
    5fd0:	464e      	mov	r6, r9
    5fd2:	003c      	movs	r4, r7
    5fd4:	3e20      	subs	r6, #32
    5fd6:	40f4      	lsrs	r4, r6
    5fd8:	46a0      	mov	r8, r4
    5fda:	464c      	mov	r4, r9
    5fdc:	2c20      	cmp	r4, #32
    5fde:	d00e      	beq.n	5ffe <__aeabi_dsub+0x69a>
    5fe0:	2440      	movs	r4, #64	; 0x40
    5fe2:	464e      	mov	r6, r9
    5fe4:	1ba4      	subs	r4, r4, r6
    5fe6:	40a7      	lsls	r7, r4
    5fe8:	433d      	orrs	r5, r7
    5fea:	1e6f      	subs	r7, r5, #1
    5fec:	41bd      	sbcs	r5, r7
    5fee:	4644      	mov	r4, r8
    5ff0:	2700      	movs	r7, #0
    5ff2:	4325      	orrs	r5, r4
    5ff4:	e746      	b.n	5e84 <__aeabi_dsub+0x520>
    5ff6:	2700      	movs	r7, #0
    5ff8:	e7cf      	b.n	5f9a <__aeabi_dsub+0x636>
    5ffa:	000d      	movs	r5, r1
    5ffc:	e573      	b.n	5ae6 <__aeabi_dsub+0x182>
    5ffe:	2700      	movs	r7, #0
    6000:	e7f2      	b.n	5fe8 <__aeabi_dsub+0x684>
    6002:	46c0      	nop			; (mov r8, r8)
    6004:	000007ff 	.word	0x000007ff
    6008:	ff7fffff 	.word	0xff7fffff

0000600c <__aeabi_dcmpun>:
    600c:	b570      	push	{r4, r5, r6, lr}
    600e:	4e0e      	ldr	r6, [pc, #56]	; (6048 <__aeabi_dcmpun+0x3c>)
    6010:	030c      	lsls	r4, r1, #12
    6012:	031d      	lsls	r5, r3, #12
    6014:	0049      	lsls	r1, r1, #1
    6016:	005b      	lsls	r3, r3, #1
    6018:	0b24      	lsrs	r4, r4, #12
    601a:	0d49      	lsrs	r1, r1, #21
    601c:	0b2d      	lsrs	r5, r5, #12
    601e:	0d5b      	lsrs	r3, r3, #21
    6020:	42b1      	cmp	r1, r6
    6022:	d004      	beq.n	602e <__aeabi_dcmpun+0x22>
    6024:	4908      	ldr	r1, [pc, #32]	; (6048 <__aeabi_dcmpun+0x3c>)
    6026:	2000      	movs	r0, #0
    6028:	428b      	cmp	r3, r1
    602a:	d008      	beq.n	603e <__aeabi_dcmpun+0x32>
    602c:	bd70      	pop	{r4, r5, r6, pc}
    602e:	4304      	orrs	r4, r0
    6030:	2001      	movs	r0, #1
    6032:	2c00      	cmp	r4, #0
    6034:	d1fa      	bne.n	602c <__aeabi_dcmpun+0x20>
    6036:	4904      	ldr	r1, [pc, #16]	; (6048 <__aeabi_dcmpun+0x3c>)
    6038:	2000      	movs	r0, #0
    603a:	428b      	cmp	r3, r1
    603c:	d1f6      	bne.n	602c <__aeabi_dcmpun+0x20>
    603e:	4315      	orrs	r5, r2
    6040:	0028      	movs	r0, r5
    6042:	1e45      	subs	r5, r0, #1
    6044:	41a8      	sbcs	r0, r5
    6046:	e7f1      	b.n	602c <__aeabi_dcmpun+0x20>
    6048:	000007ff 	.word	0x000007ff

0000604c <__aeabi_d2iz>:
    604c:	030b      	lsls	r3, r1, #12
    604e:	b530      	push	{r4, r5, lr}
    6050:	4d13      	ldr	r5, [pc, #76]	; (60a0 <__aeabi_d2iz+0x54>)
    6052:	0b1a      	lsrs	r2, r3, #12
    6054:	004b      	lsls	r3, r1, #1
    6056:	0d5b      	lsrs	r3, r3, #21
    6058:	0fc9      	lsrs	r1, r1, #31
    605a:	2400      	movs	r4, #0
    605c:	42ab      	cmp	r3, r5
    605e:	dd11      	ble.n	6084 <__aeabi_d2iz+0x38>
    6060:	4c10      	ldr	r4, [pc, #64]	; (60a4 <__aeabi_d2iz+0x58>)
    6062:	42a3      	cmp	r3, r4
    6064:	dc10      	bgt.n	6088 <__aeabi_d2iz+0x3c>
    6066:	2480      	movs	r4, #128	; 0x80
    6068:	0364      	lsls	r4, r4, #13
    606a:	4322      	orrs	r2, r4
    606c:	4c0e      	ldr	r4, [pc, #56]	; (60a8 <__aeabi_d2iz+0x5c>)
    606e:	1ae4      	subs	r4, r4, r3
    6070:	2c1f      	cmp	r4, #31
    6072:	dd0c      	ble.n	608e <__aeabi_d2iz+0x42>
    6074:	480d      	ldr	r0, [pc, #52]	; (60ac <__aeabi_d2iz+0x60>)
    6076:	1ac3      	subs	r3, r0, r3
    6078:	40da      	lsrs	r2, r3
    607a:	0013      	movs	r3, r2
    607c:	425c      	negs	r4, r3
    607e:	2900      	cmp	r1, #0
    6080:	d100      	bne.n	6084 <__aeabi_d2iz+0x38>
    6082:	001c      	movs	r4, r3
    6084:	0020      	movs	r0, r4
    6086:	bd30      	pop	{r4, r5, pc}
    6088:	4b09      	ldr	r3, [pc, #36]	; (60b0 <__aeabi_d2iz+0x64>)
    608a:	18cc      	adds	r4, r1, r3
    608c:	e7fa      	b.n	6084 <__aeabi_d2iz+0x38>
    608e:	40e0      	lsrs	r0, r4
    6090:	4c08      	ldr	r4, [pc, #32]	; (60b4 <__aeabi_d2iz+0x68>)
    6092:	46a4      	mov	ip, r4
    6094:	4463      	add	r3, ip
    6096:	409a      	lsls	r2, r3
    6098:	0013      	movs	r3, r2
    609a:	4303      	orrs	r3, r0
    609c:	e7ee      	b.n	607c <__aeabi_d2iz+0x30>
    609e:	46c0      	nop			; (mov r8, r8)
    60a0:	000003fe 	.word	0x000003fe
    60a4:	0000041d 	.word	0x0000041d
    60a8:	00000433 	.word	0x00000433
    60ac:	00000413 	.word	0x00000413
    60b0:	7fffffff 	.word	0x7fffffff
    60b4:	fffffbed 	.word	0xfffffbed

000060b8 <__aeabi_i2d>:
    60b8:	b570      	push	{r4, r5, r6, lr}
    60ba:	2800      	cmp	r0, #0
    60bc:	d030      	beq.n	6120 <__aeabi_i2d+0x68>
    60be:	17c3      	asrs	r3, r0, #31
    60c0:	18c4      	adds	r4, r0, r3
    60c2:	405c      	eors	r4, r3
    60c4:	0fc5      	lsrs	r5, r0, #31
    60c6:	0020      	movs	r0, r4
    60c8:	f000 f9dc 	bl	6484 <__clzsi2>
    60cc:	4b17      	ldr	r3, [pc, #92]	; (612c <__aeabi_i2d+0x74>)
    60ce:	4a18      	ldr	r2, [pc, #96]	; (6130 <__aeabi_i2d+0x78>)
    60d0:	1a1b      	subs	r3, r3, r0
    60d2:	1ad2      	subs	r2, r2, r3
    60d4:	2a1f      	cmp	r2, #31
    60d6:	dd18      	ble.n	610a <__aeabi_i2d+0x52>
    60d8:	4a16      	ldr	r2, [pc, #88]	; (6134 <__aeabi_i2d+0x7c>)
    60da:	1ad2      	subs	r2, r2, r3
    60dc:	4094      	lsls	r4, r2
    60de:	2200      	movs	r2, #0
    60e0:	0324      	lsls	r4, r4, #12
    60e2:	055b      	lsls	r3, r3, #21
    60e4:	0b24      	lsrs	r4, r4, #12
    60e6:	0d5b      	lsrs	r3, r3, #21
    60e8:	2100      	movs	r1, #0
    60ea:	0010      	movs	r0, r2
    60ec:	0324      	lsls	r4, r4, #12
    60ee:	0d0a      	lsrs	r2, r1, #20
    60f0:	0512      	lsls	r2, r2, #20
    60f2:	0b24      	lsrs	r4, r4, #12
    60f4:	4314      	orrs	r4, r2
    60f6:	4a10      	ldr	r2, [pc, #64]	; (6138 <__aeabi_i2d+0x80>)
    60f8:	051b      	lsls	r3, r3, #20
    60fa:	4014      	ands	r4, r2
    60fc:	431c      	orrs	r4, r3
    60fe:	0064      	lsls	r4, r4, #1
    6100:	07ed      	lsls	r5, r5, #31
    6102:	0864      	lsrs	r4, r4, #1
    6104:	432c      	orrs	r4, r5
    6106:	0021      	movs	r1, r4
    6108:	bd70      	pop	{r4, r5, r6, pc}
    610a:	0021      	movs	r1, r4
    610c:	4091      	lsls	r1, r2
    610e:	000a      	movs	r2, r1
    6110:	210b      	movs	r1, #11
    6112:	1a08      	subs	r0, r1, r0
    6114:	40c4      	lsrs	r4, r0
    6116:	055b      	lsls	r3, r3, #21
    6118:	0324      	lsls	r4, r4, #12
    611a:	0b24      	lsrs	r4, r4, #12
    611c:	0d5b      	lsrs	r3, r3, #21
    611e:	e7e3      	b.n	60e8 <__aeabi_i2d+0x30>
    6120:	2500      	movs	r5, #0
    6122:	2300      	movs	r3, #0
    6124:	2400      	movs	r4, #0
    6126:	2200      	movs	r2, #0
    6128:	e7de      	b.n	60e8 <__aeabi_i2d+0x30>
    612a:	46c0      	nop			; (mov r8, r8)
    612c:	0000041e 	.word	0x0000041e
    6130:	00000433 	.word	0x00000433
    6134:	00000413 	.word	0x00000413
    6138:	800fffff 	.word	0x800fffff

0000613c <__aeabi_ui2d>:
    613c:	b570      	push	{r4, r5, r6, lr}
    613e:	1e05      	subs	r5, r0, #0
    6140:	d028      	beq.n	6194 <__aeabi_ui2d+0x58>
    6142:	f000 f99f 	bl	6484 <__clzsi2>
    6146:	4b15      	ldr	r3, [pc, #84]	; (619c <__aeabi_ui2d+0x60>)
    6148:	4a15      	ldr	r2, [pc, #84]	; (61a0 <__aeabi_ui2d+0x64>)
    614a:	1a1b      	subs	r3, r3, r0
    614c:	1ad2      	subs	r2, r2, r3
    614e:	2a1f      	cmp	r2, #31
    6150:	dd16      	ble.n	6180 <__aeabi_ui2d+0x44>
    6152:	002c      	movs	r4, r5
    6154:	4a13      	ldr	r2, [pc, #76]	; (61a4 <__aeabi_ui2d+0x68>)
    6156:	2500      	movs	r5, #0
    6158:	1ad2      	subs	r2, r2, r3
    615a:	4094      	lsls	r4, r2
    615c:	055a      	lsls	r2, r3, #21
    615e:	0324      	lsls	r4, r4, #12
    6160:	0b24      	lsrs	r4, r4, #12
    6162:	0d52      	lsrs	r2, r2, #21
    6164:	2100      	movs	r1, #0
    6166:	0324      	lsls	r4, r4, #12
    6168:	0d0b      	lsrs	r3, r1, #20
    616a:	0b24      	lsrs	r4, r4, #12
    616c:	051b      	lsls	r3, r3, #20
    616e:	4323      	orrs	r3, r4
    6170:	4c0d      	ldr	r4, [pc, #52]	; (61a8 <__aeabi_ui2d+0x6c>)
    6172:	0512      	lsls	r2, r2, #20
    6174:	4023      	ands	r3, r4
    6176:	4313      	orrs	r3, r2
    6178:	005b      	lsls	r3, r3, #1
    617a:	0028      	movs	r0, r5
    617c:	0859      	lsrs	r1, r3, #1
    617e:	bd70      	pop	{r4, r5, r6, pc}
    6180:	210b      	movs	r1, #11
    6182:	002c      	movs	r4, r5
    6184:	1a08      	subs	r0, r1, r0
    6186:	40c4      	lsrs	r4, r0
    6188:	4095      	lsls	r5, r2
    618a:	0324      	lsls	r4, r4, #12
    618c:	055a      	lsls	r2, r3, #21
    618e:	0b24      	lsrs	r4, r4, #12
    6190:	0d52      	lsrs	r2, r2, #21
    6192:	e7e7      	b.n	6164 <__aeabi_ui2d+0x28>
    6194:	2200      	movs	r2, #0
    6196:	2400      	movs	r4, #0
    6198:	e7e4      	b.n	6164 <__aeabi_ui2d+0x28>
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	0000041e 	.word	0x0000041e
    61a0:	00000433 	.word	0x00000433
    61a4:	00000413 	.word	0x00000413
    61a8:	800fffff 	.word	0x800fffff

000061ac <__aeabi_f2d>:
    61ac:	0042      	lsls	r2, r0, #1
    61ae:	0e12      	lsrs	r2, r2, #24
    61b0:	1c51      	adds	r1, r2, #1
    61b2:	0243      	lsls	r3, r0, #9
    61b4:	b2c9      	uxtb	r1, r1
    61b6:	b570      	push	{r4, r5, r6, lr}
    61b8:	0a5d      	lsrs	r5, r3, #9
    61ba:	0fc4      	lsrs	r4, r0, #31
    61bc:	2901      	cmp	r1, #1
    61be:	dd15      	ble.n	61ec <__aeabi_f2d+0x40>
    61c0:	21e0      	movs	r1, #224	; 0xe0
    61c2:	0089      	lsls	r1, r1, #2
    61c4:	468c      	mov	ip, r1
    61c6:	076d      	lsls	r5, r5, #29
    61c8:	0b1b      	lsrs	r3, r3, #12
    61ca:	4462      	add	r2, ip
    61cc:	2100      	movs	r1, #0
    61ce:	0028      	movs	r0, r5
    61d0:	0d0d      	lsrs	r5, r1, #20
    61d2:	052d      	lsls	r5, r5, #20
    61d4:	432b      	orrs	r3, r5
    61d6:	4d1c      	ldr	r5, [pc, #112]	; (6248 <__aeabi_f2d+0x9c>)
    61d8:	0552      	lsls	r2, r2, #21
    61da:	402b      	ands	r3, r5
    61dc:	0852      	lsrs	r2, r2, #1
    61de:	4313      	orrs	r3, r2
    61e0:	005b      	lsls	r3, r3, #1
    61e2:	07e4      	lsls	r4, r4, #31
    61e4:	085b      	lsrs	r3, r3, #1
    61e6:	4323      	orrs	r3, r4
    61e8:	0019      	movs	r1, r3
    61ea:	bd70      	pop	{r4, r5, r6, pc}
    61ec:	2a00      	cmp	r2, #0
    61ee:	d115      	bne.n	621c <__aeabi_f2d+0x70>
    61f0:	2d00      	cmp	r5, #0
    61f2:	d01f      	beq.n	6234 <__aeabi_f2d+0x88>
    61f4:	0028      	movs	r0, r5
    61f6:	f000 f945 	bl	6484 <__clzsi2>
    61fa:	280a      	cmp	r0, #10
    61fc:	dc1d      	bgt.n	623a <__aeabi_f2d+0x8e>
    61fe:	230b      	movs	r3, #11
    6200:	002a      	movs	r2, r5
    6202:	1a1b      	subs	r3, r3, r0
    6204:	40da      	lsrs	r2, r3
    6206:	0013      	movs	r3, r2
    6208:	0002      	movs	r2, r0
    620a:	3215      	adds	r2, #21
    620c:	4095      	lsls	r5, r2
    620e:	4a0f      	ldr	r2, [pc, #60]	; (624c <__aeabi_f2d+0xa0>)
    6210:	031b      	lsls	r3, r3, #12
    6212:	1a12      	subs	r2, r2, r0
    6214:	0552      	lsls	r2, r2, #21
    6216:	0b1b      	lsrs	r3, r3, #12
    6218:	0d52      	lsrs	r2, r2, #21
    621a:	e7d7      	b.n	61cc <__aeabi_f2d+0x20>
    621c:	2d00      	cmp	r5, #0
    621e:	d006      	beq.n	622e <__aeabi_f2d+0x82>
    6220:	2280      	movs	r2, #128	; 0x80
    6222:	0b1b      	lsrs	r3, r3, #12
    6224:	0312      	lsls	r2, r2, #12
    6226:	4313      	orrs	r3, r2
    6228:	076d      	lsls	r5, r5, #29
    622a:	4a09      	ldr	r2, [pc, #36]	; (6250 <__aeabi_f2d+0xa4>)
    622c:	e7ce      	b.n	61cc <__aeabi_f2d+0x20>
    622e:	4a08      	ldr	r2, [pc, #32]	; (6250 <__aeabi_f2d+0xa4>)
    6230:	2300      	movs	r3, #0
    6232:	e7cb      	b.n	61cc <__aeabi_f2d+0x20>
    6234:	2200      	movs	r2, #0
    6236:	2300      	movs	r3, #0
    6238:	e7c8      	b.n	61cc <__aeabi_f2d+0x20>
    623a:	0003      	movs	r3, r0
    623c:	3b0b      	subs	r3, #11
    623e:	409d      	lsls	r5, r3
    6240:	002b      	movs	r3, r5
    6242:	2500      	movs	r5, #0
    6244:	e7e3      	b.n	620e <__aeabi_f2d+0x62>
    6246:	46c0      	nop			; (mov r8, r8)
    6248:	800fffff 	.word	0x800fffff
    624c:	00000389 	.word	0x00000389
    6250:	000007ff 	.word	0x000007ff

00006254 <__aeabi_d2f>:
    6254:	004b      	lsls	r3, r1, #1
    6256:	b570      	push	{r4, r5, r6, lr}
    6258:	0d5e      	lsrs	r6, r3, #21
    625a:	030c      	lsls	r4, r1, #12
    625c:	1c75      	adds	r5, r6, #1
    625e:	0a64      	lsrs	r4, r4, #9
    6260:	0f42      	lsrs	r2, r0, #29
    6262:	056d      	lsls	r5, r5, #21
    6264:	4322      	orrs	r2, r4
    6266:	0fc9      	lsrs	r1, r1, #31
    6268:	00c4      	lsls	r4, r0, #3
    626a:	0d6d      	lsrs	r5, r5, #21
    626c:	2d01      	cmp	r5, #1
    626e:	dd2a      	ble.n	62c6 <__aeabi_d2f+0x72>
    6270:	4b3b      	ldr	r3, [pc, #236]	; (6360 <__aeabi_d2f+0x10c>)
    6272:	18f3      	adds	r3, r6, r3
    6274:	2bfe      	cmp	r3, #254	; 0xfe
    6276:	dc1a      	bgt.n	62ae <__aeabi_d2f+0x5a>
    6278:	2b00      	cmp	r3, #0
    627a:	dd42      	ble.n	6302 <__aeabi_d2f+0xae>
    627c:	0180      	lsls	r0, r0, #6
    627e:	1e45      	subs	r5, r0, #1
    6280:	41a8      	sbcs	r0, r5
    6282:	00d2      	lsls	r2, r2, #3
    6284:	4310      	orrs	r0, r2
    6286:	0f62      	lsrs	r2, r4, #29
    6288:	4302      	orrs	r2, r0
    628a:	0750      	lsls	r0, r2, #29
    628c:	d004      	beq.n	6298 <__aeabi_d2f+0x44>
    628e:	200f      	movs	r0, #15
    6290:	4010      	ands	r0, r2
    6292:	2804      	cmp	r0, #4
    6294:	d000      	beq.n	6298 <__aeabi_d2f+0x44>
    6296:	3204      	adds	r2, #4
    6298:	2080      	movs	r0, #128	; 0x80
    629a:	04c0      	lsls	r0, r0, #19
    629c:	4010      	ands	r0, r2
    629e:	d021      	beq.n	62e4 <__aeabi_d2f+0x90>
    62a0:	3301      	adds	r3, #1
    62a2:	2bff      	cmp	r3, #255	; 0xff
    62a4:	d003      	beq.n	62ae <__aeabi_d2f+0x5a>
    62a6:	0192      	lsls	r2, r2, #6
    62a8:	0a52      	lsrs	r2, r2, #9
    62aa:	b2db      	uxtb	r3, r3
    62ac:	e001      	b.n	62b2 <__aeabi_d2f+0x5e>
    62ae:	23ff      	movs	r3, #255	; 0xff
    62b0:	2200      	movs	r2, #0
    62b2:	0252      	lsls	r2, r2, #9
    62b4:	0a52      	lsrs	r2, r2, #9
    62b6:	05db      	lsls	r3, r3, #23
    62b8:	4313      	orrs	r3, r2
    62ba:	005b      	lsls	r3, r3, #1
    62bc:	07c9      	lsls	r1, r1, #31
    62be:	085b      	lsrs	r3, r3, #1
    62c0:	430b      	orrs	r3, r1
    62c2:	0018      	movs	r0, r3
    62c4:	bd70      	pop	{r4, r5, r6, pc}
    62c6:	2e00      	cmp	r6, #0
    62c8:	d007      	beq.n	62da <__aeabi_d2f+0x86>
    62ca:	4314      	orrs	r4, r2
    62cc:	d0ef      	beq.n	62ae <__aeabi_d2f+0x5a>
    62ce:	2080      	movs	r0, #128	; 0x80
    62d0:	00d2      	lsls	r2, r2, #3
    62d2:	0480      	lsls	r0, r0, #18
    62d4:	4302      	orrs	r2, r0
    62d6:	23ff      	movs	r3, #255	; 0xff
    62d8:	e7d7      	b.n	628a <__aeabi_d2f+0x36>
    62da:	4322      	orrs	r2, r4
    62dc:	2300      	movs	r3, #0
    62de:	2a00      	cmp	r2, #0
    62e0:	d003      	beq.n	62ea <__aeabi_d2f+0x96>
    62e2:	2205      	movs	r2, #5
    62e4:	08d2      	lsrs	r2, r2, #3
    62e6:	2bff      	cmp	r3, #255	; 0xff
    62e8:	d003      	beq.n	62f2 <__aeabi_d2f+0x9e>
    62ea:	0252      	lsls	r2, r2, #9
    62ec:	0a52      	lsrs	r2, r2, #9
    62ee:	b2db      	uxtb	r3, r3
    62f0:	e7df      	b.n	62b2 <__aeabi_d2f+0x5e>
    62f2:	2a00      	cmp	r2, #0
    62f4:	d032      	beq.n	635c <__aeabi_d2f+0x108>
    62f6:	2080      	movs	r0, #128	; 0x80
    62f8:	03c0      	lsls	r0, r0, #15
    62fa:	4302      	orrs	r2, r0
    62fc:	0252      	lsls	r2, r2, #9
    62fe:	0a52      	lsrs	r2, r2, #9
    6300:	e7d7      	b.n	62b2 <__aeabi_d2f+0x5e>
    6302:	0018      	movs	r0, r3
    6304:	3017      	adds	r0, #23
    6306:	db14      	blt.n	6332 <__aeabi_d2f+0xde>
    6308:	2080      	movs	r0, #128	; 0x80
    630a:	0400      	lsls	r0, r0, #16
    630c:	4302      	orrs	r2, r0
    630e:	201e      	movs	r0, #30
    6310:	1ac0      	subs	r0, r0, r3
    6312:	281f      	cmp	r0, #31
    6314:	dc0f      	bgt.n	6336 <__aeabi_d2f+0xe2>
    6316:	0025      	movs	r5, r4
    6318:	4b12      	ldr	r3, [pc, #72]	; (6364 <__aeabi_d2f+0x110>)
    631a:	18f3      	adds	r3, r6, r3
    631c:	409d      	lsls	r5, r3
    631e:	1e6e      	subs	r6, r5, #1
    6320:	41b5      	sbcs	r5, r6
    6322:	409a      	lsls	r2, r3
    6324:	002b      	movs	r3, r5
    6326:	4313      	orrs	r3, r2
    6328:	0022      	movs	r2, r4
    632a:	40c2      	lsrs	r2, r0
    632c:	431a      	orrs	r2, r3
    632e:	2300      	movs	r3, #0
    6330:	e7ab      	b.n	628a <__aeabi_d2f+0x36>
    6332:	2300      	movs	r3, #0
    6334:	e7d5      	b.n	62e2 <__aeabi_d2f+0x8e>
    6336:	2502      	movs	r5, #2
    6338:	426d      	negs	r5, r5
    633a:	1aeb      	subs	r3, r5, r3
    633c:	0015      	movs	r5, r2
    633e:	40dd      	lsrs	r5, r3
    6340:	2820      	cmp	r0, #32
    6342:	d009      	beq.n	6358 <__aeabi_d2f+0x104>
    6344:	4b08      	ldr	r3, [pc, #32]	; (6368 <__aeabi_d2f+0x114>)
    6346:	18f3      	adds	r3, r6, r3
    6348:	409a      	lsls	r2, r3
    634a:	4314      	orrs	r4, r2
    634c:	1e62      	subs	r2, r4, #1
    634e:	4194      	sbcs	r4, r2
    6350:	0022      	movs	r2, r4
    6352:	2300      	movs	r3, #0
    6354:	432a      	orrs	r2, r5
    6356:	e798      	b.n	628a <__aeabi_d2f+0x36>
    6358:	2200      	movs	r2, #0
    635a:	e7f6      	b.n	634a <__aeabi_d2f+0xf6>
    635c:	2200      	movs	r2, #0
    635e:	e7a8      	b.n	62b2 <__aeabi_d2f+0x5e>
    6360:	fffffc80 	.word	0xfffffc80
    6364:	fffffc82 	.word	0xfffffc82
    6368:	fffffca2 	.word	0xfffffca2

0000636c <__aeabi_uidiv>:
    636c:	2200      	movs	r2, #0
    636e:	0843      	lsrs	r3, r0, #1
    6370:	428b      	cmp	r3, r1
    6372:	d374      	bcc.n	645e <__aeabi_uidiv+0xf2>
    6374:	0903      	lsrs	r3, r0, #4
    6376:	428b      	cmp	r3, r1
    6378:	d35f      	bcc.n	643a <__aeabi_uidiv+0xce>
    637a:	0a03      	lsrs	r3, r0, #8
    637c:	428b      	cmp	r3, r1
    637e:	d344      	bcc.n	640a <__aeabi_uidiv+0x9e>
    6380:	0b03      	lsrs	r3, r0, #12
    6382:	428b      	cmp	r3, r1
    6384:	d328      	bcc.n	63d8 <__aeabi_uidiv+0x6c>
    6386:	0c03      	lsrs	r3, r0, #16
    6388:	428b      	cmp	r3, r1
    638a:	d30d      	bcc.n	63a8 <__aeabi_uidiv+0x3c>
    638c:	22ff      	movs	r2, #255	; 0xff
    638e:	0209      	lsls	r1, r1, #8
    6390:	ba12      	rev	r2, r2
    6392:	0c03      	lsrs	r3, r0, #16
    6394:	428b      	cmp	r3, r1
    6396:	d302      	bcc.n	639e <__aeabi_uidiv+0x32>
    6398:	1212      	asrs	r2, r2, #8
    639a:	0209      	lsls	r1, r1, #8
    639c:	d065      	beq.n	646a <__aeabi_uidiv+0xfe>
    639e:	0b03      	lsrs	r3, r0, #12
    63a0:	428b      	cmp	r3, r1
    63a2:	d319      	bcc.n	63d8 <__aeabi_uidiv+0x6c>
    63a4:	e000      	b.n	63a8 <__aeabi_uidiv+0x3c>
    63a6:	0a09      	lsrs	r1, r1, #8
    63a8:	0bc3      	lsrs	r3, r0, #15
    63aa:	428b      	cmp	r3, r1
    63ac:	d301      	bcc.n	63b2 <__aeabi_uidiv+0x46>
    63ae:	03cb      	lsls	r3, r1, #15
    63b0:	1ac0      	subs	r0, r0, r3
    63b2:	4152      	adcs	r2, r2
    63b4:	0b83      	lsrs	r3, r0, #14
    63b6:	428b      	cmp	r3, r1
    63b8:	d301      	bcc.n	63be <__aeabi_uidiv+0x52>
    63ba:	038b      	lsls	r3, r1, #14
    63bc:	1ac0      	subs	r0, r0, r3
    63be:	4152      	adcs	r2, r2
    63c0:	0b43      	lsrs	r3, r0, #13
    63c2:	428b      	cmp	r3, r1
    63c4:	d301      	bcc.n	63ca <__aeabi_uidiv+0x5e>
    63c6:	034b      	lsls	r3, r1, #13
    63c8:	1ac0      	subs	r0, r0, r3
    63ca:	4152      	adcs	r2, r2
    63cc:	0b03      	lsrs	r3, r0, #12
    63ce:	428b      	cmp	r3, r1
    63d0:	d301      	bcc.n	63d6 <__aeabi_uidiv+0x6a>
    63d2:	030b      	lsls	r3, r1, #12
    63d4:	1ac0      	subs	r0, r0, r3
    63d6:	4152      	adcs	r2, r2
    63d8:	0ac3      	lsrs	r3, r0, #11
    63da:	428b      	cmp	r3, r1
    63dc:	d301      	bcc.n	63e2 <__aeabi_uidiv+0x76>
    63de:	02cb      	lsls	r3, r1, #11
    63e0:	1ac0      	subs	r0, r0, r3
    63e2:	4152      	adcs	r2, r2
    63e4:	0a83      	lsrs	r3, r0, #10
    63e6:	428b      	cmp	r3, r1
    63e8:	d301      	bcc.n	63ee <__aeabi_uidiv+0x82>
    63ea:	028b      	lsls	r3, r1, #10
    63ec:	1ac0      	subs	r0, r0, r3
    63ee:	4152      	adcs	r2, r2
    63f0:	0a43      	lsrs	r3, r0, #9
    63f2:	428b      	cmp	r3, r1
    63f4:	d301      	bcc.n	63fa <__aeabi_uidiv+0x8e>
    63f6:	024b      	lsls	r3, r1, #9
    63f8:	1ac0      	subs	r0, r0, r3
    63fa:	4152      	adcs	r2, r2
    63fc:	0a03      	lsrs	r3, r0, #8
    63fe:	428b      	cmp	r3, r1
    6400:	d301      	bcc.n	6406 <__aeabi_uidiv+0x9a>
    6402:	020b      	lsls	r3, r1, #8
    6404:	1ac0      	subs	r0, r0, r3
    6406:	4152      	adcs	r2, r2
    6408:	d2cd      	bcs.n	63a6 <__aeabi_uidiv+0x3a>
    640a:	09c3      	lsrs	r3, r0, #7
    640c:	428b      	cmp	r3, r1
    640e:	d301      	bcc.n	6414 <__aeabi_uidiv+0xa8>
    6410:	01cb      	lsls	r3, r1, #7
    6412:	1ac0      	subs	r0, r0, r3
    6414:	4152      	adcs	r2, r2
    6416:	0983      	lsrs	r3, r0, #6
    6418:	428b      	cmp	r3, r1
    641a:	d301      	bcc.n	6420 <__aeabi_uidiv+0xb4>
    641c:	018b      	lsls	r3, r1, #6
    641e:	1ac0      	subs	r0, r0, r3
    6420:	4152      	adcs	r2, r2
    6422:	0943      	lsrs	r3, r0, #5
    6424:	428b      	cmp	r3, r1
    6426:	d301      	bcc.n	642c <__aeabi_uidiv+0xc0>
    6428:	014b      	lsls	r3, r1, #5
    642a:	1ac0      	subs	r0, r0, r3
    642c:	4152      	adcs	r2, r2
    642e:	0903      	lsrs	r3, r0, #4
    6430:	428b      	cmp	r3, r1
    6432:	d301      	bcc.n	6438 <__aeabi_uidiv+0xcc>
    6434:	010b      	lsls	r3, r1, #4
    6436:	1ac0      	subs	r0, r0, r3
    6438:	4152      	adcs	r2, r2
    643a:	08c3      	lsrs	r3, r0, #3
    643c:	428b      	cmp	r3, r1
    643e:	d301      	bcc.n	6444 <__aeabi_uidiv+0xd8>
    6440:	00cb      	lsls	r3, r1, #3
    6442:	1ac0      	subs	r0, r0, r3
    6444:	4152      	adcs	r2, r2
    6446:	0883      	lsrs	r3, r0, #2
    6448:	428b      	cmp	r3, r1
    644a:	d301      	bcc.n	6450 <__aeabi_uidiv+0xe4>
    644c:	008b      	lsls	r3, r1, #2
    644e:	1ac0      	subs	r0, r0, r3
    6450:	4152      	adcs	r2, r2
    6452:	0843      	lsrs	r3, r0, #1
    6454:	428b      	cmp	r3, r1
    6456:	d301      	bcc.n	645c <__aeabi_uidiv+0xf0>
    6458:	004b      	lsls	r3, r1, #1
    645a:	1ac0      	subs	r0, r0, r3
    645c:	4152      	adcs	r2, r2
    645e:	1a41      	subs	r1, r0, r1
    6460:	d200      	bcs.n	6464 <__aeabi_uidiv+0xf8>
    6462:	4601      	mov	r1, r0
    6464:	4152      	adcs	r2, r2
    6466:	4610      	mov	r0, r2
    6468:	4770      	bx	lr
    646a:	e7ff      	b.n	646c <__aeabi_uidiv+0x100>
    646c:	b501      	push	{r0, lr}
    646e:	2000      	movs	r0, #0
    6470:	f000 f806 	bl	6480 <__aeabi_idiv0>
    6474:	bd02      	pop	{r1, pc}
    6476:	46c0      	nop			; (mov r8, r8)

00006478 <__aeabi_uidivmod>:
    6478:	2900      	cmp	r1, #0
    647a:	d0f7      	beq.n	646c <__aeabi_uidiv+0x100>
    647c:	e776      	b.n	636c <__aeabi_uidiv>
    647e:	4770      	bx	lr

00006480 <__aeabi_idiv0>:
    6480:	4770      	bx	lr
    6482:	46c0      	nop			; (mov r8, r8)

00006484 <__clzsi2>:
    6484:	211c      	movs	r1, #28
    6486:	2301      	movs	r3, #1
    6488:	041b      	lsls	r3, r3, #16
    648a:	4298      	cmp	r0, r3
    648c:	d301      	bcc.n	6492 <__clzsi2+0xe>
    648e:	0c00      	lsrs	r0, r0, #16
    6490:	3910      	subs	r1, #16
    6492:	0a1b      	lsrs	r3, r3, #8
    6494:	4298      	cmp	r0, r3
    6496:	d301      	bcc.n	649c <__clzsi2+0x18>
    6498:	0a00      	lsrs	r0, r0, #8
    649a:	3908      	subs	r1, #8
    649c:	091b      	lsrs	r3, r3, #4
    649e:	4298      	cmp	r0, r3
    64a0:	d301      	bcc.n	64a6 <__clzsi2+0x22>
    64a2:	0900      	lsrs	r0, r0, #4
    64a4:	3904      	subs	r1, #4
    64a6:	a202      	add	r2, pc, #8	; (adr r2, 64b0 <__clzsi2+0x2c>)
    64a8:	5c10      	ldrb	r0, [r2, r0]
    64aa:	1840      	adds	r0, r0, r1
    64ac:	4770      	bx	lr
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	02020304 	.word	0x02020304
    64b4:	01010101 	.word	0x01010101
	...

000064c0 <__errno>:
    64c0:	4b01      	ldr	r3, [pc, #4]	; (64c8 <__errno+0x8>)
    64c2:	6818      	ldr	r0, [r3, #0]
    64c4:	4770      	bx	lr
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	200004a0 	.word	0x200004a0

000064cc <__libc_init_array>:
    64cc:	b570      	push	{r4, r5, r6, lr}
    64ce:	4e0d      	ldr	r6, [pc, #52]	; (6504 <__libc_init_array+0x38>)
    64d0:	4d0d      	ldr	r5, [pc, #52]	; (6508 <__libc_init_array+0x3c>)
    64d2:	2400      	movs	r4, #0
    64d4:	1bad      	subs	r5, r5, r6
    64d6:	10ad      	asrs	r5, r5, #2
    64d8:	d005      	beq.n	64e6 <__libc_init_array+0x1a>
    64da:	00a3      	lsls	r3, r4, #2
    64dc:	58f3      	ldr	r3, [r6, r3]
    64de:	3401      	adds	r4, #1
    64e0:	4798      	blx	r3
    64e2:	42a5      	cmp	r5, r4
    64e4:	d1f9      	bne.n	64da <__libc_init_array+0xe>
    64e6:	f000 fa1b 	bl	6920 <_init>
    64ea:	4e08      	ldr	r6, [pc, #32]	; (650c <__libc_init_array+0x40>)
    64ec:	4d08      	ldr	r5, [pc, #32]	; (6510 <__libc_init_array+0x44>)
    64ee:	2400      	movs	r4, #0
    64f0:	1bad      	subs	r5, r5, r6
    64f2:	10ad      	asrs	r5, r5, #2
    64f4:	d005      	beq.n	6502 <__libc_init_array+0x36>
    64f6:	00a3      	lsls	r3, r4, #2
    64f8:	58f3      	ldr	r3, [r6, r3]
    64fa:	3401      	adds	r4, #1
    64fc:	4798      	blx	r3
    64fe:	42a5      	cmp	r5, r4
    6500:	d1f9      	bne.n	64f6 <__libc_init_array+0x2a>
    6502:	bd70      	pop	{r4, r5, r6, pc}
    6504:	0000692c 	.word	0x0000692c
    6508:	0000692c 	.word	0x0000692c
    650c:	0000692c 	.word	0x0000692c
    6510:	00006934 	.word	0x00006934

00006514 <memset>:
    6514:	b570      	push	{r4, r5, r6, lr}
    6516:	0783      	lsls	r3, r0, #30
    6518:	d03f      	beq.n	659a <memset+0x86>
    651a:	1e54      	subs	r4, r2, #1
    651c:	2a00      	cmp	r2, #0
    651e:	d03b      	beq.n	6598 <memset+0x84>
    6520:	b2ce      	uxtb	r6, r1
    6522:	0003      	movs	r3, r0
    6524:	2503      	movs	r5, #3
    6526:	e003      	b.n	6530 <memset+0x1c>
    6528:	1e62      	subs	r2, r4, #1
    652a:	2c00      	cmp	r4, #0
    652c:	d034      	beq.n	6598 <memset+0x84>
    652e:	0014      	movs	r4, r2
    6530:	3301      	adds	r3, #1
    6532:	1e5a      	subs	r2, r3, #1
    6534:	7016      	strb	r6, [r2, #0]
    6536:	422b      	tst	r3, r5
    6538:	d1f6      	bne.n	6528 <memset+0x14>
    653a:	2c03      	cmp	r4, #3
    653c:	d924      	bls.n	6588 <memset+0x74>
    653e:	25ff      	movs	r5, #255	; 0xff
    6540:	400d      	ands	r5, r1
    6542:	022a      	lsls	r2, r5, #8
    6544:	4315      	orrs	r5, r2
    6546:	042a      	lsls	r2, r5, #16
    6548:	4315      	orrs	r5, r2
    654a:	2c0f      	cmp	r4, #15
    654c:	d911      	bls.n	6572 <memset+0x5e>
    654e:	0026      	movs	r6, r4
    6550:	3e10      	subs	r6, #16
    6552:	0936      	lsrs	r6, r6, #4
    6554:	3601      	adds	r6, #1
    6556:	0136      	lsls	r6, r6, #4
    6558:	001a      	movs	r2, r3
    655a:	199b      	adds	r3, r3, r6
    655c:	6015      	str	r5, [r2, #0]
    655e:	6055      	str	r5, [r2, #4]
    6560:	6095      	str	r5, [r2, #8]
    6562:	60d5      	str	r5, [r2, #12]
    6564:	3210      	adds	r2, #16
    6566:	4293      	cmp	r3, r2
    6568:	d1f8      	bne.n	655c <memset+0x48>
    656a:	220f      	movs	r2, #15
    656c:	4014      	ands	r4, r2
    656e:	2c03      	cmp	r4, #3
    6570:	d90a      	bls.n	6588 <memset+0x74>
    6572:	1f26      	subs	r6, r4, #4
    6574:	08b6      	lsrs	r6, r6, #2
    6576:	3601      	adds	r6, #1
    6578:	00b6      	lsls	r6, r6, #2
    657a:	001a      	movs	r2, r3
    657c:	199b      	adds	r3, r3, r6
    657e:	c220      	stmia	r2!, {r5}
    6580:	4293      	cmp	r3, r2
    6582:	d1fc      	bne.n	657e <memset+0x6a>
    6584:	2203      	movs	r2, #3
    6586:	4014      	ands	r4, r2
    6588:	2c00      	cmp	r4, #0
    658a:	d005      	beq.n	6598 <memset+0x84>
    658c:	b2c9      	uxtb	r1, r1
    658e:	191c      	adds	r4, r3, r4
    6590:	7019      	strb	r1, [r3, #0]
    6592:	3301      	adds	r3, #1
    6594:	429c      	cmp	r4, r3
    6596:	d1fb      	bne.n	6590 <memset+0x7c>
    6598:	bd70      	pop	{r4, r5, r6, pc}
    659a:	0014      	movs	r4, r2
    659c:	0003      	movs	r3, r0
    659e:	e7cc      	b.n	653a <memset+0x26>

000065a0 <register_fini>:
    65a0:	4b03      	ldr	r3, [pc, #12]	; (65b0 <register_fini+0x10>)
    65a2:	b510      	push	{r4, lr}
    65a4:	2b00      	cmp	r3, #0
    65a6:	d002      	beq.n	65ae <register_fini+0xe>
    65a8:	4802      	ldr	r0, [pc, #8]	; (65b4 <register_fini+0x14>)
    65aa:	f000 f805 	bl	65b8 <atexit>
    65ae:	bd10      	pop	{r4, pc}
    65b0:	00000000 	.word	0x00000000
    65b4:	000065c9 	.word	0x000065c9

000065b8 <atexit>:
    65b8:	b510      	push	{r4, lr}
    65ba:	0001      	movs	r1, r0
    65bc:	2300      	movs	r3, #0
    65be:	2200      	movs	r2, #0
    65c0:	2000      	movs	r0, #0
    65c2:	f000 f81b 	bl	65fc <__register_exitproc>
    65c6:	bd10      	pop	{r4, pc}

000065c8 <__libc_fini_array>:
    65c8:	b570      	push	{r4, r5, r6, lr}
    65ca:	4b09      	ldr	r3, [pc, #36]	; (65f0 <__libc_fini_array+0x28>)
    65cc:	4c09      	ldr	r4, [pc, #36]	; (65f4 <__libc_fini_array+0x2c>)
    65ce:	1ae4      	subs	r4, r4, r3
    65d0:	10a4      	asrs	r4, r4, #2
    65d2:	d009      	beq.n	65e8 <__libc_fini_array+0x20>
    65d4:	4a08      	ldr	r2, [pc, #32]	; (65f8 <__libc_fini_array+0x30>)
    65d6:	18a5      	adds	r5, r4, r2
    65d8:	00ad      	lsls	r5, r5, #2
    65da:	18ed      	adds	r5, r5, r3
    65dc:	682b      	ldr	r3, [r5, #0]
    65de:	3c01      	subs	r4, #1
    65e0:	4798      	blx	r3
    65e2:	3d04      	subs	r5, #4
    65e4:	2c00      	cmp	r4, #0
    65e6:	d1f9      	bne.n	65dc <__libc_fini_array+0x14>
    65e8:	f000 f9a4 	bl	6934 <_fini>
    65ec:	bd70      	pop	{r4, r5, r6, pc}
    65ee:	46c0      	nop			; (mov r8, r8)
    65f0:	00006940 	.word	0x00006940
    65f4:	00006944 	.word	0x00006944
    65f8:	3fffffff 	.word	0x3fffffff

000065fc <__register_exitproc>:
    65fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65fe:	4644      	mov	r4, r8
    6600:	465f      	mov	r7, fp
    6602:	4656      	mov	r6, sl
    6604:	464d      	mov	r5, r9
    6606:	469b      	mov	fp, r3
    6608:	4b2f      	ldr	r3, [pc, #188]	; (66c8 <__register_exitproc+0xcc>)
    660a:	b4f0      	push	{r4, r5, r6, r7}
    660c:	681c      	ldr	r4, [r3, #0]
    660e:	23a4      	movs	r3, #164	; 0xa4
    6610:	005b      	lsls	r3, r3, #1
    6612:	0005      	movs	r5, r0
    6614:	58e0      	ldr	r0, [r4, r3]
    6616:	000e      	movs	r6, r1
    6618:	4690      	mov	r8, r2
    661a:	2800      	cmp	r0, #0
    661c:	d04b      	beq.n	66b6 <__register_exitproc+0xba>
    661e:	6843      	ldr	r3, [r0, #4]
    6620:	2b1f      	cmp	r3, #31
    6622:	dc0d      	bgt.n	6640 <__register_exitproc+0x44>
    6624:	1c5c      	adds	r4, r3, #1
    6626:	2d00      	cmp	r5, #0
    6628:	d121      	bne.n	666e <__register_exitproc+0x72>
    662a:	3302      	adds	r3, #2
    662c:	009b      	lsls	r3, r3, #2
    662e:	6044      	str	r4, [r0, #4]
    6630:	501e      	str	r6, [r3, r0]
    6632:	2000      	movs	r0, #0
    6634:	bc3c      	pop	{r2, r3, r4, r5}
    6636:	4690      	mov	r8, r2
    6638:	4699      	mov	r9, r3
    663a:	46a2      	mov	sl, r4
    663c:	46ab      	mov	fp, r5
    663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6640:	4b22      	ldr	r3, [pc, #136]	; (66cc <__register_exitproc+0xd0>)
    6642:	2b00      	cmp	r3, #0
    6644:	d03c      	beq.n	66c0 <__register_exitproc+0xc4>
    6646:	20c8      	movs	r0, #200	; 0xc8
    6648:	0040      	lsls	r0, r0, #1
    664a:	e000      	b.n	664e <__register_exitproc+0x52>
    664c:	bf00      	nop
    664e:	2800      	cmp	r0, #0
    6650:	d036      	beq.n	66c0 <__register_exitproc+0xc4>
    6652:	22a4      	movs	r2, #164	; 0xa4
    6654:	2300      	movs	r3, #0
    6656:	0052      	lsls	r2, r2, #1
    6658:	58a1      	ldr	r1, [r4, r2]
    665a:	6043      	str	r3, [r0, #4]
    665c:	6001      	str	r1, [r0, #0]
    665e:	50a0      	str	r0, [r4, r2]
    6660:	3240      	adds	r2, #64	; 0x40
    6662:	5083      	str	r3, [r0, r2]
    6664:	3204      	adds	r2, #4
    6666:	5083      	str	r3, [r0, r2]
    6668:	2401      	movs	r4, #1
    666a:	2d00      	cmp	r5, #0
    666c:	d0dd      	beq.n	662a <__register_exitproc+0x2e>
    666e:	009a      	lsls	r2, r3, #2
    6670:	4691      	mov	r9, r2
    6672:	4481      	add	r9, r0
    6674:	4642      	mov	r2, r8
    6676:	2188      	movs	r1, #136	; 0x88
    6678:	464f      	mov	r7, r9
    667a:	507a      	str	r2, [r7, r1]
    667c:	22c4      	movs	r2, #196	; 0xc4
    667e:	0052      	lsls	r2, r2, #1
    6680:	4690      	mov	r8, r2
    6682:	4480      	add	r8, r0
    6684:	4642      	mov	r2, r8
    6686:	3987      	subs	r1, #135	; 0x87
    6688:	4099      	lsls	r1, r3
    668a:	6812      	ldr	r2, [r2, #0]
    668c:	468a      	mov	sl, r1
    668e:	430a      	orrs	r2, r1
    6690:	4694      	mov	ip, r2
    6692:	4642      	mov	r2, r8
    6694:	4661      	mov	r1, ip
    6696:	6011      	str	r1, [r2, #0]
    6698:	2284      	movs	r2, #132	; 0x84
    669a:	4649      	mov	r1, r9
    669c:	465f      	mov	r7, fp
    669e:	0052      	lsls	r2, r2, #1
    66a0:	508f      	str	r7, [r1, r2]
    66a2:	2d02      	cmp	r5, #2
    66a4:	d1c1      	bne.n	662a <__register_exitproc+0x2e>
    66a6:	0002      	movs	r2, r0
    66a8:	4655      	mov	r5, sl
    66aa:	328d      	adds	r2, #141	; 0x8d
    66ac:	32ff      	adds	r2, #255	; 0xff
    66ae:	6811      	ldr	r1, [r2, #0]
    66b0:	430d      	orrs	r5, r1
    66b2:	6015      	str	r5, [r2, #0]
    66b4:	e7b9      	b.n	662a <__register_exitproc+0x2e>
    66b6:	0020      	movs	r0, r4
    66b8:	304d      	adds	r0, #77	; 0x4d
    66ba:	30ff      	adds	r0, #255	; 0xff
    66bc:	50e0      	str	r0, [r4, r3]
    66be:	e7ae      	b.n	661e <__register_exitproc+0x22>
    66c0:	2001      	movs	r0, #1
    66c2:	4240      	negs	r0, r0
    66c4:	e7b6      	b.n	6634 <__register_exitproc+0x38>
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	0000691c 	.word	0x0000691c
    66cc:	00000000 	.word	0x00000000

000066d0 <spi2MOSI>:
    66d0:	0c000002 00000200                                .....

000066d5 <spi2SCK>:
    66d5:	0e000002 00000200                                .....

000066da <spi2MISO>:
    66da:	0d000002 8d200000                                ......

000066e0 <lookupTable.12503>:
    66e0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    66f0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    6700:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    6710:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    6720:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    6730:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    6740:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    6750:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    6760:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    6770:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    6780:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    6790:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    67a0:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    67b0:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    67c0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    67d0:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    67e0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    67f0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    6800:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    6810:	000f048e                                ....

00006814 <senseBatPin>:
    6814:	06000000 01000106                                .....

00006819 <senseAPin>:
    6819:	03010001 0100010b                                .....

0000681e <senseBPin>:
    681e:	02010001 0000000a                                .....

00006823 <senseCPin>:
    6823:	03000000 00000001                                .....

00006828 <senseDPin>:
    6828:	02000000 00000000                                .....

0000682d <analogAccelPin>:
    682d:	07000000 00000207                                .....

00006832 <spi2MOSI>:
    6832:	0c000002 00000200                                .....

00006837 <spi2SCK>:
    6837:	0e000002 776f7000 00000000 00000000     .....pow........
	...

00006848 <TWO52>:
    6848:	00000000 43300000 00000000 c3300000     ......0C......0.
    6858:	000040e4 00004042 00004042 00004040     .@..B@..B@..@@..
    6868:	000040d6 000040d6 000040cc 00004040     .@...@...@..@@..
    6878:	000040d6 000040cc 000040d6 00004040     .@...@...@..@@..
    6888:	000040dc 000040dc 000040dc 00004166     .@...@...@..fA..
    6898:	00004e18 00004ce6 00004dec 00004cdc     .N...L...M...L..
    68a8:	00004dec 00004df6 00004dec 00004cdc     .M...M...M...L..
    68b8:	00004ce6 00004ce6 00004df6 00004cdc     .L...L...M...L..
    68c8:	00004cd2 00004cd2 00004cd2 00005048     .L...L...L..HP..
    68d8:	00005660 00005520 00005520 0000551e     `V.. U.. U...U..
    68e8:	00005638 00005638 0000562a 0000551e     8V..8V..*V...U..
    68f8:	00005638 0000562a 00005638 0000551e     8V..*V..8V...U..
    6908:	00005640 00005640 00005640 00005840     @V..@V..@V..@X..
    6918:	00000043                                C...

0000691c <_global_impure_ptr>:
    691c:	20000078                                x.. 

00006920 <_init>:
    6920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6922:	46c0      	nop			; (mov r8, r8)
    6924:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6926:	bc08      	pop	{r3}
    6928:	469e      	mov	lr, r3
    692a:	4770      	bx	lr

0000692c <__init_array_start>:
    692c:	000065a1 	.word	0x000065a1

00006930 <__frame_dummy_init_array_entry>:
    6930:	000000dd                                ....

00006934 <_fini>:
    6934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	bcf8      	pop	{r3, r4, r5, r6, r7}
    693a:	bc08      	pop	{r3}
    693c:	469e      	mov	lr, r3
    693e:	4770      	bx	lr

00006940 <__fini_array_start>:
    6940:	000000b5 	.word	0x000000b5
