
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003568  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00003568  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  000039b0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003b60  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b90c  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022f7  00000000  00000000  0003bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001db0  00000000  00000000  0003e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000398  00000000  00000000  0003fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c88  00000000  00000000  00040204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015700  00000000  00000000  00040e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008853  00000000  00000000  0005658c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007270d  00000000  00000000  0005eddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c10  00000000  00000000  000d14ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000fdd 	.word	0x00000fdd
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	0000107d 	.word	0x0000107d
      90:	000010e5 	.word	0x000010e5
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00003568 	.word	0x00003568

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00003568 	.word	0x00003568
     10c:	00003568 	.word	0x00003568
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00003568 	.word	0x00003568
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000318d 	.word	0x0000318d
     1d0:	00000aa5 	.word	0x00000aa5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SEreadSample>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e8:	4f17      	ldr	r7, [pc, #92]	; (248 <AT25SEreadSample+0x64>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	9201      	str	r2, [sp, #4]
     1ee:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f0:	4c16      	ldr	r4, [pc, #88]	; (24c <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     1f2:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     1f4:	2001      	movs	r0, #1
     1f6:	617b      	str	r3, [r7, #20]
     1f8:	210b      	movs	r1, #11
     1fa:	47a0      	blx	r4
     1fc:	4d14      	ldr	r5, [pc, #80]	; (250 <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     1fe:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     200:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     202:	b2c9      	uxtb	r1, r1
     204:	2001      	movs	r0, #1
     206:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     208:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     20a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     20c:	b2c9      	uxtb	r1, r1
     20e:	2001      	movs	r0, #1
     210:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     212:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     214:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     216:	2001      	movs	r0, #1
     218:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21a:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     21c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     21e:	2001      	movs	r0, #1
     220:	47a0      	blx	r4
     222:	9b00      	ldr	r3, [sp, #0]
     224:	9e01      	ldr	r6, [sp, #4]
     226:	7028      	strb	r0, [r5, #0]
     228:	18f3      	adds	r3, r6, r3
     22a:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     22c:	9b00      	ldr	r3, [sp, #0]
     22e:	429e      	cmp	r6, r3
     230:	d005      	beq.n	23e <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     232:	7829      	ldrb	r1, [r5, #0]
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	7030      	strb	r0, [r6, #0]
     23a:	3601      	adds	r6, #1
     23c:	e7f6      	b.n	22c <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     23e:	2380      	movs	r3, #128	; 0x80
     240:	02db      	lsls	r3, r3, #11
     242:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     244:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000018d1 	.word	0x000018d1
     250:	20000460 	.word	0x20000460

00000254 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4f16      	ldr	r7, [pc, #88]	; (2b4 <AT25SEreadPage+0x60>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     25e:	4c16      	ldr	r4, [pc, #88]	; (2b8 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     260:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     262:	2001      	movs	r0, #1
     264:	617b      	str	r3, [r7, #20]
     266:	210b      	movs	r1, #11
     268:	47a0      	blx	r4
     26a:	4d14      	ldr	r5, [pc, #80]	; (2bc <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     26c:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     26e:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     276:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     278:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     27a:	b2c9      	uxtb	r1, r1
     27c:	2001      	movs	r0, #1
     27e:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     280:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     282:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     288:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     28c:	2001      	movs	r0, #1
     28e:	47a0      	blx	r4
     290:	9e01      	ldr	r6, [sp, #4]
     292:	7028      	strb	r0, [r5, #0]
     294:	1c73      	adds	r3, r6, #1
     296:	33ff      	adds	r3, #255	; 0xff
     298:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     29a:	7829      	ldrb	r1, [r5, #0]
     29c:	2001      	movs	r0, #1
     29e:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     2a0:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     2a2:	7030      	strb	r0, [r6, #0]
     2a4:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     2a6:	429e      	cmp	r6, r3
     2a8:	d1f7      	bne.n	29a <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	02db      	lsls	r3, r3, #11
     2ae:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     2b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	41004400 	.word	0x41004400
     2b8:	000018d1 	.word	0x000018d1
     2bc:	20000460 	.word	0x20000460

000002c0 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2c0:	2280      	movs	r2, #128	; 0x80
     2c2:	4b28      	ldr	r3, [pc, #160]	; (364 <readMS5803AdcResults+0xa4>)
     2c4:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     2c6:	b5f0      	push	{r4, r5, r6, r7, lr}
     2c8:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2ca:	2300      	movs	r3, #0
     2cc:	4d26      	ldr	r5, [pc, #152]	; (368 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     2ce:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     2d0:	9300      	str	r3, [sp, #0]
     2d2:	786b      	ldrb	r3, [r5, #1]
     2d4:	7828      	ldrb	r0, [r5, #0]
     2d6:	78aa      	ldrb	r2, [r5, #2]
     2d8:	021b      	lsls	r3, r3, #8
     2da:	4303      	orrs	r3, r0
     2dc:	0412      	lsls	r2, r2, #16
     2de:	0019      	movs	r1, r3
     2e0:	0013      	movs	r3, r2
     2e2:	430b      	orrs	r3, r1
     2e4:	79a9      	ldrb	r1, [r5, #6]
     2e6:	796f      	ldrb	r7, [r5, #5]
     2e8:	79ec      	ldrb	r4, [r5, #7]
     2ea:	0209      	lsls	r1, r1, #8
     2ec:	4339      	orrs	r1, r7
     2ee:	0424      	lsls	r4, r4, #16
     2f0:	0008      	movs	r0, r1
     2f2:	0021      	movs	r1, r4
     2f4:	7a2c      	ldrb	r4, [r5, #8]
     2f6:	78ea      	ldrb	r2, [r5, #3]
     2f8:	7a6f      	ldrb	r7, [r5, #9]
     2fa:	4301      	orrs	r1, r0
     2fc:	0624      	lsls	r4, r4, #24
     2fe:	430c      	orrs	r4, r1
     300:	0612      	lsls	r2, r2, #24
     302:	431a      	orrs	r2, r3
     304:	0020      	movs	r0, r4
     306:	792b      	ldrb	r3, [r5, #4]
     308:	0039      	movs	r1, r7
     30a:	4e18      	ldr	r6, [pc, #96]	; (36c <readMS5803AdcResults+0xac>)
     30c:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     30e:	7aeb      	ldrb	r3, [r5, #11]
     310:	7aa9      	ldrb	r1, [r5, #10]
     312:	021b      	lsls	r3, r3, #8
     314:	430b      	orrs	r3, r1
     316:	001a      	movs	r2, r3
     318:	7b2b      	ldrb	r3, [r5, #12]
     31a:	4e15      	ldr	r6, [pc, #84]	; (370 <readMS5803AdcResults+0xb0>)
     31c:	041b      	lsls	r3, r3, #16
     31e:	4313      	orrs	r3, r2
     320:	7b6a      	ldrb	r2, [r5, #13]
     322:	7bad      	ldrb	r5, [r5, #14]
     324:	0612      	lsls	r2, r2, #24
     326:	431a      	orrs	r2, r3
     328:	0039      	movs	r1, r7
     32a:	002b      	movs	r3, r5
     32c:	0020      	movs	r0, r4
     32e:	9203      	str	r2, [sp, #12]
     330:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     332:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     334:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     336:	002b      	movs	r3, r5
     338:	0039      	movs	r1, r7
     33a:	0020      	movs	r0, r4
     33c:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     33e:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     340:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     342:	002b      	movs	r3, r5
     344:	0020      	movs	r0, r4
     346:	0039      	movs	r1, r7
     348:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     34a:	2280      	movs	r2, #128	; 0x80
     34c:	4b05      	ldr	r3, [pc, #20]	; (364 <readMS5803AdcResults+0xa4>)
     34e:	0212      	lsls	r2, r2, #8
     350:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     352:	9b04      	ldr	r3, [sp, #16]
     354:	9a05      	ldr	r2, [sp, #20]
     356:	041b      	lsls	r3, r3, #16
     358:	0215      	lsls	r5, r2, #8
     35a:	431d      	orrs	r5, r3
     35c:	4328      	orrs	r0, r5
}
     35e:	b007      	add	sp, #28
     360:	bdf0      	pop	{r4, r5, r6, r7, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	41004400 	.word	0x41004400
     368:	00003390 	.word	0x00003390
     36c:	00000d0d 	.word	0x00000d0d
     370:	00000d79 	.word	0x00000d79

00000374 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     376:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     378:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     37a:	8803      	ldrh	r3, [r0, #0]
     37c:	aa04      	add	r2, sp, #16
     37e:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     380:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     382:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     384:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     386:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     388:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     38a:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     38c:	88c3      	ldrh	r3, [r0, #6]
     38e:	9401      	str	r4, [sp, #4]
     390:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     392:	8903      	ldrh	r3, [r0, #8]
     394:	aa07      	add	r2, sp, #28
     396:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     398:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     39a:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     39c:	8941      	ldrh	r1, [r0, #10]
     39e:	a804      	add	r0, sp, #16
     3a0:	181b      	adds	r3, r3, r0
     3a2:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     3a4:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     3a6:	693a      	ldr	r2, [r7, #16]
     3a8:	0236      	lsls	r6, r6, #8
     3aa:	8818      	ldrh	r0, [r3, #0]
     3ac:	1b96      	subs	r6, r2, r6
     3ae:	17f2      	asrs	r2, r6, #31
     3b0:	4c2a      	ldr	r4, [pc, #168]	; (45c <ConvertPressureTemperature+0xe8>)
     3b2:	9203      	str	r2, [sp, #12]
     3b4:	17f3      	asrs	r3, r6, #31
     3b6:	0032      	movs	r2, r6
     3b8:	b280      	uxth	r0, r0
     3ba:	2100      	movs	r1, #0
     3bc:	47a0      	blx	r4
     3be:	23fa      	movs	r3, #250	; 0xfa
     3c0:	00db      	lsls	r3, r3, #3
     3c2:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3c4:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     3c6:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     3c8:	b29b      	uxth	r3, r3
     3ca:	9302      	str	r3, [sp, #8]
     3cc:	9b01      	ldr	r3, [sp, #4]
     3ce:	0032      	movs	r2, r6
     3d0:	8818      	ldrh	r0, [r3, #0]
     3d2:	2100      	movs	r1, #0
     3d4:	17f3      	asrs	r3, r6, #31
     3d6:	b280      	uxth	r0, r0
     3d8:	47a0      	blx	r4
     3da:	064b      	lsls	r3, r1, #25
     3dc:	09c4      	lsrs	r4, r0, #7
     3de:	431c      	orrs	r4, r3
     3e0:	2300      	movs	r3, #0
     3e2:	11cd      	asrs	r5, r1, #7
     3e4:	9902      	ldr	r1, [sp, #8]
     3e6:	040a      	lsls	r2, r1, #16
     3e8:	1912      	adds	r2, r2, r4
     3ea:	416b      	adcs	r3, r5
     3ec:	9208      	str	r2, [sp, #32]
     3ee:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     3f0:	ab04      	add	r3, sp, #16
     3f2:	889c      	ldrh	r4, [r3, #4]
     3f4:	8918      	ldrh	r0, [r3, #8]
     3f6:	0032      	movs	r2, r6
     3f8:	9b03      	ldr	r3, [sp, #12]
     3fa:	4d18      	ldr	r5, [pc, #96]	; (45c <ConvertPressureTemperature+0xe8>)
     3fc:	b280      	uxth	r0, r0
     3fe:	2100      	movs	r1, #0
     400:	47a8      	blx	r5
     402:	060b      	lsls	r3, r1, #24
     404:	0a05      	lsrs	r5, r0, #8
     406:	431d      	orrs	r5, r3
     408:	2300      	movs	r3, #0
     40a:	b2a4      	uxth	r4, r4
     40c:	120e      	asrs	r6, r1, #8
     40e:	03e2      	lsls	r2, r4, #15
     410:	1952      	adds	r2, r2, r5
     412:	4173      	adcs	r3, r6
     414:	920a      	str	r2, [sp, #40]	; 0x28
     416:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     41c:	9c08      	ldr	r4, [sp, #32]
     41e:	9d09      	ldr	r5, [sp, #36]	; 0x24
     420:	4e0e      	ldr	r6, [pc, #56]	; (45c <ConvertPressureTemperature+0xe8>)
     422:	68f8      	ldr	r0, [r7, #12]
     424:	2100      	movs	r1, #0
     426:	47b0      	blx	r6
     428:	2300      	movs	r3, #0
     42a:	17ce      	asrs	r6, r1, #31
     42c:	02f6      	lsls	r6, r6, #11
     42e:	0af2      	lsrs	r2, r6, #11
     430:	1880      	adds	r0, r0, r2
     432:	4159      	adcs	r1, r3
     434:	02ce      	lsls	r6, r1, #11
     436:	0d42      	lsrs	r2, r0, #21
     438:	4332      	orrs	r2, r6
     43a:	154b      	asrs	r3, r1, #21
     43c:	1b12      	subs	r2, r2, r4
     43e:	41ab      	sbcs	r3, r5
     440:	2100      	movs	r1, #0
     442:	17dc      	asrs	r4, r3, #31
     444:	0464      	lsls	r4, r4, #17
     446:	0c60      	lsrs	r0, r4, #17
     448:	1812      	adds	r2, r2, r0
     44a:	414b      	adcs	r3, r1
     44c:	0011      	movs	r1, r2
     44e:	045b      	lsls	r3, r3, #17
     450:	0bca      	lsrs	r2, r1, #15
     452:	431a      	orrs	r2, r3
     454:	61fa      	str	r2, [r7, #28]
}
     456:	b00d      	add	sp, #52	; 0x34
     458:	bdf0      	pop	{r4, r5, r6, r7, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	0000198d 	.word	0x0000198d

00000460 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     460:	220a      	movs	r2, #10
     462:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     464:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     466:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     468:	4c0e      	ldr	r4, [pc, #56]	; (4a4 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     46a:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     46c:	42a2      	cmp	r2, r4
     46e:	d901      	bls.n	474 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     470:	4b0d      	ldr	r3, [pc, #52]	; (4a8 <pascalToCent+0x48>)
     472:	e015      	b.n	4a0 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     474:	1aa3      	subs	r3, r4, r2
     476:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     478:	2b4b      	cmp	r3, #75	; 0x4b
     47a:	d901      	bls.n	480 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     47c:	4b0b      	ldr	r3, [pc, #44]	; (4ac <pascalToCent+0x4c>)
     47e:	e00f      	b.n	4a0 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     480:	4d0b      	ldr	r5, [pc, #44]	; (4b0 <pascalToCent+0x50>)
     482:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     484:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     486:	3301      	adds	r3, #1
     488:	009b      	lsls	r3, r3, #2
     48a:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     48c:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     48e:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     490:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     492:	1aa4      	subs	r4, r4, r2
     494:	691a      	ldr	r2, [r3, #16]
     496:	1a52      	subs	r2, r2, r1
     498:	0013      	movs	r3, r2
     49a:	4363      	muls	r3, r4
     49c:	0a9b      	lsrs	r3, r3, #10
     49e:	185b      	adds	r3, r3, r1
     4a0:	6203      	str	r3, [r0, #32]
        }
    }
}
     4a2:	bd70      	pop	{r4, r5, r6, pc}
     4a4:	000199cc 	.word	0x000199cc
     4a8:	ffff8d20 	.word	0xffff8d20
     4ac:	000f048e 	.word	0x000f048e
     4b0:	00003390 	.word	0x00003390

000004b4 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b6:	27a2      	movs	r7, #162	; 0xa2
     4b8:	b087      	sub	sp, #28
     4ba:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     4bc:	2096      	movs	r0, #150	; 0x96
     4be:	4c2b      	ldr	r4, [pc, #172]	; (56c <readMS5803Coefficients+0xb8>)
     4c0:	0080      	lsls	r0, r0, #2
     4c2:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     4c4:	2096      	movs	r0, #150	; 0x96
     4c6:	0080      	lsls	r0, r0, #2
     4c8:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4ca:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     4cc:	4c28      	ldr	r4, [pc, #160]	; (570 <readMS5803Coefficients+0xbc>)
     4ce:	4b29      	ldr	r3, [pc, #164]	; (574 <readMS5803Coefficients+0xc0>)
     4d0:	0212      	lsls	r2, r2, #8
     4d2:	615a      	str	r2, [r3, #20]
     4d4:	7863      	ldrb	r3, [r4, #1]
     4d6:	7820      	ldrb	r0, [r4, #0]
     4d8:	78a2      	ldrb	r2, [r4, #2]
     4da:	021b      	lsls	r3, r3, #8
     4dc:	4303      	orrs	r3, r0
     4de:	0412      	lsls	r2, r2, #16
     4e0:	0019      	movs	r1, r3
     4e2:	0013      	movs	r3, r2
     4e4:	430b      	orrs	r3, r1
     4e6:	79a1      	ldrb	r1, [r4, #6]
     4e8:	7966      	ldrb	r6, [r4, #5]
     4ea:	0209      	lsls	r1, r1, #8
     4ec:	4331      	orrs	r1, r6
     4ee:	0008      	movs	r0, r1
     4f0:	79e1      	ldrb	r1, [r4, #7]
     4f2:	78e2      	ldrb	r2, [r4, #3]
     4f4:	0409      	lsls	r1, r1, #16
     4f6:	4301      	orrs	r1, r0
     4f8:	7a20      	ldrb	r0, [r4, #8]
     4fa:	7a66      	ldrb	r6, [r4, #9]
     4fc:	0612      	lsls	r2, r2, #24
     4fe:	0600      	lsls	r0, r0, #24
     500:	4308      	orrs	r0, r1
     502:	431a      	orrs	r2, r3
     504:	9700      	str	r7, [sp, #0]
     506:	7923      	ldrb	r3, [r4, #4]
     508:	0031      	movs	r1, r6
     50a:	4d1b      	ldr	r5, [pc, #108]	; (578 <readMS5803Coefficients+0xc4>)
     50c:	9003      	str	r0, [sp, #12]
     50e:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     510:	7ae3      	ldrb	r3, [r4, #11]
     512:	0020      	movs	r0, r4
     514:	7aa1      	ldrb	r1, [r4, #10]
     516:	7b24      	ldrb	r4, [r4, #12]
     518:	021b      	lsls	r3, r3, #8
     51a:	430b      	orrs	r3, r1
     51c:	0424      	lsls	r4, r4, #16
     51e:	001a      	movs	r2, r3
     520:	0023      	movs	r3, r4
     522:	7b44      	ldrb	r4, [r0, #13]
     524:	7b85      	ldrb	r5, [r0, #14]
     526:	4313      	orrs	r3, r2
     528:	0624      	lsls	r4, r4, #24
     52a:	431c      	orrs	r4, r3
     52c:	0022      	movs	r2, r4
     52e:	002b      	movs	r3, r5
     530:	9404      	str	r4, [sp, #16]
     532:	0031      	movs	r1, r6
     534:	4c11      	ldr	r4, [pc, #68]	; (57c <readMS5803Coefficients+0xc8>)
     536:	9803      	ldr	r0, [sp, #12]
     538:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     53a:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     53c:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     53e:	9a04      	ldr	r2, [sp, #16]
     540:	9803      	ldr	r0, [sp, #12]
     542:	0031      	movs	r1, r6
     544:	4c0d      	ldr	r4, [pc, #52]	; (57c <readMS5803Coefficients+0xc8>)
     546:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     548:	2280      	movs	r2, #128	; 0x80
     54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <readMS5803Coefficients+0xc0>)
     54c:	0212      	lsls	r2, r2, #8
     54e:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     550:	9b05      	ldr	r3, [sp, #20]
     552:	021d      	lsls	r5, r3, #8
     554:	9b02      	ldr	r3, [sp, #8]
     556:	4328      	orrs	r0, r5
     558:	8018      	strh	r0, [r3, #0]
     55a:	1cbb      	adds	r3, r7, #2
     55c:	b2df      	uxtb	r7, r3
     55e:	9b02      	ldr	r3, [sp, #8]
     560:	3302      	adds	r3, #2
     562:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     564:	2fae      	cmp	r7, #174	; 0xae
     566:	d1a9      	bne.n	4bc <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     568:	b007      	add	sp, #28
     56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56c:	00000f7d 	.word	0x00000f7d
     570:	00003390 	.word	0x00003390
     574:	41004400 	.word	0x41004400
     578:	00000d0d 	.word	0x00000d0d
     57c:	00000d79 	.word	0x00000d79

00000580 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     582:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     584:	231e      	movs	r3, #30
     586:	491a      	ldr	r1, [pc, #104]	; (5f0 <initMS5803Barometer+0x70>)
     588:	4d1a      	ldr	r5, [pc, #104]	; (5f4 <initMS5803Barometer+0x74>)
     58a:	0236      	lsls	r6, r6, #8
     58c:	616e      	str	r6, [r5, #20]
     58e:	9300      	str	r3, [sp, #0]
     590:	784b      	ldrb	r3, [r1, #1]
     592:	780a      	ldrb	r2, [r1, #0]
     594:	021b      	lsls	r3, r3, #8
     596:	4313      	orrs	r3, r2
     598:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     59a:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     59c:	0412      	lsls	r2, r2, #16
     59e:	0018      	movs	r0, r3
     5a0:	0013      	movs	r3, r2
     5a2:	78ca      	ldrb	r2, [r1, #3]
     5a4:	4303      	orrs	r3, r0
     5a6:	0612      	lsls	r2, r2, #24
     5a8:	1d4f      	adds	r7, r1, #5
     5aa:	431a      	orrs	r2, r3
     5ac:	7948      	ldrb	r0, [r1, #5]
     5ae:	790b      	ldrb	r3, [r1, #4]
     5b0:	7989      	ldrb	r1, [r1, #6]
     5b2:	0209      	lsls	r1, r1, #8
     5b4:	4301      	orrs	r1, r0
     5b6:	78b8      	ldrb	r0, [r7, #2]
     5b8:	0400      	lsls	r0, r0, #16
     5ba:	4301      	orrs	r1, r0
     5bc:	78f8      	ldrb	r0, [r7, #3]
     5be:	0600      	lsls	r0, r0, #24
     5c0:	4308      	orrs	r0, r1
     5c2:	7939      	ldrb	r1, [r7, #4]
     5c4:	4f0c      	ldr	r7, [pc, #48]	; (5f8 <initMS5803Barometer+0x78>)
     5c6:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5c8:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     5ca:	20c8      	movs	r0, #200	; 0xc8
     5cc:	4b0b      	ldr	r3, [pc, #44]	; (5fc <initMS5803Barometer+0x7c>)
     5ce:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     5d0:	0020      	movs	r0, r4
     5d2:	4b0b      	ldr	r3, [pc, #44]	; (600 <initMS5803Barometer+0x80>)
     5d4:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     5d6:	23fa      	movs	r3, #250	; 0xfa
     5d8:	011b      	lsls	r3, r3, #4
     5da:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     5dc:	4b09      	ldr	r3, [pc, #36]	; (604 <initMS5803Barometer+0x84>)
     5de:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <initMS5803Barometer+0x88>)
     5e2:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <initMS5803Barometer+0x8c>)
     5e6:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     5e8:	23fa      	movs	r3, #250	; 0xfa
     5ea:	00db      	lsls	r3, r3, #3
     5ec:	6163      	str	r3, [r4, #20]




}
     5ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5f0:	00003390 	.word	0x00003390
     5f4:	41004400 	.word	0x41004400
     5f8:	00000d0d 	.word	0x00000d0d
     5fc:	00000fad 	.word	0x00000fad
     600:	000004b5 	.word	0x000004b5
     604:	00002710 	.word	0x00002710
     608:	0041c9fe 	.word	0x0041c9fe
     60c:	007ffae4 	.word	0x007ffae4

00000610 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     610:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     612:	4bbf      	ldr	r3, [pc, #764]	; (910 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     614:	b085      	sub	sp, #20
    SystemInit();
     616:	4798      	blx	r3
    GclkInit();
     618:	4bbe      	ldr	r3, [pc, #760]	; (914 <init+0x304>)
     61a:	4798      	blx	r3
    RtcInit();
     61c:	4bbe      	ldr	r3, [pc, #760]	; (918 <init+0x308>)
     61e:	4798      	blx	r3
    delayInit();
     620:	4bbe      	ldr	r3, [pc, #760]	; (91c <init+0x30c>)
     622:	4798      	blx	r3
    adcInit();
     624:	4bbe      	ldr	r3, [pc, #760]	; (920 <init+0x310>)
     626:	4798      	blx	r3
    dmaInit();
     628:	4bbe      	ldr	r3, [pc, #760]	; (924 <init+0x314>)
     62a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     62c:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     62e:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     630:	4bbd      	ldr	r3, [pc, #756]	; (928 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     632:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     634:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     636:	5858      	ldr	r0, [r3, r1]
     638:	4abc      	ldr	r2, [pc, #752]	; (92c <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63a:	2401      	movs	r4, #1
     63c:	4002      	ands	r2, r0
     63e:	505a      	str	r2, [r3, r1]
     640:	4bbb      	ldr	r3, [pc, #748]	; (930 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     642:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	0019      	movs	r1, r3
     646:	3154      	adds	r1, #84	; 0x54
     648:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     64a:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64c:	43a2      	bics	r2, r4
     64e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     650:	2280      	movs	r2, #128	; 0x80
     652:	0352      	lsls	r2, r2, #13
     654:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     656:	220f      	movs	r2, #15
     658:	3033      	adds	r0, #51	; 0x33
     65a:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     65c:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     65e:	4391      	bics	r1, r2
     660:	4321      	orrs	r1, r4
     662:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     664:	7cc1      	ldrb	r1, [r0, #19]
     666:	36c3      	adds	r6, #195	; 0xc3
     668:	4321      	orrs	r1, r4
     66a:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     66c:	0019      	movs	r1, r3
     66e:	31b1      	adds	r1, #177	; 0xb1
     670:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     672:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     674:	4010      	ands	r0, r2
     676:	4328      	orrs	r0, r5
     678:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     67a:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     67c:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     67e:	4320      	orrs	r0, r4
     680:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     682:	7808      	ldrb	r0, [r1, #0]
     684:	4010      	ands	r0, r2
     686:	4328      	orrs	r0, r5
     688:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68a:	7830      	ldrb	r0, [r6, #0]
     68c:	4320      	orrs	r0, r4
     68e:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     690:	7d30      	ldrb	r0, [r6, #20]
     692:	43a0      	bics	r0, r4
     694:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     696:	2080      	movs	r0, #128	; 0x80
     698:	0400      	lsls	r0, r0, #16
     69a:	9703      	str	r7, [sp, #12]
     69c:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69e:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6a0:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a2:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6a4:	4390      	bics	r0, r2
     6a6:	4320      	orrs	r0, r4
     6a8:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6aa:	20c2      	movs	r0, #194	; 0xc2
     6ac:	4684      	mov	ip, r0
     6ae:	449c      	add	ip, r3
     6b0:	4660      	mov	r0, ip
     6b2:	4667      	mov	r7, ip
     6b4:	7800      	ldrb	r0, [r0, #0]
     6b6:	4320      	orrs	r0, r4
     6b8:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ba:	7808      	ldrb	r0, [r1, #0]
     6bc:	4390      	bics	r0, r2
     6be:	4320      	orrs	r0, r4
     6c0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c2:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c4:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c6:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c8:	4321      	orrs	r1, r4
     6ca:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6cc:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ce:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d0:	43a1      	bics	r1, r4
     6d2:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2180      	movs	r1, #128	; 0x80
     6d6:	9803      	ldr	r0, [sp, #12]
     6d8:	03c9      	lsls	r1, r1, #15
     6da:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6dc:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6de:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6e0:	3031      	adds	r0, #49	; 0x31
     6e2:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e4:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6e6:	4011      	ands	r1, r2
     6e8:	430d      	orrs	r5, r1
     6ea:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ec:	001d      	movs	r5, r3
     6ee:	3543      	adds	r5, #67	; 0x43
     6f0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6f2:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f8:	7da9      	ldrb	r1, [r5, #22]
     6fa:	3505      	adds	r5, #5
     6fc:	43a1      	bics	r1, r4
     6fe:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     700:	2180      	movs	r1, #128	; 0x80
     702:	0489      	lsls	r1, r1, #18
     704:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     706:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     708:	7801      	ldrb	r1, [r0, #0]
     70a:	4391      	bics	r1, r2
     70c:	4321      	orrs	r1, r4
     70e:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     710:	7c41      	ldrb	r1, [r0, #17]
     712:	3011      	adds	r0, #17
     714:	4321      	orrs	r1, r4
     716:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	7d81      	ldrb	r1, [r0, #22]
     71a:	43a1      	bics	r1, r4
     71c:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     71e:	2180      	movs	r1, #128	; 0x80
     720:	0449      	lsls	r1, r1, #17
     722:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     724:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     726:	7829      	ldrb	r1, [r5, #0]
     728:	43a1      	bics	r1, r4
     72a:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72c:	2180      	movs	r1, #128	; 0x80
     72e:	0049      	lsls	r1, r1, #1
     730:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     732:	7831      	ldrb	r1, [r6, #0]
     734:	43a1      	bics	r1, r4
     736:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     738:	2180      	movs	r1, #128	; 0x80
     73a:	0089      	lsls	r1, r1, #2
     73c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73e:	0019      	movs	r1, r3
     740:	314b      	adds	r1, #75	; 0x4b
     742:	7808      	ldrb	r0, [r1, #0]
     744:	43a0      	bics	r0, r4
     746:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     748:	7808      	ldrb	r0, [r1, #0]
     74a:	4338      	orrs	r0, r7
     74c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     74e:	2080      	movs	r0, #128	; 0x80
     750:	0100      	lsls	r0, r0, #4
     752:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     754:	4877      	ldr	r0, [pc, #476]	; (934 <init+0x324>)
     756:	371e      	adds	r7, #30
     758:	7800      	ldrb	r0, [r0, #0]
     75a:	4010      	ands	r0, r2
     75c:	4338      	orrs	r0, r7
     75e:	4f75      	ldr	r7, [pc, #468]	; (934 <init+0x324>)
     760:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     762:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     764:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     766:	4320      	orrs	r0, r4
     768:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76a:	0018      	movs	r0, r3
     76c:	3034      	adds	r0, #52	; 0x34
     76e:	7801      	ldrb	r1, [r0, #0]
     770:	4011      	ands	r1, r2
     772:	4339      	orrs	r1, r7
     774:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     776:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     778:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77a:	4321      	orrs	r1, r4
     77c:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     77e:	4666      	mov	r6, ip
     780:	7801      	ldrb	r1, [r0, #0]
     782:	4391      	bics	r1, r2
     784:	4331      	orrs	r1, r6
     786:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     788:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78c:	4321      	orrs	r1, r4
     78e:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	7801      	ldrb	r1, [r0, #0]
     792:	001e      	movs	r6, r3
     794:	43a1      	bics	r1, r4
     796:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     798:	2180      	movs	r1, #128	; 0x80
     79a:	9803      	ldr	r0, [sp, #12]
     79c:	00c9      	lsls	r1, r1, #3
     79e:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a0:	0018      	movs	r0, r3
     7a2:	3098      	adds	r0, #152	; 0x98
     7a4:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a6:	78a8      	ldrb	r0, [r5, #2]
     7a8:	3651      	adds	r6, #81	; 0x51
     7aa:	43a0      	bics	r0, r4
     7ac:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ae:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b0:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	7a29      	ldrb	r1, [r5, #8]
     7b4:	43a1      	bics	r1, r4
     7b6:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	0249      	lsls	r1, r1, #9
     7bc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7be:	7831      	ldrb	r1, [r6, #0]
     7c0:	43a1      	bics	r1, r4
     7c2:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c4:	2180      	movs	r1, #128	; 0x80
     7c6:	0289      	lsls	r1, r1, #10
     7c8:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ca:	0019      	movs	r1, r3
     7cc:	3153      	adds	r1, #83	; 0x53
     7ce:	7808      	ldrb	r0, [r1, #0]
     7d0:	43a0      	bics	r0, r4
     7d2:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7d4:	7808      	ldrb	r0, [r1, #0]
     7d6:	4338      	orrs	r0, r7
     7d8:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7da:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7dc:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7de:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	0300      	lsls	r0, r0, #12
     7e2:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e4:	9703      	str	r7, [sp, #12]
     7e6:	7838      	ldrb	r0, [r7, #0]
     7e8:	2720      	movs	r7, #32
     7ea:	4010      	ands	r0, r2
     7ec:	4338      	orrs	r0, r7
     7ee:	9f03      	ldr	r7, [sp, #12]
     7f0:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f2:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7f4:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f6:	4320      	orrs	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fa:	0018      	movs	r0, r3
     7fc:	3038      	adds	r0, #56	; 0x38
     7fe:	7801      	ldrb	r1, [r0, #0]
     800:	4011      	ands	r1, r2
     802:	4339      	orrs	r1, r7
     804:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     806:	7831      	ldrb	r1, [r6, #0]
     808:	4321      	orrs	r1, r4
     80a:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     80c:	4666      	mov	r6, ip
     80e:	7801      	ldrb	r1, [r0, #0]
     810:	4391      	bics	r1, r2
     812:	4331      	orrs	r1, r6
     814:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     816:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     818:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81a:	4321      	orrs	r1, r4
     81c:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81e:	7981      	ldrb	r1, [r0, #6]
     820:	43a1      	bics	r1, r4
     822:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     824:	2180      	movs	r1, #128	; 0x80
     826:	02c9      	lsls	r1, r1, #11
     828:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     82a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     82c:	7801      	ldrb	r1, [r0, #0]
     82e:	43a1      	bics	r1, r4
     830:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     832:	2180      	movs	r1, #128	; 0x80
     834:	0149      	lsls	r1, r1, #5
     836:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     838:	7881      	ldrb	r1, [r0, #2]
     83a:	43a1      	bics	r1, r4
     83c:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83e:	2180      	movs	r1, #128	; 0x80
     840:	01c9      	lsls	r1, r1, #7
     842:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     844:	0019      	movs	r1, r3
     846:	314d      	adds	r1, #77	; 0x4d
     848:	7808      	ldrb	r0, [r1, #0]
     84a:	43a0      	bics	r0, r4
     84c:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84e:	7808      	ldrb	r0, [r1, #0]
     850:	4330      	orrs	r0, r6
     852:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     854:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     856:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     858:	0189      	lsls	r1, r1, #6
     85a:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     85c:	304f      	adds	r0, #79	; 0x4f
     85e:	7801      	ldrb	r1, [r0, #0]
     860:	43a1      	bics	r1, r4
     862:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     864:	2180      	movs	r1, #128	; 0x80
     866:	0209      	lsls	r1, r1, #8
     868:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     86a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86c:	0019      	movs	r1, r3
     86e:	3155      	adds	r1, #85	; 0x55
     870:	7808      	ldrb	r0, [r1, #0]
     872:	43a0      	bics	r0, r4
     874:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     876:	2080      	movs	r0, #128	; 0x80
     878:	0380      	lsls	r0, r0, #14
     87a:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     87c:	2040      	movs	r0, #64	; 0x40
     87e:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     880:	7848      	ldrb	r0, [r1, #1]
     882:	43a0      	bics	r0, r4
     884:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     886:	2080      	movs	r0, #128	; 0x80
     888:	03c0      	lsls	r0, r0, #15
     88a:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88c:	0018      	movs	r0, r3
     88e:	303b      	adds	r0, #59	; 0x3b
     890:	7805      	ldrb	r5, [r0, #0]
     892:	4395      	bics	r5, r2
     894:	4335      	orrs	r5, r6
     896:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     898:	784d      	ldrb	r5, [r1, #1]
     89a:	4325      	orrs	r5, r4
     89c:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     89e:	788d      	ldrb	r5, [r1, #2]
     8a0:	43a5      	bics	r5, r4
     8a2:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8a4:	788d      	ldrb	r5, [r1, #2]
     8a6:	4335      	orrs	r5, r6
     8a8:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8aa:	2580      	movs	r5, #128	; 0x80
     8ac:	042d      	lsls	r5, r5, #16
     8ae:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     8b0:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8b2:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     8b4:	4e20      	ldr	r6, [pc, #128]	; (938 <init+0x328>)
     8b6:	401a      	ands	r2, r3
     8b8:	433a      	orrs	r2, r7
     8ba:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8bc:	788b      	ldrb	r3, [r1, #2]
     8be:	2204      	movs	r2, #4
     8c0:	4323      	orrs	r3, r4
     8c2:	708b      	strb	r3, [r1, #2]
     8c4:	2000      	movs	r0, #0
     8c6:	2103      	movs	r1, #3
     8c8:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     8ca:	002b      	movs	r3, r5
     8cc:	002a      	movs	r2, r5
     8ce:	0028      	movs	r0, r5
     8d0:	4f1a      	ldr	r7, [pc, #104]	; (93c <init+0x32c>)
     8d2:	9501      	str	r5, [sp, #4]
     8d4:	9500      	str	r5, [sp, #0]
     8d6:	2103      	movs	r1, #3
     8d8:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     8da:	0020      	movs	r0, r4
     8dc:	2204      	movs	r2, #4
     8de:	2103      	movs	r1, #3
     8e0:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     8e2:	002b      	movs	r3, r5
     8e4:	002a      	movs	r2, r5
     8e6:	0020      	movs	r0, r4
     8e8:	9501      	str	r5, [sp, #4]
     8ea:	9500      	str	r5, [sp, #0]
     8ec:	2103      	movs	r1, #3
     8ee:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     8f0:	2208      	movs	r2, #8
     8f2:	2104      	movs	r1, #4
     8f4:	2003      	movs	r0, #3
     8f6:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     8f8:	0021      	movs	r1, r4
     8fa:	002a      	movs	r2, r5
     8fc:	2003      	movs	r0, #3
     8fe:	4b10      	ldr	r3, [pc, #64]	; (940 <init+0x330>)
     900:	4c10      	ldr	r4, [pc, #64]	; (944 <init+0x334>)
     902:	47a0      	blx	r4

    TC4Init();
     904:	4b10      	ldr	r3, [pc, #64]	; (948 <init+0x338>)
     906:	4798      	blx	r3
    TC5Init();
     908:	4b10      	ldr	r3, [pc, #64]	; (94c <init+0x33c>)
     90a:	4798      	blx	r3
}
     90c:	b005      	add	sp, #20
     90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     910:	000001d5 	.word	0x000001d5
     914:	00000e09 	.word	0x00000e09
     918:	00000e91 	.word	0x00000e91
     91c:	00000f5d 	.word	0x00000f5d
     920:	00000c29 	.word	0x00000c29
     924:	000010fd 	.word	0x000010fd
     928:	e000e100 	.word	0xe000e100
     92c:	ff00ffff 	.word	0xff00ffff
     930:	41004400 	.word	0x41004400
     934:	41004435 	.word	0x41004435
     938:	000017c5 	.word	0x000017c5
     93c:	00001829 	.word	0x00001829
     940:	0000f2e4 	.word	0x0000f2e4
     944:	0000188d 	.word	0x0000188d
     948:	0000102d 	.word	0x0000102d
     94c:	00001095 	.word	0x00001095

00000950 <startUp>:

void startUp(Altimeter *my_altimeter) {
     950:	b5f0      	push	{r4, r5, r6, r7, lr}
     952:	b0c9      	sub	sp, #292	; 0x124
     954:	9002      	str	r0, [sp, #8]

    beep(400);
     956:	20c8      	movs	r0, #200	; 0xc8
     958:	4e48      	ldr	r6, [pc, #288]	; (a7c <startUp+0x12c>)
     95a:	0040      	lsls	r0, r0, #1
     95c:	47b0      	blx	r6

    u32_t startupTime = millis();
     95e:	4c48      	ldr	r4, [pc, #288]	; (a80 <startUp+0x130>)
     960:	47a0      	blx	r4
     962:	0005      	movs	r5, r0
     964:	9601      	str	r6, [sp, #4]
     966:	9403      	str	r4, [sp, #12]

    while((millis() - startupTime) < 10000) {
     968:	9b03      	ldr	r3, [sp, #12]
     96a:	4798      	blx	r3
     96c:	4b45      	ldr	r3, [pc, #276]	; (a84 <startUp+0x134>)
     96e:	1b40      	subs	r0, r0, r5
     970:	4298      	cmp	r0, r3
     972:	d866      	bhi.n	a42 <startUp+0xf2>

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     974:	4f44      	ldr	r7, [pc, #272]	; (a88 <startUp+0x138>)
     976:	7e3b      	ldrb	r3, [r7, #24]
     978:	075b      	lsls	r3, r3, #29
     97a:	d5f5      	bpl.n	968 <startUp+0x18>

            u8_t connectAttempt = usartDataIn(USART3);
     97c:	2003      	movs	r0, #3
     97e:	4e43      	ldr	r6, [pc, #268]	; (a8c <startUp+0x13c>)
     980:	47b0      	blx	r6
     982:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     984:	2948      	cmp	r1, #72	; 0x48
     986:	d1ef      	bne.n	968 <startUp+0x18>
                usartDataOut(USART3, 'H');
     988:	2003      	movs	r0, #3
     98a:	4c41      	ldr	r4, [pc, #260]	; (a90 <startUp+0x140>)
     98c:	47a0      	blx	r4

                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     98e:	7e3b      	ldrb	r3, [r7, #24]
     990:	075b      	lsls	r3, r3, #29
     992:	d5fc      	bpl.n	98e <startUp+0x3e>
                u8_t option = usartDataIn(USART3);
     994:	2003      	movs	r0, #3
     996:	47b0      	blx	r6

                if (option == 0x4C) {
     998:	284c      	cmp	r0, #76	; 0x4c
     99a:	d1e5      	bne.n	968 <startUp+0x18>
     99c:	2500      	movs	r5, #0

                    for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                        if (isFlightLogged(flightLog)) {
     99e:	0028      	movs	r0, r5
     9a0:	4b3c      	ldr	r3, [pc, #240]	; (a94 <startUp+0x144>)
     9a2:	4798      	blx	r3
     9a4:	2800      	cmp	r0, #0
     9a6:	d004      	beq.n	9b2 <startUp+0x62>

                            usartDataOut(USART3, flightLog + 0x30);
     9a8:	0029      	movs	r1, r5
     9aa:	3130      	adds	r1, #48	; 0x30
     9ac:	b2c9      	uxtb	r1, r1
     9ae:	2003      	movs	r0, #3
     9b0:	47a0      	blx	r4
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                u8_t option = usartDataIn(USART3);

                if (option == 0x4C) {

                    for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
     9b2:	3501      	adds	r5, #1
     9b4:	b2ed      	uxtb	r5, r5
     9b6:	2d0b      	cmp	r5, #11
     9b8:	d1f1      	bne.n	99e <startUp+0x4e>

                            usartDataOut(USART3, flightLog + 0x30);
                        }
                    }

                    usartDataOut(USART3, 0x04);
     9ba:	2104      	movs	r1, #4
     9bc:	2003      	movs	r0, #3
     9be:	47a0      	blx	r4

                    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     9c0:	7e3b      	ldrb	r3, [r7, #24]
     9c2:	075b      	lsls	r3, r3, #29
     9c4:	d5fc      	bpl.n	9c0 <startUp+0x70>
                    volatile u8_t flightToRead = usartDataIn(USART3);
     9c6:	2003      	movs	r0, #3
     9c8:	47b0      	blx	r6
                    flightToRead -= 0x30;

                    u32_t flightLogAddress = FLIGHTZEROSTART + (flightToRead * 0x03);

                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);
     9ca:	2503      	movs	r5, #3
                    }

                    usartDataOut(USART3, 0x04);

                    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                    volatile u8_t flightToRead = usartDataIn(USART3);
     9cc:	ab04      	add	r3, sp, #16
     9ce:	71d8      	strb	r0, [r3, #7]
     9d0:	1dda      	adds	r2, r3, #7
                    flightToRead -= 0x30;
     9d2:	79db      	ldrb	r3, [r3, #7]

                    u32_t flightLogAddress = FLIGHTZEROSTART + (flightToRead * 0x03);

                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);
     9d4:	ae06      	add	r6, sp, #24

                    usartDataOut(USART3, 0x04);

                    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                    volatile u8_t flightToRead = usartDataIn(USART3);
                    flightToRead -= 0x30;
     9d6:	3b30      	subs	r3, #48	; 0x30
     9d8:	b2db      	uxtb	r3, r3
     9da:	7013      	strb	r3, [r2, #0]

                    u32_t flightLogAddress = FLIGHTZEROSTART + (flightToRead * 0x03);
     9dc:	7810      	ldrb	r0, [r2, #0]

                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);
     9de:	0029      	movs	r1, r5
     9e0:	4368      	muls	r0, r5
     9e2:	3001      	adds	r0, #1
     9e4:	30ff      	adds	r0, #255	; 0xff
     9e6:	0032      	movs	r2, r6
     9e8:	4b2b      	ldr	r3, [pc, #172]	; (a98 <startUp+0x148>)
     9ea:	4798      	blx	r3

                    volatile u32_t flightStartAddress = flightStartAddressByte[0] << 0 | flightStartAddressByte[1] << 8 | flightStartAddressByte[2] << 16;
     9ec:	7873      	ldrb	r3, [r6, #1]

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
                    usartDataOut(USART3, pagesToSend);
     9ee:	0028      	movs	r0, r5
                    u32_t flightLogAddress = FLIGHTZEROSTART + (flightToRead * 0x03);

                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);

                    volatile u32_t flightStartAddress = flightStartAddressByte[0] << 0 | flightStartAddressByte[1] << 8 | flightStartAddressByte[2] << 16;
     9f0:	021a      	lsls	r2, r3, #8
     9f2:	78b3      	ldrb	r3, [r6, #2]

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
                    usartDataOut(USART3, pagesToSend);


                    for (u8_t page = 0; page <= pagesToSend; ++page) {
     9f4:	2500      	movs	r5, #0
                    u32_t flightLogAddress = FLIGHTZEROSTART + (flightToRead * 0x03);

                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);

                    volatile u32_t flightStartAddress = flightStartAddressByte[0] << 0 | flightStartAddressByte[1] << 8 | flightStartAddressByte[2] << 16;
     9f6:	041b      	lsls	r3, r3, #16
     9f8:	4313      	orrs	r3, r2
     9fa:	7832      	ldrb	r2, [r6, #0]
     9fc:	4313      	orrs	r3, r2
     9fe:	9307      	str	r3, [sp, #28]

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
     a00:	9b02      	ldr	r3, [sp, #8]
     a02:	9a07      	ldr	r2, [sp, #28]
     a04:	338c      	adds	r3, #140	; 0x8c
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	1a9b      	subs	r3, r3, r2
     a0a:	0a1b      	lsrs	r3, r3, #8
     a0c:	b2db      	uxtb	r3, r3
                    usartDataOut(USART3, pagesToSend);
     a0e:	0019      	movs	r1, r3
                    u8_t flightStartAddressByte[3];
                    AT25SEreadSample(flightLogAddress, 0x03, flightStartAddressByte);

                    volatile u32_t flightStartAddress = flightStartAddressByte[0] << 0 | flightStartAddressByte[1] << 8 | flightStartAddressByte[2] << 16;

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
     a10:	9302      	str	r3, [sp, #8]
                    usartDataOut(USART3, pagesToSend);
     a12:	47a0      	blx	r4


                    for (u8_t page = 0; page <= pagesToSend; ++page) {

                        u8_t data[256];
                        AT25SEreadPage(flightStartAddress, data);
     a14:	af08      	add	r7, sp, #32
     a16:	9807      	ldr	r0, [sp, #28]
     a18:	0039      	movs	r1, r7
     a1a:	4b20      	ldr	r3, [pc, #128]	; (a9c <startUp+0x14c>)
     a1c:	4798      	blx	r3
     a1e:	2600      	movs	r6, #0

                        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
                            usartDataOut(USART3, data[dataByte]);
     a20:	5db9      	ldrb	r1, [r7, r6]
     a22:	2003      	movs	r0, #3
     a24:	47a0      	blx	r4
                    for (u8_t page = 0; page <= pagesToSend; ++page) {

                        u8_t data[256];
                        AT25SEreadPage(flightStartAddress, data);

                        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a26:	2380      	movs	r3, #128	; 0x80
     a28:	3601      	adds	r6, #1
     a2a:	005b      	lsls	r3, r3, #1
     a2c:	429e      	cmp	r6, r3
     a2e:	d1f7      	bne.n	a20 <startUp+0xd0>
                            usartDataOut(USART3, data[dataByte]);
                        }

                        flightStartAddress = flightStartAddress + 0x100;
     a30:	9b07      	ldr	r3, [sp, #28]

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
                    usartDataOut(USART3, pagesToSend);


                    for (u8_t page = 0; page <= pagesToSend; ++page) {
     a32:	3501      	adds	r5, #1

                        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
                            usartDataOut(USART3, data[dataByte]);
                        }

                        flightStartAddress = flightStartAddress + 0x100;
     a34:	3301      	adds	r3, #1
     a36:	33ff      	adds	r3, #255	; 0xff
     a38:	9307      	str	r3, [sp, #28]

                    u8_t pagesToSend = (my_altimeter->myFlashMemory.endingAddress - flightStartAddress) >> 8;
                    usartDataOut(USART3, pagesToSend);


                    for (u8_t page = 0; page <= pagesToSend; ++page) {
     a3a:	9b02      	ldr	r3, [sp, #8]
     a3c:	b2ed      	uxtb	r5, r5
     a3e:	42ab      	cmp	r3, r5
     a40:	d2e8      	bcs.n	a14 <startUp+0xc4>
                    break;
                }
            }
        }
    }
    beep(300);
     a42:	2096      	movs	r0, #150	; 0x96
     a44:	9b01      	ldr	r3, [sp, #4]
     a46:	0040      	lsls	r0, r0, #1
     a48:	4798      	blx	r3
    delay_ms(80);
     a4a:	4c15      	ldr	r4, [pc, #84]	; (aa0 <startUp+0x150>)
     a4c:	2050      	movs	r0, #80	; 0x50
     a4e:	47a0      	blx	r4
    beep(300);
     a50:	2096      	movs	r0, #150	; 0x96
     a52:	9b01      	ldr	r3, [sp, #4]
     a54:	0040      	lsls	r0, r0, #1
     a56:	4798      	blx	r3
    delay_ms(250);
     a58:	20fa      	movs	r0, #250	; 0xfa
     a5a:	47a0      	blx	r4
    beep(300);
     a5c:	2096      	movs	r0, #150	; 0x96
     a5e:	9b01      	ldr	r3, [sp, #4]
     a60:	0040      	lsls	r0, r0, #1
     a62:	4798      	blx	r3
    delay_ms(80);
     a64:	2050      	movs	r0, #80	; 0x50
     a66:	47a0      	blx	r4
    beep(300);
     a68:	2096      	movs	r0, #150	; 0x96
     a6a:	9b01      	ldr	r3, [sp, #4]
     a6c:	0040      	lsls	r0, r0, #1
     a6e:	4798      	blx	r3
    delay_ms(500);
     a70:	20fa      	movs	r0, #250	; 0xfa
     a72:	0040      	lsls	r0, r0, #1
     a74:	47a0      	blx	r4
}
     a76:	b049      	add	sp, #292	; 0x124
     a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	00000dcd 	.word	0x00000dcd
     a80:	00000ff9 	.word	0x00000ff9
     a84:	0000270f 	.word	0x0000270f
     a88:	42001400 	.word	0x42001400
     a8c:	00001901 	.word	0x00001901
     a90:	000018e9 	.word	0x000018e9
     a94:	00000bed 	.word	0x00000bed
     a98:	000001e5 	.word	0x000001e5
     a9c:	00000255 	.word	0x00000255
     aa0:	00000fad 	.word	0x00000fad

00000aa4 <main>:



int main(void) {
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	4c34      	ldr	r4, [pc, #208]	; (b78 <main+0xd4>)

    init();
     aa8:	4b34      	ldr	r3, [pc, #208]	; (b7c <main+0xd8>)
    delay_ms(500);
}



int main(void) {
     aaa:	44a5      	add	sp, r4

    init();
     aac:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     aae:	2400      	movs	r4, #0
     ab0:	466b      	mov	r3, sp
    initMS5803Barometer(&my_altimeter.myBarometer);
     ab2:	a801      	add	r0, sp, #4
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ab4:	701c      	strb	r4, [r3, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     ab6:	4b32      	ldr	r3, [pc, #200]	; (b80 <main+0xdc>)
     ab8:	4798      	blx	r3
    IMUinit();
     aba:	4b32      	ldr	r3, [pc, #200]	; (b84 <main+0xe0>)
     abc:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     abe:	23c8      	movs	r3, #200	; 0xc8
     ac0:	466a      	mov	r2, sp
     ac2:	005b      	lsls	r3, r3, #1
     ac4:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
     ac6:	2380      	movs	r3, #128	; 0x80
     ac8:	019b      	lsls	r3, r3, #6
     aca:	9322      	str	r3, [sp, #136]	; 0x88
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     acc:	4b2e      	ldr	r3, [pc, #184]	; (b88 <main+0xe4>)
    my_altimeter.myFlashMemory.pageReady = false;
     ace:	4f2f      	ldr	r7, [pc, #188]	; (b8c <main+0xe8>)
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
     ad0:	9323      	str	r3, [sp, #140]	; 0x8c


    //findFlight(&my_altimeter);

    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     ad2:	4668      	mov	r0, sp
     ad4:	4b2e      	ldr	r3, [pc, #184]	; (b90 <main+0xec>)
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.currentAddress = 0x002000;
    my_altimeter.myFlashMemory.endingAddress = 0x005FFF;
    my_altimeter.myFlashMemory.pageReady = false;
     ad6:	55d4      	strb	r4, [r2, r7]


    //findFlight(&my_altimeter);

    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     ad8:	4798      	blx	r3





    u32_t timeNow = millis();
     ada:	4c2e      	ldr	r4, [pc, #184]	; (b94 <main+0xf0>)
     adc:	47a0      	blx	r4
     ade:	0005      	movs	r5, r0
    while((millis() - timeNow) < 3000) {
     ae0:	47a0      	blx	r4
     ae2:	4b2d      	ldr	r3, [pc, #180]	; (b98 <main+0xf4>)
     ae4:	1b40      	subs	r0, r0, r5
     ae6:	4298      	cmp	r0, r3
     ae8:	d806      	bhi.n	af8 <main+0x54>
        sampleTick(&my_altimeter);
     aea:	4668      	mov	r0, sp
     aec:	4b2b      	ldr	r3, [pc, #172]	; (b9c <main+0xf8>)
     aee:	4798      	blx	r3
        flight(&my_altimeter);
     af0:	4668      	mov	r0, sp
     af2:	4b2b      	ldr	r3, [pc, #172]	; (ba0 <main+0xfc>)
     af4:	4798      	blx	r3
     af6:	e7f3      	b.n	ae0 <main+0x3c>
    }

    logFlight(&my_altimeter);
     af8:	4668      	mov	r0, sp
     afa:	4b2a      	ldr	r3, [pc, #168]	; (ba4 <main+0x100>)
     afc:	4798      	blx	r3

    beep(300);
     afe:	2096      	movs	r0, #150	; 0x96
     b00:	4b29      	ldr	r3, [pc, #164]	; (ba8 <main+0x104>)
     b02:	0040      	lsls	r0, r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     b04:	2680      	movs	r6, #128	; 0x80
     b06:	4798      	blx	r3
     b08:	0376      	lsls	r6, r6, #13
    while (1) {

        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     b0a:	2400      	movs	r4, #0



    while (1) {

        if (takeSample) {
     b0c:	4d27      	ldr	r5, [pc, #156]	; (bac <main+0x108>)
     b0e:	782b      	ldrb	r3, [r5, #0]
     b10:	2b00      	cmp	r3, #0
     b12:	d006      	beq.n	b22 <main+0x7e>
            sampleTick(&my_altimeter);
     b14:	4668      	mov	r0, sp
     b16:	4b21      	ldr	r3, [pc, #132]	; (b9c <main+0xf8>)
     b18:	4798      	blx	r3
            flight(&my_altimeter);
     b1a:	4668      	mov	r0, sp
     b1c:	4b20      	ldr	r3, [pc, #128]	; (ba0 <main+0xfc>)
     b1e:	4798      	blx	r3
            takeSample = false;
     b20:	702c      	strb	r4, [r5, #0]
        }

        if (writeLog) {
     b22:	4b23      	ldr	r3, [pc, #140]	; (bb0 <main+0x10c>)
     b24:	781a      	ldrb	r2, [r3, #0]
     b26:	2a00      	cmp	r2, #0
     b28:	d0f0      	beq.n	b0c <main+0x68>
            writeLog = false;
     b2a:	701c      	strb	r4, [r3, #0]
            logSensors(&my_altimeter);
     b2c:	4668      	mov	r0, sp
     b2e:	4b21      	ldr	r3, [pc, #132]	; (bb4 <main+0x110>)
     b30:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     b32:	466b      	mov	r3, sp
     b34:	5ddb      	ldrb	r3, [r3, r7]
     b36:	2b00      	cmp	r3, #0
     b38:	d0e8      	beq.n	b0c <main+0x68>
                my_altimeter.myFlashMemory.pageReady = false;
     b3a:	2200      	movs	r2, #0
     b3c:	4669      	mov	r1, sp
     b3e:	4b13      	ldr	r3, [pc, #76]	; (b8c <main+0xe8>)
     b40:	4d1d      	ldr	r5, [pc, #116]	; (bb8 <main+0x114>)
     b42:	54ca      	strb	r2, [r1, r3]
     b44:	61ee      	str	r6, [r5, #28]

                pinToggle(LedPin);

                if (my_altimeter.myFlashMemory.currentAddress <= my_altimeter.myFlashMemory.endingAddress) {
     b46:	9b22      	ldr	r3, [sp, #136]	; 0x88
     b48:	9a23      	ldr	r2, [sp, #140]	; 0x8c
     b4a:	4293      	cmp	r3, r2
     b4c:	d803      	bhi.n	b56 <main+0xb2>

                    //u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
                    my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     b4e:	3301      	adds	r3, #1
     b50:	33ff      	adds	r3, #255	; 0xff
     b52:	9322      	str	r3, [sp, #136]	; 0x88
     b54:	e7d9      	b.n	b0a <main+0x66>
                } else {
                    delay_ms(80);
     b56:	4c19      	ldr	r4, [pc, #100]	; (bbc <main+0x118>)
     b58:	2050      	movs	r0, #80	; 0x50
     b5a:	47a0      	blx	r4
     b5c:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b5e:	2050      	movs	r0, #80	; 0x50
     b60:	47a0      	blx	r4
     b62:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b64:	2050      	movs	r0, #80	; 0x50
     b66:	47a0      	blx	r4
     b68:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b6a:	2050      	movs	r0, #80	; 0x50
     b6c:	47a0      	blx	r4
     b6e:	61ee      	str	r6, [r5, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b70:	2050      	movs	r0, #80	; 0x50
     b72:	47a0      	blx	r4
     b74:	e7c9      	b.n	b0a <main+0x66>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	fffffd54 	.word	0xfffffd54
     b7c:	00000611 	.word	0x00000611
     b80:	00000581 	.word	0x00000581
     b84:	00000bc1 	.word	0x00000bc1
     b88:	00005fff 	.word	0x00005fff
     b8c:	00000291 	.word	0x00000291
     b90:	00000951 	.word	0x00000951
     b94:	00000ff9 	.word	0x00000ff9
     b98:	00000bb7 	.word	0x00000bb7
     b9c:	0000141d 	.word	0x0000141d
     ba0:	0000115d 	.word	0x0000115d
     ba4:	0000132d 	.word	0x0000132d
     ba8:	00000dcd 	.word	0x00000dcd
     bac:	20000463 	.word	0x20000463
     bb0:	20000461 	.word	0x20000461
     bb4:	00001389 	.word	0x00001389
     bb8:	41004400 	.word	0x41004400
     bbc:	00000fad 	.word	0x00000fad

00000bc0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     bc0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc2:	4c08      	ldr	r4, [pc, #32]	; (be4 <IMUinit+0x24>)
     bc4:	2580      	movs	r5, #128	; 0x80
     bc6:	0023      	movs	r3, r4
     bc8:	00ed      	lsls	r5, r5, #3
     bca:	3394      	adds	r3, #148	; 0x94
     bcc:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     bce:	4e06      	ldr	r6, [pc, #24]	; (be8 <IMUinit+0x28>)
     bd0:	210f      	movs	r1, #15
     bd2:	2000      	movs	r0, #0
     bd4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd6:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     bd8:	210c      	movs	r1, #12
     bda:	2000      	movs	r0, #0
     bdc:	47b0      	blx	r6
     bde:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     be0:	bd70      	pop	{r4, r5, r6, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	41004400 	.word	0x41004400
     be8:	000018d1 	.word	0x000018d1

00000bec <isFlightLogged>:
        }
    }
}


bool isFlightLogged(u8_t flightNumbToCheck) {
     bec:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     bee:	2103      	movs	r1, #3

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     bf0:	2300      	movs	r3, #0

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     bf2:	4348      	muls	r0, r1

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     bf4:	ac01      	add	r4, sp, #4

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     bf6:	3001      	adds	r0, #1

bool isFlightLogged(u8_t flightNumbToCheck) {



    u8_t addressToCheck[3] = {0x00, 0x00, 0x00};
     bf8:	7023      	strb	r3, [r4, #0]
     bfa:	7063      	strb	r3, [r4, #1]
     bfc:	70a3      	strb	r3, [r4, #2]

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
     bfe:	30ff      	adds	r0, #255	; 0xff
     c00:	0022      	movs	r2, r4
     c02:	4b07      	ldr	r3, [pc, #28]	; (c20 <isFlightLogged+0x34>)
     c04:	4798      	blx	r3

    u32_t possibleStart = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    if (possibleStart == 0xFFFFFF) {
     c06:	7860      	ldrb	r0, [r4, #1]
     c08:	78a3      	ldrb	r3, [r4, #2]
     c0a:	0200      	lsls	r0, r0, #8
     c0c:	041b      	lsls	r3, r3, #16
     c0e:	4318      	orrs	r0, r3
     c10:	7823      	ldrb	r3, [r4, #0]
     c12:	4318      	orrs	r0, r3
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <isFlightLogged+0x38>)
     c16:	18c0      	adds	r0, r0, r3
     c18:	1e43      	subs	r3, r0, #1
     c1a:	4198      	sbcs	r0, r3
     c1c:	b2c0      	uxtb	r0, r0
    } else {
        return true;
    }


}
     c1e:	bd16      	pop	{r1, r2, r4, pc}
     c20:	000001e5 	.word	0x000001e5
     c24:	ff000001 	.word	0xff000001

00000c28 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c28:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c2a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c2c:	4a10      	ldr	r2, [pc, #64]	; (c70 <adcInit+0x48>)
     c2e:	0249      	lsls	r1, r1, #9
     c30:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c32:	4810      	ldr	r0, [pc, #64]	; (c74 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c34:	430b      	orrs	r3, r1
     c36:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c38:	23e0      	movs	r3, #224	; 0xe0
     c3a:	490f      	ldr	r1, [pc, #60]	; (c78 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c3c:	4a0f      	ldr	r2, [pc, #60]	; (c7c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c3e:	00db      	lsls	r3, r3, #3
     c40:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c42:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c44:	4a0e      	ldr	r2, [pc, #56]	; (c80 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c46:	6812      	ldr	r2, [r2, #0]
     c48:	0150      	lsls	r0, r2, #5
     c4a:	4018      	ands	r0, r3
     c4c:	4b0d      	ldr	r3, [pc, #52]	; (c84 <adcInit+0x5c>)
     c4e:	0154      	lsls	r4, r2, #5
     c50:	681a      	ldr	r2, [r3, #0]
     c52:	0ed3      	lsrs	r3, r2, #27
     c54:	4323      	orrs	r3, r4
     c56:	b2da      	uxtb	r2, r3
     c58:	0003      	movs	r3, r0
     c5a:	4313      	orrs	r3, r2
     c5c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c5e:	2302      	movs	r3, #2
     c60:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c62:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c64:	7e4b      	ldrb	r3, [r1, #25]
     c66:	b25b      	sxtb	r3, r3
     c68:	2b00      	cmp	r3, #0
     c6a:	dbfb      	blt.n	c64 <adcInit+0x3c>
}
     c6c:	bd10      	pop	{r4, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	40000400 	.word	0x40000400
     c74:	0000401e 	.word	0x0000401e
     c78:	42004000 	.word	0x42004000
     c7c:	40000c00 	.word	0x40000c00
     c80:	00806024 	.word	0x00806024
     c84:	00806020 	.word	0x00806020

00000c88 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c88:	2202      	movs	r2, #2
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <adcSample+0x18>)
     c8c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c8e:	3a01      	subs	r2, #1
     c90:	7e19      	ldrb	r1, [r3, #24]
     c92:	4211      	tst	r1, r2
     c94:	d0fc      	beq.n	c90 <adcSample+0x8>
    return ADC->RESULT.reg;
     c96:	4b02      	ldr	r3, [pc, #8]	; (ca0 <adcSample+0x18>)
     c98:	8b58      	ldrh	r0, [r3, #26]
     c9a:	b280      	uxth	r0, r0
}
     c9c:	4770      	bx	lr
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	42004000 	.word	0x42004000

00000ca4 <adc_read>:


u16_t adc_read(Pin p) {
     ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ca6:	2501      	movs	r5, #1
     ca8:	0c02      	lsrs	r2, r0, #16
     caa:	b2d4      	uxtb	r4, r2
     cac:	9000      	str	r0, [sp, #0]
     cae:	0e00      	lsrs	r0, r0, #24
     cb0:	9101      	str	r1, [sp, #4]
     cb2:	0842      	lsrs	r2, r0, #1
     cb4:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cb6:	4911      	ldr	r1, [pc, #68]	; (cfc <adc_read+0x58>)
     cb8:	18d2      	adds	r2, r2, r3
     cba:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cbc:	4228      	tst	r0, r5
     cbe:	d005      	beq.n	ccc <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cc0:	210f      	movs	r1, #15
     cc2:	7814      	ldrb	r4, [r2, #0]
     cc4:	4021      	ands	r1, r4
     cc6:	2410      	movs	r4, #16
     cc8:	4321      	orrs	r1, r4
     cca:	e003      	b.n	cd4 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     ccc:	240f      	movs	r4, #15
     cce:	7811      	ldrb	r1, [r2, #0]
     cd0:	43a1      	bics	r1, r4
     cd2:	4329      	orrs	r1, r5
     cd4:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     cd6:	2101      	movs	r1, #1
     cd8:	4a09      	ldr	r2, [pc, #36]	; (d00 <adc_read+0x5c>)
     cda:	18c3      	adds	r3, r0, r3
     cdc:	189b      	adds	r3, r3, r2
     cde:	781a      	ldrb	r2, [r3, #0]
     ce0:	430a      	orrs	r2, r1
     ce2:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     ce4:	466b      	mov	r3, sp
     ce6:	791a      	ldrb	r2, [r3, #4]
     ce8:	231f      	movs	r3, #31
     cea:	4013      	ands	r3, r2
     cec:	22c0      	movs	r2, #192	; 0xc0
     cee:	0152      	lsls	r2, r2, #5
     cf0:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     cf2:	4a04      	ldr	r2, [pc, #16]	; (d04 <adc_read+0x60>)
     cf4:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <adc_read+0x64>)
     cf8:	4798      	blx	r3
     cfa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     cfc:	41004430 	.word	0x41004430
     d00:	41004440 	.word	0x41004440
     d04:	42004000 	.word	0x42004000
     d08:	00000c89 	.word	0x00000c89

00000d0c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     d0c:	0c01      	lsrs	r1, r0, #16
     d0e:	0c13      	lsrs	r3, r2, #16
     d10:	b5f0      	push	{r4, r5, r6, r7, lr}
     d12:	b2cd      	uxtb	r5, r1
     d14:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d16:	2301      	movs	r3, #1
     d18:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d1a:	0e12      	lsrs	r2, r2, #24
     d1c:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d1e:	0e00      	lsrs	r0, r0, #24
     d20:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d22:	001a      	movs	r2, r3
     d24:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d26:	0030      	movs	r0, r6
     d28:	4e11      	ldr	r6, [pc, #68]	; (d70 <byteOut+0x64>)
     d2a:	01c9      	lsls	r1, r1, #7
     d2c:	b087      	sub	sp, #28
     d2e:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d30:	4e10      	ldr	r6, [pc, #64]	; (d74 <byteOut+0x68>)
     d32:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d34:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d36:	19ae      	adds	r6, r5, r6
     d38:	7824      	ldrb	r4, [r4, #0]
     d3a:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d3c:	4e0c      	ldr	r6, [pc, #48]	; (d70 <byteOut+0x64>)
     d3e:	46b4      	mov	ip, r6
     d40:	44ac      	add	ip, r5
     d42:	4666      	mov	r6, ip
     d44:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     d46:	b266      	sxtb	r6, r4
     d48:	2e00      	cmp	r6, #0
     d4a:	da05      	bge.n	d58 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d4c:	4e09      	ldr	r6, [pc, #36]	; (d74 <byteOut+0x68>)
     d4e:	46b4      	mov	ip, r6
     d50:	448c      	add	ip, r1
     d52:	4666      	mov	r6, ip
     d54:	6032      	str	r2, [r6, #0]
     d56:	e000      	b.n	d5a <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d58:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d5a:	9e01      	ldr	r6, [sp, #4]
     d5c:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d5e:	0064      	lsls	r4, r4, #1
     d60:	b2db      	uxtb	r3, r3
     d62:	6030      	str	r0, [r6, #0]
     d64:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d66:	2b00      	cmp	r3, #0
     d68:	d1e8      	bne.n	d3c <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d6a:	b007      	add	sp, #28
     d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	41004414 	.word	0x41004414
     d74:	41004418 	.word	0x41004418

00000d78 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d7a:	2501      	movs	r5, #1
     d7c:	b085      	sub	sp, #20
     d7e:	9103      	str	r1, [sp, #12]
     d80:	0011      	movs	r1, r2
     d82:	0c06      	lsrs	r6, r0, #16
     d84:	9301      	str	r3, [sp, #4]
     d86:	b2f3      	uxtb	r3, r6
     d88:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d8a:	0e09      	lsrs	r1, r1, #24
     d8c:	0c14      	lsrs	r4, r2, #16
     d8e:	9002      	str	r0, [sp, #8]
     d90:	9200      	str	r2, [sp, #0]
     d92:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d94:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d96:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d98:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d9a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d9c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d9e:	4c0a      	ldr	r4, [pc, #40]	; (dc8 <byteIn+0x50>)
     da0:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     da2:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da4:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     da6:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da8:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     daa:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     dac:	0040      	lsls	r0, r0, #1
     dae:	402c      	ands	r4, r5
     db0:	1e67      	subs	r7, r4, #1
     db2:	41bc      	sbcs	r4, r7
     db4:	3901      	subs	r1, #1
     db6:	4304      	orrs	r4, r0
     db8:	b2c9      	uxtb	r1, r1
     dba:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dbc:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     dbe:	2900      	cmp	r1, #0
     dc0:	d1f2      	bne.n	da8 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     dc2:	b005      	add	sp, #20
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	41004400 	.word	0x41004400

00000dcc <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     dce:	2380      	movs	r3, #128	; 0x80
     dd0:	2780      	movs	r7, #128	; 0x80
     dd2:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     dd4:	2500      	movs	r5, #0
     dd6:	4c0a      	ldr	r4, [pc, #40]	; (e00 <beep+0x34>)
     dd8:	035b      	lsls	r3, r3, #13
     dda:	61e3      	str	r3, [r4, #28]
     ddc:	03bf      	lsls	r7, r7, #14
     dde:	42b5      	cmp	r5, r6
     de0:	d006      	beq.n	df0 <beep+0x24>
     de2:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     de4:	207a      	movs	r0, #122	; 0x7a
     de6:	4b07      	ldr	r3, [pc, #28]	; (e04 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     de8:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     dea:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     dec:	b2ad      	uxth	r5, r5
     dee:	e7f6      	b.n	dde <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     df0:	2380      	movs	r3, #128	; 0x80
     df2:	039b      	lsls	r3, r3, #14
     df4:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     df6:	2380      	movs	r3, #128	; 0x80
     df8:	035b      	lsls	r3, r3, #13
     dfa:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	41004400 	.word	0x41004400
     e04:	00000f7d 	.word	0x00000f7d

00000e08 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e08:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e0a:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e0c:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e0e:	4916      	ldr	r1, [pc, #88]	; (e68 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e10:	4a16      	ldr	r2, [pc, #88]	; (e6c <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e12:	00db      	lsls	r3, r3, #3
     e14:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e16:	6853      	ldr	r3, [r2, #4]
     e18:	4303      	orrs	r3, r0
     e1a:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e1c:	4b14      	ldr	r3, [pc, #80]	; (e70 <GclkInit+0x68>)
     e1e:	681a      	ldr	r2, [r3, #0]
     e20:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e22:	2a3f      	cmp	r2, #63	; 0x3f
     e24:	d100      	bne.n	e28 <GclkInit+0x20>
        coarse = 0x1f;
     e26:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e28:	4b12      	ldr	r3, [pc, #72]	; (e74 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e2a:	4813      	ldr	r0, [pc, #76]	; (e78 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e2c:	681b      	ldr	r3, [r3, #0]
     e2e:	059b      	lsls	r3, r3, #22
     e30:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e32:	4283      	cmp	r3, r0
     e34:	d100      	bne.n	e38 <GclkInit+0x30>
        fine = 0x1ff;
     e36:	4b11      	ldr	r3, [pc, #68]	; (e7c <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e38:	4811      	ldr	r0, [pc, #68]	; (e80 <GclkInit+0x78>)
     e3a:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e3c:	2010      	movs	r0, #16
     e3e:	68cc      	ldr	r4, [r1, #12]
     e40:	4204      	tst	r4, r0
     e42:	d0fc      	beq.n	e3e <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e44:	0292      	lsls	r2, r2, #10
     e46:	4313      	orrs	r3, r2
     e48:	4a07      	ldr	r2, [pc, #28]	; (e68 <GclkInit+0x60>)
     e4a:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e4c:	2310      	movs	r3, #16
     e4e:	68ca      	ldr	r2, [r1, #12]
     e50:	421a      	tst	r2, r3
     e52:	d0fc      	beq.n	e4e <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e54:	4a0b      	ldr	r2, [pc, #44]	; (e84 <GclkInit+0x7c>)
     e56:	4b04      	ldr	r3, [pc, #16]	; (e68 <GclkInit+0x60>)
     e58:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e5a:	2280      	movs	r2, #128	; 0x80
     e5c:	4b0a      	ldr	r3, [pc, #40]	; (e88 <GclkInit+0x80>)
     e5e:	0052      	lsls	r2, r2, #1
     e60:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e62:	4a0a      	ldr	r2, [pc, #40]	; (e8c <GclkInit+0x84>)
     e64:	605a      	str	r2, [r3, #4]
}
     e66:	bd10      	pop	{r4, pc}
     e68:	40000800 	.word	0x40000800
     e6c:	41004000 	.word	0x41004000
     e70:	00806024 	.word	0x00806024
     e74:	00806028 	.word	0x00806028
     e78:	000003ff 	.word	0x000003ff
     e7c:	000001ff 	.word	0x000001ff
     e80:	00000522 	.word	0x00000522
     e84:	000005a2 	.word	0x000005a2
     e88:	40000c00 	.word	0x40000c00
     e8c:	00010700 	.word	0x00010700

00000e90 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e90:	4a1d      	ldr	r2, [pc, #116]	; (f08 <RtcInit+0x78>)
     e92:	4b1e      	ldr	r3, [pc, #120]	; (f0c <RtcInit+0x7c>)
     e94:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e96:	2202      	movs	r2, #2
     e98:	68d9      	ldr	r1, [r3, #12]
     e9a:	4211      	tst	r1, r2
     e9c:	d0fc      	beq.n	e98 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e9e:	2281      	movs	r2, #129	; 0x81
     ea0:	4b1b      	ldr	r3, [pc, #108]	; (f10 <RtcInit+0x80>)
     ea2:	0052      	lsls	r2, r2, #1
     ea4:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ea6:	4a1b      	ldr	r2, [pc, #108]	; (f14 <RtcInit+0x84>)
     ea8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     eaa:	785a      	ldrb	r2, [r3, #1]
     eac:	b252      	sxtb	r2, r2
     eae:	2a00      	cmp	r2, #0
     eb0:	dbfb      	blt.n	eaa <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     eb2:	4a19      	ldr	r2, [pc, #100]	; (f18 <RtcInit+0x88>)
     eb4:	4b16      	ldr	r3, [pc, #88]	; (f10 <RtcInit+0x80>)
     eb6:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     eb8:	2204      	movs	r2, #4
     eba:	4b18      	ldr	r3, [pc, #96]	; (f1c <RtcInit+0x8c>)
     ebc:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ebe:	7a9a      	ldrb	r2, [r3, #10]
     ec0:	4916      	ldr	r1, [pc, #88]	; (f1c <RtcInit+0x8c>)
     ec2:	09d2      	lsrs	r2, r2, #7
     ec4:	d1fb      	bne.n	ebe <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ec6:	20a0      	movs	r0, #160	; 0xa0
     ec8:	880a      	ldrh	r2, [r1, #0]
     eca:	00c0      	lsls	r0, r0, #3
     ecc:	4302      	orrs	r2, r0
     ece:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ed0:	7a9a      	ldrb	r2, [r3, #10]
     ed2:	09d2      	lsrs	r2, r2, #7
     ed4:	d1fc      	bne.n	ed0 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
     ed6:	4912      	ldr	r1, [pc, #72]	; (f20 <RtcInit+0x90>)
     ed8:	4a10      	ldr	r2, [pc, #64]	; (f1c <RtcInit+0x8c>)
     eda:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     edc:	7a99      	ldrb	r1, [r3, #10]
     ede:	4a0f      	ldr	r2, [pc, #60]	; (f1c <RtcInit+0x8c>)
     ee0:	09c9      	lsrs	r1, r1, #7
     ee2:	d1fb      	bne.n	edc <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ee4:	8851      	ldrh	r1, [r2, #2]
     ee6:	480f      	ldr	r0, [pc, #60]	; (f24 <RtcInit+0x94>)
     ee8:	4301      	orrs	r1, r0
     eea:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     eec:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eee:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ef0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ef2:	8811      	ldrh	r1, [r2, #0]
     ef4:	4301      	orrs	r1, r0
     ef6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ef8:	7a9a      	ldrb	r2, [r3, #10]
     efa:	09d2      	lsrs	r2, r2, #7
     efc:	d1fc      	bne.n	ef8 <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     efe:	4b0a      	ldr	r3, [pc, #40]	; (f28 <RtcInit+0x98>)
     f00:	3208      	adds	r2, #8
     f02:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f04:	4770      	bx	lr
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	0000060e 	.word	0x0000060e
     f0c:	40000800 	.word	0x40000800
     f10:	40000c00 	.word	0x40000c00
     f14:	00230002 	.word	0x00230002
     f18:	00004204 	.word	0x00004204
     f1c:	40001400 	.word	0x40001400
     f20:	000003e6 	.word	0x000003e6
     f24:	00004010 	.word	0x00004010
     f28:	e000e100 	.word	0xe000e100

00000f2c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f2c:	230f      	movs	r3, #15
     f2e:	4018      	ands	r0, r3
     f30:	4b08      	ldr	r3, [pc, #32]	; (f54 <gclkEnable+0x28>)
     f32:	0212      	lsls	r2, r2, #8
     f34:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f36:	23f8      	movs	r3, #248	; 0xf8
     f38:	0209      	lsls	r1, r1, #8
     f3a:	015b      	lsls	r3, r3, #5
     f3c:	4019      	ands	r1, r3
     f3e:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f40:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f42:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f44:	4c04      	ldr	r4, [pc, #16]	; (f58 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f46:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f48:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f4a:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f4c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f4e:	6060      	str	r0, [r4, #4]
}
     f50:	bd10      	pop	{r4, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	00ffff00 	.word	0x00ffff00
     f58:	40000c00 	.word	0x40000c00

00000f5c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <delayInit+0x14>)
     f5e:	4a05      	ldr	r2, [pc, #20]	; (f74 <delayInit+0x18>)
     f60:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f62:	2230      	movs	r2, #48	; 0x30
     f64:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f66:	4b04      	ldr	r3, [pc, #16]	; (f78 <delayInit+0x1c>)
     f68:	3a2b      	subs	r2, #43	; 0x2b
     f6a:	601a      	str	r2, [r3, #0]
}
     f6c:	4770      	bx	lr
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	20000004 	.word	0x20000004
     f74:	0000bb80 	.word	0x0000bb80
     f78:	e000e010 	.word	0xe000e010

00000f7c <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f7c:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f7e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f80:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f82:	4b08      	ldr	r3, [pc, #32]	; (fa4 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f84:	4a08      	ldr	r2, [pc, #32]	; (fa8 <delay_us+0x2c>)
     f86:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f88:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f8a:	3801      	subs	r0, #1
     f8c:	d308      	bcc.n	fa0 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f8e:	2b00      	cmp	r3, #0
     f90:	d0fb      	beq.n	f8a <delay_us+0xe>
     f92:	4e05      	ldr	r6, [pc, #20]	; (fa8 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f94:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f96:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f98:	6835      	ldr	r5, [r6, #0]
     f9a:	4225      	tst	r5, r4
     f9c:	d0fc      	beq.n	f98 <delay_us+0x1c>
     f9e:	e7f4      	b.n	f8a <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fa0:	bd70      	pop	{r4, r5, r6, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	20000004 	.word	0x20000004
     fa8:	e000e010 	.word	0xe000e010

00000fac <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fb0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     fb2:	4b08      	ldr	r3, [pc, #32]	; (fd4 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fb4:	4a08      	ldr	r2, [pc, #32]	; (fd8 <delay_ms+0x2c>)
     fb6:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fba:	3801      	subs	r0, #1
     fbc:	d308      	bcc.n	fd0 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fbe:	2b00      	cmp	r3, #0
     fc0:	d0fb      	beq.n	fba <delay_ms+0xe>
     fc2:	4e05      	ldr	r6, [pc, #20]	; (fd8 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fc4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fc6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fc8:	6835      	ldr	r5, [r6, #0]
     fca:	4225      	tst	r5, r4
     fcc:	d0fc      	beq.n	fc8 <delay_ms+0x1c>
     fce:	e7f4      	b.n	fba <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fd0:	bd70      	pop	{r4, r5, r6, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	20000004 	.word	0x20000004
     fd8:	e000e010 	.word	0xe000e010

00000fdc <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     fdc:	21fa      	movs	r1, #250	; 0xfa
     fde:	4a04      	ldr	r2, [pc, #16]	; (ff0 <RTC_Handler+0x14>)
     fe0:	0089      	lsls	r1, r1, #2
     fe2:	6813      	ldr	r3, [r2, #0]
     fe4:	185b      	adds	r3, r3, r1
     fe6:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     fe8:	22ff      	movs	r2, #255	; 0xff
     fea:	4b02      	ldr	r3, [pc, #8]	; (ff4 <RTC_Handler+0x18>)
     fec:	721a      	strb	r2, [r3, #8]
}
     fee:	4770      	bx	lr
     ff0:	2000045c 	.word	0x2000045c
     ff4:	40001400 	.word	0x40001400

00000ff8 <millis>:

uint32_t millis(void) {
     ff8:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     ffa:	f3ef 8110 	mrs	r1, PRIMASK
     ffe:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1000:	4a08      	ldr	r2, [pc, #32]	; (1024 <millis+0x2c>)
    1002:	4d09      	ldr	r5, [pc, #36]	; (1028 <millis+0x30>)
    1004:	8a10      	ldrh	r0, [r2, #16]
    1006:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1008:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    100a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    100c:	09e4      	lsrs	r4, r4, #7
    100e:	d004      	beq.n	101a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1010:	8a13      	ldrh	r3, [r2, #16]
    1012:	22fa      	movs	r2, #250	; 0xfa
    1014:	6828      	ldr	r0, [r5, #0]
    1016:	0092      	lsls	r2, r2, #2
    1018:	1880      	adds	r0, r0, r2
    101a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    101c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1020:	bd30      	pop	{r4, r5, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	40001400 	.word	0x40001400
    1028:	2000045c 	.word	0x2000045c

0000102c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    102c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    102e:	4a0d      	ldr	r2, [pc, #52]	; (1064 <TC4Init+0x38>)
    1030:	4b0d      	ldr	r3, [pc, #52]	; (1068 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1032:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1034:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1036:	4a0d      	ldr	r2, [pc, #52]	; (106c <TC4Init+0x40>)
    1038:	6a13      	ldr	r3, [r2, #32]
    103a:	430b      	orrs	r3, r1
    103c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    103e:	4b0c      	ldr	r3, [pc, #48]	; (1070 <TC4Init+0x44>)
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1042:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1044:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    1046:	2241      	movs	r2, #65	; 0x41
    1048:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    104a:	3a40      	subs	r2, #64	; 0x40
    104c:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    104e:	32ff      	adds	r2, #255	; 0xff
    1050:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1052:	881a      	ldrh	r2, [r3, #0]
    1054:	430a      	orrs	r2, r1
    1056:	801a      	strh	r2, [r3, #0]
    1058:	2280      	movs	r2, #128	; 0x80
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <TC4Init+0x4c>)
    105c:	0312      	lsls	r2, r2, #12
    105e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1060:	4770      	bx	lr
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	0000421c 	.word	0x0000421c
    1068:	40000c00 	.word	0x40000c00
    106c:	40000400 	.word	0x40000400
    1070:	42003000 	.word	0x42003000
    1074:	00000904 	.word	0x00000904
    1078:	e000e100 	.word	0xe000e100

0000107c <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    107c:	22ff      	movs	r2, #255	; 0xff
    107e:	4b03      	ldr	r3, [pc, #12]	; (108c <TC4_Handler+0x10>)
    1080:	739a      	strb	r2, [r3, #14]
    takeSample = true;
    1082:	4b03      	ldr	r3, [pc, #12]	; (1090 <TC4_Handler+0x14>)
    1084:	3afe      	subs	r2, #254	; 0xfe
    1086:	701a      	strb	r2, [r3, #0]
}
    1088:	4770      	bx	lr
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	42003000 	.word	0x42003000
    1090:	20000463 	.word	0x20000463

00001094 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1094:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1096:	4a0d      	ldr	r2, [pc, #52]	; (10cc <TC5Init+0x38>)
    1098:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    109a:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    109c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    109e:	4a0d      	ldr	r2, [pc, #52]	; (10d4 <TC5Init+0x40>)
    10a0:	6a13      	ldr	r3, [r2, #32]
    10a2:	430b      	orrs	r3, r1
    10a4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10a6:	4b0c      	ldr	r3, [pc, #48]	; (10d8 <TC5Init+0x44>)
    10a8:	4a0c      	ldr	r2, [pc, #48]	; (10dc <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10aa:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10ac:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    10ae:	2220      	movs	r2, #32
    10b0:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10b2:	3a1f      	subs	r2, #31
    10b4:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10b6:	32ff      	adds	r2, #255	; 0xff
    10b8:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ba:	881a      	ldrh	r2, [r3, #0]
    10bc:	430a      	orrs	r2, r1
    10be:	801a      	strh	r2, [r3, #0]
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	4b07      	ldr	r3, [pc, #28]	; (10e0 <TC5Init+0x4c>)
    10c4:	0352      	lsls	r2, r2, #13
    10c6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10c8:	4770      	bx	lr
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	0000421c 	.word	0x0000421c
    10d0:	40000c00 	.word	0x40000c00
    10d4:	40000400 	.word	0x40000400
    10d8:	42003400 	.word	0x42003400
    10dc:	00000d04 	.word	0x00000d04
    10e0:	e000e100 	.word	0xe000e100

000010e4 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    10e4:	22ff      	movs	r2, #255	; 0xff
    10e6:	4b03      	ldr	r3, [pc, #12]	; (10f4 <TC5_Handler+0x10>)
    10e8:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    10ea:	4b03      	ldr	r3, [pc, #12]	; (10f8 <TC5_Handler+0x14>)
    10ec:	3afe      	subs	r2, #254	; 0xfe
    10ee:	701a      	strb	r2, [r3, #0]
    10f0:	4770      	bx	lr
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	42003400 	.word	0x42003400
    10f8:	20000461 	.word	0x20000461

000010fc <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10fe:	27c0      	movs	r7, #192	; 0xc0
    1100:	4d10      	ldr	r5, [pc, #64]	; (1144 <dmaInit+0x48>)
    1102:	003a      	movs	r2, r7
    1104:	4e10      	ldr	r6, [pc, #64]	; (1148 <dmaInit+0x4c>)
    1106:	0028      	movs	r0, r5
    1108:	2100      	movs	r1, #0
    110a:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    110c:	4c0f      	ldr	r4, [pc, #60]	; (114c <dmaInit+0x50>)
    110e:	003a      	movs	r2, r7
    1110:	2100      	movs	r1, #0
    1112:	0020      	movs	r0, r4
    1114:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    1116:	2120      	movs	r1, #32
    1118:	4b0d      	ldr	r3, [pc, #52]	; (1150 <dmaInit+0x54>)
    111a:	695a      	ldr	r2, [r3, #20]
    111c:	430a      	orrs	r2, r1
    111e:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1120:	69da      	ldr	r2, [r3, #28]
    1122:	3910      	subs	r1, #16
    1124:	430a      	orrs	r2, r1
    1126:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1128:	4b0a      	ldr	r3, [pc, #40]	; (1154 <dmaInit+0x58>)
    112a:	390e      	subs	r1, #14
    112c:	881a      	ldrh	r2, [r3, #0]
    112e:	438a      	bics	r2, r1
    1130:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    1132:	881a      	ldrh	r2, [r3, #0]
    1134:	3901      	subs	r1, #1
    1136:	430a      	orrs	r2, r1
    1138:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    113a:	4a07      	ldr	r2, [pc, #28]	; (1158 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    113c:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    113e:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1140:	801a      	strh	r2, [r3, #0]
}
    1142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1144:	20000530 	.word	0x20000530
    1148:	000031d5 	.word	0x000031d5
    114c:	20000470 	.word	0x20000470
    1150:	40000400 	.word	0x40000400
    1154:	41004800 	.word	0x41004800
    1158:	00000f02 	.word	0x00000f02

0000115c <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    115e:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1160:	b085      	sub	sp, #20
    1162:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1164:	2b00      	cmp	r3, #0
    1166:	d178      	bne.n	125a <flight+0xfe>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1168:	4d3d      	ldr	r5, [pc, #244]	; (1260 <flight+0x104>)
    116a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    116c:	47a8      	blx	r5
    116e:	2200      	movs	r2, #0
    1170:	4b3c      	ldr	r3, [pc, #240]	; (1264 <flight+0x108>)
    1172:	4e3d      	ldr	r6, [pc, #244]	; (1268 <flight+0x10c>)
    1174:	47b0      	blx	r6
    1176:	0006      	movs	r6, r0
    1178:	6da0      	ldr	r0, [r4, #88]	; 0x58
    117a:	000f      	movs	r7, r1
    117c:	47a8      	blx	r5
    117e:	4d3a      	ldr	r5, [pc, #232]	; (1268 <flight+0x10c>)
    1180:	2200      	movs	r2, #0
    1182:	4b38      	ldr	r3, [pc, #224]	; (1264 <flight+0x108>)
    1184:	47a8      	blx	r5
    1186:	4d39      	ldr	r5, [pc, #228]	; (126c <flight+0x110>)
    1188:	0002      	movs	r2, r0
    118a:	000b      	movs	r3, r1
    118c:	0030      	movs	r0, r6
    118e:	0039      	movs	r1, r7
    1190:	47a8      	blx	r5
    1192:	4b37      	ldr	r3, [pc, #220]	; (1270 <flight+0x114>)
    1194:	4798      	blx	r3
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1196:	0023      	movs	r3, r4
    1198:	3348      	adds	r3, #72	; 0x48
    119a:	9301      	str	r3, [sp, #4]


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    119c:	6460      	str	r0, [r4, #68]	; 0x44
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    119e:	8818      	ldrh	r0, [r3, #0]
    11a0:	4d34      	ldr	r5, [pc, #208]	; (1274 <flight+0x118>)
    11a2:	47a8      	blx	r5
    11a4:	2200      	movs	r2, #0
    11a6:	4e30      	ldr	r6, [pc, #192]	; (1268 <flight+0x10c>)
    11a8:	4b2e      	ldr	r3, [pc, #184]	; (1264 <flight+0x108>)
    11aa:	47b0      	blx	r6
    11ac:	0023      	movs	r3, r4
    11ae:	3370      	adds	r3, #112	; 0x70
    11b0:	0006      	movs	r6, r0
    11b2:	8818      	ldrh	r0, [r3, #0]
    11b4:	000f      	movs	r7, r1
    11b6:	47a8      	blx	r5
    11b8:	4d2b      	ldr	r5, [pc, #172]	; (1268 <flight+0x10c>)
    11ba:	2200      	movs	r2, #0
    11bc:	4b29      	ldr	r3, [pc, #164]	; (1264 <flight+0x108>)
    11be:	47a8      	blx	r5
    11c0:	4d2a      	ldr	r5, [pc, #168]	; (126c <flight+0x110>)
    11c2:	0002      	movs	r2, r0
    11c4:	000b      	movs	r3, r1
    11c6:	0030      	movs	r0, r6
    11c8:	0039      	movs	r1, r7
    11ca:	47a8      	blx	r5
    11cc:	4b2a      	ldr	r3, [pc, #168]	; (1278 <flight+0x11c>)
    11ce:	4798      	blx	r3
    11d0:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    11d2:	4d2a      	ldr	r5, [pc, #168]	; (127c <flight+0x120>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    11d4:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    11d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    11d8:	47a8      	blx	r5
    11da:	4e23      	ldr	r6, [pc, #140]	; (1268 <flight+0x10c>)
    11dc:	2200      	movs	r2, #0
    11de:	4b21      	ldr	r3, [pc, #132]	; (1264 <flight+0x108>)
    11e0:	47b0      	blx	r6
    11e2:	9002      	str	r0, [sp, #8]
    11e4:	9103      	str	r1, [sp, #12]
    11e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    11e8:	47a8      	blx	r5
    11ea:	2200      	movs	r2, #0
    11ec:	4b1d      	ldr	r3, [pc, #116]	; (1264 <flight+0x108>)
    11ee:	47b0      	blx	r6
    11f0:	4e1e      	ldr	r6, [pc, #120]	; (126c <flight+0x110>)
    11f2:	0002      	movs	r2, r0
    11f4:	000b      	movs	r3, r1
    11f6:	9802      	ldr	r0, [sp, #8]
    11f8:	9903      	ldr	r1, [sp, #12]
    11fa:	47b0      	blx	r6
    11fc:	4b1e      	ldr	r3, [pc, #120]	; (1278 <flight+0x11c>)
    11fe:	4798      	blx	r3
    1200:	6320      	str	r0, [r4, #48]	; 0x30
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1202:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1204:	47a8      	blx	r5
    1206:	2200      	movs	r2, #0
    1208:	4b16      	ldr	r3, [pc, #88]	; (1264 <flight+0x108>)
    120a:	4e17      	ldr	r6, [pc, #92]	; (1268 <flight+0x10c>)
    120c:	47b0      	blx	r6
    120e:	0006      	movs	r6, r0
    1210:	69a0      	ldr	r0, [r4, #24]
    1212:	000f      	movs	r7, r1
    1214:	47a8      	blx	r5
    1216:	4d14      	ldr	r5, [pc, #80]	; (1268 <flight+0x10c>)
    1218:	2200      	movs	r2, #0
    121a:	4b12      	ldr	r3, [pc, #72]	; (1264 <flight+0x108>)
    121c:	47a8      	blx	r5
    121e:	4d13      	ldr	r5, [pc, #76]	; (126c <flight+0x110>)
    1220:	0002      	movs	r2, r0
    1222:	000b      	movs	r3, r1
    1224:	0030      	movs	r0, r6
    1226:	0039      	movs	r1, r7
    1228:	47a8      	blx	r5
    122a:	4b13      	ldr	r3, [pc, #76]	; (1278 <flight+0x11c>)
    122c:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    122e:	4d14      	ldr	r5, [pc, #80]	; (1280 <flight+0x124>)
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1230:	63a0      	str	r0, [r4, #56]	; 0x38


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1232:	47a8      	blx	r5
    1234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1236:	1ac0      	subs	r0, r0, r3
    1238:	23fa      	movs	r3, #250	; 0xfa
    123a:	00db      	lsls	r3, r3, #3
    123c:	4298      	cmp	r0, r3
    123e:	d90c      	bls.n	125a <flight+0xfe>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1240:	6b23      	ldr	r3, [r4, #48]	; 0x30
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1242:	9a01      	ldr	r2, [sp, #4]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1244:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1248:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    124a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    124c:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    124e:	0023      	movs	r3, r4
    1250:	8812      	ldrh	r2, [r2, #0]
    1252:	334a      	adds	r3, #74	; 0x4a
    1254:	801a      	strh	r2, [r3, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1256:	47a8      	blx	r5
    1258:	63e0      	str	r0, [r4, #60]	; 0x3c

        break;
    }


    125a:	b005      	add	sp, #20
    125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	00002f91 	.word	0x00002f91
    1264:	3fe00000 	.word	0x3fe00000
    1268:	00002295 	.word	0x00002295
    126c:	00001a21 	.word	0x00001a21
    1270:	00003039 	.word	0x00003039
    1274:	00002e9d 	.word	0x00002e9d
    1278:	000019e5 	.word	0x000019e5
    127c:	00002f21 	.word	0x00002f21
    1280:	00000ff9 	.word	0x00000ff9

00001284 <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1286:	26c8      	movs	r6, #200	; 0xc8
    1288:	0076      	lsls	r6, r6, #1
    128a:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    128c:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    128e:	194b      	adds	r3, r1, r5
    1290:	2bfe      	cmp	r3, #254	; 0xfe
    1292:	dc03      	bgt.n	129c <makePage+0x18>
    1294:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1296:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1298:	1947      	adds	r7, r0, r5
    129a:	e035      	b.n	1308 <makePage+0x84>
    129c:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    129e:	195c      	adds	r4, r3, r5
    12a0:	b2de      	uxtb	r6, r3
    12a2:	2cfe      	cmp	r4, #254	; 0xfe
    12a4:	dc08      	bgt.n	12b8 <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    12a6:	9a00      	ldr	r2, [sp, #0]
    12a8:	1904      	adds	r4, r0, r4
    12aa:	5cd6      	ldrb	r6, [r2, r3]
    12ac:	3492      	adds	r4, #146	; 0x92
    12ae:	34ff      	adds	r4, #255	; 0xff

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    12b0:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    12b2:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    12b4:	b29b      	uxth	r3, r3
    12b6:	e7f2      	b.n	129e <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    12b8:	23c8      	movs	r3, #200	; 0xc8
    12ba:	2500      	movs	r5, #0
    12bc:	0004      	movs	r4, r0
    12be:	005b      	lsls	r3, r3, #1
    12c0:	54c5      	strb	r5, [r0, r3]
    12c2:	4b19      	ldr	r3, [pc, #100]	; (1328 <makePage+0xa4>)
    12c4:	3492      	adds	r4, #146	; 0x92
    12c6:	18c3      	adds	r3, r0, r3
    12c8:	34ff      	adds	r4, #255	; 0xff
    12ca:	9301      	str	r3, [sp, #4]
    12cc:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    12ce:	781f      	ldrb	r7, [r3, #0]
    12d0:	46bc      	mov	ip, r7
    12d2:	4662      	mov	r2, ip
    12d4:	1e9f      	subs	r7, r3, #2
    12d6:	3fff      	subs	r7, #255	; 0xff
    12d8:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    12da:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    12dc:	701d      	strb	r5, [r3, #0]
    12de:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    12e0:	4293      	cmp	r3, r2
    12e2:	d1f4      	bne.n	12ce <makePage+0x4a>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    12e4:	25c8      	movs	r5, #200	; 0xc8
    12e6:	0033      	movs	r3, r6
    12e8:	006d      	lsls	r5, r5, #1
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    12ea:	428b      	cmp	r3, r1
    12ec:	d208      	bcs.n	1300 <makePage+0x7c>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    12ee:	9a00      	ldr	r2, [sp, #0]
    12f0:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    12f2:	3301      	adds	r3, #1
    12f4:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    12f6:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    12f8:	1b9f      	subs	r7, r3, r6
    12fa:	5547      	strb	r7, [r0, r5]
    12fc:	3401      	adds	r4, #1
    12fe:	e7f4      	b.n	12ea <makePage+0x66>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1300:	2201      	movs	r2, #1
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <makePage+0xa4>)
    1304:	54c2      	strb	r2, [r0, r3]
    1306:	e00d      	b.n	1324 <makePage+0xa0>
    1308:	1c5c      	adds	r4, r3, #1
    130a:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    130c:	428b      	cmp	r3, r1
    130e:	d809      	bhi.n	1324 <makePage+0xa0>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1310:	9a00      	ldr	r2, [sp, #0]
    1312:	5cd2      	ldrb	r2, [r2, r3]
    1314:	18fb      	adds	r3, r7, r3
    1316:	3392      	adds	r3, #146	; 0x92
    1318:	33ff      	adds	r3, #255	; 0xff
    131a:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    131c:	192b      	adds	r3, r5, r4
    131e:	5583      	strb	r3, [r0, r6]
    1320:	0023      	movs	r3, r4
    1322:	e7f1      	b.n	1308 <makePage+0x84>
        }

    }
}
    1324:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	00000291 	.word	0x00000291

0000132c <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    132c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    132e:	2346      	movs	r3, #70	; 0x46
    1330:	466a      	mov	r2, sp
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1332:	4669      	mov	r1, sp
void logFlight(Altimeter *my_altimeter) {

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1334:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1336:	7843      	ldrb	r3, [r0, #1]
    1338:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    133a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    133c:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    133e:	0a1a      	lsrs	r2, r3, #8
    1340:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1342:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1344:	0e1b      	lsrs	r3, r3, #24
    1346:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1348:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    134a:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    134c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    134e:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1350:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1352:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1354:	0e1b      	lsrs	r3, r3, #24
    1356:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1358:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    135a:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    135c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    135e:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1360:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1362:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1364:	0e1b      	lsrs	r3, r3, #24
    1366:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1368:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    136a:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    136c:	334a      	adds	r3, #74	; 0x4a
    136e:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1370:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1372:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    1374:	0a1b      	lsrs	r3, r3, #8
    1376:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1378:	2110      	movs	r1, #16
    137a:	4b02      	ldr	r3, [pc, #8]	; (1384 <logFlight+0x58>)
    137c:	4798      	blx	r3
}
    137e:	b005      	add	sp, #20
    1380:	bd00      	pop	{pc}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	00001285 	.word	0x00001285

00001388 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    138a:	2341      	movs	r3, #65	; 0x41
    138c:	466a      	mov	r2, sp
    138e:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1390:	23a8      	movs	r3, #168	; 0xa8
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1392:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1394:	009b      	lsls	r3, r3, #2
    1396:	58c3      	ldr	r3, [r0, r3]
    1398:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    139a:	0a1a      	lsrs	r2, r3, #8
    139c:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    139e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    13a0:	0e1b      	lsrs	r3, r3, #24
    13a2:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    13a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    13a6:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    13a8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    13aa:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    13ac:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    13ae:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    13b0:	0e1b      	lsrs	r3, r3, #24
    13b2:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    13b4:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    13b6:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    13b8:	3368      	adds	r3, #104	; 0x68
    13ba:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    13bc:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    13be:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    13c0:	0a1b      	lsrs	r3, r3, #8
    13c2:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    13c4:	0003      	movs	r3, r0
    13c6:	336c      	adds	r3, #108	; 0x6c
    13c8:	881b      	ldrh	r3, [r3, #0]
    13ca:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    13cc:	0a1b      	lsrs	r3, r3, #8
    13ce:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    13d0:	0003      	movs	r3, r0
    13d2:	3370      	adds	r3, #112	; 0x70
    13d4:	881b      	ldrh	r3, [r3, #0]
    13d6:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    13d8:	0a1b      	lsrs	r3, r3, #8
    13da:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    13dc:	0003      	movs	r3, r0
    13de:	3374      	adds	r3, #116	; 0x74
    13e0:	881b      	ldrh	r3, [r3, #0]
    13e2:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    13e4:	0a1b      	lsrs	r3, r3, #8
    13e6:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    13e8:	0003      	movs	r3, r0
    13ea:	3378      	adds	r3, #120	; 0x78
    13ec:	881b      	ldrh	r3, [r3, #0]
    13ee:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    13f0:	0a1b      	lsrs	r3, r3, #8
    13f2:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    13f4:	0003      	movs	r3, r0
    13f6:	337c      	adds	r3, #124	; 0x7c
    13f8:	881b      	ldrh	r3, [r3, #0]
    13fa:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    13fc:	0a1b      	lsrs	r3, r3, #8
    13fe:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1400:	0003      	movs	r3, r0
    1402:	3380      	adds	r3, #128	; 0x80
    1404:	881b      	ldrh	r3, [r3, #0]
    1406:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    1408:	0a1b      	lsrs	r3, r3, #8
    140a:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    140c:	2117      	movs	r1, #23
    140e:	4b02      	ldr	r3, [pc, #8]	; (1418 <logSensors+0x90>)
    1410:	4798      	blx	r3
}
    1412:	b007      	add	sp, #28
    1414:	bd00      	pop	{pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	00001285 	.word	0x00001285

0000141c <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    141e:	4bd2      	ldr	r3, [pc, #840]	; (1768 <sampleTick+0x34c>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1420:	b087      	sub	sp, #28
    1422:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    1424:	4798      	blx	r3
    1426:	23a8      	movs	r3, #168	; 0xa8

    my_altimeter->batV = adc_read(senseBatPin);
    1428:	4dd0      	ldr	r5, [pc, #832]	; (176c <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    142a:	009b      	lsls	r3, r3, #2
    142c:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    142e:	786b      	ldrb	r3, [r5, #1]
    1430:	7829      	ldrb	r1, [r5, #0]
    1432:	78a8      	ldrb	r0, [r5, #2]
    1434:	021b      	lsls	r3, r3, #8
    1436:	430b      	orrs	r3, r1
    1438:	0400      	lsls	r0, r0, #16
    143a:	001a      	movs	r2, r3
    143c:	0003      	movs	r3, r0
    143e:	78e8      	ldrb	r0, [r5, #3]
    1440:	4313      	orrs	r3, r2
    1442:	0600      	lsls	r0, r0, #24
    1444:	4eca      	ldr	r6, [pc, #808]	; (1770 <sampleTick+0x354>)
    1446:	7929      	ldrb	r1, [r5, #4]
    1448:	4318      	orrs	r0, r3
    144a:	47b0      	blx	r6
    144c:	23a5      	movs	r3, #165	; 0xa5
    144e:	009b      	lsls	r3, r3, #2
    1450:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1452:	79ab      	ldrb	r3, [r5, #6]
    1454:	7969      	ldrb	r1, [r5, #5]
    1456:	79e8      	ldrb	r0, [r5, #7]
    1458:	021b      	lsls	r3, r3, #8
    145a:	430b      	orrs	r3, r1
    145c:	0400      	lsls	r0, r0, #16
    145e:	001a      	movs	r2, r3
    1460:	0003      	movs	r3, r0
    1462:	7a28      	ldrb	r0, [r5, #8]
    1464:	4313      	orrs	r3, r2
    1466:	0600      	lsls	r0, r0, #24
    1468:	7a69      	ldrb	r1, [r5, #9]
    146a:	4318      	orrs	r0, r3
    146c:	47b0      	blx	r6
    146e:	4bc1      	ldr	r3, [pc, #772]	; (1774 <sampleTick+0x358>)
    my_altimeter->senseB = adc_read(senseBPin);
    1470:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1472:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    1474:	7aeb      	ldrb	r3, [r5, #11]
    1476:	7b28      	ldrb	r0, [r5, #12]
    1478:	021b      	lsls	r3, r3, #8
    147a:	430b      	orrs	r3, r1
    147c:	0400      	lsls	r0, r0, #16
    147e:	001a      	movs	r2, r3
    1480:	0003      	movs	r3, r0
    1482:	7b68      	ldrb	r0, [r5, #13]
    1484:	4313      	orrs	r3, r2
    1486:	0600      	lsls	r0, r0, #24
    1488:	7ba9      	ldrb	r1, [r5, #14]
    148a:	4318      	orrs	r0, r3
    148c:	47b0      	blx	r6
    148e:	23a6      	movs	r3, #166	; 0xa6
    1490:	009b      	lsls	r3, r3, #2
    1492:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    1494:	7c2b      	ldrb	r3, [r5, #16]
    1496:	7be9      	ldrb	r1, [r5, #15]
    1498:	7c68      	ldrb	r0, [r5, #17]
    149a:	021b      	lsls	r3, r3, #8
    149c:	430b      	orrs	r3, r1
    149e:	0400      	lsls	r0, r0, #16
    14a0:	001a      	movs	r2, r3
    14a2:	0003      	movs	r3, r0
    14a4:	7ca8      	ldrb	r0, [r5, #18]
    14a6:	4313      	orrs	r3, r2
    14a8:	0600      	lsls	r0, r0, #24
    14aa:	7ce9      	ldrb	r1, [r5, #19]
    14ac:	4318      	orrs	r0, r3
    14ae:	47b0      	blx	r6
    14b0:	4bb1      	ldr	r3, [pc, #708]	; (1778 <sampleTick+0x35c>)
    my_altimeter->senseD = adc_read(senseDPin);
    14b2:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    14b4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    14b6:	7d6b      	ldrb	r3, [r5, #21]
    14b8:	7da8      	ldrb	r0, [r5, #22]
    14ba:	021b      	lsls	r3, r3, #8
    14bc:	430b      	orrs	r3, r1
    14be:	0400      	lsls	r0, r0, #16
    14c0:	001a      	movs	r2, r3
    14c2:	0003      	movs	r3, r0
    14c4:	7de8      	ldrb	r0, [r5, #23]
    14c6:	4313      	orrs	r3, r2
    14c8:	0600      	lsls	r0, r0, #24
    14ca:	7e29      	ldrb	r1, [r5, #24]
    14cc:	4318      	orrs	r0, r3
    14ce:	47b0      	blx	r6
    14d0:	23a7      	movs	r3, #167	; 0xa7
    14d2:	009b      	lsls	r3, r3, #2
    14d4:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    14d6:	7eab      	ldrb	r3, [r5, #26]
    14d8:	7e69      	ldrb	r1, [r5, #25]
    14da:	7ee8      	ldrb	r0, [r5, #27]
    14dc:	021b      	lsls	r3, r3, #8
    14de:	430b      	orrs	r3, r1
    14e0:	0400      	lsls	r0, r0, #16
    14e2:	001a      	movs	r2, r3
    14e4:	0003      	movs	r3, r0
    14e6:	7f28      	ldrb	r0, [r5, #28]
    14e8:	4313      	orrs	r3, r2
    14ea:	0600      	lsls	r0, r0, #24
    14ec:	7f69      	ldrb	r1, [r5, #29]
    14ee:	4318      	orrs	r0, r3
    14f0:	47b0      	blx	r6
    14f2:	0023      	movs	r3, r4
    14f4:	3380      	adds	r3, #128	; 0x80
    14f6:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    14f8:	4ba0      	ldr	r3, [pc, #640]	; (177c <sampleTick+0x360>)
    14fa:	0026      	movs	r6, r4
    14fc:	18c0      	adds	r0, r0, r3
    14fe:	4ba0      	ldr	r3, [pc, #640]	; (1780 <sampleTick+0x364>)
    1500:	4798      	blx	r3
    1502:	4aa0      	ldr	r2, [pc, #640]	; (1784 <sampleTick+0x368>)
    1504:	4fa0      	ldr	r7, [pc, #640]	; (1788 <sampleTick+0x36c>)
    1506:	4ba1      	ldr	r3, [pc, #644]	; (178c <sampleTick+0x370>)
    1508:	47b8      	blx	r7
    150a:	4ba1      	ldr	r3, [pc, #644]	; (1790 <sampleTick+0x374>)
    150c:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    150e:	2780      	movs	r7, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1510:	2250      	movs	r2, #80	; 0x50
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1512:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1514:	3608      	adds	r6, #8
    1516:	67f0      	str	r0, [r6, #124]	; 0x7c

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1518:	6523      	str	r3, [r4, #80]	; 0x50
    151a:	4b9e      	ldr	r3, [pc, #632]	; (1794 <sampleTick+0x378>)
    151c:	023f      	lsls	r7, r7, #8
    151e:	615f      	str	r7, [r3, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1520:	002e      	movs	r6, r5
    1522:	9200      	str	r2, [sp, #0]
    1524:	7fea      	ldrb	r2, [r5, #31]
    1526:	7fa8      	ldrb	r0, [r5, #30]
    1528:	0212      	lsls	r2, r2, #8
    152a:	4302      	orrs	r2, r0
    152c:	0011      	movs	r1, r2
    152e:	002b      	movs	r3, r5
    1530:	361e      	adds	r6, #30
    1532:	78b2      	ldrb	r2, [r6, #2]
    1534:	3323      	adds	r3, #35	; 0x23
    1536:	0412      	lsls	r2, r2, #16
    1538:	430a      	orrs	r2, r1
    153a:	78f1      	ldrb	r1, [r6, #3]
    153c:	7818      	ldrb	r0, [r3, #0]
    153e:	0609      	lsls	r1, r1, #24
    1540:	4311      	orrs	r1, r2
    1542:	7932      	ldrb	r2, [r6, #4]
    1544:	789d      	ldrb	r5, [r3, #2]
    1546:	9204      	str	r2, [sp, #16]
    1548:	785a      	ldrb	r2, [r3, #1]
    154a:	042d      	lsls	r5, r5, #16
    154c:	0212      	lsls	r2, r2, #8
    154e:	4302      	orrs	r2, r0
    1550:	9103      	str	r1, [sp, #12]
    1552:	0011      	movs	r1, r2
    1554:	002a      	movs	r2, r5
    1556:	78dd      	ldrb	r5, [r3, #3]
    1558:	791b      	ldrb	r3, [r3, #4]
    155a:	430a      	orrs	r2, r1
    155c:	062d      	lsls	r5, r5, #24
    155e:	4315      	orrs	r5, r2
    1560:	9305      	str	r3, [sp, #20]
    1562:	9a03      	ldr	r2, [sp, #12]
    1564:	9905      	ldr	r1, [sp, #20]
    1566:	9b04      	ldr	r3, [sp, #16]
    1568:	0028      	movs	r0, r5
    156a:	4e8b      	ldr	r6, [pc, #556]	; (1798 <sampleTick+0x37c>)
    156c:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    156e:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1570:	4b88      	ldr	r3, [pc, #544]	; (1794 <sampleTick+0x378>)
    1572:	0040      	lsls	r0, r0, #1
    1574:	619f      	str	r7, [r3, #24]
    1576:	4b89      	ldr	r3, [pc, #548]	; (179c <sampleTick+0x380>)
    1578:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    157a:	4b89      	ldr	r3, [pc, #548]	; (17a0 <sampleTick+0x384>)
    157c:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    157e:	4b85      	ldr	r3, [pc, #532]	; (1794 <sampleTick+0x378>)
    1580:	6160      	str	r0, [r4, #20]
    1582:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1584:	2342      	movs	r3, #66	; 0x42
    1586:	9a03      	ldr	r2, [sp, #12]
    1588:	9300      	str	r3, [sp, #0]
    158a:	0028      	movs	r0, r5
    158c:	9b04      	ldr	r3, [sp, #16]
    158e:	9905      	ldr	r1, [sp, #20]
    1590:	47b0      	blx	r6
    1592:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1594:	4b7f      	ldr	r3, [pc, #508]	; (1794 <sampleTick+0x378>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1596:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1598:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    159a:	4b82      	ldr	r3, [pc, #520]	; (17a4 <sampleTick+0x388>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    159c:	4f82      	ldr	r7, [pc, #520]	; (17a8 <sampleTick+0x38c>)
    159e:	601a      	str	r2, [r3, #0]
    15a0:	2182      	movs	r1, #130	; 0x82
    15a2:	2000      	movs	r0, #0
    15a4:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    15a6:	21ff      	movs	r1, #255	; 0xff
    15a8:	2000      	movs	r0, #0
    15aa:	47b8      	blx	r7
    15ac:	0023      	movs	r3, r4
    15ae:	3368      	adds	r3, #104	; 0x68
    15b0:	8018      	strh	r0, [r3, #0]
    15b2:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    15b4:	21ff      	movs	r1, #255	; 0xff
    15b6:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    15b8:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    15ba:	47b8      	blx	r7
    15bc:	9b03      	ldr	r3, [sp, #12]
    15be:	0200      	lsls	r0, r0, #8
    15c0:	4305      	orrs	r5, r0
    15c2:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    15c4:	21ff      	movs	r1, #255	; 0xff
    15c6:	0026      	movs	r6, r4
    15c8:	2000      	movs	r0, #0
    15ca:	47b8      	blx	r7
    15cc:	366c      	adds	r6, #108	; 0x6c
    15ce:	8030      	strh	r0, [r6, #0]
    15d0:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    15d2:	21ff      	movs	r1, #255	; 0xff
    15d4:	2000      	movs	r0, #0
    15d6:	47b8      	blx	r7
    15d8:	0200      	lsls	r0, r0, #8
    15da:	4305      	orrs	r5, r0
    15dc:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    15de:	21ff      	movs	r1, #255	; 0xff
    15e0:	2000      	movs	r0, #0
    15e2:	47b8      	blx	r7
    15e4:	466b      	mov	r3, sp
    15e6:	0025      	movs	r5, r4
    15e8:	9004      	str	r0, [sp, #16]
    15ea:	8a1b      	ldrh	r3, [r3, #16]
    15ec:	3570      	adds	r5, #112	; 0x70
    15ee:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    15f0:	21ff      	movs	r1, #255	; 0xff
    15f2:	2000      	movs	r0, #0
    15f4:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    15f6:	2280      	movs	r2, #128	; 0x80
    15f8:	9b04      	ldr	r3, [sp, #16]
    15fa:	0200      	lsls	r0, r0, #8
    15fc:	4303      	orrs	r3, r0
    15fe:	802b      	strh	r3, [r5, #0]
    1600:	4b6a      	ldr	r3, [pc, #424]	; (17ac <sampleTick+0x390>)
    1602:	00d2      	lsls	r2, r2, #3
    1604:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    1606:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1608:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    160a:	2000      	movs	r0, #0
    160c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    160e:	2300      	movs	r3, #0
    1610:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1612:	2102      	movs	r1, #2
    1614:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1616:	0021      	movs	r1, r4
    1618:	1112      	asrs	r2, r2, #4
    161a:	1100      	asrs	r0, r0, #4
    161c:	316a      	adds	r1, #106	; 0x6a
    161e:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1620:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1622:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1624:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1626:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1628:	4b55      	ldr	r3, [pc, #340]	; (1780 <sampleTick+0x364>)
    162a:	4798      	blx	r3
    162c:	23fe      	movs	r3, #254	; 0xfe
    162e:	4d56      	ldr	r5, [pc, #344]	; (1788 <sampleTick+0x36c>)
    1630:	2200      	movs	r2, #0
    1632:	059b      	lsls	r3, r3, #22
    1634:	47a8      	blx	r5
    1636:	4b56      	ldr	r3, [pc, #344]	; (1790 <sampleTick+0x374>)
    1638:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    163a:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    163c:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    163e:	2000      	movs	r0, #0
    1640:	5e18      	ldrsh	r0, [r3, r0]
    1642:	4b4f      	ldr	r3, [pc, #316]	; (1780 <sampleTick+0x364>)
    1644:	4798      	blx	r3
    1646:	23fe      	movs	r3, #254	; 0xfe
    1648:	2200      	movs	r2, #0
    164a:	059b      	lsls	r3, r3, #22
    164c:	47a8      	blx	r5
    164e:	4b50      	ldr	r3, [pc, #320]	; (1790 <sampleTick+0x374>)
    1650:	4798      	blx	r3
    1652:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1654:	2306      	movs	r3, #6
    1656:	5ef0      	ldrsh	r0, [r6, r3]
    1658:	4b49      	ldr	r3, [pc, #292]	; (1780 <sampleTick+0x364>)
    165a:	4798      	blx	r3
    165c:	23fe      	movs	r3, #254	; 0xfe
    165e:	2200      	movs	r2, #0
    1660:	059b      	lsls	r3, r3, #22
    1662:	47a8      	blx	r5
    1664:	4b4a      	ldr	r3, [pc, #296]	; (1790 <sampleTick+0x374>)
    1666:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1668:	2280      	movs	r2, #128	; 0x80
    166a:	4b4a      	ldr	r3, [pc, #296]	; (1794 <sampleTick+0x378>)
    166c:	00d2      	lsls	r2, r2, #3
    166e:	65a0      	str	r0, [r4, #88]	; 0x58


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1670:	2182      	movs	r1, #130	; 0x82
    1672:	615a      	str	r2, [r3, #20]
    1674:	2000      	movs	r0, #0
    1676:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1678:	21ff      	movs	r1, #255	; 0xff
    167a:	2000      	movs	r0, #0
    167c:	47b8      	blx	r7
    167e:	0023      	movs	r3, r4
    1680:	3374      	adds	r3, #116	; 0x74
    1682:	8018      	strh	r0, [r3, #0]
    1684:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1686:	21ff      	movs	r1, #255	; 0xff
    1688:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    168a:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    168c:	47b8      	blx	r7
    168e:	9b03      	ldr	r3, [sp, #12]
    1690:	0200      	lsls	r0, r0, #8
    1692:	4305      	orrs	r5, r0
    1694:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1696:	21ff      	movs	r1, #255	; 0xff
    1698:	2000      	movs	r0, #0
    169a:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    169c:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    169e:	81b0      	strh	r0, [r6, #12]
    16a0:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    16a2:	2000      	movs	r0, #0
    16a4:	47b8      	blx	r7
    16a6:	0200      	lsls	r0, r0, #8
    16a8:	4305      	orrs	r5, r0
    16aa:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    16ac:	21ff      	movs	r1, #255	; 0xff
    16ae:	2000      	movs	r0, #0
    16b0:	47b8      	blx	r7
    16b2:	466b      	mov	r3, sp
    16b4:	0025      	movs	r5, r4
    16b6:	9004      	str	r0, [sp, #16]
    16b8:	8a1b      	ldrh	r3, [r3, #16]
    16ba:	357c      	adds	r5, #124	; 0x7c
    16bc:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    16be:	21ff      	movs	r1, #255	; 0xff
    16c0:	2000      	movs	r0, #0
    16c2:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    16c4:	2280      	movs	r2, #128	; 0x80
    16c6:	9f04      	ldr	r7, [sp, #16]
    16c8:	0200      	lsls	r0, r0, #8
    16ca:	4b32      	ldr	r3, [pc, #200]	; (1794 <sampleTick+0x378>)
    16cc:	4307      	orrs	r7, r0
    16ce:	00d2      	lsls	r2, r2, #3
    16d0:	802f      	strh	r7, [r5, #0]
    16d2:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    16d4:	9b03      	ldr	r3, [sp, #12]
    16d6:	2000      	movs	r0, #0
    16d8:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    16da:	230c      	movs	r3, #12
    16dc:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    16de:	2100      	movs	r1, #0
    16e0:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    16e2:	0021      	movs	r1, r4
    16e4:	1112      	asrs	r2, r2, #4
    16e6:	1100      	asrs	r0, r0, #4
    16e8:	3176      	adds	r1, #118	; 0x76
    16ea:	111b      	asrs	r3, r3, #4
    16ec:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    16ee:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    16f0:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    16f2:	4b23      	ldr	r3, [pc, #140]	; (1780 <sampleTick+0x364>)
    16f4:	4798      	blx	r3
    16f6:	23fe      	movs	r3, #254	; 0xfe
    16f8:	4f23      	ldr	r7, [pc, #140]	; (1788 <sampleTick+0x36c>)
    16fa:	2200      	movs	r2, #0
    16fc:	059b      	lsls	r3, r3, #22
    16fe:	47b8      	blx	r7
    1700:	4b23      	ldr	r3, [pc, #140]	; (1790 <sampleTick+0x374>)
    1702:	4798      	blx	r3
    1704:	65e0      	str	r0, [r4, #92]	; 0x5c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    1706:	230e      	movs	r3, #14
    1708:	5ef0      	ldrsh	r0, [r6, r3]
    170a:	4b1d      	ldr	r3, [pc, #116]	; (1780 <sampleTick+0x364>)
    170c:	4798      	blx	r3
    170e:	23fe      	movs	r3, #254	; 0xfe
    1710:	2200      	movs	r2, #0
    1712:	059b      	lsls	r3, r3, #22
    1714:	47b8      	blx	r7
    1716:	4b1e      	ldr	r3, [pc, #120]	; (1790 <sampleTick+0x374>)
    1718:	4798      	blx	r3
    171a:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    171c:	2302      	movs	r3, #2
    171e:	5ee8      	ldrsh	r0, [r5, r3]
    1720:	4b17      	ldr	r3, [pc, #92]	; (1780 <sampleTick+0x364>)
    1722:	4798      	blx	r3
    1724:	23fe      	movs	r3, #254	; 0xfe
    1726:	2200      	movs	r2, #0
    1728:	059b      	lsls	r3, r3, #22
    172a:	47b8      	blx	r7
    172c:	4b18      	ldr	r3, [pc, #96]	; (1790 <sampleTick+0x374>)
    172e:	4798      	blx	r3
    1730:	6660      	str	r0, [r4, #100]	; 0x64

    delay_us(800);
    1732:	20c8      	movs	r0, #200	; 0xc8
    1734:	4b19      	ldr	r3, [pc, #100]	; (179c <sampleTick+0x380>)
    1736:	0080      	lsls	r0, r0, #2
    1738:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    173a:	4b19      	ldr	r3, [pc, #100]	; (17a0 <sampleTick+0x384>)
    173c:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    173e:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1740:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1742:	4b1b      	ldr	r3, [pc, #108]	; (17b0 <sampleTick+0x394>)
    1744:	0028      	movs	r0, r5
    1746:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1748:	0028      	movs	r0, r5
    174a:	4b1a      	ldr	r3, [pc, #104]	; (17b4 <sampleTick+0x398>)
    174c:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    174e:	4b1a      	ldr	r3, [pc, #104]	; (17b8 <sampleTick+0x39c>)
    1750:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1752:	4798      	blx	r3
    1754:	4a19      	ldr	r2, [pc, #100]	; (17bc <sampleTick+0x3a0>)
    1756:	4b1a      	ldr	r3, [pc, #104]	; (17c0 <sampleTick+0x3a4>)
    1758:	4d0b      	ldr	r5, [pc, #44]	; (1788 <sampleTick+0x36c>)
    175a:	47a8      	blx	r5
    175c:	4b0c      	ldr	r3, [pc, #48]	; (1790 <sampleTick+0x374>)
    175e:	4798      	blx	r3
    1760:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1762:	b007      	add	sp, #28
    1764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	00000ff9 	.word	0x00000ff9
    176c:	000034d4 	.word	0x000034d4
    1770:	00000ca5 	.word	0x00000ca5
    1774:	00000296 	.word	0x00000296
    1778:	0000029a 	.word	0x0000029a
    177c:	fffff0c4 	.word	0xfffff0c4
    1780:	00002e9d 	.word	0x00002e9d
    1784:	02de00d2 	.word	0x02de00d2
    1788:	00002295 	.word	0x00002295
    178c:	bf8f8a09 	.word	0xbf8f8a09
    1790:	00003039 	.word	0x00003039
    1794:	41004400 	.word	0x41004400
    1798:	00000d0d 	.word	0x00000d0d
    179c:	00000f7d 	.word	0x00000f7d
    17a0:	000002c1 	.word	0x000002c1
    17a4:	41004494 	.word	0x41004494
    17a8:	000018d1 	.word	0x000018d1
    17ac:	41004498 	.word	0x41004498
    17b0:	00000375 	.word	0x00000375
    17b4:	00000461 	.word	0x00000461
    17b8:	00002f21 	.word	0x00002f21
    17bc:	e9f6a93f 	.word	0xe9f6a93f
    17c0:	3fa0cc78 	.word	0x3fa0cc78

000017c4 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    17c4:	b570      	push	{r4, r5, r6, lr}
    17c6:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    17c8:	2301      	movs	r3, #1
    17ca:	1ca6      	adds	r6, r4, #2
    17cc:	40b3      	lsls	r3, r6
    17ce:	480d      	ldr	r0, [pc, #52]	; (1804 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    17d0:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    17d2:	6a01      	ldr	r1, [r0, #32]
    17d4:	430b      	orrs	r3, r1
    17d6:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    17d8:	2d00      	cmp	r5, #0
    17da:	d003      	beq.n	17e4 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    17dc:	2107      	movs	r1, #7
    17de:	0028      	movs	r0, r5
    17e0:	4b09      	ldr	r3, [pc, #36]	; (1808 <sercomClockEnable+0x44>)
    17e2:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    17e4:	22f0      	movs	r2, #240	; 0xf0
    17e6:	2080      	movs	r0, #128	; 0x80
    17e8:	0229      	lsls	r1, r5, #8
    17ea:	0112      	lsls	r2, r2, #4
    17ec:	4011      	ands	r1, r2
    17ee:	01c0      	lsls	r0, r0, #7
    17f0:	4301      	orrs	r1, r0
    17f2:	0020      	movs	r0, r4
    17f4:	3014      	adds	r0, #20
    17f6:	223f      	movs	r2, #63	; 0x3f
    17f8:	0003      	movs	r3, r0
    17fa:	4013      	ands	r3, r2
    17fc:	4319      	orrs	r1, r3
    17fe:	4b03      	ldr	r3, [pc, #12]	; (180c <sercomClockEnable+0x48>)
    1800:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    1802:	bd70      	pop	{r4, r5, r6, pc}
    1804:	40000400 	.word	0x40000400
    1808:	00000f2d 	.word	0x00000f2d
    180c:	40000c00 	.word	0x40000c00

00001810 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1810:	4b04      	ldr	r3, [pc, #16]	; (1824 <sercomReset+0x14>)
    1812:	0280      	lsls	r0, r0, #10
    1814:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1816:	2301      	movs	r3, #1
    1818:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    181a:	6802      	ldr	r2, [r0, #0]
    181c:	421a      	tst	r2, r3
    181e:	d1fc      	bne.n	181a <sercomReset+0xa>
}
    1820:	4770      	bx	lr
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	42000800 	.word	0x42000800

00001828 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    182a:	0004      	movs	r4, r0
    182c:	9300      	str	r3, [sp, #0]
    182e:	ab08      	add	r3, sp, #32
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	000e      	movs	r6, r1
    1834:	9301      	str	r3, [sp, #4]
    1836:	ab09      	add	r3, sp, #36	; 0x24
    1838:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    183a:	4b12      	ldr	r3, [pc, #72]	; (1884 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    183c:	0015      	movs	r5, r2

    sercomReset(id);
    183e:	4798      	blx	r3
    1840:	4b11      	ldr	r3, [pc, #68]	; (1888 <sercomSpiMasterInit+0x60>)
    1842:	02a4      	lsls	r4, r4, #10
    1844:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    1846:	2380      	movs	r3, #128	; 0x80
    1848:	029b      	lsls	r3, r3, #10
    184a:	6063      	str	r3, [r4, #4]
    184c:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    184e:	21c0      	movs	r1, #192	; 0xc0
    1850:	042d      	lsls	r5, r5, #16
    1852:	029b      	lsls	r3, r3, #10
    1854:	402b      	ands	r3, r5
    1856:	250e      	movs	r5, #14
    1858:	0536      	lsls	r6, r6, #20
    185a:	0389      	lsls	r1, r1, #14
    185c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    185e:	9e00      	ldr	r6, [sp, #0]
    1860:	431d      	orrs	r5, r3
    1862:	1e73      	subs	r3, r6, #1
    1864:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1866:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1868:	0772      	lsls	r2, r6, #29
    186a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    186c:	432a      	orrs	r2, r5
    186e:	1e59      	subs	r1, r3, #1
    1870:	418b      	sbcs	r3, r1
    1872:	0016      	movs	r6, r2
    1874:	071b      	lsls	r3, r3, #28
    1876:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1878:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    187a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    187c:	69e3      	ldr	r3, [r4, #28]
    187e:	075b      	lsls	r3, r3, #29
    1880:	d4fc      	bmi.n	187c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1882:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1884:	00001811 	.word	0x00001811
    1888:	42000800 	.word	0x42000800

0000188c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    188e:	0007      	movs	r7, r0
    1890:	001e      	movs	r6, r3
    sercomReset(id);
    1892:	4b0c      	ldr	r3, [pc, #48]	; (18c4 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1894:	000d      	movs	r5, r1
    1896:	0014      	movs	r4, r2
    sercomReset(id);
    1898:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    189a:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <sercomUartInit+0x3c>)
    189c:	02b8      	lsls	r0, r7, #10
    189e:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    18a0:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18a2:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    18a4:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    18a6:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18a8:	0529      	lsls	r1, r5, #20
    18aa:	0392      	lsls	r2, r2, #14
    18ac:	4011      	ands	r1, r2
    18ae:	4a07      	ldr	r2, [pc, #28]	; (18cc <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    18b0:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    18b2:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18b4:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    18b6:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18b8:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    18ba:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18bc:	4023      	ands	r3, r4
    18be:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    18c0:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    18c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c4:	00001811 	.word	0x00001811
    18c8:	42000800 	.word	0x42000800
    18cc:	40000006 	.word	0x40000006

000018d0 <spiDataTransfer>:
    18d0:	4b04      	ldr	r3, [pc, #16]	; (18e4 <spiDataTransfer+0x14>)
    18d2:	0280      	lsls	r0, r0, #10
    18d4:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    18d6:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    18d8:	7e03      	ldrb	r3, [r0, #24]
    18da:	075b      	lsls	r3, r3, #29
    18dc:	d5fc      	bpl.n	18d8 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    18de:	6a80      	ldr	r0, [r0, #40]	; 0x28
    18e0:	b2c0      	uxtb	r0, r0
}
    18e2:	4770      	bx	lr
    18e4:	42000800 	.word	0x42000800

000018e8 <usartDataOut>:
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <usartDataOut+0x14>)
    18ea:	0280      	lsls	r0, r0, #10
    18ec:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    18ee:	b289      	uxth	r1, r1
    18f0:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    18f2:	7e03      	ldrb	r3, [r0, #24]
    18f4:	07db      	lsls	r3, r3, #31
    18f6:	d5fc      	bpl.n	18f2 <usartDataOut+0xa>
}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	42000800 	.word	0x42000800

00001900 <usartDataIn>:
    1900:	4b02      	ldr	r3, [pc, #8]	; (190c <usartDataIn+0xc>)
    1902:	0280      	lsls	r0, r0, #10
    1904:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1906:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1908:	b2c0      	uxtb	r0, r0
    190a:	4770      	bx	lr
    190c:	42000800 	.word	0x42000800

00001910 <__aeabi_cdrcmple>:
    1910:	4684      	mov	ip, r0
    1912:	1c10      	adds	r0, r2, #0
    1914:	4662      	mov	r2, ip
    1916:	468c      	mov	ip, r1
    1918:	1c19      	adds	r1, r3, #0
    191a:	4663      	mov	r3, ip
    191c:	e000      	b.n	1920 <__aeabi_cdcmpeq>
    191e:	46c0      	nop			; (mov r8, r8)

00001920 <__aeabi_cdcmpeq>:
    1920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1922:	f000 fc4d 	bl	21c0 <__ledf2>
    1926:	2800      	cmp	r0, #0
    1928:	d401      	bmi.n	192e <__aeabi_cdcmpeq+0xe>
    192a:	2100      	movs	r1, #0
    192c:	42c8      	cmn	r0, r1
    192e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001930 <__aeabi_dcmpeq>:
    1930:	b510      	push	{r4, lr}
    1932:	f000 fba1 	bl	2078 <__eqdf2>
    1936:	4240      	negs	r0, r0
    1938:	3001      	adds	r0, #1
    193a:	bd10      	pop	{r4, pc}

0000193c <__aeabi_dcmplt>:
    193c:	b510      	push	{r4, lr}
    193e:	f000 fc3f 	bl	21c0 <__ledf2>
    1942:	2800      	cmp	r0, #0
    1944:	db01      	blt.n	194a <__aeabi_dcmplt+0xe>
    1946:	2000      	movs	r0, #0
    1948:	bd10      	pop	{r4, pc}
    194a:	2001      	movs	r0, #1
    194c:	bd10      	pop	{r4, pc}
    194e:	46c0      	nop			; (mov r8, r8)

00001950 <__aeabi_dcmple>:
    1950:	b510      	push	{r4, lr}
    1952:	f000 fc35 	bl	21c0 <__ledf2>
    1956:	2800      	cmp	r0, #0
    1958:	dd01      	ble.n	195e <__aeabi_dcmple+0xe>
    195a:	2000      	movs	r0, #0
    195c:	bd10      	pop	{r4, pc}
    195e:	2001      	movs	r0, #1
    1960:	bd10      	pop	{r4, pc}
    1962:	46c0      	nop			; (mov r8, r8)

00001964 <__aeabi_dcmpgt>:
    1964:	b510      	push	{r4, lr}
    1966:	f000 fbc7 	bl	20f8 <__gedf2>
    196a:	2800      	cmp	r0, #0
    196c:	dc01      	bgt.n	1972 <__aeabi_dcmpgt+0xe>
    196e:	2000      	movs	r0, #0
    1970:	bd10      	pop	{r4, pc}
    1972:	2001      	movs	r0, #1
    1974:	bd10      	pop	{r4, pc}
    1976:	46c0      	nop			; (mov r8, r8)

00001978 <__aeabi_dcmpge>:
    1978:	b510      	push	{r4, lr}
    197a:	f000 fbbd 	bl	20f8 <__gedf2>
    197e:	2800      	cmp	r0, #0
    1980:	da01      	bge.n	1986 <__aeabi_dcmpge+0xe>
    1982:	2000      	movs	r0, #0
    1984:	bd10      	pop	{r4, pc}
    1986:	2001      	movs	r0, #1
    1988:	bd10      	pop	{r4, pc}
    198a:	46c0      	nop			; (mov r8, r8)

0000198c <__aeabi_lmul>:
    198c:	b5f0      	push	{r4, r5, r6, r7, lr}
    198e:	464f      	mov	r7, r9
    1990:	4646      	mov	r6, r8
    1992:	b4c0      	push	{r6, r7}
    1994:	0416      	lsls	r6, r2, #16
    1996:	0c36      	lsrs	r6, r6, #16
    1998:	4699      	mov	r9, r3
    199a:	0033      	movs	r3, r6
    199c:	0405      	lsls	r5, r0, #16
    199e:	0c2c      	lsrs	r4, r5, #16
    19a0:	0c07      	lsrs	r7, r0, #16
    19a2:	0c15      	lsrs	r5, r2, #16
    19a4:	4363      	muls	r3, r4
    19a6:	437e      	muls	r6, r7
    19a8:	436f      	muls	r7, r5
    19aa:	4365      	muls	r5, r4
    19ac:	0c1c      	lsrs	r4, r3, #16
    19ae:	19ad      	adds	r5, r5, r6
    19b0:	1964      	adds	r4, r4, r5
    19b2:	469c      	mov	ip, r3
    19b4:	42a6      	cmp	r6, r4
    19b6:	d903      	bls.n	19c0 <__aeabi_lmul+0x34>
    19b8:	2380      	movs	r3, #128	; 0x80
    19ba:	025b      	lsls	r3, r3, #9
    19bc:	4698      	mov	r8, r3
    19be:	4447      	add	r7, r8
    19c0:	4663      	mov	r3, ip
    19c2:	0c25      	lsrs	r5, r4, #16
    19c4:	19ef      	adds	r7, r5, r7
    19c6:	041d      	lsls	r5, r3, #16
    19c8:	464b      	mov	r3, r9
    19ca:	434a      	muls	r2, r1
    19cc:	4343      	muls	r3, r0
    19ce:	0c2d      	lsrs	r5, r5, #16
    19d0:	0424      	lsls	r4, r4, #16
    19d2:	1964      	adds	r4, r4, r5
    19d4:	1899      	adds	r1, r3, r2
    19d6:	19c9      	adds	r1, r1, r7
    19d8:	0020      	movs	r0, r4
    19da:	bc0c      	pop	{r2, r3}
    19dc:	4690      	mov	r8, r2
    19de:	4699      	mov	r9, r3
    19e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e2:	46c0      	nop			; (mov r8, r8)

000019e4 <__aeabi_d2uiz>:
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	2200      	movs	r2, #0
    19e8:	4b0c      	ldr	r3, [pc, #48]	; (1a1c <__aeabi_d2uiz+0x38>)
    19ea:	0004      	movs	r4, r0
    19ec:	000d      	movs	r5, r1
    19ee:	f7ff ffc3 	bl	1978 <__aeabi_dcmpge>
    19f2:	2800      	cmp	r0, #0
    19f4:	d104      	bne.n	1a00 <__aeabi_d2uiz+0x1c>
    19f6:	0020      	movs	r0, r4
    19f8:	0029      	movs	r1, r5
    19fa:	f001 fa19 	bl	2e30 <__aeabi_d2iz>
    19fe:	bd70      	pop	{r4, r5, r6, pc}
    1a00:	4b06      	ldr	r3, [pc, #24]	; (1a1c <__aeabi_d2uiz+0x38>)
    1a02:	2200      	movs	r2, #0
    1a04:	0020      	movs	r0, r4
    1a06:	0029      	movs	r1, r5
    1a08:	f000 febe 	bl	2788 <__aeabi_dsub>
    1a0c:	f001 fa10 	bl	2e30 <__aeabi_d2iz>
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	061b      	lsls	r3, r3, #24
    1a14:	469c      	mov	ip, r3
    1a16:	4460      	add	r0, ip
    1a18:	e7f1      	b.n	19fe <__aeabi_d2uiz+0x1a>
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	41e00000 	.word	0x41e00000

00001a20 <__aeabi_dadd>:
    1a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a22:	4656      	mov	r6, sl
    1a24:	465f      	mov	r7, fp
    1a26:	464d      	mov	r5, r9
    1a28:	4644      	mov	r4, r8
    1a2a:	b4f0      	push	{r4, r5, r6, r7}
    1a2c:	000f      	movs	r7, r1
    1a2e:	0ffd      	lsrs	r5, r7, #31
    1a30:	46aa      	mov	sl, r5
    1a32:	0309      	lsls	r1, r1, #12
    1a34:	007c      	lsls	r4, r7, #1
    1a36:	002e      	movs	r6, r5
    1a38:	005f      	lsls	r7, r3, #1
    1a3a:	0f45      	lsrs	r5, r0, #29
    1a3c:	0a49      	lsrs	r1, r1, #9
    1a3e:	0d7f      	lsrs	r7, r7, #21
    1a40:	4329      	orrs	r1, r5
    1a42:	00c5      	lsls	r5, r0, #3
    1a44:	0318      	lsls	r0, r3, #12
    1a46:	46bc      	mov	ip, r7
    1a48:	0a40      	lsrs	r0, r0, #9
    1a4a:	0f57      	lsrs	r7, r2, #29
    1a4c:	0d64      	lsrs	r4, r4, #21
    1a4e:	0fdb      	lsrs	r3, r3, #31
    1a50:	4338      	orrs	r0, r7
    1a52:	00d2      	lsls	r2, r2, #3
    1a54:	459a      	cmp	sl, r3
    1a56:	d100      	bne.n	1a5a <__aeabi_dadd+0x3a>
    1a58:	e0aa      	b.n	1bb0 <__aeabi_dadd+0x190>
    1a5a:	4666      	mov	r6, ip
    1a5c:	1ba6      	subs	r6, r4, r6
    1a5e:	2e00      	cmp	r6, #0
    1a60:	dc00      	bgt.n	1a64 <__aeabi_dadd+0x44>
    1a62:	e0ff      	b.n	1c64 <__aeabi_dadd+0x244>
    1a64:	4663      	mov	r3, ip
    1a66:	2b00      	cmp	r3, #0
    1a68:	d139      	bne.n	1ade <__aeabi_dadd+0xbe>
    1a6a:	0003      	movs	r3, r0
    1a6c:	4313      	orrs	r3, r2
    1a6e:	d000      	beq.n	1a72 <__aeabi_dadd+0x52>
    1a70:	e0d9      	b.n	1c26 <__aeabi_dadd+0x206>
    1a72:	076b      	lsls	r3, r5, #29
    1a74:	d009      	beq.n	1a8a <__aeabi_dadd+0x6a>
    1a76:	230f      	movs	r3, #15
    1a78:	402b      	ands	r3, r5
    1a7a:	2b04      	cmp	r3, #4
    1a7c:	d005      	beq.n	1a8a <__aeabi_dadd+0x6a>
    1a7e:	1d2b      	adds	r3, r5, #4
    1a80:	42ab      	cmp	r3, r5
    1a82:	41ad      	sbcs	r5, r5
    1a84:	426d      	negs	r5, r5
    1a86:	1949      	adds	r1, r1, r5
    1a88:	001d      	movs	r5, r3
    1a8a:	020b      	lsls	r3, r1, #8
    1a8c:	d400      	bmi.n	1a90 <__aeabi_dadd+0x70>
    1a8e:	e082      	b.n	1b96 <__aeabi_dadd+0x176>
    1a90:	4bca      	ldr	r3, [pc, #808]	; (1dbc <__aeabi_dadd+0x39c>)
    1a92:	3401      	adds	r4, #1
    1a94:	429c      	cmp	r4, r3
    1a96:	d100      	bne.n	1a9a <__aeabi_dadd+0x7a>
    1a98:	e0fe      	b.n	1c98 <__aeabi_dadd+0x278>
    1a9a:	000a      	movs	r2, r1
    1a9c:	4656      	mov	r6, sl
    1a9e:	4bc8      	ldr	r3, [pc, #800]	; (1dc0 <__aeabi_dadd+0x3a0>)
    1aa0:	08ed      	lsrs	r5, r5, #3
    1aa2:	401a      	ands	r2, r3
    1aa4:	0750      	lsls	r0, r2, #29
    1aa6:	0564      	lsls	r4, r4, #21
    1aa8:	0252      	lsls	r2, r2, #9
    1aaa:	4305      	orrs	r5, r0
    1aac:	0b12      	lsrs	r2, r2, #12
    1aae:	0d64      	lsrs	r4, r4, #21
    1ab0:	2100      	movs	r1, #0
    1ab2:	0312      	lsls	r2, r2, #12
    1ab4:	0d0b      	lsrs	r3, r1, #20
    1ab6:	051b      	lsls	r3, r3, #20
    1ab8:	0564      	lsls	r4, r4, #21
    1aba:	0b12      	lsrs	r2, r2, #12
    1abc:	431a      	orrs	r2, r3
    1abe:	0863      	lsrs	r3, r4, #1
    1ac0:	4cc0      	ldr	r4, [pc, #768]	; (1dc4 <__aeabi_dadd+0x3a4>)
    1ac2:	07f6      	lsls	r6, r6, #31
    1ac4:	4014      	ands	r4, r2
    1ac6:	431c      	orrs	r4, r3
    1ac8:	0064      	lsls	r4, r4, #1
    1aca:	0864      	lsrs	r4, r4, #1
    1acc:	4334      	orrs	r4, r6
    1ace:	0028      	movs	r0, r5
    1ad0:	0021      	movs	r1, r4
    1ad2:	bc3c      	pop	{r2, r3, r4, r5}
    1ad4:	4690      	mov	r8, r2
    1ad6:	4699      	mov	r9, r3
    1ad8:	46a2      	mov	sl, r4
    1ada:	46ab      	mov	fp, r5
    1adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ade:	4bb7      	ldr	r3, [pc, #732]	; (1dbc <__aeabi_dadd+0x39c>)
    1ae0:	429c      	cmp	r4, r3
    1ae2:	d0c6      	beq.n	1a72 <__aeabi_dadd+0x52>
    1ae4:	2380      	movs	r3, #128	; 0x80
    1ae6:	041b      	lsls	r3, r3, #16
    1ae8:	4318      	orrs	r0, r3
    1aea:	2e38      	cmp	r6, #56	; 0x38
    1aec:	dd00      	ble.n	1af0 <__aeabi_dadd+0xd0>
    1aee:	e0eb      	b.n	1cc8 <__aeabi_dadd+0x2a8>
    1af0:	2e1f      	cmp	r6, #31
    1af2:	dd00      	ble.n	1af6 <__aeabi_dadd+0xd6>
    1af4:	e11e      	b.n	1d34 <__aeabi_dadd+0x314>
    1af6:	2320      	movs	r3, #32
    1af8:	1b9b      	subs	r3, r3, r6
    1afa:	469c      	mov	ip, r3
    1afc:	0003      	movs	r3, r0
    1afe:	4667      	mov	r7, ip
    1b00:	40bb      	lsls	r3, r7
    1b02:	4698      	mov	r8, r3
    1b04:	0013      	movs	r3, r2
    1b06:	4647      	mov	r7, r8
    1b08:	40f3      	lsrs	r3, r6
    1b0a:	433b      	orrs	r3, r7
    1b0c:	4667      	mov	r7, ip
    1b0e:	40ba      	lsls	r2, r7
    1b10:	1e57      	subs	r7, r2, #1
    1b12:	41ba      	sbcs	r2, r7
    1b14:	4313      	orrs	r3, r2
    1b16:	0002      	movs	r2, r0
    1b18:	40f2      	lsrs	r2, r6
    1b1a:	1aeb      	subs	r3, r5, r3
    1b1c:	429d      	cmp	r5, r3
    1b1e:	41b6      	sbcs	r6, r6
    1b20:	001d      	movs	r5, r3
    1b22:	1a8a      	subs	r2, r1, r2
    1b24:	4276      	negs	r6, r6
    1b26:	1b91      	subs	r1, r2, r6
    1b28:	020b      	lsls	r3, r1, #8
    1b2a:	d531      	bpl.n	1b90 <__aeabi_dadd+0x170>
    1b2c:	024a      	lsls	r2, r1, #9
    1b2e:	0a56      	lsrs	r6, r2, #9
    1b30:	2e00      	cmp	r6, #0
    1b32:	d100      	bne.n	1b36 <__aeabi_dadd+0x116>
    1b34:	e0b4      	b.n	1ca0 <__aeabi_dadd+0x280>
    1b36:	0030      	movs	r0, r6
    1b38:	f001 fb0a 	bl	3150 <__clzsi2>
    1b3c:	0003      	movs	r3, r0
    1b3e:	3b08      	subs	r3, #8
    1b40:	2b1f      	cmp	r3, #31
    1b42:	dd00      	ble.n	1b46 <__aeabi_dadd+0x126>
    1b44:	e0b5      	b.n	1cb2 <__aeabi_dadd+0x292>
    1b46:	2220      	movs	r2, #32
    1b48:	0029      	movs	r1, r5
    1b4a:	1ad2      	subs	r2, r2, r3
    1b4c:	40d1      	lsrs	r1, r2
    1b4e:	409e      	lsls	r6, r3
    1b50:	000a      	movs	r2, r1
    1b52:	409d      	lsls	r5, r3
    1b54:	4332      	orrs	r2, r6
    1b56:	429c      	cmp	r4, r3
    1b58:	dd00      	ble.n	1b5c <__aeabi_dadd+0x13c>
    1b5a:	e0b1      	b.n	1cc0 <__aeabi_dadd+0x2a0>
    1b5c:	1b1c      	subs	r4, r3, r4
    1b5e:	1c63      	adds	r3, r4, #1
    1b60:	2b1f      	cmp	r3, #31
    1b62:	dd00      	ble.n	1b66 <__aeabi_dadd+0x146>
    1b64:	e0d5      	b.n	1d12 <__aeabi_dadd+0x2f2>
    1b66:	2120      	movs	r1, #32
    1b68:	0014      	movs	r4, r2
    1b6a:	0028      	movs	r0, r5
    1b6c:	1ac9      	subs	r1, r1, r3
    1b6e:	408c      	lsls	r4, r1
    1b70:	40d8      	lsrs	r0, r3
    1b72:	408d      	lsls	r5, r1
    1b74:	4304      	orrs	r4, r0
    1b76:	40da      	lsrs	r2, r3
    1b78:	1e68      	subs	r0, r5, #1
    1b7a:	4185      	sbcs	r5, r0
    1b7c:	0011      	movs	r1, r2
    1b7e:	4325      	orrs	r5, r4
    1b80:	2400      	movs	r4, #0
    1b82:	e776      	b.n	1a72 <__aeabi_dadd+0x52>
    1b84:	4641      	mov	r1, r8
    1b86:	4331      	orrs	r1, r6
    1b88:	d100      	bne.n	1b8c <__aeabi_dadd+0x16c>
    1b8a:	e234      	b.n	1ff6 <__aeabi_dadd+0x5d6>
    1b8c:	0031      	movs	r1, r6
    1b8e:	4645      	mov	r5, r8
    1b90:	076b      	lsls	r3, r5, #29
    1b92:	d000      	beq.n	1b96 <__aeabi_dadd+0x176>
    1b94:	e76f      	b.n	1a76 <__aeabi_dadd+0x56>
    1b96:	4656      	mov	r6, sl
    1b98:	0748      	lsls	r0, r1, #29
    1b9a:	08ed      	lsrs	r5, r5, #3
    1b9c:	08c9      	lsrs	r1, r1, #3
    1b9e:	4305      	orrs	r5, r0
    1ba0:	4b86      	ldr	r3, [pc, #536]	; (1dbc <__aeabi_dadd+0x39c>)
    1ba2:	429c      	cmp	r4, r3
    1ba4:	d035      	beq.n	1c12 <__aeabi_dadd+0x1f2>
    1ba6:	030a      	lsls	r2, r1, #12
    1ba8:	0564      	lsls	r4, r4, #21
    1baa:	0b12      	lsrs	r2, r2, #12
    1bac:	0d64      	lsrs	r4, r4, #21
    1bae:	e77f      	b.n	1ab0 <__aeabi_dadd+0x90>
    1bb0:	4663      	mov	r3, ip
    1bb2:	1ae3      	subs	r3, r4, r3
    1bb4:	469b      	mov	fp, r3
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	dc00      	bgt.n	1bbc <__aeabi_dadd+0x19c>
    1bba:	e08b      	b.n	1cd4 <__aeabi_dadd+0x2b4>
    1bbc:	4667      	mov	r7, ip
    1bbe:	2f00      	cmp	r7, #0
    1bc0:	d03c      	beq.n	1c3c <__aeabi_dadd+0x21c>
    1bc2:	4f7e      	ldr	r7, [pc, #504]	; (1dbc <__aeabi_dadd+0x39c>)
    1bc4:	42bc      	cmp	r4, r7
    1bc6:	d100      	bne.n	1bca <__aeabi_dadd+0x1aa>
    1bc8:	e753      	b.n	1a72 <__aeabi_dadd+0x52>
    1bca:	2780      	movs	r7, #128	; 0x80
    1bcc:	043f      	lsls	r7, r7, #16
    1bce:	4338      	orrs	r0, r7
    1bd0:	465b      	mov	r3, fp
    1bd2:	2b38      	cmp	r3, #56	; 0x38
    1bd4:	dc00      	bgt.n	1bd8 <__aeabi_dadd+0x1b8>
    1bd6:	e0f7      	b.n	1dc8 <__aeabi_dadd+0x3a8>
    1bd8:	4302      	orrs	r2, r0
    1bda:	1e50      	subs	r0, r2, #1
    1bdc:	4182      	sbcs	r2, r0
    1bde:	2000      	movs	r0, #0
    1be0:	b2d2      	uxtb	r2, r2
    1be2:	1953      	adds	r3, r2, r5
    1be4:	1842      	adds	r2, r0, r1
    1be6:	42ab      	cmp	r3, r5
    1be8:	4189      	sbcs	r1, r1
    1bea:	001d      	movs	r5, r3
    1bec:	4249      	negs	r1, r1
    1bee:	1889      	adds	r1, r1, r2
    1bf0:	020b      	lsls	r3, r1, #8
    1bf2:	d5cd      	bpl.n	1b90 <__aeabi_dadd+0x170>
    1bf4:	4b71      	ldr	r3, [pc, #452]	; (1dbc <__aeabi_dadd+0x39c>)
    1bf6:	3401      	adds	r4, #1
    1bf8:	429c      	cmp	r4, r3
    1bfa:	d100      	bne.n	1bfe <__aeabi_dadd+0x1de>
    1bfc:	e13d      	b.n	1e7a <__aeabi_dadd+0x45a>
    1bfe:	2001      	movs	r0, #1
    1c00:	4a6f      	ldr	r2, [pc, #444]	; (1dc0 <__aeabi_dadd+0x3a0>)
    1c02:	086b      	lsrs	r3, r5, #1
    1c04:	400a      	ands	r2, r1
    1c06:	4028      	ands	r0, r5
    1c08:	4318      	orrs	r0, r3
    1c0a:	07d5      	lsls	r5, r2, #31
    1c0c:	4305      	orrs	r5, r0
    1c0e:	0851      	lsrs	r1, r2, #1
    1c10:	e72f      	b.n	1a72 <__aeabi_dadd+0x52>
    1c12:	002b      	movs	r3, r5
    1c14:	430b      	orrs	r3, r1
    1c16:	d100      	bne.n	1c1a <__aeabi_dadd+0x1fa>
    1c18:	e1cb      	b.n	1fb2 <__aeabi_dadd+0x592>
    1c1a:	2380      	movs	r3, #128	; 0x80
    1c1c:	031b      	lsls	r3, r3, #12
    1c1e:	430b      	orrs	r3, r1
    1c20:	031a      	lsls	r2, r3, #12
    1c22:	0b12      	lsrs	r2, r2, #12
    1c24:	e744      	b.n	1ab0 <__aeabi_dadd+0x90>
    1c26:	3e01      	subs	r6, #1
    1c28:	2e00      	cmp	r6, #0
    1c2a:	d16d      	bne.n	1d08 <__aeabi_dadd+0x2e8>
    1c2c:	1aae      	subs	r6, r5, r2
    1c2e:	42b5      	cmp	r5, r6
    1c30:	419b      	sbcs	r3, r3
    1c32:	1a09      	subs	r1, r1, r0
    1c34:	425b      	negs	r3, r3
    1c36:	1ac9      	subs	r1, r1, r3
    1c38:	0035      	movs	r5, r6
    1c3a:	e775      	b.n	1b28 <__aeabi_dadd+0x108>
    1c3c:	0007      	movs	r7, r0
    1c3e:	4317      	orrs	r7, r2
    1c40:	d100      	bne.n	1c44 <__aeabi_dadd+0x224>
    1c42:	e716      	b.n	1a72 <__aeabi_dadd+0x52>
    1c44:	2301      	movs	r3, #1
    1c46:	425b      	negs	r3, r3
    1c48:	469c      	mov	ip, r3
    1c4a:	44e3      	add	fp, ip
    1c4c:	465b      	mov	r3, fp
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d000      	beq.n	1c54 <__aeabi_dadd+0x234>
    1c52:	e0e0      	b.n	1e16 <__aeabi_dadd+0x3f6>
    1c54:	18aa      	adds	r2, r5, r2
    1c56:	42aa      	cmp	r2, r5
    1c58:	419b      	sbcs	r3, r3
    1c5a:	1809      	adds	r1, r1, r0
    1c5c:	425b      	negs	r3, r3
    1c5e:	1859      	adds	r1, r3, r1
    1c60:	0015      	movs	r5, r2
    1c62:	e7c5      	b.n	1bf0 <__aeabi_dadd+0x1d0>
    1c64:	2e00      	cmp	r6, #0
    1c66:	d175      	bne.n	1d54 <__aeabi_dadd+0x334>
    1c68:	1c66      	adds	r6, r4, #1
    1c6a:	0576      	lsls	r6, r6, #21
    1c6c:	0d76      	lsrs	r6, r6, #21
    1c6e:	2e01      	cmp	r6, #1
    1c70:	dc00      	bgt.n	1c74 <__aeabi_dadd+0x254>
    1c72:	e0f3      	b.n	1e5c <__aeabi_dadd+0x43c>
    1c74:	1aae      	subs	r6, r5, r2
    1c76:	46b0      	mov	r8, r6
    1c78:	4545      	cmp	r5, r8
    1c7a:	41bf      	sbcs	r7, r7
    1c7c:	1a0e      	subs	r6, r1, r0
    1c7e:	427f      	negs	r7, r7
    1c80:	1bf6      	subs	r6, r6, r7
    1c82:	0237      	lsls	r7, r6, #8
    1c84:	d400      	bmi.n	1c88 <__aeabi_dadd+0x268>
    1c86:	e08f      	b.n	1da8 <__aeabi_dadd+0x388>
    1c88:	1b55      	subs	r5, r2, r5
    1c8a:	42aa      	cmp	r2, r5
    1c8c:	41b6      	sbcs	r6, r6
    1c8e:	1a41      	subs	r1, r0, r1
    1c90:	4276      	negs	r6, r6
    1c92:	1b8e      	subs	r6, r1, r6
    1c94:	469a      	mov	sl, r3
    1c96:	e74b      	b.n	1b30 <__aeabi_dadd+0x110>
    1c98:	4656      	mov	r6, sl
    1c9a:	2200      	movs	r2, #0
    1c9c:	2500      	movs	r5, #0
    1c9e:	e707      	b.n	1ab0 <__aeabi_dadd+0x90>
    1ca0:	0028      	movs	r0, r5
    1ca2:	f001 fa55 	bl	3150 <__clzsi2>
    1ca6:	3020      	adds	r0, #32
    1ca8:	0003      	movs	r3, r0
    1caa:	3b08      	subs	r3, #8
    1cac:	2b1f      	cmp	r3, #31
    1cae:	dc00      	bgt.n	1cb2 <__aeabi_dadd+0x292>
    1cb0:	e749      	b.n	1b46 <__aeabi_dadd+0x126>
    1cb2:	002a      	movs	r2, r5
    1cb4:	3828      	subs	r0, #40	; 0x28
    1cb6:	4082      	lsls	r2, r0
    1cb8:	2500      	movs	r5, #0
    1cba:	429c      	cmp	r4, r3
    1cbc:	dc00      	bgt.n	1cc0 <__aeabi_dadd+0x2a0>
    1cbe:	e74d      	b.n	1b5c <__aeabi_dadd+0x13c>
    1cc0:	493f      	ldr	r1, [pc, #252]	; (1dc0 <__aeabi_dadd+0x3a0>)
    1cc2:	1ae4      	subs	r4, r4, r3
    1cc4:	4011      	ands	r1, r2
    1cc6:	e6d4      	b.n	1a72 <__aeabi_dadd+0x52>
    1cc8:	4302      	orrs	r2, r0
    1cca:	1e50      	subs	r0, r2, #1
    1ccc:	4182      	sbcs	r2, r0
    1cce:	b2d3      	uxtb	r3, r2
    1cd0:	2200      	movs	r2, #0
    1cd2:	e722      	b.n	1b1a <__aeabi_dadd+0xfa>
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d000      	beq.n	1cda <__aeabi_dadd+0x2ba>
    1cd8:	e0f3      	b.n	1ec2 <__aeabi_dadd+0x4a2>
    1cda:	1c63      	adds	r3, r4, #1
    1cdc:	469c      	mov	ip, r3
    1cde:	055b      	lsls	r3, r3, #21
    1ce0:	0d5b      	lsrs	r3, r3, #21
    1ce2:	2b01      	cmp	r3, #1
    1ce4:	dc00      	bgt.n	1ce8 <__aeabi_dadd+0x2c8>
    1ce6:	e09f      	b.n	1e28 <__aeabi_dadd+0x408>
    1ce8:	4b34      	ldr	r3, [pc, #208]	; (1dbc <__aeabi_dadd+0x39c>)
    1cea:	459c      	cmp	ip, r3
    1cec:	d100      	bne.n	1cf0 <__aeabi_dadd+0x2d0>
    1cee:	e0c3      	b.n	1e78 <__aeabi_dadd+0x458>
    1cf0:	18aa      	adds	r2, r5, r2
    1cf2:	1809      	adds	r1, r1, r0
    1cf4:	42aa      	cmp	r2, r5
    1cf6:	4180      	sbcs	r0, r0
    1cf8:	4240      	negs	r0, r0
    1cfa:	1841      	adds	r1, r0, r1
    1cfc:	07cd      	lsls	r5, r1, #31
    1cfe:	0852      	lsrs	r2, r2, #1
    1d00:	4315      	orrs	r5, r2
    1d02:	0849      	lsrs	r1, r1, #1
    1d04:	4664      	mov	r4, ip
    1d06:	e6b4      	b.n	1a72 <__aeabi_dadd+0x52>
    1d08:	4b2c      	ldr	r3, [pc, #176]	; (1dbc <__aeabi_dadd+0x39c>)
    1d0a:	429c      	cmp	r4, r3
    1d0c:	d000      	beq.n	1d10 <__aeabi_dadd+0x2f0>
    1d0e:	e6ec      	b.n	1aea <__aeabi_dadd+0xca>
    1d10:	e6af      	b.n	1a72 <__aeabi_dadd+0x52>
    1d12:	0011      	movs	r1, r2
    1d14:	3c1f      	subs	r4, #31
    1d16:	40e1      	lsrs	r1, r4
    1d18:	000c      	movs	r4, r1
    1d1a:	2b20      	cmp	r3, #32
    1d1c:	d100      	bne.n	1d20 <__aeabi_dadd+0x300>
    1d1e:	e07f      	b.n	1e20 <__aeabi_dadd+0x400>
    1d20:	2140      	movs	r1, #64	; 0x40
    1d22:	1acb      	subs	r3, r1, r3
    1d24:	409a      	lsls	r2, r3
    1d26:	4315      	orrs	r5, r2
    1d28:	1e6a      	subs	r2, r5, #1
    1d2a:	4195      	sbcs	r5, r2
    1d2c:	2100      	movs	r1, #0
    1d2e:	4325      	orrs	r5, r4
    1d30:	2400      	movs	r4, #0
    1d32:	e72d      	b.n	1b90 <__aeabi_dadd+0x170>
    1d34:	0033      	movs	r3, r6
    1d36:	0007      	movs	r7, r0
    1d38:	3b20      	subs	r3, #32
    1d3a:	40df      	lsrs	r7, r3
    1d3c:	003b      	movs	r3, r7
    1d3e:	2e20      	cmp	r6, #32
    1d40:	d070      	beq.n	1e24 <__aeabi_dadd+0x404>
    1d42:	2740      	movs	r7, #64	; 0x40
    1d44:	1bbe      	subs	r6, r7, r6
    1d46:	40b0      	lsls	r0, r6
    1d48:	4302      	orrs	r2, r0
    1d4a:	1e50      	subs	r0, r2, #1
    1d4c:	4182      	sbcs	r2, r0
    1d4e:	4313      	orrs	r3, r2
    1d50:	2200      	movs	r2, #0
    1d52:	e6e2      	b.n	1b1a <__aeabi_dadd+0xfa>
    1d54:	2c00      	cmp	r4, #0
    1d56:	d04f      	beq.n	1df8 <__aeabi_dadd+0x3d8>
    1d58:	4c18      	ldr	r4, [pc, #96]	; (1dbc <__aeabi_dadd+0x39c>)
    1d5a:	45a4      	cmp	ip, r4
    1d5c:	d100      	bne.n	1d60 <__aeabi_dadd+0x340>
    1d5e:	e0ab      	b.n	1eb8 <__aeabi_dadd+0x498>
    1d60:	2480      	movs	r4, #128	; 0x80
    1d62:	0424      	lsls	r4, r4, #16
    1d64:	4276      	negs	r6, r6
    1d66:	4321      	orrs	r1, r4
    1d68:	2e38      	cmp	r6, #56	; 0x38
    1d6a:	dd00      	ble.n	1d6e <__aeabi_dadd+0x34e>
    1d6c:	e0df      	b.n	1f2e <__aeabi_dadd+0x50e>
    1d6e:	2e1f      	cmp	r6, #31
    1d70:	dd00      	ble.n	1d74 <__aeabi_dadd+0x354>
    1d72:	e143      	b.n	1ffc <__aeabi_dadd+0x5dc>
    1d74:	2720      	movs	r7, #32
    1d76:	1bbc      	subs	r4, r7, r6
    1d78:	46a1      	mov	r9, r4
    1d7a:	000c      	movs	r4, r1
    1d7c:	464f      	mov	r7, r9
    1d7e:	40bc      	lsls	r4, r7
    1d80:	46a0      	mov	r8, r4
    1d82:	002c      	movs	r4, r5
    1d84:	4647      	mov	r7, r8
    1d86:	40f4      	lsrs	r4, r6
    1d88:	433c      	orrs	r4, r7
    1d8a:	464f      	mov	r7, r9
    1d8c:	40bd      	lsls	r5, r7
    1d8e:	1e6f      	subs	r7, r5, #1
    1d90:	41bd      	sbcs	r5, r7
    1d92:	40f1      	lsrs	r1, r6
    1d94:	432c      	orrs	r4, r5
    1d96:	1b15      	subs	r5, r2, r4
    1d98:	42aa      	cmp	r2, r5
    1d9a:	4192      	sbcs	r2, r2
    1d9c:	1a41      	subs	r1, r0, r1
    1d9e:	4252      	negs	r2, r2
    1da0:	1a89      	subs	r1, r1, r2
    1da2:	4664      	mov	r4, ip
    1da4:	469a      	mov	sl, r3
    1da6:	e6bf      	b.n	1b28 <__aeabi_dadd+0x108>
    1da8:	4641      	mov	r1, r8
    1daa:	4645      	mov	r5, r8
    1dac:	4331      	orrs	r1, r6
    1dae:	d000      	beq.n	1db2 <__aeabi_dadd+0x392>
    1db0:	e6be      	b.n	1b30 <__aeabi_dadd+0x110>
    1db2:	2600      	movs	r6, #0
    1db4:	2400      	movs	r4, #0
    1db6:	2500      	movs	r5, #0
    1db8:	e6f2      	b.n	1ba0 <__aeabi_dadd+0x180>
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	000007ff 	.word	0x000007ff
    1dc0:	ff7fffff 	.word	0xff7fffff
    1dc4:	800fffff 	.word	0x800fffff
    1dc8:	2b1f      	cmp	r3, #31
    1dca:	dc59      	bgt.n	1e80 <__aeabi_dadd+0x460>
    1dcc:	2720      	movs	r7, #32
    1dce:	1aff      	subs	r7, r7, r3
    1dd0:	46bc      	mov	ip, r7
    1dd2:	0007      	movs	r7, r0
    1dd4:	4663      	mov	r3, ip
    1dd6:	409f      	lsls	r7, r3
    1dd8:	465b      	mov	r3, fp
    1dda:	46b9      	mov	r9, r7
    1ddc:	0017      	movs	r7, r2
    1dde:	40df      	lsrs	r7, r3
    1de0:	46b8      	mov	r8, r7
    1de2:	464f      	mov	r7, r9
    1de4:	4643      	mov	r3, r8
    1de6:	431f      	orrs	r7, r3
    1de8:	4663      	mov	r3, ip
    1dea:	409a      	lsls	r2, r3
    1dec:	1e53      	subs	r3, r2, #1
    1dee:	419a      	sbcs	r2, r3
    1df0:	465b      	mov	r3, fp
    1df2:	433a      	orrs	r2, r7
    1df4:	40d8      	lsrs	r0, r3
    1df6:	e6f4      	b.n	1be2 <__aeabi_dadd+0x1c2>
    1df8:	000c      	movs	r4, r1
    1dfa:	432c      	orrs	r4, r5
    1dfc:	d05c      	beq.n	1eb8 <__aeabi_dadd+0x498>
    1dfe:	43f6      	mvns	r6, r6
    1e00:	2e00      	cmp	r6, #0
    1e02:	d155      	bne.n	1eb0 <__aeabi_dadd+0x490>
    1e04:	1b55      	subs	r5, r2, r5
    1e06:	42aa      	cmp	r2, r5
    1e08:	41a4      	sbcs	r4, r4
    1e0a:	1a41      	subs	r1, r0, r1
    1e0c:	4264      	negs	r4, r4
    1e0e:	1b09      	subs	r1, r1, r4
    1e10:	469a      	mov	sl, r3
    1e12:	4664      	mov	r4, ip
    1e14:	e688      	b.n	1b28 <__aeabi_dadd+0x108>
    1e16:	4f96      	ldr	r7, [pc, #600]	; (2070 <STACK_SIZE+0x70>)
    1e18:	42bc      	cmp	r4, r7
    1e1a:	d000      	beq.n	1e1e <__aeabi_dadd+0x3fe>
    1e1c:	e6d8      	b.n	1bd0 <__aeabi_dadd+0x1b0>
    1e1e:	e628      	b.n	1a72 <__aeabi_dadd+0x52>
    1e20:	2200      	movs	r2, #0
    1e22:	e780      	b.n	1d26 <__aeabi_dadd+0x306>
    1e24:	2000      	movs	r0, #0
    1e26:	e78f      	b.n	1d48 <__aeabi_dadd+0x328>
    1e28:	000b      	movs	r3, r1
    1e2a:	432b      	orrs	r3, r5
    1e2c:	2c00      	cmp	r4, #0
    1e2e:	d000      	beq.n	1e32 <__aeabi_dadd+0x412>
    1e30:	e0c2      	b.n	1fb8 <__aeabi_dadd+0x598>
    1e32:	2b00      	cmp	r3, #0
    1e34:	d100      	bne.n	1e38 <__aeabi_dadd+0x418>
    1e36:	e101      	b.n	203c <STACK_SIZE+0x3c>
    1e38:	0003      	movs	r3, r0
    1e3a:	4313      	orrs	r3, r2
    1e3c:	d100      	bne.n	1e40 <__aeabi_dadd+0x420>
    1e3e:	e618      	b.n	1a72 <__aeabi_dadd+0x52>
    1e40:	18ab      	adds	r3, r5, r2
    1e42:	42ab      	cmp	r3, r5
    1e44:	41b6      	sbcs	r6, r6
    1e46:	1809      	adds	r1, r1, r0
    1e48:	4276      	negs	r6, r6
    1e4a:	1871      	adds	r1, r6, r1
    1e4c:	020a      	lsls	r2, r1, #8
    1e4e:	d400      	bmi.n	1e52 <__aeabi_dadd+0x432>
    1e50:	e109      	b.n	2066 <STACK_SIZE+0x66>
    1e52:	4a88      	ldr	r2, [pc, #544]	; (2074 <STACK_SIZE+0x74>)
    1e54:	001d      	movs	r5, r3
    1e56:	4011      	ands	r1, r2
    1e58:	4664      	mov	r4, ip
    1e5a:	e60a      	b.n	1a72 <__aeabi_dadd+0x52>
    1e5c:	2c00      	cmp	r4, #0
    1e5e:	d15b      	bne.n	1f18 <__aeabi_dadd+0x4f8>
    1e60:	000e      	movs	r6, r1
    1e62:	432e      	orrs	r6, r5
    1e64:	d000      	beq.n	1e68 <__aeabi_dadd+0x448>
    1e66:	e08a      	b.n	1f7e <__aeabi_dadd+0x55e>
    1e68:	0001      	movs	r1, r0
    1e6a:	4311      	orrs	r1, r2
    1e6c:	d100      	bne.n	1e70 <__aeabi_dadd+0x450>
    1e6e:	e0c2      	b.n	1ff6 <__aeabi_dadd+0x5d6>
    1e70:	0001      	movs	r1, r0
    1e72:	0015      	movs	r5, r2
    1e74:	469a      	mov	sl, r3
    1e76:	e5fc      	b.n	1a72 <__aeabi_dadd+0x52>
    1e78:	4664      	mov	r4, ip
    1e7a:	2100      	movs	r1, #0
    1e7c:	2500      	movs	r5, #0
    1e7e:	e68f      	b.n	1ba0 <__aeabi_dadd+0x180>
    1e80:	2320      	movs	r3, #32
    1e82:	425b      	negs	r3, r3
    1e84:	469c      	mov	ip, r3
    1e86:	44dc      	add	ip, fp
    1e88:	4663      	mov	r3, ip
    1e8a:	0007      	movs	r7, r0
    1e8c:	40df      	lsrs	r7, r3
    1e8e:	465b      	mov	r3, fp
    1e90:	46bc      	mov	ip, r7
    1e92:	2b20      	cmp	r3, #32
    1e94:	d100      	bne.n	1e98 <__aeabi_dadd+0x478>
    1e96:	e0ac      	b.n	1ff2 <__aeabi_dadd+0x5d2>
    1e98:	2340      	movs	r3, #64	; 0x40
    1e9a:	465f      	mov	r7, fp
    1e9c:	1bdb      	subs	r3, r3, r7
    1e9e:	4098      	lsls	r0, r3
    1ea0:	4302      	orrs	r2, r0
    1ea2:	1e50      	subs	r0, r2, #1
    1ea4:	4182      	sbcs	r2, r0
    1ea6:	4663      	mov	r3, ip
    1ea8:	4313      	orrs	r3, r2
    1eaa:	001a      	movs	r2, r3
    1eac:	2000      	movs	r0, #0
    1eae:	e698      	b.n	1be2 <__aeabi_dadd+0x1c2>
    1eb0:	4c6f      	ldr	r4, [pc, #444]	; (2070 <STACK_SIZE+0x70>)
    1eb2:	45a4      	cmp	ip, r4
    1eb4:	d000      	beq.n	1eb8 <__aeabi_dadd+0x498>
    1eb6:	e757      	b.n	1d68 <__aeabi_dadd+0x348>
    1eb8:	0001      	movs	r1, r0
    1eba:	0015      	movs	r5, r2
    1ebc:	4664      	mov	r4, ip
    1ebe:	469a      	mov	sl, r3
    1ec0:	e5d7      	b.n	1a72 <__aeabi_dadd+0x52>
    1ec2:	2c00      	cmp	r4, #0
    1ec4:	d139      	bne.n	1f3a <__aeabi_dadd+0x51a>
    1ec6:	000c      	movs	r4, r1
    1ec8:	432c      	orrs	r4, r5
    1eca:	d06e      	beq.n	1faa <__aeabi_dadd+0x58a>
    1ecc:	43db      	mvns	r3, r3
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d01a      	beq.n	1f08 <__aeabi_dadd+0x4e8>
    1ed2:	4c67      	ldr	r4, [pc, #412]	; (2070 <STACK_SIZE+0x70>)
    1ed4:	45a4      	cmp	ip, r4
    1ed6:	d068      	beq.n	1faa <__aeabi_dadd+0x58a>
    1ed8:	2b38      	cmp	r3, #56	; 0x38
    1eda:	dd00      	ble.n	1ede <__aeabi_dadd+0x4be>
    1edc:	e0a4      	b.n	2028 <STACK_SIZE+0x28>
    1ede:	2b1f      	cmp	r3, #31
    1ee0:	dd00      	ble.n	1ee4 <__aeabi_dadd+0x4c4>
    1ee2:	e0ae      	b.n	2042 <STACK_SIZE+0x42>
    1ee4:	2420      	movs	r4, #32
    1ee6:	000f      	movs	r7, r1
    1ee8:	1ae4      	subs	r4, r4, r3
    1eea:	40a7      	lsls	r7, r4
    1eec:	46b9      	mov	r9, r7
    1eee:	002f      	movs	r7, r5
    1ef0:	40df      	lsrs	r7, r3
    1ef2:	46b8      	mov	r8, r7
    1ef4:	46a3      	mov	fp, r4
    1ef6:	464f      	mov	r7, r9
    1ef8:	4644      	mov	r4, r8
    1efa:	4327      	orrs	r7, r4
    1efc:	465c      	mov	r4, fp
    1efe:	40a5      	lsls	r5, r4
    1f00:	1e6c      	subs	r4, r5, #1
    1f02:	41a5      	sbcs	r5, r4
    1f04:	40d9      	lsrs	r1, r3
    1f06:	433d      	orrs	r5, r7
    1f08:	18ad      	adds	r5, r5, r2
    1f0a:	4295      	cmp	r5, r2
    1f0c:	419b      	sbcs	r3, r3
    1f0e:	1809      	adds	r1, r1, r0
    1f10:	425b      	negs	r3, r3
    1f12:	1859      	adds	r1, r3, r1
    1f14:	4664      	mov	r4, ip
    1f16:	e66b      	b.n	1bf0 <__aeabi_dadd+0x1d0>
    1f18:	000c      	movs	r4, r1
    1f1a:	432c      	orrs	r4, r5
    1f1c:	d115      	bne.n	1f4a <__aeabi_dadd+0x52a>
    1f1e:	0001      	movs	r1, r0
    1f20:	4311      	orrs	r1, r2
    1f22:	d07b      	beq.n	201c <STACK_SIZE+0x1c>
    1f24:	0001      	movs	r1, r0
    1f26:	0015      	movs	r5, r2
    1f28:	469a      	mov	sl, r3
    1f2a:	4c51      	ldr	r4, [pc, #324]	; (2070 <STACK_SIZE+0x70>)
    1f2c:	e5a1      	b.n	1a72 <__aeabi_dadd+0x52>
    1f2e:	430d      	orrs	r5, r1
    1f30:	1e69      	subs	r1, r5, #1
    1f32:	418d      	sbcs	r5, r1
    1f34:	2100      	movs	r1, #0
    1f36:	b2ec      	uxtb	r4, r5
    1f38:	e72d      	b.n	1d96 <__aeabi_dadd+0x376>
    1f3a:	4c4d      	ldr	r4, [pc, #308]	; (2070 <STACK_SIZE+0x70>)
    1f3c:	45a4      	cmp	ip, r4
    1f3e:	d034      	beq.n	1faa <__aeabi_dadd+0x58a>
    1f40:	2480      	movs	r4, #128	; 0x80
    1f42:	0424      	lsls	r4, r4, #16
    1f44:	425b      	negs	r3, r3
    1f46:	4321      	orrs	r1, r4
    1f48:	e7c6      	b.n	1ed8 <__aeabi_dadd+0x4b8>
    1f4a:	0004      	movs	r4, r0
    1f4c:	4314      	orrs	r4, r2
    1f4e:	d04e      	beq.n	1fee <__aeabi_dadd+0x5ce>
    1f50:	08ed      	lsrs	r5, r5, #3
    1f52:	074c      	lsls	r4, r1, #29
    1f54:	432c      	orrs	r4, r5
    1f56:	2580      	movs	r5, #128	; 0x80
    1f58:	08c9      	lsrs	r1, r1, #3
    1f5a:	032d      	lsls	r5, r5, #12
    1f5c:	4229      	tst	r1, r5
    1f5e:	d008      	beq.n	1f72 <__aeabi_dadd+0x552>
    1f60:	08c6      	lsrs	r6, r0, #3
    1f62:	422e      	tst	r6, r5
    1f64:	d105      	bne.n	1f72 <__aeabi_dadd+0x552>
    1f66:	08d2      	lsrs	r2, r2, #3
    1f68:	0741      	lsls	r1, r0, #29
    1f6a:	4311      	orrs	r1, r2
    1f6c:	000c      	movs	r4, r1
    1f6e:	469a      	mov	sl, r3
    1f70:	0031      	movs	r1, r6
    1f72:	0f62      	lsrs	r2, r4, #29
    1f74:	00c9      	lsls	r1, r1, #3
    1f76:	00e5      	lsls	r5, r4, #3
    1f78:	4311      	orrs	r1, r2
    1f7a:	4c3d      	ldr	r4, [pc, #244]	; (2070 <STACK_SIZE+0x70>)
    1f7c:	e579      	b.n	1a72 <__aeabi_dadd+0x52>
    1f7e:	0006      	movs	r6, r0
    1f80:	4316      	orrs	r6, r2
    1f82:	d100      	bne.n	1f86 <__aeabi_dadd+0x566>
    1f84:	e575      	b.n	1a72 <__aeabi_dadd+0x52>
    1f86:	1aae      	subs	r6, r5, r2
    1f88:	46b0      	mov	r8, r6
    1f8a:	4545      	cmp	r5, r8
    1f8c:	41bf      	sbcs	r7, r7
    1f8e:	1a0e      	subs	r6, r1, r0
    1f90:	427f      	negs	r7, r7
    1f92:	1bf6      	subs	r6, r6, r7
    1f94:	0237      	lsls	r7, r6, #8
    1f96:	d400      	bmi.n	1f9a <__aeabi_dadd+0x57a>
    1f98:	e5f4      	b.n	1b84 <__aeabi_dadd+0x164>
    1f9a:	1b55      	subs	r5, r2, r5
    1f9c:	42aa      	cmp	r2, r5
    1f9e:	41b6      	sbcs	r6, r6
    1fa0:	1a41      	subs	r1, r0, r1
    1fa2:	4276      	negs	r6, r6
    1fa4:	1b89      	subs	r1, r1, r6
    1fa6:	469a      	mov	sl, r3
    1fa8:	e563      	b.n	1a72 <__aeabi_dadd+0x52>
    1faa:	0001      	movs	r1, r0
    1fac:	0015      	movs	r5, r2
    1fae:	4664      	mov	r4, ip
    1fb0:	e55f      	b.n	1a72 <__aeabi_dadd+0x52>
    1fb2:	2200      	movs	r2, #0
    1fb4:	2500      	movs	r5, #0
    1fb6:	e57b      	b.n	1ab0 <__aeabi_dadd+0x90>
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d03b      	beq.n	2034 <STACK_SIZE+0x34>
    1fbc:	0003      	movs	r3, r0
    1fbe:	4313      	orrs	r3, r2
    1fc0:	d015      	beq.n	1fee <__aeabi_dadd+0x5ce>
    1fc2:	08ed      	lsrs	r5, r5, #3
    1fc4:	074b      	lsls	r3, r1, #29
    1fc6:	432b      	orrs	r3, r5
    1fc8:	2580      	movs	r5, #128	; 0x80
    1fca:	08c9      	lsrs	r1, r1, #3
    1fcc:	032d      	lsls	r5, r5, #12
    1fce:	4229      	tst	r1, r5
    1fd0:	d007      	beq.n	1fe2 <__aeabi_dadd+0x5c2>
    1fd2:	08c4      	lsrs	r4, r0, #3
    1fd4:	422c      	tst	r4, r5
    1fd6:	d104      	bne.n	1fe2 <__aeabi_dadd+0x5c2>
    1fd8:	0741      	lsls	r1, r0, #29
    1fda:	000b      	movs	r3, r1
    1fdc:	0021      	movs	r1, r4
    1fde:	08d2      	lsrs	r2, r2, #3
    1fe0:	4313      	orrs	r3, r2
    1fe2:	00c9      	lsls	r1, r1, #3
    1fe4:	0f5a      	lsrs	r2, r3, #29
    1fe6:	4311      	orrs	r1, r2
    1fe8:	00dd      	lsls	r5, r3, #3
    1fea:	4c21      	ldr	r4, [pc, #132]	; (2070 <STACK_SIZE+0x70>)
    1fec:	e541      	b.n	1a72 <__aeabi_dadd+0x52>
    1fee:	4c20      	ldr	r4, [pc, #128]	; (2070 <STACK_SIZE+0x70>)
    1ff0:	e53f      	b.n	1a72 <__aeabi_dadd+0x52>
    1ff2:	2000      	movs	r0, #0
    1ff4:	e754      	b.n	1ea0 <__aeabi_dadd+0x480>
    1ff6:	2600      	movs	r6, #0
    1ff8:	2500      	movs	r5, #0
    1ffa:	e5d1      	b.n	1ba0 <__aeabi_dadd+0x180>
    1ffc:	0034      	movs	r4, r6
    1ffe:	000f      	movs	r7, r1
    2000:	3c20      	subs	r4, #32
    2002:	40e7      	lsrs	r7, r4
    2004:	003c      	movs	r4, r7
    2006:	2e20      	cmp	r6, #32
    2008:	d02b      	beq.n	2062 <STACK_SIZE+0x62>
    200a:	2740      	movs	r7, #64	; 0x40
    200c:	1bbe      	subs	r6, r7, r6
    200e:	40b1      	lsls	r1, r6
    2010:	430d      	orrs	r5, r1
    2012:	1e69      	subs	r1, r5, #1
    2014:	418d      	sbcs	r5, r1
    2016:	2100      	movs	r1, #0
    2018:	432c      	orrs	r4, r5
    201a:	e6bc      	b.n	1d96 <__aeabi_dadd+0x376>
    201c:	2180      	movs	r1, #128	; 0x80
    201e:	2600      	movs	r6, #0
    2020:	0309      	lsls	r1, r1, #12
    2022:	4c13      	ldr	r4, [pc, #76]	; (2070 <STACK_SIZE+0x70>)
    2024:	2500      	movs	r5, #0
    2026:	e5bb      	b.n	1ba0 <__aeabi_dadd+0x180>
    2028:	430d      	orrs	r5, r1
    202a:	1e69      	subs	r1, r5, #1
    202c:	418d      	sbcs	r5, r1
    202e:	2100      	movs	r1, #0
    2030:	b2ed      	uxtb	r5, r5
    2032:	e769      	b.n	1f08 <__aeabi_dadd+0x4e8>
    2034:	0001      	movs	r1, r0
    2036:	0015      	movs	r5, r2
    2038:	4c0d      	ldr	r4, [pc, #52]	; (2070 <STACK_SIZE+0x70>)
    203a:	e51a      	b.n	1a72 <__aeabi_dadd+0x52>
    203c:	0001      	movs	r1, r0
    203e:	0015      	movs	r5, r2
    2040:	e517      	b.n	1a72 <__aeabi_dadd+0x52>
    2042:	001c      	movs	r4, r3
    2044:	000f      	movs	r7, r1
    2046:	3c20      	subs	r4, #32
    2048:	40e7      	lsrs	r7, r4
    204a:	003c      	movs	r4, r7
    204c:	2b20      	cmp	r3, #32
    204e:	d00c      	beq.n	206a <STACK_SIZE+0x6a>
    2050:	2740      	movs	r7, #64	; 0x40
    2052:	1afb      	subs	r3, r7, r3
    2054:	4099      	lsls	r1, r3
    2056:	430d      	orrs	r5, r1
    2058:	1e69      	subs	r1, r5, #1
    205a:	418d      	sbcs	r5, r1
    205c:	2100      	movs	r1, #0
    205e:	4325      	orrs	r5, r4
    2060:	e752      	b.n	1f08 <__aeabi_dadd+0x4e8>
    2062:	2100      	movs	r1, #0
    2064:	e7d4      	b.n	2010 <STACK_SIZE+0x10>
    2066:	001d      	movs	r5, r3
    2068:	e592      	b.n	1b90 <__aeabi_dadd+0x170>
    206a:	2100      	movs	r1, #0
    206c:	e7f3      	b.n	2056 <STACK_SIZE+0x56>
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	000007ff 	.word	0x000007ff
    2074:	ff7fffff 	.word	0xff7fffff

00002078 <__eqdf2>:
    2078:	b5f0      	push	{r4, r5, r6, r7, lr}
    207a:	465f      	mov	r7, fp
    207c:	4656      	mov	r6, sl
    207e:	464d      	mov	r5, r9
    2080:	4644      	mov	r4, r8
    2082:	b4f0      	push	{r4, r5, r6, r7}
    2084:	031f      	lsls	r7, r3, #12
    2086:	005c      	lsls	r4, r3, #1
    2088:	0fdb      	lsrs	r3, r3, #31
    208a:	469a      	mov	sl, r3
    208c:	4b19      	ldr	r3, [pc, #100]	; (20f4 <__eqdf2+0x7c>)
    208e:	030e      	lsls	r6, r1, #12
    2090:	004d      	lsls	r5, r1, #1
    2092:	0fc9      	lsrs	r1, r1, #31
    2094:	4680      	mov	r8, r0
    2096:	0b36      	lsrs	r6, r6, #12
    2098:	0d6d      	lsrs	r5, r5, #21
    209a:	468b      	mov	fp, r1
    209c:	4691      	mov	r9, r2
    209e:	0b3f      	lsrs	r7, r7, #12
    20a0:	0d64      	lsrs	r4, r4, #21
    20a2:	429d      	cmp	r5, r3
    20a4:	d019      	beq.n	20da <__eqdf2+0x62>
    20a6:	4b13      	ldr	r3, [pc, #76]	; (20f4 <__eqdf2+0x7c>)
    20a8:	429c      	cmp	r4, r3
    20aa:	d01b      	beq.n	20e4 <__eqdf2+0x6c>
    20ac:	2301      	movs	r3, #1
    20ae:	42a5      	cmp	r5, r4
    20b0:	d006      	beq.n	20c0 <__eqdf2+0x48>
    20b2:	0018      	movs	r0, r3
    20b4:	bc3c      	pop	{r2, r3, r4, r5}
    20b6:	4690      	mov	r8, r2
    20b8:	4699      	mov	r9, r3
    20ba:	46a2      	mov	sl, r4
    20bc:	46ab      	mov	fp, r5
    20be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c0:	42be      	cmp	r6, r7
    20c2:	d1f6      	bne.n	20b2 <__eqdf2+0x3a>
    20c4:	45c8      	cmp	r8, r9
    20c6:	d1f4      	bne.n	20b2 <__eqdf2+0x3a>
    20c8:	45d3      	cmp	fp, sl
    20ca:	d010      	beq.n	20ee <__eqdf2+0x76>
    20cc:	2d00      	cmp	r5, #0
    20ce:	d1f0      	bne.n	20b2 <__eqdf2+0x3a>
    20d0:	4330      	orrs	r0, r6
    20d2:	0003      	movs	r3, r0
    20d4:	1e5a      	subs	r2, r3, #1
    20d6:	4193      	sbcs	r3, r2
    20d8:	e7eb      	b.n	20b2 <__eqdf2+0x3a>
    20da:	0031      	movs	r1, r6
    20dc:	2301      	movs	r3, #1
    20de:	4301      	orrs	r1, r0
    20e0:	d1e7      	bne.n	20b2 <__eqdf2+0x3a>
    20e2:	e7e0      	b.n	20a6 <__eqdf2+0x2e>
    20e4:	433a      	orrs	r2, r7
    20e6:	2301      	movs	r3, #1
    20e8:	2a00      	cmp	r2, #0
    20ea:	d1e2      	bne.n	20b2 <__eqdf2+0x3a>
    20ec:	e7de      	b.n	20ac <__eqdf2+0x34>
    20ee:	2300      	movs	r3, #0
    20f0:	e7df      	b.n	20b2 <__eqdf2+0x3a>
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	000007ff 	.word	0x000007ff

000020f8 <__gedf2>:
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	465f      	mov	r7, fp
    20fc:	4644      	mov	r4, r8
    20fe:	4656      	mov	r6, sl
    2100:	464d      	mov	r5, r9
    2102:	b4f0      	push	{r4, r5, r6, r7}
    2104:	031f      	lsls	r7, r3, #12
    2106:	0b3c      	lsrs	r4, r7, #12
    2108:	4f2c      	ldr	r7, [pc, #176]	; (21bc <__gedf2+0xc4>)
    210a:	030e      	lsls	r6, r1, #12
    210c:	004d      	lsls	r5, r1, #1
    210e:	46a3      	mov	fp, r4
    2110:	005c      	lsls	r4, r3, #1
    2112:	4684      	mov	ip, r0
    2114:	0b36      	lsrs	r6, r6, #12
    2116:	0d6d      	lsrs	r5, r5, #21
    2118:	0fc9      	lsrs	r1, r1, #31
    211a:	4690      	mov	r8, r2
    211c:	0d64      	lsrs	r4, r4, #21
    211e:	0fdb      	lsrs	r3, r3, #31
    2120:	42bd      	cmp	r5, r7
    2122:	d02b      	beq.n	217c <__gedf2+0x84>
    2124:	4f25      	ldr	r7, [pc, #148]	; (21bc <__gedf2+0xc4>)
    2126:	42bc      	cmp	r4, r7
    2128:	d02e      	beq.n	2188 <__gedf2+0x90>
    212a:	2d00      	cmp	r5, #0
    212c:	d10e      	bne.n	214c <__gedf2+0x54>
    212e:	4330      	orrs	r0, r6
    2130:	0007      	movs	r7, r0
    2132:	4681      	mov	r9, r0
    2134:	4278      	negs	r0, r7
    2136:	4178      	adcs	r0, r7
    2138:	2c00      	cmp	r4, #0
    213a:	d117      	bne.n	216c <__gedf2+0x74>
    213c:	465f      	mov	r7, fp
    213e:	433a      	orrs	r2, r7
    2140:	d114      	bne.n	216c <__gedf2+0x74>
    2142:	464b      	mov	r3, r9
    2144:	2000      	movs	r0, #0
    2146:	2b00      	cmp	r3, #0
    2148:	d00a      	beq.n	2160 <__gedf2+0x68>
    214a:	e006      	b.n	215a <__gedf2+0x62>
    214c:	2c00      	cmp	r4, #0
    214e:	d102      	bne.n	2156 <__gedf2+0x5e>
    2150:	4658      	mov	r0, fp
    2152:	4302      	orrs	r2, r0
    2154:	d001      	beq.n	215a <__gedf2+0x62>
    2156:	4299      	cmp	r1, r3
    2158:	d01a      	beq.n	2190 <__gedf2+0x98>
    215a:	2301      	movs	r3, #1
    215c:	4248      	negs	r0, r1
    215e:	4318      	orrs	r0, r3
    2160:	bc3c      	pop	{r2, r3, r4, r5}
    2162:	4690      	mov	r8, r2
    2164:	4699      	mov	r9, r3
    2166:	46a2      	mov	sl, r4
    2168:	46ab      	mov	fp, r5
    216a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    216c:	2800      	cmp	r0, #0
    216e:	d0f2      	beq.n	2156 <__gedf2+0x5e>
    2170:	4258      	negs	r0, r3
    2172:	4158      	adcs	r0, r3
    2174:	2201      	movs	r2, #1
    2176:	4240      	negs	r0, r0
    2178:	4310      	orrs	r0, r2
    217a:	e7f1      	b.n	2160 <__gedf2+0x68>
    217c:	0037      	movs	r7, r6
    217e:	4307      	orrs	r7, r0
    2180:	d0d0      	beq.n	2124 <__gedf2+0x2c>
    2182:	2002      	movs	r0, #2
    2184:	4240      	negs	r0, r0
    2186:	e7eb      	b.n	2160 <__gedf2+0x68>
    2188:	465f      	mov	r7, fp
    218a:	4317      	orrs	r7, r2
    218c:	d0cd      	beq.n	212a <__gedf2+0x32>
    218e:	e7f8      	b.n	2182 <__gedf2+0x8a>
    2190:	42a5      	cmp	r5, r4
    2192:	dce2      	bgt.n	215a <__gedf2+0x62>
    2194:	db05      	blt.n	21a2 <__gedf2+0xaa>
    2196:	455e      	cmp	r6, fp
    2198:	d8df      	bhi.n	215a <__gedf2+0x62>
    219a:	d008      	beq.n	21ae <__gedf2+0xb6>
    219c:	2000      	movs	r0, #0
    219e:	455e      	cmp	r6, fp
    21a0:	d2de      	bcs.n	2160 <__gedf2+0x68>
    21a2:	4248      	negs	r0, r1
    21a4:	4148      	adcs	r0, r1
    21a6:	2301      	movs	r3, #1
    21a8:	4240      	negs	r0, r0
    21aa:	4318      	orrs	r0, r3
    21ac:	e7d8      	b.n	2160 <__gedf2+0x68>
    21ae:	45c4      	cmp	ip, r8
    21b0:	d8d3      	bhi.n	215a <__gedf2+0x62>
    21b2:	2000      	movs	r0, #0
    21b4:	45c4      	cmp	ip, r8
    21b6:	d3f4      	bcc.n	21a2 <__gedf2+0xaa>
    21b8:	e7d2      	b.n	2160 <__gedf2+0x68>
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	000007ff 	.word	0x000007ff

000021c0 <__ledf2>:
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	465f      	mov	r7, fp
    21c4:	464d      	mov	r5, r9
    21c6:	4644      	mov	r4, r8
    21c8:	4656      	mov	r6, sl
    21ca:	b4f0      	push	{r4, r5, r6, r7}
    21cc:	031c      	lsls	r4, r3, #12
    21ce:	0b24      	lsrs	r4, r4, #12
    21d0:	46a4      	mov	ip, r4
    21d2:	4c2f      	ldr	r4, [pc, #188]	; (2290 <__ledf2+0xd0>)
    21d4:	030f      	lsls	r7, r1, #12
    21d6:	004d      	lsls	r5, r1, #1
    21d8:	005e      	lsls	r6, r3, #1
    21da:	0fc9      	lsrs	r1, r1, #31
    21dc:	4680      	mov	r8, r0
    21de:	0b3f      	lsrs	r7, r7, #12
    21e0:	0d6d      	lsrs	r5, r5, #21
    21e2:	468b      	mov	fp, r1
    21e4:	4691      	mov	r9, r2
    21e6:	0d76      	lsrs	r6, r6, #21
    21e8:	0fdb      	lsrs	r3, r3, #31
    21ea:	42a5      	cmp	r5, r4
    21ec:	d020      	beq.n	2230 <__ledf2+0x70>
    21ee:	4c28      	ldr	r4, [pc, #160]	; (2290 <__ledf2+0xd0>)
    21f0:	42a6      	cmp	r6, r4
    21f2:	d022      	beq.n	223a <__ledf2+0x7a>
    21f4:	2d00      	cmp	r5, #0
    21f6:	d112      	bne.n	221e <__ledf2+0x5e>
    21f8:	4338      	orrs	r0, r7
    21fa:	4244      	negs	r4, r0
    21fc:	4144      	adcs	r4, r0
    21fe:	2e00      	cmp	r6, #0
    2200:	d020      	beq.n	2244 <__ledf2+0x84>
    2202:	2c00      	cmp	r4, #0
    2204:	d00d      	beq.n	2222 <__ledf2+0x62>
    2206:	425c      	negs	r4, r3
    2208:	4163      	adcs	r3, r4
    220a:	2401      	movs	r4, #1
    220c:	425b      	negs	r3, r3
    220e:	431c      	orrs	r4, r3
    2210:	0020      	movs	r0, r4
    2212:	bc3c      	pop	{r2, r3, r4, r5}
    2214:	4690      	mov	r8, r2
    2216:	4699      	mov	r9, r3
    2218:	46a2      	mov	sl, r4
    221a:	46ab      	mov	fp, r5
    221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    221e:	2e00      	cmp	r6, #0
    2220:	d017      	beq.n	2252 <__ledf2+0x92>
    2222:	455b      	cmp	r3, fp
    2224:	d019      	beq.n	225a <__ledf2+0x9a>
    2226:	465b      	mov	r3, fp
    2228:	425c      	negs	r4, r3
    222a:	2301      	movs	r3, #1
    222c:	431c      	orrs	r4, r3
    222e:	e7ef      	b.n	2210 <__ledf2+0x50>
    2230:	0039      	movs	r1, r7
    2232:	2402      	movs	r4, #2
    2234:	4301      	orrs	r1, r0
    2236:	d1eb      	bne.n	2210 <__ledf2+0x50>
    2238:	e7d9      	b.n	21ee <__ledf2+0x2e>
    223a:	4661      	mov	r1, ip
    223c:	2402      	movs	r4, #2
    223e:	4311      	orrs	r1, r2
    2240:	d1e6      	bne.n	2210 <__ledf2+0x50>
    2242:	e7d7      	b.n	21f4 <__ledf2+0x34>
    2244:	4661      	mov	r1, ip
    2246:	430a      	orrs	r2, r1
    2248:	d1db      	bne.n	2202 <__ledf2+0x42>
    224a:	2400      	movs	r4, #0
    224c:	2800      	cmp	r0, #0
    224e:	d0df      	beq.n	2210 <__ledf2+0x50>
    2250:	e7e9      	b.n	2226 <__ledf2+0x66>
    2252:	4661      	mov	r1, ip
    2254:	430a      	orrs	r2, r1
    2256:	d1e4      	bne.n	2222 <__ledf2+0x62>
    2258:	e7e5      	b.n	2226 <__ledf2+0x66>
    225a:	42b5      	cmp	r5, r6
    225c:	dd03      	ble.n	2266 <__ledf2+0xa6>
    225e:	2201      	movs	r2, #1
    2260:	425c      	negs	r4, r3
    2262:	4314      	orrs	r4, r2
    2264:	e7d4      	b.n	2210 <__ledf2+0x50>
    2266:	42b5      	cmp	r5, r6
    2268:	dbcd      	blt.n	2206 <__ledf2+0x46>
    226a:	4567      	cmp	r7, ip
    226c:	d8db      	bhi.n	2226 <__ledf2+0x66>
    226e:	d009      	beq.n	2284 <__ledf2+0xc4>
    2270:	2400      	movs	r4, #0
    2272:	4567      	cmp	r7, ip
    2274:	d2cc      	bcs.n	2210 <__ledf2+0x50>
    2276:	4659      	mov	r1, fp
    2278:	424c      	negs	r4, r1
    227a:	4161      	adcs	r1, r4
    227c:	2401      	movs	r4, #1
    227e:	4249      	negs	r1, r1
    2280:	430c      	orrs	r4, r1
    2282:	e7c5      	b.n	2210 <__ledf2+0x50>
    2284:	45c8      	cmp	r8, r9
    2286:	d8ce      	bhi.n	2226 <__ledf2+0x66>
    2288:	2400      	movs	r4, #0
    228a:	45c8      	cmp	r8, r9
    228c:	d3f3      	bcc.n	2276 <__ledf2+0xb6>
    228e:	e7bf      	b.n	2210 <__ledf2+0x50>
    2290:	000007ff 	.word	0x000007ff

00002294 <__aeabi_dmul>:
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
    2296:	465f      	mov	r7, fp
    2298:	4656      	mov	r6, sl
    229a:	464d      	mov	r5, r9
    229c:	4644      	mov	r4, r8
    229e:	b4f0      	push	{r4, r5, r6, r7}
    22a0:	030d      	lsls	r5, r1, #12
    22a2:	4699      	mov	r9, r3
    22a4:	004e      	lsls	r6, r1, #1
    22a6:	0b2b      	lsrs	r3, r5, #12
    22a8:	b087      	sub	sp, #28
    22aa:	0007      	movs	r7, r0
    22ac:	4692      	mov	sl, r2
    22ae:	4680      	mov	r8, r0
    22b0:	469b      	mov	fp, r3
    22b2:	0d76      	lsrs	r6, r6, #21
    22b4:	0fcc      	lsrs	r4, r1, #31
    22b6:	2e00      	cmp	r6, #0
    22b8:	d069      	beq.n	238e <__aeabi_dmul+0xfa>
    22ba:	4b6d      	ldr	r3, [pc, #436]	; (2470 <__aeabi_dmul+0x1dc>)
    22bc:	429e      	cmp	r6, r3
    22be:	d035      	beq.n	232c <__aeabi_dmul+0x98>
    22c0:	465b      	mov	r3, fp
    22c2:	2280      	movs	r2, #128	; 0x80
    22c4:	00dd      	lsls	r5, r3, #3
    22c6:	0412      	lsls	r2, r2, #16
    22c8:	0f43      	lsrs	r3, r0, #29
    22ca:	4313      	orrs	r3, r2
    22cc:	432b      	orrs	r3, r5
    22ce:	469b      	mov	fp, r3
    22d0:	00c3      	lsls	r3, r0, #3
    22d2:	4698      	mov	r8, r3
    22d4:	4b67      	ldr	r3, [pc, #412]	; (2474 <__aeabi_dmul+0x1e0>)
    22d6:	2700      	movs	r7, #0
    22d8:	469c      	mov	ip, r3
    22da:	2300      	movs	r3, #0
    22dc:	4466      	add	r6, ip
    22de:	9301      	str	r3, [sp, #4]
    22e0:	464a      	mov	r2, r9
    22e2:	0315      	lsls	r5, r2, #12
    22e4:	0050      	lsls	r0, r2, #1
    22e6:	0fd2      	lsrs	r2, r2, #31
    22e8:	4653      	mov	r3, sl
    22ea:	0b2d      	lsrs	r5, r5, #12
    22ec:	0d40      	lsrs	r0, r0, #21
    22ee:	4691      	mov	r9, r2
    22f0:	d100      	bne.n	22f4 <__aeabi_dmul+0x60>
    22f2:	e076      	b.n	23e2 <__aeabi_dmul+0x14e>
    22f4:	4a5e      	ldr	r2, [pc, #376]	; (2470 <__aeabi_dmul+0x1dc>)
    22f6:	4290      	cmp	r0, r2
    22f8:	d06c      	beq.n	23d4 <__aeabi_dmul+0x140>
    22fa:	2280      	movs	r2, #128	; 0x80
    22fc:	0f5b      	lsrs	r3, r3, #29
    22fe:	0412      	lsls	r2, r2, #16
    2300:	4313      	orrs	r3, r2
    2302:	4a5c      	ldr	r2, [pc, #368]	; (2474 <__aeabi_dmul+0x1e0>)
    2304:	00ed      	lsls	r5, r5, #3
    2306:	4694      	mov	ip, r2
    2308:	431d      	orrs	r5, r3
    230a:	4653      	mov	r3, sl
    230c:	2200      	movs	r2, #0
    230e:	00db      	lsls	r3, r3, #3
    2310:	4460      	add	r0, ip
    2312:	4649      	mov	r1, r9
    2314:	1836      	adds	r6, r6, r0
    2316:	1c70      	adds	r0, r6, #1
    2318:	4061      	eors	r1, r4
    231a:	9002      	str	r0, [sp, #8]
    231c:	4317      	orrs	r7, r2
    231e:	2f0f      	cmp	r7, #15
    2320:	d900      	bls.n	2324 <__aeabi_dmul+0x90>
    2322:	e0af      	b.n	2484 <__aeabi_dmul+0x1f0>
    2324:	4854      	ldr	r0, [pc, #336]	; (2478 <__aeabi_dmul+0x1e4>)
    2326:	00bf      	lsls	r7, r7, #2
    2328:	59c7      	ldr	r7, [r0, r7]
    232a:	46bf      	mov	pc, r7
    232c:	465b      	mov	r3, fp
    232e:	431f      	orrs	r7, r3
    2330:	d000      	beq.n	2334 <__aeabi_dmul+0xa0>
    2332:	e088      	b.n	2446 <__aeabi_dmul+0x1b2>
    2334:	2300      	movs	r3, #0
    2336:	469b      	mov	fp, r3
    2338:	4698      	mov	r8, r3
    233a:	3302      	adds	r3, #2
    233c:	2708      	movs	r7, #8
    233e:	9301      	str	r3, [sp, #4]
    2340:	e7ce      	b.n	22e0 <__aeabi_dmul+0x4c>
    2342:	4649      	mov	r1, r9
    2344:	2a02      	cmp	r2, #2
    2346:	d06a      	beq.n	241e <__aeabi_dmul+0x18a>
    2348:	2a03      	cmp	r2, #3
    234a:	d100      	bne.n	234e <__aeabi_dmul+0xba>
    234c:	e209      	b.n	2762 <__aeabi_dmul+0x4ce>
    234e:	2a01      	cmp	r2, #1
    2350:	d000      	beq.n	2354 <__aeabi_dmul+0xc0>
    2352:	e1bb      	b.n	26cc <__aeabi_dmul+0x438>
    2354:	4011      	ands	r1, r2
    2356:	2200      	movs	r2, #0
    2358:	2300      	movs	r3, #0
    235a:	2500      	movs	r5, #0
    235c:	4690      	mov	r8, r2
    235e:	b2cc      	uxtb	r4, r1
    2360:	2100      	movs	r1, #0
    2362:	032d      	lsls	r5, r5, #12
    2364:	0d0a      	lsrs	r2, r1, #20
    2366:	0512      	lsls	r2, r2, #20
    2368:	0b2d      	lsrs	r5, r5, #12
    236a:	4315      	orrs	r5, r2
    236c:	4a43      	ldr	r2, [pc, #268]	; (247c <__aeabi_dmul+0x1e8>)
    236e:	051b      	lsls	r3, r3, #20
    2370:	4015      	ands	r5, r2
    2372:	431d      	orrs	r5, r3
    2374:	006d      	lsls	r5, r5, #1
    2376:	07e4      	lsls	r4, r4, #31
    2378:	086d      	lsrs	r5, r5, #1
    237a:	4325      	orrs	r5, r4
    237c:	4640      	mov	r0, r8
    237e:	0029      	movs	r1, r5
    2380:	b007      	add	sp, #28
    2382:	bc3c      	pop	{r2, r3, r4, r5}
    2384:	4690      	mov	r8, r2
    2386:	4699      	mov	r9, r3
    2388:	46a2      	mov	sl, r4
    238a:	46ab      	mov	fp, r5
    238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    238e:	4303      	orrs	r3, r0
    2390:	d052      	beq.n	2438 <__aeabi_dmul+0x1a4>
    2392:	465b      	mov	r3, fp
    2394:	2b00      	cmp	r3, #0
    2396:	d100      	bne.n	239a <__aeabi_dmul+0x106>
    2398:	e18a      	b.n	26b0 <__aeabi_dmul+0x41c>
    239a:	4658      	mov	r0, fp
    239c:	f000 fed8 	bl	3150 <__clzsi2>
    23a0:	0003      	movs	r3, r0
    23a2:	3b0b      	subs	r3, #11
    23a4:	2b1c      	cmp	r3, #28
    23a6:	dd00      	ble.n	23aa <__aeabi_dmul+0x116>
    23a8:	e17b      	b.n	26a2 <__aeabi_dmul+0x40e>
    23aa:	221d      	movs	r2, #29
    23ac:	1ad3      	subs	r3, r2, r3
    23ae:	003a      	movs	r2, r7
    23b0:	0001      	movs	r1, r0
    23b2:	465d      	mov	r5, fp
    23b4:	40da      	lsrs	r2, r3
    23b6:	3908      	subs	r1, #8
    23b8:	408d      	lsls	r5, r1
    23ba:	0013      	movs	r3, r2
    23bc:	408f      	lsls	r7, r1
    23be:	432b      	orrs	r3, r5
    23c0:	469b      	mov	fp, r3
    23c2:	46b8      	mov	r8, r7
    23c4:	4b2e      	ldr	r3, [pc, #184]	; (2480 <__aeabi_dmul+0x1ec>)
    23c6:	2700      	movs	r7, #0
    23c8:	469c      	mov	ip, r3
    23ca:	2300      	movs	r3, #0
    23cc:	4460      	add	r0, ip
    23ce:	4246      	negs	r6, r0
    23d0:	9301      	str	r3, [sp, #4]
    23d2:	e785      	b.n	22e0 <__aeabi_dmul+0x4c>
    23d4:	4652      	mov	r2, sl
    23d6:	432a      	orrs	r2, r5
    23d8:	d12c      	bne.n	2434 <__aeabi_dmul+0x1a0>
    23da:	2500      	movs	r5, #0
    23dc:	2300      	movs	r3, #0
    23de:	2202      	movs	r2, #2
    23e0:	e797      	b.n	2312 <__aeabi_dmul+0x7e>
    23e2:	4652      	mov	r2, sl
    23e4:	432a      	orrs	r2, r5
    23e6:	d021      	beq.n	242c <__aeabi_dmul+0x198>
    23e8:	2d00      	cmp	r5, #0
    23ea:	d100      	bne.n	23ee <__aeabi_dmul+0x15a>
    23ec:	e154      	b.n	2698 <__aeabi_dmul+0x404>
    23ee:	0028      	movs	r0, r5
    23f0:	f000 feae 	bl	3150 <__clzsi2>
    23f4:	0003      	movs	r3, r0
    23f6:	3b0b      	subs	r3, #11
    23f8:	2b1c      	cmp	r3, #28
    23fa:	dd00      	ble.n	23fe <__aeabi_dmul+0x16a>
    23fc:	e146      	b.n	268c <__aeabi_dmul+0x3f8>
    23fe:	211d      	movs	r1, #29
    2400:	1acb      	subs	r3, r1, r3
    2402:	4651      	mov	r1, sl
    2404:	0002      	movs	r2, r0
    2406:	40d9      	lsrs	r1, r3
    2408:	4653      	mov	r3, sl
    240a:	3a08      	subs	r2, #8
    240c:	4095      	lsls	r5, r2
    240e:	4093      	lsls	r3, r2
    2410:	430d      	orrs	r5, r1
    2412:	4a1b      	ldr	r2, [pc, #108]	; (2480 <__aeabi_dmul+0x1ec>)
    2414:	4694      	mov	ip, r2
    2416:	4460      	add	r0, ip
    2418:	4240      	negs	r0, r0
    241a:	2200      	movs	r2, #0
    241c:	e779      	b.n	2312 <__aeabi_dmul+0x7e>
    241e:	2401      	movs	r4, #1
    2420:	2200      	movs	r2, #0
    2422:	400c      	ands	r4, r1
    2424:	4b12      	ldr	r3, [pc, #72]	; (2470 <__aeabi_dmul+0x1dc>)
    2426:	2500      	movs	r5, #0
    2428:	4690      	mov	r8, r2
    242a:	e799      	b.n	2360 <__aeabi_dmul+0xcc>
    242c:	2500      	movs	r5, #0
    242e:	2300      	movs	r3, #0
    2430:	2201      	movs	r2, #1
    2432:	e76e      	b.n	2312 <__aeabi_dmul+0x7e>
    2434:	2203      	movs	r2, #3
    2436:	e76c      	b.n	2312 <__aeabi_dmul+0x7e>
    2438:	2300      	movs	r3, #0
    243a:	469b      	mov	fp, r3
    243c:	4698      	mov	r8, r3
    243e:	3301      	adds	r3, #1
    2440:	2704      	movs	r7, #4
    2442:	9301      	str	r3, [sp, #4]
    2444:	e74c      	b.n	22e0 <__aeabi_dmul+0x4c>
    2446:	2303      	movs	r3, #3
    2448:	270c      	movs	r7, #12
    244a:	9301      	str	r3, [sp, #4]
    244c:	e748      	b.n	22e0 <__aeabi_dmul+0x4c>
    244e:	2300      	movs	r3, #0
    2450:	2580      	movs	r5, #128	; 0x80
    2452:	4698      	mov	r8, r3
    2454:	2400      	movs	r4, #0
    2456:	032d      	lsls	r5, r5, #12
    2458:	4b05      	ldr	r3, [pc, #20]	; (2470 <__aeabi_dmul+0x1dc>)
    245a:	e781      	b.n	2360 <__aeabi_dmul+0xcc>
    245c:	465d      	mov	r5, fp
    245e:	4643      	mov	r3, r8
    2460:	9a01      	ldr	r2, [sp, #4]
    2462:	e76f      	b.n	2344 <__aeabi_dmul+0xb0>
    2464:	465d      	mov	r5, fp
    2466:	4643      	mov	r3, r8
    2468:	0021      	movs	r1, r4
    246a:	9a01      	ldr	r2, [sp, #4]
    246c:	e76a      	b.n	2344 <__aeabi_dmul+0xb0>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	000007ff 	.word	0x000007ff
    2474:	fffffc01 	.word	0xfffffc01
    2478:	000034fc 	.word	0x000034fc
    247c:	800fffff 	.word	0x800fffff
    2480:	000003f3 	.word	0x000003f3
    2484:	4642      	mov	r2, r8
    2486:	0c12      	lsrs	r2, r2, #16
    2488:	4691      	mov	r9, r2
    248a:	0c1a      	lsrs	r2, r3, #16
    248c:	4694      	mov	ip, r2
    248e:	4642      	mov	r2, r8
    2490:	0417      	lsls	r7, r2, #16
    2492:	464a      	mov	r2, r9
    2494:	041b      	lsls	r3, r3, #16
    2496:	0c1b      	lsrs	r3, r3, #16
    2498:	435a      	muls	r2, r3
    249a:	4660      	mov	r0, ip
    249c:	4690      	mov	r8, r2
    249e:	464a      	mov	r2, r9
    24a0:	4342      	muls	r2, r0
    24a2:	0010      	movs	r0, r2
    24a4:	9203      	str	r2, [sp, #12]
    24a6:	4662      	mov	r2, ip
    24a8:	001c      	movs	r4, r3
    24aa:	0c3f      	lsrs	r7, r7, #16
    24ac:	437a      	muls	r2, r7
    24ae:	437c      	muls	r4, r7
    24b0:	4442      	add	r2, r8
    24b2:	9201      	str	r2, [sp, #4]
    24b4:	0c22      	lsrs	r2, r4, #16
    24b6:	4692      	mov	sl, r2
    24b8:	9a01      	ldr	r2, [sp, #4]
    24ba:	4452      	add	r2, sl
    24bc:	4590      	cmp	r8, r2
    24be:	d906      	bls.n	24ce <__aeabi_dmul+0x23a>
    24c0:	4682      	mov	sl, r0
    24c2:	2080      	movs	r0, #128	; 0x80
    24c4:	0240      	lsls	r0, r0, #9
    24c6:	4680      	mov	r8, r0
    24c8:	44c2      	add	sl, r8
    24ca:	4650      	mov	r0, sl
    24cc:	9003      	str	r0, [sp, #12]
    24ce:	0c10      	lsrs	r0, r2, #16
    24d0:	9004      	str	r0, [sp, #16]
    24d2:	4648      	mov	r0, r9
    24d4:	0424      	lsls	r4, r4, #16
    24d6:	0c24      	lsrs	r4, r4, #16
    24d8:	0412      	lsls	r2, r2, #16
    24da:	1912      	adds	r2, r2, r4
    24dc:	9205      	str	r2, [sp, #20]
    24de:	0c2a      	lsrs	r2, r5, #16
    24e0:	042d      	lsls	r5, r5, #16
    24e2:	0c2d      	lsrs	r5, r5, #16
    24e4:	4368      	muls	r0, r5
    24e6:	002c      	movs	r4, r5
    24e8:	4682      	mov	sl, r0
    24ea:	4648      	mov	r0, r9
    24ec:	437c      	muls	r4, r7
    24ee:	4350      	muls	r0, r2
    24f0:	4681      	mov	r9, r0
    24f2:	0c20      	lsrs	r0, r4, #16
    24f4:	4680      	mov	r8, r0
    24f6:	4357      	muls	r7, r2
    24f8:	4457      	add	r7, sl
    24fa:	4447      	add	r7, r8
    24fc:	45ba      	cmp	sl, r7
    24fe:	d903      	bls.n	2508 <__aeabi_dmul+0x274>
    2500:	2080      	movs	r0, #128	; 0x80
    2502:	0240      	lsls	r0, r0, #9
    2504:	4680      	mov	r8, r0
    2506:	44c1      	add	r9, r8
    2508:	0c38      	lsrs	r0, r7, #16
    250a:	043f      	lsls	r7, r7, #16
    250c:	46b8      	mov	r8, r7
    250e:	4448      	add	r0, r9
    2510:	0424      	lsls	r4, r4, #16
    2512:	0c24      	lsrs	r4, r4, #16
    2514:	9001      	str	r0, [sp, #4]
    2516:	9804      	ldr	r0, [sp, #16]
    2518:	44a0      	add	r8, r4
    251a:	4440      	add	r0, r8
    251c:	9004      	str	r0, [sp, #16]
    251e:	4658      	mov	r0, fp
    2520:	0c00      	lsrs	r0, r0, #16
    2522:	4681      	mov	r9, r0
    2524:	4658      	mov	r0, fp
    2526:	0404      	lsls	r4, r0, #16
    2528:	0c20      	lsrs	r0, r4, #16
    252a:	4682      	mov	sl, r0
    252c:	0007      	movs	r7, r0
    252e:	4648      	mov	r0, r9
    2530:	435f      	muls	r7, r3
    2532:	464c      	mov	r4, r9
    2534:	4343      	muls	r3, r0
    2536:	4660      	mov	r0, ip
    2538:	4360      	muls	r0, r4
    253a:	4664      	mov	r4, ip
    253c:	4683      	mov	fp, r0
    253e:	4650      	mov	r0, sl
    2540:	4344      	muls	r4, r0
    2542:	0c38      	lsrs	r0, r7, #16
    2544:	4684      	mov	ip, r0
    2546:	18e4      	adds	r4, r4, r3
    2548:	4464      	add	r4, ip
    254a:	42a3      	cmp	r3, r4
    254c:	d903      	bls.n	2556 <__aeabi_dmul+0x2c2>
    254e:	2380      	movs	r3, #128	; 0x80
    2550:	025b      	lsls	r3, r3, #9
    2552:	469c      	mov	ip, r3
    2554:	44e3      	add	fp, ip
    2556:	4648      	mov	r0, r9
    2558:	043f      	lsls	r7, r7, #16
    255a:	0c23      	lsrs	r3, r4, #16
    255c:	0c3f      	lsrs	r7, r7, #16
    255e:	0424      	lsls	r4, r4, #16
    2560:	19e4      	adds	r4, r4, r7
    2562:	4657      	mov	r7, sl
    2564:	4368      	muls	r0, r5
    2566:	436f      	muls	r7, r5
    2568:	4684      	mov	ip, r0
    256a:	464d      	mov	r5, r9
    256c:	4650      	mov	r0, sl
    256e:	4355      	muls	r5, r2
    2570:	4342      	muls	r2, r0
    2572:	0c38      	lsrs	r0, r7, #16
    2574:	4681      	mov	r9, r0
    2576:	4462      	add	r2, ip
    2578:	444a      	add	r2, r9
    257a:	445b      	add	r3, fp
    257c:	4594      	cmp	ip, r2
    257e:	d903      	bls.n	2588 <__aeabi_dmul+0x2f4>
    2580:	2080      	movs	r0, #128	; 0x80
    2582:	0240      	lsls	r0, r0, #9
    2584:	4684      	mov	ip, r0
    2586:	4465      	add	r5, ip
    2588:	9803      	ldr	r0, [sp, #12]
    258a:	043f      	lsls	r7, r7, #16
    258c:	4683      	mov	fp, r0
    258e:	9804      	ldr	r0, [sp, #16]
    2590:	0c3f      	lsrs	r7, r7, #16
    2592:	4684      	mov	ip, r0
    2594:	44e3      	add	fp, ip
    2596:	45c3      	cmp	fp, r8
    2598:	4180      	sbcs	r0, r0
    259a:	4240      	negs	r0, r0
    259c:	4682      	mov	sl, r0
    259e:	0410      	lsls	r0, r2, #16
    25a0:	4684      	mov	ip, r0
    25a2:	9801      	ldr	r0, [sp, #4]
    25a4:	4467      	add	r7, ip
    25a6:	4684      	mov	ip, r0
    25a8:	4467      	add	r7, ip
    25aa:	44a3      	add	fp, r4
    25ac:	46bc      	mov	ip, r7
    25ae:	45a3      	cmp	fp, r4
    25b0:	41a4      	sbcs	r4, r4
    25b2:	4699      	mov	r9, r3
    25b4:	44d4      	add	ip, sl
    25b6:	4264      	negs	r4, r4
    25b8:	4287      	cmp	r7, r0
    25ba:	41bf      	sbcs	r7, r7
    25bc:	45d4      	cmp	ip, sl
    25be:	4180      	sbcs	r0, r0
    25c0:	44e1      	add	r9, ip
    25c2:	46a0      	mov	r8, r4
    25c4:	4599      	cmp	r9, r3
    25c6:	419b      	sbcs	r3, r3
    25c8:	427f      	negs	r7, r7
    25ca:	4240      	negs	r0, r0
    25cc:	44c8      	add	r8, r9
    25ce:	4307      	orrs	r7, r0
    25d0:	0c12      	lsrs	r2, r2, #16
    25d2:	18ba      	adds	r2, r7, r2
    25d4:	45a0      	cmp	r8, r4
    25d6:	41a4      	sbcs	r4, r4
    25d8:	425f      	negs	r7, r3
    25da:	003b      	movs	r3, r7
    25dc:	4264      	negs	r4, r4
    25de:	4323      	orrs	r3, r4
    25e0:	18d7      	adds	r7, r2, r3
    25e2:	4643      	mov	r3, r8
    25e4:	197d      	adds	r5, r7, r5
    25e6:	0ddb      	lsrs	r3, r3, #23
    25e8:	026d      	lsls	r5, r5, #9
    25ea:	431d      	orrs	r5, r3
    25ec:	465b      	mov	r3, fp
    25ee:	025a      	lsls	r2, r3, #9
    25f0:	9b05      	ldr	r3, [sp, #20]
    25f2:	431a      	orrs	r2, r3
    25f4:	1e53      	subs	r3, r2, #1
    25f6:	419a      	sbcs	r2, r3
    25f8:	465b      	mov	r3, fp
    25fa:	0ddb      	lsrs	r3, r3, #23
    25fc:	431a      	orrs	r2, r3
    25fe:	4643      	mov	r3, r8
    2600:	025b      	lsls	r3, r3, #9
    2602:	4313      	orrs	r3, r2
    2604:	01ea      	lsls	r2, r5, #7
    2606:	d507      	bpl.n	2618 <__aeabi_dmul+0x384>
    2608:	2201      	movs	r2, #1
    260a:	085c      	lsrs	r4, r3, #1
    260c:	4013      	ands	r3, r2
    260e:	4323      	orrs	r3, r4
    2610:	07ea      	lsls	r2, r5, #31
    2612:	9e02      	ldr	r6, [sp, #8]
    2614:	4313      	orrs	r3, r2
    2616:	086d      	lsrs	r5, r5, #1
    2618:	4a57      	ldr	r2, [pc, #348]	; (2778 <__aeabi_dmul+0x4e4>)
    261a:	18b2      	adds	r2, r6, r2
    261c:	2a00      	cmp	r2, #0
    261e:	dd4b      	ble.n	26b8 <__aeabi_dmul+0x424>
    2620:	0758      	lsls	r0, r3, #29
    2622:	d009      	beq.n	2638 <__aeabi_dmul+0x3a4>
    2624:	200f      	movs	r0, #15
    2626:	4018      	ands	r0, r3
    2628:	2804      	cmp	r0, #4
    262a:	d005      	beq.n	2638 <__aeabi_dmul+0x3a4>
    262c:	1d18      	adds	r0, r3, #4
    262e:	4298      	cmp	r0, r3
    2630:	419b      	sbcs	r3, r3
    2632:	425b      	negs	r3, r3
    2634:	18ed      	adds	r5, r5, r3
    2636:	0003      	movs	r3, r0
    2638:	01e8      	lsls	r0, r5, #7
    263a:	d504      	bpl.n	2646 <__aeabi_dmul+0x3b2>
    263c:	4a4f      	ldr	r2, [pc, #316]	; (277c <__aeabi_dmul+0x4e8>)
    263e:	4015      	ands	r5, r2
    2640:	2280      	movs	r2, #128	; 0x80
    2642:	00d2      	lsls	r2, r2, #3
    2644:	18b2      	adds	r2, r6, r2
    2646:	484e      	ldr	r0, [pc, #312]	; (2780 <__aeabi_dmul+0x4ec>)
    2648:	4282      	cmp	r2, r0
    264a:	dd00      	ble.n	264e <__aeabi_dmul+0x3ba>
    264c:	e6e7      	b.n	241e <__aeabi_dmul+0x18a>
    264e:	2401      	movs	r4, #1
    2650:	08db      	lsrs	r3, r3, #3
    2652:	0768      	lsls	r0, r5, #29
    2654:	4318      	orrs	r0, r3
    2656:	026d      	lsls	r5, r5, #9
    2658:	0553      	lsls	r3, r2, #21
    265a:	4680      	mov	r8, r0
    265c:	0b2d      	lsrs	r5, r5, #12
    265e:	0d5b      	lsrs	r3, r3, #21
    2660:	400c      	ands	r4, r1
    2662:	e67d      	b.n	2360 <__aeabi_dmul+0xcc>
    2664:	2280      	movs	r2, #128	; 0x80
    2666:	4659      	mov	r1, fp
    2668:	0312      	lsls	r2, r2, #12
    266a:	4211      	tst	r1, r2
    266c:	d008      	beq.n	2680 <__aeabi_dmul+0x3ec>
    266e:	4215      	tst	r5, r2
    2670:	d106      	bne.n	2680 <__aeabi_dmul+0x3ec>
    2672:	4315      	orrs	r5, r2
    2674:	032d      	lsls	r5, r5, #12
    2676:	4698      	mov	r8, r3
    2678:	0b2d      	lsrs	r5, r5, #12
    267a:	464c      	mov	r4, r9
    267c:	4b41      	ldr	r3, [pc, #260]	; (2784 <__aeabi_dmul+0x4f0>)
    267e:	e66f      	b.n	2360 <__aeabi_dmul+0xcc>
    2680:	465d      	mov	r5, fp
    2682:	4315      	orrs	r5, r2
    2684:	032d      	lsls	r5, r5, #12
    2686:	0b2d      	lsrs	r5, r5, #12
    2688:	4b3e      	ldr	r3, [pc, #248]	; (2784 <__aeabi_dmul+0x4f0>)
    268a:	e669      	b.n	2360 <__aeabi_dmul+0xcc>
    268c:	0003      	movs	r3, r0
    268e:	4655      	mov	r5, sl
    2690:	3b28      	subs	r3, #40	; 0x28
    2692:	409d      	lsls	r5, r3
    2694:	2300      	movs	r3, #0
    2696:	e6bc      	b.n	2412 <__aeabi_dmul+0x17e>
    2698:	4650      	mov	r0, sl
    269a:	f000 fd59 	bl	3150 <__clzsi2>
    269e:	3020      	adds	r0, #32
    26a0:	e6a8      	b.n	23f4 <__aeabi_dmul+0x160>
    26a2:	0003      	movs	r3, r0
    26a4:	3b28      	subs	r3, #40	; 0x28
    26a6:	409f      	lsls	r7, r3
    26a8:	2300      	movs	r3, #0
    26aa:	46bb      	mov	fp, r7
    26ac:	4698      	mov	r8, r3
    26ae:	e689      	b.n	23c4 <__aeabi_dmul+0x130>
    26b0:	f000 fd4e 	bl	3150 <__clzsi2>
    26b4:	3020      	adds	r0, #32
    26b6:	e673      	b.n	23a0 <__aeabi_dmul+0x10c>
    26b8:	2401      	movs	r4, #1
    26ba:	1aa6      	subs	r6, r4, r2
    26bc:	2e38      	cmp	r6, #56	; 0x38
    26be:	dd07      	ble.n	26d0 <__aeabi_dmul+0x43c>
    26c0:	2200      	movs	r2, #0
    26c2:	400c      	ands	r4, r1
    26c4:	2300      	movs	r3, #0
    26c6:	2500      	movs	r5, #0
    26c8:	4690      	mov	r8, r2
    26ca:	e649      	b.n	2360 <__aeabi_dmul+0xcc>
    26cc:	9e02      	ldr	r6, [sp, #8]
    26ce:	e7a3      	b.n	2618 <__aeabi_dmul+0x384>
    26d0:	2e1f      	cmp	r6, #31
    26d2:	dc20      	bgt.n	2716 <__aeabi_dmul+0x482>
    26d4:	2220      	movs	r2, #32
    26d6:	002c      	movs	r4, r5
    26d8:	0018      	movs	r0, r3
    26da:	1b92      	subs	r2, r2, r6
    26dc:	40f0      	lsrs	r0, r6
    26de:	4094      	lsls	r4, r2
    26e0:	4093      	lsls	r3, r2
    26e2:	4304      	orrs	r4, r0
    26e4:	1e58      	subs	r0, r3, #1
    26e6:	4183      	sbcs	r3, r0
    26e8:	431c      	orrs	r4, r3
    26ea:	40f5      	lsrs	r5, r6
    26ec:	0763      	lsls	r3, r4, #29
    26ee:	d009      	beq.n	2704 <__aeabi_dmul+0x470>
    26f0:	230f      	movs	r3, #15
    26f2:	4023      	ands	r3, r4
    26f4:	2b04      	cmp	r3, #4
    26f6:	d005      	beq.n	2704 <__aeabi_dmul+0x470>
    26f8:	0023      	movs	r3, r4
    26fa:	1d1c      	adds	r4, r3, #4
    26fc:	429c      	cmp	r4, r3
    26fe:	4192      	sbcs	r2, r2
    2700:	4252      	negs	r2, r2
    2702:	18ad      	adds	r5, r5, r2
    2704:	022b      	lsls	r3, r5, #8
    2706:	d51f      	bpl.n	2748 <__aeabi_dmul+0x4b4>
    2708:	2401      	movs	r4, #1
    270a:	2200      	movs	r2, #0
    270c:	400c      	ands	r4, r1
    270e:	2301      	movs	r3, #1
    2710:	2500      	movs	r5, #0
    2712:	4690      	mov	r8, r2
    2714:	e624      	b.n	2360 <__aeabi_dmul+0xcc>
    2716:	201f      	movs	r0, #31
    2718:	002c      	movs	r4, r5
    271a:	4240      	negs	r0, r0
    271c:	1a82      	subs	r2, r0, r2
    271e:	40d4      	lsrs	r4, r2
    2720:	2e20      	cmp	r6, #32
    2722:	d01c      	beq.n	275e <__aeabi_dmul+0x4ca>
    2724:	2240      	movs	r2, #64	; 0x40
    2726:	1b96      	subs	r6, r2, r6
    2728:	40b5      	lsls	r5, r6
    272a:	432b      	orrs	r3, r5
    272c:	1e58      	subs	r0, r3, #1
    272e:	4183      	sbcs	r3, r0
    2730:	2007      	movs	r0, #7
    2732:	4323      	orrs	r3, r4
    2734:	4018      	ands	r0, r3
    2736:	2500      	movs	r5, #0
    2738:	2800      	cmp	r0, #0
    273a:	d009      	beq.n	2750 <__aeabi_dmul+0x4bc>
    273c:	220f      	movs	r2, #15
    273e:	2500      	movs	r5, #0
    2740:	401a      	ands	r2, r3
    2742:	001c      	movs	r4, r3
    2744:	2a04      	cmp	r2, #4
    2746:	d1d8      	bne.n	26fa <__aeabi_dmul+0x466>
    2748:	0023      	movs	r3, r4
    274a:	0768      	lsls	r0, r5, #29
    274c:	026d      	lsls	r5, r5, #9
    274e:	0b2d      	lsrs	r5, r5, #12
    2750:	2401      	movs	r4, #1
    2752:	08db      	lsrs	r3, r3, #3
    2754:	4303      	orrs	r3, r0
    2756:	4698      	mov	r8, r3
    2758:	400c      	ands	r4, r1
    275a:	2300      	movs	r3, #0
    275c:	e600      	b.n	2360 <__aeabi_dmul+0xcc>
    275e:	2500      	movs	r5, #0
    2760:	e7e3      	b.n	272a <__aeabi_dmul+0x496>
    2762:	2280      	movs	r2, #128	; 0x80
    2764:	2401      	movs	r4, #1
    2766:	0312      	lsls	r2, r2, #12
    2768:	4315      	orrs	r5, r2
    276a:	032d      	lsls	r5, r5, #12
    276c:	4698      	mov	r8, r3
    276e:	0b2d      	lsrs	r5, r5, #12
    2770:	400c      	ands	r4, r1
    2772:	4b04      	ldr	r3, [pc, #16]	; (2784 <__aeabi_dmul+0x4f0>)
    2774:	e5f4      	b.n	2360 <__aeabi_dmul+0xcc>
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	000003ff 	.word	0x000003ff
    277c:	feffffff 	.word	0xfeffffff
    2780:	000007fe 	.word	0x000007fe
    2784:	000007ff 	.word	0x000007ff

00002788 <__aeabi_dsub>:
    2788:	b5f0      	push	{r4, r5, r6, r7, lr}
    278a:	4657      	mov	r7, sl
    278c:	464e      	mov	r6, r9
    278e:	4645      	mov	r5, r8
    2790:	b4e0      	push	{r5, r6, r7}
    2792:	000e      	movs	r6, r1
    2794:	0011      	movs	r1, r2
    2796:	0ff2      	lsrs	r2, r6, #31
    2798:	4692      	mov	sl, r2
    279a:	00c5      	lsls	r5, r0, #3
    279c:	0f42      	lsrs	r2, r0, #29
    279e:	0318      	lsls	r0, r3, #12
    27a0:	0337      	lsls	r7, r6, #12
    27a2:	0074      	lsls	r4, r6, #1
    27a4:	0a40      	lsrs	r0, r0, #9
    27a6:	0f4e      	lsrs	r6, r1, #29
    27a8:	0a7f      	lsrs	r7, r7, #9
    27aa:	4330      	orrs	r0, r6
    27ac:	4ecf      	ldr	r6, [pc, #828]	; (2aec <__aeabi_dsub+0x364>)
    27ae:	4317      	orrs	r7, r2
    27b0:	005a      	lsls	r2, r3, #1
    27b2:	0d64      	lsrs	r4, r4, #21
    27b4:	0d52      	lsrs	r2, r2, #21
    27b6:	0fdb      	lsrs	r3, r3, #31
    27b8:	00c9      	lsls	r1, r1, #3
    27ba:	42b2      	cmp	r2, r6
    27bc:	d100      	bne.n	27c0 <__aeabi_dsub+0x38>
    27be:	e0e5      	b.n	298c <__aeabi_dsub+0x204>
    27c0:	2601      	movs	r6, #1
    27c2:	4073      	eors	r3, r6
    27c4:	1aa6      	subs	r6, r4, r2
    27c6:	46b4      	mov	ip, r6
    27c8:	4553      	cmp	r3, sl
    27ca:	d100      	bne.n	27ce <__aeabi_dsub+0x46>
    27cc:	e0af      	b.n	292e <__aeabi_dsub+0x1a6>
    27ce:	2e00      	cmp	r6, #0
    27d0:	dc00      	bgt.n	27d4 <__aeabi_dsub+0x4c>
    27d2:	e10d      	b.n	29f0 <__aeabi_dsub+0x268>
    27d4:	2a00      	cmp	r2, #0
    27d6:	d13a      	bne.n	284e <__aeabi_dsub+0xc6>
    27d8:	0003      	movs	r3, r0
    27da:	430b      	orrs	r3, r1
    27dc:	d000      	beq.n	27e0 <__aeabi_dsub+0x58>
    27de:	e0e4      	b.n	29aa <__aeabi_dsub+0x222>
    27e0:	076b      	lsls	r3, r5, #29
    27e2:	d009      	beq.n	27f8 <__aeabi_dsub+0x70>
    27e4:	230f      	movs	r3, #15
    27e6:	402b      	ands	r3, r5
    27e8:	2b04      	cmp	r3, #4
    27ea:	d005      	beq.n	27f8 <__aeabi_dsub+0x70>
    27ec:	1d2b      	adds	r3, r5, #4
    27ee:	42ab      	cmp	r3, r5
    27f0:	41ad      	sbcs	r5, r5
    27f2:	426d      	negs	r5, r5
    27f4:	197f      	adds	r7, r7, r5
    27f6:	001d      	movs	r5, r3
    27f8:	023b      	lsls	r3, r7, #8
    27fa:	d400      	bmi.n	27fe <__aeabi_dsub+0x76>
    27fc:	e088      	b.n	2910 <__aeabi_dsub+0x188>
    27fe:	4bbb      	ldr	r3, [pc, #748]	; (2aec <__aeabi_dsub+0x364>)
    2800:	3401      	adds	r4, #1
    2802:	429c      	cmp	r4, r3
    2804:	d100      	bne.n	2808 <__aeabi_dsub+0x80>
    2806:	e110      	b.n	2a2a <__aeabi_dsub+0x2a2>
    2808:	003a      	movs	r2, r7
    280a:	4bb9      	ldr	r3, [pc, #740]	; (2af0 <__aeabi_dsub+0x368>)
    280c:	4651      	mov	r1, sl
    280e:	401a      	ands	r2, r3
    2810:	2301      	movs	r3, #1
    2812:	0750      	lsls	r0, r2, #29
    2814:	08ed      	lsrs	r5, r5, #3
    2816:	0252      	lsls	r2, r2, #9
    2818:	0564      	lsls	r4, r4, #21
    281a:	4305      	orrs	r5, r0
    281c:	0b12      	lsrs	r2, r2, #12
    281e:	0d64      	lsrs	r4, r4, #21
    2820:	400b      	ands	r3, r1
    2822:	2100      	movs	r1, #0
    2824:	0028      	movs	r0, r5
    2826:	0312      	lsls	r2, r2, #12
    2828:	0d0d      	lsrs	r5, r1, #20
    282a:	0b12      	lsrs	r2, r2, #12
    282c:	0564      	lsls	r4, r4, #21
    282e:	052d      	lsls	r5, r5, #20
    2830:	4315      	orrs	r5, r2
    2832:	0862      	lsrs	r2, r4, #1
    2834:	4caf      	ldr	r4, [pc, #700]	; (2af4 <__aeabi_dsub+0x36c>)
    2836:	07db      	lsls	r3, r3, #31
    2838:	402c      	ands	r4, r5
    283a:	4314      	orrs	r4, r2
    283c:	0064      	lsls	r4, r4, #1
    283e:	0864      	lsrs	r4, r4, #1
    2840:	431c      	orrs	r4, r3
    2842:	0021      	movs	r1, r4
    2844:	bc1c      	pop	{r2, r3, r4}
    2846:	4690      	mov	r8, r2
    2848:	4699      	mov	r9, r3
    284a:	46a2      	mov	sl, r4
    284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284e:	4ba7      	ldr	r3, [pc, #668]	; (2aec <__aeabi_dsub+0x364>)
    2850:	429c      	cmp	r4, r3
    2852:	d0c5      	beq.n	27e0 <__aeabi_dsub+0x58>
    2854:	2380      	movs	r3, #128	; 0x80
    2856:	041b      	lsls	r3, r3, #16
    2858:	4318      	orrs	r0, r3
    285a:	4663      	mov	r3, ip
    285c:	2b38      	cmp	r3, #56	; 0x38
    285e:	dd00      	ble.n	2862 <__aeabi_dsub+0xda>
    2860:	e0fd      	b.n	2a5e <__aeabi_dsub+0x2d6>
    2862:	2b1f      	cmp	r3, #31
    2864:	dd00      	ble.n	2868 <__aeabi_dsub+0xe0>
    2866:	e130      	b.n	2aca <__aeabi_dsub+0x342>
    2868:	4662      	mov	r2, ip
    286a:	2320      	movs	r3, #32
    286c:	1a9b      	subs	r3, r3, r2
    286e:	0002      	movs	r2, r0
    2870:	409a      	lsls	r2, r3
    2872:	4666      	mov	r6, ip
    2874:	4690      	mov	r8, r2
    2876:	000a      	movs	r2, r1
    2878:	4099      	lsls	r1, r3
    287a:	40f2      	lsrs	r2, r6
    287c:	4646      	mov	r6, r8
    287e:	1e4b      	subs	r3, r1, #1
    2880:	4199      	sbcs	r1, r3
    2882:	4332      	orrs	r2, r6
    2884:	4311      	orrs	r1, r2
    2886:	4663      	mov	r3, ip
    2888:	0002      	movs	r2, r0
    288a:	40da      	lsrs	r2, r3
    288c:	1a69      	subs	r1, r5, r1
    288e:	428d      	cmp	r5, r1
    2890:	419b      	sbcs	r3, r3
    2892:	000d      	movs	r5, r1
    2894:	1aba      	subs	r2, r7, r2
    2896:	425b      	negs	r3, r3
    2898:	1ad7      	subs	r7, r2, r3
    289a:	023b      	lsls	r3, r7, #8
    289c:	d535      	bpl.n	290a <__aeabi_dsub+0x182>
    289e:	027a      	lsls	r2, r7, #9
    28a0:	0a53      	lsrs	r3, r2, #9
    28a2:	4698      	mov	r8, r3
    28a4:	4643      	mov	r3, r8
    28a6:	2b00      	cmp	r3, #0
    28a8:	d100      	bne.n	28ac <__aeabi_dsub+0x124>
    28aa:	e0c4      	b.n	2a36 <__aeabi_dsub+0x2ae>
    28ac:	4640      	mov	r0, r8
    28ae:	f000 fc4f 	bl	3150 <__clzsi2>
    28b2:	0003      	movs	r3, r0
    28b4:	3b08      	subs	r3, #8
    28b6:	2b1f      	cmp	r3, #31
    28b8:	dd00      	ble.n	28bc <__aeabi_dsub+0x134>
    28ba:	e0c5      	b.n	2a48 <__aeabi_dsub+0x2c0>
    28bc:	2220      	movs	r2, #32
    28be:	0029      	movs	r1, r5
    28c0:	1ad2      	subs	r2, r2, r3
    28c2:	4647      	mov	r7, r8
    28c4:	40d1      	lsrs	r1, r2
    28c6:	409f      	lsls	r7, r3
    28c8:	000a      	movs	r2, r1
    28ca:	409d      	lsls	r5, r3
    28cc:	433a      	orrs	r2, r7
    28ce:	429c      	cmp	r4, r3
    28d0:	dd00      	ble.n	28d4 <__aeabi_dsub+0x14c>
    28d2:	e0c0      	b.n	2a56 <__aeabi_dsub+0x2ce>
    28d4:	1b1c      	subs	r4, r3, r4
    28d6:	1c63      	adds	r3, r4, #1
    28d8:	2b1f      	cmp	r3, #31
    28da:	dd00      	ble.n	28de <__aeabi_dsub+0x156>
    28dc:	e0e4      	b.n	2aa8 <__aeabi_dsub+0x320>
    28de:	2120      	movs	r1, #32
    28e0:	0014      	movs	r4, r2
    28e2:	0028      	movs	r0, r5
    28e4:	1ac9      	subs	r1, r1, r3
    28e6:	40d8      	lsrs	r0, r3
    28e8:	408c      	lsls	r4, r1
    28ea:	408d      	lsls	r5, r1
    28ec:	4304      	orrs	r4, r0
    28ee:	40da      	lsrs	r2, r3
    28f0:	1e68      	subs	r0, r5, #1
    28f2:	4185      	sbcs	r5, r0
    28f4:	0017      	movs	r7, r2
    28f6:	4325      	orrs	r5, r4
    28f8:	2400      	movs	r4, #0
    28fa:	e771      	b.n	27e0 <__aeabi_dsub+0x58>
    28fc:	4642      	mov	r2, r8
    28fe:	4663      	mov	r3, ip
    2900:	431a      	orrs	r2, r3
    2902:	d100      	bne.n	2906 <__aeabi_dsub+0x17e>
    2904:	e24c      	b.n	2da0 <__aeabi_dsub+0x618>
    2906:	4667      	mov	r7, ip
    2908:	4645      	mov	r5, r8
    290a:	076b      	lsls	r3, r5, #29
    290c:	d000      	beq.n	2910 <__aeabi_dsub+0x188>
    290e:	e769      	b.n	27e4 <__aeabi_dsub+0x5c>
    2910:	2301      	movs	r3, #1
    2912:	4651      	mov	r1, sl
    2914:	0778      	lsls	r0, r7, #29
    2916:	08ed      	lsrs	r5, r5, #3
    2918:	08fa      	lsrs	r2, r7, #3
    291a:	400b      	ands	r3, r1
    291c:	4305      	orrs	r5, r0
    291e:	4973      	ldr	r1, [pc, #460]	; (2aec <__aeabi_dsub+0x364>)
    2920:	428c      	cmp	r4, r1
    2922:	d038      	beq.n	2996 <__aeabi_dsub+0x20e>
    2924:	0312      	lsls	r2, r2, #12
    2926:	0564      	lsls	r4, r4, #21
    2928:	0b12      	lsrs	r2, r2, #12
    292a:	0d64      	lsrs	r4, r4, #21
    292c:	e779      	b.n	2822 <__aeabi_dsub+0x9a>
    292e:	2e00      	cmp	r6, #0
    2930:	dc00      	bgt.n	2934 <__aeabi_dsub+0x1ac>
    2932:	e09a      	b.n	2a6a <__aeabi_dsub+0x2e2>
    2934:	2a00      	cmp	r2, #0
    2936:	d047      	beq.n	29c8 <__aeabi_dsub+0x240>
    2938:	4a6c      	ldr	r2, [pc, #432]	; (2aec <__aeabi_dsub+0x364>)
    293a:	4294      	cmp	r4, r2
    293c:	d100      	bne.n	2940 <__aeabi_dsub+0x1b8>
    293e:	e74f      	b.n	27e0 <__aeabi_dsub+0x58>
    2940:	2280      	movs	r2, #128	; 0x80
    2942:	0412      	lsls	r2, r2, #16
    2944:	4310      	orrs	r0, r2
    2946:	4662      	mov	r2, ip
    2948:	2a38      	cmp	r2, #56	; 0x38
    294a:	dc00      	bgt.n	294e <__aeabi_dsub+0x1c6>
    294c:	e108      	b.n	2b60 <__aeabi_dsub+0x3d8>
    294e:	4301      	orrs	r1, r0
    2950:	1e48      	subs	r0, r1, #1
    2952:	4181      	sbcs	r1, r0
    2954:	2200      	movs	r2, #0
    2956:	b2c9      	uxtb	r1, r1
    2958:	1949      	adds	r1, r1, r5
    295a:	19d2      	adds	r2, r2, r7
    295c:	42a9      	cmp	r1, r5
    295e:	41bf      	sbcs	r7, r7
    2960:	000d      	movs	r5, r1
    2962:	427f      	negs	r7, r7
    2964:	18bf      	adds	r7, r7, r2
    2966:	023a      	lsls	r2, r7, #8
    2968:	d400      	bmi.n	296c <__aeabi_dsub+0x1e4>
    296a:	e142      	b.n	2bf2 <__aeabi_dsub+0x46a>
    296c:	4a5f      	ldr	r2, [pc, #380]	; (2aec <__aeabi_dsub+0x364>)
    296e:	3401      	adds	r4, #1
    2970:	4294      	cmp	r4, r2
    2972:	d100      	bne.n	2976 <__aeabi_dsub+0x1ee>
    2974:	e14e      	b.n	2c14 <__aeabi_dsub+0x48c>
    2976:	2001      	movs	r0, #1
    2978:	4a5d      	ldr	r2, [pc, #372]	; (2af0 <__aeabi_dsub+0x368>)
    297a:	0869      	lsrs	r1, r5, #1
    297c:	403a      	ands	r2, r7
    297e:	4028      	ands	r0, r5
    2980:	4308      	orrs	r0, r1
    2982:	07d5      	lsls	r5, r2, #31
    2984:	4305      	orrs	r5, r0
    2986:	0857      	lsrs	r7, r2, #1
    2988:	469a      	mov	sl, r3
    298a:	e729      	b.n	27e0 <__aeabi_dsub+0x58>
    298c:	0006      	movs	r6, r0
    298e:	430e      	orrs	r6, r1
    2990:	d000      	beq.n	2994 <__aeabi_dsub+0x20c>
    2992:	e717      	b.n	27c4 <__aeabi_dsub+0x3c>
    2994:	e714      	b.n	27c0 <__aeabi_dsub+0x38>
    2996:	0029      	movs	r1, r5
    2998:	4311      	orrs	r1, r2
    299a:	d100      	bne.n	299e <__aeabi_dsub+0x216>
    299c:	e1f9      	b.n	2d92 <__aeabi_dsub+0x60a>
    299e:	2180      	movs	r1, #128	; 0x80
    29a0:	0309      	lsls	r1, r1, #12
    29a2:	430a      	orrs	r2, r1
    29a4:	0312      	lsls	r2, r2, #12
    29a6:	0b12      	lsrs	r2, r2, #12
    29a8:	e73b      	b.n	2822 <__aeabi_dsub+0x9a>
    29aa:	2301      	movs	r3, #1
    29ac:	425b      	negs	r3, r3
    29ae:	4698      	mov	r8, r3
    29b0:	44c4      	add	ip, r8
    29b2:	4663      	mov	r3, ip
    29b4:	2b00      	cmp	r3, #0
    29b6:	d172      	bne.n	2a9e <__aeabi_dsub+0x316>
    29b8:	1a69      	subs	r1, r5, r1
    29ba:	428d      	cmp	r5, r1
    29bc:	419b      	sbcs	r3, r3
    29be:	1a3f      	subs	r7, r7, r0
    29c0:	425b      	negs	r3, r3
    29c2:	1aff      	subs	r7, r7, r3
    29c4:	000d      	movs	r5, r1
    29c6:	e768      	b.n	289a <__aeabi_dsub+0x112>
    29c8:	0002      	movs	r2, r0
    29ca:	430a      	orrs	r2, r1
    29cc:	d100      	bne.n	29d0 <__aeabi_dsub+0x248>
    29ce:	e707      	b.n	27e0 <__aeabi_dsub+0x58>
    29d0:	2201      	movs	r2, #1
    29d2:	4252      	negs	r2, r2
    29d4:	4690      	mov	r8, r2
    29d6:	44c4      	add	ip, r8
    29d8:	4662      	mov	r2, ip
    29da:	2a00      	cmp	r2, #0
    29dc:	d000      	beq.n	29e0 <__aeabi_dsub+0x258>
    29de:	e0e6      	b.n	2bae <__aeabi_dsub+0x426>
    29e0:	1869      	adds	r1, r5, r1
    29e2:	42a9      	cmp	r1, r5
    29e4:	41b6      	sbcs	r6, r6
    29e6:	183f      	adds	r7, r7, r0
    29e8:	4276      	negs	r6, r6
    29ea:	19f7      	adds	r7, r6, r7
    29ec:	000d      	movs	r5, r1
    29ee:	e7ba      	b.n	2966 <__aeabi_dsub+0x1de>
    29f0:	2e00      	cmp	r6, #0
    29f2:	d000      	beq.n	29f6 <__aeabi_dsub+0x26e>
    29f4:	e080      	b.n	2af8 <__aeabi_dsub+0x370>
    29f6:	1c62      	adds	r2, r4, #1
    29f8:	0552      	lsls	r2, r2, #21
    29fa:	0d52      	lsrs	r2, r2, #21
    29fc:	2a01      	cmp	r2, #1
    29fe:	dc00      	bgt.n	2a02 <__aeabi_dsub+0x27a>
    2a00:	e0f9      	b.n	2bf6 <__aeabi_dsub+0x46e>
    2a02:	1a6a      	subs	r2, r5, r1
    2a04:	4691      	mov	r9, r2
    2a06:	454d      	cmp	r5, r9
    2a08:	41b6      	sbcs	r6, r6
    2a0a:	1a3a      	subs	r2, r7, r0
    2a0c:	4276      	negs	r6, r6
    2a0e:	1b92      	subs	r2, r2, r6
    2a10:	4690      	mov	r8, r2
    2a12:	0212      	lsls	r2, r2, #8
    2a14:	d400      	bmi.n	2a18 <__aeabi_dsub+0x290>
    2a16:	e099      	b.n	2b4c <__aeabi_dsub+0x3c4>
    2a18:	1b4d      	subs	r5, r1, r5
    2a1a:	42a9      	cmp	r1, r5
    2a1c:	4189      	sbcs	r1, r1
    2a1e:	1bc7      	subs	r7, r0, r7
    2a20:	4249      	negs	r1, r1
    2a22:	1a7a      	subs	r2, r7, r1
    2a24:	4690      	mov	r8, r2
    2a26:	469a      	mov	sl, r3
    2a28:	e73c      	b.n	28a4 <__aeabi_dsub+0x11c>
    2a2a:	4652      	mov	r2, sl
    2a2c:	2301      	movs	r3, #1
    2a2e:	2500      	movs	r5, #0
    2a30:	4013      	ands	r3, r2
    2a32:	2200      	movs	r2, #0
    2a34:	e6f5      	b.n	2822 <__aeabi_dsub+0x9a>
    2a36:	0028      	movs	r0, r5
    2a38:	f000 fb8a 	bl	3150 <__clzsi2>
    2a3c:	3020      	adds	r0, #32
    2a3e:	0003      	movs	r3, r0
    2a40:	3b08      	subs	r3, #8
    2a42:	2b1f      	cmp	r3, #31
    2a44:	dc00      	bgt.n	2a48 <__aeabi_dsub+0x2c0>
    2a46:	e739      	b.n	28bc <__aeabi_dsub+0x134>
    2a48:	002a      	movs	r2, r5
    2a4a:	3828      	subs	r0, #40	; 0x28
    2a4c:	4082      	lsls	r2, r0
    2a4e:	2500      	movs	r5, #0
    2a50:	429c      	cmp	r4, r3
    2a52:	dc00      	bgt.n	2a56 <__aeabi_dsub+0x2ce>
    2a54:	e73e      	b.n	28d4 <__aeabi_dsub+0x14c>
    2a56:	4f26      	ldr	r7, [pc, #152]	; (2af0 <__aeabi_dsub+0x368>)
    2a58:	1ae4      	subs	r4, r4, r3
    2a5a:	4017      	ands	r7, r2
    2a5c:	e6c0      	b.n	27e0 <__aeabi_dsub+0x58>
    2a5e:	4301      	orrs	r1, r0
    2a60:	1e48      	subs	r0, r1, #1
    2a62:	4181      	sbcs	r1, r0
    2a64:	2200      	movs	r2, #0
    2a66:	b2c9      	uxtb	r1, r1
    2a68:	e710      	b.n	288c <__aeabi_dsub+0x104>
    2a6a:	2e00      	cmp	r6, #0
    2a6c:	d000      	beq.n	2a70 <__aeabi_dsub+0x2e8>
    2a6e:	e0f1      	b.n	2c54 <__aeabi_dsub+0x4cc>
    2a70:	1c62      	adds	r2, r4, #1
    2a72:	4694      	mov	ip, r2
    2a74:	0552      	lsls	r2, r2, #21
    2a76:	0d52      	lsrs	r2, r2, #21
    2a78:	2a01      	cmp	r2, #1
    2a7a:	dc00      	bgt.n	2a7e <__aeabi_dsub+0x2f6>
    2a7c:	e0a0      	b.n	2bc0 <__aeabi_dsub+0x438>
    2a7e:	4a1b      	ldr	r2, [pc, #108]	; (2aec <__aeabi_dsub+0x364>)
    2a80:	4594      	cmp	ip, r2
    2a82:	d100      	bne.n	2a86 <__aeabi_dsub+0x2fe>
    2a84:	e0c5      	b.n	2c12 <__aeabi_dsub+0x48a>
    2a86:	1869      	adds	r1, r5, r1
    2a88:	42a9      	cmp	r1, r5
    2a8a:	4192      	sbcs	r2, r2
    2a8c:	183f      	adds	r7, r7, r0
    2a8e:	4252      	negs	r2, r2
    2a90:	19d2      	adds	r2, r2, r7
    2a92:	0849      	lsrs	r1, r1, #1
    2a94:	07d5      	lsls	r5, r2, #31
    2a96:	430d      	orrs	r5, r1
    2a98:	0857      	lsrs	r7, r2, #1
    2a9a:	4664      	mov	r4, ip
    2a9c:	e6a0      	b.n	27e0 <__aeabi_dsub+0x58>
    2a9e:	4b13      	ldr	r3, [pc, #76]	; (2aec <__aeabi_dsub+0x364>)
    2aa0:	429c      	cmp	r4, r3
    2aa2:	d000      	beq.n	2aa6 <__aeabi_dsub+0x31e>
    2aa4:	e6d9      	b.n	285a <__aeabi_dsub+0xd2>
    2aa6:	e69b      	b.n	27e0 <__aeabi_dsub+0x58>
    2aa8:	0011      	movs	r1, r2
    2aaa:	3c1f      	subs	r4, #31
    2aac:	40e1      	lsrs	r1, r4
    2aae:	000c      	movs	r4, r1
    2ab0:	2b20      	cmp	r3, #32
    2ab2:	d100      	bne.n	2ab6 <__aeabi_dsub+0x32e>
    2ab4:	e080      	b.n	2bb8 <__aeabi_dsub+0x430>
    2ab6:	2140      	movs	r1, #64	; 0x40
    2ab8:	1acb      	subs	r3, r1, r3
    2aba:	409a      	lsls	r2, r3
    2abc:	4315      	orrs	r5, r2
    2abe:	1e6a      	subs	r2, r5, #1
    2ac0:	4195      	sbcs	r5, r2
    2ac2:	2700      	movs	r7, #0
    2ac4:	4325      	orrs	r5, r4
    2ac6:	2400      	movs	r4, #0
    2ac8:	e71f      	b.n	290a <__aeabi_dsub+0x182>
    2aca:	4663      	mov	r3, ip
    2acc:	0002      	movs	r2, r0
    2ace:	3b20      	subs	r3, #32
    2ad0:	40da      	lsrs	r2, r3
    2ad2:	4663      	mov	r3, ip
    2ad4:	2b20      	cmp	r3, #32
    2ad6:	d071      	beq.n	2bbc <__aeabi_dsub+0x434>
    2ad8:	2340      	movs	r3, #64	; 0x40
    2ada:	4666      	mov	r6, ip
    2adc:	1b9b      	subs	r3, r3, r6
    2ade:	4098      	lsls	r0, r3
    2ae0:	4301      	orrs	r1, r0
    2ae2:	1e48      	subs	r0, r1, #1
    2ae4:	4181      	sbcs	r1, r0
    2ae6:	4311      	orrs	r1, r2
    2ae8:	2200      	movs	r2, #0
    2aea:	e6cf      	b.n	288c <__aeabi_dsub+0x104>
    2aec:	000007ff 	.word	0x000007ff
    2af0:	ff7fffff 	.word	0xff7fffff
    2af4:	800fffff 	.word	0x800fffff
    2af8:	2c00      	cmp	r4, #0
    2afa:	d048      	beq.n	2b8e <__aeabi_dsub+0x406>
    2afc:	4cca      	ldr	r4, [pc, #808]	; (2e28 <__aeabi_dsub+0x6a0>)
    2afe:	42a2      	cmp	r2, r4
    2b00:	d100      	bne.n	2b04 <__aeabi_dsub+0x37c>
    2b02:	e0a2      	b.n	2c4a <__aeabi_dsub+0x4c2>
    2b04:	4274      	negs	r4, r6
    2b06:	46a1      	mov	r9, r4
    2b08:	2480      	movs	r4, #128	; 0x80
    2b0a:	0424      	lsls	r4, r4, #16
    2b0c:	4327      	orrs	r7, r4
    2b0e:	464c      	mov	r4, r9
    2b10:	2c38      	cmp	r4, #56	; 0x38
    2b12:	dd00      	ble.n	2b16 <__aeabi_dsub+0x38e>
    2b14:	e0db      	b.n	2cce <__aeabi_dsub+0x546>
    2b16:	2c1f      	cmp	r4, #31
    2b18:	dd00      	ble.n	2b1c <__aeabi_dsub+0x394>
    2b1a:	e144      	b.n	2da6 <__aeabi_dsub+0x61e>
    2b1c:	464e      	mov	r6, r9
    2b1e:	2420      	movs	r4, #32
    2b20:	1ba4      	subs	r4, r4, r6
    2b22:	003e      	movs	r6, r7
    2b24:	40a6      	lsls	r6, r4
    2b26:	46a2      	mov	sl, r4
    2b28:	46b0      	mov	r8, r6
    2b2a:	464c      	mov	r4, r9
    2b2c:	002e      	movs	r6, r5
    2b2e:	40e6      	lsrs	r6, r4
    2b30:	46b4      	mov	ip, r6
    2b32:	4646      	mov	r6, r8
    2b34:	4664      	mov	r4, ip
    2b36:	4326      	orrs	r6, r4
    2b38:	4654      	mov	r4, sl
    2b3a:	40a5      	lsls	r5, r4
    2b3c:	1e6c      	subs	r4, r5, #1
    2b3e:	41a5      	sbcs	r5, r4
    2b40:	0034      	movs	r4, r6
    2b42:	432c      	orrs	r4, r5
    2b44:	464d      	mov	r5, r9
    2b46:	40ef      	lsrs	r7, r5
    2b48:	1b0d      	subs	r5, r1, r4
    2b4a:	e028      	b.n	2b9e <__aeabi_dsub+0x416>
    2b4c:	464a      	mov	r2, r9
    2b4e:	4643      	mov	r3, r8
    2b50:	464d      	mov	r5, r9
    2b52:	431a      	orrs	r2, r3
    2b54:	d000      	beq.n	2b58 <__aeabi_dsub+0x3d0>
    2b56:	e6a5      	b.n	28a4 <__aeabi_dsub+0x11c>
    2b58:	2300      	movs	r3, #0
    2b5a:	2400      	movs	r4, #0
    2b5c:	2500      	movs	r5, #0
    2b5e:	e6de      	b.n	291e <__aeabi_dsub+0x196>
    2b60:	2a1f      	cmp	r2, #31
    2b62:	dc5a      	bgt.n	2c1a <__aeabi_dsub+0x492>
    2b64:	4666      	mov	r6, ip
    2b66:	2220      	movs	r2, #32
    2b68:	1b92      	subs	r2, r2, r6
    2b6a:	0006      	movs	r6, r0
    2b6c:	4096      	lsls	r6, r2
    2b6e:	4691      	mov	r9, r2
    2b70:	46b0      	mov	r8, r6
    2b72:	4662      	mov	r2, ip
    2b74:	000e      	movs	r6, r1
    2b76:	40d6      	lsrs	r6, r2
    2b78:	4642      	mov	r2, r8
    2b7a:	4316      	orrs	r6, r2
    2b7c:	464a      	mov	r2, r9
    2b7e:	4091      	lsls	r1, r2
    2b80:	1e4a      	subs	r2, r1, #1
    2b82:	4191      	sbcs	r1, r2
    2b84:	0002      	movs	r2, r0
    2b86:	4660      	mov	r0, ip
    2b88:	4331      	orrs	r1, r6
    2b8a:	40c2      	lsrs	r2, r0
    2b8c:	e6e4      	b.n	2958 <__aeabi_dsub+0x1d0>
    2b8e:	003c      	movs	r4, r7
    2b90:	432c      	orrs	r4, r5
    2b92:	d05a      	beq.n	2c4a <__aeabi_dsub+0x4c2>
    2b94:	43f4      	mvns	r4, r6
    2b96:	46a1      	mov	r9, r4
    2b98:	2c00      	cmp	r4, #0
    2b9a:	d152      	bne.n	2c42 <__aeabi_dsub+0x4ba>
    2b9c:	1b4d      	subs	r5, r1, r5
    2b9e:	42a9      	cmp	r1, r5
    2ba0:	4189      	sbcs	r1, r1
    2ba2:	1bc7      	subs	r7, r0, r7
    2ba4:	4249      	negs	r1, r1
    2ba6:	1a7f      	subs	r7, r7, r1
    2ba8:	0014      	movs	r4, r2
    2baa:	469a      	mov	sl, r3
    2bac:	e675      	b.n	289a <__aeabi_dsub+0x112>
    2bae:	4a9e      	ldr	r2, [pc, #632]	; (2e28 <__aeabi_dsub+0x6a0>)
    2bb0:	4294      	cmp	r4, r2
    2bb2:	d000      	beq.n	2bb6 <__aeabi_dsub+0x42e>
    2bb4:	e6c7      	b.n	2946 <__aeabi_dsub+0x1be>
    2bb6:	e613      	b.n	27e0 <__aeabi_dsub+0x58>
    2bb8:	2200      	movs	r2, #0
    2bba:	e77f      	b.n	2abc <__aeabi_dsub+0x334>
    2bbc:	2000      	movs	r0, #0
    2bbe:	e78f      	b.n	2ae0 <__aeabi_dsub+0x358>
    2bc0:	2c00      	cmp	r4, #0
    2bc2:	d000      	beq.n	2bc6 <__aeabi_dsub+0x43e>
    2bc4:	e0c8      	b.n	2d58 <__aeabi_dsub+0x5d0>
    2bc6:	003b      	movs	r3, r7
    2bc8:	432b      	orrs	r3, r5
    2bca:	d100      	bne.n	2bce <__aeabi_dsub+0x446>
    2bcc:	e10f      	b.n	2dee <__aeabi_dsub+0x666>
    2bce:	0003      	movs	r3, r0
    2bd0:	430b      	orrs	r3, r1
    2bd2:	d100      	bne.n	2bd6 <__aeabi_dsub+0x44e>
    2bd4:	e604      	b.n	27e0 <__aeabi_dsub+0x58>
    2bd6:	1869      	adds	r1, r5, r1
    2bd8:	42a9      	cmp	r1, r5
    2bda:	419b      	sbcs	r3, r3
    2bdc:	183f      	adds	r7, r7, r0
    2bde:	425b      	negs	r3, r3
    2be0:	19df      	adds	r7, r3, r7
    2be2:	023b      	lsls	r3, r7, #8
    2be4:	d400      	bmi.n	2be8 <__aeabi_dsub+0x460>
    2be6:	e11a      	b.n	2e1e <__aeabi_dsub+0x696>
    2be8:	4b90      	ldr	r3, [pc, #576]	; (2e2c <__aeabi_dsub+0x6a4>)
    2bea:	000d      	movs	r5, r1
    2bec:	401f      	ands	r7, r3
    2bee:	4664      	mov	r4, ip
    2bf0:	e5f6      	b.n	27e0 <__aeabi_dsub+0x58>
    2bf2:	469a      	mov	sl, r3
    2bf4:	e689      	b.n	290a <__aeabi_dsub+0x182>
    2bf6:	003a      	movs	r2, r7
    2bf8:	432a      	orrs	r2, r5
    2bfa:	2c00      	cmp	r4, #0
    2bfc:	d15c      	bne.n	2cb8 <__aeabi_dsub+0x530>
    2bfe:	2a00      	cmp	r2, #0
    2c00:	d175      	bne.n	2cee <__aeabi_dsub+0x566>
    2c02:	0002      	movs	r2, r0
    2c04:	430a      	orrs	r2, r1
    2c06:	d100      	bne.n	2c0a <__aeabi_dsub+0x482>
    2c08:	e0ca      	b.n	2da0 <__aeabi_dsub+0x618>
    2c0a:	0007      	movs	r7, r0
    2c0c:	000d      	movs	r5, r1
    2c0e:	469a      	mov	sl, r3
    2c10:	e5e6      	b.n	27e0 <__aeabi_dsub+0x58>
    2c12:	4664      	mov	r4, ip
    2c14:	2200      	movs	r2, #0
    2c16:	2500      	movs	r5, #0
    2c18:	e681      	b.n	291e <__aeabi_dsub+0x196>
    2c1a:	4662      	mov	r2, ip
    2c1c:	0006      	movs	r6, r0
    2c1e:	3a20      	subs	r2, #32
    2c20:	40d6      	lsrs	r6, r2
    2c22:	4662      	mov	r2, ip
    2c24:	46b0      	mov	r8, r6
    2c26:	2a20      	cmp	r2, #32
    2c28:	d100      	bne.n	2c2c <__aeabi_dsub+0x4a4>
    2c2a:	e0b7      	b.n	2d9c <__aeabi_dsub+0x614>
    2c2c:	2240      	movs	r2, #64	; 0x40
    2c2e:	4666      	mov	r6, ip
    2c30:	1b92      	subs	r2, r2, r6
    2c32:	4090      	lsls	r0, r2
    2c34:	4301      	orrs	r1, r0
    2c36:	4642      	mov	r2, r8
    2c38:	1e48      	subs	r0, r1, #1
    2c3a:	4181      	sbcs	r1, r0
    2c3c:	4311      	orrs	r1, r2
    2c3e:	2200      	movs	r2, #0
    2c40:	e68a      	b.n	2958 <__aeabi_dsub+0x1d0>
    2c42:	4c79      	ldr	r4, [pc, #484]	; (2e28 <__aeabi_dsub+0x6a0>)
    2c44:	42a2      	cmp	r2, r4
    2c46:	d000      	beq.n	2c4a <__aeabi_dsub+0x4c2>
    2c48:	e761      	b.n	2b0e <__aeabi_dsub+0x386>
    2c4a:	0007      	movs	r7, r0
    2c4c:	000d      	movs	r5, r1
    2c4e:	0014      	movs	r4, r2
    2c50:	469a      	mov	sl, r3
    2c52:	e5c5      	b.n	27e0 <__aeabi_dsub+0x58>
    2c54:	2c00      	cmp	r4, #0
    2c56:	d141      	bne.n	2cdc <__aeabi_dsub+0x554>
    2c58:	003c      	movs	r4, r7
    2c5a:	432c      	orrs	r4, r5
    2c5c:	d078      	beq.n	2d50 <__aeabi_dsub+0x5c8>
    2c5e:	43f4      	mvns	r4, r6
    2c60:	46a1      	mov	r9, r4
    2c62:	2c00      	cmp	r4, #0
    2c64:	d020      	beq.n	2ca8 <__aeabi_dsub+0x520>
    2c66:	4c70      	ldr	r4, [pc, #448]	; (2e28 <__aeabi_dsub+0x6a0>)
    2c68:	42a2      	cmp	r2, r4
    2c6a:	d071      	beq.n	2d50 <__aeabi_dsub+0x5c8>
    2c6c:	464c      	mov	r4, r9
    2c6e:	2c38      	cmp	r4, #56	; 0x38
    2c70:	dd00      	ble.n	2c74 <__aeabi_dsub+0x4ec>
    2c72:	e0b2      	b.n	2dda <__aeabi_dsub+0x652>
    2c74:	2c1f      	cmp	r4, #31
    2c76:	dd00      	ble.n	2c7a <__aeabi_dsub+0x4f2>
    2c78:	e0bc      	b.n	2df4 <__aeabi_dsub+0x66c>
    2c7a:	2620      	movs	r6, #32
    2c7c:	1b34      	subs	r4, r6, r4
    2c7e:	46a2      	mov	sl, r4
    2c80:	003c      	movs	r4, r7
    2c82:	4656      	mov	r6, sl
    2c84:	40b4      	lsls	r4, r6
    2c86:	464e      	mov	r6, r9
    2c88:	46a0      	mov	r8, r4
    2c8a:	002c      	movs	r4, r5
    2c8c:	40f4      	lsrs	r4, r6
    2c8e:	46a4      	mov	ip, r4
    2c90:	4644      	mov	r4, r8
    2c92:	4666      	mov	r6, ip
    2c94:	4334      	orrs	r4, r6
    2c96:	46a4      	mov	ip, r4
    2c98:	4654      	mov	r4, sl
    2c9a:	40a5      	lsls	r5, r4
    2c9c:	4664      	mov	r4, ip
    2c9e:	1e6e      	subs	r6, r5, #1
    2ca0:	41b5      	sbcs	r5, r6
    2ca2:	4325      	orrs	r5, r4
    2ca4:	464c      	mov	r4, r9
    2ca6:	40e7      	lsrs	r7, r4
    2ca8:	186d      	adds	r5, r5, r1
    2caa:	428d      	cmp	r5, r1
    2cac:	4189      	sbcs	r1, r1
    2cae:	183f      	adds	r7, r7, r0
    2cb0:	4249      	negs	r1, r1
    2cb2:	19cf      	adds	r7, r1, r7
    2cb4:	0014      	movs	r4, r2
    2cb6:	e656      	b.n	2966 <__aeabi_dsub+0x1de>
    2cb8:	2a00      	cmp	r2, #0
    2cba:	d12f      	bne.n	2d1c <__aeabi_dsub+0x594>
    2cbc:	0002      	movs	r2, r0
    2cbe:	430a      	orrs	r2, r1
    2cc0:	d100      	bne.n	2cc4 <__aeabi_dsub+0x53c>
    2cc2:	e084      	b.n	2dce <__aeabi_dsub+0x646>
    2cc4:	0007      	movs	r7, r0
    2cc6:	000d      	movs	r5, r1
    2cc8:	469a      	mov	sl, r3
    2cca:	4c57      	ldr	r4, [pc, #348]	; (2e28 <__aeabi_dsub+0x6a0>)
    2ccc:	e588      	b.n	27e0 <__aeabi_dsub+0x58>
    2cce:	433d      	orrs	r5, r7
    2cd0:	1e6f      	subs	r7, r5, #1
    2cd2:	41bd      	sbcs	r5, r7
    2cd4:	b2ec      	uxtb	r4, r5
    2cd6:	2700      	movs	r7, #0
    2cd8:	1b0d      	subs	r5, r1, r4
    2cda:	e760      	b.n	2b9e <__aeabi_dsub+0x416>
    2cdc:	4c52      	ldr	r4, [pc, #328]	; (2e28 <__aeabi_dsub+0x6a0>)
    2cde:	42a2      	cmp	r2, r4
    2ce0:	d036      	beq.n	2d50 <__aeabi_dsub+0x5c8>
    2ce2:	4274      	negs	r4, r6
    2ce4:	2680      	movs	r6, #128	; 0x80
    2ce6:	0436      	lsls	r6, r6, #16
    2ce8:	46a1      	mov	r9, r4
    2cea:	4337      	orrs	r7, r6
    2cec:	e7be      	b.n	2c6c <__aeabi_dsub+0x4e4>
    2cee:	0002      	movs	r2, r0
    2cf0:	430a      	orrs	r2, r1
    2cf2:	d100      	bne.n	2cf6 <__aeabi_dsub+0x56e>
    2cf4:	e574      	b.n	27e0 <__aeabi_dsub+0x58>
    2cf6:	1a6a      	subs	r2, r5, r1
    2cf8:	4690      	mov	r8, r2
    2cfa:	4545      	cmp	r5, r8
    2cfc:	41b6      	sbcs	r6, r6
    2cfe:	1a3a      	subs	r2, r7, r0
    2d00:	4276      	negs	r6, r6
    2d02:	1b92      	subs	r2, r2, r6
    2d04:	4694      	mov	ip, r2
    2d06:	0212      	lsls	r2, r2, #8
    2d08:	d400      	bmi.n	2d0c <__aeabi_dsub+0x584>
    2d0a:	e5f7      	b.n	28fc <__aeabi_dsub+0x174>
    2d0c:	1b4d      	subs	r5, r1, r5
    2d0e:	42a9      	cmp	r1, r5
    2d10:	4189      	sbcs	r1, r1
    2d12:	1bc7      	subs	r7, r0, r7
    2d14:	4249      	negs	r1, r1
    2d16:	1a7f      	subs	r7, r7, r1
    2d18:	469a      	mov	sl, r3
    2d1a:	e561      	b.n	27e0 <__aeabi_dsub+0x58>
    2d1c:	0002      	movs	r2, r0
    2d1e:	430a      	orrs	r2, r1
    2d20:	d03a      	beq.n	2d98 <__aeabi_dsub+0x610>
    2d22:	08ed      	lsrs	r5, r5, #3
    2d24:	077c      	lsls	r4, r7, #29
    2d26:	432c      	orrs	r4, r5
    2d28:	2580      	movs	r5, #128	; 0x80
    2d2a:	08fa      	lsrs	r2, r7, #3
    2d2c:	032d      	lsls	r5, r5, #12
    2d2e:	422a      	tst	r2, r5
    2d30:	d008      	beq.n	2d44 <__aeabi_dsub+0x5bc>
    2d32:	08c7      	lsrs	r7, r0, #3
    2d34:	422f      	tst	r7, r5
    2d36:	d105      	bne.n	2d44 <__aeabi_dsub+0x5bc>
    2d38:	0745      	lsls	r5, r0, #29
    2d3a:	002c      	movs	r4, r5
    2d3c:	003a      	movs	r2, r7
    2d3e:	469a      	mov	sl, r3
    2d40:	08c9      	lsrs	r1, r1, #3
    2d42:	430c      	orrs	r4, r1
    2d44:	0f67      	lsrs	r7, r4, #29
    2d46:	00d2      	lsls	r2, r2, #3
    2d48:	00e5      	lsls	r5, r4, #3
    2d4a:	4317      	orrs	r7, r2
    2d4c:	4c36      	ldr	r4, [pc, #216]	; (2e28 <__aeabi_dsub+0x6a0>)
    2d4e:	e547      	b.n	27e0 <__aeabi_dsub+0x58>
    2d50:	0007      	movs	r7, r0
    2d52:	000d      	movs	r5, r1
    2d54:	0014      	movs	r4, r2
    2d56:	e543      	b.n	27e0 <__aeabi_dsub+0x58>
    2d58:	003a      	movs	r2, r7
    2d5a:	432a      	orrs	r2, r5
    2d5c:	d043      	beq.n	2de6 <__aeabi_dsub+0x65e>
    2d5e:	0002      	movs	r2, r0
    2d60:	430a      	orrs	r2, r1
    2d62:	d019      	beq.n	2d98 <__aeabi_dsub+0x610>
    2d64:	08ed      	lsrs	r5, r5, #3
    2d66:	077c      	lsls	r4, r7, #29
    2d68:	432c      	orrs	r4, r5
    2d6a:	2580      	movs	r5, #128	; 0x80
    2d6c:	08fa      	lsrs	r2, r7, #3
    2d6e:	032d      	lsls	r5, r5, #12
    2d70:	422a      	tst	r2, r5
    2d72:	d007      	beq.n	2d84 <__aeabi_dsub+0x5fc>
    2d74:	08c6      	lsrs	r6, r0, #3
    2d76:	422e      	tst	r6, r5
    2d78:	d104      	bne.n	2d84 <__aeabi_dsub+0x5fc>
    2d7a:	0747      	lsls	r7, r0, #29
    2d7c:	003c      	movs	r4, r7
    2d7e:	0032      	movs	r2, r6
    2d80:	08c9      	lsrs	r1, r1, #3
    2d82:	430c      	orrs	r4, r1
    2d84:	00d7      	lsls	r7, r2, #3
    2d86:	0f62      	lsrs	r2, r4, #29
    2d88:	00e5      	lsls	r5, r4, #3
    2d8a:	4317      	orrs	r7, r2
    2d8c:	469a      	mov	sl, r3
    2d8e:	4c26      	ldr	r4, [pc, #152]	; (2e28 <__aeabi_dsub+0x6a0>)
    2d90:	e526      	b.n	27e0 <__aeabi_dsub+0x58>
    2d92:	2200      	movs	r2, #0
    2d94:	2500      	movs	r5, #0
    2d96:	e544      	b.n	2822 <__aeabi_dsub+0x9a>
    2d98:	4c23      	ldr	r4, [pc, #140]	; (2e28 <__aeabi_dsub+0x6a0>)
    2d9a:	e521      	b.n	27e0 <__aeabi_dsub+0x58>
    2d9c:	2000      	movs	r0, #0
    2d9e:	e749      	b.n	2c34 <__aeabi_dsub+0x4ac>
    2da0:	2300      	movs	r3, #0
    2da2:	2500      	movs	r5, #0
    2da4:	e5bb      	b.n	291e <__aeabi_dsub+0x196>
    2da6:	464c      	mov	r4, r9
    2da8:	003e      	movs	r6, r7
    2daa:	3c20      	subs	r4, #32
    2dac:	40e6      	lsrs	r6, r4
    2dae:	464c      	mov	r4, r9
    2db0:	46b4      	mov	ip, r6
    2db2:	2c20      	cmp	r4, #32
    2db4:	d031      	beq.n	2e1a <__aeabi_dsub+0x692>
    2db6:	2440      	movs	r4, #64	; 0x40
    2db8:	464e      	mov	r6, r9
    2dba:	1ba6      	subs	r6, r4, r6
    2dbc:	40b7      	lsls	r7, r6
    2dbe:	433d      	orrs	r5, r7
    2dc0:	1e6c      	subs	r4, r5, #1
    2dc2:	41a5      	sbcs	r5, r4
    2dc4:	4664      	mov	r4, ip
    2dc6:	432c      	orrs	r4, r5
    2dc8:	2700      	movs	r7, #0
    2dca:	1b0d      	subs	r5, r1, r4
    2dcc:	e6e7      	b.n	2b9e <__aeabi_dsub+0x416>
    2dce:	2280      	movs	r2, #128	; 0x80
    2dd0:	2300      	movs	r3, #0
    2dd2:	0312      	lsls	r2, r2, #12
    2dd4:	4c14      	ldr	r4, [pc, #80]	; (2e28 <__aeabi_dsub+0x6a0>)
    2dd6:	2500      	movs	r5, #0
    2dd8:	e5a1      	b.n	291e <__aeabi_dsub+0x196>
    2dda:	433d      	orrs	r5, r7
    2ddc:	1e6f      	subs	r7, r5, #1
    2dde:	41bd      	sbcs	r5, r7
    2de0:	2700      	movs	r7, #0
    2de2:	b2ed      	uxtb	r5, r5
    2de4:	e760      	b.n	2ca8 <__aeabi_dsub+0x520>
    2de6:	0007      	movs	r7, r0
    2de8:	000d      	movs	r5, r1
    2dea:	4c0f      	ldr	r4, [pc, #60]	; (2e28 <__aeabi_dsub+0x6a0>)
    2dec:	e4f8      	b.n	27e0 <__aeabi_dsub+0x58>
    2dee:	0007      	movs	r7, r0
    2df0:	000d      	movs	r5, r1
    2df2:	e4f5      	b.n	27e0 <__aeabi_dsub+0x58>
    2df4:	464e      	mov	r6, r9
    2df6:	003c      	movs	r4, r7
    2df8:	3e20      	subs	r6, #32
    2dfa:	40f4      	lsrs	r4, r6
    2dfc:	46a0      	mov	r8, r4
    2dfe:	464c      	mov	r4, r9
    2e00:	2c20      	cmp	r4, #32
    2e02:	d00e      	beq.n	2e22 <__aeabi_dsub+0x69a>
    2e04:	2440      	movs	r4, #64	; 0x40
    2e06:	464e      	mov	r6, r9
    2e08:	1ba4      	subs	r4, r4, r6
    2e0a:	40a7      	lsls	r7, r4
    2e0c:	433d      	orrs	r5, r7
    2e0e:	1e6f      	subs	r7, r5, #1
    2e10:	41bd      	sbcs	r5, r7
    2e12:	4644      	mov	r4, r8
    2e14:	2700      	movs	r7, #0
    2e16:	4325      	orrs	r5, r4
    2e18:	e746      	b.n	2ca8 <__aeabi_dsub+0x520>
    2e1a:	2700      	movs	r7, #0
    2e1c:	e7cf      	b.n	2dbe <__aeabi_dsub+0x636>
    2e1e:	000d      	movs	r5, r1
    2e20:	e573      	b.n	290a <__aeabi_dsub+0x182>
    2e22:	2700      	movs	r7, #0
    2e24:	e7f2      	b.n	2e0c <__aeabi_dsub+0x684>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	000007ff 	.word	0x000007ff
    2e2c:	ff7fffff 	.word	0xff7fffff

00002e30 <__aeabi_d2iz>:
    2e30:	030b      	lsls	r3, r1, #12
    2e32:	b530      	push	{r4, r5, lr}
    2e34:	4d13      	ldr	r5, [pc, #76]	; (2e84 <__aeabi_d2iz+0x54>)
    2e36:	0b1a      	lsrs	r2, r3, #12
    2e38:	004b      	lsls	r3, r1, #1
    2e3a:	0d5b      	lsrs	r3, r3, #21
    2e3c:	0fc9      	lsrs	r1, r1, #31
    2e3e:	2400      	movs	r4, #0
    2e40:	42ab      	cmp	r3, r5
    2e42:	dd11      	ble.n	2e68 <__aeabi_d2iz+0x38>
    2e44:	4c10      	ldr	r4, [pc, #64]	; (2e88 <__aeabi_d2iz+0x58>)
    2e46:	42a3      	cmp	r3, r4
    2e48:	dc10      	bgt.n	2e6c <__aeabi_d2iz+0x3c>
    2e4a:	2480      	movs	r4, #128	; 0x80
    2e4c:	0364      	lsls	r4, r4, #13
    2e4e:	4322      	orrs	r2, r4
    2e50:	4c0e      	ldr	r4, [pc, #56]	; (2e8c <__aeabi_d2iz+0x5c>)
    2e52:	1ae4      	subs	r4, r4, r3
    2e54:	2c1f      	cmp	r4, #31
    2e56:	dd0c      	ble.n	2e72 <__aeabi_d2iz+0x42>
    2e58:	480d      	ldr	r0, [pc, #52]	; (2e90 <__aeabi_d2iz+0x60>)
    2e5a:	1ac3      	subs	r3, r0, r3
    2e5c:	40da      	lsrs	r2, r3
    2e5e:	0013      	movs	r3, r2
    2e60:	425c      	negs	r4, r3
    2e62:	2900      	cmp	r1, #0
    2e64:	d100      	bne.n	2e68 <__aeabi_d2iz+0x38>
    2e66:	001c      	movs	r4, r3
    2e68:	0020      	movs	r0, r4
    2e6a:	bd30      	pop	{r4, r5, pc}
    2e6c:	4b09      	ldr	r3, [pc, #36]	; (2e94 <__aeabi_d2iz+0x64>)
    2e6e:	18cc      	adds	r4, r1, r3
    2e70:	e7fa      	b.n	2e68 <__aeabi_d2iz+0x38>
    2e72:	40e0      	lsrs	r0, r4
    2e74:	4c08      	ldr	r4, [pc, #32]	; (2e98 <__aeabi_d2iz+0x68>)
    2e76:	46a4      	mov	ip, r4
    2e78:	4463      	add	r3, ip
    2e7a:	409a      	lsls	r2, r3
    2e7c:	0013      	movs	r3, r2
    2e7e:	4303      	orrs	r3, r0
    2e80:	e7ee      	b.n	2e60 <__aeabi_d2iz+0x30>
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	000003fe 	.word	0x000003fe
    2e88:	0000041d 	.word	0x0000041d
    2e8c:	00000433 	.word	0x00000433
    2e90:	00000413 	.word	0x00000413
    2e94:	7fffffff 	.word	0x7fffffff
    2e98:	fffffbed 	.word	0xfffffbed

00002e9c <__aeabi_i2d>:
    2e9c:	b570      	push	{r4, r5, r6, lr}
    2e9e:	2800      	cmp	r0, #0
    2ea0:	d030      	beq.n	2f04 <__aeabi_i2d+0x68>
    2ea2:	17c3      	asrs	r3, r0, #31
    2ea4:	18c4      	adds	r4, r0, r3
    2ea6:	405c      	eors	r4, r3
    2ea8:	0fc5      	lsrs	r5, r0, #31
    2eaa:	0020      	movs	r0, r4
    2eac:	f000 f950 	bl	3150 <__clzsi2>
    2eb0:	4b17      	ldr	r3, [pc, #92]	; (2f10 <__aeabi_i2d+0x74>)
    2eb2:	4a18      	ldr	r2, [pc, #96]	; (2f14 <__aeabi_i2d+0x78>)
    2eb4:	1a1b      	subs	r3, r3, r0
    2eb6:	1ad2      	subs	r2, r2, r3
    2eb8:	2a1f      	cmp	r2, #31
    2eba:	dd18      	ble.n	2eee <__aeabi_i2d+0x52>
    2ebc:	4a16      	ldr	r2, [pc, #88]	; (2f18 <__aeabi_i2d+0x7c>)
    2ebe:	1ad2      	subs	r2, r2, r3
    2ec0:	4094      	lsls	r4, r2
    2ec2:	2200      	movs	r2, #0
    2ec4:	0324      	lsls	r4, r4, #12
    2ec6:	055b      	lsls	r3, r3, #21
    2ec8:	0b24      	lsrs	r4, r4, #12
    2eca:	0d5b      	lsrs	r3, r3, #21
    2ecc:	2100      	movs	r1, #0
    2ece:	0010      	movs	r0, r2
    2ed0:	0324      	lsls	r4, r4, #12
    2ed2:	0d0a      	lsrs	r2, r1, #20
    2ed4:	0512      	lsls	r2, r2, #20
    2ed6:	0b24      	lsrs	r4, r4, #12
    2ed8:	4314      	orrs	r4, r2
    2eda:	4a10      	ldr	r2, [pc, #64]	; (2f1c <__aeabi_i2d+0x80>)
    2edc:	051b      	lsls	r3, r3, #20
    2ede:	4014      	ands	r4, r2
    2ee0:	431c      	orrs	r4, r3
    2ee2:	0064      	lsls	r4, r4, #1
    2ee4:	07ed      	lsls	r5, r5, #31
    2ee6:	0864      	lsrs	r4, r4, #1
    2ee8:	432c      	orrs	r4, r5
    2eea:	0021      	movs	r1, r4
    2eec:	bd70      	pop	{r4, r5, r6, pc}
    2eee:	0021      	movs	r1, r4
    2ef0:	4091      	lsls	r1, r2
    2ef2:	000a      	movs	r2, r1
    2ef4:	210b      	movs	r1, #11
    2ef6:	1a08      	subs	r0, r1, r0
    2ef8:	40c4      	lsrs	r4, r0
    2efa:	055b      	lsls	r3, r3, #21
    2efc:	0324      	lsls	r4, r4, #12
    2efe:	0b24      	lsrs	r4, r4, #12
    2f00:	0d5b      	lsrs	r3, r3, #21
    2f02:	e7e3      	b.n	2ecc <__aeabi_i2d+0x30>
    2f04:	2500      	movs	r5, #0
    2f06:	2300      	movs	r3, #0
    2f08:	2400      	movs	r4, #0
    2f0a:	2200      	movs	r2, #0
    2f0c:	e7de      	b.n	2ecc <__aeabi_i2d+0x30>
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	0000041e 	.word	0x0000041e
    2f14:	00000433 	.word	0x00000433
    2f18:	00000413 	.word	0x00000413
    2f1c:	800fffff 	.word	0x800fffff

00002f20 <__aeabi_ui2d>:
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	1e05      	subs	r5, r0, #0
    2f24:	d028      	beq.n	2f78 <__aeabi_ui2d+0x58>
    2f26:	f000 f913 	bl	3150 <__clzsi2>
    2f2a:	4b15      	ldr	r3, [pc, #84]	; (2f80 <__aeabi_ui2d+0x60>)
    2f2c:	4a15      	ldr	r2, [pc, #84]	; (2f84 <__aeabi_ui2d+0x64>)
    2f2e:	1a1b      	subs	r3, r3, r0
    2f30:	1ad2      	subs	r2, r2, r3
    2f32:	2a1f      	cmp	r2, #31
    2f34:	dd16      	ble.n	2f64 <__aeabi_ui2d+0x44>
    2f36:	002c      	movs	r4, r5
    2f38:	4a13      	ldr	r2, [pc, #76]	; (2f88 <__aeabi_ui2d+0x68>)
    2f3a:	2500      	movs	r5, #0
    2f3c:	1ad2      	subs	r2, r2, r3
    2f3e:	4094      	lsls	r4, r2
    2f40:	055a      	lsls	r2, r3, #21
    2f42:	0324      	lsls	r4, r4, #12
    2f44:	0b24      	lsrs	r4, r4, #12
    2f46:	0d52      	lsrs	r2, r2, #21
    2f48:	2100      	movs	r1, #0
    2f4a:	0324      	lsls	r4, r4, #12
    2f4c:	0d0b      	lsrs	r3, r1, #20
    2f4e:	0b24      	lsrs	r4, r4, #12
    2f50:	051b      	lsls	r3, r3, #20
    2f52:	4323      	orrs	r3, r4
    2f54:	4c0d      	ldr	r4, [pc, #52]	; (2f8c <__aeabi_ui2d+0x6c>)
    2f56:	0512      	lsls	r2, r2, #20
    2f58:	4023      	ands	r3, r4
    2f5a:	4313      	orrs	r3, r2
    2f5c:	005b      	lsls	r3, r3, #1
    2f5e:	0028      	movs	r0, r5
    2f60:	0859      	lsrs	r1, r3, #1
    2f62:	bd70      	pop	{r4, r5, r6, pc}
    2f64:	210b      	movs	r1, #11
    2f66:	002c      	movs	r4, r5
    2f68:	1a08      	subs	r0, r1, r0
    2f6a:	40c4      	lsrs	r4, r0
    2f6c:	4095      	lsls	r5, r2
    2f6e:	0324      	lsls	r4, r4, #12
    2f70:	055a      	lsls	r2, r3, #21
    2f72:	0b24      	lsrs	r4, r4, #12
    2f74:	0d52      	lsrs	r2, r2, #21
    2f76:	e7e7      	b.n	2f48 <__aeabi_ui2d+0x28>
    2f78:	2200      	movs	r2, #0
    2f7a:	2400      	movs	r4, #0
    2f7c:	e7e4      	b.n	2f48 <__aeabi_ui2d+0x28>
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	0000041e 	.word	0x0000041e
    2f84:	00000433 	.word	0x00000433
    2f88:	00000413 	.word	0x00000413
    2f8c:	800fffff 	.word	0x800fffff

00002f90 <__aeabi_f2d>:
    2f90:	0042      	lsls	r2, r0, #1
    2f92:	0e12      	lsrs	r2, r2, #24
    2f94:	1c51      	adds	r1, r2, #1
    2f96:	0243      	lsls	r3, r0, #9
    2f98:	b2c9      	uxtb	r1, r1
    2f9a:	b570      	push	{r4, r5, r6, lr}
    2f9c:	0a5d      	lsrs	r5, r3, #9
    2f9e:	0fc4      	lsrs	r4, r0, #31
    2fa0:	2901      	cmp	r1, #1
    2fa2:	dd15      	ble.n	2fd0 <__aeabi_f2d+0x40>
    2fa4:	21e0      	movs	r1, #224	; 0xe0
    2fa6:	0089      	lsls	r1, r1, #2
    2fa8:	468c      	mov	ip, r1
    2faa:	076d      	lsls	r5, r5, #29
    2fac:	0b1b      	lsrs	r3, r3, #12
    2fae:	4462      	add	r2, ip
    2fb0:	2100      	movs	r1, #0
    2fb2:	0028      	movs	r0, r5
    2fb4:	0d0d      	lsrs	r5, r1, #20
    2fb6:	052d      	lsls	r5, r5, #20
    2fb8:	432b      	orrs	r3, r5
    2fba:	4d1c      	ldr	r5, [pc, #112]	; (302c <__aeabi_f2d+0x9c>)
    2fbc:	0552      	lsls	r2, r2, #21
    2fbe:	402b      	ands	r3, r5
    2fc0:	0852      	lsrs	r2, r2, #1
    2fc2:	4313      	orrs	r3, r2
    2fc4:	005b      	lsls	r3, r3, #1
    2fc6:	07e4      	lsls	r4, r4, #31
    2fc8:	085b      	lsrs	r3, r3, #1
    2fca:	4323      	orrs	r3, r4
    2fcc:	0019      	movs	r1, r3
    2fce:	bd70      	pop	{r4, r5, r6, pc}
    2fd0:	2a00      	cmp	r2, #0
    2fd2:	d115      	bne.n	3000 <__aeabi_f2d+0x70>
    2fd4:	2d00      	cmp	r5, #0
    2fd6:	d01f      	beq.n	3018 <__aeabi_f2d+0x88>
    2fd8:	0028      	movs	r0, r5
    2fda:	f000 f8b9 	bl	3150 <__clzsi2>
    2fde:	280a      	cmp	r0, #10
    2fe0:	dc1d      	bgt.n	301e <__aeabi_f2d+0x8e>
    2fe2:	230b      	movs	r3, #11
    2fe4:	002a      	movs	r2, r5
    2fe6:	1a1b      	subs	r3, r3, r0
    2fe8:	40da      	lsrs	r2, r3
    2fea:	0013      	movs	r3, r2
    2fec:	0002      	movs	r2, r0
    2fee:	3215      	adds	r2, #21
    2ff0:	4095      	lsls	r5, r2
    2ff2:	4a0f      	ldr	r2, [pc, #60]	; (3030 <__aeabi_f2d+0xa0>)
    2ff4:	031b      	lsls	r3, r3, #12
    2ff6:	1a12      	subs	r2, r2, r0
    2ff8:	0552      	lsls	r2, r2, #21
    2ffa:	0b1b      	lsrs	r3, r3, #12
    2ffc:	0d52      	lsrs	r2, r2, #21
    2ffe:	e7d7      	b.n	2fb0 <__aeabi_f2d+0x20>
    3000:	2d00      	cmp	r5, #0
    3002:	d006      	beq.n	3012 <__aeabi_f2d+0x82>
    3004:	2280      	movs	r2, #128	; 0x80
    3006:	0b1b      	lsrs	r3, r3, #12
    3008:	0312      	lsls	r2, r2, #12
    300a:	4313      	orrs	r3, r2
    300c:	076d      	lsls	r5, r5, #29
    300e:	4a09      	ldr	r2, [pc, #36]	; (3034 <__aeabi_f2d+0xa4>)
    3010:	e7ce      	b.n	2fb0 <__aeabi_f2d+0x20>
    3012:	4a08      	ldr	r2, [pc, #32]	; (3034 <__aeabi_f2d+0xa4>)
    3014:	2300      	movs	r3, #0
    3016:	e7cb      	b.n	2fb0 <__aeabi_f2d+0x20>
    3018:	2200      	movs	r2, #0
    301a:	2300      	movs	r3, #0
    301c:	e7c8      	b.n	2fb0 <__aeabi_f2d+0x20>
    301e:	0003      	movs	r3, r0
    3020:	3b0b      	subs	r3, #11
    3022:	409d      	lsls	r5, r3
    3024:	002b      	movs	r3, r5
    3026:	2500      	movs	r5, #0
    3028:	e7e3      	b.n	2ff2 <__aeabi_f2d+0x62>
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	800fffff 	.word	0x800fffff
    3030:	00000389 	.word	0x00000389
    3034:	000007ff 	.word	0x000007ff

00003038 <__aeabi_d2f>:
    3038:	004b      	lsls	r3, r1, #1
    303a:	b570      	push	{r4, r5, r6, lr}
    303c:	0d5e      	lsrs	r6, r3, #21
    303e:	030c      	lsls	r4, r1, #12
    3040:	1c75      	adds	r5, r6, #1
    3042:	0a64      	lsrs	r4, r4, #9
    3044:	0f42      	lsrs	r2, r0, #29
    3046:	056d      	lsls	r5, r5, #21
    3048:	4322      	orrs	r2, r4
    304a:	0fc9      	lsrs	r1, r1, #31
    304c:	00c4      	lsls	r4, r0, #3
    304e:	0d6d      	lsrs	r5, r5, #21
    3050:	2d01      	cmp	r5, #1
    3052:	dd2a      	ble.n	30aa <__aeabi_d2f+0x72>
    3054:	4b3b      	ldr	r3, [pc, #236]	; (3144 <__aeabi_d2f+0x10c>)
    3056:	18f3      	adds	r3, r6, r3
    3058:	2bfe      	cmp	r3, #254	; 0xfe
    305a:	dc1a      	bgt.n	3092 <__aeabi_d2f+0x5a>
    305c:	2b00      	cmp	r3, #0
    305e:	dd42      	ble.n	30e6 <__aeabi_d2f+0xae>
    3060:	0180      	lsls	r0, r0, #6
    3062:	1e45      	subs	r5, r0, #1
    3064:	41a8      	sbcs	r0, r5
    3066:	00d2      	lsls	r2, r2, #3
    3068:	4310      	orrs	r0, r2
    306a:	0f62      	lsrs	r2, r4, #29
    306c:	4302      	orrs	r2, r0
    306e:	0750      	lsls	r0, r2, #29
    3070:	d004      	beq.n	307c <__aeabi_d2f+0x44>
    3072:	200f      	movs	r0, #15
    3074:	4010      	ands	r0, r2
    3076:	2804      	cmp	r0, #4
    3078:	d000      	beq.n	307c <__aeabi_d2f+0x44>
    307a:	3204      	adds	r2, #4
    307c:	2080      	movs	r0, #128	; 0x80
    307e:	04c0      	lsls	r0, r0, #19
    3080:	4010      	ands	r0, r2
    3082:	d021      	beq.n	30c8 <__aeabi_d2f+0x90>
    3084:	3301      	adds	r3, #1
    3086:	2bff      	cmp	r3, #255	; 0xff
    3088:	d003      	beq.n	3092 <__aeabi_d2f+0x5a>
    308a:	0192      	lsls	r2, r2, #6
    308c:	0a52      	lsrs	r2, r2, #9
    308e:	b2db      	uxtb	r3, r3
    3090:	e001      	b.n	3096 <__aeabi_d2f+0x5e>
    3092:	23ff      	movs	r3, #255	; 0xff
    3094:	2200      	movs	r2, #0
    3096:	0252      	lsls	r2, r2, #9
    3098:	0a52      	lsrs	r2, r2, #9
    309a:	05db      	lsls	r3, r3, #23
    309c:	4313      	orrs	r3, r2
    309e:	005b      	lsls	r3, r3, #1
    30a0:	07c9      	lsls	r1, r1, #31
    30a2:	085b      	lsrs	r3, r3, #1
    30a4:	430b      	orrs	r3, r1
    30a6:	0018      	movs	r0, r3
    30a8:	bd70      	pop	{r4, r5, r6, pc}
    30aa:	2e00      	cmp	r6, #0
    30ac:	d007      	beq.n	30be <__aeabi_d2f+0x86>
    30ae:	4314      	orrs	r4, r2
    30b0:	d0ef      	beq.n	3092 <__aeabi_d2f+0x5a>
    30b2:	2080      	movs	r0, #128	; 0x80
    30b4:	00d2      	lsls	r2, r2, #3
    30b6:	0480      	lsls	r0, r0, #18
    30b8:	4302      	orrs	r2, r0
    30ba:	23ff      	movs	r3, #255	; 0xff
    30bc:	e7d7      	b.n	306e <__aeabi_d2f+0x36>
    30be:	4322      	orrs	r2, r4
    30c0:	2300      	movs	r3, #0
    30c2:	2a00      	cmp	r2, #0
    30c4:	d003      	beq.n	30ce <__aeabi_d2f+0x96>
    30c6:	2205      	movs	r2, #5
    30c8:	08d2      	lsrs	r2, r2, #3
    30ca:	2bff      	cmp	r3, #255	; 0xff
    30cc:	d003      	beq.n	30d6 <__aeabi_d2f+0x9e>
    30ce:	0252      	lsls	r2, r2, #9
    30d0:	0a52      	lsrs	r2, r2, #9
    30d2:	b2db      	uxtb	r3, r3
    30d4:	e7df      	b.n	3096 <__aeabi_d2f+0x5e>
    30d6:	2a00      	cmp	r2, #0
    30d8:	d032      	beq.n	3140 <__aeabi_d2f+0x108>
    30da:	2080      	movs	r0, #128	; 0x80
    30dc:	03c0      	lsls	r0, r0, #15
    30de:	4302      	orrs	r2, r0
    30e0:	0252      	lsls	r2, r2, #9
    30e2:	0a52      	lsrs	r2, r2, #9
    30e4:	e7d7      	b.n	3096 <__aeabi_d2f+0x5e>
    30e6:	0018      	movs	r0, r3
    30e8:	3017      	adds	r0, #23
    30ea:	db14      	blt.n	3116 <__aeabi_d2f+0xde>
    30ec:	2080      	movs	r0, #128	; 0x80
    30ee:	0400      	lsls	r0, r0, #16
    30f0:	4302      	orrs	r2, r0
    30f2:	201e      	movs	r0, #30
    30f4:	1ac0      	subs	r0, r0, r3
    30f6:	281f      	cmp	r0, #31
    30f8:	dc0f      	bgt.n	311a <__aeabi_d2f+0xe2>
    30fa:	0025      	movs	r5, r4
    30fc:	4b12      	ldr	r3, [pc, #72]	; (3148 <__aeabi_d2f+0x110>)
    30fe:	18f3      	adds	r3, r6, r3
    3100:	409d      	lsls	r5, r3
    3102:	1e6e      	subs	r6, r5, #1
    3104:	41b5      	sbcs	r5, r6
    3106:	409a      	lsls	r2, r3
    3108:	002b      	movs	r3, r5
    310a:	4313      	orrs	r3, r2
    310c:	0022      	movs	r2, r4
    310e:	40c2      	lsrs	r2, r0
    3110:	431a      	orrs	r2, r3
    3112:	2300      	movs	r3, #0
    3114:	e7ab      	b.n	306e <__aeabi_d2f+0x36>
    3116:	2300      	movs	r3, #0
    3118:	e7d5      	b.n	30c6 <__aeabi_d2f+0x8e>
    311a:	2502      	movs	r5, #2
    311c:	426d      	negs	r5, r5
    311e:	1aeb      	subs	r3, r5, r3
    3120:	0015      	movs	r5, r2
    3122:	40dd      	lsrs	r5, r3
    3124:	2820      	cmp	r0, #32
    3126:	d009      	beq.n	313c <__aeabi_d2f+0x104>
    3128:	4b08      	ldr	r3, [pc, #32]	; (314c <__aeabi_d2f+0x114>)
    312a:	18f3      	adds	r3, r6, r3
    312c:	409a      	lsls	r2, r3
    312e:	4314      	orrs	r4, r2
    3130:	1e62      	subs	r2, r4, #1
    3132:	4194      	sbcs	r4, r2
    3134:	0022      	movs	r2, r4
    3136:	2300      	movs	r3, #0
    3138:	432a      	orrs	r2, r5
    313a:	e798      	b.n	306e <__aeabi_d2f+0x36>
    313c:	2200      	movs	r2, #0
    313e:	e7f6      	b.n	312e <__aeabi_d2f+0xf6>
    3140:	2200      	movs	r2, #0
    3142:	e7a8      	b.n	3096 <__aeabi_d2f+0x5e>
    3144:	fffffc80 	.word	0xfffffc80
    3148:	fffffc82 	.word	0xfffffc82
    314c:	fffffca2 	.word	0xfffffca2

00003150 <__clzsi2>:
    3150:	211c      	movs	r1, #28
    3152:	2301      	movs	r3, #1
    3154:	041b      	lsls	r3, r3, #16
    3156:	4298      	cmp	r0, r3
    3158:	d301      	bcc.n	315e <__clzsi2+0xe>
    315a:	0c00      	lsrs	r0, r0, #16
    315c:	3910      	subs	r1, #16
    315e:	0a1b      	lsrs	r3, r3, #8
    3160:	4298      	cmp	r0, r3
    3162:	d301      	bcc.n	3168 <__clzsi2+0x18>
    3164:	0a00      	lsrs	r0, r0, #8
    3166:	3908      	subs	r1, #8
    3168:	091b      	lsrs	r3, r3, #4
    316a:	4298      	cmp	r0, r3
    316c:	d301      	bcc.n	3172 <__clzsi2+0x22>
    316e:	0900      	lsrs	r0, r0, #4
    3170:	3904      	subs	r1, #4
    3172:	a202      	add	r2, pc, #8	; (adr r2, 317c <__clzsi2+0x2c>)
    3174:	5c10      	ldrb	r0, [r2, r0]
    3176:	1840      	adds	r0, r0, r1
    3178:	4770      	bx	lr
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	02020304 	.word	0x02020304
    3180:	01010101 	.word	0x01010101
	...

0000318c <__libc_init_array>:
    318c:	b570      	push	{r4, r5, r6, lr}
    318e:	4e0d      	ldr	r6, [pc, #52]	; (31c4 <__libc_init_array+0x38>)
    3190:	4d0d      	ldr	r5, [pc, #52]	; (31c8 <__libc_init_array+0x3c>)
    3192:	2400      	movs	r4, #0
    3194:	1bad      	subs	r5, r5, r6
    3196:	10ad      	asrs	r5, r5, #2
    3198:	d005      	beq.n	31a6 <__libc_init_array+0x1a>
    319a:	00a3      	lsls	r3, r4, #2
    319c:	58f3      	ldr	r3, [r6, r3]
    319e:	3401      	adds	r4, #1
    31a0:	4798      	blx	r3
    31a2:	42a5      	cmp	r5, r4
    31a4:	d1f9      	bne.n	319a <__libc_init_array+0xe>
    31a6:	f000 f9cd 	bl	3544 <_init>
    31aa:	4e08      	ldr	r6, [pc, #32]	; (31cc <__libc_init_array+0x40>)
    31ac:	4d08      	ldr	r5, [pc, #32]	; (31d0 <__libc_init_array+0x44>)
    31ae:	2400      	movs	r4, #0
    31b0:	1bad      	subs	r5, r5, r6
    31b2:	10ad      	asrs	r5, r5, #2
    31b4:	d005      	beq.n	31c2 <__libc_init_array+0x36>
    31b6:	00a3      	lsls	r3, r4, #2
    31b8:	58f3      	ldr	r3, [r6, r3]
    31ba:	3401      	adds	r4, #1
    31bc:	4798      	blx	r3
    31be:	42a5      	cmp	r5, r4
    31c0:	d1f9      	bne.n	31b6 <__libc_init_array+0x2a>
    31c2:	bd70      	pop	{r4, r5, r6, pc}
    31c4:	00003550 	.word	0x00003550
    31c8:	00003550 	.word	0x00003550
    31cc:	00003550 	.word	0x00003550
    31d0:	00003558 	.word	0x00003558

000031d4 <memset>:
    31d4:	b570      	push	{r4, r5, r6, lr}
    31d6:	0783      	lsls	r3, r0, #30
    31d8:	d03f      	beq.n	325a <memset+0x86>
    31da:	1e54      	subs	r4, r2, #1
    31dc:	2a00      	cmp	r2, #0
    31de:	d03b      	beq.n	3258 <memset+0x84>
    31e0:	b2ce      	uxtb	r6, r1
    31e2:	0003      	movs	r3, r0
    31e4:	2503      	movs	r5, #3
    31e6:	e003      	b.n	31f0 <memset+0x1c>
    31e8:	1e62      	subs	r2, r4, #1
    31ea:	2c00      	cmp	r4, #0
    31ec:	d034      	beq.n	3258 <memset+0x84>
    31ee:	0014      	movs	r4, r2
    31f0:	3301      	adds	r3, #1
    31f2:	1e5a      	subs	r2, r3, #1
    31f4:	7016      	strb	r6, [r2, #0]
    31f6:	422b      	tst	r3, r5
    31f8:	d1f6      	bne.n	31e8 <memset+0x14>
    31fa:	2c03      	cmp	r4, #3
    31fc:	d924      	bls.n	3248 <memset+0x74>
    31fe:	25ff      	movs	r5, #255	; 0xff
    3200:	400d      	ands	r5, r1
    3202:	022a      	lsls	r2, r5, #8
    3204:	4315      	orrs	r5, r2
    3206:	042a      	lsls	r2, r5, #16
    3208:	4315      	orrs	r5, r2
    320a:	2c0f      	cmp	r4, #15
    320c:	d911      	bls.n	3232 <memset+0x5e>
    320e:	0026      	movs	r6, r4
    3210:	3e10      	subs	r6, #16
    3212:	0936      	lsrs	r6, r6, #4
    3214:	3601      	adds	r6, #1
    3216:	0136      	lsls	r6, r6, #4
    3218:	001a      	movs	r2, r3
    321a:	199b      	adds	r3, r3, r6
    321c:	6015      	str	r5, [r2, #0]
    321e:	6055      	str	r5, [r2, #4]
    3220:	6095      	str	r5, [r2, #8]
    3222:	60d5      	str	r5, [r2, #12]
    3224:	3210      	adds	r2, #16
    3226:	4293      	cmp	r3, r2
    3228:	d1f8      	bne.n	321c <memset+0x48>
    322a:	220f      	movs	r2, #15
    322c:	4014      	ands	r4, r2
    322e:	2c03      	cmp	r4, #3
    3230:	d90a      	bls.n	3248 <memset+0x74>
    3232:	1f26      	subs	r6, r4, #4
    3234:	08b6      	lsrs	r6, r6, #2
    3236:	3601      	adds	r6, #1
    3238:	00b6      	lsls	r6, r6, #2
    323a:	001a      	movs	r2, r3
    323c:	199b      	adds	r3, r3, r6
    323e:	c220      	stmia	r2!, {r5}
    3240:	4293      	cmp	r3, r2
    3242:	d1fc      	bne.n	323e <memset+0x6a>
    3244:	2203      	movs	r2, #3
    3246:	4014      	ands	r4, r2
    3248:	2c00      	cmp	r4, #0
    324a:	d005      	beq.n	3258 <memset+0x84>
    324c:	b2c9      	uxtb	r1, r1
    324e:	191c      	adds	r4, r3, r4
    3250:	7019      	strb	r1, [r3, #0]
    3252:	3301      	adds	r3, #1
    3254:	429c      	cmp	r4, r3
    3256:	d1fb      	bne.n	3250 <memset+0x7c>
    3258:	bd70      	pop	{r4, r5, r6, pc}
    325a:	0014      	movs	r4, r2
    325c:	0003      	movs	r3, r0
    325e:	e7cc      	b.n	31fa <memset+0x26>

00003260 <register_fini>:
    3260:	4b03      	ldr	r3, [pc, #12]	; (3270 <register_fini+0x10>)
    3262:	b510      	push	{r4, lr}
    3264:	2b00      	cmp	r3, #0
    3266:	d002      	beq.n	326e <register_fini+0xe>
    3268:	4802      	ldr	r0, [pc, #8]	; (3274 <register_fini+0x14>)
    326a:	f000 f805 	bl	3278 <atexit>
    326e:	bd10      	pop	{r4, pc}
    3270:	00000000 	.word	0x00000000
    3274:	00003289 	.word	0x00003289

00003278 <atexit>:
    3278:	b510      	push	{r4, lr}
    327a:	0001      	movs	r1, r0
    327c:	2300      	movs	r3, #0
    327e:	2200      	movs	r2, #0
    3280:	2000      	movs	r0, #0
    3282:	f000 f81b 	bl	32bc <__register_exitproc>
    3286:	bd10      	pop	{r4, pc}

00003288 <__libc_fini_array>:
    3288:	b570      	push	{r4, r5, r6, lr}
    328a:	4b09      	ldr	r3, [pc, #36]	; (32b0 <__libc_fini_array+0x28>)
    328c:	4c09      	ldr	r4, [pc, #36]	; (32b4 <__libc_fini_array+0x2c>)
    328e:	1ae4      	subs	r4, r4, r3
    3290:	10a4      	asrs	r4, r4, #2
    3292:	d009      	beq.n	32a8 <__libc_fini_array+0x20>
    3294:	4a08      	ldr	r2, [pc, #32]	; (32b8 <__libc_fini_array+0x30>)
    3296:	18a5      	adds	r5, r4, r2
    3298:	00ad      	lsls	r5, r5, #2
    329a:	18ed      	adds	r5, r5, r3
    329c:	682b      	ldr	r3, [r5, #0]
    329e:	3c01      	subs	r4, #1
    32a0:	4798      	blx	r3
    32a2:	3d04      	subs	r5, #4
    32a4:	2c00      	cmp	r4, #0
    32a6:	d1f9      	bne.n	329c <__libc_fini_array+0x14>
    32a8:	f000 f956 	bl	3558 <_fini>
    32ac:	bd70      	pop	{r4, r5, r6, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	00003564 	.word	0x00003564
    32b4:	00003568 	.word	0x00003568
    32b8:	3fffffff 	.word	0x3fffffff

000032bc <__register_exitproc>:
    32bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32be:	4644      	mov	r4, r8
    32c0:	465f      	mov	r7, fp
    32c2:	4656      	mov	r6, sl
    32c4:	464d      	mov	r5, r9
    32c6:	469b      	mov	fp, r3
    32c8:	4b2f      	ldr	r3, [pc, #188]	; (3388 <__register_exitproc+0xcc>)
    32ca:	b4f0      	push	{r4, r5, r6, r7}
    32cc:	681c      	ldr	r4, [r3, #0]
    32ce:	23a4      	movs	r3, #164	; 0xa4
    32d0:	005b      	lsls	r3, r3, #1
    32d2:	0005      	movs	r5, r0
    32d4:	58e0      	ldr	r0, [r4, r3]
    32d6:	000e      	movs	r6, r1
    32d8:	4690      	mov	r8, r2
    32da:	2800      	cmp	r0, #0
    32dc:	d04b      	beq.n	3376 <__register_exitproc+0xba>
    32de:	6843      	ldr	r3, [r0, #4]
    32e0:	2b1f      	cmp	r3, #31
    32e2:	dc0d      	bgt.n	3300 <__register_exitproc+0x44>
    32e4:	1c5c      	adds	r4, r3, #1
    32e6:	2d00      	cmp	r5, #0
    32e8:	d121      	bne.n	332e <__register_exitproc+0x72>
    32ea:	3302      	adds	r3, #2
    32ec:	009b      	lsls	r3, r3, #2
    32ee:	6044      	str	r4, [r0, #4]
    32f0:	501e      	str	r6, [r3, r0]
    32f2:	2000      	movs	r0, #0
    32f4:	bc3c      	pop	{r2, r3, r4, r5}
    32f6:	4690      	mov	r8, r2
    32f8:	4699      	mov	r9, r3
    32fa:	46a2      	mov	sl, r4
    32fc:	46ab      	mov	fp, r5
    32fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3300:	4b22      	ldr	r3, [pc, #136]	; (338c <__register_exitproc+0xd0>)
    3302:	2b00      	cmp	r3, #0
    3304:	d03c      	beq.n	3380 <__register_exitproc+0xc4>
    3306:	20c8      	movs	r0, #200	; 0xc8
    3308:	0040      	lsls	r0, r0, #1
    330a:	e000      	b.n	330e <__register_exitproc+0x52>
    330c:	bf00      	nop
    330e:	2800      	cmp	r0, #0
    3310:	d036      	beq.n	3380 <__register_exitproc+0xc4>
    3312:	22a4      	movs	r2, #164	; 0xa4
    3314:	2300      	movs	r3, #0
    3316:	0052      	lsls	r2, r2, #1
    3318:	58a1      	ldr	r1, [r4, r2]
    331a:	6043      	str	r3, [r0, #4]
    331c:	6001      	str	r1, [r0, #0]
    331e:	50a0      	str	r0, [r4, r2]
    3320:	3240      	adds	r2, #64	; 0x40
    3322:	5083      	str	r3, [r0, r2]
    3324:	3204      	adds	r2, #4
    3326:	5083      	str	r3, [r0, r2]
    3328:	2401      	movs	r4, #1
    332a:	2d00      	cmp	r5, #0
    332c:	d0dd      	beq.n	32ea <__register_exitproc+0x2e>
    332e:	009a      	lsls	r2, r3, #2
    3330:	4691      	mov	r9, r2
    3332:	4481      	add	r9, r0
    3334:	4642      	mov	r2, r8
    3336:	2188      	movs	r1, #136	; 0x88
    3338:	464f      	mov	r7, r9
    333a:	507a      	str	r2, [r7, r1]
    333c:	22c4      	movs	r2, #196	; 0xc4
    333e:	0052      	lsls	r2, r2, #1
    3340:	4690      	mov	r8, r2
    3342:	4480      	add	r8, r0
    3344:	4642      	mov	r2, r8
    3346:	3987      	subs	r1, #135	; 0x87
    3348:	4099      	lsls	r1, r3
    334a:	6812      	ldr	r2, [r2, #0]
    334c:	468a      	mov	sl, r1
    334e:	430a      	orrs	r2, r1
    3350:	4694      	mov	ip, r2
    3352:	4642      	mov	r2, r8
    3354:	4661      	mov	r1, ip
    3356:	6011      	str	r1, [r2, #0]
    3358:	2284      	movs	r2, #132	; 0x84
    335a:	4649      	mov	r1, r9
    335c:	465f      	mov	r7, fp
    335e:	0052      	lsls	r2, r2, #1
    3360:	508f      	str	r7, [r1, r2]
    3362:	2d02      	cmp	r5, #2
    3364:	d1c1      	bne.n	32ea <__register_exitproc+0x2e>
    3366:	0002      	movs	r2, r0
    3368:	4655      	mov	r5, sl
    336a:	328d      	adds	r2, #141	; 0x8d
    336c:	32ff      	adds	r2, #255	; 0xff
    336e:	6811      	ldr	r1, [r2, #0]
    3370:	430d      	orrs	r5, r1
    3372:	6015      	str	r5, [r2, #0]
    3374:	e7b9      	b.n	32ea <__register_exitproc+0x2e>
    3376:	0020      	movs	r0, r4
    3378:	304d      	adds	r0, #77	; 0x4d
    337a:	30ff      	adds	r0, #255	; 0xff
    337c:	50e0      	str	r0, [r4, r3]
    337e:	e7ae      	b.n	32de <__register_exitproc+0x22>
    3380:	2001      	movs	r0, #1
    3382:	4240      	negs	r0, r0
    3384:	e7b6      	b.n	32f4 <__register_exitproc+0x38>
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	00003540 	.word	0x00003540
    338c:	00000000 	.word	0x00000000

00003390 <spi2MOSI>:
    3390:	0c000002 00000200                                .....

00003395 <spi2SCK>:
    3395:	0e000002 00000200                                .....

0000339a <spi2MISO>:
    339a:	0d000002 8d200000                                ......

000033a0 <lookupTable.12462>:
    33a0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    33b0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    33c0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    33d0:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    33e0:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    33f0:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    3400:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    3410:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    3420:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    3430:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    3440:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    3450:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    3460:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    3470:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    3480:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    3490:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    34a0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    34b0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    34c0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    34d0:	000f048e                                ....

000034d4 <senseBatPin>:
    34d4:	06000000 01000106                                .....

000034d9 <senseAPin>:
    34d9:	03010001 0100010b                                .....

000034de <senseBPin>:
    34de:	02010001 0000000a                                .....

000034e3 <senseCPin>:
    34e3:	03000000 00000001                                .....

000034e8 <senseDPin>:
    34e8:	02000000 00000000                                .....

000034ed <analogAccelPin>:
    34ed:	07000000 00000207                                .....

000034f2 <spi2MOSI>:
    34f2:	0c000002 00000200                                .....

000034f7 <spi2SCK>:
    34f7:	0e000002 00248400 00234400 00234400     ......$..D#..D#.
    3507:	00234200 00245c00 00245c00 00244e00     .B#..\$..\$..N$.
    3517:	00234200 00245c00 00244e00 00245c00     .B#..\$..N$..\$.
    3527:	00234200 00246400 00246400 00246400     .B#..d$..d$..d$.
    3537:	00266400 00004300 00001000                       .d&..C...

00003540 <_global_impure_ptr>:
    3540:	20000010                                ... 

00003544 <_init>:
    3544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	bcf8      	pop	{r3, r4, r5, r6, r7}
    354a:	bc08      	pop	{r3}
    354c:	469e      	mov	lr, r3
    354e:	4770      	bx	lr

00003550 <__init_array_start>:
    3550:	00003261 	.word	0x00003261

00003554 <__frame_dummy_init_array_entry>:
    3554:	000000dd                                ....

00003558 <_fini>:
    3558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    355e:	bc08      	pop	{r3}
    3560:	469e      	mov	lr, r3
    3562:	4770      	bx	lr

00003564 <__fini_array_start>:
    3564:	000000b5 	.word	0x000000b5
