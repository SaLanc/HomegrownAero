
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003614  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00003614  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003a60  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003c10  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e215  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000264f  00000000  00000000  0003e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000015d0  00000000  00000000  00040d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000300  00000000  00000000  000422ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000af0  00000000  00000000  000425ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014fe3  00000000  00000000  000430dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000075e5  00000000  00000000  000580c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072ad3  00000000  00000000  0005f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000aac  00000000  00000000  000d2178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	f0 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_32K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
    pinHigh(cs_mem);

    delay_ms(300);
      4c:	11 0e 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
}
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	b5 0e 00 00 1d 0f 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00003614 	.word	0x00003614

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00003614 	.word	0x00003614
     10c:	00003614 	.word	0x00003614
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00003614 	.word	0x00003614
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00003175 	.word	0x00003175
     1d0:	00000849 	.word	0x00000849

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <readMS5803AdcResults>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e8:	4f24      	ldr	r7, [pc, #144]	; (27c <readMS5803AdcResults+0x98>)
     1ea:	021b      	lsls	r3, r3, #8
     1ec:	617b      	str	r3, [r7, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     1ee:	2300      	movs	r3, #0
     1f0:	4d23      	ldr	r5, [pc, #140]	; (280 <readMS5803AdcResults+0x9c>)
u32_t readMS5803AdcResults() {
     1f2:	b087      	sub	sp, #28
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     1f4:	79a9      	ldrb	r1, [r5, #6]
     1f6:	796c      	ldrb	r4, [r5, #5]
     1f8:	9300      	str	r3, [sp, #0]
     1fa:	786b      	ldrb	r3, [r5, #1]
     1fc:	782a      	ldrb	r2, [r5, #0]
     1fe:	0209      	lsls	r1, r1, #8
     200:	4321      	orrs	r1, r4
     202:	021b      	lsls	r3, r3, #8
     204:	79ec      	ldrb	r4, [r5, #7]
     206:	4313      	orrs	r3, r2
     208:	78aa      	ldrb	r2, [r5, #2]
     20a:	0424      	lsls	r4, r4, #16
     20c:	4321      	orrs	r1, r4
     20e:	0412      	lsls	r2, r2, #16
     210:	7a2c      	ldrb	r4, [r5, #8]
     212:	4313      	orrs	r3, r2
     214:	78ea      	ldrb	r2, [r5, #3]
     216:	0624      	lsls	r4, r4, #24
     218:	430c      	orrs	r4, r1
     21a:	0612      	lsls	r2, r2, #24
     21c:	7a69      	ldrb	r1, [r5, #9]
     21e:	431a      	orrs	r2, r3
     220:	0020      	movs	r0, r4
     222:	792b      	ldrb	r3, [r5, #4]
     224:	4e17      	ldr	r6, [pc, #92]	; (284 <readMS5803AdcResults+0xa0>)
     226:	9102      	str	r1, [sp, #8]
     228:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     22a:	7aeb      	ldrb	r3, [r5, #11]
     22c:	7aaa      	ldrb	r2, [r5, #10]
     22e:	021b      	lsls	r3, r3, #8
     230:	431a      	orrs	r2, r3
     232:	7b2b      	ldrb	r3, [r5, #12]
     234:	4e14      	ldr	r6, [pc, #80]	; (288 <readMS5803AdcResults+0xa4>)
     236:	041b      	lsls	r3, r3, #16
     238:	4313      	orrs	r3, r2
     23a:	7b6a      	ldrb	r2, [r5, #13]
     23c:	7bad      	ldrb	r5, [r5, #14]
     23e:	0612      	lsls	r2, r2, #24
     240:	431a      	orrs	r2, r3
     242:	9902      	ldr	r1, [sp, #8]
     244:	002b      	movs	r3, r5
     246:	0020      	movs	r0, r4
     248:	9203      	str	r2, [sp, #12]
     24a:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     24c:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     24e:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     250:	002b      	movs	r3, r5
     252:	9902      	ldr	r1, [sp, #8]
     254:	0020      	movs	r0, r4
     256:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     258:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     25a:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     25c:	002b      	movs	r3, r5
     25e:	0020      	movs	r0, r4
     260:	9902      	ldr	r1, [sp, #8]
     262:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     264:	2380      	movs	r3, #128	; 0x80
     266:	021b      	lsls	r3, r3, #8
     268:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     26a:	9b04      	ldr	r3, [sp, #16]
     26c:	9a05      	ldr	r2, [sp, #20]
     26e:	041b      	lsls	r3, r3, #16
     270:	0215      	lsls	r5, r2, #8
     272:	431d      	orrs	r5, r3
     274:	4328      	orrs	r0, r5
    return _receive;
}
     276:	b007      	add	sp, #28
     278:	bdf0      	pop	{r4, r5, r6, r7, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	41004400 	.word	0x41004400
     280:	00003380 	.word	0x00003380
     284:	00000b5d 	.word	0x00000b5d
     288:	00000bc9 	.word	0x00000bc9

0000028c <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     28e:	240a      	movs	r4, #10
void ConvertPressureTemperature(Barometer *my_barometer) {
     290:	b08b      	sub	sp, #44	; 0x2c
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     292:	8803      	ldrh	r3, [r0, #0]
     294:	aa02      	add	r2, sp, #8
     296:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     298:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     29a:	18a4      	adds	r4, r4, r2
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     29c:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     29e:	8883      	ldrh	r3, [r0, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     2a0:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     2a2:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2a4:	88c3      	ldrh	r3, [r0, #6]
void ConvertPressureTemperature(Barometer *my_barometer) {
     2a6:	0006      	movs	r6, r0
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2a8:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     2aa:	8902      	ldrh	r2, [r0, #8]
     2ac:	ab05      	add	r3, sp, #20
     2ae:	801a      	strh	r2, [r3, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     2b0:	220e      	movs	r2, #14
     2b2:	8941      	ldrh	r1, [r0, #10]
     2b4:	a802      	add	r0, sp, #8
     2b6:	1812      	adds	r2, r2, r0
     2b8:	8011      	strh	r1, [r2, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     2ba:	881b      	ldrh	r3, [r3, #0]
     2bc:	6931      	ldr	r1, [r6, #16]
     2be:	021b      	lsls	r3, r3, #8
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2c0:	8810      	ldrh	r0, [r2, #0]
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     2c2:	1acb      	subs	r3, r1, r3
     2c4:	9300      	str	r3, [sp, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2c6:	17db      	asrs	r3, r3, #31
     2c8:	9301      	str	r3, [sp, #4]
     2ca:	9a00      	ldr	r2, [sp, #0]
     2cc:	4f29      	ldr	r7, [pc, #164]	; (374 <ConvertPressureTemperature+0xe8>)
     2ce:	b280      	uxth	r0, r0
     2d0:	2100      	movs	r1, #0
     2d2:	47b8      	blx	r7
     2d4:	23fa      	movs	r3, #250	; 0xfa
     2d6:	00db      	lsls	r3, r3, #3
     2d8:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2da:	882b      	ldrh	r3, [r5, #0]
     2dc:	8820      	ldrh	r0, [r4, #0]
     2de:	b29b      	uxth	r3, r3
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     2e0:	6171      	str	r1, [r6, #20]
    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     2e2:	001f      	movs	r7, r3
     2e4:	9a00      	ldr	r2, [sp, #0]
     2e6:	9b01      	ldr	r3, [sp, #4]
     2e8:	4c22      	ldr	r4, [pc, #136]	; (374 <ConvertPressureTemperature+0xe8>)
     2ea:	b280      	uxth	r0, r0
     2ec:	2100      	movs	r1, #0
     2ee:	47a0      	blx	r4
     2f0:	064b      	lsls	r3, r1, #25
     2f2:	09c4      	lsrs	r4, r0, #7
     2f4:	431c      	orrs	r4, r3
     2f6:	2300      	movs	r3, #0
     2f8:	11cd      	asrs	r5, r1, #7
     2fa:	043a      	lsls	r2, r7, #16
     2fc:	1912      	adds	r2, r2, r4
     2fe:	416b      	adcs	r3, r5
     300:	9206      	str	r2, [sp, #24]
     302:	9307      	str	r3, [sp, #28]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     304:	ab02      	add	r3, sp, #8
     306:	889c      	ldrh	r4, [r3, #4]
     308:	8918      	ldrh	r0, [r3, #8]
     30a:	9a00      	ldr	r2, [sp, #0]
     30c:	9b01      	ldr	r3, [sp, #4]
     30e:	4d19      	ldr	r5, [pc, #100]	; (374 <ConvertPressureTemperature+0xe8>)
     310:	b280      	uxth	r0, r0
     312:	2100      	movs	r1, #0
     314:	47a8      	blx	r5
     316:	060d      	lsls	r5, r1, #24
     318:	120b      	asrs	r3, r1, #8
     31a:	2100      	movs	r1, #0
     31c:	b2a4      	uxth	r4, r4
     31e:	0a02      	lsrs	r2, r0, #8
     320:	432a      	orrs	r2, r5
     322:	03e0      	lsls	r0, r4, #15
     324:	1812      	adds	r2, r2, r0
     326:	414b      	adcs	r3, r1
     328:	9208      	str	r2, [sp, #32]
     32a:	9309      	str	r3, [sp, #36]	; 0x24
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     32c:	9a08      	ldr	r2, [sp, #32]
     32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     330:	9c06      	ldr	r4, [sp, #24]
     332:	9d07      	ldr	r5, [sp, #28]
     334:	4f0f      	ldr	r7, [pc, #60]	; (374 <ConvertPressureTemperature+0xe8>)
     336:	68f0      	ldr	r0, [r6, #12]
     338:	47b8      	blx	r7
     33a:	17cb      	asrs	r3, r1, #31
     33c:	02db      	lsls	r3, r3, #11
     33e:	469c      	mov	ip, r3
     340:	4667      	mov	r7, ip
     342:	2300      	movs	r3, #0
     344:	0afa      	lsrs	r2, r7, #11
     346:	1880      	adds	r0, r0, r2
     348:	4159      	adcs	r1, r3
     34a:	02cb      	lsls	r3, r1, #11
     34c:	469c      	mov	ip, r3
     34e:	4667      	mov	r7, ip
     350:	0d42      	lsrs	r2, r0, #21
     352:	433a      	orrs	r2, r7
     354:	154b      	asrs	r3, r1, #21
     356:	1b12      	subs	r2, r2, r4
     358:	41ab      	sbcs	r3, r5
     35a:	2100      	movs	r1, #0
     35c:	17dc      	asrs	r4, r3, #31
     35e:	0464      	lsls	r4, r4, #17
     360:	0c60      	lsrs	r0, r4, #17
     362:	1812      	adds	r2, r2, r0
     364:	414b      	adcs	r3, r1
     366:	0011      	movs	r1, r2
     368:	045b      	lsls	r3, r3, #17
     36a:	0bca      	lsrs	r2, r1, #15
     36c:	431a      	orrs	r2, r3
     36e:	61f2      	str	r2, [r6, #28]
}
     370:	b00b      	add	sp, #44	; 0x2c
     372:	bdf0      	pop	{r4, r5, r6, r7, pc}
     374:	000015d1 	.word	0x000015d1

00000378 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     378:	210a      	movs	r1, #10
     37a:	69c3      	ldr	r3, [r0, #28]
void pascalToCent(Barometer *my_barometer) {
     37c:	b570      	push	{r4, r5, r6, lr}
    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     37e:	4359      	muls	r1, r3
void pascalToCent(Barometer *my_barometer) {
     380:	0004      	movs	r4, r0
    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     382:	6181      	str	r1, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     384:	480f      	ldr	r0, [pc, #60]	; (3c4 <pascalToCent+0x4c>)
     386:	4281      	cmp	r1, r0
     388:	d902      	bls.n	390 <pascalToCent+0x18>
        my_barometer->heightCm = lookupTable[0];
     38a:	4b0f      	ldr	r3, [pc, #60]	; (3c8 <pascalToCent+0x50>)
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     38c:	6223      	str	r3, [r4, #32]
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}
     38e:	bd70      	pop	{r4, r5, r6, pc}
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     390:	1a43      	subs	r3, r0, r1
     392:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     394:	2b4b      	cmp	r3, #75	; 0x4b
     396:	d901      	bls.n	39c <pascalToCent+0x24>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     398:	4b0c      	ldr	r3, [pc, #48]	; (3cc <pascalToCent+0x54>)
     39a:	e7f7      	b.n	38c <pascalToCent+0x14>
            const int32_t z1 = lookupTable[inx];
     39c:	4d0c      	ldr	r5, [pc, #48]	; (3d0 <pascalToCent+0x58>)
     39e:	009a      	lsls	r2, r3, #2
            const int32_t pa1 = PA_INIT - (inx << 10);
     3a0:	029e      	lsls	r6, r3, #10
            const int32_t z2 = lookupTable[inx + 1];
     3a2:	3301      	adds	r3, #1
     3a4:	009b      	lsls	r3, r3, #2
            const int32_t pa1 = PA_INIT - (inx << 10);
     3a6:	1b80      	subs	r0, r0, r6
            const int32_t z2 = lookupTable[inx + 1];
     3a8:	18eb      	adds	r3, r5, r3
            const int32_t z1 = lookupTable[inx];
     3aa:	18aa      	adds	r2, r5, r2
     3ac:	6912      	ldr	r2, [r2, #16]
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     3ae:	1a41      	subs	r1, r0, r1
     3b0:	6918      	ldr	r0, [r3, #16]
     3b2:	4b08      	ldr	r3, [pc, #32]	; (3d4 <pascalToCent+0x5c>)
     3b4:	1a80      	subs	r0, r0, r2
     3b6:	4348      	muls	r0, r1
     3b8:	0a80      	lsrs	r0, r0, #10
     3ba:	1880      	adds	r0, r0, r2
     3bc:	4798      	blx	r3
     3be:	6220      	str	r0, [r4, #32]
}
     3c0:	e7e5      	b.n	38e <pascalToCent+0x16>
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	000199cc 	.word	0x000199cc
     3c8:	c6e5c000 	.word	0xc6e5c000
     3cc:	497048e0 	.word	0x497048e0
     3d0:	00003380 	.word	0x00003380
     3d4:	00002151 	.word	0x00002151

000003d8 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	27a2      	movs	r7, #162	; 0xa2
     3dc:	b087      	sub	sp, #28
     3de:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     3e0:	2096      	movs	r0, #150	; 0x96
     3e2:	4c28      	ldr	r4, [pc, #160]	; (484 <readMS5803Coefficients+0xac>)
     3e4:	0080      	lsls	r0, r0, #2
     3e6:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     3e8:	2096      	movs	r0, #150	; 0x96
     3ea:	0080      	lsls	r0, r0, #2
     3ec:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ee:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     3f0:	4c25      	ldr	r4, [pc, #148]	; (488 <readMS5803Coefficients+0xb0>)
     3f2:	4b26      	ldr	r3, [pc, #152]	; (48c <readMS5803Coefficients+0xb4>)
     3f4:	0212      	lsls	r2, r2, #8
     3f6:	615a      	str	r2, [r3, #20]
     3f8:	7863      	ldrb	r3, [r4, #1]
     3fa:	7822      	ldrb	r2, [r4, #0]
     3fc:	79a1      	ldrb	r1, [r4, #6]
     3fe:	7966      	ldrb	r6, [r4, #5]
     400:	021b      	lsls	r3, r3, #8
     402:	4313      	orrs	r3, r2
     404:	0209      	lsls	r1, r1, #8
     406:	78a2      	ldrb	r2, [r4, #2]
     408:	430e      	orrs	r6, r1
     40a:	79e1      	ldrb	r1, [r4, #7]
     40c:	0412      	lsls	r2, r2, #16
     40e:	4313      	orrs	r3, r2
     410:	7a20      	ldrb	r0, [r4, #8]
     412:	78e2      	ldrb	r2, [r4, #3]
     414:	0409      	lsls	r1, r1, #16
     416:	4331      	orrs	r1, r6
     418:	7a66      	ldrb	r6, [r4, #9]
     41a:	0612      	lsls	r2, r2, #24
     41c:	0600      	lsls	r0, r0, #24
     41e:	4308      	orrs	r0, r1
     420:	431a      	orrs	r2, r3
     422:	9700      	str	r7, [sp, #0]
     424:	7923      	ldrb	r3, [r4, #4]
     426:	0031      	movs	r1, r6
     428:	4d19      	ldr	r5, [pc, #100]	; (490 <readMS5803Coefficients+0xb8>)
     42a:	9003      	str	r0, [sp, #12]
     42c:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     42e:	0022      	movs	r2, r4
     430:	7ad3      	ldrb	r3, [r2, #11]
     432:	7aa4      	ldrb	r4, [r4, #10]
     434:	021b      	lsls	r3, r3, #8
     436:	4323      	orrs	r3, r4
     438:	7b14      	ldrb	r4, [r2, #12]
     43a:	7b95      	ldrb	r5, [r2, #14]
     43c:	0424      	lsls	r4, r4, #16
     43e:	4323      	orrs	r3, r4
     440:	7b54      	ldrb	r4, [r2, #13]
     442:	0031      	movs	r1, r6
     444:	0624      	lsls	r4, r4, #24
     446:	431c      	orrs	r4, r3
     448:	0022      	movs	r2, r4
     44a:	002b      	movs	r3, r5
     44c:	9404      	str	r4, [sp, #16]
     44e:	9803      	ldr	r0, [sp, #12]
     450:	4c10      	ldr	r4, [pc, #64]	; (494 <readMS5803Coefficients+0xbc>)
     452:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     454:	002b      	movs	r3, r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     456:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     458:	9a04      	ldr	r2, [sp, #16]
     45a:	9803      	ldr	r0, [sp, #12]
     45c:	0031      	movs	r1, r6
     45e:	4c0d      	ldr	r4, [pc, #52]	; (494 <readMS5803Coefficients+0xbc>)
     460:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     462:	2280      	movs	r2, #128	; 0x80
     464:	4b09      	ldr	r3, [pc, #36]	; (48c <readMS5803Coefficients+0xb4>)
     466:	0212      	lsls	r2, r2, #8
     468:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     46a:	9b05      	ldr	r3, [sp, #20]
     46c:	3702      	adds	r7, #2
     46e:	021d      	lsls	r5, r3, #8
     470:	9b02      	ldr	r3, [sp, #8]
     472:	4328      	orrs	r0, r5
     474:	8018      	strh	r0, [r3, #0]
     476:	b2ff      	uxtb	r7, r7
     478:	3302      	adds	r3, #2
     47a:	9302      	str	r3, [sp, #8]
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     47c:	2fae      	cmp	r7, #174	; 0xae
     47e:	d1af      	bne.n	3e0 <readMS5803Coefficients+0x8>
    }

}
     480:	b007      	add	sp, #28
     482:	bdf0      	pop	{r4, r5, r6, r7, pc}
     484:	00000db9 	.word	0x00000db9
     488:	00003380 	.word	0x00003380
     48c:	41004400 	.word	0x41004400
     490:	00000b5d 	.word	0x00000b5d
     494:	00000bc9 	.word	0x00000bc9

00000498 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     49a:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     49c:	231e      	movs	r3, #30
void initMS5803Barometer(Barometer *my_barometer) {
     49e:	0004      	movs	r4, r0
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     4a0:	4918      	ldr	r1, [pc, #96]	; (504 <initMS5803Barometer+0x6c>)
     4a2:	4d19      	ldr	r5, [pc, #100]	; (508 <initMS5803Barometer+0x70>)
     4a4:	0236      	lsls	r6, r6, #8
     4a6:	616e      	str	r6, [r5, #20]
     4a8:	9300      	str	r3, [sp, #0]
     4aa:	784b      	ldrb	r3, [r1, #1]
     4ac:	780a      	ldrb	r2, [r1, #0]
     4ae:	021b      	lsls	r3, r3, #8
     4b0:	4313      	orrs	r3, r2
     4b2:	788a      	ldrb	r2, [r1, #2]
     4b4:	1d4f      	adds	r7, r1, #5
     4b6:	0412      	lsls	r2, r2, #16
     4b8:	4313      	orrs	r3, r2
     4ba:	78ca      	ldrb	r2, [r1, #3]
     4bc:	7948      	ldrb	r0, [r1, #5]
     4be:	0612      	lsls	r2, r2, #24
     4c0:	431a      	orrs	r2, r3
     4c2:	790b      	ldrb	r3, [r1, #4]
     4c4:	7989      	ldrb	r1, [r1, #6]
     4c6:	0209      	lsls	r1, r1, #8
     4c8:	4301      	orrs	r1, r0
     4ca:	78b8      	ldrb	r0, [r7, #2]
     4cc:	0400      	lsls	r0, r0, #16
     4ce:	4301      	orrs	r1, r0
     4d0:	78f8      	ldrb	r0, [r7, #3]
     4d2:	0600      	lsls	r0, r0, #24
     4d4:	4308      	orrs	r0, r1
     4d6:	7939      	ldrb	r1, [r7, #4]
     4d8:	4f0c      	ldr	r7, [pc, #48]	; (50c <initMS5803Barometer+0x74>)
     4da:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4dc:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     4de:	20c8      	movs	r0, #200	; 0xc8
     4e0:	4b0b      	ldr	r3, [pc, #44]	; (510 <initMS5803Barometer+0x78>)
     4e2:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     4e4:	0020      	movs	r0, r4
     4e6:	4b0b      	ldr	r3, [pc, #44]	; (514 <initMS5803Barometer+0x7c>)
     4e8:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     4ea:	4b0b      	ldr	r3, [pc, #44]	; (518 <initMS5803Barometer+0x80>)
     4ec:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     4ee:	4b0b      	ldr	r3, [pc, #44]	; (51c <initMS5803Barometer+0x84>)
     4f0:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     4f2:	4b0b      	ldr	r3, [pc, #44]	; (520 <initMS5803Barometer+0x88>)
     4f4:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     4f6:	4b0b      	ldr	r3, [pc, #44]	; (524 <initMS5803Barometer+0x8c>)
     4f8:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     4fa:	23fa      	movs	r3, #250	; 0xfa
     4fc:	00db      	lsls	r3, r3, #3
     4fe:	6163      	str	r3, [r4, #20]




}
     500:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	00003380 	.word	0x00003380
     508:	41004400 	.word	0x41004400
     50c:	00000b5d 	.word	0x00000b5d
     510:	00000de5 	.word	0x00000de5
     514:	000003d9 	.word	0x000003d9
     518:	457a0000 	.word	0x457a0000
     51c:	00002710 	.word	0x00002710
     520:	0041c9fe 	.word	0x0041c9fe
     524:	007ffae4 	.word	0x007ffae4

00000528 <init>:
#include "math.h"




void init() {
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     52a:	4bb7      	ldr	r3, [pc, #732]	; (808 <init+0x2e0>)
void init() {
     52c:	b085      	sub	sp, #20
    SystemInit();
     52e:	4798      	blx	r3
    GclkInit();
     530:	4bb6      	ldr	r3, [pc, #728]	; (80c <init+0x2e4>)
     532:	4798      	blx	r3
    RtcInit();
     534:	4bb6      	ldr	r3, [pc, #728]	; (810 <init+0x2e8>)
     536:	4798      	blx	r3
    delayInit();
     538:	4bb6      	ldr	r3, [pc, #728]	; (814 <init+0x2ec>)
     53a:	4798      	blx	r3
    adcInit();
     53c:	4bb6      	ldr	r3, [pc, #728]	; (818 <init+0x2f0>)
     53e:	4798      	blx	r3
    dmaInit();
     540:	4bb6      	ldr	r3, [pc, #728]	; (81c <init+0x2f4>)
     542:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     544:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     546:	21c1      	movs	r1, #193	; 0xc1
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     548:	4bb5      	ldr	r3, [pc, #724]	; (820 <init+0x2f8>)
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     54a:	0089      	lsls	r1, r1, #2
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     54c:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     54e:	585a      	ldr	r2, [r3, r1]
     550:	48b4      	ldr	r0, [pc, #720]	; (824 <init+0x2fc>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     552:	2401      	movs	r4, #1
     554:	4002      	ands	r2, r0
     556:	505a      	str	r2, [r3, r1]
     558:	4bb3      	ldr	r3, [pc, #716]	; (828 <init+0x300>)
     55a:	0019      	movs	r1, r3
     55c:	3154      	adds	r1, #84	; 0x54
     55e:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     560:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     562:	43a2      	bics	r2, r4
     564:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     566:	2280      	movs	r2, #128	; 0x80
     568:	0352      	lsls	r2, r2, #13
     56a:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     56c:	220f      	movs	r2, #15
     56e:	3033      	adds	r0, #51	; 0x33
     570:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     572:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     574:	4391      	bics	r1, r2
     576:	4321      	orrs	r1, r4
     578:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     57a:	7cc1      	ldrb	r1, [r0, #19]
     57c:	36c3      	adds	r6, #195	; 0xc3
     57e:	4321      	orrs	r1, r4
     580:	74c1      	strb	r1, [r0, #19]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     582:	0019      	movs	r1, r3
     584:	2010      	movs	r0, #16
     586:	31b1      	adds	r1, #177	; 0xb1
     588:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     58a:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     58c:	4015      	ands	r5, r2
     58e:	4305      	orrs	r5, r0
     590:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     592:	7835      	ldrb	r5, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     594:	3788      	adds	r7, #136	; 0x88
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     596:	4325      	orrs	r5, r4
     598:	7035      	strb	r5, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     59a:	780d      	ldrb	r5, [r1, #0]
     59c:	4015      	ands	r5, r2
     59e:	4305      	orrs	r5, r0
     5a0:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5a2:	7835      	ldrb	r5, [r6, #0]
     5a4:	4325      	orrs	r5, r4
     5a6:	7035      	strb	r5, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a8:	7d35      	ldrb	r5, [r6, #20]
     5aa:	43a5      	bics	r5, r4
     5ac:	7535      	strb	r5, [r6, #20]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ae:	2580      	movs	r5, #128	; 0x80
     5b0:	042d      	lsls	r5, r5, #16
     5b2:	9703      	str	r7, [sp, #12]
     5b4:	603d      	str	r5, [r7, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5b6:	60fd      	str	r5, [r7, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b8:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ba:	003e      	movs	r6, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5bc:	4395      	bics	r5, r2
     5be:	4325      	orrs	r5, r4
     5c0:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5c2:	25c2      	movs	r5, #194	; 0xc2
     5c4:	46ac      	mov	ip, r5
     5c6:	449c      	add	ip, r3
     5c8:	4665      	mov	r5, ip
     5ca:	4667      	mov	r7, ip
     5cc:	782d      	ldrb	r5, [r5, #0]
     5ce:	4325      	orrs	r5, r4
     5d0:	703d      	strb	r5, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     5d2:	780d      	ldrb	r5, [r1, #0]
     5d4:	4395      	bics	r5, r2
     5d6:	4325      	orrs	r5, r4
     5d8:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5dc:	7839      	ldrb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5de:	35d6      	adds	r5, #214	; 0xd6
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e0:	4321      	orrs	r1, r4
     5e2:	7039      	strb	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e4:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5e6:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e8:	43a1      	bics	r1, r4
     5ea:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	9d03      	ldr	r5, [sp, #12]
     5f0:	03c9      	lsls	r1, r1, #15
     5f2:	6029      	str	r1, [r5, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5f4:	001d      	movs	r5, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f6:	60f1      	str	r1, [r6, #12]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5f8:	3531      	adds	r5, #49	; 0x31
     5fa:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5fc:	3e3f      	subs	r6, #63	; 0x3f
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5fe:	4011      	ands	r1, r2
     600:	4308      	orrs	r0, r1
     602:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     604:	0018      	movs	r0, r3
     606:	3043      	adds	r0, #67	; 0x43
     608:	7801      	ldrb	r1, [r0, #0]
     60a:	3801      	subs	r0, #1
     60c:	4321      	orrs	r1, r4
     60e:	7041      	strb	r1, [r0, #1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     610:	7dc1      	ldrb	r1, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     612:	46bc      	mov	ip, r7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     614:	43a1      	bics	r1, r4
     616:	75c1      	strb	r1, [r0, #23]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     618:	2180      	movs	r1, #128	; 0x80
     61a:	0489      	lsls	r1, r1, #18
     61c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     61e:	6159      	str	r1, [r3, #20]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     620:	7829      	ldrb	r1, [r5, #0]
     622:	4391      	bics	r1, r2
     624:	4321      	orrs	r1, r4
     626:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     628:	7801      	ldrb	r1, [r0, #0]
     62a:	4321      	orrs	r1, r4
     62c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     62e:	7d81      	ldrb	r1, [r0, #22]
     630:	43a1      	bics	r1, r4
     632:	7581      	strb	r1, [r0, #22]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     634:	2180      	movs	r1, #128	; 0x80
     636:	0449      	lsls	r1, r1, #17
     638:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     63a:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63c:	7de9      	ldrb	r1, [r5, #23]
     63e:	43a1      	bics	r1, r4
     640:	75e9      	strb	r1, [r5, #23]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     642:	2180      	movs	r1, #128	; 0x80
     644:	0049      	lsls	r1, r1, #1
     646:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     648:	7831      	ldrb	r1, [r6, #0]
     64a:	43a1      	bics	r1, r4
     64c:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     64e:	2180      	movs	r1, #128	; 0x80
     650:	0089      	lsls	r1, r1, #2
     652:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     654:	0019      	movs	r1, r3
     656:	314b      	adds	r1, #75	; 0x4b
     658:	7808      	ldrb	r0, [r1, #0]
     65a:	43a0      	bics	r0, r4
     65c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     65e:	7808      	ldrb	r0, [r1, #0]
     660:	4338      	orrs	r0, r7
     662:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     664:	2080      	movs	r0, #128	; 0x80
     666:	0100      	lsls	r0, r0, #4
     668:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     66a:	4870      	ldr	r0, [pc, #448]	; (82c <init+0x304>)
     66c:	371e      	adds	r7, #30
     66e:	7800      	ldrb	r0, [r0, #0]
     670:	4010      	ands	r0, r2
     672:	4338      	orrs	r0, r7
     674:	4f6d      	ldr	r7, [pc, #436]	; (82c <init+0x304>)
     676:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     678:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     67a:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     67c:	4320      	orrs	r0, r4
     67e:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     680:	0018      	movs	r0, r3
     682:	3034      	adds	r0, #52	; 0x34
     684:	7801      	ldrb	r1, [r0, #0]
     686:	4011      	ands	r1, r2
     688:	4339      	orrs	r1, r7
     68a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68c:	7831      	ldrb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     68e:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     690:	4321      	orrs	r1, r4
     692:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     694:	4666      	mov	r6, ip
     696:	7801      	ldrb	r1, [r0, #0]
     698:	4391      	bics	r1, r2
     69a:	4331      	orrs	r1, r6
     69c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     69e:	7de9      	ldrb	r1, [r5, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a0:	3096      	adds	r0, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a2:	4321      	orrs	r1, r4
     6a4:	75e9      	strb	r1, [r5, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a6:	7801      	ldrb	r1, [r0, #0]
     6a8:	001e      	movs	r6, r3
     6aa:	43a1      	bics	r1, r4
     6ac:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ae:	2180      	movs	r1, #128	; 0x80
     6b0:	9803      	ldr	r0, [sp, #12]
     6b2:	00c9      	lsls	r1, r1, #3
     6b4:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6b6:	0018      	movs	r0, r3
     6b8:	3098      	adds	r0, #152	; 0x98
     6ba:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6bc:	7e68      	ldrb	r0, [r5, #25]
     6be:	3651      	adds	r6, #81	; 0x51
     6c0:	43a0      	bics	r0, r4
     6c2:	7668      	strb	r0, [r5, #25]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6c6:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c8:	7fe9      	ldrb	r1, [r5, #31]
     6ca:	43a1      	bics	r1, r4
     6cc:	77e9      	strb	r1, [r5, #31]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ce:	2180      	movs	r1, #128	; 0x80
     6d0:	0249      	lsls	r1, r1, #9
     6d2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d4:	7831      	ldrb	r1, [r6, #0]
     6d6:	43a1      	bics	r1, r4
     6d8:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6da:	2180      	movs	r1, #128	; 0x80
     6dc:	0289      	lsls	r1, r1, #10
     6de:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e0:	0019      	movs	r1, r3
     6e2:	3153      	adds	r1, #83	; 0x53
     6e4:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6e6:	391b      	subs	r1, #27
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e8:	43a0      	bics	r0, r4
     6ea:	76c8      	strb	r0, [r1, #27]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ec:	7ec8      	ldrb	r0, [r1, #27]
     6ee:	4338      	orrs	r0, r7
     6f0:	76c8      	strb	r0, [r1, #27]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f2:	001f      	movs	r7, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6f4:	2080      	movs	r0, #128	; 0x80
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f6:	3739      	adds	r7, #57	; 0x39
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6f8:	0300      	lsls	r0, r0, #12
     6fa:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fc:	9703      	str	r7, [sp, #12]
     6fe:	7838      	ldrb	r0, [r7, #0]
     700:	2720      	movs	r7, #32
     702:	4010      	ands	r0, r2
     704:	4338      	orrs	r0, r7
     706:	9f03      	ldr	r7, [sp, #12]
     708:	7038      	strb	r0, [r7, #0]
     70a:	2720      	movs	r7, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70c:	7ec8      	ldrb	r0, [r1, #27]
     70e:	4320      	orrs	r0, r4
     710:	76c8      	strb	r0, [r1, #27]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     712:	7808      	ldrb	r0, [r1, #0]
     714:	4010      	ands	r0, r2
     716:	4338      	orrs	r0, r7
     718:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     71a:	7830      	ldrb	r0, [r6, #0]
     71c:	4320      	orrs	r0, r4
     71e:	7030      	strb	r0, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     720:	4666      	mov	r6, ip
     722:	7808      	ldrb	r0, [r1, #0]
     724:	4390      	bics	r0, r2
     726:	4330      	orrs	r0, r6
     728:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72a:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     72c:	7fe9      	ldrb	r1, [r5, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72e:	3052      	adds	r0, #82	; 0x52
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     730:	4321      	orrs	r1, r4
     732:	77e9      	strb	r1, [r5, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     734:	7801      	ldrb	r1, [r0, #0]
     736:	3806      	subs	r0, #6
     738:	43a1      	bics	r1, r4
     73a:	7181      	strb	r1, [r0, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2180      	movs	r1, #128	; 0x80
     73e:	02c9      	lsls	r1, r1, #11
     740:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     742:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     744:	7801      	ldrb	r1, [r0, #0]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     746:	2500      	movs	r5, #0
     748:	43a1      	bics	r1, r4
     74a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     74c:	2180      	movs	r1, #128	; 0x80
     74e:	0149      	lsls	r1, r1, #5
     750:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     752:	7881      	ldrb	r1, [r0, #2]
     754:	43a1      	bics	r1, r4
     756:	7081      	strb	r1, [r0, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     758:	2180      	movs	r1, #128	; 0x80
     75a:	01c9      	lsls	r1, r1, #7
     75c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75e:	0019      	movs	r1, r3
     760:	314d      	adds	r1, #77	; 0x4d
     762:	7808      	ldrb	r0, [r1, #0]
     764:	43a0      	bics	r0, r4
     766:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     768:	7808      	ldrb	r0, [r1, #0]
     76a:	4330      	orrs	r0, r6
     76c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     76e:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     770:	0018      	movs	r0, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     772:	0189      	lsls	r1, r1, #6
     774:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     776:	304f      	adds	r0, #79	; 0x4f
     778:	7801      	ldrb	r1, [r0, #0]
     77a:	43a1      	bics	r1, r4
     77c:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     77e:	2180      	movs	r1, #128	; 0x80
     780:	0209      	lsls	r1, r1, #8
     782:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     784:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	0019      	movs	r1, r3
     788:	3155      	adds	r1, #85	; 0x55
     78a:	7808      	ldrb	r0, [r1, #0]
     78c:	43a0      	bics	r0, r4
     78e:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     790:	2080      	movs	r0, #128	; 0x80
     792:	0380      	lsls	r0, r0, #14
     794:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     796:	2040      	movs	r0, #64	; 0x40
     798:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	7848      	ldrb	r0, [r1, #1]
     79c:	43a0      	bics	r0, r4
     79e:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2080      	movs	r0, #128	; 0x80
     7a2:	03c0      	lsls	r0, r0, #15
     7a4:	6098      	str	r0, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7a6:	333b      	adds	r3, #59	; 0x3b
     7a8:	7818      	ldrb	r0, [r3, #0]
     7aa:	4390      	bics	r0, r2
     7ac:	0002      	movs	r2, r0
     7ae:	4332      	orrs	r2, r6
     7b0:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b2:	784b      	ldrb	r3, [r1, #1]
    sercomClockEnable(SPI0, 3, 4);
     7b4:	4e1e      	ldr	r6, [pc, #120]	; (830 <init+0x308>)
     7b6:	4323      	orrs	r3, r4
     7b8:	704b      	strb	r3, [r1, #1]
     7ba:	2204      	movs	r2, #4
     7bc:	2103      	movs	r1, #3
     7be:	2000      	movs	r0, #0
     7c0:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     7c2:	002b      	movs	r3, r5
     7c4:	002a      	movs	r2, r5
     7c6:	0028      	movs	r0, r5
     7c8:	4f1a      	ldr	r7, [pc, #104]	; (834 <init+0x30c>)
     7ca:	9501      	str	r5, [sp, #4]
     7cc:	9500      	str	r5, [sp, #0]
     7ce:	2103      	movs	r1, #3
     7d0:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     7d2:	0020      	movs	r0, r4
     7d4:	2204      	movs	r2, #4
     7d6:	2103      	movs	r1, #3
     7d8:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     7da:	002b      	movs	r3, r5
     7dc:	002a      	movs	r2, r5
     7de:	0020      	movs	r0, r4
     7e0:	9501      	str	r5, [sp, #4]
     7e2:	9500      	str	r5, [sp, #0]
     7e4:	2103      	movs	r1, #3
     7e6:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     7e8:	2208      	movs	r2, #8
     7ea:	2104      	movs	r1, #4
     7ec:	2003      	movs	r0, #3
     7ee:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     7f0:	0021      	movs	r1, r4
     7f2:	002a      	movs	r2, r5
     7f4:	2003      	movs	r0, #3
     7f6:	4b10      	ldr	r3, [pc, #64]	; (838 <init+0x310>)
     7f8:	4c10      	ldr	r4, [pc, #64]	; (83c <init+0x314>)
     7fa:	47a0      	blx	r4

    TC4Init();
     7fc:	4b10      	ldr	r3, [pc, #64]	; (840 <init+0x318>)
     7fe:	4798      	blx	r3
    TC5Init();
     800:	4b10      	ldr	r3, [pc, #64]	; (844 <init+0x31c>)
     802:	4798      	blx	r3
}
     804:	b005      	add	sp, #20
     806:	bdf0      	pop	{r4, r5, r6, r7, pc}
     808:	000001d5 	.word	0x000001d5
     80c:	00000c1d 	.word	0x00000c1d
     810:	00000ca1 	.word	0x00000ca1
     814:	00000d99 	.word	0x00000d99
     818:	00000a7d 	.word	0x00000a7d
     81c:	00000f35 	.word	0x00000f35
     820:	e000e100 	.word	0xe000e100
     824:	ff00ffff 	.word	0xff00ffff
     828:	41004400 	.word	0x41004400
     82c:	41004435 	.word	0x41004435
     830:	0000141d 	.word	0x0000141d
     834:	0000147d 	.word	0x0000147d
     838:	0000f972 	.word	0x0000f972
     83c:	000014e1 	.word	0x000014e1
     840:	00000e65 	.word	0x00000e65
     844:	00000ecd 	.word	0x00000ecd

00000848 <main>:



int main(void) {
     848:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();
     84a:	4b6b      	ldr	r3, [pc, #428]	; (9f8 <main+0x1b0>)
int main(void) {
     84c:	b0af      	sub	sp, #188	; 0xbc
    init();
     84e:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     850:	2300      	movs	r3, #0
     852:	ac0b      	add	r4, sp, #44	; 0x2c
     854:	7023      	strb	r3, [r4, #0]

    initMS5803Barometer(&my_altimeter.myBarometer);
     856:	a80d      	add	r0, sp, #52	; 0x34
     858:	4b68      	ldr	r3, [pc, #416]	; (9fc <main+0x1b4>)
     85a:	4798      	blx	r3
    IMUinit();
     85c:	25c8      	movs	r5, #200	; 0xc8
     85e:	4b68      	ldr	r3, [pc, #416]	; (a00 <main+0x1b8>)
     860:	4798      	blx	r3
     862:	006d      	lsls	r5, r5, #1
    volatile float baseAltitude;



    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     864:	4b67      	ldr	r3, [pc, #412]	; (a04 <main+0x1bc>)
     866:	0020      	movs	r0, r4
     868:	4798      	blx	r3

        baseAltitude -= baseAltitude / 50;
     86a:	9809      	ldr	r0, [sp, #36]	; 0x24
     86c:	4e66      	ldr	r6, [pc, #408]	; (a08 <main+0x1c0>)
     86e:	4967      	ldr	r1, [pc, #412]	; (a0c <main+0x1c4>)
     870:	47b0      	blx	r6
     872:	9f09      	ldr	r7, [sp, #36]	; 0x24
     874:	4b66      	ldr	r3, [pc, #408]	; (a10 <main+0x1c8>)
     876:	1c01      	adds	r1, r0, #0
     878:	1c38      	adds	r0, r7, #0
     87a:	4798      	blx	r3
     87c:	9009      	str	r0, [sp, #36]	; 0x24
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
     87e:	9f09      	ldr	r7, [sp, #36]	; 0x24
     880:	4962      	ldr	r1, [pc, #392]	; (a0c <main+0x1c4>)
     882:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     884:	47b0      	blx	r6
     886:	4b63      	ldr	r3, [pc, #396]	; (a14 <main+0x1cc>)
     888:	1c39      	adds	r1, r7, #0
     88a:	4798      	blx	r3
     88c:	3d01      	subs	r5, #1
     88e:	9009      	str	r0, [sp, #36]	; 0x24
        delay_us(150);
     890:	4b61      	ldr	r3, [pc, #388]	; (a18 <main+0x1d0>)
     892:	2096      	movs	r0, #150	; 0x96
     894:	b2ad      	uxth	r5, r5
     896:	4798      	blx	r3
    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
     898:	2d00      	cmp	r5, #0
     89a:	d1e3      	bne.n	864 <main+0x1c>

    }

    averageAlt = baseAltitude;
     89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    u32_t time = 0;
    u32_t lastTime = 0;

    //AT25SFErace4KBlock(0);

    my_altimeter.currentAddress = 0x00;
     89e:	6065      	str	r5, [r4, #4]
    averageAlt = baseAltitude;
     8a0:	9308      	str	r3, [sp, #32]



    while (1) {
        time = millis();
     8a2:	4b5e      	ldr	r3, [pc, #376]	; (a1c <main+0x1d4>)
     8a4:	4798      	blx	r3



        if (takeSample) {
     8a6:	4d5e      	ldr	r5, [pc, #376]	; (a20 <main+0x1d8>)
     8a8:	782b      	ldrb	r3, [r5, #0]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d01a      	beq.n	8e4 <main+0x9c>
            sampleTick(&my_altimeter);
     8ae:	0020      	movs	r0, r4
     8b0:	4b54      	ldr	r3, [pc, #336]	; (a04 <main+0x1bc>)
     8b2:	4798      	blx	r3
            flight(&my_altimeter);
     8b4:	0020      	movs	r0, r4
     8b6:	4b5b      	ldr	r3, [pc, #364]	; (a24 <main+0x1dc>)
     8b8:	4798      	blx	r3
            takeSample = false;
     8ba:	2300      	movs	r3, #0
            //pinToggle(TxPo);
            usartDataOut(USART3,0x68);
     8bc:	2168      	movs	r1, #104	; 0x68
            takeSample = false;
     8be:	702b      	strb	r3, [r5, #0]
            usartDataOut(USART3,0x68);
     8c0:	2003      	movs	r0, #3
     8c2:	4d59      	ldr	r5, [pc, #356]	; (a28 <main+0x1e0>)
     8c4:	47a8      	blx	r5
            usartDataOut(USART3,0x65);
     8c6:	2165      	movs	r1, #101	; 0x65
     8c8:	2003      	movs	r0, #3
     8ca:	47a8      	blx	r5
            usartDataOut(USART3,0x6c);
     8cc:	216c      	movs	r1, #108	; 0x6c
     8ce:	2003      	movs	r0, #3
     8d0:	47a8      	blx	r5
            usartDataOut(USART3,0x6c);
     8d2:	216c      	movs	r1, #108	; 0x6c
     8d4:	2003      	movs	r0, #3
     8d6:	47a8      	blx	r5
            usartDataOut(USART3,0x6f);
     8d8:	216f      	movs	r1, #111	; 0x6f
     8da:	2003      	movs	r0, #3
     8dc:	47a8      	blx	r5
            usartDataOut(USART3,0x21);
     8de:	2121      	movs	r1, #33	; 0x21
     8e0:	2003      	movs	r0, #3
     8e2:	47a8      	blx	r5



        }

        if (writeSample) {
     8e4:	4b51      	ldr	r3, [pc, #324]	; (a2c <main+0x1e4>)
     8e6:	781b      	ldrb	r3, [r3, #0]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d002      	beq.n	8f2 <main+0xaa>
            //AT25SFWriteByte(my_altimeter.currentAddress,my_altimeter.myBarometer);
            //volatile u8_t byte1 = AT25SFGetByte(my_altimeter.currentAddress);
            my_altimeter.currentAddress++;
     8ec:	6863      	ldr	r3, [r4, #4]
     8ee:	3301      	adds	r3, #1
     8f0:	6063      	str	r3, [r4, #4]





        averageAlt -= averageAlt / 20;
     8f2:	9808      	ldr	r0, [sp, #32]
     8f4:	4d44      	ldr	r5, [pc, #272]	; (a08 <main+0x1c0>)
     8f6:	494e      	ldr	r1, [pc, #312]	; (a30 <main+0x1e8>)
     8f8:	47a8      	blx	r5
     8fa:	9e08      	ldr	r6, [sp, #32]
     8fc:	4f44      	ldr	r7, [pc, #272]	; (a10 <main+0x1c8>)
     8fe:	1c01      	adds	r1, r0, #0
     900:	1c30      	adds	r0, r6, #0
     902:	47b8      	blx	r7
     904:	9008      	str	r0, [sp, #32]
        averageAlt += my_altimeter.myBarometer.heightFeet / 20;
     906:	9b08      	ldr	r3, [sp, #32]
     908:	4949      	ldr	r1, [pc, #292]	; (a30 <main+0x1e8>)
     90a:	9300      	str	r3, [sp, #0]
     90c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     90e:	47a8      	blx	r5
     910:	4e40      	ldr	r6, [pc, #256]	; (a14 <main+0x1cc>)
     912:	9900      	ldr	r1, [sp, #0]
     914:	47b0      	blx	r6
     916:	9008      	str	r0, [sp, #32]


        averageAccel -= averageAccel / 10;
     918:	9807      	ldr	r0, [sp, #28]
     91a:	9b07      	ldr	r3, [sp, #28]
     91c:	4945      	ldr	r1, [pc, #276]	; (a34 <main+0x1ec>)
     91e:	9300      	str	r3, [sp, #0]
     920:	47a8      	blx	r5
     922:	1c01      	adds	r1, r0, #0
     924:	9800      	ldr	r0, [sp, #0]
     926:	47b8      	blx	r7
     928:	9007      	str	r0, [sp, #28]
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;
     92a:	9b07      	ldr	r3, [sp, #28]
     92c:	4941      	ldr	r1, [pc, #260]	; (a34 <main+0x1ec>)
     92e:	9300      	str	r3, [sp, #0]
     930:	6f60      	ldr	r0, [r4, #116]	; 0x74
     932:	47a8      	blx	r5
     934:	9900      	ldr	r1, [sp, #0]
     936:	47b0      	blx	r6
     938:	9007      	str	r0, [sp, #28]

        averageXAccel -= averageXAccel / 3;
     93a:	9804      	ldr	r0, [sp, #16]
     93c:	9b04      	ldr	r3, [sp, #16]
     93e:	493e      	ldr	r1, [pc, #248]	; (a38 <main+0x1f0>)
     940:	9300      	str	r3, [sp, #0]
     942:	47a8      	blx	r5
     944:	1c01      	adds	r1, r0, #0
     946:	9800      	ldr	r0, [sp, #0]
     948:	47b8      	blx	r7
     94a:	9004      	str	r0, [sp, #16]
        averageXAccel += my_altimeter.myIMU.accelX / 3;
     94c:	9b04      	ldr	r3, [sp, #16]
     94e:	493a      	ldr	r1, [pc, #232]	; (a38 <main+0x1f0>)
     950:	9300      	str	r3, [sp, #0]
     952:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     954:	47a8      	blx	r5
     956:	9900      	ldr	r1, [sp, #0]
     958:	47b0      	blx	r6
     95a:	9004      	str	r0, [sp, #16]

        averageYAccel -= averageYAccel / 3;
     95c:	9805      	ldr	r0, [sp, #20]
     95e:	9b05      	ldr	r3, [sp, #20]
     960:	4935      	ldr	r1, [pc, #212]	; (a38 <main+0x1f0>)
     962:	9300      	str	r3, [sp, #0]
     964:	47a8      	blx	r5
     966:	1c01      	adds	r1, r0, #0
     968:	9800      	ldr	r0, [sp, #0]
     96a:	47b8      	blx	r7
     96c:	9005      	str	r0, [sp, #20]
        averageYAccel += my_altimeter.myIMU.accelY / 3;
     96e:	9b05      	ldr	r3, [sp, #20]
     970:	4931      	ldr	r1, [pc, #196]	; (a38 <main+0x1f0>)
     972:	9300      	str	r3, [sp, #0]
     974:	6c60      	ldr	r0, [r4, #68]	; 0x44
     976:	47a8      	blx	r5
     978:	9900      	ldr	r1, [sp, #0]
     97a:	47b0      	blx	r6
     97c:	9005      	str	r0, [sp, #20]

        averageZAccel -= averageZAccel / 3;
     97e:	9806      	ldr	r0, [sp, #24]
     980:	9b06      	ldr	r3, [sp, #24]
     982:	492d      	ldr	r1, [pc, #180]	; (a38 <main+0x1f0>)
     984:	9300      	str	r3, [sp, #0]
     986:	47a8      	blx	r5
     988:	1c01      	adds	r1, r0, #0
     98a:	9800      	ldr	r0, [sp, #0]
     98c:	47b8      	blx	r7
     98e:	9006      	str	r0, [sp, #24]
        averageZAccel += my_altimeter.myIMU.accelZ / 3;
     990:	9f06      	ldr	r7, [sp, #24]
     992:	4929      	ldr	r1, [pc, #164]	; (a38 <main+0x1f0>)
     994:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     996:	47a8      	blx	r5
     998:	1c39      	adds	r1, r7, #0
     99a:	47b0      	blx	r6
     99c:	9006      	str	r0, [sp, #24]



        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);
     99e:	9804      	ldr	r0, [sp, #16]
     9a0:	9904      	ldr	r1, [sp, #16]
     9a2:	9b05      	ldr	r3, [sp, #20]
     9a4:	4d25      	ldr	r5, [pc, #148]	; (a3c <main+0x1f4>)
     9a6:	9300      	str	r3, [sp, #0]
     9a8:	9b05      	ldr	r3, [sp, #20]
     9aa:	9301      	str	r3, [sp, #4]
     9ac:	9b06      	ldr	r3, [sp, #24]
     9ae:	9302      	str	r3, [sp, #8]
     9b0:	9b06      	ldr	r3, [sp, #24]
     9b2:	9303      	str	r3, [sp, #12]
     9b4:	47a8      	blx	r5
     9b6:	9901      	ldr	r1, [sp, #4]
     9b8:	1c07      	adds	r7, r0, #0
     9ba:	9800      	ldr	r0, [sp, #0]
     9bc:	47a8      	blx	r5
     9be:	1c01      	adds	r1, r0, #0
     9c0:	1c38      	adds	r0, r7, #0
     9c2:	47b0      	blx	r6
     9c4:	9903      	ldr	r1, [sp, #12]
     9c6:	1c07      	adds	r7, r0, #0
     9c8:	9802      	ldr	r0, [sp, #8]
     9ca:	47a8      	blx	r5
     9cc:	1c01      	adds	r1, r0, #0
     9ce:	1c38      	adds	r0, r7, #0
     9d0:	47b0      	blx	r6
     9d2:	900a      	str	r0, [sp, #40]	; 0x28


        if (sumAccel > 1.3) {
     9d4:	980a      	ldr	r0, [sp, #40]	; 0x28
     9d6:	4b1a      	ldr	r3, [pc, #104]	; (a40 <main+0x1f8>)
     9d8:	4798      	blx	r3
     9da:	4a1a      	ldr	r2, [pc, #104]	; (a44 <main+0x1fc>)
     9dc:	4b1a      	ldr	r3, [pc, #104]	; (a48 <main+0x200>)
     9de:	4d1b      	ldr	r5, [pc, #108]	; (a4c <main+0x204>)
     9e0:	47a8      	blx	r5
     9e2:	2800      	cmp	r0, #0
     9e4:	d100      	bne.n	9e8 <main+0x1a0>
     9e6:	e75c      	b.n	8a2 <main+0x5a>
     9e8:	23fa      	movs	r3, #250	; 0xfa
     9ea:	005b      	lsls	r3, r3, #1
     9ec:	3b01      	subs	r3, #1
     9ee:	b29b      	uxth	r3, r3
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
     9f0:	2b00      	cmp	r3, #0
     9f2:	d1fb      	bne.n	9ec <main+0x1a4>
     9f4:	e755      	b.n	8a2 <main+0x5a>
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	00000529 	.word	0x00000529
     9fc:	00000499 	.word	0x00000499
     a00:	00000a51 	.word	0x00000a51
     a04:	00001001 	.word	0x00001001
     a08:	00001949 	.word	0x00001949
     a0c:	42480000 	.word	0x42480000
     a10:	00001e19 	.word	0x00001e19
     a14:	00001625 	.word	0x00001625
     a18:	00000db9 	.word	0x00000db9
     a1c:	00000e2d 	.word	0x00000e2d
     a20:	20000462 	.word	0x20000462
     a24:	00000f95 	.word	0x00000f95
     a28:	0000153d 	.word	0x0000153d
     a2c:	20000460 	.word	0x20000460
     a30:	41a00000 	.word	0x41a00000
     a34:	41200000 	.word	0x41200000
     a38:	40400000 	.word	0x40400000
     a3c:	00001bd9 	.word	0x00001bd9
     a40:	00002f81 	.word	0x00002f81
     a44:	cccccccd 	.word	0xcccccccd
     a48:	3ff4cccc 	.word	0x3ff4cccc
     a4c:	000015a9 	.word	0x000015a9

00000a50 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a50:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a52:	4c08      	ldr	r4, [pc, #32]	; (a74 <IMUinit+0x24>)
     a54:	2580      	movs	r5, #128	; 0x80
     a56:	0023      	movs	r3, r4
     a58:	00ed      	lsls	r5, r5, #3
     a5a:	3394      	adds	r3, #148	; 0x94
     a5c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     a5e:	4e06      	ldr	r6, [pc, #24]	; (a78 <IMUinit+0x28>)
     a60:	210f      	movs	r1, #15
     a62:	2000      	movs	r0, #0
     a64:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a66:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     a68:	210c      	movs	r1, #12
     a6a:	2000      	movs	r0, #0
     a6c:	47b0      	blx	r6
     a6e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	41004400 	.word	0x41004400
     a78:	00001525 	.word	0x00001525

00000a7c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a7c:	2380      	movs	r3, #128	; 0x80
     a7e:	4a10      	ldr	r2, [pc, #64]	; (ac0 <adcInit+0x44>)
     a80:	025b      	lsls	r3, r3, #9
     a82:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a84:	480f      	ldr	r0, [pc, #60]	; (ac4 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a86:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a88:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     a8a:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a8c:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a8e:	4a0f      	ldr	r2, [pc, #60]	; (acc <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     a90:	00c9      	lsls	r1, r1, #3
     a92:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a94:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     a96:	4a0e      	ldr	r2, [pc, #56]	; (ad0 <adcInit+0x54>)
     a98:	6810      	ldr	r0, [r2, #0]
     a9a:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     a9c:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     a9e:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     aa0:	4a0c      	ldr	r2, [pc, #48]	; (ad4 <adcInit+0x58>)
     aa2:	6812      	ldr	r2, [r2, #0]
     aa4:	0ed2      	lsrs	r2, r2, #27
     aa6:	4302      	orrs	r2, r0
     aa8:	b2d2      	uxtb	r2, r2
        ) |
     aaa:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     aac:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     aae:	2202      	movs	r2, #2
     ab0:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     ab2:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ab4:	7e5a      	ldrb	r2, [r3, #25]
     ab6:	b252      	sxtb	r2, r2
     ab8:	2a00      	cmp	r2, #0
     aba:	dbfb      	blt.n	ab4 <adcInit+0x38>
}
     abc:	4770      	bx	lr
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	40000400 	.word	0x40000400
     ac4:	0000401e 	.word	0x0000401e
     ac8:	42004000 	.word	0x42004000
     acc:	40000c00 	.word	0x40000c00
     ad0:	00806024 	.word	0x00806024
     ad4:	00806020 	.word	0x00806020

00000ad8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     ad8:	2202      	movs	r2, #2
     ada:	4b04      	ldr	r3, [pc, #16]	; (aec <adcSample+0x14>)
     adc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     ade:	3a01      	subs	r2, #1
     ae0:	7e19      	ldrb	r1, [r3, #24]
     ae2:	4211      	tst	r1, r2
     ae4:	d0fc      	beq.n	ae0 <adcSample+0x8>
    return ADC->RESULT.reg;
     ae6:	8b58      	ldrh	r0, [r3, #26]
     ae8:	b280      	uxth	r0, r0
}
     aea:	4770      	bx	lr
     aec:	42004000 	.word	0x42004000

00000af0 <adc_read>:


u16_t adc_read(Pin p) {
     af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
     af2:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     af4:	2101      	movs	r1, #1
     af6:	0c02      	lsrs	r2, r0, #16
     af8:	9000      	str	r0, [sp, #0]
     afa:	b2d2      	uxtb	r2, r2
     afc:	0e00      	lsrs	r0, r0, #24
     afe:	0843      	lsrs	r3, r0, #1
     b00:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b02:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     b04:	4208      	tst	r0, r1
     b06:	d01a      	beq.n	b3e <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b08:	240f      	movs	r4, #15
     b0a:	4910      	ldr	r1, [pc, #64]	; (b4c <adc_read+0x5c>)
     b0c:	185b      	adds	r3, r3, r1
     b0e:	7819      	ldrb	r1, [r3, #0]
     b10:	400c      	ands	r4, r1
     b12:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b14:	4321      	orrs	r1, r4
     b16:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     b18:	4b0d      	ldr	r3, [pc, #52]	; (b50 <adc_read+0x60>)
     b1a:	1880      	adds	r0, r0, r2
     b1c:	18c0      	adds	r0, r0, r3
     b1e:	2301      	movs	r3, #1
     b20:	7802      	ldrb	r2, [r0, #0]
     b22:	4313      	orrs	r3, r2
     b24:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b26:	466b      	mov	r3, sp
     b28:	221f      	movs	r2, #31
     b2a:	791b      	ldrb	r3, [r3, #4]
     b2c:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     b2e:	23c0      	movs	r3, #192	; 0xc0
     b30:	015b      	lsls	r3, r3, #5
     b32:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     b34:	4a07      	ldr	r2, [pc, #28]	; (b54 <adc_read+0x64>)
     b36:	6113      	str	r3, [r2, #16]

    return adcSample();
     b38:	4b07      	ldr	r3, [pc, #28]	; (b58 <adc_read+0x68>)
     b3a:	4798      	blx	r3
     b3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     b3e:	250f      	movs	r5, #15
     b40:	4c02      	ldr	r4, [pc, #8]	; (b4c <adc_read+0x5c>)
     b42:	191b      	adds	r3, r3, r4
     b44:	781c      	ldrb	r4, [r3, #0]
     b46:	43ac      	bics	r4, r5
     b48:	e7e4      	b.n	b14 <adc_read+0x24>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	41004430 	.word	0x41004430
     b50:	41004440 	.word	0x41004440
     b54:	42004000 	.word	0x42004000
     b58:	00000ad9 	.word	0x00000ad9

00000b5c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     b5c:	0c01      	lsrs	r1, r0, #16
     b5e:	0c13      	lsrs	r3, r2, #16
     b60:	b5f0      	push	{r4, r5, r6, r7, lr}
     b62:	b2cd      	uxtb	r5, r1
     b64:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b66:	2301      	movs	r3, #1
     b68:	001e      	movs	r6, r3
     b6a:	0e12      	lsrs	r2, r2, #24
     b6c:	4093      	lsls	r3, r2
     b6e:	0e00      	lsrs	r0, r0, #24
     b70:	4086      	lsls	r6, r0
     b72:	001a      	movs	r2, r3
     b74:	2308      	movs	r3, #8
     b76:	0030      	movs	r0, r6
     b78:	4e11      	ldr	r6, [pc, #68]	; (bc0 <byteOut+0x64>)
     b7a:	01c9      	lsls	r1, r1, #7
     b7c:	b087      	sub	sp, #28
     b7e:	198f      	adds	r7, r1, r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b80:	4e10      	ldr	r6, [pc, #64]	; (bc4 <byteOut+0x68>)
     b82:	ac0c      	add	r4, sp, #48	; 0x30
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b84:	01ed      	lsls	r5, r5, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b86:	19ae      	adds	r6, r5, r6
     b88:	7824      	ldrb	r4, [r4, #0]
     b8a:	9601      	str	r6, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b8c:	4e0c      	ldr	r6, [pc, #48]	; (bc0 <byteOut+0x64>)
     b8e:	46b4      	mov	ip, r6
     b90:	44ac      	add	ip, r5
     b92:	4666      	mov	r6, ip
     b94:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     b96:	b266      	sxtb	r6, r4
     b98:	2e00      	cmp	r6, #0
     b9a:	da0e      	bge.n	bba <byteOut+0x5e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b9c:	4e09      	ldr	r6, [pc, #36]	; (bc4 <byteOut+0x68>)
     b9e:	46b4      	mov	ip, r6
     ba0:	448c      	add	ip, r1
     ba2:	4666      	mov	r6, ip
     ba4:	6032      	str	r2, [r6, #0]
     ba6:	9e01      	ldr	r6, [sp, #4]
     ba8:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     baa:	0064      	lsls	r4, r4, #1
     bac:	b2db      	uxtb	r3, r3
     bae:	6030      	str	r0, [r6, #0]
     bb0:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i<8; ++i) {
     bb2:	2b00      	cmp	r3, #0
     bb4:	d1ea      	bne.n	b8c <byteOut+0x30>
	}
}
     bb6:	b007      	add	sp, #28
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bba:	603a      	str	r2, [r7, #0]
     bbc:	e7f3      	b.n	ba6 <byteOut+0x4a>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	41004414 	.word	0x41004414
     bc4:	41004418 	.word	0x41004418

00000bc8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bca:	2501      	movs	r5, #1
     bcc:	b085      	sub	sp, #20
     bce:	0c06      	lsrs	r6, r0, #16
     bd0:	9301      	str	r3, [sp, #4]
     bd2:	b2f3      	uxtb	r3, r6
     bd4:	002e      	movs	r6, r5
     bd6:	9103      	str	r1, [sp, #12]
     bd8:	0011      	movs	r1, r2
     bda:	0c14      	lsrs	r4, r2, #16
     bdc:	9200      	str	r2, [sp, #0]
     bde:	0e02      	lsrs	r2, r0, #24
     be0:	9002      	str	r0, [sp, #8]
     be2:	4096      	lsls	r6, r2
	uint8_t byte = 0x00;
     be4:	2000      	movs	r0, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     be6:	b2e2      	uxtb	r2, r4
     be8:	2408      	movs	r4, #8
     bea:	0e09      	lsrs	r1, r1, #24
     bec:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bee:	490a      	ldr	r1, [pc, #40]	; (c18 <byteIn+0x50>)
     bf0:	01db      	lsls	r3, r3, #7
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bf2:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bf4:	185b      	adds	r3, r3, r1
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bf6:	1852      	adds	r2, r2, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bf8:	615e      	str	r6, [r3, #20]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     bfa:	6a11      	ldr	r1, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     bfc:	0040      	lsls	r0, r0, #1
     bfe:	4029      	ands	r1, r5
     c00:	1e4f      	subs	r7, r1, #1
     c02:	41b9      	sbcs	r1, r7
     c04:	3c01      	subs	r4, #1
     c06:	4308      	orrs	r0, r1
     c08:	b2e4      	uxtb	r4, r4
     c0a:	b2c0      	uxtb	r0, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c0c:	619e      	str	r6, [r3, #24]
	for (uint8_t i = 0; i<8; ++i) {
     c0e:	2c00      	cmp	r4, #0
     c10:	d1f2      	bne.n	bf8 <byteIn+0x30>
		pinHigh(SCK_PIN);
	}
	return byte;
     c12:	b005      	add	sp, #20
     c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	41004400 	.word	0x41004400

00000c1c <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c1c:	23c2      	movs	r3, #194	; 0xc2
     c1e:	4a16      	ldr	r2, [pc, #88]	; (c78 <GclkInit+0x5c>)
     c20:	00db      	lsls	r3, r3, #3
void GclkInit() {
     c22:	b510      	push	{r4, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c24:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     c26:	2302      	movs	r3, #2
     c28:	4914      	ldr	r1, [pc, #80]	; (c7c <GclkInit+0x60>)
     c2a:	6848      	ldr	r0, [r1, #4]
     c2c:	4303      	orrs	r3, r0
     c2e:	604b      	str	r3, [r1, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c30:	4b13      	ldr	r3, [pc, #76]	; (c80 <GclkInit+0x64>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     c36:	2b3f      	cmp	r3, #63	; 0x3f
     c38:	d100      	bne.n	c3c <GclkInit+0x20>
        coarse = 0x1f;
     c3a:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     c3c:	4911      	ldr	r1, [pc, #68]	; (c84 <GclkInit+0x68>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     c3e:	4812      	ldr	r0, [pc, #72]	; (c88 <GclkInit+0x6c>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     c40:	6809      	ldr	r1, [r1, #0]
     c42:	0589      	lsls	r1, r1, #22
     c44:	0d89      	lsrs	r1, r1, #22
    if (fine == 0x3ff) {
     c46:	4281      	cmp	r1, r0
     c48:	d100      	bne.n	c4c <GclkInit+0x30>
        fine = 0x1ff;
     c4a:	4910      	ldr	r1, [pc, #64]	; (c8c <GclkInit+0x70>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c4c:	4810      	ldr	r0, [pc, #64]	; (c90 <GclkInit+0x74>)
     c4e:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c50:	2010      	movs	r0, #16
     c52:	68d4      	ldr	r4, [r2, #12]
     c54:	4204      	tst	r4, r0
     c56:	d0fc      	beq.n	c52 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     c58:	029b      	lsls	r3, r3, #10
     c5a:	430b      	orrs	r3, r1
     c5c:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     c5e:	2310      	movs	r3, #16
     c60:	68d1      	ldr	r1, [r2, #12]
     c62:	4219      	tst	r1, r3
     c64:	d0fc      	beq.n	c60 <GclkInit+0x44>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <GclkInit+0x78>)
     c68:	8493      	strh	r3, [r2, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c6a:	2280      	movs	r2, #128	; 0x80
     c6c:	4b0a      	ldr	r3, [pc, #40]	; (c98 <GclkInit+0x7c>)
     c6e:	0052      	lsls	r2, r2, #1
     c70:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     c72:	4a0a      	ldr	r2, [pc, #40]	; (c9c <GclkInit+0x80>)
     c74:	605a      	str	r2, [r3, #4]
}
     c76:	bd10      	pop	{r4, pc}
     c78:	40000800 	.word	0x40000800
     c7c:	41004000 	.word	0x41004000
     c80:	00806024 	.word	0x00806024
     c84:	00806028 	.word	0x00806028
     c88:	000003ff 	.word	0x000003ff
     c8c:	000001ff 	.word	0x000001ff
     c90:	00000522 	.word	0x00000522
     c94:	000005a2 	.word	0x000005a2
     c98:	40000c00 	.word	0x40000c00
     c9c:	00010700 	.word	0x00010700

00000ca0 <RtcInit>:

void RtcInit() {
     ca0:	b510      	push	{r4, lr}

    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ca2:	4b25      	ldr	r3, [pc, #148]	; (d38 <RtcInit+0x98>)
    SYSCTRL->OSC32K.bit.CALIB =
     ca4:	4c25      	ldr	r4, [pc, #148]	; (d3c <RtcInit+0x9c>)
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ca6:	681a      	ldr	r2, [r3, #0]
    SYSCTRL->OSC32K.bit.CALIB =
     ca8:	4b25      	ldr	r3, [pc, #148]	; (d40 <RtcInit+0xa0>)
     caa:	04d2      	lsls	r2, r2, #19
     cac:	6998      	ldr	r0, [r3, #24]
     cae:	0e52      	lsrs	r2, r2, #25
     cb0:	0412      	lsls	r2, r2, #16
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     cb2:	4924      	ldr	r1, [pc, #144]	; (d44 <RtcInit+0xa4>)
    SYSCTRL->OSC32K.bit.CALIB =
     cb4:	4020      	ands	r0, r4
     cb6:	4310      	orrs	r0, r2
     cb8:	6198      	str	r0, [r3, #24]
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     cba:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     cbc:	6999      	ldr	r1, [r3, #24]
     cbe:	4021      	ands	r1, r4
     cc0:	430a      	orrs	r2, r1
     cc2:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     cc4:	2202      	movs	r2, #2
     cc6:	6999      	ldr	r1, [r3, #24]
     cc8:	430a      	orrs	r2, r1
     cca:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ccc:	2204      	movs	r2, #4
     cce:	68d9      	ldr	r1, [r3, #12]
     cd0:	4211      	tst	r1, r2
     cd2:	d0fc      	beq.n	cce <RtcInit+0x2e>
        /* Wait for oscillator stabilization */
    }


    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     cd4:	4a1c      	ldr	r2, [pc, #112]	; (d48 <RtcInit+0xa8>)
     cd6:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     cd8:	2281      	movs	r2, #129	; 0x81
     cda:	4b1c      	ldr	r3, [pc, #112]	; (d4c <RtcInit+0xac>)
     cdc:	0052      	lsls	r2, r2, #1
     cde:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ce0:	4a1b      	ldr	r2, [pc, #108]	; (d50 <RtcInit+0xb0>)
     ce2:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ce4:	785a      	ldrb	r2, [r3, #1]
     ce6:	b252      	sxtb	r2, r2
     ce8:	2a00      	cmp	r2, #0
     cea:	dbfb      	blt.n	ce4 <RtcInit+0x44>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     cec:	4a19      	ldr	r2, [pc, #100]	; (d54 <RtcInit+0xb4>)
     cee:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     cf0:	2204      	movs	r2, #4
     cf2:	4b19      	ldr	r3, [pc, #100]	; (d58 <RtcInit+0xb8>)
     cf4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     cf6:	7a9a      	ldrb	r2, [r3, #10]
     cf8:	09d2      	lsrs	r2, r2, #7
     cfa:	d1fc      	bne.n	cf6 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     cfc:	22a0      	movs	r2, #160	; 0xa0
     cfe:	8819      	ldrh	r1, [r3, #0]
     d00:	00d2      	lsls	r2, r2, #3
     d02:	430a      	orrs	r2, r1
     d04:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d06:	7a9a      	ldrb	r2, [r3, #10]
     d08:	09d2      	lsrs	r2, r2, #7
     d0a:	d1fc      	bne.n	d06 <RtcInit+0x66>

    RTC->MODE1.PER.reg = 998;
     d0c:	4a13      	ldr	r2, [pc, #76]	; (d5c <RtcInit+0xbc>)
     d0e:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d10:	7a9a      	ldrb	r2, [r3, #10]
     d12:	09d2      	lsrs	r2, r2, #7
     d14:	d1fc      	bne.n	d10 <RtcInit+0x70>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     d16:	8859      	ldrh	r1, [r3, #2]
     d18:	4a11      	ldr	r2, [pc, #68]	; (d60 <RtcInit+0xc0>)
     d1a:	430a      	orrs	r2, r1
     d1c:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     d1e:	2280      	movs	r2, #128	; 0x80
     d20:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     d22:	8819      	ldrh	r1, [r3, #0]
     d24:	3a7e      	subs	r2, #126	; 0x7e
     d26:	430a      	orrs	r2, r1
     d28:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d2a:	7a9a      	ldrb	r2, [r3, #10]
     d2c:	09d2      	lsrs	r2, r2, #7
     d2e:	d1fc      	bne.n	d2a <RtcInit+0x8a>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d30:	4b0c      	ldr	r3, [pc, #48]	; (d64 <RtcInit+0xc4>)
     d32:	3208      	adds	r2, #8
     d34:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     d36:	bd10      	pop	{r4, pc}
     d38:	00806024 	.word	0x00806024
     d3c:	ff80ffff 	.word	0xff80ffff
     d40:	40000800 	.word	0x40000800
     d44:	00000604 	.word	0x00000604
     d48:	00000606 	.word	0x00000606
     d4c:	40000c00 	.word	0x40000c00
     d50:	00230002 	.word	0x00230002
     d54:	00004204 	.word	0x00004204
     d58:	40001400 	.word	0x40001400
     d5c:	000003e6 	.word	0x000003e6
     d60:	00004010 	.word	0x00004010
     d64:	e000e100 	.word	0xe000e100

00000d68 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d68:	230f      	movs	r3, #15
     d6a:	4003      	ands	r3, r0
     d6c:	4808      	ldr	r0, [pc, #32]	; (d90 <gclkEnable+0x28>)
     d6e:	0212      	lsls	r2, r2, #8
     d70:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d72:	20f8      	movs	r0, #248	; 0xf8
     d74:	0209      	lsls	r1, r1, #8
     d76:	0140      	lsls	r0, r0, #5
     d78:	4001      	ands	r1, r0
     d7a:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
     d7c:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d7e:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d80:	4c04      	ldr	r4, [pc, #16]	; (d94 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d82:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d84:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d86:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     d88:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     d8a:	6060      	str	r0, [r4, #4]
}
     d8c:	bd10      	pop	{r4, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00ffff00 	.word	0x00ffff00
     d94:	40000c00 	.word	0x40000c00

00000d98 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     d98:	4b04      	ldr	r3, [pc, #16]	; (dac <delayInit+0x14>)
     d9a:	4a05      	ldr	r2, [pc, #20]	; (db0 <delayInit+0x18>)
     d9c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     d9e:	2230      	movs	r2, #48	; 0x30
     da0:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     da2:	4b04      	ldr	r3, [pc, #16]	; (db4 <delayInit+0x1c>)
     da4:	3a2b      	subs	r2, #43	; 0x2b
     da6:	601a      	str	r2, [r3, #0]
}
     da8:	4770      	bx	lr
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	20000004 	.word	0x20000004
     db0:	0000bb80 	.word	0x0000bb80
     db4:	e000e010 	.word	0xe000e010

00000db8 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     db8:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dba:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     dbc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     dbe:	4b07      	ldr	r3, [pc, #28]	; (ddc <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dc0:	0264      	lsls	r4, r4, #9
     dc2:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
     dc4:	4b06      	ldr	r3, [pc, #24]	; (de0 <delay_us+0x28>)
    while (n--) {
     dc6:	3801      	subs	r0, #1
     dc8:	d200      	bcs.n	dcc <delay_us+0x14>
    }
}
     dca:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     dcc:	2a00      	cmp	r2, #0
     dce:	d0fa      	beq.n	dc6 <delay_us+0xe>
        SysTick->LOAD = n;
     dd0:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     dd2:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dd4:	681d      	ldr	r5, [r3, #0]
     dd6:	4225      	tst	r5, r4
     dd8:	d0fc      	beq.n	dd4 <delay_us+0x1c>
     dda:	e7f4      	b.n	dc6 <delay_us+0xe>
     ddc:	20000004 	.word	0x20000004
     de0:	e000e010 	.word	0xe000e010

00000de4 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     de4:	b530      	push	{r4, r5, lr}
     de6:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     de8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     dec:	0264      	lsls	r4, r4, #9
     dee:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
     df0:	4b06      	ldr	r3, [pc, #24]	; (e0c <delay_ms+0x28>)
    while (n--) {
     df2:	3801      	subs	r0, #1
     df4:	d200      	bcs.n	df8 <delay_ms+0x14>
    }
}
     df6:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     df8:	2a00      	cmp	r2, #0
     dfa:	d0fa      	beq.n	df2 <delay_ms+0xe>
        SysTick->LOAD = n;
     dfc:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     dfe:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e00:	681d      	ldr	r5, [r3, #0]
     e02:	4225      	tst	r5, r4
     e04:	d0fc      	beq.n	e00 <delay_ms+0x1c>
     e06:	e7f4      	b.n	df2 <delay_ms+0xe>
     e08:	20000004 	.word	0x20000004
     e0c:	e000e010 	.word	0xe000e010

00000e10 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     e10:	21fa      	movs	r1, #250	; 0xfa
     e12:	4a04      	ldr	r2, [pc, #16]	; (e24 <RTC_Handler+0x14>)
     e14:	0089      	lsls	r1, r1, #2
     e16:	6813      	ldr	r3, [r2, #0]
     e18:	185b      	adds	r3, r3, r1
     e1a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     e1c:	22ff      	movs	r2, #255	; 0xff
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <RTC_Handler+0x18>)
     e20:	721a      	strb	r2, [r3, #8]
}
     e22:	4770      	bx	lr
     e24:	2000045c 	.word	0x2000045c
     e28:	40001400 	.word	0x40001400

00000e2c <millis>:

uint32_t millis(void) {
     e2c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     e2e:	f3ef 8110 	mrs	r1, PRIMASK
     e32:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e34:	4b09      	ldr	r3, [pc, #36]	; (e5c <millis+0x30>)
     e36:	4c0a      	ldr	r4, [pc, #40]	; (e60 <millis+0x34>)
     e38:	8a18      	ldrh	r0, [r3, #16]
     e3a:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e3c:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e3e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e40:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     e42:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
     e44:	2a00      	cmp	r2, #0
     e46:	d005      	beq.n	e54 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     e48:	22fa      	movs	r2, #250	; 0xfa
     e4a:	8a1b      	ldrh	r3, [r3, #16]
     e4c:	6820      	ldr	r0, [r4, #0]
     e4e:	0092      	lsls	r2, r2, #2
     e50:	1880      	adds	r0, r0, r2
     e52:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     e54:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     e58:	bd30      	pop	{r4, r5, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40001400 	.word	0x40001400
     e60:	2000045c 	.word	0x2000045c

00000e64 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     e64:	4a0d      	ldr	r2, [pc, #52]	; (e9c <TC4Init+0x38>)
     e66:	4b0e      	ldr	r3, [pc, #56]	; (ea0 <TC4Init+0x3c>)
     e68:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     e6a:	2380      	movs	r3, #128	; 0x80
     e6c:	4a0d      	ldr	r2, [pc, #52]	; (ea4 <TC4Init+0x40>)
     e6e:	015b      	lsls	r3, r3, #5
     e70:	6a11      	ldr	r1, [r2, #32]
     e72:	430b      	orrs	r3, r1
     e74:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     e76:	4b0c      	ldr	r3, [pc, #48]	; (ea8 <TC4Init+0x44>)
     e78:	4a0c      	ldr	r2, [pc, #48]	; (eac <TC4Init+0x48>)
     e7a:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     e7c:	2241      	movs	r2, #65	; 0x41
     e7e:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e80:	3a40      	subs	r2, #64	; 0x40
     e82:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     e84:	32ff      	adds	r2, #255	; 0xff
     e86:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     e88:	8819      	ldrh	r1, [r3, #0]
     e8a:	3afe      	subs	r2, #254	; 0xfe
     e8c:	430a      	orrs	r2, r1
     e8e:	801a      	strh	r2, [r3, #0]
     e90:	2280      	movs	r2, #128	; 0x80
     e92:	4b07      	ldr	r3, [pc, #28]	; (eb0 <TC4Init+0x4c>)
     e94:	0312      	lsls	r2, r2, #12
     e96:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     e98:	4770      	bx	lr
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	0000421c 	.word	0x0000421c
     ea0:	40000c00 	.word	0x40000c00
     ea4:	40000400 	.word	0x40000400
     ea8:	42003000 	.word	0x42003000
     eac:	00000904 	.word	0x00000904
     eb0:	e000e100 	.word	0xe000e100

00000eb4 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     eb4:	22ff      	movs	r2, #255	; 0xff
     eb6:	4b03      	ldr	r3, [pc, #12]	; (ec4 <TC4_Handler+0x10>)
     eb8:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     eba:	4b03      	ldr	r3, [pc, #12]	; (ec8 <TC4_Handler+0x14>)
     ebc:	3afe      	subs	r2, #254	; 0xfe
     ebe:	701a      	strb	r2, [r3, #0]
}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	42003000 	.word	0x42003000
     ec8:	20000462 	.word	0x20000462

00000ecc <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     ecc:	4a0d      	ldr	r2, [pc, #52]	; (f04 <TC5Init+0x38>)
     ece:	4b0e      	ldr	r3, [pc, #56]	; (f08 <TC5Init+0x3c>)
     ed0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     ed2:	2380      	movs	r3, #128	; 0x80
     ed4:	4a0d      	ldr	r2, [pc, #52]	; (f0c <TC5Init+0x40>)
     ed6:	019b      	lsls	r3, r3, #6
     ed8:	6a11      	ldr	r1, [r2, #32]
     eda:	430b      	orrs	r3, r1
     edc:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ede:	4b0c      	ldr	r3, [pc, #48]	; (f10 <TC5Init+0x44>)
     ee0:	4a0c      	ldr	r2, [pc, #48]	; (f14 <TC5Init+0x48>)
     ee2:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
     ee4:	2280      	movs	r2, #128	; 0x80
     ee6:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ee8:	3a7f      	subs	r2, #127	; 0x7f
     eea:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     eec:	32ff      	adds	r2, #255	; 0xff
     eee:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ef0:	8819      	ldrh	r1, [r3, #0]
     ef2:	3afe      	subs	r2, #254	; 0xfe
     ef4:	430a      	orrs	r2, r1
     ef6:	801a      	strh	r2, [r3, #0]
     ef8:	2280      	movs	r2, #128	; 0x80
     efa:	4b07      	ldr	r3, [pc, #28]	; (f18 <TC5Init+0x4c>)
     efc:	0352      	lsls	r2, r2, #13
     efe:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     f00:	4770      	bx	lr
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	0000421c 	.word	0x0000421c
     f08:	40000c00 	.word	0x40000c00
     f0c:	40000400 	.word	0x40000400
     f10:	42003400 	.word	0x42003400
     f14:	00000e04 	.word	0x00000e04
     f18:	e000e100 	.word	0xe000e100

00000f1c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     f1c:	22ff      	movs	r2, #255	; 0xff
     f1e:	4b03      	ldr	r3, [pc, #12]	; (f2c <TC5_Handler+0x10>)
     f20:	739a      	strb	r2, [r3, #14]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f22:	2280      	movs	r2, #128	; 0x80
     f24:	4b02      	ldr	r3, [pc, #8]	; (f30 <TC5_Handler+0x14>)
     f26:	0352      	lsls	r2, r2, #13
     f28:	61da      	str	r2, [r3, #28]
    pinToggle(LedPin);
     f2a:	4770      	bx	lr
     f2c:	42003400 	.word	0x42003400
     f30:	41004400 	.word	0x41004400

00000f34 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     f36:	27c0      	movs	r7, #192	; 0xc0
     f38:	4d10      	ldr	r5, [pc, #64]	; (f7c <dmaInit+0x48>)
     f3a:	003a      	movs	r2, r7
     f3c:	4e10      	ldr	r6, [pc, #64]	; (f80 <dmaInit+0x4c>)
     f3e:	0028      	movs	r0, r5
     f40:	2100      	movs	r1, #0
     f42:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     f44:	4c0f      	ldr	r4, [pc, #60]	; (f84 <dmaInit+0x50>)
     f46:	003a      	movs	r2, r7
     f48:	2100      	movs	r1, #0
     f4a:	0020      	movs	r0, r4
     f4c:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     f4e:	2220      	movs	r2, #32
     f50:	4b0d      	ldr	r3, [pc, #52]	; (f88 <dmaInit+0x54>)
     f52:	6959      	ldr	r1, [r3, #20]
     f54:	430a      	orrs	r2, r1
     f56:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f58:	2210      	movs	r2, #16
     f5a:	69d9      	ldr	r1, [r3, #28]
     f5c:	430a      	orrs	r2, r1

	DMAC->CTRL.bit.DMAENABLE = 0;
     f5e:	2102      	movs	r1, #2
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     f60:	61da      	str	r2, [r3, #28]
	DMAC->CTRL.bit.DMAENABLE = 0;
     f62:	4b0a      	ldr	r3, [pc, #40]	; (f8c <dmaInit+0x58>)
     f64:	881a      	ldrh	r2, [r3, #0]
     f66:	438a      	bics	r2, r1
     f68:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     f6a:	2201      	movs	r2, #1
     f6c:	8819      	ldrh	r1, [r3, #0]
     f6e:	430a      	orrs	r2, r1
     f70:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f72:	4a07      	ldr	r2, [pc, #28]	; (f90 <dmaInit+0x5c>)
	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     f74:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     f76:	639c      	str	r4, [r3, #56]	; 0x38
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     f78:	801a      	strh	r2, [r3, #0]
}
     f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f7c:	20000530 	.word	0x20000530
     f80:	000031bd 	.word	0x000031bd
     f84:	20000470 	.word	0x20000470
     f88:	40000400 	.word	0x40000400
     f8c:	41004800 	.word	0x41004800
     f90:	00000f02 	.word	0x00000f02

00000f94 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
     f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	


    switch(my_altimeter->myFlightState) {
     f96:	7803      	ldrb	r3, [r0, #0]
void flight(Altimeter *my_altimeter) {
     f98:	0004      	movs	r4, r0
    switch(my_altimeter->myFlightState) {
     f9a:	2b00      	cmp	r3, #0
     f9c:	d123      	bne.n	fe6 <flight+0x52>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     f9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
     fa0:	4b11      	ldr	r3, [pc, #68]	; (fe8 <flight+0x54>)
     fa2:	4798      	blx	r3
     fa4:	4d11      	ldr	r5, [pc, #68]	; (fec <flight+0x58>)
     fa6:	2200      	movs	r2, #0
     fa8:	4b11      	ldr	r3, [pc, #68]	; (ff0 <flight+0x5c>)
     faa:	47a8      	blx	r5
     fac:	4b0e      	ldr	r3, [pc, #56]	; (fe8 <flight+0x54>)
     fae:	0006      	movs	r6, r0
     fb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     fb2:	000f      	movs	r7, r1
     fb4:	4798      	blx	r3
     fb6:	2200      	movs	r2, #0
     fb8:	4b0d      	ldr	r3, [pc, #52]	; (ff0 <flight+0x5c>)
     fba:	47a8      	blx	r5
     fbc:	4d0d      	ldr	r5, [pc, #52]	; (ff4 <flight+0x60>)
     fbe:	0002      	movs	r2, r0
     fc0:	000b      	movs	r3, r1
     fc2:	0030      	movs	r0, r6
     fc4:	0039      	movs	r1, r7
     fc6:	47a8      	blx	r5
     fc8:	4b0b      	ldr	r3, [pc, #44]	; (ff8 <flight+0x64>)
     fca:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     fcc:	4d0b      	ldr	r5, [pc, #44]	; (ffc <flight+0x68>)
        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
     fce:	63a0      	str	r0, [r4, #56]	; 0x38
        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
     fd0:	47a8      	blx	r5
     fd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     fd4:	1ac0      	subs	r0, r0, r3
     fd6:	23fa      	movs	r3, #250	; 0xfa
     fd8:	00db      	lsls	r3, r3, #3
     fda:	4298      	cmp	r0, r3
     fdc:	d903      	bls.n	fe6 <flight+0x52>
            //recursive filter
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer; 
     fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     fe0:	6363      	str	r3, [r4, #52]	; 0x34
            my_altimeter->myIMU.offsetBufferTime = millis();
     fe2:	47a8      	blx	r5
     fe4:	6320      	str	r0, [r4, #48]	; 0x30

        break;
    }


     fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fe8:	00002f81 	.word	0x00002f81
     fec:	000029fd 	.word	0x000029fd
     ff0:	3fe00000 	.word	0x3fe00000
     ff4:	000021dd 	.word	0x000021dd
     ff8:	00003025 	.word	0x00003025
     ffc:	00000e2d 	.word	0x00000e2d

00001000 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	0007      	movs	r7, r0
    1004:	b087      	sub	sp, #28

    my_altimeter->sampleTick = millis();
    1006:	4bec      	ldr	r3, [pc, #944]	; (13b8 <sampleTick+0x3b8>)
    1008:	4798      	blx	r3
    100a:	003b      	movs	r3, r7

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
    100c:	4ceb      	ldr	r4, [pc, #940]	; (13bc <sampleTick+0x3bc>)
    my_altimeter->sampleTick = millis();
    100e:	3308      	adds	r3, #8
    1010:	67d8      	str	r0, [r3, #124]	; 0x7c
    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
    1012:	7863      	ldrb	r3, [r4, #1]
    1014:	7820      	ldrb	r0, [r4, #0]
    1016:	021b      	lsls	r3, r3, #8
    1018:	4303      	orrs	r3, r0
    101a:	78a0      	ldrb	r0, [r4, #2]
    101c:	4de8      	ldr	r5, [pc, #928]	; (13c0 <sampleTick+0x3c0>)
    101e:	0400      	lsls	r0, r0, #16
    1020:	4303      	orrs	r3, r0
    1022:	78e0      	ldrb	r0, [r4, #3]
    1024:	7921      	ldrb	r1, [r4, #4]
    1026:	0600      	lsls	r0, r0, #24
    1028:	4318      	orrs	r0, r3
    102a:	47a8      	blx	r5
    102c:	4be5      	ldr	r3, [pc, #916]	; (13c4 <sampleTick+0x3c4>)
    102e:	4798      	blx	r3
    1030:	4ae5      	ldr	r2, [pc, #916]	; (13c8 <sampleTick+0x3c8>)
    1032:	4be6      	ldr	r3, [pc, #920]	; (13cc <sampleTick+0x3cc>)
    1034:	4ee6      	ldr	r6, [pc, #920]	; (13d0 <sampleTick+0x3d0>)
    1036:	47b0      	blx	r6
    1038:	4ee6      	ldr	r6, [pc, #920]	; (13d4 <sampleTick+0x3d4>)
    103a:	47b0      	blx	r6
    my_altimeter->senseA = adc_read(senseAPin);
    103c:	79a3      	ldrb	r3, [r4, #6]
    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
    103e:	67b8      	str	r0, [r7, #120]	; 0x78
    my_altimeter->senseA = adc_read(senseAPin);
    1040:	7960      	ldrb	r0, [r4, #5]
    1042:	021b      	lsls	r3, r3, #8
    1044:	4303      	orrs	r3, r0
    1046:	79e0      	ldrb	r0, [r4, #7]
    1048:	7a61      	ldrb	r1, [r4, #9]
    104a:	0400      	lsls	r0, r0, #16
    104c:	4303      	orrs	r3, r0
    104e:	7a20      	ldrb	r0, [r4, #8]
    1050:	0600      	lsls	r0, r0, #24
    1052:	4318      	orrs	r0, r3
    1054:	47a8      	blx	r5
    1056:	003b      	movs	r3, r7
    1058:	337c      	adds	r3, #124	; 0x7c
    105a:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    105c:	7ae3      	ldrb	r3, [r4, #11]
    105e:	7aa0      	ldrb	r0, [r4, #10]
    1060:	021b      	lsls	r3, r3, #8
    1062:	4303      	orrs	r3, r0
    1064:	7b20      	ldrb	r0, [r4, #12]
    1066:	7ba1      	ldrb	r1, [r4, #14]
    1068:	0400      	lsls	r0, r0, #16
    106a:	4303      	orrs	r3, r0
    106c:	7b60      	ldrb	r0, [r4, #13]
    106e:	0600      	lsls	r0, r0, #24
    1070:	4318      	orrs	r0, r3
    1072:	47a8      	blx	r5
    1074:	003b      	movs	r3, r7
    1076:	337e      	adds	r3, #126	; 0x7e
    1078:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseC = adc_read(senseCPin);
    107a:	7c23      	ldrb	r3, [r4, #16]
    107c:	7be0      	ldrb	r0, [r4, #15]
    107e:	021b      	lsls	r3, r3, #8
    1080:	4303      	orrs	r3, r0
    1082:	7c60      	ldrb	r0, [r4, #17]
    1084:	7ce1      	ldrb	r1, [r4, #19]
    1086:	0400      	lsls	r0, r0, #16
    1088:	4303      	orrs	r3, r0
    108a:	7ca0      	ldrb	r0, [r4, #18]
    108c:	0600      	lsls	r0, r0, #24
    108e:	4318      	orrs	r0, r3
    1090:	47a8      	blx	r5
    1092:	003b      	movs	r3, r7
    1094:	3380      	adds	r3, #128	; 0x80
    1096:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseD = adc_read(senseDPin);
    1098:	7d63      	ldrb	r3, [r4, #21]
    109a:	7d20      	ldrb	r0, [r4, #20]
    109c:	021b      	lsls	r3, r3, #8
    109e:	4303      	orrs	r3, r0
    10a0:	7da0      	ldrb	r0, [r4, #22]
    10a2:	7e21      	ldrb	r1, [r4, #24]
    10a4:	0400      	lsls	r0, r0, #16
    10a6:	4303      	orrs	r3, r0
    10a8:	7de0      	ldrb	r0, [r4, #23]
    10aa:	0600      	lsls	r0, r0, #24
    10ac:	4318      	orrs	r0, r3
    10ae:	47a8      	blx	r5
    10b0:	003b      	movs	r3, r7
    10b2:	3382      	adds	r3, #130	; 0x82
    10b4:	8018      	strh	r0, [r3, #0]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    10b6:	7ea3      	ldrb	r3, [r4, #26]
    10b8:	7e60      	ldrb	r0, [r4, #25]
    10ba:	021b      	lsls	r3, r3, #8
    10bc:	4303      	orrs	r3, r0
    10be:	7ee0      	ldrb	r0, [r4, #27]
    10c0:	7f61      	ldrb	r1, [r4, #29]
    10c2:	0400      	lsls	r0, r0, #16
    10c4:	4303      	orrs	r3, r0
    10c6:	7f20      	ldrb	r0, [r4, #28]
    10c8:	0600      	lsls	r0, r0, #24
    10ca:	4318      	orrs	r0, r3
    10cc:	47a8      	blx	r5
    10ce:	003b      	movs	r3, r7
    10d0:	3370      	adds	r3, #112	; 0x70
    10d2:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
    10d4:	4bc0      	ldr	r3, [pc, #768]	; (13d8 <sampleTick+0x3d8>)
    10d6:	18c0      	adds	r0, r0, r3
    10d8:	4bba      	ldr	r3, [pc, #744]	; (13c4 <sampleTick+0x3c4>)
    10da:	4798      	blx	r3
    10dc:	4abf      	ldr	r2, [pc, #764]	; (13dc <sampleTick+0x3dc>)
    10de:	4bc0      	ldr	r3, [pc, #768]	; (13e0 <sampleTick+0x3e0>)
    10e0:	4dbb      	ldr	r5, [pc, #748]	; (13d0 <sampleTick+0x3d0>)
    10e2:	47a8      	blx	r5
    10e4:	47b0      	blx	r6
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    10e6:	2680      	movs	r6, #128	; 0x80
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    10e8:	2250      	movs	r2, #80	; 0x50
    10ea:	0021      	movs	r1, r4
    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    10ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ee:	0236      	lsls	r6, r6, #8
    10f0:	643b      	str	r3, [r7, #64]	; 0x40
    10f2:	4bbc      	ldr	r3, [pc, #752]	; (13e4 <sampleTick+0x3e4>)
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
    10f4:	6778      	str	r0, [r7, #116]	; 0x74
    10f6:	615e      	str	r6, [r3, #20]
    byteOut(spi2SCK,spi2MOSI, 0x50);
    10f8:	0023      	movs	r3, r4
    10fa:	9200      	str	r2, [sp, #0]
    10fc:	7fe2      	ldrb	r2, [r4, #31]
    10fe:	7fa5      	ldrb	r5, [r4, #30]
    1100:	311e      	adds	r1, #30
    1102:	0212      	lsls	r2, r2, #8
    1104:	432a      	orrs	r2, r5
    1106:	788d      	ldrb	r5, [r1, #2]
    1108:	3323      	adds	r3, #35	; 0x23
    110a:	042d      	lsls	r5, r5, #16
    110c:	432a      	orrs	r2, r5
    110e:	78cd      	ldrb	r5, [r1, #3]
    1110:	24ff      	movs	r4, #255	; 0xff
    1112:	062d      	lsls	r5, r5, #24
    1114:	4315      	orrs	r5, r2
    1116:	790a      	ldrb	r2, [r1, #4]
    1118:	7819      	ldrb	r1, [r3, #0]
    111a:	9203      	str	r2, [sp, #12]
    111c:	785a      	ldrb	r2, [r3, #1]
    111e:	9502      	str	r5, [sp, #8]
    1120:	0212      	lsls	r2, r2, #8
    1122:	4311      	orrs	r1, r2
    1124:	789a      	ldrb	r2, [r3, #2]
    1126:	0412      	lsls	r2, r2, #16
    1128:	430a      	orrs	r2, r1
    112a:	78d9      	ldrb	r1, [r3, #3]
    112c:	791b      	ldrb	r3, [r3, #4]
    112e:	0609      	lsls	r1, r1, #24
    1130:	4311      	orrs	r1, r2
    1132:	9305      	str	r3, [sp, #20]
    1134:	002a      	movs	r2, r5
    1136:	0008      	movs	r0, r1
    1138:	9104      	str	r1, [sp, #16]
    113a:	9b03      	ldr	r3, [sp, #12]
    113c:	9905      	ldr	r1, [sp, #20]
    113e:	4daa      	ldr	r5, [pc, #680]	; (13e8 <sampleTick+0x3e8>)
    1140:	47a8      	blx	r5
    pinHigh(cs_baro);
    delay_us(500);
    1142:	20fa      	movs	r0, #250	; 0xfa
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1144:	4ba7      	ldr	r3, [pc, #668]	; (13e4 <sampleTick+0x3e4>)
    1146:	0040      	lsls	r0, r0, #1
    1148:	619e      	str	r6, [r3, #24]
    114a:	4ba8      	ldr	r3, [pc, #672]	; (13ec <sampleTick+0x3ec>)
    114c:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    114e:	4ba8      	ldr	r3, [pc, #672]	; (13f0 <sampleTick+0x3f0>)
    1150:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1152:	4ba4      	ldr	r3, [pc, #656]	; (13e4 <sampleTick+0x3e4>)
    1154:	61b8      	str	r0, [r7, #24]
    1156:	615e      	str	r6, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1158:	2342      	movs	r3, #66	; 0x42
    115a:	9a02      	ldr	r2, [sp, #8]
    115c:	9300      	str	r3, [sp, #0]
    115e:	9804      	ldr	r0, [sp, #16]
    1160:	9b03      	ldr	r3, [sp, #12]
    1162:	9905      	ldr	r1, [sp, #20]
    1164:	4da0      	ldr	r5, [pc, #640]	; (13e8 <sampleTick+0x3e8>)
    1166:	47a8      	blx	r5
    1168:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    116a:	4b9e      	ldr	r3, [pc, #632]	; (13e4 <sampleTick+0x3e4>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    116c:	00d2      	lsls	r2, r2, #3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    116e:	619e      	str	r6, [r3, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1170:	4ba0      	ldr	r3, [pc, #640]	; (13f4 <sampleTick+0x3f4>)
    pinHigh(cs_baro);

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    1172:	4ea1      	ldr	r6, [pc, #644]	; (13f8 <sampleTick+0x3f8>)
    1174:	601a      	str	r2, [r3, #0]
    1176:	2182      	movs	r1, #130	; 0x82
    1178:	2000      	movs	r0, #0
    117a:	47b0      	blx	r6
    //spiDataOut(SPI0, 0x80 | 0x02);

    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
    117c:	0021      	movs	r1, r4
    117e:	2000      	movs	r0, #0
    1180:	47b0      	blx	r6
    1182:	003b      	movs	r3, r7
    1184:	3359      	adds	r3, #89	; 0x59
    1186:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1188:	0021      	movs	r1, r4
    118a:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
    118c:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
    118e:	47b0      	blx	r6
    1190:	003b      	movs	r3, r7
    1192:	3358      	adds	r3, #88	; 0x58
    1194:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
    1196:	0021      	movs	r1, r4
    1198:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
    119a:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
    119c:	47b0      	blx	r6
    119e:	003b      	movs	r3, r7
    11a0:	335d      	adds	r3, #93	; 0x5d
    11a2:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
    11a4:	0021      	movs	r1, r4
    11a6:	2000      	movs	r0, #0
    11a8:	003d      	movs	r5, r7
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
    11aa:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
    11ac:	47b0      	blx	r6
    11ae:	355c      	adds	r5, #92	; 0x5c
    11b0:	7028      	strb	r0, [r5, #0]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
    11b2:	0021      	movs	r1, r4
    11b4:	2000      	movs	r0, #0
    11b6:	47b0      	blx	r6
    11b8:	003b      	movs	r3, r7
    11ba:	3361      	adds	r3, #97	; 0x61
    11bc:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
    11be:	0021      	movs	r1, r4
    11c0:	2000      	movs	r0, #0
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
    11c2:	9305      	str	r3, [sp, #20]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
    11c4:	47b0      	blx	r6
    11c6:	003b      	movs	r3, r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    11c8:	2280      	movs	r2, #128	; 0x80
    11ca:	3360      	adds	r3, #96	; 0x60
    11cc:	7018      	strb	r0, [r3, #0]
    11ce:	4b8b      	ldr	r3, [pc, #556]	; (13fc <sampleTick+0x3fc>)
    11d0:	00d2      	lsls	r2, r2, #3
    11d2:	601a      	str	r2, [r3, #0]
    //my_altimeter->myIMU.accelYHigh = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZLow = spiDataIn(SPI0);
    //my_altimeter->myIMU.accelZHigh = spiDataIn(SPI0);
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
    11d4:	9b02      	ldr	r3, [sp, #8]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    11d6:	003c      	movs	r4, r7
    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
    11d8:	781b      	ldrb	r3, [r3, #0]
    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    11da:	9a03      	ldr	r2, [sp, #12]
    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
    11dc:	469c      	mov	ip, r3
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
    11de:	782b      	ldrb	r3, [r5, #0]
    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    11e0:	345a      	adds	r4, #90	; 0x5a
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
    11e2:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    11e4:	4663      	mov	r3, ip
    11e6:	7811      	ldrb	r1, [r2, #0]
    11e8:	021b      	lsls	r3, r3, #8
    11ea:	4319      	orrs	r1, r3
    11ec:	b209      	sxth	r1, r1
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
    11ee:	9a04      	ldr	r2, [sp, #16]
    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
    11f0:	8021      	strh	r1, [r4, #0]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
    11f2:	9b02      	ldr	r3, [sp, #8]
    11f4:	7812      	ldrb	r2, [r2, #0]
    11f6:	021b      	lsls	r3, r3, #8
    11f8:	431a      	orrs	r2, r3
    11fa:	003b      	movs	r3, r7
    11fc:	b212      	sxth	r2, r2
    11fe:	335e      	adds	r3, #94	; 0x5e
    1200:	801a      	strh	r2, [r3, #0]
    1202:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
    1204:	9b05      	ldr	r3, [sp, #20]
    1206:	0205      	lsls	r5, r0, #8
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	003e      	movs	r6, r7
    120c:	432b      	orrs	r3, r5

    if (my_altimeter->myIMU.accelXHigh != 1) {
    120e:	4665      	mov	r5, ip
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
    1210:	b21b      	sxth	r3, r3
    1212:	3662      	adds	r6, #98	; 0x62
    1214:	8033      	strh	r3, [r6, #0]
    if (my_altimeter->myIMU.accelXHigh != 1) {
    1216:	2d01      	cmp	r5, #1
    1218:	d001      	beq.n	121e <sampleTick+0x21e>
    121a:	1109      	asrs	r1, r1, #4
        if (negativeX) {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    121c:	8021      	strh	r1, [r4, #0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
    121e:	9902      	ldr	r1, [sp, #8]
    1220:	2901      	cmp	r1, #1
    1222:	d002      	beq.n	122a <sampleTick+0x22a>
        if (negativeY) {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1224:	9903      	ldr	r1, [sp, #12]
    1226:	1112      	asrs	r2, r2, #4
    1228:	800a      	strh	r2, [r1, #0]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
    122a:	2801      	cmp	r0, #1
    122c:	d001      	beq.n	1232 <sampleTick+0x232>
    122e:	111b      	asrs	r3, r3, #4
        if (negativeZ) {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1230:	8033      	strh	r3, [r6, #0]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
    1232:	2300      	movs	r3, #0
    1234:	5ee0      	ldrsh	r0, [r4, r3]
    1236:	4b63      	ldr	r3, [pc, #396]	; (13c4 <sampleTick+0x3c4>)
    1238:	4798      	blx	r3
    123a:	4c65      	ldr	r4, [pc, #404]	; (13d0 <sampleTick+0x3d0>)
    123c:	4a70      	ldr	r2, [pc, #448]	; (1400 <sampleTick+0x400>)
    123e:	4b71      	ldr	r3, [pc, #452]	; (1404 <sampleTick+0x404>)
    1240:	47a0      	blx	r4
    1242:	4e64      	ldr	r6, [pc, #400]	; (13d4 <sampleTick+0x3d4>)
    1244:	47b0      	blx	r6
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    1246:	003b      	movs	r3, r7
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
    1248:	63f8      	str	r0, [r7, #60]	; 0x3c
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    124a:	335e      	adds	r3, #94	; 0x5e
    124c:	2000      	movs	r0, #0
    124e:	5e18      	ldrsh	r0, [r3, r0]
    1250:	4b5c      	ldr	r3, [pc, #368]	; (13c4 <sampleTick+0x3c4>)
    1252:	4798      	blx	r3
    1254:	4a6a      	ldr	r2, [pc, #424]	; (1400 <sampleTick+0x400>)
    1256:	4b6b      	ldr	r3, [pc, #428]	; (1404 <sampleTick+0x404>)
    1258:	47a0      	blx	r4
    125a:	47b0      	blx	r6
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    125c:	003b      	movs	r3, r7
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    125e:	6478      	str	r0, [r7, #68]	; 0x44
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    1260:	3362      	adds	r3, #98	; 0x62
    1262:	2000      	movs	r0, #0
    1264:	5e18      	ldrsh	r0, [r3, r0]
    1266:	4b57      	ldr	r3, [pc, #348]	; (13c4 <sampleTick+0x3c4>)
    1268:	4798      	blx	r3
    126a:	4a65      	ldr	r2, [pc, #404]	; (1400 <sampleTick+0x400>)
    126c:	4b65      	ldr	r3, [pc, #404]	; (1404 <sampleTick+0x404>)
    126e:	47a0      	blx	r4
    1270:	47b0      	blx	r6
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1272:	2380      	movs	r3, #128	; 0x80
    1274:	4a5b      	ldr	r2, [pc, #364]	; (13e4 <sampleTick+0x3e4>)
    1276:	00db      	lsls	r3, r3, #3


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    1278:	4e5f      	ldr	r6, [pc, #380]	; (13f8 <sampleTick+0x3f8>)
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    127a:	64b8      	str	r0, [r7, #72]	; 0x48
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    127c:	2182      	movs	r1, #130	; 0x82
    127e:	6153      	str	r3, [r2, #20]
    1280:	2000      	movs	r0, #0
    1282:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
    1284:	21ff      	movs	r1, #255	; 0xff
    1286:	2000      	movs	r0, #0
    1288:	47b0      	blx	r6
    128a:	003b      	movs	r3, r7
    128c:	3365      	adds	r3, #101	; 0x65
    128e:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1290:	21ff      	movs	r1, #255	; 0xff
    1292:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
    1294:	001d      	movs	r5, r3
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1296:	47b0      	blx	r6
    1298:	003b      	movs	r3, r7
    129a:	3364      	adds	r3, #100	; 0x64
    129c:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    129e:	21ff      	movs	r1, #255	; 0xff
    12a0:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    12a2:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    12a4:	47b0      	blx	r6
    12a6:	003b      	movs	r3, r7
    12a8:	3369      	adds	r3, #105	; 0x69
    12aa:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    12ac:	21ff      	movs	r1, #255	; 0xff
    12ae:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    12b0:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    12b2:	47b0      	blx	r6
    12b4:	003b      	movs	r3, r7
    12b6:	3368      	adds	r3, #104	; 0x68
    12b8:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    12ba:	21ff      	movs	r1, #255	; 0xff
    12bc:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    12be:	9304      	str	r3, [sp, #16]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    12c0:	47b0      	blx	r6
    12c2:	003b      	movs	r3, r7
    12c4:	336d      	adds	r3, #109	; 0x6d
    12c6:	7018      	strb	r0, [r3, #0]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
    12c8:	21ff      	movs	r1, #255	; 0xff
    12ca:	2000      	movs	r0, #0
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    12cc:	9305      	str	r3, [sp, #20]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
    12ce:	47b0      	blx	r6
    12d0:	003b      	movs	r3, r7
    12d2:	336c      	adds	r3, #108	; 0x6c
    12d4:	7018      	strb	r0, [r3, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12d6:	2380      	movs	r3, #128	; 0x80
    12d8:	4a42      	ldr	r2, [pc, #264]	; (13e4 <sampleTick+0x3e4>)
    12da:	00db      	lsls	r3, r3, #3
    12dc:	6193      	str	r3, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
    12de:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
    12e0:	9a03      	ldr	r2, [sp, #12]
    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
    12e2:	781e      	ldrb	r6, [r3, #0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
    12e4:	9b04      	ldr	r3, [sp, #16]
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
    12ea:	7829      	ldrb	r1, [r5, #0]
    12ec:	0233      	lsls	r3, r6, #8
    12ee:	4319      	orrs	r1, r3
    12f0:	2366      	movs	r3, #102	; 0x66
    12f2:	469c      	mov	ip, r3
    12f4:	44bc      	add	ip, r7
    12f6:	4663      	mov	r3, ip
    12f8:	b209      	sxth	r1, r1
    12fa:	8019      	strh	r1, [r3, #0]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
    12fc:	9b02      	ldr	r3, [sp, #8]
    12fe:	7812      	ldrb	r2, [r2, #0]
    1300:	021b      	lsls	r3, r3, #8
    1302:	431a      	orrs	r2, r3
    1304:	b213      	sxth	r3, r2
    1306:	9303      	str	r3, [sp, #12]
    1308:	466b      	mov	r3, sp
    130a:	899b      	ldrh	r3, [r3, #12]
    130c:	3505      	adds	r5, #5
    130e:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
    1310:	0203      	lsls	r3, r0, #8
    1312:	001a      	movs	r2, r3
    1314:	9b05      	ldr	r3, [sp, #20]
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	4313      	orrs	r3, r2
    131a:	003a      	movs	r2, r7
    131c:	b21b      	sxth	r3, r3
    131e:	326e      	adds	r2, #110	; 0x6e
    1320:	9204      	str	r2, [sp, #16]
    1322:	8013      	strh	r3, [r2, #0]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
    1324:	2e01      	cmp	r6, #1
    1326:	d002      	beq.n	132e <sampleTick+0x32e>
        if (negativeXgyro) {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1328:	4662      	mov	r2, ip
    132a:	1109      	asrs	r1, r1, #4
    132c:	8011      	strh	r1, [r2, #0]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
    132e:	9a02      	ldr	r2, [sp, #8]
    1330:	2a01      	cmp	r2, #1
    1332:	d002      	beq.n	133a <sampleTick+0x33a>
    1334:	9a03      	ldr	r2, [sp, #12]
    1336:	1112      	asrs	r2, r2, #4
        if (negativeYgyro) {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    1338:	802a      	strh	r2, [r5, #0]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
    133a:	2801      	cmp	r0, #1
    133c:	d002      	beq.n	1344 <sampleTick+0x344>
        if (negativeZgyro) {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    133e:	9a04      	ldr	r2, [sp, #16]
    1340:	111b      	asrs	r3, r3, #4
    1342:	8013      	strh	r3, [r2, #0]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
    1344:	003b      	movs	r3, r7
    1346:	3366      	adds	r3, #102	; 0x66
    1348:	2000      	movs	r0, #0
    134a:	5e18      	ldrsh	r0, [r3, r0]
    134c:	4e1d      	ldr	r6, [pc, #116]	; (13c4 <sampleTick+0x3c4>)
    134e:	47b0      	blx	r6
    1350:	4a2b      	ldr	r2, [pc, #172]	; (1400 <sampleTick+0x400>)
    1352:	4b2c      	ldr	r3, [pc, #176]	; (1404 <sampleTick+0x404>)
    1354:	47a0      	blx	r4
    1356:	4d1f      	ldr	r5, [pc, #124]	; (13d4 <sampleTick+0x3d4>)
    1358:	47a8      	blx	r5
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    135a:	003b      	movs	r3, r7
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
    135c:	64f8      	str	r0, [r7, #76]	; 0x4c
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    135e:	336a      	adds	r3, #106	; 0x6a
    1360:	2000      	movs	r0, #0
    1362:	5e18      	ldrsh	r0, [r3, r0]
    1364:	47b0      	blx	r6
    1366:	4a26      	ldr	r2, [pc, #152]	; (1400 <sampleTick+0x400>)
    1368:	4b26      	ldr	r3, [pc, #152]	; (1404 <sampleTick+0x404>)
    136a:	47a0      	blx	r4
    136c:	47a8      	blx	r5
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
    136e:	003b      	movs	r3, r7
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    1370:	6538      	str	r0, [r7, #80]	; 0x50
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
    1372:	336e      	adds	r3, #110	; 0x6e
    1374:	2000      	movs	r0, #0
    1376:	5e18      	ldrsh	r0, [r3, r0]
    1378:	47b0      	blx	r6
    137a:	4a21      	ldr	r2, [pc, #132]	; (1400 <sampleTick+0x400>)
    137c:	4b21      	ldr	r3, [pc, #132]	; (1404 <sampleTick+0x404>)
    137e:	47a0      	blx	r4
    1380:	47a8      	blx	r5
    1382:	6578      	str	r0, [r7, #84]	; 0x54

    delay_us(800);
    1384:	20c8      	movs	r0, #200	; 0xc8
    1386:	4b19      	ldr	r3, [pc, #100]	; (13ec <sampleTick+0x3ec>)
    1388:	0080      	lsls	r0, r0, #2
    138a:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    138c:	003e      	movs	r6, r7
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    138e:	4b18      	ldr	r3, [pc, #96]	; (13f0 <sampleTick+0x3f0>)
    1390:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1392:	3608      	adds	r6, #8
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1394:	6178      	str	r0, [r7, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1396:	4b1c      	ldr	r3, [pc, #112]	; (1408 <sampleTick+0x408>)
    1398:	0030      	movs	r0, r6
    139a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    139c:	0030      	movs	r0, r6
    139e:	4b1b      	ldr	r3, [pc, #108]	; (140c <sampleTick+0x40c>)
    13a0:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    13a2:	4b1b      	ldr	r3, [pc, #108]	; (1410 <sampleTick+0x410>)
    13a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    13a6:	4798      	blx	r3
    13a8:	4a1a      	ldr	r2, [pc, #104]	; (1414 <sampleTick+0x414>)
    13aa:	4b1b      	ldr	r3, [pc, #108]	; (1418 <sampleTick+0x418>)
    13ac:	47a0      	blx	r4
    13ae:	47a8      	blx	r5
    13b0:	62f8      	str	r0, [r7, #44]	; 0x2c


}
    13b2:	b007      	add	sp, #28
    13b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	00000e2d 	.word	0x00000e2d
    13bc:	000034c4 	.word	0x000034c4
    13c0:	00000af1 	.word	0x00000af1
    13c4:	00002efd 	.word	0x00002efd
    13c8:	eaa2a0a9 	.word	0xeaa2a0a9
    13cc:	3f5f3a57 	.word	0x3f5f3a57
    13d0:	000029fd 	.word	0x000029fd
    13d4:	00003025 	.word	0x00003025
    13d8:	fffff0da 	.word	0xfffff0da
    13dc:	367a0f91 	.word	0x367a0f91
    13e0:	bf973eab 	.word	0xbf973eab
    13e4:	41004400 	.word	0x41004400
    13e8:	00000b5d 	.word	0x00000b5d
    13ec:	00000db9 	.word	0x00000db9
    13f0:	000001e5 	.word	0x000001e5
    13f4:	41004494 	.word	0x41004494
    13f8:	00001525 	.word	0x00001525
    13fc:	41004498 	.word	0x41004498
    1400:	e94ee393 	.word	0xe94ee393
    1404:	3f7ffd60 	.word	0x3f7ffd60
    1408:	0000028d 	.word	0x0000028d
    140c:	00000379 	.word	0x00000379
    1410:	00002f81 	.word	0x00002f81
    1414:	e9f6a93f 	.word	0xe9f6a93f
    1418:	3fa0cc78 	.word	0x3fa0cc78

0000141c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1420:	2301      	movs	r3, #1
    1422:	1cae      	adds	r6, r5, #2
    1424:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1426:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1428:	490b      	ldr	r1, [pc, #44]	; (1458 <sercomClockEnable+0x3c>)
    142a:	6a08      	ldr	r0, [r1, #32]
    142c:	4303      	orrs	r3, r0
    142e:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    1430:	2c00      	cmp	r4, #0
    1432:	d003      	beq.n	143c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1434:	2107      	movs	r1, #7
    1436:	0020      	movs	r0, r4
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <sercomClockEnable+0x40>)
    143a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    143c:	23f0      	movs	r3, #240	; 0xf0
    143e:	0224      	lsls	r4, r4, #8
    1440:	011b      	lsls	r3, r3, #4
    1442:	401c      	ands	r4, r3
    1444:	2380      	movs	r3, #128	; 0x80
    1446:	01db      	lsls	r3, r3, #7
    1448:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    144a:	233f      	movs	r3, #63	; 0x3f
    144c:	3514      	adds	r5, #20
    144e:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    1452:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1454:	805d      	strh	r5, [r3, #2]
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
    1458:	40000400 	.word	0x40000400
    145c:	00000d69 	.word	0x00000d69
    1460:	40000c00 	.word	0x40000c00

00001464 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <sercomReset+0x14>)
    1466:	0280      	lsls	r0, r0, #10
    1468:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    146a:	2301      	movs	r3, #1
    146c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    146e:	6802      	ldr	r2, [r0, #0]
    1470:	421a      	tst	r2, r3
    1472:	d1fc      	bne.n	146e <sercomReset+0xa>
}
    1474:	4770      	bx	lr
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	42000800 	.word	0x42000800

0000147c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    147c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    147e:	0004      	movs	r4, r0
    1480:	9300      	str	r3, [sp, #0]
    1482:	ab08      	add	r3, sp, #32
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	0016      	movs	r6, r2
    1488:	9301      	str	r3, [sp, #4]
    148a:	ab09      	add	r3, sp, #36	; 0x24
    148c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    148e:	4b12      	ldr	r3, [pc, #72]	; (14d8 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1490:	000d      	movs	r5, r1
    sercomReset(id);
    1492:	4798      	blx	r3
    1494:	4b11      	ldr	r3, [pc, #68]	; (14dc <sercomSpiMasterInit+0x60>)
    1496:	02a4      	lsls	r4, r4, #10
    1498:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    149a:	2380      	movs	r3, #128	; 0x80
    149c:	029b      	lsls	r3, r3, #10
    149e:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    14a0:	23c0      	movs	r3, #192	; 0xc0
    14a2:	052d      	lsls	r5, r5, #20
    14a4:	039b      	lsls	r3, r3, #14
    14a6:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    14a8:	23c0      	movs	r3, #192	; 0xc0
    14aa:	0436      	lsls	r6, r6, #16
    14ac:	029b      	lsls	r3, r3, #10
    14ae:	401e      	ands	r6, r3
    14b0:	230e      	movs	r3, #14
    14b2:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    14b4:	9b00      	ldr	r3, [sp, #0]
    14b6:	4335      	orrs	r5, r6
    14b8:	1e5a      	subs	r2, r3, #1
    14ba:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    14bc:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    14be:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    14c0:	1e51      	subs	r1, r2, #1
    14c2:	418a      	sbcs	r2, r1
    14c4:	431d      	orrs	r5, r3
    14c6:	0712      	lsls	r2, r2, #28
    14c8:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    14ca:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    14cc:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    14ce:	69e3      	ldr	r3, [r4, #28]
    14d0:	075b      	lsls	r3, r3, #29
    14d2:	d4fc      	bmi.n	14ce <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    14d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001465 	.word	0x00001465
    14dc:	42000800 	.word	0x42000800

000014e0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    14e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14e2:	0007      	movs	r7, r0
    14e4:	001e      	movs	r6, r3
    sercomReset(id);
    14e6:	4b0c      	ldr	r3, [pc, #48]	; (1518 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    14e8:	000d      	movs	r5, r1
    14ea:	0014      	movs	r4, r2
    sercomReset(id);
    14ec:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <sercomUartInit+0x3c>)
    14f0:	02b8      	lsls	r0, r7, #10
    14f2:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    14f4:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14f6:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    14f8:	6003      	str	r3, [r0, #0]
        = SERCOM_USART_CTRLB_RXEN
    14fa:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    14fc:	0392      	lsls	r2, r2, #14
    14fe:	052d      	lsls	r5, r5, #20
    1500:	4015      	ands	r5, r2
    1502:	4a07      	ldr	r2, [pc, #28]	; (1520 <sercomUartInit+0x40>)
        = SERCOM_USART_CTRLB_RXEN
    1504:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    1506:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1508:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    150a:	401c      	ands	r4, r3
    sercom(id)->USART.BAUD.reg = baud;
    150c:	b2b6      	uxth	r6, r6
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    150e:	4322      	orrs	r2, r4
    sercom(id)->USART.BAUD.reg = baud;
    1510:	8186      	strh	r6, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    1512:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    1514:	6002      	str	r2, [r0, #0]
}
    1516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1518:	00001465 	.word	0x00001465
    151c:	42000800 	.word	0x42000800
    1520:	40000006 	.word	0x40000006

00001524 <spiDataTransfer>:
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <spiDataTransfer+0x14>)
    1526:	0280      	lsls	r0, r0, #10
    1528:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    152a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    152c:	7e03      	ldrb	r3, [r0, #24]
    152e:	075b      	lsls	r3, r3, #29
    1530:	d5fc      	bpl.n	152c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1532:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1534:	b2c0      	uxtb	r0, r0
}
    1536:	4770      	bx	lr
    1538:	42000800 	.word	0x42000800

0000153c <usartDataOut>:
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <usartDataOut+0x14>)
    153e:	0280      	lsls	r0, r0, #10
    1540:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1542:	b289      	uxth	r1, r1
    1544:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    1546:	7e03      	ldrb	r3, [r0, #24]
    1548:	07db      	lsls	r3, r3, #31
    154a:	d5fc      	bpl.n	1546 <usartDataOut+0xa>
    154c:	4770      	bx	lr
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	42000800 	.word	0x42000800

00001554 <__aeabi_cdrcmple>:
    1554:	4684      	mov	ip, r0
    1556:	1c10      	adds	r0, r2, #0
    1558:	4662      	mov	r2, ip
    155a:	468c      	mov	ip, r1
    155c:	1c19      	adds	r1, r3, #0
    155e:	4663      	mov	r3, ip
    1560:	e000      	b.n	1564 <__aeabi_cdcmpeq>
    1562:	46c0      	nop			; (mov r8, r8)

00001564 <__aeabi_cdcmpeq>:
    1564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1566:	f001 f9e7 	bl	2938 <__ledf2>
    156a:	2800      	cmp	r0, #0
    156c:	d401      	bmi.n	1572 <__aeabi_cdcmpeq+0xe>
    156e:	2100      	movs	r1, #0
    1570:	42c8      	cmn	r0, r1
    1572:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001574 <__aeabi_dcmpeq>:
    1574:	b510      	push	{r4, lr}
    1576:	f001 f941 	bl	27fc <__eqdf2>
    157a:	4240      	negs	r0, r0
    157c:	3001      	adds	r0, #1
    157e:	bd10      	pop	{r4, pc}

00001580 <__aeabi_dcmplt>:
    1580:	b510      	push	{r4, lr}
    1582:	f001 f9d9 	bl	2938 <__ledf2>
    1586:	2800      	cmp	r0, #0
    1588:	db01      	blt.n	158e <__aeabi_dcmplt+0xe>
    158a:	2000      	movs	r0, #0
    158c:	bd10      	pop	{r4, pc}
    158e:	2001      	movs	r0, #1
    1590:	bd10      	pop	{r4, pc}
    1592:	46c0      	nop			; (mov r8, r8)

00001594 <__aeabi_dcmple>:
    1594:	b510      	push	{r4, lr}
    1596:	f001 f9cf 	bl	2938 <__ledf2>
    159a:	2800      	cmp	r0, #0
    159c:	dd01      	ble.n	15a2 <__aeabi_dcmple+0xe>
    159e:	2000      	movs	r0, #0
    15a0:	bd10      	pop	{r4, pc}
    15a2:	2001      	movs	r0, #1
    15a4:	bd10      	pop	{r4, pc}
    15a6:	46c0      	nop			; (mov r8, r8)

000015a8 <__aeabi_dcmpgt>:
    15a8:	b510      	push	{r4, lr}
    15aa:	f001 f961 	bl	2870 <__gedf2>
    15ae:	2800      	cmp	r0, #0
    15b0:	dc01      	bgt.n	15b6 <__aeabi_dcmpgt+0xe>
    15b2:	2000      	movs	r0, #0
    15b4:	bd10      	pop	{r4, pc}
    15b6:	2001      	movs	r0, #1
    15b8:	bd10      	pop	{r4, pc}
    15ba:	46c0      	nop			; (mov r8, r8)

000015bc <__aeabi_dcmpge>:
    15bc:	b510      	push	{r4, lr}
    15be:	f001 f957 	bl	2870 <__gedf2>
    15c2:	2800      	cmp	r0, #0
    15c4:	da01      	bge.n	15ca <__aeabi_dcmpge+0xe>
    15c6:	2000      	movs	r0, #0
    15c8:	bd10      	pop	{r4, pc}
    15ca:	2001      	movs	r0, #1
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)

000015d0 <__aeabi_lmul>:
    15d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15d2:	46ce      	mov	lr, r9
    15d4:	4647      	mov	r7, r8
    15d6:	0415      	lsls	r5, r2, #16
    15d8:	0c2d      	lsrs	r5, r5, #16
    15da:	002e      	movs	r6, r5
    15dc:	b580      	push	{r7, lr}
    15de:	0407      	lsls	r7, r0, #16
    15e0:	0c14      	lsrs	r4, r2, #16
    15e2:	0c3f      	lsrs	r7, r7, #16
    15e4:	4699      	mov	r9, r3
    15e6:	0c03      	lsrs	r3, r0, #16
    15e8:	437e      	muls	r6, r7
    15ea:	435d      	muls	r5, r3
    15ec:	4367      	muls	r7, r4
    15ee:	4363      	muls	r3, r4
    15f0:	197f      	adds	r7, r7, r5
    15f2:	0c34      	lsrs	r4, r6, #16
    15f4:	19e4      	adds	r4, r4, r7
    15f6:	469c      	mov	ip, r3
    15f8:	42a5      	cmp	r5, r4
    15fa:	d903      	bls.n	1604 <__aeabi_lmul+0x34>
    15fc:	2380      	movs	r3, #128	; 0x80
    15fe:	025b      	lsls	r3, r3, #9
    1600:	4698      	mov	r8, r3
    1602:	44c4      	add	ip, r8
    1604:	464b      	mov	r3, r9
    1606:	4351      	muls	r1, r2
    1608:	4343      	muls	r3, r0
    160a:	0436      	lsls	r6, r6, #16
    160c:	0c36      	lsrs	r6, r6, #16
    160e:	0c25      	lsrs	r5, r4, #16
    1610:	0424      	lsls	r4, r4, #16
    1612:	4465      	add	r5, ip
    1614:	19a4      	adds	r4, r4, r6
    1616:	1859      	adds	r1, r3, r1
    1618:	1949      	adds	r1, r1, r5
    161a:	0020      	movs	r0, r4
    161c:	bc0c      	pop	{r2, r3}
    161e:	4690      	mov	r8, r2
    1620:	4699      	mov	r9, r3
    1622:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001624 <__aeabi_fadd>:
    1624:	b5f0      	push	{r4, r5, r6, r7, lr}
    1626:	46c6      	mov	lr, r8
    1628:	024e      	lsls	r6, r1, #9
    162a:	0247      	lsls	r7, r0, #9
    162c:	0a76      	lsrs	r6, r6, #9
    162e:	0a7b      	lsrs	r3, r7, #9
    1630:	0044      	lsls	r4, r0, #1
    1632:	0fc5      	lsrs	r5, r0, #31
    1634:	00f7      	lsls	r7, r6, #3
    1636:	0048      	lsls	r0, r1, #1
    1638:	4698      	mov	r8, r3
    163a:	b500      	push	{lr}
    163c:	0e24      	lsrs	r4, r4, #24
    163e:	002a      	movs	r2, r5
    1640:	00db      	lsls	r3, r3, #3
    1642:	0e00      	lsrs	r0, r0, #24
    1644:	0fc9      	lsrs	r1, r1, #31
    1646:	46bc      	mov	ip, r7
    1648:	428d      	cmp	r5, r1
    164a:	d067      	beq.n	171c <__aeabi_fadd+0xf8>
    164c:	1a22      	subs	r2, r4, r0
    164e:	2a00      	cmp	r2, #0
    1650:	dc00      	bgt.n	1654 <__aeabi_fadd+0x30>
    1652:	e0a5      	b.n	17a0 <__aeabi_fadd+0x17c>
    1654:	2800      	cmp	r0, #0
    1656:	d13a      	bne.n	16ce <__aeabi_fadd+0xaa>
    1658:	2f00      	cmp	r7, #0
    165a:	d100      	bne.n	165e <__aeabi_fadd+0x3a>
    165c:	e093      	b.n	1786 <__aeabi_fadd+0x162>
    165e:	1e51      	subs	r1, r2, #1
    1660:	2900      	cmp	r1, #0
    1662:	d000      	beq.n	1666 <__aeabi_fadd+0x42>
    1664:	e0bc      	b.n	17e0 <__aeabi_fadd+0x1bc>
    1666:	2401      	movs	r4, #1
    1668:	1bdb      	subs	r3, r3, r7
    166a:	015a      	lsls	r2, r3, #5
    166c:	d546      	bpl.n	16fc <__aeabi_fadd+0xd8>
    166e:	019b      	lsls	r3, r3, #6
    1670:	099e      	lsrs	r6, r3, #6
    1672:	0030      	movs	r0, r6
    1674:	f001 fd60 	bl	3138 <__clzsi2>
    1678:	3805      	subs	r0, #5
    167a:	4086      	lsls	r6, r0
    167c:	4284      	cmp	r4, r0
    167e:	dd00      	ble.n	1682 <__aeabi_fadd+0x5e>
    1680:	e09d      	b.n	17be <__aeabi_fadd+0x19a>
    1682:	1b04      	subs	r4, r0, r4
    1684:	0032      	movs	r2, r6
    1686:	2020      	movs	r0, #32
    1688:	3401      	adds	r4, #1
    168a:	40e2      	lsrs	r2, r4
    168c:	1b04      	subs	r4, r0, r4
    168e:	40a6      	lsls	r6, r4
    1690:	0033      	movs	r3, r6
    1692:	1e5e      	subs	r6, r3, #1
    1694:	41b3      	sbcs	r3, r6
    1696:	2400      	movs	r4, #0
    1698:	4313      	orrs	r3, r2
    169a:	075a      	lsls	r2, r3, #29
    169c:	d004      	beq.n	16a8 <__aeabi_fadd+0x84>
    169e:	220f      	movs	r2, #15
    16a0:	401a      	ands	r2, r3
    16a2:	2a04      	cmp	r2, #4
    16a4:	d000      	beq.n	16a8 <__aeabi_fadd+0x84>
    16a6:	3304      	adds	r3, #4
    16a8:	015a      	lsls	r2, r3, #5
    16aa:	d529      	bpl.n	1700 <__aeabi_fadd+0xdc>
    16ac:	3401      	adds	r4, #1
    16ae:	2cff      	cmp	r4, #255	; 0xff
    16b0:	d100      	bne.n	16b4 <__aeabi_fadd+0x90>
    16b2:	e081      	b.n	17b8 <__aeabi_fadd+0x194>
    16b4:	002a      	movs	r2, r5
    16b6:	019b      	lsls	r3, r3, #6
    16b8:	0a5b      	lsrs	r3, r3, #9
    16ba:	b2e4      	uxtb	r4, r4
    16bc:	025b      	lsls	r3, r3, #9
    16be:	05e4      	lsls	r4, r4, #23
    16c0:	0a58      	lsrs	r0, r3, #9
    16c2:	07d2      	lsls	r2, r2, #31
    16c4:	4320      	orrs	r0, r4
    16c6:	4310      	orrs	r0, r2
    16c8:	bc04      	pop	{r2}
    16ca:	4690      	mov	r8, r2
    16cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ce:	2cff      	cmp	r4, #255	; 0xff
    16d0:	d0e3      	beq.n	169a <__aeabi_fadd+0x76>
    16d2:	2180      	movs	r1, #128	; 0x80
    16d4:	0038      	movs	r0, r7
    16d6:	04c9      	lsls	r1, r1, #19
    16d8:	4308      	orrs	r0, r1
    16da:	4684      	mov	ip, r0
    16dc:	2a1b      	cmp	r2, #27
    16de:	dd00      	ble.n	16e2 <__aeabi_fadd+0xbe>
    16e0:	e082      	b.n	17e8 <__aeabi_fadd+0x1c4>
    16e2:	2020      	movs	r0, #32
    16e4:	4661      	mov	r1, ip
    16e6:	40d1      	lsrs	r1, r2
    16e8:	1a82      	subs	r2, r0, r2
    16ea:	4660      	mov	r0, ip
    16ec:	4090      	lsls	r0, r2
    16ee:	0002      	movs	r2, r0
    16f0:	1e50      	subs	r0, r2, #1
    16f2:	4182      	sbcs	r2, r0
    16f4:	430a      	orrs	r2, r1
    16f6:	1a9b      	subs	r3, r3, r2
    16f8:	015a      	lsls	r2, r3, #5
    16fa:	d4b8      	bmi.n	166e <__aeabi_fadd+0x4a>
    16fc:	075a      	lsls	r2, r3, #29
    16fe:	d1ce      	bne.n	169e <__aeabi_fadd+0x7a>
    1700:	08de      	lsrs	r6, r3, #3
    1702:	002a      	movs	r2, r5
    1704:	2cff      	cmp	r4, #255	; 0xff
    1706:	d13a      	bne.n	177e <__aeabi_fadd+0x15a>
    1708:	2e00      	cmp	r6, #0
    170a:	d100      	bne.n	170e <__aeabi_fadd+0xea>
    170c:	e0ae      	b.n	186c <__aeabi_fadd+0x248>
    170e:	2380      	movs	r3, #128	; 0x80
    1710:	03db      	lsls	r3, r3, #15
    1712:	4333      	orrs	r3, r6
    1714:	025b      	lsls	r3, r3, #9
    1716:	0a5b      	lsrs	r3, r3, #9
    1718:	24ff      	movs	r4, #255	; 0xff
    171a:	e7cf      	b.n	16bc <__aeabi_fadd+0x98>
    171c:	1a21      	subs	r1, r4, r0
    171e:	2900      	cmp	r1, #0
    1720:	dd52      	ble.n	17c8 <__aeabi_fadd+0x1a4>
    1722:	2800      	cmp	r0, #0
    1724:	d031      	beq.n	178a <__aeabi_fadd+0x166>
    1726:	2cff      	cmp	r4, #255	; 0xff
    1728:	d0b7      	beq.n	169a <__aeabi_fadd+0x76>
    172a:	2080      	movs	r0, #128	; 0x80
    172c:	003e      	movs	r6, r7
    172e:	04c0      	lsls	r0, r0, #19
    1730:	4306      	orrs	r6, r0
    1732:	46b4      	mov	ip, r6
    1734:	291b      	cmp	r1, #27
    1736:	dd00      	ble.n	173a <__aeabi_fadd+0x116>
    1738:	e0aa      	b.n	1890 <__aeabi_fadd+0x26c>
    173a:	2620      	movs	r6, #32
    173c:	4660      	mov	r0, ip
    173e:	40c8      	lsrs	r0, r1
    1740:	1a71      	subs	r1, r6, r1
    1742:	4666      	mov	r6, ip
    1744:	408e      	lsls	r6, r1
    1746:	0031      	movs	r1, r6
    1748:	1e4e      	subs	r6, r1, #1
    174a:	41b1      	sbcs	r1, r6
    174c:	4301      	orrs	r1, r0
    174e:	185b      	adds	r3, r3, r1
    1750:	0159      	lsls	r1, r3, #5
    1752:	d5d3      	bpl.n	16fc <__aeabi_fadd+0xd8>
    1754:	3401      	adds	r4, #1
    1756:	2cff      	cmp	r4, #255	; 0xff
    1758:	d100      	bne.n	175c <__aeabi_fadd+0x138>
    175a:	e087      	b.n	186c <__aeabi_fadd+0x248>
    175c:	2201      	movs	r2, #1
    175e:	4978      	ldr	r1, [pc, #480]	; (1940 <__aeabi_fadd+0x31c>)
    1760:	401a      	ands	r2, r3
    1762:	085b      	lsrs	r3, r3, #1
    1764:	400b      	ands	r3, r1
    1766:	4313      	orrs	r3, r2
    1768:	e797      	b.n	169a <__aeabi_fadd+0x76>
    176a:	2c00      	cmp	r4, #0
    176c:	d000      	beq.n	1770 <__aeabi_fadd+0x14c>
    176e:	e0a7      	b.n	18c0 <__aeabi_fadd+0x29c>
    1770:	2b00      	cmp	r3, #0
    1772:	d000      	beq.n	1776 <__aeabi_fadd+0x152>
    1774:	e0b6      	b.n	18e4 <__aeabi_fadd+0x2c0>
    1776:	1e3b      	subs	r3, r7, #0
    1778:	d162      	bne.n	1840 <__aeabi_fadd+0x21c>
    177a:	2600      	movs	r6, #0
    177c:	2200      	movs	r2, #0
    177e:	0273      	lsls	r3, r6, #9
    1780:	0a5b      	lsrs	r3, r3, #9
    1782:	b2e4      	uxtb	r4, r4
    1784:	e79a      	b.n	16bc <__aeabi_fadd+0x98>
    1786:	0014      	movs	r4, r2
    1788:	e787      	b.n	169a <__aeabi_fadd+0x76>
    178a:	2f00      	cmp	r7, #0
    178c:	d04d      	beq.n	182a <__aeabi_fadd+0x206>
    178e:	1e48      	subs	r0, r1, #1
    1790:	2800      	cmp	r0, #0
    1792:	d157      	bne.n	1844 <__aeabi_fadd+0x220>
    1794:	4463      	add	r3, ip
    1796:	2401      	movs	r4, #1
    1798:	015a      	lsls	r2, r3, #5
    179a:	d5af      	bpl.n	16fc <__aeabi_fadd+0xd8>
    179c:	2402      	movs	r4, #2
    179e:	e7dd      	b.n	175c <__aeabi_fadd+0x138>
    17a0:	2a00      	cmp	r2, #0
    17a2:	d124      	bne.n	17ee <__aeabi_fadd+0x1ca>
    17a4:	1c62      	adds	r2, r4, #1
    17a6:	b2d2      	uxtb	r2, r2
    17a8:	2a01      	cmp	r2, #1
    17aa:	ddde      	ble.n	176a <__aeabi_fadd+0x146>
    17ac:	1bde      	subs	r6, r3, r7
    17ae:	0172      	lsls	r2, r6, #5
    17b0:	d535      	bpl.n	181e <__aeabi_fadd+0x1fa>
    17b2:	1afe      	subs	r6, r7, r3
    17b4:	000d      	movs	r5, r1
    17b6:	e75c      	b.n	1672 <__aeabi_fadd+0x4e>
    17b8:	002a      	movs	r2, r5
    17ba:	2300      	movs	r3, #0
    17bc:	e77e      	b.n	16bc <__aeabi_fadd+0x98>
    17be:	0033      	movs	r3, r6
    17c0:	4a60      	ldr	r2, [pc, #384]	; (1944 <__aeabi_fadd+0x320>)
    17c2:	1a24      	subs	r4, r4, r0
    17c4:	4013      	ands	r3, r2
    17c6:	e768      	b.n	169a <__aeabi_fadd+0x76>
    17c8:	2900      	cmp	r1, #0
    17ca:	d163      	bne.n	1894 <__aeabi_fadd+0x270>
    17cc:	1c61      	adds	r1, r4, #1
    17ce:	b2c8      	uxtb	r0, r1
    17d0:	2801      	cmp	r0, #1
    17d2:	dd4e      	ble.n	1872 <__aeabi_fadd+0x24e>
    17d4:	29ff      	cmp	r1, #255	; 0xff
    17d6:	d049      	beq.n	186c <__aeabi_fadd+0x248>
    17d8:	4463      	add	r3, ip
    17da:	085b      	lsrs	r3, r3, #1
    17dc:	000c      	movs	r4, r1
    17de:	e75c      	b.n	169a <__aeabi_fadd+0x76>
    17e0:	2aff      	cmp	r2, #255	; 0xff
    17e2:	d041      	beq.n	1868 <__aeabi_fadd+0x244>
    17e4:	000a      	movs	r2, r1
    17e6:	e779      	b.n	16dc <__aeabi_fadd+0xb8>
    17e8:	2201      	movs	r2, #1
    17ea:	1a9b      	subs	r3, r3, r2
    17ec:	e784      	b.n	16f8 <__aeabi_fadd+0xd4>
    17ee:	2c00      	cmp	r4, #0
    17f0:	d01d      	beq.n	182e <__aeabi_fadd+0x20a>
    17f2:	28ff      	cmp	r0, #255	; 0xff
    17f4:	d022      	beq.n	183c <__aeabi_fadd+0x218>
    17f6:	2480      	movs	r4, #128	; 0x80
    17f8:	04e4      	lsls	r4, r4, #19
    17fa:	4252      	negs	r2, r2
    17fc:	4323      	orrs	r3, r4
    17fe:	2a1b      	cmp	r2, #27
    1800:	dd00      	ble.n	1804 <__aeabi_fadd+0x1e0>
    1802:	e08a      	b.n	191a <__aeabi_fadd+0x2f6>
    1804:	001c      	movs	r4, r3
    1806:	2520      	movs	r5, #32
    1808:	40d4      	lsrs	r4, r2
    180a:	1aaa      	subs	r2, r5, r2
    180c:	4093      	lsls	r3, r2
    180e:	1e5a      	subs	r2, r3, #1
    1810:	4193      	sbcs	r3, r2
    1812:	4323      	orrs	r3, r4
    1814:	4662      	mov	r2, ip
    1816:	0004      	movs	r4, r0
    1818:	1ad3      	subs	r3, r2, r3
    181a:	000d      	movs	r5, r1
    181c:	e725      	b.n	166a <__aeabi_fadd+0x46>
    181e:	2e00      	cmp	r6, #0
    1820:	d000      	beq.n	1824 <__aeabi_fadd+0x200>
    1822:	e726      	b.n	1672 <__aeabi_fadd+0x4e>
    1824:	2200      	movs	r2, #0
    1826:	2400      	movs	r4, #0
    1828:	e7a9      	b.n	177e <__aeabi_fadd+0x15a>
    182a:	000c      	movs	r4, r1
    182c:	e735      	b.n	169a <__aeabi_fadd+0x76>
    182e:	2b00      	cmp	r3, #0
    1830:	d04d      	beq.n	18ce <__aeabi_fadd+0x2aa>
    1832:	43d2      	mvns	r2, r2
    1834:	2a00      	cmp	r2, #0
    1836:	d0ed      	beq.n	1814 <__aeabi_fadd+0x1f0>
    1838:	28ff      	cmp	r0, #255	; 0xff
    183a:	d1e0      	bne.n	17fe <__aeabi_fadd+0x1da>
    183c:	4663      	mov	r3, ip
    183e:	24ff      	movs	r4, #255	; 0xff
    1840:	000d      	movs	r5, r1
    1842:	e72a      	b.n	169a <__aeabi_fadd+0x76>
    1844:	29ff      	cmp	r1, #255	; 0xff
    1846:	d00f      	beq.n	1868 <__aeabi_fadd+0x244>
    1848:	0001      	movs	r1, r0
    184a:	e773      	b.n	1734 <__aeabi_fadd+0x110>
    184c:	2b00      	cmp	r3, #0
    184e:	d061      	beq.n	1914 <__aeabi_fadd+0x2f0>
    1850:	24ff      	movs	r4, #255	; 0xff
    1852:	2f00      	cmp	r7, #0
    1854:	d100      	bne.n	1858 <__aeabi_fadd+0x234>
    1856:	e720      	b.n	169a <__aeabi_fadd+0x76>
    1858:	2280      	movs	r2, #128	; 0x80
    185a:	4641      	mov	r1, r8
    185c:	03d2      	lsls	r2, r2, #15
    185e:	4211      	tst	r1, r2
    1860:	d002      	beq.n	1868 <__aeabi_fadd+0x244>
    1862:	4216      	tst	r6, r2
    1864:	d100      	bne.n	1868 <__aeabi_fadd+0x244>
    1866:	003b      	movs	r3, r7
    1868:	24ff      	movs	r4, #255	; 0xff
    186a:	e716      	b.n	169a <__aeabi_fadd+0x76>
    186c:	24ff      	movs	r4, #255	; 0xff
    186e:	2300      	movs	r3, #0
    1870:	e724      	b.n	16bc <__aeabi_fadd+0x98>
    1872:	2c00      	cmp	r4, #0
    1874:	d1ea      	bne.n	184c <__aeabi_fadd+0x228>
    1876:	2b00      	cmp	r3, #0
    1878:	d058      	beq.n	192c <__aeabi_fadd+0x308>
    187a:	2f00      	cmp	r7, #0
    187c:	d100      	bne.n	1880 <__aeabi_fadd+0x25c>
    187e:	e70c      	b.n	169a <__aeabi_fadd+0x76>
    1880:	4463      	add	r3, ip
    1882:	015a      	lsls	r2, r3, #5
    1884:	d400      	bmi.n	1888 <__aeabi_fadd+0x264>
    1886:	e739      	b.n	16fc <__aeabi_fadd+0xd8>
    1888:	4a2e      	ldr	r2, [pc, #184]	; (1944 <__aeabi_fadd+0x320>)
    188a:	000c      	movs	r4, r1
    188c:	4013      	ands	r3, r2
    188e:	e704      	b.n	169a <__aeabi_fadd+0x76>
    1890:	2101      	movs	r1, #1
    1892:	e75c      	b.n	174e <__aeabi_fadd+0x12a>
    1894:	2c00      	cmp	r4, #0
    1896:	d11e      	bne.n	18d6 <__aeabi_fadd+0x2b2>
    1898:	2b00      	cmp	r3, #0
    189a:	d040      	beq.n	191e <__aeabi_fadd+0x2fa>
    189c:	43c9      	mvns	r1, r1
    189e:	2900      	cmp	r1, #0
    18a0:	d00b      	beq.n	18ba <__aeabi_fadd+0x296>
    18a2:	28ff      	cmp	r0, #255	; 0xff
    18a4:	d036      	beq.n	1914 <__aeabi_fadd+0x2f0>
    18a6:	291b      	cmp	r1, #27
    18a8:	dc47      	bgt.n	193a <__aeabi_fadd+0x316>
    18aa:	001c      	movs	r4, r3
    18ac:	2620      	movs	r6, #32
    18ae:	40cc      	lsrs	r4, r1
    18b0:	1a71      	subs	r1, r6, r1
    18b2:	408b      	lsls	r3, r1
    18b4:	1e59      	subs	r1, r3, #1
    18b6:	418b      	sbcs	r3, r1
    18b8:	4323      	orrs	r3, r4
    18ba:	4463      	add	r3, ip
    18bc:	0004      	movs	r4, r0
    18be:	e747      	b.n	1750 <__aeabi_fadd+0x12c>
    18c0:	2b00      	cmp	r3, #0
    18c2:	d118      	bne.n	18f6 <__aeabi_fadd+0x2d2>
    18c4:	1e3b      	subs	r3, r7, #0
    18c6:	d02d      	beq.n	1924 <__aeabi_fadd+0x300>
    18c8:	000d      	movs	r5, r1
    18ca:	24ff      	movs	r4, #255	; 0xff
    18cc:	e6e5      	b.n	169a <__aeabi_fadd+0x76>
    18ce:	003b      	movs	r3, r7
    18d0:	0004      	movs	r4, r0
    18d2:	000d      	movs	r5, r1
    18d4:	e6e1      	b.n	169a <__aeabi_fadd+0x76>
    18d6:	28ff      	cmp	r0, #255	; 0xff
    18d8:	d01c      	beq.n	1914 <__aeabi_fadd+0x2f0>
    18da:	2480      	movs	r4, #128	; 0x80
    18dc:	04e4      	lsls	r4, r4, #19
    18de:	4249      	negs	r1, r1
    18e0:	4323      	orrs	r3, r4
    18e2:	e7e0      	b.n	18a6 <__aeabi_fadd+0x282>
    18e4:	2f00      	cmp	r7, #0
    18e6:	d100      	bne.n	18ea <__aeabi_fadd+0x2c6>
    18e8:	e6d7      	b.n	169a <__aeabi_fadd+0x76>
    18ea:	1bde      	subs	r6, r3, r7
    18ec:	0172      	lsls	r2, r6, #5
    18ee:	d51f      	bpl.n	1930 <__aeabi_fadd+0x30c>
    18f0:	1afb      	subs	r3, r7, r3
    18f2:	000d      	movs	r5, r1
    18f4:	e6d1      	b.n	169a <__aeabi_fadd+0x76>
    18f6:	24ff      	movs	r4, #255	; 0xff
    18f8:	2f00      	cmp	r7, #0
    18fa:	d100      	bne.n	18fe <__aeabi_fadd+0x2da>
    18fc:	e6cd      	b.n	169a <__aeabi_fadd+0x76>
    18fe:	2280      	movs	r2, #128	; 0x80
    1900:	4640      	mov	r0, r8
    1902:	03d2      	lsls	r2, r2, #15
    1904:	4210      	tst	r0, r2
    1906:	d0af      	beq.n	1868 <__aeabi_fadd+0x244>
    1908:	4216      	tst	r6, r2
    190a:	d1ad      	bne.n	1868 <__aeabi_fadd+0x244>
    190c:	003b      	movs	r3, r7
    190e:	000d      	movs	r5, r1
    1910:	24ff      	movs	r4, #255	; 0xff
    1912:	e6c2      	b.n	169a <__aeabi_fadd+0x76>
    1914:	4663      	mov	r3, ip
    1916:	24ff      	movs	r4, #255	; 0xff
    1918:	e6bf      	b.n	169a <__aeabi_fadd+0x76>
    191a:	2301      	movs	r3, #1
    191c:	e77a      	b.n	1814 <__aeabi_fadd+0x1f0>
    191e:	003b      	movs	r3, r7
    1920:	0004      	movs	r4, r0
    1922:	e6ba      	b.n	169a <__aeabi_fadd+0x76>
    1924:	2680      	movs	r6, #128	; 0x80
    1926:	2200      	movs	r2, #0
    1928:	03f6      	lsls	r6, r6, #15
    192a:	e6f0      	b.n	170e <__aeabi_fadd+0xea>
    192c:	003b      	movs	r3, r7
    192e:	e6b4      	b.n	169a <__aeabi_fadd+0x76>
    1930:	1e33      	subs	r3, r6, #0
    1932:	d000      	beq.n	1936 <__aeabi_fadd+0x312>
    1934:	e6e2      	b.n	16fc <__aeabi_fadd+0xd8>
    1936:	2200      	movs	r2, #0
    1938:	e721      	b.n	177e <__aeabi_fadd+0x15a>
    193a:	2301      	movs	r3, #1
    193c:	e7bd      	b.n	18ba <__aeabi_fadd+0x296>
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	7dffffff 	.word	0x7dffffff
    1944:	fbffffff 	.word	0xfbffffff

00001948 <__aeabi_fdiv>:
    1948:	b5f0      	push	{r4, r5, r6, r7, lr}
    194a:	4657      	mov	r7, sl
    194c:	464e      	mov	r6, r9
    194e:	46de      	mov	lr, fp
    1950:	4645      	mov	r5, r8
    1952:	b5e0      	push	{r5, r6, r7, lr}
    1954:	0244      	lsls	r4, r0, #9
    1956:	0043      	lsls	r3, r0, #1
    1958:	0fc6      	lsrs	r6, r0, #31
    195a:	b083      	sub	sp, #12
    195c:	1c0f      	adds	r7, r1, #0
    195e:	0a64      	lsrs	r4, r4, #9
    1960:	0e1b      	lsrs	r3, r3, #24
    1962:	46b2      	mov	sl, r6
    1964:	d053      	beq.n	1a0e <__aeabi_fdiv+0xc6>
    1966:	2bff      	cmp	r3, #255	; 0xff
    1968:	d027      	beq.n	19ba <__aeabi_fdiv+0x72>
    196a:	2280      	movs	r2, #128	; 0x80
    196c:	00e4      	lsls	r4, r4, #3
    196e:	04d2      	lsls	r2, r2, #19
    1970:	4314      	orrs	r4, r2
    1972:	227f      	movs	r2, #127	; 0x7f
    1974:	4252      	negs	r2, r2
    1976:	4690      	mov	r8, r2
    1978:	4498      	add	r8, r3
    197a:	2300      	movs	r3, #0
    197c:	4699      	mov	r9, r3
    197e:	469b      	mov	fp, r3
    1980:	027d      	lsls	r5, r7, #9
    1982:	0078      	lsls	r0, r7, #1
    1984:	0ffb      	lsrs	r3, r7, #31
    1986:	0a6d      	lsrs	r5, r5, #9
    1988:	0e00      	lsrs	r0, r0, #24
    198a:	9300      	str	r3, [sp, #0]
    198c:	d024      	beq.n	19d8 <__aeabi_fdiv+0x90>
    198e:	28ff      	cmp	r0, #255	; 0xff
    1990:	d046      	beq.n	1a20 <__aeabi_fdiv+0xd8>
    1992:	2380      	movs	r3, #128	; 0x80
    1994:	2100      	movs	r1, #0
    1996:	00ed      	lsls	r5, r5, #3
    1998:	04db      	lsls	r3, r3, #19
    199a:	431d      	orrs	r5, r3
    199c:	387f      	subs	r0, #127	; 0x7f
    199e:	4647      	mov	r7, r8
    19a0:	1a38      	subs	r0, r7, r0
    19a2:	464f      	mov	r7, r9
    19a4:	430f      	orrs	r7, r1
    19a6:	00bf      	lsls	r7, r7, #2
    19a8:	46b9      	mov	r9, r7
    19aa:	0033      	movs	r3, r6
    19ac:	9a00      	ldr	r2, [sp, #0]
    19ae:	4f87      	ldr	r7, [pc, #540]	; (1bcc <__aeabi_fdiv+0x284>)
    19b0:	4053      	eors	r3, r2
    19b2:	464a      	mov	r2, r9
    19b4:	58ba      	ldr	r2, [r7, r2]
    19b6:	9301      	str	r3, [sp, #4]
    19b8:	4697      	mov	pc, r2
    19ba:	2c00      	cmp	r4, #0
    19bc:	d14e      	bne.n	1a5c <__aeabi_fdiv+0x114>
    19be:	2308      	movs	r3, #8
    19c0:	4699      	mov	r9, r3
    19c2:	33f7      	adds	r3, #247	; 0xf7
    19c4:	4698      	mov	r8, r3
    19c6:	3bfd      	subs	r3, #253	; 0xfd
    19c8:	469b      	mov	fp, r3
    19ca:	027d      	lsls	r5, r7, #9
    19cc:	0078      	lsls	r0, r7, #1
    19ce:	0ffb      	lsrs	r3, r7, #31
    19d0:	0a6d      	lsrs	r5, r5, #9
    19d2:	0e00      	lsrs	r0, r0, #24
    19d4:	9300      	str	r3, [sp, #0]
    19d6:	d1da      	bne.n	198e <__aeabi_fdiv+0x46>
    19d8:	2d00      	cmp	r5, #0
    19da:	d126      	bne.n	1a2a <__aeabi_fdiv+0xe2>
    19dc:	2000      	movs	r0, #0
    19de:	2101      	movs	r1, #1
    19e0:	0033      	movs	r3, r6
    19e2:	9a00      	ldr	r2, [sp, #0]
    19e4:	4f7a      	ldr	r7, [pc, #488]	; (1bd0 <__aeabi_fdiv+0x288>)
    19e6:	4053      	eors	r3, r2
    19e8:	4642      	mov	r2, r8
    19ea:	1a10      	subs	r0, r2, r0
    19ec:	464a      	mov	r2, r9
    19ee:	430a      	orrs	r2, r1
    19f0:	0092      	lsls	r2, r2, #2
    19f2:	58ba      	ldr	r2, [r7, r2]
    19f4:	001d      	movs	r5, r3
    19f6:	4697      	mov	pc, r2
    19f8:	9b00      	ldr	r3, [sp, #0]
    19fa:	002c      	movs	r4, r5
    19fc:	469a      	mov	sl, r3
    19fe:	468b      	mov	fp, r1
    1a00:	465b      	mov	r3, fp
    1a02:	2b02      	cmp	r3, #2
    1a04:	d131      	bne.n	1a6a <__aeabi_fdiv+0x122>
    1a06:	4653      	mov	r3, sl
    1a08:	21ff      	movs	r1, #255	; 0xff
    1a0a:	2400      	movs	r4, #0
    1a0c:	e038      	b.n	1a80 <__aeabi_fdiv+0x138>
    1a0e:	2c00      	cmp	r4, #0
    1a10:	d117      	bne.n	1a42 <__aeabi_fdiv+0xfa>
    1a12:	2304      	movs	r3, #4
    1a14:	4699      	mov	r9, r3
    1a16:	2300      	movs	r3, #0
    1a18:	4698      	mov	r8, r3
    1a1a:	3301      	adds	r3, #1
    1a1c:	469b      	mov	fp, r3
    1a1e:	e7af      	b.n	1980 <__aeabi_fdiv+0x38>
    1a20:	20ff      	movs	r0, #255	; 0xff
    1a22:	2d00      	cmp	r5, #0
    1a24:	d10b      	bne.n	1a3e <__aeabi_fdiv+0xf6>
    1a26:	2102      	movs	r1, #2
    1a28:	e7da      	b.n	19e0 <__aeabi_fdiv+0x98>
    1a2a:	0028      	movs	r0, r5
    1a2c:	f001 fb84 	bl	3138 <__clzsi2>
    1a30:	1f43      	subs	r3, r0, #5
    1a32:	409d      	lsls	r5, r3
    1a34:	2376      	movs	r3, #118	; 0x76
    1a36:	425b      	negs	r3, r3
    1a38:	1a18      	subs	r0, r3, r0
    1a3a:	2100      	movs	r1, #0
    1a3c:	e7af      	b.n	199e <__aeabi_fdiv+0x56>
    1a3e:	2103      	movs	r1, #3
    1a40:	e7ad      	b.n	199e <__aeabi_fdiv+0x56>
    1a42:	0020      	movs	r0, r4
    1a44:	f001 fb78 	bl	3138 <__clzsi2>
    1a48:	1f43      	subs	r3, r0, #5
    1a4a:	409c      	lsls	r4, r3
    1a4c:	2376      	movs	r3, #118	; 0x76
    1a4e:	425b      	negs	r3, r3
    1a50:	1a1b      	subs	r3, r3, r0
    1a52:	4698      	mov	r8, r3
    1a54:	2300      	movs	r3, #0
    1a56:	4699      	mov	r9, r3
    1a58:	469b      	mov	fp, r3
    1a5a:	e791      	b.n	1980 <__aeabi_fdiv+0x38>
    1a5c:	230c      	movs	r3, #12
    1a5e:	4699      	mov	r9, r3
    1a60:	33f3      	adds	r3, #243	; 0xf3
    1a62:	4698      	mov	r8, r3
    1a64:	3bfc      	subs	r3, #252	; 0xfc
    1a66:	469b      	mov	fp, r3
    1a68:	e78a      	b.n	1980 <__aeabi_fdiv+0x38>
    1a6a:	2b03      	cmp	r3, #3
    1a6c:	d100      	bne.n	1a70 <__aeabi_fdiv+0x128>
    1a6e:	e0a5      	b.n	1bbc <__aeabi_fdiv+0x274>
    1a70:	4655      	mov	r5, sl
    1a72:	2b01      	cmp	r3, #1
    1a74:	d000      	beq.n	1a78 <__aeabi_fdiv+0x130>
    1a76:	e081      	b.n	1b7c <__aeabi_fdiv+0x234>
    1a78:	2301      	movs	r3, #1
    1a7a:	2100      	movs	r1, #0
    1a7c:	2400      	movs	r4, #0
    1a7e:	402b      	ands	r3, r5
    1a80:	0264      	lsls	r4, r4, #9
    1a82:	05c9      	lsls	r1, r1, #23
    1a84:	0a60      	lsrs	r0, r4, #9
    1a86:	07db      	lsls	r3, r3, #31
    1a88:	4308      	orrs	r0, r1
    1a8a:	4318      	orrs	r0, r3
    1a8c:	b003      	add	sp, #12
    1a8e:	bc3c      	pop	{r2, r3, r4, r5}
    1a90:	4690      	mov	r8, r2
    1a92:	4699      	mov	r9, r3
    1a94:	46a2      	mov	sl, r4
    1a96:	46ab      	mov	fp, r5
    1a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a9a:	2480      	movs	r4, #128	; 0x80
    1a9c:	2300      	movs	r3, #0
    1a9e:	03e4      	lsls	r4, r4, #15
    1aa0:	21ff      	movs	r1, #255	; 0xff
    1aa2:	e7ed      	b.n	1a80 <__aeabi_fdiv+0x138>
    1aa4:	21ff      	movs	r1, #255	; 0xff
    1aa6:	2400      	movs	r4, #0
    1aa8:	e7ea      	b.n	1a80 <__aeabi_fdiv+0x138>
    1aaa:	2301      	movs	r3, #1
    1aac:	1a59      	subs	r1, r3, r1
    1aae:	291b      	cmp	r1, #27
    1ab0:	dd66      	ble.n	1b80 <__aeabi_fdiv+0x238>
    1ab2:	9a01      	ldr	r2, [sp, #4]
    1ab4:	4013      	ands	r3, r2
    1ab6:	2100      	movs	r1, #0
    1ab8:	2400      	movs	r4, #0
    1aba:	e7e1      	b.n	1a80 <__aeabi_fdiv+0x138>
    1abc:	2380      	movs	r3, #128	; 0x80
    1abe:	03db      	lsls	r3, r3, #15
    1ac0:	421c      	tst	r4, r3
    1ac2:	d038      	beq.n	1b36 <__aeabi_fdiv+0x1ee>
    1ac4:	421d      	tst	r5, r3
    1ac6:	d051      	beq.n	1b6c <__aeabi_fdiv+0x224>
    1ac8:	431c      	orrs	r4, r3
    1aca:	0264      	lsls	r4, r4, #9
    1acc:	0a64      	lsrs	r4, r4, #9
    1ace:	0033      	movs	r3, r6
    1ad0:	21ff      	movs	r1, #255	; 0xff
    1ad2:	e7d5      	b.n	1a80 <__aeabi_fdiv+0x138>
    1ad4:	0163      	lsls	r3, r4, #5
    1ad6:	016c      	lsls	r4, r5, #5
    1ad8:	42a3      	cmp	r3, r4
    1ada:	d23b      	bcs.n	1b54 <__aeabi_fdiv+0x20c>
    1adc:	261b      	movs	r6, #27
    1ade:	2100      	movs	r1, #0
    1ae0:	3801      	subs	r0, #1
    1ae2:	2501      	movs	r5, #1
    1ae4:	001f      	movs	r7, r3
    1ae6:	0049      	lsls	r1, r1, #1
    1ae8:	005b      	lsls	r3, r3, #1
    1aea:	2f00      	cmp	r7, #0
    1aec:	db01      	blt.n	1af2 <__aeabi_fdiv+0x1aa>
    1aee:	429c      	cmp	r4, r3
    1af0:	d801      	bhi.n	1af6 <__aeabi_fdiv+0x1ae>
    1af2:	1b1b      	subs	r3, r3, r4
    1af4:	4329      	orrs	r1, r5
    1af6:	3e01      	subs	r6, #1
    1af8:	2e00      	cmp	r6, #0
    1afa:	d1f3      	bne.n	1ae4 <__aeabi_fdiv+0x19c>
    1afc:	001c      	movs	r4, r3
    1afe:	1e63      	subs	r3, r4, #1
    1b00:	419c      	sbcs	r4, r3
    1b02:	430c      	orrs	r4, r1
    1b04:	0001      	movs	r1, r0
    1b06:	317f      	adds	r1, #127	; 0x7f
    1b08:	2900      	cmp	r1, #0
    1b0a:	ddce      	ble.n	1aaa <__aeabi_fdiv+0x162>
    1b0c:	0763      	lsls	r3, r4, #29
    1b0e:	d004      	beq.n	1b1a <__aeabi_fdiv+0x1d2>
    1b10:	230f      	movs	r3, #15
    1b12:	4023      	ands	r3, r4
    1b14:	2b04      	cmp	r3, #4
    1b16:	d000      	beq.n	1b1a <__aeabi_fdiv+0x1d2>
    1b18:	3404      	adds	r4, #4
    1b1a:	0123      	lsls	r3, r4, #4
    1b1c:	d503      	bpl.n	1b26 <__aeabi_fdiv+0x1de>
    1b1e:	0001      	movs	r1, r0
    1b20:	4b2c      	ldr	r3, [pc, #176]	; (1bd4 <__aeabi_fdiv+0x28c>)
    1b22:	3180      	adds	r1, #128	; 0x80
    1b24:	401c      	ands	r4, r3
    1b26:	29fe      	cmp	r1, #254	; 0xfe
    1b28:	dd0d      	ble.n	1b46 <__aeabi_fdiv+0x1fe>
    1b2a:	2301      	movs	r3, #1
    1b2c:	9a01      	ldr	r2, [sp, #4]
    1b2e:	21ff      	movs	r1, #255	; 0xff
    1b30:	4013      	ands	r3, r2
    1b32:	2400      	movs	r4, #0
    1b34:	e7a4      	b.n	1a80 <__aeabi_fdiv+0x138>
    1b36:	2380      	movs	r3, #128	; 0x80
    1b38:	03db      	lsls	r3, r3, #15
    1b3a:	431c      	orrs	r4, r3
    1b3c:	0264      	lsls	r4, r4, #9
    1b3e:	0a64      	lsrs	r4, r4, #9
    1b40:	0033      	movs	r3, r6
    1b42:	21ff      	movs	r1, #255	; 0xff
    1b44:	e79c      	b.n	1a80 <__aeabi_fdiv+0x138>
    1b46:	2301      	movs	r3, #1
    1b48:	9a01      	ldr	r2, [sp, #4]
    1b4a:	01a4      	lsls	r4, r4, #6
    1b4c:	0a64      	lsrs	r4, r4, #9
    1b4e:	b2c9      	uxtb	r1, r1
    1b50:	4013      	ands	r3, r2
    1b52:	e795      	b.n	1a80 <__aeabi_fdiv+0x138>
    1b54:	1b1b      	subs	r3, r3, r4
    1b56:	261a      	movs	r6, #26
    1b58:	2101      	movs	r1, #1
    1b5a:	e7c2      	b.n	1ae2 <__aeabi_fdiv+0x19a>
    1b5c:	9b00      	ldr	r3, [sp, #0]
    1b5e:	468b      	mov	fp, r1
    1b60:	469a      	mov	sl, r3
    1b62:	2400      	movs	r4, #0
    1b64:	e74c      	b.n	1a00 <__aeabi_fdiv+0xb8>
    1b66:	0263      	lsls	r3, r4, #9
    1b68:	d5e5      	bpl.n	1b36 <__aeabi_fdiv+0x1ee>
    1b6a:	2500      	movs	r5, #0
    1b6c:	2480      	movs	r4, #128	; 0x80
    1b6e:	03e4      	lsls	r4, r4, #15
    1b70:	432c      	orrs	r4, r5
    1b72:	0264      	lsls	r4, r4, #9
    1b74:	0a64      	lsrs	r4, r4, #9
    1b76:	9b00      	ldr	r3, [sp, #0]
    1b78:	21ff      	movs	r1, #255	; 0xff
    1b7a:	e781      	b.n	1a80 <__aeabi_fdiv+0x138>
    1b7c:	9501      	str	r5, [sp, #4]
    1b7e:	e7c1      	b.n	1b04 <__aeabi_fdiv+0x1bc>
    1b80:	0023      	movs	r3, r4
    1b82:	2020      	movs	r0, #32
    1b84:	40cb      	lsrs	r3, r1
    1b86:	1a41      	subs	r1, r0, r1
    1b88:	408c      	lsls	r4, r1
    1b8a:	1e61      	subs	r1, r4, #1
    1b8c:	418c      	sbcs	r4, r1
    1b8e:	431c      	orrs	r4, r3
    1b90:	0763      	lsls	r3, r4, #29
    1b92:	d004      	beq.n	1b9e <__aeabi_fdiv+0x256>
    1b94:	230f      	movs	r3, #15
    1b96:	4023      	ands	r3, r4
    1b98:	2b04      	cmp	r3, #4
    1b9a:	d000      	beq.n	1b9e <__aeabi_fdiv+0x256>
    1b9c:	3404      	adds	r4, #4
    1b9e:	0163      	lsls	r3, r4, #5
    1ba0:	d505      	bpl.n	1bae <__aeabi_fdiv+0x266>
    1ba2:	2301      	movs	r3, #1
    1ba4:	9a01      	ldr	r2, [sp, #4]
    1ba6:	2101      	movs	r1, #1
    1ba8:	4013      	ands	r3, r2
    1baa:	2400      	movs	r4, #0
    1bac:	e768      	b.n	1a80 <__aeabi_fdiv+0x138>
    1bae:	2301      	movs	r3, #1
    1bb0:	9a01      	ldr	r2, [sp, #4]
    1bb2:	01a4      	lsls	r4, r4, #6
    1bb4:	0a64      	lsrs	r4, r4, #9
    1bb6:	4013      	ands	r3, r2
    1bb8:	2100      	movs	r1, #0
    1bba:	e761      	b.n	1a80 <__aeabi_fdiv+0x138>
    1bbc:	2380      	movs	r3, #128	; 0x80
    1bbe:	03db      	lsls	r3, r3, #15
    1bc0:	431c      	orrs	r4, r3
    1bc2:	0264      	lsls	r4, r4, #9
    1bc4:	0a64      	lsrs	r4, r4, #9
    1bc6:	4653      	mov	r3, sl
    1bc8:	21ff      	movs	r1, #255	; 0xff
    1bca:	e759      	b.n	1a80 <__aeabi_fdiv+0x138>
    1bcc:	000034ec 	.word	0x000034ec
    1bd0:	0000352c 	.word	0x0000352c
    1bd4:	f7ffffff 	.word	0xf7ffffff

00001bd8 <__aeabi_fmul>:
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bda:	4657      	mov	r7, sl
    1bdc:	464e      	mov	r6, r9
    1bde:	4645      	mov	r5, r8
    1be0:	46de      	mov	lr, fp
    1be2:	b5e0      	push	{r5, r6, r7, lr}
    1be4:	0247      	lsls	r7, r0, #9
    1be6:	0046      	lsls	r6, r0, #1
    1be8:	4688      	mov	r8, r1
    1bea:	0a7f      	lsrs	r7, r7, #9
    1bec:	0e36      	lsrs	r6, r6, #24
    1bee:	0fc4      	lsrs	r4, r0, #31
    1bf0:	2e00      	cmp	r6, #0
    1bf2:	d047      	beq.n	1c84 <__aeabi_fmul+0xac>
    1bf4:	2eff      	cmp	r6, #255	; 0xff
    1bf6:	d024      	beq.n	1c42 <__aeabi_fmul+0x6a>
    1bf8:	00fb      	lsls	r3, r7, #3
    1bfa:	2780      	movs	r7, #128	; 0x80
    1bfc:	04ff      	lsls	r7, r7, #19
    1bfe:	431f      	orrs	r7, r3
    1c00:	2300      	movs	r3, #0
    1c02:	4699      	mov	r9, r3
    1c04:	469a      	mov	sl, r3
    1c06:	3e7f      	subs	r6, #127	; 0x7f
    1c08:	4643      	mov	r3, r8
    1c0a:	025d      	lsls	r5, r3, #9
    1c0c:	0058      	lsls	r0, r3, #1
    1c0e:	0fdb      	lsrs	r3, r3, #31
    1c10:	0a6d      	lsrs	r5, r5, #9
    1c12:	0e00      	lsrs	r0, r0, #24
    1c14:	4698      	mov	r8, r3
    1c16:	d043      	beq.n	1ca0 <__aeabi_fmul+0xc8>
    1c18:	28ff      	cmp	r0, #255	; 0xff
    1c1a:	d03b      	beq.n	1c94 <__aeabi_fmul+0xbc>
    1c1c:	00eb      	lsls	r3, r5, #3
    1c1e:	2580      	movs	r5, #128	; 0x80
    1c20:	2200      	movs	r2, #0
    1c22:	04ed      	lsls	r5, r5, #19
    1c24:	431d      	orrs	r5, r3
    1c26:	387f      	subs	r0, #127	; 0x7f
    1c28:	1836      	adds	r6, r6, r0
    1c2a:	1c73      	adds	r3, r6, #1
    1c2c:	4641      	mov	r1, r8
    1c2e:	469b      	mov	fp, r3
    1c30:	464b      	mov	r3, r9
    1c32:	4061      	eors	r1, r4
    1c34:	4313      	orrs	r3, r2
    1c36:	2b0f      	cmp	r3, #15
    1c38:	d864      	bhi.n	1d04 <__aeabi_fmul+0x12c>
    1c3a:	4875      	ldr	r0, [pc, #468]	; (1e10 <__aeabi_fmul+0x238>)
    1c3c:	009b      	lsls	r3, r3, #2
    1c3e:	58c3      	ldr	r3, [r0, r3]
    1c40:	469f      	mov	pc, r3
    1c42:	2f00      	cmp	r7, #0
    1c44:	d142      	bne.n	1ccc <__aeabi_fmul+0xf4>
    1c46:	2308      	movs	r3, #8
    1c48:	4699      	mov	r9, r3
    1c4a:	3b06      	subs	r3, #6
    1c4c:	26ff      	movs	r6, #255	; 0xff
    1c4e:	469a      	mov	sl, r3
    1c50:	e7da      	b.n	1c08 <__aeabi_fmul+0x30>
    1c52:	4641      	mov	r1, r8
    1c54:	2a02      	cmp	r2, #2
    1c56:	d028      	beq.n	1caa <__aeabi_fmul+0xd2>
    1c58:	2a03      	cmp	r2, #3
    1c5a:	d100      	bne.n	1c5e <__aeabi_fmul+0x86>
    1c5c:	e0ce      	b.n	1dfc <__aeabi_fmul+0x224>
    1c5e:	2a01      	cmp	r2, #1
    1c60:	d000      	beq.n	1c64 <__aeabi_fmul+0x8c>
    1c62:	e0ac      	b.n	1dbe <__aeabi_fmul+0x1e6>
    1c64:	4011      	ands	r1, r2
    1c66:	2000      	movs	r0, #0
    1c68:	2200      	movs	r2, #0
    1c6a:	b2cc      	uxtb	r4, r1
    1c6c:	0240      	lsls	r0, r0, #9
    1c6e:	05d2      	lsls	r2, r2, #23
    1c70:	0a40      	lsrs	r0, r0, #9
    1c72:	07e4      	lsls	r4, r4, #31
    1c74:	4310      	orrs	r0, r2
    1c76:	4320      	orrs	r0, r4
    1c78:	bc3c      	pop	{r2, r3, r4, r5}
    1c7a:	4690      	mov	r8, r2
    1c7c:	4699      	mov	r9, r3
    1c7e:	46a2      	mov	sl, r4
    1c80:	46ab      	mov	fp, r5
    1c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c84:	2f00      	cmp	r7, #0
    1c86:	d115      	bne.n	1cb4 <__aeabi_fmul+0xdc>
    1c88:	2304      	movs	r3, #4
    1c8a:	4699      	mov	r9, r3
    1c8c:	3b03      	subs	r3, #3
    1c8e:	2600      	movs	r6, #0
    1c90:	469a      	mov	sl, r3
    1c92:	e7b9      	b.n	1c08 <__aeabi_fmul+0x30>
    1c94:	20ff      	movs	r0, #255	; 0xff
    1c96:	2202      	movs	r2, #2
    1c98:	2d00      	cmp	r5, #0
    1c9a:	d0c5      	beq.n	1c28 <__aeabi_fmul+0x50>
    1c9c:	2203      	movs	r2, #3
    1c9e:	e7c3      	b.n	1c28 <__aeabi_fmul+0x50>
    1ca0:	2d00      	cmp	r5, #0
    1ca2:	d119      	bne.n	1cd8 <__aeabi_fmul+0x100>
    1ca4:	2000      	movs	r0, #0
    1ca6:	2201      	movs	r2, #1
    1ca8:	e7be      	b.n	1c28 <__aeabi_fmul+0x50>
    1caa:	2401      	movs	r4, #1
    1cac:	22ff      	movs	r2, #255	; 0xff
    1cae:	400c      	ands	r4, r1
    1cb0:	2000      	movs	r0, #0
    1cb2:	e7db      	b.n	1c6c <__aeabi_fmul+0x94>
    1cb4:	0038      	movs	r0, r7
    1cb6:	f001 fa3f 	bl	3138 <__clzsi2>
    1cba:	2676      	movs	r6, #118	; 0x76
    1cbc:	1f43      	subs	r3, r0, #5
    1cbe:	409f      	lsls	r7, r3
    1cc0:	2300      	movs	r3, #0
    1cc2:	4276      	negs	r6, r6
    1cc4:	1a36      	subs	r6, r6, r0
    1cc6:	4699      	mov	r9, r3
    1cc8:	469a      	mov	sl, r3
    1cca:	e79d      	b.n	1c08 <__aeabi_fmul+0x30>
    1ccc:	230c      	movs	r3, #12
    1cce:	4699      	mov	r9, r3
    1cd0:	3b09      	subs	r3, #9
    1cd2:	26ff      	movs	r6, #255	; 0xff
    1cd4:	469a      	mov	sl, r3
    1cd6:	e797      	b.n	1c08 <__aeabi_fmul+0x30>
    1cd8:	0028      	movs	r0, r5
    1cda:	f001 fa2d 	bl	3138 <__clzsi2>
    1cde:	1f43      	subs	r3, r0, #5
    1ce0:	409d      	lsls	r5, r3
    1ce2:	2376      	movs	r3, #118	; 0x76
    1ce4:	425b      	negs	r3, r3
    1ce6:	1a18      	subs	r0, r3, r0
    1ce8:	2200      	movs	r2, #0
    1cea:	e79d      	b.n	1c28 <__aeabi_fmul+0x50>
    1cec:	2080      	movs	r0, #128	; 0x80
    1cee:	2400      	movs	r4, #0
    1cf0:	03c0      	lsls	r0, r0, #15
    1cf2:	22ff      	movs	r2, #255	; 0xff
    1cf4:	e7ba      	b.n	1c6c <__aeabi_fmul+0x94>
    1cf6:	003d      	movs	r5, r7
    1cf8:	4652      	mov	r2, sl
    1cfa:	e7ab      	b.n	1c54 <__aeabi_fmul+0x7c>
    1cfc:	003d      	movs	r5, r7
    1cfe:	0021      	movs	r1, r4
    1d00:	4652      	mov	r2, sl
    1d02:	e7a7      	b.n	1c54 <__aeabi_fmul+0x7c>
    1d04:	0c3b      	lsrs	r3, r7, #16
    1d06:	469c      	mov	ip, r3
    1d08:	042a      	lsls	r2, r5, #16
    1d0a:	0c12      	lsrs	r2, r2, #16
    1d0c:	0c2b      	lsrs	r3, r5, #16
    1d0e:	0014      	movs	r4, r2
    1d10:	4660      	mov	r0, ip
    1d12:	4665      	mov	r5, ip
    1d14:	043f      	lsls	r7, r7, #16
    1d16:	0c3f      	lsrs	r7, r7, #16
    1d18:	437c      	muls	r4, r7
    1d1a:	4342      	muls	r2, r0
    1d1c:	435d      	muls	r5, r3
    1d1e:	437b      	muls	r3, r7
    1d20:	0c27      	lsrs	r7, r4, #16
    1d22:	189b      	adds	r3, r3, r2
    1d24:	18ff      	adds	r7, r7, r3
    1d26:	42ba      	cmp	r2, r7
    1d28:	d903      	bls.n	1d32 <__aeabi_fmul+0x15a>
    1d2a:	2380      	movs	r3, #128	; 0x80
    1d2c:	025b      	lsls	r3, r3, #9
    1d2e:	469c      	mov	ip, r3
    1d30:	4465      	add	r5, ip
    1d32:	0424      	lsls	r4, r4, #16
    1d34:	043a      	lsls	r2, r7, #16
    1d36:	0c24      	lsrs	r4, r4, #16
    1d38:	1912      	adds	r2, r2, r4
    1d3a:	0193      	lsls	r3, r2, #6
    1d3c:	1e5c      	subs	r4, r3, #1
    1d3e:	41a3      	sbcs	r3, r4
    1d40:	0c3f      	lsrs	r7, r7, #16
    1d42:	0e92      	lsrs	r2, r2, #26
    1d44:	197d      	adds	r5, r7, r5
    1d46:	431a      	orrs	r2, r3
    1d48:	01ad      	lsls	r5, r5, #6
    1d4a:	4315      	orrs	r5, r2
    1d4c:	012b      	lsls	r3, r5, #4
    1d4e:	d504      	bpl.n	1d5a <__aeabi_fmul+0x182>
    1d50:	2301      	movs	r3, #1
    1d52:	465e      	mov	r6, fp
    1d54:	086a      	lsrs	r2, r5, #1
    1d56:	401d      	ands	r5, r3
    1d58:	4315      	orrs	r5, r2
    1d5a:	0032      	movs	r2, r6
    1d5c:	327f      	adds	r2, #127	; 0x7f
    1d5e:	2a00      	cmp	r2, #0
    1d60:	dd25      	ble.n	1dae <__aeabi_fmul+0x1d6>
    1d62:	076b      	lsls	r3, r5, #29
    1d64:	d004      	beq.n	1d70 <__aeabi_fmul+0x198>
    1d66:	230f      	movs	r3, #15
    1d68:	402b      	ands	r3, r5
    1d6a:	2b04      	cmp	r3, #4
    1d6c:	d000      	beq.n	1d70 <__aeabi_fmul+0x198>
    1d6e:	3504      	adds	r5, #4
    1d70:	012b      	lsls	r3, r5, #4
    1d72:	d503      	bpl.n	1d7c <__aeabi_fmul+0x1a4>
    1d74:	0032      	movs	r2, r6
    1d76:	4b27      	ldr	r3, [pc, #156]	; (1e14 <__aeabi_fmul+0x23c>)
    1d78:	3280      	adds	r2, #128	; 0x80
    1d7a:	401d      	ands	r5, r3
    1d7c:	2afe      	cmp	r2, #254	; 0xfe
    1d7e:	dc94      	bgt.n	1caa <__aeabi_fmul+0xd2>
    1d80:	2401      	movs	r4, #1
    1d82:	01a8      	lsls	r0, r5, #6
    1d84:	0a40      	lsrs	r0, r0, #9
    1d86:	b2d2      	uxtb	r2, r2
    1d88:	400c      	ands	r4, r1
    1d8a:	e76f      	b.n	1c6c <__aeabi_fmul+0x94>
    1d8c:	2080      	movs	r0, #128	; 0x80
    1d8e:	03c0      	lsls	r0, r0, #15
    1d90:	4207      	tst	r7, r0
    1d92:	d007      	beq.n	1da4 <__aeabi_fmul+0x1cc>
    1d94:	4205      	tst	r5, r0
    1d96:	d105      	bne.n	1da4 <__aeabi_fmul+0x1cc>
    1d98:	4328      	orrs	r0, r5
    1d9a:	0240      	lsls	r0, r0, #9
    1d9c:	0a40      	lsrs	r0, r0, #9
    1d9e:	4644      	mov	r4, r8
    1da0:	22ff      	movs	r2, #255	; 0xff
    1da2:	e763      	b.n	1c6c <__aeabi_fmul+0x94>
    1da4:	4338      	orrs	r0, r7
    1da6:	0240      	lsls	r0, r0, #9
    1da8:	0a40      	lsrs	r0, r0, #9
    1daa:	22ff      	movs	r2, #255	; 0xff
    1dac:	e75e      	b.n	1c6c <__aeabi_fmul+0x94>
    1dae:	2401      	movs	r4, #1
    1db0:	1aa3      	subs	r3, r4, r2
    1db2:	2b1b      	cmp	r3, #27
    1db4:	dd05      	ble.n	1dc2 <__aeabi_fmul+0x1ea>
    1db6:	400c      	ands	r4, r1
    1db8:	2200      	movs	r2, #0
    1dba:	2000      	movs	r0, #0
    1dbc:	e756      	b.n	1c6c <__aeabi_fmul+0x94>
    1dbe:	465e      	mov	r6, fp
    1dc0:	e7cb      	b.n	1d5a <__aeabi_fmul+0x182>
    1dc2:	002a      	movs	r2, r5
    1dc4:	2020      	movs	r0, #32
    1dc6:	40da      	lsrs	r2, r3
    1dc8:	1ac3      	subs	r3, r0, r3
    1dca:	409d      	lsls	r5, r3
    1dcc:	002b      	movs	r3, r5
    1dce:	1e5d      	subs	r5, r3, #1
    1dd0:	41ab      	sbcs	r3, r5
    1dd2:	4313      	orrs	r3, r2
    1dd4:	075a      	lsls	r2, r3, #29
    1dd6:	d004      	beq.n	1de2 <__aeabi_fmul+0x20a>
    1dd8:	220f      	movs	r2, #15
    1dda:	401a      	ands	r2, r3
    1ddc:	2a04      	cmp	r2, #4
    1dde:	d000      	beq.n	1de2 <__aeabi_fmul+0x20a>
    1de0:	3304      	adds	r3, #4
    1de2:	015a      	lsls	r2, r3, #5
    1de4:	d504      	bpl.n	1df0 <__aeabi_fmul+0x218>
    1de6:	2401      	movs	r4, #1
    1de8:	2201      	movs	r2, #1
    1dea:	400c      	ands	r4, r1
    1dec:	2000      	movs	r0, #0
    1dee:	e73d      	b.n	1c6c <__aeabi_fmul+0x94>
    1df0:	2401      	movs	r4, #1
    1df2:	019b      	lsls	r3, r3, #6
    1df4:	0a58      	lsrs	r0, r3, #9
    1df6:	400c      	ands	r4, r1
    1df8:	2200      	movs	r2, #0
    1dfa:	e737      	b.n	1c6c <__aeabi_fmul+0x94>
    1dfc:	2080      	movs	r0, #128	; 0x80
    1dfe:	2401      	movs	r4, #1
    1e00:	03c0      	lsls	r0, r0, #15
    1e02:	4328      	orrs	r0, r5
    1e04:	0240      	lsls	r0, r0, #9
    1e06:	0a40      	lsrs	r0, r0, #9
    1e08:	400c      	ands	r4, r1
    1e0a:	22ff      	movs	r2, #255	; 0xff
    1e0c:	e72e      	b.n	1c6c <__aeabi_fmul+0x94>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	0000356c 	.word	0x0000356c
    1e14:	f7ffffff 	.word	0xf7ffffff

00001e18 <__aeabi_fsub>:
    1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1a:	464f      	mov	r7, r9
    1e1c:	46d6      	mov	lr, sl
    1e1e:	4646      	mov	r6, r8
    1e20:	0044      	lsls	r4, r0, #1
    1e22:	b5c0      	push	{r6, r7, lr}
    1e24:	0fc2      	lsrs	r2, r0, #31
    1e26:	0247      	lsls	r7, r0, #9
    1e28:	0248      	lsls	r0, r1, #9
    1e2a:	0a40      	lsrs	r0, r0, #9
    1e2c:	4684      	mov	ip, r0
    1e2e:	4666      	mov	r6, ip
    1e30:	0a7b      	lsrs	r3, r7, #9
    1e32:	0048      	lsls	r0, r1, #1
    1e34:	0fc9      	lsrs	r1, r1, #31
    1e36:	469a      	mov	sl, r3
    1e38:	0e24      	lsrs	r4, r4, #24
    1e3a:	0015      	movs	r5, r2
    1e3c:	00db      	lsls	r3, r3, #3
    1e3e:	0e00      	lsrs	r0, r0, #24
    1e40:	4689      	mov	r9, r1
    1e42:	00f6      	lsls	r6, r6, #3
    1e44:	28ff      	cmp	r0, #255	; 0xff
    1e46:	d100      	bne.n	1e4a <__aeabi_fsub+0x32>
    1e48:	e08f      	b.n	1f6a <__aeabi_fsub+0x152>
    1e4a:	2101      	movs	r1, #1
    1e4c:	464f      	mov	r7, r9
    1e4e:	404f      	eors	r7, r1
    1e50:	0039      	movs	r1, r7
    1e52:	4291      	cmp	r1, r2
    1e54:	d066      	beq.n	1f24 <__aeabi_fsub+0x10c>
    1e56:	1a22      	subs	r2, r4, r0
    1e58:	2a00      	cmp	r2, #0
    1e5a:	dc00      	bgt.n	1e5e <__aeabi_fsub+0x46>
    1e5c:	e09d      	b.n	1f9a <__aeabi_fsub+0x182>
    1e5e:	2800      	cmp	r0, #0
    1e60:	d13d      	bne.n	1ede <__aeabi_fsub+0xc6>
    1e62:	2e00      	cmp	r6, #0
    1e64:	d100      	bne.n	1e68 <__aeabi_fsub+0x50>
    1e66:	e08b      	b.n	1f80 <__aeabi_fsub+0x168>
    1e68:	1e51      	subs	r1, r2, #1
    1e6a:	2900      	cmp	r1, #0
    1e6c:	d000      	beq.n	1e70 <__aeabi_fsub+0x58>
    1e6e:	e0b5      	b.n	1fdc <__aeabi_fsub+0x1c4>
    1e70:	2401      	movs	r4, #1
    1e72:	1b9b      	subs	r3, r3, r6
    1e74:	015a      	lsls	r2, r3, #5
    1e76:	d544      	bpl.n	1f02 <__aeabi_fsub+0xea>
    1e78:	019b      	lsls	r3, r3, #6
    1e7a:	099f      	lsrs	r7, r3, #6
    1e7c:	0038      	movs	r0, r7
    1e7e:	f001 f95b 	bl	3138 <__clzsi2>
    1e82:	3805      	subs	r0, #5
    1e84:	4087      	lsls	r7, r0
    1e86:	4284      	cmp	r4, r0
    1e88:	dd00      	ble.n	1e8c <__aeabi_fsub+0x74>
    1e8a:	e096      	b.n	1fba <__aeabi_fsub+0x1a2>
    1e8c:	1b04      	subs	r4, r0, r4
    1e8e:	003a      	movs	r2, r7
    1e90:	2020      	movs	r0, #32
    1e92:	3401      	adds	r4, #1
    1e94:	40e2      	lsrs	r2, r4
    1e96:	1b04      	subs	r4, r0, r4
    1e98:	40a7      	lsls	r7, r4
    1e9a:	003b      	movs	r3, r7
    1e9c:	1e5f      	subs	r7, r3, #1
    1e9e:	41bb      	sbcs	r3, r7
    1ea0:	2400      	movs	r4, #0
    1ea2:	4313      	orrs	r3, r2
    1ea4:	075a      	lsls	r2, r3, #29
    1ea6:	d004      	beq.n	1eb2 <__aeabi_fsub+0x9a>
    1ea8:	220f      	movs	r2, #15
    1eaa:	401a      	ands	r2, r3
    1eac:	2a04      	cmp	r2, #4
    1eae:	d000      	beq.n	1eb2 <__aeabi_fsub+0x9a>
    1eb0:	3304      	adds	r3, #4
    1eb2:	015a      	lsls	r2, r3, #5
    1eb4:	d527      	bpl.n	1f06 <__aeabi_fsub+0xee>
    1eb6:	3401      	adds	r4, #1
    1eb8:	2cff      	cmp	r4, #255	; 0xff
    1eba:	d100      	bne.n	1ebe <__aeabi_fsub+0xa6>
    1ebc:	e079      	b.n	1fb2 <__aeabi_fsub+0x19a>
    1ebe:	2201      	movs	r2, #1
    1ec0:	019b      	lsls	r3, r3, #6
    1ec2:	0a5b      	lsrs	r3, r3, #9
    1ec4:	b2e4      	uxtb	r4, r4
    1ec6:	402a      	ands	r2, r5
    1ec8:	025b      	lsls	r3, r3, #9
    1eca:	05e4      	lsls	r4, r4, #23
    1ecc:	0a58      	lsrs	r0, r3, #9
    1ece:	07d2      	lsls	r2, r2, #31
    1ed0:	4320      	orrs	r0, r4
    1ed2:	4310      	orrs	r0, r2
    1ed4:	bc1c      	pop	{r2, r3, r4}
    1ed6:	4690      	mov	r8, r2
    1ed8:	4699      	mov	r9, r3
    1eda:	46a2      	mov	sl, r4
    1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ede:	2cff      	cmp	r4, #255	; 0xff
    1ee0:	d0e0      	beq.n	1ea4 <__aeabi_fsub+0x8c>
    1ee2:	2180      	movs	r1, #128	; 0x80
    1ee4:	04c9      	lsls	r1, r1, #19
    1ee6:	430e      	orrs	r6, r1
    1ee8:	2a1b      	cmp	r2, #27
    1eea:	dc7b      	bgt.n	1fe4 <__aeabi_fsub+0x1cc>
    1eec:	0031      	movs	r1, r6
    1eee:	2020      	movs	r0, #32
    1ef0:	40d1      	lsrs	r1, r2
    1ef2:	1a82      	subs	r2, r0, r2
    1ef4:	4096      	lsls	r6, r2
    1ef6:	1e72      	subs	r2, r6, #1
    1ef8:	4196      	sbcs	r6, r2
    1efa:	430e      	orrs	r6, r1
    1efc:	1b9b      	subs	r3, r3, r6
    1efe:	015a      	lsls	r2, r3, #5
    1f00:	d4ba      	bmi.n	1e78 <__aeabi_fsub+0x60>
    1f02:	075a      	lsls	r2, r3, #29
    1f04:	d1d0      	bne.n	1ea8 <__aeabi_fsub+0x90>
    1f06:	2201      	movs	r2, #1
    1f08:	08df      	lsrs	r7, r3, #3
    1f0a:	402a      	ands	r2, r5
    1f0c:	2cff      	cmp	r4, #255	; 0xff
    1f0e:	d133      	bne.n	1f78 <__aeabi_fsub+0x160>
    1f10:	2f00      	cmp	r7, #0
    1f12:	d100      	bne.n	1f16 <__aeabi_fsub+0xfe>
    1f14:	e0a8      	b.n	2068 <STACK_SIZE+0x68>
    1f16:	2380      	movs	r3, #128	; 0x80
    1f18:	03db      	lsls	r3, r3, #15
    1f1a:	433b      	orrs	r3, r7
    1f1c:	025b      	lsls	r3, r3, #9
    1f1e:	0a5b      	lsrs	r3, r3, #9
    1f20:	24ff      	movs	r4, #255	; 0xff
    1f22:	e7d1      	b.n	1ec8 <__aeabi_fsub+0xb0>
    1f24:	1a21      	subs	r1, r4, r0
    1f26:	2900      	cmp	r1, #0
    1f28:	dd4c      	ble.n	1fc4 <__aeabi_fsub+0x1ac>
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d02a      	beq.n	1f84 <__aeabi_fsub+0x16c>
    1f2e:	2cff      	cmp	r4, #255	; 0xff
    1f30:	d0b8      	beq.n	1ea4 <__aeabi_fsub+0x8c>
    1f32:	2080      	movs	r0, #128	; 0x80
    1f34:	04c0      	lsls	r0, r0, #19
    1f36:	4306      	orrs	r6, r0
    1f38:	291b      	cmp	r1, #27
    1f3a:	dd00      	ble.n	1f3e <__aeabi_fsub+0x126>
    1f3c:	e0af      	b.n	209e <STACK_SIZE+0x9e>
    1f3e:	0030      	movs	r0, r6
    1f40:	2720      	movs	r7, #32
    1f42:	40c8      	lsrs	r0, r1
    1f44:	1a79      	subs	r1, r7, r1
    1f46:	408e      	lsls	r6, r1
    1f48:	1e71      	subs	r1, r6, #1
    1f4a:	418e      	sbcs	r6, r1
    1f4c:	4306      	orrs	r6, r0
    1f4e:	199b      	adds	r3, r3, r6
    1f50:	0159      	lsls	r1, r3, #5
    1f52:	d5d6      	bpl.n	1f02 <__aeabi_fsub+0xea>
    1f54:	3401      	adds	r4, #1
    1f56:	2cff      	cmp	r4, #255	; 0xff
    1f58:	d100      	bne.n	1f5c <__aeabi_fsub+0x144>
    1f5a:	e085      	b.n	2068 <STACK_SIZE+0x68>
    1f5c:	2201      	movs	r2, #1
    1f5e:	497a      	ldr	r1, [pc, #488]	; (2148 <STACK_SIZE+0x148>)
    1f60:	401a      	ands	r2, r3
    1f62:	085b      	lsrs	r3, r3, #1
    1f64:	400b      	ands	r3, r1
    1f66:	4313      	orrs	r3, r2
    1f68:	e79c      	b.n	1ea4 <__aeabi_fsub+0x8c>
    1f6a:	2e00      	cmp	r6, #0
    1f6c:	d000      	beq.n	1f70 <__aeabi_fsub+0x158>
    1f6e:	e770      	b.n	1e52 <__aeabi_fsub+0x3a>
    1f70:	e76b      	b.n	1e4a <__aeabi_fsub+0x32>
    1f72:	1e3b      	subs	r3, r7, #0
    1f74:	d1c5      	bne.n	1f02 <__aeabi_fsub+0xea>
    1f76:	2200      	movs	r2, #0
    1f78:	027b      	lsls	r3, r7, #9
    1f7a:	0a5b      	lsrs	r3, r3, #9
    1f7c:	b2e4      	uxtb	r4, r4
    1f7e:	e7a3      	b.n	1ec8 <__aeabi_fsub+0xb0>
    1f80:	0014      	movs	r4, r2
    1f82:	e78f      	b.n	1ea4 <__aeabi_fsub+0x8c>
    1f84:	2e00      	cmp	r6, #0
    1f86:	d04d      	beq.n	2024 <STACK_SIZE+0x24>
    1f88:	1e48      	subs	r0, r1, #1
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d157      	bne.n	203e <STACK_SIZE+0x3e>
    1f8e:	199b      	adds	r3, r3, r6
    1f90:	2401      	movs	r4, #1
    1f92:	015a      	lsls	r2, r3, #5
    1f94:	d5b5      	bpl.n	1f02 <__aeabi_fsub+0xea>
    1f96:	2402      	movs	r4, #2
    1f98:	e7e0      	b.n	1f5c <__aeabi_fsub+0x144>
    1f9a:	2a00      	cmp	r2, #0
    1f9c:	d125      	bne.n	1fea <__aeabi_fsub+0x1d2>
    1f9e:	1c62      	adds	r2, r4, #1
    1fa0:	b2d2      	uxtb	r2, r2
    1fa2:	2a01      	cmp	r2, #1
    1fa4:	dd72      	ble.n	208c <STACK_SIZE+0x8c>
    1fa6:	1b9f      	subs	r7, r3, r6
    1fa8:	017a      	lsls	r2, r7, #5
    1faa:	d535      	bpl.n	2018 <STACK_SIZE+0x18>
    1fac:	1af7      	subs	r7, r6, r3
    1fae:	000d      	movs	r5, r1
    1fb0:	e764      	b.n	1e7c <__aeabi_fsub+0x64>
    1fb2:	2201      	movs	r2, #1
    1fb4:	2300      	movs	r3, #0
    1fb6:	402a      	ands	r2, r5
    1fb8:	e786      	b.n	1ec8 <__aeabi_fsub+0xb0>
    1fba:	003b      	movs	r3, r7
    1fbc:	4a63      	ldr	r2, [pc, #396]	; (214c <STACK_SIZE+0x14c>)
    1fbe:	1a24      	subs	r4, r4, r0
    1fc0:	4013      	ands	r3, r2
    1fc2:	e76f      	b.n	1ea4 <__aeabi_fsub+0x8c>
    1fc4:	2900      	cmp	r1, #0
    1fc6:	d16c      	bne.n	20a2 <STACK_SIZE+0xa2>
    1fc8:	1c61      	adds	r1, r4, #1
    1fca:	b2c8      	uxtb	r0, r1
    1fcc:	2801      	cmp	r0, #1
    1fce:	dd4e      	ble.n	206e <STACK_SIZE+0x6e>
    1fd0:	29ff      	cmp	r1, #255	; 0xff
    1fd2:	d049      	beq.n	2068 <STACK_SIZE+0x68>
    1fd4:	199b      	adds	r3, r3, r6
    1fd6:	085b      	lsrs	r3, r3, #1
    1fd8:	000c      	movs	r4, r1
    1fda:	e763      	b.n	1ea4 <__aeabi_fsub+0x8c>
    1fdc:	2aff      	cmp	r2, #255	; 0xff
    1fde:	d041      	beq.n	2064 <STACK_SIZE+0x64>
    1fe0:	000a      	movs	r2, r1
    1fe2:	e781      	b.n	1ee8 <__aeabi_fsub+0xd0>
    1fe4:	2601      	movs	r6, #1
    1fe6:	1b9b      	subs	r3, r3, r6
    1fe8:	e789      	b.n	1efe <__aeabi_fsub+0xe6>
    1fea:	2c00      	cmp	r4, #0
    1fec:	d01c      	beq.n	2028 <STACK_SIZE+0x28>
    1fee:	28ff      	cmp	r0, #255	; 0xff
    1ff0:	d021      	beq.n	2036 <STACK_SIZE+0x36>
    1ff2:	2480      	movs	r4, #128	; 0x80
    1ff4:	04e4      	lsls	r4, r4, #19
    1ff6:	4252      	negs	r2, r2
    1ff8:	4323      	orrs	r3, r4
    1ffa:	2a1b      	cmp	r2, #27
    1ffc:	dd00      	ble.n	2000 <STACK_SIZE>
    1ffe:	e096      	b.n	212e <STACK_SIZE+0x12e>
    2000:	001c      	movs	r4, r3
    2002:	2520      	movs	r5, #32
    2004:	40d4      	lsrs	r4, r2
    2006:	1aaa      	subs	r2, r5, r2
    2008:	4093      	lsls	r3, r2
    200a:	1e5a      	subs	r2, r3, #1
    200c:	4193      	sbcs	r3, r2
    200e:	4323      	orrs	r3, r4
    2010:	1af3      	subs	r3, r6, r3
    2012:	0004      	movs	r4, r0
    2014:	000d      	movs	r5, r1
    2016:	e72d      	b.n	1e74 <__aeabi_fsub+0x5c>
    2018:	2f00      	cmp	r7, #0
    201a:	d000      	beq.n	201e <STACK_SIZE+0x1e>
    201c:	e72e      	b.n	1e7c <__aeabi_fsub+0x64>
    201e:	2200      	movs	r2, #0
    2020:	2400      	movs	r4, #0
    2022:	e7a9      	b.n	1f78 <__aeabi_fsub+0x160>
    2024:	000c      	movs	r4, r1
    2026:	e73d      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2028:	2b00      	cmp	r3, #0
    202a:	d058      	beq.n	20de <STACK_SIZE+0xde>
    202c:	43d2      	mvns	r2, r2
    202e:	2a00      	cmp	r2, #0
    2030:	d0ee      	beq.n	2010 <STACK_SIZE+0x10>
    2032:	28ff      	cmp	r0, #255	; 0xff
    2034:	d1e1      	bne.n	1ffa <__aeabi_fsub+0x1e2>
    2036:	0033      	movs	r3, r6
    2038:	24ff      	movs	r4, #255	; 0xff
    203a:	000d      	movs	r5, r1
    203c:	e732      	b.n	1ea4 <__aeabi_fsub+0x8c>
    203e:	29ff      	cmp	r1, #255	; 0xff
    2040:	d010      	beq.n	2064 <STACK_SIZE+0x64>
    2042:	0001      	movs	r1, r0
    2044:	e778      	b.n	1f38 <__aeabi_fsub+0x120>
    2046:	2b00      	cmp	r3, #0
    2048:	d06e      	beq.n	2128 <STACK_SIZE+0x128>
    204a:	24ff      	movs	r4, #255	; 0xff
    204c:	2e00      	cmp	r6, #0
    204e:	d100      	bne.n	2052 <STACK_SIZE+0x52>
    2050:	e728      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2052:	2280      	movs	r2, #128	; 0x80
    2054:	4651      	mov	r1, sl
    2056:	03d2      	lsls	r2, r2, #15
    2058:	4211      	tst	r1, r2
    205a:	d003      	beq.n	2064 <STACK_SIZE+0x64>
    205c:	4661      	mov	r1, ip
    205e:	4211      	tst	r1, r2
    2060:	d100      	bne.n	2064 <STACK_SIZE+0x64>
    2062:	0033      	movs	r3, r6
    2064:	24ff      	movs	r4, #255	; 0xff
    2066:	e71d      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2068:	24ff      	movs	r4, #255	; 0xff
    206a:	2300      	movs	r3, #0
    206c:	e72c      	b.n	1ec8 <__aeabi_fsub+0xb0>
    206e:	2c00      	cmp	r4, #0
    2070:	d1e9      	bne.n	2046 <STACK_SIZE+0x46>
    2072:	2b00      	cmp	r3, #0
    2074:	d063      	beq.n	213e <STACK_SIZE+0x13e>
    2076:	2e00      	cmp	r6, #0
    2078:	d100      	bne.n	207c <STACK_SIZE+0x7c>
    207a:	e713      	b.n	1ea4 <__aeabi_fsub+0x8c>
    207c:	199b      	adds	r3, r3, r6
    207e:	015a      	lsls	r2, r3, #5
    2080:	d400      	bmi.n	2084 <STACK_SIZE+0x84>
    2082:	e73e      	b.n	1f02 <__aeabi_fsub+0xea>
    2084:	4a31      	ldr	r2, [pc, #196]	; (214c <STACK_SIZE+0x14c>)
    2086:	000c      	movs	r4, r1
    2088:	4013      	ands	r3, r2
    208a:	e70b      	b.n	1ea4 <__aeabi_fsub+0x8c>
    208c:	2c00      	cmp	r4, #0
    208e:	d11e      	bne.n	20ce <STACK_SIZE+0xce>
    2090:	2b00      	cmp	r3, #0
    2092:	d12f      	bne.n	20f4 <STACK_SIZE+0xf4>
    2094:	2e00      	cmp	r6, #0
    2096:	d04f      	beq.n	2138 <STACK_SIZE+0x138>
    2098:	0033      	movs	r3, r6
    209a:	000d      	movs	r5, r1
    209c:	e702      	b.n	1ea4 <__aeabi_fsub+0x8c>
    209e:	2601      	movs	r6, #1
    20a0:	e755      	b.n	1f4e <__aeabi_fsub+0x136>
    20a2:	2c00      	cmp	r4, #0
    20a4:	d11f      	bne.n	20e6 <STACK_SIZE+0xe6>
    20a6:	2b00      	cmp	r3, #0
    20a8:	d043      	beq.n	2132 <STACK_SIZE+0x132>
    20aa:	43c9      	mvns	r1, r1
    20ac:	2900      	cmp	r1, #0
    20ae:	d00b      	beq.n	20c8 <STACK_SIZE+0xc8>
    20b0:	28ff      	cmp	r0, #255	; 0xff
    20b2:	d039      	beq.n	2128 <STACK_SIZE+0x128>
    20b4:	291b      	cmp	r1, #27
    20b6:	dc44      	bgt.n	2142 <STACK_SIZE+0x142>
    20b8:	001c      	movs	r4, r3
    20ba:	2720      	movs	r7, #32
    20bc:	40cc      	lsrs	r4, r1
    20be:	1a79      	subs	r1, r7, r1
    20c0:	408b      	lsls	r3, r1
    20c2:	1e59      	subs	r1, r3, #1
    20c4:	418b      	sbcs	r3, r1
    20c6:	4323      	orrs	r3, r4
    20c8:	199b      	adds	r3, r3, r6
    20ca:	0004      	movs	r4, r0
    20cc:	e740      	b.n	1f50 <__aeabi_fsub+0x138>
    20ce:	2b00      	cmp	r3, #0
    20d0:	d11a      	bne.n	2108 <STACK_SIZE+0x108>
    20d2:	2e00      	cmp	r6, #0
    20d4:	d124      	bne.n	2120 <STACK_SIZE+0x120>
    20d6:	2780      	movs	r7, #128	; 0x80
    20d8:	2200      	movs	r2, #0
    20da:	03ff      	lsls	r7, r7, #15
    20dc:	e71b      	b.n	1f16 <__aeabi_fsub+0xfe>
    20de:	0033      	movs	r3, r6
    20e0:	0004      	movs	r4, r0
    20e2:	000d      	movs	r5, r1
    20e4:	e6de      	b.n	1ea4 <__aeabi_fsub+0x8c>
    20e6:	28ff      	cmp	r0, #255	; 0xff
    20e8:	d01e      	beq.n	2128 <STACK_SIZE+0x128>
    20ea:	2480      	movs	r4, #128	; 0x80
    20ec:	04e4      	lsls	r4, r4, #19
    20ee:	4249      	negs	r1, r1
    20f0:	4323      	orrs	r3, r4
    20f2:	e7df      	b.n	20b4 <STACK_SIZE+0xb4>
    20f4:	2e00      	cmp	r6, #0
    20f6:	d100      	bne.n	20fa <STACK_SIZE+0xfa>
    20f8:	e6d4      	b.n	1ea4 <__aeabi_fsub+0x8c>
    20fa:	1b9f      	subs	r7, r3, r6
    20fc:	017a      	lsls	r2, r7, #5
    20fe:	d400      	bmi.n	2102 <STACK_SIZE+0x102>
    2100:	e737      	b.n	1f72 <__aeabi_fsub+0x15a>
    2102:	1af3      	subs	r3, r6, r3
    2104:	000d      	movs	r5, r1
    2106:	e6cd      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2108:	24ff      	movs	r4, #255	; 0xff
    210a:	2e00      	cmp	r6, #0
    210c:	d100      	bne.n	2110 <STACK_SIZE+0x110>
    210e:	e6c9      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2110:	2280      	movs	r2, #128	; 0x80
    2112:	4650      	mov	r0, sl
    2114:	03d2      	lsls	r2, r2, #15
    2116:	4210      	tst	r0, r2
    2118:	d0a4      	beq.n	2064 <STACK_SIZE+0x64>
    211a:	4660      	mov	r0, ip
    211c:	4210      	tst	r0, r2
    211e:	d1a1      	bne.n	2064 <STACK_SIZE+0x64>
    2120:	0033      	movs	r3, r6
    2122:	000d      	movs	r5, r1
    2124:	24ff      	movs	r4, #255	; 0xff
    2126:	e6bd      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2128:	0033      	movs	r3, r6
    212a:	24ff      	movs	r4, #255	; 0xff
    212c:	e6ba      	b.n	1ea4 <__aeabi_fsub+0x8c>
    212e:	2301      	movs	r3, #1
    2130:	e76e      	b.n	2010 <STACK_SIZE+0x10>
    2132:	0033      	movs	r3, r6
    2134:	0004      	movs	r4, r0
    2136:	e6b5      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2138:	2700      	movs	r7, #0
    213a:	2200      	movs	r2, #0
    213c:	e71c      	b.n	1f78 <__aeabi_fsub+0x160>
    213e:	0033      	movs	r3, r6
    2140:	e6b0      	b.n	1ea4 <__aeabi_fsub+0x8c>
    2142:	2301      	movs	r3, #1
    2144:	e7c0      	b.n	20c8 <STACK_SIZE+0xc8>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	7dffffff 	.word	0x7dffffff
    214c:	fbffffff 	.word	0xfbffffff

00002150 <__aeabi_ui2f>:
    2150:	b510      	push	{r4, lr}
    2152:	1e04      	subs	r4, r0, #0
    2154:	d027      	beq.n	21a6 <__aeabi_ui2f+0x56>
    2156:	f000 ffef 	bl	3138 <__clzsi2>
    215a:	239e      	movs	r3, #158	; 0x9e
    215c:	1a1b      	subs	r3, r3, r0
    215e:	2b96      	cmp	r3, #150	; 0x96
    2160:	dc0a      	bgt.n	2178 <__aeabi_ui2f+0x28>
    2162:	2296      	movs	r2, #150	; 0x96
    2164:	1ad2      	subs	r2, r2, r3
    2166:	4094      	lsls	r4, r2
    2168:	0264      	lsls	r4, r4, #9
    216a:	0a64      	lsrs	r4, r4, #9
    216c:	b2db      	uxtb	r3, r3
    216e:	0264      	lsls	r4, r4, #9
    2170:	05db      	lsls	r3, r3, #23
    2172:	0a60      	lsrs	r0, r4, #9
    2174:	4318      	orrs	r0, r3
    2176:	bd10      	pop	{r4, pc}
    2178:	2b99      	cmp	r3, #153	; 0x99
    217a:	dc17      	bgt.n	21ac <__aeabi_ui2f+0x5c>
    217c:	2299      	movs	r2, #153	; 0x99
    217e:	1ad2      	subs	r2, r2, r3
    2180:	2a00      	cmp	r2, #0
    2182:	dd27      	ble.n	21d4 <__aeabi_ui2f+0x84>
    2184:	4094      	lsls	r4, r2
    2186:	0022      	movs	r2, r4
    2188:	4c13      	ldr	r4, [pc, #76]	; (21d8 <__aeabi_ui2f+0x88>)
    218a:	4014      	ands	r4, r2
    218c:	0751      	lsls	r1, r2, #29
    218e:	d004      	beq.n	219a <__aeabi_ui2f+0x4a>
    2190:	210f      	movs	r1, #15
    2192:	400a      	ands	r2, r1
    2194:	2a04      	cmp	r2, #4
    2196:	d000      	beq.n	219a <__aeabi_ui2f+0x4a>
    2198:	3404      	adds	r4, #4
    219a:	0162      	lsls	r2, r4, #5
    219c:	d412      	bmi.n	21c4 <__aeabi_ui2f+0x74>
    219e:	01a4      	lsls	r4, r4, #6
    21a0:	0a64      	lsrs	r4, r4, #9
    21a2:	b2db      	uxtb	r3, r3
    21a4:	e7e3      	b.n	216e <__aeabi_ui2f+0x1e>
    21a6:	2300      	movs	r3, #0
    21a8:	2400      	movs	r4, #0
    21aa:	e7e0      	b.n	216e <__aeabi_ui2f+0x1e>
    21ac:	22b9      	movs	r2, #185	; 0xb9
    21ae:	0021      	movs	r1, r4
    21b0:	1ad2      	subs	r2, r2, r3
    21b2:	4091      	lsls	r1, r2
    21b4:	000a      	movs	r2, r1
    21b6:	1e51      	subs	r1, r2, #1
    21b8:	418a      	sbcs	r2, r1
    21ba:	2105      	movs	r1, #5
    21bc:	1a09      	subs	r1, r1, r0
    21be:	40cc      	lsrs	r4, r1
    21c0:	4314      	orrs	r4, r2
    21c2:	e7db      	b.n	217c <__aeabi_ui2f+0x2c>
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <__aeabi_ui2f+0x88>)
    21c6:	401c      	ands	r4, r3
    21c8:	239f      	movs	r3, #159	; 0x9f
    21ca:	01a4      	lsls	r4, r4, #6
    21cc:	1a1b      	subs	r3, r3, r0
    21ce:	0a64      	lsrs	r4, r4, #9
    21d0:	b2db      	uxtb	r3, r3
    21d2:	e7cc      	b.n	216e <__aeabi_ui2f+0x1e>
    21d4:	0022      	movs	r2, r4
    21d6:	e7d7      	b.n	2188 <__aeabi_ui2f+0x38>
    21d8:	fbffffff 	.word	0xfbffffff

000021dc <__aeabi_dadd>:
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21de:	4645      	mov	r5, r8
    21e0:	46de      	mov	lr, fp
    21e2:	4657      	mov	r7, sl
    21e4:	464e      	mov	r6, r9
    21e6:	030c      	lsls	r4, r1, #12
    21e8:	b5e0      	push	{r5, r6, r7, lr}
    21ea:	004e      	lsls	r6, r1, #1
    21ec:	0fc9      	lsrs	r1, r1, #31
    21ee:	4688      	mov	r8, r1
    21f0:	000d      	movs	r5, r1
    21f2:	0a61      	lsrs	r1, r4, #9
    21f4:	0f44      	lsrs	r4, r0, #29
    21f6:	430c      	orrs	r4, r1
    21f8:	00c7      	lsls	r7, r0, #3
    21fa:	0319      	lsls	r1, r3, #12
    21fc:	0058      	lsls	r0, r3, #1
    21fe:	0fdb      	lsrs	r3, r3, #31
    2200:	469b      	mov	fp, r3
    2202:	0a4b      	lsrs	r3, r1, #9
    2204:	0f51      	lsrs	r1, r2, #29
    2206:	430b      	orrs	r3, r1
    2208:	0d76      	lsrs	r6, r6, #21
    220a:	0d40      	lsrs	r0, r0, #21
    220c:	0019      	movs	r1, r3
    220e:	00d2      	lsls	r2, r2, #3
    2210:	45d8      	cmp	r8, fp
    2212:	d100      	bne.n	2216 <__aeabi_dadd+0x3a>
    2214:	e0ae      	b.n	2374 <__aeabi_dadd+0x198>
    2216:	1a35      	subs	r5, r6, r0
    2218:	2d00      	cmp	r5, #0
    221a:	dc00      	bgt.n	221e <__aeabi_dadd+0x42>
    221c:	e0f6      	b.n	240c <__aeabi_dadd+0x230>
    221e:	2800      	cmp	r0, #0
    2220:	d10f      	bne.n	2242 <__aeabi_dadd+0x66>
    2222:	4313      	orrs	r3, r2
    2224:	d100      	bne.n	2228 <__aeabi_dadd+0x4c>
    2226:	e0db      	b.n	23e0 <__aeabi_dadd+0x204>
    2228:	1e6b      	subs	r3, r5, #1
    222a:	2b00      	cmp	r3, #0
    222c:	d000      	beq.n	2230 <__aeabi_dadd+0x54>
    222e:	e137      	b.n	24a0 <__aeabi_dadd+0x2c4>
    2230:	1aba      	subs	r2, r7, r2
    2232:	4297      	cmp	r7, r2
    2234:	41bf      	sbcs	r7, r7
    2236:	1a64      	subs	r4, r4, r1
    2238:	427f      	negs	r7, r7
    223a:	1be4      	subs	r4, r4, r7
    223c:	2601      	movs	r6, #1
    223e:	0017      	movs	r7, r2
    2240:	e024      	b.n	228c <__aeabi_dadd+0xb0>
    2242:	4bc6      	ldr	r3, [pc, #792]	; (255c <__aeabi_dadd+0x380>)
    2244:	429e      	cmp	r6, r3
    2246:	d04d      	beq.n	22e4 <__aeabi_dadd+0x108>
    2248:	2380      	movs	r3, #128	; 0x80
    224a:	041b      	lsls	r3, r3, #16
    224c:	4319      	orrs	r1, r3
    224e:	2d38      	cmp	r5, #56	; 0x38
    2250:	dd00      	ble.n	2254 <__aeabi_dadd+0x78>
    2252:	e107      	b.n	2464 <__aeabi_dadd+0x288>
    2254:	2d1f      	cmp	r5, #31
    2256:	dd00      	ble.n	225a <__aeabi_dadd+0x7e>
    2258:	e138      	b.n	24cc <__aeabi_dadd+0x2f0>
    225a:	2020      	movs	r0, #32
    225c:	1b43      	subs	r3, r0, r5
    225e:	469a      	mov	sl, r3
    2260:	000b      	movs	r3, r1
    2262:	4650      	mov	r0, sl
    2264:	4083      	lsls	r3, r0
    2266:	4699      	mov	r9, r3
    2268:	0013      	movs	r3, r2
    226a:	4648      	mov	r0, r9
    226c:	40eb      	lsrs	r3, r5
    226e:	4318      	orrs	r0, r3
    2270:	0003      	movs	r3, r0
    2272:	4650      	mov	r0, sl
    2274:	4082      	lsls	r2, r0
    2276:	1e50      	subs	r0, r2, #1
    2278:	4182      	sbcs	r2, r0
    227a:	40e9      	lsrs	r1, r5
    227c:	431a      	orrs	r2, r3
    227e:	1aba      	subs	r2, r7, r2
    2280:	1a61      	subs	r1, r4, r1
    2282:	4297      	cmp	r7, r2
    2284:	41a4      	sbcs	r4, r4
    2286:	0017      	movs	r7, r2
    2288:	4264      	negs	r4, r4
    228a:	1b0c      	subs	r4, r1, r4
    228c:	0223      	lsls	r3, r4, #8
    228e:	d562      	bpl.n	2356 <__aeabi_dadd+0x17a>
    2290:	0264      	lsls	r4, r4, #9
    2292:	0a65      	lsrs	r5, r4, #9
    2294:	2d00      	cmp	r5, #0
    2296:	d100      	bne.n	229a <__aeabi_dadd+0xbe>
    2298:	e0df      	b.n	245a <__aeabi_dadd+0x27e>
    229a:	0028      	movs	r0, r5
    229c:	f000 ff4c 	bl	3138 <__clzsi2>
    22a0:	0003      	movs	r3, r0
    22a2:	3b08      	subs	r3, #8
    22a4:	2b1f      	cmp	r3, #31
    22a6:	dd00      	ble.n	22aa <__aeabi_dadd+0xce>
    22a8:	e0d2      	b.n	2450 <__aeabi_dadd+0x274>
    22aa:	2220      	movs	r2, #32
    22ac:	003c      	movs	r4, r7
    22ae:	1ad2      	subs	r2, r2, r3
    22b0:	409d      	lsls	r5, r3
    22b2:	40d4      	lsrs	r4, r2
    22b4:	409f      	lsls	r7, r3
    22b6:	4325      	orrs	r5, r4
    22b8:	429e      	cmp	r6, r3
    22ba:	dd00      	ble.n	22be <__aeabi_dadd+0xe2>
    22bc:	e0c4      	b.n	2448 <__aeabi_dadd+0x26c>
    22be:	1b9e      	subs	r6, r3, r6
    22c0:	1c73      	adds	r3, r6, #1
    22c2:	2b1f      	cmp	r3, #31
    22c4:	dd00      	ble.n	22c8 <__aeabi_dadd+0xec>
    22c6:	e0f1      	b.n	24ac <__aeabi_dadd+0x2d0>
    22c8:	2220      	movs	r2, #32
    22ca:	0038      	movs	r0, r7
    22cc:	0029      	movs	r1, r5
    22ce:	1ad2      	subs	r2, r2, r3
    22d0:	40d8      	lsrs	r0, r3
    22d2:	4091      	lsls	r1, r2
    22d4:	4097      	lsls	r7, r2
    22d6:	002c      	movs	r4, r5
    22d8:	4301      	orrs	r1, r0
    22da:	1e78      	subs	r0, r7, #1
    22dc:	4187      	sbcs	r7, r0
    22de:	40dc      	lsrs	r4, r3
    22e0:	2600      	movs	r6, #0
    22e2:	430f      	orrs	r7, r1
    22e4:	077b      	lsls	r3, r7, #29
    22e6:	d009      	beq.n	22fc <__aeabi_dadd+0x120>
    22e8:	230f      	movs	r3, #15
    22ea:	403b      	ands	r3, r7
    22ec:	2b04      	cmp	r3, #4
    22ee:	d005      	beq.n	22fc <__aeabi_dadd+0x120>
    22f0:	1d3b      	adds	r3, r7, #4
    22f2:	42bb      	cmp	r3, r7
    22f4:	41bf      	sbcs	r7, r7
    22f6:	427f      	negs	r7, r7
    22f8:	19e4      	adds	r4, r4, r7
    22fa:	001f      	movs	r7, r3
    22fc:	0223      	lsls	r3, r4, #8
    22fe:	d52c      	bpl.n	235a <__aeabi_dadd+0x17e>
    2300:	4b96      	ldr	r3, [pc, #600]	; (255c <__aeabi_dadd+0x380>)
    2302:	3601      	adds	r6, #1
    2304:	429e      	cmp	r6, r3
    2306:	d100      	bne.n	230a <__aeabi_dadd+0x12e>
    2308:	e09a      	b.n	2440 <__aeabi_dadd+0x264>
    230a:	4645      	mov	r5, r8
    230c:	4b94      	ldr	r3, [pc, #592]	; (2560 <__aeabi_dadd+0x384>)
    230e:	08ff      	lsrs	r7, r7, #3
    2310:	401c      	ands	r4, r3
    2312:	0760      	lsls	r0, r4, #29
    2314:	0576      	lsls	r6, r6, #21
    2316:	0264      	lsls	r4, r4, #9
    2318:	4307      	orrs	r7, r0
    231a:	0b24      	lsrs	r4, r4, #12
    231c:	0d76      	lsrs	r6, r6, #21
    231e:	2100      	movs	r1, #0
    2320:	0324      	lsls	r4, r4, #12
    2322:	0b23      	lsrs	r3, r4, #12
    2324:	0d0c      	lsrs	r4, r1, #20
    2326:	4a8f      	ldr	r2, [pc, #572]	; (2564 <__aeabi_dadd+0x388>)
    2328:	0524      	lsls	r4, r4, #20
    232a:	431c      	orrs	r4, r3
    232c:	4014      	ands	r4, r2
    232e:	0533      	lsls	r3, r6, #20
    2330:	4323      	orrs	r3, r4
    2332:	005b      	lsls	r3, r3, #1
    2334:	07ed      	lsls	r5, r5, #31
    2336:	085b      	lsrs	r3, r3, #1
    2338:	432b      	orrs	r3, r5
    233a:	0038      	movs	r0, r7
    233c:	0019      	movs	r1, r3
    233e:	bc3c      	pop	{r2, r3, r4, r5}
    2340:	4690      	mov	r8, r2
    2342:	4699      	mov	r9, r3
    2344:	46a2      	mov	sl, r4
    2346:	46ab      	mov	fp, r5
    2348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    234a:	4664      	mov	r4, ip
    234c:	4304      	orrs	r4, r0
    234e:	d100      	bne.n	2352 <__aeabi_dadd+0x176>
    2350:	e211      	b.n	2776 <__aeabi_dadd+0x59a>
    2352:	0004      	movs	r4, r0
    2354:	4667      	mov	r7, ip
    2356:	077b      	lsls	r3, r7, #29
    2358:	d1c6      	bne.n	22e8 <__aeabi_dadd+0x10c>
    235a:	4645      	mov	r5, r8
    235c:	0760      	lsls	r0, r4, #29
    235e:	08ff      	lsrs	r7, r7, #3
    2360:	4307      	orrs	r7, r0
    2362:	08e4      	lsrs	r4, r4, #3
    2364:	4b7d      	ldr	r3, [pc, #500]	; (255c <__aeabi_dadd+0x380>)
    2366:	429e      	cmp	r6, r3
    2368:	d030      	beq.n	23cc <__aeabi_dadd+0x1f0>
    236a:	0324      	lsls	r4, r4, #12
    236c:	0576      	lsls	r6, r6, #21
    236e:	0b24      	lsrs	r4, r4, #12
    2370:	0d76      	lsrs	r6, r6, #21
    2372:	e7d4      	b.n	231e <__aeabi_dadd+0x142>
    2374:	1a33      	subs	r3, r6, r0
    2376:	469a      	mov	sl, r3
    2378:	2b00      	cmp	r3, #0
    237a:	dd78      	ble.n	246e <__aeabi_dadd+0x292>
    237c:	2800      	cmp	r0, #0
    237e:	d031      	beq.n	23e4 <__aeabi_dadd+0x208>
    2380:	4876      	ldr	r0, [pc, #472]	; (255c <__aeabi_dadd+0x380>)
    2382:	4286      	cmp	r6, r0
    2384:	d0ae      	beq.n	22e4 <__aeabi_dadd+0x108>
    2386:	2080      	movs	r0, #128	; 0x80
    2388:	0400      	lsls	r0, r0, #16
    238a:	4301      	orrs	r1, r0
    238c:	4653      	mov	r3, sl
    238e:	2b38      	cmp	r3, #56	; 0x38
    2390:	dc00      	bgt.n	2394 <__aeabi_dadd+0x1b8>
    2392:	e0e9      	b.n	2568 <__aeabi_dadd+0x38c>
    2394:	430a      	orrs	r2, r1
    2396:	1e51      	subs	r1, r2, #1
    2398:	418a      	sbcs	r2, r1
    239a:	2100      	movs	r1, #0
    239c:	19d2      	adds	r2, r2, r7
    239e:	42ba      	cmp	r2, r7
    23a0:	41bf      	sbcs	r7, r7
    23a2:	1909      	adds	r1, r1, r4
    23a4:	427c      	negs	r4, r7
    23a6:	0017      	movs	r7, r2
    23a8:	190c      	adds	r4, r1, r4
    23aa:	0223      	lsls	r3, r4, #8
    23ac:	d5d3      	bpl.n	2356 <__aeabi_dadd+0x17a>
    23ae:	4b6b      	ldr	r3, [pc, #428]	; (255c <__aeabi_dadd+0x380>)
    23b0:	3601      	adds	r6, #1
    23b2:	429e      	cmp	r6, r3
    23b4:	d100      	bne.n	23b8 <__aeabi_dadd+0x1dc>
    23b6:	e13a      	b.n	262e <__aeabi_dadd+0x452>
    23b8:	2001      	movs	r0, #1
    23ba:	4b69      	ldr	r3, [pc, #420]	; (2560 <__aeabi_dadd+0x384>)
    23bc:	401c      	ands	r4, r3
    23be:	087b      	lsrs	r3, r7, #1
    23c0:	4007      	ands	r7, r0
    23c2:	431f      	orrs	r7, r3
    23c4:	07e0      	lsls	r0, r4, #31
    23c6:	4307      	orrs	r7, r0
    23c8:	0864      	lsrs	r4, r4, #1
    23ca:	e78b      	b.n	22e4 <__aeabi_dadd+0x108>
    23cc:	0023      	movs	r3, r4
    23ce:	433b      	orrs	r3, r7
    23d0:	d100      	bne.n	23d4 <__aeabi_dadd+0x1f8>
    23d2:	e1cb      	b.n	276c <__aeabi_dadd+0x590>
    23d4:	2280      	movs	r2, #128	; 0x80
    23d6:	0312      	lsls	r2, r2, #12
    23d8:	4314      	orrs	r4, r2
    23da:	0324      	lsls	r4, r4, #12
    23dc:	0b24      	lsrs	r4, r4, #12
    23de:	e79e      	b.n	231e <__aeabi_dadd+0x142>
    23e0:	002e      	movs	r6, r5
    23e2:	e77f      	b.n	22e4 <__aeabi_dadd+0x108>
    23e4:	0008      	movs	r0, r1
    23e6:	4310      	orrs	r0, r2
    23e8:	d100      	bne.n	23ec <__aeabi_dadd+0x210>
    23ea:	e0b4      	b.n	2556 <__aeabi_dadd+0x37a>
    23ec:	1e58      	subs	r0, r3, #1
    23ee:	2800      	cmp	r0, #0
    23f0:	d000      	beq.n	23f4 <__aeabi_dadd+0x218>
    23f2:	e0de      	b.n	25b2 <__aeabi_dadd+0x3d6>
    23f4:	18ba      	adds	r2, r7, r2
    23f6:	42ba      	cmp	r2, r7
    23f8:	419b      	sbcs	r3, r3
    23fa:	1864      	adds	r4, r4, r1
    23fc:	425b      	negs	r3, r3
    23fe:	18e4      	adds	r4, r4, r3
    2400:	0017      	movs	r7, r2
    2402:	2601      	movs	r6, #1
    2404:	0223      	lsls	r3, r4, #8
    2406:	d5a6      	bpl.n	2356 <__aeabi_dadd+0x17a>
    2408:	2602      	movs	r6, #2
    240a:	e7d5      	b.n	23b8 <__aeabi_dadd+0x1dc>
    240c:	2d00      	cmp	r5, #0
    240e:	d16e      	bne.n	24ee <__aeabi_dadd+0x312>
    2410:	1c70      	adds	r0, r6, #1
    2412:	0540      	lsls	r0, r0, #21
    2414:	0d40      	lsrs	r0, r0, #21
    2416:	2801      	cmp	r0, #1
    2418:	dc00      	bgt.n	241c <__aeabi_dadd+0x240>
    241a:	e0f9      	b.n	2610 <__aeabi_dadd+0x434>
    241c:	1ab8      	subs	r0, r7, r2
    241e:	4684      	mov	ip, r0
    2420:	4287      	cmp	r7, r0
    2422:	4180      	sbcs	r0, r0
    2424:	1ae5      	subs	r5, r4, r3
    2426:	4240      	negs	r0, r0
    2428:	1a2d      	subs	r5, r5, r0
    242a:	0228      	lsls	r0, r5, #8
    242c:	d400      	bmi.n	2430 <__aeabi_dadd+0x254>
    242e:	e089      	b.n	2544 <__aeabi_dadd+0x368>
    2430:	1bd7      	subs	r7, r2, r7
    2432:	42ba      	cmp	r2, r7
    2434:	4192      	sbcs	r2, r2
    2436:	1b1c      	subs	r4, r3, r4
    2438:	4252      	negs	r2, r2
    243a:	1aa5      	subs	r5, r4, r2
    243c:	46d8      	mov	r8, fp
    243e:	e729      	b.n	2294 <__aeabi_dadd+0xb8>
    2440:	4645      	mov	r5, r8
    2442:	2400      	movs	r4, #0
    2444:	2700      	movs	r7, #0
    2446:	e76a      	b.n	231e <__aeabi_dadd+0x142>
    2448:	4c45      	ldr	r4, [pc, #276]	; (2560 <__aeabi_dadd+0x384>)
    244a:	1af6      	subs	r6, r6, r3
    244c:	402c      	ands	r4, r5
    244e:	e749      	b.n	22e4 <__aeabi_dadd+0x108>
    2450:	003d      	movs	r5, r7
    2452:	3828      	subs	r0, #40	; 0x28
    2454:	4085      	lsls	r5, r0
    2456:	2700      	movs	r7, #0
    2458:	e72e      	b.n	22b8 <__aeabi_dadd+0xdc>
    245a:	0038      	movs	r0, r7
    245c:	f000 fe6c 	bl	3138 <__clzsi2>
    2460:	3020      	adds	r0, #32
    2462:	e71d      	b.n	22a0 <__aeabi_dadd+0xc4>
    2464:	430a      	orrs	r2, r1
    2466:	1e51      	subs	r1, r2, #1
    2468:	418a      	sbcs	r2, r1
    246a:	2100      	movs	r1, #0
    246c:	e707      	b.n	227e <__aeabi_dadd+0xa2>
    246e:	2b00      	cmp	r3, #0
    2470:	d000      	beq.n	2474 <__aeabi_dadd+0x298>
    2472:	e0f3      	b.n	265c <__aeabi_dadd+0x480>
    2474:	1c70      	adds	r0, r6, #1
    2476:	0543      	lsls	r3, r0, #21
    2478:	0d5b      	lsrs	r3, r3, #21
    247a:	2b01      	cmp	r3, #1
    247c:	dc00      	bgt.n	2480 <__aeabi_dadd+0x2a4>
    247e:	e0ad      	b.n	25dc <__aeabi_dadd+0x400>
    2480:	4b36      	ldr	r3, [pc, #216]	; (255c <__aeabi_dadd+0x380>)
    2482:	4298      	cmp	r0, r3
    2484:	d100      	bne.n	2488 <__aeabi_dadd+0x2ac>
    2486:	e0d1      	b.n	262c <__aeabi_dadd+0x450>
    2488:	18ba      	adds	r2, r7, r2
    248a:	42ba      	cmp	r2, r7
    248c:	41bf      	sbcs	r7, r7
    248e:	1864      	adds	r4, r4, r1
    2490:	427f      	negs	r7, r7
    2492:	19e4      	adds	r4, r4, r7
    2494:	07e7      	lsls	r7, r4, #31
    2496:	0852      	lsrs	r2, r2, #1
    2498:	4317      	orrs	r7, r2
    249a:	0864      	lsrs	r4, r4, #1
    249c:	0006      	movs	r6, r0
    249e:	e721      	b.n	22e4 <__aeabi_dadd+0x108>
    24a0:	482e      	ldr	r0, [pc, #184]	; (255c <__aeabi_dadd+0x380>)
    24a2:	4285      	cmp	r5, r0
    24a4:	d100      	bne.n	24a8 <__aeabi_dadd+0x2cc>
    24a6:	e093      	b.n	25d0 <__aeabi_dadd+0x3f4>
    24a8:	001d      	movs	r5, r3
    24aa:	e6d0      	b.n	224e <__aeabi_dadd+0x72>
    24ac:	0029      	movs	r1, r5
    24ae:	3e1f      	subs	r6, #31
    24b0:	40f1      	lsrs	r1, r6
    24b2:	2b20      	cmp	r3, #32
    24b4:	d100      	bne.n	24b8 <__aeabi_dadd+0x2dc>
    24b6:	e08d      	b.n	25d4 <__aeabi_dadd+0x3f8>
    24b8:	2240      	movs	r2, #64	; 0x40
    24ba:	1ad3      	subs	r3, r2, r3
    24bc:	409d      	lsls	r5, r3
    24be:	432f      	orrs	r7, r5
    24c0:	1e7d      	subs	r5, r7, #1
    24c2:	41af      	sbcs	r7, r5
    24c4:	2400      	movs	r4, #0
    24c6:	430f      	orrs	r7, r1
    24c8:	2600      	movs	r6, #0
    24ca:	e744      	b.n	2356 <__aeabi_dadd+0x17a>
    24cc:	002b      	movs	r3, r5
    24ce:	0008      	movs	r0, r1
    24d0:	3b20      	subs	r3, #32
    24d2:	40d8      	lsrs	r0, r3
    24d4:	0003      	movs	r3, r0
    24d6:	2d20      	cmp	r5, #32
    24d8:	d100      	bne.n	24dc <__aeabi_dadd+0x300>
    24da:	e07d      	b.n	25d8 <__aeabi_dadd+0x3fc>
    24dc:	2040      	movs	r0, #64	; 0x40
    24de:	1b45      	subs	r5, r0, r5
    24e0:	40a9      	lsls	r1, r5
    24e2:	430a      	orrs	r2, r1
    24e4:	1e51      	subs	r1, r2, #1
    24e6:	418a      	sbcs	r2, r1
    24e8:	2100      	movs	r1, #0
    24ea:	431a      	orrs	r2, r3
    24ec:	e6c7      	b.n	227e <__aeabi_dadd+0xa2>
    24ee:	2e00      	cmp	r6, #0
    24f0:	d050      	beq.n	2594 <__aeabi_dadd+0x3b8>
    24f2:	4e1a      	ldr	r6, [pc, #104]	; (255c <__aeabi_dadd+0x380>)
    24f4:	42b0      	cmp	r0, r6
    24f6:	d057      	beq.n	25a8 <__aeabi_dadd+0x3cc>
    24f8:	2680      	movs	r6, #128	; 0x80
    24fa:	426b      	negs	r3, r5
    24fc:	4699      	mov	r9, r3
    24fe:	0436      	lsls	r6, r6, #16
    2500:	4334      	orrs	r4, r6
    2502:	464b      	mov	r3, r9
    2504:	2b38      	cmp	r3, #56	; 0x38
    2506:	dd00      	ble.n	250a <__aeabi_dadd+0x32e>
    2508:	e0d6      	b.n	26b8 <__aeabi_dadd+0x4dc>
    250a:	2b1f      	cmp	r3, #31
    250c:	dd00      	ble.n	2510 <__aeabi_dadd+0x334>
    250e:	e135      	b.n	277c <__aeabi_dadd+0x5a0>
    2510:	2620      	movs	r6, #32
    2512:	1af5      	subs	r5, r6, r3
    2514:	0026      	movs	r6, r4
    2516:	40ae      	lsls	r6, r5
    2518:	46b2      	mov	sl, r6
    251a:	003e      	movs	r6, r7
    251c:	40de      	lsrs	r6, r3
    251e:	46ac      	mov	ip, r5
    2520:	0035      	movs	r5, r6
    2522:	4656      	mov	r6, sl
    2524:	432e      	orrs	r6, r5
    2526:	4665      	mov	r5, ip
    2528:	40af      	lsls	r7, r5
    252a:	1e7d      	subs	r5, r7, #1
    252c:	41af      	sbcs	r7, r5
    252e:	40dc      	lsrs	r4, r3
    2530:	4337      	orrs	r7, r6
    2532:	1bd7      	subs	r7, r2, r7
    2534:	42ba      	cmp	r2, r7
    2536:	4192      	sbcs	r2, r2
    2538:	1b0c      	subs	r4, r1, r4
    253a:	4252      	negs	r2, r2
    253c:	1aa4      	subs	r4, r4, r2
    253e:	0006      	movs	r6, r0
    2540:	46d8      	mov	r8, fp
    2542:	e6a3      	b.n	228c <__aeabi_dadd+0xb0>
    2544:	4664      	mov	r4, ip
    2546:	4667      	mov	r7, ip
    2548:	432c      	orrs	r4, r5
    254a:	d000      	beq.n	254e <__aeabi_dadd+0x372>
    254c:	e6a2      	b.n	2294 <__aeabi_dadd+0xb8>
    254e:	2500      	movs	r5, #0
    2550:	2600      	movs	r6, #0
    2552:	2700      	movs	r7, #0
    2554:	e706      	b.n	2364 <__aeabi_dadd+0x188>
    2556:	001e      	movs	r6, r3
    2558:	e6c4      	b.n	22e4 <__aeabi_dadd+0x108>
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	000007ff 	.word	0x000007ff
    2560:	ff7fffff 	.word	0xff7fffff
    2564:	800fffff 	.word	0x800fffff
    2568:	2b1f      	cmp	r3, #31
    256a:	dc63      	bgt.n	2634 <__aeabi_dadd+0x458>
    256c:	2020      	movs	r0, #32
    256e:	1ac3      	subs	r3, r0, r3
    2570:	0008      	movs	r0, r1
    2572:	4098      	lsls	r0, r3
    2574:	469c      	mov	ip, r3
    2576:	4683      	mov	fp, r0
    2578:	4653      	mov	r3, sl
    257a:	0010      	movs	r0, r2
    257c:	40d8      	lsrs	r0, r3
    257e:	0003      	movs	r3, r0
    2580:	4658      	mov	r0, fp
    2582:	4318      	orrs	r0, r3
    2584:	4663      	mov	r3, ip
    2586:	409a      	lsls	r2, r3
    2588:	1e53      	subs	r3, r2, #1
    258a:	419a      	sbcs	r2, r3
    258c:	4653      	mov	r3, sl
    258e:	4302      	orrs	r2, r0
    2590:	40d9      	lsrs	r1, r3
    2592:	e703      	b.n	239c <__aeabi_dadd+0x1c0>
    2594:	0026      	movs	r6, r4
    2596:	433e      	orrs	r6, r7
    2598:	d006      	beq.n	25a8 <__aeabi_dadd+0x3cc>
    259a:	43eb      	mvns	r3, r5
    259c:	4699      	mov	r9, r3
    259e:	2b00      	cmp	r3, #0
    25a0:	d0c7      	beq.n	2532 <__aeabi_dadd+0x356>
    25a2:	4e94      	ldr	r6, [pc, #592]	; (27f4 <__aeabi_dadd+0x618>)
    25a4:	42b0      	cmp	r0, r6
    25a6:	d1ac      	bne.n	2502 <__aeabi_dadd+0x326>
    25a8:	000c      	movs	r4, r1
    25aa:	0017      	movs	r7, r2
    25ac:	0006      	movs	r6, r0
    25ae:	46d8      	mov	r8, fp
    25b0:	e698      	b.n	22e4 <__aeabi_dadd+0x108>
    25b2:	4b90      	ldr	r3, [pc, #576]	; (27f4 <__aeabi_dadd+0x618>)
    25b4:	459a      	cmp	sl, r3
    25b6:	d00b      	beq.n	25d0 <__aeabi_dadd+0x3f4>
    25b8:	4682      	mov	sl, r0
    25ba:	e6e7      	b.n	238c <__aeabi_dadd+0x1b0>
    25bc:	2800      	cmp	r0, #0
    25be:	d000      	beq.n	25c2 <__aeabi_dadd+0x3e6>
    25c0:	e09e      	b.n	2700 <__aeabi_dadd+0x524>
    25c2:	0018      	movs	r0, r3
    25c4:	4310      	orrs	r0, r2
    25c6:	d100      	bne.n	25ca <__aeabi_dadd+0x3ee>
    25c8:	e0e9      	b.n	279e <__aeabi_dadd+0x5c2>
    25ca:	001c      	movs	r4, r3
    25cc:	0017      	movs	r7, r2
    25ce:	46d8      	mov	r8, fp
    25d0:	4e88      	ldr	r6, [pc, #544]	; (27f4 <__aeabi_dadd+0x618>)
    25d2:	e687      	b.n	22e4 <__aeabi_dadd+0x108>
    25d4:	2500      	movs	r5, #0
    25d6:	e772      	b.n	24be <__aeabi_dadd+0x2e2>
    25d8:	2100      	movs	r1, #0
    25da:	e782      	b.n	24e2 <__aeabi_dadd+0x306>
    25dc:	0023      	movs	r3, r4
    25de:	433b      	orrs	r3, r7
    25e0:	2e00      	cmp	r6, #0
    25e2:	d000      	beq.n	25e6 <__aeabi_dadd+0x40a>
    25e4:	e0ab      	b.n	273e <__aeabi_dadd+0x562>
    25e6:	2b00      	cmp	r3, #0
    25e8:	d100      	bne.n	25ec <__aeabi_dadd+0x410>
    25ea:	e0e7      	b.n	27bc <__aeabi_dadd+0x5e0>
    25ec:	000b      	movs	r3, r1
    25ee:	4313      	orrs	r3, r2
    25f0:	d100      	bne.n	25f4 <__aeabi_dadd+0x418>
    25f2:	e677      	b.n	22e4 <__aeabi_dadd+0x108>
    25f4:	18ba      	adds	r2, r7, r2
    25f6:	42ba      	cmp	r2, r7
    25f8:	41bf      	sbcs	r7, r7
    25fa:	1864      	adds	r4, r4, r1
    25fc:	427f      	negs	r7, r7
    25fe:	19e4      	adds	r4, r4, r7
    2600:	0223      	lsls	r3, r4, #8
    2602:	d400      	bmi.n	2606 <__aeabi_dadd+0x42a>
    2604:	e0f2      	b.n	27ec <__aeabi_dadd+0x610>
    2606:	4b7c      	ldr	r3, [pc, #496]	; (27f8 <__aeabi_dadd+0x61c>)
    2608:	0017      	movs	r7, r2
    260a:	401c      	ands	r4, r3
    260c:	0006      	movs	r6, r0
    260e:	e669      	b.n	22e4 <__aeabi_dadd+0x108>
    2610:	0020      	movs	r0, r4
    2612:	4338      	orrs	r0, r7
    2614:	2e00      	cmp	r6, #0
    2616:	d1d1      	bne.n	25bc <__aeabi_dadd+0x3e0>
    2618:	2800      	cmp	r0, #0
    261a:	d15b      	bne.n	26d4 <__aeabi_dadd+0x4f8>
    261c:	001c      	movs	r4, r3
    261e:	4314      	orrs	r4, r2
    2620:	d100      	bne.n	2624 <__aeabi_dadd+0x448>
    2622:	e0a8      	b.n	2776 <__aeabi_dadd+0x59a>
    2624:	001c      	movs	r4, r3
    2626:	0017      	movs	r7, r2
    2628:	46d8      	mov	r8, fp
    262a:	e65b      	b.n	22e4 <__aeabi_dadd+0x108>
    262c:	0006      	movs	r6, r0
    262e:	2400      	movs	r4, #0
    2630:	2700      	movs	r7, #0
    2632:	e697      	b.n	2364 <__aeabi_dadd+0x188>
    2634:	4650      	mov	r0, sl
    2636:	000b      	movs	r3, r1
    2638:	3820      	subs	r0, #32
    263a:	40c3      	lsrs	r3, r0
    263c:	4699      	mov	r9, r3
    263e:	4653      	mov	r3, sl
    2640:	2b20      	cmp	r3, #32
    2642:	d100      	bne.n	2646 <__aeabi_dadd+0x46a>
    2644:	e095      	b.n	2772 <__aeabi_dadd+0x596>
    2646:	2340      	movs	r3, #64	; 0x40
    2648:	4650      	mov	r0, sl
    264a:	1a1b      	subs	r3, r3, r0
    264c:	4099      	lsls	r1, r3
    264e:	430a      	orrs	r2, r1
    2650:	1e51      	subs	r1, r2, #1
    2652:	418a      	sbcs	r2, r1
    2654:	464b      	mov	r3, r9
    2656:	2100      	movs	r1, #0
    2658:	431a      	orrs	r2, r3
    265a:	e69f      	b.n	239c <__aeabi_dadd+0x1c0>
    265c:	2e00      	cmp	r6, #0
    265e:	d130      	bne.n	26c2 <__aeabi_dadd+0x4e6>
    2660:	0026      	movs	r6, r4
    2662:	433e      	orrs	r6, r7
    2664:	d067      	beq.n	2736 <__aeabi_dadd+0x55a>
    2666:	43db      	mvns	r3, r3
    2668:	469a      	mov	sl, r3
    266a:	2b00      	cmp	r3, #0
    266c:	d01c      	beq.n	26a8 <__aeabi_dadd+0x4cc>
    266e:	4e61      	ldr	r6, [pc, #388]	; (27f4 <__aeabi_dadd+0x618>)
    2670:	42b0      	cmp	r0, r6
    2672:	d060      	beq.n	2736 <__aeabi_dadd+0x55a>
    2674:	4653      	mov	r3, sl
    2676:	2b38      	cmp	r3, #56	; 0x38
    2678:	dd00      	ble.n	267c <__aeabi_dadd+0x4a0>
    267a:	e096      	b.n	27aa <__aeabi_dadd+0x5ce>
    267c:	2b1f      	cmp	r3, #31
    267e:	dd00      	ble.n	2682 <__aeabi_dadd+0x4a6>
    2680:	e09f      	b.n	27c2 <__aeabi_dadd+0x5e6>
    2682:	2620      	movs	r6, #32
    2684:	1af3      	subs	r3, r6, r3
    2686:	0026      	movs	r6, r4
    2688:	409e      	lsls	r6, r3
    268a:	469c      	mov	ip, r3
    268c:	46b3      	mov	fp, r6
    268e:	4653      	mov	r3, sl
    2690:	003e      	movs	r6, r7
    2692:	40de      	lsrs	r6, r3
    2694:	0033      	movs	r3, r6
    2696:	465e      	mov	r6, fp
    2698:	431e      	orrs	r6, r3
    269a:	4663      	mov	r3, ip
    269c:	409f      	lsls	r7, r3
    269e:	1e7b      	subs	r3, r7, #1
    26a0:	419f      	sbcs	r7, r3
    26a2:	4653      	mov	r3, sl
    26a4:	40dc      	lsrs	r4, r3
    26a6:	4337      	orrs	r7, r6
    26a8:	18bf      	adds	r7, r7, r2
    26aa:	4297      	cmp	r7, r2
    26ac:	4192      	sbcs	r2, r2
    26ae:	1864      	adds	r4, r4, r1
    26b0:	4252      	negs	r2, r2
    26b2:	18a4      	adds	r4, r4, r2
    26b4:	0006      	movs	r6, r0
    26b6:	e678      	b.n	23aa <__aeabi_dadd+0x1ce>
    26b8:	4327      	orrs	r7, r4
    26ba:	1e7c      	subs	r4, r7, #1
    26bc:	41a7      	sbcs	r7, r4
    26be:	2400      	movs	r4, #0
    26c0:	e737      	b.n	2532 <__aeabi_dadd+0x356>
    26c2:	4e4c      	ldr	r6, [pc, #304]	; (27f4 <__aeabi_dadd+0x618>)
    26c4:	42b0      	cmp	r0, r6
    26c6:	d036      	beq.n	2736 <__aeabi_dadd+0x55a>
    26c8:	2680      	movs	r6, #128	; 0x80
    26ca:	425b      	negs	r3, r3
    26cc:	0436      	lsls	r6, r6, #16
    26ce:	469a      	mov	sl, r3
    26d0:	4334      	orrs	r4, r6
    26d2:	e7cf      	b.n	2674 <__aeabi_dadd+0x498>
    26d4:	0018      	movs	r0, r3
    26d6:	4310      	orrs	r0, r2
    26d8:	d100      	bne.n	26dc <__aeabi_dadd+0x500>
    26da:	e603      	b.n	22e4 <__aeabi_dadd+0x108>
    26dc:	1ab8      	subs	r0, r7, r2
    26de:	4684      	mov	ip, r0
    26e0:	4567      	cmp	r7, ip
    26e2:	41ad      	sbcs	r5, r5
    26e4:	1ae0      	subs	r0, r4, r3
    26e6:	426d      	negs	r5, r5
    26e8:	1b40      	subs	r0, r0, r5
    26ea:	0205      	lsls	r5, r0, #8
    26ec:	d400      	bmi.n	26f0 <__aeabi_dadd+0x514>
    26ee:	e62c      	b.n	234a <__aeabi_dadd+0x16e>
    26f0:	1bd7      	subs	r7, r2, r7
    26f2:	42ba      	cmp	r2, r7
    26f4:	4192      	sbcs	r2, r2
    26f6:	1b1c      	subs	r4, r3, r4
    26f8:	4252      	negs	r2, r2
    26fa:	1aa4      	subs	r4, r4, r2
    26fc:	46d8      	mov	r8, fp
    26fe:	e5f1      	b.n	22e4 <__aeabi_dadd+0x108>
    2700:	0018      	movs	r0, r3
    2702:	4310      	orrs	r0, r2
    2704:	d100      	bne.n	2708 <__aeabi_dadd+0x52c>
    2706:	e763      	b.n	25d0 <__aeabi_dadd+0x3f4>
    2708:	08f8      	lsrs	r0, r7, #3
    270a:	0767      	lsls	r7, r4, #29
    270c:	4307      	orrs	r7, r0
    270e:	2080      	movs	r0, #128	; 0x80
    2710:	08e4      	lsrs	r4, r4, #3
    2712:	0300      	lsls	r0, r0, #12
    2714:	4204      	tst	r4, r0
    2716:	d008      	beq.n	272a <__aeabi_dadd+0x54e>
    2718:	08dd      	lsrs	r5, r3, #3
    271a:	4205      	tst	r5, r0
    271c:	d105      	bne.n	272a <__aeabi_dadd+0x54e>
    271e:	08d2      	lsrs	r2, r2, #3
    2720:	0759      	lsls	r1, r3, #29
    2722:	4311      	orrs	r1, r2
    2724:	000f      	movs	r7, r1
    2726:	002c      	movs	r4, r5
    2728:	46d8      	mov	r8, fp
    272a:	0f7b      	lsrs	r3, r7, #29
    272c:	00e4      	lsls	r4, r4, #3
    272e:	431c      	orrs	r4, r3
    2730:	00ff      	lsls	r7, r7, #3
    2732:	4e30      	ldr	r6, [pc, #192]	; (27f4 <__aeabi_dadd+0x618>)
    2734:	e5d6      	b.n	22e4 <__aeabi_dadd+0x108>
    2736:	000c      	movs	r4, r1
    2738:	0017      	movs	r7, r2
    273a:	0006      	movs	r6, r0
    273c:	e5d2      	b.n	22e4 <__aeabi_dadd+0x108>
    273e:	2b00      	cmp	r3, #0
    2740:	d038      	beq.n	27b4 <__aeabi_dadd+0x5d8>
    2742:	000b      	movs	r3, r1
    2744:	4313      	orrs	r3, r2
    2746:	d100      	bne.n	274a <__aeabi_dadd+0x56e>
    2748:	e742      	b.n	25d0 <__aeabi_dadd+0x3f4>
    274a:	08f8      	lsrs	r0, r7, #3
    274c:	0767      	lsls	r7, r4, #29
    274e:	4307      	orrs	r7, r0
    2750:	2080      	movs	r0, #128	; 0x80
    2752:	08e4      	lsrs	r4, r4, #3
    2754:	0300      	lsls	r0, r0, #12
    2756:	4204      	tst	r4, r0
    2758:	d0e7      	beq.n	272a <__aeabi_dadd+0x54e>
    275a:	08cb      	lsrs	r3, r1, #3
    275c:	4203      	tst	r3, r0
    275e:	d1e4      	bne.n	272a <__aeabi_dadd+0x54e>
    2760:	08d2      	lsrs	r2, r2, #3
    2762:	0749      	lsls	r1, r1, #29
    2764:	4311      	orrs	r1, r2
    2766:	000f      	movs	r7, r1
    2768:	001c      	movs	r4, r3
    276a:	e7de      	b.n	272a <__aeabi_dadd+0x54e>
    276c:	2700      	movs	r7, #0
    276e:	2400      	movs	r4, #0
    2770:	e5d5      	b.n	231e <__aeabi_dadd+0x142>
    2772:	2100      	movs	r1, #0
    2774:	e76b      	b.n	264e <__aeabi_dadd+0x472>
    2776:	2500      	movs	r5, #0
    2778:	2700      	movs	r7, #0
    277a:	e5f3      	b.n	2364 <__aeabi_dadd+0x188>
    277c:	464e      	mov	r6, r9
    277e:	0025      	movs	r5, r4
    2780:	3e20      	subs	r6, #32
    2782:	40f5      	lsrs	r5, r6
    2784:	464b      	mov	r3, r9
    2786:	002e      	movs	r6, r5
    2788:	2b20      	cmp	r3, #32
    278a:	d02d      	beq.n	27e8 <__aeabi_dadd+0x60c>
    278c:	2540      	movs	r5, #64	; 0x40
    278e:	1aed      	subs	r5, r5, r3
    2790:	40ac      	lsls	r4, r5
    2792:	4327      	orrs	r7, r4
    2794:	1e7c      	subs	r4, r7, #1
    2796:	41a7      	sbcs	r7, r4
    2798:	2400      	movs	r4, #0
    279a:	4337      	orrs	r7, r6
    279c:	e6c9      	b.n	2532 <__aeabi_dadd+0x356>
    279e:	2480      	movs	r4, #128	; 0x80
    27a0:	2500      	movs	r5, #0
    27a2:	0324      	lsls	r4, r4, #12
    27a4:	4e13      	ldr	r6, [pc, #76]	; (27f4 <__aeabi_dadd+0x618>)
    27a6:	2700      	movs	r7, #0
    27a8:	e5dc      	b.n	2364 <__aeabi_dadd+0x188>
    27aa:	4327      	orrs	r7, r4
    27ac:	1e7c      	subs	r4, r7, #1
    27ae:	41a7      	sbcs	r7, r4
    27b0:	2400      	movs	r4, #0
    27b2:	e779      	b.n	26a8 <__aeabi_dadd+0x4cc>
    27b4:	000c      	movs	r4, r1
    27b6:	0017      	movs	r7, r2
    27b8:	4e0e      	ldr	r6, [pc, #56]	; (27f4 <__aeabi_dadd+0x618>)
    27ba:	e593      	b.n	22e4 <__aeabi_dadd+0x108>
    27bc:	000c      	movs	r4, r1
    27be:	0017      	movs	r7, r2
    27c0:	e590      	b.n	22e4 <__aeabi_dadd+0x108>
    27c2:	4656      	mov	r6, sl
    27c4:	0023      	movs	r3, r4
    27c6:	3e20      	subs	r6, #32
    27c8:	40f3      	lsrs	r3, r6
    27ca:	4699      	mov	r9, r3
    27cc:	4653      	mov	r3, sl
    27ce:	2b20      	cmp	r3, #32
    27d0:	d00e      	beq.n	27f0 <__aeabi_dadd+0x614>
    27d2:	2340      	movs	r3, #64	; 0x40
    27d4:	4656      	mov	r6, sl
    27d6:	1b9b      	subs	r3, r3, r6
    27d8:	409c      	lsls	r4, r3
    27da:	4327      	orrs	r7, r4
    27dc:	1e7c      	subs	r4, r7, #1
    27de:	41a7      	sbcs	r7, r4
    27e0:	464b      	mov	r3, r9
    27e2:	2400      	movs	r4, #0
    27e4:	431f      	orrs	r7, r3
    27e6:	e75f      	b.n	26a8 <__aeabi_dadd+0x4cc>
    27e8:	2400      	movs	r4, #0
    27ea:	e7d2      	b.n	2792 <__aeabi_dadd+0x5b6>
    27ec:	0017      	movs	r7, r2
    27ee:	e5b2      	b.n	2356 <__aeabi_dadd+0x17a>
    27f0:	2400      	movs	r4, #0
    27f2:	e7f2      	b.n	27da <__aeabi_dadd+0x5fe>
    27f4:	000007ff 	.word	0x000007ff
    27f8:	ff7fffff 	.word	0xff7fffff

000027fc <__eqdf2>:
    27fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27fe:	464f      	mov	r7, r9
    2800:	4646      	mov	r6, r8
    2802:	46d6      	mov	lr, sl
    2804:	005c      	lsls	r4, r3, #1
    2806:	b5c0      	push	{r6, r7, lr}
    2808:	031f      	lsls	r7, r3, #12
    280a:	0fdb      	lsrs	r3, r3, #31
    280c:	469a      	mov	sl, r3
    280e:	4b17      	ldr	r3, [pc, #92]	; (286c <__eqdf2+0x70>)
    2810:	030e      	lsls	r6, r1, #12
    2812:	004d      	lsls	r5, r1, #1
    2814:	4684      	mov	ip, r0
    2816:	4680      	mov	r8, r0
    2818:	0b36      	lsrs	r6, r6, #12
    281a:	0d6d      	lsrs	r5, r5, #21
    281c:	0fc9      	lsrs	r1, r1, #31
    281e:	4691      	mov	r9, r2
    2820:	0b3f      	lsrs	r7, r7, #12
    2822:	0d64      	lsrs	r4, r4, #21
    2824:	2001      	movs	r0, #1
    2826:	429d      	cmp	r5, r3
    2828:	d008      	beq.n	283c <__eqdf2+0x40>
    282a:	429c      	cmp	r4, r3
    282c:	d001      	beq.n	2832 <__eqdf2+0x36>
    282e:	42a5      	cmp	r5, r4
    2830:	d00b      	beq.n	284a <__eqdf2+0x4e>
    2832:	bc1c      	pop	{r2, r3, r4}
    2834:	4690      	mov	r8, r2
    2836:	4699      	mov	r9, r3
    2838:	46a2      	mov	sl, r4
    283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283c:	4663      	mov	r3, ip
    283e:	4333      	orrs	r3, r6
    2840:	d1f7      	bne.n	2832 <__eqdf2+0x36>
    2842:	42ac      	cmp	r4, r5
    2844:	d1f5      	bne.n	2832 <__eqdf2+0x36>
    2846:	433a      	orrs	r2, r7
    2848:	d1f3      	bne.n	2832 <__eqdf2+0x36>
    284a:	2001      	movs	r0, #1
    284c:	42be      	cmp	r6, r7
    284e:	d1f0      	bne.n	2832 <__eqdf2+0x36>
    2850:	45c8      	cmp	r8, r9
    2852:	d1ee      	bne.n	2832 <__eqdf2+0x36>
    2854:	4551      	cmp	r1, sl
    2856:	d007      	beq.n	2868 <__eqdf2+0x6c>
    2858:	2d00      	cmp	r5, #0
    285a:	d1ea      	bne.n	2832 <__eqdf2+0x36>
    285c:	4663      	mov	r3, ip
    285e:	431e      	orrs	r6, r3
    2860:	0030      	movs	r0, r6
    2862:	1e46      	subs	r6, r0, #1
    2864:	41b0      	sbcs	r0, r6
    2866:	e7e4      	b.n	2832 <__eqdf2+0x36>
    2868:	2000      	movs	r0, #0
    286a:	e7e2      	b.n	2832 <__eqdf2+0x36>
    286c:	000007ff 	.word	0x000007ff

00002870 <__gedf2>:
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	4645      	mov	r5, r8
    2874:	46de      	mov	lr, fp
    2876:	4657      	mov	r7, sl
    2878:	464e      	mov	r6, r9
    287a:	b5e0      	push	{r5, r6, r7, lr}
    287c:	031f      	lsls	r7, r3, #12
    287e:	0b3d      	lsrs	r5, r7, #12
    2880:	4f2c      	ldr	r7, [pc, #176]	; (2934 <__gedf2+0xc4>)
    2882:	030e      	lsls	r6, r1, #12
    2884:	004c      	lsls	r4, r1, #1
    2886:	46ab      	mov	fp, r5
    2888:	005d      	lsls	r5, r3, #1
    288a:	4684      	mov	ip, r0
    288c:	0b36      	lsrs	r6, r6, #12
    288e:	0d64      	lsrs	r4, r4, #21
    2890:	0fc9      	lsrs	r1, r1, #31
    2892:	4690      	mov	r8, r2
    2894:	0d6d      	lsrs	r5, r5, #21
    2896:	0fdb      	lsrs	r3, r3, #31
    2898:	42bc      	cmp	r4, r7
    289a:	d02a      	beq.n	28f2 <__gedf2+0x82>
    289c:	4f25      	ldr	r7, [pc, #148]	; (2934 <__gedf2+0xc4>)
    289e:	42bd      	cmp	r5, r7
    28a0:	d02d      	beq.n	28fe <__gedf2+0x8e>
    28a2:	2c00      	cmp	r4, #0
    28a4:	d10f      	bne.n	28c6 <__gedf2+0x56>
    28a6:	4330      	orrs	r0, r6
    28a8:	0007      	movs	r7, r0
    28aa:	4681      	mov	r9, r0
    28ac:	4278      	negs	r0, r7
    28ae:	4178      	adcs	r0, r7
    28b0:	b2c0      	uxtb	r0, r0
    28b2:	2d00      	cmp	r5, #0
    28b4:	d117      	bne.n	28e6 <__gedf2+0x76>
    28b6:	465f      	mov	r7, fp
    28b8:	433a      	orrs	r2, r7
    28ba:	d114      	bne.n	28e6 <__gedf2+0x76>
    28bc:	464b      	mov	r3, r9
    28be:	2000      	movs	r0, #0
    28c0:	2b00      	cmp	r3, #0
    28c2:	d00a      	beq.n	28da <__gedf2+0x6a>
    28c4:	e006      	b.n	28d4 <__gedf2+0x64>
    28c6:	2d00      	cmp	r5, #0
    28c8:	d102      	bne.n	28d0 <__gedf2+0x60>
    28ca:	4658      	mov	r0, fp
    28cc:	4302      	orrs	r2, r0
    28ce:	d001      	beq.n	28d4 <__gedf2+0x64>
    28d0:	4299      	cmp	r1, r3
    28d2:	d018      	beq.n	2906 <__gedf2+0x96>
    28d4:	4248      	negs	r0, r1
    28d6:	2101      	movs	r1, #1
    28d8:	4308      	orrs	r0, r1
    28da:	bc3c      	pop	{r2, r3, r4, r5}
    28dc:	4690      	mov	r8, r2
    28de:	4699      	mov	r9, r3
    28e0:	46a2      	mov	sl, r4
    28e2:	46ab      	mov	fp, r5
    28e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28e6:	2800      	cmp	r0, #0
    28e8:	d0f2      	beq.n	28d0 <__gedf2+0x60>
    28ea:	2001      	movs	r0, #1
    28ec:	3b01      	subs	r3, #1
    28ee:	4318      	orrs	r0, r3
    28f0:	e7f3      	b.n	28da <__gedf2+0x6a>
    28f2:	0037      	movs	r7, r6
    28f4:	4307      	orrs	r7, r0
    28f6:	d0d1      	beq.n	289c <__gedf2+0x2c>
    28f8:	2002      	movs	r0, #2
    28fa:	4240      	negs	r0, r0
    28fc:	e7ed      	b.n	28da <__gedf2+0x6a>
    28fe:	465f      	mov	r7, fp
    2900:	4317      	orrs	r7, r2
    2902:	d0ce      	beq.n	28a2 <__gedf2+0x32>
    2904:	e7f8      	b.n	28f8 <__gedf2+0x88>
    2906:	42ac      	cmp	r4, r5
    2908:	dce4      	bgt.n	28d4 <__gedf2+0x64>
    290a:	da03      	bge.n	2914 <__gedf2+0xa4>
    290c:	1e48      	subs	r0, r1, #1
    290e:	2101      	movs	r1, #1
    2910:	4308      	orrs	r0, r1
    2912:	e7e2      	b.n	28da <__gedf2+0x6a>
    2914:	455e      	cmp	r6, fp
    2916:	d8dd      	bhi.n	28d4 <__gedf2+0x64>
    2918:	d006      	beq.n	2928 <__gedf2+0xb8>
    291a:	2000      	movs	r0, #0
    291c:	455e      	cmp	r6, fp
    291e:	d2dc      	bcs.n	28da <__gedf2+0x6a>
    2920:	2301      	movs	r3, #1
    2922:	1e48      	subs	r0, r1, #1
    2924:	4318      	orrs	r0, r3
    2926:	e7d8      	b.n	28da <__gedf2+0x6a>
    2928:	45c4      	cmp	ip, r8
    292a:	d8d3      	bhi.n	28d4 <__gedf2+0x64>
    292c:	2000      	movs	r0, #0
    292e:	45c4      	cmp	ip, r8
    2930:	d3f6      	bcc.n	2920 <__gedf2+0xb0>
    2932:	e7d2      	b.n	28da <__gedf2+0x6a>
    2934:	000007ff 	.word	0x000007ff

00002938 <__ledf2>:
    2938:	b5f0      	push	{r4, r5, r6, r7, lr}
    293a:	464e      	mov	r6, r9
    293c:	4645      	mov	r5, r8
    293e:	46de      	mov	lr, fp
    2940:	4657      	mov	r7, sl
    2942:	005c      	lsls	r4, r3, #1
    2944:	b5e0      	push	{r5, r6, r7, lr}
    2946:	031f      	lsls	r7, r3, #12
    2948:	0fdb      	lsrs	r3, r3, #31
    294a:	4699      	mov	r9, r3
    294c:	4b2a      	ldr	r3, [pc, #168]	; (29f8 <__ledf2+0xc0>)
    294e:	030e      	lsls	r6, r1, #12
    2950:	004d      	lsls	r5, r1, #1
    2952:	0fc9      	lsrs	r1, r1, #31
    2954:	4684      	mov	ip, r0
    2956:	0b36      	lsrs	r6, r6, #12
    2958:	0d6d      	lsrs	r5, r5, #21
    295a:	468b      	mov	fp, r1
    295c:	4690      	mov	r8, r2
    295e:	0b3f      	lsrs	r7, r7, #12
    2960:	0d64      	lsrs	r4, r4, #21
    2962:	429d      	cmp	r5, r3
    2964:	d020      	beq.n	29a8 <__ledf2+0x70>
    2966:	4b24      	ldr	r3, [pc, #144]	; (29f8 <__ledf2+0xc0>)
    2968:	429c      	cmp	r4, r3
    296a:	d022      	beq.n	29b2 <__ledf2+0x7a>
    296c:	2d00      	cmp	r5, #0
    296e:	d112      	bne.n	2996 <__ledf2+0x5e>
    2970:	4330      	orrs	r0, r6
    2972:	4243      	negs	r3, r0
    2974:	4143      	adcs	r3, r0
    2976:	b2db      	uxtb	r3, r3
    2978:	2c00      	cmp	r4, #0
    297a:	d01f      	beq.n	29bc <__ledf2+0x84>
    297c:	2b00      	cmp	r3, #0
    297e:	d00c      	beq.n	299a <__ledf2+0x62>
    2980:	464b      	mov	r3, r9
    2982:	2001      	movs	r0, #1
    2984:	3b01      	subs	r3, #1
    2986:	4303      	orrs	r3, r0
    2988:	0018      	movs	r0, r3
    298a:	bc3c      	pop	{r2, r3, r4, r5}
    298c:	4690      	mov	r8, r2
    298e:	4699      	mov	r9, r3
    2990:	46a2      	mov	sl, r4
    2992:	46ab      	mov	fp, r5
    2994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2996:	2c00      	cmp	r4, #0
    2998:	d016      	beq.n	29c8 <__ledf2+0x90>
    299a:	45cb      	cmp	fp, r9
    299c:	d017      	beq.n	29ce <__ledf2+0x96>
    299e:	465b      	mov	r3, fp
    29a0:	4259      	negs	r1, r3
    29a2:	2301      	movs	r3, #1
    29a4:	430b      	orrs	r3, r1
    29a6:	e7ef      	b.n	2988 <__ledf2+0x50>
    29a8:	0031      	movs	r1, r6
    29aa:	2302      	movs	r3, #2
    29ac:	4301      	orrs	r1, r0
    29ae:	d1eb      	bne.n	2988 <__ledf2+0x50>
    29b0:	e7d9      	b.n	2966 <__ledf2+0x2e>
    29b2:	0039      	movs	r1, r7
    29b4:	2302      	movs	r3, #2
    29b6:	4311      	orrs	r1, r2
    29b8:	d1e6      	bne.n	2988 <__ledf2+0x50>
    29ba:	e7d7      	b.n	296c <__ledf2+0x34>
    29bc:	433a      	orrs	r2, r7
    29be:	d1dd      	bne.n	297c <__ledf2+0x44>
    29c0:	2300      	movs	r3, #0
    29c2:	2800      	cmp	r0, #0
    29c4:	d0e0      	beq.n	2988 <__ledf2+0x50>
    29c6:	e7ea      	b.n	299e <__ledf2+0x66>
    29c8:	433a      	orrs	r2, r7
    29ca:	d1e6      	bne.n	299a <__ledf2+0x62>
    29cc:	e7e7      	b.n	299e <__ledf2+0x66>
    29ce:	42a5      	cmp	r5, r4
    29d0:	dce5      	bgt.n	299e <__ledf2+0x66>
    29d2:	db05      	blt.n	29e0 <__ledf2+0xa8>
    29d4:	42be      	cmp	r6, r7
    29d6:	d8e2      	bhi.n	299e <__ledf2+0x66>
    29d8:	d007      	beq.n	29ea <__ledf2+0xb2>
    29da:	2300      	movs	r3, #0
    29dc:	42be      	cmp	r6, r7
    29de:	d2d3      	bcs.n	2988 <__ledf2+0x50>
    29e0:	4659      	mov	r1, fp
    29e2:	2301      	movs	r3, #1
    29e4:	3901      	subs	r1, #1
    29e6:	430b      	orrs	r3, r1
    29e8:	e7ce      	b.n	2988 <__ledf2+0x50>
    29ea:	45c4      	cmp	ip, r8
    29ec:	d8d7      	bhi.n	299e <__ledf2+0x66>
    29ee:	2300      	movs	r3, #0
    29f0:	45c4      	cmp	ip, r8
    29f2:	d3f5      	bcc.n	29e0 <__ledf2+0xa8>
    29f4:	e7c8      	b.n	2988 <__ledf2+0x50>
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	000007ff 	.word	0x000007ff

000029fc <__aeabi_dmul>:
    29fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fe:	4657      	mov	r7, sl
    2a00:	4645      	mov	r5, r8
    2a02:	46de      	mov	lr, fp
    2a04:	464e      	mov	r6, r9
    2a06:	b5e0      	push	{r5, r6, r7, lr}
    2a08:	030c      	lsls	r4, r1, #12
    2a0a:	4698      	mov	r8, r3
    2a0c:	004e      	lsls	r6, r1, #1
    2a0e:	0b23      	lsrs	r3, r4, #12
    2a10:	b087      	sub	sp, #28
    2a12:	0007      	movs	r7, r0
    2a14:	4692      	mov	sl, r2
    2a16:	469b      	mov	fp, r3
    2a18:	0d76      	lsrs	r6, r6, #21
    2a1a:	0fcd      	lsrs	r5, r1, #31
    2a1c:	2e00      	cmp	r6, #0
    2a1e:	d06b      	beq.n	2af8 <__aeabi_dmul+0xfc>
    2a20:	4b6d      	ldr	r3, [pc, #436]	; (2bd8 <__aeabi_dmul+0x1dc>)
    2a22:	429e      	cmp	r6, r3
    2a24:	d035      	beq.n	2a92 <__aeabi_dmul+0x96>
    2a26:	2480      	movs	r4, #128	; 0x80
    2a28:	465b      	mov	r3, fp
    2a2a:	0f42      	lsrs	r2, r0, #29
    2a2c:	0424      	lsls	r4, r4, #16
    2a2e:	00db      	lsls	r3, r3, #3
    2a30:	4314      	orrs	r4, r2
    2a32:	431c      	orrs	r4, r3
    2a34:	00c3      	lsls	r3, r0, #3
    2a36:	4699      	mov	r9, r3
    2a38:	4b68      	ldr	r3, [pc, #416]	; (2bdc <__aeabi_dmul+0x1e0>)
    2a3a:	46a3      	mov	fp, r4
    2a3c:	469c      	mov	ip, r3
    2a3e:	2300      	movs	r3, #0
    2a40:	2700      	movs	r7, #0
    2a42:	4466      	add	r6, ip
    2a44:	9302      	str	r3, [sp, #8]
    2a46:	4643      	mov	r3, r8
    2a48:	031c      	lsls	r4, r3, #12
    2a4a:	005a      	lsls	r2, r3, #1
    2a4c:	0fdb      	lsrs	r3, r3, #31
    2a4e:	4650      	mov	r0, sl
    2a50:	0b24      	lsrs	r4, r4, #12
    2a52:	0d52      	lsrs	r2, r2, #21
    2a54:	4698      	mov	r8, r3
    2a56:	d100      	bne.n	2a5a <__aeabi_dmul+0x5e>
    2a58:	e076      	b.n	2b48 <__aeabi_dmul+0x14c>
    2a5a:	4b5f      	ldr	r3, [pc, #380]	; (2bd8 <__aeabi_dmul+0x1dc>)
    2a5c:	429a      	cmp	r2, r3
    2a5e:	d06d      	beq.n	2b3c <__aeabi_dmul+0x140>
    2a60:	2380      	movs	r3, #128	; 0x80
    2a62:	0f41      	lsrs	r1, r0, #29
    2a64:	041b      	lsls	r3, r3, #16
    2a66:	430b      	orrs	r3, r1
    2a68:	495c      	ldr	r1, [pc, #368]	; (2bdc <__aeabi_dmul+0x1e0>)
    2a6a:	00e4      	lsls	r4, r4, #3
    2a6c:	468c      	mov	ip, r1
    2a6e:	431c      	orrs	r4, r3
    2a70:	00c3      	lsls	r3, r0, #3
    2a72:	2000      	movs	r0, #0
    2a74:	4462      	add	r2, ip
    2a76:	4641      	mov	r1, r8
    2a78:	18b6      	adds	r6, r6, r2
    2a7a:	4069      	eors	r1, r5
    2a7c:	1c72      	adds	r2, r6, #1
    2a7e:	9101      	str	r1, [sp, #4]
    2a80:	4694      	mov	ip, r2
    2a82:	4307      	orrs	r7, r0
    2a84:	2f0f      	cmp	r7, #15
    2a86:	d900      	bls.n	2a8a <__aeabi_dmul+0x8e>
    2a88:	e0b0      	b.n	2bec <__aeabi_dmul+0x1f0>
    2a8a:	4a55      	ldr	r2, [pc, #340]	; (2be0 <__aeabi_dmul+0x1e4>)
    2a8c:	00bf      	lsls	r7, r7, #2
    2a8e:	59d2      	ldr	r2, [r2, r7]
    2a90:	4697      	mov	pc, r2
    2a92:	465b      	mov	r3, fp
    2a94:	4303      	orrs	r3, r0
    2a96:	4699      	mov	r9, r3
    2a98:	d000      	beq.n	2a9c <__aeabi_dmul+0xa0>
    2a9a:	e087      	b.n	2bac <__aeabi_dmul+0x1b0>
    2a9c:	2300      	movs	r3, #0
    2a9e:	469b      	mov	fp, r3
    2aa0:	3302      	adds	r3, #2
    2aa2:	2708      	movs	r7, #8
    2aa4:	9302      	str	r3, [sp, #8]
    2aa6:	e7ce      	b.n	2a46 <__aeabi_dmul+0x4a>
    2aa8:	4642      	mov	r2, r8
    2aaa:	9201      	str	r2, [sp, #4]
    2aac:	2802      	cmp	r0, #2
    2aae:	d067      	beq.n	2b80 <__aeabi_dmul+0x184>
    2ab0:	2803      	cmp	r0, #3
    2ab2:	d100      	bne.n	2ab6 <__aeabi_dmul+0xba>
    2ab4:	e20e      	b.n	2ed4 <__aeabi_dmul+0x4d8>
    2ab6:	2801      	cmp	r0, #1
    2ab8:	d000      	beq.n	2abc <__aeabi_dmul+0xc0>
    2aba:	e162      	b.n	2d82 <__aeabi_dmul+0x386>
    2abc:	2300      	movs	r3, #0
    2abe:	2400      	movs	r4, #0
    2ac0:	2200      	movs	r2, #0
    2ac2:	4699      	mov	r9, r3
    2ac4:	9901      	ldr	r1, [sp, #4]
    2ac6:	4001      	ands	r1, r0
    2ac8:	b2cd      	uxtb	r5, r1
    2aca:	2100      	movs	r1, #0
    2acc:	0312      	lsls	r2, r2, #12
    2ace:	0d0b      	lsrs	r3, r1, #20
    2ad0:	0b12      	lsrs	r2, r2, #12
    2ad2:	051b      	lsls	r3, r3, #20
    2ad4:	4313      	orrs	r3, r2
    2ad6:	4a43      	ldr	r2, [pc, #268]	; (2be4 <__aeabi_dmul+0x1e8>)
    2ad8:	0524      	lsls	r4, r4, #20
    2ada:	4013      	ands	r3, r2
    2adc:	431c      	orrs	r4, r3
    2ade:	0064      	lsls	r4, r4, #1
    2ae0:	07ed      	lsls	r5, r5, #31
    2ae2:	0864      	lsrs	r4, r4, #1
    2ae4:	432c      	orrs	r4, r5
    2ae6:	4648      	mov	r0, r9
    2ae8:	0021      	movs	r1, r4
    2aea:	b007      	add	sp, #28
    2aec:	bc3c      	pop	{r2, r3, r4, r5}
    2aee:	4690      	mov	r8, r2
    2af0:	4699      	mov	r9, r3
    2af2:	46a2      	mov	sl, r4
    2af4:	46ab      	mov	fp, r5
    2af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af8:	4303      	orrs	r3, r0
    2afa:	4699      	mov	r9, r3
    2afc:	d04f      	beq.n	2b9e <__aeabi_dmul+0x1a2>
    2afe:	465b      	mov	r3, fp
    2b00:	2b00      	cmp	r3, #0
    2b02:	d100      	bne.n	2b06 <__aeabi_dmul+0x10a>
    2b04:	e189      	b.n	2e1a <__aeabi_dmul+0x41e>
    2b06:	4658      	mov	r0, fp
    2b08:	f000 fb16 	bl	3138 <__clzsi2>
    2b0c:	0003      	movs	r3, r0
    2b0e:	3b0b      	subs	r3, #11
    2b10:	2b1c      	cmp	r3, #28
    2b12:	dd00      	ble.n	2b16 <__aeabi_dmul+0x11a>
    2b14:	e17a      	b.n	2e0c <__aeabi_dmul+0x410>
    2b16:	221d      	movs	r2, #29
    2b18:	1ad3      	subs	r3, r2, r3
    2b1a:	003a      	movs	r2, r7
    2b1c:	0001      	movs	r1, r0
    2b1e:	465c      	mov	r4, fp
    2b20:	40da      	lsrs	r2, r3
    2b22:	3908      	subs	r1, #8
    2b24:	408c      	lsls	r4, r1
    2b26:	0013      	movs	r3, r2
    2b28:	408f      	lsls	r7, r1
    2b2a:	4323      	orrs	r3, r4
    2b2c:	469b      	mov	fp, r3
    2b2e:	46b9      	mov	r9, r7
    2b30:	2300      	movs	r3, #0
    2b32:	4e2d      	ldr	r6, [pc, #180]	; (2be8 <__aeabi_dmul+0x1ec>)
    2b34:	2700      	movs	r7, #0
    2b36:	1a36      	subs	r6, r6, r0
    2b38:	9302      	str	r3, [sp, #8]
    2b3a:	e784      	b.n	2a46 <__aeabi_dmul+0x4a>
    2b3c:	4653      	mov	r3, sl
    2b3e:	4323      	orrs	r3, r4
    2b40:	d12a      	bne.n	2b98 <__aeabi_dmul+0x19c>
    2b42:	2400      	movs	r4, #0
    2b44:	2002      	movs	r0, #2
    2b46:	e796      	b.n	2a76 <__aeabi_dmul+0x7a>
    2b48:	4653      	mov	r3, sl
    2b4a:	4323      	orrs	r3, r4
    2b4c:	d020      	beq.n	2b90 <__aeabi_dmul+0x194>
    2b4e:	2c00      	cmp	r4, #0
    2b50:	d100      	bne.n	2b54 <__aeabi_dmul+0x158>
    2b52:	e157      	b.n	2e04 <__aeabi_dmul+0x408>
    2b54:	0020      	movs	r0, r4
    2b56:	f000 faef 	bl	3138 <__clzsi2>
    2b5a:	0003      	movs	r3, r0
    2b5c:	3b0b      	subs	r3, #11
    2b5e:	2b1c      	cmp	r3, #28
    2b60:	dd00      	ble.n	2b64 <__aeabi_dmul+0x168>
    2b62:	e149      	b.n	2df8 <__aeabi_dmul+0x3fc>
    2b64:	211d      	movs	r1, #29
    2b66:	1acb      	subs	r3, r1, r3
    2b68:	4651      	mov	r1, sl
    2b6a:	0002      	movs	r2, r0
    2b6c:	40d9      	lsrs	r1, r3
    2b6e:	4653      	mov	r3, sl
    2b70:	3a08      	subs	r2, #8
    2b72:	4094      	lsls	r4, r2
    2b74:	4093      	lsls	r3, r2
    2b76:	430c      	orrs	r4, r1
    2b78:	4a1b      	ldr	r2, [pc, #108]	; (2be8 <__aeabi_dmul+0x1ec>)
    2b7a:	1a12      	subs	r2, r2, r0
    2b7c:	2000      	movs	r0, #0
    2b7e:	e77a      	b.n	2a76 <__aeabi_dmul+0x7a>
    2b80:	2501      	movs	r5, #1
    2b82:	9b01      	ldr	r3, [sp, #4]
    2b84:	4c14      	ldr	r4, [pc, #80]	; (2bd8 <__aeabi_dmul+0x1dc>)
    2b86:	401d      	ands	r5, r3
    2b88:	2300      	movs	r3, #0
    2b8a:	2200      	movs	r2, #0
    2b8c:	4699      	mov	r9, r3
    2b8e:	e79c      	b.n	2aca <__aeabi_dmul+0xce>
    2b90:	2400      	movs	r4, #0
    2b92:	2200      	movs	r2, #0
    2b94:	2001      	movs	r0, #1
    2b96:	e76e      	b.n	2a76 <__aeabi_dmul+0x7a>
    2b98:	4653      	mov	r3, sl
    2b9a:	2003      	movs	r0, #3
    2b9c:	e76b      	b.n	2a76 <__aeabi_dmul+0x7a>
    2b9e:	2300      	movs	r3, #0
    2ba0:	469b      	mov	fp, r3
    2ba2:	3301      	adds	r3, #1
    2ba4:	2704      	movs	r7, #4
    2ba6:	2600      	movs	r6, #0
    2ba8:	9302      	str	r3, [sp, #8]
    2baa:	e74c      	b.n	2a46 <__aeabi_dmul+0x4a>
    2bac:	2303      	movs	r3, #3
    2bae:	4681      	mov	r9, r0
    2bb0:	270c      	movs	r7, #12
    2bb2:	9302      	str	r3, [sp, #8]
    2bb4:	e747      	b.n	2a46 <__aeabi_dmul+0x4a>
    2bb6:	2280      	movs	r2, #128	; 0x80
    2bb8:	2300      	movs	r3, #0
    2bba:	2500      	movs	r5, #0
    2bbc:	0312      	lsls	r2, r2, #12
    2bbe:	4699      	mov	r9, r3
    2bc0:	4c05      	ldr	r4, [pc, #20]	; (2bd8 <__aeabi_dmul+0x1dc>)
    2bc2:	e782      	b.n	2aca <__aeabi_dmul+0xce>
    2bc4:	465c      	mov	r4, fp
    2bc6:	464b      	mov	r3, r9
    2bc8:	9802      	ldr	r0, [sp, #8]
    2bca:	e76f      	b.n	2aac <__aeabi_dmul+0xb0>
    2bcc:	465c      	mov	r4, fp
    2bce:	464b      	mov	r3, r9
    2bd0:	9501      	str	r5, [sp, #4]
    2bd2:	9802      	ldr	r0, [sp, #8]
    2bd4:	e76a      	b.n	2aac <__aeabi_dmul+0xb0>
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	000007ff 	.word	0x000007ff
    2bdc:	fffffc01 	.word	0xfffffc01
    2be0:	000035ac 	.word	0x000035ac
    2be4:	800fffff 	.word	0x800fffff
    2be8:	fffffc0d 	.word	0xfffffc0d
    2bec:	464a      	mov	r2, r9
    2bee:	4649      	mov	r1, r9
    2bf0:	0c17      	lsrs	r7, r2, #16
    2bf2:	0c1a      	lsrs	r2, r3, #16
    2bf4:	041b      	lsls	r3, r3, #16
    2bf6:	0c1b      	lsrs	r3, r3, #16
    2bf8:	0408      	lsls	r0, r1, #16
    2bfa:	0019      	movs	r1, r3
    2bfc:	0c00      	lsrs	r0, r0, #16
    2bfe:	4341      	muls	r1, r0
    2c00:	0015      	movs	r5, r2
    2c02:	4688      	mov	r8, r1
    2c04:	0019      	movs	r1, r3
    2c06:	437d      	muls	r5, r7
    2c08:	4379      	muls	r1, r7
    2c0a:	9503      	str	r5, [sp, #12]
    2c0c:	4689      	mov	r9, r1
    2c0e:	0029      	movs	r1, r5
    2c10:	0015      	movs	r5, r2
    2c12:	4345      	muls	r5, r0
    2c14:	444d      	add	r5, r9
    2c16:	9502      	str	r5, [sp, #8]
    2c18:	4645      	mov	r5, r8
    2c1a:	0c2d      	lsrs	r5, r5, #16
    2c1c:	46aa      	mov	sl, r5
    2c1e:	9d02      	ldr	r5, [sp, #8]
    2c20:	4455      	add	r5, sl
    2c22:	45a9      	cmp	r9, r5
    2c24:	d906      	bls.n	2c34 <__aeabi_dmul+0x238>
    2c26:	468a      	mov	sl, r1
    2c28:	2180      	movs	r1, #128	; 0x80
    2c2a:	0249      	lsls	r1, r1, #9
    2c2c:	4689      	mov	r9, r1
    2c2e:	44ca      	add	sl, r9
    2c30:	4651      	mov	r1, sl
    2c32:	9103      	str	r1, [sp, #12]
    2c34:	0c29      	lsrs	r1, r5, #16
    2c36:	9104      	str	r1, [sp, #16]
    2c38:	4641      	mov	r1, r8
    2c3a:	0409      	lsls	r1, r1, #16
    2c3c:	042d      	lsls	r5, r5, #16
    2c3e:	0c09      	lsrs	r1, r1, #16
    2c40:	4688      	mov	r8, r1
    2c42:	0029      	movs	r1, r5
    2c44:	0c25      	lsrs	r5, r4, #16
    2c46:	0424      	lsls	r4, r4, #16
    2c48:	4441      	add	r1, r8
    2c4a:	0c24      	lsrs	r4, r4, #16
    2c4c:	9105      	str	r1, [sp, #20]
    2c4e:	0021      	movs	r1, r4
    2c50:	4341      	muls	r1, r0
    2c52:	4688      	mov	r8, r1
    2c54:	0021      	movs	r1, r4
    2c56:	4379      	muls	r1, r7
    2c58:	468a      	mov	sl, r1
    2c5a:	4368      	muls	r0, r5
    2c5c:	4641      	mov	r1, r8
    2c5e:	4450      	add	r0, sl
    2c60:	4681      	mov	r9, r0
    2c62:	0c08      	lsrs	r0, r1, #16
    2c64:	4448      	add	r0, r9
    2c66:	436f      	muls	r7, r5
    2c68:	4582      	cmp	sl, r0
    2c6a:	d903      	bls.n	2c74 <__aeabi_dmul+0x278>
    2c6c:	2180      	movs	r1, #128	; 0x80
    2c6e:	0249      	lsls	r1, r1, #9
    2c70:	4689      	mov	r9, r1
    2c72:	444f      	add	r7, r9
    2c74:	0c01      	lsrs	r1, r0, #16
    2c76:	4689      	mov	r9, r1
    2c78:	0039      	movs	r1, r7
    2c7a:	4449      	add	r1, r9
    2c7c:	9102      	str	r1, [sp, #8]
    2c7e:	4641      	mov	r1, r8
    2c80:	040f      	lsls	r7, r1, #16
    2c82:	9904      	ldr	r1, [sp, #16]
    2c84:	0c3f      	lsrs	r7, r7, #16
    2c86:	4688      	mov	r8, r1
    2c88:	0400      	lsls	r0, r0, #16
    2c8a:	19c0      	adds	r0, r0, r7
    2c8c:	4480      	add	r8, r0
    2c8e:	4641      	mov	r1, r8
    2c90:	9104      	str	r1, [sp, #16]
    2c92:	4659      	mov	r1, fp
    2c94:	0c0f      	lsrs	r7, r1, #16
    2c96:	0409      	lsls	r1, r1, #16
    2c98:	0c09      	lsrs	r1, r1, #16
    2c9a:	4688      	mov	r8, r1
    2c9c:	4359      	muls	r1, r3
    2c9e:	468a      	mov	sl, r1
    2ca0:	0039      	movs	r1, r7
    2ca2:	4351      	muls	r1, r2
    2ca4:	4689      	mov	r9, r1
    2ca6:	4641      	mov	r1, r8
    2ca8:	434a      	muls	r2, r1
    2caa:	4651      	mov	r1, sl
    2cac:	0c09      	lsrs	r1, r1, #16
    2cae:	468b      	mov	fp, r1
    2cb0:	437b      	muls	r3, r7
    2cb2:	18d2      	adds	r2, r2, r3
    2cb4:	445a      	add	r2, fp
    2cb6:	4293      	cmp	r3, r2
    2cb8:	d903      	bls.n	2cc2 <__aeabi_dmul+0x2c6>
    2cba:	2380      	movs	r3, #128	; 0x80
    2cbc:	025b      	lsls	r3, r3, #9
    2cbe:	469b      	mov	fp, r3
    2cc0:	44d9      	add	r9, fp
    2cc2:	4651      	mov	r1, sl
    2cc4:	0409      	lsls	r1, r1, #16
    2cc6:	0c09      	lsrs	r1, r1, #16
    2cc8:	468a      	mov	sl, r1
    2cca:	4641      	mov	r1, r8
    2ccc:	4361      	muls	r1, r4
    2cce:	437c      	muls	r4, r7
    2cd0:	0c13      	lsrs	r3, r2, #16
    2cd2:	0412      	lsls	r2, r2, #16
    2cd4:	444b      	add	r3, r9
    2cd6:	4452      	add	r2, sl
    2cd8:	46a1      	mov	r9, r4
    2cda:	468a      	mov	sl, r1
    2cdc:	003c      	movs	r4, r7
    2cde:	4641      	mov	r1, r8
    2ce0:	436c      	muls	r4, r5
    2ce2:	434d      	muls	r5, r1
    2ce4:	4651      	mov	r1, sl
    2ce6:	444d      	add	r5, r9
    2ce8:	0c0f      	lsrs	r7, r1, #16
    2cea:	197d      	adds	r5, r7, r5
    2cec:	45a9      	cmp	r9, r5
    2cee:	d903      	bls.n	2cf8 <__aeabi_dmul+0x2fc>
    2cf0:	2180      	movs	r1, #128	; 0x80
    2cf2:	0249      	lsls	r1, r1, #9
    2cf4:	4688      	mov	r8, r1
    2cf6:	4444      	add	r4, r8
    2cf8:	9f04      	ldr	r7, [sp, #16]
    2cfa:	9903      	ldr	r1, [sp, #12]
    2cfc:	46b8      	mov	r8, r7
    2cfe:	4441      	add	r1, r8
    2d00:	468b      	mov	fp, r1
    2d02:	4583      	cmp	fp, r0
    2d04:	4180      	sbcs	r0, r0
    2d06:	4241      	negs	r1, r0
    2d08:	4688      	mov	r8, r1
    2d0a:	4651      	mov	r1, sl
    2d0c:	0408      	lsls	r0, r1, #16
    2d0e:	042f      	lsls	r7, r5, #16
    2d10:	0c00      	lsrs	r0, r0, #16
    2d12:	183f      	adds	r7, r7, r0
    2d14:	4658      	mov	r0, fp
    2d16:	9902      	ldr	r1, [sp, #8]
    2d18:	1810      	adds	r0, r2, r0
    2d1a:	4689      	mov	r9, r1
    2d1c:	4290      	cmp	r0, r2
    2d1e:	4192      	sbcs	r2, r2
    2d20:	444f      	add	r7, r9
    2d22:	46ba      	mov	sl, r7
    2d24:	4252      	negs	r2, r2
    2d26:	4699      	mov	r9, r3
    2d28:	4693      	mov	fp, r2
    2d2a:	44c2      	add	sl, r8
    2d2c:	44d1      	add	r9, sl
    2d2e:	44cb      	add	fp, r9
    2d30:	428f      	cmp	r7, r1
    2d32:	41bf      	sbcs	r7, r7
    2d34:	45c2      	cmp	sl, r8
    2d36:	4189      	sbcs	r1, r1
    2d38:	4599      	cmp	r9, r3
    2d3a:	419b      	sbcs	r3, r3
    2d3c:	4593      	cmp	fp, r2
    2d3e:	4192      	sbcs	r2, r2
    2d40:	427f      	negs	r7, r7
    2d42:	4249      	negs	r1, r1
    2d44:	0c2d      	lsrs	r5, r5, #16
    2d46:	4252      	negs	r2, r2
    2d48:	430f      	orrs	r7, r1
    2d4a:	425b      	negs	r3, r3
    2d4c:	4313      	orrs	r3, r2
    2d4e:	197f      	adds	r7, r7, r5
    2d50:	18ff      	adds	r7, r7, r3
    2d52:	465b      	mov	r3, fp
    2d54:	193c      	adds	r4, r7, r4
    2d56:	0ddb      	lsrs	r3, r3, #23
    2d58:	9a05      	ldr	r2, [sp, #20]
    2d5a:	0264      	lsls	r4, r4, #9
    2d5c:	431c      	orrs	r4, r3
    2d5e:	0243      	lsls	r3, r0, #9
    2d60:	4313      	orrs	r3, r2
    2d62:	1e5d      	subs	r5, r3, #1
    2d64:	41ab      	sbcs	r3, r5
    2d66:	465a      	mov	r2, fp
    2d68:	0dc0      	lsrs	r0, r0, #23
    2d6a:	4303      	orrs	r3, r0
    2d6c:	0252      	lsls	r2, r2, #9
    2d6e:	4313      	orrs	r3, r2
    2d70:	01e2      	lsls	r2, r4, #7
    2d72:	d556      	bpl.n	2e22 <__aeabi_dmul+0x426>
    2d74:	2001      	movs	r0, #1
    2d76:	085a      	lsrs	r2, r3, #1
    2d78:	4003      	ands	r3, r0
    2d7a:	4313      	orrs	r3, r2
    2d7c:	07e2      	lsls	r2, r4, #31
    2d7e:	4313      	orrs	r3, r2
    2d80:	0864      	lsrs	r4, r4, #1
    2d82:	485a      	ldr	r0, [pc, #360]	; (2eec <__aeabi_dmul+0x4f0>)
    2d84:	4460      	add	r0, ip
    2d86:	2800      	cmp	r0, #0
    2d88:	dd4d      	ble.n	2e26 <__aeabi_dmul+0x42a>
    2d8a:	075a      	lsls	r2, r3, #29
    2d8c:	d009      	beq.n	2da2 <__aeabi_dmul+0x3a6>
    2d8e:	220f      	movs	r2, #15
    2d90:	401a      	ands	r2, r3
    2d92:	2a04      	cmp	r2, #4
    2d94:	d005      	beq.n	2da2 <__aeabi_dmul+0x3a6>
    2d96:	1d1a      	adds	r2, r3, #4
    2d98:	429a      	cmp	r2, r3
    2d9a:	419b      	sbcs	r3, r3
    2d9c:	425b      	negs	r3, r3
    2d9e:	18e4      	adds	r4, r4, r3
    2da0:	0013      	movs	r3, r2
    2da2:	01e2      	lsls	r2, r4, #7
    2da4:	d504      	bpl.n	2db0 <__aeabi_dmul+0x3b4>
    2da6:	2080      	movs	r0, #128	; 0x80
    2da8:	4a51      	ldr	r2, [pc, #324]	; (2ef0 <__aeabi_dmul+0x4f4>)
    2daa:	00c0      	lsls	r0, r0, #3
    2dac:	4014      	ands	r4, r2
    2dae:	4460      	add	r0, ip
    2db0:	4a50      	ldr	r2, [pc, #320]	; (2ef4 <__aeabi_dmul+0x4f8>)
    2db2:	4290      	cmp	r0, r2
    2db4:	dd00      	ble.n	2db8 <__aeabi_dmul+0x3bc>
    2db6:	e6e3      	b.n	2b80 <__aeabi_dmul+0x184>
    2db8:	2501      	movs	r5, #1
    2dba:	08db      	lsrs	r3, r3, #3
    2dbc:	0762      	lsls	r2, r4, #29
    2dbe:	431a      	orrs	r2, r3
    2dc0:	0264      	lsls	r4, r4, #9
    2dc2:	9b01      	ldr	r3, [sp, #4]
    2dc4:	4691      	mov	r9, r2
    2dc6:	0b22      	lsrs	r2, r4, #12
    2dc8:	0544      	lsls	r4, r0, #21
    2dca:	0d64      	lsrs	r4, r4, #21
    2dcc:	401d      	ands	r5, r3
    2dce:	e67c      	b.n	2aca <__aeabi_dmul+0xce>
    2dd0:	2280      	movs	r2, #128	; 0x80
    2dd2:	4659      	mov	r1, fp
    2dd4:	0312      	lsls	r2, r2, #12
    2dd6:	4211      	tst	r1, r2
    2dd8:	d008      	beq.n	2dec <__aeabi_dmul+0x3f0>
    2dda:	4214      	tst	r4, r2
    2ddc:	d106      	bne.n	2dec <__aeabi_dmul+0x3f0>
    2dde:	4322      	orrs	r2, r4
    2de0:	0312      	lsls	r2, r2, #12
    2de2:	0b12      	lsrs	r2, r2, #12
    2de4:	4645      	mov	r5, r8
    2de6:	4699      	mov	r9, r3
    2de8:	4c43      	ldr	r4, [pc, #268]	; (2ef8 <__aeabi_dmul+0x4fc>)
    2dea:	e66e      	b.n	2aca <__aeabi_dmul+0xce>
    2dec:	465b      	mov	r3, fp
    2dee:	431a      	orrs	r2, r3
    2df0:	0312      	lsls	r2, r2, #12
    2df2:	0b12      	lsrs	r2, r2, #12
    2df4:	4c40      	ldr	r4, [pc, #256]	; (2ef8 <__aeabi_dmul+0x4fc>)
    2df6:	e668      	b.n	2aca <__aeabi_dmul+0xce>
    2df8:	0003      	movs	r3, r0
    2dfa:	4654      	mov	r4, sl
    2dfc:	3b28      	subs	r3, #40	; 0x28
    2dfe:	409c      	lsls	r4, r3
    2e00:	2300      	movs	r3, #0
    2e02:	e6b9      	b.n	2b78 <__aeabi_dmul+0x17c>
    2e04:	f000 f998 	bl	3138 <__clzsi2>
    2e08:	3020      	adds	r0, #32
    2e0a:	e6a6      	b.n	2b5a <__aeabi_dmul+0x15e>
    2e0c:	0003      	movs	r3, r0
    2e0e:	3b28      	subs	r3, #40	; 0x28
    2e10:	409f      	lsls	r7, r3
    2e12:	2300      	movs	r3, #0
    2e14:	46bb      	mov	fp, r7
    2e16:	4699      	mov	r9, r3
    2e18:	e68a      	b.n	2b30 <__aeabi_dmul+0x134>
    2e1a:	f000 f98d 	bl	3138 <__clzsi2>
    2e1e:	3020      	adds	r0, #32
    2e20:	e674      	b.n	2b0c <__aeabi_dmul+0x110>
    2e22:	46b4      	mov	ip, r6
    2e24:	e7ad      	b.n	2d82 <__aeabi_dmul+0x386>
    2e26:	2501      	movs	r5, #1
    2e28:	1a2a      	subs	r2, r5, r0
    2e2a:	2a38      	cmp	r2, #56	; 0x38
    2e2c:	dd06      	ble.n	2e3c <__aeabi_dmul+0x440>
    2e2e:	9b01      	ldr	r3, [sp, #4]
    2e30:	2400      	movs	r4, #0
    2e32:	401d      	ands	r5, r3
    2e34:	2300      	movs	r3, #0
    2e36:	2200      	movs	r2, #0
    2e38:	4699      	mov	r9, r3
    2e3a:	e646      	b.n	2aca <__aeabi_dmul+0xce>
    2e3c:	2a1f      	cmp	r2, #31
    2e3e:	dc21      	bgt.n	2e84 <__aeabi_dmul+0x488>
    2e40:	2520      	movs	r5, #32
    2e42:	0020      	movs	r0, r4
    2e44:	1aad      	subs	r5, r5, r2
    2e46:	001e      	movs	r6, r3
    2e48:	40ab      	lsls	r3, r5
    2e4a:	40a8      	lsls	r0, r5
    2e4c:	40d6      	lsrs	r6, r2
    2e4e:	1e5d      	subs	r5, r3, #1
    2e50:	41ab      	sbcs	r3, r5
    2e52:	4330      	orrs	r0, r6
    2e54:	4318      	orrs	r0, r3
    2e56:	40d4      	lsrs	r4, r2
    2e58:	0743      	lsls	r3, r0, #29
    2e5a:	d009      	beq.n	2e70 <__aeabi_dmul+0x474>
    2e5c:	230f      	movs	r3, #15
    2e5e:	4003      	ands	r3, r0
    2e60:	2b04      	cmp	r3, #4
    2e62:	d005      	beq.n	2e70 <__aeabi_dmul+0x474>
    2e64:	0003      	movs	r3, r0
    2e66:	1d18      	adds	r0, r3, #4
    2e68:	4298      	cmp	r0, r3
    2e6a:	419b      	sbcs	r3, r3
    2e6c:	425b      	negs	r3, r3
    2e6e:	18e4      	adds	r4, r4, r3
    2e70:	0223      	lsls	r3, r4, #8
    2e72:	d521      	bpl.n	2eb8 <__aeabi_dmul+0x4bc>
    2e74:	2501      	movs	r5, #1
    2e76:	9b01      	ldr	r3, [sp, #4]
    2e78:	2401      	movs	r4, #1
    2e7a:	401d      	ands	r5, r3
    2e7c:	2300      	movs	r3, #0
    2e7e:	2200      	movs	r2, #0
    2e80:	4699      	mov	r9, r3
    2e82:	e622      	b.n	2aca <__aeabi_dmul+0xce>
    2e84:	251f      	movs	r5, #31
    2e86:	0021      	movs	r1, r4
    2e88:	426d      	negs	r5, r5
    2e8a:	1a28      	subs	r0, r5, r0
    2e8c:	40c1      	lsrs	r1, r0
    2e8e:	0008      	movs	r0, r1
    2e90:	2a20      	cmp	r2, #32
    2e92:	d01d      	beq.n	2ed0 <__aeabi_dmul+0x4d4>
    2e94:	355f      	adds	r5, #95	; 0x5f
    2e96:	1aaa      	subs	r2, r5, r2
    2e98:	4094      	lsls	r4, r2
    2e9a:	4323      	orrs	r3, r4
    2e9c:	1e5c      	subs	r4, r3, #1
    2e9e:	41a3      	sbcs	r3, r4
    2ea0:	2507      	movs	r5, #7
    2ea2:	4303      	orrs	r3, r0
    2ea4:	401d      	ands	r5, r3
    2ea6:	2200      	movs	r2, #0
    2ea8:	2d00      	cmp	r5, #0
    2eaa:	d009      	beq.n	2ec0 <__aeabi_dmul+0x4c4>
    2eac:	220f      	movs	r2, #15
    2eae:	2400      	movs	r4, #0
    2eb0:	401a      	ands	r2, r3
    2eb2:	0018      	movs	r0, r3
    2eb4:	2a04      	cmp	r2, #4
    2eb6:	d1d6      	bne.n	2e66 <__aeabi_dmul+0x46a>
    2eb8:	0003      	movs	r3, r0
    2eba:	0765      	lsls	r5, r4, #29
    2ebc:	0264      	lsls	r4, r4, #9
    2ebe:	0b22      	lsrs	r2, r4, #12
    2ec0:	08db      	lsrs	r3, r3, #3
    2ec2:	432b      	orrs	r3, r5
    2ec4:	2501      	movs	r5, #1
    2ec6:	4699      	mov	r9, r3
    2ec8:	9b01      	ldr	r3, [sp, #4]
    2eca:	2400      	movs	r4, #0
    2ecc:	401d      	ands	r5, r3
    2ece:	e5fc      	b.n	2aca <__aeabi_dmul+0xce>
    2ed0:	2400      	movs	r4, #0
    2ed2:	e7e2      	b.n	2e9a <__aeabi_dmul+0x49e>
    2ed4:	2280      	movs	r2, #128	; 0x80
    2ed6:	2501      	movs	r5, #1
    2ed8:	0312      	lsls	r2, r2, #12
    2eda:	4322      	orrs	r2, r4
    2edc:	9901      	ldr	r1, [sp, #4]
    2ede:	0312      	lsls	r2, r2, #12
    2ee0:	0b12      	lsrs	r2, r2, #12
    2ee2:	400d      	ands	r5, r1
    2ee4:	4699      	mov	r9, r3
    2ee6:	4c04      	ldr	r4, [pc, #16]	; (2ef8 <__aeabi_dmul+0x4fc>)
    2ee8:	e5ef      	b.n	2aca <__aeabi_dmul+0xce>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	000003ff 	.word	0x000003ff
    2ef0:	feffffff 	.word	0xfeffffff
    2ef4:	000007fe 	.word	0x000007fe
    2ef8:	000007ff 	.word	0x000007ff

00002efc <__aeabi_i2d>:
    2efc:	b570      	push	{r4, r5, r6, lr}
    2efe:	2800      	cmp	r0, #0
    2f00:	d030      	beq.n	2f64 <__aeabi_i2d+0x68>
    2f02:	17c3      	asrs	r3, r0, #31
    2f04:	18c4      	adds	r4, r0, r3
    2f06:	405c      	eors	r4, r3
    2f08:	0fc5      	lsrs	r5, r0, #31
    2f0a:	0020      	movs	r0, r4
    2f0c:	f000 f914 	bl	3138 <__clzsi2>
    2f10:	4b17      	ldr	r3, [pc, #92]	; (2f70 <__aeabi_i2d+0x74>)
    2f12:	4a18      	ldr	r2, [pc, #96]	; (2f74 <__aeabi_i2d+0x78>)
    2f14:	1a1b      	subs	r3, r3, r0
    2f16:	1ad2      	subs	r2, r2, r3
    2f18:	2a1f      	cmp	r2, #31
    2f1a:	dd18      	ble.n	2f4e <__aeabi_i2d+0x52>
    2f1c:	4a16      	ldr	r2, [pc, #88]	; (2f78 <__aeabi_i2d+0x7c>)
    2f1e:	1ad2      	subs	r2, r2, r3
    2f20:	4094      	lsls	r4, r2
    2f22:	2200      	movs	r2, #0
    2f24:	0324      	lsls	r4, r4, #12
    2f26:	055b      	lsls	r3, r3, #21
    2f28:	0b24      	lsrs	r4, r4, #12
    2f2a:	0d5b      	lsrs	r3, r3, #21
    2f2c:	2100      	movs	r1, #0
    2f2e:	0010      	movs	r0, r2
    2f30:	0324      	lsls	r4, r4, #12
    2f32:	0d0a      	lsrs	r2, r1, #20
    2f34:	0b24      	lsrs	r4, r4, #12
    2f36:	0512      	lsls	r2, r2, #20
    2f38:	4322      	orrs	r2, r4
    2f3a:	4c10      	ldr	r4, [pc, #64]	; (2f7c <__aeabi_i2d+0x80>)
    2f3c:	051b      	lsls	r3, r3, #20
    2f3e:	4022      	ands	r2, r4
    2f40:	4313      	orrs	r3, r2
    2f42:	005b      	lsls	r3, r3, #1
    2f44:	07ed      	lsls	r5, r5, #31
    2f46:	085b      	lsrs	r3, r3, #1
    2f48:	432b      	orrs	r3, r5
    2f4a:	0019      	movs	r1, r3
    2f4c:	bd70      	pop	{r4, r5, r6, pc}
    2f4e:	0021      	movs	r1, r4
    2f50:	4091      	lsls	r1, r2
    2f52:	000a      	movs	r2, r1
    2f54:	210b      	movs	r1, #11
    2f56:	1a08      	subs	r0, r1, r0
    2f58:	40c4      	lsrs	r4, r0
    2f5a:	055b      	lsls	r3, r3, #21
    2f5c:	0324      	lsls	r4, r4, #12
    2f5e:	0b24      	lsrs	r4, r4, #12
    2f60:	0d5b      	lsrs	r3, r3, #21
    2f62:	e7e3      	b.n	2f2c <__aeabi_i2d+0x30>
    2f64:	2500      	movs	r5, #0
    2f66:	2300      	movs	r3, #0
    2f68:	2400      	movs	r4, #0
    2f6a:	2200      	movs	r2, #0
    2f6c:	e7de      	b.n	2f2c <__aeabi_i2d+0x30>
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	0000041e 	.word	0x0000041e
    2f74:	00000433 	.word	0x00000433
    2f78:	00000413 	.word	0x00000413
    2f7c:	800fffff 	.word	0x800fffff

00002f80 <__aeabi_f2d>:
    2f80:	0041      	lsls	r1, r0, #1
    2f82:	0e09      	lsrs	r1, r1, #24
    2f84:	1c4b      	adds	r3, r1, #1
    2f86:	b570      	push	{r4, r5, r6, lr}
    2f88:	b2db      	uxtb	r3, r3
    2f8a:	0246      	lsls	r6, r0, #9
    2f8c:	0a75      	lsrs	r5, r6, #9
    2f8e:	0fc4      	lsrs	r4, r0, #31
    2f90:	2b01      	cmp	r3, #1
    2f92:	dd14      	ble.n	2fbe <__aeabi_f2d+0x3e>
    2f94:	23e0      	movs	r3, #224	; 0xe0
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	076d      	lsls	r5, r5, #29
    2f9a:	0b36      	lsrs	r6, r6, #12
    2f9c:	18cb      	adds	r3, r1, r3
    2f9e:	2100      	movs	r1, #0
    2fa0:	0d0a      	lsrs	r2, r1, #20
    2fa2:	0028      	movs	r0, r5
    2fa4:	0512      	lsls	r2, r2, #20
    2fa6:	4d1c      	ldr	r5, [pc, #112]	; (3018 <__aeabi_f2d+0x98>)
    2fa8:	4332      	orrs	r2, r6
    2faa:	055b      	lsls	r3, r3, #21
    2fac:	402a      	ands	r2, r5
    2fae:	085b      	lsrs	r3, r3, #1
    2fb0:	4313      	orrs	r3, r2
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	07e4      	lsls	r4, r4, #31
    2fb6:	085b      	lsrs	r3, r3, #1
    2fb8:	4323      	orrs	r3, r4
    2fba:	0019      	movs	r1, r3
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	2900      	cmp	r1, #0
    2fc0:	d114      	bne.n	2fec <__aeabi_f2d+0x6c>
    2fc2:	2d00      	cmp	r5, #0
    2fc4:	d01e      	beq.n	3004 <__aeabi_f2d+0x84>
    2fc6:	0028      	movs	r0, r5
    2fc8:	f000 f8b6 	bl	3138 <__clzsi2>
    2fcc:	280a      	cmp	r0, #10
    2fce:	dc1c      	bgt.n	300a <__aeabi_f2d+0x8a>
    2fd0:	230b      	movs	r3, #11
    2fd2:	002a      	movs	r2, r5
    2fd4:	1a1b      	subs	r3, r3, r0
    2fd6:	40da      	lsrs	r2, r3
    2fd8:	0003      	movs	r3, r0
    2fda:	3315      	adds	r3, #21
    2fdc:	409d      	lsls	r5, r3
    2fde:	4b0f      	ldr	r3, [pc, #60]	; (301c <__aeabi_f2d+0x9c>)
    2fe0:	0312      	lsls	r2, r2, #12
    2fe2:	1a1b      	subs	r3, r3, r0
    2fe4:	055b      	lsls	r3, r3, #21
    2fe6:	0b16      	lsrs	r6, r2, #12
    2fe8:	0d5b      	lsrs	r3, r3, #21
    2fea:	e7d8      	b.n	2f9e <__aeabi_f2d+0x1e>
    2fec:	2d00      	cmp	r5, #0
    2fee:	d006      	beq.n	2ffe <__aeabi_f2d+0x7e>
    2ff0:	0b32      	lsrs	r2, r6, #12
    2ff2:	2680      	movs	r6, #128	; 0x80
    2ff4:	0336      	lsls	r6, r6, #12
    2ff6:	076d      	lsls	r5, r5, #29
    2ff8:	4316      	orrs	r6, r2
    2ffa:	4b09      	ldr	r3, [pc, #36]	; (3020 <__aeabi_f2d+0xa0>)
    2ffc:	e7cf      	b.n	2f9e <__aeabi_f2d+0x1e>
    2ffe:	4b08      	ldr	r3, [pc, #32]	; (3020 <__aeabi_f2d+0xa0>)
    3000:	2600      	movs	r6, #0
    3002:	e7cc      	b.n	2f9e <__aeabi_f2d+0x1e>
    3004:	2300      	movs	r3, #0
    3006:	2600      	movs	r6, #0
    3008:	e7c9      	b.n	2f9e <__aeabi_f2d+0x1e>
    300a:	0003      	movs	r3, r0
    300c:	002a      	movs	r2, r5
    300e:	3b0b      	subs	r3, #11
    3010:	409a      	lsls	r2, r3
    3012:	2500      	movs	r5, #0
    3014:	e7e3      	b.n	2fde <__aeabi_f2d+0x5e>
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	800fffff 	.word	0x800fffff
    301c:	00000389 	.word	0x00000389
    3020:	000007ff 	.word	0x000007ff

00003024 <__aeabi_d2f>:
    3024:	b5f0      	push	{r4, r5, r6, r7, lr}
    3026:	004c      	lsls	r4, r1, #1
    3028:	0d64      	lsrs	r4, r4, #21
    302a:	030b      	lsls	r3, r1, #12
    302c:	1c62      	adds	r2, r4, #1
    302e:	0f45      	lsrs	r5, r0, #29
    3030:	0a5b      	lsrs	r3, r3, #9
    3032:	0552      	lsls	r2, r2, #21
    3034:	432b      	orrs	r3, r5
    3036:	0fc9      	lsrs	r1, r1, #31
    3038:	00c5      	lsls	r5, r0, #3
    303a:	0d52      	lsrs	r2, r2, #21
    303c:	2a01      	cmp	r2, #1
    303e:	dd28      	ble.n	3092 <__aeabi_d2f+0x6e>
    3040:	4a3a      	ldr	r2, [pc, #232]	; (312c <__aeabi_d2f+0x108>)
    3042:	18a6      	adds	r6, r4, r2
    3044:	2efe      	cmp	r6, #254	; 0xfe
    3046:	dc1b      	bgt.n	3080 <__aeabi_d2f+0x5c>
    3048:	2e00      	cmp	r6, #0
    304a:	dd3e      	ble.n	30ca <__aeabi_d2f+0xa6>
    304c:	0180      	lsls	r0, r0, #6
    304e:	0002      	movs	r2, r0
    3050:	1e50      	subs	r0, r2, #1
    3052:	4182      	sbcs	r2, r0
    3054:	0f6d      	lsrs	r5, r5, #29
    3056:	432a      	orrs	r2, r5
    3058:	00db      	lsls	r3, r3, #3
    305a:	4313      	orrs	r3, r2
    305c:	075a      	lsls	r2, r3, #29
    305e:	d004      	beq.n	306a <__aeabi_d2f+0x46>
    3060:	220f      	movs	r2, #15
    3062:	401a      	ands	r2, r3
    3064:	2a04      	cmp	r2, #4
    3066:	d000      	beq.n	306a <__aeabi_d2f+0x46>
    3068:	3304      	adds	r3, #4
    306a:	2280      	movs	r2, #128	; 0x80
    306c:	04d2      	lsls	r2, r2, #19
    306e:	401a      	ands	r2, r3
    3070:	d05a      	beq.n	3128 <__aeabi_d2f+0x104>
    3072:	3601      	adds	r6, #1
    3074:	2eff      	cmp	r6, #255	; 0xff
    3076:	d003      	beq.n	3080 <__aeabi_d2f+0x5c>
    3078:	019b      	lsls	r3, r3, #6
    307a:	0a5b      	lsrs	r3, r3, #9
    307c:	b2f4      	uxtb	r4, r6
    307e:	e001      	b.n	3084 <__aeabi_d2f+0x60>
    3080:	24ff      	movs	r4, #255	; 0xff
    3082:	2300      	movs	r3, #0
    3084:	0258      	lsls	r0, r3, #9
    3086:	05e4      	lsls	r4, r4, #23
    3088:	0a40      	lsrs	r0, r0, #9
    308a:	07c9      	lsls	r1, r1, #31
    308c:	4320      	orrs	r0, r4
    308e:	4308      	orrs	r0, r1
    3090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3092:	2c00      	cmp	r4, #0
    3094:	d007      	beq.n	30a6 <__aeabi_d2f+0x82>
    3096:	431d      	orrs	r5, r3
    3098:	d0f2      	beq.n	3080 <__aeabi_d2f+0x5c>
    309a:	2080      	movs	r0, #128	; 0x80
    309c:	00db      	lsls	r3, r3, #3
    309e:	0480      	lsls	r0, r0, #18
    30a0:	4303      	orrs	r3, r0
    30a2:	26ff      	movs	r6, #255	; 0xff
    30a4:	e7da      	b.n	305c <__aeabi_d2f+0x38>
    30a6:	432b      	orrs	r3, r5
    30a8:	d003      	beq.n	30b2 <__aeabi_d2f+0x8e>
    30aa:	2305      	movs	r3, #5
    30ac:	08db      	lsrs	r3, r3, #3
    30ae:	2cff      	cmp	r4, #255	; 0xff
    30b0:	d003      	beq.n	30ba <__aeabi_d2f+0x96>
    30b2:	025b      	lsls	r3, r3, #9
    30b4:	0a5b      	lsrs	r3, r3, #9
    30b6:	b2e4      	uxtb	r4, r4
    30b8:	e7e4      	b.n	3084 <__aeabi_d2f+0x60>
    30ba:	2b00      	cmp	r3, #0
    30bc:	d032      	beq.n	3124 <__aeabi_d2f+0x100>
    30be:	2080      	movs	r0, #128	; 0x80
    30c0:	03c0      	lsls	r0, r0, #15
    30c2:	4303      	orrs	r3, r0
    30c4:	025b      	lsls	r3, r3, #9
    30c6:	0a5b      	lsrs	r3, r3, #9
    30c8:	e7dc      	b.n	3084 <__aeabi_d2f+0x60>
    30ca:	0032      	movs	r2, r6
    30cc:	3217      	adds	r2, #23
    30ce:	db14      	blt.n	30fa <__aeabi_d2f+0xd6>
    30d0:	2280      	movs	r2, #128	; 0x80
    30d2:	271e      	movs	r7, #30
    30d4:	0412      	lsls	r2, r2, #16
    30d6:	4313      	orrs	r3, r2
    30d8:	1bbf      	subs	r7, r7, r6
    30da:	2f1f      	cmp	r7, #31
    30dc:	dc0f      	bgt.n	30fe <__aeabi_d2f+0xda>
    30de:	4a14      	ldr	r2, [pc, #80]	; (3130 <__aeabi_d2f+0x10c>)
    30e0:	4694      	mov	ip, r2
    30e2:	4464      	add	r4, ip
    30e4:	002a      	movs	r2, r5
    30e6:	40a5      	lsls	r5, r4
    30e8:	002e      	movs	r6, r5
    30ea:	40a3      	lsls	r3, r4
    30ec:	1e75      	subs	r5, r6, #1
    30ee:	41ae      	sbcs	r6, r5
    30f0:	40fa      	lsrs	r2, r7
    30f2:	4333      	orrs	r3, r6
    30f4:	4313      	orrs	r3, r2
    30f6:	2600      	movs	r6, #0
    30f8:	e7b0      	b.n	305c <__aeabi_d2f+0x38>
    30fa:	2400      	movs	r4, #0
    30fc:	e7d5      	b.n	30aa <__aeabi_d2f+0x86>
    30fe:	2202      	movs	r2, #2
    3100:	4252      	negs	r2, r2
    3102:	1b96      	subs	r6, r2, r6
    3104:	001a      	movs	r2, r3
    3106:	40f2      	lsrs	r2, r6
    3108:	2f20      	cmp	r7, #32
    310a:	d009      	beq.n	3120 <__aeabi_d2f+0xfc>
    310c:	4809      	ldr	r0, [pc, #36]	; (3134 <__aeabi_d2f+0x110>)
    310e:	4684      	mov	ip, r0
    3110:	4464      	add	r4, ip
    3112:	40a3      	lsls	r3, r4
    3114:	432b      	orrs	r3, r5
    3116:	1e5d      	subs	r5, r3, #1
    3118:	41ab      	sbcs	r3, r5
    311a:	2600      	movs	r6, #0
    311c:	4313      	orrs	r3, r2
    311e:	e79d      	b.n	305c <__aeabi_d2f+0x38>
    3120:	2300      	movs	r3, #0
    3122:	e7f7      	b.n	3114 <__aeabi_d2f+0xf0>
    3124:	2300      	movs	r3, #0
    3126:	e7ad      	b.n	3084 <__aeabi_d2f+0x60>
    3128:	0034      	movs	r4, r6
    312a:	e7bf      	b.n	30ac <__aeabi_d2f+0x88>
    312c:	fffffc80 	.word	0xfffffc80
    3130:	fffffc82 	.word	0xfffffc82
    3134:	fffffca2 	.word	0xfffffca2

00003138 <__clzsi2>:
    3138:	211c      	movs	r1, #28
    313a:	2301      	movs	r3, #1
    313c:	041b      	lsls	r3, r3, #16
    313e:	4298      	cmp	r0, r3
    3140:	d301      	bcc.n	3146 <__clzsi2+0xe>
    3142:	0c00      	lsrs	r0, r0, #16
    3144:	3910      	subs	r1, #16
    3146:	0a1b      	lsrs	r3, r3, #8
    3148:	4298      	cmp	r0, r3
    314a:	d301      	bcc.n	3150 <__clzsi2+0x18>
    314c:	0a00      	lsrs	r0, r0, #8
    314e:	3908      	subs	r1, #8
    3150:	091b      	lsrs	r3, r3, #4
    3152:	4298      	cmp	r0, r3
    3154:	d301      	bcc.n	315a <__clzsi2+0x22>
    3156:	0900      	lsrs	r0, r0, #4
    3158:	3904      	subs	r1, #4
    315a:	a202      	add	r2, pc, #8	; (adr r2, 3164 <__clzsi2+0x2c>)
    315c:	5c10      	ldrb	r0, [r2, r0]
    315e:	1840      	adds	r0, r0, r1
    3160:	4770      	bx	lr
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	02020304 	.word	0x02020304
    3168:	01010101 	.word	0x01010101
	...

00003174 <__libc_init_array>:
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	4e0d      	ldr	r6, [pc, #52]	; (31ac <__libc_init_array+0x38>)
    3178:	4d0d      	ldr	r5, [pc, #52]	; (31b0 <__libc_init_array+0x3c>)
    317a:	2400      	movs	r4, #0
    317c:	1bad      	subs	r5, r5, r6
    317e:	10ad      	asrs	r5, r5, #2
    3180:	d005      	beq.n	318e <__libc_init_array+0x1a>
    3182:	00a3      	lsls	r3, r4, #2
    3184:	58f3      	ldr	r3, [r6, r3]
    3186:	3401      	adds	r4, #1
    3188:	4798      	blx	r3
    318a:	42a5      	cmp	r5, r4
    318c:	d1f9      	bne.n	3182 <__libc_init_array+0xe>
    318e:	f000 fa2f 	bl	35f0 <_init>
    3192:	4e08      	ldr	r6, [pc, #32]	; (31b4 <__libc_init_array+0x40>)
    3194:	4d08      	ldr	r5, [pc, #32]	; (31b8 <__libc_init_array+0x44>)
    3196:	2400      	movs	r4, #0
    3198:	1bad      	subs	r5, r5, r6
    319a:	10ad      	asrs	r5, r5, #2
    319c:	d005      	beq.n	31aa <__libc_init_array+0x36>
    319e:	00a3      	lsls	r3, r4, #2
    31a0:	58f3      	ldr	r3, [r6, r3]
    31a2:	3401      	adds	r4, #1
    31a4:	4798      	blx	r3
    31a6:	42a5      	cmp	r5, r4
    31a8:	d1f9      	bne.n	319e <__libc_init_array+0x2a>
    31aa:	bd70      	pop	{r4, r5, r6, pc}
    31ac:	000035fc 	.word	0x000035fc
    31b0:	000035fc 	.word	0x000035fc
    31b4:	000035fc 	.word	0x000035fc
    31b8:	00003604 	.word	0x00003604

000031bc <memset>:
    31bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31be:	0783      	lsls	r3, r0, #30
    31c0:	d043      	beq.n	324a <memset+0x8e>
    31c2:	1e54      	subs	r4, r2, #1
    31c4:	2a00      	cmp	r2, #0
    31c6:	d03f      	beq.n	3248 <memset+0x8c>
    31c8:	b2ce      	uxtb	r6, r1
    31ca:	0002      	movs	r2, r0
    31cc:	2503      	movs	r5, #3
    31ce:	e002      	b.n	31d6 <memset+0x1a>
    31d0:	001a      	movs	r2, r3
    31d2:	3c01      	subs	r4, #1
    31d4:	d338      	bcc.n	3248 <memset+0x8c>
    31d6:	1c53      	adds	r3, r2, #1
    31d8:	7016      	strb	r6, [r2, #0]
    31da:	422b      	tst	r3, r5
    31dc:	d1f8      	bne.n	31d0 <memset+0x14>
    31de:	2c03      	cmp	r4, #3
    31e0:	d92a      	bls.n	3238 <memset+0x7c>
    31e2:	22ff      	movs	r2, #255	; 0xff
    31e4:	400a      	ands	r2, r1
    31e6:	0215      	lsls	r5, r2, #8
    31e8:	4315      	orrs	r5, r2
    31ea:	042a      	lsls	r2, r5, #16
    31ec:	4315      	orrs	r5, r2
    31ee:	2c0f      	cmp	r4, #15
    31f0:	d914      	bls.n	321c <memset+0x60>
    31f2:	0027      	movs	r7, r4
    31f4:	001a      	movs	r2, r3
    31f6:	3f10      	subs	r7, #16
    31f8:	093e      	lsrs	r6, r7, #4
    31fa:	3601      	adds	r6, #1
    31fc:	0136      	lsls	r6, r6, #4
    31fe:	199e      	adds	r6, r3, r6
    3200:	6015      	str	r5, [r2, #0]
    3202:	6055      	str	r5, [r2, #4]
    3204:	6095      	str	r5, [r2, #8]
    3206:	60d5      	str	r5, [r2, #12]
    3208:	3210      	adds	r2, #16
    320a:	4296      	cmp	r6, r2
    320c:	d1f8      	bne.n	3200 <memset+0x44>
    320e:	220f      	movs	r2, #15
    3210:	4397      	bics	r7, r2
    3212:	3710      	adds	r7, #16
    3214:	19db      	adds	r3, r3, r7
    3216:	4014      	ands	r4, r2
    3218:	2c03      	cmp	r4, #3
    321a:	d90d      	bls.n	3238 <memset+0x7c>
    321c:	001a      	movs	r2, r3
    321e:	1f27      	subs	r7, r4, #4
    3220:	08be      	lsrs	r6, r7, #2
    3222:	3601      	adds	r6, #1
    3224:	00b6      	lsls	r6, r6, #2
    3226:	199e      	adds	r6, r3, r6
    3228:	c220      	stmia	r2!, {r5}
    322a:	42b2      	cmp	r2, r6
    322c:	d1fc      	bne.n	3228 <memset+0x6c>
    322e:	2203      	movs	r2, #3
    3230:	4397      	bics	r7, r2
    3232:	3704      	adds	r7, #4
    3234:	19db      	adds	r3, r3, r7
    3236:	4014      	ands	r4, r2
    3238:	2c00      	cmp	r4, #0
    323a:	d005      	beq.n	3248 <memset+0x8c>
    323c:	b2c9      	uxtb	r1, r1
    323e:	191c      	adds	r4, r3, r4
    3240:	7019      	strb	r1, [r3, #0]
    3242:	3301      	adds	r3, #1
    3244:	429c      	cmp	r4, r3
    3246:	d1fb      	bne.n	3240 <memset+0x84>
    3248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    324a:	0014      	movs	r4, r2
    324c:	0003      	movs	r3, r0
    324e:	e7c6      	b.n	31de <memset+0x22>

00003250 <register_fini>:
    3250:	4b03      	ldr	r3, [pc, #12]	; (3260 <register_fini+0x10>)
    3252:	b510      	push	{r4, lr}
    3254:	2b00      	cmp	r3, #0
    3256:	d002      	beq.n	325e <register_fini+0xe>
    3258:	4802      	ldr	r0, [pc, #8]	; (3264 <register_fini+0x14>)
    325a:	f000 f805 	bl	3268 <atexit>
    325e:	bd10      	pop	{r4, pc}
    3260:	00000000 	.word	0x00000000
    3264:	00003279 	.word	0x00003279

00003268 <atexit>:
    3268:	b510      	push	{r4, lr}
    326a:	0001      	movs	r1, r0
    326c:	2300      	movs	r3, #0
    326e:	2200      	movs	r2, #0
    3270:	2000      	movs	r0, #0
    3272:	f000 f81b 	bl	32ac <__register_exitproc>
    3276:	bd10      	pop	{r4, pc}

00003278 <__libc_fini_array>:
    3278:	b570      	push	{r4, r5, r6, lr}
    327a:	4b09      	ldr	r3, [pc, #36]	; (32a0 <__libc_fini_array+0x28>)
    327c:	4c09      	ldr	r4, [pc, #36]	; (32a4 <__libc_fini_array+0x2c>)
    327e:	1ae4      	subs	r4, r4, r3
    3280:	10a4      	asrs	r4, r4, #2
    3282:	d009      	beq.n	3298 <__libc_fini_array+0x20>
    3284:	4a08      	ldr	r2, [pc, #32]	; (32a8 <__libc_fini_array+0x30>)
    3286:	18a5      	adds	r5, r4, r2
    3288:	00ad      	lsls	r5, r5, #2
    328a:	18ed      	adds	r5, r5, r3
    328c:	682b      	ldr	r3, [r5, #0]
    328e:	3c01      	subs	r4, #1
    3290:	4798      	blx	r3
    3292:	3d04      	subs	r5, #4
    3294:	2c00      	cmp	r4, #0
    3296:	d1f9      	bne.n	328c <__libc_fini_array+0x14>
    3298:	f000 f9b4 	bl	3604 <_fini>
    329c:	bd70      	pop	{r4, r5, r6, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	00003610 	.word	0x00003610
    32a4:	00003614 	.word	0x00003614
    32a8:	3fffffff 	.word	0x3fffffff

000032ac <__register_exitproc>:
    32ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ae:	46de      	mov	lr, fp
    32b0:	469b      	mov	fp, r3
    32b2:	4b31      	ldr	r3, [pc, #196]	; (3378 <__register_exitproc+0xcc>)
    32b4:	4645      	mov	r5, r8
    32b6:	681c      	ldr	r4, [r3, #0]
    32b8:	23a4      	movs	r3, #164	; 0xa4
    32ba:	464e      	mov	r6, r9
    32bc:	4657      	mov	r7, sl
    32be:	005b      	lsls	r3, r3, #1
    32c0:	b5e0      	push	{r5, r6, r7, lr}
    32c2:	0005      	movs	r5, r0
    32c4:	58e0      	ldr	r0, [r4, r3]
    32c6:	000e      	movs	r6, r1
    32c8:	4690      	mov	r8, r2
    32ca:	2800      	cmp	r0, #0
    32cc:	d04b      	beq.n	3366 <__register_exitproc+0xba>
    32ce:	6843      	ldr	r3, [r0, #4]
    32d0:	2b1f      	cmp	r3, #31
    32d2:	dc0d      	bgt.n	32f0 <__register_exitproc+0x44>
    32d4:	1c5c      	adds	r4, r3, #1
    32d6:	2d00      	cmp	r5, #0
    32d8:	d121      	bne.n	331e <__register_exitproc+0x72>
    32da:	3302      	adds	r3, #2
    32dc:	009b      	lsls	r3, r3, #2
    32de:	6044      	str	r4, [r0, #4]
    32e0:	501e      	str	r6, [r3, r0]
    32e2:	2000      	movs	r0, #0
    32e4:	bc3c      	pop	{r2, r3, r4, r5}
    32e6:	4690      	mov	r8, r2
    32e8:	4699      	mov	r9, r3
    32ea:	46a2      	mov	sl, r4
    32ec:	46ab      	mov	fp, r5
    32ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32f0:	4b22      	ldr	r3, [pc, #136]	; (337c <__register_exitproc+0xd0>)
    32f2:	2b00      	cmp	r3, #0
    32f4:	d03c      	beq.n	3370 <__register_exitproc+0xc4>
    32f6:	20c8      	movs	r0, #200	; 0xc8
    32f8:	0040      	lsls	r0, r0, #1
    32fa:	e000      	b.n	32fe <__register_exitproc+0x52>
    32fc:	bf00      	nop
    32fe:	2800      	cmp	r0, #0
    3300:	d036      	beq.n	3370 <__register_exitproc+0xc4>
    3302:	22a4      	movs	r2, #164	; 0xa4
    3304:	2300      	movs	r3, #0
    3306:	0052      	lsls	r2, r2, #1
    3308:	58a1      	ldr	r1, [r4, r2]
    330a:	6043      	str	r3, [r0, #4]
    330c:	6001      	str	r1, [r0, #0]
    330e:	50a0      	str	r0, [r4, r2]
    3310:	3240      	adds	r2, #64	; 0x40
    3312:	5083      	str	r3, [r0, r2]
    3314:	3204      	adds	r2, #4
    3316:	5083      	str	r3, [r0, r2]
    3318:	2401      	movs	r4, #1
    331a:	2d00      	cmp	r5, #0
    331c:	d0dd      	beq.n	32da <__register_exitproc+0x2e>
    331e:	009a      	lsls	r2, r3, #2
    3320:	4691      	mov	r9, r2
    3322:	4481      	add	r9, r0
    3324:	4642      	mov	r2, r8
    3326:	2188      	movs	r1, #136	; 0x88
    3328:	464f      	mov	r7, r9
    332a:	507a      	str	r2, [r7, r1]
    332c:	22c4      	movs	r2, #196	; 0xc4
    332e:	0052      	lsls	r2, r2, #1
    3330:	4690      	mov	r8, r2
    3332:	4480      	add	r8, r0
    3334:	4642      	mov	r2, r8
    3336:	3987      	subs	r1, #135	; 0x87
    3338:	4099      	lsls	r1, r3
    333a:	6812      	ldr	r2, [r2, #0]
    333c:	468a      	mov	sl, r1
    333e:	430a      	orrs	r2, r1
    3340:	4694      	mov	ip, r2
    3342:	4642      	mov	r2, r8
    3344:	4661      	mov	r1, ip
    3346:	6011      	str	r1, [r2, #0]
    3348:	2284      	movs	r2, #132	; 0x84
    334a:	4649      	mov	r1, r9
    334c:	465f      	mov	r7, fp
    334e:	0052      	lsls	r2, r2, #1
    3350:	508f      	str	r7, [r1, r2]
    3352:	2d02      	cmp	r5, #2
    3354:	d1c1      	bne.n	32da <__register_exitproc+0x2e>
    3356:	0002      	movs	r2, r0
    3358:	4655      	mov	r5, sl
    335a:	328d      	adds	r2, #141	; 0x8d
    335c:	32ff      	adds	r2, #255	; 0xff
    335e:	6811      	ldr	r1, [r2, #0]
    3360:	430d      	orrs	r5, r1
    3362:	6015      	str	r5, [r2, #0]
    3364:	e7b9      	b.n	32da <__register_exitproc+0x2e>
    3366:	0020      	movs	r0, r4
    3368:	304d      	adds	r0, #77	; 0x4d
    336a:	30ff      	adds	r0, #255	; 0xff
    336c:	50e0      	str	r0, [r4, r3]
    336e:	e7ae      	b.n	32ce <__register_exitproc+0x22>
    3370:	2001      	movs	r0, #1
    3372:	4240      	negs	r0, r0
    3374:	e7b6      	b.n	32e4 <__register_exitproc+0x38>
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	000035ec 	.word	0x000035ec
    337c:	00000000 	.word	0x00000000

00003380 <spi2MOSI>:
    3380:	0c000002 00000200                                .....

00003385 <spi2SCK>:
    3385:	0e000002 00000200                                .....

0000338a <spi2MISO>:
    338a:	0d000002 8d200000                                ......

00003390 <lookupTable.12368>:
    3390:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    33a0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    33b0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    33c0:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    33d0:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    33e0:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    33f0:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    3400:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    3410:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    3420:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    3430:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    3440:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    3450:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    3460:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    3470:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    3480:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    3490:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    34a0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    34b0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    34c0:	000f048e                                ....

000034c4 <senseBatPin>:
    34c4:	06000000 01000106                                .....

000034c9 <senseAPin>:
    34c9:	03010001 0100010b                                .....

000034ce <senseBPin>:
    34ce:	02010001 0000000a                                .....

000034d3 <senseCPin>:
    34d3:	03000000 00000001                                .....

000034d8 <senseDPin>:
    34d8:	02000000 00000000                                .....

000034dd <analogAccelPin>:
    34dd:	07000000 00000207                                .....

000034e2 <spi2MOSI>:
    34e2:	0c000002 00000200                                .....

000034e7 <spi2SCK>:
    34e7:	0e000002 001ad400 001aa400 001ab600     ................
    34f7:	0019f800 001ab600 001a9a00 001ab600     ................
    3507:	0019f800 001aa400 001aa400 001a9a00     ................
    3517:	0019f800 001a0000 001a0000 001a0000     ................
    3527:	001abc00 001aa400 001aa400 001a7800     .............x..
    3537:	001b5c00 001a7800 001a9a00 001a7800     .\...x.......x..
    3547:	001b5c00 001aa400 001aa400 001a9a00     .\..............
    3557:	001b5c00 001a0000 001a0000 001a0000     .\..............
    3567:	001b6600 001d0400 001c5400 001c5400     .f.......T...T..
    3577:	001c5200 001cf600 001cf600 001cec00     .R..............
    3587:	001c5200 001cf600 001cec00 001cf600     .R..............
    3597:	001c5200 001cfc00 001cfc00 001cfc00     .R..............
    35a7:	001d8c00 002bec00 002aac00 002aac00     ......+...*...*.
    35b7:	002aa800 002bc400 002bc400 002bb600     ..*...+...+...+.
    35c7:	002aa800 002bc400 002bb600 002bc400     ..*...+...+...+.
    35d7:	002aa800 002bcc00 002bcc00 002bcc00     ..*...+...+...+.
    35e7:	002dd000 00001000                                ..-..

000035ec <_global_impure_ptr>:
    35ec:	20000010                                ... 

000035f0 <_init>:
    35f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35f6:	bc08      	pop	{r3}
    35f8:	469e      	mov	lr, r3
    35fa:	4770      	bx	lr

000035fc <__init_array_start>:
    35fc:	00003251 	.word	0x00003251

00003600 <__frame_dummy_init_array_entry>:
    3600:	000000dd                                ....

00003604 <_fini>:
    3604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	bcf8      	pop	{r3, r4, r5, r6, r7}
    360a:	bc08      	pop	{r3}
    360c:	469e      	mov	lr, r3
    360e:	4770      	bx	lr

00003610 <__fini_array_start>:
    3610:	000000b5 	.word	0x000000b5
